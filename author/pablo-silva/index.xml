<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pablo Silva on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/pablo-silva/index.xml</link>
    <description>Recent content in Pablo Silva on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/pablo-silva/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Menos é mais com Android Annotations</title>
      <link>https://tableless.github.io/hugo-public/menos-e-mais-com-android-annotations/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/menos-e-mais-com-android-annotations/</guid>
      <description>&lt;p&gt;De todo o trabalho que você tem ao programar uma aplicação android, uma grande parte dele é por conta de todo o código &lt;em&gt;boilerplate&lt;/em&gt; que &lt;strong&gt;sempre&lt;/strong&gt; temos que fazer. Uma das coisas que mais me incomoda é que todos os recursos (&lt;em&gt;views e afins&lt;/em&gt;) precisam ser referenciados para poderem ser acessados e isso, dependendo da quantidade de recursos que você precisa ter na aplicação, pode resultar em muitas e muitas linhas de código. Se você precisar criar eventos, serviços, &lt;em&gt;broadcasts&lt;/em&gt;, _adapters_ ou rodar o código em uma nova _thread_  nem vou colocar em questão aqui!&lt;/p&gt;

&lt;p&gt;Nós que programamos para android acabamos nos &lt;del&gt;conformando&lt;/del&gt; acostumando com todo esse código e tempo perdido que ele gera para ser produzido porque, num fluxo normal de desenvolvimento, ele é inevitável. Sem falar em classes gigantes as quais precisaremos manter depois. E foi exatamente por estes motivos que as &lt;strong&gt;&lt;a href=&#34;http://androidannotations.org/&#34; target=&#34;_blank&#34;&gt;Android Annotations&lt;/a&gt; &lt;/strong&gt; foram criadas.&lt;/p&gt;

&lt;p&gt;Essas anotações fazem parte de um framework de código livre, que utiliza &lt;a href=&#34;https://pt.wikipedia.org/wiki/Inje%C3%A7%C3%A3o_de_depend%C3%AAncia&#34; target=&#34;_blank&#34;&gt;injeção de dependência&lt;/a&gt;, para nos ajudar a eliminar todo aquele &lt;em&gt;boilerplate&lt;/em&gt;, trocando-os por anotações. Uma vez que diminuímos a quantidade de código que temos que escrever, fica mais fácil de manter a aumentamos a velocidade com que desenvolvemos nossas aplicações.&lt;/p&gt;

&lt;p&gt;Vou demonstrar aqui como utilizar as _annotation__s _em alguns dos elementos que eu mencionei para que vocês vejam como é fácil e simples e como melhora o nosso código. Vamos supor que você tem uma &lt;em&gt;main activity&lt;/em&gt; com 5 views e precisará pegar o valor do usuário de todas elas, como acontece em um cadastro por exemplo.&lt;/p&gt;

&lt;p&gt;Primeiro vamos declarar nosso layout num arquivo XML (não estou me preocupando com a estética do layout)&lt;/p&gt;

&lt;pre class=&#34;xml&#34;&gt;&amp;lt;!-- activity_register.xml --&amp;gt;
&amp;lt;LinearLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;
    xmlns:tools=&#34;http://schemas.android.com/tools&#34;
    android:layout_width=&#34;fill_parent&#34;
    android:layout_height=&#34;fill_parent&#34;
    android:orientation=&#34;vertical&#34;
    android:layout_gravity=&#34;left&#34;
    android:gravity=&#34;left&#34; &amp;gt;

    &amp;lt;EditText
        android:id=&#34;@+id/name&#34;
        android:layout_width=&#34;wrap_content&#34;
        android:layout_height=&#34;wrap_content&#34;
        android:layout_marginTop=&#34;16dp&#34; /&amp;gt;

    &amp;lt;EditText
        android:id=&#34;@+id/address&#34;
        android:layout_width=&#34;wrap_content&#34;
        android:layout_height=&#34;wrap_content&#34; /&amp;gt;

    &amp;lt;EditText
        android:id=&#34;@+id/numberAddress&#34;
        android:layout_width=&#34;wrap_content&#34;
        android:layout_height=&#34;wrap_content&#34; /&amp;gt;

    &amp;lt;EditText
        android:id=&#34;@+id/telephone&#34;
        android:layout_width=&#34;wrap_content&#34;
        android:layout_height=&#34;wrap_content&#34; /&amp;gt;

    &amp;lt;EditText
        android:id=&#34;@+id/birthday&#34;
        android:layout_width=&#34;wrap_content&#34;
        android:layout_height=&#34;wrap_content&#34; /&amp;gt;
    
    &amp;lt;Button
        android:id=&#34;@+id/saveButton&#34;
        android:layout_width=&#34;140dp&#34;
        android:layout_height=&#34;wrap_content&#34;
        android:text=&#34;Save&#34; /&amp;gt;

&amp;lt;/LinearLayout&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e agora precisaremos criar a nossa &lt;em&gt;main activity&lt;/em&gt; para injetarmos nossas &lt;em&gt;views&lt;/em&gt; e obter as entradas do usuário. Da maneira normal fica assim&lt;/p&gt;

&lt;pre class=&#34;java&#34;&gt;public class Calculator extends Activity {
  private EditText name;
  private EditText address;
  private EditText numberAddress;
  private EditText telephone;
  private TextView birthday;
  private Button saveButton;

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_register);

    name = (EditText) findViewById(R.id.name);
    address = (EditText) findViewById(R.id.address);
    numberAddress = (EditText) findViewById(R.id.numberAddress);
    telephone = (EditText) findViewById(R.id.telephone);
    birthday = (EditText) findViewById(R.id.birthday);
    saveButton = (Button) findViewById(R.id.addButton);

    saveButton.setOnClickListener(new View.OnClickListener() {
      public void onClick(View v) {
       # save the information
       ...
      }
    });
  }
}
&lt;/pre&gt;

&lt;p&gt;Como era de se esperar, inflamos nosso &lt;em&gt;layout&lt;/em&gt; xml no método &lt;code&gt;onCreate&lt;/code&gt; e obtemos a referência de cada uma das &lt;em&gt;views&lt;/em&gt; das quais precisamos obter o valor (para o nosso caso todas). Além disso criamos um evento no botão de salvar, que obviamente tem a função de salvar nossos dados (não fiz a implementação disso aqui para manter simples o exemplo). Ao utilizarmos &lt;em&gt;Android Annotations&lt;/em&gt;, o nosso código fica assim&lt;/p&gt;

&lt;pre class=&#34;java&#34;&gt;@EActivity(R.layout.activity_register)
public class Calculator extends Activity {
  @ViewById EditText name;
  @ViewById EditText address;
  @ViewById EditText numberAddress;
  @ViewById EditText telephone;
  @ViewById TextView birthday;
  @ViewById Button saveButton;

  @Click
  public void saveButton() {
     # as views já estão referenciadas
     # name.getText(); já está disponível por exemplo

     # salvar as informações
     ...
  }
}
&lt;/pre&gt;

&lt;p&gt;Como vocês podem perceber de cara o código é bem menor. Não precisamos mais do método &lt;code&gt;onCreate&lt;/code&gt; porque para este exemplo espcificamente, a única coisa que estamos fazendo lá era inflando nossas views através do nosso layout e isso é feito automaticamente para nós utilizando a anotação &lt;code&gt;@EActivity&lt;/code&gt;. Em relação a referenciar as nossas &lt;em&gt;views&lt;/em&gt;, isso é feito somente adicionando a anotação &lt;code&gt;@ViewById&lt;/code&gt; antes de cada uma delas que queremos referenciar. Ao fazer isso nossas &lt;em&gt;views&lt;/em&gt; já estão prontas para serem acessadas. Algo que é importante de se saber é que para que as anotações tenham efeito, os atributos precisa ter o mesmo nome das ids que estão no xml, do contrário você precisará indicar a id da seguinte maneira&lt;/p&gt;

&lt;pre class=&#34;java&#34;&gt;@ViewById(R.id.name)
EditText name;
&lt;/pre&gt;

&lt;p&gt;o que eu não recomendo que você faça pois o interessante é utilizar todo o poder do &lt;em&gt;framework&lt;/em&gt; ao nosso favor. Outro elemente que não precisamos implementar foi o evento no botão de salvar, que foi substituído pela anotação &lt;code&gt;@Click&lt;/code&gt; que colocamos acima do método em que vamos tratar o nosso evento. Como vocês já devem ter percebido, o nome do método precisa ter como nome o nome do nosso botão referenciado logo acima.&lt;/p&gt;

&lt;p&gt;E isso é tudo que precisamos fazer para inflar nossas views e adicionar um evento no nosso botão. É claro que esse é um exemplo bem básico. Agora pense em um projeto grande com múltiplas &lt;em&gt;activities&lt;/em&gt; e &lt;em&gt;fragments&lt;/em&gt;, o quanto isso nos ajudaria a economizar tempo. E além do mais, o que eu mostrei aqui é só um pouquinho (pouquinho mesmo) do que se pode fazer com as anotações.&lt;/p&gt;

&lt;p&gt;Você pode conferir todo o poder que o AA tem visitando a seu &lt;a href=&#34;https://github.com/excilys/androidannotations/wiki/Cookbook&#34; target=&#34;_blank&#34;&gt;cookbook&lt;/a&gt;. Lá existem diversos exemplos que servem como _guideline _para você começar a utilizar o &lt;em&gt;framework&lt;/em&gt; hoje mesmo e parar de perder tempo escrevendo aquele mesmo código de novo e de novo em todos os seus projetos. Eu duvido que você vai se arrepender. Até a próxima!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>