<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>João A. Zonta on Tableless</title>
    <link>http://tableless.com.br/author/jo%C3%A3o-a.-zonta/index.xml</link>
    <description>Recent content in João A. Zonta on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/author/jo%C3%A3o-a.-zonta/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Aplicativos Desktop com NW.js – Node Webkit – Introdução</title>
      <link>http://tableless.com.br/aplicativos-desktop-com-nw-js-node-webkit-introducao/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/aplicativos-desktop-com-nw-js-node-webkit-introducao/</guid>
      <description>

&lt;h1 id=&#34;este-é-o-primeiro-artigo-de-uma-série-que-vou-escrever-sobre-aplicações-desktop-usando-tecnologias-web-html-css-javascript-e-webgl&#34;&gt;&lt;em&gt;&lt;strong&gt;Este é o primeiro artigo de uma série que vou escrever sobre aplicações desktop usando tecnologias web. (HTML, CSS, Javascript e WebGL)&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é uma aplicação em tempo de execução baseado em Chromium e Node.js, com ele é possível desenvolver aplicativos nativos para Windows, Linux e Mac, usando tecnologias web e usufruindo dos pacotes do Node.js.&lt;/p&gt;

&lt;p&gt;Para ter uma ideia do que é possível fazer, visite este link e veja alguns aplicativos desenvolvidos com NW.js -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é um projeto criado pela Intel. Outro projeto muito bom e conhecido para desenvolver aplicativos desktop usando tecnologias web é o &lt;strong&gt;Electron&lt;/strong&gt;, criado pelo GitHub. Segue um link comparativo entre os dois -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa série de artigos, vou explicar como criar um aplicativo desktop, com ícone personalizado e empacotado em um único executável. No último artigo, vou explicar como fazer uma integração com base de dados local, em tempo real e sem a necessidade de abrir portas ou fazer configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A versão mais atual do NW.js no momento em que eu escrevo este artigo é a &lt;strong&gt;&lt;em&gt;nwjs-v0.15.3&lt;/em&gt;&lt;/strong&gt;, é esta que estou usando. Além disso, estou usando Windows como sistema operacional.&lt;/p&gt;

&lt;p&gt;Vamos começar com um &amp;#8220;Olá Mundo&amp;#8221;, porém, vou explicar alguns recursos de &amp;#8220;Window&amp;#8221; e as configurações para iniciar o projeto.&lt;/p&gt;

&lt;p&gt;Primeiro faça o download do NW.js no site &lt;a href=&#34;http://nwjs.io/&#34;&gt;http://nwjs.io/&lt;/a&gt; &amp;#8211; Para desenvolvimento, baixe a versão SDK &amp;#8211; descompacte os arquivos em uma pasta que seja fácil para acessar pelo &lt;em&gt;prompt&lt;/em&gt; de comando &amp;#8211; eu costumo descompactar na pasta _c:\nwjs_&lt;/p&gt;

&lt;p&gt;Para uma aplicação básica funcionar, precisamos apenas de dois arquivos, o &lt;em&gt;package.json&lt;/em&gt;, que contém as configurações da nossa aplicação e o &lt;em&gt;index.html&lt;/em&gt;, que contém o código da nossa aplicação. Depois vamos adicionar arquivos .js e .css. Neste primeiro artigo, vamos brincar um pouco com o package.json.&lt;/p&gt;

&lt;p&gt;Crie um novo arquivo index.html &amp;#8211; vamos adicionar uma estrutura básica de HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Meu Primeiro Projeto&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Olá Mundo.&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Crie um novo arquivo package.json, com o código abaixo e salve na mesma pasta do HTML:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;
}&lt;/pre&gt;

&lt;p&gt;Somente com essas informações no package.json você já pode testar seu &amp;#8220;Olá Mundo&amp;#8221;. &amp;#8220;&lt;em&gt;name&lt;/em&gt;&amp;#8221; é o nome do projeto, e &amp;#8220;&lt;em&gt;main&lt;/em&gt;&amp;#8221; é o arquivo inicial da aplicação, sua &amp;#8220;página inicial&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Para executar nosso aplicativo, abra o &lt;em&gt;prompt&lt;/em&gt; de comando e vá até a pasta do seu projeto, no meu caso &amp;#8220;c:\projetos\olamundo&amp;#8221;, depois vamos executar o comando para o NW.js executar nosso projeto. Como estou usando o Windows, vou apontar para o nw.exe. No Linux ou no Mac é diferente, você pode olhar na documentação. Então nosso comando ficaria assim:&lt;/p&gt;

&lt;pre&gt;cd /path/to/your/app
/path/to/nw .&lt;/pre&gt;

&lt;p&gt;No meu caso:&lt;/p&gt;

&lt;pre&gt;cd c:\projetos\olamundo
c:\nwjs\nw.exe .&lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-54795 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/olamundo01.png&#34; alt=&#34;Tela Olá Mundo NW.js&#34; width=&#34;966&#34; height=&#34;535&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mais-sobre-o-package-json&#34;&gt;Mais sobre o package.json&lt;/h2&gt;

&lt;p&gt;O nosso package.json está muito simples, tem apenas um nome e o caminho do arquivo index. Vou explicar um pouco sobre as configurações &amp;#8220;window&amp;#8221;, que servem para controlar os botões de fechar, minimizar, informar os tamanhos mínimos e máximos, se a janela pode ser dimensionada e outras configurações.&lt;/p&gt;

&lt;p&gt;Abra o seu arquivo package.json e deixe ele como o exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;,
 &#34;version&#34;: &#34;1.0&#34;,
 &#34;description&#34;: &#34;Olá Mundo&#34;,
 &#34;window&#34;: {
 &#34;width&#34;: 400,
 &#34;height&#34;: 300,
 &#34;resizable&#34;: false,
 &#34;frame&#34;: true,
 &#34;title&#34;: &#34;Olá Mundo&#34;,
 &#34;show&#34;: true,
 &#34;fullscreen&#34;: false,
 &#34;kiosk&#34;: false,
 &#34;icon&#34;: &#34;icon.png&#34;
 }
}
&lt;/pre&gt;

&lt;p&gt;Execute novamente o aplicativo e veja como ficou. Abaixo, explico cada uma das configurações usadas.&lt;/p&gt;

&lt;pre&gt;name -&amp;gt; Nome do projeto
main -&amp;gt; Arquivo inicial
version -&amp;gt; Versão
description -&amp;gt; Descrição do projeto
window:
 width -&amp;gt; Largura da janela
 height -&amp;gt; Altura da janela
 resizable -&amp;gt; Se o tamanho da janela pode ser alterado ou não
 frame -&amp;gt; Quadro que envolve a aplicação com o título, ícone, botões de fechar, minimizar e maximizar
 title -&amp;gt; Título da janela
 show -&amp;gt; Se estiver como false você executa o aplicativo e ele fica em modo silencioso, 
  está rodando, mas não aparece. Fica apenas como um processo no Windows.
 fullscreen -&amp;gt; executa em tela cheia
 kiosk -&amp;gt; Executa em tela cheia e dificulta a saída da aplicação, normalmente é usado para exposições.
 icon -&amp;gt; Caminho para o ícone (deve estar na mesma pasta do projeto)&lt;/pre&gt;

&lt;p&gt;Você pode ver mais opções e detalhes na documentação: &lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34;&gt;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repositório com os fontes do primeiro artigo: &lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34;&gt;https://bitbucket.org/jzonta/artigos_nwjs&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;próximos-artigos-8211-aplicativos-desktop-com-nw-js-8211-node-webkit&#34;&gt;Próximos artigos &amp;#8211; Aplicativos Desktop com NW.js &amp;#8211; Node Webkit&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;1º &amp;#8211; Introdução&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Uma breve introdução, fazer um &amp;#8220;Olá Mundo&amp;#8221; e aprender um pouco sobre as configurações iniciais.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2º &amp;#8211; Menus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fazer um menu nativo da aplicação e um menu HTML, capturar as ações do botão de minimizar e alterar para minimizar o aplicativo para o System Try (Aqueles ícones pequenos ao lado do relógio) e vamos adicionar menu de opções no System Try.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3º &amp;#8211; Pacotes Node e Persistência de dados&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vamos aprender como usar os pacotes do Node.js, vamos instalar um pacote para persistir informações em um banco de dados MySql e também em um arquivo local.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4º &amp;#8211; Preparando para produção&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Como empacotar sua aplicação em um executável e adicionar um ícone para o Windows.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5º &amp;#8211; Integração web com base de dados local&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como fazer uma integração de uma aplicação web com um banco de dados local, através de uma api REST, sem a necessidade de abertura de portas ou configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Poste suas dúvidas e sugestões nos comentários!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Usando GIT para atualizar arquivos no servidor de hospedagem II – Final</title>
      <link>http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem-ii-final/</link>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem-ii-final/</guid>
      <description>

&lt;p&gt;Esta é a segunda e última parte do artigo que explica como fazer um esquema simples para deploy automático usando GIT + Bitbucket&lt;/p&gt;

&lt;p&gt;A mesma configuração pode ser usada em qualquer servidor GIT e qualquer serviço de hospedagem que tenha acesso via ssh e git instalado&lt;/p&gt;

&lt;p&gt;Se você ainda não leu a primeira parte, segue o link: &lt;a href=&#34;http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem&#34;&gt;http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No artigo anterior, criamos as chaves SSH para autenticação no Bitbucket, criamos um repositório GIT e manualmente executamos o comando | git pull | para atualizar o nosso repositório.&lt;/p&gt;

&lt;p&gt;Nessa segunda parte vamos executar o comando para atualização, de forma automatizada, sem precisar acessar o servidor. Vamos fazer um painel de controle para acompanhar os logs de deploy, mostrando se o comando foi executado com sucesso ou se aconteceu algum erro.&lt;/p&gt;

&lt;p&gt;Gostaria de lembrar que essa é uma solução simples, existem várias maneiras de fazer deploy automatizado, eu escolhi fazer usando php e shell_exec, é mais rápido e para projetos simples isso funciona muito bem. O mesmo pode ser feito usando &lt;a href=&#34;https://pt.wikipedia.org/wiki/CGI&#34;&gt;CGI&lt;/a&gt; ou &lt;a href=&#34;https://pt.wikipedia.org/wiki/Shell_script&#34;&gt;Shell Script&lt;/a&gt;, ou ainda você pode usar um serviço online como o heroku.com, ou configurar o Capistrano, ou Jenkins, etc&amp;#8230;&lt;/p&gt;

&lt;h4 id=&#34;o-comando-shell-exec-no-php&#34;&gt;O Comando shell_exec no PHP&lt;/h4&gt;

&lt;p&gt;No manual do php:&lt;/p&gt;

&lt;p&gt;(PHP 4, PHP 5, PHP 7)&lt;/p&gt;

&lt;p&gt;shell_exec — Executa um comando via shell e retorna a saída inteira como uma string&lt;/p&gt;

&lt;p&gt;Isso quer dizer que podemos executar um comando no servidor e ler o retorno desse comando, no nosso caso vamos executar o comando | git pull origin master | o mesmo comando que estávamos executando manualmente lá no servidor, lembra que tínhamos que acessar o servidor via putty, navegar até a pasta do nosso repositório e depois executar um git pull, já que isso é uma tarefa repetitiva, vamos automatizar, é isso que devemos fazer com todos os processos repetitivos.&lt;/p&gt;

&lt;p&gt;Em muitos servidores de hospedagem esse comando é bloqueado por padrão, se estiver bloqueado você vai receber um aviso parecido com esse:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;Warning:  shell_exec() has been disabled for security reasons in /var/www/deploy.php on line 10&lt;/pre&gt;

&lt;p&gt;No meu caso eu abri um chamado no painel da hospedagem, explicando que precisava da liberação para usar em um sistema de deploy automático usando GIT e prontamente fui atendido e o comando foi liberado.&lt;/p&gt;

&lt;p&gt;Vou usar o mesmo repositório que usei para a primeira parte, &lt;a href=&#34;https://bitbucket.org/jzonta/artigo_atualizacao_arquivos&#34;&gt;https://bitbucket.org/jzonta/artigo_atualizacao_arquivos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos Começar, e vamos usar um dos termos da metodologia XP &amp;#8211; Extremme Programing, &amp;#8220;Baby Steps&amp;#8221;, vamos executar todo o processo em pequenos passos, eu vou atualizar o repositório no GIT com todos os passos, você pode acessar e ver todos os commits &amp;#8211; inclusive os errados 🙂 &amp;#8211; é bacana pra ver a evolução do código.&lt;/p&gt;

&lt;p&gt;Vou criar uma pasta chamada deploy e dentro um arquivo chamado index.php, quando executado pelo navegador ele atualiza nosso servidor executando o comando git pull no servidor e imprimindo na tela o resultado do commnado.&lt;/p&gt;

&lt;p&gt;A pasta deploy deve ficar dentro da pasta do seu projeto, você pode ver a estrutura que usei no repositório desse artigo no Bitbucket.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Note que no final do comando git pull eu adicionei &amp;#8220;2&amp;gt;&amp;amp;1&amp;#8221; isso quer dizer que alem das saídas normais eu quero exibir as saídas de erro do nosso comando no servidor.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;index.php&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
    &amp;lt;?php
        $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
        echo $exec;
    ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A saída na tela é a mesma que aparece quando executamos o comando lá no servidor, veja o exemplo da saída no servidor e no navegador:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/comando_shell_navegador.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51941&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/comando_shell_navegador.jpg&#34; alt=&#34;comando_shell_navegador&#34; width=&#34;657&#34; height=&#34;210&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Lembre-se que para enviar esse arquivo ao servidor você não deve usar o ftp, faça isso utilizando o comando |git pull|, já fizemos isso na primeira parte do artigo.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Já estamos atualizando nosso servidor apenas acessando uma url em nosso navegador \o/, mas não é só isso que queremos, eu quero que essa url seja chamada sempre que eu enviar um push para o repositório, então acesse sua conta no Bitbucket e vamos configurar isso.&lt;/p&gt;

&lt;p&gt;Acesse seu repositório, no menu lateral esquerdo, clique em &amp;#8220;Configurações&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Na tela configurações clique em &amp;#8220;Webhooks&amp;#8221; e depois em &amp;#8220;Add Webhook&amp;#8221;&lt;/p&gt;

&lt;p&gt;No campo &amp;#8220;Title&amp;#8221; adicione um nome de sua preferência e no campo &amp;#8220;URL&amp;#8221; adicione o endereço para a sua url que executa o comando de atualização, no meu caso a URL é &amp;#8220;&lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php&amp;amp;#8221&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php&amp;amp;#8221&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;Mas não podemos deixar essa URL aberta, porque qualquer um poderia acessar e isso iria executar o comando git pull em nosso servidor, então vamos criar um token de autenticação, junto com a URL eu passo um token que mais tarde vamos validar lá no nosso código, então a URL ficaria assim: &lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php?token=d41d8cd98f00b204e9800998ecf8427e&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php?token=d41d8cd98f00b204e9800998ecf8427e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Use este site para gerar seu token: &lt;a href=&#34;http://www.miraclesalad.com/webtools/md5.php&#34;&gt;http://www.miraclesalad.com/webtools/md5.php&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/adicionar_webhook.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51940&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/adicionar_webhook.jpg&#34; alt=&#34;adicionar_webhook&#34; width=&#34;850&#34; height=&#34;439&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, toda vez que enviar um push para o Bitbucket ele vai acessar a URL, e nossa url vai disparar o comando |git pull| no servidor e os arquivos serão atualizados. Nosso deploy já esta funcionando, mas eu também quero visualizar os logs, para ter maior controle sobre oque esta acontecendo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/local_git_servidor.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51943&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/local_git_servidor.jpg&#34; alt=&#34;local_git_servidor&#34; width=&#34;444&#34; height=&#34;352&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*No seu repositório no Bitbucket, vc pode ver os requests que foram feitos entrando em &amp;#8220;Configurações&amp;#8221;, &amp;#8220;Web Hooks&amp;#8221;, ao lado do Title do seu webhook você clica em &amp;#8220;View Requests&amp;#8221; e pode ver todas as requisições que o Bitbucket fez para a sua URL.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;gravando-log&#34;&gt;Gravando Log&lt;/h4&gt;

&lt;p&gt;Primeiro vamos gerar o texto que queremos gravar no nosso arquivo de log, poderíamos apenas colocar a saída do comando shell_exec, mas vamos adicionar a data, hora e algumas quebras de linha para deixar o nosso log mais legível, veja como ficou o código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
    &amp;lt;?php
        $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
        echo $exec;

        $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
        $textoLog .= PHP_EOL.$exec;

        $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
        fwrite($arquivoLog, $textoLog);
        fclose($arquivoLog);
    ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Não precisa explicar muito o código php porque é bem simples, se alguém tem dúvida dobre alguma das funções usadas é só dar uma procurada no site do php (&lt;php.net&gt;) ou no google, tem bastante material.&lt;/p&gt;

&lt;p&gt;Se tudo está ocorrendo como planejado, quando você executar novamente seu endereço URL ele vai criar um arquivo chamado log.txt na mesma pasta, e gravar os logs neste arquivo.&lt;/p&gt;

&lt;h4 id=&#34;adicionando-token-de-validação&#34;&gt;Adicionando Token de Validação&lt;/h4&gt;

&lt;p&gt;Vamos deixar nosso deploy um pouco mais seguro. Lembra que na URL que adicionamos lá no webhook do Bitbucket colocamos um token? Então, agora vamos validar esse token.&lt;/p&gt;

&lt;p&gt;Criei uma variavel chamada $token e adicionei a nossa string MD5&lt;/p&gt;

&lt;p&gt;Depois a variavel $tokenValido recebe true se o token enviado via post ou get for igual ao token que configuramos na variavel $token, caso contrário recebe false.&lt;/p&gt;

&lt;p&gt;Depois verificamos se $tokenValido for igual a true executa o deploy se não exibe o log e um botão para atualizar manualmente.&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;pre&amp;gt;
    &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else {
            //Deve exibir o log e um botão para para executar a atualização
        }
    ?&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;implementando-a-leitura-do-log-e-botão-para-atualizar&#34;&gt;Implementando a Leitura do Log e Botão Para Atualizar&lt;/h4&gt;

&lt;p&gt;No código abaixo foi adiciona a implementação que lê o arquivo de log através do comando file() e depois exibe na tela, também foi adicionado um formulário com o botão &amp;#8220;Atualizar&amp;#8221;, caso ocorra alguma falha na atualização automática através do webhook esse botão pode ser utilizado para forçar essa atualização e executar o nosso deploy.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
        &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else {
        ?&amp;gt;
            &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
                &amp;lt;input type=&#34;hidden&#34; name=&#34;token&#34; value=&#34;d41d8cd98f00b204e9800998ecf8427e&#34;&amp;gt;
                &amp;lt;input type=&#34;submit&#34; value=&#34;Atualizar&#34;&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;?php
        $texto = file(&#39;log.txt&#39;);
        foreach ($texto as $linha) {
            echo $linha;
        }
        }
        ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;adicionando-autenticação&#34;&gt;Adicionando Autenticação&lt;/h4&gt;

&lt;p&gt;Tudo funcionando, mas qualquer um pode entrar na nossa URL, visualizar os logs e clicar no botão para atualizar o servidor.&lt;/p&gt;

&lt;p&gt;Então vou implementar uma autenticação simples, iniciando uma sessão e usando a variável $senhaAcesso, então nossas regras seriam as seguintes:&lt;/p&gt;

&lt;p&gt;Se receber o token, faz a validação, se estiver correto, atualiza o nosso servidor&lt;/p&gt;

&lt;p&gt;Se receber a senhaAcesso, faz a validação se estiver correto, mostra o log e o botão para atualizar&lt;/p&gt;

&lt;p&gt;Se não receber o token e nem a senhaAcesso mostra um form solicitando a senha&lt;/p&gt;

&lt;p&gt;Nosso código tem apenas 3 condições no if, eu preferi deixar assim pra ficar mais fácil de entender, as condições separadas para ficar mais fácil de entender:&lt;/p&gt;

&lt;pre&gt;if($tokenValido) {
            // Se o toquem for válido
            // Executa o comando git pull para atualizar o servidor e grava o log
        } else if($_SESSION[&#39;usuarioValido&#39;]) {
            // Se o usuário estiver logado mostra o log e o botão para atualizar
        } else {
            //Se o usuário não estiver logado mostra o formulário para logar
        }
&lt;/pre&gt;

&lt;p&gt;Abaixo o código completo desta etapa:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
session_start();
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
$senhaAcesso = &#39;joaozonta&#39;;

if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;

if($_REQUEST[&#39;senhaAcesso&#39;] == $senhaAcesso &amp;&amp; empty($_SESSION[&#39;usuarioValido&#39;]))
    $_SESSION[&#39;usuarioValido&#39;] = true;

if($_REQUEST[&#39;sair&#39;])
    unset($_SESSION[&#39;usuarioValido&#39;]);
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;pre&amp;gt;
    &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else if($_SESSION[&#39;usuarioValido&#39;]) {
        ?&amp;gt;
        &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
            &amp;lt;input type=&#34;hidden&#34; name=&#34;token&#34; value=&#34;d41d8cd98f00b204e9800998ecf8427e&#34;&amp;gt;
            &amp;lt;input type=&#34;submit&#34; value=&#34;Atualizar&#34;&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;?php
        if($_SESSION[&#39;usuarioValido&#39;])
            echo &#39;&amp;lt;p&amp;gt;&amp;lt;a href=&#34;index.php?sair=true&#34;&amp;gt;Sair&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#39;;
            $texto = file(&#39;log.txt&#39;);
            foreach ($texto as $linha) {
                echo $linha;
            }
        } else {
        ?&amp;gt;
        &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type=&#34;text&#34; placeholder=&#34;Senha&#34; name=&#34;senhaAcesso&#34;&amp;gt; 
            &amp;lt;/div&amp;gt;
            &amp;lt;input type=&#34;submit&#34; value=&#34;Acessar Sistema&#34;&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;?php
        }
    ?&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h4&gt;

&lt;p&gt;De uma maneira muito simples você pode atualizar seu servidor sem depender de um sistema complexo de deploy e sem muitas configurações.&lt;/p&gt;

&lt;p&gt;Você pode implementar muitas outras opções para deixar o seu sistema cada vez mais completo, pode adicionar um botão para limpar o log ou adicionar o log em um banco de dados. Já imaginou mostrar um combo com os últimos commits realizados e você escolher qual desses commits você quer atualizar no servidor, podendo assim voltar e avançar versões.&lt;/p&gt;

&lt;p&gt;Não falei sobre banco de dados nesse artigo, acho que isso pode ser tratado em outro tópico.&lt;/p&gt;

&lt;p&gt;Você pode ver o exemplo funcionando em &lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/&lt;/a&gt;, use a senha &amp;#8220;joaozonta&amp;#8221;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;No exemplo que esta no ar foram comentadas as linhas que fazem o deploy automático, está apenas simulando o funcionamento.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fique á vontade para entrar em contato para qualquer dúvida, sugestão, crítica ou erro que encontrar nesse artigo.&lt;/p&gt;

&lt;p&gt;João A. Zonta&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.joaozonta.com.br&#34;&gt;joaozonta.com.br&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/joaozontaweb&#34;&gt;@joaozontaweb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;mailto:joao@joaozonta.com.br&#34;&gt;joao@joaozonta.com.br&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Usando GIT para atualizar arquivos no servidor de hospedagem</title>
      <link>http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem/</link>
      <pubDate>Thu, 08 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem/</guid>
      <description>

&lt;h2 id=&#34;solução-usando-bitbucket-kinghost&#34;&gt;Solução usando Bitbucket + Kinghost&lt;/h2&gt;

&lt;p&gt;A mesma configuração pode ser usada em qualquer servidor GIT e qualquer serviço de hospedagem que tenha acesso via ssh e git instalado&lt;/p&gt;

&lt;p&gt;Vamos imaginar um cenário em que você está desenvolvendo um site, nesse site você tem vários arquivos, distribuídos em pastas separadas, css, javascript, html, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;Sempre que você altera algum arquivo, precisa enviar por FTP, para atualizar seu site. Um fluxo (&lt;a href=&#34;http://elcio.com.br/pare-de-usar-ftp/&#34;&gt;antigo&lt;/a&gt;), mas parece ser ainda muito normal (&lt;a href=&#34;http://tableless.com.br/tornar-dev-front-end/&#34;&gt;infelizmente&lt;/a&gt;) por aí. As vezes você faz várias alterações e pode esquecer de enviar alguma coisa, ou você não sabe se já atualizou ou não, ou então você mandou alguma coisa errada para o servidor e seu site parou de funcionar, como fazer para voltar a versão anterior?&lt;/p&gt;

&lt;p&gt;Com o GIT esse problema é solucionado, você pode voltar para a versão desejada com apenas um comando git, atualizar apenas os arquivos que foram alterados e muito mais.&lt;/p&gt;

&lt;h4 id=&#34;requisitos-para-executar-este-tutorial&#34;&gt;Requisitos para executar este tutorial:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Conta no site &lt;a href=&#34;https://bitbucket.org/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://bitbucket.org/&#34;&gt;https://bitbucket.org/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Serviço de hospedagem linux com acesso SSH&lt;/li&gt;
&lt;li&gt;Cliente GIT instalado na sua máquina &amp;#8211; &lt;a href=&#34;https://git-scm.com/downloads&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Putty, baixe o pacote completo, é um arquivo .zip com os binários para windows &amp;#8211; &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34;&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Antes de tudo vamos criar nossa chave de ssh no windows, essa chave serve para autenticação no bitbucket, com a chave ativa no windows você não precisa ficar digitando seu login e senha para autenticar;&lt;/p&gt;

&lt;p&gt;Descompacte o arquivo putty.zip e execute o arquivo PUTTYGEN.EXE;&lt;/p&gt;

&lt;p&gt;Clique em |Generate|, para que a chave seja criada você deve movimentar o mouse na área em branco do programa e esperar a barra de progresso chegar até o final:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/puttygen_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51450&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/puttygen_01.jpg&#34; alt=&#34;puttygen_01&#34; width=&#34;492&#34; height=&#34;476&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clique em |Save private key|, vai aparecer uma janela avisando que não definimos um passphrase, clique em sim e salve sua chave.ppk, o arquivo ppk é usado para identificar seu computador no bitbucket, vamos usa-lo mais tarde.&lt;/p&gt;

&lt;p&gt;Ainda no PuttyGen, vamos copiar a nossa chave |Public Key| para inserir no bitbucket.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/puttygen_02.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51451&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/puttygen_02.jpg&#34; alt=&#34;puttygen_02&#34; width=&#34;492&#34; height=&#34;476&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abra o bitbucket, clique em |Gerenciar conta| &amp;gt; |Chaves SSH| &amp;gt; |Adicionar Chave|;&lt;/p&gt;

&lt;p&gt;Na janela que abrir escolha um nome para identificar a chave, pode ser qualquer nome, e no campo key cole a chave que copiamos lá do PuttyGen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/chave_bitbucket.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51443&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/chave_bitbucket.jpg&#34; alt=&#34;chave_bitbucket&#34; width=&#34;786&#34; height=&#34;466&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Já pode fechar o PuttyGen, vamos agora inicializar a chave no computador, execute o PAGEANT.EXE, quando você executa aparece um ícone na barra de tarefas ao lado do relógio do windows, clique duas vezes para abrir o PAGEANT;&lt;/p&gt;

&lt;p&gt;Com o PAGEANT aberto, clique em |Add Key| e selecione o arquivo .ppk que salvamos anteriormente, depois pode fechar o PAGEANT, ele vai ficar minimizado na barra de tarefas.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h4 id=&#34;criando-repositório-no-bitbucket&#34;&gt;Criando repositório no Bitbucket&lt;/h4&gt;

&lt;p&gt;Depois de logado no site do bitbucket, clique em criar e selecione a opção criar repositório;&lt;/p&gt;

&lt;p&gt;Na tela a seguir você deve escolher um nome, aqui vou usar o nome |artigo_atualizacao_arquivos|;&lt;/p&gt;

&lt;p&gt;Nos níveis de acesso você escolhe se vai ser um repositório privado ou público, se for privado somente as pessoas que você conceder permissão terão acesso, no meu caso criei um repositório público;&lt;/p&gt;

&lt;p&gt;Não precisa mexer no restante das configurações, veja abaixo como ficou:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51444&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_01.jpg&#34; alt=&#34;configuracao_bitbucket_01&#34; width=&#34;614&#34; height=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após essa etapa vai aparecer uma tela de confirmação dizendo que o repositório está vazio e algumas dicas de como configurar, vamos criar um repositório do zero.&lt;/p&gt;

&lt;p&gt;No seu computador abra o terminal e vamos verificar se o git está instalado, digite |git &amp;#8211;version| se o git estiver instalado você deve ver uma mensagem dizendo qual a versão você tem instalada;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Caso não tenha o GIT instalado ainda, faça o download e instale &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ainda no terminal navegue até a pasta que vai ter o conteúdo do seu repositório, caso necessário crie uma;&lt;/p&gt;

&lt;p&gt;Digite |git init| para iniciar um novo repositório local;&lt;/p&gt;

&lt;p&gt;No bitbucket, selecione o seu repositório, depois no menu a esquerda, clique em clonar, vai abrir uma janela, selecione ssh e copie o texto que tem no campo ao lado;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_02.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51445&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_02.jpg&#34; alt=&#34;configuracao_bitbucket_02&#34; width=&#34;667&#34; height=&#34;390&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cole o texto copiado no seu terminal e espere a mensagem de confirmação, deve ser parecida com a mensagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_windows.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51448&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_windows.jpg&#34; alt=&#34;configuracao_git_windows&#34; width=&#34;657&#34; height=&#34;282&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Entre na pasta do seu repositório e crie um arquivo para fazer nosso primeiro commit, eu criei um arquivo chamado &amp;#8220;artigo.html&amp;#8221;;&lt;/p&gt;

&lt;p&gt;Depois de criar o arquivo vamos adicionar ao commit com o comando |git add artigo.html-|&lt;/p&gt;

&lt;p&gt;Agora vamos fazer o commit |git commit -m &amp;#8220;Primeiro Commit|&lt;/p&gt;

&lt;p&gt;Depois enviar para o servidor com o comando |git push -u origin master|&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_windows_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51449&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_windows_01.jpg&#34; alt=&#34;configuracao_git_windows_01&#34; width=&#34;657&#34; height=&#34;301&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nossa configuração no windows já está pronta, já pode enviar e receber arquivos do repositório, agora vamos configurar nosso servidor de hospedagem.&lt;/p&gt;

&lt;p&gt;Abra o putty e faça uma conexão ssh com o servidor, vamos fazer o mesmo processo do windows para saber se o git está instalado;&lt;/p&gt;

&lt;p&gt;|git &amp;#8211;version|&lt;/p&gt;

&lt;p&gt;Vamos criar a chave de ssh para autenticar no bitbucket sem usar senha:&lt;/p&gt;

&lt;p&gt;Digite |ssh-keygen|, vc vai ver uma mensagem pedindo em qual arquivo você quer salvar a chave, ao lado ele exibe uma sugestão, se apertar Enter sem escrever nada ele vai usar o arquivo padrão que foi sugerido, se o arquivo já existir vai pedir pra substituir, confirme |Y|, no meu caso usei o arquivo sugerido;&lt;/p&gt;

&lt;p&gt;Logo após vai pedir o passphrase, novamente é só apertar Enter, pode deixar em branco;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_linux_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51446&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_linux_01.jpg&#34; alt=&#34;configuracao_git_linux_01&#34; width=&#34;652&#34; height=&#34;409&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se você usou o arquivo padrão para gerar a chave digite |cat ~/.ssh/id_rsa.pub| para visualizar a sua chave, copie esse código, e adicione uma nova chave no bitbucket com essa chave, da mesma maneira que fizemos com a chave que foi criada no windows.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_linux_02.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51447&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_linux_02.jpg&#34; alt=&#34;configuracao_git_linux_02&#34; width=&#34;642&#34; height=&#34;131&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, agora vamos clonar nosso repositório, da mesma maneira que fizemos no windows, abra o repositório no bitbucket, depois no menu a esquerda, clique em clonar, vai abrir uma janela, selecione ssh e copie o texto que tem no campo ao lado;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_02.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51445&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_02.jpg&#34; alt=&#34;configuracao_bitbucket_02&#34; width=&#34;667&#34; height=&#34;390&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Execute o comando no seu terminal ssh;&lt;/p&gt;

&lt;p&gt;Agora que seu repositório já esta configurado você pode usar o comando |git pull| para atualizar os arquivos sempre que quiser.&lt;/p&gt;

&lt;p&gt;Ou pode voltar uma versão usando |git checkout| vale a penas estudar um pouco os comandos do git e entender todos os seus recursos.&lt;/p&gt;

&lt;p&gt;Link para material de estudo sobre o GIT: &lt;a href=&#34;http://pt.slideshare.net/slide_user/magia-git&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://pt.slideshare.net/slide_user/magia-git&#34;&gt;http://pt.slideshare.net/slide_user/magia-git&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link oficial do git: &lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;https://git-scm.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ATENÇÃO: para evitar conflitos no git não use mais FTP nas pastas que você está usando versionamento através do GIT&lt;/p&gt;

&lt;p&gt;No próximo artigo vou explicar como fazer o deploy automático usando php, sempre que o GIT for atualizado ele envia um aviso ao servidor que executa os comandos para atualizar os arquivos.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>