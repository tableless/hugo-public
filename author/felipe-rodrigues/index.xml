<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Felipe Rodrigues on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/felipe-rodrigues/index.xml</link>
    <description>Recent content in Felipe Rodrigues on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/felipe-rodrigues/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Condições ternárias</title>
      <link>https://tableless.github.io/hugo-public/condicoes-ternarias/</link>
      <pubDate>Wed, 04 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/condicoes-ternarias/</guid>
      <description>&lt;p&gt;Algumas condições simples precisam de muito código para definir uma atribuição.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var isIphone = false;
var os;

if (isIphone) {
  os = &#34;iOS&#34;;
} else {
  os = &#34;Android&#34;;
}
&lt;/pre&gt;

&lt;p&gt;O código precisa de dois blocos para definir uma única atribuição. Podemos usar condições ternárias para tornar o código mais conciso.&lt;/p&gt;

&lt;p&gt;A condição ternária oferece um atalho mais rápido que os longos blocos de condicionais tradicionais.&lt;/p&gt;

&lt;p&gt;Pra fazer uma condição ternária, colocamos primeiro a condição, seguida pelo operador que divide a condicional entre condição e as ações a serem tomadas.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;algumaCondicional ? acaoSeVerdadeiro : acaoSeFalso;
&lt;/pre&gt;

&lt;p&gt;Uma das ações será executada de acordo com o resultado da condição.&lt;/p&gt;

&lt;p&gt;Voltando ao primeiro código de exemplo, vamos transformá-lo numa condição ternária.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var isIphone = false;
var os;

isIphone ? &#34;iOS&#34; : &#34;Android&#34;;
&lt;/pre&gt;

&lt;p&gt;Essa condição ternária já está retornando o resultado correto, mas podemos armazenar em uma variável para facilitar a utilização.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var isIphone = false;
var os = isIphone ? &#34;iOS&#34; : &#34;Android&#34;;
&lt;/pre&gt;

&lt;p&gt;Uma vez que uma condição ternária sempre retorna um resultado, podemos utilizá-lo de várias formas.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var isIphone = false;
var os = isIphone ? &#34;iOS&#34; : &#34;Android&#34;;

console.log(&#34;Sistema operacional atual: &#34; + os);
&lt;/pre&gt;

&lt;p&gt;Caso você só precise utilizar o resultado apenas uma vez, podemos eliminar a atribuição.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var isIphone = false;

console.log(&#34;Sistema operacional atual: &#34; + isIphone ? &#34;iOS&#34; : &#34;Android&#34;);
&lt;/pre&gt;

&lt;p&gt;O problema é que esse código vai gerar um erro por que o operador “?” tem uma precedência menor que o operador &amp;#8220;+&amp;#8221;. O operador &amp;#8220;+&amp;#8221; vai avaliar a variável e adicioná-la a uma string antes do operador “?” checar a condição, ou seja, temos um grande problema. O resultado não é o esperado e o programa não funciona da forma que deveria.&lt;/p&gt;

&lt;p&gt;Para resolver o problema devemos colocar nossa condição entre “()” e garantir que nossa condição será checada corretamente. Dessa forma, a condição ternária estará perfeitamente isolada.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var isIphone = false;

console.log(&#34;Sistema operacional atual: &#34; + (isIphone ? &#34;iOS&#34; : &#34;Android&#34;));
&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>