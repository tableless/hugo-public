<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Giovanni Keppelen on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/giovanni-keppelen/index.xml</link>
    <description>Recent content in Giovanni Keppelen on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/giovanni-keppelen/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Web Móvel e suas aplicações</title>
      <link>https://tableless.github.io/hugo-public/web-movel-e-suas-aplicacoes/</link>
      <pubDate>Mon, 07 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/web-movel-e-suas-aplicacoes/</guid>
      <description>

&lt;p&gt;Compreender os seus pontos fortes e suas limitações, e utilização de tecnologias que se encaixam nessas condições são fundamentais para criar o sucesso de conteúdo.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-especifico-para-criação-em-dispositivos-móveis&#34;&gt;O que é especifico para criação em dispositivos móveis&lt;/h2&gt;

&lt;p&gt;Idealmente, os autores de sites seriam capaz de atender à crescente demanda por uma experiência móvel de qualidade, sem mudar uma linha de código. Mas a realidade é que um site projetado especificamente com mobilidade em mente sempre nos proporciona uma experiência de usuário muito melhor para os usuários móveis.&lt;/p&gt;

&lt;p&gt;As razões para isso incluem os desafios colocados por custos de rede e atrasos, memória e limitações de CPU, teclado e diferentes dispositivos. Como importante, eles apresentam um conjunto crescente de vantagens com a sua natureza pessoal e sempre disponível, e cada vez mais sensíveis ao contexto.&lt;/p&gt;

&lt;p&gt;Como resultado, a experiência móvel muitas vezes merecem seu próprio conjunto de considerações de desing, como discutido em um crescente corpo de literatura, como: &lt;a href=&#34;http://www.w3.org/standards/techs/mobile&#34;&gt;Autoria Web móvel&lt;/a&gt; e de &lt;a href=&#34;http://www.w3.org/standards/techs/deviceindependenceauthoring&#34;&gt;dispositivos independentes de autoria&lt;/a&gt;. Os usuários móveis operam um um contexto de uso muito diferente do que os usuários de PC.&lt;/p&gt;

&lt;p&gt;Uma série de barreiras que enfrentam os usuários móveis são semelhantes às dividas por pessoas com deficiência. Estas semelhanças tornam natural para visar o desenvolvimento de sites que são acessíveis tanto para as pessoas com deficiência e para os dispositivos móveis.&lt;/p&gt;

&lt;h2 id=&#34;quais-tecnologias-foram-desenvolvidas-para-os-dispositivos-móveis&#34;&gt;Quais tecnologias foram desenvolvidas para os dispositivos móveis&lt;/h2&gt;

&lt;p&gt;Nos últimos anos, o W3C tem desenvolvido uma série de tecnologias que explicitamente levam em conta as especifidades dos dispositivos móveis.&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://www.w3.org/standards/techs/cssmobile&#34;&gt;CSS móvel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://www.w3.org/standards/techs/svgmobile&#34;&gt;SVG Tiny&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://www.w3.org/standards/techs/xhtmlmobile&#34;&gt;XHTML para celular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A última geração de navegadores móveis são capazes de usar as tecnologias da web mais avançads, incluindo recursos de &lt;a href=&#34;http://www.w3.org/standards/techs/html&#34;&gt;HTML 5&lt;/a&gt;, &lt;a href=&#34;http://www.w3.org/standards/techs/css&#34;&gt;CSS 2.1 e 3&lt;/a&gt; e claro &lt;a href=&#34;http://www.w3.org/standards/techs/js&#34;&gt;ricas APIs JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h2&gt;

&lt;p&gt;O Mobile Web criou um &lt;a href=&#34;http://www.w3.org/Mobile/training/&#34;&gt;programa de treinamento&lt;/a&gt; para ajudar os web designers e produtores de conteúdo que já estão familiarizados com o mundo ambiente de trabalho para se familiarizar com a web.&lt;/p&gt;

&lt;p&gt;Saiba mais sobre o estado atual de especificações relativas a:&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://www.w3.org/standards/techs/mobile#w3c_all&#34;&gt;Mobile web Authoring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://www.w3.org/standards/techs/cssmobile&#34;&gt;CSS Móvel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://www.w3.org/standards/techs/svgmobile&#34;&gt;SVG Tiny&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://www.w3.org/standards/techs/xhtmlmobile&#34;&gt;XHTML para celuar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://www.w3.org/standards/techs/mw4d&#34;&gt;Web móvel para o desenvolvimento social&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>“HTTP Archive” Ferramenta para performance</title>
      <link>https://tableless.github.io/hugo-public/http-archive-ferramenta-para-performance/</link>
      <pubDate>Wed, 30 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/http-archive-ferramenta-para-performance/</guid>
      <description>

&lt;p&gt;Este é o primeiro post sobre um tema que ainda não temos falado muito aqui no tableless, mas é um tema muito importante tanto para nós Front-end quanto para Back-end&amp;#8217;s que é a &lt;strong&gt;performance&lt;/strong&gt;. Hoje mostrarei uma ferramenta para analisar a performance do seu projeto web.&lt;/p&gt;

&lt;h2 id=&#34;a-ferramenta-http-archive&#34;&gt;A ferramenta HTTP Archive&lt;/h2&gt;

&lt;p&gt;Este projeto iniciou-se no começo de novembro de 2010, através de análises de Urls e armazenamento de suas informações (subresource URLs, HTTP headers, sizes, etc.) em banco de dados. Falando em resumo do que se trata essa ferramenta: ela grava os dados de seu site e retorna toda uma lista com esses dados tais como Page Speed, Requests, status entre outros. Ele também gera esses dados para download, facilitando a analise. O mais legal é o Filmstrip de video, onde é gerado thumbs, mostrando o que o usuario está vendo a cada segundo que seu site esta sendo carregado. Ele mostra também uma trend do seu HTML, CSS, JS que esta sendo carregado com um gráfico.&lt;/p&gt;

&lt;p&gt;Essas são umas das opções que ele dispões e vale a pena o uso da ferramenta. Ajuda muito para aqueles que querem ter uma analise sobre o seu projeto, isso pode ser que para alguns não é util como para site institucionais onde o cliente pouco importa com isso, mas para aqueles que se importam ou trabalham em algum portal ou sistema grande.&lt;/p&gt;

&lt;h2 id=&#34;missão-do-http-archive&#34;&gt;Missão do HTTP Archive&lt;/h2&gt;

&lt;p&gt;Instituições bem sucedidas reconhecem a necessidade de registrar sua história &amp;#8211; isso fornece uma maneira de rever o passado. Em 1996, Brewster Kahle percebeu o significado &amp;#8220;cultural&amp;#8221; da internet e a necessidade de registrar sua história. Como resultado ele fundou o  &lt;a href=&#34;http://archive.org/&#34;&gt;Internet Archive&lt;/a&gt; que coleta e armazena permanentemente conteúdo digitalizado da web.&lt;/p&gt;

&lt;p&gt;Além do conteúdo das páginas web, é importante registrar como esse conteúdo digitalizado é construido e servido. O HTTP Archive fornece esse registro.&lt;/p&gt;

&lt;p&gt;Em novembro de 2011 o HTTP Archive começou a aumentar os registros de Urls de 10k para 25k, 50k, 75k, e agora neste mês chegaram a 100 mil, o objetivo do HTTP Archive é arquivar 1 milhão de Urls até final de 2012.&lt;/p&gt;

&lt;h2 id=&#34;como-usar-como-funciona&#34;&gt;Como usar? Como funciona?&lt;/h2&gt;

&lt;p&gt;Bom é bem simples de usar e com pouco tempo &amp;#8220;brincando&amp;#8221; com a ferramenta é possível ter uma análise legal do seu site.&lt;/p&gt;

&lt;p&gt;Para usar a ferramenta você precisa entrar no &lt;a href=&#34;http://httparchive.org/addsite.php&#34;&gt;HTTP Archive&lt;/a&gt; e adicionar a URL do site que deseja analisar, você deve esperar uns 5 dias para que o site seja adicionado e depois ele será incluindo nos próximos rastreamento.&lt;/p&gt;

&lt;p&gt;Estou fazendo alguns testes no site onde trabalho (Peixe Urbano), então vou colocar o &lt;a href=&#34;http://httparchive.org/viewsite.php?pageid=1201519&#34;&gt;link&lt;/a&gt; para que você de uma olhada nos dados que ele retorna. Veja aqui os dados do Peixe Urbano no &lt;a href=&#34;http://httparchive.org/viewsite.php?pageid=1201519&#34;&gt;HTTP Archive&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Usando Meta Box em seu tema WordPress</title>
      <link>https://tableless.github.io/hugo-public/usando-meta-box-em-seu-tema-wordpress/</link>
      <pubDate>Tue, 20 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/usando-meta-box-em-seu-tema-wordpress/</guid>
      <description>

&lt;h2 id=&#34;o-que-são-meta-boxes&#34;&gt;O que são Meta Boxes?&lt;/h2&gt;

&lt;p&gt;Os Meta Boxes (Caixas de informações) foi implementado a partir da versão 2.5 do CMS, os Meta Boxes são aquelas caixas arrastáveis que estão presente na Dashboard, edição de um post, páginas, além de outros locais na área administrativa do WordPress.&lt;/p&gt;

&lt;p&gt;Os Meta Boxes é uma maneira atraente para a tela do editor de post e evita forçar os usuários a confiar em &lt;a title=&#34;Custom Post Type&#34; href=&#34;http://tableless.com.br/custom-post-types-wordpress/&#34; target=&#34;_blank&#34;&gt;campos personalizados&lt;/a&gt;. Se você já criou algum tipo de campo personalizado no WordPress, você provavelmente gostaria de adicionar algum campo.&lt;/p&gt;

&lt;p&gt;Com os Meta Box e mais fácil. Imagine que você esteja criando um tema para um cliente que precise catalogar sua coleção de vinil. Você começa imediatamente olhar para o WordPress para ver como isso pode ser feito. Cada Post representa um Vinil, que é perfeito para adicionar imagem, titulo e descrição. Podemos usar também as categorias e marcar dentro do WordPress para que os organize. Mas vamos supor que o cara queira acrescentar mais um dado para catalogação? O WordPress não te dar essa opção por padrão a não ser que usemos o grande Meta Box.&lt;/p&gt;

&lt;h2 id=&#34;usando-o-meta-boxes&#34;&gt;Usando o Meta boxes&lt;/h2&gt;

&lt;p&gt;Neste tutorial não iremos trabalhar em um arquivo functions.php. Que não é o lugar correto para ele. Se você está adicionando dados a uma mensagem, é provável que você quer que ele exista independentemente do seu projeto de front end. Como tal, você deve colocar esse código em algum lugar que não é dependente do seu design. Ex: Um arquivo de plugin.&lt;/p&gt;

&lt;p&gt;Convenientemente o WordPress oferece uma função para adicionar os Meta Boxes a uma tela de administração, usando o seguinte &amp;#8220;add_meta_box&amp;#8221;. Abaixo um exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php add_meta_box( $id, $title, $callback, $page, $context, $priority, $callback_args ); ?&amp;gt;

&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros&#34;&gt;Parâmetros&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;$id &amp;#8211; (&lt;a title=&#34;String&#34; href=&#34;http://codex.wordpress.org/How_to_Pass_Tag_Parameters#String&#34; target=&#34;_blank&#34;&gt;String&lt;/a&gt;) Identificador único (Obrigatório)&lt;/li&gt;
&lt;li&gt;$title &amp;#8211; (&lt;a title=&#34;String&#34; href=&#34;http://codex.wordpress.org/How_to_Pass_Tag_Parameters#String&#34; target=&#34;_blank&#34;&gt;String&lt;/a&gt;) Titulo a ser exibido (Obrigatório)&lt;/li&gt;
&lt;li&gt;$callback &amp;#8211; (&lt;a title=&#34;Callback&#34; href=&#34;http://codex.wordpress.org/How_to_Pass_Tag_Parameters#Callback&#34; target=&#34;_blank&#34;&gt;Callback&lt;/a&gt;) Função para exibir o conteúdo do Meta Boxes (Obrigatório) &lt;a title=&#34;Exemplo Callback&#34; href=&#34;http://codex.wordpress.org/Function_Reference/add_meta_box#Example&#34; target=&#34;_blank&#34;&gt;Exemplo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;$page &amp;#8211; (&lt;a title=&#34;String&#34; href=&#34;http://codex.wordpress.org/How_to_Pass_Tag_Parameters#String&#34; target=&#34;_blank&#34;&gt;String&lt;/a&gt;) Onde será exibido o Meta Boxes. Exemplos (&lt;tt&gt;&amp;lsquo;post&amp;rsquo;&lt;/tt&gt;, &lt;tt&gt;&amp;lsquo;page&amp;rsquo;&lt;/tt&gt;, &lt;tt&gt;&amp;lsquo;link&amp;rsquo;&lt;/tt&gt;, or&lt;tt&gt;&amp;lsquo;custom_post_type&amp;rsquo; )&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;$context (&lt;a title=&#34;String&#34; href=&#34;http://codex.wordpress.org/How_to_Pass_Tag_Parameters#String&#34; target=&#34;_blank&#34;&gt;String&lt;/a&gt;) Tela onde o box vai ser inserido.&lt;/li&gt;
&lt;li&gt;$priority (&lt;a title=&#34;String&#34; href=&#34;http://codex.wordpress.org/How_to_Pass_Tag_Parameters#String&#34; target=&#34;_blank&#34;&gt;String&lt;/a&gt;) Prioridade de inserção da caixa em relação as demais.&lt;/li&gt;
&lt;li&gt;$callback_args (&lt;a title=&#34;Array&#34; href=&#34;http://codex.wordpress.org/How_to_Pass_Tag_Parameters#Array&#34; target=&#34;_blank&#34;&gt;array&lt;/a&gt;) Determina a passagem de parâmetros a função callback.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então, nosso &lt;strong&gt;add_meta_box&lt;/strong&gt; será parecido com esse.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php add_meta_box ( &#39;my-meta-box-id&#39;, &#39;Meu primeiro Meta Box&#39;, &#39;vinil_meta_box_vinil&#39;, &#39;post&#39;, &#39;normal&#39;, &#39;high&#39; ); ?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;Não podemos simplesmente colocar em nosso arquivo plugin sozinho, se não vamos acabar na tela branca da morte ou o erro fatal PHP. Chamada para a função indefinida, por quê? Porque chamamos a função add_meta_box antes do WordPress ser carregado. Com isso precisamos fazer um gancho no WordPress, que faz parte da api de um plugin. Basicamente, as funções começam enganchando em uma ação do WordPress. Então vamos fazer nosso gancho add_meta_box em uma função, então conectar essa função ao add_meta_boxes, evitando o erro fatal. Nosso código para o Meta Boxes para tela de postagem ficará assim:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php add_action( &#39;add_meta_boxes&#39;, &#39;vinil_meta_box_add&#39; );

function vinil_meta_box_add() {

add_meta_box( &#39;my-meta-box-id&#39;, &#39;Meu primeiro Meta Box&#39;, &#39;vinil_meta_box_vinil&#39;, &#39;post&#39;, &#39;normal&#39;, &#39;high&#39; ); }

?&amp;gt;

&lt;/pre&gt;

&lt;h2 id=&#34;renderizando-o-meta-box&#34;&gt;Renderizando o Meta Box&lt;/h2&gt;

&lt;p&gt;O código acima é o suficiente para adicionar o Meta Box, mas agora temos que tornar a coisa mais legal. Vamos adicionar campos, apenas um formulário HTML misturado com um pouco de PHP para exibir os dados salvos. Não precisamos incluir as tags de formulário pois o WordPress já faz isso para a gente. 🙂 Lembre que a string passada como o $callback em add_meta_box? Agora vamos criar um função com o mesmo nome.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php function vinil_meta_box_vinil() {

echo &#39;Conteúdo do meu primeiro Meta Box.&#39;; }

?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;Agora vamos fazer o formulário, vamos adicionar vários campos para este Meta Box, 1 input, 1 select, 1 checkbox. Vamos começar com o input.&lt;/p&gt;

&lt;p&gt;Na função&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function vinil_meta_box_vinil() {

echo &#39;Conteúdo do meu primeiro Meta Box.&#39;; }

?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;Vamos retirar o&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;echo &#39;Conteúdo do meu primeiro Meta Box&#39;;

&lt;/pre&gt;

&lt;p&gt;Para começar a fazer o formulario do Meta Box, ficando da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function vinil_meta_box_vinil()
{
?&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;label for=&#34;texto_meta_box&#34;&amp;gt;Text Label&amp;lt;/label&amp;gt;
&amp;lt;input type=&#34;text&#34; name=&#34;texto_meta_box&#34; id=&#34;texto_meta_box&#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
}

?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;Mas e quanto a exibir os dados? Bem você verá a seguinte, vamos armazenar esses dados na tabela usando a função wp_postmeta update_post_meta. Essas funções tem duas irmãs chamada get_post_meta e get_post_custom, que pega os dados de wp_postmeta. O get_post_meta só peega dados de uma chave, enquanto get_post_custom pega tudo. Como estamos usando realmente apenas um campo, neste ponto, vamos usar o get_post_meta.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function vinil_meta_box_vinil()
{
$values = get_post_custom( $post-&amp;gt;ID );
$text = isset( $values[&#39;texto_meta_box&#39;] ) ? esc_attr( $values[&#39;texto_meta_box&#39;][0] ) : &#39;&#39;;
$selected = isset( $values[&#39;meta_box_select&#39;] ) ? esc_attr( $values[&#39;meta_box_select&#39;][0] ) : &#39;&#39;;
$check = isset( $values[&#39;meta_box_check&#39;] ) ? esc_attr( $values[&#39;meta_box_check&#39;][0] ) : &#39;&#39;;
wp_nonce_field( &#39;my_meta_box_nonce&#39;, &#39;meta_box_nonce&#39; );
?&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;label for=&#34;texto_meta_box&#34;&amp;gt;Text Label&amp;lt;/label&amp;gt;
&amp;lt;input type=&#34;text&#34; name=&#34;texto_meta_box&#34; id=&#34;texto_meta_box&#34; /&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;?php
}

?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;Agora vamos adicionar o DropDow em nosso Meta Box.&lt;/p&gt;

&lt;p&gt;No drop-dow iremos usar uma das funções mais úteis no WordPress, o selected(). Ele compara o primeiro valor, os dados que salva, com o segundo atributo de valor, &lt;option&gt;. Se eles são os mesmos a função selected=&amp;#8221;selected&amp;#8221; que faz com o que o valor do drop down seja gravado. Mas você também pode usar o selected com botões de radio.&lt;/p&gt;

&lt;p&gt;Ficando da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function vinil_meta_box_vinil()
{
$values = get_post_custom( $post-&amp;gt;ID );
$text = isset( $values[&#39;texto_meta_box&#39;] ) ? esc_attr( $values[&#39;texto_meta_box&#39;][0] ) : &#39;&#39;;
$selected = isset( $values[&#39;meta_box_select&#39;] ) ? esc_attr( $values[&#39;meta_box_select&#39;][0] ) : &#39;&#39;;
$check = isset( $values[&#39;meta_box_check&#39;] ) ? esc_attr( $values[&#39;meta_box_check&#39;][0] ) : &#39;&#39;;
wp_nonce_field( &#39;my_meta_box_nonce&#39;, &#39;meta_box_nonce&#39; );
?&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;label for=&#34;texto_meta_box&#34;&amp;gt;Text Label&amp;lt;/label&amp;gt;
&amp;lt;input type=&#34;text&#34; name=&#34;texto_meta_box&#34; id=&#34;texto_meta_box&#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;label for=&#34;meta_box_select&#34;&amp;gt;Color&amp;lt;/label&amp;gt;
&amp;lt;select name=&#34;meta_box_select&#34; id=&#34;meta_box_select&#34;&amp;gt;
&amp;lt;option value=&#34;red&#34; &amp;lt;?php selected( $selected, &#39;red&#39; ); ?&amp;gt;&amp;gt;Vermelho&amp;lt;/option&amp;gt;
&amp;lt;option value=&#34;blue&#34; &amp;lt;?php selected( $selected, &#39;blue&#39; ); ?&amp;gt;&amp;gt;Azul&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
}

?&amp;gt;

&lt;/pre&gt;

&lt;h3 id=&#34;adicionando-o-check-box&#34;&gt;Adicionando o Check box&lt;/h3&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function vinil_meta_box_vinil()
{
$values = get_post_custom( $post-&amp;gt;ID );
$text = isset( $values[&#39;texto_meta_box&#39;] ) ? esc_attr( $values[&#39;texto_meta_box&#39;][0] ) : &#39;&#39;;
$selected = isset( $values[&#39;meta_box_select&#39;] ) ? esc_attr( $values[&#39;meta_box_select&#39;][0] ) : &#39;&#39;;
$check = isset( $values[&#39;meta_box_check&#39;] ) ? esc_attr( $values[&#39;meta_box_check&#39;][0] ) : &#39;&#39;;
wp_nonce_field( &#39;my_meta_box_nonce&#39;, &#39;meta_box_nonce&#39; );
?&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;label for=&#34;texto_meta_box&#34;&amp;gt;Text Label&amp;lt;/label&amp;gt;
&amp;lt;input type=&#34;text&#34; name=&#34;texto_meta_box&#34; id=&#34;texto_meta_box&#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;label for=&#34;meta_box_select&#34;&amp;gt;Color&amp;lt;/label&amp;gt;
&amp;lt;select name=&#34;meta_box_select&#34; id=&#34;meta_box_select&#34;&amp;gt;
&amp;lt;option value=&#34;red&#34; &amp;lt;?php selected( $selected, &#39;red&#39; ); ?&amp;gt;&amp;gt;Vermelho&amp;lt;/option&amp;gt;
&amp;lt;option value=&#34;blue&#34; &amp;lt;?php selected( $selected, &#39;blue&#39; ); ?&amp;gt;&amp;gt;Azul&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;input type=&#34;checkbox&#34; name=&#34;meta_box_check&#34; id=&#34;meta_box_check&#34; &amp;lt;?php checked( $check, &#39;on&#39; ); ?&amp;gt; /&amp;gt;
&amp;lt;label for=&#34;meta_box_check&#34;&amp;gt;Don&#39;t Check This.&amp;lt;/label&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
}

?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;Novamente o WordPress fornece a função checked(). Ela funciona exatamente como selected() comparando o primeiro valor com o segundo valor e repetindo para checked=&amp;#8221;checked&amp;#8221; se eles são o mesmo.&lt;/p&gt;

&lt;h2 id=&#34;para-finalizar-vamos-salvar-nosso-meta-box&#34;&gt;Para finalizar vamos salvar nosso Meta Box&lt;/h2&gt;

&lt;p&gt;Para salvar nossos dados, vamos confiar em outro gancho: save_post. Isso funciona como o nosso gancho na ação acima:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php add_action( &#39;save_post&#39;, &#39;vinil_meta_box_save&#39; ); ?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;A função vinil_meta_box receberá um argumento, a ID do Post, e vai cuidar da limpeza e salvar todos os nossos dados.&lt;/p&gt;

&lt;p&gt;Antes de podermos fazer qualquer coisa, no entanto, que temos que fazer 3 coisas: verificar se o Post esta auto salvando, verificar o valor único que criamos anteriormente, e verificar se o usuário atual pode realmente editar o post.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;add_action( &#39;save_post&#39;, &#39;vinil_meta_box_save&#39; );
function vinil_meta_box_save( $post_id )
{
if( defined( &#39;DOING_AUTOSAVE&#39; ) &amp;&amp; DOING_AUTOSAVE ) return;

if( !isset( $_POST[&#39;meta_box_nonce&#39;] ) || !wp_verify_nonce( $_POST[&#39;meta_box_nonce&#39;], &#39;my_meta_box_nonce&#39; ) ) return;

if( !current_user_can( &#39;edit_post&#39; ) ) return;

}

&lt;/pre&gt;

&lt;p&gt;Agora as coisas divertidas: na verdade, salvar nossos dados. A regra número um, ao colocar qualquer coisa em seu banco de dados ou em seu site é não confiar no usuário. Mesmo se esse usuário é você. Para o efeito, antes de salvar os dados, queremos ter certeza de que não há nada malicioso lá. Felizmente WordPress fornece um monte de funções para validação de dados. Para isso vamos utilizar o esc_attr(). E também vamos usar a função update_post_meta para salvar os nossos dados. Leva três argumentos: a ID post, a chave de meta, e o valor.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;add_action( &#39;save_post&#39;, &#39;vinil_meta_box_save&#39; );
function vinil_meta_box_save( $post_id )
{
if( defined( &#39;DOING_AUTOSAVE&#39; ) &amp;&amp; DOING_AUTOSAVE ) return;

if( !isset( $_POST[&#39;meta_box_nonce&#39;] ) || !wp_verify_nonce( $_POST[&#39;meta_box_nonce&#39;], &#39;my_meta_box_nonce&#39; ) ) return;

if( !current_user_can( &#39;edit_post&#39; ) ) return;

$allowed = array(
&#39;a&#39; =&amp;gt; array(
&#39;href&#39; =&amp;gt; array()
)
);

if( isset( $_POST[&#39;texto_meta_box&#39;] ) )
update_post_meta( $post_id, &#39;texto_meta_box&#39;, wp_kses( $_POST[&#39;texto_meta_box&#39;], $allowed ) );

if( isset( $_POST[&#39;meta_box_select&#39;] ) )
update_post_meta( $post_id, &#39;meta_box_select&#39;, esc_attr( $_POST[&#39;meta_box_select&#39;] ) );

$chk = ( isset( $_POST[&#39;meta_box_check&#39;] ) &amp;&amp; $_POST[&#39;meta_box_check&#39;] ) ? &#39;on&#39; : &#39;off&#39;;
update_post_meta( $post_id, &#39;meta_box_check&#39;, $chk );
}

?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;É isso, agora você deve ter um Meta Boxes funcionando em seu WordPress.&lt;/p&gt;

&lt;h2 id=&#34;nosso-arquivo-fica-assim&#34;&gt;Nosso arquivo fica assim:&lt;/h2&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
/*
Plugin Name: Meta Box
Plugin URI: http://bygiovanni.com.br
Description:
Version: 1.0
Author: Giovanni - Tableless
Author URI: http://bygiovanni.com.br
*/

//ADICIONANDO O META BOX
add_action( &#39;add_meta_boxes&#39;, &#39;vinil_meta_box_add&#39; );
function vinil_meta_box_add()
{
add_meta_box( &#39;my-meta-box-id&#39;, &#39;Meu primeiro Meta Box&#39;, &#39;vinil_meta_box_vinil&#39;, &#39;post&#39;, &#39;normal&#39;, &#39;high&#39; );
}

//FORMULARIO PARA SALVAS OS DADOS
function vinil_meta_box_vinil()
{
$values = get_post_custom( $post-&amp;gt;ID );
$text = isset( $values[&#39;texto_meta_box&#39;] ) ? esc_attr( $values[&#39;texto_meta_box&#39;][0] ) : &#39;&#39;;
$selected = isset( $values[&#39;meta_box_select&#39;] ) ? esc_attr( $values[&#39;meta_box_select&#39;][0] ) : &#39;&#39;;
$check = isset( $values[&#39;meta_box_check&#39;] ) ? esc_attr( $values[&#39;meta_box_check&#39;][0] ) : &#39;&#39;;
wp_nonce_field( &#39;my_meta_box_nonce&#39;, &#39;meta_box_nonce&#39; );
?&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;label for=&#34;texto_meta_box&#34;&amp;gt;Text Label&amp;lt;/label&amp;gt;
&amp;lt;input type=&#34;text&#34; name=&#34;texto_meta_box&#34; id=&#34;texto_meta_box&#34; /&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;label for=&#34;meta_box_select&#34;&amp;gt;Color&amp;lt;/label&amp;gt;
&amp;lt;select name=&#34;meta_box_select&#34; id=&#34;meta_box_select&#34;&amp;gt;
&amp;lt;option value=&#34;red&#34; &amp;lt;?php selected( $selected, &#39;red&#39; ); ?&amp;gt;&amp;gt;Vermelho&amp;lt;/option&amp;gt;
&amp;lt;option value=&#34;blue&#34; &amp;lt;?php selected( $selected, &#39;blue&#39; ); ?&amp;gt;&amp;gt;Azul&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;input type=&#34;checkbox&#34; name=&#34;meta_box_check&#34; id=&#34;meta_box_check&#34; &amp;lt;?php checked( $check, &#39;on&#39; ); ?&amp;gt; /&amp;gt;
&amp;lt;label for=&#34;meta_box_check&#34;&amp;gt;Don&#39;t Check This.&amp;lt;/label&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
}

add_action( &#39;save_post&#39;, &#39;vinil_meta_box_save&#39; );
function vinil_meta_box_save( $post_id )
{
if( defined( &#39;DOING_AUTOSAVE&#39; ) &amp;&amp; DOING_AUTOSAVE ) return;

if( !isset( $_POST[&#39;meta_box_nonce&#39;] ) || !wp_verify_nonce( $_POST[&#39;meta_box_nonce&#39;], &#39;my_meta_box_nonce&#39; ) ) return;

if( !current_user_can( &#39;edit_post&#39; ) ) return;

$allowed = array(
&#39;a&#39; =&amp;gt; array(
&#39;href&#39; =&amp;gt; array()
)
);

if( isset( $_POST[&#39;texto_meta_box&#39;] ) )
update_post_meta( $post_id, &#39;texto_meta_box&#39;, wp_kses( $_POST[&#39;texto_meta_box&#39;], $allowed ) );

if( isset( $_POST[&#39;meta_box_select&#39;] ) )
update_post_meta( $post_id, &#39;meta_box_select&#39;, esc_attr( $_POST[&#39;meta_box_select&#39;] ) );

$chk = ( isset( $_POST[&#39;meta_box_check&#39;] ) &amp;&amp; $_POST[&#39;meta_box_check&#39;] ) ? &#39;on&#39; : &#39;off&#39;;
update_post_meta( $post_id, &#39;meta_box_check&#39;, $chk );
}

?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;Para saber mais sobre os Meta Box podem ver no Codex que também é uma ótima fonte de estudo para o WP. &lt;a href=&#34;http://codex.wordpress.org/Function_Reference/add_meta_box&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://codex.wordpress.org/Function_Reference/add_meta_box&#34;&gt;http://codex.wordpress.org/Function_Reference/add_meta_box&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao CSS Shaders – Parte 1</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-css-shaders/</link>
      <pubDate>Mon, 03 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-css-shaders/</guid>
      <description>

&lt;p&gt;O recurso de shaders CSS é proposto à consideração da &lt;a title=&#34;FX Task Force&#34; href=&#34;http://www.w3.org/Graphics/fx/&#34; target=&#34;_blank&#34;&gt;FX Task Force&lt;/a&gt; que pode ser integrado na especificação de &lt;a title=&#34;Filter Effects&#34; href=&#34;https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/publish/Filters.html&#34; target=&#34;_blank&#34;&gt;Filter Effects&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;introdução&#34;&gt;Introdução&lt;/h3&gt;

&lt;p&gt;Um Shader é essencialmente um pequeno programa que proporciona um efeito particular e cujo comportamento é controlado com parâmetros de entradas.&lt;/p&gt;

&lt;p&gt;Arquiteturas de gráficos, tais como &lt;a title=&#34;Microsof 3D&#34; href=&#34;http://msdn.microsoft.com/en-us/library/bb219679(v=vs.85).aspx&#34; target=&#34;_blank&#34;&gt;Microsoft Direct3D&lt;/a&gt; ou &lt;a title=&#34;Open GL&#34; href=&#34;http://en.wikipedia.org/wiki/OpenGL&#34; target=&#34;_blank&#34;&gt;OpenGL &lt;/a&gt;tem uma noção de &lt;a title=&#34;Vertex Shaders&#34; href=&#34;http://en.wikipedia.org/wiki/Vertex_shader&#34; target=&#34;_blank&#34;&gt;vertex shaders&lt;/a&gt; que são operadas em coordenadas de ponto(vértices). Vertex shaders opera em uma malha de vértices e fornece uma ampla variedade de efeitos e distorção (Onda, oscilação). Shaders permitem varios efeitos per-pixel, como por exemplos, um efeito de florescer e vários outros efeitos de imagem (borrão, brilhos, detecção de bordas).&lt;/p&gt;

&lt;p&gt;Quando aplicado para um conteúdo do documento, como o HTML ou elementos SVG, shaders podem ser usados de formas interessantes. Esses elementos 2D podem ser desenhados conceitualmente sobre uma malha de vértices que podem ser processados através de um &lt;a title=&#34;vertex shader&#34; href=&#34;http://en.wikipedia.org/wiki/Vertex_shader&#34; target=&#34;_blank&#34;&gt;Vertex Shader&lt;/a&gt; para a distorção e depois para um &lt;a title=&#34;Introdução ao Shader CSS&#34; href=&#34;http://tableless.com.br/introducao-ao-css-shaders/&#34; target=&#34;_blank&#34;&gt;shader&lt;/a&gt; de fragmento para o processamento de pixel.&lt;/p&gt;

&lt;p&gt;Shaders são particulamente interessantes no contexto de transições animadas e um complemento para o &lt;a title=&#34;Filter Effects 1.0&#34; href=&#34;https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/publish/Filters.html&#34; target=&#34;_blank&#34;&gt;Filter Effects 1.0&lt;/a&gt;, &lt;a title=&#34;CSS Animation&#34; href=&#34;http://tableless.com.br/introducao-ao-css-animation/&#34; target=&#34;_blank&#34;&gt;CSS Animations&lt;/a&gt;, CSS Transitions entre outras.&lt;/p&gt;

&lt;p&gt;Este documento propõe:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modelo e uma sintaxe CSS para fazer a vertex shaders ao conteúdo de marcação arbitrária.&lt;/li&gt;
&lt;li&gt;Sintaxe CSS para fazer fragmentos de shaders para operar com outros filtros de efeitos primitivos.&lt;/li&gt;
&lt;li&gt;Uma sintaxe CSS para passar parâmetros para fragmentar e vertex shaders.&lt;/li&gt;
&lt;li&gt;Uma sintaxe CSS para controlar a granularidade da malha processada pelo CSS.&lt;/li&gt;
&lt;li&gt;Uma sintaxe CSS para definir um efeito de filtro (aplicável a shaders CSS, mas geralmente útil para efeitos de filtro).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;exemplos-de-css-shaders&#34;&gt;Exemplos de CSS Shaders&lt;/h3&gt;

&lt;div id=&#34;attachment_4303&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/10/intro-filtered-element.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-4303&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2011/10/intro-filtered-element-300x194.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;194&#34; srcset=&#34;uploads/2011/10/intro-filtered-element-300x194.png 300w, uploads/2011/10/intro-filtered-element.png 544w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Elemento antes de aplicar o Shaders
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_4304&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/10/intro-example-1.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-4304&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2011/10/intro-example-1-300x202.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;202&#34; srcset=&#34;uploads/2011/10/intro-example-1-300x202.png 300w, uploads/2011/10/intro-example-1.png 550w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Elemento com um vértice shader aplicado
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;[cce lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;.waving {&lt;/p&gt;

&lt;p&gt;filter: custom(url(&amp;#8216;wave.vs&amp;#8217;), 20 20, phase 0, amplitude 50);&lt;/p&gt;

&lt;p&gt;transition-property: filter;&lt;/p&gt;

&lt;p&gt;transition-duration: 0.2s;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;.waving:hover {&lt;/p&gt;

&lt;p&gt;filter: custom(url(&amp;#8216;wave.vs&amp;#8217;), 20 20, phase 90, amplitude 20);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;div class=&#34;waving&#34;&gt;
  &lt;h2&gt;
    Hello CSS Shaders
  &lt;/h2&gt;
&lt;/div&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;url(&amp;#8216;wave.vs&amp;#8217;)&lt;/em&gt; faz referencia ao vértice shader customizada que calcula o efeito de ondulação. O parametro &lt;em&gt;20 20&lt;/em&gt; controla a _&lt;a title=&#34;Vertex Mesch&#34; href=&#34;https://dvcs.w3.org/hg/FXTF/raw-file/tip/custom/index.html#vertex-mesh&#34; target=&#34;_blank&#34;&gt;Vertex mesh&lt;/a&gt;_, de modo que a onda é suave. Finalmente a &lt;em&gt;amplitude&lt;/em&gt; paraametros de controle a forma  e a força da curva utilizada para o efeito de ondulação.&lt;/p&gt;

&lt;h3 id=&#34;combinado-vértice-e-fragmento&#34;&gt;Combinado vértice e fragmento&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;.old-book-page {&lt;/p&gt;

&lt;p&gt;filter: grayscale(1.0) custom(url(&amp;#8216;book.vs&amp;#8217;) url(&amp;#8216;old-page-paper.fs&amp;#8217;));&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;div class=&#34;old-book-page&#34;&gt;
  &lt;h2&gt;
    Hello CSS Shaders
  &lt;/h2&gt;
&lt;/div&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;A figura mostra uma combinação de um vertex shader (para dar forma um &amp;#8220;livro aberto&amp;#8221; ) e um shader de fragmento (para dar a imagem um estilo de &amp;#8216;papel velho&amp;#8217;, com uma sombra sutil no meio).&lt;/p&gt;

&lt;p&gt;Note como a propriedade &amp;#8216;filter&amp;#8217; é estendida com um costume () função e como essa função pode ser combinada com uma das funções existentes filtrantes (tais como tons de cinza () no exemplo acima)&lt;/p&gt;

&lt;p&gt;Cada shader define seu próprio conjunto de parâmetros. Normalmente, os shaders terão diferentes parâmetros com tipos diferentes. Por exemplo, &amp;#8220;box-blur&amp;#8221; e &amp;#8220;box-size&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Na parte 2, mostrarei mais exemplos práticos sobre como usar melhor os Shaders, nesse artigo, quiz mesmo fazer uma introdução sobre o elemento.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>