<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maufarinelli on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/maufarinelli/index.xml</link>
    <description>Recent content in Maufarinelli on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/maufarinelli/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introdução à Programação Funcional (Functional Programming) em Javascript</title>
      <link>https://tableless.github.io/hugo-public/introducao-programacao-funcional-functional-programming-em-javascript/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-programacao-funcional-functional-programming-em-javascript/</guid>
      <description>&lt;p&gt;Eu venho estudando functional programming já faz um tempo, e decidi colocar no papel o que aprendi, pois para mim essa é a melhor forma de reter o que se aprendeu. Além disso, será um prazer se esse post ajudar outros programadores.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Em ciência da computação, &lt;strong&gt;programação funcional&lt;/strong&gt; é um paradigma de programação que trata a computação como uma avaliação de funções matemáticas e que evita estados ou dados mutáveis. Ela enfatiza a aplicação de funções, em contraste da programação imperativa, que enfatiza mudanças no estado do programa” &lt;a href=&#34;https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional&#34;&gt;https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A princípio, isso pode parecer algo de outro mundo, mas com calma você também entenderá.&lt;/p&gt;

&lt;p&gt;Basicamente, em programação funcional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dados são imutáveis, ou seja, uma vez atribuídos os valores de uma variável, não devemos nunca alterá-los (parece bizarro, mas fará sentido logo logo)&lt;/li&gt;
&lt;li&gt;As funções devem ser sem estado (stateless), ou seja, elas devem sempre agir e retornar algo como se fosse a primeira vez que elas fossem utilizadas no programa. Para uma função neste paradigma, o que aconteceu antes de ser chamada não lhe interessa e não deve influenciar em nada a sua resposta&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por isso, a principal característica da programação funcional é a ausência de efeitos secundários. Como uma função não altera nenhum dado externo e não depende de nenhum dado externo para fazer o seu trabalho, teoricamente não existe efeitos secundários causados por ela no programa.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Como programar utilizando o paradigma da Programação Funcional&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Abaixo eu coloquei 3 regras básicas para transformar seu código em Programação Funcional (tirado deste ótimo artigo &lt;a href=&#34;http://www.smashingmagazine.com/2014/07/dont-be-scared-of-functional-programming/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2014/07/dont-be-scared-of-functional-programming/&#34;&gt;http://www.smashingmagazine.com/2014/07/dont-be-scared-of-functional-programming/&lt;/a&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A função deve conter pelo menos 1 argumento&lt;/li&gt;
&lt;li&gt;A função deve retornar algum dado ou outra função (isso será visto mais pra frente)&lt;/li&gt;
&lt;li&gt;Sem loops (este ponto é controverso, pois a biblioteca Lodash foi otimizada usando loops internamente nas funções. Gostaria de ouvir comentários e mais informações a respeito)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Utilizaremos uma pequena aplicação, uma página para uma agência de turismo virtual, e  transformaremos tudo o que for possível em seu código seguindo os conceitos de programação funcional.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://farinelliwebdevelopment.com/demo/functional-programming&#34; target=&#34;_blank&#34;&gt;Demo Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(se quiser pegar o código para acompanhar e testar você mesmo, &lt;a href=&#34;https://github.com/maufarinelli/tutorial-functional-programming/tree/functional-part1&#34; target=&#34;_blank&#34;&gt;pegue o código no github&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Começaremos pela parte dos dados:&lt;/p&gt;

&lt;pre class=&#34;lang-javasript&#34;&gt;(function(_) {
    // Data
    var cities = [
        {name: &#39;Nova York&#39;, passagem: 1550.00, hotel: 1800.00, category: &#39;north-america&#39;},
        {name: &#39;Paris&#39;,     passagem: 1720.00, hotel: 2100.00, category: &#39;europe&#39;},
        {name: &#39;Londres&#39;,   passagem: 1630.00, hotel: 2500.00, category: &#39;europe&#39;},
        {name: &#39;Amsterdam&#39;, passagem: 1430.00, hotel: 1750.00, category: &#39;europe&#39;},
        {name: &#39;Santiago&#39;,  passagem: 600.00,  hotel: 1150.00, category: &#39;south-america&#39;},
        {name: &#39;Buenos Aires&#39;, passagem: 520.00, hotel: 950.00, category: &#39;south-america&#39;},
        {name: &#39;Barcelona&#39;, passagem: 1390.00, hotel: 1670.00, category: &#39;europe&#39;},
        {name: &#39;Lisboa&#39;,    passagem: 1280.00, hotel: 1450.00, category: &#39;europe&#39;},
        {name: &#39;Vancouver&#39;, passagem: 1590.00, hotel: 320.00, category: &#39;north-america&#39;},
        {name: &#39;Roma&#39;,      passagem: 1400.00, hotel: 1950.00, category: &#39;europe&#39;},
    ];
    function createPackages() {
        for(var i = 0; i &amp;lt; cities.length; i++) {
            cities[i].pacote = (cities[i].passagem + cities[i].hotel) * 0.8;
        }
}
});
&lt;/pre&gt;

&lt;p&gt;A função &lt;code&gt;createPackages()&lt;/code&gt; não tem nada de programação funcional. Ela depende da variável &lt;em&gt;cities&lt;/em&gt; e ela altera os dados dessa variável, uma vez chamada.&lt;/p&gt;

&lt;p&gt;Vamos transformá-la em uma função pura, como dizem na programação funcional, onde ela não dependerá de uma variável externa e não irá alterar nada exterior a ela.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;(function(_) {
  // Data
  var cities = [
    {name: &#39;Nova York&#39;, passagem: 1550.00, hotel: 1800.00, category: &#39;north-america&#39;},
    {name: &#39;Paris&#39;,     passagem: 1720.00, hotel: 2100.00, category: &#39;europe&#39;},
    {name: &#39;Londres&#39;,   passagem: 1630.00, hotel: 2500.00, category: &#39;europe&#39;},
    {name: &#39;Amsterdam&#39;, passagem: 1430.00, hotel: 1750.00, category: &#39;europe&#39;},
    {name: &#39;Santiago&#39;,  passagem: 600.00,  hotel: 1150.00, category: &#39;south-america&#39;},
    {name: &#39;Buenos Aires&#39;, passagem: 520.00, hotel: 950.00, category: &#39;south-america&#39;},
    {name: &#39;Barcelona&#39;, passagem: 1390.00, hotel: 1670.00, category: &#39;europe&#39;},
    {name: &#39;Lisboa&#39;,    passagem: 1280.00, hotel: 1450.00, category: &#39;europe&#39;},
    {name: &#39;Vancouver&#39;, passagem: 1590.00, hotel: 320.00, category: &#39;north-america&#39;},
    {name: &#39;Roma&#39;,      passagem: 1400.00, hotel: 1950.00, category: &#39;europe&#39;},
  ];
  function setPackages(collection) {
    var result = [];
    for(var i = 0; i &amp;lt; collection.length; i++) {
        collection[i].pacote = (collection[i].passagem + collection[i].hotel) * 0.8;
        result.push(collection[i]);
    }
    return result;
  }

  var citiesWithPackages = setPackages(cities);
});
&lt;/pre&gt;

&lt;p&gt;A função setPackages pega qualquer coleção e, para cada objeto dessa coleção, insere mais uma propriedade chamada &lt;em&gt;pacote&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Alterei o nome da função, pois além de fazer mais sentido, fica claro para o leitor que na verdade, é uma nova função. Ela é pura, ou seja, não depende mais de dados externos e não alterará nada fora do seu escopo.&lt;/p&gt;

&lt;p&gt;Opps, quase pura. O leitor mais atento já pode ter percebido que, na verdade, ela alterou sim a variável &lt;em&gt;cities&lt;/em&gt; também. Isso porque em JavaScript, assim como Java e outros linguagens, no momento em que fizemos : &lt;code&gt;collection[i].pacote = alguma coisa&lt;/code&gt;, esta alterando o objeto que esta alocado na referência &lt;em&gt;collection[i].&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-53585&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/04/tuto3.png&#34; alt=&#34;tuto3&#34; width=&#34;867&#34; height=&#34;138&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para que essa função seja realmente pura, teremos que clonar o objeto para somente após inserirmos essa nova propriedade. Para isso, vou criar um objecto chamado utilities, que conterá funções utilitárias para nossa aplicação, e a primeira será o método &lt;code&gt;cloneObject&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;(function(_) {
  var utilities = {};

  utilities.cloneObject = function(obj) {
    if(typeof obj === &#34;object&#34;) {
      var clone = {};
      for (var prop in obj)
        if (obj.hasOwnProperty(prop))
          clone[prop] = obj[prop];
      return clone;
    }
  };

  // Data
  var cities = [
    {name: &#39;Nova York&#39;, passagem: 1550.00, hotel: 1800.00, category: &#39;north-america&#39;},
    {name: &#39;Paris&#39;,     passagem: 1720.00, hotel: 2100.00, category: &#39;europe&#39;},
    {name: &#39;Londres&#39;,   passagem: 1630.00, hotel: 2500.00, category: &#39;europe&#39;},
    {name: &#39;Amsterdam&#39;, passagem: 1430.00, hotel: 1750.00, category: &#39;europe&#39;},
    {name: &#39;Santiago&#39;,  passagem: 600.00,  hotel: 1150.00, category: &#39;south-america&#39;},
    {name: &#39;Buenos Aires&#39;, passagem: 520.00, hotel: 950.00, category: &#39;south-america&#39;},
    {name: &#39;Barcelona&#39;, passagem: 1390.00, hotel: 1670.00, category: &#39;europe&#39;},
    {name: &#39;Lisboa&#39;,    passagem: 1280.00, hotel: 1450.00, category: &#39;europe&#39;},
    {name: &#39;Vancouver&#39;, passagem: 1590.00, hotel: 320.00, category: &#39;north-america&#39;},
    {name: &#39;Roma&#39;,      passagem: 1400.00, hotel: 1950.00, category: &#39;europe&#39;},
  ];
  function setPackages(collection) {
    var result = [];
    for(var i = 0; i &amp;lt; collection.length; i++) {
      if(typeof collection[i].passagem !== &#39;undefined&#39; &amp;&amp; typeof collection[i].hotel !== &#39;undefined&#39;) {
        var cloned = utilities.cloneObject(collection[i]);
        cloned.pacote = (cloned.passagem + cloned.hotel) * 0.8;
        result.push(cloned);
      }
    }
    return result;
  }

  var citiesWithPackages = setPackages(cities);
});
&lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-53587&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/04/tuto5.png&#34; alt=&#34;tuto5&#34; width=&#34;872&#34; height=&#34;138&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora sim, temos uma função realmente pura, que não altera nenhum dado externo. Como calculamos os pacotes a partir do preço da passagem e do hotel, devemos checar se o objeto em questão contém essas duas propriedades para evitarmos erros, pois agora essa função é mais abstrata e pode receber qualquer tipo de coleção.&lt;/p&gt;

&lt;p&gt;Contudo, se queremos uma função abstrata, que pode aceitar qualquer tipo de coleção, por que não criarmos um método de utilities que fará esse papel.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;(function(_) {
  var utilities = {};

  utilities.map = function(list, callback) {
    var resultList = [];
    for(var i = 0; i &amp;lt; list.length; i++) {
      resultList.push(callback(list[i]));
    }
    return resultList;
  }

  utilities.cloneObject = function(obj) {
    if(typeof obj === &#34;object&#34;) {
      var clone = {};
      for (var prop in obj)
        if (obj.hasOwnProperty(prop))
          clone[prop] = obj[prop];
      return clone;
    }
  };

  // Data
  var cities = [
    {name: &#39;Nova York&#39;, passagem: 1550.00, hotel: 1800.00, category: &#39;north-america&#39;},
    {name: &#39;Paris&#39;,     passagem: 1720.00, hotel: 2100.00, category: &#39;europe&#39;},
    {name: &#39;Londres&#39;,   passagem: 1630.00, hotel: 2500.00, category: &#39;europe&#39;},
    {name: &#39;Amsterdam&#39;, passagem: 1430.00, hotel: 1750.00, category: &#39;europe&#39;},
    {name: &#39;Santiago&#39;,  passagem: 600.00,  hotel: 1150.00, category: &#39;south-america&#39;},
    {name: &#39;Buenos Aires&#39;, passagem: 520.00, hotel: 950.00, category: &#39;south-america&#39;},
    {name: &#39;Barcelona&#39;, passagem: 1390.00, hotel: 1670.00, category: &#39;europe&#39;},
    {name: &#39;Lisboa&#39;,    passagem: 1280.00, hotel: 1450.00, category: &#39;europe&#39;},
    {name: &#39;Vancouver&#39;, passagem: 1590.00, hotel: 320.00, category: &#39;north-america&#39;},
    {name: &#39;Roma&#39;,      passagem: 1400.00, hotel: 1950.00, category: &#39;europe&#39;},
  ];
  var citiesWithPackages = utilities.map(cities, function(city){
    if(typeof collection[i].passagem !== &#39;undefined&#39; &amp;&amp; typeof collection[i].hotel !== &#39;undefined&#39;) {
      var city = utilities.cloneObject(city);
      city.pacote = (city.passagem + city.hotel) * 0.8;
    }
    return city;
  });
});

&lt;/pre&gt;

&lt;p&gt;O método map, existente em diversas linguagens de programação, percorre nossa coleção e retornará uma nova coleção com os dados alterados da forma que a função callback quiser. Ou seja, agora temos toda flexibilidade para inserirmos ou retirarmos dados dos objetos de uma coleção sem afetar a coleção original.&lt;/p&gt;

&lt;p&gt;Pode parecer estranho para alguns que não estão habituados a javascript, mais funções callback são tão comuns nessa linguagem que, as vezes, nem me dou conta.&lt;/p&gt;

&lt;p&gt;Em javascript, funções podem receber outras funções como argumento e funções podem retornar outras funções.&lt;/p&gt;

&lt;p&gt;Vamos a explicação do que fizemos no método map: primeiramente ele aceita uma função como argumento. O que essa função retorna é que realmente será inserido na array resultList.&lt;/p&gt;

&lt;p&gt;Funções que podem receber outras funções como argumento ou que retornar outras funções são chamadas funções de ordem superior (higher-order functions).&lt;/p&gt;

&lt;p&gt;Vamos supor que eu precise clonar uma array e não mais um objeto. O método cloneObjects como próprio nome já diz, não irá ajudar. Então preciso criar outro método mais eficiente.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;(function(_) {
  var utilities = {};

  utilities.map = function(list, callback) {
    var resultList = [];
    for(var i = 0; i &amp;lt; list.length; i++) {
      resultList.push(callback(list[i]));
    }
    return resultList;
  }

  utilities.toClone = function() {
    if(arguments[0] === &#34;object&#34;) {
      return function(obj) {
        var clone = {};
        for(var prop in obj)
          if (obj.hasOwnProperty(prop))
            clone[prop] = obj[prop];
        return clone;
      }
    }
    if (arguments[0]===&#34;array&#34;){
      return function(obj) {
        var arrayClone = [];
        for (var i=0; i &amp;lt; obj.length; i++) {
          arrayClone.push(obj);
        }
        return arrayClone;
      };
    }
  };

  utilities.cloneObject = function(obj) {
    if(typeof obj === &#34;object&#34;) {
      var clone = {};
      for (var prop in obj)
        if (obj.hasOwnProperty(prop))
          clone[prop] = obj[prop];
      return clone;
    }
  };

  // Data
  var cities = [
    {name: &#39;Nova York&#39;, passagem: 1550.00, hotel: 1800.00, category: &#39;north-america&#39;},
    {name: &#39;Paris&#39;,     passagem: 1720.00, hotel: 2100.00, category: &#39;europe&#39;},
    {name: &#39;Londres&#39;,   passagem: 1630.00, hotel: 2500.00, category: &#39;europe&#39;},
    {name: &#39;Amsterdam&#39;, passagem: 1430.00, hotel: 1750.00, category: &#39;europe&#39;},
    {name: &#39;Santiago&#39;,  passagem: 600.00,  hotel: 1150.00, category: &#39;south-america&#39;},
    {name: &#39;Buenos Aires&#39;, passagem: 520.00, hotel: 950.00, category: &#39;south-america&#39;},
    {name: &#39;Barcelona&#39;, passagem: 1390.00, hotel: 1670.00, category: &#39;europe&#39;},
    {name: &#39;Lisboa&#39;,    passagem: 1280.00, hotel: 1450.00, category: &#39;europe&#39;},
    {name: &#39;Vancouver&#39;, passagem: 1590.00, hotel: 320.00, category: &#39;north-america&#39;},
    {name: &#39;Roma&#39;,      passagem: 1400.00, hotel: 1950.00, category: &#39;europe&#39;},
  ];
  var citiesWithPackages = utilities.map(cities, function(city){
    if(typeof city.passagem !== &#39;undefined&#39; &amp;&amp; typeof city.hotel !== &#39;undefined&#39;) {
      var clone = utilities.toClone(&#34;object&#34;);
      var city = clone(city);
      city.pacote = (city.passagem + city.hotel) * 0.8;
    }
    return city;
  });
});
&lt;/pre&gt;

&lt;p&gt;O método toClone é muito mais eficiente. Ele recebe como argumento a string “object” ou “array” e retorna a função correta para clonar esse tipo de objeto. E foi isso que utilizei na linha 58, dentro da função callback para a variável citiesWithPackages.&lt;/p&gt;

&lt;p&gt;O método toClone é uma função de ordem superior que retorna outra função para ser utilizada futuramente.&lt;/p&gt;

&lt;p&gt;Bom, é isso. Uma introdução à programação funcional. Por fim, se quiser continuar seu aprendizado em programação funcional, recomendo as video aulas da &lt;a href=&#34;http://webschool.io/jsfuncional/&#34;&gt;webschool.io&lt;/a&gt;, do Suissa. O cara disponibiliza gratuitamente um material muito bom e abrengente.&lt;/p&gt;

&lt;p&gt;Grande abraço.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>