<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bernard De Luna on Tableless</title>
    <link>http://tableless.com.br/author/bernard-de-luna/index.xml</link>
    <description>Recent content in Bernard De Luna on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/author/bernard-de-luna/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A sua empresa tem alma e não é a do seu cliente</title>
      <link>http://tableless.com.br/empresa-alma-nao-cliente/</link>
      <pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/empresa-alma-nao-cliente/</guid>
      <description>

&lt;p&gt;Você não cria um aplicativo pensando exclusivamente no usuário, você é contratado para pensar em um objetivo: ROI. Infelizmente a maioria dos profissionais da área esquecem isso por estarem extremamente focados (o que é muito errado) apenas em &lt;strong&gt;User-centered Design&lt;/strong&gt;. Ao menos que seu projeto seja filantrópico, seu GOAL não é só agradar o usuário, e sim visar o lucro, seja através de comércio, branding ou o que for. Veja bem, agradar o usuário é apenas um dos (na maioria dos casos o mais importante) meios no qual você utilizará para conseguir atingir um ROI positivo. Deixa eu representar isso com um exemplo:&lt;/p&gt;

&lt;p&gt;Existia um pequeno bar/restaurante no centro do Rio de Janeiro, onde constantemente íamos almoçar na sexta-feira. A comida e a fartura era tão grande que chamávamos o lugar carinhosamente de “comida infinita”. Dentre os releases sobre o lugar, um enaltece qualidades como &amp;#8220;um grande balcão interno e mesas no exterior, cerveja gelada, petiscos deliciosos, cachaças e batidas caseiras e vinhos de qualidade&amp;#8221;.&lt;/p&gt;

&lt;p&gt;O bar é um sucesso de público e oferece tudo com muita qualidade, mas e a experiência do usuário, que é o nosso tema?&lt;/p&gt;

&lt;p&gt;O dono do local é conhecido por maltratar todos seus clientes, dando foras o tempo todo, se negando a responder algumas perguntas, se recusando a atender alguns que estão em pé, brigando com quem deixa comida no prato ou faz cara feia ao beber uma das batidas que ele serve, inclusive briga se você demorar muito a escolher algo, um verdadeiro &amp;#8220;gentleman&amp;#8221;. Como então você pode aceitar que um mal atendimento possa gerar uma UX a ponto de tornar esses botequim super famoso? &lt;strong&gt;Função e manipulação&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&#34;função-e-manipulação&#34;&gt;Função e manipulação&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Função simples do bar / restaurante:&lt;/strong&gt; Comida de extrema qualidade e abundância, Bebida extremamente gelada, Preço totalmente acessível.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manipulação:&lt;/strong&gt; O dono é a alma do bar, quando ele não podia estar no local, o bar simplesmente não abria(ele tinha em torno de uns 5 funcionários). O bar era temático com muitas bebidas e coisas antigas, seu bigode meio anos 70 e suas músicas sempre muito antigas como anos 30, 40, 50 até 70 (rock e até mesmo samba).&lt;/p&gt;

&lt;p&gt;Quando você junta qualidade de serviço com um atendimento personalizado, você consegue manipular a experiência do usuário de forma ímpar, não mais perdendo pontos por ser rabugento e sim virando uma personalidade para os que vão na primeira vez e contam os dias da semana para voltarem lá e engordarem ainda mais. Temos muitos exemplos de personagens rabugentos que são adorados como o Erick da Caverna do Dragão, Seu Madruga e Dona Florinda, Professor Raimundo, Rafiki (babuíno do Rei Leão) e muitos, muitos outros… Ser maltratado é sempre ruim, ao menos que você identifique algo caricato nisso, que é o caso do nosso personagem dono do bar.&lt;/p&gt;

&lt;p&gt;Quando você conhece o seu cliente, recebe a missão de resolver alguns problemas, inclusive não deixar a postura pessoal dele atrapalhar a experiência do usuário. Cabe a você definir qual a sua audiência e desenhar a experiência que será criada e manipulada, assim você permite construir interações com o seu usuário a fim de criar novas experiências, e é aí que o seu aplicativo pode se diferenciar e se tornar lembrado e desejado pelo seu usuário, afinal você não quer criar um aplicativo para ser commodity, você quer que ele faça parte da vida do usuário.&lt;/p&gt;

&lt;p&gt;Você tem diversas formas de fazer isso, mas sempre deve se focar no objetivo do seu negócio, a partir daí você criará a forma que seu produto deseja ser visto e interagir com o seu usuário: Um grande amigo, um guia, um zoador, um velho mal humorado, uma gostosa(o) e assim vai.&lt;/p&gt;

&lt;h2 id=&#34;o-usuário-já-sabe-o-que-quer&#34;&gt;O usuário já sabe o que quer&lt;/h2&gt;

&lt;p&gt;Talvez essa seja a frase mais defendida por pessoas que não conhecem o seu usuário. Quem nunca clicou no ícone que mostrava os computadores piscando para a internet ficar mais rápida? Quantas vezes você já comprou uma promoção de compras coletivas sem pensar duas vezes e se arrependeu? Ou comprou em um site de descontos uma roupa que você sabe que não servirá no seu corpo? Definitivamente nós não sabemos o que queremos.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Se eu perguntasse para os meus clientes o que eles achavam, eles diriam: um cavalo mais veloz.&lt;/p&gt;

&lt;p&gt;As pessoas não sabem o que querem até você mostrar a elas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essas duas frases foram ditas por dois nomes que representam uma cultura de inovação, Henry Ford e Steve Jobs, respectivamente. Faça um exercício simples de inovação e veja se você realmente sabe o que um usuário quer. Abra o seu smartphone e rabisque numa coluna do seu caderno os aplicativos que você usa diariamente, em outra coluna liste os aplicativos que você nunca usou ou só usou uma vez. Peça para o seu colega fazer o mesmo que você e compare a lista de aplicativos. Provavelmente a lista de aplicativos será bastante parecida, então por que criaram os aplicativos que ninguém aparentemente usa?&lt;/p&gt;

&lt;p&gt;A maioria dos aplicativos, produtos e serviços são criados para resolver um problema interno pessoal ou da empresa, outros são criados para educar a população para utilizá-lo e a partir daí criar novos problemas. Em 2010 dei uma palestra na Gama Filho para estudantes de Design e propus uma atividade no fim da palestra, onde dividi o público em grupos de 5 pessoas, e eles tiveram 15 minutos para idealizar um aplicativo com canetas em cartolinas. No fim, as ideias foram bastante variadas e todos utilizaram o mesmo discurso de motivação baseada em uma dificuldade ou necessidade de um ou mais integrantes. Com grupos diferentes, temos motivações diferentes e conseqüentemente aplicativos, produtos e serviços diferentes. Nesse mesmo ano, participei da criação de um site para resolver um problema muito comum, qual o preço do taxi para ir do lugar A para o lugar B? Assim, analisando os cenários e as personas, criamos o &lt;a href=&#34;http://precodotaxi.com.br/&#34; title=&#34;http://precodotaxi.com.br/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://precodotaxi.com.br/&#34;&gt;http://precodotaxi.com.br/&lt;/a&gt;&lt;/a&gt;, um serviço online de estimativa de custo da sua viagem de taxi, seja bandeira 1 ou 2, inclusive mostrando o trecho a ser percorrido. O projeto foi um sucesso tão grande que saímos nos principais canais online como globo, r7, ig, uol, blogdotas, rosana, e muitos outros.&lt;/p&gt;

&lt;p&gt;Então quando falamos de serviços online, seja para ver preço de taxi, pedir taxi pelo celular, alguém trazer um produto de fora do país, encontrar imóveis, buscar melhores passagens aéreas, reservar hotéis, descobrir melhores redes sem fio, saber o clima de budapeste, aprender idiomas online, aprender a tocar violão online, paquerar online, xingar seu amigo, tudo isso só é possível centrado no usuário, mas quando há um cliente nesses serviços, precisamos nos centrar no aumento de vendas, em um bom CTR se houver banners, de pensar em um modelo inovador de monetização, seja freemium, paytowin, shareware, adware, entre outros. Lembre-se que o sucesso do seu cliente começa com a experiência do usuário, mas não se limita a isso, nunca esqueça do seu cliente.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Se design fosse focado 100% apenas na experiência do usuário, não teríamos banners na internet.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>3 patinhos foram passear. Por que? Quem eram eles?</title>
      <link>http://tableless.com.br/3-patinhos-passear-eram/</link>
      <pubDate>Mon, 09 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/3-patinhos-passear-eram/</guid>
      <description>

&lt;p&gt;Algumas vezes se perde muito tempo falando das funcionalidades de um produto, os objetivos financeiros da empresa e o processo do serviço da empresa, e esquecem o mais importante, o que os usuários querem. Acredito que o desejo do usuário é tão importante no processo do Design que determinamos um capítulo só para ele.&lt;/p&gt;

&lt;p&gt;Nesses anos de profissão, acredito que já tenha ouvido de tudo de clientes, desde alguns que nem tinham empresa até outros de multinacionais. A maioria dos casos são pensamentos confusos e fechados por parte dos clientes, porém muitas outras é uma postura egocêntrica ou arrogante do próprio designer. Ambas juntas somam uma verdadeira catástrofe para o projeto e para o usuário.&lt;/p&gt;

&lt;h2 id=&#34;eu-sei-o-que-o-usuário-quer&#34;&gt;Eu sei o que o usuário quer&lt;/h2&gt;

&lt;p&gt;Quando atuava como Team Leader de Front-end e Design na Petrobras, em quase todos os projetos quem tinha o contato de elaboração de projeto com o cliente eram os gerentes de projeto. Em muito dos casos, eles chegavam na nossa mesa com o sistema já definido e inclusive rabiscado no papel. Começamos então um trabalho, onde sempre um dos designers participa da primeira reunião para evitar esse tipo de engano, infelizmente a situação se tornou pior, pois o gerente de projeto acreditava que se estávamos na reunião, deveríamos elaborar o projeto e interfaces junto ao cliente e preparava o cliente para receber o mesmo nessa reunião.&lt;/p&gt;

&lt;p&gt;A situação ficou bastante critica até eu criar uma das únicas regras que foram impostas no time, a proibição de qualquer designer tomar qualquer decisão sobre um projeto em qualquer reunião. Quando você não pode tomar decisão no momento, você acaba sendo obrigado a absorver ao máximo as reuniões e não dá margem para pular etapas sob pressão, como citado no capítulo anterior.&lt;/p&gt;

&lt;p&gt;Muitas vezes o cliente acha que conhece o seu público porque ele faz as perguntas erradas. Já foi provado que se você perguntar para seus usuários se eles querem uma nova funcionalidade X, 90% deles dirão que sim. Existe uma frase criada pelo arquiteto de informação &lt;em&gt;Rudy Duke&lt;/em&gt; que diz que um bom designer pode não ter todas as respostas, mas ele sabe que perguntas devem ser feitas.&lt;/p&gt;

&lt;p&gt;Entendo também que muitos Designers têm grande parcela de culpa no processo, por acreditarem saberem mais que o cliente e não ouvi-lo em reunião. Uma boa parceria com o cliente faz um projeto ser de grande satisfação e produção para os projetistas e um retorno maior ainda para o cliente. Vale lembrar que os projetistas de um site ou aplicativo não são apenas os designers, desenvolvedores são peças importantes na hora de discutir sobre o projeto com o cliente.&lt;/p&gt;

&lt;blockquote class=&#34;big-blockquote&#34;&gt;
  &lt;p&gt;
    O Startup DEV é um modelo de desenvolvimento de Software em que uma equipe entrega aplicativos web completamente funcionais após dois dias de trabalho. Antes do desenvolvimento, é feita uma reunião para a definição de um número restrito de funcionalidades suficientes para a resolução de um determinado problema do cliente. Isso é chamado de &lt;strong&gt;MVP &amp;#8211; Minimum Viable Product&lt;/strong&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Uma das etapas utilizadas para a descoberta do MVP é o trabalho de prototipação colaborativa, que consiste em desenhos feitos por cada um dos presentes na reunião (integrantes da equipe e o cliente). Cada pessoa deve apresentar o seu desenho mostrando quais telas e funcionalidades o sistema deve ter. Nesse momento, é formada uma discussão para definição de quais são as melhores ideias e, assim, é feito um desenho final compilado a partir delas.
  &lt;/p&gt;
  
  &lt;p&gt;
    Os desenhos visam primordialmente melhorar a comunicação e não necessariamente são determinantes para o design final dos projetos. Até pouco antes da publicação deste artigo, o Startup DEV já entregou mais de 30 projetos e teve 100% de satisfação. A equipe (Rafael Lima, Ramon Bispo, Sylvestre Mergulhão e o time HE:labs) acredita que a prototipagem em papel é parte fundamental desse sucesso.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;b class=&#34;fake-blockquote-cite&#34; style=&#34;text-align: right;font-size: .8em&#34;&gt;Rafael Lima, Ramon Bispo e Sylvestre Mergulhão &amp;#8211; StartupDEV&lt;/b&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A prototipação colaborativa foi o método mais eficiente que a Startup DEV encontrou para conseguir evitar refação e garantir o alinhamento das expectativas do seu cliente ao longo do projeto, e é uma das técnicas mais indicadas para trazer o cliente para o processo de criação, garantindo uma satisfação maior de todos os lados, pois se o cliente virar alvo da apresentação final, existe uma grande chance do projeto ser feito focado na aprovação e não na utilização do cliente final, onde todos sairão perdendo em qualidade, investimento e experiência.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O Designer Gladiador</title>
      <link>http://tableless.com.br/o-designer-gladiador/</link>
      <pubDate>Tue, 27 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-designer-gladiador/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Em 2012 fechei um contrato de lançar um livro sobre as etapas e conceitos em cima de um projeto digital, no meio do caminho decidi abortar o livro e seguir um caminho aberto onde todos possam ter acesso ao conteúdo de forma gratuita. Assim, publicarei alguns dos textos criados 🙂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em Design, a primeira coisa a ser feita em um projeto é a pesquisa sobre o negócio do cliente, mas só ouvi chamarem essa pesquisa inicial de arena em um curso de planejamento que fiz com o Professor Jorge Langone em 2009 na PUC Rio. Fiquei apaixonado pelo conceito de ARENA, principalmente por me fazer lembrar do aclamado filme de Ridley Scott &amp;#8211; O Gladiador. Principalmente pela atuação de Russell Crowe e seu personagem General Máximus, que tem uma relação de soberania com a arena e com aqueles que fazem parte dela.&lt;/p&gt;

&lt;p&gt;O que faz Máximus triunfar nas batalhas, tanto como general quanto gladiador é ser um exímio espectador. Consigo ainda separar três qualidades do personagem na arena, que fariam Máximus ser também um designer de sucesso:&lt;/p&gt;

&lt;h3 id=&#34;relacionar-com-o-cenário-antes-de-um-projeto&#34;&gt;Relacionar com o cenário antes de um projeto&lt;/h3&gt;

&lt;p&gt;Antes de erguer-se para um combate, o personagem de Russel Crowe sempre pegava um punhado de terra em suas mãos como forma de ritual, assim conseguia imergir na arena.&lt;/p&gt;

&lt;h3 id=&#34;identificar-os-pontos-fracos&#34;&gt;Identificar os pontos fracos&lt;/h3&gt;

&lt;p&gt;Em uma outra cena, antes de abrirem os portões, Máximus observa o nervosismo de um jovem que está a sua frente. Sabiamente, o general traça uma nova estratégia, mantendo distancia do ponto fraco para um combate vitorioso.&lt;/p&gt;

&lt;h3 id=&#34;identificar-e-potencializar-os-diferenciais&#34;&gt;Identificar e potencializar os diferenciais&lt;/h3&gt;

&lt;p&gt;O que fez o aclamado “Espanhol” conseguir triunfar em sua missão pessoal contra Cómodo, foi saber aplicar seus diferenciais de combate adquiridos em guerras para sobreviver, conseguir o respeito dos outros gladiadores, liderá-los na arena e por fim conquistar os romanos.&lt;/p&gt;

&lt;h2 id=&#34;reconhecendo-a-arena&#34;&gt;Reconhecendo a Arena&lt;/h2&gt;

&lt;p&gt;Quando temos a missão de iniciar um novo projeto ou um redesign, devemos começar com cinco perguntas simples e primordiais:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Por que você criou esse projeto?&lt;/li&gt;
&lt;li&gt;Para que você criou esse projeto?&lt;/li&gt;
&lt;li&gt;Para quem você criou esse projeto?&lt;/li&gt;
&lt;li&gt;Por que alguém usaria o seu projeto?&lt;/li&gt;
&lt;li&gt;Por que alguém NÃO usaria o seu projeto?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essas perguntas podem ser feitas através de um questionário por email, uma conversa informal em um café ou em um bar (de preferência o segundo), até mesmo dissolvido em um Briefing. O importante é forçar aquele que será o seu cliente (mesmo que seja um cliente interno) a pensar no projeto antes de confiá-lo a você. Iniciar um projeto sem ter essas perguntas bem respondidas e definidas pode gerar um grande ruído e até mesmo uma ruptura de projeto mais para frente.&lt;/p&gt;

&lt;p&gt;Há alguns anos atrás, um cliente chegou para mim com um projeto inovador para eu gerenciar, montei a equipe indicada para desenhar esse aplicativo e começamos a projetar a interface desse App que poderia suprir a necessidade de muitos profissionais e empresas. No fim dos processos de Design, os sócios acreditavam que a interface não estava valorizando o serviço como uma empresa séria. Foi a primeira vez entre todos os meses de projeto que foi informado que o Design não era de um App e sim de uma empresa. Culpa toda nossa por ter feito as perguntas erradas, assumimos o prejuízo do retrabalho e nos realinhamos em cima da realidade do projeto e ele foi lançado em cima das expectativas e exigências do cliente.&lt;/p&gt;

&lt;h2 id=&#34;resistindo-à-tentação-da-arte&#34;&gt;Resistindo à tentação da arte&lt;/h2&gt;

&lt;p&gt;Seus pais, sua namorada(o) e a maioria dos seus amigos não conseguem saber a diferença entre Design e Arte, mas e você?&lt;/p&gt;

&lt;p&gt;Antes de se pensar no projeto, precisamos definir quem somos e como atuaremos, pois só sabendo quem somos poderemos traçar uma postura para lidar com nosso cliente. Uma das formas mais ricas que já encontrei sobre quem somos é através dos ideais traçados por Jakob Nielsen, onde o mesmo diz:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O ideal artístico de expressar-se e o ideal da engenharia de resolver um problema para o cliente. Este livro coloca-se firmemente ao lado da engenharia. Embora eu reconheça que haja necessidade de arte, alegria e diversão na Web, acredito que o principal objetivo da maioria dos projetos da web seja facilitar aos clientes o desempenho de tarefas.&lt;/p&gt;

&lt;p align=&#34;right&#34;&gt;
  Jakob Nielsen, Designing web usability: The practice of simplicity
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sendo assim, podemos assumir que somos engenheiros, somos facilitadores, somos resolvedores de problemas, somos projetistas e utilizamos a arte como uma das estratégias criativas para resolução dos problemas de nossos clientes. Então, assumindo que “o principal objetivo da maioria dos projetos da web seja facilitar aos clientes o desempenho das tarefas“, como podemos limitar o nosso trabalho à interface? Devemos primeiro investigar toda a atmosfera, ou se preferir, a Arena e todas as suas variáveis, identificando:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O cenário&lt;/li&gt;
&lt;li&gt;Os clientes&lt;/li&gt;
&lt;li&gt;Os objetivos&lt;/li&gt;
&lt;li&gt;As tarefas&lt;/li&gt;
&lt;li&gt;O problema&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esses itens ordenados são tão inspiradores que podemos traçar até um roteiro, onde “ao observar um cenário, podemos identificar os nossos clientes e quais objetivos que eles desejam realizar, observando cada tarefa que precisa ser cumprida e a interação dos usuários com essas tarefas, a fim de mapear possíveis problemas e projetar uma melhor experiência“.&lt;/p&gt;

&lt;p&gt;Infelizmente, nem sempre poderemos resolver os problemas, seja por motivo técnico, filosófico, organizacional ou até mesmo de logística da empresa. Já vi empresa de médio porte trocar de marca e de nome por causa de reclamações de usuários. O problema claramente não era na interface, nem nos produtos e sim de logística que gerava muitas vezes a não entrega ou a entrega fora do prazo.&lt;/p&gt;

&lt;p&gt;Atualmente com as redes sociais e ferramentas de monitoramento, é muito mais simples identificar tais problemas de descontentamento, seja para um projeto de valorização da marca, ou até mesmo para se guarnecer de um possível não retorno esperado do seu cliente.&lt;/p&gt;

&lt;p&gt;Lançar algum projeto pulando etapas pode gerar uma frustração para os usuários e para o seu cliente. Se o tempo ou o investimento for curto, dê preferência a retirada de algumas funcionalidades e não da perda de qualidade do projeto, pense que você deseja comprar um carro, se você não tiver dinheiro para aquele modelo completo, você vai comprar aquele modelo só que sem ar condicionado, sem ser 4 portas, sem trava e vidro elétrico, mas nunca com o carro funcionando pior ou feito de qualquer maneira.&lt;/p&gt;

&lt;p&gt;_&lt;/p&gt;

&lt;p&gt;**Que o preparo e pesquisa referencial é importante todos sabemos. Mas no dia-a-dia de correria, deadlines e cobranças, a tentação de pular etapas sempre fica presente, e infelizmente as gambiarras chegam a ser recomendadas pelos colegas, o que acaba aumentando a inclinação do profissional à ceder às pressões. Apenas os indivíduos realmente sérios e convictos mantém a cabeça fria e seguem os processos necessários para entregarem soluções embasadas a seus clientes.&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Após ouvir centenas de idéias de negócios, minha paciência com as pessoas preguiçosas se esgotou. Caso você tenha assistido o programa Dragons Den&lt;/em&gt; [BBC] você verá que investidores não tem tempo para idéias sem fundamento e pesquisa. Palavras são totalmente inúteis caso a pessoa não tenha números sólidos e de fontes confiáveis comprovando as teorias sendo apresentadas.&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**Um exemplo de falta de pesquisa é a decisão da implementação da linguagem de programação criada pelo Facebook: o FBML, caso eles tivessem perguntado a sua base de usuários, teriam descoberto que as pessoas prefeririam usar o bom e velho HTML, ou sua versão nova o HTML5, que além de mais flexível e robusto, já faz parte da base de conhecimento dos programadores de interface que por tanto tempo lutaram com as restrições da rede social mais popular do mundo. Veja outros #fails do Facebook: &lt;a href=&#34;http://on.mash.to/q4JoF3&#34;&gt;http://on.mash.to/q4JoF3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**Tendo trabalhado em uma dezena de agências digitais, já sofri as conseqüências de assumir projetos sem pesquisa. Sites que irritam, campanhas que não convencem e aplicativos que não são baixados são muitas vezes frutos de arrogância, pressa ou inexatidão de dados de pesquisa. Por exemplo: muitos criativos publicitários parecem esquecer que o país inteiro não possui um Iphone 4S, nível superior completo e pagaria R$300 pela entrada de um show ao vivo. De fato nem a metade dos Brasileiros sequer tem acesso a internet hoje (Ibope NetRatings).&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**Portanto antes de falar tenha absoluta certeza de seus dados, tenha a segurança e conforto do conhecimento, a riqueza e apoio dos dados verídicos, para depois não ficar com cara de bobo, ou pior, sofrer as conseqüências de um fracasso financeiro e/ou jurídico. Entenda seu público, seus concorrentes e seu produto para poder fazer bonito, e ainda mostrar os resultados de um trabalho bem planejado. Caso depois o projeto não dê certo, pelo menos você fez toda a preparação necessária para no mínimo, salvar seu emprego!&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bernardo Carvalho&lt;/strong&gt; é ex-diretor de Projetos na NBS (NoBullshit.com.br) com 13 anos de experiência no mercado de criação digital em Londres e no Rio de Janeiro.&lt;/p&gt;

&lt;p&gt;_&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como usar linear-gradient em CSS de forma consciente?</title>
      <link>http://tableless.com.br/como-usar-gradient-no-css-de-forma-consciente/</link>
      <pubDate>Wed, 20 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-usar-gradient-no-css-de-forma-consciente/</guid>
      <description>

&lt;p&gt;Vejo em diversos grupos, fóruns e blogs as pessoas recomendando diversos sites que geram automaticamente o seu linear-gradient em CSS, Eu nos últimos meses tenho criticado um pouco a recomendação dessas tecnologias, pois já está mais do que na hora de aprendermos e utilizarmos esses atributos de forma criativa.&lt;/p&gt;

&lt;h2 id=&#34;desculpa-bernard-mas-do-que-você-está-falando&#34;&gt;Desculpa Bernard, mas do que você está falando?&lt;/h2&gt;

&lt;p&gt;Olá tudo bem? Meu nome é Bernard De Luna, você está no Tableless, até aí tudo bem? Brincadeira, deixa eu contextualizá-lo primeiro:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;linear-gradient&lt;/code&gt; é uma funcionalidade das CSS3 para criar degrades entre 2 ou mais cores em linha. Farei um pequeno exemplo para perceberem como é fácil fazer um gradiente sem utilizar editor:&lt;/p&gt;

&lt;p&gt;OBS: Por questão de compatibilidade de browsers, vale a pena vocês consultarem o &lt;a href=&#34;http://caniuse.com/#search=linear&#34; title=&#34;http://caniuse.com/#search=linear&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://caniuse.com/#search=linear&#34;&gt;http://caniuse.com/#search=linear&lt;/a&gt;&lt;/a&gt; para usar prefixos como -webkit, -moz, -ms, -o, etc., &lt;strong&gt;para esses exemplos não utilizarei prefixos&lt;/strong&gt;. Outro ponto importante é que na nova especificação, o &amp;#8220;top&amp;#8221; virou &amp;#8220;to bottom&amp;#8221;, porém essa mudança só existe no valor sem prefixo, as escritas com prefixo ainda usam a direção top, right, bottom, left como padrões.&lt;/p&gt;

&lt;h2 id=&#34;linear-gradient-nível-básico&#34;&gt;linear-gradient nível básico&lt;/h2&gt;

&lt;p&gt;O gradiente é renderizado como uma imagem de fundo, então podemos chamá-lo assim. Dentro do ( ) temos que definir o ângulo do degrade e depois em vírgulas os canais de cores.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: linear-gradient(to bottom, white, purple);&lt;/pre&gt;

&lt;div class=&#34;exemplo e1&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Mudando o ângulo do degrade&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: linear-gradient(to right, white, purple);&lt;/pre&gt;

&lt;div class=&#34;exemplo e2&#34;&gt;
&lt;/div&gt;

&lt;pre class=&#34;lang-html&#34;&gt;background-image: linear-gradient(45deg, white, purple);&lt;/pre&gt;

&lt;div class=&#34;exemplo e3&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Podemos colocar mais vírgulas e inserir mais canais de cores para o degrade, até agora tudo muito simples né?&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: linear-gradient(to right, white, purple, yellow);&lt;/pre&gt;

&lt;div class=&#34;exemplo e4&#34;&gt;
&lt;/div&gt;

&lt;p&gt;O problema das explicações sobre gradient é que são todas feias e não usuais, o que dificulta algumas pessoas se sentirem confiantes em criá-las, por isso, vamos criar um degrade bacana para um botão.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: linear-gradient(to bottom, #cf2b4f, #980021);&lt;/pre&gt;

&lt;div class=&#34;exemplo e5&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Eu prefiro degrades mais suaves, por isso, vamos aprender outra coisa importante no &lt;code&gt;linear-gradient&lt;/code&gt;, que é onde a cor vai parar. Então vamos dizer que o vermelho mais escuro não finalizará no padrão (não informado) de 100%, vamos fazê-lo parar um pouco depois, suavizando um pouco mais o gradiente.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: linear-gradient(to bottom, #980021 130%);&lt;/pre&gt;

&lt;div class=&#34;exemplo e6&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Viram que ficou mais bonito? Para ficar ainda mais visual, colocarei alguns estilos simples para perceberem que somados fazem nosso elemento ficar bastante sexy!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;height:auto;
padding: 40px 0;
color:#fff;
font-size:20px;
text-align:center;
border-radius:4px;
border:1px solid #980021;
box-shadow: inset 0 2px 3px 0 rgba(255,255,255,.3), inset 0 -3px 6px 0 rgba(0,0,0,.2), 0 3px 2px 0 rgba(0,0,0,.2);
background-image: linear-gradient(to bottom, #cf2b4f, #980021 130%);
&lt;/pre&gt;

&lt;div class=&#34;exemplo e7&#34;&gt;
  olha como eu sou sexy!
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Como esse post é apenas sobre degrade, vamos voltar para o assunto 🙂&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Em alguns casos, você não precisa definir as cores precisamente do seu degradee, passando a usar transparência para isso. Por exemplo, você pode utilizar o &lt;code&gt;background-color&lt;/code&gt; para definir a cor de fundo, e depois utilizar um degrade que vai do transparente para o preto com 30% de transparência, vejamos:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#4fd8e8;
background-image: linear-gradient(to bottom, transparent, rgba(0,0,0,.3));&lt;/pre&gt;

&lt;div class=&#34;exemplo e8&#34;&gt;
&lt;/div&gt;

&lt;p&gt;O novo rgba é interessantíssimo para fazer diversas coisas no CSS, como por exemplo fazer um elemento estilo GLASS. Há muitos anos atrás, lá pelos 2006 &amp;#8211; 2007, o estilo visual de vidro estava tomando todas as interfaces, um dia identifiquei um padrão para criar botões de vidro com facilidade. A técnica era tão fácil que até hoje eu lembro dela, basta você começar com uma cor CLARA que vai para uma cor MUITO CLARA, &lt;strong&gt;colado a essa cor&lt;/strong&gt; MUITO CLARA você tem a mesma cor NORMAL, e finaliza com a cor UM POUCO CLARA, apenas essas 4 variações da mesma cor, ou da luz, não acredita? Veja só.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#4fd8e8;
background-image: linear-gradient(to bottom, rgba(255,255,255,.1), rgba(255,255,255,.4), rgba(255,255,255,0), rgba(255,255,255,.4));&lt;/pre&gt;

&lt;div class=&#34;exemplo e9&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Sei que essa hora você está rindo de mim dizendo que não ficou nem parecido com glass, que ficou horrível, que eu sou loiro e burro. Eu sei, mas lembra que eu falei que a cor precisava ser colada(coloquei até em negrito porque eu sabia que você não repararia)? Vamos ajustar o &lt;strong&gt;&amp;#8220;color stop&amp;#8221;&lt;/strong&gt; do degrade, em outras palavras, vamos ajustar onde cada cor vai parar.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#4fd8e8;
background-image: linear-gradient(to bottom, rgba(255,255,255,.1), rgba(255,255,255,.4) 49%, rgba(255,255,255,0) 50%, rgba(255,255,255,.4));&lt;/pre&gt;

&lt;div class=&#34;exemplo e10&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Agora sim hein! Como diz Bart Simpsons &amp;#8220;&lt;em&gt;Meninos loiros não são burros, eles são maus, como em Karate Kid ou II Guerra Mundial&lt;/em&gt;&amp;#8220;. O mais bacana é que como o degrade está sendo feito com camadas de transparência, você pode fazer qualquer efeito ou adaptação do efeito através da simples mudança de cor de fundo. Outro ponto muito importante é que o &lt;strong&gt;CSS transition não funciona para o linear&lt;/strong&gt;, pois o mesmo é renderizado como IMAGEM, sendo assim, você consegue mudar apenas a cor de fundo e utilizar o CSS transition para tornar o movimento mais divertido. Veja só:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;{
height:auto;
padding: 40px 0;
color:#fff;
font-size:20px;
text-align:center;
background-color:#4fd8e8;
background-image: linear-gradient(to bottom, rgba(255,255,255,.1), rgba(255,255,255,.4) 49%, rgba(255,255,255,0) 50%, rgba(255,255,255,.4));
transition: all .5s;
}
:hover { background-color:#0b8b9a; }&lt;/pre&gt;

&lt;div class=&#34;exemplo e11&#34;&gt;
  HOVER ME!
&lt;/div&gt;

&lt;h2 id=&#34;linear-gradient-nível-intermediário&#34;&gt;linear-gradient nível intermediário&lt;/h2&gt;

&lt;p&gt;Agora que você já entendeu como fazer degrades simples utilizando o &lt;code&gt;linear-gradient&lt;/code&gt;, vamos brincar um pouco mais? Quando eu criei o &lt;a title=&#34;https://developer.mozilla.org/en-US/demos/detail/old-radio/launch&#34; href=&#34;https://developer.mozilla.org/en-US/demos/detail/old-radio/launch&#34; target=&#34;_blank&#34;&gt;Old Radio&lt;/a&gt; sem utilizar nenhuma imagem eu tive 3 itens para trabalhar a realidade apenas com CSS: a retina display, a textura de madeira e as estações do rádio, vamos aprender a fazer as três coisas?&lt;/p&gt;

&lt;h3 id=&#34;retina-display&#34;&gt;Retina Display&lt;/h3&gt;

&lt;p&gt;Essa técnica foi bem simples, mas o resultado ficou muito bom, única coisa que precisamos é utilizar a transparência do RGBA mostrada anteriormente e um ângulo diferente para dar o efeito, no Old Radio eu usei -88deg, mas aqui colocarei -78deg para ficar mais visível, veja só:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#312d28;
background-image:linear-gradient(-87deg, rgba(255,255,255,0.1) 0%,rgba(255,255,255,0.08) 49%,rgba(255,255,255,0.03) 50%,rgba(0,0,0,0) 51%,rgba(0,0,0,0.4) 100%);&lt;/pre&gt;

&lt;div class=&#34;exemplo e12&#34;&gt;
&lt;/div&gt;

&lt;h3 id=&#34;textura-de-madeira&#34;&gt;Textura de Madeira&lt;/h3&gt;

&lt;p&gt;Fiquei bons minutos olhando para a textura de madeira sem saber como a faria em CSS, até mesmo se seria possível, até que fiz um teste utilizando o RGBA em cima da cor marrom e rapidamente vi que poderia criar uma técnica bem divertida para transformar uma cor marrom em uma textura de madeira. A técnica é utilizar 2 únicas cores, sendo uma transparente e outra com 10% de transparência, veja bem como foi feita:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#5f3c24;
background-image:linear-gradient(to bottom, transparent, rgba(0,0,0,.1));&lt;/pre&gt;

&lt;div class=&#34;exemplo e13&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Agora digo que cada cor para depois de 1px, como a altura do elemento é maior que 2px (só temos duas cores), a última cor persistirá até o final do elemento.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#5f3c24;
background-image:linear-gradient(to bottom, transparent 1px, rgba(0,0,0,.1) 1px);&lt;/pre&gt;

&lt;div class=&#34;exemplo e14&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Para finalizar, eu utilizo um atributo novo bem importante que é o &lt;code&gt;background-size&lt;/code&gt; onde eu digo que a altura do meu degrade é de 2px, como o padrão do fundo é repetir, as linhas começam a se repetir, fazendo uma textura bem suave de madeira.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#5f3c24;
background-image:linear-gradient(to bottom, transparent 1px, rgba(0,0,0,.1) 1px);
background-size: auto 2px;&lt;/pre&gt;

&lt;div class=&#34;exemplo e15&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Prontinho! Temos uma textura de madeira apenas com gradiente, caso você não esteja conseguindo ver a diferença, dê um zoom no browser e veja a belezura 🙂 Então vamos ao último e mais difícil das 3 coisas do Old Radio, as estações de rádio.&lt;/p&gt;

&lt;h3 id=&#34;estações-de-rádio&#34;&gt;Estações de rádio&lt;/h3&gt;

&lt;p&gt;Criar as estações de rádio apenas com uma tag e apenas no CSS parecia ser algo impossível, mas nada que um estudo não pudesse me mostrar novamente que tudo é possível com CSS, é apenas combinar o gradiente com repetição, posição e tamanho do background. Inicialmente vamos criar várias palhetas utilizando a mesma técnica do exercício anterior:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#312d28;
background-image: linear-gradient(to right, rgba(255,255,255,.3) 1px, transparent 1px);
background-size: 5px 5px;&lt;/pre&gt;

&lt;div class=&#34;exemplo e16&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Só que nós não queremos que o nosso fundo vá até o final, repare que colocamos o &lt;code&gt;background-size: 5px 5px&lt;/code&gt;, mas de que adianta isso se não mexermos no &lt;code&gt;background-repeat&lt;/code&gt;? Então vamos definir que o nosso fundo só vai se repetir horizontalmente. Para o exercício ficar mais visível vou aumentar um pouco o tamanho das palhetas ok?&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#312d28;
background-image: linear-gradient(to right, rgba(255,255,255,.3) 1px, transparent 1px);
background-size: 10px 10px;
background-repeat: repeat-x;&lt;/pre&gt;

&lt;div class=&#34;exemplo e17&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Agora vem uma coisa bem legal! O CSS3 permite múltiplos backgrounds, ou seja, vamos agora fazer a mesma técnica para essas palhetas pequenas, com apenas duas diferenças, ela vai ser um branco mais forte e estará com o &lt;code&gt;backgrond-size&lt;/code&gt; diferente. OBS: Quando você tem mais de uma imagem de fundo, você pode controlar cada propriedade do background usando vírgulas, sendo a primeira informação para o primeiro fundo, a segunda para o segundo e assim vai, se houver uma só, ela valerá para todos.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#312d28;
background-image: linear-gradient(to right, rgba(255,255,255,1) 1px, transparent 1px), linear-gradient(to right, rgba(255,255,255,.3) 1px, transparent 1px);
background-size: 50px 50px, 10px 30px;
background-repeat: repeat-x;&lt;/pre&gt;

&lt;div class=&#34;exemplo e18&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Irado hein!!! Só que isso é uma régua meu camarada e não uma estação de rádio. Para parecer definitivamente uma estação de rádio precisaremos alinhar o fundo pela parte de baixo, e isso é simples e antigo no css, chama-se &lt;code&gt;background-position&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#312d28;
background-image: linear-gradient(to right, rgba(255,255,255,1) 1px, transparent 1px), linear-gradient(to right, rgba(255,255,255,.3) 1px, transparent 1px);
background-size: 50px 50px, 10px 30px;
background-repeat: repeat-x;
background-position: 0 bottom;&lt;/pre&gt;

&lt;div class=&#34;exemplo e19&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Agora sim! Parabéns, você criou uma estação de rádio apenas usando CSS! Can you feel it?&lt;/p&gt;

&lt;h2 id=&#34;concluindo-8230&#34;&gt;Concluindo&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Os atributos não são muito complicados de serem utilizados, a percepção é que faz toda a diferença para uma aplicação criativa. Agora é você criar experimentos com essas etapas que foram mostradas aqui e ficar O MOOOOONNNSTRROOO do linear-gradient! Quem sabe depois não vem um apenas sobre radial-gradient?&lt;/p&gt;

&lt;p&gt;Aproveite que chegou até aqui e me conte o que achou 🙂 Você já sabia fazer essas coisas com facilidade usando linear-gradient? Deixe seu comentário&lt;/p&gt;

&lt;p&gt;OBS1: Com a nova especificação do valor linear-gradient, o ângulo 0 deixou de ser top e passou a ser right, sendo valores positivos para seguir na direção do relógio e negativo para o contrário. (chamada de atenção pelo grande Sergio Lopes) *já corrigido.&lt;/p&gt;

&lt;p&gt;OBS2: Chamei no começo do artigo linear-gradient de propriedade o que é errado, já que ele é um valor. (chamada de atenção pelo amigo Maujor) *já corrigido.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando seu próprio Framework HTML CSS</title>
      <link>http://tableless.com.br/criando-seu-framework-html-css/</link>
      <pubDate>Mon, 07 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-seu-framework-html-css/</guid>
      <description>

&lt;p&gt;Em 2011, principalmente em 2012, dezenas de pessoas vinham e voltavam com o assunto &amp;#8220;Qual o melhor Framework?&amp;#8221;, fora os bootstrap fanboys de plantão que falavam tão cegamente do Twitter Bootstrap que se somasse todos os amores da internet teriamos um &amp;#8220;cupcake de gato dançando Gangnam Style após tentar beber 1 litro de absolute&amp;#8221; bootstrape. Eu sempre falo isso no meio das minhas palestras e começo dizendo no início desse post: Sejamos menos emotivos e mais analistas em Front-end, explico a seguir:&lt;/p&gt;

&lt;p&gt;Nossa função é analisar as possibilidades, testar as inovações, medir os riscos e otimizar os resultados. Testar frameworks como Twitter Bootstrap, Foundation, &amp;#8230; é parte do nosso trabalho, onde em muitos casos a pessoa esquece a melhor parte: &lt;strong&gt;Criar o seu próprio Framework Front-end&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;por-que-você-deseja-criar-seu-próprio-framework&#34;&gt;Por que você deseja criar seu próprio Framework?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nenhum dos frameworks tem o objeto que eu preciso&lt;/li&gt;
&lt;li&gt;Eu quero total controle sobre o código&lt;/li&gt;
&lt;li&gt;Eu preciso de algo mais simples ou menos objetos do que os outros possuem&lt;/li&gt;
&lt;li&gt;Aprender a criar um Framework por diversão e aprendizado&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;por-que-você-não-deve-criar-o-seu-próprio-framework&#34;&gt;Por que você não deve criar o seu próprio Framework?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Você não tem tempo disponível para criá-lo&lt;/li&gt;
&lt;li&gt;É mais vantajoso utilizar um já pronto do que criar um do zero&lt;/li&gt;
&lt;li&gt;Maior produtividade por utilizar algo já criado e documentado&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se você teve mais afinidade a primeira lista, ou é apenas curioso, vamos começar com alguns tópicos que o levarão a criar o &amp;#8220;defina o nome a sua escolha&amp;#8221; bootstrap.&lt;/p&gt;

&lt;h2 id=&#34;tudo-depende-da-nomeclatura-e-organização&#34;&gt;Tudo depende da nomeclatura e organização&lt;/h2&gt;

&lt;p&gt;Para componentizar sua página de maneira sustentável você precisa explorar ao máximo a organização e padronização do projeto. Quando eu analiso código de alguns profissionais ou empresas, sempre começo olhando pelos nomes utilizados em classes, pois me diz muito sobre a política da empresa na hora da criação das páginas, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;Botão = .button, .botao, .btn, .bt&lt;/pre&gt;

&lt;p&gt;A partir da escolha do padrão, você precisa mantê-lo nas variações&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;.btn-enviar, .btn-cancelar, .btn-salvar, .btn-pesquisar, ...&lt;/pre&gt;

&lt;p&gt;Então geramos uma redundância no prefixo, que é uma coisa boa quando falamos em padrão e organização&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;A partir daí você vai seguir a mesma linha para demais diferenciações e se são diferenciais específicas do componente de botão ou se é uma variação genérica, como visto abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;/* classe full específica */
&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar btn-full&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;

/* classe full generica */
&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar full&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Assim, podemos contextualizar para outros artefatos e seus devidos prefixos:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;Botão = .button, .botao, .btn, .bt
Tabela = .table, .tabela, .tbl, .tb
listas = .list, .lista, .group
widgets = .widgets, .wid
títulos = .title, .tit, .tt, .header, .h
&lt;/pre&gt;

&lt;p&gt;e algumas devidas personalizações&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;Botão = .btn-primary, .btn-secondary, .btn-small, .btn-medium, .btn-loading, .btn-disabled
Tabela = .tbl-roles, .tbl-full, .tbl-small
Tooltip = .tooltip, .tooltip-pin-up, .tooltip-pin-down, .tooltip-small, .tooltip-warning
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OBS: É óbvio que estou dando exemplos e você deve construir seus padrões com a sua equipe e profissionais envolvidos no processo.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;revisando&#34;&gt;Revisando&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A parte mais primordial para a construção de um Framework sustentável é o trabalho de nomeclaturas e seu emprego no código&lt;/li&gt;
&lt;li&gt;O nome dado ao componente deve vir como prefixo das suas diversificações&lt;/li&gt;
&lt;li&gt;Caso uma das variações seja utilizada em outros componentes, ela pode ser utilizada sem prefixo como &amp;#8220;full, clear, left, right, error&amp;#8221;&lt;/li&gt;
&lt;li&gt;Mapeie a nomeclatura e as possibilidades com sua equipe, nunca sozinho&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;coloque-todos-seus-padrões-em-um-único-local&#34;&gt;Coloque todos seus padrões em um único local&lt;/h2&gt;

&lt;p&gt;Um bom framework é reconhecido pela reutilização de seu código, sendo assim, você não pode contar que seus elementos caibam, se alinhem e harmonizem apenas no local pre desenhado, por isso, você precisa criar uma página que apresente todos os elementos padronizados, a fim de testá-los e documentá-los. Repare nas duas páginas abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter Bootstrap: &lt;a href=&#34;http://twitter.github.com/bootstrap/components.html&#34; title=&#34;http://twitter.github.com/bootstrap/components.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://twitter.github.com/bootstrap/components.html&#34;&gt;http://twitter.github.com/bootstrap/components.html&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Foundation: &lt;a href=&#34;http://foundation.zurb.com/docs/elements.php&#34; title=&#34;http://foundation.zurb.com/docs/elements.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://foundation.zurb.com/docs/elements.php&#34;&gt;http://foundation.zurb.com/docs/elements.php&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora que está convencido, você precisa criar essa página de apresentação onde você listará os componentes padronizados. Em um primeiro momento você pode inserir os componentes na página, agrupando (Veja os links acima para inspirar-se) da maneira que achar mais organizada. Essa etapa lhe dará mais segurança, pois a cada componente finalizado, você e sua equipe comemorará pelo padrão criado. Lembre-se que mais do que criar os componentes é preciso sempre dar 360 nos seus artefatos, identificando pontos de melhoria ou bugs, tratando e atualizando-os nessa página de padrões.&lt;/p&gt;

&lt;h3 id=&#34;adendo-para-projetos-responsivos&#34;&gt;Adendo para projetos responsivos&lt;/h3&gt;

&lt;p&gt;Caso você tenha variações padronizadas para projetos responsivos, não os considere na mesma página, por mais que a mudança possa ser percebida na mudança do viewport, crie uma página &amp;#8220;padrao-mobile.html&amp;#8221; ou algo do tipo com o local útil já reduzido simulando a largura do device pretendido, pois os padrões precisam ser facilmente visualizados, nenhuma equipe ficaria contente toda hora tendo que redimensionar navegador para ver o elemento normal e para mobile né?&lt;/p&gt;

&lt;h3 id=&#34;revisando-1&#34;&gt;Revisando&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Todos os componentes padronizados precisam ser incluídos em uma página separada da aplicação para documentação e validação&lt;/li&gt;
&lt;li&gt;Se o elemento estará pronto quando puder ser reutilizado em outros locais sem quebrar (geralmente por má herança CSS)&lt;/li&gt;
&lt;li&gt;Agrupe os elementos (form, títulos, botões, grid, etc) para manter a organização do seu projeto&lt;/li&gt;
&lt;li&gt;Planeje e organize os padrões com sua equipe, nunca sozinho&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;módulos-produtos-componentes-e-ou-artefatos&#34;&gt;Módulos, produtos, componentes e(ou) artefatos&lt;/h2&gt;

&lt;p&gt;Os nomes são variados, pode chamar como achar mais fofo, mas o importante é saber que qualquer framework utiliza itens comuns, então comece por eles e, a partir daí, desenvolva em cima das suas necessidades menos comuns. Os componentes comuns são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grid&lt;/li&gt;
&lt;li&gt;Tipografia&lt;/li&gt;
&lt;li&gt;Botões&lt;/li&gt;
&lt;li&gt;Formulários&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Claro que cada projeto pedirá necessidades especiais, cabendo a você e sua equipe serem flexíveis e espertos. Vamos conversar rapidamente sobre cada um desses 4 componentes?&lt;/p&gt;

&lt;h3 id=&#34;grid&#34;&gt;Grid&lt;/h3&gt;

&lt;p&gt;Lembro de quando eu criei o &lt;a href=&#34;http://formee.org&#34; title=&#34;formee framework&#34; target=&#34;_blank&#34;&gt;Formee framework&lt;/a&gt; e penava com cálculos e mais cálculos para chegar ao Grid flexível perfeito, foram muitas páginas de caderno rabiscadas com contas e mais contas. O Grid é uma parte perigosa do projeto, principalmente por exigirem algumas escolhas desde o começo, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usarei float para diagramação?&lt;/li&gt;
&lt;li&gt;Usarei algum pre processador como Less, Sass ou Stylus?&lt;/li&gt;
&lt;li&gt;Usarei colunas em pixels ou colunas flexíveis?&lt;/li&gt;
&lt;li&gt;Minhas colunas serão responsivas?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A partir daí, você tem uma série de Grids famosos para você estudar e basear o seu projeto, alguns fugindo do float, gerando projetos mais interessantes, porém menos seguros para browsers não atuais (não, não me refiro apenas a IE); alguns utilizando contas dos pre processadores, gerando larguras e espaçamentos automáticos de acordo com o container; alguns utilizando colunas flexíveis (exemplo do Formee) que podem ser muito interessantes para muitos projetos, mas começa a gerar desconforto em containers muito pequenos e alguns utilizando colunas responsivas, que podem refazer todo o pensamento dos 3 primeiros itens dessa lista.&lt;/p&gt;

&lt;p&gt;Uma dica para quem está estudando o desenvolvimento de GRIDs é pesquisar sobre o atributo CSS &lt;strong&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/strong&gt; que é responsável por mudar o display do box model, passando a considerar o padding e border na hora de aparecer na largura/altura final, o box-model convencional não os considera na largura e altura, somando no resultado os valores, ou seja, 300px de largura acaba se tornando 300px + 2px de borda + 10px de padding = 312px total.&lt;/p&gt;

&lt;p&gt;Outro ponto mais avançado que vocês precisarão trabalhar em cima é a parte da criação do grid. Atualmente você tem duas formas de fazê-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;grid-6-12&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;grid-6-12&#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;row&#34;&amp;gt;
&amp;lt;div class=&#34;col-6&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;col-6&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Conseguem entender a diferença? O primeiro é comum em projetos onde você não tem controle sobre a quantidade de divs, assim você cria algo e vai administrando, do outro lado, você controla a diagramação linha por linha. O problema da primeira é o famoso bug de float, que quando um dos elementos rouba mais altura e impacta no elemento da linha de baixo, ele gera um buraco, desorientando os demais irmãos, o problema da segunda é que com isso você engessa totalmente o seu código, prejudicando inclusive a liberdade de uma diagramação criativa para mobiles.&lt;/p&gt;

&lt;p&gt;Rabisque para chegar numa largura confortável do seu grid, conte com um espaçamento confortável entre as colunas, teste, teste, teste e teste.&lt;/p&gt;

&lt;h3 id=&#34;tipografia&#34;&gt;Tipografia&lt;/h3&gt;

&lt;p&gt;Precisamos definir os elementos textuais da aplicação, geralmente são títulos, listas, parágrafos e links. É bastante importante você simular todas as combinações possíveis na etapa de testes, pois sempre pode gerar algum incomodo pro usuário, por exemplo, você ter um título grande, um parágrafo de 2 linhas e outro título grande não é a mesma coisa que 1 título grande e 5 parágrafos grandes, tudo isso precisa ser testado.&lt;/p&gt;

&lt;p&gt;Para você conhecer um pouco mais sobre tipografia na parte de Front-end, recomendo a &lt;a href=&#34;https://github.com/necolas/normalize.css/wiki&#34; title=&#34;https://github.com/necolas/normalize.css/wiki&#34; target=&#34;_blank&#34;&gt;wiki do Normalize.css criado pelo Nicolas Gallagher&lt;/a&gt; que retrata a falta de padronização na mostragem dos elementos textuais entre os browsers. Eu tenho algumas considerações sobre essa filosofia, mas quem sabe isso fica para um outro post 🙂&lt;/p&gt;

&lt;h3 id=&#34;botões&#34;&gt;Botões&lt;/h3&gt;

&lt;p&gt;Creio que a melhor forma de começar a criar seus padrões é pelo grupo de botões, pois é bastante simples e gostoso de criar. Geralmente em um aplicativo existem 2 tipos de botões, primário e genérico. O botão primário(&lt;code&gt;.btn-primary&lt;/code&gt;, &lt;code&gt;.btn-cta&lt;/code&gt;) é o botão das funções principais da página, é o botão de ação final e por isso mais importante, enquanto o botão genérico é utilizado para funções variadas que não sejam a função principal do usuário, a relação primário/genérico é a mesma de salvar/cancelar, avançar/upload photo, etc.&lt;/p&gt;

&lt;p&gt;Alguns projetos acabam necessitando de outros padrões no botão como, por exemplo, &lt;code&gt;.btn-secondary&lt;/code&gt; para botão de importância secundário, mas ainda sim não genérico, e &lt;code&gt;.btn-error.btn-no.btn-delete&lt;/code&gt; para botões que tenham uma carga negativa (vermelho talvez) clara neles para o usuário saber que pode ser perigosa tal opção.&lt;/p&gt;

&lt;p&gt;Geralmente, os botões possuim algumas particularidades comuns em todos os projetos como o .small para uma versão mais minimalista, .full para uma versão de ocupar toda a largura do container. Uma possibilidade é botões com ícones, assim sendo, primeiro é necessário criar um agrupamento de padrões chamados ícones, depois você precisa estudar se o elemento botão precisa sofrer alguma mudança por ter o ícone dentro, caso sim, seria interessante pensar em um padrão focado no &amp;#8220;estado&amp;#8221; do botão, podendo ser &lt;code&gt;.btn-icon&lt;/code&gt;, seguindo o padrão de &lt;code&gt;.btn-disabled&lt;/code&gt;, &lt;code&gt;.btn-loading&lt;/code&gt;, ou até mesmo criar um prefixo que indica as chamadas &lt;strong&gt;&amp;#8220;state rules&amp;#8221;&lt;/strong&gt;, mais difundida atualmente pelo &lt;a href=&#34;http://smacss.com/book/type-state&#34; title=&#34;http://smacss.com/book/type-state&#34; target=&#34;_blank&#34;&gt;SMACSS&lt;/a&gt;, segue um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a.is-disabled { 
  color: gray;
}
.btn.is-disabled { 
  background: gray;
}
&lt;/pre&gt;

&lt;p&gt;Assim, o &lt;code&gt;&amp;quot;is-&amp;quot;&lt;/code&gt; passa a ser um padrão que pode ser reutilizado em diversos componentes, trazendo formatações diferentes. Então você pode criar dois &amp;#8220;states&amp;#8221; se achar interessante no seu projeto, um seria o &lt;code&gt;&amp;quot;is-&amp;quot;&lt;/code&gt; para &lt;code&gt;.is-loading&lt;/code&gt;, &lt;code&gt;.is-active&lt;/code&gt;, &lt;code&gt;.is-disabled&lt;/code&gt;, e criar outro chamado &lt;code&gt;&amp;quot;has-&amp;quot;&lt;/code&gt; como &lt;code&gt;.has-icon&lt;/code&gt;, &lt;code&gt;.has-photo&lt;/code&gt;, &lt;code&gt;.has-offer&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;formulários&#34;&gt;Formulários&lt;/h3&gt;

&lt;p&gt;Formulário, assim como o Grid é um elemento bastante complexo, pois exige muito estudo e testes. Você deve estar pensando &amp;#8220;Ah! Estilizar um input é muito simples&amp;#8221;, e estilizar uma lista de checkbox, radio? E personalizar um select para ele ficar mais interessante no Chrome (atualmente é horrível), e você considerar os novos inputs HTML5 como tel, search, range, e MUITOS outros e tratar de uma forma bacana pro seu app, por isso é bom você realizar testes e padrões.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/strong&gt; citado no Grid é um bom amigo para elementos de formulário também, pois você consegue controlar a largura dele de forma segura, visto que elemento como input não ocupará a linha toda só por ser display: block, você precisará definir largura 100%, daí ele somará o padding e a borda e quebrará seu grid. Mudando o box-sizing, você consegue dizer que o padding e a borda fará parte do 100% de largura, ficando bem mais fácil, não acha?&lt;/p&gt;

&lt;p&gt;Não se esqueça que mensagens de erro, sucesso, atenção, inputs com erros, labels, precisam ser padronizados e também colocados na página com os padrões no agrupamento de formulário. É bastante importante que esse arquivo seja visto pelos desenvolvedores back-end também, para que eles possam até já utilizar os padrões na hora de fazerem testes ou qualquer prototipagem, facilitando na hora da manipulação.&lt;/p&gt;

&lt;h2 id=&#34;javascript-não-é-um-plus&#34;&gt;Javascript não é um plus&lt;/h2&gt;

&lt;p&gt;Melhor do que a padronização visual, a padronização de classes, html e css, é ter também a padronização do funcionamento e manipulação desses componentes. Assim, o desenvolvedor front-end deve se arriscar a padronizar também o javascript, permitindo a reutilização do mesmo e manipulando dentro do padrão perseguido. Tanto o Foundation quanto o Bootstrap são excelentes Frameworks, pois além de seus módulos prontos, possuem interações bem implementadas como modais, tooltips, slideshow, accordion, dropdown, e muitos outros que agregam diretamente no projeto.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Nesses 8 anos de experiência específicos de desenvolvimento de aplicativos online, percebi que quanto mais padrões forem definidos em equipe, aumentamos mais a produtividade, diminuimos os erros no projeto, nos comunicamos melhor entre setores, perdas e ganhos de pessoas no time não gera uma grande perda de velocidade do time, e que a empresa fica sempre com um legado. A criação de um framework não é fácil, mas é bastante possível e, acredite, divertida.&lt;/p&gt;

&lt;h3 id=&#34;turbinando-seu-framework&#34;&gt;Turbinando seu Framework&lt;/h3&gt;

&lt;p&gt;Separei 3 coisas não comentadas acima que eu faço quando desenvolvo meus frameworks atualmente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separo meu CSS em arquivos LESS como: reset, base, theme, responsive. Tenho um style.less que compila todos num único CSS, mas mantendo a organização do projeto, o que é muito difícil de fazer depois que se passa das 3 mil linhas.&lt;/li&gt;
&lt;li&gt;De tanto em tanto tempo dou um 360 em uma dos padrões criados&lt;/li&gt;
&lt;li&gt;Apresento meu rascunho de planejamento do padrão para o Designer responsável (se houver) para que o mesmo possa alinhar os agrupamentos na hora de criar o &lt;a href=&#34;http://www.onextrapixel.com/2012/09/28/30-handy-and-free-ui-kits-for-web-and-mobile/&#34; title=&#34;http://www.onextrapixel.com/2012/09/28/30-handy-and-free-ui-kits-for-web-and-mobile/&#34; target=&#34;_blank&#34;&gt;UI kit&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;E você já criou o seu próprio Framework?&lt;/strong&gt; Conte aqui sua experiência 🙂&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>