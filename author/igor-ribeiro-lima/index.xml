<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Igor Ribeiro Lima on Tableless</title>
    <link>http://tableless.com.br/author/igor-ribeiro-lima/index.xml</link>
    <description>Recent content in Igor Ribeiro Lima on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/author/igor-ribeiro-lima/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como publicar aplicação NodeJS no Heroku</title>
      <link>http://tableless.com.br/como-publicar-aplicacao-nodejs-heroku/</link>
      <pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-publicar-aplicacao-nodejs-heroku/</guid>
      <description>&lt;p&gt;O código da aplicação de exemplo está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/69153705256f6a9a4557&#34; title=&#34;gist&#34;&gt;gist&lt;/a&gt;, para baixá-lo digite o comando:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-sh&#34;&gt;git clone gist@gist.github.com:69153705256f6a9a4557.git minhas-midias-sociais&lt;/pre&gt;

&lt;p&gt;Dentro da pasta &lt;strong&gt;&lt;em&gt;minhas midias sociais&lt;/em&gt;&lt;/strong&gt;, o arquivo _&lt;a href=&#34;https://gist.github.com/igorlima/69153705256f6a9a4557#file-index-html&#34; rel=&#34;noreferrer&#34;&gt;index.html&lt;/a&gt;_ pode ser aberto utilizando qualquer navegador. Como são arquivos estáticos, será possível visualizar a aplicação web normalmente.&lt;/p&gt;

&lt;p&gt;Para rodar esse pequeno projeto no serviço de cloud, será preciso criar um servidor para tal. Nesse caso, vamos usar o &lt;a href=&#34;http://expressjs.com/&#34; rel=&#34;noreferrer&#34;&gt;Express&lt;/a&gt;, framework para &lt;a href=&#34;http://nodejs.org/&#34; rel=&#34;noreferrer&#34;&gt;NodeJS&lt;/a&gt; inspirado no &lt;a href=&#34;http://www.sinatrarb.com/&#34; title=&#34;sinatra&#34;&gt;Sinatra&lt;/a&gt;. O código está no arquivo &lt;em&gt;&lt;a href=&#34;https://gist.github.com/igorlima/69153705256f6a9a4557#file-server-js&#34; rel=&#34;noreferrer&#34;&gt;server.js&lt;/a&gt;&lt;/em&gt;. Para rodá-lo execute:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-sh&#34;&gt;npm install
node server.js&lt;/pre&gt;

&lt;p&gt;Para confirmar que tudo está funcionando como o esperado, acesse o endereço &lt;code&gt;http://localhost:5000&lt;/code&gt; e pingo, já temos uma aplicação NodeJS para ser hospedada na nuvem.&lt;/p&gt;

&lt;p&gt;Agora, vá ao site Heroku e faça os seguintes passos: (i) se &lt;a href=&#34;https://id.heroku.com/signup/www-home-top&#34; rel=&#34;noreferrer&#34;&gt;cadastre&lt;/a&gt;, (ii) &lt;a href=&#34;https://dashboard.heroku.com/apps&#34; rel=&#34;noreferrer&#34;&gt;crie uma aplicação&lt;/a&gt; e (iii) carregue sua chave pública ssh na &lt;a href=&#34;https://dashboard.heroku.com/account&#34; rel=&#34;noreferrer&#34;&gt;sessão SSH Keys&lt;/a&gt;. Caso precise de detalhes de como gerar uma &lt;em&gt;chave ssh&lt;/em&gt;, acesse o &lt;a href=&#34;https://help.github.com/articles/generating-ssh-keys&#34; rel=&#34;noreferrer&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Heroku possui um mecanismo para declarar qual comando deve ser executado para iniciar um serviço na nuvem: no nosso caso, o script &lt;code&gt;node server.js&lt;/code&gt;. Isso deve ser declarado no arquivo de texto &lt;em&gt;&lt;a href=&#34;https://gist.github.com/igorlima/69153705256f6a9a4557#file-procfile&#34; rel=&#34;noreferrer&#34;&gt;Procfile&lt;/a&gt;&lt;/em&gt;. Após esses passos, tudo está pronto para a nossa primeira publicação na nuvem. Digite o script abaixo no diretório do projeto e a mágica estará feita:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-sh&#34;&gt;git remote add heroku git@heroku.com:o-nome-da-aplicacao-criada-no-heroku.git
git push heroku HEAD:master&lt;/pre&gt;

&lt;p&gt;Após o &lt;strong&gt;&lt;em&gt;push&lt;/em&gt;&lt;/strong&gt;, sua aplicação pode ser visualizada no endereço &lt;code&gt;http:/o-nome-da-aplicacao-criada-no-heroku.herokuapp.com/&lt;/code&gt;, conforme ilustra imagem abaixo. E é isso, pessoal. Espero que tenha gostado. Até a próxima.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i1368.photobucket.com/albums/ag182/igorribeirolima/a0000d4f6b3b7ca0469fcdeba8a6f6e2_zps2ba999fa.jpg&#34; alt=&#34;Screenshot da aplicação &#39;minhas midias sociais&#39;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizando páginas responsivas em diversos navegadores</title>
      <link>http://tableless.com.br/visualizando-pagina-responsiva-em-diversos-navegadores/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/visualizando-pagina-responsiva-em-diversos-navegadores/</guid>
      <description>&lt;p&gt;Nesse artigo vou mostrar rapidamente como tirar um Print Screen da página inicial de seu site utilizando diversos dispositivos. Algo que pode facilitar e muito a vida caso esteja desenvolvendo uma página responsiva.&lt;/p&gt;

&lt;p&gt;Nesse exemplo vamos utilizar o &lt;a href=&#34;http://nodejs.org/&#34; rel=&#34;noreferrer&#34;&gt;NodeJS&lt;/a&gt; e o &lt;a href=&#34;http://tableless.com.br/introducao-ao-selenium-2/&#34; rel=&#34;noreferrer&#34;&gt;Selenium 2&lt;/a&gt;. As outras dependências necessárias estão especificadas no arquivo &lt;a href=&#34;http://docs.nodejitsu.com/articles/getting-started/npm/what-is-the-file-package-json&#34; rel=&#34;noreferrer&#34;&gt;package.json&lt;/a&gt;. Arquivo que é usado para fornecer ao gerenciador de pacotes NPM, informações de como lidar com as dependências do projeto, a descrição do projeto, a licença utilizada, &lt;a href=&#34;http://package.json.nodejitsu.com/&#34; rel=&#34;noreferrer&#34;&gt;dentre outras&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para facilitar nossa vida, utilizaremos um serviço de Cloud do &lt;a href=&#34;https://saucelabs.com/&#34; rel=&#34;noreferrer&#34;&gt;SauceLabs&lt;/a&gt;. Esse serviço permite utilizar diversos tipos de navegadores. Logo, logo estarei escrevendo outros artigos, mostrando outros tipos de serviços parecidos, como por exemplo o &lt;a href=&#34;http://www.browserstack.com/&#34; rel=&#34;noreferrer&#34;&gt;BrowserStack&lt;/a&gt;. Todos esses serviços de Cloud fornecem uma &lt;strong&gt;chave de acesso&lt;/strong&gt;. Para criar uma conta, basta acessar a &lt;a href=&#34;https://saucelabs.com/signup&#34; rel=&#34;noreferrer&#34;&gt;página de cadastro&lt;/a&gt; e preencher o formulário. Posso te assegurar que o cadastro é simples e rápido.&lt;/p&gt;

&lt;p&gt;Tendo a chave de acesso em mãos, vamos executar &lt;a href=&#34;https://gist.github.com/igorlima/9875745&#34; rel=&#34;noreferrer&#34;&gt;o seguinte script&lt;/a&gt;. Magicamente teremos um printscreen da página inicial do site do Tableless:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;git clone https://gist.github.com/9875745.git visualizao-pagina-web
npm install
node script.js -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY --url &#39;http://tableless.com.br/&#39; --screenshot &#39;printscreen-da-pagina-do-tableless.png&#39;&lt;/pre&gt;

&lt;p&gt;Esse script utiliza como padrão a última versão do navegador Chrome. Para utilizar outros navegadores, especificaremos via parâmetros direto no Terminal. Os detalhes de cada parâmetro são obtidos utilizando &lt;em&gt;&amp;#8211;help&lt;/em&gt;. Existe uma lista com centenas de navegadores e dispositivos, os quais podem ser vistos no seguinte &lt;a href=&#34;https://saucelabs.com/platforms&#34; rel=&#34;noreferrer&#34;&gt;link&lt;/a&gt;. Segue abaixo dois exemplos de como visualizar o site do Tableless em um tablet com Android e em um iPhone:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;node script.js -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY --url &#39;http://tableless.com.br/&#39; --screenshot &#39;printscreen-tableless-android.png&#39; -b &#39;android&#39; -p &#39;Linux&#39; -v &#39;4.0&#39; --deviceType tablet --deviceOrientation landscape
node script.js -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY --url &#39;http://tableless.com.br/&#39; --screenshot &#39;printscreen-tableless-iphone.png&#39; -b &#39;iphone&#39; -p &#39;OS X 10.9&#39; -v &#39;7.0&#39;&lt;/pre&gt;

&lt;p&gt;O resultado é ilustrado na imagem abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone&#34; alt=&#34;PrintScreen da página do Tableless em diversos dispositivos&#34; src=&#34;https://camo.githubusercontent.com/0ba7d9a87cde934188995961c780401e73d19350/68747470733a2f2f63616d6f2e67697468756275736572636f6e74656e742e636f6d2f323936383265353030646663643562303032656230653766383832666332346231636266653261622f3638373437343730336132663266363933313333333633383265373036383666373436663632373536333662363537343265363336663664326636313663363237353664373332663631363733313338333232663639363736663732373236393632363536393732366636633639366436313266373436313632366336353663363537333733326436313732373436393633366336353264363936643631363736353566376137303733333933313335333536333634333636313265366137303637&#34; width=&#34;836&#34; height=&#34;695&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso se interessem e queiram modificar o script utilizado acima, fiquem a vontade. Para um melhor entendimento do script, deem uma lida nos seguintes artigos: &lt;strong&gt;(i)&lt;/strong&gt; &lt;a href=&#34;http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/&#34; rel=&#34;noreferrer&#34;&gt;Introdução de como executar testes unitários em diferentes tipos de navegadores&lt;/a&gt; e &lt;strong&gt;(ii)&lt;/strong&gt; &lt;a href=&#34;http://tableless.com.br/javascript-de-forma-assincrona-e-legivel/&#34; rel=&#34;noreferrer&#34;&gt;JavaScript de forma assíncrona e legível&lt;/a&gt;. Espero que tenham gostado. Até a próxima.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>História de usuário e teste de aceitação em JavaScript</title>
      <link>http://tableless.com.br/historia-de-usuario-e-teste-de-aceitacao-em-javascript/</link>
      <pubDate>Wed, 22 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/historia-de-usuario-e-teste-de-aceitacao-em-javascript/</guid>
      <description>&lt;p&gt;Cada história deve ter valor de negócio na visão do cliente e é uma pequena parte da funcionalidade, não necessariamente uma especificação completa, o que minimiza a necessidade de uma extensa documentação.&lt;/p&gt;

&lt;p&gt;A história de usuário é escrita pelo próprio cliente e, também, serve para conduzir a criação de teste de aceitação, o qual tem o propósito de avaliar a qualidade externa do produto e, na medida do possível, a qualidade de uso e experiência do usuário. A automatização dos testes de aceitação é criada para certificar de que a história foi implementada corretamente.&lt;/p&gt;

&lt;p&gt;Nesse exemplo é preciso a instalação do NodeJS e do Node Package Manager (NPM), que podem ser baixados no &lt;a href=&#34;http://nodejs.org/download/&#34;&gt;site oficial&lt;/a&gt;. O NPM é necessário para instalar o &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;CucumberJS&lt;/a&gt;, o &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; e o &lt;a href=&#34;https://github.com/admc/wd&#34;&gt;WD&lt;/a&gt;, digitando o seguinte _script_ no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install -g cucumber phantomjs&lt;/pre&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install wd&lt;/pre&gt;

&lt;p&gt;O NodeJS possui dois tipos de dependências: global e local. Quando é global, a dependência passa ser executável, tornando possível a utilização da dependência através da linha de comando. Já as dependências locais são instaladas no diretório corrente, dentro de um diretório chamado _node&lt;em&gt;modules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O primeiro &lt;em&gt;script&lt;/em&gt;, que utiliza o parâmetro &lt;strong&gt;-g&lt;/strong&gt;, instala o &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;CucumberJS&lt;/a&gt; e o &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; como dependências globais. O CucumberJS é uma implementação JavaScript para interpretar uma linguagem chamada &lt;a href=&#34;https://github.com/cucumber/gherkin&#34;&gt;Gherkin&lt;/a&gt;, a qual permite escrever funcionalidades e especificações em texto simples. Já o PhantomJS é um WebKit headless totalmente em JavaScript e possui suporte rápido e nativo para vários padrões web como manipulação de DOM, seletores CSS, JSON, Canvas e SVG.&lt;/p&gt;

&lt;p&gt;O segundo _script_ instala o &lt;a href=&#34;https://github.com/admc/wd&#34;&gt;WD&lt;/a&gt; como dependência local, um cliente NodeJS para facilitar o acesso à API do &lt;a href=&#34;http://tableless.com.br/introducao-ao-selenium-2/&#34;&gt;Selenium 2&lt;/a&gt;, o qual suporta &lt;a href=&#34;https://github.com/admc/wd/blob/master/doc/api.md&#34;&gt;métodos&lt;/a&gt; como: fazer requisições GET e POST, clicar no botão VOLTAR do navegador, redimensionar e mover a janela do navegador, submeter formulário, digitar texto, selecionar um elemento DOM, clicar e mover um elemento DOM selecionado, etc.&lt;/p&gt;

&lt;p&gt;Após a instalação das dependências, vamos criar o arquivo &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-apenas-um-exemplo-feature&#34;&gt;&lt;strong&gt;apenas-um-exemplo.feature&lt;/strong&gt;&lt;/a&gt; com a especificação da história de usuário e o teste de aceitação. Algo bem simples. Suficiente para exemplificar a implementação desse tipo de teste utilizando JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;apenas-um-exemplo.feature&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;Feature: Apenas Um Exemplo
  Como um usuario do CucumberJS
  Eu quero acessar um formulario de teste
  Para que eu possa submeter novas informacoes

  Scenario: Submetendo um formulario de teste
    Given o navegador aberto
      And acessar o formulario de teste
      And certificar que o titulo da pagina contem &#34;Sauce Labs&#34;
      And certificar que o titulo da pagina contem &#34;page title&#34;
      And certificar que o titulo da pagina contem &#34;I am a&#34;
    When clicar no botao de submeter formulario
    Then a url do navegador DEVE conter &#34;guinea-pig&#34;
    And o navegador pode ser fechado&lt;/pre&gt;

&lt;p&gt;Ao criar o arquivo de especificação, vamos criar mais dois arquivos: &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-configuracao-webdriver-usando-phantom-js&#34;&gt;&lt;strong&gt;configuracao-webdriver-usando-phantom.js&lt;/strong&gt;&lt;/a&gt; com as configurações do WebDriver e o arquivo &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-step-definitions-js&#34;&gt;&lt;strong&gt;step-definitions.js&lt;/strong&gt;&lt;/a&gt; com as definições de cada passo do teste de aceitação. Em seguida, é preciso, em um outro terminal, rodar o PhantomJS em modo WebDriver, digitando o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;phantomjs --webdriver=localhost:8910&lt;/pre&gt;

&lt;p&gt;Com o PhantomJS rodando em segundo plano, basta rodar o CucumberJS passando como argumento o arquivo com a história de usuário e o teste de aceitação. O parâmetro &lt;strong&gt;&amp;#8211;require&lt;/strong&gt; serve para especificar o arquivo com as definições de cada passo do teste de aceitação. E o parâmetro &lt;strong&gt;&amp;#8211;format&lt;/strong&gt; é para alterar a formatação do resultado dos testes. Abaixo, o _script_ e uma ilustração do resultado obtido:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;cucumber.js apenas-um-exemplo.feature --require step-definitions.js --format pretty&lt;/pre&gt;

&lt;p&gt;&lt;img alt=&#34;Ilustração do resultado de exemplo de como escrever história de usuário e teste de aceitação com JavaScript&#34; src=&#34;http://i1368.photobucket.com/albums/ag182/igorribeirolima/resultado-obtido_zps867ddb6d.png&#34; width=&#34;1020&#34; height=&#34;468&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse exemplo contempla de forma bem simples a implementação de teste de aceitação utilizando JavaScript. Essa abordagem também pode utilizar &lt;a href=&#34;http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/&#34;&gt;diferentes tipos de navegadores&lt;/a&gt;, mas isso ficará para uma próxima discussão. Para quem tiver interesse, todo código está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/8024944&#34; title=&#34;Gist - Exemplo de como escrever história de usuário e teste de aceitação com JavaScript&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript de forma assíncrona e legível</title>
      <link>http://tableless.com.br/javascript-de-forma-assincrona-e-legivel/</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/javascript-de-forma-assincrona-e-legivel/</guid>
      <description>&lt;p&gt;A programação assíncrona possui a vantagem de gerar códigos perfomáticos. Em certos casos, a implementação de diversas funções assíncronas encadeadas através de funções _callback_ pode prejudicar a leitura e a manutenção do código. Para demonstrar esse encadeamento, vamos utilizar um trecho de código que utiliza a &lt;a href=&#34;http://tableless.com.br/introducao-ao-selenium-2/&#34; title=&#34;Introdução ao Selenium 2&#34;&gt;API do Selenium 2&lt;/a&gt;. Baseado em um &lt;a href=&#34;https://saucelabs.com/docs/ondemand/getting-started/env/js/se2/linux&#34; title=&#34;Exemplo oficial do SauceLabs de como utilizar o Selenium 2 com o NodeJS&#34;&gt;exemplo do site do SauceLabs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A API do Selenium WebDriver pode ser utilizada por diversas linguagem de programação, porém, em nosso exemplo, iremos utilizar o NodeJS (JavaScript) e o gerenciador de pacotes NPM, que podem ser baixados no &lt;a href=&#34;http://nodejs.org/download/&#34; title=&#34;Site oficial do NodeJS&#34;&gt;site oficial&lt;/a&gt;. O NPM é necessário para instalar o &lt;a href=&#34;http://phantomjs.org/&#34; title=&#34;Site oficial do PhantomJS&#34;&gt;PhantomJS&lt;/a&gt; e o &lt;a href=&#34;https://github.com/admc/wd&#34; title=&#34;Repositório GitHub do WD&#34;&gt;WD&lt;/a&gt;, utilizando o seguinte &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install -g phantomjs&lt;/pre&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install wd&lt;/pre&gt;

&lt;p&gt;O NodeJS possui dois tipos de dependências: global ou local. Quando uma dependência é global, o pacote passa a ser executável, tornando possível a utilização da dependência através da linha de comando. Já as dependências locais são instaladas no diretório corrente, dentro de _node&lt;em&gt;modules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O primeiro &lt;em&gt;script&lt;/em&gt;, utilizando o parâmetro &lt;strong&gt;-g&lt;/strong&gt;, instala o &lt;a href=&#34;http://phantomjs.org/&#34; title=&#34;Site oficial do PhantomJS&#34;&gt;PhantomJS&lt;/a&gt; como dependência global, que é um WebKit headless totalmente em JavaScript e possui suporte rápido e nativo para vários padrões web como manipulação de DOM, seletores CSS, JSON, Canvas e SVG.&lt;/p&gt;

&lt;p&gt;Já o segundo &lt;em&gt;script&lt;/em&gt;, instala como dependência local o &lt;a href=&#34;https://github.com/admc/wd&#34; title=&#34;Repositório GitHub do WD&#34;&gt;WD&lt;/a&gt;, que é um cliente NodeJS para facilitar o acesso à API do Selenium 2 e suporta &lt;a href=&#34;https://github.com/admc/wd/blob/master/doc/api.md&#34; title=&#34;Documentação da API do WD&#34;&gt;métodos&lt;/a&gt; como: fazer requisições GET e POST, clicar no botão VOLTAR do navegador, fazer refresh no navegador, pegar um _printscreen_ da tela atual, redimensionar e mover a janela do navegador, submeter formulário, digitar texto, usar &lt;em&gt;cookies&lt;/em&gt;, selecionar um elemento DOM, clicar e mover um elemento, etc.&lt;/p&gt;

&lt;p&gt;Após a instalação das dependências, vamos criar um arquivo com &lt;a href=&#34;http://callbackhell.com/&#34; title=&#34;Introdução sobre callback hell - vários callbacks encadeados&#34;&gt;vários _callbacks_ encadeados&lt;/a&gt;. Esse código possui seis passos: _(i)&lt;em&gt; abrir o navegador, &lt;/em&gt;(ii)&lt;em&gt; acessar uma página de teste, &lt;/em&gt;(iii)&lt;em&gt; verificar o título da página, &lt;/em&gt;(iv) &lt;em&gt;submeter um formulário, &lt;/em&gt;(v)&lt;em&gt; verificar a url da página após enviar o formulário e &lt;/em&gt;(vi)_ fechar o navegador. Algo bem simples. Suficiente para ressaltar a quantidade de _callbacks_ encadeados.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;um-exemplo-COM-varios-callbacks-encadeados.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;var webdriver = require(&#39;wd&#39;),
    assert    = require(&#39;assert&#39;),
    browser   = webdriver.remote({
      hostname: &#34;localhost&#34;,
      port: 8910
    });

browser.init({}, function(erro, id_da_sessao, recursos_webdriver) {
  console.log(&#39;navegador aberto&#39;);
  browser.get(&#34;http://saucelabs.com/test/guinea-pig&#34;, function(erro) {
    console.log(&#39;pagina de teste aberta&#39;);
    browser.title(function(erro, title) {
      console.log(&#39;verificando titulo da pagina...&#39;);
      assert.ok( title.indexOf(&#39;I am a page title - Sauce Labs&#39;)===0, &#39;titulo NAO esta correto&#39;);
      browser.elementById(&#39;submit&#39;, function(erro, elemento) {
        console.log(&#39;botao enviar encontrado&#39;);
        browser.clickElement(elemento, function(erro) {
          console.log(&#39;botao clicado&#39;);
          browser.eval(&#34;window.location.href&#34;, function(erro, href) {
            console.log(&#39;verificando url da pagina...&#39;);
            assert.ok(href.indexOf(&#39;guinea&#39;)&amp;gt;0, &#39;pagina NAO esta correta&#39;);
            browser.quit(function(erro){
              console.log(&#39;navegador fechado&#39;);
            });
          });
        });
      });
    });
  });
});&lt;/pre&gt;

&lt;p&gt;Um detalhe importante sobre assincronismo é que, na maioria dos casos, os _callbacks_ possuem como parâmetro uma variável de erro, que serve para impedir a execução dos _callbacks_ subsequentes, caso haja algum problema.&lt;/p&gt;

&lt;p&gt;Criado o arquivo exemplo, é preciso, em um outro terminal, rodar o PhantomJS em modo WebDriver, digitando o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;phantomjs --webdriver=localhost:8910&lt;/pre&gt;

&lt;p&gt;Com o PhantomJS rodando em segundo plano, execute o exemplo usando o &lt;em&gt;node&lt;/em&gt;. Segue o comando e uma ilustração do resultado obtido:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;node um-exemplo-COM-varios-callbacks-encadeados.js&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://a248.e.akamai.net/camo.github.com/4e876b931ca0cd673f3707ebdc8bd60407ae1b9d/687474703a2f2f69313336382e70686f746f6275636b65742e636f6d2f616c62756d732f61673138322f69676f727269626569726f6c696d612f756d2d6578656d706c6f2d434f4d2d766172696f732d63616c6c6261636b732d656e6361646561646f735f7a707362636262323735642e706e67&#34; alt=&#34;ilustração do resultado obtido após executar o exemplo COM vários callbacks encadeados&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para evitar tantos _callbacks_ encadeados, vamos utilizar a biblioteca &lt;a href=&#34;https://github.com/caolan/async&#34; title=&#34;Repositório GitHub da biblioteca Async&#34;&gt;Async&lt;/a&gt; que prover várias funções que facilitam a programação assíncrona em JavaScript. Nesse exemplo, usaremos a função &lt;a href=&#34;https://github.com/caolan/async#waterfall&#34; title=&#34;âncora para as especificações da função waterfall da biblioteca Async&#34;&gt;&lt;strong&gt;waterfall&lt;/strong&gt;&lt;/a&gt;. Uma alternativa mais leve para código Front-End é a biblioteca &lt;a href=&#34;http://underscorejs.org/&#34; title=&#34;Site oficial da biblioteca Underscore&#34;&gt;Underscore&lt;/a&gt;. Para instalar o Async, utilize o seguinte &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install async&lt;/pre&gt;

&lt;p&gt;Agora vamos criar um outro arquivo sem tantos encadeamentos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;um-exemplo-SEM-varios-callbacks-encadeados.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;var webdriver = require(&#39;wd&#39;),
    async     = require(&#39;async&#39;),
    assert    = require(&#39;assert&#39;),
    browser   = webdriver.remote({
      hostname: &#34;localhost&#34;,
      port: 8910
    });

async.waterfall([
  function(callback_navegador_aberto) {
    browser.init({}, callback_navegador_aberto);
  },
  function(id_da_sessao, recursos_webdriver, callback_pagina_aberta) {
    console.log(&#39;navegador aberto&#39;);
    browser.get(&#34;http://saucelabs.com/test/guinea-pig&#34;, callback_pagina_aberta);
  },
  function(callback_titulo) {
    console.log(&#39;pagina de teste aberta&#39;);
    browser.title(callback_titulo);
  },
  function(title, callback_elemento_encontrado) {
    console.log(&#39;verificando titulo da pagina...&#39;);
    assert.ok( title.indexOf(&#39;I am a page title - Sauce Labs&#39;)===0, &#39;titulo NAO esta correto&#39;);
    browser.elementById(&#39;submit&#39;, callback_elemento_encontrado);
  },
  function(elemento, callback_botao_clicado) {
    console.log(&#39;botao enviar encontrado&#39;);
    browser.clickElement(elemento, callback_botao_clicado);
  },
  function(callback_verificar_url) {
    console.log(&#39;botao clicado&#39;);
    browser.eval(&#34;window.location.href&#34;, callback_verificar_url);
  },
  function(href, callback_navegador_fechado) {
    console.log(&#39;verificando url da pagina...&#39;);
    assert.ok(href.indexOf(&#39;guinea&#39;)&amp;gt;0, &#39;pagina NAO esta correta&#39;);
    browser.quit(callback_navegador_fechado);
  },
  function(callback_final) {
    console.log(&#39;navegador fechado&#39;);
    callback_final();
  }
], function(erro){
  erro &amp;&amp; console.log(&#39;algum erro ocorreu&#39;, erro);
});&lt;/pre&gt;

&lt;p&gt;Lembre-se que o PhantomJS ainda deve estar rodando em segundo plano para executar o segundo código de exemplo. Segue o comando e uma ilustração do resultado obtido:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;node um-exemplo-SEM-varios-callbacks-encadeados.js&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://i1368.photobucket.com/albums/ag182/igorribeirolima/um-exemplo-SEM-varios-callbacks-encadeados_zps1a8a9ad0.png&#34; alt=&#34;ilustração do resultado obtido após executar o exemplo SEM vários callbacks encadeados&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse trecho de código exemplifica como vários _callbacks_ encadeados podem ser evitados com o uso de uma estrutura de controle. Para quem se interessar, todo código está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/7930016&#34; title=&#34;Gist - JavaScript de forma assíncrona e elegível&#34;&gt;gist&lt;/a&gt;. Muito obrigado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Selenium 2</title>
      <link>http://tableless.com.br/introducao-ao-selenium-2/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-ao-selenium-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.seleniumhq.org/docs/01_introducing_selenium.jsp&#34; title=&#34;introdução ao selenium no site oficial&#34;&gt;Selenium&lt;/a&gt; é uma ferramenta de apoio às necessidades de testes em aplicações web. Altamente flexível, permite muitas opções para a localização de elementos de interface no navegador e simular comportamentos reais de um usuário. A &lt;a href=&#34;http://www.seleniumhq.org/docs/03_webdriver.jsp&#34; title=&#34;introdução ao selenium webdriver no site oficial&#34;&gt;versão 2.0&lt;/a&gt; tem como funcionalidade primária a integração da API WebDriver. Projetado para fornecer uma interface ainda mais simples, concisa e orientada a objeto, o que melhora de forma significativa o suporte aos problemas complexos que são enfrentados ao testar uma aplicação web.&lt;/p&gt;

&lt;p&gt;Essa API pode ser chamada através de diversas linguagem de programação, porém, em nosso exemplo, iremos utilizar o NodeJS (JavaScript), que pode ser baixado no &lt;a href=&#34;http://nodejs.org/download/&#34; title=&#34;site oficial do NodeJS&#34;&gt;site oficial&lt;/a&gt; e que possui um gerenciador de pacotes (Node Package Manager – NPM), o qual permite a interação com um repositório online via linha de comando, facilitando a instalação de várias outras ferramentas.&lt;/p&gt;

&lt;p&gt;Nesse exemplo, será utilizado uma ferramenta chamada &lt;a href=&#34;http://vowsjs.org/&#34; title=&#34;site oficial do vows&#34;&gt;Vows&lt;/a&gt;, gerenciada e instalada pelo NPM, que ajuda no desenvolvimento orientado a comportamento assíncrono. Usar testes assíncronos no NodeJS tem dois motivos. Primeiro (e talvez óbvio), é que o NodeJS é assíncrono e por isso os testes também deveriam ser. Segundo, é fazer com que os testes, os quais lidam com entrada e saída de dados, rodem mais rápido.&lt;/p&gt;

&lt;p&gt;Breve resumo dos conceitos do Vows. &lt;strong&gt;Suite&lt;/strong&gt;: um objeto que contêm um ou mais batches, e pode ser executado ou exportado. &lt;strong&gt;Batch&lt;/strong&gt;: uma estrutura de contextos. &lt;strong&gt;Context&lt;/strong&gt;: um objeto que pode conter um &lt;em&gt;topic&lt;/em&gt;(opcional), nenhum ou mais &lt;em&gt;vows&lt;/em&gt;, nenhum ou mais &lt;em&gt;sub-contexts&lt;/em&gt;. &lt;strong&gt;Topic&lt;/strong&gt;: pode ser tanto um valor ou uma função de código assíncrono. &lt;strong&gt;Vow&lt;/strong&gt;: é uma função que recebe o _topic_ como um argumento e roda assertivas no &lt;em&gt;topic&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O teste que será feito possui quatro passos: _(i)&lt;em&gt; abrir o navegador, &lt;/em&gt;(ii)&lt;em&gt; acessar uma &lt;a href=&#34;https://saucelabs.com/test/guinea-pig&#34; title=&#34;página oficial de teste do SauceLabs&#34;&gt;página de teste&lt;/a&gt;, &lt;/em&gt;(iii)&lt;em&gt; verificar o título da página e &lt;/em&gt;(iv)_ fechar o navegador. Algo bem simples. Suficiente para experimentar a versão 2.0 do Selenium.&lt;/p&gt;

&lt;p&gt;As dependências necessárias podem ser instaladas usando o NPM, digitando o seguinte _script_ no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install -g phantomjs vows &lt;/pre&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt; npm install chai wd vows &lt;/pre&gt;

&lt;p&gt;Há duas maneiras de instalar &lt;a href=&#34;http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/&#34; title=&#34;artigo do blog oficial do NodeJS sobre os tipos de dependências&#34;&gt;dependências no NodeJS&lt;/a&gt;: globalmente ou localmente. Quando uma dependência é global, os arquivos são executáveis, tornando possível a utilização de uma dependência através da linha de comando. Quanto às dependências locais, estas são instaladas no diretório corrente, dentro de um diretório chamado _node&lt;em&gt;modules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O primeiro &lt;em&gt;script&lt;/em&gt;, utilizando o parâmetro &lt;strong&gt;-g&lt;/strong&gt;, instala duas dependências globais: phantomjs e vows.&lt;a href=&#34;http://phantomjs.org/&#34; title=&#34;site oficial do PhantomJS&#34;&gt;PhantomsJS é um headless WebKit&lt;/a&gt;, feito totalmente em javascript e possui suporte rápido e nativo para vários padrões web como manipulação de DOM, seletores CSS, JSON, Canvas e SVG.&lt;/p&gt;

&lt;p&gt;Já o segundo &lt;em&gt;script&lt;/em&gt;, instala três dependências locais: chai, wd e vows. &lt;a href=&#34;http://chaijs.com/&#34; title=&#34;site oficial do Chai&#34;&gt;Chai&lt;/a&gt; é uma biblioteca de assertivas BDD/TDD para NodeJS e navegadores, a qual pode ser &amp;#8216;graciosamente&amp;#8217; utilizada com qualquer framework de teste JS. &lt;a href=&#34;https://github.com/admc/wd&#34; title=&#34;repositorio oficial do WebDriver no github&#34;&gt;WD&lt;/a&gt; é um cliente em NodeJS para facilitar o acesso à API do Selenium 2, a qual suporta métodos como: fazer requisições GET e POST, clicar no botão VOLTAR do navegador, fazer refresh no navegador, pegar um printscreen da tela corrente, redimensionar e mover a janela do navegador, submeter formulário, digitar texto, usar cookies, selecionar um elemento DOM, clicar e mover um elemento DOM selecionado, etc.&lt;/p&gt;

&lt;p&gt;Após a instalação de todas as dependências necessárias, vamos criar dois arquivos: _&lt;strong&gt;configuracao-webdriver-usando-phantom.js&lt;/strong&gt;&lt;em&gt; com as informações de configurações do webdriver e &lt;/em&gt;&lt;strong&gt;apenas-um-exemplo.js&lt;/strong&gt;_ com os passos-a-passos simulando o comportamento real de um usuário.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;configuracao-webdriver-usando-phantom.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;var exports   = module.exports = {},
    webdriver = require(&#39;wd&#39;),
    browser   = exports.browser = webdriver.remote({
      hostname: &#34;localhost&#34;,
      port: 8910
    });
 
/**
Vows Errored » callback not fired
http://birkett.no/blog/2013/05/01/vows-errored-callback-not-fired/
*/
process.on( &#39;uncaughtException&#39;, function(err) {
  console.error(&#39;Caught exception: &#39; + err.stack );
});
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;apenas-um-exemplo.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;var vows    = require(&#39;vows&#39;),
    expect  = require(&#39;chai&#39;).expect,
    browser = require(&#39;./configuracao-webdriver-usando-phantom.js&#39;).browser;
 
vows.describe(&#39;Apenas um exemplo&#39;)
.addBatch({
  &#39;Criando uma nova sessão no WebDriver&#39;: {
    topic: function() {
      var callback = this.callback;
      browser.init( {}, function(err, sessionID, capabilities) {
        callback( err );
      });
    },
    &#39;Sessão criada&#39;: function() { /**...*/ }
  }
})
.addBatch({
  &#39;Acessando a página de teste do SauceLabs&#39;: {
    topic: function() {
      var callback = this.callback;
      browser.get( &#39;http://saucelabs.com/test/guinea-pig&#39;, function(err) {
        callback( err );
      });
    },
    &#39;Página de teste aberta&#39;: function() { /**...*/ }
  }
})
.addBatch({
  &#39;Verificando o título da página&#39;: {
    topic: function() {
      var callback = this.callback;
      browser.title( function(err, title) {
        callback( err, title );
      });
    },
    &#34;O título da página deve conter &#39;Sauce Labs&#39;&#34;: function(title) {
      expect(title).to.contain(&#39;Sauce Labs&#39;);
    },
    &#34;O título da página deve conter &#39;page title&#39;&#34;: function(title) {
      expect(title).to.contain(&#39;page title&#39;);
    },
    &#34;O título da página deve conter &#39;I am a&#39;&#34;: function(title) {
      expect(title).to.contain(&#39;I am a&#39;);
    }
  }
})
.addBatch({
  &#39;Fechando o navegador&#39;: {
    topic: function() {
      var callback = this.callback;
      browser.quit( function(err){
        callback( err );
      });
    },
    &#39;Fim&#39;: function() { /**...*/ }
  }
}).export(module);
&lt;/pre&gt;

&lt;p&gt;Criado esses dois arquivos, é preciso, em um outro terminal, rodar o PhantomJS em modo WebDriver, digitando o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lanh-ssh&#34;&gt;phantomjs --webdriver=localhost:8910 &lt;/pre&gt;

&lt;p&gt;Uma vez o PhantomJS rodando em segundo plano, basta rodar o &lt;em&gt;vows&lt;/em&gt;, o parâmetro &lt;strong&gt;&amp;#8211;spec&lt;/strong&gt; serve apenas para ter um diferente tipo de &amp;#8216;reporter&amp;#8217;, segue o comando e uma ilustração do resultado obtido:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;vows apenas-um-exemplo.js --spec &lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; alt=&#34;Resultado obtido&#34; src=&#34;https://camo.githubusercontent.com/67da73c5f31ecbfaee938cf04056d96c4f2ada41/687474703a2f2f69313336382e70686f746f6275636b65742e636f6d2f616c62756d732f61673138322f69676f727269626569726f6c696d612f315f626173685f616e645f556d615f696e74726f647563636564696c6174696c64656f5f616f5f53656c656e69756d5f325f616e645f6170656e61732d756d2d6578656d706c6f6a735f6d646173685f696e74726f647563616f2d73656c656e69756d2d74776f2d31335f7a707334333166383131372e706e67&#34; width=&#34;897&#34; height=&#34;445&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse exemplo contempla de forma bem simples a utilização da API do WebDriver/Selenium 2. Essa abordagem também pode ser feita em &lt;a href=&#34;http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores&#34; title=&#34;introdução de como executar testes unitários em diferentes tipos de navegadores&#34;&gt;diferentes tipos de navegadores&lt;/a&gt;. Como é sempre melhor começarmos aos poucos, aplicando pequenos passos de cada vez, isso ficará para uma próxima discussão. Para quem se interessar, todo código está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/7826752&#34; title=&#34;gist introduzindo o Selenium 2&#34;&gt;gist&lt;/a&gt;. Muito obrigado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução de como executar testes unitários em diferentes tipos de navegadores</title>
      <link>http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://saucelabs.com/&#34; title=&#34;SauceLabs&#34;&gt;SauceLabs&lt;/a&gt; é uma plataforma de teste que possibilita realizar testes automáticos ou manuais em aplicações móveis e web (incluindo navegadores como Internet Explorer, Opera, Safari, Android, iPhone, Chrome etc). Essa plataforma permite executar os testes em diversas linguagem de programação, porém, em nosso exemplo, iremos utilizar o NodeJS (JavaScript).&lt;/p&gt;

&lt;p&gt;O NodeJS e o Gerenciador de Pacotes do Node (traduzido do inglês Node Package Manager &amp;#8211; NPM) podem ser baixados no &lt;a href=&#34;http://nodejs.org/download/&#34; title=&#34;site oficial NodeJS&#34;&gt;site oficial&lt;/a&gt;. Esse gerenciador de pacotes permite a interação com um repositório online via linha de comando, facilitando a instalação de várias ferramentas.&lt;/p&gt;

&lt;p&gt;Nesse exemplo, será utilizado uma ferramenta chamada &lt;a href=&#34;https://github.com/airportyh/testem&#34; title=&#34;documentação do Test&#39;em&#34;&gt;Test&amp;#8217;em&lt;/a&gt;, que é gerenciada e instalada pelo NPM. Essa ferramenta permite rodar os testes unitários de JavaScript localmente em diferentes plataformas, tornando a execução mais fácil e divertida. Test&amp;#8217;em suporta vários frameworks de teste, tais como: Jasmine, QUnit e Mocha. Para instalar, basta digitar no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install testem -g&lt;/pre&gt;

&lt;p&gt;No exemplo, será utilizado o framework Jasmine. Mesmo código do &lt;a href=&#34;https://saucelabs.com/docs/javascript-unit-testing-tutorial&#34; title=&#34;tutorial oficial do SauceLabs&#34;&gt;tutorial oficial do SauceLabs&lt;/a&gt;. As especificações do código estão descritas no arquivo PastaSpec.js e a implementação no arquivo Pasta.js. Ambos arquivos encontra-se abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PastaSpec.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;describe(&#34;Pasta&#34;, function() { 
  it(&#34;should make spaghetti bolognese&#34;, function() { 
    var pasta = new Pasta(); 
    pasta.add(&#34;tomatoes&#34;); 
    pasta.add(&#34;garlic&#34;); 
    pasta.add(&#34;olive&#34;); 
    pasta.add(&#34;herbs&#34;); 
    pasta.add(&#34;meat&#34;); 
    expect(pasta.getType()).toEqual(&#34;bolognese&#34;); 
    expect(pasta.isTasty()).toEqual(true); 
  }); 

  it(&#34;should make pasta with no sauce&#34;, function() { 
    var pasta = new Pasta(); 
    pasta.add(&#34;meat&#34;); 
    expect(pasta.getType()).toEqual(undefined); 
    // pasta with no sauce? yeah that&#39;s not too tasty 
    expect(pasta.isTasty()).toEqual(false); 
  }); 
});&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Pasta.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function Pasta() { 
  // recipes for good pasta sauces 
  this.sauces = { 
    &#39;bolognese&#39;: [&#34;tomatoes&#34;, &#34;garlic&#34;, &#34;olive&#34;, &#34;herbs&#34;, &#34;meat&#34;] 
  }; 
  this.sauceIngredients = []; 
} 

Pasta.prototype.add = function (ingredient) { 
  this.sauceIngredients.push(ingredient); 
}; 

Pasta.prototype.getType = function () { 
  for (var posssibleSauce in this.sauces) { 
    var ingredientsValid = true; 
    // checking if arrays are equal 
    if (!(this.sauceIngredients.sort() &amp;gt; this.sauces[posssibleSauce].sort() || 
          this.sauceIngredients.sort() &amp;lt; this.sauces[posssibleSauce].sort())) { 
      return posssibleSauce; 
    } 
  } 
  return undefined; 
}; 

Pasta.prototype.isTasty = function () { 
  if (this.getType() !== undefined) { return true; } 
  return false; 
};&lt;/pre&gt;

&lt;p&gt;Uma vez criado o arquivo de especificação &amp;#8216;PastaSpec.js&amp;#8217; e a implementação &amp;#8216;Pasta.js&amp;#8217;, é preciso criar um arquivo de configuração &amp;#8216;&lt;em&gt;testem.json&lt;/em&gt;&amp;#8216;. Necessário apenas informar o framework utilizado e os arquivos JavaScript. Conforme escrito abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;testem.json&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{ 
  &#34;framework&#34;: &#34;jasmine&#34;, 
  &#34;src_files&#34;: [ 
    &#34;Pasta.js&#34;, 
    &#34;PastaSpec.js&#34; 
  ] 
}&lt;/pre&gt;

&lt;p&gt;O Test&amp;#8217;em usa como padrão a porta 7357. O parâmetro &amp;#8216;&amp;#8211;port&amp;#8217; serve para especificar uma outra. Nesse caso, vamos utilizar a 8080, digitando:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;testem --port=8080&lt;/pre&gt;

&lt;p&gt;Após a execução do comando, o resultado dos testes pode ser visto pela url &lt;strong&gt;&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/strong&gt;. Caso a url seja aberta no Chrome, os testes serão executados no navegador Chrome. Caso aberta no Safari, será executado no Safari. Como ilustra a figura seguinte.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/4c25f04b60b6f6aaff1b50a0069ca0f5487860be/687474703a2f2f7332312e706f7374696d672e6f72672f6e72393273783469762f6a61736d696e655f74657374735f6f6e5f74657374656d2e706e67&#34; alt=&#34;testing Jasmine code on Test&#39;em&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para testar o código em diversos navegadores ou diversos sistemas operacionais, não é necessário ter máquinas virtuais nem mesmo outros dispositivos, como celulares ou tablet. O Sauce Labs prover o conector &lt;a href=&#34;http://saucelabs.com/downloads/Sauce-Connect-latest.zip&#34; title=&#34;Sauce Connect&#34;&gt;Sauce Connect&lt;/a&gt;. Com ele é possível criar uma conexão entre a nossa máquina e os servidores do SauceLabs, assim é possível rodar os testes dentro do firewall do Sauce Labs Cloud. Cloud que disponibiliza mais de &lt;a href=&#34;https://saucelabs.com/docs/platforms&#34; title=&#34;plataformas SauceLabs&#34;&gt;200 plataformas&lt;/a&gt;, que inclui dispositivos móveis, diversos SO e navegadores. Uma vez baixado o Sauce Connect, essa conexão é feita pelo comando:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;java -jar Sauce-Connect.jar --tunnel-identifier &#34;tabless&#34; $SAUCE_USERNAME $SAUCE_ACCESS_KEY&lt;/pre&gt;

&lt;p&gt;Vale ressaltar que _$SAUCE&lt;em&gt;USERNAME&lt;/em&gt; e &lt;em&gt;$SAUCE_ACCESS_KEY&lt;/em&gt; são variáveis de ambientes. Método recomendado para evitar a divulgação de dados privados. Para obter dados de acesso, acesse a &lt;a href=&#34;https://saucelabs.com/signup&#34; title=&#34;página de cadastro do SauceLabs&#34;&gt;página de cadastro&lt;/a&gt;. Após a criação da conta, uma chave de acesso já é fornecida, conforme é ilustrado na figura abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/b29a04372bbe9224392df879736467128316054e/687474703a2f2f7332312e706f7374696d672e6f72672f63673666346a786e722f73617563656c6162735f6163636f756e745f706167652e706e67&#34; alt=&#34;página inicial da conta SauceLabs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Na página inicial, o botão &lt;strong&gt;New Interactive Session&lt;/strong&gt; permite a criação de uma instância de navegador. Uma popup (ilustrada na imagem abaixo) será exibida ao clicar no botão, com várias opções de sistema operacional e de navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/7de3c788dc9a56a153bada645514034a442ae6d4/687474703a2f2f7332312e706f7374696d672e6f72672f736f693230616834372f6e65775f696e7465726163746976655f73657373696f6e5f706f7075702e706e67&#34; alt=&#34;popup para a criação de uma nova instância de navegador do SauceLabs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ao instanciar o navegador, é possível visualizar o resultado dos testes no terminal (ilustração na imagem abaixo). Os testes sempre serão executados novamente caso haja alguma alteração tanto no código quanto nas especificações, possibilitando assim a prática de TDD ou BDD, utilizando qualquer tipo de navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/404afe58a076603719c0448fbc1a41ca92c85e0c/687474703a2f2f7332312e706f7374696d672e6f72672f74687a39366e6369762f697061645f73617563656c6162735f73657373696f6e2e706e67&#34; alt=&#34;instancia de um iPad do SauceLabs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse exemplo contempla apenas a execução de testes de forma manual. Essas ferramentas que foram utilizadas também oferecem suporte para a automatização de testes, mas isso ficará para um próximo capítulo. Para quem se interessar, todo código está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/7649954&#34; title=&#34;gist do exemplo&#34;&gt;gist&lt;/a&gt;. Muito obrigado.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>