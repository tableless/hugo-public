<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elcio Ferreira on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/elcio-ferreira/index.xml</link>
    <description>Recent content in Elcio Ferreira on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/elcio-ferreira/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Por que Python? (parte 2)</title>
      <link>https://tableless.github.io/hugo-public/por-que-python-parte-2/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/por-que-python-parte-2/</guid>
      <description>

&lt;p&gt;Continuando meu &lt;a href=&#34;http://tableless.com.br/por-que-python/&#34;&gt;artigo anterior&lt;/a&gt;, vou tentar mostrar alguns motivos porque, em minha opinião, é tão bom escrever código Python. E dessa vez vamos falar da sintaxe da linguagem e seus tipos de dados. As características e recursos da sintaxe tornam Python uma linguagem tão poderosa e produtiva. Veja os exemplos:&lt;/p&gt;

&lt;h2 id=&#34;packing-e-unpacking&#34;&gt;Packing e Unpacking&lt;/h2&gt;

&lt;pre&gt;# encoding: utf-8
# Atribuindo três valores de uma vez
a, b, c = 2, 3, 5
 
# Trocando o valor de duas variáveis:
a, b = b, a

# Uma função que retorna mais de um valor:
def vizinhos(n):
    return n-1, n+1

# Executando a função acima e guardando os valores em duas variáveis:
x, y = vizinhos(42)&lt;/pre&gt;

&lt;h2 id=&#34;sem-sobrecarga-de-métodos&#34;&gt;Sem sobrecarga de métodos&lt;/h2&gt;

&lt;p&gt;Você pode escrever uma função que pode receber parâmetros opcionais assim:&lt;/p&gt;

&lt;pre&gt;def addr(domain, path=&#39;/&#39;, querystring=&#39;&#39;, hash=&#39;&#39;):
    return &#39;http://%s%s%s%s&#39; % (domain,path,querystring,hash)&lt;/pre&gt;

&lt;p&gt;E pode chamar com um, dois, três ou quatro parâmetros:&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; addr(&#39;tableless.com.br&#39;)
&lt;em&gt;&#39;http://tableless.com.br/&#39;&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; addr(&#39;tableless.com.br&#39;,&#39;/code/css/&#39;)
&lt;em&gt;&#39;http://tableless.com.br/code/css/&#39;&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; addr(&#39;tableless.com.br&#39;,querystring=&#39;?s=python&#39;)
&lt;em&gt;&#39;http://tableless.com.br/?s=python&#39;&lt;/em&gt;&lt;/pre&gt;

&lt;p&gt;Você pode até criar uma função que recebe qualquer quantidade de parâmetros:&lt;/p&gt;

&lt;pre&gt;def div(content,**attributes):
    html=&#34;&amp;lt;div&#34;
    for attribute in attributes.iteritems():
        html+=&#39; %s=&#34;%s&#34;&#39; % attribute
    html+=&#34;&amp;gt;&#34;+content+&#34;&amp;lt;/div&amp;gt;&#34;
    return html&lt;/pre&gt;

&lt;p&gt;Veja funcionando:&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; div(&#34;Hello&#34;)
&lt;em&gt;&#39;&amp;lt;div&amp;gt;Hello&amp;lt;/div&amp;gt;&#39;&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; div(&#34;Hello&#34;,id=&#34;blue&#34;)
&lt;em&gt;&#39;&amp;lt;div id=&#34;blue&#34;&amp;gt;Hello&amp;lt;/div&amp;gt;&#39;&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; div(&#34;Hello&#34;,id=&#34;blue&#34;,contenteditable=&#34;true&#34;,title=&#34;Edite como quiser.&#34;)
&lt;em&gt;&#39;&amp;lt;div contenteditable=&#34;true&#34; id=&#34;blue&#34; title=&#34;Edite como quiser.&#34;&amp;gt;Hello&amp;lt;/div&amp;gt;&#39;&lt;/em&gt;&lt;/pre&gt;

&lt;h2 id=&#34;listas-poderosas&#34;&gt;Listas poderosas&lt;/h2&gt;

&lt;p&gt;Em programação, lidamos com arrays o tempo todo. Ter arrays flexíveis e poderosos em uma linguagem é algo que vai te ajudar o tempo todo. Veja esses exemplos:&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; import random
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l=[random.randint(0,100) for i in range(20)]
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l
&lt;em&gt;[4, 89, 49, 87, 33, 7, 57, 41, 50, 53, 63, 71, 12, 57, 4, 32, 13, 9, 67, 9]&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[0] &lt;em&gt;&lt;strong&gt;# Primeiro elemento&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;4&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[1] &lt;em&gt;&lt;strong&gt;# Segundo elemento&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;89&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[-1] &lt;em&gt;&lt;strong&gt;# Último elemento&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;9&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[-2] &lt;em&gt;&lt;strong&gt;# Penúltimo elemento&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;67&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[0:5] &lt;em&gt;&lt;strong&gt;# Primeiros cinco elementos&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;[4, 89, 49, 87, 33]&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[:5] &lt;em&gt;&lt;strong&gt;# Primeiros cinco elementos&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;[4, 89, 49, 87, 33]&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[-5:] &lt;em&gt;&lt;strong&gt;# Últimos cinco elementos&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;[32, 13, 9, 67, 9]&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[4::-1] &lt;em&gt;&lt;strong&gt;# Primeiros cinco elementos, de trás para frente&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;[33, 87, 49, 89, 4]
&lt;/em&gt;&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l=&#34;abcdefghijklmnopqrstuvwxyz&#34;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[1] &lt;em&gt;&lt;strong&gt;# Segundo elemento&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;&#39;b&#39;&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[:5] &lt;em&gt;&lt;strong&gt;# Primeiros cinco elementos&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;&#39;abcde&#39;&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[-5:] &lt;em&gt;&lt;strong&gt;# Últimos cinco elementos&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;&#39;vwxyz&#39;&lt;/em&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l[4::-1] &lt;em&gt;&lt;strong&gt;# Primeiros cinco elementos, de trás para frente&lt;/strong&gt;&lt;/em&gt;
&lt;em&gt;&#39;edcba&#39;
&lt;/em&gt;&lt;/pre&gt;

&lt;p&gt;Veja, por exemplo, como saber quais os elementos comuns entre duas listas:&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l1=[1,2,3,4,5,6,7,8,9]
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; l2=[1,3,5,7,9]
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; set(l1) &amp; set(l2)
&lt;em&gt;set([7, 1, 3, 5, 9])&lt;/em&gt;&lt;/pre&gt;

&lt;p&gt;E como remover de uma lista os elementos que existem em outra:&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; set(l1)-set(l2)
&lt;em&gt;set([8, 2, 4, 6])
&lt;/em&gt;&lt;/pre&gt;

&lt;p&gt;Vamos criar uma função que recebe uma lista de strings e retorna uma lista HTML em ordem alfabética, com os duplicados removidos:&lt;/p&gt;

&lt;pre&gt;def ol(l):
    return &#34;\n&#34;.join(&#34;&amp;lt;li&amp;gt;%s&amp;lt;/li&amp;gt;&#34; % i for i in sorted(set(l)))&lt;/pre&gt;

&lt;p&gt;Veja funcionando:&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; print ol([&#34;charlie&#34;,&#34;foxtrot&#34;,&#34;bravo&#34;,&#34;delta&#34;,&#34;bravo&#34;,&#34;juliet&#34;,&#34;charlie&#34;,&#34;echo&#34;,&#34;alpha&#34;,&#34;bravo&#34;])
&lt;em&gt;&amp;lt;li&amp;gt;alpha&amp;lt;/li&amp;gt;&lt;/em&gt;
&lt;em&gt;&amp;lt;li&amp;gt;bravo&amp;lt;/li&amp;gt;&lt;/em&gt;
&lt;em&gt;&amp;lt;li&amp;gt;charlie&amp;lt;/li&amp;gt;&lt;/em&gt;
&lt;em&gt;&amp;lt;li&amp;gt;delta&amp;lt;/li&amp;gt;&lt;/em&gt;
&lt;em&gt;&amp;lt;li&amp;gt;echo&amp;lt;/li&amp;gt;&lt;/em&gt;
&lt;em&gt;&amp;lt;li&amp;gt;foxtrot&amp;lt;/li&amp;gt;&lt;/em&gt;
&lt;em&gt;&amp;lt;li&amp;gt;juliet&amp;lt;/li&amp;gt;&lt;/em&gt;&lt;/pre&gt;

&lt;h2 id=&#34;de-novo-a-biblioteca-padrão&#34;&gt;De novo, a biblioteca padrão&lt;/h2&gt;

&lt;p&gt;Por exemplo, estou apaixonado pelo módulo itertools:&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; import itertools
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; for i in itertools.permutations(&#39;abc&#39;):
&lt;strong&gt;...&lt;/strong&gt;     print &#39;&#39;.join(i)
&lt;strong&gt;...&lt;/strong&gt;
&lt;em&gt;abc&lt;/em&gt;
&lt;em&gt;acb&lt;/em&gt;
&lt;em&gt;bac&lt;/em&gt;
&lt;em&gt;bca&lt;/em&gt;
&lt;em&gt;cab&lt;/em&gt;
&lt;em&gt;cba
&lt;/em&gt;&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; for i in itertools.combinations(&#39;abc&#39;,2):
&lt;strong&gt;...&lt;/strong&gt;     print &#39;&#39;.join(i)
&lt;strong&gt;...&lt;/strong&gt;&lt;em&gt;
ab
ac
bc
&lt;/em&gt;&lt;/pre&gt;

&lt;p&gt;No próximo artigo vamos falar mais sobre a biblioteca padrão.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Por que Python?</title>
      <link>https://tableless.github.io/hugo-public/por-que-python/</link>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/por-que-python/</guid>
      <description>

&lt;p&gt;Eu sou apaixonado por &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;. Muito. Daquele tipo que fala de Python sempre que pode. E uma pergunta que sempre me fazem é: por quê? Vou tentar fazer uma lista dos motivos mais relevantes:&lt;/p&gt;

&lt;h2 id=&#34;1-é-muito-bom-escrever-código-python&#34;&gt;1. É muito bom escrever código Python&lt;/h2&gt;

&lt;p&gt;Geralmente, quando alguém cria uma linguagem de programação, tem em vista um objetivo. Por exemplo, Lisp foi escrita para programação funcional. Java foi escrita para que o mesmo código pudesse rodar em qualquer lugar. PHP foi criada para construir páginas web. E Python foi criada para ser produtiva e fácil de escrever.&lt;/p&gt;

&lt;p&gt;Um programador experiente aprende a sintaxe do Python em algumas poucas horas. O jeito de escrever faz sentido.&lt;/p&gt;

&lt;p&gt;Veja, por exemplo, essa função para calcular um número de &lt;a href=&#34;https://pt.wikipedia.org/wiki/Sequ%C3%AAncia_de_Fibonacci&#34;&gt;Fibonacci&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;def fib(n):
    if n&amp;lt;3:
        return n
    return fib(n-1) + fib(n-2)&lt;/pre&gt;

&lt;p&gt;Note como a sintaxe é simples. Mesmo nas decisões de design que são &amp;#8220;pouco ortodoxas&amp;#8221;, como os blocos baseados na indentação, a decisão foi tomada pensando em produtividade. O modelo de blocos do Python faz com que você precise digitar menos. Além disso, é impossível escrever código não indentado em Python.&lt;/p&gt;

&lt;p&gt;Veja nesse outro exemplo, a função de Fibonacci em uma versão &lt;a href=&#34;https://en.wikipedia.org/wiki/Memoization&#34;&gt;memoized&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;memo = {0:0, 1:1}

def fib(n):
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Reparou como é simples? Ao trabalhar com Python, a linguagem nunca está entre você e seu problema. Você pode gastar seu tempo com a lógica de programação, que é o que realmente importa, e não com especificidades da linguagem que você está usando.&lt;/p&gt;

&lt;h2 id=&#34;2-organizar-um-projeto-python-é-muito-fácil&#34;&gt;2. Organizar um projeto Python é muito fácil&lt;/h2&gt;

&lt;p&gt;Vamos colocar nossa função de Fibonacci e salvar num arquivo, fib.py, incluindo um pouquinho de documentação. Chamamos cada arquivo Python de módulo:&lt;/p&gt;

&lt;pre&gt;&#39;&#39;&#39;Fibonacci function, memoized for better performance.&#39;&#39;&#39;
memo = {0:0, 1:1}

def fib(n):
    &#39;&#39;&#39;Returns the nth Fibonacci number.&#39;&#39;&#39;
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Agora vamos importar esse arquivo no console do Python, e veja o que dá para fazer:&lt;/p&gt;

&lt;div style=&#34;width: 490px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://elcio.com.br/wp-content/uploads/2015/09/fib.gif&#34; alt=&#34;&#34; width=&#34;480&#34; height=&#34;267&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Executando fib.py e ajuda.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;É como PHPDoc ou Javadoc, mas completamente nativo, e com uma sintaxe muito simples. E tudo o que você precisa para ler a documentação é o próprio Python.&lt;/p&gt;

&lt;h2 id=&#34;3-o-ecossistema-python-é-fantástico&#34;&gt;3. O ecossistema Python é fantástico&lt;/h2&gt;

&lt;p&gt;Começando pela própria linguagem, que vem com uma excelente &lt;a href=&#34;https://docs.python.org/3/library/&#34;&gt;biblioteca padrão&lt;/a&gt;. Essa biblioteca é bastante extensa e possui excelentes módulos, bem documentados e fáceis de usar. Por exemplo, digamos que você queira baixar o código fonte desse artigo e gerar um arquivo GZip com ele, veja como é fácil:&lt;/p&gt;

&lt;pre&gt;import urllib
import gzip
html=urllib.urlopen(&#39;http://tableless.com.br/por-que-python/&#39;).read()
gzfile=gzip.open(&#39;por-que-python.html.gz&#39;,&#39;w&#39;)
gzfile.write(html)&lt;/pre&gt;

&lt;p&gt;Usamos os módulos urllib e gzip. Entre os recursos fornecidos pelos módulos que já vem com o Python, posso citar o controle de threads e processamento paralelo, a criação de webservices, bibliotecas para sockets, http, ftp, e-mail, a leitura e escrita de XML, JSON, CSV, o acesso a recursos do sistema operacional, matemática e estatística, criptografia, manipulação de arquivos de áudio, testes automatizados, etc.&lt;/p&gt;

&lt;p&gt;Como é fácil escrever código bom e bem documentado, a comunidade Python tem feito um excelente em fornecer módulos para praticamente tudo o que você precisar fazer. Você pode encontrar, no &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;Python Package Index&lt;/a&gt;, milhares de módulos prontos para coisas como ler e escrever arquivos Excel, trabalhar com imagens, acessar bancos de dados os mais diversos, trabalhar com automação residencial, enviar SMS, integrar seu software ao Gmail, falar com serviços de VoIP, conectar-se a redes sociais, criar um servidor de e-mails, desenvolver jogos 3D, e uma infinidade de outros recursos.&lt;/p&gt;

&lt;h3 id=&#34;e-tem-mais-8230&#34;&gt;E tem mais&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Se você não programa em Python, espero tê-lo deixado pelo menos um pouquinho curioso. No próximo artigo, vamos falar um pouco mais da linguagem, mostrando algumas características da sintaxe e dos tipos de dados que a tornam tão interessante. Até lá, fique à vontade nos comentários. Sugestões, dúvidas, críticas e opiniões são muito bem vindas e vão me ajudar a preparar os próximos artigos.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Acessibilidade, como mudar o Brasil?</title>
      <link>https://tableless.github.io/hugo-public/acessbilidade-como-mudar-o-brasil/</link>
      <pubDate>Tue, 27 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/acessbilidade-como-mudar-o-brasil/</guid>
      <description>&lt;p&gt;Esse não é apenas um artigo para você se informar. Pelo contrário, é o que eu menos pretendo com ele. É um chamado à ação!&lt;/p&gt;

&lt;p&gt;O tema é Acessibilidade na Web. Trata-se de, ao construir um site, fazê-lo para que seja acessível para qualquer pessoa, em qualquer dispositivo, em qualquer conexão. Trata-se de fazer o site acessível para você mesmo quando estiver navegando no celular, ou sem óculos, ou de uma conexão lenta, ou dirigindo. Ou dirigindo ao celular sem óculos numa conexão lenta (cuidado!) Também, é claro, esse trabalho vai tornar o site acessível para portadores de deficiência.&lt;/p&gt;

&lt;p&gt;Acessibilidade não deveria ser um extra, mas uma obrigação básica em projetos web. Não simplesmente porque é politicamente correto, mas porque é muito mais barato pensar em acessibilidade desde o princípio. Se você deixa para pensar em acessibilidade depois que o site já foi desenhado, isso é caro e trabalhoso. Mas se a preocupação com acessibilidade está presente desde o início do projeto, conduzindo o desenho, o custo de criar sites acessíveis é muito pequeno.&lt;/p&gt;

&lt;p&gt;Apesar disso, vemos o tempo todo agências e produtoras web construindo sites inacessíveis. E aqui eu gostaria de sua ajuda. O que podemos fazer para mudar isso? Como conscientizar os clientes e as agências da importância da acessibilidade? O que podemos fazer para que os novos sites sejam construídos tendo essa preocupação? Que tipo de ações, campanhas, conteúdos, eventos, iniciativas deveríamos nós, a comunidade brasileira de desenvolvedores web, promover para mudar essa realidade?&lt;/p&gt;

&lt;p&gt;Por favor, comentários.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ah, o maravilhoso mundo real</title>
      <link>https://tableless.github.io/hugo-public/ah-o-maravilhoso-mundo-real/</link>
      <pubDate>Thu, 10 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/ah-o-maravilhoso-mundo-real/</guid>
      <description>&lt;p&gt;O Diego publicou, há mais de uma semana, um &lt;a href=&#34;http://tableless.com.br/se-prepare-para-a-revolucao&#34;&gt;artigo sobre o impacto da mudança de estratégia do W3C&lt;/a&gt; em relação ao ciclo de vida de seus padrões. O artigo gerou algumas opiniões contrárias nos comentários, em relação ao fato de ele ter dito que bordas arredondadas são mais importantes que a web semântica e em relação à estratégia de especificações modulares do W3C. Vou compartilhar minha opinião sobre os dois pontos.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, é importante distinguir o ideal daquilo que é possível fazer. Li um bocado sobre RDF e ontologias há uns dez anos. Li &amp;#8220;A Revolução Inacabada&amp;#8221;, vi o RSS nascer e se tornar popular, vi as primeiras aplicações entenderem o formato. RDF falhou. Dez anos se passaram e continuamos escrevendo HTML para ser lido por navegadores e só. Há poucos exemplos de aplicações semânticas na vida real, e a maioria seria desenvolvida de uma forma ou de outra.&lt;/p&gt;

&lt;p&gt;Há muita gente, por exemplo, definindo seu próprio padrão de XML para trocar dados com sistemas parceiros. Quantos desses estão usando RDF, com uma ontologia interpretada automaticamente por sistemas que &amp;#8220;descobrem&amp;#8221; os serviços um do outro? Ou seja, não há novidades nisso nos últimos dez anos.&lt;/p&gt;

&lt;p&gt;Escrever HTML bom é importante, porque vai ajudar o Google a indexar seu site e vai facilitar a vida de quem tentar HTML parsing nele. Mas, seja sincero, você tem mesmo esperanças de que alguém vá lê-lo como XML? Vê alguma vantagem real em validar seu código como XHTML, além de provar a si próprio que fez tudo direito? E onde está a promessa dos microformats? Microformats só fazem diferença se forem usados por muita gente. Ninguém vai fazer um parser de um formato usado em apenas um site. Você consegue citar, de cabeça, cinco sites que usem microformats e não foram feitos por você? Ah, claro, não vale incluir na lista o microformats.org.&lt;/p&gt;

&lt;p&gt;Nem RSS é um bom exemplo de aplicação de semântica XML. Existem pelo menos dois formatos populares do padrão, além do padrão Atom, que serve para a mesma coisa. E não sei de nenhum leitor de RSS de sucesso que faça parsing dos feeds como XML. O que todos fazem é ler e interpretar a string. É isso mesmo que você entendeu, quase tão bom quanto um CSV! Outro exemplo digno de nota é o SOAP, que foi criado para fornecer aos webservices a capacidade de &amp;#8220;autodescoberta&amp;#8221;. Você conhece alguém que use isso de verdade? Já viu algum robô que varre a web em busca de serviços e entende sozinho como usá-los? SOAP só tem a vantagem de oferecer tooltips para ajudar os programadores .Net que usam Visual Studio. Enquanto isso, lá fora, XMLRPC e REST (com JSON) estão mudando o mundo.&lt;/p&gt;

&lt;p&gt;Por que essas tecnologias falharam, embora pareçam todas boas idéias? Meu palpite é que elas exigiam um raciocínio de longo prazo, um tipo de aposta, que é muito difícil de conseguir. Embora XHTML, Microformats ou SOAP sejam idéias muito boas, aplicá-las em seu site só vai ter valor se muito mais gente o fizer. Se você aplicar o formato sozinho vai perder seu tempo.&lt;/p&gt;

&lt;p&gt;O que é muito diferente de, por exemplo, deixar de usar tabelas para layout, escrever bom HTML ou usar jQuery. Essas coisas lhe devolvem um benefício imediato. Se deixar de usar tabelas para layout vai ter um site mais leve e vai perder muito menos tempo quando tiver que mudar o layout, se escrever HTML bom vai ter menos trabalho para escrever CSS, para fazer o CSS mobile e o de impressão, e se usar jQuery vai escrever javascript em um terço do tempo.&lt;/p&gt;

&lt;p&gt;Note que esses três exemplos também tiram benefícios do fato de muita gente estar usando. Há muitos bons lugares para se aprender HTML e CSS, há muitos sistemas Open Source que já trabalham gerando código bom e os buscadores entendem a semântica do bom HTML. Mas você não depende desses benefícios para tomar a decisão de uso. Quando começamos, há dez anos, a fazer layouts tableless, não aparecíamos melhor no Google e praticamente não havia sistemas gerando HTML direito. Mas o fizemos assim mesmo porque os benefícios imediatos compensavam o esforço.&lt;/p&gt;

&lt;p&gt;É por isso que eu temo que nunca teremos uma web semântica de verdade, e estamos condenados a fazer HTML parsing para sempre.&lt;/p&gt;

&lt;p&gt;Há exceções. RSS, por exemplo. RSS é uma sombra do que poderia, mas é um padrão de sucesso, amplamente adotado. E não pode ser explicado com minha teoria do benefício individual imediato. Se você estiver usando RSS sozinho no mundo, não terá nenhum benefício. Talvez o sucesso do RSS se deva ao fato de precisar de uma pequena rede de usuários para oferecer um grande benefício.&lt;/p&gt;

&lt;p&gt;Você já se perguntou como foram vendidos os primeiros aparelhos de FAX? Ter um FAX só faz sentido se mais gente tiver. Foram vendidos aos pares. As empresas o compravam para trocar documentos entre a matriz e as filiais. O fato de poder trocar documentos com o resto do mundo era, no início, um &amp;#8220;benefício adicional&amp;#8221;. Se você precisa trocar conteúdo com um site parceiro e vocês forem os únicos usuários de RSS no mundo, terá valido a pena. Conforme a comunidade de usuários aumentava, o valor de ter RSS crescia. Muita gente começou a usar Bloglines e todo mundo queria entrar na festa.&lt;/p&gt;

&lt;p&gt;Há alguns anos eu percorri o país com o pessoal da Locaweb comparando o modelo de adoção do RSS com o que eu imaginava que seriam os microformats. Eu estava errado. Pense um segundo no formato de reviews dos microformats. Qual o real benefício de usá-lo? Há alguma aplicação indispensável, onde você realmente quer estar, baseada em hReview? Para que você vai perder seu tempo?&lt;/p&gt;

&lt;p&gt;Será que não estamos resolvendo o problema errado? Quando o Diego diz que bordas arredondadas são mais importantes que RDF, será que ele não tem razão? Para meus clientes, hoje, bordas arredondadas com CSS significam um site mais rápido, mais barato (menos tempo gasto recortando imagens) e, para os sites muito visitados, economia de banda. É uma diferença pequena, mas é uma vantagem. E RDF? Além de oferecer RSS, que nem vai ser lido como XML, o que eu posso fazer de real hoje com RDF para meus clientes?&lt;/p&gt;

&lt;p&gt;Desculpe se meu raciocínio parece mesquinho. Ele é. Estou tentando ser realista. Uma das principais influências sobre as decisões humanas é a inércia, e não acredito que o mundo vá, num futuro próximo, adotar de maneira revolucionária o RDF ou mesmo o XHTML. Ainda acho essas idéias fantásticas, só não sei se são possíveis.&lt;/p&gt;

&lt;p&gt;O realismo também me faz crer que a nova estratégia de especificações modulares do W3C é uma coisa boa. Sofremos décadas com implementações parciais do HTML 4 e do CSS 2. Agora vamos assumir a realidade inevitável. Os desenvolvedores de navegador se sentirão mais à vontade para dizer a você o que funciona ou não. E não precisamos esperar anos para a definição de um padrão. Podemos usar os recursos com os quais o consórcio já concordou hoje. Leva mesmo alguns anos para o W3C bater o martelo sobre determinado padrão, e as especificações modulares representam um ciclo de releases muito mais dinâmico.&lt;/p&gt;

&lt;p&gt;Já temos um acordo sobre CSS Transform, bordas arredondadas, múltiplos backgrounds, repetição no DOM, validadores de formulários, SVG, DOM Storage, querySelectors e uma série de outros recursos legais. Por que esperar até a próxima Olimpíada para dizer aos desenvolvedores de browsers: &amp;#8220;Ok, pessoal, fechamos tudo, HTML 5 e CSS 3 já são padrões, podem implementar&amp;#8221;? De qualquer maneira, a adoção modular das especificações do W3C é inevitável. Embora a especificação tenha saído inteira, a adoção foi modular no HTML 3, no HTML 4, no CSS 2. Sabendo que não vai ser diferente mesmo, não é melhor que tenhamos bonitas tabelas de compatibilidade entre o que existe e o que cada navegador suporta?&lt;/p&gt;

&lt;p&gt;Dá uma olhada na &lt;a href=&#34;http://www.w3.org/Style/CSS/current-work&#34;&gt;lista de módulos do CSS3&lt;/a&gt;. Você não quer esperar isso tudo ficar pronto para ter bordas arredondadas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aonde nos leva a morte do Internet Explorer 6?</title>
      <link>https://tableless.github.io/hugo-public/aonde-nos-leva-a-morte-do-internet-explorer-6/</link>
      <pubDate>Fri, 17 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/aonde-nos-leva-a-morte-do-internet-explorer-6/</guid>
      <description>&lt;p&gt;Semana passada foi o Digg, essa semana o YouTube. E a comunidade de desenvolvedores os segue fazendo barulho, anunciando que vai fazer o mesmo. Nós estamos fazendo nossa parte na Visie, eliminando a preocupação com o IE6 de nossos sites e convencendo nossos clientes a fazê-lo também. Já vai tarde.&lt;/p&gt;

&lt;p&gt;Mas não é tempo de comemorar, ainda há muito trabalho a fazer. Há oito anos o Zeldman publicou seu célebre artigo &lt;a href=&#34;http://www.alistapart.com/articles/tohell/&#34;&gt;To Hell With Bad Browsers&lt;/a&gt;, em que nos explicava porque devíamos abandonar o suporte aos navegadores 4.0. O ponto básico era não ter que fazer várias versões do mesmo site. Uma versão apenas, com bom layout CSS, podia funcionar para todo mundo, com todas as vantagens dos padrões web, mas não nos navegadores 4.0.&lt;/p&gt;

&lt;p&gt;Bom, fazem oito anos. OITO LONGOS ANOS! Há oito anos que podemos escrever uma versão só de cada site, desde que saibamos escrever hacks de CSS e ajustes de float para o Internet Explorer 6. Há oito anos que estamos repetindo o fato de que o Internet Explorer 6 é a pedra que restou em nosso sapato. Há oito anos que sonhamos em não ter que escrever hacks.&lt;/p&gt;

&lt;p&gt;A morte do Internet Explorer 6 significa apenas isso: poder usar PNG transparente e não ter que escrever hacks (ou não ter que escrever &lt;strong&gt;tantos&lt;/strong&gt; hacks.)&lt;/p&gt;

&lt;p&gt;A Microsoft passou oito anos sem atualizar seu navegador para nos dar exatamente o que? PNG transparente? Nesse período, Firefox, Opera, Safari e Konqueror estão trabalhando em coisas como controle de opacidade, &lt;a href=&#34;http://tableless.com.br/introducao-ao-css-animation&#34;&gt;CSS transform&lt;/a&gt;, bordas com imagem, sombras, &lt;a href=&#34;http://tableless.com.br/introducao-sobre-media-queries&#34;&gt;media queries&lt;/a&gt;, &lt;a href=&#34;http://tableless.com.br/css3-columns&#34;&gt;colunas&lt;/a&gt; e os maravilhosos novos &lt;a href=&#34;http://tableless.com.br/nth-child&#34;&gt;seletores do CSS3&lt;/a&gt;. Coisas maravilhosas que você já pode usar, mas a maioria de seus usuários não vai ver porque usa Internet Explorer.&lt;/p&gt;

&lt;p&gt;A morte do Internet Explorer 6 nos leva apenas ao lugar onde deveríamos ter chegado há oito anos: sites sem hacks. A Microsoft ainda está algumas gerações atrasadas e, se queremos usar CSS 3 e HTML 5 um dia, é bom parar de comemorar e voltar ao trabalho. Há um mundo para mudar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formulários definitivos e problema de lógica</title>
      <link>https://tableless.github.io/hugo-public/formularios-definitivos-e-problema-de-logica/</link>
      <pubDate>Sun, 25 May 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/formularios-definitivos-e-problema-de-logica/</guid>
      <description>&lt;p&gt;Dessa vez você ganha um ingresso para a palestra &amp;#8220;&lt;a href=&#34;http://visie.com.br/treinamento/formularios-semanticos/&#34;&gt;Formulários Definitivos&lt;/a&gt;&amp;#8220;. Tente resolver &lt;a href=&#34;http://visie.com.br/eventos/charada&#34;&gt;esse problema aqui&lt;/a&gt;, é fácil. E mesmo que você não consiga, ainda assim concorre a ingressos, com menos chance, mas concorre.&lt;/p&gt;

&lt;p&gt;Por falar na palestra, esse é o programa que temos preparado:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;19h30&lt;/strong&gt; &amp;#8211; &lt;em&gt;Formulários que funcionam&lt;/em&gt; &amp;#8211; Elcio Ferreira&lt;/p&gt;

&lt;p&gt;É sempre importante conhecer e relembrar os fundamentos.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;20h00&lt;/strong&gt; &amp;#8211; &lt;em&gt;Semântica e CSS&lt;/em&gt; &amp;#8211; Diego Eis&lt;/p&gt;

&lt;p&gt;Como construir bons formulários Tableless&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;20h45&lt;/strong&gt; &amp;#8211; &lt;em&gt;Validando Formulários&lt;/em&gt; &amp;#8211; Elcio Ferreira&lt;/p&gt;

&lt;p&gt;Construindo um validador de formulários universal e plugável com jQuery&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;21h15&lt;/strong&gt; &amp;#8211; &lt;em&gt;Pare de escrever formulários&lt;/em&gt; &amp;#8211; Elcio Ferreira&lt;/p&gt;

&lt;p&gt;Como um bom framework server-side livra você do trabalho de escrever formulários.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fizemos pensando nas necessidades mais comuns que aparecem nos &lt;a href=&#34;http://visie.com.br/treinamento/&#34;&gt;cursos de Tableless e Javascript&lt;/a&gt;. Estou mostrando o programa agora porque, embora as apresentações já estejam preparadas, ainda dá tempo de mudar. Se alguém tiver alguma sugestão, por favor, deixe um comentário. Até quinta!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ELPI POA: ainda dá tempo!</title>
      <link>https://tableless.github.io/hugo-public/elpi-poa-ainda-da-tempo/</link>
      <pubDate>Fri, 16 May 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elpi-poa-ainda-da-tempo/</guid>
      <description>&lt;p&gt;Ainda dá tempo de ganhar um convite para o ELPI Porto Alegre. Só que agora não basta mandar um comentário, é preciso &lt;a href=&#34;http://elcio.com.br/mensagem&#34;&gt;decifrar a mensagem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É fácil. Boa sorte!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ELPI Porto Alegre, ganhe um convite.</title>
      <link>https://tableless.github.io/hugo-public/elpi-porto-alegre-ganhe-um-convite/</link>
      <pubDate>Wed, 14 May 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elpi-porto-alegre-ganhe-um-convite/</guid>
      <description>&lt;p&gt;O 10º &lt;a href=&#34;https://www.locaweb.com.br/encontro/&#34;&gt;Encontro Locaweb de Profissionais de Internet&lt;/a&gt; está chegando a Porto Alegre. E você, fiel leitor do Tableless, ganha convites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atenção, os convites são apenas para Porto Alegre&lt;/strong&gt;. Se você é de outra cidade, espere sua vez. Os cinco primeiros leitores que deixarem um comentário nesse post ganham um convite. Comente com um e-mail válido, o convite vai para o seu e-mail.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ELPI: Problema 3</title>
      <link>https://tableless.github.io/hugo-public/elpi-problema-3/</link>
      <pubDate>Sun, 04 May 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elpi-problema-3/</guid>
      <description>&lt;p&gt;Mais um par de ingressos para o ELPI no Rio de Janeiro. Dessa vez um problema fácil, algo para a gente matar saudades. O primeiro que enviar um link para aquele vídeo antigo leva:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;5u0t6n013b3r4354bru0y114&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ah, bons tempos aqueles&amp;#8230;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ELPI: Problema 4</title>
      <link>https://tableless.github.io/hugo-public/elpi-problema-4/</link>
      <pubDate>Sun, 04 May 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elpi-problema-4/</guid>
      <description>&lt;p&gt;O próximo problema, você não pode ver. Mas ele está aqui.&lt;!-- Qual o nome da cor de fundo do Livro de Mozilla? --&gt;&lt;/p&gt;

&lt;p&gt;De novo, o primeiro que enviar a resposta nos comentários ganha um par de ingressos para o &lt;a href=&#34;http://www.locaweb.com.br/encontro/&#34;&gt;ELPI&lt;/a&gt; no Rio de Janeiro.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ELPI: Problema 5</title>
      <link>https://tableless.github.io/hugo-public/elpi-problema-5/</link>
      <pubDate>Sun, 04 May 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elpi-problema-5/</guid>
      <description>&lt;p&gt;Agora um com matemática. Quais os fatores primos do número 1321317089447443?&lt;/p&gt;

&lt;p&gt;Esse é o último par de ingressos para o ELPI no Rio de Janeiro. A partir de quinta-feira publico os problemas para o evento em Porto Alegre.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ELPI: Problema 1</title>
      <link>https://tableless.github.io/hugo-public/elpi-problema-1/</link>
      <pubDate>Fri, 02 May 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elpi-problema-1/</guid>
      <description>&lt;p&gt;Vai ganhar um par de ingressos para o &lt;a href=&#34;https://www.locaweb.com.br/encontro/&#34;&gt;10º ELPI no Rio de Janeiro&lt;/a&gt; o primeiro que enviar um comentário com a resposta do problema abaixo:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eve solved a blew cocoon endorsed rent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Atenção:&lt;/strong&gt; esses convites são para o ELPI no &lt;strong&gt;Rio de Janeiro&lt;/strong&gt;. Se você não pode ir ou mora em outra cidade, não envie resposta, deixe a chance para alguém que possa aproveitá-la. Em breve publicaremos problemas para Curitiba, Porto Alegre e Belo Horizonte.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ELPI: Problema 2</title>
      <link>https://tableless.github.io/hugo-public/elpi-problema-2/</link>
      <pubDate>Fri, 02 May 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elpi-problema-2/</guid>
      <description>&lt;p&gt;Segundo problema, valendo um par de ingressos para o ELPI no Rio de Janeiro:&lt;/p&gt;

&lt;p&gt;67 7A 69 70 3A 1F 8B 08 08 D0 11 1B 48 02 FF 65 00 CB 28 29 29 B0 D2 D7 CF 4D 2C 28 D6 4B CF CF 4F CF 49 D5 4B CE CF D5 4B 2A 02 0B D9 E7 E4 D8 EA 1A 19 E9 59 1A 1A 99 9B 98 EA E8 9A 18 EB 19 19 98 19 1B 02 00 29 22 3E 34 36 00 00 00&lt;/p&gt;

&lt;p&gt;Onde fica isso?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10º Encontro Locaweb de Profissionais de Internet</title>
      <link>https://tableless.github.io/hugo-public/10o-encontro-locaweb/</link>
      <pubDate>Fri, 18 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/10o-encontro-locaweb/</guid>
      <description>&lt;p&gt;Está chegando o &lt;a href=&#34;https://www.locaweb.com.br/encontro/&#34;&gt;10º Encontro Locaweb de Profissionais de Internet&lt;/a&gt;, e eu vou participar novamente esse ano. Vou falar sobre produtividade no desenvolvimento, mas com uma abordagem bem diferente da que usei ano passado no Intercon. Dessa vez, vou escrever código.&lt;/p&gt;

&lt;p&gt;E você, nosso fiel leitor, pode ganhar um convite. Vamos publicar posts &amp;#8220;relâmpago&amp;#8221; aqui no Tableless dias antes dos eventos do Rio de Janeiro, Porto Alegre, Belo Horizonte e Curitiba. Cada post vem com uma pergunta sobre XHTML, CSS ou programação. A primeira pessoa que responder corretamente a pergunta ganha um convite. Vão ser dez perguntas e dez convites para cada cidade, fique ligado.&lt;/p&gt;

&lt;p&gt;Já tenho uma mini-aplicação a desenvolver, mas ainda dá tempo de mudar de idéia, ou mesmo de incorporar a ela idéias criativas. Se você tiver alguma sugestão, por favor, deixe um comentário.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PDF sobre Produtividade</title>
      <link>https://tableless.github.io/hugo-public/pdf-sobre-produtividade/</link>
      <pubDate>Mon, 03 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/pdf-sobre-produtividade/</guid>
      <description>&lt;p&gt;&lt;strong&gt;JABÁ&lt;/strong&gt;: Há algum tempo trabalhando com treinamento, tive a oportunidade de conhecer desenvolvedores das mais diversas empresas, em vários estados. E percebi que há diferenças muito grandes no nível de conhecimento. De um lado, os twitters, bloggers, antenados leitores de feeds sempre ligados na última novidade. De outro, os programadores que migraram com dificuldade de Win32 para a Web, e estão usando praticamente a mesma tecnologia há seis ou sete anos.&lt;/p&gt;

&lt;p&gt;Não é incomum encontrar, por exemplo, equipes inteiras de desenvolvedores que não trabalham com controle de versão. Ou gente que nunca ouviu falar em testes unitários. Ou quem ainda acredita que simplesmente aprender UML vai resolver todos os seus problemas.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Pior do que isso, ainda há por aí, acreditem, uma multidão de desenvolvedores que ainda constrói layout com tabelas, usa muito pouco CSS e apenas edição visual.&lt;/p&gt;

&lt;p&gt;É pensando nisso que escrevi o documento &amp;#8220;&lt;a href=&#34;http://visie.com.br/treinamento/pdf/cadastro.pt&#34;&gt;Produtividade Web 2.0&lt;/a&gt;&amp;#8220;, de 68 páginas, que estamos agora disponibilizando por apenas R$ 19,90. Parte do material do Workshop de Produtividade da Visie, ele não foi escrito para lhe dar as respostas e ensinar como fazer cada coisa, mas para lhe dar as perguntas certas.&lt;/p&gt;

&lt;p&gt;Nosso objetivo é colocar minhocas na sua cabeça, na de sua equipe, e na de seu chefe. Bom proveito!&lt;/p&gt;

&lt;p&gt;PS.: Você também pode baixar de graça &lt;a href=&#34;http://visie.com.br/treinamento/pdf/&#34;&gt;nossa apostila de XSLT&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>