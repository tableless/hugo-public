<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lucas Macedo on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/lucas-macedo/index.xml</link>
    <description>Recent content in Lucas Macedo on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/lucas-macedo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CakePHP conven√ß√µes de nomenclatura e o poderoso Inflector!</title>
      <link>https://tableless.github.io/hugo-public/cakephp-convencoes-de-nomenclatura-e-o-poderoso-inflector/</link>
      <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/cakephp-convencoes-de-nomenclatura-e-o-poderoso-inflector/</guid>
      <description>

&lt;p&gt;Geralmente eu tenho problemas para encontrar os nomes corretos para os meus controllers, views, models e tabelas. Talvez a tarefa mais dif√≠cil de todo programador seja nomear as coisas. Quem nunca ficou indeciso por causa do nome de uma fun√ß√£o ou de uma vari√°vel? Eu busco sempre permanecer o projeto todo em ingl√™s.&lt;/p&gt;

&lt;p&gt;Bem, &lt;strong&gt;CakePHP&lt;/strong&gt; faz um monte de trabalho tedioso e repetitivo para voc√™, para que voc√™ possa se concentrar melhor nas regras do negocio. Mas o CakePHP depende de voc√™! Ele se agarrar √†s suas conven√ß√µes de nomenclatura, por isso √© importante ter aten√ß√£o em nomes de &lt;strong&gt;tabelas&lt;/strong&gt;, &lt;strong&gt;controllers&lt;/strong&gt;, &lt;strong&gt;models&lt;/strong&gt;..&lt;/p&gt;

&lt;p&gt;Eu mesmo j√° tive diversos problemas com nomenclaturas e passei por muita dor de cabe√ßa! Acredite.. O CakePHP espera que voc√™ converta corretamente esse problema entre singular, plural, etc üòâ&lt;/p&gt;

&lt;p&gt;As Models s√£o singular. Ex: &lt;strong&gt;BigPerson&lt;/strong&gt; e &lt;strong&gt;ReallyBigPerson&lt;/strong&gt; s√£o exemplos de nomes de modelos convencionais. Os nomes das tabelas correspondentes a model do CakePHP s√£o plurais e sublinhado. As tabelas para as models acima mencionadas seriam &lt;strong&gt;big_people&lt;/strong&gt;, &lt;strong&gt;really_big_people&lt;/strong&gt;, respectivamente.&lt;/p&gt;

&lt;p&gt;Aparentemente CakePHP converte substantivos irregulares corretamente e eu me pergunto: Como? Ser√° que ela tem um look-up table enorme para todos eles? Bem, n√£o! Em vez disso, ele faz algumas coisas muito sofisticadas em uma classe chamada &lt;strong&gt;cake/libs/ inflector.php,&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;com um monte de correspond√™ncias de regex e muito mais!&lt;/p&gt;

&lt;h2 id=&#34;m√©todos&#34;&gt;M√©todos&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pluralize&lt;/strong&gt;: Converte para o plural: Apple, Man ‚Üí Apples, Men&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;singularize&lt;/strong&gt;: Converte para o singular: Apples, Men ‚Üí Apple, Man&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;camelize&lt;/strong&gt;: Converte underscored hadron_collider ‚Üí hadronCollider&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;underscore&lt;/strong&gt;: Converte para underscored adronCollider ‚Üí hadron_collider&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;humanize&lt;/strong&gt;: Converte unserscore para stirng com Captalize devine_intervention ‚Üí Devine Intervention&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tableize&lt;/strong&gt;: Converte para underscore e plural MajorFeatureThing ‚Üí major_feature_things&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;classify&lt;/strong&gt;: Converte para underscore com plural para string no singular major_feature_things ‚Üí MajorFeatureThing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;variable&lt;/strong&gt;: Converte de underscored plural ou singular para singular e lowercase. major_feature_things ‚Üí majorFeatureThing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slug&lt;/strong&gt;: Converte caracteres especias/espa√ßos em underscore de qualquer formata√ß√£o. Este m√©todo √© UTF-8 encoding! apple pur√©e ‚Üí apple_puree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora que voc√™ tem uma ideia do que o Inflector pode fazer por voc√™, vamos explorar cada um desses m√©todos em detalhes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inflector::pluralize();&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O m√©todo pluralize () recebe uma palavra no singular (string) e retorna a vers√£o plural da mesma. Aqui est√£o alguns exemplos:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;Inflector::pluralize(&#39;Apple&#39;); // returns &#34;Apples&#34;
Inflector::pluralize(&#39;Menu&#39;); // returns &#34;Menus&#34;
Inflector::pluralize(&#39;News&#39;); // returns &#34;News&#34;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Inflector::singularize()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O m√©todo singularize() recebe uma palavra no plural (string) e retorna a vers√£o no singular dele. Aqui est√£o alguns exemplos:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;Inflector::singularize(&#39;Houses&#39;); // returns &#34;House&#34;
Inflector::singularize(&#39;Bananas&#39;); // returns &#34;Banana&#34;
Inflector::singularize(&#39;Men&#39;); // returns &#34;Man&#34;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Inflector::camelize ()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Voc√™ pode passar um m√©todo ou a ou uma palavra under_scored para o camelize () e ele&lt;/p&gt;

&lt;p&gt;ir√° retornar esta palavra FooBar ou fooBar(se voc√™ passar false como o segundo argumento). Alguns exemplos:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;Inflector::camelize(&#39;foo_bar&#39;); // returns &#34;FooBar&#34; 
Inflector::camelize(&#39;foo_bar&#39;, false); // returns &#34;fooBar&#34;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Inflector::underscore()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Este o nome j√° diz.&lt;/p&gt;

&lt;p&gt;O m√©todo underscore () tem basicamente uma palavra e converte os espa√ßos dela em &amp;#8220;_&amp;#8221; , e tamb√©m converte os caracteres especiais em caracteres normais. Ex:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;Inflector::underscore(&#39;TestField&#39;) // returns test_field
Inflector::underscore(&#39;FeineApfel&#39;) // returns feine_aepfel
&lt;/pre&gt;

&lt;p&gt;Este √© o meu preferido!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inflector::slug()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O m√©todo slug () recebe uma string e cria uma representa√ß√£o &amp;#8220;slugged&amp;#8221; dele.&lt;/p&gt;

&lt;p&gt;Isto significa basicamente que todos os espa√ßos ser√£o substitu√≠dos por um determinado caractere (o padr√£o √© &amp;#8220;-&amp;#8220;),&lt;/p&gt;

&lt;p&gt;o que n√£o for palavra ser√° removido e os caracteres com acentos como &amp;#8220;√°√Å√©√ç√ì√ö&amp;#8221; ser√° traduzida para a sua representa√ß√£o ASCII.&lt;/p&gt;

&lt;p&gt;Aqui est√£o alguns exemplos:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;Inflector::slug(&#39;The truth - and- more- news&#39;); // returns &#34;the-truth-and-more-news&#34;
Inflector::slug(&#39;!@$#exciting stuff! - what !@-# was that?&#39;); // returns &#34;exciting-stuff-what-was-that&#34;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Inflector::humanize()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O m√©todo humanize () recebe uma palavra sublinhada, remove um determinado seperator (padr√£o para &amp;#8220;_&amp;#8221;) e uppercases os primeiros caracteres das palavras. Alguns exemplos dos testes principais:&lt;/p&gt;

&lt;pre class=&#34;lang:php decode:true &#34;&gt;Inflector::humanize(&#39;posts&#39;); // returns &#34;Posts&#34;
Inflector::humanize(&#39;posts_tags&#39;); // returns &#34;Posts Tags&#34;
Inflector::humanize(&#39;file_systems&#39;); // returns  &#34;File Systems&#34;&lt;/pre&gt;

&lt;p&gt;Estes s√£o os que eu achei mais importante ..&lt;/p&gt;

&lt;p&gt;Mas se voc√™ quiser ver todos os m√©todos veja na &lt;a href=&#34;http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html&#34;&gt;documenta√ß√£o aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Adicione suas pr√≥prias regras&lt;/p&gt;

&lt;p&gt;Se voc√™ precisar, voc√™ pode adicionar suas pr√≥prias regras e / ou substituir regras padr√£o. As regras inflector::method() √© respons√°vel por isso e funciona como um setter ou getter para todas as regras armazenados. Os testes b√°sicos proporcionam um exemplo:&lt;/p&gt;

&lt;pre lang=&#34;php&#34;&gt;Inflector::rules(&#39;singular&#39;, array(&#39;/rata/&#39; =&amp;gt; &#39;\1ratus&#39;));
&lt;/pre&gt;

&lt;p&gt;Voc√™ tamb√©m pode adicionar translitera√ß√µes que mapeia caracteres espec√≠ficos ou acentuados de linguagem para os ASCII (que s√£o usados ‚Äã‚Äãpara criar slugs, por exemplo). Os teste no core tamb√©m oferecem um bom exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$this-&amp;gt;assertNotEqual(Inflector::slug(&#39;J√òRGEN&#39;), &#39;JORGEN&#39;);
Inflector::rules(&#39;transliteration&#39;, array(&#39;/√ò/&#39; =&amp;gt; &#39;O&#39;));
$this-&amp;gt;assertEqual(Inflector::slug(&#39;J√òRGEN&#39;), &#39;JORGEN&#39;);
&lt;/pre&gt;

&lt;p&gt;Uma boa pr√°tica √© armazenar suas regras personalizadas em um arquivo de inicializa√ß√£o, de modo que eles est√£o imediatamente dispon√≠veis para a sua aplica√ß√£o quando estiver totalmente carregado.&lt;/p&gt;

&lt;p&gt;Minha dica √© criar dentro do arquivo Bootstrap =D ou at√© mesmo um helper..&lt;/p&gt;

&lt;p&gt;Agora, v√°! V√° e diga a todos os seus amigos sobre a sua nova descoberta! \o/&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>