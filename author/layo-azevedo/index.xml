<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Layo Azevedo on Tableless</title>
    <link>http://tableless.com.br/author/layo-azevedo/index.xml</link>
    <description>Recent content in Layo Azevedo on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/author/layo-azevedo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Conferência W3C Web.br 2013</title>
      <link>http://tableless.com.br/conferencia-w3c-web-br-2013/</link>
      <pubDate>Sun, 24 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/conferencia-w3c-web-br-2013/</guid>
      <description>

&lt;p&gt;A &lt;a href=&#34;http://conferenciaweb.w3c.br&#34; target=&#34;_blank&#34;&gt;Conferência W3C Web.br&lt;/a&gt; deste ano foi realizada no centro de convenções Rebouças em São Paulo e contou com diversos profissionais, sorteios, palestras, debates, networking, brindes e muita códificação. O evento foi dividido em trilhas: canvas, input, header e section. Logo quando cheguei minha cabeça deu um nó, muitas coisas acontendo ao mesmo tempo, era difícil escolher qual trilha deveria participar, pois queria assistir todas.&lt;/p&gt;

&lt;h3 id=&#34;debate-caloroso-sobre-a-internet-no-brasil&#34;&gt;Debate caloroso sobre a internet no Brasil&lt;/h3&gt;

&lt;p&gt;Um dos pontos altos na conferência foi o segundo dia onde ocorreu um debate com o tema: Como progredir a Web? Que contou na mesa principal: &lt;a href=&#34;http://conferenciaweb.w3c.br/#/page/57&#34; target=&#34;_blank&#34;&gt;Nathália Sautchuk&lt;/a&gt;, &lt;a href=&#34;http://conferenciaweb.w3c.br/#/page/67&#34; target=&#34;_blank&#34;&gt;Yasodara Córdova&lt;/a&gt;, &lt;a href=&#34;http://conferenciaweb.w3c.br/#/page/55&#34; target=&#34;_blank&#34;&gt;Sérgio Lopes&lt;/a&gt; e &lt;a href=&#34;http://conferenciaweb.w3c.br/#kris&#34; target=&#34;_blank&#34;&gt;Kris Borchers&lt;/a&gt; e Vagner Diniz como mediador.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39583&#34; alt=&#34;conference-2013&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/11/flick1.jpg&#34; width=&#34;660&#34; height=&#34;347&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;os-temas-abordados-foram&#34;&gt;Os temas abordados foram:&lt;/h4&gt;

&lt;p&gt;&amp;#8211; Marco cívil da internet no Brasil&lt;/p&gt;

&lt;p&gt;&amp;#8211; Codificação nas escolas&lt;/p&gt;

&lt;p&gt;&amp;#8211; Tecnologias para impactar o usuário&lt;/p&gt;

&lt;p&gt;&amp;#8211; O poder da web está na mão dos desenvolvedores&lt;/p&gt;

&lt;h4 id=&#34;algumas-frases-me-chamaram-bastante-atenção-como&#34;&gt;Algumas frases me chamaram bastante atenção como:&lt;/h4&gt;

&lt;p&gt;&amp;#8220;A web é um lego&amp;#8221; &amp;#8211; Yasodara Córdova&lt;/p&gt;

&lt;p&gt;&amp;#8220;Meu filho nunca irá programar&amp;#8221; &amp;#8211; Sérgio Lopes&lt;/p&gt;

&lt;p&gt;Essas duas frases criaram enorme debate, incluindo pessoas que estavam na platéia, o tema era a inclusão no ensino de tags HTML nas escolas.&lt;/p&gt;

&lt;p&gt;De um lado Yasodara Córdova defendeu a ideia que o HTML não é difícil e daqui um tempo a web irá evoluir mais, ressaltou também que o cidadão deverá conhecer pelo menos o básico sobre a web.&lt;/p&gt;

&lt;p&gt;Do outro lado Sérgio Lopes defendeu a tese que não há por quê pessoas sem interesse se aprofundem com esse tipo de conhecimento, dando um exemplo de uma tela de tubo: &amp;#8220;Eu não quero aprender a arrumar uma tela de tubo se ela quebrar, prefiro chamar uma pessoa para concertar. Não tenho porquê aprender algo que não tenho interesse&amp;#8221;.&lt;/p&gt;

&lt;h4 id=&#34;javascript-que-voa&#34;&gt;Javascript que voa!&lt;/h4&gt;

&lt;p&gt;Com certeza um dos destaques foi a palestra do &lt;a href=&#34;http://conferenciaweb.w3c.br/#/page/37&#34; target=&#34;_blank&#34;&gt;Daniel Filho&lt;/a&gt; &amp;#8220;Javascript que voa!&amp;#8221;, ele trouxe para a platéia a ideia que o javascript é muito mais que só a web. Desenvolveu um sensor que ao passar a mão acendia um LED tudo isso feito em js e ainda fez um drone voar utilizando o nodecopter e o johnny-five, achei fantástico trabalhar diretamente com hardware. Vale a pena dar uma olhada no &lt;a href=&#34;https://github.com/danielfilho&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt; do Daniel.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39586&#34; alt=&#34;daniel-filho&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/11/flick2.jpg&#34; width=&#34;660&#34; height=&#34;347&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;processo-de-desenvolvimento-front-end-8211-do-caos-ao-sublime&#34;&gt;Processo de Desenvolvimento Front-End &amp;#8211; Do caos ao Sublime&lt;/h4&gt;

&lt;p&gt;Nesta palestra &lt;a href=&#34;http://conferenciaweb.w3c.br/#jaydson&#34; target=&#34;_blank&#34;&gt;Jaydson Gomes&lt;/a&gt; deu a idéia que não devemos ter medo de quebrar paradigmas, devemos inovar. Não foi uma palestra técnica e sim para refletimos.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39547&#34; alt=&#34;do-caos-ao-sublime&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/11/do-caos-ao-sublime.jpg&#34; width=&#34;660&#34; height=&#34;347&#34; srcset=&#34;uploads/2013/11/do-caos-ao-sublime.jpg 660w, uploads/2013/11/do-caos-ao-sublime-319x168.jpg 319w, uploads/2013/11/do-caos-ao-sublime-588x310.jpg 588w, uploads/2013/11/do-caos-ao-sublime-589x310.jpg 589w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Quando iniciamos em uma empresa podemos ver algo que ainda esteja na época das pedras e não podemos ficar com receio de modificar.&lt;/p&gt;

&lt;p&gt;A palestra não teve somente a ideia do caos IDE (Dreamweaver) para o Sublime Text, mas todos os processos referente a evolução, temos que ultrapassar culturas e paradigmas.&lt;/p&gt;

&lt;h4 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h4&gt;

&lt;p&gt;Foi uma experiência sensacional muita coisa legal acontecendo ao mesmo tempo, fiquei com a impressão final que a web está evoluindo numa época que estamos a todo vapor, debates como o marco civil na internet aqui no Brasil mostra isso a rigor.&lt;/p&gt;

&lt;p&gt;Precisamos aproximar mais o usuário e o desenvolvedor. &amp;#8220;Todos os caminhos levam à web&amp;#8221;, esse titulo exemplifica bem tudo que aconteceu este ano e o que está por vir nas próximas edições.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Otimizando e organizando seu front-end com PHP</title>
      <link>http://tableless.com.br/otimizando-e-organizando-seu-front-end-com-php/</link>
      <pubDate>Sun, 28 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/otimizando-e-organizando-seu-front-end-com-php/</guid>
      <description>

&lt;p&gt;Não é de hoje que se fala em otimização e organização de scripts. Não há dor de cabeça maior para um desenvolvedor back-end receber uma marcação HTML bagunçada e sem padronização. Isso é mais comum do que imaginamos e nem sempre é por falta de conhecimento ou preguiça. O maior fator é o curto tempo para finalizar os projetos.&lt;/p&gt;

&lt;p&gt;A ideia desse post é justamente auxiliar os desenvolvedores a criarem um núcleo de código no PHP para reaproveitá-lo diversas vezes, como se fosse um módulo.&lt;/p&gt;

&lt;h4 id=&#34;o-php-e-suas-vertentes&#34;&gt;O PHP e suas vertentes&lt;/h4&gt;

&lt;p&gt;O primeiro passo é conhecer um pouco dessa linguagem. Ela é muito extensa e com diversos recursos. Vai depender muito do que o desenvolvedor quer se especializar. Existem desenvolvedores que mandam muito bem em programação voltada para e-commerce, outros se especializam em sistemas ERP, sites institucionais, webservices, processadores de emails e assim por diante… No nosso caso vou mostrar alguns recursos que são bem direcionados a qualquer projeto front-end.&lt;/p&gt;

&lt;h4 id=&#34;html-e-php&#34;&gt;HTML e PHP&lt;/h4&gt;

&lt;p&gt;Muitos desenvolvedores acham que é cada um por si, eu particulamente não sigo esse raciocinio. Vou ilustrar algumas situações que auxiliarão e facilitarão a manutenção dos scripts, mesclando a linguagem de programação PHP com a marcação HTML.&lt;/p&gt;

&lt;h5 id=&#34;imagine-a-seguinte-situação&#34;&gt;Imagine a seguinte situação:&lt;/h5&gt;

&lt;p&gt;Tenho um site com 250 páginas HTMLs e meu cliente deseja modificar o menu principal, colocando mais um item, como eu desenvolveria em HTML? Entraria nas 250 páginas e alterava todos os menus? Criaria um iframe? Muitos fariam isso, mas a partir de hoje, não mais!&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&amp;gt;
&amp;lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34; xml:lang=&#34;pt-br&#34; lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=UTF-8&#34; /&amp;gt;
&amp;lt;title&amp;gt;Trabalhando com PHP no front-end&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div id=&#34;menu&#34;&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;index.html&#34; class=&#34;ativo&#34; title=&#34;Inicio&#34;&amp;gt;Inicio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;quem-somos.html&#34; title=&#34;Quem somos&#34;&amp;gt;Quem somos&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;contato.html&#34; title=&#34;Contato&#34;&amp;gt;Contato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Primeiro passo, crie uma página PHP. No meu caso irei colocar o nome &amp;#8220;menu-principal.php&amp;#8221; com a div que contém o menu:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;menu&#34;&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;index.html&#34; class=&#34;ativo&#34; title=&#34;Inicio&#34;&amp;gt;Inicio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;quem-somos.html&#34; title=&#34;Quem somos&#34;&amp;gt;Quem somos&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;contato.html&#34; title=&#34;Contato&#34;&amp;gt;Contato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Agora basta chamar nossa página principal utilizando o php (Lembre-se a página principal deve utlizar a extensão &amp;#8220;.php&amp;#8221;):&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&amp;gt;
&amp;lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34; xml:lang=&#34;pt-br&#34; lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=UTF-8&#34; /&amp;gt;
&amp;lt;title&amp;gt;Trabalhando com PHP no front-end&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;? require_once (&#34;menu-principal.php&#34;); ?&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;OBS: Existem 4 formas de chamar o arquivo &amp;#8220;menu-principal.php&amp;#8221; include, include_once, require e require_once. Utilizei o require_once pois ele salva em cache, ou seja, puxa uma vez os dados. Toda hora que requisitar uma página o menu já vai estar disponivel no browser do cliente ao contrário do include, que chama os dados a cada requisição e se houver algum erro, ele não para o código ao contrário do require_once que dá o famoso erro FATAL ERROR.&lt;/p&gt;

&lt;p&gt;É simples?&lt;/p&gt;

&lt;p&gt;Muito simples não precisamos de conhecimentos aprofundados na linguagem, porém conseguimos melhorar a manutenção do código não é? Por quê não desenvolvemos tambem para o rodapé? Ou qualquer elemento que irá repetir várias vezes? Agora é com você.&lt;/p&gt;

&lt;h5 id=&#34;segunda-situação&#34;&gt;Segunda situação&lt;/h5&gt;

&lt;p&gt;Imagine diversos formulários em um projeto ERP onde você é o responsável front-end, seria uma dor de cabeça desenvolver diversas páginas, vários tipos de inputs, selects etc.. Por quê não criamos padrões para esse tipo de situação tambem? Que tal desenvolvermos um núcleo igual fizemos com o menu, porém com informações que são dinâmicas e com características próprias:&lt;/p&gt;

&lt;p&gt;Temos a seguinte página HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&amp;gt;
&amp;lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34; xml:lang=&#34;pt-br&#34; lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=UTF-8&#34; /&amp;gt;
&amp;lt;title&amp;gt;Trabalhando com PHP no front-end&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;form method=&#34;post&#34; action=&#34;envio.php&#34;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type=&#34;text&#34; name=&#34;nome&#34; class=&#34;base-form&#34;/&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type=&#34;text&#34; name=&#34;email&#34; class=&#34;base-form&#34;/&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type=&#34;text&#34; name=&#34;telefone&#34; class=&#34;base-form&#34;/&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type=&#34;submit&#34; name=&#34;envio&#34; value=&#34;Envio&#34; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Vou entrar em uma questão agora que Orientação a objeto no PHP é um assunto muito bem falado na internet e muito utlizado por desenvolvedores. Irei tentar explicar com um exemplo bem simples, o aprendizado dessa técnica, que é fantástica.&lt;/p&gt;

&lt;p&gt;Vamos criar um padrão para um simples formulário, utilizando uma classe chamada (formulario) no PHP, ela irá conter todas as características que necessitamos no front-end:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
class Formulario {

function __construct ($AcaoForm, $MetodoDeEnvio) {
echo &#39;&amp;lt;form action=&#34;&#39;.$AcaoForm.&#39;&#34; method=&#34;&#39;.$MetodoDeEnvio.&#39;&#34;&amp;gt;&#39;;
}

function __destruct () {
echo &#34;&amp;lt;/form&amp;gt;&#34;;
}

function Input ($Tipo, $Nome, $Classe) {
echo &#39;&amp;lt;p&amp;gt;&amp;lt;input type=&#34;&#39;.$Tipo.&#39;&#34; name=&#34;&#39;.$Nome.&#39;&#34; class=&#34;&#39;.$Classe.&#39;&#34; /&amp;gt;&amp;lt;/p&amp;gt;&#39;;
}

function Submit ($NomeSubmit, $Valor) {
echo &#39;&amp;lt;p&amp;gt;&amp;lt;input type=&#34;submit&#34; name=&#34;&#39;.$NomeSubmit.&#39;&#34; value=&#34;&#39;.$Valor.&#39;&#34; /&amp;gt;&amp;lt;/p&amp;gt;&#39;;
}
}

?&amp;gt;&lt;/pre&gt;

&lt;p&gt;Nesta classe desenvolvemos um corpo para todos os formulários. Criamos apenas para os elementos: input e submit. Você pode desenvolver para todas as propriedades como select, radio, textarea etc&amp;#8230; O nosso passo agora é instanciar a nossa classe e chamar os nossos métodos colocando suas propriedades:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$objeto = new Formulario(&#39;pagina.php&#39;,&#39;post&#39;);
$objeto-&amp;gt;Input(&#39;text&#39;, &#39;nome&#39;, &#39;formulario-classe&#39;);
$objeto-&amp;gt;Input(&#39;text&#39;, &#39;email&#39;, &#39;formulario-classe&#39;);
$objeto-&amp;gt;Input(&#39;text&#39;, &#39;telefone&#39;, &#39;valida-tel&#39;);
$objeto-&amp;gt;Input(&#39;hidden&#39;, &#39;token&#39;, &#39;ok&#39;);
$objeto-&amp;gt;Submit(&#39;envio&#39;, &#39;Enviar&#39;);
?&amp;gt;&lt;/pre&gt;

&lt;p&gt;Ou seja, criamos essa estrutura HTML :&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;form method=&#34;post&#34; action=&#34;envio.php&#34;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type=&#34;text&#34; name=&#34;nome&#34; class=&#34;formulario-classe&#34;/&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type=&#34;text&#34; name=&#34;email&#34; class=&#34;formulario-classe&#34;/&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type=&#34;text&#34; name=&#34;telefone&#34; class=&#34;valida-tel&#34;/&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type=&#34;hidden&#34; name=&#34;token&#34; value=&#34;ok&#34; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;input type=&#34;submit&#34; name=&#34;envio&#34; value=&#34;Enviar&#34; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;&lt;/pre&gt;

&lt;p&gt;Ficamos assim com o script final:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
class Formulario {

function __construct ($AcaoForm, $MetodoDeEnvio) {
echo &#39;&amp;lt;form action=&#34;&#39;.$AcaoForm.&#39;&#34; method=&#34;&#39;.$MetodoDeEnvio.&#39;&#34;&amp;gt;&#39;;
}

function __destruct () {
echo &#34;&amp;lt;/form&amp;gt;&#34;;
}

function Input ($Tipo, $Nome, $Classe) {
echo &#39;&amp;lt;p&amp;gt;&amp;lt;input type=&#34;&#39;.$Tipo.&#39;&#34; name=&#34;&#39;.$Nome.&#39;&#34; class=&#34;&#39;.$Classe.&#39;&#34; /&amp;gt;&amp;lt;/p&amp;gt;&#39;;
}

function Submit ($NomeSubmit, $Valor) {
echo &#39;&amp;lt;p&amp;gt;&amp;lt;input type=&#34;submit&#34; name=&#34;&#39;.$NomeSubmit.&#39;&#34; value=&#34;&#39;.$Valor.&#39;&#34; /&amp;gt;&amp;lt;/p&amp;gt;&#39;;
}
}
?&amp;gt;

&amp;lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&amp;gt;
&amp;lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34; xml:lang=&#34;pt-br&#34; lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=UTF-8&#34; /&amp;gt;
&amp;lt;title&amp;gt;Trabalhando com PHP no front-end&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;?php
$objeto = new Formulario(&#39;pagina.php&#39;,&#39;post&#39;);
$objeto-&amp;gt;Input(&#39;text&#39;, &#39;nome&#39;, &#39;formulario-classe&#39;);
$objeto-&amp;gt;Input(&#39;text&#39;, &#39;email&#39;, &#39;formulario-classe&#39;);
$objeto-&amp;gt;Input(&#39;text&#39;, &#39;telefone&#39;, &#39;valida-tel&#39;);
$objeto-&amp;gt;Input(&#39;hidden&#39;, &#39;token&#39;, &#39;ok&#39;);
$objeto-&amp;gt;Submit(&#39;envio&#39;, &#39;Enviar&#39;);
?&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;O ideal é criar um diretório apenas com arquivos que possuem classes, por exemplo: Class.Html, Class.Form, Class.SQL, Class.CSS, etc..&lt;/p&gt;

&lt;p&gt;Depois chamamos esses dados com um require, include ou mesmo através do __autoload() desse jeito você irá desenvolver e criar seus padrões, melhorarando ainda mais seu nível de desenvolvimento.&lt;/p&gt;

&lt;p&gt;Que tal criarmos uma função que utilize um alerta do javascript apenas mudando o parâmetro de entrada. Com o PHP isto é possível, no exemplo abaixo utilizei um outro estilo de programação que é a linear/procedural.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function MensagemAlert($parametro) {
echo &#39;
&amp;lt;script&amp;gt;
alert(&#34;&#39;.$parametro.&#39;&#34;);
&amp;lt;/script&amp;gt;
&#39;;
}

// chamar a função na página de envio
MensagemAlert(&#39;Preencha os dados corretamente&#39;);

?&amp;gt;&lt;/pre&gt;

&lt;p&gt;No PHP podemos trabalhar com o modelo de programação Orientado a objeto, linear ou mesclando os dois.&lt;/p&gt;

&lt;p&gt;Bom, é isso. Espero que tenham gostado e aguçado a imaginação e criatividade de todos vocês.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prepared Statements no MySQL</title>
      <link>http://tableless.com.br/prepared-statements-no-mysql/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/prepared-statements-no-mysql/</guid>
      <description>

&lt;p&gt;Para quem adora padronização e organização, no MySQL existe o recurso chamado &lt;strong&gt;Prepared Statements&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Imagine a seguinte situação: você precisa criar uma procedure que faça todas as consultas em todas as entidades do seu banco e outra que apenas inserções e assim por diante&amp;#8230; Uma para cada DML (data manipulation language) tudo passando por parametros, esse é o statement prepare.&lt;/p&gt;

&lt;p&gt;Resumidamente você prepara a query antes de executa-lá no banco de dados, então vamos colocar a mão na massa e mostrar esse recurso.&lt;/p&gt;

&lt;h2 id=&#34;criando-o-usuário&#34;&gt;Criando o usuário&lt;/h2&gt;

&lt;p&gt;O primeiro passo é criar um usuário no banco de dados que tenha permissão para executar rotinas. Eu que trabalho sempre com stored procedures utilizo apenas o EXECUTE, mas se você trabalha com DMLs diretas nas aplicações, pode criar diversas permissões ou um usuário com todos os privilégios (ALL PRIVILEGES).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Segue abaixo o exemplo de EXECUTE:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;GRANT EXECUTE 
ON *.*
TO layo.azevedo@localhost IDENTIFIED BY &#39;w9QSK4yD&#39; WITH GRANT OPTION;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Segue abaixo o exemplo de um ALL PRIVILEGES:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;GRANT ALL PRIVILEGES
ON *.*
TO layo.azevedo@localhost IDENTIFIED BY &#39;w9QSK4yD&#39; WITH GRANT OPTION;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ESSES FORAM OS COMANDOS PARA CRIAR UM USUARIO:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GRANT&lt;/strong&gt; &amp;#8211; CRIA USUARIO&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EXECUTE&lt;/strong&gt; &amp;#8211; EXECUTA APENAS ROTINAS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ALL PRIVILEGES&lt;/strong&gt; &amp;#8211; PERMITE EXECUTAR TUDO NO BANCO DE DADOS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;*.*&lt;/strong&gt; &amp;#8211; O PRIVILEGIO APLICA-SE A TODAS AS BASES&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IDENTIFIED BY&lt;/strong&gt; &amp;#8211; É A SUA SENHA&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WITH GRANT OPTION&lt;/strong&gt; &amp;#8211; O USUARIO PODE CRIAR DIVERSOS USUARIOS E CONCEDER PRIVILEGIOS A ELE.&lt;/p&gt;

&lt;p&gt;Sinceramente eu aconselho trabalhar com o EXECUTE. Com ele é difícil de tentarem injection sql.&lt;/p&gt;

&lt;p&gt;Agora que criamos o usuario &lt;strong&gt;layo.azevedo@localhost&lt;/strong&gt; vou criar uma procedure com a função de executar qualquer select no MySQL, começando com o delimitador do código para não parar quando o MySQL achar o sinal de &amp;#8216;;&amp;#8217; (ponto vírgula):&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;DELIMITER $$
$$&lt;/pre&gt;

&lt;p&gt;Dentro do DELIMITER colocamos a procedure com o nome de SelectGeral com três parâmetros: nome da tabela, condição e valor:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 &amp;#8211;&lt;/strong&gt; Chamarei tabela de p_tabela, condição de p_condicao e valor de p_valor (lembre-se que o MySQL é fortemente tipado então coloque o tipo se é VARCHAR, CHAR, INT, etc&amp;#8230;)&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;DELIMITER $$

create procedure SelectGeral (p_tabela(VARCHAR(20), p_condicao(VARCHAR(10), p_valor (VARCHAR(30)) 
BEGIN

END
$$&lt;/pre&gt;

&lt;p&gt;Proximo passo é criar uma variável para executar a query dentro do banco. Nesse caso usaremos o SET juntamente com o comando CONCAT para concatenarmos os dados.&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;DELIMITER $$

create procedure SelectGeral (p_tabela VARCHAR(20), p_condicao VARCHAR(10), p_valor VARCHAR(30))
BEGIN
SET @Variavel = CONCAT(&#39;SELECT * from  &#39;, p_tabela,&#39; WHERE &#39;, p_condicao , &#39; = &#39;&#39;&#39; ,p_valor,&#39;&#39;&#39;&#39;);
END
$$&lt;/pre&gt;

&lt;p&gt;O último passo é executar a variável:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;DELIMITER $$

create procedure SelectGeral (p_tabela VARCHAR(20), p_condicao VARCHAR(10), p_valor VARCHAR(30))
BEGIN
SET @Variavel = CONCAT(&#39;SELECT * from  &#39;, p_tabela,&#39; WHERE &#39;, p_condicao , &#39; = &#39;&#39;&#39; ,p_valor,&#39;&#39;&#39;&#39;);
PREPARE consulta_geral FROM @Variavel ;
EXECUTE consulta_geral;
END
$$&lt;/pre&gt;

&lt;p&gt;Pronto criamos a procedure SelectGeral com o Prepared Statements. Para visualizar basta executar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;CALL SelectGeral (&#39;usuario&#39;, &#39;nome&#39;, &#39;layo.azevedo&#39;);&lt;/pre&gt;

&lt;p&gt;Ou seja seria essa query = &lt;strong&gt;SELECT * from usuario WHERE  nome = &amp;#8216;layo.azevedo&amp;#8217;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Esse foi um exemplo bem básico, mostrando o caminho das pedras para iniciantes que tenham alguma dúvida sobre Prepared Statements.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>