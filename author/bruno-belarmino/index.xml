<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bruno Belarmino on Tableless</title>
    <link>http://tableless.com.br/author/bruno-belarmino/index.xml</link>
    <description>Recent content in Bruno Belarmino on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/author/bruno-belarmino/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ReactJS 101</title>
      <link>http://tableless.com.br/reactjs-101/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/reactjs-101/</guid>
      <description>

&lt;h4 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h4&gt;

&lt;p&gt;ReactJS é a biblioteca criada pelo Facebook para criação de interfaces. Pensando no mundo &lt;strong&gt;MV&lt;/strong&gt;* qual vivenciamos hoje, este seria o &lt;strong&gt;V&lt;/strong&gt; (view).&lt;/p&gt;

&lt;p&gt;Através de uma api simples qual previlegia o uso do javascript e com uma performance acima da apresentada pelos seus concorrentes, o ReactJS vem ganhando cada dia mais adeptos.&lt;/p&gt;

&lt;h4 id=&#34;building-blocks&#34;&gt;Building Blocks&lt;/h4&gt;

&lt;p&gt;Fortemente inspirado pelo conceito de componentes, trazendo duas grandes características que o desenvolvedor deve se concentrar: &lt;em&gt;Components&lt;/em&gt; e&lt;em&gt;Elements&lt;/em&gt;.&lt;/p&gt;

&lt;h5 id=&#34;components&#34;&gt;Components&lt;/h5&gt;

&lt;p&gt;É o template para criação de elementos. Fazendo um paralelo com a web atual, exemplos de components são &lt;em&gt;div&lt;/em&gt;, &lt;em&gt;button&lt;/em&gt;, &lt;em&gt;label&lt;/em&gt; entre outros.&lt;/p&gt;

&lt;h5 id=&#34;elements&#34;&gt;Elements&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;Element&lt;/em&gt; é a instância de um &lt;em&gt;component&lt;/em&gt;. Por exemplo quando inserimos um &lt;em&gt;button&lt;/em&gt; em uma página HTML, este elemento é a materialização/instância de um componente no DOM.&lt;/p&gt;

&lt;p&gt;Complicado?&lt;/p&gt;

&lt;p&gt;Vamos ver como funciona na prática:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;//cria elemento
var customDiv = React.createElement(&#39;div&#39;);

//renderiza elemento
ReactDOM.render(customDiv, document.getElementById(&#39;container&#39;));
&lt;/pre&gt;

&lt;p&gt;O código acima cria um &lt;em&gt;element&lt;/em&gt; baseado no &lt;em&gt;component&lt;/em&gt; &lt;code&gt;div&lt;/code&gt; e renderiza o mesmo no DOM.&lt;/p&gt;

&lt;p&gt;Legal! Mas usar diretamente o HTML não é mais eficiente?&lt;/p&gt;

&lt;p&gt;A resposta: normalmente não.&lt;/p&gt;

&lt;p&gt;E eis que lhes apresento o &lt;em&gt;Virtual DOM&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;virtual-dom&#34;&gt;Virtual DOM&lt;/h4&gt;

&lt;p&gt;Como todos sabem a manipulação de DOM além de não ser uma das coisas mais simples no mundo web, ainda tem um grande impacto na performance de nossas aplicações.&lt;/p&gt;

&lt;p&gt;E com isso em mente os engenheiros do facebook/instagram criaram o &lt;em&gt;virtual DOM&lt;/em&gt; que na prática é a representação do DOM em memória. Deste modo, todos os &lt;em&gt;elements&lt;/em&gt; que criamos utilizando React.createElement são criados e mantidos nesse ambiente virtual antes de serem renderizados no DOM original.&lt;/p&gt;

&lt;p&gt;A mágica acontece de verdade nas atualizações. Imagine o seguinte cenário: numa tela HTML temos um campo de texto do tipo numeric e um botão de adicionar. Toda vez que clicamos no botão adiciona em 1 o valor do campo de texto.&lt;/p&gt;

&lt;p&gt;Uma atividade super simples como adicionar um handler para o evento de click do botão e dentro do handler pegar o campo de texto através da api de DOM e somar 1 ao value do mesmo. Tudo lindo, mas tem alguns problemas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;adicionar e manter event handlers nos &lt;em&gt;elements&lt;/em&gt; do DOM consomem bastante memória.&lt;/li&gt;
&lt;li&gt;modificar o conteúdo da página gera reflow (nova renderização do _element_modificado e seus filhos).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Agora imagine tudo isso acontecendo em uma página com centenas ou talvez milhares de &lt;em&gt;elements&lt;/em&gt; no DOM. Não é uma experiência muito boa.&lt;/p&gt;

&lt;p&gt;Com o &lt;em&gt;virtual DOM&lt;/em&gt; esses problemas são minimizados com a técnica conhecida como &amp;#8220;o menos é mais&amp;#8221;, ou seja, toda vez que algo é alterado nos &lt;em&gt;elements&lt;/em&gt; que foram criados através do método React.createElement. O ReactJS renderiza esse conteúdo no &lt;em&gt;virtual DOM&lt;/em&gt; e através de um algoritmo super otimizado calcula a diferença entre o DOM atual e o DOM com as alterações e são essas diferenças que são renderizadas no DOM original. E desta forma causa o mínimo de impacto possível fazendo com que nossas páginas estejam sempre responsivas e rápidas para o usuário.&lt;/p&gt;

&lt;h4 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h4&gt;

&lt;p&gt;ReactJS é uma nova opção para criação de interfaces focada na simplidade de desenvolvimento e alta performance. Com baixo consumo de memória e um gerenciamento eficiente do DOM esta biblioteca vem ganhando o mundo.&lt;/p&gt;

&lt;p&gt;Por hoje é isso!&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado dessa introdução e até a próxima!&lt;/p&gt;

&lt;h5 id=&#34;links-de-referência&#34;&gt;Links de referência:&lt;/h5&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&#34; target=&#34;_blank&#34;&gt;DOM (Document Object Model)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://developers.google.com/speed/articles/reflow&#34; target=&#34;_blank&#34;&gt;Reflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://facebook.github.io/react/docs/getting-started.html&#34; target=&#34;_blank&#34;&gt;ReactJS&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Collections ES6 – parte 1</title>
      <link>http://tableless.com.br/collections-es6-parte-1/</link>
      <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/collections-es6-parte-1/</guid>
      <description>

&lt;p&gt;Fala Amigos!&lt;/p&gt;

&lt;p&gt;Dando continuidade a nossa série sobre as novidades do Javascript, vamos falar hoje sobre collections.&lt;/p&gt;

&lt;h4 id=&#34;sets-e-maps&#34;&gt;Sets e Maps&lt;/h4&gt;

&lt;p&gt;Historicamente a única collection que vinha por padrão no Javascript era o &lt;em&gt;Array&lt;/em&gt;. Mas a partir do ES6 temos novos tipos como: &lt;em&gt;Set&lt;/em&gt;, &lt;em&gt;WeakSet&lt;/em&gt;, &lt;em&gt;Map&lt;/em&gt; e &lt;em&gt;WeakMap&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;set&#34;&gt;Set&lt;/h4&gt;

&lt;p&gt;Para quem tem conhecimento em linguagens de programação como C#, Java, Ruby e Python esta collection não é uma novidade, mas para quem tem conhecimento somente em Javascript, sim. Sendo assim, segue a definição:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Set&lt;/em&gt; é um tipo de collection que permite a inserção de qualquer tipo de valor (Ex: objeto, function, número, string, etc) e não permite valores duplicados. Outra particularidade é que utilizando &lt;em&gt;Set&lt;/em&gt; não é possível acessar um valor diretamente como é feito com &lt;em&gt;Array&lt;/em&gt;, normalmente você valida para ver se o valor está presente ou itera sobre os valores.&lt;/p&gt;

&lt;p&gt;Um exemplo de uso para &lt;em&gt;Sets&lt;/em&gt; é uma lista de pedidos onde cada pedido do usuário deve ser único e ocasionalmente é necessário verificar se aquele pedido já esta incluso.&lt;/p&gt;

&lt;p&gt;Simples!? Vamos ver na prática a utilização do &lt;em&gt;Set&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        //inicialização de um Set
        var set = new Set(); //cria um novo Set vazio
        var set2 = new Set([1, 2, 3]); //cria um novo Set a partir de um Array

        set.add(1); //adiciona um valor

        //número de valores no set
        set.size; // 1
        set2.size; // 3

        //verifica se o valor existe dentro do Set
        set.has(1); // true

        set.add(1); //adiciona um valor duplicado e nada acontece

        set.size; // 1

        set.delete(1); //remove um determinado valor do Set

        set.has(1); // false
        set.size; // 0

        //itera sobre os valores do Set
        for (let valor of set2) {
          console.log(valor);
        }

        //itera sobre os valores do Set
        set2.forEach(function(valor) {
          console.log(valor); 
        });

        //output das iterações: 
        // 1
        // 2
        // 3

        set2.clear(); //remove todos os valores do Set
        set2.size; // 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;weakset&#34;&gt;WeakSet&lt;/h4&gt;

&lt;p&gt;É um _Set_ de objetos que não previne que seus elementos/valores sejam coletados pelo garbage collector do Javascript. Além disso a sua api também é reduzida. Deste modo, não é permitido iterar sobre os valores do &lt;em&gt;Set&lt;/em&gt; e/ou limpar os mesmos usando o método &lt;em&gt;clear&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Na prática, ao utilizar um objeto como valor do seu &lt;em&gt;WeakSet&lt;/em&gt; e o mesmo não estiver sendo usado em mais nenhum lugar na sua aplicação, o garbage collector poderá limpar a sua referência e com isso magicamente o valor deixaria de existir.&lt;/p&gt;

&lt;p&gt;A api do &lt;em&gt;WeakSet&lt;/em&gt; é composta de apenas 3 métodos quais funcionam da mesma forma que o &lt;em&gt;Set&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add(valor)&lt;/li&gt;
&lt;li&gt;has(valor)&lt;/li&gt;
&lt;li&gt;delete(valor)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No próximo post falaremos de &lt;em&gt;Map&lt;/em&gt; e &lt;em&gt;WeakMap.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iterators ES6</title>
      <link>http://tableless.com.br/iterators-es6/</link>
      <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/iterators-es6/</guid>
      <description>

&lt;p&gt;A partir de hoje iniciaremos uma série de posts falando sobre as novidades da nova versão do Javascript, conhecida como ES6 (EcmaScript 6). Que esta recheada de novidades e contemplando features muito legais como você verá na série.&lt;/p&gt;

&lt;p&gt;Como post de abertura vou falar hoje sobre iterators.&lt;/p&gt;

&lt;h3 id=&#34;o-que-são&#34;&gt;O que são?&lt;/h3&gt;

&lt;p&gt;Iterator é um objeto com uma determinada interface. E essa interface consiste de um método chamado &lt;em&gt;next()&lt;/em&gt; que retorna um objeto como resultado.&lt;/p&gt;

&lt;p&gt;Esse objeto de resultado, tem duas propriedades &lt;em&gt;value&lt;/em&gt; referente ao valor corrente e &lt;em&gt;done&lt;/em&gt; que é um valor booleano qual é setado para &lt;em&gt;true&lt;/em&gt; quando não existem mais valores para serem retornados.&lt;/p&gt;

&lt;p&gt;O iterator mantém uma referência à posição correta do próximo valor dentro da coleção de valores. Deste modo, toda vez que o método &lt;em&gt;next()&lt;/em&gt; é chamado ele retorna o valor correto. Caso o método &lt;em&gt;next()&lt;/em&gt; for chamado após o último valor ser retornado o iterator irá retornar o objeto de resultado com os seguintes valores: &lt;em&gt;done&lt;/em&gt; = &lt;em&gt;true&lt;/em&gt; e &lt;em&gt;value&lt;/em&gt; = &lt;em&gt;undefined&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;show-me-the-code&#34;&gt;Show me the code!&lt;/h4&gt;

&lt;p&gt;Com esse entendimento vamos ver na prática a implementação de um iterator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var criarIterator = function(items){
        var i = 0;

        return {
            next: function(){

                var done = (i&amp;gt;= items.length);
                var value = !done ? items[i++] : undefined;

                return {
                    done: done,
                    value: value
                };
            }
        }
    };

    var iterator = criarIterator([1, 2, 3]);

    console.log(iterator.next());  // &amp;quot;{ value: 1, done: false}&amp;quot;
    console.log(iterator.next());  // &amp;quot;{ value: 2, done: false}&amp;quot;
    console.log(iterator.next());  // &amp;quot;{ value: 3, done: false}&amp;quot;
    console.log(iterator.next());  // &amp;quot;{ value: undefined, done: true}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simples, neh!?&lt;/p&gt;

&lt;p&gt;Imagino que se você tenha conhecimentos em Java ou C# já tenha se perguntado, será? E a resposta é sim! Iterator em Javascript funciona de uma maneira bem semelhante ao iterator dessas linguagens.&lt;/p&gt;

&lt;h4 id=&#34;legal-mas-e-onde-eu-uso-isso&#34;&gt;Legal! Mas e onde eu uso isso?&lt;/h4&gt;

&lt;p&gt;Iterator é uma peça fundamental na nova forma de manipular coleções de dados no ES6. Sendo assim, todos os tipos de coleções (&lt;em&gt;Arrays&lt;/em&gt;, &lt;em&gt;Sets&lt;/em&gt;, &lt;em&gt;Maps&lt;/em&gt; e até mesmo &lt;em&gt;Strings&lt;/em&gt;) já vem com essa interface implementada. Liberando novas formas de interação com esses objetos.&lt;/p&gt;

&lt;p&gt;Além disso um bom entendimento sobre iterators irá te dar uma base sólida e te ajudar muito no entendimento de outras features do ES6. Assim como &lt;em&gt;collections&lt;/em&gt;, &lt;em&gt;for of&lt;/em&gt; e &lt;em&gt;generators&lt;/em&gt; que serão assuntos dos próximos posts da série.&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>