<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cosme Lopes on Tableless</title>
    <link>http://tableless.com.br/author/cosme-lopes/index.xml</link>
    <description>Recent content in Cosme Lopes on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/author/cosme-lopes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>O que é Node.js e saiba os primeiros passos</title>
      <link>http://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-node-js&#34;&gt;O que é Node.js?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nodejs.org/&#34; rel=&#34;noreferrer&#34;&gt;Node.js&lt;/a&gt; é uma plataforma para desenvolvimento de aplicações &lt;em&gt;server-side&lt;/em&gt; baseadas em rede utilizando &lt;strong&gt;JavaScript&lt;/strong&gt; e o &lt;strong&gt;V8 JavaScript Engine&lt;/strong&gt;, ou seja, com &lt;strong&gt;Node.js&lt;/strong&gt; podemos criar uma variedade de aplicações &lt;em&gt;Web&lt;/em&gt; utilizando apenas código em &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Em uma primeira análise essa informação pode não parecer tão interessante, uma vez que existem diversas outras maneiras em que esses tipos de serviços podem ser implementados. Mas se pensarmos um pouco mais sobre as demandas de aplicações na internet e o modo em que o código em &lt;strong&gt;JavaScript&lt;/strong&gt; pode ser estruturado, vamos nos deparar com uma gama de novas possibilidades para desenvolvimento &lt;em&gt;Web&lt;/em&gt;, e provavelmente nos juntar à crescente comunidade que tem adotado essa plataforma.&lt;/p&gt;

&lt;p&gt;Uma importante diferença está no fato do Node ser &lt;em&gt;single threaded&lt;/em&gt;. Embora isso possa parecer uma desvantagem em um primeiro momento, o que percebemos ao desenvolver com &lt;strong&gt;Node.js&lt;/strong&gt; é que isso simplifica extremamente a construção da aplicação, e por &lt;strong&gt;Node.js&lt;/strong&gt; utilizar uma abordagem não obstrutiva, essa diferença vai ser imperceptível na maioria dos casos.&lt;/p&gt;

&lt;h3 id=&#34;v8-javascript-engine&#34;&gt;V8 JavaScript Engine&lt;/h3&gt;

&lt;p&gt;É o interpretador de &lt;strong&gt;JavaScript&lt;/strong&gt; open source implementado pelo &lt;strong&gt;Google&lt;/strong&gt; em &lt;strong&gt;C++&lt;/strong&gt; e utilizado pelo &lt;strong&gt;Chrome&lt;/strong&gt;. O que sem dúvidas gera uma grande expectativa em relação ao desempenho do &lt;strong&gt;Node.js&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-node-js&#34;&gt;Instalando o Node.js&lt;/h2&gt;

&lt;p&gt;A instalação do &lt;strong&gt;Node.js&lt;/strong&gt; é extremamente simples graças ao fato de o &lt;strong&gt;V8 JavaScript Engine&lt;/strong&gt; ser completamente multi-plataforma, tudo que você precisa fazer é visitar a &lt;a href=&#34;http://www.nodejs.org/&#34; rel=&#34;noreferrer&#34;&gt;página oficial do Node.js&lt;/a&gt;, clicar em &amp;#8220;INSTALL&amp;#8221; e seguir as instruções.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;width: 100%&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/07/node_2.png&#34; alt=&#34;img node 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após a instalação, basta executar o seguinte comando no seu terminal para verificar se foi instalado corretamente:&lt;/p&gt;

&lt;pre class=&#34;lang-plain&#34;&gt;$ node -v
&amp;gt; v0.10.26
&lt;/pre&gt;

&lt;p&gt;deve retornar a versão do node que foi instalada, como por exemplo &lt;em&gt;v0.10.26&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-web-server-8216-olá-mundo&#34;&gt;O web server &amp;#8216;Olá mundo!’&lt;/h2&gt;

&lt;p&gt;Ok, então vamos construir alguma coisa.&lt;/p&gt;

&lt;p&gt;Nosso primeiro exemplo é um servidor que retorna a string &amp;#8216;Olá mundo&amp;#8217; para qualquer requisição. Para fazer isso utilizando Node você vai precisar de criar um arquivo &lt;strong&gt;JavaScript&lt;/strong&gt; que pode ser chamado &lt;em&gt;olanode.js&lt;/em&gt; e de três minutos do seu tempo.&lt;/p&gt;

&lt;p&gt;Escreva o seguinte código no seu arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var http = require(&#39;http&#39;);
http.createServer(function(req,res) {
  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain; charset=utf-8&#39; }); 
  res.end(&#39;Olá mundo!&#39;);
}).listen(3000);
console.log(&#39;Servidor iniciado em localhost:3000. Ctrl+C para encerrar…&#39;);
&lt;/pre&gt;

&lt;p&gt;Para executar o seu programa Node basta o seguinte comando no seu terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-plain&#34;&gt;$ node olanode.js
&lt;/pre&gt;

&lt;p&gt;Para testar seu servidor você pode acessar &lt;em&gt;localhost:3000&lt;/em&gt; no seu navegador ou utilizar linha de comando com o comando &lt;code&gt;curl&lt;/code&gt; (em uma nova instância do terminal) como mostrado a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-plain&#34;&gt;$ curl http://0.0.0.0:3000/
&amp;gt; Olá mundo!
&lt;/pre&gt;

&lt;p&gt;Caso você prefira retornar algum &lt;em&gt;html&lt;/em&gt; válido para o navegador, basta alterar &lt;code&gt;&#39;text/plain&#39;&lt;/code&gt; para &lt;code&gt;&#39;text/html&#39;&lt;/code&gt; no código acima e utilizar uma &lt;em&gt;tag html&lt;/em&gt; legal como &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, como foi feito a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var http = require(&#39;http&#39;);

http.createServer(function(req,res) { 
  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/html; charset=utf-8&#39; }); 
  res.end(&#39;&amp;lt;h2&amp;gt; Olá mundo! &amp;lt;/h2&amp;gt;&#39;);
}).listen(3000);

console.log(&#39;Servidor iniciado em localhost:3000. Ctrl+C para encerrar…’);
&lt;/pre&gt;

&lt;p&gt;&lt;img style=&#34;width: 100%&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/07/node_1.png&#34; alt=&#34;img node 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora basta voltar ao seu navegador e ver o resultado.&lt;/p&gt;

&lt;h2 id=&#34;orientado-a-eventos-e-não-obstrutivo&#34;&gt;Orientado a eventos e não obstrutivo&lt;/h2&gt;

&lt;h3 id=&#34;orientado-a-eventos&#34;&gt;Orientado a eventos&lt;/h3&gt;

&lt;p&gt;Vamos aproveitar este momento de euforia após a construção do seu primeiro servidor para aprender um pouco mais sobre &lt;strong&gt;Node.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quando estamos desenvolvendo com &lt;strong&gt;Node.js&lt;/strong&gt; devemos utilizar uma abordagem orientada a eventos, isso quer dizer que o desenvolvedor precisa conhecer os eventos que serão emitidos em diferentes momentos da execução e também saber como ouvi-los para executar as operações necessárias.&lt;/p&gt;

&lt;p&gt;Um bom exemplo de orientação a eventos está na construção de interfaces de usuário. Muitas vezes utilizamos elementos como por exemplo os botões que ao serem clicados emitem um evento do tipo &lt;em&gt;click&lt;/em&gt; ao qual podemos ouvir e executar alguma operação.&lt;/p&gt;

&lt;p&gt;No nosso exemplo anterior utilizamos esse conceito quando chamamos método &lt;code&gt;listen&lt;/code&gt; do objeto do tipo &lt;em&gt;web server&lt;/em&gt; e passamos como parâmetro a porta 3000, com isso fizemos que a nossa aplicação ouvisse ao evento que é emitido sempre que alguém faz uma requisição no &lt;code&gt;localhost:3000&lt;/code&gt; e a nossa resposta foi servir a string ou a página html. Este evento é chamado &lt;em&gt;request&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para ilustrar estes conceitos, podemos escrever o nosso exemplo anterior em uma sintaxe alternativa da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var http = require(&#39;http&#39;);

var server = http.createServer();

server.on(&#39;request&#39;, function(req,res) { 
  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/html; charset=utf-8&#39; }); 
  res.end(&#39;&amp;lt;h2&amp;gt; Olá mundo! &amp;lt;/h2&amp;gt;&#39;);
});

server.listen(3000);

console.log(&#39;Servidor iniciado em localhost:3000. Ctrl+C para encerrar…’);
&lt;/pre&gt;

&lt;p&gt;Dessa forma podemos ver claramente a maneira em que o &lt;strong&gt;Node.js&lt;/strong&gt; opera para servir a sua página. Utilizamos o método &lt;code&gt;on&lt;/code&gt; do nosso objeto &lt;em&gt;server&lt;/em&gt; para ouvir ao evento &lt;em&gt;request&lt;/em&gt; e fazer as operações. E definimos que estamos servindo na porta 3000.&lt;/p&gt;

&lt;h3 id=&#34;não-obstrutivo&#34;&gt;Não obstrutivo&lt;/h3&gt;

&lt;p&gt;Todos os recursos presentes no &lt;strong&gt;Node.js&lt;/strong&gt; e também a maioria das bibliotecas feitas para ele adotaram um padrão não obstrutivo de escrever código, isso quer dizer que em &lt;strong&gt;Node.js&lt;/strong&gt; você geralmente vai conseguir estruturar seu código de uma maneira que operações que não dependem de nada que está sendo executado possam ser executadas de forma independente.&lt;/p&gt;

&lt;p&gt;Para mostrar um pouco como isso funciona, vamos um programa que escreve duas frases no terminal, porém uma dessas frases precisa ser carregada da memória antes de ser impressa.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var frase;

carregaFrase = function (callback) {  
  setTimeout(function() {
    //Simula leitura da frase no banco de dados.
    frase = &#34;Minha frase obstrutiva&#34;;
    callback();
  }, 3000)
}

imprimeFrase = function () {
  console.log(frase);
}

carregaFrase(imprimeFrase);

console.log(“Olá&#34;);
&lt;/pre&gt;

&lt;p&gt;Nesse exemplo foi criada uma função chamada &lt;code&gt;carregaFrase&lt;/code&gt; cujo objetivo é ler uma determinada frase de uma fonte de dados, e uma outra função chamada &lt;code&gt;imprimeFrase&lt;/code&gt; que imprime o valor de uma determinada variável no console. Como dependemos da leitura da frase na fonte de dados para imprimir o valor, passamos a função que imprime como parâmetro para a função de leitura para que possamos executar essa função quando a leitura for concluída. Esse tipo de função que é passada como parâmetro dessa maneira é chamada de &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ao executar este exemplo com &lt;strong&gt;Node.js&lt;/strong&gt; ou qualquer mecanismo &lt;strong&gt;JavaScript&lt;/strong&gt; você vai perceber que a frase &amp;#8220;Olá&amp;#8221; será impressa antes da outra frase mesmo estando posicionada depois no código, isso se deve ao fato de sua execução não depender de nada enquanto a execução da outra frase depende de uma operação que leva 3 segundos.&lt;/p&gt;

&lt;p&gt;Este é um exemplo extremamente simples de como criar um código não obstrutivo, portanto use sua imaginação para imaginar cenários em que isso pode ser útil.&lt;/p&gt;

&lt;p&gt;Observe que no nosso primeiro exemplo com &lt;strong&gt;Node.js&lt;/strong&gt; tanto a função &lt;code&gt;on&lt;/code&gt; quanto a função &lt;code&gt;createServer&lt;/code&gt; podem receber uma função de &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Espero que este tutorial tenha sido o suficiente para provocar o seu interesse em aprender mais sobre &lt;strong&gt;Node.js&lt;/strong&gt;. Portanto visite a &lt;a href=&#34;http://nodejs.org/api/&#34; rel=&#34;noreferrer&#34;&gt;documentação do Node.js&lt;/a&gt; para obter mais informações e exemplos de aplicações dessa plataforma e também a página da &lt;a href=&#34;https://www.joyent.com&#34; rel=&#34;noreferrer&#34;&gt;Joyent&lt;/a&gt;, patrocinadora oficial do projeto.&lt;/p&gt;

&lt;p&gt;E finalmente, &lt;strong&gt;Node.js&lt;/strong&gt; é um projeto &lt;em&gt;open source&lt;/em&gt;, portanto você pode visualizar o código fonte e contribuir no &lt;a href=&#34;https://github.com/joyent/node&#34; rel=&#34;noreferrer&#34;&gt;repositório do Node.js no GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando um aplicativo simples de chat com Firebase</title>
      <link>http://tableless.com.br/criando-um-aplicativo-simples-de-chat-com-firebase/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-um-aplicativo-simples-de-chat-com-firebase/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.firebase.com/&#34;&gt;Firebase&lt;/a&gt; é uma plataforma para desenvolvimento de aplicativos baseados em armazenamento e sincronização de dados em tempo real utilizando apenas código &lt;em&gt;client-side&lt;/em&gt;. Utilizando o Firebase você será capaz de armazenar e sincronizar os dados da aplicação de uma maneira extremamente simples e direta, o que é extremamente conveniente quando pensamos em aplicações como chats e jogos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Firebase&lt;/strong&gt; oferece integração com várias plataformas como &lt;strong&gt;Angular&lt;/strong&gt;, &lt;strong&gt;Ember&lt;/strong&gt; e &lt;strong&gt;Node.js&lt;/strong&gt;, mas você pode simplesmente incluir a biblioteca javascript em uma página html simples e começar a desenvolver uma aplicação com transmissão de dados em tempo real.&lt;/p&gt;

&lt;h2 id=&#34;primeiros-passos&#34;&gt;Primeiros passos&lt;/h2&gt;

&lt;p&gt;Para iniciar uma aplicação web com Firebase partimos de uma página html simples e importamos a biblioteca JavaScript do &lt;strong&gt;Firebase&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;script src=‘https://cdn.firebase.com/js/client/1.0.17/firebase.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Antes de continuar com o tutorial, acesse a página do &lt;strong&gt;Firebase&lt;/strong&gt; e crie uma conta gratuita. Após acessar sua conta, escolha a opção de criar um novo aplicativo, e em seguida copie a &lt;em&gt;url&lt;/em&gt; do novo aplicativo. A &lt;em&gt;url&lt;/em&gt; tem o formato &lt;em&gt;seu-app.firebaseIO.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Em seguida insira dentro da tag &lt;code&gt;body&lt;/code&gt; uma tag &lt;code&gt;script&lt;/code&gt; e insira o código para criar uma referência à sua aplicação da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;script src=&#39;https://cdn.firebase.com/js/client/1.0.17/firebase.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script&amp;gt;
      var APP = new Firebase(&#39;https://seu-app.firebaseIO.com/&#39;);   
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Pronto, seu aplicativo já está conectado com o &lt;strong&gt;Firebase&lt;/strong&gt;, mas seu chat ainda não está pronto para ser o próximo sucesso da internet.&lt;/p&gt;

&lt;h2 id=&#34;enviando-uma-mensagem&#34;&gt;Enviando uma mensagem&lt;/h2&gt;

&lt;p&gt;Na sequência, para possibilitar que o usuário envie uma mensagem, vamos adicionar um campo para que seja escrita as mensagens e um para o nome do usuário e vamos enviar para o servidor sempre que o usuário pressionar enter. Para obter o conteúdo da mensagem assim como o evento do envio, vamos utilizar um pouco de &lt;a href=&#34;http://jquery.com/&#34; rel=&#34;noreferrer&#34;&gt;jQuery&lt;/a&gt;, portanto não esqueça de incluí-lo em sua página.&lt;/p&gt;

&lt;p&gt;Até agora temos a seguinte estrutura:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;script src=&#39;https://cdn.firebase.com/js/client/1.0.17/firebase.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&#39;https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;input type=&#34;text&#34; id=&#34;nomeusuario&#34; placeholder=&#34;Seu nome...&#34;&amp;gt;
  &amp;lt;input type=&#34;text&#34; id=&#34;mensagem&#34; placeholder=&#34;Sua mensagem...&#34;&amp;gt;
  &amp;lt;script&amp;gt;
    var APP = new Firebase(&#39;https://seu-app.firebaseIO.com/&#39;);
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Precisamos então capturar o evento do pressionar da tecla enter e em seguida chamar o método push da nossa referência à nossa aplicação &lt;strong&gt;Firebase&lt;/strong&gt; para enviar um objeto ao servidor contendo os dados da mensagem. Para fazer isso incluímos o seguinte código na página:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;#mensagem&#39;).keypress(function (e) {
  if (e.keyCode == 13) {

    var msg = $(&#39;#mensagem&#39;).val();
    var usr = $(&#39;#nomeusuario&#39;).val();
    APP.push({ nomeusuario: usr, mensagem: msg });

    $(&#39;#mensagem&#39;).val(&#39;&#39;);
  }
});
&lt;/pre&gt;

&lt;p&gt;Obtendo o seguinte resultado:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;script src=&#39;https://cdn.firebase.com/js/client/1.0.17/firebase.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&#39;https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;input type=&#34;text&#34; id=&#34;nomeusuario&#34; placeholder=&#34;Seu nome...&#34;&amp;gt;
  &amp;lt;input type=&#34;text&#34; id=&#34;mensagem&#34; placeholder=&#34;Sua mensagem...&#34;&amp;gt;
  &amp;lt;script&amp;gt;
    var APP = new Firebase(&#39;https://seu-app.firebaseIO.com/&#39;);

    $(&#39;#mensagem&#39;).keypress(function (e) {
      if (e.keyCode == 13) {

        var msg = $(&#39;#mensagem&#39;).val();
        var usr = $(&#39;#nomeusuario&#39;).val();
        APP.push({ nomeusuario: usr, mensagem: msg });

        $(&#39;#mensagem&#39;).val(&#39;&#39;);
      }
    });
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Com o que foi construído até agora, já conseguimos que as mensagens cheguem até o servidor. Para conferir este resultado basta acessar o &lt;em&gt;Dashboard&lt;/em&gt; da sua conta no &lt;strong&gt;Firebase&lt;/strong&gt; e selecionar seu app.&lt;/p&gt;

&lt;p&gt;Nessa página é possível ver uma representação gráfica da fila de objetos que está sendo criada quando você envia as mensagens, como na imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-43526&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/07/Captura-de-Tela-2014-07-16-às-00.52.241.png&#34; alt=&#34;Captura de Tela 2014-07-16 às 00.52.24&#34; srcset=&#34;uploads/2014/07/Captura-de-Tela-2014-07-16-às-00.52.241.png 1344w, uploads/2014/07/Captura-de-Tela-2014-07-16-às-00.52.241-198x139.png 198w, uploads/2014/07/Captura-de-Tela-2014-07-16-às-00.52.241-400x279.png 400w&#34; sizes=&#34;(max-width: 1344px) 100vw, 1344px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Entretanto, ainda precisamos mostrar essas mensagens para todos usuários conectados ao chat em seus navegadores.&lt;/p&gt;

&lt;h2 id=&#34;recebendo-as-mensagens&#34;&gt;Recebendo as mensagens&lt;/h2&gt;

&lt;p&gt;Garantir que todos usuários do seu chat recebam todas as mensagens é muito simples, basta ouvir ao evento &lt;code&gt;child_added&lt;/code&gt; da biblioteca do &lt;strong&gt;Firebase&lt;/strong&gt;. Este evento evento é disparado sempre que uma nova mensagem é enviada ao servidor e sua função de &lt;em&gt;callback&lt;/em&gt; recebe como parâmetro o objeto que contém as informações dessa mensagem. Escrevemos o seguinte código para tal operação:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;APP.on(&#39;child_added&#39;, function(snap) {
  var novamensagem = snap.val(); //Nova mensagem recebida.
});
&lt;/pre&gt;

&lt;p&gt;Em seguida criamos uma &lt;code&gt;div&lt;/code&gt; para carregar as mensagens na página e criamos uma função para adicionar as mensagens recebidas dentro dessa &lt;code&gt;div&lt;/code&gt;. Com o auxílio do &lt;strong&gt;jQuery&lt;/strong&gt; podemos escrever o seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function carregaMensagem(nome, mensagem) {
  $(&#39;&amp;lt;div/&amp;gt;&#39;).text(mensagem)
    .prepend($(&#39;&amp;lt;strong/&amp;gt;&#39;).text(nome + &#39;: &#39;))
    .appendTo($(&#39;#mensagens&#39;));

  $(&#39;#mensagens&#39;)[0].scrollTop = $(&#39;#mensagens&#39;)[0].scrollHeight;
};
&lt;/pre&gt;

&lt;p&gt;Agora podemos utilizar essa função para carregar a mensagem na página utilizando o &lt;em&gt;handler&lt;/em&gt; que criamos para o evento &lt;code&gt;child_added&lt;/code&gt; da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;APP.on(&#39;child_added&#39;, function(snap) {
  var novamensagem = snap.val(); //Nova mensagem recebida.
  carregaMensagem(novamensagem.nomeusuario, novamensagem.mensagem);
});
&lt;/pre&gt;

&lt;p&gt;Com isso, temos o seguinte resultado final:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;script src=&#39;https://cdn.firebase.com/js/client/1.0.17/firebase.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&#39;https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&#39;mensagens&#39;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;input type=&#34;text&#34; id=&#34;nomeusuario&#34; placeholder=&#34;Seu nome...&#34;&amp;gt;
  &amp;lt;input type=&#34;text&#34; id=&#34;mensagem&#34; placeholder=&#34;Sua mensagem...&#34;&amp;gt;
  &amp;lt;script&amp;gt;
    var APP = new Firebase(&#39;https://seu-app.firebaseIO.com/&#39;);

    $(&#39;#mensagem&#39;).keypress(function (e) {
      if (e.keyCode == 13) {

        var msg = $(&#39;#mensagem&#39;).val();
        var usr = $(&#39;#nomeusuario&#39;).val();
        APP.push({ nomeusuario: usr, mensagem: msg });

        $(&#39;#mensagem&#39;).val(&#39;&#39;);
      }
    });

    APP.on(&#39;child_added&#39;, function(snap) {
      var novamensagem = snap.val(); //Nova mensagem recebida.
      carregaMensagem(novamensagem.nomeusuario, novamensagem.mensagem);
    });

    function carregaMensagem(nome, mensagem) {
      $(&#39;&amp;lt;div/&amp;gt;&#39;).text(mensagem)
        .prepend($(&#39;&amp;lt;strong/&amp;gt;&#39;).text(nome + &#39;: &#39;))
        .appendTo($(&#39;#mensagens&#39;));

      $(&#39;#mensagens&#39;)[0].scrollTop = $(&#39;#mensagens&#39;)[0].scrollHeight;
    };
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;E é isso, seu chat está pronto!&lt;/p&gt;

&lt;p&gt;Caso não esteja funcionando como previsto, confira se seu app foi criado corretamente no &lt;strong&gt;Firebase&lt;/strong&gt; e sua &lt;em&gt;url&lt;/em&gt; foi inserida corretamente no seu código, e também se o &lt;strong&gt;jQuery&lt;/strong&gt; foi importado na sua página.&lt;/p&gt;

&lt;p&gt;Este é apenas um pequeno exemplo de aplicação do &lt;strong&gt;Firebase&lt;/strong&gt;, então não deixe de visitar a &lt;a href=&#34;https://www.firebase.com/docs/&#34; rel=&#34;noreferrer&#34;&gt;documentação&lt;/a&gt; para descobrir outros recursos e informações sobre essa plataforma, assim como outros exemplos de aplicações.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>