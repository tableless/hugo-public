<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Henrique Sosa on Tableless</title>
    <link>http://tableless.com.br/author/henrique-sosa/index.xml</link>
    <description>Recent content in Henrique Sosa on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/author/henrique-sosa/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introdução ao Redux</title>
      <link>http://tableless.com.br/bem-vindo-ao-redux/</link>
      <pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/bem-vindo-ao-redux/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://redux.js.org/docs/introduction/index.html&#34;&gt;Redux&lt;/a&gt;&lt;/strong&gt; é uma maneira de pensar o desenvolvimento de aplicações criada pelo &lt;a href=&#34;https://twitter.com/dan_abramov&#34; target=&#34;_blank&#34;&gt;@dan_abramov&lt;/a&gt; que teve como principio optimizar a ideia do &lt;a href=&#34;https://facebook.github.io/flux/&#34; target=&#34;_blank&#34;&gt;Flux&lt;/a&gt;. Ela foi criada para tentar optimizar alguns obstáculos que o Flux começou a enfrentar, e também veio para simplificar a implementação do mesmo. Inspirada em conceitos da linguagem funcional &lt;a href=&#34;http://elm-lang.org/&#34; target=&#34;_blank&#34;&gt;Elm&lt;/a&gt;, e de algumas bibliotecas JS como o &lt;a href=&#34;https://facebook.github.io/immutable-js/&#34; target=&#34;_blank&#34;&gt;Immutable.js&lt;/a&gt;,  o &lt;a href=&#34;https://github.com/Yomguithereal/baobab&#34; target=&#34;_blank&#34;&gt;Baobab&lt;/a&gt;, o  &lt;a href=&#34;https://github.com/Reactive-Extensions/RxJS&#34; target=&#34;_blank&#34;&gt;RxJs&lt;/a&gt; e o próprio Flux, o Redux veio com alguns paradigmas interessantes e um pouco diferenciados do Flux.&lt;/p&gt;

&lt;h2 id=&#34;triforce-do-redux&#34;&gt;Triforce do Redux&lt;/h2&gt;

&lt;p&gt;O Redux é composto de três princípios que formam e definem o seu conceito. Eles são:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Um único ponto de verdade&lt;/strong&gt; &amp;#8211; Todo o estado da aplicação é mantido em apenas um único objeto chamado de Store.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O estado é imutável&lt;/strong&gt; &amp;#8211; O estado da aplicação é inalterável, a unica maneira de afeta-lo é emitindo uma Action com a mudança.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mudanças são feitas apenas por funções puras&lt;/strong&gt; &amp;#8211; Reducers recebem as Actions emitidas e aplicam-nas ao estado. Sempre retornando um novo estado.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Agora com os princípios estabelecidos, vamos entender o que significa cada uma dessas parte da arquitetura.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-estado&#34;&gt;O que é Estado&lt;/h2&gt;

&lt;p&gt;Quando se trata de aplicações reativas, ouvimos muito falar do tal estado (ou &lt;strong&gt;state&lt;/strong&gt; em inglês), mas nem todo mundo consegue assimilar de fato o que ele representa na aplicação.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Estado&lt;/strong&gt; é ser considerado &lt;em&gt;o conjunto de dados mantidos no momento em que sua aplicação está rodando no lado do cliente&lt;/em&gt;. Qualquer atualização que envolva alteração desses dados, automaticamente essa mudança irá alterar o estado.&lt;/p&gt;

&lt;h2 id=&#34;views&#34;&gt;Views&lt;/h2&gt;

&lt;p&gt;Views são os arquivos finais mostrados para o usuário, na maior parte dos frameworks views são todos os arquivos HTML renderizados pelo Browser, no caso do React em especifico,  as views são consideradas componentes React, onde o contexto é renderizado através da função &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;actions&#34;&gt;Actions&lt;/h2&gt;

&lt;p&gt;Actions (ou ações) são objetos que servem para transmitir o que será enviado de sua view para sua store.&lt;/p&gt;

&lt;p&gt;Actions possuem obrigatoriamente uma propriedade &lt;strong&gt;type&lt;/strong&gt; que indica o tipo de ação que será executada,  e que por sua vez devem ser escritas sempre como constantes.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{
 type: &#39;ENVIAR_MENSAGEM&#39;,
 text: &#39;Olá Redux&#39;
}
&lt;/pre&gt;

&lt;p&gt;Neste caso estou criando uma action que será do tipo &lt;code&gt;ENVIAR_MENSAGEM e &lt;/code&gt;a propriedade &lt;strong&gt;text&lt;/strong&gt; é apenas um parâmetro que ela irá transmitir para a store.&lt;/p&gt;

&lt;h2 id=&#34;reducers&#34;&gt;Reducers&lt;/h2&gt;

&lt;p&gt;Actions descrevem de fato que algo aconteceu e o papel dos Reducers é transmitir o que aconteceu para alterar devidamente sua store&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;let initialState = {
  mensagem: &#39;Olá Mundo&#39;
}

function olaMundo(state = initialState, action) {
  switch (action.type) {
    case ENVIAR_MENSAGEM:
      return Object.assign({}, state, {
        mensagem: action.text
      })
    
    case APAGAR_MENSAGEM:
      return Object.assign({}, state, {
        mensagem: &#39;&#39;
      })
    
    default:
      return state
  }
}
&lt;/pre&gt;

&lt;p&gt;Vamos analisar o código acima:&lt;/p&gt;

&lt;p&gt;Primeiro gostaria de avisar que estou implementando usando ES2015, então sugiro para quem ainda não experimentou, de uma olhada &lt;a href=&#34;https://babeljs.io/docs/learn-es2015/&#34; target=&#34;_blank&#34;&gt;neste link&lt;/a&gt; que é uma referência bem bacana sobre o que mudou.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar eu declarei o estado inicial da aplicação com uma propriedade &lt;code&gt;mensagem&lt;/code&gt; e disse que seu valor é &lt;strong&gt;Olá Mundo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Criei uma função chamada de &lt;strong&gt;olaMundo&lt;/strong&gt; com dois parâmetros (state que já declarado como meu estado inicial e a action que foi emitida para acionar este reducer) e nela que está a mágica. Note que ela possui um &lt;code&gt;switch&lt;/code&gt; com duas condições, explicarei apenas a primeira, pois as duas basicamente tem o mesmo resultado.&lt;/p&gt;

&lt;p&gt;Quando a Ação &lt;code&gt;ENVIAR_MENSAGEM&lt;/code&gt; é emitida para este reducer, ele irá atribuir o valor que a action transmiti ao estado e a função &lt;code&gt;Object.Assign()&lt;/code&gt; será responsável por criar a cópia do estado e envia-lo à store.&lt;/p&gt;

&lt;h2 id=&#34;store&#34;&gt;Store&lt;/h2&gt;

&lt;p&gt;Além de manter o estado da aplicação como já falado antes. A Store também tem algumas outras responsabilidades, são Elas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Permitir a leitura do estado através do método &lt;code&gt;getState()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Permitir que o estado seja alterado pelos &lt;strong&gt;Reducers&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Registrar &lt;strong&gt;Listeners&lt;/strong&gt; para escutar o estado à partir do método &lt;code&gt;subscribe(listener)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Manipular os &lt;strong&gt;Listeners&lt;/strong&gt; registrados.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;migrando-para-o-redux&#34;&gt;Migrando Para o Redux&lt;/h2&gt;

&lt;p&gt;Como é dito na própria documentação oficial do Redux, ele nao é algo que te deixará preso e impossibilitado de mudar, mas claro, caso queira adota-lo, algumas tomadas de decisões terão de ser feitas.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Redux is not a monolithic framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O Redux também é uma maneira de se pensar, note que todos os passos que eu mostrei não são exclusivos do React, ou do Angular por exemplo, a biblioteca em si foi documentada usando o React, mas nada te impede de implementar a ideia em qualquer outro Framework como o Angular.&lt;/p&gt;

&lt;p&gt;E para quem usa o Backbone também existe uma lib citada pelo próprio Redux para você que queira fazer a migração.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Lembrando que o Redux não é de forma alguma um concorrente do Flux, ou das outras implementações do mesmo. E que esse post é apenas uma breve introdução ao assunto. Deixei alguns links interessantes nas referencias para quem possam começar ou continuar a estudar Redux.&lt;/p&gt;

&lt;h3 id=&#34;para-ler-mais&#34;&gt;Para ler mais&lt;/h3&gt;

&lt;p&gt;Um ótimo exemplo para entender mais sobre o que eu escrevi acima pode ser encontrado em &lt;a href=&#34;https://github.com/reactjs/redux/tree/master/examples/todomvc&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;A documentação completa pode ser vista através &lt;a href=&#34;http://redux.js.org/&#34; target=&#34;_blank&#34;&gt;deste link&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;E caso tenha lido o post sobre &lt;a href=&#34;http://tableless.com.br/introducao-ao-electron/&#34; target=&#34;_blank&#34;&gt;Electron.js&lt;/a&gt; e queira iniciar o desenvolvimento de aplicações Desktop usando React + Redux aqui esta o &lt;a href=&#34;https://github.com/henriquesosa/electron-intro&#34; target=&#34;_blank&#34;&gt;repositório&lt;/a&gt; que criei com uma breve introdução ao assunto.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/redbooth/backbone-redux&#34; target=&#34;_blank&#34;&gt;Migração do Backbone.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wbuchwalter/ng-redux&#34; target=&#34;_blank&#34;&gt;Migrando o Angular.js para Redux.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Electron</title>
      <link>http://tableless.com.br/introducao-ao-electron/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-ao-electron/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-o-electron&#34;&gt;O que é o Electron&lt;/h2&gt;

&lt;p&gt;O Electron foi desenvolvido para permitir que o desenvolvimento de aplicações &lt;em&gt;desktop&lt;/em&gt; usando JavaScript, HTML e CSS fosse muito mais fácil. Criado pela equipe do &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;, ficou conhecido no começo como Atom Shell. O Electron foi criado usando tecnologias como o &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; e o Chromium, e atualmente roda em ambiente de produção de vários projetos, como o próprio &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Atom editor&lt;/a&gt; e outros, como o &lt;a href=&#34;https://slack.com/&#34; target=&#34;_blank&#34;&gt;Slack&lt;/a&gt; e o &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Visual Studio Code&lt;/a&gt;. Ele é um &lt;em&gt;framework&lt;/em&gt; bem simples de trabalhar e de rápida configuração, para construção de pequenas e grandes aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para todos que queiram se aventurar mais, ou já conhecem o Electron, a documentação completa é traduzida para vários idiomas, inclusive o português. Para acessá-la é só &lt;a href=&#34;https://github.com/atom/electron/tree/master/docs-translations/pt-BR&#34; target=&#34;_blank&#34;&gt;clicar aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mãos-à-obra&#34;&gt;Mãos à obra&lt;/h2&gt;

&lt;p&gt;Nesta Introdução iremos abordar os primeiros passos para começar a trabalhar com o Electron e desenvolver aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Além do &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; presente em sua máquina, é necessário que você também instale globalmente o pacote &lt;code&gt;electron-prebuilt&lt;/code&gt;. Para isto, basta digitar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;language-bash&#34;&gt;npm install -g electron-prebuilt&lt;/pre&gt;

&lt;h3 id=&#34;entendendo-a-estrutura&#34;&gt;Entendendo a estrutura&lt;/h3&gt;

&lt;p&gt;A estrutura básica de arquivos que usaremos aqui é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;language-text&#34;&gt;electron-app/
├── app 
    ├── assets
        └── css
            └── main.css
    ├── main.js
    ├── index.html
    └── package.json
├── Gulpfile.js
└── package.json
&lt;/pre&gt;

&lt;p&gt;Vamos falar um pouco de cada arquivo e pasta inseridos no exemplo acima:&lt;/p&gt;

&lt;h4 id=&#34;app&#34;&gt;app&lt;/h4&gt;

&lt;p&gt;É  a pasta onde todos os arquivos referentes à aplicação são inseridos.&lt;/p&gt;

&lt;h4 id=&#34;main-js&#34;&gt;main.js&lt;/h4&gt;

&lt;p&gt;É o arquivo de inicialização da aplicação. Nele vão as configurações do tipo: tamanho da tela, posicionamento, manipular eventos do sistema, etc&amp;#8230;&lt;/p&gt;

&lt;h4 id=&#34;index-html&#34;&gt;index.html&lt;/h4&gt;

&lt;p&gt;É a pagina HTML que será nossa &lt;em&gt;view&lt;/em&gt; inicial para essa introdução.&lt;/p&gt;

&lt;h4 id=&#34;app-package-json&#34;&gt;app/package.json&lt;/h4&gt;

&lt;p&gt;O arquivo &lt;code&gt;package.json&lt;/code&gt; que vai dentro da pasta &lt;em&gt;app&lt;/em&gt; é o arquivo que leva todos as dependências que sua aplicação precisará para rodar. Sendo assim, qualquer pacote _npm_ a ser usado diretamente por sua aplicação deverá ser instalado nesse &lt;em&gt;package&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;gulpfile-js&#34;&gt;Gulpfile.js&lt;/h4&gt;

&lt;p&gt;Optei usar &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt; por escolha própria mesmo, mas fiquem livres para escolher seu &lt;em&gt;&amp;#8220;task runner&amp;#8221;&lt;/em&gt; favorito.&lt;/p&gt;

&lt;h4 id=&#34;package-json&#34;&gt;package.json&lt;/h4&gt;

&lt;p&gt;O &lt;code&gt;package.json&lt;/code&gt; que fica na raiz do seu projeto é responsável pelas configurações, dependências para seu ambiente de desenvolvimento. Tudo que for incluso neste arquivo não estará presente na &lt;em&gt;build&lt;/em&gt; de produção da sua &lt;em&gt;app&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;declarando-as-dependências&#34;&gt;Declarando as dependências&lt;/h3&gt;

&lt;p&gt;Após criar a estrutura de pastas que foi citada no tópico anterior. Iremos atribuir os mesmos valores para os atributos de ambos &lt;code&gt;package.json&lt;/code&gt; presentes no projeto. Levando em consideração que &lt;code&gt;&amp;quot;your-app&amp;quot;&lt;/code&gt; será o nome da sua aplicação.&lt;/p&gt;

&lt;pre class=&#34;language-json&#34;&gt;{
  &#34;name&#34;    : &#34;olamundo&#34;,
  &#34;version&#34; : &#34;0.1.0&#34;,
  &#34;main&#34;    : &#34;main.js&#34;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Caso o campo main não tenha sido preenchido, o Electron automaticamente procurará pelo arquivo &lt;code&gt;index.js&lt;/code&gt;. É importante que preencha este campo com o arquivo que usará na inicialização da aplicação.&lt;/p&gt;

&lt;p&gt;Após feito isso, instale as dependências que utilizaremos nesta introdução, no arquivo &lt;code&gt;package.json&lt;/code&gt; que se encontra diretamente na raiz do seu projeto.&lt;/p&gt;

&lt;pre class=&#34; language-bash&#34;&gt;npm install --save-dev electron-prebuilt fs-jetpack asar rcedit Q
&lt;/pre&gt;

&lt;h3 id=&#34;criando-seu-arquivo-de-inicialização&#34;&gt;Criando seu arquivo de inicialização&lt;/h3&gt;

&lt;p&gt;Depois de configurar as pastas e instalar as dependências da nossa aplicação, vamos abrir o nosso arquivo &lt;code&gt;main.js&lt;/code&gt; . Nele vamos incluir todo o código de configuração:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;var app = require(&#39;app&#39;);
var BrowserWindow = require(&#39;browser-window&#39;);

require(&#39;crash-reporter&#39;).start();

var mainWindow = null;

app.on(&#39;window-all-closed&#39;, function() {
  
  if (process.platform != &#39;darwin&#39;) {
    app.quit();
  }

});

app.on(&#39;ready&#39;, function() {
  
  mainWindow = new BrowserWindow({width: 800, height: 600});
  
  mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;);
  
  mainWindow.openDevTools();
  
  mainWindow.on(&#39;closed&#39;, function() {
    
    mainWindow = null;
  });
}); 
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: a Função &lt;em&gt;mainWindow.openDevTools&lt;/em&gt; é chamada apenas para iniciar o &lt;em&gt;Inspetor de Elementos&lt;/em&gt; junto com a aplicação. Caso não precisem, fiquem à vontade para removê-la do seu projeto.&lt;/p&gt;

&lt;h3 id=&#34;primeira-view&#34;&gt;Primeira &lt;em&gt;view&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Finalmente a parte mais fácil. Note que em nosso arquivo &lt;code&gt;main.js&lt;/code&gt; existe a seguinte função:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;); 
&lt;/pre&gt;

&lt;p&gt;Ela será responsável por carregar o arquivo &lt;code&gt;index.html&lt;/code&gt;. No exemplo a seguir, criei um exemplo bem simples de um arquivo HTML. Esta página que foi criada, tem os mesmos aspectos de uma janela aberta de um navegador. Ou seja, podemos carregar todos os arquivos CSS e JavaScript que utilizaremos normalmente. Veja:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
      &amp;lt;meta charset=&#34;utf-8&#34; /&amp;gt;
      &amp;lt;title&amp;gt;Olá Mundo&amp;lt;/title&amp;gt;
      &amp;lt;link href=&#34;assets/css/main.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;Olá Mundo&amp;lt;/h1&amp;gt;
      
      &amp;lt;p&amp;gt;Bem vindos à nossa introdução ao Electron&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
  
  &lt;h2 id=&#34;run-your-app&#34;&gt;
    Rodando sua aplicação
  &lt;/h2&gt;
  
  &lt;h3&gt;
    electron-prebuilt
  &lt;/h3&gt;
  
  &lt;p&gt;
    Se você instalou o &lt;code&gt;electron-prebuilt&lt;/code&gt; global, Acesse a pasta &lt;strong&gt;app&lt;/strong&gt; e rode o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;electron app&lt;/pre&gt;
  
  &lt;p&gt;
    Caso tenha instalado apenas localmente, então, na pasta &lt;strong&gt;app&lt;/strong&gt; de seu projeto, digite o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;&#34;../node_modules/.bin/electron&#34; &#34;./app&#34;&lt;/pre&gt;
  
  &lt;h3&gt;
    Automatizando
  &lt;/h3&gt;
  
  &lt;p&gt;
    Como citei anteriormente, usaremos o &lt;em&gt;Gulp&lt;/em&gt; para automatizar o &lt;em&gt;run&lt;/em&gt; da nossa aplicação, facilitando assim a criação de testes e o próprio desenvolvimento da aplicação. Para isso, deixaremos nosso &lt;code&gt;Gulpfile.js&lt;/code&gt; da seguinte maneira:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;),
  childProcess = require(&#39;child_process&#39;),
  electron = require(&#39;electron-prebuilt&#39;);
  
gulp.task(&#39;run&#39;, function () {
  childProcess.spawn(electron, [&#39;./app&#39;], { stdio: &#39;inherit&#39; });
});
&lt;/pre&gt;
  
  &lt;p&gt;
    Feito isso basta rodar o seguinte comando em seu terminal:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;gulp run&lt;/pre&gt;
  
  &lt;h2&gt;
    Criando uma distribuição
  &lt;/h2&gt;
  
  &lt;p&gt;
    Depois de terminado todo o processo de desenvolvimento, você pode criar uma distribuição do seu &lt;em&gt;app&lt;/em&gt; seguindo as instruções do &lt;a href=&#34;http://electron.atom.io/docs/v0.33.0/tutorial/application-distribution&#34; target=&#34;_blank&#34;&gt;Application Distribution guide&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Pronto! Você está pronto(a) para desenvolver aplicações Desktop com o Electron.
  &lt;/p&gt;
  
  &lt;p&gt;
    E caso queiram, o projeto está disponível no &lt;a href=&#34;https://github.com/henriquesosa/electron-intro&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>