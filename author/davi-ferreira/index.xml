<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Davi Ferreira on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/davi-ferreira/index.xml</link>
    <description>Recent content in Davi Ferreira on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/davi-ferreira/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>React: JavaScript reativo</title>
      <link>https://tableless.github.io/hugo-public/react-javascript-reativo/</link>
      <pubDate>Tue, 17 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/react-javascript-reativo/</guid>
      <description>

&lt;p&gt;Uma das palestras que chamou minha atenção na BrazilJS desse ano foi a de &lt;a href=&#34;http://www.phpied.com/files/react/slides.html&#34; target=&#34;_blank&#34;&gt;Stoyan Stefanov&lt;/a&gt;, autor do clássico &lt;a href=&#34;http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752&#34; target=&#34;_blank&#34;&gt;JavaScript Patterns&lt;/a&gt;. Stoyan mostrou a biblioteca &lt;a href=&#34;http://facebook.github.io/react/&#34; target=&#34;_blank&#34;&gt;React&lt;/a&gt;, desenvolvida pelo pessoal do Facebook/Instagram.&lt;/p&gt;

&lt;p&gt;Apesar de não ser um palestrante muito &lt;a href=&#34;https://twitter.com/davitferreira/status/371051778764468224&#34; target=&#34;_blank&#34;&gt;carismático&lt;/a&gt;, o código mostrado por Stoyan me deixou com a pulga atrás da orelha por possuir uma sintaxe para lá de esquisita e por fugir um pouco da abordagem mais conservadora adotada por bibliotecas e frameworks do mercado.&lt;/p&gt;

&lt;p&gt;Depois de experimentar em algumas aplicações rápidas, fiquei bem surpreso e satisfeito com o resultado do uso da React.&lt;/p&gt;

&lt;h2 id=&#34;javascript-declarativo&#34;&gt;JavaScript declarativo&lt;/h2&gt;

&lt;p&gt;A React pode ser comparada com o framework AngularJS, do Google, por ser declarativo, ou seja, por fazer você, desenvolvedor, focar mais no resultado do que na forma como ele é atingido. Na prática, isso quer dizer que você vai escrever pouco código JavaScript e obter uma aplicação funcional em muito pouco tempo.&lt;/p&gt;

&lt;p&gt;Outro grande diferencial da React é que ela trabalha com um pseudo-DOM em memória. Como vocês sabem (&lt;a href=&#34;http://tableless.com.br/jquery-dicas-de-otimizacao-e-performance/&#34; target=&#34;_blank&#34;&gt;ou deveriam saber&lt;/a&gt;), manipular o DOM é um dos principais causadores de gargalos de performance em sites e web apps e a React resolve isso de maneira brilhante trabalhando com um &amp;#8220;DOM&amp;#8221; próprio.&lt;/p&gt;

&lt;p&gt;Toda vez que um elemento precisa ser renderizado, a biblioteca identifica as atualizações comparando o elemento no DOM e na memória, modificando somente o que foi de fato alterado, sem precisar renderizar todo o elemento.&lt;/p&gt;

&lt;h2 id=&#34;javascript-reativo&#34;&gt;JavaScript reativo&lt;/h2&gt;

&lt;p&gt;Outro ponto forte da biblioteca React é a criação de componentes reutilizáveis. No mesmo BrazilJS o Zeno &lt;a href=&#34;https://speakerdeck.com/zenorocha/um-futuro-chamado-web-components&#34; target=&#34;_blank&#34;&gt;palestrou&lt;/a&gt; sobre Web Components. A ideia aqui é parecida e a React faz sua própria implementação.&lt;/p&gt;

&lt;p&gt;Todo componente React possui dois atributos principais: estado (state) e propriedades (props). Toda vez que o estado de um componente é alterado, ele é renderizado &amp;mdash; isto é JavaScript reativo. Além disso, ao renderizar novamente um componente, a React faz uma comparação entre o estado atual e o novo estado e renderiza apenas o que foi modificado, ou seja, não renderiza novamente todos os atributos e conteúdo do elemento no DOM.&lt;/p&gt;

&lt;h2 id=&#34;jsx&#34;&gt;JSX&lt;/h2&gt;

&lt;p&gt;Uma parte bem esquisita no primeiro contato com a biblioteca React é a utilização da sintaxe JSX, que transforma XML para JavaScript. Nos exemplos você verá markup HTML (sem ser string) no meio de código JavaScript.&lt;/p&gt;

&lt;p&gt;É importante dizer que o uso de JSX é opcional. Também é importante dizer que JSX pode ser utilizado com qualquer código JavaScript, não só React.&lt;/p&gt;

&lt;p&gt;Vejamos um exemplo simples:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// JSX:
var Site,
    tableless = &amp;lt;Site url=&#34;http://www.tableless.com.br&#34; nome=&#34;Tableless&#34; /&amp;gt;;&lt;/pre&gt;

&lt;p&gt;Tranformando em JavaScript, o resultado é o seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tableless = Site({url:&#34;http://www.tableless.com.br&#34;, nome:&#34;Tableless&#34;});&lt;/pre&gt;

&lt;p&gt;Notem que precisamos ter o objeto Site no escopo do JSX, mesmo ele não sendo utilizado. O XML é convertido para a chamada deste objeto onde os atributos da tag Site viram propriedades do objeto Site.&lt;/p&gt;

&lt;p&gt;O site da React oferece um compilador online de JSX caso você queira brincar e experimentar com a sintaxe: &lt;a href=&#34;http://facebook.github.io/react/jsx-compiler.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://facebook.github.io/react/jsx-compiler.html&#34;&gt;http://facebook.github.io/react/jsx-compiler.html&lt;/a&gt;&lt;/a&gt;. O conceito e a implementação do JSX são tão interessantes que valeriam um artigo próprio.&lt;/p&gt;

&lt;h2 id=&#34;aplicação-de-exemplo&#34;&gt;Aplicação de exemplo&lt;/h2&gt;

&lt;p&gt;Depois de muita teoria, chegou a hora de ver a React na prática. Para nossa aplicação, vou utilizar o mesmo exemplo que mostrei no &lt;a href=&#34;http://tableless.com.br/criando-uma-aplicacao-simples-com-angularjs/&#34; target=&#34;_blank&#34;&gt;artigo sobre AngularJS&lt;/a&gt;, até mesmo para servir como um comparativo entre o código dessas duas bibliotecas.&lt;/p&gt;

&lt;p&gt;Vamos começar com a estrutura inicial do nosso HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-xml&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Lista de compras com ReactJS&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id=&#34;container&#34; class=&#34;container&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&#34;text/javascript&#34; src=&#34;react.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script type=&#34;text/javascript&#34; src=&#34;JSXTransformer.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Pois é, isso é tudo que vamos escrever de HTML. Na verdade, ainda vamos escrever mais HTML, mas utilizando o formato JSX dentro do nosso código React.&lt;/p&gt;

&lt;p&gt;Vamos declarar nosso script com o tipo (&amp;#8220;text/jsx&amp;#8221;) e o comentário (obrigatório) que indicam que nosso código utiliza sintaxe JSX e que ele precisa ser compilado em tempo real pelo JSX Transformer.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script type=&#34;text/jsx&#34;&amp;gt;
/**
* @jsx React.DOM
*/
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;É claro que você não deve fazer isso em produção. A react oferece um set de ferramentas como um pacote npm que inclui um compilador de linha de comando para JSX. Para instalar, digite: &lt;strong&gt;npm install -g react-tools&lt;/strong&gt;. Feito isso, o comando &lt;strong&gt;jsx&lt;/strong&gt; estará disponível e ele pode ser utilizado para compilar e observar modificações em arquivos jsx. No nosso exemplo, para facilitar, vamos continuar utilizando JSX inline, compilado em tempo real. Mas, não façam isso em produção!&lt;/p&gt;

&lt;p&gt;Dando sequência, vamos criar nosso primeiro componente, o container da nossa lista de compras:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script type=&#34;text/jsx&#34;&amp;gt;
/**
* @jsx React.DOM
*/
var ShoppingBox = React.createClass({
    render: function () {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;Minha Lista de Compras&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
});

React.renderComponent(
    &amp;lt;ShoppingBox /&amp;gt;,
    document.getElementById(&#39;container&#39;)
);
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Estão vendo esse &lt;strong&gt;document.getElementById&lt;/strong&gt; aí em cima? Muito provavelmente essa é a única vez que você interage com o DOM diretamente em uma app React. Precisamos definir o elemento container da nossa app. O restante das operações será feita através do DOM em memória da React.&lt;/p&gt;

&lt;p&gt;Nosso primeiro componente não faz muita coisa, apenas adiciona o seu markup. Vamos agora adicionar dois novos componentes: a tabela que listará os produtos em nossa lista e o formulário para cadastrar um novo produto.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script type=&#34;text/jsx&#34;&amp;gt;
/**
* @jsx React.DOM
*/
var ShoppingBox = React.createClass({
    render: function () {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;Minha Lista de Compras&amp;lt;/h1&amp;gt;
                &amp;lt;ShoppingTable /&amp;gt;
                &amp;lt;ShoppingForm /&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
});

var ShoppingTable = React.createClass({
    render: function () {
        return (
            &amp;lt;table&amp;gt;
                &amp;lt;thead&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;th&amp;gt;Comprado?&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Produto&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Quantidade&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                &amp;lt;/thead&amp;gt;
                &amp;lt;tbody&amp;gt;
                &amp;lt;/tbody&amp;gt;
            &amp;lt;/table&amp;gt;
        );
    }
});

var ShoppingForm = React.createClass({
    render: function () {
        return (
            &amp;lt;form&amp;gt;
                &amp;lt;input type=&#34;text&#34; placeholder=&#34;Produto&#34; /&amp;gt;
                &amp;lt;input type=&#34;number&#34; placeholder=&#34;Quantidade&#34; /&amp;gt;
                &amp;lt;button type=&#34;submit&#34;&amp;gt;adicionar ítem&amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
        );
    }
});

React.renderComponent(
    &amp;lt;ShoppingBox /&amp;gt;,
    document.getElementById(&#39;container&#39;)
);
&lt;/pre&gt;

&lt;p&gt;Agora, além do container, estamos renderizando também a tabela e o form. Nosso último componente é um componente para o produto em si. Adicionem o código abaixo antes da chamada &lt;strong&gt;React.renderComponent&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;...
var Product = React.createClass({
    render: function () {
        return (
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&#34;checkbox&#34; /&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;Produto Teste&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        );
    }
});
...&lt;/pre&gt;

&lt;p&gt;Para o produto ser renderizado, precisamos adicionar o componente ao método render da tabela:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;...
var ShoppingTable = React.createClass({
    render: function () {
        return (
            &amp;lt;table&amp;gt;
                &amp;lt;thead&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;th&amp;gt;Comprado?&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Produto&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Quantidade&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                &amp;lt;/thead&amp;gt;
                &amp;lt;tbody&amp;gt;
                    &amp;lt;Product /&amp;gt;
                &amp;lt;/tbody&amp;gt;
            &amp;lt;/table&amp;gt;
        );
    }
});
&lt;/pre&gt;

&lt;p&gt;Hora de explicar algumas coisas. Por enquanto temos todos os nossos componentes renderizando HTML, sem nada dinâmico além dos próprios componentes. Os componentes são criados através do método &lt;strong&gt;React.createClass&lt;/strong&gt;, que recebe um objeto com os métodos do componente. O método &lt;strong&gt;render&lt;/strong&gt; é obrigatório em qualquer componente React e é responsável pela interface com o usuário.&lt;/p&gt;

&lt;p&gt;Um componente pode ser renderizado dentro do método render de um outro componente ou em um container no DOM utilizando o método &lt;strong&gt;React.renderComponent&lt;/strong&gt;, que recebe como parâmetro os componentes e o elemento no DOM que os receberá.&lt;/p&gt;

&lt;p&gt;Outra observação importante: um componente, para ser renderizado dentro de outro componente, precisa estar dentro de um elemento HTML válido. Por isso o nosso ShoppingBox possui um elemento &lt;div&gt; que contém os componentes ShoppingTable e ShoppingForm.&lt;/p&gt;

&lt;p&gt;Agora vamos começar a tornar nossa aplicação mais dinâmica, utilizando passos pequenos. O primeiro passo é o carregamento de alguns produtos. Vejamos o código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;...
var ShoppingTable = React.createClass({
    render: function () {
        return (
            &amp;lt;table&amp;gt;
                &amp;lt;thead&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;th&amp;gt;Comprado?&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Produto&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Quantidade&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                &amp;lt;/thead&amp;gt;
                &amp;lt;tbody&amp;gt;
                    &amp;lt;Product ammount={2} checked={false}&amp;gt;Leite
                    &amp;lt;Product ammount={4} checked={true}&amp;gt;Negresco
                &amp;lt;/tbody&amp;gt;
            &amp;lt;/table&amp;gt;
        );
    }
});
...&lt;/pre&gt;

&lt;p&gt;Na criação do componente da nossa tabela de produtos estamos passando dois produtos com seus respectivos atributos. A sintaxe do JSX permite que você passe dois tipos de valores para as propriedades: uma string (entre aspas) ou um valor JavaScript utilizando chaves. No exemplo acima estamos passando a quantidade como inteiro e o checked como booleano.&lt;/p&gt;

&lt;p&gt;Precisamos agora alterar o código do nosso componente de Produto para receber e renderizar os produtos passados no componente Tabela, retirando nosso produto de teste que estava fixo no código.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;...
var Product = React.createClass({
    getInitialState: function() {
        return {checked: this.props.checked || false};
    },
    toggle: function () {
        this.setState({checked: !this.state.checked});
    },
    render: function () {
        var checked = (this.state.checked ? &#39;checked&#39; : &#39;&#39;);
        return (
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&#34;checkbox&#34; checked={checked} onClick={this.toggle} /&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{this.props.children}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{this.props.ammount}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        );
    }
});
...&lt;/pre&gt;

&lt;p&gt;O método &lt;strong&gt;getInitialState&lt;/strong&gt; é padrão para qualquer componente React. Ele deve retornar o estado inicial de um componente, seus valores default. No caso do nosso componente produto, verificamos se ele vem marcado ou não.&lt;/p&gt;

&lt;p&gt;Implementamos também o método &lt;strong&gt;toggle&lt;/strong&gt;, que marca e desmarca um checkbox e que, em uma implementação final, deveria atualizar essa informação no servidor. Notem que o &lt;strong&gt;toggle&lt;/strong&gt; foi associado ao evento de clique do nosso checkbox na renderização do componente.&lt;/p&gt;

&lt;p&gt;No método &lt;strong&gt;render&lt;/strong&gt; acessamos aqueles dois atributos principais que citamos anteriormente: state e props. Primeiro verificamos se o produto está marcado ou não e depois definimos sua quantidade e seu nome. O atributo &lt;strong&gt;children&lt;/strong&gt; busca qualquer nó filho do elemento JSX que utilizamos, no nosso caso um simples nó de texto com o nome do produto. Entenderam a diferença entre props e state? O primeiro é tudo passado via parâmetro no objeto do componente e o segundo é o estado do objeto, uma propriedade já definida anteriormente.&lt;/p&gt;

&lt;p&gt;E se quiséssemos buscar nossos produtos iniciais de uma consulta ao servidor, em uma API que nos retornaria um objeto JSON com os produtos? Isso também é trivial com React. Vamos alterar nosso código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;...
var PRODUCTS = [
    {ammount: 2, checked: false, name: &#34;Leite&#34;},
    {ammount: 4, checked: true, name: &#34;Negresco&#34;}
];
...
var ShoppingBox = React.createClass({
    render: function () {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;Minha Lista de Compras&amp;lt;/h1&amp;gt;
                &amp;lt;ShoppingTable data={this.props.data} /&amp;gt;
                &amp;lt;ShoppingForm /&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
});
...
var ShoppingTable = React.createClass({
    render: function () {
        var productNodes = this.props.data.map(function (product) {
            return &amp;lt;Product ammount={product.ammount} checked={product.checked}&amp;gt;{product.name}&amp;lt;/Product&amp;gt;;
        });
        return (
            &amp;lt;table&amp;gt;
                &amp;lt;thead&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;th&amp;gt;Comprado?&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Produto&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Quantidade&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                &amp;lt;/thead&amp;gt;
                &amp;lt;tbody&amp;gt;
                    {productNodes}
                &amp;lt;/tbody&amp;gt;
            &amp;lt;/table&amp;gt;
        );
    }
});
...
React.renderComponent(
    &amp;lt;ShoppingBox data={PRODUCTS} /&amp;gt;,
    document.getElementById(&#39;container&#39;)
);
...&lt;/pre&gt;

&lt;p&gt;Nessa nova rodada de código, alteramos o componente &lt;strong&gt;ShoppingBox&lt;/strong&gt; para receber um atributo data com o JSON dos produtos. Esse JSON é passado quando renderizamos o componente principal. Além disso, alteramos o método &lt;strong&gt;render&lt;/strong&gt; da tabela de produtos para criar cada componente produto encontrado no objeto JSON, resultando na variável local &lt;strong&gt;productNodes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora, para finalizar, vamos implementar nosso formulário.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;...
var ShoppingBox = React.createClass({
    handleProductSubmit: function(product) {
        var products = this.state.data;
        products.push(product);
        this.setState({data: products});
    },
    getInitialState: function() {
        return {data: []};
    },
    render: function () {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;Minha Lista de Compras&amp;lt;/h1&amp;gt;
                &amp;lt;ShoppingTable data={this.state.data} /&amp;gt;
                &amp;lt;ShoppingForm onProductSubmit={this.handleProductSubmit} /&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
});
...
var ShoppingForm = React.createClass({
    handleSubmit: function() {
        var name = this.refs.name.getDOMNode().value.trim(),
            ammount = this.refs.ammount.getDOMNode().value.trim() || 1;
        if (!name) {
            return false;
        }
        this.props.onProductSubmit({name: name, ammount: ammount});
        this.refs.name.getDOMNode().value = &#39;&#39;;
        this.refs.ammount.getDOMNode().value = &#39;&#39;;
        return false;
    },
    render: function () {
        return (
            &amp;lt;form class=&#34;form-inline&#34; role=&#34;form&#34; onSubmit={this.handleSubmit}&amp;gt;
                &amp;lt;div class=&#34;form-group&#34;&amp;gt;
                    &amp;lt;input type=&#34;text&#34; placeholder=&#34;Produto&#34; ref=&#34;name&#34; class=&#34;form-control&#34; /&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&#34;form-group&#34;&amp;gt;
                    &amp;lt;input type=&#34;number&#34; placeholder=&#34;Quantidade&#34; ref=&#34;ammount&#34; class=&#34;form-control&#34; /&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;button type=&#34;submit&#34; class=&#34;btn btn-primary&#34;&amp;gt;adicionar ítem&amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
        );
    }
});
...&lt;/pre&gt;

&lt;p&gt;O processo de envio é tratado em dois componentes diferentes. O componente do formulário trata o envio do próprio form, ativando o evento &lt;strong&gt;ProductSubmit&lt;/strong&gt;. O tratamento deste evento, por sua vez, fica a cargo do elemento &lt;strong&gt;ShoppingBox&lt;/strong&gt;, o container da nossa lista, responsável por atualizar seu estado e renderizar novamente nossa lista. Faz sentido, certo? Cada componente possui uma responsabilidade bem definida.&lt;/p&gt;

&lt;p&gt;Para quem quiser conferir nosso exemplo funcionando: &lt;a href=&#34;http://tableless.github.io/exemplos/react/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tableless.github.io/exemplos/react/&#34;&gt;http://tableless.github.io/exemplos/react/&lt;/a&gt;&lt;/a&gt; (código fonte: &lt;a href=&#34;https://github.com/tableless/exemplos/tree/gh-pages/react&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/tableless/exemplos/tree/gh-pages/react&#34;&gt;https://github.com/tableless/exemplos/tree/gh-pages/react&lt;/a&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;considerações-finais&#34;&gt;Considerações finais&lt;/h2&gt;

&lt;p&gt;Apesar de ser uma biblioteca relativamente nova, a React já é utilizada em produção por Facebook e Instagram. Problemas como semântica e SEO, comuns a esse tipo de framework, continuam presentes. No entanto, se você vai desenvolver uma aplicação web, onde não temos esse tipo de preocupação, a React é uma ótima aposta como ferramenta.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript: entendendo o this</title>
      <link>https://tableless.github.io/hugo-public/javascript-entendendo-o-this/</link>
      <pubDate>Thu, 25 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/javascript-entendendo-o-this/</guid>
      <description>

&lt;p&gt;O operador &lt;strong&gt;this&lt;/strong&gt; é um dos maiores responsáveis por erros e pegadinhas em um código JavaScript. Entender o seu mecanismo de funcionamento e criação é um grande passo para tirar maior proveito da linguagem.&lt;/p&gt;

&lt;h2 id=&#34;contexto-de-execução&#34;&gt;Contexto de execução&lt;/h2&gt;

&lt;p&gt;Toda função JavaScript, ao ser executada, gera uma associação do objeto criado pelo interpretador através da palavra reservada &lt;strong&gt;this&lt;/strong&gt;. A especificação da ECMAScript chama isso de &lt;strong&gt;ThisBinding&lt;/strong&gt;, um evento que acontece toda vez que um código JavaScript é executado e um novo contexto de execução é estabelecido. O valor do &lt;strong&gt;this&lt;/strong&gt; é constante e ele existe enquanto este contexto de execução existir.&lt;/p&gt;

&lt;p&gt;No browser, o &lt;strong&gt;this&lt;/strong&gt; &amp;#8220;padrão&amp;#8221; referencia o objeto global &lt;strong&gt;window&lt;/strong&gt;. Toda função declarada no escopo global também vai possuir o objeto &lt;strong&gt;window&lt;/strong&gt; como valor do &lt;strong&gt;this&lt;/strong&gt; (no &lt;a href=&#34;http://loopinfinito.com.br/2013/07/16/javascript-strict-mode/&#34; title=&#34;http://loopinfinito.com.br/2013/07/16/javascript-strict-mode/&#34; target=&#34;_blank&#34;&gt;strict mode&lt;/a&gt; vai ser &lt;strong&gt;undefined&lt;/strong&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function myFunc () {
     console.log(this);   
}

var myFunc2 = function () {
     console.log(this);   
}

myFunc(); // Window (...)
myFunc2();  // Window (...)&lt;/pre&gt;

&lt;h2 id=&#34;objetos&#34;&gt;Objetos&lt;/h2&gt;

&lt;p&gt;Quando uma função representa um método de um objeto, o valor do &lt;strong&gt;this&lt;/strong&gt; passa a ser o objeto referenciado. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var myObj = {
    init: function () {
        console.log(this);   
    }
};

myObj.init(); // Object {init: function}&lt;/pre&gt;

&lt;p&gt;O mesmo acontece quando um objeto é criado utilizando uma &lt;a href=&#34;http://tableless.com.br/javascript-objetos-literais-vs-funcoes-construtoras/&#34; title=&#34;http://tableless.com.br/javascript-objetos-literais-vs-funcoes-construtoras/&#34; target=&#34;_blank&#34;&gt;função construtora&lt;/a&gt;, só que nesse caso o &lt;strong&gt;this&lt;/strong&gt; representa o objeto instanciado.&lt;/p&gt;

&lt;pre&gt;function MyObj () {
    console.log(this);   
}

var obj = new MyObj(); // MyObj {}&lt;/pre&gt;

&lt;h2 id=&#34;callbacks-eventos&#34;&gt;Callbacks &amp;amp; Eventos&lt;/h2&gt;

&lt;p&gt;Um dos erros mais comuns acontece quando utilizamos a palavra reservada &lt;strong&gt;this&lt;/strong&gt; dentro de um &lt;em&gt;callback&lt;/em&gt; e confundimos seu valor. O &lt;strong&gt;this&lt;/strong&gt; dentro do &lt;em&gt;callback&lt;/em&gt; vai guardar o valor do objeto pai da função &lt;em&gt;callback&lt;/em&gt; e não da função que recebe o &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var myObj = {
    init: function (callback) {
        callback(); 
    }
};

myObj.init(function () {
    console.log(this); // Window (...)  
});&lt;/pre&gt;

&lt;p&gt;Para esses casos especiais, podemos definir o valor do &lt;strong&gt;this&lt;/strong&gt; utilizando os métodos &lt;strong&gt;call&lt;/strong&gt; e &lt;strong&gt;apply&lt;/strong&gt; (falo mais sobre eles logo, logo).&lt;/p&gt;

&lt;p&gt;Outro ponto que merece atenção é o uso do &lt;strong&gt;this&lt;/strong&gt; na hora de anexar eventos a um elemento. Nesse caso, o valor da palavra reservada representa o elemento e não a função.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var myObj = {
    init: function () {
        this.link = document.querySelector(&#39;a&#39;);
        this.link.onclick = function (e) {
            console.log(this);   
        };
    }
};

myObj.init();
// clique no link: &amp;lt;a href=&#34;#&#34;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;Aqui a solução é armazenar o estado do objeto em uma variável, normalmente chamada de &lt;strong&gt;that&lt;/strong&gt; ou &lt;strong&gt;self&lt;/strong&gt; e utilizá-la na função do evento.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var myObj = {
    init: function () {
        var that = this;
        this.link = document.querySelector(&#39;a&#39;);
        this.link.onclick = function (e) {
            console.log(that);   
        };
    }
};

myObj.init();
// clique no link: Object {init: function, link: a}&lt;/pre&gt;

&lt;h2 id=&#34;call-apply&#34;&gt;call &amp;amp; apply&lt;/h2&gt;

&lt;p&gt;Os métodos &lt;strong&gt;call&lt;/strong&gt; e &lt;strong&gt;apply&lt;/strong&gt; permitem que seja definido um valor para o &lt;strong&gt;this&lt;/strong&gt; de uma função. Vejamos o nosso exemplo de &lt;em&gt;callback&lt;/em&gt;, agora utilizando uma chamada com o método &lt;strong&gt;call&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var myObj = {
    init: function (callback) {
        callback.call(this); 
    }
};

myObj.init(function () {
    console.log(this); // Object {init: function}
});&lt;/pre&gt;

&lt;p&gt;Notem que o valor retornado pelo log do console agora foi o próprio objeto ao invés do objeto global &lt;strong&gt;window&lt;/strong&gt;. Isto porque executamos o &lt;em&gt;callback&lt;/em&gt; através do método &lt;strong&gt;call&lt;/strong&gt;, definindo o valor do &lt;strong&gt;this&lt;/strong&gt; no contexto de execução como sendo o &lt;strong&gt;this&lt;/strong&gt; do objeto.&lt;/p&gt;

&lt;p&gt;Sobre os métodos &lt;strong&gt;call&lt;/strong&gt; e &lt;strong&gt;apply&lt;/strong&gt;, a principal diferença entre eles é que um permite a passagem de argumentos utilizando um &lt;em&gt;array&lt;/em&gt; enquanto o outro aceita os argumentos como &lt;em&gt;strings&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;fun.apply(thisArg[, argsArray])

fun.call(thisArg[, arg1[, arg2[, ...]]])&lt;/pre&gt;

&lt;h2 id=&#34;referências&#34;&gt;Referências&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&#34; target=&#34;_blank&#34;&gt;MDN &amp;#8211; this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&#34; target=&#34;_blank&#34;&gt;MDN &amp;#8211; apply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&#34; target=&#34;_blank&#34;&gt;MDN &amp;#8211; call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.digital-web.com/articles/scope_in_javascript/&#34; target=&#34;_blank&#34;&gt;Scope in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>O melhor do Codrops</title>
      <link>https://tableless.github.io/hugo-public/o-melhor-do-codrops/</link>
      <pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-melhor-do-codrops/</guid>
      <description>

&lt;p&gt;Talvez você não reconheça o nome, mas muito provavelmente já clicou em algum link do &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/&#34;&gt;Codrops&lt;/a&gt;, blog sobre desenvolvimento web mantido por Manoela Ilic e Pedro Botelho, com grande foco em &lt;em&gt;interaction design&lt;/em&gt; e UX.&lt;/p&gt;

&lt;p&gt;Neste artigo compilei os 10 melhores posts de experimentos de interfaces publicados no Codrops. Independente desta seleção, recomendo muito que você perca algumas horas lendo os artigos e conferindo todas as demos do site.&lt;/p&gt;

&lt;p&gt;Os experimentos contemplam efeitos de hover em imagens, modais, botões, galerias e formulários. Façam bom proveito!&lt;/p&gt;

&lt;h2 id=&#34;bookblock&#34;&gt;BookBlock&lt;/h2&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2012/09/03/bookblock-a-content-flip-plugin/&#34;&gt;artigo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Development/BookBlock/&#34;&gt;demo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/codrops/BookBlock&#34;&gt;código-fonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/bookblock.jpg&#34; alt=&#34;bookblock&#34; width=&#34;580&#34; height=&#34;315&#34; class=&#34;alignnone size-full wp-image-37957&#34; srcset=&#34;uploads/2013/07/bookblock.jpg 580w, uploads/2013/07/bookblock-309x168.jpg 309w, uploads/2013/07/bookblock-570x310.jpg 570w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;BookBlock é um plugin jQuery que habilita uma navegação estilo livro em qualquer tipo de conteúdo. O link de demonstração inclui diversos exemplos, desde uma simples galeria de fotos até uma navegação &lt;em&gt;fullscreen&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;stack-slider&#34;&gt;Stack Slider&lt;/h2&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2012/12/03/stackslider-a-fun-3d-image-slider/&#34;&gt;artigo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Development/StackSlider/&#34;&gt;demo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/codrops/StackSlider&#34;&gt;código-fonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/StackSlider.jpg&#34; alt=&#34;StackSlider&#34; width=&#34;580&#34; height=&#34;315&#34; class=&#34;alignnone size-full wp-image-37965&#34; srcset=&#34;uploads/2013/07/StackSlider.jpg 580w, uploads/2013/07/StackSlider-309x168.jpg 309w, uploads/2013/07/StackSlider-570x310.jpg 570w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Segundo o seu criador, este é um plugin altamente experimental que brinca com CSS3 transforms e efeitos de perspectiva. O resultado final é algo bem diferente do que estamos acostumados a ver em galerias de imagens. O plugin ainda implementa um &lt;em&gt;flow&lt;/em&gt; contínuo bem bacana.&lt;/p&gt;

&lt;h2 id=&#34;stapel&#34;&gt;Stapel&lt;/h2&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2012/11/21/adaptive-thumbnail-pile-effect-with-automatic-grouping/&#34;&gt;artigo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Development/Stapel/&#34;&gt;demo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/codrops/Stapel&#34;&gt;código-fonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/ThumbnailPileEffect.jpg&#34; alt=&#34;ThumbnailPileEffect&#34; width=&#34;580&#34; height=&#34;315&#34; class=&#34;alignnone size-full wp-image-37966&#34; srcset=&#34;uploads/2013/07/ThumbnailPileEffect.jpg 580w, uploads/2013/07/ThumbnailPileEffect-309x168.jpg 309w, uploads/2013/07/ThumbnailPileEffect-570x310.jpg 570w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Outro efeito legal para galerias desenvolvido pelo pessoal do Codrops é o plugin jQuery Staple, que agrupa e empilha diferentes fotos e, além disso, se auto-ajusta no tamanho do viewport.&lt;/p&gt;

&lt;h2 id=&#34;page-transitions&#34;&gt;Page Transitions&lt;/h2&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2013/05/07/a-collection-of-page-transitions/&#34;&gt;artigo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Development/PageTransitions/&#34;&gt;demo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/codrops/PageTransitions&#34;&gt;código-fonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/PageTransitions.jpg&#34; alt=&#34;PageTransitions&#34; width=&#34;580&#34; height=&#34;315&#34; class=&#34;alignnone size-full wp-image-37963&#34; srcset=&#34;uploads/2013/07/PageTransitions.jpg 580w, uploads/2013/07/PageTransitions-309x168.jpg 309w, uploads/2013/07/PageTransitions-570x310.jpg 570w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Neste artigo, o autor apresenta uma séria de transições de páginas utilizando apenas CSS, sem JavaScript. Os exemplos incluem desde técnicas simples de &lt;em&gt;sliding&lt;/em&gt; até transições 3D.&lt;/p&gt;

&lt;h2 id=&#34;modal-window-effects&#34;&gt;Modal Window Effects&lt;/h2&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2013/06/25/nifty-modal-window-effects/&#34;&gt;artigo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Development/ModalWindowEffects/&#34;&gt;demo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Development/ModalWindowEffects/ModalWindowEffects.zip&#34;&gt;código-fonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/ModalWindowEffects.png&#34; alt=&#34;ModalWindowEffects&#34; width=&#34;580&#34; height=&#34;315&#34; class=&#34;alignnone size-full wp-image-37961&#34; srcset=&#34;uploads/2013/07/ModalWindowEffects.png 580w, uploads/2013/07/ModalWindowEffects-309x168.png 309w, uploads/2013/07/ModalWindowEffects-570x310.png 570w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Este experimento, publicado recentemente, é um dos meus favoritos. O artigo mostra 19 exemplos de janelas modais, com efeitos bem diferentes e fluidos.&lt;/p&gt;

&lt;h2 id=&#34;caption-hover-effects&#34;&gt;Caption Hover Effects&lt;/h2&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2013/06/18/caption-hover-effects/&#34;&gt;artigo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Tutorials/CaptionHoverEffects/&#34;&gt;demo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Tutorials/CaptionHoverEffects/CaptionHoverEffects.zip&#34;&gt;código-fonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/CaptionHoverEffect.png&#34; alt=&#34;CaptionHoverEffect&#34; width=&#34;580&#34; height=&#34;315&#34; class=&#34;alignnone size-full wp-image-37958&#34; srcset=&#34;uploads/2013/07/CaptionHoverEffect.png 580w, uploads/2013/07/CaptionHoverEffect-309x168.png 309w, uploads/2013/07/CaptionHoverEffect-570x310.png 570w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O que me impressiona nas demos do Codrops é que elas são extremamente simples e, mesmo assim, impactantes. Com esses efeitos de hover em imagens não é diferente. Mais uma vez, sem nenhum JavaScript, o Codrops vai fazer o seu queixo cair com algumas linhas de CSS e muita criatividade.&lt;/p&gt;

&lt;h2 id=&#34;icon-hover-effects&#34;&gt;Icon Hover Effects&lt;/h2&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2013/05/30/simple-icon-hover-effects/&#34;&gt;artigo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Development/IconHoverEffects/&#34;&gt;demo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Development/IconHoverEffects/IconHoverEffects.zip&#34;&gt;código-fonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/IconHoverEffects1.png&#34; alt=&#34;IconHoverEffects1&#34; width=&#34;580&#34; height=&#34;315&#34; class=&#34;alignnone size-full wp-image-37960&#34; srcset=&#34;uploads/2013/07/IconHoverEffects1.png 580w, uploads/2013/07/IconHoverEffects1-309x168.png 309w, uploads/2013/07/IconHoverEffects1-570x310.png 570w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;De imagens para ícones e mais uma vez utilizando apenas CSS, este experimento mostra efeitos suaves e fluidos para o &lt;em&gt;mouseover&lt;/em&gt; em botões circulares.&lt;/p&gt;

&lt;h2 id=&#34;natural-language-form&#34;&gt;Natural Language Form&lt;/h2&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2013/05/21/natural-language-form-with-custom-input-elements/&#34;&gt;artigo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Tutorials/NaturalLanguageForm/&#34;&gt;demo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Tutorials/NaturalLanguageForm/NaturalLanguageForm.zip&#34;&gt;código-fonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/NaturalLanguageForm2.png&#34; alt=&#34;NaturalLanguageForm2&#34; width=&#34;580&#34; height=&#34;315&#34; class=&#34;alignnone size-full wp-image-37962&#34; srcset=&#34;uploads/2013/07/NaturalLanguageForm2.png 580w, uploads/2013/07/NaturalLanguageForm2-309x168.png 309w, uploads/2013/07/NaturalLanguageForm2-570x310.png 570w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mais um dos meus favoritos, este tutorial mostra um protótipo interessantíssimo para formulários web utilizando o conceito e &lt;a target=&#34;_blank&#34; href=&#34;http://en.wikipedia.org/wiki/Natural_language_user_interface&#34;&gt;Natural Language User Interface&lt;/a&gt;. No exemplo, os formulários estão “escondidos” no texto e o objetivo final é que tudo fique muito transparente para o usuário.&lt;/p&gt;

&lt;h2 id=&#34;simple-drop-down-effects&#34;&gt;Simple Drop Down Effects&lt;/h2&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2012/11/29/simple-effects-for-drop-down-lists/&#34;&gt;artigo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Development/SimpleDropDownEffects/&#34;&gt;demo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/codrops/SimpleDropDownEffects&#34;&gt;código-fonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/SimpleDropDownEffects.jpg&#34; alt=&#34;SimpleDropDownEffects&#34; width=&#34;580&#34; height=&#34;315&#34; class=&#34;alignnone size-full wp-image-37964&#34; srcset=&#34;uploads/2013/07/SimpleDropDownEffects.jpg 580w, uploads/2013/07/SimpleDropDownEffects-309x168.jpg 309w, uploads/2013/07/SimpleDropDownEffects-570x310.jpg 570w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Seguindo no campo de formulários (com o perdão do trocadilho) temos um artigo que mostra um plugin jQuery para melhorar o visual e usabilidade de listas &lt;em&gt;drop-down&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;creative-buttons&#34;&gt;Creative Buttons&lt;/h2&gt;

&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2013/06/13/creative-button-styles/&#34;&gt;artigo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/Development/CreativeButtons/&#34;&gt;demo&lt;/a&gt; | &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/codrops/CreativeButtons&#34;&gt;código-fonte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/CreativeButtons.png&#34; alt=&#34;CreativeButtons&#34; width=&#34;580&#34; height=&#34;315&#34; class=&#34;alignnone size-full wp-image-37959&#34; srcset=&#34;uploads/2013/07/CreativeButtons.png 580w, uploads/2013/07/CreativeButtons-309x168.png 309w, uploads/2013/07/CreativeButtons-570x310.png 570w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E, finalizando, confiram dezenas de efeitos bastante sutis e inspiradores para botões e ações em interfaces web. A maioria dos efeitos são para &lt;em&gt;mouseover&lt;/em&gt;, mas o experimento traz também alguns exemplos para eventos de clique.&lt;/p&gt;

&lt;h2 id=&#34;bônus-blueprints&#34;&gt;Bônus: Blueprints&lt;/h2&gt;

&lt;p&gt;Em meio aos artigos e tutoriais, o Codrops conta com uma categoria chamada &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/category/blueprints&#34;&gt;Blueprints&lt;/a&gt; que se destina a ser uma coleção de exemplos minimalistas de interfaces e componentes.&lt;/p&gt;

&lt;p&gt;Os experimentos nesta categoria incluem &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2013/05/17/horizontal-slide-out-menu/&#34;&gt;menus&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2013/04/17/responsive-full-width-grid/&#34;&gt;grids&lt;/a&gt;, &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2013/02/26/full-width-image-slider/&#34;&gt;sliders&lt;/a&gt; e até mesmo um &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/2013/06/06/responsive-multi-column-form/&#34;&gt;formulário responsive em mútliplas colunas&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;bônus-2-collective&#34;&gt;Bônus 2: Collective&lt;/h2&gt;

&lt;p&gt;Outra categoria legal no Codrops é a &lt;a target=&#34;_blank&#34; href=&#34;http://tympanus.net/codrops/collective/&#34;&gt;Collective&lt;/a&gt;, uma compilação das últimas novidades no mundo do desenvolvimento web. As listas, lançadas semanalmente, trazem os últimos plugins, tutoriais, fontes, ícones e muito mais.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Medindo a complexidade do seu código JavaScript</title>
      <link>https://tableless.github.io/hugo-public/medindo-a-complexidade-ciclomatica-do-seu-codigo-javascript/</link>
      <pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/medindo-a-complexidade-ciclomatica-do-seu-codigo-javascript/</guid>
      <description>

&lt;p&gt;Já mostramos aqui no Tableless &lt;a href=&#34;http://tableless.com.br/testando-seu-codigo-jquery-com-jasmine-parte-1/&#34;&gt;ferramentas para testes&lt;/a&gt; e &lt;a href=&#34;http://tableless.com.br/qualidade-codigo-javascript/&#34;&gt;ferramentas para garantir o padrão do seu código JavaScript&lt;/a&gt;, mas, enquanto esses utilitários asseguram uma consistência maior, eles nem sempre acabam com complexidades desnecessárias.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos falar sobre complexidade ciclomática e mostrar uma ferramenta para análise de códigos JavaScript, a biblioteca Plato.&lt;/p&gt;

&lt;h2 id=&#34;complexidade-ciclomática&#34;&gt;Complexidade Ciclomática&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A primeira regra de funções é que elas devem ser pequenas. A segunda regra de funções é que elas devem ser ainda menores.&lt;br /&gt;
&amp;mdash; Uncle Bob&lt;/p&gt;

&lt;p&gt;Funções devem fazer uma coisa apenas. Fazê-la bem. Fazer somente ela.&lt;br /&gt;
&amp;mdash; Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Explicando de forma bem direta, complexidade ciclomática é uma métrica do número de caminhos possíveis no seu código. Por exemplo, vejamos o código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function authenticate() {
  if (user.isValid() === true) { 
    user.login(); 
  } else { 
    showMessage(&#39;Invalid credentials&#39;, &#39;error&#39;); 
  } 
}&lt;/pre&gt;

&lt;p&gt;A função &lt;strong&gt;authenticate&lt;/strong&gt; possui valor &lt;strong&gt;2&lt;/strong&gt; de complexidade ciclomática. Na prática, isso quer dizer que precisaríamos escrever dois testes unitários para cobrir todos os possíveis caminhos. Ou seja, quanto mais caminhos, maior a complexidade ciclomática e, quanto maior a complexidade ciclomática, mais difícil será de manter/testar seu código.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mccabe.com/pdf/MeasuringSoftwareComplexityUAV.pdf&#34; target=&#34;_blank&#34;&gt;Estudos&lt;/a&gt; recomendam &lt;strong&gt;10&lt;/strong&gt; como o valor máximo que você deve permitir de complexidade ciclomática no seu método ou sua função. Este é um bom valor, mas tenha em mente que &lt;strong&gt;10&lt;/strong&gt; já é uma complexidade alta e não deve, de forma alguma, ser a média de complexidade do seu projeto.&lt;/p&gt;

&lt;h2 id=&#34;bad-fix&#34;&gt;Bad Fix&lt;/h2&gt;

&lt;p&gt;Outra métrica tirada a partir da complexidade ciclomática é a probabilidade de uma correção injetar novos bugs no seu código. O pessoal da Aivosto, uma empresa especializada em ferramentas para desenvolvedores, chegou a &lt;a href=&#34;http://www.aivosto.com/project/help/pm-complexity.html&#34; target=&#34;_blank&#34;&gt;seguinte tabela&lt;/a&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Complexidade Ciclomática
    &lt;/th&gt;
    
    &lt;th&gt;
      Probabilidade de &amp;#8220;bad fix&amp;#8221;
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      1-10
    &lt;/td&gt;
    
    &lt;td&gt;
      5%
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      20-30
    &lt;/td&gt;
    
    &lt;td&gt;
      20%
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &gt;50
    &lt;/td&gt;
    
    &lt;td&gt;
      40%
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      próximo de 100
    &lt;/td&gt;
    
    &lt;td&gt;
      60%
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Segundo a pesquisa da Aivosto, uma correção aplicada em um método com complexidade ciclomática 25 tem 20% de chances de introduzir um novo bug na sua aplicação. Tente lembrar quantas vezes isso já aconteceu com você? E tente lembrar também do tamanho do método ou função que você estava &amp;#8220;corrigindo&amp;#8221;. Por isso é muito importante tentar medir tudo a respeito do seu código.&lt;/p&gt;

&lt;h2 id=&#34;plato&#34;&gt;Plato&lt;/h2&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/complexityplato.jpg&#34; alt=&#34;complexityplato&#34; width=&#34;372&#34; height=&#34;396&#34; class=&#34;alignnone size-full wp-image-37790&#34; style=&#34;border: 1px solid #ccc&#34; srcset=&#34;uploads/2013/06/complexityplato.jpg 372w, uploads/2013/06/complexityplato-157x168.jpg 157w, uploads/2013/06/complexityplato-291x310.jpg 291w&#34; sizes=&#34;(max-width: 372px) 100vw, 372px&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Desenvolvida por Jarrod Overson, a ferramenta &lt;a href=&#34;https://github.com/jsoverson/plato&#34; target=&#34;_blank&#34;&gt;Plato&lt;/a&gt; aplica na prática todas as teorias de medição de complexidade ciclomática, exibindo na forma de gráficos dados como taxa de mantenabilidade, bugs estimados e erros de lint.&lt;/p&gt;

&lt;p&gt;A instalação é feita através do npm, gerenciador de pacotes do nodejs:&lt;/p&gt;

&lt;pre&gt;npm install -g plato&lt;/pre&gt;

&lt;p&gt;A forma mais básica de uso é a seguinte:&lt;/p&gt;

&lt;pre&gt;plato -d report src&lt;/pre&gt;

&lt;p&gt;Onde &lt;strong&gt;-d report&lt;/strong&gt; é a flag para indicar o diretório &lt;strong&gt;report&lt;/strong&gt; como saída do seu relatório e &lt;strong&gt;src&lt;/strong&gt; é o diretório dos arquivos JavaScript a serem analisados.&lt;/p&gt;

&lt;p&gt;Outras opções importantes são as flag &lt;strong&gt;-r&lt;/strong&gt; para ler o diretório recursivamente e &lt;strong&gt;-x &lt;regex&gt;&lt;/strong&gt; para excluir arquivos baseados em uma regex.&lt;/p&gt;

&lt;p&gt;Os relatórios do Plato armazenam históricos e é bem interessante ver os números subindo e descendo durante o desenvolvimento do seu projeto. Uma prática legal é guardar e exibir o relatório em algum lugar disponível para todo o seu time.&lt;/p&gt;

&lt;h2 id=&#34;exemplos-de-relatórios&#34;&gt;Exemplos de relatórios&lt;/h2&gt;

&lt;p&gt;Abaixo temos alguns exemplos de relatórios disponibilizados no repositório do projeto, gerados a partir de bibliotecas e utilitários populares:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jsoverson.github.com/plato/examples/jquery/&#34; target=&#34;_blank&#34;&gt;jquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsoverson.github.com/plato/examples/grunt/&#34; target=&#34;_blank&#34;&gt;grunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsoverson.github.com/plato/examples/marionette/&#34; target=&#34;_blank&#34;&gt;marionettejs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bugs-estimados&#34;&gt;Bugs estimados&lt;/h2&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/bugs.jpg&#34; alt=&#34;bugs&#34; width=&#34;404&#34; height=&#34;246&#34; class=&#34;alignnone size-full wp-image-37786&#34; style=&#34;border: 1px solid #ccc&#34; srcset=&#34;uploads/2013/06/bugs.jpg 404w, uploads/2013/06/bugs-275x168.jpg 275w&#34; sizes=&#34;(max-width: 404px) 100vw, 404px&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Um gráfico que chama a atenção nos relatórios do Plato é o de bugs estimados. Afinal de contas, entregar um produto sem bugs é (ou deveria ser) o objetivo final de qualquer desenvolvedor.&lt;/p&gt;

&lt;p&gt;Maurice Howard Halstead criou um &lt;a href=&#34;http://www.amazon.com/Elements-Software-Science-Operating-programming/dp/0444002057&#34; target=&#34;_blank&#34;&gt;conjunto de fórmulas&lt;/a&gt; para medir coisas como volume, esforço, dificuldade e bugs estimados em um código. As fórmulas são baseadas nos números únicos e totais de operadores e operandos.&lt;/p&gt;

&lt;p&gt;Não vou entrar muito em detalhes sobre os valores e as fórmulas, mas é bem interessante ler sobre esse assunto (não precisa ser o livro, a Wikipedia mesmo fornece uma &lt;a href=&#34;http://en.wikipedia.org/wiki/Halstead_complexity_measures&#34; target=&#34;_blank&#34;&gt;página&lt;/a&gt; bem completa sobre as fórmulas).&lt;/p&gt;

&lt;h2 id=&#34;integração-com-grunt&#34;&gt;Integração com Grunt&lt;/h2&gt;

&lt;p&gt;Overson também desenvolveu um &lt;a href=&#34;https://github.com/jsoverson/grunt-plato&#34; target=&#34;_blank&#34;&gt;módulo&lt;/a&gt; que disponibiliza uma task Grunt para relatórios Plato.&lt;/p&gt;

&lt;p&gt;A instalação segue o padrão de pacotes Grunt:&lt;/p&gt;

&lt;pre&gt;npm install grunt-plato --save-dev&lt;/pre&gt;

&lt;p&gt;Uma vez instalado o pacote, basta carregar a task no seu &lt;strong&gt;Gruntfile.js&lt;/strong&gt; e rodar a task com o comando &lt;strong&gt;grunt plato&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;grunt.initConfig({
  plato: {
    your_task: {
      files: {
        &#39;report/output/directory&#39;: [&#39;src/**/*.js&#39;, &#39;test/**/*.js&#39;],
      }
    },
  },
});
grunt.loadNpmTasks(&#39;grunt-plato&#39;);&lt;/pre&gt;

&lt;h2 id=&#34;métricas-métricas-e-mais-métricas&#34;&gt;Métricas, métricas e mais métricas&lt;/h2&gt;

&lt;p&gt;Medir o código do seu projeto ajuda você e seu time a entender e prevenir problemas. Com a ajuda de métricas você vai conseguir manter um código fácil de ler e entender. Além de métricas dos níveis de complexidade também é importante possuir um relatório visível de cobertura de testes e uma documentação simples e direta do seu projeto.&lt;/p&gt;

&lt;p&gt;Apesar do nome pomposo e de muita teoria, não é pra ninguém ficar assustado. Pode parecer um conceito avançado, mas na verdade é uma coisa muito básica: o que você estará fazendo é medir se é fácil (ou difícil) manter o seu código.&lt;/p&gt;

&lt;p&gt;E lembrem-se: nunca refatore um código sem que ele possua uma cobertura de testes satisfatória!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript: Objetos Literais vs. Funções Construtoras</title>
      <link>https://tableless.github.io/hugo-public/javascript-objetos-literais-vs-funcoes-construtoras/</link>
      <pubDate>Tue, 04 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/javascript-objetos-literais-vs-funcoes-construtoras/</guid>
      <description>

&lt;p&gt;Existem duas maneiras de criar objetos JavaScript e muita gente as confunde ou acha que são a mesma coisa. No entanto, Objetos Literais e Funções Construtoras são conceitos bem diferentes e entendê-los vai fazer com que você tire melhor proveito da linguagem.&lt;/p&gt;

&lt;h2 id=&#34;objetos-literais&#34;&gt;Objetos Literais&lt;/h2&gt;

&lt;p&gt;Este é o tipo básico de objetos JavaScript. É o formato popularizado através do JSON (JavaScript Object Notation). O objeto é criado utilizando um par de chaves ({}) e suas propriedades e métodos são todos públicos. Este tipo de objeto também é chamado de objeto estático.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tableless = {
    init: function (artigos) {
        this.artigos = artigos;
    }
};
var tableless2 = tableless;&lt;/pre&gt;

&lt;p&gt;Todo objeto literal é um objeto único e, mesmo que você armazene ele em diferentes variáveis todas apontarão para o mesmo objeto. No exemplo acima, caso você altere/adicione propriedades em qualquer uma das variáveis (tableless ou tableless2), as modificações valem para ambas.&lt;/p&gt;

&lt;p&gt;Seu uso é recomendado em situações onde não podem existir mais de uma instância do objeto, como por exemplo, objetos de configurações do projeto ou coleções de objetos. Além disso, este tipo de notação é muito utilizado para definir o &lt;em&gt;namespace&lt;/em&gt; do seu código JavaScript.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// Objeto Literal definindo namespace
var tableless = tableless || {};
// Construtor para Artigo utilizando o namespace tableless
tableless.Artigo = function (titulo) {
    this.titulo = titulo;
};
var artigo = new tableless.Artigo(&#39;Mais um artigo sobre JavaScript&#39;);&lt;/pre&gt;

&lt;h2 id=&#34;construtores&#34;&gt;Construtores&lt;/h2&gt;

&lt;p&gt;Um construtor nada mais é do que uma função. Ela pode ser executada como uma função ou pode ser utilizada para instanciar um objeto utilizando a palavra reservada &lt;em&gt;new&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(Caso você execute a função como uma chamada normal, vale realçar que o &lt;strong&gt;this&lt;/strong&gt; dentro da função, nesse contexto, será o objeto global &lt;strong&gt;window&lt;/strong&gt;.)&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function Categoria(nome) {
    this.nome = nome;
}

var categoria = new Categoria(&#39;Livros&#39;);&lt;/pre&gt;

&lt;p&gt;Ao executar a função Categoria com &lt;strong&gt;new&lt;/strong&gt; estamos fazendo quatro coisas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;criamos um novo objeto JavaScript ({});&lt;/li&gt;
&lt;li&gt;definimos o construtor do objeto &lt;strong&gt;categoria&lt;/strong&gt; como &lt;strong&gt;Categoria&lt;/strong&gt; &amp;#8211; definindo também o tipo dele (retornado no instanceof);&lt;/li&gt;
&lt;li&gt;definimos o protótipo do objeto &lt;strong&gt;categoria&lt;/strong&gt; como &lt;strong&gt;Categoria.prototype&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;executamos a função &lt;strong&gt;Categoria&lt;/strong&gt; dentro do escopo do novo objeto, criando assim uma nova instância.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Uma outra particularidade das funções construtoras é a possibilidade de criar métodos e propriedades privadas.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function Categoria(nome) {
    var totalProdutos = 0,
        self = this,
        atualizaTotalProdutos = function() {
            self.totalProdutos += 1;
        };
    this.nome = nome;
    atualizaTotalProdutos();
}&lt;/pre&gt;

&lt;p&gt;A variável &lt;strong&gt;totalProdutos&lt;/strong&gt; e o método &lt;strong&gt;atualizaTotalProdutos&lt;/strong&gt; só existem no escopo do objeto Categoria criado e podem ser utilizados apenas por métodos do objeto.&lt;/p&gt;

&lt;p&gt;Aqui utilizamos um &amp;#8220;truque&amp;#8221; importante. Como cada função possui o seu próprio contexto e o &lt;strong&gt;this&lt;/strong&gt; dentro do método &lt;strong&gt;atualizaTotalProdutos&lt;/strong&gt; referencia a própria função e não o objeto Categoria precisamos armazenar o contexto do objeto dentro da variável &lt;strong&gt;self&lt;/strong&gt;. (Outra forma seria utilizar os métodos &lt;strong&gt;call&lt;/strong&gt; e &lt;strong&gt;aply&lt;/strong&gt; para definir o &lt;strong&gt;this&lt;/strong&gt; da função, mas isso é papo para outro artigo.)&lt;/p&gt;

&lt;p&gt;Utilizando a cadeia de protótipos, podemos atualizar propriedades ou inserir novos métodos em objetos criados a partir de funções construtoras.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Categoria.prototype.exibeProdutos = function () {
    var html = &#39;&#39;,
        i;
    for (i = 0; i &amp;lt; this.produtos.length; i++) {
        html += this.produtos[i].nome;
    }
    return html;
};&lt;/pre&gt;

&lt;p&gt;O código acima adiciona o método &lt;strong&gt;exibeProdutos&lt;/strong&gt; ao protótipo de Categoria e também a todos os objetos da cadeia, instanciados ou não.&lt;/p&gt;

&lt;p&gt;As funções construtoras, portanto, são ideais para objetos que podem existir como múltiplas instâncias no mesmo contexto.&lt;/p&gt;

&lt;p&gt;Uma observação: para melhor organizar seu código uma boa prática é utilizar a primeira letra maiúscula nos nomes de funções construtoras, diferenciando-as de funções comuns.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;Entender conceitos de orientação a objetos em JavaScript pode levar um pouco de tempo e pode parecer bem estranho no início. Mas, uma vez entendido o funcionamento desses conceitos você descobrirá que é possível fazer diversas coisas legais e diferentes e que JavaScript é uma linguagem extremamente flexível.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elementos de interface utilizando apenas CSS3</title>
      <link>https://tableless.github.io/hugo-public/elementos-de-interface-utilizando-apenas-css3/</link>
      <pubDate>Thu, 09 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elementos-de-interface-utilizando-apenas-css3/</guid>
      <description>

&lt;p&gt;Se por um lado está na hora de você &lt;a href=&#34;http://tableless.com.br/criando-um-plugin-javascript-sem-jquery/&#34;&gt;parar de usar jQuery para tudo e investir mais em códigos JavaScript&lt;/a&gt;, por outro já é possível criar elementos animados e interativos utilizando apenas CSS3.&lt;/p&gt;

&lt;p&gt;É claro que você vai precisar abrir mão de efeitos em navegadores antigos (ou, na maioria dos casos, da implementação inteira). É claro também que as implementações são até certo ponto limitadas em comparação a plugins e bibliotecas JavaScript, mas dão um show em performance e otimização.&lt;/p&gt;

&lt;p&gt;Botões, galerias/slides, tabs e até mesmo o famoso efeito de lightbox já podem ser implementados sem nenhuma linha de JavaScript. Confira alguns exemplos.&lt;/p&gt;

&lt;h2 id=&#34;galeria&#34;&gt;Galeria&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://benschwarz.github.io/gallery-css/&#34; title=&#34;http://benschwarz.github.io/gallery-css/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/gallery-css.jpg&#34; alt=&#34;gallery-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37344&#34; srcset=&#34;uploads/2013/05/gallery-css.jpg 660w, uploads/2013/05/gallery-css-324x168.jpg 324w, uploads/2013/05/gallery-css-588x304.jpg 588w, uploads/2013/05/gallery-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://benschwarz.github.io/gallery-css/&#34; title=&#34;http://benschwarz.github.io/gallery-css/&#34;&gt;http://benschwarz.github.io/gallery-css/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ben Schwarz caprichou e lançou recentemente uma galeria utilizando apenas CSS3. A galeria permite controles personalizados e vem com uma animação para autoplay.&lt;/p&gt;

&lt;p&gt;Os slides podem conter qualquer conteúdo em HTML e o grande segredo por trás dessa galeria é o uso de âncoras (#) aliado a elementos com position:absolute e o pseudo-atributo &lt;a href=&#34;http://www.w3.org/TR/css3-selectors/#target-pseudo&#34; title=&#34;http://www.w3.org/TR/css3-selectors/#target-pseudo&#34;&gt;:target&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O pseudo atributo target é aplicado em elementos referenciados por uma âncora. Por exemplo, sua página tem um elemento section com o id &amp;#8220;section-1&amp;#8221; e um link para a âncora #section-1. Quando o usuário clicar nesse link, o CSS definido na regra section:target será aplicado no elemento #section-1.&lt;/p&gt;

&lt;h2 id=&#34;lightbox&#34;&gt;Lightbox&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tympanus.net/codrops/2011/12/26/css3-lightbox/&#34; title=&#34;http://tympanus.net/codrops/2011/12/26/css3-lightbox/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/lightbox-css.jpg&#34; alt=&#34;lightbox-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37345&#34; srcset=&#34;uploads/2013/05/lightbox-css.jpg 660w, uploads/2013/05/lightbox-css-324x168.jpg 324w, uploads/2013/05/lightbox-css-588x304.jpg 588w, uploads/2013/05/lightbox-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tympanus.net/codrops/2011/12/26/css3-lightbox/&#34; title=&#34;http://tympanus.net/codrops/2011/12/26/css3-lightbox/&#34;&gt;http://tympanus.net/codrops/2011/12/26/css3-lightbox/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O efeito Lightbox é um dos grandes responsáveis pela popularização do JavaScript e suas bibliotecas. Hoje já existem centenas de clones do original, com diferentes configurações e a versão CSS supera muitas dessas implementações em JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;menu-dropdown&#34;&gt;Menu Dropdown&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://line25.com/tutorials/how-to-create-a-pure-css-dropdown-menu&#34; title=&#34;http://line25.com/tutorials/how-to-create-a-pure-css-dropdown-menu&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/dropdown-css.jpg&#34; alt=&#34;dropdown-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37343&#34; srcset=&#34;uploads/2013/05/dropdown-css.jpg 660w, uploads/2013/05/dropdown-css-324x168.jpg 324w, uploads/2013/05/dropdown-css-588x304.jpg 588w, uploads/2013/05/dropdown-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://line25.com/tutorials/how-to-create-a-pure-css-dropdown-menu&#34; title=&#34;http://line25.com/tutorials/how-to-create-a-pure-css-dropdown-menu&#34;&gt;http://line25.com/tutorials/how-to-create-a-pure-css-dropdown-menu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Outro elemento bastante popular em JavaScript é o menu dropdown. Sua versão CSS usa apenas o atributo :hover dos links para exibir e esconder os múltiplos níveis de submenus.&lt;/p&gt;

&lt;p&gt;Ainda dá para usar algum tipo de transition ou animation para deixar o menu mais atraente. Quem se habilita? 🙂&lt;/p&gt;

&lt;h2 id=&#34;abas&#34;&gt;Abas&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sitepoint.com/css3-tabs-using-target-selector/&#34; title=&#34;http://www.sitepoint.com/css3-tabs-using-target-selector/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/tabs-css.jpg&#34; alt=&#34;tabs-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37346&#34; srcset=&#34;uploads/2013/05/tabs-css.jpg 660w, uploads/2013/05/tabs-css-324x168.jpg 324w, uploads/2013/05/tabs-css-588x304.jpg 588w, uploads/2013/05/tabs-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sitepoint.com/css3-tabs-using-target-selector/&#34; title=&#34;http://www.sitepoint.com/css3-tabs-using-target-selector/&#34;&gt;http://www.sitepoint.com/css3-tabs-using-target-selector/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E que tal uma interface separada por abas sem usar JavaScript? É isso que este tutorial do Sitepoint oferece, mais uma vez fazendo uso do atributo target.&lt;/p&gt;

&lt;h2 id=&#34;tooltip&#34;&gt;Tooltip&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://kushagragour.in/lab/hint/&#34; title=&#34;http://kushagragour.in/lab/hint/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/tooltip-css.jpg&#34; alt=&#34;tooltip-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37347&#34; srcset=&#34;uploads/2013/05/tooltip-css.jpg 660w, uploads/2013/05/tooltip-css-324x168.jpg 324w, uploads/2013/05/tooltip-css-588x304.jpg 588w, uploads/2013/05/tooltip-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kushagragour.in/lab/hint/&#34; title=&#34;http://kushagragour.in/lab/hint/&#34;&gt;http://kushagragour.in/lab/hint/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tooltips possuem dezenas de implementações utilizando JavaScript. Sua versão CSS3 usa e abusa dos pseudo atributos &lt;a href=&#34;http://www.w3.org/TR/css3-selectors/#gen-content&#34;&gt;:after e :before&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Uma nota importante: as transições nos atributos after e before só foram implementadas recentemente no Chrome (versão 26). Nada que impeça a tooltip de funcionar &amp;#8211; ela apenas será renderizada sem animações.&lt;/p&gt;

&lt;h2 id=&#34;botões&#34;&gt;Botões&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://hellohappy.org/css3-buttons/&#34; title=&#34;http://hellohappy.org/css3-buttons/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/buttons-css.jpg&#34; alt=&#34;buttons-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37342&#34; srcset=&#34;uploads/2013/05/buttons-css.jpg 660w, uploads/2013/05/buttons-css-324x168.jpg 324w, uploads/2013/05/buttons-css-588x304.jpg 588w, uploads/2013/05/buttons-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hellohappy.org/css3-buttons/&#34; title=&#34;http://hellohappy.org/css3-buttons/&#34;&gt;http://hellohappy.org/css3-buttons/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Não é só JavaScript que pode ser cortado &amp;#8211; também podemos parar de utilizar sprites para botões. Hoje em dia já é possível criar botões consistentes e interativos utilizando apenas CSS3.&lt;/p&gt;

&lt;p&gt;O designer Chad Mazzola mantém um repositório de botões &amp;#8220;que utilizam o markup mais simples possível&amp;#8221;. Este é um bom ponto de partida, mas os exemplos de botões utilizando apenas CSS são os mais fáceis de encontrar.&lt;/p&gt;

&lt;h2 id=&#34;evento-de-clique&#34;&gt;Evento de clique&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ryancollins.me/?p=1041&#34; title=&#34;http://www.ryancollins.me/?p=1041&#34;&gt;http://www.ryancollins.me/?p=1041&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esse último exemplo não é bem um elemento, mas sim uma aplicação do evento de clique utilizando o atributo active de um elemento. Com poucas linhas de código é possível exibir/esconder um menu ao clicar em um botão.&lt;/p&gt;

&lt;p&gt;E você, já deixou de fazer alguma coisa em JavaScript para implementar utilizando apenas CSS? Diz aí nos comentários!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Templates client-side com Mustache.js</title>
      <link>https://tableless.github.io/hugo-public/templates-client-side-com-mustache-js/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/templates-client-side-com-mustache-js/</guid>
      <description>

&lt;p&gt;Antes de começarmos, uma pergunta: quem nunca implementou um &amp;#8220;template&amp;#8221; nos moldes do código abaixo?&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;html  = &#39;&amp;lt;li class=&#34;clearfix&#34;&amp;gt;&#39;;
html += &#39; &amp;lt;div class=&#34;foto&#34;&amp;gt;&#39;;
html += &#39;   &amp;lt;a href=&#34;&#39; + item.permalink + &#39;&#34;&amp;gt;&#39;;
html += &#39;     &amp;lt;img src=&#34;&#39; + item.thumb + &#39;&#34; width=&#34;180&#34; height=&#34;124&#34; alt=&#34;&#39; + item.titulo + &#39;&#34;&amp;gt;&#39;;
html += &#39;   &amp;lt;/a&amp;gt;&#39;;
html += &#39; &amp;lt;/div&amp;gt;&#39;;
html += &#39; &amp;lt;span&amp;gt;&#39;;
html += item.titulo;
html += &#39; &amp;lt;/span&amp;gt;&#39;;
html += &#39;&amp;lt;/li&amp;gt;&#39;;&lt;/pre&gt;

&lt;p&gt;Se você ainda faz isso, chegou a hora de parar.&lt;/p&gt;

&lt;p&gt;Neste artigo abordaremos a &lt;a href=&#34;https://github.com/janl/mustache.js/&#34;&gt;implementação JavaScript para templates Mustache&lt;/a&gt;. A sintaxe já foi portada para diferentes linguagens, incluindo Ruby, Python, PHP e Java. Para uma lista completa, visite o &lt;a href=&#34;http://mustache.github.com/&#34;&gt;site oficial do projeto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A principal diferença do Mustache para outras formas de templating no client-side (&lt;a href=&#34;http://tableless.com.br/templates-e-jquery-parte-1/&#34; title=&#34;http://tableless.com.br/templates-e-jquery-parte-1/&#34;&gt;jQuery Template&lt;/a&gt;, por exemplo) é que ele não aceita lógica, como declarações condicionais, loops etc. Pode não parecer, mas isso é muito bom: um template não deveria conter nenhuma lógica, já que é apenas uma camada de apresentação.&lt;/p&gt;

&lt;p&gt;Por ser &amp;#8220;logic-less&amp;#8221;, o Mustache.js é bem enxuto, pesando 8.5kb em sua versão minificada.&lt;/p&gt;

&lt;h2 id=&#34;criando-um-template&#34;&gt;Criando um template&lt;/h2&gt;

&lt;p&gt;Os templates Mustache esperam receber dados no formato JSON. Os dados podem ser textos, variáveis e até mesmo funções. Vamos começar com um exemplo básico onde renderizamos um template de um artigo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var item = {
      titulo: &#34;Templates client-side com Mustache.js&#34;,
      permalink: &#34;http://tableless.com.br/templates-client-side-com-mustache-js&#34;
      thumb: &#34;mustache.jpg&#34;,
    },
    output = Mustache.render(&#34;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;{{abstract}}&amp;lt;/p&amp;gt;&#34;, item);
console.log(output);&lt;/pre&gt;

&lt;p&gt;O método &lt;strong&gt;render&lt;/strong&gt; é o responsável por retornar o template com os dados formatados. O primeiro parâmetro é o template e o segundo o objeto JSON com os dados que devem ser aplicados.&lt;/p&gt;

&lt;p&gt;Os dados armazenados no JSON são representados no template utilizando duas chaves (bigode-bigode) com o nome da propriedade.&lt;/p&gt;

&lt;p&gt;Uma boa prática é separar o template do seu código JavaScript armazenando a estrutura do template em uma tag &lt;strong&gt;script&lt;/strong&gt; do tipo &lt;strong&gt;&amp;#8220;text/template&amp;#8221;&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script id=&#34;item-template&#34; type=&#34;text/template&#34;&amp;gt;
&amp;lt;li class=&#34;clearfix&#34;&amp;gt;
  &amp;lt;div class=&#34;foto&#34;&amp;gt;
    &amp;lt;a href=&#34;{{ item.permalink }}&#34;&amp;gt;
      &amp;lt;img src=&#34;{{ item.thumb }}&#34; width=&#34;180&#34; height=&#34;124&#34; alt=&#34;{{ item.titulo }}&#34;&amp;gt;
    &amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;span&amp;gt;{{ item.titulo }}&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Os dados do template são utilizados buscando o conteúdo HTML da tag.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var item = {
      titulo: &#34;Templates client-side com Mustache.js&#34;,
      permalink: &#34;http://tableless.com.br/templates-client-side-com-mustache-js&#34;
      thumb: &#34;mustache.jpg&#34;,
    },
    template = document.getElementById(&#39;article-template&#39;).innerHTML;
    output = Mustache.render(template, item);
console.log(output);&lt;/pre&gt;

&lt;p&gt;Nos exemplos a seguir, para facilitar a leitura, vamos continuar utilizando os templates diretamente no método &lt;strong&gt;render&lt;/strong&gt; do Mustache.&lt;/p&gt;

&lt;h2 id=&#34;lógica&#34;&gt;Lógica?&lt;/h2&gt;

&lt;p&gt;É verdade que não existem tags para condicionais e loops, mas sua implementação é possível utilizando caracteres especiais nas tags do template.&lt;/p&gt;

&lt;p&gt;No exemplo abaixo temos um objeto tableless que armazena um conjunto de artigos. Para realizarmos um loop nos artigos, basta utilizar o caractere &amp;#8216;#&amp;#8217; seguido do nome da propriedade como uma tag do nosso template. Dentro do bloco &lt;strong&gt;#artigos&lt;/strong&gt; temos acesso às propriedades de cada artigo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tableless = {
      &#39;artigos&#39;: [
        { &#39;titulo&#39;: &#39;Templates client-side com Mustache.js&#39; },
        { &#39;titulo&#39;: &#39;Zepto.js: JavaScript peso-leve&#39; },
        { &#39;titulo&#39;: &#39;JavaScript: o que fazer e aprender para se tornar um dev melhor?&#39; }
      ]
    },
    output = Mustache.render(&#39;{{#artigos}}&amp;lt;li&amp;gt;{{titulo}}&amp;lt;/li&amp;gt;{{/artigos}}&#39;, tableless);
console.log(output);&lt;/pre&gt;

&lt;p&gt;A lógica de condicionais é tratada no próprio objeto. Assim como o loop acima, basta adicionarmos o caracatere &amp;#8216;#&amp;#8217; a uma variável booleana para exibir ou não um conteúdo de acordo com o valor da mesma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tableless = {
      &#39;artigos&#39;: [
        { &#39;titulo&#39;: &#39;Templates client-side com Mustache.js&#39;, publicado: true },
        { &#39;titulo&#39;: &#39;Zepto.js: JavaScript peso-leve&#39;, publicado: true },
        { &#39;titulo&#39;: &#39;JavaScript: o que fazer e aprender para se tornar um dev melhor?&#39;, publicado: false }
      ]
    },
    output = Mustache.render(&#39;{{#artigos}}{{#publicado}}&amp;lt;li&amp;gt;{{titulo}}&amp;lt;/li&amp;gt;{{/publicado}}{{/artigos}}&#39;, tableless);
console.log(output);&lt;/pre&gt;

&lt;h2 id=&#34;funções&#34;&gt;Funções&lt;/h2&gt;

&lt;p&gt;As tags podem conter funções como valores. Por exemplo, no objeto abaixo, a função buzz soma a quantidade de likes, tweets e comentários de um artigo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var artigo = {
    &#39;titulo&#39;: &#39;Templates client-side com Mustache.js&#39;,
      &#39;likes&#39;: 32,
    &#39;tweets&#39;: 22,
      &#39;comentarios&#39;: 45,
    &#39;buzz&#39;: function () {
      return this.likes + this.tweets + this.comentarios;
    }
  },
  output = Mustache.render(&#39;&amp;lt;h1&amp;gt;{{titulo}} &amp;lt;small&amp;gt;{{buzz}}&amp;lt;/small&amp;gt;&amp;lt;/h1&amp;gt;&#39;, artigo);
console.log(output);&lt;/pre&gt;

&lt;p&gt;Quando o valor de uma tag é representado por uma função e o caractere &amp;#8216;#&amp;#8217; é utilizado, a mesma pode retornar uma outra função que recebe dois parâmetros: o texto do bloco do template e uma versão especial do método render para ser executada no contexto do bloco.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var artigo = {
    &#39;titulo&#39;: &#39;Templates client-side com Mustache.js&#39;,
    &#39;url&#39;: &#39;http://tableless.com.br/templates-client-side-com-mustache-js&#39;,
    &#39;permalink&#39;: function () {
      return function (text, render) {
        return &#39;&amp;lt;a href=&#34;&#39; + this.url + &#39;&#34; class=&#34;permalink&#34;&amp;gt;&#39; + render(text) + &#39;&amp;lt;/a&amp;gt;&#39;;
      }
    }
  },
  output = Mustache.render(&#39;&amp;lt;p&amp;gt;{{#permalink}}{{titulo}}{{/permalink}}&amp;lt;/p&amp;gt;&#39;, artigo);
console.log(output);&lt;/pre&gt;

&lt;p&gt;Esse tipo de função é chamado de helper, podendo conter lógicas exclusivas da view e evitando a repetição de trechos de template comuns.&lt;/p&gt;

&lt;h2 id=&#34;parciais&#34;&gt;Parciais&lt;/h2&gt;

&lt;p&gt;Outra maneira de evitar repetição é utilizando templates parciais. Parciais são referenciados com o caractere &amp;#8216;&amp;gt;&amp;#8217; dentro da tag.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tableless = {
      &#39;artigos&#39;: [
        { &#39;titulo&#39;: &#39;Templates client-side com Mustache.js&#39; },
        { &#39;titulo&#39;: &#39;Zepto.js: JavaScript peso-leve&#39; },
        { &#39;titulo&#39;: &#39;JavaScript: o que fazer e aprender para se tornar um dev melhor?&#39; }
      ]
    },
    parciais = {&#39;artigo&#39;: &#39;

&lt;li&gt;
  {{titulo}}
&lt;/li&gt;&#39;},
    output = Mustache.render(&#39;{{#artigos}}{{&amp;gt;artigo}}{{/artigos}}&#39;, tableless, parciais);
console.log(output);&lt;/pre&gt;

&lt;p&gt;Os templates parciais devem ser informados como terceiro parâmetro do método &lt;strong&gt;render&lt;/strong&gt; e seu valor deve ser um objeto contendo um ou mais templates. A chave informada no objeto é o nome da tag que será utilizada no template principal.&lt;/p&gt;

&lt;h2 id=&#34;e-tem-mais&#34;&gt;E tem mais&lt;/h2&gt;

&lt;p&gt;Além das funcionalidades apresentadas neste artigo, a biblioteca Mustache.js ainda trás alguns outros benefícios como templates compilados, delimitadores personalizados e seções invertidas. Para saber mais, visite a &lt;a href=&#34;https://github.com/janl/mustache.js/&#34;&gt;página do projeto no GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E você? Utiliza alguma solução de templating no client-side? Compartilhe nos comentários!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zepto.js: JavaScript peso-leve</title>
      <link>https://tableless.github.io/hugo-public/zepto-js-biblioteca-javascript-peso-leve/</link>
      <pubDate>Wed, 20 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/zepto-js-biblioteca-javascript-peso-leve/</guid>
      <description>

&lt;p&gt;Em tempos em que performance é muito valorizada, a escolha de bibliotecas e plugins extras influencia diretamente no peso do seu site ou aplicativo.&lt;/p&gt;

&lt;p&gt;Com aproximadamente 10kb em sua versão minificada (jQuery, por exemplo, tem 94kb), o framework &lt;strong&gt;Zepto.js&lt;/strong&gt; pode ser o mais indicado para quem deseja melhorar a performance e manter a compatibilidade com a API do jQuery.&lt;/p&gt;

&lt;h2 id=&#34;se-você-sabe-jquery-você-já-sabe-zepto&#34;&gt;Se você sabe jQuery, você já sabe Zepto&lt;/h2&gt;

&lt;p&gt;Além de ser leve, o Zepto.js é também compatível com a maioria dos métodos jQuery. Todos os seletores e métodos para manipulação de CSS/HTML são praticamente idênticos.&lt;/p&gt;

&lt;p&gt;No entanto, é importante frisar que o framework Zepto.js não é 100% compatível (e nem pretende ser) com a API do jQuery. Alguns métodos, inclusive, possuem assinaturas diferentes.&lt;/p&gt;

&lt;h2 id=&#34;funciona-apenas-em-browsers-modernos&#34;&gt;Funciona apenas em browsers modernos&lt;/h2&gt;

&lt;p&gt;Para ser leve, o código do Zepto.js precisou abdicar de &lt;em&gt;hacks&lt;/em&gt; e &lt;em&gt;workarounds&lt;/em&gt; para navegadores mais antigos. Seu foco é funcionar em browsers modernos, tanto em suas versões desktop como mobile.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;fallback&lt;/em&gt; para fazer uso do framework nos navegadores mais antigos é aplicar o seguinte trecho de código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script&amp;gt;
document.write(&#39;&amp;lt;script src=&#39; +
(&#39;__proto__&#39; in {} ? &#39;zepto&#39; : &#39;jquery&#39;) +
&#39;.js&amp;gt;&amp;lt;\/script&amp;gt;&#39;)
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Caso o navegador não dê suporte à propriedade &lt;strong&gt;proto&lt;/strong&gt; em objetos JavaScript, o framework carregado será o jQuery.&lt;/p&gt;

&lt;h2 id=&#34;base&#34;&gt;Base&lt;/h2&gt;

&lt;p&gt;Os métodos do core do Zepto são muito parecidos com os métodos do core do jQuery. Por exemplo, para alterar o html de um elemento, utilizamos o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;#home&#39;).html(&#39;&amp;lt;a href=&#34;index.html&#34;&amp;gt;home&amp;lt;/a&amp;gt;&#39;);&lt;/pre&gt;

&lt;p&gt;Para alterar o CSS de um ou mais elementos com a classe &lt;em&gt;item-menu&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.item-menu&#39;).css(&#39;background-color&#39;, &#39;red&#39;);&lt;/pre&gt;

&lt;p&gt;Ou ainda:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.item-menu&#39;).css({backgroundColor: &#39;red&#39;, color: &#39;#fff&#39;});&lt;/pre&gt;

&lt;p&gt;Para adicionar um novo elemento a um elemento existente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;&amp;lt;a href=&#34;index.html&#34;&amp;gt;home&amp;lt;/a&amp;gt;&#39;).appendTo(&#39;nav&#39;);&lt;/pre&gt;

&lt;p&gt;Notaram a semelhança com jQuery? Esse é um dos pontos fortes do Zepto.js, uma curva de aprendizado quase nula para quem já desenvolve com jQuery.&lt;/p&gt;

&lt;h2 id=&#34;eventos-efeitos&#34;&gt;Eventos &amp;amp; Efeitos&lt;/h2&gt;

&lt;p&gt;A associação de eventos também segue a API do jQuery:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;a&#39;).on(&#39;click&#39;, function(e){ console.log(&#39;clique&#39;); });
$(&#39;#home&#39;).click(function(e){ e.preventDefault(); });&lt;/pre&gt;

&lt;p&gt;A parte de efeitos é composta do objeto &lt;strong&gt;$.fx&lt;/strong&gt;, responsável pelas configurações globais de animação e do método &lt;em&gt;animate&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#top-nav&#34;).animate({
  marginTop: &#39;30px&#39;,
  backgroundColor: &#39;#000&#39;,
  rotateX: &#39;10deg&#39;
}, 300, &#39;linear&#39;)&lt;/pre&gt;

&lt;p&gt;A diferença principal é que as animações do framework Zepto.js são todas feitas utilizando transições e transformações CSS3.&lt;/p&gt;

&lt;h2 id=&#34;ajax&#34;&gt;Ajax&lt;/h2&gt;

&lt;p&gt;Assim como o módulo de efeitos, as configurações globais para Ajax também ficam armazenadas em um objeto, o &lt;strong&gt;$.ajaxSettings&lt;/strong&gt;. É possível alterar o tipo padrão de requisição (o default é GET), o timeout, o tipo de dados entre outros.&lt;/p&gt;

&lt;p&gt;Também é possível configurar os callbacks para as seguintes operações: &lt;em&gt;beforeSend&lt;/em&gt;, &lt;em&gt;success&lt;/em&gt;, &lt;em&gt;error&lt;/em&gt; e &lt;em&gt;complete&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Chamadas Ajax são realizadas utilizando o método &lt;strong&gt;$.ajax&lt;/strong&gt; ou seus atalhos &lt;strong&gt;$.get&lt;/strong&gt;, &lt;strong&gt;$.post&lt;/strong&gt; e &lt;strong&gt;$.getJSON&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$.post(&#39;/projeto/novo&#39;, {titulo: &#39;Novo projeto&#39;}, function(response){
  console.log(&#39;Projeto criado com sucesso&#39;);
});&lt;/pre&gt;

&lt;p&gt;As operações Ajax também disparam eventos que podem ser utilizados por elementos da sua aplicação, entre eles &lt;em&gt;ajaxStart&lt;/em&gt;, &lt;em&gt;ajaxError&lt;/em&gt; e &lt;em&gt;ajaxComplete&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(document).on(&#39;ajaxError&#39;, function(e, xhr, options, error){
  console.log(&#39;;Erro: &#39;; + error);
});&lt;/pre&gt;

&lt;p&gt;O trecho de código acima captura qualquer evento de erro disparado por uma chamada Ajax e exibe o motivo do erro no console.&lt;/p&gt;

&lt;h2 id=&#34;touch-mobile&#34;&gt;Touch &amp;amp; Mobile&lt;/h2&gt;

&lt;p&gt;Originalmente criado para atender especificamente dispositivos mobile, o framework Zepto.js oferece suporte aos seguintes eventos de dispositivos de toque:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tap, singleTap, doubleTap e longTap&lt;/li&gt;
&lt;li&gt;swipe, swipeLeft, swipeRight, swipeUp, swipeDown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Os eventos são associados como qualquer outro tipo de evento:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;#home&#39;).tap(function() {
  $(&#39;;.home-nav&#39;;).toggle();
});

$(&#39;#galeria&#39;).swipe(function() {
  $(this).animate({marginLeft: &#34;-100px&#34;}, 300, &#34;ease-out&#34;);
});&lt;/pre&gt;

&lt;p&gt;O módulo touch é opcional e não acompanha o build default do Zepto.js.&lt;/p&gt;

&lt;h2 id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;Como era de se esperar, o desenvolvimento de plugins para Zepto.js segue o padrão jQuery de estender o objeto $.fn:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$.extend($.fn, {
  meuPlugin: function(){&amp;lt;/p&gt;
  // this é a coleção obtida no seletor
  return this;
});&lt;/pre&gt;

&lt;p&gt;A base de plugins ainda é infinitamente menor do que a base de plugins jQuery. O desenvolvedor brasileiro Jean Carlo Emer possui dois plugins interessantes que podem servir de base para você criar os seus próprios plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jcemer.com/zepto-carousel/&#34;&gt;Zepto Carousel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jcemer.com/zepto-range/&#34;&gt;Zepto Range&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;referências&#34;&gt;Referências&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Site oficial:&lt;/em&gt; &lt;a href=&#34;http://zeptojs.com/&#34;&gt;zeptojs.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Código-fonte:&lt;/em&gt; &lt;a href=&#34;https://github.com/madrobby/zepto&#34;&gt;github.com/madrobby/zepto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Plugins jQuery e bibliotecas JavaScript para e-commerces</title>
      <link>https://tableless.github.io/hugo-public/plugins-jquery-e-bibliotecas-javascript-para-e-commerces/</link>
      <pubDate>Tue, 26 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/plugins-jquery-e-bibliotecas-javascript-para-e-commerces/</guid>
      <description>

&lt;h2 id=&#34;jquery-payment&#34;&gt;jQuery.payment&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://stripe.com/blog/jquery-payment&#34; title=&#34;https://stripe.com/blog/jquery-payment&#34;&gt;https://stripe.com/blog/jquery-payment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O plugin jQuery.payment valida o número dos principais cartões do mercado. Desenvolvido pelo pessoal da &lt;a href=&#34;https://stripe.com/&#34; title=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt;, empresa especializada em uma solução de pagamento para desenvolvedores de e-commerces, o plugin conta com validadores para números de cartão de crédito, data de validade e código de segurança.&lt;/p&gt;

&lt;p&gt;Exemplos de uso:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$(&#39;.numero-cartao&#39;).payment(&#39;formatCardNumber&#39;);
$(&#39;.expiracao-cartao&#39;).payment(&#39;formatCardExpiry&#39;);
$(&#39;.codigo-cartao&#39;).payment(&#39;formatCardCVC&#39;);
$(&#39;.numerico&#39;).payment(&#39;restrictNumeric&#39;);&lt;/pre&gt;

&lt;p&gt;É possível também tirar proveito de alguns utilitários que acompanham o plugin e executar tarefas de validação, além de retornar informações do cartão baseado no número e a data de validade como um objeto:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$.payment.validateCardNumber(&#39;4242 4242 4242 4242&#39;); //=&amp;gt; true
$.payment.validateCardExpiry(&#39;05&#39;, &#39;05&#39;); //=&amp;gt; false
$.payment.validateCardCVC(&#39;12344&#39;); //=&amp;gt; false
$.payment.cardType(&#39;4242 4242 4242 4242&#39;); //=&amp;gt; &#39;visa&#39;
$.payment.cardExpiryVal(&#39;05 / 04&#39;); //=&amp;gt; {month: 5, year: 2004}&lt;/pre&gt;

&lt;p&gt;O código-fonte, em CoffeeScript, está disponível no GitHub: &lt;a href=&#34;https://github.com/stripe/jquery.payment&#34; title=&#34;https://github.com/stripe/jquery.payment&#34;&gt;https://github.com/stripe/jquery.payment&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;accounting-js&#34;&gt;accounting.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://josscrowcroft.github.com/accounting.js/&#34; title=&#34;http://josscrowcroft.github.com/accounting.js/&#34;&gt;http://josscrowcroft.github.com/accounting.js/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accounting.js é uma biblioteca JavaScript com funções utilitárias para formatar números e valores monetários.&lt;/p&gt;

&lt;p&gt;Além de formatar números, extrair valores e converter números decimais, a biblioteca implementa uma função bem interessante para padronizar a exibição de números em colunas de uma tabela.&lt;/p&gt;

&lt;p&gt;Exemplos de uso:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;accounting.formatMoney(1337.99, &#34;R$&#34;, 2, &#34;.&#34;, &#34;,&#34;); // R$1.337,99
accounting.formatColumn([99.9, 12.39, 44.33, 84950, -22], &#34;R$&#34;);
// [&#34;R$    99.90&#34;, &#34;R$    12.39&#34;, &#34;R$    44.33&#34;, &#34;R$84,950.00&#34;, &#34;R$   -22.00&#34;]
accounting.formatNumber(86960, 2, &#34;.&#34;, &#34;,&#34;); // &#34;86.960,00&#34;
(0.932).toFixed(2); // &#34;0.93&#34;
accounting.unformat(&#34;R$ 29.443,32&#34;, &#34;,&#34;); // 29443.32&lt;/pre&gt;

&lt;p&gt;Para padronizar o formato em todas as funções, sem a necessidade de utilizar parâmetros extras em suas chamadas, basta atualizar o objeto &lt;em&gt;accounting.settings&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;accounting.settings = {
  currency: {
      symbol : &#34;R$&#34;,
      decimal : &#34;,&#34;,
      thousand: &#34;.&#34;,
      precision : 2 
  }
}&lt;/pre&gt;

&lt;h2 id=&#34;masked-input&#34;&gt;Masked Input&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://digitalbush.com/projects/masked-input-plugin/&#34; title=&#34;http://digitalbush.com/projects/masked-input-plugin/&#34;&gt;http://digitalbush.com/projects/masked-input-plugin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ainda falando de formatação, temos o plugin MaskedInput, responsável por formatar qualquer &lt;em&gt;input&lt;/em&gt; em formulários, garantindo assim uma maior integridade dos dados digitados.&lt;/p&gt;

&lt;p&gt;Exemplos de uso:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$(&#34;.cnpj&#34;).mask(&#34;99.999.999/9999-99&#34;);
$(&#34;.cpf&#34;).mask(&#34;999.999.999-99&#34;);
$(&#34;.telefone&#34;).mask(&#34;(99) 9999-9999&#34;);
$(&#34;.cep&#34;).mask(&#34;99.999-999&#34;);&lt;/pre&gt;

&lt;p&gt;É importante lembrar que esses tipos de formatação e validação não devem ser realizados apenas no cliente &amp;#8211; devem ser processados também no servidor.&lt;/p&gt;

&lt;h2 id=&#34;ideal-forms&#34;&gt;Ideal Forms&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://elclanrs.github.com/jq-idealforms/&#34; title=&#34;http://elclanrs.github.com/jq-idealforms/&#34;&gt;http://elclanrs.github.com/jq-idealforms/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Formulários são uma parte importante de qualquer e-commerce e, geralmente, são a parte mais chata para o usuário: os cadastros tendem a ser tediosos, com campos desnecessários, validações mal-feitas e falta de informações.&lt;/p&gt;

&lt;p&gt;O plugin Ideal Forms é uma ferramenta completa para a criação de formulários intuitivos e visualmente atraentes. Seus recursos incluem &lt;em&gt;inputs&lt;/em&gt; customizáveis (&lt;em&gt;select&lt;/em&gt;, &lt;em&gt;radio&lt;/em&gt;, &lt;em&gt;checkbox&lt;/em&gt; e arquivo), validação &lt;em&gt;on-the-fly&lt;/em&gt; e um layout totalmente responsivo.&lt;/p&gt;

&lt;p&gt;A validação pode ser feita utilizando o atributo &lt;em&gt;data-ideal&lt;/em&gt;, como no exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div&amp;gt;&amp;lt;label&amp;gt;Usuário:&amp;lt;/label&amp;gt;&amp;lt;input type=&#34;text&#34; name=&#34;username&#34; data-ideal=&#34;required username&#34;/&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;label&amp;gt;Senha:&amp;lt;/label&amp;gt;&amp;lt;input type=&#34;text&#34; name=&#34;password&#34; data-ideal=&#34;required pass&#34;/&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Outra opção é utilizar parâmetros na inicialização do plugin. O Ideal Forms utiliza o atributo &lt;em&gt;name&lt;/em&gt; dos campos para configurações específicas:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$(&#39;#form-cadastro&#39;).idealforms({
    inputs: {
      &#39;idade&#39;: {
        filters: &#39;required min&#39;,
        data: { min: 18 },
        errors: { min: &#39;Você precisa ter 18 anos para comprar nesse site&#39; }
      }
    }
});&lt;/pre&gt;

&lt;p&gt;Ainda é possível dividir um formulário em passos, recurso indicado para o cadastro e o registro de um pedido em um e-commerce. Para isso, basta adicionar mais de um elemento &lt;em&gt;section&lt;/em&gt; dentro do seu formulário.&lt;/p&gt;

&lt;p&gt;A documentação do projeto é bem completa e está disponível no &lt;a href=&#34;https://github.com/elclanrs/jq-idealforms&#34; title=&#34;https://github.com/elclanrs/jq-idealforms&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;filtrify&#34;&gt;Filtrify&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://luis-almeida.github.com/filtrify/&#34; title=&#34;http://luis-almeida.github.com/filtrify/&#34;&gt;http://luis-almeida.github.com/filtrify/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Filtrify é um plugin jQuery que habilita filtros em tempo real, ideal para páginas de produtos em uma loja online. Basedo no atributo &lt;em&gt;data&lt;/em&gt; de elementos HTML, o Filtrify gera uma lista, possibilitando selecionar apenas elementos de um determinado filtro.&lt;/p&gt;

&lt;p&gt;O plugin recebe dois elementos: um &lt;em&gt;container&lt;/em&gt; para os filtros e outro para os elementos a serem filtrados. No exemplo abaixo temos uma lista de produtos (notem as categorias no atributo &lt;em&gt;data&lt;/em&gt;):&lt;/p&gt;

&lt;div id=&#34;filtros&#34;&gt;
&lt;/div&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;filtros&#34;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;ul id=&#34;produtos&#34;&amp;gt;
    &amp;lt;li data-categoria=&#34;informática, eletrônicos, computadores&#34;&amp;gt;Desktop Core i7&amp;lt;/li&amp;gt;
    &amp;lt;li data-genre=&#34;informática, acessórios, impressoras&#34;&amp;gt;Impressora HP Deskjet&amp;lt;/li&amp;gt;
    &amp;lt;li data-genre=&#34;informática, acessórios, tablets&#34;&amp;gt;iPad&amp;lt;/li&amp;gt;
    &amp;lt;li data-genre=&#34;telefonia, celular, apple&#34;&amp;gt;iPhone&amp;lt;/li&amp;gt;
    &amp;lt;li data-genre=&#34;informática, laptops&#34;&amp;gt;Notebook Positivo&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/pre&gt;

&lt;p&gt;A inicialização fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$.filtrify(&#34;produtos&#34;, &#34;filtros&#34;);&lt;/pre&gt;

&lt;p&gt;E o resultado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/02/filtrify.jpg&#34; alt=&#34;filtrify&#34; width=&#34;378&#34; height=&#34;333&#34; class=&#34;alignnone size-full wp-image-10921&#34; srcset=&#34;uploads/2013/02/filtrify.jpg 378w, uploads/2013/02/filtrify-190x168.jpg 190w, uploads/2013/02/filtrify-351x310.jpg 351w&#34; sizes=&#34;(max-width: 378px) 100vw, 378px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;jquery-zoom&#34;&gt;jQuery Zoom&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jacklmoore.com/zoom&#34; title=&#34;http://www.jacklmoore.com/zoom&#34;&gt;http://www.jacklmoore.com/zoom&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O plugin jQuery Zoom habilita o recurso de zoom em imagens com interações do mouse. A inicialização do plugin cria elementos novos para o efeito de zoom, portanto, deve ser aplicada em um elemento capaz de receber outros elementos (não pode ser aplicada em um elemento img).&lt;/p&gt;

&lt;p&gt;Exemplos de uso:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$(&#39;a.foto-produto&#39;).zoom(); 
$(&#39;a.foto-produto-grab&#39;).zoom({ on:&#39;grab&#39; });&lt;/pre&gt;

&lt;p&gt;As opções do plugin incluem os seguintes parâmetros: &lt;em&gt;url&lt;/em&gt; da imagem maior, &lt;em&gt;on&lt;/em&gt; (&lt;em&gt;mouseover&lt;/em&gt;, &lt;em&gt;grab&lt;/em&gt;, &lt;em&gt;click&lt;/em&gt; ou &lt;em&gt;toggle&lt;/em&gt;), &lt;em&gt;duration&lt;/em&gt; (velocidade do zoom) e &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;bônus-carrinho-de-compras-com-drag-and-drop&#34;&gt;Bônus: Carrinho de compras com drag and drop&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/carrinho-de-compras-com-drag-and-drop/&#34; title=&#34;http://tableless.com.br/carrinho-de-compras-com-drag-and-drop/&#34;&gt;http://tableless.com.br/carrinho-de-compras-com-drag-and-drop/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Há mais ou menos dois anos escrevi um tutorial aqui no Tableless mostrando como implementar um carrinho com funções de &lt;em&gt;drag and drop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Utilizando os métodos &lt;em&gt;draggable&lt;/em&gt; e &lt;em&gt;droppable&lt;/em&gt; da biblioteca jQueryUI, ao final do tutorial você tem um carrinho drag and drop completamente funcional, pronto para ser implementado no seu e-commerce.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/carrinho-compras/&#34; title=&#34;http://tableless.github.com/exemplos/carrinho-compras/&#34;&gt;Clique aqui&lt;/a&gt; para visualizar o exemplo do tutorial no navegador.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reveal.js: criando apresentações no navegador</title>
      <link>https://tableless.github.io/hugo-public/reveal-js-criando-apresentacoes-no-navegador/</link>
      <pubDate>Fri, 15 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/reveal-js-criando-apresentacoes-no-navegador/</guid>
      <description>

&lt;p&gt;Apresentações não estão mais limitadas a softwares e plataformas específicas – hoje em dia é possível criar slides utilizando o navegador e tecnologias como HTML5, CSS3 e JavaScript.&lt;/p&gt;

&lt;p&gt;Uma das responsáveis por isto é a biblioteca JavaScript &lt;a href=&#34;http://lab.hakim.se/reveal-js/&#34; target=&#34;_blank&#34;&gt;reveal.js&lt;/a&gt;, criada por Hakim El Hattab, desenvolvedor mais conhecido por seus &lt;a href=&#34;http://lab.hakim.se/&#34; target=&#34;_blank&#34;&gt;experimentos com animações CSS3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos criar uma apresentação básica e conhecer as opções disponíveis para personalizar nossos slides.&lt;/p&gt;

&lt;h2 id=&#34;estrutura-da-apresentação&#34;&gt;Estrutura da apresentação&lt;/h2&gt;

&lt;p&gt;Vamos começar fazendo o download da última versão da biblioteca reveal.js disponível no GitHub: &lt;a href=&#34;https://github.com/hakimel/reveal.js/downloads&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js/downloads&#34;&gt;https://github.com/hakimel/reveal.js/downloads&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feito isso, basta criar um arquivo index.html e copiar os arquivos da biblioteca para o diretório da apresentação. Nosso HTML inicial fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
    &amp;lt;title&amp;gt;Apresentação Exemplo Tableless&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/reveal.min.css&#34;&amp;gt;
    &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/theme/default.css&#34;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class=&#34;reveal&#34;&amp;gt;
      &amp;lt;div class=&#34;slides&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src=&#34;lib/js/head.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&#34;js/reveal.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;A apresentação precisa seguir uma estrutura pré-definida: a biblioteca irá procurar um &lt;em&gt;div&lt;/em&gt; com a classe &lt;em&gt;reveal&lt;/em&gt; que contenha outro &lt;em&gt;div&lt;/em&gt; com a classe &lt;em&gt;slides&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O elemento &lt;em&gt;div.slides&lt;/em&gt; receberá os slides de nossa apresentação. Os slides precisam ser elementos do tipo &lt;em&gt;section&lt;/em&gt;. Vamos, então, adicionar nossos três slides à apresentação:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;...
&amp;lt;div class=&#34;reveal&#34;&amp;gt;
  &amp;lt;div class=&#34;slides&#34;&amp;gt;
    &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Apresentações no navegador&amp;lt;/h1&amp;gt;
      &amp;lt;h3&amp;gt;Exemplo de apresentação Tableless&amp;lt;/h3&amp;gt;
    &amp;lt;/section&amp;gt;
    &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Sobre o autor&amp;lt;/h1&amp;gt;
      &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;15 anos de experiência&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;desenvolvedor na globo.com&amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/section&amp;gt;
    &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;reveal.js&amp;lt;/h1&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;desenvolvida por Hakim El Hattab&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;open source&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/section&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
...&lt;/pre&gt;

&lt;p&gt;O último passo é iniciar o objeto Reveal:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;...
&amp;lt;script src=&#34;lib/js/head.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&#34;js/reveal.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  Reveal.initialize();
&amp;lt;/script&amp;gt;
...&lt;/pre&gt;

&lt;p&gt;Agora basta abrir o arquivo index.html no seu navegador favorito e conferir o resultado.&lt;/p&gt;

&lt;h2 id=&#34;opções&#34;&gt;Opções&lt;/h2&gt;

&lt;p&gt;O método &lt;em&gt;initialize&lt;/em&gt; pode receber como parâmetro um objeto com as opções da apresentação. É possível, por exemplo, esconder os controles de navegação, habilitar navegação via teclado, alterar o efeito de transição dos slides, entre outros.&lt;/p&gt;

&lt;p&gt;Vamos agora mudar nossa inicialização, alterando algumas configurações:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Reveal.initialize({
  autoSlide: 6000,
  center: true,
  controls: false,
  mouseWheel: true,
  transition: &#39;concave&#39;
});&lt;/pre&gt;

&lt;p&gt;Com as configurações acima nós habilitamos a troca automática de slides após 6 segundos, centralizamos o conteúdo dos nossos slides, desabilitamos os controles de navegação, habilitamos a navegação utilizando o scroll do mouse e alteramos a transição dos slides para o efeito &amp;#8216;concave&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Para conferir uma lista completa de opções disponíveis, leia o &lt;a href=&#34;https://github.com/hakimel/reveal.js/blob/master/README.md#configuration&#34; target=&#34;_blank&#34;&gt;README&lt;/a&gt; do projeto no github.&lt;/p&gt;

&lt;h2 id=&#34;fragmentos&#34;&gt;Fragmentos&lt;/h2&gt;

&lt;p&gt;Para utilizar fragmentos com reveal.js basta adicionar a classe &lt;em&gt;fragment&lt;/em&gt; a um ou mais conteúdos dentro de um slide.&lt;/p&gt;

&lt;p&gt;Vamos alterar o nosso slide &amp;#8220;Sobre o autor&amp;#8221; e exibir os ítens da lista de forma fragmentada:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;...
   &amp;lt;h1&amp;gt;Sobre o autor&amp;lt;/h1&amp;gt;¬
   &amp;lt;ul&amp;gt;¬
     &amp;lt;li class=&#34;fragment&#34;&amp;gt;15 anos de experiência&amp;lt;/li&amp;gt;¬
     &amp;lt;li class=&#34;fragment&#34;&amp;gt;desenvolvedor na globo.com&amp;lt;/li&amp;gt;¬
   &amp;lt;/ul&amp;gt;¬
...&lt;/pre&gt;

&lt;p&gt;Atualizando a apresentação no navegador, ao chegar no slide acima, os elementos da lista serão exibidos passo a passo.&lt;/p&gt;

&lt;h2 id=&#34;temas-plugins&#34;&gt;Temas &amp;amp; Plugins&lt;/h2&gt;

&lt;p&gt;Além do tema padrão, a biblioteca reveal.js disponibiliza outros temas para nossas apresentações. São eles: &lt;em&gt;beige&lt;/em&gt;, &lt;em&gt;night&lt;/em&gt;, &lt;em&gt;serif&lt;/em&gt;, &lt;em&gt;simple&lt;/em&gt; e &lt;em&gt;sky&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para utilizar um tema diferente, basta alterar o link do CSS de &lt;em&gt;default&lt;/em&gt; para o tema desejado. No exemplo abaixo passamos a utilizar o tema &lt;em&gt;night&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;...
&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/reveal.min.css&#34;&amp;gt;
&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/theme/night.css&#34;&amp;gt;
...&lt;/pre&gt;

&lt;p&gt;Outra forma de alterar e estender nossa apresentação é utilizar o pacote de plugins que acompanha a biblioteca. Dentro do diretório &lt;em&gt;plugin&lt;/em&gt; estão disponíveis extensões para adicionar conteúdo com Markdown, zoom, notas e highlight de código.&lt;/p&gt;

&lt;p&gt;Para ativar um plugin, basta adicionar a opção &lt;em&gt;dependencies&lt;/em&gt; na inicialização do objeto Reveal:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Reveal.initialize({
  autoSlide: 6000,
  center: true,
  controls: false,
  mouseWheel: true,
  transition: &#39;concave&#39;,
  dependencies: [{ src: &#39;plugin/zoom-js/zoom.js&#39; }]
});&lt;/pre&gt;

&lt;p&gt;No exemplo acima habilitamos o plugin de zoom. Agora, ao utilizar a combinação &lt;em&gt;alt + clique do mouse&lt;/em&gt; aplicamos zoom in/zoom out nos slides.&lt;/p&gt;

&lt;h2 id=&#34;e-mais-8230&#34;&gt;E mais&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Isso foi só uma parte do que a biblioteca reveal.js oferece. É possível ainda criar temas próprios (o diretório de temas inclui um esqueleto em Sass), tirar proveito da API JavaScript do objeto Reveal (com métodos para controlar a navegação dos slides), escutar os eventos disparados por trocas de slides e fragmentos, entre outras coisas.&lt;/p&gt;

&lt;p&gt;Além do pacote JavaScript, você pode criar suas apresentações utilizando o serviço &lt;a href=&#34;http://www.rvl.io/&#34; target=&#34;_blank&#34;&gt;www.rvl.io&lt;/a&gt;, sem a necessidade de código.&lt;/p&gt;

&lt;p&gt;Para finalizar, seguem os links do código fonte do exemplo e da apresentação criada aqui:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tableless/exemplos/tree/gh-pages/revealjs&#34; target=&#34;_blank&#34;&gt;código fonte da apresentação&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/revealjs/&#34; target=&#34;_blank&#34;&gt;visualizar a apresentação no navegador&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>3 ferramentas para criar e gerenciar projetos web</title>
      <link>https://tableless.github.io/hugo-public/3-ferramentas-para-criar-e-gerenciar-projetos-web/</link>
      <pubDate>Tue, 05 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/3-ferramentas-para-criar-e-gerenciar-projetos-web/</guid>
      <description>

&lt;p&gt;Já foi o tempo que nossas aplicações web e sites eram compostos apenas por arquivos HTML e um ou outro CSS e JS. Hoje temos pré-processadores CSS, minificadores, &lt;a href=&#34;http://tableless.com.br/qualidade-codigo-javascript/&#34; title=&#34;http://tableless.com.br/qualidade-codigo-javascript/&#34;&gt;ferramentas de validação de JavaScript&lt;/a&gt;, grids, boilerplates, bootstraps e até mesmo JavaScript no servidor.&lt;/p&gt;

&lt;p&gt;Há também uma maior quantidade de arquivos e bibliotecas externas. Os arquivos CSS foram modularizados e JavaScript passou a ser (muito) mais aceita, ganhando ainda uma versão mais &amp;#8220;amigável&amp;#8221; na linguagem &lt;a href=&#34;http://tableless.com.br/javascript-com-cafe/&#34; title=&#34;http://tableless.com.br/javascript-com-cafe/&#34;&gt;CoffeeScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Neste artigo, você confere algumas opções para criar rapidamente uma aplicação inicial já com uma estrutura pré-definida e com as principais bibliotecas e ferramentas do mercado.&lt;/p&gt;

&lt;h2 id=&#34;yeoman&#34;&gt;Yeoman&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://yeoman.io&#34; title=&#34;http://yeoman.io&#34;&gt;yeoman.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desenvolvido com a ajuda de popstars como Paul Irish e Addy Osmani, o framework Yeoman consiste em um conjunto de ferramentas voltadas para criar rapidamente um novo projeto web e gerenciá-lo durante o processo. Seus comandos são baseados no utilitário Grunt e executam tarefas como minificação, lint e otimização de imagens.&lt;/p&gt;

&lt;p&gt;Um projeto criado via Yeoman, utilizando o comando &lt;em&gt;yeoman init&lt;/em&gt;, vem com algumas habilidades especiais. Você pode, por exemplo, escrever código em CoffeeScript e o Yeoman se encarrega, em background, de transformá-lo em JavaScript. O mesmo acontece para CSS escrito com Sass/Compass.&lt;/p&gt;

&lt;p&gt;O comando &lt;em&gt;yeoman server&lt;/em&gt; levanta um servidor local e monitora qualquer alteração nos arquivos do projeto, atualizando a página no navegador automaticamente.&lt;/p&gt;

&lt;p&gt;Outro comando importante é o &lt;em&gt;yeoman build&lt;/em&gt;, que gera uma versão pronta para produção, com todos os scripts e estilos validados e devidamente minificados. O Yeoman também otimiza todas as imagens utilizando bibliotecas especiais. O comando build também procura por bundles JavaScript e CSS e concatena seus arquivos.&lt;/p&gt;

&lt;h2 id=&#34;roots&#34;&gt;Roots&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://roots.cx&#34; title=&#34;http://roots.cx&#34;&gt;roots.cx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uma boa alternativa ao Yeoman é o Roots, framework que também concentra um set de ferramentas e boas práticas para agilizar a criação e manutenção de projetos web.&lt;/p&gt;

&lt;p&gt;O set padrão do Roots acompanha a template engine Jade, o pré-processador de CSS Stylus e a linguagem CoffeeScript.&lt;/p&gt;

&lt;p&gt;Os projetos são criados através do comando &lt;em&gt;roots new&lt;/em&gt;. O Roots também oferece um comando para live reload, &lt;em&gt;roots watch&lt;/em&gt;, monitorando qualquer alteração e atualizando o site no navegador através de um servidor local.&lt;/p&gt;

&lt;p&gt;É possível também utilizar diversos plugins para diferentes bibliotecas e utilitários (Sass, ejs etc.).&lt;/p&gt;

&lt;p&gt;Pacotes podem ser instalados através do comando &lt;em&gt;roots install&lt;/em&gt; . Tanto o Roots como o Yeoman utilizam o gerenciador de pacotes Bower, portanto é possível instalar qualquer um dos pacotes listados no repositório &lt;a href=&#34;http://sindresorhus.com/bower-components/&#34; title=&#34;http://sindresorhus.com/bower-components/&#34;&gt;sindresorhus.com/bower-components&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;brunch&#34;&gt;Brunch&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://brunch.io/&#34; title=&#34;http://brunch.io/&#34;&gt;brunch.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As diretrizes do projeto Brunch giram em torno de dois conceitos principais: plugins e esqueletos.&lt;/p&gt;

&lt;p&gt;Os plugins envolvem linguagens (JavaScript, CoffeeScript, LiveScript etc.), templates (Handlebars.js, Jade, Mustache etc.), pré-processadores de CSS (Sass, Stylus, LESS), validadores (JSLint e CoffeeLint) e minificadores (uglify.js e clean-css).&lt;/p&gt;

&lt;p&gt;Já os esqueletos definem o framework JavaScript e o set padrão de ferramentas. O esqueleto padrão cria um projeto utilizando o HTML5 Boilerplate, Chaplin com Backbone.js, CoffeeScript, Stylus e Handlebars. Outros esqueletos incluem um set com JavaScript puro, Sass e Twitter Bootstrap; um com Backbone e CoffeeScript; e até mesmo um com &lt;a href=&#34;http://tableless.com.br/criando-uma-aplicacao-simples-com-angularjs/&#34; title=&#34;http://tableless.com.br/criando-uma-aplicacao-simples-com-angularjs/&#34;&gt;AngularJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Assim como o Yeoman, o Brunch também utiliza a ferramenta Grunt para gerenciar e executar suas tarefas.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Essa foi uma apresentação inicial e, futuramente, pretendo escrever um artigo específico sobre cada um dos projetos listados aqui. E vocês, utilizam alguma outra alternativa? Deixem suas mensagens nos comentários!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando um plugin JavaScript (sem jQuery!)</title>
      <link>https://tableless.github.io/hugo-public/criando-um-plugin-javascript-sem-jquery/</link>
      <pubDate>Wed, 07 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-um-plugin-javascript-sem-jquery/</guid>
      <description>

&lt;p&gt;Neste artigo vamos criar um slider de imagens utilizando apenas JavaScript e CSS3, sem nenhuma biblioteca. O resultado final é um script de aproximadamente 160 linhas e menos de 3kb minificado. Poderia ser menor do que isso, mas nosso código vai ser extensível e 100% válido em uma &lt;a href=&#34;http://tableless.com.br/qualidade-codigo-javascript/&#34; title=&#34;Assegurando a qualidade do seu código JavaScript&#34;&gt;verificação JSLint&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/anatomia-de-um-plugin-jquery/&#34; title=&#34;Anatomia de um plugin jQuery&#34;&gt;Um plugin jQuery&lt;/a&gt; é basicamente um código que pode ser aplicado em um ou mais elementos do DOM. Para justificar sua existência, um plugin precisa ser, principalmente, flexível.&lt;/p&gt;

&lt;p&gt;O objetivo final é podermos instanciar nosso plugin com a seguinte chamada:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var slider = new JSlider(&#39;.slider&#39;);&lt;/pre&gt;

&lt;p&gt;Antes de tudo vamos precisar de um pequeno trecho de CSS que garantirá o estilo básico do nosso slider.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.jslider-stage {
    position: relative;
}

.jslider-track {
    overflow: hidden;
}

.jslider-track ul {
    transition: margin-left .5s ease;
    -webkit-transition: margin-left .5s ease;
    -moz-transition: margin-left .5s ease;
    -o-transition: margin-left .5s ease;
}

.jslider-track ul li {
    display: table-cell;
    text-align: center;
    vertical-align: middle;
}

.jslider-navigation {
    position: absolute;
    top: 0;
    width: 60px;
    height: 80px;
    background: #000;
    color: #fff;
}
.jslider-stage .left {
    left: 0;
}&lt;/pre&gt;

&lt;p&gt;Não vou explicar muito as declarações acima já que o nosso foco principal é o código JavaScript. O mais importante é que toda a parte de animação, responsável pelas transições entre imagens, é feita via CSS3, representando um belo ganho de performance:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.jslider-track ul {
    transition: margin-left .5s ease;
    -webkit-transition: margin-left .5s ease;
    -moz-transition: margin-left .5s ease;
    -o-transition: margin-left .5s ease;
}&lt;/pre&gt;

&lt;p&gt;Pensando um pouco na composição do código do nosso plugin, vamos criar dois objetos: um que será responsável pelo plugin em si e outro para representar cada slider instanciado na página. O próximo passo, então, é criar duas funções construtoras para nossos objetos:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function JSlider(selector) {
    this.init(selector);
}

function JSliderStage(el) {
    this.doc = document;
    this.init(el);
}&lt;/pre&gt;

&lt;p&gt;JSlider é o objeto do nosso plugin que armazenará um ou mais objetos JSliderStage.&lt;/p&gt;

&lt;p&gt;O objeto JSlider possui um único método, &lt;em&gt;init&lt;/em&gt;, responsável por inicializar nosso plugin e os objetos do tipo stage. Este método receberá um único parâmetro, o seletor no qual aplicaremos o plugin.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;JSlider.prototype.init = function (selector) {
    var elements = document.querySelectorAll(selector),
        i;

    this.slidersList = [];

    if (elements.length &amp;lt; 1) {
        return;
    }

    for (i = 0; i &amp;lt; elements.length; i += 1) {
        this.slidersList.push(new JSliderStage(elements[i]));
    }
};&lt;/pre&gt;

&lt;p&gt;Não existem classes em JavaScript, tudo é um objeto. No entanto, com o uso de prototypes, conseguimos criar objetos que servem como modelos. Ao adicionar um método ao prototype de um objeto, todas as instâncias que compartilham o mesmo prototype automaticamente herdam este novo método.&lt;/p&gt;

&lt;p&gt;Agora chegou a hora de estruturarmos o objeto responsável pelo slider em si. Vamos, antes de tudo, montar uma lista das funcionalidades a serem implementadas.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;inicialização, listando as imagens encontradas no seletor;&lt;/li&gt;
&lt;li&gt;construção do &amp;#8220;palco&amp;#8221;, definindo as dimensões de acordo com a maior foto;&lt;/li&gt;
&lt;li&gt;construção do &amp;#8220;trilho&amp;#8221; e carregamento das imagens;&lt;/li&gt;
&lt;li&gt;construção e inicialização da navegação entre imagens e&lt;/li&gt;
&lt;li&gt;carregamento de uma nova página.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O palco &amp;#8220;esconde&amp;#8221; boa parte do trilho que armazena as imagens, exibindo apenas a imagem atual. Ao clicar nos botões de navegação, o usuário desloca esse trilho no eixo X.&lt;/p&gt;

&lt;h3 id=&#34;queryselectorall&#34;&gt;querySelectorAll&lt;/h3&gt;

&lt;p&gt;O método &lt;em&gt;querySelectorAll&lt;/em&gt;, nativo do JavaScript, tem funcionamento parecido com um seletor jQuery, podendo receber tanto um id como uma classe. Primeiro verificamos se foi encontrado algum elemento e depois instanciamos os objetos JSliderStage para cada elemento encontrado.&lt;/p&gt;

&lt;h2 id=&#34;1-inicialização&#34;&gt;1. Inicialização&lt;/h2&gt;

&lt;p&gt;A função de inicialização é responsável por configurar os valores padrões de algumas variáveis e listar as imagens disponíveis no elemento pai. Caso não exista nenhuma imagem, nosso plugin cancela qualquer execução.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;JSliderStage.prototype.init = function (el) {
    this.root = el;
    this.currentPage = 1;
    this.images = this.root.querySelectorAll(&#39;img&#39;);

    if (this.images.length === 0) {
        return;
    }

    this.build();
};&lt;/pre&gt;

&lt;h2 id=&#34;2-palco&#34;&gt;2. Palco&lt;/h2&gt;

&lt;p&gt;Para construir o palco precisamos definir uma largura e uma altura máxima, baseada nas maiores imagens &amp;#8211; é isso que o método &lt;em&gt;getPageDimensions&lt;/em&gt; faz.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;JSliderStage.prototype.build = function () {
    this.getPageDimensions()
        .createStage()
        .initNavigation();
    this.root.innerHTML = &#39;&#39;;
    this.root.appendChild(this.stage);
};

JSliderStage.prototype.getPageDimensions = function () {
    var i;
    this.pageWidth = this.pageHeight = 0;
    for (i = 0; i &amp;lt; this.images.length; i += 1) {
        if (this.images[i].width &amp;gt; this.pageWidth) {
            this.pageWidth = this.images[i].width;
        }
        if (this.images[i].height &amp;gt; this.pageHeight) {
            this.pageHeight = this.images[i].height;
        }
    }
    return this;
};

JSliderStage.prototype.createStage = function () {
    this.stage = this.doc.createElement(&#39;div&#39;);
    this.stage.className = &#39;jslider-stage&#39;;
    this.stage.style.width = this.pageWidth + &#39;px&#39;;

    this.buildTrack()
        .loadImages();

    this.stage.appendChild(this.sliderTrack);

    return this;
};&lt;/pre&gt;

&lt;p&gt;O método &lt;em&gt;createStage&lt;/em&gt; adiciona ao DOM os elementos necessários para nosso palco e executa dois outros métodos: um para carregar o trilho e outro para carregar as imagens. Por fim, iniciamos a navegação com o método &lt;em&gt;initNavigation&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;createelement&#34;&gt;createElement&lt;/h3&gt;

&lt;p&gt;Este método da API JavaScript permite a criação de elementos que depois podem ser inseridos na árvore do DOM. É recomendado, por questões de performance, finalizar toda e qualquer manipulação antes de adicionar o elemento ao DOM.&lt;/p&gt;

&lt;h3 id=&#34;appendchild&#34;&gt;appendChild&lt;/h3&gt;

&lt;p&gt;O método appendChild adiciona um elemento criado a outro já existente na árvore do DOM. É semelhante aos métodos append/appendTo do jQuery.&lt;/p&gt;

&lt;h2 id=&#34;3-trilho&#34;&gt;3. Trilho&lt;/h2&gt;

&lt;p&gt;Nosso trilho é um elemento DIV com uma lista (UL) contendo as imagens do slider. A largura do DIV corresponde à largura da maior imagem, enquanto que a largura da lista representa a soma da largura de todas as imagens. Dessa forma, através do nosso CSS lá do início, a lista de imagens fica &amp;#8220;escondida&amp;#8221; atrás da DIV principal do trilho.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;JSliderStage.prototype.buildTrack = function () {
    this.sliderTrack = this.doc.createElement(&#39;div&#39;);
    this.sliderTrack.className = &#39;jslider-track&#39;;
    this.sliderTrack.style.height = this.pageHeight + &#39;px&#39;;
    return this;
};

JSliderStage.prototype.loadImages = function () {
    var i,
        li;

    this.imageList = this.doc.createElement(&#39;ul&#39;);
    this.imageList.style.width = (this.images.length * this.pageWidth) + &#39;px&#39;;

    for (i = 0; i &amp;lt; this.images.length; i += 1) {
        li = this.doc.createElement(&#39;li&#39;);
        li.style.width = this.pageWidth + &#39;px&#39;;
        li.style.height = this.pageHeight + &#39;px&#39;;
        li.appendChild(this.images[i]);
        this.imageList.appendChild(li);
    }

    this.sliderTrack.appendChild(this.imageList);
};&lt;/pre&gt;

&lt;h2 id=&#34;4-navegação&#34;&gt;4. Navegação&lt;/h2&gt;

&lt;p&gt;Finalizando nosso slide, precisamos implementar a navegação entre imagens. O método &lt;em&gt;initNavigation&lt;/em&gt; cria, caso necessário, os botões de anterior e próximo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;JSliderStage.prototype.initNavigation = function () {
    var positionTop = ((this.pageHeight / 2) - 40) + &#39;px&#39;;

    if (this.images.length &amp;lt; 2) {
        return this;
    }

    this.createNavigationButton(&#39;left&#39;, positionTop)
        .createNavigationButton(&#39;right&#39;, positionTop);

    this.navButtonsList = this.stage.querySelectorAll(&#39;.jslider-navigation&#39;);

    return this;
};

JSliderStage.prototype.createNavigationButton = function (direction, positionTop) {
    var navButton = this.doc.createElement(&#39;a&#39;),
        self = this,
        slidingLeft = (direction === &#39;left&#39;),
        page;

    navButton.className = &#39;jslider-navigation &#39; + direction + (slidingLeft ? &#39; off&#39; : &#39;&#39;);
    navButton.style.top = positionTop;
    navButton.href = &#39;#&#39;;
    navButton.innerHTML = (slidingLeft ? &#39;&amp;lsaquo;&#39; : &#39;&amp;rsaquo;&#39;);

    navButton.onclick = function (e) {
        e.preventDefault();
        page = (slidingLeft ? self.currentPage - 1 : self.currentPage + 1);
        self.gotoPage(page);
    };

    this.stage.appendChild(navButton);

    return this;
};&lt;/pre&gt;

&lt;p&gt;Já o método &lt;em&gt;gotoPage&lt;/em&gt; é responsável por carregar a imagem correta e habilitar/desabilitar os botões de navegação de acordo com a imagem atual.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;JSliderStage.prototype.gotoPage = function (page) {
    var marginLeft = (-1) * ((page - 1) * this.pageWidth);
    if (page &amp;lt; 1 || page &amp;gt; this.images.length) {
        return;
    }

    this.setNavigationState(page);

    this.imageList.style.marginLeft = marginLeft + &#39;px&#39;;
    this.currentPage = page;
};

JSliderStage.prototype.setNavigationState = function (page) {
    if (page === 1) {
        this.navButtonsList[0].classList.add(&#39;off&#39;);
        this.navButtonsList[1].classList.remove(&#39;off&#39;);
    } else {
        this.navButtonsList[0].classList.remove(&#39;off&#39;);
        if (page === this.images.length) {
            this.navButtonsList[1].classList.add(&#39;off&#39;);
        } else {
            this.navButtonsList[1].classList.remove(&#39;off&#39;);
        }
    }
};&lt;/pre&gt;

&lt;h3 id=&#34;escopo&#34;&gt;escopo&lt;/h3&gt;

&lt;p&gt;No método &lt;em&gt;createNavigationButton&lt;/em&gt; armazenamos o objeto &lt;em&gt;this&lt;/em&gt; na variável self. Isso é necessário porque precisamos referenciar o escopo anterior quando associamos a navegação no evento de clique dos links. Se tivéssemos utilizado diretamente o &lt;em&gt;this&lt;/em&gt;, estaríamos referenciando o escopo do clique, o que não era nosso objetivo. Além de self, é comum encontrar nomes como instance e that em variáveis que armazenam o escopo atual de um método.&lt;/p&gt;

&lt;h3 id=&#34;classlist&#34;&gt;classList&lt;/h3&gt;

&lt;p&gt;A propriedade classList permite a manipulação de classes em um elemento do DOM. Podemos consultar, remover a adicionar novas classes.&lt;/p&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;p&gt;É claro que o código final é bem simples, mas a ideia principal era mostrar que nem sempre precisamos utilizar jQuery em nossas aplicações, mesmo com o jQuery disponível na estrutura do projeto.&lt;/p&gt;

&lt;p&gt;Finalizando, algumas melhorias que ficam de dever de casa para vocês:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;temporizador para trocar imagens, sendo configurável na inicialização do plugin&lt;/li&gt;
&lt;li&gt;suporte a browsers mais antigos, mantendo a funcionalidade&lt;/li&gt;
&lt;li&gt;carregamento de qualquer conteúdo nos slides, não só imagens&lt;/li&gt;
&lt;li&gt;navegação via teclado&lt;/li&gt;
&lt;li&gt;exibir miniaturas navegáveis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/testando-seu-codigo-jquery-com-jasmine-parte-1/&#34; title=&#34;Testando seu código jQuery com Jasmine – Parte 1&#34;&gt;escrever testes com Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;código-completo-do-plugin&#34;&gt;Código completo do plugin&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://jsfiddle.net/jnQJu/&#34; target=&#34;_blank&#34;&gt;Nosso plugin em ação no jsFiddle&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;/*jslint browser:true */
&#39;use strict&#39;;

function JSlider(selector) {
    this.init(selector);
}

function JSliderStage(el) {
    this.doc = document;
    this.init(el);
}

JSlider.prototype.init = function (selector) {
    var elements = document.querySelectorAll(selector),
        i;

    this.slidersList = [];

    if (elements.length &amp;lt; 1) {
        return;
    }

    for (i = 0; i &amp;lt; elements.length; i += 1) {
        this.slidersList.push(new JSliderStage(elements[i]));
    }
};

JSliderStage.prototype.init = function (el) {
    this.root = el;
    this.currentPage = 1;
    this.images = this.root.querySelectorAll(&#39;img&#39;);

    if (this.images.length === 0) {
        return;
    }

    this.build();
};

JSliderStage.prototype.build = function () {
    this.getPageDimensions()
        .createStage()
        .initNavigation();
    this.root.innerHTML = &#39;&#39;;
    this.root.appendChild(this.stage);
};

JSliderStage.prototype.getPageDimensions = function () {
    var i;
    this.pageWidth = this.pageHeight = 0;
    for (i = 0; i &amp;lt; this.images.length; i += 1) {
        if (this.images[i].width &amp;gt; this.pageWidth) {
            this.pageWidth = this.images[i].width;
        }
        if (this.images[i].height &amp;gt; this.pageHeight) {
            this.pageHeight = this.images[i].height;
        }
    }
    return this;
};

JSliderStage.prototype.createStage = function () {
    this.stage = this.doc.createElement(&#39;div&#39;);
    this.stage.className = &#39;jslider-stage&#39;;
    this.stage.style.width = this.pageWidth + &#39;px&#39;;

    this.buildTrack()
        .loadImages();

    this.stage.appendChild(this.sliderTrack);

    return this;
};

JSliderStage.prototype.buildTrack = function () {
    this.sliderTrack = this.doc.createElement(&#39;div&#39;);
    this.sliderTrack.className = &#39;jslider-track&#39;;
    this.sliderTrack.style.height = this.pageHeight + &#39;px&#39;;
    return this;
};

JSliderStage.prototype.loadImages = function () {
    var i,
        li;

    this.imageList = this.doc.createElement(&#39;ul&#39;);
    this.imageList.style.width = (this.images.length * this.pageWidth) + &#39;px&#39;;

    for (i = 0; i &amp;lt; this.images.length; i += 1) {
        li = this.doc.createElement(&#39;li&#39;);
        li.style.width = this.pageWidth + &#39;px&#39;;
        li.style.height = this.pageHeight + &#39;px&#39;;
        li.appendChild(this.images[i]);
        this.imageList.appendChild(li);
    }

    this.sliderTrack.appendChild(this.imageList);
};

JSliderStage.prototype.initNavigation = function () {
    var positionTop = ((this.pageHeight / 2) - 40) + &#39;px&#39;;

    if (this.images.length &amp;lt; 2) {
        return this;
    }

    this.createNavigationButton(&#39;left&#39;, positionTop)
        .createNavigationButton(&#39;right&#39;, positionTop);

    this.navButtonsList = this.stage.querySelectorAll(&#39;.jslider-navigation&#39;);

    return this;
};

JSliderStage.prototype.createNavigationButton = function (direction, positionTop) {
    var navButton = this.doc.createElement(&#39;a&#39;),
        self = this,
        slidingLeft = (direction === &#39;left&#39;),
        page;

    navButton.className = &#39;jslider-navigation &#39; + direction + (slidingLeft ? &#39; off&#39; : &#39;&#39;);
    navButton.style.top = positionTop;
    navButton.href = &#39;#&#39;;
    navButton.innerHTML = (slidingLeft ? &#39;&amp;lsaquo;&#39; : &#39;&amp;rsaquo;&#39;);

    navButton.onclick = function (e) {
        e.preventDefault();
        page = (slidingLeft ? self.currentPage - 1 : self.currentPage + 1);
        self.gotoPage(page);
    };

    this.stage.appendChild(navButton);

    return this;
};

JSliderStage.prototype.gotoPage = function (page) {
    var marginLeft = (-1) * ((page - 1) * this.pageWidth);
    if (page &amp;lt; 1 || page &amp;gt; this.images.length) {
        return;
    }

    this.setNavigationState(page);

    this.imageList.style.marginLeft = marginLeft + &#39;px&#39;;
    this.currentPage = page;
};

JSliderStage.prototype.setNavigationState = function (page) {
    if (page === 1) {
        this.navButtonsList[0].classList.add(&#39;off&#39;);
        this.navButtonsList[1].classList.remove(&#39;off&#39;);
    } else {
        this.navButtonsList[0].classList.remove(&#39;off&#39;);
        if (page === this.images.length) {
            this.navButtonsList[1].classList.add(&#39;off&#39;);
        } else {
            this.navButtonsList[1].classList.remove(&#39;off&#39;);
        }
    }
};&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Underscore.js: cinto de utilidades JavaScript</title>
      <link>https://tableless.github.io/hugo-public/underscore-js-cinto-de-utilidades-javascript/</link>
      <pubDate>Wed, 19 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/underscore-js-cinto-de-utilidades-javascript/</guid>
      <description>

&lt;p&gt;Underscore.js é uma pequena biblioteca de códigos utilitários voltados principalmente para a manipulação de estrutura de dados.&lt;/p&gt;

&lt;p&gt;Por míseros 4kb você ganha funcionalidades como &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;select&lt;/em&gt; e &lt;em&gt;invoke&lt;/em&gt;, além de uma engine de &lt;em&gt;templating&lt;/em&gt; que, por si só, já faz valer o uso da biblioteca.&lt;/p&gt;

&lt;p&gt;Outro ponto legal é que os scripts procuram sempre utilizar recursos nativos do navegador, ou seja, em browsers modernos a biblioteca tira proveito das implementações de &lt;em&gt;forEach&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;indexOf&lt;/em&gt;, &lt;em&gt;filter&lt;/em&gt; etc.&lt;/p&gt;

&lt;h2 id=&#34;utilizando&#34;&gt;Utilizando&lt;/h2&gt;

&lt;p&gt;O processo é simples e conhecido. Basta fazer o [download do código-fonte][1] e incluir o script em sua página/aplicação. Todas as novas funcionalidades ficam disponíveis através do objeto global da biblioteca, o caractere underscore: _. Funciona basicamente como o $ do jQuery.&lt;/p&gt;

&lt;p&gt;Vejamos agora algumas das principais funções disponibilizadas.&lt;/p&gt;

&lt;h2 id=&#34;coleções-arrays-e-objetos&#34;&gt;Coleções (arrays e objetos)&lt;/h2&gt;

&lt;h3 id=&#34;each&#34;&gt;each&lt;/h3&gt;

&lt;p&gt;Este método varre uma lista de elementos e retorna a chave (quando houver) e o valor para uma função pré-determinada.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.each([&amp;#8216;BA&amp;#8217;, &amp;#8216;MT&amp;#8217;, &amp;#8216;RJ&amp;#8217;, &amp;#8216;RN&amp;#8217;, &amp;#8216;RS&amp;#8217;], function (estado) { console.log(estado); });&lt;/p&gt;

&lt;p&gt;_.each({RJ: &amp;#8216;Rio de Janeiro&amp;#8217;, SP: &amp;#8216;São Paulo&amp;#8217;, RS: &amp;#8216;Rio Grande do Sul&amp;#8217;}, function (estado, sigla) { console.log(estado + &amp;#8216;/&amp;#8217; + sigla); });&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;map&#34;&gt;map&lt;/h3&gt;

&lt;p&gt;A função &lt;strong&gt;map&lt;/strong&gt; retorna uma nova lista de elementos criada a partir de uma função executada em cada um dos itens da lista original.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var times = [&amp;#8216;Flamengo&amp;#8217;, &amp;#8216;Fluminense&amp;#8217;, &amp;#8216;Vasco&amp;#8217;, &amp;#8216;Botafogo&amp;#8217;];&lt;/p&gt;

&lt;p&gt;_.map(times, function (time) { return time + &amp;#8216;-RJ&amp;#8217;; });&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;Flamengo-RJ&amp;#8221;, &amp;#8220;Fluminense-RJ&amp;#8221;, &amp;#8220;Vasco-RJ&amp;#8221;, &amp;#8220;Botafogo-RJ&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;filter&#34;&gt;filter&lt;/h3&gt;

&lt;p&gt;O utilitário &lt;strong&gt;filter&lt;/strong&gt; busca por elementos que retornem verdadeiro no teste especificado.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var multiplosDeTres = _.filter([1, 2, 3, 4, 5, 6, 7, 8, 9], function(num){ return num % 3 == 0; });&lt;/p&gt;

&lt;p&gt;// [3, 6, 9]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;find&#34;&gt;find&lt;/h3&gt;

&lt;p&gt;Diferentemente do método &lt;strong&gt;_filter_&lt;/strong&gt;, o &lt;strong&gt;_find_&lt;/strong&gt; retorna apenas o primeiro elemento que passe no teste especificado.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var primeiroMultiploDeTres = _.find([1, 2, 3, 4, 5, 6, 7, 8, 9], function(num){ return num % 3 == 0; });&lt;/p&gt;

&lt;p&gt;// 3&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;pluck&#34;&gt;pluck&lt;/h3&gt;

&lt;p&gt;O método &lt;strong&gt;_pluck&lt;/strong&gt; é uma versão muito usada do utilitário &lt;strong&gt;_map_&lt;/strong&gt; que retorna uma lista formada por valores de uma propriedade específica.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var estados = [{sigla: &amp;#8216;RJ&amp;#8217;, nome: &amp;#8216;Rio de Janeiro&amp;#8217;},&lt;/p&gt;

&lt;p&gt;{sigla: &amp;#8216;SP&amp;#8217;, nome: &amp;#8216;São Paulo&amp;#8217;},&lt;/p&gt;

&lt;p&gt;{sigla: &amp;#8216;RS&amp;#8217;, nome: &amp;#8216;Rio Grande do Sul&amp;#8217;}],&lt;/p&gt;

&lt;p&gt;nomes = _.pluck(estados, &amp;#8216;nome&amp;#8217;);&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;Rio de Janeiro&amp;#8221;, &amp;#8220;São Paulo&amp;#8221;, &amp;#8220;Rio Grande do Sul&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;max-min&#34;&gt;max, min&lt;/h3&gt;

&lt;p&gt;Os métodos &lt;strong&gt;max&lt;/strong&gt; e &lt;strong&gt;min&lt;/strong&gt; retornam os maiores e menores valores em uma lista. Estes valores podem ser tanto os números em uma lista simples, como valores de propriedades de um objeto quando você especifica uma função.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var numeros = [100, 32, 29, 105, 30];&lt;/p&gt;

&lt;p&gt;_.min(numeros);&lt;/p&gt;

&lt;p&gt;// 29&lt;/p&gt;

&lt;p&gt;_.max(numeros);&lt;/p&gt;

&lt;p&gt;// 105&lt;/p&gt;

&lt;p&gt;var times = [{nome: &amp;#8216;Flamengo&amp;#8217;, titulos: 6},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Fluminense&amp;#8217;, titulos: 2},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Vasco&amp;#8217;, titulos: 4},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Botafogo&amp;#8217;, titulos: 1}];&lt;/p&gt;

&lt;p&gt;_.max(times, function (time) { return time.titulos });&lt;/p&gt;

&lt;p&gt;// {nome: &amp;#8220;Flamengo&amp;#8221;, titulos: 6}&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;sortby&#34;&gt;sortBy&lt;/h3&gt;

&lt;p&gt;Este método ordena uma lista do maior para o menor valor. O parâmetro de ordenação pode ser uma propriedade comum dos objetos ou uma função comparativa.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;// usando a mesma variável times acima 🙂&lt;/p&gt;

&lt;p&gt;_.sortBy(times, &amp;#8216;titulos&amp;#8217;).reverse();&lt;/p&gt;

&lt;p&gt;// [{nome: &amp;#8220;Flamengo&amp;#8221;, titulos: 6}, {nome: &amp;#8220;Vasco&amp;#8221;, titulos: 4}, {nome: &amp;#8220;Fluminense&amp;#8221;, titulos: 2}, {nome: &amp;#8220;Botafogo&amp;#8221;, titulos: 1}]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h2 id=&#34;arrays&#34;&gt;Arrays&lt;/h2&gt;

&lt;h3 id=&#34;first-last&#34;&gt;first, last&lt;/h3&gt;

&lt;p&gt;Os métodos &lt;strong&gt;first&lt;/strong&gt; e &lt;strong&gt;last&lt;/strong&gt; retornam, respectivamente, os primeiros e os últimos elementos de um array. Você pode especificar, como segundo parâmetro, a quantidade de itens a ser retornada.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var linguagens = [&amp;#8216;ruby&amp;#8217;, &amp;#8216;python&amp;#8217;, &amp;#8216;php&amp;#8217;, &amp;#8216;java&amp;#8217;];&lt;/p&gt;

&lt;p&gt;_.first(linguagens, 2);&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;ruby&amp;#8221;, &amp;#8220;python&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.last(linguagens);&lt;/p&gt;

&lt;p&gt;// java&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;union&#34;&gt;union&lt;/h3&gt;

&lt;p&gt;O método &lt;strong&gt;union&lt;/strong&gt; retorna uma lista com os elementos únicos de dois ou mais arrays.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.union([1, 2, 3], [4, 3], [10, 2, 9])&lt;/p&gt;

&lt;p&gt;// [1, 2, 3, 4, 10, 9]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;difference&#34;&gt;difference&lt;/h3&gt;

&lt;p&gt;O utilitário &lt;strong&gt;difference&lt;/strong&gt; retorna elementos de um array que não estão presentes em outros arrays.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var times = [&amp;#8216;Flamengo&amp;#8217;, &amp;#8216;Vasco&amp;#8217;, &amp;#8216;Botafogo&amp;#8217;, &amp;#8216;Fluminense&amp;#8217;];&lt;/p&gt;

&lt;p&gt;var segundaDivisao = [&amp;#8216;Vasco&amp;#8217;, &amp;#8216;Botafogo&amp;#8217;];&lt;/p&gt;

&lt;p&gt;var terceiraDivisao = [&amp;#8216;Fluminense&amp;#8217;];&lt;/p&gt;

&lt;p&gt;_.difference(times, segundaDivisao, terceiraDivisao);&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;Flamengo&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;indexof&#34;&gt;indexOf&lt;/h3&gt;

&lt;p&gt;O método &lt;strong&gt;indexOf&lt;/strong&gt; retorna o índice de um elemento no array especificado.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var times = [&amp;#8216;Flamengo&amp;#8217;, &amp;#8216;Vasco&amp;#8217;, &amp;#8216;Botafogo&amp;#8217;, &amp;#8216;Fluminense&amp;#8217;];&lt;/p&gt;

&lt;p&gt;_.indexOf(times, &amp;#8216;Vasco&amp;#8217;);&lt;/p&gt;

&lt;p&gt;// 1&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h2 id=&#34;funções&#34;&gt;Funções&lt;/h2&gt;

&lt;h3 id=&#34;bind&#34;&gt;bind&lt;/h3&gt;

&lt;p&gt;Não confunda o &lt;strong&gt;bind&lt;/strong&gt; do Underscore.js com o &lt;strong&gt;bind&lt;/strong&gt; do jQuery. Aqui, este método associa um objeto a uma função, ou seja, o &lt;strong&gt;this&lt;/strong&gt; no contexto da função será o objeto informado. Você ainda pode passar valores para os parâmetros da função.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var retornaTotalArtigos = function () { return this.nome + &amp;#8216;: &amp;#8216; + this.totalArtigos };&lt;/p&gt;

&lt;p&gt;retornaTotalArtigos = _.bind(retornaTotalArtigos, {nome: &amp;#8216;Davi Ferreira&amp;#8217;, totalArtigos: 12});&lt;/p&gt;

&lt;p&gt;retornaTotalArtigos();&lt;/p&gt;

&lt;p&gt;// Davi Ferreira: 12&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;once&#34;&gt;once&lt;/h3&gt;

&lt;p&gt;O método &lt;strong&gt;once&lt;/strong&gt; cria uma função que só pode ser executada uma única vez. As próximas chamadas da função vão sempre retornar o valor da primeira execução.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var dataCarregamentoInicial = function () { return +new Date; };&lt;/p&gt;

&lt;p&gt;dataCarregamentoInicial = _.once(dataCarregamentoInicial);&lt;/p&gt;

&lt;p&gt;dataCarregamentoInicial();&lt;/p&gt;

&lt;p&gt;dataCarregamentoInicial();&lt;/p&gt;

&lt;p&gt;// as duas chamadas vão retornar sempre o mesmo timestamp&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h2 id=&#34;objetos&#34;&gt;Objetos&lt;/h2&gt;

&lt;h3 id=&#34;keys-values&#34;&gt;keys, values&lt;/h3&gt;

&lt;p&gt;Os métodos acima retornam, respectivamente, os nomes e os valores das propriedades de um objeto.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.keys({RJ: &amp;#8216;Rio de Janeiro&amp;#8217;, SP: &amp;#8216;São Paulo&amp;#8217;, RS: &amp;#8216;Rio Grande do Sul&amp;#8217;});&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;RJ&amp;#8221;, &amp;#8220;SP&amp;#8221;, &amp;#8220;RS&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.values({RJ: &amp;#8216;Rio de Janeiro&amp;#8217;, SP: &amp;#8216;São Paulo&amp;#8217;, RS: &amp;#8216;Rio Grande do Sul&amp;#8217;});&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;Rio de Janeiro&amp;#8221;, &amp;#8220;São Paulo&amp;#8221;, &amp;#8220;Rio Grande do Sul&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;clone&#34;&gt;clone&lt;/h3&gt;

&lt;p&gt;Este método clona um objeto, mantendo suas referências.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.clone({RJ: &amp;#8216;Rio de Janeiro&amp;#8217;, SP: &amp;#8216;São Paulo&amp;#8217;, RS: &amp;#8216;Rio Grande do Sul&amp;#8217;});&lt;/p&gt;

&lt;p&gt;// {RJ: &amp;#8216;Rio de Janeiro&amp;#8217;, SP: &amp;#8216;São Paulo&amp;#8217;, RS: &amp;#8216;Rio Grande do Sul&amp;#8217;}&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;funções-verificadoras&#34;&gt;funções verificadoras&lt;/h3&gt;

&lt;p&gt;A biblioteca Underscore.js oferece uma vasta gama de funções verificadoras para objetos, entre elas: &lt;strong&gt;isEqual&lt;/strong&gt;, &lt;strong&gt;isEmpty&lt;/strong&gt;, &lt;strong&gt;isFunction&lt;/strong&gt; e &lt;strong&gt;isNull&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var obj = {},&lt;/p&gt;

&lt;p&gt;obj2 = {};&lt;/p&gt;

&lt;p&gt;_.isEmpty(obj);&lt;/p&gt;

&lt;p&gt;// true&lt;/p&gt;

&lt;p&gt;obj = {site: &amp;#8216;Tableless&amp;#8217;, categorias: [&amp;#8216;JavaScript&amp;#8217;. &amp;#8216;jQuery&amp;#8217;, &amp;#8216;HTML5&amp;#8217;]};&lt;/p&gt;

&lt;p&gt;obj2 = {site: &amp;#8216;Tableless&amp;#8217;, categorias: [&amp;#8216;JavaScript&amp;#8217;. &amp;#8216;jQuery&amp;#8217;, &amp;#8216;HTML5&amp;#8217;]};&lt;/p&gt;

&lt;p&gt;_.isEqual(obj, obj2);&lt;/p&gt;

&lt;p&gt;// true&lt;/p&gt;

&lt;p&gt;obj = function () { console.log(&amp;#8216;Sou uma funcção!&amp;#8217;); };&lt;/p&gt;

&lt;p&gt;_.isFunction(obj);&lt;/p&gt;

&lt;p&gt;// true&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h2 id=&#34;utilitários&#34;&gt;Utilitários&lt;/h2&gt;

&lt;h3 id=&#34;mixin&#34;&gt;mixin&lt;/h3&gt;

&lt;p&gt;Este método permite a criação de suas próprias funções utilitárias no objeto Underscore.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.mixin({&lt;/p&gt;

&lt;p&gt;isEven : function(number) {&lt;/p&gt;

&lt;p&gt;return number % 2 ? false : true;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;_.isEven(3);&lt;/p&gt;

&lt;p&gt;// false&lt;/p&gt;

&lt;p&gt;_.isEven(10);&lt;/p&gt;

&lt;p&gt;// true&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;escape&#34;&gt;escape&lt;/h3&gt;

&lt;p&gt;O método &lt;strong&gt;escape&lt;/strong&gt; transforma caracteres como &amp;#8220;&amp;amp;&amp;#8221; e &amp;#8220;/&amp;#8221; para utilização dentro de um bloco HTML.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.escape(&amp;#8216;&lt;/p&gt;

&lt;p&gt;Tableless: JavaScript, HTML &amp;amp; CSS&lt;/p&gt;

&lt;p&gt;&amp;#8216;);&lt;/p&gt;

&lt;p&gt;// &lt;p&gt;Tableless: JavaScript, HTML &amp;amp; CSS&amp;lt;&amp;#x2F;p&amp;gt;&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;template&#34;&gt;template&lt;/h3&gt;

&lt;p&gt;Por fim, um método para aplicar templates em seu código JavaScript:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var times = [{nome: &amp;#8216;Flamengo&amp;#8217;, titulos: 6},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Fluminense&amp;#8217;, titulos: 2},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Vasco&amp;#8217;, titulos: 4},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Botafogo&amp;#8217;, titulos: 1}],&lt;/p&gt;

&lt;p&gt;tpl = &amp;#8220;&amp;lt;% _.each(times, function(time) { %&amp;gt; &lt;li&gt;&amp;lt;%= time.nome %&amp;gt; &amp;#8211; &amp;lt;%= time.titulos %&amp;gt; título(s)&lt;/li&gt; &amp;lt;% }); %&amp;gt;&amp;#8221;;&lt;/p&gt;

&lt;p&gt;_.template(tpl, {times: times});&lt;/p&gt;

&lt;p&gt;// &lt;li&gt;Flamengo &amp;#8211; 6 título(s)&lt;/li&gt; &lt;li&gt;Fluminense &amp;#8211; 2 título(s)&lt;/li&gt; &lt;li&gt;Vasco &amp;#8211; 4 título(s)&lt;/li&gt; &lt;li&gt;Botafogo &amp;#8211; 1 título(s)&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;Para facilitar e aumentar a legibilidade, o seu template pode ser declarado em uma tag script separada:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;script type=&amp;#8221;text/html&amp;#8221; id=&amp;#8221;tplTimes&amp;#8221;&gt;
  
&lt;% _.each(times, function(time) { %&gt;
    
&lt;li&gt;&lt;%= time.nome %&gt; &amp;#8211; &lt;%= time.titulos %&gt; título(s)&lt;/li&gt;
  
&lt;% }); %&gt;
  
&lt;/script&gt;

&lt;script&gt;
  
var times = [{nome: &amp;#8216;Flamengo&amp;#8217;, titulos: 6},
               
{nome: &amp;#8216;Fluminense&amp;#8217;, titulos: 2},
               
{nome: &amp;#8216;Vasco&amp;#8217;, titulos: 4},
               
{nome: &amp;#8216;Botafogo&amp;#8217;, titulos: 1}],
      
tpl = $(&amp;#8216;#tplTimes&amp;#8217;).html();
  
_.template(tpl, {times: times});
  
&lt;/script&gt;
  

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;Estes foram apenas alguns exemplos de métodos e funções utilitárias presentes na biblioteca Underscore.js. Para saber mais sobre o projeto, visite o &lt;a href=&#34;http://underscorejs.org/&#34;&gt;site oficial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[1]: &lt;a href=&#34;http://underscorejs.org/&#34;&gt;http://underscorejs.org/&lt;/a&gt; &amp;ldquo;&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando uma aplicação simples com AngularJS</title>
      <link>https://tableless.github.io/hugo-public/criando-uma-aplicacao-simples-com-angularjs/</link>
      <pubDate>Thu, 26 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-uma-aplicacao-simples-com-angularjs/</guid>
      <description>

&lt;p&gt;AngularJS é o mais novo lançamento do time de desenvolvedores do Google. Diferentemente de outros frameworks JavaScript, ele adota uma abordagem mais ligada à sintaxe HTML, funcionando como uma espécie de extensão da linguagem.&lt;/p&gt;

&lt;p&gt;Neste artigo, vamos criar uma aplicação simples de lista de compras e aprender os conceitos básicos do framework no que diz respeito à associação, manipulação e exibição de dados.&lt;/p&gt;

&lt;h2 id=&#34;estrutura-inicial&#34;&gt;Estrutura inicial&lt;/h2&gt;

&lt;p&gt;Assim como qualquer aplicação web, nosso ponta-pé inicial acontece com a criação de um página básica. A diferença aqui é que vamos informar um nova propriedade na tag do nosso arquivo: &lt;strong&gt;ng-app&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Lista de compras&amp;lt;/title&amp;gt;
        &amp;lt;script src=&#34;http://code.angularjs.org/1.0.1/angular-1.0.1.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Essa é a grande sacada do AngularJS. Ao declarar a propriedade ng-app, estamos inicializando a nossa aplicação. É a primeira de algumas novas propriedades que iremos utilizar. Todo o funcionamento do framework gira em torno dessas novas declarações.&lt;/p&gt;

&lt;p&gt;O atributo ng-app na tag informa que o nosso DOM, além de HTML, é também um documento AngularJS. Esta propriedade pode ser utilizada em qualquer elemento do DOM &amp;mdash; em alguns casos, apenas uma parte do seu HTML será uma aplicação Angular. Por baixo dos panos, o framework define o elemento com o atributo ng-app como a raiz da aplicação.&lt;/p&gt;

&lt;h2 id=&#34;olá-tableless&#34;&gt;Olá, Tableless!&lt;/h2&gt;

&lt;p&gt;Para provar que o foco do Angular está no HTML e não no JavaScript, vamos implementar um exemplo simples em nossa estrutura:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;AngularJS - Tableless&amp;lt;/title&amp;gt;
        &amp;lt;script src=&#34;http://code.angularjs.org/1.0.1/angular-1.0.1.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;input type=&#34;text&#34; ng-model=&#34;nome&#34;&amp;gt;
        &amp;lt;p&amp;gt;Olá, Tableless! Meu nome é: {{ nome }}&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Ao carregarmos esse HTML no navegador e digitarmos qualquer coisa no input, o parágrafo é atualizado automagicamente. Perceberam que até agora não escrevemos nenhum código JavaScript?&lt;/p&gt;

&lt;p&gt;A propriedade &lt;em&gt;ng-model&lt;/em&gt; funciona como um canal entre a nossa view e o form. Ela pode ser utilizada em inputs do tipo texto, selects, textareas, checkboxes e radio buttons.&lt;/p&gt;

&lt;p&gt;O model, seus dados e suas validações ficam automaticamente disponíveis no escopo da nossa aplicação, como veremos a seguir.&lt;/p&gt;

&lt;p&gt;A associação de dados é feita através do famoso &amp;#8220;bigode-bigode&amp;#8221; ({{ }}), passando nomes presentes no escopo (no exemplo acima, o model &lt;strong&gt;nome&lt;/strong&gt;).&lt;/p&gt;

&lt;h2 id=&#34;enfim-javascript&#34;&gt;Enfim, JavaScript!&lt;/h2&gt;

&lt;p&gt;Chegou a hora de escrevermos nosso primeiro trecho de código JavaScript. Vamos criar um controller para nossa aplicação que carrega uma lista inicial de ítens. Os ítens são armazenados no escopo da aplicação ($scope).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function ListaComprasController($scope) {
    $scope.itens = [
        {produto: &#39;Leite&#39;, quantidade: 2, comprado: false},
        {produto: &#39;Cerveja&#39;, quantidade: 12, comprado: false}
    ];
}&lt;/pre&gt;

&lt;p&gt;E é só isso por enquanto!&lt;/p&gt;

&lt;h2 id=&#34;exibindo-nossos-ítens&#34;&gt;Exibindo nossos ítens&lt;/h2&gt;

&lt;p&gt;Vamos agora adicionar um novo bloco HTML com a tabela de listagem dos produtos:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div ng-controller=&#34;ListaComprasController&#34;&amp;gt;
    &amp;lt;table&amp;gt;
      &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;Produto&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;Quantidade&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/thead&amp;gt;
      &amp;lt;tbody&amp;gt;
        &amp;lt;tr ng-repeat=&#34;item in itens&#34;&amp;gt;
          &amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;{{ item.produto }}&amp;lt;/strong&amp;gt;&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;{{ item.quantidade }}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Duas novidades foram apresentadas no HTML acima:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;o atributo &lt;strong&gt;ng-controller&lt;/strong&gt; informa o nome do controller JavaScript responsável pelo bloco contido no elemento, no nosso caso o controller &lt;em&gt;ListaComprasController&lt;/em&gt; definido anteriormente.&lt;/li&gt;
&lt;li&gt;o atributo &lt;strong&gt;ng-repeat&lt;/strong&gt; executa um &lt;em&gt;loop&lt;/em&gt; na variável &lt;strong&gt;itens&lt;/strong&gt; declarada no escopo da aplicação, retornando cada ítem e imprimindo o produto e a quantidade em uma linha da nossa tabela. O formato é: &lt;retorno&gt; in &lt;coleção&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adicionando-produtos&#34;&gt;Adicionando produtos&lt;/h2&gt;

&lt;p&gt;Para não ficarmos apenas com 4 linhas de JavaScript, vamos adicionar uma funcionalidade que inclui ítens em nossa lista de compras.&lt;/p&gt;

&lt;p&gt;O primeiro passo é criar um formulário que será responsável pela ação:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;form class=&#34;form-inline&#34; name=&#34;formItem&#34;&amp;gt;
  &amp;lt;input type=&#34;text&#34; ng-model=&#34;item.produto&#34;&amp;gt;
  &amp;lt;input type=&#34;number&#34; ng-model=&#34;item.quantidade&#34;&amp;gt;
  &amp;lt;button ng-click=&#34;adicionaItem()&#34;&amp;gt;adicionar ítem&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;&lt;/pre&gt;

&lt;p&gt;Estamos utilizando de novo o atributo &lt;strong&gt;ng-model&lt;/strong&gt; para definir um model para os nossos inputs. O controller passa a receber diretamente informações sobre esses campos.&lt;/p&gt;

&lt;p&gt;A novidade dessa vez fica por conta do atributo &lt;strong&gt;ng-click&lt;/strong&gt;, que recebe uma função que precisamos declarar no controller:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function ListaComprasController($scope) {
    $scope.itens = [
        {produto: &#39;Leite&#39;, quantidade: 2, comprado: false},
        {produto: &#39;Cerveja&#39;, quantidade: 12, comprado: false}
    ];

    $scope.adicionaItem = function () {
        $scope.itens.push({produto: $scope.item.produto,
                           quantidade: $scope.item.quantidade,
                           comprado: false});
        $scope.item.produto = $scope.item.quantidade = &#39;&#39;;
    };
}&lt;/pre&gt;

&lt;p&gt;Ao clicarmos no botão, o produto é adicionado à tabela. Aqui o model poderia estar realizando diversas validações disponíveis na API do framework entre outras coisas. Porém, no nosso exemplo, apenas adicionamos um novo ítem à lista de produtos e em seguida limpamos os models (os campos do formulário).&lt;/p&gt;

&lt;h2 id=&#34;testes&#34;&gt;Testes&lt;/h2&gt;

&lt;p&gt;Por ser um framework que demanda um código JavaScript mais estruturado, fica bem simples testar sua aplicação. Utilizando &lt;a href=&#34;http://tableless.com.br/testando-seu-codigo-jquery-com-jasmine-parte-1/&#34; target=&#34;_blank&#34;&gt;Jasmine&lt;/a&gt;, por exemplo, poderíamos facilmente testar o controller dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;describe(&#39;Lista Compras Unitário&#39;, function () {
    describe(&#39;ListaComprasController&#39;, function () {
        beforeEach(function () {
            this.$scope = {};
            this.controller = new ListaComprasController(this.$scope);
        });

        it(&#39;deve criar &#34;itens&#34; com 2 ítens&#39;, function () {
            expect(this.$scope.itens.length).toBe(2);
        });

        describe(&#39;adicionaItem&#39;, function () {
            it(&#39;deve adicionar um novo ítem à lista com dados do escopo&#39;, function () {
                this.$scope.item = {};
                this.$scope.item.produto = &#39;Carne&#39;;
                this.$scope.item.quantidade = 5;
                this.$scope.adicionaItem();
                expect(this.$scope.itens.length).toBe(3);
                expect(this.$scope.itens[2].produto).toBe(&#39;Carne&#39;);
                expect(this.$scope.itens[2].quantidade).toBe(5);
                expect(this.$scope.itens[2].comprado).toBeFalse;
            });
        });
    });
});&lt;/pre&gt;

&lt;h2 id=&#34;angularjs-é-muito-mais-do-que-isso&#34;&gt;AngularJS é muito mais do que isso!&lt;/h2&gt;

&lt;p&gt;Deixei muitos tópicos de fora por enquanto. O objetivo aqui era mostrar o potencial do framework AngularJS. Seus recursos ainda incluem rotas, múltiplas views, AJAX e serviços REST e a criação de componentes personalizados. O que vocês viram foi o básico do básico, uma introdução.&lt;/p&gt;

&lt;p&gt;No &lt;a href=&#34;http://angularjs.org/&#34; target=&#34;_blank&#34;&gt;site do framework&lt;/a&gt; há uma documentação bem completa, com diversos tutoriais.&lt;/p&gt;

&lt;p&gt;O código fonte do nosso exemplo vocês encontram no &lt;a href=&#34;https://github.com/tableless/exemplos/tree/gh-pages/angularjs/lista-compras/&#34; target=&#34;_blank&#34;&gt;Github do Tableless&lt;/a&gt;. E &lt;a href=&#34;http://tableless.github.com/exemplos/angularjs/lista-compras/&#34; target=&#34;_blank&#34;&gt;nesse link&lt;/a&gt; vocês conseguem visualizar nossa lista de compras em ação.&lt;/p&gt;

&lt;p&gt;Finalizando, nosso camarada Vedovelli gravou um &lt;a href=&#34;http://blog.vedovelli.com.br/?p=1946&#34; target=&#34;_blank&#34;&gt;screencast&lt;/a&gt; bem completo sobre o AngularJS, recomendo!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Assegurando a qualidade do seu código JavaScript</title>
      <link>https://tableless.github.io/hugo-public/qualidade-codigo-javascript/</link>
      <pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/qualidade-codigo-javascript/</guid>
      <description>

&lt;p&gt;Enquanto &lt;a href=&#34;http://tableless.com.br/testando-seu-codigo-jquery-com-jasmine-parte-1/&#34; target=&#34;_blank&#34;&gt;testes automatizados&lt;/a&gt; asseguram o funcionamento de suas aplicações e, portanto, também a qualidade, algumas ferramentas atuam em outra área importante do seu código: a sintaxe.&lt;/p&gt;

&lt;p&gt;Ferramentas de lint são scripts que interpretam seus arquivos javascript e buscam erros como varáveis não utilizadas, espaços em branco no final de linha, ausência de ponto-e-vírgula (um ponto polêmico) entre outros.&lt;/p&gt;

&lt;p&gt;Abaixo você encontra alguns utilitários que buscam garantir melhor qualidade e padrão para seus códigos.&lt;/p&gt;

&lt;p&gt;É importante ressaltar que esse tipo de ferramenta &lt;em&gt;não&lt;/em&gt; garante que seu código está funcionando, que a lógica está correta, garante apenas a presença de boas práticas de desenvolvimento.&lt;/p&gt;

&lt;h2 id=&#34;jslint&#34;&gt;JSLint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jslint.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.jslint.com/&#34;&gt;http://www.jslint.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desenvolvida por ninguém menos do que Douglas Crockford, pai do famoso &amp;#8220;The Good Parts&amp;#8221;, esta ferramenta busca tanto erros de sintaxe, como erros estruturais.&lt;/p&gt;

&lt;p&gt;As regras e convenções utilizadas na análise podem ser encontradas no site &lt;a href=&#34;http://javascript.crockford.com/code.html&#34; target=&#34;_blank&#34;&gt;javascript.crockford.com/code.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você pode utilizar a &lt;a href=&#34;http://www.jslint.com/&#34; target=&#34;_blank&#34;&gt;versão online da ferramenta&lt;/a&gt;, ou então instalar o script através do gerenciador de pacotes do NodeJS (npm). O código-fonte está &lt;a href=&#34;https://github.com/douglascrockford/JSLint&#34; target=&#34;_blank&#34;&gt;disponível no GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/07/gjslint.jpg&#34; alt=&#34;&#34; width=&#34;605&#34; height=&#34;439&#34; class=&#34;alignnone size-full wp-image-6383&#34; srcset=&#34;uploads/2012/07/gjslint.jpg 605w, uploads/2012/07/gjslint-300x217.jpg 300w&#34; sizes=&#34;(max-width: 605px) 100vw, 605px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;jshint&#34;&gt;JSHint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jshint.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.jshint.com/&#34;&gt;http://www.jshint.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A ferramenta JSHint teve início como um &lt;em&gt;fork&lt;/em&gt; da JSLint, visando uma maior flexibilidade, permitindo configurações de acordo com necessidades específicas.&lt;/p&gt;

&lt;p&gt;A documentação do projeto inclui uma &lt;a href=&#34;http://www.jshint.com/options/&#34; target=&#34;_blank&#34;&gt;página de opções disponíveis&lt;/a&gt; para essa personalização.&lt;/p&gt;

&lt;p&gt;Assim como a JSLint, a JSHint pode &lt;a href=&#34;http://www.jshint.com/&#34; target=&#34;_blank&#34;&gt;analisar seu código online&lt;/a&gt; ou pode ser instalada via NPM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/07/jshint.jpg&#34; alt=&#34;&#34; width=&#34;770&#34; height=&#34;361&#34; class=&#34;alignnone size-full wp-image-6385&#34; srcset=&#34;uploads/2012/07/jshint.jpg 770w, uploads/2012/07/jshint-300x140.jpg 300w&#34; sizes=&#34;(max-width: 770px) 100vw, 770px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;closure-linter&#34;&gt;Closure Linter&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/closure/utilities/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://developers.google.com/closure/utilities/&#34;&gt;https://developers.google.com/closure/utilities/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Diferentemente das ferramentas anteriores, a Closure Linter obriga o uso do estilo JavaScript defendido pela Google. É utilizada em todos os projetos da empresa, incluindo Gmail, Docs e Reader.&lt;/p&gt;

&lt;p&gt;Também diferentemente das anteriores, a Closure Linter vem acompanhada de um script para corrigir os erros encontrados. Ou seja, ela não apenas indica o que está errado, como também oferece uma maneira de &amp;#8220;corrigir&amp;#8221; seu código automaticamente.&lt;/p&gt;

&lt;p&gt;Os utilitários podem ser baixados na &lt;a href=&#34;https://developers.google.com/closure/utilities/&#34; target=&#34;_blank&#34;&gt;página do projeto no Google Code&lt;/a&gt;. O script &lt;em&gt;gjslint&lt;/em&gt; é o responsável pela análise de código enquanto o &lt;em&gt;fixjsstyle&lt;/em&gt; corrige os erros encontrados.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/07/gjslint.jpg&#34; alt=&#34;&#34; width=&#34;605&#34; height=&#34;439&#34; class=&#34;alignnone size-full wp-image-6383&#34; srcset=&#34;uploads/2012/07/gjslint.jpg 605w, uploads/2012/07/gjslint-300x217.jpg 300w&#34; sizes=&#34;(max-width: 605px) 100vw, 605px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;jquery-lint&#34;&gt;jQuery Lint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://james.padolsey.com/javascript/jquery-lint/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://james.padolsey.com/javascript/jquery-lint/&#34;&gt;http://james.padolsey.com/javascript/jquery-lint/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para finalizar, uma ferramenta para os fãs de jQuery que analisa a sintaxe e a estrutura. Ela funciona de forma diferente das demais: sua aplicação é feita na página, ou seja, o script deve ser chamado após o código da sua aplicação, A resposta é enviada para o console do navegador.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script src=&#34;aplicacao.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&#34;jquery.lint.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;É altamente configurável e pode ser adaptada para os padrões de desenvolvimento do seu projeto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/07/jquerylint.jpg&#34; alt=&#34;&#34; width=&#34;366&#34; height=&#34;149&#34; class=&#34;alignnone size-full wp-image-6384&#34; srcset=&#34;uploads/2012/07/jquerylint.jpg 366w, uploads/2012/07/jquerylint-300x122.jpg 300w&#34; sizes=&#34;(max-width: 366px) 100vw, 366px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O código-fonte do projeto está disponível no GitHub: &lt;a href=&#34;https://github.com/padolsey/jQuery-Lint&#34; target=&#34;_blank&#34;&gt;github.com/padolsey/jQuery-Lint&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>