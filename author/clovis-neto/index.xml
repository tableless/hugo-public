<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clovis Neto on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/clovis-neto/index.xml</link>
    <description>Recent content in Clovis Neto on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/clovis-neto/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>All Animation CSS3 ‚Äì Criar anima√ß√µes CSS3 nunca foi t√£o f√°cil</title>
      <link>https://tableless.github.io/hugo-public/animation-css3-criar-animacoes-css3-nunca-foi-tao-facil/</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/animation-css3-criar-animacoes-css3-nunca-foi-tao-facil/</guid>
      <description>

&lt;p&gt;Criar anima√ß√µes para nossos websites era algo &amp;#8220;impens√°vel&amp;#8221; no passado. Com o surgimento do CSS3 e a morte do flash, a cria√ß√£o de websites din√¢micos, animados e leves, foi ficando cada vez mais f√°cil. Quem diria que h√° 7 anos atr√°s poder√≠amos alterar nossas anima√ß√µes para web sem precisar ter o flash instalado na nossa m√°quina ou at√© mesmo criar sites com efeitos paralax?¬†Os devs antigos sabem bem o que¬†estou querendo dizer.&lt;/p&gt;

&lt;p&gt;Assim como o HTML5, o CSS3 tamb√©m veio com v√°rias novidades interessantes e revolucion√°rias&amp;#8230; Entre elas temos a propriedade &lt;strong&gt;animation.&lt;/strong&gt; Com esta riqu√≠ssima propriedade, podemos¬†produzir transi√ß√µes apenas com CSS. Mas isso voc√™ j√° sabe. Mesmo assim, a propriedade animation e tamb√©m o m√©todo keyframe podem ser ruins de gerenciar quando temos muita anima√ß√£o em um mesmo site. Ai, se houver um framework que ajude esse trabalho, nossa vida se torna mais f√°cil. √â a√≠ que entra o All Animation CSS3.&lt;/p&gt;

&lt;h1 id=&#34;o-framework-all-animation-css3&#34;&gt;O framework All Animation CSS3&lt;/h1&gt;

&lt;p&gt;Bastante empolgado com estas riqu√≠ssimas possibilidades que a propriedade animation nos oferece, eu e o Jeftar Mascarenhas resolvemos criar¬†um framework de anima√ß√µes css3, que gra√ßas a Deus est√° dando &amp;#8220;alguns acessos&amp;#8221;, e hoje irei compartilhar com meus amigos &amp;#8220;dev&amp;#8217;s ninjas&amp;#8221;. Seu nome √© o &lt;strong&gt;All Animation CSS3&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;8220-all-8230-8221-oqu√™&#34;&gt;&amp;#8220;All &amp;#8230;&amp;#8221; oqu√™?&lt;/h2&gt;

&lt;p&gt;O nome soa meio ir√¥nico pois All Animation CSS3 (todas as anima√ß√µes css3) nada mais √© que um framework que re√∫ne ricas anima√ß√µes CSS3 para voc√™ utilizar no seu projeto acad√™mico ou comercial.¬†Cont√©m um¬†conjunto de anima√ß√µes, divertidas para deixar seu projeto mais sexy. S√£o anima√ß√µes cross-browser que dar√£o mais √™nfase a suas p√°ginas como controles deslizantes, efeitos 3D‚Äôs e etc&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;quando-usar&#34;&gt;Quando usar?&lt;/h2&gt;

&lt;p&gt;Como qualquer framework, seu objetivo √© agilizar o processo de cria√ß√£o no seu dia-a-dia. Se voc√™ assumiu um projeto grande, cujo o per√≠odo de tempo √© muito curto e com certeza, n√£o teria tempo pra desenvolver anima√ß√µes interessantes&amp;#8230; utilizar este framework seria √≥timo para ganhar uns &amp;#8220;timers&amp;#8221; a mais.&lt;/p&gt;

&lt;h2 id=&#34;quando-n√£o-usar&#34;&gt;Quando n√£o usar?&lt;/h2&gt;

&lt;p&gt;Como citei acima, o All Animation √© ¬†muito bom para quem est√° com uma carga de trabalho muito alta e um curto per√≠odo de tempo pra desenvolver, mas se voc√™ tem um tempo¬†extra para desenvolver seus projetos, ent√£o pode ficar √† vontade para criar suas anima√ß√µes na m√£o.&lt;/p&gt;

&lt;h1 id=&#34;8220-muito-bem-eu-quero-utilizar-nos-meus-projetos-8221&#34;&gt;&amp;#8220;Muito bem, eu quero utilizar nos meus projetos&amp;#8221;&lt;/h1&gt;

&lt;h2 id=&#34;por-onde-come√ßar&#34;&gt;Por onde come√ßar:&lt;/h2&gt;

&lt;p&gt;√â f√°cil integrar o framework no nosso projeto¬†üòÄ , veremos passo a passo como ultiliz√°-lo.&lt;/p&gt;

&lt;h4 id=&#34;passo-1-inclua-os-arquivos-necess√°rios-no-head-para-que-suas-anima√ß√µes-funcionem-corretamente&#34;&gt;Passo 1, inclua os arquivos necess√°rios no head, para que suas anima√ß√µes¬†funcionem¬†corretamente:&lt;/h4&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;yourpath/all-animation.css&#34; /&amp;gt;
&amp;lt;script type=&#34;text/javascript&#34; src=&#34;yourpath/jquery.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;passo-2-dentro-das-delimita√ß√µes-da-tag-body-coloque-a-seguinte-estrutura-html&#34;&gt;Passo 2, dentro das delimita√ß√µes da tag body, coloque a seguinte estrutura html:&lt;/h4&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;animation&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;button class=&#34;anny-class&#34;&amp;gt;Trigger class, go!&amp;lt;/button&amp;gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;**Obs: &amp;#8220;&lt;button&gt;&amp;#8221; &lt;strong&gt;√© opcional, pois voc√™ tamb√©m pode criar uma anima√ß√£o sem precisar de um ativador (pois o button funciona como um disparador da anima√ß√£o)&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-3-voc√™-pode-usar-a-seguinte-linha-de-c√≥digo-jquery-para-disparar-a-sua-anima√ß√£o&#34;&gt;Passo 3, voc√™ pode usar a seguinte linha de c√≥digo jQuery, para disparar a sua anima√ß√£o:&lt;/h3&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;.anny-class&#34;).click(function(){
 $(&#34;#animation&#34;).addClass(&#34;journal&#34;);
});
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;journal √© uma das classes que o nosso framework disponibiliza para n√≥s usarmos&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Caso queira adicionar o efeito em algum determinado tempo, voc√™ pode adicionar um temporizador:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;setTimeout(function(){
 $(&#34;#animation&#34;).addClass(&#34;journal&#34;);
},2000);
&lt;/pre&gt;

&lt;h1 id=&#34;aten√ß√£o&#34;&gt;Aten√ß√£o:&lt;/h1&gt;

&lt;p&gt;Se voc√™ optar adicionar mais alguma anima√ß√£o em um elemento que j√° sofreu uma outra anima√ß√£o do All Animation, ou queira reiniciar a anima√ß√£o, voc√™ ter√° que remover a classe da √∫ltima anima√ß√£o e inserir a sua, ex:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#animation&#34;).removeClass(&#34;journal&#34;).addClass(&#34;four-rock&#34;);&lt;/pre&gt;

&lt;p&gt;Temos v√°rias classes no lugar da class journal, vejamos quais s√£o:&lt;/p&gt;

&lt;h3 id=&#34;especiais&#34;&gt;Especiais:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    dance
  &lt;/li&gt;
  &lt;li&gt;
    journal
  &lt;/li&gt;
  &lt;li&gt;
    pulse
  &lt;/li&gt;
  &lt;li&gt;
    pulse-slow
  &lt;/li&gt;
  &lt;li&gt;
    jamp
  &lt;/li&gt;
  &lt;li&gt;
    four-rock
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bounce&#34;&gt;Bounce:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    enter-up-bounce
  &lt;/li&gt;
  &lt;li&gt;
    enter-down-bounce
  &lt;/li&gt;
  &lt;li&gt;
    enter-right-bounce
  &lt;/li&gt;
  &lt;li&gt;
    enter-left-bounce
  &lt;/li&gt;
  &lt;li&gt;
    scale-bounce
  &lt;/li&gt;
  &lt;li&gt;
    jump-bounce
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;perspective&#34;&gt;Perspective:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    tree-flip-right
  &lt;/li&gt;
  &lt;li&gt;
    tree-flip
  &lt;/li&gt;
  &lt;li&gt;
    tree-flip-up
  &lt;/li&gt;
  &lt;li&gt;
    tree-flip-down
  &lt;/li&gt;
  &lt;li&gt;
    flip-left-bounce
  &lt;/li&gt;
  &lt;li&gt;
    rotate-flip
  &lt;/li&gt;
  &lt;li&gt;
    flip-right-bounce
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fading-entrances&#34;&gt;Fading Entrances:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    flip-top
  &lt;/li&gt;
  &lt;li&gt;
    flip-left
  &lt;/li&gt;
  &lt;li&gt;
    flip-right
  &lt;/li&gt;
  &lt;li&gt;
    flip-bottom
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rotate&#34;&gt;&amp;gt;Rotate:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    rotate-flip-down
  &lt;/li&gt;
  &lt;li&gt;
    rotate-down-bounce
  &lt;/li&gt;
  &lt;li&gt;
    rotate-out
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;agrecives&#34;&gt;&amp;gt;Agrecives:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    flash-bang
  &lt;/li&gt;
  &lt;li&gt;
    bomba
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;N√£o irei listar todas, at√© porque estou adicionando mais com o passar do tempo üòÄ&lt;/p&gt;

&lt;h1 id=&#34;mais-algu√©m-utiliza&#34;&gt;Mais algu√©m utiliza?&lt;/h1&gt;

&lt;p&gt;Segundo o google analytics, no primeiro m√™s¬†que lancei este framework , mais de 127 pa√≠ses usaram o All Animation em seus projetos üòÄ&lt;/p&gt;

&lt;h1 id=&#34;finalizando-8230&#34;&gt;Finalizando&amp;#8230;&lt;/h1&gt;

&lt;p&gt;Segue abaixo dois links para mais informa√ß√µes:&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Ir para √† p√°gina do All Animation CSS3&#34; href=&#34;http://clovisdasilvaneto.github.io/all-animation/&#34; target=&#34;_blank&#34;&gt;Clique aqui para visualizar uma demo, dos efeitos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;clique aqui para abrir o reposit√≥rio no github&#34; href=&#34;https://github.com/clovisdasilvaneto/all-animation&#34; target=&#34;_blank&#34;&gt;Github, clique aqui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por hoje √© s√≥ meus amigos ninjas, obrigado pela aten√ß√£o, e at√© a pr√≥xima. üòÄ&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Web Speech API ‚Äì Reconhecimento de voz com JavaScript</title>
      <link>https://tableless.github.io/hugo-public/web-speech-api-reconhecimento-de-voz-com-javascript/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/web-speech-api-reconhecimento-de-voz-com-javascript/</guid>
      <description>

&lt;p&gt;O reconhecimento de voz tem v√°rias aplica√ß√µes no mundo real. Muitas pessoas tornaram-se familiarizadas com este conceito gra√ßas a softwares como o Siri e S-Voice. Esta aplica√ß√£o pode melhorar drasticamente a usabilidade dos websites, principalmente para deficientes visuais. Imagine websites onde os usu√°rios podem navegar pelas p√°ginas ou preencher campos de formul√°rio usando a sua voz¬†e at√© mesmo¬†interagir com a p√°gina enquanto dirige, sem tirar os olhos da estrada.&lt;/p&gt;

&lt;h1 id=&#34;o-que-√©-web-speech-api&#34;&gt;O que √© Web Speech API?&lt;/h1&gt;

&lt;p&gt;A Web Speech API¬†foi¬†lan√ßada no final de 2012 e permite que os desenvolvedores¬†forne√ßam a entrada de voz e recursos de sa√≠da de texto-para-voz em um navegador web.¬†Esta API cuida da privacidade dos usu√°rios, pois antes de deixar o site para acessar a voz atrav√©s do microfone, o usu√°rio deve explicitamente conceder a permiss√£o.¬†Curiosamente, o pedido de autoriza√ß√£o √© o mesmo que a¬†API getUserMedia, apesar de n√£o precisar da webcam. Se a p√°gina que executa esta API usa o protocolo HTTPS, o navegador solicita a permiss√£o apenas uma vez.&lt;/p&gt;

&lt;p&gt;Ent√£o veremos logo abaixo, um exemplo b√°sico de como podemos implementar esta nova API aos nossos¬†projetos:&lt;/p&gt;

&lt;h1 id=&#34;criando-a-primeira-p√°gina-com-reconhecimento-de-voz&#34;&gt;Criando a primeira p√°gina com reconhecimento de voz:&lt;/h1&gt;

&lt;h2 id=&#34;passo-1-8211-estrutura-html&#34;&gt;Passo 1 &amp;#8211; Estrutura HTML:&lt;/h2&gt;

&lt;p&gt;A estrutura HTML √© bem simples, vejamos a marca√ß√£o abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;p id=&#34;ola&#34;&amp;gt;Ol√° tableless, voc√™ falou:&amp;lt;/p&amp;gt;

&amp;lt;div id=&#34;transcription&#34;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;button id=&#34;rect&#34;&amp;gt;Gravar&amp;lt;/button&amp;gt;

&amp;lt;span id=&#34;unsupported&#34; class=&#34;hidden&#34;&amp;gt;API not supported&amp;lt;/span&amp;gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Onde:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Transcription &amp;#8211;&lt;/strong&gt; Onde se encontrar√° o texto informando oque o usu√°rio falou&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rect &amp;#8211;&lt;/strong&gt; Bot√£o para reconhecer a voz do usu√°rio&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unsupported &amp;#8211;&lt;/strong&gt; Caso a API n√£o seja suportada pelo browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;passo-2-8211-testando&#34;&gt;Passo 2 &amp;#8211; Testando&lt;/h2&gt;

&lt;p&gt;Como qualquer API, temos que verificar primeiramente se o browser suporta SpeechRecognition:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// Test browser support
window.SpeechRecognition = window.SpeechRecognition ||
window.webkitSpeechRecognition ||
null;

//caso n√£o suporte esta API DE VOZ            
if (window.SpeechRecognition === null) {
    document.getElementById(&#39;unsupported&#39;).classList.remove(&#39;hidden&#39;);
}else {
    //......
}
&lt;/pre&gt;

&lt;h2 id=&#34;passo-3-8211-m√©todos-e-propriedades&#34;&gt;Passo 3¬†&amp;#8211; M√©todos e propriedades&lt;/h2&gt;

&lt;p&gt;Depois de testar a compatibilidade da API, iremos instanciar o reconhecedor de ¬†voz, usando o speechRecognition(). Como o c√≥digo listado¬†abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var recognizer = new window.SpeechRecognition();
&lt;/pre&gt;

&lt;p&gt;Este objeto exp√µe os seguintes m√©todos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;onstart:&lt;/strong&gt; Define um callback que √© disparado quando o servi√ßo de reconhecimento come√ßou a ouvir o √°udio com a inten√ß√£o de reconhecer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onResult:&lt;/strong&gt; Define um callback que √© disparado quando o reconhecedor de voz retorna um resultado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onerror:&lt;/strong&gt; Define um callback que √© acionado quando ocorre um erro de reconhecimento de voz.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onend:&lt;/strong&gt; Define um callback que √© disparado quando o servi√ßo foi desligado. O evento deve sempre ser gerado quando a sess√£o termina, n√£o importa o que a raz√£o.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Iremos criar uma var√°vel que ser√° respons√°vel por exibir o texto que o usu√°rio falou e tamb√©m iremos definir a propriedade &lt;strong&gt;continuous = &lt;span style=&#34;color: #3366ff&#34;&gt;true&lt;/span&gt;&lt;/strong&gt;, que faz com que o reconhecedor de voz n√£o pare de ouvir, mesmo que tenha pausas do usu√°rio.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;var transcription = document.getElementById(&#34;transcription&#34;);

            //Para o reconhecedor de voz, n√£o parar de ouvir, mesmo que tenha pausas no usuario
            recognizer.continuous = true;
&lt;/pre&gt;

&lt;p&gt;Agora iremos definir a fun√ß√£o &amp;#8220;onresult&amp;#8221; que define um callback que √© disparado quando o reconhecedor de voz retorna um resultado.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;recognizer.onresult = function(event){
                transcription.textContent = &#34;&#34;;
                for (var i = event.resultIndex; i &amp;lt; event.results.length; i++) {
                    if(event.results[i].isFinal){
                        transcription.textContent = event.results[i][0].transcript+&#39; (Taxa de acerto [0/1] : &#39; + event.results[i][0].confidence + &#39;)&#39;;
                    }else{
                        transcription.textContent += event.results[i][0].transcript;
                    }
                }
            }
&lt;/pre&gt;

&lt;p&gt;Vamos analisar este c√≥digo um pouco mais detalhadamente:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;transcription.textContent = &amp;#8220;&amp;#8221;; ¬† ¬†&lt;/strong&gt;Faz com que limpe o texto que se encontra dentro da &amp;#8220;&lt;div id=&amp;#8221;transcription&amp;#8221;&gt;&amp;#8221;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;for (var i = event.resultIndex; i &amp;lt; event.results.length; i++) {¬†&lt;/strong&gt;¬†Loop que pecorre o evento que cont√©m o texto que o usu√°rio falou.&lt;/p&gt;

&lt;p&gt;Note que dentro deste loop, h√° uma condi√ß√£o, que verifica se o evento se encontra na √∫ltima posi√ß√£o (&lt;strong&gt;event.results[i].isFinal&lt;/strong&gt;), caso seja verdadeira, ele ir√° imprimir todo o texto, junto com a taxa de acerto, que vai de &amp;#8220;0&amp;#8221; at√© &amp;#8220;1&amp;#8221;. Caso seja falsa, ele vai adicionar mais texto na nossa div&lt;/p&gt;

&lt;h2 id=&#34;passo-4-8211-anexando-o-evento-de-click&#34;&gt;Passo 4¬†&amp;#8211; Anexando o¬†evento de click&lt;/h2&gt;

&lt;p&gt;Agora iremos anexar um evento de click, ao nosso bot√£o, segue 0 c√≥digo abaixo :&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;document.querySelector(&#34;#rect&#34;).addEventListener(&#34;click&#34;,function(){
                try {
                    recognizer.start();
                  } catch(ex) {
                    alert(&#34;error: &#34;+ex.message);
                  }
            });
&lt;/pre&gt;

&lt;h4 id=&#34;onde&#34;&gt;Onde:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;recognizer.start(); &amp;#8211;¬†&lt;/strong&gt;Inicia o record ( a grava√ß√£o );&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;catch(ex) {&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;alert(&amp;#8220;error: &amp;#8220;+ex.message);&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;} &amp;#8211;¬†&lt;/strong&gt; tratamento de log, caso exista, algum erro de grava√ß√£o&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;√â importante observarmos que o reconhecedor demora um pouco para poder interpretar a sua voz, mais ou menos uns 3 √† 4 segundos, esta API ainda est√° em teste e que infelizmente at√© agora, s√≥ √© ¬†suportada no chrome,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;finalizando&#34;&gt;Finalizando&lt;/h1&gt;

&lt;p&gt;Bem pessoal, essa foi uma breve introdu√ß√£o sobre Web¬†Speech API. Futuramente irei trazer mais artigo&lt;/p&gt;

&lt;p&gt;Disponibilizei o c√≥digo no github e tamb√©m disponibilizei uma demo.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;View Demo &#34; href=&#34;http://clovisdasilvaneto.github.io/speechRecognition/&#34; target=&#34;_blank&#34;&gt;Clique aqui para ver a demo online&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;ver o c√≥digo completo&#34; href=&#34;https://github.com/clovisdasilvaneto/speechRecognition/blob/master/meu_artigo.html&#34; target=&#34;_blank&#34;&gt;Clique aqui, para ir ao c√≥digo completo.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Construindo sua pr√≥pria biblioteca javascript</title>
      <link>https://tableless.github.io/hugo-public/construindo-sua-propria-biblioteca-javascript/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/construindo-sua-propria-biblioteca-javascript/</guid>
      <description>

&lt;p&gt;Pois bem, meu amigo ninja, est√° na hora de melhorar um pouco mais seus conhecimentos e quem sabe embarcar em uma nova ideia: a cria√ß√£o da sua pr√≥pria biblioteca javascript!&lt;/p&gt;

&lt;h1 id=&#34;introdu√ß√£o&#34;&gt;Introdu√ß√£o&lt;/h1&gt;

&lt;p&gt;Antes de voc√™ pensar: ‚ÄúAh, mas eu j√° sei como √©. Basta estender o objeto HTMLElement por meio da prototype‚Ä¶‚Äù. Digo-lhes que felizmente n√£o √© assim. Imagine o peso que seria colocar um novo m√©todo em todos os elementos HTML. Impratic√°vel.&lt;/p&gt;

&lt;p&gt;Bem, meu amigo, se voc√™ n√£o compreende minhas palavras, segue um exemplo de como podemos anexar um novo m√©todo aos elementos HTML por meio do prototype:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;HTMLElement.prototype.esconde = function(){
 this.setAttribute(‚Äústyle‚Äù,‚Äùdisplay:none‚Äù)
}
&lt;/pre&gt;

&lt;p&gt;Logo poder√≠amos esconder qualquer elemento HTML atrav√©s da chamada:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;document.querySelector(‚Äúdiv‚Äù).esconde();&lt;/pre&gt;

&lt;p&gt;Ent√£o vamos fazer isto da maneira correta, usando um alias ($) para selecionar nossos elementos mais ou menos igual ao jQuery, o resultado final ser√° este:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(‚Äúdiv‚Äù).esconde();&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note que a sintaxe ficar√° igual a biblioteca jQuery. Veremos como obter este resultado passo-a-passo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;passo-1-8211-a-fun√ß√£o-imediata&#34;&gt;Passo 1 &amp;#8211; A fun√ß√£o imediata&lt;/h1&gt;

&lt;p&gt;Criaremos uma fun√ß√£o imediata, incrivelmente vers√°til e que tornar√° a linguagem javascript mais poderosa. Esta fun√ß√£o imediata, que veremos aqui, criar√° um escopo tempor√°rio e algumas v√°riaveis ‚Äúparticulares‚Äù&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 1‚Ää‚Äî‚ÄäCome√ßando com uma fun√ß√£o imediata&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;(function(){ var blJs= function(arg){ }
})();
&lt;/pre&gt;

&lt;p&gt;Note que criei uma fun√ß√£o an√¥nima, cujo o nome √©: &lt;strong&gt;blJs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Este ser√° o nome da nossa biblioteca&lt;/p&gt;

&lt;h1 id=&#34;passo-2-8211-entendendo-a-bljs&#34;&gt;Passo 2 &amp;#8211; Entendendo a blJs&lt;/h1&gt;

&lt;p&gt;Agora que a brincadeira come√ßa a ficar boa. Primeiro iremos programar nossa fun√ß√£o an√¥nima (blJs), para que, sempre que ela for chamada, retorne ela mesmo como um construtor, para podermos ter acesso ao t√£o poderoso ‚Äú&lt;strong&gt;this&lt;/strong&gt;‚Äù:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 2‚Ää‚Äî‚ÄäA fun√ß√£o blJs&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var blJs= function(arg){ 
 if(!(this instanceof blJs)){ 
  return new blJs(arg); 
 }
 this.myArg = arg;
}
&lt;/pre&gt;

&lt;p&gt;Note que verifiquei se o nosso objeto foi declarado como um construtor. Claro que na chamada inicial ele n√£o ser√°. Por isso invocamos novamente nossa fun√ß√£o &lt;strong&gt;blJs&lt;/strong&gt;, mas desta vez como um construtor, para podermos utilizar o¬†&amp;#8216;&lt;strong&gt;this&lt;/strong&gt;&amp;#8216;. Observe que salvei o argumento da fun√ß√£o blJs no objeto &lt;strong&gt;myArg&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lembra desta linha de c√≥digo: $(‚Äúdiv‚Äù)‚Ä¶? Isto √© o mesmo que: blJs(‚Äúdiv‚Äù). Podemos perceber que estamos passando o ‚Äú&lt;strong&gt;div&lt;/strong&gt;‚Äù como par√¢metro da nossa fun√ß√£o. Logo: &lt;strong&gt;this.myArg = ‚Äúdiv‚Äù&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;passo-3-8211-estendendo-nossa-biblioteca-inserindo-m√©todos&#34;&gt;Passo 3 &amp;#8211; Estendendo nossa biblioteca: inserindo m√©todos‚ò∫&lt;/h1&gt;

&lt;p&gt;Se prepare, amigo ninja, pois a m√°gica funciona justamente nas pr√≥ximas linhas de c√≥digos a seguir.&lt;/p&gt;

&lt;p&gt;Iremos estender nossa fun√ß√£o ( blJs ), por meio da propriedade prototype e fn. Veja a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;blJs.fn = blJs.prototype = { 
 esconde: function(){ 
  document.querySelector(this.myArg).setAttribute(‚Äústyle‚Äù,‚Äùdisplay:none‚Äù); 
 }
}
window.blJs= blJs, window.$ = blJs;
&lt;/pre&gt;

&lt;p&gt;Logo definimos que &lt;strong&gt;blJs.fn&lt;/strong&gt; √© igual a &lt;strong&gt;blJs.prototype&lt;/strong&gt;, onde declaramos nosso novo m√©todo. O m√©todo esconde, que seleciona a div por meio de querySelector(this.myArg) e esconde o elemento alvo por meio de um display:none.&lt;/p&gt;

&lt;p&gt;Ao final da nossa fun√ß√£o imediata, definimos que window.blJs ser√° igual a nossa fun√ß√£o ‚ÄúblJs‚Äù, para podermos chamar nossa biblioteca fora do escopo da fun√ß√£o imediata. Veja como √© simples definir um alias para nossa biblioteca: √© s√≥ referenciar o window.$ √† nossa fun√ß√£o blJs.&lt;/p&gt;

&lt;h1 id=&#34;finalizando&#34;&gt;Finalizando&lt;/h1&gt;

&lt;p&gt;Agora √© s√≥ sorrir e correr para o abra√ßo ‚ò∫. Sua biblioteca javascript j√° est√° pronta para ser usada. √â s√≥ utilizar a chamada do inicio:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(‚Äúdiv‚Äù).esconde() ou blJs(‚Äúdiv‚Äù).esconde()&lt;/pre&gt;

&lt;p&gt;Visualize o c√≥digo completo no &lt;a title=&#34;clique para visualizar o c√≥digo completo&#34; href=&#34;https://github.com/clovisdasilvaneto/blJs&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bem, amigos ninjas, por hoje √© s√≥. Caso tenha alguma d√∫vida, deixem seu coment√°rio.&lt;/p&gt;

&lt;p&gt;Espero que tenham curtido o artigo. Compartilhem e at√© a pr√≥xima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dominando o uso de prototype em JavaScript</title>
      <link>https://tableless.github.io/hugo-public/dominando-o-uso-de-prototype-em-javascript/</link>
      <pubDate>Sat, 14 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/dominando-o-uso-de-prototype-em-javascript/</guid>
      <description>

&lt;p&gt;V√°rios desenvolvedores web falam que prot√≥tipos¬†representam uma forma de definirmos tipos de objetos, mas se voc√™ observar com cuidado, isto √© uma caracter√≠stica de fun√ß√µes.&lt;/p&gt;

&lt;p&gt;Perceba que todas as fun√ß√µes t√™m uma propriedade &lt;em&gt;prototype&lt;/em&gt; que, inicialmente, referencia um objeto vazio.&lt;/p&gt;

&lt;p&gt;Usando a¬†palavra chave &lt;em&gt;New&lt;/em&gt; para invocar a fun√ß√£o construtor, temos agora um objeto rec√©m instanciado ¬†como seu contexto.&lt;/p&gt;

&lt;p&gt;Ex:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function Lutador(){}
 var lutador1 = new Lutador();&lt;/pre&gt;

&lt;h2 id=&#34;o-b√°sico-8211-incluindo-m√©todos-numa-classe-fun√ß√£o&#34;&gt;O b√°sico &amp;#8211; Incluindo m√©todos numa classe (fun√ß√£o)&lt;/h2&gt;

&lt;p&gt;Temos nossa classe &lt;strong&gt;Lutador&lt;/strong&gt;, que se encontra vazia e queremos anexar um m√©todo a ela.¬†Logo utilizamos a seguinte estrutura:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function Lutador(){}
Lutador.prototype.Socar = function(){
 return true;
}
 var lutador1 = new Lutador();

console.log(lutador1.Socar());&lt;/pre&gt;

&lt;p&gt;Um prot√≥tipo nos permite predefinir propriedades, incluindo m√©todoss.¬†Voc√™ pode saber como acessar as propriedades de prot√≥tipos a partir da inst√¢ncia do objeto com¬†&lt;em&gt;lutador1.constructor.prototype.Socar&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Uma observa√ß√£o importante √© que n√£o importa a ordem onde o prot√≥tipo √© declarado, pois &amp;#8220;suas atualiza√ß√µes&amp;#8221; s√£o feitas dinamicamente, ex:&lt;/p&gt;

&lt;p&gt;Isto:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function Lutador(){}
Lutador.prototype.Socar = function(){
 return true;
}
 var lutador1 = new Lutador();&lt;/pre&gt;

&lt;p&gt;Tem o mesmo sentido de:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function Lutador(){}
 var lutador1 = new Lutador();
Lutador.prototype.Socar = function(){
 return true;
}&lt;/pre&gt;

&lt;p&gt;Podemos tamb√©m inst√¢nciar um objeto deste modo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function Lutador(){}
var lutador1 = new Lutador();
var lutador2 = new lutador1.constructor();
console.log(&#34;Verificanco se esta afirm√ß√£o √© verdadeira: &#34;+lutador1 !== lutador2);&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note que &lt;strong&gt;lutador1&lt;/strong&gt; n√£o √© o mesmo objeto de &lt;strong&gt;lutador2&lt;/strong&gt;, mas s√£o duas inst√¢ncias distintas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tudo que vimos at√© agora, foi o b√°sico de que os prot√≥tipos oferecem, agora est√° na hora de avan√ßar um pouco mais.&lt;/p&gt;

&lt;h2 id=&#34;heran√ßa-e-a-cadeia-de-prot√≥tipos&#34;&gt;Heran√ßa e a cadeia de prot√≥tipos&lt;/h2&gt;

&lt;p&gt;Existem v√°rias formas de como obter uma heran√ßa com prot√≥tipos, mas sem d√∫vida, a melhor forma √© este modo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function Lutador(){
 this.attackPlayer = function(){
  return true;
 }
} 

function Habilidades(){
 this.esquivaPlayer = function(){
  console.log(&#34;esquivou&#34;);
 }
}

//fazendo Lutador herdar de Habilidades
Lutador.prototype = new Habilidades();
lutador1 = new Lutador();

//verificando
console.log(lutador1 instanceof Lutador);
console.log(lutador1 instanceof Habilidades);&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Nota: &amp;#8220;Existe tamb√©m outra t√©cnica semelhante a esta, e que eu desaconselho. √â utilizar o objeto do prot√≥tipo¬†de&lt;/em&gt; Habilidades&lt;em&gt;¬†diretamente como prot√≥tipo de&lt;/em&gt; Lutador_&amp;#8230; Ex:_¬†Lutador.prototype = Habilidades.prototype; &lt;em&gt;pois fazendo isto, qualquer altera√ß√£o no prot√≥tipo de&lt;/em&gt; Lutador &lt;em&gt;tamb√©m modificar√° o prot√≥tipo de&lt;/em&gt; Habilidades&lt;em&gt;, porque eles ser√£o o mesmo objeto, e isso com certeza ter√° alguns efeitos colaterais indesejaveis&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;incluindo-novo-m√©todo-nos-elementos-html-por-meio-do-prot√≥tipo-htmlelement&#34;&gt;Incluindo novo m√©todo nos elementos HTML por meio do prot√≥tipo HTMLElement&lt;/h2&gt;

&lt;p&gt;Nos navegadores atuais e antigos (IE8+) temos uma funcionalidade bastante interessante que nos permite estender qualquer n√≥ HTML de nossa escolha, vejamos ent√£o o pr√≥ximo exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;HTMLElement.prototype.remover = function() {
        this.parentNode.removeChild(this);
    };

    document.querySelector(&#34;#a&#34;).remover();&lt;/pre&gt;

&lt;p&gt;Neste exemplo incluimos um novo m√©todo &amp;#8220;remover&amp;#8221;, em todos os elementos do DOM por meio do prot√≥tipo do contrutor HTMLElement. Logo depois removemos o¬†elemento html que tem por &lt;em&gt;id=&amp;#8221;a&amp;#8221;¬†&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Um exemplo muito bom de utiliza√ß√£o deste recurso √© a biblioteca Prototype, por ela conseguimos obter muitas funcionalidades nos elementos DOM, por exemplo injetar HTML e manipular CSS.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;exten√ß√£o-de-object-e-array&#34;&gt;Exten√ß√£o de Object e Array&lt;/h4&gt;

&lt;p&gt;Por meio de prot√≥tipos tamb√©m podemos estender os tipos primitivos do javascript, como: Object, Array e Number. Vejamos como estender uma vari√°vel do tipo array por meio de prot√≥tipos:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Array.prototype.cataFruta = function(callback) {
    for(var i = 0; i &amp;lt; this.length; i++){
        callback.call(this,this[i],i);
    }
};
var frutas = [&#34;laranja&#34;,&#34;uva&#34;,&#34;pinha&#34;,&#34;morango&#34;];
frutas.cataFruta(function(element,index){
    console.log(&#34;fruta: &#34;+element+&#34; sua posi√ß√£o √©: &#34;+index);
});&lt;/pre&gt;

&lt;p&gt;Note que adicionamos um m√©todo &amp;#8220;cataFruta()&amp;#8221;, que serve como um forEach dentro do array, e este mesmo m√©todo pode receber um callback que retorna dois par√¢metros, que √© o elemento atual em execu√ß√£o e o seu √≠ndice. Tamb√©m podemos estender Object:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.prototype.esconde = function(callback) {
    if(this.hasOwnProperty(&#34;style&#34;)){
        this.style.opacity = 0;
        this.style.filter = &#34;alpha(opacity=0)&#34;;
        callback.call(this,this);
    }
};
document.getElementById(&#39;escondido&#39;).esconde(function(element){
    console.log(&#34;escondemos a div com o id: &#34;+element.getAttribute(&#34;id&#34;)+&#34;!!&#34;);
});&lt;/pre&gt;

&lt;p&gt;Note que usamos a mesma l√≥gica para os dois, s√≥ mudou que ao inv√©s de &lt;em&gt;Array.prototype&lt;/em&gt; colocamos &lt;em&gt;Object.prototype.&lt;/em&gt; Tamb√©m podemos estender o tipo Number, algo que n√£o recomendo pois ele √© um prot√≥tipo nativo muito problem√°tico.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;#8220;Devido √† forma como n√∫meros e propriedades de n√∫meros s√£o processados pelo engine JavaScript, alguns resultados podem ser bastante confusos&amp;#8230;&amp;#8221; (Segredos do Ninja Javascript::Novatec)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;subclasse-do-objeto-array&#34;&gt;Subclasse do objeto Array&lt;/h4&gt;

&lt;p&gt;Como expliquei mais √† cima, existe um modo de herdamos heran√ßas em classes JavaScript, isso n√£o √© diferente com o objeto Array. Vejamos um exemplo de como podemos criar uma subclasse do tipo array:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function MinhaClasse(){}
MinhaClasse.prototype = new Array();
var meu = new MinhaClasse();
meu.push(1,2,3);
console.log(&#34;O tamanho da subclasse meu √©: &#34;+meu.length);

Ou ao inv√©s de criar, podemos apenas &#34;simular&#34; a cria√ß√£o de uma subclasse do tipo array, ex:&lt;/pre&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function MinhaClasse(){}
MinhaClasse.prototype.length = 0;

(function(){
    var novos_metodos = [&#39;push&#39;,&#39;shift&#39;,&#39;join&#39;,&#39;unshift&#39;,&#39;slice&#39;,&#39;pop&#39;,&#39;splice&#39;];
    for (var i = 0; i &amp;lt; novos_metodos.length; i++)(function(metodo){
        MinhaClasse.prototype[metodo] = function(){
            return Array.prototype[metodo].apply(this,arguments);
        }
    })(novos_metodos[i]);
})();

var meu = new MinhaClasse();
meu.push(1,2,3);
console.log(&#34;O tamanho da subclasse meu √©: &#34;+meu.length);&lt;/pre&gt;

&lt;h2 id=&#34;um-erro-grave-de-usu√°rio&#34;&gt;Um erro grave de usu√°rio&lt;/h2&gt;

&lt;p&gt;Tudo que vimos at√© agora √© muito bom e ajuda bastante para nossas aplica√ß√µes JavaScript, com esse conhecimento e um pouco de esfor√ßo da at√© mesmo para criar sua pr√≥pria biblioteca JavaScript. Mas ainda eu n√£o poderia encerrar o artigo sem antes lhes prevenir de um erro que alguns usu√°rios com pouco conhecimento de JavaScript cometem&amp;#8230;&lt;/p&gt;

&lt;p&gt;Tudo que vimos n√£o ter√° utilidade nenhuma se n√£o invocarmos a fun√ß√£o como construtor. Imagine que um usu√°rio leigo de JS pegou seu c√≥digo mas tenta invocar a fun√ß√£o &amp;#8220;como fun√ß√£o&amp;#8221; achando que √© assim que tem que ser feito. ex:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function Pessoa(nome,sobrenome){
    this.name = nome+&#34; &#34;+sobrenome;
}

var homem = Pessoa(&#34;Cl√≥vis&#34;,&#34;Neto&#34;);
console.log(homem.name);&lt;/pre&gt;

&lt;p&gt;Note no console de seu navegador que um erro aconteceu ao tentarmos verificar o &lt;em&gt;name&lt;/em&gt; de homem. Logo isto ocorrer√° sempre que o usu√°rio tentar invocar a &amp;#8220;fun√ß√£o como fun√ß√£o&amp;#8221;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Ent√£o qual ser√° a solu√ß√£o para este problema?¬†&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simples podemos fazer uma verifica√ß√£o, se o objeto √© uma inst√¢ncia da fun√ß√£o&amp;#8230; caso n√£o seja, retornaremos a forma correta de como chamar a fun√ß√£o e tudo estar√° resolvido. Ex:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function Pessoa(nome,sobrenome){
        if(!(this instanceof arguments.callee)){
        return new Pessoa(nome,sobrenome);
    }

    this.name = nome+&#34; &#34;+sobrenome;
}

var homem = Pessoa(&#34;Cl√≥vis&#34;,&#34;Neto&#34;);
console.log(homem.name);&lt;/pre&gt;

&lt;p&gt;Rode agora nosso script e veja que tudo vai bem, e n√£o aparece erro nenhum no console üôÇ&lt;/p&gt;

&lt;p&gt;Bem vou parar por aqui para o artigo n√£o ficar muito grande, por hoje √© s√≥, um forte abra√ßo de Cl√≥vis Neto e at√© a pr√≥xima üòÄ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando slideshow do zero com javascript puro</title>
      <link>https://tableless.github.io/hugo-public/criando-slideshow-zero-com-javascript-puro-2/</link>
      <pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-slideshow-zero-com-javascript-puro-2/</guid>
      <description>

&lt;p&gt;Depois de criar um artigo no devmedia de &lt;a href=&#34;http://www.devmedia.com.br/criando-slideshow-do-zero-com-jquery-sem-usar-plugins/28297&#34; title=&#34;Clique para ir ao artigo&#34;&gt;como criar um slideshow do zero em Jquery sem plugins&lt;/a&gt;, recebi v√°rios pedidos para fazer o mesmo com javascript, tamb√©m pude notar que muitas pessoas estavam com dificuldade em colocar link nas imagens e os bot√µes de anterior/pr√≥ximo.¬†Veremos neste artigo como criar um slideshow do zero apenas com javascript e uma dose elegante de CSS3, com controladores, legendas e links nas imagens.&lt;/p&gt;

&lt;p&gt;Abaixo o resultado final do nosso slide:&lt;/p&gt;

&lt;div id=&#34;attachment_40991&#34; style=&#34;width: 579px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/02/slide.fw_.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-40991&#34; title=&#34;Criando slideshow do zero com javascript puro&#34; alt=&#34;Criando slideshow do zero com javascript puro&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/slide.fw_-569x310.png&#34; width=&#34;569&#34; height=&#34;310&#34; srcset=&#34;uploads/2014/02/slide.fw_-569x310.png 569w, uploads/2014/02/slide.fw_-308x168.png 308w, uploads/2014/02/slide.fw_.png 1365w&#34; sizes=&#34;(max-width: 569px) 100vw, 569px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Resultado final do nosso slide
  &lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;estrutura-html&#34;&gt;Estrutura HTML&lt;/h2&gt;

&lt;p&gt;Nossa estrutura html √© bem simples, veja na listagem 1:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 1&lt;/strong&gt; &amp;#8211; Estrutura html do slideshow&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;figure&amp;gt;
   &amp;lt;span class=&#34;trs next&#34;&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;span class=&#34;trs prev&#34;&amp;gt;&amp;lt;/span&amp;gt;

   &amp;lt;div id=&#34;slider&#34;&amp;gt;
      &amp;lt;a href=&#34;#&#34; class=&#34;trs&#34;&amp;gt;&amp;lt;img src=&#34;imagem1.jpg&#34; alt=&#34;Legenda da imagem 1&#34; /&amp;gt;&amp;lt;/a&amp;gt;
      &amp;lt;a href=&#34;#&#34; class=&#34;trs&#34;&amp;gt;&amp;lt;img src=&#34;imagem2.jpg&#34; alt=&#34;Legenda da imagem 2&#34; /&amp;gt;&amp;lt;/a&amp;gt;
   &amp;lt;/div&amp;gt;

   &amp;lt;figcaption&amp;gt;&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/pre&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;/figure&gt; &amp;#8211;&amp;gt; Figura que ser√° respons√°vel de gerenciar todos os elementos do nosso slide&lt;/p&gt;

&lt;p&gt;&lt;span class=&amp;#8221;next trs&amp;#8221;&gt;, &lt;span class=&amp;#8221;prev trs&amp;#8221;&gt; &amp;#8211;&amp;gt; Ser√£o os controladores do nosso slide&lt;/p&gt;

&lt;p&gt;&lt;div id=&amp;#8221;slide&amp;#8221;&gt; &amp;#8211;&amp;gt; div que abriga as imagens do nosso slide, facilitar√° nosso controle no javascript&lt;/p&gt;

&lt;p&gt;&lt;figcaption&gt; &amp;#8211;&amp;gt; Legenda do slide, ser√° baseada pelo o atributo &amp;#8220;alt&amp;#8221; das imagens&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s go! vamos agora estilizar nosso slide.&lt;/p&gt;

&lt;h2 id=&#34;estilo-css&#34;&gt;Estilo CSS&lt;/h2&gt;

&lt;p&gt;Abaixo na listagem 2, o nosso estilo css, n√£o explicarei a fundo nossa estiliza√ß√£o, irei focar apenas nos principais pontos&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 2 &amp;#8211;¬†&lt;/strong&gt;Estilo css&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;&amp;lt;style&amp;gt;
* {margin: 0; padding: 0;}
body {background: #000}
a,img {border: none;}
.trs {-webkit-transition:all ease-out 0.5s;
    -moz-transition:all ease-out 0.5s;
    -o-transition:all ease-out 0.5s;
    -ms-transition:all ease-out 0.5s;
    transition:all ease-out 0.5s;}  
#slider {position: relative; z-index: 1;}
#slider a { position: absolute; top: 0; left: 0; opacity: 0;filter:alpha(opacity=0);}
.ativo {opacity: 1!important; filter:alpha(opacity=100)!important;}

/*controladores*/
span {background: #0190EE; cursor: pointer; opacity: 0;filter:alpha(opacity=0); position: absolute; bottom: 40%; width: 43px; height: 43px; z-index: 5;}
.next {right: 10px;}
.next:before,.next:after {left: 21px;}
.next:before {
    -webkit-transform: rotate(-42deg);
    top: 5px;
}
.next:after {
    -webkit-transform: rotate(-132deg);
    top: 19px;
}
.next:before,.next:after,.prev:before,.prev:after {content: &#34;&#34;;
    height: 20px;
    background: #fff;
    width: 1px;
    position: absolute;
}
.prev {left: 10px;}
.prev:before,.prev:after {left: 18px;}
.prev:before {
    -webkit-transform: rotate(42deg);
    top: 5px;
}
.prev:after {
    -webkit-transform: rotate(132deg);
    top: 19px;
}

figure:hover span {opacity: 0.76;filter:alpha(opacity=76);}
    figure {
    max-width: 937px;
    height: 354px;
    position: relative;
    overflow: hidden;
    margin: 50px auto;
}

figcaption {padding-left: 20px;color: #fff; font-family: &#34;Kaushan Script&#34;,&#34;Lato&#34;,&#34;arial&#34;; font-size: 22px; background: rgba(1, 144, 238, 0.76); width: 100%; position: absolute; bottom: 0; left: 0; line-height: 55px; height: 55px; z-index: 5}
&amp;lt;/style&amp;gt;&lt;/pre&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;.trs &amp;#8211;&amp;gt; class que define a transi√ß√£o das imagens do nosso slide e dos nossos controladores&lt;/p&gt;

&lt;p&gt;.ativo &amp;#8211;&amp;gt; class que define qual imagem est√° ativa&lt;/p&gt;

&lt;p&gt;figure:hover span &amp;#8211;&amp;gt; faz com que mostre nossos controladores ao passar o mouse no nosso slide&lt;/p&gt;

&lt;p&gt;Parece que tudo est√° indo bem, vamos come√ßar a brincar agora com nosso slider, gogo ninja lvl2 üòÄ&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;

&lt;p&gt;Veremos cada passo do c√≥digo javascript bem detalhado para que n√£o haja d√∫vida alguma ao termino do post.&lt;/p&gt;

&lt;p&gt;Primeiramente vamos criar uma fun√ß√£o &lt;strong&gt;setaImagem¬†&lt;/strong&gt;e colocar para que ela rode quando a janela (window) for carregada:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 3&lt;/strong&gt; &amp;#8211; Cria√ß√£o da fun√ß√£o &amp;#8220;setaImagem&amp;#8221;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
   function setaImagem(){
   }
   window.addEventListener(&#34;load&#34;,setaImagem,false);
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;onde:&lt;/p&gt;

&lt;p&gt;window.addEventListener(&amp;#8220;load&amp;#8221;,setaImagem,false); &amp;#8211;&amp;gt; faz com que a fun√ß√£o &amp;#8220;setaImagem&amp;#8221; seja executada quando a janela for carregada&lt;/p&gt;

&lt;p&gt;Agora iremos criar nossa vari√°vel &amp;#8220;settings&amp;#8221; que receber√° alguns objetos e fun√ß√µes anonimas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 4¬†&lt;/strong&gt;&amp;#8211; Criando nossa var√°vel &amp;#8220;settings&amp;#8221;, j√° com duas fun√ß√µes anonimas dentro, que s√£o &amp;#8220;legenda&amp;#8221; e &amp;#8220;primeiraImg&amp;#8221;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var settings = {
  primeiraImg: function(){
    elemento = document.querySelector(&#34;#slider a:first-child&#34;);
    elemento.classList.add(&#34;ativo&#34;);
    this.legenda(elemento);
  },
  legenda: function(obj){
    var legenda = obj.querySelector(&#34;img&#34;).getAttribute(&#34;alt&#34;);
    document.querySelector(&#34;figcaption&#34;).innerHTML = legenda;
  }
 }&lt;/pre&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;var settings = {} &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt; define uma variavel &amp;#8220;settings&amp;#8221; que conter√° as configura√ß√µes do nosso slide&lt;/p&gt;

&lt;p&gt;primeiraImg: function(){&amp;#8230;} &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt; Fun√ß√£o que seta a imagem que aparecer√° inicialmente no nosso slide&lt;/p&gt;

&lt;p&gt;elemento = document.querySelector(&amp;#8220;#slider a:first-child&amp;#8221;);&lt;span style=&#34;color: #888888&#34;&gt;&lt;strong&gt;¬†&amp;#8211;&amp;gt;&lt;/strong&gt;&lt;/span&gt; captura a primeira tag &amp;#8220;&lt;a&gt;&amp;#8221; da &amp;#8220;div#slider&amp;#8221; e coloca numa variavel elemento.&lt;/p&gt;

&lt;p&gt;elemento.classList.add(&amp;#8220;ativo&amp;#8221;); &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt;¬†coloca a classe ativo na tag capturada (elemento.classList.add(&amp;#8220;ativo&amp;#8221;)).&lt;/p&gt;

&lt;p&gt;this.legenda(elemento); &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt; chama a fun√ß√£o anonima &amp;#8220;legenda&amp;#8221; e passa como par√¢metro a vari√°vel elemento que acabamos de criar&lt;/p&gt;

&lt;p&gt;legenda:function(obj){&amp;#8230;} &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt; fun√ß√£o anonima que coloca captura o atributo &amp;#8220;alt&amp;#8221; da tag &amp;#8220;&lt;img&gt;&amp;#8221; que tem como pai, o par√¢metro determinado como &amp;#8220;obj&amp;#8221; e coloca como legenda do slideshow&lt;/p&gt;

&lt;p&gt;var legenda = obj.querySelector(&amp;#8220;img&amp;#8221;).getAttribute(&amp;#8220;alt&amp;#8221;); &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt;¬†captura o atributo &amp;#8220;alt&amp;#8221; da tag &amp;#8220;&lt;img&gt;&amp;#8221; que tem como pai, o par√¢metro determinado como &amp;#8220;obj&amp;#8221; (que neste caso √© a primeira tag &amp;#8220;&lt;a&gt;&amp;#8221;) e coloca numa vari√°vel legenda&lt;/p&gt;

&lt;p&gt;document.querySelector(&amp;#8220;figcaption&amp;#8221;).innerHTML = legenda; &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt; coloca o html, que est√° dentro do atributo alt da variavel legenda, dentro da tag &amp;#8220;&lt;figcaption&gt;&amp;#8221; que neste caso √© a nossa legenda do slideshow.&lt;/p&gt;

&lt;p&gt;At√© agora tudo certo, mas note que se voc√™ executar nosso documento, nada acontece, isto porque n√£o chamamos nossa fun√ß√£o de setar a imagem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 5¬†&lt;/strong&gt;&amp;#8211; chamando nossa variavel settings e suas respectivas fun√ß√µes anonimas&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;//chama o slide
settings.primeiraImg();

//chama a legenda
settings.legenda(elemento);

//chama o slide √† um determinado tempo
var intervalo = setInterval(settings.slide,4000);&lt;/pre&gt;

&lt;p&gt;Primeiro chamamos nossa fun√ß√£o de setar a imagem no slideshow, depois setamos sua legenda e por fim, acionamos um temporizador que roda nosso slide a cada 4 segundos.&lt;/p&gt;

&lt;p&gt;Vamos agora adicionar mais uma fun√ß√£o √† configura√ß√£o do nosso slide, seu nome ser√° &amp;#8220;slide&amp;#8221;. Esta fun√ß√£o servir√° para controlar as transi√ß√µes autom√°ticas do nosso slideshow.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;obs: Adicione a linha de c√≥digo abaixo, dentro da vari√°vel settings&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 6¬†&lt;/strong&gt;&amp;#8211; Cria√ß√£o da fun√ß√£o slide&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;slide: function(){
    elemento = document.querySelector(&#34;.ativo&#34;);
    if(elemento.nextElementSibling){
        elemento.nextElementSibling.classList.add(&#34;ativo&#34;);
        settings.legenda(elemento.nextElementSibling);
        elemento.classList.remove(&#34;ativo&#34;);
    }else{
        elemento.classList.remove(&#34;ativo&#34;);
        settings.primeiraImg();
    }
},&lt;/pre&gt;

&lt;p&gt;Primeiro criamos nossa fun√ß√£o slide, dentro dela, capturamos a tag que cont√©m a class &amp;#8220;ativo&amp;#8221; e colocamos numa vari√°vel &amp;#8220;elemento&amp;#8221;, logo em seguida fazemos uma verifica√ß√£o, se ouver uma tag ap√≥s a tag &amp;#8220;ativo&amp;#8221; colocamos nesta outra tag a classe ativo, adicionamos a legenda dela no nosso slide e retiramos a classe ativo da nossa¬†imagem que est√° ativa. Se n√£o ouver nenhuma outra tag, tiramos a classe &amp;#8220;ativo&amp;#8221; da imagem que est√° ativa, e chamamos a fun√ß√£o &amp;#8220;primeiraImg&amp;#8221; que servir√° para setar a primeira imagem no nosso slide.&lt;/p&gt;

&lt;p&gt;show de bola! nosso slide est√° rodando, mas note que nossos controladores ainda n√£o funcionam, vamos agora fazer eles funcionarem.&lt;/p&gt;

&lt;p&gt;Primeiro vamos criar nossa fun√ß√£o que mostra a pr√≥xima imagem &amp;#8220;pr√≥ximo&amp;#8221;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 7¬†&lt;/strong&gt;&amp;#8211; Fun√ß√£o &amp;#8220;pr√≥ximo&amp;#8221;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;proximo: function(){
    clearInterval(intervalo);
    elemento = document.querySelector(&#34;.ativo&#34;);

    if(elemento.nextElementSibling){
        elemento.nextElementSibling.classList.add(&#34;ativo&#34;);
        settings.legenda(elemento.nextElementSibling);
        elemento.classList.remove(&#34;ativo&#34;);
    }else{
        elemento.classList.remove(&#34;ativo&#34;);
        settings.primeiraImg();
    }
    intervalo = setInterval(settings.slide,4000);
},&lt;/pre&gt;

&lt;p&gt;O processo da fun√ß√£o anonima &amp;#8220;proximo&amp;#8221; √© o mesmo da fun√ß√£o slide, apenas adicionamos um clearInterval(intervalo), que ir√° limpar o temporizador(tempo de execu√ß√£o) do nosso slide, e ao final da fun√ß√£o reiniciamos nosso temporizador.&lt;/p&gt;

&lt;p&gt;Agora iremos criar a fun√ß√£o para mostrar a imagem anterior&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 8¬†&lt;/strong&gt;&amp;#8211; fun√ß√£o &amp;#8220;anterior&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;anterior: function(){
    clearInterval(intervalo);
    elemento = document.querySelector(&#34;.ativo&#34;);

    if(elemento.previousElementSibling){
        elemento.previousElementSibling.classList.add(&#34;ativo&#34;);
        settings.legenda(elemento.previousElementSibling);
        elemento.classList.remove(&#34;ativo&#34;);
    }else{
        elemento.classList.remove(&#34;ativo&#34;);                     
        elemento = document.querySelector(&#34;a:last-child&#34;);
        elemento.classList.add(&#34;ativo&#34;);
        this.legenda(elemento);
    }
    intervalo = setInterval(settings.slide,4000);
},&lt;/pre&gt;

&lt;p&gt;Esta fun√ß√£o tamb√©m √© quase a mesma que a anterior, so mudamos onde tem &amp;#8220;next&amp;#8221;(pr√≥ximo) e colocamos &amp;#8220;previous&amp;#8221;(anterior).&lt;/p&gt;

&lt;p&gt;Ainda falta anexar o evento de click nos nossos controladores, segue abaixo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 9&lt;/strong&gt; &amp;#8211; Anexando a fun√ß√£o de clique nos controladores&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;document.querySelector(&#34;.next&#34;).addEventListener(&#34;click&#34;,settings.proximo,false);
    document.querySelector(&#34;.prev&#34;).addEventListener(&#34;click&#34;,settings.anterior,false);&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Obs: Coloque a fun√ß√£o de clique nos controladores no final da fun√ß√£o &amp;#8220;setaImagem&amp;#8221;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Disponibilizei nosso c√≥digo no github para quem quiser contribuir ou esteja tendo algum problema no slide &lt;a href=&#34;https://github.com/clovisdasilvaneto/slide-com-javascript-puro&#34; title=&#34;visualizar exemplo pelo github&#34;&gt;(clique aqui)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bem amigos ninjas javascript&amp;#8217;s, com isso terminamos nosso post, um forte abra√ßo e at√© a pr√≥xima&lt;/p&gt;

&lt;p&gt;Abaixo nosso c√≥digo javascript completo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
function setaImagem(){
    var settings = {
        primeiraImg: function(){
            elemento = document.querySelector(&#34;#slider a:first-child&#34;);
            elemento.classList.add(&#34;ativo&#34;);
            this.legenda(elemento);
        },

        slide: function(){
            elemento = document.querySelector(&#34;.ativo&#34;);

            if(elemento.nextElementSibling){
                elemento.nextElementSibling.classList.add(&#34;ativo&#34;);
                settings.legenda(elemento.nextElementSibling);
                elemento.classList.remove(&#34;ativo&#34;);
            }else{
                elemento.classList.remove(&#34;ativo&#34;);
                settings.primeiraImg();
            }

        },

        proximo: function(){
            clearInterval(intervalo);
            elemento = document.querySelector(&#34;.ativo&#34;);

            if(elemento.nextElementSibling){
                elemento.nextElementSibling.classList.add(&#34;ativo&#34;);
                settings.legenda(elemento.nextElementSibling);
                elemento.classList.remove(&#34;ativo&#34;);
            }else{
                elemento.classList.remove(&#34;ativo&#34;);
                settings.primeiraImg();
            }
            intervalo = setInterval(settings.slide,4000);
        },

        anterior: function(){
            clearInterval(intervalo);
            elemento = document.querySelector(&#34;.ativo&#34;);

            if(elemento.previousElementSibling){
                elemento.previousElementSibling.classList.add(&#34;ativo&#34;);
                settings.legenda(elemento.previousElementSibling);
                elemento.classList.remove(&#34;ativo&#34;);
            }else{
                elemento.classList.remove(&#34;ativo&#34;);                     
                elemento = document.querySelector(&#34;a:last-child&#34;);
                elemento.classList.add(&#34;ativo&#34;);
                this.legenda(elemento);
            }
            intervalo = setInterval(settings.slide,4000);
        },

        legenda: function(obj){
            var legenda = obj.querySelector(&#34;img&#34;).getAttribute(&#34;alt&#34;);
            document.querySelector(&#34;figcaption&#34;).innerHTML = legenda;
        }

    }

    //chama o slide
    settings.primeiraImg();

    //chama a legenda
    settings.legenda(elemento);

    //chama o slide √† um determinado tempo
    var intervalo = setInterval(settings.slide,4000);
    document.querySelector(&#34;.next&#34;).addEventListener(&#34;click&#34;,settings.proximo,false);
    document.querySelector(&#34;.prev&#34;).addEventListener(&#34;click&#34;,settings.anterior,false);
}

window.addEventListener(&#34;load&#34;,setaImagem,false);
&amp;lt;/script&amp;gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Criando efeito de fadeIn e fadeOut com javascript puro</title>
      <link>https://tableless.github.io/hugo-public/criando-efeito-de-fadein-e-fadeout-com-javascript-puro/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-efeito-de-fadein-e-fadeout-com-javascript-puro/</guid>
      <description>

&lt;p&gt;O uso de bibliotecas JavaScript vem crescendo muito atualmente, mas √†s vezes utilizamos certas bibliotecas (como a jQuery) para simples tarefas, que poder√≠amos fazer apenas com JavaScript.&lt;/p&gt;

&lt;p&gt;Vejamos na &lt;strong&gt;Listagem 1&lt;/strong&gt; o que acontece muito nas p√°ginas da web de hoje.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 1:&lt;/strong&gt; Pegando o atributo src de uma imagem com jQuery&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#imagem&#34;).attr(&#34;src&#34;);&lt;/pre&gt;

&lt;p&gt;Poder√≠amos usar simplesmente o JavaScript para ter o mesmo resultado usando o c√≥digo da &lt;strong&gt;Listagem 2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 2:&lt;/strong&gt;¬†Pegando o atributo src de uma imagem com JavaScript&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;document.getElementById(&#34;imagem&#34;).src;&lt;/pre&gt;

&lt;p&gt;A inten√ß√£o do artigo n√£o √© desencorajar ningu√©m a deixar de usar jQuery, mas para quem quer ser um bom front end, um ninja front end, √© bom come√ßar a estudar o JavaScript puro. Muitos desanimam ao estudar essa tecnologia por causa da maneira um pouco &amp;#8220;diferente&amp;#8221; de obter um efeito legal e com um c√≥digo curto, como acontece com o jQuery, mas com o JavaScript puro d√° para se ter efeitos, digamos ‚Äúmuito show‚Äù.&lt;/p&gt;

&lt;p&gt;Muito bem, chega de conversa, vamos dar inicio ao nosso treinamento ‚Äúninja‚Äù&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;estrutura-html-e-css&#34;&gt;Estrutura HTML e CSS&lt;/h2&gt;

&lt;p&gt;Vamos criar um pequeno exemplo para mostrar os efeitos fadeIn e fadeOut. Primeiro vamos elaborar nossa estrutura HTML, criando uma div que ir√° sofrer o efeitos atrav√©s de dois bot√µes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dica:&lt;/strong&gt; &lt;em&gt;Antes de criar algum efeito com javascript ou qualquer outra biblioteca javascript, sempre seguimos estas tr√™s ordens: Primeiro construimos a estrutura html, depois elaboramos o nosso estilo com o css, e por √∫ltimo, come√ßamos a brincar com as nossas linhas de c√≥digos javascript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Observe a &lt;strong&gt;Listagem 3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 3:&lt;/strong&gt;¬†Estrutura html5 simples&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&#34;pr-br&#34;&amp;gt;
¬†&amp;lt;head&amp;gt;
¬†¬†¬†&amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
  ¬†&amp;lt;title&amp;gt;Meu primeiro efeito ninja em js&amp;lt;/title&amp;gt;
¬†&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;section id=&#34;objeto&#34;&amp;gt;&amp;lt;/section&amp;gt;
   ¬†&amp;lt;button id=&#34;fadeIn&#34;&amp;gt;&amp;lt;/button&amp;gt;
   ¬†&amp;lt;button id=&#34;fadeOut&#34;&amp;gt;&amp;lt;/button&amp;gt;
¬†&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;A marca√ß√£o html √© simples, temos uma tag section, que sofrer√° as mudan√ßas de opacidade, determinadas como fadeIn e fadeOut. Temos tamb√©m dois bot√µes qualquer, que ser√£o respons√°veis por chamar as fun√ß√µes de acordo com seu ‚Äúid‚Äù.&lt;/p&gt;

&lt;p&gt;Em seguida, aplicamos nosso style,conforme a &lt;strong&gt;Listagem 4&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 4:&lt;/strong&gt; Estilo CSS&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;&amp;lt;style type=&#34;text/css&#34;&amp;gt;
  ¬†section {
   ¬†¬†¬†width: 150px;
   ¬†¬†¬†height: 100px;
   ¬†¬†¬†background: red;
¬†¬† }
&amp;lt;/style&amp;gt;&lt;/pre&gt;

&lt;p&gt;Note que s√≥ estilizamos a tag section, pois o estilo do bot√£o n√£o √© relevante neste exemplo, s√≥ √© necess√°rio uma cor de fundo na section para que possamos visualizar ela sumindo e aparecendo.&lt;/p&gt;

&lt;p&gt;agora iremos aplicar a fun√ß√£o dos bot√µes quando o documento for carregado. Observe a &lt;strong&gt;Listagem 5&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 5:&lt;/strong&gt; Anexando a fun√ß√£o de clique nos bot√µes quando o documento for lido&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
 window.onload = function(){
    var objeto = document.getElementById(&#39;objeto&#39;);
    document.getElementById(&#34;fadeIn&#34;).onclick = function(){
    fadeIn(objeto,1);
    }
   document.getElementById(&#34;fadeOut&#34;).onclick = function(){
    fadeOut(objeto,1);
   }
 }
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Nestas linhas de c√≥digos acima, anexamos a fun√ß√£o de clique para os bot√µes e, de acordo com seu ‚Äúid‚Äù, chamamos a fun√ß√£o de fadeIn e/ou fadeOut&lt;/p&gt;

&lt;p&gt;Em seguida, criaremos as fun√ß√µes fadeIn (que servir√° para determinar quando elemento ir√° aparecer) e fadeOut (para determinar quando o elemento ir√° sumir), conforme as &lt;strong&gt;Listagens 6&lt;/strong&gt; e &lt;strong&gt;7&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 6:&lt;/strong&gt;¬†Fun√ß√£o ¬†fadeIn&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function fadeIn(element,time){
   processa(element,time,0,100);
 }&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Listagem 7:¬†&lt;/strong&gt;Fun√ß√£o fadeOut&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function fadeOut(element,time){
  processa(element,time,100,0);
 }&lt;/pre&gt;

&lt;p&gt;Estas fun√ß√µes tem como par√¢metros element, time, intial, e end, onde:&lt;/p&gt;

&lt;p&gt;¬∑ ¬†¬†¬†¬†¬†¬†¬†element &amp;#8211; Elemento que sofrer√° o fadeIn ou fadeOut;&lt;/p&gt;

&lt;p&gt;¬∑ ¬†¬†¬†¬†¬†¬†¬†time &amp;#8211; Tempo que o fade acontecer√° (neste caso, um segundo);&lt;/p&gt;

&lt;p&gt;¬∑ ¬†¬†¬†¬†¬†¬†¬†initial &amp;#8211; Estado inicial do elemento;&lt;/p&gt;

&lt;p&gt;¬∑ ¬†¬†¬†¬†¬†¬†¬†end &amp;#8211; Estado final do elemento.&lt;/p&gt;

&lt;p&gt;Agora criaremos uma fun√ß√£o que ser√° respons√°vel por processar os efeitos de fadeIn e fadeOut, conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function processa(element,time,initial,end){
¬† ¬† //c√≥gigo
}&lt;/pre&gt;

&lt;p&gt;No escopo da nossa fun√ß√£o, declararemos uma vari√°vel respons√°vel pelo incremento (no caso do fadeIn) ou decremento (no caso do fadeOut) do efeito. Esta vari√°vel ser√° a chave principal para setar o efeito na opacidade do nosso elemento. Observe a &lt;strong&gt;Listagem 8.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 8&lt;/strong&gt;. Cria√ß√£o da vari√°vel de incremento da fun√ß√£o processa&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;if(initial == 0){
  increment = 2;
   element.style.display = &#34;block&#34;;
}else {
  increment = -2;
}&lt;/pre&gt;

&lt;p&gt;Se o estado inicial do elemento for igual a zero, declaramos o incremento como positivo para que o elemento possa aparecer, colocando-o com um display:block. Mas se o estado inicial do elemento for diferente de zero, ent√£o declaramos o incremento como negativo, assumindo o efeito de fadeOut&lt;/p&gt;

&lt;p&gt;Agora iremos declarar a opacidade inicial do nosso elemento, declarando uma vari√°vel cujo nome ser√° &amp;#8220;opc&amp;#8221; que ir√° ‚Äúsofrer‚Äù as mudan√ßas de incremento ou decremento. Observe a &lt;strong&gt;Listagem 9.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 9:&lt;/strong&gt; declara√ß√£o da vari√°vel de opacidade&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;if(initial == 0){
  increment = 2;
   element.style.display = &#34;block&#34;;
}else {
  increment = -2;
}
opc = initial;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Obs:&lt;/strong&gt; Declaramos a vari√°vel ‚Äúopc‚Äù, porque iremos precisar do valor ‚Äúinitial‚Äù para fazer uma verifica√ß√£o, em um loop mais na frente, mas tamb√©m iremos precisar que o valor da vari√°vel ‚Äúinitial‚Äù tamb√©m mude para que possamos aplicar as mudan√ßas na tag section&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agora iremos criar um intervalo para simular o efeito fadeIn / fadeOut no nosso elemento. Este intervalo ir√° se repetir em um intervalo de 10 milissegundos, pois queremos que aconte√ßa o fade em um segundo (1 * 10) == (time * 10), conforme a &lt;strong&gt;Listagem 10.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 10:&lt;/strong&gt;¬†Intervalo respons√°vel por aplicar efeito de fadeIn ou fadeOut&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;intervalo = setInterval(function(){
},time * 10);&lt;/pre&gt;

&lt;p&gt;Dentro do nosso intervalo verificaremos se a vari√°vel opc chegou ao estado final, ou seja, se o intervalo completar o efeito de fade limpamos o mesmo, pois ele n√£o ser√° mais necess√°rio. Observe a &lt;strong&gt;Listagem 11.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 11:&lt;/strong&gt;¬†Verificando se o fade foi completado&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;intervalo = setInterval(function(){
  if((opc == end)){
    if(end == 0){
    element.style.display = &#34;none&#34;;
    }
    clearInterval(intervalo);
  }
},time * 10);&lt;/pre&gt;

&lt;p&gt;Note que foi feita uma nova verifica√ß√£o para ver se o estado final do elemento √© zero. Se est√° em zero, ent√£o teremos que esconde-lo para que n√£o ocupe espa√ßo na tela.&lt;/p&gt;

&lt;p&gt;Logo ap√≥s a verifica√ß√£o, setaremos a opacidade do nosso elemento, conforme a &lt;strong&gt;Listagem 12.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 12:&lt;/strong&gt;¬†setando a opacidade do elemento&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;}else {
  opc += increment;
  element.style.opacity = opc/100;
  element.style.filter = &#34;alpha(opacity=&#34;+opc+&#34;)&#34;;
}&lt;/pre&gt;

&lt;p&gt;Os comandos dentro deste bloco ser√£o executados a cada 10 milissegundos. Na linha ‚Äúopc += increment;‚Äù, a opacidade incrementa ou decrementa. Por exemplo, se a opacidade for 0, o incremento √© positivo e teremos a seguinte repeti√ß√£o:&lt;/p&gt;

&lt;p&gt;0 + 2= 2 (na primeira execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;2 + 2 = 4 (na segunda execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;(&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;)&lt;/p&gt;

&lt;p&gt;98 + 2 = 100 (na ultima execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;Mas se a vari√°vel opc for ¬†maior que ¬†0 (no caso 100), significa que o incremento √© positivo, pois no topo do escopo da nossa fun√ß√£o processa(), temos uma verifica√ß√£o do par√¢metro ‚Äúinitial‚Äù, e se initial n√£o for igual a zero (que declaramos a vari√°vel opc = initial) a vari√°vel increment √© negativa. Logo teremos a seguinte fun√ß√£o:&lt;/p&gt;

&lt;p&gt;100 &amp;#8211; 2= 98 (na primeira execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;98 &amp;#8211; 2 = 96 (na segunda execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;(&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;)&lt;/p&gt;

&lt;p&gt;98 &amp;#8211; 2 = 100 (na ultima execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;J√° na linha ‚Äúelement.style.opacity = opc/100;‚Äù seta a opacidade no elemento.&lt;/p&gt;

&lt;p&gt;E quem disse que o nosso efeito n√£o √© cross browser? Esta linha abaixo faz o nosso efeito de opacidade funcionar no ie8 at√© o ie6,&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Element.style.filter = ‚Äúalpha(opacity=‚Äù+opc+‚Äù)‚Äù;&lt;/pre&gt;

&lt;p&gt;O Internet Explorer do 8 abaixo, interpreta a propriedade filter:alpha(opacity=100) como opacity:1;&lt;/p&gt;

&lt;p&gt;Disponibilizei o c√≥digo no github, &lt;a href=&#34;https://github.com/clovisdasilvaneto/fadein-fadeout-com-javascript-puro&#34; title=&#34;c√≥digo do post&#34;&gt;clique aqui.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Um forte abra√ßo e at√© a pr√≥xima.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>