<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lucas Daltro on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/lucas-daltro/index.xml</link>
    <description>Recent content in Lucas Daltro on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/lucas-daltro/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Criando a sua primeira aplicação web com React</title>
      <link>https://tableless.github.io/hugo-public/criando-sua-primeira-aplicacao-web-com-react/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-sua-primeira-aplicacao-web-com-react/</guid>
      <description>

&lt;p&gt;Você já deve ter ouvido falar do React, a biblioteca JS mais popular da atualidade, usado por várias empresas grandes como Facebook, Airbnb e Twitter. A ideia desse artigo é demonstrar a criação de uma aplicação simples, que use as principais partes do React. Neste tutorial nós iremos ver:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Componentes&lt;/li&gt;
&lt;li&gt;Componentes puros/funcionais&lt;/li&gt;
&lt;li&gt;O uso do &lt;em&gt;state&lt;/em&gt; vs &lt;em&gt;props&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todos os exemplos deste tutorial serão escritos em ES6. Se você não sabe ES6 &lt;a href=&#34;https://github.com/ldaltro/guia-basico-ES6&#34;&gt;leia esse artigo antes&lt;/a&gt;. Se você é impaciente demais para isso considere que:&lt;/p&gt;

&lt;p&gt;ES6:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const foo = 42; // const declara uma constante
let bar = 5; // let declara uma variável
&lt;/pre&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const soma = (a, b) =&amp;gt; a + b;
ou 
const soma = (a, b) =&amp;gt; { return a + b; };
&lt;/pre&gt;

&lt;p&gt;ES5:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var soma = function (a, b) {
  return a + b;
};
&lt;/pre&gt;

&lt;p&gt;ES6:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import React from &#39;react&#39;;
&lt;/pre&gt;

&lt;p&gt;ES5:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;);
&lt;/pre&gt;

&lt;p&gt;ES6:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class MeuComponente extends React.Component {
  render() {
    return ();
  }
} 
&lt;/pre&gt;

&lt;p&gt;ES5:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var MeuComponente = React.createClass({
  render: function(){
    return ();
  }
});&lt;/pre&gt;

&lt;p&gt;Outro pré-requisito para o tutorial é ter o &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; instalado na sua máquina. Se você ainda não fez isso, clique &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;aqui&lt;/a&gt; e siga as instruções, dependendo do seu sistema operacional.&lt;/p&gt;

&lt;h2 id=&#34;afinal-o-que-é-react&#34;&gt;Afinal, o que é React?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; é uma biblioteca criada pelo Facebook em 2013 com o objetivo de tornar o desenvolvimento de &lt;em&gt;Single Page Applications&lt;/em&gt; (SPAs) mais fácil. A biblioteca se baseia em alguns conceitos como:&lt;/p&gt;

&lt;h3 id=&#34;componentes&#34;&gt;Componentes&lt;/h3&gt;

&lt;p&gt;Uma aplicação React é dividida em componentes, ou seja, pequenos pedaços de código responsáveis por alguma parte da UI. Um componente ideal é independente e reutilizável, capaz de retornar a resposta esperada usando apenas dados genéricos enviados por outras partes da aplicação.&lt;/p&gt;

&lt;p&gt;Um exemplo de componente React interessante pode ser visto &lt;a href=&#34;https://github.com/tomchentw/react-google-maps&#34;&gt;nessa biblioteca de mapas&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&amp;lt;&lt;span class=&#34;pl-ent&#34;&gt;&lt;span class=&#34;pl-c1&#34;&gt;GoogleMap&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;&lt;span class=&#34;pl-smi&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pl-smi&#34;&gt;onMapLoad&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;defaultZoom&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;&lt;span class=&#34;pl-c1&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;defaultCenter&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;{&lt;span class=&#34;pl-c1&#34;&gt; &lt;span class=&#34;pl-s&#34;&gt;lat&lt;/span&gt;:&lt;/span&gt; &lt;span class=&#34;pl-c1&#34;&gt;-25.363882&lt;/span&gt;,&lt;span class=&#34;pl-c1&#34;&gt; &lt;span class=&#34;pl-s&#34;&gt;lng&lt;/span&gt;:&lt;/span&gt; &lt;span class=&#34;pl-c1&#34;&gt;131.044922&lt;/span&gt; }&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;&lt;span class=&#34;pl-smi&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pl-smi&#34;&gt;onMapClick&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
  &amp;gt;
&amp;lt;/&lt;span class=&#34;pl-ent&#34;&gt;&lt;span class=&#34;pl-c1&#34;&gt;GoogleMap&lt;/span&gt;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Graças ao componentes do React, podemos importar um mapa do Google Maps e usá-lo como se fosse uma tag nativa de HTML, passando apenas as propriedades que nós queremos no componente, como &lt;em&gt;defaultZoom&lt;/em&gt; e &lt;em&gt;defaultCenter&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;jsx&#34;&gt;JSX&lt;/h3&gt;

&lt;p&gt;Em React nós não usamos HTML, toda a marcação é feita no JavaScript, com uma sintaxe baseada em XML chamada JSX. A ideia pode parecer bem maluca no começo mas vai fazer sentido assim que você começar a escrever os seus próprios componentes. JSX parece bastante com HTML mas existem algumas diferenças como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Todas as tags devem ser fechadas&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Podemos colocar expressões JavaScript dentro do JSX usando {}. Ex.: &lt;pre class=&#34;lang-javascript&#34;&gt;function ola() {
return &amp;ldquo;ola&amp;rdquo;;
}
&amp;lt;p&amp;gt;{2 + 2}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{ola()}&amp;lt;/p&amp;gt;&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Como o JSX fica dentro de arquivos &amp;#8216;.js&amp;#8217; a palavra &lt;em&gt;class&lt;/em&gt; não pode ser usada. Em seu lugar, devemos usar &lt;em&gt;className&lt;/em&gt;. Ex.: &lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;h1 className=&amp;ldquo;titulo&amp;rdquo;&amp;gt;Olá!&amp;lt;/h1&amp;gt;
&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por debaixo dos panos, usamos o &lt;strong&gt;Babel&lt;/strong&gt; para converter o JSX em funções comuns de JavaScript, logo, esse código:&lt;/p&gt;

&lt;pre&gt;&amp;lt;div&amp;gt;Olá mundo&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Fica assim:&lt;/p&gt;

&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &#34;Olá mundo&#34;&lt;span class=&#34;p&#34;&gt;);
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Leia mais sobre JSX &lt;a href=&#34;https://facebook.github.io/react/docs/introducing-jsx.html&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;virtual-dom&#34;&gt;Virtual DOM&lt;/h3&gt;

&lt;p&gt;Para evitar updates custosos e desnecessários, o React não escreve as alterações diretamente na DOM. Ao invés disso, a biblioteca cria uma cópia da árvore de componentes em memória e esta cópia (Virtual DOM) é quem recebe os updates primeiro. Depois que a Virtual DOM é atualizada o React calcula a maneira mais eficiente de atualizar a árvore DOM real usando um algoritmo de &lt;em&gt;diffing.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;pondo-a-mão-na-massa&#34;&gt;Pondo a mão na massa&lt;/h2&gt;

&lt;p&gt;Ok, chega de tanta teoria, vamos por a mão na massa! Abra o seu terminal e vamos instalar um pacote que vai nos ajudar a criar nossas aplicações o &lt;strong&gt;&lt;a href=&#34;https://github.com/facebookincubator/create-react-app&#34;&gt;create-react-app&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;npm install create-react-app&lt;/pre&gt;

&lt;p&gt;Montar um ambiente de desenvolvimento capaz de suportar React costumava ser uma tarefa complicada (&lt;a href=&#34;https://tableless.com.br/hello-world-com-react-do-rascunho-ate-o-primeiro-componente/&#34;&gt;esse tutorial do Diego Eis explica muito bem a criação de um ambiente &amp;#8220;na mão&amp;#8221;&lt;/a&gt;). Por causa disso, o Facebook inventou um pacote chamado &lt;em&gt;create-react-app&lt;/em&gt;, que cria um ambiente com tudo o que nós precisamos para começar o nosso projeto (React, ES6 e webpack).&lt;/p&gt;

&lt;p&gt;Depois de instalar o pacote, vamos criar um novo projeto. No terminal digite:&lt;/p&gt;

&lt;pre class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;create-react-app vamos-aprender-react&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Depois de alguns minutos todas as dependências estão instaladas e &lt;em&gt;voilà!&lt;/em&gt; Temos um projeto pronto para ser criado.&lt;/p&gt;

&lt;p&gt;Com o terminal do diretório do seu projeto digite:&lt;/p&gt;

&lt;pre&gt;npm start&lt;/pre&gt;

&lt;p&gt;Se tudo deu certo, o seu browser em &lt;em&gt;&lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/em&gt; deve estar assim:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57013 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-19.29.35.png&#34; alt=&#34;Imagem ilustrativa do create-react-app&#34; width=&#34;1438&#34; height=&#34;748&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Parabéns! Você acabou de criar a sua primeira aplicação com React! Vamos dar uma olhada no que foi gerado:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57015 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-19.34.30.png&#34; alt=&#34;Estrutura de pastas do create-react-app&#34; width=&#34;232&#34; height=&#34;415&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como podemos ver, a pastar &lt;em&gt;src&lt;/em&gt; contém todos os nosso componentes React. Dentro de &lt;em&gt;src&lt;/em&gt; abra o arquivo &lt;em&gt;index.js&lt;/em&gt;, ele deve conter algo desse tipo:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./App&#39;;
import &#39;./index.css&#39;;

ReactDOM.render(
 &amp;lt;App /&amp;gt;,
 document.getElementById(&#39;root&#39;)
);
&lt;/pre&gt;

&lt;p&gt;O index.js é o arquivo principal da nossa aplicação, ele é responsável por colocar o nosso componente principal (App) no elemento &lt;em&gt;root&lt;/em&gt; da nossa página. &lt;em&gt;Root&lt;/em&gt; é uma div que está dentro do único arquivo .html do projeto (public/index.html). Toda a nossa aplicação vai ser escrita dentro dessa div root.&lt;/p&gt;

&lt;h3 id=&#34;criando-nosso-primeiro-componente&#34;&gt;Criando nosso primeiro componente&lt;/h3&gt;

&lt;p&gt;Abra o arquivo &lt;em&gt;App.js&lt;/em&gt;, ele é o primeiro componente da nossa árvore. Dentro dele podemos ver o JSX usado para renderizar a tela de boas vindas do &lt;em&gt;create-react-app&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&amp;lt;div className=&#34;App&#34;&amp;gt;
 &amp;lt;div className=&#34;App-header&#34;&amp;gt;
 &amp;lt;img src={logo} className=&#34;App-logo&#34; alt=&#34;logo&#34; /&amp;gt;
 &amp;lt;h2&amp;gt;Welcome to React&amp;lt;/h2&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;p className=&#34;App-intro&#34;&amp;gt;
 To get started, edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Note que todo esse código está dentro de um método chamado &lt;em&gt;render&lt;/em&gt; na classe &lt;em&gt;App&lt;/em&gt; que é filha da classe de &lt;em&gt;React.Component&lt;/em&gt;. &lt;em&gt;Render&lt;/em&gt; é responsável por dizer ao React o que deve ser renderizado, todo componente precisa de um método &lt;em&gt;render&lt;/em&gt; para exibir alguma coisa.&lt;/p&gt;

&lt;p&gt;Substitua o método &lt;em&gt;render&lt;/em&gt; por:&lt;/p&gt;

&lt;pre&gt;render() {
 return &amp;lt;HelloWorld/&amp;gt;;
 }&lt;/pre&gt;

&lt;p&gt;Se tentarmos rodar o projeto, veremos o seguinte erro:&lt;/p&gt;

&lt;pre&gt;7:13 error &#39;HelloWorld&#39; is not defined react/jsx-no-undef 
&lt;/pre&gt;

&lt;p&gt;Isso acontece porque estamos tentando usar um component (HelloWorld) que ainda não foi definido. Vamos resolver isso criando um arquivo chamado HelloWorld.js dentro da pastar &lt;em&gt;src&lt;/em&gt;. Dentro de HelloWorld coloque:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 return &amp;lt;p&amp;gt;Olá mundo!&amp;lt;/p&amp;gt;;
 }
}&lt;/pre&gt;

&lt;p&gt;Esse código cria um componente React chamado HelloWorld e implementa o método &lt;em&gt;render&lt;/em&gt; que retorna um parágrafo com &lt;strong&gt;olá mundo&lt;/strong&gt;. Depois disso vamos importar nosso novo componente em App.js:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!

class App extends Component {
 render() {
 return &amp;lt;HelloWorld/&amp;gt;;
 }
}

export default App;&lt;/pre&gt;

&lt;p&gt;Agora abrindo o browser em &lt;em&gt;&lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/em&gt; vemos:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57018 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-20.00.26.png&#34; alt=&#34;Exemplo de Hello World&#34; width=&#34;1439&#34; height=&#34;723&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ótimo! Nós acabamos de criar nosso primeiro React Component \o/. Mas ele não faz lá muita coisa não é mesmo? Vamos tentar fazer esse componente ser mais customizável.&lt;/p&gt;

&lt;h2 id=&#34;criando-componentes-genéricos-com-props&#34;&gt;Criando componentes genéricos com Props&lt;/h2&gt;

&lt;p&gt;E se nós quiséssemos exibir o nome de uma pessoa na mensagem do nosso HelloWorld? Obviamente poderíamos fazer algo do tipo:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 return &amp;lt;p&amp;gt;Olá Lucas!&amp;lt;/p&amp;gt;;
 }
}&lt;/pre&gt;

&lt;p&gt;Mas e se for necessário escrever novos nomes? Criar um componente novo para cada pessoa não parece uma ideia muito inteligente&amp;#8230; lembra do exemplo do Google Maps mostrado na introdução? No exemplo, nós passávamos dados para um componente como se fosse uma tag HTML. Vamos fazer a mesma coisa para o nosso HelloWorld! Mude App.js para:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!

class App extends Component {
 render() {
 return &amp;lt;div&amp;gt;
 &amp;lt;HelloWorld nome=&#34;Lucas&#34;/&amp;gt;
 &amp;lt;HelloWorld nome=&#34;Tableless&#34;/&amp;gt;
 &amp;lt;HelloWorld nome=&#34;Leitor&#34;/&amp;gt;
 &amp;lt;/div&amp;gt;;
 }
}

export default App;&lt;/pre&gt;

&lt;p&gt;Veja que dessa vez nós tivemos que colocar o HelloWorld dentro de uma div, isso acontece porque o método &lt;em&gt;render&lt;/em&gt; deve sempre retornar apenas um elemento, &lt;strong&gt;sempre que tiver que renderizar mais de um elemento no seu componente, coloque tudo dentro de uma div&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora nós temos que fazer com que o componente HelloWorld leia o valor dado em nome. Isso pode ser feito facilmente usando o objeto &lt;strong&gt;props&lt;/strong&gt; presente em todo componente React. Veja como HelloWorld.js vai ficar agora:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 return &amp;lt;p&amp;gt;Olá {this.props.nome}!&amp;lt;/p&amp;gt;;
 }
}

HelloWorld.propTypes = {
 nome: React.PropTypes.string.isRequired
}&lt;/pre&gt;

&lt;p&gt;Tudo que for passado de um componente para outro é adicionado ao objeto &lt;em&gt;props&lt;/em&gt;, podendo ser acessado dentro do componente. Nós também usamos a propriedade &lt;em&gt;propTypes&lt;/em&gt; para informar ao React que a _prop_ &amp;#8216;nome&amp;#8217; é uma &lt;em&gt;string&lt;/em&gt; e que essa &lt;em&gt;string&lt;/em&gt; é obrigatória para o funcionamento do componente (&lt;em&gt;isRequired&lt;/em&gt;). Você não é obrigado a usar &lt;em&gt;propTypes&lt;/em&gt; nos seus componentes, mas é interessante fazer isso, já que elas facilitam a documentação do seu código e podem reduzir erros.&lt;/p&gt;

&lt;p&gt;Agora nós temos um componente muito mais genérico:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57023 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-20.18.28.png&#34; alt=&#34;Exemplo de Componente React&#34; width=&#34;181&#34; height=&#34;193&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Props&lt;/em&gt; são algo crucial para os componentes React, já que com elas nós podemos fazer com que o nosso componente seja reutilizado até mesmo em outra aplicação. Mas devemos sempre ter em mente que _props_ são imutáveis, uma vez definida a _prop_ &amp;#8216;nome&amp;#8217;, uma instância de HelloWorld não pode mais ser alterada. Ex.:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 this.props.nome = &#34;Fulano&#34;; // ERRO Cannot assign to read only property &#39;nome&#39; of object &#39;#&amp;lt;Object&amp;gt;&#39;
 return &amp;lt;p&amp;gt;Olá {this.props.nome}!&amp;lt;/p&amp;gt;;
 }
}

HelloWorld.propTypes = {
 nome: React.PropTypes.string.isRequired
}&lt;/pre&gt;

&lt;h3 id=&#34;componente-8220-puro-8221-ou-stateless&#34;&gt;Componente &amp;#8220;puro&amp;#8221; ou &lt;em&gt;stateless&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Nosso componente HelloWorld é bastante simples e utiliza apenas &lt;em&gt;props&lt;/em&gt;, por causa disso ele pode ser escrito de uma forma melhor, utilizando uma &lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34;&gt;função pura&lt;/a&gt;. Veja como fica o nosso componente em forma de função:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;; const HelloWorld = (props) =&amp;gt; &amp;lt;p&amp;gt;Olá {props.nome}!&amp;lt;/p&amp;gt;;&lt;/pre&gt;

&lt;pre&gt;HelloWorld.propTypes = { nome: React.PropTypes.string.isRequired } export default HelloWorld;&lt;/pre&gt;

&lt;p&gt;Veja que dessa vez o componente é basicamente escrito em apenas uma linha (&lt;strong&gt;const HelloWorld = (props) =&amp;gt; &lt;p&gt;Olá {props.nome}!&lt;/p&gt;;&lt;/strong&gt;). Esse é o React Component ideal! Simples, reutilizável e escrito em apenas uma função! Tente criar seus componentes dessa maneira, ao invés de ter um componente complexo e grande, crie vários componentes menores e simples, isso vai melhorar bastante a qualidade do seu projeto.&lt;/p&gt;

&lt;p&gt;Para comprovar que o nosso componente é realmente reutilizável vamos usá-lo em uma lista de nomes. Volte para App.js e digite:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!

class App extends Component {
 render() {
 const nomes = [&#34;Lucas&#34;, &#34;Tableless&#34;, &#34;Leitor&#34;, &#34;Maria&#34;, &#34;João&#34;, &#34;Ana&#34;];
 return &amp;lt;div&amp;gt;
 {nomes.map((n, i) =&amp;gt; &amp;lt;HelloWorld nome={n} key={i}/&amp;gt;)}
 &amp;lt;/div&amp;gt;;
 }
}

export default App;
&lt;/pre&gt;

&lt;p&gt;Perceba que nós temos uma mudança aqui, para exibir nomes do nosso &lt;em&gt;array&lt;/em&gt; nós usamos a &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#34;&gt;função map&lt;/a&gt;, já que ela retorna uma expressão JavaScript (além de ter uma sintaxe mais legal que a do o laço for :P) e passamos uma nova &lt;em&gt;prop&lt;/em&gt; chamada &lt;em&gt;&lt;strong&gt;key&lt;/strong&gt;&lt;/em&gt; para o nosso componente. &lt;em&gt;Keys&lt;/em&gt; ajudam o React a identificar qual elemento foi adicionado/removido de uma lista/array (&lt;a href=&#34;https://facebook.github.io/react/docs/lists-and-keys.html&#34;&gt;mais informações sobre o assunto aqui&lt;/a&gt;). Uma &lt;em&gt;Key&lt;/em&gt; deve sempre ser um valor &lt;strong&gt;único&lt;/strong&gt; ou poderemos ter problemas de performance. Evite usar o índice do seu &lt;em&gt;loop&lt;/em&gt; como &lt;em&gt;key&lt;/em&gt; em aplicações reais (como fizemos no exemplo acima), tente usar números realmente únicos como um ID vindo de um backend. Leia mais sobre isso &lt;a href=&#34;https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.4nmajnqsa&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;componentes-interativos-com-state&#34;&gt;Componentes interativos com state&lt;/h2&gt;

&lt;p&gt;Como visto anteriormente &lt;em&gt;props&lt;/em&gt; são imutáveis, componentes feitos apenas com &lt;em&gt;props&lt;/em&gt; não podem por exemplo, ser atualizados baseados em uma ordem do usuário. Para representar o estado mutável do seu componente usamos a propriedade &lt;strong&gt;&lt;em&gt;state&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para ilustrar o uso de &lt;em&gt;state&lt;/em&gt; no nosso elemento vamos fazer um novo componente e chamá-lo de &lt;strong&gt;ContaClick.js&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class ContaClick extends React.Component {
 constructor() {
 super();
 this.state = {
 clicks: 0
 }
 }

 render() {
 return &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;{this.state.clicks}&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
 }
}

&lt;/pre&gt;

&lt;p&gt;No construtor da classe ContaClick nós definimos o estado inicial do nosso componente: um contador de clicks que começa em 0. Vamos adicionar um botão para atualizar o contador:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class ContaClick extends React.Component {
 constructor() {
 super();
 this.state = {
 clicks: 0
 }
 }

 clicou = () =&amp;gt; this.setState({clicks: this.state.clicks + 1});
 
 render() {
 return &amp;lt;div&amp;gt;
 &amp;lt;p&amp;gt;{this.state.clicks}&amp;lt;/p&amp;gt;
 &amp;lt;button onClick={this.clicou}&amp;gt;Clica aqui!&amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
 }
}
&lt;/pre&gt;

&lt;p&gt;No código acima nós criamos um botão embaixo do exibidor de cliques que chama o método &lt;em&gt;&lt;strong&gt;clicou&lt;/strong&gt;&lt;/em&gt; sempre que o evento onClick é disparado. O método &lt;em&gt;&lt;strong&gt;clicou&lt;/strong&gt;&lt;/em&gt; substitui o objeto &lt;em&gt;state&lt;/em&gt; do componente ContaClick por um objeto novo com clicks incrementados em uma unidade. Veja que nós atualizamos o &lt;em&gt;state&lt;/em&gt; usando a função &lt;em&gt;setState&lt;/em&gt;. &lt;strong&gt;NUNCA atualize o objeto _state_ manualmente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora vamos colocar o nosso componente &lt;em&gt;ContaClick&lt;/em&gt; em &lt;em&gt;app&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!
import ContaClick from &#39;./ContaClick&#39;;

class App extends Component {
 render() {
 const nomes = [&#34;Lucas&#34;, &#34;Tableless&#34;, &#34;Leitor&#34;, &#34;Maria&#34;, &#34;João&#34;, &#34;Ana&#34;];
 return &amp;lt;div&amp;gt;
 {nomes.map((n, i) =&amp;gt; &amp;lt;HelloWorld nome={n} key={i}/&amp;gt;)}
 &amp;lt;ContaClick /&amp;gt;
 &amp;lt;/div&amp;gt;;
 }
}

export default App;
&lt;/pre&gt;

&lt;p&gt;Pronto! Rodando a aplicação podemos usar o contador e ver que ele é atualizado a cada clique!&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>