<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mateus Malaquias on Tableless</title>
    <link>http://tableless.com.br/author/mateus-malaquias/index.xml</link>
    <description>Recent content in Mateus Malaquias on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/author/mateus-malaquias/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como instalar Node.js no Linux corretamente (Ubuntu, Debian, Elementary OS)</title>
      <link>http://tableless.com.br/como-instalar-node-js-no-linux-corretamente-ubuntu-debian-elementary-os/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-instalar-node-js-no-linux-corretamente-ubuntu-debian-elementary-os/</guid>
      <description>

&lt;p&gt;Recentemente comecei a minha migração do JSF para o Angular então busquei por um bom curso, pela documentação do &lt;em&gt;Framework&lt;/em&gt; e um bom livro técnico.&lt;/p&gt;

&lt;p&gt;No caso do curso escolhi inicialmente o do &lt;a href=&#34;https://twitter.com/flaviohalmeida&#34;&gt;Flávio Almeida&lt;/a&gt; na &lt;a href=&#34;https://www.alura.com.br/curso-online-angular2-parte1&#34;&gt;Alura&lt;/a&gt; e logo de cara fica claro que não é um &lt;em&gt;Framework&lt;/em&gt; para iniciantes no mundo do JavaScript e nem para iniciantes no mundo da programação, o próprio Flávio avisa sobre isso mais de uma vez além de informar sobre a necessidade de dominar o terminal (o terror dos novatos) do seu sistema operacional.&lt;/p&gt;

&lt;p&gt;Neste curso o Flávio já começa explicando como instalar os requisitos básicos para se começar a estudar sendo basicamente necessário ter instalado o &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt;, qualquer editor de texto (utilizo muito o &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;SublimeText&lt;/a&gt;, mas pra quem ta começando recomendo usar o &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Code&lt;/a&gt; porque ele nativamente consegue trabalhar muito bem com Angular e Node) e o NPM.&lt;/p&gt;

&lt;p&gt;Em distribuições &lt;em&gt;Debian Based&lt;/em&gt; é muito comum utilizar o comando &lt;strong&gt;apt install -nome do pacote-&lt;/strong&gt; e com o &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt; isso pode lhe trazer problemas, novamente o Flávio avisa sobre o possível problema. Entretanto tenho certeza que os mais novos no linux vão preferir utilizar o comando &lt;strong&gt;apt install -nome do pacote-&lt;/strong&gt; do que fazer a instalação do pacote binário e muito provavelmente isso vai quebrar tudo, porque até o momento que estou escrevendo esse texto os repositórios do Debian estão desatualizados (o Debian tem o costume de demorar para atualizar seus repositórios).&lt;/p&gt;

&lt;p&gt;Minha recomendação é que você &lt;strong&gt;não instale o Node&lt;/strong&gt; pelo comando &lt;strong&gt;sudo apt-get install -y nodejs&lt;/strong&gt; vai acontecer um conflito de nomes entre &lt;em&gt;node&lt;/em&gt; e &lt;em&gt;nodejs&lt;/em&gt;, parece besteira que uma simples nomenclatura quebre tudo, mas não é! O NPM que é o gerenciador de dependências vai ficar perdido e algumas funções não funcionarão.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/gritos.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calma! É tentador entrar em desespero, mas segure sua onda…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se você não deseja compilar o arquivo binário de instalação do Node na mão grande, a solução de instalação contínua simples, instale o NVM primeiro e depois o Node. O legal do NVM é que você pode instalar várias versões do Node e ficar alternando entre elas, mas antes de instalar o NVM precisamos de alguns pacotes de dependências que já estão no repositório de sua distribuição Debian Based.&lt;/p&gt;

&lt;h4 id=&#34;sudo-apt-get-update-sudo-apt-get-install-build-essential-libssl-dev&#34;&gt;&lt;em&gt;sudo apt-get update sudo apt-get install build-essential libssl-dev&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Agora que você já tem o necessário em seu sistema vamos instalar o NVM:&lt;/p&gt;

&lt;h4 id=&#34;curl-sl-https-raw-githubusercontent-com-creationix-nvm-v0-31-0-install-sh-7-o-install-nvm-sh&#34;&gt;&lt;em&gt;curl -sL&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh&#34;&gt;&lt;em&gt;https://raw.githubusercontent.com/creationix/nvm/&lt;/em&gt;&lt;strong&gt;&lt;em&gt;v0.31.0&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;/install.sh&lt;/em&gt;&lt;/a&gt; _-o install&lt;em&gt;nvm.sh&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;O número da versão que está em negrito pode mudar com o tempo, então recomendo você acessar a &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;página do projeto no GitHub&lt;/a&gt; e procurar pela nova versão.&lt;/p&gt;

&lt;p&gt;Execute o scrpit com:&lt;/p&gt;

&lt;h4 id=&#34;bash-install-nvm-sh&#34;&gt;_bash install&lt;em&gt;nvm.sh&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Não tenha medo, o que está sendo feito aqui é o download de um script e a execução do mesmo, tudo vai ser instalado em um diretório oculto na pasta do seu usuário &lt;strong&gt;não é necessário utilizar o comando com&lt;/strong&gt; &lt;em&gt;sudo&lt;/em&gt; &lt;strong&gt;nesse caso&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora execute:&lt;/p&gt;

&lt;h4 id=&#34;nvm-ls-remote&#34;&gt;&lt;em&gt;nvm ls-remote&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Ele vai te exibir várias versões do Node e assim sabemos que o NVM está funcionando corretamente. Eu escolhi a versão mais recente do momento a v7.3.0, você pode instalá-la digitando:&lt;/p&gt;

&lt;h4 id=&#34;nvm-install-7-3-0&#34;&gt;&lt;em&gt;nvm install 7.3.0&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Caso você instale mais de uma versão e no futuro tenha necessidade de alternar entre elas utilize o comando:&lt;/p&gt;

&lt;h4 id=&#34;nvm-use-número-da-versão&#34;&gt;&lt;em&gt;nvm use -número da versão-&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Agora vamos verificar a versão do Node para ter certeza que tudo foi instalado corretamente utilizando o comando:&lt;/p&gt;

&lt;h4 id=&#34;node-v&#34;&gt;&lt;em&gt;node -v&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Pronto, agora você já pode dar continuidade aos seus estudos de Angular ou Node.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Por que Desenvolvedores/Programadores usam Twitter?</title>
      <link>http://tableless.com.br/por-que-desenvolvedoresprogramadores-usam-twitter/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/por-que-desenvolvedoresprogramadores-usam-twitter/</guid>
      <description>

&lt;h3 id=&#34;graf-graf-h3&#34;&gt;{.graf.graf&amp;ndash;h3}&lt;/h3&gt;

&lt;p class=&#34;graf graf--p graf--hasDropCapModel graf--hasDropCap&#34;&gt;
  &lt;span class=&#34;graf-dropCap&#34;&gt;N&lt;/span&gt;os últimos 4 meses a comunidade &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://twitter.com/javabahia&#34; target=&#34;_blank&#34;&gt;Java Bahia&lt;/a&gt; me fez andar por varias universidades/faculdades e em todas elas perguntamos (não andei sozinho por aí) durante as palestras quem tinha costume de usar o Twitter. Infelizmente não tive o insight de fazer uma estatística disso, mas deu para notar que poucos desenvolvedores/programadores possuem o costume de frequentar a rede social.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Muito provavelmente essa galera passou pela mesma experiência que eu tive nas minhas duas primeiras tentativas. Acredito que você assim como eu, criou uma conta no Twitter seguindo o tutorial padrão que lá no finalzinho te faz aquela pergunta marota pedindo autorização para que ele possa selecionar pessoas que você vai acabar seguindo com base na sua lista de e-mail.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Se você tá começando na área ou tem pouco contato com desenvolvedores por meio da internet, será mesmo que você conhece pessoas interessantes na área que vão lhe trazer novidades no lugar daquelas piadinhas que conseguimos visualizar internet a fora?
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Essa é uma pergunta que você tem que si responder. Mas pela experiência e conversas que tive acredito que não, aí chegamos na segunda resposta mais falada nesses 4 meses — “Já tentei usar o Twitter, não consegui ver coisa útil nele e larguei de mão”.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Infelizmente muita gente está por fora dos benefícios que conseguimos em nossas carreiras por simplesmente usar um pouco do Twitter no nosso dia a dia. E com esse post espero conseguir te guiar a dar os primeiros passos.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Por que Desenvolvedores/Programadores usam Twitter?&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Essa é uma pergunta que na minha visão tem uma resposta muito simples. Usamos o Twitter para nos conectar com gente que até nunca vimos na vida e que possuem conhecimento de alguma tecnologia que gostamos, assim passamos a trocar feedbacks de projetos e ficamos por dentro do que está valendo a pena olhar no momento. Só de seguir as pessoas que possuem influência na sua área de estudo isso já lhe faz poupar um tempo absurdo pulando assuntos irrelevantes.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Mas a parte mais legal do Twitter é que você consegue se sentir dentro de um grupo quando aquele brodinho que parece inalcançável te responde uma dúvida, que muitas vezes na sua cabeça é tão boba, daí você não quer perguntar e fica impedido de ir adiante porque você não fez a maldita pergunta. Mas de uma maneira você vai lá e faz a pergunta, passa um tempo a pessoa te responde de um jeito que você consegue entender e se não entender, não precisa ficar acanhado basta perguntar de novo!
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Muitas vezes lanço perguntas sem uma direção específica somente com algumas #hashtags e quando menos espero &lt;em class=&#34;markup--em markup--p-em&#34;&gt;BOOM! &lt;/em&gt;alguém me responde. Imediatamente começo a trocar algumas ideias e questionamentos com essa pessoa, pronto criei mais um network com alguém que sei lá… está no Japão.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Tenho usado o Twitter desde 2013 e agora mais do que nunca estou buscando criar conexões com as pessoas para saber como elas “codam”, que tipo de projetos elas curtem e com o que elas andam mexendo. Para que assim eu possa ter ideias e vislumbrar novidades para me atualizar.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Mas e aí… Quem eu posso começar seguindo?&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Tenho muitas indicações para dar e infelizmente não tenho como falar um pouco sobre cada um, tenham um pouco de curiosidade e visitem os perfis dessas pessoas e analisam o que elas publicam. Lembrando que a ordem aqui não significa nada, eu só tinha que começar de alguma maneira
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Povão do Front-end:&lt;/strong&gt;&lt;br /&gt; Maria Clara — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @olarclara&#34; href=&#34;http://twitter.com/olarclara&#34; target=&#34;_blank&#34;&gt;@olarclara&lt;/a&gt;&lt;br /&gt; Beto Muniz — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @obetomuniz&#34; href=&#34;http://twitter.com/obetomuniz&#34; target=&#34;_blank&#34;&gt;@obetomuniz&lt;/a&gt;&lt;br /&gt; Wilson Mendes — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @willmendesneto&#34; href=&#34;http://twitter.com/willmendesneto&#34; target=&#34;_blank&#34;&gt;@willmendesneto&lt;/a&gt;&lt;br /&gt; Felipe Fialho — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @LFeh&#34; href=&#34;http://twitter.com/LFeh&#34; target=&#34;_blank&#34;&gt;@LFeh&lt;/a&gt;&lt;br /&gt; Joselito Junior — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @joselitojunior1&#34; href=&#34;http://twitter.com/joselitojunior1&#34; target=&#34;_blank&#34;&gt;@joselitojunior1&lt;/a&gt;&lt;br /&gt; Willian Justen — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @Willian_justen&#34; href=&#34;http://twitter.com/Willian_justen&#34; target=&#34;_blank&#34;&gt;@Willian_justen&lt;/a&gt;&lt;br /&gt; Felipe Nascimento — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @felipenmoura&#34; href=&#34;http://twitter.com/felipenmoura&#34; target=&#34;_blank&#34;&gt;@felipenmoura&lt;/a&gt;&lt;br /&gt; Elvis Detona — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @elvisdetona&#34; href=&#34;http://twitter.com/elvisdetona&#34; target=&#34;_blank&#34;&gt;@elvisdetona&lt;/a&gt;&lt;br /&gt; Diego Eis — &lt;a href=&#34;https://twitter.com/diegoeis&#34;&gt;@diegoeis&lt;/a&gt;&lt;br /&gt; Fábio Vedovelli &amp;#8211; &lt;strong&gt;&lt;a class=&#34;ProfileHeaderCard-screennameLink u-linkComplex js-nav&#34; href=&#34;https://twitter.com/vedovelli&#34;&gt;@&lt;span class=&#34;u-linkComplex-target&#34;&gt;vedovelli&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Povão do Android:&lt;/strong&gt;&lt;br /&gt; Marcello Galhardo — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @MarcelloGalhard&#34; href=&#34;http://twitter.com/MarcelloGalhard&#34; target=&#34;_blank&#34;&gt;@MarcelloGalhard&lt;/a&gt;&lt;br /&gt; Paula Rosa — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @_paulacr&#34; href=&#34;http://twitter.com/_paulacr&#34; target=&#34;_blank&#34;&gt;@_paulacr&lt;/a&gt;&lt;br /&gt; Juliana Chahoud — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @jchahoud&#34; href=&#34;http://twitter.com/jchahoud&#34; target=&#34;_blank&#34;&gt;@jchahoud&lt;/a&gt;&lt;br /&gt; Nelson Glauber — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @nglauber&#34; href=&#34;http://twitter.com/nglauber&#34; target=&#34;_blank&#34;&gt;@nglauber&lt;/a&gt;&lt;br /&gt; Walmyr Carvalho — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @walmyrcarvalho&#34; href=&#34;http://twitter.com/walmyrcarvalho&#34; target=&#34;_blank&#34;&gt;@walmyrcarvalho&lt;/a&gt;&lt;br /&gt; Marcelo Quinta — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @mrquinta&#34; href=&#34;http://twitter.com/mrquinta&#34; target=&#34;_blank&#34;&gt;@mrquinta&lt;/a&gt;&lt;br /&gt; Rodrigo Sicarelli — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @rsicarelli&#34; href=&#34;http://twitter.com/rsicarelli&#34; target=&#34;_blank&#34;&gt;@rsicarelli&lt;/a&gt;&lt;br /&gt; Ubiratan Soares — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @ubiratanfsoares&#34; href=&#34;http://twitter.com/ubiratanfsoares&#34; target=&#34;_blank&#34;&gt;@ubiratanfsoares&lt;/a&gt;&lt;br /&gt; Eduardo Cucharro — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @eduardocucharro&#34; href=&#34;http://twitter.com/eduardocucharro&#34; target=&#34;_blank&#34;&gt;@eduardocucharro&lt;/a&gt;&lt;br /&gt; Lucio Maciel — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @luciofm&#34; href=&#34;http://twitter.com/luciofm&#34; target=&#34;_blank&#34;&gt;@luciofm&lt;/a&gt;&lt;br /&gt; Neto Marin — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @netomarin&#34; href=&#34;http://twitter.com/netomarin&#34; target=&#34;_blank&#34;&gt;@netomarin&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Povão do Java:&lt;/strong&gt;&lt;br /&gt; Daniel Cunha — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @dvlc_&#34; href=&#34;http://twitter.com/dvlc_&#34; target=&#34;_blank&#34;&gt;@dvlc_&lt;/a&gt;&lt;br /&gt; Eder Ignatowicz — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @ederign&#34; href=&#34;http://twitter.com/ederign&#34; target=&#34;_blank&#34;&gt;@ederign&lt;/a&gt;&lt;br /&gt; Otávio Santana — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @otaviojava&#34; href=&#34;http://twitter.com/otaviojava&#34; target=&#34;_blank&#34;&gt;@otaviojava&lt;/a&gt;&lt;br /&gt; Leonardo Rocha Lima — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @leomrlima&#34; href=&#34;http://twitter.com/leomrlima&#34; target=&#34;_blank&#34;&gt;@leomrlima&lt;/a&gt;&lt;br /&gt; Java — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @java&#34; href=&#34;http://twitter.com/java&#34; target=&#34;_blank&#34;&gt;@java&lt;/a&gt;&lt;br /&gt; Vinicius Senger — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @vsenger&#34; href=&#34;http://twitter.com/vsenger&#34; target=&#34;_blank&#34;&gt;@vsenger&lt;/a&gt;&lt;br /&gt; Fabio Velloso — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @fabiovelloso&#34; href=&#34;http://twitter.com/fabiovelloso&#34; target=&#34;_blank&#34;&gt;@fabiovelloso&lt;/a&gt;&lt;br /&gt; Michael Nascimento — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @mr__m&#34; href=&#34;http://twitter.com/mr__m&#34; target=&#34;_blank&#34;&gt;@mr__m&lt;/a&gt;&lt;br /&gt; Michel Graciano — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @mgraciano&#34; href=&#34;http://twitter.com/mgraciano&#34; target=&#34;_blank&#34;&gt;@mgraciano&lt;/a&gt;&lt;br /&gt; Edson Yanaga — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @yanaga&#34; href=&#34;http://twitter.com/yanaga&#34; target=&#34;_blank&#34;&gt;@yanaga&lt;/a&gt;&lt;br /&gt; Marcelo de Castro — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @mcastroinfo&#34; href=&#34;http://twitter.com/mcastroinfo&#34; target=&#34;_blank&#34;&gt;@mcastroinfo&lt;/a&gt;&lt;br /&gt; Yara M H Senger — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @yarasenger&#34; href=&#34;http://twitter.com/yarasenger&#34; target=&#34;_blank&#34;&gt;@yarasenger&lt;/a&gt;&lt;br /&gt; Mauricio Leal — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @maltron&#34; href=&#34;http://twitter.com/maltron&#34; target=&#34;_blank&#34;&gt;@maltron&lt;/a&gt;&lt;br /&gt; Loiane Groner — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @loiane&#34; href=&#34;http://twitter.com/loiane&#34; target=&#34;_blank&#34;&gt;@loiane&lt;/a&gt;&lt;br /&gt; Bruno Souza — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @brjavaman&#34; href=&#34;http://twitter.com/brjavaman&#34; target=&#34;_blank&#34;&gt;@brjavaman&lt;/a&gt;&lt;br /&gt; Bruno Borges — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @brunoborges&#34; href=&#34;http://twitter.com/brunoborges&#34; target=&#34;_blank&#34;&gt;@brunoborges&lt;/a&gt;&lt;br /&gt; Rafael Ponte — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @rponte&#34; href=&#34;http://twitter.com/rponte&#34; target=&#34;_blank&#34;&gt;@rponte&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Então até pra escrever esse post fui solicitando ajuda no Twitter e aí nasceu essa lista bem recheada para vocês. E como dica final tentem criar lista no Twitter para organizar melhor os assuntos (vou montar um outro texto explicando como tirar proveito disso) e também uma ferramenta muito bacana chamada &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://tweetdeck.twitter.com/&#34; target=&#34;_blank&#34;&gt;Tweetdeck &lt;/a&gt;que tem me ajudado bastante.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JPA de A à Z – Por que conhecer?</title>
      <link>http://tableless.com.br/jpa-de-z-por-que-conhecer/</link>
      <pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/jpa-de-z-por-que-conhecer/</guid>
      <description>&lt;p&gt;Não dá pra negar que o Java é uma linguagem bastante verbosa e quando falávamos em juntar o Java com um banco de dados ai sim dava pra ver o tamanho do problema.&lt;/p&gt;

&lt;p&gt;Se não tivéssemos cuidado era muito fácil perder o controle da complexidade de nossas entidades e consultas.&lt;/p&gt;

&lt;p&gt;Antes de entendermos sobre a  JPA, é necessário entender que costumávamos utilizar em nossos projetos o JDBC (Java Database Connectivity) que é uma API presente no Java desde a versão 1.1 da plataforma. Mesmo sendo uma API bem antiga ela ainda continua sendo atualizada e modificada pela comunidade e pela Oracle.&lt;/p&gt;

&lt;p&gt;Resumidamente o JDBC é o antecessor da JPA porque ela era a principal forma de executar nossas querys SQL de select, update, delete, insert e até mesmo executar funções presentes no banco de dados. U&lt;span style=&#34;line-height: 1.5&#34;&gt;m detalhe interessante sobre o JDBC são seus Drivers de conexão, sendo cada banco de dados é responsável por desenvolver e atualizar o seu Driver. Isso facilitava muito a vida do desenvolvedor porque esses Drivers visam encapsular boa parte do código necessário para se conseguir uma conexão, então era uma preocupação a menos que tínhamos que ter.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Mas nem tudo eram flores quando usávamos o JDBC, porque além de ter que escrever códigos SQL direto no Java, tínhamos também que instanciar uma conexão, buscar a conexão com o banco de dados. Dai era preciso preparar um outro objeto para poder manipular a consulta informando os valores dos parâmetros e só então executávamos a consulta.&lt;/p&gt;

&lt;p&gt;Acabávamos tendo um trabalho tedioso só para executar uma consulta, todavia o ciclo não acabava nisso, depois era preciso fazer um casting do retorno da consulta para com objeto que queríamos manipular e como se não fosse suficiente também era necessário lembrar de fechar as conexões com o banco de dados.&lt;/p&gt;

&lt;p&gt;É preciso entender que estamos falando de muito tempo atrás, um tempo em que as facilidades da JPA ainda não existiam e que muita especificação que existe hoje nasceu das dificuldades do passado.&lt;/p&gt;

&lt;pre class=&#34;lang-java&#34;&gt;public class ProdutoDAO {

    Connection dbConnection;

    public ProdutoDAO(Connection con) {
        this.dbConnection = con;
    }

    public void salva(Produto produto) throws SQLException {
        String sql = &#34;INSERT INTO PRODUTO (NOME, DESCRICAO) VALUES (?,?)&#34;;

        try (PreparedStatement prStmt = dbConnection.prepareStatement(sql,
                Statement.RETURN_GENERATED_KEYS)) {

            prStmt.setString(1, produto.getNome());
            prStmt.setString(2, produto.getDescricao());
            prStmt.execute();

            try (ResultSet rs = prStmt.getGeneratedKeys()) {
                if (rs.next()) {
                    int id = rs.getInt(1);
                    produto.setId(id);
                }
            }

        }
    }

    public List lista() throws SQLException {
        List produtos = new ArrayList();

        String sql = &#34;SELECT * FROM PRODUTO&#34;;

        try (PreparedStatement prStmt = dbConnection.prepareStatement(sql)) {
            prStmt.execute();

            converterQueryEmProdutos(produtos, prStmt);
        }

        return produtos;
    }

    public List busca(Produto produto) throws SQLException {

        String sql = &#34;SELECT * FROM PRODUTO WHERE DESCRICAO like ?&#34;;
        List produtos = new ArrayList();

        try (PreparedStatement prdStmt = dbConnection.prepareStatement(sql)) {
            prdStmt.setString(1, produto.getDescricao);
            prdStmt.execute();

            converterQueryEmProdutos(produtos, prdStmt);
        }

        return produtos;
    }

    private void converterQueryEmProdutos(List produtos, PreparedStatement prdStmt) throws SQLException {

        try (ResultSet rs = prdStmt.getResultSet()) {
            while (rs.next()) {
                int id = rs.getInt(1);
                String nomeProduto = rs.getString(&#34;nome&#34;);
                String descricaoProduto = rs.getString(&#34;descricao&#34;);
                Produto produto = new Produto(nomeProduto, descricaoProduto);
                produto.setId(id);
                produtos.add(produto);
            }
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;Olhando pra esse código podemos passar um baita sufoco se por acaso algum dia o analista de requisitos resolva mexer nos atributos da entidadeProduto. Nessa DAO de exemplo só foi criada poucas consultas, mas vamos usar nossa criatividade e imaginar que na verdade existem 10 e o analista resolveu mudar o nome da coluna &amp;#8220;DESCRICAO&amp;#8221; para &amp;#8220;TIPO_PRODUTO&amp;#8221;, uma pequena mudança de nomenclatura já é suficiente para que perdêssemos tempo refatorando boa parte de nosso código.&lt;/p&gt;

&lt;p&gt;Foi para evitar todo esse trabalho que surgiu o conceito ORM (Object Relational Mapping) que traduzindo livremente de acordo com a minha vontade quer dizer: “Estou salvando a sua alma transformando os dados de um banco de dados que estão no paradigma relacional para o paradigma orientado a objetos que você tanto precisa”.&lt;/p&gt;

&lt;p&gt;Junto com a ORM também surgiu o Hibernate que é o framework JPA mais famoso e utilizado no momento. Só por curiosidade saiba que a JPA surgiu por causa dele, viram que a ideia era tão boa que resolveram transformar a implementação do Hibernate em uma especificação e até hoje muita coisa que é implementada no framework posteriormente vira especificação na JPA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mas o que é JPA?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JPA significa Java Persistence API e como já falei ela é uma especificação que nasceu de uma JSR (Java Specification Requests) que basicamente são pedidos para mudanças na linguagem, entenda a JPA como um contrato, normas, regras ou interface e que todos os Frameworks Java que trabalham com persistência de dados devem implementa-la. Além do Hibernate também temos outros Framworks como por exemplo o OpenJPA, o Batoo e o EclipseLink.&lt;/p&gt;

&lt;p&gt;Então basicamente a JPA é uma especificação que regulamenta ferramentas muito poderosas que utilizamos no nosso dia a dia para automatizar e economizar tempo de desenvolvimento. Essa especificação nos ajuda em todos os processos quando precisamos trabalhar com um banco de dados, sendo assim podemos usa-la para executar consultas, inserts, updates e deletes.&lt;/p&gt;

&lt;p&gt;Lembra daquele código verboso? Como sera que ele ficaria se fosse escrito utilizando a JPA?&lt;/p&gt;

&lt;pre class=&#34;lang-java&#34;&gt;public Produto obterPorId(Produto produto) {
        return manager.find(Produto.class, produto.getId());
    }

    @SuppressWarnings(&#34;unchecked&#34;)
    public List obterTodos() {
        return manager.createQuery(&#34;SELCT p FROM Produto p&#34;).getResultList();
    }
&lt;/pre&gt;

&lt;p&gt;Repare que no método &lt;strong&gt;obterPorId&lt;/strong&gt; não foi necessário criar uma única query SQL para executar a consulta por ID, também não foi preciso fazer nenhum casting a JPA se encarregou de fazer tudo isso pra gente. Agora olhando o método &lt;strong&gt;obterTodos &lt;/strong&gt;temos uma String que se parece muito com uma query SQL só que não é, a essa String damos o nome de JPQL (Java Persistence Query Language) e vamos conhecer mais sobre ela em outro momento.&lt;/p&gt;

&lt;p&gt;Por fim espero que você nos acompanhe nos próximos posts porque vamos aprender mais sobre essa ferramenta poderosa em conjunto com boas práticas. A ideia é de que os posts não sejam muito longos e também não sejam só tutorias de JPA, aqui iremos explorar os conceitos, apresentar exemplos e colocar minha experiência em ação com as boas práticas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JPA Hibernate – Como funciona a anotação @version?</title>
      <link>http://tableless.com.br/hibernate-como-funciona-anotacao-version/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/hibernate-como-funciona-anotacao-version/</guid>
      <description>&lt;p&gt;Recentemente um colega de trabalho me perguntou qual era função da anotação &lt;strong&gt;@version&lt;/strong&gt; presente nas entidades aqui do projeto. Achei interessante essa pergunta e resolvi fazer da resposta o meu primeiro post no blog.&lt;/p&gt;

&lt;p&gt;Para responder essa de pergunta temos que lembrar que todo banco de dados possui um controle de concorrência entre transações (se necessário solicitem nos comentários que faço um post explicando a fundo sobre isso). Para esse post só precisamos conhecer o método de controle &lt;em&gt;Optimistic concurrency control&lt;/em&gt; (controle de concorrência otimista).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Optimistic concurrency control&lt;/em&gt; (OCC)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;_Optimistic concurrency control _ou controle de concorrência otimista é um método aplicado nas transações de bancos de dados relacionais. Nesse método se acredita que a probabilidade de que duas transações utilizarem o mesmo objeto é minima, logo nada é verificado enquanto a transação está sendo executada e isso faz com que o custo dela diminua.&lt;/p&gt;

&lt;p&gt;Normalmente essa técnica funciona bem em Frameworks ORM porque eles conseguem escalonar as transações para que ocorra pouca ou nenhuma interferência. Mas no caso de ocorrer uma interferência o que acontece? Simples, alguma transação escolhida pelo Hibernate vai ser abortada e terá que ser recomeçada pelo cliente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A anotação @version&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agora que sabemos superficialmente o que é um controle de concorrência e o método &lt;strong&gt;OCC &lt;/strong&gt;fica mais fácil compreender a importância do &lt;strong&gt;@version&lt;/strong&gt; em nossas entidades. Tenha em mente que ao adicionar um atributo com essa anotação não precisamos nos preocupar em alterar seu valor porque o Hibernate fica encarregado dessa função.&lt;/p&gt;

&lt;p&gt;Para usarmos o método de concorrência otimista só precisamos declarar um atributo com o nome &lt;strong&gt;version&lt;/strong&gt; em nossa entidade. Normalmente ele é do tipo numérico e também pode ser do tipo data, mas não recomendo essa pratica e vou explicar o motivo no final deste post, abaixo temos um exemplo da classe Consulta.&lt;/p&gt;

&lt;pre class=&#34;lang-java&#34;&gt;@Entity
@Table(name = &#34;CONSULTAS&#34;, schema = &#34;tableless&#34;)
public class Consultas{
@Id
@GeneratedValue(strategy = GenerationType.AUTO)
@Column(name = &#34;ID_CONSULTA&#34;)
private Integer numero;

@Temporal(TemporalType.TIMESTAMP)
@Column(name = &#34;DATA_CONSULTA&#34;)
private Date dataConsulta;

@ManyToOne(fetch = FetchType.LAZY)
@JoinColumn(name = &#34;PACIENTE_CODIGO&#34;)
private Pacientes paciente;

@Version
private Integer version;

//getter e setter
}
&lt;/pre&gt;

&lt;p&gt;Com esse mapeamento o Hibernate vai usar automaticamente o número da versão para verificar se o objeto utilizado na transição foi atualizado desde a ultima vez em que ele foi requisitado. Pelo código SQL a baixo podemos ver a presença do atributo version tanto no trecho do SET como na cláusula WHERE isso acontece porque o Hibernate vai buscar o objeto no banco de dados usando também o número da versão e vai incrementar esse número ao mesmo tempo.&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;UPDATE CONSULTAS 
SET DATA_CONSULTA = ?, PACIENTE_CODIGO = ?, version = ?
WHERE ID_CONSULTA = ? 
AND version = ?&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;@version com Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Usar um tipo data no atributo version é uma prática que não recomendo porque no banco de dados a coluna será do tipo &lt;strong&gt;TIMESTAMP &lt;/strong&gt;e isso pode acabar permitindo que duas ou mais transações possam ser executadas com o mesmo objeto ao mesmo tempo dependendo da precisão do fuso horário configurada no banco de dados, c&lt;span style=&#34;line-height: 1.5&#34;&gt;aso essa situação acabe acontecendo vamos acabar tendo uma violação de normalização. Algumas pessoas preferem utilizar o tipo data para conseguirem visualizar &amp;#8220;quando&amp;#8221; aquele objeto foi alterado pela ultima vez, caso essa seja sua necessidade recomendo que crie um novo atributo em sua classe ao invés de utilizar a anotação &lt;strong&gt;@version&lt;/strong&gt; como data.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;
  Por fim espero que esse post te ajude a trabalhar com controle de concorrência no Hibernate. Dúvidas, sugestões, correções, elogios nos comentários ou no meu twitter. Xablau!
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>