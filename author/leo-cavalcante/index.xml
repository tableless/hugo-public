<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leo Cavalcante on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/leo-cavalcante/index.xml</link>
    <description>Recent content in Leo Cavalcante on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/leo-cavalcante/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introdu√ß√£o ao Meteor</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-meteor/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-meteor/</guid>
      <description>

&lt;p&gt;Primeiro, se voc√™ ainda n√£o conhece o Meteor, &lt;a href=&#34;http://tableless.com.br/apresentando-meteor/&#34; target=&#34;_blank&#34;&gt;da uma lida aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;N√£o sou¬†t√£o bom em fazer tutorial quanto em propaganda, deve ser por isso que trabalho numa ag√™ncia de publicidade e n√£o numa escola, mas vamos ao que interessa, vamos brincar um pouco com Meteor.&lt;/p&gt;

&lt;p&gt;Antes de mais nada, obviamente, voc√™ precisa instalar em sua m√°quina. Tem pra Windows, Linux e Mac, n√£o tem erro:&lt;/p&gt;

&lt;p&gt;&amp;#8211;¬†&lt;a href=&#34;https://www.meteor.com/install&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.meteor.com/install&#34;&gt;https://www.meteor.com/install&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois de instalado (poder√° ser necess√°rio reiniciar o computador em alguns casos), voc√™ vai estar apto pra executar os comandos do &lt;a href=&#34;https://www.meteor.com/tool&#34; target=&#34;_blank&#34;&gt;Meteor Tool&lt;/a&gt;. O que √© isso? √â uma CLI (Command Line Interface) pra voc√™ criar, rodar, instalar pacotes e tudo o mais necess√°rio pra desenvolver aplica√ß√µes com a¬†plataforma.&lt;/p&gt;

&lt;p&gt;Para testar, rode o comando &lt;code&gt;meteor --version&lt;/code&gt;; o output √© como se espera: a vers√£o instalada do Meteor:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/08/meter-version.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-50696&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/08/meter-version.jpg&#34; alt=&#34;meter--version&#34; width=&#34;805&#34; height=&#34;373&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Falando nisso, tenho que atualizar o meu. Pra quem acabou de instalar a vers√£o vai ser a 1.1.0.3.&lt;/p&gt;

&lt;p&gt;Ent√£o bora criar o primeiro app; e voc√™ faz isso simplesmente executado o comando &lt;code&gt;create&lt;/code&gt; e passando o nome da pasta que voc√™ vai dar pro projeto.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;meteor create hello-meteor&lt;/pre&gt;

&lt;p&gt;O Meteor vai ent√£o criar essa pasta &lt;code&gt;hello-meteor&lt;/code&gt; e vai deixa l√° alguns arquivos iniciais. A√≠ voc√™ pensa: &amp;#8220;l√° vem uns arquivos sinistros que nunca vi na vida; coisa a mais pra aprender&amp;#8221;, mas calma jovem, n√£o s√£o nada mais nada menos que um &lt;code&gt;.html&lt;/code&gt;, um &lt;code&gt;.css&lt;/code&gt; e um &lt;code&gt;.js&lt;/code&gt;; exatamente isso, esse trio que voc√™ j√° conhece e tem a maior admira√ß√£o e eles s√≥ est√£o l√° pra ilustrar como o Meteor funciona, s√≥ pra te falar: &amp;#8220;olha, √© por aqui que voc√™ come√ßa&amp;#8221;; quem manja &amp;#8220;dos Meteor&amp;#8221; j√° sai apagando esses arquivos.&lt;/p&gt;

&lt;p&gt;Como a gente n√£o manja ainda, vamos usa-los pra entender como ele funciona!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/08/hellometeor.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-50701&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/08/hellometeor.jpg&#34; alt=&#34;hellometeor&#34; width=&#34;805&#34; height=&#34;373&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;hello-meteor.css&lt;/code&gt; n√£o tem nada, √© isso, t√° l√° s√≥ pra ilustrar, como falei antes, mas √© l√° que vai seu CSS.&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;hello-meteor.html&lt;/code&gt; j√° tem alguma coisa, mas n√£o √© um HTML qualquer. Ele n√£o tem a tag &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; e tem essa tal de &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; mais essas chaves &lt;code&gt;{{ }}&lt;/code&gt;. ¬†Primeiro √© bom lembrar que a &lt;template&gt; n√£o √© coisa que o Meteor inventou √© HTML5 e j√° √© &lt;a href=&#34;http://www.w3.org/TR/html5/scripting-1.html#the-template-element&#34; target=&#34;_blank&#34;&gt;recomenda√ß√£o da W3C&lt;/a&gt;. As chaves tamb√©m n√£o s√£o coisa nova do Meteor, quem usa &lt;a href=&#34;http://handlebarsjs.com/&#34; target=&#34;_blank&#34;&gt;Handlebars.js&lt;/a&gt; j√° conhece muito bem e vai estar muito familiarizado j√° que o &lt;a href=&#34;https://atmospherejs.com/meteor/spacebars&#34; target=&#34;_blank&#34;&gt;Spacebars&lt;/a&gt;, a engine do Meteor, √© baseada no Handlebars. &amp;#8220;Por que eles fizeram outra template engine?&amp;#8221; voc√™ deve estar se perguntando e isso pra ter a &lt;a href=&#34;http://docs.meteor.com/#/full/livehtmltemplates&#34; target=&#34;_blank&#34;&gt;reatividade no HTML&lt;/a&gt; que a gente viu no post anterior.&lt;/p&gt;

&lt;p&gt;Mas o HTML √© simples, uma olhada cautelosa e voc√™ j√° entende o que t√° acontecendo, tem a &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; com um &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, ok; tem a &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; com um &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, normal e tem esse &lt;code&gt;{{&amp;gt; hello}}&lt;/code&gt; (se voc√™ usou o mesmo nome pra pasta), isso faz exatamente o que voc√™ t√° imaginando, imprime o &lt;code&gt;&amp;lt;template name=&amp;quot;hello&amp;quot;&amp;gt;&lt;/code&gt;, declarado logo abaixo, naquele espa√ßo da &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. Se voc√™ j√° tem no√ß√£o de template engine isso j√° entrou na sua cabe√ßa, nada diferente de Angular e Ember at√© aqui.&lt;/p&gt;

&lt;h2 id=&#34;o-hello-meteor-js&#34;&gt;O hello-meteor.js&lt;/h2&gt;

&lt;p&gt;Agora sim, o JavaScript, ele que faz acontecer.&lt;/p&gt;

&lt;p&gt;A primeira coisa que a gente tem que falar no JS quando se trata do Meteor, s√£o as Booleans: &lt;code&gt;Meteor.isClient&lt;/code&gt; e &lt;code&gt;Meteor.isServer&lt;/code&gt;; sim, tenho certeza que voc√™ imaginou e √© pra isso mesmo pra isso que elas servem. Os arquivos &lt;code&gt;.js&lt;/code&gt; no Meteor tem por natureza rodar tanto no ambiente cliente quanto no servidor, &lt;a href=&#34;http://docs.meteor.com/#/full/structuringyourapp&#34; target=&#34;_blank&#34;&gt;salvo quando localizados em pastas espec√≠ficas&lt;/a&gt;, que √© a parte sobre como organizar seu app em Meteor que a gente pode deixar pra outro post. Sendo assim o Meteor te da essas duas &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean&#34; target=&#34;_blank&#34;&gt;Booleans&lt;/a&gt;¬†pra voc√™ saber quando t√° em um ambiente ou em outro. No &lt;code&gt;hello-meteor.js&lt;/code&gt; o &lt;code&gt;if (Meteor.isClient) {&lt;/code&gt; e o &lt;code&gt;if (Meteor.isServer) {&lt;/code&gt; est√£o claros.&lt;/p&gt;

&lt;p&gt;No &lt;code&gt;isServer&lt;/code&gt; n√£o temos muita a√ß√£o, mas no &lt;code&gt;isClient&lt;/code&gt; a gente nota essa global &lt;code&gt;Template&lt;/code&gt;; pra cada &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; que voc√™ definir nos seus &lt;code&gt;.html&lt;/code&gt;, a &lt;code&gt;Template&lt;/code&gt; ter√° uma propriedade com o nome que voc√™ deu, no caso &lt;code&gt;hello&lt;/code&gt;. E o que voc√™ pode fazer com isso? Adicionar helpers e eventos. Helpers, quem trabalha com templates j√° sabe, s√£o pequenas fun√ß√µes que te ajudam a mover alguma l√≥gica de apresenta√ß√£o que estaria no HTML pro JS, o que faz muito mais sentido e eventos s√£o, bom, eventos, voc√™ j√° conhece eles, s√£o exatamente os eventos do DOM: click, mouseover, submit etc.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://docs.meteor.com/#/full/eventmaps&#34; target=&#34;_blank&#34;&gt;padr√£o pra selecionar os eventos&lt;/a&gt; √©: &lt;code&gt;eventtype selector&lt;/code&gt; e eles pode ser separados por v√≠rgula. No nosso hello-meteor.js temos l√° como exemplo: &lt;code&gt;&#39;click button&#39;&lt;/code&gt; no lugar de &lt;code&gt;click&lt;/code&gt; poderia ser &lt;code&gt;submit&lt;/code&gt; e no lugar de &lt;code&gt;button&lt;/code&gt; poderia ser qualquer seletor CSS como √© na jQuery, ali√°s, j√° comentei que o Meteor vem a com jQuery por padr√£o e voc√™ pode executar &lt;code&gt;template.$&lt;/code&gt; e retornar um jQuery Object? üòâ Pois √©&amp;#8230;&lt;/p&gt;

&lt;p&gt;Ainda no JavaScript temos a global &lt;code&gt;Session&lt;/code&gt; e √© justamente pra trabalhar com sess√µes mesmo; no exemplo temos a chave &lt;code&gt;counter&lt;/code&gt; na nossa &lt;code&gt;Session&lt;/code&gt; e a cada clique do bot√£o o handle incrementa essa chave direto na &lt;code&gt;Session&lt;/code&gt;; temos uma helper de mesmo nome (&lt;code&gt;counter&lt;/code&gt;) que simplesmente retorna o valor da chave na sess√£o e no &lt;code&gt;.html&lt;/code&gt; a gente invoca essa helper com &lt;code&gt;{{counter}}&lt;/code&gt;; simples, um template em HTML imprimindo o valor de uma vari√°vel do JavaScript. O que tem de super cool a√≠ √© como dissemos a reatividade, a mudan√ßa de estado ser propagada sem esfor√ßo algum, voc√™ pode ver que n√£o tem nenhum c√≥digo pra ouvir quando a &lt;code&gt;counter&lt;/code&gt; √© alterada e alterar no HTML, o Meteor te da isso out-of-the-box.&lt;/p&gt;

&lt;p&gt;Toda chave na &lt;code&gt;Session&lt;/code&gt; √© uma &lt;a href=&#34;http://docs.meteor.com/#/full/reactivevar&#34; target=&#34;_blank&#34;&gt;ReactiveVar&lt;/a&gt;¬†e vai ser pro-ativa o suficiente pra ouvir altera√ß√µes em si e propaga-las at√© a View/HTML/Blaze/Spacebars.&lt;/p&gt;

&lt;p&gt;Quer ver isso tudo funcionando? S√≥ executar &lt;code&gt;meteor&lt;/code&gt; dentro da pasta do seu app.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/08/runnnign.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-50707&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/08/runnnign.jpg&#34; alt=&#34;running&#34; width=&#34;805&#34; height=&#34;373&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, app rodando, s√≥ entrar em &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; no seu navegador preferido e clicar √† vontade.&lt;/p&gt;

&lt;p&gt;Quer saber onde entra o MongoDB nessa hist√≥ria? Que ver o Meteor com Angular ou React? Comenta a√≠&amp;#8230;&lt;/p&gt;

&lt;p&gt;Abs!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apresentando: Meteor!</title>
      <link>https://tableless.github.io/hugo-public/apresentando-meteor/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/apresentando-meteor/</guid>
      <description>&lt;p&gt;Fiquei impressionado ao ver que n√£o h√° nenhum artigo sobre o Meteor no Tableless ainda, ou a busca n√£o t√° funcionando muito bem.¬†Por que? Porque √© uma plataforma simplesmente fod@!¬†N√£o conhe√ßo nada t√£o produtivo e simples de usar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.meteor.com/&#34; target=&#34;_blank&#34;&gt;Meteor&lt;/a&gt; √© uma plataforma open-source pra desenvolver aplicativos pra web e mobile.&lt;/p&gt;

&lt;p&gt;Ela √© fullstack, te entrega uma solu√ß√£o completa desde o banco de dados at√© o front-end e essa solu√ß√£o √© toda em JavaScript. Similar ao &lt;a href=&#34;https://en.wikipedia.org/wiki/MEAN_(software_bundle)&#34; target=&#34;_blank&#34;&gt;MEAN&lt;/a&gt;¬†(que ali√°s √© outra plataforma bem legal que n√£o tem artigo no Tableless) ela usa &lt;a href=&#34;https://nodejs.org/&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; e &lt;a href=&#34;https://www.mongodb.org/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt;¬†s√≥ que no lugar do &lt;a href=&#34;http://expressjs.com/&#34; target=&#34;_blank&#34;&gt;Express&lt;/a&gt;¬†usa um &lt;a href=&#34;https://www.meteor.com/webapp&#34; target=&#34;_blank&#34;&gt;framework pr√≥prio pra HTTP&lt;/a&gt; e no lugar do &lt;a href=&#34;https://angularjs.org/&#34; target=&#34;_blank&#34;&gt;AngularJS&lt;/a&gt; usa uma view engine pr√≥pria tamb√©m chamada &lt;a href=&#34;https://www.meteor.com/blaze&#34; target=&#34;_blank&#34;&gt;Blaze&lt;/a&gt;, mas n√£o se limita a√≠, se voc√™ quiser poder usar &lt;a href=&#34;https://angularjs.org/&#34; target=&#34;_blank&#34;&gt;AngularJS&lt;/a&gt; ou at√© mesmo &lt;a href=&#34;http://facebook.github.io/react/&#34; target=&#34;_blank&#34;&gt;React&lt;/a&gt; pra trabalhar com seus componentes.&lt;/p&gt;

&lt;p&gt;Um dos lemas da &lt;a href=&#34;http://docs.meteor.com/#/full/sevenprinciples&#34; target=&#34;_blank&#34;&gt;filosofia do Meteor&lt;/a&gt; √©¬†&lt;em&gt;Simplicity Equals Productivity&lt;/em&gt; (Simplicidade √© igual a produtividade); cara, nada de &lt;em&gt;boilerplates&lt;/em&gt; complexos, extens√µes sinistras, programas estranhos, arquivos de configura√ß√£o&amp;#8230; nada disso. A coisa tem que ser simples, sendo simples voc√™ se torna mais produtivo. O Meteor recebeu nada mais, nada menos que¬†&lt;a href=&#34;http://info.meteor.com/blog/meteors-new-112-million-development-budget&#34; target=&#34;_blank&#34;&gt;11,2 MILH√ïES de D√ìLARES em 2012&lt;/a&gt; como aporte de uma¬†Venture Capital que decidiu apostar na plataforma.&lt;/p&gt;

&lt;p&gt;A parada √© t√£o simples que voc√™ n√£o precisa desses arquivos chatos de configura√ß√£o do Gulp, Grunt, Webpack etc que voc√™ tem pro LESS, SASS, JSX, CoffeeScript&amp;#8230; Ele se baseia na extens√£o do arquivo, se houve um aquivo &lt;code&gt;.less&lt;/code&gt; ele compila pra CSS se tiver um arquivo &lt;code&gt;.coffee&lt;/code&gt; ele compila pra JavaScript, se tiver um arquivo &lt;code&gt;.jsx&lt;/code&gt; ele j√° compila pra JavaScript, se voc√™ tiver um arquivo &lt;code&gt;.es6.js&lt;/code&gt; ele j√° compila pra ES5 etc; sem voc√™ precisar ficar &amp;#8220;falando o √≥bvio&amp;#8221;, √© tudo autom√°tico. At√© mesmo arquivos &lt;code&gt;.markdown&lt;/code&gt; pra HTML.&lt;/p&gt;

&lt;p&gt;Outra¬†&lt;em&gt;feature&lt;/em&gt; essencial do Meteor √© a &lt;a href=&#34;http://docs.meteor.com/#/full/reactivity&#34; target=&#34;_blank&#34;&gt;Reatividade (Reactivity)&lt;/a&gt;; WTF? &lt;a href=&#34;https://en.wikipedia.org/wiki/Reactive_programming&#34; target=&#34;_blank&#34;&gt;Programa√ß√£o reativa&lt;/a&gt;¬†√© basicamente: sobre o fluxo dos dados e a propaga√ß√£o da mudan√ßa de estado. Se voc√™ tiver uma vari√°vel chamada &lt;code&gt;foo&lt;/code&gt; com valor &lt;code&gt;&amp;quot;bar&amp;quot;&lt;/code&gt; e de qualquer lugar da Internet essa vari√°vel mudar pra &lt;code&gt;&amp;quot;qux&amp;quot;&lt;/code&gt;, todas abas abertas ou aplicativos que voc√™ fez v√£o identificar essa altera√ß√£o e &lt;a href=&#34;http://docs.meteor.com/#/full/livehtmltemplates&#34; target=&#34;_blank&#34;&gt;mudar no HTML&lt;/a&gt;, sem voc√™ precisar programar nada pra isso! O Meteor entende altera√ß√µes ao¬†no¬†n√≠vel da camada do MongoDB fazendo essa reatividade ser at√© persistente. Desenvolver¬†&lt;em&gt;chats&lt;/em&gt; ou qualquer tipo de aplica√ß√£o¬†&lt;em&gt;multi-client&lt;/em&gt; √© extremamente simples.&lt;/p&gt;

&lt;p&gt;Al√©m de tudo isso, a plataforma Meteor ainda te da um &lt;a href=&#34;http://docs.meteor.com/#/full/deploying&#34; target=&#34;_blank&#34;&gt;servi√ßo de hospedagem gr√°tis&lt;/a&gt;. Seu projeto em Meteor pode rodar em qualquer servidor que rode MongoDB e Node.js, mas a gente sempre passar por aquele est√°gio de prototipagem da aplica√ß√£o ou voc√™ fez desenvolveu uma¬†ideia muito legal e quer mostrar pra outras pessoas; pois √©, o Meteor tem um nuvem p√∫blica gratuita pra voc√™ hospedar suas aplica√ß√µes de baixo tr√°fego e at√© 200 emails por dia.&lt;/p&gt;

&lt;p&gt;Cara, na boa&amp;#8230; Fod@!&lt;/p&gt;

&lt;p&gt;Vou ficar de olho na popularidade desse post e se for o caso, fa√ßo um outro post mais estilo tutorial pra iniciar a galera no Meteor.&lt;/p&gt;

&lt;p&gt;Abra√ßo!&lt;/p&gt;

&lt;p&gt;**EDIT&lt;/p&gt;

&lt;p&gt;** Galera, t√° no ar a introdu√ß√£o pra voc√™ come√ßar¬†no Meteor, confere l√°:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/introducao-ao-meteor/&#34;&gt;tableless.com.br/introducao-ao-meteor&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdu√ß√£o ao webpack</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-webpack/</link>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-webpack/</guid>
      <description>

&lt;h2 id=&#34;o-que-√©-onde-vivem-o-que-comem&#34;&gt;O que √©? (Onde vivem? O que comem?)&lt;/h2&gt;

&lt;p&gt;webpack (com &amp;#8220;w&amp;#8221; min√∫sculo, respeitando a grafia do site oficial) √© um empacotador de c√≥digo para projetos web, como o &lt;a href=&#34;http://browserify.org/&#34;&gt;browserify&lt;/a&gt;. O que ele se prop√µe a fazer de diferente √© focar em m√≥dulos da sua aplica√ß√£o. Nem sempre ter todo e qualquer JavaScript/CSS do seu projeto num √∫nico arquivo √© bom, por isso o webpack tem a ideia de &lt;a href=&#34;http://webpack.github.io/docs/code-splitting.html&#34;&gt;code splitting&lt;/a&gt;, onde voc√™ modulariza partes reaproveit√°veis do seu projeto, facilitando o desenvolvimento independente, por exemplo, ter uma equipe trabalhando em um m√≥dulo X e outra num m√≥dulo Y, mas ambos de um mesmo projeto.&lt;/p&gt;

&lt;p&gt;N√£o √© sempre que a gente faz um projeto t√£o grande assim, a ponto de precisar separar equipes em diferentes m√≥dulos, mas o webpack tamb√©m pode ser ideal para pequenos projetos.&lt;/p&gt;

&lt;h2 id=&#34;instalando&#34;&gt;Instalando.&lt;/h2&gt;

&lt;p&gt;√â bem simples. Voc√™ tem o webpack como pacote do &lt;a href=&#34;http://nodejs.org/&#34;&gt;NodeJS&lt;/a&gt;. Se voc√™ n√£o sabe o que √© NodeJS, &lt;a href=&#34;http://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js/&#34;&gt;pare agora e leia esse artigo&lt;/a&gt;. Sugiro dar uma pesquisada sobre &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt; antes. Se voc√™ entendeu tudo at√© aqui, pode escolher entre t√™-lo globalmente ou somente num projeto:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;&amp;gt; npm install&amp;lt;/span&gt; webpack -g
&amp;gt; npm install webpack --&lt;span class=&#34;hljs-built_in&#34;&gt;save&lt;/span&gt;-&lt;span class=&#34;hljs-built_in&#34;&gt;dev&lt;/span&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;usando&#34;&gt;Usando&lt;/h2&gt;

&lt;p&gt;√â bem simples, tamb√©m. O comando espera dois argumentos, um arquivo de entrada e um arquivo de sa√≠da que se n√£o existir vai ser criado e se j√° existir ser√° substitu√≠do.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ webpack &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;entry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;output&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Voc√™ pode definir um arquivo de configura√ß√£o pro comando com a op√ß√£o &lt;code&gt;--config example.config.js&lt;/code&gt; se nada for passado o webpack vai procurar um arquivo chamado &lt;code&gt;webpack.config.js&lt;/code&gt; onde ele est√° sendo executado (normalmente raiz do projeto) se n√£o achar, vai usar as configura√ß√µes padr√£o, o famoso default.&lt;/p&gt;

&lt;h2 id=&#34;loaders-e-preloaders&#34;&gt;Loaders e preloaders&lt;/h2&gt;

&lt;p&gt;O webpack pode executar transforma√ß√µes nos arquivos durante o processo de empacotamento, essas transforma√ß√µes s√£o, por exemplo, nossos famosos pr√©-processadores, React (JSX), Coffee, 6to5, SweetJS, TypeScript&amp;#8230; a lista de &lt;em&gt;loaders&lt;/em&gt; j√° prontos √© muito boa e claro, voc√™ pode construir os seus se sentir falta de algum. Tamb√©m tem Less, Sass, Stylus, Jade, Ejs, Mustache, Handlebars, Markdown&amp;#8230; n√£o √© s√≥ pra JavaScript. Em adi√ß√£o aos &lt;em&gt;loaders&lt;/em&gt;, voc√™ pode ter plugins, que executam processos mais complexos que as transforma√ß√µes, por exemplo, &lt;strong&gt;UglifyJsPlugin!&lt;/strong&gt; Yay!&lt;/p&gt;

&lt;h2 id=&#34;bora-ver-na-pr-tica&#34;&gt;Bora ver na pr√°tica&lt;/h2&gt;

&lt;p&gt;Vamos criar um m√≥dulo super √∫til que nunca vi por a√≠ que serve pra deixar as letras de um texto em caixa alta.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// upper.js
module.exports = function(str) {
    return str.toUpperCase();
};
&lt;/pre&gt;

&lt;p&gt;Agora a gente chama esse modulo no nosso arquivo de entrada, que n√£o √© necessariamente o principal, por isso a gente n√£o vai chamar de &lt;em&gt;main.js&lt;/em&gt; ou &lt;em&gt;app.js.&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// entry.js
var upper = require(&#39;./upper.js&#39;);
console.log(upper(&#39;test&#39;));
&lt;/pre&gt;

&lt;p&gt;Sim! Como puderam perceber, podemos usar o padr√£o CommonJS pra criar nossos m√≥dulos, que √© o mesmo padr√£o usado pelo NodeJS, ent√£o a gente pode usar alguns pacotes do NPM tamb√©m, mesmo num build com target pro browser (m√≥dulo focado para o navegador). Vamos ver o que vai dar isso at√© agora.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;&amp;gt; webpack entry.js bundle.js&lt;/pre&gt;

&lt;p&gt;O comando gera um &lt;em&gt;report&lt;/em&gt; simples no console mesmo, aqui ficou:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Hash: 0b87391ad5027f171afe
Version: webpack 1.5.3
Time: 310ms
Asset Size Chunks Chunk Names
bundle.js 1706 0 [emitted] main
[0] ./entry.js 63 {0} [built]
[1] ./upper.js 67 {0} [built]
&lt;/pre&gt;

&lt;p&gt;Se voc√™ estiver acompanhando na pr√°tica, pode abrir o &lt;em&gt;bundle.js&lt;/em&gt; (se j√° n√£o fez isso seguindo o instinto curioso de qualquer dev) e ver como fica o &lt;em&gt;build&lt;/em&gt;. Voc√™ vai notar que o &lt;strong&gt;webpack&lt;/strong&gt; tem um &lt;em&gt;boilerplate&lt;/em&gt; at√© consider√°vel, mas √© √∫til, ele tem um sistema de cache que performa os &lt;em&gt;builds&lt;/em&gt;, ele vai saber qual m√≥dulo mudou de verdade ao inv√©s de pegar tudo e &lt;em&gt;buildar&lt;/em&gt; tudo de novo.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;&amp;gt; node bundle.js
TEST
&lt;/pre&gt;

&lt;h2 id=&#34;react-t-na-moda-vamos-usar-&#34;&gt;React t√° na moda, vamos usar.&lt;/h2&gt;

&lt;p&gt;Vamos usar um arquivo de configura√ß√£o pra vincular os arquivos &lt;em&gt;.jsx&lt;/em&gt; ao Loader certo, o webpack usa RegExp pra testar sobre o nome dos arquivos e vincular a um &lt;em&gt;loader&lt;/em&gt; e o arquivo de configura√ß√£o √© um m√≥dulo CommonJS. J√° que estamos usando um arquivo para a configura√ß√£o, vamos por nele qual √© nosso &lt;em&gt;entry&lt;/em&gt; e qual √© nosso &lt;em&gt;output&lt;/em&gt;. Mas antes, como usaremos m√≥dulos do NPM, vamos inicia-lo em nosso projeto e ter um arquivo declarando essas depend√™ncias, o &lt;em&gt;packages.json&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;&amp;gt; npm init
&amp;gt; npm install react --save
&amp;gt; npm install jsx-loader --save-dev
&lt;/pre&gt;

&lt;p&gt;Nosso arquivo de configura√ß√£o vai ficar assim:&lt;/p&gt;

&lt;pre&gt;// webpack.config.js
module.exports = {
    entry: &#34;./entry.jsx&#34;,
    output: {
        filename: &#34;bundle.js&#34;
    },
    module: {
        loaders: [
            {test: /\.jsx/, loader: &#39;jsx-loader&#39;}
        ]
    }
};
&lt;/pre&gt;

&lt;p&gt;Agora √© s√≥ rodar o webpack, sem passar nada, ele j√° vai ler nas configura√ß√µes.&lt;/p&gt;

&lt;pre&gt;&amp;gt; webpack&lt;/pre&gt;

&lt;p&gt;T√° l√°! Voc√™ tem um &lt;em&gt;bundle&lt;/em&gt; com React pronto pra web.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;Essa foi s√≥ uma introdu√ß√£o e vale ressaltar que o webpack n√£o √© uma alternativa aos &lt;em&gt;tasks managers&lt;/em&gt; como Gulp e Grunt (caso algu√©m tenha entendido isso), mas s√≥ com o webpack voc√™ tem um &lt;em&gt;watcher&lt;/em&gt; pro &lt;em&gt;build&lt;/em&gt; acontecer logo que ele detecta uma altera√ß√£o em um arquivo e o plugin do UglifyJS pra &lt;em&gt;minificar&lt;/em&gt; seu &lt;em&gt;build&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Isso a√≠, se ficou alguma d√∫vida, s√≥ chamar üòâ&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>