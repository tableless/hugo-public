<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Willem Allan on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/willem-allan/index.xml</link>
    <description>Recent content in Willem Allan on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/willem-allan/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Testando sua app do Firefox OS em seu device</title>
      <link>https://tableless.github.io/hugo-public/testando-sua-app-firefox-os-em-seu-device/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/testando-sua-app-firefox-os-em-seu-device/</guid>
      <description>

&lt;h2 id=&#34;configurando-aparelho&#34;&gt;Configurando Aparelho&lt;/h2&gt;

&lt;p&gt;Para habilitar Depuração em seu celular é preciso ir em Configurações, Informações &amp;gt; Mais informações &amp;gt; Desenvolvedor, marque a opção Depuração Remota.&lt;/p&gt;

&lt;h2 id=&#34;configurando-seu-mac-os-x&#34;&gt;Configurando seu Mac OS X&lt;/h2&gt;

&lt;p&gt;Após habilitar opção no celular é preciso configurar e baixar adt-bundle no site do Android.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/sdk/index.html&#34; target=&#34;_blank&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caso queria instalar em um Windows ou Linux segue o link da &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Debugging/Connecting_a_Firefox_OS_device_to_the_desktop&#34; target=&#34;_blank&#34;&gt;Mozilla&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Debugging/Connecting_a_Firefox_OS_device_to_the_desktop&#34; target=&#34;_blank&#34;&gt;Windows e Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No meu caso baixei o arquivo adt-bundle-mac-x86_64-20130522.zip, extraia em algum diretório de sua preferência. Lembre-se que o caminho desta pasta é importante no passo seguinte.&lt;/p&gt;

&lt;p&gt;Agora é preciso editar seu arquivo .bashrc ou .profile, depende do seu sistema:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;nano ~/.profile
&lt;/pre&gt;

&lt;p&gt;No meu caso editei o arquivo .profile e adicionei a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;export PATH=&#34;/Applications/adt-bundle-mac-x86_64-20130522/sdk/platform-tools:$PATH&#34;
&lt;/pre&gt;

&lt;p&gt;Após a alteração execute o comando para atualizar o seu console, dessa forma ele irá reconhecer o comando &lt;strong&gt;adb devices&lt;/strong&gt; que será usado para reconhecer seu smartphone:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;source ~/.profile
&lt;/pre&gt;

&lt;p&gt;Plug o cabo usb no Macbook e em seu celular, execute o comando para verificar se o seu aparelho é reconhecido:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;adb devices
&lt;/pre&gt;

&lt;p&gt;Retorno será algo parecido com isso:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;List of devices attached
AA:BB:A5:B5:AA:BB    device
&lt;/pre&gt;

&lt;p&gt;Pronto, seu device foi reconhecido em seu computador.&lt;/p&gt;

&lt;h2 id=&#34;instalando-sua-app-no-device-com-firefox-os&#34;&gt;Instalando sua app no device com Firefox OS&lt;/h2&gt;

&lt;p&gt;Agora abra seu Firefox e no menu vá até Ferramentas &amp;gt; Desenvolvedor web &amp;gt; Firefox Os Simulator.&lt;/p&gt;

&lt;p&gt;Se você não adicionou sua aplicação, adicione agora apontado o caminho até o arquivo manifest.webapp da sua aplicação.&lt;/p&gt;

&lt;p&gt;Após adicionado basta clicar em Push e aparecerá uma mensagem em seu aparelho perguntando se você aceita instalação do aplicativo, basta clicar ok e o aplicativo será instalado no seu smartphone.&lt;/p&gt;

&lt;h2 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Debugging&#34; target=&#34;_blank&#34;&gt;Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Desenvolvendo para Firefox OS</title>
      <link>https://tableless.github.io/hugo-public/desenvolvendo-para-firefox-os/</link>
      <pubDate>Mon, 20 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/desenvolvendo-para-firefox-os/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Firefox OS é novo sistema operacional móvel desenvolvido pela Mozilla. Para nós desenvolvedores web ficou fácil criar aplicativos para aparelhos mobile, pois para desenvolver é utilizado apenas HTM5, CSS e JAVASCRIPT.&lt;/p&gt;

&lt;p&gt;Para testar seus aplicativos não precisa ter um smartphone com Firefox OS, basta baixar a extensão (Firefox OS Simulator) do Firefox disponível em Windows, Linux e MAC OS X.&lt;/p&gt;

&lt;h2 id=&#34;colocando-em-pratica&#34;&gt;Colocando em pratica&lt;/h2&gt;

&lt;p&gt;Primeiro passo é instalar a extensão Firefox OS Simulator em seu Firefox.&lt;/p&gt;

&lt;p&gt;Firefox OS Simulator &amp;#8211; links para Download&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows &amp;#8211; &lt;a href=&#34;https://addons.mozilla.org/firefox/downloads/file/190978/firefox_os_simulator-2.0-fx-windows.xpi&#34; target=&#34;_blank&#34;&gt;download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux &amp;#8211; &lt;a href=&#34;https://addons.mozilla.org/firefox/downloads/file/190986/firefox_os_simulator-2.0-fx-linux.xpi&#34; target=&#34;_blank&#34;&gt;download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mac OS X &amp;#8211; &lt;a href=&#34;https://addons.mozilla.org/firefox/downloads/file/190998/firefox_os_simulator-2.0-fx-mac.xpi&#34; target=&#34;_blank&#34;&gt;download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;iniciando-firefox-os-simulator&#34;&gt;Iniciando Firefox OS Simulator&lt;/h2&gt;

&lt;p&gt;Para abrir o Firefox OS Simulator procure a aba Ferramentas &amp;gt; Desenvolvedor web &amp;gt; Firefox OS Simulator. Uma aba será aberta com as informações do Firefox OS Simulator. Nesta aba você pode desligar e ligar o emulador e nela também são adicionados os aplicativos que serão instalados no emulador assim que iniciado. Para adicionar seus aplicativos, clique em Add diretory e localizar a pasta em que você desenvolveu seu aplicativo.&lt;/p&gt;

&lt;h2 id=&#34;criando-uma-aplicação-para-firefox-os&#34;&gt;Criando uma aplicação para Firefox OS&lt;/h2&gt;

&lt;p&gt;Para iniciar, crie uma pasta do seu projeto e nela ficarão os arquivos da sua aplicação. No meu caso willemallan. Dentro do diretório crie um arquivo manifest.webapp este arquivo contém as configurações do projeto como: nome, autor, versão, icones e outros dados importantes do aplicativo. Veja abaixo o exemplo do arquivo manifest.webapp.&lt;/p&gt;

&lt;pre class=&#34;lang-html linenums&#34;&gt;{
    &#34;version&#34;: &#34;0.1&#34;,
    &#34;name&#34;: &#34;Willem Allan&#34;,
    &#34;description&#34;: &#34;Willem Allan - Blog posts&#34;,
    &#34;launch_path&#34;: &#34;/index.html&#34;,
    &#34;icons&#34;: {
        &#34;16&#34;: &#34;/imgs/icons/wi16.png&#34;,
        &#34;48&#34;: &#34;/imgs/icons/wi48.png&#34;,
        &#34;128&#34;: &#34;/imgs/icons/wi128.png&#34;
    },
    &#34;developer&#34;: {
        &#34;name&#34;: &#34;Willem Allan&#34;,
        &#34;url&#34;: &#34;http://willemallan.com.br&#34;
    },
    &#34;installs_allowed_from&#34;: [&#34;*&#34;],
    &#34;locales&#34;: {
        &#34;es&#34;: {
            &#34;description&#34;: &#34;Willem Allan - Blog posts&#34;,
            &#34;developer&#34;: {
                &#34;url&#34;: &#34;http://willemallan.com.br&#34;
            }
        },
        &#34;it&#34;: {
            &#34;description&#34;: &#34;Willem Allan - Blog posts&#34;,
            &#34;developer&#34;: {
                &#34;url&#34;: &#34;http://willemallan.com.br&#34;
            }
        }
    },
    &#34;default_locale&#34;: &#34;en&#34;
}&lt;/pre&gt;

&lt;p&gt;Analisando o código acima, perceba que possuem locais para definir a versão do aplicativo, nome e descrição. Logo após, repare que o launch_path aponta para /index.html, que é o primeiro arquivo a ser carregado quando o aplicativo for iniciado. Pode ser também definido os ícones em diversos tamanhos. Por último temos opções para os dados do desenvolvedor que também podem ser traduzidos em outros idiomas.&lt;/p&gt;

&lt;h2 id=&#34;mão-na-massa&#34;&gt;Mão na massa&lt;/h2&gt;

&lt;p&gt;Para iniciar crie um diretório da sua aplicação e em seguida crie um arquivo index.html e utilize o arquivo citado acima manifest.webapp alterando as configurações do seu projeto.&lt;/p&gt;

&lt;p&gt;O resultado final é uma pasta com o nome do projeto e dentro os arquivos index.html e manifest.webapp.&lt;/p&gt;

&lt;p&gt;Adicione um texto qualquer no arquivo index.html, pode ser o famoso hello world.&lt;/p&gt;

&lt;pre class=&#34;lang-html linenums&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Primeira aplicação Firefox OS&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;hello world!!! Primeira aplicação Firefox OS&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Para testar a aplicação é preciso ir na extensão do Firefox OS Simulator, Bashboard e adicionar a pasta do projeto &amp;#8220;add directory&amp;#8221;, depois inicie o emulador a aplicação será instalada e aparecerá nos aplicativos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;github &amp;#8211; exemplo de aplicação do Firefox OS: &lt;a href=&#34;https://github.com/willemallan/tableless-firefox-os-example&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;github page &amp;#8211; &lt;a href=&#34;http://willemallan.github.io/tableless-firefox-os-example/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Firefox OS Quick Start &amp;#8211; &lt;a href=&#34;https://marketplace.firefox.com/developers/docs/quick_start&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Desenvolva para Firefox OS sem um smartphone &amp;#8211; &lt;a href=&#34;https://marketplace.firefox.com/developers/docs/firefox_os_simulator&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Aplicativos de exemplo &amp;#8211; &lt;a href=&#34;https://marketplace.firefox.com/developers/docs/reference_apps&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Disponibilizando um aplicativo no Mozilla Marketplace &amp;#8211; &lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Apps/Submitting_an_app&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Criando comandos de atalhos no terminal</title>
      <link>https://tableless.github.io/hugo-public/criando-comandos-de-atalhos-no-terminal/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-comandos-de-atalhos-no-terminal/</guid>
      <description>

&lt;p&gt;Esta dica pode ser utilizada em qualquer distribuição Linux ou Mac OS X.&lt;/p&gt;

&lt;p&gt;Se você está cansado de digitar comandos gigantescos no terminal, aqui vai uma dica: crie atalhos para os comandos no seu terminal para melhorar a produtividade. Uma dica simples mas é muito util.&lt;/p&gt;

&lt;p&gt;Para rodar um projeto python/django, geralmente executamos este comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;python manage.py runserver
&lt;/pre&gt;

&lt;p&gt;Com o comando de atalho criado, execute-o desta maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;h2 id=&#34;criando-os-atalhos&#34;&gt;Criando os atalhos&lt;/h2&gt;

&lt;p&gt;Para começar a criar seus atalhos, abra o arquivo &lt;strong&gt;.profile&lt;/strong&gt; ou &lt;strong&gt;.bashrc&lt;/strong&gt; que ficam na raiz da pasta do usuário. Em seguida abra-os em seu editor de preferência.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sublime ~/.bashrc&lt;/pre&gt;

&lt;p&gt;Agora adicione a função no final do arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run() {
    echo &#34;executando... python manage.py runserver
    python manage.py runserver
}
&lt;/pre&gt;

&lt;p&gt;Pronto! Agora basta atualizar o arquivo para que o terminal o reconheça e entenda os novos comandos. Faça isso assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;source ~/.bashrc&lt;/pre&gt;

&lt;p&gt;Após a execução do comando acima, a funcão criada já está disponível no terminal, digite o comando abaixo para testar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;p&gt;Podemos fazer funções mais elaboradas, imagine que você precisa rodar diversos projetos e cada um em uma porta diferente, então veja como fazer:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run() {
    if [ &#34;$1&#34; != &#39;&#39; ]; then
        python manage.py runserver &#34;0.0.0.0:$1&#34;
    else
        python manage.py runserver &#34;0.0.0.0:8000&#34;
    fi
}
&lt;/pre&gt;

&lt;p&gt;Outra dica é utilizar argumentos em suas funções. No caso da função acima, $1 é um argumento que é passado após o comando que define em qual porta irá rodar o projeto. Se não for passado nenhum valor, ele irá rodar na porta padrão que foi definida como 8000.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run 8001&lt;/pre&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run 8002&lt;/pre&gt;

&lt;p&gt;É possível passar diversos argumentos, veja um exemplo na função:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;teste(){
    echo $1 $2;
}
&lt;/pre&gt;

&lt;p&gt;Os argumentos veem em seguida ao comando sempre com espaços entre eles, como no exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;teste Willem Allan&lt;/pre&gt;

&lt;p&gt;Retorno do comando executado será:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Willem Allan&lt;/pre&gt;

&lt;p&gt;Logo abaixo seguem algumas funções que eu utilizo no meu .bashrc 😉&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;# git commit
cm() {
    git commit -m &#34;echo $1&#34; -a
}

# git add all &amp; commit
cma() {
    git add .
    git commit -m &#34;echo $1&#34; -a
}

# python - run django
run() {
    if [ &#34;$1&#34; != &#39;&#39; ]; then
        python manage.py runserver &#34;0.0.0.0:$1&#34;
    else
        python manage.py runserver &#34;0.0.0.0:8000&#34;
    fi
}

# python - migrate
migrate() {
    echo &#34;executando... python manage.py migrate&#34;
    python manage.py migrate
}

# python - auto
auto() {
    echo &#34;executando... python manage.py schemamigration $1 --auto&#34;
    python manage.py schemamigration $1 --auto
}

# python - initial
initial() {
    echo &#34;executando... python manage.py schemamigration $1 --initial&#34;
    python manage.py schemamigration $1 --initial
}
&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>