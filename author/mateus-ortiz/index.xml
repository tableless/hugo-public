<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mateus Ortiz on Tableless</title>
    <link>http://tableless.com.br/author/mateus-ortiz/index.xml</link>
    <description>Recent content in Mateus Ortiz on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/author/mateus-ortiz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use as facilidades do CSS 4 hoje</title>
      <link>http://tableless.com.br/use-as-facilidades-do-css-4-hoje/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/use-as-facilidades-do-css-4-hoje/</guid>
      <description>

&lt;p&gt;Se CSS 3 trouxe muitas animações e transições, CSS 4 por sua vez traz muitos seletores novos que facilitam e muito a resolver problemas recorrentes em projetos complexos e grandes. E a maioria ou quase todas você já pode usar hoje com ajuda de alguns transpilers de CSS. Você consegue ter variáveis sem precisar usar pre processadores como Sass ou Less. A spec de CSS nível 4 ainda está em desenvolvimento, mas com transpilers como &lt;a href=&#34;http://cssnext.io/features/&#34;&gt;CSSNext&lt;/a&gt; e &lt;a href=&#34;https://github.com/reworkcss/rework&#34;&gt;Rework&lt;/a&gt;, você já pode começar a usar essas features hoje.&lt;/p&gt;

&lt;p&gt;A maioria dos seletores da especificação do CSS 4 são pseudo-classes. Os seletores sempre estiveram presentes desde o início da CSS, mas agora eles estão no nível 4 e tem um monte de adições incríveis. Vamos ver apenas as mais interessantes e ver como podemos fazer elas funcionarem hoje com a ajuda dos transpilers.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-o-cssnext&#34;&gt;O que é o CSSNext?&lt;/h3&gt;

&lt;p&gt;CSSNext é um transpiler que permite que você use as mais recentes features do CSS. Ele transforma as novas especificações CSS em CSS compatível com os navegadores hoje. E em um futuro proxímo, os navegadores irão implementar as novas especificações CSS. E com o tempo, poderemos ir removendo algumas transformações do cssnext que não será mais necessário.&lt;/p&gt;

&lt;p&gt;Ele é muito rápido, cssnext usa &lt;a href=&#34;https://github.com/postcss/postcss&#34;&gt;PostCSS&lt;/a&gt; que tem parser CSS de forma mais rápida. É um bom concorrente para libsass, e um pouco mais rápido que o Less por exemplo.&lt;/p&gt;

&lt;h3 id=&#34;como-começar-com-o-cssnext&#34;&gt;Como começar com o cssnext?&lt;/h3&gt;

&lt;p&gt;Para começarmos a brincar com o cssnext precisamos instalar ele, e pode ser feito de duas maneiras com Git ou NPM, que é o mais fácil.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ npm install cssnext&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Você pode instalá-lo local (&amp;#8211;save ou &amp;#8211;save-dev), ou instalar globalmente (-g) que não é muito recomendado.&lt;/p&gt;

&lt;p&gt;Podemos usar cssnext via CLI, com alguma lib JavaScript, algum plugin PostCSS ou através do Gulp, Grunt, broccoli e outros.&lt;/p&gt;

&lt;p&gt;E para você compilar um arquivo com as novas features CSS 4 para CSS compatível, basta você executar o arquivo de CSS 4 e o arquivo de saida:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cssnext index.css output.css&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;vamos-as-features&#34;&gt;Vamos as features!&lt;/h3&gt;

&lt;h4 id=&#34;1-custom-properties-var&#34;&gt;1. custom properties &amp;amp; var()&lt;/h4&gt;

&lt;p&gt;A especificação de CSS 4 dá a possibilidade de poder usar variáveis sem a necessidade de pré-processadores, hoje apenas o Chrome tem suporte a essa feature. E então o cssnext nós ajuda com isso.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;:root {
  --mainBgColor: blue;
}

body {
  color: var(--mainBgColor);
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/variables.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51818&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/variables.gif&#34; alt=&#34;variables&#34; width=&#34;1145&#34; height=&#34;433&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-gray&#34;&gt;2. gray()&lt;/h4&gt;

&lt;p&gt;Permite que você use mais de 50 tons de cinza (transpilado para rgba()). No primeiro argumento, você pode usar um número entre 0 e 255 ou uma porcentagem.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.foo {
  color: gray(85%);
}

.bar {
  color: gray(10%, 50%);
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/gray.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51819&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/gray.gif&#34; alt=&#34;gray&#34; width=&#34;1145&#34; height=&#34;433&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-any-link&#34;&gt;3. any-link&lt;/h4&gt;

&lt;p&gt;any-link simplifica os seletores de target de links. Como :link, :visited, :actived, para somente :any-link.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;nav :any-link {
  background-color: yellow;
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/any-link.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51820&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/any-link.gif&#34; alt=&#34;any-link&#34; width=&#34;1145&#34; height=&#34;433&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E tem muitas outras features incríveis que vem com o CSS 4, e se você quiser saber mais recomendo você ver esse artigo do &lt;a href=&#34;http://tableless.com.br/seletores-css-nivel-4-o-que-vem-por-ai/&#34;&gt;Diego Eis&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;CSS 4 está trazendo muitas features interessantes para seletores inteligentes, por enquanto só podemos brincar e experimentar as novidades do CSS 4 com a ajuda desses transpilers. Isso também mostra o quanto a W3C está interessada em solucionar os problemas dos devs sem a necessidade de usar um pre-processor.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cssnext.io/&#34;&gt;CSSNext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reworkcss/rework&#34;&gt;Rework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://css4.rocks/&#34;&gt;CSS4 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/postcss/&#34;&gt;PostCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Melhores Práticas Web Components</title>
      <link>http://tableless.com.br/melhores-praticas-web-components/</link>
      <pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/melhores-praticas-web-components/</guid>
      <description>

&lt;p&gt;Web Components é um novo conjunto bem recente de recursos da plataforma web que permite aos desenvolvedores criarem componentes de forma declarativa e muito interessante.&lt;/p&gt;

&lt;p&gt;Irei apresentar a seguir algumas boas práticas do ecossistema de Web Components.&lt;/p&gt;

&lt;p&gt;O guia a seguir contém boas práticas que evoluirão ao longo do tempo, assim como a própria especificação. O guia é um ponto de partida.&lt;/p&gt;

&lt;h2 id=&#34;namespacing&#34;&gt;Namespacing&lt;/h2&gt;

&lt;p&gt;É como você nomeia seu Web Component, ele deve conter um traço no seu nome para diferenciar de outras tags do HTML, você também deve mantê-lo curto, semântico.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;mark-down&amp;gt;&amp;lt;/mark-down&amp;gt;&lt;/pre&gt;

&lt;h2 id=&#34;definir-valores-default-para-atributos&#34;&gt;Definir valores default para Atributos&lt;/h2&gt;

&lt;p&gt;Definindo valores default nos atributos, mesmo que o usúario não defina um valor para esse atributo ele já vai ter um valor default definido.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;polymer-element name=&#34;button-large&#34; attributes=&#34;color&#34;&amp;gt;
    &amp;lt;template&amp;gt;
    &amp;lt;template&amp;gt;
&amp;lt;/polymer-element&amp;gt;
&lt;/pre&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Polymer(&#39;button-large&#39;, {
    color: &#39;#f00&#39;
});
&lt;/pre&gt;

&lt;p&gt;Atributos devem usar camel-cased, quando houver uso de mais de uma palavra no Atributo.&lt;/p&gt;

&lt;h2 id=&#34;organizando-os-imports&#34;&gt;Organizando os Imports&lt;/h2&gt;

&lt;p&gt;Uma boa prática, é você organizar todos os seus componentes em um único arquivo, e depois chamar apenas esse arquivo na sua index. Isso traz uma ótima organização para seus web components.&lt;/p&gt;

&lt;p&gt;arquivo imports.html.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;import&#34; href=&#34;../src/my-tabs.html&#34;&amp;gt;&lt;/pre&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;import&#34; href=&#34;../src/my-buttons.html&#34;&amp;gt;&lt;/pre&gt;

&lt;p&gt;esse arquivo imports está com poucas importações mas em uma grande aplicação isso vai ser bem grande, agora importo apenas o arquivo imports.html na minha index.html.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;import&#34; href=&#34;../src/imports.html&#34;&amp;gt;&lt;/pre&gt;

&lt;h2 id=&#34;documente-seus-web-components&#34;&gt;Documente seus web components&lt;/h2&gt;

&lt;p&gt;Documentar seus custom elements é muito importante. Isso ajuda que pessoas usem seu web component; e consiga contribuir com ele; documentar atributos; criar demos do web component; mostrar se ele é feito para ser usado dentro de outro componente; mostrar o contexto; documentar métodos e propriedades do javascript e também listar seus eventos.&lt;/p&gt;

&lt;h2 id=&#34;testes&#34;&gt;Testes&lt;/h2&gt;

&lt;p&gt;Uma boa prática para seus Custom Elements é criar testes de unidade para verificar as funcionalidades do seu componente, &lt;a href=&#34;https://github.com/PolymerLabs/seed-element&#34;&gt;&lt;seed-element&gt;&lt;/seed-element&gt;&lt;/a&gt; usa uma configuração usando Mocha e Chai.&lt;/p&gt;

&lt;h2 id=&#34;frontinterior-2014&#34;&gt;FrontInterior 2014&lt;/h2&gt;

&lt;p&gt;Final de semana retrasado ocorreu em Bauru a segunda edição do Front In Interior 2014, o evento contou com a presença de palestrantes incríveis e tiver o prazer de palestrar também. Falei sobre melhores práticas web components. Segue os slides a seguir:&lt;/p&gt;

&lt;p&gt;[slideshare id=38535624&amp;amp;doc=frontinterior-140831113624-phpapp02]&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Todas essas boas práticas irão evoluir com a especificação, e isso é excelente.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando Bower e Polymer</title>
      <link>http://tableless.com.br/configurando-bower-e-polymer-2/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/configurando-bower-e-polymer-2/</guid>
      <description>

&lt;p&gt;Bower é um gerenciador de pacotes e dependências muito utilizado hoje em dia. O Polymer é um novo polyfill do Google para Web Components. Neste artigo veremos algumas configurações do Bower e criaremos nosso primeiro web component com Polymer.&lt;/p&gt;

&lt;p&gt;[youtube &lt;a href=&#34;http://www.youtube.com/watch?v=owT5n9jlzVI?rel=0&#34;&gt;http://www.youtube.com/watch?v=owT5n9jlzVI?rel=0&lt;/a&gt;]&lt;/p&gt;

&lt;h1 id=&#34;bower&#34;&gt;Bower&lt;/h1&gt;

&lt;p&gt;Criado pelo Twitter, o Bower promete melhorar o gerenciamento de suas dependências no client-side. Via terminal, você controla tudo, desde instalar uma Dependência até atualizar a Dependência.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-jquery-via-bower&#34;&gt;Instalando o jQuery via Bower&lt;/h2&gt;

&lt;p&gt;O caminho normal para usar o jQuery no projeto é entrar no site, baixar o script e salvar no diretório do projeto. Você tem que fazer isso toda vez que o jQuery (ou qualquer outro script de terceiros) é atualizado.&lt;/p&gt;

&lt;p&gt;Com o Bower não: primeiro você instala a dependência:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bower install --save jQuery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;e quando sai uma nova versão, é muito mais fácil.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bower install jQuery#version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Simples assim.&lt;/p&gt;

&lt;h1 id=&#34;polymer&#34;&gt;Polymer&lt;/h1&gt;

&lt;p&gt;Polymer é um polyfill para web components, que é uma especificação bem recente, composta por 4 novas especificações sendo elas: Custom Elements, HTML imports, Templates, Shadow Dom.&lt;/p&gt;

&lt;p&gt;Web Components promete um cenário onde constrói ou estender suas Tags e elementos. O Polymer veio para ajudar nesse processo, trazendo essas vantagens hoje, mesmo antes da especificação ser oficial.&lt;/p&gt;

&lt;p&gt;Via Bower, baixe o Polymer:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bower install --save polymer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para ter mais detalhes, veja o vídeo no início do artigo.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>