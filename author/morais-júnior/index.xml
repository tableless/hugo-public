<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Morais J√∫nior on Tableless</title>
    <link>http://tableless.com.br/author/morais-j%C3%BAnior/index.xml</link>
    <description>Recent content in Morais J√∫nior on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/author/morais-j%C3%BAnior/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Construindo um firewall no WordPress ‚Äì Parte 2</title>
      <link>http://tableless.com.br/construindo-um-firewall-no-wordpress-parte-2/</link>
      <pubDate>Mon, 26 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/construindo-um-firewall-no-wordpress-parte-2/</guid>
      <description>&lt;p&gt;Neste artigo de hoje iremos dar continuar com a s√©rie onde constru√≠mos um plugin de controle e monitoramento de acessos no WordPress, para controlarmos e impedirmos tentativas de login, ataques DDOS e outros eventos que possam vir a prejudicar nosso ambiente WordPress.&lt;/p&gt;

&lt;p&gt;Para quem ainda n√£o leu o primeiro artigo comece pela &lt;a href=&#34;http://tableless.com.br/construindo-um-firewall-no-wordpress-parte-1/&#34;&gt;parte 1&lt;/a&gt; onde criamos a base do plugin e uma notifica√ß√£o por e-mail quando tivermos uma tentativa de login fracassada, nessa segunda parte iremos implementar um contador dessas tentativas e junto dele um bloqueio quando atingirmos um limite previamente configurado, para isso utilizaremos as fun√ß√µes:¬†get_transient,¬†set_transient e¬†delete_transient&amp;#8230;&lt;/p&gt;

&lt;p&gt;Transitents no WordPress √© um recurso muito interessante para guardarmos pares de chaves/valor que possam ser consultados posteriormente, n√£o √© o objetivo desse recurso o controle que iremos implementar, o correto seria fazer estes registros diretamente nos logs do servidor, porem para fins did√°ticos (e por muita gente utilizar cPanel e n√£o ter acesso a escrita dos logs) iremos utilizar assim por hora üôÇ&lt;/p&gt;

&lt;p&gt;nosso plugin atualizado fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;¬†&amp;lt;?php
/*
Plugin Name: WP Firewall
Description: Controle de seguran√ßa do WordPress
Version: 1.0
Author: Tableless
Author URI: http://tableless.com.br
*/
if (!class_exists(&#39;WP_Firewall&#39;)) { //caso a classe j√° n√£o exista
 class WP_Firewall{ // declara o plugin WP_Firewall
 function WP_Firewall (){ //inicializa√ß√£o da classe: Declara uma a√ß√£o apara quando tiver uma falha de login
 add_action(&#39;init&#39;, array($this, &#39;init&#39;));
 add_action(&#39;admin_init&#39;, array( $this , &#39;register_fields&#39; ) );

 add_action(&#39;wp_login&#39;, array($this, &#39;log&#39;));
 add_action(&#39;wp_login_failed&#39;, array($this, &#39;log_failed&#39;));
 }
 
 public function init( ) {
 $_LIMIT = get_option( &#39;firewall_login_limit&#39;, 10); //recebe a configura√ß√£o
 $_COUNT = get_transient( &#39;log_failed_&#39;.$_SERVER[&#39;REMOTE_ADDR&#39;] ); //recebe o contador

 //faz o bloqueio
 if($_COUNT &amp;gt;= $_LIMIT):
 echo &#34;Ops!!! voce excedeu o limite de tentativas :(&#34;;
 exit;
 endif;
 }

 public function log( ) {
 //exclui o transient
 delete_transient( &#39;log_failed_&#39;.$_SERVER[&#39;REMOTE_ADDR&#39;] );
 }

 public function log_failed( $username ) {
 //recebe o n√∫mero atual de tentativas do ip
 $_COUNT = get_transient( &#39;log_failed_&#39;.$_SERVER[&#39;REMOTE_ADDR&#39;] );

 //Ops.. Login falhou üôÇ o que fazer agora? 
 set_transient(&#39;log_failed_&#39;.$_SERVER[&#39;REMOTE_ADDR&#39;], $_COUNT + 1, 12 * HOUR_IN_SECONDS );

 //avisa por e-mail da tentativa de login
 @mail(get_option(&#39;admin_email&#39;), &#39;Login falhou :&#39;.$username, json_encode($_SERVER)); 
 }

 public function register_fields() {
 //registra o campo nas configura√ß√µes gerais
 register_setting( &#39;general&#39;, &#39;firewall_login_limit&#39;, &#39;esc_attr&#39; );
 add_settings_field(
 &#39;firewall_login_limit&#39;,
 &#39;&amp;lt;label for=&#34;extra_blog_desc_id&#34;&amp;gt;Limite de tentativas no login&amp;lt;/label&amp;gt;&#39;,
 array( $this, &#39;fields_html&#39; ),
 &#39;general&#39;
 );
 } 
 public function fields_html() {
 $value = get_option( &#39;firewall_login_limit&#39;, 10);
 //imprime o campo nas configura√ß√µes gerais
 echo &#39;&amp;lt;input type=&#34;number&#34; id=&#34;firewall_login_limit&#34; name=&#34;firewall_login_limit&#34; value=&#34;&#39; . esc_attr( $value ) . &#39;&#34; /&amp;gt;&#39;;
 } 
 }
 
 $WP_Firewall = new WP_Firewall();
}&lt;/pre&gt;

&lt;p&gt;Contador, bloqueio e notifica√ß√£o implementados, na parte 3¬†¬†iremos fazer uso do &lt;a href=&#34;https://www.google.com/recaptcha/intro/index.html&#34;&gt;Google¬†reCAPTCHA&lt;/a&gt;¬†para melhorar nosso firewall&amp;#8230;&lt;/p&gt;

&lt;p&gt;at√© a pr√≥xima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Construindo um firewall no WordPress ‚Äì Parte 1</title>
      <link>http://tableless.com.br/construindo-um-firewall-no-wordpress-parte-1/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/construindo-um-firewall-no-wordpress-parte-1/</guid>
      <description>&lt;p&gt;Quem desenvolve para WEB e nunca passou por um ataque DDoS provavelmente n√£o est√° fazendo o monitoramento de forma correta, principalmente em plataformas que utilizam WordPress, por ser OpenSorce existe uma infinidade de robores navegando pela internet em busca de brechas para obter acesso administrativo.&lt;/p&gt;

&lt;p&gt;Nessa serie de artigos iremos desenvolver um plugin que possa monitorar, identificar e barrar esses acessos e tentativas de invas√£o, por hoje iremos apenas criar o plugin e implementar uma a√ß√£o que nos indique por e-mail quando over uma falha de login. &lt;em&gt;(mas voc√™ ja pode ir pesquisando sobre &lt;strong&gt;iptables&lt;/strong&gt; e &lt;strong&gt;fail2ban&lt;/strong&gt; que ser√£o os recursos que utilizaremos nos pr√≥ximos artigos para automatizar o bloqueio deses acessos üôÇ&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Para come√ßar voc√™ precisa criar o arquivo &lt;strong&gt;WP_Firewall.php&lt;/strong&gt; na pasta &lt;strong&gt;plugins&lt;/strong&gt; e nesse arquivo escrever o seguinte c√≥digo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;?php
/*
Plugin Name: WP Firewall
Description: Controle de seguran√ßa do WordPress
Version: 1.0
Author: Tableless
Author URI: http://tableless.com.br
*/
if (!class_exists(&#39;WP_Firewall&#39;)) { //caso a classe j√° n√£o exista
 class WP_Firewall{ // declara o plugin WP_Firewall
   function WP_Firewall (){ //inicializa√ß√£o da classe: Declara uma a√ß√£o apara quando tiver uma falha de login
     add_action(&#39;wp_login_failed&#39;, array($this, &#39;log_failed&#39;));
   }

   public function log_failed( $username ) {
     //Ops.. Login falhou üôÇ o que fazer agora?

     //avisa por e-mail da tentativa de login
     mail(get_option(&#39;admin_email&#39;), &#39;Login falhou :&#39;.$username, json_encode($_SERVER)); 
   }
 }

 $WP_Firewall = new WP_Firewall();
}&lt;/pre&gt;

&lt;p&gt;Pronto agora √© s√≥ salvar e ativar o plugin. üôÇ&lt;/p&gt;

&lt;p&gt;Nos pr√≥ximos artigos iremos desenvolver este plugin implementando bloqueios, fazendo registro nos logs do servidor e integrando com o firewall nativo do linux. At√© a pr√≥xima&amp;#8230;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>