<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eduardo Abreu on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/eduardo-abreu/index.xml</link>
    <description>Recent content in Eduardo Abreu on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/eduardo-abreu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Novidade PHP 7 – Operador Null Coalesce</title>
      <link>https://tableless.github.io/hugo-public/novidade-php-7-operador-null-coalesce/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/novidade-php-7-operador-null-coalesce/</guid>
      <description>&lt;p&gt;Estou começando a estudar as &lt;em&gt;features&lt;/em&gt; do PHP 7 e paralelamente irei escrever sobre elas. A primeira &lt;em&gt;feature&lt;/em&gt; que vou falar é sobre o operador &lt;strong&gt;Null Coalescing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Este operador já existia em outras linguagens, como C# e Pearl. Eu achei muito interessante como ele melhora a legibilidade do código na checagem de variáveis.&lt;/p&gt;

&lt;p&gt;A lógica do operador é a seguinte: retornar o primeiro valor que exista e não seja nulo dentre os valores passados. Em alguns casos, para pegar o valor de GET, por exemplo, utilizamos a seguinte sintaxe:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$valor = (isset($_GET[&#39;id&#39;]))? $_GET[&#39;id&#39;] : 1;
&lt;/pre&gt;

&lt;p&gt;O trecho acima verifica se o índice ‘id’ está setado em GET, e caso esteja, ele seta na variável $valor, caso contrário, é informado o valor 1.&lt;/p&gt;

&lt;p&gt;Já com o operador &lt;em&gt;null coalesce&lt;/em&gt;, este trecho fica muito mais claro e fácil de entender.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$valor = $_GET[&#39;id&#39;] ?? 1;
&lt;/pre&gt;

&lt;p&gt;O operador &lt;strong&gt;??&lt;/strong&gt; (&lt;em&gt;null coalesce&lt;/em&gt;) ficará responsável por retornar o primeiro valor que existe e não nulo. Então, se caso não seja passado um ‘id’ via GET, o valor 1 será setado em $valor.&lt;/p&gt;

&lt;p&gt;Agora, vamos imaginar que temos o seguinte cenário: precisamos setar um valor na variável $valor, só que este valor pode vir de diversos lugares e há uma ordem a ser seguida de verificação. Como você faria?&lt;/p&gt;

&lt;p&gt;Com o &lt;em&gt;null coalesce&lt;/em&gt; isso torna-se muito simples:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$valor = $_GET[&#39;id&#39;]  ?? $_POST[&#39;id&#39;] ?? 1;
&lt;/pre&gt;

&lt;p&gt;Primeiro, o operador verifica GET, caso não exista ou seja nulo, ele irá verificar POST. Caso também não exista ou seja nulo, ele irá retornar 1.&lt;/p&gt;

&lt;p&gt;É isso galera. Qualquer dúvida, sugestão ou crítica é só comentar. Regards!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Instalando Laravel 5.2</title>
      <link>https://tableless.github.io/hugo-public/instalando-laravel-5-2/</link>
      <pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/instalando-laravel-5-2/</guid>
      <description>

&lt;p&gt;Neste artigo irei demonstrar como instalar e começar a utilizar o &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://laravel.com/&#34; rel=&#34;nofollow&#34;&gt;Laravel&lt;/a&gt; 5.2, framework que vem ganhando visibilidade no mercado.&lt;/p&gt;

&lt;p id=&#34;42c9&#34; class=&#34;graf--p graf-after--p&#34;&gt;
  O que iremos utilizar:
&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li id=&#34;1067&#34; class=&#34;graf--li graf-after--p&#34;&gt;
    &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;http://getcomposer.org/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Composer&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&#34;a825&#34; class=&#34;graf--p graf-after--li&#34;&gt;
  Requisitos do servidor:
&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li id=&#34;e023&#34; class=&#34;graf--li graf-after--p&#34;&gt;
    PHP versão maior ou igual a 5.5.9;
  &lt;/li&gt;
  &lt;li id=&#34;9d69&#34; class=&#34;graf--li graf-after--li&#34;&gt;
    OpenSSL PHP Extension;
  &lt;/li&gt;
  &lt;li id=&#34;9f4e&#34; class=&#34;graf--li graf-after--li&#34;&gt;
    PDO PHP Extension;
  &lt;/li&gt;
  &lt;li id=&#34;f2d1&#34; class=&#34;graf--li graf-after--li&#34;&gt;
    Mbstring PHP Extension;
  &lt;/li&gt;
  &lt;li id=&#34;ee0f&#34; class=&#34;graf--li graf-after--li&#34;&gt;
    Tokenizer PHP Extension;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;00b3.graf--h4.graf-after--li&#34;&gt;Instalando o Composer&lt;/h4&gt;

&lt;p id=&#34;d940&#34; class=&#34;graf--p graf-after--h4&#34;&gt;
  Na pasta onde localiza-se a aplicação, abra o terminal e digite:
&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;#Caso tenha o Curl instalado
curl -s https://getcomposer.org/installer | php
## ou ##
#Caso não possua o Curl instalado
php -r &#34;readfile(&#39;https://getcomposer.org/installer&#39;);&#34; | php&lt;/pre&gt;

&lt;h4 id=&#34;87d9.graf--h4.graf-after--p&#34;&gt;Baixando o Laravel Installer&lt;/h4&gt;

&lt;p id=&#34;25d6&#34; class=&#34;graf--p graf-after--h4&#34;&gt;
  Para baixar o instalador do Laravel, execute o seguinte comando:
&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;composer global require &#34;laravel/installer&#34;
&lt;/pre&gt;

&lt;p&gt;Agora é necessário adicioná-lo ao PATH do sistema, para que ele possa ser executado de qualquer lugar.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;export PATH=&#34;$PATH:$HOME/.composer/vendor/bin&#34;
&lt;/pre&gt;

&lt;p&gt;Uma vez feito esta sequência, o comando “laravel” já está disponível para ser usado. Para criar um novo projeto, execute o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;laravel new AppName
&lt;/pre&gt;

&lt;p&gt;Este comando irá criar toda a estrutura necessária para sua aplicação.&lt;/p&gt;

&lt;h4 id=&#34;e83c.graf--h4.graf-after--p&#34;&gt;Configurando&lt;/h4&gt;

&lt;p id=&#34;f600&#34; class=&#34;graf--p graf-after--h4&#34;&gt;
  Todas as configurações do Laravel estão armazenadas no diretório “config” e estão bem documentadas.
&lt;/p&gt;

&lt;h4 id=&#34;2c0c.graf--h4.graf-after--p&#34;&gt;Permissões de Pasta&lt;/h4&gt;

&lt;p id=&#34;3fdf&#34; class=&#34;graf--p graf-after--h4&#34;&gt;
  As pastas “storage” e “bootstrap/cache” precisam ter permissão de escrita pelo servidor, ou o Laravel não funcionará corretamente.
&lt;/p&gt;

&lt;h4 id=&#34;629e.graf--h4.graf-after--p&#34;&gt;Configuração Local&lt;/h4&gt;

&lt;p id=&#34;c0d5&#34; class=&#34;graf--p graf-after--h4&#34;&gt;
  Em desenvolvimento de softwares é normal termos uma equipe para todo o processo de criação do software, e cada membro da equipe possui suas preferências quanto a nome de banco de dados, senhas etc. Para tratar isto, o Laravel utiliza arquivos “.env” (&lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://github.com/vlucas/phpdotenv&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;leia mais sobre este projeto&lt;/a&gt;). O arquivo .env deve ser ignorado em seu controle de versão. Para criar seu arquivo .env utilize o exemplo do próprio Laravel e altere as configurações de acordo com seu ambiente.
&lt;/p&gt;

&lt;h4 id=&#34;5e69.graf--h4.graf-after--p&#34;&gt;Application Key&lt;/h4&gt;

&lt;p id=&#34;a431&#34; class=&#34;graf--p graf-after--h4&#34;&gt;
  O próximo passo é setar a &lt;em&gt;application key&lt;/em&gt;, chave de segurança que será utilizada para encriptar dados em sua aplicação. Utilize o comando no Artisan para gerar sua &lt;em&gt;application key&lt;/em&gt;.
&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php artisan key:generate&lt;/pre&gt;

&lt;h4 id=&#34;61a4.graf--h4.graf-after--figure&#34;&gt;Testando sua instalação&lt;/h4&gt;

&lt;p id=&#34;e0c1&#34; class=&#34;graf--p graf-after--h4&#34;&gt;
  Para verificar se a instalação está funcionando, utilize o Artisan para subir um servidor &lt;em&gt;built-in&lt;/em&gt;. No terminal exibirá um endereço como: http://localhost:8000. Digite o comando &amp;#8220;serve&amp;#8221; (sem r mesmo):
&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php artisan serve
&lt;/pre&gt;

&lt;p&gt;E é isto pessoal, mais nenhuma configuração adicional é necessária para começar a brincar com o Laravel. Agora é com você, pois há muito o que explorar neste fascinante framework. &lt;em&gt;Regards&lt;/em&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formulário sem Model no CakePHP 3.x</title>
      <link>https://tableless.github.io/hugo-public/formulario-sem-model-no-cakephp-3-x/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/formulario-sem-model-no-cakephp-3-x/</guid>
      <description>

&lt;p&gt;Requisitos do artigos:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Ter o CakePHP 3 instalado ( &lt;a href=&#34;https://medium.com/@eabreusantos/instalando-o-cakephp-3-0-2f2a155cb8b1&#34; target=&#34;_blank&#34;&gt;Artigo de como instalar o Cakephp 3.x&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;O que aprenderemos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Como trabalhar com formulários que não necessitam de um Model.&lt;/li&gt;
&lt;li&gt;Criar uma página de contato.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;formulários&#34;&gt;Formulários&lt;/h3&gt;

&lt;p&gt;Na maioria das vezes, trabalhamos com formulários relacionados a um Model para persistir dados. Outras vezes precisamos validar os dados de um formulário onde não há persistência, como é no caso de um Formulário de Contato. Para tal tarefa, o CakePHP 3.x nos disponibiliza o que chamamos de &lt;strong&gt;Modelless Forms&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para começar, precisamos criar uma pasta chamada &amp;#8216;Forms&amp;#8217; dentro do diretório &amp;#8216;app\src&amp;#8217;. Para exemplificar vamos assumir que iremos criar um formulário de contato básico com nome, email e mensagem.&lt;/p&gt;

&lt;p&gt;Na pasta Forms, crie um arquivo chamado &amp;#8216;ContactForm.php&amp;#8217; com o seguinte conteúdo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;namespace App\Form;
use Cake\Form\Form;
use Cake\Form\Schema;
use Cake\Validation\Validator;
class ContactForm extends Form
{
 /*
 * Cria schema do formulário
 * @param Schema object
 * @return Schema object
 */
 protected function _buildSchema(Schema $schema)
{
 return $schema-&amp;gt;addField(&#39;name&#39;, &#39;string&#39;)
 -&amp;gt;addField(&#39;email&#39;, [&#39;type&#39; =&amp;gt; &#39;string&#39;])
 -&amp;gt;addField(&#39;body&#39;, [&#39;type&#39; =&amp;gt; &#39;text&#39;]);
}
/*
*Add regras de validação aos campos do formulário
* @param Validator object
* @return Validator object
*/
protected function _buildValidator(Validator $validator)
{
 return $validator-&amp;gt;add(&#39;name&#39;, &#39;length&#39;, [
 &#39;rule&#39; =&amp;gt; [&#39;minLength&#39;, 10],
 &#39;message&#39; =&amp;gt; &#39;Campo nome é obrigatório&#39;
 ])-&amp;gt;add(&#39;email&#39;, &#39;format&#39;, [
 &#39;rule&#39; =&amp;gt; &#39;email&#39;,
 &#39;message&#39; =&amp;gt; &#39;Endereço de e-mail inválido&#39;,
 ]);
}
/*
* Envia e-mail com os dados do contato
* @param array $data dados da requisição
* @return bool true caso tenha enviado o e-mail com sucesso
*/
protected function _execute(array $data)e
{
// Send an email.
return true;
}
}&lt;/pre&gt;

&lt;p&gt;Linha 1:4 — Declaramos o namespace e importamos classes que iremos utilizar.&lt;/p&gt;

&lt;p&gt;Linha 5 — Declaração da classe, obrigatório o sufixo Form tanto na declaração da classe como no nome do arquivo, Modelless Forms devem obrigatoriamente estender da classe Form.&lt;/p&gt;

&lt;p&gt;Linha 12:17 — Método &amp;#8216;&lt;strong&gt;_buildSchema&lt;/strong&gt;&amp;#8216;, recebe como parâmetro um objeto do tipo Schema. É usado para definir o esquema de dados que será utilizado pelo FormHelper para criar o formulário html. É possível definir o tipo do campo, tamanho do campo e precisão. Este método deve retornar o próprio objeto Schema.&lt;/p&gt;

&lt;p&gt;Linha 23:32 — Método &lt;strong&gt;&amp;#8216;_buildValidator&lt;/strong&gt;&amp;#8216;, recebe como parâmetro um objeto do tipo Validator. É usado para definir o esquema de validação do formulário quando processado. É possível definir várias regras de validação para mesmo campo. Este método deve retornar o próprio objeto Validator. Veja mais regras e opções em: &lt;a href=&#34;http://book.cakephp.org/3.0/en/core-libraries/validation.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://book.cakephp.org/3.0/en/core-libraries/validation.html&#34;&gt;http://book.cakephp.org/3.0/en/core-libraries/validation.html&lt;/a&gt;&lt;/a&gt;. Em breve irei publicar um artigo sobre Validação de dados.&lt;/p&gt;

&lt;p&gt;Linha 38:~ — Método &amp;#8216;&lt;strong&gt;_execute&lt;/strong&gt;&amp;#8216;, recebe como parâmetro um array contendo os dados da requisição ou no caso os dados do formulário que o usuário preencheu. O retorno deste método é de acordo com a implementação.&lt;/p&gt;

&lt;h3 id=&#34;processando-o-formulário&#34;&gt;Processando o Formulário&lt;/h3&gt;

&lt;p&gt;Uma vez definida a classe do formulário, temos agora de processa-lo, para isto podemos utilizar um Controller. Na pasta &amp;#8216;app\src\Controller&amp;#8217; crie um arquivo chamado &amp;#8216;ContactController.php&amp;#8217; com o seguinte conteúdo.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;namespace App\Controller;
use App\Controller\AppController;
use App\Form\ContactForm;
class ContactController extends AppController
{
  /*
  * Exibe e processa o formulário de contato caso seja uma requisição post
  * @return void\Response
  */
public function index()
{
 $contact = new ContactForm();
 if ($this-&amp;gt;request-&amp;gt;is(&#39;post&#39;)) {
 if ($contact-&amp;gt;execute($this-&amp;gt;request-&amp;gt;data)) {
 $this-&amp;gt;Flash-&amp;gt;success(&#39;Mensagem enviado, aguarde nosso retorno.&#39;);
} else {
 $this-&amp;gt;Flash-&amp;gt;error(&#39;Ocorreu um problema ao enviar sua mensagem.&#39;);
}
}
 $this-&amp;gt;set(&#39;contact&#39;, $contact);
}
}&lt;/pre&gt;

&lt;p&gt;Linha 13 — Verificamos se a requisição é do tipo &amp;#8216;POST&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Linha 14 — Caso seja, tentamos processar o formulário executando o método &amp;#8216;execute()&amp;#8217; que recebe como parâmetro os dados da requisição que estará disponível no método &amp;#8216;_execute&amp;#8217; do Form. Ao executar o método &amp;#8216;execute&amp;#8217;, automaticamente o formulário irá tentar validar os dados de acordo com sua implementação do método &amp;#8216;_buildValidator&amp;#8217;, se a validação passar, só então o método &amp;#8216;_execute&amp;#8217; é chamado.&lt;/p&gt;

&lt;p&gt;Linha 20 — Envia o objeto do formulário à view para ser utilizado no FormHelper.&lt;/p&gt;

&lt;h3 id=&#34;capturando-erros-de-validação&#34;&gt;Capturando erros de validação&lt;/h3&gt;

&lt;p&gt;Para capturar os erros de validação, utilize o método &amp;#8216;errors()&amp;#8217; do objeto do formulário, veja abaixo um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php &#34;&gt;// Na action do controller
public function index()
{
 $contact = new ContactForm();
 $erros = [];
 if ($this-&amp;gt;request-&amp;gt;is(&#39;post&#39;)) {
 if ($contact-&amp;gt;execute($this-&amp;gt;request-&amp;gt;data)) {
 $this-&amp;gt;Flash-&amp;gt;success(&#39;Mensagem enviado, aguarde nosso retorno.&#39;);
} else {
//Captura &lt;span class=&#34;hiddenGrammarError&#34;&gt;erros
 $erros&lt;/span&gt; = $contact-&amp;gt;errors();
 $this-&amp;gt;Flash-&amp;gt;error(&#39;Ocorreu um problema ao enviar sua mensagem.&#39;);
}
}
 $this-&amp;gt;set(&#39;contact&#39;, $contact);
 $this-&amp;gt;set(&#39;erros&#39;,$erros);
}&lt;/pre&gt;

&lt;p&gt;O método &amp;#8216;errors&amp;#8217; retorna um array com a listagem de campos que não estão válidos, sendo os índices os nomes dos campos e os valores as mensagens de erro.&lt;/p&gt;

&lt;h3 id=&#34;exibição-do-formulário&#34;&gt;Exibição do Formulário&lt;/h3&gt;

&lt;p&gt;Para que o formulário seja exibido para usuário, crie uma view no diretório &amp;#8216;app\src\View\Template\Contact&amp;#8217; com o nome &amp;#8216;index.ctp&amp;#8217; e o seguinte conteúdo:&lt;/p&gt;

&lt;p&gt;Por enquanto é só galera, em breve irei publicar como enviar os dados do formulário para um e-mail.&lt;/p&gt;

&lt;p&gt;Qualquer dúvida, estou a disposição para ajudar.&lt;/p&gt;

&lt;p&gt;Abraços!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Instalando o CAKEPHP 3.0 via Composer</title>
      <link>https://tableless.github.io/hugo-public/instalando-o-cakephp-3-0-via-composer/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/instalando-o-cakephp-3-0-via-composer/</guid>
      <description>

&lt;p&gt;Requisitos do tutorial:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;PHP instalado e configurado&lt;/li&gt;
&lt;li&gt;Ambiente Linux&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No dia 22/03/2015 foi disponibilizado para download no &lt;a href=&#34;http://cakephp.org&#34;&gt;site do CakePHP&lt;/a&gt; a &lt;a href=&#34;http://book.cakephp.org/3.0/en/installation.html&#34;&gt;versão 3.0 do framework para PHP CakePHP&lt;/a&gt;. Já utilizamos a versão 2.x em projetos aqui na empresa e tivemos bons resultados.&lt;/p&gt;

&lt;p&gt;Com o lançamento desta nova versão, muita coisa mudou: um novo ORM foi lançado; o uso de namespaces foi adotado; entre outras features que iremos abordar em outras publicações.&lt;/p&gt;

&lt;p&gt;Neste artigo irei realizar um passo a passo da instalação do Cakephp 3.0 &lt;a href=&#34;http://tableless.com.br/composer-para-iniciantes/&#34;&gt;utilizando o Composer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-o-composer&#34;&gt;O que é o Composer&lt;/h3&gt;

&lt;p&gt;O Composer é o gerenciador de dependências do PHP, com ele é possível definir uma lista de bibliotecas que sua aplicação necessita para funcionar, além de poder definir requisitos como, versão do PHP, extensions etc.&lt;/p&gt;

&lt;p&gt;Para aprender mais sobre o Composer, listei alguns artigos abaixo:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/composer-para-iniciantes/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://blog.thiagobelem.net/gerenciando-dependencias-com-o-composer/&#34;&gt;http://blog.thiagobelem.net/gerenciando-dependencias-com-o-composer/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/composer-para-iniciantes/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tableless.com.br/composer-para-iniciantes/&#34;&gt;http://tableless.com.br/composer-para-iniciantes/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getcomposer.org ( site oficial)&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://getcomposer.org&#34;&gt;http://getcomposer.org&lt;/a&gt; ( site oficial)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;instalando-o-composer&#34;&gt;Instalando o Composer&lt;/h3&gt;

&lt;p&gt;Na pasta onde irá ficar localizada a aplicação, abra o terminal e digite o seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;#Caso tenha o Curl instalado
curl -s https://getcomposer.org/installer | php
## ou ##
#Caso não possua o Curl instalado
php -r &#34;readfile(&#39;https://getcomposer.org/installer&#39;);&#34; | php&lt;/pre&gt;

&lt;p&gt;Documentação do comando usado: &lt;a href=&#34;http://php.net/manual/pt_BR/features.commandline.options.php%20http://curl.haxx.se/mail/lib-2004-07/0017.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://php.net/manual/pt_BR/features.commandline.options.php&#34;&gt;http://php.net/manual/pt_BR/features.commandline.options.php&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://php.net/manual/pt_BR/features.commandline.options.php%20http://curl.haxx.se/mail/lib-2004-07/0017.html&#34;&gt;http://curl.haxx.se/mail/lib-2004-07/0017.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-cakephp-3&#34;&gt;Instalando o CakePHP 3&lt;/h3&gt;

&lt;h4 id=&#34;requisitos-mínimos&#34;&gt;Requisitos Mínimos&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;HTTP Server. Exemplo: Apache, Ngix. Com mod_rewrite habilitado de preferência, mas não é obrigatório.&lt;/li&gt;
&lt;li&gt;PHP 5.4.16 ou maior&lt;/li&gt;
&lt;li&gt;extensão mbstring&lt;/li&gt;
&lt;li&gt;extensão intl (Como instalar/habilitar: &lt;a href=&#34;http://goo.gl/qz6tqT&#34;&gt;http://goo.gl/qz6tqT&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Para instalar o framework, na pasta do projeto onde também o Composer foi instalado e digite o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;#Install cakephp3
composer create-project --prefer-dist cakephp/app [nome da app]&lt;/pre&gt;

&lt;p&gt;Documentação do comando usado: &lt;a href=&#34;https://getcomposer.org/doc/03-cli.md#create-project&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://getcomposer.org/doc/03-cli.md#create-project&#34;&gt;https://getcomposer.org/doc/03-cli.md#create-project&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para testar se a aplicação foi instalada com sucesso, acesse a pasta da aplicação, no caso o mesmo nome que digitou em [nome da app] e digite o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;#Inicia built-in server
./bin/cake server&lt;/pre&gt;

&lt;p&gt;Documentação do comando usado: &lt;a href=&#34;http://book.cakephp.org/3.0/en/console-and-shells.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://book.cakephp.org/3.0/en/console-and-shells.html&#34;&gt;http://book.cakephp.org/3.0/en/console-and-shells.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após, se tudo ocorrer bem, uma mensagem será exibida no terminal informando que o servidor embutido foi iniciado e que se encontra disponível no endereço: &lt;a href=&#34;http://localhost:8765/&#34;&gt;http://localhost:8765/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por enquanto é só galera, caso tenham alguma dúvida ou problema durante a instalação, ficarei feliz em ajudar.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>