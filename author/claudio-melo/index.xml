<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Claudio Melo on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/claudio-melo/index.xml</link>
    <description>Recent content in Claudio Melo on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/claudio-melo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL Essencial (parte 1)</title>
      <link>https://tableless.github.io/hugo-public/mysql-essencial-parte-1/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/mysql-essencial-parte-1/</guid>
      <description>

&lt;h2 id=&#34;o-inicio-e-quem-usa-o-mysql&#34;&gt;O inicio e quem usa o MySQL&lt;/h2&gt;

&lt;p&gt;O MySQL é um sistema relacional de gerenciamento de banco de dados de código aberto, que utiliza o SQL (Linguagem de consulta estruturada) como interface, é atualmente um dos bancos de dados mais populares na internet, mais de 10 milhões de instalações pelo mundo inteiro. Em Julho de 2013, foi considerado o segundo banco mais utilizado do mundo.&lt;/p&gt;

&lt;p&gt;Criado na Suécia por David Axmark, Allan Larsson e Michael &amp;#8220;Monty&amp;#8221; Widenius, a primeira versão surgiu em 23 de Maio de 1995. Hoje, seu desenvolvimento emprega mais de 400 profissionais no mundo inteiro. Em 2008, a MySQL AB, desenvolvedora do MySQL, foi comprada pela Sun Microsystems (que em 2009, foi comprada pela Oracle), por 1 bilhão de dólares.&lt;/p&gt;

&lt;p&gt;Entre alguns dos usuários mais famosos do MySQL, estão: PayPal, YouTube, Google, Walmart, NASA, Bradesco, Nokia, HP, Lufthansa, etc&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;mão-na-massa&#34;&gt;Mão na massa&lt;/h2&gt;

&lt;p&gt;Neste artigo, partiremos do principio que você já tem o MySQL instalado e rodando bonitinho&amp;#8230;&lt;/p&gt;

&lt;p&gt;Para acessar o MySQL utilize o comando a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;mysql -u &amp;lt;usuário&amp;gt; -p&lt;/pre&gt;

&lt;p&gt;Depois desse comando, o MySQL vai te pedir a senha do usuário, obviamente, por segurança.&lt;/p&gt;

&lt;p&gt;Dentro do MySQL, você tem poderes para atualizar, criar e editar qualquer tabela/banco. Para acessar o help, simplesmente digite &amp;#8216;help&amp;#8217; no terminal e aparecerá o menu de ajuda do MySQL.&lt;/p&gt;

&lt;p&gt;Para ver todos os bancos criados, utilize o:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;show databases;
&lt;/pre&gt;

&lt;p&gt;Para criar um banco, depois de logado no MySQL, você pode seguir o seguir o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;CREATE DATABASE banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;E &amp;#8216;paaaah&amp;#8217;, seu banco foi criado com sucesso. Agora você precisa acessar este banco:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;USE banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Agora, para a coisa ficar mais interessante, vamos criar uma tabela, para podermos adicionar dados nela:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;CREATE TABLE tabela_do_banco_exemplo (
id INT(11) AUTO_INCREMENT PRIMARY KEY,
first_name VARCHAR(30) NOT NULL,
last_name VARCHAR(30) NOT NULL,
mail VARCHAR(100) NOT NULL,
mobile VARCHAR(100),
created_at TIMESTAMP
);
&lt;/pre&gt;

&lt;p&gt;No comando acima, criamos uma tabela dentro o seu banco. Nessa tabela teremos 6 colunas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ID &amp;#8211; um número inteiro de até 11 caracteres que se auto incrementa, ou seja, nunca se repete, se já existir o 1, ele coloca o 2 e que é a chave principal da nossa tabela.&lt;/li&gt;
&lt;li&gt;first_name &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 30 caracteres e não pode ser NULL.&lt;/li&gt;
&lt;li&gt;last_name &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 30 caracteres e não pode ser NULL.&lt;/li&gt;
&lt;li&gt;mail &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 100 caracteres e não pode ser NULL.&lt;/li&gt;
&lt;li&gt;mobile &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 100 caracteres.&lt;/li&gt;
&lt;li&gt;created_at &amp;#8211; TIMESTAMP preenche a coluna com o exato horário da inserção da linha na tabela, ou seja, o momento em que a linha foi inserida.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora vamos partir para a inserção de conteúdo dentro desta tabela, a final, uma tabela sem nenhuma linha de conteúdo não tem nenhuma função. Então vamos lá:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;INSERT INTO tabela_do_banco_exemplo (first_name, last_name, mail, mobile, created_at) VALUES (&#39;claudio&#39;, &#39;melo&#39;,&#39;claudio@claudiomelo.net&#39;,&#39;(11) 99999-9999&#39;, NOW());
&lt;/pre&gt;

&lt;p&gt;Ao infinito e além, bom, é o seguinte, na linha acima, inserimos uma linha na tabela que criamos, o INSERT INTO, se explica por si só, né? Lembrando que não colocamos o ID pois ele se &amp;#8220;AUTO INCREMENTA&amp;#8221;, como setamos ao criar a nossa tabela.&lt;/p&gt;

&lt;p&gt;Quando especificamos as colunas que devem ser inseridas, não precisamos necessariamente respeitar a ordem que fizemos quando criamos a tabela, como podem ver no exemplo, eu inverti o mobile e o mail, como dizia na matemática, a ordem dos fatores não altera o produto. Porém, lembre-se de, quando setar o conteúdo da coluna nos VALUES, você tem que seguir a mesma ordem que declarou na lista de colunas que serão atingidas.&lt;/p&gt;

&lt;p&gt;Agora que já criamos um banco, já criamos uma tabela, já inserimos conteúdo dentro desta tabela, chegou o momento de buscar algum conteúdo dentro dessa tabela:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT * FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Isso vai te retornar TODAS as colunas de uma tabela, simples né? Se tiver 50 linhas na sua tabela, o select vai te retornar todas as colunas das 50 linhas. E mais uma vez, você deve estar prestes a me xingar por que quer só as colunas que precisa, mas ai eu te digo, vamos pegar somente as colunas que queremos neste momento:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT first_name FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Mais simples que isso, faça um esforço e tente entender a linha que escrevemos, esqueça o CTRL+C e CTRL+V. Pedimos ao banco um SELECT da coluna first_name, isso vai nos retornar o first_name de todas as linhas da nossa tabela.&lt;/p&gt;

&lt;p&gt;Nesse momento, podemos ser até um pouco mais ousados, eu diria, vamos selecionar a coluna mobile somente de linhas que tem números de telefone diferentes, ou seja, dois cadastros com números iguais de telefone, não aparecerão nessa lista:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT DISTINCT mobile FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Agora você deve estar louco para buscar duas colunas junto com o DISTINCT, então vamos nessa:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT DISTINCT mobile, first_name FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Isso vai nos retornar uma lista onde não haverá linhas que repitam o número de telefone E (preste bem a atenção neste E) o primeiro nome.&lt;/p&gt;

&lt;p&gt;Bom, por enquanto é só. Criticas ou sugestões é só falar nos comentários ou entrar em contato comigo, ficarei muito agradecido! Em breve teremos a parte 2 para continuar esse papo legal sobre MySQL.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>