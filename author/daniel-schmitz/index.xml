<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Schmitz on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/daniel-schmitz/index.xml</link>
    <description>Recent content in Daniel Schmitz on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/daniel-schmitz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Conheça o Vue.js, um framework javascript para criação de componentes web reativos</title>
      <link>https://tableless.github.io/hugo-public/conheca-o-vue-js-um-framework-javascript-para-criacao-de-componentes-web-reativos/</link>
      <pubDate>Mon, 08 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/conheca-o-vue-js-um-framework-javascript-para-criacao-de-componentes-web-reativos/</guid>
      <description>

&lt;p&gt;Venho acompanhando a evolução de diversos frameworks &amp;#8220;frontend&amp;#8221; ao longo dos últimos anos, e sendo um entusiasta ao estudá-los e criar conteúdo sobre eles. Talvez o primeiro framework que tenhamos mais destaque (após a geração jQuery) foi o AngularJS, que está forte até hoje, mas já possui o seu sucessor, o Angular 2 (atualmente na versão beta). Também temos o React e o Aurelia nesse jogo, e além de todos estes, temos o framework que iremos abordar neste artigo, o Vue.js (pronuncia-se view).&lt;/p&gt;

&lt;p&gt;O Vue.js destaca-se pela sua simplicidade em executar as mesmas tarefas dos outros frameworks. Nele você possui os mesmos conceitos que um framework reativo possui, como data bind, two way, events, criação de componentes, entre outros. Mas então, porque ter mais um framework com os mesmos processos? O resultado é a simplicidade que temos ao trabalhar com Vue.js, que veremos ao longo deste artigo.&lt;/p&gt;

&lt;p&gt;Neste artigo usaremos o &lt;a href=&#34;https://jsfiddle.net/&#34;&gt;JSFiddle&lt;/a&gt; como ferramenta para compreender os processos básicos do Vue, então não será necessário, a princípio, instalar nada no seu sistema. Abra o jsfiddle em outra aba do seu navegador e acesse o menu JavaScript, conforme a imagem a seguir, escolha o framework Vue 1.0 para ser carregado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/2016-06-28-12_23_29-Create-a-new-fiddle-JSFiddle.png&#34; alt=&#34;JSFiddle+Vue&#34; width=&#34;625&#34; height=&#34;623&#34; class=&#34;aligncenter size-full wp-image-54927&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;estrutura-inicial&#34;&gt;Estrutura inicial&lt;/h2&gt;

&lt;p&gt;Pelo jsfiddle, o Vue pode ser usado usando as áreas HTML e JavaScript. Na parte JavaScript, o código básico para utilizar o Vue é instanciar a própria classe Vue, repassando inicialmente o parâmetro &lt;code&gt;el&lt;/code&gt;, que determina em qual elemento html o Vue irá observar.&lt;/p&gt;

&lt;p&gt;Basicamente, temos:&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre class=&#34;lang-htm&#34;&gt;&amp;lt;div id=&#34;app&#34;&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e o Javascript:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;new Vue({
  el: &#39;#app&#39;
})
&lt;/pre&gt;

&lt;h2 id=&#34;data-bind&#34;&gt;Data Bind&lt;/h2&gt;

&lt;p&gt;O databind permite ligar um elemento do HTML à uma variável do JS. Neste ponto, para atualizar a variável na página não é necessário percorrer a DOM do elemento HTML e alterar o seu valor. Basta alterar o valor da variável JavaScript, que o Vue irá cuidar da atualização no elemento HTML. Chamamos este comportamento de design reativo, ou seja, o design da página reflete a configuração das variáveis.&lt;/p&gt;

&lt;p&gt;Vamos então criar um pequeno Hello World, veja:&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;app&#34;&amp;gt;
 {{msg}}
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e JavaScript:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;new Vue({
  el: &#39;#app&#39;,
  data: {
    msg: &#39;Hello World!&#39;
  }
})
&lt;/pre&gt;

&lt;p&gt;A configuração no fiddle fica semelhante a figura a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/2016-06-28-14_43_35-Create-a-new-fiddle-JSFiddle.png&#34; alt=&#34;2016-06-28 14_43_35-Create a new fiddle - JSFiddle&#34; width=&#34;665&#34; height=&#34;360&#34; class=&#34;aligncenter size-full wp-image-54937&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clique no botão &lt;strong&gt;Run&lt;/strong&gt; para executar o código. A resposta é exibida na caixa da direta. Neste caso, a mensagem Hello World será exibida.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Two-Way databing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O termo Two Way significa que uma variável pode estar ligada a um elemento e este elemento pode alterar a variável, como uma via dupla. No próximo exemplo, vamos criar uma caixa de texto onde você poderá digitar o seu nome, veja:&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre class=&#34;html&#34; title=&#34;html&#34;&gt;&amp;lt;div id=&#34;app&#34;&amp;gt;
 {{msg}}, {{nome}}
  &amp;lt;br/&amp;gt;
  &amp;lt;input type=&#34;text&#34; v-model=&#34;nome&#34;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e&lt;/p&gt;

&lt;p&gt;Javascript&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;new Vue({
  el: &#39;#app&#39;,
  data: {
    msg: &#39;Hello World&#39;,
    nome: &#39;Fulano&#39;
  }
})
&lt;/pre&gt;

&lt;p&gt;O que temos agora é uma nova variável chamada &amp;#8220;nome&amp;#8221;, que esta ligada ao {{nome}} e também ao v-model do input. Quando alteramoso valor do input, a variável nome é alterada também, e a o nome aparece após o Hello World, conforme a figura a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/2016-06-28-15_12_15-Create-a-new-fiddle-JSFiddle.png&#34; alt=&#34;2016-06-28 15_12_15-Create a new fiddle - JSFiddle&#34; width=&#34;591&#34; height=&#34;330&#34; class=&#34;aligncenter size-full wp-image-54939&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criando uma lista&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;É possível iterar entre elementos de um Array no javascript e criar uma lista de elementos em html, conforme o exemplo a seguir:&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre class=&#34;html&#34; title=&#34;html&#34;&gt;&amp;lt;div id=&#34;app&#34;&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li v-for=&#34;fruit in fruits&#34;&amp;gt;
      {{ fruit.name }}
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e&lt;/p&gt;

&lt;p&gt;Javascript&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;new Vue({
  el: &#39;#app&#39;,
  data: {
    fruits: [
      { name: &#39;banana&#39; },
      { name: &#39;apple&#39; },
      { name: &#39;orange&#39; }
    ]
  }
})
&lt;/pre&gt;

&lt;p&gt;Neste exemplo, a variável &lt;code&gt;fruits&lt;/code&gt; é um array de objetos, que contém a propriedade &lt;code&gt;name&lt;/code&gt;. No Html, usamos o elemento &lt;code&gt;v-for&lt;/code&gt; para realizar um loop no &lt;code&gt;&amp;amp;lt;li&amp;amp;gt;&lt;/code&gt; repetindo este item para cada elemento do array. A resposta do código é exibida a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/2016-06-28-15_20_33-Create-a-new-fiddle-JSFiddle.png&#34; alt=&#34;2016-06-28 15_20_33-Create a new fiddle - JSFiddle&#34; width=&#34;441&#34; height=&#34;365&#34; class=&#34;aligncenter size-full wp-image-54942&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Para saber mais&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Demos um ponta pé inicial exibindo algumas funcionalidades deste framework, mas é claro ainda existe muitos outros pontos , e iremos a seguir exibir algumas urls para que você possa dar prosseguimento ao seus estudos. Fique a vontade também em perguntar.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[Venho acompanhando a evolução de diversos frameworks &amp;#8220;frontend&amp;#8221; ao longo dos últimos anos, e sendo um entusiasta ao estudá-los e criar conteúdo sobre eles. Talvez o primeiro framework que tenhamos mais destaque (após a geração jQuery) foi o AngularJS, que está forte até hoje, mas já possui o seu sucessor, o Angular 2 (atualmente na versão beta). Também temos o React e o Aurelia nesse jogo, e além de todos estes, temos o framework que iremos abordar neste artigo, o Vue.js (pronuncia-se view).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O Vue.js destaca-se pela sua simplicidade em executar as mesmas tarefas dos outros frameworks. Nele você possui os mesmos conceitos que um framework reativo possui, como data bind, two way, events, criação de componentes, entre outros. Mas então, porque ter mais um framework com os mesmos processos? O resultado é a simplicidade que temos ao trabalhar com Vue.js, que veremos ao longo deste artigo.&lt;/p&gt;

&lt;p&gt;Neste artigo usaremos o &lt;a href=&#34;https://jsfiddle.net/&#34;&gt;JSFiddle&lt;/a&gt; como ferramenta para compreender os processos básicos do Vue, então não será necessário, a princípio, instalar nada no seu sistema. Abra o jsfiddle em outra aba do seu navegador e acesse o menu JavaScript, conforme a imagem a seguir, escolha o framework Vue 1.0 para ser carregado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/2016-06-28-12_23_29-Create-a-new-fiddle-JSFiddle.png&#34; alt=&#34;JSFiddle+Vue&#34; width=&#34;625&#34; height=&#34;623&#34; class=&#34;aligncenter size-full wp-image-54927&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;estrutura-inicial-1&#34;&gt;Estrutura inicial&lt;/h2&gt;

&lt;p&gt;Pelo jsfiddle, o Vue pode ser usado usando as áreas HTML e JavaScript. Na parte JavaScript, o código básico para utilizar o Vue é instanciar a própria classe Vue, repassando inicialmente o parâmetro &lt;code&gt;el&lt;/code&gt;, que determina em qual elemento html o Vue irá observar.&lt;/p&gt;

&lt;p&gt;Basicamente, temos:&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre class=&#34;lang-htm&#34;&gt;&amp;lt;div id=&#34;app&#34;&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e o Javascript:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;new Vue({
  el: &#39;#app&#39;
})
&lt;/pre&gt;

&lt;h2 id=&#34;data-bind-1&#34;&gt;Data Bind&lt;/h2&gt;

&lt;p&gt;O databind permite ligar um elemento do HTML à uma variável do JS. Neste ponto, para atualizar a variável na página não é necessário percorrer a DOM do elemento HTML e alterar o seu valor. Basta alterar o valor da variável JavaScript, que o Vue irá cuidar da atualização no elemento HTML. Chamamos este comportamento de design reativo, ou seja, o design da página reflete a configuração das variáveis.&lt;/p&gt;

&lt;p&gt;Vamos então criar um pequeno Hello World, veja:&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;app&#34;&amp;gt;
 {{msg}}
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e JavaScript:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;new Vue({
  el: &#39;#app&#39;,
  data: {
    msg: &#39;Hello World!&#39;
  }
})
&lt;/pre&gt;

&lt;p&gt;A configuração no fiddle fica semelhante a figura a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/2016-06-28-14_43_35-Create-a-new-fiddle-JSFiddle.png&#34; alt=&#34;2016-06-28 14_43_35-Create a new fiddle - JSFiddle&#34; width=&#34;665&#34; height=&#34;360&#34; class=&#34;aligncenter size-full wp-image-54937&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clique no botão &lt;strong&gt;Run&lt;/strong&gt; para executar o código. A resposta é exibida na caixa da direta. Neste caso, a mensagem Hello World será exibida.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Two-Way databing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O termo Two Way significa que uma variável pode estar ligada a um elemento e este elemento pode alterar a variável, como uma via dupla. No próximo exemplo, vamos criar uma caixa de texto onde você poderá digitar o seu nome, veja:&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre class=&#34;html&#34; title=&#34;html&#34;&gt;&amp;lt;div id=&#34;app&#34;&amp;gt;
 {{msg}}, {{nome}}
  &amp;lt;br/&amp;gt;
  &amp;lt;input type=&#34;text&#34; v-model=&#34;nome&#34;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e&lt;/p&gt;

&lt;p&gt;Javascript&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;new Vue({
  el: &#39;#app&#39;,
  data: {
    msg: &#39;Hello World&#39;,
    nome: &#39;Fulano&#39;
  }
})
&lt;/pre&gt;

&lt;p&gt;O que temos agora é uma nova variável chamada &amp;#8220;nome&amp;#8221;, que esta ligada ao {{nome}} e também ao v-model do input. Quando alteramoso valor do input, a variável nome é alterada também, e a o nome aparece após o Hello World, conforme a figura a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/2016-06-28-15_12_15-Create-a-new-fiddle-JSFiddle.png&#34; alt=&#34;2016-06-28 15_12_15-Create a new fiddle - JSFiddle&#34; width=&#34;591&#34; height=&#34;330&#34; class=&#34;aligncenter size-full wp-image-54939&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criando uma lista&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;É possível iterar entre elementos de um Array no javascript e criar uma lista de elementos em html, conforme o exemplo a seguir:&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;pre class=&#34;html&#34; title=&#34;html&#34;&gt;&amp;lt;div id=&#34;app&#34;&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li v-for=&#34;fruit in fruits&#34;&amp;gt;
      {{ fruit.name }}
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e&lt;/p&gt;

&lt;p&gt;Javascript&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;new Vue({
  el: &#39;#app&#39;,
  data: {
    fruits: [
      { name: &#39;banana&#39; },
      { name: &#39;apple&#39; },
      { name: &#39;orange&#39; }
    ]
  }
})
&lt;/pre&gt;

&lt;p&gt;Neste exemplo, a variável &lt;code&gt;fruits&lt;/code&gt; é um array de objetos, que contém a propriedade &lt;code&gt;name&lt;/code&gt;. No Html, usamos o elemento &lt;code&gt;v-for&lt;/code&gt; para realizar um loop no &lt;code&gt;&amp;amp;lt;li&amp;amp;gt;&lt;/code&gt; repetindo este item para cada elemento do array. A resposta do código é exibida a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/2016-06-28-15_20_33-Create-a-new-fiddle-JSFiddle.png&#34; alt=&#34;2016-06-28 15_20_33-Create a new fiddle - JSFiddle&#34; width=&#34;441&#34; height=&#34;365&#34; class=&#34;aligncenter size-full wp-image-54942&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Para saber mais&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Demos um ponta pé inicial exibindo algumas funcionalidades deste framework, mas é claro ainda existe muitos outros pontos , e iremos a seguir exibir algumas urls para que você possa dar prosseguimento ao seus estudos. Fique a vontade também em perguntar.&lt;/p&gt;

&lt;p&gt;*]&lt;a href=&#34;http://vuejs.org/guide/installation.html&#34;&gt;2&lt;/a&gt;
  * &lt;a href=&#34;http://vuejs-br.github.io/vuejs.org/guide/&#34;&gt;Guia traduzido para o português&lt;/a&gt;
  *  1º hangout sobre Vue e Vuex &lt;/li&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  * [www.vuejs-brasil.com.br][4] &amp;amp;#8211; Blog sobre Vue com conteúdo em português
  * [vuejs-brasil.slack.com][5] &amp;amp;#8211; Comunidade Vue Brasil no Slack
  * [telegram.me/vuejsbrasil][6] &amp;amp;#8211; Comunidade Vue Brasil no Telegram
  * [telegram.me/danielschmitz][7]&amp;amp;#8211; Converse diretamente comigo pelo Telegram&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Gerenciando módulos no TypeScript</title>
      <link>https://tableless.github.io/hugo-public/gerenciando-modulos-no-typescript/</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/gerenciando-modulos-no-typescript/</guid>
      <description>

&lt;p&gt;Como vimos no &lt;a href=&#34;http://tableless.com.br/diga-ola-ao-typescript-e-adeus-ao-javascript/&#34;&gt;artigo anterior&lt;/a&gt;, com TypeScript podemos programar de forma orientada a objetos, criando classes, interfaces, get/set etc, e compilar tudo isso para JavaScript. Neste artigo veremos como criar módulos e separar classes e funcionalidades em arquivos distintos, de forma a tornar o nosso projeto mais organizado.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Para instalar o TypeScript, você precisa ter o Node.js, juntamente com o NPM. Execute o comando &lt;code&gt;npm install typescript -g&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Existem diversas formas de trabalhar com módulos no typeScript, sendo as 3 mais comuns descritas a seguir:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Combinando tudo em um arquivo somente&lt;/strong&gt;: Esta é a forma mais fácil de utilizar TypeScript. Primeiro criamos vários arquivos separados, com a extensão &lt;code&gt;ts&lt;/code&gt; e depois executamos o comando &lt;code&gt;tsc&lt;/code&gt; para juntar tudo em um único arquivo. Veja que todos os arquivos TypeScript serão agrupados, o que pode não ser uma boa prática de programação, principalmente para projetos muito extensos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inclusão dinâmica pelo webserver&lt;/strong&gt;: Neste método todos os arquivos &lt;code&gt;ts&lt;/code&gt; terão o seu correspondente &lt;code&gt;js&lt;/code&gt;, na qual serão carregados de forma dinâmica, via ajax. Como estamos utilizando um carregamento dinâmico, precisamos utilizar a biblioteca RequireJS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inclusão dinâmica pelo node&lt;/strong&gt;: Nesta forma criamos uma estrutura para ser executada diretamente pelo Node.JS, utilizando o padrão commonjs. Não usaremos este conceito aqui porque queremos ilustrar como utilizar o TypeScript em um site.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;combinando-todos-os-arquivos-em-um-só&#34;&gt;Combinando todos os arquivos em um só&lt;/h2&gt;

&lt;p&gt;Esta forma é a mais simples e pode ser usada na maioria dos seus projetos web. Vamos inicialmente criar a pasta &lt;code&gt;teste1&lt;/code&gt; e nela criaremos duas pastas: &lt;code&gt;src&lt;/code&gt; e &lt;code&gt;build&lt;/code&gt;. A pasta src contém o código fonte da aplicação, os arquivos TypeScript. A pasta build conterá o código JavaScript gerado pelo TypeScript. Na pasta &lt;code&gt;src&lt;/code&gt;, criaremos 3 arquivos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pessoa.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;class Pessoa{
    nome : string;
    constructor(nome:string){
        this.nome = nome;
    }
}
&lt;/pre&gt;

&lt;p&gt;Este primeiro arquivo é uma classe simples, com um parâmetro e o método construtor. A próxima classe será chamada de &lt;code&gt;Aluno&lt;/code&gt;, que irá estender da classe &lt;code&gt;Pessoa&lt;/code&gt;. Como a classe Aluno usa a classe Pessoa (que está em outro arquivo), precisamos importá-la e isso é feito da seguinte forma: &lt;code&gt;/// &amp;lt;reference path=&amp;quot;&amp;quot; /&amp;gt;&lt;/code&gt;. O parâmetro &lt;code&gt;path&lt;/code&gt; é justamente a classe que se deseja referenciar. Então temos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aluno.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;pessoa.ts&#34; /&amp;gt;

class Aluno extends Pessoa{
    matricula : string;
    
    constructor(nome:string,matricula:string){
        super(nome);
        this.matricula=matricula;
    }
}
&lt;/pre&gt;

&lt;p&gt;Nesta classe referenciamos na primeira linha a classe &lt;code&gt;Pessoa&lt;/code&gt;, informando o nome do arquivo &lt;code&gt;pessoa.ts&lt;/code&gt;. Depois criamos a classe &lt;code&gt;Aluno&lt;/code&gt;, que herda de Pessoa. Na classe &lt;code&gt;Aluno&lt;/code&gt; criamos o parâmetro &lt;code&gt;matricula&lt;/code&gt;, e no seu construtor usamos a palavra &lt;code&gt;super&lt;/code&gt; para referenciar o construtor da classe pai, que neste caso é &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Com as duas classes prontas, podemos finalmente criar o arquivo &lt;code&gt;index.ts&lt;/code&gt;, que é o arquivo principal do projeto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;aluno.ts&#34; /&amp;gt

var a = new Aluno(&#34;Joãozinho&#34;,&#34;0001&#34;);
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Veja que não é preciso adicionar a classe pessoa. Ela será adicionada na classe aluno&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Veja que o arquivo principal faz uma referência a classe &lt;code&gt;Aluno&lt;/code&gt;, do arquivo &lt;code&gt;aluno.ts&lt;/code&gt;. Com os três arquivos prontos, podemos usar o comando &lt;code&gt;tsc&lt;/code&gt; para compilar tudo em um único arquivo. Este comando é executado a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts05.png&#34; alt=&#34;ts05&#34; width=&#34;819&#34; height=&#34;580&#34; class=&#34;aligncenter size-full wp-image-52470&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nesta imagem usamos o comando &lt;code&gt;tree&lt;/code&gt; do DOS apenas para mostrar que o arquivo &lt;code&gt;script.js&lt;/code&gt; foi criado. O principal comando é o:&lt;/p&gt;

&lt;pre&gt;tsc ./src/index.ts --out ./build/script.js
&lt;/pre&gt;

&lt;p&gt;Este comando possui como primeiro parâmetro o arquivo ts inicial que neste caso é o &lt;code&gt;index.ts&lt;/code&gt;. O parâmetro &lt;code&gt;--out&lt;/code&gt; indica o nome do arquivo que será gerado pela compilação do TypeScript em JavaScript. Este arquivo é exibido a seguir:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build/script.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;var Pessoa = (function () {
    function Pessoa(nome) {
        this.nome = nome;
    }
    return Pessoa;
})();
/// &amp;lt;reference path=&#34;pessoa.ts&#34; /&amp;gt;
var __extends = (this &amp;&amp; this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Aluno = (function (_super) {
    __extends(Aluno, _super);
    function Aluno(nome, matricula) {
        _super.call(this, nome);
        this.matricula = matricula;
    }
    return Aluno;
})(Pessoa);
/// &amp;lt;reference path=&#34;aluno.ts&#34; /&amp;gt;
var a = new Aluno(&#34;Joãozinho&#34;, &#34;0001&#34;);
&lt;/pre&gt;

&lt;h2 id=&#34;utilizando-módulos&#34;&gt;Utilizando módulos&lt;/h2&gt;

&lt;p&gt;O uso de módulos na aplicação faz com que as classes não pertençam mais ao escopo global, como Pessoa e Aluno pertenciam no exemplo anterior. Vamos fazer uma refatoração no código e adicionar a criação de módulos no escopo da aplicação. Suponha que a classe Pessoa pertença ao módulo &amp;#8220;comum&amp;#8221; e que a classe Aluno pertença ao módulo &amp;#8220;ensino&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pessoa.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&amp;lt;u&gt;&lt;strong&gt;module&lt;/strong&gt;&amp;lt;/u&gt; comum {
    &lt;strong&gt;&amp;lt;u&gt;export&amp;lt;/u&gt;&lt;/strong&gt; class Pessoa{
        nome : string;
        constructor(nome:string){
            this.nome = nome;
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;Deixamos sublinhado as 2 palavras que são novidade neste código. A primeira é a palavra &lt;code&gt;module&lt;/code&gt;, seguida do nome do seu módulo que neste caso é &amp;#8220;comum&amp;#8221;. Dentro do módulo &amp;#8220;comum&amp;#8221; temos a classe Pessoa, e nela usamos a palavra &lt;code&gt;export&lt;/code&gt; que diz ao módulo que esta classe é pública ao módulo. Podemos incluir no módulo classes, variáveis, métodos etc. Para expôr estas classes a outros módulos, usamos export.&lt;/p&gt;

&lt;p&gt;A classe Aluno é refatorada para o seguinte código:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aluno.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;pessoa.ts&#34; /&amp;gt;
module ensino{
    export class Aluno extends &lt;strong&gt;&amp;lt;u&gt;comum.Pessoa&amp;lt;/u&gt;&lt;/strong&gt;{
        matricula : string;
        
        constructor(nome:string,matricula:string){
            super(nome);
            this.matricula=matricula;
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;A classe Aluno agora é do módulo &lt;code&gt;ensino&lt;/code&gt; e como novidade temos a referência da classe Pessoa como &lt;code&gt;comum.Pessoa&lt;/code&gt;. Isso é necessário já que estamos modularizando a aplicação. Finalmente, a classe &lt;code&gt;index.ts&lt;/code&gt; é refatorada para:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;aluno.ts&#34; /&amp;gt;

var a = new ensino.Aluno(&#34;Joãozinho&#34;,&#34;0001&#34;);
&lt;/pre&gt;

&lt;p&gt;Como novidade temos a chamada da classe Aluno como &lt;code&gt;ensino.Aluno&lt;/code&gt;. Com estas mudanças, podemos executar novamente a compilação:&lt;/p&gt;

&lt;pre&gt;tsc ./src/index.ts --out ./build/script.js
&lt;/pre&gt;

&lt;p&gt;e obteremos o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build/script.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;var comum;
(function (comum) {
    var Pessoa = (function () {
        function Pessoa(nome) {
            this.nome = nome;
        }
        return Pessoa;
    })();
    comum.Pessoa = Pessoa;
})(comum || (comum = {}));
var __extends = (this &amp;&amp; this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// $lt;reference path=&#34;pessoa.ts&#34; /&amp;gt;
var ensino;
(function (ensino) {
    var Aluno = (function (_super) {
        __extends(Aluno, _super);
        function Aluno(nome, matricula) {
            _super.call(this, nome);
            this.matricula = matricula;
            console.log(this.matricula);
        }
        return Aluno;
    })(comum.Pessoa);
    ensino.Aluno = Aluno;
})(ensino || (ensino = {}));
/// $lt;reference path=&#34;aluno.ts&#34; /&amp;gt;
var a = new ensino.Aluno(&#34;Joãozinho&#34;, &#34;0001&#34;);
&lt;/pre&gt;

&lt;h2 id=&#34;módulos-em-diretórios&#34;&gt;Módulos em diretórios&lt;/h2&gt;

&lt;p&gt;Geralmente a organização de módulos é feita em diretórios, para que todos os arquivos não fiquem em somente um único diretório. No caso anterior, poderíamos (na verdade deveríamos) criar os diretórios &lt;code&gt;src/comum&lt;/code&gt; e &lt;code&gt;src/ensino&lt;/code&gt; e reorganizar as classes de acordo com a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts06.png&#34; alt=&#34;ts06&#34; width=&#34;186&#34; height=&#34;256&#34; class=&#34;aligncenter size-full wp-image-52476&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A única mudança que precisamos realizar no código é no &lt;code&gt;reference&lt;/code&gt;, que deverá ser:&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;../comum/pessoa.ts&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Na classe aluno, como temos que subir um nível para encontrar o diretório &amp;#8220;comum&amp;#8221;, usamos &amp;#8220;../&amp;#8221;.&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;ensino/aluno.ts&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;No arquivo index.ts, não precisamos usar &amp;#8220;../&amp;#8221; pois estamos no mesmo nível do diretório &lt;code&gt;ensino&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;módulos-externos-com-requirejs&#34;&gt;Módulos externos com requirejs&lt;/h2&gt;

&lt;p&gt;Até este momento todos os módulos estão em um único arquivo de saída, o &lt;code&gt;build/script.js&lt;/code&gt;. Agora desejamos criar uma forma de carregar os módulos sob demanda, ou seja,&lt;/p&gt;

&lt;p&gt;ao invés de carregar tudo de uma vez, vamos carregando os arquivos javascript na medida que eles forem sendo requisitados. Para isso precisamos criar uma estrutura um pouco mais complexa, e também precisaremos utilizar um framework qualquer para carregar módulos. Neste caso usamos o &lt;code&gt;Requirejs&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;criando-a-estrutura-inicial&#34;&gt;Criando a estrutura inicial&lt;/h3&gt;

&lt;p&gt;Crie uma nova pasta e copie os arquivos Pessoa.ts, Aluno.ts e index.ts com a mesma estrutura anterior. Ao invés de criarmos o diretório &amp;#8220;build&amp;#8221;, crie o diretório &amp;#8220;public&amp;#8221;, conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts07.png&#34; alt=&#34;ts07&#34; width=&#34;181&#34; height=&#34;292&#34; class=&#34;aligncenter size-full wp-image-52478&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;redefinido-as-classes&#34;&gt;Redefinido as classes&lt;/h3&gt;

&lt;p&gt;Ao utilizarmos módulos externos precisamos alterar a forma como referenciamos as classes. Ou seja, não usaremos mais o &lt;code&gt;&amp;lt;reference path=&amp;quot;../comum/pessoa.ts&amp;quot; /&amp;gt;&lt;/code&gt; conforme aprendemos, e não será necessário neste momento definir um módulo. Vamos aos ajustes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;comum/pessoa.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;export class Pessoa{
    nome : string;
    constructor(nome:string){
        this.nome = nome;
    }
}
&lt;/pre&gt;

&lt;p&gt;O que temos agora é o fim do &lt;code&gt;module&lt;/code&gt; e o uso do &lt;code&gt;export&lt;/code&gt; antes do nome da classe. Na classe Aluno, temos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ensino/aluno.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&amp;lt;u&gt;&lt;strong&gt;import comum = require(&#34;../comum/pessoa&#34;)&lt;/strong&gt;&amp;lt;/u&gt;

export class Aluno extends comum.Pessoa{
    matricula : string;
    
    constructor(nome:string,matricula:string){
        super(nome);
        this.matricula=matricula;
    }
}
&lt;/pre&gt;

&lt;p&gt;Alem do fim da palavra &lt;code&gt;module&lt;/code&gt; e do uso do &lt;code&gt;export&lt;/code&gt;, temos uma importante alteração na primeira linha do arquivo &lt;em&gt;aluno.ts&lt;/em&gt;. Estamos utilizando a seguinte sintaxe:&lt;/p&gt;

&lt;pre&gt;import MODULO = require(&#34;caminho&#34;);
&lt;/pre&gt;

&lt;p&gt;Aqui tivemos uma inversão do uso do nome do módulo. Se antes definimos o nome do módulo como &amp;#8220;comum&amp;#8221; na classe &amp;#8220;pessoa&amp;#8221;, agora definimos na própria classe &amp;#8220;aluno&amp;#8221;. Como temos agora o &lt;code&gt;import comum&lt;/code&gt;, podemos usar &lt;code&gt;comum.Pessoa&lt;/code&gt;. O arquivo &lt;code&gt;index.js&lt;/code&gt; é refatorado para:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;import ensino = require(&#34;ensino/aluno&#34;)

var a = new ensino.Aluno(&#34;Joãozinho&#34;,&#34;0001&#34;);
&lt;/pre&gt;

&lt;h3 id=&#34;instalando-o-requirejs&#34;&gt;Instalando o requirejs&lt;/h3&gt;

&lt;p&gt;Precisamos instalar o requirejs no projeto, e podemos fazer isso com npm, através do comando &lt;code&gt;npm i requirejs --save&lt;/code&gt;. Este comando irá instalar o ``Como vimos no &lt;a href=&#34;http://tableless.com.br/diga-ola-ao-typescript-e-adeus-ao-javascript/&#34;&gt;artigo anterior&lt;/a&gt;, com TypeScript podemos programar de forma orientada a objetos, criando classes, interfaces, get/set etc, e compilar tudo isso para JavaScript. Neste artigo veremos como criar módulos e separar classes e funcionalidades em arquivos distintos, de forma a tornar o nosso projeto mais organizado.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Para instalar o TypeScript, você precisa ter o Node.js, juntamente com o NPM. Execute o comando &lt;code&gt;npm install typescript -g&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Existem diversas formas de trabalhar com módulos no typeScript, sendo as 3 mais comuns descritas a seguir:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Combinando tudo em um arquivo somente&lt;/strong&gt;: Esta é a forma mais fácil de utilizar TypeScript. Primeiro criamos vários arquivos separados, com a extensão &lt;code&gt;ts&lt;/code&gt; e depois executamos o comando &lt;code&gt;tsc&lt;/code&gt; para juntar tudo em um único arquivo. Veja que todos os arquivos TypeScript serão agrupados, o que pode não ser uma boa prática de programação, principalmente para projetos muito extensos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inclusão dinâmica pelo webserver&lt;/strong&gt;: Neste método todos os arquivos &lt;code&gt;ts&lt;/code&gt; terão o seu correspondente &lt;code&gt;js&lt;/code&gt;, na qual serão carregados de forma dinâmica, via ajax. Como estamos utilizando um carregamento dinâmico, precisamos utilizar a biblioteca RequireJS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inclusão dinâmica pelo node&lt;/strong&gt;: Nesta forma criamos uma estrutura para ser executada diretamente pelo Node.JS, utilizando o padrão commonjs. Não usaremos este conceito aqui porque queremos ilustrar como utilizar o TypeScript em um site.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;combinando-todos-os-arquivos-em-um-só-1&#34;&gt;Combinando todos os arquivos em um só&lt;/h2&gt;

&lt;p&gt;Esta forma é a mais simples e pode ser usada na maioria dos seus projetos web. Vamos inicialmente criar a pasta &lt;code&gt;teste1&lt;/code&gt; e nela criaremos duas pastas: &lt;code&gt;src&lt;/code&gt; e &lt;code&gt;build&lt;/code&gt;. A pasta src contém o código fonte da aplicação, os arquivos TypeScript. A pasta build conterá o código JavaScript gerado pelo TypeScript. Na pasta &lt;code&gt;src&lt;/code&gt;, criaremos 3 arquivos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pessoa.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;class Pessoa{
    nome : string;
    constructor(nome:string){
        this.nome = nome;
    }
}
&lt;/pre&gt;

&lt;p&gt;Este primeiro arquivo é uma classe simples, com um parâmetro e o método construtor. A próxima classe será chamada de &lt;code&gt;Aluno&lt;/code&gt;, que irá estender da classe &lt;code&gt;Pessoa&lt;/code&gt;. Como a classe Aluno usa a classe Pessoa (que está em outro arquivo), precisamos importá-la e isso é feito da seguinte forma: &lt;code&gt;/// &amp;lt;reference path=&amp;quot;&amp;quot; /&amp;gt;&lt;/code&gt;. O parâmetro &lt;code&gt;path&lt;/code&gt; é justamente a classe que se deseja referenciar. Então temos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aluno.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;pessoa.ts&#34; /&amp;gt;

class Aluno extends Pessoa{
    matricula : string;
    
    constructor(nome:string,matricula:string){
        super(nome);
        this.matricula=matricula;
    }
}
&lt;/pre&gt;

&lt;p&gt;Nesta classe referenciamos na primeira linha a classe &lt;code&gt;Pessoa&lt;/code&gt;, informando o nome do arquivo &lt;code&gt;pessoa.ts&lt;/code&gt;. Depois criamos a classe &lt;code&gt;Aluno&lt;/code&gt;, que herda de Pessoa. Na classe &lt;code&gt;Aluno&lt;/code&gt; criamos o parâmetro &lt;code&gt;matricula&lt;/code&gt;, e no seu construtor usamos a palavra &lt;code&gt;super&lt;/code&gt; para referenciar o construtor da classe pai, que neste caso é &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Com as duas classes prontas, podemos finalmente criar o arquivo &lt;code&gt;index.ts&lt;/code&gt;, que é o arquivo principal do projeto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;aluno.ts&#34; /&amp;gt

var a = new Aluno(&#34;Joãozinho&#34;,&#34;0001&#34;);
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Veja que não é preciso adicionar a classe pessoa. Ela será adicionada na classe aluno&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Veja que o arquivo principal faz uma referência a classe &lt;code&gt;Aluno&lt;/code&gt;, do arquivo &lt;code&gt;aluno.ts&lt;/code&gt;. Com os três arquivos prontos, podemos usar o comando &lt;code&gt;tsc&lt;/code&gt; para compilar tudo em um único arquivo. Este comando é executado a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts05.png&#34; alt=&#34;ts05&#34; width=&#34;819&#34; height=&#34;580&#34; class=&#34;aligncenter size-full wp-image-52470&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nesta imagem usamos o comando &lt;code&gt;tree&lt;/code&gt; do DOS apenas para mostrar que o arquivo &lt;code&gt;script.js&lt;/code&gt; foi criado. O principal comando é o:&lt;/p&gt;

&lt;pre&gt;tsc ./src/index.ts --out ./build/script.js
&lt;/pre&gt;

&lt;p&gt;Este comando possui como primeiro parâmetro o arquivo ts inicial que neste caso é o &lt;code&gt;index.ts&lt;/code&gt;. O parâmetro &lt;code&gt;--out&lt;/code&gt; indica o nome do arquivo que será gerado pela compilação do TypeScript em JavaScript. Este arquivo é exibido a seguir:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build/script.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;var Pessoa = (function () {
    function Pessoa(nome) {
        this.nome = nome;
    }
    return Pessoa;
})();
/// &amp;lt;reference path=&#34;pessoa.ts&#34; /&amp;gt;
var __extends = (this &amp;&amp; this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Aluno = (function (_super) {
    __extends(Aluno, _super);
    function Aluno(nome, matricula) {
        _super.call(this, nome);
        this.matricula = matricula;
    }
    return Aluno;
})(Pessoa);
/// &amp;lt;reference path=&#34;aluno.ts&#34; /&amp;gt;
var a = new Aluno(&#34;Joãozinho&#34;, &#34;0001&#34;);
&lt;/pre&gt;

&lt;h2 id=&#34;utilizando-módulos-1&#34;&gt;Utilizando módulos&lt;/h2&gt;

&lt;p&gt;O uso de módulos na aplicação faz com que as classes não pertençam mais ao escopo global, como Pessoa e Aluno pertenciam no exemplo anterior. Vamos fazer uma refatoração no código e adicionar a criação de módulos no escopo da aplicação. Suponha que a classe Pessoa pertença ao módulo &amp;#8220;comum&amp;#8221; e que a classe Aluno pertença ao módulo &amp;#8220;ensino&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pessoa.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&amp;lt;u&gt;&lt;strong&gt;module&lt;/strong&gt;&amp;lt;/u&gt; comum {
    &lt;strong&gt;&amp;lt;u&gt;export&amp;lt;/u&gt;&lt;/strong&gt; class Pessoa{
        nome : string;
        constructor(nome:string){
            this.nome = nome;
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;Deixamos sublinhado as 2 palavras que são novidade neste código. A primeira é a palavra &lt;code&gt;module&lt;/code&gt;, seguida do nome do seu módulo que neste caso é &amp;#8220;comum&amp;#8221;. Dentro do módulo &amp;#8220;comum&amp;#8221; temos a classe Pessoa, e nela usamos a palavra &lt;code&gt;export&lt;/code&gt; que diz ao módulo que esta classe é pública ao módulo. Podemos incluir no módulo classes, variáveis, métodos etc. Para expôr estas classes a outros módulos, usamos export.&lt;/p&gt;

&lt;p&gt;A classe Aluno é refatorada para o seguinte código:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aluno.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;pessoa.ts&#34; /&amp;gt;
module ensino{
    export class Aluno extends &lt;strong&gt;&amp;lt;u&gt;comum.Pessoa&amp;lt;/u&gt;&lt;/strong&gt;{
        matricula : string;
        
        constructor(nome:string,matricula:string){
            super(nome);
            this.matricula=matricula;
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;A classe Aluno agora é do módulo &lt;code&gt;ensino&lt;/code&gt; e como novidade temos a referência da classe Pessoa como &lt;code&gt;comum.Pessoa&lt;/code&gt;. Isso é necessário já que estamos modularizando a aplicação. Finalmente, a classe &lt;code&gt;index.ts&lt;/code&gt; é refatorada para:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;aluno.ts&#34; /&amp;gt;

var a = new ensino.Aluno(&#34;Joãozinho&#34;,&#34;0001&#34;);
&lt;/pre&gt;

&lt;p&gt;Como novidade temos a chamada da classe Aluno como &lt;code&gt;ensino.Aluno&lt;/code&gt;. Com estas mudanças, podemos executar novamente a compilação:&lt;/p&gt;

&lt;pre&gt;tsc ./src/index.ts --out ./build/script.js
&lt;/pre&gt;

&lt;p&gt;e obteremos o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build/script.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;var comum;
(function (comum) {
    var Pessoa = (function () {
        function Pessoa(nome) {
            this.nome = nome;
        }
        return Pessoa;
    })();
    comum.Pessoa = Pessoa;
})(comum || (comum = {}));
var __extends = (this &amp;&amp; this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// $lt;reference path=&#34;pessoa.ts&#34; /&amp;gt;
var ensino;
(function (ensino) {
    var Aluno = (function (_super) {
        __extends(Aluno, _super);
        function Aluno(nome, matricula) {
            _super.call(this, nome);
            this.matricula = matricula;
            console.log(this.matricula);
        }
        return Aluno;
    })(comum.Pessoa);
    ensino.Aluno = Aluno;
})(ensino || (ensino = {}));
/// $lt;reference path=&#34;aluno.ts&#34; /&amp;gt;
var a = new ensino.Aluno(&#34;Joãozinho&#34;, &#34;0001&#34;);
&lt;/pre&gt;

&lt;h2 id=&#34;módulos-em-diretórios-1&#34;&gt;Módulos em diretórios&lt;/h2&gt;

&lt;p&gt;Geralmente a organização de módulos é feita em diretórios, para que todos os arquivos não fiquem em somente um único diretório. No caso anterior, poderíamos (na verdade deveríamos) criar os diretórios &lt;code&gt;src/comum&lt;/code&gt; e &lt;code&gt;src/ensino&lt;/code&gt; e reorganizar as classes de acordo com a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts06.png&#34; alt=&#34;ts06&#34; width=&#34;186&#34; height=&#34;256&#34; class=&#34;aligncenter size-full wp-image-52476&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A única mudança que precisamos realizar no código é no &lt;code&gt;reference&lt;/code&gt;, que deverá ser:&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;../comum/pessoa.ts&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Na classe aluno, como temos que subir um nível para encontrar o diretório &amp;#8220;comum&amp;#8221;, usamos &amp;#8220;../&amp;#8221;.&lt;/p&gt;

&lt;pre&gt;/// &amp;lt;reference path=&#34;ensino/aluno.ts&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;No arquivo index.ts, não precisamos usar &amp;#8220;../&amp;#8221; pois estamos no mesmo nível do diretório &lt;code&gt;ensino&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;módulos-externos-com-requirejs-1&#34;&gt;Módulos externos com requirejs&lt;/h2&gt;

&lt;p&gt;Até este momento todos os módulos estão em um único arquivo de saída, o &lt;code&gt;build/script.js&lt;/code&gt;. Agora desejamos criar uma forma de carregar os módulos sob demanda, ou seja,&lt;/p&gt;

&lt;p&gt;ao invés de carregar tudo de uma vez, vamos carregando os arquivos javascript na medida que eles forem sendo requisitados. Para isso precisamos criar uma estrutura um pouco mais complexa, e também precisaremos utilizar um framework qualquer para carregar módulos. Neste caso usamos o &lt;code&gt;Requirejs&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;criando-a-estrutura-inicial-1&#34;&gt;Criando a estrutura inicial&lt;/h3&gt;

&lt;p&gt;Crie uma nova pasta e copie os arquivos Pessoa.ts, Aluno.ts e index.ts com a mesma estrutura anterior. Ao invés de criarmos o diretório &amp;#8220;build&amp;#8221;, crie o diretório &amp;#8220;public&amp;#8221;, conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts07.png&#34; alt=&#34;ts07&#34; width=&#34;181&#34; height=&#34;292&#34; class=&#34;aligncenter size-full wp-image-52478&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;redefinido-as-classes-1&#34;&gt;Redefinido as classes&lt;/h3&gt;

&lt;p&gt;Ao utilizarmos módulos externos precisamos alterar a forma como referenciamos as classes. Ou seja, não usaremos mais o &lt;code&gt;&amp;lt;reference path=&amp;quot;../comum/pessoa.ts&amp;quot; /&amp;gt;&lt;/code&gt; conforme aprendemos, e não será necessário neste momento definir um módulo. Vamos aos ajustes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;comum/pessoa.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;export class Pessoa{
    nome : string;
    constructor(nome:string){
        this.nome = nome;
    }
}
&lt;/pre&gt;

&lt;p&gt;O que temos agora é o fim do &lt;code&gt;module&lt;/code&gt; e o uso do &lt;code&gt;export&lt;/code&gt; antes do nome da classe. Na classe Aluno, temos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ensino/aluno.ts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&amp;lt;u&gt;&lt;strong&gt;import comum = require(&#34;../comum/pessoa&#34;)&lt;/strong&gt;&amp;lt;/u&gt;

export class Aluno extends comum.Pessoa{
    matricula : string;
    
    constructor(nome:string,matricula:string){
        super(nome);
        this.matricula=matricula;
    }
}
&lt;/pre&gt;

&lt;p&gt;Alem do fim da palavra &lt;code&gt;module&lt;/code&gt; e do uso do &lt;code&gt;export&lt;/code&gt;, temos uma importante alteração na primeira linha do arquivo &lt;em&gt;aluno.ts&lt;/em&gt;. Estamos utilizando a seguinte sintaxe:&lt;/p&gt;

&lt;pre&gt;import MODULO = require(&#34;caminho&#34;);
&lt;/pre&gt;

&lt;p&gt;Aqui tivemos uma inversão do uso do nome do módulo. Se antes definimos o nome do módulo como &amp;#8220;comum&amp;#8221; na classe &amp;#8220;pessoa&amp;#8221;, agora definimos na própria classe &amp;#8220;aluno&amp;#8221;. Como temos agora o &lt;code&gt;import comum&lt;/code&gt;, podemos usar &lt;code&gt;comum.Pessoa&lt;/code&gt;. O arquivo &lt;code&gt;index.js&lt;/code&gt; é refatorado para:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;import ensino = require(&#34;ensino/aluno&#34;)

var a = new ensino.Aluno(&#34;Joãozinho&#34;,&#34;0001&#34;);
&lt;/pre&gt;

&lt;h3 id=&#34;instalando-o-requirejs-1&#34;&gt;Instalando o requirejs&lt;/h3&gt;

&lt;p&gt;Precisamos instalar o requirejs no projeto, e podemos fazer isso com npm, através do comando &lt;code&gt;npm i requirejs --save&lt;/code&gt;. Este comando irá instalar o`&lt;code&gt;no diretório&lt;/code&gt;node_modules&lt;code&gt;do seu projeto. Se isso não acontecer, execute antes o comando&lt;/code&gt;npm init&lt;code&gt;para inicializar o repositório npm no projeto. Após instalar o requirejs, copie o arquivo&lt;/code&gt;node_modules/requirejs/require.js&lt;code&gt;para a pasta&lt;/code&gt;public/js`. Se você não está confortável com o uso do npm para instalar o requirejs, utilize o seguinte CDN:&lt;/p&gt;

&lt;pre&gt;&amp;lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.22/require.min.js&#34; data-main=&#34;js/index.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;h3 id=&#34;configurando-o-arquivo-index-html&#34;&gt;Configurando o arquivo index.html&lt;/h3&gt;

&lt;p&gt;O arquivo &lt;code&gt;index.html&lt;/code&gt; é configurado da seguinte forma:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public/index.html&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;TypeScript Modules&amp;lt;/title&amp;gt;
        &amp;lt;script src=&#34;js/require.js&#34; data-main=&#34;js/index.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        Olá Mundo....
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Neste simples arquivo apenas incluímos o &lt;code&gt;require.js&lt;/code&gt; que foi copiado do &lt;code&gt;node_modules&lt;/code&gt; e usamos o atributo &lt;code&gt;data-main=&amp;quot;js/index.js&amp;quot;&lt;/code&gt; para informar o arquivo no qual será carregado inicialmente.&lt;/p&gt;

&lt;h3 id=&#34;compilando-a-aplicação&#34;&gt;Compilando a aplicação&lt;/h3&gt;

&lt;p&gt;Aliás este arquivo ainda não foi criado, já que não executamos o comando &lt;code&gt;tsc&lt;/code&gt;. O comando para compilar o JavaScript para que o requirejs possa entendê-lo é o seguinte:&lt;/p&gt;

&lt;pre&gt;tsc ./src/index.ts --outDir ./public/js/ --module &#34;amd&#34;
&lt;/pre&gt;

&lt;p&gt;Neste comando indicamos como primeiro parâmetro &lt;code&gt;./src/index.ts&lt;/code&gt; o arquivo inicial no qual será compilado. O parâmetro &lt;code&gt;--outDir ./public/js/&lt;/code&gt; indica o diretório de saída da compilação, neste caso será o diretório &lt;code&gt;public/js&lt;/code&gt;, o mesmo onde se encontra o arquivo require.js. O terceiro parâmetro &lt;code&gt;--module &amp;quot;amd&amp;quot;&lt;/code&gt; indica a forma como o tsc vai compilar os arquivos, onde AMD significa &lt;code&gt;Asynchronous Module Definition&lt;/code&gt;. Após executar este comando, os arquivos jsvascript serão criados na pasta &lt;code&gt;public/js&lt;/code&gt; conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts08.png&#34; alt=&#34;ts08&#34; width=&#34;1171&#34; height=&#34;580&#34; class=&#34;aligncenter size-full wp-image-52480&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;executando-no-navegador&#34;&gt;Executando no navegador&lt;/h3&gt;

&lt;p&gt;Chegou o momento de testar o carregamento dinâmico das classes javascript, e para isso você precisa usar um servidor web. Se você possui um servidor web como o apache, basta copiar a pasta &lt;code&gt;public&lt;/code&gt; para o diretório web e testá-la. Caso negativo, podemos usar o &lt;strong&gt;live-server&lt;/strong&gt; que é facilmente instalado através do node: &lt;code&gt;npm i live-server /g&lt;/code&gt;. Após instalar, acesse o diretório public pela linha de comando e digite o comando &lt;code&gt;live-server&lt;/code&gt;. O navegador será aberto automaticamente e o arquivo &lt;code&gt;index.html&lt;/code&gt; será carregado.&lt;/p&gt;

&lt;p&gt;Você verá a mensagem &lt;em&gt;Olá mundo&lt;/em&gt;, mas o que estamos interessados é no carregamento dos arquivos javascript da aplicação. Para isso, se estiver no Chrome, tecle F12, navegue até a aba Networking e recarregue a aplicação com F5. Você obterá um resultado semelhante a figura a seguir. &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts09.png&#34; alt=&#34;ts09&#34; width=&#34;960&#34; height=&#34;677&#34; class=&#34;aligncenter size-full wp-image-52481&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Neste artigo criamos duas formas para utilizar TypeScript no qual os arquivos estão inicialmente separados. A primeira é utilizando o padrão do TypeScript e o &lt;code&gt;/// &amp;lt;reference path=&amp;quot;arquivo.ts&amp;quot; /&amp;gt;&lt;/code&gt; e a segunda é usando &lt;code&gt;requirejs&lt;/code&gt; para carregar os arquivos javascript via ajax. Para que você possa se aprofundar ainda mais neste conceito, que é complexo, sugiro a leitura da documentação: &lt;a href=&#34;http://www.typescriptlang.org/Handbook#modules&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.typescriptlang.org/Handbook#modules&#34;&gt;http://www.typescriptlang.org/Handbook#modules&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diga olá ao TypeScript e adeus ao JavaScript</title>
      <link>https://tableless.github.io/hugo-public/diga-ola-ao-typescript-e-adeus-ao-javascript/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/diga-ola-ao-typescript-e-adeus-ao-javascript/</guid>
      <description>

&lt;p&gt;Acredito que este artigo tenha chamado a sua atenção pelo título. Como assim??? adeus ao JavaScript??? A linguagem que está bombando em 2015 (e claro, 2016!). Posso estar sendo um pouco ousado aqui, mas eu tenho em mente que, neste momento, o JavaScript para mim é agora &amp;#8220;linguagem de máquina&amp;#8221; ou o famoso bytecode. Porquê? Bom, você conhece um código javascript minificado+comprimido+&amp;#8221;esculachado&amp;#8221;&amp;#8230; Não estou retirando aqui toda a beleza do JavaScript, e consequente importância, mas na evolução que vem acontecendo a cada dia no mundo web, felizmente chegamos ao ponto que podemos tratar o javascript como uma linguagem tipada e semelhante ao c/java/php e derivados.&lt;/p&gt;

&lt;p&gt;Neste ponto entra uma questão pessoal. Ou você vai adorar TypeScript ou vai achar completamente inútil, já que a sua principal característica é trazer uma &amp;#8220;tipagem&amp;#8221; a linguagem, e no pacote uma forma de programar em javascript mais parecida com Java e suas vertentes. Se você gosta de tipar suas váriaveis e métodos, criar classes, interfaces, usar Orientação a Objetos, o TypeScript foi feito para você e, claro, pode dizer adeus ao JavaScript.&lt;/p&gt;

&lt;p&gt;Lembre-se que TypeScript está sendo usada extensivamente no novo framework Angular2, então se vc ainda não sabe o que é TypeScript, chegou o momento de conhecer.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-typescript&#34;&gt;O que é TypeScript?&lt;/h2&gt;

&lt;p&gt;O TypeScript possibilita que você escreva código JavaScript na forma que foi acostumado quando aprendeu Orientação a Objetos. Você lembra dessas aulas, em criar métodos que retornassem um valor com tipo definido, em criar classes e mais classes para o seu programa, em criar interfaces para desacoplar tudo que quisesse, entre diversas outras técnicas. Com TypeScript tudo isso é possível, porque no final ele pega o seu lindo código cheio de classes e transforma em JavaScript puro, no qual o browser vai compreender. No próprio site é definido que o TypeScript compila para JavaScript, o que é um termo tecnicamente errado &amp;#8211; mas cada vez mais aceito, dado que aquele código &amp;#8220;malucão&amp;#8221; em JavaScript pode ser encarado como código de máquina.&lt;/p&gt;

&lt;p&gt;No exemplo a seguir, criamos uma interface e uma classe, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface IComponent{
    getId() : string;
}

class Button implements IComponent{
    id:string;
    getId():string{
        return this.id;
    }
}&lt;/pre&gt;

&lt;p&gt;Este é um código 100% TypeScript que você pode criar em um editor de textos ou ide, no qual criamos uma interface chamada &lt;code&gt;IComponent&lt;/code&gt;e uma classe que chamamos de &lt;code&gt;Button&lt;/code&gt;. Esta classe implementa a interface e por isso o método &lt;code&gt;getId()&lt;/code&gt; deve ser criado. Se você salvar este arquivo como um arquivo javascript e adicionar em um documento HTML, nenhum &lt;strong&gt;browser&lt;/strong&gt; vai entender isso, quem sabe num futuro distante. Mas isso nao é um problema, pois o TypeScript possui um &amp;#8220;compilador&amp;#8221; que irá pegar o seu código e transformar em algo do tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Button = (function () {
    function Button() {
    }
    Button.prototype.getId = function () {
        return this.id;
    };
    return Button;
})();&lt;/pre&gt;

&lt;p&gt;Este código feioso aí em cima é 100% javascript compreensível em qualquer navegador web. Tem gente que prefere escrever assim, vai entender né. Mas como essa mágica funciona? Vamos explicar a seguir.&lt;/p&gt;

&lt;h2 id=&#34;testando-o-typescript&#34;&gt;Testando o TypeScript&lt;/h2&gt;

&lt;p&gt;Abra uma nova aba no seu browser e acesse: &lt;a href=&#34;http://www.typescriptlang.org/Playground&#34;&gt;http://www.typescriptlang.org/Playground&lt;/a&gt;. O Playground é um pequeno editor TypeScript que, além de checar possíveis erros de sintaxe, também compila automaticamente o código para Javascript, no qual você pode testá-lo. Não omita o Playground no seu aprendizado, ele pode te ajudar muito, como na figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts01.png&#34; alt=&#34;ts01&#34; width=&#34;856&#34; height=&#34;277&#34; class=&#34;alignleft size-full wp-image-52433&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso não queira utilizar o Playground, pode-se instalar o TypeScript no seu ambiente de desenvolvimento através do node. O comando a seguir deve ser compreensível para você:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ npm install typescript -g&lt;/pre&gt;

&lt;p&gt;Após instalar o TypeScript no ambiente, você pode usar o comando &lt;code&gt;tsc&lt;/code&gt; para compilar um arquivo que geralmente está na extensão &lt;code&gt;ts&lt;/code&gt; para &lt;code&gt;js&lt;/code&gt;. Por exemplo, crie o arquivo &lt;code&gt;script.ts&lt;/code&gt; com o código TypeScript descrito anteriormente e execute o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;tsc --out script.js script.ts&lt;/pre&gt;

&lt;p&gt;Editores de texto como o Sublime Text, Atom, VS Code, também tem a capacidade de compilar o arquivo em JavaScript, bastando apenas adicionar plugins relativos ao TypeScript. O &lt;code&gt;VS Code&lt;/code&gt;, em particular, apresentou um bom comportamento frente aos outros, como pode-se perceber na imagem a seguir.&lt;/p&gt;

&lt;div id=&#34;attachment_52436&#34; style=&#34;width: 549px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts02.png&#34; alt=&#34;Visual Studio Code&#34; width=&#34;539&#34; height=&#34;639&#34; class=&#34;size-full wp-image-52436&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Visual Studio Code
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_52438&#34; style=&#34;width: 566px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts03.png&#34; alt=&#34;Sublime Text 2.0.2&#34; width=&#34;556&#34; height=&#34;765&#34; class=&#34;size-full wp-image-52438&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Sublime Text 2.0.2
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Mas neste artigo vamos nos contentar com o TypeScript Playground, e deixe os editores para a sua escolha pessoal (fique a vontade em perguntar como configurar o TypeScript no Sublime, é um pouco mais trabalhoso).&lt;/p&gt;

&lt;p&gt;Agora que apresentamos o TypeScript e suas maravilhas, vamos compreender um pouco mais desta linguagem.&lt;/p&gt;

&lt;h2 id=&#34;tipos-de-variáveis&#34;&gt;Tipos de variáveis&lt;/h2&gt;

&lt;p&gt;Uma das funcionalidades do TypeScript é criar variáveis com tipos definidos, assim como é feito no Java.&lt;/p&gt;

&lt;h3 id=&#34;tipos-primitivos&#34;&gt;Tipos primitivos&lt;/h3&gt;

&lt;p&gt;Existem 3 tipos primitivos que podemos associar a uma variável. As variáveis são criadas através da palavra reservada &lt;code&gt;var&lt;/code&gt;, e o tipo é informado da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var NOMDE_DA_VARIAVEL : TIPO = VALOR
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;boolean: Pode assumir os valores &lt;code&gt;true&lt;/code&gt; ou &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;number: Assume qualquer número, como inteiro ou ponto flutuante.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;string: Tipo texto, pode ser atribuído com aspas simples ou duplas.&lt;/p&gt;

&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arrays no TS podem ser criados através de duas formas. A primeira delas, usa-se &lt;code&gt;[]&lt;/code&gt; na definição do tipo da variável, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:number[] = [1, 2, 3];
&lt;/pre&gt;

&lt;p&gt;A segunda é mais conhecida como &amp;#8220;generics&amp;#8221; e usa &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; para definir o tipo, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:Array&amp;lt;number&amp;gt; = [1,2,3];
&lt;/pre&gt;

&lt;p&gt;Pode-se usar tipos complexos na criação de arrays, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa{
    nome:string;
    constructor(nome:string){
        this.nome = nome;
    }
    sayHello():string{
        return &#34;Hello, &#34; + this.nome;
    }
}

var fulano = new Pessoa(&#34;fulano&#34;);
var beltrano = new Pessoa(&#34;beltrano&#34;);

var pessoas:Pessoa[]= new Array();
pessoas.push(fulano);
pessoas.push(beltrano);

pessoas.forEach( (p:Pessoa)=&amp;gt;
    console.log(p.sayHello())
    );
&lt;/pre&gt;

&lt;p&gt;Neste exemplo, criamos uma classe chamada &lt;code&gt;Pessoa&lt;/code&gt;, adicionando a propriedade &lt;code&gt;nome&lt;/code&gt;, o método construtor e o método &lt;code&gt;sayHello&lt;/code&gt;. Depois, criamos duas variáveis &lt;code&gt;fulano&lt;/code&gt; e &lt;code&gt;beltrano&lt;/code&gt;, e adicionamos à variável &lt;code&gt;pessoas&lt;/code&gt;, que é um array de vaiáveis do tipo &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Após usar o método &lt;code&gt;push&lt;/code&gt; para adicionar as variáveis no array, usamos o método &lt;code&gt;forEach&lt;/code&gt; para percorrer cada item deste array e exibir uma mensagem no console do navegador.&lt;/p&gt;

&lt;h3 id=&#34;enum&#34;&gt;Enum&lt;/h3&gt;

&lt;p&gt;Enums são velhos conhecidos do C#, e usados como &amp;#8220;datatype&amp;#8221;, que podem definir um status por exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red, Green, Blue};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red = 1, Green = 2, Blue = 3};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;Quando criamos um enum, usamos o &amp;#8220;poder&amp;#8221; da ide para que possamos programar de forma mais fácil, conforme a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts04.png&#34; alt=&#34;ts04&#34; width=&#34;697&#34; height=&#34;145&#34; class=&#34;alignleft size-full wp-image-52451&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;any&#34;&gt;Any&lt;/h3&gt;

&lt;p&gt;Uma variável do tipo &lt;code&gt;Any&lt;/code&gt; pode assumir qualquer valor.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var notSure: any = 4;
notSure = &#34;maybe a string instead&#34;;
notSure = false; // okay, definitely a boolean

var list:any[] = [1, true, &#34;free&#34;];
list[1] = 100;
&lt;/pre&gt;

&lt;h3 id=&#34;void&#34;&gt;Void&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;void&lt;/code&gt; é usado para determinar que um método não retorna nenhum valor, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function warnUser(): void {
    alert(&#34;This is my warning message&#34;);
}
&lt;/pre&gt;

&lt;h2 id=&#34;classes&#34;&gt;Classes&lt;/h2&gt;

&lt;p&gt;O conceito de classes no TypeScript é o mesmo de uma classe em qualquer linguagem orientada a objetos. As classes no TypeScript seguem o padrão ECMAScript 6 que em teoria será o &amp;#8220;futuro&amp;#8221; do JavaScript. A classe possui uma sintaxe muito familiar com c#, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return &#34;Hello, &#34; + this.greeting;
    }
}
var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;p&gt;O construtor é definido pela palavra &lt;code&gt;constructor&lt;/code&gt;. Métodos não necessitam da palavra &lt;code&gt;function&lt;/code&gt;, bastando apenas usar ``Acredito que este artigo tenha chamado a sua atenção pelo título. Como assim??? adeus ao JavaScript??? A linguagem que está bombando em 2015 (e claro, 2016!). Posso estar sendo um pouco ousado aqui, mas eu tenho em mente que, neste momento, o JavaScript para mim é agora &amp;#8220;linguagem de máquina&amp;#8221; ou o famoso bytecode. Porquê? Bom, você conhece um código javascript minificado+comprimido+&amp;#8221;esculachado&amp;#8221;&amp;#8230; Não estou retirando aqui toda a beleza do JavaScript, e consequente importância, mas na evolução que vem acontecendo a cada dia no mundo web, felizmente chegamos ao ponto que podemos tratar o javascript como uma linguagem tipada e semelhante ao c/java/php e derivados.&lt;/p&gt;

&lt;p&gt;Neste ponto entra uma questão pessoal. Ou você vai adorar TypeScript ou vai achar completamente inútil, já que a sua principal característica é trazer uma &amp;#8220;tipagem&amp;#8221; a linguagem, e no pacote uma forma de programar em javascript mais parecida com Java e suas vertentes. Se você gosta de tipar suas váriaveis e métodos, criar classes, interfaces, usar Orientação a Objetos, o TypeScript foi feito para você e, claro, pode dizer adeus ao JavaScript.&lt;/p&gt;

&lt;p&gt;Lembre-se que TypeScript está sendo usada extensivamente no novo framework Angular2, então se vc ainda não sabe o que é TypeScript, chegou o momento de conhecer.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-typescript-1&#34;&gt;O que é TypeScript?&lt;/h2&gt;

&lt;p&gt;O TypeScript possibilita que você escreva código JavaScript na forma que foi acostumado quando aprendeu Orientação a Objetos. Você lembra dessas aulas, em criar métodos que retornassem um valor com tipo definido, em criar classes e mais classes para o seu programa, em criar interfaces para desacoplar tudo que quisesse, entre diversas outras técnicas. Com TypeScript tudo isso é possível, porque no final ele pega o seu lindo código cheio de classes e transforma em JavaScript puro, no qual o browser vai compreender. No próprio site é definido que o TypeScript compila para JavaScript, o que é um termo tecnicamente errado &amp;#8211; mas cada vez mais aceito, dado que aquele código &amp;#8220;malucão&amp;#8221; em JavaScript pode ser encarado como código de máquina.&lt;/p&gt;

&lt;p&gt;No exemplo a seguir, criamos uma interface e uma classe, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface IComponent{
    getId() : string;
}

class Button implements IComponent{
    id:string;
    getId():string{
        return this.id;
    }
}&lt;/pre&gt;

&lt;p&gt;Este é um código 100% TypeScript que você pode criar em um editor de textos ou ide, no qual criamos uma interface chamada &lt;code&gt;IComponent&lt;/code&gt;e uma classe que chamamos de &lt;code&gt;Button&lt;/code&gt;. Esta classe implementa a interface e por isso o método &lt;code&gt;getId()&lt;/code&gt; deve ser criado. Se você salvar este arquivo como um arquivo javascript e adicionar em um documento HTML, nenhum &lt;strong&gt;browser&lt;/strong&gt; vai entender isso, quem sabe num futuro distante. Mas isso nao é um problema, pois o TypeScript possui um &amp;#8220;compilador&amp;#8221; que irá pegar o seu código e transformar em algo do tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Button = (function () {
    function Button() {
    }
    Button.prototype.getId = function () {
        return this.id;
    };
    return Button;
})();&lt;/pre&gt;

&lt;p&gt;Este código feioso aí em cima é 100% javascript compreensível em qualquer navegador web. Tem gente que prefere escrever assim, vai entender né. Mas como essa mágica funciona? Vamos explicar a seguir.&lt;/p&gt;

&lt;h2 id=&#34;testando-o-typescript-1&#34;&gt;Testando o TypeScript&lt;/h2&gt;

&lt;p&gt;Abra uma nova aba no seu browser e acesse: &lt;a href=&#34;http://www.typescriptlang.org/Playground&#34;&gt;http://www.typescriptlang.org/Playground&lt;/a&gt;. O Playground é um pequeno editor TypeScript que, além de checar possíveis erros de sintaxe, também compila automaticamente o código para Javascript, no qual você pode testá-lo. Não omita o Playground no seu aprendizado, ele pode te ajudar muito, como na figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts01.png&#34; alt=&#34;ts01&#34; width=&#34;856&#34; height=&#34;277&#34; class=&#34;alignleft size-full wp-image-52433&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso não queira utilizar o Playground, pode-se instalar o TypeScript no seu ambiente de desenvolvimento através do node. O comando a seguir deve ser compreensível para você:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ npm install typescript -g&lt;/pre&gt;

&lt;p&gt;Após instalar o TypeScript no ambiente, você pode usar o comando &lt;code&gt;tsc&lt;/code&gt; para compilar um arquivo que geralmente está na extensão &lt;code&gt;ts&lt;/code&gt; para &lt;code&gt;js&lt;/code&gt;. Por exemplo, crie o arquivo &lt;code&gt;script.ts&lt;/code&gt; com o código TypeScript descrito anteriormente e execute o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;tsc --out script.js script.ts&lt;/pre&gt;

&lt;p&gt;Editores de texto como o Sublime Text, Atom, VS Code, também tem a capacidade de compilar o arquivo em JavaScript, bastando apenas adicionar plugins relativos ao TypeScript. O &lt;code&gt;VS Code&lt;/code&gt;, em particular, apresentou um bom comportamento frente aos outros, como pode-se perceber na imagem a seguir.&lt;/p&gt;

&lt;div id=&#34;attachment_52436&#34; style=&#34;width: 549px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts02.png&#34; alt=&#34;Visual Studio Code&#34; width=&#34;539&#34; height=&#34;639&#34; class=&#34;size-full wp-image-52436&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Visual Studio Code
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_52438&#34; style=&#34;width: 566px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts03.png&#34; alt=&#34;Sublime Text 2.0.2&#34; width=&#34;556&#34; height=&#34;765&#34; class=&#34;size-full wp-image-52438&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Sublime Text 2.0.2
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Mas neste artigo vamos nos contentar com o TypeScript Playground, e deixe os editores para a sua escolha pessoal (fique a vontade em perguntar como configurar o TypeScript no Sublime, é um pouco mais trabalhoso).&lt;/p&gt;

&lt;p&gt;Agora que apresentamos o TypeScript e suas maravilhas, vamos compreender um pouco mais desta linguagem.&lt;/p&gt;

&lt;h2 id=&#34;tipos-de-variáveis-1&#34;&gt;Tipos de variáveis&lt;/h2&gt;

&lt;p&gt;Uma das funcionalidades do TypeScript é criar variáveis com tipos definidos, assim como é feito no Java.&lt;/p&gt;

&lt;h3 id=&#34;tipos-primitivos-1&#34;&gt;Tipos primitivos&lt;/h3&gt;

&lt;p&gt;Existem 3 tipos primitivos que podemos associar a uma variável. As variáveis são criadas através da palavra reservada &lt;code&gt;var&lt;/code&gt;, e o tipo é informado da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var NOMDE_DA_VARIAVEL : TIPO = VALOR
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;boolean: Pode assumir os valores &lt;code&gt;true&lt;/code&gt; ou &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;number: Assume qualquer número, como inteiro ou ponto flutuante.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;string: Tipo texto, pode ser atribuído com aspas simples ou duplas.&lt;/p&gt;

&lt;h3 id=&#34;arrays-1&#34;&gt;Arrays&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arrays no TS podem ser criados através de duas formas. A primeira delas, usa-se &lt;code&gt;[]&lt;/code&gt; na definição do tipo da variável, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:number[] = [1, 2, 3];
&lt;/pre&gt;

&lt;p&gt;A segunda é mais conhecida como &amp;#8220;generics&amp;#8221; e usa &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; para definir o tipo, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:Array&amp;lt;number&amp;gt; = [1,2,3];
&lt;/pre&gt;

&lt;p&gt;Pode-se usar tipos complexos na criação de arrays, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa{
    nome:string;
    constructor(nome:string){
        this.nome = nome;
    }
    sayHello():string{
        return &#34;Hello, &#34; + this.nome;
    }
}

var fulano = new Pessoa(&#34;fulano&#34;);
var beltrano = new Pessoa(&#34;beltrano&#34;);

var pessoas:Pessoa[]= new Array();
pessoas.push(fulano);
pessoas.push(beltrano);

pessoas.forEach( (p:Pessoa)=&amp;gt;
    console.log(p.sayHello())
    );
&lt;/pre&gt;

&lt;p&gt;Neste exemplo, criamos uma classe chamada &lt;code&gt;Pessoa&lt;/code&gt;, adicionando a propriedade &lt;code&gt;nome&lt;/code&gt;, o método construtor e o método &lt;code&gt;sayHello&lt;/code&gt;. Depois, criamos duas variáveis &lt;code&gt;fulano&lt;/code&gt; e &lt;code&gt;beltrano&lt;/code&gt;, e adicionamos à variável &lt;code&gt;pessoas&lt;/code&gt;, que é um array de vaiáveis do tipo &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Após usar o método &lt;code&gt;push&lt;/code&gt; para adicionar as variáveis no array, usamos o método &lt;code&gt;forEach&lt;/code&gt; para percorrer cada item deste array e exibir uma mensagem no console do navegador.&lt;/p&gt;

&lt;h3 id=&#34;enum-1&#34;&gt;Enum&lt;/h3&gt;

&lt;p&gt;Enums são velhos conhecidos do C#, e usados como &amp;#8220;datatype&amp;#8221;, que podem definir um status por exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red, Green, Blue};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red = 1, Green = 2, Blue = 3};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;Quando criamos um enum, usamos o &amp;#8220;poder&amp;#8221; da ide para que possamos programar de forma mais fácil, conforme a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts04.png&#34; alt=&#34;ts04&#34; width=&#34;697&#34; height=&#34;145&#34; class=&#34;alignleft size-full wp-image-52451&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;any-1&#34;&gt;Any&lt;/h3&gt;

&lt;p&gt;Uma variável do tipo &lt;code&gt;Any&lt;/code&gt; pode assumir qualquer valor.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var notSure: any = 4;
notSure = &#34;maybe a string instead&#34;;
notSure = false; // okay, definitely a boolean

var list:any[] = [1, true, &#34;free&#34;];
list[1] = 100;
&lt;/pre&gt;

&lt;h3 id=&#34;void-1&#34;&gt;Void&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;void&lt;/code&gt; é usado para determinar que um método não retorna nenhum valor, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function warnUser(): void {
    alert(&#34;This is my warning message&#34;);
}
&lt;/pre&gt;

&lt;h2 id=&#34;classes-1&#34;&gt;Classes&lt;/h2&gt;

&lt;p&gt;O conceito de classes no TypeScript é o mesmo de uma classe em qualquer linguagem orientada a objetos. As classes no TypeScript seguem o padrão ECMAScript 6 que em teoria será o &amp;#8220;futuro&amp;#8221; do JavaScript. A classe possui uma sintaxe muito familiar com c#, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return &#34;Hello, &#34; + this.greeting;
    }
}
var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;p&gt;O construtor é definido pela palavra &lt;code&gt;constructor&lt;/code&gt;. Métodos não necessitam da palavra &lt;code&gt;function&lt;/code&gt;, bastando apenas usar`&lt;code&gt;. Perceba que, no exemplo apresentado, não definimos visibilidade das propriedades da classe, nem o tipo de retorno do método&lt;/code&gt;greet`. É claro que podemos definir estes parâmetros, conforme o próximo exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    private greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    public greet() : string {
        return &#34;Hello, &#34; + this.greeting;
    }
}

var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;h3 id=&#34;visibilidade-de-métodos-e-propriedades&#34;&gt;Visibilidade de métodos e propriedades&lt;/h3&gt;

&lt;p&gt;Métodos e propriedades de uma classe podem assumir a visibilidade: private, public e protected.&lt;/p&gt;

&lt;h3 id=&#34;herança&#34;&gt;Herança&lt;/h3&gt;

&lt;p&gt;A herança entre uma classe e outra é definida pela palavra &lt;code&gt;extends&lt;/code&gt;. Pode-se sobrecarregar métodos e usar a palavra &lt;code&gt;super&lt;/code&gt; para chamar o método da classe pai, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Animal {
    name:string;
    constructor(theName: string) { this.name = theName; }
    move(meters: number = 0) {
        alert(this.name + &#34; moved &#34; + meters + &#34;m.&#34;);
    }
}

class Snake extends Animal {
    constructor(name: string) { super(name); }
    move(meters = 5) {
        alert(&#34;Slithering...&#34;);
        super.move(meters);
    }
}

class Horse extends Animal {
    constructor(name: string) { super(name); }
    move(meters = 45) {
        alert(&#34;Galloping...&#34;);
        super.move(meters);
    }
}

var sam = new Snake(&#34;Sammy the Python&#34;);
var tom: Animal = new Horse(&#34;Tommy the Palomino&#34;);

sam.move();
tom.move(34);
&lt;/pre&gt;

&lt;p&gt;Neste exemplo usamos o &lt;code&gt;super&lt;/code&gt; da classe &lt;code&gt;Snake&lt;/code&gt; para chamar o método construtor da classe pai &lt;code&gt;Animal&lt;/code&gt;. Se isso não for claro para você, dê uma estudada em OO para que possa compreender melhor, pois estas características são da Orientação em Objetos como um todo, e não do TypeScript.&lt;/p&gt;

&lt;h2 id=&#34;accessors-ou-métodos-get-set&#34;&gt;Accessors (ou métodos get/set)&lt;/h2&gt;

&lt;p&gt;Os Accessors visam proteger as propriedades de uma classe, pois você já deve saber que expor propriedades de uma classe não é algo legal 🙂&lt;/p&gt;

&lt;p&gt;Os accessors do TypeScript são feitos pelas palavras &lt;code&gt;get&lt;/code&gt; e &lt;code&gt;set&lt;/code&gt;, e claro, deixe a sua propriedade como &lt;code&gt;private&lt;/code&gt;. Veja o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa {
    private _password: string;

    get password(): string {
        return this._password;
    }
    
    set password(p : string) {
        if (p != &#34;123456&#34;) {
            this._password = p;
        }
        else {
            alert(&#34;Ei, senha não pode ser 123456&#34;);
        }
    }
}

var p = new Pessoa();
p.password = &#34;123456&#34;; //vai exibir o erro
&lt;/pre&gt;

&lt;h3 id=&#34;métodos-estáticos&#34;&gt;Métodos estáticos&lt;/h3&gt;

&lt;p&gt;É possível criar métodos estáticos definindo a palavra &lt;code&gt;static&lt;/code&gt; antes do método. Existem dezenas de aplicações para métodos estáticos, sendo uma delas não precisar instanciar uma classe, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class SystemAlert{
    
    static alert(message:string):void{
        alert(message);
    }
    
    static warm (message:string):void{
        alert(&#34;Atenção: &#34; + message);
    }
    
    static error(message:string):void{
        alert(&#34;Erro: &#34; + message);
    }
    
}

SystemAlert.alert(&#34;Oi&#34;);
SystemAlert.error(&#34;Não foi possível conectar na base de dados&#34;);
&lt;/pre&gt;

&lt;h2 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;Uma interface define um contrato para a classe. A interface é criada da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface Ponto{
 x: number;
 y: number;
 x: number;
}
&lt;/pre&gt;

&lt;p&gt;Para implementar a interface, usamos &lt;code&gt;implements&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Ponto3d implements Ponto{
   (aqui implementamos x,y,z)
}
&lt;/pre&gt;

&lt;h2 id=&#34;funções&#34;&gt;Funções&lt;/h2&gt;

&lt;p&gt;Vamos exemplificar algumas particularidades de uma função em TypeScript. A função pode ser criada fora de uma classe ou dentro, sendo as observações que faremos a seguir podem ser aplicadas em ambas.&lt;/p&gt;

&lt;p&gt;Tome nota apenas que, em uma classe, não precisamos usar a palavra &lt;code&gt;function&lt;/code&gt; para definir uma função, mas fora da classe precisamos.&lt;/p&gt;

&lt;h3 id=&#34;parâmetros-com-valores-padrão&#34;&gt;Parâmetros com valores padrão&lt;/h3&gt;

&lt;p&gt;Pode-se definir um valor padrão para um parâmetro de uma função da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function buildName(firstName: string, lastName : string = &#34;Smith&#34;) {
}
//ou
class Foo{
  buildName(firstName: string, lastName : string = &#34;Smith&#34;) {
  }
}
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-opcionais&#34;&gt;Parâmetros opcionais&lt;/h3&gt;

&lt;p&gt;Use o caractere &lt;code&gt;?&lt;/code&gt; para definir um parâmetro opcional.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Foo{
  buildName(firstName: string, lastName? : string) {
     if (lastName){
           // blablabla
     }
  }
}
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-rest&#34;&gt;Parâmetros REST&lt;/h3&gt;

&lt;p&gt;Pode-se repassar um array de valores diretamente para um parâmetro. É válido lembrar que este modo só pode ser usado no último parâmetro da sua função. Exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Foo{
 static alertName(firstName: string, ...restOfName: string[]) {
    alert(firstName + &#34; &#34; + restOfName.join(&#34; &#34;));
 }
}
Foo.alertName(&#34;Fulano&#34;,&#34;de&#34;,&#34;Tal&#34;);
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-no-formato-json&#34;&gt;Parâmetros no formato JSON&lt;/h3&gt;

&lt;p&gt;Umas das maiores facilidades do Javascript é repassar parâmetros no formato JSON. Com TypeScript é possível utilizar este mesmo comportamento, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Ponto{
    
    private _x : number = 0;
    private _y : number = 0;
    private _z : number = 0;
    
    constructor( p: {x:number;y:number;z?:number;}){
        this._x = p.x;
        this._y = p.y;
        if (p.z)
            this._z = p.z;
    }
    
    is3d():boolean{
        return this._z!=0;
    }
    
}

var p1 = new Ponto({x:10,y:20});

alert(p1.is3d());
&lt;/pre&gt;

&lt;p&gt;Observe que no construtor da classe &lt;code&gt;Ponto&lt;/code&gt; criamos o parâmetro &lt;code&gt;p&lt;/code&gt; e na definição do seu tipo repassamos um objeto anônimo com três parâmetros, sendo que o parâmetro &lt;code&gt;z&lt;/code&gt; é opcional.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Neste artigo vimos algumas funcionalidades do TypeScript, sendo ainda existem diversos tópicos a serem abordados. Gostaria de lhe encorajar a testar esta nova linguagem, e caso tenha dúvidas, não deixe de comentar abaixo. Sugira também novos artigos sobre TypeScript, estaremos avaliando cada pedido!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurando o Sublime Text para escrever textos em MarkDown</title>
      <link>https://tableless.github.io/hugo-public/configurando-o-sublime-text-para-escrever-textos-em-markdown/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/configurando-o-sublime-text-para-escrever-textos-em-markdown/</guid>
      <description>

&lt;p&gt;Neste artigo aprenderemos como configurar alguns plugins para o Sublime Text 2, para que você possa ter uma melhor experiência ao escrever textos em português com a linguagem de marcação de texto MarkDown, muito comum na criação de livros, artigos, tutoriais, e claro, dos arquivos README.md do GitHub.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-sublime-text-2&#34;&gt;Instalando o Sublime Text 2&lt;/h2&gt;

&lt;p&gt;Você ainda não usou o Sublime Text? Eu duvido! Mas se não usou, aqui está a receita para a sua instalação:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sudo add-apt-repository ppa:webupd8team/sublime-text-2
sudo apt-get update
sudo apt-get install sublime-text  
&lt;/pre&gt;

&lt;p&gt;Ou acesse &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;o site oficial do Sublime Text&lt;/a&gt;, clicar em download e instalar.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-dicionário-em-português&#34;&gt;Instalando o dicionário em português&lt;/h2&gt;

&lt;p&gt;Após muito &amp;#8220;fuçar&amp;#8221; eu encontrei um dicionário em português que atende completamente as minhas necessidades como escritor. Tenho usado ele nos meus livros e recomendo para você também, lembrando que existem alguns dicionários antigos que estão perdidos por aí. Para você não perder tempo, criei um repositório no github com os arquivos corretos.&lt;/p&gt;

&lt;p&gt;Para instalar o dicionário, primeiro acesse &lt;a href=&#34;https://github.com/danielschmitz/sublime_text_2_for_markdown&#34;&gt;este repositório&lt;/a&gt; e clique no botão &lt;code&gt;Download Zip&lt;/code&gt; (ou faça &lt;code&gt;git clone&lt;/code&gt; se for natural para você). Após fazer o download, copie a pasta &lt;code&gt;Languages&lt;/code&gt; para o seu diretório de configuração do Sublime Text, que depende do sistema operacional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows: %APPDATA%\Sublime Text 2&lt;/li&gt;
&lt;li&gt;Linux: ~/.config/sublime-text-2/Packages/&lt;/li&gt;
&lt;li&gt;Mac: ~/Library/Application Support/Sublime Text 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Após copiar a pasta Languages, volte ao Sublime Text e acesse  &lt;code&gt;View &amp;gt; Dictionary &amp;gt; Languages &amp;gt; pt_br &amp;gt; Portuguese(Brazilian)&lt;/code&gt;. Com o dicionário selecionado, use a tecla de atalho &lt;code&gt;F6&lt;/code&gt; para habilitar/desabilitar o spell check. As palavras que não estiverem no dicionário serão sublinhadas em vermelho, e pode-se usar o menu de contexto para correção.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-package-control&#34;&gt;Instalando o Package Control&lt;/h2&gt;

&lt;p&gt;O Package Control é o gerenciador de pacotes do Sublime Text. Para instalar ele, você deve acessar &lt;a href=&#34;https://packagecontrol.io/installation#st2&#34;&gt;https://packagecontrol.io/installation#st2&lt;/a&gt; e copiar todo texto que está na aba &amp;#8220;Sublime Text 2&amp;#8221;. Após copiar, vá ao Sublime Text, navegue até &lt;code&gt;View &amp;gt; Show Console&lt;/code&gt; e cole o texto no console que abre na parte inferior do Sublime. Após executar o comando, o Package Control é instalado e você deve reiniciar o editor. Talvez seja necessário reiniciar algumas vezes até o Package Control estabilizar.&lt;/p&gt;

&lt;h2 id=&#34;instalando-pacotes-essenciais&#34;&gt;Instalando pacotes essenciais&lt;/h2&gt;

&lt;p&gt;Para instalar um pacote, tecle &lt;code&gt;CTRL+SHIFT+P&lt;/code&gt; que é a tecla padrão do Sublime para executar comandos, e digite &amp;#8220;install package&amp;#8221; no menu de contexto. Aguarde alguns segundos e um novo menu cheio de pacotes será exibido. O primeiro que deve ser instalado é o &lt;code&gt;MarkDown Editing&lt;/code&gt;. Cuidado para não instalar Markdown Extended ao invés do Markdown Editing. Selecione-o e aguarde a instalação finalizar.&lt;/p&gt;

&lt;p&gt;Outro pacote necessário para instalação é o &lt;code&gt;Monokai Extended&lt;/code&gt;. Instale-o da mesma forma que fez com o pacote anterior.&lt;/p&gt;

&lt;h2 id=&#34;configuração&#34;&gt;Configuração&lt;/h2&gt;

&lt;p&gt;Agora vamos configurar nossos pacotes. Para isso, é necessário acessar &lt;code&gt;Preferences &amp;gt; Package Settings &amp;gt; MarkDown Editing &amp;gt; Markdown GFM Settings - USER&lt;/code&gt; e adicionar a seguinte configuração:&lt;/p&gt;

&lt;pre class=&#34;lang-json&#34;&gt;{
    &#34;color_scheme&#34;: &#34;Packages/Monokai Extended/Monokai Extended.tmTheme&#34;,
    &#34;draw_centered&#34;: true,
    &#34;wrap_width&#34;: 40,
    &#34;word_wrap&#34;: true,
    &#34;line_numbers&#34;: true
}
&lt;/pre&gt;

&lt;p&gt;Você pode alterar os parâmetros conforme a sua vontade. Nos parâmetros acima, já temos um visual semelhante a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/Captura-de-tela-de-2015-10-17-072103.png&#34; alt=&#34;Captura de tela de 2015-10-17 07:21:03&#34; width=&#34;1366&#34; height=&#34;768&#34; class=&#34;alignleft size-full wp-image-51761&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurações-extras&#34;&gt;Configurações extras&lt;/h2&gt;

&lt;p&gt;As configurações acima serão aplicadas somente aos arquivos com a extensão &lt;code&gt;.md&lt;/code&gt;. Para realizar algumas configurações globais, você deve editar abrir &lt;code&gt;Preferences &amp;gt; Settings - User&lt;/code&gt;, e pode adicionar os parâmetros que desejar, conforme o exemplo a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-json&#34;&gt;{
    &#34;color_scheme&#34;: &#34;Packages/Color Scheme - Default/Monokai.tmTheme&#34;,
    &#34;font_face&#34;: &#34;Ubuntu&#34;,
    &#34;font_size&#34;: 20,
    &#34;line_numbers&#34;: true,
    &#34;tab_size&#34;: 4,
    &#34;translate_tabs_to_spaces&#34;: true
}
&lt;/pre&gt;

&lt;h2 id=&#34;temas&#34;&gt;Temas&lt;/h2&gt;

&lt;p&gt;Existem diversos temas para serem instalados pelo Package Control. Um deles é o &lt;code&gt;Soda&lt;/code&gt;. Instale o package &lt;code&gt;Soda - Theme&lt;/code&gt; e após a instalação, volte ao &lt;code&gt;Settings - User&lt;/code&gt; e adicione a seguinte linha:&lt;/p&gt;

&lt;pre class=&#34;lang-json&#34;&gt;{
    ....conf iniciais
    &#34;translate_tabs_to_spaces&#34;: true,
   &lt;strong&gt; &#34;theme&#34;: &#34;Soda Dark.sublime-theme&#34;&lt;/strong&gt;
}
&lt;/pre&gt;

&lt;p&gt;Reinicie o Sublime Text 2 e pronto, temos uma configuração bem legal para editar arquivos Mark Down, veja:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/Captura-de-tela-de-2015-10-17-073140.png&#34; alt=&#34;Captura de tela de 2015-10-17 07:31:40&#34; width=&#34;1366&#34; height=&#34;768&#34; class=&#34;alignleft size-full wp-image-51763&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;outros-pacotes&#34;&gt;Outros pacotes&lt;/h2&gt;

&lt;p&gt;O sublime tem diversos packages úteis, vou deixar alguns a seguir que mais uso:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git &amp;#8211; Execute os comandos do git pelo ctrl+shift+p&lt;/li&gt;
&lt;li&gt;GitGutter &amp;#8211; Exibe as alterações de um arquivo git no editor&lt;/li&gt;
&lt;li&gt;Clipboard &amp;#8211; History &amp;#8211; History da área de transferência&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deixe nos comentários os pacotes que você usa.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tudo que você queria saber sobre Git e GitHub, mas tinha vergonha de perguntar</title>
      <link>https://tableless.github.io/hugo-public/tudo-que-voce-queria-saber-sobre-git-e-github-mas-tinha-vergonha-de-perguntar/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tudo-que-voce-queria-saber-sobre-git-e-github-mas-tinha-vergonha-de-perguntar/</guid>
      <description>

&lt;p&gt;Este artigo traz a você tudo que precisa saber para se tornar um desenvolvedor que possa dominar tanto o git, quanto o Github. Nosso objetivo é trazer os conhecimentos necessários para que você possa, a partir do zero, dominar os conceitos gerais do git, e usar o github para &amp;#8220;hospedar&amp;#8221; seus projetos pessoais e acompanhar outros projetos de seu interesse.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-git&#34;&gt;O que é git?&lt;/h2&gt;

&lt;p&gt;Git é um sistema de controle de versão de arquivos. Através deles podemos&amp;nbsp;desenvolver projetos&amp;nbsp;na qual diversas pessoas podem contribuir simultaneamente no mesmo, editando e criando novos arquivos e permitindo que os mesmos possam existir sem o risco de suas alterações serem sobrescritas.&lt;/p&gt;

&lt;p&gt;Se não houver um sistema de versão, imagine o caos entre duas pessoas abrindo o mesmo arquivo ao mesmo tempo. Uma das aplicações do git é justamente essa, permitir que um arquivo possa ser editado ao mesmo tempo por pessoas diferentes. Por mais complexo que isso seja, ele tenta manter tudo em ordem para evitar problemas para nós desenvolvedores.&lt;/p&gt;

&lt;p&gt;Outro fator importante do git (e essa é um dos seus diferenciais em relação ao svn &amp;#8211; caso vc o conheça) é a possibilidade de criar, a qualquer momento, vários &lt;code&gt;snapshots&lt;/code&gt; do seu projeto, ou como chamamos mais &amp;#8220;nerdmenete&amp;#8221;, branch. Suponha que o seu projeto seja um site html, e você deseja criar uma nova seção no seu código HTML, mas naquele momento você não deseja que estas alterações estejam disponíveis para mais ninguém, só para você. Isso é, você quer alterar o projeto (incluindo vários arquivos nele), mas ainda não quer que isso seja tratado como &amp;#8220;oficial&amp;#8221; para outras pessoas, então vc cria um branch (como se fosse uma cópia espelho) e então trabalha apenas nesse branch, até acertar todos os detalhes dele. Após isso, você pode fazer um merge de volta do seu branch até o projeto original. Veja bem, se tudo isso que você leu só ajudou a te confundir mais &amp;#8211; respire fundo &amp;#8211; e siga em frente. Com exemplos tudo fica melhor.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-github&#34;&gt;O que é github?&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; é um serviço web que oferece diversas funcionalidades extras aplicadas ao git. Resumindo, você poderá usar gratuitamente o github para hospedar seus projetos pessoais. Além disso, quase todos os projetos/frameworks/bibliotecas sobre desenvolvimento open source estão no github, e você pode acompanhá-los através de novas versões, contribuir informando bugs ou até mesmo enviando código e correções. Se você é desenvolvedor e ainda não tem github, você está atrasado e essa é a hora de correr atrás do prejuízo.&lt;/p&gt;

&lt;h2 id=&#34;instalando-git&#34;&gt;Instalando git&lt;/h2&gt;

&lt;p&gt;O git é um programa que pode ser instalado &lt;a href=&#34;http://git-scm.com/download/win&#34; target=&#34;_blank&#34;&gt;neste link&lt;/a&gt; para Windows, &lt;a href=&#34;http://git-scm.com/download/mac&#34; target=&#34;_blank&#34;&gt;neste&lt;/a&gt; para Mac, ou então através do comando &lt;code&gt;sudo apt-get install git&lt;/code&gt; para plataformas Linux/Debian, como o Ubuntu. Se você usa uma VM na nuvem, como o &lt;a href=&#34;http://c9.io&#34; target=&#34;_blank&#34;&gt;cloud9&lt;/a&gt; ou &lt;a href=&#34;https://koding.com/&#34; target=&#34;_blank&#34;&gt;koding&lt;/a&gt;, o git já estará disponível em sua linha de comando.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nossa metodologia é fazer com que você aprenda git já utilizando o github, então vamos a sua configuração!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;criando-a-conta-no-github&#34;&gt;Criando a conta no GitHub&lt;/h2&gt;

&lt;p&gt;O github não possui instalação, ele é um serviço, e caso você não tenha uma conta, chegou a hora de criá-la, &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;neste link&lt;/a&gt;. Após criar a conta, você verá um botão verde &lt;code&gt;+New Repository&lt;/code&gt; na qual poderá criar um repositório de acordo com a tela a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github.png&#34; alt=&#34;github&#34; width=&#34;750&#34; height=&#34;477&#34; class=&#34;alignleft size-full wp-image-51160&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nesta imagem estamos criando um repositório cujo nome é &lt;code&gt;site&lt;/code&gt;, de domínio público (podem ser criados reps privados pagando uma mensalidade), e com o arquivo &lt;code&gt;README.md&lt;/code&gt; embutido, que contém uma descrição do seu projeto. Para que possamos começar a entender como o git funciona, é fundamental criar um rep como este para os nossos testes.&lt;/p&gt;

&lt;p&gt;Após a criação do repositório, ele estará disponível no endereço &lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/site&lt;/code&gt;, onde &lt;code&gt;username&lt;/code&gt;é o login que você usou para se cadastrar. Acessando esta url temos a seguinte resposta:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_site.png&#34; alt=&#34;github_site&#34; width=&#34;1051&#34; height=&#34;780&#34; class=&#34;alignleft size-full wp-image-51163&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Temos muitas informações nesta tela, pois ela é a tela principal do seu projeto. Explicaremos algumas informações ao longo deste artigo, por enquanto repare apenas no botão &lt;code&gt;HTTPs Clone Url&lt;/code&gt; na parte inferior à direta. Esta URl será necessária para que possamos &amp;#8220;clonar&amp;#8221; este projeto em nosso ambiente de estudo (sua máquina windows, mac, linux ou a vm). Clique no botão de copiar URL e perceba que a seguinte URL está na área de transferência: &lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/site.git&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-git&#34;&gt;Configurando o git&lt;/h2&gt;

&lt;p&gt;Existem 2 pequenos passos para configurar o seu GIT para ter um acesso mais simplificado ao github. Aqui estaremos estabelecendo que, sempre que necessitar, você irá fornecer o seu login e senha ao GitHub. Existem meios para salvar a senha em local seguro, mas vamos pular esta etapa. Para abrir um terminal GIT no Windows, basta criar uma pasta no seu sistema e, nela, clicar com o botão direito do mouse e escolher &lt;code&gt;Git Bash Here&lt;/code&gt;. Em sistemas mac/linux você já está acostumado a usar o terminal/console, o git estará lá disponível. Neste artigo estaremos utilizando a máquina virtual cloud9, que você pode aprender a usá-la neste &lt;a href=&#34;http://tableless.com.br/programando-na-nuvem-com-o-cloud9/&#34; target=&#34;_blank&#34;&gt;artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Então, com o seu terminal git aberto, vamos digitar:&lt;/p&gt;

&lt;pre&gt;$ git config --global user.name &#34;YOUR NAME&#34;
$ git config --global user.email &#34;YOUR EMAIL ADDRESS&#34;
&lt;/pre&gt;

&lt;p&gt;Estas configurações ficam alocadas no arquivo &lt;code&gt;~/.gitconfig&lt;/code&gt;, onde o ~ é o seu diretório home. No Windows, ele fica em &lt;code&gt;c:\Usuarios\&amp;lt;username&amp;gt;\.gitconfig&lt;/code&gt;. Veja a figura a seguir com a minha configuração no cloud9.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_config.png&#34; alt=&#34;git_config&#34; width=&#34;300&#34; height=&#34;146&#34; class=&#34;alignleft size-medium wp-image-51167&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;vamos-clonar&#34;&gt;Vamos clonar!&lt;/h2&gt;

&lt;p&gt;Então o que temos até agora é o git configurado para utilizar o github e o projeto no github criado. Precisamos trazer este projeto para o nosso git, e este processo se chama &lt;code&gt;clonar&lt;/code&gt;. Então, quando você quiser começar um projeto utilizando git, você cria ele no github e clona na sua máquina. O comando para clonar o projeto é &lt;code&gt;git clone &amp;quot;url&amp;quot;&lt;/code&gt;, veja:&lt;/p&gt;

&lt;pre&gt;git clone https://github.com/&amp;lt;username&amp;gt;/site.git
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_clone.png&#34; alt=&#34;git_clone&#34; width=&#34;720&#34; height=&#34;223&#34; class=&#34;alignleft size-full wp-image-51172&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perceba que, ao fazer o git clone, o projeto é baixado para a sua máquina, e uma pasta com o nome do projeto é criada.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quer dizer que qualquer pessoa pode baixar o meu projeto? Sim, isso é natural, já que o seu repositório está público. Qualquer um pode clonar ele para si, mas eles não podem alterar os seus arquivos, isso não vai acontecer, exceto que você permita.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;comandos-iniciais-do-git&#34;&gt;Comandos iniciais do git&lt;/h2&gt;

&lt;p&gt;Com o repositório na sua máquina, vamos aprender 4 comandos iniciais que farão parte da sua vida a partir de agora:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add &amp;lt;arquivos...&amp;gt;&lt;/code&gt; Este comando adiciona o(s) arquivo(s) em um lugar que chamamos de INDEX, que funciona como uma área do git no qual os arquivos possam ser enviados ao Github. É importante saber que ADD não está adicionando um arquivo novo ao repositório, mas sim dizendo que o arquivo (sendo novo ou não) está sendo preparado para entrar na próxima revisão do repositório.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;comentário qualquer&amp;quot;&lt;/code&gt; Este comando realiza o que chamamos de &amp;#8220;commit&amp;#8221;, que significa pegar todos os arquivos que estão naquele lugar INDEX que o comando &lt;code&gt;add&lt;/code&gt; adicionou e criar uma revisão com um número e um comentário, que será vista por todos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt; Push (empurrar) é usado para publicar todos os seus commits para o github. Neste momento, será pedido a sua senha.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; Exibe o status do seu repositório atual &lt;/ul&gt;&lt;/p&gt;

&lt;h2 id=&#34;vamos-praticar&#34;&gt;Vamos praticar!&lt;/h2&gt;

&lt;p&gt;Chegou o momento de praticar um pouco o que vimos até agora, e com bastante calma para que você possa entender cada passo. Após clonar o seu projeto, crie o arquivo &lt;code&gt;index.html&lt;/code&gt; na pasta site que é o seu repositório git. Após criar o arquivo, execute o comando &lt;code&gt;git status&lt;/code&gt;. A resposta é semelhante a figura a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_touch_index.png&#34; alt=&#34;git_touch_index&#34; width=&#34;628&#34; height=&#34;284&#34; class=&#34;alignleft size-full wp-image-51179&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ou seja, o comando &lt;code&gt;git status&lt;/code&gt; nos trouxe várias informações, que iremos ignorar a princípio, exceto pelo &lt;code&gt;Untracked files&lt;/code&gt;, dizendo que existe um arquivo que não está sendo &amp;#8220;mapeado&amp;#8221; pelo git. Para preparar este arquivo para o seu versionamento, usamos o comando &lt;code&gt;git add&lt;/code&gt;, veja:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_add.png&#34; alt=&#34;git_add&#34; width=&#34;600&#34; height=&#34;272&#34; class=&#34;alignleft size-full wp-image-51180&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora temos o nosso arquivo index.html no INDEX do repositório, ou se você quiser pensar: &amp;#8220;preparado para um commit&amp;#8221;. Para commitar este arquivo, usamos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_commit.png&#34; alt=&#34;git_commit&#34; width=&#34;760&#34; height=&#34;248&#34; class=&#34;alignleft size-full wp-image-51182&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após &amp;#8220;commitar&amp;#8221; o arquivo, ele já está presente no nosso repositório local, tanto que realizamos o comando &lt;code&gt;git status&lt;/code&gt; novamente e ele retornou que não havia nada de novo no projeto. Perceba agora que, mesmo recarregando o projeto no github, nada muda. Ou seja, estas mudanças até agora foram locais, você pode realizar várias operações antes de publicá-las no github. Para publicar, usamos o comando &lt;code&gt;git push&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_push.png&#34; alt=&#34;git_push&#34; width=&#34;600&#34; height=&#34;255&#34; class=&#34;alignleft size-full wp-image-51184&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após realizar o git push podemos ver no site github as mudanças realizadas no projeto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_site2.png&#34; alt=&#34;github_site2&#34; width=&#34;812&#34; height=&#34;552&#34; class=&#34;alignleft size-full wp-image-51185&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Desta forma, aprendemos os 4 comandos mais básicos do git, e com ele podemos começar a compreender como funciona o processo de versionamento de arquivos com git e github.&lt;/p&gt;

&lt;h3 id=&#34;errei-a-mensagem-do-commit-como-arrumo&#34;&gt;Errei a mensagem do commit, como arrumo?&lt;/h3&gt;

&lt;p&gt;Imagine que você tenha errado a mensagem que escreveu no commit ou simplesmente queira melhorar a descrição do seu trabalho. Você já comitou a mensagem mas ainda não fez o push das suas modificações para o servidor. Nesse caso você usa a flag &lt;code&gt;--amend&lt;/code&gt;. Fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ git commit --amend&lt;/pre&gt;
    

&lt;p&gt;O &lt;code&gt;git commit --amend&lt;/code&gt; modifica a mensagem do commit mais recente, ou seja, o último commit feito por você no projeto. Além de você mudar a mensagem do commit, você consegue adicionar arquivos que você se esqueceu ou retirar arquivos comitados por engano. O git cria um commit totalmente novo e corrigido.&lt;/p&gt;

&lt;h2 id=&#34;cadê-o-git-pull&#34;&gt;Cadê o git pull?&lt;/h2&gt;

&lt;p&gt;Ainda existe um comando importante neste processo, que é o &lt;code&gt;git pull&lt;/code&gt;. Ele é usado para trazer todas as modificações que estão no github para o seu projeto local. Isso é vital quando existem projetos mantidos por mais de uma pessoa, ou se você possui duas máquinas e precisa manter a sincronia entre elas. Supondo que você possui uma máquina no trabalho e outra em casa. Ambas tem o repositório local ligado ao github. Quando você executar um &lt;code&gt;git push&lt;/code&gt; em uma das máquinas, terá que realizar um &lt;code&gt;git pull&lt;/code&gt; na outra.&lt;/p&gt;

&lt;p&gt;Para exemplificar, vamos alterar o arquivo README.md diretamente no github. Isso é possível clicando no arquivo e depois clicando no ícone para edição, conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_edit.png&#34; alt=&#34;github_edit&#34; width=&#34;935&#34; height=&#34;356&#34; class=&#34;alignleft size-full wp-image-51241&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após clicar em edit, adicione algum texto, forneça uma mensagem de commit e clique no botão &amp;#8220;Commit Changes&amp;#8221;. Com isso, uma nova revisão no seu projeto é criada, mas como ela foi gerada no github, o seu projeto local está desatualizado. Para atualizar o seu projeto, use &lt;code&gt;git pull&lt;/code&gt;, e perceba que o arquivo README.md é atualizado de acordo com a sua última revisão, semelhante a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git-pull.png&#34; alt=&#34;git-pull&#34; width=&#34;520&#34; height=&#34;285&#34; class=&#34;alignleft size-full wp-image-51242&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;melhorando-o-conceito-do-comando-git-add&#34;&gt;Melhorando o conceito do comando git add&lt;/h2&gt;

&lt;p&gt;Possivelmente você imaginou que o comando &lt;code&gt;git add&lt;/code&gt; é usado para novos arquivos, mas isso não é verdade. O comando &lt;code&gt;add&lt;/code&gt; é usado para adicionar qualquer alteração de arquivo ao INDEX do git, que é uma área especial onde os arquivos estão sendo preparados para o commit. Quando usamos &lt;code&gt;add&lt;/code&gt;, estamos dizendo que o arquivo estará adicionando ao próximo commit, quando este for realizado. Isso é necessário porque nem sempre queremos que todos os arquivos que alteramos sejam comitados.&lt;/p&gt;

&lt;p&gt;Vamos a um exemplo simples, adicionando o seguinte código no arquivo index.html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
    

&lt;p&gt;Após salvar este modelo html, o comando git status irá apresentar:&lt;/p&gt;

&lt;pre&gt;modified:   index.html
&lt;/pre&gt;
    

&lt;p&gt;Para adicionar o arquivo e prepará-lo para o commit, usamos &lt;code&gt;git add index.html&lt;/code&gt;. Desta forma, ele está pronto para usarmos o comando &lt;code&gt;git commit&lt;/code&gt;, o que não faremos agora. Antes disso, altere novamente o arquivo e adicione algum texto entre as tags body, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
Esse é meu site
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
    

&lt;p&gt;Após alterar o arquivo, temos a seguinte situação:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adicionamos o conteúdo html no arquivo index.html&lt;/li&gt;
&lt;li&gt;Realizamos &lt;code&gt;git add index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Alteramos index.html e adicionamos o texto entre as tags body
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Neste momento, faça: &lt;code&gt;git commit -m &amp;quot;Alteração no arquivo index.html&amp;quot;&lt;/code&gt;, e após isso, faça: &lt;code&gt;git push&lt;/code&gt;. Analise agora no github se a sua alteração na tag body está visível. Ela não estará. Mas porque isso aconteceu? Quando usamos o comando &lt;code&gt;git add&lt;/code&gt;, aquela alteração no body ainda não tinha sido escrita, então ela não estará pronta até que você faça novamente o comando &lt;code&gt;git add&lt;/code&gt;. Em termos técnicos, a segunda alteração que fez ainda não está na INDEX do repositório. Como tarefa, faça novamente &lt;code&gt;git add index.html&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt; e &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;trabalhando-com-branches&#34;&gt;Trabalhando com branches&lt;/h2&gt;

&lt;p&gt;Branches e mergers sempre foram os pesadelos de qualquer gerenciador de versão (ok, do svn&amp;#8230;). No git, o conceito de branch tornou-se algo muito simples e fácil de usar. Mas quando que temos que criar um branch? Imagine que o seu site está pronto, tudo funcionando perfeitamente, mas surge a necessidade de alterar algumas partes dele como forma de melhorá-lo. Além disso, você precisa manter estas alterações tanto no computador de casa quanto do trabalho. Com isso temos um problema, se você começa a alterar os arquivos em casa, para na metade da implementação, e precisa terminar no trabalho, como você iria comitar tudo pela metade e deixar o site incompleto?&lt;/p&gt;

&lt;p&gt;Para isso existe o conceito de branch, que é justamente ramificar o seu projeto em 2, como se cada um deles fosse um repositório, e depois juntá-lo novamente. Voltando ao github, perceba o detalhe da imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/master.png&#34; alt=&#34;master&#34; width=&#34;821&#34; height=&#34;344&#34; class=&#34;alignleft size-full wp-image-51249&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sem saber, você já está em um branch, que chamamos de master. Perceba também que, sempre que usávamos &lt;code&gt;git status&lt;/code&gt;, o nome do branch é exibido, e sempre que comitávamos ou fazíamos o push, o mesmo aparecia. Ou seja, até este momento fizemos todas as alterações no master. Você pode criar um branch no github ou em linha de comando. Inicialmente, vamos pelo github, criando o branch &amp;#8220;new_menu&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/new_branch.png&#34; alt=&#34;new_branch&#34; width=&#34;468&#34; height=&#34;328&#34; class=&#34;alignleft size-full wp-image-51250&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Criamos o branch new_menu, e para que possamos trabalhar nele, usamos o comando &lt;code&gt;git checkout new_menu&lt;/code&gt;. No primeiro momento que você cria este branch no github, é necessário realizar o comando &lt;code&gt;git pull&lt;/code&gt; no seu projeto para que ele possa saber que este branch foi criado. Após realizar &lt;code&gt;git pull&lt;/code&gt;, pode-se alterar para o novo branch, conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/new_menu.png&#34; alt=&#34;new_menu&#34; width=&#34;604&#34; height=&#34;299&#34; class=&#34;alignleft size-full wp-image-51252&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Neste momento, estamos no branch &lt;code&gt;new_menu&lt;/code&gt;, e tudo que fizermos agora será pertencente a ele. Caso haja necessidade de voltar ao branch master, basta realizar o comando &lt;code&gt;git checkout master&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Atenção, o comando &lt;code&gt;checkout&lt;/code&gt; do git não é o mesmo do checkout do svn, caso você o conheça. Ambos tem sentidos totalmente diferentes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então, entando no branch new_menu, vamos adicionar um simples menu na página:&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;ldquo;UTF-8&amp;rdquo;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;body&amp;gt;
    Meu Site&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;ul&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;index.html&amp;quot;&amp;amp;gt;Home&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;sobre.html&amp;quot;&amp;amp;gt;Sobre&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;contato.html&amp;quot;&amp;amp;gt;Contato&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
&amp;amp;lt;/ul&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Após criar o menu, certifique-se de estar no branch new_menu e faça o commit, conforme a figura a seguir.

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/new_menu_commit.png&amp;quot; alt=&amp;quot;new_menu_commit&amp;quot; width=&amp;quot;716&amp;quot; height=&amp;quot;536&amp;quot; class=&amp;quot;alignleft size-full wp-image-51254&amp;quot; /&amp;gt;

Agora temos algumas modificações no branch new\_menu, e podemos trabalhar nesse branch por quanto tempo for necessário, já que o master está intacto. Aqui temos uma funcionalidade interessante, que se destaca em relação as outras ferramentas de versionamento. Suponha que, no meio do seu desenvolvimento do menu, surge a necessidade de resolver um bug crítico no master, algo como &amp;amp;#8220;está faltando o h1 no título do seu site&amp;amp;#8221;&amp;amp;#8230;. Ou seja, estamos no branch new\_menu e precisamos alterar o master. Para isso, use o comando `git checkout master`. Ao fazer isso, retornamos ao master e aquele menu que criamos não está mais presente, conforme a figura a seguir.

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/back_to_master.png&amp;quot; alt=&amp;quot;back_to_master&amp;quot; width=&amp;quot;624&amp;quot; height=&amp;quot;686&amp;quot; class=&amp;quot;alignleft size-full wp-image-51255&amp;quot; /&amp;gt;

É claro que não perdemos o menu, ele está apenas no branch new_menu. Quando retornarmos a ele, voltará. Agora altere o título do site, incluindo o h1, veja:

&amp;lt;pre class=&amp;quot;lang-html&amp;quot;&amp;gt;&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;ldquo;UTF-8&amp;rdquo;&amp;gt;
    &amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Meu Site&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Após alterar, faça commit e o push! Veja:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/git_push2.png&amp;quot; alt=&amp;quot;git_push2&amp;quot; width=&amp;quot;687&amp;quot; height=&amp;quot;529&amp;quot; class=&amp;quot;alignleft size-full wp-image-51256&amp;quot; /&amp;gt;

Agora que resolvemos o problema do título, podemos voltar ao new_menu: `git checkout new_menu`. Após realizar este comando, temos o menu de volta no arquivo index.html, mas veja que o título não possui a tag H1. Isso acontece que estamos em outro branch. Tudo que acontece no master, fica no master. Tudo que acontece no new\_menu, fica no new\_menu

## Merge com conflitos

Se desejar trazer o título do master para o new_menu, devemos fazer uma operação chamada `merge`, que irá juntar um código no outro. Então, estando no branch new_menu, e querendo trazer uma alteração do master para este branch, precisamos realizar o seguinte comando: `git merge master`. Caso existam alterações nas mesmas linhas entre mesmos arquivos, um conflito será gerado, como no exemplo a seguir:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/conflict.png&amp;quot; alt=&amp;quot;conflict&amp;quot; width=&amp;quot;595&amp;quot; height=&amp;quot;616&amp;quot; class=&amp;quot;alignleft size-full wp-image-51259&amp;quot; /&amp;gt;

Este é um exemplo de conflito que podo ocorrer quando realizamos um merge, indicado em `1`. Perceba que o código html possui uma definição entre dois blocos, o primeiro, em `2` mostra como é o código do branch new_menu, e o segundo bloco, em `3`, mostra como é o código no branch master. Edite o arquivo repassando para a seguinte forma:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge2.png&amp;quot; alt=&amp;quot;merge2&amp;quot; width=&amp;quot;578&amp;quot; height=&amp;quot;613&amp;quot; class=&amp;quot;alignleft size-full wp-image-51260&amp;quot; /&amp;gt;

Ou seja, ajustamos os dois blocos, como se fosse um merge manual. Após resolver o conflito, vamos prepará-lo para o commit no branch new_menu, com o comando `git add`. Veja:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge3.png&amp;quot; alt=&amp;quot;merge3&amp;quot; width=&amp;quot;779&amp;quot; height=&amp;quot;105&amp;quot; class=&amp;quot;alignleft size-full wp-image-51261&amp;quot; /&amp;gt;

Ou seja, resolvemos o conflito &amp;amp;#8220;na mão&amp;amp;#8221; e depois comitamos normalmente.

## Merge sem conflitos

Quando não alteremos a mesma linha de um arquivo em branches diferentes, conseguimos realizar um merge sem ocasionar conflitos. Isso pode ser notado ao trazermos o menu do branch new_menu para o master, da seguinte forma:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge4.png&amp;quot; alt=&amp;quot;merge4&amp;quot; width=&amp;quot;585&amp;quot; height=&amp;quot;652&amp;quot; class=&amp;quot;alignleft size-full wp-image-51262&amp;quot; /&amp;gt;

Se não houver conflitos, basta realizar um commit normal para confirmar o merge.

## Vendo branches e merges

O github possui uma ferramenta gráfica para exibir os branches e merges do seu projeto. Clique no ícone em forma de gráfico no menu à direita do site e clique na aba Network, para se ter um resultado semelhante a figura a seguir:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/graph.png&amp;quot; alt=&amp;quot;graph&amp;quot; width=&amp;quot;1027&amp;quot; height=&amp;quot;446&amp;quot; class=&amp;quot;alignleft size-full wp-image-51265&amp;quot; /&amp;gt;

## Lendo mais

Você pode ler mais sobre git e entender mais sobre controles de versão, nesses artigos do Tableless:

  * &amp;lt;a href=&amp;quot;http://tableless.com.br/alguns-comandos-git/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Comandos Iniciais do Git&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/slides-devs-10-git/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Apresentações sobre GIT&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/iniciando-no-git-parte-1/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Iniciando com GIT &amp;amp;#8211; Parte 1&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/iniciando-no-git-parte-2/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Iniciando com GIT &amp;amp;#8211; Parte 2&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/git-com-interface-grafica/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git com Interface Gráfica&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Programando na nuvem com o cloud9</title>
      <link>https://tableless.github.io/hugo-public/programando-na-nuvem-com-o-cloud9/</link>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/programando-na-nuvem-com-o-cloud9/</guid>
      <description>

&lt;p&gt;Durante muito tempo, tive a necessidade de programar em qualquer lugar – seja em casa, trabalho ou em uma viagem. Sempre consegui suprir essa necessidade através de um terminal/console – nada que um ssh não resolvesse. Mas após conhecer a plataforma de desenvolvimento &amp;#8220;cloud9&amp;#8221; muitas funcionalidades foram otimizadas e, após usá-la por mais de 6 meses, tive que compartilhar com todas as suas vantagens.&lt;/p&gt;

&lt;p&gt;O cloud9 é basicamente uma IDE de desenvolvimento 100% na Web, que possui diversas tecnologias previamente instaladas: &lt;em&gt;php, mysql, python, rails, ruby, node,&lt;/em&gt; entre outras. Através do seu navegador é possível entrar na IDE e começar a programar na sua linguagem preferida, executar e debugar os programas criados. Além disso, você pode instalar outras tecnologias através do &lt;strong&gt;apt-get&lt;/strong&gt;, já que você está operando, na verdade, um sistema Linux – Ubuntu.&lt;/p&gt;

&lt;h1 id=&#34;quanto-custa&#34;&gt;Quanto custa?&lt;/h1&gt;

&lt;p&gt;O cloud9 é gratuito se você desenvolver sozinho e não necessitar de recursos avançados. Após 6 meses utilizando o cloud9, ainda não tive a necessidade de migrar para um plano pago. Você também poderá testar o quanto quiser no plano free e poderá migrar para algo melhor, caso precise.&lt;/p&gt;

&lt;p&gt;O plano gratuito é baseado em um conceito chamado &lt;strong&gt;sessão&lt;/strong&gt;, onde as páginas que você acessa, estão disponíveis enquanto você estiver logado. Quando você sair ou após algumas horas sem logar, a sua sessão é fechada e as páginas que antes poderiam ser acessadas através de uma URL, não estarão mais disponíveis. O que isso significa? Se você criar uma página web para ser exibida à outra pessoa externa (um cliente por exemplo), esta página poderá não estar acessível no momento em que o seu cliente acessá-la. Lembre-se que o cloud9 é uma ferramenta de desenvolvimento web, e não um servidor de aplicações. Use-o para desenvolver e/ou aprender uma tecnologia; para deploy, certamente, você usará um outro servidor.&lt;/p&gt;

&lt;h1 id=&#34;recursos&#34;&gt;Recursos&lt;/h1&gt;

&lt;p&gt;Vamos enumerar a seguir os recursos disponíveis do cloud9:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Linguagens suportadas&lt;/strong&gt;: Apache httpd (PHP), Node, Python, Ruby, Rails, Go, CofeeScript, Julia, Mocha, Shell script;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Banco de dados&lt;/strong&gt;: MySql, MongoDB, CouchDB, PostgreSQL, Redis, SQLite;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frameworks&lt;/strong&gt;:     AngularJS, Bootstrap, Django, Express, Ghost, Hadoop, Ionic, jQuery, Jekyll, KoaJS, Laravel, Meteor, Symfony, Drupal, Joomla, WordPress;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Browser&lt;/strong&gt;: Chrome, IE, Firefox, Opera e outros – Existem diversos browsers para que você possa testar a sua aplicação sem a necessidade de instalar cada um deles;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terminal/console/bash&lt;/strong&gt;: pode-se abrir um terminal e executar comandos que você usaria em um terminal linux. Pode-se utilizar apt-get para instalar outros programas;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recursos da IDE&lt;/strong&gt;: Além de dezenas de linguagens suportadas, os mesmos recursos de uma IDE comum estão disponíveis na IDE virtual. Funcionalidades como complementação de código, pular para definição, busca por classes e refatoração estão disponíveis. A IDE lembra muito o sublime text, com dezenas de recursos como temas, split view, alterar cores e definir macros, snippets. A IDE possui recursos do zen coding também;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debugger&lt;/strong&gt;: É possível debugar Javascript. Outras linguagens não são suportadas, infelizmente;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Atalhos&lt;/strong&gt;: Pode-se utilizar os atalhos do teclado para operar a IDE. Lembra do poderoso CTRL+P do Sublime Text? Ele está presente aqui também! É possísvel, por exemplo, emular o VIM para edição, ou emular outra editor como o emacs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;como-criar-uma-conta-no-cloud9&#34;&gt;Como criar uma conta no cloud9&lt;/h1&gt;

&lt;p&gt;Acesse a url &lt;a href=&#34;https://c9.io/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://c9.io/&#34;&gt;https://c9.io/&lt;/a&gt;&lt;/a&gt; e clique no botão SIGN UP, preenchendo o formulário com o seu login, nome, senha e e-mail. Após criar a conta, clique no link “&lt;a class=&#34;dashboardLink&#34; href=&#34;https://c9.io/dashboard.html&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Go to your dashboard&lt;/a&gt;” e clique no recém criado &lt;em&gt;workspace&lt;/em&gt; (área de trabalho). Quando você iniciar o workspace “demo-project”, uma área de trabalho conforme a figura a seguir é criada:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/AAEAAQAAAAAAAAa1AAAAJDMwYTdiNWNjLTM1NmQtNDFlMy05YWMyLWYzMmNhZTViOWM1NA.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51096&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/AAEAAQAAAAAAAAa1AAAAJDMwYTdiNWNjLTM1NmQtNDFlMy05YWMyLWYzMmNhZTViOWM1NA.png&#34; alt=&#34;AAEAAQAAAAAAAAa1AAAAJDMwYTdiNWNjLTM1NmQtNDFlMy05YWMyLWYzMmNhZTViOWM1NA&#34; width=&#34;800&#34; height=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Em 1, temos a área destinada a abrir arquivos e navegadores, conforme a necessidade. Pode-se, inclusive, “desgrudar” a aba da barra e arrastá-la para o canto da tela, forma a produzir uma nova área de abas. Em 2 temos a árvore de arquivos do seu &lt;em&gt;workspace&lt;/em&gt;. Perceba que temos pastas “PHP”, “Ruby” etc. Estas pastas apenas indicam que podemos trabalhar com diversas tecnologias ao mesmo tempo. Não é necessário, por exemplo, colocar todos os seus arquivos PHP na pasta. Em 3 temos um menu horizontal com diversas opções, dentre elas o botão “run”, usado para executar projetos e arquivos. Em 4 temos algumas configurações em relação ao tema, layout entre outras opções.&lt;/p&gt;

&lt;h1 id=&#34;testando-o-cloud9&#34;&gt;Testando o cloud9&lt;/h1&gt;

&lt;p&gt;Após a instalação, vamos testar um arquivo PHP já existente no workspace. Para isso, abra a pasta “php” e clique duas vezes no arquivo index.php. Ele será aberto como uma aba na IDE. Após abrir o arquivo, você verá algo do tipo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/2015-09-03-19_47_05-Email.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51097&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/2015-09-03-19_47_05-Email.png&#34; alt=&#34;2015-09-03 19_47_05-Email&#34; width=&#34;885&#34; height=&#34;442&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após o apache iniciar, uma URL surge na qual você pode clicá-la. Com isso, uma nova aba será aberta e você poderá conferir o resultado do código PHP gerado. Como tarefa, crie um novo arquivo na pasta PHP chamado “phpinfo.php”, e adicione o seguinte conteúdo:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
phpinfo();
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/AAEAAQAAAAAAAAYLAAAAJDFmZGM4MDllLWViMTYtNDAyOC1iZDY0LTc3OTQ3NDM0NWViNA.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51098&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/AAEAAQAAAAAAAAYLAAAAJDFmZGM4MDllLWViMTYtNDAyOC1iZDY0LTc3OTQ3NDM0NWViNA.png&#34; alt=&#34;AAEAAQAAAAAAAAYLAAAAJDFmZGM4MDllLWViMTYtNDAyOC1iZDY0LTc3OTQ3NDM0NWViNA&#34; width=&#34;800&#34; height=&#34;458&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;utilizando-o-console-bash&#34;&gt;Utilizando o console/bash&lt;/h1&gt;

&lt;p&gt;Na parte inferior da IDE existe uma aba chamada _bash,_ a qual você pode utilizar para realizar as mais diferentes ações. A maioria dos comandos Linux que você utiliza em uma shell no seu computador também pode ser usado aqui, conforme o exemplo a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/AAEAAQAAAAAAAANpAAAAJGRmODIzMTQ5LTg2NTgtNDliMC04NDAyLTc5Njk1ZTk4MGRmYg.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51099&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/AAEAAQAAAAAAAANpAAAAJGRmODIzMTQ5LTg2NTgtNDliMC04NDAyLTc5Njk1ZTk4MGRmYg.png&#34; alt=&#34;AAEAAQAAAAAAAANpAAAAJGRmODIzMTQ5LTg2NTgtNDliMC04NDAyLTc5Njk1ZTk4MGRmYg&#34; width=&#34;800&#34; height=&#34;638&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;diversas-tecnologias-prontas-para-uso&#34;&gt;Diversas tecnologias prontas para uso&lt;/h1&gt;

&lt;p&gt;Uma das vantagens do cloud9, além de você ter uma IDE nativa em qualquer lugar do mundo (basta apenas ter acesso à Internet), é poder utilizar diversas tecnologias prontas para uso. Por exemplo, enjoou do PHP e quer testar o Rails? Basta abrir o terminal e criar o seu projeto:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/AAEAAQAAAAAAAALfAAAAJDg2ZTA0ZTQyLWIwMjctNGVjMi1iNWFjLWUzM2FkZmFjZTQ5NQ.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51100&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/AAEAAQAAAAAAAALfAAAAJDg2ZTA0ZTQyLWIwMjctNGVjMi1iNWFjLWUzM2FkZmFjZTQ5NQ.png&#34; alt=&#34;AAEAAQAAAAAAAALfAAAAJDg2ZTA0ZTQyLWIwMjctNGVjMi1iNWFjLWUzM2FkZmFjZTQ5NQ&#34; width=&#34;630&#34; height=&#34;367&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;para-saber-mais&#34;&gt;Para saber mais:&lt;/h1&gt;

&lt;p&gt;O cloud9 tem uma boa documentação neste endereço:&lt;a href=&#34;https://docs.c9.io/v1.0/docs&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://docs.c9.io/v1.0/docs&#34;&gt;https://docs.c9.io/v1.0/docs&lt;/a&gt;&lt;/a&gt;. Caso tenha alguma dúvida, deixe um comentário!&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Você conhece o Framework brasileiro Maestro?</title>
      <link>https://tableless.github.io/hugo-public/voce-conhece-o-framework-brasileiro-maestro/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/voce-conhece-o-framework-brasileiro-maestro/</guid>
      <description>

&lt;p&gt;Aqui em nossa Universidade tivemos o privilégio de poder construir um framework quase que do zero, adaptado inicialmente às nossas necessidades. Tínhamos como desafio criar uma ERP acadêmica, caminho este que temos percorrido desde 2002. São quase 13 anos de muita experiência e dedicação, e neste ano de 2015 estamos contribuindo (ou tentando) disponibilizando o framework para a comunidade. Sabemos que não basta apenas disponibilizar o código fonte, mas precisamos também criar artigos e prover suporte para que todos possam se beneficiar deste framework.&lt;/p&gt;

&lt;h2 id=&#34;vamos-então-falar-um-pouco-do-maestro-framework&#34;&gt;Vamos então falar um pouco do Maestro Framework&lt;/h2&gt;

&lt;p&gt;O Maestro é um framework MVC em PHP (5.4 ou superior). Suporta os bancos de dados Oracle, Mysql, PostgreSQL, Sqlite. Ele é compatível com o Firefox/Safari/Chrome. A principal característica do framework é que ele foi concebido para o desenvolvimento de software exclusivamente. Se você pretende criar um blog ou um site, existem frameworks melhores por aí. Quando falamos em software, estamos abordando a criação de formulários, a entrada de dados, o processamento deles e posteriormente a sua saída seja em forma de relatórios (PDF) ou gráficos. Estamos sempre voltados a criação de software, pois é a nossa necessidade básica atualmente.&lt;/p&gt;

&lt;h2 id=&#34;quer-ver-uma-demo&#34;&gt;Quer ver uma demo!&lt;/h2&gt;

&lt;p&gt;É claro que quando apresentamos uma tecnologia nova, é melhor dar uma &amp;#8220;espiada&amp;#8221; no seu funcionamento antes de partir para qualquer informação mais profunda. Vou deixar dois links a seguir para que você possa acessar e ver:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.danielschmitz.com.br/maestro/index.php/guia/main&#34;&gt;http://www.danielschmitz.com.br/maestro/index.php/guia/main&lt;/a&gt; Este é um guia que criamos com diversas informações sobre o framework. Você pode consultá-lo sempre que quiser. Se for seu desejo continuar a estudar o framework, este guia contém informações importantes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.danielschmitz.com.br/maestro/index.php/exemplos/main&#34;&gt;http://www.danielschmitz.com.br/maestro/index.php/exemplos/main&lt;/a&gt; Aqui temos diversos exemplos tanto de componentes quanto de fluxo e utilidades em geral. Alguns exemplos contém erros e estamos empenhados em saná-los.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;github-instalação&#34;&gt;Github &amp;amp; Instalação&lt;/h2&gt;

&lt;p&gt;Estamos exportando o framework para o Github. Inicialmente ele estava alocado no SVN da nossa instituição e sabemos que ele deve estar no Github para uma melhor distribuição do código. O endereço é:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/frameworkmaestro/maestro/releases/tag/v1.0&#34;&gt;https://github.com/frameworkmaestro/maestro/releases/tag/v1.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para executar o framework no seu computador, basta fazer o download do zip e colocar a pasta &lt;em&gt;maestro&lt;/em&gt; no seu diretório web. Também pode-se clonar o projeto diretamente do master, caso deseje.&lt;/p&gt;

&lt;p&gt;Neste artigo estamos usando o WAMP SERVER para facilitar, então basta baixar o Maestro e colocá-lo na pasta &lt;strong&gt;c:\wamp\www,&lt;/strong&gt; conforme a imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/004.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-48348&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/004.png&#34; alt=&#34;004&#34; width=&#34;522&#34; height=&#34;460&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com o maestro no lugar certo, basta acessar:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost/maestro/&#34;&gt;http://localhost/maestro/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para ver o mesmo guia online que disponibilizei no início do artigo. Se quiser ver os exemplos diretamente da sua instalação, basta acessar:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost/maestro/index.php/exemplos/main&#34;&gt;http://localhost/maestro/index.php/exemplos/main&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se tudo funcionou, estamos prontos para começar a entender melhor o framework, no qual veremos mais informações no próximo artigo! Qualquer dificuldade ou dúvida, comente!&lt;/p&gt;

&lt;p&gt;Até a próxima pessoal!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>