<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gabriel Prates on Tableless</title>
    <link>https://tableless.github.io/hugo-public/author/gabriel-prates/index.xml</link>
    <description>Recent content in Gabriel Prates on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/author/gabriel-prates/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Conversão de tipos em JavaScript</title>
      <link>https://tableless.github.io/hugo-public/conversao-de-tipos-em-javascript/</link>
      <pubDate>Mon, 05 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/conversao-de-tipos-em-javascript/</guid>
      <description>

&lt;p&gt;Um dia desses eu recebi um quebra-gelo no Telegram, com o seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Number(null);   // 0
null == 0;  // true né?
&lt;/pre&gt;

&lt;p&gt;De cara eu pensei que seria &lt;code&gt;false&lt;/code&gt;, mas fiz questão de rodar no console e ver no que dava. Claro que deu &lt;code&gt;false&lt;/code&gt;. Mesmo assim, quis entender o motivo de &lt;code&gt;Number(null)&lt;/code&gt; retornar `` e fui procurar na &lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-type-conversion&#34;&gt;documentação&lt;/a&gt; do ECMAScript 6, ou ECMAScript 2015.&lt;/p&gt;

&lt;p&gt;O JavaScript, ou ECMAScript, tem um conjunto de operações abastratas que ocorrem por baixo dos panos. Dentre estas operações, temos as conversões de tipos (&lt;em&gt;Types Conversions&lt;/em&gt;), que é executada sempre que necessário &amp;#8211; que é justamente o caso do &lt;code&gt;Number(null)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Existem várias operações abstratas de conversão de tipos em JS, mas vou abordar apenas as mais comuns.&lt;/p&gt;

&lt;h3 id=&#34;toprimitive&#34;&gt;ToPrimitive&lt;/h3&gt;

&lt;p&gt;Praticamente tudo em JS é tratado como um objeto, então a conversão &lt;em&gt;ToPrimitive&lt;/em&gt; transforma o &lt;em&gt;input&lt;/em&gt; para o seu devido tipo primitivo, isto é, retorna o valor sem ser um objeto. Talvez seja um pouco óbvio e muito comum, mas é interessante ver no console. Primeiro vejamos os tipos primitivos:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// Tipos primitivos
String(&#39;foo&#39;);      // &#39;foo&#39;
Number(2016);       // 2016
Boolean(true);      // true
&lt;/pre&gt;

&lt;p&gt;Agora, já que temos objetos pra quase tudo em JS, veja o retorno ao rodar no console do Chromium/Chrome:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// Tratando como objetos
new String(&#39;foo&#39;);
// String {0: &#34;f&#34;, 1: &#34;o&#34;, 2: &#34;o&#34;, length: 3, [[PrimitiveValue]]: &#34;foo&#34;}

new Number(2016);
// Number {[[PrimitiveValue]]: 2016}

new Boolean(false);
// Boolean {[[PrimitiveValue]]: false}
&lt;/pre&gt;

&lt;p&gt;Veja que os objetos sempre guardam o valor primitivo, que é retornado por baixo dos panos quando precisamos utilizar o valor para alguma outra operação, como por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var ano = new Number(2016);
ano + 1; // 2017

var str = new String(&#39;foo&#39;);
str.concat(&#39; bar&#39;); // &#39;foo bar&#39;
&lt;/pre&gt;

&lt;p&gt;Para converter valores do tipo &lt;code&gt;Object&lt;/code&gt;, é feita uma análise de qual o valor primitivo do objeto, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// `Object(2010)` retorna o valor primitivo do objeto `Number`,
// nesse caso, 2010
Object(2010) + 6;   // 2016

// `Object(&#39;foo&#39;)` retorna o valor primitivo do objeto `String`,
// nesse caso, &#39;foo&#39;
Object(&#34;foo&#34;).concat(&#39; bar&#39;);   // &#39;foo bar&#39;

// `Object(true)` retorna o valor primitivo do objeto `Boolean`,
// nesse caso, true
Object(true) &amp;&amp; false;  // false
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;tonumber&#34;&gt;ToNumber&lt;/h3&gt;

&lt;p&gt;A operação abstrata &lt;em&gt;ToNumber&lt;/em&gt; transforma a entrada em um tipo numérico, e é aqui que entramos naquele exemplo do &lt;code&gt;Number(null)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A conversão para valores numéricos funciona basicamente com as seguintes regras:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// Estas regras estão definidas no ECMAScript
Number(undefined);  // NaN
Number(null);       // +0
Number(true);       // 1
Number(false);      // +0
&lt;/pre&gt;

&lt;p&gt;Então, por regra, é por isso que Number(null) retorna 0, e isso não siginifica que &lt;code&gt;null == 0&lt;/code&gt;, já que são valores primitivos diferentes.&lt;/p&gt;

&lt;p&gt;Mas e quanto a conversão de &lt;em&gt;string&lt;/em&gt; para &lt;em&gt;number&lt;/em&gt;, &lt;code&gt;Number(&amp;quot;2016&amp;quot;)&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Para fazer a conversão de uma string, o &lt;em&gt;ToNumber&lt;/em&gt; tenta interpretar a string na codificação &lt;strong&gt;UTF-16&lt;/strong&gt; e caso não consiga, retorna &lt;code&gt;NaN&lt;/code&gt;, assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Number(&#34;2016&#34;);       // 2016
Number(&#34;20.16&#34;);      // 20.16
Number(&#34;-0&#34;);         // -0
Number(&#34;+Infinity&#34;);  // +Infinity
Number(&#34;++Infinity&#34;); // NaN
Number(&#34;201 6&#34;);      // NaN
Number(&#34;foo&#34;);        // NaN

// Para objetos, o retorno é correspondente ao
// valor primitivo do tipo do objeto
Number(Object(2016))  // 2016
Number(Object(&#34;21&#34;))  // 21
Number(Object(&#34;foo&#34;)) // NaN
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;toboolean&#34;&gt;ToBoolean&lt;/h3&gt;

&lt;p&gt;A operação abstrata &lt;em&gt;ToBoolean&lt;/em&gt; transforma a entrada em um tipo booleano, que assim como o &lt;em&gt;ToNumber&lt;/em&gt;, segue algumas regras. Vamos lá:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;!!undefined;        // false
!!null;             // false
!!Number(+0);       // false
!!Number(-0);       // false
!!Number(NaN);      // false

// Qualquer outro valor numérico retorna true
!!Number(21);       // true

// String retorna `false` se estiver vazia,
// caso contrário, retorna `true`
!!String(&#34;&#34;);       // false
!!String(&#34;foo&#34;);    // true

!!Object();         // true
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;tostring&#34;&gt;ToString&lt;/h3&gt;

&lt;p&gt;A operações abstratas &lt;em&gt;ToString&lt;/em&gt; tem a função de transformar a entrada em uma &lt;em&gt;string&lt;/em&gt;, e assim como as outras operações aqui descritas, também segue as suas regras de conversão, que são:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;String(undefined);      // &#34;undefined&#34;
String(null);           // &#34;null&#34;
String(true);           // &#34;true&#34;
String(false);          // &#34;false&#34;

// Para objetos, o retorno é correspondente ao
// valor primitivo do tipo do objeto
String(Object(2016))  // &#39;2016&#39;
String(Object(&#34;21&#34;))  // &#39;21&#39;
String(Object(true))  // &#39;true&#39;
String(Object(true))  // &#39;true&#39;
String(Object())      // &#39;[object Object]&#39;
&lt;/pre&gt;

&lt;p&gt;Para converter um &lt;code&gt;Number&lt;/code&gt; para &lt;em&gt;string&lt;/em&gt;, há uma série de considerações a se fazer, vou citar algumas. Tomando como base &lt;code&gt;String(Number(m))&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// 1. Se m for NaN:
String(Number(NaN)); // &#34;NaN&#34;

// 2. Se m for +0 ou −0:
String(Number(-0)); // &#34;0&#34;

// 3. Se m for menor que 0 (zero):
String(Number(-2016)); // &#34;-2016&#34;

// 4. Se m for +Infinity:
String(Number(+Infinity)); // &#34;Infinity&#34;

// 5. Para números muito grandes, muito pequenos,
// ou que tem alguma forma particular para serem
// representados como Number:
    Number(2345678987654321123456);  // 2.3456789876543211e+21
 String(Number(2345678987654321123456)); // &#34;2.3456789876543211e+21&#34;
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;toobject&#34;&gt;ToObject&lt;/h3&gt;

&lt;p&gt;Por último, temos a &lt;em&gt;ToObject&lt;/em&gt;, que transforma a entrada em um objeto, quando possível. Até aqui já tivemos a oportinudade de perceber esse tipo de conversão, já que alguns dos exemplos mostraram como &lt;em&gt;ToObject&lt;/em&gt; funciona. O que acontece basicamente é que &lt;em&gt;ToObject&lt;/em&gt; avalia o tipo primitivo da entrada e retorna um novo objeto daquele tipo, com o valor da entrada. Veja bem:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object(2016);   // Number {[[PrimitiveValue]]: 2016}
Object(&#39;foo&#39;);  // String {0: &#34;f&#34;, 1: &#34;o&#34;, 2: &#34;o&#34;, length: 3, [[PrimitiveValue]]: &#34;foo&#34;}
Object(true);   // Boolean {[[PrimitiveValue]]: true}
&lt;/pre&gt;

&lt;p&gt;Enfim, achei a resposta para o &lt;code&gt;Number(null)&lt;/code&gt; retornar `` e deu pra aprender um bocado. Recomendo que você dê uma olhada na &lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/index.html&#34;&gt;documentação do ECMAScript&lt;/a&gt;, existem várias outras operações abstratas interessantes.&lt;/p&gt;

&lt;p&gt;Como curiosidade, olha só e tente adivinhar qual o resultado do último:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object(true);               // new Boolean(true)
Object(true) == Boolean(true);      // true
Object(true) == new Boolean(true);  // ??
&lt;/pre&gt;

&lt;p&gt;O próprio &lt;code&gt;Boolean(true)&lt;/code&gt; retorna o valor primitivo &lt;code&gt;true&lt;/code&gt;, que faz com que o objeto gerado em &lt;code&gt;Object(true)&lt;/code&gt; sofra uma conversão para o valor primitivo e assim fazer a igualdade. Já &lt;code&gt;new Boolean(true)&lt;/code&gt; retorna um novo objeto, que na comparação &lt;code&gt;==&lt;/code&gt; retorna &lt;code&gt;false&lt;/code&gt;. Isso porque ao comparar dois objetos em JS, a comparação é para saber se os dois objetos são iguais. Faça o teste: &lt;code&gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;{}&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;w&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;err&amp;quot;&amp;gt;==&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;w&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;{}&amp;lt;/span&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bom… é isso. Espero que eu tenha sido claro, mas se você ficou com dúvidas, me mande um tweet, vamos trocar ideia (:&lt;/p&gt;

&lt;p&gt;Até a próxima.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Este post foi originalmente postado em meu blog, no dia 12 de junho de 2016, no link abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html&#34;&gt;http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bulma: framework CSS baseado em flexbox</title>
      <link>https://tableless.github.io/hugo-public/bulma-framework-css-baseado-em-flexbox/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/bulma-framework-css-baseado-em-flexbox/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Inspirado pelo Bootstrap, o Bulma visa oferecer a todos a alegria de fazer o design do site, com a simplicidade do flexbox e a elegância de Sass.&amp;#8221; &amp;#8211; &lt;a href=&#34;http://jgthms.com/&#34;&gt;Jeremy Thomas&lt;/a&gt;, criador do projeto Bulma.io.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Como o título diz, o &lt;a href=&#34;http://bulma.io/&#34;&gt;Bulma&lt;/a&gt; é um framework CSS baseado na tecnologia flexbox, que já tem uma grande &lt;a href=&#34;http://caniuse.com/#search=flexbox&#34;&gt;compatibilidade&lt;/a&gt; entre os navegadores. O pacote contém todos os elementos mais comuns como botões, formulários, menus, tabelas, títulos, notificações, barras de progresso e um simples sistema de grid (basta adicionar uma coluna, o resize das colunas é automático).&lt;/p&gt;

&lt;p&gt;Vou mostrar alguns exemplos para que você possa entender o poder do Bulma.&lt;/p&gt;

&lt;p&gt;Primeiramente, faremos a instalação que não precisa de nada mais que um link para o arquivo de estilos do Bulma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.0.26/css/bulma.css&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Claro que você pode baixar e deixar no seu diretório local, e também baixar com o NPM: &lt;code&gt;npm install bulma&lt;/code&gt;; mas o que quero mostrar é que tudo que você precisa é apenas de um arquivo de CSS.&lt;/p&gt;

&lt;p&gt;Baixando com o NPM você terá como personalizar facilmente com SASS.&lt;/p&gt;

&lt;p&gt;O Bulma não vem com nenhum pacote de icon-fonts acoplado, então, caso você pretenda usar algum, como o Font Awesome, você deve inserí-lo também.&lt;/p&gt;

&lt;h2 id=&#34;o-grid&#34;&gt;O Grid&lt;/h2&gt;

&lt;p&gt;Lembrando: como o Bulma foi baseado no Bootstrap, uma das semelhanças é o sistema de grid com 12 colunas.&lt;/p&gt;

&lt;p&gt;Como falei, o grid funciona de forma muito simples. Tudo que você precisa é ter uma &lt;code&gt;div&lt;/code&gt; com a classe &lt;code&gt;.columns&lt;/code&gt; e suas filhas &lt;code&gt;.column&lt;/code&gt;, como no exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;columns&#34;&amp;gt;
  &amp;lt;div class=&#34;column&#34;&amp;gt;.column&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column&#34;&amp;gt;.column&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column&#34;&amp;gt;.column&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column&#34;&amp;gt;.column&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Você pode entender melhor como funciona com &lt;a href=&#34;http://codepen.io/gabsprates/full/PNVJrP/&#34;&gt;esse exemplo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mas e se você quiser que uma coluna ocupe o espaço de duas? Ou três? Ou quatro? Simples!!!&lt;/p&gt;

&lt;p&gt;Podemos utilizar as classes &lt;code&gt;is-2&lt;/code&gt;, &lt;code&gt;is-3&lt;/code&gt;, &lt;code&gt;is-4&lt;/code&gt;, &lt;code&gt;is-5&lt;/code&gt;, &lt;code&gt;is-6&lt;/code&gt;, &lt;code&gt;is-7&lt;/code&gt;, &lt;code&gt;is-8&lt;/code&gt;, &lt;code&gt;is-9&lt;/code&gt;, &lt;code&gt;is-10&lt;/code&gt; e &lt;code&gt;is-11&lt;/code&gt; para especificar qual a área ocupada pela &lt;code&gt;.column&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para entender melhor, aconselho a dar uma olhada &lt;a href=&#34;http://bulma.io/documentation/grid/columns/&#34;&gt;neste&lt;/a&gt; e &lt;a href=&#34;http://bulma.io/documentation/grid/tiles/&#34;&gt;neste&lt;/a&gt; links.&lt;/p&gt;

&lt;h2 id=&#34;hero&#34;&gt;Hero&lt;/h2&gt;

&lt;p&gt;Você já teve problemas com alinhar elementos verticalmente ao centro? O Bulma é um verdadeiro herói para essas situações! Veja este exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section class=&#34;hero is-large&#34;&amp;gt;
    &amp;lt;div class=&#34;hero-body&#34;&amp;gt;
      &amp;lt;div class=&#34;container&#34;&amp;gt;
        &amp;lt;h1 class=&#34;title&#34;&amp;gt;
          Título
        &amp;lt;/h1&amp;gt;
        &amp;lt;h2 class=&#34;subtitle&#34;&amp;gt;
          Exemplo do uso do hero
        &amp;lt;/h2&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Aqui o Bulma centraliza os títulos na vertical, qualquer conteúdo seria alinhado também. &lt;a href=&#34;http://bulma.io/documentation/layout/hero/&#34;&gt;Clique aqui&lt;/a&gt; mais exemplos.&lt;/p&gt;

&lt;h2 id=&#34;level&#34;&gt;Level&lt;/h2&gt;

&lt;p&gt;Por último, quero falar um pouco sobre as navbars. Veja esse código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;nav class=&#34;level&#34;&amp;gt;
    &amp;lt;p class=&#34;level-item has-text-centered&#34;&amp;gt;
      &amp;lt;a class=&#34;link is-info&#34;&amp;gt;Home&amp;lt;/a&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;p class=&#34;level-item has-text-centered&#34;&amp;gt;
      &amp;lt;a class=&#34;link is-info&#34;&amp;gt;Menu&amp;lt;/a&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;p class=&#34;level-item has-text-centered&#34;&amp;gt;
      &amp;lt;img src=&#34;http://bulma.io/images/bulma.png&#34; alt=&#34;&#34; style=&#34;height: 33px;&#34;&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;p class=&#34;level-item has-text-centered&#34;&amp;gt;
      &amp;lt;a class=&#34;link is-info&#34;&amp;gt;Reservations&amp;lt;/a&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;p class=&#34;level-item has-text-centered&#34;&amp;gt;
      &amp;lt;a class=&#34;link is-info&#34;&amp;gt;Contact&amp;lt;/a&amp;gt;
    &amp;lt;/p&amp;gt;
  &amp;lt;/nav&amp;gt;

&lt;/pre&gt;

&lt;p&gt;Ele gera uma navbar em que os elementos são divididos com a largura igual e com alinhamento vertical no centro, mesmo com imagem ou até mesmo um &lt;code&gt;form&lt;/code&gt;, ele manteria esse alinhamento.&lt;/p&gt;

&lt;p&gt;Veja mais &lt;a href=&#34;http://bulma.io/documentation/components/level/&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;enfim-8230&#34;&gt;Enfim&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Estes foram alguns exemplos do poder do Bulma mas há muito mais que você pode conferir na própria &lt;a href=&#34;http://bulma.io/documentation/overview/start/&#34;&gt;documentação do projeto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Existem vários componentes legais, como cards, menus, paginação, mensagens, e várias outras coisas fáceis de usar e simples de compreender.&lt;/p&gt;

&lt;p&gt;Isso é tudo pessoal (:&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>