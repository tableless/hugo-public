<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tableless</title>
    <link>http://tableless.com.br/index.xml</link>
    <description>Recent content on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Wed, 29 Mar 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tableless.com.br/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Serasa Experian abre inscrições para hackathon em São Carlos  com R$ 40 mil em prêmios</title>
      <link>http://tableless.com.br/serasa-experian-abre-inscricoes-para-hackathon-em-sao-carlos-com-r-40-mil-em-premios/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/serasa-experian-abre-inscricoes-para-hackathon-em-sao-carlos-com-r-40-mil-em-premios/</guid>
      <description>&lt;p&gt;Até o dia 20 de abril de 2017 estão abertas as inscrições para a terceira edição do hackathon Experiance Jam, da Serasa Experian. A maratona tecnológica acontecerá nos dias 6 e 7 de maio, no centro de excelência da empresa, em São Carlos (SP). Serão 200 participantes selecionados, que terão das 9 horas do dia 6 às 18 horas do dia 7 para resolver desafios propostos pela Serasa Experian. As premiações totalizam R$ 40 mil reais, sendo R$ 10 mil reais para cada um dos quatro desafios apresentados.&lt;/p&gt;

&lt;p&gt;Os interessados em participar do Experiance Jam devem se inscrever pelo site &lt;a href=&#34;http://www.experiancejam.com.br&#34;&gt;www.experiancejam.com.br&lt;/a&gt;, preencher o formulário online, ler e aceitar o Regulamento. Os participantes podem se inscrever individualmente ou em equipes. Os times formados devem conter de três a 10 participantes, sendo indicados ao menos dois desenvolvedores e um designer de UX na composição da equipe. Na seleção dos candidatos, uma equipe de jurados irá avaliar informações técnicas e comportamentais inseridas no momento da inscrição. Os 200 selecionados serão divulgados no dia 24 de abril no site do Experiance Jam.&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Os quatro desafios apresentados na nova edição do Experiance Jam serão:&lt;/b&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;ol class=&#34;ol1&#34;&gt;
  &lt;li class=&#34;li3&#34;&gt;
    &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Autenticação&lt;/b&gt;: como garantir a identidade de uma pessoa ao se identificar em um sistema?&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&#34;li3&#34;&gt;
    &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Cadastro Positivo&lt;/b&gt; para empresas: qual a melhor análise de crédito das empresas utilizando os dados que a Serasa Experian possui?&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&#34;li3&#34;&gt;
    &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Internet das Coisas:&lt;/b&gt; como será o futuro a nossa volta? &lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&#34;li3&#34;&gt;
    &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Tema surpresa&lt;/b&gt;, a ser revelado no início do hackathon. &lt;/span&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&#34;p5&#34;&gt;
  &lt;span class=&#34;s3&#34;&gt;Entre os jurados do hackathon está o diretor do laboratório de inovação (DataLab) da Serasa Experian, Marcelo Pimenta. Segundo ele, a decisão de fazer o evento em São Carlos leva em conta as universidades existentes na cidade, que é considerada&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; um centro de excelência na formação de profissionais na área de dados.&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt; “&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;São Carlos foi escolhida para ser o coração da companhia, com excelência em desenvolvimento de soluções inovadoras. Com o centro de excelência da Serasa Experian recém-inaugurado, escolhemos a cidade para abrigar a nova edição do Experiance Jam”, afirma.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;O centro de excelência Serasa Experian São Carlos na cidade, onde acontecerá o hackathon, foi inaugurado dia 21 de março de 2017, no Distrito Industrial Miguel Abdelnur, e já está em plena operação. Em um terreno de mais de 25 mil metros quadrados e investimento de R$ 45 milhões, a primeira fase da instalação, com área construída de 10 mil metros quadrados, foi pensada para ter conceitos de ecoeficiência, arquitetura moderna, infraestrutura e tecnologia de ponta, o que facilita a integração entre os 550 funcionários. &lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Edições anteriores do Experiance Jam&lt;/b&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;A Serasa Experian já organizou duas edições do Experiance Jam, ambas na sede da empresa, em São Paulo. No primeiro hackathon, um dos desafios apresentados foi a criação de um processo de autenticação de clientes (especialmente pequenas e médias empresas), quando entram em contato com a empresa via SAC. A solução vencedora foi implantada em novembro do ano passado e, com poucos meses de atividade, já cobriu seus custos de desenvolvimento. &lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p4&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Aftermovie da 1ª edição: https://www.youtube.com/watch?v=GhpdkWJg6zY&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p4&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;O segundo hackathon, ocorrido em novembro do ano passado, teve 60 participantes e outros dois desafios: a criação de um novo produto para o SerasaConsumidor, braço da Serasa Experian que oferece produtos e serviços ao cidadão, e uma solução para intensificar o uso do aplicativo SerasaConsumidor. A implementação de ambas as soluções vencedoras estão em fase de estudo.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Aftermovie da 2ª edição: https://www.youtube.com/watch?v=i7em8H5RCOE&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Em 2015, a Serasa Experian conquistou o 4º lugar do Ranking Anuário Inovação Brasil, prêmio criado pelo jornal Valor Econômico e pela consultoria Strategy &amp; (anterior Booz &amp; Company), cujo objetivo é analisar as ações em inovação das empresas de forma aprofundada, desde a criação de novos produtos até os novos processos. Em 2016, a Experian foi eleita pela revista Forbes, pela terceira vez consecutiva, como uma das 100 companhias mais inovadoras do mundo.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p5&#34;&gt;
  &lt;span class=&#34;s2&#34;&gt;&lt;b&gt;Experience Jam&lt;/b&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;&lt;li class=&#34;p5&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Data: &lt;/b&gt;6 e 7 de maio de 2017&lt;/span&gt;
&lt;/li&gt;
&lt;li class=&#34;p5&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Local: &lt;/b&gt;Serasa Experian São Carlos &lt;/span&gt;
&lt;/li&gt;
&lt;li class=&#34;p5&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Inscrições: &lt;/b&gt;Abertas até o dia 20 de abril de 2017 – &lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;www.experiancejam.com.br&lt;/span&gt;
&lt;/li&gt;
&lt;li class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Divulgação dos 200 selecionados: &lt;/b&gt;24/04/2017&lt;/span&gt;
&lt;/li&gt;&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Acompanhe também nas redes sociais:&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;&lt;li class=&#34;p6&#34;&gt;
  &lt;span class=&#34;s2&#34;&gt;&lt;a href=&#34;https://www.facebook.com/experiancejam/&#34;&gt;https://www.facebook.com/experiancejam/&lt;/a&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li class=&#34;p6&#34;&gt;
  &lt;span class=&#34;s2&#34;&gt;&lt;a href=&#34;https://twitter.com/experianceJAM&#34;&gt;https://twitter.com/experianceJAM&lt;/a&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li class=&#34;p6&#34;&gt;
  &lt;span class=&#34;s2&#34;&gt;&lt;a href=&#34;https://www.instagram.com/experiancejam/&#34;&gt;https://www.instagram.com/experiancejam/&lt;/a&gt;&lt;/span&gt;
&lt;/li&gt;&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Serasa Experian&lt;/b&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;A Serasa Experian é líder na América Latina em serviços de informações para apoio na tomada de decisões das empresas. No Brasil, é sinônimo de solução para todas as etapas do ciclo de negócios, desde a prospecção até a cobrança, oferecendo às organizações as melhores ferramentas. Com profundo conhecimento do mercado brasileiro, conjuga a força e a tradição do nome Serasa com a liderança mundial da Experian. Criada em 1968, uniu-se à Experian Company em 2007. Responde on-line/real-time a 6 milhões de consultas por dia, auxiliando 500 mil clientes diretos e indiretos a tomar a melhor decisão em qualquer etapa de negócio.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Constantemente orientada para soluções inovadoras, a Serasa Experian vem contribuindo para a transformação do mercado de soluções de informação, com a incorporação contínua dos mais avançados recursos de inteligência e tecnologia.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Para mais informações, visite &lt;a href=&#34;http://www.serasaexperian.com.br&#34;&gt;&lt;span class=&#34;s5&#34;&gt;www.serasaexperian.com.br&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;&lt;b&gt;Experian&lt;/b&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;A Experian é líder mundial em serviços de informação. Nos grandes momentos da vida – desde comprar um carro, passando por mandar seu filho para a faculdade, até a crescer o negócio se conectando com novos clientes – nós empoderamos consumidores e empresas a gerenciarem seus dados com confiança. Nós ajudamos as pessoas a tomarem o controle de suas vidas e acessarem serviços financeiros, os negócios a tomarem decisões mais inteligentes e prosperarem, os credores a emprestarem de forma mais responsável e as organizações a prevenirem fraude de identidade e crime.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Empregamos cerca de 17.000 pessoas em 37 países e a cada dia estamos investindo em novas tecnologias, profissionais talentosos e inovação para ajudar todos os clientes a maximizarem cada oportunidade. A Experian plc está listada na Bolsa de Valores de Londres (EXPN) e compõe o índice FTSE 100.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Saiba mais em &lt;a href=&#34;http://www.experianplc.com&#34;&gt;&lt;span class=&#34;s5&#34;&gt;www.experianplc.com&lt;/span&gt;&lt;/a&gt; ou visite o nosso hub de conteúdo global para as últimas notícias sobre a empresa &lt;a href=&#34;http://www.experian.com/blogs/news&#34;&gt;&lt;span class=&#34;s5&#34;&gt;www.experian.com/blogs/news&lt;/span&gt;&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Foz do Iguaçu recebe reunião sobre desenvolvimento da Internet na América Latina e Caribe</title>
      <link>http://tableless.com.br/foz-do-iguacu-recebe-reuniao-sobre-desenvolvimento-da-internet-na-america-latina-e-caribe/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/foz-do-iguacu-recebe-reuniao-sobre-desenvolvimento-da-internet-na-america-latina-e-caribe/</guid>
      <description>&lt;p&gt;Os mais renomados especialistas sobre Internet da América Latina e Caribe se reunirão, em Foz do Iguaçu (PR), no período de 22 a 26 de maio, com o intuito de analisar e discutir a situação das Tecnologias da Informação e Comunicação (TIC) na região. O LACNIC27, encontro anual organizado pelo Registro de Endereçamento da Internet para a América Latina e o Caribe (LACNIC) contará este ano com o apoio do Comitê Gestor da Internet no Brasil (CGI.br) e do Núcleo de Informação e Coordenação do Ponto BR (NIC.br) como co-organizadores.&lt;/p&gt;

&lt;p&gt;Durante o evento, serão realizados ainda encontros de outras organizações que contribuem para o desenvolvimento da Internet: CSIRTs (Grupos de Resposta a Incidentes de Segurança da LAC), LACNOG (Fórum de Operadores de Rede da América Latina e Caribe), LACTLD (Organização regional que agrupa os ccTLDs da América Latina e Caribe) e o LAC-IX (Associação dos Pontos de Troca de Tráfego Internet da América Latina e Caribe).&lt;/p&gt;

&lt;p&gt;O evento receberá até 650 participantes, pertencentes às organizações líderes da Internet, bem como representantes de governos, do setor acadêmico e da sociedade civil. Uma vez preenchidas as vagas, haverá ainda a possibilidade de inscrição como visitante do evento, que dará direito de acesso apenas às sessões abertas.&lt;/p&gt;

&lt;p&gt;Esta edição trará pela primeira vez o “Dia do IPv6”, em que será outorgado o Jim Bound Award, bem como realizadas apresentações e painéis de destaque na área de implementação do IPv6. Outra atividade de destaque no evento é o Peering Fórum, um espaço que visa proporcionar a oportunidade de conversas e negociação de acordos de interconexão e de trânsito entre Provedores de Internet, Provedores de Conteúdo e Pontos de Troca de Tráfego Internet.&lt;/p&gt;

&lt;p&gt;A agenda do LACNIC 27 traz ainda tutoriais técnicos relevantes como a Oficina Antiabuso, o Fórum de Interconexão Regional e o Fórum de Segurança de Redes, entre outras atividades. Todos estes temas serão tratados por influentes especialistas da região e do mundo, entre eles: Merike Kaeo, Timothy Winters, Mikel Jimenez Fernández e Goran Marby.&lt;/p&gt;

&lt;p&gt;A agenda completa e mais informações sobre o evento estão disponíveis em: &lt;a href=&#34;http://www.lacnic.net/web/eventos/lacnic27&#34;&gt;http://www.lacnic.net/web/eventos/lacnic27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LACNIC27&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data: 22 a 26 de maio de 2017&lt;/p&gt;

&lt;p&gt;Horário: a partir de 9h00&lt;/p&gt;

&lt;p&gt;Local do evento: Bourbon Cataratas Convention &amp;amp; Spa Resort&lt;/p&gt;

&lt;p&gt;Endereço: Av. das Cataratas km 2,5, Nº 2345 – Foz do Iguaçu &amp;#8211; PR&lt;/p&gt;

&lt;p&gt;Endereço web: &lt;a href=&#34;http://www.lacnic.net/pt/web/eventos/lacnic27&#34;&gt;http://www.lacnic.net/pt/web/eventos/lacnic27&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O fim da profissão front-end</title>
      <link>http://tableless.com.br/carreira-de-front-end-vai-morrer/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/carreira-de-front-end-vai-morrer/</guid>
      <description>

&lt;p&gt;O processo de desenvolvimento web pode se dividir em três categorias: design, front-end e back-end. Na minha opinião, a categoria que tem mais processos manuais e repetitivos é sem duvida o front-end.&lt;/p&gt;

&lt;p&gt;Pare pra pensar: o core do trabalho do front-end se resume em duas partes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;implementação do layout&lt;/strong&gt;: produção da primeira camada de código, onde replicamos o layout criado em algum programa gráfico, para código estático em HTML, CSS e JS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;integração com API&lt;/strong&gt;: depois (ou junto, tanto faz) de feito o código estático, a interface é integrada com a API, que geralmente carrega boa parte da lógica, já que essa mesma API é usada para alimentar outras plataformas como mobile, robôs etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As outras &amp;#8220;responsabilidades&amp;#8221; que orbitam em volta do front-end como acessibilidade, SEO, performance, compatibilidade entre browsers, código semântico, entre outras coisas que você pode julgar serem de responsabilidade de um front-end &lt;strong&gt;são um mero apetrecho&lt;/strong&gt;. Elas podem existir ou não em um projeto. Mas um projeto não sobrevive sem o código front-end do layout e sem o conteúdo integrado à interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Um observação: acessibilidade é algo que as máquinas podem fazer muito melhor que um ser humano. Embora eu tenha colocado como algo que possa existir ou não em um projeto, é importante demais que você faça um esforço para que todos os seus projetos sejam acessíveis. Eu sei que isso não é a realidade até hoje no mercado e provavelmente nunca será até que esse processo seja automatizado.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Existem uma série de tarefas manuais que nós delegamos para ferramentas criadas afim de economizar parte do nosso tempo evitando a execução de tarefas repetitivas, automatizando o workflow do front-end. Só para citar algumas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pre-processadores CSS:&lt;/strong&gt; Sass, Less, Stylus&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task runners:&lt;/strong&gt; Gulp, Grunt , Make, NPM Scripts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scaffolding:&lt;/strong&gt; Yeoman, Slush&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependências/Module Bundles:&lt;/strong&gt; Bower, NPM, Yarn, Webpack, Duo, RequireJS, Browserify, JSPM, Rollup&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SPA/Libraries/Frameworks:&lt;/strong&gt; React, Angular, Vue.js, Backbone, EmberJS, todomvc, Polymer, Lodash, Aurelia, MeteorJS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Frameworks/Libraries:&lt;/strong&gt; SemanticUI, Bootstrap, Foundation, UiKit, YUI, Susy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JS Test&lt;/strong&gt;: Mocha, Jasmine, QUnit, Ava, Tape, Jest&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JS Templates:&lt;/strong&gt; Underscore, Mustache, Handlebars, DoT, Dust, EJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mas mesmo com todas essas ferramentas, o core da responsabilidade de um front-end ainda continua sendo &lt;strong&gt;implementar layout original&lt;/strong&gt; e &lt;strong&gt;integrar a interface com o back-end&lt;/strong&gt;. Você ainda continua &lt;strong&gt;replicando&lt;/strong&gt; o layout que alguém passou dias desenhando e integra o conteúdo que está numa API, que outra pessoa criou. Seu dia se resume em alternar entre as janelas do Sublime / Sketch / Browser / Sublime / API / Browser / Sublime.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Automation isn&amp;#8217;t about being lazy. It&amp;#8217;s about being efficient.&amp;#8221; &amp;#8212; Addy Osmani&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esse processo se torna tedioso e a lista de requisitos para tentar tornar o trabalho de front-end eficiente só aumenta. Toda tarefa mecânica, repetitiva e manual tende a ser automatizada e na minha opinião, em pouco tempo, &lt;strong&gt;não vamos precisar de alguém executando o trabalho de front-end de ponta a ponta&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Okay, respira. Isso é a minha opinião. Dado que o front-end é a parte mais operacional de todo o processo, mais cedo ou mais tarde todo o trabalho executado no front-end vai ser automatizado. A parte mais difícil são essas duas tarefas que nós fazemos desde os primórdios. Contudo, elas já podem estar com seus dias contados.&lt;/p&gt;

&lt;h2 id=&#34;trabalhando-com-dados-reais-direto-no-design&#34;&gt;Trabalhando com dados reais direto no Design&lt;/h2&gt;

&lt;p&gt;Você pode não ser designer, mas há uma premissa no mundo dos designers que diz que &lt;strong&gt;você deve trabalhar sempre com conteúdo real&lt;/strong&gt;. Isso quer dizer que entregar um layout com texto em &lt;em&gt;Lorem Ipsum Dolor&lt;/em&gt; é coisa de designer júnior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;If your site or application requires data input, enter real and relevant words and type the text, don’t just paste it in from another source.&amp;#8221; &amp;#8212; Jason Fried&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A ideia é que você crie um layout da forma mais fiel possível usando os termos, palavras, nomes, datas etc, afim de chegar mais perto da experiência do usuário.&lt;/p&gt;

&lt;p&gt;Atualmente a maioria dos programas visuais utilizados para criar layouts para web tem alguma feature ou plugin que permite a integração com alguma fonte de dados que contenha o conteúdo real.&lt;/p&gt;

&lt;p&gt;Por exemplo o Sketch, que é o programa de criação visual mais querido do momento, conta com plugins que permitem a integração direta entre API e layout. Veja por exemplo o vídeo abaixo demonstrando a utilização do plugin Craft (também disponível para Photoshop):&lt;/p&gt;

&lt;p&gt;Ou essa demonstração que usa a API do Stackoverflow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Em pouco tempo, não vamos precisar de alguém executando o trabalho de front-end de ponta a ponta.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O ponto aqui é: nós só precisamos criar o layout uma vez, usando o programa desejado (Sketch/Photoshop/Figma/Adobe XD etc) e pronto. Não precisamos de uma pessoa para refazer esse layout com HTML/CSS/JS de forma alguma. Isso nos leva para uma segunda discussão: mesmo com o design pronto, usando dados reais de uma API, nós ainda precisamos que ele seja acessível pelos browsers. Como resolvemos isso?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Obs.: E aquele movimento do &amp;#8220;Design in the Browser&amp;#8221;? Esse é um movimento criado exatamente para evitar o trabalho de produzir duas vezes o mesmo layout. Mas é MUITO melhor fazer um design usando um programa visual do que escrever direto no código. IMHO.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;código-bonito-não-é-importante&#34;&gt;Código bonito não é importante&lt;/h2&gt;

&lt;p&gt;Desde sempre os front-ends escrotizavam o código que era gerado automaticamente por programas como o Dreamweaver. Eles tinham uma razão pra isso: o código era completamente horrível. Era um tempo onde a conexão com a internet era precária e tudo o que pudéssemos fazer para melhorar o carregamento do site, nós fazíamos. O código gerado por programas Wysiwyg tinha vários problemas: era difícil de ler, não havia semântica alguma, continha código inútil e muitas vezes não era compatível com todos os browsers. Tudo isso fazia com que o código limpo, semântico, enxuto e acessível tivesse um valor inestimável.&lt;/p&gt;

&lt;p&gt;Código limpo era sinônimo de bom ranking no Google, boa compatibilidade entre os browsers, performance de carregamento garantida, produtividade entre os membros do time por causa da legibilidade do código, facilidade de manutenção etc etc etc.&lt;/p&gt;

&lt;p&gt;Hoje, boa parte desses problemas foram resolvidos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;os browsers tem uma ótima complacência com os padrões web, extinguindo a maioria dos problemas de compatibilidade de layout;&lt;/li&gt;
&lt;li&gt;a performance é atacada em várias frentes: processo de build dos assets, tecnologias como HTTP/2 e até a evolução da conexão que fica mais rápida a cada ano;&lt;/li&gt;
&lt;li&gt;a manutenção e a legibilidade do código HTML/CSS não é mais um problema sério, já que o HTML é facilmente escrito usando poucas tags e o CSS tem os pré-processadores, que auxiliam muito na hora de definir padrões, além das boas práticas;&lt;/li&gt;
&lt;li&gt;o JS está bem assessorado por frameworks, libraries e uma série de boas práticas que se responsabilizam pela parte pesada do trabalho, deixando pouca margem de erro para os devs;&lt;/li&gt;
&lt;li&gt;e o mais importante para mim é que a semântica não está mais no HTML. Desde a vinda de tecnologias com o JSON-LD, a semântica não está mais atrelada ao código HTML e isso é ótimo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu sei que mesmo que grande parte da responsabilidade fique na mão dos frameworks, bibliotecas e ferramentas, o dev tem grandes chances de fazer merda com o pedaço de código que ele cuida. Não olha pro seu amiguinho do lado, coitado&amp;#8230; Todos nós cometemos erros&amp;#8230; uns mais, outros menos.&lt;/p&gt;

&lt;p&gt;Mas entenda uma coisa: &lt;strong&gt;código bonito, não é mais algo importante&lt;/strong&gt;. As ferramentas que nos auxiliam hoje para buildar os assets podem ser usadas por programas/robôs ao criar automaticamente código HTML/CSS/JS a partir de layouts produzidos em programas como Sketch. Veja por exemplo &lt;a href=&#34;https://github.com/sskyy/blade&#34;&gt;esse plugin&lt;/a&gt; que não é mais atualizado desde 2015 já tentava automatizar a exportação de código no Sketch. O cara estava tentando fazer código HTML a partir do layout desenhado no Sketch versão 3. Hoje o Sketch está na versão 42. E sabe de uma coisa: na versão 43 o Sketch está abrindo o código dos seus arquivos em formato JSON. O que nos leva para o próximo assunto.&lt;/p&gt;

&lt;h3 id=&#34;automatização-do-design&#34;&gt;Automatização do Design&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;We have a new file format which is more compact, and enables more powerful integrations for third-party developers. &amp;#8212; &lt;a href=&#34;https://rink.hockeyapp.net/apps/0172d48cceec171249a8d850fb16276b&#34;&gt;Sketch Team&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Isso quer dizer que o Sketch se transformará em uma plataforma de desenvolvimento. Abrindo o código dos seus arquivos, qualquer um conseguirá ler esses arquivos e partir daí criar &lt;strong&gt;qualquer coisa&lt;/strong&gt;. Quanto tempo para alguém criar um plugin que lê o arquivo do Sketch em formato JSON e &lt;strong&gt;gera automaticamente HTML/CSS/JS&lt;/strong&gt; a partir de um layout Sketch?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Computadores evoluem. Se os princípios mudassem não haveria base para a evolução. &amp;#8211; Caio Vaccaro&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, mas espera aí: mesmo antes desse formato novo de arquivo do Sketch, já existia algumas ferramentas que talvez você não conhecia como o &lt;a href=&#34;https://protoship.io/tools/teleport.html&#34;&gt;Teleport&lt;/a&gt;, que converte &lt;strong&gt;qualquer website&lt;/strong&gt; em um artboard do Sketch. E também o &lt;a href=&#34;https://protoship.io/tools/uipad.html&#34;&gt;UIPad&lt;/a&gt;, que converte layout do Sketch em HTML/CSS e React! Se liga:&lt;/p&gt;

&lt;p&gt;Essa tendência já estava sendo desenhada há tempos. É a coisa mais inteligente de se fazer. Você pode fazer coisas mais importantes do que ficar sentado na frente do computador alternando entre browser, layout, browser, layout.&lt;/p&gt;

&lt;p&gt;Okay: nós temos um design que se integra com a API, puxando dados reais do sistema. Nós temos um programa que design que exporta o layout para código HTML/CSS/JS pronto para ser usado. Mas ainda estamos usando código HTML/CSS/JS como antigamente. Há mais um passo que pode ser melhorado.&lt;/p&gt;

&lt;h3 id=&#34;webassembly-wasm&#34;&gt;WebAssembly (Wasm)&lt;/h3&gt;

&lt;p&gt;Outro ponto importante, que não tem nada definido ainda, mas que pode começar a fazer todo sentido é toda aquela &lt;a href=&#34;https://tableless.com.br/o-webassembly-vem-ai/&#34;&gt;história do WebAssembly&lt;/a&gt;, que é um novo formato binário criado pelo Google Microsoft, Mozilla e vários outros.&lt;/p&gt;

&lt;p&gt;O formato de código binário do WebAssembly pode ser decodificado muito mais rápido do que o JavaScript é parseado. Isso realmente traz para a Web a experiência de programas nativos, principalmente no mobile.&lt;/p&gt;

&lt;p&gt;O legal é que outras linguagens podem ser compiladas para WebAssembly. Hoje o projeto está um pouco mais focado em C/C++, mas com certeza outras linguagens serão abrangidas. O objetivo principal do WebAssembly é a performance.&lt;/p&gt;

&lt;p&gt;Uma preocupação que surge no ar é que isso cheira monopólio. Lembra do Flash? Querendo ou não ele era uma alternativa de criar algo nativo na Web. Mas a graça é que:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;WebAssembly não substitui o JavaScript. Tudo tem retrocompatibilidade, tudo será executado no mesmo universo que o JS e a segurança terá as mesmas restrições que o JS;&lt;/li&gt;
&lt;li&gt;Não é só uma empresa ou grupo que está por trás do Wasm, mas várias como Firefox, Chromium, Edge e Webkit;&lt;/li&gt;
&lt;li&gt;Para rodar WebAssembly não será necessário rodar plugins de terceiros, já que os motores dos browsers serão totalmente compatíveis;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Está entendendo por que buscar por um código limpo (como conhecemos hoje) não faz mais tanto sentido?&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Mais cedo ou mais tarde a profissão de front-end como nós conhecemos até hoje &lt;strong&gt;vai deixar de existir&lt;/strong&gt;. Você que já é velho na área, talvez nem precise se preocupar, porque eu não acho que isso vai acontecer agora, mas você que acabou de começar, é melhor pensar duas vezes no futuro da sua carreira.&lt;/p&gt;

&lt;p&gt;Eu tenho certeza que a área de back-end também pode passar por esse processo, embora seja muito mais difícil de acontecer. E eu também acho que vai demorar muito (se chegar a acontecer) a automatização da parte criativa responsável pelo design dos layouts de produtos e websites.&lt;/p&gt;

&lt;p&gt;Eu não chuto em quanto tempo isso pode acontecer ou se vai acontecer. É mais um chute meu do que qualquer outra. Quero só abrir para discussão esse assunto. Mas até ontem &lt;a href=&#34;https://www.wired.com/2016/10/ubers-self-driving-truck-makes-first-delivery-50000-beers/&#34;&gt;carros e caminhões autônomos&lt;/a&gt; eram coisa de filme.&lt;/p&gt;

&lt;p&gt;Mas com certeza existem vários pontos ainda a serem resolvidos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A automatização de sites gigantes de conteúdo vai ocorrer?&lt;/li&gt;
&lt;li&gt;E sistemas/produtos, como vamos fazer?&lt;/li&gt;
&lt;li&gt;Coloque aqui sua dúvida maluca&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Minha outra aposta é sobre a profissão de UX, que vai desaparecer não porque suas responsabilidades serão automatizadas, mas por se tornar obsoleto mesmo. Esse é assunto para um outro artigo, mas se quiser pensar sobre isso agora, comece ouvindo &lt;a href=&#34;http://movimentoux.com/work/felipememoria/&#34;&gt;esse capítulo do podcast do Movimento UX&lt;/a&gt; com o &lt;a href=&#34;http://www.fmemoria.com.br/&#34;&gt;Felipe Memória&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;para-ler-mais&#34;&gt;Para ler mais&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dados reais no design&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shopify.com/partners/blog/91010886-3-easy-steps-for-working-with-realistic-data-in-sketch-using-json&#34;&gt;3 Easy Steps for Working with Realistic Data in Sketch Using JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@markjenkins/designing-with-data-7f6bcd907f0a#.95haya5yq&#34;&gt;Designing with Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.framer.com/prototype-with-real-data-in-framer-from-json-to-multi-device-and-internet-of-things-6eb1ae8b8325#.fo9b8i4gz&#34;&gt;Prototype with real data in Framer, from JSON to multi-device and internet of things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@anirudhs/project-comet-designing-with-real-data-959beccb5c1a#.v6khfndrh&#34;&gt;Adobe XD: Designing with Real Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sobre não usar texto fake em layouts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2010/01/lorem-ipsum-killing-designs/&#34;&gt;Lorem Ipsum is Killing Your Designs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thenextweb.com/dd/2015/04/09/why-designers-should-never-use-fake-text/#.tnw_zjSSHkxh&#34;&gt;Why designers should never use fake text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.creativebloq.com/design/stop-using-lorem-ipsum-7116907&#34;&gt;Stop using Lorem Ipsum!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://signalvnoise.com/archives/001083.php&#34;&gt;&amp;#8220;Getting Real&amp;#8221; design tip: Just say no to Lorem Ipsum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WebAssembly&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webassembly.org/docs/faq/&#34;&gt;FAQ do site WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tableless.com.br/o-webassembly-vem-ai/&#34;&gt;WebAssembly – a web compilada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/&#34;&gt;Google, Microsoft, Mozilla And Others Team Up To Launch WebAssembly, A New Binary Format For The Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaydson.com/webassembly-e-o-futuro-da-web/&#34;&gt;WebAssembly e o futuro da Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brendaneich.com/2015/06/from-asm-js-to-webassembly&#34;&gt;From asm.js to webassembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/&#34;&gt;The Web is getting its bytecode: WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sobre o cenário das ferramentas de front-end&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://frontend.directory/&#34;&gt;front-end.directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radify.io/blog/using-build-tools/&#34;&gt;Using front-end build tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://usablica.github.io/front-end-frameworks/compare.html&#34;&gt;A Collection Of Best Front End Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/showcases/front-end-javascript-frameworks?s=stars&#34;&gt;GitHub: Front-end JavaScript frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/front-end-tooling-trends-2017/&#34;&gt;Front-End Tooling Trends for 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.debugme.eu/front-end-web-developer-tools/&#34;&gt;Updated List: The 67 Very Best Front End Web Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techbeacon.com/most-popular-javascript-front-end-tools&#34;&gt;The most popular JavaScript front-end tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colorlib.com/wp/top-templating-engines-for-javascript/&#34;&gt;Top 10 Templating Engines for JavaScript To Improve and Simplify Your Workflow 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/addyosmani/automating-front-end-workflow&#34;&gt;Automating Front-end Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@caiovaccaro/javascript-state-of-the-union-2015-parte-3-281aa04bece1#.bulta9j6j&#34;&gt;Javascript State of the Union 2015, parte 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/Hugeinc/javascript-state-of-the-union-2015&#34;&gt;Slides &amp;#8211; Javascript State of the Union 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results&#34;&gt;The State of Front-End Tooling 2016 &amp;#8211; Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/front-end-roles-and-responsibilities-6ee8654f1649#.gsg5zdjtr&#34;&gt;Front-end Roles and Responsibilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Crie sites em questão de minutos com o Pingendo</title>
      <link>http://tableless.com.br/crie-sites-em-questao-de-minutos-com-o-pingendo/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/crie-sites-em-questao-de-minutos-com-o-pingendo/</guid>
      <description>

&lt;p&gt;Sem dúvidas, o Bootstrap é uma das frameworks mais utilizadas ultimamente, porém, para algumas pessoas, ainda é meio complicado lidar com os códigos, sejam eles HTML, CSS ou JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-pingendo&#34;&gt;O que é o Pingendo?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pingendo.com/&#34;&gt;Pingendo&lt;/a&gt; é um programa de interface simples e de fácil uso. O Pingendo é um criador de sites em Bootstrap 3 que permite a criação de websites de maneira simples e rápida.&lt;/p&gt;

&lt;h2 id=&#34;drag-and-drop&#34;&gt;Drag and drop&lt;/h2&gt;

&lt;p&gt;O programa usa um modo muito popular em criadores de sites online como Wix, Weebly, etc. É só arrastar e soltar os elementos desejados dentro da área do site e pronto, a mágica está feita.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mGmv44Y.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;imagens&#34;&gt;Imagens&lt;/h2&gt;

&lt;p&gt;Com o Pingendo você tem a seu dispor uma ampla quantidade de imagens livres de direitos autorais e com altíssima qualidade vindas direto do &lt;a href=&#34;https://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NMxtVad.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;fontes&#34;&gt;Fontes&lt;/h2&gt;

&lt;p&gt;A alteração das fontes pode ser feita facilmente através do menu lateral do programa. As fontes são carregadas diretamente do &lt;a href=&#34;https://fonts.google.com/&#34;&gt;Google Fonts&lt;/a&gt;, um dos mais completos banco de dados de fontes da internet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9RGXujM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;cores&#34;&gt;Cores&lt;/h2&gt;

&lt;p&gt;A alteração das cores do tema também podem ser alteradas através do menu lateral, basta escolher as que mais lhe agradam.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/68jKTOb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;responsividade&#34;&gt;Responsividade&lt;/h2&gt;

&lt;p&gt;O Pingendo permite a visualização do seu projeto em telas de diversos tamanhos. Facilitando assim o teste de responsividade do seu website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dCHV33W.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;código&#34;&gt;Código&lt;/h2&gt;

&lt;p&gt;Se você possuí alguma experiencia, mesmo que mínima, em HTML e/ou CSS, pode realizar alterações direto do programa e velas sendo aplicadas em tempo real.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3Fv69GJ.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pingendo está disponível para as plataformas Mac, Windows e Linux no site &lt;a href=&#34;https://pingendo.com/&#34;&gt;www.pingendo.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teste de carga em APIs utilizando Artillery</title>
      <link>http://tableless.com.br/teste-de-carga-em-apis-utilizando-artillery/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/teste-de-carga-em-apis-utilizando-artillery/</guid>
      <description>&lt;p&gt;Independente do produto que você esteja criando, é sempre importante assegurar a qualidade do mesmo fazendo uma bateria de testes antes de colocar no mercado. Se tratando de desenvolvimento de software, existem algumas métricas que são essenciais para deixar claro para todos os envolvidos no projeto, incluindo seus usuários, o quanto determinado sistema/aplicativo é confiável para suportar o uso do público.&lt;/p&gt;

&lt;p&gt;Dentro da área de qualidade de software, existem diversos tipos de testes que visam atingir o objetivo citado acima, de mostrar a todos que o produto é estável e robusto, alguns deles: teste de integração, teste unitário, teste de penetração, teste de regressão e por aí vai.&lt;/p&gt;

&lt;p&gt;Este post tem como objetivo falar um pouco sobre o teste de carga, que em sua essência foi criado para simular quantidades diferentes de tentativa de acesso a determinado sistema ou device, tendo como saída um relatório de como o software se comportou em determinado cenário.&lt;/p&gt;

&lt;p&gt;Quando falamos de APIs e escalonamento de infra, é interessante saber o número exato de requisições que o servidor (ou servidores) consegue responder corretamente em um tempo aceitável para seus clientes.&lt;/p&gt;

&lt;p&gt;Caso você já tenha tentado fazer algo do tipo, provavelmente se deparou com o JMeter, que é uma das ferramentas mais famosas e completas para esse tipo de trabalho. Porém, a curva de aprendizado com o JMeter é um pouco longa, pois existem muitas configurações/opções que o usuário acaba se perdendo no início, até encontrar o que realmente precisa para o seu caso.&lt;figure class=&#34;graf graf--figure&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;graf-image&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*1hZHPrQKHwCctBX7bFOPmw.png&#34; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Na tentativa de tornar esse processo de teste de carga um pouco mais amigável ao usuário, foi criado o &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://artillery.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Artillery&lt;/a&gt;, uma ferramenta que com poucos passos permite você simular diversos tipos de cenários para teste de serviços que estejam utilizando para comunicação http e/ou web sockets.&lt;/p&gt;

&lt;p&gt;Basicamente você precisa ter o &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node&lt;/a&gt; e o &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://www.npmjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;npm&lt;/a&gt; instalado para poder começar a brincadeira.&lt;/p&gt;

&lt;p&gt;Para instalar o Artillery:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ npm install -g artillery&lt;/pre&gt;

&lt;p&gt;Para testar sua instalação:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ artillery dino&lt;/pre&gt;

&lt;p&gt;Caso tenha aparecido um dinossauro em seu terminal, está tudo certo e você pode seguir adiante.&lt;/p&gt;

&lt;p&gt;Para começar a rodar seus testes de carga, é necessário criar um arquivo de configuração. Você pode dar qualquer nome a ele, mas para esse artigo, criarei um chamado &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;artillery.yml&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Neste cara que você colocará todas as informações referentes a sua API, como endpoint, rotas e cenários. Você pode tanto testar rotas/recursos isolados, quanto cenários mais complexos, como por exemplo um processo de compra em um ecommerce, que basicamente teria uma rota para buscar os produtos, outra pra fazer checkout e outra para pagamento.&lt;/p&gt;

&lt;p&gt;Segue abaixo um exemplo desse arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;config:
  target: &#39;&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://localhost:3000%27&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener noopener&#34;&gt;http://localhost:3000&#39;&lt;/a&gt;
  phases:
    - duration: 60
      arrivalRate: 20
scenarios:
  -
    name: &#39;Listagem de usuários&#39;
    flow:
    - get:
        url: &#34;/users&#34;&lt;/pre&gt;

&lt;p&gt;No arquivo acima colocamos o endpoint da nossa API, o atributo &lt;em&gt;duration&lt;/em&gt; representa a duração deste ciclo de teste em segundos e o &lt;em&gt;arrivalRate&lt;/em&gt; o número de novos usuários por segundo.&lt;/p&gt;

&lt;p&gt;Para rodar o teste, rode o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ artillery run artillery.yml&lt;/pre&gt;

&lt;p&gt;Após a execução, temos o seguinte resultado:&lt;figure class=&#34;graf graf--figure&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;graf-image&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*iuh0Z_BoqM4epjC2pOvt_A.png&#34; /&gt;&lt;figcaption class=&#34;imageCaption&#34;&gt;Output do Artillery&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Todas as métricas de tempo são em milis, &lt;em class=&#34;markup--em markup--p-em&#34;&gt;RPS&lt;/em&gt; (request per second), &lt;em class=&#34;markup--em markup--p-em&#34;&gt;codes&lt;/em&gt; são os códigos HTTP e o número de respostas com o mesmo, no caso acima, tivemos 1200 (60&amp;#215;20, como configuramos) requisições em 60 segundos e todas retornaram 200. &lt;em class=&#34;markup--em markup--p-em&#34;&gt;Scenarios launched&lt;/em&gt; são os ‘usuários virtuais’ criados e &lt;em class=&#34;markup--em markup--p-em&#34;&gt;Scenarios completed&lt;/em&gt; são quantos deles conseguiram executar o cenário com sucesso.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Importante: &lt;/strong&gt;Enquanto o teste estiver rodando, um preview do resultado vai sendo printado no terminal a cada 10 segundos, mas só no final você tem os números consolidados do teste completo.&lt;/p&gt;

&lt;p&gt;Agora você pode ir alterando números de usuários concorrentes, quantidade de tempo do teste, novos cenários, simulando fluxos mais complexos e etc.&lt;/p&gt;

&lt;p&gt;Vale a pena dar uma olhada na &lt;a href=&#34;https://artillery.io/docs/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentação&lt;/a&gt; que é super objetiva e simples de entender.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UX: Como aumentar a tolerância do usuário para atrasos</title>
      <link>http://tableless.com.br/ux-como-aumentar-tolerancia-do-usuario-para-atrasos/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/ux-como-aumentar-tolerancia-do-usuario-para-atrasos/</guid>
      <description>&lt;p&gt;Vivemos em um tempo onde velocidade é diferencial. Exigimos rapidez de tudo ao nosso redor, seja em um atendimento, em uma entrega de produto, na velocidade da Internet, no feedback do cliente, na estratégia de SEO do nosso site, entre tantos outros exemplos que poderiam ser citados. A realidade é evidente: esperar é doloroso.&lt;/p&gt;

&lt;p&gt;E em um cenário onde rapidez é fator de satisfação, a espera pode influenciar negativamente no valor de um produto ou serviço oferecido. Quando pensamos em UX temos de pensar em todo e qualquer motivo que possa atrapalhar a boa experiência do usuário, e principalmente, naqueles que possam impedir que ele chegue ao seu objetivo.&lt;/p&gt;

&lt;p&gt;Temos inúmeros exemplos em nosso cotidiano de tentativas de minimizar a dor da espera, como por exemplo, ao invés daquela música instrumental repetitiva, alguns canais de telemarketing optam por sons de propaganda ou até dicas de como resolver problemas frequentes de consumidores enquanto aguardam na linha para falar com o atendente. Quem nunca na fila da loja ou do supermercado, enquanto esperava, decidiu pegar mais uma balinha, um chocolate, ou uma revista que ficava bem ao lado da fila do caixa?&lt;/p&gt;

&lt;p&gt;O tempo de espera, enquanto você está fazendo outra coisa é percebido como muito mais curto do que quando esperamos estaticamente, sem qualquer tipo de distração. Os usuários esperam com menos incômodo quando se distraem com outra coisa, do que quando olham para a tela e veem somente um círculo girando continuamente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quando esperar vale a pena?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apesar do constante desejo por velocidade, também precisamos de resultados de qualidade, e muitas das vezes qualidade requer mais esforço e consequentemente leva mais tempo. Sendo assim, a espera ela passa a ser justificada e compreendida pelo usuário, quando é possível para ele identificar o esforço empregado.&lt;/p&gt;

&lt;p&gt;Mas como identificar o esforço de uma ferramenta online, de um site, de um app, de um computador, de um celular ou de qualquer outro produto ou serviço cujo esforço não é visível?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desafio de UX&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como podemos projetar interfaces que são percebidas como sendo mais rápidas do que realmente são? Como aumentar a tolerância do usuário para atrasos na entrega dos resultados?&lt;/p&gt;

&lt;p&gt;O esforço empregado para qualidade e que deve ser identificado pelo usuário para compreensão da espera, em ambiente digital é o equivalente à transparência do que está sendo feito.&lt;/p&gt;

&lt;p&gt;O usuário precisa ver o andamento, precisa identificar o que está sendo feito e encontrar uma justificativa do porquê ele está esperando. Quando abrimos o Photoshop, por exemplo, ele abre sua tela de inicialização e começa a me mostrar informações como: “Inicializando&amp;#8230;”, “Lendo o arquivo x&amp;#8230;”, “Incluindo y&amp;#8230;” e estes dados me confortam muito mais do que se fosse algo estático. Vejo que algo está sendo feito e quanto mais rápidas as informações são mostradas, tenho a real sensação que não vou ter de esperar tanto tempo para utilizá-lo.&lt;/p&gt;

&lt;p&gt;Em um experimento da Harvard Business School, os participantes tinham de escolher a melhor experiência entre dois sites com resultados idênticos e experiências diferentes. Um site devolvia o resultado instantaneamente, já o segundo site demorava cerca de 30 a 60 segundos e variava entre mostrar a transparência do processo ou não. Como resultado, 62% dos participantes preferiram a experiência de usuário com transparência no processo.&lt;/p&gt;

&lt;p&gt;Vale ressaltar também um caso polêmico para a área, onde o UX Designer Graeme Pyle, publicou um vídeo sobre uma progress bar falsa que ele encontrou. No vídeo, Pyle mostra que o andamento da barra evolui mesmo sem conexão com a Internet, e que ainda tenta ser realista dando pequenas pausas durante o progresso. Vale a pena uma transparência falsa? Pense no impacto negativo de uma falsa experiência para os usuários.&lt;/p&gt;

&lt;p&gt;Link do vídeo: &lt;a href=&#34;https://www.youtube.com/watch?v=gpBWwl-Ngak&#34;&gt;https://www.youtube.com/watch?v=gpBWwl-Ngak&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A transparência é sempre a solução?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sabemos que nem toda solução convém para todos os projetos. A transparência ela é útil sim, mas de nada adianta se o tempo de espera for muito grande. Mesmo não havendo um tempo uma regra sobre o tempo tolerável de espera, é necessário estudar e ver qual a duração ideal. Sendo assim, caso o atraso esteja fora do tempo favorável devo encarar reduzir o tempo como prioritário em relação a implementação da transparência.&lt;/p&gt;

&lt;p&gt;Outra informação importante é que os resultados oferecidos têm de ser úteis e de qualidade, em relação ao que foi solicitado, pois mesmo com uma experiência adequada durante o tempo de espera, se o usuário não receber resultados satisfatórios, a experiência volta a ser péssima.&lt;/p&gt;

&lt;p&gt;Deve se considerar que nenhuma demonstração de esforço supera um mal funcionamento. Se o produto ou serviço não funciona bem posso implementar milhões de alternativas mas no fim, a experiência nunca será agradável.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como criar aplicações em tempo real usando Node.js e RethinkDB</title>
      <link>http://tableless.com.br/como-criar-aplicacoes-em-tempo-real-usando-node-js-e-rethinkdb/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-criar-aplicacoes-em-tempo-real-usando-node-js-e-rethinkdb/</guid>
      <description>

&lt;h2 id=&#34;sobre-o-rethinkdb&#34;&gt;Sobre o RethinkDB&lt;/h2&gt;

&lt;p&gt;Se você precisa de um banco de dados NoSQL que funcione com dados JSON e tenha suporte completo para buscas em tempo real e uma mistura de modelos entre SQL e NoSQL, então uma boa opção é o RethinkDB.&lt;/p&gt;

&lt;p&gt;Trata-se de uma base de dados em código aberto em que todos os dados JSON são persistidos em tabelas como um banco de dados SQL convencional, permitindo que você execute queries entre múltiplas tabelas utilizando o comando clássico &lt;strong&gt;join&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mas você também pode persistir arrays e sub-documentos como está acostumado a fazer com o MongoDB, CouchDB ou PostgreSQL.&lt;/p&gt;

&lt;p&gt;Há alguns materiais bacanas no RethinkDB, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Suporte ao GeoSpartial;&lt;/li&gt;
&lt;li&gt;API para lidar com strings, datas, booleanos e documentos;&lt;/li&gt;
&lt;li&gt;API para Math;&lt;/li&gt;
&lt;li&gt;Suporte ao Map-reduce;&lt;/li&gt;
&lt;li&gt;Cliente HTTP para capturar alguns dados externos;&lt;/li&gt;
&lt;li&gt;Changefeeds , que é uma busca em tempo real;&lt;/li&gt;
&lt;li&gt;Suporte para index (simples, composto e multi);&lt;/li&gt;
&lt;li&gt;Painel de administrador nativo da web;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;desenvolvendo-o-aplicativo&#34;&gt;Desenvolvendo o aplicativo&lt;/h2&gt;

&lt;p&gt;E então, que tal desenvolver algo útil usando o RethinkDB? Para explorar a busca em tempo real, vamos construir uma timeline global simples utilizando o recurso &lt;a href=&#34;http://rethinkdb.com/docs/changefeeds/javascript&#34;&gt;changefeed&lt;/a&gt; para listar todos os dados na timeline em tempo real, com o uso do Node.js, Express, Socket.IO e o RethinkDB.&lt;/p&gt;

&lt;p&gt;Primeiro, você precisa instalar o RethinkDB. Antes de começar escrevendo os códigos abaixo, para instalar esse banco de dados eu recomendo que você leia e siga as instruções deste link &lt;a href=&#34;http://rethinkdb.com/docs/install&#34;&gt;http://rethinkdb.com/docs/install&lt;/a&gt; de acordo com seu sistema operacional.&lt;/p&gt;

&lt;p&gt;Depois de instalá-lo, execute os comandos abaixo para iniciar o projeto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;mkdir timeline
cd timeline
npm init
npm install--save express socket.io rethinkdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora, vamos trabalhar! Para simplificar as coisas nós vamos usar o código do ES6 da versão nativa &lt;strong&gt;Node v6.x.x&lt;/strong&gt;, e o backend será um único arquivo de código para fins de estudo, mas se você precisa desenvolver um servidor backend complexo e bem estruturado utilizando o RethinkDB, dê uma olhada neste projeto &lt;a href=&#34;https://github.com/caio-ribeiro-pereira/node-api-examples&#34;&gt;node-api-examples&lt;/a&gt;, o qual possui uma lista com alguns exemplos de APIs utilizando os mesmos roteadores web e bancos de dados. Existem alguns exemplos do uso do RethinkDB com Koa, Express e o Hapi.js.&lt;/p&gt;

&lt;p&gt;Bem, vamos criar o servidor backend de nossa aplicação. Você pode criar o arquivo &lt;code&gt;index.js&lt;/code&gt; por meio do código abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const http = require(&#39;http&#39;);
const fs = require(&#39;fs&#39;);
const express = require(&#39;express&#39;);
const socketIO = require(&#39;socket.io&#39;);
const r = require(&#39;rethinkdb&#39;);
const config = require(&#39;./config.json&#39;);

// Loading Express, HTTP, Socket.IO and RethinkDB
const db = Object.assign(config.rethinkdb, {
    db: &#39;timeline&#39;
});
const app = express();
const server = http.Server(app);
const io = socketIO(server);

// Connecting to RethinkDB server
r.connect(db)
    .then(conn =&amp;gt; {
        // Index route which renders the index.html
        app.get(&#39;/&#39;, (req, res) =&amp;gt; {
            fs.readFile(`${__dirname}/index.html`, (err, html) =&amp;gt; {
                res.end(html || err);
            });
        });
        // The changefeed is provided by change() function
        // which emits broadcast of new messages for all clients
        r.table(&#39;messages&#39;)
            .changes()
            .run(conn)
            .then(cursor =&amp;gt; {
                cursor.each((err, data) =&amp;gt; {
                    const message = data.new_val;
                    io.sockets.emit(&#39;/messages&#39;, message);
                });
            });
        // Listing all messages when new user connects into socket.io
        io.on(&#39;connection&#39;, (client) =&amp;gt; {
            r.table(&#39;messages&#39;)
                .run(conn)
                .then(cursor =&amp;gt; {
                    cursor.each((err, message) =&amp;gt; {
                        io.sockets.emit(&#39;/messages&#39;, message);
                    });
                });
            // Listening the event from client and insert new messages
            client.on(&#39;/messages&#39;, (body) =&amp;gt; {
                const {
                    name,
                    message
                } = body;
                const data = {
                    name,
                    message,
                    date: new Date()
                };
                r.table(&#39;messages&#39;).insert(data).run(conn);
            });
        });
        server.listen(3000, () =&amp;gt; console.log(&#39;Timeline Server!&#39;));
    })
    .error(err =&amp;gt; {
        console.log(&#39;Can\&#39;t connect to RethinkDB&#39;);
        throw err;
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existem alguns detalhes importantes que você precisa saber quando for usar o RethinkDB. Primeiro, todas as funções desse módulo funcionam usando callbacks ou &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promessas&lt;/a&gt;. Se você escolher as promessas, você pode criar funções assíncronas bem estruturadas com gerentes de erros melhores.&lt;/p&gt;

&lt;p&gt;O recurso &lt;strong&gt;changefeed&lt;/strong&gt; (via &lt;code&gt;r.table(&#39;messages&#39;).changes()&lt;/code&gt;) é um subscriber do banco de dados, o qual é uma query observadora e retorna qualquer modificação de uma tabela. A combinação com o &lt;code&gt;io.sockets.emit()&lt;/code&gt; permite que o servidor envie dados em tempo real para o cliente.&lt;/p&gt;

&lt;p&gt;Agora, vamos criar um script simples de migração para preparar o banco de dados antes de rodar o servidor. Essa migração é muito comum em bancos de dados relacionais. Crie o arquivo &lt;code&gt;database.js&lt;/code&gt; com o script abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const r = require(&#39;rethinkdb&#39;);
const config = require(&#39;./config.json&#39;);
let conn;

r.connect(config.rethinkdb)
    .then(connection =&amp;gt; {
        console.log(&#39;Connecting RethinkDB...&#39;);
        conn = connection;
        return r.dbCreate(&#39;timeline&#39;).run(conn);
    })
    .then(() =&amp;gt; {
        console.log(&#39;Database &#34;timeline&#34; created!&#39;);
        return r.db(&#39;timeline&#39;).tableCreate(&#39;messages&#39;).run(conn);
    })
    .then(() =&amp;gt; console.log(&#39;Table &#34;messages&#34; created!&#39;))
    .error(err =&amp;gt; console.log(err))
    .finally(() =&amp;gt; process.exit(0));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E não se esqueça de criar o arquivo &lt;code&gt;config.json&lt;/code&gt;, o qual possui dados para conectar no servidor RethinkDB:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;{
    &#34;rethinkdb&#34;: {
        &#34;host&#34;: &#34;localhost&#34;,
        &#34;port&#34;: 28015
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para finalizar nossa aplicação, precisamos criar o arquivo &lt;code&gt;index.html&lt;/code&gt;, que será a parte do lado do cliente para os usuários enviarem mensagens na timeline.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
    &amp;lt;title&amp;gt;Timeline&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1&#34;&amp;gt;
    &amp;lt;script src=&#34;http://tableless.com.br/socket.io/socket.io.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;form style=&#34;text-align:center;margin:50px 0&#34;&amp;gt;
        &amp;lt;label for=&#34;name&#34;&amp;gt;Name:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&#34;text&#34; id=&#34;name&#34; /&amp;gt;
        &amp;lt;label for=&#34;message&#34;&amp;gt;Message:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&#34;text&#34; id=&#34;message&#34; /&amp;gt;
        &amp;lt;button type=&#34;submit&#34;&amp;gt;Send&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;fieldset style=&#34;padding: 20px;width:50%;margin:0 auto&#34;&amp;gt;
        &amp;lt;legend style=&#34;text-align:center&#34;&amp;gt;Timeline&amp;lt;/legend&amp;gt;
        &amp;lt;p id=&#34;messages&#34;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/fieldset&amp;gt;
    &amp;lt;script&amp;gt;
        (function() {
            var socket = io();
            var form = document.querySelector(&#39;form&#39;);
            form.addEventListener(&#39;submit&#39;, function(e) {
                e.preventDefault();
                var name = e.target.querySelector(&#39;#name&#39;);
                var message = e.target.querySelector(&#39;#message&#39;);
                var data = {
                    name: name.value,
                    message: message.value
                };
                socket.emit(&#39;/messages&#39;, data);
                e.target.reset();
            });
            socket.on(&#39;/messages&#39;, function(data) {
                var messages = document.querySelector(&#39;#messages&#39;);
                var message = &#39;&amp;lt;b&amp;gt;&#39; + data.name + &#39;:&amp;lt;/b&amp;gt; &#39; +
                    data.message + &#39;&amp;lt;br /&amp;gt;&#39;;
                messages.innerHTML += message;
            });
        })();
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora nós estamos prontos para rodar essa aplicação! Mas antes de iniciar o servidor, na primeira vez você deve executar a migração do banco de dados para criar o banco de dados e tabela para este projeto. Para isso, execute o seguinte comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node database.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se tudo der certo, você pode iniciar o servidor ao executar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E você pode brincar enviando mensagens nesta aplicação acessando o endereço &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;protegendo-o-aplicativo&#34;&gt;Protegendo o aplicativo&lt;/h2&gt;

&lt;p&gt;Se quiser saber mais sobre como começar protegendo seu aplicativo, basta acessar este &lt;a href=&#34;https://blog.jscrambler.com/jscrambler-101-first-use&#34;&gt;tutorial&lt;/a&gt;, que irá ajudar nos primeiros passos de uso do &lt;a href=&#34;https://www.jscrambler.com&#34;&gt;Jscrambler&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O RethinkDB é o incrível NoSQL! Esse banco de dados pode oferecer suporte total para aplicações de tempo real apenas utilizando o changefeed + socket.io. &lt;a href=&#34;http://rethinkdb.com/docs/changefeeds/javascript&#34;&gt;Neste link&lt;/a&gt;, você pode ler mais sobre o que é possível criar usando o changefeeds. Quase todas as funções podem executar usando as Promises, que fazem com que você escreva um código melhor e você pode facilmente usar o recurso &lt;strong&gt;ES7 async/await&lt;/strong&gt; para simplificar as funções de promessas também.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Conselhos de um simples programador</title>
      <link>http://tableless.com.br/conselhos-de-um-simples-programador/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/conselhos-de-um-simples-programador/</guid>
      <description>&lt;p&gt;Aqui estão conselhos de um simples programador ou apenas algumas situações que vivenciei na minha vida.&lt;/p&gt;

&lt;p&gt;Você também vai passar por várias fases como programador, momentos de fazer gambiaras, pois tem etapas que vai querer fugir daquele projeto chato. Mas também vai viver momentos em que o código importará mais que qualquer resultado. Com certeza você também vai passar por várias situações difíceis, e possivelmente vai pensar em desistir da carreira. Mas lembre-se, esta fase vai passar.&lt;/p&gt;

&lt;p&gt;Esta iniciando na programação? Vai com calma, não queira aprender tudo em um só dia, mantenha seu foco principal em aprimorar a sua lógica. No começo tudo é muito difícil, mas não desista, estude e persista. Aos poucos você vai gravando os comandos automaticamente e vai se preocupar com outras coisas. E se tiver com tempo para reinventar a roda, vai la, e constrói da sua forma, o aprendizado é enorme.&lt;/p&gt;

&lt;p&gt;Em alguns momentos você vai se achar o melhor programador no planeta, após fazer uma função limpa e funcional. Em outros o pior, ao perceber que o seu colega, aquele logo ao seu lado, tem mais de 300 dias contribuídos ao ano no Github.&lt;/p&gt;

&lt;p&gt;Não lhe desejo um colega programador chato, um designer, tester ou um usuário. Pois você será considerado o “estraga sonhos” e possivelmente vai irritar-se facilmente com a infinidade de pedidos. Mas lembre-se, se tudo der errado, apenas não deixe o sujeito abusar. E se você tornar um excelente programador, não banque o dono da verdade, um dia você também foi um sobrinho.&lt;/p&gt;

&lt;p&gt;Se não conseguir fazer algo, por mais simples que pareça. Acredite, eu já fiz mais de 100 linhas em uma matriz, apenas por não conhecer um simples for. Seja compreensivo consigo mesmo e corra atrás. Valorize seu código e quando necessário discuta e critique pelo que é certo. Não tenha medo de perder seu emprego, geralmente a covardia levará fazer coisas erradas.&lt;/p&gt;

&lt;p&gt;Sempre vai ter alguém melhor que você em algo, não tenha medo ou vergonha de perguntar, por mais que alguém ria, você acabou de evoluir, agora a sensação de conhecimento só diminuiu, com a infinidade de linguagens, frameworks, conceitos, estruturas e métodos existentes.&lt;/p&gt;

&lt;p&gt;Com o aumento de opções, me sinto cada vez mais uma fraude. Sim, tenho a síndrome do impostor, você pode saber mais sobre &lt;a href=&#34;https://willianjusten.com.br/sou-bom-o-suficiente/&#34;&gt;aqui&lt;/a&gt;. Ainda não encontrei a fórmula para me livrar-me, mas espero que esse artigo indicado te ajude, assim como esta me ajudando.&lt;/p&gt;

&lt;p&gt;E antes que me esqueça, vou lhe deixar o melhor conselho, aprenda a dizer “não”. Em algumas ocasiões não será possível, mas com certeza salvará sua vida, por mais odiado que seja por outras pessoas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Silex 2 &amp; Middlewares 101 – Parte 02</title>
      <link>http://tableless.com.br/silex-2-middlewares-101-parte-02/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/silex-2-middlewares-101-parte-02/</guid>
      <description>

&lt;p&gt;Estamos de volta com mais um post da série sobre o micro-framework Silex! Desta vez, vamos fazer uma parada para atualizar a versão do nosso micro-framework, para versão 2.*!&lt;/p&gt;

&lt;p&gt;A partir deste post vamos escrever baseada nesta versão e falaremos ao longo de cada post, sobre as principais diferenças em relação as versões passadas! Vamos lá!&lt;/p&gt;

&lt;h2 id=&#34;silex-2&#34;&gt;Silex 2&lt;/h2&gt;

&lt;p&gt;Uma das grandes mudanças do micro-framework, foi o seu componente de Dependency Injection, o Pimple. O que impactou diretamente na parte de services.  Houveram algumas implementações na parte de controllers básicos e também alguns serviços internos que foram renomeados ou integrados diretamente no micro-fw. Como comentei, veremos cada particularidade nas mudanças ao longo dos posts!&lt;/p&gt;

&lt;h3 id=&#34;atualizando-para-a-versa-o-2&#34;&gt;Atualizando para a versão 2&lt;/h3&gt;

&lt;p&gt;Para atualizarmos o Silex para sua versão mais recente, precisamos alterar nosso arquivo composer.json. Nosso composer.json fica da seguinte forma, em relação ao &lt;a href=&#34;https://tableless.com.br/conhecendo-e-instalando-o-silex/&#34; target=&#34;_blank&#34;&gt;primeiro post&lt;/a&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-json&#34;&gt;{
    &#34;require&#34; : {
    &#34;silex/silex&#34; : &#34;2.*&#34;
    }
}
&lt;/pre&gt;

&lt;p&gt;Agora, basta executarmos um composer update em nosso terminal para obtermos o Silex atualizado!&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-57045 aligncenter&#34; src=&#34;uploads/2017/01/Screen-Shot-2017-01-23-at-13.36.09.png&#34; alt=&#34;&#34; width=&#34;582&#34; height=&#34;631&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;middlewares-continuação&#34;&gt;Middlewares (Continuação)&lt;/h2&gt;

&lt;p&gt;Em &lt;a href=&#34;https://tableless.com.br/silex-middlewares-101-parte-1/&#34; target=&#34;_blank&#34;&gt;nosso último post&lt;/a&gt;, da série, falamos sobre os middlewares de aplicação, como vimos, seu impacto abrange todo o app!&lt;/p&gt;

&lt;h3 id=&#34;middlewares-de-rota&#34;&gt;Middlewares de Rota&lt;/h3&gt;

&lt;p&gt;A diferença entre os middlewares de rota pros middlewares de aplicação, além do escopo que abrange apenas a rota na qual o middleware está definido, é que os middlewares de rota não possuem o método &lt;code&gt;finish&lt;/code&gt;, apenas o &lt;code&gt;before&lt;/code&gt; e o &lt;code&gt;after&lt;/code&gt;. O comportamento é o mesmo. Veja o código a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
require __DIR__ . &#39;/vendor/autoload.php&#39;;

use Silex\Application;

$app = new Application();
$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Router Content!&#39;);
})
-&amp;gt;before(function(){
    print &#39;Before Route Middleware | &#39;;
})
-&amp;gt;after(function(){ print &#39; After Route Middleware&#39;; }); 

$app-&amp;gt;run();&lt;/pre&gt;

&lt;p&gt;No código acima temos os dois middlewares de rotas disponíveis, porém os mesmos só serão executados quando acessarmos a rota / (Rota principal de nosso app), mantendo o mesmo comportamento dos de aplicação.&lt;/p&gt;

&lt;h3 id=&#34;definindo-ordem-de-execução&#34;&gt;Definindo ordem de execução&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Podemos encadear quantos middlewares quisermos, para Rota e para Aplicação, e também definirmos uma ordem de execução.  Por padrão, os middlewares serão executados na ordem em que estão escritos, seguindo suas regras! Porém, o Silex nos disponibiliza duas constantes para alterarmos a ordem de execução dos mesmos. São elas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Application::EARLY_EVENT;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Application::LATE_EVENT;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vejamos o código a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$app = new Application();
$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Router Content!&#39;);
})
-&amp;gt;before(function(){
    print &#39;Executará segundo por conta do LateEvent&#39;;
}, Application::LATE_EVENT)
-&amp;gt;before(function(){ 
    print &#39;Executará primeiro por conta do EarlyEvent&#39;; 
}, Application::EARLY_EVENT); 
&lt;/pre&gt;

&lt;p&gt;O código acima, por padrão, executaria os middlewares before na ordem em que seguem, porém o primeiro middleware a ser executado será o segundo before e logo em seguida o primeiro before definido. Isso acontece por conta da ordem de prioridade estabelecida com as contantes, onde, tudo que tiver EARLY_EVENT executará primeiro, e LATE_EVENT executará por último.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Bom, vamos chegando ao fim de mais um post sobre o micro-framework Silex, até o momento já temos o conhecimento geral de como os middlewares funcionam e com certeza eles serão bem úteis em determinados cenários quando você estiver utilizando o Silex em suas criações! Nas próximas postagens falaremos mais sobre o micro-framework, especificamente sobre como os Services trabalham! Nos vemos lá!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando a sua primeira aplicação web com React</title>
      <link>http://tableless.com.br/criando-sua-primeira-aplicacao-web-com-react/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-sua-primeira-aplicacao-web-com-react/</guid>
      <description>

&lt;p&gt;Você já deve ter ouvido falar do React, a biblioteca JS mais popular da atualidade, usado por várias empresas grandes como Facebook, Airbnb e Twitter. A ideia desse artigo é demonstrar a criação de uma aplicação simples, que use as principais partes do React. Neste tutorial nós iremos ver:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Componentes&lt;/li&gt;
&lt;li&gt;Componentes puros/funcionais&lt;/li&gt;
&lt;li&gt;O uso do &lt;em&gt;state&lt;/em&gt; vs &lt;em&gt;props&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todos os exemplos deste tutorial serão escritos em ES6. Se você não sabe ES6 &lt;a href=&#34;https://github.com/ldaltro/guia-basico-ES6&#34;&gt;leia esse artigo antes&lt;/a&gt;. Se você é impaciente demais para isso considere que:&lt;/p&gt;

&lt;p&gt;ES6:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const foo = 42; // const declara uma constante
let bar = 5; // let declara uma variável
&lt;/pre&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const soma = (a, b) =&amp;gt; a + b;
ou 
const soma = (a, b) =&amp;gt; { return a + b; };
&lt;/pre&gt;

&lt;p&gt;ES5:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var soma = function (a, b) {
  return a + b;
};
&lt;/pre&gt;

&lt;p&gt;ES6:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import React from &#39;react&#39;;
&lt;/pre&gt;

&lt;p&gt;ES5:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;);
&lt;/pre&gt;

&lt;p&gt;ES6:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class MeuComponente extends React.Component {
  render() {
    return ();
  }
} 
&lt;/pre&gt;

&lt;p&gt;ES5:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var MeuComponente = React.createClass({
  render: function(){
    return ();
  }
});&lt;/pre&gt;

&lt;p&gt;Outro pré-requisito para o tutorial é ter o &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; instalado na sua máquina. Se você ainda não fez isso, clique &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;aqui&lt;/a&gt; e siga as instruções, dependendo do seu sistema operacional.&lt;/p&gt;

&lt;h2 id=&#34;afinal-o-que-é-react&#34;&gt;Afinal, o que é React?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; é uma biblioteca criada pelo Facebook em 2013 com o objetivo de tornar o desenvolvimento de &lt;em&gt;Single Page Applications&lt;/em&gt; (SPAs) mais fácil. A biblioteca se baseia em alguns conceitos como:&lt;/p&gt;

&lt;h3 id=&#34;componentes&#34;&gt;Componentes&lt;/h3&gt;

&lt;p&gt;Uma aplicação React é dividida em componentes, ou seja, pequenos pedaços de código responsáveis por alguma parte da UI. Um componente ideal é independente e reutilizável, capaz de retornar a resposta esperada usando apenas dados genéricos enviados por outras partes da aplicação.&lt;/p&gt;

&lt;p&gt;Um exemplo de componente React interessante pode ser visto &lt;a href=&#34;https://github.com/tomchentw/react-google-maps&#34;&gt;nessa biblioteca de mapas&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&amp;lt;&lt;span class=&#34;pl-ent&#34;&gt;&lt;span class=&#34;pl-c1&#34;&gt;GoogleMap&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;&lt;span class=&#34;pl-smi&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pl-smi&#34;&gt;onMapLoad&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;defaultZoom&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;&lt;span class=&#34;pl-c1&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;defaultCenter&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;{&lt;span class=&#34;pl-c1&#34;&gt; &lt;span class=&#34;pl-s&#34;&gt;lat&lt;/span&gt;:&lt;/span&gt; &lt;span class=&#34;pl-c1&#34;&gt;-25.363882&lt;/span&gt;,&lt;span class=&#34;pl-c1&#34;&gt; &lt;span class=&#34;pl-s&#34;&gt;lng&lt;/span&gt;:&lt;/span&gt; &lt;span class=&#34;pl-c1&#34;&gt;131.044922&lt;/span&gt; }&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;&lt;span class=&#34;pl-smi&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pl-smi&#34;&gt;onMapClick&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
  &amp;gt;
&amp;lt;/&lt;span class=&#34;pl-ent&#34;&gt;&lt;span class=&#34;pl-c1&#34;&gt;GoogleMap&lt;/span&gt;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Graças ao componentes do React, podemos importar um mapa do Google Maps e usá-lo como se fosse uma tag nativa de HTML, passando apenas as propriedades que nós queremos no componente, como &lt;em&gt;defaultZoom&lt;/em&gt; e &lt;em&gt;defaultCenter&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;jsx&#34;&gt;JSX&lt;/h3&gt;

&lt;p&gt;Em React nós não usamos HTML, toda a marcação é feita no JavaScript, com uma sintaxe baseada em XML chamada JSX. A ideia pode parecer bem maluca no começo mas vai fazer sentido assim que você começar a escrever os seus próprios componentes. JSX parece bastante com HTML mas existem algumas diferenças como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Todas as tags devem ser fechadas&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Podemos colocar expressões JavaScript dentro do JSX usando {}. Ex.: &lt;pre class=&#34;lang-javascript&#34;&gt;function ola() {
return &amp;ldquo;ola&amp;rdquo;;
}
&amp;lt;p&amp;gt;{2 + 2}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{ola()}&amp;lt;/p&amp;gt;&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Como o JSX fica dentro de arquivos &amp;#8216;.js&amp;#8217; a palavra &lt;em&gt;class&lt;/em&gt; não pode ser usada. Em seu lugar, devemos usar &lt;em&gt;className&lt;/em&gt;. Ex.: &lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;h1 className=&amp;ldquo;titulo&amp;rdquo;&amp;gt;Olá!&amp;lt;/h1&amp;gt;
&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por debaixo dos panos, usamos o &lt;strong&gt;Babel&lt;/strong&gt; para converter o JSX em funções comuns de JavaScript, logo, esse código:&lt;/p&gt;

&lt;pre&gt;&amp;lt;div&amp;gt;Olá mundo&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Fica assim:&lt;/p&gt;

&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &#34;Olá mundo&#34;&lt;span class=&#34;p&#34;&gt;);
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Leia mais sobre JSX &lt;a href=&#34;https://facebook.github.io/react/docs/introducing-jsx.html&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;virtual-dom&#34;&gt;Virtual DOM&lt;/h3&gt;

&lt;p&gt;Para evitar updates custosos e desnecessários, o React não escreve as alterações diretamente na DOM. Ao invés disso, a biblioteca cria uma cópia da árvore de componentes em memória e esta cópia (Virtual DOM) é quem recebe os updates primeiro. Depois que a Virtual DOM é atualizada o React calcula a maneira mais eficiente de atualizar a árvore DOM real usando um algoritmo de &lt;em&gt;diffing.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;pondo-a-mão-na-massa&#34;&gt;Pondo a mão na massa&lt;/h2&gt;

&lt;p&gt;Ok, chega de tanta teoria, vamos por a mão na massa! Abra o seu terminal e vamos instalar um pacote que vai nos ajudar a criar nossas aplicações o &lt;strong&gt;&lt;a href=&#34;https://github.com/facebookincubator/create-react-app&#34;&gt;create-react-app&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;npm install create-react-app&lt;/pre&gt;

&lt;p&gt;Montar um ambiente de desenvolvimento capaz de suportar React costumava ser uma tarefa complicada (&lt;a href=&#34;https://tableless.com.br/hello-world-com-react-do-rascunho-ate-o-primeiro-componente/&#34;&gt;esse tutorial do Diego Eis explica muito bem a criação de um ambiente &amp;#8220;na mão&amp;#8221;&lt;/a&gt;). Por causa disso, o Facebook inventou um pacote chamado &lt;em&gt;create-react-app&lt;/em&gt;, que cria um ambiente com tudo o que nós precisamos para começar o nosso projeto (React, ES6 e webpack).&lt;/p&gt;

&lt;p&gt;Depois de instalar o pacote, vamos criar um novo projeto. No terminal digite:&lt;/p&gt;

&lt;pre class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;create-react-app vamos-aprender-react&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Depois de alguns minutos todas as dependências estão instaladas e &lt;em&gt;voilà!&lt;/em&gt; Temos um projeto pronto para ser criado.&lt;/p&gt;

&lt;p&gt;Com o terminal do diretório do seu projeto digite:&lt;/p&gt;

&lt;pre&gt;npm start&lt;/pre&gt;

&lt;p&gt;Se tudo deu certo, o seu browser em &lt;em&gt;&lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/em&gt; deve estar assim:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57013 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-19.29.35.png&#34; alt=&#34;Imagem ilustrativa do create-react-app&#34; width=&#34;1438&#34; height=&#34;748&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Parabéns! Você acabou de criar a sua primeira aplicação com React! Vamos dar uma olhada no que foi gerado:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57015 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-19.34.30.png&#34; alt=&#34;Estrutura de pastas do create-react-app&#34; width=&#34;232&#34; height=&#34;415&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como podemos ver, a pastar &lt;em&gt;src&lt;/em&gt; contém todos os nosso componentes React. Dentro de &lt;em&gt;src&lt;/em&gt; abra o arquivo &lt;em&gt;index.js&lt;/em&gt;, ele deve conter algo desse tipo:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./App&#39;;
import &#39;./index.css&#39;;

ReactDOM.render(
 &amp;lt;App /&amp;gt;,
 document.getElementById(&#39;root&#39;)
);
&lt;/pre&gt;

&lt;p&gt;O index.js é o arquivo principal da nossa aplicação, ele é responsável por colocar o nosso componente principal (App) no elemento &lt;em&gt;root&lt;/em&gt; da nossa página. &lt;em&gt;Root&lt;/em&gt; é uma div que está dentro do único arquivo .html do projeto (public/index.html). Toda a nossa aplicação vai ser escrita dentro dessa div root.&lt;/p&gt;

&lt;h3 id=&#34;criando-nosso-primeiro-componente&#34;&gt;Criando nosso primeiro componente&lt;/h3&gt;

&lt;p&gt;Abra o arquivo &lt;em&gt;App.js&lt;/em&gt;, ele é o primeiro componente da nossa árvore. Dentro dele podemos ver o JSX usado para renderizar a tela de boas vindas do &lt;em&gt;create-react-app&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&amp;lt;div className=&#34;App&#34;&amp;gt;
 &amp;lt;div className=&#34;App-header&#34;&amp;gt;
 &amp;lt;img src={logo} className=&#34;App-logo&#34; alt=&#34;logo&#34; /&amp;gt;
 &amp;lt;h2&amp;gt;Welcome to React&amp;lt;/h2&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;p className=&#34;App-intro&#34;&amp;gt;
 To get started, edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Note que todo esse código está dentro de um método chamado &lt;em&gt;render&lt;/em&gt; na classe &lt;em&gt;App&lt;/em&gt; que é filha da classe de &lt;em&gt;React.Component&lt;/em&gt;. &lt;em&gt;Render&lt;/em&gt; é responsável por dizer ao React o que deve ser renderizado, todo componente precisa de um método &lt;em&gt;render&lt;/em&gt; para exibir alguma coisa.&lt;/p&gt;

&lt;p&gt;Substitua o método &lt;em&gt;render&lt;/em&gt; por:&lt;/p&gt;

&lt;pre&gt;render() {
 return &amp;lt;HelloWorld/&amp;gt;;
 }&lt;/pre&gt;

&lt;p&gt;Se tentarmos rodar o projeto, veremos o seguinte erro:&lt;/p&gt;

&lt;pre&gt;7:13 error &#39;HelloWorld&#39; is not defined react/jsx-no-undef 
&lt;/pre&gt;

&lt;p&gt;Isso acontece porque estamos tentando usar um component (HelloWorld) que ainda não foi definido. Vamos resolver isso criando um arquivo chamado HelloWorld.js dentro da pastar &lt;em&gt;src&lt;/em&gt;. Dentro de HelloWorld coloque:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 return &amp;lt;p&amp;gt;Olá mundo!&amp;lt;/p&amp;gt;;
 }
}&lt;/pre&gt;

&lt;p&gt;Esse código cria um componente React chamado HelloWorld e implementa o método &lt;em&gt;render&lt;/em&gt; que retorna um parágrafo com &lt;strong&gt;olá mundo&lt;/strong&gt;. Depois disso vamos importar nosso novo componente em App.js:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!

class App extends Component {
 render() {
 return &amp;lt;HelloWorld/&amp;gt;;
 }
}

export default App;&lt;/pre&gt;

&lt;p&gt;Agora abrindo o browser em &lt;em&gt;&lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/em&gt; vemos:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57018 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-20.00.26.png&#34; alt=&#34;Exemplo de Hello World&#34; width=&#34;1439&#34; height=&#34;723&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ótimo! Nós acabamos de criar nosso primeiro React Component \o/. Mas ele não faz lá muita coisa não é mesmo? Vamos tentar fazer esse componente ser mais customizável.&lt;/p&gt;

&lt;h2 id=&#34;criando-componentes-genéricos-com-props&#34;&gt;Criando componentes genéricos com Props&lt;/h2&gt;

&lt;p&gt;E se nós quiséssemos exibir o nome de uma pessoa na mensagem do nosso HelloWorld? Obviamente poderíamos fazer algo do tipo:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 return &amp;lt;p&amp;gt;Olá Lucas!&amp;lt;/p&amp;gt;;
 }
}&lt;/pre&gt;

&lt;p&gt;Mas e se for necessário escrever novos nomes? Criar um componente novo para cada pessoa não parece uma ideia muito inteligente&amp;#8230; lembra do exemplo do Google Maps mostrado na introdução? No exemplo, nós passávamos dados para um componente como se fosse uma tag HTML. Vamos fazer a mesma coisa para o nosso HelloWorld! Mude App.js para:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!

class App extends Component {
 render() {
 return &amp;lt;div&amp;gt;
 &amp;lt;HelloWorld nome=&#34;Lucas&#34;/&amp;gt;
 &amp;lt;HelloWorld nome=&#34;Tableless&#34;/&amp;gt;
 &amp;lt;HelloWorld nome=&#34;Leitor&#34;/&amp;gt;
 &amp;lt;/div&amp;gt;;
 }
}

export default App;&lt;/pre&gt;

&lt;p&gt;Veja que dessa vez nós tivemos que colocar o HelloWorld dentro de uma div, isso acontece porque o método &lt;em&gt;render&lt;/em&gt; deve sempre retornar apenas um elemento, &lt;strong&gt;sempre que tiver que renderizar mais de um elemento no seu componente, coloque tudo dentro de uma div&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora nós temos que fazer com que o componente HelloWorld leia o valor dado em nome. Isso pode ser feito facilmente usando o objeto &lt;strong&gt;props&lt;/strong&gt; presente em todo componente React. Veja como HelloWorld.js vai ficar agora:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 return &amp;lt;p&amp;gt;Olá {this.props.nome}!&amp;lt;/p&amp;gt;;
 }
}

HelloWorld.propTypes = {
 nome: React.PropTypes.string.isRequired
}&lt;/pre&gt;

&lt;p&gt;Tudo que for passado de um componente para outro é adicionado ao objeto &lt;em&gt;props&lt;/em&gt;, podendo ser acessado dentro do componente. Nós também usamos a propriedade &lt;em&gt;propTypes&lt;/em&gt; para informar ao React que a _prop_ &amp;#8216;nome&amp;#8217; é uma &lt;em&gt;string&lt;/em&gt; e que essa &lt;em&gt;string&lt;/em&gt; é obrigatória para o funcionamento do componente (&lt;em&gt;isRequired&lt;/em&gt;). Você não é obrigado a usar &lt;em&gt;propTypes&lt;/em&gt; nos seus componentes, mas é interessante fazer isso, já que elas facilitam a documentação do seu código e podem reduzir erros.&lt;/p&gt;

&lt;p&gt;Agora nós temos um componente muito mais genérico:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57023 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-20.18.28.png&#34; alt=&#34;Exemplo de Componente React&#34; width=&#34;181&#34; height=&#34;193&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Props&lt;/em&gt; são algo crucial para os componentes React, já que com elas nós podemos fazer com que o nosso componente seja reutilizado até mesmo em outra aplicação. Mas devemos sempre ter em mente que _props_ são imutáveis, uma vez definida a _prop_ &amp;#8216;nome&amp;#8217;, uma instância de HelloWorld não pode mais ser alterada. Ex.:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 this.props.nome = &#34;Fulano&#34;; // ERRO Cannot assign to read only property &#39;nome&#39; of object &#39;#&amp;lt;Object&amp;gt;&#39;
 return &amp;lt;p&amp;gt;Olá {this.props.nome}!&amp;lt;/p&amp;gt;;
 }
}

HelloWorld.propTypes = {
 nome: React.PropTypes.string.isRequired
}&lt;/pre&gt;

&lt;h3 id=&#34;componente-8220-puro-8221-ou-stateless&#34;&gt;Componente &amp;#8220;puro&amp;#8221; ou &lt;em&gt;stateless&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Nosso componente HelloWorld é bastante simples e utiliza apenas &lt;em&gt;props&lt;/em&gt;, por causa disso ele pode ser escrito de uma forma melhor, utilizando uma &lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34;&gt;função pura&lt;/a&gt;. Veja como fica o nosso componente em forma de função:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;; const HelloWorld = (props) =&amp;gt; &amp;lt;p&amp;gt;Olá {props.nome}!&amp;lt;/p&amp;gt;;&lt;/pre&gt;

&lt;pre&gt;HelloWorld.propTypes = { nome: React.PropTypes.string.isRequired } export default HelloWorld;&lt;/pre&gt;

&lt;p&gt;Veja que dessa vez o componente é basicamente escrito em apenas uma linha (&lt;strong&gt;const HelloWorld = (props) =&amp;gt; &lt;p&gt;Olá {props.nome}!&lt;/p&gt;;&lt;/strong&gt;). Esse é o React Component ideal! Simples, reutilizável e escrito em apenas uma função! Tente criar seus componentes dessa maneira, ao invés de ter um componente complexo e grande, crie vários componentes menores e simples, isso vai melhorar bastante a qualidade do seu projeto.&lt;/p&gt;

&lt;p&gt;Para comprovar que o nosso componente é realmente reutilizável vamos usá-lo em uma lista de nomes. Volte para App.js e digite:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!

class App extends Component {
 render() {
 const nomes = [&#34;Lucas&#34;, &#34;Tableless&#34;, &#34;Leitor&#34;, &#34;Maria&#34;, &#34;João&#34;, &#34;Ana&#34;];
 return &amp;lt;div&amp;gt;
 {nomes.map((n, i) =&amp;gt; &amp;lt;HelloWorld nome={n} key={i}/&amp;gt;)}
 &amp;lt;/div&amp;gt;;
 }
}

export default App;
&lt;/pre&gt;

&lt;p&gt;Perceba que nós temos uma mudança aqui, para exibir nomes do nosso &lt;em&gt;array&lt;/em&gt; nós usamos a &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#34;&gt;função map&lt;/a&gt;, já que ela retorna uma expressão JavaScript (além de ter uma sintaxe mais legal que a do o laço for :P) e passamos uma nova &lt;em&gt;prop&lt;/em&gt; chamada &lt;em&gt;&lt;strong&gt;key&lt;/strong&gt;&lt;/em&gt; para o nosso componente. &lt;em&gt;Keys&lt;/em&gt; ajudam o React a identificar qual elemento foi adicionado/removido de uma lista/array (&lt;a href=&#34;https://facebook.github.io/react/docs/lists-and-keys.html&#34;&gt;mais informações sobre o assunto aqui&lt;/a&gt;). Uma &lt;em&gt;Key&lt;/em&gt; deve sempre ser um valor &lt;strong&gt;único&lt;/strong&gt; ou poderemos ter problemas de performance. Evite usar o índice do seu &lt;em&gt;loop&lt;/em&gt; como &lt;em&gt;key&lt;/em&gt; em aplicações reais (como fizemos no exemplo acima), tente usar números realmente únicos como um ID vindo de um backend. Leia mais sobre isso &lt;a href=&#34;https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.4nmajnqsa&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;componentes-interativos-com-state&#34;&gt;Componentes interativos com state&lt;/h2&gt;

&lt;p&gt;Como visto anteriormente &lt;em&gt;props&lt;/em&gt; são imutáveis, componentes feitos apenas com &lt;em&gt;props&lt;/em&gt; não podem por exemplo, ser atualizados baseados em uma ordem do usuário. Para representar o estado mutável do seu componente usamos a propriedade &lt;strong&gt;&lt;em&gt;state&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para ilustrar o uso de &lt;em&gt;state&lt;/em&gt; no nosso elemento vamos fazer um novo componente e chamá-lo de &lt;strong&gt;ContaClick.js&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class ContaClick extends React.Component {
 constructor() {
 super();
 this.state = {
 clicks: 0
 }
 }

 render() {
 return &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;{this.state.clicks}&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
 }
}

&lt;/pre&gt;

&lt;p&gt;No construtor da classe ContaClick nós definimos o estado inicial do nosso componente: um contador de clicks que começa em 0. Vamos adicionar um botão para atualizar o contador:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class ContaClick extends React.Component {
 constructor() {
 super();
 this.state = {
 clicks: 0
 }
 }

 clicou = () =&amp;gt; this.setState({clicks: this.state.clicks + 1});
 
 render() {
 return &amp;lt;div&amp;gt;
 &amp;lt;p&amp;gt;{this.state.clicks}&amp;lt;/p&amp;gt;
 &amp;lt;button onClick={this.clicou}&amp;gt;Clica aqui!&amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
 }
}
&lt;/pre&gt;

&lt;p&gt;No código acima nós criamos um botão embaixo do exibidor de cliques que chama o método &lt;em&gt;&lt;strong&gt;clicou&lt;/strong&gt;&lt;/em&gt; sempre que o evento onClick é disparado. O método &lt;em&gt;&lt;strong&gt;clicou&lt;/strong&gt;&lt;/em&gt; substitui o objeto &lt;em&gt;state&lt;/em&gt; do componente ContaClick por um objeto novo com clicks incrementados em uma unidade. Veja que nós atualizamos o &lt;em&gt;state&lt;/em&gt; usando a função &lt;em&gt;setState&lt;/em&gt;. &lt;strong&gt;NUNCA atualize o objeto _state_ manualmente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora vamos colocar o nosso componente &lt;em&gt;ContaClick&lt;/em&gt; em &lt;em&gt;app&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!
import ContaClick from &#39;./ContaClick&#39;;

class App extends Component {
 render() {
 const nomes = [&#34;Lucas&#34;, &#34;Tableless&#34;, &#34;Leitor&#34;, &#34;Maria&#34;, &#34;João&#34;, &#34;Ana&#34;];
 return &amp;lt;div&amp;gt;
 {nomes.map((n, i) =&amp;gt; &amp;lt;HelloWorld nome={n} key={i}/&amp;gt;)}
 &amp;lt;ContaClick /&amp;gt;
 &amp;lt;/div&amp;gt;;
 }
}

export default App;
&lt;/pre&gt;

&lt;p&gt;Pronto! Rodando a aplicação podemos usar o contador e ver que ele é atualizado a cada clique!&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O futuro das interfaces: Chatbots</title>
      <link>http://tableless.com.br/o-futuro-das-interfaces-chatbots/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-futuro-das-interfaces-chatbots/</guid>
      <description>

&lt;p&gt;Estamos acostumados a interagir diariamente com interfaces gráficas, seja no computador, celular, tablet, smart tv, etc. Naturalmente incorporamos a utilização dessas interfaces para obter nossos objetivos no dispositivo em questão, seja fazer uma busca no google, ver uma página no Facebook, ler um artigo em um portal de notícias ou escolher um filme no Netflix.&lt;/p&gt;

&lt;p&gt;Podemos não perceber, mas quando ligamos para um &lt;em&gt;call-center&lt;/em&gt; onde a máquina (&lt;strong&gt;&lt;em&gt;URA — Unidade de Resposta Audível&lt;/em&gt;&lt;/strong&gt;) nos pede para dizer em voz alta o que desejamos, ou o número correspondente ao que queremos, também estamos interagindo com uma interface de voz para atingir nosso propósito.&lt;/p&gt;

&lt;p&gt;Nesses dois casos, o ponto a se notar é que, não importa como, mas é preciso de uma interface para que nós humanos possamos utilizar sistemas e dispositivos digitais.&lt;/p&gt;

&lt;h2 id=&#34;legal-mas-onde-estão-os-chatbots-nessa-história&#34;&gt;Legal, mas onde estão os chatbots nessa história?&lt;/h2&gt;

&lt;p&gt;Simples. Chatbots podem ser interfaces no qual vamos interagir para atingir nossos objetivos obter !&lt;/p&gt;

&lt;p&gt;Para entender melhor, vamos a um exemplo clássico:&lt;/p&gt;

&lt;p&gt;Você está passeando no shopping, passa na frente do cinema, e descobre que aquele filme que você queria ver já está em cartaz, então decide assistí-lo.&lt;/p&gt;

&lt;p&gt;Porém a fila para comprar ingresso está enorme, você não quer perder todo esse tempo. Então você pega seu celular, entra na loja de aplicativos, procura o app de cinema, começa o download, após finalizar abre o app, seleciona sua cidade, shopping em que está, filme desejado, horário, quantidade de ingressos, e finaliza fazendo o pagamento. Você utilizou a interface gráfica do app de cinema do seu celular para atingir seu objetivo, ótimo, funcionou!&lt;/p&gt;

&lt;p&gt;Porém, não poderia ser mais simples? E se você pudesse interagir via chat com um bot do cinema para comprar seus ingressos?&lt;/p&gt;

&lt;p&gt;Vamos imaginar que o cinema tem um chatbot disponível no seu app de messenger favorito, o Facebook Messenger.&lt;/p&gt;

&lt;p&gt;Você acessa seu messenger clica no usuário do cinema e envia a seguinte mensagem: &amp;#8220;&lt;em&gt;Quero comprar dois ingressos para o filme Star Wars Rogue One, no shopping X, para a sessão das 21:45&lt;/em&gt;&amp;#8220;&lt;em&gt;.&lt;/em&gt; Sua mensagem rapidamente vai ser interpretada, e em mais algumas frases rápidas de conversa (talvez para pagamento), você terá alcançado sua meta de comprar ingresso.&lt;/p&gt;

&lt;p&gt;Você pode não ter percebido, mas assim como fazemos com interfaces gráficas, você interagiu com uma interface para manipular um sistema, e atingir seu objetivo! Você interagiu com uma interface de chatbot!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/02/cb2.jpg&#34; alt=&#34;&#34; width=&#34;626&#34; height=&#34;782&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;porque-esse-tipo-de-interface-é-promissora&#34;&gt;&lt;strong&gt;Porque esse tipo de interface é promissora?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Falando especificamente sobre a era da internet, e das interfaces para os dispositivos atuais (desktop, celulares, tablets), há anos equipes inteiras (UI Designers, UX Designers, Developers, CEO, etc) discutem incansavelmente sobre qual a melhor forma de atingir seus usuários.&lt;/p&gt;

&lt;p&gt;Inúmeros fatores nas interfaces/interação podem ser relevantes em produtos e sistemas. Nas empresas e instituições, sempre existem discussões voltadas para esses e outros fatores:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Cores, formas, fontes e fotos &amp;#8211; Performance e velocidade de páginas e procedimentos &amp;#8211; Quais conteúdos são mais relevantes para o usuário &amp;#8211; Qual o máximo de cliques que um usuário pode ter para alcançar o que deseja&lt;/p&gt;

&lt;p&gt;Portanto, o caminho para uma boa conversa com nosso usuário em questão não é tão simples como parece.&lt;/p&gt;

&lt;p&gt;Além desses pontos, temos uma discussão importantíssima sobre o negócio em si, sobre como o sistema lê, processa e devolve dados e informações, sobre como o sistema irá se comportar diante do usuário.&lt;/p&gt;

&lt;p&gt;E se pudéssemos &amp;#8220;&lt;em&gt;pular uma etapa&lt;/em&gt;&amp;#8221; e focar mais tempo para o que importa? Se pudéssemos focar no objetivo do usuário, e buscar a forma melhor e mais rápida de concluir processos?&lt;/p&gt;

&lt;p&gt;Partindo do pressuposto de que a maioria dos usuários de internet sabem utilizar um chat, os chatbots excluem a curva de aprendizado das interfaces gráficas, facilitando para os desenvolvedores do produto, e para o usuário, que poderá interagir utilizando um processo que se assemelha com a comunicação com outros humanos via internet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“_Nós pensamos que você deve enviar uma mensagem para uma empresa da mesma maneira que você envia a um amigo_” — Mark Zuckerberg na Facebook F8 Conference&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;E ainda não falamos dos detalhes mais técnicos: conexão, rede de dados, apps, espaço disponível no dispositivo…&lt;/p&gt;

&lt;p&gt;Para interagir com um chatbot, sua conexão não precisa ser tão rápida quanto para baixar um app, ou carregar um site. Você não precisa trafegar muitos dados a ponto de acabar com seu pacote diário de internet para conversar num chat. E se o bot está no app que você utilizar para conversar com seus amigos, não será necessário ocupar mais espaço no seu dispositivo.&lt;/p&gt;

&lt;p&gt;São muitas vantagens, não?!&lt;/p&gt;

&lt;h2 id=&#34;as-interfaces-gráficas-vão-morrer&#34;&gt;As interfaces gráficas vão morrer?&lt;/h2&gt;

&lt;p&gt;Não há nenhuma resposta certa, para essa pergunta. É uma questão que só poderá ser respondida com o passar dos anos.&lt;/p&gt;

&lt;p&gt;Na minha opinião, as interfaces podem perder muito espaço, mas não vão morrer completamente. Mesmo num futuro, imagino que sempre haverá algum caso em que pode uma interface gráfica pode ser útil, mesmo que para pequenas interações.&lt;/p&gt;

&lt;p&gt;Também não conseguimos prever com certeza o futuro dos chats. O próprio chatbot do Facebook Messenger tem a capacidade de enviar &lt;a href=&#34;https://developers.facebook.com/docs/messenger-platform/product-overview&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener&#34;&gt;botões, imagens e outros elementos gráfico&lt;/a&gt;s.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;A intenção desse post foi refletir um pouco sobre interfaces, e sobre vantagens e o poder dos chatbots.&lt;/p&gt;

&lt;p&gt;Obviamente, isso é só a ponta do iceberg das discussões sobre chatbots e seu futuro. Mas em pouco tempo de reflexão podemos enxergar um futuro promissor!&lt;/p&gt;

&lt;p&gt;Originalmente postado em: &lt;a href=&#34;https://medium.com/botsbrasil/o-futuro-das-interfaces-chatbots-b222c638bdb1&#34;&gt;https://medium.com/botsbrasil/o-futuro-das-interfaces-chatbots-b222c638bdb1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Começando um blog – O público alvo</title>
      <link>http://tableless.com.br/comecando-um-blog-o-publico-alvo/</link>
      <pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/comecando-um-blog-o-publico-alvo/</guid>
      <description>&lt;p&gt;Ano novo, vida nova e blog novo. Mas por onde eu devo começar?&lt;/p&gt;

&lt;p&gt;Sem sombra de dúvidas a primeira decisão a ser feita é sobre o que você quer publicar e qual o seu intuito com o blog. Se você quer publicar apenas por publicar e não está focado em rentabilizar o blog, então deixe de ler essa postagem e corre instalar o wordpress. O que quero dizer com isso é: Alguns assuntos serão muito difíceis de você ganhar uma grana, um exemplo disso seria eu gostar de falar sobre as borboletas do Afeganistão (salve mamonas), quantas pessoas mais estariam interessadas nesse assunto? Percebem o quanto é difícil atingir um público simplesmente porque gosto desse assunto. Mas se o seu intuito é apenas publicar para ser feliz, vai em frente. Quem sabe no domingo o fantástico não faz uma matéria sobre as borboletas do Afeganistão e isso vira moda, difícil, mas o intuito não era ganhar dinheiro não é mesmo?&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-56762 aligncenter&#34; src=&#34;uploads/2016/12/mamonas-mente.gif&#34; alt=&#34;mamonas-mente&#34; width=&#34;250&#34; height=&#34;199&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora se você quer ser o próximo blogueiro de sucesso (odeio esse termo &amp;#8220;sucesso), você precisa encontrar um tema do qual ame falar e ao mesmo tempo que seja algo que outras pessoas queiram saber. Não vai adiantar nada você falar sobre um tema da moda, sendo que não entende nada do assunto. Eu vou falar sobre gastronomia porque vi um monte de vídeo sobre isso bombando no youtube, resolvi que posso fazer uma grana escrevendo sobre isso. Mas nunca fritei um ovo sequer. Seria quase impossível fazer um conteúdo de qualidade desse jeito, a não ser que você tenha um bom dinheiro para contratar jornalistas especializados no assunto e queira somente gerenciar o blog, mas acredito que você não veio aqui para isso. Uma opção seria fazer um blog sobre gastronomia para quem nem sabe fritar um ovo e contar suas experiências, pode ser que dê certo :).&lt;/p&gt;

&lt;p&gt;Bom então vamos ao que interessa. A primeira coisa para você começar um blog, é focar em um assunto, quanto mais focado for o seu blog, mais fácil fazer campanhas no face, google e etc. Agora imagine se você faz um blog sobre política e no meio começa a publicar coisas sobre celebridades por exemplo. Um portal pode fazer isso, abranger vários assuntos, mas um blog, principalmente que está começando, pode ser que seja um fracasso. Imagine os caras que amam política vendo que a Gretchen casou mais uma vez, péssimo né? Além de que para fazer campanha no facebook com assuntos tão variados, você vai gastar uma nota e será muito difícil atingir um público que retorne ao blog, assine newsletter, receba notificações e por ai vai.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;wp-image-56764 aligncenter&#34; src=&#34;uploads/2016/12/red-hands-woman-creative-1.jpg&#34; alt=&#34;red-hands-woman-creative&#34; width=&#34;526&#34; height=&#34;331&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Então vamos focar em um público de exemplo, vamos fazer um blog que fale sobre fotografia, ah mas eu vou postar sobre vídeos e vai dar certo também? Difícil, lembre-se foque, foque e foque. Você está começando, não tente abraçar o Mundo. Mas mesmo focando, nem tudo é um mar de rosas. Se você fizer uma campanha no face para quem gosta de fotografia, irá aparecer tanto gente que realmente fotografa quanto aquela pessoas que só querem ver umas fotos maneiras e nunca pegaram em uma câmera. Mas você pode fazer a campanha no face mega focada também, impulsionando somente para pessoas que curtiram a página da Leica por exemplo. Você sabe o que é Leica? É uma das melhores e mais caras câmeras do Mundo, pode ter certeza que somente fotógrafos curtem essa marca. Viu como fica muito mais fácil com um público focado e seleto? E sem fazer apenas para as borboletas do Afeganistão?&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;wp-image-56763 aligncenter&#34; src=&#34;uploads/2016/12/pexels-photo-164474.jpeg&#34; alt=&#34;pexels-photo-164474&#34; width=&#34;496&#34; height=&#34;414&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pode ter a maior certeza do Mundo que vai demorar para você ter bastante acessos e ver o analytics pulando de alegria, mas será muito mais fácil chegar em um resultado satisfatório assim do que falando sobre tudo e nada ao mesmo tempo. Além de que banners do adsense dão muito pouco dinheiro por visualizações, tendo um público focado você pode vender campanhas para lojas de fotografia, no nosso exemplo ai, e ganhar muito mais do que os míseros centavos do adsense.&lt;/p&gt;

&lt;p&gt;E aí, você tem experiências para contar? Manda ver ai nos comentários&lt;/p&gt;

&lt;p&gt;Valeu!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contraste de cores – Acessibilidade na web</title>
      <link>http://tableless.com.br/contraste-de-cores-acessibilidade-na-web/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/contraste-de-cores-acessibilidade-na-web/</guid>
      <description>

&lt;p&gt;Nesse post vou explicar uma das opções de como fazer um contraste de cores, existe diretrizes de acessibilidade da &lt;a href=&#34;https://www.w3.org/Translations/WCAG20-pt-PT/&#34; target=&#34;_blank&#34;&gt;WCAG 2.0&lt;/a&gt; que explica o nível aceitável de contraste de cores esperadas em um site, veja nesse &lt;a href=&#34;https://www.w3.org/TR/WCAG20/#visual-audio-contrast&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;proposta&#34;&gt;Proposta&lt;/h2&gt;

&lt;p&gt;Criar um contraste de cores em três níveis (Branco, Preto e Azul) usando HTML5, CSS3, Javascript (Puro), Node e o Cookie do navegado para guarda o contraste escolhido.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56600&#34; src=&#34;uploads/2016/12/html5-css-javascript-logos.png&#34; alt=&#34;html5-css-javascript-logos&#34; width=&#34;1267&#34; height=&#34;287&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;como-será-feito&#34;&gt;Como será feito&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Em uma página teremos quatro links em que o usuário vai escolher (Preto, branco, azul ou sem contraste).&lt;/li&gt;
&lt;li&gt;No evento de click vamos passar para o javascript um valor do atributo &amp;#8216;data-contraste&amp;#8217;.&lt;/li&gt;
&lt;li&gt;Vai ser adicionar na tag &amp;#8216;body&amp;#8217; um &amp;#8216;id&amp;#8217; para o CSS fazer toda a mágica de trocar as cores da página.&lt;/li&gt;
&lt;li&gt;Vai ser guardado no cookie a opção selecionada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veja como vai ficar;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56620&#34; src=&#34;uploads/2016/12/contraste-de-cores.gif&#34; alt=&#34;contraste-de-cores&#34; width=&#34;484&#34; height=&#34;264&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Então&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56615&#34; src=&#34;uploads/2016/12/ThomasCook_tagline.jpg&#34; alt=&#34;ThomasCook_tagline_hori_cmyk&#34; width=&#34;479&#34; height=&#34;137&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;O HTML para esse tipo de projeto é de extrema necessidade ser no mínimo validado pelo &lt;a href=&#34;https://validator.w3.org/&#34;&gt;W3C&lt;/a&gt; e ter nível &amp;#8220;AAA&amp;#8221; em alguma ferramenta de análise de acessibilidade, no caso eu usei o &lt;a href=&#34;http://www.acessibilidade.gov.pt/accessmonitor/&#34;&gt;Accessmonitor&lt;/a&gt;, já usando a WCAG 2.0.&lt;/p&gt;

&lt;p&gt;A atenção na contrução do HTML vai determinar se o usuário acessível vai ter uma boa experiência no seu site ou não.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-BR&#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Artigo contraste de cores&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/style.css&#34;&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&#34;row row-header&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;nav&amp;gt;
 &amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#content&#34; title=&#34;Ir para o Conteúdo&#34;&amp;gt;Ir para o Conteúdo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; title=&#34;Ir para o Topo&#34;&amp;gt;Ir para o Topo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#footer&#34; title=&#34;Ir para o Rodapé&#34;&amp;gt;Ir para o Rodapé&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;0&#34; title=&#34;Sem Contraste&#34;&amp;gt;Sem Contraste&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;1&#34; title=&#34;Contraste Branco&#34;&amp;gt;Contraste Branco&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;2&#34; title=&#34;Contraste Preto&#34;&amp;gt;Contraste Preto&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;3&#34; title=&#34;Contraste Azul&#34;&amp;gt;Contraste Azul&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/nav&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .container--&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .row--&amp;gt;
 &amp;lt;div class=&#34;row row-top&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;strong&amp;gt;Front End Developer&amp;lt;/strong&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-banner&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;h1&amp;gt;Hi my names is &amp;lt;span&amp;gt;Orivelton&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
 &amp;lt;img src=&#34;img/avatar.png&#34; alt=&#34;Avatar Front End&#34; class=&#34;avatar&#34;&amp;gt;
 &amp;lt;img src=&#34;img/avatar-preto.png&#34; alt=&#34;Oculos do avatar&#34; class=&#34;oculos&#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-content&#34;&amp;gt;
 &amp;lt;article class=&#34;container&#34; id=&#34;content&#34;&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Html5&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Css3&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Javascript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Typescript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;footer id=&#34;footer&#34;&amp;gt;
 Copyright (c) 2016 Copyright Holder All Rights Reserved.
 &amp;lt;/footer&amp;gt;
 &amp;lt;script type=&#34;text/javascript&#34; src=&#34;js/contraste.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Umas das recomendações da WCAG 2.0 é que o primeiro link do site leve para o conteúdo principal, com isso você já ganha uns pontinhos na ferramenta de análise de acessibilidade.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;css&#34;&gt;CSS&lt;/h2&gt;

&lt;p&gt;O CSS é muito importante, se possível não usar CSS inline, a utilização de unidades relativas (EM, %,  REM) na escrita do CSS melhora a acessibilidade. Validar o CSS vai apontar erros que deixamos passar, para isso temos a ferramenta de análise da W3C o &lt;a href=&#34;https://jigsaw.w3.org/css-validator/&#34;&gt;CSS Validation Service&lt;/a&gt;. Não vou postar aqui o CSS, mas logo abaixo vou deixar o link do projeto completo ;).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;javascript&#34;&gt;Javascript&lt;/h1&gt;

&lt;p&gt;Nesse post resolvi usar javascript puro, pois se trata de uma aplicação simples e não haveria a necessidade de usar JQuery ou alguma lib ou Framework e também eu amo javascript puro, acho bem desafiador \0/.&lt;/p&gt;

&lt;p&gt;Esse Javascript modularizei em três blocos.&lt;/p&gt;

&lt;h3 id=&#34;1-8211-a-escolha-do-contraste-no-click-do-link&#34;&gt;1 &amp;#8211; A escolha do contraste no click do link&lt;/h3&gt;

&lt;pre&gt;//Selecionando os links de contraste
var linksContraste = document.querySelectorAll(&#39;nav a[data-contraste]&#39;);

//Function click passando o valor do data-contraste para a function contraste setar o Id no body
linksContraste.forEach(linksContraste =&amp;gt; linksContraste.addEventListener(&#39;click&#39;, function() {
 var dataContraste = this.dataset.contraste; // pegando o data-contraste da tag &#39;a&#39;
 contraste(dataContraste); // Chamando a function contraste com um parâmetro passado pelo data-contraste da tag &#39;a&#39;
 }
));&lt;/pre&gt;

&lt;h3 id=&#34;2-8211-a-função-de-setar-o-contraste&#34;&gt;2 &amp;#8211; A Função de setar o contraste.&lt;/h3&gt;

&lt;pre&gt;function contraste(dataContraste) {
 var setId;
 //Verificação de qual contraste foi selecionado
 if (dataContraste == 1) {
 setId = &#39;contrasteBranco&#39;;
 } else if (dataContraste == 2) {
 setId = &#39;contrastePreto&#39;;
 } else if (dataContraste == 3) {
 setId = &#39;contrasteAzul&#39;;
 } else {
 setId = &#39;&#39;;
 }
 // setando o ID do contraste escolhido no body
 document.querySelector(&#34;body&#34;).setAttribute(&#34;id&#34;, setId);
 // Guardando o cookie do contraste
 document.cookie = &#34;contraste=&#34; + setId + &#34;&#34;;
}&lt;/pre&gt;

&lt;h3 id=&#34;3-8211-a-verificação-do-cookie-gravado&#34;&gt;3 &amp;#8211; A verificação do cookie gravado&lt;/h3&gt;

&lt;pre&gt;// Verificação do cookie
var cookieContrasteBranco = document.cookie.indexOf(&#39;contrasteBranco&#39;);
var cookieContrastePreto = document.cookie.indexOf(&#39;contrastePreto&#39;);
var cookieContrasteAzul = document.cookie.indexOf(&#39;contrasteAzul&#39;);

//Verificando o cookie setado anteriormente
var cookieTrue = &#39;&#39;;
if (cookieContrasteBranco != -1) {
 cookieTrue = 1;
} else if (cookieContrastePreto != -1) {
 cookieTrue = 2;
} else if (cookieContrasteAzul != -1) {
 cookieTrue = 3;
} else {
 cookieTrue = &#39;&#39;;
}
//Chamando a function contraste com o valor do cookie guardado
contraste(cookieTrue);&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;node-cookie&#34;&gt;Node + Cookie&lt;/h2&gt;

&lt;p&gt;Node? sim, usaremos o Node para subir um servidor, pois não da pra guardar cookie sem um servidor, vamos precisar usar o Node, mas é super simples.&lt;/p&gt;

&lt;p&gt;Não sabe usar? Não sabe o que é? tem um poste aqui muito bom que vai te dar o caminho das pedras, nesse &lt;a href=&#34;https://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js/&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No site &lt;a href=&#34;https://www.npmjs.com/package/http-server&#34;&gt;NPMJS &lt;/a&gt;temos um servidor em que iremos utilizar, abra seu Node e manda essa;&lt;/p&gt;

&lt;pre&gt;npm install http-server -g&lt;/pre&gt;

&lt;p&gt;Pronto, o resultado será esse;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56612&#34; src=&#34;uploads/2016/12/Capture.png&#34; alt=&#34;capture&#34; width=&#34;636&#34; height=&#34;48&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora navegando com o Node até a pasta do seu projeto;&lt;/p&gt;

&lt;pre&gt;http-server&lt;/pre&gt;

&lt;p&gt;Ok, você já tem um servidor no ar, utilize um dos endereços http listados e abra no seu navegador de preferência (&lt;del&gt;&lt;em&gt;Chrome&lt;/em&gt;&lt;/del&gt;);&lt;/p&gt;

&lt;pre&gt;&lt;img class=&#34;alignnone wp-image-56613&#34; src=&#34;uploads/2016/12/Capture-1.png&#34; alt=&#34;capture&#34; width=&#34;640&#34; height=&#34;134&#34; /&gt;&lt;/pre&gt;

&lt;p&gt;Já está tudo pronto, com o servidor no ar já podemos gravar no cookie a escolha do contraste selecionada pelo usuário, isso vai evitar que o usuário atualize a página e carregue a página sem o contraste escolhido.&lt;/p&gt;

&lt;p&gt;já podemos verificar o cookie guardado depois do click no link&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56617&#34; src=&#34;uploads/2016/12/Capture-2.png&#34; alt=&#34;capture&#34; width=&#34;931&#34; height=&#34;509&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Com esse valor guardado no cookie o passo 3 vai funcionar perfeitamente, setando o contraste escolhido anteriormente ao recarregar a página.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Veja o projeto completo no [Nesse post vou explicar uma das opções de como fazer um contraste de cores, existe diretrizes de acessibilidade da &lt;a href=&#34;https://www.w3.org/Translations/WCAG20-pt-PT/&#34; target=&#34;_blank&#34;&gt;WCAG 2.0&lt;/a&gt; que explica o nível aceitável de contraste de cores esperadas em um site, veja nesse &lt;a href=&#34;https://www.w3.org/TR/WCAG20/#visual-audio-contrast&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;proposta-1&#34;&gt;Proposta&lt;/h2&gt;

&lt;p&gt;Criar um contraste de cores em três níveis (Branco, Preto e Azul) usando HTML5, CSS3, Javascript (Puro), Node e o Cookie do navegado para guarda o contraste escolhido.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56600&#34; src=&#34;uploads/2016/12/html5-css-javascript-logos.png&#34; alt=&#34;html5-css-javascript-logos&#34; width=&#34;1267&#34; height=&#34;287&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;como-será-feito-1&#34;&gt;Como será feito&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Em uma página teremos quatro links em que o usuário vai escolher (Preto, branco, azul ou sem contraste).&lt;/li&gt;
&lt;li&gt;No evento de click vamos passar para o javascript um valor do atributo &amp;#8216;data-contraste&amp;#8217;.&lt;/li&gt;
&lt;li&gt;Vai ser adicionar na tag &amp;#8216;body&amp;#8217; um &amp;#8216;id&amp;#8217; para o CSS fazer toda a mágica de trocar as cores da página.&lt;/li&gt;
&lt;li&gt;Vai ser guardado no cookie a opção selecionada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veja como vai ficar;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56620&#34; src=&#34;uploads/2016/12/contraste-de-cores.gif&#34; alt=&#34;contraste-de-cores&#34; width=&#34;484&#34; height=&#34;264&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Então&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56615&#34; src=&#34;uploads/2016/12/ThomasCook_tagline.jpg&#34; alt=&#34;ThomasCook_tagline_hori_cmyk&#34; width=&#34;479&#34; height=&#34;137&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-1&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;O HTML para esse tipo de projeto é de extrema necessidade ser no mínimo validado pelo &lt;a href=&#34;https://validator.w3.org/&#34;&gt;W3C&lt;/a&gt; e ter nível &amp;#8220;AAA&amp;#8221; em alguma ferramenta de análise de acessibilidade, no caso eu usei o &lt;a href=&#34;http://www.acessibilidade.gov.pt/accessmonitor/&#34;&gt;Accessmonitor&lt;/a&gt;, já usando a WCAG 2.0.&lt;/p&gt;

&lt;p&gt;A atenção na contrução do HTML vai determinar se o usuário acessível vai ter uma boa experiência no seu site ou não.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-BR&#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Artigo contraste de cores&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/style.css&#34;&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&#34;row row-header&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;nav&amp;gt;
 &amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#content&#34; title=&#34;Ir para o Conteúdo&#34;&amp;gt;Ir para o Conteúdo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; title=&#34;Ir para o Topo&#34;&amp;gt;Ir para o Topo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#footer&#34; title=&#34;Ir para o Rodapé&#34;&amp;gt;Ir para o Rodapé&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;0&#34; title=&#34;Sem Contraste&#34;&amp;gt;Sem Contraste&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;1&#34; title=&#34;Contraste Branco&#34;&amp;gt;Contraste Branco&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;2&#34; title=&#34;Contraste Preto&#34;&amp;gt;Contraste Preto&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;3&#34; title=&#34;Contraste Azul&#34;&amp;gt;Contraste Azul&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/nav&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .container--&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .row--&amp;gt;
 &amp;lt;div class=&#34;row row-top&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;strong&amp;gt;Front End Developer&amp;lt;/strong&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-banner&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;h1&amp;gt;Hi my names is &amp;lt;span&amp;gt;Orivelton&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
 &amp;lt;img src=&#34;img/avatar.png&#34; alt=&#34;Avatar Front End&#34; class=&#34;avatar&#34;&amp;gt;
 &amp;lt;img src=&#34;img/avatar-preto.png&#34; alt=&#34;Oculos do avatar&#34; class=&#34;oculos&#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-content&#34;&amp;gt;
 &amp;lt;article class=&#34;container&#34; id=&#34;content&#34;&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Html5&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Css3&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Javascript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Typescript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;footer id=&#34;footer&#34;&amp;gt;
 Copyright (c) 2016 Copyright Holder All Rights Reserved.
 &amp;lt;/footer&amp;gt;
 &amp;lt;script type=&#34;text/javascript&#34; src=&#34;js/contraste.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Umas das recomendações da WCAG 2.0 é que o primeiro link do site leve para o conteúdo principal, com isso você já ganha uns pontinhos na ferramenta de análise de acessibilidade.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;css-1&#34;&gt;CSS&lt;/h2&gt;

&lt;p&gt;O CSS é muito importante, se possível não usar CSS inline, a utilização de unidades relativas (EM, %,  REM) na escrita do CSS melhora a acessibilidade. Validar o CSS vai apontar erros que deixamos passar, para isso temos a ferramenta de análise da W3C o &lt;a href=&#34;https://jigsaw.w3.org/css-validator/&#34;&gt;CSS Validation Service&lt;/a&gt;. Não vou postar aqui o CSS, mas logo abaixo vou deixar o link do projeto completo ;).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;javascript-1&#34;&gt;Javascript&lt;/h1&gt;

&lt;p&gt;Nesse post resolvi usar javascript puro, pois se trata de uma aplicação simples e não haveria a necessidade de usar JQuery ou alguma lib ou Framework e também eu amo javascript puro, acho bem desafiador \0/.&lt;/p&gt;

&lt;p&gt;Esse Javascript modularizei em três blocos.&lt;/p&gt;

&lt;h3 id=&#34;1-8211-a-escolha-do-contraste-no-click-do-link-1&#34;&gt;1 &amp;#8211; A escolha do contraste no click do link&lt;/h3&gt;

&lt;pre&gt;//Selecionando os links de contraste
var linksContraste = document.querySelectorAll(&#39;nav a[data-contraste]&#39;);

//Function click passando o valor do data-contraste para a function contraste setar o Id no body
linksContraste.forEach(linksContraste =&amp;gt; linksContraste.addEventListener(&#39;click&#39;, function() {
 var dataContraste = this.dataset.contraste; // pegando o data-contraste da tag &#39;a&#39;
 contraste(dataContraste); // Chamando a function contraste com um parâmetro passado pelo data-contraste da tag &#39;a&#39;
 }
));&lt;/pre&gt;

&lt;h3 id=&#34;2-8211-a-função-de-setar-o-contraste-1&#34;&gt;2 &amp;#8211; A Função de setar o contraste.&lt;/h3&gt;

&lt;pre&gt;function contraste(dataContraste) {
 var setId;
 //Verificação de qual contraste foi selecionado
 if (dataContraste == 1) {
 setId = &#39;contrasteBranco&#39;;
 } else if (dataContraste == 2) {
 setId = &#39;contrastePreto&#39;;
 } else if (dataContraste == 3) {
 setId = &#39;contrasteAzul&#39;;
 } else {
 setId = &#39;&#39;;
 }
 // setando o ID do contraste escolhido no body
 document.querySelector(&#34;body&#34;).setAttribute(&#34;id&#34;, setId);
 // Guardando o cookie do contraste
 document.cookie = &#34;contraste=&#34; + setId + &#34;&#34;;
}&lt;/pre&gt;

&lt;h3 id=&#34;3-8211-a-verificação-do-cookie-gravado-1&#34;&gt;3 &amp;#8211; A verificação do cookie gravado&lt;/h3&gt;

&lt;pre&gt;// Verificação do cookie
var cookieContrasteBranco = document.cookie.indexOf(&#39;contrasteBranco&#39;);
var cookieContrastePreto = document.cookie.indexOf(&#39;contrastePreto&#39;);
var cookieContrasteAzul = document.cookie.indexOf(&#39;contrasteAzul&#39;);

//Verificando o cookie setado anteriormente
var cookieTrue = &#39;&#39;;
if (cookieContrasteBranco != -1) {
 cookieTrue = 1;
} else if (cookieContrastePreto != -1) {
 cookieTrue = 2;
} else if (cookieContrasteAzul != -1) {
 cookieTrue = 3;
} else {
 cookieTrue = &#39;&#39;;
}
//Chamando a function contraste com o valor do cookie guardado
contraste(cookieTrue);&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;node-cookie-1&#34;&gt;Node + Cookie&lt;/h2&gt;

&lt;p&gt;Node? sim, usaremos o Node para subir um servidor, pois não da pra guardar cookie sem um servidor, vamos precisar usar o Node, mas é super simples.&lt;/p&gt;

&lt;p&gt;Não sabe usar? Não sabe o que é? tem um poste aqui muito bom que vai te dar o caminho das pedras, nesse &lt;a href=&#34;https://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js/&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No site &lt;a href=&#34;https://www.npmjs.com/package/http-server&#34;&gt;NPMJS &lt;/a&gt;temos um servidor em que iremos utilizar, abra seu Node e manda essa;&lt;/p&gt;

&lt;pre&gt;npm install http-server -g&lt;/pre&gt;

&lt;p&gt;Pronto, o resultado será esse;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56612&#34; src=&#34;uploads/2016/12/Capture.png&#34; alt=&#34;capture&#34; width=&#34;636&#34; height=&#34;48&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora navegando com o Node até a pasta do seu projeto;&lt;/p&gt;

&lt;pre&gt;http-server&lt;/pre&gt;

&lt;p&gt;Ok, você já tem um servidor no ar, utilize um dos endereços http listados e abra no seu navegador de preferência (&lt;del&gt;&lt;em&gt;Chrome&lt;/em&gt;&lt;/del&gt;);&lt;/p&gt;

&lt;pre&gt;&lt;img class=&#34;alignnone wp-image-56613&#34; src=&#34;uploads/2016/12/Capture-1.png&#34; alt=&#34;capture&#34; width=&#34;640&#34; height=&#34;134&#34; /&gt;&lt;/pre&gt;

&lt;p&gt;Já está tudo pronto, com o servidor no ar já podemos gravar no cookie a escolha do contraste selecionada pelo usuário, isso vai evitar que o usuário atualize a página e carregue a página sem o contraste escolhido.&lt;/p&gt;

&lt;p&gt;já podemos verificar o cookie guardado depois do click no link&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56617&#34; src=&#34;uploads/2016/12/Capture-2.png&#34; alt=&#34;capture&#34; width=&#34;931&#34; height=&#34;509&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Com esse valor guardado no cookie o passo 3 vai funcionar perfeitamente, setando o contraste escolhido anteriormente ao recarregar a página.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Veja o projeto completo no ]&lt;a href=&#34;http://codepen.io/orivelton/pen/XNymQp&#34;&gt;6&lt;/a&gt; e no &lt;a href=&#34;https://github.com/orivelton10/contraste-de-cores&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Anotações sobre Progressive Web Apps</title>
      <link>http://tableless.com.br/anotacoes-sobre-progressive-web-apps/</link>
      <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/anotacoes-sobre-progressive-web-apps/</guid>
      <description>

&lt;p&gt;A idéia de escrever sobre Progressive Web Apps surgiu quando estudava para apresentar uma talk sobre o conceito ao pessoal do trabalho, percebi durante o processo que existe muito conteúdo bom pela internet afora, porém senti que alguns conceitos estavam separados uns dos outros, então decidi escrever um documento agrupando todos estes dados que encontrei espalhados por aí para facilitar a compreensão e a forma que iria passar isto para minha equipe. Depois de todo trabalho de pesquisa tive a idéia, porque não compartilhar isto com as pessoas? Altamente incentivado pelos colegas de trabalho, resolvi revisar o documento e postar para os leitores do tableless, acredito que vai ser uma boa base para iniciantes no assunto. Fica aqui uma observação antes de começarmos, não tenho nenhuma intenção e escrever um documento canônico sobre Progressive Web Apps, como verão a seguir é um assunto em construção e em constante evolução, muitas coisas que gostaríamos de usar ainda estão sendo definidas pela comunidade. Agora estamos prontos para começar, espero que gostem 🙂 .  &lt;/p&gt;

&lt;h2 id=&#34;conceitos-e-motivações&#34;&gt;Conceitos e motivações&lt;/h2&gt;

&lt;p&gt;  Pesquisando sobre Progressive Web Apps &amp;#8211; (PWA) percebemos que não é um conceito ou uma especificação única, são na verdade um conjunto de idéias que foram agrupadas com com o intuito de promover uma melhor experiência para o usuário mobile para os usuários, resolvendo alguns problemas que um “simples” site responsivo não poderia resolver. PWAs criam uma aproximação dos usuários já fidelizados, aqueles usuários assíduos que já acompanham seu conteúdo, e aprimoram a experiência mobile desses usuários de forma progressiva (não confundir com “progressive enhancement”, veremos ele a seguir), promovendo uma imersão muito próxima do que seria um app nativo, porém não coerciva ou intrusiva, pois não obriga que usuários corriqueiros ou na primeiro visita ao seu site, tenham que baixar um App para ter acesso ao seu conteúdo. Isto garante que qualquer usuário possa acessar os recursos de sua aplicação web de uma forma tão simples quanto acessa a própria web. Todos estes conceitos envolvidos em PWA tentam resolver um dos grandes problemas mobile de hoje, nós temos millhões de aplicativos disponíveis para serem baixados e temos umas dezenas deles instalados em nosso aparelho que fazem nada de relevante e que muitas vezes fomos obrigados a instalar para ter acesso a algo temporário, quando na verdade precisamos de só uma meia dúzia deles. Por outro lado nós temos um numero muito maior de websites disponíveis na internet, mas que mesmo com as iniciativas para web responsiva a usabilidade, ainda não conseguem entender as espectativas dos usuarios. PWAs são caras legais pois eles são uma iniciativa em direção a um lugar comum onde todos queremos chegar para “Tornar a web um lugar melhor”.  &lt;/p&gt;

&lt;h3 id=&#34;webmobile-ou-app-nativo-figure&#34;&gt;WebMobile ou App Nativo?&lt;figure&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2016/12/c7NJRa2.gif&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;“Porque não los dos?”&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;  Muito se discute ainda sobre estratégia mobile e os argumentos de hardware, performance geralmente são postos à mesa, porém como Sergio Lopes cita no livro, A Web Mobile, A Web é boa o suficiente para a maioria dos cenário possível, portanto no momento de tomar a decisão de qual estratégia mobile seguir, o que importa mais é o foco no usuário e as expectativas que ele possui com sua marca, produto ou empresa. Existem também aqueles que apelam para os numeros alegando que os usuarios mobile passam 80% do seu tempo utilizando aplicativos e eles estão certos, pena, que não serão os seus aplicativos. Basta darmos uma olhada em nossos celulares, quantos de nós utiliza mais que os aplicativos criados pelas gigantes do mercado já consolidadas e estabilizadas?&lt;/p&gt;

&lt;h4 id=&#34;estretégia-web-fisrt&#34;&gt;Estretégia Web Fisrt&lt;/h4&gt;

&lt;p&gt;Web é uma solução muito interessante para aqueles que já possuem uma marca ou produto web e estão pensando em iniciar um projeto mobile, no entanto para aqueles que vão iniciar um novo produto, um produto inovador que não possua concorrentes e expectativas por parte dos usuários, uma estratégia baseada diretamente em apps pode ser a melhor saída. O que nós entendemos até aqui é que se um produto novo que não tem um público já atingido, seja por você ou por algum concorrente que já lançou um app para o mesmo nicho de mercado, ele não é capaz de gerar expectativas por parte dos usuários, porém quando já existe uma estratégia online estes usuários já possuem esta expectativa com a marca, assim sendo uma estratégia Web Pode ser mais interessante. Em muitos casos pode-se assumir uma estratégia “Web First”, onde nós podemos lançar a marca ou produto no mercado sempre primeiramente pela versão web onde todos os usuários terão acesso, então depois de consolidados no mercado podemos partir para uma estratégia diferente e é exatamente ai que as PWAS irão aparecer.&lt;/p&gt;

&lt;h3 id=&#34;porque-usar-progressive-web-app&#34;&gt;Porque usar Progressive Web App?&lt;/h3&gt;

&lt;p&gt;Segue abaixo uma lista de motivos que eu encontrei para justificar o uso de PWAs como primiera estratégia em relação a Apps nativos:&lt;/p&gt;

&lt;h4 id=&#34;porque-é-web&#34;&gt;Porque é Web:&lt;/h4&gt;

&lt;p&gt;PWAs terão o comportamento e imersão de um App nativo, com toda a acessibilidade e recursos que um website, isto quer dizer que seu conteúdo estará disponível a todos em todos os dispositivos, seja mobile, desktop, na tv da sala ou em seu tamagotchi.&lt;/p&gt;

&lt;h4 id=&#34;apps-são-inconvenientes&#34;&gt;Apps são inconvenientes:&lt;/h4&gt;

&lt;p&gt;Como já citado acima, para um usuário que visita sua página pela primeira vez, que talvez nem conheça o seu serviço ou produto, pode não ser muito confortável(e não será) ter que baixar um app, muitas vezes grande, muitas vezes em uma conexão ruim e muitas vezes conflitante com o pouco espaço de armazenamento do aparelho, somente porque você não proveu uma solução online para o problema dele.&lt;/p&gt;

&lt;h4 id=&#34;usuariofirst-porque-relacionamentos-possessivos-acabam-cedo&#34;&gt;“UsuarioFirst”, Porque relacionamentos possessivos acabam cedo:&lt;/h4&gt;

&lt;p&gt;Todas as estratégias das PWAs baseiam-se fortemente nas expectativas do usuário, suas experiências e necessidades, em momento algum você deve obrigá-lo a fazer algo ou a tomar uma decisão por ele, você deve prover a melhor experiência possível sempre. Acredito que de todos os conceitos que vi sobre PWAs este foi um dos mais repetidos e se mostrou para mim o mais importante dos conceitos, foco 100% no usuário.&lt;/p&gt;

&lt;h4 id=&#34;porque-você-não-quer-perder-público&#34;&gt;Porque você não quer perder público:&lt;/h4&gt;

&lt;p&gt;para cada etapa que você obriga seus usuários a enfrentarem até chegar a seu conteúdo, você irá perder em torno de 20% do seu público, como explicado por &lt;a href=&#34;https://www.youtube.com/watch?v=MyQ8mtR9WxI&#34;&gt;Alex Russell em sua palestra sobre Progressive Web Apps em 2015&lt;/a&gt;. Isto que dizer que entre entrar na loja, baixar e instalar seu aplicativo, você está deixando usuários preciosos insatisfeitos.&lt;/p&gt;

&lt;h4 id=&#34;progressivamente-aprimorado-progressive-enhancement&#34;&gt;Progressivamente aprimorado (Progressive Enhancement):&lt;/h4&gt;

&lt;p&gt;Tão importante que faz parte do nome que define o conceito, isto que dizer que sua aplicação funciona para todos os usuários, independentemente da escolha de navegador, pois são criados com aprimoramento progressivo como princípio central.&lt;/p&gt;

&lt;h4 id=&#34;progressivamente-instalado&#34;&gt;Progressivamente instalado:&lt;/h4&gt;

&lt;p&gt;Porque Você irá prover toda a solução online para seu usuário, então conforme ele torna-se assíduo consumidor do seu conteúdo você poderá oferecer a ele, o direito de escolha para que tenha uma experiência mais próxima da marca em sua home screen, permitir que ele escolha entre continuar acessando normalmente pelo browser ou ainda baixar um aplicativo que pode lhe possibilitar mais recursos.&lt;/p&gt;

&lt;h4 id=&#34;engajamento&#34;&gt;Engajamento:&lt;/h4&gt;

&lt;p&gt;Uma vez que você promove uma aproximação progressiva e totalmente acessível com os usuários, você naturalmente conseguirá uma proximidade maior com os mesmo, e agora com PWA podemos fazer com que esta aproximação seja facilitada pois o acesso ao seu conteúdo estará a um click de distância, mesmo antes dele ter decidido por baixar o seu App(supondo que você tenha optado por fazer um), isto irá gerar um engajamento muito maior do público.&lt;/p&gt;

&lt;h4 id=&#34;reengajáveis&#34;&gt;Reengajáveis:&lt;/h4&gt;

&lt;p&gt;Facilitam o reengajamento por meio de recursos como notificações push.&lt;/p&gt;

&lt;h4 id=&#34;compartilhamento-de-conteúdo&#34;&gt;Compartilhamento de conteúdo:&lt;/h4&gt;

&lt;p&gt;Permite que os usuários compartilhem seu conteúdo com outras pessoas de maneira fácil a partir de hiperlinks assim como seria em um site convencional.&lt;/p&gt;

&lt;h4 id=&#34;funcionam-offline-e-são-constantemente-atualizados&#34;&gt;Funcionam Offline e são constantemente Atualizados:&lt;/h4&gt;

&lt;p&gt;Todo o conteúdo será guardado em cache e estará disponibilizado para o seu usuário mesmo que ele não tenha acesso a internet. Sempre que for possível e houver conexão o Service Worker pode solicitar a versão mais atualizada do se WebApp e gerenciar de acordo com a estratégia escolhida pela equipe, para que ele seja salvo e o cache antigo será deletado.&lt;/p&gt;

&lt;h4 id=&#34;seguros&#34;&gt;Seguros:&lt;/h4&gt;

&lt;p&gt;Toda informação será veiculada por HTTPS para impedir o rastreamento e assegurar que o conteúdo não foi adulterado.&lt;/p&gt;

&lt;h3 id=&#34;próximos-passos-com-pwas&#34;&gt;Próximos passos com PWAs&lt;/h3&gt;

&lt;p&gt;Bem, este foi um pedaço do conteúdo com uma pequena introdução sobre PWAs, espero que tenham gostado. Eu achei que o conteúdo estava ficando muito grande então decidi dividir em dois artigos para a leitura não fica maçante, então no próximo teremos os principais aspectos de &lt;strong&gt;como iniciar com Progressive Web Apps?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Web content composed with the &lt;a href=&#34;https://html-online.com/editor/&#34;&gt;online wysiwyg editor&lt;/a&gt;. Please subscribe for a membership to remove promotional messages like the above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Minha experiência com o CT (Centro de Treinamento)</title>
      <link>http://tableless.com.br/minha-experiencia-com-o-ct-centro-de-treinamento/</link>
      <pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/minha-experiencia-com-o-ct-centro-de-treinamento/</guid>
      <description>&lt;p&gt;Meu nome é Danilo, tenho 25 anos, e moro em São Paulo. Antes de conhecer o projeto do CT , eu havia trabalhado pouco tempo como Front-end em uma empresa chamada Athos Informática. Minha experiência não foi uma das melhores, e acabou não dando muito certo. Porém, aconteceu algo muito bacana , quando eu fiquei disponível para o mercado de trabalho.&lt;/p&gt;

&lt;p&gt;Comecei a frequentar todos os Meetup&amp;#8217;s que eu podia, conversei com muitos Dev&amp;#8217;s da comunidade, e coloquei de fato a mão na massa. Certo dia fuçando o GitHub, descobri o projeto do &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://medium.com/trainingcenter/hello-world-conhe%C3%A7a-o-centro-de-treinamento-4a47a1230b0c&#34; target=&#34;_blank&#34;&gt;CT(Centro de Treinamento)&lt;/a&gt;   foi tudo muito lindo, era exatamente o que eu precisava, pensava comigo &amp;#8220;porra que oportunidade do caralho de criar algo da hora com alguém da comunidade.&amp;#8221;&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;A sementinha do capeta&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vontade não me faltava, o que precisava mesmo era de coragem para encarar os fatos. Então, clonei o repositório, baixei pra minha máquina e fiquei lendo e relendo o README do projeto.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;A decisão&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;De tanto que eu li, criei coragem e como recomendado, abri uma issue no Github e deixei minha BIO disponível para os mentores do CT.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56933&#34; src=&#34;uploads/2017/01/1-vpeNioZRCJN482Gy1rChhw.png&#34; alt=&#34;&#34; width=&#34;790&#34; height=&#34;517&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;A resposta&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Depois de pouco tempo um cara muito gente boa o &lt;a class=&#34;markup--user markup--p-user&#34; href=&#34;https://medium.com/u/9ccc2febef24&#34; target=&#34;_blank&#34;&gt;William Oliveira&lt;/a&gt; — me responde o seguinte:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56935&#34; src=&#34;uploads/2017/01/1-5uF9OA2mlkg_0hyuLd1prQ.png&#34; alt=&#34;&#34; width=&#34;775&#34; height=&#34;144&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Passaram-se 2 dias, e eu já imaginava que ninguém iria me adotar como pupilo. Hahaha!! Foi ai que apareceu um cara que eu já admirava nos bastidores há algum tempo.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Um pupilo foi adotado&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;E eis que ele veio, demorou… Mas veio! haha o nome dele? Nada mais nada menos do que o querido &lt;a class=&#34;markup--user markup--p-user&#34; href=&#34;https://medium.com/u/7af9a79d81d6&#34; target=&#34;_blank&#34;&gt;Wendell Adriel&lt;/a&gt;. Calorosamente ele disse:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56937&#34; src=&#34;uploads/2017/01/1-k7GFUhcUoRq7X77SaBPa7w.png&#34; alt=&#34;&#34; width=&#34;771&#34; height=&#34;319&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vocês já devem imaginar como eu fiquei feliz de saber que fui adotado… Hahaha!!  No mesmo dia o Wendell  já foi se socializando via issue mesmo 🙂 veja:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56939&#34; src=&#34;uploads/2017/01/1-fWHtAnVYI2p6SOQQvSii4A.png&#34; alt=&#34;&#34; width=&#34;790&#34; height=&#34;151&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dai ele me chamou no Slack e começamos a definir nossa rotina.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;A primeira abordagem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O primeiro contato foi bem tranquilo, ele pediu para me apresentar, falar sobre quais eram meus objetivos a curto, médio e longo prazo, e assim, definimos juntos uma rotina de criação de um projeto real.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Nosso projeto lindo (Pokémon — busque informações de seu pokémon favorito)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56940&#34; src=&#34;uploads/2017/01/1-zZ3F1dGnARKZpaGpZc-UIA.png&#34; alt=&#34;&#34; width=&#34;1126&#34; height=&#34;585&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O projeto foi arquitetado em cima dos meus objetivos , ele usa as tecnologias:&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li id=&#34;bf67&#34; class=&#34;graf graf--li graf-after--p&#34;&gt;
    Html5
  &lt;/li&gt;
  &lt;li id=&#34;525a&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    Css3
  &lt;/li&gt;
  &lt;li id=&#34;2fab&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    VanilhaJS
  &lt;/li&gt;
  &lt;li id=&#34;40ad&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    Ajax
  &lt;/li&gt;
  &lt;li id=&#34;54bc&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    API Rest
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&#34;0a9d&#34; class=&#34;graf graf--p graf-after--li&#34;&gt;
  O projeto ainda está em construção. No final vamos subir ele no Heroku pra vocês verem como ficou. Temos muito o que acrescentar ainda e nosso objetivo é aplicar mais tecnologia nele.
&lt;/p&gt;

&lt;p id=&#34;c918&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;
  Você deve estar se perguntando mais foi só um projetinho que eles criaram? Nops! Estou empregado também! 🙂 Iniciei minha jornada em uma empresa incrível chamada @Amil , e ainda por cima, trabalho com uma pessoa fera a &lt;a class=&#34;markup--user markup--p-user&#34; href=&#34;https://medium.com/u/f94ec1390498&#34; target=&#34;_blank&#34;&gt;Andréa Zambrana&lt;/a&gt;.
&lt;/p&gt;

&lt;p id=&#34;bd60&#34; class=&#34;graf graf--p graf-after--p&#34;&gt;
  Quero agradecer a todos os envolvidos no CT ,  e em especial ao meu Mentor e amigo &lt;a class=&#34;markup--user markup--p-user&#34; href=&#34;https://medium.com/u/7af9a79d81d6&#34; target=&#34;_blank&#34;&gt;Wendell Adriel&lt;/a&gt;  pela paciência do dia-dia. 🙂
&lt;/p&gt;

&lt;p id=&#34;87ec&#34; class=&#34;graf graf--p graf-after--p graf--last&#34;&gt;
  E o que te impede de procurar hoje mesmo um Mentor (a)?
&lt;/p&gt;

&lt;p class=&#34;graf graf--p graf-after--p graf--last&#34;&gt;
  Você deseja ser um Mentor (a)?
&lt;/p&gt;

&lt;p class=&#34;graf graf--p graf-after--p graf--last&#34;&gt;
  Não perca tempo muitos pupilos estão esperando por você! xD
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>