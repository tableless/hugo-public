<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Traduções on Tableless</title>
    <link>http://tableless.com.br/categories/tradu%C3%A7%C3%B5es/index.xml</link>
    <description>Recent content in Traduções on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/categories/tradu%C3%A7%C3%B5es/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Redesign do Google Fonts</title>
      <link>http://tableless.com.br/reimaginando-o-google-fontes/</link>
      <pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/reimaginando-o-google-fontes/</guid>
      <description>&lt;p&gt;O novo &lt;a href=&#34;https://fonts.google.com/&#34;&gt;Google Fonts&lt;/a&gt; torna mais fácil do que nunca para ver nossa coleção de fontes de designer de código aberto e aprender mais sobre as pessoas que os fazem.&lt;/p&gt;

&lt;p&gt;O Google Fonts foi &lt;a href=&#34;https://googlecode.blogspot.com/2010/05/introducing-google-font-api-google-font.html&#34;&gt;lançado pela primeira vez em 2010&lt;/a&gt; como uma iniciativa de engenharia para mover a web para frente e torná-lo mais rápido, utilizando diferentes tecnologias como cross-site de armazenamento em cache de fontes e de compressão inteligentes, criando uma maneira simples de adicionar variedade tipográfico para os sites. O Google originalmente lançou 14 fontes opensource. Hoje, o Google Fonts são vistos mais de 15 bilhões de vezes na web mais por dia em mais de 135 línguas em todo o mundo. Nos últimos seis anos, novas fontes surgiram, acrescentando dimensão e amplitude para o diretório. E agora eles criaram um design que se adapta através diferentes tamanhos de tela e dispositivos, redesenhando o site inteiro.&lt;/p&gt;

&lt;p&gt;Um dos nossos principais objetivos com o redesenho era que o Google Fonts envolvesse mais visualmente. O design foi feito de uma forma dinâmica e divertida para as pessoas a explorarem cada vez mais famílias de fontes. Eles adicionaram uma camada de interação e experimentação, incluindo informações sobre a tipografia, design e análise para cada fonte, permite aos usuários a tetarem se conectar com a tipografia em um nível pessoal.&lt;/p&gt;

&lt;p&gt;Para o novo logotipo, eles atualizaram a font para uma letra F maiúscula sem serifa, puxando um vermelho brilhante da paleta do Material Design.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://g-design.storage.googleapis.com/production/v6/assets/renditions/fonts-logo-1240.png&#34; width=&#34;1240&#34; height=&#34;620&#34; class=&#34;alignnone&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A flexibilidade do &lt;a href=&#34;https://material.google.com/components/grid-lists.html&#34;&gt;sistema de grid do Material Design&lt;/a&gt; permite que diferentes tipos de conteúdo de página e composições vivam harmoniosamente em todo o site, mantendo um ritmo visual consistente. Por exemplo, módulos como pares de fontes nas páginas exigem mais informações sobre a font em si, por isso o grid de quatro colunas para ajustar essas informações; as &lt;a href=&#34;https://fonts.google.com/featured&#34;&gt;coleções&lt;/a&gt;, por outro lado, só precisam de um grid de três colunas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://g-design.storage.googleapis.com/production/v6/assets/renditions/fonts-grid-1240.png&#34; width=&#34;1240&#34; height=&#34;725&#34; class=&#34;alignnone&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para otimizar a experiência de navegação, mantendo características básicas como a buscar, filtrar e editar, o Google projetou a interface para se adaptar aos fluxos de diferentes usuário. O painel de pesquisa à direita permite que as pessoas explorem melhor o recurso &amp;#8220;Pesquisa e Filtros&amp;#8221; que pode ser fechado com um clique para voltar a navegação em tela cheia.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://g-design.storage.googleapis.com/production/v6/assets/renditions/fonts-ui-container-1240.png&#34; width=&#34;1240&#34; height=&#34;762&#34; class=&#34;alignnone&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Google Fonts já é um dos serviços mais populares do Google, por isso era importante que em trazer o Material Design para o site.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://design.google.com/articles/reimagining-google-fonts/&#34;&gt;Post completo da designer que participou projeto&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entendendo o async e o await em JavaScript</title>
      <link>http://tableless.com.br/entendendo-o-async-e-o-await-em-javascript/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/entendendo-o-async-e-o-await-em-javascript/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;As funcionalidades &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; não conseguiram chegar para o ES6, mas isso não significa que elas não irão chegar ao JavaScript. Enquanto escrevo esse post, ela é uma proposta na &lt;a href=&#34;https://github.com/tc39/ecma262/tree/82bebe057c9fca355cfbfeb36be8e42f18c61e94&#34; target=&#34;_blank&#34;&gt;fase 3&lt;/a&gt; e está sendo trabalhada ativamente. As funcionalidades já estão no &lt;a href=&#34;https://blogs.windows.com/msedgedev/2015/09/30/asynchronous-code-gets-easier-with-es2016-async-function-support-in-chakra-and-microsoft-edge/&#34; target=&#34;_blank&#34;&gt;Edge&lt;/a&gt; e devem chegar a outros browsers assim que chegar na &lt;a href=&#34;https://twitter.com/bterlson/status/692464374842290176&#34; target=&#34;_blank&#34;&gt;fase 4&lt;/a&gt; &amp;#8211; pavimentando seu caminho para inclusão na próxima edição da linguagem (veja também: &lt;a href=&#34;https://tc39.github.io/process-document/&#34; target=&#34;_blank&#34;&gt;Processo TC39&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;utilizando-promises&#34;&gt;Utilizando Promises&lt;/h2&gt;

&lt;p&gt;Vamos supor que tenhamos o código abaixo. Aqui eu estou encapsulando uma chamada &lt;code&gt;HTTP&lt;/code&gt; em uma &lt;code&gt;Promise&lt;/code&gt;. A promise executa o &lt;code&gt;body&lt;/code&gt; caso haja sucesso e é rejeitada com um &lt;code&gt;err&lt;/code&gt; caso contrário. Ela puxa o HTML de um artigo aleatório &lt;a href=&#34;https://ponyfoo.com/&#34; target=&#34;_blank&#34;&gt;desse blog&lt;/a&gt; toda vez que é executada.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var request = require(&#39;request&#39;);

function getRandomPonyFooArticle () {
  return new Promise((resolve, reject) =&amp;gt; {
    request(&#39;https://ponyfoo.com/articles/random&#39;, (err, res, body) =&amp;gt; {
      if (err) {
        reject(err); return;
      }
      resolve(body);
    });
  });
}
&lt;/pre&gt;

&lt;p&gt;Uma utilização típica da promise mostrada anteriormente está no código abaixo. Nele nós construímos um encadeamento de promises transformando o HTML da página em Markdown de um subconjunto de seu DOM e então imprimimos de forma amigável no terminal utilizando um &lt;code&gt;console.log&lt;/code&gt;. Sempre lembre de adicionar um &lt;code&gt;.catch&lt;/code&gt; para suas promises.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var hget = require(&#39;hget&#39;);
var marked = require(&#39;marked&#39;);
var Term = require(&#39;marked-terminal&#39;);

printRandomArticle();

function printRandomArticle () {
  getRandomPonyFooArticle()
    .then(html =&amp;gt; hget(html, {
      markdown: true,
      root: &#39;main&#39;,
      ignore: &#39;.at-subscribe,.mm-comments,.de-sidebar&#39;
    }))
    .then(md =&amp;gt; marked(md, {
      renderer: new Term()
    }))
    .then(txt =&amp;gt; console.log(txt))
    .catch(reason =&amp;gt; console.error(reason));
}
&lt;/pre&gt;

&lt;p&gt;Esse código foi “melhor que utilizar callbacks” quando se trata da sensação de como foi ler o código sequencialmente.&lt;/p&gt;

&lt;h2 id=&#34;usando-generators&#34;&gt;Usando generators&lt;/h2&gt;

&lt;p&gt;Nós já exploramos os generators como uma forma de deixar o html disponível de uma maneira sintética e síncrona &lt;a href=&#34;https://ponyfoo.com/articles/es6-generators-in-depth&#34; target=&#34;_blank&#34;&gt;no passado&lt;/a&gt;. Mesmo que o código agora seja um pouco síncrono, existe um pouco de encapsulamento envolvido, e generators podem não ser a melhor maneira de chegar aos resultados que queremos, então vamos continuar utilizando Promises.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function getRandomPonyFooArticle (gen) {
  var g = gen();
  request(&#39;https://ponyfoo.com/articles/random&#39;, (err, res, body) =&amp;gt; {
    if (err) {
      g.throw(err); return;
    }
    g.next(body);
  });
}

getRandomPonyFooArticle(function* printRandomArticle () {
  var html = yield;
  var md = hget(html, {
    markdown: true,
    root: &#39;main&#39;,
    ignore: &#39;.at-subscribe,.mm-comments,.de-sidebar&#39;
  });
  var txt = marked(md, {
    renderer: new Term()
  });
  console.log(txt);
});
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Lembre-se que você deve encapsular a chamada ao yield em um bloco try / catch para preservar o tratamento de erros que adicionamos quando usamos promises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nem precisamos falar que usar generators dessa maneira não permite que escalemos bem nossas aplicações. Além de envolver uma sintaxe não intuitiva nessa mistura, seu código iterador será altamente acoplado ao generator que está sendo consumido. Isso faz com que você terá de modificar ele toda vez que uma nova expressão de &lt;code&gt;await&lt;/code&gt; for inserida no generator. A melhor alternativa é utilizar uma nova funcionalidade que está chegando: &lt;strong&gt;Funções Assíncronas&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;utilizando-async-await&#34;&gt;Utilizando &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Quando as &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; finalmente chegarem, seremos capazes de pegar nossa implementação baseada em promises e tirar a vantagem do estilo de &lt;strong&gt;“aparência síncrona”&lt;/strong&gt; dos generators. Outro benefício dessa abordagem é que não teremos que alterar o &lt;code&gt;getRandomPonyFooArticle&lt;/code&gt;, enquanto ele retornar uma promise ele poderá ser aguardado.&lt;/p&gt;

&lt;p&gt;Perceba que o &lt;code&gt;await&lt;/code&gt; só poderá ser utilizado em funções marcadas com a palavra chave &lt;code&gt;async&lt;/code&gt;. Ele funciona similarmente aos generators, suspendendo a execução em seu contexto até que a promise seja entregue. Se a expressão esperada não for uma promise, ela é transformada em uma promise.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;read();

async function read () {
  var html = await getRandomPonyFooArticle();
  var md = hget(html, {
    markdown: true,
    root: &#39;main&#39;,
    ignore: &#39;.at-subscribe,.mm-comments,.de-sidebar&#39;
  });
  var txt = marked(md, {
    renderer: new Term()
  });
  console.log(txt);
}
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Novamente &amp;#8211; assim como os generators &amp;#8211; lembre-se que você deverá encapsular o await em um bloco try / catch para que possamos capturar e tratar erros esperados das promises das funções assíncronas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Além disso, uma &lt;strong&gt;Função Assíncrona&lt;/strong&gt; sempre irá retornar uma &lt;code&gt;Promise&lt;/code&gt;. Essa promise é rejeitada em caso de exceções não tratadas ou é resolvida e enviada como retorno da função assíncrona caso contrário. Isso nos permite invocar uma Função assíncrona e misturar isso com uma continuação baseada em promises normalmente. O exemplo a seguir mostra como as duas maneiras podem ser combinadas.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function asyncFun () {
  var value = await Promise
    .resolve(1)
    .then(x =&amp;gt; x * 3)
    .then(x =&amp;gt; x + 5)
    .then(x =&amp;gt; x / 2);
  return value;
}
asyncFun().then(x =&amp;gt; console.log(`x: ${x}`));
// &amp;lt;- &amp;#039;x: 4&amp;#039;
&lt;/pre&gt;

&lt;p&gt;Voltando ao nosso exemplo anterior, ele mostra que podemos usar o &lt;code&gt;return txt&lt;/code&gt; da nossa função &lt;code&gt;async read&lt;/code&gt; e permitir que os “consumidores” possam dar continuidade utilizando promises ou até mesmo uma outra &lt;strong&gt;Função Assíncrona&lt;/strong&gt;. Dessa maneira, nossa função read deve se preocupar apenas com imprimir um markdown de forma legível no terminal de um artigo aleatório do Pony Foo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function read () {
  var html = await getRandomPonyFooArticle();
  var md = hget(html, {
    markdown: true,
    root: &#39;main&#39;,
    ignore: &#39;.at-subscribe,.mm-comments,.de-sidebar&#39;
  });
  var txt = marked(md, {
    renderer: new Term()
  });
  return txt;
}
&lt;/pre&gt;

&lt;p&gt;Então você poderá adicionar mais tarde um &lt;code&gt;await read()&lt;/code&gt; em outra &lt;strong&gt;Função Assíncrona&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function write () {
  var txt = await read();
  console.log(txt);
}
&lt;/pre&gt;

&lt;p&gt;Ou poderá simplesmente utilizar promises para dar continuação.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;read().then(txt =&amp;gt; console.log(txt));
&lt;/pre&gt;

&lt;h2 id=&#34;bifurcação-no-caminho&#34;&gt;Bifurcação no caminho&lt;/h2&gt;

&lt;p&gt;No fluxo assíncrono de código é comum executar duas ou mais tarefas concorrentemente. Enquanto as &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; facilitam a escrita de código assíncrono, elas também transformam elas mesmas em um código que é serial, ou seja, código que executa uma operação por vez. Uma função com múltiplos &lt;code&gt;await&lt;/code&gt; irá ser suspensa uma vez em cada &lt;code&gt;await&lt;/code&gt; até que a &lt;code&gt;Promise&lt;/code&gt; chegue (antes de retomar a execução e mover para o próximo &lt;code&gt;await&lt;/code&gt;, não diferente de como podemos ver com os generators e o &lt;code&gt;yield&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Para contornar isso você pode usar o &lt;code&gt;Promise.all&lt;/code&gt; para criar uma única promise que você irá dar o &lt;code&gt;await&lt;/code&gt; nela. O único problema é pegar o hábito de utilizar o &lt;code&gt;Promise.all&lt;/code&gt; ao invés de deixar tudo ocorrer em série, como também pode diminuir a performance do seu código.&lt;/p&gt;

&lt;p&gt;O exemplo a seguir mostra como você pode utilizar o &lt;code&gt;await&lt;/code&gt; em três diferentes promises que poderiam ser executadas concorrentemente. Dado que o &lt;code&gt;await&lt;/code&gt; suspende a sua &lt;strong&gt;Função Assíncrona&lt;/strong&gt; e que o &lt;code&gt;await Promise.all&lt;/code&gt; resulta em um &lt;strong&gt;array de results&lt;/strong&gt;, nós podemos desestruturar para puxar resultados individualmente do array.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function concurrent () {
  var [r1, r2, r3] = await Promise.all([p1, p2, p3]);
}
&lt;/pre&gt;

&lt;p&gt;Até um tempo atrás havia uma alternativa para o código acima: &lt;code&gt;await*&lt;/code&gt;, onde você não precisava encapsular as promises com o &lt;code&gt;Promise.all&lt;/code&gt;. O &lt;strong&gt;Babel 5&lt;/strong&gt; ainda suporta essa sintaxe, mas ela foi tirada da documentação e também do &lt;strong&gt;Babel 6&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function concurrent () {
  var [r1, r2, r3] = await* [p1, p2, p3];
}
&lt;/pre&gt;

&lt;p&gt;Você ainda pode utilizar algo como &lt;code&gt;all = Promise.all.bind(Promise)&lt;/code&gt; para obter uma alternativa ao &lt;code&gt;Promise.all&lt;/code&gt;. Partindo desse ponto, você pode fazer o mesmo para o &lt;code&gt;Promise.race&lt;/code&gt;, que não tinha um equivalente para &lt;code&gt;await*&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const all = Promise.all.bind(Promise);
async function concurrent () {
  var [r1, r2, r3] = await all([p1, p2, p3]);
}
&lt;/pre&gt;

&lt;h2 id=&#34;tratamento-de-erros&#34;&gt;Tratamento de Erros&lt;/h2&gt;

&lt;p&gt;Note que &lt;strong&gt;erros são engolidos “silenciosamente” nas Funções Assíncronas&lt;/strong&gt; &amp;#8211; assim como em &lt;code&gt;Promises&lt;/code&gt; normais. A menos que você adicione blocos &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; ao redor de chamadas &lt;code&gt;await&lt;/code&gt;, exceções não capturadas &amp;#8211; independentemente se ocorreram no corpo da sua &lt;strong&gt;Função Assíncrona&lt;/strong&gt; ou enquanto estava suspensa durante o &lt;code&gt;await&lt;/code&gt; &amp;#8211; irão rejeitar a &lt;code&gt;Promise&lt;/code&gt; retornada pela &lt;strong&gt;Função Assíncrona&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Naturalmente isso pode ser visto como um ponto forte: você tem a capacidade de tirar proveito das convenções do uso do &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt;, algo que você era incapaz de realizar com o uso de &lt;code&gt;callbacks&lt;/code&gt; &amp;#8211; e de alguma forma utilizar com &lt;code&gt;Promises&lt;/code&gt;. Nesse sentido, &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; são semelhantes aos generators, onde você também tinha a capacidade de tirar proveito do uso do &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; graças à suspensão da execução da função tornando um fluxo assíncrono em um código síncrono.&lt;/p&gt;

&lt;p&gt;Além disso, você também é capaz de capturar exceções de fora da &lt;strong&gt;Função Assíncrona&lt;/strong&gt;, simplesmente adicionando uma cláusula &lt;code&gt;.catch&lt;/code&gt; à &lt;code&gt;Promise&lt;/code&gt; que eles retornam. Enquanto isso é uma forma flexível de combinar o tratamento de erros utilizando &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; com cláusulas &lt;code&gt;.catch&lt;/code&gt; nas &lt;code&gt;Promises&lt;/code&gt;, também pode levar a uma grande confusão e deixar com que erros fiquem sem tratamento.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;read()
  .then(txt =&amp;gt; console.log(txt))
  .catch(reason =&amp;gt; console.error(reason));
&lt;/pre&gt;

&lt;p&gt;Nós devemos ter cuidado e educarmos a nós mesmos sobre as diferentes formas em que podemos encontrar, tratar, registrar e prevenir as exceções.&lt;/p&gt;

&lt;h2 id=&#34;utilizando-async-await-hoje&#34;&gt;Utilizando &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; hoje&lt;/h2&gt;

&lt;p&gt;Uma das formas de se utilizar &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; em seu código hoje é através do &lt;strong&gt;Babel&lt;/strong&gt;. Isso envolve uma série de módulos, mas você pode sempre criar um módulo que encapsula todos esses outros em um se você preferir. Eu incluí um &lt;code&gt;npm-run&lt;/code&gt; como uma maneira útil de se manter tudo em pacotes instalados localmente.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;npm i -g npm-run
npm i -D \
  browserify \
  babelify \
  babel-preset-es2015 \
  babel-preset-stage-3 \
  babel-runtime \
  babel-plugin-transform-runtime

echo &#39;{
  &#34;presets&#34;: [&#34;es2015&#34;, &#34;stage-3&#34;],
  &#34;plugins&#34;: [&#34;transform-runtime&#34;]
}&#39; &amp;gt; .babelrc
&lt;/pre&gt;

&lt;p&gt;O exemplo a seguir irá compilar o arquivo &lt;code&gt;example.js&lt;/code&gt; utilizando o &lt;strong&gt;browserify&lt;/strong&gt; enquanto utiliza o &lt;strong&gt;babelify&lt;/strong&gt; para habilitar o suporte às &lt;strong&gt;Funções Assíncronas&lt;/strong&gt;. Você pode então enviar o script para o &lt;strong&gt;node&lt;/strong&gt; ou &lt;strong&gt;salvar em disco&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;npm-run browserify -t babelify example.js | node
&lt;/pre&gt;

&lt;h2 id=&#34;leitura-adicional&#34;&gt;Leitura adicional&lt;/h2&gt;

&lt;p&gt;O rascunho das &lt;a href=&#34;https://tc39.github.io/ecmascript-asyncawait/&#34; target=&#34;_blank&#34;&gt;especificações para Funções Assíncronas&lt;/a&gt; é bem curto e deve ser uma leitura interessante se você quer aprender mais sobre essa funcionalidade que está por vir.&lt;/p&gt;

&lt;p&gt;Eu colei um pedaço de código abaixo com a finalidade de ajudar você a entender como &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; funcionam internamente. Mesmo que não possamos criar novas palavras chave, é importante em termos de compreensão saber o que está acontecendo atrás dar curtinas do &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;É útil saber que &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; internamente se aproveitam dos &lt;strong&gt;generators&lt;/strong&gt; e das &lt;strong&gt;promises&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O código a seguir mostra como uma declaração de uma &lt;strong&gt;Função Assíncrona&lt;/strong&gt; pode ser transformada em uma função comum que retorna o resultado alimentando a &lt;code&gt;spawn&lt;/code&gt; com um generator &amp;#8211; onde nós iremos considerar o &lt;code&gt;await&lt;/code&gt; como o equivalente sintático para &lt;code&gt;yield&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function example (a, b, c) {
  example function body
}

function example (a, b, c) {
  return spawn(function* () {
    example function body
  }, this);
}
&lt;/pre&gt;

&lt;p&gt;Na &lt;code&gt;spawn&lt;/code&gt;, uma promise é encapsulada em volta do código que irá percorrer o generator &amp;#8211; composta do código do usuário &amp;#8211; em série, repassando valores para o “generator” (corpo da &lt;strong&gt;Função Assíncrona&lt;/strong&gt;). Com isso podemos observar que &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; são um &lt;code&gt;syntactic sugar&lt;/code&gt; que utiliza generators e promises, isso faz com que seja importante você entender como cada uma dessas partes trabalham para que você possa ter um melhor entendimento em como você pode misturar, comparar e combinar diferentes tipos de fluxo de código assíncrono juntos.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function spawn (genF, self) {
  return new Promise(function (resolve, reject) {
    var gen = genF.call(self);
    step(() =&amp;gt; gen.next(undefined));
    function step (nextF) {
      var next;
      try {
        next = nextF();
      } catch(e) {
        // finished with failure, reject the promise
        reject(e);
        return;
      }
      if (next.done) {
        // finished with success, resolve the promise
        resolve(next.value);
        return;
      }
      // not finished, chain off the yielded promise and `step` again
      Promise.resolve(next.value).then(
        v =&amp;gt; step(() =&amp;gt; gen.next(v)),
        e =&amp;gt; step(() =&amp;gt; gen.throw(e))
      );
    }
  });
}
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Os pedaços de códigos mostrados devem ajudá-lo a compreender como o algoritmo do &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; itera sobre uma sequência de generators (expressões &lt;code&gt;await&lt;/code&gt;), encapsulando cada item na sequência em uma promise e então encadeando com a próxima sequência. Quando a sequência terminar ou uma das promises são rejeitadas ou a promise é retornada para a função que chamou o generator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Artigo traduzido e adaptado de: &lt;a href=&#34;https://ponyfoo.com/articles/understanding-javascript-async-await&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://ponyfoo.com/articles/understanding-javascript-async-await&#34;&gt;https://ponyfoo.com/articles/understanding-javascript-async-await&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lodash ou Underscore? Talvez, nenhum!</title>
      <link>http://tableless.com.br/lodash-ou-underscore-talvez-nenhum/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/lodash-ou-underscore-talvez-nenhum/</guid>
      <description>

&lt;p&gt;Durante os últimos anos, bibliotecas como &lt;a href=&#34;http://underscorejs.org&#34;&gt;Underscore&lt;/a&gt; e &lt;a href=&#34;https://lodash.com&#34;&gt;lodash&lt;/a&gt;, encontraram seu espaço no cinto de utilidades de muitos programadores JavaScript.&lt;/p&gt;

&lt;p&gt;Embora essas bibliotecas ajudem a escrever e até facilitar a sua vida em partes do seu código, não necessariamente, esse código, fica simples ou de fácil entendimento. Quem estiver lendo ou mantendo o código será obrigado a, além de conhecer a linguagem e sua biblioteca padrão, também conhecer a biblioteca de utilitários que está sendo usada.&lt;/p&gt;

&lt;p&gt;Bibliotecas vem e vão, e todo mundo tem sua favorita. Qual é a ordem de argumentos para essa função &lt;em&gt;map()&lt;/em&gt;? De qual biblioteca que essa função vem? &lt;em&gt;Underscore&lt;/em&gt; (o eterno favorito), &lt;em&gt;lodash&lt;/em&gt; (o versátil e mais rápido irmão mais novo), &lt;em&gt;Ramda&lt;/em&gt; (o primo que tem uma abordagem mais funcional, que tem todos os argumentos começando do lado direito), ou qualquer abstração legal que você encontrar hoje em dia?&lt;/p&gt;

&lt;p&gt;Se você estiver em um time, quais bibliotecas favoritas você escolheria? E se eu te disser, que você pode escolher a biblioteca padrão do JavaScript?&lt;/p&gt;

&lt;p&gt;Quando você escreve código usando a biblioteca padrão de funções, você está tornando ele mais fácil para usar, entender e manter futuramente (aliás, pode ser você essa pessoa, daqui uns meses, quem sabe?).&lt;/p&gt;

&lt;p&gt;Tudo bem, pode ser que você tenha que digitar um pouco mais para atingir a mesma funcionalidade, mas, desde quando, a velocidade que escrevemos código, é o gargalo para criar e manter um bom software? 😉&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;É mais fácil de recuperar uma não-abstração do que uma abstração errada &amp;#8211; &lt;a href=&#34;https://twitter.com/sebmarkbage&#34;&gt;Sebastian Markbåge&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;É muito mais fácil refatorar código verboso com poucas abstrações, do que códigos resumidos com uma abstração errada. Quando você começa a ver os padrões no seu código, repetidos por toda a parte, é hora de abstrair, você tem uma idéia de qual abstração correta você deve fazer, e provavelmente, vai acabar criando uma que valha a pena, mesmo contando com toda a sobrecarga que toda abstração adiciona.&lt;/p&gt;

&lt;p&gt;JavaScript está evoluindo, e as novas edições, ES2015 e ES2016 (antes conhecidas como ES6 e ES7) trazem novas possibilidades, e ferramentas como Babel, deixam isso ainda mais fácil de se usar hoje em dia. Com isso em mãos, essas bibliotecas de funções utilitárias ficam obsoletas.&lt;/p&gt;

&lt;p&gt;Ótimos recursos para aprender mais sobre as novas funções, a página em inglês, &lt;a href=&#34;https://babeljs.io/docs/learn-es2015/&#34;&gt;Learn ES2015&lt;/a&gt; no site do Babel e o livro, em inglês, &lt;a href=&#34;https://leanpub.com/understandinges6&#34;&gt;Understanding ECMAScript 6&lt;/a&gt;, escrito pelo &lt;a href=&#34;https://twitter.com/slicknet&#34;&gt;Nicholas C. Zakas&lt;/a&gt;. Aprender e utilizar todos os poderosos recursos do JavaScript te dá uma segurança futura, pois elas terão vida mais longa do que a biblioteca do momento.&lt;/p&gt;

&lt;p&gt;Mas não estou dizendo que não há espaço para bibliotecas de utilitários. Eu só estou dizendo que muitas das funções que eram essenciais para nós sermos produtivos quando escrevíamos ES3, podem ser escritas nativamente usando os recursos padrões do JavaScript.&lt;/p&gt;

&lt;p&gt;Talvez você não precise de &lt;em&gt;lodash&lt;/em&gt; ou &lt;em&gt;Underscore&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;exemplos&#34;&gt;Exemplos&lt;/h2&gt;

&lt;p&gt;Esses exemplos demonstram funcionalidades do ES5.1, ES2015 e ES2016, ficaram tão simples que você não precisa de uma biblioteca externa mais.&lt;/p&gt;

&lt;h2 id=&#34;o-que-eu-preciso-para-usá-los-hoje-em-dia&#34;&gt;O que eu preciso para usá-los hoje em dia?&lt;/h2&gt;

&lt;p&gt;ES5 é suportado atualmente em todos os navegadores e no Node.js. Exemplos usando ES2015 e ES2016, podem ser compilados para ES5 usando Babel. É muito simples integrar o Babel no seu sistema, quase todas as ferramentas de automação hoje em dia, tem uma integração oficial. Se você precisar dar suporte para navegadores antigos (IE8), você pode utilizar a biblioteca &lt;a href=&#34;https://github.com/es-shims/es5-shim&#34;&gt;es-shim&lt;/a&gt;, que traz quase todos os polyffils para ES5.&lt;/p&gt;

&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;

&lt;h4 id=&#34;iteração&#34;&gt;Iteração&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;_.each(array, fn)&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;array.forEach(fn)
&lt;/pre&gt;

&lt;h4 id=&#34;map&#34;&gt;Map&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;_.map(array, fn)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;array.map(fn)
&lt;/pre&gt;

&lt;h4 id=&#34;usar-uma-função-para-acumular-o-valor-de-um-array-da-esquerda-para-a-direita&#34;&gt;Usar uma função para acumular o valor de um array (da esquerda para a direita)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;_.reduce(array, fn, init)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.reduce(fn, init)
&lt;/pre&gt;

&lt;h4 id=&#34;usar-uma-função-para-acumular-o-valor-de-um-array-da-direita-para-a-esquerda&#34;&gt;Usar uma função para acumular o valor de um array (da direita para a esquerda)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.reduceRight(array, fn, init)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.reduceRight(fn, init)
&lt;/pre&gt;

&lt;h4 id=&#34;testar-se-todos-os-elementos-de-um-array-passam-em-uma-operação&#34;&gt;Testar se todos os elementos de um array passam em uma operação&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.every(array, fn)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.every(fn)
&lt;/pre&gt;

&lt;h4 id=&#34;testar-se-um-dos-elementos-de-um-array-passam-em-uma-operação&#34;&gt;Testar se um dos elementos de um array passam em uma operação&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.some(array, fn)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.some(fn)
&lt;/pre&gt;

&lt;h4 id=&#34;achar-um-valor-em-um-array&#34;&gt;Achar um valor em um array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.find(array, fn)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.find(fn)
&lt;/pre&gt;

&lt;h4 id=&#34;pegar-uma-propriedade-de-cada-elemento-do-array&#34;&gt;Pegar uma propriedade de cada elemento do array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.pluck(array, prop)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.map(value =&amp;gt; value[prop])
&lt;/pre&gt;

&lt;h4 id=&#34;verificar-se-o-array-contém-o-elemento&#34;&gt;Verificar se o array contém o elemento&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.includes(array, el)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2016&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.includes(el)
&lt;/pre&gt;

&lt;h4 id=&#34;convertendo-um-objeto-array-like-em-array&#34;&gt;Convertendo um objeto array-like em array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.toArray(arguments)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;[...arguments]
&lt;/pre&gt;

&lt;h4 id=&#34;criando-uma-cópia-do-array-e-removendo-todos-os-valores-falsos&#34;&gt;Criando uma cópia do array e removendo todos os valores falsos&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.compact(array)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.filter(Boolean)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.filter(x =&amp;gt; !!x)
&lt;/pre&gt;

&lt;h4 id=&#34;criando-uma-cópia-do-array-e-removendo-itens-duplicados&#34;&gt;Criando uma cópia do array e removendo itens duplicados&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.uniq(array)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;[...new Set(array)]
&lt;/pre&gt;

&lt;h4 id=&#34;achando-o-index-de-um-valor-no-array&#34;&gt;Achando o index de um valor no array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.indexOf(array, val)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.indexOf(val)
&lt;/pre&gt;

&lt;h4 id=&#34;achar-o-index-de-um-valor-no-array-baseado-em-uma-operação&#34;&gt;Achar o index de um valor no array baseado em uma operação&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.findIndex([4, 6, 7, 12], numPrimo);
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;[4, 6, 7, 12].findIndex(numPrimo);
&lt;/pre&gt;

&lt;h4 id=&#34;criar-um-array-com-n-números-começando-do-x&#34;&gt;Criar um array com N números, começando do X&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.range(x, x + n)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Array.from(Array(n), (v, k) =&amp;gt; k + x)
&lt;/pre&gt;

&lt;h3 id=&#34;objetos&#34;&gt;Objetos&lt;/h3&gt;

&lt;h4 id=&#34;nomes-de-todas-as-propriedades-enumeráveis-do-próprio-objeto&#34;&gt;Nomes de todas as propriedades enumeráveis do próprio objeto&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.keys(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.keys(object)
&lt;/pre&gt;

&lt;h4 id=&#34;número-de-chaves-em-um-objeto&#34;&gt;Número de chaves em um objeto&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.size(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.keys(object).length
&lt;/pre&gt;

&lt;h4 id=&#34;nome-de-todas-as-propriedades-enumeráveis-em-array&#34;&gt;Nome de todas as propriedades enumeráveis em array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.allKeys(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;[...Reflect.enumerate(object)]
&lt;/pre&gt;

&lt;h4 id=&#34;valores&#34;&gt;Valores&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.values(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.keys(object).map(key =&amp;gt; object[key])
&lt;/pre&gt;

&lt;h4 id=&#34;criar-um-novo-objeto-passando-o-prototype-e-propriedades&#34;&gt;Criar um novo objeto passando o &lt;em&gt;prototype&lt;/em&gt; e propriedades&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.create(proto, prop)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.assign(Object.create(proto), prop)
&lt;/pre&gt;

&lt;h4 id=&#34;criar-um-novo-objeto-a-partir-da-mescla-de-suas-propriedades&#34;&gt;Criar um novo objeto a partir da mescla de suas propriedades&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.assign({}, source, { a: false })
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.assign({}, source, { a: false })
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2016&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{ ...source, a: false }
&lt;/pre&gt;

&lt;h4 id=&#34;clonando-um-objeto-e-suas-propriedades-cópia-não-recursiva-de-propriedades&#34;&gt;Clonando um objeto e suas propriedades (cópia não recursiva de propriedades)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.extendOwn({}, object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2016&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{ ...object }
&lt;/pre&gt;

&lt;h4 id=&#34;verificando-se-o-dado-objeto-é-um-array&#34;&gt;Verificando se o dado objeto é um array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.isArray(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Array.isArray(object)
&lt;/pre&gt;

&lt;h4 id=&#34;verificando-se-o-objeto-é-um-número-finito&#34;&gt;Verificando se o objeto é um número finito&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.isNumber(object) &amp;&amp; _.isFinite(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Number.isFinite(object)
&lt;/pre&gt;

&lt;h3 id=&#34;funções&#34;&gt;Funções&lt;/h3&gt;

&lt;h4 id=&#34;vinculando-funções-a-novos-escopos-ou-binding&#34;&gt;Vinculando funções a novos escopos (ou &lt;em&gt;binding&lt;/em&gt;)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;foo(_.bind(function () {
  this.bar();
}, this));
foo(_.bind(object.fun, object));
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;foo(() =&amp;gt; { this.bar(); });
foo(object.fun.bind(object));
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2016&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;foo(() =&amp;gt; { this.bar(); });
foo(::object.fun);
&lt;/pre&gt;

&lt;h3 id=&#34;utilidades&#34;&gt;Utilidades&lt;/h3&gt;

&lt;h4 id=&#34;funções-de-identidade&#34;&gt;Funções de identidade&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.identity
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;value =&amp;gt; value
&lt;/pre&gt;

&lt;h4 id=&#34;uma-função-que-retorna-um-valor&#34;&gt;Uma função que retorna um valor&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.constant(value)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;() =&amp;gt; value
&lt;/pre&gt;

&lt;h4 id=&#34;funções-vazias&#34;&gt;Funções vazias&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.noop
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;() =&amp;gt; {}
&lt;/pre&gt;

&lt;h4 id=&#34;pegar-o-valor-to-tempo-em-milisegundos&#34;&gt;Pegar o valor to tempo em milisegundos&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.now()
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Date.now()
&lt;/pre&gt;

&lt;h3 id=&#34;template&#34;&gt;Template&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var greeting = _.template(&#34;hello &amp;lt;%= name %&amp;gt;&#34;);
greeting({ name: &#39;moe&#39; });
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const greeting = ({ name }) =&amp;gt; `hello ${name}`;
greeting({ name: &#39;moe&#39; });
&lt;/pre&gt;

&lt;h2 id=&#34;resumindo&#34;&gt;Resumindo&lt;/h2&gt;

&lt;p&gt;Cada um dos exemplos demonstra as possibilidades que os novos padrões do JavaScript traz para nosso código do dia-a-dia. Re-aprenda o JavaScript de hoje!&lt;/p&gt;

&lt;p&gt;Se interessou pelo assunto? Quer ver mais posts desse tipo? Alguma sugestão?&lt;/p&gt;

&lt;p&gt;Deixe sua opinião aqui nos comentários ou mande um &lt;em&gt;ping&lt;/em&gt; no &lt;a href=&#34;https://twitter.com/oieduardorabelo&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Artigo traduzido e adaptado de &lt;a href=&#34;https://www.reindex.io/blog/you-might-not-need-underscore/&#34;&gt;You Might Not Need Underscore&lt;/a&gt; escrito por &lt;a href=&#34;https://twitter.com/VilleImmonen&#34;&gt;Ville Immonen&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sass vs. LESS vs. Stylus: Batalha dos Pré-processadores</title>
      <link>http://tableless.com.br/sass-vs-less-vs-stylus-batalha-dos-pre-processadores/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/sass-vs-less-vs-stylus-batalha-dos-pre-processadores/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Pré-processadores CSS3 são linguagens criadas com um único propósito de adicionar funcionalidades legais e criativas para o CSS sem quebrar a compatibilidade entre browsers. Os pré-processadores disponibilizam milhares de funcionalidades, e nesse artigo iremos falar sobre as mais utilizadas e conhecidas e algumas nem tanto conhecidas. Vamos começar:&lt;/p&gt;

&lt;h2 id=&#34;sintaxe&#34;&gt;Sintaxe&lt;/h2&gt;

&lt;p&gt;A parte mais importante ao escrever códigos utilizando um pré-processador é entender a sua sintaxe. Felizmente para nós, a sintaxe é (ou pode ser) idêntica à do CSS puro para os três pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-less&#34;&gt;Sass e LESS&lt;/h3&gt;

&lt;p&gt;Ambos utilizam o a sintaxe padrão do CSS. Isso faz com que seja extremamente fácil converter um arquivo CSS já existente para qualquer um deles. Sass utiliza arquivos com extensão .scss e LESS com extensão .less. Uma configuração básica de um arquivo Sass ou LESS pode ser como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.scss ou style.less */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ter notado, isso é apenas CSS puro, que compila perfeitamente em ambos pré-processadores (Sass e LESS).&lt;/p&gt;

&lt;p&gt;É importante notar que Sass também tem uma sintaxe mais antiga, que omite ponto e vírgula e as chaves. Ainda pode ser usado, mas como é uma sintaxe antiga, não iremos utilizá-la depois deste exemplo. A sintaxe utiliza arquivos com a extensão .sass e são da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.sass */
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Observação pessoal:&lt;/strong&gt; Essa sintaxe não é por causa de ser mais antiga e sim pois no início o &lt;strong&gt;Sass&lt;/strong&gt; era parte de um outro pré-processador chamado &lt;strong&gt;Haml&lt;/strong&gt; criado por desenvolvedores &lt;strong&gt;Ruby&lt;/strong&gt;, e por causa disso as folhas de estilo escritas com &lt;strong&gt;Sass&lt;/strong&gt; utilizavam uma sintaxe como a do &lt;strong&gt;Ruby&lt;/strong&gt;, sem chaves, ponto e vírgula e controlado por identação.&lt;/p&gt;

&lt;h3 id=&#34;stylus&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;A sintaxe para o Stylus é muito mais adaptável. Utiliza arquivos com extensão .styl, aceita a sintaxe padrão do CSS, porém também aceita algumas variações onde chaves, dois-pontos e ponto e vírgula são todos opcionais. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.styl */
h1 {
    color: #0982c1;
}
/* omitindo chaves */
h1
    color: #0982c1;

/* omitindo dois-pontos e ponto e vírgula
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;Utilizar diferentes variações em um mesmo arquivo também é válido, então o seguinte código seria compilado sem erros.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1 {
    color #0982c1
}
h2
    font-size: 1.2em
&lt;/pre&gt;

&lt;h2 id=&#34;variáveis&#34;&gt;Variáveis&lt;/h2&gt;

&lt;p&gt;Variáveis podem ser declaradas e usadas através das folhas de estilo. Elas podem ter qualquer valor que seja um valor em CSS (por exemplo: cores, números [unidades também], ou texto), e podem ser referenciadas em qualquer lugar das nossas folhas de estilo.&lt;/p&gt;

&lt;h3 id=&#34;sass&#34;&gt;Sass&lt;/h3&gt;

&lt;p&gt;Variáveis em Sass tem seu nome começado o símbolo &amp;#8220;$&amp;#8221; e o nome e o seu valor são separados com dois-pontos, assim como uma propriedade CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$mainColor: #0982c1;
$siteWidth: 1024px;
$borderStyle: dotted;

body {
    color: $mainColor;
    border: 1px $borderStyle $mainColor;
    max-width: $siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;Varíaves em LESS são praticamente iguais as variáveis no Sass, exceto por começarem seus nomes com o símbolo &amp;#8220;@&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mainColor: #0982c1;
@siteWidth: 1024px;
@borderStyle: dotted;

body {
    color: @mainColor;
    border: 1px @borderStyle @mainColor;
    max-width: @siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-1&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;Variáveis em Stylus não precisam começar com nenhum símbolo, porém ele permite a utilização do símbolo &amp;#8220;$&amp;#8221;. Como sempre, o ponto e vírgula para finalizar não é necessário, mas um sinal de igual entre o nome da variável e seu valor é. Uma coisa importante para se notar é que na versão 0.22.4 do Stylus variáveis com nome começados com o símbolo &amp;#8220;@&amp;#8221; são compiladas, porém não aplicam seu valor quando referenciadas. Em oturas palavras, não faça isso.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;mainColor = #0982c1;
siteWidth = 1024px;
$borderStyle = dotted;

body
    color mainColor
    border 1px $borderStyle mainColor
    max-width siteWidth
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Cada um dos arquivos acima irão compilar no mesmo CSS. Você pode usar sua imaginação para ver quão úteis variáveis podem ser. Não precisaremos mais ao mudar uma cor reescrever a mesma vinte vezes, ou querer mudar a largura de nosso site e ter de procurar por todo o site para fazer isso. Aqui está o CSS depois de compilado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    color: #0982c1;
    border: 1px dotted #0982c1;
    max-width: 1024px.
}
&lt;/pre&gt;

&lt;h2 id=&#34;aninhamento&#34;&gt;Aninhamento&lt;/h2&gt;

&lt;p&gt;Se precisarmos referenciar múltiplos elementos com o mesmo pai em nosso CSS, pode ser entediante ficar digitanto o pai toda vez.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;p&gt;Ao invés disso, usando um pré-processador, podemos escrever os seletores filhos dentro das chaves do elemento pai. O símbolo &amp;#8220;&amp;amp;&amp;#8221; é usado para referenciar o seletor pai.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;p&gt;Todos os três pré-processdores utilizam a mesma sintaxe para aninhar seletores.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;

    nav {
        height: 25px;

        a {
            color: #0982c1;

            &amp;:hover {
                text-decoration: underline;
            }
        }
    }
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-1&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Abaixo está o CSS compilado do código escrito acima. Está exatamente igual ao mostrado no começo &amp;#8211; que conveniente!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;h2 id=&#34;mixins&#34;&gt;Mixins&lt;/h2&gt;

&lt;p&gt;Mixins são funções que permitem reusar propriedades através de nossas folhas de estilo. Ao invés de procurar por todas nossas folhas de estilo e mudar uma propriedade várias vezes, podemos apenas mudar dentro de nosso mixin. Isso pode ser realmente útil para estilização de elementos específicos e para &amp;#8220;vendor prefixes&amp;#8221; (moz-*, o-*, etc). Quando os mixins são chamados de dentro de um seletor CSS, os argumentos são reconhecidos e os estilos dentro do mixin são aplicados ao seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-1&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Sass chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
@mixin error($borderWidth: 2px) {
    border: $borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    @include error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    @include error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-1&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em LESS chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
.error(@borderWidth: 2px) {
    border: @borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    .error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    .error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-2&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Stylus chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
error(borderWidth = 2px) {
    border: borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-2&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Todos pré-processadores irão compilar o mesmo código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.generic-error {
    padding: 20px;
    margin: 4px;
    border: 2px solid #f00;
    color: #f00;
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    border: 5px solid #f00;
    color: #f00;
}
&lt;/pre&gt;

&lt;h2 id=&#34;herança&#34;&gt;Herança&lt;/h2&gt;

&lt;p&gt;Quando estamos escrevendo CSS da velha maneira, nós usaríamos o seguinte código para aplicar o mesmo estilo para múltiplos elementos de uma só vez:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p,
u,
ol {
    /* estilos aqui */
}
&lt;/pre&gt;

&lt;p&gt;Isso funciona perfeitamente, mas se depois precisássemos de estilizar os elementos individualmente, outro seletor deveria ser criado para cada um e rapidamente poderia ficar cada vez mais bagunçado e difícil de manter. Podemos utilizar herança para resolver isso. Herança é a habilidade de outros seletores CSS herdarem as propriedades de outro seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-stylus&#34;&gt;Sass e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}

p {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-sass-e-stylus&#34;&gt;CSS Compilado (Sass e Stylus)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block, p, ul, ol {
    margin: 10px 5px;
    padding: 2px;
}
p {
    border: 1px solid #eee;
}
ul, ol {
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-2&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;LESS não tem suporte a herança de estilos como Sass e Stylus. Ao invés de adicionar diversos seletores para um grupo de propriedades, ele trata herança como um mixin sem argumentos e importa os estilos para dentro de seus próprios seletores. O problema disso é que propriedades são repetidas em sua folha de estilo compilada. Abaixo segue como deve-se utilizar:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
 
p {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Observação pessoal:&lt;/strong&gt; Como mencionado nos comentários, o LESS tem suporte a herança e pode ser feita com a seguinte sintaxe:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p {
        &amp;:extend(.block);
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-less&#34;&gt;CSS Compilado (LESS)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
p {
    margin: 10px 5px;
    padding: 2px;
    border: 1px solid #eee;
}
ul,
ol {
    margin: 10px 5px;
    padding: 2px;
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ver, os estilos do seletor .block foram inseridas nos seletores que queríamos aplicar a herança. É importante notar que a prioridade das propriedades pode se tornar um problema, então devemos ter bastante cautela.&lt;/p&gt;

&lt;h2 id=&#34;importação&#34;&gt;Importação&lt;/h2&gt;

&lt;p&gt;Na comunidade CSs, importar CSS é visto com maus olhos por utilizar diversas chamadas HTTP. Importar com um pré-processador funciona de forma diferente no entanto. Se você importar um arquivo com qualquer um dos três pré-processadores, ele irá literalmente pegar todo o conteúdo do arquivo durante a importação e gerar apenas um arquivo. Lembre-se que arquivos .css comuns importados compilam com o código:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;file.css&#34;;
&lt;/pre&gt;

&lt;p&gt;Lembre-se também que mixins e variáveis podem ser importadas e usadas em sua folha de estilo principal. Importação faz com que possamos criar arquivos separados para uma melhor organização.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-1&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* arquivo.{extensao} */
body {
    background: #eee;
}
&lt;/pre&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;reset.css&#34;;
@import &#34;arquivo.{extensao}&#34;;
 
p {
    background: #0982c1;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-3&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;h2 id=&#34;introdução-1&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;-&amp;gt;Pré-processadores produzem CSS que funciona em todos os browsers&lt;/p&gt;

&lt;p&gt;Pré-processadores CSS3 são linguagens criadas com um único propósito de adicionar funcionalidades legais e criativas para o CSS sem quebrar a compatibilidade entre browsers. Eles fazem isso compilando o código que escrevemos em CSS puro que pode ser usado em qualquer browser de agora até a era das pedras. Os pré-processadores disponibilizam milhares de funcionalidades, e nesse artigo iremos falar sobre as mais utilizadas e conhecidas e algumas nem tanto conhecidas. Vamos começar&lt;/p&gt;

&lt;h2 id=&#34;sintaxe-1&#34;&gt;Sintaxe&lt;/h2&gt;

&lt;p&gt;A parte mais importante ao escrever códigos utilizando um pré-processador CSS é entender a sua sintaxe. Felizmente para nós, a sintaxe é (ou pode ser) idêntica à do CSS puro para os três pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-less-1&#34;&gt;Sass e LESS&lt;/h3&gt;

&lt;p&gt;Ambos utilizam o a sintaxe padrão do CSS. Isso faz com que seja extremamente fácil converter um arquivo CSS já existente para qualquer um deles. Sass utiliza arquivos com extensão .scss e LESS com extensão .less. Uma configuração básica de um arquivo Sass ou LESS pode ser como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.scss ou style.less */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ter notado, isso é apenas CSS puro, que compila perfeitamente em ambos pré-processadores (Sass e LESS).&lt;/p&gt;

&lt;p&gt;É importante notar que Sass também tem uma sintaxe mais antiga, que omite ponto e vírgula e as chaves. Ainda pode ser usado, mas como é uma sintaxe antiga, não iremos utilizá-la depois deste exemplo. A sintaxe utiliza arquivos com a extensão .sass e são da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.sass */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-3&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;A sintaxe para o Stylus é muito mais adaptável. Utiliza arquivos com extensão .styl, aceita a sintaxe padrão do CSS, porém também aceita algumas variações onde chaves, dois-pontos e ponto e vírgula são todos opcionais. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.styl */
h1 {
    color: #0982c1;
}
/* omitindo chaves */
h1
    color: #0982c1;

/* omitindo dois-pontos e ponto e vírgula
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;Utilizar diferentes variações em um mesmo arquivo também é válido, então o seguinte código seria compilado sem erros.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1 {
    color #0982c1
}
h2
    font-size: 1.2em
&lt;/pre&gt;

&lt;h2 id=&#34;variáveis-1&#34;&gt;Variáveis&lt;/h2&gt;

&lt;p&gt;Variáveis podem ser declaradas e usadas através das folhas de estilo. Elas podem ter qualquer valor que seja um valor em CSS (por exemplo: cores, números [unidades também], ou texto), e podem ser referenciadas em qualquer lugar das nossas folhas de estilo.&lt;/p&gt;

&lt;h3 id=&#34;sass-2&#34;&gt;Sass&lt;/h3&gt;

&lt;p&gt;Variáveis em Sass tem seu nome começado o símbolo &amp;#8220;$&amp;#8221; e o nome e o seu valor são separados com dois-pontos, assim como uma propriedade CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$mainColor: #0982c1;
$siteWidth: 1024px;
$borderStyle: dotted;

body {
    color: $mainColor;
    border: 1px $borderStyle $mainColor;
    max-width: $siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-3&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;Varíaves em LESS são praticamente iguais as variáveis no Sass, exceto por começarem seus nomes com o símbolo &amp;#8220;@&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mainColor: #0982c1;
@siteWidth: 1024px;
@borderStyle: dotted;

body {
    color: @mainColor;
    border: 1px @borderStyle @mainColor;
    max-width: @siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-4&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;Variáveis em Stylus não precisam começar com nenhum símbolo, porém ele permite a utilização do símbolo &amp;#8220;$&amp;#8221;. Como sempre, o ponto e vírgula para finalizar não é necessário, mas um sinal de igual entre o nome da variável e seu valor é. Uma coisa importante para se notar é que na versão 0.22.4 do Stylus variáveis com nome começados com o símbolo &amp;#8220;@&amp;#8221; são compiladas, porém não aplicam seu valor quando referenciadas. Em oturas palavras, não faça isso.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;mainColor = #0982c1;
siteWidth = 1024px;
$borderStyle = dotted;

body
    color mainColor
    border 1px $borderStyle mainColor
    max-width siteWidth
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-4&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Cada um dos arquivos acima irão compilar no mesmo CSS. Você pode usar sua imaginação para ver quão úteis variáveis podem ser. Não precisaremos mais ao mudar uma cor reescrever a mesma vinte vezes, ou querer mudar a largura de nosso site e ter de procurar por todo o site para fazer isso. Aqui está o CSS depois de compilado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    color: #0982c1;
    border: 1px dotted #0982c1;
    max-width: 1024px.
}
&lt;/pre&gt;

&lt;h2 id=&#34;aninhamento-1&#34;&gt;Aninhamento&lt;/h2&gt;

&lt;p&gt;Se precisarmos referenciar múltiplos elementos com o mesmo pai em nosso CSS, pode ser entediante ficar digitanto o pai toda vez.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;p&gt;Ao invés disso, usando um pré-processador, podemos escrever os seletores filhos dentro das chaves do elemento pai. O símbolo &amp;#8220;&amp;amp;&amp;#8221; é usado para referenciar o seletor pai.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-2&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;p&gt;Todos os três pré-processdores utilizam a mesma sintaxe para aninhar seletores.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;

    nav {
        height: 25px;

        a {
            color: #0982c1;

            &amp;:hover {
                text-decoration: underline;
            }
        }
    }
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-5&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Abaixo está o CSS compilado do código escrito acima. Está exatamente igual ao mostrado no começo &amp;#8211; que conveniente!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;h2 id=&#34;mixins-1&#34;&gt;Mixins&lt;/h2&gt;

&lt;p&gt;Mixins são funções que permitem reusar propriedades através de nossas folhas de estilo. Ao invés de procurar por todas nossas folhas de estilo e mudar uma propriedade várias vezes, podemos apenas mudar dentro de nosso mixin. Isso pode ser realmente útil para estilização de elementos específicos e para &amp;#8220;vendor prefixes&amp;#8221; (moz-*, o-*, etc). Quando os mixins são chamados de dentro de um seletor CSS, os argumentos são reconhecidos e os estilos dentro do mixin são aplicados ao seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-3&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Sass chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
@mixin error($borderWidth: 2px) {
    border: $borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    @include error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    @include error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-4&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em LESS chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
.error(@borderWidth: 2px) {
    border: @borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    .error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    .error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-5&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Stylus chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
error(borderWidth = 2px) {
    border: borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-6&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Todos pré-processadores irão compilar o mesmo código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.generic-error {
    padding: 20px;
    margin: 4px;
    border: 2px solid #f00;
    color: #f00;
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    border: 5px solid #f00;
    color: #f00;
}
&lt;/pre&gt;

&lt;h2 id=&#34;herança-1&#34;&gt;Herança&lt;/h2&gt;

&lt;p&gt;Quando estamos escrevendo CSS da velha maneira, nós usaríamos o seguinte código para aplicar o mesmo estilo para múltiplos elementos de uma só vez:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p,
u,
ol {
    /* estilos aqui */
}
&lt;/pre&gt;

&lt;p&gt;Isso funciona perfeitamente, mas se depois precisássemos de estilizar os elementos individualmente, outro seletor deveria ser criado para cada um e rapidamente poderia ficar cada vez mais bagunçado e difícil de manter. Podemos utilizar herança para resolver isso. Herança é a habilidade de outros seletores CSS herdarem as propriedades de outro seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-stylus-1&#34;&gt;Sass e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}

p {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-sass-e-stylus-1&#34;&gt;CSS Compilado (Sass e Stylus)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block, p, ul, ol {
    margin: 10px 5px;
    padding: 2px;
}
p {
    border: 1px solid #eee;
}
ul, ol {
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-5&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;LESS não tem suporte a herança de estilos como Sass e Stylus. Ao invés de adicionar diversos seletores para um grupo de propriedades, ele trata herança como um mixin sem argumentos e importa os estilos para dentro de seus próprios seletores. O problema disso é que propriedades são repetidas em sua folha de estilo compilada. Abaixo segue como deve-se utilizar:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
 
p {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-less-1&#34;&gt;CSS Compilado (LESS)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
p {
    margin: 10px 5px;
    padding: 2px;
    border: 1px solid #eee;
}
ul,
ol {
    margin: 10px 5px;
    padding: 2px;
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ver, os estilos do seletor .block foram inseridas nos seletores que queríamos aplicar a herança. É importante notar que a prioridade das propriedades pode se tornar um problema, então devemos ter bastante cautela.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;reset.css&#34;;
body {
    background: #eee;
}
p {
    background: #0982c1;
}
&lt;/pre&gt;

&lt;h2 id=&#34;funções-de-cores&#34;&gt;Funções de Cores&lt;/h2&gt;

&lt;p&gt;Funções de cores são funções nativas que transformam uma cor por compilação. Podem ser extremamente úteis para criar gradientes, escurecer cores no &amp;#8220;hover&amp;#8221; de elementos e muito mais.&lt;/p&gt;

&lt;h3 id=&#34;sass-4&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten($color, 10%); /* retorna uma cor 10% mais clara que $color */
darken($color, 10%);  /* retorna uma cor 10% mais escura $color */
 
saturate($color, 10%);   /* retorna uma cor 10% mais saturada que $color */
desaturate($color, 10%); /* retorna uma cor 10% menos saturada que $color */
 
grayscale($color);  /* retorna $color na escala de cinza */
complement($color); /* retorna cor complementar de $color */
invert($color);     /* retorna cor inversa de $color */
 
mix($color1, $color2, 50%); /* mistura $color1 com $color2 com um peso de 50% */
&lt;/pre&gt;

&lt;p&gt;Essas é apenas uma pequena lista de funções de cores disponíveis no Sass. A lista completa das funções de cores disponíveis no Sass pode ser encontrada na &lt;a href=&#34;http://sass-lang.com/documentation/Sass/Script/Functions.html&#34; target=&#34;_blank&#34;&gt;documentação do Sass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Funções de cores podem ser usadas em qualquer lugar que uma cor é válida no CSS. Veja um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$color: #0982C1;
 
h1 {
    background: $color;
    border: 3px solid darken($color, 50%);
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-6&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten(@color, 10%); /* retorna uma cor 10% mais clara que @color */
darken(@color, 10%);  /* retorna uma cor 10% mais escura @color */
 
saturate(@color, 10%);   /* retorna uma cor 10% mais saturada que @color */
desaturate(@color, 10%); /* retorna uma cor 10% menos saturada que @color */
 
spin(@color, 10); /* retorna uma cor 10 graus acima na matiz/tonalidade que @color */
spin(@color, -10); /* retorna uma cor 10 graus abaixo na matiz/tonalidade que @color */
 
mix(@color1, @color2); /* mistura @color1 com @color2 */
&lt;/pre&gt;

&lt;p&gt;A lista de todas as funções disponíveis no LESS pode encontrada na &lt;a href=&#34;http://lesscss.org/#-color-functions&#34; target=&#34;_blank&#34;&gt;documentação LESS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veja um exemplo de como usar uma função de cores no LESS:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@color: #0982C1;
 
h1 {
    background: @color;
    border: 3px solid darken(@color, 50%);
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-6&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten(color, 10%); /* retorna uma cor 10% mais clara que &#39;color&#39; */
darken(color, 10%);  /* retorna uma cor 10% mais escura &#39;color&#39; */
 
saturate(color, 10%);   /* retorna uma cor 10% mais saturada que &#39;color&#39; */
desaturate(color, 10%); /* retorna uma cor 10% menos saturada que &#39;color&#39; */
&lt;/pre&gt;

&lt;p&gt;A lista completa de todas funções de cores disponíveis no Stylus pode ser encontrada na &lt;a href=&#34;http://stylus-lang.com/docs/bifs.html&#34; target=&#34;_blank&#34;&gt;documentação Stylus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veja um exemplo de como usar uma função de cores no Stylus:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;color = #0982C1
 
h1
    background color
    border 3px solid darken(color, 50%)
&lt;/pre&gt;

&lt;h2 id=&#34;operações&#34;&gt;Operações&lt;/h2&gt;

&lt;p&gt;Fazer cálculos no CSS é bastante útil e agora totalmente possível. É bem simples e é dessa maneira que fazemos:&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-3&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    margin: (14px/2);
    top: 50px + 100px;
    right: 100px - 50px;
    left: 10 * 10;
}
&lt;/pre&gt;

&lt;h2 id=&#34;aplicações-práticas&#34;&gt;Aplicações Práticas&lt;/h2&gt;

&lt;p&gt;Nós falamos de diversas funcionalidades e novas coisas que pré-processadores podem fazer, mas não mostramos nada na prática ainda. Veja uma pequena lista de aplicações no mundo real em que um pré-processador é um salva-vidas.&lt;/p&gt;

&lt;h3 id=&#34;vendor-prefixes&#34;&gt;Vendor Prefixes&lt;/h3&gt;

&lt;p&gt;Essa é uma das principais razões para se usar um pré-processador e por um motivo bom &amp;#8211; economia gigante de tempo e lágrimas. Criar um mixin para cuidar dos vendor prefixes é fácil e nos salva de uma codificação repetitiva e dolorosa. Veja como fazer:&lt;/p&gt;

&lt;h4 id=&#34;sass-5&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mixin border-radius($values) {
    -webkit-border-radius: $values;
        -moz-border-radius: $values;
            border-radius: $values;
}
 
div {
    @include border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-7&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.border-radius(@values) {
    -webkit-border-radius: @values;
        -moz-border-radius: @values;
            border-radius: @values;
}
 
div {
    .border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-7&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;border-radius(values) {
    -webkit-border-radius: values;
        -moz-border-radius: values;
            border-radius: values;
}
 
div {
    border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;css-compilado-7&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
    -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
            border-radius: 10px;
}
&lt;/pre&gt;

&lt;h3 id=&#34;texto-3d&#34;&gt;Texto 3D&lt;/h3&gt;

&lt;p&gt;Simular um texto 3D utilizando diversos text-shadows é uma grande ideia. O único problema é que mudar a cor depois de criar é difícil e incômodo. Usando mixins e funções de cores, podemos criar um texto 3D e mudar sua cor sem nenhuma dificuldade.&lt;/p&gt;

&lt;h4 id=&#34;sass-6&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mixin text3d($color) {
    color: $color;
    text-shadow: 1px 1px 0px darken($color, 5%),
            2px 2px 0px darken($color, 10%),
            3px 3px 0px darken($color, 15%),
            4px 4px 0px darken($color, 20%),
            4px 4px 2px #000;
}
 
h1 {
    font-size: 32pt;
    @include text3d(#0982c1);
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-8&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.text3d(@color) {
    color: @color;
    text-shadow: 1px 1px 0px darken(@color, 5%),
            2px 2px 0px darken(@color, 10%),
            3px 3px 0px darken(@color, 15%),
            4px 4px 0px darken(@color, 20%),
            4px 4px 2px #000;
}
 
span {
    font-size: 32pt;
    .text3d(#0982c1);
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-8&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;text3d(color)
    color: color
    text-shadow: 1px 1px 0px darken(color, 5%), 2px 2px 0px darken(color, 10%), 3px 3px 0px darken(color, 15%), 4px 4px 0px darken(color, 20%), 4px 4px 2px #000
span
    font-size: 32pt
    text3d(#0982c1)
&lt;/pre&gt;

&lt;p&gt;Escolhi escrever os &amp;#8220;text-shadows&amp;#8221; do Stylus em apenas uma linha pois omiti as chaves.&lt;/p&gt;

&lt;h4 id=&#34;css-compilado-8&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;span {
    font-size: 32pt;
    color: #0982c1;
    text-shadow: 1px 1px 0px #097bb7, 
            2px 2px 0px #0875ae, 
            3px 3px 0px #086fa4, 
            4px 4px 0px #07689a, 
            4px 4px 2px #000;
}
&lt;/pre&gt;

&lt;h4 id=&#34;resultado-final&#34;&gt;Resultado Final&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn.tutsplus.com/net/uploads/legacy/1144_preprocshootout/text3d.png&#34; alt=&#34;Texto 3D&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;colunas&#34;&gt;Colunas&lt;/h3&gt;

&lt;p&gt;Usar operações numéricas e variáveis para colunas é uma ideia que tive da primeira vez que estava brincando com pré-processadores CSS. Declarando a largura desejada em uma variável, podemos facilmente alterá-la sem precisar de nenhum cálculo mental. Veja como fazer:&lt;/p&gt;

&lt;h4 id=&#34;sass-7&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$siteWidth: 1024px;
$gutterWidth: 20px;
$sidebarWidth: 300px;
 
body {
    margin: 0 auto;
    width: $siteWidth;
}
.content {
    float: left;
    width: $siteWidth - ($sidebarWidth+$gutterWidth);
}
.sidebar {
    float: left;
    margin-left: $gutterWidth;
    width: $sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-9&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@siteWidth: 1024px;
@gutterWidth: 20px;
@sidebarWidth: 300px;
 
body {
    margin: 0 auto;
    width: @siteWidth;
}
.content {
    float: left;
    width: @siteWidth - (@sidebarWidth+@gutterWidth);
}
.sidebar {
    float: left;
    margin-left: @gutterWidth;
    width: @sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-9&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;siteWidth = 1024px;
gutterWidth = 20px;
sidebarWidth = 300px;
 
body {
    margin: 0 auto;
    width: siteWidth;
}
.content {
    float: left;
    width: siteWidth - (sidebarWidth+gutterWidth);
}
.sidebar {
    float: left;
    margin-left: gutterWidth;
    width: sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;css-compilado-9&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    margin: 0 auto;
    width: 1024px;
}
.content {
    float: left;
    width: 704px;
}
.sidebar {
    float: left;
    margin-left: 20px;
    width: 300px;
}
&lt;/pre&gt;

&lt;h2 id=&#34;peculiaridades-notáveis&#34;&gt;Peculiaridades Notáveis&lt;/h2&gt;

&lt;p&gt;Existem algumas peculiaridades ao usar um pré-processador CSS. Irei falar de algumas engraçadas, mas se você está realmente interessado em encontrar todas elas eu recomendo você vasculhar toda a documentação, ou melhor, começar a usar um pré-processador na sua codificação diária.&lt;/p&gt;

&lt;h3 id=&#34;relatório-de-erros&#34;&gt;Relatório de Erros&lt;/h3&gt;

&lt;p&gt;Se você já escreveu CSS por uma boa quantia de tempo, tenho certeza que você já chegou a um ponto onde você tinha um erro em algum lugar e simplesmente não conseguia o encontrar. Se você é como eu, provavelmente passou a tarde toda arrancando os cabelos fora e comentando diversas coisas para caçar o erro.&lt;/p&gt;

&lt;p&gt;Pré-processadores CSS relatam os erros. Simples assim. Se tem alguma coisa errada em seu códigom ele te fala onde e, se você estiver com sorte até mesmo o porquê. Você pode dar uma olhada &lt;a href=&#34;http://tjholowaychuk.com/post/5002088731/stylus-vs-sass-vs-less-error-reporting&#34; target=&#34;_blank&#34;&gt;nesse post&lt;/a&gt; caso esteja interessado em ver como os erros são relatados em diferentes pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;comentários&#34;&gt;Comentários&lt;/h3&gt;

&lt;p&gt;Quando um pré-processador CSS está compilando, qualquer comentário escrito com barras duplas &amp;#8220;//&amp;#8221; é excluído e qualquer comentários escrito com barra e asterisco &amp;#8220;/* */&amp;#8221; não é alterado. Dito isso, use comentários com barras duplas para comentários que você queira na versão não compilada e comentários com barra e asterisco para comentários que serão visíveis após a compilação.&lt;/p&gt;

&lt;p&gt;Observação: Se você compilar os arquivos, minificando-os, todos comentários são excluídos.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Cada um dos pré-processadores que falamos (Sass, LESS e Stylus) possui um modo único de realizar a mesma tarefa &amp;#8211; dando a nós desenvolvedor a habilidade de usar funcionalidades úteis mantendo a compatibilidade entre browsers e um código limpo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mesmo não sendo uma exigência para o desenvolvimento, pré-processadores podem economizar muito tempo e tem funcionalidades bastante úteis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eu aconselho todos vocês a utilizar e testar a maior quantidade de pré-processadores possível, pois assim você poderá escolher efetivamente um favorito e saber o porquê ele é seu favorito dentre tantos outros. Se você ainda não testou usar nenhum pré-processador para escrever seu CSS, eu recomendo grandemente a você testar.&lt;/p&gt;

&lt;p&gt;Você tem alguma funcionalidade de seu pré-processador favorito que não foi mencionada? Há algo que algum pré-processador possa fazer e outros não? Conte-nos nos comentários abaixo!&lt;/p&gt;

&lt;p&gt;Traduzido e adaptado de: &lt;a href=&#34;http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout--net-24320&#34;&gt;http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout&amp;#8211;net-24320&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exercícios Simples de JavaScript para Entrevista</title>
      <link>http://tableless.com.br/exercicios-simples-de-javascript-para-entrevista/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/exercicios-simples-de-javascript-para-entrevista/</guid>
      <description>

&lt;p&gt;Qualquer um pode aprender teoria lendo posts de blogs, mas muitas pessoas nunca a entendem. Então para ter certeza que o(a) candidato(a) realmente entende sobre o tópico que ele(a) está falando, é uma boa ideia testar o seus conhecimentos através de exercícios. Exercícios não devem demorar muito e eles podem mostrar o nível de proficiência do candidato imediatamente.&lt;/p&gt;

&lt;p&gt;Estes são alguns exercícios que podem ser aplicados em entrevistas.&lt;/p&gt;

&lt;h2 id=&#34;contexto-call-apply&#34;&gt;Contexto(call, apply)&lt;/h2&gt;

&lt;p&gt;Essa é a forma que queremos usar &amp;#8220;someFn&amp;#8221;. O(a) candidato(a) deve implementá-la:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var result = someFun({ someProperty: &#39;interview&#39; }, function() {
    console.log(&#39;This pointing to&#39;. this);
});

console.log(&#39;Result is&#39;, result);

// Resultado esperado
This pointing to { someProperty: &#39;interview&#39; }
Result is 1
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var someFn = function(obj, cb) {
    cb.call(obj);
    return 1;
&lt;/pre&gt;

&lt;h3 id=&#34;adicional&#34;&gt;Adicional&lt;/h3&gt;

&lt;p&gt;Você pode modificar a função para checar se o(a) candidato(a) sabe como usar o &amp;#8220;apply&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var result = someFn({ someProperty: &#39;interview&#39; }, function (param1, param2) {
    console.log(&#39;This pointing to&#39;, this);
    console.log(&#39;Param 1 is&#39;, param1);
    console.log(&#39;Param 2 is&#39;, param2);
}, [&#39;cool&#39;, &#39;interview&#39;]);

console.log(&#39;Result is&#39;, result);

// Resultado esperado
This pointing to { someProperty: &#39;interview&#39; }
Param 1 is &#34;cool&#34;
Param 2 is &#34;interview&#34;
Result is 1
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var someFn = function (obj, cb, params) {
    cb.apply(obj, params);
    return 1;
}
&lt;/pre&gt;

&lt;h2 id=&#34;prototype-e-iteração&#34;&gt;Prototype e Iteração&lt;/h2&gt;

&lt;p&gt;Definir um método nativo chamado &amp;#8220;each&amp;#8221; para iterar em um array, com a opção de passar o contexto como segundo argumento.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var arr = [1, 2, 3];
arr.each(function (arrayItem, counter) {
    console.log(&#39;index&#39;, counter);
    console.log(&#39;item&#39;, arrayItem);

    arr[counter] = arrayItem + 1;
}, this);
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Array.prototype.each = Array.prototype.each || function (cb, context) {
    for (var i = 0; i &amp;lt; this.length; i++) {
        cb.call(context || this, this[i], i);
    }
};
&lt;/pre&gt;

&lt;h2 id=&#34;escopo&#34;&gt;Escopo&lt;/h2&gt;

&lt;p&gt;Definir &amp;#8220;someFn&amp;#8221; que irá funcionar da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var counter = someFn(1);
console.log(&#39;First call&#39;, counter(3));
console.log(&#39;Second call&#39;, counter(1));
console.log(&#39;Third call&#39;, counter(5));

// Resultado esperado
First call 4
Second call 5
Third call 10
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var someFn = function (start) {
    var private = start;

    return function (increment) {
        private += increment;

        return private;
    }
}
&lt;/pre&gt;

&lt;p&gt;Traduzido de: &lt;a href=&#34;http://goschevski.com/simple-javascript-interview-exercises/&#34;&gt;http://goschevski.com/simple-javascript-interview-exercises/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O novo software que substitui o Flash</title>
      <link>http://tableless.com.br/fim-definitivo-do-flash-o-novo-software-da-substituto/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/fim-definitivo-do-flash-o-novo-software-da-substituto/</guid>
      <description>

&lt;p&gt;Por um bom tempo o Flash ficou no mercado, mas, &lt;del&gt;infelizmente&lt;/del&gt; chegou o seu fim. A &lt;a href=&#34;http://blogs.adobe.com/flashpro/welcome-adobe-animate-cc-a-new-era-for-flash-professional/&#34;&gt;notícia&lt;/a&gt; muito esperada por muitos enfatizou o fim do Flash, que por anos era padrão na produção de animações e de aplicações web. Com o surgimento do HTML5 o Flash se tornou bem ultrapassado. Além disso para melhorar a situação o Flash foi descartado pela Mozila, Google, Facebook e diversas outras empresas fazendo com que ele caísse ainda mais.&lt;/p&gt;

&lt;p&gt;Pensando em vários fatores inclusive segurança, a Adobe anunciou o seu novo software que vai substituir o Flash chamado de Adobe Animation, que começará a atuar no inicio de 2016.&lt;/p&gt;

&lt;p&gt;As novidades do Adobe Animation parecem ser bastantes motivadoras:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Adobe-Animate-CC.jpg&#34;&gt;&lt;img class=&#34;aligncenter wp-image-52401&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Adobe-Animate-CC.jpg&#34; alt=&#34;Adobe-Animate-CC&#34; width=&#34;800&#34; height=&#34;441&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;desenho-ilustração-e-autoria&#34;&gt;Desenho, ilustração e autoria&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Vector Art Brush &amp;#8211; Modificar o caminho de um stroke depois de ter sido desenhado, e escalá-los a qualquer resolução sem perder qualidade. Você também pode fazer brushes personalizados e brushes de importação criadas com o Adobe Captura CC.&lt;/li&gt;
&lt;li&gt;360 °- girar a tela em qualquer ponto enquanto desenha para obter o ângulo perfeito. E você ainda poderá usar esse recurso com uma Wacom Cintiq!&lt;/li&gt;
&lt;li&gt;Lápis e brush aprimorados- Desenhe suaves e precisos contornos vetoriais ao longo de uma curva e consiga rápidos live previews.&lt;/li&gt;
&lt;li&gt;Fácil sincronização de áudio- Controle de áudio looping(repetição) diretamente na linha do tempo, sem a necessidade de qualquer código.&lt;/li&gt;
&lt;li&gt;Mudança de cor &amp;#8211; Nomear cores com etiquetas vai permitir que você altere uma cor e tê-la automaticamente modificada em todo o seu projeto.&lt;/li&gt;
&lt;li&gt;Colored onion skinning &amp;#8211; Controlar facilmente animações complexas agora que os quadros adjacentes podem ter diferentes valores de cor e alfa.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-4.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-52405&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-4.png&#34; alt=&#34;Sem título 4&#34; width=&#34;839&#34; height=&#34;472&#34; /&gt;&lt;/a&gt;[Por um bom tempo o Flash ficou no mercado, mas, &lt;del&gt;infelizmente&lt;/del&gt; chegou o seu fim. A &lt;a href=&#34;http://blogs.adobe.com/flashpro/welcome-adobe-animate-cc-a-new-era-for-flash-professional/&#34;&gt;notícia&lt;/a&gt; muito esperada por muitos enfatizou o fim do Flash, que por anos era padrão na produção de animações e de aplicações web. Com o surgimento do HTML5 o Flash se tornou bem ultrapassado. Além disso para melhorar a situação o Flash foi descartado pela Mozila, Google, Facebook e diversas outras empresas fazendo com que ele caísse ainda mais.&lt;/p&gt;

&lt;p&gt;Pensando em vários fatores inclusive segurança, a Adobe anunciou o seu novo software que vai substituir o Flash chamado de Adobe Animation, que começará a atuar no inicio de 2016.&lt;/p&gt;

&lt;p&gt;As novidades do Adobe Animation parecem ser bastantes motivadoras:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Adobe-Animate-CC.jpg&#34;&gt;&lt;img class=&#34;aligncenter wp-image-52401&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Adobe-Animate-CC.jpg&#34; alt=&#34;Adobe-Animate-CC&#34; width=&#34;800&#34; height=&#34;441&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;desenho-ilustração-e-autoria-1&#34;&gt;Desenho, ilustração e autoria&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Vector Art Brush &amp;#8211; Modificar o caminho de um stroke depois de ter sido desenhado, e escalá-los a qualquer resolução sem perder qualidade. Você também pode fazer brushes personalizados e brushes de importação criadas com o Adobe Captura CC.&lt;/li&gt;
&lt;li&gt;360 °- girar a tela em qualquer ponto enquanto desenha para obter o ângulo perfeito. E você ainda poderá usar esse recurso com uma Wacom Cintiq!&lt;/li&gt;
&lt;li&gt;Lápis e brush aprimorados- Desenhe suaves e precisos contornos vetoriais ao longo de uma curva e consiga rápidos live previews.&lt;/li&gt;
&lt;li&gt;Fácil sincronização de áudio- Controle de áudio looping(repetição) diretamente na linha do tempo, sem a necessidade de qualquer código.&lt;/li&gt;
&lt;li&gt;Mudança de cor &amp;#8211; Nomear cores com etiquetas vai permitir que você altere uma cor e tê-la automaticamente modificada em todo o seu projeto.&lt;/li&gt;
&lt;li&gt;Colored onion skinning &amp;#8211; Controlar facilmente animações complexas agora que os quadros adjacentes podem ter diferentes valores de cor e alfa.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-4.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-52405&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-4.png&#34; alt=&#34;Sem título 4&#34; width=&#34;839&#34; height=&#34;472&#34; /&gt;&lt;/a&gt;]&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título.png&#34;&gt;4&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;integração-creativesync&#34;&gt;Integração CreativeSync&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Adobe Stock &amp;#8211; Você poderá navegar e licenciar milhões de fotos de alta qualidade, ilustrações e gráficos vetoriais diretamente no Animate. Você poderá até mesmo adicionar a vida a conteúdo estático através da adição de animações.&lt;/li&gt;
&lt;li&gt;Creative Cloud &amp;#8211; Acesso cores, gráficos vetoriais e brushs diretamente enquanto você trabalha.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&#34; wp-image-52402 alignnone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título.png&#34; alt=&#34;Sem título&#34; width=&#34;889&#34; height=&#34;500&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;capacidades-de-saída&#34;&gt;Capacidades de saída&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Suporte multiplataforma: HTML5, Canvas, WebGL, Flash (SWF), AIR, plataformas de vídeo e personalizadas (como SVG) através de extensões.&lt;/li&gt;
&lt;li&gt;Exportação de vídeo 4K + &amp;#8211; exportação  de vídeos com resoluções personalizadas para o mais recente Hi-DPI e Ultra HD.&lt;/li&gt;
&lt;li&gt;Resolução de exportação personalizada &amp;#8211; Revitalizar conteúdo mais antigo por redimensionamento e otimizando-os para qualquer resolução, como Hi-DPI e Ultra HD.&lt;/li&gt;
&lt;li&gt;Apoio .OAM &amp;#8211; Exporte seu projeto como um arquivo .OAM para facilitar a importação para o Adobe Muse, InDesign, DPS e Dreamweaver.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-2.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52404&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-2.png&#34; alt=&#34;Sem título 2&#34; width=&#34;1366&#34; height=&#34;768&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Adobe comunicou que durante toda a semana estará nos informando no seu &lt;a href=&#34;http://www.twitch.tv/adobe&#34;&gt;canal&lt;/a&gt;  de transmissão algumas funcionalidades tanto para animação quanto para jogos.&lt;/p&gt;

&lt;p&gt;A equipe deles se encontra entusiasmada para o seu próximo lançamento, e falou que quando se aproximar do 20º aniversario do querido Flash, eles convidarão animadores e designers para se juntar a eles para as próximas décadas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bootstrap 4 Alpha</title>
      <link>http://tableless.com.br/bootstrap-4-alpha/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/bootstrap-4-alpha/</guid>
      <description>

&lt;p&gt;Já faz um tempo que o Bootstrap vem dominando a web. Dificilmente vemos um desenvolvedor que não o conheça, e boa parte da comunidade web já ouviu falar ou já usou o framework.&lt;/p&gt;

&lt;p&gt;Agora a equipe do Bootstrap &lt;a href=&#34;http://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha/&#34; target=&#34;_blank&#34;&gt;anunciou&lt;/a&gt; sua nova versão, o &lt;strong&gt;Bootstrap 4 Alpha&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/08/bs4-alpha.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-50861 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/08/bs4-alpha.png&#34; alt=&#34;Homepage do Bootstrap 4 Alpha&#34; width=&#34;2360&#34; height=&#34;1588&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O framework está repleto de novidades. Algumas delas são:&lt;/p&gt;

&lt;h2 id=&#34;mudança-de-less-para-sass&#34;&gt;Mudança de Less para Sass&lt;/h2&gt;

&lt;p&gt;O Bootstrap compila mais rápido do que nunca &amp;#8211; graças a Libsass &amp;#8211; e agora se juntaram a esta grande e crescente comunidade de desenvolvedores Sass.&lt;/p&gt;

&lt;h2 id=&#34;melhoria-no-sistema-de-grids&#34;&gt;Melhoria no sistema de Grids&lt;/h2&gt;

&lt;p&gt;Foi adicionado uma nova grid, que causará grande melhora nos dispositivos móveis. Também ocorreu uma remodelagem completa nos &lt;em&gt;mixins&lt;/em&gt; semânticos.&lt;/p&gt;

&lt;h2 id=&#34;novas-opções-para-personalização&#34;&gt;Novas opções para personalização&lt;/h2&gt;

&lt;p&gt;&lt;span id=&#34;ouHighlight__33_42TO37_45&#34; class=&#34;highlight&#34;&gt;Ao invés de &lt;/span&gt;&lt;span id=&#34;ouHighlight__44_53TO47_53&#34; class=&#34;&#34;&gt;separar &lt;/span&gt;&lt;span id=&#34;ouHighlight__81_89TO79_88&#34; class=&#34;&#34;&gt;gradientes&lt;/span&gt;&lt;span id=&#34;noHighlight_0.481113150017336&#34;&gt;,&lt;/span&gt; &lt;span id=&#34;noHighlight_0.6814724979922175&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__92_102TO91_100&#34;&gt;transições&lt;/span&gt;&lt;span id=&#34;noHighlight_0.811446403618902&#34;&gt;,&lt;/span&gt; &lt;span id=&#34;noHighlight_0.30436457856558263&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__105_111TO103_109&#34; class=&#34;&#34;&gt;sombras&lt;/span&gt; &lt;span id=&#34;noHighlight_0.6863153295125812&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__114_116TO111_111&#34; class=&#34;&#34;&gt;e&lt;/span&gt;&lt;span id=&#34;noHighlight_0.2496850637253374&#34;&gt; outras personalizações &lt;/span&gt;&lt;span id=&#34;ouHighlight__123_124TO124_127&#34;&gt;para&lt;/span&gt; &lt;span id=&#34;noHighlight_0.19514952460303903&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__126_126TO129_131&#34; class=&#34;&#34;&gt;uma&lt;/span&gt; &lt;span id=&#34;noHighlight_0.7088381128851324&#34;&gt;folha de &lt;/span&gt;&lt;span id=&#34;ouHighlight__137_146TO142_148&#34; class=&#34;&#34;&gt;estilos&lt;/span&gt; &lt;span id=&#34;noHighlight_0.2908061526250094&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__128_135TO150_157&#34; class=&#34;&#34;&gt;à parte (&lt;/span&gt;&lt;span id=&#34;ouHighlight__148_151TO159_162&#34;&gt;como&lt;/span&gt;&lt;span id=&#34;noHighlight_0.5787958002183586&#34;&gt; era na &lt;/span&gt;&lt;span id=&#34;ouHighlight__153_154TO164_165&#34;&gt;versão 3)&lt;/span&gt;&lt;span id=&#34;noHighlight_0.5214279058855027&#34;&gt;,&lt;/span&gt; &lt;span id=&#34;noHighlight_0.4220451375003904&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__169_171TO176_180&#34; class=&#34;&#34;&gt;todas&lt;/span&gt; &lt;span id=&#34;noHighlight_0.918515301309526&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__173_177TO182_186&#34; class=&#34;&#34;&gt;essas&lt;/span&gt; &lt;span id=&#34;noHighlight_0.7640828147996217&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__179_185TO188_193&#34; class=&#34;&#34;&gt;opções&lt;/span&gt;&lt;span id=&#34;noHighlight_0.4096155730076134&#34;&gt; foram colocadas &lt;/span&gt;&lt;span id=&#34;ouHighlight__187_190TO195_196&#34; class=&#34;&#34;&gt;em&lt;/span&gt; &lt;span id=&#34;noHighlight_0.4232193084899336&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__197_205TO198_206&#34;&gt;variáveis&lt;/span&gt; &lt;span id=&#34;noHighlight_0.7291480258572847&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__192_195TO208_211&#34;&gt;Sass&lt;/span&gt;&lt;span id=&#34;noHighlight_0.5328994235023856&#34;&gt;.&lt;/span&gt; &lt;span id=&#34;noHighlight_0.3506186828017235&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__208_211TO214_218&#34;&gt;Quer&lt;/span&gt;&lt;span id=&#34;noHighlight_0.761297364719212&#34;&gt; &lt;/span&gt;&lt;span id=&#34;ouHighlight__221_231TO220_229&#34;&gt;transições&lt;/span&gt; &lt;span id=&#34;noHighlight_0.18227634043432772&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__213_219TO231_236&#34;&gt;padrões &lt;/span&gt;&lt;span id=&#34;ouHighlight__233_234TO238_239&#34;&gt;em&lt;/span&gt; &lt;span id=&#34;noHighlight_0.11960533494129777&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__236_245TO241_244&#34;&gt;tudo&lt;/span&gt; &lt;span id=&#34;noHighlight_0.48817266849800944&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__247_248TO246_247&#34;&gt;ou&lt;/span&gt; &lt;span id=&#34;noHighlight_0.5429222423117608&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__253_259TO249_257&#34; class=&#34;&#34;&gt;desativar&lt;/span&gt;&lt;span id=&#34;noHighlight_0.7604012105148286&#34;&gt; os &lt;/span&gt;&lt;span id=&#34;ouHighlight__269_275TO259_264&#34; class=&#34;&#34;&gt;cantos&lt;/span&gt; &lt;span id=&#34;noHighlight_0.0033320076763629913&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__261_267TO266_277&#34; class=&#34;&#34;&gt;arredondados&lt;/span&gt;&lt;span id=&#34;noHighlight_0.18449167720973492&#34;&gt;?&lt;/span&gt; &lt;span id=&#34;noHighlight_0.15296318451873958&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__278_283TO280_284&#34; class=&#34;&#34;&gt;Basta&lt;/span&gt; &lt;span id=&#34;noHighlight_0.8132120880763978&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__285_290TO286_293&#34; class=&#34;&#34;&gt;atualizar&lt;/span&gt;&lt;span id=&#34;noHighlight_0.07241212041117251&#34;&gt; &lt;/span&gt;&lt;span id=&#34;ouHighlight__292_292TO295_297&#34; class=&#34;&#34;&gt;a &lt;/span&gt;&lt;span id=&#34;ouHighlight__294_301TO299_306&#34; class=&#34;&#34;&gt;variável&lt;/span&gt; &lt;span id=&#34;noHighlight_0.25222062366083264&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__303_305TO308_308&#34; class=&#34;&#34;&gt;e&lt;/span&gt; &lt;span id=&#34;noHighlight_0.570360544603318&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__307_315TO310_318&#34; class=&#34;&#34;&gt;recompilar.&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;todos-os-plugins-foram-reescritos&#34;&gt;Todos os plugins foram reescritos&lt;/h2&gt;

&lt;p&gt;Cada plugin foi reescrito com ES6 para aproveitar as mais recentes melhoras do JavaScript. A versão 4 ve&lt;span id=&#34;ouHighlight__132_135TO153_155&#34; class=&#34;&#34;&gt;m&lt;/span&gt; &lt;span id=&#34;noHighlight_0.36849321285262704&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__151_154TO157_159&#34; class=&#34;&#34;&gt;com &lt;/span&gt;&lt;span id=&#34;noHighlight_0.8874966793227941&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__160_166TO161_167&#34; class=&#34;&#34;&gt;suporte&lt;/span&gt;&lt;span id=&#34;noHighlight_0.3962369414512068&#34;&gt; para &lt;em&gt;Universal Module Definition&lt;/em&gt; (&lt;/span&gt;&lt;span id=&#34;ouHighlight__156_158TO169_171&#34; class=&#34;&#34;&gt;&lt;a href=&#34;https://github.com/umdjs/umd&#34; target=&#34;_blank&#34;&gt;UMD&lt;/a&gt;)&lt;/span&gt;&lt;span id=&#34;noHighlight_0.18047267338261008&#34;&gt;,&lt;/span&gt; &lt;span id=&#34;noHighlight_0.9055605356115848&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__186_192TO174_180&#34; class=&#34;&#34;&gt;métodos&lt;/span&gt; &lt;span id=&#34;noHighlight_0.08181263506412506&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__169_175TO182_190&#34; class=&#34;&#34;&gt;genéricos&lt;/span&gt; &lt;span id=&#34;noHighlight_0.145829914836213&#34;&gt;de &lt;/span&gt;&lt;span id=&#34;ouHighlight__177_184TO195_204&#34; class=&#34;&#34;&gt;subdivisão&lt;/span&gt;&lt;span id=&#34;noHighlight_0.30580205423757434&#34;&gt; e&lt;/span&gt;&lt;span id=&#34;noHighlight_0.6392135077621788&#34;&gt; &lt;/span&gt;&lt;span id=&#34;ouHighlight__207_214TO207_217&#34; class=&#34;&#34;&gt;verificação&lt;/span&gt; &lt;span id=&#34;noHighlight_0.9670881452038884&#34;&gt;de &lt;/span&gt;&lt;span id=&#34;ouHighlight__202_205TO222_225&#34; class=&#34;&#34;&gt;tipo&lt;/span&gt; &lt;span id=&#34;noHighlight_0.7507147502619773&#34;&gt;de &lt;/span&gt;&lt;span id=&#34;ouHighlight__195_200TO230_234&#34; class=&#34;&#34;&gt;opção, entre outros&lt;/span&gt;&lt;span id=&#34;noHighlight_0.8302771004382521&#34;&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;melhor-documentação&#34;&gt;Melhor documentação&lt;/h2&gt;

&lt;p&gt;Toda a documentação foi reescrita em Markdown; foram adicionados alguns plugins úteis para simplificar os exemplos. Também foram colocados trechos de códigos para agilizar o trabalho.&lt;/p&gt;

&lt;h2 id=&#34;fim-do-suporte-ao-ie8&#34;&gt;Fim do suporte ao IE8&lt;/h2&gt;

&lt;p&gt;&lt;span id=&#34;ouHighlight__0_6TO0_8&#34; class=&#34;&#34;&gt;O&lt;/span&gt;&lt;span id=&#34;noHighlight_0.7597462392877787&#34;&gt; &lt;/span&gt;&lt;span id=&#34;ouHighlight__12_18TO12_18&#34; class=&#34;&#34;&gt;suporte&lt;/span&gt;&lt;span id=&#34;noHighlight_0.15465820394456387&#34;&gt; ao &lt;/span&gt;&lt;span id=&#34;ouHighlight__8_10TO23_25&#34; class=&#34;&#34;&gt;IE8&lt;/span&gt;&lt;span id=&#34;noHighlight_0.509343218524009&#34;&gt; foi abandonado &lt;/span&gt;&lt;span id=&#34;ouHighlight__20_22TO27_27&#34; class=&#34;&#34;&gt;e&lt;/span&gt;&lt;span id=&#34;noHighlight_0.4135255643632263&#34;&gt; as unidades de medida mudaram para &lt;/span&gt;&lt;span id=&#34;ouHighlight__33_35TO43_45&#34; class=&#34;&#34;&gt;REM &lt;/span&gt;&lt;span id=&#34;ouHighlight__37_39TO47_47&#34; class=&#34;&#34;&gt;e&lt;/span&gt; &lt;span id=&#34;noHighlight_0.45592652703635395&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__41_42TO49_50&#34;&gt;EM&lt;/span&gt;&lt;span id=&#34;noHighlight_0.115584553219378&#34;&gt;.&lt;/span&gt; &lt;span id=&#34;noHighlight_0.8139501307159662&#34;&gt;O&lt;/span&gt;&lt;span id=&#34;ouHighlight__51_58TO62_69&#34; class=&#34;&#34;&gt; fim d&lt;/span&gt;&lt;span id=&#34;noHighlight_0.5428129727952182&#34;&gt;o &lt;/span&gt;&lt;span id=&#34;ouHighlight__60_66TO73_79&#34; class=&#34;&#34;&gt;suporte&lt;/span&gt;&lt;span id=&#34;noHighlight_0.9242240693420172&#34;&gt;,&lt;/span&gt;&lt;span id=&#34;noHighlight_0.3814675039611757&#34;&gt; &lt;/span&gt;&lt;span id=&#34;ouHighlight__76_80TO92_100&#34; class=&#34;&#34;&gt;significa&lt;/span&gt; &lt;span id=&#34;noHighlight_0.8024199057836086&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__82_83TO102_104&#34; class=&#34;&#34;&gt;que&lt;/span&gt; &lt;span id=&#34;noHighlight_0.6282858841586858&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__85_87TO106_109&#34; class=&#34;&#34;&gt;pode-se&lt;/span&gt; &lt;span id=&#34;noHighlight_0.12069125333800912&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__89_105TO111_120&#34; class=&#34;&#34;&gt;aproveitar&lt;/span&gt; &lt;span id=&#34;noHighlight_0.06503489147871733&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__107_109TO122_123&#34; class=&#34;&#34;&gt;as&lt;/span&gt; &lt;span id=&#34;noHighlight_0.5774596999399364&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__111_114TO125_132&#34; class=&#34;&#34;&gt;melhores&lt;/span&gt; &lt;span id=&#34;noHighlight_0.5065434332937002&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__116_120TO134_139&#34;&gt;partes&lt;/span&gt; &lt;span id=&#34;noHighlight_0.9085071054287255&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__122_123TO141_142&#34;&gt;do&lt;/span&gt;&lt;span id=&#34;noHighlight_0.2688959944061935&#34;&gt; &lt;/span&gt;&lt;span id=&#34;ouHighlight__125_127TO144_146&#34;&gt;CSS&lt;/span&gt; &lt;span id=&#34;noHighlight_0.34350621490739286&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__129_135TO148_150&#34;&gt;sem &lt;/span&gt;&lt;span id=&#34;ouHighlight__137_141TO152_156&#34; class=&#34;&#34;&gt;o uso de &lt;/span&gt;&lt;span id=&#34;ouHighlight__158_160TO170_172&#34; class=&#34;&#34;&gt;CSS&lt;/span&gt; &lt;span id=&#34;noHighlight_0.566822367021814&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__162_166TO174_178&#34; class=&#34;&#34;&gt;hacks&lt;/span&gt; &lt;span id=&#34;noHighlight_0.8859184393659234&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__168_169TO180_181&#34; class=&#34;&#34;&gt;ou&lt;/span&gt; &lt;span id=&#34;noHighlight_0.11384950415231287&#34;&gt;&lt;/span&gt;_&lt;span id=&#34;ouHighlight__171_179TO183_194&#34; class=&#34;&#34;&gt;fallbacks&lt;/span&gt;_&lt;span id=&#34;noHighlight_0.8839674249757081&#34;&gt;.&lt;/span&gt; &lt;span id=&#34;noHighlight_0.7743959142826498&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;_&lt;span id=&#34;ouHighlight__182_187TO197_202&#34; class=&#34;&#34;&gt;Pixels&lt;/span&gt; &lt;span id=&#34;noHighlight_0.37850770237855613&#34;&gt;&lt;/span&gt;_&lt;span id=&#34;ouHighlight__194_197TO204_208&#34; class=&#34;&#34;&gt;foram&lt;/span&gt; &lt;span id=&#34;noHighlight_0.46460154722444713&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__199_205TO210_217&#34; class=&#34;highlight&#34;&gt;trocados&lt;/span&gt; &lt;span id=&#34;noHighlight_0.8350909308064729&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__207_209TO219_221&#34; class=&#34;&#34;&gt;por&lt;/span&gt; &lt;span id=&#34;noHighlight_0.6744522778317332&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__211_214TO223_226&#34; class=&#34;&#34;&gt;REMS &lt;/span&gt;&lt;span id=&#34;ouHighlight__216_218TO228_228&#34; class=&#34;&#34;&gt;e&lt;/span&gt; &lt;span id=&#34;noHighlight_0.28712224145419896&#34;&gt;EMS, &lt;/span&gt;&lt;span id=&#34;ouHighlight__224_240TO234_246&#34; class=&#34;&#34;&gt;eventualmente&lt;/span&gt;&lt;span id=&#34;noHighlight_0.32065628934651613&#34;&gt; para&lt;/span&gt;&lt;span id=&#34;noHighlight_0.47396003059111536&#34;&gt; &lt;/span&gt;&lt;span id=&#34;ouHighlight__245_248TO250_255&#34; class=&#34;&#34;&gt;tornar&lt;/span&gt; &lt;span id=&#34;noHighlight_0.46526208659633994&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__293_296TO257_261&#34; class=&#34;&#34;&gt;ainda&lt;/span&gt; &lt;span id=&#34;noHighlight_0.6913347935769707&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__298_303TO263_272&#34; class=&#34;&#34;&gt;mais fácil&lt;/span&gt; &lt;span id=&#34;noHighlight_0.8071073237806559&#34;&gt;a &lt;/span&gt;&lt;span id=&#34;ouHighlight__261_270TO276_285&#34; class=&#34;&#34;&gt;tipografia&lt;/span&gt; &lt;span id=&#34;noHighlight_0.17413580045104027&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__250_259TO287_296&#34; class=&#34;&#34;&gt;responsiva&lt;/span&gt; &lt;span id=&#34;noHighlight_0.8454670906066895&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__272_274TO298_298&#34;&gt;e&lt;/span&gt; &lt;span id=&#34;noHighlight_0.6733989510685205&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__286_291TO300_314&#34; class=&#34;&#34;&gt;dimensionamento &lt;/span&gt;&lt;span id=&#34;noHighlight_0.3753285778220743&#34;&gt;do &lt;/span&gt;&lt;span id=&#34;ouHighlight__276_284TO319_328&#34; class=&#34;&#34;&gt;componente&lt;/span&gt;&lt;span id=&#34;noHighlight_0.21270700567401946&#34;&gt;.&lt;/span&gt; &lt;span id=&#34;noHighlight_0.9447224051691592&#34;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;ouHighlight__306_307TO331_332&#34; class=&#34;&#34;&gt;Se&lt;/span&gt; &lt;span id=&#34;noHighlight_0.3133630729280412&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__309_311TO334_337&#34; class=&#34;&#34;&gt;você &lt;/span&gt;&lt;span id=&#34;ouHighlight__313_316TO339_346&#34; class=&#34;&#34;&gt;precisar&lt;/span&gt; &lt;span id=&#34;noHighlight_0.47584015876054764&#34;&gt;de &lt;/span&gt;&lt;span id=&#34;ouHighlight__322_328TO351_357&#34; class=&#34;&#34;&gt;suporte&lt;/span&gt;&lt;span id=&#34;noHighlight_0.22770247887820005&#34;&gt; ao &lt;/span&gt;&lt;span id=&#34;ouHighlight__318_320TO362_364&#34; class=&#34;&#34;&gt;IE8&lt;/span&gt;&lt;span id=&#34;noHighlight_0.4113714068662375&#34;&gt;,&lt;/span&gt;&lt;span id=&#34;noHighlight_0.914000281598419&#34;&gt; vai ter que &lt;/span&gt;&lt;span id=&#34;ouHighlight__331_334TO367_374&#34; class=&#34;&#34;&gt;continuar&lt;/span&gt;&lt;span id=&#34;noHighlight_0.2844633760396391&#34;&gt; &lt;/span&gt;&lt;span id=&#34;ouHighlight__336_340TO376_381&#34; class=&#34;&#34;&gt;usando&lt;/span&gt;&lt;span id=&#34;noHighlight_0.9633060169871897&#34;&gt; o&lt;/span&gt;&lt;span id=&#34;noHighlight_0.42434997437521815&#34;&gt; &lt;/span&gt;&lt;span id=&#34;ouHighlight__342_350TO388_396&#34; class=&#34;&#34;&gt;Bootstrap v3&lt;/span&gt;&lt;span id=&#34;noHighlight_0.24006641446612775&#34;&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;ouHighlight__27_34TO18_26&#34; class=&#34;&#34;&gt;Também foram adicionados controles&lt;/span&gt; &lt;span id=&#34;noHighlight_0.05131633346900344&#34;&gt;de &lt;/span&gt;&lt;span id=&#34;ouHighlight__22_25TO31_40&#34; class=&#34;&#34;&gt;formulários&lt;/span&gt; &lt;span id=&#34;noHighlight_0.37164003239013255&#34;&gt;&lt;/span&gt;&lt;span id=&#34;ouHighlight__15_20TO42_54&#34; class=&#34;&#34;&gt;personalizados&lt;/span&gt;&lt;span id=&#34;noHighlight_0.46348911290988326&#34;&gt;,&lt;/span&gt; &lt;span id=&#34;noHighlight_0.749728238210082&#34;&gt;classes de &lt;/span&gt;_&lt;span id=&#34;ouHighlight__37_42TO57_62&#34; class=&#34;&#34;&gt;margin &lt;/span&gt;_&lt;span id=&#34;ouHighlight__44_46TO64_64&#34;&gt;e&lt;/span&gt; &lt;span id=&#34;noHighlight_0.9394099384080619&#34;&gt;&lt;/span&gt;_&lt;span id=&#34;ouHighlight__48_54TO66_72&#34;&gt;padding&lt;/span&gt;_&lt;span id=&#34;noHighlight_0.7057353919371963&#34;&gt;, e &lt;/span&gt;&lt;span id=&#34;ouHighlight__77_83TO83_89&#34;&gt;novos utilitários de classes em geral&lt;/span&gt;&lt;span id=&#34;noHighlight_0.3223601672798395&#34;&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;O lançamento da versão final será dividido em quatro etapas: lançamento de algumas versões Alpha, depois mais duas versões betas, fase de testes em ambiente de produção, e então a esperada versão final. Vale lembrar que o suporte a versão 3 continuará, recebendo apenas atualizações críticas e melhorias na documentação.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quando nós lançamos Bootstrap 3, imediatamente paramos todo o apoio para v2.x, causando muita dor para todos os nossos usuários. Isso foi um erro que não vai acontecer novamente. Em um futuro próximo, manteremos o Bootstrap 3 com correções de bugs críticos e melhorias de documentação. Os docs da v3 também continuarão hospedados após a liberação final da v4.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/08/Capturar.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-50866 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/08/Capturar.png&#34; alt=&#34;Temas para os criadores que utilizam o Bootstrap 4&#34; width=&#34;1349&#34; height=&#34;671&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Além de lançar o Bootstrap 4, também foi anunciado outro projeto: o &lt;strong&gt;Bootstrap Official Themes&lt;/strong&gt;, que são alguns temas criados pelos próprios criadores do &lt;em&gt;framework&lt;/em&gt;. Existem três temas disponíveis para &lt;em&gt;dashboards&lt;/em&gt;, marketing de um produto e outro para aplicações.&lt;/p&gt;

&lt;p&gt;Infelizmente, todos os três são pagos (cada tema custa $99). Ainda não foi divulgado se os temas poderão ser gratuitos no futuro.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entendendo Sistemas de Grid CSS do Zero</title>
      <link>http://tableless.com.br/entendendo-sistemas-de-grid-css-do-zero/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/entendendo-sistemas-de-grid-css-do-zero/</guid>
      <description>

&lt;p&gt;Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-1&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-1&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-1&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-1&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-1&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-1&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-1&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-1&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Quando resolvemos a fórmula, temos uma única coluna de largura 6.86666666667%. A partir daqui, podemos usar esse número para calcular as larguras das colunas restantes. A fórmula para isso é:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cw = (scw * cs) + (m * (cs – 1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;```Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-2&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-2&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-2&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-2&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-2&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-2&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-2&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-2&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-3&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-3&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-3&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-3&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-3&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-3&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-3&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-3&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Quando resolvemos a fórmula, temos uma única coluna de largura 6.86666666667%. A partir daqui, podemos usar esse número para calcular as larguras das colunas restantes. A fórmula para isso é:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cw = (scw * cs) + (m * (cs – 1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Aplicando essa fórmula para cada uma das 12 colunas resulta no CSS a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column-1 {
  width: 6.86666666667%;
}

.column-2 {
  width: 15.3333333333%;
}

.column-3 {
  width: 23.8%;
}

.column-4 {
  width: 32.2666666667%;
}

.column-5 {
  width: 40.7333333333%;
}

.column-6 {
  width: 49.2%;
}

.column-7 {
  width: 57.6666666667%;
}

.column-8 {
  width: 66.1333333333%;
}

.column-9 {
  width: 74.6%;
}

.column-10 {
  width: 83.0666666667%;
}

.column-11 {
  width: 91.5333333333%;
}

.column-12 {
  width: 100%;
}
&lt;/pre&gt;

&lt;h2 id=&#34;otimizando-para-dispositivos-móveis&#34;&gt;Otimizando para Dispositivos Móveis&lt;/h2&gt;

&lt;p&gt;Apesar do fato que o sistema de grid é responsivo, ele sozinho não pode ir tão longe. Para dispositivos com pequenas telas, tais como smartphones, a largura das colunas precisam se ajustar para permitir que o conteúdo que elas contêm ainda apareça legível e visualmente atraente. Consultas de mídia ajudam com isso:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media only screen and (max-width: 550px) {
  .column-1,
  .column-2,
  .column-3,
  .column-4,
  .column-5,
  .column-6,
  .column-7,
  .column-8,
  .column-9,
  .column-10,
  .column-11,
  .column-12 {
    width: auto;
    float: none;
  }

  .column + .column {
    margin-left: 0;
  }
}
&lt;/pre&gt;

&lt;p&gt;Aqui, estamos dizendo ao grid para permitir que cada coluna possa ocupar a largura total do seu &lt;em&gt;container&lt;/em&gt; para dispositivos com uma janela menor que 550px de largura. &lt;em&gt;Gutters&lt;/em&gt; já não são mais necessárias aqui, então nós as removemos.&lt;/p&gt;

&lt;p&gt;Como alternativa, você pode optar pela estratégia &lt;a href=&#34;http://www.sitepoint.com/making-case-mobile-first-designs/&#34; target=&#34;_blank&#34;&gt;mobile first&lt;/a&gt; que leva a abordagem oposta, aumentando para um layout de 12 colunas. Nesse caso, as colunas começam como uma largura total, depois estabelecemos as larguras das colunas e &lt;em&gt;floats&lt;/em&gt; para permitir que elas se alinhem horizontalmente quando a resolução da tela atinge um limite especificado.&lt;/p&gt;

&lt;p&gt;Esse é a abordagem preferida para o sistema de grid do &lt;a href=&#34;http://www.sitepoint.com/understanding-bootstrap-grid-system/&#34; target=&#34;_blank&#34;&gt;bootstrap&lt;/a&gt;, que não institui a largura das colunas até que a janela de exibição atinja uma largura mínima de 992px. Essa pode ser uma abordagem mais favorável para seu caso, e deve ser algo para analisar melhor quando avaliar um sistema de grid.&lt;/p&gt;

&lt;h2 id=&#34;juntando-tudo&#34;&gt;Juntando Tudo&lt;/h2&gt;

&lt;p&gt;Quando combinamos todos os conceitos e o CSS, podemos escrever uma estrutura de layout em HTML igual a:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;row&#34;&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&#34;row&#34;&amp;gt;
  &amp;lt;div class=&#34;column column-2&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-2&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Confira abaixo a demonstração no CodePen para ver todo o sistema de grid em ação, incluindo grid aninhados.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/SitePoint/pen/dPqqvN/&#34;&gt;Understanding CSS Grid Systems&lt;/a&gt; by SitePoint (&lt;a href=&#34;http://codepen.io/SitePoint&#34;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você também experimentar a &lt;a href=&#34;http://codepen.io/ryanmorr/full/zxRzyE/&#34; target=&#34;_blank&#34;&gt;demo em tela cheia&lt;/a&gt; para uma melhor impressão. Não se esqueça de brincar com as dimensões da tela para ver como o grid lida com várias resoluções.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Como você pode ver, não é preciso muito para montar um sistema de grid básico. A matemática é provavelmente a parte mais complexa. Apesar da simplicidade, o grid continua a ser uma poderosa e flexível ferramenta para layouts estruturais. Com os diversos conceitos que discutimos aqui, espero que você tenha uma melhor compreensão de como sistemas de grid funcionam. Isso deve ajudá-lo a avaliar diferentes sistemas de grid que se destacam, e escolher o melhor deles para o seu próximo projeto, ou até mesmo criar o seu próprio.&lt;/p&gt;

&lt;p&gt;Tradução: Tamiris Bonicenha&lt;/p&gt;

&lt;p&gt;Acesse o artigo original no &lt;a href=&#34;http://www.sitepoint.com/understanding-css-grid-systems/&#34; target=&#34;_blank&#34;&gt;SitePoint – &amp;#8220;Understanding CSS Grid Systems from the Ground Up&amp;#8221;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entendendo os valores ‘initial’ e ‘inherit’ do CSS</title>
      <link>http://tableless.com.br/entendendo-os-valores-initial-e-inherit-do-css/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/entendendo-os-valores-initial-e-inherit-do-css/</guid>
      <description>

&lt;p&gt;Algum tempo atrás, se alguém me perguntasse qual a diferença entre os valores &lt;code&gt;initial&lt;/code&gt; e &lt;code&gt;inherit&lt;/code&gt; do CSS eu responderia:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8211; Existe alguma diferença?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Trabalho com CSS por mais de 5 anos e de algum jeito faltou entender o significado do que exatamente &lt;code&gt;initial&lt;/code&gt; é e faz. Pode chamar isso de ignorância, preguiça, burrice ou sorte, mas nunca pensei em olhar ao redor e tentar entender fixamente o comportamento que &lt;code&gt;inherit&lt;/code&gt; poderia fazer. Foi quando descobri, inclusive, que &lt;code&gt;inherit&lt;/code&gt; poderia ser substituído pelo &lt;code&gt;initial&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Neste artigo, pretendo compartilhar o que aprendi repassando o aprendizado a quem interessar e tiver necessidade.&lt;/p&gt;

&lt;h3 id=&#34;o-que-initial-significa&#34;&gt;O que &lt;code&gt;initial&lt;/code&gt; significa?&lt;/h3&gt;

&lt;p&gt;A especificação oficial nos ajuda a entender a diferença entre as &lt;em&gt;keywords&lt;/em&gt; &lt;code&gt;initial&lt;/code&gt; e &lt;code&gt;inherit&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.w3.org/csswg/css-cascade/#initial&#34; target=&#34;_blank&#34;&gt;Initial &lt;em&gt;keyword&lt;/em&gt;&lt;/a&gt;: Se o valor no CSS da propriedade é &amp;#8216;&lt;code&gt;initial&lt;/code&gt;&amp;#8216;, o valor inicial da propriedade se torna o oficial.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.w3.org/csswg/css-cascade/#initial-value&#34; target=&#34;_blank&#34;&gt;Initial &lt;em&gt;value&lt;/em&gt;&lt;/a&gt;: Cada propriedade tem um valor inicial, estipulado na tabela de definição da propriedade do navegador. Se o valor da propriedade do objeto não tem um valor herdado e a cascata não resulta em um valor oficial, o valor especificado da propriedade é o &lt;code&gt;initial&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Isto significa que, se o valor &lt;code&gt;initial &lt;/code&gt;for definido aqui:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.modulo {
    color: initial;
}
&lt;/pre&gt;

&lt;p&gt;O valor provavelmente retornará &lt;strong&gt;preto&lt;/strong&gt;, caso a cor padrão do navegador seja preta para tal propriedade.&lt;/p&gt;

&lt;h3 id=&#34;quão-diferente-initial-é-de-inherit&#34;&gt;Quão diferente &lt;code&gt;initial&lt;/code&gt; é de &lt;code&gt;inherit&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;Se você deduz que isto é &lt;a href=&#34;http://www.w3.org/TR/CSS2/cascade.html#value-def-inherit&#34; target=&#34;_blank&#34;&gt;questão de herança&lt;/a&gt;, você está certo.&lt;/p&gt;

&lt;p&gt;Mas &lt;code&gt;initial&lt;/code&gt; e &lt;code&gt;inherit&lt;/code&gt; são diferentes quando entendemos que o &lt;code&gt;inherit&lt;/code&gt; checa se existem outras propriedades no pai que poderão ser utilizadas ou afetadas, antes que seja atribuído o valor inicial. Antes que o navegador decida renderizar o valor herdado, ele deve varrer a cascata de valores acima da propriedade definida e avaliar o possível valor inicial do elemento. Vai depender do que é atribuído no pai mais próximo do elemento:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/example1-initial-inherit-joao-guilherme.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-50137 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/example1-initial-inherit-joao-guilherme.png&#34; alt=&#34;&#34; width=&#34;727&#34; height=&#34;285&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;H1&lt;/code&gt; está herdando o valor da cor do elemento mais próximo, encontrando a propriedade incluída no elemento &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/example2-initial-inherit-joao-guilherme.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-50138 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/example2-initial-inherit-joao-guilherme.png&#34; alt=&#34;&#34; width=&#34;727&#34; height=&#34;285&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desta vez, utilizando o valor inicial, &lt;code&gt;H1&lt;/code&gt; ignora o valor que poderia ser herdado do elemento &lt;code&gt;body&lt;/code&gt;, e mantém o valor atribuído pelo navegador, isto é, a raiz responsável por renderizar o HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/guicheffeR/pen/jPxKqQ&#34;&gt;Exemplo de inherit e initial no CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No exemplo acima, as propriedades na caixa da esquerda são todas definidas e herdadas da classe &lt;code&gt;.modulo&lt;/code&gt;, já que a caixa é filha do _modulo_ anteriormente estilizado. Na caixa da direita, as propriedades são atribuídas de acordo com o padrão do navegador, que, por sua vez, é _&amp;#8220;zerado&amp;#8221;_ através do atributo inserido.&lt;/p&gt;

&lt;h3 id=&#34;quando-usar-initial&#34;&gt;Quando usar  &lt;code&gt;initial&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Podemos pensar em &lt;code&gt;initial&lt;/code&gt; como um jeito de _&amp;#8220;zerar&amp;#8221;_ o conteúdo. Para não confundir abstrações e heranças, usar &lt;code&gt;initial&lt;/code&gt; é uma maneira de limpar os atributos e propriedades do elemento, deixando mais claro a volta do elemento ao seu estilo natural do estado de início.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Initial&lt;/code&gt; não é uma bala de prata para &lt;em&gt;resets&lt;/em&gt;. Valores iniciais ainda são sujeitos aos padrões dos navegadores, e que sabemos, podem &lt;a href=&#34;http://tableless.com.br/querido-usuario-atualize-seu-browser/&#34;&gt;variar de navegador para navegador.&lt;/a&gt; Se você usa &lt;em&gt;CSS resets&lt;/em&gt;, serão utilizados os valores iniciais.&lt;/p&gt;

&lt;p&gt;Por exemplo, para destruir completamente todos os estilos herdados de um elemento, você pode usar &lt;code&gt;initial;&lt;/code&gt; para ter certeza que o elemento copia uma determinada propriedade do seu elemento pai mais próximo, use &lt;code&gt;inherit&lt;/code&gt; .&lt;/p&gt;

&lt;h2 id=&#34;exemplo-prático&#34;&gt;Exemplo prático&lt;/h2&gt;

&lt;p&gt;Recentemente, tive um problema em um projeto ao usar o elemento &lt;code&gt;video&lt;/code&gt; 100% em relação ao tamanho do navegador. Ele deveria encaixar tanto na largura como na altura da _div_ de uma &lt;em&gt;single page&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Na primeira versão abaixo, a propriedade &lt;strong&gt;&lt;em&gt;object-fit&lt;/em&gt;&lt;/strong&gt; foi definida com o valor &lt;strong&gt;&lt;em&gt;contain&lt;/em&gt;&lt;/strong&gt;, que era o valor padrão e específico para este elemento no Chrome.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/BJLyIvi.jpg&#34; alt=&#34;Exemplo do uso do elemento video no Chrome com a propriedade initial&#34; width=&#34;1234&#34; height=&#34;585&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Já neste segundo exemplo, deixamos o valor definido como &lt;code&gt;initial&lt;/code&gt;: ele preencheu o espaço que faltava para o vídeo ocupar 100% em relação à página, utilizando o valor inicial do navegador:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/e8owgRc1.png&#34; alt=&#34;Exemplo do uso do elemento video no Chrome sem a propriedade initial&#34; width=&#34;1200&#34; height=&#34;583&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;o-suporte-dos-browsers&#34;&gt;O suporte dos browsers&lt;/h3&gt;

&lt;p&gt;Segundo os dados do &lt;a href=&#34;https://developer.mozilla.org/pt-BR/#&#34; target=&#34;_blank&#34;&gt;MDN&lt;/a&gt;, segue uma tabela simplificada de suporte às propriedades &lt;code&gt;initial&lt;/code&gt; e &lt;code&gt;inherit&lt;/code&gt;. Observe a ausência do IE para suporte ao &lt;code&gt;initial:&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/initial/&#34; target=&#34;_blank&#34;&gt;initial&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table class=&#34;tb-table browser-support-table&#34; style=&#34;height: 62px;&#34; width=&#34;739&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;chrome&#34;&gt;
      Chrome
    &lt;/th&gt;
    
    &lt;th class=&#34;safari&#34;&gt;
      Safari
    &lt;/th&gt;
    
    &lt;th class=&#34;firefox&#34;&gt;
      Firefox
    &lt;/th&gt;
    
    &lt;th class=&#34;opera&#34;&gt;
      Opera
    &lt;/th&gt;
    
    &lt;th class=&#34;ie&#34;&gt;
      IE
    &lt;/th&gt;
    
    &lt;th class=&#34;android&#34;&gt;
      Android
    &lt;/th&gt;
    
    &lt;th class=&#34;iOS&#34;&gt;
      iOS
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;yep&#34;&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td class=&#34;yep&#34;&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td class=&#34;yep&#34;&gt;
      19 up
    &lt;/td&gt;
    
    &lt;td class=&#34;yep&#34;&gt;
      15 up
    &lt;/td&gt;
    
    &lt;td class=&#34;nope&#34;&gt;
      &lt;span style=&#34;color: #ff0000;&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td class=&#34;yep&#34;&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td class=&#34;yep&#34;&gt;
      Sim
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/inherit&#34; target=&#34;_blank&#34;&gt;inherit&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table class=&#34;tb-table browser-support-table&#34; style=&#34;height: 62px;&#34; width=&#34;739&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;chrome&#34;&gt;
      Chrome
    &lt;/th&gt;
    
    &lt;th class=&#34;safari&#34;&gt;
      Safari
    &lt;/th&gt;
    
    &lt;th class=&#34;firefox&#34;&gt;
      Firefox
    &lt;/th&gt;
    
    &lt;th class=&#34;opera&#34;&gt;
      Opera
    &lt;/th&gt;
    
    &lt;th class=&#34;ie&#34;&gt;
      IE
    &lt;/th&gt;
    
    &lt;th class=&#34;android&#34;&gt;
      Android
    &lt;/th&gt;
    
    &lt;th class=&#34;iOS&#34;&gt;
      iOS
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td class=&#34;yep&#34;&gt;
      Claro
    &lt;/td&gt;
    
    &lt;td class=&#34;yep&#34;&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td class=&#34;yep&#34;&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td class=&#34;yep&#34;&gt;
      4 up
    &lt;/td&gt;
    
    &lt;td class=&#34;nope&#34;&gt;
      8 up
    &lt;/td&gt;
    
    &lt;td class=&#34;yep&#34;&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td class=&#34;yep&#34;&gt;
      Sim
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p style=&#34;font-size: 12px;&#34;&gt;
  Texto traduzido e adaptado da fonte: &lt;a href=&#34;https://css-tricks.com/getting-acquainted-with-initial/&#34;&gt;Getting acquainted with initial&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTTP2 para Desenvolvedores de Web</title>
      <link>http://tableless.com.br/http2-para-desenvolvedores-de-web/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/http2-para-desenvolvedores-de-web/</guid>
      <description>

&lt;p&gt;HTTP2 significa uma mudança na forma como construímos websites. As boas práticas de HTTP1 são prejudiciais no mundo do HTTP2.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HTTP1 é lento e ineficiente para a maioria dos casos de uso de hoje na web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HTTP1.x é a versão do HTTP que nós já conhecemos quando entramos o endereço de um site. É um protocolo antigo que foi concebido antes mesmo de sabermos o que essa imensa rede mundial de computadores se tornaria. Apesar desse protocolo continuar funcionando como esperado, simplesmente não é tão eficiente como no início, porque ultimamente estamos exigindo algo muito mais complexo do que este protocolo foi projetado originalmente.&lt;/p&gt;

&lt;h2 id=&#34;nós-estamos-hackeando-o-http1&#34;&gt;Nós estamos hackeando o HTTP1&lt;/h2&gt;

&lt;p&gt;Para que os sites carreguem em tempo aceitável usando HTTP1, desenvolvemos uma série de técnicas; hacks na verdade; para conseguirmos extrair um bom desempenho deste protocolo antigo. São eles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Usando CSS Sprites&lt;/strong&gt;: Combine várias imagens em uma só imagem e utilizando CSS para mostrar apenas uma parte dessa imagem num devido lugar da página.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concatenando o Código&lt;/strong&gt;: Tornando vários arquivos de CSS ou JS e consolidá-los em um único arquivo maior.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cookieless&lt;/strong&gt; &amp;#8211; Servindo arquivos de um domínio sem o uso de cookies, através de servidores estáticos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Usando Partições de Shard&lt;/strong&gt;: Criando registros de Alias no DNS de diferentes domínios ou sub-domínios para hospedagem dos arquivos de imagens.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As duas primeiras técnicas visam evitar várias solicitações HTTP. Em HTTP1 um pedido é uma coisa muito cara e leva muito tempo, cada pedido pode ser baixados com os cookies que devem ser enviados como parte do pedido, e nada disso é compactado. É mais rápido agrupar um monte de coisas e fazer tudo de uma só vez no lado do cliente do que continuar enviando pedidos para o servidor cada momento que o código precisa de um arquivo.&lt;/p&gt;

&lt;p&gt;A terceira técnica é usada para minimizar o tempo necessário para obter os arquivos; cookies, se estiver definido, deve ser enviado para o domínio solicitado junto com cada pedido &amp;#8211; que acrescenta-se a um monte de espaço &amp;#8216;desperdiçado&amp;#8217; na linha. Se os seus arquivos estão em um domínio diferente (exemplo: imagens.meusite.com) que não usa cookies, então o pedido desses arquivos não precisará enviar cookies com eles, o que será um pouco mais rápido.&lt;/p&gt;

&lt;p&gt;A última técnica, sharding, é porque os navegadores costumavam permitir apenas duas solicitações HTTP simultâneas fossem feitas por domínio. Se você criar um novo domínio para alguns de seus arquivos, então você dobra a quantidade de conexões simultâneas o navegador irá permitir a fim de obter seus arquivos. Assim, você pode baixar o conteúdo do site mais rapidamente. Na realidade, sharding não tem sido muito útil nos últimos anos, pois os fabricantes de navegadores decidiram eliminar essa restrição das duas conexões &amp;#8216;era tonto, e eles ignoraram.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;o-que-esperar-do-http2&#34;&gt;O que esperar do HTTP2?&lt;/h2&gt;

&lt;blockquote style=&#34;font-size: 200%&#34;&gt;
  &lt;p&gt;
    &lt;em&gt;Não use as boas práticas do HTTP1 como base para um site que está sendo hospedado em HTTP2.&lt;/em&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O protocolo HTTP2 está quase aqui, ele é baseado no SPDY®, e isso torna tudo muito mais eficiente. Significa também que todas as técnicas de desempenho HTTP1 são prejudiciais. Eles irão fazer um site HTTP2 mais lento, e não mais rápido. Portanto, não use as boas práticas do HTTP1 como base para um site que está sendo hospedado em HTTP2.&lt;/p&gt;

&lt;p&gt;HTTP2 faz com que o custo de múltiplos pedidos diminua por causa de um número de técnicas já incluídas:&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    HTTP2 pode deixar a conexão em aberta para reutilização por um longo de tempo, para que não haja a necessidade daquela negociação cara que HTTP1 faz com o servidor em cada solicitação.
  &lt;/li&gt;
  &lt;li&gt;
    Ao contrário do HTTP1, o novo protocolo usa compactação de arquivos e assim o tamanho da solicitação é significativamente menor &amp;#8211; e, como resultado, mais rápida.
  &lt;/li&gt;
  &lt;li&gt;
    HTTP2 é multiplex, ou seja, pode enviar e receber várias coisas ao mesmo tempo através de uma única conexão.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O que tudo isso significa, é que não só as técnicas que usamos no HTTP1 estão obsoletas, mas como também, farão as coisas ficarem mais lentas. Você poderá estar baixando arquivos desnecessários para a página a ser servida (concatenação de código e CSS sprites são suscetíveis à isso), e a técnica de sharding invoca pesquisas de DNS que irão retardar as coisas, na verdade, no HTTP2 voce não precisar de usar shard de forma alguma.&lt;/p&gt;

&lt;p&gt;Resumindo, quando você desenvolver o front-end (html/css/js) para um site que será servido através do HTTP2, tenha a certeza de que você não está usando velhas técnicas de desempenho do HTTP1, o que irão prejudicar o seu HTTP2 site.&lt;/p&gt;

&lt;h3 id=&#34;aprendendo-mais-sobre-o-http2&#34;&gt;Aprendendo mais sobre o HTTP2&lt;/h3&gt;

&lt;p&gt;Aqui está &lt;a href=&#34;http://daniel.haxx.se/http2/&#34;&gt;um excelente artigo (em inglês)&lt;/a&gt;, escrito por Daniel Stenberg, no qual ele detalha mais profundamente esse assunto.&lt;/p&gt;

&lt;h3 id=&#34;tradução&#34;&gt;Tradução&lt;/h3&gt;

&lt;p&gt;A tradução deste artigo para o Português foi devidamente autorizada pelo autor, &lt;a href=&#34;https://mattwilcox.net/web-development/http2-for-front-end-web-developers&#34;&gt;Matt Wilcox&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Um guia para o elemento ‘time’ do HTML5</title>
      <link>http://tableless.com.br/um-guia-para-o-elemento-time-html5/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/um-guia-para-o-elemento-time-html5/</guid>
      <description>

&lt;p&gt;O HTML5 trouxe diversas coisas bacanas pra nós desenvolvedores. Uma das mais simples e que eu acho que são uma das mais legais é a questão da semântica com os novos elementos. O surgimento dessas &lt;em&gt;tags&lt;/em&gt; deixaram nossos códigos mais semânticos e legíveis, tanto por nós como pelas máquinas.&lt;/p&gt;

&lt;p&gt;Um desses elementos é o &lt;code&gt;time&lt;/code&gt;. Já havia lido sobre ele, mas nunca tinha ido muito a fundo. Esses dias encontrei um texto do &lt;a href=&#34;https://twitter.com/AurelioDeRosa&#34; target=&#34;_blank&#34;&gt;Aurelio De Rosa&lt;/a&gt; no &lt;a href=&#34;http://www.sitepoint.com/&#34; target=&#34;_blank&#34;&gt;SitePoint&lt;/a&gt; que &lt;a href=&#34;http://www.sitepoint.com/html5-time-element-guide/&#34; target=&#34;_blank&#34;&gt;explica bastante coisa&lt;/a&gt; sobre este elemento e resolvi traduzir pra gente.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;Tempo &amp;#8211; uma das poucas coisas que sabemos que é infinita. Os seres humanos, bem como animais e plantas, têm lidado com o tempo desde o início de sua existência.&lt;/p&gt;

&lt;p&gt;Na web essa necessidade não é diferente. Mesmo nesse meio, precisamos nos comunicar com outras pessoas de que alguma coisa aconteceu em um determinado ponto, em uma data específica, ou em relação a um outro tempo definido.&lt;/p&gt;

&lt;p&gt;Antes do HTML5 não tivemos nenhum elemento para marcar semanticamente uma data ou hora. Nos últimos anos, outras soluções, como os &lt;a href=&#34;http://microformats.org/&#34; target=&#34;_blank&#34;&gt;Microformats&lt;/a&gt; e &lt;a href=&#34;http://en.wikipedia.org/wiki/Microdata_%28HTML%29&#34; target=&#34;_blank&#34;&gt;Microdata&lt;/a&gt;, tentaram preencher esta lacuna para situações específicas (data de nascimento, a publicação de um livro, e assim por diante).&lt;/p&gt;

&lt;p&gt;Nesse artigo eu irei cobrir o elemento &lt;code&gt;time&lt;/code&gt; do HTML5, o que ajuda a responder à necessidade de que acabamos de discutir.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-elemento-time&#34;&gt;O que é o elemento &lt;code&gt;time&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;O elemento &lt;code&gt;time&lt;/code&gt; foi introduzido na especificação do HTML5 em 2009. Então, em 2011 foi trocado  em favor do &lt;code&gt;data&lt;/code&gt;. Então, em seguida, o elemento foi reintroduzido e melhorado para permitir novos formatos de data/hora. A partir deste ponto você pode ver que as especificações podem ser bastante controversas.&lt;/p&gt;

&lt;p&gt;O elemento &lt;code&gt;time&lt;/code&gt; representa uma data e/ou um tempo no &lt;a href=&#34;http://en.wikipedia.org/wiki/Gregorian_calendar&#34; target=&#34;_blank&#34;&gt;calendário gregoriano&lt;/a&gt;. É um elemento inline (como &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) e deve ter uma tag de fechamento (como &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;). Quando usado na sua forma mais simples, o conteúdo do elemento deve ser uma string &lt;a href=&#34;http://www.w3.org/TR/html5/text-level-semantics.html#the-time-element&#34; target=&#34;_blank&#34;&gt;de data e/ou tempo válidas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 1º Fevereiro 2009 --&amp;gt;
&amp;lt;time&amp;gt;2009-02-01&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;No código acima, eu estou definindo uma data, especificamente 1º de fevereiro de 2009. O formato utilizado no código (aaaa-mm-dd) deve ser familiar para você se você já mexeu algum tempo com Linux, mas, como veremos mais adiante neste artigo, este não é o único formato válido.&lt;/p&gt;

&lt;p&gt;No primeiro esboço das especificações, datas precisas eram um dos poucos formatos que você podia escrever. Por exemplo, você não podia especificar uma data como &amp;#8220;Novembro 2014&amp;#8221; ou &amp;#8220;476&amp;#8221; (o início da Idade Média). Isso foi um grande problema para vários casos, como a datação de uma pintura ou de um acontecimento histórico pois não havia uma data precisa.&lt;/p&gt;

&lt;p&gt;Felizmente, esse tipo de data agora é permitida na especificação. Então, hoje nós podemos descrever um determinado mês de um ano sem um dia:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Janeiro 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-01&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;o-atributo-datetime&#34;&gt;O atributo &lt;code&gt;datetime&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;A especificação para o elemento também padronizou um atributo chamado de &lt;code&gt;datetime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ao escrevermos datas como nos formatos discutidos na seção anterior, pode funciona em alguns países/culturas, como pode não atender outros. Por exemplo, os italianos (e nós brasileiros) escrevem datas usando o formato &lt;em&gt;dd/mm/aaaa&lt;/em&gt;. Portanto, mostrar uma data em outro formato pode gerar confusão.&lt;/p&gt;

&lt;p&gt;Este problema pode ser facilmente resolvido usando o atributo &lt;code&gt;datetime&lt;/code&gt; do elemento &lt;code&gt;time&lt;/code&gt;. É um atributo opcional que contém as informações em um formato legível por uma máquina, como os observados nos exemplos anteriores, o que nos permite que possamos escrever o conteúdo do elemento da qualquer maneira que nós quisermos.&lt;/p&gt;

&lt;p&gt;Na verdade, se o atributo &lt;code&gt;datetime&lt;/code&gt; não for especificado, o conteúdo deve estar em um dos formatos de data/hora válidos, caso contrário, podemos usá-lo como quisermos. Isso é ótimo porque nos permite escrever um código assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;A próxima reunião está agendada para &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;Outubro&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;Ou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;A próxima reunião está agendada para o &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;próximo mês&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;Ambos exemplos possuem um conteúdo de data que não é legível por uma máquina de acordo com a especificação, mas são aceitáveis​​, por causa da presença do atributo &lt;code&gt;datetime&lt;/code&gt;, que &lt;em&gt;faz uso&lt;/em&gt; de um formato válido.&lt;/p&gt;

&lt;p&gt;À primeira vista, isso pode parecer estranho. Mas o conteúdo do elemento foi concebido para servir os seres humanos, não máquinas. Além disso, esse fato permite a internacionalização das datas. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Mesma mensagem anterior, só que em italiano --&amp;gt;
Il prossimo incontro è programmato per &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;il mese prossimo&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;No código acima temos a mesma mensagem anterior, só que em Italiano.&lt;/p&gt;

&lt;h2 id=&#34;o-atributo-pubdate&#34;&gt;O atributo &lt;code&gt;pubdate&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Os primeiros rascunhos da especificação definiam um atributo &lt;code&gt;pubdate&lt;/code&gt; para o elemento &lt;code&gt;time&lt;/code&gt;. Este atributo era um &lt;em&gt;booleano&lt;/em&gt; que indicava que uma determinada data era a data de publicação do elemento pai &lt;code&gt;article&lt;/code&gt; ou, em caso de ausência de elemento &lt;code&gt;article&lt;/code&gt; pai, de todo o documento.&lt;/p&gt;

&lt;p&gt;Você poderia escrever por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;article&amp;gt;
    &amp;lt;h1&amp;gt;Um título&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Esse é o conteúdo do article.&amp;lt;/p&amp;gt;
    &amp;lt;footer&amp;gt;
        &amp;lt;p&amp;gt;Artigo publicado em &amp;lt;time datetime=&#34;2014-09-05&#34; pubdate&amp;gt;05 de setembro de 2014&amp;lt;/time&amp;gt;
    &amp;lt;/footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Nesse caso, 05 de setembro de 2014 seria a data de publicação desse &lt;code&gt;article&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Eu fui um grande fã deste atributo desde que aprendi bastante sobre isso, mas, infelizmente, ele foi removido da especificação. Essa decisão criou um grande problema, porque um grande número de pessoas (inclusive eu) usam a data de publicação para julgar o frescor e a relevância de um artigo ou notícia. Embora seja verdade que você ainda possa acessar a página de um artigo e ver a data de publicação, precisamos de uma forma padrão para uma máquina de ler a data.&lt;/p&gt;

&lt;p&gt;No atual momento não existe um atributo que substitua &lt;code&gt;pubdate&lt;/code&gt;, mas você pode empregar o &lt;a href=&#34;http://schema.org/BlogPosting&#34; target=&#34;_blank&#34;&gt;BlogPosting schema&lt;/a&gt;, e especificamente o valor &lt;code&gt;datePublished&lt;/code&gt; como mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;article itemscope itemType=&#34;http://schema.org/BlogPosting&#34;&amp;gt;
        &amp;lt;h1 itemprop=&#34;headline&#34;&amp;gt;Um título&amp;lt;/h1&amp;gt;
        &amp;lt;p itemprop=&#34;articleBody&#34;&amp;gt;Conteúdo do article.&amp;lt;/p&amp;gt;
 
        &amp;lt;footer&amp;gt;
            &amp;lt;p&amp;gt;Artigo publicado em &amp;lt;time datetime=&#34;2014-09-05&#34; itemprop=&#34;datePublished&#34;&amp;gt;05 de setembro de 2014&amp;lt;/time&amp;gt;
        &amp;lt;/footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Agora que você tem um &lt;em&gt;overview&lt;/em&gt; completo do elemento &lt;code&gt;time&lt;/code&gt;, vamos ver os diversos formatos permitidos.&lt;/p&gt;

&lt;p&gt;Os formatos validos para o conteúdo do elemento &lt;code&gt;time&lt;/code&gt; na ausência do atributo &lt;code&gt;datetime&lt;/code&gt; e para esse atributo em si são descritos nos itens seguintes.&lt;/p&gt;

&lt;h2 id=&#34;um-mês-válido&#34;&gt;Um mês válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um mês específico de um ano no formato &lt;strong&gt;aaaa-mm&lt;/strong&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Setembro 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-09&amp;lt;/time&amp;gt;  
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-válida-dia-do-mês&#34;&gt;Uma data válida (dia do mês)&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando uma data precisa no formato &lt;strong&gt;aaaa-mm-dd&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de setembro de 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-09-16&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-válida-sem-ano&#34;&gt;Uma data válida sem ano&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um mês e um dia sem um ano no formato &lt;strong&gt;mm-dd&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 29 de Junho --&amp;gt;
&amp;lt;time&amp;gt;06-29&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-tempo-válido&#34;&gt;Um tempo válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um tempo sem uma data e usando o formato 24 horas, da seguinte maneira &lt;strong&gt;HH:MM[:SS[.mm]]&lt;/strong&gt; onde:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt; são horas&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt; são minutos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; são segundos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;m&lt;/strong&gt; são milisegundos&lt;/li&gt;
&lt;li&gt;Os &lt;em&gt;brackets&lt;/em&gt; indicam partes que são opcionais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um exemplo desse formato mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 horas e 10 minutos (ou 4 horas e 10 minutos pm) --&amp;gt;
&amp;lt;time datetime=&#34;16:10&#34;&amp;gt;afternoon&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-e-hora-flutuante-válida&#34;&gt;Uma data e hora &lt;em&gt;flutuante&lt;/em&gt; válida&lt;/h2&gt;

&lt;p&gt;Esse formato é apresentado na especificação do W3C, mas não na versão WHATWG. Deve ser uma data e um tempo precisos no formato &lt;strong&gt;aaaa-mm-ddTHH:MM[:SS[.mm]]&lt;/strong&gt; ou &lt;strong&gt;aaaa-mm-dd HH:MM[:SS[.mmm]]&lt;/strong&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de Setembro de 2014 às 18 horas, 20 minutos, e 30 segundos --&amp;gt;
&amp;lt;time datetime=&#34;2014-09-16T18:20:30&#34;&amp;gt;Terça-feira às 18:20&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-fuso-horário-válido&#34;&gt;Um fuso horário válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando um fuso horário. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- GMT+1 (Itália) --&amp;gt;
&amp;lt;time&amp;gt;+01:00&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-e-tempo-global-válidos&#34;&gt;Uma data e tempo global válidos&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma data completa, incluindo tempo e fuso horário. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de Setembro de 2014 às 18 horas, 20 minutos, e 30 segundos um um fuso horário de GMT+1 (como a Itália) --&amp;gt;
&amp;lt;time&amp;gt;2014-09-16&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-semana-válida&#34;&gt;Uma semana válida&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma semana do ano. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- A 18ª semana de 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-W18&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-ano-válido&#34;&gt;Um ano válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando um ano. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 2014 --&amp;gt;
&amp;lt;time datetime=&#34;2014&#34;&amp;gt;Esse ano&amp;lt;/time&amp;gt;  
&lt;/pre&gt;

&lt;h2 id=&#34;uma-string-válida-de-duração&#34;&gt;Uma &lt;em&gt;string&lt;/em&gt; válida de duração&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma duração. Uma duração pode começar com o prefixo &lt;em&gt;&amp;#8220;P&amp;#8221;&lt;/em&gt; (para &lt;em&gt;período&lt;/em&gt;) e usa &lt;em&gt;&amp;#8220;D&amp;#8221;&lt;/em&gt; para marcar os &lt;em&gt;dias&lt;/em&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Uma duração de 4 dias --&amp;gt;
&amp;lt;time datetime=&#34;P4D&#34;&amp;gt;quatro dias&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Em caso da necessidade de especificar melhor o período, após o &lt;em&gt;&amp;#8220;D&amp;#8221;&lt;/em&gt;, você pode adicionar um &lt;em&gt;&amp;#8220;T&amp;#8221;&lt;/em&gt;, que significa &lt;em&gt;tempo&lt;/em&gt;, e usar &lt;em&gt;&amp;#8220;H&amp;#8221;&lt;/em&gt; para &lt;em&gt;horas&lt;/em&gt;, &lt;em&gt;&amp;#8220;M&amp;#8221;&lt;/em&gt; para &lt;em&gt;minutos&lt;/em&gt; e &lt;em&gt;&amp;#8220;S&amp;#8221;&lt;/em&gt; para &lt;em&gt;segundos&lt;/em&gt;. Assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Uma duração de quatro dias, quatro horas e três minutos --&amp;gt;
&amp;lt;time datetime=&#34;P4DT4H3M&#34;&amp;gt;quatro dias&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Esse formato também permite a você especificar um ou mais &lt;a href=&#34;http://www.w3.org/TR/html5/infrastructure.html#duration-time-component&#34; target=&#34;_blank&#34;&gt;componentes de duração de tempo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;limitações&#34;&gt;Limitações&lt;/h2&gt;

&lt;p&gt;A especificação atual tem algumas limitações no que você pode definir com o elemento &lt;code&gt;time&lt;/code&gt;. Uma dessas limitações é que você não pode indicar intervalos de datas. Então, se você estiver escrevendo um post sobre uma conferência que dura mais de um dia, por exemplo a partir de 26 de junho de 2014 a 28 de junho de 2014, você terá que usar dois elementos &lt;code&gt;time&lt;/code&gt;. Um bom exemplo pode ser encontrado na &lt;a href=&#34;http://aurelio.audero.it/speaking&#34; target=&#34;_blank&#34;&gt;página sobre palestras do meu website&lt;/a&gt;, onde eu uso o elemento &lt;code&gt;time&lt;/code&gt;, como mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;time datetime=&#34;2014-06-28&#34;&amp;gt;26&amp;lt;span class=&#34;hidden&#34;&amp;gt;de Junho de 2014&amp;lt;/span&amp;gt;&amp;lt;/time&amp;gt;-&amp;lt;time datetime=&#34;2014-06-28&#34;&amp;gt;28 Junho 2014&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Outra limitação é que você não pode usar o elemento &lt;code&gt;time&lt;/code&gt; para representar datas antes da &lt;a href=&#34;http://en.wikipedia.org/wiki/Common_Era&#34; target=&#34;_blank&#34;&gt;Era Comum&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;suporte&#34;&gt;Suporte&lt;/h2&gt;

&lt;p&gt;Baseado no &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time&#34; target=&#34;_blank&#34;&gt;artigo no MDN&lt;/a&gt;, o suporte do elemento &lt;code&gt;time&lt;/code&gt; é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chrome 33+&lt;/li&gt;
&lt;li&gt;Firefox 22+&lt;/li&gt;
&lt;li&gt;Internet Explorer 9+&lt;/li&gt;
&lt;li&gt;Opera 22+&lt;/li&gt;
&lt;li&gt;Safari 7+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No entanto, não há muito o que se preocupar sobre navegadores antigos. Na verdade, em caso do navegador não oferecer suporte para o elemento, ele será renderizado como um elemento &lt;em&gt;inline&lt;/em&gt; desconhecido.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Se você ainda não começou a usar o elemento &lt;code&gt;time&lt;/code&gt; nas suas páginas, eu espero que esse guia lhe inspire a começar.&lt;/p&gt;

&lt;p&gt;Para mais informações, aqui vão alguns links relevantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/html/wg/drafts/html/master/text-level-semantics.html#the-time-element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on W3C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://html.spec.whatwg.org/multipage/semantics.html#the-time-element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on WHATWG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.whatwg.org/wiki/Time_element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element Wiki on WHATWG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do [O HTML5 trouxe diversas coisas bacanas pra nós desenvolvedores. Uma das mais simples e que eu acho que são uma das mais legais é a questão da semântica com os novos elementos. O surgimento dessas &lt;em&gt;tags&lt;/em&gt; deixaram nossos códigos mais semânticos e legíveis, tanto por nós como pelas máquinas.&lt;/p&gt;

&lt;p&gt;Um desses elementos é o &lt;code&gt;time&lt;/code&gt;. Já havia lido sobre ele, mas nunca tinha ido muito a fundo. Esses dias encontrei um texto do &lt;a href=&#34;https://twitter.com/AurelioDeRosa&#34; target=&#34;_blank&#34;&gt;Aurelio De Rosa&lt;/a&gt; no &lt;a href=&#34;http://www.sitepoint.com/&#34; target=&#34;_blank&#34;&gt;SitePoint&lt;/a&gt; que &lt;a href=&#34;http://www.sitepoint.com/html5-time-element-guide/&#34; target=&#34;_blank&#34;&gt;explica bastante coisa&lt;/a&gt; sobre este elemento e resolvi traduzir pra gente.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;Tempo &amp;#8211; uma das poucas coisas que sabemos que é infinita. Os seres humanos, bem como animais e plantas, têm lidado com o tempo desde o início de sua existência.&lt;/p&gt;

&lt;p&gt;Na web essa necessidade não é diferente. Mesmo nesse meio, precisamos nos comunicar com outras pessoas de que alguma coisa aconteceu em um determinado ponto, em uma data específica, ou em relação a um outro tempo definido.&lt;/p&gt;

&lt;p&gt;Antes do HTML5 não tivemos nenhum elemento para marcar semanticamente uma data ou hora. Nos últimos anos, outras soluções, como os &lt;a href=&#34;http://microformats.org/&#34; target=&#34;_blank&#34;&gt;Microformats&lt;/a&gt; e &lt;a href=&#34;http://en.wikipedia.org/wiki/Microdata_%28HTML%29&#34; target=&#34;_blank&#34;&gt;Microdata&lt;/a&gt;, tentaram preencher esta lacuna para situações específicas (data de nascimento, a publicação de um livro, e assim por diante).&lt;/p&gt;

&lt;p&gt;Nesse artigo eu irei cobrir o elemento &lt;code&gt;time&lt;/code&gt; do HTML5, o que ajuda a responder à necessidade de que acabamos de discutir.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-elemento-time-1&#34;&gt;O que é o elemento &lt;code&gt;time&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;O elemento &lt;code&gt;time&lt;/code&gt; foi introduzido na especificação do HTML5 em 2009. Então, em 2011 foi trocado  em favor do &lt;code&gt;data&lt;/code&gt;. Então, em seguida, o elemento foi reintroduzido e melhorado para permitir novos formatos de data/hora. A partir deste ponto você pode ver que as especificações podem ser bastante controversas.&lt;/p&gt;

&lt;p&gt;O elemento &lt;code&gt;time&lt;/code&gt; representa uma data e/ou um tempo no &lt;a href=&#34;http://en.wikipedia.org/wiki/Gregorian_calendar&#34; target=&#34;_blank&#34;&gt;calendário gregoriano&lt;/a&gt;. É um elemento inline (como &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) e deve ter uma tag de fechamento (como &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;). Quando usado na sua forma mais simples, o conteúdo do elemento deve ser uma string &lt;a href=&#34;http://www.w3.org/TR/html5/text-level-semantics.html#the-time-element&#34; target=&#34;_blank&#34;&gt;de data e/ou tempo válidas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 1º Fevereiro 2009 --&amp;gt;
&amp;lt;time&amp;gt;2009-02-01&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;No código acima, eu estou definindo uma data, especificamente 1º de fevereiro de 2009. O formato utilizado no código (aaaa-mm-dd) deve ser familiar para você se você já mexeu algum tempo com Linux, mas, como veremos mais adiante neste artigo, este não é o único formato válido.&lt;/p&gt;

&lt;p&gt;No primeiro esboço das especificações, datas precisas eram um dos poucos formatos que você podia escrever. Por exemplo, você não podia especificar uma data como &amp;#8220;Novembro 2014&amp;#8221; ou &amp;#8220;476&amp;#8221; (o início da Idade Média). Isso foi um grande problema para vários casos, como a datação de uma pintura ou de um acontecimento histórico pois não havia uma data precisa.&lt;/p&gt;

&lt;p&gt;Felizmente, esse tipo de data agora é permitida na especificação. Então, hoje nós podemos descrever um determinado mês de um ano sem um dia:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Janeiro 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-01&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;o-atributo-datetime-1&#34;&gt;O atributo &lt;code&gt;datetime&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;A especificação para o elemento também padronizou um atributo chamado de &lt;code&gt;datetime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ao escrevermos datas como nos formatos discutidos na seção anterior, pode funciona em alguns países/culturas, como pode não atender outros. Por exemplo, os italianos (e nós brasileiros) escrevem datas usando o formato &lt;em&gt;dd/mm/aaaa&lt;/em&gt;. Portanto, mostrar uma data em outro formato pode gerar confusão.&lt;/p&gt;

&lt;p&gt;Este problema pode ser facilmente resolvido usando o atributo &lt;code&gt;datetime&lt;/code&gt; do elemento &lt;code&gt;time&lt;/code&gt;. É um atributo opcional que contém as informações em um formato legível por uma máquina, como os observados nos exemplos anteriores, o que nos permite que possamos escrever o conteúdo do elemento da qualquer maneira que nós quisermos.&lt;/p&gt;

&lt;p&gt;Na verdade, se o atributo &lt;code&gt;datetime&lt;/code&gt; não for especificado, o conteúdo deve estar em um dos formatos de data/hora válidos, caso contrário, podemos usá-lo como quisermos. Isso é ótimo porque nos permite escrever um código assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;A próxima reunião está agendada para &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;Outubro&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;Ou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;A próxima reunião está agendada para o &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;próximo mês&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;Ambos exemplos possuem um conteúdo de data que não é legível por uma máquina de acordo com a especificação, mas são aceitáveis​​, por causa da presença do atributo &lt;code&gt;datetime&lt;/code&gt;, que &lt;em&gt;faz uso&lt;/em&gt; de um formato válido.&lt;/p&gt;

&lt;p&gt;À primeira vista, isso pode parecer estranho. Mas o conteúdo do elemento foi concebido para servir os seres humanos, não máquinas. Além disso, esse fato permite a internacionalização das datas. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Mesma mensagem anterior, só que em italiano --&amp;gt;
Il prossimo incontro è programmato per &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;il mese prossimo&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;No código acima temos a mesma mensagem anterior, só que em Italiano.&lt;/p&gt;

&lt;h2 id=&#34;o-atributo-pubdate-1&#34;&gt;O atributo &lt;code&gt;pubdate&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Os primeiros rascunhos da especificação definiam um atributo &lt;code&gt;pubdate&lt;/code&gt; para o elemento &lt;code&gt;time&lt;/code&gt;. Este atributo era um &lt;em&gt;booleano&lt;/em&gt; que indicava que uma determinada data era a data de publicação do elemento pai &lt;code&gt;article&lt;/code&gt; ou, em caso de ausência de elemento &lt;code&gt;article&lt;/code&gt; pai, de todo o documento.&lt;/p&gt;

&lt;p&gt;Você poderia escrever por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;article&amp;gt;
    &amp;lt;h1&amp;gt;Um título&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Esse é o conteúdo do article.&amp;lt;/p&amp;gt;
    &amp;lt;footer&amp;gt;
        &amp;lt;p&amp;gt;Artigo publicado em &amp;lt;time datetime=&#34;2014-09-05&#34; pubdate&amp;gt;05 de setembro de 2014&amp;lt;/time&amp;gt;
    &amp;lt;/footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Nesse caso, 05 de setembro de 2014 seria a data de publicação desse &lt;code&gt;article&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Eu fui um grande fã deste atributo desde que aprendi bastante sobre isso, mas, infelizmente, ele foi removido da especificação. Essa decisão criou um grande problema, porque um grande número de pessoas (inclusive eu) usam a data de publicação para julgar o frescor e a relevância de um artigo ou notícia. Embora seja verdade que você ainda possa acessar a página de um artigo e ver a data de publicação, precisamos de uma forma padrão para uma máquina de ler a data.&lt;/p&gt;

&lt;p&gt;No atual momento não existe um atributo que substitua &lt;code&gt;pubdate&lt;/code&gt;, mas você pode empregar o &lt;a href=&#34;http://schema.org/BlogPosting&#34; target=&#34;_blank&#34;&gt;BlogPosting schema&lt;/a&gt;, e especificamente o valor &lt;code&gt;datePublished&lt;/code&gt; como mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;article itemscope itemType=&#34;http://schema.org/BlogPosting&#34;&amp;gt;
        &amp;lt;h1 itemprop=&#34;headline&#34;&amp;gt;Um título&amp;lt;/h1&amp;gt;
        &amp;lt;p itemprop=&#34;articleBody&#34;&amp;gt;Conteúdo do article.&amp;lt;/p&amp;gt;
 
        &amp;lt;footer&amp;gt;
            &amp;lt;p&amp;gt;Artigo publicado em &amp;lt;time datetime=&#34;2014-09-05&#34; itemprop=&#34;datePublished&#34;&amp;gt;05 de setembro de 2014&amp;lt;/time&amp;gt;
        &amp;lt;/footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Agora que você tem um &lt;em&gt;overview&lt;/em&gt; completo do elemento &lt;code&gt;time&lt;/code&gt;, vamos ver os diversos formatos permitidos.&lt;/p&gt;

&lt;p&gt;Os formatos validos para o conteúdo do elemento &lt;code&gt;time&lt;/code&gt; na ausência do atributo &lt;code&gt;datetime&lt;/code&gt; e para esse atributo em si são descritos nos itens seguintes.&lt;/p&gt;

&lt;h2 id=&#34;um-mês-válido-1&#34;&gt;Um mês válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um mês específico de um ano no formato &lt;strong&gt;aaaa-mm&lt;/strong&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Setembro 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-09&amp;lt;/time&amp;gt;  
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-válida-dia-do-mês-1&#34;&gt;Uma data válida (dia do mês)&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando uma data precisa no formato &lt;strong&gt;aaaa-mm-dd&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de setembro de 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-09-16&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-válida-sem-ano-1&#34;&gt;Uma data válida sem ano&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um mês e um dia sem um ano no formato &lt;strong&gt;mm-dd&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 29 de Junho --&amp;gt;
&amp;lt;time&amp;gt;06-29&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-tempo-válido-1&#34;&gt;Um tempo válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um tempo sem uma data e usando o formato 24 horas, da seguinte maneira &lt;strong&gt;HH:MM[:SS[.mm]]&lt;/strong&gt; onde:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt; são horas&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt; são minutos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; são segundos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;m&lt;/strong&gt; são milisegundos&lt;/li&gt;
&lt;li&gt;Os &lt;em&gt;brackets&lt;/em&gt; indicam partes que são opcionais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um exemplo desse formato mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 horas e 10 minutos (ou 4 horas e 10 minutos pm) --&amp;gt;
&amp;lt;time datetime=&#34;16:10&#34;&amp;gt;afternoon&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-e-hora-flutuante-válida-1&#34;&gt;Uma data e hora &lt;em&gt;flutuante&lt;/em&gt; válida&lt;/h2&gt;

&lt;p&gt;Esse formato é apresentado na especificação do W3C, mas não na versão WHATWG. Deve ser uma data e um tempo precisos no formato &lt;strong&gt;aaaa-mm-ddTHH:MM[:SS[.mm]]&lt;/strong&gt; ou &lt;strong&gt;aaaa-mm-dd HH:MM[:SS[.mmm]]&lt;/strong&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de Setembro de 2014 às 18 horas, 20 minutos, e 30 segundos --&amp;gt;
&amp;lt;time datetime=&#34;2014-09-16T18:20:30&#34;&amp;gt;Terça-feira às 18:20&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-fuso-horário-válido-1&#34;&gt;Um fuso horário válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando um fuso horário. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- GMT+1 (Itália) --&amp;gt;
&amp;lt;time&amp;gt;+01:00&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-e-tempo-global-válidos-1&#34;&gt;Uma data e tempo global válidos&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma data completa, incluindo tempo e fuso horário. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de Setembro de 2014 às 18 horas, 20 minutos, e 30 segundos um um fuso horário de GMT+1 (como a Itália) --&amp;gt;
&amp;lt;time&amp;gt;2014-09-16&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-semana-válida-1&#34;&gt;Uma semana válida&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma semana do ano. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- A 18ª semana de 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-W18&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-ano-válido-1&#34;&gt;Um ano válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando um ano. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 2014 --&amp;gt;
&amp;lt;time datetime=&#34;2014&#34;&amp;gt;Esse ano&amp;lt;/time&amp;gt;  
&lt;/pre&gt;

&lt;h2 id=&#34;uma-string-válida-de-duração-1&#34;&gt;Uma &lt;em&gt;string&lt;/em&gt; válida de duração&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma duração. Uma duração pode começar com o prefixo &lt;em&gt;&amp;#8220;P&amp;#8221;&lt;/em&gt; (para &lt;em&gt;período&lt;/em&gt;) e usa &lt;em&gt;&amp;#8220;D&amp;#8221;&lt;/em&gt; para marcar os &lt;em&gt;dias&lt;/em&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Uma duração de 4 dias --&amp;gt;
&amp;lt;time datetime=&#34;P4D&#34;&amp;gt;quatro dias&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Em caso da necessidade de especificar melhor o período, após o &lt;em&gt;&amp;#8220;D&amp;#8221;&lt;/em&gt;, você pode adicionar um &lt;em&gt;&amp;#8220;T&amp;#8221;&lt;/em&gt;, que significa &lt;em&gt;tempo&lt;/em&gt;, e usar &lt;em&gt;&amp;#8220;H&amp;#8221;&lt;/em&gt; para &lt;em&gt;horas&lt;/em&gt;, &lt;em&gt;&amp;#8220;M&amp;#8221;&lt;/em&gt; para &lt;em&gt;minutos&lt;/em&gt; e &lt;em&gt;&amp;#8220;S&amp;#8221;&lt;/em&gt; para &lt;em&gt;segundos&lt;/em&gt;. Assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Uma duração de quatro dias, quatro horas e três minutos --&amp;gt;
&amp;lt;time datetime=&#34;P4DT4H3M&#34;&amp;gt;quatro dias&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Esse formato também permite a você especificar um ou mais &lt;a href=&#34;http://www.w3.org/TR/html5/infrastructure.html#duration-time-component&#34; target=&#34;_blank&#34;&gt;componentes de duração de tempo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;limitações-1&#34;&gt;Limitações&lt;/h2&gt;

&lt;p&gt;A especificação atual tem algumas limitações no que você pode definir com o elemento &lt;code&gt;time&lt;/code&gt;. Uma dessas limitações é que você não pode indicar intervalos de datas. Então, se você estiver escrevendo um post sobre uma conferência que dura mais de um dia, por exemplo a partir de 26 de junho de 2014 a 28 de junho de 2014, você terá que usar dois elementos &lt;code&gt;time&lt;/code&gt;. Um bom exemplo pode ser encontrado na &lt;a href=&#34;http://aurelio.audero.it/speaking&#34; target=&#34;_blank&#34;&gt;página sobre palestras do meu website&lt;/a&gt;, onde eu uso o elemento &lt;code&gt;time&lt;/code&gt;, como mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;time datetime=&#34;2014-06-28&#34;&amp;gt;26&amp;lt;span class=&#34;hidden&#34;&amp;gt;de Junho de 2014&amp;lt;/span&amp;gt;&amp;lt;/time&amp;gt;-&amp;lt;time datetime=&#34;2014-06-28&#34;&amp;gt;28 Junho 2014&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Outra limitação é que você não pode usar o elemento &lt;code&gt;time&lt;/code&gt; para representar datas antes da &lt;a href=&#34;http://en.wikipedia.org/wiki/Common_Era&#34; target=&#34;_blank&#34;&gt;Era Comum&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;suporte-1&#34;&gt;Suporte&lt;/h2&gt;

&lt;p&gt;Baseado no &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time&#34; target=&#34;_blank&#34;&gt;artigo no MDN&lt;/a&gt;, o suporte do elemento &lt;code&gt;time&lt;/code&gt; é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chrome 33+&lt;/li&gt;
&lt;li&gt;Firefox 22+&lt;/li&gt;
&lt;li&gt;Internet Explorer 9+&lt;/li&gt;
&lt;li&gt;Opera 22+&lt;/li&gt;
&lt;li&gt;Safari 7+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No entanto, não há muito o que se preocupar sobre navegadores antigos. Na verdade, em caso do navegador não oferecer suporte para o elemento, ele será renderizado como um elemento &lt;em&gt;inline&lt;/em&gt; desconhecido.&lt;/p&gt;

&lt;h2 id=&#34;conclusão-1&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Se você ainda não começou a usar o elemento &lt;code&gt;time&lt;/code&gt; nas suas páginas, eu espero que esse guia lhe inspire a começar.&lt;/p&gt;

&lt;p&gt;Para mais informações, aqui vão alguns links relevantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/html/wg/drafts/html/master/text-level-semantics.html#the-time-element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on W3C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://html.spec.whatwg.org/multipage/semantics.html#the-time-element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on WHATWG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.whatwg.org/wiki/Time_element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element Wiki on WHATWG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do]&lt;a href=&#34;http://www.sitepoint.com/html5-time-element-guide/&#34;&gt;5&lt;/a&gt; escrito pelo &lt;a href=&#34;https://twitter.com/AurelioDeRosa&#34; title=&#34;Perfil do twitter&#34;&gt;Aurelio De Rosa&lt;/a&gt; em 16 de setembro de 2014.&lt;/p&gt;

&lt;p&gt;Tradução autorizada pelo &lt;a href=&#34;http://www.sitepoint.com/&#34;&gt;SitePoint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Qualquer erro ou sugestão de melhoria na tradução, é bem vinda! &lt;img class=&#34;wp-smiley&#34; src=&#34;http://tableless.com.br/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:)&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validação de formulários com HTML5</title>
      <link>http://tableless.com.br/validacao-de-formularios-com-html5/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/validacao-de-formularios-com-html5/</guid>
      <description>

&lt;p&gt;O HTML5 trouxe diversas possibilidades e, principalmente facilidades para os desenvolvedores. Uma delas é relacionada a validação de formulários. O que antes era feito com algum tempo e JavaScript, hoje pode ser feito diretamente no HTML e em um tempo muito menor. Por isso, navegando pela internet achei no &lt;a href=&#34;http://www.sitepoint.com/&#34;&gt;SitePoint&lt;/a&gt; esse &lt;a href=&#34;http://www.sitepoint.com/client-side-form-validation-html5/&#34;&gt;artigo&lt;/a&gt; do &lt;a href=&#34;https://twitter.com/tech4sky&#34;&gt;&lt;span style=&#34;text-decoration: underline&#34;&gt;A&lt;/span&gt;gbonghama Collins&lt;/a&gt;, um desenvolvedor nigeriano, que escreveu de forma rápida e direta alguns pontos da validação de formulários utilizando HTML5 e, resolvi traduzi-lo para nós.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Quando contruímos aplicações web, é importante levarmos a segurança a sério, especialmente quando essa precisa coletar dados dos usuários.&lt;/p&gt;

&lt;p&gt;Não confiar em ninguém, é uma norma máxima de segurança, portanto, nunca confie que o usuário vá inserir valores corretos e válidos no formulário. Por exemplo, em um campo de e-mail, em vez de inserir um endereço de e-mail válido, o usuário pode digitar um e-mail inválido ou dados mal-intencionados, obviamente, ignorando a indicação da requisição do campo.&lt;/p&gt;

&lt;p&gt;Quando se trata de validar valores de campos de formulários, isso pode ser feito no &lt;em&gt;lado do cliente&lt;/em&gt; (navegador) e no &lt;em&gt;lado do servidor&lt;/em&gt; (usando a linguagem que preferir).&lt;/p&gt;

&lt;p&gt;No passado, validações no &lt;em&gt;client-side&lt;/em&gt; só podiam ser feitas usando JavaScript ou algumas bibliotecas de &lt;em&gt;frameworks&lt;/em&gt; (como o &lt;a href=&#34;http://jqueryvalidation.org/&#34;&gt;plugin jQuery validation&lt;/a&gt;). Mas isso está mudando, ou melhor, já mudou, porque a validação agora pode ser feita usando &lt;strong&gt;HTML5&lt;/strong&gt;, sem a necessidade de escrever um código complexo de JavaScript para isso.&lt;/p&gt;

&lt;h2 id=&#34;validação-de-formulário-com-html5&#34;&gt;Validação de formulário com HTML5&lt;/h2&gt;

&lt;p&gt;HTML5 inclui um mecanismo bastante sólido na validação de formulários com base nos atributos da tag &lt;code&gt;input&lt;/code&gt;:  &lt;em&gt;type&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt; e &lt;em&gt;require&lt;/em&gt;. Graças a esses novos atributos, você pode delegar algumas funções de verificação de dados para o navegador.&lt;/p&gt;

&lt;p&gt;Vamos examinar esse atributos para ver como eles podem nos ajudar na validação de um formulário.&lt;/p&gt;

&lt;h2 id=&#34;o-atributo-type&#34;&gt;O atributo &lt;code&gt;type&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Esse atributo indica o tipo de controle de entrada de dados como o popular &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; para manipulação de dados de texto simples.&lt;/p&gt;

&lt;p&gt;Alguns controles de formulários herdam sistemas de validação sem a necessidade de escrever qualquer código. Por exemplo, &lt;code&gt;&amp;lt;input type=&amp;quot;email&amp;quot;&amp;gt;&lt;/code&gt; valida o campo para garantir que o dado digitado seja de fato um endereço de e-mail válido. Se o campo tiver um dado inválido, o formulário não vai poder ser submetido até que esse erro seja corrigido.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-42961&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/06/validacao-email.png&#34; alt=&#34;Imagem mostrando a validação client-side em um campo de formulário&#34; width=&#34;297&#34; height=&#34;100&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/hLcxn&#34;&gt;Teste o exemplo nesse link&lt;/a&gt; digitando um endereço de e-mail válido (&lt;a href=&#34;http://codepen.io/SitePoint/pen/BFwhz&#34;&gt;Link do CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Há também o &lt;code&gt;&amp;lt;input type=&amp;quot;number&amp;quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&amp;quot;url&amp;quot;&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;input type=&amp;quot;tel&amp;quot;&amp;gt;&lt;/code&gt; para validar números, URLs e telefones respectivamente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Os formatos de números de telefone variam de país para país devido à inconsistência nos tamanhos e formatos. Como resultado, a especificação não define um algoritmo para validá-los, portanto não é suportado nos navegadores web no momento da escrita.&lt;/p&gt;

&lt;p&gt;Lembre-se, a validação pode ser feita para o campo telefone em conjunto com o atributo &lt;code&gt;pattern&lt;/code&gt; que aceita uma &lt;em&gt;expressão regular&lt;/em&gt;, e que veremos a seguir.&lt;/p&gt;

&lt;h2 id=&#34;o-atributo-pattern&#34;&gt;O atributo &lt;code&gt;pattern&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;O atributo &lt;code&gt;pattern&lt;/code&gt; vai deixar os desenvolvedores felizes, principalmente aqueles que trabalham com front-end. Este atributo especifica um formato (na forma de expressão regular do JavaScript) em que o valor do campo é testado.&lt;/p&gt;

&lt;p&gt;Expressões regulares são uma linguagem usada para analisar e manipular texto. Elas são frequentemente utilizadas para executar operações complexas de &lt;em&gt;search-and-replace&lt;/em&gt;, e para garantir que os dados de texto estão corretos.&lt;/p&gt;

&lt;p&gt;Hoje em dia, as expressões regulares estão incluídas na maioria das linguagens de programação, assim como em muitas linguagens de script, editores, aplicações, bancos de dados e ferramentas de linha de comando.&lt;/p&gt;

&lt;p&gt;Expressões regulares (&lt;em&gt;RegEX&lt;/em&gt;) oferecem um poderoso, conciso e flexível meio para encontrar &lt;em&gt;string&lt;/em&gt; ou textos com caracteres particulares, palavras ou padrões de caracteres.&lt;/p&gt;

&lt;p&gt;Ao passarmos uma &lt;em&gt;string RegEX&lt;/em&gt; como valor para o atributo &lt;code&gt;pattern&lt;/code&gt;, conseguimos definir qual valor é aceitável pelo campo do formulário e também informar ao usuário de possíveis erros.&lt;/p&gt;

&lt;p&gt;Vamos ver alguns exemplos de como usar expressões regulares para validação de dados em campos de formulário.&lt;/p&gt;

&lt;h3 id=&#34;números-de-telefone&#34;&gt;Números de telefone&lt;/h3&gt;

&lt;p&gt;Como mencionado, o &lt;code&gt;input&lt;/code&gt; tel não é totalmente suportado pelos navegadores web devido à inconsistência no formato dos números de telefone em diferentes países.&lt;/p&gt;

&lt;p&gt;Por exemplo, no meu país, a Nigéria, o formato do telefone é &lt;em&gt;xxxx-xxx-xxxx&lt;/em&gt;, que seria algo como &lt;em&gt;0803-555-8205&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;RegEX&lt;/em&gt; &lt;code&gt;^\d{4}-\d{3}-\d{4}$&lt;/code&gt; corresponde ao formato, portanto, o HTML ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt;&amp;lt;label for=&#34;phonenum&#34;&amp;gt;Número de telefone:&amp;lt;/label&amp;gt;
&amp;lt;input pattern=&#34;^\d{4}-\d{3}-\d{4}$&#34; type=&#34;tel&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/vDIor&#34;&gt;Veja aqui um exemplo&lt;/a&gt;. (&lt;a href=&#34;http://codepen.io/SitePoint/pen/Eambf&#34;&gt;Link do CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;valores-alfanuméricos&#34;&gt;Valores alfanuméricos&lt;/h3&gt;

&lt;p&gt;O exemplo a seguir corresponde a caracteres alfanuméricos (combinações de letras do alfabeto e números).&lt;/p&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt;&amp;lt;input pattern=&#34;[a-zA-Z0-9]+&#34; type=&#34;text&#34;&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/Lgsdk&#34;&gt;Veja aqui um exemplo&lt;/a&gt;. (&lt;a href=&#34;http://codepen.io/SitePoint/pen/nptlf&#34;&gt;Link do CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;usuário-do-twitter&#34;&gt;Usuário do twitter&lt;/h3&gt;

&lt;p&gt;Essa expressão regular corresponde a um usuário do Twitter com o símbolo &lt;code&gt;@&lt;/code&gt;. Por exemplo: @tech3sky&lt;/p&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt;&amp;lt;input pattern=&#34;^@[A-Za-z0-9_]{1,15}$&#34; type=&#34;text&#34;&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/GBFkJ&#34;&gt;Veja aqui um exemplo&lt;/a&gt;. (&lt;a href=&#34;http://codepen.io/SitePoint/pen/nKGro&#34;&gt;Link do CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;modo-de-cor-hex&#34;&gt;Modo de cor HEX&lt;/h3&gt;

&lt;p&gt;Esse corresponde a cores hexadecimais. Por exemplo #3b5998 ou #000.&lt;/p&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt;&amp;lt;input pattern=&#34;^#+([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$&#34; type=&#34;text&#34;&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/ifvFI&#34;&gt;Veja aqui um exemplo&lt;/a&gt;. (&lt;a href=&#34;http://codepen.io/SitePoint/pen/ejqig&#34;&gt;Link do CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;dando-algumas-dicas&#34;&gt;Dando algumas dicas&lt;/h3&gt;

&lt;p&gt;Para fornecer ao usuário uma descrição da &lt;code&gt;pattern&lt;/code&gt;, ou um erro reportando que o valor inserido está inválido, você pode utilizar o atributo &lt;code&gt;title&lt;/code&gt;, dessa maneira:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-42964&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/06/validacao-title.png&#34; alt=&#34;Imagem mostra o atributo title de um campo de formulário ao usuário deixar o mouse sob ele&#34; width=&#34;273&#34; height=&#34;100&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-42965&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/06/validacao-erro.png&#34; alt=&#34;Imagem mostra erro devido à entrada de dados inválidos em um campo de formuláriop&#34; width=&#34;269&#34; height=&#34;100&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/ifsje&#34;&gt;Veja aqui um exemplo&lt;/a&gt;. (&lt;a href=&#34;http://codepen.io/SitePoint/pen/hbuxg&#34;&gt;Link para o CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Se você é novo com expressões regulares, você pode &lt;a href=&#34;http://docs.webplatform.org/wiki/concepts/programming/javascript/regex&#34;&gt;consultar esse documento no WebPlatform para lhe dar uma ajuda inicial&lt;/a&gt;. No entanto, na maioria dos casos, você pode usar o Google para ajudar a procurar a expressão regular que você quer, ou até mesmo &lt;a href=&#34;https://www.google.com.br/?gfe_rd=cr&amp;amp;ei=lkiWU4S-Momk8weRlIBw#q=regular+expression+tool&#34;&gt;utilizar uma ferramenta para ajudá-lo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-atributo-required&#34;&gt;O atributo &lt;code&gt;required&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Esse é um atributo &lt;em&gt;booleano&lt;/em&gt; usado para indicar que um determinando campo de formulário é obrigatório para o envio do mesmo. Ao adicionar esse atributo a um campo de formulário, o navegador obriga o usuário a inserir dados naquele campo antes de enviar o formulário.&lt;/p&gt;

&lt;p&gt;Essa validação substitui a validação básica de formulário implementada com JavaScript, tornando as coisas um pouco mais úteis e nos poupando algum tempo de desenvolvimento.&lt;/p&gt;

&lt;p&gt;Exemplo: &lt;code&gt;&amp;lt;input name=&amp;quot;my_name&amp;quot; required=&amp;quot;&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; ou &lt;code&gt;&amp;lt;input name=&amp;quot;my_name&amp;quot; required=&amp;quot;required&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; para compatibilidade XHTML.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-42966&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/06/validacao-required.png&#34; alt=&#34;Imagem mostra erro da validação HTML5 em um campo de formulário que é obrigatório.&#34; width=&#34;208&#34; height=&#34;150&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Todos os links de exemplos acima utilizam o atributo &lt;code&gt;required&lt;/code&gt;, assim você pode testá-los tentando submetê-los sem digitar nada nos campos.&lt;/p&gt;

&lt;h2 id=&#34;resumo&#34;&gt;Resumo&lt;/h2&gt;

&lt;p&gt;O suporte dos navegadores para as &lt;em&gt;features&lt;/em&gt; de validação de formulários é bem grande, e você pode utilizar &lt;em&gt;polyfills&lt;/em&gt; quando necessário.&lt;/p&gt;

&lt;p&gt;Vale a pena lembrar que confiar apenas no navegador (&lt;em&gt;client-side&lt;/em&gt;) para a validação pode ser perigoso, pois isso pode ser contornado por um usuário mal-intencionado ou por &lt;em&gt;bots&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nem todos os navegadores suportam HTML5 e nem toda entrada de texto enviada para seu script virá do formulário. Isso significa que validação do lado do servidor também deve estar antes do envio dos dados para o processamento do servidor.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do &lt;a href=&#34;http://www.sitepoint.com/client-side-form-validation-html5/&#34;&gt;artigo&lt;/a&gt; escrito pelo &lt;a href=&#34;https://twitter.com/tech4sky&#34;&gt;Agbonghama Collins&lt;/a&gt; em 06 de junho de 2014. Tradução autorizada pelo autor.&lt;/p&gt;

&lt;p&gt;Dei um _fork_ em todos os exemplos do CodePen colocando o texto em português, mas mantive os links para os originais também.&lt;/p&gt;

&lt;p&gt;Qualquer erro ou sugestão de melhoria na tradução, é bem vinda! 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SASS: Mixin ou Placeholder?</title>
      <link>http://tableless.com.br/sass-mixin-ou-placeholder/</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/sass-mixin-ou-placeholder/</guid>
      <description>

&lt;p&gt;Se é um tema que sempre vejo a respeito da utilização ou não, é sobre o uso de pré processadores CSS. Alguns &lt;em&gt;devs&lt;/em&gt; que costumo seguir e ler os artigos, e que pra mim são algumas das nossas referências, apontam as suas considerações sobre o tema. O Miller Medeiros, em um &lt;a href=&#34;http://blog.millermedeiros.com/the-problem-with-css-pre-processors/&#34;&gt;post&lt;/a&gt; mostra alguns pontos negativos na utilização de pré processadores. O Jean Carlos Emer em um outro &lt;a href=&#34;http://tableless.com.br/css-steroids/&#34; title=&#34;CSS on steroids&#34;&gt;post&lt;/a&gt; mostra as reais vantagens de se utilizar um pré-processador. O Diego Eis, em um outro &lt;a href=&#34;http://tableless.com.br/pre-processadores-usar-ou-nao-usar/&#34; title=&#34;Pré processadores: usar ou não usar?&#34;&gt;post&lt;/a&gt; faz uma conclusão muito boa sobre a utilização ou não:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pré processadores podem ajudar como também podem maltratar bastante. Basta um escorregão para que seu projeto vire um inferno. &amp;#8211; Diego Eis&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A utilização ou não de um pré processador fica a seu critério mas, se você já utiliza nos seus projetos ou está pensando em usar, você sabe o que são um &lt;strong&gt;placeholder&lt;/strong&gt; e um &lt;strong&gt;mixin&lt;/strong&gt;? Se sim, sabe qual a principal diferença entre eles e quando usar um ou outro? Navegando um dia pela internet, achei um &lt;a href=&#34;http://www.sitepoint.com/sass-mixin-placeholder/&#34;&gt;artigo&lt;/a&gt; do &lt;a href=&#34;https://twitter.com/HugoGiraudel&#34; title=&#34;Perfil do twitter do desenvolvedor Hugo Giraudel&#34;&gt;Hugo Giraudel&lt;/a&gt;, um dev front-end francês, no &lt;a href=&#34;http://www.sitepoint.com/&#34; title=&#34;Link do website SitePoint&#34;&gt;SitePoint&lt;/a&gt; que trata exatamente sobre esse assunto.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Quando comecei a trabalhar com SASS cerca de um ano e meio atrás, uma coisa que me levou tempo para entender foi a diferença entre &lt;em&gt;&lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins&#34;&gt;incluir um mixin&lt;/a&gt;&lt;/em&gt; e &lt;em&gt;&lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders&#34;&gt;estender um placeholder&lt;/a&gt;&lt;/em&gt;. Na verdade, até mesmo a noção de &lt;em&gt;placeholder&lt;/em&gt; era uma espécie de magia negra vodu naquela época.&lt;/p&gt;

&lt;p&gt;Se você estiver em uma situação semelhante, não se preocupe, porque eu vou tentar iluminar o caminho. Hoje vamos aprender para que exatamente serve um &lt;em&gt;mixin&lt;/em&gt;, e quando usar um &lt;em&gt;placeholder do SASS&lt;/em&gt;. Você vai entender que ambos tem diferentes finalidades e não devem ser confundidas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota: Enquanto pretendo falar sobre SASS, esse artigo pode ser aplicado a qualquer outro pré-processador CSS, seja Stylus, LESS, ou outro que você venha a usar. Essas tecnologias geralmente fazem a mesma coisa, portanto fique a vontade para adaptar o conteúdo deste artigo para a ferramenta de sua escolha&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Primeiro devemos fazer um breve resumo sobre o que estamos falando quando nos referimos aos &lt;strong&gt;placeholder e mixins do SASS&lt;/strong&gt;, então vamos fazer isso já.&lt;/p&gt;

&lt;h2 id=&#34;entendendo-o-mixin&#34;&gt;Entendendo o mixin&lt;/h2&gt;

&lt;p&gt;Um mixin é uma diretiva que permite que você defina várias regras com diversos argumentos. Pense nisso como uma função que irá retornar conteúdo CSS ao invés de um valor. Aqui está a definição de &lt;em&gt;mixin&lt;/em&gt; da &lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content&#34;&gt;referência do SASS&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote cite=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content&#34;&gt;
  &lt;p&gt;
    Mixins permitem definir estilos que podem ser reutilizados em toda a folha de estilo, sem a necessidade de recorrer a classes não semânticas como &lt;i&gt;.float-left&lt;/i&gt;. Mixins podem também conter regras completas de CSS e quaisquer outras coisas permitidas em um documento SASS. Eles podem até mesmo possuírem argumentos que lhe permitem produzir uma ampla variedade de estilos com poucos mixins.
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agora que cobrimos a terminologia, vamos dizer que você encontra algumas declarações que são repetidas várias vezes ao longo da sua folha de estilos. Você que está familiarizado com o conceito de DRY (&lt;a href=&#34;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;Don&amp;#8217;t Repeat Yourself&lt;/a&gt;), sabe que a repetição de código é ruim. Para corrigir isso, você pode escrever um mixin para todas aquelas declarações repetidas:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin center() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.container {
    @include center();
    /* Outros estilos aqui... */
}

/* Outros estilos... */

.image-cover {
    @include center;
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota: Se você não passar um argumento para um mixin, você pode omitir os parênteses. Na verdade, você pode até omiti-los na definição do &lt;code&gt;@mixin&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Com este mixin recém-criado, você não precisa repetir aquelas três linhas de código cada vez que precisar centralizar um elemento; você simplesmente inclui o mixin. Muito prático, não é?!&lt;/p&gt;

&lt;p&gt;Algumas vezes você vai querer um mixin para construir o que você chamaria de &lt;em&gt;shorthand&lt;/em&gt; para algumas propriedades. Por exemplo, largura e altura. Você não está cansado de escrever as duas linhas várias e várias vezes? Especialmente quando ambas tem o mesmo valor? Bem, vamos lidar com isso usando um mixin!&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}
&lt;/pre&gt;

&lt;p&gt;Muito simples, não é? Note como deixamos o parâmetro &lt;code&gt;$height&lt;/code&gt; ser opcional e, por padrão assumir o mesmo valor do parâmetro &lt;code&gt;$width&lt;/code&gt; na assinatura do mixin. Agora, sempre que você precisar definir as dimensões para um elemento, você pode simplesmente fazer isso:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.icon {
    @include size(32px);
}

.cover {
    @include size(100%, 10em);
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota: Um outro bom exemplo de mixin seria &lt;a href=&#34;http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/&#34;&gt;este aqui&lt;/a&gt; que eu fiz para evitar de escrever as posições &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; e &lt;code&gt;bottom&lt;/code&gt; toda vez que quiser utilizar um sistema de posicionamento diferente do estático.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;conhecendo-seu-placeholder&#34;&gt;Conhecendo seu Placeholder&lt;/h2&gt;

&lt;p&gt;Placeholders são um tipo de coisa estranha. Eles são classes que não são retornadas quando o seu SCSS é compilado. Você deve então pensar: &lt;em&gt;&amp;#8220;Qual é o sentido disso?&amp;#8221;&lt;/em&gt;. Na verdade, o ponto seria minímo senão fosse a expressão &lt;code&gt;@extend&lt;/code&gt;. Mas vamos por partes. Essa é a forma que você escreve um placeholder:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
    display: block;
    margin-left: auto;
    margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota do editor: Como um placeholder, um mixin é igualmente inútil, a menos que seja referenciado, assim essa seção não está dizendo que eles são diferentes nesse aspecto, mas apenas esclarecendo que mesmo que se pareça similar com um bloco de declaração CSS, não será gerado por conta própria.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basicamente você escreve exatamente como uma classe &lt;code&gt;CSS&lt;/code&gt; exceto pelo símbolo % ao invés do ponto. Além disso, segue as mesmas &lt;a href=&#34;http://www.w3.org/TR/html401/types.html#type-cdata&#34;&gt;regras de nomenclatura&lt;/a&gt; das classes.&lt;/p&gt;

&lt;p&gt;Agora, se você tentar compilar seu SCSS, você não vai ver esse pedaço de código no arquivo gerado. Como eu disse: &lt;strong&gt;placeholders não são compilados&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Então, por agora, esse placeholder é totalmente inútil. Você não consegue fazer qualquer uso dele a não ser que você veja o &lt;code&gt;@extend&lt;/code&gt;. Um &lt;code&gt;@extend&lt;/code&gt; tem como objetivo herdar as propriedades de um seletor CSS / SCSS placeholder. Aqui como usá-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.container {
  @extend %center;
}
&lt;/pre&gt;

&lt;p&gt;Ao fazer isso, o arquivo SASS vai pegar o conteúdo do placeholder &lt;code&gt;%center&lt;/code&gt; e aplicá-lo no &lt;code&gt;.container&lt;/code&gt; (mesmo que isso não aconteça exatamente assim &amp;#8211; mas isso não é importante agora). Como eu disse, você também pode &lt;em&gt;estender&lt;/em&gt; seletores CSS já existentes (além de placeholders SCSS) dessa maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.table-zebra {
  @extend .table;

  tr:nth-of-type(even) {
    background: rgba(0,0,0,.5);
  }
}
&lt;/pre&gt;

&lt;p&gt;Esse é um caso muito comum para o uso do &lt;code&gt;@extend&lt;/code&gt;. Nesse caso, pedimos para a classe &lt;code&gt;.table-zebra&lt;/code&gt; se comportar exatamente como a classe &lt;code&gt;.table&lt;/code&gt; e então adicionamos as regras específicas da classe &lt;code&gt;.table-zebra&lt;/code&gt;. &lt;em&gt;Estender&lt;/em&gt; seletores é bastante conveniente quando você desenvolve seu site ou aplicação em componentes modulares.&lt;/p&gt;

&lt;h2 id=&#34;qual-utilizar&#34;&gt;Qual utilizar?&lt;/h2&gt;

&lt;p&gt;Então, a pergunta permanece: o que você deve usar? Bem, como tudo em nossa área: &lt;strong&gt;depende&lt;/strong&gt;. Depende do contexto e, em uma outra análise, do que você está querendo fazer.&lt;/p&gt;

&lt;p&gt;O melhor conselho seria: se você precisa de variáveis, utilize o mixin. Caso contrário, use o placeholder. Há duas razões para isso:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primeiro, você não pode usar variáveis em um placeholder. Na verdade, até pode, mas você não consegue &lt;em&gt;passar&lt;/em&gt; uma variável em um placeholder para gerar um conteúdo específico de CSS, como você faria em um mixin.&lt;/li&gt;
&lt;li&gt;Segundo, a forma como o SASS lida com os mixins, os torna muito incovenientes quando você os utiliza sem variáveis contextuais. Simplificando: o SASS vai duplicar a saída de um mixin toda vez que você o utilizá-lo, resultando não apenas em CSS duplicado, mas também em uma folha de estilos maior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considere o primeiro exemplo desse artigo:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.container {
  @include center;
}

.image-cover {
  @include center;
}
&lt;/pre&gt;

&lt;p&gt;O CSS compilado seria esse:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.image-cover {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;Observou o CSS duplicado? Ele não é tão prejudicial se forem apenas três linhas duplicadas, mas se você tiver muitos mixins que são usados várias vezes em um projeto, essas três linhas podem facilmente se tornarem 300. E se reformularmos nosso exemplo, só que dessa vez utilizando o placeholder?&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.container {
  @extend %center;
}

.image-cover {
  @extend %center;
}
&lt;/pre&gt;

&lt;p&gt;Agora, esse é o CSS gerado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container, .image-cover {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;Muito melhor! A compilação leva vantagem &lt;a href=&#34;http://reference.sitepoint.com/css/selectorgrouping&#34;&gt;agrupando seletores&lt;/a&gt;, sem nenhum estilo repetido. Assim, sempre que você quiser evitar a escrever as mesmas propriedades diversas vezes, sabendo que elas não mudarão, é uma boa idéia &lt;em&gt;estender&lt;/em&gt; um placeholder. Isso resultará em um código CSS compilado muito mais limpo.&lt;/p&gt;

&lt;p&gt;Por outro lado, se você precisa escrever as mesmas propriedades em vários lugares mas com valores diferentes (tamanho, cores, etc), um mixin é o melhor caminho a seguir. Agora se você possui ambos, um grupo de valores fixos e outro de valores variáveis, você deve tentar usar uma combinação dos dois.&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
  margin-left: auto;
  margin-right: auto;
  display: block;
}

@mixin skin($color, $size) {
  @extend %center;
  background: $color;
  height: $size;
}

a { @include skin(pink, 10em) }
b { @include skin(blue, 90px) }
&lt;/pre&gt;

&lt;p&gt;Neste caso, o mixin está &lt;em&gt;estendendo&lt;/em&gt; o placeholder para os valores fixos em vez de jogá-los diretamente em seu corpo. Isso gera um CSS mais limpo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a, b {
  margin-left: auto;
  margin-right: auto;
  display: block;
}

a {
  background: pink;
  height: 10em;
}

b {
  background: blue;
  height: 90px;
}
&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;É isso. Espero ter deixado claro não só o que são mixins e placeholders, mas também quando você deve usá-los e qual os efeitos sobre o CSS compilado.&lt;/p&gt;

&lt;p&gt;Se você tiver alguma coisa a acrescentar sobre suas experiências com essas &lt;em&gt;features&lt;/em&gt; dos pré-processadores de CSS, sinta-se livre para compartilhar nos comentários.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do [Se é um tema que sempre vejo a respeito da utilização ou não, é sobre o uso de pré processadores CSS. Alguns &lt;em&gt;devs&lt;/em&gt; que costumo seguir e ler os artigos, e que pra mim são algumas das nossas referências, apontam as suas considerações sobre o tema. O Miller Medeiros, em um &lt;a href=&#34;http://blog.millermedeiros.com/the-problem-with-css-pre-processors/&#34;&gt;post&lt;/a&gt; mostra alguns pontos negativos na utilização de pré processadores. O Jean Carlos Emer em um outro &lt;a href=&#34;http://tableless.com.br/css-steroids/&#34; title=&#34;CSS on steroids&#34;&gt;post&lt;/a&gt; mostra as reais vantagens de se utilizar um pré-processador. O Diego Eis, em um outro &lt;a href=&#34;http://tableless.com.br/pre-processadores-usar-ou-nao-usar/&#34; title=&#34;Pré processadores: usar ou não usar?&#34;&gt;post&lt;/a&gt; faz uma conclusão muito boa sobre a utilização ou não:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pré processadores podem ajudar como também podem maltratar bastante. Basta um escorregão para que seu projeto vire um inferno. &amp;#8211; Diego Eis&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A utilização ou não de um pré processador fica a seu critério mas, se você já utiliza nos seus projetos ou está pensando em usar, você sabe o que são um &lt;strong&gt;placeholder&lt;/strong&gt; e um &lt;strong&gt;mixin&lt;/strong&gt;? Se sim, sabe qual a principal diferença entre eles e quando usar um ou outro? Navegando um dia pela internet, achei um &lt;a href=&#34;http://www.sitepoint.com/sass-mixin-placeholder/&#34;&gt;artigo&lt;/a&gt; do &lt;a href=&#34;https://twitter.com/HugoGiraudel&#34; title=&#34;Perfil do twitter do desenvolvedor Hugo Giraudel&#34;&gt;Hugo Giraudel&lt;/a&gt;, um dev front-end francês, no &lt;a href=&#34;http://www.sitepoint.com/&#34; title=&#34;Link do website SitePoint&#34;&gt;SitePoint&lt;/a&gt; que trata exatamente sobre esse assunto.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Quando comecei a trabalhar com SASS cerca de um ano e meio atrás, uma coisa que me levou tempo para entender foi a diferença entre &lt;em&gt;&lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins&#34;&gt;incluir um mixin&lt;/a&gt;&lt;/em&gt; e &lt;em&gt;&lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders&#34;&gt;estender um placeholder&lt;/a&gt;&lt;/em&gt;. Na verdade, até mesmo a noção de &lt;em&gt;placeholder&lt;/em&gt; era uma espécie de magia negra vodu naquela época.&lt;/p&gt;

&lt;p&gt;Se você estiver em uma situação semelhante, não se preocupe, porque eu vou tentar iluminar o caminho. Hoje vamos aprender para que exatamente serve um &lt;em&gt;mixin&lt;/em&gt;, e quando usar um &lt;em&gt;placeholder do SASS&lt;/em&gt;. Você vai entender que ambos tem diferentes finalidades e não devem ser confundidas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota: Enquanto pretendo falar sobre SASS, esse artigo pode ser aplicado a qualquer outro pré-processador CSS, seja Stylus, LESS, ou outro que você venha a usar. Essas tecnologias geralmente fazem a mesma coisa, portanto fique a vontade para adaptar o conteúdo deste artigo para a ferramenta de sua escolha&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Primeiro devemos fazer um breve resumo sobre o que estamos falando quando nos referimos aos &lt;strong&gt;placeholder e mixins do SASS&lt;/strong&gt;, então vamos fazer isso já.&lt;/p&gt;

&lt;h2 id=&#34;entendendo-o-mixin-1&#34;&gt;Entendendo o mixin&lt;/h2&gt;

&lt;p&gt;Um mixin é uma diretiva que permite que você defina várias regras com diversos argumentos. Pense nisso como uma função que irá retornar conteúdo CSS ao invés de um valor. Aqui está a definição de &lt;em&gt;mixin&lt;/em&gt; da &lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content&#34;&gt;referência do SASS&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote cite=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content&#34;&gt;
  &lt;p&gt;
    Mixins permitem definir estilos que podem ser reutilizados em toda a folha de estilo, sem a necessidade de recorrer a classes não semânticas como &lt;i&gt;.float-left&lt;/i&gt;. Mixins podem também conter regras completas de CSS e quaisquer outras coisas permitidas em um documento SASS. Eles podem até mesmo possuírem argumentos que lhe permitem produzir uma ampla variedade de estilos com poucos mixins.
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agora que cobrimos a terminologia, vamos dizer que você encontra algumas declarações que são repetidas várias vezes ao longo da sua folha de estilos. Você que está familiarizado com o conceito de DRY (&lt;a href=&#34;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;Don&amp;#8217;t Repeat Yourself&lt;/a&gt;), sabe que a repetição de código é ruim. Para corrigir isso, você pode escrever um mixin para todas aquelas declarações repetidas:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin center() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.container {
    @include center();
    /* Outros estilos aqui... */
}

/* Outros estilos... */

.image-cover {
    @include center;
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota: Se você não passar um argumento para um mixin, você pode omitir os parênteses. Na verdade, você pode até omiti-los na definição do &lt;code&gt;@mixin&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Com este mixin recém-criado, você não precisa repetir aquelas três linhas de código cada vez que precisar centralizar um elemento; você simplesmente inclui o mixin. Muito prático, não é?!&lt;/p&gt;

&lt;p&gt;Algumas vezes você vai querer um mixin para construir o que você chamaria de &lt;em&gt;shorthand&lt;/em&gt; para algumas propriedades. Por exemplo, largura e altura. Você não está cansado de escrever as duas linhas várias e várias vezes? Especialmente quando ambas tem o mesmo valor? Bem, vamos lidar com isso usando um mixin!&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}
&lt;/pre&gt;

&lt;p&gt;Muito simples, não é? Note como deixamos o parâmetro &lt;code&gt;$height&lt;/code&gt; ser opcional e, por padrão assumir o mesmo valor do parâmetro &lt;code&gt;$width&lt;/code&gt; na assinatura do mixin. Agora, sempre que você precisar definir as dimensões para um elemento, você pode simplesmente fazer isso:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.icon {
    @include size(32px);
}

.cover {
    @include size(100%, 10em);
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota: Um outro bom exemplo de mixin seria &lt;a href=&#34;http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/&#34;&gt;este aqui&lt;/a&gt; que eu fiz para evitar de escrever as posições &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; e &lt;code&gt;bottom&lt;/code&gt; toda vez que quiser utilizar um sistema de posicionamento diferente do estático.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;conhecendo-seu-placeholder-1&#34;&gt;Conhecendo seu Placeholder&lt;/h2&gt;

&lt;p&gt;Placeholders são um tipo de coisa estranha. Eles são classes que não são retornadas quando o seu SCSS é compilado. Você deve então pensar: &lt;em&gt;&amp;#8220;Qual é o sentido disso?&amp;#8221;&lt;/em&gt;. Na verdade, o ponto seria minímo senão fosse a expressão &lt;code&gt;@extend&lt;/code&gt;. Mas vamos por partes. Essa é a forma que você escreve um placeholder:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
    display: block;
    margin-left: auto;
    margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota do editor: Como um placeholder, um mixin é igualmente inútil, a menos que seja referenciado, assim essa seção não está dizendo que eles são diferentes nesse aspecto, mas apenas esclarecendo que mesmo que se pareça similar com um bloco de declaração CSS, não será gerado por conta própria.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basicamente você escreve exatamente como uma classe &lt;code&gt;CSS&lt;/code&gt; exceto pelo símbolo % ao invés do ponto. Além disso, segue as mesmas &lt;a href=&#34;http://www.w3.org/TR/html401/types.html#type-cdata&#34;&gt;regras de nomenclatura&lt;/a&gt; das classes.&lt;/p&gt;

&lt;p&gt;Agora, se você tentar compilar seu SCSS, você não vai ver esse pedaço de código no arquivo gerado. Como eu disse: &lt;strong&gt;placeholders não são compilados&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Então, por agora, esse placeholder é totalmente inútil. Você não consegue fazer qualquer uso dele a não ser que você veja o &lt;code&gt;@extend&lt;/code&gt;. Um &lt;code&gt;@extend&lt;/code&gt; tem como objetivo herdar as propriedades de um seletor CSS / SCSS placeholder. Aqui como usá-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.container {
  @extend %center;
}
&lt;/pre&gt;

&lt;p&gt;Ao fazer isso, o arquivo SASS vai pegar o conteúdo do placeholder &lt;code&gt;%center&lt;/code&gt; e aplicá-lo no &lt;code&gt;.container&lt;/code&gt; (mesmo que isso não aconteça exatamente assim &amp;#8211; mas isso não é importante agora). Como eu disse, você também pode &lt;em&gt;estender&lt;/em&gt; seletores CSS já existentes (além de placeholders SCSS) dessa maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.table-zebra {
  @extend .table;

  tr:nth-of-type(even) {
    background: rgba(0,0,0,.5);
  }
}
&lt;/pre&gt;

&lt;p&gt;Esse é um caso muito comum para o uso do &lt;code&gt;@extend&lt;/code&gt;. Nesse caso, pedimos para a classe &lt;code&gt;.table-zebra&lt;/code&gt; se comportar exatamente como a classe &lt;code&gt;.table&lt;/code&gt; e então adicionamos as regras específicas da classe &lt;code&gt;.table-zebra&lt;/code&gt;. &lt;em&gt;Estender&lt;/em&gt; seletores é bastante conveniente quando você desenvolve seu site ou aplicação em componentes modulares.&lt;/p&gt;

&lt;h2 id=&#34;qual-utilizar-1&#34;&gt;Qual utilizar?&lt;/h2&gt;

&lt;p&gt;Então, a pergunta permanece: o que você deve usar? Bem, como tudo em nossa área: &lt;strong&gt;depende&lt;/strong&gt;. Depende do contexto e, em uma outra análise, do que você está querendo fazer.&lt;/p&gt;

&lt;p&gt;O melhor conselho seria: se você precisa de variáveis, utilize o mixin. Caso contrário, use o placeholder. Há duas razões para isso:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primeiro, você não pode usar variáveis em um placeholder. Na verdade, até pode, mas você não consegue &lt;em&gt;passar&lt;/em&gt; uma variável em um placeholder para gerar um conteúdo específico de CSS, como você faria em um mixin.&lt;/li&gt;
&lt;li&gt;Segundo, a forma como o SASS lida com os mixins, os torna muito incovenientes quando você os utiliza sem variáveis contextuais. Simplificando: o SASS vai duplicar a saída de um mixin toda vez que você o utilizá-lo, resultando não apenas em CSS duplicado, mas também em uma folha de estilos maior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considere o primeiro exemplo desse artigo:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.container {
  @include center;
}

.image-cover {
  @include center;
}
&lt;/pre&gt;

&lt;p&gt;O CSS compilado seria esse:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.image-cover {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;Observou o CSS duplicado? Ele não é tão prejudicial se forem apenas três linhas duplicadas, mas se você tiver muitos mixins que são usados várias vezes em um projeto, essas três linhas podem facilmente se tornarem 300. E se reformularmos nosso exemplo, só que dessa vez utilizando o placeholder?&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.container {
  @extend %center;
}

.image-cover {
  @extend %center;
}
&lt;/pre&gt;

&lt;p&gt;Agora, esse é o CSS gerado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container, .image-cover {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;Muito melhor! A compilação leva vantagem &lt;a href=&#34;http://reference.sitepoint.com/css/selectorgrouping&#34;&gt;agrupando seletores&lt;/a&gt;, sem nenhum estilo repetido. Assim, sempre que você quiser evitar a escrever as mesmas propriedades diversas vezes, sabendo que elas não mudarão, é uma boa idéia &lt;em&gt;estender&lt;/em&gt; um placeholder. Isso resultará em um código CSS compilado muito mais limpo.&lt;/p&gt;

&lt;p&gt;Por outro lado, se você precisa escrever as mesmas propriedades em vários lugares mas com valores diferentes (tamanho, cores, etc), um mixin é o melhor caminho a seguir. Agora se você possui ambos, um grupo de valores fixos e outro de valores variáveis, você deve tentar usar uma combinação dos dois.&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
  margin-left: auto;
  margin-right: auto;
  display: block;
}

@mixin skin($color, $size) {
  @extend %center;
  background: $color;
  height: $size;
}

a { @include skin(pink, 10em) }
b { @include skin(blue, 90px) }
&lt;/pre&gt;

&lt;p&gt;Neste caso, o mixin está &lt;em&gt;estendendo&lt;/em&gt; o placeholder para os valores fixos em vez de jogá-los diretamente em seu corpo. Isso gera um CSS mais limpo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a, b {
  margin-left: auto;
  margin-right: auto;
  display: block;
}

a {
  background: pink;
  height: 10em;
}

b {
  background: blue;
  height: 90px;
}
&lt;/pre&gt;

&lt;h2 id=&#34;conclusão-1&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;É isso. Espero ter deixado claro não só o que são mixins e placeholders, mas também quando você deve usá-los e qual os efeitos sobre o CSS compilado.&lt;/p&gt;

&lt;p&gt;Se você tiver alguma coisa a acrescentar sobre suas experiências com essas &lt;em&gt;features&lt;/em&gt; dos pré-processadores de CSS, sinta-se livre para compartilhar nos comentários.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do]&lt;a href=&#34;http://www.sitepoint.com/sass-mixin-placeholder/&#34;&gt;4&lt;/a&gt; escrito pelo &lt;a href=&#34;https://twitter.com/HugoGiraudel&#34; title=&#34;Perfil do twitter&#34;&gt;Hugo Giraudel&lt;/a&gt; em 30 de janeiro de 2014.&lt;/p&gt;

&lt;p&gt;Tradução autorizada pelo &lt;a href=&#34;http://www.sitepoint.com/&#34;&gt;SitePoint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Qualquer erro ou sugestão de melhoria na tradução, é bem vinda! 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Guide by @mdo</title>
      <link>http://tableless.com.br/code-guide-mdo/</link>
      <pubDate>Fri, 28 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/code-guide-mdo/</guid>
      <description>&lt;p&gt;Alguns devem conhecer o &lt;a href=&#34;http://twitter.com/@mdo&#34;&gt;@mdo&lt;/a&gt;. Se você não conhece, ele é um dos criadores do &lt;a href=&#34;http://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ontem a noite ele liberou um Guia de Escrita de Código. É um guia simples onde ele cita uma série de boas práticas e guidelines para escrever código bem estruturado, escalável e legível para todos da equipe. Como eu sigo a grande maioria das regras do guia em todos os meus projetos, achei legal traduzir pra divulgar as boas práticas aqui no Brasil.&lt;/p&gt;

&lt;p&gt;Eu &lt;a href=&#34;https://github.com/diegoeis/code-guide/&#34;&gt;forkei o projeto e traduzi o guia para o português&lt;/a&gt;. Mesmo assim eu preciso ainda de ajuda para revisão. Se alguém quiser ajudar ou apenas estiver curioso para ler o guia em português, visite: &lt;a href=&#34;http://diegoeis.github.io/code-guide/&#34;&gt;Code Guide by @mdo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O futuro do jQuery</title>
      <link>http://tableless.com.br/o-futuro-jquery/</link>
      <pubDate>Fri, 28 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-futuro-jquery/</guid>
      <description>

&lt;p&gt;Desde quando o jQuery foi lançado em 2006, ele se tornou extremamente indispensável no dia-a-dia do desenvolvimento web. Ele é usado em pelo menos 60% dos websites mais visitados e sem dúvida é uma das bibliotecas client-side mais usadas hoje em dia.&lt;/p&gt;

&lt;p&gt;O jQuery se tornou tão popular por uma razão: ele é limpo e sua API é fácil de usar porque abstrai a complexidade de scripts cross-browser, principalmente nos browsers antigos. Logo, conforme nos aproximamos de uma era na Web, onde os browsers estão se tornando rapidamente algo do passado, é compreensível o aumento da necessidade em utilizar tais APIs, mas pensando também na questão do futuro do jQuery.&lt;/p&gt;

&lt;p&gt;Mas antes que você pense qualquer coisa, vamos considerar uma alternativa.&lt;/p&gt;

&lt;h2 id=&#34;api-nativa&#34;&gt;API nativa&lt;/h2&gt;

&lt;p&gt;Embora o jQuery tenha adicionando um tremendo valor na web com o passar dos anos, ele criou uma densa camada entre desenvolvedores e o DOM. Muitos dos desenvolvedores não entendem exatamente o que está acontecendo por trás daquele sinal de dólar ($). Enquanto isso, todos os comandos nativos equivalentes são fáceis de usar.&lt;/p&gt;

&lt;p&gt;Isto não significa que precisamos evitar o jQuery. Nós precisamos considerar o jQuery como uma ferramenta ao invés de uma exigência. Avaliando o &lt;a href=&#34;http://github.com/jquery/jquery&#34; title=&#34;/a&amp;gt; quando comparamos a sintaxe do jQuery com as alternativas nativas. Estas comparações são uma boa base par&#34;&gt;código fonte do jQuery&lt;/a&gt;, podemos encontrar &lt;a href=&#34;http://www.paulirish.com/2010/10-things-i-learned-from-the-jquery-source/&#34; title=&#34;á acontecendo pro trás da cortina e é um grande passo para entender o DOM. Entretanto, é importante entender &#34;&gt;muito valor e algumas ideias&lt;/a&gt; sobre o que estamos usando. Há também &lt;a href=&#34;http://youmightnotneedjquery.com/&#34; title=&#34;inados a terem bugs. Na verdade, &amp;lt;a href=&amp;quot;http://blog.jquery.com/2013/01/14/the-state-of-jquery-2013/&amp;quot; title=&#34;&gt;muito&lt;/a&gt; o que &lt;a href=&#34;http://toddmotto.com/is-it-time-to-drop-jquery-essentials-to-learning-javascript-from-a-jquery-background/&#34; title=&#34;hes e correções para o Chrome, Safari e Firefox do que para o Internet Explorer&amp;quot;&amp;gt;o estado do jQuery em 2013&amp;lt;/&#34;&gt;conversar&lt;/a&gt; quando comparamos a sintaxe do jQuery com as alternativas nativas. Estas comparações são uma boa base para entender o que está acontecendo pro trás da cortina e é um grande passo para entender o DOM. Entretanto, é importante entender também que os browsers estão inclinados a terem bugs. Na verdade, &lt;a href=&#34;http://blog.jquery.com/2013/01/14/the-state-of-jquery-2013/&#34; title=&#34;jQuery 2.0 agora tem mais patches e correções para o Chrome, Safari e Firefox do que para o Internet Explorer&#34;&gt;o estado do jQuery em 2013&lt;/a&gt; afirma-se que o &amp;#8220;jQuery 2.0 agora tem mais patches e correções para o Chrome, Safari e Firefox do que para o Internet Explorer&amp;#8221;. Todo cuidado é pouco, seja cuidadoso quando abandonar o uso de uma biblioteca altamente testada e largamente utilizada como o jQuery.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34; xml:lang=&#34;en&#34;&gt;
  &lt;p&gt;
    You Might Not Need jQuery! … assuming you&amp;#39;ll address these bugs in your hand-written code: &lt;a href=&#34;https://t.co/j2hrG2nCpX&#34;&gt;https://t.co/j2hrG2nCpX&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Paul Irish (@paul_irish) &lt;a href=&#34;https://twitter.com/paul_irish/statuses/431584056883429376&#34;&gt;February 7, 2014&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;a-sintaxe-a-abstração&#34;&gt;A sintaxe, a abstração&lt;/h2&gt;

&lt;p&gt;Frameworks server-side como Ruby on Rails ou frameworks client-sides como Ember e Angular são largamente usadas por conveniência. Conveniência é economia de tempo, e tempo é dinheiro.&lt;/p&gt;

&lt;p&gt;jQuery === $ #amiright?&lt;/p&gt;

&lt;p&gt;Cada linha de código que é escrita nestes frameworks são vistos por milhões de olhos. Erros são capturados e bugs são encontrados.&lt;/p&gt;

&lt;p&gt;Nós também valorizamos um código limpo, curto, proficiente e rápido. Tamanho de arquivo desnecessário, features dispensáveis e condicionais são algo que precisamos considerar. Especialmente dado ao aumento de visitantes mobile. Isto pode ser resolvido com gerenciamento de dependências modulares.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34; xml:lang=&#34;en&#34;&gt;
  &lt;p&gt;
    “YOU MIGHT NOT NEED &lt;a href=&#34;https://twitter.com/jquery&#34;&gt;@jquery&lt;/a&gt;” Bullshit, we need granular dependency management for modular libraries.
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Stephan Bönnemann (@boennemann) &lt;a href=&#34;https://twitter.com/boennemann/statuses/429214761122021376&#34;&gt;January 31, 2014&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enquanto o futuro do jQuery seja incerto, uma coisa é clara, ele não vai a lugar nenhum. E mesmo que o código do jQuery continue pequeno e seu código legado continue sendo removido, ainda assim iremos continuar usando apenas uma fração de toda a biblioteca disponível. Nós não precisamos incluir toda a biblioteca apenas para usar uma parte dela.&lt;/p&gt;

&lt;p&gt;O futuro do jQuery é o gerenciamento modular de dependencias (eu espero).&lt;/p&gt;

&lt;h2 id=&#34;javascript-modular&#34;&gt;Javascript modular&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://browserify.org/&#34;&gt;Browserify&lt;/a&gt; e &lt;a href=&#34;http://requirejs.org/&#34;&gt;RequireJS&lt;/a&gt; são dois métodos para &lt;a href=&#34;http://addyosmani.com/writing-modular-js/]&#34;&gt;escrever Javascript de forma modular&lt;/a&gt;. Ambas as ferramentas tem construído scripts no qual incluem apenas os módulos que são necessários pela aplicação. Se o jQuery for modularizado dessa forma, partes do jQuery que você não usa não serão compiladas em produção. Você não precisa recompilar manualmente seu jQuery toda vez que quiser incluir uma nova feature. Você também nunca precisa se preocupar sobre remover features do jQuery caso não as utilize mais. Em desenvolvimento, estes módulos devem estar disponíveis para você, mas não devem ser publicados em produção a menos que eles sejam necessários em sua aplicação.&lt;/p&gt;

&lt;p&gt;No jQuery 1.9, o &lt;a href=&#34;https://github.com/jquery/jquery&#34;&gt;código fonte&lt;/a&gt; já foi modularizado. A curto prazo, isso permitiu a criação de um &lt;a href=&#34;https://github.com/jquery/jquery#how-to-build-your-own-jquery&#34;&gt;script que constrói um jQuery customizado&lt;/a&gt;. &lt;a href=&#34;http://zeptojs.com/#modules&#34;&gt;Muitas&lt;/a&gt; &lt;a href=&#34;http://lodash.com/custom-builds&#34;&gt;bibliotecas&lt;/a&gt; já tem implementado este tipo de coisa. A longo prazo, entretanto, isso pode permitir que o uso em um carregador AMD-compliant.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;jQuery é uma biblioteca poderosa, bem testada e muito utilizada. Mesmo que ainda faça sentido incluir o jQuery na maioria das suas aplicações web, é importante entender que o DOM não é um lugar assustador. O jQuery pode te ajudar a desviar de bugs e complicações, mas não deve substituir nosso conhecimento ou habilidade para manipular o DOM de forma efetiva e significante.&lt;/p&gt;

&lt;p&gt;O que você acha sobre o futuro do jQuery? &lt;a href=&#34;http://twitter.com/davearel&#34;&gt;Me envie uma mensagem via twitter @davearel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atualização (27 de Fevereiro de 2014):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se você nunca considerou uma implementação modular de dependências usando uma biblioteca como o jQuery, você irá entender que isto não é simples.&lt;/p&gt;

&lt;p&gt;Especialmente dado ao tamanho do código fonte do jQuery. Se você está interessado em contribuir para a discussão sobre como arquitetar algo assim, fale agora: &lt;a href=&#34;https://gist.github.com/davearel/9254418&#34;&gt;https://gist.github.com/davearel/9254418&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Artigo traduzido por &lt;strong&gt;&lt;a href=&#34;http://medium.com/@diegoeis&#34;&gt;Diego Eis&lt;/a&gt;&lt;/strong&gt; e &lt;a href=&#34;https://tech.bellycard.com/blog/the-future-of-jquery/&#34;&gt;escrito originalmente em inglês&lt;/a&gt; pelo &lt;a href=&#34;https://tech.bellycard.com/team/dave-arel/&#34;&gt;Dave Arel&lt;/a&gt; para o blog &lt;a href=&#34;https://tech.bellycard.com/&#34;&gt;Belly&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Se encontrar algum erro ou tem uma sugestão para melhorar a tradução, por favor, &lt;a href=&#34;http://tableless.com.br/contato/&#34;&gt;nos avise&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>