<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Responsive Web Design Rwd on Tableless</title>
    <link>http://tableless.com.br/categories/responsive-web-design-rwd/index.xml</link>
    <description>Recent content in Responsive Web Design Rwd on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/categories/responsive-web-design-rwd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Entendendo Sistemas de Grid CSS do Zero</title>
      <link>http://tableless.com.br/entendendo-sistemas-de-grid-css-do-zero/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/entendendo-sistemas-de-grid-css-do-zero/</guid>
      <description>

&lt;p&gt;Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-1&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-1&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-1&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-1&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-1&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-1&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-1&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-1&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Quando resolvemos a fórmula, temos uma única coluna de largura 6.86666666667%. A partir daqui, podemos usar esse número para calcular as larguras das colunas restantes. A fórmula para isso é:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cw = (scw * cs) + (m * (cs – 1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;```Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-2&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-2&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-2&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-2&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-2&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-2&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-2&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-2&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-3&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-3&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-3&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-3&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-3&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-3&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-3&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-3&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Quando resolvemos a fórmula, temos uma única coluna de largura 6.86666666667%. A partir daqui, podemos usar esse número para calcular as larguras das colunas restantes. A fórmula para isso é:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cw = (scw * cs) + (m * (cs – 1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Aplicando essa fórmula para cada uma das 12 colunas resulta no CSS a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column-1 {
  width: 6.86666666667%;
}

.column-2 {
  width: 15.3333333333%;
}

.column-3 {
  width: 23.8%;
}

.column-4 {
  width: 32.2666666667%;
}

.column-5 {
  width: 40.7333333333%;
}

.column-6 {
  width: 49.2%;
}

.column-7 {
  width: 57.6666666667%;
}

.column-8 {
  width: 66.1333333333%;
}

.column-9 {
  width: 74.6%;
}

.column-10 {
  width: 83.0666666667%;
}

.column-11 {
  width: 91.5333333333%;
}

.column-12 {
  width: 100%;
}
&lt;/pre&gt;

&lt;h2 id=&#34;otimizando-para-dispositivos-móveis&#34;&gt;Otimizando para Dispositivos Móveis&lt;/h2&gt;

&lt;p&gt;Apesar do fato que o sistema de grid é responsivo, ele sozinho não pode ir tão longe. Para dispositivos com pequenas telas, tais como smartphones, a largura das colunas precisam se ajustar para permitir que o conteúdo que elas contêm ainda apareça legível e visualmente atraente. Consultas de mídia ajudam com isso:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media only screen and (max-width: 550px) {
  .column-1,
  .column-2,
  .column-3,
  .column-4,
  .column-5,
  .column-6,
  .column-7,
  .column-8,
  .column-9,
  .column-10,
  .column-11,
  .column-12 {
    width: auto;
    float: none;
  }

  .column + .column {
    margin-left: 0;
  }
}
&lt;/pre&gt;

&lt;p&gt;Aqui, estamos dizendo ao grid para permitir que cada coluna possa ocupar a largura total do seu &lt;em&gt;container&lt;/em&gt; para dispositivos com uma janela menor que 550px de largura. &lt;em&gt;Gutters&lt;/em&gt; já não são mais necessárias aqui, então nós as removemos.&lt;/p&gt;

&lt;p&gt;Como alternativa, você pode optar pela estratégia &lt;a href=&#34;http://www.sitepoint.com/making-case-mobile-first-designs/&#34; target=&#34;_blank&#34;&gt;mobile first&lt;/a&gt; que leva a abordagem oposta, aumentando para um layout de 12 colunas. Nesse caso, as colunas começam como uma largura total, depois estabelecemos as larguras das colunas e &lt;em&gt;floats&lt;/em&gt; para permitir que elas se alinhem horizontalmente quando a resolução da tela atinge um limite especificado.&lt;/p&gt;

&lt;p&gt;Esse é a abordagem preferida para o sistema de grid do &lt;a href=&#34;http://www.sitepoint.com/understanding-bootstrap-grid-system/&#34; target=&#34;_blank&#34;&gt;bootstrap&lt;/a&gt;, que não institui a largura das colunas até que a janela de exibição atinja uma largura mínima de 992px. Essa pode ser uma abordagem mais favorável para seu caso, e deve ser algo para analisar melhor quando avaliar um sistema de grid.&lt;/p&gt;

&lt;h2 id=&#34;juntando-tudo&#34;&gt;Juntando Tudo&lt;/h2&gt;

&lt;p&gt;Quando combinamos todos os conceitos e o CSS, podemos escrever uma estrutura de layout em HTML igual a:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;row&#34;&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&#34;row&#34;&amp;gt;
  &amp;lt;div class=&#34;column column-2&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-2&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Confira abaixo a demonstração no CodePen para ver todo o sistema de grid em ação, incluindo grid aninhados.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/SitePoint/pen/dPqqvN/&#34;&gt;Understanding CSS Grid Systems&lt;/a&gt; by SitePoint (&lt;a href=&#34;http://codepen.io/SitePoint&#34;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você também experimentar a &lt;a href=&#34;http://codepen.io/ryanmorr/full/zxRzyE/&#34; target=&#34;_blank&#34;&gt;demo em tela cheia&lt;/a&gt; para uma melhor impressão. Não se esqueça de brincar com as dimensões da tela para ver como o grid lida com várias resoluções.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Como você pode ver, não é preciso muito para montar um sistema de grid básico. A matemática é provavelmente a parte mais complexa. Apesar da simplicidade, o grid continua a ser uma poderosa e flexível ferramenta para layouts estruturais. Com os diversos conceitos que discutimos aqui, espero que você tenha uma melhor compreensão de como sistemas de grid funcionam. Isso deve ajudá-lo a avaliar diferentes sistemas de grid que se destacam, e escolher o melhor deles para o seu próximo projeto, ou até mesmo criar o seu próprio.&lt;/p&gt;

&lt;p&gt;Tradução: Tamiris Bonicenha&lt;/p&gt;

&lt;p&gt;Acesse o artigo original no &lt;a href=&#34;http://www.sitepoint.com/understanding-css-grid-systems/&#34; target=&#34;_blank&#34;&gt;SitePoint – &amp;#8220;Understanding CSS Grid Systems from the Ground Up&amp;#8221;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nth-child() e calc() – Uma proposta para o abandono de frameworks de grids responsivos</title>
      <link>http://tableless.com.br/nth-child-calc-responsivos/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/nth-child-calc-responsivos/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Apesar da adoção do _Tableless _para construção de layouts o conceito de tabela ainda persiste através de inúmeros &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Além da semântica, o conceito &lt;em&gt;Tableless&lt;/em&gt; prega, sempre que possível, levar a responsabilidade do layout para o CSS. O problema dos &lt;em&gt;frameworks&lt;/em&gt; CSS focados em &lt;em&gt;grids&lt;/em&gt; é que a especificação do layout continua dentro do HTML, descrita através de classes CSS, ancoradas diretamente aos elementos HTML, e de forma intrusiva, ou seja, os elementos &lt;em&gt;&lt;table&gt;&lt;/em&gt; antigamente utilizados foram substituídos por elementos &lt;em&gt;&lt;div class=&amp;#8221;col-&amp;#8220;&gt;&lt;/em&gt; para a criação do layout.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-49871 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/gridLayout.png&#34; alt=&#34;Exemplo de Grid Layout&#34; width=&#34;521&#34; height=&#34;354&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enquanto a especificação &amp;#8220;&lt;a href=&#34;http://www.w3.org/TR/css3-grid-layout/&#34; target=&#34;_blank&#34;&gt;CSS Grid Layout Module&lt;/a&gt;&amp;#8221; ainda está no forno, proponho uma alternativa simples aos &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos, através da dupla dinâmica &lt;em&gt;&lt;strong&gt;nth-child()&lt;/strong&gt;&lt;/em&gt; e &lt;em&gt;&lt;strong&gt;calc()&lt;/strong&gt;&lt;/em&gt; presentes no CSS3, e que são suportadas pelos navegadores modernos, inclusive o IE9 (veja mais opções de compatibilidade &lt;a href=&#34;http://caniuse.com/#search=CALC&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://caniuse.com/#search=nth-child&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;). Para um rápido entendimento destes recursos também confira estes artigos: &lt;a href=&#34;http://tableless.com.br/nth-child/&#34;&gt;http://tableless.com.br/nth-child/&lt;/a&gt; e &lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34;&gt;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;exemplo-de-formulário&#34;&gt;Exemplo de formulário&lt;/h2&gt;

&lt;p&gt;Antes de partimos para o CSS, sempre que possível, precisamos usar elementos HTML5 semânticos, atributos WAI-ARIA, entre outros padrões de acessibilidade. Para este exemplo, o uso dos elementos de entradas de dados seguirão as técnicas preconizadas pelo eMAG 3.1 (ver &lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34;&gt;http://emag.governoeletronico.gov.br/&lt;/a&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Para cada elemento de entrada de dados presente na estrutura &lt;em&gt;form -&amp;gt; fieldset&lt;/em&gt; o seguinte padrão será seguido:&lt;/p&gt;

&lt;pre&gt;&lt;span style=&#34;line-height: 1.5;&#34;&gt;&amp;lt;label&amp;gt;
    &amp;lt;span&amp;gt;XXX:&amp;lt;/span&amp;gt;
    &amp;lt;input type=&#34;text&#34; value=&#34;&#34;&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Agora podemos aplicar o seguinte CSS para todos os elementos &lt;em&gt;&lt;label&gt;&lt;/em&gt; presentes neste padrão.&lt;/p&gt;

&lt;pre&gt;form fieldset &amp;gt; label {
    display: block;
    float: left;
    width: calc(100% - 10px);
    height: 55px;
    margin-top: 10px;
    margin-right: 10px;
}
form fieldset label &amp;gt; input {
    float: left;
}
label &amp;gt; input {
    display: block;
    width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Por termos utilizado o &lt;em&gt;margin-right&lt;/em&gt; com 10px, este valor foi contabilizado na largura do &lt;em&gt;label&lt;/em&gt; (uso da função &lt;em&gt;calc&lt;/em&gt;) com a finalidade de que sua margem não ultrapasse os limites do contêiner. Isto foi feito para que possamos alterar o layout de uma coluna para múltiplas colunas diretamente pelo CSS. Com este estilo, cada campo de entrada de dados aparecerá disposto como uma lista, e se adaptará a largura do contêiner.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49865 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário&#34; width=&#34;658&#34; height=&#34;532&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O próximo passo é poder criar mais de uma &amp;#8220;coluna&amp;#8221;, para que o campo Código e Nome fiquem na mesma &amp;#8220;linha&amp;#8221; quando o tamanho da tela for grande. O campo Código terá uma largura fixa de 80px e o campo Nome preencherá o restante do espaço do contêiner descontando a largura do campo Código juntamente com a margem de 10px dos dois &lt;em&gt;labels&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49869 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário Responsivo&#34; width=&#34;789&#34; height=&#34;537&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com estes recursos podemos alterar o layout da página HTML diretamente pelo CSS sem que a estrutura do layout fique no próprio HTML. Além de criar colunas que se adaptam a largura do contêiner, é possível criar colunas com tamanhos fixos, evitando também o uso de classes CSS, que só é encorajado quando for realmente necessário.&lt;/p&gt;

&lt;p&gt;O código fonte completo e a &lt;em&gt;Demo&lt;/em&gt; deste exemplo encontra-se em &lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34;&gt;http://codepen.io/rogeriodegoiania/pen/GJQmzb&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tendências Web 2015 para desenvolvedores</title>
      <link>http://tableless.com.br/tendencias-web-2015-para-desenvolvedores/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/tendencias-web-2015-para-desenvolvedores/</guid>
      <description>

&lt;p&gt;O mundo dos desenvolvedores web está cada vez mais inovador e fantástico. Em 2015 teremos ferramentas mais qualificadas e conceitos que nos ajudarão na jornada de desenvolver um material super satisfatório. Pois não trará vantagens somente para nossos clientes, mas também nos poupará tempo, e para quem trabalha nessa área sabe que tempo é MUITO PRECIOSO.&lt;/p&gt;

&lt;h2 id=&#34;flat-design&#34;&gt;FLAT DESIGN&lt;/h2&gt;

&lt;p&gt;Sites com sombras, diversas fontes e cores para ressaltar o realismo da página ficou no passado, agora o que manda é a simplicidade. Design de empresas como Google, Twitter, Facebook e Windows 8 são exemplos fortíssimos de que isso deu certo e não vai sair de cena por muito tempo. Lembre-se: menos é mais!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/flat-design.png&#34;&gt;&lt;img class=&#34; size-full wp-image-48161 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/flat-design.png&#34; alt=&#34;flat-design&#34; width=&#34;730&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pense que interessante seria se essa moda aparecesse nos tempos de IE6, quando transparencia, bordas arredondadas e gradientes não funcionavam. Era só colocar um botão com cor chapada de fundo, letra branca e pronto. Funcionaria em todos os browsers. Flat to save the devs.&lt;/p&gt;

&lt;h2 id=&#34;motion-ui&#34;&gt;MOTION UI&lt;/h2&gt;

&lt;p&gt;A moderna forma de atrair o interesse dos usuários de forma leve e dinâmica está em alta. Frameworks te ajudam na missão de implementar mais animação em suas páginas sem fazer com que seu site fique pesado. Visite &lt;a href=&#34;http://foundation.zurb.com/apps/docs/#!/motion-ui&#34; target=&#34;_blank&#34;&gt;Foundation for APPs&lt;/a&gt; ou &lt;a href=&#34;http://daneden.github.io/animate.css/&#34; target=&#34;_blank&#34;&gt;Animate.css&lt;/a&gt; e veja os efeitos incríveis em ação.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/motion-ui.png&#34;&gt;&lt;img class=&#34; size-full wp-image-48162 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/motion-ui.png&#34; alt=&#34;motion-ui&#34; width=&#34;730&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/materialup-uma-colecao-de-conceitos-usando-material-design/&#34;&gt;Há um post aqui no Tableless&lt;/a&gt; que fala um pouco sobre as inspirações que o Material Design do Google teve em diversos designs.&lt;/p&gt;

&lt;h2 id=&#34;responsividade&#34;&gt;RESPONSIVIDADE&lt;/h2&gt;

&lt;p&gt;A preocupação em se adaptar a todos os dispositivos utilizados pelos usuários hoje em dia está ficando cada vez maior entre as empresas, por isso, para não perder mais tempo, utilize de uma ajudinha amiga como &lt;a href=&#34;http://getbootstrap.com/&#34; target=&#34;_blank&#34;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&#34;http://foundation.zurb.com/&#34; target=&#34;_blank&#34;&gt;Foundation&lt;/a&gt; e o novo &lt;del&gt;porém não menos interessante&lt;/del&gt; &lt;a href=&#34;http://semantic-ui.com/&#34; target=&#34;_blank&#34;&gt;Semantic UI&lt;/a&gt;. Todos os frameworks são simples e contam com ótimos tutoriais disponíveis no próprio site.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/design-responsivo.png&#34;&gt;&lt;img class=&#34; size-full wp-image-48163 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/design-responsivo.png&#34; alt=&#34;design-responsivo&#34; width=&#34;730&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;single-pages&#34;&gt;SINGLE PAGES&lt;/h2&gt;

&lt;p&gt;Já viu aqueles sites em que você tem todo conteúdo em uma só página? Pois é, as single pages estão entre as tendências web 2015 e com razão. Além de visualmente serem mais agradáveis, são super práticas para usuários que odeiam se perder em milhares de páginas só para achar tal conteúdo que havia se interessado. Essa tecnologia fica ainda mais legal quando aplicada em mobiles! Olha um &lt;a href=&#34;http://www.twitch.tv/year/2014&#34; target=&#34;_blank&#34;&gt;exemplo bem legal aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/single-page.png&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-48164&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/single-page.png&#34; alt=&#34;Single Pages&#34; width=&#34;730&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A ideia de Single Pages Application é bem interessante e cada vez mais há ferramentas que nos ajudam nesse trabalho. Veja por exemplo &lt;a href=&#34;http://sennajs.com/&#34;&gt;o caso do SennaJS&lt;/a&gt;, idealizado pelo nosso amigo Eduardo Lundgreen.&lt;/p&gt;

&lt;h2 id=&#34;vídeos&#34;&gt;VÍDEOS&lt;/h2&gt;

&lt;p&gt;Os vídeos estão tendo muita receptividade pelos usuários hoje em dia e podem facilmente conseguir mais atenção para seu site se você utilizá-lo como forma de apresentação de sua empresa ou produto, por exemplo. Além de ser rápido e prático, é um meio de comunicação muito mais esclarecedor e satisfatório para o usuário que ao assistir irá receber e entender todo o assunto tratado.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/videos.png&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-48165&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/videos.png&#34; alt=&#34;Vídeos&#34; width=&#34;730&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Há outras formas de uso de vídeos por meio dos designers. Dá uma olhada em sites como &lt;a href=&#34;http://www.dadaabstories.org/&#34;&gt;Dadaab&lt;/a&gt; ou &lt;a href=&#34;http://www.barrelny.com/recap/2012/&#34;&gt;Barrel&lt;/a&gt; que fazem uso bem criativo de vídeos como parte do design do site.&lt;/p&gt;

&lt;p&gt;Junte todas essas armas para montar o site dos sonhos de seu cliente. 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tamanho da tela e tamanho da janela com JavaScript</title>
      <link>http://tableless.com.br/tamanho-da-tela-e-tamanho-da-janela-com-js/</link>
      <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/tamanho-da-tela-e-tamanho-da-janela-com-js/</guid>
      <description>&lt;p&gt;Se você trabalha em um projeto que precisa ser em visto em todos os dispositivos, você precisará ir muito além das Media Queries. Um passo adiante será detectar o tamanho da tela do usuário e também o tamanho da janela usada pelo usuário.&lt;/p&gt;

&lt;p&gt;Note que os dois são bem diferentes. Enquanto o usuário está um desktop, ele pode modificar o tamanho da janela do browser e consequentemente isso irá alterar o breakpoint da página. Se você faz um layout responsivo, ele verá o layout se adaptando enquanto faz o redimensionamento da página. Embora ele esteja modificando o tamanho da janela, o tamanho da tela (baseada PPI &amp;#8211; Points Per Inch &amp;#8211; da tela) dele não é modificada.&lt;/p&gt;

&lt;p&gt;Você pode usar as duas ocasiões para fazer mudanças no layout ou no funcionamento da página de acordo com o tamanho da janela ou o tamanho da tela. Abaixo, veja um código bem básico, onde você consegue recuperar esses valores:&lt;/p&gt;

&lt;p&gt;Redimensionando a janela, os valores mudam e você conhece o tamanho da janela. Para que os valores da tela mudem, modifique a resolução do seu computador e faça um refresh na página. Perceba que aqui no Desktop, ele mostra a resolução que você colocou, que na verdade é uma emulação caso a tela tivesse uma quantidade de pontos por polegada menor do que ela realmente tem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/desktop-width-height.png&#34; alt=&#34;desktop-width-height&#34; width=&#34;1188&#34; height=&#34;762&#34; class=&#34;alignnone size-full wp-image-46914&#34; srcset=&#34;uploads/2015/02/desktop-width-height.png 1188w, uploads/2015/02/desktop-width-height-217x139.png 217w, uploads/2015/02/desktop-width-height-400x257.png 400w&#34; sizes=&#34;(max-width: 1188px) 100vw, 1188px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mas até aqui estamos testando isso em um Desktop. Quando testamos isso em um iPhone, que tem densidade de pixels diferente de desktops e toda aquela história, ele vai mostrar o valor real de PPI, que é o valor original da tela do iPhone, sem contar com o valor dobrado da tela retina. Nesse caso, em um iPhone 6, ficaria mais ou menos como a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/iphone-width-height.png&#34; alt=&#34;iphone-width-height&#34; width=&#34;675&#34; height=&#34;1135&#34; class=&#34;alignnone size-full wp-image-46912&#34; srcset=&#34;uploads/2015/02/iphone-width-height.png 675w, uploads/2015/02/iphone-width-height-83x139.png 83w, uploads/2015/02/iphone-width-height-400x673.png 400w&#34; sizes=&#34;(max-width: 675px) 100vw, 675px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora em um iPad Air:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/ipad-width-height.png&#34; alt=&#34;ipad-width-height&#34; width=&#34;880&#34; height=&#34;1158&#34; class=&#34;alignnone size-full wp-image-46913&#34; srcset=&#34;uploads/2015/02/ipad-width-height.png 880w, uploads/2015/02/ipad-width-height-106x139.png 106w, uploads/2015/02/ipad-width-height-400x526.png 400w&#34; sizes=&#34;(max-width: 880px) 100vw, 880px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como as janelas dos browsers em mobiles são sempre maximizadas, muito dificilmente elas serão muito menores que o tamanho da tela do aparelho.&lt;/p&gt;

&lt;p&gt;Tendo esses valores, você consegue pelo menos ter uma ideia do tamanho do dispositivo que o usuário tem usado. Pelo menos saber qual categoria ergonômica ele se encaixa e então fazer decisões de layout e funcionalidades mais adequadas ao projeto.&lt;/p&gt;

&lt;p&gt;As Media Queries do CSS funcionando se baseando no tamanho da janela do browser e não no tamanho da tela. Isso é importante você saber.&lt;/p&gt;

&lt;p&gt;Lembrando que aqui você não está detectando o dispositivo. Você não sabe se o cara está usando um iPhone ou um Motorola. Se ele está usando um iOS ou um Android. Mas, teoricamente, isso não precisa importar pra você, já que você faz websites se preocupando com o tamanho da tela e não qual o sistema operacional usado.&lt;/p&gt;

&lt;p&gt;Sugiro que você faça testes aí veja essas alterações comparando com os diversos dispositivos. Faz bem para não confundir as bolas quando você precisar desenhar algo específico ou resolver bugs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formulário responsivo com MailChimp</title>
      <link>http://tableless.com.br/formulario-responsivo-com-mailchimp/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/formulario-responsivo-com-mailchimp/</guid>
      <description>

&lt;p&gt;Há cada dia mais utilizamos serviços disponíveis na web que tem um plano básico e gratuito que permite integrações. Nos últimos meses tenho feito formulários com frequência usando uma abordagem bem simples. Vou mostrar agora como criar um formulário responsivo, integrando com MailChimp e usando jQuery Validate.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos criar o formulário da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;CREATE RESPONSIVE FORM WITH INTEGRATE MAILCHIMP&amp;lt;/h1&amp;gt;
  &amp;lt;form id=&#34;form-contact&#34; method=&#34;POST&#34; action=&#34;mailchimp-contact.php&#34;&amp;gt;
    &amp;lt;div class=&#34;input&#34;&amp;gt;
      &amp;lt;label for=&#34;name&#34;&amp;gt;Name&amp;lt;/label&amp;gt;
      &amp;lt;input type=&#34;text&#34; id=&#34;name&#34; name=&#34;name&#34; placeholder=&#34;Your name&#34; required&amp;gt;
    &amp;lt;/div&amp;gt;

    ...
    
    &amp;lt;div class=&#34;input txt&#34;&amp;gt;
      &amp;lt;label for=&#34;message&#34;&amp;gt;Message&amp;lt;/label&amp;gt;
      &amp;lt;textarea id=&#34;message&#34; name=&#34;message&#34; cols=&#34;10&#34; rows=&#34;5&#34; placeholder=&#34;Its message leaves&#34; required&amp;gt;&amp;lt;/textarea&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;buttons&#34;&amp;gt;
      &amp;lt;span class=&#34;form-message&#34;&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;input type=&#34;submit&#34; value=&#34;SEND&#34; /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/section&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-form-mailchimp/demo-only-elements.html&#34; target=&#34;_blank&#34; title=&#34;Ver demo sem style.&#34;&gt;Ver demo sem style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Para cada label e input foi adicionado uma &lt;code&gt;div.input&lt;/code&gt; para inserir uma formatação por grupo.&lt;/p&gt;

&lt;h3 id=&#34;o-form-está-centralizado-com-max-width&#34;&gt;O form está centralizado com max-width:&lt;/h3&gt;

&lt;p&gt;Por ser um elemento &amp;#8216;block&amp;#8217;, vamos definir o tamanho máximo que ele pode ter.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;form {
&amp;nbsp; margin: 0 auto;
&amp;nbsp; max-width: 850px;
&amp;nbsp; padding: 20px 10px;
&amp;nbsp; background-color: rgba(255,255,255,0.4)
}
&lt;/pre&gt;

&lt;h3 id=&#34;o-grupo-div-input-com-50-em-8216-width-8217-do-form&#34;&gt;O grupo div.input com 50% em &amp;#8216;width&amp;#8217; do form:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input {
  float: left;
  width: 48%;
  padding: 0 1% 20px;
  position: relative;
}

.input.txt { width: 98%; } /*textarea 100%*/
&lt;/pre&gt;

&lt;h3 id=&#34;os-labels&#34;&gt;Os labels:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input label {
  display: block;
  padding-bottom: 5px;
  color: #666;
}
&lt;/pre&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input label.error {
  position: absolute;
  right: 18px;
  top: 35px;
  color: #f00;
}&lt;/pre&gt;

&lt;p&gt;O label.error é gerado pelo jQuery validate e adicionado seguido dos campos.&lt;/p&gt;

&lt;h3 id=&#34;os-campos&#34;&gt;Os campos:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input input,
.input textarea {
  padding-top: 10px;
  padding-bottom: 9px;
  border: none;
  font-size: 16px;
  font-weight: 100;
  font-family: &#34;Helvetica Neue&#34;, Helvetica, Arial, sans-serif;
}

.input input {
  width: 94%;
  padding-left: 3%;
  padding-right: 3%;
}

.input textarea {
  width: 97%;
  padding-left: 1.5%;
  padding-right: 1.5%;
}&lt;/pre&gt;

&lt;p&gt;Formatamos os campos para ter 100% de tamanho do elemento pai &amp;#8216;div.input&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Sempre que redimensionar não haverá quebras, portanto, responsivo meu amigo.&lt;/p&gt;

&lt;h3 id=&#34;agora-um-capricho-para-resoluções-pequenas&#34;&gt;Agora um capricho para resoluções pequenas.&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 520px) {
  .input {
    width: 98%;
  }
}&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-form-mailchimp/demo-style-elements.html&#34; target=&#34;_blank&#34; title=&#34;Ver demo com style.&#34;&gt;Ver demo com style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-jquery-mailchimp&#34;&gt;O jQuery + MailChimp&lt;/h2&gt;

&lt;p&gt;Com o HTML e CSS prontos, vamos adicionar o JavaScript que é fácil. Como dependemos do jQuery e não podemos iniciar de qualquer forma, segue uma estrutura bem legal:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function(){
  var contact = function(){
    var init = function() {
      //initialize code
    };
    
&amp;nbsp;   //more functions

    return {init: init};
  }();

  //jQuery loaded
  $(document).ready(contact.init);
})();&lt;/pre&gt;

&lt;p&gt;Como sabemos exatamente qual função vai executar quando a jQuery carregar, adicionaremos o jQuery Validate no init:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var init = function() {
  $(&amp;#039;#form-contact&amp;#039;).validate({
    rules : {
      name: &#34;required&#34;,
      email: { required: true, email: true },
      phone: { required: true, minlength: 14 },
      company: &#34;required&#34;,
      message: &#34;required&#34;
    },
    messages: {
      name: &#34;*&#34;,
      email: { required: &#34;*&#34;, email: &#34;*&#34; },
      phone: { required: &#34;*&#34;, minlength: &#34;*&#34; },
      company: &#34;*&#34;,
      message: &#34;*&#34;
    }
  });
};&lt;/pre&gt;

&lt;p&gt;Agora que estamos validando todos os campos, que tal adicionar um ajax para deixar nosso formulário bem suave e uma função para exibir mensagens de sucesso ou erro, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var init = function() {
  $(&amp;#039;#form-contact&amp;#039;).validate({
    rules : {
      ...
    },
    messages: {
      ...
    },
    submitHandler: function(form) {
      var $form = $(form);

      var params = {
        name: $form.find(&amp;#039;#name&amp;#039;).val(),
        email: $form.find(&amp;#039;#email&amp;#039;).val(),
        phone: $form.find(&amp;#039;#phone&amp;#039;).val(),
        company: $form.find(&amp;#039;#company&amp;#039;).val(),
        message: $form.find(&amp;#039;#message&amp;#039;).val()
      };

      $.ajax({
        type: $form.attr(&amp;#039;method&amp;#039;),
        url: $form.attr(&amp;#039;action&amp;#039;),
        data: params,
        success: function( data ) {
          if(data == &#34;true&#34;) {
            $form.find(&amp;#039;.input input&amp;#039;).val(&#34;&#34;);
            $form.find(&amp;#039;.input textarea&amp;#039;).val(&#34;&#34;);
            setMessage(&#34;Mission accomplished. &amp;lt;strong&amp;gt;&#34;+ params.email +&#34;&amp;lt;/strong&amp;gt; was successfully added to list.&#34;, &#34;success&#34;);
          } else {
            setMessage(&#34;Mission failed. &amp;lt;strong&amp;gt;&#34;+ params.email +&#34;&amp;lt;/strong&amp;gt; not was added to list.&#34;, &#34;error&#34;);
          }
        },
        error: function( data ) {
          setMessage(&#34;Mission failed in connection. Try again.&#34;, &#34;error&#34;);
        }
      });

      return false;
    }
  });
};

var setMessage = function($message, $type) {
  $(&amp;#039;.form-message&amp;#039;).html($message).addClass($type);

  setTimeout(function(){
    $(&amp;#039;.form-message&amp;#039;).removeClass($type);
  }, 6000);
};
&lt;/pre&gt;

&lt;p&gt;Via &amp;#8216;submitHandler&amp;#8217; do &lt;a href=&#34;http://jQueryvalidation.org/&#34; target=&#34;_blank&#34;&gt;jQuery Validate&lt;/a&gt;, vamos disparar por ajax todos os dados preenchidos e travar o post do form com &amp;#8216;return false&amp;#8217; no final da função. Assim evitamos aquele redirecionamento de post.&lt;/p&gt;

&lt;h3 id=&#34;o-php&#34;&gt;O PHP&lt;/h3&gt;

&lt;p&gt;Como definimos com &amp;#8216;method&amp;#8217; e &amp;#8216;action&amp;#8217; para o nosso formulário, segue o código para resgatar os dados:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
    require_once &amp;#039;MCAPI.class.php&amp;#039;;
    $api = new MCAPI(&amp;#039;casiuach1293kajsc912319203cja23s-us9&amp;#039;);
    $merge_vars = array(&amp;#039;NAME&amp;#039;=&amp;gt;$_POST[&#34;name&#34;], &#39;PHONE&#39;=&amp;gt;$_POST[&#34;phone&#34;], &#39;COMPANY&#39;=&amp;gt;$_POST[&#34;company&#34;], &#39;MESSAGE&#39;=&amp;gt;$_POST[&#34;message&#34;]);
    
    // Submit subscriber data to MailChimp
    // For parameters doc, refer to: http://apidocs.mailchimp.com/api/1.3/listsubscribe.func.php
    $retval = $api-&amp;gt;listSubscribe( &amp;#039;12938asd98&amp;#039;, $_POST[&#34;email&#34;], $merge_vars, &amp;#039;html&amp;#039;, false, true );
    
    if ($api-&amp;gt;errorCode){
        echo &#34;false&#34;;
    } else {
        echo &#34;true&#34;;
    }
?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Dependemos da MCAPI.class que você pode verificar na &lt;a href=&#34;https://apidocs.mailchimp.com/api/example-code/&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt; ou baixar &lt;a href=&#34;https://codeload.github.com/sunarlim/mailchimp-subscribe/zip/master&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;, só lembrando que precisa adicionar sua API Key e List ID.&lt;/p&gt;

&lt;h2 id=&#34;pronto&#34;&gt;PRONTO&lt;/h2&gt;

&lt;p&gt;Nosso formulário é responsivo e integrado ao mailchimp.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://css4html.com.br/demos/responsive-form-mailchimp/&#34; target=&#34;_blank&#34; title=&#34;Veja como ficou o resultado final&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/palloi/responsive-form-mailchimp/&#34; target=&#34;_blank&#34; title=&#34;Veja o código completo no github&#34;&gt;Veja o c&amp;oacute;digo completo no github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simples modal com CSS responsivo</title>
      <link>http://tableless.com.br/simples-modal-com-css-responsivo/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/simples-modal-com-css-responsivo/</guid>
      <description>

&lt;p&gt;Continuando com os artigos, vamos utilizar novamente os seletores de css para exibir nosso modal.&lt;/p&gt;

&lt;p&gt;Se você chegou aqui e não viu os posts anteriores, para conhecer a estrutura inicial acesse os links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/header-responsivo-somente-com-css/&#34; target=&#34;_blank&#34;&gt;Header responsivo somente com css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/destaques-responsivos/&#34; target=&#34;_blank&#34;&gt;Destaques responsivos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;De uma maneira bem simples veja como preparar seu html e css.&lt;/p&gt;

&lt;h2 id=&#34;o-label&#34;&gt;O LABEL&lt;/h2&gt;

&lt;p&gt;Com os destaques responsivos, vamos adicionar abaixo da descrição um label que terá a função de marcar o checkbox e por css iremos exibir o modal.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
&amp;nbsp; &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img1&#34; name=&#34;highlights&#34; checked=&#34;checked&#34; /&amp;gt;
&amp;nbsp; &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;lt;label class=&#34;highlights-button&#34; for=&#34;modal-chaves&#34;&amp;gt;Ver fotos do Chaves&amp;lt;/label&amp;gt;
&amp;nbsp; &amp;lt;/div&amp;gt;
&amp;nbsp;&amp;nbsp;
&amp;nbsp; ...
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;h2 id=&#34;o-css-do-botão&#34;&gt;O CSS DO BOTÃO&lt;/h2&gt;

&lt;p&gt;Vamos formatar o label para ser o nosso botão, lembrando que sempre precisamos usar a propriedade &amp;#8220;for&amp;#8221; para marcar o checkbox.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-button {
  display: inline-block;
  padding: 10px 15px 8px;
  cursor: pointer;
  border-radius: 3px;
  border: 1px solid #ccc;
  background-color: #ececec;
  -webkit-transition: background-color 300ms ease-in-out, border-color 300ms ease-in-out;
  transition: background-color 300ms ease-in-out, border-color 300ms ease-in-out;
}
&lt;/pre&gt;

&lt;p&gt;Adicionando o hover:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-button:hover {
  border: 1px solid #ececec;
  background-color: #ccc;
}
&lt;/pre&gt;

&lt;h2 id=&#34;o-html-do-modal&#34;&gt;O HTML DO MODAL&lt;/h2&gt;

&lt;p&gt;Para um melhor resultado vamos adicionar html antes do &amp;#8220;body&amp;#8221;, mas se quiser aplicar dentro da section sem problemas. Ao aplicar &amp;#8220;position: fixed&amp;#8221; o elemento ignora o &amp;#8220;position&amp;#8221; do pai e respeita o tamanho da janela.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;input type=&#34;checkbox&#34; id=&#34;modal_chaves&#34; /&amp;gt;
&amp;lt;div class=&#34;modal&#34;&amp;gt;
  &amp;lt;div class=&#34;modal-content&#34;&amp;gt;
    &amp;lt;h4&amp;gt;Foto Grande do Chaves&amp;lt;/h4&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-fotos-raras-4.jpg&#34; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;label class=&#34;modal-close&#34; for=&#34;modal_chaves&#34;&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;No resultado final poderá ver as modais aplicados dentro e fora da section.&lt;/p&gt;

&lt;h2 id=&#34;o-css-do-modal&#34;&gt;O CSS DO MODAL&lt;/h2&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.modal {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  opacity: 0;
  visibility: hidden;
  -webkit-transition: all 0.5s 0.5s ease-in-out;
  transition: all 0.5s 0.5s ease-in-out;
}

.modal-content {
  padding: 10px;
  max-width: 600px;
  min-width: 360px;
  max-height: 85%;
  overflow: auto;
  position: absolute;
  top: 5%;
  left: 50%;
  z-index: 2;
  opacity: 0;
  border-radius: 3px;
  background: #fff;
  -webkit-transform: translate(-50%, 0);
  -ms-transform: translate(-50%, 0);
  transform: translate(-50%, 0);
  -webkit-transition: all 0.5s ease-in-out;
  transition: all 0.5s ease-in-out;
}

.modal-content img {
  display: block;
  width: 100%;
  margin: 10px 0 0;
}

.modal-content p {
  padding-top: 10px;
  text-align: justify;
}&lt;/pre&gt;

&lt;p&gt;Agora formatando a cortina e o botão de fechar que é o label que colocamos depois do conteúdo do modal.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.modal-close {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: rgba(0,0,0,0.5);
}

.modal-close:after {
  content: &#34;X&#34;;
  float: right;
  margin: 5px 5px 0 0;
  width: 30px;
  height: 30px;
  position: relative;
  z-index: 3;
  text-align: center;
  line-height: 30px;
  cursor: pointer;
  background-color: rgba(255,255,255,0.8);
  border-radius: 20px;
  box-shadow: 0 0 3px #000;
}&lt;/pre&gt;

&lt;p&gt;Agora vamos esconder o checkbox e fazer nosso modal aparecer com &amp;#8220;:checked&amp;#8221; do css3.&lt;/p&gt;

&lt;p&gt;Um pequeno truque ao usar fixed e 50% para top, faz que o checkbox sempre fique no meio da janela evitando rolar a página ao ser selecionado. Se realizar um teste usando o inspect removendo o top: 50% e clicar no terceiro botão irá simular a rolagem.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;input[id*=&#34;modal_&#34;] {
  position: fixed;
  left: -9999px;
  top: 50%;
  opacity: 0;
}

input[id*=&#34;modal_&#34;]:checked + div.modal {
  opacity: 1;
  visibility: visible;
  -webkit-transition-delay: 0s;
  -ms-transition-delay: 0s;
  transition-delay: 0s;
}

input[id*=&#34;modal_&#34;]:checked + div.modal .modal-content {
  opacity: 1;
  -webkit-transform: translate(-50%, 0);
  -ms-transform: translate(-50%, 0);
  transform: translate(-50%, 0);
  -webkit-transition-delay: 0.5s;
  -ms-transition-delay: 0.5s;
  transition-delay: 0.5s;
}&lt;/pre&gt;

&lt;p&gt;Praticamente nosso css já está responsivo, mas vamos adaptar para resoluções menores que 768px.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
  .modal-content {
    padding: 10px 5%;
    min-width: 88%;
  }
}&lt;/pre&gt;

&lt;h2 id=&#34;pronto&#34;&gt;PRONTO&lt;/h2&gt;

&lt;p&gt;Temos um modal responsivo e seu conteúdo pode ser adaptado para qualquer tamanho, desde que faça isso acontecer.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Veja como ficou o resultado final&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/responsive-modal.html&#34; target=&#34;_blank&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;código completo no github&#34; href=&#34;https://github.com/palloi/responsive-header-only-css&#34; target=&#34;_blank&#34;&gt;Veja o código completo no github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;CONCLUINDO&lt;/h2&gt;

&lt;p&gt;Podemos aplicar de várias formas e uma delas é usando o &amp;#8220;:target&amp;#8221;, porém quando temos uma tela muito grande e ao fechar precisamos adicionar o &amp;#8220;#&amp;#8221;, isso faz que a página role para o topo.&lt;/p&gt;

&lt;p&gt;Agora com sua imaginação pode fazer diversas animações para exibir seu modal.&lt;/p&gt;

&lt;p&gt;Espero ter ajudado com a criação de modais só com css.&lt;/p&gt;

&lt;p&gt;Obrigado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Destaques responsivos</title>
      <link>http://tableless.com.br/destaques-responsivos/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/destaques-responsivos/</guid>
      <description>

&lt;p&gt;Hoje criaremos três destaques com um comportamento totalmente responsivo.&lt;/p&gt;

&lt;p&gt;Com um crescimento das SPAs e seguindo o mesmo conceito do artigo anterior, vou passar agora de uma forma simples de como usar, o input radio para transformar nossos destaques em galeria navegável.&lt;/p&gt;

&lt;h2 id=&#34;aproveitando&#34;&gt;Aproveitando&lt;/h2&gt;

&lt;p&gt;Como já temos um header responsivo, vamos continuar com a mesma estrutura até o final dos artigos só com css e html. Se você ainda não viu como criar um &lt;a href=&#34;http://tableless.com.br/header-responsivo-somente-com-css/&#34; title=&#34;Header responsivo somente com css&#34; target=&#34;_blank&#34;&gt;header responsivo, clique aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos iniciar realocando a foto do Chaves para um novo formato:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-2.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Pensando na Paty&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-3.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Quero tanto esse sanduiche iche iche&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Temos um simples html para 3 itens, deixei os nome das classes mais compreensível e semântico, observado pelo amigo Shankar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-header-only-css/demo-only-elements.html&#34; target=&#34;_blank&#34;&gt;Ver demo sem style&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Sempre pensando no responsivo, vamos deixar nossos itens em % para 3 colunas seguindo dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-item {
  float: left;
  margin: 0 0 0 2%;
  width: 32%;
}

.highlights-item:first-of-type {
  margin-left: 0;
}

.highlights-item img {
  display: block;
  width: 100%;
  margin: 0 0 5px;
}

.highlights-item p {
  font-size: 14px;
  text-align: center;
}
&lt;/pre&gt;

&lt;p&gt;Para cada item apliquei 32% em width + 2% em margin-left, se multiplicarmos por 3 a soma é 102% que passa os 100% representado pelo elemento pai. Por estourar o tamanho do pai o terceiro item sempre cai.&lt;/p&gt;

&lt;p&gt;Então selecionamos o primeiro item para zerar o margin usando o seletor &amp;#8220;:first-of-type&amp;#8221;, por que mais adiante vamos adicionar mais elementos e já evitamos quebrar o css se caso usássemos os &amp;#8220;first-child&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-header-only-css/demo-basic-highlights.html&#34; target=&#34;_blank&#34;&gt;Ver demo com style&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-responsivo&#34;&gt;O RESPONSIVO&lt;/h2&gt;

&lt;p&gt;Já apresentada a forma de como usar os seletores, agora vamos adicionar antes de cada item um input radio, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img1&#34; name=&#34;highlights&#34; checked=&#34;checked&#34; /&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  ...
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;o-css-para-transformar&#34;&gt;O CSS PARA TRANSFORMAR&lt;/h2&gt;

&lt;p&gt;Com o html simples para 3 colunas, vamos transformar em uma galeria suave com o &amp;#8216;media screen&amp;#8217;, &amp;#8216;transition&amp;#8217; e &amp;#8216;transform&amp;#8217;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
  .highlights-item {
    width: 100%;
    margin-left: 0;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    visibility: hidden;
    -webkit-transition: all 500ms ease-in-out;
    transition: all 500ms ease-in-out;
    -webkit-transform: scale(0.9);
    -ms-transform: scale(0.9);
    transform: scale(0.9);
  }
}
&lt;/pre&gt;

&lt;p&gt;Nesse css deixei todos os itens com &amp;#8216;position absolute&amp;#8217;, mas isso faz que todo o conteúdo abaixo dele suba ocupando seu espaço. Mas como teremos um ativo vamos resolver logo abaixo.&lt;/p&gt;

&lt;p&gt;Importante lembrar que sempre precisamos de um radio marcado com &amp;#8216;checked&amp;#8217;, quando responder ao responsivo teremos sempre um ativo. Para mostrar o item ativo vamos adicionar as seguintes linhas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
   /*checked*/
  .highlights input:checked + div {
    position: relative;
    opacity: 1;
    visibility: visible;
    z-index: 1;
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
&lt;/pre&gt;

&lt;p&gt;O item que estiver ativo, recebe o &amp;#8216;position relative&amp;#8217; para bloquear sua área e outras propriedades para exibir suavemente.&lt;/p&gt;

&lt;p&gt;Como os type&amp;#8217;s dos input&amp;#8217;s são &amp;#8216;radio&amp;#8217;, teremos somente um &amp;#8216;:checked&amp;#8217; por grupo &amp;#8216;name&amp;#8217;.&lt;/p&gt;

&lt;h2 id=&#34;navegação-com-label&#34;&gt;NAVEGAÇÃO COM LABEL&lt;/h2&gt;

&lt;p&gt;Para selecionar cada radio, precisamos relacionar cada label usando o for e vamos adicionar o seguinte html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  ...
  &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img3&#34; name=&#34;highlights&#34; /&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    ....
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-buttons&#34;&amp;gt;
    &amp;lt;label for=&#34;radio-img1&#34;&amp;gt;Image 1&amp;lt;/label&amp;gt;
    &amp;lt;label for=&#34;radio-img2&#34;&amp;gt;Image 2&amp;lt;/label&amp;gt;
    &amp;lt;label for=&#34;radio-img3&#34;&amp;gt;Image 3&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Por padrão defino &amp;#8216;display none&amp;#8217; para os botões e com resoluções menores 768px mudamos para &amp;#8216;block&amp;#8217; para exibir.&lt;/p&gt;

&lt;h2 id=&#34;label-e-seu-css&#34;&gt;LABEL E SEU CSS&lt;/h2&gt;

&lt;p&gt;Agora que adicionamos os label&amp;#8217;s que tem a missão dos botões, vamos inserir uma formatação bem simples.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-buttons {
  display: none;
  clear: both;
  text-align: center;
}

.highlights-buttons label {
  display: inline-block;
  width: 15px;
  height: 15px;
  margin: 0 10px; 
  border-radius: 10px;
  background-color: #ccc;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  text-indent: -9999px;
  -webkit-transition: background-color 300ms ease-in-out;
  transition: background-color 300ms ease-in-out;
}
/*exibindo os botões*/
@media screen and (max-width: 767px) {
  .highlights-buttons {
    display: block;
  }
}
&lt;/pre&gt;

&lt;p&gt;Estamos falando de css puro e sempre precisamos definir o que vai ser feito, veja como aplicar o label ativo nessa estrutura que criamos:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights input:nth-of-type(1):checked ~ .highlights-buttons label:nth-child(1),
.highlights input:nth-of-type(2):checked ~ .highlights-buttons label:nth-child(2),
.highlights input:nth-of-type(3):checked ~ .highlights-buttons label:nth-child(3) {
  background-color: #000;
}
&lt;/pre&gt;

&lt;p&gt;Para evitar a repetição manual a cada novo item, se você usa SASS ou LESS vai tirar de letra com alguma função.&lt;/p&gt;

&lt;h2 id=&#34;e-pronto&#34;&gt;E PRONTO&lt;/h2&gt;

&lt;p&gt;Mais uma vez com poucos elementos e css, conseguimos deixar nossos destaques em uma galeria navegável e responsivo.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Veja como ficou o resultado final&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/responsive-highlights.html&#34; target=&#34;_blank&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Código completo no github&#34; href=&#34;https://github.com/palloi/responsive-header-only-css&#34; target=&#34;_blank&#34;&gt;Veja o código completo no github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;CONCLUINDO&lt;/h2&gt;

&lt;p&gt;Existe diversas maneiras de aplicar no css e quantidades de itens, espero que todos possam aproveitar um pouco do que foi apresentado.&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Header responsivo somente com css</title>
      <link>http://tableless.com.br/header-responsivo-somente-com-css/</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/header-responsivo-somente-com-css/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/header-responsive-only-css.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/header-responsive-only-css.png&#34; alt=&#34;header-responsive-only-css&#34; class=&#34;alignnone size-full wp-image-46175&#34; srcset=&#34;uploads/2014/12/header-responsive-only-css.png 750w, uploads/2014/12/header-responsive-only-css-265x106.png 265w, uploads/2014/12/header-responsive-only-css-400x160.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A cada novo projeto queremos alcançar o máximo de usuários, não importa se o dispositivo seja grande ou pequeno, tem que funcionar.&lt;/p&gt;

&lt;p&gt;Com uma abordagem simples e rápida, esse tutorial vai te fazer pensar antes de querer usar o bootstrap só para ter o menu responsivo, claro que ele tem suas vantagens mas procuro sempre desenvolver do zero.&lt;/p&gt;

&lt;p&gt;Estarei criando uma serie de tutoriais abordando o assunto e espero que gostem do meu primeiro artigo.&lt;/p&gt;

&lt;h2 id=&#34;valendo&#34;&gt;Valendo!!!&lt;/h2&gt;

&lt;p&gt;Hoje em dia quando o cliente diz que o site é responsivo, quem aqui pensa no bootstrap?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;#8220;Fazer menu responsivo é só com bootstrap&amp;#8221; ou &amp;#8220;vamos precisar de javascript.&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nada contra o bootstrap, mas prefiro o &lt;a title=&#34;Locawebstyle&#34; href=&#34;http://locaweb.github.io/locawebstyle/&#34; target=&#34;_blank&#34;&gt;Locawebstyle&lt;/a&gt; que está lindo e o javascript é maravilhoso.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos criar primeiro nosso html com header simples:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;h1 class=&#34;fL&#34;&amp;gt;
    &amp;lt;a href=&#34;#&#34; title=&#34;A TURMA DO CHAVES&#34;&amp;gt;A TURMA DO CHAVES&amp;lt;/a&amp;gt;
  &amp;lt;/h1&amp;gt;

  &amp;lt;nav class=&#34;fR&#34;&amp;gt;
    &amp;lt;ul class=&#34;l2&#34;&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Chaves&#34; title=&#34;Chaves&#34;&amp;gt;Chaves&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Chiquinha&#34; title=&#34;Chiquinha&#34;&amp;gt;Chiquinha&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Seu-Madruga&#34; title=&#34;Seu Madruga&#34;&amp;gt;Seu Madruga&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Quico&#34; title=&#34;Quico&#34;&amp;gt;Quico&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/pre&gt;

&lt;p&gt;​Agora com o nosso html pronto, vamos fazer o primeiro teste olhando nosso html puro e formatar usando poucas linhas de css.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Ver demo sem style.&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/demo-only-elements.html&#34; target=&#34;_blank&#34;&gt;Ver demo sem style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Como nosso header ficará sempre fixo no topo, vamos formatar da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;header {
  min-height: 60px;
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  border-bottom: 1px solid #ccc;
  background: #ECECEC;
  z-index: 2;
}
&lt;/pre&gt;

&lt;p&gt;Agora com o header formatado, o segundo teste é redimensionar o navegador para perceber que o header sempre acompanha e ao diminuir muito tem quebra por falta de espaço.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Ver demo com style.&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/demo-basic-header.html&#34; target=&#34;_blank&#34;&gt;Ver demo com style.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Montamos um header simples e funcional, com mais 3 elementos e CSS teremos um header simples e responsivo.&lt;/p&gt;

&lt;p&gt;Esses elementos são dois label&amp;#8217;s e um checkbox, com o selector &amp;#8216;~&amp;#8217; do css3 vamos transformar o header.&lt;/p&gt;

&lt;h2 id=&#34;começando-o-responsivo&#34;&gt;Começando o responsivo&lt;/h2&gt;

&lt;p&gt;Vamos adicionar os elementos antes da nav e o html fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;h1 class=&#34;fL&#34;&amp;gt;
    &amp;lt;a href=&#34;#&#34; title=&#34;A TURMA DO CHAVES&#34;&amp;gt;A TURMA DO CHAVES&amp;lt;/a&amp;gt;
  &amp;lt;/h1&amp;gt;
  
  &amp;lt;input type=&#34;checkbox&#34; id=&#34;control-nav&#34; /&amp;gt;
  &amp;lt;label for=&#34;control-nav&#34; class=&#34;control-nav&#34;&amp;gt;&amp;lt;/label&amp;gt;
  &amp;lt;label for=&#34;control-nav&#34; class=&#34;control-nav-close&#34;&amp;gt;&amp;lt;/label&amp;gt;

  &amp;lt;nav class=&#34;fR&#34;&amp;gt;
    &amp;lt;ul class=&#34;l2&#34;&amp;gt;
      ...
    &amp;lt;/ul&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Nesse ponto o checkbox tem o papel de substituir o javascript.&lt;/p&gt;

&lt;p&gt;Conseguimos também por css saber se o elemento está marcado com o famoso &amp;#8220;:checked&amp;#8221; que todos já usaram com jQuery.&lt;/p&gt;

&lt;h2 id=&#34;seu-projeto-suas-medidas&#34;&gt;Seu projeto, suas medidas&lt;/h2&gt;

&lt;p&gt;Para nosso exemplo adicionei no head:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, height=device-height, initial-scale=1, maximum-scale=1, user-scalable=no&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e no css:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px)
&lt;/pre&gt;

&lt;p&gt;Quando redimensionar o navegador menor que 768px, a formatação do header vai se comportar de outra maneira e já escondida utilizando transform:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
  header .control-nav {
    position: absolute;
    right: 20px;
    top: 20px;
    display: block;
    width: 30px;
    padding: 5px 0;
    border: solid #333;
    border-width: 3px 0;
    z-index: 2;
    cursor: pointer;
  }

  header .control-nav:before {
    content: &#34;&#34;;
    display: block;
    height: 3px;
    background: #333;
  }

  header .control-nav-close {
    position: fixed;
    right: 0;
    top: 0;
    bottom: 0;
    left: 0;
    display: block;
    z-index: 1;
    background: rgba(0,0,0,0.4);
    -webkit-transition: all 500ms ease;
    transition: all 500ms ease;
    -webkit-transform: translate(100%, 0);
    -ms-transform: translate(100%, 0);
    transform: translate(100%, 0);
  }

  header nav {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    width: 250px;
    border-left: 1px solid #ccc;
    background: #fff;
    overflow-x: auto;
    z-index: 2;
    -webkit-transition: all 500ms ease;
    transition: all 500ms ease;
    -webkit-transform: translate(100%, 0);
    -ms-transform: translate(100%, 0);
    transform: translate(100%, 0);
  }
}
&lt;/pre&gt;

&lt;p&gt;Formatei o &amp;#8220;label .control-nav&amp;#8221; para ser o botão responsivo, o &amp;#8220;label .control-nav-close&amp;#8221; para ser a cortina bloqueando o fundo e o &amp;#8216;nav&amp;#8217; para ficar fixo e redimensionável.&lt;/p&gt;

&lt;h2 id=&#34;agora-o-pulo-do-gato&#34;&gt;Agora o pulo do gato&lt;/h2&gt;

&lt;p&gt;Utilizando dos seletores do CSS3 que são os &amp;#8216;:checked&amp;#8217; e &amp;#8216;~&amp;#8217;, conseguimos formatar elementos de acordo com a necessidade, &lt;a title=&#34;Veja a documentação&#34; href=&#34;http://www.w3.org/TR/css3-selectors/#selectors&#34; target=&#34;_blank&#34;&gt;veja a documentação&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sendo mais claro, com o seletor &amp;#8216;~&amp;#8217; você consegue selecionar elemento do mesmo pai declarado depois dele.&lt;/p&gt;

&lt;p&gt;Ao marcar o input, no css usando o transform vamos exibir suavemente o menu, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;#control-nav:checked ~ .control-nav-close {
  -webkit-transform: translate(0, 0);
  -ms-transform: translate(0, 0);
  transform: translate(0, 0);
}

#control-nav:checked ~ nav {
  -webkit-transform: translate(0, 0);
  -ms-transform: translate(0, 0);
  transform: translate(0, 0);
}
&lt;/pre&gt;

&lt;h2 id=&#34;pronto&#34;&gt;Pronto&lt;/h2&gt;

&lt;p&gt;Agora o menu é responsivo e bem simples com poucos elementos.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Veja como ficou o resultado final&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/&#34; target=&#34;_blank&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;código completo no github&#34; href=&#34;https://github.com/palloi/responsive-header-only-css&#34; target=&#34;_blank&#34;&gt;Veja o código completo no github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sobre desenvolvimento multi-device</title>
      <link>http://tableless.com.br/sobre-desenvolvimento-multi-device/</link>
      <pubDate>Mon, 30 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/sobre-desenvolvimento-multi-device/</guid>
      <description>

&lt;p&gt;Hoje existem uma série de dispositivos misturados em pelo menos três categorias que conhecemos: smartphones, tablets e desktops. Mas onde começa um e termina outro? Um smartphone de seis ou sete polegadas é um tablet? Se você acha que não existem smartphones deste tamanho, pesquise sobre o Fonepad da Asus para ter um exemplo. Dividir os aparelhos pelo tamanho da tela ou por features já não é mais tão seguro como antes. Então como podemos desenhar uma linha para delimitar onde inicia e onde termina um smartphone e começa um tablet? Ou um tablet e um notebook ou um desktop?&lt;/p&gt;

&lt;p&gt;Todos os meses a indústria cria novas definições de aparelhos. Veja o caso dos Phablets, que são os smartphones gigantes, como o Sony Z Ultra e o Nokia Lumia 1520. Há também os híbridos, que o Windows 8 tem trazido à tona e que estão se popularizando cada vez mais. É por isso que é muito difícil fazer uma classificação por features ou por tamanhos. Tudo é muito parecido.&lt;/p&gt;

&lt;p&gt;Sem dúvida é importante que você entenda o dispositivo que o seu cliente tem usado, mas mais importante do que isso é entender o contexto em que o cliente usa esses dispositivos. Não é muito difícil imaginar como é esse comportamento. Pense em como &lt;strong&gt;você&lt;/strong&gt; usa seus gadgets. Pense exatamente nas situações e lugares onde você usa seu smartphone, o seu tablet e quando você decide usar seu PC. Perceba que há um padrão de comportamento bastante comum entre todos os usuários destes dispositivos. Há uma questão ergonômica envolvida, onde decidimos qual dos dispositivos usar.&lt;/p&gt;

&lt;h2 id=&#34;classificação-ergonômica&#34;&gt;Classificação ergonômica&lt;/h2&gt;

&lt;p&gt;A primeira vez que vi essa maneira de diferenciar os dispositivos foi em uma palestra do Luke Wroblewski. E achei que faz bastante sentido essa divisão, por enquanto, por que a ergonomia dos aparelhos é algo que não muda muito. A classificação é a seguinte:&lt;/p&gt;

&lt;p&gt;Os aparelhos que você consegue usar com apenas uma mão, em pé, em lugares apertados, no ônibus, metro e etc, ficam no grupo &lt;strong&gt;palm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Aparelhos que geralmente são usados em lugares mais confortáveis, principalmente em casa, em um sofá ou na cama, que normalmente precisam das duas mãos para serem manuseados, ficam no grupo &lt;strong&gt;lap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora os aparelhos grandes, que normalmente ficam &amp;#8220;presos&amp;#8221; a uma mesa, em um ambiente controlado, sem muita perturbação e que geralmente é onde o usuário tem um nível de foco bem alto, são colocados no grupo &lt;strong&gt;desk&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Essa classificação é muito mais amigável e sabemos que não vai mudar daqui um ou dois anos por causa de um novo aparelho maluco que possa surgir. Isso também permite planejar o produto para uma continuidade mais previsível de tamanhos de telas.&lt;/p&gt;

&lt;p&gt;Mas há outros pontos que precisam ser levados em consideração. Embora eles sejam classificados por este fator ergonômico, como é a interação com cada dispositivo?&lt;/p&gt;

&lt;h2 id=&#34;classificação-via-interação&#34;&gt;Classificação via interação&lt;/h2&gt;

&lt;p&gt;As interações mais comuns existentes hoje são touch e teclado/mouse. Há interações que fogem desse padrão, que ainda são bem incomuns como as feitas com o Kinect ou até o Leap Motion.&lt;/p&gt;

&lt;p&gt;Mas ainda sim não é seguro traçar uma linha dividindo os dispositivos com essas interações. Há o caso dos notebooks híbridos e aqueles tablets que podemos conectar um teclado e um mouse.&lt;/p&gt;

&lt;p&gt;Há uma mistura nessa classificação e isso te coloca em um cenário onde o usuário vai usar sua interface com um mouse ou o próprio dedo em qualquer aparelho. Não há bala de prata aqui, mas ainda assim você &lt;strong&gt;não precisa fazer duas interfaces&lt;/strong&gt; para cada tipo de interação. Isso é caro, dá trabalho e sua equipe vai pirar antes do fim do projeto.&lt;/p&gt;

&lt;h2 id=&#34;desenhando-e-desenvolvendo-uma-vez&#34;&gt;Desenhando e desenvolvendo uma vez&lt;/h2&gt;

&lt;p&gt;Produzir algo para todos os dispositivos e prevendo todas as circunstancias pode ser algo bem fácil de fazer. Mas isso é uma maneira nova e bem diferente de fazer tudo o que você já sabe. Você vai continuar desenhando uma interface que envolve todas as possibilidades. Aqui vão 5 premissas básicas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Trabalhe pensando em Mobile First&lt;/li&gt;
&lt;li&gt;Tenha em mente a continuidade dos tamanhos de telas&lt;/li&gt;
&lt;li&gt;Pense em um futuro onde todos os dispositivos serão de alta resolução&lt;/li&gt;
&lt;li&gt;Otimize para touch&lt;/li&gt;
&lt;li&gt;Suporte cursores e teclados&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Essas premissas precisam ser seguidas no processo de desenvolvimento todo, mas as áreas de ux/design e front-end tem um papel mais crítico no caminho. Há muita discussão antes de digitar uma linha de código. Nas experiências que tenho passado, depois dessas grandes discussões, a taxa de retrabalho e refatoração de código é bem pequena.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O futuro chegou: O elemento picture</title>
      <link>http://tableless.com.br/o-futuro-chegou-o-elemento-picture/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-futuro-chegou-o-elemento-picture/</guid>
      <description>

&lt;p&gt;O título é muito tentador, não é? Então, eu apenas estou completando o que a &lt;a href=&#34;http://tableless.com.br/author/daniguerrato/&#34;&gt;Dani Guerrato&lt;/a&gt; disse nesse artigo sobre &lt;a href=&#34;http://tableless.com.br/imagens-responsivas-de-alta-performance/&#34;&gt;Imagens Responsivas (Elemento Picture)&lt;/a&gt;. O &amp;#8220;futuro&amp;#8221;, agora, é nosso querido presente.&lt;/p&gt;

&lt;p&gt;No dia 04/06/2014 o site &lt;a href=&#34;http://alistapart.com/blog/post/testing-responsive-images/&#34;&gt;A List Apart postou um artigo&lt;/a&gt; falando sobre o elemento &lt;em&gt;picture&lt;/em&gt; que era estudado há um bom tempo e foi &lt;strong&gt;finalmente&lt;/strong&gt; implementado para testes no Google Chrome Canary (Browser para testes das mais novas coisas que inventam). E, como ressalva, outros browsers, como o &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=870022&#34;&gt;Firefox&lt;/a&gt;, já estão atrás de adicionar no seu ambiente de testes.&lt;/p&gt;

&lt;h2 id=&#34;o-grande-problema-da-atual-imagem-responsiva&#34;&gt;O grande problema da atual imagem responsiva&lt;/h2&gt;

&lt;p&gt;Antes dessa grande notícia sobre o &lt;code&gt;picture&lt;/code&gt;, outras &amp;#8220;soluções&amp;#8221; eram usadas por desenvolvedores pelo mundo à fora. Uma delas é o famoso e básico &lt;code&gt;max-width: 100%;&lt;/code&gt;. No começo, acharam que era a melhor solução, só esqueceram de lembrar que ele apenas adaptava o tamanho de uma imagem que já era grande, ou seja, o visual ficava bacana, mas o tamanho da requisição ainda era do tamanho nativo da imagem. Por mais que ela estivesse aparecendo bonita, sem quebrar o layout, um usuário que acessava pelo celular ainda carrega aquela imagem de dimensão 800&amp;#215;600.&lt;/p&gt;

&lt;p&gt;Mas, o pessoal não desanimou, e após se deparar com o problema a cima, foi proposto o grande &lt;a href=&#34;https://github.com/scottjehl/picturefill&#34;&gt;picturefill&lt;/a&gt;, que é basicamente uma cópia fiel ao &lt;code&gt;picture&lt;/code&gt;, só que usa uma muleta: Javascript.&lt;/p&gt;

&lt;p&gt;Particularmente dizendo, essa foi a melhor solução encontrada, já que praticamente simulava o nativo &lt;code&gt;picture&lt;/code&gt; de cima em baixo. Porém, muitos ainda reclamavam (por algum motivo) sobre ter que forçar um Javascript para fazer funcionar, sendo que o próprio era levíssimo.&lt;/p&gt;

&lt;h2 id=&#34;a-introdução-ao-picture&#34;&gt;A introdução ao picture&lt;/h2&gt;

&lt;p&gt;O picture foi a solução mais plausível, semântica e dentro dos &amp;#8220;web standards&amp;#8221; proposto pela comunidade. Com o &lt;a href=&#34;https://gist.github.com/Wilto/547b88c657b511fb1dc5&#34;&gt;grande apoio de todos&lt;/a&gt;, conseguiram criar um &lt;a href=&#34;http://www.w3.org/TR/html-picture-element/&#34;&gt;rascunho na própria W3&lt;/a&gt; para futuras discussões sobre o mesmo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mas então, o que há de tão bom nisso?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Esse novo elemento nós dá a &amp;#8220;simples&amp;#8221; opção de escolher qual imagem é mais adequada para cada tamanho de tela que acessar o site. Seja uma TV, Desktop, Smartphone, Tablet, Kindle ou qualquer outra coisa que conseguirmos usar.&lt;/p&gt;

&lt;p&gt;Na prática, faremos algo mais ou menos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture&amp;gt;
   &amp;lt;source media=&#34;(min-width: 500px)&#34; src=&#34;grande.jpg&#34;&amp;gt;
   &amp;lt;source media=&#34;(min-width: 250px)&#34; src=&#34;medio.jpg&#34;&amp;gt;
   &amp;lt;source src=&#34;pequena.jpg&#34;&amp;gt;
   &amp;lt;img src=&#34;pequena.jpg&#34; alt=&#34;&#34;&amp;gt;
   &amp;lt;p&amp;gt;Textos&amp;lt;/p&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Dentro do elemento picture, inserimos o source com os devidos tamanhos a serem &amp;#8220;verificados&amp;#8221; e assim carregar a imagem certa para aquela tela. Pense nisso como uma media querie inline para imagens :). Porém, como alguns navegadores &lt;del&gt;ie&lt;/del&gt; podem não suportar o elemento picture, colocamos um fallback com o antigo elemento img, assim a imagem ainda aparecerá, mesmo sendo num navegador de dinossauros.&lt;/p&gt;

&lt;p&gt;Outra opção também será usar o atributo &lt;code&gt;srcset&lt;/code&gt;, onde é definido várias imagens para cada media, e assim, o navegador &amp;#8220;escolhe&amp;#8221; a melhor imagem para exibir. A adaptação fica mais ou menos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture&amp;gt;
   &amp;lt;source media=&#34;(min-width: 500px)&#34; srcset=&#34;grande-1.jpg 1x, grande-2.jpg 2x&#34;&amp;gt;
   &amp;lt;source media=&#34;(min-width: 250px)&#34; srcset=&#34;medio-1.jpg 1x, medio-2.jpg 2x&#34;&amp;gt;
   &amp;lt;source srcset=&#34;pequena-1.jpg 1x, pequena-2.jpg 2x&#34;&amp;gt;
   &amp;lt;img src=&#34;pequena-1.jpg&#34; alt=&#34;&#34;&amp;gt;
   &amp;lt;p&amp;gt;Textos&amp;lt;/p&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O legal do srcset, é que com a ajuda do autor e do próprio navegador, a escolha da imagem fica &amp;#8220;inteligente&amp;#8221;. O user-agent analisa a conexão do usuário, questões de experiência de usuário, preferências do usuário entre outras coisas.&lt;/p&gt;

&lt;h2 id=&#34;colocando-em-prática&#34;&gt;Colocando em prática&lt;/h2&gt;

&lt;p&gt;No post do A List Apart, ele ensinam como podemos fazer os testes no elemento picture. Você basicamente tem que:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ter o &lt;a href=&#34;http://www.google.com/intl/en/chrome/browser/canary.html&#34;&gt;Chrome Canary&lt;/a&gt; instalado.&lt;/li&gt;
&lt;li&gt;Apos adquirir o navegador, coloque isso na barra de endereço: &lt;code&gt;chrome://flags/#enable-experimental-web-platform-features&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Clique em &lt;em&gt;enable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Reinicie o navegador.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Após seguir esses passos, entre no Chrome Canary e visite o &lt;a href=&#34;http://www.reidark.com.br/picture.html&#34;&gt;teste que eu fiz do elemento picture já funcionando&lt;/a&gt;. Para testar é simples, vai redimensionando o navegador e dando refresh na página, a imagem vai mudar de acordo com o tamanho da tela. O legal é, caso você tente entrar num navegador normal, vai aparecer a imagem &amp;#8220;Fallback&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Faça o teste você também, é bom já ir pegando as &amp;#8220;manhas&amp;#8221;.&lt;/p&gt;

&lt;h2 id=&#34;permanecendo-com-os-pés-no-chão&#34;&gt;Permanecendo com os pés no chão&lt;/h2&gt;

&lt;p&gt;É muito legal saber que a comunidade conseguiu tudo isso, mas não vamos nos apressar demais. Ainda está em fase de testes, porém &lt;a href=&#34;https://github.com/yoavweiss/Blink/issues&#34;&gt;vamos apoiar e ajudar&lt;/a&gt; ao máximo essa nova fase.&lt;/p&gt;

&lt;p&gt;Queria mostrar que, com a ajuda de todos, conseguiram implementar uma nova funcionalidade ao html extremamente essencial. Agora é questão de tempo para os navegadores mais novos irem experimentando e levando a ideia cada vez mais adiante.&lt;/p&gt;

&lt;h2 id=&#34;levante-a-bandeira&#34;&gt;Levante a bandeira&lt;/h2&gt;

&lt;p&gt;Bem amigos, creio que agora seja uma hora importante para toda a comunidade. Queria vir mostrar que o picture não é mais um simples &amp;#8220;rascunho&amp;#8221; e sim uma importante funcionalidade que será implementando de acordo com o tempo.&lt;/p&gt;

&lt;p&gt;A notícia sobre os testes com o picture foi extremamente excitante, por isso espero que possamos discutir aqui nos comentários o futuro disso.&lt;/p&gt;

&lt;p&gt;Deixarei alguns links úteis, caso queiram ver:&lt;/p&gt;

&lt;p&gt;Post on A List Apart: &lt;a href=&#34;http://alistapart.com/blog/post/testing-responsive-images/&#34;&gt;Testing Responsive Images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Issues about picture and bugs: &lt;a href=&#34;https://github.com/yoavweiss/Blink/issues&#34;&gt;Issues on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Picture on W3: &lt;a href=&#34;http://www.w3.org/TR/html-picture-element/&#34;&gt;The picture element&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ResponsiveImages.org: &lt;a href=&#34;http://responsiveimages.org/&#34;&gt;About picture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É isso ai galera, abraços!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RWD é fácil/difícil – Anotações Dan Mall – An Event Apart 2014</title>
      <link>http://tableless.com.br/rwd-ainda-e-facildificil-anotacoes-dan-mall-event-apart-2014/</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/rwd-ainda-e-facildificil-anotacoes-dan-mall-event-apart-2014/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;danielmall.com

&lt;ul&gt;
&lt;li&gt;Henry Ford moveu as pessoas que cuidavam da montagem do motor para mais perto umas das outras, assim ele reduziu custos e usou poucos trabalhadores, mais bem preparados e bem pagos, para fazer bem as coisas.&lt;/li&gt;
&lt;li&gt;Waterfall (fluxo linear) é ruim. Não é paralelo. É muito engessado.&lt;/li&gt;
&lt;li&gt;Muitas empresas tem equipes no modelo de montagem em linha. Um processo típico waterfall consistem em pequenas partes, isoladas: você finaliza uma tarefa e corre para próxima. Hoje, o processo de design precisa ser mais interativo porque nós temos múltiplas telas e dispositivos.&lt;/li&gt;
&lt;li&gt;Use um framework para atestar a qualidade dos seus sistemas não processos.&lt;/li&gt;
&lt;li&gt;Um framework tem restrições, não regras. É como um jogo de futebol: tem 90 minutos e um campo pré-determinado, mas o que acontece nesses 90 minutos e no campo sempre é uma surpresa.&lt;/li&gt;
&lt;li&gt;UX, Designers e desenvolvedores não devem competir entre si. Eles precisam cooperar. Não existe uma tarefa de design, ou uma tarefa do desenvolvedor, existe apenas UMA tarefa, que envolve todas as áreas para ser cumprida.&lt;/li&gt;
&lt;li&gt;O envolvimento das áreas são temperadas durante os processos.&lt;/li&gt;
&lt;li&gt;Crie pontos de foco: comece e termine os projetos em um mesmo lugar. Kick-offs são bons para iniciar os pontos focais. Repita as fases, comprima isso em pequenas tarefas e objetivos.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;modern-web-design-process&#34;&gt;Modern Web design process:&lt;/h2&gt;

&lt;h3 id=&#34;1-plain&#34;&gt;1. Plain&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pesquisa&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;É necessário pesquisar e entender o que funciona e o que não funciona.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trabalhar com Hipoteses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quando você trabalha com hipóteses você consegue respostas mais rápido. Você viaja em visões diferentes de um mesmo problema.&lt;/p&gt;

&lt;p&gt;Tenha uma visão do que o produto será. Compare esta visão com as pesquisas que faz.&lt;/p&gt;

&lt;h3 id=&#34;2-inventory&#34;&gt;2. Inventory&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Inventário de conteúdo&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Livro &amp;#8211; The Elements of Content Statrategy&lt;/li&gt;
&lt;li&gt;Você precisa trabalhar com a possibilidade de formatos no conteúdo: listas, parágrafos, títulos, citações e etc.&lt;/li&gt;
&lt;li&gt;Faça um mapa do conteúdo do site. Para que serve cada página? Qual o tipo de conteúdo deve haver em cada página?&lt;/li&gt;
&lt;li&gt;Uma atitude normal que envolve o Web Design é mostrar para as pessoas como seus sites irão aparecer em dispositivos específicos. Em vez disso, mostre como o site poderá se comportar em diversas telas. Isso é mais flexível.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Performance Budgets&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faça um inventário dos sites competidores.&lt;/li&gt;
&lt;li&gt;Compare a performance de cada um.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pattern Inventory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faça uma lista dos átomos (elementos e módulos do site)&lt;/li&gt;
&lt;li&gt;Organize isso em organismos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Visual Inventory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Normalmente designers tem questões sobre cores, tipografia, conceitos, metáforas. São perguntas normais na hora da produção.&lt;/li&gt;
&lt;li&gt;Tenha uma inventário visual do cliente e veja se as partes combinam, se elas trabalham juntas, se elas se conversam. Fazendo assim você consegue entender se algo precisa mudar para trabalhar melhor seu layout.&lt;/li&gt;
&lt;li&gt;As cores serão flat? Saturadas, Monocromatico?&lt;/li&gt;
&lt;li&gt;O Conceito será mais narrativa, será um caso de estudo direcionado?&lt;/li&gt;
&lt;li&gt;O tom precisa ser mais profissional? Mais engraçado? Mais básico?&lt;/li&gt;
&lt;li&gt;Comece com as fonts: sempre comece com a tipografia. Em telas pequenas, muitos dos modelos visuais podem ter problemas críticos de font.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-sketch&#34;&gt;3. Sketch&lt;/h3&gt;

&lt;p&gt;Explore ideias de modo rápido e rascunhado&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content reference wireframees&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Livro &amp;#8211; Responsive Design Workkflow &amp;#8211; Stephen Way&lt;/li&gt;
&lt;li&gt;liste as coisas que precisam estar na página. Depois organize blocos em uma página, dando prioridades para essas coisas Lembre-se que nem sempre o primeiro é o mais importante ou precisa ser maior que outras áreas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Element Collages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transform frases poderosas em ancoras visuais.&lt;/li&gt;
&lt;li&gt;Desenhe elementos e comece a colocá-los em uma mesma página no photoshop e veja como eles se comportam.&lt;/li&gt;
&lt;li&gt;Crie entregáveis que permitam revelar partes do processo de design para os clientes.&lt;/li&gt;
&lt;li&gt;É óbvio que isso não será um website. Mas você consegue ver como pode ser um website vendo a combinação dos elementos e como eles se comportam juntos.&lt;/li&gt;
&lt;li&gt;Para que o cliente não entenda que isso é um website, faça uma espécie de cartilha horizontal, mostrando todos os elementos e opções alternativas de cores e formas.&lt;/li&gt;
&lt;li&gt;&amp;#8220;Element collages are like giving your client a peek at all those hidden layers&amp;#8221; Paul Lloyd&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prototypes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protótipos de funcionalidades devem resolver um problema, específico, e só aquele problema.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;assemble&#34;&gt;Assemble&lt;/h3&gt;

&lt;p&gt;Colocando tudo junto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Presets&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Um template é como um preset (conjunto de &amp;#8220;configurações&amp;#8221; já preparado) é a junção de módulos e organismos. Princípio do Design Atomico&lt;/li&gt;
&lt;li&gt;Fazer presets ajuda a criar templates modulares e fáceis de manter.&lt;/li&gt;
&lt;li&gt;Responsive Design não é difícil mas traz muitos desafios que sempre estavam lá: performance, workflows, accessibility, benefícios para o negócio.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Design Responsivo na prática 2: do layout ao HTML</title>
      <link>http://tableless.com.br/design-responsivo-na-pratica-2-layout-ao-html/</link>
      <pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/design-responsivo-na-pratica-2-layout-ao-html/</guid>
      <description>

&lt;p&gt;Há um tempinho atrás eu escrevi aqui no Tableless um artigo chamado &lt;a href=&#34;http://tableless.com.br/design-responsivo-na-pratica-do-rascunho-ao-digita/&#34; title=&#34;Design Responsivo na prática: do rascunho ao digital&#34;&gt;Design Responsivo na Prática &amp;#8211; Do Rascunho ao Digital&lt;/a&gt;. A abordagem na época foi mais voltada para os designers, que estavam carentes de conteúdo bacana sobre o assunto. Mas, no entanto, todavia, algumas pessoas comentaram que gostariam de ver o desenvolvimento do dito cujo do layout criado passo-a-passo ou ao menos uma demo. Como eu não poderia deixar de atender os devs também, é justamente isto que vou fazer hoje. Portanto, pegue seu cafézinho pois hoje é dia de codar! 🙂&lt;/p&gt;

&lt;h2 id=&#34;hora-da-revisão&#34;&gt;Hora da Revisão&lt;/h2&gt;

&lt;p&gt;Não vou perder tempo aqui falando o que é design responsivo (conjunto de técnicas para melhorar a experiência do usuário independente do dispositivo que ele esteja utilizando), quais são as principais características de um site responsivo (um único conteúdo em uma única URL em um único código) ou por que você deve utilizar (são tantas que este parênteses seria gigante). Mas, como este artigo é mão na massa mesmo, antes de começar tenham certeza de entender os três pilares básicos do RWD (Responsive Web Design, que abrasileiramos carinhosamente para Design Responsivo).&lt;/p&gt;

&lt;p&gt;Quais são?&lt;/p&gt;

&lt;p&gt;&amp;#8230;&lt;/p&gt;

&lt;p&gt;&amp;#8230;&lt;/p&gt;

&lt;p&gt;&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler&lt;/strong&gt;: fundação flexível, imagens adaptáveis e media queries. Bem, se você conseguiu lembrar todos os três de memória e está aí resmungando consigo mesmo ganhou um passe &amp;#8220;pule a revisão&amp;#8221;: vá direto para a prática. Se não conseguiu lembrar, sem problemas. Vamos refrescar a memória!&lt;/p&gt;

&lt;h3 id=&#34;1-fundação-flexível&#34;&gt;1. Fundação Flexível&lt;/h3&gt;

&lt;p&gt;Este é o esqueleto básico do layout. A fundação pode ser construída através de um sistema de grid fluído ou na unha combinando medidas relativas e um pouquinho de matemática. Como gostamos de desafios, vou ensinar por aqui a segunda opção.&lt;/p&gt;

&lt;h4 id=&#34;quase-tudo-é-relativo&#34;&gt;(Quase) tudo é relativo&lt;/h4&gt;

&lt;p&gt;Para que o seu site possa se adaptar a múltiplos dispositivos e toda aquela ladainha que vocês já estão cansadinhos de saber é preciso colocar um pouco de lado os pixels. Note bem: colocar de lado, não jogar fora! Você ainda vai utilizá-los para definir alturas fixas e para definir, se for determinado no layout, um container inicial com uma largura máxima.&lt;/p&gt;

&lt;p&gt;Para todo o resto conheça agora seus novos melhores amigos: % e EM.&lt;/p&gt;

&lt;p&gt;(Existem também algumas outras medidas responsivas super bacanas como REM, VW, VH e FR. Mas vamos nos concentrar no básico.)&lt;/p&gt;

&lt;h4 id=&#34;o-que-diabos-é-em&#34;&gt;O que diabos é EM?&lt;/h4&gt;

&lt;p&gt;EM ou quadratim é uma medida relativa que nasceu na tipografia. 1 EM era originalmente correspondente ao tamanho da letra M maiúscula de uma determinada fonte. Isto era útil lá naquela época em que os tipógrafos utilizavam blocos de madeira ou metal para diagramar impressos, afinal, através desta letra eles teriam uma &amp;#8220;chave&amp;#8221; para todos as outras.&lt;/p&gt;

&lt;p&gt;Já em se tratando de CSS, 1 EM é correspondente ao valor de font-size, que, por padrão do browser é em média 16px. E isto é bacana para a gente por que é um tamanho dinâmico. Ou seja, vamos supor que o seu usuário possua alguma deficiência de visão e precise aumentar e diminuir o tamanho do texto… Como pixel é uma medida fixa é impossível fazer isto de maneira proporcional, sem distorções ou quebras no layout. Já o EM é super proporcional. É uma questão de usabilidade.&lt;/p&gt;

&lt;h4 id=&#34;conversão-de-px-para-em&#34;&gt;Conversão de PX para EM&lt;/h4&gt;

&lt;p&gt;Como fazer contas em base 16 é meio chatinho podemos usar um truque de CSS para facilitar a conversão de pixels para EM.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
   font-size: 62.5%;
}
&lt;/pre&gt;

&lt;p&gt;Isto significa que alteramos o valor da fonte padrão de 16px para 10px. Desta forma, 12px passa a equivaler a 1.2em, 14px fica equivalente a 1.4em, etc.&lt;/p&gt;

&lt;p&gt;Lembre-se que 1 EM é relativo ao font-size. Então uma vez que você altere este valor dentro de um article, por exemplo, todos os elementos filhos também serão alterados.&lt;/p&gt;

&lt;h4 id=&#34;conversão-de-px-para&#34;&gt;Conversão de PX para %&lt;/h4&gt;

&lt;p&gt;Para construir a tal da fundação flexível é preciso seguir uma formula estrutural básica: objeto : contexto = resultado.&lt;/p&gt;

&lt;p&gt;Não fez o menor sentido? É, para mim também não fez a primeira vez que eu li. Vamos adiantar um pouquinho a prática e pensar no seguinte: temos uma div de largura 1128px. Dentro dela uma coluna com 264px de largura. A coluna é, portantom filha do container. Então vamos pegar o valor em px da coluna (objeto = 264px) e dividir pelo valor em pixel do elemento pai (contexto = 1128px). O resultado deu 0,23404255319149. Agora basta andar duas casas para a esquerda com a virgula e acrescentar um ponto que temos o valor 23.404255319149. E esta é a correspondência da nossa coluna em porcentagem: 23.404255319149%. Este número é realmente grande e a tentação é grande para chamar de 23% e acabar com a história. Mas, se você arredondar, uma hora a soma vai quebrar. Computadores são bem mais exatos que a gente. Eles sabem lidar bem com matemática&amp;#8230;&lt;/p&gt;

&lt;p&gt;Enfim, design responsivo é repetir esta continha a exaustão, meus caros. Usar um sistema de Grid ou Framework pronto é mais fácil? Muito! Como usar um elevador é mais fácil do que subir vários lances de escadas de um prédio a pé. Mas o dia que o nosso prédio metafórico pegar fogo saber COMO subir as tais das escadas é um conhecimento bem útil para salvar sua pele, certo? O mesmo vale para grids e frameworks. São ferramentas legais, mas tenha certeza que você sabe se virar sem elas. Pode ser que caia no seu colo um projeto onde, por uma incompatibilidade de linguagens ou escolha das outras pessoas envolvidas, você não possa usar um sistema de Grid pronto. Vai por mim. É melhor aprender a fazer na unha primeiro. Depois não diga que eu não avisei…&lt;/p&gt;

&lt;h3 id=&#34;2-imagens-adaptáveis&#34;&gt;2. Imagens adaptáveis&lt;/h3&gt;

&lt;p&gt;Já que vamos trabalhar com porcentagens precisamos garantir que as imagens não vão se distorcer, certo? Então podemos acrescentar o seguinte código CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;img {
   max-width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Isto significa que o tamanho final da imagem no browser nunca vai ultrapassar o tamanho original dela. Mas, para isto funcionar, é necessário sempre envelopar as imagens em um container. Pode ser um figure, uma div, enfim, vai dá sua escolha para aquele contexto.&lt;/p&gt;

&lt;h3 id=&#34;3-consulta-de-mídia&#34;&gt;3. Consulta de mídia&lt;/h3&gt;

&lt;p&gt;O terceiro e último passo da nossa revisão é consulta de mídia ou media queries. Estes chuchuzinhos do CSS3 servem para identificar qual é o tipo, resolução e densidade do dispositivo e tornar a nossa vida mais fácil.&lt;/p&gt;

&lt;p&gt;Para isto basta utilizar a regrinha @media combinada com parâmetros como min-width, max-width, min-height, max-height, aspect ratio, etc. e operadores como and, only e not.&lt;/p&gt;

&lt;p&gt;Vamos supor que você queira trabalhar apenas com telas de largura máxima 1024px. O media querie ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 1024px) {
   /*estilos*/
}
&lt;/pre&gt;

&lt;p&gt;A tradução disto de CSS para português seria &amp;#8220;tipo de mídia: tela E largura máxima: 1024px&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Este tema sozinho daria um artigo inteiro. Na verdade já deu! Então, no melhor estilo escolha sua própria aventura:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Se você tem dúvidas a respeito do funcionamento da consulta de mídia de uma lida em &lt;a href=&#34;http://blog.popupdesign.com.br/design-responsivo-iii-media-queries-e-compatibilidade/&#34; title=&#34;Design Responsivo III – Media Queries e Compatibilidade&#34;&gt;Design Responsivo III – Media Queries e Compatibilidade&lt;/a&gt; escrito pela autora que vos fala.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Se você entendeu tudo desta explicação relâmpago e quer simplesmente ver mais exemplos de media queries dê uma olhadinha em &lt;a href=&#34;http://css-tricks.com/logic-in-media-queries/&#34; title=&#34;Logic in media queries&#34;&gt;Logic in media queries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Se você já entendeu tudo e não precisa de mais exemplos siga em frente. 🙂&lt;/p&gt;

&lt;h3 id=&#34;round-bonus-8211-viewport&#34;&gt;Round Bonus &amp;#8211; Viewport&lt;/h3&gt;

&lt;p&gt;Precisamos dizer para todos os dispositivos que a escala inicial do nosso layout é equivalente ao tamanho do dispositivo. Se não fizermos isto, alguns aparelhos móveis vão redimensionar o layout por conta própria e o design responsivo só vai funcionar no desktop! Para isto vamos manipular a metatag viewport. Cole isto no head do seu documento&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Quer saber mais sobre viewport? O artigo &lt;a href=&#34;http://blog.popupdesign.com.br/desenvolvimento-responsivo-e-viewport/&#34; title=&#34;Desenvolvimento Responsivo &amp;amp; Viewport&#34;&gt;Desenvolvimento Responsivo e Viewport&lt;/a&gt; é super completo.&lt;/p&gt;

&lt;p&gt;Fim da revisão!&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Hora de colocar a mão no código!&lt;/p&gt;

&lt;p&gt;Eu pessoalmente acredito ser mais fácil construir todo o HTML para depois desenvolver o CSS. Mas esta é uma preferência pessoal e não vou ficar aqui cagando regra. Vou manter a estrutura bem simples para nos concentrarmos no CSS. Vamos relembrar o layout que construímos juntos no artigo anterior.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-42216&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/04/layout-demo.jpg&#34; alt=&#34;Demo Layout Responsivo&#34; width=&#34;800&#34; height=&#34;844&#34; srcset=&#34;uploads/2014/04/layout-demo.jpg 800w, uploads/2014/04/layout-demo-400x422.jpg 400w&#34; sizes=&#34;(max-width: 800px) 100vw, 800px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos dividir este HTML em cinco estruturas básicas.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Uma div com a classe container envolvendo todo o layout;&lt;/p&gt;

&lt;p&gt;&amp;#8211; Um cabeçalho com a classe header;&lt;/p&gt;

&lt;p&gt;&amp;#8211; Uma div &amp;#8220;hero&amp;#8221; com a classe banner;&lt;/p&gt;

&lt;p&gt;&amp;#8211; Quatro blocos de texto e imagem com a classe coluna;&lt;/p&gt;

&lt;p&gt;&amp;#8211; Um rodapé com a classe footer.&lt;/p&gt;

&lt;p&gt;Até aqui não tem segredo nenhum. É um HTML normalzinho. Você pode fazer o download deste HTML no meu &lt;a href=&#34;https://github.com/daniguerrato/design-responsivo-demo&#34; title=&#34;Demo&#34;&gt;repositório do GitHub&lt;/a&gt; e acompanhar passo-a-passo.&lt;/p&gt;

&lt;p&gt;Note que todas as imagens estão dentro de outros elementos (div ou figure).&lt;/p&gt;

&lt;h2 id=&#34;o-css-desktop&#34;&gt;O CSS [Desktop]&lt;/h2&gt;

&lt;p&gt;Para facilitar vou especificar todas as medidas em pixel na versão desktop. Vamos a elas:&lt;/p&gt;

&lt;p&gt;Container &amp;#8211; 1128px&lt;/p&gt;

&lt;p&gt;Logotipo &amp;#8211; 234px x 36px&lt;/p&gt;

&lt;p&gt;Menu &amp;#8211; maximo 840px&lt;/p&gt;

&lt;p&gt;Banner &amp;#8211; 1128px x 450px&lt;/p&gt;

&lt;p&gt;Caixa de texto &amp;#8211; 480px&lt;/p&gt;

&lt;p&gt;Colunas de texto &amp;#8211; 264px&lt;/p&gt;

&lt;p&gt;Fotos &amp;#8211; 264px x 218px&lt;/p&gt;

&lt;p&gt;Margens &amp;#8211; 24px&lt;/p&gt;

&lt;p&gt;Rodapé &amp;#8211; 1128px&lt;/p&gt;

&lt;p&gt;Primeiro vamos centralizar e determinar a largura máxima do container no CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container {
   max-width: 1128px;
   margin: 0 auto;
}
&lt;/pre&gt;

&lt;h3 id=&#34;clearfix&#34;&gt;Clearfix&lt;/h3&gt;

&lt;p&gt;Esta é uma técnica utilizada para conter os floats e evitar que elementos entrem em colapso. Funciona basicamente adicionando um espaço vazio antes e depois dos elementos e dando um &amp;#8220;clear&amp;#8221; nos dois lados. Tudo isto sem precisar escrever marcação adicional. Como em design responsivo estaremos utilizando muito floats é útil conhecer. Vamos aplicar esta classe ao container do nosso layout para que ele possa conter todas as divs.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.clearfix:before,
.clearfix:after {
   content: &#34; &#34;;
   display: table;
}

.clearfix:after {
   clear: both;
}

.clearfix {
   *zoom: 1;
}
&lt;/pre&gt;

&lt;h3 id=&#34;proporção&#34;&gt;Proporção&lt;/h3&gt;

&lt;p&gt;A seguir vamos garantir que todas as imagens, videos e conteúdos embedados fiquem com a largura máxima de 100% do tamanho original.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;img,
picture,
video,
embed {
   max-width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Aqui cabe uma observação. Como no nosso mock-up final as imagens em smartphones ocuparão o tamanho de uma coluna eu preferi utilizar um tamanho proporcionalmente maior (500x413px). Assim nenhuma imagem irá estourar a resolução nos smartphones.&lt;/p&gt;

&lt;h3 id=&#34;border-box&#34;&gt;Border-box&lt;/h3&gt;

&lt;p&gt;Outro truque bacana de CSS para design responsivo é o box-sizing border box acompanhado do seletor *. Basicamente esta regra diz que todos os elementos agora levarão em conta apenas a largura e altura determinada, sem somar a este valor a borda e o padding. Ou seja, uma coisa a menos para nos preocuparmos.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;*, *:before, *:after {
   -webkit-box-sizing: border-box;
   -moz-box-sizing: border-box;
   box-sizing: border-box;
}
&lt;/pre&gt;

&lt;h3 id=&#34;o-header&#34;&gt;O Header&lt;/h3&gt;

&lt;p&gt;A seguir vamos especificar o tamanho do header. Este é bem fácil: 100%!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.header {
   width: 100%;
   height: 48px;
   margin-top: 3.6em;
   margin-bottom: 3.6em;
}
&lt;/pre&gt;

&lt;p&gt;Eu dei a ele também uma altura fixa (48px) e especifiquei margens utilizando a medida EM. A minha intenção aqui foi criar uma margem dinâmica que ficasse em um tamanho bacana em relação ao texto em qualquer resolução. Por isto utilizei EM ao invés de px.&lt;/p&gt;

&lt;p&gt;Dentro deste header temos um logotipo e um menu. Lembra da formulinha? Objeto : Contexto = Resultado. Então 234 : 1128 = 0,20744680851064. Andando duas casas para direita temos 20,744680851064. Este é o valor em porcentagem do logotipo. Eu gosto de deixar comentado o valor original em pixels para facilitar caso for preciso recalcular os elementos.&lt;/p&gt;

&lt;p&gt;Ah, fique atento para substituir a virgula por ponto no CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.logo {
   width: 20.744680851064%; /*234px / 1128px */
   float: left;
}
&lt;/pre&gt;

&lt;p&gt;O menu ficará flutuando a direita e a largura máxima &amp;#8220;segura&amp;#8221; é 840px.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.menu {
   width: 74.468085106383%; /*840px / 1128px */
   float: right;
}
&lt;/pre&gt;

&lt;p&gt;Coloquei também alguns elementos de estilo dos links e texto. Mas isto você já sabe fazer, certo? 😉&lt;/p&gt;

&lt;h3 id=&#34;banner&#34;&gt;Banner&lt;/h3&gt;

&lt;p&gt;O banner também é bem padrão, com 100% de largura. Aqui poderiamos ter um slider ou carrossel em JavaScript. Mas vou ficar apenas no HTML por este artigo.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.banner {
   background: url(&#39;../img/banner.jpg&#39;);
   height: 450px;
   margin-bottom: 4.8em;
   position: relative;
}
&lt;/pre&gt;

&lt;p&gt;Repare que a imagem está dentro do background do banner. Neste caso ela vai sendo cortada de acordo com a altura e largura que eu especificar para ele. Dentro do banner temos uma caixa que eu carinhosamente dei a classe de &amp;#8220;caixa&amp;#8221;. Aqui é a mesma ladainha de sempre. Objeto : Contexto = Resultado. A diferença aqui está na posição absoluta da caixa em relação ao banner.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.caixa {
   width: 42.553191489362%; /* 264px / 1128px */
   padding: 2.4em 4em 2.4em 4em;
   position: absolute;
   top: 48px;
   background: rgba(0,0,0,0.6);
}
&lt;/pre&gt;

&lt;p&gt;Novamente vamos pular os estilos puramente estéticos para ganharmos tempo. Mas você pode conferir todos eles na &lt;a href=&#34;https://github.com/daniguerrato/design-responsivo-demo&#34; title=&#34;Demo - Design Responsivo na Prática&#34;&gt;demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;colunas&#34;&gt;Colunas&lt;/h3&gt;

&lt;p&gt;Temos quatro destaques contendo texto e imagens que chamamos de colunas. A margem da direita também foi calculada em porcentagem. Como o último bloco não tem margem coisa nenhuma utilizamos o parâmetro last-child para especificar isto. Lembrando que versões antigas do IE não suportam isto.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.coluna {
   width: 23.404255319149%; /* 264px / 1128px */
   margin-right: 2.127659574468%; /* 24 / 1128px */
float: left;
}

.coluna:last-child {
   margin-right: 0;
}
&lt;/pre&gt;

&lt;h3 id=&#34;footer&#34;&gt;Footer&lt;/h3&gt;

&lt;p&gt;O rodapé do nosso layout é bem simples e ocupa 100% de largura.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.footer {
   width: 100%;
   margin-top: 2.4em;
   margin-bottom: 2.4em;
   float: left;
   clear: both;
}
&lt;/pre&gt;

&lt;h2 id=&#34;css-mobile&#34;&gt;CSS [Mobile]&lt;/h2&gt;

&lt;p&gt;Vamos adaptar o layout aqui para tamanhos menores do que1128px. Mas poderíamos utilizar media queries para criar versões alternativas para televisores, impressão, dispositivos com maior densidade de pixel (como as telas retinas), etc.&lt;/p&gt;

&lt;p&gt;Estes aparelhos podem ser divididos em alguns tamanhos médios de largura:&lt;/p&gt;

&lt;p&gt;1024px &amp;#8211; Tablets em modo paisagem;&lt;/p&gt;

&lt;p&gt;768px &amp;#8211; Tablets em modo retrato;&lt;/p&gt;

&lt;p&gt;600px &amp;#8211; eReaders;&lt;/p&gt;

&lt;p&gt;480px &amp;#8211; Smartphones;&lt;/p&gt;

&lt;p&gt;Mas estes valores não passam de chutes calculados. Existem dezenas de resoluções intermediárias. Aqui vai entrar o conceito de break-point, ou, ponto-de-quebra. Funciona mais ou menos assim:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Redimensione o seu browser até identificar um problema.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Concerte o problema.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Repita.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sério. Não tem segredo. Para isto você pode utilizar algum bookmarklet de resolução. Copie o valor para o seu Media Querie.&lt;/p&gt;

&lt;p&gt;Por exemplo, em exatos 1128px de largura temos o primeiro problema. Não existe nenhuma margem e o layout fica coladinho na janela do browser. Entra o primeiro Media Querie.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 1128px) {
.container {
   padding: 0 2.4em 0 2.4em;
}
}
&lt;/pre&gt;

&lt;p&gt;Tradução: em telas de largura máxima 1128px aplicar os seguintes estilos: espaçamento de 2.4em para a esquerda e para a direita.&lt;/p&gt;

&lt;p&gt;O próximo problema é que lá por volta do 768px a nossa caixa de banner parece meio apertada demais. Podemos aumentar o tamanho dela.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 768px) {
.caixa {
   width: 65%;
}
}
&lt;/pre&gt;

&lt;p&gt;O mesmo acontece com as colunas… Dentro do mesmo media querie vamos especificar duas colunas com largura de 48% e margem de 2%.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.coluna {
   width: 48%;
   margin-bottom: 2.4em;
   margin-right: 2%;
}

.coluna:nth-child(even) {
   margin-right: 0;
}
&lt;/pre&gt;

&lt;p&gt;Lembrando que agora a regrinha é diferente. Para cada coluna de número par zeramos a margem através do :nth-child(even).&lt;/p&gt;

&lt;p&gt;O logotipo poderia ter uma margem maior por aqui.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.logo {
   margin-top: 1.2em;
}
&lt;/pre&gt;

&lt;p&gt;O próximo problema é o banner. Por volta de 718px ele poderia receber menos destaque na imagem e mais destaque no texto. Diminuimos a altura dele para 150px, e colocamos a caixa logo abaixo. O resto é correção de margem e perfumaria.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 718px) {
.banner {
   position: relative;
   float: left;
   margin:0;
   height: 150px;
}

.caixa {
   position: relative;
   display: block;
   float: left;
   margin-top:100px;
   width: 100%;
   background: #000;
}

.caixa h1 {
   font-size: 2.5em;
}

.principal {
   margin-top: 450px;
}
}
&lt;/pre&gt;

&lt;p&gt;Diminua mais ainda a janela do browser. Eventualmente o menu cairá para duas linhas, certo? Como temos apenas quatro links na navegação ele pode muito bem simplesmente ocupar 100% de largura e zerar a margem das linhas. Vamos também diminuir um pouco o tamanho dos links.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 640px) {
.menu {
   width: 100%;
}

.menu ul {
   float: left;
   font-size: 0.8em;
}

.menu li:first-child {
   margin-left: 0;
}
}
&lt;/pre&gt;

&lt;p&gt;Poderíamos, através de JavaScript e/ou CSS3, criar outras soluções de navegação como um menu retratil, com overlay, etc. Mas como já existem alguns artigos aqui no Tableless sobre o tema vamos seguir adiante.&lt;/p&gt;

&lt;p&gt;Neste ponto já temos nosso layout em tablets. Esta é uma screenshot em um iPad 2 modo retrato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/04/layout-demo-tablet.jpg&#34; alt=&#34;layout-demo-tablet&#34; width=&#34;800&#34; height=&#34;844&#34; class=&#34;alignnone size-full wp-image-42226&#34; srcset=&#34;uploads/2014/04/layout-demo-tablet.jpg 800w, uploads/2014/04/layout-demo-tablet-400x422.jpg 400w&#34; sizes=&#34;(max-width: 800px) 100vw, 800px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O próximo, e último passo, é criar o layout em smartphones em si. Para isto vamos especificar que todas as colunas também ocupem 100% da tela.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 520px) {
.coluna {
   width: 100%;
   margin-right: 0;
}
}
&lt;/pre&gt;

&lt;p&gt;E aqui esta o layout em um smartphone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/04/layout-demo-smartphones.jpg&#34; alt=&#34;layout-demo-smartphones&#34; width=&#34;800&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-42225&#34; srcset=&#34;uploads/2014/04/layout-demo-smartphones.jpg 800w, uploads/2014/04/layout-demo-smartphones-400x300.jpg 400w&#34; sizes=&#34;(max-width: 800px) 100vw, 800px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h2&gt;

&lt;p&gt;E está finalizada nossa demo. &lt;a href=&#34;https://github.com/daniguerrato/design-responsivo-demo&#34; title=&#34;Demo - Design Responsivo na Prática&#34;&gt;Baixem o layout&lt;/a&gt; e brinquem com o código. Ainda está com dúvida em algum tema específico ou quer se aprofundar em um dos aspectos? Segue uma listinha básica de alguns outros artigos sobre o assunto:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/design-responsivo-na-pratica-do-rascunho-ao-digita/&#34; title=&#34;Design Responsivo na prática: do rascunho ao digital&#34;&gt;Design Responsivo na Prática: Do rascunho ao digital&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.popupdesign.com.br/design-responsivo-i-o-que-e-e-por-que-usar/&#34; title=&#34;http://blog.popupdesign.com.br/design-responsivo-i-o-que-e-e-por-que-usar/&#34;&gt;Design Responsivo I – O que é e por que usar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.popupdesign.com.br/design-responsivo-grids-e-texto/&#34; title=&#34;http://blog.popupdesign.com.br/design-responsivo-grids-e-texto/&#34;&gt;Design Responsivo II – Grids e Texto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.popupdesign.com.br/design-responsivo-iii-media-queries-e-compatibilidade/&#34; title=&#34;http://blog.popupdesign.com.br/design-responsivo-iii-media-queries-e-compatibilidade/&#34;&gt;Design Responsivo III – Media Queries e Compatibilidade&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.popupdesign.com.br/desenvolvimento-responsivo-e-viewport/&#34; title=&#34;Desenvolvimento Responsivo e Viewport&#34;&gt;Desenvolvimento Responsivo e Viewport&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.popupdesign.com.br/design-responsivo-e-retina-display-desenvolvimento-web-em-tempos-de-alta-resolucao/&#34; title=&#34;http://blog.popupdesign.com.br/design-responsivo-e-retina-display-desenvolvimento-web-em-tempos-de-alta-resolucao/&#34;&gt;Design Responsivo &amp;amp; Retina Display: desenvolvimento web em alta resolução&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/imagens-em-alta-resolucao-utilizando-svg/&#34; title=&#34;Imagens em alta resolução utilizando SVG&#34;&gt;Imagens em alta resolução utilizando SVG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/grids-semanticos-com-less/&#34; title=&#34;Grids semânticos com LESS&#34;&gt;Grids semânticos com LESS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/menu-retratil-com-css-e-jquery/&#34; title=&#34;Menu Retrátil com CSS e jQuery&#34;&gt;Menu Restrátil com CSS e jQuery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/como-testar-design-responsivo/&#34; title=&#34;Como testar design responsivo&#34;&gt;Como testar Design Responsivo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/imagens-responsivas-de-alta-performance/&#34; title=&#34;Imagens Responsivas de Alta Performance&#34;&gt;Imagens Responsivas de Alta Performance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://alistapart.com/article/responsive-web-design/&#34; title=&#34;Responsive Web Design&#34;&gt;Responsive Web Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Espero que tenha sido proveitoso para vocês. Bons estudos, um abraço e até a próxima! 🙂&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O Diego Eis fez um &lt;a href=&#34;https://www.eventials.com/tableless/live-coding-implementando-um-site-responsivo/&#34;&gt;Micro Workshop Online&lt;/a&gt; mostrando como implementar um layout responsivo, mostrando o básico sobre Grids fluídos, Imagens (vídeos etc) fluídos, Media Queries, Fonts com REM e algumas outras coisas. Vale a pena ver.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizando páginas responsivas em diversos navegadores</title>
      <link>http://tableless.com.br/visualizando-pagina-responsiva-em-diversos-navegadores/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/visualizando-pagina-responsiva-em-diversos-navegadores/</guid>
      <description>&lt;p&gt;Nesse artigo vou mostrar rapidamente como tirar um Print Screen da página inicial de seu site utilizando diversos dispositivos. Algo que pode facilitar e muito a vida caso esteja desenvolvendo uma página responsiva.&lt;/p&gt;

&lt;p&gt;Nesse exemplo vamos utilizar o &lt;a href=&#34;http://nodejs.org/&#34; rel=&#34;noreferrer&#34;&gt;NodeJS&lt;/a&gt; e o &lt;a href=&#34;http://tableless.com.br/introducao-ao-selenium-2/&#34; rel=&#34;noreferrer&#34;&gt;Selenium 2&lt;/a&gt;. As outras dependências necessárias estão especificadas no arquivo &lt;a href=&#34;http://docs.nodejitsu.com/articles/getting-started/npm/what-is-the-file-package-json&#34; rel=&#34;noreferrer&#34;&gt;package.json&lt;/a&gt;. Arquivo que é usado para fornecer ao gerenciador de pacotes NPM, informações de como lidar com as dependências do projeto, a descrição do projeto, a licença utilizada, &lt;a href=&#34;http://package.json.nodejitsu.com/&#34; rel=&#34;noreferrer&#34;&gt;dentre outras&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para facilitar nossa vida, utilizaremos um serviço de Cloud do &lt;a href=&#34;https://saucelabs.com/&#34; rel=&#34;noreferrer&#34;&gt;SauceLabs&lt;/a&gt;. Esse serviço permite utilizar diversos tipos de navegadores. Logo, logo estarei escrevendo outros artigos, mostrando outros tipos de serviços parecidos, como por exemplo o &lt;a href=&#34;http://www.browserstack.com/&#34; rel=&#34;noreferrer&#34;&gt;BrowserStack&lt;/a&gt;. Todos esses serviços de Cloud fornecem uma &lt;strong&gt;chave de acesso&lt;/strong&gt;. Para criar uma conta, basta acessar a &lt;a href=&#34;https://saucelabs.com/signup&#34; rel=&#34;noreferrer&#34;&gt;página de cadastro&lt;/a&gt; e preencher o formulário. Posso te assegurar que o cadastro é simples e rápido.&lt;/p&gt;

&lt;p&gt;Tendo a chave de acesso em mãos, vamos executar &lt;a href=&#34;https://gist.github.com/igorlima/9875745&#34; rel=&#34;noreferrer&#34;&gt;o seguinte script&lt;/a&gt;. Magicamente teremos um printscreen da página inicial do site do Tableless:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;git clone https://gist.github.com/9875745.git visualizao-pagina-web
npm install
node script.js -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY --url &#39;http://tableless.com.br/&#39; --screenshot &#39;printscreen-da-pagina-do-tableless.png&#39;&lt;/pre&gt;

&lt;p&gt;Esse script utiliza como padrão a última versão do navegador Chrome. Para utilizar outros navegadores, especificaremos via parâmetros direto no Terminal. Os detalhes de cada parâmetro são obtidos utilizando &lt;em&gt;&amp;#8211;help&lt;/em&gt;. Existe uma lista com centenas de navegadores e dispositivos, os quais podem ser vistos no seguinte &lt;a href=&#34;https://saucelabs.com/platforms&#34; rel=&#34;noreferrer&#34;&gt;link&lt;/a&gt;. Segue abaixo dois exemplos de como visualizar o site do Tableless em um tablet com Android e em um iPhone:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;node script.js -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY --url &#39;http://tableless.com.br/&#39; --screenshot &#39;printscreen-tableless-android.png&#39; -b &#39;android&#39; -p &#39;Linux&#39; -v &#39;4.0&#39; --deviceType tablet --deviceOrientation landscape
node script.js -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY --url &#39;http://tableless.com.br/&#39; --screenshot &#39;printscreen-tableless-iphone.png&#39; -b &#39;iphone&#39; -p &#39;OS X 10.9&#39; -v &#39;7.0&#39;&lt;/pre&gt;

&lt;p&gt;O resultado é ilustrado na imagem abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone&#34; alt=&#34;PrintScreen da página do Tableless em diversos dispositivos&#34; src=&#34;https://camo.githubusercontent.com/0ba7d9a87cde934188995961c780401e73d19350/68747470733a2f2f63616d6f2e67697468756275736572636f6e74656e742e636f6d2f323936383265353030646663643562303032656230653766383832666332346231636266653261622f3638373437343730336132663266363933313333333633383265373036383666373436663632373536333662363537343265363336663664326636313663363237353664373332663631363733313338333232663639363736663732373236393632363536393732366636633639366436313266373436313632366336353663363537333733326436313732373436393633366336353264363936643631363736353566376137303733333933313335333536333634333636313265366137303637&#34; width=&#34;836&#34; height=&#34;695&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso se interessem e queiram modificar o script utilizado acima, fiquem a vontade. Para um melhor entendimento do script, deem uma lida nos seguintes artigos: &lt;strong&gt;(i)&lt;/strong&gt; &lt;a href=&#34;http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/&#34; rel=&#34;noreferrer&#34;&gt;Introdução de como executar testes unitários em diferentes tipos de navegadores&lt;/a&gt; e &lt;strong&gt;(ii)&lt;/strong&gt; &lt;a href=&#34;http://tableless.com.br/javascript-de-forma-assincrona-e-legivel/&#34; rel=&#34;noreferrer&#34;&gt;JavaScript de forma assíncrona e legível&lt;/a&gt;. Espero que tenham gostado. Até a próxima.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Imagens Responsivas de Alta Performance</title>
      <link>http://tableless.com.br/imagens-responsivas-de-alta-performance/</link>
      <pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/imagens-responsivas-de-alta-performance/</guid>
      <description>

&lt;p&gt;Desenvolver sites responsivos muitas vezes é como fazer malabarismo. São muitas bolas para manter no ar: largura do viewport, medidas relativas, velocidade da conexão, densidade de pixel e experiência do usuário. Lidar com o peso de tudo isto sem quebrar o layout é um objetivo bem difícil de atingir e por isto, muitos desenvolvedores, clientes e consequentemente usuários se afastam da ideia. No artigo de hoje vamos conhecer algumas técnicas de design responsivo para otimização de imagens que ajudam a reduzir (e muito) o peso final dos sites responsivos e equilibrar as bolas no ar.&lt;/p&gt;

&lt;h2 id=&#34;a-raíz-do-problema&#34;&gt;A raíz do problema&lt;/h2&gt;

&lt;p&gt;Esta técnica é simples e didática e, provavelmente, foi a primeira que você aprendeu quando começou seus estudos de Design Responsivo. Basta declarar no CSS que todas as imagens tenham largura máxima de 100% que todas as figuras do seu layout vão se redimensionar automaticamente e proporcionalmente &amp;#8211; de acordo com a largura do container pai.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;img {
  max-width:100%;
}&lt;/pre&gt;

&lt;p&gt;Isto aparentemente funciona e bem. Mas, se fosse o caminho ideal, o nosso artigo terminaria por aqui, certo? Vamos ver os principais problemas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;O pepino principal aqui é a performance. Você está essencialmente fazendo um usuário de um dispositivo móvel baixar arquivos muito mais pesados do que ele realmente precisa… Para que usar uma imagem gigante de 2560x1600px se ela será vista em um celular de 320x480px? Isto pode ser passável se existirem poucas imagens no seu layout. Mas multiplique isto por dezenas e uma breve visita ao seu site pode muito bem esgotar o plano de dados de alguém.&lt;/li&gt;
&lt;li&gt;Você necessariamente precisa de um container. Pode ser uma div, um figure ou até mesmo um span mas a imagem precisa &lt;strong&gt;estar dentro de alguma coisa&lt;/strong&gt;. E isto pode acrescentar diversas linhas a mais de código que não seriam realmente necessárias.&lt;/li&gt;
&lt;li&gt;As vezes o ideal não é encolher uma imagem e sim substituí-la. Pode ser que o seu banner &amp;#8220;hero&amp;#8221; tenha um texto aplicado ou que a imagem simplesmente perca os detalhes em um tamanho menor. Neste caso você poderia deixar duas imagens no código e usar um display:none no CSS para esconder e mostrar as imagens certas através de media queries. Mas o resultado em performance será ainda mais desastroso pois você está fazendo o usuário baixar DUAS imagens no lugar de uma. Imagine a bagunça se o designer inventar de ter uma imagem para tablets, para televisão, para console portátil….&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;o-dilema&#34;&gt;O dilema&lt;/h2&gt;

&lt;p&gt;Esta é a hora que eu gostaria de escrever que existe uma solução perfeita para este problema. Mas vou ser direta e objetiva com vocês: não existe (ainda). O que nós temos são várias tentativas de contornar o problema, cada uma focada em um aspecto… Algumas das ferramentas que eu vou mostrar a seguir resolvem bem o lado da direção de arte, mas deixam a desejar em semântica e performance, por exemplo. Outras tem o código mais enxuto, mas a implementação depende de uma programação específica server-side. A minha sugestão é: conheça e explore todas elas. Assim vocês saberão os pontos fortes e fracos e qual combina melhor com cada projeto.&lt;/p&gt;

&lt;p&gt;Bem, para escolher qual solução funciona melhor para o seu projeto você precisa se fazer algumas perguntas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Direção de arte é importante para o seu caso (por exemplo: imagens diferentes / cropadas para cada largura)?&lt;/li&gt;
&lt;li&gt;Você está começando do zero ou possui um código legado para dar suporte?&lt;/li&gt;
&lt;li&gt;Você se importa de utilizar JavaScript ou bibliotecas como jQuery?&lt;/li&gt;
&lt;li&gt;Testar a velocidade da conexão do usuário é algo importante?&lt;/li&gt;
&lt;li&gt;Você está utilizando conteúdo dinâmico?&lt;/li&gt;
&lt;li&gt;Você se importa de lidar com aspectos server side?&lt;/li&gt;
&lt;li&gt;Qual é a importância que você dá para semântica?&lt;/li&gt;
&lt;li&gt;Qual é a importância que você dá para validação?&lt;/li&gt;
&lt;li&gt;O seu cliente vai ter que por a mão ali?&lt;/li&gt;
&lt;li&gt;Você se importa de escrever HTML extra?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se isto fosse um daqueles antigos livros de RPG cada uma destas perguntas estaria acompanhado de um &amp;#8220;vá para a página 42&amp;#8221; ou algo do tipo. Pois sim, basicamente você vai ter que escolher entre o caminho menos mal ou sofrer com a performance. Mas, para trazer um pouco de esperança e restaurar a fé na humanidade, vamos dar uma espiadinha no futuro.&lt;/p&gt;

&lt;h2 id=&#34;o-futuro-com-o-elemento-picture&#34;&gt;O Futuro (com o Elemento Picture)&lt;/h2&gt;

&lt;p&gt;Através do picture é possível declarar diversas fontes para uma única imagem no seu HTML e controlar qual deve ser apresentada utilizando media queries. Isto é feito utilizando a tag picture em conjunto com o parâmetro source. Desta forma é possível especificar imagens diferentes de acordo com a largura e altura da janela do browser, orientação do dispositivo, densidade de pixels, layout para a impressão, etc. Obviamente devemos utilizar esta especificação apenas quando existir mais de uma imagem, optando pelo bom e velho img quando tiver apenas uma figura. O img também serve de fallback para browsers que não aceitam o picture.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture&amp;gt;
    &amp;lt;source srcset=&#34;pic1x.jpg 1x, pic2x.jpg 2x, pic4x.jpg 4x&#34;&amp;gt;
    &amp;lt;img alt=&#34;descrição da imagem&#34; src=&#34;pic1x.jpg&#34; width=&#34;500&#34; height=&#34;500&#34;&amp;gt;
&amp;lt;/picture&amp;gt;&lt;/pre&gt;

&lt;p&gt;Reparem que 3 endereços foram especificados no source srcset: pix1x, pic2x e pix4x. Os atributos seguintes (1x, 2x e 4x) são &amp;#8220;dicas&amp;#8221; para o user agent trocar a imagem de acordo com a densidade de pixels da tela. Sendo que 1x é a padrão, 2x o dobro da densidade, etc. Mas, em muitos casos, isto não é específico o suficiente. Podemos então acrescentar um valor Xw e Xh referente a altura e largura do viewport.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture&amp;gt;
    &amp;lt;source sizes=&#34;100%&#34; srcset=&#34;pic400.jpg 400w, pic800.jpg 800w, pic1600.jpg 1600w&#34;&amp;gt;
    &amp;lt;img src=&#34;pic400.jpg&#34; alt=&#34;descrição da imagem&#34;&amp;gt;
&amp;lt;/picture&amp;gt;&lt;/pre&gt;

&lt;p&gt;Ou trabalhar em conjunto com media queries.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture&amp;gt;
    &amp;lt;source media=&#34;(min-width: 45em)&#34; srcset=&#34;grande.jpg&#34;&amp;gt;
    &amp;lt;source media=&#34;(min-width: 18em)&#34; srcset=&#34;media.jpg&#34;&amp;gt;
    &amp;lt;img src=&#34;pequena.jpg&#34; alt=&#34;descrição da imagem&#34;&amp;gt;
&amp;lt;/picture&amp;gt;&lt;/pre&gt;

&lt;p&gt;Os pontos positivos são muitos. A solução já tem um &lt;a href=&#34;http://www.w3.org/TR/html-picture-element/&#34; title=&#34;W3C - HTML picture element&#34;&gt;rascunho &amp;#8220;oficial&amp;#8221; na W3C&lt;/a&gt;, é semântica, versátil e permite direção de arte. Se eu pudesse apostar em um padrão seria neste. O problema é que nenhum browser atual aceita esta solução. Nenhunzinho mesmo. Ela está prevista no roadmap do Firefox, e provavelmente, será implantada em breve nos outros browsers mais moderninhos. Por enquanto é possível testar a implementação apenas em versões de testes. Mas vale consultar o site do grupo &lt;a href=&#34;http://responsiveimages.org/&#34; title=&#34;ResponsiveImages.org&#34;&gt;ResponsiveImages.org&lt;/a&gt;  de tempos em tempos e ficar de olho no sinal verde para colocar em prática. Outro ponto contra é que esta solução exige acrescentar código extra o que pode ser inviável se você já possui um site implantado com milhares de imagens para editar manualmente. Para saber mais basta consultar a &lt;a href=&#34;http://picture.responsiveimages.org/&#34; title=&#34;ResonsiveImages&#34;&gt;documentação oficial&lt;/a&gt; ou o &lt;a href=&#34;https://github.com/ResponsiveImagesCG/picture-element&#34; title=&#34;GithHub - ResponsiveImages&#34;&gt;repositório no GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-imitação-do-picture-com-picturefill&#34;&gt;A imitação do picture (com Picturefill)&lt;/h2&gt;

&lt;p&gt;Bem, vamos conversar sobre o que podemos fazer hoje! O picturefill.js através dos poderes mágicos do JavaScript imita a funcionalidade do elemento picture. A solução é bem leve: 498bytes &amp;#8211; o que francamente já compensa o peso de qualquer imagem. O mark-up fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;span data-picture data-alt=&#34;Descrição da imagem&#34;&amp;gt;
   &amp;lt;span data-src=&#34;pequena.jpg&#34;&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;span data-src=&#34;media.jpg&#34;     data-media=&#34;(min-width: 400px)&#34;&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;span data-src=&#34;grande.jpg&#34;      data-media=&#34;(min-width: 800px)&#34;&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;span data-src=&#34;extragrande.jpg&#34; data-media=&#34;(min-width: 1000px)&#34;&amp;gt;&amp;lt;/span&amp;gt;

   &amp;lt;!-- Fallback para quando o JavaScript estiver desativado. --&amp;gt;
   &amp;lt;noscript&amp;gt;
      &amp;lt;img src=&#34;small.jpg&#34; alt=&#34;Descrição da imagem&#34;&amp;gt;
   &amp;lt;/noscript&amp;gt;
&amp;lt;/span&amp;gt;&lt;/pre&gt;

&lt;p&gt;Bem, basicamente ele utiliza spans (que sozinhos não possuem valor semântico) no lugar do picture. E, através dos atributos data-src e data-media, especifica respectivamente o endereço e largura do viewport. Note também que existe um fallback para browsers mobile antigos / ambientes sem JavaScript dentro da tag .&lt;/p&gt;

&lt;p&gt;É possível incluir no data-media qualquer media-querie, ou seja, facilmente podemos adaptar este código para densidade de pixel diferente, outros tipos de dispositivos, etc.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;span data-picture data-alt=&#34;Descrição da imagem&#34;&amp;gt;
   &amp;lt;span data-src=&#34;imagem.jpg&#34;&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;span data-src=&#34;imagem_x2.jpg&#34; data-media=&#34;(min-device-pixel-ratio: 2.0)&#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/span&amp;gt;&lt;/pre&gt;

&lt;p&gt;Como o IE8 e versões anteriores não trabalham com media queries, ele ficará com a primeira imagem com atributo data-src (ou com a última imagem se nenhuma especificar este atributo). Alternativamente você pode utilizar comentários condicionais para servir outra figura.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!--[if (lt IE 9) &amp; (!IEMobile)]&amp;gt;
    &amp;lt;span data-src=&#34;imagem.jpg&#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;![endif]--&amp;gt;&lt;/pre&gt;

&lt;p&gt;Você pode checar a &lt;a href=&#34;http://scottjehl.github.io/picturefill/&#34; title=&#34;Picturefill&#34;&gt;demo online&lt;/a&gt; para ver a bruxaria acontecer. Ou dar uma olhadinha no &lt;a href=&#34;https://github.com/scottjehl/picturefill&#34; title=&#34;GitHub - Picturefill&#34;&gt;GitHub do projeto&lt;/a&gt; para ler a documentação completa.&lt;/p&gt;

&lt;p&gt;A sintaxe obviamente não vai validar. Isto não é exatamente um sinal de um código bom ou rum, mas se você está em uma situação onde isto é vital (pressão e um cliente, por exemplo) é melhor optar por outro caminho. Como esta solução é baseada no funcionamento do picture os mesmos contras se aplicam: linhas de código a mais e consequente dificuldade de implantação se o seu legado for grande, com o agravante extra de depender de JavaScript. Mas se estes pontos não forem problemáticos para você, vá fundo e tenha imagens responsivas de alta performance hoje mesmo!&lt;/p&gt;

&lt;h2 id=&#34;a-detecção-de-banda-com-foresight-js&#34;&gt;A detecção de banda (com Foresight.js)&lt;/h2&gt;

&lt;p&gt;O Foresight.js funciona de maneira um pouco diferente das soluções apresentadas até aqui. Ele basicamente testa a velocidade da conexão do usuário antes de realizar a requisição da imagem no servidor. Isto é ótimo pois vai um pouco contra o mito de que se um usuário está em um dispositivo móvel automaticamente a internet é lenta. Eu utilizo tablets no wi-fi o dia todo em casa e por aqui a conexão é de 100mb, enquanto a internet na casa dos meus pais que serve os computadores desktops é provavelmente mais lenta que o meu 3G. Testar a velocidade da banda é a maneira mais efetiva de verificar quem de fato pode se dar ao luxo de baixar imagens pesadas ou não. O foresight também detecta automaticamente a densidade de pixels do dispositivo, permite as imagens serem controladas por CSS (inclusive com background images), impede requisições múltiplas e não depende de user agents.&lt;/p&gt;

&lt;p&gt;Infelizmente isto tem um preço: uma imagem de 50k é baixada para testar a velocidade da conexão, bloqueando o download de outras imagens até o teste ser completo. Portanto, utilize esta solução apenas quando o carregamento de todas as imagens realmente for fazer a diferença na performance. Ou você estará tampando o sol com uma peneira.&lt;/p&gt;

&lt;p&gt;Na prática funciona da seguinte maneira: depois de apontar para o arquivo js no seu HTML você determina uma classe para a sua imagem. Ah, e lembre-se de utilizar o noscript como fallback.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img data-src=&#34;imagem.w320.jpg&#34; data-width=&#34;320&#34; data-height=&#34;212&#34; class=&#34;fs-img&#34;&amp;gt;
&amp;lt;noscript&amp;gt;
   &amp;lt;img src=imagem-fallback.jpg&#34;&amp;gt;
&amp;lt;/noscript&amp;gt;&lt;/pre&gt;

&lt;p&gt;Depois é só especificar a classe no CSS, substituindo w320 por quaisquer resoluções que você desejar.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;font-family: &#39;image-set( url(w320|w{requestWidth}) 2x high-bandwidth )&#39;;
display:none;&lt;/pre&gt;

&lt;p&gt;Repare que isto é feito através do atributo font-family o que é basicamente dar uma voadora na cara da semântica. Eu sei. Isto me faz ranger os dentes. Mas talvez seja uma boa maneira de pressionar os browsers e orgãos responsáveis a aprovarem mais depressa um padrão oficial para imagens responsivas, como o elemento picture. A reação pode ser algo do tipo &amp;#8220;Oh meu deus! Eles estão utilizando font-family para isto. Devem mesmo estar desesperados!&amp;#8221;. Sem contar que tudo é resolvido apenas por CSS, não requerendo nenhum HTML extra o que é ótimo para conteúdos dinâmicos. E, por incrível, que pareça esta gambiarra valida. Mais uma prova que validação é diferente de semântica. Cabe a você decidir o que é mais importante: semântica ou performance? Apenas me prometa que, se você decidir por utilizar algo assim, vai voltar e deixar tudo bonitinho assim que um padrão bacana for aprovado.&lt;/p&gt;

&lt;p&gt;Saiba mais na &lt;a href=&#34;http://www.cdnconnect.com/docs/foresightjs&#34; title=&#34;Foresight.js&#34;&gt;Documentação Oficial&lt;/a&gt;, no &lt;a href=&#34;https://github.com/adamdbradley/foresight.js&#34; title=&#34;GitHub - Foresight&#34;&gt;GitHub do Foresight&lt;/a&gt; ou de uma olhada nas &lt;a href=&#34;http://www.cdnconnect.com/docs/foresightjs/demos&#34; title=&#34;Foresight - Demos&#34;&gt;demos do projeto&lt;/a&gt;. Lembre-se de utilizar diversos dispositivos ou você não verá nada de diferente acontecendo.&lt;/p&gt;

&lt;h2 id=&#34;a-saga-mobile-first-com-hisrc&#34;&gt;A saga mobile first (com HISRC)&lt;/h2&gt;

&lt;p&gt;Esta solução é um pouco parecida com o Foresight, com a diferença que ao invés de detectar a velocidade através de um placeholder, o HiSRC baixa sempre a imagem mobile primeiro. Se o usuário estiver em uma conexão lenta a imagem mobile fica lá bonitona. Já se a conexão for rápida a versão @1x é baixada. Se a internet for rápida E o dispositivo tiver alta densidade de pixels a versão @2x da imagem é entregue. Isto significa na prática que sim, mais de uma imagem pode ser baixada em uma banda larga. Mas se é para &amp;#8220;punir&amp;#8221; alguém, que seja quem tem menos a perder, certo?&lt;/p&gt;

&lt;p&gt;Para implantar primeiro é necessário chamar o arquivo jQuery e depois configura-lo para as classes de imagens que serão responsivas.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(document).ready(function(){
  $(&#34;.hisrc img&#34;).hisrc();
  $(&#34;.hisrc img+img&#34;).hisrc({
  useTransparentGif: true,
  speedTestUri: &#39;50K.jpg&#39;
});
})&lt;/pre&gt;

&lt;p&gt;Depois utilize as suas imagens em uma div com a mesma classe. A primeira imagem é a mobile (first, lembra?), a com o atributo data-1x é para conexões rápidas de definição normal e com data-2x é para imagens com o dobro da densidade de pixels (para telas como retina display da Apple, por exemplo).&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;hisrc&#34;&amp;gt;
  &amp;lt;img src=&#34;imagem.jpg&#34; data-1x=&#34;imagem@1x.jpg&#34; data-2x=&#34;imagem@2x.jpg&#34;&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Simples e prático de implementar de maneira dinâmica. Como pontos contra além do download duplo, temos a dependência do jQuery e impossibilidade de direção de arte pois não existe controle nenhum do tamanho do viewport ou de media queries (afinal tudo é determinado a partir da velocidade da internet).&lt;/p&gt;

&lt;p&gt;Se você se interessou confira a documentação completa no &lt;a href=&#34;https://github.com/teleject/hisrc&#34; title=&#34;GitHub - HiSRC&#34;&gt;GitHub do projeto&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-solução-server-side-com-adaptive-images&#34;&gt;A Solução server side (com Adaptive Images)&lt;/h2&gt;

&lt;p&gt;Se você tem um zillhão de linhas de código para readaptar pode não ser nada prático revisar imagem por imagem para adicionar atributos extras. Ou talvez você tenha um cliente que vai administrar sozinho um website sem possuir um designer na equipe para cropar e otimizar todas as versões possíveis de imagens responsivas. Em ambos os casos uma solução server side pode ser mais interessante.&lt;/p&gt;

&lt;p&gt;Para estes casos eu indicaria o Adaptive Images. Ele basicamente intercepta os pedidos por imagens no servidor e redimensiona automaticamente as imagens para os breakpoints que você especificou. Além do zero de trabalho extra uma vez que o setup for feito, a solução é bem semântica e não requer marcação extra.&lt;/p&gt;

&lt;p&gt;O contra? Você vai precisar de PHP 5x (com Apache2 / nginx e GD lib), já que o processo é realizado a partir do arquivo .htacess. Este arquivo basicamente diz para o servidor dar uma olhadinha no adaptive-images.php antes de pegar qualquer imagem jpg, gif ou png. Ou seja, se você estiver utilizando alguma outra linguagem como Ruby on Rails ou ASP é melhor buscar outro caminho. Também não é possível fazer direção de arte pois o arquivo é simplesmente redimensionado. Se estes pontos não forem um problema esta é uma solução prática, rápida e efetiva. Outra questão que pode ser vista como um &amp;#8220;defeito&amp;#8221; é, como o adaptative images verifica o viewport através de cookies + cache, as imagens não vão ser servidas se um usuário ficar brincando de aumentar e diminuir a janelinha do browser. Mas acredito que isto pode ser contornado pelo bom e velho max-width 100% como um fallback.&lt;/p&gt;

&lt;p&gt;Para documentação e dicas de implementação dê uma olhada no &lt;a href=&#34;http://adaptive-images.com/&#34; title=&#34;Adaptive Images&#34;&gt;site do projeto&lt;/a&gt; e no &lt;a href=&#34;https://github.com/MattWilcox/Adaptive-Images&#34; title=&#34;Adaptive Images - GitHub&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-caminho-do-wordpress-com-múltiplos-plugins&#34;&gt;O caminho do WordPress (com múltiplos plugins)&lt;/h2&gt;

&lt;p&gt;Se você utiliza o CMS WordPress em seus projetos pode estar com sorte. Como a ferramenta já lida com uma biblioteca de mídia e versões de tamanhos diferentes para imagens existem diversos plugins que facilitam o trabalho de desenvolvimento para a plataforma.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org/plugins/mobble/&#34; title=&#34;Mobble&#34;&gt;Mobble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Funções condicionais para detectar smartphones e tablets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org/plugins/picturefillwp/&#34; title=&#34;Picturefill WP&#34;&gt;Picturefill WP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Baseado no picturefill.js&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org/plugins/simple-responsive-images/&#34; title=&#34;Simple responsive images&#34;&gt;Simple responsive images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redimensiona as imagens para os breakpoints que você escolher.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org/plugins/pb-responsive-images/&#34; title=&#34;PB Responsive Images&#34;&gt;PB Responsive Images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Baseado na tag picture&lt;/p&gt;

&lt;h2 id=&#34;a-lista-de-alternativas&#34;&gt;A lista de alternativas&lt;/h2&gt;

&lt;p&gt;Encontrar uma solução definitiva para a performance de imagens tem sido uma verdadeira caça ao tesouro do design responsivo. Fora as ferramentas que eu já apresentei existem diversas outras iniciativas bacanas bacanas que valem a visita.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sencha.com/products/space/&#34; title=&#34;Sencha.io&#34;&gt;Sencha.IO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solução third-party que funciona como um proxy para imagens responsivas. Possui planos pagos e gratuitos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zurb.com/playground/foundation-interchange&#34; title=&#34;Interchange&#34;&gt;Interchange&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desenvolvido pela Zurb e integrado ao frameworkd Foundation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.resrc.it/&#34; title=&#34;ReSRC&#34;&gt;ReSRC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solução de proxy com algumas outras funções interessantes extras como filtros, crop, integração com sliders e plugins. É cobrada uma mensalidade nos planos avançados.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tubalmartin/riloadr&#34; title=&#34;Riloadr&#34;&gt;Riloadr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Framework de imagens responsivas baseado apenas em HTML, CSS e JavaScript.&lt;/p&gt;

&lt;p&gt;Se você ainda está um pouco perdido &lt;a href=&#34;https://docs.google.com/spreadsheet/ccc?key=0Al0lI17fOl9DdDgxTFVoRzFpV3VCdHk2NTBmdVI2OXc#gid=0&#34;&gt;esta tabela&lt;/a&gt; criada pelos desenvolvedores Chris Coyier e Christopher Schmitt compara algumas das soluções mencionadas neste artigo em critérios como dependência de JavaScript, validação, download de imagens adicionais, direção de arte, etc.&lt;/p&gt;

&lt;p&gt;Conhece alguma outra ferramenta legal? Deixe a referência nos comentários que eu atualizarei esta lista sempre que possível.&lt;/p&gt;

&lt;h3 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://mobile.smashingmagazine.com/2013/07/08/choosing-a-responsive-image-solution/&#34; title=&#34;Choosing a responsive image solution&#34;&gt;Choosing a responsive image solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://css-tricks.com/which-responsive-images-solution-should-you-use/&#34; title=&#34;Which responsive images solution should you use&#34;&gt;Which responsive images solution should you use&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://csswizardry.com/2011/07/responsive-images-right-now/&#34; title=&#34;Responsive images right now&#34;&gt;Responsive images right now&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fault Tolerance: a base do Progressive Enhancement</title>
      <link>http://tableless.com.br/faut-tolerant-base-progressive-enhancement/</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/faut-tolerant-base-progressive-enhancement/</guid>
      <description>

&lt;p&gt;Fault Tolerance é como as máquinas tratam um erro quando ele acontece. É a habilidade do sistema continuar em operação quando uma falha inesperada ocorre. Isso &lt;a href=&#34;http://super.abril.com.br/ciencia/revolucao-cerebro-446545.shtml&#34;&gt;acontece a todo momento com seu cérebro&lt;/a&gt;. O sistema não pode parar até que esse erro seja resolvido, logo o sistema dá um jeito para que esse erro não afete todo o resto do sistema. A natureza inteira trabalha dessa forma. Os browsers trabalham dessa forma. É por isso que você consegue testar as coisas maravilhosas do CSS3 e do HTML5 sem se preocupar com browsers antigos.&lt;/p&gt;

&lt;h2 id=&#34;já-temos-as-vantagens-do-fault-tolerance-desde-o-início&#34;&gt;Já temos as vantagens do fault tolerance desde o início&lt;/h2&gt;

&lt;p&gt;Por exemplo, quando escrevemos uma propriedade de CSS que o browser não reconhece, ele simplesmente ignora aquela linha e passa para a próxima. Isso acontece o tempo inteiro quando aplicamos novidades do CSS ou do HTML. Lembra-se quando os browsers não reconheciam os novos tipos de campos de formulários do HTML5? O browser simplesmente substituía o campo desconhecido pelo campo comum de texto.&lt;/p&gt;

&lt;p&gt;Isso é importante por que o que se faz hoje no desenvolvimento de um website, continuará funcionando de alguma forma daqui 10 anos. Como os browsers tem essa tolerância a falhas, linguagens como HTML e CSS ganham poder para evoluir o tempo inteiro, sem os bloqueios das limitações do passado.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fault Tolerance é como as máquinas tratam um erro quando ele acontece.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Entender a importância do Fault Tolerance é a chave para entender o Progressive Enhancement. Na verdade o Progressive Enhancement não seria possível se essa tolerância de falhas não existisse em browsers e outros meios de acesso.&lt;/p&gt;

&lt;h2 id=&#34;tudo-sobre-acessibilidade&#34;&gt;Tudo sobre acessibilidade&lt;/h2&gt;

&lt;p&gt;Fundamentalmente, Progressive Enhancement é tudo sobre acessibilidade. Na verdade o termo acessibilidade é normalmente usado para indicar que o conteúdo deve ser acessível para pessoas com necessidades especiais. O progressive enhancement trata isso mas na ótica de que todo mundo tem necessidades especiais e por isso o acesso ao conteúdo deveria ser facilitado para qualquer pessoa em qualquer tipo de contexto. Isso inclui facilmente pessoas que acessam websites via smartphones, por exemplo, onde a tela é pequena e algumas das facilidades que existem no desktops estão ausentes.&lt;/p&gt;

&lt;h2 id=&#34;níveis-de-tolerância&#34;&gt;Níveis de tolerância&lt;/h2&gt;

&lt;p&gt;Nós passamos por alguns níveis ao desenvolver algo tendo como método o Progressive Enhacement. Esses níveis tem como objetivo sempre servir primeiro o conteúdo e depois todas as funcionalidades e comportamentos que podem melhorar o consumo deste conteúdo e também de toda a página.&lt;/p&gt;

&lt;p&gt;A base para tolerar erros é sempre manter um fallback quando algo ruim acontecer. A primeira camada geralmente é dar um fallback básico, conhecido pela maioria dos dispositivos. Esse fallback geralmente é servir um conteúdo em forma de texto. Isso é óbvio por que texto é um conteúdo acessível para praticamente qualquer meio de acesso existente hoje. Muitos dos elementos do HTML tem um fallback de texto para casos onde elemento não seja carregado ou não seja reconhecido. Lembra do atributo ALT? Até mesmo nas tags de vídeo e audio, como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;video src=&#34;video.ogg&#34; controls&amp;gt;
  Texto de fallback.
&amp;lt;/video&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A segunda camada é a &lt;strong&gt;semântica&lt;/strong&gt; do HTML. Cada elemento do HTML tem sua função e principalmente seu significado. Eles acrescentam significados a qualquer informação exibida pelo HTML e muitas vezes estendem o significado que o texto sozinho não conseguiria.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Texto é universal.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A terceira camada de experiência é a camada visual, onde o CSS e também as imagens, audios e vídeos são as responsáveis. É onde a coisa fica bonita e interativa. Aqui você sente mais a tolerância dos browsers a falhas. Usamos o tempo inteiro propriedades que nos ajudarão a melhorar a implementação de layouts, mas que em browsers antigos podem não ser renderizados. Experimentamos isso a todo momento.&lt;/p&gt;

&lt;p&gt;A quarta camada é a camada de interatividade ou comportamento. O Javascript toma conta dessa parte controlando os elementos do HTML, muitas vezes controlando propriedades do CSS para realizar ações de acordo com as interações do usuário.&lt;/p&gt;

&lt;p&gt;A camada final é uma extensão da semântica dos elementos do HTML. Aí é onde inserimos as iniciativas de WAI-ARIA. É onde vamos guiar leitores de telas e outros meios de acesso para elementos e pontos importantes na estrutura que o layout se baseia. Indicando quais regiões e elementos são referência de navegação.&lt;/p&gt;

&lt;p&gt;Nós sempre podemos resumir as camadas em 3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Camada de conteúdo:&lt;/strong&gt; HTML semântico e rico com WAI-ARIA e tags corretas;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Camada de formatação:&lt;/strong&gt; CSS e estilos;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Camada de comportamento:&lt;/strong&gt; Javascript;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adaptive-web-design&#34;&gt;Adaptive Web Design&lt;/h2&gt;

&lt;p&gt;Responsive design é bacana, coisa linda de Deus. Mas ainda está longe de ser algo que seja a solução para todos os problemas. Tudo está caminhando para algo mais flexível. A ideia do Responsive é muito, muito legal quando é aplicado a websites de conteúdo, blogs, websites institucionais, pequenos portais e etc. Mas quando vamos ambientes mais complexos, como fazer o administrativo de um produto, você tem elementos burocráticos difíceis de adequarmos em todas as telas.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fault Tolerance deve ser levado em conta em todos os seus projetos web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A ideia do Adaptive Web Design é que você entregue exatamente a melhor experiência que o usuário pode receber no contexto em que ele se encontra. A palavra &amp;#8220;contexto&amp;#8221; tem sido muito usada quando conversamos sobre mobilidade. Contexto significa todo o ambiente e a forma com que seu usuário está consumindo o seu conteúdo naquele momento. Ele pode estar parado em um ônibus cheio, ou andando enquanto procura uma informação&amp;#8230; Ele pode estar assistindo TV ou cozinhando. Cada contexto influência em como ele vai consumir seu conteúdo. Não existe maneira de adaptar o conteúdo e as formas de uso para cada um dos tipos de contexto. Por esse motivo, a única saída de ter certeza (ou o máximo de certeza) é deixar as coisas simples.&lt;/p&gt;

&lt;p&gt;Há diversas maneiras de se fazer isso, mas antes que façamos soluções mirabolantes, temos que ter em mente que boa parte do trabalho já é feito pelos browsers e que podemos nos ater ao simples. Você não pode esperar que o usuário de mobile use seu site em um celular da mesma maneira que ele o usa em um Desktop. É por isso que você adapta elementos e a estrutura.&lt;/p&gt;

&lt;p&gt;Fault Tolerance deve ser levado em conta em todos os seus projetos web. Pensar assim te dá flexibilidade para avançar corrigindo problemas sem prejudicar todo o processo.&lt;/p&gt;

&lt;h4 id=&#34;leia-mais&#34;&gt;Leia mais&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/bem-vindo-a-xangrila-parte-1/&#34; title=&#34;Bem vindo a Xangri-lá – Parte 1&#34;&gt;Sobre Progressive Enhancement &amp;#8211; Bem vindo a Xangrilá &amp;#8211; Parte 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.techrepublic.com/blog/web-designer/understanding-progressive-enhancement-techniques-in-web-design/1809/&#34;&gt;Understanding Progressive Enhancement Techniques in Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.techrepublic.com/blog/web-designer/what-is-the-difference-between-responsive-vs-adaptive-web-design/&#34;&gt;What is the difference between Responsive e Adaptive Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.searchenginepeople.com/blog/the-difference-between-adaptive-design-and-responsive-design.html&#34;&gt;The difference between adaptive design and Responsive Deisgn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>