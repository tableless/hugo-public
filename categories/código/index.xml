<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Código on Tableless</title>
    <link>http://tableless.com.br/categories/c%C3%B3digo/index.xml</link>
    <description>Recent content in Código on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/categories/c%C3%B3digo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>O fim da profissão front-end</title>
      <link>http://tableless.com.br/carreira-de-front-end-vai-morrer/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/carreira-de-front-end-vai-morrer/</guid>
      <description>

&lt;p&gt;O processo de desenvolvimento web pode se dividir em três categorias: design, front-end e back-end. Na minha opinião, a categoria que tem mais processos manuais e repetitivos é sem duvida o front-end.&lt;/p&gt;

&lt;p&gt;Pare pra pensar: o core do trabalho do front-end se resume em duas partes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;implementação do layout&lt;/strong&gt;: produção da primeira camada de código, onde replicamos o layout criado em algum programa gráfico, para código estático em HTML, CSS e JS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;integração com API&lt;/strong&gt;: depois (ou junto, tanto faz) de feito o código estático, a interface é integrada com a API, que geralmente carrega boa parte da lógica, já que essa mesma API é usada para alimentar outras plataformas como mobile, robôs etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As outras &amp;#8220;responsabilidades&amp;#8221; que orbitam em volta do front-end como acessibilidade, SEO, performance, compatibilidade entre browsers, código semântico, entre outras coisas que você pode julgar serem de responsabilidade de um front-end &lt;strong&gt;são um mero apetrecho&lt;/strong&gt;. Elas podem existir ou não em um projeto. Mas um projeto não sobrevive sem o código front-end do layout e sem o conteúdo integrado à interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Um observação: acessibilidade é algo que as máquinas podem fazer muito melhor que um ser humano. Embora eu tenha colocado como algo que possa existir ou não em um projeto, é importante demais que você faça um esforço para que todos os seus projetos sejam acessíveis. Eu sei que isso não é a realidade até hoje no mercado e provavelmente nunca será até que esse processo seja automatizado.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Existem uma série de tarefas manuais que nós delegamos para ferramentas criadas afim de economizar parte do nosso tempo evitando a execução de tarefas repetitivas, automatizando o workflow do front-end. Só para citar algumas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pre-processadores CSS:&lt;/strong&gt; Sass, Less, Stylus&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task runners:&lt;/strong&gt; Gulp, Grunt , Make, NPM Scripts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scaffolding:&lt;/strong&gt; Yeoman, Slush&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependências/Module Bundles:&lt;/strong&gt; Bower, NPM, Yarn, Webpack, Duo, RequireJS, Browserify, JSPM, Rollup&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SPA/Libraries/Frameworks:&lt;/strong&gt; React, Angular, Vue.js, Backbone, EmberJS, todomvc, Polymer, Lodash, Aurelia, MeteorJS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Frameworks/Libraries:&lt;/strong&gt; SemanticUI, Bootstrap, Foundation, UiKit, YUI, Susy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JS Test&lt;/strong&gt;: Mocha, Jasmine, QUnit, Ava, Tape, Jest&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JS Templates:&lt;/strong&gt; Underscore, Mustache, Handlebars, DoT, Dust, EJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mas mesmo com todas essas ferramentas, o core da responsabilidade de um front-end ainda continua sendo &lt;strong&gt;implementar layout original&lt;/strong&gt; e &lt;strong&gt;integrar a interface com o back-end&lt;/strong&gt;. Você ainda continua &lt;strong&gt;replicando&lt;/strong&gt; o layout que alguém passou dias desenhando e integra o conteúdo que está numa API, que outra pessoa criou. Seu dia se resume em alternar entre as janelas do Sublime / Sketch / Browser / Sublime / API / Browser / Sublime.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Automation isn&amp;#8217;t about being lazy. It&amp;#8217;s about being efficient.&amp;#8221; &amp;#8212; Addy Osmani&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esse processo se torna tedioso e a lista de requisitos para tentar tornar o trabalho de front-end eficiente só aumenta. Toda tarefa mecânica, repetitiva e manual tende a ser automatizada e na minha opinião, em pouco tempo, &lt;strong&gt;não vamos precisar de alguém executando o trabalho de front-end de ponta a ponta&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Okay, respira. Isso é a minha opinião. Dado que o front-end é a parte mais operacional de todo o processo, mais cedo ou mais tarde todo o trabalho executado no front-end vai ser automatizado. A parte mais difícil são essas duas tarefas que nós fazemos desde os primórdios. Contudo, elas já podem estar com seus dias contados.&lt;/p&gt;

&lt;h2 id=&#34;trabalhando-com-dados-reais-direto-no-design&#34;&gt;Trabalhando com dados reais direto no Design&lt;/h2&gt;

&lt;p&gt;Você pode não ser designer, mas há uma premissa no mundo dos designers que diz que &lt;strong&gt;você deve trabalhar sempre com conteúdo real&lt;/strong&gt;. Isso quer dizer que entregar um layout com texto em &lt;em&gt;Lorem Ipsum Dolor&lt;/em&gt; é coisa de designer júnior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;If your site or application requires data input, enter real and relevant words and type the text, don’t just paste it in from another source.&amp;#8221; &amp;#8212; Jason Fried&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A ideia é que você crie um layout da forma mais fiel possível usando os termos, palavras, nomes, datas etc, afim de chegar mais perto da experiência do usuário.&lt;/p&gt;

&lt;p&gt;Atualmente a maioria dos programas visuais utilizados para criar layouts para web tem alguma feature ou plugin que permite a integração com alguma fonte de dados que contenha o conteúdo real.&lt;/p&gt;

&lt;p&gt;Por exemplo o Sketch, que é o programa de criação visual mais querido do momento, conta com plugins que permitem a integração direta entre API e layout. Veja por exemplo o vídeo abaixo demonstrando a utilização do plugin Craft (também disponível para Photoshop):&lt;/p&gt;

&lt;p&gt;Ou essa demonstração que usa a API do Stackoverflow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Em pouco tempo, não vamos precisar de alguém executando o trabalho de front-end de ponta a ponta.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O ponto aqui é: nós só precisamos criar o layout uma vez, usando o programa desejado (Sketch/Photoshop/Figma/Adobe XD etc) e pronto. Não precisamos de uma pessoa para refazer esse layout com HTML/CSS/JS de forma alguma. Isso nos leva para uma segunda discussão: mesmo com o design pronto, usando dados reais de uma API, nós ainda precisamos que ele seja acessível pelos browsers. Como resolvemos isso?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Obs.: E aquele movimento do &amp;#8220;Design in the Browser&amp;#8221;? Esse é um movimento criado exatamente para evitar o trabalho de produzir duas vezes o mesmo layout. Mas é MUITO melhor fazer um design usando um programa visual do que escrever direto no código. IMHO.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;código-bonito-não-é-importante&#34;&gt;Código bonito não é importante&lt;/h2&gt;

&lt;p&gt;Desde sempre os front-ends escrotizavam o código que era gerado automaticamente por programas como o Dreamweaver. Eles tinham uma razão pra isso: o código era completamente horrível. Era um tempo onde a conexão com a internet era precária e tudo o que pudéssemos fazer para melhorar o carregamento do site, nós fazíamos. O código gerado por programas Wysiwyg tinha vários problemas: era difícil de ler, não havia semântica alguma, continha código inútil e muitas vezes não era compatível com todos os browsers. Tudo isso fazia com que o código limpo, semântico, enxuto e acessível tivesse um valor inestimável.&lt;/p&gt;

&lt;p&gt;Código limpo era sinônimo de bom ranking no Google, boa compatibilidade entre os browsers, performance de carregamento garantida, produtividade entre os membros do time por causa da legibilidade do código, facilidade de manutenção etc etc etc.&lt;/p&gt;

&lt;p&gt;Hoje, boa parte desses problemas foram resolvidos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;os browsers tem uma ótima complacência com os padrões web, extinguindo a maioria dos problemas de compatibilidade de layout;&lt;/li&gt;
&lt;li&gt;a performance é atacada em várias frentes: processo de build dos assets, tecnologias como HTTP/2 e até a evolução da conexão que fica mais rápida a cada ano;&lt;/li&gt;
&lt;li&gt;a manutenção e a legibilidade do código HTML/CSS não é mais um problema sério, já que o HTML é facilmente escrito usando poucas tags e o CSS tem os pré-processadores, que auxiliam muito na hora de definir padrões, além das boas práticas;&lt;/li&gt;
&lt;li&gt;o JS está bem assessorado por frameworks, libraries e uma série de boas práticas que se responsabilizam pela parte pesada do trabalho, deixando pouca margem de erro para os devs;&lt;/li&gt;
&lt;li&gt;e o mais importante para mim é que a semântica não está mais no HTML. Desde a vinda de tecnologias com o JSON-LD, a semântica não está mais atrelada ao código HTML e isso é ótimo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu sei que mesmo que grande parte da responsabilidade fique na mão dos frameworks, bibliotecas e ferramentas, o dev tem grandes chances de fazer merda com o pedaço de código que ele cuida. Não olha pro seu amiguinho do lado, coitado&amp;#8230; Todos nós cometemos erros&amp;#8230; uns mais, outros menos.&lt;/p&gt;

&lt;p&gt;Mas entenda uma coisa: &lt;strong&gt;código bonito, não é mais algo importante&lt;/strong&gt;. As ferramentas que nos auxiliam hoje para buildar os assets podem ser usadas por programas/robôs ao criar automaticamente código HTML/CSS/JS a partir de layouts produzidos em programas como Sketch. Veja por exemplo &lt;a href=&#34;https://github.com/sskyy/blade&#34;&gt;esse plugin&lt;/a&gt; que não é mais atualizado desde 2015 já tentava automatizar a exportação de código no Sketch. O cara estava tentando fazer código HTML a partir do layout desenhado no Sketch versão 3. Hoje o Sketch está na versão 42. E sabe de uma coisa: na versão 43 o Sketch está abrindo o código dos seus arquivos em formato JSON. O que nos leva para o próximo assunto.&lt;/p&gt;

&lt;h3 id=&#34;automatização-do-design&#34;&gt;Automatização do Design&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;We have a new file format which is more compact, and enables more powerful integrations for third-party developers. &amp;#8212; &lt;a href=&#34;https://rink.hockeyapp.net/apps/0172d48cceec171249a8d850fb16276b&#34;&gt;Sketch Team&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Isso quer dizer que o Sketch se transformará em uma plataforma de desenvolvimento. Abrindo o código dos seus arquivos, qualquer um conseguirá ler esses arquivos e partir daí criar &lt;strong&gt;qualquer coisa&lt;/strong&gt;. Quanto tempo para alguém criar um plugin que lê o arquivo do Sketch em formato JSON e &lt;strong&gt;gera automaticamente HTML/CSS/JS&lt;/strong&gt; a partir de um layout Sketch?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Computadores evoluem. Se os princípios mudassem não haveria base para a evolução. &amp;#8211; Caio Vaccaro&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, mas espera aí: mesmo antes desse formato novo de arquivo do Sketch, já existia algumas ferramentas que talvez você não conhecia como o &lt;a href=&#34;https://protoship.io/tools/teleport.html&#34;&gt;Teleport&lt;/a&gt;, que converte &lt;strong&gt;qualquer website&lt;/strong&gt; em um artboard do Sketch. E também o &lt;a href=&#34;https://protoship.io/tools/uipad.html&#34;&gt;UIPad&lt;/a&gt;, que converte layout do Sketch em HTML/CSS e React! Se liga:&lt;/p&gt;

&lt;p&gt;Essa tendência já estava sendo desenhada há tempos. É a coisa mais inteligente de se fazer. Você pode fazer coisas mais importantes do que ficar sentado na frente do computador alternando entre browser, layout, browser, layout.&lt;/p&gt;

&lt;p&gt;Okay: nós temos um design que se integra com a API, puxando dados reais do sistema. Nós temos um programa que design que exporta o layout para código HTML/CSS/JS pronto para ser usado. Mas ainda estamos usando código HTML/CSS/JS como antigamente. Há mais um passo que pode ser melhorado.&lt;/p&gt;

&lt;h3 id=&#34;webassembly-wasm&#34;&gt;WebAssembly (Wasm)&lt;/h3&gt;

&lt;p&gt;Outro ponto importante, que não tem nada definido ainda, mas que pode começar a fazer todo sentido é toda aquela &lt;a href=&#34;https://tableless.com.br/o-webassembly-vem-ai/&#34;&gt;história do WebAssembly&lt;/a&gt;, que é um novo formato binário criado pelo Google Microsoft, Mozilla e vários outros.&lt;/p&gt;

&lt;p&gt;O formato de código binário do WebAssembly pode ser decodificado muito mais rápido do que o JavaScript é parseado. Isso realmente traz para a Web a experiência de programas nativos, principalmente no mobile.&lt;/p&gt;

&lt;p&gt;O legal é que outras linguagens podem ser compiladas para WebAssembly. Hoje o projeto está um pouco mais focado em C/C++, mas com certeza outras linguagens serão abrangidas. O objetivo principal do WebAssembly é a performance.&lt;/p&gt;

&lt;p&gt;Uma preocupação que surge no ar é que isso cheira monopólio. Lembra do Flash? Querendo ou não ele era uma alternativa de criar algo nativo na Web. Mas a graça é que:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;WebAssembly não substitui o JavaScript. Tudo tem retrocompatibilidade, tudo será executado no mesmo universo que o JS e a segurança terá as mesmas restrições que o JS;&lt;/li&gt;
&lt;li&gt;Não é só uma empresa ou grupo que está por trás do Wasm, mas várias como Firefox, Chromium, Edge e Webkit;&lt;/li&gt;
&lt;li&gt;Para rodar WebAssembly não será necessário rodar plugins de terceiros, já que os motores dos browsers serão totalmente compatíveis;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Está entendendo por que buscar por um código limpo (como conhecemos hoje) não faz mais tanto sentido?&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Mais cedo ou mais tarde a profissão de front-end como nós conhecemos até hoje &lt;strong&gt;vai deixar de existir&lt;/strong&gt;. Você que já é velho na área, talvez nem precise se preocupar, porque eu não acho que isso vai acontecer agora, mas você que acabou de começar, é melhor pensar duas vezes no futuro da sua carreira.&lt;/p&gt;

&lt;p&gt;Eu tenho certeza que a área de back-end também pode passar por esse processo, embora seja muito mais difícil de acontecer. E eu também acho que vai demorar muito (se chegar a acontecer) a automatização da parte criativa responsável pelo design dos layouts de produtos e websites.&lt;/p&gt;

&lt;p&gt;Eu não chuto em quanto tempo isso pode acontecer ou se vai acontecer. É mais um chute meu do que qualquer outra. Quero só abrir para discussão esse assunto. Mas até ontem &lt;a href=&#34;https://www.wired.com/2016/10/ubers-self-driving-truck-makes-first-delivery-50000-beers/&#34;&gt;carros e caminhões autônomos&lt;/a&gt; eram coisa de filme.&lt;/p&gt;

&lt;p&gt;Mas com certeza existem vários pontos ainda a serem resolvidos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A automatização de sites gigantes de conteúdo vai ocorrer?&lt;/li&gt;
&lt;li&gt;E sistemas/produtos, como vamos fazer?&lt;/li&gt;
&lt;li&gt;Coloque aqui sua dúvida maluca&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Minha outra aposta é sobre a profissão de UX, que vai desaparecer não porque suas responsabilidades serão automatizadas, mas por se tornar obsoleto mesmo. Esse é assunto para um outro artigo, mas se quiser pensar sobre isso agora, comece ouvindo &lt;a href=&#34;http://movimentoux.com/work/felipememoria/&#34;&gt;esse capítulo do podcast do Movimento UX&lt;/a&gt; com o &lt;a href=&#34;http://www.fmemoria.com.br/&#34;&gt;Felipe Memória&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;para-ler-mais&#34;&gt;Para ler mais&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dados reais no design&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shopify.com/partners/blog/91010886-3-easy-steps-for-working-with-realistic-data-in-sketch-using-json&#34;&gt;3 Easy Steps for Working with Realistic Data in Sketch Using JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@markjenkins/designing-with-data-7f6bcd907f0a#.95haya5yq&#34;&gt;Designing with Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.framer.com/prototype-with-real-data-in-framer-from-json-to-multi-device-and-internet-of-things-6eb1ae8b8325#.fo9b8i4gz&#34;&gt;Prototype with real data in Framer, from JSON to multi-device and internet of things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@anirudhs/project-comet-designing-with-real-data-959beccb5c1a#.v6khfndrh&#34;&gt;Adobe XD: Designing with Real Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sobre não usar texto fake em layouts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2010/01/lorem-ipsum-killing-designs/&#34;&gt;Lorem Ipsum is Killing Your Designs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thenextweb.com/dd/2015/04/09/why-designers-should-never-use-fake-text/#.tnw_zjSSHkxh&#34;&gt;Why designers should never use fake text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.creativebloq.com/design/stop-using-lorem-ipsum-7116907&#34;&gt;Stop using Lorem Ipsum!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://signalvnoise.com/archives/001083.php&#34;&gt;&amp;#8220;Getting Real&amp;#8221; design tip: Just say no to Lorem Ipsum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WebAssembly&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webassembly.org/docs/faq/&#34;&gt;FAQ do site WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tableless.com.br/o-webassembly-vem-ai/&#34;&gt;WebAssembly – a web compilada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/&#34;&gt;Google, Microsoft, Mozilla And Others Team Up To Launch WebAssembly, A New Binary Format For The Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaydson.com/webassembly-e-o-futuro-da-web/&#34;&gt;WebAssembly e o futuro da Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brendaneich.com/2015/06/from-asm-js-to-webassembly&#34;&gt;From asm.js to webassembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/&#34;&gt;The Web is getting its bytecode: WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sobre o cenário das ferramentas de front-end&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://frontend.directory/&#34;&gt;front-end.directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radify.io/blog/using-build-tools/&#34;&gt;Using front-end build tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://usablica.github.io/front-end-frameworks/compare.html&#34;&gt;A Collection Of Best Front End Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/showcases/front-end-javascript-frameworks?s=stars&#34;&gt;GitHub: Front-end JavaScript frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/front-end-tooling-trends-2017/&#34;&gt;Front-End Tooling Trends for 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.debugme.eu/front-end-web-developer-tools/&#34;&gt;Updated List: The 67 Very Best Front End Web Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techbeacon.com/most-popular-javascript-front-end-tools&#34;&gt;The most popular JavaScript front-end tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colorlib.com/wp/top-templating-engines-for-javascript/&#34;&gt;Top 10 Templating Engines for JavaScript To Improve and Simplify Your Workflow 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/addyosmani/automating-front-end-workflow&#34;&gt;Automating Front-end Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@caiovaccaro/javascript-state-of-the-union-2015-parte-3-281aa04bece1#.bulta9j6j&#34;&gt;Javascript State of the Union 2015, parte 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/Hugeinc/javascript-state-of-the-union-2015&#34;&gt;Slides &amp;#8211; Javascript State of the Union 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results&#34;&gt;The State of Front-End Tooling 2016 &amp;#8211; Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/front-end-roles-and-responsibilities-6ee8654f1649#.gsg5zdjtr&#34;&gt;Front-end Roles and Responsibilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Anotações sobre Progressive Web Apps</title>
      <link>http://tableless.com.br/anotacoes-sobre-progressive-web-apps/</link>
      <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/anotacoes-sobre-progressive-web-apps/</guid>
      <description>

&lt;p&gt;A idéia de escrever sobre Progressive Web Apps surgiu quando estudava para apresentar uma talk sobre o conceito ao pessoal do trabalho, percebi durante o processo que existe muito conteúdo bom pela internet afora, porém senti que alguns conceitos estavam separados uns dos outros, então decidi escrever um documento agrupando todos estes dados que encontrei espalhados por aí para facilitar a compreensão e a forma que iria passar isto para minha equipe. Depois de todo trabalho de pesquisa tive a idéia, porque não compartilhar isto com as pessoas? Altamente incentivado pelos colegas de trabalho, resolvi revisar o documento e postar para os leitores do tableless, acredito que vai ser uma boa base para iniciantes no assunto. Fica aqui uma observação antes de começarmos, não tenho nenhuma intenção e escrever um documento canônico sobre Progressive Web Apps, como verão a seguir é um assunto em construção e em constante evolução, muitas coisas que gostaríamos de usar ainda estão sendo definidas pela comunidade. Agora estamos prontos para começar, espero que gostem 🙂 .  &lt;/p&gt;

&lt;h2 id=&#34;conceitos-e-motivações&#34;&gt;Conceitos e motivações&lt;/h2&gt;

&lt;p&gt;  Pesquisando sobre Progressive Web Apps &amp;#8211; (PWA) percebemos que não é um conceito ou uma especificação única, são na verdade um conjunto de idéias que foram agrupadas com com o intuito de promover uma melhor experiência para o usuário mobile para os usuários, resolvendo alguns problemas que um “simples” site responsivo não poderia resolver. PWAs criam uma aproximação dos usuários já fidelizados, aqueles usuários assíduos que já acompanham seu conteúdo, e aprimoram a experiência mobile desses usuários de forma progressiva (não confundir com “progressive enhancement”, veremos ele a seguir), promovendo uma imersão muito próxima do que seria um app nativo, porém não coerciva ou intrusiva, pois não obriga que usuários corriqueiros ou na primeiro visita ao seu site, tenham que baixar um App para ter acesso ao seu conteúdo. Isto garante que qualquer usuário possa acessar os recursos de sua aplicação web de uma forma tão simples quanto acessa a própria web. Todos estes conceitos envolvidos em PWA tentam resolver um dos grandes problemas mobile de hoje, nós temos millhões de aplicativos disponíveis para serem baixados e temos umas dezenas deles instalados em nosso aparelho que fazem nada de relevante e que muitas vezes fomos obrigados a instalar para ter acesso a algo temporário, quando na verdade precisamos de só uma meia dúzia deles. Por outro lado nós temos um numero muito maior de websites disponíveis na internet, mas que mesmo com as iniciativas para web responsiva a usabilidade, ainda não conseguem entender as espectativas dos usuarios. PWAs são caras legais pois eles são uma iniciativa em direção a um lugar comum onde todos queremos chegar para “Tornar a web um lugar melhor”.  &lt;/p&gt;

&lt;h3 id=&#34;webmobile-ou-app-nativo-figure&#34;&gt;WebMobile ou App Nativo?&lt;figure&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2016/12/c7NJRa2.gif&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;“Porque não los dos?”&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;  Muito se discute ainda sobre estratégia mobile e os argumentos de hardware, performance geralmente são postos à mesa, porém como Sergio Lopes cita no livro, A Web Mobile, A Web é boa o suficiente para a maioria dos cenário possível, portanto no momento de tomar a decisão de qual estratégia mobile seguir, o que importa mais é o foco no usuário e as expectativas que ele possui com sua marca, produto ou empresa. Existem também aqueles que apelam para os numeros alegando que os usuarios mobile passam 80% do seu tempo utilizando aplicativos e eles estão certos, pena, que não serão os seus aplicativos. Basta darmos uma olhada em nossos celulares, quantos de nós utiliza mais que os aplicativos criados pelas gigantes do mercado já consolidadas e estabilizadas?&lt;/p&gt;

&lt;h4 id=&#34;estretégia-web-fisrt&#34;&gt;Estretégia Web Fisrt&lt;/h4&gt;

&lt;p&gt;Web é uma solução muito interessante para aqueles que já possuem uma marca ou produto web e estão pensando em iniciar um projeto mobile, no entanto para aqueles que vão iniciar um novo produto, um produto inovador que não possua concorrentes e expectativas por parte dos usuários, uma estratégia baseada diretamente em apps pode ser a melhor saída. O que nós entendemos até aqui é que se um produto novo que não tem um público já atingido, seja por você ou por algum concorrente que já lançou um app para o mesmo nicho de mercado, ele não é capaz de gerar expectativas por parte dos usuários, porém quando já existe uma estratégia online estes usuários já possuem esta expectativa com a marca, assim sendo uma estratégia Web Pode ser mais interessante. Em muitos casos pode-se assumir uma estratégia “Web First”, onde nós podemos lançar a marca ou produto no mercado sempre primeiramente pela versão web onde todos os usuários terão acesso, então depois de consolidados no mercado podemos partir para uma estratégia diferente e é exatamente ai que as PWAS irão aparecer.&lt;/p&gt;

&lt;h3 id=&#34;porque-usar-progressive-web-app&#34;&gt;Porque usar Progressive Web App?&lt;/h3&gt;

&lt;p&gt;Segue abaixo uma lista de motivos que eu encontrei para justificar o uso de PWAs como primiera estratégia em relação a Apps nativos:&lt;/p&gt;

&lt;h4 id=&#34;porque-é-web&#34;&gt;Porque é Web:&lt;/h4&gt;

&lt;p&gt;PWAs terão o comportamento e imersão de um App nativo, com toda a acessibilidade e recursos que um website, isto quer dizer que seu conteúdo estará disponível a todos em todos os dispositivos, seja mobile, desktop, na tv da sala ou em seu tamagotchi.&lt;/p&gt;

&lt;h4 id=&#34;apps-são-inconvenientes&#34;&gt;Apps são inconvenientes:&lt;/h4&gt;

&lt;p&gt;Como já citado acima, para um usuário que visita sua página pela primeira vez, que talvez nem conheça o seu serviço ou produto, pode não ser muito confortável(e não será) ter que baixar um app, muitas vezes grande, muitas vezes em uma conexão ruim e muitas vezes conflitante com o pouco espaço de armazenamento do aparelho, somente porque você não proveu uma solução online para o problema dele.&lt;/p&gt;

&lt;h4 id=&#34;usuariofirst-porque-relacionamentos-possessivos-acabam-cedo&#34;&gt;“UsuarioFirst”, Porque relacionamentos possessivos acabam cedo:&lt;/h4&gt;

&lt;p&gt;Todas as estratégias das PWAs baseiam-se fortemente nas expectativas do usuário, suas experiências e necessidades, em momento algum você deve obrigá-lo a fazer algo ou a tomar uma decisão por ele, você deve prover a melhor experiência possível sempre. Acredito que de todos os conceitos que vi sobre PWAs este foi um dos mais repetidos e se mostrou para mim o mais importante dos conceitos, foco 100% no usuário.&lt;/p&gt;

&lt;h4 id=&#34;porque-você-não-quer-perder-público&#34;&gt;Porque você não quer perder público:&lt;/h4&gt;

&lt;p&gt;para cada etapa que você obriga seus usuários a enfrentarem até chegar a seu conteúdo, você irá perder em torno de 20% do seu público, como explicado por &lt;a href=&#34;https://www.youtube.com/watch?v=MyQ8mtR9WxI&#34;&gt;Alex Russell em sua palestra sobre Progressive Web Apps em 2015&lt;/a&gt;. Isto que dizer que entre entrar na loja, baixar e instalar seu aplicativo, você está deixando usuários preciosos insatisfeitos.&lt;/p&gt;

&lt;h4 id=&#34;progressivamente-aprimorado-progressive-enhancement&#34;&gt;Progressivamente aprimorado (Progressive Enhancement):&lt;/h4&gt;

&lt;p&gt;Tão importante que faz parte do nome que define o conceito, isto que dizer que sua aplicação funciona para todos os usuários, independentemente da escolha de navegador, pois são criados com aprimoramento progressivo como princípio central.&lt;/p&gt;

&lt;h4 id=&#34;progressivamente-instalado&#34;&gt;Progressivamente instalado:&lt;/h4&gt;

&lt;p&gt;Porque Você irá prover toda a solução online para seu usuário, então conforme ele torna-se assíduo consumidor do seu conteúdo você poderá oferecer a ele, o direito de escolha para que tenha uma experiência mais próxima da marca em sua home screen, permitir que ele escolha entre continuar acessando normalmente pelo browser ou ainda baixar um aplicativo que pode lhe possibilitar mais recursos.&lt;/p&gt;

&lt;h4 id=&#34;engajamento&#34;&gt;Engajamento:&lt;/h4&gt;

&lt;p&gt;Uma vez que você promove uma aproximação progressiva e totalmente acessível com os usuários, você naturalmente conseguirá uma proximidade maior com os mesmo, e agora com PWA podemos fazer com que esta aproximação seja facilitada pois o acesso ao seu conteúdo estará a um click de distância, mesmo antes dele ter decidido por baixar o seu App(supondo que você tenha optado por fazer um), isto irá gerar um engajamento muito maior do público.&lt;/p&gt;

&lt;h4 id=&#34;reengajáveis&#34;&gt;Reengajáveis:&lt;/h4&gt;

&lt;p&gt;Facilitam o reengajamento por meio de recursos como notificações push.&lt;/p&gt;

&lt;h4 id=&#34;compartilhamento-de-conteúdo&#34;&gt;Compartilhamento de conteúdo:&lt;/h4&gt;

&lt;p&gt;Permite que os usuários compartilhem seu conteúdo com outras pessoas de maneira fácil a partir de hiperlinks assim como seria em um site convencional.&lt;/p&gt;

&lt;h4 id=&#34;funcionam-offline-e-são-constantemente-atualizados&#34;&gt;Funcionam Offline e são constantemente Atualizados:&lt;/h4&gt;

&lt;p&gt;Todo o conteúdo será guardado em cache e estará disponibilizado para o seu usuário mesmo que ele não tenha acesso a internet. Sempre que for possível e houver conexão o Service Worker pode solicitar a versão mais atualizada do se WebApp e gerenciar de acordo com a estratégia escolhida pela equipe, para que ele seja salvo e o cache antigo será deletado.&lt;/p&gt;

&lt;h4 id=&#34;seguros&#34;&gt;Seguros:&lt;/h4&gt;

&lt;p&gt;Toda informação será veiculada por HTTPS para impedir o rastreamento e assegurar que o conteúdo não foi adulterado.&lt;/p&gt;

&lt;h3 id=&#34;próximos-passos-com-pwas&#34;&gt;Próximos passos com PWAs&lt;/h3&gt;

&lt;p&gt;Bem, este foi um pedaço do conteúdo com uma pequena introdução sobre PWAs, espero que tenham gostado. Eu achei que o conteúdo estava ficando muito grande então decidi dividir em dois artigos para a leitura não fica maçante, então no próximo teremos os principais aspectos de &lt;strong&gt;como iniciar com Progressive Web Apps?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Web content composed with the &lt;a href=&#34;https://html-online.com/editor/&#34;&gt;online wysiwyg editor&lt;/a&gt;. Please subscribe for a membership to remove promotional messages like the above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Instalando e configurando NGINX via Homebrew</title>
      <link>http://tableless.com.br/instalando-e-configurando-nginx-via-homebrew/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/instalando-e-configurando-nginx-via-homebrew/</guid>
      <description>

&lt;h1 id=&#34;instalando-nginx-no-mac-com-homebrew&#34;&gt;Instalando NGINX no Mac com Homebrew&lt;/h1&gt;

&lt;p&gt;Faz um tempo que deixei de usar Apache como Web Server padrão, tanto no servidor do Tableless, quanto para projetos pessoais. Se você quiser instalar o NGINX no seu Mac, usando Homebrew, basta seguir os passos abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;brew install nginx
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/first-command.png&#34; alt=&#34;first-command&#34; width=&#34;1172&#34; height=&#34;670&#34; class=&#34;aligncenter size-full wp-image-56786&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, o NGINX já deve estar rodando. Para testar, rode o comando abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sudo nginx
&lt;/pre&gt;

&lt;p&gt;Agora entre em &lt;strong&gt;localhost:8080&lt;/strong&gt; pelo seu navegador. Deve aparecer uma tela mais ou menos igual a essa:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/nginx-works.png&#34; alt=&#34;nginx-works&#34; width=&#34;976&#34; height=&#34;668&#34; class=&#34;aligncenter size-full wp-image-56787&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, vamos agora configurar nosso NGINX. Primeiro, vamos querer mudar a porta onde o NGINX está respondendo que é &lt;strong&gt;8080&lt;/strong&gt; para &lt;strong&gt;80&lt;/strong&gt;. Para tanto, pare o servidor do NGINX:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sudo nginx -s stop
&lt;/pre&gt;

&lt;p&gt;Para que não dê alguma treta obscura, pare o Apache também.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sudo apachectl stop
&lt;/pre&gt;

&lt;p&gt;O arquivo de configuração do NGINX no Mac, via Homebrew fica nesse endereço &lt;strong&gt;/usr/local/etc/nginx/nginx.conf&lt;/strong&gt;. Abra-o com seu editor de texto predileto.&lt;/p&gt;

&lt;p&gt;Você vai perceber que há uma série de configurações default. Provavelmente, na linha 36 vai estar o bloco &lt;strong&gt;server&lt;/strong&gt;, com a opção da porta. Mude para 80. Salve e reinicie o NGINX.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sudo nginx
&lt;/pre&gt;

&lt;p&gt;Abra seu navegador no &lt;strong&gt;localhost&lt;/strong&gt;. Deve estar funcionando.&lt;/p&gt;

&lt;h2 id=&#34;mudando-o-path-default&#34;&gt;Mudando o path default&lt;/h2&gt;

&lt;p&gt;Aqui no meu Mac, eu gosto de usar os projetos na pasta &lt;strong&gt;~/Sites&lt;/strong&gt;. Por default, o Brew diz que a pasta default é &lt;strong&gt;/usr/local/Cellar/nginx/3.2.1/html&lt;/strong&gt;, onde &lt;strong&gt;3.2.1&lt;/strong&gt; é a versão do seu NGINX. Para descobrir a versão do seu NGINX, basta digitar &lt;strong&gt;nginx -v&lt;/strong&gt; no seu terminal. O meu retornou &lt;strong&gt;nginx version: nginx/1.10.2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Abra novamente o &lt;strong&gt;nginx.conf&lt;/strong&gt;. Provavelmente ali na linha 44, vai ter algo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;location / {
    root   html;
    index  index.html index.htm;
}
&lt;/pre&gt;

&lt;p&gt;Mude o &lt;strong&gt;root html&lt;/strong&gt; para &lt;strong&gt;root [endereço da pasta]&lt;/strong&gt;. Aqui no meu ficou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;location / {
    root   /Users/diegoeis/Sites;
    index  index.html index.htm;
}
&lt;/pre&gt;

&lt;p&gt;Tudo já deve estar funcionando agora.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como instalar Node.js no Linux corretamente (Ubuntu, Debian, Elementary OS)</title>
      <link>http://tableless.com.br/como-instalar-node-js-no-linux-corretamente-ubuntu-debian-elementary-os/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-instalar-node-js-no-linux-corretamente-ubuntu-debian-elementary-os/</guid>
      <description>

&lt;p&gt;Recentemente comecei a minha migração do JSF para o Angular então busquei por um bom curso, pela documentação do &lt;em&gt;Framework&lt;/em&gt; e um bom livro técnico.&lt;/p&gt;

&lt;p&gt;No caso do curso escolhi inicialmente o do &lt;a href=&#34;https://twitter.com/flaviohalmeida&#34;&gt;Flávio Almeida&lt;/a&gt; na &lt;a href=&#34;https://www.alura.com.br/curso-online-angular2-parte1&#34;&gt;Alura&lt;/a&gt; e logo de cara fica claro que não é um &lt;em&gt;Framework&lt;/em&gt; para iniciantes no mundo do JavaScript e nem para iniciantes no mundo da programação, o próprio Flávio avisa sobre isso mais de uma vez além de informar sobre a necessidade de dominar o terminal (o terror dos novatos) do seu sistema operacional.&lt;/p&gt;

&lt;p&gt;Neste curso o Flávio já começa explicando como instalar os requisitos básicos para se começar a estudar sendo basicamente necessário ter instalado o &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt;, qualquer editor de texto (utilizo muito o &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;SublimeText&lt;/a&gt;, mas pra quem ta começando recomendo usar o &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Code&lt;/a&gt; porque ele nativamente consegue trabalhar muito bem com Angular e Node) e o NPM.&lt;/p&gt;

&lt;p&gt;Em distribuições &lt;em&gt;Debian Based&lt;/em&gt; é muito comum utilizar o comando &lt;strong&gt;apt install -nome do pacote-&lt;/strong&gt; e com o &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt; isso pode lhe trazer problemas, novamente o Flávio avisa sobre o possível problema. Entretanto tenho certeza que os mais novos no linux vão preferir utilizar o comando &lt;strong&gt;apt install -nome do pacote-&lt;/strong&gt; do que fazer a instalação do pacote binário e muito provavelmente isso vai quebrar tudo, porque até o momento que estou escrevendo esse texto os repositórios do Debian estão desatualizados (o Debian tem o costume de demorar para atualizar seus repositórios).&lt;/p&gt;

&lt;p&gt;Minha recomendação é que você &lt;strong&gt;não instale o Node&lt;/strong&gt; pelo comando &lt;strong&gt;sudo apt-get install -y nodejs&lt;/strong&gt; vai acontecer um conflito de nomes entre &lt;em&gt;node&lt;/em&gt; e &lt;em&gt;nodejs&lt;/em&gt;, parece besteira que uma simples nomenclatura quebre tudo, mas não é! O NPM que é o gerenciador de dependências vai ficar perdido e algumas funções não funcionarão.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/gritos.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calma! É tentador entrar em desespero, mas segure sua onda…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se você não deseja compilar o arquivo binário de instalação do Node na mão grande, a solução de instalação contínua simples, instale o NVM primeiro e depois o Node. O legal do NVM é que você pode instalar várias versões do Node e ficar alternando entre elas, mas antes de instalar o NVM precisamos de alguns pacotes de dependências que já estão no repositório de sua distribuição Debian Based.&lt;/p&gt;

&lt;h4 id=&#34;sudo-apt-get-update-sudo-apt-get-install-build-essential-libssl-dev&#34;&gt;&lt;em&gt;sudo apt-get update sudo apt-get install build-essential libssl-dev&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Agora que você já tem o necessário em seu sistema vamos instalar o NVM:&lt;/p&gt;

&lt;h4 id=&#34;curl-sl-https-raw-githubusercontent-com-creationix-nvm-v0-31-0-install-sh-7-o-install-nvm-sh&#34;&gt;&lt;em&gt;curl -sL&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh&#34;&gt;&lt;em&gt;https://raw.githubusercontent.com/creationix/nvm/&lt;/em&gt;&lt;strong&gt;&lt;em&gt;v0.31.0&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;/install.sh&lt;/em&gt;&lt;/a&gt; _-o install&lt;em&gt;nvm.sh&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;O número da versão que está em negrito pode mudar com o tempo, então recomendo você acessar a &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;página do projeto no GitHub&lt;/a&gt; e procurar pela nova versão.&lt;/p&gt;

&lt;p&gt;Execute o scrpit com:&lt;/p&gt;

&lt;h4 id=&#34;bash-install-nvm-sh&#34;&gt;_bash install&lt;em&gt;nvm.sh&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Não tenha medo, o que está sendo feito aqui é o download de um script e a execução do mesmo, tudo vai ser instalado em um diretório oculto na pasta do seu usuário &lt;strong&gt;não é necessário utilizar o comando com&lt;/strong&gt; &lt;em&gt;sudo&lt;/em&gt; &lt;strong&gt;nesse caso&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora execute:&lt;/p&gt;

&lt;h4 id=&#34;nvm-ls-remote&#34;&gt;&lt;em&gt;nvm ls-remote&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Ele vai te exibir várias versões do Node e assim sabemos que o NVM está funcionando corretamente. Eu escolhi a versão mais recente do momento a v7.3.0, você pode instalá-la digitando:&lt;/p&gt;

&lt;h4 id=&#34;nvm-install-7-3-0&#34;&gt;&lt;em&gt;nvm install 7.3.0&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Caso você instale mais de uma versão e no futuro tenha necessidade de alternar entre elas utilize o comando:&lt;/p&gt;

&lt;h4 id=&#34;nvm-use-número-da-versão&#34;&gt;&lt;em&gt;nvm use -número da versão-&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Agora vamos verificar a versão do Node para ter certeza que tudo foi instalado corretamente utilizando o comando:&lt;/p&gt;

&lt;h4 id=&#34;node-v&#34;&gt;&lt;em&gt;node -v&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Pronto, agora você já pode dar continuidade aos seus estudos de Angular ou Node.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando uma aplicação de Chat simples com NodeJS e Socket.io</title>
      <link>http://tableless.com.br/criando-uma-aplicacao-de-chat-simples-com-nodejs-e-socket-io/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-uma-aplicacao-de-chat-simples-com-nodejs-e-socket-io/</guid>
      <description>

&lt;p&gt;Neste tutorial iremos abordar alguns conceitos do Socket.io criando um simples sistema de chat para browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dericeira/Simple-Chat-Socket.io/master/example.gif&#34; alt=&#34;https://raw.githubusercontent.com/dericeira/Simple-Chat-Socket.io/master/example.gif&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-socket-io&#34;&gt;O que é Socket.io?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://socket.io&#34;&gt;Socket.io&lt;/a&gt; é um uma biblioteca Javascript feita para construir aplicações real-time, possibilitando uma comunicação bi-direcional entre cliente e servidor. O socket.io utiliza as especificações de Web Sockets (para quem quer saber mais, recomendo dar uma olhada &lt;a href=&#34;https://www.html5rocks.com/pt/tutorials/websockets/basics/&#34;&gt;neste ótimo artigo&lt;/a&gt; da HTML5 Rocks).&lt;/p&gt;

&lt;p&gt;O Socket.io roda, no lado do servidor, em NodeJS, e, no lado do cliente, ele roda diretamente no browser, possibilitando uma enorme gama de possibilidades de aplicações, como jogos, sistemas de notificações, real-time analytics e sistemas de chats e conversas em tempo real.&lt;/p&gt;

&lt;h2 id=&#34;setando-o-projeto&#34;&gt;Setando o projeto&lt;/h2&gt;

&lt;p&gt;Primeiramente, temos que instalar algumas bibliotecas que iremos utilizar no projeto, para isso usarei o &lt;a href=&#34;https://github.com/yarnpkg/yarn&#34;&gt;yarn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, vou adicionar ao projeto a biblioteca do Socket.io que rodará do lado do servidor.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add socketio&lt;/pre&gt;

&lt;p&gt;Também iremos utilizar o express:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add express&lt;/pre&gt;

&lt;p&gt;Também precisamos adicionar o Socket.io para o cliente (você pode utilizar a CDN oficial disponibilizada no site deles também):&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add socket.io-client&lt;/pre&gt;

&lt;p&gt;E, por último, usarei a biblioteca jQuery para manipular a DOM.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;yarn add jquery&lt;/pre&gt;

&lt;h2 id=&#34;fazendo-o-html-css&#34;&gt;Fazendo o HTML+CSS&lt;/h2&gt;

&lt;p&gt;Vamos criar um arquivo index.html e já deixar preparado o nosso template do sistema de chat.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;en&#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Simple chat&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;assets/css.css&#34;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&#34;nickname_container&#34; id=&#34;nick&#34;&amp;gt;

 &amp;lt;span&amp;gt;Type your nickname:&amp;lt;/span&amp;gt;
 &amp;lt;form id=&#34;submit&#34;&amp;gt;&amp;lt;input type=&#34;text&#34; id=&#34;nickname&#34; /&amp;gt;&amp;lt;/form&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div id=&#34;chat&#34; hidden&amp;gt;

 &amp;lt;div class=&#34;menu&#34; =&amp;gt;
 &amp;lt;div class=&#34;name&#34; id=&#34;name&#34;&amp;gt;Alex&amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;last&#34; id=&#34;time&#34;&amp;gt;18:09&amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;ol class=&#34;chat&#34;&amp;gt;
 
 &amp;lt;/ol&amp;gt;
 
 &amp;lt;input class=&#34;textarea&#34; type=&#34;text&#34; placeholder=&#34;Type here!&#34; id=&#34;textarea&#34; /&amp;gt;
&amp;lt;/div&amp;gt;
 &amp;lt;script src=&#34;node_modules/jquery/dist/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src=&#34;node_modules/socket.io-client/socket.io.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src=&#34;assets/js.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Repare que eu também criei o diretório assets, e criei os arquivos css.css e js.js.&lt;/p&gt;

&lt;p&gt;Não entrarei na parte do CSS, pois o foco aqui é o javascript, mas você pode ver o resultado no &lt;a href=&#34;https://github.com/dericeira/Simple-Chat-Socket.io/blob/master/assets/css.css&#34;&gt;github&lt;/a&gt;. Eu utilizei como base &lt;a href=&#34;https://codepen.io/Varo/pen/gbZzgr&#34;&gt;este pen&lt;/a&gt; para construir o layout.&lt;/p&gt;

&lt;h2 id=&#34;server-side&#34;&gt;Server-side&lt;/h2&gt;

&lt;p&gt;Vamos iniciar com a criação da parte de servidor do Socket.io, ou seja, iremos lidar com os eventos server-side.&lt;/p&gt;

&lt;p&gt;Iniciaremos criando um arquivo &lt;strong&gt;app.js&lt;/strong&gt; no diretório raíz e importaremos os módulos e faremos algumas operações iniciais:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var app = require(&#39;express&#39;)();
var http = require(&#39;http&#39;).Server(app);
var io = require(&#39;socket.io&#39;)(http);

var clients = {};

app.get(&#39;/&#39;, function(req, res){
res.send(&#39;server is running&#39;);
});

//SocketIO vem aqui

http.listen(3000, function(){
console.log(&#39;listening on port 3000&#39;);
});
&lt;/pre&gt;

&lt;p&gt;Este script implementa um servidor Node utilizando os módulos http e express (para roteamento).&lt;/p&gt;

&lt;p&gt;A variável clientes que está sendo criada servirá para armazenar nossa lista de clientes.&lt;/p&gt;

&lt;p&gt;Agora iremos adicionar o nosso primeiro evento do Socket.io, que será o &lt;strong&gt;connection&lt;/strong&gt;, que dispara a cada vez que um cliente se conecta ao socket.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;io.on(&#34;connection&#34;, function (client) {
    console.log(&#39;user connected&#39;);
});&lt;/pre&gt;

&lt;p&gt;Para nossa sala de chat, precisaremos implementar outros 3 eventos: &lt;strong&gt;join&lt;/strong&gt;, &lt;strong&gt;send&lt;/strong&gt; e &lt;strong&gt;disconnect&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;io.on(&#34;connection&#34;, function (client) {
  client.on(&#34;join&#34;, function(name){
    console.log(&#34;Joined: &#34; + name);
    clients[client.id] = name;
    client.emit(&#34;update&#34;, &#34;You have connected to the server.&#34;);
    client.broadcast.emit(&#34;update&#34;, name + &#34; has joined the server.&#34;)
  });

  client.on(&#34;send&#34;, function(msg){
    console.log(&#34;Message: &#34; + msg);
    client.broadcast.emit(&#34;chat&#34;, clients[client.id], msg);
  });

  client.on(&#34;disconnect&#34;, function(){
    console.log(&#34;Disconnect&#34;);
    io.emit(&#34;update&#34;, clients[client.id] + &#34; has left the server.&#34;);
    delete clients[client.id];
  });
});
&lt;/pre&gt;

&lt;p&gt;O evento join deverá ser disparado quando o cliente entrar no servidor, adicionando o id do cliente no array e emitindo dois novos eventos, nomeando-os de &lt;strong&gt;update&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note que há uma diferença entre o método &lt;strong&gt;client.emit&lt;/strong&gt; e o &lt;strong&gt;client.broadcast.emit&lt;/strong&gt;. O client.emit enviará a notificação somente para o cliente atual, ou seja, o cliente que acabou de entrar na sala de chat. O &lt;strong&gt;client.broadcast.emit&lt;/strong&gt; irá emitir para todos os clientes conectados, com exceção do que está executando a ação. Se utilizássemos o método &lt;strong&gt;io.emit&lt;/strong&gt;, a mensagem seria enviada a todos os clientes conectados ao socket. Abaixo uma série de exemplos de métodos disponíveis:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// enviar apenas para o cliente atual
client.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes, inclusive o atual
io.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes, exceto o atual
client.broadcast.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes (com exceção do atual) para uma sala específica
socket.broadcast.to(&#39;game&#39;).emit(&#39;message&#39;, &#39;nice game&#39;);

// enviar para todos os clientes em uma sala específica
io.in(&#39;game&#39;).emit(&#39;message&#39;, &#39;cool game&#39;);

// enviar para o atual, caso ele esteja na sala
client.to(&#39;game&#39;).emit(&#39;message&#39;, &#39;enjoy the game&#39;);

// enviar para todos os clientes em um namespace &#39;namespace1&#39;
io.of(&#39;namespace1&#39;).emit(&#39;message&#39;, &#39;gg&#39;);

// enviando para um socketid individual
client.broadcast.to(socketid).emit(&#39;message&#39;, &#39;for your eyes only&#39;);&lt;/pre&gt;

&lt;p&gt;Com todos esses métodos, conseguiríamos implementar salas específicas, mensagens individuais, etc. Porém nosso foco é mostrar a parte mais básica e entender o funcionamento.&lt;/p&gt;

&lt;h2 id=&#34;client-side&#34;&gt;Client-side&lt;/h2&gt;

&lt;p&gt;Com nosso servidor concluido e rodando, vamos passar para a parte de client-side de nossa aplicação de chat. Vamos ao &lt;strong&gt;js.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Primeiramente, inicializaremos o socket.io e criaremos uma variável &lt;strong&gt;ready&lt;/strong&gt;, setada como false. Esta variável será responsável por indicar se o usuário já informou ou não o seu nickname.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;$(document).ready(function(){
    var socket = io.connect(&#34;http://localhost:3000&#34;);
    var ready = false;
});
&lt;/pre&gt;

&lt;p&gt;Com esta implementação, já conseguimos disparar o evento &lt;strong&gt;connection&lt;/strong&gt; em nosso servidor. Porém, precisamos fazer com que o servidor receba a informação cada vez que um novo usuário entrar na sala informando o seu nickname.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#submit&#34;).submit(function(e) {
    e.preventDefault();
    $(&#34;#nick&#34;).fadeOut();
    $(&#34;#chat&#34;).fadeIn();
    var name = $(&#34;#nickname&#34;).val();
    var time = new Date();
    $(&#34;#name&#34;).html(name);
    $(&#34;#time&#34;).html(&#39;First login: &#39; + time.getHours() + &#39;:&#39; + time.getMinutes());

    ready = true;
    socket.emit(&#34;join&#34;, name);
});
&lt;/pre&gt;

&lt;p&gt;A função jQuery acima captura a submissão do formulário de nickname, fecha a tela de seleção de nick, mostra a tela de chat, seta a variável ready para true e executa um comando de socket, o &lt;strong&gt;socket.emit&lt;/strong&gt;, que informa para o nosso servidor que um novo usuário acabou de entrar na sala.&lt;/p&gt;

&lt;p&gt;Nada irá acontecer, pois ainda não temos o receptor do evento &lt;strong&gt;update&lt;/strong&gt;, que está sendo disparado no nosso servidor, então vamos criá-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;socket.on(&#34;update&#34;, function(msg) {
    if (ready) {
        $(&#39;.chat&#39;).append(&#39;&amp;lt;li class=&#34;info&#34;&amp;gt;&#39; + msg + &#39;&amp;lt;/li&amp;gt;&#39;)
    }
});
&lt;/pre&gt;

&lt;p&gt;Este código fará com que, a cada vez que o servidor emitir um update, o jQuery adicione uma nova linha no chat com a mensagem retornada.&lt;/p&gt;

&lt;p&gt;Agora, iremos fazer com que nossa aplicação envie as mensagens ao servidor a cada vez que o cliente apertar o enter no input de texto:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;$(&#34;#textarea&#34;).keypress(function(e){
    if(e.which == 13) {
         var text = $(&#34;#textarea&#34;).val();
         $(&#34;#textarea&#34;).val(&#39;&#39;);
         var time = new Date();
         $(&#34;.chat&#34;).append(&#39;&amp;lt;li class=&#34;self&#34;&amp;gt;&amp;lt;div class=&#34;msg&#34;&amp;gt;&amp;lt;span&amp;gt;&#39;
                      + $(&#34;#nickname&#34;).val() + &#39;:&amp;lt;/span&amp;gt;    &amp;lt;p&amp;gt;&#39; + text + &#39;&amp;lt;/p&amp;gt;&amp;lt;time&amp;gt;&#39; + 
                      time.getHours() + &#39;:&#39; + time.getMinutes() + &#39;&amp;lt;/time&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&#39;);
         socket.emit(&#34;send&#34;, text);
    }
});
&lt;/pre&gt;

&lt;p&gt;E, para concluir, precisamos fazer com que o socket.io observe todas as mensagens referente ao chat em si, e adicione à DOM:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;socket.on(&#34;chat&#34;, function(client,msg) {
 if (ready) {
    var time = new Date();
    $(&#34;.chat&#34;).append(&#39;&amp;lt;li class=&#34;other&#34;&amp;gt;&amp;lt;div class=&#34;msg&#34;&amp;gt;&amp;lt;span&amp;gt;&#39; + 
                 client + &#39;:&amp;lt;/span&amp;gt;&amp;lt;p&amp;gt;&#39; + msg + &#39;&amp;lt;/p&amp;gt;&amp;lt;time&amp;gt;&#39; + time.getHours() + &#39;:&#39; + 
                 time.getMinutes() + &#39;&amp;lt;/time&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&#39;);
 }
});&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Na minha opinião,  as sockets são uma das melhores funcionalidades do HTML5, e possuem uma infinidade de aplicação. O ganho de performance é espetacular se bem aplicado, uma vez que evita o uso de requisições HTTP em aplicações onde a necessidade de atualização é grande (baixa latência).&lt;/p&gt;

&lt;p&gt;Disponibilizei o código do tutorial no &lt;a href=&#34;https://github.com/dericeira/Simple-Chat-Socket.io&#34;&gt;github&lt;/a&gt; para quem se interessar, e estou aberto a tirar dúvidas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução bem rápida sobre vim</title>
      <link>http://tableless.com.br/introducao-bem-rapida-sobre-vim/</link>
      <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-bem-rapida-sobre-vim/</guid>
      <description>

&lt;p&gt;O &lt;strong&gt;vim&lt;/strong&gt; é um editor de texto muito conhecido no mundo Linux. Embora conheça faz tempo, eu nunca o utilizei exatamente por que a curva de aprendizado é terrivelmente longa. Aposto que você conhece alguém que já ficou preso no vim quando foi editar um arquivo no servidor e nem sabia como salvar e sair do arquivo. Normal quando se está começando e nem tem ideia de como o vim funciona.&lt;/p&gt;

&lt;p&gt;Só para avisar: eu uso Mac, mas é provável que tudo isso aqui funcione num Linux. Mas não tenho ideia se alguma coisa funcionaria no Windows.&lt;/p&gt;

&lt;h2 id=&#34;um-pouco-de-blá-blá-blá-histórico&#34;&gt;Um pouco de blá blá blá histórico&lt;/h2&gt;

&lt;p&gt;Se você for cavar informações na Web, vai encontrar várias informações interessantes sobre de onde o &lt;strong&gt;vim&lt;/strong&gt; surgiu. Primeiro, a palavra vim significa &lt;strong&gt;VI Improvement&lt;/strong&gt;. O vim é uma melhoria do editor &lt;strong&gt;vi&lt;/strong&gt;, que foi baseado num editor chamado &lt;strong&gt;ex&lt;/strong&gt;, que por sua vez foi baseado num editor chamado &lt;strong&gt;qed&lt;/strong&gt;, que por sua vez era uma melhoria de um editor chamado &lt;strong&gt;ed&lt;/strong&gt;, que talvez foi inspirado em outro editor. 😉&lt;/p&gt;

&lt;p&gt;Todas essas e outras informações você pode achar &lt;a href=&#34;https://en.wikipedia.org/wiki/Ed_(text_editor)&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;https://en.wikipedia.org/wiki/Vi&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O interessante do &lt;strong&gt;vim&lt;/strong&gt; é que você pode aprender praticamente TUDO sobre ele executando apenas o comando &lt;strong&gt;:help&lt;/strong&gt;. Abra o vim simplesmente digitando &lt;strong&gt;vim&lt;/strong&gt; no seu terminal e aperte &lt;strong&gt;ENTER&lt;/strong&gt;. Depois de aberto, digite &lt;strong&gt;:help&lt;/strong&gt; para abrir o manual. Lá tem TUDO o que você precisa saber. Eu poderia terminar esse artigo aqui e pronto. 😀&lt;/p&gt;

&lt;h2 id=&#34;modos-e-comandos-básicos&#34;&gt;Modos e comandos básicos&lt;/h2&gt;

&lt;p&gt;A curva de aprendizado do vim é gigante por que você primeiro precisa entender que: &lt;strong&gt;o mouse é seu inimigo&lt;/strong&gt;. A ideia é aumentar a produtividade. Parar de usar o teclado para usar o mouse enquanto estamos digitando código é perda de tempo. Logo, o objetivo é que você tente usar cada vez menos o mouse. Para isso, o vim tem alguns modos de controle:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No modo &lt;strong&gt;Normal&lt;/strong&gt; você pode executar todos os comandos normais do editor. Serve para você navegar e manipular o texto. Este é o modo que o vim inicia e que você volta toda vez que sai de outro modo usando a tecla &lt;strong&gt;ESC&lt;/strong&gt;. Geralmente, para navegar no texto, o pessoal do vim usa as seguintes teclas: &lt;strong&gt;h&lt;/strong&gt; para esquerda, &lt;strong&gt;j&lt;/strong&gt; para baixo, &lt;strong&gt;k&lt;/strong&gt; para cima e &lt;strong&gt;l&lt;/strong&gt; para direita. Eu ainda não me acostumei com isso e insisto em usar as setas do teclado. :-&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;O modo &lt;strong&gt;Visual&lt;/strong&gt; é como o modo &lt;strong&gt;Normal&lt;/strong&gt;, mas quando você navega pelas palavras ou linhas, elas são selecionadas. Quando um comando é executado, ele vai ter efeito apenas na área selecionada. Quando você está nesse modo, aparece um &amp;#8220;&lt;em&gt;&amp;#8212; VISUAL &amp;#8212;&lt;/em&gt;&amp;#8221; no rodapé da janela. Ela é ativada apertando a tecla &lt;strong&gt;v&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;O modo &lt;strong&gt;Select&lt;/strong&gt; é igual ao &lt;strong&gt;Visual&lt;/strong&gt;, mas um pouco parecido com o estilo de seleção do MS-Windows. Não se preocupe com esse modo&amp;#8230; me atrevo a dizer que você nunca vai usá-lo.&lt;/li&gt;
&lt;li&gt;O modo &lt;strong&gt;Insert&lt;/strong&gt; é onde você escreve e modifica o texto do arquivo (buffer). Ela é ativada apertando a tecla &lt;strong&gt;i&lt;/strong&gt;. Apertando a tecla &lt;strong&gt;i&lt;/strong&gt;, você poderá inserir ou apagar o texto onde o cursor está naquele momento.&lt;/li&gt;
&lt;li&gt;No modo &lt;strong&gt;Command-line&lt;/strong&gt; ou &lt;strong&gt;Cmdline&lt;/strong&gt;, você escreve um comando no rodapé da janela. Esse modo é ativado usando alguns comando como busca (&lt;strong&gt;?&lt;/strong&gt; ou &lt;strong&gt;/&lt;/strong&gt;) e o comando de filtro (&lt;strong&gt;!&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;O modo &lt;strong&gt;Ex&lt;/strong&gt; é ativado com o comando &lt;strong&gt;:&lt;/strong&gt;. Nesse modo, você vai executar comandos como salvar o arquivo (&lt;strong&gt;:w&lt;/strong&gt;), fechar o arquivo (&lt;strong&gt;:q&lt;/strong&gt;) ou até juntar os dois comandos (&lt;strong&gt;:wq&lt;/strong&gt;), além de outros.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Isso tudo parece complicado&amp;#8230; Só parece&amp;#8230; Vamos aprender na prática.&lt;/p&gt;

&lt;h2 id=&#34;na-prática-editando-e-salvando-um-arquivo&#34;&gt;Na prática: editando e salvando um arquivo&lt;/h2&gt;

&lt;p&gt;Abra seu terminal e entre na pasta do seu Desktop (ou qualquer outra pasta que você desejar). Agora execute o seguinte comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim teste.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Isso vai abrir uma instância do vim, editando um arquivo vazio chamado &lt;strong&gt;teste.md&lt;/strong&gt;. Agora, aperte a tecla &lt;strong&gt;i&lt;/strong&gt;. Este é o comando para entrar no modo de &lt;strong&gt;Insert&lt;/strong&gt; (ou Inserção). Digite &lt;em&gt;Hello World&lt;/em&gt;. O arquivo ainda não existe, por que você ainda não o salvou. Para salvar o arquivo, você precisa sair do modo de &lt;strong&gt;Insert&lt;/strong&gt; e voltar para o modo &lt;strong&gt;Normal&lt;/strong&gt;. Para fazer isso basta apertar a tecla &lt;strong&gt;ESC&lt;/strong&gt;. Agora, pra salvar o arquivo, exatamente na pasta em que você está, basta executar o comando &lt;strong&gt;:w&lt;/strong&gt;. Para sair do arquivo e voltar para o terminal, basta executar o comando &lt;strong&gt;:q&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Verifique agora se o arquivo existe e se o seu conteúdo é o esperado. Pode fazer isso usando qualquer outro editor de texto.&lt;/p&gt;

&lt;p&gt;Por enquanto, a interface do seu vim deve estar muito, mas muito feia. Vamos dar um jeito nisso.&lt;/p&gt;

&lt;h2 id=&#34;customizando-seu-vim&#34;&gt;Customizando seu vim&lt;/h2&gt;

&lt;p&gt;Como qualquer editor que se preze, o vim pode ser totalmente customizado. Eu nunca gostei de usar o vim &amp;#8211; estou aprendendo por pura curiosidade &amp;#8211; mas sempre gostei do visual simples e clean do editor. Você customiza o vim por meio do seu arquivo de configuração chamado &lt;em&gt;.vimrc&lt;/em&gt;. O &lt;em&gt;.vimrc&lt;/em&gt; vai guardar todas as configurações do editor e também quais os plugins que serão instalados, bem como algumas configurações desses plugins. Eu conheço um cara chamado &lt;a href=&#34;https://www.sergioaugrod.com.br&#34;&gt;Sérgio&lt;/a&gt; que tem &lt;a href=&#34;https://github.com/sergioaugrod/dotfiles/blob/master/.vimrc&#34;&gt;o vim mais legal que eu já vi&lt;/a&gt;. Ele me deu o &lt;strong&gt;.vimrc&lt;/strong&gt; dele e a partir dali eu modifiquei para ficar de acordo com as minhas necessidades (que eram bem mais simples que as dele).&lt;/p&gt;

&lt;p&gt;Para facilitar, existe um gerenciador de plugins para vim chamado &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt; (não vá se confundir com o &lt;a href=&#34;https://www.google.com.br/search?q=vando&amp;amp;safe=off&amp;amp;client=safari&amp;amp;rls=en&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=0ahUKEwiqhqm086TRAhXCF5AKHQqRBVAQ_AUICSgC&amp;amp;biw=2398&amp;amp;bih=1351#safe=off&amp;amp;tbm=isch&amp;amp;q=vando+calcinha&amp;amp;imgrc=eFoxWJye6tM-TM%3A&#34;&gt;Vando&lt;/a&gt;, hein?!). Eu fiz o meu &lt;em&gt;.vimrc&lt;/em&gt; se baseando nas configurações do &lt;a href=&#34;https://github.com/sergioaugrod/dotfiles/blob/master/.vimrc&#34;&gt;arquivo do Sérgio&lt;/a&gt;. Logo, sugiro que você faça o mesmo. O &lt;a href=&#34;https://github.com/diegoeis/configfiles/blob/master/vimrc&#34;&gt;meu está aqui&lt;/a&gt; e &lt;a href=&#34;https://github.com/sergioaugrod/dotfiles/blob/master/.vimrc&#34;&gt;o dele está aqui&lt;/a&gt;. A diferença dos dois são os plugins que serão instalados. O visual do editor é praticamente o mesmo.&lt;/p&gt;

&lt;p&gt;Para customizar seu vim, baixe algum dos &lt;em&gt;.vimrc&lt;/em&gt; citados acima e coloque na sua pasta Home (&lt;strong&gt;~/&lt;/strong&gt;). Feito isso, instale o &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;, vamos precisar dele.&lt;/p&gt;

&lt;p&gt;Depois abra o Terminal, digite &lt;strong&gt;vim&lt;/strong&gt; e aperte &lt;strong&gt;ENTER&lt;/strong&gt;. O vim feião do seu Mac/Linux vai abrir. Do jeito que ele abrir, digite &lt;strong&gt;:PluginInstall&lt;/strong&gt;. Deve aparecer uma tela mais ou menos assim:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/vundle.png&#34; alt=&#34;&#34; width=&#34;1139&#34; height=&#34;767&#34; class=&#34;aligncenter size-full wp-image-56793&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora feche e abra o Terminal e abra o vim novamente. Ele deve estar mais ou menos igual a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/vim.png&#34; alt=&#34;&#34; width=&#34;1139&#34; height=&#34;767&#34; class=&#34;aligncenter size-full wp-image-56792&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;instale-o-macvim&#34;&gt;Instale o MacVim&lt;/h2&gt;

&lt;p&gt;Bom, vamos facilitar para quem usa Mac, como eu. Para ter uma integração melhor com o Mac, eu uso o MacVim, que é simplesmente o &lt;strong&gt;vim&lt;/strong&gt;, só que mais integrado com o sistema operacional e standalone&amp;#8230; isso quer dizer que ele não está &amp;#8220;preso&amp;#8221; no Terminal. Por exemplo, você tem suporte a edição fullscreen, scroll e copy and paste como se fosse qualquer app do Mac&amp;#8230; basta instalar via brew ou &lt;a href=&#34;http://macvim-dev.github.io/macvim/&#34;&gt;baixar no site oficial&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install macvim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depois execute o comando abaixo ou coloque no seu &lt;strong&gt;.bash_profile&lt;/strong&gt; ou similar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias gvim=&#39;/Applications/MacVim.app/Contents/MacOS/Vim -g&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora, pra abrir um arquivo, basta digitar &lt;strong&gt;gvim [nome_do_arquivo]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;É uma boa ideia você ler o &lt;a href=&#34;https://github.com/macvim-dev/macvim/wiki/FAQ&#34;&gt;FAQ do MacVim&lt;/a&gt;. Tem muita coisa bem explicadinho lá.&lt;/p&gt;

&lt;p&gt;Essa &lt;a href=&#34;https://faraohh.files.wordpress.com/2009/01/vim-super_editor.pdf&#34;&gt;apresentação vai te ajudar muito a entender melhor o vim&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como camuflar seu ip like a ninja</title>
      <link>http://tableless.com.br/como-camuflar-seu-ip-like-ninja/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-camuflar-seu-ip-like-ninja/</guid>
      <description>

&lt;p&gt;Temos algumas formas de camuflar ip, alguns programas que nos auxiliam a fazer isso de forma fácil. A um tempo atrás eu estava usando o sistema operacional &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;WHONIX&lt;/strong&gt; para poder fazer esse tunelamento pra mim, ele é realmente eficaz e eu não precisei me preocupar muito com detalhes, porém eu testei algumas outras opções e tiveram duas que eu realmente gostei, uma é o &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;PROXYCHAINS&lt;/strong&gt; e a outra o &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;JONDO&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://anonymous-proxy-servers.net/en/jondo.html&#34;&gt;https://anonymous-proxy-servers.net/en/jondo.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://proxychains.sourceforge.net&#34;&gt;http://proxychains.sourceforge.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Ambas tem seus prós e contras obviamente, achei o &lt;strong&gt;proxychains&lt;/strong&gt; com mais liberdade para trabalhar em diversas áreas e o &lt;strong&gt;jondo mais eficaz no que se propõe a fazer, &lt;/strong&gt;porém um pouco mais limitado.&lt;/p&gt;

&lt;p&gt;Vou ensinar as duas formas ok? Deste modo você pode fazer testes com as duas e escolher qual é a melhor para &lt;strong&gt;o seu propósito&lt;/strong&gt;, vamos lá:&lt;/p&gt;

&lt;h3 id=&#34;proxychains&#34;&gt;ProxyChains&lt;/h3&gt;

&lt;p&gt;O &lt;strong&gt;proxychains&lt;/strong&gt; é um programa que faz o roteamento de suas requisições através de &lt;strong&gt;proxys&lt;/strong&gt; que você escolhe por uma lista &lt;strong&gt;que você mesmo faz&lt;/strong&gt;, porém vamos fazer um pouco diferente usando o &lt;strong&gt;tor router&lt;/strong&gt; para direcionar as requisições diretamente para porta do tor, fazendo com que tudo passe pelo router do tor antes de ir para web.&lt;/p&gt;

&lt;p&gt;Eu não uso o &lt;strong&gt;kali linux&lt;/strong&gt;, porém baixei todos os repositórios dele para o ubuntu com o “&lt;strong&gt;KATOOLIN&lt;/strong&gt;” ( &lt;a href=&#34;https://github.com/LionSec/katoolin&#34; rel=&#34;nofollow&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/LionSec/katoolin&#34;&gt;https://github.com/LionSec/katoolin&lt;/a&gt;&lt;/strong&gt;&lt;/a&gt; ), á partir daí instalei o &lt;strong&gt;proxychains&lt;/strong&gt; na minha maquina, caso você use o kali, os repositórios que vamos usar já vem na distro por default então é só instalar.&lt;/p&gt;

&lt;p&gt;Vamos instalar o &lt;strong&gt;tor&lt;/strong&gt; e o &lt;strong&gt;proxychains&lt;/strong&gt; para que eles trabalhem juntos:&lt;/p&gt;

&lt;pre&gt;sudo apt-get install tor
sudo apt-get install proxychains&lt;/pre&gt;

&lt;p&gt;Feito a instalação a configuração é muito fácil, vamos precisar abrir o arquivo de configurações do proxychains, que é o “/etc/proxychains.conf”. Vamos abrir ele com o nano:&lt;/p&gt;

&lt;pre&gt;sudo nano /etc/proxychains.conf&lt;/pre&gt;

&lt;p&gt;Com o arquivo aberto vamos comentar a linha “strict_chain” e descomentar a linha “dynamic_chain”, e no final do arquivo vamos adicionar a seguinte linha:&lt;/p&gt;

&lt;pre&gt;socks5 127.0.0.1 9050&lt;/pre&gt;

&lt;p&gt;Vamos salvar o arquivo e podemos iniciar o services do Tor para depois podermos começar com o proxychains:&lt;/p&gt;

&lt;pre&gt;sudo service tor start&lt;/pre&gt;

&lt;p&gt;Agora para fazermos com que o tunelamento funcione com o proxychains é só adicionar o comando “proxychains” antes do programa que você quer utilizar, exemplo:&lt;/p&gt;

&lt;pre&gt;sudo proxychains firefox&lt;/pre&gt;

&lt;p&gt;Entre em algum site de consulta de ip e veja seu ip camuflado com sucesso utilizando o tor e o proxychains ;D&lt;/p&gt;

&lt;h3 id=&#34;jondo&#34;&gt;JonDo&lt;/h3&gt;

&lt;p&gt;Você pode usar JonDonym para navegar anônimo, e-mail anônimo, chats e outros fins. &lt;strong&gt;JonDo&lt;/strong&gt; , anteriormente JAP, é uma ferramenta de proxy IP Changer. Ele atua como um proxy e irá encaminhar o tráfego de suas aplicações de internet criptografadas, e por isso vai esconder o seu endereço IP. É uma aplicação Java, open source e você pode baixá-lo gratuitamente.&lt;/p&gt;

&lt;p&gt;Com o &lt;strong&gt;JonDo&lt;/strong&gt; é o mesmo esquema, caso tenha o &lt;strong&gt;kali linux&lt;/strong&gt; você só vai precisar instalar pelo repositório, caso use outra distro recomendo o &lt;strong&gt;KATOOLIN&lt;/strong&gt; para baixar os repositórios do kali e assim instalar as aplicações dele.&lt;/p&gt;

&lt;p&gt;Para instalação do &lt;strong&gt;JonDo&lt;/strong&gt; e do &lt;strong&gt;JonDoFox&lt;/strong&gt; ( que é um &lt;strong&gt;firefox modificado &lt;/strong&gt;para não termos risco de sermos descobertos, ele desabilita o javascript e muitas coisas que podem dar informações sobre nossa navegação ) vamos precisar instalar o &lt;strong&gt;java jre e algumas &lt;/strong&gt;&lt;strong&gt;dependências&lt;/strong&gt;, e claro o jondo e jondofox que baixamos no site oficial indicado acima:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sudo aptitude install default-jre java-wrappers firefox
sudo dpkg -i jondo_all.deb
sudo dpkg -i jondofox-en_all.deb&lt;/pre&gt;

&lt;p&gt;Com o &lt;strong&gt;JonDo&lt;/strong&gt; e o &lt;strong&gt;JonDoFox&lt;/strong&gt; instalados na minha maquina vou entrar no terminal e dar um “&lt;strong&gt;sudo jondo&lt;/strong&gt;” assim, vamos inicializar a aplicação do &lt;strong&gt;JonDo&lt;/strong&gt;, lá podemos ver algumas opções de configuração e tudo que o programa oferece, veja:&lt;figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*ThtPBRe1tD7aqjiFMEWvlQ.png&#34; alt=&#34;&#34; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Com o &lt;strong&gt;JonDo&lt;/strong&gt; rodando, podemos agora inicializar o &lt;strong&gt;JonDoFox&lt;/strong&gt;, que vai ser nosso &lt;strong&gt;navegador anonimo&lt;/strong&gt; trabalhando junto ao &lt;strong&gt;JonDo&lt;/strong&gt;, vamos inicializar e entrar em algum site de consulta de ip para nos localizarmos, veja:&lt;figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*4cjyOlP2MnoNHbnyuEhsbA.png&#34; alt=&#34;&#34; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Por aí já da para vermos que estamos utilizando o &lt;strong&gt;JonDo&lt;/strong&gt; corretamente, o site de status deles nos da essa resposta assim que entramos para fazer o teste.&lt;figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*1qhJ-OTxjcv2ritD_DKjSg.png&#34; alt=&#34;&#34; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;É bem legal o jeito que ele dá o &lt;strong&gt;status completo do seu anonimato&lt;/strong&gt;, este site é próprio do &lt;strong&gt;JonDo&lt;/strong&gt; para testar seu anonimato. Acho importante ser a &lt;strong&gt;primeira coisa que você deve fazer&lt;/strong&gt; ao iniciar o serviço.&lt;/p&gt;

&lt;p&gt;Espero que tenham curtido o post, qualquer dúvida só comentar ai em baixo! Abraços e até o próximo post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proteja seu código usando o Webpack</title>
      <link>http://tableless.com.br/proteja-seu-codigo-usando-o-webpack/</link>
      <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/proteja-seu-codigo-usando-o-webpack/</guid>
      <description>

&lt;p&gt;Não é um eufemismo dizer que que as ferramentas de front-end avançam rapidamente. Por um tempo, &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;Grunt&lt;/a&gt; foi o principal automatizador. E desde então a comunidade adotou o &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt;, uma alternativa de streaming. Embora essas ferramentas sejam ótimas, você ainda precisará trabalhar dura para manter o seu sistema. E é aí que entram os empacotadores como o &lt;a href=&#34;http://browserify.org/&#34; target=&#34;_blank&#34;&gt;Browserify&lt;/a&gt; e &lt;a href=&#34;https://webpack.github.io/&#34; target=&#34;_blank&#34;&gt;Webpack&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;como-usar-um-empacotador&#34;&gt;Como usar um empacotador&lt;/h2&gt;

&lt;p&gt;Os empacotadores resolvem o problema fundamental no desenvolvimento front-end. Eles permitem que você transforme assets arbitrários em algo que possa ser consumido por um navegador. Se você está usando NPM, e deveria, você pode empacotar todos esses pacotes que está utilizando em seu aplicativo para poder usá-los no navegador. Mas há a possibilidade de você querer fazer muitas outras coisas além de empacotar, então você vai entrelaçar isso com alguma ferramenta de automação como o Grunt ou Gulp. Você pode até ignorar um task runner e implementar suas tarefas por meio da seção de &lt;strong&gt;scripts&lt;/strong&gt; &lt;code&gt;package.json&lt;/code&gt; (se estiver usando NPM) para configurar as transformações do Browserify.&lt;/p&gt;

&lt;h2 id=&#34;conhecendo-o-webpack&#34;&gt;Conhecendo o Webpack&lt;/h2&gt;

&lt;p&gt;Você pode alcançar resultados similares tanto com o Browserify quanto o Webpack. O Browserify está mais próximo da filosofia Unix. Ao usá-lo você está literalmente colando pequenos utilitários juntos. Como resultado, o Browserify é fácil de conseguir. Mas se você tem uma lista longa de transformações que deseja aplicar em seu código é melhor utilizar um task runner como Grunt ou Gulp para automatizar esse processo.&lt;/p&gt;

&lt;p&gt;Por outro lado, se você usa Webpack pode nem precisar do Grunt ou Gulp. O Webpack presume que existem certas tarefas que você sempre deseja executar. É claro que você deseja mover os arquivos de uma pasta de origem para um diretório de compilação. Claro que você vai querer completar seu código fonte usando uma (geralmente longa) lista de transformações (aliás, elas são chamadas de &lt;strong&gt;loaders&lt;/strong&gt;, ou carregadores, no Webpack). É claro que você quer usar bibliotecas em diferentes formatos de módulo como CoomonJS, RequireJS ou os novos módulos ES6 se desejar.&lt;/p&gt;

&lt;p&gt;Você pode até desejar lidar com diferentes formatos de arquivos. Para lhe dar um exemplo melhor do que isso significa na prática, considere os códigos abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;style.css&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    font-family: sans-serif;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// load style to the resulting bundle
require(&#39;./style.css&#39;);

// just print hello, normally we would do
// something more involved and start the
// application here
console.log(&#39;hello world&#39;);&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var webpack = require(&#39;webpack&#39;);

    module.exports = {
    // this is the top level file or set of files
    entry: &#39;./index.js&#39;,
    // it will bundle everything inside this output path
    output: {
    path: __dirname,
    filename: &#39;bundle.js&#39;
},
module: {
loaders: [
{
    // 1. resolve @import and url() through css-loader
    // 2. load the result to bundle using style-loader
    // note that loaders are interpreted from right to left
    test: /.css$/, // A regexp to test the require path
    loaders: [&#39;style&#39;, &#39;css&#39;]
}
]
},
plugins: [
    // minify output
    new webpack.optimize.UglifyJsPlugin()
]
};&lt;/pre&gt;

&lt;p&gt;O Webpack permite que você carregue o CSS da mesma forma que carrega outros códigos com &lt;a href=&#34;https://github.com/webpack/css-loader&#34; target=&#34;_blank&#34;&gt;css-loader&lt;/a&gt; e &lt;a href=&#34;https://github.com/webpack/style-loader&#34; target=&#34;_blank&#34;&gt;style-loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por que você iria querer usar o require para o seu CSS em vez da mesma velha maneira que temos utilizado CSS? Bem, porque o Webpack é inteligente o suficiente para concatenar seu CSS quando ele é pequeno o bastante, caso contrário ele irá minificar o arquivo e dar a ele um nome único para fins de cache. O mesmo pode ser feito com imagens utilizando o &lt;a href=&#34;https://github.com/webpack/url-loader&#34; target=&#34;_blank&#34;&gt;url-loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você executou o Webpack contra essa configuração, você irá acabar com um &lt;code&gt;bundle.js&lt;/code&gt; minificado que contém CSS inline. Pode parecer muito esforço para alcançar um simples resultado como esse. Isso está além do ponto. Considere o seguinte:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;E se você quisesse usar os novos recursos do Javascript em seu projeto? Você teria que configurar o &lt;a href=&#34;https://www.npmjs.com/package/babel-loader&#34; target=&#34;_blank&#34;&gt;babel-loader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse usar CSS compilado? Você precisaria configurar o &lt;a href=&#34;https://github.com/webpack/less-loader&#34; target=&#34;_blank&#34;&gt;less-loader&lt;/a&gt; ou o &lt;a href=&#34;https://github.com/jtangelder/sass-loader&#34; target=&#34;_blank&#34;&gt;sass-loader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse sourcemaps? Você teria que configurar a opção &lt;a href=&#34;https://webpack.github.io/docs/configuration.html#devtool&#34; target=&#34;_blank&#34;&gt;devtool&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse uma saída UMD para sua biblioteca? É preciso configurar o &lt;a href=&#34;https://webpack.github.io/docs/configuration.html#output-librarytarget&#34; target=&#34;_blank&#34;&gt;output.libraryTarget&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse um servidor de desenvolvimento &lt;em&gt;hot loading&lt;/em&gt;? Você precisaria configurar o &lt;a href=&#34;https://webpack.github.io/docs/webpack-dev-server.html&#34; target=&#34;_blank&#34;&gt;webpack-dev-server&lt;/a&gt; ou construir um sozinho baseado no Express, como mostrado no &lt;a href=&#34;https://github.com/gaearon/react-transform-boilerplate&#34; target=&#34;_blank&#34;&gt;react-transform-boilerplate&lt;/a&gt;. O recurso de &lt;em&gt;hot loading&lt;/em&gt; separa Webpack conforme atualiza seu navegador automaticamente enquanto mantém o estado do aplicativo.&lt;/li&gt;
&lt;li&gt;E se você quisesse múltiplas metas (desenvolvimento, produção, teste)? Poderia usar uma solução como a &lt;a href=&#34;https://www.npmjs.com/package/webpack-merge&#34; target=&#34;_blank&#34;&gt;webpack-merge&lt;/a&gt; e conectar seu automatizador de tarefas com ela.&lt;/li&gt;
&lt;li&gt;E se você quisesse carregar algumas dependências lentamente? Você precisaria configurar o &lt;a href=&#34;https://webpack.github.io/docs/code-splitting.html#require-ensure&#34; target=&#34;_blank&#34;&gt;require.ensure&lt;/a&gt;. O Webpack irá gerar pacotes separados para dividir os pontos e carregá-los sob demanda.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basicamente, você pode desenvolver as configurações para várias direções baseado em suas necessidades. Há definitivamente uma curva de aprendizado e leva um tempo para entender todas as opções. Dito isso, a abordagem é poderosa uma vez que você entende.&lt;/p&gt;

&lt;h2 id=&#34;conectando-o-webpack-com-jscrambler&#34;&gt;Conectando o Webpack com Jscrambler&lt;/h2&gt;

&lt;p&gt;Se você quiser adicionar o Jscrambler para o seu processo de desenvolvimento e estiver usando o Webpack, nós temos uma boa notícia para você! O &lt;a href=&#34;https://github.com/jscrambler/jscrambler-loader&#34; target=&#34;_blank&#34;&gt;jscrambler-loader&lt;/a&gt; está disponível e é realmente fácil de configurar assim como a maioria dos loaders do Webpack.&lt;/p&gt;

&lt;p&gt;Nós vamos lhe mostrar o quanto essa configuração é fácil utilizando o exemplo abaixo e adicionando o &lt;a href=&#34;https://github.com/jscrambler/jscrambler-loader&#34; target=&#34;_blank&#34;&gt;jscrambler-loader&lt;/a&gt; em nosso processo. Também vamos remover o &lt;strong&gt;UglifyJsPlugin&lt;/strong&gt;, já que o &lt;strong&gt;Jscrambler&lt;/strong&gt; pode desempenhar essa mesma função.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var webpack = require(&#39;webpack&#39;);

    module.exports = {
    // this is the top level file or set of files
    entry: &#39;./index.js&#39;,
    // it will bundle everything inside this output path
    output: {
    path: __dirname,
    filename: &#39;bundle.js&#39;
},
module: {
loaders: [
{
    // 1. resolve @import and url() through css-loader
    // 2. load the result to bundle using style-loader
    // note that loaders are interpreted from right to left
    test: /.css$/, // A regexp to test the require path
    loaders: [&#39;style&#39;, &#39;css&#39;]
},
{
    test: /.js$/,
    exclude: /node_modules/,
    loader: &#39;jscrambler-loader&#39;
}
]
}
};&lt;/pre&gt;

&lt;p&gt;Você também irá precisar criar um arquivo chamado &lt;strong&gt;.jscramblerrc&lt;/strong&gt; com suas credenciais da API.&lt;/p&gt;

&lt;p&gt;Você irá encontrar elas no painel de controlo da sua conta Jscrambler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.jscramblerrc&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{
    &#34;keys&#34;: {
    &#34;accessKey&#34;: &#34;XXXXXX&#34;,
    &#34;secretKey&#34;: &#34;XXXXXX&#34;
},
&#34;params&#34;: {
    &#34;self_defending&#34;: &#34;%DEFAULT%&#34;
    // there is a big set of transformations that you can use
    // check https://jscrambler.com/en/help/javascript_obfuscation
}
}&lt;/pre&gt;

&lt;p&gt;Pronto! Você está pronto para depurar o seu código protegido!&lt;/p&gt;

&lt;p&gt;Há várias outras formas de conectar o Jscrambler com o seu sistema. Isso depende do seu task runner. Eu reuni as possíveis abordagens abaixo:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grunt &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/grunt-jscrambler&#34; target=&#34;_blank&#34;&gt;grunt-jscrambler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gulp &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/gulp-jscrambler&#34; target=&#34;_blank&#34;&gt;gulp-jscrambler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;package.json&lt;/em&gt; &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/jscrambler&#34; target=&#34;_blank&#34;&gt;Jscrambler CLI tool&lt;/a&gt;. Para isso funcionar, crie um &lt;em&gt;script&lt;/em&gt; separado e depois passe sua versão minificada do Webpack através dele. É preferível manter uma versão local da ferramenta Jscrambler CLI (&lt;code&gt;npm i jscrambler --save-dev&lt;/code&gt;) dentro de seu projeto para que tudo funcione independentemente do ambiente.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O Jscrambler tem um conjunto de ferramentas para proteger seu código (ofuscação + armadilhas no código + serviço de autoproteção de aplicativo, ou RASP em inglês), fazendo com que a engenharia reversa fique significantemente difícil, mas também tem alguns recursos de otimização de código para você tirar vantagem. Você pode até usá-lo para minificação ou compressão.&lt;/p&gt;

&lt;p&gt;Saiba mais sobre o Jscrambler em &lt;a href=&#34;https://jscrambler.com?utm_medium=social&amp;utm_source=tableless&#34; target=&#34;_blank&#34;&gt;jscrambler.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Ainda que o Webpack não seja a ferramenta mais fácil de aprender, eu recomendo que você dê uma olhada nela. O livro &lt;a href=&#34;http://survivejs.com/&#34; target=&#34;_blank&#34;&gt;SurviveJS &amp;#8211; Webpack and React&lt;/a&gt;, que está em inglês, fala sobre essa ferramenta com mais detalhes. A maioria dos conteúdos está disponível gratuitamente e irá lhe ajudar a entender o Webpack e React a um nível mais profundo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Analisando o código Stylus de um projeto</title>
      <link>http://tableless.com.br/iniciando-com-o-pre-processador-stylus/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/iniciando-com-o-pre-processador-stylus/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-um-pré-processador-css&#34;&gt;&lt;strong&gt;O que é um pré-processador CSS?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Como o nome ja diz, é uma linguagem que precisa ser pré-processada por um &lt;em&gt;parser&lt;/em&gt; para assim gerar o arquivo de extensão &lt;strong&gt;.css&lt;/strong&gt; que será renderizado pelo browser. Atualmente há vários pré-processadores que você pode utilizar para facilitar a codificação e reaproveitamento de código, você pode estar utilizando SASS, LESS e Stylus que são os mais conhecidos no mercado. A diferença do &lt;a href=&#34;http://stylus-lang.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Stylus&lt;/a&gt; para os outros pré-processadores que estão sendo utilizados no mercado é que ele já é baseado em &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;NodeJS&lt;/a&gt; e não em ruby. Por conta disso não há necessidade de uma tecnologia intermediária em seu workflow para processá-lo.&lt;/p&gt;

&lt;h2 id=&#34;vamos-começar&#34;&gt;Vamos começar!&lt;/h2&gt;

&lt;p&gt;Tendo em mente que você ja conhece um pouco sobre pré-processadores e algumas de suas vantagens (variáveis, mixins, operadores, funções) vamos criar um projeto utilizando algumas dessas funcionalidades.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Faça o download do &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;strong&gt;NodeJS&lt;/strong&gt;&lt;/a&gt; e efetue a instalação&lt;strong&gt;;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Considerando que tenha o node rodando em seu sistema, instale o &lt;strong&gt;Stylus &lt;/strong&gt;de forma global e execute o seguinte comando em seu terminal &lt;strong&gt;npm install -g stylus&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Vamos criar a estrutura de diretórios de nosso projeto:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/director.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após ter seu diretório criado de acordo com a estrutura da imagem acima, você pode acessá-lo via terminal com o comando &lt;strong&gt;cd /seu-diretorio&lt;/strong&gt; e na sequência executar o compilador stylus da seguinte maneira:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stylus -w a&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;parâmetros&#34;&gt;&lt;strong&gt;Parâmetros&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;-w (Observar alterações nos arquivos .styl e re-compilar gerando os arquivos resultantes .css);&lt;/li&gt;
&lt;li&gt;-o (Após este parâmetro deve ser passado o caminho que deve ser salvo o arquivo compilado);&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;desmistificando-a-estrutura&#34;&gt;Desmistificando a Estrutura&lt;/h2&gt;

&lt;h3 id=&#34;assets&#34;&gt;ASSETS&lt;/h3&gt;

&lt;p&gt;Costumo sempre utilizar esta estrutura como raíz para os diretórios front-end principalmente pela facilidade em migrar para servidores independentes e também para evitar confusão entre o pessoal de back-end.&lt;/p&gt;

&lt;h3 id=&#34;assets-css&#34;&gt;&lt;strong&gt;ASSETS/css&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Arquivos gerados após executar o pré-processador, gerando assim os arquivos com extensão &lt;strong&gt;.css&lt;/strong&gt; prontos para utilização em seu código.&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus&#34;&gt;ASSETS/stylus&lt;/h3&gt;

&lt;p&gt;Neste diretório fica toda a nossa organização de diretórios e arquivos .styl (Extensão utilizada pelo &lt;strong&gt;Stylus&lt;/strong&gt;).&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-base-tipografia-reset-variáveis-cores&#34;&gt;ASSETS/stylus/base (Tipografia, reset, variáveis, cores)&lt;/h3&gt;

&lt;p&gt;O nome dos arquivos em si é bem descritivo, colors.styl para cores, variables.styl para variáveis reutilizáveis, typography.styl para definições de fonts e reset.styl (reset de elementos css).&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-components-pequenos-componentes&#34;&gt;ASSETS/stylus/components (Pequenos componentes)&lt;/h3&gt;

&lt;p&gt;Utilizado para pequenos componentes como botões, formulários, modals e o que surgir de necessidade conforme o desenvolvimento de seu projeto.&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-helpers-utilitários-para-seus-projetos&#34;&gt;ASSETS/stylus/helpers (Utilitários para seus projetos)&lt;/h3&gt;

&lt;p&gt;Neste diretório geralmente são encontrados os seguintes arquivos: functions.styl, helpers.styl (classes utilitárias ex.: .pull-left, .show), mixins.styl (são blocos de códigos reutilizáveis semelhantes a funções).&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-layout-definições-do-seu-layout&#34;&gt;ASSETS/stylus/layout (Definições do seu layout)&lt;/h3&gt;

&lt;p&gt;Você vai encontrar os arquivos com definições de estilo com a cara do seu layout, como header, footer e grid.&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-theme-temas-do-projeto&#34;&gt;ASSETS/stylus/theme (Temas do projeto)&lt;/h3&gt;

&lt;p&gt;Definições de temas do projeto. Caso o projeto tenha mais de um tema, é uma boa prática para manter a organização e facilidade de manutenção no código.&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-main-styl&#34;&gt;ASSETS/stylus/main.styl&lt;/h3&gt;

&lt;p&gt;Este é o arquivo primário que será lido pelo seu compilador, deve possuir todas as importações necessárias para gerar o arquivo .css resultante. Obs: Todos os arquivos all.styl servem para facilitar a importação no arquivo principal.&lt;/p&gt;

&lt;h2 id=&#34;botando-a-mão-na-massa&#34;&gt;Botando a mão na massa&lt;/h2&gt;

&lt;p&gt;Uma vez que você compreendeu a ideia dos diretórios criados e está com o compilador rodando corretamente, vamos ao código:&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-base&#34;&gt;assets/stylus/base&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;all.styl (Import de todos os arquivos do diretório)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;// Import all from base
&amp;lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&amp;gt;@import&amp;lt;/a&amp;gt; ‘reset.styl’
&amp;lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&amp;gt;@import&amp;lt;/a&amp;gt; ‘colors.styl’
&amp;lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&amp;gt;@import&amp;lt;/a&amp;gt; ‘typography.styl’
&amp;lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&amp;gt;@import&amp;lt;/a&amp;gt; ‘variables.styl’&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;colors.styl (Definições de cores do projeto)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;orange = #FF6347
gray-darker = #AAAAAA
gray-lighter = #EEEEEE
lighter = #FFF
darker = #444444
blue = #0080FF
blue-lighter = #1EC0FF
yellow = #F9C00C
red = #E71D36
green = #3AC569
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;reset.styl (Foi utilizado o normalize.css)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://necolas.github.io/normalize.css/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;normalize.css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;typography.styl (Definições de fonts)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;font-size-h1 = 40px
font-size-h2 = 34px
font-size-h3 = 28px
line-height-h1 = 55px
line-height-h2 = 46px
line-height-h3 = 38px
h1, h2, h3
 color darker
 font-weight bold
h1
 font-size font-size-h1
 line-height line-height-h1
 color darker
 margin-bottom 30px
h2
 font-size font-size-h2
 line-height line-height-h1
h3
 font-size font-size-h3
 line-height line-height-h3
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;variables.styl (Variáveis reutilizáveis do projeto)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;// Font Weights
light = 300
regular = 400
bold = 700&lt;/pre&gt;

&lt;pre&gt;// Base Font
base-font-family = ‘Open Sans’, sans-serif
base-font-weight = light
base-font-size = 20px
base-line-height = 27px
form-label-font-size = base-font-size
form-field-font-size = 18px&lt;/pre&gt;

&lt;pre&gt;// Buttons
btn-font-weight = bold
btn-default-border = gray-darker
btn-default-color = darker
btn-primary-color = lighter
btn-success-color = lighter
btn-danger-color = lighter
btn-warning-color = lighter
btn-info-color = lighter
&lt;/pre&gt;

&lt;h3 id=&#34;assets-stylus-components&#34;&gt;assets/stylus/components&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;all.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;// Import all from components
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘buttons.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘forms.styl’&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;buttons.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;.btn
 font-weight bold
 padding 15px 27px
 border 1px solid transparent
 display inline-block
 cursor pointer
 border-radius(5px)
&amp;-info
 &amp;-primary
 &amp;-success
 &amp;-danger
 color lighter
&amp;-default
 color darker
 border-color gray-darker
 background-color lighter
&amp;-primary
 background-color blue
 border-color blue
&amp;:hover
 &amp;:focus
 background-color darken(blue, 20%)
 border-color darken(blue, 20%)
&amp;-info
 background-color blue-lighter
 border-color blue-lighter
&amp;:hover
 &amp;:focus
 background-color darken(blue-lighter, 20%)
 border-color darken(blue-lighter, 20%)
&amp;-warning
 background-color yellow
 border-color yellow
&amp;:hover
 &amp;:focus
 background-color darken(yellow, 20%)
 border-color darken(yellow, 20%)
&amp;-success
 background-color green
 border-color green
&amp;:hover
 &amp;:focus
 background-color darken(green, 20%)
 border-color darken(green, 20%)
&amp;-danger
 background-color red
 border-color red
&amp;:hover
 &amp;:focus
 background-color darken(red, 20%)
 border-color darken(red, 20%)&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;forms.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;.form
 &amp;__group
 margin-bottom 20px
&amp;__label
 color darker
 font-size form-label-font-size
 font-weight bold
 margin-bottom 10px
&amp;__field
 display block
 width 100%
 padding 6px 18px
 height 60px
 border 1px solid gray-darker
 color darker
 font-size form-field-font-size
 border-radius(3px)
&amp;:hover
 &amp;:focus
 border-color orange&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;helpers.styl (Utilitários do projeto)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;all.styl (Import de todos os arquivos do diretório)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;// Import all from helpers
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘functions.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘helpers.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘mixins.styl’&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;functions.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;make-media-queries-breakpoints()
 for screen-width in screen-desktop-large screen-desktop screen-tablet screen-mobile
 &lt;a title=&#34;Twitter profile for @media&#34; href=&#34;http://twitter.com/media&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@media&lt;/a&gt; only screen and (max-width: screen-width)
 if (screen-width == screen-desktop-large)
 .container
 width container-desktop
 else if (screen-width == screen-desktop)
 .container
 width container-tablet
 else if (screen-width == screen-tablet)
 .container
 .columns
 width container-mobile !important
make-row()
 margin 0 (-(grid-gutter-width / 2))
calc-container-padding()
 padding 0 (grid-gutter-width / 2)
make-columns()
 for i in grid-columns..0
 .col-{i}
 width percentage(i, grid-columns)
.col-offset-{i}
 margin-left percentage(i, grid-columns)
percentage(index, divider)
 if index == 0
 0
 else
 unit((index * 100) / divider, “%”)&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;helpers.styl (Classes utilitárias para uso no html)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;.pull-left
 float left
.pull-right
 float right
.show
 display block
.hide
 display none
.text-center
 text-align center
.text-left
 text-align left
.text-right
 text-align right
.absolute
 position absolute
.relative
 position relative
.in-block
 display inline-block
.center-block
 margin 0 auto
 display block
.img-responsive
 max-width 100%
.clearfix
 &amp;:before
 &amp;:after
 content “ “
 display table
&amp;:after
 clear both&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;mixins.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;vendor(prop, args)
 -webkit-{prop} args
 -moz-{prop} args
 {prop} args
border-radius()
 vendor(‘border-radius’, arguments)
box-shadow()
 vendor(‘box-shadow’, arguments)
opacity(n)
 opacity n
 filter unquote(‘progid:DXImageTransform.Microsoft.Alpha(Opacity=’ + round(n * 100) + ‘)’)&lt;/pre&gt;

&lt;h3 id=&#34;assets-stylus-layout&#34;&gt;assets/stylus/layout&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;header.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.header
 background-color orange
 padding 30px 0
.header__img
 max-width 150px&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;footer.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.footer
 padding 40px 0
 background-color darker
 color lighter
&amp; a
 color lighter
 &amp;:hover
 color orange
&amp; p
 font-size 16px
 line-height 22px
 margin 0 0 10px 0
&amp; .fa
 color #E84545
 margin 0 2px
&amp; img
 max-width 150px
 &amp;:hover
 opacity(0.6)&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;grid.styl (Sistema de grids utilizado no projeto)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// Media Queries Breakpoints
screen-desktop-large = 1200px
screen-desktop = 992px
screen-tablet = 768px
screen-mobile = 480px
// Grid System
grid-columns = 12
grid-gutter-width = 30px
// Container Sizes
container-desktop-large = 1170px
container-desktop = 940px
container-tablet = 720px
container-mobile = 100%
.container
 width container-desktop-large
 calc-container-padding()
 margin 0 auto
.row
.columns
 box-sizing border-box
.row
 make-row()
&amp;:before
 &amp;:after
 content “ “
 display table
&amp;:after
 clear both
.columns
 &lt;a title=&#34;Twitter profile for @extend&#34; href=&#34;http://twitter.com/extend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@extend&lt;/a&gt; .relative
 &lt;a title=&#34;Twitter profile for @extend&#34; href=&#34;http://twitter.com/extend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@extend&lt;/a&gt; .pull-left
 padding 0 (grid-gutter-width / 2)
make-media-queries-breakpoints()
make-columns()&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;login.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.content
 padding-top 60px
 padding-bottom 60px
 min-height 470px
&amp;__login
 padding 30px
 border-radius(3px)
 background-color gray-lighter
 box-shadow(0 0 5px rgba(0,0,0,0.09))
 max-width 530px
 background-color darker
&amp; .form__label
 &amp; h3
 color lighter
&amp; h3
 margin-bottom 20px&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;assets/stylus/themes (Temas do projeto admin, padrão e quais forem necessários)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;default.styl (Tema padrão)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;*
 vendor(‘box-sizing’, border-box)
body
 font-family base-font-family
 font-weight base-font-weight
 font-size base-font-size
 line-height base-line-height
 background-color lighter
a
 text-decoration none&lt;/pre&gt;

&lt;h3 id=&#34;assets-stylus-main-styl-arquivo-principal&#34;&gt;assets/stylus/main.styl (Arquivo principal)&lt;/h3&gt;

&lt;p&gt;Neste arquivo você deve efetuar todas as importações necessárias do seu projeto. Em nosso tutorial o arquivo ficou assim:&lt;/p&gt;

&lt;pre&gt;&lt;a title=&#34;Twitter profile for @charset&#34; href=&#34;http://twitter.com/charset&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@charset&lt;/a&gt; “UTF-8”
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘base/all.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘helpers/all.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘components/all.styl’
// Imports from layout
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘layout/grid.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘layout/header.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘layout/footer.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘layout/login.styl’
// Import themes
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘themes/default.styl’&lt;/pre&gt;

&lt;p&gt;Por fim, crie um arquivo &lt;strong&gt;index.html&lt;/strong&gt; na raíz de seu projeto com o seguinte código:&lt;/p&gt;

&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=”en”&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=”UTF-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Iniciando com Stylus&amp;lt;/title&amp;gt;
&amp;lt;link href=”&lt;a href=&#34;https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&lt;/a&gt;&#34; rel=”stylesheet”&amp;gt;
&amp;lt;link rel=”stylesheet” href=”&lt;a href=&#34;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&lt;/a&gt;&#34;&amp;gt;
&amp;lt;link rel=”stylesheet” href=”assets/css/main.css”&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
 &amp;lt;header class=”header”&amp;gt;
 &amp;lt;div class=”container”&amp;gt;
 &amp;lt;img class=”header__img img-responsive center-block” src=”assets/images/stylus-logo.png” alt=”” /&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/header&amp;gt;
&amp;lt;div class=”content container”&amp;gt;
 &amp;lt;h1 class=”text-center”&amp;gt;Iniciando com Stylus&amp;lt;/h1&amp;gt;
&amp;lt;div class=”content__login center-block”&amp;gt;
 &amp;lt;h3 class=”text-center”&amp;gt;Acesse sua conta&amp;lt;/h3&amp;gt;
&amp;lt;form action=”#”&amp;gt;
 &amp;lt;div class=”form__group”&amp;gt;
 &amp;lt;label for=”name” class=”form__label show”&amp;gt;Nome&amp;lt;/label&amp;gt;
&amp;lt;input type=”text” name=”name” id=”name” class=”form__field”&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=”form__group”&amp;gt;
 &amp;lt;label for=”email” class=”form__label show”&amp;gt;Email&amp;lt;/label&amp;gt;
&amp;lt;input type=”text” name=”email” id=”email” class=”form__field”&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=”submit text-right”&amp;gt;
 &amp;lt;button type=”submit” class=”btn btn-success”&amp;gt;
 Submit
 &amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;footer class=”footer text-center”&amp;gt;
 &amp;lt;div class=”container”&amp;gt;
 &amp;lt;p&amp;gt;
 Feito com &amp;lt;i class=”fa fa-heart”&amp;gt;&amp;lt;/i&amp;gt; por &amp;lt;a href=”&lt;a href=&#34;http://helderburato.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;http://helderburato.com/&lt;/a&gt;”&amp;gt;Helder Burato Berto&amp;lt;/a&amp;gt;
 &amp;lt;/p&amp;gt;
&amp;lt;a class=”in-block” href=”&lt;a href=&#34;http://uilab.com.br/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;http://uilab.com.br/&lt;/a&gt;&#34;&amp;gt;
 &amp;lt;img class=”img-responsive” src=”assets/images/uilab-logo.png” alt=””&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/footer&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;h2 id=&#34;compreendendo-a-linguagem-stylus&#34;&gt;Compreendendo a linguagem Stylus&lt;/h2&gt;

&lt;p&gt;Você pode observar que foram utilizados algumas particularidades da linguagem, que não são comuns para quem está acostumado apenas com CSS, sendo elas: &lt;strong&gt;&amp;amp;:&lt;/strong&gt; Usado para referenciar parcialmente um elemento citado anteriormente, por exemplo:&lt;/p&gt;

&lt;pre&gt;.foo
 color #000
 &amp; a
 color #fff&lt;/pre&gt;

&lt;p&gt;Será compilado para:&lt;/p&gt;

&lt;pre&gt;.foo {
 color: #000;
}
.foo a {
 color: #fff;
}&lt;/pre&gt;

&lt;p&gt;Você percebe o quanto isso é poderoso e tem utilidade?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;border-radius():&lt;/strong&gt; Mixin definido para ser reutilizado e com possibilidade de uso com parâmetros.&lt;/p&gt;

&lt;p&gt;Exemplo de uso:&lt;/p&gt;

&lt;pre&gt;.foo
 border-radius(5px)&lt;/pre&gt;

&lt;p&gt;Será compilado para:&lt;/p&gt;

&lt;pre&gt;.foo {
 border-radius: 5px;
 -webkit-border-radius: 5px;
 -moz-border-radius: 5px;
}&lt;/pre&gt;

&lt;p&gt;Observe que foi gerado o código ja com os prefixos para outros browsers, facilitando na escrita.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF&lt;/strong&gt; e &lt;strong&gt;FOR:&lt;/strong&gt; Vamos descrever o uso de IF e for com uma função que foi utilizado no tutorial chamada &lt;strong&gt;make-media-queries-breakpoints()&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;make-media-queries-breakpoints()
 for screen-width in screen-desktop-large screen-desktop screen-tablet screen-mobile
 &lt;a title=&#34;Twitter profile for @media&#34; href=&#34;http://twitter.com/media&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@media&lt;/a&gt; only screen and (max-width: screen-width)
 if (screen-width == screen-desktop-large)
 .container
 width container-desktop
 else if (screen-width == screen-desktop)
 .container
 width container-tablet
 else if (screen-width == screen-tablet)
 .container
 .columns
 width container-mobile !important&lt;/pre&gt;

&lt;p&gt;Nós utilizamos o FOR para percorrer as variáveis declaradas posteriormente e IF para modificar a width de nosso container principal de acordo com a media queria utilizada.&lt;/p&gt;

&lt;p&gt;O código acima após a compilação:&lt;/p&gt;

&lt;pre&gt;&lt;a title=&#34;Twitter profile for @media&#34; href=&#34;http://twitter.com/media&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@media&lt;/a&gt; only screen and (max-width: 1200px) {
 .container {
 width: 1170px;
 }
}
&lt;a title=&#34;Twitter profile for @media&#34; href=&#34;http://twitter.com/media&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@media&lt;/a&gt; only screen and (max-width: 992px) {
 .container {
 width: 720px;
 }
}
&lt;a title=&#34;Twitter profile for @media&#34; href=&#34;http://twitter.com/media&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@media&lt;/a&gt; only screen and (max-width: 768px) {
 .container,
 .columns {
 width: 100%;
 }
}&lt;/pre&gt;

&lt;h3 id=&#34;sintaxe&#34;&gt;Sintaxe&lt;/h3&gt;

&lt;p&gt;Você provavelmente deve ter percebido que com Stylus não temos a necessidade do uso de &lt;strong&gt;{}&lt;/strong&gt; e&lt;strong&gt;;&lt;/strong&gt; nas declarações CSS, isso em prática ajuda muito na produtividade.&lt;/p&gt;

&lt;h3 id=&#34;variáveis&#34;&gt;Variáveis&lt;/h3&gt;

&lt;p&gt;Você pode declarar variáveis sem o uso de &lt;strong&gt;$&lt;/strong&gt; mas caso você já utilizou outros pré;-processadores, fica a seu crité;rio o uso dele ou não.&lt;/p&gt;

&lt;p&gt;Bom espero que tenha conseguido compartilhar um pouco do que é; esta grande ferramenta e que lhe seja útil na hora de pensar em usar um pré;-processador.&lt;/p&gt;

&lt;p&gt;Um grande abraço, obrigado!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link do Projeto: &lt;a href=&#34;https://helderburato.github.io/iniciando-stylus/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://helderburato.github.io/iniciando-stylus/&#34;&gt;https://helderburato.github.io/iniciando-stylus/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Git do Projeto: &lt;a href=&#34;https://github.com/helderburato/iniciando-stylus&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://github.com/helderburato/iniciando-stylus&#34;&gt;https://github.com/helderburato/iniciando-stylus&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Layout: &lt;a href=&#34;https://github.com/helderburato/iniciando-stylus/tree/master/sketch&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://github.com/helderburato/iniciando-stylus/tree/master/sketch&#34;&gt;https://github.com/helderburato/iniciando-stylus/tree/master/sketch&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Trabalhando com serviços no Javascript</title>
      <link>http://tableless.com.br/trabalhando-com-servicos-no-javascript/</link>
      <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/trabalhando-com-servicos-no-javascript/</guid>
      <description>

&lt;p&gt;JavaScript é uma &lt;em&gt;linguagem multiparadigma&lt;/em&gt;. Pode-se “_emular_” várias técnicas de programação com ele, e isso é &lt;strong&gt;incrível&lt;/strong&gt; pois podemos decidir qual o melhor paradigma para a resolução dos problemas dos nossos projetos. Porém se por um lado isso pode parecer poderoso para a linguagem, também pode deixar os iniciantes bem confusos, é muito comum escolher a abordagem errada para o problema. Por esse motivo que o JavaScript em sido polêmico nos últimos anos.&lt;/p&gt;

&lt;p&gt;Pensando nisso muitos desenvolvedores criam suas próprias soluções, uns pensando em ajudar e outros em forçar padrões.&lt;/p&gt;

&lt;p&gt;Eu prefiro ensinar a pescar, pois JavaScript não tem que ser complexo. A &lt;strong&gt;versão 6 do JavaScript (ES6/ES2015)&lt;/strong&gt; tornou a linguagem muito mais expressiva, facilitando muito o entendimento.&lt;/p&gt;

&lt;h3 id=&#34;encapsulando-lógicas&#34;&gt;Encapsulando lógicas&lt;/h3&gt;

&lt;p&gt;Tudo em JavaScript são objetos (exceto &lt;em&gt;undefined&lt;/em&gt;), então &lt;strong&gt;serviços também são objetos&lt;/strong&gt;, dominando como criamos e trabalhamos com objetos todas as coisas ficam bem mais tranquilas.&lt;/p&gt;

&lt;p&gt;O Jean Carlo Emer fez um artigo muito, &lt;a href=&#34;http://tableless.com.br/modularizacao-em-javascript/&#34;&gt;mas muito bom sobre Modularização no JavaScript&lt;/a&gt;. Sugiro que você leia, mas vou explicar um pouco sobre o assunto logo abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-medium aligncenter&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hsXIPyBqqI7ZTh2QyLfizw.gif&#34; alt=&#34;i know JavaScript basics &#34; width=&#34;320&#34; height=&#34;237&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;scope-e-closures&#34;&gt;Scope e Closures&lt;/h4&gt;

&lt;p&gt;JavaScript possui escopo léxico. Entre outras coisas isso permite que você crie &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;De maneira resumida você cria um “ambiente controlado” onde há funções/variáveis que só podem ser acessadas naquele escopo, criando um enclausuramento (&lt;em&gt;closure&lt;/em&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const initPage = (root) =&amp;gt; {
  const $root = $(root);
  const $menu = $root.find(&#39;.menu&#39;);
  const $profile = $menu.find(&#39;.profile&#39;);

  const initProfile = () =&amp;gt; {
    $.get(&#39;/me&#39;)
      .then(response =&amp;gt; $profile.text(response.username));
    // ...
  };

  const showProfileModal = e =&amp;gt; {
   // ...
  };

  $profile.on(&#39;click&#39;, e =&amp;gt; showProfileModal(e));

  initProfile();
};

initPage(&#39;body&#39;);
&lt;/pre&gt;

&lt;p&gt;Este é um exemplo bem bobo, mas que ilustra bem como criamos &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As variáveis declaradas dentro de &lt;em&gt;initPage&lt;/em&gt; só existem naquele escopo.&lt;/p&gt;

&lt;p&gt;No mesmo exemplo podemos refatorar esse código em uma &lt;strong&gt;IIFE (Immediately-Invoked Function Expression)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;((root) =&amp;gt; {
  const $root = $(root);
  const $menu = $root.find(&#39;.menu&#39;);
  const $profile = $menu.find(&#39;.profile&#39;);

  const initProfile = () =&amp;gt; {
    $.get(&#39;/me&#39;)
     .then(response =&amp;gt; $profile.text(response.username));
    //  ...
  };

  const showProfileModal = e =&amp;gt; {
    // ...
  };

  $profile.on(&#39;click&#39;, e =&amp;gt; showProfileModal(e));

  initProfile();
})(&#39;body&#39;);
&lt;/pre&gt;

&lt;p&gt;Nesse código declaramos uma função e a executamos imediatamente, passando um argumento. Isso é extremamente útil quando queremos fazer um processamento de uma informação que vai servir apenas para criar uma variável.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const timezones = (() =&amp;gt; {
  const zones = [];
  const min = -12;
  const max = 13;
  let simbol;

  for (let i = min; i &amp;lt;= max; i++) {
    simbol = (i &amp;lt; 0) ? &#39;&#39; : &#39;+&#39;;
    zones.push(`GMT${simbol}${i}`);
  }

  return zones;
})();
&lt;/pre&gt;

&lt;p&gt;Como você já pode perceber, é possível expor dados de uma &lt;em&gt;closure&lt;/em&gt; como no exemplo anterior. A variável zones é retornada, assim a variável &lt;em&gt;timezones&lt;/em&gt; agora possui como valor o resultado da &lt;em&gt;closure&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nesse exemplo a &lt;em&gt;closure&lt;/em&gt; não usa dados externos a ela (&lt;em&gt;parent scope&lt;/em&gt;/escopo pai) porém dada a natureza do JavaScript isso é perfeitamente possível.&lt;/p&gt;

&lt;p&gt;Isso é útil para não poluir o escopo principal com informações irrelevantes.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const makeCounter = (start = 0) =&amp;gt; {
  let current = start;

  const add = (value = 1) =&amp;gt; current += value;
  const remove = (value = 1) =&amp;gt; add(value * -1);
  const get = () =&amp;gt; current;

  return { add, remove, get };
};

const counter = makeCounter(10);

counter.add() // 11
counter.add() // 12
counter.add(8) // 20
counter.remove(10) // 10
&lt;/pre&gt;

&lt;p&gt;Este é um exemplo bem interessante. Estamos combinando &lt;em&gt;closures&lt;/em&gt; com &lt;em&gt;factory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Com isso podemos criar vários contadores, e trabalhar como melhor convir com estes contadores.&lt;/p&gt;

&lt;div id=&#34;attachment_56186&#34; style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;wp-image-56186 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/wtf.gif&#34; alt=&#34;Só isso! Simples, né?&#34; width=&#34;500&#34; height=&#34;284&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Só isso! Simples, né?
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Se você entendeu como o exemplo do contador funciona, parabéns você já sabe criar serviços com javascript.&lt;/p&gt;

&lt;p&gt;Isso mesmo, este contator é um serviço. Na verdade ele é um &lt;em&gt;factory&lt;/em&gt;, mas com pequenos ajustes ele vira um serviço de fácil reuso.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// makeCounter.js -&amp;gt; factory
const makeCounter = (start = 0) =&amp;gt; {
  let current = start;

  const add = (value = 1) =&amp;gt; current += value;
  const remove = (value = 1) =&amp;gt; add(value * -1);
  const get = () =&amp;gt; current;

  return { add, remove, get };
};

export default makeCounter
&lt;/pre&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// counter.js -&amp;gt; service
import makeCounter from &#39;./makeCounter.js&#39;;

export default makeCounter(0);
&lt;/pre&gt;

&lt;p&gt;Agora temos dois arquivos, um contendo o &lt;em&gt;factory&lt;/em&gt; do contador, e outro contendo o serviço de contagem.&lt;/p&gt;

&lt;h2 id=&#34;módulos-javascript&#34;&gt;Módulos JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-56185 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/module.gif&#34; alt=&#34;module&#34; width=&#34;400&#34; height=&#34;250&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como visto anteriormente, é bem simples criar serviços com JavaScript, basta antes entender alguns conceitos.&lt;/p&gt;

&lt;p&gt;Porém isso não é tudo, se você esta criando um serviço é porque tem a intenção de reusar esta lógica em mais de um local da aplicação. Isto não é uma regra, talvez você queira apenas centralizar a lógica da operação.&lt;/p&gt;

&lt;p&gt;Não importa o objetivo inicial, você vai acabar criando um módulo JavaScript para aquela sua operação/serviço. No exemplo do contador foram criados dois arquivos, o &lt;em&gt;contador&lt;/em&gt; e o &lt;em&gt;factory do contador&lt;/em&gt;. Nesse momento você precisa entender minimamente o que são módulos JavaScript.&lt;/p&gt;

&lt;p&gt;Em resumo: um arquivo JavaScript é um módulo e um módulo JavaScript é um arquivo.&lt;/p&gt;

&lt;p&gt;Você pode criar um módulo a partir de outros módulos, como é o exemplo do contador, ele é composto a partir do módulo &lt;em&gt;makeCouter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Em geral a lógica dos módulo é encapsulada em &lt;em&gt;closures&lt;/em&gt; e o retorno delas é &lt;em&gt;cacheado&lt;/em&gt;, sendo assim, uma vez que você importa um módulo, ele será &lt;strong&gt;o mesmo sempre, compartilhando seu estado&lt;/strong&gt;. Saiba mais &lt;a href=&#34;http://www.vuejs-brasil.com.br/utilizando-vuex-na-forma-modular-2/#vamosentenderoqueaconteceu&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;usando-serviços&#34;&gt;Usando serviços&lt;/h3&gt;

&lt;p&gt;Agora que você possui essas informações acredito que criar seus próprios serviços não será nenhum &lt;em&gt;bicho de sete cabeças&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vale a pena dizer que tudo pode ser considerado um serviço, inclusive &lt;em&gt;factories&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para reforçar vou deixar mais um exemplo de uso de serviços.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import Http from &#39;./http.js&#39;;
import UsersService from &#39;./modules/users/service.js&#39;;

Http.setToken(&#39;XPTO&#39;); // Define o token de autentificação

// Cattega a primeira página de usuários
// Exibe um alerta com o nome do primeiro usuário retornado pelo serviço

UsersService
  .getAll({ page: 1 })
  .then(result =&amp;gt; result.data)
  .then(data =&amp;gt; data[0])
  .then(first =&amp;gt; {
    alert(first.name);
  });
&lt;/pre&gt;

&lt;p&gt;Para efeito de aprendizado uma sintaxe alternativa, com &lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/import&#34;&gt;&lt;em&gt;import binding&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { setToken } from &#39;./http.js&#39;;
import { getAll as getAllUsers } from &#39;./modules/users/service.js&#39;;

setToken(&#39;XPTO&#39;); // Define o token de autentificação

// Carrega a primeira página de usuários
// Exibe um alerta com o nome do primeiro usuário retornado pelo serviço

getAllUsers({ page: 1 })
  .then(result =&amp;gt; result.data)
  .then(data =&amp;gt; data[0])
  .then(first =&amp;gt; {
    alert(first.name);
  });
&lt;/pre&gt;

&lt;p&gt;Este pode não parecer para alguns mas é um exemplo bem prático do uso de serviços.&lt;/p&gt;

&lt;p&gt;O serviço de &lt;em&gt;Http&lt;/em&gt; também é usado pelo &lt;em&gt;serviço de usuários&lt;/em&gt;, por isso é possível definir o &lt;strong&gt;&lt;em&gt;token&lt;/em&gt;&lt;/strong&gt; de autentificação antes de efetivamente usar os serviços, pois eles vão compartilhar o mesmo estado/serviço.&lt;/p&gt;

&lt;p&gt;Outra característica interessante é que esses serviços não estão ligados diretamente a nenhum contexto. Isso significa que não importa que ambiente você esteja ou que &lt;em&gt;framework&lt;/em&gt; você esta usando, os serviços são agnósticos. Eles podem ser usados no &lt;strong&gt;NodeJS, VueJS, ReactJS&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;p&gt;Este é um dos princípios do polimorfismos do JavaScript porém este é outro assunto.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Se quiser saber mais sobre meu trabalho visite meu blog&lt;a href=&#34;https://medium.com/@luizvinicius73&#34;&gt; https://medium.com/@luizvinicius73&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Este artigo foi originalmente postado no meu &lt;a href=&#34;https://medium.com/by-vinicius-reis/trabalhando-com-servicos-no-javascript-864310cf386c&#34;&gt;blog no medium&lt;/a&gt; em 31 de Julho de 2016&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando uma aplicação móvel com Ionic 2 e Angular 2 em dez passos</title>
      <link>http://tableless.com.br/criando-uma-aplicacao-movel-com-ionic-2-e-angular-2-em-dez-passos/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-uma-aplicacao-movel-com-ionic-2-e-angular-2-em-dez-passos/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;À esta altura do campeonato é provável que você já tenha ouvido falar da nova versão deste famoso framework para criação de aplicações móveis híbridas. O &lt;strong&gt;&lt;a href=&#34;https://ionicframework.com/docs/v2/&#34; target=&#34;_blank&#34;&gt;Ionic 2&lt;/a&gt;&lt;/strong&gt; acaba de chegar em seu &lt;em&gt;Release Candidate&lt;/em&gt; e, com ele, trás uma série de recursos e otimizações de código, além de um considerável ganho de performance! Muito desse mérito se deve ao &lt;strong&gt;&lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34;&gt;Angular&lt;/a&gt;&lt;/strong&gt; (como é chamada a nova versão do framework, que deixa para trás o &amp;#8220;JS&amp;#8221; ao final do nome) que chega &amp;#8211; finalmente &amp;#8211; na sua versão estável, provando que não está para brincadeiras.&lt;/p&gt;

&lt;p&gt;Depois de passar por várias mudanças e quebras de código à cada novo release, o &lt;strong&gt;Ionic 2&lt;/strong&gt; agora atinge a maturidade e se torna um competidor ainda mais forte do modelo de desenvolvimento tradicional (nativo). No entanto, se você já está familiarizado com o &lt;strong&gt;&lt;a href=&#34;http://ionicframework.com/&#34; target=&#34;_blank&#34;&gt;Ionic 1&lt;/a&gt;&lt;/strong&gt;, a mudança nos conceitos pode lhe soar um tanto quanto desagradáveis à primeira vista. Mas uma vez que você entende como as peças se encaixam, vai perceber que criar aplicações móveis com o framework tornou-se uma atividade ainda mais simples e recompensadora.&lt;/p&gt;

&lt;h3 id=&#34;o-que-tem-de-novo&#34;&gt;O que tem de novo?&lt;/h3&gt;

&lt;p&gt;O Ionic foi desenvolvido com base no &lt;strong&gt;&lt;a href=&#34;https://angularjs.org/&#34; target=&#34;_blank&#34;&gt;AngularJS&lt;/a&gt;&lt;/strong&gt;, um framework voltado para a criação de aplicações web modernas, construídas com base em uma página &lt;strong&gt;HTML5&lt;/strong&gt; que atualiza seu conteúdo de maneira dinâmica (as famosas &lt;em&gt;Single Page Applications&lt;/em&gt; ou &lt;em&gt;SPAs&lt;/em&gt;). Ao tirar proveito dessa arquitetura &amp;#8211; e adicionar uma série de estilos que emulam o visual de aplicações nativas &amp;#8211; o Ionic facilitou, em muito, a tarefa de construir um app híbrido, ou seja, aquele que executa tanto em smartphones &lt;strong&gt;iOS&lt;/strong&gt; quando &lt;strong&gt;Android&lt;/strong&gt;, otimizando o seu &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Time_to_market&#34; target=&#34;_blank&#34;&gt;Tempo de Mercado&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mesmo ainda sendo executado em uma &lt;strong&gt;WebView&lt;/strong&gt; (browser interno dos smartphones), uma aplicação baseada no Ionic 2 é muito mais rápida, modular e escalável, se comparada com a primeira versão. Principalmente porque o framework segue os padrões web mais recentes, como a nova especificação &lt;strong&gt;ES6&lt;/strong&gt; (ou ES2015), trazendo para o javaScript conceitos como &lt;strong&gt;classes&lt;/strong&gt;, &lt;strong&gt;módulos&lt;/strong&gt; e &lt;strong&gt;arrow functions&lt;/strong&gt;. Além disso, temos também a presença do polêmico &lt;strong&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34; target=&#34;_blank&#34;&gt;TypeScript&lt;/a&gt;&lt;/strong&gt; (opcional), que trás o poder da tipagem para o seu código, com o intuito de minimizar erros, simplificar a injeção de dependências, facilitar testes, e etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/tumblr_npjjd6T4Lu1tq4of6o1_400.gif&#34; alt=&#34;Too much information - gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mas embora tudo isso pareça um verdadeiro balaio de gato que funciona mais como repelente do que atrativo, não se deixe enganar: A versão 2 do Ionic dá um considerável salto de inovação em relação à sua versão original e abre caminho para &lt;a href=&#34;https://ionicframework.com/docs/v2/resources/progressive-web-apps/&#34; target=&#34;_blank&#34;&gt;novas e interessantes tendências&lt;/a&gt; que valem a pena serem exploradas!&lt;/p&gt;

&lt;h2 id=&#34;mão-na-massa&#34;&gt;Mão na massa!&lt;/h2&gt;

&lt;p&gt;Para entender melhor como se constrói uma aplicação com o Ionic 2, vamos criar uma do zero 😀&lt;/p&gt;

&lt;p&gt;A aplicação que iremos construir é um simples leitor de feeds baseado na API do &lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt;&lt;/strong&gt;, o poderoso canal agregador de notícias, onde membros da comunidade podem submeter conteúdos como links, textos, imagens, etc. O app será 100% funcional e poderá ser instalado no seu smartphone e, quem sabe, até mesmo evoluir com a inclusão de novas funcionalidades.&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-framework&#34;&gt;Instalando o framework&lt;/h3&gt;

&lt;p&gt;Se você já tem o Ionic 1 instalado na sua máquina, basta digitar o seguinte comando no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g ionic&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Esse comando atualiza o framework para trabalhar com o Ionic 2 sem afetar a instalação da versão 1.&lt;/p&gt;

&lt;p&gt;Mas caso você seja marinheiro de primeira viagem, certifique-se que tenha o &lt;strong&gt;&lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt;&lt;/strong&gt; instalado na sua máquina e, em seguida, digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g ionic cordova&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lembre-se de que você também deve ter o SDK do Android e o Java instalados para fazer build para Android e/ou o Xcode para o build no iPhone:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ionicframework.com/docs/v2/resources/platform-setup/mac-setup.html&#34; target=&#34;_blank&#34;&gt;Guia de instalação para Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ionicframework.com/docs/v2/resources/platform-setup/windows-setup.html&#34; target=&#34;_blank&#34;&gt;Guia de instalação para Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depois que a instalação for concluída, você pode verificar a versão do framework no terminal, digitando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic -v&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;criando-um-novo-projeto&#34;&gt;Criando um novo projeto&lt;/h3&gt;

&lt;p&gt;O CLI (&lt;em&gt;Command Line Interface&lt;/em&gt;) do Ionic vem com um monte de comandos úteis que nos ajudam na criação e na manutenção dos projetos. Para conferir a lista de comandos disponíveis, digite:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic help&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Por enquanto o que nos interessa é o comando &lt;strong&gt;start&lt;/strong&gt;. Digite o seguinte no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic start MyReader blank --v2 --appname &amp;quot;Best Reader Ever&amp;quot; --id &amp;quot;com.tableless.myreader&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;O comando &lt;strong&gt;start&lt;/strong&gt; oferece três tipos de templates com código boilerplate. São eles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sidemenu&lt;/strong&gt; &amp;#8211; adiciona um menu lateral à aplicação (estilo de navegação &lt;a href=&#34;https://material.google.com/patterns/navigation-drawer.html&#34; target=&#34;_blank&#34;&gt;padrão no Android&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tabs&lt;/strong&gt; &amp;#8211; cria uma navegação baseada em guias (modelo de organização de conteúdo &lt;a href=&#34;https://developer.apple.com/ios/human-interface-guidelines/ui-bars/tab-bars/&#34; target=&#34;_blank&#34;&gt;incentivado pelo iOS&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blank&lt;/strong&gt; &amp;#8211; cria um projeto com boilerplate básico, sem nenhum template específico.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O comando que digitamos no terminal vai utilizar o template &lt;strong&gt;blank&lt;/strong&gt;. Também passamos mais três parâmetros adicionais: &lt;strong&gt;v2&lt;/strong&gt; que informa que queremos trabalhar com a versão 2 do Ionic, &lt;strong&gt;appname&lt;/strong&gt;, que define um nome de projeto menos formal e &lt;strong&gt;id&lt;/strong&gt;, que nos possibilita definir o package da aplicação.&lt;/p&gt;

&lt;p&gt;Vamos agora acessar a pasta do nosso projeto, digitando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd MyReader&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-1-8211-conhecendo-a-arquitetura&#34;&gt;Passo 1 &amp;#8211; Conhecendo a arquitetura&lt;/h3&gt;

&lt;p&gt;Depois de tantas configurações e explicações iremos, enfim, para a parte divertida do processo!&lt;/p&gt;

&lt;p&gt;Se você visitar a pasta do projeto dentro de &lt;strong&gt;src/pages/&lt;/strong&gt;, vai notar a presença de uma outra pasta chamada &lt;strong&gt;home&lt;/strong&gt;. Dentro dela há três arquivos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;home.html;&lt;/li&gt;
&lt;li&gt;home.scss;&lt;/li&gt;
&lt;li&gt;home.ts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essas pastas e arquivos foram criados como resultado do comando &lt;strong&gt;start&lt;/strong&gt;. O Ionic é baseado no Angular que, por sua vez, considera que os principais componentes de uma aplicação devem ter escopos isolados. Portanto, cada &amp;#8220;página&amp;#8221; de um projeto tem seu próprio template visual (html), estilo (scss) e classe (ts). Perceba também que, por padrão, o Ionic utiliza &lt;strong&gt;Sass&lt;/strong&gt; para a escrita de CSS e TypeScript para as classes, ao invés de JavaScript puro. Fique à vontade para vasculhar as pastas do projeto e entender como as informações são organizadas, uma vez que este tutorial não tem o propósito de explorar isso com detalhes.&lt;/p&gt;

&lt;p&gt;Antes de modificar algo no projeto, vamos verificar o que já foi gerado de graça. Digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Este comando inicia um servidor local na nossa máquina e abre uma nova aba no browser com a aplicação no ar. Como o &lt;em&gt;LiveReload&lt;/em&gt; já vem habilitado por padrão, modificações que fizermos no código serão refletidas automaticamente no browser:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-1.jpg&#34; alt=&#34;Ionic 2 - Screenshot 1 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos ver isso acontecendo em tempo real. Abra o arquivo &lt;strong&gt;home.html&lt;/strong&gt; e remova o código desnecessário até que ele fique assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar&amp;gt;
    &amp;lt;ion-title&amp;gt;My Feed Reader&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;

&amp;lt;ion-content&amp;gt;

&amp;lt;/ion-content&amp;gt;&lt;/pre&gt;

&lt;p&gt;Confira a mudança ocorrendo automaticamente no browser:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-2.jpg&#34; alt=&#34;Ionic 2 - Screenshot 2 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos dar uma olhada no componente responsável por controlar nosso template. Abra o arquivo &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController } from &#39;ionic-angular&#39;;

@Component({
   selector: &#39;page-home&#39;,
   templateUrl: &#39;home.html&#39;
})
export class HomePage {
   constructor(public navCtrl: NavController) {}
}
&lt;/pre&gt;

&lt;p&gt;Perceba que o arquivo é composto por três blocos distintos, que eu chamo carinhosamente de os &lt;strong&gt;3D&lt;/strong&gt;: &lt;strong&gt;Declaration&lt;/strong&gt;, &lt;strong&gt;Decorator&lt;/strong&gt; e &lt;strong&gt;Definition&lt;/strong&gt;. A primeira parte é onde declaramos componentes externos ou bibliotecas que iremos utilizar em nosso projeto:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController } from &#39;ionic-angular&#39;;
&lt;/pre&gt;

&lt;p&gt;O segundo bloco é composto por um &lt;strong&gt;Decorator&lt;/strong&gt;. No Angular, todo componente tem um &amp;#8220;decorador&amp;#8221;, que é responsável por fornecer metadados ou informações sobre a classe. No nosso caso, o decorador está dizendo que as modificações no html serão feitas apenas no componente &lt;strong&gt;page-home&lt;/strong&gt; e que este arquivo, ou seja, o template html que iremos utilizar, se chama &lt;strong&gt;home.html&lt;/strong&gt;, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;@Component({
   selector: &#39;page-home&#39;,
   templateUrl: &#39;home.html&#39;
})
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Lembre-se que, por padrão, os Decorators ficam sempre em cima do bloco de definição da classe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O seletor &lt;strong&gt;page-home&lt;/strong&gt; será útil quando for necessário criar regras de estilo em CSS aplicadas apenas à ele.&lt;/p&gt;

&lt;p&gt;E, por fim, temos nosso escopo de classe. Classes em qualquer linguagem de programação orientada à objeto servem para definir a estrutura e o comportamento de objetos. Por enquanto o que você precisa saber é que nossa classe tem apenas um construtor que recebe um objeto do tipo &lt;strong&gt;NavController&lt;/strong&gt; por parâmetro. Nosso próximo passo será inserir novos atributos e métodos para definir melhor o seu comportamento:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;export class HomePage {
  constructor(public navCtrl: NavController) {}
&lt;/pre&gt;

&lt;h3 id=&#34;passo-2-8211-consumindo-dados-de-uma-api-pública&#34;&gt;Passo 2 &amp;#8211; Consumindo dados de uma API pública&lt;/h3&gt;

&lt;p&gt;Agora que você já sabe mais ou menos como as coisas funcionam, vamos fazer rapidamente uma requisição à uma API externa (Reddit) para exibir seu resultado em uma lista no nosso template.&lt;/p&gt;

&lt;h4 id=&#34;2-1-8211-trabalhando-com-observables&#34;&gt;2.1 &amp;#8211; Trabalhando com Observables&lt;/h4&gt;

&lt;p&gt;Inclua o seguinte código em &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController } from &#39;ionic-angular&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;

@Component({
  selector: &#39;page-home&#39;,
  templateUrl: &#39;home.html&#39;
})
export class HomePage {

  public feeds: Array&amp;lt;string&amp;gt;;
  private url: string = &#34;https://www.reddit.com/new.json&#34;;  

  constructor(public navCtrl: NavController, public http: Http) {

    this.http.get(this.url).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
        this.feeds = data.data.children;
      }); 
  }

}
&lt;/pre&gt;

&lt;p&gt;_Caso queira entender melhor sobre os endpoints da API, dê uma olhada &lt;a href=&#34;https://www.reddit.com/dev/api/&#34; target=&#34;_blank&#34;&gt;nesse link&lt;/a&gt;._&lt;/p&gt;

&lt;p&gt;O que fizemos acima foi importar o componente &lt;strong&gt;Http&lt;/strong&gt; e injetá-lo no método construtor. Isso nos possibilita acessar sua instância através do objeto &lt;strong&gt;this&lt;/strong&gt;. Note que também estamos importando o operador &lt;strong&gt;map&lt;/strong&gt; da biblioteca &lt;strong&gt;&lt;a href=&#34;https://github.com/Reactive-Extensions/RxJS&#34; target=&#34;_blank&#34;&gt;rxjs&lt;/a&gt;&lt;/strong&gt;. O rxjs é uma das extensões que compõe a &lt;strong&gt;&lt;a href=&#34;http://reactivex.io/&#34; target=&#34;_blank&#34;&gt;reactiveX&lt;/a&gt;&lt;/strong&gt; (Reactive Extensions), uma biblioteca assíncrona que trabalha com o stream de dados no padrão &lt;strong&gt;Observable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;No objeto http estamos fazendo uma requisição do tipo &lt;strong&gt;GET&lt;/strong&gt; à um endpoint que definimos na variável &lt;strong&gt;url&lt;/strong&gt;, acima do método construtor. Note que, com o uso do TypeScript, podemos definir seu escopo (pública ou privada) e ainda definir o seu tipo (string, number, array&amp;#8230;). Ponto para o TypeScript!&lt;/p&gt;

&lt;p&gt;Em seguida, transformamos o resultado dessa requisição utilizando o operador map e o convertemos para JSON através do método &lt;strong&gt;subscribe&lt;/strong&gt; (&amp;#8220;similar&amp;#8221; ao método &lt;strong&gt;then&lt;/strong&gt; de uma Promise).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;É importante salientar que o map da biblioteca rxjs é utilizado exclusivamente para mapear um &lt;strong&gt;array do tipo Observable&lt;/strong&gt; e não é o mesmo map que utilizamos em um array comum no JavaScript. Aprenda mais sobre requisições remotas com Observables &lt;a href=&#34;https://angular.io/docs/ts/latest/guide/server-communication.html#!#rxjs&#34; target=&#34;_blank&#34;&gt;nesse link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Por fim, incluímos o resultado da requisição (agora um objeto do tipo JSON) dentro da variável pública &lt;strong&gt;feeds&lt;/strong&gt;, que aqui representa um array de strings. Seu escopo precisa ser público pois iremos acessar seu conteúdo no template.&lt;/p&gt;

&lt;h4 id=&#34;2-2-8211-exibindo-resultado-para-o-usuário&#34;&gt;2.2 &amp;#8211; Exibindo resultado para o usuário&lt;/h4&gt;

&lt;p&gt;Como você percebeu, dentro do nosso arquivo &lt;strong&gt;home.ts&lt;/strong&gt; há uma referência ao template &lt;strong&gt;home.html&lt;/strong&gt; dentro do bloco &lt;strong&gt;@Component&lt;/strong&gt;. Esse template, na verdade, é aquilo que o usuário realmente vê na tela do seu smartphone, com base no que definimos dentro da nossa classe. Por enquanto ele não está exibindo nada. Modifique o conteúdo de &lt;strong&gt;home.html&lt;/strong&gt; conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar&amp;gt;
    &amp;lt;ion-title&amp;gt;My Feed Reader&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;

&amp;lt;ion-content&amp;gt;
  &amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34;&amp;gt;
      {{feed.data.title}}
    &amp;lt;/ion-item&amp;gt;
  &amp;lt;/ion-list&amp;gt;
&amp;lt;/ion-content&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O Ionic fornece uma grande variedade de componentes visuais &lt;em&gt;out of the box&lt;/em&gt; que nos permite construir uma interface praticamente idêntica à de uma aplicação nativa. Não só isso como também é capaz de adaptar o seu estilo visual de acordo com cada plataforma (algo que veremos em breve).&lt;/p&gt;

&lt;p&gt;A tag &lt;strong&gt;&lt;ion-navbar&gt;&lt;/strong&gt; representa a barra de navegação que fica no topo da tela. Essa barra geralmente comporta o título da aplicação (como visto na tag &lt;strong&gt;&lt;ion-title&gt;&lt;/strong&gt;) mas também pode conter botões de ação e demais itens, caso necessário.&lt;/p&gt;

&lt;p&gt;Já as informações dinâmicas sempre são inseridas dentro da tag &lt;strong&gt;&lt;ion-content&gt;&lt;/strong&gt;, como acabamos de fazer ao inserir o componente &lt;strong&gt;&lt;ion-list&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Não iremos nos aprofundar nos detalhes dos templates visuais fornecidos pelo Ionic. Você pode encontrar exemplos do markup de cada componente &lt;a href=&#34;https://ionicframework.com/docs/v2/components&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;. O componente que estamos utilizando no exemplo acima é &lt;a href=&#34;https://ionicframework.com/docs/v2/components/#lists&#34; target=&#34;_blank&#34;&gt;este&lt;/a&gt;. Eu apenas copiei o markut e inseri aqui, alterando apenas aquilo que é necessário. Esta é, sem dúvida, uma das features mais importantes do framework, uma vez que ela acelera o processo de prototipação de um aplicativo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Observe o seguinte bloco de código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34;&amp;gt;
      {{feed.data.title}}
    &amp;lt;/ion-item&amp;gt;
  &amp;lt;/ion-list&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Note o loop que estamos executando com a instrução *&lt;strong&gt;ngFor&lt;/strong&gt;. Estamos acessando o conteúdo do array &lt;strong&gt;feeds&lt;/strong&gt; e iterando sobre ele com uma variável local (&lt;strong&gt;feed&lt;/strong&gt;) para popular nossa lista. Esta é uma conveniência fornecida pelo Angular conhecida como &lt;em&gt;Embedded templates&lt;/em&gt; ou diretivas html, que nos ajuda na renderização dos atributos disponíveis na classe associada. Observe agora o seguinte trecho:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{{feed.data.title}}&lt;/pre&gt;

&lt;p&gt;Ele representa o valor que será exibido em cada célula da lista, que, neste caso, representa o título do feed. Esta sintaxe entre chaves duplas é chamada de &lt;strong&gt;Interpolação&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora salve o arquivo e verifique o resultado no browser. É provável que você esteja vendo algo assim:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-3.jpg&#34; alt=&#34;Ionic 2 - Screenshot 3 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Se você entendeu tudo que foi explicado até aqui, significa que você já domina boa parte dos principais conceitos não só do Ionic 2 como também do Angular 2. Parabéns!&lt;/p&gt;

&lt;p&gt;Agora é o momento em que nos despedimos das explicações mais detalhadas e partimos para a ação. Vamos dar um tapinha no visual desse app e inserir alguns recursos extras que irão torná-lo ainda mais sexy 😉&lt;/p&gt;

&lt;h3 id=&#34;passo-3-8211-customizando-o-template&#34;&gt;Passo 3 &amp;#8211; Customizando o template&lt;/h3&gt;

&lt;p&gt;Nosso próximo passo será incluir mais informações nas células dessa lista, uma vez que apenas o título não é o suficiente para capturar a atenção do usuário.&lt;/p&gt;

&lt;h4 id=&#34;3-1-8211-adicionando-informações-extras&#34;&gt;3.1 &amp;#8211; Adicionando informações extras&lt;/h4&gt;

&lt;p&gt;Ainda em &lt;strong&gt;home.html&lt;/strong&gt;, altere o conteúdo atual de dentro da tag &lt;strong&gt;&lt;ion-content&gt;&lt;/strong&gt; para:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34;&amp;gt;
       &amp;lt;ion-thumbnail item-left&amp;gt;
          &amp;lt;img [src]=&#34;feed.data.thumbnail&#34;&amp;gt;
       &amp;lt;/ion-thumbnail&amp;gt;
       &amp;lt;h2&amp;gt;{{feed.data.title}}&amp;lt;/h2&amp;gt;
       &amp;lt;p&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
    &amp;lt;/ion-item&amp;gt;
 &amp;lt;/ion-list&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Salve o arquivo e visualize o resultado no browser:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-4.jpg&#34; alt=&#34;Ionic 2 - Screenshot 4 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora estamos utilizando um novo template de lista, que comporta imagens. O Ionic já faz o serviço de ajustar os itens pra você contanto que indiquemos isso através dos atributos e classes que o framework nos oferece. Perceba, por exemplo, o atributo &lt;strong&gt;item-left&lt;/strong&gt; presente dentro da tag &lt;strong&gt;&lt;ion-thumbnail&gt;&lt;/strong&gt;. Altere seu nome para &lt;strong&gt;item-right&lt;/strong&gt; e você verá que as imagens serão posicionadas à direita da célula. Tente também alterar a tag &lt;strong&gt;&lt;ion-thumbnail&gt;&lt;/strong&gt; para &lt;strong&gt;&lt;ion-avatar&gt;&lt;/strong&gt; e verá que as imagens ficarão menores e com bordas arredondadas. Muito conveniente!&lt;/p&gt;

&lt;p&gt;Note que o atributo &lt;strong&gt;src&lt;/strong&gt; da tag de imagem está envolto por colchetes. Essa sintaxe se chama &lt;em&gt;Property binding&lt;/em&gt; e é utilizada para atribuir uma propriedade da view ao valor de uma expressão. No entanto, a mesma sintaxe pode ser substituída por esta:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img src=&#34;{{ feed.data.thumbnail }}&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Para fins didáticos iremos deixar a expressão com colchetes neste exemplo.&lt;/p&gt;

&lt;p&gt;Perceba também que o título do feed agora aparece dentro da tag &lt;strong&gt;h2&lt;/strong&gt; e um novo item foi inserido dentro de uma tag &lt;strong&gt;p&lt;/strong&gt;. Você pode utilizar o &lt;em&gt;Chrome Developer Tools&lt;/em&gt; para inspecionar a conteúdo da listagem disponível no array inserindo a instrução &lt;code&gt;console.log(this.feed);&lt;/code&gt; ao fim da requisição, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.http.get(this.url).map(res =&amp;gt; res.json())
    .subscribe(data =&amp;gt; {
      this.feeds = data.data.children;
     // Exibindo conteúdo do array no console do browser
      console.log(this.feeds);
    }); 
&lt;/pre&gt;

&lt;h3 id=&#34;passo-4-8211-fornecendo-feedback-ao-cliente-e-capturando-eventos&#34;&gt;Passo 4 &amp;#8211; Fornecendo feedback ao cliente e capturando eventos&lt;/h3&gt;

&lt;p&gt;Embora nossa aplicação consiga requisitar dados externos com sucesso, não há nada que informe ao usuário sobre o status dessa ação. Ele pode aguardar poucos segundos como também pode esperar uma eternidade até que alguma coisa apareça na tela do celular, dependendo do tipo de conexão que esteja enfrentando.&lt;/p&gt;

&lt;h4 id=&#34;4-1-8211-adicionando-um-loading&#34;&gt;4.1 &amp;#8211; Adicionando um Loading&lt;/h4&gt;

&lt;p&gt;Insira o seguinte conteúdo no arquivo &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController, LoadingController } from &#39;ionic-angular&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;

@Component({
  selector: &#39;page-home&#39;,
  templateUrl: &#39;home.html&#39;
})
export class HomePage {

  public feeds: Array&amp;lt;string&amp;gt;;
  private url: string = &#34;https://www.reddit.com/new.json&#34;;  

  constructor(public navCtrl: NavController, public http: Http, public loadingCtrl: LoadingController) {

    this.fetchContent();

  }

  fetchContent ():void {
    let loading = this.loadingCtrl.create({
      content: &#39;Fetching content...&#39;
    });

    loading.present();

    this.http.get(this.url).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
        this.feeds = data.data.children;
        loading.dismiss();
      });  
  }
&lt;/pre&gt;

&lt;p&gt;Salve o arquivo e verifique imediatamente o resultado no browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-5.jpg&#34; alt=&#34;Ionic 2 - Screenshot 5 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O Loading é um ótimo componente para fornecer feedback visual para o usuário, indicando que alguma atividade está sendo executada em background. Nada mais é que uma caixa de diálogo que bloqueia qualquer atividade do usuário até que determinada ação seja concluída. A nossa caixa de diálogo inclui um spinner e um texto indicativo por padrão, mas todas essas opções podem ser customizadas para atender melhor a necessidade do seu app.&lt;/p&gt;

&lt;p&gt;Incluir um Loading é extremamente simples: Primeiro nós importamos o componente &lt;strong&gt;LoadingController&lt;/strong&gt; da biblioteca &lt;strong&gt;ionic-angular&lt;/strong&gt; e injetamos o objeto no método construtor. Em seguida, inicializamos o Loading com uma mensagem de feedback e depois apresentamos ele através do método &lt;strong&gt;present&lt;/strong&gt;. Depois nós retiramos o componente da tela caso tenhamos sucesso na requisição através do método &lt;strong&gt;dismiss&lt;/strong&gt;. Simples!&lt;/p&gt;

&lt;p&gt;Perceba também que, como boa prática, movemos a requisição da API para um método chamado &lt;strong&gt;fetchContent&lt;/strong&gt; que é então chamado imediatamente no construtor. Outra novidade é a inclusão do tipo de retorno do método, tipado como &lt;strong&gt;void&lt;/strong&gt;. Se você vem de linguagens como Java, sabe que esta é uma maneira de dizer que o método não retorna nada, apenas executa uma ação.&lt;/p&gt;

&lt;h4 id=&#34;4-2-8211-eventos-html&#34;&gt;4.2 &amp;#8211; Eventos html&lt;/h4&gt;

&lt;p&gt;Antes de passarmos para a próxima etapa, vamos incluir um evento nas células. Faça a seguinte modificação em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34; (click)=&#34;itemSelected(feed)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Queremos executar alguma ação sempre que o usuário clicar/tocar em uma das células. Conseguimos isso fazendo o &lt;em&gt;binding&lt;/em&gt; do método &lt;strong&gt;itemSelected&lt;/strong&gt; no evento html &lt;strong&gt;click&lt;/strong&gt; e passando o feed como argumento. Essa sintaxe de incluir eventos html dentro de parênteses é chamado de &lt;em&gt;Event Binding&lt;/em&gt; no Angular.&lt;/p&gt;

&lt;p&gt;Agora basta incluir o método dentro da classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;itemSelected (feed):void {
    alert(feed.data.url);
  } 
&lt;/pre&gt;

&lt;p&gt;Salve o arquivo e clique em cima de alguma célula. A url do post será exibida em um alert!&lt;/p&gt;

&lt;h3 id=&#34;passo-5-8211-exibindo-o-conteúdo-de-uma-url-no-browser&#34;&gt;Passo 5 &amp;#8211; Exibindo o conteúdo de uma url no browser&lt;/h3&gt;

&lt;p&gt;Agora que você já entendeu como capturar uma ação do usuário, vamos prosseguir com as funcionalidades do nosso app e fazer com que o post seja exibido no browser.&lt;/p&gt;

&lt;h4 id=&#34;5-1-8211-instalando-plugin-inappbrowser&#34;&gt;5.1 &amp;#8211; Instalando plugin InAppBrowser&lt;/h4&gt;

&lt;p&gt;Em uma nova aba do terminal, entre na pasta do projeto e digite o seguinte:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic plugin add cordova-plugin-inappbrowser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Este plugin nos possibilita abrir sites externos em um browser diretamente do app. Mas só será possível testar essa funcionalidade se você fizer o build para testar no emulador ou no seu próprio dispositivo. Para isso, digite a seguinte instrução no terminal caso você possua um iPhone:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic platform add ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ou, caso tenha um dispositivo Android:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic platform add android&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Agora altere o parâmetro do método no arquivo &lt;strong&gt;home.html&lt;/strong&gt; para enviar apenas a url como argumento:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34; (click)=&#34;itemSelected(feed.data.url)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;E agora basta fazer as seguintes alterações em &lt;strong&gt;home.ts&lt;/strong&gt;. Primeiro, importar a classe do plugin:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { InAppBrowser } from &#39;ionic-native&#39;;
&lt;/pre&gt;

&lt;p&gt;Em seguida, faça a seguinte alteração no método:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;itemSelected (url: string):void {
   let browser = new InAppBrowser(url, &#39;_system&#39;);
 }
&lt;/pre&gt;

&lt;p&gt;Pronto! Agora só resta testar se a funcionalidade está sendo executada conforme desejado.&lt;/p&gt;

&lt;h4 id=&#34;5-2-8211-executando-testes-nas-plataformas&#34;&gt;5.2 &amp;#8211; Executando testes nas plataformas&lt;/h4&gt;

&lt;p&gt;Para instalar o emulador do iOS e preparar o ambiente para testes no seu próprio iPhone, basta digitar no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm -g install ios-sim ios-deploy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora digite a instrução abaixo e, caso tudo tenha dado certo, é provável que você veja o aplicativo abrindo no seu emulador:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic run ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Caso esteja com o celular conectado ao computador através da porta USB, o deploy será automaticamente executado no seu iPhone. Se mesmo assim você encontrar dificuldades, tente digitar:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic run ios --device&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para testar no Android, apenas digite:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic run android&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Maiores detalhes sobre deploy e testes em ambas plataformas você encontra &lt;a href=&#34;https://ionicframework.com/docs/v2/resources/developer-tips/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Caso você tenha conseguido testar com sucesso, deve ter percebido que, ao clicar em uma das células, há um certo delay entre o momento do clique e o carregamento da página. Para corrigir isso, apenas insira o conteúdo da célula dentro de um &lt;strong&gt;botão&lt;/strong&gt; (button) com o atributo &lt;strong&gt;ion-item&lt;/strong&gt;, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;button ion-item *ngFor=&#34;let feed of feeds&#34; (click)=&#34;itemSelected(feed.data.url)&#34;&amp;gt;
    &amp;lt;ion-thumbnail item-left&amp;gt;
       &amp;lt;img [src]=&#34;feed.data.thumbnail&#34;&amp;gt;
    &amp;lt;/ion-thumbnail&amp;gt;
    &amp;lt;h2&amp;gt;{{feed.data.title}}&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
 &amp;lt;/button&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Agora o delay não só é removido como é adicionado um overlay em tom mais escuro na célula quando a mesma é pressionada.&lt;/p&gt;

&lt;p&gt;Tem mais uma coisa que está incomodando: Perceba que os posts sem imagens estão quebrando nosso layout e deixando a nossa lista com aspecto pouco profissional. Vamos mudar isso incluindo o seguinte trecho de código dentro do método &lt;strong&gt;subscribe&lt;/strong&gt; de &lt;strong&gt;fecthContent&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.feeds.forEach((e, i, a) =&amp;gt; {
   if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) { 
      e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
   }
 })
&lt;/pre&gt;

&lt;p&gt;Utilizamos o método &lt;strong&gt;forEach&lt;/strong&gt; do JavaScript para iterar pelo array de feeds e verificar quais itens estão sem imagem. Em seguida, para estes itens, incluímos uma imagem padrão do próprio reddit, que está disponível em um link público e irá servir de placeholder.&lt;/p&gt;

&lt;p&gt;Veja o resultado de todas estas modificações rodando em um device iOS:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step5.gif&#34; alt=&#34;Ionic 2 - InAppBrowser&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-6-8211-adicionando-scroll-infinito-na-célula&#34;&gt;Passo 6 &amp;#8211; Adicionando scroll infinito na célula&lt;/h3&gt;

&lt;p&gt;Nosso app está ficando bem legal mas ainda necessita de algumas modificações para ficar realmente atrativo. Uma delas é viabilizar alguma maneira de acessar os posts mais antigos, já que nosso app tem uma restrição de apenas 25 itens por request. Isto é muito ruim, pois o usuário fica limitado à visitar apenas estes itens.&lt;/p&gt;

&lt;p&gt;Se você explorar a API do reddit vai perceber que ela nos fornece vários parâmetros do tipo GET para controlar filtros e paginações. Um deles é chamado &lt;em&gt;after&lt;/em&gt;, que utiliza o o atributo &lt;em&gt;fullName&lt;/em&gt; (junção do tipo do post mais o seu ID) como identificador único e funciona como âncora para os demais posts.&lt;/p&gt;

&lt;p&gt;Em outras palavras, uma requisição como esta:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://www.reddit.com/new.json?after=t3_57ct5z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pode ser lida como: &amp;#8220;_Busque os novos posts que vem depois do post de nome t3&lt;em&gt;57ct5z&lt;/em&gt;&amp;#8221;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fique atento com a forma como você lê a instrução pois há uma pegadinha: &lt;strong&gt;Depois&lt;/strong&gt; aqui se refere ao array de posts, ou seja, os posts mais velhos e não os mais recentes. Veremos como buscar os mais recentes na próxima etapa do app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Agora que você já entendeu a mecânica, vamos começar inserindo o componente responsável por acionar o scroll infinito na nossa página. Insira a seguinte instrução em &lt;strong&gt;home.html&lt;/strong&gt; imediatamente após o fim da tag &lt;strong&gt;&lt;ion-list&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;ion-infinite-scroll (ionInfinite)=&#34;doInfinite($event)&#34;&amp;gt;
    &amp;lt;ion-infinite-scroll-content
       loadingText=&#34;Loading more data...&#34;&amp;gt;
    &amp;lt;/ion-infinite-scroll-content&amp;gt;
 &amp;lt;/ion-infinite-scroll&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;E criamos o método correspondente em nossa classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;doInfinite(infiniteScroll) {

    let paramsUrl = (this.feeds.length &amp;gt; 0) ? this.feeds[this.feeds.length - 1].data.name : &#34;&#34;;

      this.http.get(this.olderPosts + paramsUrl).map(res =&amp;gt; res.json())
        .subscribe(data =&amp;gt; {
        
          this.feeds = this.feeds.concat(data.data.children);
          
          this.feeds.forEach((e, i, a) =&amp;gt; {
            if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
              e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
            }
          })
          infiniteScroll.complete();
        }); 
  }  
&lt;/pre&gt;

&lt;p&gt;Por fim, inserimos a url da requisição:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;private olderPosts: string = &#34;https://www.reddit.com/new.json?after=&#34;;
&lt;/pre&gt;

&lt;p&gt;O novo método é bem parecido com o &lt;strong&gt;fetchContent&lt;/strong&gt;, com a diferença de que criamos uma variável local que guarda o valor do atributo &lt;strong&gt;nome&lt;/strong&gt; do último item do array de feeds e insere este valor no fim da url. Em seguida, pegamos o array resultante da requisição e adicionamos no fim do array original através do método &lt;strong&gt;concat&lt;/strong&gt; do JavaScript. Note também que utilizamos o método &lt;strong&gt;complete&lt;/strong&gt; do componente, indicando que o mesmo deve ser removido da view.&lt;/p&gt;

&lt;p&gt;O resultado você confere abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step6.gif&#34; alt=&#34;Ionic 2 - Infinite Scroll&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E, com isto, incluímos uma funcionalidade extremamente importante em aplicações móveis: A habilidade de adicionar itens em uma lista por demanda, algo que enriquece em muito a experiência do usuário. Se você estava esperando instruções muito complexas, sinto lhe desapontar!&lt;/p&gt;

&lt;h3 id=&#34;passo-7-8211-atualizando-a-lista-com-pull-to-refresh&#34;&gt;Passo 7 &amp;#8211; Atualizando a lista com pull-to-refresh&lt;/h3&gt;

&lt;p&gt;Da mesma forma que adicionamos uma funcionalidade para carregar posts mais antigos sempre que chegarmos ao fim da nossa lista, precisamos agora viabilizar uma maneira de atualiza-la com os posts mais recentes. Uma excelente maneira de fazer isso é incluindo o componente &lt;strong&gt;Refresher&lt;/strong&gt; na nossa aplicação.&lt;/p&gt;

&lt;p&gt;O Refresher é um componente que adiciona o recurso de &lt;strong&gt;pull-to-refresh&lt;/strong&gt; à nossa lista. O pull-to-refresh consiste em manter o dedo pressionado no topo de uma lista e arrastá-la até uma determinada posição até que um evento seja disparado. No nosso caso, utilizaremos esse evento para inserir os posts mais recentes no início do array, ao contrário do que fizemos com o componente InfiniteScroll.&lt;/p&gt;

&lt;p&gt;Sem mais delongas, vamos começar inserindo o markup do componente antes da tag &lt;strong&gt;&lt;ion-list&gt;&lt;/strong&gt; no arquivo &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;ion-refresher (ionRefresh)=&#34;doRefresh($event)&#34;&amp;gt;
    &amp;lt;ion-refresher-content
       pullingIcon=&#34;arrow-dropdown&#34;
       pullingText=&#34;Pull to refresh&#34;
       refreshingSpinner=&#34;circles&#34;
       refreshingText=&#34;Refreshing...&#34;&amp;gt;
    &amp;lt;/ion-refresher-content&amp;gt;
 &amp;lt;/ion-refresher&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;Diferentemente do InfiniteScroll, desta vez eu incluí alguns parâmetros adicionais, como os textos de início e fim do evento, o formato padrão do spinner, o ícone da seta, etc.&lt;/p&gt;

&lt;p&gt;A url da requisição também precisa ser diferente, uma vez que iremos buscar os itens mais novos. Utilizaremos então o parâmetro &lt;em&gt;before&lt;/em&gt; oferecido pelo Reddit, fazendo com que a nossa nova url fique assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;private newerPosts: string = &#34;https://www.reddit.com/new.json?before=&#34;;
&lt;/pre&gt;

&lt;p&gt;Por fim, inserimos o método na classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;doRefresh(refresher) {

    let paramsUrl = this.feeds[0].data.name;

    this.http.get(this.newerPosts + paramsUrl).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
      
        this.feeds = data.data.children.concat(this.feeds);
        
        this.feeds.forEach((e, i, a) =&amp;gt; {
          if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
            e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
          }
        })
        refresher.complete();
      });
  } 

&lt;/pre&gt;

&lt;p&gt;Perceba como o método é similar àquele que escrevemos para o scroll infinito. A única diferença está na variável de parâmetro (que agora guarda o nome do primeiro item da lista como referência) e a maneira como concatenamos o array de feeds, inserindo os novos dados no início da lista e não no fim. Observe também a instrução &lt;strong&gt;refresher.complete&lt;/strong&gt;, que informa que operação foi concluída e que o componente pode ser removido da view.&lt;/p&gt;

&lt;p&gt;Nossa aplicação agora utiliza o refresher para atualizar a lista com os novos posts, veja:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step7.gif&#34; alt=&#34;Ionic 2 - Refresher&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-8-8211-filtrando-a-lista-com-uma-action-sheet&#34;&gt;Passo 8 &amp;#8211; Filtrando a lista com uma Action Sheet&lt;/h3&gt;

&lt;p&gt;Agora que a nossa lista tem potencial para aumentar cada vez mais de tamanho, seria interessante termos uma opção de filtrar posts pertencentes à determinadas categorias. Podemos fazer isso facilmente com uma &lt;strong&gt;Action Sheet&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;No arquivo &lt;strong&gt;home.html&lt;/strong&gt; vamos incluir um botão do lado direito da nossa AppBar/NavBar que será responsável por disparar o método:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-header&amp;gt;
   &amp;lt;ion-navbar&amp;gt;
       &amp;lt;ion-title&amp;gt;My Feed Reader&amp;lt;/ion-title&amp;gt;
       &amp;lt;ion-buttons end&amp;gt;
          &amp;lt;button ion-button icon-only (click)=&#34;showFilters()&#34;&amp;gt;
              &amp;lt;ion-icon name=&#34;funnel&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;
          &amp;lt;/button&amp;gt;
       &amp;lt;/ion-buttons&amp;gt; 
   &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Observe o atributo &lt;strong&gt;end&lt;/strong&gt; na tag &lt;strong&gt;&lt;ion-buttons&gt;&lt;/strong&gt;, indicando que o botão deve ser posicionado à direita, ou seja, no fim da barra de navegação. O atributo &lt;strong&gt;start&lt;/strong&gt; posicionaria o botão à esquerda. O &lt;strong&gt;&lt;ion-buttons&gt;&lt;/strong&gt; funciona como um container de botões. No nosso caso, só precisamos de um que será representado por um ícone (por isso o atributo &lt;strong&gt;icon-only&lt;/strong&gt;). Fizemos o binding do método &lt;strong&gt;showFilters&lt;/strong&gt; no evento &lt;strong&gt;click&lt;/strong&gt; e escolhemos o ícone de nome &lt;strong&gt;funnel&lt;/strong&gt; para representar o filtro.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Os ícones no Ionic são uma implementação própria do que chamamos de &lt;strong&gt;icon fonts&lt;/strong&gt;, ou seja, fontes que contém símbolos ao invés de texto ou números e que podem ser estilizados utilizando CSS. Utilizar esse tipo de fonte é conveniente pois reduz a necessidade de imagens, o que torna nosso aplicativo ligeiramente mais rápido e menos pesado. Para ter acesso à lista de ícones do Ionic 2, dê uma olhada &lt;a href=&#34;https://ionicframework.com/docs/v2/ionicons/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Antes de incluir nosso método, precisamos de mais duas variáveis. Uma que será responsável por guardar a versão íntegra do nosso array de feeds (sem nenhum filtro) e uma outra que será um booleano, com a função de indicar se há ou não um filtro ativo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;public noFilter: Array&amp;lt;any&amp;gt;;
 public hasFilter: boolean = false;
&lt;/pre&gt;

&lt;p&gt;Com isso podemos incluir as seguintes instruções no final do método &lt;strong&gt;subscribe&lt;/strong&gt; das funções &lt;strong&gt;doRefresh&lt;/strong&gt; e &lt;strong&gt;doInfinite&lt;/strong&gt;, com a finalidade de remover qualquer filtro ativo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.noFilter = this.feeds;
 this.hasFilter = false;
&lt;/pre&gt;

&lt;p&gt;Por fim, vamos agora incluir o método &lt;strong&gt;showFilters&lt;/strong&gt; na classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;showFilters() :void {

    let actionSheet = this.actionSheetCtrl.create({
      title: &#39;Filter options:&#39;,
      buttons: [
        {
          text: &#39;Music&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;music&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Movies&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;movies&#34;);
            this.hasFilter = true;
          }
        },        
        {
          text: &#39;Cancel&#39;,
          role: &#39;cancel&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter;
            this.hasFilter = false;
          }
        }
      ]
    });

    actionSheet.present();

  }  
&lt;/pre&gt;

&lt;p&gt;Primeiramente inicializamos o componente com a função &lt;strong&gt;create&lt;/strong&gt; em uma variável local. Este componente recebe um título e um array de botões onde cada botão tem, obrigatoriamente, um texto indicativo e um handler que dispara o evento correspondente. Estes botões representam as opções que serão apresentadas para o usuário na tela. O código do filtro é autoexplicativo.&lt;/p&gt;

&lt;p&gt;O último botão tem a função de cancelar a operação e remover qualquer filtro que esteja ativo. Perceba que este botão tem uma propriedade &lt;strong&gt;role&lt;/strong&gt; com o valor de &lt;strong&gt;cancel&lt;/strong&gt;, indicando que adota o comportamento padrão da plataforma e sempre estará posicionado como última opção da lista. Vale ressaltar que se o usuário clicar fora da Action Sheet, ou seja, no overlay da camada de fundo, a ação será interpretada como um cancelamento (o mesmo comportamento do botão com a role &amp;#8220;cancel&amp;#8221;).&lt;/p&gt;

&lt;p&gt;Em seguida adicionamos o método &lt;strong&gt;actionSheet.present&lt;/strong&gt; para que o componente seja apresentado na tela.&lt;/p&gt;

&lt;p&gt;Por enquanto só estamos filtrando os subreddits com as categorias música ou filmes, mas nada nos impede de inserir mais opções de filtro no componente. O código final da nossa classe fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController, LoadingController, ActionSheetController } from &#39;ionic-angular&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;
import { InAppBrowser } from &#39;ionic-native&#39;;

@Component({
  selector: &#39;page-home&#39;,
  templateUrl: &#39;home.html&#39;
})
export class HomePage {

  public feeds: Array&amp;lt;any&amp;gt;;
  private url: string = &#34;https://www.reddit.com/new.json&#34;;
  private newerPosts: string = &#34;https://www.reddit.com/new.json?before=&#34;;  
  private olderPosts: string = &#34;https://www.reddit.com/new.json?after=&#34;;

  public hasFilter: boolean = false;
  public noFilter: Array&amp;lt;any&amp;gt;;

  constructor(public navCtrl: NavController, public http: Http, 
       public loadingCtrl: LoadingController, public actionSheetCtrl: ActionSheetController) {

    this.fetchContent();

  }

  fetchContent ():void {
    let loading = this.loadingCtrl.create({
      content: &#39;Fetching content...&#39;
    });

    loading.present();

    this.http.get(this.url).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
        this.feeds = data.data.children;

        this.feeds.forEach((e, i, a) =&amp;gt; {
          if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
            e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
          }
        })

        this.noFilter = this.feeds;  

        loading.dismiss();
      });  
  }

  doRefresh(refresher) {

    let paramsUrl = this.feeds[0].data.name;

    this.http.get(this.newerPosts + paramsUrl).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
      
        this.feeds = data.data.children.concat(this.feeds);
        
        this.feeds.forEach((e, i, a) =&amp;gt; {
          if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
            e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
          }
        })

        this.noFilter = this.feeds;
        this.hasFilter = false;

        refresher.complete();
      });
  }  

  doInfinite(infiniteScroll) {

    let paramsUrl = (this.feeds.length &amp;gt; 0) ? this.feeds[this.feeds.length - 1].data.name : &#34;&#34;;

      this.http.get(this.olderPosts + paramsUrl).map(res =&amp;gt; res.json())
        .subscribe(data =&amp;gt; {
        
          this.feeds = this.feeds.concat(data.data.children);
          
          this.feeds.forEach((e, i, a) =&amp;gt; {
            if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
              e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
            }
          })

          this.noFilter = this.feeds;
          this.hasFilter = false;          
          
          infiniteScroll.complete();
        }); 
  }   

  itemSelected (url: string):void {
    let browser = new InAppBrowser(url, &#39;_system&#39;);
  } 
  
  showFilters() :void {

    let actionSheet = this.actionSheetCtrl.create({
      title: &#39;Filter options:&#39;,
      buttons: [
        {
          text: &#39;Music&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;music&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Movies&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;movies&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Games&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;gaming&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Pictures&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;pics&#34;);
            this.hasFilter = true;
          }
        },                
        {
          text: &#39;Ask Reddit&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;askreddit&#34;);
            this.hasFilter = true;
          }
        },        
        {
          text: &#39;Cancel&#39;,
          role: &#39;cancel&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter;
            this.hasFilter = false;
          }
        }
      ]
    });

    actionSheet.present();

  }        

}

&lt;/pre&gt;

&lt;p&gt;Por questões de bom senso, seria interessante indicar ao usuário quando um filtro está ou não ativo alterando a cor do ícone do funil. Podemos fazer isso utilizando o conceito de &lt;em&gt;Property binding&lt;/em&gt; explicado mais acima, com a diferença de que agora a propriedade será atribuída baseada em uma condição.&lt;/p&gt;

&lt;p&gt;insira o seguinte código na tag &lt;strong&gt;&lt;ion-icon&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-icon name=&#34;funnel&#34; [style.color]=&#34;hasFilter ? &#39;orange&#39; : &#39;inherit&#39;&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O resultado pode ser visto abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step8.gif&#34; alt=&#34;Ionic 2 - Action Sheet&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-9-8211-adicionando-um-provider-e-uma-barra-de-busca&#34;&gt;Passo 9 &amp;#8211; Adicionando um provider e uma barra de busca&lt;/h3&gt;

&lt;p&gt;Apesar de termos avançado com sucesso até aqui, tenho certeza de que a quantidade de código repetitivo presente em nossa classe deve ter te causado um certo incômodo. Podemos muito bem mover a responsabilidade de conexão com a API para um outro serviço externo, no intuito de evitar o &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt; e a propagação de &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_smell&#34; target=&#34;_blank&#34;&gt;code smell&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;9-1-8211-criando-um-injectable&#34;&gt;9.1 &amp;#8211; Criando um Injectable&lt;/h4&gt;

&lt;p&gt;O Angular nos permite criar uma classe com a anotação &lt;strong&gt;@Injectable&lt;/strong&gt; para estes cenários. Esse tipo de classe também são conhecidos como &lt;strong&gt;Providers&lt;/strong&gt; e podem tanto ser criados &amp;#8220;na mão&amp;#8221; quanto com a ajuda do CLI. Digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic g provider RedditService&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Esse código cria uma pasta &lt;strong&gt;providers&lt;/strong&gt; no nosso projeto com um arquivo de nome &lt;strong&gt;reddit-service.ts&lt;/strong&gt;, onde o Ionic insere alguns códigos de boilerplate para facilitar nossa vida. Altere seu conteúdo conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Injectable } from &#39;@angular/core&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;

@Injectable()
export class RedditService {

  private feeds: Array&amp;lt;any&amp;gt;;

  constructor(private http: Http) {}

  fetchData(url: string): Promise&amp;lt;any&amp;gt; {
    
    return new Promise(resolve =&amp;gt; {

      this.http.get(url).map(res =&amp;gt; res.json())
        .subscribe(data =&amp;gt; {
          this.feeds = data.data.children;
          
          this.feeds.forEach((e, i, a) =&amp;gt; {
            if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
              e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
            }
          })
          resolve(this.feeds);
        }, err =&amp;gt; console.log(err));          
    });
  }
}
&lt;/pre&gt;

&lt;p&gt;Replicamos boa parte do código presente no método &lt;strong&gt;fetchContent&lt;/strong&gt; da classe &lt;strong&gt;home.ts&lt;/strong&gt; aqui no nosso método &lt;strong&gt;fetchData&lt;/strong&gt;, com algumas diferenças. A primeira delas é a já citada anotação &lt;strong&gt;@Injectable()&lt;/strong&gt; presente antes do nome da classe, o que nos permite mover a definição do serviço para o construtor de &lt;strong&gt;home.ts&lt;/strong&gt; dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;constructor(public redditService: RedditService) {}
&lt;/pre&gt;

&lt;p&gt;Isso evita que tenhamos de instanciar o serviço utilizando &lt;strong&gt;new&lt;/strong&gt;. Clique &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; para saber mais sobre &lt;strong&gt;Injeção de Dependência&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Outra mudança importante é que, por conveniência, a assinatura do método retorna uma &lt;strong&gt;Promise&lt;/strong&gt; do tipo &lt;strong&gt;any&lt;/strong&gt; (para evitar que tenhamos qualquer erro em tempo de compilação) ao invés de um &lt;strong&gt;Observable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por fim, para utilizar este serviço em nossa classe &lt;strong&gt;home.ts&lt;/strong&gt; precisamos incluí-lo no arquivo &lt;strong&gt;app.module.ts&lt;/strong&gt;, dentro da pasta &lt;strong&gt;src/app&lt;/strong&gt;. Este arquivo faz uso da anotação &lt;strong&gt;@NgModule&lt;/strong&gt;, onde todas as dependências da aplicação devem ser declaradas previamente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { NgModule } from &#39;@angular/core&#39;;
import { IonicApp, IonicModule } from &#39;ionic-angular&#39;;
import { MyApp } from &#39;./app.component&#39;;
import { HomePage } from &#39;../pages/home/home&#39;;
//indicamos o source path do arquivo:
import { RedditService } from &#39;../providers/reddit-service&#39;;

@NgModule({
  declarations: [
    MyApp,
    HomePage
  ],
  imports: [
    IonicModule.forRoot(MyApp)
  ],
  bootstrap: [IonicApp],
  entryComponents: [
    MyApp,
    HomePage
  ],
//declaramos o nome do nosso provider:
  providers: [RedditService]
})
export class AppModule {}
&lt;/pre&gt;

&lt;p&gt;Com isso é possível escrever os métodos da nossa classe &lt;strong&gt;home.ts&lt;/strong&gt; da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.redditService.fetchData(this.url).then(data =&amp;gt; {
     this.feeds = data;
     this.noFilter = this.feeds;
     loading.dismiss();
 })
&lt;/pre&gt;

&lt;p&gt;Repare que além de muito mais simples, agora utilizamos o método &lt;strong&gt;then&lt;/strong&gt; ao invés do &lt;strong&gt;subscribe&lt;/strong&gt; para recuperar os dados do serviço e preencher nosso array.&lt;/p&gt;

&lt;h4 id=&#34;9-2-8211-adicionando-uma-searchbar&#34;&gt;9.2 &amp;#8211; Adicionando uma SearchBar&lt;/h4&gt;

&lt;p&gt;Para aplicativos que utilizam listas e exibem conteúdo sob demanda é uma boa prática adicionar algum recurso de busca para que o usuário procure informações com base em uma palavra específica ou sequência de caracteres. Para tal, o Ionic fornece um componente chamado &lt;strong&gt;SearchBar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para evitar conflitos com as ações da nossa lista, escolhi inserir o componente diretamente na AppBar/NavBar da aplicação. Para tal, insira o seguinte bloco de código dentro da tag &lt;strong&gt;&lt;ion-title&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;ion-searchbar 
    [(ngModel)]=&#34;searchTerm&#34;
    (ionInput)=&#34;filterItems()&#34; 
    placeholder=&#34;Type here...&#34; &amp;gt;
 &amp;lt;/ion-searchbar&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Perceba que a junção das sintaxes de &lt;em&gt;Event binding&lt;/em&gt; e &lt;em&gt;Input binding&lt;/em&gt; do &lt;strong&gt;ngModel&lt;/strong&gt; nos permite replicar o tão famoso recurso de &lt;em&gt;Two-way data binding&lt;/em&gt; no Angular 2.&lt;/p&gt;

&lt;p&gt;Agora inclua o seguinte método em &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;filterItems() {
    this.hasFilter = false;
    this.feeds = this.noFilter.filter((item) =&amp;gt; {
        return item.data.title.toLowerCase().indexOf(this.searchTerm.toLowerCase()) &amp;gt; -1;
    });
  }
&lt;/pre&gt;

&lt;p&gt;Veja o resultado rodando em um iPhone:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step9.gif&#34; alt=&#34;Ionic 2 - SearchBar&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Antes de concluir eu gostaria de mostrar um recurso fornecido pelo framework que nos permite testar o comportamento e visual da nossa aplicação em diferentes plataformas chamado &lt;strong&gt;Ionic Lab&lt;/strong&gt;. Caso ainda esteja com o servidor ativo, basta inserir &lt;strong&gt;/ionic-lab&lt;/strong&gt; após o número da porta na url ou digitar &lt;code&gt;ionic serve --lab&lt;/code&gt; no terminal. O resultado é o seguinte:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-ionic-lab.jpg&#34; alt=&#34;Ionic 2 - Ionic Lab&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Na imagem acima você consegue visualizar o nosso aplicativo no &lt;strong&gt;iOS&lt;/strong&gt;, &lt;strong&gt;Android&lt;/strong&gt; e &lt;strong&gt;Windows Phone&lt;/strong&gt;! O Ionic não apenas executa o build da aplicação com uma única base de código para dispositivos diferentes como também se adapta ao comportamento e estilo visual de cada um, numa tentativa de fazer com que o usuário sempre tenha uma experiência condizente com a plataforma que utiliza. Perceba, por exemplo, como o spinner, a barra de busca, os ícones e estilo da lista são diferentes entre as plataformas. No caso do iOS, são incluídos até mesmo as setas na lateral direita da célula, o que é comum na plataforma. Além de tudo isso, poder testar aplicativos dessa maneira e ainda tirar proveito do recurso de &lt;em&gt;LiveReload&lt;/em&gt; enquanto você está programando é algo realmente especial.&lt;/p&gt;

&lt;p&gt;Estamos chegando ao fim da criação do nosso aplicativo. Vimos que, apenas com pequenos ajustes, foi possível obter um código mais modular e ainda incluir o componente &lt;strong&gt;SearchBar&lt;/strong&gt; com o estilo visual adequado para cada plataforma. Tudo isso de maneira simples e rápida, graças ao casamento perfeito entre o &lt;strong&gt;Angular&lt;/strong&gt; e os componentes estilizados fornecido pelo &lt;strong&gt;Ionic&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;passo-10-8211-melhorando-a-experiência-do-usuário&#34;&gt;Passo 10 &amp;#8211; Melhorando a experiência do usuário&lt;/h3&gt;

&lt;p&gt;Mesmo com todos os recursos que o Ionic 2 nos oferece é sempre importante garantir a melhor experiência possível para o usuário fazendo otimizações gerais, como customização de UI, ajustes no comportamento de componentes, ganho de performance, etc. Essa última etapa será dedicada à este propósito.&lt;/p&gt;

&lt;h4 id=&#34;10-1-8211-controlando-o-scroll&#34;&gt;10.1 &amp;#8211; Controlando o scroll&lt;/h4&gt;

&lt;p&gt;Notei alguns problemas ao utilizar a Action Sheet para filtrar a lista quando o scroll está numa posição muito abaixo, pois a ação de carregar posts antigos pode ser disparada indevidamente. Podemos evitar isso fazendo a lista rolar para o topo antes de executar qualquer filtro. Mas como controlar isso programaticamente?&lt;/p&gt;

&lt;p&gt;O componente &lt;strong&gt;Content&lt;/strong&gt; (que gere a tag &lt;strong&gt;&lt;ion-content&gt;&lt;/strong&gt; do nosso template html) disponibiliza um método de controle do scroll chamado &lt;strong&gt;scrollToTop&lt;/strong&gt;. Podemos inserir o código no início do método &lt;strong&gt;showFilters&lt;/strong&gt; da Action Sheet dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.content.scrollToTop();
&lt;/pre&gt;

&lt;p&gt;Antes precisamos obter uma referência à este componente utilizando a anotação &lt;strong&gt;@ViewChild&lt;/strong&gt; da biblioteca &lt;strong&gt;@angular/core&lt;/strong&gt; (algo similar à maneira como protocolos funcionam no iOS):&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;@ViewChild(Content) content: Content;
&lt;/pre&gt;

&lt;p&gt;Agora a lista vai rolar para o topo sempre que acionarmos a Action Sheet!&lt;/p&gt;

&lt;h4 id=&#34;10-2-8211-melhorando-a-busca-com-observables&#34;&gt;10.2 &amp;#8211; Melhorando a busca com Observables&lt;/h4&gt;

&lt;p&gt;Apesar de termos nossa barra de buscas funcionando perfeitamente, a cada caractere digitado estamos emitindo uma nova requisição, o que é desnecessário. Mas há uma forma elegante de lidar com isso utilizando Observables, uma vez que o evento só será disparado quando uma requisição for considerada válida.&lt;/p&gt;

&lt;p&gt;O que queremos fazer é monitorar o componente de duas maneiras: A primeira é oferecendo um tempo maior para que o usuário conclua a digitação da palavra que está buscando através do método &lt;strong&gt;debounceTime&lt;/strong&gt; e a segunda é utilizando o método &lt;strong&gt;distinctUntilChanged&lt;/strong&gt; que irá comparar a palavra (ou a sequência de caracteres) digitada com a última que foi procurada, evitando que uma nova requisição seja emitida para um resultado que já se encontra na tela.&lt;/p&gt;

&lt;p&gt;Iremos utilizar o &lt;strong&gt;FormControl&lt;/strong&gt; de &lt;strong&gt;@angular/forms&lt;/strong&gt; que irá conectar uma variável da classe ao input presente no nosso html (similar à maneira como o &lt;em&gt;Two way binding&lt;/em&gt; funciona).&lt;/p&gt;

&lt;p&gt;Inclua as seguintes instruções no componente &lt;strong&gt;&lt;ion-searchbar&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;ion-searchbar 
    [(ngModel)]=&#34;searchTerm&#34;
    [formControl]=&#34;searchTermControl&#34; 
    [showCancelButton]=true
    (ionInput)=&#34;filterItems()&#34; 
    placeholder=&#34;Type here...&#34; &amp;gt;
 &amp;lt;/ion-searchbar&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Note que além do &lt;strong&gt;formControl&lt;/strong&gt; também atribuímos o valor &lt;strong&gt;true&lt;/strong&gt; à propriedade &lt;strong&gt;showCancelButton&lt;/strong&gt;, que irá apresentar um botão para cancelar a busca e retirar o teclado digital da tela.&lt;/p&gt;

&lt;p&gt;E a seguinte instrução que irá controlar quando devemos disparar a busca:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.searchTermControl = new FormControl();
  this.searchTermControl.valueChanges.debounceTime(1000).distinctUntilChanged().subscribe(search =&amp;gt; {
    if (search !== &#39;&#39; &amp;&amp; search) {
      this.filterItems();
    }
  })  
&lt;/pre&gt;

&lt;p&gt;E com isso o componente se torna mais coerente com a expectativa do usuário, que irá perceber um ganho de performance ao filtrar resultados em uma lista com muitas células.&lt;/p&gt;

&lt;h4 id=&#34;10-3-8211-ajustando-o-visual-dos-componentes-com-css&#34;&gt;10.3 &amp;#8211; Ajustando o visual dos componentes com CSS&lt;/h4&gt;

&lt;p&gt;Nosso aplicativo agora depende de algumas mudanças visuais para corrigir alguns pequenos detalhes. O primeiro deles é referente ao Android. O Ionic 2, ao rodar em um dispositivo Android, oferece automaticamente suporte ao &lt;strong&gt;&lt;a href=&#34;https://material.google.com/&#34; target=&#34;_blank&#34;&gt;Material Design&lt;/a&gt;&lt;/strong&gt; do &lt;strong&gt;Google&lt;/strong&gt; (uma linguagem visual que sintetiza princípios clássicos daquilo que considera o &amp;#8220;bom design&amp;#8221;). Em resumo, o Material Design se preocupa em criar uma experiência unificada de layout entre as plataformas que rodam o sistema operacional do Android. &lt;a href=&#34;https://material.google.com/#introduction-principles&#34; target=&#34;_blank&#34;&gt;Aqui&lt;/a&gt; você pode conhecer melhor sobre seus princípios fundamentais.&lt;/p&gt;

&lt;p&gt;Um dos pontos de atenção é a maneira como os textos devem ser apresentados ao usuário. O Material Design trabalha com a noção de hierarquia baseada em tons e opacidade. Em outras palavras, textos primários (que representam títulos e informações de destaque) recebem 87% de opacidade enquanto subtítulos recebem 54%. Veja abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-material-design-spec.jpg&#34; alt=&#34;Ionic 2 - Material Design Spec&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Se você for inspecionar as cores presentes nos textos das células (utilize o &lt;em&gt;Devtools&lt;/em&gt; para tal) vai notar que elas não seguem este ponto da especificação da linguagem. O texto principal, por exemplo, utiliza preto puro e é sempre bom (fica aqui a dica) &lt;a href=&#34;https://ianstormtaylor.com/design-tip-never-use-black&#34; target=&#34;_blank&#34;&gt;evitar&lt;/a&gt; preto puro em seus designs sempre que possível.&lt;/p&gt;

&lt;p&gt;Diferentemente do Android, a preocupação do iOS está voltada para o conteúdo, por isso não existe nenhuma linguagem tão restritiva quanto o Material Design na plataforma. No entanto, irei replicar a mudança visual que faremos para o Android também no iOS, tornando nossos textos ainda mais agradáveis para leitura.&lt;/p&gt;

&lt;p&gt;Em &lt;strong&gt;home.scss&lt;/strong&gt; inclua o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// iOS &amp; Android only
  .item-md, .item-ios {
      h2 {
          color: rgba($color: #000, $alpha: .87);
      }
      p {
          color: rgba($color: #000, $alpha: .54);
      }
  }
&lt;/pre&gt;

&lt;p&gt;Repare que podemos fazer o nesting dos elementos por estar utilizando &lt;strong&gt;Sass&lt;/strong&gt;. Também perceba que aplicamos a alteração apenas para as plataformas Android e iOS mas não para Windows Phone. As classes você pode obter facilmente ao inspecionar o DOM no console do browser.&lt;/p&gt;

&lt;p&gt;Outro problema aparente são os títulos dos posts que somem ao atingir a borda da célula. Precisamos incluir uma quebra de linha para que eles sejam apresentados por completo. Dessa vez iremos aplicar a alteração às três plataformas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// iOS, Android &amp; WP
  .item-md, .item-ios, .item-wp {
      h2, p {
          white-space: normal;
      }
  }
&lt;/pre&gt;

&lt;p&gt;Por fim, gostaria de melhorar a maneira como a barra de busca se apresenta na versão iOS. Ela está pequena e diminui ainda mais de tamanho quando o botão de cancelar está ativo. Também seria interessante escurecer um pouco mais a opacidade do background para lhe conferir maior destaque:&lt;/p&gt;

&lt;p&gt;Inclua o seguinte código (desta vez aplicado apenas para o iOS):&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// iOS only
  .toolbar-ios { 
      ion-title {
          padding: 0 90px 0 1px;  
      } 
      .searchbar-ios .searchbar-input {
          background: rgba($color: #000, $alpha: 0.12);            
      }
  }
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Caso prefira, você também pode alterar o valor das variáveis Sass do Ionic. &lt;a href=&#34;https://ionicframework.com/docs/v2/theming/overriding-ionic-variables/&#34; target=&#34;_blank&#34;&gt;Neste link&lt;/a&gt; há uma lista de todas elas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;10-4-8211-ajustes-finais-no-html&#34;&gt;10.4 &amp;#8211; Ajustes finais no html&lt;/h4&gt;

&lt;p&gt;Vamos iniciar modificando a cor da NavBar. Inclua o seguinte atributo na tag &lt;strong&gt;&lt;ion-navbar&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-navbar color=&#34;secondary&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Como estamos utilizando &lt;strong&gt;Sass&lt;/strong&gt;, fazemos uma referência à variável &lt;strong&gt;secondary&lt;/strong&gt; do array &lt;strong&gt;colors&lt;/strong&gt; que está listado no arquivo &lt;strong&gt;src/theme/variable.scss&lt;/strong&gt;. Isso significa que você pode alterar o valor da cor na variável ao invés de escrever diretamente no template html.&lt;/p&gt;

&lt;p&gt;Agora eu gostaria de inserir um ícone na frente do meu endereço de domínio (que representa meu subtítulo na lista) sempre que a categoria estiver relacionada com alguma das listadas na nossa Action Sheet. Eu posso controlar esse comportamento utilizando a diretiva de html do Angular chamada &lt;strong&gt;ngSwitch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Substitua esta linha:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;p&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Por esta instrução:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;div [ngSwitch]=feed.data.subreddit.toLowerCase()&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;askreddit&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;help-circle&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;gaming&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;logo-playstation&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;music&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;musical-notes&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;movies&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;film&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;pics&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;image&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchDefault&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Observe que os ícones apenas serão aplicados no caso de coincidirem com os argumentos. Em caso contrário, será exibido apenas o texto sem nenhum ícone, conforme descrito na cláusula &lt;strong&gt;ngSwitchDefault&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Outra coisa que me incomoda é o componente &lt;strong&gt;Refresher&lt;/strong&gt; ser acionado com muito pouco esforço. Eu sinto que o usuário poderia puxar um pouco mais a lista para evitar que o evento seja disparado com muita facilidade. Podemos modificar isso alterando a propriedade &lt;strong&gt;pullMin&lt;/strong&gt;, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-refresher (ionRefresh)=&#34;doRefresh($event)&#34; [pullMin]=90&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Alteramos para 90 dpi a distância mínima que o usuário deve alcançar para disparar o evento. A distância padrão é 60.&lt;/p&gt;

&lt;p&gt;Seria também interessante alterar a cor da barra de status da aplicação para a cor branca, já que o fundo da NavBar agora está colorido. Como a barra de status é um componente nativo, para modificá-lo precisaremos instalar um plugin do &lt;strong&gt;Cordova&lt;/strong&gt;. Verifique se ele já está instalado procurando no arquivo &lt;strong&gt;package.json&lt;/strong&gt; por &amp;#8220;&lt;strong&gt;cordova-plugin-statusbar&lt;/strong&gt;&amp;#8220;. Caso contrário, digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic plugin add cordova-plugin-statusbar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;E insira a seguinte instrução dentro do método construtor do arquivo &lt;strong&gt;src/app/app.component.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;StatusBar.backgroundColorByHexString(&#39;#ffffff&#39;);
&lt;/pre&gt;

&lt;p&gt;E agora veja como ficou o visual final da nossa aplicação rodando em um iPhone 6:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step10.gif&#34; alt=&#34;Ionic 2 - UX enhancement&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;10-5-8211-aumentando-o-desempenho&#34;&gt;10.5 &amp;#8211; Aumentando o desempenho&lt;/h4&gt;

&lt;p&gt;Se você pensa em evoluir de um protótipo para um aplicativo real, se preocupar com o seu desempenho é tarefa essencial. Abaixo eu listo algumas sugestões que podem ajudar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WKWebView&lt;/strong&gt; &amp;#8211; Recentemente o time do Ionic tornou possível rodar os aplicativos iOS utilizando o browser WKWebView (evolução do antigo browser UIWebView). Este novo engine oferece aos aplicativos iOS um ganho de performance muito superior ao antigo browser, principalmente na experiência com listas. Para instalar o plugin, digite: &lt;code&gt;ionic plugin add https://github.com/driftyco/cordova-plugin-wkwebview-engine.git --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Crosswalk&lt;/strong&gt; &amp;#8211; Como o Android tem algumas limitações de desempenho que podem ser encontradas em alguns devices (principalmente nos antigos devido às várias versões de sistema existentes), fica difícil garantir que o aplicativo irá rodar exatamente da maneira como queremos. O Crosswalk é um browser moderno que é empacotado junto com o seu app no momento que você faz o build para Android. Isso significa que, independente do device do usuário, ele estará executando o app no Crosswalk. O ganho de performance é visível mas ele pode aumentar o tamanho final da sua aplicação. Para instalar, digite: &lt;code&gt;ionic plugin add cordova-plugin-crosswalk-webview&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual Scroll&lt;/strong&gt; &amp;#8211; O nosso aplicativo pode adicionar novos itens à lista de várias maneiras. Isso significa que, quanto mais a lista aumenta de tamanho, mais itens precisarão ser renderizados, o que irá consumir muita memória e impactar o desempenho geral. O Virtual Scroll foi criado com o intuito de minimizar este impacto, uma vez que ele apenas renderiza uma quantidade &amp;#8220;x&amp;#8221; de células na tela, suficientes para preenche-la. Dessa forma elas podem ser reutilizadas, o que evita uma sobrecarga de memória (comportamento muito similar ao de uma &lt;strong&gt;ListView&lt;/strong&gt; no iOS). Para entender melhor sobre como utilizar o Virtual Scroll, visite &lt;a href=&#34;https://ionicframework.com/docs/v2/api/components/virtual-scroll/VirtualScroll/&#34; target=&#34;_blank&#34;&gt;este link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;considerações-finais&#34;&gt;Considerações finais&lt;/h2&gt;

&lt;p&gt;Sim, é um post gigantesco. Mas a minha meta ao escrevê-lo era gerar o máximo de valor para profissionais que ainda não tiveram contato com o Ionic 2 ou aqueles que desejam entender melhor como ele funciona, uma vez que somos carentes de tutoriais mais densos escritos sobre o assunto em português.&lt;/p&gt;

&lt;p&gt;Seja você um desenvolvedor, gerente de produto ou CIO de uma empresa, é muito importante compreender que ainda é difícil nos dias de hoje suportar a grande diversidade de aparelhos e plataformas existentes em um ecossistema que vive em constante mudança. Os custos para manter uma equipe multidisciplinar sempre atualizada (e com boa sinergia) é altíssimo e isso se reflete no orçamento repassado para o cliente. Optar pelo desenvolvimento de aplicativos híbridos é, antes de mais nada, uma opção estratégica que deve ser avaliada de acordo com o contexto de cada projeto. Muitas das vezes os argumentos à favor do desenvolvimento nativo não se justificam, principalmente se o projeto não demanda um &lt;em&gt;frame rate&lt;/em&gt; muito alto (como aplicativos com muitas animações, transições customizadas ou jogos).&lt;/p&gt;

&lt;p&gt;Outro ponto que precisa ser esclarecido é que o Ionic tem um papel importantíssimo no que se refere à uma fase que é tão ou mais importante que o desenvolvimento em si: A &lt;strong&gt;prototipação&lt;/strong&gt;. Poder validar o produto com o cliente ainda em fase inicial é um grande diferencial. Algo que lhe confere uma posição de destaque em um mercado extremamente competitivo.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Há muito espaço para melhorias e recursos adicionais que podem ser implementados no aplicativo que criamos. Caso tope desafios, você pode tentar os seguintes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Incluir data de publicação do post na lista;&lt;/li&gt;
&lt;li&gt;Incluir recurso de navegação entre telas (deixei o NavController lá de propósito);&lt;/li&gt;
&lt;li&gt;Oferecer opção de alterar url para exibir resultados de um determinado subreddit;&lt;/li&gt;
&lt;li&gt;Considerar cenários onde o usuário pode perder a conexão com a internet;&lt;/li&gt;
&lt;li&gt;Opção de utilizar algum recurso nativo do smartphone (ex: Câmera).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para facilitar o seu aprendizado, o projeto está disponível no &lt;strong&gt;&lt;a href=&#34;https://github.com/carloscabral/my-reader---Ionic2&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/strong&gt; separado por branches. Por exemplo, caso você queira ter acesso ao passo 4 do tutorial, baixa digitar no terminal &lt;code&gt;git checkout step4&lt;/code&gt; e o código fonte referente à este passo estará disponível.&lt;/p&gt;

&lt;p&gt;Bons estudos e até a próxima!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Se você ficou curioso sobre a criação de aplicativos multiplataforma que utilizam tecnologia da web, saiba que o Ionic não é a única opção existente. Leia meu post sobre &lt;strong&gt;&lt;a href=&#34;http://tableless.com.br/react-native-construa-aplicacoes-moveis-nativas-com-javascript/&#34; target=&#34;_blank&#34;&gt;React Native&lt;/a&gt;&lt;/strong&gt; e descubra como já é possível criar uma aplicação 100% nativa utilizando JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Yarn: A evolução do NPM</title>
      <link>http://tableless.com.br/yarn-evolucao-do-npm/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/yarn-evolucao-do-npm/</guid>
      <description>

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-56337&#34; style=&#34;text-align: center&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/yarn-kitten-full.png&#34; alt=&#34;yarn-kitten-full&#34; width=&#34;300&#34; height=&#34;135&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nos primórdios do desenvolvimento web e afins, trabalhar com bibliotecas era uma tarefa árdua. Lembro que tínhamos que pesquisar pela biblioteca, escolher uma versão, baixar o zip e implementar em nosso projeto. Não parece nada de outro mundo ao se tratar de pequenos projetos, mas quando estamos falando de projetos um pouco maiores, isso se torna um transtorno.  A coisa se torna ainda mais complicada quando há a dependência entre bibliotecas.&lt;/p&gt;

&lt;p&gt;Nesse contexto, entram os gerenciadores de pacotes, que chegaram para revolucionar a maneira como lidamos com as dependências de nosso projetos. Um dos principais gerenciadores de pacotes é o &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt;, que inicialmente visava abastecer apenas os desenvolvedores de NodeJS, mas acabou se tornando um hub comum de dependências Javascript em geral. O NPM hoje conta com mais de 300mil bibliotecas em seu repositório central, as quais alcançam cerca  5 bilhões de downloads por mês, e é a ferramenta de gerenciamento de pacotes mais popular do mundo.&lt;/p&gt;

&lt;p&gt;Apesar de ser uma excelente ferramenta, o NPM nunca conseguiu agradar a todos, e são comuns as reclamações de lentidão, a falta de um instalador offline, instalações em fila, etc.&lt;/p&gt;

&lt;h2 id=&#34;yarn-package-manager&#34;&gt;Yarn Package Manager&lt;/h2&gt;

&lt;p&gt;No dia 11 de outubro de 2016, o Facebook &lt;a href=&#34;https://code.facebook.com/posts/1840075619545360&#34;&gt;anunciou&lt;/a&gt; o seu novo gerenciador de pacotes para Javascript: o Yarn, que vem com a proposta de ser mais rápido, seguro e confiável que o NPM. O Yarn é open source, e nasceu com a colaboração, também, das empresas Exponent, Google, e Tilde.&lt;/p&gt;

&lt;p&gt;O Yarn funciona exatamente como o NPM e o Bower, abrangendo, inclusive, as bibliotecas que estão presentes nestes gerenciadores. Uma das coisas mais interessantes, além da rapidez, é a possibilidade de instalação de pacotes offline. Quando você instala um pacote, ele cria um cache em sua máquina que possibilita a futura instalação deste sem precisar estar conectado à internet.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-yarn&#34;&gt;Instalando o Yarn&lt;/h2&gt;

&lt;p&gt;Para a instalação, você pode baixar no &lt;a href=&#34;https://yarnpkg.com/en/docs/install&#34;&gt;site oficial&lt;/a&gt;, mas também pode utilizar outro gerenciador, como o NPM (confesso que parece irônico, como quando utilizávamos o Internet Explorer para baixar o Chrome).&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;npm install -g yarn
&lt;/pre&gt;

&lt;h2 id=&#34;utilizando-o-yarn&#34;&gt;Utilizando o Yarn&lt;/h2&gt;

&lt;h3 id=&#34;inicialização&#34;&gt;Inicialização&lt;/h3&gt;

&lt;p&gt;A utilização do Yarn é bastante semelhante com a do NPM. Para inicializar basta digitar, na linha de comando:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn init
&lt;/pre&gt;

&lt;p&gt;Este comando irá gerar um arquivo &lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;{
&#34;name&#34;: &#34;Yarn&#34;,
&#34;version&#34;: &#34;1.0.0&#34;,
&#34;main&#34;: &#34;index.js&#34;,
&#34;license&#34;: &#34;MIT&#34;
}
&lt;/pre&gt;

&lt;p&gt;O gerenciamento dos pacotes pode ser feito diretamente no &lt;em&gt;package.json&lt;/em&gt;, ou pela linha de comando.&lt;/p&gt;

&lt;h3 id=&#34;adicionando-uma-dependência&#34;&gt;Adicionando uma dependência&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add [package]
yarn add [package]@[version]
yarn add [package]@[tag]
&lt;/pre&gt;

&lt;h3 id=&#34;fazendo-update&#34;&gt;Fazendo update&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn upgrade [package]

yarn upgrade [package]@[version]
yarn upgrade [package]@[tag]
&lt;/pre&gt;

&lt;h3 id=&#34;desfazendo-as-coisas&#34;&gt;Desfazendo as coisas&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn remove [package]
&lt;/pre&gt;

&lt;h3 id=&#34;instalando-as-dependências&#34;&gt;Instalando as dependências&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn install
&lt;/pre&gt;

&lt;h2 id=&#34;outras-funcionalidades&#34;&gt;Outras funcionalidades&lt;/h2&gt;

&lt;h3 id=&#34;lock-file&#34;&gt;Lock file&lt;/h3&gt;

&lt;p&gt;Além do package.json, o Yarn cria, na pasta raíz do projeto, um arquivo yarn.lock, que trata de listar as bibliotecas &amp;#8220;originais&amp;#8221; do projeto, um sistema bem semelhante ao do composer.&lt;/p&gt;

&lt;h3 id=&#34;fazendo-uma-limpeza&#34;&gt;Fazendo uma limpeza&lt;/h3&gt;

&lt;p&gt;Outro recurso interessante é o mecanismo de limpeza de dependências, ao executar o comando:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn clean
&lt;/pre&gt;

&lt;p&gt;O Yarn vasculha as dependências e verifica tudo aquilo que não está sendo utilizado e exporta para um arquivo &lt;strong&gt;.yarnclean&lt;/strong&gt;. Caso você tenha este arquivo em sua pasta raíz, quando executar o &lt;strong&gt;yarn install&lt;/strong&gt;, ele vai instalar as dependências de forma mais limpa.&lt;/p&gt;

&lt;h3 id=&#34;self-update&#34;&gt;Self-update&lt;/h3&gt;

&lt;p&gt;Para atualizar o Yarn, basta digitar no console:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn self-update
&lt;/pre&gt;

&lt;p&gt;ou, caso queira especificar a versão:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn self-update 0.1.2
&lt;/pre&gt;

&lt;h2 id=&#34;futuro&#34;&gt;Futuro&lt;/h2&gt;

&lt;p&gt;Em todos os testes realizados, o Yarn se mostrou um gerenciador de pacotes bastante robusto e completo. De fato, o Yarn é extremamente rápido. Estou utilizando-o há cerca de uma semana, e, sinceramente, não penso em voltar a utilizar o NPM.&lt;/p&gt;

&lt;p&gt;A sua equipe de desenvolvimento está incentivando todos a migrarem e contribuirem na sua página do &lt;a href=&#34;https://github.com/yarnpkg/yarn&#34;&gt;github&lt;/a&gt;, afinal todos só temos a ganhar com esta nova e excelente ferramenta.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como boas práticas de escrita de código podem influenciar em uma melhor rotina de trabalho</title>
      <link>http://tableless.com.br/como-boas-praticas-de-escrita-de-codigo-podem-influenciar-em-uma-melhor-rotina-de-trabalho/</link>
      <pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-boas-praticas-de-escrita-de-codigo-podem-influenciar-em-uma-melhor-rotina-de-trabalho/</guid>
      <description>

&lt;p&gt;Observei que alguns itens estão me ajudando na rotina de trabalho, como obter um melhor tempo de produção e um melhor controle sobre o que estou fazendo.&lt;/p&gt;

&lt;p&gt;São alguns hábitos simples que podem lhe ajudar muito. É apenas questão de implementar no seu dia a dia e demonstrar para a sua equipe (caso trabalhe em equipe) o quanto é mais organizado e produtivo trabalhar desta forma.&lt;/p&gt;

&lt;p&gt;A seguir listei algumas técnicas que podem ajudar bastante no seu dia a dia como desenvolvedor front-end.&lt;/p&gt;

&lt;h4 id=&#34;style-guide&#34;&gt;Style Guide&lt;/h4&gt;

&lt;p&gt;É um documento que contém estilos e padrões de um projeto, que podem ser utilizados para manter a pregnância do design e desenvolvimento.&lt;/p&gt;

&lt;p&gt;Existem algumas metodologias que podem ajudar você no desenvolvimento desse &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Style Guide, &lt;/strong&gt;como: &lt;a href=&#34;http://getbem.com/introduction/&#34; target=&#34;_blank&#34;&gt;BEM&lt;/a&gt;, &lt;a href=&#34;https://github.com/necolas/idiomatic-css/tree/master/translations/pt-BR&#34; target=&#34;_blank&#34;&gt;IDIOMATIC&lt;/a&gt;, &lt;a href=&#34;http://primercss.io/scaffolding/&#34; target=&#34;_blank&#34;&gt;PRIMER CSS&lt;/a&gt;, &lt;a href=&#34;http://getbootstrap.com/css/&#34; target=&#34;_blank&#34;&gt;Twitter Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;skeleton-ou-estruturas-boilerplate&#34;&gt;Skeleton ou Estruturas Boilerplate&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.initializr.com/&#34; target=&#34;_blank&#34;&gt;Initializr&lt;/a&gt;, &lt;a href=&#34;https://github.com/helderburato/generator-hyapp&#34; target=&#34;_blank&#34;&gt;Gerador HyApp&lt;/a&gt; + &lt;a href=&#34;http://yeoman.io/&#34; target=&#34;_blank&#34;&gt;Yeoman&lt;/a&gt; e &lt;a href=&#34;https://html5boilerplate.com/&#34; target=&#34;_blank&#34;&gt;HTML5 Boilerplate&lt;/a&gt;. Que são geradores de pequenas estruturas de diretórios para iniciar projetos em HTML/CSS/JS;&lt;/p&gt;

&lt;h4 id=&#34;font-ícones&#34;&gt;Font Ícones&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://fontawesome.io/&#34; target=&#34;_blank&#34;&gt;Font Awesome&lt;/a&gt;, &lt;a href=&#34;http://fontello.com/&#34; target=&#34;_blank&#34;&gt;Fontello&lt;/a&gt;, &lt;a href=&#34;https://icomoon.io/app/#/select&#34; target=&#34;_blank&#34;&gt;IcoMoon&lt;/a&gt; são ótimas opções. No meu dia a dia costumo utilizar na maioria dos projetos o &amp;#8220;Font Awesome&amp;#8221; pela facilidade e padronização nos layouts da empresa em que trabalho;&lt;/p&gt;

&lt;h4 id=&#34;web-fonts&#34;&gt;Web Fonts&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/&#34; target=&#34;_blank&#34;&gt;Google Fonts&lt;/a&gt; sem dúvidas é uma ótima opção e agiliza bastante quando utilizada nos layouts;&lt;/p&gt;

&lt;h4 id=&#34;task-runner&#34;&gt;Task Runner&lt;/h4&gt;

&lt;p&gt;Tratando-se de automatizadores de tarefas os mais conhecidos são o &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;GulpJS&lt;/a&gt; e o &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;GruntJS&lt;/a&gt;. Costumo utilizar o Gulp pois foi o que mais me identifiquei, mas você pode escolher o que mais adequar ao seu projeto ou ao modo de trabalho de sua equipe.&lt;/p&gt;

&lt;h3 id=&#34;será-que-isso-influencia-mesmo-na-rotina-ou-nos-custos-do-produto-final&#34;&gt;Será que isso influencia mesmo na rotina ou nos custos do produto final?&lt;/h3&gt;

&lt;p&gt;Segundo uma experiência direta da &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;IBM &lt;/strong&gt;e também de dados reunidos por pesquisadores que trabalham com centenas de empresas, percebe-se que a maioria das empresas acabam investindo &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;25% &lt;/strong&gt;a mais do orçamento no ciclo de vida do desenvolvimento para garantir a qualidade do software.&lt;/p&gt;

&lt;p&gt;Além disso, &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;30%&lt;/strong&gt; dos custos de projeto para desenvolvimento de software estão associados a retrabalho e &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;70%&lt;/strong&gt; desse valor estão relacionados a erros de requisitos.&lt;/p&gt;

&lt;p&gt;A qualidade de escrita de código influencia diretamente nos custos do projeto e da qualidade de vida do software.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56001&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/09/Group.png&#34; alt=&#34;Group&#34; width=&#34;1138&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mente-aberta-para-novas-ideias&#34;&gt;Mente aberta para novas ideias&lt;/h3&gt;

&lt;p&gt;Sou totalmente aberto a novas ideias e sugestões naquilo que eu posso melhorar no meu dia a dia de trabalho, mas parece que nem todo desenvolvedor enxerga as observações no seu próprio código como algo bom, algo produtivo. E sim como uma crítica pessoal.&lt;/p&gt;

&lt;p&gt;Lógico, todos nós temos dias difíceis, prazos curtos. E todo desenvolvedor que tem um pouco mais de experiência compreende muito bem como é correr contra o tempo para lançar um novo produto ou &lt;em class=&#34;markup--em markup--p-em&#34;&gt;feature&lt;/em&gt;. Mas creio que isso não seja motivo para excluir a possibilidade de mudança, de tentar o novo. &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;O que seria do mundo se ninguém tivesse tentado algo diferente?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Me deparo fazendo esse tipo de pergunta quase que diariamente, costumo estar sempre dando uma olhada em novas tecnologias, mesmo que seja por brincadeira. Mas me sinto frustrado quando não é possível aplicar nas equipes ou em projetos. Entendo que nem sempre é possível sair utilizando tudo que é novo, ainda mais quando nos deparamos com coisas novas todos os dias no nosso ramo, mas não podemos ficar presos ao velho para sempre.&lt;/p&gt;

&lt;p&gt;Tire 1 ou 2 dias agora para escrever bem seu código e no futuro você verá como o trabalho ficará mais fácil ao entrar novos membros na equipe e for necessário explicar como as coisas funcionam.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Padrões são bons!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Essa frase parece que assusta muitas pessoas, mas diferente de medo, ela deveria emitir a sensação de algo bom, pois é o que ela traz com o tempo.&lt;/p&gt;

&lt;p&gt;Agradeço a todos que tiraram um tempo e leram o texto, e qualquer sugestão de melhoria estou a disposição, obrigado!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Invertendo o Redux</title>
      <link>http://tableless.com.br/invertendo-o-redux/</link>
      <pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/invertendo-o-redux/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Já faz um tempo desde que implementei pela primeira vez o &lt;a href=&#34;http://redux.js.org/&#34;&gt;Redux&lt;/a&gt;. Numa época que só se falava nos frameworks, ele apareceu do nada, pelo menos para mim. Eu já conhecia o Flux, mas ainda não era o que estava procurando. O &lt;strong&gt;Redux&lt;/strong&gt; realmente é uma das melhores idéias que vi, para mim faz todo o sentido e ainda é simples de entender e de se implementar.&lt;/p&gt;

&lt;p&gt;Depois de usá-lo algumas vezes você precisa se policiar para não se ver usando esta arquitetura em todos os projetos e virar um pregador da arquitetura. A idéia deste post é apresentar alguns aspectos que aprendi usando este padrão, ter um olhar mais crítico apesar do entusiasmo, e apresentar uma proposta um pouco diferente que pode lhe ser útil em alguma situação.&lt;/p&gt;

&lt;h2 id=&#34;uma-visão-crítica&#34;&gt;Uma visão crítica&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Como havia dito, apesar de todo o amor que se pode ter por uma solução, é preciso um pouco de maturidade e entender que tudo o que você gosta possui contras, pontos negativos. Ter consciência disso pode te ajudar a tomar uma decisão melhor quando possui diferentes soluções parecidas para um determinado problema. Te ajudará também a saber quando dar mais atenção aos contras quando estes podem ser mais prejudiciais do que os benefícios dos seus prós. Isso te fará ser mais lúcido, mais racional, tomará menos decisões com natureza emocional. Com isto dito, vamos à alguns pontos sobre o &lt;strong&gt;Redux&lt;/strong&gt; sob minha perspectiva.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Redux&lt;/strong&gt; não é para todas as aplicações, é claro. Me vi em alguns projetos que não eram dos mais complexos, mas também não eram tão simples, nestes casos, a implementação do &lt;strong&gt;Redux&lt;/strong&gt; parece ser demais, um over-engineering, em português claro, um canhão para matar um mosquito.&lt;/li&gt;
&lt;li&gt;Todos os reducers tem um grupo de switch cases que testam o tipo de ação disparada. Estes reducers podem ficar incrivelmente grandes além de ser difícil saber de forma rápida e prática, quais reducers respondem uma determinada ação. Para saber isso você deve abrir cada arquivo do &lt;em&gt;reducer&lt;/em&gt; para descobrir.&lt;/li&gt;
&lt;li&gt;A composição dos reducers pode ser um pouco complicada às vezes de se entender. Principalmente para que está iniciando.&lt;/li&gt;
&lt;li&gt;Em algumas situações você vai preferir que o relacionamento entre as ações e os reducers fosse mais direta, mais simples.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;metodologia&#34;&gt;Metodologia&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Resumidamente, o Redux funciona alterando as propriedades de um único objeto que armazena todo o estado de sua aplicação, utiliza funções puras ( _reducers ) _para aplicar mudanças nestes estados de acordo com uma determinada ação.&lt;/p&gt;

&lt;p&gt;Os tipos das ações são imutáveis, ou seja, são constantes é por isso são usadas strings em &lt;em&gt;uppercase. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pensando em uma alternativa,  removi os tipos das ações de dentro dos reducers, e coloquei no contexto da minha Store. No Redux você pode executar vários reducers para uma mesma ação, mas não pode disparar várias ações usando um reducer.&lt;/p&gt;

&lt;p&gt;Então,  a conclusão que tirei é que posso escrever os tipos das ações como métodos de um objeto. A vantagem disso é que especifico todos os reducers que quero executar para cada um destes métodos, resolvendo o &lt;strong&gt;item 2.&lt;/strong&gt; É fácil enxergar qual &lt;em&gt;reducer&lt;/em&gt; é executado numa ação disparada e como efeito colateral eu resolvo o &lt;strong&gt;item 3&lt;/strong&gt; também, pois a composição entre reducers é direta.&lt;/p&gt;

&lt;p&gt;A lógica no final é: Ao invés de executar _n_ reducers que vão testar todos os tipos das ações, eu faço isso de maneira &lt;strong&gt;inversa&lt;/strong&gt;, eu testo apenas a ação, se esta ação existir no meu objeto, então executo os &lt;em&gt;n&lt;/em&gt; reducers. Por isso chamei esse formato de &lt;em&gt;&lt;strong&gt;Inverted Redux&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;iredux-store&#34;&gt;IRedux Store&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Com esta lógica em mente, foi só necessário escrever o código que comprove a eficácia ou não da hipótese do Inverted Redux. Para meu espanto foi ridiculamente simples. Para simplificar ainda mais por questões de didática, vou partir do princípio que esta nova Store receberá um objeto que implementa o padrão &lt;a href=&#34;https://davidwalsh.name/pubsub-javascript&#34;&gt;publish/subscribe&lt;/a&gt; ( &lt;em&gt;que é um padrão bem simples de se implementar&lt;/em&gt; ).&lt;/p&gt;

&lt;p&gt;Esta é a implementação final desta Store:&lt;/p&gt;

&lt;pre&gt;export default ( pubsub, state ) =&amp;gt; {
        let Store = {
            getState(){
                return state
        },
            subscribe( callback ){
                pubsub.subscribe(&#39;store:update&#39;, callback)
            },
            dispatch( action ){
                pubsub.publish(&#39;store&#39;, action)
            }
        }
        pubsub.subscribe(&#39;store&#39;, ( payload ) =&amp;gt;{
            if( payload.type in Store ){
                var newstate = Store[ payload.type ].call(null, state, payload );
                pubsub.publish( &#39;store:update&#39;, newstate );
            }
        });

    return Store
}

&lt;/pre&gt;

&lt;h2 id=&#34;reducers&#34;&gt;Reducers&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Com esta mudança, os reducers ficaram muito mais simples do que a versão com os _&lt;strong&gt;switch cases&lt;/strong&gt;,_ ficando mais fácil de entender, de compor e de reutilizar também.&lt;/p&gt;

&lt;p&gt;Eu prefiro exportar um objeto contendo os meus reducers agrupados por um contexto em comum. Para exemplificar, vou criar aqui um objeto com as tarefas de &lt;strong&gt;adicionar&lt;/strong&gt;, &lt;strong&gt;remover&lt;/strong&gt; e &lt;strong&gt;editar&lt;/strong&gt; itens de uma lista.&lt;/p&gt;

&lt;pre&gt;export default{

    add( state = [], action ){
        return [...state, {
            text :action.item,
            id   :(Math.random() * Math.pow(10, 20))
        }]
    },

    remove( state = [], action ){
        return state.filter( item =&amp;gt; item.id != action.id )
    },

    edit( state = [], action ){
        return state.map( item =&amp;gt; {
            if( item.id == action.id )
                return { id : item.id, text : action.text }
            else
                return { id : item.id, text : item.text }
        })
    }
}

&lt;/pre&gt;

&lt;p&gt;Neste formato a principal diferença é que os reducers não testam as ações, apenas se preocupam no tratamento dos dados que lhe são passados.&lt;/p&gt;

&lt;h2 id=&#34;juntando-as-peças&#34;&gt;Juntando as peças&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Bom, o resultado final ficou bem simples, considerando que você já tem sua implementação do Inverted Redux e tem os seus reducers prontos, a junção da instância da sua Store com os reducers se dá da seguinte forma:&lt;/p&gt;

&lt;pre&gt;import store from &#39;Iredux&#39;
import Pubsub from &#39;Pubsub&#39;
import reducersList from &#39;reducers/list&#39;

let AppStore = store( Pubsub, {
    produtos :[]
})

AppStore.subscribe( state =&amp;gt;
    console.log( &#39;AppStore.State&#39;, state )
)

AppStore.ADD = ( state, action ) =&amp;gt;{
    state.produtos = reducersList.add( state.produtos, action )
}

AppStore.REMOVE = ( state, action ) =&amp;gt;{
    state.produtos = reducersList.remove( state.produtos, action )
}

AppStore.EDIT = ( state, action ) =&amp;gt;{
    state.produtos = reducersList.edit( state.produtos, action )
}

&lt;/pre&gt;

&lt;p&gt;Os métodos representam os tipos das ações do Redux, usei a mesma convenção de constantes, usando os nomes em &lt;em&gt;uppercase&lt;/em&gt;. Sua Store além de ter os métodos &lt;code&gt;dispatch()&lt;/code&gt;, &lt;code&gt;subscribe()&lt;/code&gt; e &lt;code&gt;getState()&lt;/code&gt;, ainda contém estes métodos que serão executados no disparo de uma ação.&lt;/p&gt;

&lt;p&gt;Esta mudança me ajudou não só na visualização, pois você facilmente consegue identificar quais ações sua Store possui, como também na hora de compor os reducers. Posso também disparar um evento de remoção passando apenas o id, sem a necessidade de passar a lista ( de produtos no meu caso ) na hora de criar uma ação:&lt;/p&gt;

&lt;pre&gt;import PubSub from &#39;PubSub&#39;

$(document.body).on(&#39;click&#39;, &#39;.remove-item&#39;, (e)=&amp;gt;{
    let id = e.target.id
    PubSub.publish(&#39;store&#39;, { type:&#39;REMOVE&#39;, id })
})
&lt;/pre&gt;

&lt;p&gt;No caso do código acima, eu usei o Singleton PubSub para publicar &lt;code&gt;store&lt;/code&gt; , passando apenas o id, porque no arquivo da minha Store propriamente dita, eu já mando o estado &lt;code&gt;produtos&lt;/code&gt; que sempre será uma lista conforme meu reducer &lt;code&gt;edit&lt;/code&gt; espera.&lt;/p&gt;

&lt;p&gt;Assim que a minha Store tiver executado todos os reducers ela disparará novamente outro evento global para meu pubsub, o &lt;code&gt;store:update&lt;/code&gt; . Diferente do Redux, eu preferi sempre enviar o estado da minha aplicação para receber como argumento na hora de registrar um callback, porque eu vi que sempre tinha de executar o método .getState() e tava ficando redundante.&lt;/p&gt;

&lt;pre&gt;AppStore.subscribe( state =&amp;gt;
    console.log( &#39;AppStore.State =&amp;gt;&#39;, state )
)
&lt;/pre&gt;

&lt;p&gt;Ao usar este padrão, percebi também que em alguns casos eu sempre repetia as mesmas chamadas dos reducers em diferentes ações, isso deixava o código meio duplicado e redundante. Mas a solução foi novamente muito simples, bastava criar um reducer intermediário, um middleware, que executava todos os reducers que precisava para uma determinada ação. Passei por isso pela primeira vez quando implementei uma aplicação &lt;code&gt;todomvc&lt;/code&gt; para testar os conceitos, criei um reducer chamado &lt;code&gt;common&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;import r from &#39;stores/reducers/todos&#39;

export default ( store )=&amp;gt;{

    let common = ( state, action )=&amp;gt;{
        state.items     = r.filter( state.todos, { filter : state.filter } )
        state.remaining = r.remaining( state.remaining, { todos: state.todos } )
        return state
    }

    store.ADD = ( state, action ) =&amp;gt;{
        state.todos = r.add( state.todos, action )
        return common( state, action )
    }

    store.REMOVE = ( state, action ) =&amp;gt;{
        state.todos = r.remove( state.todos, action )
        return common( state, action )
    }

    store.UPDATE = ( state, action ) =&amp;gt;{
        state.todos = r.update( state.todos, action )
        return common( state, action )
    }

    store.TOGGLE = ( state, action ) =&amp;gt;{
        state.todos = r.toggle( state.todos, action )
        return common( state, action )
    }

    store.TOGGLE_ALL = ( state, action ) =&amp;gt;{
        state.todos = r.toggle_all( state.todos, action )
        return common( state, action )
    }

    store.EDIT = ( state, action ) =&amp;gt;{
        state.todos = r.edit( state.todos, action )
        return common( state, action )
    }

    store.CANCEL = ( state, action ) =&amp;gt;{
        state.todos = r.cancel( state.todos, action )
        return common( state, action )
    }

    store.CLEAR = ( state, action ) =&amp;gt;{
        state.todos = r.clear( state.todos, action )
        return common( state, action )
    }

    store.FILTER = ( state, action )=&amp;gt;{
        state.filter = action.filter || &#39;all&#39;
        return common( state, action )
    }
}
&lt;/pre&gt;

&lt;p&gt;Deixei o &lt;code&gt;common&lt;/code&gt;  ali para ficar mais claro de entender o que ele faz, poderia muito bem ter colocado dentro do objeto que contém todos os reducers relacionados à minha lista de Todo&amp;#8217;s e referenciá-lo como fiz com outros métodos. Ali dá para ver que eu atualizo os estados &lt;code&gt;items&lt;/code&gt; e &lt;code&gt;remaining&lt;/code&gt; , e passo normalmente para estes reducers actions customizadas, enviando dados que meus reducers sempre esperam.&lt;/p&gt;

&lt;p&gt;Claro, é possível perceber logo de cara que o arquivo da sua Store vai crescer, você pode resolver isso movendo estas ações para outro arquivo, e mandando sua store como parâmetro:&lt;/p&gt;

&lt;pre&gt;import Pubsub from &#39;Pubsub&#39;
import store from &#39;Iredux&#39;
import actions from &#39;stores/actions&#39;

let AppStore = store( Pubsub, {
    produtos :[]
})

AppStore.subscribe( state =&amp;gt;
    console.log( &#39;AppStore.State&#39;, state )
)

// @Actions
actions( AppStore )&lt;/pre&gt;

&lt;p&gt;Neste arquivo &lt;code&gt;stores/actions&lt;/code&gt; eu exporto uma função que recebe a store e faz o registro de todas as ações que esta store deve ter. Aí a organização com relação à estrutura de pastas e a lógica como isso vai se dar, depende de você e também da sua aplicação.&lt;/p&gt;

&lt;h2 id=&#34;conclusões&#34;&gt;Conclusões&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Eu fiquei bastante surpreso com o resultado disso na prática. Há projetos onde criar todos os componentes usando &lt;strong&gt;Redux&lt;/strong&gt; ou mesmo o &lt;em&gt;Inverted Redux&lt;/em&gt; é loucura, principalmente porque muitos componentes acabam trabalhando bem sozinhos, são stand-alone, e não precisam estar num flow mais complexo de relacionamento.&lt;/p&gt;

&lt;p&gt;Na prática, no mundo real, há uma necessidade de se analisar quais estados realmente devem estar em sua Store. Alguns componentes apenas precisam resolver problemas de UI, ou validação, não implicando em um relacionamento mais complexo entre as partes. Você não deve criar toda uma arquitetura Redux, Flux ou qualquer que seja, se sua página apenas contém um formulário que faz um post para uma outra página depois de uma validação simples, ou mesmo ao desenvolver um sticky header.&lt;/p&gt;

&lt;p&gt;Muitas vezes você se depara com soluções do mercado e não sabe se é ou não uma solução otimizada para o seu projeto. Pense que muitas soluções do mercado estão focando nos problemas das &lt;strong&gt;Single Page Applications&lt;/strong&gt;, e fazem isso com toda a razão pois &lt;em&gt;SPA&amp;#8217;s&lt;/em&gt; são difíceis de se desenvolver e mais difícil ainda é criar uma aplicação neste formato com fácil manutenção. Porém há um nicho muito grande que são as páginas que possuem ajax, possuem uma forma um pouco mais rica na interface, mas que não podem ser consideradas totalmente &lt;em&gt;SPA&amp;#8217;s&lt;/em&gt;. Você não deve desprezar  ou subestimar estas aplicações, grandes dores de cabeça costumam vir de onde menos se espera.&lt;/p&gt;

&lt;p&gt;Ao meu ver existe uma supervalorização do verbo &amp;#8220;&lt;strong&gt;escalar&lt;/strong&gt;&amp;#8221; no contexto do desenvolvimento front-end. Vejo muitas soluções serem vendidas utilizando o argumento de que você deve usar isto ou aquilo pois caso contrário sua aplicação não irá escalar. Nenhuma solução é ótima por si só, não há regras inquebráveis e todas elas dependem de um contexto. É por este motivo que escolher um Framework A ou B, ou um padrão C ou D não será suficiente para que sua aplicação escale. É necessário mais que isso, experiência, boas análises de requisitos, funcionalidades e especificações, refactories constantes, organização etc. Portanto, não é um caminho simples.&lt;/p&gt;

&lt;p&gt;A minha intenção com este post, além de compartilhar minhas experiências, é mostrar que o Redux abriu minha mente, minha forma de pensar, fez com que eu voltasse a pensar fora da caixa. Deve servir como solução mas também como uma inspiração, uma forma de te motivar à pensar em outras soluções, à questionar as que já tem, a seguir em frente estimulando sua criatividade.&lt;/p&gt;

&lt;p&gt;Até a próxima, um grande abraço.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 — Trabalhando com Múltiplas imagens background-images</title>
      <link>http://tableless.com.br/css3-trabalhando-com-multiplas-imagens-background-images/</link>
      <pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/css3-trabalhando-com-multiplas-imagens-background-images/</guid>
      <description>

&lt;p class=&#34;graf--p&#34;&gt;
  Quem nunca se deparou com um layout com múltiplas imagens “sobrepostas” ou mesmo com títulos ou parágrafos que precisavam ficar suspensos sobre múltiplas imagens de fundo? Essa semana me deparei com o mesmo problema.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Com &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;CSS3&#34; href=&#34;https://developer.mozilla.org/en/CSS/CSS3&#34;&gt;CSS3&lt;/a&gt;, você pode aplicar aos elementos múltiplas imagens sobrepostas como plano de fundo. Sem a utilização do Z-index! É isso mesmo, “necas de pitibiriba” de Z-index.
&lt;/p&gt;

&lt;h2 id=&#34;velho-dilema-de-sobrepor-imagens-com-div-s-com-z-index-graf-h4&#34;&gt;Velho dilema de sobrepor imagens com div’s com Z-index… {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  A primeira solução que vem à cabeça é o velho e bom “Z-index”, Veja um exemplo de implementação:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;red&#34;&amp;gt;Red&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;green&#34;&amp;gt;Green&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;blue&#34;&amp;gt;Blue&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.red, .green, .blue {
    color: #fff;
    display: block;
    line-height: 100px;
    position: absolute;
    text-align: center;
    width: 100px;
}
.red {
    background: red;
    left: 20px;
    top: 20px;
    z-index: 0;
    opacity:0.5;
}
.green {
    background: green;
    left: 60px;
    top: 60px;
    z-index: 1;
    opacity:0.6;
}
.blue {
    background: blue;
    left: 100px;
    top: 100px;
    z-index: 2;
    opacity:0.7;
}
body {
    color: #777;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/grvvLw/&#34;&gt;Z-index&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;funciona-em-class-markup-em-markup-h4-em-sim-em-mas-espere-um-momento-essa-não-é-a-única-solução-graf-h4&#34;&gt;Funciona?!… &lt;em class=&#34;markup--em markup--h4-em&#34;&gt;SIM!&lt;/em&gt; Mas espere um momento, essa não é a única solução… {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  … Você já tava pensando num “workaround” safadinho, a mão da gambiarra chega a tremer nessas horas, mas nada de programação orientada a “Go-Horse”, hoje em dia temos “solucionática” pra quase tudo hehe…
&lt;/p&gt;

&lt;div style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*pAiFtxYHdjg4-HP6e46wZA.gif&#34; alt=&#34;www.gohorseprocess.com.br/extreme-go-horse-(xgh)&#34; width=&#34;500&#34; height=&#34;374&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    www.gohorseprocess.com.br/extreme-go-horse-(xgh)
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;conhecendo-as-propriedades-css-do-background-graf-h4&#34;&gt;Conhecendo as propriedades CSS do Background: {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;pre&gt;background-color.........define a cor do fundo;
background-image.........define uma imagem de fundo;
background-repeat........define a maneira como a imagem de fundo é posicionada;
background-attachment....define se a imagem de fundo &#34;rola&#34; ou não com a tela;
background-position......define como e onde a imagem de fundo é posicionada;
background-clip..........define a área do box onde a imagem de fundo é aplicada;
background-origin........define a posição de origem da imagem no box;
background-size..........define as dimensões da imagem no box;
background...............maneira abreviada para declarar todas as propriedades anteriores;&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  O nosso grande mestre &lt;a class=&#34;markup--user markup--p-user&#34; href=&#34;https://medium.com/u/addb7196c9b9&#34;&gt;Maurício Samy Silva&lt;/a&gt; #Maujor explica melhor as aplicações das propriedades &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&#34; rel=&#34;nofollow&#34;&gt;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Agora que conhecemos suas propriedades e características… agora vamos ver como o “background-image” funciona para entendermos nosso horizonte de possibilidades:
&lt;/p&gt;

&lt;h2 id=&#34;background-image-vs-z-index-a-batalha-graf-h4&#34;&gt;Background-image VS Z-index — A BATALHA: {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando trabalhamos 2 ou 3 elementos (sejam &lt;img&gt;, &lt;div&gt;, &lt;etc…&gt;) temos um controle até tolerável, mas… quando utilizamos 6, 10 ou mais elementos numa mesma div ou aninhamento próximo, o z-index começa a se tornar “linguiçento” demais e somos obrigados a utilizar mais classes e ids para organizarmos nosso CSS, pensando nisso que escrevi esse post!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;em&gt;Às vezes não necessariamente queremos ou podemos utilizar o z-index.&lt;/em&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Sem contar que quebramos o conceito de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/oocss-smacss-bem-dry-css-afinal-como-escrever-css/&#34;&gt;DRY&lt;/a&gt; em nosso documento CSS e não queremos isso, não é amiguinhos?
&lt;/p&gt;

&lt;div style=&#34;width: 495px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*xt8qqJopHwF-Gcg9xM6t3w.gif&#34; alt=&#34;Vida de um Front-end&#34; width=&#34;485&#34; height=&#34;364&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Front-end Lifestyle
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;z-index-quando-usar-graf-h4&#34;&gt;Z-index — Quando usar? {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando temos muitos elementos e precisamos especificar propriedades e características CSS que vão além do propósito de uma “imagem de fundo” ou “sobreposição” então o Z-index é a melhor opção!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Mas se você quer simplesmente sobrepor uma imagem de um logo (ou uma composição de camadas que formam um logo) sobre um uma ou mais imagem de preenchimento de fundo o background-image é a melhor solução!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Estes elementos ficam empilhados em camadas uma acima da outra, onde o primeiro fundo dado será desenhado no topo e apenas o último elemento da lista poderá definir uma cor sólida de fundo, ou não, aí fica ao seu critério.
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.minhaClasse {
  background: fundo1, fundo2, ..., fundoN;
}&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/tag/css3/&#34;&gt;CSS3&lt;/a&gt; permite especificar imagens de fundo para múltiplos elementos, usando nada mais do que uma única lista separada por vírgulas.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Você pode fazer isso com a propriedade reduzida &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt; e também com as propriedade individuais, com a exceção de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-color&#34;&gt;background-color&lt;/a&gt;. Isto é, as seguintes propriedades de plano de fundo podem ser especificadas com uma lista, uma por fundo: &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-attachment&#34;&gt;background-attachment&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;A propriedade CSS background-clip especifica se o fundo de um elemento, seja cor ou imagem, se extende debaixo de sua borda.&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-clip&#34;&gt;background-clip&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;background-image&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-origin&#34;&gt;background-origin&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-position&#34;&gt;background-position&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-repeat&#34;&gt;background-repeat&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-size&#34;&gt;background-size&lt;/a&gt;. (rola até gradiente!)
&lt;/p&gt;

&lt;h2 id=&#34;exemplos-graf-h3&#34;&gt;Exemplos {.graf&amp;ndash;h3}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Neste exemplo, três planos de fundos estão empilhados: um texto estilizado, o logo da Tableless.com.br, e uma imagem de fundo ilustrando uma cidade:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;div class=&#34;intro-text&#34;&amp;gt;
    &amp;lt;h1 class=&#34;name-index&#34;&amp;gt;BEM-VINDO À&amp;lt;/br&amp;gt;&amp;lt;span&amp;gt;INTERNET&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;header {
  background: url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&#34; rel=&#34;nofollow&#34;&gt;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&lt;/a&gt;) no-repeat center center, url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&#34; rel=&#34;nofollow&#34;&gt;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&lt;/a&gt;) no-repeat center top;
  height: 100vh;
  width: auto;
  box-sizing: border-box;
}
header .intro-text {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
header .intro-text &amp;gt; h1 {
  text-shadow: 8px 5px 5px #00181c;
  color: #fff;
  text-transform: uppercase;
  text-align: center;
}
header .intro-text .name-index {
  font-size: 7vw;
}
header .intro-text .name-index span {
  font-size: 9.2vw;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/vKddRK/&#34;&gt;Multiple backgrounds backgroud-image&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Suporte do navegador para múltiplas imagens com a propriedade CSS background-image é relativamente difundido na implementação do recurso citado acima:
&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Mozilla Firefox (3.6 ou superior)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Safari / Chrome (1.0 / 1.3 +)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Opera (10.5+)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    até mesmo no Internet Explorer (9.0+)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Bibliografia (Fontes)
&lt;/p&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;background-image&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;The CSS background-image property sets one or several background images for an element. The images are drawn on…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;Multiple backgrounds&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;Com CSS3 , você pode aplicar aos elementos multiplos planos de fundo. Estes ficam em camadas empilhadas uma acima da…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>