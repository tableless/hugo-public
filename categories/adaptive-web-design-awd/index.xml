<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adaptive Web Design Awd on Tableless</title>
    <link>http://tableless.com.br/categories/adaptive-web-design-awd/index.xml</link>
    <description>Recent content in Adaptive Web Design Awd on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/categories/adaptive-web-design-awd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CSS3 — Trabalhando com Múltiplas imagens background-images</title>
      <link>http://tableless.com.br/css3-trabalhando-com-multiplas-imagens-background-images/</link>
      <pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/css3-trabalhando-com-multiplas-imagens-background-images/</guid>
      <description>

&lt;p class=&#34;graf--p&#34;&gt;
  Quem nunca se deparou com um layout com múltiplas imagens “sobrepostas” ou mesmo com títulos ou parágrafos que precisavam ficar suspensos sobre múltiplas imagens de fundo? Essa semana me deparei com o mesmo problema.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Com &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;CSS3&#34; href=&#34;https://developer.mozilla.org/en/CSS/CSS3&#34;&gt;CSS3&lt;/a&gt;, você pode aplicar aos elementos múltiplas imagens sobrepostas como plano de fundo. Sem a utilização do Z-index! É isso mesmo, “necas de pitibiriba” de Z-index.
&lt;/p&gt;

&lt;h2 id=&#34;velho-dilema-de-sobrepor-imagens-com-div-s-com-z-index-graf-h4&#34;&gt;Velho dilema de sobrepor imagens com div’s com Z-index… {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  A primeira solução que vem à cabeça é o velho e bom “Z-index”, Veja um exemplo de implementação:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;red&#34;&amp;gt;Red&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;green&#34;&amp;gt;Green&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;blue&#34;&amp;gt;Blue&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.red, .green, .blue {
    color: #fff;
    display: block;
    line-height: 100px;
    position: absolute;
    text-align: center;
    width: 100px;
}
.red {
    background: red;
    left: 20px;
    top: 20px;
    z-index: 0;
    opacity:0.5;
}
.green {
    background: green;
    left: 60px;
    top: 60px;
    z-index: 1;
    opacity:0.6;
}
.blue {
    background: blue;
    left: 100px;
    top: 100px;
    z-index: 2;
    opacity:0.7;
}
body {
    color: #777;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/grvvLw/&#34;&gt;Z-index&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;funciona-em-class-markup-em-markup-h4-em-sim-em-mas-espere-um-momento-essa-não-é-a-única-solução-graf-h4&#34;&gt;Funciona?!… &lt;em class=&#34;markup--em markup--h4-em&#34;&gt;SIM!&lt;/em&gt; Mas espere um momento, essa não é a única solução… {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  … Você já tava pensando num “workaround” safadinho, a mão da gambiarra chega a tremer nessas horas, mas nada de programação orientada a “Go-Horse”, hoje em dia temos “solucionática” pra quase tudo hehe…
&lt;/p&gt;

&lt;div style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*pAiFtxYHdjg4-HP6e46wZA.gif&#34; alt=&#34;www.gohorseprocess.com.br/extreme-go-horse-(xgh)&#34; width=&#34;500&#34; height=&#34;374&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    www.gohorseprocess.com.br/extreme-go-horse-(xgh)
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;conhecendo-as-propriedades-css-do-background-graf-h4&#34;&gt;Conhecendo as propriedades CSS do Background: {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;pre&gt;background-color.........define a cor do fundo;
background-image.........define uma imagem de fundo;
background-repeat........define a maneira como a imagem de fundo é posicionada;
background-attachment....define se a imagem de fundo &#34;rola&#34; ou não com a tela;
background-position......define como e onde a imagem de fundo é posicionada;
background-clip..........define a área do box onde a imagem de fundo é aplicada;
background-origin........define a posição de origem da imagem no box;
background-size..........define as dimensões da imagem no box;
background...............maneira abreviada para declarar todas as propriedades anteriores;&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  O nosso grande mestre &lt;a class=&#34;markup--user markup--p-user&#34; href=&#34;https://medium.com/u/addb7196c9b9&#34;&gt;Maurício Samy Silva&lt;/a&gt; #Maujor explica melhor as aplicações das propriedades &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&#34; rel=&#34;nofollow&#34;&gt;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Agora que conhecemos suas propriedades e características… agora vamos ver como o “background-image” funciona para entendermos nosso horizonte de possibilidades:
&lt;/p&gt;

&lt;h2 id=&#34;background-image-vs-z-index-a-batalha-graf-h4&#34;&gt;Background-image VS Z-index — A BATALHA: {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando trabalhamos 2 ou 3 elementos (sejam &lt;img&gt;, &lt;div&gt;, &lt;etc…&gt;) temos um controle até tolerável, mas… quando utilizamos 6, 10 ou mais elementos numa mesma div ou aninhamento próximo, o z-index começa a se tornar “linguiçento” demais e somos obrigados a utilizar mais classes e ids para organizarmos nosso CSS, pensando nisso que escrevi esse post!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;em&gt;Às vezes não necessariamente queremos ou podemos utilizar o z-index.&lt;/em&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Sem contar que quebramos o conceito de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/oocss-smacss-bem-dry-css-afinal-como-escrever-css/&#34;&gt;DRY&lt;/a&gt; em nosso documento CSS e não queremos isso, não é amiguinhos?
&lt;/p&gt;

&lt;div style=&#34;width: 495px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*xt8qqJopHwF-Gcg9xM6t3w.gif&#34; alt=&#34;Vida de um Front-end&#34; width=&#34;485&#34; height=&#34;364&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Front-end Lifestyle
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;z-index-quando-usar-graf-h4&#34;&gt;Z-index — Quando usar? {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando temos muitos elementos e precisamos especificar propriedades e características CSS que vão além do propósito de uma “imagem de fundo” ou “sobreposição” então o Z-index é a melhor opção!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Mas se você quer simplesmente sobrepor uma imagem de um logo (ou uma composição de camadas que formam um logo) sobre um uma ou mais imagem de preenchimento de fundo o background-image é a melhor solução!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Estes elementos ficam empilhados em camadas uma acima da outra, onde o primeiro fundo dado será desenhado no topo e apenas o último elemento da lista poderá definir uma cor sólida de fundo, ou não, aí fica ao seu critério.
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.minhaClasse {
  background: fundo1, fundo2, ..., fundoN;
}&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/tag/css3/&#34;&gt;CSS3&lt;/a&gt; permite especificar imagens de fundo para múltiplos elementos, usando nada mais do que uma única lista separada por vírgulas.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Você pode fazer isso com a propriedade reduzida &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt; e também com as propriedade individuais, com a exceção de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-color&#34;&gt;background-color&lt;/a&gt;. Isto é, as seguintes propriedades de plano de fundo podem ser especificadas com uma lista, uma por fundo: &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-attachment&#34;&gt;background-attachment&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;A propriedade CSS background-clip especifica se o fundo de um elemento, seja cor ou imagem, se extende debaixo de sua borda.&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-clip&#34;&gt;background-clip&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;background-image&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-origin&#34;&gt;background-origin&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-position&#34;&gt;background-position&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-repeat&#34;&gt;background-repeat&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-size&#34;&gt;background-size&lt;/a&gt;. (rola até gradiente!)
&lt;/p&gt;

&lt;h2 id=&#34;exemplos-graf-h3&#34;&gt;Exemplos {.graf&amp;ndash;h3}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Neste exemplo, três planos de fundos estão empilhados: um texto estilizado, o logo da Tableless.com.br, e uma imagem de fundo ilustrando uma cidade:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;div class=&#34;intro-text&#34;&amp;gt;
    &amp;lt;h1 class=&#34;name-index&#34;&amp;gt;BEM-VINDO À&amp;lt;/br&amp;gt;&amp;lt;span&amp;gt;INTERNET&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;header {
  background: url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&#34; rel=&#34;nofollow&#34;&gt;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&lt;/a&gt;) no-repeat center center, url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&#34; rel=&#34;nofollow&#34;&gt;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&lt;/a&gt;) no-repeat center top;
  height: 100vh;
  width: auto;
  box-sizing: border-box;
}
header .intro-text {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
header .intro-text &amp;gt; h1 {
  text-shadow: 8px 5px 5px #00181c;
  color: #fff;
  text-transform: uppercase;
  text-align: center;
}
header .intro-text .name-index {
  font-size: 7vw;
}
header .intro-text .name-index span {
  font-size: 9.2vw;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/vKddRK/&#34;&gt;Multiple backgrounds backgroud-image&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Suporte do navegador para múltiplas imagens com a propriedade CSS background-image é relativamente difundido na implementação do recurso citado acima:
&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Mozilla Firefox (3.6 ou superior)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Safari / Chrome (1.0 / 1.3 +)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Opera (10.5+)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    até mesmo no Internet Explorer (9.0+)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Bibliografia (Fontes)
&lt;/p&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;background-image&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;The CSS background-image property sets one or several background images for an element. The images are drawn on…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;Multiple backgrounds&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;Com CSS3 , você pode aplicar aos elementos multiplos planos de fundo. Estes ficam em camadas empilhadas uma acima da…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tamanho da tela e tamanho da janela com JavaScript</title>
      <link>http://tableless.com.br/tamanho-da-tela-e-tamanho-da-janela-com-js/</link>
      <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/tamanho-da-tela-e-tamanho-da-janela-com-js/</guid>
      <description>&lt;p&gt;Se você trabalha em um projeto que precisa ser em visto em todos os dispositivos, você precisará ir muito além das Media Queries. Um passo adiante será detectar o tamanho da tela do usuário e também o tamanho da janela usada pelo usuário.&lt;/p&gt;

&lt;p&gt;Note que os dois são bem diferentes. Enquanto o usuário está um desktop, ele pode modificar o tamanho da janela do browser e consequentemente isso irá alterar o breakpoint da página. Se você faz um layout responsivo, ele verá o layout se adaptando enquanto faz o redimensionamento da página. Embora ele esteja modificando o tamanho da janela, o tamanho da tela (baseada PPI &amp;#8211; Points Per Inch &amp;#8211; da tela) dele não é modificada.&lt;/p&gt;

&lt;p&gt;Você pode usar as duas ocasiões para fazer mudanças no layout ou no funcionamento da página de acordo com o tamanho da janela ou o tamanho da tela. Abaixo, veja um código bem básico, onde você consegue recuperar esses valores:&lt;/p&gt;

&lt;p&gt;Redimensionando a janela, os valores mudam e você conhece o tamanho da janela. Para que os valores da tela mudem, modifique a resolução do seu computador e faça um refresh na página. Perceba que aqui no Desktop, ele mostra a resolução que você colocou, que na verdade é uma emulação caso a tela tivesse uma quantidade de pontos por polegada menor do que ela realmente tem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/desktop-width-height.png&#34; alt=&#34;desktop-width-height&#34; width=&#34;1188&#34; height=&#34;762&#34; class=&#34;alignnone size-full wp-image-46914&#34; srcset=&#34;uploads/2015/02/desktop-width-height.png 1188w, uploads/2015/02/desktop-width-height-217x139.png 217w, uploads/2015/02/desktop-width-height-400x257.png 400w&#34; sizes=&#34;(max-width: 1188px) 100vw, 1188px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mas até aqui estamos testando isso em um Desktop. Quando testamos isso em um iPhone, que tem densidade de pixels diferente de desktops e toda aquela história, ele vai mostrar o valor real de PPI, que é o valor original da tela do iPhone, sem contar com o valor dobrado da tela retina. Nesse caso, em um iPhone 6, ficaria mais ou menos como a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/iphone-width-height.png&#34; alt=&#34;iphone-width-height&#34; width=&#34;675&#34; height=&#34;1135&#34; class=&#34;alignnone size-full wp-image-46912&#34; srcset=&#34;uploads/2015/02/iphone-width-height.png 675w, uploads/2015/02/iphone-width-height-83x139.png 83w, uploads/2015/02/iphone-width-height-400x673.png 400w&#34; sizes=&#34;(max-width: 675px) 100vw, 675px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora em um iPad Air:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/ipad-width-height.png&#34; alt=&#34;ipad-width-height&#34; width=&#34;880&#34; height=&#34;1158&#34; class=&#34;alignnone size-full wp-image-46913&#34; srcset=&#34;uploads/2015/02/ipad-width-height.png 880w, uploads/2015/02/ipad-width-height-106x139.png 106w, uploads/2015/02/ipad-width-height-400x526.png 400w&#34; sizes=&#34;(max-width: 880px) 100vw, 880px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como as janelas dos browsers em mobiles são sempre maximizadas, muito dificilmente elas serão muito menores que o tamanho da tela do aparelho.&lt;/p&gt;

&lt;p&gt;Tendo esses valores, você consegue pelo menos ter uma ideia do tamanho do dispositivo que o usuário tem usado. Pelo menos saber qual categoria ergonômica ele se encaixa e então fazer decisões de layout e funcionalidades mais adequadas ao projeto.&lt;/p&gt;

&lt;p&gt;As Media Queries do CSS funcionando se baseando no tamanho da janela do browser e não no tamanho da tela. Isso é importante você saber.&lt;/p&gt;

&lt;p&gt;Lembrando que aqui você não está detectando o dispositivo. Você não sabe se o cara está usando um iPhone ou um Motorola. Se ele está usando um iOS ou um Android. Mas, teoricamente, isso não precisa importar pra você, já que você faz websites se preocupando com o tamanho da tela e não qual o sistema operacional usado.&lt;/p&gt;

&lt;p&gt;Sugiro que você faça testes aí veja essas alterações comparando com os diversos dispositivos. Faz bem para não confundir as bolas quando você precisar desenhar algo específico ou resolver bugs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formulário responsivo com MailChimp</title>
      <link>http://tableless.com.br/formulario-responsivo-com-mailchimp/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/formulario-responsivo-com-mailchimp/</guid>
      <description>

&lt;p&gt;Há cada dia mais utilizamos serviços disponíveis na web que tem um plano básico e gratuito que permite integrações. Nos últimos meses tenho feito formulários com frequência usando uma abordagem bem simples. Vou mostrar agora como criar um formulário responsivo, integrando com MailChimp e usando jQuery Validate.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos criar o formulário da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;CREATE RESPONSIVE FORM WITH INTEGRATE MAILCHIMP&amp;lt;/h1&amp;gt;
  &amp;lt;form id=&#34;form-contact&#34; method=&#34;POST&#34; action=&#34;mailchimp-contact.php&#34;&amp;gt;
    &amp;lt;div class=&#34;input&#34;&amp;gt;
      &amp;lt;label for=&#34;name&#34;&amp;gt;Name&amp;lt;/label&amp;gt;
      &amp;lt;input type=&#34;text&#34; id=&#34;name&#34; name=&#34;name&#34; placeholder=&#34;Your name&#34; required&amp;gt;
    &amp;lt;/div&amp;gt;

    ...
    
    &amp;lt;div class=&#34;input txt&#34;&amp;gt;
      &amp;lt;label for=&#34;message&#34;&amp;gt;Message&amp;lt;/label&amp;gt;
      &amp;lt;textarea id=&#34;message&#34; name=&#34;message&#34; cols=&#34;10&#34; rows=&#34;5&#34; placeholder=&#34;Its message leaves&#34; required&amp;gt;&amp;lt;/textarea&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;buttons&#34;&amp;gt;
      &amp;lt;span class=&#34;form-message&#34;&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;input type=&#34;submit&#34; value=&#34;SEND&#34; /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/section&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-form-mailchimp/demo-only-elements.html&#34; target=&#34;_blank&#34; title=&#34;Ver demo sem style.&#34;&gt;Ver demo sem style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Para cada label e input foi adicionado uma &lt;code&gt;div.input&lt;/code&gt; para inserir uma formatação por grupo.&lt;/p&gt;

&lt;h3 id=&#34;o-form-está-centralizado-com-max-width&#34;&gt;O form está centralizado com max-width:&lt;/h3&gt;

&lt;p&gt;Por ser um elemento &amp;#8216;block&amp;#8217;, vamos definir o tamanho máximo que ele pode ter.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;form {
&amp;nbsp; margin: 0 auto;
&amp;nbsp; max-width: 850px;
&amp;nbsp; padding: 20px 10px;
&amp;nbsp; background-color: rgba(255,255,255,0.4)
}
&lt;/pre&gt;

&lt;h3 id=&#34;o-grupo-div-input-com-50-em-8216-width-8217-do-form&#34;&gt;O grupo div.input com 50% em &amp;#8216;width&amp;#8217; do form:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input {
  float: left;
  width: 48%;
  padding: 0 1% 20px;
  position: relative;
}

.input.txt { width: 98%; } /*textarea 100%*/
&lt;/pre&gt;

&lt;h3 id=&#34;os-labels&#34;&gt;Os labels:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input label {
  display: block;
  padding-bottom: 5px;
  color: #666;
}
&lt;/pre&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input label.error {
  position: absolute;
  right: 18px;
  top: 35px;
  color: #f00;
}&lt;/pre&gt;

&lt;p&gt;O label.error é gerado pelo jQuery validate e adicionado seguido dos campos.&lt;/p&gt;

&lt;h3 id=&#34;os-campos&#34;&gt;Os campos:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input input,
.input textarea {
  padding-top: 10px;
  padding-bottom: 9px;
  border: none;
  font-size: 16px;
  font-weight: 100;
  font-family: &#34;Helvetica Neue&#34;, Helvetica, Arial, sans-serif;
}

.input input {
  width: 94%;
  padding-left: 3%;
  padding-right: 3%;
}

.input textarea {
  width: 97%;
  padding-left: 1.5%;
  padding-right: 1.5%;
}&lt;/pre&gt;

&lt;p&gt;Formatamos os campos para ter 100% de tamanho do elemento pai &amp;#8216;div.input&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Sempre que redimensionar não haverá quebras, portanto, responsivo meu amigo.&lt;/p&gt;

&lt;h3 id=&#34;agora-um-capricho-para-resoluções-pequenas&#34;&gt;Agora um capricho para resoluções pequenas.&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 520px) {
  .input {
    width: 98%;
  }
}&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-form-mailchimp/demo-style-elements.html&#34; target=&#34;_blank&#34; title=&#34;Ver demo com style.&#34;&gt;Ver demo com style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-jquery-mailchimp&#34;&gt;O jQuery + MailChimp&lt;/h2&gt;

&lt;p&gt;Com o HTML e CSS prontos, vamos adicionar o JavaScript que é fácil. Como dependemos do jQuery e não podemos iniciar de qualquer forma, segue uma estrutura bem legal:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function(){
  var contact = function(){
    var init = function() {
      //initialize code
    };
    
&amp;nbsp;   //more functions

    return {init: init};
  }();

  //jQuery loaded
  $(document).ready(contact.init);
})();&lt;/pre&gt;

&lt;p&gt;Como sabemos exatamente qual função vai executar quando a jQuery carregar, adicionaremos o jQuery Validate no init:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var init = function() {
  $(&amp;#039;#form-contact&amp;#039;).validate({
    rules : {
      name: &#34;required&#34;,
      email: { required: true, email: true },
      phone: { required: true, minlength: 14 },
      company: &#34;required&#34;,
      message: &#34;required&#34;
    },
    messages: {
      name: &#34;*&#34;,
      email: { required: &#34;*&#34;, email: &#34;*&#34; },
      phone: { required: &#34;*&#34;, minlength: &#34;*&#34; },
      company: &#34;*&#34;,
      message: &#34;*&#34;
    }
  });
};&lt;/pre&gt;

&lt;p&gt;Agora que estamos validando todos os campos, que tal adicionar um ajax para deixar nosso formulário bem suave e uma função para exibir mensagens de sucesso ou erro, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var init = function() {
  $(&amp;#039;#form-contact&amp;#039;).validate({
    rules : {
      ...
    },
    messages: {
      ...
    },
    submitHandler: function(form) {
      var $form = $(form);

      var params = {
        name: $form.find(&amp;#039;#name&amp;#039;).val(),
        email: $form.find(&amp;#039;#email&amp;#039;).val(),
        phone: $form.find(&amp;#039;#phone&amp;#039;).val(),
        company: $form.find(&amp;#039;#company&amp;#039;).val(),
        message: $form.find(&amp;#039;#message&amp;#039;).val()
      };

      $.ajax({
        type: $form.attr(&amp;#039;method&amp;#039;),
        url: $form.attr(&amp;#039;action&amp;#039;),
        data: params,
        success: function( data ) {
          if(data == &#34;true&#34;) {
            $form.find(&amp;#039;.input input&amp;#039;).val(&#34;&#34;);
            $form.find(&amp;#039;.input textarea&amp;#039;).val(&#34;&#34;);
            setMessage(&#34;Mission accomplished. &amp;lt;strong&amp;gt;&#34;+ params.email +&#34;&amp;lt;/strong&amp;gt; was successfully added to list.&#34;, &#34;success&#34;);
          } else {
            setMessage(&#34;Mission failed. &amp;lt;strong&amp;gt;&#34;+ params.email +&#34;&amp;lt;/strong&amp;gt; not was added to list.&#34;, &#34;error&#34;);
          }
        },
        error: function( data ) {
          setMessage(&#34;Mission failed in connection. Try again.&#34;, &#34;error&#34;);
        }
      });

      return false;
    }
  });
};

var setMessage = function($message, $type) {
  $(&amp;#039;.form-message&amp;#039;).html($message).addClass($type);

  setTimeout(function(){
    $(&amp;#039;.form-message&amp;#039;).removeClass($type);
  }, 6000);
};
&lt;/pre&gt;

&lt;p&gt;Via &amp;#8216;submitHandler&amp;#8217; do &lt;a href=&#34;http://jQueryvalidation.org/&#34; target=&#34;_blank&#34;&gt;jQuery Validate&lt;/a&gt;, vamos disparar por ajax todos os dados preenchidos e travar o post do form com &amp;#8216;return false&amp;#8217; no final da função. Assim evitamos aquele redirecionamento de post.&lt;/p&gt;

&lt;h3 id=&#34;o-php&#34;&gt;O PHP&lt;/h3&gt;

&lt;p&gt;Como definimos com &amp;#8216;method&amp;#8217; e &amp;#8216;action&amp;#8217; para o nosso formulário, segue o código para resgatar os dados:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
    require_once &amp;#039;MCAPI.class.php&amp;#039;;
    $api = new MCAPI(&amp;#039;casiuach1293kajsc912319203cja23s-us9&amp;#039;);
    $merge_vars = array(&amp;#039;NAME&amp;#039;=&amp;gt;$_POST[&#34;name&#34;], &#39;PHONE&#39;=&amp;gt;$_POST[&#34;phone&#34;], &#39;COMPANY&#39;=&amp;gt;$_POST[&#34;company&#34;], &#39;MESSAGE&#39;=&amp;gt;$_POST[&#34;message&#34;]);
    
    // Submit subscriber data to MailChimp
    // For parameters doc, refer to: http://apidocs.mailchimp.com/api/1.3/listsubscribe.func.php
    $retval = $api-&amp;gt;listSubscribe( &amp;#039;12938asd98&amp;#039;, $_POST[&#34;email&#34;], $merge_vars, &amp;#039;html&amp;#039;, false, true );
    
    if ($api-&amp;gt;errorCode){
        echo &#34;false&#34;;
    } else {
        echo &#34;true&#34;;
    }
?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Dependemos da MCAPI.class que você pode verificar na &lt;a href=&#34;https://apidocs.mailchimp.com/api/example-code/&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt; ou baixar &lt;a href=&#34;https://codeload.github.com/sunarlim/mailchimp-subscribe/zip/master&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;, só lembrando que precisa adicionar sua API Key e List ID.&lt;/p&gt;

&lt;h2 id=&#34;pronto&#34;&gt;PRONTO&lt;/h2&gt;

&lt;p&gt;Nosso formulário é responsivo e integrado ao mailchimp.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://css4html.com.br/demos/responsive-form-mailchimp/&#34; target=&#34;_blank&#34; title=&#34;Veja como ficou o resultado final&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/palloi/responsive-form-mailchimp/&#34; target=&#34;_blank&#34; title=&#34;Veja o código completo no github&#34;&gt;Veja o c&amp;oacute;digo completo no github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sobre desenvolvimento multi-device</title>
      <link>http://tableless.com.br/sobre-desenvolvimento-multi-device/</link>
      <pubDate>Mon, 30 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/sobre-desenvolvimento-multi-device/</guid>
      <description>

&lt;p&gt;Hoje existem uma série de dispositivos misturados em pelo menos três categorias que conhecemos: smartphones, tablets e desktops. Mas onde começa um e termina outro? Um smartphone de seis ou sete polegadas é um tablet? Se você acha que não existem smartphones deste tamanho, pesquise sobre o Fonepad da Asus para ter um exemplo. Dividir os aparelhos pelo tamanho da tela ou por features já não é mais tão seguro como antes. Então como podemos desenhar uma linha para delimitar onde inicia e onde termina um smartphone e começa um tablet? Ou um tablet e um notebook ou um desktop?&lt;/p&gt;

&lt;p&gt;Todos os meses a indústria cria novas definições de aparelhos. Veja o caso dos Phablets, que são os smartphones gigantes, como o Sony Z Ultra e o Nokia Lumia 1520. Há também os híbridos, que o Windows 8 tem trazido à tona e que estão se popularizando cada vez mais. É por isso que é muito difícil fazer uma classificação por features ou por tamanhos. Tudo é muito parecido.&lt;/p&gt;

&lt;p&gt;Sem dúvida é importante que você entenda o dispositivo que o seu cliente tem usado, mas mais importante do que isso é entender o contexto em que o cliente usa esses dispositivos. Não é muito difícil imaginar como é esse comportamento. Pense em como &lt;strong&gt;você&lt;/strong&gt; usa seus gadgets. Pense exatamente nas situações e lugares onde você usa seu smartphone, o seu tablet e quando você decide usar seu PC. Perceba que há um padrão de comportamento bastante comum entre todos os usuários destes dispositivos. Há uma questão ergonômica envolvida, onde decidimos qual dos dispositivos usar.&lt;/p&gt;

&lt;h2 id=&#34;classificação-ergonômica&#34;&gt;Classificação ergonômica&lt;/h2&gt;

&lt;p&gt;A primeira vez que vi essa maneira de diferenciar os dispositivos foi em uma palestra do Luke Wroblewski. E achei que faz bastante sentido essa divisão, por enquanto, por que a ergonomia dos aparelhos é algo que não muda muito. A classificação é a seguinte:&lt;/p&gt;

&lt;p&gt;Os aparelhos que você consegue usar com apenas uma mão, em pé, em lugares apertados, no ônibus, metro e etc, ficam no grupo &lt;strong&gt;palm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Aparelhos que geralmente são usados em lugares mais confortáveis, principalmente em casa, em um sofá ou na cama, que normalmente precisam das duas mãos para serem manuseados, ficam no grupo &lt;strong&gt;lap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora os aparelhos grandes, que normalmente ficam &amp;#8220;presos&amp;#8221; a uma mesa, em um ambiente controlado, sem muita perturbação e que geralmente é onde o usuário tem um nível de foco bem alto, são colocados no grupo &lt;strong&gt;desk&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Essa classificação é muito mais amigável e sabemos que não vai mudar daqui um ou dois anos por causa de um novo aparelho maluco que possa surgir. Isso também permite planejar o produto para uma continuidade mais previsível de tamanhos de telas.&lt;/p&gt;

&lt;p&gt;Mas há outros pontos que precisam ser levados em consideração. Embora eles sejam classificados por este fator ergonômico, como é a interação com cada dispositivo?&lt;/p&gt;

&lt;h2 id=&#34;classificação-via-interação&#34;&gt;Classificação via interação&lt;/h2&gt;

&lt;p&gt;As interações mais comuns existentes hoje são touch e teclado/mouse. Há interações que fogem desse padrão, que ainda são bem incomuns como as feitas com o Kinect ou até o Leap Motion.&lt;/p&gt;

&lt;p&gt;Mas ainda sim não é seguro traçar uma linha dividindo os dispositivos com essas interações. Há o caso dos notebooks híbridos e aqueles tablets que podemos conectar um teclado e um mouse.&lt;/p&gt;

&lt;p&gt;Há uma mistura nessa classificação e isso te coloca em um cenário onde o usuário vai usar sua interface com um mouse ou o próprio dedo em qualquer aparelho. Não há bala de prata aqui, mas ainda assim você &lt;strong&gt;não precisa fazer duas interfaces&lt;/strong&gt; para cada tipo de interação. Isso é caro, dá trabalho e sua equipe vai pirar antes do fim do projeto.&lt;/p&gt;

&lt;h2 id=&#34;desenhando-e-desenvolvendo-uma-vez&#34;&gt;Desenhando e desenvolvendo uma vez&lt;/h2&gt;

&lt;p&gt;Produzir algo para todos os dispositivos e prevendo todas as circunstancias pode ser algo bem fácil de fazer. Mas isso é uma maneira nova e bem diferente de fazer tudo o que você já sabe. Você vai continuar desenhando uma interface que envolve todas as possibilidades. Aqui vão 5 premissas básicas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Trabalhe pensando em Mobile First&lt;/li&gt;
&lt;li&gt;Tenha em mente a continuidade dos tamanhos de telas&lt;/li&gt;
&lt;li&gt;Pense em um futuro onde todos os dispositivos serão de alta resolução&lt;/li&gt;
&lt;li&gt;Otimize para touch&lt;/li&gt;
&lt;li&gt;Suporte cursores e teclados&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Essas premissas precisam ser seguidas no processo de desenvolvimento todo, mas as áreas de ux/design e front-end tem um papel mais crítico no caminho. Há muita discussão antes de digitar uma linha de código. Nas experiências que tenho passado, depois dessas grandes discussões, a taxa de retrabalho e refatoração de código é bem pequena.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RWD é fácil/difícil – Anotações Dan Mall – An Event Apart 2014</title>
      <link>http://tableless.com.br/rwd-ainda-e-facildificil-anotacoes-dan-mall-event-apart-2014/</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/rwd-ainda-e-facildificil-anotacoes-dan-mall-event-apart-2014/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;danielmall.com

&lt;ul&gt;
&lt;li&gt;Henry Ford moveu as pessoas que cuidavam da montagem do motor para mais perto umas das outras, assim ele reduziu custos e usou poucos trabalhadores, mais bem preparados e bem pagos, para fazer bem as coisas.&lt;/li&gt;
&lt;li&gt;Waterfall (fluxo linear) é ruim. Não é paralelo. É muito engessado.&lt;/li&gt;
&lt;li&gt;Muitas empresas tem equipes no modelo de montagem em linha. Um processo típico waterfall consistem em pequenas partes, isoladas: você finaliza uma tarefa e corre para próxima. Hoje, o processo de design precisa ser mais interativo porque nós temos múltiplas telas e dispositivos.&lt;/li&gt;
&lt;li&gt;Use um framework para atestar a qualidade dos seus sistemas não processos.&lt;/li&gt;
&lt;li&gt;Um framework tem restrições, não regras. É como um jogo de futebol: tem 90 minutos e um campo pré-determinado, mas o que acontece nesses 90 minutos e no campo sempre é uma surpresa.&lt;/li&gt;
&lt;li&gt;UX, Designers e desenvolvedores não devem competir entre si. Eles precisam cooperar. Não existe uma tarefa de design, ou uma tarefa do desenvolvedor, existe apenas UMA tarefa, que envolve todas as áreas para ser cumprida.&lt;/li&gt;
&lt;li&gt;O envolvimento das áreas são temperadas durante os processos.&lt;/li&gt;
&lt;li&gt;Crie pontos de foco: comece e termine os projetos em um mesmo lugar. Kick-offs são bons para iniciar os pontos focais. Repita as fases, comprima isso em pequenas tarefas e objetivos.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;modern-web-design-process&#34;&gt;Modern Web design process:&lt;/h2&gt;

&lt;h3 id=&#34;1-plain&#34;&gt;1. Plain&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pesquisa&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;É necessário pesquisar e entender o que funciona e o que não funciona.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trabalhar com Hipoteses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quando você trabalha com hipóteses você consegue respostas mais rápido. Você viaja em visões diferentes de um mesmo problema.&lt;/p&gt;

&lt;p&gt;Tenha uma visão do que o produto será. Compare esta visão com as pesquisas que faz.&lt;/p&gt;

&lt;h3 id=&#34;2-inventory&#34;&gt;2. Inventory&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Inventário de conteúdo&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Livro &amp;#8211; The Elements of Content Statrategy&lt;/li&gt;
&lt;li&gt;Você precisa trabalhar com a possibilidade de formatos no conteúdo: listas, parágrafos, títulos, citações e etc.&lt;/li&gt;
&lt;li&gt;Faça um mapa do conteúdo do site. Para que serve cada página? Qual o tipo de conteúdo deve haver em cada página?&lt;/li&gt;
&lt;li&gt;Uma atitude normal que envolve o Web Design é mostrar para as pessoas como seus sites irão aparecer em dispositivos específicos. Em vez disso, mostre como o site poderá se comportar em diversas telas. Isso é mais flexível.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Performance Budgets&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faça um inventário dos sites competidores.&lt;/li&gt;
&lt;li&gt;Compare a performance de cada um.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pattern Inventory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faça uma lista dos átomos (elementos e módulos do site)&lt;/li&gt;
&lt;li&gt;Organize isso em organismos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Visual Inventory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Normalmente designers tem questões sobre cores, tipografia, conceitos, metáforas. São perguntas normais na hora da produção.&lt;/li&gt;
&lt;li&gt;Tenha uma inventário visual do cliente e veja se as partes combinam, se elas trabalham juntas, se elas se conversam. Fazendo assim você consegue entender se algo precisa mudar para trabalhar melhor seu layout.&lt;/li&gt;
&lt;li&gt;As cores serão flat? Saturadas, Monocromatico?&lt;/li&gt;
&lt;li&gt;O Conceito será mais narrativa, será um caso de estudo direcionado?&lt;/li&gt;
&lt;li&gt;O tom precisa ser mais profissional? Mais engraçado? Mais básico?&lt;/li&gt;
&lt;li&gt;Comece com as fonts: sempre comece com a tipografia. Em telas pequenas, muitos dos modelos visuais podem ter problemas críticos de font.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-sketch&#34;&gt;3. Sketch&lt;/h3&gt;

&lt;p&gt;Explore ideias de modo rápido e rascunhado&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content reference wireframees&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Livro &amp;#8211; Responsive Design Workkflow &amp;#8211; Stephen Way&lt;/li&gt;
&lt;li&gt;liste as coisas que precisam estar na página. Depois organize blocos em uma página, dando prioridades para essas coisas Lembre-se que nem sempre o primeiro é o mais importante ou precisa ser maior que outras áreas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Element Collages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transform frases poderosas em ancoras visuais.&lt;/li&gt;
&lt;li&gt;Desenhe elementos e comece a colocá-los em uma mesma página no photoshop e veja como eles se comportam.&lt;/li&gt;
&lt;li&gt;Crie entregáveis que permitam revelar partes do processo de design para os clientes.&lt;/li&gt;
&lt;li&gt;É óbvio que isso não será um website. Mas você consegue ver como pode ser um website vendo a combinação dos elementos e como eles se comportam juntos.&lt;/li&gt;
&lt;li&gt;Para que o cliente não entenda que isso é um website, faça uma espécie de cartilha horizontal, mostrando todos os elementos e opções alternativas de cores e formas.&lt;/li&gt;
&lt;li&gt;&amp;#8220;Element collages are like giving your client a peek at all those hidden layers&amp;#8221; Paul Lloyd&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prototypes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protótipos de funcionalidades devem resolver um problema, específico, e só aquele problema.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;assemble&#34;&gt;Assemble&lt;/h3&gt;

&lt;p&gt;Colocando tudo junto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Presets&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Um template é como um preset (conjunto de &amp;#8220;configurações&amp;#8221; já preparado) é a junção de módulos e organismos. Princípio do Design Atomico&lt;/li&gt;
&lt;li&gt;Fazer presets ajuda a criar templates modulares e fáceis de manter.&lt;/li&gt;
&lt;li&gt;Responsive Design não é difícil mas traz muitos desafios que sempre estavam lá: performance, workflows, accessibility, benefícios para o negócio.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Fault Tolerance: a base do Progressive Enhancement</title>
      <link>http://tableless.com.br/faut-tolerant-base-progressive-enhancement/</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/faut-tolerant-base-progressive-enhancement/</guid>
      <description>

&lt;p&gt;Fault Tolerance é como as máquinas tratam um erro quando ele acontece. É a habilidade do sistema continuar em operação quando uma falha inesperada ocorre. Isso &lt;a href=&#34;http://super.abril.com.br/ciencia/revolucao-cerebro-446545.shtml&#34;&gt;acontece a todo momento com seu cérebro&lt;/a&gt;. O sistema não pode parar até que esse erro seja resolvido, logo o sistema dá um jeito para que esse erro não afete todo o resto do sistema. A natureza inteira trabalha dessa forma. Os browsers trabalham dessa forma. É por isso que você consegue testar as coisas maravilhosas do CSS3 e do HTML5 sem se preocupar com browsers antigos.&lt;/p&gt;

&lt;h2 id=&#34;já-temos-as-vantagens-do-fault-tolerance-desde-o-início&#34;&gt;Já temos as vantagens do fault tolerance desde o início&lt;/h2&gt;

&lt;p&gt;Por exemplo, quando escrevemos uma propriedade de CSS que o browser não reconhece, ele simplesmente ignora aquela linha e passa para a próxima. Isso acontece o tempo inteiro quando aplicamos novidades do CSS ou do HTML. Lembra-se quando os browsers não reconheciam os novos tipos de campos de formulários do HTML5? O browser simplesmente substituía o campo desconhecido pelo campo comum de texto.&lt;/p&gt;

&lt;p&gt;Isso é importante por que o que se faz hoje no desenvolvimento de um website, continuará funcionando de alguma forma daqui 10 anos. Como os browsers tem essa tolerância a falhas, linguagens como HTML e CSS ganham poder para evoluir o tempo inteiro, sem os bloqueios das limitações do passado.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fault Tolerance é como as máquinas tratam um erro quando ele acontece.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Entender a importância do Fault Tolerance é a chave para entender o Progressive Enhancement. Na verdade o Progressive Enhancement não seria possível se essa tolerância de falhas não existisse em browsers e outros meios de acesso.&lt;/p&gt;

&lt;h2 id=&#34;tudo-sobre-acessibilidade&#34;&gt;Tudo sobre acessibilidade&lt;/h2&gt;

&lt;p&gt;Fundamentalmente, Progressive Enhancement é tudo sobre acessibilidade. Na verdade o termo acessibilidade é normalmente usado para indicar que o conteúdo deve ser acessível para pessoas com necessidades especiais. O progressive enhancement trata isso mas na ótica de que todo mundo tem necessidades especiais e por isso o acesso ao conteúdo deveria ser facilitado para qualquer pessoa em qualquer tipo de contexto. Isso inclui facilmente pessoas que acessam websites via smartphones, por exemplo, onde a tela é pequena e algumas das facilidades que existem no desktops estão ausentes.&lt;/p&gt;

&lt;h2 id=&#34;níveis-de-tolerância&#34;&gt;Níveis de tolerância&lt;/h2&gt;

&lt;p&gt;Nós passamos por alguns níveis ao desenvolver algo tendo como método o Progressive Enhacement. Esses níveis tem como objetivo sempre servir primeiro o conteúdo e depois todas as funcionalidades e comportamentos que podem melhorar o consumo deste conteúdo e também de toda a página.&lt;/p&gt;

&lt;p&gt;A base para tolerar erros é sempre manter um fallback quando algo ruim acontecer. A primeira camada geralmente é dar um fallback básico, conhecido pela maioria dos dispositivos. Esse fallback geralmente é servir um conteúdo em forma de texto. Isso é óbvio por que texto é um conteúdo acessível para praticamente qualquer meio de acesso existente hoje. Muitos dos elementos do HTML tem um fallback de texto para casos onde elemento não seja carregado ou não seja reconhecido. Lembra do atributo ALT? Até mesmo nas tags de vídeo e audio, como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;video src=&#34;video.ogg&#34; controls&amp;gt;
  Texto de fallback.
&amp;lt;/video&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A segunda camada é a &lt;strong&gt;semântica&lt;/strong&gt; do HTML. Cada elemento do HTML tem sua função e principalmente seu significado. Eles acrescentam significados a qualquer informação exibida pelo HTML e muitas vezes estendem o significado que o texto sozinho não conseguiria.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Texto é universal.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A terceira camada de experiência é a camada visual, onde o CSS e também as imagens, audios e vídeos são as responsáveis. É onde a coisa fica bonita e interativa. Aqui você sente mais a tolerância dos browsers a falhas. Usamos o tempo inteiro propriedades que nos ajudarão a melhorar a implementação de layouts, mas que em browsers antigos podem não ser renderizados. Experimentamos isso a todo momento.&lt;/p&gt;

&lt;p&gt;A quarta camada é a camada de interatividade ou comportamento. O Javascript toma conta dessa parte controlando os elementos do HTML, muitas vezes controlando propriedades do CSS para realizar ações de acordo com as interações do usuário.&lt;/p&gt;

&lt;p&gt;A camada final é uma extensão da semântica dos elementos do HTML. Aí é onde inserimos as iniciativas de WAI-ARIA. É onde vamos guiar leitores de telas e outros meios de acesso para elementos e pontos importantes na estrutura que o layout se baseia. Indicando quais regiões e elementos são referência de navegação.&lt;/p&gt;

&lt;p&gt;Nós sempre podemos resumir as camadas em 3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Camada de conteúdo:&lt;/strong&gt; HTML semântico e rico com WAI-ARIA e tags corretas;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Camada de formatação:&lt;/strong&gt; CSS e estilos;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Camada de comportamento:&lt;/strong&gt; Javascript;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adaptive-web-design&#34;&gt;Adaptive Web Design&lt;/h2&gt;

&lt;p&gt;Responsive design é bacana, coisa linda de Deus. Mas ainda está longe de ser algo que seja a solução para todos os problemas. Tudo está caminhando para algo mais flexível. A ideia do Responsive é muito, muito legal quando é aplicado a websites de conteúdo, blogs, websites institucionais, pequenos portais e etc. Mas quando vamos ambientes mais complexos, como fazer o administrativo de um produto, você tem elementos burocráticos difíceis de adequarmos em todas as telas.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fault Tolerance deve ser levado em conta em todos os seus projetos web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A ideia do Adaptive Web Design é que você entregue exatamente a melhor experiência que o usuário pode receber no contexto em que ele se encontra. A palavra &amp;#8220;contexto&amp;#8221; tem sido muito usada quando conversamos sobre mobilidade. Contexto significa todo o ambiente e a forma com que seu usuário está consumindo o seu conteúdo naquele momento. Ele pode estar parado em um ônibus cheio, ou andando enquanto procura uma informação&amp;#8230; Ele pode estar assistindo TV ou cozinhando. Cada contexto influência em como ele vai consumir seu conteúdo. Não existe maneira de adaptar o conteúdo e as formas de uso para cada um dos tipos de contexto. Por esse motivo, a única saída de ter certeza (ou o máximo de certeza) é deixar as coisas simples.&lt;/p&gt;

&lt;p&gt;Há diversas maneiras de se fazer isso, mas antes que façamos soluções mirabolantes, temos que ter em mente que boa parte do trabalho já é feito pelos browsers e que podemos nos ater ao simples. Você não pode esperar que o usuário de mobile use seu site em um celular da mesma maneira que ele o usa em um Desktop. É por isso que você adapta elementos e a estrutura.&lt;/p&gt;

&lt;p&gt;Fault Tolerance deve ser levado em conta em todos os seus projetos web. Pensar assim te dá flexibilidade para avançar corrigindo problemas sem prejudicar todo o processo.&lt;/p&gt;

&lt;h4 id=&#34;leia-mais&#34;&gt;Leia mais&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/bem-vindo-a-xangrila-parte-1/&#34; title=&#34;Bem vindo a Xangri-lá – Parte 1&#34;&gt;Sobre Progressive Enhancement &amp;#8211; Bem vindo a Xangrilá &amp;#8211; Parte 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.techrepublic.com/blog/web-designer/understanding-progressive-enhancement-techniques-in-web-design/1809/&#34;&gt;Understanding Progressive Enhancement Techniques in Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.techrepublic.com/blog/web-designer/what-is-the-difference-between-responsive-vs-adaptive-web-design/&#34;&gt;What is the difference between Responsive e Adaptive Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.searchenginepeople.com/blog/the-difference-between-adaptive-design-and-responsive-design.html&#34;&gt;The difference between adaptive design and Responsive Deisgn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>O Cenário do Web Design Responsivo</title>
      <link>http://tableless.com.br/o-cenario-do-web-design-responsivo/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-cenario-do-web-design-responsivo/</guid>
      <description>

&lt;p&gt;O Web design responsivo está por aí há alguns anos, e foi destaque em 2012. Muitas estrelas da web, como Brad Frost e Luke Wroblewski, possuem vasta experiência neste tema e têm nos ajudado a fazer grandes melhorias. &lt;strong&gt;Mesmo assim, ainda há muito a ser feito&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Neste artigo, vamos ver o que já é possível fazer hoje, o que será possível no futuro &amp;#8211; usando propriedades ainda não padronizadas (como CSS nível 4 e API&amp;#8217;s do HTML5) &amp;#8211; e o que ainda precisa ser melhorado. Este não é um artigo tão completo, por isso não entraremos a fundo em cada técnica, entretanto, você terá links e referências para explorar por conta própria.&lt;/p&gt;

&lt;h2 id=&#34;o-cenário-das-imagens-no-web-design-responsivo&#34;&gt;O Cenário das Imagens no Web Design Responsivo&lt;/h2&gt;

&lt;p&gt;Há um aspecto melhor para começar a falar no web design responsivo que não seja imagens? Este até agora tem sido o tópico principal. E fica cada vez mais importante com a chegada das telas de alta densidade. E quando digo alta densidade, quero dizer telas com uma proporção de pixel maior que 2; esses dispositivos são chamados pela Apple de tela retina, e pelo Google de XHDPI. No web design responsivo, as imagens vem relacionadas a dois grandes desafios: tamanho e desempenho.&lt;/p&gt;

&lt;p&gt;A maioria dos designers buscam a perfeição no pixel, porém imagens de tamanho &amp;#8220;normal&amp;#8221; em dispositivos de alta densidade aparecem pixeladas e borradas. Servir imagens com o dobro do tamanho a esses dispositivos parece ser tentador não é mesmo? No entanto, isso pode criar um problema de performance, pois imagens com o dobro do tamanho levam mais tempo para carregar, e usuários de dispositivos com alta densidade de pixels nem sempre tem a largura de banda necessária para fazer o download dessas imagens. Além disso, dependendo do país em que o usuário vive, esta largura de banda pode ser bem cara.&lt;/p&gt;

&lt;p&gt;O segundo problema afeta dispositivos menores: Por que um dispositivo teria que fazer o download de uma imagem de 700 pixels quando ele só necessita de uma de 300? Teríamos uma maneira de &amp;#8220;cropar&amp;#8221; essas imagens para que usuários de dispositivos menores possam focar no que realmente importa a eles?&lt;/p&gt;

&lt;h3 id=&#34;duas-soluções-de-marcação-o-elemento-picture-e-o-atributo-srcset&#34;&gt;Duas soluções de marcação: O elemento &lt;picture&gt; e o atributo srcset&lt;/h3&gt;

&lt;p&gt;O primeiro passo para resolver o desafio de imagens responsivas é mudar a marcação das imagens embutidas em uma página HTML.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://responsiveimages.org/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Responsive Images Community Group&amp;#8221;&lt;/a&gt; apoia a proposta de um elemento novo e mais flexível, o elemento &lt;a href=&#34;http://picture.responsiveimages.org/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;picture&lt;/em&gt;&lt;/a&gt;. O conceito é usar as já tão conhecidas media queries para &lt;strong&gt;servir imagens diferentes a diferentes dispositivos&lt;/strong&gt;. Assim, dispositivos menores receberiam imagens menores. Funciona um pouco como a marcação para vídeo, mas com imagens diferentes sendo refenciadas no elemento de origem.&lt;/p&gt;

&lt;p&gt;O código na especificação proposta fica da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture width=&#34;500&#34;  height=&#34;500&#34;&amp;gt;     
  &amp;lt;source  media=&#34;(min-width: 45em)&#34; src=&#34;large.jpg&#34;&amp;gt;
  &amp;lt;source  media=&#34;(min-width: 18em)&#34; src=&#34;med.jpg&#34;&amp;gt;
  &amp;lt;source  src=&#34;small.jpg&#34;&amp;gt;
  &amp;lt;img  src=&#34;small.jpg&#34; alt=&#34;&#34;&amp;gt;
  &amp;lt;p&amp;gt;Accessible  text&amp;lt;/p&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Se oferecer fontes diferentes para imagens é possível, poderíamos também imaginar o fornecimento de imagens com &lt;strong&gt;recortes diferentes&lt;/strong&gt; e focar naquilo que realmente importa aos dispositivos menores. O tópico &lt;a href=&#34;http://usecases.responsiveimages.org/#art-direction&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Art Direction&amp;#8221;&lt;/a&gt; da W3C mostra um belo exemplo do que poderia ser feito.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110231.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110231.jpg?itok=65RrJGnF&#34; width=&#34;433&#34; height=&#34;475&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Imagem: &lt;a href=&#34;http://www.flickr.com/photos/egorick/3754608666/&#34; target=&#34;_blank&#34;&gt;Egor Pasko&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A solução vem sendo discutida pelo &lt;a href=&#34;http://www.w3.org/community/respimg/&#34; target=&#34;_blank&#34;&gt;W3C Responsive Images Community Group&lt;/a&gt; mas, até onde sabemos, ainda não é utilizável por nenhum browser. Um polyfill chamado &lt;a href=&#34;https://github.com/scottjehl/picturefill&#34; target=&#34;_blank&#34;&gt;Picturefill&lt;/a&gt; está disponível, e faz praticamente a mesma coisa. Utiliza uma div e um atributo na sintaxe por questões de segurança.&lt;/p&gt;

&lt;p&gt;A segunda proposta para a marcação de imagens responsivas foi feita pela Apple para a W3C e é chamada de &amp;#8220;atributo srcset&amp;#8221;; Ela é equivalente ao image-set() (propriedade CSS nível 4). A proposta deste atributo é forçar os navegadores a selecionar um recurso apropriado do set, ao invés de baixar o conjunto.&lt;/p&gt;

&lt;p&gt;A sintaxe HTML para esta proposta se baseia na própria tag &lt;em&gt;img&lt;/em&gt;, e o exemplo na especificação fica desta forma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img  alt=&#34;The Breakfast Combo&#34; 
  src=&#34;banner.jpeg&#34;
  srcset=&#34;banner-HD.jpeg  2x, banner-phone.jpeg 100w, banner-phone-HD.jpeg 100w 2x&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Como você pode ver a &lt;strong&gt;sintaxe não é não é tão intuitiva&lt;/strong&gt;. Os valores da tag consistem em uma string separada por vírgulas. Os valores do atributo são os nomes ou URL&amp;#8217;s de várias imagens, a densidade de pixels do dispositivo e o tamanho máximo da viewport a que se destina.&lt;/p&gt;

&lt;p&gt;Numa linguagem clara, o que o trecho acima diz é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A imagem padrão é &lt;em&gt;banner.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;O dispositivo que tiver um pixel ratio maior do que 2 deve usar o &lt;em&gt;banner-HD.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Dispositivos com um tamanho máximo da viewport de &lt;em&gt;100w&lt;/em&gt; deve utilizar o &lt;em&gt;banner-phone.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Dispositivos com um tamanho máximo da viewport de &lt;em&gt;100w&lt;/em&gt; e um pixel ratio maior que 2 devem utilizar o &lt;em&gt;banner-phone-HD.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caso o atributo &lt;em&gt;srcset&lt;/em&gt; não seja suportado, a primeira fonte é a imagem padrão. O sufixo &lt;em&gt;2x&lt;/em&gt; para o &lt;em&gt;banner-HD.jpeg&lt;/em&gt; significa que esta imagem em particular deveria ser usada para dispositivos com um pixel ratio maior que 2, e o &lt;em&gt;100w&lt;/em&gt; no &lt;em&gt;banner-phone.jpeg&lt;/em&gt; representa o tamanho mínimo da viewport em que esta imagem deve ser utilizada. &lt;strong&gt;Devido a sua complexidade&lt;/strong&gt;, a sintaxe do atributo srcset ainda não foi implementada nos navegadores.&lt;/p&gt;

&lt;p&gt;A sintaxe da propriedade CSS &lt;em&gt;image-set()&lt;/em&gt; funciona praticamente da mesma forma e permite que você carregue uma determinada imagem de background tendo como base a resolução da tela:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: image-set(  &#34;foo.png&#34; 1x,
  &#34;foo-2x.png&#34;  2x,
  &#34;foo-print.png&#34;  600dpi );
&lt;/pre&gt;

&lt;p&gt;Esta proposta ainda esta em fase de projeto na W3C, e por enquanto funciona no Safari (6+) e no Chrome (21+).&lt;/p&gt;

&lt;h3 id=&#34;formatos-de-imagem-compressão-e-svg-a-mudança-de-como-trabalhamos-com-imagens-na-web&#34;&gt;Formatos de Imagem, Compressão e SVG: A mudança de como trabalhamos com imagens na web.&lt;/h3&gt;

&lt;p&gt;Como podem ver, as tentativas em encontrar um novo formato de marcação para imagens ainda são altamente experiementais.Isto por si só levantou uma questão sobre formatos de imagens. Podemos conceber uma solução responsiva para mudar a forma como lidamos com eles?&lt;/p&gt;

&lt;p&gt;O primeiro passo seria buscar formatos alternativos de imagens que tenham uma melhor taxa de compressão. O Google, por exemplo, desenvolveu um &lt;strong&gt;novo formato de imagem&lt;/strong&gt; chamado &lt;a href=&#34;https://developers.google.com/speed/webp/&#34; target=&#34;_blank&#34;&gt;WebP&lt;/a&gt;, o qual é 26% menor que o PNG e 25 a 34% menor que o JPEG. O formato é suportado pelo Chrome, Opera, Yandex, Android e Safari, e pode ser ativado no Internet Explorer usando o &lt;a href=&#34;http://www.google.com/chromeframe?quickenable=true&#34; target=&#34;_blank&#34;&gt;Google Chrome Frameplugin&lt;/a&gt;. O problema principal deste formato é que o firefox não tem planos de implementá-lo. Sabendo disto, por enquanto, o seu uso generalizado é improvável.&lt;/p&gt;

&lt;p&gt;Outra ideia que está ganhando popularidade são as &lt;strong&gt;imagens JPEG progressivas&lt;/strong&gt;. Estas imagens são, como o nome sugere, progressivamente renderizadas. A primeira renderização é embaçada, então a imagem vai progressivamente ganhando nitidez. Já as imagens JPEG não-progressivas são renderizadas de cima pra baixo. Em seu artigo &lt;a href=&#34;http://calendar.perfplanet.com/2012/progressive-jpegs-a-new-best-practice/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;JPEG&amp;#8217;s progressivos: Uma nova boa prática&amp;#8221;&lt;/a&gt;, Ann Robson afirma que o JPEG progressivo aparenta ser mais veloz que o JPEG baseline. Um JPEG progressivo dá ao usuário uma impressão geral sobre a imagem antes mesmo de ela ser totalmente carregada, o que beneficia a experiência do usuário.&lt;/p&gt;

&lt;p&gt;Uma outra solução aos problemas de performance e tamanho de imagem está em &lt;strong&gt;alterar a taxa de compressão das imagens&lt;/strong&gt;. Durante muito tempo, pensamos que o alargamento da taxa de compressão de uma imagem prejudicaria a sua qualidade. Entretanto, Daan Jobsis fez uma extensa pesquisa sobre o assunto e escreveu um artigo a respeito chamado &lt;a href=&#34;http://blog.netvlies.nl/design-interactie/retina-revolution/&#34;&gt;&amp;#8220;Retina Revolution&amp;#8221;&lt;/a&gt;. Em seus experimentos, ele testou diferentes tamanhos de imagens e taxas de compressão, o que gerou uma solução muito interessante. Se você dobrar o tamanho de uma imagem, mas também usar uma taxa de compressão mais alta, a imagem terá um arquivo com um tamanho menor que o original, mas ainda serão nítidas em telas normais e de alta densidade. Com esta técnica, Jobsis reduziu em 75% o peso da imagem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110629.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Demonstração de compressão de imagens por Daan Jobsis.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110629.jpg?itok=DCu9elrj&#34; width=&#34;473&#34; height=&#34;242&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dadas as dores de cabeça das imagens responsivas, a ideia de ganhar a independência do pixel a partir de imagens, sempre que possível, está seduzindo cada vez mais designers e desenvolvedores. O formato SVG, por exemplo, pode ser usado para criar todos os elementos da interface de um website &lt;a style=&#34;line-height: 1.538em&#34; href=&#34;http://coding.smashingmagazine.com/2012/01/16/resolution-independence-with-svg/&#34; target=&#34;_blank&#34;&gt;independente da resolução&lt;/a&gt;. Os elementos serão dimensionados para dispositivos menores e não ficarão pixelados nos dispositivos de alta densidade de pixels. &lt;a style=&#34;line-height: 1.538em&#34; href=&#34;http://css-tricks.com/using-fonts-for-icons/&#34; target=&#34;_blank&#34;&gt;Font icons&lt;/a&gt; são outra tendência crescente. Eles envolvem o uso de uma fonte, onde os caracteres alfanuméricos são substituídos por ícones glifos, dando a flexibilidade que uma fonte oferece. Infelizmente, esta solução ainda não funciona com imagens, o que faz com que seja ansiosamente esperado uma marcação ou formato de imagem viável.&lt;/p&gt;

&lt;h2 id=&#34;o-desafio-do-layout-responsivo-reorganizar-e-trabalhar-o-conteúdo-sem-tocar-no-html&#34;&gt;O Desafio do Layout Responsivo: Reorganizar e Trabalhar o Conteúdo sem Tocar no HTML?&lt;/h2&gt;

&lt;p&gt;Sejamos realistas, os grids fluidos usados atualmente, produzidos com floats e blocos inline, são um pobre improviso aguardando uma solução melhor. Trabalhar com o layout e rearranjar blocos numa página mobile sem recorrer ao JavaScript hoje em dia é um pesadelo, e não é nem um pouco flexível. Isto é algo crucial a websites criados com CMS, onde o designer não pode alterar o HTML de cada página ou versão do site.&lt;/p&gt;

&lt;p&gt;E aí, como isto pode ser melhorado?&lt;/p&gt;

&lt;h3 id=&#34;quatro-soluções-com-css3-que-abordam-o-problema-do-layout-flexível&#34;&gt;Quatro Soluções com CSS3 que abordam o problema do Layout Flexível&lt;/h3&gt;

&lt;p&gt;A solução mais óbvia possível é o &lt;a href=&#34;http://www.w3.org/TR/css3-flexbox/&#34; target=&#34;_blank&#34;&gt;modelo de box flexível do CSS3&lt;/a&gt; (ou &lt;strong&gt;flexbox&lt;/strong&gt;). Seu status atual é a de &amp;#8220;candidato a recomendação&amp;#8221; na W3C, e é suportado pela &lt;a href=&#34;http://caniuse.com/#feat=flexbox&#34; target=&#34;_blank&#34;&gt;maioria dos browsers mobile e desktop&lt;/a&gt; (no IE começou na versão 10). O model permite reorganizar facilmente os elementos na tela, independente do HTML. Você também pode alterar o fluxo e a orientação do box, distribuir o espaço e alinhá-lo de acordo com o contexto. Abaixo um exemplo de layout que poderia ser reorganizado para mobile. A sintaxe ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.parent {
   display: flex;
   flex-flow: column; /* exibe itens na coluna */
}

.children {
   order: 1; /* muda a ordem dos elementos */
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110724.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110724.jpg?itok=jmzs81k7&#34; width=&#34;479&#34; height=&#34;297&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O artigo &lt;a href=&#34;http://coding.smashingmagazine.com/2011/09/19/css3-flexible-box-layout-explained/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;CSS3 Flexible Box Layout Explained&amp;#8221;&lt;/a&gt; dará a você uma compreensão mais profunda de como o flexbox funciona. (nota do tradutor: o bbburp traduziu um &lt;a href=&#34;http://www.bbburp.com.br/artigos/layout-com-flexbox-e-como-tirar-doce-de-crianca&#34; target=&#34;_blank&#34;&gt;excelente artigo sobre flexbox&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Outra solução bastante próxima do conceito flexbox de reordenação de blocos na página, porém com JavaScript, é o &lt;a href=&#34;https://github.com/edenspiekermann/minwidth-relocate&#34; target=&#34;_blank&#34;&gt;Relocate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um segundo tipo de layout, que hoje em dia é bastante utilizado no design responsivo, é o &lt;strong&gt;layout multiple-column do CSS3&lt;/strong&gt;. O módulo está no estágio de &amp;#8220;candidato a recomendação&amp;#8221; na W3C, e &lt;a href=&#34;http://www.w3.org/TR/css3-multicol/&#34; target=&#34;_blank&#34;&gt;funciona muito bem na maioria dos browsers&lt;/a&gt; (aguardado para IE9 e abaixo). A principal vantagem deste model é que o conteúdo pode fluir de uma coluna a outra, proporcionando um ganho enorme na flexibilidade. No que diz respeito a responsividade, o número de colunas pode ser alterado de acordo com o tamanho da viewport.&lt;/p&gt;

&lt;p&gt;É possível apenas ajustar o tamanho das colunas e deixar com que o browser calcule o seu número de acordo com o espaço disponível. Também é possível ajustar o número de colunas, com gaps e regras entre elas, e deixar que o browser calcule a sua largura.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110803.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110803.jpg?itok=1MS5s-6X&#34; width=&#34;477&#34; height=&#34;297&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A sintaxe se parece com isto:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container {
   column-width: 10em ;
   /* O browser vai criar uma coluna de 10em.
   O número de colunas vai depender dos espaço disponível */
}

.container {
   columns: 5;
   /* O browser vai criar 5 colunas.
   O tamanho das colunas vai depender do espaço disponível. */
   column-gap: 2em;
}
&lt;/pre&gt;

&lt;p&gt;Para aprender mais, leia o artigo de David Walsh: &lt;a href=&#34;http://davidwalsh.name/css-columns&#34; target=&#34;_blank&#34;&gt;“CSS Columns”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Uma terceira propriedade CSS3 que pode ganhar mais atenção no futuro é a &lt;a href=&#34;http://dev.w3.org/csswg/css-grid/&#34; target=&#34;_blank&#34;&gt;CSS3 grid layout&lt;/a&gt;. Esta propriedade dá a designers e desenvolvedores um &lt;strong&gt;grid flexível&lt;/strong&gt;, onde eles podem trabalhar com na criação de layouts diferentes. Ela permite que os elementos de conteúdo sejam exibidos nas linhas e colunas sem uma estrutura definida. Primeiro você deve declarar um grid no container, e então colocar todos os elementos filhos neste grid virtual. Você pode, então, definir um grid diferente para dispositivos menores ou alterar a posição dos elementos no grid. Isto gera uma enorme flexibilidade quando usado com media queries, em mudanças de orientação, etc.&lt;/p&gt;

&lt;p&gt;A sintaxe para esta propriedade é assim (projeto de trabalho no W3C &amp;#8211; working draft &amp;#8211; a partir de 2 de abril de 2013):&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.parent {
   display: grid; /* declare o grid */
   grid-definition-columns: 1stgridsize  2ndgridsize …;
   grid-definition-rows: 1strowsize  2ndrowsize …;
}

.element {
   grid-column: 1;
   grid-row: 1;
}

.element2 {
   grid-column: 1; 
   grid-row: 3;
}
&lt;/pre&gt;

&lt;p&gt;Para definir o tamanho das linhas e colunas você pode usar diversas unidades, conforme &lt;a href=&#34;http://www.w3.org/TR/css3-grid-layout/#grid-definition-columns&#34;&gt;detalhado na especificação&lt;/a&gt;. Para posicionar os elementos, a especificação diz o seguinte: &amp;#8220;Cada parte está posicionada entre as linhas do grid, fazendo referência a linha de grid inicial e então especificando, se houver mais de uma, o número de linhas ou colunas distribuídas para determinar a linha de grid final, delimitando a área do layout&amp;#8221;.&lt;/p&gt;

&lt;p&gt;O maior problema com esta propriedade é que é &lt;a href=&#34;http://caniuse.com/#feat=css-grid&#34; target=&#34;_blank&#34;&gt;suportada apenas pelo IE10&lt;/a&gt;. Para aprender mais sobre este layout, leia o artigo &amp;#8220;&lt;a href=&#34;http://24ways.org/2012/css3-grid-layout/&#34; target=&#34;_blank&#34;&gt;Giving Content Priority With CSS3 Grid Layout&lt;/a&gt;&amp;#8221; de Rachel Andrew. Além disso, note que a especificação e a sintaxe para grid layouts com CSS foi alterada no dia 2 de abril de 2013. Andrew escreveu uma atualização sobre a sintaxe, a qual foi intitulada de &lt;a href=&#34;http://www.rachelandrew.co.uk/archives/2013/04/10/css-grid-layout---what-has-changed/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;CSS Grid Layout: What Has Changed?&amp;#8221;&lt;/a&gt; (CSS Grid Layout: O que mudou?).&lt;/p&gt;

&lt;p&gt;O último layout, que pode tornar-se bastante útil no futuro se implementado nos browsers, é o &lt;a href=&#34;http://www.w3.org/TR/2009/WD-css3-layout-20090402/&#34; target=&#34;_blank&#34;&gt;CSS3 template layout&lt;/a&gt;. Este módulo CSS3 funciona associando um elemento ao &amp;#8220;nome&amp;#8221; do layout, e em seguida ordenando os elementos num grid invisível. O grid pode ser fixo ou flexível, e pode ser alterado de acordo com o tamanho da viewport.&lt;/p&gt;

&lt;p&gt;A sintaxe fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.parent {
   display: &#34;ab&#34;
            &#34;cd&#34;; /* criando um grid invisível */
}

.child1 {
   position: a;
}

.child2 {
   position: b;
}

.child3 {
   position: c;
}

.child4 {
   position: d;
}
&lt;/pre&gt;

&lt;p&gt;E é renderizado assim:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110848.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110848.jpg?itok=y7SmFn5a&#34; width=&#34;477&#34; height=&#34;297&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Infelizmente, o suporte a navegadores para este módulo é praticamente nulo. Talvez algum dia, se designers e desenvolvedores mostrarem interesse suficiente nesta especificação, algum fabricante de browser possa implementá-lo. Por enquanto, você pode testá-lo usando &lt;a href=&#34;https://code.google.com/p/css-template-layout/&#34; target=&#34;_blank&#34;&gt;um polyfill&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;unidades-relativas-da-viewport-e-o-fim-do-layout-baseado-em-pixels&#34;&gt;Unidades Relativas da Viewport e o fim do Layout baseado em pixels&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/css3-values/#viewport-relative-lengths&#34; target=&#34;_blank&#34;&gt;Medidas de comprimento baseadas na viewport&lt;/a&gt; &amp;#8211; &lt;em&gt;vw&lt;/em&gt;, &lt;em&gt;vh&lt;/em&gt;, &lt;em&gt;vm&lt;/em&gt;, &lt;em&gt;vmin&lt;/em&gt; e &lt;em&gt;vmax&lt;/em&gt; &amp;#8211; são unidades de medida relativa das dimensões da própria viewport.&lt;/p&gt;

&lt;p&gt;Uma unidade vw é igual a 1% da largura do bloco inicial que a contém. Se a largura da viewport é 320, então 1&lt;em&gt;vw&lt;/em&gt; é 1 x &lt;sup&gt;320&lt;/sup&gt;&amp;frasl;&lt;sub&gt;100&lt;/sub&gt; = 3.2 pixels.&lt;/p&gt;

&lt;p&gt;A unidade vh funciona da mesma maneira, mas é relativa a altura da viewport. Desta forma, 50 &lt;em&gt;vh&lt;/em&gt; equivale a 50% da altura do documento. A esta altura você pode se perguntar qual a diferença desta unidade para a percentual. A diferença é que enquanto a unidade percentual é relativa ao tamanho do elemento pai, as unidades &lt;em&gt;vh&lt;/em&gt; e &lt;em&gt;vw&lt;/em&gt; serão sempre relativas ao tamanho da viewport, independente do tamanho dos seus elementos-pai.&lt;/p&gt;

&lt;p&gt;Isso fica bem interessante quando você quer, por exemplo, criar um container e ter a certeza de que ele nunca se extenderá abaixo da altura do viewport para que o usuário não precise rolar a página para baixo para achar o conteúdo.  Também possibilita que criemos um elemento com 100% da altura sem alterar todos os containers pai.&lt;/p&gt;

&lt;p&gt;A unidade &lt;em&gt;vmin&lt;/em&gt; é igualada ao menor valor da unidade &lt;em&gt;vm&lt;/em&gt; ou &lt;em&gt;vh&lt;/em&gt;, e &lt;em&gt;vmax&lt;/em&gt; ao maior valor; por isso, essas unidades também respondem perfeitamente às alterações na orientação dos dispositivos. Infelizmente, por enquanto, &lt;a href=&#34;http://caniuse.com/#feat=viewport-units&#34; target=&#34;_blank&#34;&gt;essas unidades não são suportadas pelo browser do Android&lt;/a&gt;. Sendo assim, pode ser que você ainda tenha que aguardar um tempo para utilizá-las.&lt;/p&gt;

&lt;h3 id=&#34;uma-palavra-sobre-tipografia-adaptável-adaptive-typography&#34;&gt;Uma Palavra sobre Tipografia Adaptável (Adaptive Typography)&lt;/h3&gt;

&lt;p&gt;O layout de um site vai depender muito do conteúdo. Não posso concluir uma seção que fala sobre as diversas possibilidades do layout responsivo sem abordar a tipografia. O CSS3 introduziu uma unidade para fontes que pode ser bastante útil a tipografia responsiva: &lt;a href=&#34;http://www.w3.org/TR/css3-values/#font-relative-lengths&#34; target=&#34;_blank&#34;&gt;a unidade “&lt;em&gt;rem&lt;/em&gt;”&lt;/a&gt;. Enquanto as fontes medidas pela unidade “_em_” apresentam um tamanho herdado do seu elemento pai, a fonte medida pela unidade “rem” é relativa ao tamanho da fonte do seu elemento root (ou raiz). Para um site responsivo, você poderia escrever o CSS como o código abaixo, e em seguida alterar o tamanho de todas as fontes simplesmente mudando o tamanho da fonte especificada no elemento &lt;em&gt;html&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;html {
   font-size: 14px;
}

p {
   font-size: 1rem /* isto tem 14px */
}

@media screen and (max-width:380px) {
   html {
      font-size: 12px;
      /* tornando a fonte menor para dispositivos mobile */
   }

   p {
      font-size: 1rem;
      /* isto agora equivale a 12px */
   }
}
&lt;/pre&gt;

&lt;p&gt;Com exceção do IE8 e do Opera mini, o &lt;a href=&#34;http://caniuse.com/#search=rem&#34; target=&#34;_blank&#34;&gt;suporte ao &amp;#8220;&lt;em&gt;rem&lt;/em&gt;&amp;#8220;&lt;/a&gt; é excelente. Para aprender mais sobre a unidade &lt;em&gt;rem&lt;/em&gt;, leia o artigo de Matthew Lettini &lt;a href=&#34;http://techtime.getharvest.com/blog/in-defense-of-rem-units&#34;&gt;&amp;#8220;In Defense of Rem Units&amp;#8221;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-melhor-maneira-de-trabalhar-responsivamente-com-outros-conteúdos-complexos&#34;&gt;A Melhor Maneira de Trabalhar Responsivamente com Outros Conteúdos Complexos&lt;/h2&gt;

&lt;p&gt;Aos poucos vamos ficando cada vez melhor em lidar com imagens e textos em layouts responsivos, embora ainda seja necessário encontrar soluções para outros tipos mais complexos de conteúdo&lt;/p&gt;

&lt;h3 id=&#34;lidando-com-formulários-no-website-responsivo&#34;&gt;Lidando com Formulários no Website Responsivo&lt;/h3&gt;

&lt;p&gt;De um modo geral, lidar com formulários, especialmente os muito grandes, no web design responsivo é um enorme desafio! Quanto maior o formulário, mais complicado será adaptá-lo a dispositivos menores. A adaptação física não é tão difícil; a maioria dos designers simplesmente colocam os elementos do formulário numa única coluna e esticam os inputs completando a largura da tela. Entretanto, fazer formulários visualmente atraentes não é o bastante. Temos que torná-los fáceis de usar também nos dispositivos mobile.&lt;/p&gt;

&lt;p&gt;Para começar, &lt;a href=&#34;http://uxdesign.smashingmagazine.com/2010/03/11/forms-on-mobile-devices-modern-solutions/&#34; target=&#34;_blank&#34;&gt;Luke Wroblewski aconselha&lt;/a&gt; evitar inputs de texto, &lt;strong&gt;contando com checkboxes, radio buttons e menus drop-downs&lt;/strong&gt;, e utilizando o select sempre que possível. Desta forma, o usuário precisa digitar o mínimo de informação. Outra dica é não fazer com que o usuário aperte o botão &amp;#8220;enviar&amp;#8221; antes de obter um feedback sobre o conteúdo a ser submetido. A checagem de erros imediata é extremamente importante no mobile, onde a maioria dos formulários ultrapassa a altura da tela. Se o usuário digitar um campo incorretamente e tiver que enviar o formulário para só assim perceber o erro, provavelmente ele não verá onde o erro está.&lt;/p&gt;

&lt;p&gt;No futuro, novos inputs e atributos HTML5 serão de grande ajuda na melhoria dos formulários, e não haverá a necessidade de utilizar tanto JavaScript. Por exemplo, você poderia usar o &lt;a href=&#34;http://www.w3.org/wiki/HTML5_form_additions#required&#34; target=&#34;_blank&#34;&gt;atributo&lt;/a&gt; &lt;em&gt;required&lt;/em&gt; para dar feedback imediato sobre um campo específico. Infelizmente, por enquanto, &lt;a href=&#34;http://caniuse.com/#search=required&#34; target=&#34;_blank&#34;&gt;o suporte para dispositivos mobile&lt;/a&gt; ainda é ruim. O &lt;a href=&#34;http://www.w3.org/TR/2011/WD-html5-20110525/common-input-element-attributes.html#the-autocomplete-attribute&#34; target=&#34;_blank&#34;&gt;atributo&lt;/a&gt; &lt;em&gt;autocomplete&lt;/em&gt; também poderia ajudar a montar formulários mais responsivos.&lt;/p&gt;

&lt;p&gt;Um smartphone é um bem pessoal, por isso podemos assumir que dados como nome e endereço serão algo consistente. Usando o atributo &lt;em&gt;autocomplete&lt;/em&gt; do HTML5 &lt;strong&gt;poderíamos fazer um auto-preenchimento dos campos&lt;/strong&gt; sem que o usuário tivesse que digitar todas as informações. Há ainda uma &lt;a href=&#34;http://www.w3.org/wiki/HTML5_form_additions#New_form_controls&#34; target=&#34;_blank&#34;&gt;lista inteira de novos inputs HTML5&lt;/a&gt; que podem ser utilizados muito em breve, a fim de tornar os formulários mais responsivos.&lt;/p&gt;

&lt;p&gt;Datas em elementos de formulário são um bom exemplo do que se pode melhorar com o HTML5. Já estamos acostumados a contar com JavaScript ao criar calendários. Eles podem ser muito úteis se utilizados em grandes telas desktop, mas difíceis de usar em dispositivos touch screen, pois selecionar a data certa com o dedo é difícil quando a área sensível ao toque é muito pequena.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110938.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Como posso selecionar uma data se meu dedo está tocando três ao mesmo tempo?&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110938.jpg?itok=sakIwk63&#34; width=&#34;478&#34; height=&#34;248&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uma solução promissora está no novo &lt;em&gt;input type=&amp;#8221;date&amp;#8221;&lt;/em&gt; do HTML5 , que define uma string no formato de data. Já o &lt;em&gt;input type=&amp;#8221;datetime&amp;#8221;&lt;/em&gt; define uma string no formato de data e hora. A grande vantagem deste método é que deixamos o browser decidir qual UI utilizar. Desta forma, a UI é automaticamente otimizada em dispositivos mobile. Abaixo um exemplo da aparência de um &lt;em&gt;input type=&amp;#8221;date&amp;#8221;&lt;/em&gt; no desktop, em smartphone e tablet com Android (com o browser Chrome), Iphone e Ipad.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111218.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Renderização do input input type=&amp;quot;date&amp;quot; em diferentes dispositivos.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111218.jpg?itok=dEKeEFpj&#34; width=&#34;402&#34; height=&#34;478&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note que as screenshots foram feitas em meu browser e no Android phone, então a linguagem foi automaticamente adaptada ao sistema de linguagem (Francês). Ao utilizar componentes nativos, você não precisa mais adaptar a lingua para diferentes versões do site.&lt;/p&gt;

&lt;p&gt;Por enquanto, com exceção do Opera e do Chrome, &lt;a href=&#34;http://caniuse.com/input-datetime&#34; target=&#34;_blank&#34;&gt;não há suporte&lt;/a&gt; ao &lt;em&gt;input type=&amp;#8221;date&amp;#8221;&lt;/em&gt; para o desktop. Browsers nativos do Android ainda não o suportam completamente, mas o Chrome Android sim, e também o Safari para iOS. O fato é que ainda há muito a ser trabalhado para sermos capazes de utilizar esta solução em sites responsivos. Enquanto isto, você pode usar um polyfill como o &lt;a href=&#34;http://demo.mobiscroll.com/calendar/calendartime&#34; target=&#34;_blank&#34;&gt;Mobiscroll&lt;/a&gt; para browsers mobile que não suportarem o atributo nativamente.&lt;/p&gt;

&lt;p&gt;Além destas soluções de inputs HTML5, foram feitas tentativas para melhorar outros padrões de design, como as &lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1653&#34; target=&#34;_blank&#34;&gt;senhas do mobile&lt;/a&gt; e &lt;a href=&#34;http://www.lukew.com/ff/entry.asp?756&#34; target=&#34;_blank&#34;&gt;inputs complexos utilizando máscaras&lt;/a&gt;. Como você pode notar, isto tudo é experimental. O formulário responsivo perfeito não existe no momento; Muito ainda deve ser feito neste campo.&lt;/p&gt;

&lt;h3 id=&#34;lidando-com-tabelas-em-sites-responsivos&#34;&gt;Lidando com Tabelas em Sites Responsivos&lt;/h3&gt;

&lt;p&gt;Outro tipo de conteúdo que fica bastante confuso em sites mobile e responsivos são as tabelas. A maioria das tabelas são orientadas horizontalmente e apresentam uma grande quantidade de dados de uma só vez. Imagine então que exibi-las corretamente em small screens seja bem complicado. Tabelas HTML são bastante flexíveis &amp;#8211; você pode usar porcentagens para mudar a largura das colunas &amp;#8211; o que também pode rapidamente tornar o conteúdo ilegível.&lt;/p&gt;

&lt;p&gt;Ainda não encontraram uma forma perfeita de mostrar tabelas, mas algumas sugestões foram feitas:&lt;/p&gt;

&lt;p&gt;Uma forma de abordagem é &lt;strong&gt;esconder colunas consideradas &amp;#8220;menos importantes&amp;#8221;&lt;/strong&gt;, e oferecer checkboxes para que o usuário escolha quais ele deseja ver. No desktop, todas as colunas seriam mostradas, enquanto no mobile o número de colunas dependeria do tamanho da tela. O Filament Group &lt;a href=&#34;http://filamentgroup.com/lab/responsive_design_approach_for_complex_multicolumn_data_tables/&#34; target=&#34;_blank&#34;&gt;explica este método&lt;/a&gt; e &lt;a href=&#34;http://filamentgroup.com/examples/rwd-table-patterns/&#34; target=&#34;_blank&#34;&gt;demonstra&lt;/a&gt; em um de seus artigos. A solução também é usada no &lt;a href=&#34;http://view.jquerymobile.com/tables/docs/tables/table-column-toggle.html&#34; target=&#34;_blank&#34;&gt;table column toggle do jQuery Mobile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111308.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Alguns exemplos de tabelas responsivas.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111308.jpg?itok=buAWCW1w&#34; width=&#34;479&#34; height=&#34;429&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A segunda abordagem brinca com a ideia de &lt;strong&gt;scroll em tabelas&lt;/strong&gt;. Você poderia &amp;#8220;fixar&amp;#8221; uma única coluna com tamanho fixo a esquerda, e então deixar uma scroll bar numa pequena parte da tabela a direita. &lt;a href=&#34;http://dbushell.com/2012/01/05/responsive-tables-2/&#34; target=&#34;_blank&#34;&gt;David Bushell implementa esta ideia&lt;/a&gt; em um artigo usando CSS para exibir todo o conteúdo da _&lt;/p&gt;

&lt;p&gt;_&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;__ do lado esquerdo da tabela, deixando o usuário mover-se pelo conteúdo a direita através da scroll bar. &lt;strong&gt;Zurb&lt;/strong&gt; utiliza a mesma ideia, mas de um jeito diferente, &lt;a href=&#34;http://zurb.com/playground/responsive-tables&#34; target=&#34;_blank&#34;&gt;neste plug in&lt;/a&gt;. Neste caso, as headers ficam no topo da tabela, e a tabela é duplicada com JavaScript de modo que apenas a primeira coluna seja mostrada a esquerda, e as demais colunas sejam mostradas do lado direito através da scroll bar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111348.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Dois exemplos de tabelas responsivas com scroll&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111348.jpg?itok=2bOK8ygE&#34; width=&#34;477&#34; height=&#34;455&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A grande questão em utilizar scroll bars e propriedades CSS tais como &lt;em&gt;overflow: auto&lt;/em&gt; é que muitos dispositivos mobile e tablets simplesmente não exibem uma scroll bar visível. A área da direita da tabela permite a rolagem, mas o usuário não terá qualquer indício visual desta possibilidade. Precisamos encontrar uma maneira de indicar que há mais conteúdo a ser exibido à direita.&lt;/p&gt;

&lt;p&gt;Uma terceira abordagem é em &lt;strong&gt;reestruturar a tabela e dividir as colunas&lt;/strong&gt; em listas de itens com cabeçalhos.Esta técnica é utilizada no &lt;a href=&#34;http://view.jquerymobile.com/tables/docs/tables/table-reflow.html&#34; target=&#34;_blank&#34;&gt;&amp;#8220;reflow mode&amp;#8221;&lt;/a&gt; no jQuery Mobile e foi explicada por Chris Coyier em seu artigo &lt;a href=&#34;http://css-tricks.com/responsive-data-tables/&#34;&gt;“Responsive Data Tables”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111441.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Reestruturando uma tabela para dispositivos móveis&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111441.jpg?itok=nOmy8Tpm&#34; width=&#34;478&#34; height=&#34;438&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Existem &lt;a href=&#34;http://css-tricks.com/responsive-data-table-roundup/&#34; target=&#34;_blank&#34;&gt;diversas outras técnicas&lt;/a&gt;, e qual usar depende muito do seu projeto. Não há dois projetos iguais, por isso só posso mostrar como outras pessoas estão lidando com isto. Se você chegar a uma boa solução, por favor compartilhe nos comentários, no Twitter ou em qualquer outro lugar. Estamos no mesmo barco, e exibir tabelas no mobile está uma droga (é sério). Então vamos melhorá-las juntos!&lt;/p&gt;

&lt;h2 id=&#34;incorporando-conteúdo-de-terceiros-o-problema-do-iframe-responsivo&#34;&gt;Incorporando Conteúdo de Terceiros: O problema do Iframe Responsivo&lt;/h2&gt;

&lt;p&gt;Muitos desses conteúdos, ao serem incorporados, fazem você utilizar iframes. Mas vamos encarar: lidar com iframes no design responsivo é doloroso. O  grande problema é que iframes exigem largura e altura fixa diretamente no seu código HTML. Forçar uma largura de 100% no iframe deveria resolver, mas daí você perderia a proporção do conteúdo incorporado. Então, para incorporar um vídeo ou slideshow e preservar a proporção original, seria necessário encontrar uma solução alternativa.&lt;/p&gt;

&lt;h3 id=&#34;uma-solução-com-html-e-css&#34;&gt;Uma solução com HTML e CSS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tjkdesign.com/&#34; target=&#34;_blank&#34;&gt;Thierry Koblentz&lt;/a&gt; escreveu um ótimo artigo chamado &lt;a href=&#34;http://alistapart.com/article/creating-intrinsic-ratios-for-video&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Creating Intrinsic Ratios for Vídeo&amp;#8221;&lt;/a&gt; (criando proporções intrínsecas para vídeos), onde ele propõe uma forma de incorporar vídeos responsivos usando uma proporção 16:9. Esta solução pode ser estendida a outros tipos de conteúdos, como apresentações em SlideShare e Google Maps. Koblentz envolve o iframe num container usando uma classe a qual podemos manipular no CSS. O container torna possível o iframe ser redimensionado fluidamente, mesmo tendo um valor fixo de pixels no HTML. O &lt;a href=&#34;http://amobil.se/2011/11/responsive-embeds/&#34; target=&#34;_blank&#34;&gt;código, adaptado por Anders M. Andersen&lt;/a&gt;, fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.embed-container  {
   position: relative;
   padding-bottom: 56.25%; /* 16:9 ratio */
   padding-top: 30px; /* solução para IE 6 */
   height: 0;
   overflow: hidden;
}

.embed-container iframe,
.embed-container object,
.embed-container embed {
   position: absolute;
   top: 0;
   left: 0;
   width: 100%;
   height: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Isto vai funcionar em todos os iframes. O único problema é que você terá que envolver todos os iframes de seu site em um elemento. Enquanto esta técnica funcionaria muito bem para desenvolvedores que tivessem controle total de seu código, ou para clientes que estivessem razoavelmente familiarizados com HTML, não funcionaria com clientes que não tivessem qualquer habilidade técnica. Você poderia, é claro, usar JavaScript para detectar os elementos iframe e automaticamente incorporá-los na classe, mas como podemos ver, seria uma grande solução, mas não a solução perfeita.&lt;/p&gt;

&lt;h2 id=&#34;lidando-com-vídeos-responsivos-no-futuro&#34;&gt;Lidando com Vídeos Responsivos no Futuro&lt;/h2&gt;

&lt;p&gt;O HTML5 abre um mundo de possibilidades para o vídeo &amp;#8211; particularmente com o &lt;a href=&#34;http://www.w3.org/wiki/HTML/Elements/video&#34;&gt;elemento video&lt;/a&gt;. A grande notícia é que o &lt;a href=&#34;http://caniuse.com/#feat=video&#34; target=&#34;_blank&#34;&gt;suporte a este elemento é surpreendentemente bom em dispositivos mobile&lt;/a&gt;! Com exceção do Opera Mini, a maioria dos browsers o suportam. O elemento video também é bastante flexível, e apresentar um vídeo responsivo é tão simples quanto isto:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;video {
   max-width: 100%;
   height: auto;
}
&lt;/pre&gt;

&lt;p&gt;Você provavelmente está se perguntando, &amp;#8220;Então, qual o problema?&amp;#8221;&lt;/p&gt;

&lt;p&gt;O problema é que, embora YouTube e Vimeo suportem o elemento video, você ainda precisa incorporar vídeos usando o tal método do iframe. E isso meu amigo, é uma droga. Sendo assim, até que YouTube e Vimeo ofereçam um meio de incorporar vídeos em sites utilizando a tag video do HTML5, &lt;strong&gt;teremos que descobrir soluções&lt;/strong&gt; para que incorporações de vídeo trabalhem adequadamente em sites responsivos. Pensando nisto, Chris Coyier criou uma solução com um plugin jQuery chamado &lt;a href=&#34;http://fitvidsjs.com/&#34; target=&#34;_blank&#34;&gt;FitVids.js&lt;/a&gt;. Ele usa a primeira técnica mencionada acima: cria um container em torno do iframe e preserva a sua proporção.&lt;/p&gt;

&lt;h3 id=&#34;incorporando-google-maps&#34;&gt;Incorporando Google Maps&lt;/h3&gt;

&lt;p&gt;Se você incorporou um Google Map em seu site, a técnica descrita acima com container e CSS funcionará. Mas, de novo, é um hackzinho sujo. Além disso, o mapa vai redimensionar proporcionalmente e pode ficar tão pequeno, que poderá perder a área de foco que você quer mostrar ao usuário. A &lt;a href=&#34;https://developers.google.com/maps/&#34; target=&#34;_blank&#34;&gt;página do Google Maps para mobile&lt;/a&gt; diz que você pode utilizar uma &lt;a href=&#34;https://developers.google.com/maps/documentation/staticmaps/&#34; target=&#34;_blank&#34;&gt;API de mapas estáticos&lt;/a&gt; para incorporações mobile. Usar um mapa estático de fato eliminaria os problemas com iframe. Brad Frost escreveu um belo artigo a respeito, e criou uma demo de &lt;a href=&#34;http://bradfrostweb.com/blog/post/adaptive-maps/&#34; target=&#34;_blank&#34;&gt;mapas adaptáveis (adaptive maps)&lt;/a&gt; onde utiliza a mesma técnica. Um JavaScript detecta o tamanho da tela, em seguida o iframe é substituído pelo mapa estático em celulares. Como podemos ver, temos novamente que recorrer a técnicas que lidem com problemas de iframe, devido a ausência de uma solução nativa (ou seja, do Google).&lt;/p&gt;

&lt;h3 id=&#34;precisamos-de-apis-melhores&#34;&gt;Precisamos de APIS Melhores&lt;/h3&gt;

&lt;p&gt;Agora a grande pergunta: Há um jeito melhor? O maior problema em usar iframes para incorporar o conteúdo de terceiros responsivamente é a falta de controle sobre o código gerado. &lt;strong&gt;Desenvolvedores e designers são muito dependentes&lt;/strong&gt; de conteúdo de terceiros e, por extensão, o seu HTML gerado. E o número de sites que oferecem conteúdo de outros sites cresce rapidamente. Precisamos de soluções muito melhores do que iframes para incorporar este conteúdo.&lt;/p&gt;

&lt;p&gt;Agora, fale a verdade: incorporar iframes do Facebook é um verdadeiro sofrimento. A falta de controle sobre o CSS pode fazer nosso trabalho parecer bem desleixado e algumas vezes arruinar o design. A web é um lugar aberto, por isso talvez fosse um bom momento em começar a pensar em mais API&amp;#8217;s abertas! No futuro, vamos precisar de API&amp;#8217;s que sejam melhores e mais simples de utilizar, de modo que qualquer pessoa possa incorporar um conteúdo de maneira flexível, sem ter que contar com iframes fixos não responsivos. No entanto, até que decidam criar essas API&amp;#8217;s, estamos presos a iframes medíocres, tendo que recorrer a truques para torná-los viáveis.&lt;/p&gt;

&lt;h2 id=&#34;navegação-responsiva-um-panorama-pelas-soluções-atuais&#34;&gt;Navegação Responsiva: Um Panorama pelas Soluções Atuais&lt;/h2&gt;

&lt;p&gt;Outro grande desafio é o que fazer com a navegação. Quanto mais complexa e profunda a arquitetura de um website, mais inventivos precisamos ser.&lt;/p&gt;

&lt;p&gt;(Nota do tradutor: publiquei aqui no Tableless uma tradução sobre &lt;a href=&#34;http://tableless.com.br/padroes-complexos-de-navegacao-no-design-responsivo&#34;&gt;padrões complexos de navegação no web design responsivo&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Uma das primeiras tentativas de lidar com isto de maneira simples foi &lt;a href=&#34;http://css-tricks.com/convert-menu-to-dropdown/&#34; target=&#34;_blank&#34;&gt;converter a navegação em um menu dropdown&lt;/a&gt; para telas pequenas. Infelizmente, esta forma não é a ideal. Primeiro porque esta solução fica terrivelmente complicada numa navegação multi-level, podendo também causar problemas de acessibilidade. Eu recomendo o artigo &lt;a href=&#34;http://uxmovement.com/forms/stop-misusing-select-menus/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Stop Misusing Select Menus&amp;#8221;&lt;/a&gt; para entender todos os problemas consequentes desta técnica.&lt;/p&gt;

&lt;p&gt;Algumas pessoas, incluindo &lt;a href=&#34;http://bradfrostweb.com/blog/web/responsive-nav-patterns/&#34; target=&#34;_blank&#34;&gt;Brad Frost&lt;/a&gt; e Luke Wroblewski, têm tentado resolver este problema. Brad Frost compilou algumas de suas técnicas no site &lt;a href=&#34;http://bradfrost.github.io/this-is-responsive/patterns.html#navigation&#34;&gt;This Is Responsive&lt;/a&gt;, na seção de navegação.&lt;/p&gt;

&lt;p&gt;A navegação alternada (toggle navigation) envolve ocultar o menu nos dispositivos mobile, exibindo um único link. Quando o usuário dá um clique todos os links aparecem como um bloco de elementos abaixo do link, empurrando o conteúdo principal pra baixo da navegação.&lt;/p&gt;

&lt;p&gt;Uma variante deste tipo de menu, inspirado em alguns padrões de aplicativos nativos, é a navegação &lt;a href=&#34;http://coding.smashingmagazine.com/2013/01/15/off-canvas-navigation-for-responsive-website/&#34; target=&#34;_blank&#34;&gt;off-canvas&lt;/a&gt;. Essa navegação fica escondida debaixo de um link no menu ou ícone. Quano o usuário clica, a navegação desliza em forma de painel pela esquerda ou direita, empurrando o conteúdo principal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111531.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Alguns exemplos do toggle navigation&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111531.jpg?itok=LzZHvbzg&#34; width=&#34;478&#34; height=&#34;225&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;p&gt;
    O problema com essas técnicas é que a navegação permanece no topo da tela. Neste artigo &lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1649&#34;&gt;&amp;#8220;Responsive Navigation: Optimizing for Touch Across Devices&amp;#8221;&lt;/a&gt;, Luke Wroblewski mostra &lt;strong&gt;quais zonas são facilmente acessíveis aos diferentes tipos de dispositivos&lt;/strong&gt;. A área superior esquerda é a mais difícil de chegar num dispositivo mobile.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111609.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Áreas facilmente acessíveis na tela de celulares e tablets, de acordo com Luke Wroblewski.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111609.jpg?itok=1xGtEHVW&#34; width=&#34;478&#34; height=&#34;356&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Com base nisto, Jason Weaver criou &lt;a href=&#34;http://jasonweaver.name/lab/touchnav/v2/&#34; target=&#34;_blank&#34;&gt;algumas demos&lt;/a&gt; com a navegação no bottom da tela. Uma solução é o &lt;a href=&#34;http://codepen.io/bradfrost/full/mlyvu&#34; target=&#34;_blank&#34;&gt;footer anchor&lt;/a&gt; (âncora de rodapé), com a navegação fixada no bottom da página para dispositivos menores, e um menu link que envia o usuário até lá. Esta técnica utiliza o sistema link âncora do HTML.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
  &lt;p&gt;
    &lt;a href=&#34;http://codepen.io/bradfrost/full/orJwL&#34; target=&#34;_blank&#34;&gt;Diversas&lt;/a&gt; outras &lt;a href=&#34;http://codepen.io/bradfrost/full/vcuem&#34; target=&#34;_blank&#34;&gt;tentativas&lt;/a&gt; foram &lt;a href=&#34;http://codepen.io/bradfrost/full/qwJvF&#34; target=&#34;_blank&#34;&gt;feitas&lt;/a&gt; para solucionar problemas de navegação no web design responsivo. Como você pode ver, ainda não há uma solução perfeita; isso realmente depende do projeto e da profundidade da navegação. Felizmente para nós, alguma pessoas estão tentando resolver esse problema e têm compartilhado suas experiências com a comunidade.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;Outra questão não resolvida é qual ícone usar&lt;/strong&gt; para dizer ao usuário &amp;#8220;Olá! há um menu escondido aqui. Clique em mim!&amp;#8221;. Alguns websites tem um símbolo de mais (+), outros uma grade de quadrados e alguns têm três linhas (como um ícone de hamburger).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111659.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111659.jpg?itok=Sa8jlYOv&#34; width=&#34;477&#34; height=&#34;138&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Para ver esses ícones usado em websites reais, dê uma olhada no &lt;a href=&#34;http://stuffandnonsense.co.uk/blog/about/we_need_a_standard_show_navigation_icon_for_responsive_web_design&#34; target=&#34;_blank&#34;&gt;&amp;#8220;We Need a Standard ‘Show Navigation’ Icon for Responsive Web Design”&lt;/a&gt; (precisamos de um ícone padrão no web design responsivo para &amp;#8220;mostrar a navegação&amp;#8221;).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O maior problema é descobrir qual desses ícones seria o mais reconhecível a uma quantidade de usuários. Se todos concordássemos em usar um deles, os usuários seriam instruídos a reconhecê-los. O problema é, qual escolher? Eu realmente gostaria de saber qual ícone vocês usam, então não hesite em compartilhar nos comentários 1 (1 &amp;#8211; nota do tradutor: para deixar sua opinião sobre qual o ícone você utiliza, acesse o artigo original).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;
    Especificidades Mobile: &amp;#8220;O usuário está com um dispositivo mobile? Se sim, o que pode ser feito?&amp;#8221;
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Dispositivos mobile e tablets são um mundo novo &amp;#8211; longe dos computadores desktops -, com suas próprias regras, comportamentos e capacidades. Podemos querer adaptar nossos projetos a esta nova gama de capacidades.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    Detectando Capacidades Touch com JavaScript Nativo
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Além do tamanho da tela, aposto que se você perguntasse qual a principal diferença entre mobiles (incluindo tablets) e desktops, a maioria das pessoas diriam ser a capacidade touch. Não há mouse num celular (é verdade!), e com exceção de alguns dispositivos híbridos raros, em que você pode plugar um mouse, você não vai poder realizar muitos eventos num tablet com um mouse. Isto significa que, dependendo do browser, a pseudo-classe &lt;em&gt;:hover&lt;/em&gt; do CSS pode não funcionar. Alguns browsers são inteligentes o bastante para oferecer um fallback nativo ao evento do hover traduzindo em um evento touch. Infelizmente, nem todos os browsers são tão flexíveis assim. Criar um design que não dependa de elementos ocultos, a serem revelados sob eventos &lt;em&gt;:hover&lt;/em&gt;, seria o mais sensato.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;Capturar eventos touch&lt;/strong&gt; poderia também ser uma outra solução. A W3C working group começou a trabalhar numa &lt;a href=&#34;http://www.w3.org/TR/touch-events/&#34; target=&#34;_blank&#34;&gt;especificação de eventos touch&lt;/a&gt;. Futuramente, seremos capazes de capturar eventos tais como &lt;em&gt;touchstart&lt;/em&gt;, &lt;em&gt;touchmove&lt;/em&gt; e &lt;em&gt;toucheend&lt;/em&gt;. Seremos capazes de lidar com esses eventos diretamente no JavaScript sem a necessidade de frameworks de terceiros como &lt;a href=&#34;http://eightmedia.github.io/hammer.js/&#34; target=&#34;_blank&#34;&gt;Hammer.js&lt;/a&gt; ou &lt;a href=&#34;http://jgestures.codeplex.com/&#34; target=&#34;_blank&#34;&gt;jGestures&lt;/a&gt;. Mas JavaScript é uma coisa &amp;#8211; E o que acontece com o CSS?
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    CSS nível 4 &amp;#8211; Media Query &amp;#8220;Pointer&amp;#8221;
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O CSS nível 4 especifica uma &lt;a href=&#34;http://dev.w3.org/csswg/mediaqueries4/#pointer&#34; target=&#34;_blank&#34;&gt;nova media querry chamada &amp;#8220;pointer&amp;#8221;&lt;/a&gt;, que pode ser usada para capturar a existência e precisão de um dispositivo apontador (pointing device), tal como um mouse. A media query tem um dos três valores:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;
      &lt;em&gt;none&lt;/em&gt;&lt;br /&gt; O dispositivo não tem nenhum pointing device.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;coarse&lt;/em&gt;&lt;br /&gt; O dispositivo tem um pointing device com precisão limitada, por exemplo, um celular ou tablet com capacidades touch, onde o &amp;#8220;pointer&amp;#8221; seria um dedo.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;fine&lt;/em&gt;&lt;br /&gt; O dispositivo tem um pointing device preciso, como um mouse, trackpad ou caneta (stylus).
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Usando esta media query, nós podemos ampliar a maneira de utilização de botões e links para dispositivos móveis:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-css&#34;&gt;
@media  (pointer:coarse) {
   input[type=&amp;ldquo;submit&amp;rdquo;],
       a.button {
       min-width: 30px;
       min-height: 40px;
       background: transparent;
   }
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    A media query pointer ainda não é suportada &amp;#8211; apenas sendo proposta. Todavia, ser potencial é enorme, pois seria permitiria &lt;strong&gt;detectar dispositivos touch via CSS&lt;/strong&gt;, sem a necessidade de uma bilbioteca, como &lt;a href=&#34;http://modernizr.com/docs/#touch&#34; target=&#34;_blank&#34;&gt;Modernizr&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    CSS nível 4 &amp;#8211; Media Query &amp;#8220;Hover&amp;#8221;
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    A especificação CSS nível 4 propõe uma nova &lt;a href=&#34;http://dev.w3.org/csswg/mediaqueries4/#hover&#34; target=&#34;_blank&#34;&gt;media query hover&lt;/a&gt;, que detecta se o sistema primário do dispositivo dá suporte ao hover. Ele retorna valores&lt;em&gt; boleanos: 1&lt;/em&gt; se o dispositivo suporta hover, &lt;em&gt;&lt;/em&gt; se não suporta. Note que isto não tem nada a ver com a pseudo-classe &lt;em&gt;:hover&lt;/em&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Usando a media query hover podemos melhorar a interface e ocultar certas características dos dispositivos que o suportam. O código fica mais ou menos assim:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-css&#34;&gt;
@media  (hover) {
   .hovercontent { display: none; }
   /* oculta o conteúdo apenas para dispositivos com suporte ao hover. */
   .hovercontent:hover { display: block; }
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Pode também ser usado para criar menus dropdowns com hover; e o fallback para dispositivos mobile é em CSS nativo, sem a necessidade de um framework que detecte a feature.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    CSS nível 4 &amp;#8211; Media Query Luminosity
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Outra capacidade dos dispositivos mobile é o sensor de luminosidade. A especificação CSS nível 4 tem a &lt;a href=&#34;http://dev.w3.org/csswg/mediaqueries4/#luminosity&#34; target=&#34;_blank&#34;&gt;media query luminosity&lt;/a&gt;, que nos dá acesso ao sensor de luz dos dispositivos diretamente no CSS. Abaixo a descrição da especificação.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
    &lt;p&gt;
      A característica da media &amp;#8220;luminosity&amp;#8221; é usada para verificar a luminosidade do ambiente o qual o dispositivo está sendo usado, e permitir que o autor ajuste o estilo do documento responsivamente.
    &lt;/p&gt;
  &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    No futuro, seremos capazes de criar &lt;strong&gt;websites que respondam a luminosidade do ambiente&lt;/strong&gt;. Isto vai melhorar muito a experiência do usuário. Seremos capazes de detectar, por exemplo, ambientes extremamente brilhantes usando o valor &lt;em&gt;washed&lt;/em&gt;, adaptando o contraste do site ao local. O valor &lt;em&gt;dim&lt;/em&gt; é usado para ambientes escuros (a noite por exemplo), e o valor &lt;em&gt;normal&lt;/em&gt; para quando o nível de luminosidade não necessita de qualquer tipo de adaptação.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O código fica assim:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-css&#34;&gt;
@media  (luminosity: washed) {
   p { background: white; color: black; font-size: 2em; }
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Como podemos ver, as CSS4 prometem um monte de coisas novas. Se você está curioso em ver o que vem por aí &amp;#8211; não só para mobile &amp;#8211; então dê uma olhada na &lt;a href=&#34;http://coding.smashingmagazine.com/2013/01/21/sneak-peek-future-selectors-level-4/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Sneak Peek Into the Future: Selectors, Level 4&amp;#8221;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    Mais Recursos Mobile para Detectar o Uso de API&amp;#8217;s e JavaScript
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Muitas outras coisas poderiam ser detectadas para tornar a experiência do usuário surpreendente num site responsivo. Por exemplo, poderíamos ter acesso nativo ao giroscópio, bússola e acelerômetro para detectar a orientação do dispositivo usando o &lt;em&gt;DeviceOrientationEvent&lt;/em&gt; do HTML5. O &lt;a href=&#34;http://caniuse.com/#feat=deviceorientation&#34;&gt;suporte ao DeviceOrientationEvent&lt;/a&gt; nos browsers do Android e iOS está ficando cada vez melhor, mas a especificação ainda está em fase de rascunho. No entanto, a API parece promissora. Imagine jogar jogos HTML5 diretamente no browser!
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Outra API que seria particularmente utilizada por alguns usuários mobile é a de &lt;a href=&#34;http://dev.w3.org/geo/api/spec-source.html&#34; target=&#34;_blank&#34;&gt;geolocation&lt;/a&gt;. A boa notícia é que ela já é &lt;a href=&#34;http://caniuse.com/#search=geolocation&#34; target=&#34;_blank&#34;&gt;bem suportada&lt;/a&gt;. Esta API &lt;strong&gt;nos permite localizar geograficamente o usuário usando o GPS&lt;/strong&gt; e inferir sua localização a partir de sinais de rede, como IP, RFID, Wi-Fi e endereços MAC Bluetooth. Isto pode ser usado em alguns sites responsivos para oferecer informações contextuais aos usuários. Uma grande cadeia de restaurantes poderia melhorar sua experiência mobile mostrando aos usuários a localização de seus restaurantes em sua área. As possibilidades são infinitas.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    A W3C também propôs um rascunho para uma &lt;a href=&#34;http://dev.w3.org/2009/dap/vibration/&#34; target=&#34;_blank&#34;&gt;API de vibração&lt;/a&gt;. Nele o browser pode oferecer um feedbacl tátil ao usuário em forma de vibração. Isto, no entanto, ainda está engatinhando em campos mais específicos de aplicações Web and mobile games in the browser.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Outra API que tem sido altamente discutida é a &lt;a href=&#34;http://www.w3.org/TR/netinfo-api/&#34; target=&#34;_blank&#34;&gt;network information API&lt;/a&gt;. A possibilidade de medir a largura de banda do usuário, e otimizar conforme o resultado, tem seduzido muitos desenvolvedores. Seriamos capazes de servir imagens com qualidade de alta definição para usuários com alta largura de banda e imagens de baixa qualidade aos usuários com baixa largura de banda. Com o atributo &lt;em&gt;bandwith&lt;/em&gt; da network API, seria possível calcular a velocidade de download de um usuário em megabytes por segundo. O segundo atributo, &lt;em&gt;metered&lt;/em&gt;, é um booleano que nos diz se o usuário tem uma conexão aferida (como um cartão pré-pago). Esses dois atributos são atualmente acessíveis via JavaScript.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Infelizmente, &lt;strong&gt;medir a conexão de um usuário é algo tecnicamente complicado&lt;/strong&gt;, pois uma conexão poderia mudar de forma abrupta. O usuário poderia, por exemplo, entrar num túnel e perder sua conexão, ou sua velocidade poderia cair de repente. Sendo assim, a media query mágica que mede a largura de banda parece ser hipotética no momento. Yoav Weiis escreveu um belo artigo sobre os problemas criados por essa media query e sobre medição de largura de banda chamado &lt;a href=&#34;http://mobile.smashingmagazine.com/2013/01/09/bandwidth-media-queries-we-dont-need-em/&#34; target=&#34;_blank&#34;&gt;“Bandwidth Media Queries? We Don’t Need ’Em!”&lt;/a&gt; (media queries de largura de banda? Não precisamos delas!&amp;#8221;)
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Muitas outras API&amp;#8217;s lidam com recursos mobile. Se você estiver interessado em aprender mais, a Mozilla tem uma &lt;a href=&#34;https://wiki.mozilla.org/WebAPI&#34; target=&#34;_blank&#34;&gt;lista bem detalhada&lt;/a&gt;. A maioria ainda não está completamente disponível ou padronizada, e é destinada mais a aplicações web do que a sites responsivos. No entanto, é um ótimo panorama de como grandes e complexos sites mobile podem ser no futuro.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;
    Repensando a Maneira Como Nós e o Usuário Lidamos com o Conteúdo
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Do ponto de vista técnico, ainda existem muitos desafios ao lidar com o conteúdo em grande escala. O método mobile-first tem sido parte do processo de desenvolvimento e design já há algum tempo. Poderíamos, por exemplo, servir a dispositivos mobile o mínimo de dados necessários, e então usar JavaScript e AJAX para condicionalmente carregar mais conteúdo e imagens para desktop e tablets. No entanto, para isto, também teríamos que &lt;strong&gt;repensar como lidar com o conteúdo&lt;/strong&gt; e ser capaz de priorizar uma forma de gerar um conteúdo suficientemente flexível e adaptável. Um bom exemplo disto é o mapa de solução responsiva descrito acima: Carregamos uma imagem para mobile, e melhoramos a experiência com um mapa real para desktops. Quanto mais responsivo o website, mais complexo será lidar com o conteúdo. Um código flexível pode nos ajudar a formatar um conteúdo adaptável.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Uma forma sugerida por alguns é criar frases responsivas e marcá-las com spans que tenham classes, e então exibi-los de acordo com o tamanho da tela. Aparar trechos das frases para dispositivos menores é possível com media querries. Você pode ver esta técnica no 37signals&amp;#8217; &lt;a href=&#34;http://37signals.com/svn/&#34; target=&#34;_blank&#34;&gt;Signal vs. Noise&lt;/a&gt; blog e no artigo de Frankie Roberto &lt;a href=&#34;http://www.frankieroberto.com/responsive_text&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Responsive Text&amp;#8221;&lt;/a&gt;. Mesmo que tal técnica pudesse ser usada para melhorar pequenas partes de um website, tais como um slogan do footer, aplicando isto a todos os textos de um site é difícil de imaginar.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Isto levanta uma questão no web design responsivo que se tornará mais e mais importante no futuro: a importância de meta dados e a estrutura semântica de conteúdo. Se quisermos ser capazes de reutilizar o conteúdo de outros websites automaticamente, eles deverão estar bem estruturados e preparados para isto. Novas tags HTML5 como &lt;em&gt;article&lt;/em&gt; e &lt;em&gt;section&lt;/em&gt; são um bom começo para ganhar algum significado semântico. O objetivo é pensar e estruturar o conteúdo de modo que um único item (por exemplo, um post em um blog), possa ser reutilizado e exibido em diferentes dispositivos, e em diferentes formatos.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O grande desafio será &lt;strong&gt;fazer com que os metadados sejam facilmente compreendidos&lt;/strong&gt; a todas as pessoas que fazem parte da criação de conteúdo do website. Teremos que explicar a todos eles como os metadados podem ser utilizados para priorizar o conteúdo e programaticamente reunir o conteúdo, sendo uma plataforma independente. Um grande desafio será o de ajudá-los a pensar em blocos reutilizáveis, em vez de um grande pedaço de texto no qual eles copiam e colam conteúdo do Microsoft Word no seu sistema de gerenciamento de conteúdo WYSIWYG. Teremos que ajudá-los a entender que conteúdo e estrutura são coisas distintas e independentes, como quando os designers tiveram que entender que o conteúdo (HTML) e a apresentação (CSS) eram mantidos melhor separados.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;Não podemos nos dar ao luxo de escrever um conteúdo que seja orientado a uma única plataforma&lt;/strong&gt;. Quem sabe em qual dispositivo ele será publicado daqui a seis meses, ou um ano? &lt;a href=&#34;http://mobile.smashingmagazine.com/2013/01/14/preparing-websites-for-the-unexpected/&#34; target=&#34;_blank&#34;&gt;Precisamos preparar nossos websites para o inesperado&lt;/a&gt;. Mas, para isto, precisamos de ferramentas melhores de publicação também. Karen McGrane deu uma palestra intitulada &lt;a href=&#34;http://karenmcgrane.com/2012/09/04/adapting-ourselves-to-adaptive-content-video-slides-and-transcript-oh-my/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Adapting Ourselves to Adaptive Content&amp;#8221;&lt;/a&gt; (Nos Adaptando a um Conteúdo Adaptável), com alguns exemplos reais da indústria editorial. Ela fala sobre o processo de criação de conteúdo reutilizável e apresenta a ideia do COPE: create once and publish everywhere (Criar uma vez e publicar em todos os lugares). Precisamos construir CMS&amp;#8217;s melhores, que possam utilizar e gerar metadados para priorizar o conteúdo. Precisamos explicar às pessoas como o sistema funciona e pensar em objetos de módulos de conteúdo reutilizáveis em vez de páginas WYSIWYG. Como McGrane diz:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
    &lt;p&gt;
      &amp;#8220;Você pode escrever três versões diferentes de título; você pode escrever duas versões diferentes de resumos e anexar diversas imagens para isto, com diferentes cortes e tamanhos, e você pode não ser a pessoa responsável em decidir qual imagem ou qual título será exibido em uma determinada plataforma. Essa decisão será tomada pelos metadados. Será feita pelas regras de negócios. [&amp;#8230;] Metadados é a nova direção de arte.&amp;#8221;
    &lt;/p&gt;
  &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Truncar o conteúdo para dispositivos menores não é uma estratégia de conteúdo &amp;#8220;à prova do futuro&amp;#8221;. Precisamos de CMS&amp;#8217;s que ofereçam a estrutura necessária para criar esse conteúdo reutilizável. Precisamos de melhores workflows de publicação em CMS&amp;#8217;s também. Interfaces desajeitadas assustam os usuários, e a maioria das pessoas que geram conteúdo não estão particularmente confortáveis com ferramentas complicadas. Temos que oferecer a essas pessoas ferramentas mais fáceis de entender e que lhe ajudem a publicar um conteúdo limpo e semântico, independente da apresentação.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;
    Conclusão
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Por mais longo que este artigo seja, &lt;strong&gt;ele só abrange o básico&lt;/strong&gt;. Mas agora, a maioria dos leitores da Smashing Magazine entendem que o web design responsivo é muito mais que usar media queries, escolher breakpoints certos e dobrar o tamanho das imagens para celulares de alta densidade. Como você pode ver, o caminho é longo e ainda não chegamos lá. Há ainda muitas questões não resolvidas, e a solução responsiva perfeita ainda não existe.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Soluções técnicas podem ser descobertas no futuro usando alguma nova tecnologia apresentada neste artigo, com a ajuda da &lt;a href=&#34;http://www.w3.org/&#34; target=&#34;_blank&#34;&gt;W3C&lt;/a&gt;, &lt;a href=&#34;http://www.whatwg.org/&#34; target=&#34;_blank&#34;&gt;WHATWG&lt;/a&gt; e organizações como o &lt;a href=&#34;http://filamentgroup.com/&#34; target=&#34;_blank&#34;&gt;Filament Group&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Mais importante, nós web designers e desenvolvedores podemos ajudar a encontrar soluções ainda melhores. Pessoas como &lt;a href=&#34;http://www.lukew.com/&#34; target=&#34;_blank&#34;&gt;Luke Wroblewski&lt;/a&gt; e &lt;a href=&#34;http://bradfrostweb.com/&#34; target=&#34;_blank&#34;&gt;Brad Frost&lt;/a&gt;, e todas as incríveis pessoas mencionadas neste artigo estão experimentando uma série de soluções e técnicas diferentes. Se serão bem ou mal sucedidas, &lt;strong&gt;a coisa mais importante é compartilhar&lt;/strong&gt; o que nós &amp;#8211; designers, desenvolvedores, estrategistas de conteúdo e membros da comunidade web &amp;#8211; estamos fazendo para tentar resolver alguns dos desafios da comunidade do web design. Afinal, estamos todos no mesmo barco, tentando tornar a web um lugar melhor, não estamos?
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &amp;#8212;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Traduzido com autorização da &lt;a href=&#34;http://www.smashingmagazine.com/&#34; target=&#34;_blank&#34;&gt;Smashing Magazine&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Artigo original escrito por &lt;a href=&#34;http://mobile.smashingmagazine.com/author/stephanie-walter/?rel=author&#34; target=&#34;_blank&#34;&gt;Stéphanie Walter&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Acesse o artigo original na &lt;a href=&#34;http://mobile.smashingmagazine.com/2013/05/29/the-state-of-responsive-web-design/&#34; target=&#34;_blank&#34;&gt;Smashing Magazine&lt;/a&gt; &amp;#8211; &amp;#8220;The State Of Responsive Web Design&amp;#8221; &amp;#8211; 29 de maio de 2013.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &amp;#8212;
  &lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O que é Design Atômico?</title>
      <link>http://tableless.com.br/o-que-e-design-atomic/</link>
      <pubDate>Mon, 24 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-que-e-design-atomic/</guid>
      <description>

&lt;p&gt;Neste artigo vamos bater um papo sobre os atuais problemas de prototipagem para design responsivo e conhecer um novo método que, através de analogias científicas curiosas e ferramentas inspiradas em Guias de Estilo, promete modificar a maneira como entendemos, organizamos e desenvolvemos interfaces.&lt;/p&gt;

&lt;h2 id=&#34;o-estado-atual-do-webdesign&#34;&gt;O estado atual do webdesign&lt;/h2&gt;

&lt;p&gt;O advento do design responsivo em 2010 transformou a maneira como projetamos interfaces para a web. 3 anos se passaram desde então e a possibilidade de ter um conteúdo unificado presente em múltiplos dispositivos já é uma realidade concreta. Diversas técnicas e boas práticas de sintaxe e semântica foram propostas e consolidadas. Foram criados boilerplates, frameworks, scripts e plugins para facilitar o desenvolvimento front-end. Mas embora o design responsivo tenha sido uma mudança extremamente positiva e aceita na industria ainda temos um problema: os dias tem apenas 24 horas.&lt;/p&gt;

&lt;p&gt;Desenvolver um layout consistente e funcional em diferentes browsers, sistemas operacionais e dispositivos consome muito mais tempo do que os métodos tradicionais. O velho esquema em cascata  wireframe &amp;gt; mock-up em psd &amp;gt; layout &amp;gt; aprovação está a cada dia mais difícil de manter já que a quantidade de trabalho literalmente triplicou. Enquanto antes tínhamos que criar apenas um template de layout (desktop) hoje temos que pensar em smartphones, tablets, televisores&amp;#8230; Isto significa três vezes mais wireframes, três vezes mais mock-ups e três vezes mais reuniões. Já sabemos como escrever códigos responsivos, mas uma lacuna ainda sobra. Como criar layouts para este novo cenário e como apresentar isto como um produto entregável?&lt;/p&gt;

&lt;p&gt;Diversos designers estão tentando responder a esta pergunta, mas até agora não existem respostas definitivas. O fato é que se continuarmos a pensar em sites apenas como páginas isoladas a tendência é que a dificuldade de desenvolvimento aumente progressivamente a medida que novos aparelhos sejam inseridos no mercado. É necessária a criação de um novo modelo que melhore o fluxo de trabalho de designers e desenvolvedores! Mas qual?&lt;/p&gt;

&lt;h2 id=&#34;mini-bootstraps-para-todos-os-clientes&#34;&gt;Mini bootstraps, para todos os clientes!&lt;/h2&gt;

&lt;p&gt;Eu já falei aqui no Tableless &lt;a href=&#34;http://tableless.com.br/guia-de-estilos/#.UcOkIPagkR4&#34; title=&#34;Guias de Estilos&#34;&gt;sobre Guias de Estilos&lt;/a&gt; e como eles podem ajudar a resolver alguns destes problemas, tanto no âmbito do design quanto do front-end. Para quem não está familiarizado com o conceito, basicamente são bibliotecas modulares de elementos de design, snippets de código e padrões da user interface. Algo como um &lt;a href=&#34;http://daverupert.com/2013/04/responsive-deliverables/&#34; title=&#34;Responsive Deliverables&#34;&gt;mini Twitter Bootstrap&lt;/a&gt; criado especialmente para cada projeto. As vantagens são muitas como a organização, documentação e melhoria na comunicação entre os profissionais já que os conceitos de design estão todos unificados em um local.&lt;/p&gt;

&lt;h3 id=&#34;do-que-afinal-interfaces-são-feitas&#34;&gt;Do que, afinal, interfaces são feitas?&lt;/h3&gt;

&lt;p&gt;Escolher quais elementos incluir no Guia de Estilos pode causa algumas dúvidas. O Designer Tyler Sticka tentou responder algumas delas ao &lt;a href=&#34;http://blog.cloudfour.com/common-patterns/&#34; title=&#34;Common Patterns&#34;&gt;compilar uma tabela&lt;/a&gt;  contabilizando os elementos mais comuns em diversos boilerplates e frameworks famosos. O resultado é bem interessante e pode servir de ponto de partida para a criação de seu próprio guia. Foram compilados mais de 160 elementos diferentes. É claro, nem todos os itens vão ser utilizados sempre. Mas vale a pena conhecer para entender a extensão do que é possível criar.&lt;/p&gt;

&lt;h3 id=&#34;o-contra-dos-guias-de-estilo&#34;&gt;O contra dos Guias de Estilo&lt;/h3&gt;

&lt;p&gt;Embora esta solução seja ótima da perspectiva do designer e do desenvolvedor ela ainda demanda muito tempo, o que é quase um luxo em alguns projetos. E para alguns clientes ainda pode ser difícil de entender como aquele monte de elementos abstratos aparentemente aleatórios pode de fato se transformar magicamente em um site na internet. E isto é compreensível, afinal, é difícil dizer se gosta de um rosto apenas olhando o nariz. Mas como todo Pokémon evolui entra em cena o&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;design-atômico&#34;&gt;Design atômico&lt;/h2&gt;

&lt;p&gt;Dizer que você faz &amp;#8220;design atômico&amp;#8221; não significa (infelizmente) que agora podemos projetar bio organismos no Photoshop ou algo parecido. Na verdade é só uma analogia para explicar como os diferentes componentes de uma página podem interagir&amp;#8230;. Esta metodologia para a criação de interfaces foi criada pelo webdesigner &lt;a href=&#34;http://bradfrostweb.com/blog/post/atomic-web-design/&#34; title=&#34;Atomic Web Design&#34;&gt;Brad Frost&lt;/a&gt;  e explicada em detalhes na conferência Beyond Tellerrand, na Alemanha (você pode conferir o &lt;a href=&#34;http://vimeo.com/channels/beyondtellerrand/67476280&#34; title=&#34;Atomic Design - Beyond Tellerrand&#34;&gt;vídeo da palestra&lt;/a&gt; em inglês).&lt;/p&gt;

&lt;p&gt;Da mesma forma que Guias de Estilo, o design atômico também é modular. Ele parte do pressuposto que as páginas na internet na realidade são sistemas, ou seja,  conjuntos de elementos interconectados que formam um todo organizado. Inspirado pelas aulas de química do colegial Frost percebeu que os componentes de uma página da internet se comportam de maneira muito parecida com a de átomos, moléculas e organismos. Páginas na internet são basicamente compostas por um grupo finito de elementos (tags HTML) que podem se agrupar de diferentes maneiras para criar sistemas complexos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bradfrostweb.com/blog/post/atomic-web-design/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-37823&#34; alt=&#34;atomic-design&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/atomic-design.jpg&#34; width=&#34;660&#34; height=&#34;340&#34; srcset=&#34;uploads/2013/06/atomic-design.jpg 660w, uploads/2013/06/atomic-design-326x168.jpg 326w, uploads/2013/06/atomic-design-588x302.jpg 588w, uploads/2013/06/atomic-design-601x310.jpg 601w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;os-átomos&#34;&gt;Os Átomos&lt;/h3&gt;

&lt;p&gt;&lt;interludio ciêntifico&gt;&lt;/p&gt;

&lt;p&gt;A palavra átomo quer dizer &amp;#8220;aquilo que não pode ser dividido&amp;#8221;. E quando surgiu este conceito na ciência no inicio do século XIX, de fato ele era considerado a menor parte da matéria (ironicamente a ciência depois descobriram que é possível dividir átomos em partes menores, mas isto não vem ao caso). O fato é que os átomos se juntam para formar moléculas que se juntam para formar organismos que são&amp;#8230; bem, tudo. Os átomos aqui são os blocos de construção do universo. Algo como peças de lego que você pode montar e combinar para criar elementos maiores.&lt;/p&gt;

&lt;p&gt;&lt;/interludio ciêntifico&gt;&lt;/p&gt;

&lt;p&gt;Bem, no Atomic Design os átomos funcionam da mesma forma. São os menores elementos disponíveis em linguagem de marcação de texto: tags. Os átomos são elementos isolados que não precisam de um contexto para existir. Pense em coisas soltas como labels, inputs, campos de formulário, botões, títulos, parágrafos&amp;#8230;  ou até mesmo elementos abstratos como paleta de cores e font-stacks. Estes são os blocos básicos utilizados para construir elementos maiores.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-37841&#34; alt=&#34;exemplo-de-atomo&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/exemplo-de-atomo.jpg&#34; width=&#34;660&#34; height=&#34;340&#34; srcset=&#34;uploads/2013/06/exemplo-de-atomo.jpg 660w, uploads/2013/06/exemplo-de-atomo-326x168.jpg 326w, uploads/2013/06/exemplo-de-atomo-588x302.jpg 588w, uploads/2013/06/exemplo-de-atomo-601x310.jpg 601w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;moléculas&#34;&gt;Moléculas&lt;/h3&gt;

&lt;p&gt;Moléculas aqui são basicamente agrupamentos de um ou mais átomos. As moléculas fazem os componentes isolados funcionarem com um propósito único. Uma label um campo de formulário e um botão não são uteis isoladamente, mas juntos podem cumprir uma função específica como realizar uma busca. Um conjunto de headings torna-se a molécula hgroup.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-37842&#34; alt=&#34;exemplo-de-molecula&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/exemplo-de-molecula.jpg&#34; width=&#34;660&#34; height=&#34;142&#34; srcset=&#34;uploads/2013/06/exemplo-de-molecula.jpg 660w, uploads/2013/06/exemplo-de-molecula-329x70.jpg 329w, uploads/2013/06/exemplo-de-molecula-588x126.jpg 588w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;organismos&#34;&gt;Organismos&lt;/h3&gt;

&lt;p&gt;Você pode pensar neles como uma colagem de elementos. Da mesma maneira que uma molécula é um conjunto de átomos, organismos são um conjunto de moléculas. Normalmente isto vai corresponder a uma seção do site como header, footer, sidebar, etc. Ao contrário das moléculas, os organismos podem ter diversos propósitos funcionando paralelamente. Um header, por exemplo,  pode possuir elementos como logotipo, navegação, formulário de login, campo de busca, call to action, etc. E cada um deles realiza uma ação específica. Um conjunto formado por moléculas como hgroup, span e data pode ser o organismo cabeçalho de um artigo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-37843&#34; alt=&#34;exemplo-de-organismo&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/exemplo-de-organismo.jpg&#34; width=&#34;660&#34; height=&#34;193&#34; srcset=&#34;uploads/2013/06/exemplo-de-organismo.jpg 660w, uploads/2013/06/exemplo-de-organismo-329x96.jpg 329w, uploads/2013/06/exemplo-de-organismo-588x171.jpg 588w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;Okay, aqui a metáfora de ciência acabou. Isto acontece por que a partir desta etapa já é possível mostrar algo para o cliente e ele provavelmente pode achar você meio maluco se tentar explicar seu layout utilizando um modelo atômico.  É melhor continuar com um vocabulário familiar&amp;#8230; Templates são &amp;#8211; você provavelmente adivinhou &amp;#8211; conjuntos de organismos. Neste momento o design começa a ficar mais concreto. Você pode pensar em templates como wireframes de HTML de baixa fidelidade. Aqui já é possível visualizar o esqueleto do seu site ao vivo de maneira interativa. Seguindo com o nosso exemplo teríamos a página completa composta por diversos organismos.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-37845&#34; alt=&#34;exemplo-de-template&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/exemplo-de-template.jpg&#34; width=&#34;660&#34; height=&#34;502&#34; srcset=&#34;uploads/2013/06/exemplo-de-template.jpg 660w, uploads/2013/06/exemplo-de-template-220x168.jpg 220w, uploads/2013/06/exemplo-de-template-407x310.jpg 407w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;páginas&#34;&gt;Páginas&lt;/h3&gt;

&lt;p&gt;As página são a evolução dos templates para um design de alta fidelidade mais complexo com cor, tipografia e conteúdo. Através da página é possível ver todos os elementos menores como imagens e videos no contexto real e assim validar a efetividade do template. Após os ajustes necessários você tem o produto final. Este seria o nosso exemplo de wireframe com um conteúdo &amp;#8220;real&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-37844&#34; alt=&#34;exemplo-de-pagina&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/exemplo-de-pagina.jpg&#34; width=&#34;660&#34; height=&#34;612&#34; srcset=&#34;uploads/2013/06/exemplo-de-pagina.jpg 660w, uploads/2013/06/exemplo-de-pagina-181x168.jpg 181w, uploads/2013/06/exemplo-de-pagina-334x310.jpg 334w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;vantagens-do-modelo&#34;&gt;Vantagens do Modelo&lt;/h3&gt;

&lt;p&gt;O Design Atômico promove uma evolução linear de objetos abstratos menos complexos até o produto final. Através desta metodologia podemos estabelecer um padrão para a criação de sistemas de design, com partes reutilizáveis com uma progressão lógica de montagem. Dependendo do gosto da sua equipe isto pode significar até mesmo a remoção de mockups estáticos no Photoshop, o que representa um ganho de tempo e produtividade. A possibilidade de testar os átomos, moléculas e organismos em um ambiente real também garante que o seu produto final seja a prova de erros. Outra vantagem é a facilidade de mudanças e ajustes, diminuindo o impacto negativo de refações no fluxo de trabalho. Basta trocar a ordem ou combinação de elementos para criar novas páginas.&lt;/p&gt;

&lt;h3 id=&#34;o-laboratório-do-designer&#34;&gt;O Laboratório do Designer&lt;/h3&gt;

&lt;p&gt;O modelo teórico do design atômico já é interessante e relevante por si só. Mas Frost criou uma ferramenta que funciona como uma mistura de sandbox e boilerplate: o &lt;a href=&#34;http://patternlab.bradfrostweb.com/&#34; title=&#34;Pattern Lab&#34;&gt;Pattern Lab&lt;/a&gt;. Através da ferramenta podemos construir sistemas de design utilizando uma biblioteca de componentes em PHP, um conjunto de padrões comuns de user interface, uma suite de testes responsiva, dentre outros recursos. Tudo dividido e organizado entre átomos, moléculas e organismos de maneira que você possa criar suas próprias páginas e templates.  Alias, os exemplos utilizados neste artigo foram totalmente retirados do Pattern Lab.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://patternlab.bradfrostweb.com/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-37850&#34; alt=&#34;patternlab&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/patternlab.jpg&#34; width=&#34;660&#34; height=&#34;260&#34; srcset=&#34;uploads/2013/06/patternlab.jpg 660w, uploads/2013/06/patternlab-329x129.jpg 329w, uploads/2013/06/patternlab-588x231.jpg 588w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A vantagem em relação aos Frameworks é que esta biblioteca é aberta, flexível e te dá espaço para criar seus próprios componentes da maneira que você bem entender. Tudo isto pronto para você  incluir, organizar e agrupar módulos como quiser através de tags PHP. Algo bem parecido com a sintaxe do WordPress, por exemplo. Se você se interessou basta visitar o &lt;a href=&#34;https://github.com/bradfrost/patternlab&#34; title=&#34;Pattern Lab&#34;&gt;repositório no Github&lt;/a&gt; para começar a brincar. Se você não curte PHP, tudo bem. Já existe uma galera criando versões para outras linguagens de programação. Você pode conferir o port para &lt;a href=&#34;https://github.com/zakkain/patternlab-jekyll&#34; title=&#34;Pattern Lab Jekyll&#34;&gt;Jekyll neste outro repositório&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para ser sincera o layout padrão do Pattern Lab é bem feio. Mas esta é a intenção mesmo. A idéia é ser um facilitador para a criação do SEU design. Então todo visual é simples e neutro de maneira que você possa acrescentar seu próprio CSS. Ou seja, o Pattern Lab é propositalmente incompleto. A intenção aqui não é ser um framework, mas um conjunto de módulos que incluem os elementos mais utilizados em Guias de Estilo e outras coisas que as vezes esquecemos / são difíceis de incluir em mock-ups estáticos como padrões para animação em CSS, avatares de usuário, animação de loading, tags de áudio&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-37846&#34; alt=&#34;exemplo-animations&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/exemplo-animations.jpg&#34; width=&#34;660&#34; height=&#34;260&#34; srcset=&#34;uploads/2013/06/exemplo-animations.jpg 660w, uploads/2013/06/exemplo-animations-329x129.jpg 329w, uploads/2013/06/exemplo-animations-588x231.jpg 588w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;não-faz-milagres&#34;&gt;Não faz milagres&lt;/h3&gt;

&lt;p&gt;A ferramenta possui alguns fatores contra. Por ser toda baseada em includes existe uma certa dificuldade de integração com outras linguagens dinâmicas. O Pattern Lab pode ser legal para a criação de protótipos como mock-ups e wireframes, mas a não ser que você esteja planejando um site estático este não é o meio ideal para o desenvolvimento do produto final. Como os módulos são fechados isto impossibilita a implantação de um sistema de manutenção de conteúdo. Existem algumas discussões para contornar este problema, mas este é o cenário atual.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;a-web-do-futuro&#34;&gt;A Web do futuro&lt;/h2&gt;

&lt;p&gt;A criação de Frost vai muito além da metáfora bonitinha. O que eu acho verdadeiramente empolgante é ver pessoas buscando soluções diferentes para velhos problemas, criando discussões relevantes e procurando coletivamente novas formas de transformar a maneira como construímos interfaces. O fato é que a metáfora de Frost não apenas ajuda a entender interfaces modulares de maneira mais clara, mas em pouquíssimo tempo &lt;a href=&#34;http://www.benedfit.com/2013/06/atomic-design-phases-and-mesophases.html&#34; title=&#34;Atomic design phases and mesophases&#34;&gt;já foi até ampliada&lt;/a&gt; para englobar conceitos como breakpoints. Não tenho dúvida que estes conceitos devem ser ainda mais aperfeiçoados no futuro. Esta pode não ser a solução definitiva para o problema de itens entregáveis, mas é um bom caminho a ser explorado e testado. Basta que cada um contribua com suas próprias idéias para criarmos melhores soluções e experiências para designers, desenvolvedores, clientes e usuários.&lt;/p&gt;

&lt;h3 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://bradfrostweb.com/blog/post/atomic-web-design/&#34; title=&#34;Atomic Design&#34;&gt;Atomic Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jancbeck.com/articles/btconf-brad-frost/&#34; title=&#34;Brad Frost @ #BTCONF&#34;&gt;Brad Frost @ #BTCONF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://notebookandpenguin.com/atomic-design-makes-me-feel-like-a-chemist/&#34; title=&#34;Atomic Design Makes me Feel Like a Chemist&#34;&gt;Atomic Design Makes Me Feel Like a Chemist&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Design Responsivo na prática: do rascunho ao digital</title>
      <link>http://tableless.com.br/design-responsivo-na-pratica-do-rascunho-ao-digita/</link>
      <pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/design-responsivo-na-pratica-do-rascunho-ao-digita/</guid>
      <description>

&lt;p&gt;Você já convenceu o seu chefe ou cliente que &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34; title=&#34;O que é Design Responsivo?&#34;&gt;Design Responsivo&lt;/a&gt; é a última bolacha de chocolate do pacote, já sabe como trabalhar com media queries e como desenvolver códigos bonitos, semânticos e cheirosos. Mas a dúvida ainda persiste &amp;#8211; por onde começar? Você não está sozinho. Esta é uma dúvida bem frequente. Por isto resolvi escrever um artigo básico só com dicas de prototipagem para design responsivo coletando algumas ferramentas úteis, artigos interessantes e comentando também um pouco da minha experiência pessoal ao lidar com o assunto no dia-a-dia gerindo um pequeno estúdio de webdesign.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos criar juntos um layout do wireframe ao design final. Assim você poderá acompanhar um processo passo-a-passo e adapta-lo para o seu fluxo de trabalho pessoal. Não tenho a pretensão de criar um guia definitivo, nem comentar técnicas de desenvolvimento mais avançadas. Mas tenho certeza que estas dicas vão ser um bom ponto de partida para você iniciar o seu projeto. Vamos a elas!&lt;/p&gt;

&lt;h2 id=&#34;o-conteúdo-é-o-rei&#34;&gt;O conteúdo é o rei&lt;/h2&gt;

&lt;p&gt;O primeiro passo para projetar &amp;#8211; não apenas um site responsivo, mas qualquer layout para a internet &amp;#8211; é o inventório de conteúdo. É ele que vai ditar qual é a melhor estrutura para o layout. Raramente o seu cliente vai possuir os textos, videos e imagens finais prontinhos para você diagramar. Mas o ideal é sempre ter ao menos uma noção de qual é o &lt;strong&gt;tipo&lt;/strong&gt; de conteúdo que você pretende utilizar. Para isto é importante montar um briefing &amp;#8211; sim, mesmo se o site for para você mesmo. Isto pode variar bastante de complexidade, mas o ideal é saber a resposta de algumas perguntas básicas sobre o tipo de conteúdo que você pretende apresentar para o mundo. O que você pretende exibir na página inicial? Notícias? Serviços? Produtos? Imagens? Qual o tamanho médio dos textos? Existirá um espaço destinado a anúncios publicitários? Qual é o formato do logotipo? Com estas respostas em mãos esta na hora de organizar todos estes elementos em uma estrutura lógica.&lt;/p&gt;

&lt;p&gt;Vamos então projetar um layout de uma página inicial de uma empresa fictícia que deve conter as seguintes informações:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;logotipo&lt;/li&gt;
&lt;li&gt;navegação&lt;/li&gt;
&lt;li&gt;banner apresentando produtos e serviços&lt;/li&gt;
&lt;li&gt;blocos com imagens e textos curtos&lt;/li&gt;
&lt;li&gt;créditos&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;por-onde-começar-o-layout&#34;&gt;Por onde começar o layout?&lt;/h2&gt;

&lt;p&gt;A resposta é bem simples. Pelo papel. Não importa se você vai usar um bloco de notas velho, o verso de um guardanapo, um &lt;a href=&#34;http://sneakpeekit.com/&#34; title=&#34;Sneakpeekit&#34;&gt;template impresso da internet&lt;/a&gt; ou um &lt;a href=&#34;http://appsketchbook.com/&#34; title=&#34;App Sketchbook&#34;&gt;caderno especialmente projetado&lt;/a&gt; para este fim, comece por um rascunho de wireframe no papel. Eu costumo desenhar basicamente duas coisas. Uma teia de navegação (&amp;#8220;Que-link-leva-para-onde&amp;#8221;) e o esqueleto básico do site. Não precisa ficar bonito. Minha habilidade para desenho se resume em bonecos de palito e partidas de Drawsome com estranhos da internet. Ainda assim é fácil criar um wireframe. Use quadrados para imagens e linhas para texto. O importante é você &amp;#8211; e o resto da sua equipe se for o caso &amp;#8211; terem um ponto de partida. O ideal é criar ao menos três versões principais: desktops, tablets e smartphones. Estas categorias são meio utópicas já que existem centenas de dispositivos que ficam no meio termo, mas você precisa ter um ponto de partida, certo? Escolher por qual dos três esqueletos começar é uma questão bem pessoal. Alguns advogam firmemente o mobile first, mas aqui por uma questão de didática vou começar pelo desktop.&lt;/p&gt;

&lt;h2 id=&#34;grids-são-seus-amigos&#34;&gt;Grids são seus amigos&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é basicamente como montar um quebra cabeça onde você pode esticar, encolher, quebrar e dobrar estruturas. Realizar esta tarefa será muito mais fácil se você construir um layout sustentado por um grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Não é absolutamente necessário utilizar um grid em seu CSS (embora seja uma prática recomendável), mas se o seu wireframe básico estiver organizado neste formato ajuda bastante na hora de projetar o design de maneira mais fluida, simétrica e organizada. Isto por que você pode simplesmente re-arranjar os blocos e colunas do seu layout de maneira mais lógica e matemática, o que vai refletir em uma maior coesão do design final.&lt;/p&gt;

&lt;p&gt;Esta parte do fluxo de trabalho é bem parecida com criar um layout para design &amp;#8220;normal&amp;#8221;. O primeiro passo portanto é criar o tal do grid, basicamente um conjunto de linhas &amp;#8220;invisiveis&amp;#8221; que vão sustentar o seu design. Pense que você vai ter que quebrar esta estrutura em pedaços menores e, para manter a simetria o ideal é escolher um número par que possa ser divisível por 2, 3 e/ou 4&amp;#8230; Por isto grids de 12, 16, 18 ou 24 colunas são bem comuns. (Você pode escolher o número que quiser. Eu mesma já trabalhei com 14 colunas. Deu mais trabalho. Não diga que não avisei&amp;#8230; ). Não se esqueça do espaço das margens entre as colunas.&lt;/p&gt;

&lt;h2 id=&#34;o-wireframe&#34;&gt;O wireframe&lt;/h2&gt;

&lt;p&gt;Se você precisar reescrever completamente todos os elementos do CSS você está fazendo design adaptativo, o que tem seus métodos mas não é responsivo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é focado na economia. Economia de tempo, economia de peso de arquivos, economia de código. Pense em escrever estruturas que, embora sofram adaptações, possam ser re-aproveitadas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;desktops&#34;&gt;Desktops&lt;/h3&gt;

&lt;p&gt;Este é o exemplo de wireframe que vamos criar passo-a-passo para o nosso exemplo. A estrutura é bem simples: um logotipo no canto superior esquerdo, um menu no topo a direita, um banner, 4 destaques com texto e foto e um rodapé.&lt;/p&gt;

&lt;p&gt;Este é o meu rascunho inicial:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27002&#34; alt=&#34;wireframe-sketch&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-sketch1.jpg&#34; width=&#34;660&#34; height=&#34;708&#34; srcset=&#34;uploads/2013/04/wireframe-sketch1.jpg 660w, uploads/2013/04/wireframe-sketch1-156x168.jpg 156w, uploads/2013/04/wireframe-sketch1-288x310.jpg 288w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora o mesmo modelo recriado no Photoshop:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27021&#34; alt=&#34;wireframe-desktop&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-desktop.jpg&#34; width=&#34;660&#34; height=&#34;666&#34; srcset=&#34;uploads/2013/04/wireframe-desktop.jpg 660w, uploads/2013/04/wireframe-desktop-166x168.jpg 166w, uploads/2013/04/wireframe-desktop-307x310.jpg 307w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;tablets&#34;&gt;Tablets&lt;/h3&gt;

&lt;p&gt;A técnica para adaptar esta estrutura para as outras versões é simples. Diminua o número de colunas no grid. Se inicialmente tinhamos 16 colunas no desktop, teremos 10 no tablet e 4 no smartphone, por exemplo. O conteúdo deve se re-arranjar para caber nesta estrutura menor. Então no tablet ao invés de 4 destaques lado-a-lado temos 2 fileiras com 2 destaques cada. Para adequar-se a estas mudanças as imagens ficaram maiores. Outra modificação foi um ajuste  no tamanho do texto do menu.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26973&#34; alt=&#34;wireframe-tablet&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-tablet.jpg&#34; width=&#34;660&#34; height=&#34;894&#34; srcset=&#34;uploads/2013/04/wireframe-tablet.jpg 660w, uploads/2013/04/wireframe-tablet-124x168.jpg 124w, uploads/2013/04/wireframe-tablet-228x310.jpg 228w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;smartphones&#34;&gt;Smartphones&lt;/h3&gt;

&lt;p&gt;Como a tela dos smartphones é ainda menor, é necessário re-arranjar as estruturas novamente e fazer alguns outros ajustes. Isto não significa necessariamente diminuir os elementos de tamanho. Lembre-se que a maior parte dos dispositivos móveis utilizam touch screens. Você deve adaptar os elementos considerando esta área de toque. Links muito pequenos e juntinhos são difíceis selecionar. O ideal é que o usuário possa navegar no site sem precisar dar zoom. Por isto optei por colapsar os elementos em um menu drop-down. Os destaques agora ocupam o espaço total do wrap. Optei por juntar os 4 destaques em uma navegação estilo slider (navegáveis através de seletores em forma de &amp;#8220;bolinhas&amp;#8221;). Outra mudança estetica significativa foi o banner. Como pretendo incluir texto em HTML  com os serviços principais da empresa optei por deixa-lo em uma caixa preta abaixo da foto. Desta maneira as imagens ficam mais visíveis e o formato não prejudica a leitura do texto.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26972&#34; alt=&#34;wireframe-smartphone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-smartphone.jpg&#34; width=&#34;660&#34; height=&#34;1102&#34; srcset=&#34;uploads/2013/04/wireframe-smartphone.jpg 660w, uploads/2013/04/wireframe-smartphone-100x168.jpg 100w, uploads/2013/04/wireframe-smartphone-185x310.jpg 185w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resoluções&#34;&gt;Resoluções&lt;/h2&gt;

&lt;p&gt;Existem dezenas de resoluções diferentes e, embora este seja o objetivo final, é bem difícil ter um layout que vai ficar perfeito a cada ponto de quebra (difícil, não impossível). O ideal, portanto, é ter em mente quais são os formatos mais comuns e focalizar para que ao menos nestes estágios o design esteja funcionando perfeitamente. Considere portanto estas resoluções básicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1200 pixels &amp;#8211; Desktops com monitores widescreen.&lt;/li&gt;
&lt;li&gt;960 pixels &amp;#8211; Tablets em formato paisagem e monitores antigos.&lt;/li&gt;
&lt;li&gt;768 pixels &amp;#8211; Tablets em formato retrato.&lt;/li&gt;
&lt;li&gt;480 pixels &amp;#8211; Smartphones em formato paisagem.&lt;/li&gt;
&lt;li&gt;320 pixels &amp;#8211; Smartphones em formato retrato.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para testar o seu HTML final em diferentes resoluções você pode utilizar algum add-on ou &lt;a href=&#34;http://seesparkbox.com/foundry/media_query_bookmarklet&#34; title=&#34;Media Query Bookmarklet&#34;&gt;bookmarklet&lt;/a&gt; para o seu browser. Outra dica super prática é um [Você já convenceu o seu chefe ou cliente que &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34; title=&#34;O que é Design Responsivo?&#34;&gt;Design Responsivo&lt;/a&gt; é a última bolacha de chocolate do pacote, já sabe como trabalhar com media queries e como desenvolver códigos bonitos, semânticos e cheirosos. Mas a dúvida ainda persiste &amp;#8211; por onde começar? Você não está sozinho. Esta é uma dúvida bem frequente. Por isto resolvi escrever um artigo básico só com dicas de prototipagem para design responsivo coletando algumas ferramentas úteis, artigos interessantes e comentando também um pouco da minha experiência pessoal ao lidar com o assunto no dia-a-dia gerindo um pequeno estúdio de webdesign.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos criar juntos um layout do wireframe ao design final. Assim você poderá acompanhar um processo passo-a-passo e adapta-lo para o seu fluxo de trabalho pessoal. Não tenho a pretensão de criar um guia definitivo, nem comentar técnicas de desenvolvimento mais avançadas. Mas tenho certeza que estas dicas vão ser um bom ponto de partida para você iniciar o seu projeto. Vamos a elas!&lt;/p&gt;

&lt;h2 id=&#34;o-conteúdo-é-o-rei-1&#34;&gt;O conteúdo é o rei&lt;/h2&gt;

&lt;p&gt;O primeiro passo para projetar &amp;#8211; não apenas um site responsivo, mas qualquer layout para a internet &amp;#8211; é o inventório de conteúdo. É ele que vai ditar qual é a melhor estrutura para o layout. Raramente o seu cliente vai possuir os textos, videos e imagens finais prontinhos para você diagramar. Mas o ideal é sempre ter ao menos uma noção de qual é o &lt;strong&gt;tipo&lt;/strong&gt; de conteúdo que você pretende utilizar. Para isto é importante montar um briefing &amp;#8211; sim, mesmo se o site for para você mesmo. Isto pode variar bastante de complexidade, mas o ideal é saber a resposta de algumas perguntas básicas sobre o tipo de conteúdo que você pretende apresentar para o mundo. O que você pretende exibir na página inicial? Notícias? Serviços? Produtos? Imagens? Qual o tamanho médio dos textos? Existirá um espaço destinado a anúncios publicitários? Qual é o formato do logotipo? Com estas respostas em mãos esta na hora de organizar todos estes elementos em uma estrutura lógica.&lt;/p&gt;

&lt;p&gt;Vamos então projetar um layout de uma página inicial de uma empresa fictícia que deve conter as seguintes informações:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;logotipo&lt;/li&gt;
&lt;li&gt;navegação&lt;/li&gt;
&lt;li&gt;banner apresentando produtos e serviços&lt;/li&gt;
&lt;li&gt;blocos com imagens e textos curtos&lt;/li&gt;
&lt;li&gt;créditos&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;por-onde-começar-o-layout-1&#34;&gt;Por onde começar o layout?&lt;/h2&gt;

&lt;p&gt;A resposta é bem simples. Pelo papel. Não importa se você vai usar um bloco de notas velho, o verso de um guardanapo, um &lt;a href=&#34;http://sneakpeekit.com/&#34; title=&#34;Sneakpeekit&#34;&gt;template impresso da internet&lt;/a&gt; ou um &lt;a href=&#34;http://appsketchbook.com/&#34; title=&#34;App Sketchbook&#34;&gt;caderno especialmente projetado&lt;/a&gt; para este fim, comece por um rascunho de wireframe no papel. Eu costumo desenhar basicamente duas coisas. Uma teia de navegação (&amp;#8220;Que-link-leva-para-onde&amp;#8221;) e o esqueleto básico do site. Não precisa ficar bonito. Minha habilidade para desenho se resume em bonecos de palito e partidas de Drawsome com estranhos da internet. Ainda assim é fácil criar um wireframe. Use quadrados para imagens e linhas para texto. O importante é você &amp;#8211; e o resto da sua equipe se for o caso &amp;#8211; terem um ponto de partida. O ideal é criar ao menos três versões principais: desktops, tablets e smartphones. Estas categorias são meio utópicas já que existem centenas de dispositivos que ficam no meio termo, mas você precisa ter um ponto de partida, certo? Escolher por qual dos três esqueletos começar é uma questão bem pessoal. Alguns advogam firmemente o mobile first, mas aqui por uma questão de didática vou começar pelo desktop.&lt;/p&gt;

&lt;h2 id=&#34;grids-são-seus-amigos-1&#34;&gt;Grids são seus amigos&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é basicamente como montar um quebra cabeça onde você pode esticar, encolher, quebrar e dobrar estruturas. Realizar esta tarefa será muito mais fácil se você construir um layout sustentado por um grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Não é absolutamente necessário utilizar um grid em seu CSS (embora seja uma prática recomendável), mas se o seu wireframe básico estiver organizado neste formato ajuda bastante na hora de projetar o design de maneira mais fluida, simétrica e organizada. Isto por que você pode simplesmente re-arranjar os blocos e colunas do seu layout de maneira mais lógica e matemática, o que vai refletir em uma maior coesão do design final.&lt;/p&gt;

&lt;p&gt;Esta parte do fluxo de trabalho é bem parecida com criar um layout para design &amp;#8220;normal&amp;#8221;. O primeiro passo portanto é criar o tal do grid, basicamente um conjunto de linhas &amp;#8220;invisiveis&amp;#8221; que vão sustentar o seu design. Pense que você vai ter que quebrar esta estrutura em pedaços menores e, para manter a simetria o ideal é escolher um número par que possa ser divisível por 2, 3 e/ou 4&amp;#8230; Por isto grids de 12, 16, 18 ou 24 colunas são bem comuns. (Você pode escolher o número que quiser. Eu mesma já trabalhei com 14 colunas. Deu mais trabalho. Não diga que não avisei&amp;#8230; ). Não se esqueça do espaço das margens entre as colunas.&lt;/p&gt;

&lt;h2 id=&#34;o-wireframe-1&#34;&gt;O wireframe&lt;/h2&gt;

&lt;p&gt;Se você precisar reescrever completamente todos os elementos do CSS você está fazendo design adaptativo, o que tem seus métodos mas não é responsivo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é focado na economia. Economia de tempo, economia de peso de arquivos, economia de código. Pense em escrever estruturas que, embora sofram adaptações, possam ser re-aproveitadas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;desktops-1&#34;&gt;Desktops&lt;/h3&gt;

&lt;p&gt;Este é o exemplo de wireframe que vamos criar passo-a-passo para o nosso exemplo. A estrutura é bem simples: um logotipo no canto superior esquerdo, um menu no topo a direita, um banner, 4 destaques com texto e foto e um rodapé.&lt;/p&gt;

&lt;p&gt;Este é o meu rascunho inicial:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27002&#34; alt=&#34;wireframe-sketch&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-sketch1.jpg&#34; width=&#34;660&#34; height=&#34;708&#34; srcset=&#34;uploads/2013/04/wireframe-sketch1.jpg 660w, uploads/2013/04/wireframe-sketch1-156x168.jpg 156w, uploads/2013/04/wireframe-sketch1-288x310.jpg 288w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora o mesmo modelo recriado no Photoshop:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27021&#34; alt=&#34;wireframe-desktop&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-desktop.jpg&#34; width=&#34;660&#34; height=&#34;666&#34; srcset=&#34;uploads/2013/04/wireframe-desktop.jpg 660w, uploads/2013/04/wireframe-desktop-166x168.jpg 166w, uploads/2013/04/wireframe-desktop-307x310.jpg 307w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;tablets-1&#34;&gt;Tablets&lt;/h3&gt;

&lt;p&gt;A técnica para adaptar esta estrutura para as outras versões é simples. Diminua o número de colunas no grid. Se inicialmente tinhamos 16 colunas no desktop, teremos 10 no tablet e 4 no smartphone, por exemplo. O conteúdo deve se re-arranjar para caber nesta estrutura menor. Então no tablet ao invés de 4 destaques lado-a-lado temos 2 fileiras com 2 destaques cada. Para adequar-se a estas mudanças as imagens ficaram maiores. Outra modificação foi um ajuste  no tamanho do texto do menu.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26973&#34; alt=&#34;wireframe-tablet&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-tablet.jpg&#34; width=&#34;660&#34; height=&#34;894&#34; srcset=&#34;uploads/2013/04/wireframe-tablet.jpg 660w, uploads/2013/04/wireframe-tablet-124x168.jpg 124w, uploads/2013/04/wireframe-tablet-228x310.jpg 228w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;smartphones-1&#34;&gt;Smartphones&lt;/h3&gt;

&lt;p&gt;Como a tela dos smartphones é ainda menor, é necessário re-arranjar as estruturas novamente e fazer alguns outros ajustes. Isto não significa necessariamente diminuir os elementos de tamanho. Lembre-se que a maior parte dos dispositivos móveis utilizam touch screens. Você deve adaptar os elementos considerando esta área de toque. Links muito pequenos e juntinhos são difíceis selecionar. O ideal é que o usuário possa navegar no site sem precisar dar zoom. Por isto optei por colapsar os elementos em um menu drop-down. Os destaques agora ocupam o espaço total do wrap. Optei por juntar os 4 destaques em uma navegação estilo slider (navegáveis através de seletores em forma de &amp;#8220;bolinhas&amp;#8221;). Outra mudança estetica significativa foi o banner. Como pretendo incluir texto em HTML  com os serviços principais da empresa optei por deixa-lo em uma caixa preta abaixo da foto. Desta maneira as imagens ficam mais visíveis e o formato não prejudica a leitura do texto.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26972&#34; alt=&#34;wireframe-smartphone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-smartphone.jpg&#34; width=&#34;660&#34; height=&#34;1102&#34; srcset=&#34;uploads/2013/04/wireframe-smartphone.jpg 660w, uploads/2013/04/wireframe-smartphone-100x168.jpg 100w, uploads/2013/04/wireframe-smartphone-185x310.jpg 185w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resoluções-1&#34;&gt;Resoluções&lt;/h2&gt;

&lt;p&gt;Existem dezenas de resoluções diferentes e, embora este seja o objetivo final, é bem difícil ter um layout que vai ficar perfeito a cada ponto de quebra (difícil, não impossível). O ideal, portanto, é ter em mente quais são os formatos mais comuns e focalizar para que ao menos nestes estágios o design esteja funcionando perfeitamente. Considere portanto estas resoluções básicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1200 pixels &amp;#8211; Desktops com monitores widescreen.&lt;/li&gt;
&lt;li&gt;960 pixels &amp;#8211; Tablets em formato paisagem e monitores antigos.&lt;/li&gt;
&lt;li&gt;768 pixels &amp;#8211; Tablets em formato retrato.&lt;/li&gt;
&lt;li&gt;480 pixels &amp;#8211; Smartphones em formato paisagem.&lt;/li&gt;
&lt;li&gt;320 pixels &amp;#8211; Smartphones em formato retrato.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para testar o seu HTML final em diferentes resoluções você pode utilizar algum add-on ou &lt;a href=&#34;http://seesparkbox.com/foundry/media_query_bookmarklet&#34; title=&#34;Media Query Bookmarklet&#34;&gt;bookmarklet&lt;/a&gt; para o seu browser. Outra dica super prática é um]&lt;a href=&#34;http://www.envisionsuccess.net/images/responsive-guide.jpg&#34; title=&#34;Responsive Guide Wallpaper&#34;&gt;5&lt;/a&gt; com marcações em pixels.&lt;/p&gt;

&lt;h2 id=&#34;o-mock-up&#34;&gt;O mock-up&lt;/h2&gt;

&lt;p&gt;Hora de criar esta estrutura no seu programa gráfico favorito. Você pode montar o seu próprio grid utilizando linhas guias ou baixar um modelo pronto como o &lt;a href=&#34;http://dribbble.com/shots/410635-Responsive-Grid-PSD/&#34; title=&#34;Responsive Grid PSD&#34;&gt;Responsive Grid PSD&lt;/a&gt; ou o &lt;a href=&#34;http://framelessgrid.com/&#34; title=&#34;Frameless&#34;&gt;Frameless&lt;/a&gt;. Para este tutorial utilizei uma versão modificada do Frameless que você pode &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/04/grid.zip&#34; title=&#34;Grid&#34;&gt;baixar aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;nota-sobre-retina-display&#34;&gt;Nota sobre retina display&lt;/h3&gt;

&lt;p&gt;É importante ter em mente que alguns aparelhos tem a densidade de pixels superior a 1. É interessante, em termos de qualidade de apresentação do layout, criar um arquivo com o dobro da resolução nestes casos. Então dobre o tamanho do seu PSD na versão para smartphones (o que significa um mockup de 960x640px). Assim, na hora de exportar os elementos, você pode criar imagens em alta resolução para dispositivos retina.&lt;/p&gt;

&lt;h3 id=&#34;apresentação&#34;&gt;Apresentação&lt;/h3&gt;

&lt;p&gt;Na minha empresa criamos modelos estáticos para serem aprovados pelos clientes antes de partirmos para etapa de desenvolvimento do HTML/CSS. Na minha experiência, mesmo se nenhum conteúdo for fornecido previamente, fazer um esforcinho a mais e utilizar imagens e textos parecidas com as finais ajudar o seu layout a ser aprovado. Isto acontece por que, ao contrário de nós designers e desenvolvedores, as pessoas &amp;#8220;normais&amp;#8221; possuem naturalmente uma certa dificuldade de abstrair que aqueles quadrados e caixinhas são um site. Adicionar imagens e textos a um tema pode dar mais trabalho, mas é acrescentar contexto e propósito ao seu design, o que por sua vez causa muito mais empatia e identificação.&lt;/p&gt;

&lt;p&gt;Para o nosso exemplo criei a empresa fictícia Space Tour.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26991&#34; alt=&#34;wifreframe&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wifreframe.jpg&#34; width=&#34;660&#34; height=&#34;672&#34; srcset=&#34;uploads/2013/04/wifreframe.jpg 660w, uploads/2013/04/wifreframe-165x168.jpg 165w, uploads/2013/04/wifreframe-304x310.jpg 304w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mesmo com um conteúdo falso aplicado ainda é difícil de imaginar como o produto final vai se comportar online, principalmente no caso de dispositivos móveis. Para que o cliente possa visualizar como o layout vai se comportar é interessante utilizar mock-ups de hardwares reais. Basta procurar no Google que existem diversos recursos gratuitos para este fim. O site &lt;a href=&#34;http://www.psdcovers.com/&#34; title=&#34;PSD Covers&#34;&gt;PSD Covers&lt;/a&gt;, por exemplo, possui actions e templates de Photoshop em alta resolução que podem ajudar bastante na apresentação final. O [Você já convenceu o seu chefe ou cliente que &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34; title=&#34;O que é Design Responsivo?&#34;&gt;Design Responsivo&lt;/a&gt; é a última bolacha de chocolate do pacote, já sabe como trabalhar com media queries e como desenvolver códigos bonitos, semânticos e cheirosos. Mas a dúvida ainda persiste &amp;#8211; por onde começar? Você não está sozinho. Esta é uma dúvida bem frequente. Por isto resolvi escrever um artigo básico só com dicas de prototipagem para design responsivo coletando algumas ferramentas úteis, artigos interessantes e comentando também um pouco da minha experiência pessoal ao lidar com o assunto no dia-a-dia gerindo um pequeno estúdio de webdesign.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos criar juntos um layout do wireframe ao design final. Assim você poderá acompanhar um processo passo-a-passo e adapta-lo para o seu fluxo de trabalho pessoal. Não tenho a pretensão de criar um guia definitivo, nem comentar técnicas de desenvolvimento mais avançadas. Mas tenho certeza que estas dicas vão ser um bom ponto de partida para você iniciar o seu projeto. Vamos a elas!&lt;/p&gt;

&lt;h2 id=&#34;o-conteúdo-é-o-rei-2&#34;&gt;O conteúdo é o rei&lt;/h2&gt;

&lt;p&gt;O primeiro passo para projetar &amp;#8211; não apenas um site responsivo, mas qualquer layout para a internet &amp;#8211; é o inventório de conteúdo. É ele que vai ditar qual é a melhor estrutura para o layout. Raramente o seu cliente vai possuir os textos, videos e imagens finais prontinhos para você diagramar. Mas o ideal é sempre ter ao menos uma noção de qual é o &lt;strong&gt;tipo&lt;/strong&gt; de conteúdo que você pretende utilizar. Para isto é importante montar um briefing &amp;#8211; sim, mesmo se o site for para você mesmo. Isto pode variar bastante de complexidade, mas o ideal é saber a resposta de algumas perguntas básicas sobre o tipo de conteúdo que você pretende apresentar para o mundo. O que você pretende exibir na página inicial? Notícias? Serviços? Produtos? Imagens? Qual o tamanho médio dos textos? Existirá um espaço destinado a anúncios publicitários? Qual é o formato do logotipo? Com estas respostas em mãos esta na hora de organizar todos estes elementos em uma estrutura lógica.&lt;/p&gt;

&lt;p&gt;Vamos então projetar um layout de uma página inicial de uma empresa fictícia que deve conter as seguintes informações:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;logotipo&lt;/li&gt;
&lt;li&gt;navegação&lt;/li&gt;
&lt;li&gt;banner apresentando produtos e serviços&lt;/li&gt;
&lt;li&gt;blocos com imagens e textos curtos&lt;/li&gt;
&lt;li&gt;créditos&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;por-onde-começar-o-layout-2&#34;&gt;Por onde começar o layout?&lt;/h2&gt;

&lt;p&gt;A resposta é bem simples. Pelo papel. Não importa se você vai usar um bloco de notas velho, o verso de um guardanapo, um &lt;a href=&#34;http://sneakpeekit.com/&#34; title=&#34;Sneakpeekit&#34;&gt;template impresso da internet&lt;/a&gt; ou um &lt;a href=&#34;http://appsketchbook.com/&#34; title=&#34;App Sketchbook&#34;&gt;caderno especialmente projetado&lt;/a&gt; para este fim, comece por um rascunho de wireframe no papel. Eu costumo desenhar basicamente duas coisas. Uma teia de navegação (&amp;#8220;Que-link-leva-para-onde&amp;#8221;) e o esqueleto básico do site. Não precisa ficar bonito. Minha habilidade para desenho se resume em bonecos de palito e partidas de Drawsome com estranhos da internet. Ainda assim é fácil criar um wireframe. Use quadrados para imagens e linhas para texto. O importante é você &amp;#8211; e o resto da sua equipe se for o caso &amp;#8211; terem um ponto de partida. O ideal é criar ao menos três versões principais: desktops, tablets e smartphones. Estas categorias são meio utópicas já que existem centenas de dispositivos que ficam no meio termo, mas você precisa ter um ponto de partida, certo? Escolher por qual dos três esqueletos começar é uma questão bem pessoal. Alguns advogam firmemente o mobile first, mas aqui por uma questão de didática vou começar pelo desktop.&lt;/p&gt;

&lt;h2 id=&#34;grids-são-seus-amigos-2&#34;&gt;Grids são seus amigos&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é basicamente como montar um quebra cabeça onde você pode esticar, encolher, quebrar e dobrar estruturas. Realizar esta tarefa será muito mais fácil se você construir um layout sustentado por um grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Não é absolutamente necessário utilizar um grid em seu CSS (embora seja uma prática recomendável), mas se o seu wireframe básico estiver organizado neste formato ajuda bastante na hora de projetar o design de maneira mais fluida, simétrica e organizada. Isto por que você pode simplesmente re-arranjar os blocos e colunas do seu layout de maneira mais lógica e matemática, o que vai refletir em uma maior coesão do design final.&lt;/p&gt;

&lt;p&gt;Esta parte do fluxo de trabalho é bem parecida com criar um layout para design &amp;#8220;normal&amp;#8221;. O primeiro passo portanto é criar o tal do grid, basicamente um conjunto de linhas &amp;#8220;invisiveis&amp;#8221; que vão sustentar o seu design. Pense que você vai ter que quebrar esta estrutura em pedaços menores e, para manter a simetria o ideal é escolher um número par que possa ser divisível por 2, 3 e/ou 4&amp;#8230; Por isto grids de 12, 16, 18 ou 24 colunas são bem comuns. (Você pode escolher o número que quiser. Eu mesma já trabalhei com 14 colunas. Deu mais trabalho. Não diga que não avisei&amp;#8230; ). Não se esqueça do espaço das margens entre as colunas.&lt;/p&gt;

&lt;h2 id=&#34;o-wireframe-2&#34;&gt;O wireframe&lt;/h2&gt;

&lt;p&gt;Se você precisar reescrever completamente todos os elementos do CSS você está fazendo design adaptativo, o que tem seus métodos mas não é responsivo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é focado na economia. Economia de tempo, economia de peso de arquivos, economia de código. Pense em escrever estruturas que, embora sofram adaptações, possam ser re-aproveitadas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;desktops-2&#34;&gt;Desktops&lt;/h3&gt;

&lt;p&gt;Este é o exemplo de wireframe que vamos criar passo-a-passo para o nosso exemplo. A estrutura é bem simples: um logotipo no canto superior esquerdo, um menu no topo a direita, um banner, 4 destaques com texto e foto e um rodapé.&lt;/p&gt;

&lt;p&gt;Este é o meu rascunho inicial:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27002&#34; alt=&#34;wireframe-sketch&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-sketch1.jpg&#34; width=&#34;660&#34; height=&#34;708&#34; srcset=&#34;uploads/2013/04/wireframe-sketch1.jpg 660w, uploads/2013/04/wireframe-sketch1-156x168.jpg 156w, uploads/2013/04/wireframe-sketch1-288x310.jpg 288w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora o mesmo modelo recriado no Photoshop:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27021&#34; alt=&#34;wireframe-desktop&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-desktop.jpg&#34; width=&#34;660&#34; height=&#34;666&#34; srcset=&#34;uploads/2013/04/wireframe-desktop.jpg 660w, uploads/2013/04/wireframe-desktop-166x168.jpg 166w, uploads/2013/04/wireframe-desktop-307x310.jpg 307w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;tablets-2&#34;&gt;Tablets&lt;/h3&gt;

&lt;p&gt;A técnica para adaptar esta estrutura para as outras versões é simples. Diminua o número de colunas no grid. Se inicialmente tinhamos 16 colunas no desktop, teremos 10 no tablet e 4 no smartphone, por exemplo. O conteúdo deve se re-arranjar para caber nesta estrutura menor. Então no tablet ao invés de 4 destaques lado-a-lado temos 2 fileiras com 2 destaques cada. Para adequar-se a estas mudanças as imagens ficaram maiores. Outra modificação foi um ajuste  no tamanho do texto do menu.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26973&#34; alt=&#34;wireframe-tablet&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-tablet.jpg&#34; width=&#34;660&#34; height=&#34;894&#34; srcset=&#34;uploads/2013/04/wireframe-tablet.jpg 660w, uploads/2013/04/wireframe-tablet-124x168.jpg 124w, uploads/2013/04/wireframe-tablet-228x310.jpg 228w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;smartphones-2&#34;&gt;Smartphones&lt;/h3&gt;

&lt;p&gt;Como a tela dos smartphones é ainda menor, é necessário re-arranjar as estruturas novamente e fazer alguns outros ajustes. Isto não significa necessariamente diminuir os elementos de tamanho. Lembre-se que a maior parte dos dispositivos móveis utilizam touch screens. Você deve adaptar os elementos considerando esta área de toque. Links muito pequenos e juntinhos são difíceis selecionar. O ideal é que o usuário possa navegar no site sem precisar dar zoom. Por isto optei por colapsar os elementos em um menu drop-down. Os destaques agora ocupam o espaço total do wrap. Optei por juntar os 4 destaques em uma navegação estilo slider (navegáveis através de seletores em forma de &amp;#8220;bolinhas&amp;#8221;). Outra mudança estetica significativa foi o banner. Como pretendo incluir texto em HTML  com os serviços principais da empresa optei por deixa-lo em uma caixa preta abaixo da foto. Desta maneira as imagens ficam mais visíveis e o formato não prejudica a leitura do texto.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26972&#34; alt=&#34;wireframe-smartphone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-smartphone.jpg&#34; width=&#34;660&#34; height=&#34;1102&#34; srcset=&#34;uploads/2013/04/wireframe-smartphone.jpg 660w, uploads/2013/04/wireframe-smartphone-100x168.jpg 100w, uploads/2013/04/wireframe-smartphone-185x310.jpg 185w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resoluções-2&#34;&gt;Resoluções&lt;/h2&gt;

&lt;p&gt;Existem dezenas de resoluções diferentes e, embora este seja o objetivo final, é bem difícil ter um layout que vai ficar perfeito a cada ponto de quebra (difícil, não impossível). O ideal, portanto, é ter em mente quais são os formatos mais comuns e focalizar para que ao menos nestes estágios o design esteja funcionando perfeitamente. Considere portanto estas resoluções básicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1200 pixels &amp;#8211; Desktops com monitores widescreen.&lt;/li&gt;
&lt;li&gt;960 pixels &amp;#8211; Tablets em formato paisagem e monitores antigos.&lt;/li&gt;
&lt;li&gt;768 pixels &amp;#8211; Tablets em formato retrato.&lt;/li&gt;
&lt;li&gt;480 pixels &amp;#8211; Smartphones em formato paisagem.&lt;/li&gt;
&lt;li&gt;320 pixels &amp;#8211; Smartphones em formato retrato.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para testar o seu HTML final em diferentes resoluções você pode utilizar algum add-on ou &lt;a href=&#34;http://seesparkbox.com/foundry/media_query_bookmarklet&#34; title=&#34;Media Query Bookmarklet&#34;&gt;bookmarklet&lt;/a&gt; para o seu browser. Outra dica super prática é um [Você já convenceu o seu chefe ou cliente que &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34; title=&#34;O que é Design Responsivo?&#34;&gt;Design Responsivo&lt;/a&gt; é a última bolacha de chocolate do pacote, já sabe como trabalhar com media queries e como desenvolver códigos bonitos, semânticos e cheirosos. Mas a dúvida ainda persiste &amp;#8211; por onde começar? Você não está sozinho. Esta é uma dúvida bem frequente. Por isto resolvi escrever um artigo básico só com dicas de prototipagem para design responsivo coletando algumas ferramentas úteis, artigos interessantes e comentando também um pouco da minha experiência pessoal ao lidar com o assunto no dia-a-dia gerindo um pequeno estúdio de webdesign.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos criar juntos um layout do wireframe ao design final. Assim você poderá acompanhar um processo passo-a-passo e adapta-lo para o seu fluxo de trabalho pessoal. Não tenho a pretensão de criar um guia definitivo, nem comentar técnicas de desenvolvimento mais avançadas. Mas tenho certeza que estas dicas vão ser um bom ponto de partida para você iniciar o seu projeto. Vamos a elas!&lt;/p&gt;

&lt;h2 id=&#34;o-conteúdo-é-o-rei-3&#34;&gt;O conteúdo é o rei&lt;/h2&gt;

&lt;p&gt;O primeiro passo para projetar &amp;#8211; não apenas um site responsivo, mas qualquer layout para a internet &amp;#8211; é o inventório de conteúdo. É ele que vai ditar qual é a melhor estrutura para o layout. Raramente o seu cliente vai possuir os textos, videos e imagens finais prontinhos para você diagramar. Mas o ideal é sempre ter ao menos uma noção de qual é o &lt;strong&gt;tipo&lt;/strong&gt; de conteúdo que você pretende utilizar. Para isto é importante montar um briefing &amp;#8211; sim, mesmo se o site for para você mesmo. Isto pode variar bastante de complexidade, mas o ideal é saber a resposta de algumas perguntas básicas sobre o tipo de conteúdo que você pretende apresentar para o mundo. O que você pretende exibir na página inicial? Notícias? Serviços? Produtos? Imagens? Qual o tamanho médio dos textos? Existirá um espaço destinado a anúncios publicitários? Qual é o formato do logotipo? Com estas respostas em mãos esta na hora de organizar todos estes elementos em uma estrutura lógica.&lt;/p&gt;

&lt;p&gt;Vamos então projetar um layout de uma página inicial de uma empresa fictícia que deve conter as seguintes informações:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;logotipo&lt;/li&gt;
&lt;li&gt;navegação&lt;/li&gt;
&lt;li&gt;banner apresentando produtos e serviços&lt;/li&gt;
&lt;li&gt;blocos com imagens e textos curtos&lt;/li&gt;
&lt;li&gt;créditos&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;por-onde-começar-o-layout-3&#34;&gt;Por onde começar o layout?&lt;/h2&gt;

&lt;p&gt;A resposta é bem simples. Pelo papel. Não importa se você vai usar um bloco de notas velho, o verso de um guardanapo, um &lt;a href=&#34;http://sneakpeekit.com/&#34; title=&#34;Sneakpeekit&#34;&gt;template impresso da internet&lt;/a&gt; ou um &lt;a href=&#34;http://appsketchbook.com/&#34; title=&#34;App Sketchbook&#34;&gt;caderno especialmente projetado&lt;/a&gt; para este fim, comece por um rascunho de wireframe no papel. Eu costumo desenhar basicamente duas coisas. Uma teia de navegação (&amp;#8220;Que-link-leva-para-onde&amp;#8221;) e o esqueleto básico do site. Não precisa ficar bonito. Minha habilidade para desenho se resume em bonecos de palito e partidas de Drawsome com estranhos da internet. Ainda assim é fácil criar um wireframe. Use quadrados para imagens e linhas para texto. O importante é você &amp;#8211; e o resto da sua equipe se for o caso &amp;#8211; terem um ponto de partida. O ideal é criar ao menos três versões principais: desktops, tablets e smartphones. Estas categorias são meio utópicas já que existem centenas de dispositivos que ficam no meio termo, mas você precisa ter um ponto de partida, certo? Escolher por qual dos três esqueletos começar é uma questão bem pessoal. Alguns advogam firmemente o mobile first, mas aqui por uma questão de didática vou começar pelo desktop.&lt;/p&gt;

&lt;h2 id=&#34;grids-são-seus-amigos-3&#34;&gt;Grids são seus amigos&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é basicamente como montar um quebra cabeça onde você pode esticar, encolher, quebrar e dobrar estruturas. Realizar esta tarefa será muito mais fácil se você construir um layout sustentado por um grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Não é absolutamente necessário utilizar um grid em seu CSS (embora seja uma prática recomendável), mas se o seu wireframe básico estiver organizado neste formato ajuda bastante na hora de projetar o design de maneira mais fluida, simétrica e organizada. Isto por que você pode simplesmente re-arranjar os blocos e colunas do seu layout de maneira mais lógica e matemática, o que vai refletir em uma maior coesão do design final.&lt;/p&gt;

&lt;p&gt;Esta parte do fluxo de trabalho é bem parecida com criar um layout para design &amp;#8220;normal&amp;#8221;. O primeiro passo portanto é criar o tal do grid, basicamente um conjunto de linhas &amp;#8220;invisiveis&amp;#8221; que vão sustentar o seu design. Pense que você vai ter que quebrar esta estrutura em pedaços menores e, para manter a simetria o ideal é escolher um número par que possa ser divisível por 2, 3 e/ou 4&amp;#8230; Por isto grids de 12, 16, 18 ou 24 colunas são bem comuns. (Você pode escolher o número que quiser. Eu mesma já trabalhei com 14 colunas. Deu mais trabalho. Não diga que não avisei&amp;#8230; ). Não se esqueça do espaço das margens entre as colunas.&lt;/p&gt;

&lt;h2 id=&#34;o-wireframe-3&#34;&gt;O wireframe&lt;/h2&gt;

&lt;p&gt;Se você precisar reescrever completamente todos os elementos do CSS você está fazendo design adaptativo, o que tem seus métodos mas não é responsivo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é focado na economia. Economia de tempo, economia de peso de arquivos, economia de código. Pense em escrever estruturas que, embora sofram adaptações, possam ser re-aproveitadas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;desktops-3&#34;&gt;Desktops&lt;/h3&gt;

&lt;p&gt;Este é o exemplo de wireframe que vamos criar passo-a-passo para o nosso exemplo. A estrutura é bem simples: um logotipo no canto superior esquerdo, um menu no topo a direita, um banner, 4 destaques com texto e foto e um rodapé.&lt;/p&gt;

&lt;p&gt;Este é o meu rascunho inicial:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27002&#34; alt=&#34;wireframe-sketch&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-sketch1.jpg&#34; width=&#34;660&#34; height=&#34;708&#34; srcset=&#34;uploads/2013/04/wireframe-sketch1.jpg 660w, uploads/2013/04/wireframe-sketch1-156x168.jpg 156w, uploads/2013/04/wireframe-sketch1-288x310.jpg 288w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora o mesmo modelo recriado no Photoshop:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27021&#34; alt=&#34;wireframe-desktop&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-desktop.jpg&#34; width=&#34;660&#34; height=&#34;666&#34; srcset=&#34;uploads/2013/04/wireframe-desktop.jpg 660w, uploads/2013/04/wireframe-desktop-166x168.jpg 166w, uploads/2013/04/wireframe-desktop-307x310.jpg 307w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;tablets-3&#34;&gt;Tablets&lt;/h3&gt;

&lt;p&gt;A técnica para adaptar esta estrutura para as outras versões é simples. Diminua o número de colunas no grid. Se inicialmente tinhamos 16 colunas no desktop, teremos 10 no tablet e 4 no smartphone, por exemplo. O conteúdo deve se re-arranjar para caber nesta estrutura menor. Então no tablet ao invés de 4 destaques lado-a-lado temos 2 fileiras com 2 destaques cada. Para adequar-se a estas mudanças as imagens ficaram maiores. Outra modificação foi um ajuste  no tamanho do texto do menu.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26973&#34; alt=&#34;wireframe-tablet&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-tablet.jpg&#34; width=&#34;660&#34; height=&#34;894&#34; srcset=&#34;uploads/2013/04/wireframe-tablet.jpg 660w, uploads/2013/04/wireframe-tablet-124x168.jpg 124w, uploads/2013/04/wireframe-tablet-228x310.jpg 228w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;smartphones-3&#34;&gt;Smartphones&lt;/h3&gt;

&lt;p&gt;Como a tela dos smartphones é ainda menor, é necessário re-arranjar as estruturas novamente e fazer alguns outros ajustes. Isto não significa necessariamente diminuir os elementos de tamanho. Lembre-se que a maior parte dos dispositivos móveis utilizam touch screens. Você deve adaptar os elementos considerando esta área de toque. Links muito pequenos e juntinhos são difíceis selecionar. O ideal é que o usuário possa navegar no site sem precisar dar zoom. Por isto optei por colapsar os elementos em um menu drop-down. Os destaques agora ocupam o espaço total do wrap. Optei por juntar os 4 destaques em uma navegação estilo slider (navegáveis através de seletores em forma de &amp;#8220;bolinhas&amp;#8221;). Outra mudança estetica significativa foi o banner. Como pretendo incluir texto em HTML  com os serviços principais da empresa optei por deixa-lo em uma caixa preta abaixo da foto. Desta maneira as imagens ficam mais visíveis e o formato não prejudica a leitura do texto.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26972&#34; alt=&#34;wireframe-smartphone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-smartphone.jpg&#34; width=&#34;660&#34; height=&#34;1102&#34; srcset=&#34;uploads/2013/04/wireframe-smartphone.jpg 660w, uploads/2013/04/wireframe-smartphone-100x168.jpg 100w, uploads/2013/04/wireframe-smartphone-185x310.jpg 185w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resoluções-3&#34;&gt;Resoluções&lt;/h2&gt;

&lt;p&gt;Existem dezenas de resoluções diferentes e, embora este seja o objetivo final, é bem difícil ter um layout que vai ficar perfeito a cada ponto de quebra (difícil, não impossível). O ideal, portanto, é ter em mente quais são os formatos mais comuns e focalizar para que ao menos nestes estágios o design esteja funcionando perfeitamente. Considere portanto estas resoluções básicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1200 pixels &amp;#8211; Desktops com monitores widescreen.&lt;/li&gt;
&lt;li&gt;960 pixels &amp;#8211; Tablets em formato paisagem e monitores antigos.&lt;/li&gt;
&lt;li&gt;768 pixels &amp;#8211; Tablets em formato retrato.&lt;/li&gt;
&lt;li&gt;480 pixels &amp;#8211; Smartphones em formato paisagem.&lt;/li&gt;
&lt;li&gt;320 pixels &amp;#8211; Smartphones em formato retrato.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para testar o seu HTML final em diferentes resoluções você pode utilizar algum add-on ou &lt;a href=&#34;http://seesparkbox.com/foundry/media_query_bookmarklet&#34; title=&#34;Media Query Bookmarklet&#34;&gt;bookmarklet&lt;/a&gt; para o seu browser. Outra dica super prática é um]&lt;a href=&#34;http://www.envisionsuccess.net/images/responsive-guide.jpg&#34; title=&#34;Responsive Guide Wallpaper&#34;&gt;5&lt;/a&gt; com marcações em pixels.&lt;/p&gt;

&lt;h2 id=&#34;o-mock-up-1&#34;&gt;O mock-up&lt;/h2&gt;

&lt;p&gt;Hora de criar esta estrutura no seu programa gráfico favorito. Você pode montar o seu próprio grid utilizando linhas guias ou baixar um modelo pronto como o &lt;a href=&#34;http://dribbble.com/shots/410635-Responsive-Grid-PSD/&#34; title=&#34;Responsive Grid PSD&#34;&gt;Responsive Grid PSD&lt;/a&gt; ou o &lt;a href=&#34;http://framelessgrid.com/&#34; title=&#34;Frameless&#34;&gt;Frameless&lt;/a&gt;. Para este tutorial utilizei uma versão modificada do Frameless que você pode &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/04/grid.zip&#34; title=&#34;Grid&#34;&gt;baixar aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;nota-sobre-retina-display-1&#34;&gt;Nota sobre retina display&lt;/h3&gt;

&lt;p&gt;É importante ter em mente que alguns aparelhos tem a densidade de pixels superior a 1. É interessante, em termos de qualidade de apresentação do layout, criar um arquivo com o dobro da resolução nestes casos. Então dobre o tamanho do seu PSD na versão para smartphones (o que significa um mockup de 960x640px). Assim, na hora de exportar os elementos, você pode criar imagens em alta resolução para dispositivos retina.&lt;/p&gt;

&lt;h3 id=&#34;apresentação-1&#34;&gt;Apresentação&lt;/h3&gt;

&lt;p&gt;Na minha empresa criamos modelos estáticos para serem aprovados pelos clientes antes de partirmos para etapa de desenvolvimento do HTML/CSS. Na minha experiência, mesmo se nenhum conteúdo for fornecido previamente, fazer um esforcinho a mais e utilizar imagens e textos parecidas com as finais ajudar o seu layout a ser aprovado. Isto acontece por que, ao contrário de nós designers e desenvolvedores, as pessoas &amp;#8220;normais&amp;#8221; possuem naturalmente uma certa dificuldade de abstrair que aqueles quadrados e caixinhas são um site. Adicionar imagens e textos a um tema pode dar mais trabalho, mas é acrescentar contexto e propósito ao seu design, o que por sua vez causa muito mais empatia e identificação.&lt;/p&gt;

&lt;p&gt;Para o nosso exemplo criei a empresa fictícia Space Tour.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26991&#34; alt=&#34;wifreframe&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wifreframe.jpg&#34; width=&#34;660&#34; height=&#34;672&#34; srcset=&#34;uploads/2013/04/wifreframe.jpg 660w, uploads/2013/04/wifreframe-165x168.jpg 165w, uploads/2013/04/wifreframe-304x310.jpg 304w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mesmo com um conteúdo falso aplicado ainda é difícil de imaginar como o produto final vai se comportar online, principalmente no caso de dispositivos móveis. Para que o cliente possa visualizar como o layout vai se comportar é interessante utilizar mock-ups de hardwares reais. Basta procurar no Google que existem diversos recursos gratuitos para este fim. O site &lt;a href=&#34;http://www.psdcovers.com/&#34; title=&#34;PSD Covers&#34;&gt;PSD Covers&lt;/a&gt;, por exemplo, possui actions e templates de Photoshop em alta resolução que podem ajudar bastante na apresentação final. O]&lt;a href=&#34;http://dribbble.com/&#34; title=&#34;dribbble&#34;&gt;10&lt;/a&gt; também pode ser uma boa fonte para recursos gratuitos.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26974&#34; alt=&#34;mockup-ipad&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/mockup-ipad.jpg&#34; width=&#34;660&#34; height=&#34;680&#34; srcset=&#34;uploads/2013/04/mockup-ipad.jpg 660w, uploads/2013/04/mockup-ipad-163x168.jpg 163w, uploads/2013/04/mockup-ipad-300x310.jpg 300w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26975&#34; alt=&#34;mockup-smartphone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/mockup-smartphone.jpg&#34; width=&#34;660&#34; height=&#34;536&#34; srcset=&#34;uploads/2013/04/mockup-smartphone.jpg 660w, uploads/2013/04/mockup-smartphone-206x168.jpg 206w, uploads/2013/04/mockup-smartphone-381x310.jpg 381w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;um-processo-em-evolução&#34;&gt;Um processo em evolução&lt;/h2&gt;

&lt;p&gt;Com o passar do tempo este fluxo de trabalho torna-se natural. Ao observar um layout você consegue mentalmente criar os pontos-de-quebra e algumas fases deste processo podem ser puladas. Você pode, por exemplo, trabalhar com apenas dois formatos de wireframe: um para computadores/tablets e um para smartphones. Existem pessoas que preferem ainda queimar completamente estas etapas e desenvolver diretamente no CSS. Cada um tem o seu modo de trabalho e nenhum é necessariamente melhor ou pior que o outro. Vale a pena testar diferentes abordagens até encontrar o que funciona melhor para você, sua equipe e seus clientes.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Bem, agora você já sabe como criar um protótipo de design responsivo. Com o layout aprovado entra a segunda etapa: colocar ele para funcionar. Para isto existem diversos &lt;a href=&#34;http://tableless.com.br/?s=design+responsivo&#34; title=&#34;Tableless Design Responsivo&#34;&gt;artigos sobre Design Responsivo&lt;/a&gt; aqui no Tableless que podem te ajudar como . Ou você pode ainda consultar a &lt;a href=&#34;http://blog.popupdesign.com.br/?s=Design+responsivo&#34; title=&#34;BlogUp - Design Responsivo&#34;&gt;série de artigos do meu blog&lt;/a&gt; . Quer mais? O repositório &lt;a href=&#34;http://bradfrost.github.io/this-is-responsive/resources.html&#34; title=&#34;Responsive Resources&#34;&gt;Responsive Resources&lt;/a&gt; possui uma lista gigante de artigos, recursos e ferramentas úteis sobre o tema. Bons estudos!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides para Devs #3 – Responsive Web Design</title>
      <link>http://tableless.com.br/slides-para-devs-3-responsive-web-design/</link>
      <pubDate>Tue, 19 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/slides-para-devs-3-responsive-web-design/</guid>
      <description>&lt;p&gt;Veja outras partes da série &lt;a href=&#34;http://tableless.com.br/categoria/series/slides-e-apresentacoes/&#34;&gt;Slides para Devs&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Responsive Web Design – Adaptação vs Otimização</title>
      <link>http://tableless.com.br/responsive-web-design-adaptacao-vs-otimizacao/</link>
      <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/responsive-web-design-adaptacao-vs-otimizacao/</guid>
      <description>

&lt;p&gt;Uma pancada de pessoas já me perguntaram sobre qual é o melhor: criar um site responsive e adaptável ou uma versão específica para mobiles e outros dispositivos. A resposta é: depende.&lt;/p&gt;

&lt;p&gt;Depende. Cada situação é um caso diferente. O Responsive tem vantagens e desvantagens, assim como versões específicas. A ideia é sempre fazer a melhor expediência possível para o usuário. Isso inclui, além de design, velocidade, performance e vários outros pontos. Por isso cada projeto precisa ser estudado para que você entenda qual é a melhor situação.&lt;/p&gt;

&lt;h3 id=&#34;a-viagem&#34;&gt;A Viagem&lt;/h3&gt;

&lt;p&gt;Esse exemplo é bastante utilizado para simplificar:&lt;/p&gt;

&lt;h4 id=&#34;cenário-um&#34;&gt;Cenário um&lt;/h4&gt;

&lt;p&gt;Quando nos preparamos para uma viagem, é normal que você organize a sua mala. Se você é uma pessoa que não gosta de carregar peso ou não gosta de malas grandes, vai procurar otimizar sua mala da melhor maneira possível tentando saber qual o clima do local de destino, por exemplo. Se estiver calor, você não vai preparar uma mala cheia de casacos e calças. Se estiver frio, você não vai perder tempo colocando camisetas e bermudas. Você vai otimizar a sua mala colocando apenas as roupas que você tem quase certeza de que vai utilizar. Fazendo assim sua mala fica leve e menor. Provavelmente você não vai precisar despachar essa bagagem, ganhando tempo quando chegar ao destino.&lt;/p&gt;

&lt;h4 id=&#34;cenário-dois&#34;&gt;Cenário dois&lt;/h4&gt;

&lt;p&gt;Há outro cenário que é quando a viagem será para vários lugares ou para algum lugar, como São Paulo, onde o clima muda drasticamente de uma hora para outra, você com certeza vai organizar uma mala com várias combinações de roupas. Vai levar casacos, calças, bermudas e camisetas. Nunca se sabe quando será frio pela manhã e calor durante a tarde. Por isso você terá uma mala pronta para todas as ocasiões, mas mais pesada que a primeira mala e um pouco maior.&lt;/p&gt;

&lt;h3 id=&#34;qual-dos-dois-cenários-é-o-melhor&#34;&gt;Qual dos dois cenários é o melhor?&lt;/h3&gt;

&lt;p&gt;Quando fazemos um site Responsivo nós temos uma mala completa. Nosso site estará pronto para ser visitado de uma Tablet, Smartphone ou uma TV de 52&amp;#8221;. Nós carregamos todo o conteúdo que o usuário &lt;strong&gt;pode&lt;/strong&gt; precisar e decidimos, o que o usuário verá de acordo com o tamanho da tela. O site fica ligeiramente mais pesado, em compensação temos um site preparado para qualquer condição.&lt;/p&gt;

&lt;p&gt;Quando produzimos um site específico para cada dispositivo, temos certeza de que o usuário carregará o que ele realmente precisa. O problema é que temos que adivinhar de alguma forma qual é o meio de acesso do usuário está utilizando e redirecioná-lo. Nesse caso você tem um certo retrabalho, tanto na parte de back-end quanto na de front-end e design. Você vai ter que manter duas versões de alguma coisa.&lt;/p&gt;

&lt;p&gt;Para saber qual dos dois cenários é o melhor, vai depender do seu projeto.&lt;/p&gt;

&lt;p&gt;Não tem nada dizendo que todos os sistemas deve ter versões específicas em vez de responsivos. Seu sistema pode ser simples de forma que você não precise esconder muito conteúdo, matendo a performance e adaptando o layout para parecer decentemente em dispositivos móveis. Existem sites mais pesados que muitos sistemas por aí, onde a quantidade de conteúdo é muito grande e que ter uma versão específica seria muito melhor.&lt;/p&gt;

&lt;p&gt;Por isso, escolher uma ou outro método depende das características do seu projeto.Em qualquer um dos dois métodos você precisará de um planejamento forte de design e UX para servir melhor seu conteúdo.&lt;/p&gt;

&lt;h3 id=&#34;responsive-específico-cross-device&#34;&gt;Responsive específico cross-device&lt;/h3&gt;

&lt;p&gt;O responsive tem também uma vantagem interessante. Existem várias tablets, notebooks e smartphones. Cada um desses gêneros tem dispositivos com tamanhos de telas totalmente diferentes. Você pode fazer um site específico para cada dispositivos, responsivo. Como assim? A ideia é que o site se adapte nas diversas telas de um determinado gênero de dispositivo. Logo, o site seria bem visualizado em uma tablet de 7 ou de 10 polegadas. Em um celular de 3, 4 ou 5 polegadas.&lt;/p&gt;

&lt;p&gt;No fundo, o objetivo sempre é entregar a melhor experiência para o visitante. Não importa se você vai entregar um site adaptável ou se vai fazer algo específico. Você precisa, obrigatoriamente, entregar o conteúdo da melhor forma possível.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Responsive Web Design – focando a coisa certa</title>
      <link>http://tableless.com.br/responsive-web-design-voce-esta-fazendo-isso-errado/</link>
      <pubDate>Tue, 20 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/responsive-web-design-voce-esta-fazendo-isso-errado/</guid>
      <description>

&lt;p&gt;Eu andei pensando em um assunto e procurando sobre &lt;a href=&#34;http://bit.ly/GAQ3RX&#34;&gt;encontrei um artigo&lt;/a&gt;, fresquinho, no &lt;a href=&#34;http://twitter.com/#!/brad_frost&#34;&gt;Brad Frost&lt;/a&gt; que veio de encontro ao que eu estava matutando. Eu escrevi em tempos passados um artigo sobre &lt;a href=&#34;http://tableless.com.br/porque-so-para-o-iphone/&#34;&gt;por que estávamos desenvolvendo apenas para iPhone&lt;/a&gt;. Foi aí que começamos a pensar em versões mobiles. Mas fazíamos versões mobiles dos nossos sistemas e websites simplesmente sem entender quando a necessidade de ter um site mobile era real. Muitas empresas gastaram uma boa grana para ter sua versão mobile, mas apenas para se manter na moda.&lt;/p&gt;

&lt;p&gt;Agora, a bola da vez é &lt;a href=&#34;http://wp.me/p1vY5N-12Z&#34;&gt;criar designs responsivos&lt;/a&gt; como se não houvesse o amanhã. É aí que entra a pergunta: você precisa de um design responsivo?&lt;/p&gt;

&lt;p&gt;A maioria dos browsers para dispositivos móveis fazem um bom trabalho em websites que não tem versão específica para mobiles. Desde a vinda do iPhone, todos os browsers para mobiles se adequaram de uma forma que antes apenas o Opera abordava. Hoje, quando navegamos em qualquer website, tendo ou não versão para mobile, temos uma boa experiência. Aí vem o ponto: será que criar um site responsivo é o mais importante para o negócio do seu cliente? Produzir um website mobile friendly não é apenas modificar sua carinha, colocar ícones bonitinhos e pronto. Há outros pontos a serem abordados que são tão ou mais importantes que este.&lt;/p&gt;

&lt;p&gt;Veja um comentário do Brad Frost em seu artigo:&lt;/p&gt;

&lt;blockquote lang=&#34;en&#34;&gt;
  &lt;p&gt;
    &lt;strong&gt;Your visitors don’t give a shit if your site is responsive.&lt;/strong&gt; They don’t care if it’s a separate mobile site. They don’t care if it’s just a plain ol’ desktop site. They &lt;strong&gt;do&lt;/strong&gt; give a shit if they can’t get done what they need to get done. They &lt;strong&gt;do&lt;/strong&gt; give a shit when your site takes 20 seconds to load. They do care when interactions are awkward and broken.
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Entende o que eu quero dizer? Um dispositivo móvel já é mais dinâmico por natureza que os desktops. Os aparelhos móveis de hoje em dia nos fazem querer os resultados mais rapidamente. Se você tiver um website desenhado apenas para desktops, mas mesmo assim ele é rápido, os usuários de mobile vão agradecer. Já vi muitos websites mobiles que foram apenas adequados&amp;#8230; Isso não é produzir um site mobile. Se seu site é bem desenhado e sua usabilidade impecável, ter um design responsivo passa a ser secundário e você passa a dar atenção coisas mais importantes, por que mesmo sendo uma versão desktop, o usuário conseguirá navegar sem muitos problemas.&lt;/p&gt;

&lt;h3 id=&#34;mas-você-quer-dizer-que-sites-mobile-não-importam&#34;&gt;Mas você quer dizer que sites mobile não importam?&lt;/h3&gt;

&lt;p&gt;Não, não quero dizer isso. Pelo contrário, eles importam e muito. &lt;strong&gt;A experiência do usuário é muito melhor se houver uma versão mobile&lt;/strong&gt;, sem sombra de dúvida. Mas do que adianta ter uma versão mobile se o site demora 20 segundos para carregar? O dev cria a versão mobile, mas ele não faz adaptação nenhuma nas imagens (e não estou falando apenas de mudar a dimensão dela), não usa com inteligência o font-face, que embora seja maravilhoso, come muita banda&amp;#8230; Acontece que ter carinha bonita não quer dizer que é fácil de usar.&lt;/p&gt;

&lt;h3 id=&#34;experiência-de-usuário-é-o-foco&#34;&gt;Experiência de usuário é o foco&lt;/h3&gt;

&lt;p&gt;O foco é buscar a melhor experiência possível que o usuário pode ter em seu dispositivo. Nós usamos responsive web design para levar a experiência do usuário para outro nível. Não apenas por que está todo mundo fazendo. Você não precisa fazer seu site se adequar ao redimensionar a janela. É bonito? Sim, claro, mas só pra impressionar, porque não é muito útil se você parar para pensar.&lt;/p&gt;

&lt;p&gt;No front-end, a experiência do usuário vai muito além do design. Responsive web design não é uma modinha é mais uma ferramenta para usarmos em pról da boa experiência do usuário. É por isso que na construção dos nossos projetos, &lt;a href=&#34;http://tableless.com.br/mobile-first-a-arte-de-pensar-com-foco/&#34;&gt;podemos iniciar o trabalho pensando primeiramente nos mobiles&lt;/a&gt; e depois nos desktops. Isso nos faz mirar em objetivos mais importantes, não apenas para mobiles, mas para os desktops também, bem como tablets, tvs e todo o resto que vem por aí.&lt;/p&gt;

&lt;p&gt;Alguns artigos para você dar uma olhada:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kolakube.com/responsive-design-big-deal/&#34;&gt;Why is Responsive Web Design Such A Big Deal? Seriously…You Tell Me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bradfrostweb.com/blog/web/responsive-web-design-missing-the-point/?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+brad-frosts-blog+%28Brad+Frost+Web%29&#34;&gt;responsive web design: missing the point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1509&#34;&gt;Which One: Responsive Design, Device Experiences, or RESS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/mobile-first-a-arte-de-pensar-com-foco/&#34;&gt;Mobile First – A arte de pensar com foco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/a-usabilidade-deve-ser-pensada-por-todos/&#34;&gt;A usabilidade deve ser pensada por todos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Responsive Web Design</title>
      <link>http://tableless.com.br/introducao-ao-responsive-web-design/</link>
      <pubDate>Mon, 15 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-ao-responsive-web-design/</guid>
      <description>

&lt;p&gt;Você já deve ter ouvido falar sobre Responsive Web Design. Você pode ler sobre isso &lt;a href=&#34;http://bit.ly/pcrwxY&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://bit.ly/mSCRSD&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Até pouco tempo atrás tínhamos praticamente apenas um meio de acessar a internet, que era pelo desktop. Podíamos acessar mal e porcamente a internet pelos celulares ou por outros aparelhos ligados a televisão etc, mas nenhum destes meios nos permitia acessar a internet com a facilidade que tínhamos quando utilizávamos um desktop.&lt;/p&gt;

&lt;p&gt;Hoje o cenário é totalmente diferente. Os smartphones tomaram conta. Até mesmo os celulares mais simples dispõem de browsers altamente eficazes e se não há algum browser instalado, o usuário pode facilmente baixar o &lt;a href=&#34;http://www.opera.com/mobile/&#34;&gt;Opera Mobile&lt;/a&gt;. Há também as Tablets, que demoraram para aparecer, mas agora trazem flexibilidade para usuários que querem algo mais prático que um notebook e mais confortável que um smartphone. Não vai demorar muito para aparecer outros aparelhos diferentes ou que você acesse sem restrições a internet pela sua TV.&lt;/p&gt;

&lt;p&gt;Quando não restringimos os cenários a aparelhos temos um horizonte muito maior e mais frutífero. Entenda que a informação publicada na web pode e é totalmente reutilizada a qualquer momento. O Google faz isso com seu robô todos os dias, a todo momento. O robô do Google ou o de qualquer outro sistema de busca é um meio de acesso. O leitor de tela do usuário deficiente visual também é um meio de acesso. O leitor de RSS utilizado pelo seu celular, por mais simples que seja, é um meio de acesso. Podemos dizer então que qualquer dispositivo que o usuário utilize para consumir informação na web é um meio de acesso. Esse &amp;#8220;qualquer coisa&amp;#8221; pode ser um robô ou um sistema manipulado pelos visitantes de seu site.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-responsive-web-design&#34;&gt;O que é Responsive Web Design&lt;/h3&gt;

&lt;p&gt;Responsive Web Design é acima de tudo um conceito. Nós nos responsabilizamos a apresentar a informação de forma acessível e confortável para diversos meios de acesso. Muitos websites restringem o conceito a aparelhos com telas de diversos tamanhos, mas o conceito é muito mais abrangente.&lt;/p&gt;

&lt;p&gt;Mesmo assim irei restringir os primeiros exemplos a dispositivos que tenham telas e que estão mais presentes atualmente. Não irei me estender muito a meios de acesso como leitores de tela, robôs de busca ou outros dispositivos.&lt;/p&gt;

&lt;h3 id=&#34;o-problema-de-entregar-conteúdo-em-diversos-formatos&#34;&gt;O problema de entregar conteúdo em diversos formatos&lt;/h3&gt;

&lt;p&gt;Para fazer um website que seja acessível por qualquer dispositivo você geralmente tenta detectar o aparelho que o usuário está utilizando. Se for um desktop ou um notebook, você redireciona o acesso para um código CSS que formata seu site para o design mais confortável em grandes monitores. Se você detectar que o usuário está utilizando um dispositivo móvel, você o redireciona para uma versão que formatará o site para um formato compatível para este dispositivo.&lt;/p&gt;

&lt;p&gt;Essa ideia é simples e foi efetiva por algum tempo quando utilizávamos &lt;a href=&#34;http://bit.ly/r6Vr3P&#34;&gt;Media Types&lt;/a&gt; do CSS.&lt;/p&gt;

&lt;p&gt;Com o advento dos novos aparelhos como tablets, smartphones e até mesmo as televisões LED e LCD, essa técnica se tornou muito obsoleta.&lt;br /&gt;
Entenda porque: os media types detectavam algumas características dos meios de acesso, por exemplo o valor &lt;strong&gt;handheld&lt;/strong&gt; filtrava aparelhos com telas de tamanho pequeno e conexão com a internet limitada. O valor &lt;strong&gt;screen&lt;/strong&gt;, filtrava aparelhos com telas coloridas, normalmente terminais com monitores.&lt;/p&gt;

&lt;p&gt;Entende porque estas características estão obsoletas ou se confundem com a quantidade de aparelhos existentes? Hoje 100% dos smartphones suportam resoluções de tela maiores e com acesso a um número ilimitado de cores que os monitores antigos. Quase nenhum celular tem telas pequenas e conexão limitada com a internet. Logo, estes parâmetros ficaram totalmente inúteis.&lt;/p&gt;

&lt;p&gt;Para termos uma ideia melhor, a tela do iPhone e do iPad suportam resoluções muito maiores do que os monitores antigos. Lembro que utilizava em meu antigo monitor de 13&amp;#8221; resolução de 800&amp;#215;600. A resolução do iPad é de 1024&amp;#215;768 com 132ppp. Meu monitor de 13&amp;#8221; até chegava nessa resolução, mas daquele jeito porco. Até o iPhone tem uma resolução melhor: 960&amp;#215;640.&lt;/p&gt;

&lt;p&gt;Agora entenda a regra primordial, que deve guiar todo o planejamento de design para diversos dispositivos: O que importa é a resolução e não o tamanho da tela.&lt;/p&gt;

&lt;p&gt;Sabendo dessa regra, entenda que você não faz um layout para um determinado tipo de dispositivo, mas para aparelhos que tem uma determinada resolução. Um exemplo clássico é o site do Itaú. Eles tem uma equipe sensacional e muito pioneira. Eu consigo acessar perfeitamente o bankline por disversos dispositivos. Mas há um problema. Troquei meu smartphone Android recentemente por um Windows Phone. Eles tem as mesmas características. Mas quando entrei no bankline do Itaú, curiosamente fui redirecionado para a versão WAP do bankline. Com um bom desenvolvedor que sou, não me conformei e peguei emprestado o iPhone da minha mulher, copiei o endereço que o site redireciona os usuários do iPhone e o utilizei no meu Windows Phone. Voilá! Mesma interface, mesma usabilidade, mesmo design.&lt;/p&gt;

&lt;p&gt;Eles detectaram o tipo de aparelho e não as características do aparelho.&lt;/p&gt;

&lt;p&gt;Para nos ajudar a detectar as características dos aparelhos, bem como a resolução, utilizamos as Media Queries em detrimento aos Media Types.&lt;/p&gt;

&lt;h3 id=&#34;media-queries&#34;&gt;Media Queries&lt;/h3&gt;

&lt;p&gt;Media Queries é a utilização de &lt;a href=&#34;http://bit.ly/qUeFq6&#34;&gt;Media Types&lt;/a&gt; com uma ou mais expressões envolvendo características de uma media para definir formatações para diversos dispositivos.&lt;/p&gt;

&lt;p&gt;Em Media Types há um valor chamado SCREEN, como já vimos anteriormente. Este valor é utilizado quando queremos direcionar uma determinada formatação para aparelhos que tem telas coloridas. Bom, telas coloridas é algo muito genérico, qualquer coisa hoje em dia tem telas coloridas. É aí que as Media Queries nos ajudam: além de identificar aparelhos com telas coloridas, você consegue definir um range de tamanho de tela para que aquele CSS possa ser ativado.&lt;/p&gt;

&lt;p&gt;Veja um código de exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;estilo.css&#34; media=&#34;screen and (color)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Você já deve ter percebido o porque do QUERIES no nome. Você cria queries no valor do atributo &lt;strong&gt;media&lt;/strong&gt; o elemento LINK.&lt;/p&gt;

&lt;p&gt;Neste exemplo, estamos capturando terminais com montiores e coloridos. Você pode capturar outros terminais com alguma saída visual, mas pode ser que o usuário esteja utilizando algum aparelho com saída de monitor monocromático, por isso temos que especificar o COLOR no valor.&lt;/p&gt;

&lt;p&gt;Outro exemplo, onde restringimos a largura máxima da tela:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;smartphones.css&#34; media=&#34;screen and (max-width:480px)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Aqui estamos direcionando o código CSS para aparelhos que tenham uma largura máxima de tela de 480px. Ou seja, qualquer aparelho que tenha essa largura de tela, deverá utilizar o código CSS que está no arquivo especificado.&lt;/p&gt;

&lt;p&gt;É aqui que a diversão começa: com essas queries você define uma série de ranges de larguras de tela, separando uma versão de CSS para cada grupo de aparelhos que se enquadradam nestas descrições. Você faz um formato para grandes telas, outro para telas de tablets e outro para telas de smartphones.&lt;/p&gt;

&lt;p&gt;E lá vem uma pergunta para você: as telas dos Tablets hoje em dia utilizando uma resolução de 1024&amp;#215;768. Muitos usuários utilizam esta mesma resolução de tela em seus computadores, com monitores maiores que as tablets. Como faz?&lt;/p&gt;

&lt;p&gt;Entenda: se você criou uma versão adaptável, confortável para resoluções de 1024&amp;#215;768, pensando em tablets, será que essa mesma versão não seria confortável para monitores com essa resolução? E vice-versa. Se você definiu que a versão desktop será carregada a partir de uma largura de tela de 1000px. As tablets também verão essa versão. Lembre-se o que realmente importa é o tamanho da tela dos aparelhos, não o aparelho em si. Quando você especifica o aparelho, você limita os usuários, quando você específica a resolução, você amplia o número possíveis de visitantes.&lt;/p&gt;

&lt;p&gt;Além do mais, vendo estatísticas por aí, a resolução de 1024&amp;#215;768 está decaindo muito rápido. Com as novas TVs e novos monitores, as resoluções de tela tem aumentado bastante, levando todos a um novo patamar.&lt;/p&gt;

&lt;p&gt;O que nos leva ao próximo assunto.&lt;/p&gt;

&lt;h3 id=&#34;outras-decisões-de-interface&#34;&gt;Outras decisões de interface&lt;/h3&gt;

&lt;p&gt;O primeiro passo foi identificar os aparelhos e usuários que utilizam determinadas resoluções para conseguirmos entregar um CSS específico.&lt;/p&gt;

&lt;p&gt;O segundo passo é fazer com que o layout seja amigável. Para isso você precisa entender os dilemas dos seus layouts e resolvê-los sem que o design mude da água para o vinho, mantendo as mesmas características e histórias de uso. Para tanto você precisa estudar e aplicar algumas premissas em seu website. Vou mostrar alguns pontos aqui, mas cada projeto terá uma abordagem diferente.&lt;/p&gt;

&lt;h4 id=&#34;layout-fluido&#34;&gt;Layout fluido&lt;/h4&gt;

&lt;p&gt;Layouts fluidos estão sendo utilizados desde os primórdios, mesmo assim de uma forma muito restrita porque dependendo do tamanho do site são bem difíceis de planejar. Veja o site da Amazon, ele ocupa todo o espaço do navegador e seu tamanho é adequado até uma determinada largura de tela.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://bit.ly/mSCRSD&#34;&gt;A List a Part&lt;/a&gt; tem um exemplo ótimo, por isso não vou fazê-lo perder tempo vendo outro exemplo. &lt;a href=&#34;http://www.alistapart.com/d/responsive-web-design/ex/ex-site-mini.html&#34;&gt;Veja este layout&lt;/a&gt; com a tela maximizada e vá diminuindo a janela do seu browser e veja os efeitos.&lt;/p&gt;

&lt;p&gt;Perceba ele se encaixa em qualquer tipo de tela. Dessa forma você entregou uma boa experiência de design para todos os públicos. Este é um ótimo exemplo para entender exatamente o que é Responsive Web Design.&lt;/p&gt;

&lt;p&gt;Quer &lt;a href=&#34;http://www.bryanjamesdesign.co.uk/&#34;&gt;outro ótimo exemplo&lt;/a&gt;? Neste caso o designer mostra uma mensagem para o usuário, o alertando de que o site é melhor visualizado em grandes resoluções.&lt;/p&gt;

&lt;h4 id=&#34;adaptando-menus&#34;&gt;Adaptando menus&lt;/h4&gt;

&lt;p&gt;Menus de websites são indispensáveis. É por lá que o usuário descobre todos os segredos do seu website, por onde ele se apaixona ou se perde. O menu é um dos principais elementos do seu website. É muito comum que usemos menus na horizontal. E como você sabe, menus na horizontal não são quase impossíveis em telas pequenas como as dos smarphones. Ainda mais se você tiver uma grande quantidade de opções. Logo, você precisa adaptar se menu para que ele continue usável e ao mesmo tempo não ocupe tanto espaço na tela.&lt;/p&gt;

&lt;p&gt;Há diversos caminhos que você pode tomar: você pode transformar o menu em um selectbox (ou combobox, como preferir), sumir com alguns ítens que podem não ser interessantes para usuários de mobiles ou reformatar seu design para que ele caixa de forma funcional em telas pequenas.&lt;/p&gt;

&lt;p&gt;Veja alguns exemplos abaixo. Entre no site e diminua a janela do browser para ver os efeitos. Se preferir ver na vida real, visite o site pelo seu smartphone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.highwayhurricanes.com/&#34;&gt;http://www.highwayhurricanes.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.citychoir.org.uk/&#34;&gt;http://www.citychoir.org.uk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://leica-explorer.com/&#34;&gt;http://leica-explorer.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;diminuindo-ou-trocando-imagens&#34;&gt;Diminuindo ou trocando imagens&lt;/h4&gt;

&lt;p&gt;Não se preocupe se seu website trabalha utilizando grandes imagens, você trocar ou diminuir as imagens para que caibam em telas menores. Veja os exemplos abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ciscolondon2012.com/&#34;&gt;http://www.ciscolondon2012.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cujo.jp/&#34;&gt;http://www.cujo.jp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spartanrobotics.org/&#34;&gt;http://spartanrobotics.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://1pictureaday.com/&#34;&gt;http://1pictureaday.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;media-queries-8211-a-collection-of-sites-using-media-queries&#34;&gt;Media Queries &amp;#8211; A Collection of sites using media queries&lt;/h4&gt;

&lt;p&gt;Todos os exemplos de website que mostrei acima, retirei &lt;a href=&#34;http://mediaqueri.es/&#34;&gt;deste website&lt;/a&gt;. A ideia é genial!&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://mediaqueri.es/&#34;&gt;http://mediaqueri.es/&lt;/a&gt; tem uma coleção impressionante de websites que utilizam de forma responsável as Media Queries. Veja os exemplos e entenda como você pode fazer um website adaptável para diversos cenários de uso.&lt;/p&gt;

&lt;h3 id=&#34;cada-meio-de-acesso-tem-sua-característica&#34;&gt;Cada meio de acesso tem sua característica&lt;/h3&gt;

&lt;p&gt;Conversamos bastante sobre o problema das resoluções e larguras de tela. Mas no começo deste post eu disse que o Responsive Web Design pode ir muito além das telas e Media Queries. Há usuários podem visitar seu site e não utilizar uma tela, tablet ou smartphone. Em vez de ler as informações ele pode ouvi-las, como é o caso dos usuários de leitores de tela.&lt;/p&gt;

&lt;h4 id=&#34;css-aural&#34;&gt;CSS Aural&lt;/h4&gt;

&lt;p&gt;Quero que você abra sua mente e entenda que mesmo você não tenho deficiencia visual, você pode ser um grande candidato a utilizar leitores de tela. Enganam-se aqueles que acham que programas que leem a tela só podem ser usados por pessoas com problemas de visão. E se você estiver dirigindo ou em qualquer outra situação em que não pode ficar o tempo inteiro com o celular na mão, mas mesmo assim quer ler um determinado artigo, site etc, como você faz? Nunca pensou em ouvir o artigo? Pois é.&lt;/p&gt;

&lt;p&gt;Eu sei que os sistemas de leitura de tela hoje em dia precisam de uma repaginada total. Mas empresas como Apple e Microsoft já estão fazendo isso para que seus sistemas mobiles e para desktops tenham a habilidade de ler bem as telas dos dispositivos. Isso é impressionante.&lt;/p&gt;

&lt;p&gt;Se a informação vai ser consumida dessa forma ela precisa ser formatada também. Isso mesmo, formataremos o áudio! Como? Com &lt;a href=&#34;http://bit.ly/o25mf6&#34;&gt;CSS Aural&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O CSS Aural praticamente controla como o audio do leitor de tela irá se comportar. Você pode controlar volume, tipo da voz, qual caixa a voz sairá etc.&lt;/p&gt;

&lt;p&gt;Imagine que você tenha um artigo sobre uma entrevista, onde há o entrevistador e o entrevistado. Você pode: especificar que a voz do entrevistador sairá na caixa da esquerda e a do entrevistado na caixa de som da direita. Que a voz do entrevistador será masculina e que voz do entrevistador será feminina.&lt;/p&gt;

&lt;p&gt;Sensacional, não é?&lt;/p&gt;

&lt;h4 id=&#34;especificação-touchscreen&#34;&gt;Especificação Touchscreen&lt;/h4&gt;

&lt;p&gt;Já falei sobre a &lt;a href=&#34;http://bit.ly/mGTiUF&#34;&gt;Específicação Touchscreen&lt;/a&gt;, abaixo segue um resumo, mas sugiro que você leia o artigo completo.&lt;/p&gt;

&lt;p&gt;Estamos acostumados com a experiência de interação com a ajuda do mouse. Isso foi desde os primórdios e provavelmente ainda será por bastante tempo. Nós desenhamos interfaces para ações baseadas no mouse ou qualquer aparelho que controle a setinha da sua tela. Criar interfaces touch é algo relativamente novo. Nós trouxemos ideias da interação com mouse para os dispositivos touch, mas grande parte das interações precisaram ser reinventadas porque o modo, o ato, a forma de interagir com a informação é diferente. Na interface touch você não “coloca o mouse” em cima do elemento. Você não utiliza teclas de atalho para executar ações. Normalmente as ações importantes estão expostas na interface, facilitando o acesso rápido. Isso é muito importante porque nos ensina criar interfaces mais intuitivas, com a curva de aprendizado menor.&lt;/p&gt;

&lt;p&gt;Há também o outro lado da moeda, onde detalhes das interfaces touch não podem ser portadas para interfaces baseadas em mouse. Lembre agora na forma de como você gira uma imagem em um dispositivo touch e como você gira essa mesma imagem utilizando um mouse. A interface muda, o seu comportamento muda.&lt;/p&gt;

&lt;p&gt;Sabendo dessas limitações você deve entender que não podemos simplesmente portar o visual de um determinado site para um dispositivo touch. Você pode dizer que “hoje fazemos isso e até agora está funcionando muito bem”. Mas pense melhor… a grande maioria dos sites que você visita hoje no iPad ou qualquer outro tablet, por exemplo, são sites onde a sua interação é limitada. O que você faz em um site hoje em dia? Clica nos links e lê. Salvo às vezes quando você visita um site mais “animadinho” com mais ações para entreter o usuário. Mas e se você faz um site onde é preciso rotacionar uma imagem ou fazer um ZOOM? Você precisará manter as mesmas ações nos dois cenários. E como antigamente, para manter o cenário das interfaces touch você precisa da ajuda de muito script.&lt;/p&gt;

&lt;h3 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h3&gt;

&lt;p&gt;Responsive Web Design é um assunto muito extenso mas muito interessante. Nos faz pensar no futuro de forma diferente. Até 5 anos atrás não tínhamos preocupações com outro dispositivo a não ser um ou outro smartphone e os desktops. Hoje temos diversos aparelhos, com diversas limitações de tela, tamanhos, comportamentos&amp;#8230; E isso não vai parar por aí. Todos os dias aparecerão mais e mais aparelhos e dispositivos que ajudarão os usuários a terem acesso a qualquer informação. É importante que nós possibilitemos que essas informações sejam entregues da melhor maneira possível.&lt;/p&gt;

&lt;p&gt;Algumas referências que você pode querer dar uma olhada:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.alistapart.com/articles/responsive-web-design/&#34;&gt;Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://coding.smashingmagazine.com/2011/01/12/guidelines-for-responsive-web-design/&#34;&gt;Guidelines for Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://designreviver.com/articles/designing-for-a-responsive-web-with-heuristic-methods/&#34;&gt;Designing for a Responsive Web with Heuristic Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://5by5.tv/bigwebshow/9&#34;&gt;The Big Web Show sobre Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>