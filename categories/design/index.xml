<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on Tableless</title>
    <link>http://tableless.com.br/categories/design/index.xml</link>
    <description>Recent content in Design on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/categories/design/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>O futuro das interfaces: Chatbots</title>
      <link>http://tableless.com.br/o-futuro-das-interfaces-chatbots/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-futuro-das-interfaces-chatbots/</guid>
      <description>

&lt;p&gt;Estamos acostumados a interagir diariamente com interfaces gráficas, seja no computador, celular, tablet, smart tv, etc. Naturalmente incorporamos a utilização dessas interfaces para obter nossos objetivos no dispositivo em questão, seja fazer uma busca no google, ver uma página no Facebook, ler um artigo em um portal de notícias ou escolher um filme no Netflix.&lt;/p&gt;

&lt;p&gt;Podemos não perceber, mas quando ligamos para um &lt;em&gt;call-center&lt;/em&gt; onde a máquina (&lt;strong&gt;&lt;em&gt;URA — Unidade de Resposta Audível&lt;/em&gt;&lt;/strong&gt;) nos pede para dizer em voz alta o que desejamos, ou o número correspondente ao que queremos, também estamos interagindo com uma interface de voz para atingir nosso propósito.&lt;/p&gt;

&lt;p&gt;Nesses dois casos, o ponto a se notar é que, não importa como, mas é preciso de uma interface para que nós humanos possamos utilizar sistemas e dispositivos digitais.&lt;/p&gt;

&lt;h2 id=&#34;legal-mas-onde-estão-os-chatbots-nessa-história&#34;&gt;Legal, mas onde estão os chatbots nessa história?&lt;/h2&gt;

&lt;p&gt;Simples. Chatbots podem ser interfaces no qual vamos interagir para atingir nossos objetivos obter !&lt;/p&gt;

&lt;p&gt;Para entender melhor, vamos a um exemplo clássico:&lt;/p&gt;

&lt;p&gt;Você está passeando no shopping, passa na frente do cinema, e descobre que aquele filme que você queria ver já está em cartaz, então decide assistí-lo.&lt;/p&gt;

&lt;p&gt;Porém a fila para comprar ingresso está enorme, você não quer perder todo esse tempo. Então você pega seu celular, entra na loja de aplicativos, procura o app de cinema, começa o download, após finalizar abre o app, seleciona sua cidade, shopping em que está, filme desejado, horário, quantidade de ingressos, e finaliza fazendo o pagamento. Você utilizou a interface gráfica do app de cinema do seu celular para atingir seu objetivo, ótimo, funcionou!&lt;/p&gt;

&lt;p&gt;Porém, não poderia ser mais simples? E se você pudesse interagir via chat com um bot do cinema para comprar seus ingressos?&lt;/p&gt;

&lt;p&gt;Vamos imaginar que o cinema tem um chatbot disponível no seu app de messenger favorito, o Facebook Messenger.&lt;/p&gt;

&lt;p&gt;Você acessa seu messenger clica no usuário do cinema e envia a seguinte mensagem: &amp;#8220;&lt;em&gt;Quero comprar dois ingressos para o filme Star Wars Rogue One, no shopping X, para a sessão das 21:45&lt;/em&gt;&amp;#8220;&lt;em&gt;.&lt;/em&gt; Sua mensagem rapidamente vai ser interpretada, e em mais algumas frases rápidas de conversa (talvez para pagamento), você terá alcançado sua meta de comprar ingresso.&lt;/p&gt;

&lt;p&gt;Você pode não ter percebido, mas assim como fazemos com interfaces gráficas, você interagiu com uma interface para manipular um sistema, e atingir seu objetivo! Você interagiu com uma interface de chatbot!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/02/cb2.jpg&#34; alt=&#34;&#34; width=&#34;626&#34; height=&#34;782&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;porque-esse-tipo-de-interface-é-promissora&#34;&gt;&lt;strong&gt;Porque esse tipo de interface é promissora?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Falando especificamente sobre a era da internet, e das interfaces para os dispositivos atuais (desktop, celulares, tablets), há anos equipes inteiras (UI Designers, UX Designers, Developers, CEO, etc) discutem incansavelmente sobre qual a melhor forma de atingir seus usuários.&lt;/p&gt;

&lt;p&gt;Inúmeros fatores nas interfaces/interação podem ser relevantes em produtos e sistemas. Nas empresas e instituições, sempre existem discussões voltadas para esses e outros fatores:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Cores, formas, fontes e fotos &amp;#8211; Performance e velocidade de páginas e procedimentos &amp;#8211; Quais conteúdos são mais relevantes para o usuário &amp;#8211; Qual o máximo de cliques que um usuário pode ter para alcançar o que deseja&lt;/p&gt;

&lt;p&gt;Portanto, o caminho para uma boa conversa com nosso usuário em questão não é tão simples como parece.&lt;/p&gt;

&lt;p&gt;Além desses pontos, temos uma discussão importantíssima sobre o negócio em si, sobre como o sistema lê, processa e devolve dados e informações, sobre como o sistema irá se comportar diante do usuário.&lt;/p&gt;

&lt;p&gt;E se pudéssemos &amp;#8220;&lt;em&gt;pular uma etapa&lt;/em&gt;&amp;#8221; e focar mais tempo para o que importa? Se pudéssemos focar no objetivo do usuário, e buscar a forma melhor e mais rápida de concluir processos?&lt;/p&gt;

&lt;p&gt;Partindo do pressuposto de que a maioria dos usuários de internet sabem utilizar um chat, os chatbots excluem a curva de aprendizado das interfaces gráficas, facilitando para os desenvolvedores do produto, e para o usuário, que poderá interagir utilizando um processo que se assemelha com a comunicação com outros humanos via internet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“_Nós pensamos que você deve enviar uma mensagem para uma empresa da mesma maneira que você envia a um amigo_” — Mark Zuckerberg na Facebook F8 Conference&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;E ainda não falamos dos detalhes mais técnicos: conexão, rede de dados, apps, espaço disponível no dispositivo…&lt;/p&gt;

&lt;p&gt;Para interagir com um chatbot, sua conexão não precisa ser tão rápida quanto para baixar um app, ou carregar um site. Você não precisa trafegar muitos dados a ponto de acabar com seu pacote diário de internet para conversar num chat. E se o bot está no app que você utilizar para conversar com seus amigos, não será necessário ocupar mais espaço no seu dispositivo.&lt;/p&gt;

&lt;p&gt;São muitas vantagens, não?!&lt;/p&gt;

&lt;h2 id=&#34;as-interfaces-gráficas-vão-morrer&#34;&gt;As interfaces gráficas vão morrer?&lt;/h2&gt;

&lt;p&gt;Não há nenhuma resposta certa, para essa pergunta. É uma questão que só poderá ser respondida com o passar dos anos.&lt;/p&gt;

&lt;p&gt;Na minha opinião, as interfaces podem perder muito espaço, mas não vão morrer completamente. Mesmo num futuro, imagino que sempre haverá algum caso em que pode uma interface gráfica pode ser útil, mesmo que para pequenas interações.&lt;/p&gt;

&lt;p&gt;Também não conseguimos prever com certeza o futuro dos chats. O próprio chatbot do Facebook Messenger tem a capacidade de enviar &lt;a href=&#34;https://developers.facebook.com/docs/messenger-platform/product-overview&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener&#34;&gt;botões, imagens e outros elementos gráfico&lt;/a&gt;s.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;A intenção desse post foi refletir um pouco sobre interfaces, e sobre vantagens e o poder dos chatbots.&lt;/p&gt;

&lt;p&gt;Obviamente, isso é só a ponta do iceberg das discussões sobre chatbots e seu futuro. Mas em pouco tempo de reflexão podemos enxergar um futuro promissor!&lt;/p&gt;

&lt;p&gt;Originalmente postado em: &lt;a href=&#34;https://medium.com/botsbrasil/o-futuro-das-interfaces-chatbots-b222c638bdb1&#34;&gt;https://medium.com/botsbrasil/o-futuro-das-interfaces-chatbots-b222c638bdb1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reação é melhor que previsão</title>
      <link>http://tableless.com.br/reacao-e-melhor-que-previsao/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/reacao-e-melhor-que-previsao/</guid>
      <description>

&lt;p&gt;Entender o usuário é algo difícil. Você pode perceber isso facilmente comparando a sua forma de usar algum serviço de internet, digamos o Facebook, com qualquer outra pessoa ao seu redor. Provavelmente você tem um costume totalmente diferente de navegar, consumir conteúdo, comentar etc. Pessoas diferentes, usam de formas diferentes um mesmo produto e isso é totalmente normal. É por isso que tentar prever cenários para desenvolver um produto para internet é algo complicado.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But in the end, for something this complicated, it&amp;#8217;s really hard to design products by focus groups. A lot of times, people don&amp;#8217;t know what they want until you show it to them. &amp;#8212; Steve Jobs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para tentar diminuir essa dificuldade, é costume antigo entre os profissionais entrevistarem os usuários (além de fazer outras cerimônias) afim de tentar entender qual a sua perspectiva do usuário sobre o produto/site. Geralmente, com um bom papo, você consegue pescar uma série de pontos importantes afim de tentar adiantar a solução de problemas de uso. Métodos assim, podem não ser tão eficazes por vários motivos, aqui vão alguns deles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Geralmente o usuário não sabe se expressar.&lt;/strong&gt; Muitas vezes, o que o usuário fala não é exatamente o problema real. Você precisa conhecer muito bem seu projeto para conseguir traduzir qual o sentido real do problema para saber onde atacar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Entrevistas com os usuários dependem do engajamento do usuário.&lt;/strong&gt; Fazer com o que o usuário saia da sua casa para ir até você é uma tarefa difícil e muito incomoda. Para compensar isso, alguns inventam de pagar ou dar alguma recompensa para o usuário, por um trabalho, que ao meu ver, não é de responsabilidade do usuário, mas da pessoa que está planejando o projeto. Já vi pessoas se prepararem uma semana para um encontro com os usuários, mas que nenhum usuário apareceu. As vezes a gente precisa ir até onde o usuário está, o que é ruim, por que o ambiente onde ele trabalha tem muitas distrações.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testes guiados são importantes, mas os resultados são danificados pelo ambiente estranho e pela ansiedade dos usuários.&lt;/strong&gt; Você já parou do lado de um designer ou de um programador enquanto ele executava uma tarefa? Cara, é desconfortável ter um papagaio de pirata &amp;#8220;fiscalizando&amp;#8221; o que você está fazendo. Geralmente os usuários não executam suas tarefas naturalmente, como eles executariam em dias comuns. Quando usamos frequentemente um produto, nós nos acostumamos com a interface, fluxo e outras ações. Em entrevistas, é inevitável que o usuários sinta que está sendo avaliado. Achar o contrário é se enganar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Você não vai obter respostas reais com perguntas meia boca.&lt;/strong&gt; É muito difícil obter boas respostas com perguntas como: &amp;#8220;Qual a primeira ação que você faria nessa tela?&amp;#8221; ou &amp;#8220;Qual a primeira impressão sobre essa tela?&amp;#8221;. Há uma série de técnicas para tornar essas &lt;a href=&#34;http://www.uxdesign.blog.br/pesquisa-com-usuarios/perguntas-a-serem-evitadas-em-pesquisa-com-usuarios/&#34;&gt;entrevistas mais inteligentes&lt;/a&gt;, mas infelizmente isso não é tão fácil de executar. Conto nos dedos as pessoas que vi fazerem isso da maneira correta.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tenho certeza de que você pode citar vários outros cenários parecidos, onde usamos várias técnicas e cerimonias na tentativa de prever qual seria a melhor solução para o usuário, mas que na real, não dão respostas que possamos usar &lt;strong&gt;de verdade&lt;/strong&gt; para solucionar os problemas do produto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gifimgs.com/res/1216/585c791fb62d8123354586.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Outro dia vi uma apresentação com a seguinte frase: &lt;strong&gt;Evite Fails no projeto e economize tempo&lt;/strong&gt;. Para mim, esse é o típico comentário de alguém que não tem a mentalidade ágil e que não sabe trabalhar com pequenas entregas incrementais, que atrasa a entrega de valor para o cliente porque quer entregar &amp;#8220;algo completo&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Bom, minha sugestão: &lt;strong&gt;não tente prever o que seria melhor para o usuário, tente reagir à experimentos e aos dados de uso real de produção&lt;/strong&gt;. Colocar no ar uma mudança pequena e medir o comportamento dos usuários, ajuda muito mais a entender qual será o próximo passo. É um erro tentar prever o que seria melhor para um produto se baseando na opinião de pessoas, que embora sejam seus clientes diretos, tem expectativas e níveis de conhecimento diferentes.&lt;/p&gt;

&lt;h2 id=&#34;entrega-rápida-de-valor&#34;&gt;Entrega rápida de valor&lt;/h2&gt;

&lt;p&gt;Essa previsão mentirosa me leva a outro assunto: entregas pequenas são melhores que entregas grandes.&lt;/p&gt;

&lt;p&gt;Planejar grandes mudanças de uma vez é furada. Qualquer um sabe disso. Mudanças pequenas são controláveis, causam menos impacto, são fáceis de medir os acertos e os erros. Existem exceções, claro, por exemplo em casos onde o produto precisa de um redesign completo e o realinhamento progressivo de interface é impossível. Há produtos antigos que não tem a possibilidade de fazer um realinhamento ao longo do tempo e por isso o redesign completo, feito de uma vez, é a única opção. Mas tirando essas exceções, entregas pequenas, funcionais e incrementais é o mais indicado.&lt;/p&gt;

&lt;p&gt;Eu sei que é difícil pensar dessa forma. A maioria dos UXzes e Devs prefere pensar na funcionalidade por inteiro. Eles têm a falsa impressão de que entregar algo pequeno, mesmo que seja funcional, é o mesmo que entregar algo incompleto. Não entra na cabeça deles entregar um pedacinho em vez da obra completa. Eles podem fazer um pedaço pequeno, porém essencial da funcionalidade, medir o comportamento do usuário e aí sim tomar a decisão de qual será o próximo passo. Transformação e adaptação é o nome do jogo.&lt;/p&gt;

&lt;p&gt;Mas há um ponto para tomar cuidado em entregas incrementais: a feature precisa ser terminada. Ela precisa ter um ponto onde possamos dizer que ela está &amp;#8220;completa&amp;#8221;. A abordagem de entregas incrementais pode virar um ciclo infinito e a feature pode mudar muitas vezes durante um longo período de tempo. O outro ponto é que se o P.O. não priorizar as outras tarefas da feature, ela realmente pode ficar incompleta, embora fique totalmente funcional.&lt;/p&gt;

&lt;p&gt;Moral da história: prefira tomar decisões baseadas em dados ao invés de tentar prever as ações do usuário. Dados são fatos. Usuários, infelizmente, mentem&amp;#8230; e há um monte de profissionais que caem nessas mentiras.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como organizar e nomear o conteúdo do projeto?</title>
      <link>http://tableless.com.br/como-organizar-e-nomear-o-conteudo-do-projeto/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-organizar-e-nomear-o-conteudo-do-projeto/</guid>
      <description>&lt;p&gt;Pode até parecer uma questão simples ou de pouco valor no projeto, mas a verdade é que a forma que você solucione essa ponto será determinante para o sucesso e o card sorting é o melhor caminho!&lt;/p&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;strong&gt;O card-sorting é uma técnica usada para descobrir como o usuário classifica determinada informação em sua mente.&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;Muitas pessoas acreditam que podem classificar a informação pelos outros pois acham que sabem como será a melhor forma. Algo muito praticado é alguém do projeto definir uma estrutura, apresentar ao cliente, aprovar e tocar o barco! Porém isso é um grande erro e a classificação deve ser semelhante ao que as pessoas, usuário final, acredita ser a ideal e não você, ou seu contratante.&lt;/p&gt;

&lt;p&gt;Um método simples, e extremamente útil, é o &lt;strong&gt;card sorting!&lt;/strong&gt; Pode ser feito sem grandes dificuldades com um pequeno grupo pessoas.&lt;/p&gt;

&lt;p&gt;Executei uma dinâmica recentemente como voluntário do PMI-CE, o qual faço parte, para determinar qual a melhor forma de organizar e nomear as informações que devem conter no novo site do capítulo.&lt;/p&gt;

&lt;p&gt;Cada participante foi convidado de acordo com seu perfil de uso e representam as personas prioritárias do projeto.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56525&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/11/1WhatsApp-Image-2016-11-21-at-22.00.11.jpeg&#34; alt=&#34;1whatsapp-image-2016-11-21-at-22-00-11&#34; width=&#34;1280&#34; height=&#34;720&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Funcionou assim:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cada participante recebeu uma série de pedaços de papeis descrevendo o conteúdo que precisa ser disponibilizado no novo site e pedi que cada pessoa relacionasse os pedaços em conjuntos, criando categorias.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Foi estabelecido um time-box de 15 minutos para que todos pudessem formar seus conjuntos.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Após isso abrimos uma discussão sobre a classificação que cada pessoa determinou para cada item. As escolhas de cada pessoa foram cruzadas e amplamente discutidas até adquirirem a concordância do grupo sobre como cada item deveria ser agrupado.&lt;/p&gt;

&lt;p&gt;Enquanto ocorriam as conversas tive a oportunidade de ouvir e aprender sobre o que cada pessoa entende a respeito de cada item e categoria. Além da opinião pessoal de cada um sobre a melhor forma de classificar tudo. É aqui que está o principal valor deste teste.&lt;/p&gt;

&lt;p&gt;Ao fim do teste um relatório foi elaborado e um organograma com a taxonomia sugerida pelo grupo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Em resumo, estas seriam as etapas:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Defina as personas do projeto e convide um representante de cada perfil para participar.&lt;/li&gt;
&lt;li&gt;Cada pessoa recebe uma serie de papeis embaralhados que descrevem os conteúdos.&lt;/li&gt;
&lt;li&gt;Então deve agrupar os papeis os quais acredita que os conteúdos tem alguma semelhança.&lt;/li&gt;
&lt;li&gt;Cada grupo deve ser nomeado, de acordo com a visão de cada pessoa.&lt;/li&gt;
&lt;li&gt;As escolhas são registradas e discutidas.&lt;/li&gt;
&lt;li&gt;Encontramos uma classificação final baseado no cruzamento dos resultados.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Em pouco mais de uma hora encontramos uma taxonomia que foi consenso entre todos os participantes. Logo após discutimos também sobre a nomenclatura e classificação de cada item e grupo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;strong&gt;Taxonomia (do grego antigo τάξις táxis, arranjo e nomia νομία, método) é a disciplina acadêmica que define os grupos de organismos biológicos, com base em características comuns e dá nomes a esses grupos.&lt;/strong&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;É importante falar que nada é infalível e mesmo aplicando a técnica as coisas podem mudar. O projeto deve ser analisado constantemente e ajustes baseados no comportamento de uso das pessoas sempre serão necessários e bem vindos.&lt;/p&gt;

&lt;p&gt;Como entregável temos a arquitetura do projeto já nomeada, agrupada e classificada, conforme o resultado da atividade. Uma ferramenta muito útil para ajudar nisso, e free, é o xMind.&lt;/p&gt;

&lt;p&gt;Card sorting é uma atividade extremamente simples mas de grande valor ao projeto que ajuda a evitar diversos problemas de usabilidade, experiência de usuário, desperdício de tempo e dinheiro.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Indexando mobile-first – Google anuncia novidades</title>
      <link>http://tableless.com.br/indexando-mobile-first-google-anuncia-novidades/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/indexando-mobile-first-google-anuncia-novidades/</guid>
      <description>&lt;p&gt;Segundo o &lt;a href=&#34;https://webmasters.googleblog.com/2016/11/mobile-first-indexing.html&#34; target=&#34;_blank&#34;&gt;Google&lt;/a&gt;, atualmente a maioria das pessoas já fazem busca utilizando um dispositivo móvel. Entretanto, os sistemas de classificação ainda costumam olhar a versão &lt;em&gt;desktop&lt;/em&gt; do conteúdo da página em questão para dar relevância ao usuário. Pensando em &lt;em&gt;mobile-first&lt;/em&gt;, isso pode trazer alguns problemas caso a página &lt;em&gt;mobile&lt;/em&gt; tenha menos conteúdo do que a página &lt;em&gt;desktop&lt;/em&gt; porque os algoritmos do Google não estão avaliando a página que está sendo vista pelo usuário da página &lt;em&gt;mobile.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Para fazer com que os resultados sejam melhores, o Google está realizando experimentos para dar mais atenção à indexação de conteúdo &lt;em&gt;mobile-first&lt;/em&gt;. Embora o índice de pesquisa do Google continue a ser único para sites e aplicativos, os algoritmos acabarão por usar principalmente a versão móvel do conteúdo de um site para classificar as páginas deste site, para entender os &lt;a href=&#34;http://rodrigofavaro.com/2016/07/04/introduzindo-rich-cards-um-novo-formato-de-resultados-para-buscas/&#34;&gt;dados estruturados&lt;/a&gt;, e para mostrar trechos dessas páginas nos resultados da pesquisa. Eles deixam claro que, enquanto este novo índice seja construído para páginas móveis, vão continuar a construir uma boa experiência de pesquisa para todos os usuários, sejam eles provenientes de dispositivos móveis ou &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Como essa mudança de indexação é algo muito importante, o Google vai iniciar um processo de experimentação ao longo dos próximos meses, numa escala pequena até que estejam confiantes o suficiente e liberar essas mudanças a todos os usuários.&lt;/p&gt;

&lt;p&gt;Embora estejam apenas começando tal mudança, eles já dão algumas recomendações para ajudar os desenvolvedores a preparar seus sites para o &lt;em&gt;mobile-first&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se você tem um &lt;a href=&#34;https://developers.google.com/webmasters/mobile-sites/mobile-seo/responsive-design&#34; target=&#34;_blank&#34;&gt;site responsivo&lt;/a&gt; ou um &lt;a href=&#34;https://developers.google.com/webmasters/mobile-sites/mobile-seo/dynamic-serving&#34; target=&#34;_blank&#34;&gt;site de exibição dinâmica&lt;/a&gt; e o conteúdo seja equivalente nos dispositivos móveis e no &lt;em&gt;desktop&lt;/em&gt;, você &lt;strong&gt;não precisa mudar nada&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Se você tem alguma &lt;a href=&#34;https://developers.google.com/webmasters/mobile-sites/mobile-seo/&#34; target=&#34;_blank&#34;&gt;configuração no seu site&lt;/a&gt; onde o conteúdo principal é diferente no _mobile _e no &lt;em&gt;desktop&lt;/em&gt;, você precisará então considerar os seguintes pontos:

&lt;ul&gt;
&lt;li&gt;Certifique-se de utilizar marcação estruturada tanto para a versão _mobile _tanto quanto para a versão &lt;em&gt;desktop&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Verificar a equivalência da sua marcação estruturada no _mobile _e &lt;em&gt;desktop&lt;/em&gt; digitando a URL de ambas as versões na &lt;a href=&#34;https://search.google.com/structured-data/testing-tool&#34; target=&#34;_blank&#34;&gt;Ferramenta de Teste de Dados Estruturados&lt;/a&gt; e comparando os resultados;&lt;/li&gt;
&lt;li&gt;Ao adicionar dados estruturados para um site &lt;em&gt;mobile&lt;/em&gt;, evite a edição de grandes quantidades de marcação que não seja relevante para o conteúdo desta página;&lt;/li&gt;
&lt;li&gt;Use a &lt;a href=&#34;https://support.google.com/webmasters/answer/6062598&#34; target=&#34;_blank&#34;&gt;Ferramenta de Teste de robots.txt&lt;/a&gt; para verificar se a versão móvel é acessível ao Googlebot;&lt;/li&gt;
&lt;li&gt;Os sites não precisam fazer mudanças nos &lt;a href=&#34;https://developers.google.com/webmasters/mobile-sites/mobile-seo/separate-urls&#34;&gt;&lt;em&gt;canonical links&lt;/em&gt;&lt;/a&gt;. O Google vai continuar a usar esses links como guias para os resultados no _desktop _e no &lt;em&gt;mobile&lt;/em&gt;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Se você tem um site cuja versão desktop foi a única verificada no Search Console, lembre-se de &lt;a href=&#34;https://support.google.com/webmasters/answer/35179&#34; target=&#34;_blank&#34;&gt;adicionar sua versão mobile&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Se você tem somente uma versão &lt;em&gt;desktop&lt;/em&gt; do seu site, o Google vai continuar a indexa-lo normalmente, mesmo utilizando um agente &lt;em&gt;mobile&lt;/em&gt; para ver seu site.&lt;/li&gt;
&lt;li&gt;Se você está construindo uma versão &lt;em&gt;mobile&lt;/em&gt; do seu site, tenha em mente que um site para &lt;em&gt;desktop&lt;/em&gt; completo é melhor do que um site _mobile _incompleto.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gostaria de salientar a importância em focar no &lt;em&gt;mobile&lt;/em&gt; de agora em diante. Cada vez mais utilizamos o &lt;em&gt;smartphone&lt;/em&gt; no lugar do computador para acessar informações e precisamos que essas informações sejam relevantes e carreguem rapidamente, e claro, o Google entendeu isso e está trabalhando para melhorar cada vez mais a experiência &lt;em&gt;mobile&lt;/em&gt; de seus usuários.&lt;/p&gt;

&lt;p&gt;Esse material foi extraído do &lt;a href=&#34;https://webmasters.googleblog.com/2016/11/mobile-first-indexing.html&#34; target=&#34;_blank&#34;&gt;blog Webmasters do Google&lt;/a&gt;, onde você poderá discutir com outros usuários e também encontrará os links para os fóruns para &lt;em&gt;webmasters&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Um software para front-end e UI Designers</title>
      <link>http://tableless.com.br/um-software-para-front-end-e-ui-designers/</link>
      <pubDate>Mon, 26 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/um-software-para-front-end-e-ui-designers/</guid>
      <description>&lt;p&gt;Já faz um tempo que tento encontrar um software que seja bom para fazer o design das interfaces, em que eu possa compartilhar protótipos e ainda fazer as animações de UI.&lt;/p&gt;

&lt;p&gt;Comecei a usar o &lt;a href=&#34;http://www.adobe.com/products/experience-design.html&#34; target=&#34;_blank&#34;&gt;Adobe Experience Design&lt;/a&gt;, que no começo foi uma boa experiência, mas como sabemos, a Adobe geralmente demora um pouco para evoluir os seus softwares (também quando evolui, o bicho pega&amp;#8230;rs). Sinto falta de maiores opções para animações de interface, uma coisa simples como fixar o header em um protótipo, é impossível.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/09/hero.jpg&#34; alt=&#34;hero&#34; width=&#34;1856&#34; height=&#34;1164&#34; class=&#34;alignnone size-full wp-image-55899&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Por esses dias comecei a pesquisar na comunidade alguns softwares que pudessem suprir a demanda, sem precisar de software para animação, outro para wireframe, outro para protótipos e etc. A maior parte dos quais encontrei são pagos, super limitados e com uma curva de aprendizado meio grande. Um software que chama atenção é o &lt;a href=&#34;http://principleformac.com/&#34; target=&#34;_blank&#34;&gt;Principle for mac&lt;/a&gt;, o problema maior dele, está no próprio nome, funciona somente para mac. Dá para fazer protótipos bem completos tanto para sites quanto para apps. É possível compartilhar os protótipos com clientes ou outros membros do time, criar efeitos dentro de grupos como scroll, slides com efeito swipe e etc.&lt;/p&gt;

&lt;p&gt;O software não custa muito caro e vale a experiência. Fiquei feliz quando consegui fixar o header no topo&amp;#8230;rs Uma coisa que deveria ser simples em qualquer software de prototipagem. Algumas ferramentas deixam a desejar, como o uso para imagens, poderiam pegar a ideia da Adobe e deixar as imagens no modo cover em retângulos por exemplo. Dá para fazer alguma coisa nesse sentido, mas é um pouco difícil.&lt;/p&gt;

&lt;p&gt;Vejam a galeria de coisas legais que já foram criadas com o Principle &lt;a href=&#34;http://principleformac.com/gallery.html&#34; target=&#34;_blank&#34;&gt;principleformac.com/gallery.html&lt;/a&gt;, uns templates legais para usar ou ver como foram feitos &lt;a href=&#34;http://principletemplates.com/&#34; target=&#34;_blank&#34;&gt;principletemplates.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bom galera, baixem e testem os softwares e deixem ai um comentário sobre o que acharam e qual vocês usam no dia-a-dia.&lt;/p&gt;

&lt;p&gt;Uma lista para quem está começando:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://framerjs.com/&#34; target=&#34;_blank&#34;&gt;Framer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pixate.com/&#34; target=&#34;_blank&#34;&gt;Pixate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O famoso &lt;a href=&#34;https://www.sketchapp.com/&#34; target=&#34;_blank&#34;&gt;Sketch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.invisionapp.com/&#34; target=&#34;_blank&#34;&gt;Invision&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 — Trabalhando com Múltiplas imagens background-images</title>
      <link>http://tableless.com.br/css3-trabalhando-com-multiplas-imagens-background-images/</link>
      <pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/css3-trabalhando-com-multiplas-imagens-background-images/</guid>
      <description>

&lt;p class=&#34;graf--p&#34;&gt;
  Quem nunca se deparou com um layout com múltiplas imagens “sobrepostas” ou mesmo com títulos ou parágrafos que precisavam ficar suspensos sobre múltiplas imagens de fundo? Essa semana me deparei com o mesmo problema.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Com &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;CSS3&#34; href=&#34;https://developer.mozilla.org/en/CSS/CSS3&#34;&gt;CSS3&lt;/a&gt;, você pode aplicar aos elementos múltiplas imagens sobrepostas como plano de fundo. Sem a utilização do Z-index! É isso mesmo, “necas de pitibiriba” de Z-index.
&lt;/p&gt;

&lt;h2 id=&#34;velho-dilema-de-sobrepor-imagens-com-div-s-com-z-index-graf-h4&#34;&gt;Velho dilema de sobrepor imagens com div’s com Z-index… {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  A primeira solução que vem à cabeça é o velho e bom “Z-index”, Veja um exemplo de implementação:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;red&#34;&amp;gt;Red&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;green&#34;&amp;gt;Green&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;blue&#34;&amp;gt;Blue&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.red, .green, .blue {
    color: #fff;
    display: block;
    line-height: 100px;
    position: absolute;
    text-align: center;
    width: 100px;
}
.red {
    background: red;
    left: 20px;
    top: 20px;
    z-index: 0;
    opacity:0.5;
}
.green {
    background: green;
    left: 60px;
    top: 60px;
    z-index: 1;
    opacity:0.6;
}
.blue {
    background: blue;
    left: 100px;
    top: 100px;
    z-index: 2;
    opacity:0.7;
}
body {
    color: #777;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/grvvLw/&#34;&gt;Z-index&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;funciona-em-class-markup-em-markup-h4-em-sim-em-mas-espere-um-momento-essa-não-é-a-única-solução-graf-h4&#34;&gt;Funciona?!… &lt;em class=&#34;markup--em markup--h4-em&#34;&gt;SIM!&lt;/em&gt; Mas espere um momento, essa não é a única solução… {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  … Você já tava pensando num “workaround” safadinho, a mão da gambiarra chega a tremer nessas horas, mas nada de programação orientada a “Go-Horse”, hoje em dia temos “solucionática” pra quase tudo hehe…
&lt;/p&gt;

&lt;div style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*pAiFtxYHdjg4-HP6e46wZA.gif&#34; alt=&#34;www.gohorseprocess.com.br/extreme-go-horse-(xgh)&#34; width=&#34;500&#34; height=&#34;374&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    www.gohorseprocess.com.br/extreme-go-horse-(xgh)
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;conhecendo-as-propriedades-css-do-background-graf-h4&#34;&gt;Conhecendo as propriedades CSS do Background: {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;pre&gt;background-color.........define a cor do fundo;
background-image.........define uma imagem de fundo;
background-repeat........define a maneira como a imagem de fundo é posicionada;
background-attachment....define se a imagem de fundo &#34;rola&#34; ou não com a tela;
background-position......define como e onde a imagem de fundo é posicionada;
background-clip..........define a área do box onde a imagem de fundo é aplicada;
background-origin........define a posição de origem da imagem no box;
background-size..........define as dimensões da imagem no box;
background...............maneira abreviada para declarar todas as propriedades anteriores;&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  O nosso grande mestre &lt;a class=&#34;markup--user markup--p-user&#34; href=&#34;https://medium.com/u/addb7196c9b9&#34;&gt;Maurício Samy Silva&lt;/a&gt; #Maujor explica melhor as aplicações das propriedades &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&#34; rel=&#34;nofollow&#34;&gt;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Agora que conhecemos suas propriedades e características… agora vamos ver como o “background-image” funciona para entendermos nosso horizonte de possibilidades:
&lt;/p&gt;

&lt;h2 id=&#34;background-image-vs-z-index-a-batalha-graf-h4&#34;&gt;Background-image VS Z-index — A BATALHA: {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando trabalhamos 2 ou 3 elementos (sejam &lt;img&gt;, &lt;div&gt;, &lt;etc…&gt;) temos um controle até tolerável, mas… quando utilizamos 6, 10 ou mais elementos numa mesma div ou aninhamento próximo, o z-index começa a se tornar “linguiçento” demais e somos obrigados a utilizar mais classes e ids para organizarmos nosso CSS, pensando nisso que escrevi esse post!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;em&gt;Às vezes não necessariamente queremos ou podemos utilizar o z-index.&lt;/em&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Sem contar que quebramos o conceito de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/oocss-smacss-bem-dry-css-afinal-como-escrever-css/&#34;&gt;DRY&lt;/a&gt; em nosso documento CSS e não queremos isso, não é amiguinhos?
&lt;/p&gt;

&lt;div style=&#34;width: 495px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*xt8qqJopHwF-Gcg9xM6t3w.gif&#34; alt=&#34;Vida de um Front-end&#34; width=&#34;485&#34; height=&#34;364&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Front-end Lifestyle
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;z-index-quando-usar-graf-h4&#34;&gt;Z-index — Quando usar? {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando temos muitos elementos e precisamos especificar propriedades e características CSS que vão além do propósito de uma “imagem de fundo” ou “sobreposição” então o Z-index é a melhor opção!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Mas se você quer simplesmente sobrepor uma imagem de um logo (ou uma composição de camadas que formam um logo) sobre um uma ou mais imagem de preenchimento de fundo o background-image é a melhor solução!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Estes elementos ficam empilhados em camadas uma acima da outra, onde o primeiro fundo dado será desenhado no topo e apenas o último elemento da lista poderá definir uma cor sólida de fundo, ou não, aí fica ao seu critério.
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.minhaClasse {
  background: fundo1, fundo2, ..., fundoN;
}&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/tag/css3/&#34;&gt;CSS3&lt;/a&gt; permite especificar imagens de fundo para múltiplos elementos, usando nada mais do que uma única lista separada por vírgulas.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Você pode fazer isso com a propriedade reduzida &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt; e também com as propriedade individuais, com a exceção de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-color&#34;&gt;background-color&lt;/a&gt;. Isto é, as seguintes propriedades de plano de fundo podem ser especificadas com uma lista, uma por fundo: &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-attachment&#34;&gt;background-attachment&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;A propriedade CSS background-clip especifica se o fundo de um elemento, seja cor ou imagem, se extende debaixo de sua borda.&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-clip&#34;&gt;background-clip&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;background-image&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-origin&#34;&gt;background-origin&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-position&#34;&gt;background-position&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-repeat&#34;&gt;background-repeat&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-size&#34;&gt;background-size&lt;/a&gt;. (rola até gradiente!)
&lt;/p&gt;

&lt;h2 id=&#34;exemplos-graf-h3&#34;&gt;Exemplos {.graf&amp;ndash;h3}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Neste exemplo, três planos de fundos estão empilhados: um texto estilizado, o logo da Tableless.com.br, e uma imagem de fundo ilustrando uma cidade:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;div class=&#34;intro-text&#34;&amp;gt;
    &amp;lt;h1 class=&#34;name-index&#34;&amp;gt;BEM-VINDO À&amp;lt;/br&amp;gt;&amp;lt;span&amp;gt;INTERNET&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;header {
  background: url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&#34; rel=&#34;nofollow&#34;&gt;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&lt;/a&gt;) no-repeat center center, url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&#34; rel=&#34;nofollow&#34;&gt;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&lt;/a&gt;) no-repeat center top;
  height: 100vh;
  width: auto;
  box-sizing: border-box;
}
header .intro-text {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
header .intro-text &amp;gt; h1 {
  text-shadow: 8px 5px 5px #00181c;
  color: #fff;
  text-transform: uppercase;
  text-align: center;
}
header .intro-text .name-index {
  font-size: 7vw;
}
header .intro-text .name-index span {
  font-size: 9.2vw;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/vKddRK/&#34;&gt;Multiple backgrounds backgroud-image&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Suporte do navegador para múltiplas imagens com a propriedade CSS background-image é relativamente difundido na implementação do recurso citado acima:
&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Mozilla Firefox (3.6 ou superior)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Safari / Chrome (1.0 / 1.3 +)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Opera (10.5+)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    até mesmo no Internet Explorer (9.0+)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Bibliografia (Fontes)
&lt;/p&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;background-image&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;The CSS background-image property sets one or several background images for an element. The images are drawn on…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;Multiple backgrounds&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;Com CSS3 , você pode aplicar aos elementos multiplos planos de fundo. Estes ficam em camadas empilhadas uma acima da…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hierarquia no design</title>
      <link>http://tableless.com.br/hierarquia-no-design/</link>
      <pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/hierarquia-no-design/</guid>
      <description>&lt;p&gt;Hierarquia, segundo o dicionário Michaelis, é a categoria atribuída às pessoas ou às coisas, classificadas de acordo com a ordem de importância, crescente ou decrescente. Dessa forma, organizar hierarquicamente é o mesmo que definir graus de importância à alguém ou à alguma coisa.&lt;/p&gt;

&lt;p&gt;A hierarquia no design tem o mesmo objetivo da definição acima citada. Hierarquizar no design é controlar a transmissão e o impacto da mensagem. O designer sabe disso e faz uso da escala, cor, tonalidade, peso, inclinação, espacejamento, intervalos e inúmeras outras técnicas para atingir o objetivo de organizar a informação. Um exemplo clássico da importância da hierarquização no design é o sumário de um livro. Ali o leitor deverá encontrar as informações hierarquizadas e organizadas para que o conteúdo não fique confuso e que a navegação flua de tal forma que o leitor posso ter uma noção geral, porém real, do conteúdo do livro.&lt;/p&gt;

&lt;p&gt;A hierarquia guia o usuário na interface do dispositivo. Um site bem projetado é, entre outras coisas, ter as suas seções e estruturas dispostas em uma hierarquia coerente, que facilite a navegação do usuário no encontro das informações que deseja. Por exemplo, o título de uma seção recebe uma tipografia no tamanho de 48 pixels e um corpo pesado (bold), e o slogan que está posicionado logo abaixo recebe uma tipografia no tamanho de 24 pixels e um corpo normal. Bem, nesse caso o designer comunicou ao usuário que o título é mais importante que o slogan, e que deve ser lido primeiro e o slogan em seguida.&lt;/p&gt;

&lt;p&gt;De acordo com as designers Ellen Lupton e Jennifer Cole Phillips, autoras do livro &amp;#8220;Novos Fundamentos do Design&amp;#8221;, &amp;#8220;expressar hierarquias é um processo ativo, investigativo e capaz de gerar resultados visuais dinâmicos.&amp;#8221;. Hierarquizar não precisa ser a mesma coisa sempre. O designer pode ser inventivo, criativo na solução de problemas de hierarquia, toda a vez que o projeto permitir, para sempre romper a barreira do &amp;#8220;mais do mesmo&amp;#8221;. Essa inovação renova o interesse do usuário no conteúdo.&lt;/p&gt;

&lt;p&gt;Abaixo alguns exemplos onde a hierarquia é aplicada:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-54066&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/05/Parcel.png&#34; alt=&#34;Parcel&#34; width=&#34;1351&#34; height=&#34;642&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;No site de entregas &lt;a href=&#34;https://www.fromparcel.com/&#34;&gt;Parcel&lt;/a&gt;, a home foi pensada e construída de forma que as atenções iniciais se voltem para a marca da empresa escrita no tamanho de 54 pixels. Após esse impacto inicial o usuário é conduzido a ler o slogan da empresa, que está escrito no tamanho de 19 pixels. Essa diferença entre os tamanhos indica claramente quem é mais importante, e quem deve ser lido primeiro. Isso é hierarquizar as informações.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-54067&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/05/webField.png&#34; alt=&#34;webField&#34; width=&#34;1348&#34; height=&#34;642&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Nesse caso o impacto não é tão gritante quanto o anterior. No site Web Field Manual os títulos estão no tamanho de 16 pixels, com um corpo pesado (bold), em caixa-alta (caps lock) e na cor vermelha. Já a descrição que vem logo abaixo de cada título está no tamanho de 13 pixels, porém com um corpo normal (regular). Bem, o contraste causado nesse caso também comunica ao usuário que ele deve ler o título primeiro, para após ler a descrição.&lt;/p&gt;

&lt;p&gt;Esses exemplos deixam claro que existem muitas possibilidades de trabalhar a hierarquia em um projeto gráfico ou para web. O importante é que o designer tenha os conhecimentos necessários de hierarquia, um bom senso crítico e muita criatividade, pois o sucesso é garantido.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4 PASSOS DA HIERARQUIA&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Guiar o usuário &amp;#8211;&lt;/strong&gt; A hierarquia guia a navegação do usuário na plataforma, seja ela on-line ou off-line. A hierarquia mostra o que o usuário deve ler primeiro.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Destacar o mais importante &amp;#8211;&lt;/strong&gt; Em um site de notícias, por exemplo, os títulos das notícias recebem um destaque maior. Dessa forma, se houver interesse pelo título, o usuário vai clicar e ler a notícia.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O usuário escaneia o conteúdo &amp;#8211;&lt;/strong&gt; Isso está relacionado aos conceitos UI e UX, pois o usuário faz um escaneamento geral da interface, diferentemente de uma máquina que escaneia item por item de forma individual. Esse escaneamento feito pelo usuário faz com que ele tenha uma noção real do que se trata o conteúdo, e dessa forma vai buscar os itens com maior destaque na interface para saber se vai continuar lendo ou não.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tudo influencia a hierarquia &amp;#8211;&lt;/strong&gt; Inclinação, cor, peso, tonalidade, espaçamento, contraste entre a tipografia, alinhamento, entre outros.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Faz uma animação legal aí!</title>
      <link>http://tableless.com.br/faz-uma-animacao-legal-ai/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/faz-uma-animacao-legal-ai/</guid>
      <description>&lt;p&gt;Sempre que um projeto começa, eu me questiono se a agência entende a importância da animação para o design de interface e como o trabalho do motion designer pode contribuir para o sucesso da experiência interativa, reforçando tudo o que foi pensado desde o nascimento do projeto, lá na arquitetura de informação.&lt;/p&gt;

&lt;p&gt;Muitas vezes, ouvi que o motion designer coloca a mão no projeto para refinar e fazer firulas no site. Isso dava a sensação de que meu trabalho era secundário. Ou então, que se não houvesse prazo suficiente para animar o site, me era dito: escolhe um elemento que você acha importante e faz uma animação legal aí.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Legal! Mas o que é uma “animação legal”?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Infelizmente, a animação é considerada decorativa pela maior parte dos profissionais de desenvolvimento web. E entender animação como algo apenas “legal” torna muito mais difícil de levar essa etapa do processo a sério, quando na verdade é parte essencial do processo de comunicação e entendimento em um projeto interativo.&lt;/p&gt;

&lt;p&gt;Nós usamos o HTML para contar histórias e comunicar grandes quantidades de informação. E a animação nos ajuda a fazer as duas coisas de forma melhor. Imaginemos que a animação é um guia turístico, que permite às pessoas acompanhar a história do seu site sem se perderem. Ela ajuda o olhar a se orientar dentro da interface, encontrar o seu caminho ou estabelecer relações visuais.&lt;/p&gt;

&lt;p&gt;Nossos cérebros e olhos são programados a prestar atenção aos objetos em movimento &amp;#8211; é um reflexo. Mágicos usam o movimento para realizar truques com as mãos. Desta forma, a animação pode ajudar o olho a ver de onde um novo objeto vem ou para onde o objeto foi (e provavelmente saber onde encontrá-lo novamente). Motion não é firula, é necessário e pode melhorar a experiência do usuário e tornar o design mais consistente e real.&lt;/p&gt;

&lt;p&gt;Portanto, a animação de interface preenche eventuais lacunas de compreensão de diversas maneiras:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;É crucial para sugerir interação, bem como criar um estímulo visual para o usuário perceber novas informações numa mudança de status na interface;&lt;/li&gt;
&lt;li&gt;Fornece feedback visual e sinaliza pistas do que vem em seguida;&lt;/li&gt;
&lt;li&gt;Apresenta transições espacialmente lógicas entre telas. Além disso, elementos animados de acordo com as leis da física ajudam as pessoas a memorizar a interface mais facilmente, pois lhes parece familiar e previsível;&lt;/li&gt;
&lt;li&gt;Estilos de animações transmitem mais personalidade ao conteúdo do que qualquer interação estática poderia transmitir;&lt;/li&gt;
&lt;li&gt;Animações bem feitas conquistam os usuários, tornam a experiência mais agradável e divertida e os ajuda a se relacionar de forma melhor com o produto.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hoje, com a propagação das pequenas telas dos devices, que nos leva a implementar grandes interfaces em pequenos espaços, seria confuso e frustrante para o usuário entender as relações espaciais entre layers, abas deslizantes e zooms sem o trabalho do motion designer para ligar os pontos. Assim como na tipografia, que pode apenas servir funcionalmente para a leitura ou pode agregar expressão ao conteúdo, a animação também pode ir além e se moldar para trabalhar em harmonia com o design. A atenção a esse nível de detalhes é o que separa os grandes projetos dos medianos, tanto na tipografia como em animação.&lt;/p&gt;

&lt;p&gt;Apesar da chatice de centenas de terminologias de profissões surgirem a cada mês no Linkedin (sim, já vi coisas como “astronauta de ideias” por lá), nossa área vem se denominando Motion UI. E há indícios de que venha, num futuro próximo, a se chamar UX Choreographer. É algo novo no mundo digital, mas que vem provando sua importância e não só merece uma fatia maior das horas do projeto, como também precisa deixar de ser “apenas” um braço da direção de arte ou da programação dentro das agências para, enfim, se tornar uma área de maior importância e independência.&lt;/p&gt;

&lt;p&gt;Independente, aqui, se refere a tornar-se mais profissional e não somente ser a pessoa que fica sentada sozinha no fundão da agência só recebendo o famoso: “faz alguma coisa legal aí!”.&lt;/p&gt;

&lt;p&gt;As agências e produtoras devem prever o espaço para mais um locutor, mais esse contador de histórias. A animação precisa ter sua voz e movimento devidamente reconhecidos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Para saber mais&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recomendo ler o artigo &lt;a href=&#34;https://medium.com/@adaptivepath/jedi-principles-of-ui-animation-2b88423b1dac#.gzxg45w5u&#34; target=&#34;_blank&#34;&gt;Jedi Principles of UI Animation&lt;/a&gt;, uma verdadeira aula sobre animação de interface.&lt;/p&gt;

&lt;p&gt;Vale também assistir o vídeo &lt;a href=&#34;https://vimeo.com/93206523&#34; target=&#34;_blank&#34;&gt;Illusion of Life&lt;/a&gt;, sobre os 12 prncípios básicos da animação, de Frank Thomas e Ollie Johnston, animadores dos estúdios Disney.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React Native: Construa aplicações móveis nativas com JavaScript</title>
      <link>http://tableless.com.br/react-native-construa-aplicacoes-moveis-nativas-com-javascript/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/react-native-construa-aplicacoes-moveis-nativas-com-javascript/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;O &lt;strong&gt;React Native&lt;/strong&gt; é um projeto desenvolvido pelos engenheiros do &lt;strong&gt;Facebook&lt;/strong&gt; e que consiste em uma série de ferramentas que viabilizam a criação de aplicações móveis &lt;strong&gt;nativas&lt;/strong&gt; para a plataforma &lt;strong&gt;iOS&lt;/strong&gt; e &lt;strong&gt;Android&lt;/strong&gt;, utilizando o que há de mais moderno no desenvolvimento Front-end &amp;#8211; mirando no futuro. É o estado da arte no que se refere ao desenvolvimento mobile baseado em JavaScript.&lt;/p&gt;

&lt;p&gt;O stack do React Native é poderoso, pois nos permite utilizar &lt;strong&gt;ECMAScript 6&lt;/strong&gt;, &lt;strong&gt;CSS Flexbox&lt;/strong&gt;, &lt;strong&gt;JSX&lt;/strong&gt;, diversos pacotes do &lt;strong&gt;NPM&lt;/strong&gt; e muito mais. Sem contar que nos permite fazer debug na mesma IDE utilizada para o desenvolvimento nativo com essas plataformas (além de tornar o processo extremamente divertido).&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Nesta introdução ao React Native iremos criar um aplicativo nativo voltado para a plataforma iOS, o que significa que você precisa de um computador rodando &lt;strong&gt;Mac OS X&lt;/strong&gt;. Embora o desenvolvimento para Android já seja possível com o framework (foi anunciado em setembro de 2015), o foco aqui será o iOS. Mas irei falar um pouco sobre o Android mais à frente neste post.&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-xcode&#34;&gt;Instalando o Xcode&lt;/h3&gt;

&lt;p&gt;A primeira coisa que você precisa instalar (caso ainda não o tenha em sua máquina) é o &lt;strong&gt;Xcode&lt;/strong&gt;. Xcode é a IDE de desenvolvimento da Apple para criação de aplicativos para iPhone e iPad. Sua instalação é necessária pois, sem ele, nosso código não poderá ser &amp;#8220;compilado&amp;#8221; para Objective-C. Também é nele que iremos fazer o debug de nossa aplicação.&lt;/p&gt;

&lt;p&gt;Para instalar, basta abrir a App Store no seu Mac e buscar por &amp;#8220;Xcode&amp;#8221;. A instalação pode ser um pouco demorada. Aproveite esse tempo pra contar para os seus familiares que você irá construir uma aplicação iOS nativa utilizando apenas JavaScript e os recursos mais modernos da plataforma. 😉&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-node-js&#34;&gt;Instalando o Node.js&lt;/h3&gt;

&lt;p&gt;O React Native é um projeto que utiliza recursos provenientes do Node.js, portanto precisaremos dele para prosseguir.&lt;/p&gt;

&lt;p&gt;Há duas maneiras de instalar o Nodejs: Voce pode fazer download diretamente no &lt;a href=&#34;https://nodejs.org/en/download/&#34; target=&#34;_blank&#34;&gt;site do projeto&lt;/a&gt; ou através do &lt;a href=&#34;http://brew.sh/&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt;, o famoso package manager do Mac OS X. Caso já o tenha instalado na sua máquina, basta digitar o seguinte código no seu Terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ter o Homebrew instalado na sua máquina é preferível pois iremos utilizá-lo para instalar a maioria dos outros pacotes necessários para nossa aplicação.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Conforme sugerido pela documentação oficial, você pode instalar o &lt;strong&gt;NVM&lt;/strong&gt; (Node Version Manager) ao invés de instalar o Node diretamente, já que o React Native trabalha com versões do Node iguais ou superiores à versão 4.0. Basta digitar no Terminal &amp;#8220;&lt;strong&gt;brew install nvm&lt;/strong&gt;&amp;#8221; e em seguida &amp;#8220;&lt;strong&gt;nvm install node &amp;amp;&amp;amp; nvm alias default node&lt;/strong&gt;&amp;#8221; para garantir a instalação da versão mais recente.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;instalando-o-watchman&#34;&gt;Instalando o Watchman&lt;/h3&gt;

&lt;p&gt;O &lt;strong&gt;Watchman&lt;/strong&gt; é um pacote muito bacana responsável por monitorar alterações em nosso código e atualizar a nossas views em tempo real (um recurso extremamente poderoso no qual iremos falar mais à frente).&lt;/p&gt;

&lt;p&gt;Digite a seguinte instrução no seu Terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install --HEAD watchman&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;O parâmetro &lt;code&gt;--HEAD&lt;/code&gt; é necessário pois garante que a última versão do Watchman será instalada, evitando problemas de compatibilidade com a versão mais recente do Framework.&lt;/p&gt;

&lt;p&gt;Ótimo. Estamos quase lá&amp;#8230;&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-cli-do-react-native&#34;&gt;Instalando o CLI do React Native&lt;/h3&gt;

&lt;p&gt;Por fim, precisamos instalar o &lt;strong&gt;CLI&lt;/strong&gt; (Command Line Interface) do projeto que consiste em uma série de helpers necessários para a criação dos nossos aplicativos. Dessa vez, iremos instalar utilizando o NPM:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g react-native-cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Utilizamos o &lt;code&gt;-g&lt;/code&gt; para instalar o CLI de forma global em nossa máquina.&lt;/p&gt;

&lt;p&gt;Perfeito! Agora que todo o nosso arsenal foi preparado, podemos iniciar nossa aventura. Vamos conhecer um pouco do React Native e criar uma aplicação simples de exemplo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caso queira acompanhar através do &lt;strong&gt;Git&lt;/strong&gt;, basta clonar o &lt;a href=&#34;https://github.com/carloscabral/myFirstProject---React-Native&#34; target=&#34;_blank&#34;&gt;repositório do projeto no Github&lt;/a&gt;, acessar a pasta do mesmo através da linha de comando e digitar as seguintes instruções no Terminal: &lt;strong&gt;git checkout step2 &amp;amp;&amp;amp; npm install&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;executando-o-aplicativo-de-exemplo&#34;&gt;Executando o aplicativo de exemplo&lt;/h2&gt;

&lt;p&gt;Criar uma aplicação com o React Native é muito simples. Crie uma pasta qualquer e navegue pra dentro dela utilizando o Terminal. Digite o seguinte comando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-native init MyFirstProject&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Se você abrir a pasta do projeto no seu computador, irá verificar que três arquivos foram automaticamente criados:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.ios.js&lt;/li&gt;
&lt;li&gt;index.android.js&lt;/li&gt;
&lt;li&gt;package.json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E três pastas também:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ios&lt;/li&gt;
&lt;li&gt;android&lt;/li&gt;
&lt;li&gt;node_modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O arquivo &lt;em&gt;index.ios.js&lt;/em&gt; é onde iremos escrever o código da nossa aplicação. A vantagem aqui é que podemos utilizar o nosso editor de texto favorito ao invés de uma IDE (prática comum entre os devs Frontend). O arquivo &lt;em&gt;package.json&lt;/em&gt; é criado automaticamente pelo NPM e serve para gerenciar as dependências da nossa aplicação, que, por sua vez, ficam disponíveis na pasta _node&lt;em&gt;modules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A pasta &lt;em&gt;ios&lt;/em&gt; é onde a mágica ocorre. Esta é a pasta que contém o projeto iOS nativo gerado pelo React Native (o mesmo conceito para a pasta android). Faça um teste e abra o arquivo &lt;em&gt;MyFirstProject.xcodeproj&lt;/em&gt; no Xcode para visualizar sua extrutura no &lt;strong&gt;Project Navigator&lt;/strong&gt; (à esquerda). Agora pressione o botão &lt;strong&gt;Run&lt;/strong&gt; na barra de ferramentas, conforme a imagem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/xcode-run-button.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52737&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/xcode-run-button.jpg&#34; alt=&#34;xcode-run-button&#34; width=&#34;442&#34; height=&#34;139&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com isso acabamos de solicitar a execução do aplicativo. Neste momento estamos &amp;#8220;compilando o código JavaScript&amp;#8221; presente no nosso projeto (criado por default) para Objective-C e gerando o bundle da aplicação. Agora já podemos testar o resultado em um emulador.&lt;/p&gt;

&lt;p&gt;Geralmente o emulador demora um pouco para exibir alguma coisa na primeira vez que é acionado, mas nada lhe impede de rodar o app em um iPhone real. Basta abrir o arquivo &lt;em&gt;AppDelegate.m&lt;/em&gt;, localizar a string atribuída ao objeto &lt;code&gt;jsCodeLocation&lt;/code&gt; com o conteúdo &lt;strong&gt;@&lt;a href=&#34;http://localhost:8081/&amp;amp;#8230&#34;&gt;http://localhost:8081/&amp;amp;#8230&lt;/a&gt;;&lt;/strong&gt; e alterar o valor de &lt;code&gt;localhost&lt;/code&gt; para o número de IP do seu computador. Lembre-se que o device precisa estar conectado ao seu Mac através da porta USB e ambos devem compartilhar da mesma rede Wifi. Por fim, basta selecionar o seu iPhone na lista de emuladores disponíveis no Xcode.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Para que o procedimento acima seja possível, é necessário que você tenha uma conta de desenvolvedor (iOS developer account) configurada na Apple. Basta gerar um certificado, registrar o seu device e &amp;#8211; depois de efetuar todo o exaustivo processo de configuração &amp;#8211; ele ficará disponível na lista de &lt;strong&gt;deploy target&lt;/strong&gt; do Xcode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quando o emulador terminar de carregar, o resultado exibido será este:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-initial-screen_2.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52742&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-initial-screen_2.jpg&#34; alt=&#34;react native initial screen&#34; width=&#34;344&#34; height=&#34;524&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perceba que o aplicativo de exemplo contém apenas poucos parágrafos com instruções básicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para iniciar, basta editar o arquivo &lt;em&gt;index.ios.js&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Para recarregar a aplicação, basta pressionar &lt;strong&gt;CMD + R&lt;/strong&gt; no teclado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vamos então abrir o arquivo &lt;em&gt;index.ios.js&lt;/em&gt; em nosso editor favorito. No meu caso, irei trabalhar com o &lt;a href=&#34;http://www.sublimetext.com/2&#34; target=&#34;_blank&#34;&gt;Sublime Text 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você já está acostumado com a escrita de código do React, não há motivos para sustos. Mas, se este não for o seu caso, não entre em pânico: o React Native é muito simples de trabalhar.&lt;/p&gt;

&lt;p&gt;Vamos fazer um pouco de mágica agora: Encontre o texto &lt;strong&gt;Welcome to React Native&lt;/strong&gt; e modifique-o para &lt;strong&gt;My First Voodoo App!&lt;/strong&gt; &amp;#8211; ou qualquer outra coisa que você queira. Abra o emulador e pressione &lt;strong&gt;CMD + R&lt;/strong&gt; no seu teclado (caso abra uma action sheet, basta clicar em &amp;#8220;Reload&amp;#8221;). Perceba que, em poucos segundos, sua View foi atualizada com o texto novo. Este, meu amigo, é um dos recursos mais fantásticos presentes na plataforma: O live-reload!&lt;/p&gt;

&lt;p&gt;Se você já vem de um background web, deve estar se perguntando: &amp;#8221; &amp;#8211; Sério? Existe motivo para dramatizar com isso?&amp;#8221;. Mas se você já tem experiência no desenvolvimento com &lt;strong&gt;Swift&lt;/strong&gt; ou &lt;strong&gt;Objective-C&lt;/strong&gt; deve saber que alterações feitas no seu código precisam ser re-compiladas no Xcode para que você possa visualizar o que foi modificado. Alterações em Views não são refletidas em tempo real quando você está trabalhando de forma nativa. Isso, por si só, já faz o React Native merecer sua atenção!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fazer preview de alterações visuais de componentes em tempo de desenvolvimento é um recurso que pode ser conseguido com &lt;strong&gt;IBDesignables&lt;/strong&gt; de modo nativo. Este recurso está disponível a partir da versão 6 do Xcode. Com ele o desenvolvedor pode visualizar aquilo que está modificando na View sem precisar compilar o app. Mas este é um recurso relativamente avançado utilizado por desenvolvedores mais experientes e que necessita de escrita de código para funcionar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos agora tentar entender melhor como foi estruturado o código de exemplo e o que cada bloco significa.&lt;/p&gt;

&lt;h2 id=&#34;estrutura-do-react-native&#34;&gt;Estrutura do React Native&lt;/h2&gt;

&lt;p&gt;Todo projeto em React tem como premissa a criação e reutilização de componentes. Basicamente, o que o código de exemplo faz é criar o componente e exibi-lo na tela. Olhando pra ele, você já deve ter reparado que o bloco central é o principal responsável por essa operação:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var MyFirstProject = React.createClass({
 render: function() {
   return (
     &amp;lt;View style={styles.container}&amp;gt;
       &amp;lt;Text style={styles.welcome}&amp;gt;
         My First Voodoo App!
       &amp;lt;/Text&amp;gt;
       &amp;lt;Text style={styles.instructions}&amp;gt;
         To get started, edit index.ios.js
       &amp;lt;/Text&amp;gt;
       &amp;lt;Text style={styles.instructions}&amp;gt;
         Shake or press menu button for dev menu
       &amp;lt;/Text&amp;gt;
     &amp;lt;/View&amp;gt;
   );
 }
});
&lt;/pre&gt;

&lt;p&gt;Agora que você já brincou um pouco com o código gerado por default, vamos esquecê-lo por um minuto e criar algo do zero.&lt;/p&gt;

&lt;p&gt;Exclua todo o conteúdo do arquivo &lt;em&gt;index.ios.js&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Em React, para criar um novo componente, basta criar uma variável qualquer que receba a notação:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;React.createClass({});
&lt;/pre&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Tableless = React.createClass({

});
&lt;/pre&gt;

&lt;p&gt;Agora é necessário suprir esse componente com parâmetros e uma série de instruções, responsáveis por definir o seu comportamento e aspecto visual. Quem se responsabiliza por isso é o método &lt;code&gt;render&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo, se quisermos retornar alguma coisa na classe &lt;strong&gt;Tableless&lt;/strong&gt; que acabamos de criar, faríamos:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Tableless = React.createClass({
   render: function() {
      return &amp;lt;p&amp;gt;Hello, Tableless!&amp;lt;/p&amp;gt;;
   }
});
&lt;/pre&gt;

&lt;p&gt;Mas, pera aí&amp;#8230; O que significa essa tag de parágrafo HTML envolta do texto? Afinal, estamos lidando com HTML ou JavaScript?&lt;/p&gt;

&lt;h3 id=&#34;jsx&#34;&gt;JSX&lt;/h3&gt;

&lt;p&gt;Para facilitar a escrita de código, o React utiliza &lt;strong&gt;JSX&lt;/strong&gt; (opcional), uma sintaxe que possibilita a escrita de componentes JavaScript por meio de tags.&lt;/p&gt;

&lt;p&gt;Para ilustrar isso melhor, o componente acima poderia ser escrito da seguinte maneira sem o uso do JSX:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Tableless = React.createClass({
  render: function() {
     return React.createElement(&#34;p&#34;, null, &#34;Hello, Tableless!&#34;);
  }
});
&lt;/pre&gt;

&lt;p&gt;Conforme pode ser observado, esta é uma forma de escrita muito mais verbosa do que a anterior. Eu sei, pode parecer que você está escrevendo HTML dentro de JavaScript mas, com a devida prática, você vai entender como o JSX quebra um grande galho para o desenvolvedor. Optar por não utilizá-lo é certeza de ter um código muito repetitivo e de difícil manutenção.&lt;/p&gt;

&lt;p&gt;Agora que você compreendeu como funciona o JSX, deve estar se perguntando (pelo menos eu espero) como uma aplicação móvel pode retornar tags HTML como &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;h1&lt;/code&gt; ou &lt;code&gt;div&lt;/code&gt; dentro de um componente nativo, certo?&lt;/p&gt;

&lt;p&gt;Exatamente&amp;#8230; não pode.&lt;/p&gt;

&lt;p&gt;Embora o código acima execute sem falhas em aplicações web, ele não funcionaria dentro do escopo do React Native, simplesmente porque o que precisamos são de componentes do iOS, como &lt;code&gt;UIView&lt;/code&gt;, &lt;code&gt;UILabel&lt;/code&gt; e &lt;code&gt;UIImage&lt;/code&gt;. Ou seja, se você precisa de um &amp;#8220;wrapper&amp;#8221; na sua tela, você irá retornar o componente &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; ao invés de uma &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. Caso queira exibir um texto, você irá utilizar a tag &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; ao invés de um &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; e assim por diante.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/react-native/docs/&#34; target=&#34;_blank&#34;&gt;Aqui&lt;/a&gt; você encontra a listagem completa dos componentes disponíveis, tanto para iOS quanto para Android.&lt;/p&gt;

&lt;h3 id=&#34;es6&#34;&gt;ES6&lt;/h3&gt;

&lt;p&gt;Após a criação de um componente precisamos registrá-lo para exibição. Fazemos isso retornando a função com o nome do componente através do &lt;code&gt;AppRegistry&lt;/code&gt;, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Se o código acima não ficou óbvio pra você, não se assuste. Por default o React Native permite que trabalhemos com as novas epecificações do &lt;strong&gt;EcmaScript 6&lt;/strong&gt; (ou 2015, para os íntimos). Uma delas é a sintaxe chamada de &lt;strong&gt;arrow functions&lt;/strong&gt; (familiar para quem já trabalhou com &lt;strong&gt;CoffeeScript&lt;/strong&gt;), que permite uma escrita mais simples baseada em &lt;strong&gt;closures&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A versão JavaScript &lt;strong&gt;ES5&lt;/strong&gt; do código acima seria:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;AppRegistry.registerComponent(&#39;MyFirstProject&#39;, function() {
   return Tableless
});
&lt;/pre&gt;

&lt;p&gt;Mas uma vez, é uma questão de preferência e não uma imposição da ferramenta.&lt;/p&gt;

&lt;p&gt;Contudo, o que fizemos até aqui não será suficiente para fazer o código rodar. Nós não definimos nenhuma das dependências declaradas na aplicação. Vamos resolver esse problema:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react-native&#39;);&lt;/pre&gt;

&lt;p&gt;A string entre aspas é a biblioteca que estamos solicitando acesso. Nesta caso, estamos atribuindo seu retorno à variável React que acabamos de criar.&lt;/p&gt;

&lt;p&gt;Agora que temos acesso à principal biblioteca do React, vamos declarar as restantes, necessárias para rodar nossa aplicação sem erros. A versão completa do nosso código fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var AppRegistry = React.AppRegistry;
var View = React.View;
var Text = React.Text;

var Tableless = React.createClass({
    render: function() {
        return &amp;lt;View&amp;gt;
            &amp;lt;Text&amp;gt;
              Hello, Tableless!
            &amp;lt;/Text&amp;gt;
        &amp;lt;/View&amp;gt;
    }
});

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Se você pressionar &lt;strong&gt;CMD + R&lt;/strong&gt; no teclado já terá uma aplicação rodando sem erros. Mas vamos corrigir mais duas coisinhas pra deixar nosso código ainda mais atraente&amp;#8230;&lt;/p&gt;

&lt;p&gt;Substitua o código do escopo de declaração pelo seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react-native&#39;);
var {
  AppRegistry,
  View,
  Text,
} = React;
&lt;/pre&gt;

&lt;p&gt;Como todas as bibliotecas declaradas depois da react-native fazem parte do seu core, podemos assinalar as três variáveis seguintes ao objeto React. Este é mais um recurso disponível do &lt;strong&gt;ES6/ES2015&lt;/strong&gt; chamado de &lt;strong&gt;destructuring assignment&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Outra coisa que não está muito legal no código é a indentação dos componentes no método return. Vamos envolvê-los em um parênteses para que seja permitido pular de linha e tabular tudo seguindo uma melhor hierarquia visual, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;render: function() {
     return (
       &amp;lt;View&amp;gt;
          &amp;lt;Text&amp;gt;
             Hello, Tableless!
          &amp;lt;/Text&amp;gt;
       &amp;lt;/View&amp;gt;
     );
  }
&lt;/pre&gt;

&lt;p&gt;Vale salientar que sem o parênteses essa tabulação não seria possível e iria disparar um erro no simulador.&lt;/p&gt;

&lt;p&gt;Vamos ver como ficou o código final agora:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
  AppRegistry,
  View,
  Text,
} = React;

var Tableless = React.createClass({
   render: function() {
      return (
         &amp;lt;View&amp;gt;
             &amp;lt;Text&amp;gt;
                Hello, Tableless!
             &amp;lt;/Text&amp;gt;
         &amp;lt;/View&amp;gt;
      );
   }
});

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Se você rodar o aplicativo, irá perceber que o mesmo executa sem erros. Mas, numa primeira olhada, parece que não há nada na tela! Se você observar atentamente, irá perceber que o texto está no canto superior esquerdo da tela, sem qualquer tipo de orientação ou margem. Precisamos corrigir isso!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_1.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52746&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_1.jpg&#34; alt=&#34;react native simple label&#34; width=&#34;344&#34; height=&#34;524&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;flexbox&#34;&gt;Flexbox&lt;/h3&gt;

&lt;p&gt;Como estamos lidando exclusivamente com JavaScript, não temos acesso a CSS. Mas para aproximar a experiência de criar aplicativos móveis ao desenvolvimento de uma página web, os responsáveis pelo projeto desenvolveram uma maneira declarativa de estilizar componentes bem similar ao CSS.&lt;/p&gt;

&lt;p&gt;Insira a seguinte notação no bloco da View principal (linha 2 do código):&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;return (
      // fazemos referência ao estilo
      &amp;lt;View style={styles.container}&amp;gt;
          &amp;lt;Text&amp;gt;
              Hello, Tableless!
          &amp;lt;/Text&amp;gt;
      &amp;lt;/View&amp;gt;
   );
&lt;/pre&gt;

&lt;p&gt;Agora vamos criar uma variável &amp;#8220;styles&amp;#8221; que recebe o objeto &lt;strong&gt;StyleSheet&lt;/strong&gt; com os seguintes parâmetros:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var styles = StyleSheet.create({

container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
}

})
&lt;/pre&gt;

&lt;p&gt;Antes de executar o código, precisamos incluir o &lt;strong&gt;StyleSheet&lt;/strong&gt; em nosso escopo de inicialização:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var {
  AppRegistry,
  StyleSheet,
  Text,
  View,
} = React;
&lt;/pre&gt;

&lt;p&gt;Agora sim. Execute o código pelo Xcode e você verá o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_3.2.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52767&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_3.2.jpg&#34; alt=&#34;react native simple label with border&#34; width=&#34;344&#34; height=&#34;524&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O texto agora se encontra alinhado no centro da tela e temos uma borda vermelha envolta do container. O que aconteceu aqui?&lt;/p&gt;

&lt;p&gt;Bem, nós criamos um objeto container com seis parâmetros: &lt;code&gt;flex&lt;/code&gt;, &lt;code&gt;flexDirection&lt;/code&gt;, &lt;code&gt;justifyContent&lt;/code&gt;, &lt;code&gt;alignItems&lt;/code&gt;, &lt;code&gt;borderWidth&lt;/code&gt; e &lt;code&gt;borderColor&lt;/code&gt;. Os dois últimos são autoexplicativos e similares à aplicação de bordas do CSS. A diferença aqui é que ao invés de declarar &lt;code&gt;border-width&lt;/code&gt;, com hífen, declaramos &lt;code&gt;borderWidth&lt;/code&gt;, em &lt;strong&gt;camelCase&lt;/strong&gt; (lembrando que estamos lidando com JavaScript e não CSS de verdade). Outra observação importante é que não precisamos atribuir &lt;strong&gt;px&lt;/strong&gt; ao final do valor como fazemos na web, pois aplicativos nativos tem suas resoluções de tela baseada em pontos &lt;strong&gt;(pt)&lt;/strong&gt; e não em pixels.&lt;/p&gt;

&lt;p&gt;O React Native utiliza o &lt;strong&gt;Flexbox&lt;/strong&gt; para organização visual dos componentes, o que simplifica, em muito, a construção de layouts. Basicamente, o parâmetro &lt;code&gt;flex: 1&lt;/code&gt; significa que o container ocupa 100% de altura e largura na tela. O parâmetro &lt;code&gt;flexDirection: column&lt;/code&gt; significa que os elementos seguirão o fluxo baseado em colunas, que é de cima para baixo. A outra opção seria &lt;code&gt;flexDirection: row&lt;/code&gt;, onde os elementos são ordenados da esquerda para a direita. Por default, O fluxo padrão é o de colunas, portanto você pode apagar essa instrução sem nenhum impacto no seu código.&lt;/p&gt;

&lt;p&gt;Por fim, temos a instrução &lt;code&gt;justifyContent: center&lt;/code&gt; e &lt;code&gt;alignItems: center&lt;/code&gt;. O primeiro é responsável por alinhar o conteúdo de forma vertical (eixo y), enquanto o último serve para alinhar de forma horizontal (eixo x). Além de &lt;code&gt;center&lt;/code&gt;, também existem outros valores como &lt;code&gt;flex-start&lt;/code&gt; e &lt;code&gt;flex-end&lt;/code&gt;. Tente utilizá-los para ver o que acontece no seu layout&amp;#8230;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Se ainda restou alguma dúvida, &lt;a href=&#34;http://tableless.com.br/centralizando-conteudo-na-vertical-e-horizontal-com-css-flexbox/&#34; target=&#34;_blank&#34;&gt;este post&lt;/a&gt; escrito pelo Diego Eis pode te ajudar a entender.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;E se eu quiser uma borda arredondada envolta do texto e não no container? Também gostaria de mudar a cor do texto, centralizá-lo e inserir um padding envolta do mesmo. Simples&amp;#8230;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
 AppRegistry,
 StyleSheet,
 Text,
 View,
} = React;

var Tableless = React.createClass({
   render: function() {
      return (
         &amp;lt;View style={styles.container}&amp;gt;
             // criamos um novo estilo para o componente de texto
             &amp;lt;Text style={styles.myText}&amp;gt;
                 Hello, Tableless!
             &amp;lt;/Text&amp;gt;
         &amp;lt;/View&amp;gt;
      );
   }
});

var styles = StyleSheet.create({

 container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
 },
 // declaração do nosso novo estilo
 myText: {            
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
   borderRadius: 4,
   textAlign: &#39;center&#39;,
   padding: 10,
 // também é permitido passar uma string da cor ao invés de um hexadecimal
   color: &#39;green&#39;,
 }

})

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Executando o código:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_2.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52746&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_2.jpg&#34; alt=&#34;react native simple label&#34; width=&#34;344&#34; height=&#34;524&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora que você já está familiarizado com o &amp;#8220;modo React&amp;#8221; de criar aplicações, vamos tentar entender rapidamente o que acontece por baixo dos panos&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;javascriptcore&#34;&gt;JavaScriptCore&lt;/h2&gt;

&lt;p&gt;Se você já ouviu falar sobre React, já ouviu sobre &lt;strong&gt;Virtual DOM&lt;/strong&gt;. Essa é uma forma genial de abstração que os engenheiros do facebook desenvolveram para trazer melhorias na performance de aplicações web, uma vez que um &lt;a href=&#34;https://pt.wikipedia.org/wiki/Modelo_de_Objeto_de_Documentos&#34; target=&#34;_blank&#34;&gt;DOM&lt;/a&gt; Virtual fica em memória e apenas modificações significativas em sua estrutura são novamente renderizadas na tela, sem necessidade de percorrer toda a árvore novamente.&lt;/p&gt;

&lt;p&gt;Em algum momento eles pensaram: &lt;em&gt;&amp;#8220;E se, utilizando essa abordagem, pudéssemos também abstrair uma camada qualquer diferente do DOM para conseguir resultados similares em relação à performance?&amp;#8230;&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Até então, o único componente presente no iOS e no Android que viabiliza a execução de código JavaScript de modo nativo são seus browsers internos, conhecidos como WebViews. Com base nesse cenário, vários frameworks surgiram nos últimos anos com a proposta de utilizar a camada de código nativa apenas para disparar uma aplicação com código escrito em HTML, CSS e JavaScript no próprio Browser (sem a barra de endereços, obviamente). Como o container responsável pelo ciclo de vida da aplicação é nativo, isso possibilita que essas aplicações sejam desenvolvidas e distribuídas através das lojas oficiais, como a &lt;strong&gt;App Store&lt;/strong&gt; e &lt;a href=&#34;https://play.google.com/store/apps&#34; target=&#34;_blank&#34;&gt;Google Play&lt;/a&gt;, sem maiores problemas. Esse movimento originou o termo atualmente conhecido como &lt;strong&gt;Aplicativos Híbridos&lt;/strong&gt;. Embora essa abordagem provou-se vitoriosa em alguns cenários, ainda consiste em uma página web que simula uma aplicação escrita de forma nativa, o que, algumas vezes, peca em questão de performance e experiência.&lt;/p&gt;

&lt;p&gt;Em React Native continuamos escrevendo um aplicativo em JavaScript, mas que não exibe uma página web como resultado. Ao invés disso, o nosso código executa uma instância do chamado &lt;a href=&#34;http://trac.webkit.org/wiki/JavaScriptCore&#34; target=&#34;_blank&#34;&gt;JavaScriptCore&lt;/a&gt; responsável por renderizar componentes &lt;strong&gt;verdadeiramente nativos&lt;/strong&gt; dentro do nosso app. Por exemplo, se você abrir o arquivo &lt;em&gt;/ios/MyFirstProject/AppDelegate.m&lt;/em&gt; no Xcode, vai encontrar sempre o seguinte conteúdo, independente da quantidade de código que tiver escrito no seu editor de texto:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/AppDelegate.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-53026&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/AppDelegate.png&#34; alt=&#34;AppDelegate.m image &#34; width=&#34;844&#34; height=&#34;777&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O segredo está nessa classe &lt;code&gt;RCTRootView&lt;/code&gt;. Ela é uma classe criada pelo próprio framework, responsável por apresentar os elementos da classe &lt;code&gt;UIKit&lt;/code&gt; com base no código que escrevemos em JS. Ou seja, o controle do comportamento do nosso app é feito em JavaScript, mas em nenhum momento ocorre compilação desse código para Objective-C, binário ou coisa do tipo. Por isso conseguimos ver atualizações em tempo real em nossa aplicação, uma vez que nenhum código em Objective-C é escrito, apenas código JavaScript. Não tem nada pra re-compilar! Genial.&lt;/p&gt;

&lt;p&gt;Como essa &amp;#8220;passagem de bastão&amp;#8221; entre o código JavaScript e Objective-C é feita está fora do escopo desse post, mas caso tenha curiosidade de saber onde vai parar o código que escrevemos, basta acessar a url &lt;a href=&#34;http://localhost:8081/index.ios.bundle?platform=ios&amp; dev=true&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://localhost:8081/index.ios.bundle?platform=ios&amp;amp;&#34;&gt;http://localhost:8081/index.ios.bundle?platform=ios&amp;amp;&lt;/a&gt; dev=true&lt;/a&gt; enquanto a aplicação estiver no ar. Você irá perceber nosso código em meio à um monte de outros gerados pelo framework.&lt;/p&gt;

&lt;h2 id=&#34;explorando-as-apis-e-componentes-nativos&#34;&gt;Explorando as APIs e componentes nativos&lt;/h2&gt;

&lt;p&gt;Uma das coisas mais legais &amp;#8211; e vantajosas &amp;#8211; de se trabalhar com o React Native é a possibilidade de utilizar os componentes e APIs nativos da plataforma. Indiscutivelmente, é um recurso que oferece uma experiência mais atrativa para o usuário e que torna dispensável a utilização de serviços de terceiros como o &lt;a href=&#34;https://cordova.apache.org/&#34; target=&#34;_blank&#34;&gt;Apache Cordova&lt;/a&gt;, por exemplo. O React Native também trabalha em uma thread separada da thread principal, o que faz com que sua aplicação mantenha a alta performance sem sacrificar a capacidade do seu smartphone (o que é incrível!).&lt;/p&gt;

&lt;p&gt;Para começar a ilustrar esses pontos, vamos modificar o nosso código para exibir um alerta nativo do iOS quando um botão for clicado.&lt;/p&gt;

&lt;h3 id=&#34;capturando-eventos-e-fornecendo-feedback-visual&#34;&gt;Capturando eventos e fornecendo feedback visual&lt;/h3&gt;

&lt;p&gt;Assim como todos os demais componentes, o React Native criou um específico para recuperar o evento de &lt;strong&gt;touch&lt;/strong&gt; (ou tap) na tela do device. Seu nome é &lt;code&gt;&amp;lt;TouchableHighlight&amp;gt;&lt;/code&gt;, que nada mais é do que um wrapper invisível responsável por fazer algum outro componente responder ao toque do usuário e, em seguida, conectá-lo a algum evento/método:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;TouchableHighlight onPress={this.someFunction}&amp;gt;
   // aplicação de estilo no componente
   &amp;lt;View style={styles.button}&amp;gt;
      &amp;lt;Text&amp;gt;An Alert Message&amp;lt;/Text&amp;gt;
   &amp;lt;/View&amp;gt;
&amp;lt;/TouchableHighlight&amp;gt;
&lt;/pre&gt;

&lt;p&gt;No código acima temos um exemplo de como podemos fazer uso desse componente. Perceba que dentro dele temos uma outra &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; que abriga um componente &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; com um texto indicativo. O &lt;code&gt;&amp;lt;TouchableHighlight&amp;gt;&lt;/code&gt; recebe uma função de nome &lt;code&gt;someFunction&lt;/code&gt; quando o evento &lt;strong&gt;onPress&lt;/strong&gt; for acionado. Outra coisa bacana do componente é que o mesmo fornece feedback visual do momento em que o usuário pressiona e solta o botão. Por default, o React Native aplica um efeito de &lt;strong&gt;overlay&lt;/strong&gt; ao componente sem que precisemos fazer nada. Awesome!&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;&amp;lt;TouchableHighlight&amp;gt;&lt;/code&gt; também responde à outros eventos, como &lt;code&gt;onPressIn&lt;/code&gt;, &lt;code&gt;onPressOut&lt;/code&gt; e &lt;code&gt;onLongPress&lt;/code&gt;, para atender às demais necessidades de interação com o usuário.&lt;/p&gt;

&lt;p&gt;Vamos agora mexer no nosso código e substituir a função &lt;code&gt;someFunction&lt;/code&gt; do evento &lt;code&gt;onPress&lt;/code&gt; do nosso botão por um &lt;strong&gt;alert dialog&lt;/strong&gt; nativo da plataforma. O código do alerta é muito simples, conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;AlertIOS.alert(
  &#39;Simple Title&#39;,
  &#39;Hi, I am a native iOS alert component in action.&#39;
)
&lt;/pre&gt;

&lt;p&gt;Nosso alerta é simples e recebe apenas dois parâmetros: O título e a descrição que serão exibidos para o usuário. Vamos juntar tudo e ver como fica o nosso código final (&lt;code&gt;git checkout step3&lt;/code&gt;):&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
   AppRegistry,
   StyleSheet,
   Text,
   View,
   // declaramos o TouchableHighlight.
   TouchableHighlight,     
   // declaramos o AlertIOS.
   AlertIOS,           
} = React;

var Tableless = React.createClass({

 render: function() {
   return (
      &amp;lt;View style={styles.container} &amp;gt;
        &amp;lt;Text style={styles.myText}&amp;gt;
          Hello, Tableless!
        &amp;lt;/Text&amp;gt;
        // inserimos o código do alerta no lugar da função
        &amp;lt;TouchableHighlight onPress={() =&amp;gt; AlertIOS.alert(    
             &#39;Simple Title&#39;,
             &#39;Hi, I am a native iOS alert component in action.&#39;
           )}&amp;gt;
           &amp;lt;View style={styles.button}&amp;gt;
               // exemplo de estilo inline.
               &amp;lt;Text style={{color: &#39;#fff&#39;}}&amp;gt;An Alert Message&amp;lt;/Text&amp;gt; 
           &amp;lt;/View&amp;gt;
        &amp;lt;/TouchableHighlight&amp;gt;
      &amp;lt;/View&amp;gt;
    );
 }
});

var styles = StyleSheet.create({

container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
},
myText: {
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
   borderRadius: 4,
   textAlign: &#39;center&#39;,
   padding: 10,
   marginBottom: 10,
   color: &#39;green&#39;,
},
// estilo do botão.
button: {                
   backgroundColor: &#39;lightblue&#39;,
   padding: 20,
   borderRadius: 5,
},

})

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Pressione &lt;strong&gt;CMD + R&lt;/strong&gt; no teclado e veja o resultado do que criamos no seu emulador com poucas linhas de código:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-alert-ios.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52771&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-alert-ios.gif&#34; alt=&#34;react native alert ios&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;props-state&#34;&gt;Props &amp;amp; State&lt;/h3&gt;

&lt;p&gt;Tudo o que fizemos até o momento foi ótimo, mas não é o suficiente para manter uma aplicação em funcionamento. E se eu quisesse alterar o valor do texto que aparece na tela de forma dinâmica, com base em um input do usuário? Podemos fazer isso facilmente utilizando o conceito de &lt;strong&gt;state&lt;/strong&gt;, que nada mais é do que &lt;strong&gt;gerenciar um componente e aplicar alterações em seu valor durante seu ciclo de vida&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para que isso seja possível, precisaremos de três coisas novas em nosso código:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Um método que defina o &lt;strong&gt;estado inicial&lt;/strong&gt; do meu componente;&lt;/li&gt;
&lt;li&gt;Um componente nativo que receba &lt;strong&gt;inputs do usuário&lt;/strong&gt; na tela;&lt;/li&gt;
&lt;li&gt;Um método responsável por &lt;strong&gt;modificar o valor&lt;/strong&gt; desse meu componente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Primeiramente, vamos criar o estado inicial do meu componente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;getInitialState : function() {
   // Inicializamos nosso componente com uma String de texto.
   return { myText : &#34;Hello, Tableless!&#34; };
},    
&lt;/pre&gt;

&lt;p&gt;Em seguida, um componente para receber inputs do usuário:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;TextInput
         placeholder=&#34;Type something...&#34;
         onChange={this.textInputDidChange} /&amp;gt;
// Input com um placeholder + método.
&lt;/pre&gt;

&lt;p&gt;E, por fim, a função com o método responsável por atualizar o estado da minha View sempre que o valor do meu componente for modificado:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;textInputDidChange : function (event) {      
   this.setState({ myText: event.nativeEvent.text });
},   
&lt;/pre&gt;

&lt;p&gt;Vamos ver como tudo isso fica no nosso código (&lt;code&gt;git checkout step4&lt;/code&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
   AppRegistry,
   StyleSheet,
   Text,
   View,
   TouchableHighlight,
   AlertIOS,
   // declaramos o TextInput.
   TextInput,        
} = React;

var Tableless = React.createClass({

getInitialState : function() {
   return { myText : &#34;Hello, Tableless!&#34; };
},    

textInputDidChange : function (event) {      
   this.setState({ myText: event.nativeEvent.text });
},

 render: function() {
  return (
    &amp;lt;View style={styles.container} &amp;gt;
      // Repare os estilos inline (opcional).
      &amp;lt;TextInput style = {{ height: 50, padding: 6, fontSize: 16, borderColor: &#34;lightblue&#34;, borderWidth: 1,     margin: 10, borderRadius: 4 }}
               placeholder=&#34;Type something...&#34;
               onChange={this.textInputDidChange} /&amp;gt;   
         &amp;lt;Text style={styles.myText}&amp;gt;
            // Ao invés do texto estático, fazemos referência à variável myText.
            {this.state.myText}   
         &amp;lt;/Text&amp;gt;
         &amp;lt;TouchableHighlight onPress={() =&amp;gt; AlertIOS.alert(
                 &#39;Simple Title&#39;,
                 &#39;Hi, I am a native iOS alert component in action.&#39;
              )}&amp;gt;
           &amp;lt;View style={styles.button}&amp;gt;
                &amp;lt;Text style={{color: &#39;#fff&#39;}}&amp;gt;An Alert Message&amp;lt;/Text&amp;gt;
           &amp;lt;/View&amp;gt;
         &amp;lt;/TouchableHighlight&amp;gt;
    &amp;lt;/View&amp;gt;
  );
 }
});

var styles = StyleSheet.create({

 container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
 },
 myText: {
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
   borderRadius: 4,
   textAlign: &#39;center&#39;,
   padding: 10,
   marginBottom: 10,
   color: &#39;green&#39;,
 },
 button: {
   backgroundColor: &#39;lightblue&#39;,
   padding: 20,
   borderRadius: 5,
 },

})

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Agora nosso label reflete o valor que digitamos em nosso input, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-text-input-ios.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52776&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-text-input-ios.gif&#34; alt=&#34;react native text input ios&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caso queira simular o teclado do device, basta ir na barra de ferramentas do emulador e procurar a opção &lt;strong&gt;Hardware -&amp;gt; Keyboard -&amp;gt; Toggle Software Keyboard&lt;/strong&gt;. Ao habilitar essa opção, o teclado nativo do device será exibido sempre que um input for solicitado.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Se você tem o costume de utilizar aplicativos no iPhone já deve ter reparado que o comportamento de transição de telas é ligeiramente diferente daquilo que observamos na web. Ao invés de exibir uma outra página qualquer como resultado de alguma ação (como clique em um link ou uma busca) no iOS nós trabalhamos com um componente chamado &lt;strong&gt;UINavigationController&lt;/strong&gt; que gerencia essa transição de forma hierárquica. Obviamente já temos à nossa disposição um componente para lidar com isso, chamado &lt;strong&gt;NavigatorIOS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Dito isso, a primeira coisa que precisamos fazer é mudar o componente &lt;strong&gt;root&lt;/strong&gt; da nossa aplicação que, ao invés de apontar para &lt;strong&gt;Tableless&lt;/strong&gt;, agora irá apontar para a classe &lt;strong&gt;MainNav&lt;/strong&gt;, conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; MainNav);&lt;/pre&gt;

&lt;p&gt;Agora vamos criar a classe &lt;strong&gt;MainNav&lt;/strong&gt; que irá funcionar como um container que fará referência à tela &lt;strong&gt;Tableless&lt;/strong&gt; que estávamos trabalhando anteriormente, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var MainNav = React.createClass({
  render: function() {
    return (
      // Incluímos o NavigatorIOS em MainNav e fazemos ele apontar para Tableless.
      &amp;lt;NavigatorIOS
        initialRoute={{ component: Tableless, title: &#39;MyFirstProject&#39; }} 
        style={{ flex: 1 }} /&amp;gt;
    );    
  }
});
&lt;/pre&gt;

&lt;p&gt;Perfeito. Agora vamos criar uma outra tela que será responsável por exibir o texto que iremos digitar em nossa View principal. Irei chamar essa tela de &lt;strong&gt;NextScreen&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var NextScreen = React.createClass({
  render: function() {
    return (
      &amp;lt;View&amp;gt;
        &amp;lt;Text&amp;gt;
          You entered: {this.props.inputText}
        &amp;lt;/Text&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }
});
&lt;/pre&gt;

&lt;p&gt;Perceba a instrução &lt;code&gt;{this.props.inputText}&lt;/code&gt; dentro do componente &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;. Ele será o responsável por apresentar o valor digitado no nosso input. Mas para que isso ocorra, precisamos de um novo evento em nosso &lt;code&gt;&amp;lt;TextInput&amp;gt;&lt;/code&gt; que guarde esse valor e o conduza até a próxima tela que acabamos de criar. Já que não temos um botão pra disparar esse método, que tal chamá-lo logo após pressionar o &lt;strong&gt;Return&lt;/strong&gt; do teclado? Existe um evento chamado &lt;code&gt;onEndEditing&lt;/code&gt; que faz justamente isso:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;TextInput placeholder=&#34;Type something...&#34;
              onChange={this.textInputDidChange}
              // incluímos o novo evento aqui.
              onEndEditing={ event =&amp;gt; this.callNextScreen(event.nativeEvent.text) } /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Referenciamos a função de nome &lt;strong&gt;callNextScreen&lt;/strong&gt; que recupera o texto que digitamos através do evento de nome &lt;code&gt;event.nativeEvent.text&lt;/code&gt;. Vamos criar essa função:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// a função recebe o texto digitado como parâmetro
callNextScreen: function (inputText) {
  // chamamos a transição &lt;strong&gt;push&lt;/strong&gt; nativa do iOS.
  this.props.navigator.push({
     title: &#34;The Next Screen&#34;,
     component: NextScreen,
     // enviamos o parâmetro para a tela &lt;strong&gt;NextScreen&lt;/strong&gt;
     passProps: { &#39;inputText&#39;: inputText }
  });
}
&lt;/pre&gt;

&lt;p&gt;Perceba que nós chamamos a função &lt;code&gt;push&lt;/code&gt; do &lt;code&gt;navigator&lt;/code&gt; que faz parte do atributo props da nossa tela &lt;strong&gt;NextScreen&lt;/strong&gt;. Uma outra novidade é o parâmetro &lt;code&gt;passProps&lt;/code&gt; que recebe um objeto com chave e valor de nome &lt;code&gt;inputText&lt;/code&gt;, responsável por guardar o texto que digitamos e conduzi-lo à próxima tela. Vamos ver como ficou o código final (&lt;code&gt;git checkout step5&lt;/code&gt;):&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
  AppRegistry,
  StyleSheet,
  Text,
  View,
  TouchableHighlight,
  AlertIOS,
  TextInput,
  // novo componente NavigatorIOS
  NavigatorIOS, 
} = React;

var Tableless = React.createClass({

getInitialState : function() {
  return {
    myText : &#34;Hello, Tableless!&#34;
  };
},

callNextScreen: function (inputText) {
  this.props.navigator.push({
    title: &#34;The Next Screen&#34;,
    component: NextScreen,
    passProps: { &#39;inputText&#39;: inputText }
});
},

textInputDidChange : function (event) {
  this.setState({ myText: event.nativeEvent.text });
},

render: function() {
  return (
   &amp;lt;View style={styles.container} &amp;gt;
    &amp;lt;TextInput style = {{ height: 50, padding: 6, fontSize: 16, borderColor: &#34;lightblue&#34;, borderWidth: 1, margin:    10, borderRadius: 4 }}
      placeholder=&#34;Type something...&#34;
      onChange={this.textInputDidChange}
      onEndEditing={ event =&amp;gt; this.callNextScreen(event.nativeEvent.text) } /&amp;gt;
    &amp;lt;Text style={styles.myText}&amp;gt;
      {this.state.myText}
    &amp;lt;/Text&amp;gt;
    &amp;lt;TouchableHighlight onPress={() =&amp;gt; AlertIOS.alert(
        &#39;Simple Title&#39;,
        &#39;Hi, I am a native iOS alert component in action.&#39;
      )}&amp;gt;
      &amp;lt;View style={styles.button}&amp;gt;
        &amp;lt;Text style={{color: &#39;#fff&#39;}}&amp;gt;An Alert Message&amp;lt;/Text&amp;gt;
      &amp;lt;/View&amp;gt;
    &amp;lt;/TouchableHighlight&amp;gt;
   &amp;lt;/View&amp;gt;
  );
}

});

var MainNav = React.createClass({
 render: function() {
   return (
     &amp;lt;NavigatorIOS
       initialRoute={{
         component: Tableless,
         title: &#39;MyFirstProject&#39;
       }}
       style={{ flex: 1 }} /&amp;gt;
   );
 }
});

var NextScreen = React.createClass({
 render: function() {
   return (
     &amp;lt;View style = {{ backgroundColor: &#39;green&#39;, flex: 1, justifyContent: &#39;center&#39;, alignItems: &#39;center&#39; }} &amp;gt;
       &amp;lt;Text style = {{ color: &#39;#fff&#39;, fontSize: 22 }} &amp;gt;
         You entered: {this.props.inputText}
       &amp;lt;/Text&amp;gt;
     &amp;lt;/View&amp;gt;
   );
 }
});

var styles = StyleSheet.create({

 container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
 },
 myText: {
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
   borderRadius: 4,
   textAlign: &#39;center&#39;,
   padding: 10,
   marginBottom: 10,
   color: &#39;green&#39;,
 },
 button: {
   backgroundColor: &#39;lightblue&#39;,
   padding: 20,
   borderRadius: 5,
 },

})

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; MainNav);
&lt;/pre&gt;

&lt;p&gt;O resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-navigator-ios.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52778&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-navigator-ios.gif&#34; alt=&#34;react native navigator ios&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Faça um teste no seu device e observe o quão suave são as animações. Uma vez na tela seguinte, você pode retornar para a anterior com um simples gesto de deslizar os dedos da esquerda para a direita (o famoso &lt;strong&gt;swipe gesture&lt;/strong&gt;). Você consegue até mesmo simular uma transição similar em html com &lt;code&gt;overflow&lt;/code&gt;, mas não será a mesma coisa. Esse é o verdadeiro ganho de trabalhar com componentes 100% nativos: As transições em &lt;strong&gt;60fps&lt;/strong&gt; (60 frames por segundo).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-swipe-60fps.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52793&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-swipe-60fps.gif&#34; alt=&#34;react native swipe 60fps&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por fim, você foi apresentado aos dois principais conceitos do React: &lt;strong&gt;props&lt;/strong&gt;, utilizado quando queremos compartilhar valores entre componentes e &lt;strong&gt;state&lt;/strong&gt;, quando desejamos monitorar o estado de um componente e suas alterações (geralmente ocasionado por algum evento de usuário).&lt;/p&gt;

&lt;h2 id=&#34;modularidade&#34;&gt;Modularidade&lt;/h2&gt;

&lt;p&gt;Você tem consciência da bagunça que nosso código pode se tornar se prosseguirmos com a escrita de toda a lógica em um mesmo arquivo, né? Mas uma das vantagens da plataforma é justamente a modularização, uma vez que cada componente pode estar isolado em arquivos diferentes, gerenciando seus próprios estados de forma individual. Fazemos isso através do &lt;strong&gt;module.exports&lt;/strong&gt; do Node, presente na especificação do &lt;strong&gt;CommonJS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para ilustrar como isso pode ser feito, vamos separar nossa seção de estilos no arquivo &lt;em&gt;style.js&lt;/em&gt; e requisitar seu acesso no arquivo _index.ios.js_ (&lt;code&gt;git checkout step6&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Conteúdo de &lt;em&gt;style.js&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react-native&#39;);
var { StyleSheet } = React;

var styles = StyleSheet.create({

 container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
 },
 myText: {
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
   borderRadius: 4,
   textAlign: &#39;center&#39;,
   padding: 10,
   marginBottom: 10,
   color: &#39;green&#39;,
 },
 button: {
   backgroundColor: &#39;lightblue&#39;,
   padding: 20,
   borderRadius: 5,
 },

});
// viabilizamos a exportação do módulo.
module.exports = styles;
&lt;/pre&gt;

&lt;p&gt;E no arquivo &lt;em&gt;index.ios.js&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
  AppRegistry,
  StyleSheet,
  Text,
  View,
  TouchableHighlight,
  AlertIOS,
  TextInput,
  NavigatorIOS,
} = React;

// solicitamos acesso ao conteúdo de &lt;em&gt;style.js&lt;/em&gt;
var styles = require(&#39;./style&#39;);

var Tableless = React.createClass({ ... })
&lt;/pre&gt;

&lt;p&gt;Seguindo esse conceito, sua aplicação fica muito mais legível, principalmente se utilizarmos o &lt;strong&gt;Nesting&lt;/strong&gt; de componentes (não abordado nesse tutorial).&lt;/p&gt;

&lt;p&gt;Como exercício, tente fazer o mesmo com os demais componentes que criamos.&lt;/p&gt;

&lt;h3 id=&#34;android&#34;&gt;Android&lt;/h3&gt;

&lt;p&gt;Uma das vantagens oferecidas pelo framework é poder criar aplicações agnósticas, que compartilham a mesma base de código. Neste caso, você poderia ter os arquivos &lt;em&gt;index.ios.js&lt;/em&gt; e &lt;em&gt;index.android.js&lt;/em&gt; apontando para uma classe &amp;#8220;root&amp;#8221;, responsável por executar o código com base no sistema utilizado pelo usuário: iOS ou Android. Isso é possível se você fizer uso de componentes que não são específicos de cada plataforma, como &lt;code&gt;View&lt;/code&gt;, &lt;code&gt;Image&lt;/code&gt;, &lt;code&gt;ListView&lt;/code&gt;, &lt;code&gt;MapView&lt;/code&gt;, &lt;code&gt;Modal&lt;/code&gt;, &lt;code&gt;TouchableHighlight&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Outra possibilidade, em aplicações mais complexas, é de compartilhar a mesma lógica entre ambas as plataformas com a diferença de utilizar componentes específicos para cada uma delas. A vantagem seria proporcionar a melhor experiência &lt;strong&gt;nativa&lt;/strong&gt; possível para o usuário. Como exemplo, temos os componentes &lt;code&gt;DrawerLayoutAndroid&lt;/code&gt;, &lt;code&gt;ProgressBarAndroid&lt;/code&gt;, &lt;code&gt;ToolbarAndroid&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h2 id=&#34;um-futuro-móvel-para-o-javascript&#34;&gt;Um futuro móvel para o JavaScript&lt;/h2&gt;

&lt;p&gt;Hoje em dia o desenvolvedor JavaScript vive um momento fantástico, pois além de contar com frameworks como &lt;a href=&#34;http://ionicframework.com/&#34; target=&#34;_blank&#34;&gt;Ionic&lt;/a&gt;, que tem o intuito de explorar o desenvolvimento híbrido através de tecnologias web, agora temos o React Native à nossa disposição, com o intuito de conduzir o JavaScript ao ambiente nativo. No entanto, diferente do conhecido termo imortalizado pelo Java &amp;#8220;&lt;em&gt;Write once, run anywhere&lt;/em&gt;&amp;#8220;, o framework defende o &amp;#8220;&lt;em&gt;Learn once, write anywhere&lt;/em&gt;&amp;#8220;, o que significa que cada plataforma tem seu próprio visual, estrutura e recursos únicos. E que você, como engenheiro de software, deve ser capaz de construir aplicações para qualquer que seja a plataforma &amp;#8211; sem necessariamente aprender uma gama de novas tecnologias &amp;#8211; mas sempre respeitando o ecossistema nativo de cada uma delas. Isso é fantástico!&lt;/p&gt;

&lt;p&gt;Outro ponto que vale ressaltar é a otimização que o framework oferece ao dia a dia de uma equipe, uma vez que ele tem o potencial de acelerar todo o processo &amp;#8211; não só de desenvolvimento, mas também de lançamento de um aplicativo. Como exemplo, a Apple possibilita que alterações sejam executadas no &amp;#8220;ar&amp;#8221; em aplicativos baseados no tal JavaScriptCore &lt;strong&gt;sem precisar aguardar pelo exaustivo processo de review deles&lt;/strong&gt;. Ou seja, mais produtividade e mais clientes felizes!&lt;/p&gt;

&lt;p&gt;Embora o React Native seja um framework fantástico no que se propõe a oferecer, ele não é o único. Existem outras ferramentas que permitem o desenvolvimento de aplicativos nativos utilizando JavaScript, como é o caso do já conhecido &lt;a href=&#34;http://www.appcelerator.com/mobile-app-development-products/&#34; target=&#34;_blank&#34;&gt;Titanium&lt;/a&gt; e, do mais recente, &lt;a href=&#34;https://www.nativescript.org/&#34; target=&#34;_blank&#34;&gt;NativeScript&lt;/a&gt;. Mas a grande sacada do React Native é o &lt;strong&gt;React&lt;/strong&gt; em si. Sua natureza declarativa, a metodologia de reutilização de componentes e o foco primário na interface do usuário proporcionam uma experiência, até o momento, inédita para o desenvolvedor web que deseja migrar para o mundo do desenvolvimento móvel.&lt;/p&gt;

&lt;p&gt;Em resumo, o React Native merece sua atenção porque&amp;#8230;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Não remove você do ecossistema da web: &lt;/strong&gt;As mesmas ferramentas que usamos para o desenvolvimento web são basicamente as mesmas que utilizaremos para desenvolvimento mobile. Ao invés de depender exclusivamente do Xcode ou Android Studio, um &lt;a href=&#34;http://www.sublimetext.com/&#34; target=&#34;_blank&#34;&gt;SublimeText&lt;/a&gt;, &lt;a href=&#34;https://atom.io/&#34; target=&#34;_blank&#34;&gt;Atom&lt;/a&gt; ou &lt;a href=&#34;http://brackets.io/&#34; target=&#34;_blank&#34;&gt;Brackets&lt;/a&gt; já darão conta do recado pra você. Com se isso não bastasse, você ainda tem a opção de fazer debug do código via &lt;a href=&#34;https://developers.google.com/web/tools/chrome-devtools/&#34; target=&#34;_blank&#34;&gt;Chrome DevTools&lt;/a&gt;, através de uma extensão desenvolvida exclusivamente para o React, como se fosse uma aplicação web de verdade!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utiliza Flexbox e CSS: &lt;/strong&gt;O Flexbox permite que você estruture sua camada visual de maneira muito simples e intuitiva. Esse é um ponto crítico em aplicações nativas. Tome o AutoLayout do iOS, como exemplo. Lidar com Constraints, Size Classes e outros recursos não são assim tão simples. Sem contar que essa fica sendo uma tarefa exclusiva do Desenvolvedor e não do Designer. Em contrapartida, se você já é um Webdesigner, pode aproveitar seu código CSS diretamente na plataforma &amp;#8211; ou solicitar que o Designer gere ele pra você incluir no seu app. Não é o máximo?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;É extremamente extensível: &lt;/strong&gt;Você pode compartilhar o seu código JavaScript com o seu colega de trabalho que desenvolve em Objective-C, Swift ou Java sem maiores problemas. O framework possibilita a integração de módulos nativos, proporcionando um ambiente colaborativo ainda mais rico e transparente. Ou seja, sempre que houver a necessidade de implementar um módulo nativo &amp;#8211; ou reaproveitar algum que já tenha sido criado pela sua equipe &amp;#8211; basta importá-lo no seu projeto e ele estará disponível. Yes!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utiliza Polyfills para tirar vantagem dos recursos web: &lt;/strong&gt;APIs como &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;geolocation&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt; e o próprio &lt;code&gt;flexbox&lt;/code&gt; não existem em ambiente nativo, mas existem no Browser! Mais uma vez, a transição entre os ambientes web e nativo fica ainda mais simples de ser feita.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simples gerenciamento das dependências do projeto:&lt;/strong&gt;Programadores JavaScript já estão acostumados a utilizar o NPM para gerir dependências e fazer build de suas aplicações. Trazer essa ferramenta para dentro do escopo nativo significa menos uma barreira adicional. Em um simples arquivo &lt;em&gt;package.json&lt;/em&gt; você é capaz de organizar todas as suas dependências como se estivesse trabalhando na web, sem a necessidade de aprender ferramentas como &lt;a href=&#34;https://cocoapods.org/&#34; target=&#34;_blank&#34;&gt;Cocoapods&lt;/a&gt; para iOS ou &lt;a href=&#34;http://gradle.org/&#34; target=&#34;_blank&#34;&gt;Gradle&lt;/a&gt; no caso do Android.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O desenvolvimento mobile está mudando com a mesma velocidade da demanda de mercado. Mais e mais ferramentas vêm sendo desenvolvidas com o intuito de prover uma experiência mais rica, tanto para o desenvolvedor quanto para o usuário final. Frameworks como React Native surgem como uma prova de conceito de que existem falhas em ambos os ecossistemas e o que resta fazer é unir o melhor dos dois mundos. O mais importante, no fim das contas, é a tal da estratégia. Se &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_to_market&#34; target=&#34;_blank&#34;&gt;tempo de mercado&lt;/a&gt; e produtividade fazem parte do seu vocabulário (ou de sua startup), fique de olho nas mudanças. Elas estão apenas começando&amp;#8230;&lt;/p&gt;

&lt;p&gt;Enfim&amp;#8230; é uma época excelente para ser um desenvolvedor JavaScript. 🙂&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Conheça mais sobre o React para web &lt;a href=&#34;http://tableless.com.br/react-javascript-reativo/&#34; target=&#34;_blank&#34;&gt;neste post&lt;/a&gt; do Davi Ferreira.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Como uma simples mudança de cores pode revolucionar seu site</title>
      <link>http://tableless.com.br/como-uma-simples-mudanca-de-cores-pode-revolucionar-seu-site/</link>
      <pubDate>Fri, 27 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-uma-simples-mudanca-de-cores-pode-revolucionar-seu-site/</guid>
      <description>

&lt;p&gt;Acredito que muitos de nós estamos na batalha diária desenvolvendo projetos para se realizar profissionalmente, sustentar nossas famílias, entre outras razões particulares. Entretanto existem também os objetivos relacionados às nossas funções que motivam, ou deveriam motivar, nossas ações para que os resultados de nossos projetos nos realizem e tragam reconhecimento.&lt;/p&gt;

&lt;p&gt;E uma meta primordial que faz com que todo profissional web atinja parte destes objetivos é desenvolver projetos com foco no usuário, como já foi citado &lt;a href=&#34;http://tableless.com.br/nada-de-capa-quando-a-firula-e-mais-do-que-a-funcao/&#34; target=&#34;_blank&#34;&gt;neste excelente artigo&lt;/a&gt; aqui no Tableless.&lt;/p&gt;

&lt;p&gt;É óbvio que o foco no usuário é a menina-dos-olhos de todo projeto web. Para isso, toda equipe (ou equipe de um homem só) se concentra em construir conteúdos maravilhosos, interfaces tão bem projetadas que “parecem imperceptíveis” para o usuário. Lembro que um erro de usabilidade pode ser algo perceptível.&lt;/p&gt;

&lt;p&gt;Mas será que todo projeto executado com foco no usuário resulta em sucesso total?&lt;/p&gt;

&lt;h2 id=&#34;deixando-o-bom-para-buscar-o-ótimo&#34;&gt;Deixando o bom para buscar o ótimo&lt;/h2&gt;

&lt;p&gt;Vamos imaginar um exemplo. Se você concluiu um site agradável para os usuários, que resultou em um aumento de seguidores para seu cliente, engajamento e repercussão, a percepção é que o projeto é um sucesso.&lt;/p&gt;

&lt;p&gt;E é sim, se a questão é somente gerar um &lt;em&gt;buzz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Com esta audiência é possível até monetizar, e o grande interessado nisso é seu cliente, detentor do site. O sucesso dele pode te proporcionar novos projetos. E é isso que &amp;#8220;$garante$&amp;#8221; nossos outros objetivos. Lembra? Sustentar nossas famílias, outras razões particulares.&lt;/p&gt;

&lt;p&gt;Entretanto, voltando à questão do &lt;em&gt;buzz&lt;/em&gt;, um site que satisfaça os usuários e inicialmente um cliente pode, no decorrer do tempo, também ser um desastre financeiro. Vejamos:&lt;/p&gt;

&lt;p&gt;Manter páginas com grande tráfego tem um custo, construir conteúdo de qualidade e todo o processo de manter e administrar um site também. Agora, imagine este sucesso de audiência e repercussão sem o retorno financeiro que justifique este projeto no ar. Temos um problema de gastos, mas também uma grande oportunidade de melhoria pela frente se ainda existem reservas.&lt;/p&gt;

&lt;p&gt;Inúmeras variáveis podem determinar o sucesso de audiência de um projeto online como do exemplo citado acima.  Para entendermos melhor citarei algumas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A demanda (desejada) pelo produto, serviço ou conteúdo que o projeto aborda.&lt;/li&gt;
&lt;li&gt;Validação da demanda;&lt;/li&gt;
&lt;li&gt;Possuir tráfego qualificado;&lt;/li&gt;
&lt;li&gt;Oferecer soluções;&lt;/li&gt;
&lt;li&gt;Relacionamento através de marketing de conteúdo;&lt;/li&gt;
&lt;li&gt;Apresentar os conteúdos, produtos, serviços em um site funcional e focado no usuário.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Parece-me um cenário ideal para vendas. Mas antes, por que este site não dá retorno?&lt;/p&gt;

&lt;p&gt;Você pode ter certeza: qualquer projeto online pode ter milhares de seguidores, alguns que até defendem a marca, divulgam, compartilham, desejam possuir seus produtos, mas muitos deles entrarão no site, consumirão conteúdo gratuito, sairão, voltarão milhares de vezes prometendo a si mesmo comprar aquele curso maravilhoso, mas postergarão nesta decisão infinitas vezes.&lt;/p&gt;

&lt;p&gt;Agora voltamos para aquela pergunta que fiz no inicio do artigo: “Mas será que todo projeto executado com foco no usuário resulta em sucesso total?”.&lt;/p&gt;

&lt;p&gt;Se o resultado for vendas, nem sempre. Uma coisa é certa: ele conduzirá o usuário final pelo caminho correto, sem barreiras até conclusão do pagamento. Porém o que ele nem sempre faz é potencializar a decisão do usuário de trilhar este caminho. E aí que entra o Design aplicado à conversão.&lt;/p&gt;

&lt;p&gt;Veja bem. Não estou dizendo que a culpa do baixo retorno de um projeto é o design focado no usuário. Sem ele, aí mesmo que as coisas pioram. Só quero mostrar que focar em usabilidade não é a única decisão a se tomar quando pensamos em conversão. Um site que atenda as principais variáveis de sucesso de audiência pode estar pecando na otimização de conversão.&lt;/p&gt;

&lt;h2 id=&#34;utilizando-o-design-aplicado-a-conversões&#34;&gt;Utilizando o Design aplicado a conversões&lt;/h2&gt;

&lt;p&gt;Aqui mesmo no Tableless já foi falado sobre &lt;a href=&#34;http://tableless.com.br/7-dicas-de-otimizacao-de-conversao-em-landing-pages/&#34; target=&#34;_blank&#34;&gt;otimização de conversões&lt;b&gt; &lt;/b&gt;através de landing pages&lt;/a&gt;. Para quem não sabe, conversão é o resultado de um objetivo traçado, por exemplo, uma venda, um cadastro, entre outros. E &lt;em&gt;landing pages&lt;/em&gt; são páginas de aterrissagem construídas para direcionar tráfego com objetivo o dos usuários tomarem uma ação (cadastro em formulário, clique, etc.) e que traga um resultado esperado (captação de e-mails, vendas, etc).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-52134 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/11/iMac-Office.png&#34; alt=&#34;Design não é apenas o que parece e o que se sente. Design é como funciona - Steve Jobs&#34; width=&#34;620&#34; height=&#34;413&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Uma página de aterrissagem é inútil se o tráfego não estiver qualificado para o que é ofertado. Não adianta direcionar pessoas interessadas em carros para uma página que fala sobre bicicletas. &lt;em&gt;Landing pages&lt;/em&gt; não fazem mágicas e muito menos lavam a mente de ninguém. Elas estão lá para potencializar a decisão de compra do usuário interessado em um assunto e que vive postergando esta decisão para outro momento.&lt;/p&gt;

&lt;p&gt;Já que, segundo o conceito de página de aterrissagem é direcionar tráfego para que exista uma ação, podemos considerar que existem diferentes formas de &lt;em&gt;landing pages&lt;/em&gt;, como posts de blog com formulário de captação de mails dentro do artigo, &lt;em&gt;Home Page&lt;/em&gt; minimalista com função de inscrição em boletins e páginas com &lt;em&gt;Popup Exit&lt;/em&gt;. Elas trazem resultados, porém, por natureza tendem a ter distrações visuais que podem diminuir a eficácia das conversões. A mais eficiente de todos os tipos são mesmo as &lt;strong&gt;&lt;em&gt;Squezee Pages&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Squeeze Page&lt;/em&gt; é um tipo de &lt;em&gt;landing page&lt;/em&gt; específica, objetiva, com poucas distrações e mais poderosa para conversão, principalmente para a captura de e-mails.  É bastante conhecida como página de captura onde se oferece uma recompensa em troca da inscrição no boletim informativo, ou outro dado.&lt;/p&gt;

&lt;p&gt;As _squeeze pages_ &amp;#8220;comprimem&amp;#8221; visitantes de seu tráfego para dentro do funil de vendas. Posteriormente é possível transformá-los em &amp;#8220;&lt;em&gt;leads&lt;/em&gt; qualificados&amp;#8221; através de relacionamento, para deixá-los aptos a receber ofertas.&lt;/p&gt;

&lt;p&gt;Mas nenhum tipo de &lt;em&gt;landing page&lt;/em&gt; é eficiente se não a otimizarmos para conversão. A otimização pode aumentar a conversão de um projeto em significantes porcentagens. Existem &lt;a href=&#34;http://chiefofdesign.com.br/testes-ab-taxas-de-conversao/&#34; target=&#34;_blank&#34;&gt;relatos de incrementos de 52% até 134%&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E como isto é feito? Através de testes de versões.&lt;/p&gt;

&lt;p&gt;Você pode realizar testes determinando a página original como controle, e criando uma versão que modifique somente um aspecto visual ou de conteúdo e utilizando uma ferramenta de teste A/B a fim de distribuir tráfego, medir as conversões de cada uma delas e garantir um nível de confiança de no mínimo 95%.&lt;/p&gt;

&lt;p&gt;A versão que tiver mais conversão, vence. Se for a versão original, deve-se mantê-la, caso contrário, a variação deve assumir o lugar.&lt;/p&gt;

&lt;h2 id=&#34;e-por-que-testar&#34;&gt;E por que testar?&lt;/h2&gt;

&lt;p&gt;Você pode ser ótimo no que faz, mas o fato de testar, mostra que você preocupa-se com resultados. Não considere este procedimento como avaliação do &amp;#8220;seu&amp;#8221; desempenho. Foque em trazer resultados efetivos para seus clientes. Será seu diferencial. Além do mais, testes A/B são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Práticos;&lt;/li&gt;
&lt;li&gt;Podem atingir taxa de conversão mais elevadas;&lt;/li&gt;
&lt;li&gt;Requer menos tráfego;&lt;/li&gt;
&lt;li&gt;O resultado é obtido rapidamente.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mas-onde-entra-o-design&#34;&gt;Mas onde entra o &lt;em&gt;design&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;Como testes A/B são práticos, qualquer pessoa com conhecimentos básicos pode aplicá-los. E pode conseguir resultados positivos. Um procedimento considerado comum,  por exemplo, é testar cores em botões de formulários de cadastros.&lt;/p&gt;

&lt;p&gt;Veja este estudo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Teste de cores com botão na página inicial do site da Performable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Durante um &lt;a href=&#34;http://Teste de cores com botão na página inicial do site da Performable Durante um &lt;a&gt;teste&lt;/a&gt; com um total de 2.000 visitas a equipe da Perfomable [&lt;a href=&#34;http://blog.hubspot.com/blog/tabid/6307/bid/20566/The-Button-Color-A-B-Test-Red-Beats-Green.aspx&#34;&gt;http://blog.hubspot.com/blog/tabid/6307/bid/20566/The-Button-Color-A-B-Test-Red-Beats-Green.aspx&lt;/a&gt;] queria avaliar qual botão obteria mais cliques entre duas versões de páginas. A página original possuía um botão verde que correspondia também a cor verde usada também no padrão visual usado no logo da empresa. Foi definido na versão concorrente um botão vermelho, o resto do layout era totalmente igual. Sabe qual foi o resultado? 21% a mais pessoas clicaram no botão vermelho em relação ao botão verde.&amp;rdquo; target=&amp;rdquo;_blank&amp;rdquo;&amp;gt;teste com um total de 2.000 visitas&lt;/a&gt; a equipe da Perfomable queria avaliar qual botão obteria mais cliques entre duas versões de páginas. A página original possuía um botão verde que correspondia também a cor verde usada no padrão visual do logotipo da empresa. Foi definido na versão concorrente um botão vermelho, sendo o resto do layout totalmente igual. Sabe qual foi o resultado?&lt;/p&gt;

&lt;p&gt;21% a mais pessoas clicaram no botão vermelho em relação ao botão verde.&lt;img class=&#34;alignnone wp-image-52133 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/11/teste-ab-pratica.png&#34; alt=&#34;Exemplo de Teste A/B&#34; width=&#34;620&#34; height=&#34;817&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Muitos escolhem cores aleatórias para competir com a página da versão original, mas esta escolha de cores sem critérios, pode acarretar em muitos testes e necessidade de enviar mais tráfego.&lt;/p&gt;

&lt;p&gt;Com o &lt;em&gt;design&lt;/em&gt; aplicado à conversão, as decisões de otimização tem critérios mais elaborados, baseado nos conceitos de &lt;em&gt;design&lt;/em&gt;, sem achismos. Com isso, você obtém resultados mais certeiros logo nos primeiros testes.&lt;/p&gt;

&lt;p&gt;Acredito que a decisão acertada da equipe de Perfomable foi devido a critérios baseados em conceitos de &lt;em&gt;design&lt;/em&gt; e não uma escolha qualquer. Conceitos sobre contrastes encontrados na &lt;a href=&#34;https://pt.wikipedia.org/wiki/Teoria_das_cores&#34; target=&#34;_blank&#34;&gt;Teoria de Cores&lt;/a&gt; e &lt;a href=&#34;http://www.designculture.com.br/leis-da-gestalt-unidade-e-segregacao/&#34; target=&#34;_blank&#34;&gt;Segregação de Gestalt&lt;/a&gt; do objeto justificam escolher a cor vermelha. Veja mais nesta explicação de um minuto em vídeo que gravei:&lt;/p&gt;

&lt;p&gt;Poderíamos ter um ótimo resultado usando uma cor com pouco destaque em relação ao verde? Talvez! Porém só da para saber testando. Então pergunto: você prefere economizar tempo e dinheiro com critério ou adotar achismos?&lt;/p&gt;

&lt;p&gt;Bem-vindo ao mundo da otimização, dos testes A/B e do &lt;em&gt;design&lt;/em&gt; aplicado a conversão. Para saber mais, sugiro conferir este &lt;a href=&#34;http://designfreela.com/&#34; target=&#34;_blank&#34;&gt;infográfico&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;O Design tem esse poder, não desperdice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Referências:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chiefofdesign.com.br/design-para-conversao/&#34; target=&#34;_blank&#34;&gt;Design para conversão&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://designfreela.com/&#34; target=&#34;_blank&#34;&gt;Infográfico Design para Conversão &amp;#8211; Saiba como não FERRAR com a conversão dos seus layouts e com os projetos dos seus clientes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.hubspot.com/blog/tabid/6307/bid/20566/The-Button-Color-A-B-Test-Red-Beats-Green.aspx&#34; target=&#34;_blank&#34;&gt;The Button Color A/B Test: Red Beats Green&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nada de Capa – Quando a firula é mais do que a função</title>
      <link>http://tableless.com.br/nada-de-capa-quando-a-firula-e-mais-do-que-a-funcao/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/nada-de-capa-quando-a-firula-e-mais-do-que-a-funcao/</guid>
      <description>

&lt;p&gt;Quem assistiu a animação da Pixar &amp;#8220;Os Incríveis&amp;#8221; conhece essa cena do vídeo. Nela o Sr. Incrível vai até a estilista Edna Mode para remendar o seu uniforme velho, mas ela o convence a criar um novo uniforme. Ele aproveita a deixa e pede para ela criar uma roupa clássica bem legal com capa e botas, quando ela berra a famosa frase:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nada de capa!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;À partir daí a Edna cita uma relação de vários heróis que foram detonados por causa da capa. Homem-Trovão, Mega-Homem, Dinamite, entre outros e todos foram traídos pela falta de utilidade da capa em seus uniformes. Se pensarmos bem, a capa não tem valor funcional nenhum aos heróis, a não ser pela estética. Ainda que eu esteja falando de algo que não existem na verdade, alguém já viu alguma profissão onde a capa faz realmente alguma coisa? Não né!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/thumb-nada-de-capa-quando-a-firula-e-mais-do-que-a-funcao-002.jpg&#34; alt=&#34;thumb-nada-de-capa-quando-a-firula-e-mais-do-que-a-funcao-002&#34; width=&#34;800&#34; height=&#34;334&#34; class=&#34;aligncenter size-full wp-image-51533&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mas-acreditem-sites-também-possuem-capas&#34;&gt;Mas acreditem, sites também possuem capas&lt;/h3&gt;

&lt;p&gt;Desde que a Internet comercial existe, designers do mundo todo tentam mostrar a sua arte através dos layouts em sites. Não muito distante o Flash reinava nessa época. Era incrível ver aqueles sites animados com vários efeitos especiais e música tocando ao fundo. Era legal demais né!? #sqn&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flash, Ajax, jQuery, e atualmente o Parallax. Os designers &amp;#8220;pira&amp;#8221; nessas bagaça!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eu me pergunto para quê tanta firula? Ninguém entra na Internet e diz &amp;#8220;&lt;strong&gt;&lt;em&gt;Nossa, estou doido para entrar naquele site lindão cheio de animação&lt;/em&gt;&lt;/strong&gt;&amp;#8220;. NINGUÉM quer isso! O usuário quer apenas encontrar o conteúdo desejado. É simples assim.&lt;/p&gt;

&lt;p&gt;Claro eu concordo, eu sei que existe exceções. HTML5 está aí para provar isso! Sei que nessas mesmas linguagens e técnicas há bons trabalhos, da mesma forma como há bons profissionais trabalhando com cada um desses exemplos. A questão que eu vejo é que o foco está errado. Muita gente trabalha desse jeito por dominar essa ou aquela linguagem ou está acostumado com determinada técnica, quando quem deveria definir como o projeto tem que ser é o usuário!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;É ele o foco de tudo!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/thumb-nada-de-capa-quando-a-firula-e-mais-do-que-a-funcao-001.jpg&#34; alt=&#34;thumb-nada-de-capa-quando-a-firula-e-mais-do-que-a-funcao-001&#34; width=&#34;800&#34; height=&#34;389&#34; class=&#34;aligncenter size-full wp-image-51531&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Isso para não falar das inúmeras plataformas em que um site roda hoje em dia. É desktop com zilhões de resoluções, netbooks, tablets, smartphones e outros tipos de tela. E não me venham com a frase pronta &amp;#8220;&lt;em&gt;&lt;strong&gt;Ah, ninguém vai entrar no site da minha empresa pelo XBox!&lt;/strong&gt;&lt;/em&gt;&amp;#8221; que não cola mais ok!&lt;/p&gt;

&lt;h3 id=&#34;mas-e-aí-qual-a-solução&#34;&gt;Mas e aí, qual a solução?&lt;/h3&gt;

&lt;p&gt;É preciso entender para QUEM vamos projetar nossos sites. É à partir da decisão clara do público é que definimos que tipo de tecnologia iremos usar, inclusive das citadas antes. Basta lembrar de como os famosos &amp;#8216;banners&amp;#8217; em formato de &amp;#8216;slider&amp;#8217; que ocupam uma parte significativa da página inicial de muitos site e analisem criteriosamente a taxa de conversão dos mesmo e se pergunte o quanto vale tê-los por lá.&lt;/p&gt;

&lt;p&gt;Se você não souber essa resposta, pense que você precisa levar um foguete até a Lua e possui recursos limitados em terra e precisa trabalhar com o mínimo possível para chegar até lá. Cada consumo de energia e espaço será determinante para o fracasso ou sucesso dessa empreitada. Com site é a mesma coisa!&lt;/p&gt;

&lt;h3 id=&#34;então-repita-comigo-designer-nada-de-capa&#34;&gt;Então repita comigo designer: NADA DE CAPA!&lt;/h3&gt;

&lt;p&gt;Da próxima vez que você pensar em enfeitar o seu site com uma bela capa, pense em quantas vezes essa &amp;#8220;belezura&amp;#8221; vai fazer requisição no banco de dados, o tempo que o site levará para carregar por causa dela, o como o usuário interagirá com a capa, e só depois disso me diga se ainda sim vai usá-la.&lt;/p&gt;

&lt;p&gt;Até o próximo artigo!&lt;/p&gt;

&lt;p&gt;😀&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Arte da Sedução dos Produtos</title>
      <link>http://tableless.com.br/arte-da-seducao-dos-produtos/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/arte-da-seducao-dos-produtos/</guid>
      <description>&lt;p&gt;Você já reparou, que quando estamos em um grande grupo, acabamos sendo influênciados pela maioria? Mas você deve estar pensando: &amp;#8220;Eu não sou assim. Gosto de ser diferente&amp;#8221;. Será mesmo?&lt;/p&gt;

&lt;p&gt;Para explicar melhor e de forma simples, vou usar o mesmo metodo usado pela psicóloga Susan M. Weinschenk em seu livro &lt;em&gt;Neuro Web Design: What Makes Them Click?&lt;/em&gt;. Nele ela divide o cérebro em três partes: &lt;strong&gt;Cérebro Antigo, Cérebro do Meio&lt;/strong&gt; e &lt;strong&gt;Cérebro Novo.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cérebro Antigo ou Inconsciente:&lt;/strong&gt; Resposável por nossas ações automáticas (dirigir, digerir, falar…).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cérebro do Meio:&lt;/strong&gt; Responsável por processar suas emoções. É a raiz do seu impulso de compra.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cérebro Novo ou Córtex:&lt;/strong&gt; É ele que processa todas as primeiras informações que estão a &amp;#8220;sua frente&amp;#8221;. Leitura, ouvir música, jogar video game…&lt;/p&gt;

&lt;p&gt;Mas o que isso têm haver com a influência que eu sofro?&lt;/p&gt;

&lt;p&gt;Quando você entra no site de compra, qual é a primeira coisa que vê? Os produtos mais comprados e os mais avaliados, correto? Mesmo que não tenha interesse algum por eles, disperta uma curiosidade de saber o porque daqueles produtos estarem sendo comprados ou bem avaliados. Então você decide entrar no produto e depara com vários comentários de pessoas que você nem conhece, mas acaba acreditando no que foi escrito lá, sendo positivo ou não. Você acabou de realizar uma validação social.&lt;/p&gt;

&lt;p&gt;No primeiro instante que lê os comentários, o seu córtex processa aquela informação e pode desconfiar dela. Já o seu cérebro antigo ou inconsciente, processa a informação de outra forma e acredita que tudo que leu alí é verídico. Quanto maior o detalhe informado nos comentários, mais o cérebro vai interpretando que aquilo é verdade. Note que acreditamos em comentários mais explicativos e que conta uma história ao invés daqueles que só constam um simples &amp;#8220;recomendo&amp;#8221;.&lt;/p&gt;

&lt;p&gt;A psicologa conta que o ser humano tende a olhar sempre para o outro, quando existe uma insegurança no que fazer.&lt;/p&gt;

&lt;p&gt;&amp;#8220;Mas eu sou diferente, gosto de tomar as minhas próprias decisões. Não sou Maria vai com as outras&amp;#8221;. Tudo bem!&lt;/p&gt;

&lt;p&gt;Ela também explica que o ser humano tende a achar que está tomando uma decisão só e única, mas que mesmo assim, você vai precisar de uma referência. Essas atitudes são baseadas no nosso extinto de sobrevivência, por isso que ela é automática.&lt;/p&gt;

&lt;p&gt;Agora você já sabe de quem é a culpa, quando compra as coisas pelo impulso.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Precisamos confirmar a senha?</title>
      <link>http://tableless.com.br/precisamos-confirmar-senha/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/precisamos-confirmar-senha/</guid>
      <description>

&lt;p&gt;Você deve me entender: formulários são muito chatos. Tanto para desenhá-los quanto para produzir código front-end. Mas cada vez que desenho um formulário, eu tento simplificar ao máximo. A inclusão ou a exclusão de um campo pode afetar a taxa de conversão ou causar um desinteresse do usuário ao produto. Mas um dos campos que sempre me deixa com a pulga atrás da orelha é o de “cadastramento de senha”.&lt;/p&gt;

&lt;p&gt;O padrão que é utilizado são dois campos: um para digitar e o outro para confirmar a senha. E são nesses dois campos, que há um aumento da taxa de desistência do seu produto.&lt;/p&gt;

&lt;h3 id=&#34;o-problema&#34;&gt;O problema&lt;/h3&gt;

&lt;p&gt;Muitos pensam que devem colocar o segundo campo de confirmação, para evitar o erro de digitação, já que os campos usam uma máscara nos caracteres. E é aí, que mora o problema.&lt;/p&gt;

&lt;p&gt;Alguns usuários cometem erros de digitação e não sabe se errou no campo da senha ou no de confirmação. &lt;a href=&#34;http://www.formisimo.com/blog/case-study-small-changes-lead-to-a-55-increase-in-conversions/&#34; rel=&#34;nofollow&#34;&gt;Este estudo&lt;/a&gt; constatou que o campo de confirmação foi responsável por mais de um quarto de abandono dos usuários. Feito isso, resolveram fazer outro teste sem o campo de confirmação e perceberam que houve uma diminuição de erros e um aumento na taxa de conversão de conclusão.&lt;/p&gt;

&lt;h3 id=&#34;não-basta-excluir&#34;&gt;Não basta excluir&lt;/h3&gt;

&lt;p&gt;Excluir o campo de confirmação não irá resolver o problema por completo. O erro de digitação ainda persiste pelo uso da máscara nos caracteres, o que acaba gerando em problemas como: logar e pedir para redefinir a senha.&lt;/p&gt;

&lt;h3 id=&#34;visão-do-superman&#34;&gt;Visão do Superman&lt;/h3&gt;

&lt;p&gt;Uma boa maneira de resolver esse problema é dar a opção ao usuário de enxergar o que foi digitado.&lt;figure id=&#34;f140&#34;&gt;&lt;/p&gt;

&lt;div class=&#34;aspectRatioPlaceholder is-locked&#34;&gt;
  &lt;div class=&#34;aspect-ratio-fill&#34;&gt;
  &lt;/div&gt;
  

&lt;p&gt;&lt;p&gt;
    &lt;img src=&#34;https://cdn-images-2.medium.com/max/900/1*4iuMApy2iH1g4JIK_D7Yww.png&#34; alt=&#34;&#34; /&gt;&lt;/div&gt; &lt;/figure&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  Em seu Windows 8, a Microsoft adota o uso do ícone de um olho, para revelar a senha.
&amp;lt;/p&amp;gt;&amp;lt;figure id=&amp;quot;267c&amp;quot;&amp;gt; 

&amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;aspect-ratio-fill&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;p&amp;gt;
    &amp;lt;img src=&amp;quot;https://cdn-images-2.medium.com/max/720/1*V07wwjNvW_1VoUcJR6ajsw.png&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/div&amp;gt; 

    &amp;lt;div class=&amp;quot;aspectRatioPlaceholder is-locked&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;&amp;lt;/figure&amp;gt; 

    &amp;lt;p&amp;gt;
      Uma outra maneira que está sendo adotado pelo o Android é a de revelar a senha usando um &amp;lt;em class=&amp;quot;markup--em markup--p-em&amp;quot;&amp;gt;check box&amp;lt;/em&amp;gt;, acompanhado da frase “exibir senha”.
    &amp;lt;/p&amp;gt;

    &amp;lt;p&amp;gt;
      &amp;lt;strong class=&amp;quot;markup--strong markup--p-strong&amp;quot;&amp;gt;E você, concorda com tudo isso? Acha que devemos adotar isso como um padrão para o cadastramento de senhas?&amp;lt;/strong&amp;gt;
    &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Material Design com Materialize</title>
      <link>http://tableless.com.br/material-design-com-materialize/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/material-design-com-materialize/</guid>
      <description>

&lt;p&gt;Há muito tempo quero falar um pouco sobre desenvolvimento de sites utilizando layouts baseados no Material Design do Google, mas entre &lt;strong&gt;fazer&lt;/strong&gt; e &lt;strong&gt;falar&lt;/strong&gt; há um abismo enorme. Minha verdadeira intenção é compartilhar um pouco a maneira mais fácil de desenvolver um layout utilizando todos aqueles conceitos que a Google tem implementado atualmente.&lt;/p&gt;

&lt;h2 id=&#34;primeiros-passos&#34;&gt;Primeiros Passos&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&#34;http://materializecss.com/&#34; target=&#34;_blank&#34;&gt;Materialize&lt;/a&gt; é um Framework desenvolvido para facilitar e agilizar nosso desenvolvimento quando o assunto é Material Design. Além de ágil, possui uma infinidade de vantagens que permitem que na maioria das vezes dispensam o uso de outros frameworks para complementá-lo.&lt;/p&gt;

&lt;p&gt;Para baixar os arquivos do Materialize clique em &lt;a href=&#34;http://materializecss.com/getting-started.html&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt;, lá você verá uma documentação explicando como fazer o download dos arquivos e todas as maneiras que você tem para fazer isso, ou também pode usar a CDN dele como geralmente muitos fazem com o JQUERY. Os arquivos são bem distribudos e não diferem dos demais Frameworks que existem.&lt;/p&gt;

&lt;h3 id=&#34;vamos-para-as-vantagens-dele&#34;&gt;Vamos para as vantagens dele&lt;/h3&gt;

&lt;p&gt;Uma das principais vantagens é o fato de ser muito similar ao Material Design desenvolvido pela google. Outra vantagem que podemos observar são os amplos recursos de JQuery que ele possui como: Slider, Lightbox, Captions, Modais, Transitions, Waves entre muitos outros. Melhor do que falar é mostrar. Esses recursos ficam na categoria &lt;a href=&#34;http://materializecss.com/media.html&#34; target=&#34;_blank&#34;&gt;JAVASCRIPT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O sistema de grid usado é bastante parecido com os frameworks já existentes, como o Bootstrap.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/materialize-css-framework-01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;
      &amp;lt;div class=&#34;container&#34;&amp;gt; &amp;lt;!-- Container similar ao utilizado em outros Frameworks --&amp;gt;
            &amp;lt;div class=&#34;row&#34;&amp;gt; &amp;lt;!-- Row também similar ao utilizado em outros Frameworks --&amp;gt;
                 &amp;lt;div class=&#34;col s12 m4 l4&#34;&amp;gt;Eu sou uma coluna&amp;lt;/div&amp;gt; &amp;lt;!-- Coluna com 3 tamanhos--&amp;gt;
            &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;entendendo-as-colunas&#34;&gt;Entendendo as colunas&lt;/h4&gt;

&lt;p&gt;É muito simples, assim como o bootstrap que trabalha com 4 tamanhos de coluna, muito pequeno, pequeno, médio e grande, o materialize decidiu trabalhar com 3 tamanhos que são pequeno médio e grande, nada que assuste ou prejudique o andamento do projeto. Para saber mais entre no &lt;a href=&#34;http://materializecss.com/grid.html&#34; target=&#34;_blank&#34;&gt;menu CSS e acesse o submenu Grid&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;alguns-pequenos-diferenciais-que-ele-possui&#34;&gt;Alguns pequenos diferenciais que ele possui&lt;/h3&gt;

&lt;p&gt;Alguns diferenciais que ele possui são os botões, o modal, os cards, as collections e o mais importante talves de todos o menu lateral, vou mostrar alguns desses abaixo.&lt;/p&gt;

&lt;h4 id=&#34;cards&#34;&gt;Cards&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/Sem-Título-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;sidenav&#34;&gt;Sidenav&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/menu.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;vendo-essa-belezinha-funcionar&#34;&gt;Vendo essa belezinha funcionar ^^&lt;/h3&gt;

&lt;p&gt;Eu poderia colocar um milhão de exemplos feitos aqui, mas não tenho os direitos autorais deles então caso queira ver o showcase do site acesse o link &lt;a href=&#34;http://materializecss.com/showcase.html&#34; target=&#34;_blank&#34;&gt;Showcase&lt;/a&gt; e veja. Mas para não deixar vocês sem nenhum exemplo deixo aqui um site feito por mim através do materialize, espero que gostem o link está na imagem e abaixo dela.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.loguei.com/&#34; target=&#34;_blank&#34;&gt;&lt;br /&gt; &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/263dfd28861105.55d5d38e09a6f.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.loguei.com/&#34; target=&#34;_blank&#34;&gt;blog.loguei.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bem, aqui terminamos esse maravilhoso assunto sobre um Framework bem simples e maneiro de usar. Espero ter ajudado um pouco a todos. Obrigado ^^.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gantry 5 – Desenvolvimento de templates para Joomla e WordPress</title>
      <link>http://tableless.com.br/gantry-5-desenvolvimento-de-templates-para-joomla-e-wordpress/</link>
      <pubDate>Mon, 17 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/gantry-5-desenvolvimento-de-templates-para-joomla-e-wordpress/</guid>
      <description>

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Com o surgimento dos Gerenciadores de Conteúdo como o &lt;a href=&#34;http://www.joomla.org/&#34; target=&#34;_blank&#34;&gt;Joomla &lt;/a&gt;e &lt;a href=&#34;https://wordpress.org/&#34; target=&#34;_blank&#34;&gt;WordPress&lt;/a&gt;, os desenvolvedores de sites começaram a aproveitar mais o tempo e entregar projetos mais rápido. Quando surgem os frameworks de templates, que se integram aos CMSs para gerenciar e facilitar o desenvolvimento dos layouts das páginas, as coisas ficam mais interessantes. E é justamente nesse ponto que vamos chegar. Farei uma breve abordagem sobre o novo Framework de Template Gantry 5.&lt;/p&gt;

&lt;h2 id=&#34;o-gantry&#34;&gt;&lt;strong&gt;O Gantry&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;O Gantry é um framework de template Open Source and Free, desenvolvido pela &lt;a href=&#34;http://www.rockettheme.com/&#34; target=&#34;_blank&#34;&gt;RocketTheme &lt;/a&gt;(um dos melhores clubes de extensões e templates para Joomla e WordPress) que tem a finalidade de gerenciar e customizar os layouts das páginas.&lt;/p&gt;

&lt;p&gt;Na versão mais estável, a 4, o framework já atendia muito bem aos desenvolvedores de template, mas havia alguns problemas de semântica, layout adaptativo em vez de responsivo, poucas possibilidades de &lt;em&gt;override&lt;/em&gt; e o peso excessivo das páginas. Era uma luta para conseguir enxugar o máximo e aumentar o desempenho. Outros frameworks como &lt;a href=&#34;http://www.t3-framework.org/&#34; target=&#34;_blank&#34;&gt;T3&lt;/a&gt;, &lt;a href=&#34;http://www.joomshaper.com/helix&#34; target=&#34;_blank&#34;&gt;Helix&lt;/a&gt;, e &lt;a href=&#34;https://yootheme.com/themes/warp-framework&#34; target=&#34;_blank&#34;&gt;Warp&lt;/a&gt;, tinham uma curva de aprendizagem muito lenta, o que me frustrava. Foi quando surge o &lt;a href=&#34;http://gantry.org/&#34; target=&#34;_blank&#34;&gt;Gantry 5&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-versão-5&#34;&gt;&lt;strong&gt;A versão 5&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Se você já conhecia a versão anterior, esqueça, a versão 5 é totalmente diferente e não tem nada a ver com as antigas. O lado bom é que consertaram e melhoraram tudo que citei de ruim acima, o lado não tão bom é que você terá que reaprender a trabalhar com o framework, mas aprender coisa nova nunca é demais.&lt;/p&gt;

&lt;p&gt;Vamos apresentar as possibilidades que a versão 5 pode trazer a respeito do &lt;strong&gt;desenvolvimento de templates em Joomla e WordPress&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;crie-várias-páginas-com-configurações-e-layouts-independentes&#34;&gt;&lt;strong&gt;Crie várias páginas com configurações e layouts independentes&lt;/strong&gt;&lt;/h3&gt;

&lt;div id=&#34;attachment_50481&#34; style=&#34;width: 610px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/img12.jpg&#34;&gt;&lt;img class=&#34;wp-image-50481 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/img12.jpg&#34; alt=&#34;Painel Outline&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Painel Outline
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;O Gantry 5 trouxe um nível de abstração de páginas muito superior aos outros frameworks do mercado. Chamados de &lt;strong&gt;Outlines&lt;/strong&gt; é onde tudo se inicia no framework. Os Outlines são páginas que podem ser criadas e editadas de forma independente, dando ao layout do projeto uma flexibilidade na administração de diferentes elementos. E tudo isso é possível sem que o desenvolvedor escreva linhas e linhas de código, é tudo no arrastar e soltar.&lt;/p&gt;

&lt;p&gt;Ao instalar o Gantry 5 e o tema padrão Hydrogen, pode-se observar 1 outline base, 2 outlines de página padrão e 3 outlines essenciais usadas para a exibição de conteúdo, página de erro e página off-line. Essas não podem ser excluídas, somente editadas, pois são outlines fundamentais para o template.&lt;/p&gt;

&lt;h3 id=&#34;faça-override-do-core&#34;&gt;&lt;strong&gt;Faça override do core&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Esta é uma das possibilidades mais legais do Gantry 5, pois você consegue fazer substituições de quase tudo no framework. E o interessante é que ele utiliza tecnologias recentes da Web como o &lt;a href=&#34;http://yaml.org/&#34; target=&#34;_blank&#34;&gt;YAML&lt;/a&gt; para trabalhar com campos de formulário e o &lt;a href=&#34;http://twig.sensiolabs.org/&#34; target=&#34;_blank&#34;&gt;Twig Template&lt;/a&gt; para facilitar a estruturação dos arquivos de substituição.&lt;/p&gt;

&lt;h3 id=&#34;estilização-mais-fácil-e-completa&#34;&gt;&lt;strong&gt;Estilização mais fácil e completa&lt;/strong&gt;&lt;/h3&gt;

&lt;div id=&#34;attachment_50482&#34; style=&#34;width: 610px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/img2.jpg&#34;&gt;&lt;img class=&#34;wp-image-50482 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/img2.jpg&#34; alt=&#34;Painel Style&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Painel Style
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;O painel &lt;strong&gt;Style&lt;/strong&gt; agora tem mais possibilidades de customização e ficou ainda mais fácil trocar as cores principais do template. Com ajuda das tecnologias &lt;strong&gt;YAML&lt;/strong&gt; e &lt;strong&gt;Twig Template&lt;/strong&gt; você consegue fazer estilizações através de overrides onde o céu é o limite, basta abusar bastante da criatividade. E como não bastasse, agora é possível controlar os Breakpoints nos mais variados formatos de unidades: px, em ou rem.&lt;/p&gt;

&lt;h3 id=&#34;micro-módulos-personalizáveis&#34;&gt;&lt;strong&gt;Micro módulos personalizáveis&lt;/strong&gt;&lt;/h3&gt;

&lt;div id=&#34;attachment_50483&#34; style=&#34;width: 610px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/img3.jpg&#34;&gt;&lt;img class=&#34;wp-image-50483 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/img3.jpg&#34; alt=&#34;Painel Settings&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Painel Settings
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;O &lt;strong&gt;Particle System&lt;/strong&gt; como é chamado, é um sistema de módulos já pré-formatados para utilização direta no painel de layout. Você consegue customizá-lo de forma independente dos outlines, ou seja, o mesmo particle utilizado em uma página poderá ser utilizado em outra sem que haja conflito de configurações. E o mais legal é que você consegue customizar, habilitar ou desabilitar um particle e/ou criar um novo de acordo com sua necessidade ou criatividade. Mais uma vez o céu é o limite.&lt;/p&gt;

&lt;p&gt;Existem alguns particles especiais chamados de &lt;strong&gt;Atom&lt;/strong&gt;, que possibilitam a entrada do UA Code do Google Analytics e a chamada de dependências CSS e JS externas, evitando que o desenvolvedor mexa diretamente no código do template.&lt;/p&gt;

&lt;h3 id=&#34;infinitas-possibilidades-de-customização&#34;&gt;&lt;strong&gt;Infinitas possibilidades de customização&lt;/strong&gt;&lt;/h3&gt;

&lt;div id=&#34;attachment_50484&#34; style=&#34;width: 610px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/img4.jpg&#34;&gt;&lt;img class=&#34;wp-image-50484 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/img4.jpg&#34; alt=&#34;Painel Layout&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Painel Layout
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Com o P&lt;strong&gt;ainel de Layout&lt;/strong&gt; do Gantry 5, você consegue montar inúmeras variações de grid. No canto esquerdo fica disponível vários módulos prontos para arrastar e soltar no painel. Ainda pode escolher através do botão “Load” qual o Preset (Estrutura de posições da página) deseja utilizar.&lt;/p&gt;

&lt;p&gt;Toda a estrutura do template criado no painel de layout é renderizado no browser através da propriedade &lt;a href=&#34;http://tableless.com.br/flexbox-organizando-seu-layout/&#34; target=&#34;_blank&#34;&gt;Flexbox do CSS3&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;o-editor-de-menu&#34;&gt;&lt;strong&gt;O editor de Menu&lt;/strong&gt;&lt;/h3&gt;

&lt;div id=&#34;attachment_50485&#34; style=&#34;width: 610px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/img5.jpg&#34;&gt;&lt;img class=&#34;wp-image-50485 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/img5.jpg&#34; alt=&#34;Editor de Menu&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Editor de Menu
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Em minha opinião, a mais fantástica possibilidade do framework é o poder de flexibilidade que o editor de menu tem. Após a criação dos itens de menu no CMS, o editor de menu renderiza os itens e a partir daí você consegue realizar várias customizações, como inserir ícones, particles, módulos ou plug-ins, definir classes, reorganizar os itens, inserir subtítulo, inserir imagem, inserir submenus e organizar os elementos em um grid. Eu acho que podem melhorar ainda mais, com a possibilidade de customizar as cores e eventos.&lt;/p&gt;

&lt;h3 id=&#34;estilize-usando-scss&#34;&gt;&lt;strong&gt;Estilize usando SCSS&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Uma inovação do Gantry 5 também foi a possibilidade de trabalhar com o &lt;a href=&#34;http://sass-lang.com/&#34; target=&#34;_blank&#34;&gt;SCSS&lt;/a&gt;, que na minha opinião é extremamente produtivo, e a manutenção do código fica muito mais prático e rápido, mas quem não se familiariza com &lt;strong&gt;SCSS&lt;/strong&gt; pode ficar tranquilo, pois ele suporta &lt;a href=&#34;http://lesscss.loopinfinito.com.br/&#34; target=&#34;_blank&#34;&gt;Less &lt;/a&gt;e também pode trabalhar diretamente com o CSS.&lt;/p&gt;

&lt;p&gt;E para facilitar ainda mais, o framework utiliza o &lt;a href=&#34;http://bourbon.io/&#34; target=&#34;_blank&#34;&gt;Bourbon&lt;/a&gt;, uma biblioteca de mixin para SASS que ajuda, principalmente quando se trata de compatibilidade entre navegadores. É uma biblioteca fantástica, vale a pena estudá-la para utilizar da forma mais adequada em seus templates.&lt;/p&gt;

&lt;h2 id=&#34;o-suporte&#34;&gt;&lt;strong&gt;O Suporte&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;O Gantry 5 tem uma comunidade bem ativa e colaborativa, e por isso conseguiram chegar em um &lt;strong&gt;framework tão completo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://docs.gantry.org/&#34; target=&#34;_blank&#34;&gt;documentação &lt;/a&gt;é sem dúvida uma das mais claras e fáceis de entender. Nela tem tutoriais completos de como instalar, usar, configurar e estender ainda mais o framework.&lt;/p&gt;

&lt;p&gt;Vale a pena também seguir o &lt;a href=&#34;http://gantry.org/blog&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt;, com artigos sobre os releases e alguns tutoriais interessantes que não estão presentes na documentação.&lt;/p&gt;

&lt;p&gt;E tem também o &lt;a href=&#34;https://gitter.im/gantry/gantry5&#34; target=&#34;_blank&#34;&gt;Gitter&lt;/a&gt;, que funciona como um chat da comunidade. Fiquei maravilhado com o suporte dos caras; algumas vezes resolveram alguns problemas que tive na mesma hora. É um lugar também para reportar bugs do framework.&lt;/p&gt;

&lt;h2 id=&#34;considerações-finais&#34;&gt;&lt;strong&gt;Considerações finais&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Por ser um framework lançado recentemente (menos de 5 meses), há muitas coisas a descobrir e melhorar. Por isso é importante, se for utilizar o framework, estar engajado na comunidade do Gantry 5 para aprender cada vez mais e também poder colaborar com o projeto.&lt;/p&gt;

&lt;p&gt;Acredito muito no potencial desta ferramenta para desenvolvimento de templates para Joomla e WordPress, pois nestes últimos 3 anos trabalhando com CMS consegui pela primeira vez reduzir o tempo de desenvolvimento de forma considerável.&lt;/p&gt;

&lt;p&gt;Se tiver alguma sugestão ou crítica sobre o artigo, comentem.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>