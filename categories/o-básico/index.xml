<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>O Básico on Tableless</title>
    <link>https://tableless.github.io/hugo-public/categories/o-b%C3%A1sico/index.xml</link>
    <description>Recent content in O Básico on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/categories/o-b%C3%A1sico/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Projeto Felix: O novo software de 3D da Adobe</title>
      <link>https://tableless.github.io/hugo-public/projeto-felix-o-novo-software-de-3d-da-adobe/</link>
      <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/projeto-felix-o-novo-software-de-3d-da-adobe/</guid>
      <description>&lt;p&gt;A Adobe liberou no dia 17/12/2016 o seu mais novo &lt;a href=&#34;http://www.adobe.com/br/products/project-felix.html#x&#34;&gt;software&lt;/a&gt;, nomeado de &lt;strong&gt;Felix&lt;/strong&gt;. Buscando aqueles que hoje utilizam 2D, mas pensam em partir para o 3D sem muita dificuldade, o software apresenta uma&lt;/p&gt;

&lt;p&gt;interface simples e amigável, seguindo os padrões da empresa.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You already think in 3D. Now design in it.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56675&#34; src=&#34;uploads/2016/12/projectfelix-riverflow3-720x620.jpg&#34; alt=&#34;projectfelix-riverflow3-720x620&#34; width=&#34;720&#34; height=&#34;620&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O foco principal aparente é se utilizar dos atuais usuários da marca e chama-los para uma nova vibe, o 3D. Abranger usuários sem experiencia e com pouca disponibilidade de estudar a tecnologia a fundo. Em poucas palavras, o Felix é um mão na roda para iniciantes na área.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No 3D experience? No problem.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Composite 3D and 2D assets into photo-realistic images without steep learning curves or complex workflows. Just drag and drop a 3D model, material, and a light into your scene. Then choose your background image. Felix automatically detects the horizon line and provides gridlines to help you align and place your model. Felix can even use the background image to generate the right lighting.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prometendo tirar algumas barreiras do desenvolvimento 3D, ele utiliza um sistema de drag and drop(arrastar e soltar), além de possuir uma biblioteca para poder escolher dentre diversos modelos e materiais online. Ademais, o software possui um sistema para facilitar a iluminação e criação de environments(ambientes) realisticos.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56674&#34; src=&#34;uploads/2016/12/Capturar.png&#34; alt=&#34;capturar&#34; width=&#34;886&#34; height=&#34;517&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A ideia é abrir, arrastar e soltar, selecionar a iluminação, fundo e pronto. Sendo assim, o programa faz toda a configuração da iluminação e criação das grades.&lt;/p&gt;

&lt;div style=&#34;width: 640px;&#34; class=&#34;wp-video&#34;&gt;
  &lt;!--[if lt IE 9]&gt;&lt;![endif]--&gt;&lt;video class=&#34;wp-video-shortcode&#34; id=&#34;video-56670-1&#34; width=&#34;640&#34; height=&#34;360&#34; preload=&#34;metadata&#34; controls=&#34;controls&#34;&gt;&lt;source type=&#34;video/mp4&#34; src=&#34;http://images-tv.adobe.com/avp/vr/17da0fa7-490c-4daa-a14e-9507b290149a/24b26164-19d0-4a08-9ea1-f23901b86056/f8830b26-07bc-4d58-aa4f-79f1f697681b_20161021124416.960x540at1200_h264.mp4?_=1&#34; /&gt;
  
  &lt;a href=&#34;http://images-tv.adobe.com/avp/vr/17da0fa7-490c-4daa-a14e-9507b290149a/24b26164-19d0-4a08-9ea1-f23901b86056/f8830b26-07bc-4d58-aa4f-79f1f697681b_20161021124416.960x540at1200_h264.mp4&#34;&gt;http://images-tv.adobe.com/avp/vr/17da0fa7-490c-4daa-a14e-9507b290149a/24b26164-19d0-4a08-9ea1-f23901b86056/f8830b26-07bc-4d58-aa4f-79f1f697681b_20161021124416.960x540at1200_h264.mp4&lt;/a&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;Para concorrer e atrair os atuais usuários dos softwares mais utilizados como Maya, 3D Max, Blender, entre outros. O programa não se demonstra efetivo, haja vista que esses usuários tem um poderosíssimo poder comparado com o Felix. Entretanto, visando o foco principal da empresa(atrair usuários sem experiencia) a interface atrai e passa uma proposta de algo simples e fácil, trazendo um monte ideias para esses usuários.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56678&#34; src=&#34;uploads/2016/12/projectfelix-riverflow2-720x620.jpg&#34; alt=&#34;projectfelix-riverflow2-720x620&#34; width=&#34;720&#34; height=&#34;620&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Link para mais informações: &lt;a href=&#34;https://blogs.adobe.com/creativecloud/project-felix-now-available-for-download/&#34;&gt;Project Felix: Now Available for Download&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trabalhando com serviços no Javascript</title>
      <link>https://tableless.github.io/hugo-public/trabalhando-com-servicos-no-javascript/</link>
      <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/trabalhando-com-servicos-no-javascript/</guid>
      <description>

&lt;p&gt;JavaScript é uma &lt;em&gt;linguagem multiparadigma&lt;/em&gt;. Pode-se “_emular_” várias técnicas de programação com ele, e isso é &lt;strong&gt;incrível&lt;/strong&gt; pois podemos decidir qual o melhor paradigma para a resolução dos problemas dos nossos projetos. Porém se por um lado isso pode parecer poderoso para a linguagem, também pode deixar os iniciantes bem confusos, é muito comum escolher a abordagem errada para o problema. Por esse motivo que o JavaScript em sido polêmico nos últimos anos.&lt;/p&gt;

&lt;p&gt;Pensando nisso muitos desenvolvedores criam suas próprias soluções, uns pensando em ajudar e outros em forçar padrões.&lt;/p&gt;

&lt;p&gt;Eu prefiro ensinar a pescar, pois JavaScript não tem que ser complexo. A &lt;strong&gt;versão 6 do JavaScript (ES6/ES2015)&lt;/strong&gt; tornou a linguagem muito mais expressiva, facilitando muito o entendimento.&lt;/p&gt;

&lt;h3 id=&#34;encapsulando-lógicas&#34;&gt;Encapsulando lógicas&lt;/h3&gt;

&lt;p&gt;Tudo em JavaScript são objetos (exceto &lt;em&gt;undefined&lt;/em&gt;), então &lt;strong&gt;serviços também são objetos&lt;/strong&gt;, dominando como criamos e trabalhamos com objetos todas as coisas ficam bem mais tranquilas.&lt;/p&gt;

&lt;p&gt;O Jean Carlo Emer fez um artigo muito, &lt;a href=&#34;http://tableless.com.br/modularizacao-em-javascript/&#34;&gt;mas muito bom sobre Modularização no JavaScript&lt;/a&gt;. Sugiro que você leia, mas vou explicar um pouco sobre o assunto logo abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-medium aligncenter&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hsXIPyBqqI7ZTh2QyLfizw.gif&#34; alt=&#34;i know JavaScript basics &#34; width=&#34;320&#34; height=&#34;237&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;scope-e-closures&#34;&gt;Scope e Closures&lt;/h4&gt;

&lt;p&gt;JavaScript possui escopo léxico. Entre outras coisas isso permite que você crie &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;De maneira resumida você cria um “ambiente controlado” onde há funções/variáveis que só podem ser acessadas naquele escopo, criando um enclausuramento (&lt;em&gt;closure&lt;/em&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const initPage = (root) =&amp;gt; {
  const $root = $(root);
  const $menu = $root.find(&#39;.menu&#39;);
  const $profile = $menu.find(&#39;.profile&#39;);

  const initProfile = () =&amp;gt; {
    $.get(&#39;/me&#39;)
      .then(response =&amp;gt; $profile.text(response.username));
    // ...
  };

  const showProfileModal = e =&amp;gt; {
   // ...
  };

  $profile.on(&#39;click&#39;, e =&amp;gt; showProfileModal(e));

  initProfile();
};

initPage(&#39;body&#39;);
&lt;/pre&gt;

&lt;p&gt;Este é um exemplo bem bobo, mas que ilustra bem como criamos &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As variáveis declaradas dentro de &lt;em&gt;initPage&lt;/em&gt; só existem naquele escopo.&lt;/p&gt;

&lt;p&gt;No mesmo exemplo podemos refatorar esse código em uma &lt;strong&gt;IIFE (Immediately-Invoked Function Expression)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;((root) =&amp;gt; {
  const $root = $(root);
  const $menu = $root.find(&#39;.menu&#39;);
  const $profile = $menu.find(&#39;.profile&#39;);

  const initProfile = () =&amp;gt; {
    $.get(&#39;/me&#39;)
     .then(response =&amp;gt; $profile.text(response.username));
    //  ...
  };

  const showProfileModal = e =&amp;gt; {
    // ...
  };

  $profile.on(&#39;click&#39;, e =&amp;gt; showProfileModal(e));

  initProfile();
})(&#39;body&#39;);
&lt;/pre&gt;

&lt;p&gt;Nesse código declaramos uma função e a executamos imediatamente, passando um argumento. Isso é extremamente útil quando queremos fazer um processamento de uma informação que vai servir apenas para criar uma variável.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const timezones = (() =&amp;gt; {
  const zones = [];
  const min = -12;
  const max = 13;
  let simbol;

  for (let i = min; i &amp;lt;= max; i++) {
    simbol = (i &amp;lt; 0) ? &#39;&#39; : &#39;+&#39;;
    zones.push(`GMT${simbol}${i}`);
  }

  return zones;
})();
&lt;/pre&gt;

&lt;p&gt;Como você já pode perceber, é possível expor dados de uma &lt;em&gt;closure&lt;/em&gt; como no exemplo anterior. A variável zones é retornada, assim a variável &lt;em&gt;timezones&lt;/em&gt; agora possui como valor o resultado da &lt;em&gt;closure&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nesse exemplo a &lt;em&gt;closure&lt;/em&gt; não usa dados externos a ela (&lt;em&gt;parent scope&lt;/em&gt;/escopo pai) porém dada a natureza do JavaScript isso é perfeitamente possível.&lt;/p&gt;

&lt;p&gt;Isso é útil para não poluir o escopo principal com informações irrelevantes.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const makeCounter = (start = 0) =&amp;gt; {
  let current = start;

  const add = (value = 1) =&amp;gt; current += value;
  const remove = (value = 1) =&amp;gt; add(value * -1);
  const get = () =&amp;gt; current;

  return { add, remove, get };
};

const counter = makeCounter(10);

counter.add() // 11
counter.add() // 12
counter.add(8) // 20
counter.remove(10) // 10
&lt;/pre&gt;

&lt;p&gt;Este é um exemplo bem interessante. Estamos combinando &lt;em&gt;closures&lt;/em&gt; com &lt;em&gt;factory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Com isso podemos criar vários contadores, e trabalhar como melhor convir com estes contadores.&lt;/p&gt;

&lt;div id=&#34;attachment_56186&#34; style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;wp-image-56186 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/wtf.gif&#34; alt=&#34;Só isso! Simples, né?&#34; width=&#34;500&#34; height=&#34;284&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Só isso! Simples, né?
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Se você entendeu como o exemplo do contador funciona, parabéns você já sabe criar serviços com javascript.&lt;/p&gt;

&lt;p&gt;Isso mesmo, este contator é um serviço. Na verdade ele é um &lt;em&gt;factory&lt;/em&gt;, mas com pequenos ajustes ele vira um serviço de fácil reuso.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// makeCounter.js -&amp;gt; factory
const makeCounter = (start = 0) =&amp;gt; {
  let current = start;

  const add = (value = 1) =&amp;gt; current += value;
  const remove = (value = 1) =&amp;gt; add(value * -1);
  const get = () =&amp;gt; current;

  return { add, remove, get };
};

export default makeCounter
&lt;/pre&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// counter.js -&amp;gt; service
import makeCounter from &#39;./makeCounter.js&#39;;

export default makeCounter(0);
&lt;/pre&gt;

&lt;p&gt;Agora temos dois arquivos, um contendo o &lt;em&gt;factory&lt;/em&gt; do contador, e outro contendo o serviço de contagem.&lt;/p&gt;

&lt;h2 id=&#34;módulos-javascript&#34;&gt;Módulos JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-56185 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/module.gif&#34; alt=&#34;module&#34; width=&#34;400&#34; height=&#34;250&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como visto anteriormente, é bem simples criar serviços com JavaScript, basta antes entender alguns conceitos.&lt;/p&gt;

&lt;p&gt;Porém isso não é tudo, se você esta criando um serviço é porque tem a intenção de reusar esta lógica em mais de um local da aplicação. Isto não é uma regra, talvez você queira apenas centralizar a lógica da operação.&lt;/p&gt;

&lt;p&gt;Não importa o objetivo inicial, você vai acabar criando um módulo JavaScript para aquela sua operação/serviço. No exemplo do contador foram criados dois arquivos, o &lt;em&gt;contador&lt;/em&gt; e o &lt;em&gt;factory do contador&lt;/em&gt;. Nesse momento você precisa entender minimamente o que são módulos JavaScript.&lt;/p&gt;

&lt;p&gt;Em resumo: um arquivo JavaScript é um módulo e um módulo JavaScript é um arquivo.&lt;/p&gt;

&lt;p&gt;Você pode criar um módulo a partir de outros módulos, como é o exemplo do contador, ele é composto a partir do módulo &lt;em&gt;makeCouter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Em geral a lógica dos módulo é encapsulada em &lt;em&gt;closures&lt;/em&gt; e o retorno delas é &lt;em&gt;cacheado&lt;/em&gt;, sendo assim, uma vez que você importa um módulo, ele será &lt;strong&gt;o mesmo sempre, compartilhando seu estado&lt;/strong&gt;. Saiba mais &lt;a href=&#34;http://www.vuejs-brasil.com.br/utilizando-vuex-na-forma-modular-2/#vamosentenderoqueaconteceu&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;usando-serviços&#34;&gt;Usando serviços&lt;/h3&gt;

&lt;p&gt;Agora que você possui essas informações acredito que criar seus próprios serviços não será nenhum &lt;em&gt;bicho de sete cabeças&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vale a pena dizer que tudo pode ser considerado um serviço, inclusive &lt;em&gt;factories&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para reforçar vou deixar mais um exemplo de uso de serviços.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import Http from &#39;./http.js&#39;;
import UsersService from &#39;./modules/users/service.js&#39;;

Http.setToken(&#39;XPTO&#39;); // Define o token de autentificação

// Cattega a primeira página de usuários
// Exibe um alerta com o nome do primeiro usuário retornado pelo serviço

UsersService
  .getAll({ page: 1 })
  .then(result =&amp;gt; result.data)
  .then(data =&amp;gt; data[0])
  .then(first =&amp;gt; {
    alert(first.name);
  });
&lt;/pre&gt;

&lt;p&gt;Para efeito de aprendizado uma sintaxe alternativa, com &lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/import&#34;&gt;&lt;em&gt;import binding&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { setToken } from &#39;./http.js&#39;;
import { getAll as getAllUsers } from &#39;./modules/users/service.js&#39;;

setToken(&#39;XPTO&#39;); // Define o token de autentificação

// Carrega a primeira página de usuários
// Exibe um alerta com o nome do primeiro usuário retornado pelo serviço

getAllUsers({ page: 1 })
  .then(result =&amp;gt; result.data)
  .then(data =&amp;gt; data[0])
  .then(first =&amp;gt; {
    alert(first.name);
  });
&lt;/pre&gt;

&lt;p&gt;Este pode não parecer para alguns mas é um exemplo bem prático do uso de serviços.&lt;/p&gt;

&lt;p&gt;O serviço de &lt;em&gt;Http&lt;/em&gt; também é usado pelo &lt;em&gt;serviço de usuários&lt;/em&gt;, por isso é possível definir o &lt;strong&gt;&lt;em&gt;token&lt;/em&gt;&lt;/strong&gt; de autentificação antes de efetivamente usar os serviços, pois eles vão compartilhar o mesmo estado/serviço.&lt;/p&gt;

&lt;p&gt;Outra característica interessante é que esses serviços não estão ligados diretamente a nenhum contexto. Isso significa que não importa que ambiente você esteja ou que &lt;em&gt;framework&lt;/em&gt; você esta usando, os serviços são agnósticos. Eles podem ser usados no &lt;strong&gt;NodeJS, VueJS, ReactJS&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;p&gt;Este é um dos princípios do polimorfismos do JavaScript porém este é outro assunto.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Se quiser saber mais sobre meu trabalho visite meu blog&lt;a href=&#34;https://medium.com/@luizvinicius73&#34;&gt; https://medium.com/@luizvinicius73&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Este artigo foi originalmente postado no meu &lt;a href=&#34;https://medium.com/by-vinicius-reis/trabalhando-com-servicos-no-javascript-864310cf386c&#34;&gt;blog no medium&lt;/a&gt; em 31 de Julho de 2016&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Você sabe paginar dados no MySQL corretamente?</title>
      <link>https://tableless.github.io/hugo-public/voce-sabe-paginar-dados-no-mysql-corretamente/</link>
      <pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/voce-sabe-paginar-dados-no-mysql-corretamente/</guid>
      <description>

&lt;p&gt;Esta postagem já começa com uma pergunta: &lt;strong&gt;Será que sabemos realmente fazer uma paginação de dados da forma correta?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;strong&gt;ATENÇÃO!&lt;/strong&gt; Não irei falar do uso de nenhum framework PHP, bibliotecas de ORM ou plugins em JavaScript. Irei tratar sobre a consulta ao banco de dados, somente.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p style=&#34;text-align: left;&#34;&gt;
  Talvez você conheça esta funcionalidade do MySQL, e talvez até comentará que isto é algo &amp;#8220;muito básico&amp;#8221;, mas vale lembrar: &lt;em&gt;&amp;#8220;Nem todos sabem de tudo. A internet é uma grande comunidade.&amp;#8221;&lt;/em&gt;
&lt;/p&gt;

&lt;h2 id=&#34;como-a-maioria-faria&#34;&gt;Como a maioria faria&lt;/h2&gt;

&lt;p style=&#34;text-align: left;&#34;&gt;
  A grande maioria de nós simplesmente iria executar 2 instruções de SELECT no MySQL. Uma para retornar o total dos registros e outra para paginar estes registros. Alguns, talvez, fariam a consulta de todos os registros no banco e depois limitariam os registros no PHP (Vish!).
&lt;/p&gt;

&lt;p style=&#34;text-align: left;&#34;&gt;
  As nossas consultas ao banco ficariam algo mais ou menos assim:
&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** Recuperamos o total de registros **/
SELECT * FROM pessoa

/** Recuperamos somente os 10 primeiros registros **/
SELECT * FROM pessoa LIMIT 0,10
&lt;/pre&gt;

&lt;p&gt;Certo, talvez esta execução de comandos não tenha afetado o desempenho do seu site ou aplicação até o momento.&lt;/p&gt;

&lt;p&gt;Agora, imagine ter que tratar milhares de registros, para diversos usuários ao mesmo tempo. Haja memória e servidor para isto!&lt;/p&gt;

&lt;p&gt;Como desenvolvedores, sempre temos que prezar por um excelente desempenho e a utilização mínima de recursos em nossas aplicações, que podem tomar proporções que não imaginamos na sua criação.&lt;/p&gt;

&lt;h2 id=&#34;o-mysql-nos-dá-uma-força&#34;&gt;O MySQL nos dá uma força&lt;/h2&gt;

&lt;p&gt;Existe um parâmetro no MySQL que é pouco conhecido da maioria desenvolvedores. Ele foi criado justamente para facilitar as paginações de registros em uma consulta.&lt;/p&gt;

&lt;p&gt;Com somente um comando SELECT você terá a quantidade de registros e os seus dados paginados de forma simples, e sem uma grande curva de aprendizado. Veja como é simples:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** Recupera somente os 10 primeiros registros **/
SELECT SQL_CALC_FOUND_ROWS * FROM pessoa LIMIT 0,10

/** Retorna o total de linhas do comando SELECT anterior sem considerar o LIMIT **/
SELECT FOUND_ROWS();
&lt;/pre&gt;

&lt;p&gt;Que simples e útil é esta função do MySQL! Não existem grandes modificações para serem feitas. Como exemplo, eu adaptei facilmente alguns frameworks que desenvolvi para aumentar a performance.&lt;/p&gt;

&lt;p style=&#34;text-align: left;&#34;&gt;
  Você pode saber mais destas funções do MySQL &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.7/en/information-functions.html#function_found-rows&#34; target=&#34;_blank&#34;&gt;diretamente na documentação do próprio banco&lt;/a&gt;.
&lt;/p&gt;

&lt;p style=&#34;text-align: left;&#34;&gt;
  Além disto, o site &lt;a href=&#34;https://www.percona.com/blog/2007/08/28/to-sql_calc_found_rows-or-not-to-sql_calc_found_rows/&#34; target=&#34;_blank&#34;&gt;Percona trás uma análise da performance do comando&lt;/a&gt;, mas em resumo, o site diz:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;em&gt;&amp;#8220;Se você tem ÍNDICES nas suas cláusulas WHERE, é melhor não utilizar o SQL_CALC_FOUND_ROWS e utilizar 2 consultas.&lt;/em&gt;&lt;br /&gt; &lt;em&gt;Mas caso você não tenha ÍNDICES em suas cláusulas WHERE, se você usar o SQL_CALC_FOUND_ROWS será mais eficiente.&amp;#8221;&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;strong&gt;Para cada realidade, uma aplicação é válida. Utilizar esta função não é REGRA, mas conhecimento sempre fará diferença em nossas carreiras.&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;text-align: left;&#34;&gt;
  Espero que tenha servido para agregar ao conhecimento de alguém. Grande abraço, e até a próxima!
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O novo software que substitui o Flash</title>
      <link>https://tableless.github.io/hugo-public/fim-definitivo-do-flash-o-novo-software-da-substituto/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/fim-definitivo-do-flash-o-novo-software-da-substituto/</guid>
      <description>

&lt;p&gt;Por um bom tempo o Flash ficou no mercado, mas, &lt;del&gt;infelizmente&lt;/del&gt; chegou o seu fim. A &lt;a href=&#34;http://blogs.adobe.com/flashpro/welcome-adobe-animate-cc-a-new-era-for-flash-professional/&#34;&gt;notícia&lt;/a&gt; muito esperada por muitos enfatizou o fim do Flash, que por anos era padrão na produção de animações e de aplicações web. Com o surgimento do HTML5 o Flash se tornou bem ultrapassado. Além disso para melhorar a situação o Flash foi descartado pela Mozila, Google, Facebook e diversas outras empresas fazendo com que ele caísse ainda mais.&lt;/p&gt;

&lt;p&gt;Pensando em vários fatores inclusive segurança, a Adobe anunciou o seu novo software que vai substituir o Flash chamado de Adobe Animation, que começará a atuar no inicio de 2016.&lt;/p&gt;

&lt;p&gt;As novidades do Adobe Animation parecem ser bastantes motivadoras:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Adobe-Animate-CC.jpg&#34;&gt;&lt;img class=&#34;aligncenter wp-image-52401&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Adobe-Animate-CC.jpg&#34; alt=&#34;Adobe-Animate-CC&#34; width=&#34;800&#34; height=&#34;441&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;desenho-ilustração-e-autoria&#34;&gt;Desenho, ilustração e autoria&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Vector Art Brush &amp;#8211; Modificar o caminho de um stroke depois de ter sido desenhado, e escalá-los a qualquer resolução sem perder qualidade. Você também pode fazer brushes personalizados e brushes de importação criadas com o Adobe Captura CC.&lt;/li&gt;
&lt;li&gt;360 °- girar a tela em qualquer ponto enquanto desenha para obter o ângulo perfeito. E você ainda poderá usar esse recurso com uma Wacom Cintiq!&lt;/li&gt;
&lt;li&gt;Lápis e brush aprimorados- Desenhe suaves e precisos contornos vetoriais ao longo de uma curva e consiga rápidos live previews.&lt;/li&gt;
&lt;li&gt;Fácil sincronização de áudio- Controle de áudio looping(repetição) diretamente na linha do tempo, sem a necessidade de qualquer código.&lt;/li&gt;
&lt;li&gt;Mudança de cor &amp;#8211; Nomear cores com etiquetas vai permitir que você altere uma cor e tê-la automaticamente modificada em todo o seu projeto.&lt;/li&gt;
&lt;li&gt;Colored onion skinning &amp;#8211; Controlar facilmente animações complexas agora que os quadros adjacentes podem ter diferentes valores de cor e alfa.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-4.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-52405&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-4.png&#34; alt=&#34;Sem título 4&#34; width=&#34;839&#34; height=&#34;472&#34; /&gt;&lt;/a&gt;[Por um bom tempo o Flash ficou no mercado, mas, &lt;del&gt;infelizmente&lt;/del&gt; chegou o seu fim. A &lt;a href=&#34;http://blogs.adobe.com/flashpro/welcome-adobe-animate-cc-a-new-era-for-flash-professional/&#34;&gt;notícia&lt;/a&gt; muito esperada por muitos enfatizou o fim do Flash, que por anos era padrão na produção de animações e de aplicações web. Com o surgimento do HTML5 o Flash se tornou bem ultrapassado. Além disso para melhorar a situação o Flash foi descartado pela Mozila, Google, Facebook e diversas outras empresas fazendo com que ele caísse ainda mais.&lt;/p&gt;

&lt;p&gt;Pensando em vários fatores inclusive segurança, a Adobe anunciou o seu novo software que vai substituir o Flash chamado de Adobe Animation, que começará a atuar no inicio de 2016.&lt;/p&gt;

&lt;p&gt;As novidades do Adobe Animation parecem ser bastantes motivadoras:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Adobe-Animate-CC.jpg&#34;&gt;&lt;img class=&#34;aligncenter wp-image-52401&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Adobe-Animate-CC.jpg&#34; alt=&#34;Adobe-Animate-CC&#34; width=&#34;800&#34; height=&#34;441&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;desenho-ilustração-e-autoria-1&#34;&gt;Desenho, ilustração e autoria&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Vector Art Brush &amp;#8211; Modificar o caminho de um stroke depois de ter sido desenhado, e escalá-los a qualquer resolução sem perder qualidade. Você também pode fazer brushes personalizados e brushes de importação criadas com o Adobe Captura CC.&lt;/li&gt;
&lt;li&gt;360 °- girar a tela em qualquer ponto enquanto desenha para obter o ângulo perfeito. E você ainda poderá usar esse recurso com uma Wacom Cintiq!&lt;/li&gt;
&lt;li&gt;Lápis e brush aprimorados- Desenhe suaves e precisos contornos vetoriais ao longo de uma curva e consiga rápidos live previews.&lt;/li&gt;
&lt;li&gt;Fácil sincronização de áudio- Controle de áudio looping(repetição) diretamente na linha do tempo, sem a necessidade de qualquer código.&lt;/li&gt;
&lt;li&gt;Mudança de cor &amp;#8211; Nomear cores com etiquetas vai permitir que você altere uma cor e tê-la automaticamente modificada em todo o seu projeto.&lt;/li&gt;
&lt;li&gt;Colored onion skinning &amp;#8211; Controlar facilmente animações complexas agora que os quadros adjacentes podem ter diferentes valores de cor e alfa.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-4.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-52405&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-4.png&#34; alt=&#34;Sem título 4&#34; width=&#34;839&#34; height=&#34;472&#34; /&gt;&lt;/a&gt;]&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título.png&#34;&gt;4&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;integração-creativesync&#34;&gt;Integração CreativeSync&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Adobe Stock &amp;#8211; Você poderá navegar e licenciar milhões de fotos de alta qualidade, ilustrações e gráficos vetoriais diretamente no Animate. Você poderá até mesmo adicionar a vida a conteúdo estático através da adição de animações.&lt;/li&gt;
&lt;li&gt;Creative Cloud &amp;#8211; Acesso cores, gráficos vetoriais e brushs diretamente enquanto você trabalha.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&#34; wp-image-52402 alignnone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título.png&#34; alt=&#34;Sem título&#34; width=&#34;889&#34; height=&#34;500&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;capacidades-de-saída&#34;&gt;Capacidades de saída&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Suporte multiplataforma: HTML5, Canvas, WebGL, Flash (SWF), AIR, plataformas de vídeo e personalizadas (como SVG) através de extensões.&lt;/li&gt;
&lt;li&gt;Exportação de vídeo 4K + &amp;#8211; exportação  de vídeos com resoluções personalizadas para o mais recente Hi-DPI e Ultra HD.&lt;/li&gt;
&lt;li&gt;Resolução de exportação personalizada &amp;#8211; Revitalizar conteúdo mais antigo por redimensionamento e otimizando-os para qualquer resolução, como Hi-DPI e Ultra HD.&lt;/li&gt;
&lt;li&gt;Apoio .OAM &amp;#8211; Exporte seu projeto como um arquivo .OAM para facilitar a importação para o Adobe Muse, InDesign, DPS e Dreamweaver.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-2.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52404&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/Sem-título-2.png&#34; alt=&#34;Sem título 2&#34; width=&#34;1366&#34; height=&#34;768&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Adobe comunicou que durante toda a semana estará nos informando no seu &lt;a href=&#34;http://www.twitch.tv/adobe&#34;&gt;canal&lt;/a&gt;  de transmissão algumas funcionalidades tanto para animação quanto para jogos.&lt;/p&gt;

&lt;p&gt;A equipe deles se encontra entusiasmada para o seu próximo lançamento, e falou que quando se aproximar do 20º aniversario do querido Flash, eles convidarão animadores e designers para se juntar a eles para as próximas décadas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Usando GIT para atualizar arquivos no servidor de hospedagem</title>
      <link>https://tableless.github.io/hugo-public/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem/</link>
      <pubDate>Thu, 08 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem/</guid>
      <description>

&lt;h2 id=&#34;solução-usando-bitbucket-kinghost&#34;&gt;Solução usando Bitbucket + Kinghost&lt;/h2&gt;

&lt;p&gt;A mesma configuração pode ser usada em qualquer servidor GIT e qualquer serviço de hospedagem que tenha acesso via ssh e git instalado&lt;/p&gt;

&lt;p&gt;Vamos imaginar um cenário em que você está desenvolvendo um site, nesse site você tem vários arquivos, distribuídos em pastas separadas, css, javascript, html, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;Sempre que você altera algum arquivo, precisa enviar por FTP, para atualizar seu site. Um fluxo (&lt;a href=&#34;http://elcio.com.br/pare-de-usar-ftp/&#34;&gt;antigo&lt;/a&gt;), mas parece ser ainda muito normal (&lt;a href=&#34;http://tableless.com.br/tornar-dev-front-end/&#34;&gt;infelizmente&lt;/a&gt;) por aí. As vezes você faz várias alterações e pode esquecer de enviar alguma coisa, ou você não sabe se já atualizou ou não, ou então você mandou alguma coisa errada para o servidor e seu site parou de funcionar, como fazer para voltar a versão anterior?&lt;/p&gt;

&lt;p&gt;Com o GIT esse problema é solucionado, você pode voltar para a versão desejada com apenas um comando git, atualizar apenas os arquivos que foram alterados e muito mais.&lt;/p&gt;

&lt;h4 id=&#34;requisitos-para-executar-este-tutorial&#34;&gt;Requisitos para executar este tutorial:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Conta no site &lt;a href=&#34;https://bitbucket.org/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://bitbucket.org/&#34;&gt;https://bitbucket.org/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Serviço de hospedagem linux com acesso SSH&lt;/li&gt;
&lt;li&gt;Cliente GIT instalado na sua máquina &amp;#8211; &lt;a href=&#34;https://git-scm.com/downloads&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Putty, baixe o pacote completo, é um arquivo .zip com os binários para windows &amp;#8211; &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34;&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Antes de tudo vamos criar nossa chave de ssh no windows, essa chave serve para autenticação no bitbucket, com a chave ativa no windows você não precisa ficar digitando seu login e senha para autenticar;&lt;/p&gt;

&lt;p&gt;Descompacte o arquivo putty.zip e execute o arquivo PUTTYGEN.EXE;&lt;/p&gt;

&lt;p&gt;Clique em |Generate|, para que a chave seja criada você deve movimentar o mouse na área em branco do programa e esperar a barra de progresso chegar até o final:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/puttygen_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51450&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/puttygen_01.jpg&#34; alt=&#34;puttygen_01&#34; width=&#34;492&#34; height=&#34;476&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clique em |Save private key|, vai aparecer uma janela avisando que não definimos um passphrase, clique em sim e salve sua chave.ppk, o arquivo ppk é usado para identificar seu computador no bitbucket, vamos usa-lo mais tarde.&lt;/p&gt;

&lt;p&gt;Ainda no PuttyGen, vamos copiar a nossa chave |Public Key| para inserir no bitbucket.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/puttygen_02.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51451&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/puttygen_02.jpg&#34; alt=&#34;puttygen_02&#34; width=&#34;492&#34; height=&#34;476&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abra o bitbucket, clique em |Gerenciar conta| &amp;gt; |Chaves SSH| &amp;gt; |Adicionar Chave|;&lt;/p&gt;

&lt;p&gt;Na janela que abrir escolha um nome para identificar a chave, pode ser qualquer nome, e no campo key cole a chave que copiamos lá do PuttyGen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/chave_bitbucket.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51443&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/chave_bitbucket.jpg&#34; alt=&#34;chave_bitbucket&#34; width=&#34;786&#34; height=&#34;466&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Já pode fechar o PuttyGen, vamos agora inicializar a chave no computador, execute o PAGEANT.EXE, quando você executa aparece um ícone na barra de tarefas ao lado do relógio do windows, clique duas vezes para abrir o PAGEANT;&lt;/p&gt;

&lt;p&gt;Com o PAGEANT aberto, clique em |Add Key| e selecione o arquivo .ppk que salvamos anteriormente, depois pode fechar o PAGEANT, ele vai ficar minimizado na barra de tarefas.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h4 id=&#34;criando-repositório-no-bitbucket&#34;&gt;Criando repositório no Bitbucket&lt;/h4&gt;

&lt;p&gt;Depois de logado no site do bitbucket, clique em criar e selecione a opção criar repositório;&lt;/p&gt;

&lt;p&gt;Na tela a seguir você deve escolher um nome, aqui vou usar o nome |artigo_atualizacao_arquivos|;&lt;/p&gt;

&lt;p&gt;Nos níveis de acesso você escolhe se vai ser um repositório privado ou público, se for privado somente as pessoas que você conceder permissão terão acesso, no meu caso criei um repositório público;&lt;/p&gt;

&lt;p&gt;Não precisa mexer no restante das configurações, veja abaixo como ficou:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51444&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_01.jpg&#34; alt=&#34;configuracao_bitbucket_01&#34; width=&#34;614&#34; height=&#34;580&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após essa etapa vai aparecer uma tela de confirmação dizendo que o repositório está vazio e algumas dicas de como configurar, vamos criar um repositório do zero.&lt;/p&gt;

&lt;p&gt;No seu computador abra o terminal e vamos verificar se o git está instalado, digite |git &amp;#8211;version| se o git estiver instalado você deve ver uma mensagem dizendo qual a versão você tem instalada;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Caso não tenha o GIT instalado ainda, faça o download e instale &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ainda no terminal navegue até a pasta que vai ter o conteúdo do seu repositório, caso necessário crie uma;&lt;/p&gt;

&lt;p&gt;Digite |git init| para iniciar um novo repositório local;&lt;/p&gt;

&lt;p&gt;No bitbucket, selecione o seu repositório, depois no menu a esquerda, clique em clonar, vai abrir uma janela, selecione ssh e copie o texto que tem no campo ao lado;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_02.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51445&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_02.jpg&#34; alt=&#34;configuracao_bitbucket_02&#34; width=&#34;667&#34; height=&#34;390&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cole o texto copiado no seu terminal e espere a mensagem de confirmação, deve ser parecida com a mensagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_windows.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51448&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_windows.jpg&#34; alt=&#34;configuracao_git_windows&#34; width=&#34;657&#34; height=&#34;282&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Entre na pasta do seu repositório e crie um arquivo para fazer nosso primeiro commit, eu criei um arquivo chamado &amp;#8220;artigo.html&amp;#8221;;&lt;/p&gt;

&lt;p&gt;Depois de criar o arquivo vamos adicionar ao commit com o comando |git add artigo.html-|&lt;/p&gt;

&lt;p&gt;Agora vamos fazer o commit |git commit -m &amp;#8220;Primeiro Commit|&lt;/p&gt;

&lt;p&gt;Depois enviar para o servidor com o comando |git push -u origin master|&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_windows_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51449&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_windows_01.jpg&#34; alt=&#34;configuracao_git_windows_01&#34; width=&#34;657&#34; height=&#34;301&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nossa configuração no windows já está pronta, já pode enviar e receber arquivos do repositório, agora vamos configurar nosso servidor de hospedagem.&lt;/p&gt;

&lt;p&gt;Abra o putty e faça uma conexão ssh com o servidor, vamos fazer o mesmo processo do windows para saber se o git está instalado;&lt;/p&gt;

&lt;p&gt;|git &amp;#8211;version|&lt;/p&gt;

&lt;p&gt;Vamos criar a chave de ssh para autenticar no bitbucket sem usar senha:&lt;/p&gt;

&lt;p&gt;Digite |ssh-keygen|, vc vai ver uma mensagem pedindo em qual arquivo você quer salvar a chave, ao lado ele exibe uma sugestão, se apertar Enter sem escrever nada ele vai usar o arquivo padrão que foi sugerido, se o arquivo já existir vai pedir pra substituir, confirme |Y|, no meu caso usei o arquivo sugerido;&lt;/p&gt;

&lt;p&gt;Logo após vai pedir o passphrase, novamente é só apertar Enter, pode deixar em branco;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_linux_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51446&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_linux_01.jpg&#34; alt=&#34;configuracao_git_linux_01&#34; width=&#34;652&#34; height=&#34;409&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se você usou o arquivo padrão para gerar a chave digite |cat ~/.ssh/id_rsa.pub| para visualizar a sua chave, copie esse código, e adicione uma nova chave no bitbucket com essa chave, da mesma maneira que fizemos com a chave que foi criada no windows.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_linux_02.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51447&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_git_linux_02.jpg&#34; alt=&#34;configuracao_git_linux_02&#34; width=&#34;642&#34; height=&#34;131&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, agora vamos clonar nosso repositório, da mesma maneira que fizemos no windows, abra o repositório no bitbucket, depois no menu a esquerda, clique em clonar, vai abrir uma janela, selecione ssh e copie o texto que tem no campo ao lado;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_02.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51445&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/configuracao_bitbucket_02.jpg&#34; alt=&#34;configuracao_bitbucket_02&#34; width=&#34;667&#34; height=&#34;390&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Execute o comando no seu terminal ssh;&lt;/p&gt;

&lt;p&gt;Agora que seu repositório já esta configurado você pode usar o comando |git pull| para atualizar os arquivos sempre que quiser.&lt;/p&gt;

&lt;p&gt;Ou pode voltar uma versão usando |git checkout| vale a penas estudar um pouco os comandos do git e entender todos os seus recursos.&lt;/p&gt;

&lt;p&gt;Link para material de estudo sobre o GIT: &lt;a href=&#34;http://pt.slideshare.net/slide_user/magia-git&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://pt.slideshare.net/slide_user/magia-git&#34;&gt;http://pt.slideshare.net/slide_user/magia-git&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link oficial do git: &lt;a href=&#34;https://git-scm.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;https://git-scm.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ATENÇÃO: para evitar conflitos no git não use mais FTP nas pastas que você está usando versionamento através do GIT&lt;/p&gt;

&lt;p&gt;No próximo artigo vou explicar como fazer o deploy automático usando php, sempre que o GIT for atualizado ele envia um aviso ao servidor que executa os comandos para atualizar os arquivos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tudo que você queria saber sobre Git e GitHub, mas tinha vergonha de perguntar</title>
      <link>https://tableless.github.io/hugo-public/tudo-que-voce-queria-saber-sobre-git-e-github-mas-tinha-vergonha-de-perguntar/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tudo-que-voce-queria-saber-sobre-git-e-github-mas-tinha-vergonha-de-perguntar/</guid>
      <description>

&lt;p&gt;Este artigo traz a você tudo que precisa saber para se tornar um desenvolvedor que possa dominar tanto o git, quanto o Github. Nosso objetivo é trazer os conhecimentos necessários para que você possa, a partir do zero, dominar os conceitos gerais do git, e usar o github para &amp;#8220;hospedar&amp;#8221; seus projetos pessoais e acompanhar outros projetos de seu interesse.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-git&#34;&gt;O que é git?&lt;/h2&gt;

&lt;p&gt;Git é um sistema de controle de versão de arquivos. Através deles podemos&amp;nbsp;desenvolver projetos&amp;nbsp;na qual diversas pessoas podem contribuir simultaneamente no mesmo, editando e criando novos arquivos e permitindo que os mesmos possam existir sem o risco de suas alterações serem sobrescritas.&lt;/p&gt;

&lt;p&gt;Se não houver um sistema de versão, imagine o caos entre duas pessoas abrindo o mesmo arquivo ao mesmo tempo. Uma das aplicações do git é justamente essa, permitir que um arquivo possa ser editado ao mesmo tempo por pessoas diferentes. Por mais complexo que isso seja, ele tenta manter tudo em ordem para evitar problemas para nós desenvolvedores.&lt;/p&gt;

&lt;p&gt;Outro fator importante do git (e essa é um dos seus diferenciais em relação ao svn &amp;#8211; caso vc o conheça) é a possibilidade de criar, a qualquer momento, vários &lt;code&gt;snapshots&lt;/code&gt; do seu projeto, ou como chamamos mais &amp;#8220;nerdmenete&amp;#8221;, branch. Suponha que o seu projeto seja um site html, e você deseja criar uma nova seção no seu código HTML, mas naquele momento você não deseja que estas alterações estejam disponíveis para mais ninguém, só para você. Isso é, você quer alterar o projeto (incluindo vários arquivos nele), mas ainda não quer que isso seja tratado como &amp;#8220;oficial&amp;#8221; para outras pessoas, então vc cria um branch (como se fosse uma cópia espelho) e então trabalha apenas nesse branch, até acertar todos os detalhes dele. Após isso, você pode fazer um merge de volta do seu branch até o projeto original. Veja bem, se tudo isso que você leu só ajudou a te confundir mais &amp;#8211; respire fundo &amp;#8211; e siga em frente. Com exemplos tudo fica melhor.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-github&#34;&gt;O que é github?&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; é um serviço web que oferece diversas funcionalidades extras aplicadas ao git. Resumindo, você poderá usar gratuitamente o github para hospedar seus projetos pessoais. Além disso, quase todos os projetos/frameworks/bibliotecas sobre desenvolvimento open source estão no github, e você pode acompanhá-los através de novas versões, contribuir informando bugs ou até mesmo enviando código e correções. Se você é desenvolvedor e ainda não tem github, você está atrasado e essa é a hora de correr atrás do prejuízo.&lt;/p&gt;

&lt;h2 id=&#34;instalando-git&#34;&gt;Instalando git&lt;/h2&gt;

&lt;p&gt;O git é um programa que pode ser instalado &lt;a href=&#34;http://git-scm.com/download/win&#34; target=&#34;_blank&#34;&gt;neste link&lt;/a&gt; para Windows, &lt;a href=&#34;http://git-scm.com/download/mac&#34; target=&#34;_blank&#34;&gt;neste&lt;/a&gt; para Mac, ou então através do comando &lt;code&gt;sudo apt-get install git&lt;/code&gt; para plataformas Linux/Debian, como o Ubuntu. Se você usa uma VM na nuvem, como o &lt;a href=&#34;http://c9.io&#34; target=&#34;_blank&#34;&gt;cloud9&lt;/a&gt; ou &lt;a href=&#34;https://koding.com/&#34; target=&#34;_blank&#34;&gt;koding&lt;/a&gt;, o git já estará disponível em sua linha de comando.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nossa metodologia é fazer com que você aprenda git já utilizando o github, então vamos a sua configuração!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;criando-a-conta-no-github&#34;&gt;Criando a conta no GitHub&lt;/h2&gt;

&lt;p&gt;O github não possui instalação, ele é um serviço, e caso você não tenha uma conta, chegou a hora de criá-la, &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;neste link&lt;/a&gt;. Após criar a conta, você verá um botão verde &lt;code&gt;+New Repository&lt;/code&gt; na qual poderá criar um repositório de acordo com a tela a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github.png&#34; alt=&#34;github&#34; width=&#34;750&#34; height=&#34;477&#34; class=&#34;alignleft size-full wp-image-51160&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nesta imagem estamos criando um repositório cujo nome é &lt;code&gt;site&lt;/code&gt;, de domínio público (podem ser criados reps privados pagando uma mensalidade), e com o arquivo &lt;code&gt;README.md&lt;/code&gt; embutido, que contém uma descrição do seu projeto. Para que possamos começar a entender como o git funciona, é fundamental criar um rep como este para os nossos testes.&lt;/p&gt;

&lt;p&gt;Após a criação do repositório, ele estará disponível no endereço &lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/site&lt;/code&gt;, onde &lt;code&gt;username&lt;/code&gt;é o login que você usou para se cadastrar. Acessando esta url temos a seguinte resposta:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_site.png&#34; alt=&#34;github_site&#34; width=&#34;1051&#34; height=&#34;780&#34; class=&#34;alignleft size-full wp-image-51163&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Temos muitas informações nesta tela, pois ela é a tela principal do seu projeto. Explicaremos algumas informações ao longo deste artigo, por enquanto repare apenas no botão &lt;code&gt;HTTPs Clone Url&lt;/code&gt; na parte inferior à direta. Esta URl será necessária para que possamos &amp;#8220;clonar&amp;#8221; este projeto em nosso ambiente de estudo (sua máquina windows, mac, linux ou a vm). Clique no botão de copiar URL e perceba que a seguinte URL está na área de transferência: &lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/site.git&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-git&#34;&gt;Configurando o git&lt;/h2&gt;

&lt;p&gt;Existem 2 pequenos passos para configurar o seu GIT para ter um acesso mais simplificado ao github. Aqui estaremos estabelecendo que, sempre que necessitar, você irá fornecer o seu login e senha ao GitHub. Existem meios para salvar a senha em local seguro, mas vamos pular esta etapa. Para abrir um terminal GIT no Windows, basta criar uma pasta no seu sistema e, nela, clicar com o botão direito do mouse e escolher &lt;code&gt;Git Bash Here&lt;/code&gt;. Em sistemas mac/linux você já está acostumado a usar o terminal/console, o git estará lá disponível. Neste artigo estaremos utilizando a máquina virtual cloud9, que você pode aprender a usá-la neste &lt;a href=&#34;http://tableless.com.br/programando-na-nuvem-com-o-cloud9/&#34; target=&#34;_blank&#34;&gt;artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Então, com o seu terminal git aberto, vamos digitar:&lt;/p&gt;

&lt;pre&gt;$ git config --global user.name &#34;YOUR NAME&#34;
$ git config --global user.email &#34;YOUR EMAIL ADDRESS&#34;
&lt;/pre&gt;

&lt;p&gt;Estas configurações ficam alocadas no arquivo &lt;code&gt;~/.gitconfig&lt;/code&gt;, onde o ~ é o seu diretório home. No Windows, ele fica em &lt;code&gt;c:\Usuarios\&amp;lt;username&amp;gt;\.gitconfig&lt;/code&gt;. Veja a figura a seguir com a minha configuração no cloud9.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_config.png&#34; alt=&#34;git_config&#34; width=&#34;300&#34; height=&#34;146&#34; class=&#34;alignleft size-medium wp-image-51167&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;vamos-clonar&#34;&gt;Vamos clonar!&lt;/h2&gt;

&lt;p&gt;Então o que temos até agora é o git configurado para utilizar o github e o projeto no github criado. Precisamos trazer este projeto para o nosso git, e este processo se chama &lt;code&gt;clonar&lt;/code&gt;. Então, quando você quiser começar um projeto utilizando git, você cria ele no github e clona na sua máquina. O comando para clonar o projeto é &lt;code&gt;git clone &amp;quot;url&amp;quot;&lt;/code&gt;, veja:&lt;/p&gt;

&lt;pre&gt;git clone https://github.com/&amp;lt;username&amp;gt;/site.git
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_clone.png&#34; alt=&#34;git_clone&#34; width=&#34;720&#34; height=&#34;223&#34; class=&#34;alignleft size-full wp-image-51172&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perceba que, ao fazer o git clone, o projeto é baixado para a sua máquina, e uma pasta com o nome do projeto é criada.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quer dizer que qualquer pessoa pode baixar o meu projeto? Sim, isso é natural, já que o seu repositório está público. Qualquer um pode clonar ele para si, mas eles não podem alterar os seus arquivos, isso não vai acontecer, exceto que você permita.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;comandos-iniciais-do-git&#34;&gt;Comandos iniciais do git&lt;/h2&gt;

&lt;p&gt;Com o repositório na sua máquina, vamos aprender 4 comandos iniciais que farão parte da sua vida a partir de agora:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add &amp;lt;arquivos...&amp;gt;&lt;/code&gt; Este comando adiciona o(s) arquivo(s) em um lugar que chamamos de INDEX, que funciona como uma área do git no qual os arquivos possam ser enviados ao Github. É importante saber que ADD não está adicionando um arquivo novo ao repositório, mas sim dizendo que o arquivo (sendo novo ou não) está sendo preparado para entrar na próxima revisão do repositório.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;comentário qualquer&amp;quot;&lt;/code&gt; Este comando realiza o que chamamos de &amp;#8220;commit&amp;#8221;, que significa pegar todos os arquivos que estão naquele lugar INDEX que o comando &lt;code&gt;add&lt;/code&gt; adicionou e criar uma revisão com um número e um comentário, que será vista por todos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt; Push (empurrar) é usado para publicar todos os seus commits para o github. Neste momento, será pedido a sua senha.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; Exibe o status do seu repositório atual &lt;/ul&gt;&lt;/p&gt;

&lt;h2 id=&#34;vamos-praticar&#34;&gt;Vamos praticar!&lt;/h2&gt;

&lt;p&gt;Chegou o momento de praticar um pouco o que vimos até agora, e com bastante calma para que você possa entender cada passo. Após clonar o seu projeto, crie o arquivo &lt;code&gt;index.html&lt;/code&gt; na pasta site que é o seu repositório git. Após criar o arquivo, execute o comando &lt;code&gt;git status&lt;/code&gt;. A resposta é semelhante a figura a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_touch_index.png&#34; alt=&#34;git_touch_index&#34; width=&#34;628&#34; height=&#34;284&#34; class=&#34;alignleft size-full wp-image-51179&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ou seja, o comando &lt;code&gt;git status&lt;/code&gt; nos trouxe várias informações, que iremos ignorar a princípio, exceto pelo &lt;code&gt;Untracked files&lt;/code&gt;, dizendo que existe um arquivo que não está sendo &amp;#8220;mapeado&amp;#8221; pelo git. Para preparar este arquivo para o seu versionamento, usamos o comando &lt;code&gt;git add&lt;/code&gt;, veja:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_add.png&#34; alt=&#34;git_add&#34; width=&#34;600&#34; height=&#34;272&#34; class=&#34;alignleft size-full wp-image-51180&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora temos o nosso arquivo index.html no INDEX do repositório, ou se você quiser pensar: &amp;#8220;preparado para um commit&amp;#8221;. Para commitar este arquivo, usamos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_commit.png&#34; alt=&#34;git_commit&#34; width=&#34;760&#34; height=&#34;248&#34; class=&#34;alignleft size-full wp-image-51182&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após &amp;#8220;commitar&amp;#8221; o arquivo, ele já está presente no nosso repositório local, tanto que realizamos o comando &lt;code&gt;git status&lt;/code&gt; novamente e ele retornou que não havia nada de novo no projeto. Perceba agora que, mesmo recarregando o projeto no github, nada muda. Ou seja, estas mudanças até agora foram locais, você pode realizar várias operações antes de publicá-las no github. Para publicar, usamos o comando &lt;code&gt;git push&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_push.png&#34; alt=&#34;git_push&#34; width=&#34;600&#34; height=&#34;255&#34; class=&#34;alignleft size-full wp-image-51184&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após realizar o git push podemos ver no site github as mudanças realizadas no projeto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_site2.png&#34; alt=&#34;github_site2&#34; width=&#34;812&#34; height=&#34;552&#34; class=&#34;alignleft size-full wp-image-51185&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Desta forma, aprendemos os 4 comandos mais básicos do git, e com ele podemos começar a compreender como funciona o processo de versionamento de arquivos com git e github.&lt;/p&gt;

&lt;h3 id=&#34;errei-a-mensagem-do-commit-como-arrumo&#34;&gt;Errei a mensagem do commit, como arrumo?&lt;/h3&gt;

&lt;p&gt;Imagine que você tenha errado a mensagem que escreveu no commit ou simplesmente queira melhorar a descrição do seu trabalho. Você já comitou a mensagem mas ainda não fez o push das suas modificações para o servidor. Nesse caso você usa a flag &lt;code&gt;--amend&lt;/code&gt;. Fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ git commit --amend&lt;/pre&gt;
    

&lt;p&gt;O &lt;code&gt;git commit --amend&lt;/code&gt; modifica a mensagem do commit mais recente, ou seja, o último commit feito por você no projeto. Além de você mudar a mensagem do commit, você consegue adicionar arquivos que você se esqueceu ou retirar arquivos comitados por engano. O git cria um commit totalmente novo e corrigido.&lt;/p&gt;

&lt;h2 id=&#34;cadê-o-git-pull&#34;&gt;Cadê o git pull?&lt;/h2&gt;

&lt;p&gt;Ainda existe um comando importante neste processo, que é o &lt;code&gt;git pull&lt;/code&gt;. Ele é usado para trazer todas as modificações que estão no github para o seu projeto local. Isso é vital quando existem projetos mantidos por mais de uma pessoa, ou se você possui duas máquinas e precisa manter a sincronia entre elas. Supondo que você possui uma máquina no trabalho e outra em casa. Ambas tem o repositório local ligado ao github. Quando você executar um &lt;code&gt;git push&lt;/code&gt; em uma das máquinas, terá que realizar um &lt;code&gt;git pull&lt;/code&gt; na outra.&lt;/p&gt;

&lt;p&gt;Para exemplificar, vamos alterar o arquivo README.md diretamente no github. Isso é possível clicando no arquivo e depois clicando no ícone para edição, conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_edit.png&#34; alt=&#34;github_edit&#34; width=&#34;935&#34; height=&#34;356&#34; class=&#34;alignleft size-full wp-image-51241&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após clicar em edit, adicione algum texto, forneça uma mensagem de commit e clique no botão &amp;#8220;Commit Changes&amp;#8221;. Com isso, uma nova revisão no seu projeto é criada, mas como ela foi gerada no github, o seu projeto local está desatualizado. Para atualizar o seu projeto, use &lt;code&gt;git pull&lt;/code&gt;, e perceba que o arquivo README.md é atualizado de acordo com a sua última revisão, semelhante a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git-pull.png&#34; alt=&#34;git-pull&#34; width=&#34;520&#34; height=&#34;285&#34; class=&#34;alignleft size-full wp-image-51242&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;melhorando-o-conceito-do-comando-git-add&#34;&gt;Melhorando o conceito do comando git add&lt;/h2&gt;

&lt;p&gt;Possivelmente você imaginou que o comando &lt;code&gt;git add&lt;/code&gt; é usado para novos arquivos, mas isso não é verdade. O comando &lt;code&gt;add&lt;/code&gt; é usado para adicionar qualquer alteração de arquivo ao INDEX do git, que é uma área especial onde os arquivos estão sendo preparados para o commit. Quando usamos &lt;code&gt;add&lt;/code&gt;, estamos dizendo que o arquivo estará adicionando ao próximo commit, quando este for realizado. Isso é necessário porque nem sempre queremos que todos os arquivos que alteramos sejam comitados.&lt;/p&gt;

&lt;p&gt;Vamos a um exemplo simples, adicionando o seguinte código no arquivo index.html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
    

&lt;p&gt;Após salvar este modelo html, o comando git status irá apresentar:&lt;/p&gt;

&lt;pre&gt;modified:   index.html
&lt;/pre&gt;
    

&lt;p&gt;Para adicionar o arquivo e prepará-lo para o commit, usamos &lt;code&gt;git add index.html&lt;/code&gt;. Desta forma, ele está pronto para usarmos o comando &lt;code&gt;git commit&lt;/code&gt;, o que não faremos agora. Antes disso, altere novamente o arquivo e adicione algum texto entre as tags body, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
Esse é meu site
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
    

&lt;p&gt;Após alterar o arquivo, temos a seguinte situação:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adicionamos o conteúdo html no arquivo index.html&lt;/li&gt;
&lt;li&gt;Realizamos &lt;code&gt;git add index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Alteramos index.html e adicionamos o texto entre as tags body
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Neste momento, faça: &lt;code&gt;git commit -m &amp;quot;Alteração no arquivo index.html&amp;quot;&lt;/code&gt;, e após isso, faça: &lt;code&gt;git push&lt;/code&gt;. Analise agora no github se a sua alteração na tag body está visível. Ela não estará. Mas porque isso aconteceu? Quando usamos o comando &lt;code&gt;git add&lt;/code&gt;, aquela alteração no body ainda não tinha sido escrita, então ela não estará pronta até que você faça novamente o comando &lt;code&gt;git add&lt;/code&gt;. Em termos técnicos, a segunda alteração que fez ainda não está na INDEX do repositório. Como tarefa, faça novamente &lt;code&gt;git add index.html&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt; e &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;trabalhando-com-branches&#34;&gt;Trabalhando com branches&lt;/h2&gt;

&lt;p&gt;Branches e mergers sempre foram os pesadelos de qualquer gerenciador de versão (ok, do svn&amp;#8230;). No git, o conceito de branch tornou-se algo muito simples e fácil de usar. Mas quando que temos que criar um branch? Imagine que o seu site está pronto, tudo funcionando perfeitamente, mas surge a necessidade de alterar algumas partes dele como forma de melhorá-lo. Além disso, você precisa manter estas alterações tanto no computador de casa quanto do trabalho. Com isso temos um problema, se você começa a alterar os arquivos em casa, para na metade da implementação, e precisa terminar no trabalho, como você iria comitar tudo pela metade e deixar o site incompleto?&lt;/p&gt;

&lt;p&gt;Para isso existe o conceito de branch, que é justamente ramificar o seu projeto em 2, como se cada um deles fosse um repositório, e depois juntá-lo novamente. Voltando ao github, perceba o detalhe da imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/master.png&#34; alt=&#34;master&#34; width=&#34;821&#34; height=&#34;344&#34; class=&#34;alignleft size-full wp-image-51249&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sem saber, você já está em um branch, que chamamos de master. Perceba também que, sempre que usávamos &lt;code&gt;git status&lt;/code&gt;, o nome do branch é exibido, e sempre que comitávamos ou fazíamos o push, o mesmo aparecia. Ou seja, até este momento fizemos todas as alterações no master. Você pode criar um branch no github ou em linha de comando. Inicialmente, vamos pelo github, criando o branch &amp;#8220;new_menu&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/new_branch.png&#34; alt=&#34;new_branch&#34; width=&#34;468&#34; height=&#34;328&#34; class=&#34;alignleft size-full wp-image-51250&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Criamos o branch new_menu, e para que possamos trabalhar nele, usamos o comando &lt;code&gt;git checkout new_menu&lt;/code&gt;. No primeiro momento que você cria este branch no github, é necessário realizar o comando &lt;code&gt;git pull&lt;/code&gt; no seu projeto para que ele possa saber que este branch foi criado. Após realizar &lt;code&gt;git pull&lt;/code&gt;, pode-se alterar para o novo branch, conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/new_menu.png&#34; alt=&#34;new_menu&#34; width=&#34;604&#34; height=&#34;299&#34; class=&#34;alignleft size-full wp-image-51252&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Neste momento, estamos no branch &lt;code&gt;new_menu&lt;/code&gt;, e tudo que fizermos agora será pertencente a ele. Caso haja necessidade de voltar ao branch master, basta realizar o comando &lt;code&gt;git checkout master&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Atenção, o comando &lt;code&gt;checkout&lt;/code&gt; do git não é o mesmo do checkout do svn, caso você o conheça. Ambos tem sentidos totalmente diferentes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então, entando no branch new_menu, vamos adicionar um simples menu na página:&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;ldquo;UTF-8&amp;rdquo;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;body&amp;gt;
    Meu Site&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;ul&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;index.html&amp;quot;&amp;amp;gt;Home&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;sobre.html&amp;quot;&amp;amp;gt;Sobre&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;contato.html&amp;quot;&amp;amp;gt;Contato&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
&amp;amp;lt;/ul&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Após criar o menu, certifique-se de estar no branch new_menu e faça o commit, conforme a figura a seguir.

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/new_menu_commit.png&amp;quot; alt=&amp;quot;new_menu_commit&amp;quot; width=&amp;quot;716&amp;quot; height=&amp;quot;536&amp;quot; class=&amp;quot;alignleft size-full wp-image-51254&amp;quot; /&amp;gt;

Agora temos algumas modificações no branch new\_menu, e podemos trabalhar nesse branch por quanto tempo for necessário, já que o master está intacto. Aqui temos uma funcionalidade interessante, que se destaca em relação as outras ferramentas de versionamento. Suponha que, no meio do seu desenvolvimento do menu, surge a necessidade de resolver um bug crítico no master, algo como &amp;amp;#8220;está faltando o h1 no título do seu site&amp;amp;#8221;&amp;amp;#8230;. Ou seja, estamos no branch new\_menu e precisamos alterar o master. Para isso, use o comando `git checkout master`. Ao fazer isso, retornamos ao master e aquele menu que criamos não está mais presente, conforme a figura a seguir.

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/back_to_master.png&amp;quot; alt=&amp;quot;back_to_master&amp;quot; width=&amp;quot;624&amp;quot; height=&amp;quot;686&amp;quot; class=&amp;quot;alignleft size-full wp-image-51255&amp;quot; /&amp;gt;

É claro que não perdemos o menu, ele está apenas no branch new_menu. Quando retornarmos a ele, voltará. Agora altere o título do site, incluindo o h1, veja:

&amp;lt;pre class=&amp;quot;lang-html&amp;quot;&amp;gt;&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;ldquo;UTF-8&amp;rdquo;&amp;gt;
    &amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Meu Site&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Após alterar, faça commit e o push! Veja:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/git_push2.png&amp;quot; alt=&amp;quot;git_push2&amp;quot; width=&amp;quot;687&amp;quot; height=&amp;quot;529&amp;quot; class=&amp;quot;alignleft size-full wp-image-51256&amp;quot; /&amp;gt;

Agora que resolvemos o problema do título, podemos voltar ao new_menu: `git checkout new_menu`. Após realizar este comando, temos o menu de volta no arquivo index.html, mas veja que o título não possui a tag H1. Isso acontece que estamos em outro branch. Tudo que acontece no master, fica no master. Tudo que acontece no new\_menu, fica no new\_menu

## Merge com conflitos

Se desejar trazer o título do master para o new_menu, devemos fazer uma operação chamada `merge`, que irá juntar um código no outro. Então, estando no branch new_menu, e querendo trazer uma alteração do master para este branch, precisamos realizar o seguinte comando: `git merge master`. Caso existam alterações nas mesmas linhas entre mesmos arquivos, um conflito será gerado, como no exemplo a seguir:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/conflict.png&amp;quot; alt=&amp;quot;conflict&amp;quot; width=&amp;quot;595&amp;quot; height=&amp;quot;616&amp;quot; class=&amp;quot;alignleft size-full wp-image-51259&amp;quot; /&amp;gt;

Este é um exemplo de conflito que podo ocorrer quando realizamos um merge, indicado em `1`. Perceba que o código html possui uma definição entre dois blocos, o primeiro, em `2` mostra como é o código do branch new_menu, e o segundo bloco, em `3`, mostra como é o código no branch master. Edite o arquivo repassando para a seguinte forma:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge2.png&amp;quot; alt=&amp;quot;merge2&amp;quot; width=&amp;quot;578&amp;quot; height=&amp;quot;613&amp;quot; class=&amp;quot;alignleft size-full wp-image-51260&amp;quot; /&amp;gt;

Ou seja, ajustamos os dois blocos, como se fosse um merge manual. Após resolver o conflito, vamos prepará-lo para o commit no branch new_menu, com o comando `git add`. Veja:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge3.png&amp;quot; alt=&amp;quot;merge3&amp;quot; width=&amp;quot;779&amp;quot; height=&amp;quot;105&amp;quot; class=&amp;quot;alignleft size-full wp-image-51261&amp;quot; /&amp;gt;

Ou seja, resolvemos o conflito &amp;amp;#8220;na mão&amp;amp;#8221; e depois comitamos normalmente.

## Merge sem conflitos

Quando não alteremos a mesma linha de um arquivo em branches diferentes, conseguimos realizar um merge sem ocasionar conflitos. Isso pode ser notado ao trazermos o menu do branch new_menu para o master, da seguinte forma:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge4.png&amp;quot; alt=&amp;quot;merge4&amp;quot; width=&amp;quot;585&amp;quot; height=&amp;quot;652&amp;quot; class=&amp;quot;alignleft size-full wp-image-51262&amp;quot; /&amp;gt;

Se não houver conflitos, basta realizar um commit normal para confirmar o merge.

## Vendo branches e merges

O github possui uma ferramenta gráfica para exibir os branches e merges do seu projeto. Clique no ícone em forma de gráfico no menu à direita do site e clique na aba Network, para se ter um resultado semelhante a figura a seguir:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/graph.png&amp;quot; alt=&amp;quot;graph&amp;quot; width=&amp;quot;1027&amp;quot; height=&amp;quot;446&amp;quot; class=&amp;quot;alignleft size-full wp-image-51265&amp;quot; /&amp;gt;

## Lendo mais

Você pode ler mais sobre git e entender mais sobre controles de versão, nesses artigos do Tableless:

  * &amp;lt;a href=&amp;quot;http://tableless.com.br/alguns-comandos-git/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Comandos Iniciais do Git&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/slides-devs-10-git/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Apresentações sobre GIT&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/iniciando-no-git-parte-1/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Iniciando com GIT &amp;amp;#8211; Parte 1&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/iniciando-no-git-parte-2/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Iniciando com GIT &amp;amp;#8211; Parte 2&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/git-com-interface-grafica/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git com Interface Gráfica&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Formulário de e-mail e envio com PHP</title>
      <link>https://tableless.github.io/hugo-public/formulario-de-e-mail-e-envio-com-php/</link>
      <pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/formulario-de-e-mail-e-envio-com-php/</guid>
      <description>

&lt;p&gt;Há anos atrás, quando queríamos colocar um formulário de e-mail em nosso site, simplesmente pegávamos um script em Perl que funcionava, mas não fazíamos ideia de como as coisas aconteciam por trás. Neste post demonstrarei que é muito simples fazer a mesma coisa em PHP. Perceba que o foco é principalmente no PHP, e não necessariamente na validação do formulário ou CSS, embora usaremos algumas boas práticas de validação.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aviso:&lt;/strong&gt; O script apenas enviará o e-mail se estiver em um servidor. Você não conseguirá mandar o e-mail do localhost (No Wamp ou Xampp por exemplo).&lt;/p&gt;

&lt;h3 id=&#34;criando-os-arquivos&#34;&gt;Criando os arquivos&lt;/h3&gt;

&lt;p&gt;Criaremos quatro arquivos que irão conter nosso script.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;O index.php&lt;/code&gt;, para que a pasta sempre abra no nosso arquivo de contato (você pode renomear depois para contato.php se quiser). O arquivo &lt;code&gt;mail_ok.php&lt;/code&gt;, para exibir a mensagem que o e-mail foi enviado, e o &lt;code&gt;mail_error.php&lt;/code&gt;, contendo a mensagem de erro. Finalmente, o &lt;code&gt;mail_send.php&lt;/code&gt;, contendo o script que envia o e-mail propriamente dito.&lt;/p&gt;

&lt;h3 id=&#34;index-php&#34;&gt;index.php&lt;/h3&gt;

&lt;p&gt;No &lt;code&gt;index.php&lt;/code&gt; vamos fazer o nosso formulário:&lt;/p&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&#34;utf8&#34;&amp;gt;
        &amp;lt;title&amp;gt;Contato&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;form action=&#34;mail_send.php&#34; method=&#34;post&#34;&amp;gt;
            &amp;lt;fieldset&amp;gt;
                &amp;lt;label for=&#34;email&#34;&amp;gt;E-mail: &amp;lt;/label&amp;gt;
                &amp;lt;input required name=&#34;email&#34; type=&#34;email&#34;&amp;gt;
            &amp;lt;/fieldset&amp;gt;
            &amp;lt;fieldset&amp;gt;
                &amp;lt;label for=&#34;mensagem&#34;&amp;gt;Mensagem: &amp;lt;/label&amp;gt;
                &amp;lt;textarea required name=&#34;mensagem&#34;&amp;gt;&amp;lt;/textarea&amp;gt;
            &amp;lt;/fieldset&amp;gt;
            &amp;lt;fieldset&amp;gt;
                &amp;lt;button type=&#34;submit&#34;&amp;gt;Enviar&amp;lt;/button&amp;gt;
            &amp;lt;/fieldset&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Esse formulário contém os campos &lt;code&gt;e-mail&lt;/code&gt; e &lt;code&gt;mensagem&lt;/code&gt;, ambos campos obrigatórios.&lt;/p&gt;

&lt;p&gt;Vamos agora fazer o &lt;code&gt;mail_ok.php&lt;/code&gt; e &lt;code&gt;mail_error.php&lt;/code&gt;:&lt;/p&gt;

&lt;h3 id=&#34;mail-ok-php&#34;&gt;mail_ok.php&lt;/h3&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt; &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&#34;utf8&#34;&amp;gt;
        &amp;lt;title&amp;gt;Sucesso&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Sucesso&amp;lt;/h1&amp;gt;
        
        &amp;lt;hr&amp;gt;
        
        &amp;lt;p&amp;gt;O e-mail foi enviado com sucesso.&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;h3 id=&#34;mail-error-php&#34;&gt;``mail_error.php&lt;/h3&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt; &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&#34;utf8&#34;&amp;gt;
        &amp;lt;title&amp;gt;Erro&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Erro&amp;lt;/h1&amp;gt;
        
        &amp;lt;hr&amp;gt;
        
        &amp;lt;p&amp;gt;Houve um erro no envio do e-mail. &amp;lt;a href=&#34;index.php&#34;&amp;gt;Tentar novamente&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Os arquivos anteriores mostram mensagens se o e-mail foi enviado. O seguinte script PHP irá redirecionar para eles:&lt;/p&gt;

&lt;h3 id=&#34;mail-send-php&#34;&gt;mail_send.php&lt;/h3&gt;

&lt;pre class=&#34;lang_php prettyprint linenums&#34;&gt;&amp;lt;?php

function pegaValor($valor) {
    return isset($_POST[$valor]) ? $_POST[$valor] : &#39;&#39;;
}

function validaEmail($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL);
}

function enviaEmail($de, $assunto, $mensagem, $para, $email_servidor) {
    $headers = &#34;From: $email_servidor\r\n&#34; .
               &#34;Reply-To: $de\r\n&#34; .
               &#34;X-Mailer: PHP/&#34; . phpversion() . &#34;\r\n&#34;;
    $headers .= &#34;MIME-Version: 1.0\r\n&#34;;
    $headers .= &#34;Content-Type: text/html; charset=ISO-8859-1\r\n&#34;;
  
  mail($para, $assunto, nl2br($mensagem), $headers);
}

$email_servidor = &#34;email@servidor.com&#34;;
$para = &#34;seu@email.com&#34;;
$de = pegaValor(&#34;email&#34;);
$mensagem = pegaValor(&#34;mensagem&#34;);
$assunto = &#34;Assunto da mensagem&#34;;

?&amp;gt;&lt;/pre&gt;

&lt;p&gt;Este último script define três funções:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pegaValor&lt;/code&gt;: se existir, pega a váriavel enviada via &amp;#8216;post&amp;#8217;, senão, retorna uma string vazia;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;validaEmail: &lt;/code&gt;retorna se o e-mail é válido;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enviaEmail&lt;/code&gt; : chama a função &lt;em&gt;mail&lt;/em&gt; do PHP com as variáveis que definimos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As variáveis &lt;code&gt;$de&lt;/code&gt; e &lt;code&gt;$mensagem&lt;/code&gt; irão pegar os valores enviados pelo formulário. Nas variáveis &lt;code&gt;$email_servidor&lt;/code&gt; e &lt;code&gt;$para&lt;/code&gt; você deverá colocar seu e-mail do servidor e o e-mail para o qual será enviado o formulário, respectivamente. A variável &lt;code&gt;$assunto&lt;/code&gt; será, obviamente, o assunto da mensagem.&lt;/p&gt;

&lt;h3 id=&#34;corpo-do-script&#34;&gt;Corpo do script&lt;/h3&gt;

&lt;pre class=&#34;lang_php prettyprint linenums&#34;&gt;if ($nome &amp;&amp; validaEmail($de) &amp;&amp; $mensagem) {
    enviaEmail($de, $assunto, $mensagem, $para, $email_servidor);
    $pagina = &#34;mail_ok.php&#34;;
} else {
    $pagina = &#34;mail_error.php&#34;;
}

header(&#34;location:$pagina&#34;);&lt;/pre&gt;

&lt;p&gt;Esta parte do script é o controle de fluxo. Se as variáveis não forem vazias e o e-mail for válido, enviará o e-mail e atribuirá a variável &lt;code&gt;$pagina&lt;/code&gt; para &lt;code&gt;mail_ok.php&lt;/code&gt;. Caso contrário, a variável &lt;code&gt;$pagina&lt;/code&gt; será &lt;code&gt;mail_error.php. &lt;/code&gt;E finalmente, redirecionaremos a página com a função &lt;code&gt;header&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aviso:&lt;/strong&gt; É de suma importância verificar no seu editor de texto se a codificação é &lt;strong&gt;UTF-8 sem BOM&lt;/strong&gt;. Se não for, o script irá enviar um espaço em branco antes do cabeçalho de redirecionamente, e irá aparecer o seguinte erro:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cannot modify header information - headers already sent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Com isso nosso script PHP está pronto. Adeus Perl!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Meteor</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-meteor/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-meteor/</guid>
      <description>

&lt;p&gt;Primeiro, se você ainda não conhece o Meteor, &lt;a href=&#34;http://tableless.com.br/apresentando-meteor/&#34; target=&#34;_blank&#34;&gt;da uma lida aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Não sou tão bom em fazer tutorial quanto em propaganda, deve ser por isso que trabalho numa agência de publicidade e não numa escola, mas vamos ao que interessa, vamos brincar um pouco com Meteor.&lt;/p&gt;

&lt;p&gt;Antes de mais nada, obviamente, você precisa instalar em sua máquina. Tem pra Windows, Linux e Mac, não tem erro:&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://www.meteor.com/install&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.meteor.com/install&#34;&gt;https://www.meteor.com/install&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois de instalado (poderá ser necessário reiniciar o computador em alguns casos), você vai estar apto pra executar os comandos do &lt;a href=&#34;https://www.meteor.com/tool&#34; target=&#34;_blank&#34;&gt;Meteor Tool&lt;/a&gt;. O que é isso? É uma CLI (Command Line Interface) pra você criar, rodar, instalar pacotes e tudo o mais necessário pra desenvolver aplicações com a plataforma.&lt;/p&gt;

&lt;p&gt;Para testar, rode o comando &lt;code&gt;meteor --version&lt;/code&gt;; o output é como se espera: a versão instalada do Meteor:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/08/meter-version.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-50696&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/08/meter-version.jpg&#34; alt=&#34;meter--version&#34; width=&#34;805&#34; height=&#34;373&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Falando nisso, tenho que atualizar o meu. Pra quem acabou de instalar a versão vai ser a 1.1.0.3.&lt;/p&gt;

&lt;p&gt;Então bora criar o primeiro app; e você faz isso simplesmente executado o comando &lt;code&gt;create&lt;/code&gt; e passando o nome da pasta que você vai dar pro projeto.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;meteor create hello-meteor&lt;/pre&gt;

&lt;p&gt;O Meteor vai então criar essa pasta &lt;code&gt;hello-meteor&lt;/code&gt; e vai deixa lá alguns arquivos iniciais. Aí você pensa: &amp;#8220;lá vem uns arquivos sinistros que nunca vi na vida; coisa a mais pra aprender&amp;#8221;, mas calma jovem, não são nada mais nada menos que um &lt;code&gt;.html&lt;/code&gt;, um &lt;code&gt;.css&lt;/code&gt; e um &lt;code&gt;.js&lt;/code&gt;; exatamente isso, esse trio que você já conhece e tem a maior admiração e eles só estão lá pra ilustrar como o Meteor funciona, só pra te falar: &amp;#8220;olha, é por aqui que você começa&amp;#8221;; quem manja &amp;#8220;dos Meteor&amp;#8221; já sai apagando esses arquivos.&lt;/p&gt;

&lt;p&gt;Como a gente não manja ainda, vamos usa-los pra entender como ele funciona!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/08/hellometeor.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-50701&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/08/hellometeor.jpg&#34; alt=&#34;hellometeor&#34; width=&#34;805&#34; height=&#34;373&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;hello-meteor.css&lt;/code&gt; não tem nada, é isso, tá lá só pra ilustrar, como falei antes, mas é lá que vai seu CSS.&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;hello-meteor.html&lt;/code&gt; já tem alguma coisa, mas não é um HTML qualquer. Ele não tem a tag &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; e tem essa tal de &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; mais essas chaves &lt;code&gt;{{ }}&lt;/code&gt;.  Primeiro é bom lembrar que a &lt;template&gt; não é coisa que o Meteor inventou é HTML5 e já é &lt;a href=&#34;http://www.w3.org/TR/html5/scripting-1.html#the-template-element&#34; target=&#34;_blank&#34;&gt;recomendação da W3C&lt;/a&gt;. As chaves também não são coisa nova do Meteor, quem usa &lt;a href=&#34;http://handlebarsjs.com/&#34; target=&#34;_blank&#34;&gt;Handlebars.js&lt;/a&gt; já conhece muito bem e vai estar muito familiarizado já que o &lt;a href=&#34;https://atmospherejs.com/meteor/spacebars&#34; target=&#34;_blank&#34;&gt;Spacebars&lt;/a&gt;, a engine do Meteor, é baseada no Handlebars. &amp;#8220;Por que eles fizeram outra template engine?&amp;#8221; você deve estar se perguntando e isso pra ter a &lt;a href=&#34;http://docs.meteor.com/#/full/livehtmltemplates&#34; target=&#34;_blank&#34;&gt;reatividade no HTML&lt;/a&gt; que a gente viu no post anterior.&lt;/p&gt;

&lt;p&gt;Mas o HTML é simples, uma olhada cautelosa e você já entende o que tá acontecendo, tem a &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; com um &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, ok; tem a &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; com um &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, normal e tem esse &lt;code&gt;{{&amp;gt; hello}}&lt;/code&gt; (se você usou o mesmo nome pra pasta), isso faz exatamente o que você tá imaginando, imprime o &lt;code&gt;&amp;lt;template name=&amp;quot;hello&amp;quot;&amp;gt;&lt;/code&gt;, declarado logo abaixo, naquele espaço da &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. Se você já tem noção de template engine isso já entrou na sua cabeça, nada diferente de Angular e Ember até aqui.&lt;/p&gt;

&lt;h2 id=&#34;o-hello-meteor-js&#34;&gt;O hello-meteor.js&lt;/h2&gt;

&lt;p&gt;Agora sim, o JavaScript, ele que faz acontecer.&lt;/p&gt;

&lt;p&gt;A primeira coisa que a gente tem que falar no JS quando se trata do Meteor, são as Booleans: &lt;code&gt;Meteor.isClient&lt;/code&gt; e &lt;code&gt;Meteor.isServer&lt;/code&gt;; sim, tenho certeza que você imaginou e é pra isso mesmo pra isso que elas servem. Os arquivos &lt;code&gt;.js&lt;/code&gt; no Meteor tem por natureza rodar tanto no ambiente cliente quanto no servidor, &lt;a href=&#34;http://docs.meteor.com/#/full/structuringyourapp&#34; target=&#34;_blank&#34;&gt;salvo quando localizados em pastas específicas&lt;/a&gt;, que é a parte sobre como organizar seu app em Meteor que a gente pode deixar pra outro post. Sendo assim o Meteor te da essas duas &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean&#34; target=&#34;_blank&#34;&gt;Booleans&lt;/a&gt; pra você saber quando tá em um ambiente ou em outro. No &lt;code&gt;hello-meteor.js&lt;/code&gt; o &lt;code&gt;if (Meteor.isClient) {&lt;/code&gt; e o &lt;code&gt;if (Meteor.isServer) {&lt;/code&gt; estão claros.&lt;/p&gt;

&lt;p&gt;No &lt;code&gt;isServer&lt;/code&gt; não temos muita ação, mas no &lt;code&gt;isClient&lt;/code&gt; a gente nota essa global &lt;code&gt;Template&lt;/code&gt;; pra cada &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; que você definir nos seus &lt;code&gt;.html&lt;/code&gt;, a &lt;code&gt;Template&lt;/code&gt; terá uma propriedade com o nome que você deu, no caso &lt;code&gt;hello&lt;/code&gt;. E o que você pode fazer com isso? Adicionar helpers e eventos. Helpers, quem trabalha com templates já sabe, são pequenas funções que te ajudam a mover alguma lógica de apresentação que estaria no HTML pro JS, o que faz muito mais sentido e eventos são, bom, eventos, você já conhece eles, são exatamente os eventos do DOM: click, mouseover, submit etc.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://docs.meteor.com/#/full/eventmaps&#34; target=&#34;_blank&#34;&gt;padrão pra selecionar os eventos&lt;/a&gt; é: &lt;code&gt;eventtype selector&lt;/code&gt; e eles pode ser separados por vírgula. No nosso hello-meteor.js temos lá como exemplo: &lt;code&gt;&#39;click button&#39;&lt;/code&gt; no lugar de &lt;code&gt;click&lt;/code&gt; poderia ser &lt;code&gt;submit&lt;/code&gt; e no lugar de &lt;code&gt;button&lt;/code&gt; poderia ser qualquer seletor CSS como é na jQuery, aliás, já comentei que o Meteor vem a com jQuery por padrão e você pode executar &lt;code&gt;template.$&lt;/code&gt; e retornar um jQuery Object? 😉 Pois é&amp;#8230;&lt;/p&gt;

&lt;p&gt;Ainda no JavaScript temos a global &lt;code&gt;Session&lt;/code&gt; e é justamente pra trabalhar com sessões mesmo; no exemplo temos a chave &lt;code&gt;counter&lt;/code&gt; na nossa &lt;code&gt;Session&lt;/code&gt; e a cada clique do botão o handle incrementa essa chave direto na &lt;code&gt;Session&lt;/code&gt;; temos uma helper de mesmo nome (&lt;code&gt;counter&lt;/code&gt;) que simplesmente retorna o valor da chave na sessão e no &lt;code&gt;.html&lt;/code&gt; a gente invoca essa helper com &lt;code&gt;{{counter}}&lt;/code&gt;; simples, um template em HTML imprimindo o valor de uma variável do JavaScript. O que tem de super cool aí é como dissemos a reatividade, a mudança de estado ser propagada sem esforço algum, você pode ver que não tem nenhum código pra ouvir quando a &lt;code&gt;counter&lt;/code&gt; é alterada e alterar no HTML, o Meteor te da isso out-of-the-box.&lt;/p&gt;

&lt;p&gt;Toda chave na &lt;code&gt;Session&lt;/code&gt; é uma &lt;a href=&#34;http://docs.meteor.com/#/full/reactivevar&#34; target=&#34;_blank&#34;&gt;ReactiveVar&lt;/a&gt; e vai ser pro-ativa o suficiente pra ouvir alterações em si e propaga-las até a View/HTML/Blaze/Spacebars.&lt;/p&gt;

&lt;p&gt;Quer ver isso tudo funcionando? Só executar &lt;code&gt;meteor&lt;/code&gt; dentro da pasta do seu app.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/08/runnnign.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-50707&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/08/runnnign.jpg&#34; alt=&#34;running&#34; width=&#34;805&#34; height=&#34;373&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, app rodando, só entrar em &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; no seu navegador preferido e clicar à vontade.&lt;/p&gt;

&lt;p&gt;Quer saber onde entra o MongoDB nessa história? Que ver o Meteor com Angular ou React? Comenta aí&amp;#8230;&lt;/p&gt;

&lt;p&gt;Abs!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rotas dinâmicas no Silex</title>
      <link>https://tableless.github.io/hugo-public/silex-rotas-dinamicas/</link>
      <pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/silex-rotas-dinamicas/</guid>
      <description>

&lt;p&gt;Continuando nossa jornada sobre o &lt;strong&gt;Silex Framework&lt;/strong&gt;, neste post falarei sobre rotas dinâmicas. Se você não está familiarizado com o Silex, confira nosso primeiro post _&lt;a href=&#34;http://tableless.com.br/conhecendo-e-instalando-o-silex/&#34; target=&#34;_blank&#34;&gt;Conhecendo e instalando o Silex&lt;/a&gt;_.&lt;/p&gt;

&lt;p&gt;Rotas dinâmicas são a possibilidade de passar parâmetros nas rotas da sua aplicação. O Silex possui diversos métodos para facilitar o uso dessa dinâmica em suas rotas.&lt;/p&gt;

&lt;h2 id=&#34;utilização&#34;&gt;Utilização&lt;/h2&gt;

&lt;p&gt;Para tornar sua rota dinâmica, veja o código abaixo:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
use Silex\Application;
require &#39;vendor/autoload.php&#39;;
$app = new Application();
$app-&amp;gt;get(&#39;users/{name}&#39;, function($name){
    return &#39;Olá, &#39; . $name;
});
$app-&amp;gt;run();
&lt;/pre&gt;

&lt;p&gt;O que nos interessa nesse momento, são as linhas de 5 e 6. Na linha 5 definimos nossa rota &lt;em&gt;users&lt;/em&gt;, que receberá requisições do tipo &lt;code&gt;GET&lt;/code&gt;. Perceba que entre chaves &lt;code&gt;{}&lt;/code&gt;, incluímos um elemento chamado &lt;code&gt;name&lt;/code&gt;, ou seja, esse é o parâmetro da nossa rota &lt;em&gt;users&lt;/em&gt;. Agora tudo que passarmos na URL após chamada a rota, poderemos manipular em nosso &lt;em&gt;callback&lt;/em&gt;, mas para isso devemos passar o mesmo parâmetro da rota como parâmetro do nosso &lt;em&gt;callback&lt;/em&gt;, como mostrado na mesma linha 5. Na linha 6 apenas retornamos como saída o valor passado na rota. Por exemplo, se acessarmos no navegador o seguinte link &lt;code&gt;http://url_de_minha_app.com.br/users/Nando&lt;/code&gt;, teríamos como saída:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Olá, Nando&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Se você deseja passar mais parâmetros, apenas separe os mesmos com &lt;code&gt;/&lt;/code&gt;, como mostrado abaixo:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
...
$app-&amp;gt;get(&#39;users/{name}/{email}&#39;, function($name, $email){
    //Sua_logica_aqui
});
...
&lt;/pre&gt;

&lt;h2 id=&#34;valores-default&#34;&gt;Valores Default&lt;/h2&gt;

&lt;p&gt;Se você deseja definir um valor &lt;em&gt;default&lt;/em&gt; para seus parâmetros de rota, é muito simples. O Silex possui um método para isso. Através do método &lt;code&gt;value()&lt;/code&gt; você definirá valores padrões para estes parâmetros, e quando acessar suas rotas sem informar nenhum valor esperado, entra em ação os valores definidos por padrão. Para usar o método &lt;code&gt;value()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
...
$app-&amp;gt;get(&#39;users/{name}&#39;, function($name){
    return &#39;Olá, &#39; . $name;
})
-&amp;gt;value(&#39;name&#39;, NULL);
...
&lt;/pre&gt;

&lt;p&gt;Na linha 6 defino o método &lt;code&gt;value&lt;/code&gt; que têm como primeiro parâmetro o nome definido para o parâmetro da rota, e o segundo parâmetro do método &lt;code&gt;value&lt;/code&gt; recebe o valor &lt;em&gt;default&lt;/em&gt; que você desejar. Sempre que acessarmos a rota &lt;em&gt;users&lt;/em&gt; sem definir nenhum valor após a mesma, nosso parâmetro &lt;code&gt;name&lt;/code&gt; receberá o valor NULL. A partir daí você fica livre para tratar como quiser a lógica da sua aplicação.&lt;/p&gt;

&lt;h2 id=&#34;o-método-convert&#34;&gt;O método convert()&lt;/h2&gt;

&lt;p&gt;Se você deseja garantir o tipo do valor passado ou apenas deseja conversões simples com estes valores, o método &lt;code&gt;convert&lt;/code&gt; foi feito para tal operação. Para utilizá-lo:&lt;/p&gt;

&lt;pre&gt;...
$app-&amp;gt;get(&#39;users/{name}&#39;, function($name){
    return &#39;Olá, &#39; . $name;
})
-&amp;gt;value(&#39;name&#39;, NULL)
-&amp;gt;convert(&#39;name&#39;, function($name){ return (string) $name; });
...
&lt;/pre&gt;

&lt;p&gt;O método recebe 2 parâmetros: o primeiro é o nome do parâmetro informado na rota e o segundo um &lt;em&gt;callback&lt;/em&gt;, onde realizamos nossas conversões. Neste exemplo, garanto apenas que os valores passados na rota &lt;code&gt;users&lt;/code&gt; serão de fato do tipo &lt;code&gt;string&lt;/code&gt;, como mostrado na linha 6 do código acima.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Vimos como é simples trabalhar com rotas dinâmicas em nossas aplicações Silex, e com os métodos auxiliares nossa aplicação de rotas fica ainda mais robusta.&lt;/p&gt;

&lt;p&gt;Na sessão &lt;a href=&#34;http://silex.sensiolabs.org/doc/usage.html&#34; target=&#34;_blank&#34;&gt;&amp;#8216;Usage&amp;#8217;&lt;/a&gt; da documentação do Silex, você encontrará mais opções além das mostradas aqui.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nth-child() e calc() – Uma proposta para o abandono de frameworks de grids responsivos</title>
      <link>https://tableless.github.io/hugo-public/nth-child-calc-responsivos/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/nth-child-calc-responsivos/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Apesar da adoção do _Tableless _para construção de layouts o conceito de tabela ainda persiste através de inúmeros &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Além da semântica, o conceito &lt;em&gt;Tableless&lt;/em&gt; prega, sempre que possível, levar a responsabilidade do layout para o CSS. O problema dos &lt;em&gt;frameworks&lt;/em&gt; CSS focados em &lt;em&gt;grids&lt;/em&gt; é que a especificação do layout continua dentro do HTML, descrita através de classes CSS, ancoradas diretamente aos elementos HTML, e de forma intrusiva, ou seja, os elementos &lt;em&gt;&lt;table&gt;&lt;/em&gt; antigamente utilizados foram substituídos por elementos &lt;em&gt;&lt;div class=&amp;#8221;col-&amp;#8220;&gt;&lt;/em&gt; para a criação do layout.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-49871 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/gridLayout.png&#34; alt=&#34;Exemplo de Grid Layout&#34; width=&#34;521&#34; height=&#34;354&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enquanto a especificação &amp;#8220;&lt;a href=&#34;http://www.w3.org/TR/css3-grid-layout/&#34; target=&#34;_blank&#34;&gt;CSS Grid Layout Module&lt;/a&gt;&amp;#8221; ainda está no forno, proponho uma alternativa simples aos &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos, através da dupla dinâmica &lt;em&gt;&lt;strong&gt;nth-child()&lt;/strong&gt;&lt;/em&gt; e &lt;em&gt;&lt;strong&gt;calc()&lt;/strong&gt;&lt;/em&gt; presentes no CSS3, e que são suportadas pelos navegadores modernos, inclusive o IE9 (veja mais opções de compatibilidade &lt;a href=&#34;http://caniuse.com/#search=CALC&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://caniuse.com/#search=nth-child&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;). Para um rápido entendimento destes recursos também confira estes artigos: &lt;a href=&#34;http://tableless.com.br/nth-child/&#34;&gt;http://tableless.com.br/nth-child/&lt;/a&gt; e &lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34;&gt;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;exemplo-de-formulário&#34;&gt;Exemplo de formulário&lt;/h2&gt;

&lt;p&gt;Antes de partimos para o CSS, sempre que possível, precisamos usar elementos HTML5 semânticos, atributos WAI-ARIA, entre outros padrões de acessibilidade. Para este exemplo, o uso dos elementos de entradas de dados seguirão as técnicas preconizadas pelo eMAG 3.1 (ver &lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34;&gt;http://emag.governoeletronico.gov.br/&lt;/a&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Para cada elemento de entrada de dados presente na estrutura &lt;em&gt;form -&amp;gt; fieldset&lt;/em&gt; o seguinte padrão será seguido:&lt;/p&gt;

&lt;pre&gt;&lt;span style=&#34;line-height: 1.5;&#34;&gt;&amp;lt;label&amp;gt;
    &amp;lt;span&amp;gt;XXX:&amp;lt;/span&amp;gt;
    &amp;lt;input type=&#34;text&#34; value=&#34;&#34;&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Agora podemos aplicar o seguinte CSS para todos os elementos &lt;em&gt;&lt;label&gt;&lt;/em&gt; presentes neste padrão.&lt;/p&gt;

&lt;pre&gt;form fieldset &amp;gt; label {
    display: block;
    float: left;
    width: calc(100% - 10px);
    height: 55px;
    margin-top: 10px;
    margin-right: 10px;
}
form fieldset label &amp;gt; input {
    float: left;
}
label &amp;gt; input {
    display: block;
    width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Por termos utilizado o &lt;em&gt;margin-right&lt;/em&gt; com 10px, este valor foi contabilizado na largura do &lt;em&gt;label&lt;/em&gt; (uso da função &lt;em&gt;calc&lt;/em&gt;) com a finalidade de que sua margem não ultrapasse os limites do contêiner. Isto foi feito para que possamos alterar o layout de uma coluna para múltiplas colunas diretamente pelo CSS. Com este estilo, cada campo de entrada de dados aparecerá disposto como uma lista, e se adaptará a largura do contêiner.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49865 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário&#34; width=&#34;658&#34; height=&#34;532&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O próximo passo é poder criar mais de uma &amp;#8220;coluna&amp;#8221;, para que o campo Código e Nome fiquem na mesma &amp;#8220;linha&amp;#8221; quando o tamanho da tela for grande. O campo Código terá uma largura fixa de 80px e o campo Nome preencherá o restante do espaço do contêiner descontando a largura do campo Código juntamente com a margem de 10px dos dois &lt;em&gt;labels&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49869 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário Responsivo&#34; width=&#34;789&#34; height=&#34;537&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com estes recursos podemos alterar o layout da página HTML diretamente pelo CSS sem que a estrutura do layout fique no próprio HTML. Além de criar colunas que se adaptam a largura do contêiner, é possível criar colunas com tamanhos fixos, evitando também o uso de classes CSS, que só é encorajado quando for realmente necessário.&lt;/p&gt;

&lt;p&gt;O código fonte completo e a &lt;em&gt;Demo&lt;/em&gt; deste exemplo encontra-se em &lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34;&gt;http://codepen.io/rogeriodegoiania/pen/GJQmzb&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7 funções essenciais do PHP que você deve conhecer</title>
      <link>https://tableless.github.io/hugo-public/7-funcoes-essenciais-php-que-voce-deve-conhecer/</link>
      <pubDate>Fri, 03 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/7-funcoes-essenciais-php-que-voce-deve-conhecer/</guid>
      <description>

&lt;h2 id=&#34;range&#34;&gt;range()&lt;/h2&gt;

&lt;p&gt;Geralmente ao se fazer um &amp;#8220;&lt;em&gt;loop&lt;/em&gt;&amp;#8220;, utiliza-se o _while _ou &lt;em&gt;for&lt;/em&gt;. Ambas estruturas são ligeiramente &amp;#8220;&lt;em&gt;feias&lt;/em&gt;&amp;#8221; ao visualizar o código. Uma boa alternativa é utilizar o &lt;em&gt;foreach&lt;/em&gt;. Mas como fazer uma repetição, se o &lt;em&gt;foreach&lt;/em&gt; trabalha com um &lt;em&gt;array&lt;/em&gt; existente?&lt;/p&gt;

&lt;p&gt;No exemplo vamos fazer um &lt;em&gt;loop&lt;/em&gt; de 5 posições, começando do número 1.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
foreach (range(1,5) as $ordem)
{
     print(&#39;Ordem : &#39;.$ordem.&#39;&amp;lt;br&amp;gt;&#39;);
}
//Resultado
//Ordem: 1
//Ordem: 2
//Ordem: 3
//Ordem: 4
//Ordem: 5
&lt;/pre&gt;

&lt;h2 id=&#34;array-unique&#34;&gt;array_unique()&lt;/h2&gt;

&lt;p&gt;Diversas vezes nos deparamos com um &lt;em&gt;array&lt;/em&gt; e valores duplicados. Em uma experiência pessoal, trabalhei na criação de um sistema composto por uma divisão hierárquica entre setores. Nos relatórios, os usuários informavam diversos setores ao realizar os filtros. Quando os resultados eram filtrados no banco de dados, diversos códigos de setores vinham duplicados. Com isso, as _queries _do banco ficavam maiores e mais lentas.&lt;/p&gt;

&lt;p&gt;Com a função _array&lt;em&gt;unique()&lt;/em&gt; resolvi meu problema. Veja o exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$array = array (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;a&#39;);
$unique = array_unique ($array);

foreach ($unique as $letra)
{
     print(&#39;Letra: &#39;.$letra.&#39;&amp;lt;br&amp;gt;&#39;);
}

//Resultado
//Letra: a
//Letra: b
//Letra: c
//Letra: d
&lt;/pre&gt;

&lt;h2 id=&#34;in-array&#34;&gt;in_array()&lt;/h2&gt;

&lt;p&gt;Esta função é realmente útil para verificar se existe um determinado valor em um &lt;em&gt;array&lt;/em&gt;. Veja o exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$array = array (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;);

if (in_array(&#39;a&#39;,$array))
{
   print(&#39;O valor está no array&#39;);
}
else
{
   print(&#39;Não está no array&#39;);
}

//Resultado: O valor está no array
&lt;/pre&gt;

&lt;h2 id=&#34;print-r&#34;&gt;print_r()&lt;/h2&gt;

&lt;p&gt;Uma mão na roda em momentos que você deseja depurar a estrutura de um determinado &lt;em&gt;array&lt;/em&gt; ou objeto no PHP. Em meus códigos, utilizo esta função sempre acompanhada da tag &lt;em&gt;pre&lt;/em&gt; do HTML, para assim exibir de forma mais amigável a estrutura do &lt;em&gt;array&lt;/em&gt; ou objeto. Veja o exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$array = array (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;);

print_r($array);

//Resultado: Array ( [0] =&amp;gt; a [1] =&amp;gt; b [2] =&amp;gt; c [3] =&amp;gt; d )
&lt;/pre&gt;

&lt;h2 id=&#34;implode&#34;&gt;implode()&lt;/h2&gt;

&lt;p&gt;Juntar os valores de um determinado &lt;em&gt;array&lt;/em&gt; e separá-los em uma determinada &lt;em&gt;string&lt;/em&gt;. Utilizo muito esta função para exibir listas de nomes separados por vírgula, ou para criar cláusula &lt;em&gt;IN&lt;/em&gt; no MySQL. Veja o exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$array = array (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;);

print(implode(&#39;,&#39;,$array));

//Resultado: a,b,c,d
&lt;/pre&gt;

&lt;h2 id=&#34;explode&#34;&gt;explode()&lt;/h2&gt;

&lt;p&gt;Esta função é o oposto da função &lt;em&gt;implode&lt;/em&gt;. Nela você informa uma &lt;em&gt;string&lt;/em&gt; e define qual separador o PHP deverá usar para dividí-la e gerar um &lt;em&gt;array&lt;/em&gt; para cada espaço dividido. Veja o exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$string = &#39;O PHP é bacana.&#39;;

$array = explode (&#39; &#39;,$string);

print_r($array);

//Resultado: Array ( [0] =&amp;gt; O [1] =&amp;gt; PHP [2] =&amp;gt; é [3] =&amp;gt; bacana. )
&lt;/pre&gt;

&lt;h2 id=&#34;checkdate&#34;&gt;checkdate()&lt;/h2&gt;

&lt;p&gt;Função muito útil do PHP para validar se uma determinada data está correta. Evita de inserirmos datas incorretas no banco de dados, acarretando erros de sintaxe, datas zeradas ou datas incorretas. Veja o exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$dia = 13;
$mes = 13;
$ano = 2015;
if (checkdate($mes,$dia,$ano))
{
    print(&#39;Data correta&#39;);
}
else
{
    print(&#39;Data incorreta&#39;);
}
//Resultado: Data incorreta
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Porque o Codeigniter ainda é uma boa opção</title>
      <link>https://tableless.github.io/hugo-public/porque-codeigniter-ainda-e-uma-boa-opcao/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/porque-codeigniter-ainda-e-uma-boa-opcao/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-codeigniter&#34;&gt;O que é Codeigniter?&lt;/h2&gt;

&lt;p&gt;O &lt;strong&gt;Codeigniter&lt;/strong&gt; é um &lt;em&gt;framework&lt;/em&gt; para desenvolvimento web baseado na arquitetura MVC. Se você não sabe o que significa MVC ou não entende bem o seu funcionamento poderá encontrar maiores informações &lt;a href=&#34;http://tableless.com.br/mvc-afinal-e-o-que/&#34; target=&#34;_blank&#34;&gt;neste post&lt;/a&gt; do Tableless.&lt;/p&gt;

&lt;p&gt;Este &lt;em&gt;framework&lt;/em&gt; apresenta uma estrutura que lhe permite de forma rápida fazer uso de bibliotecas para ganhar tempo e aproveitar a reutilização de código. Entenda este &lt;em&gt;framework&lt;/em&gt; como um kit de ferramentas que tornarão seu ambiente de desenvolvimento ainda mais rápido.&lt;/p&gt;

&lt;h2 id=&#34;porque-o-codeigniter-ainda-é-uma-boa-opção&#34;&gt;Porque o Codeigniter ainda é uma boa opção?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Possui uma excelente documentação: considere documentação imprescindível para qualquer ferramenta de desenvolvimento que você usar. Sem documentação suficiente você sofre muito para fazer coisas que deveriam ser simples;&lt;/li&gt;
&lt;li&gt;Permite de forma não tão complexa ter um &lt;em&gt;engine&lt;/em&gt; segura;&lt;/li&gt;
&lt;li&gt;Não precisa instalar \o/;&lt;/li&gt;
&lt;li&gt;Você não terá problemas para estender classes se precisar (e acredite, você vai precisar 😀 );&lt;/li&gt;
&lt;li&gt;Não precisa se preocupar tanto com pré-requisitos em servidores;&lt;/li&gt;
&lt;li&gt;É muito leve em relação a outros &lt;em&gt;frameworks&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Não será descontinuado tão cedo. O medo já passou;&lt;/li&gt;
&lt;li&gt;Mantém-se atualizado;&lt;/li&gt;
&lt;li&gt;Está entre os &lt;em&gt;frameworks&lt;/em&gt; PHP favoritos para 2015 (&lt;a title=&#34;frameworks PHP favoritos 2015&#34; href=&#34;http://icl.googleusercontent.com/?lite_url=http://blog.a-way-out.net/blog/2015/03/27/php-framework-benchmark/&amp;ei=UJ3_QIlA&amp;lc=pt-BR&amp;s=1&#34; target=&#34;_blank&#34;&gt;veja aqui&lt;/a&gt;);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se você nunca usou o Codeigniter, veja dicas e técnicas de utilização hackeando a &lt;a title=&#34;codeigniter&#34; href=&#34;http://www.codeigniter.com/&#34; target=&#34;_blank&#34;&gt;documentação aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;faça-seu-hello-world-com-o-codeigniter&#34;&gt;Faça seu Hello World com o Codeigniter&lt;/h2&gt;

&lt;p&gt;Acesse a página inicial do Codeigniter para fazer &lt;a href=&#34;http://www.codeigniter.com/download&#34; target=&#34;_blank&#34;&gt;download&lt;/a&gt; da versão atual do &lt;em&gt;framework&lt;/em&gt;. A versão utilizada para a realização deste post é a 3.0.&lt;/p&gt;

&lt;p&gt;Para que você possa fazer uso do &lt;em&gt;framework&lt;/em&gt; será necessário a utilização de um servidor local. Você pode usar, por exemplo, ferramentas como o &lt;a href=&#34;https://www.apachefriends.org/pt_br/index.html&#34; target=&#34;_blank&#34;&gt;Xampp&lt;/a&gt;, que possui Apache, PHP e MySql disponíveis.&lt;/p&gt;

&lt;p&gt;Após isto, descompacte o conteúdo do arquivo que você baixou no site do Codeigniter e mova o seu conteúdo para a pasta do servidor, no caso do Xampp (usando o Windows) ficaria em C:\xampp\htdocs.&lt;/p&gt;

&lt;p&gt;Colocando a pasta do Codeigniter neste local será possível visualizar uma estrutura como a que segue:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-49601 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/estrutura-inicial-codeigniter.png&#34; alt=&#34;estrutura do codeigniter&#34; width=&#34;688&#34; height=&#34;273&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dentro da pasta &lt;em&gt;application&lt;/em&gt;, ficarão todos os arquivos importantes para o desenvolvimento da sua aplicação.  Na pasta &lt;em&gt;system&lt;/em&gt; ficam o que podemos chamar de &amp;#8220;&lt;em&gt;kernel&lt;/em&gt;&amp;#8221; do &lt;em&gt;framework&lt;/em&gt;, mas isso é assunto para outro momento. 😀&lt;/p&gt;

&lt;p&gt;Dentro da pasta &lt;em&gt;application&lt;/em&gt; você encontrará duas pastas importantes para o nosso &amp;#8220;&lt;em&gt;Hello World&lt;/em&gt;&amp;#8220;, sendo elas: a pasta &lt;em&gt;controller&lt;/em&gt; e a pasta &lt;em&gt;views&lt;/em&gt;. Novamente, se você tem dúvidas sobre a nomenclatura destas pastas e como funciona a arquitetura MVC, &lt;a href=&#34;http://tableless.com.br/mvc-afinal-e-o-que/&#34; target=&#34;_blank&#34;&gt;este post&lt;/a&gt; pode te auxiliar.&lt;/p&gt;

&lt;p&gt;Com o Apache inicializado, acesse o endereço: &lt;strong&gt;&lt;em&gt;&lt;a href=&#34;http://localhost/CodeIgniter-3.0.0/&#34;&gt;http://localhost/CodeIgniter-3.0.0/&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. Será possível ver seu Codeigniter funcionando conforme a imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/screenshot-localhost-2015-06-17-10-47-23.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49602 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/screenshot-localhost-2015-06-17-10-47-23.png&#34; alt=&#34;Tela - Seja bem vindo ao Codeigniter&#34; width=&#34;1512&#34; height=&#34;394&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao acessar a pasta &lt;em&gt;controller&lt;/em&gt; será possível visualizar o controlador responsável pela exibição desta tela. Dentro do arquivo também será possível verificar qual a _view_ chamada para exibir os dados na tela.&lt;/p&gt;

&lt;p&gt;Acesse a &lt;em&gt;view&lt;/em&gt; existente (na pasta &lt;em&gt;views&lt;/em&gt;) e você poderá alterar o conteúdo HTML a ser exibido, como no exemplo abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/screenshot-localhost-2015-06-17-10-51-21.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-49603 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/screenshot-localhost-2015-06-17-10-51-21.png&#34; alt=&#34;Conteúdo HTML Hello World com Codeigniter&#34; width=&#34;302&#34; height=&#34;141&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao acessar os arquivos conforme explicado neste post você verá como é fácil a realização deste exemplo. Até breve \o/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rumo ao hexa(decimal)</title>
      <link>https://tableless.github.io/hugo-public/rumo-ao-hexadecimal/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/rumo-ao-hexadecimal/</guid>
      <description>&lt;p&gt;Quantas vezes na sua vida você já se deparou com um código hexadecimal? A gente sabe que seu Command-C tá em um relacionamento sério com ele. Mas afinal, como que um punhado de letras e números representam essa tralharada de cores (ou o que quer que seja) que nós vemos por aí nos dispositivos digitais?&lt;/p&gt;

&lt;p&gt;Existe um artigo ótimo no Tableless explicando tudo o que você precisa saber sobre cor &lt;a href=&#34;http://tableless.com.br/sobre-cor-e-webdesign/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;. Sério, vai lá, mas depois volta aqui.&lt;/p&gt;

&lt;p&gt;O hexadecimal é um sistema com base 16. Não ajudou em nada? Então vamos voltar para os tempos de escola e relembrar como funciona o sistema decimal que utilizamos todos os dias. Caso você se perguntou “mas por que o decimal?”. Porque nós temos dez dedos e fica relativamente fácil de realizar os cálculos. Foi o que os hindus disseram lá pelo ano 400 AC.&lt;/p&gt;

&lt;p&gt;Se eu lhe mostrar qualquer número, tenho certeza que você consegue identificar num piscar de olhos. O número &lt;strong&gt;2015, &lt;/strong&gt;por exemplo. Você não teve nenhum esforço e leu “na sua cabeça” &lt;em&gt;dois mil e quinze&lt;/em&gt;, certo? Legal. Vamos esmiuçar como chegamos a essa conclusão. O sistema decimal trabalha com base 10. De novo esse negócio de base? Vamos lá:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sistema decimal:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como sugere o nome, esse sistema trabalha com 10 símbolos: 0, 1, 2, 3, 4, 5, 6, 7, 8 e 9.&lt;/p&gt;

&lt;p&gt;Você provavelmente tem em sua memória lembranças de alguns conceitos como: unidade, dezena, centena e milhar.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-49638 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/unidade.jpg&#34; alt=&#34;valor decimal&#34; width=&#34;229&#34; height=&#34;69&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cada algarismo possui a base 10 elevada a uma potência de valor crescente, começando em zero da direita pra esquerda. Vemos que o primeiro algarismo posicionado à direita é a representação da unidade. A base é 10 e a potência é 0. Qualquer número elevado a zero o resultado é 1. Como eu sei que você sabe trabalhar com potências, não vou ficar explicando o que é dez ao quadrado, certo?&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49645&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/101.jpg&#34; alt=&#34;base dez&#34; width=&#34;227&#34; height=&#34;105&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora é só multiplicar o resultado da base com o algarismo em questão. Voltando ao exemplo da unidade, temos o seguinte: 1 x 5 = 5. A lógica se aplica para todos os outros.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/10-resultado.jpg&#34;&gt;&lt;img class=&#34; size-full wp-image-49622 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/10-resultado.jpg&#34; alt=&#34;sistema decimal&#34; width=&#34;215&#34; height=&#34;235&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Olha lá o número em que nós chegamos somando todos os resultados: 5 + 10 + 0 + 2000 = 2015. Bacana, né? Então vamos para o próximo.&lt;/p&gt;

&lt;p&gt;Antes de chegar no sistema hexadecimal temos que passar pelo sistema binário. Mas já que recapitulamos o sistema decimal, vai ser facinho entender o binário, fique tranquilo.&lt;/p&gt;

&lt;p&gt;Não tenho dúvidas que você já ouviu o termo bit. Até porque você está lendo esse artigo através da web e teve que contratar um serviço de internet para isso, seja ele qual for. Vamos supor que tenha sido um que forneça a velocidade de download de 30Mbps. Tá vendo esse “b” aí no meio? Ele significa bit, no caso: 30 Mega bits por segundo, quando falamos de bit o “b” é em caixa baixa. Caso você ache que escreveu errado a vida toda, até porque se você fala para alguém que seu arquivo tem 30MB, não está errado. Você está se referindo a 30 Mega Bytes, aí sim o “B” é em caixa alta.&lt;/p&gt;

&lt;p&gt;Quer dizer que se eu tenho uma velocidade de 30Mbps eu consigo baixar um arquivo de 30MB em 1 segundo? Calma lá, já vamos chegar nisso.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sistema Binário:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O significado de bit é &lt;strong&gt;Bi&lt;/strong&gt;nary Digi&lt;strong&gt;t&lt;/strong&gt; (Dígito Binário), serve para medir dados de informação computacional. Utilizado em computadores por causa dos transistores, que são reunidos em circuitos e possibilitaram a criação de micro computadores, que substituíram aqueles que ocupavam uma casa inteira, literalmente. Os transistores controlam o fluxo de corrente elétrica, podendo estar ligados &lt;strong&gt;ou&lt;/strong&gt; desligados, quer dizer, passando corrente elétrica ou não, sendo assim, duas opções. Já que são duas opções, utilizamos o sistema &lt;strong&gt;bi&lt;/strong&gt;nário.&lt;/p&gt;

&lt;p&gt;Quer dizer que o computador que está na minha mesa, o tablet que está na minha mochila e o celular que está no meu bolso são compostos por transistores? Sim, aliás, um monte deles.&lt;/p&gt;

&lt;p&gt;Para que não pareça muito confuso, vamos associar o transistor a uma lâmpada. Se não há passagem de corrente elétrica a lâmpada está desligada, se há, ela está ligada. No sistema binário a lâmpada é um bit e a representação do “desligado” é o dígito &lt;strong&gt;0&lt;/strong&gt; e do “ligado” o &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49630&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/lampada_animada.gif&#34; alt=&#34;lâmpada representando um bit&#34; width=&#34;104&#34; height=&#34;236&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O que temos de informação nos computadores são combinações desses dois dígitos. Cada caractere que eu escrevo agora, por exemplo, contém alguns bits para ser armazenado. Os bits são colocados em grupos de oito e são chamados de Byte.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49621&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/8bits1byte.jpg&#34; alt=&#34;ilustração de lâmpadas representando um bit&#34; width=&#34;579&#34; height=&#34;165&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos voltar à história da conexão de internet de 30Mbps. O que queremos saber é quantos Bytes, e não bits por segundo nossa conexão realiza o download de arquivos. Para isso basta dividir por 8. No caso: &lt;sup&gt;30&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt; = 3.75. Com uma conexão de 30Mb por segundo conseguimos baixar no máximo até 3.75MB por segundo. Claro que esse número varia por n fatores externos. Ficando claro que não conseguiríamos baixar o arquivo de 30MB em apenas 1 segundo.&lt;/p&gt;

&lt;p&gt;Vimos que no sistema &lt;strong&gt;dec&lt;/strong&gt;imal a base é 10, aqui no sistema &lt;strong&gt;bi&lt;/strong&gt;nário a base é 2. A lógica é a mesma.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49620&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/2.jpg&#34; alt=&#34;valores da base dois&#34; width=&#34;384&#34; height=&#34;49&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Com o tempo você acaba decorando esses valores. Assim como fizemos com o sistema decimal, vamos esmiuçar também o sistema binário. Nesse exemplo, vamos realizar a conversão de um número no sistema binário para o sistema decimal.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49623&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/binario-decimal.jpg&#34; alt=&#34;conversão de binário para decimal&#34; width=&#34;512&#34; height=&#34;193&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Legal, né? O número 01011010 em binário é o número 90 em decimal. Vamos fazer o processo inverso agora, converter o número decimal 90 para o sistema binário. Para isso, nós vamos realizar divisões sequenciais sendo que o divisor é o 2, por causa da base 2.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49627&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/divisoes-sequenciais.jpg&#34; alt=&#34;converter decimal com divisões sequenciais&#34; width=&#34;322&#34; height=&#34;235&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Quando o resto for 0 ou 1 nós paramos por aí. Repare que nessas divisões não nos interessam as casas decimais. Quando chegamos ao quociente 1, nós paramos a divisão. A leitura do número binário gerado pelas divisões é da direita pra esquerda, e o valor que atingimos foi: 1011010. Se você observou atentamente, viu que nosso número binário está com apenas 7 dígitos, porque o número decimal 90 apenas requer 7 bits para ser armazenado. Não se incomode, se quiser representá-lo como 8 bits basta colocar um 0 à esquerda dele, resultando em: &lt;strong&gt;01011010&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ah, mas eu não gosto de fazer conta. Tudo bem, vamos fazer uma abordagem mais lúdica. Vamos supor que nós temos 90 dinheiros, uma moeda que eu inventei, representado em apenas uma cédula. O que gera uma dificuldade imensa para jogar no fliper, já que precisamos de trocado. Vamos na padaria e pedimos para que o atendente troque esses 90 dinheiros em cédula por 90 dinheiros em moedas.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49626&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/dinheiro.jpg&#34; alt=&#34;ilustração das moedas e cédula&#34; width=&#34;475&#34; height=&#34;119&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Claro que ele não vai te dar uma moeda de 128 dinheiros, até porque é muito mais do que os 90 dinheiros em cédula que temos. Na nossa conversão binária a moeda 128 não vai ser utilizada e a representamos com o dígito 0. E a moeda 64, podemos utilizá-la? Claro, qualquer valor em moeda que seja igual ou menor do que o valor em cédula. Se utilizamos a moeda de 64, no binário atribuímos o dígito 1. A lógica se repete para o resto da conta, sendo:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49625&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/dinheiro-conta.jpg&#34; alt=&#34;tabela com cédula e valores em moedas&#34; width=&#34;340&#34; height=&#34;566&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como já acabamos de trocar nosso dinheiro e não vamos utilizar a moeda de valor 1 colocamos o valor 0 no binário.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49624&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/dinheiro-binario.jpg&#34; alt=&#34;decimal para binário ilustrado&#34; width=&#34;505&#34; height=&#34;207&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Se você está se perguntando qual o valor máximo que conseguimos armazenar em 8 bits, aí vai: 11111111 (já que queremos o valor máximo, todos os bits tem que estar ligados), agora é só somar todos os valores dos número elevados: 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 = 255.&lt;/p&gt;

&lt;p&gt;Acrescentamos o número zero nas possibilidades, resultando 256 (0 a 255) variações de cor, por exemplo.&lt;/p&gt;

&lt;p&gt;Se você leu o artigo recomendado no começo do post, já deve saber que os dispositivos digitais trabalham com o sistema de cor RGB, consistindo basicamente em uma emissão de três luzes diferentes, que quando combinadas em valores específicos configuramos a cor desejada. O zero representa total ausência de luz. Temos níveis intermediários e, por fim, chegamos na emissão máxima de luz com o valor 255.&lt;/p&gt;

&lt;p&gt;O sistema RGB significa: Red (vermelho), Green (verde) e Blue (azul). São as cores primárias que juntas no sistema aditivo trabalham melhor no ambiente digital.&lt;/p&gt;

&lt;p&gt;Em praticamente qualquer software de computação gráfica você vai encontrar uma paleta de cores. Nela você terá alguma coisa similar a isso:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49632&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/rgb.jpg&#34; alt=&#34;paleta rgb&#34; width=&#34;320&#34; height=&#34;71&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dá pra ver como as coisas começam a se encaixar? OIha aí novamente os valores 0 e 255. Quer dizer, sabemos que 0 a 255 (256) é a capacidade de armazenamento de 8 bits (1 Byte). Se temos o valor zero, não temos emissão de luz do canal de cor específico. Se os três canais de cor estiverem em zero, sabemos que no sistema digital é a representação da cor preta, porque nenhum canal está emitindo luz.&lt;/p&gt;

&lt;p&gt;Com a adição máxima de todos os canais de cor (todos em 255) temos a cor branca, a cor luz como é chamada no sistema RGB. Como deve ter imaginado, para saber quantas cores o sistema RGB suporta é só multiplicar pela quantidade de canais: 256 x 256 x 256 = 16.777.216. Quer dizer que imagens de 8bpc (8 bits por canal) tem tudo isso aí de cor, em qualquer dispositivo digital.&lt;/p&gt;

&lt;p&gt;Se você é daqueles que gosta de saber sempre o porquê das coisas, tenho uma coisa simples e interessante pra te falar. Uma imagem digital bitmap é composta por pixels (menor unidade gráfica, como se fossem tijolos que compõem as paredes da sua casa), até aí tranquilo. Como vimos, as combinações dos três canais formam as cores que nós desejamos. Numa imagem digital é como se tivéssemos três folhas vegetais sobrepostas, cada folha representando um canal de cor. Vamos supor que esse pixel aí embaixo seja um dos vários que compõem uma imagem qualquer:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49631&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/pixel.jpg&#34; alt=&#34;pixel e valores em seus canais&#34; width=&#34;204&#34; height=&#34;196&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pra compor a cor laranja desse único pixel, em cada canal de cor teremos variações de valores para que quando combinadas formem essa informação. Como cada canal tem 8 bits e temos três canais, fica claro o porquê que chamamos de imagens de 24 bits. E também agora é nítido que precisamos de 3 Bytes para armazenar as informações de um pixel só.&lt;/p&gt;

&lt;p&gt;Se nossa imagem tiver a dimensão de 600&amp;#215;400, endende-se que temos 600 pixels de largura e 400 pixels de altura, totalizando 240.000 pixels. Como cada um deles utiliza 3 Bytes para ser armazenado, fazemos a multiplicação: 240.000 x 3 = 720.000 Bytes. Agora, ninguém vai chegar numa reunião e falar que a imagem do projeto tem 720.000 Bytes, né? Bom, 1024 Bytes (2 elevado a 10ª potência) equivale a 1 Kilobyte. Dividindo 720.000 por 1024 temos o valor em KB: 720.000 / 1024 = 703,1 KB.&lt;/p&gt;

&lt;p&gt;Como já conhecemos o sistema binário podemos finalmente trabalhar com o sistema hexadecimal.&lt;/p&gt;

&lt;p&gt;Como vimos até agora, o sistema decimal trabalha com a base 10 e o sistema binário com a base 2. Para esses dois sistemas, já está claro o porquê.&lt;/p&gt;

&lt;p&gt;O sistema hexadecimal utiliza a base 16, agora vamos ver do que se trata.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sistema hexadecimal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amiiigo, você tá cansado de ouvir o Galvão falar de hexa, e sabe que significa seis. Nesse caso, são seis as letras utilizadas: A a F. O decimal você já sabe que são dez símbolos: 0 a 9. Isso mesmo o que você pensou: 6 + 10 = 16.&lt;/p&gt;

&lt;p&gt;Não se assuste achando temos algo complicado pela frente, na verdade muito pelo contrário. O sistema hexadecimal veio pra facilitar a utilização do que já conhecemos, o sistema binário.&lt;/p&gt;

&lt;p&gt;Como sabemos que toda estrutura computacional dos sistemas utiliza código binário para representar suas informações, utilizamos o sistema hexadecimal justamente para compactar esse código binário e facilitar sua aplicação no dia a dia.&lt;/p&gt;

&lt;p&gt;Cada símbolo em hexadecimal consegue representar quatro dígitos no sistema binário, o que seria 4 bits. A tabela abaixo mostra a representação de mesmos valores em sistemas diferentes.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49639&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/tabela.jpg&#34; alt=&#34;tabela decimal, binário e hexadecimal&#34; width=&#34;473&#34; height=&#34;621&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Por enquanto não parece fazer muito sentido apenas olhando essa tabela, mas com certeza você está acostumado com o tripleto hexadecimal. Sabe aquele carinha que você copia do Photoshop e cola no seu CSS? Então, é o tripleto. Como foi explicado acima, um símbolo no sistema hexadecimal armazena 4 bits de informação. Porém, já vimos também que a cor no sistema digital utiliza 8 bits por canal. Então vamos lá: 4 + 4 = 8. Consequentemente para representar um canal de cor do sistema digital precisamos de dois símbolos em hexadecimal. Como sabemos que temos três canais de cor, precisamos exatamente do que você pensou: tripleto hexadecimal. Coloquei abaixo o código hexadecimal que representa a cor branca, só por já estarem acostumados com ele.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49633&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/tripleto.jpg&#34; alt=&#34;tripleto hexadecimal&#34; width=&#34;361&#34; height=&#34;145&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bom, não precisa nem pensar pra saber quanto que esse código hexadecimal vale em binário, é só bater o olho na tabela, mas de qualquer forma, vamos lá:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/hexa-binario.jpg&#34;&gt;&lt;img class=&#34; wp-image-49692 size-full aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/hexa-binario.jpg&#34; alt=&#34;&#34; width=&#34;505&#34; height=&#34;209&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nós já aprendemos a converter do sistema binário para o decimal, mas de qualquer forma vamos finalizar:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-full wp-image-49628&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/final.jpg&#34; alt=&#34;conversão binário para decimal&#34; width=&#34;512&#34; height=&#34;192&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora vai lá no Photoshop e coloca na paleta de cor o valor 255 em cada canal: R, G e B. O resultado é a cor branca, que já sabemos o porquê. O hexadecimal é o tal do #FFFFFF.&lt;/p&gt;

&lt;p&gt;O único detalhe que temos que prestar atenção é que se pegarmos um valor hexadecimal, como por exemplo o 5, na tabela vemos que em binário ele vale 101, isso porque apenas 3 bits são necessários para representá-lo. Para fazer a conversão, cada valor hexadecimal tem que ser representado em 4 bits. No caso do valor hexadecimal 5 é só acrescentar um 0 antes de tudo, então ao invés de deixar 101, deixamos ****101. Sempre preenchemos com zero à esquerda e não à direita.&lt;/p&gt;

&lt;p&gt;Se está acostumado a escrever seu código hexadecimal dessa forma no seu CSS: #FFF, não tem problema. Na verdade isso é a abreviação do tripleto hexadecimal. Quando os valores de cada canal são iguais, podemos abreviá-lo.&lt;/p&gt;

&lt;p&gt;Pronto! Agora faça um teste você mesmo com as conversões. 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aprendendo JavaScript online</title>
      <link>https://tableless.github.io/hugo-public/aprendendo-javascript-online/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/aprendendo-javascript-online/</guid>
      <description>

&lt;p&gt;Outro dia eu estava tentando me lembrar de um site bem simpático e simples para aprender JavaScript online. Eu não me lembrava do nome do site, nem o nome de quem havia feito. Joguei no twitter a pergunta e uma pancada de gente trouxe vários websites cuja a abordagem era aprender JS online, grátis, de forma fácil. Nenhum dos sites era o que eu estava procurando, mas eram sites bem legais que talvez você possa se interessar. Abaixo segue o link para todos eles.&lt;/p&gt;

&lt;h2 id=&#34;javascript-com&#34;&gt;Javascript.com&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://javascript.com/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/javascript-com.jpg&#34; alt=&#34;javascript-com&#34; width=&#34;500&#34; height=&#34;300&#34; class=&#34;alignnone size-full wp-image-49682&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;codewars&#34;&gt;CodeWars&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codewars.com/join?language=javascript&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/code-wars.jpg&#34; alt=&#34;code-wars&#34; width=&#34;500&#34; height=&#34;300&#34; class=&#34;alignnone size-full wp-image-49683&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;codeavengers&#34;&gt;CodeAvengers&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codeavengers.com/javascript/1#1.1&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/code-avengers.jpg&#34; alt=&#34;code-avengers&#34; width=&#34;500&#34; height=&#34;300&#34; class=&#34;alignnone size-full wp-image-49684&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;codecombat&#34;&gt;CodeCombat&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://codecombat.com/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/code-combat.jpg&#34; alt=&#34;code-combat&#34; width=&#34;500&#34; height=&#34;300&#34; class=&#34;alignnone size-full wp-image-49681&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 – Parte Final</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-final/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-final/</guid>
      <description>

&lt;p&gt;Chegamos ao final da nossa série sobre Symfony. Se você não leu os outros, no final do artigo há uma &lt;a href=&#34;#other-posts-symfony&#34;&gt;listagem com todos os artigos&lt;/a&gt; já publicados dessa série.&lt;/p&gt;

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-09/&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, instalamos e configuramos o bundle StofDoctrineExtensionsBundle, para fazermos os slugs de nossos posts, agora vamos instalar e configurar o Bundle FOSUserBundle, para fazer a autenticação da área administrativa do nosso blog.&lt;/p&gt;

&lt;h2 id=&#34;instalação-do-bundle-fosuserbundle&#34;&gt;Instalação do bundle FOSUserBundle.&lt;/h2&gt;

&lt;p&gt;Para instalar o FOSUserBundle, temos que adicioná-lo em nosso composer.json. Abra o arquivo composer.json e adicione a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&#34;friendsofsymfony/user-bundle&#34;: &#34;1.3.*&#34;
&lt;/pre&gt;

&lt;p&gt;Depois de adicionando o FOSUserBundle no composer, vamos instalá- lo. Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ composer update
&lt;/pre&gt;

&lt;p&gt;Após o Download, o FOSUserBundle está instalado em nossa aplicação.&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-fosuserbundle&#34;&gt;Configurando o FOSUserBundle.&lt;/h2&gt;

&lt;p&gt;A primeira configuração que devemos fazer, é registrar o novo bundle instalado, para isso entre no AppKernel, caminho: app/AppKernel.php&lt;/p&gt;

&lt;p&gt;Adicione a linha abaixo no registro de bundles:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;new FOS\UserBundle\FOSUserBundle(),
&lt;/pre&gt;

&lt;p&gt;Veja na linha 18:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class AppKernel extends Kernel 
{ 
    public function registerBundles() 
    { 
        $bundles = array( 
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(), 
            new Symfony\Bundle\SecurityBundle\SecurityBundle(), 
            new Symfony\Bundle\TwigBundle\TwigBundle(), 
            new Symfony\Bundle\MonologBundle\MonologBundle(), 
            new Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle(), 
            new Symfony\Bundle\AsseticBundle\AsseticBundle(), 
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(), 
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(), 
            new Tableless\CoreBundle\TablelessCoreBundle(), 
            new Tableless\ModelBundle\TablelessModelBundle(), 
         new Knp\Bundle\PaginatorBundle\KnpPaginatorBundle(),
         new Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle(),
         new FOS\UserBundle\FOSUserBundle(),
        );

...
&lt;/pre&gt;

&lt;p&gt;Pronto, o FOSUserBundle está registrado.&lt;/p&gt;

&lt;p&gt;Agora vamos fazer as configurações no arquivo config.yml, caminho: app/config/config.yml.&lt;/p&gt;

&lt;p&gt;Para que o sistema de login venha traduzido, devemos descomentar a linha translator em framework, veja na linha 3 do código abaixo:&lt;/p&gt;

&lt;p&gt;De:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;framework:
    #esi:             ~
    #translator:      { fallback: &#34;%locale%&#34; }
&lt;/pre&gt;

&lt;p&gt;Para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;framework:
    #esi:             ~
    translator:      { fallback: &#34;%locale%&#34; }
&lt;/pre&gt;

&lt;p&gt;No final do arquivo adicione as configurações abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;# FOSUser
fos_user:
    db_driver: orm # other valid values are &#39;mongodb&#39;, &#39;couchdb&#39; and &#39;propel&#39;
    firewall_name: main
    user_class: Tableless\UserBundle\Entity\User
&lt;/pre&gt;

&lt;p&gt;Perceba que na configuração acima, estamos indicando uma entidade User, porém ainda não existente, vamos criá-la.&lt;/p&gt;

&lt;h2 id=&#34;criando-o-bundle-userbundle&#34;&gt;Criando o bundle UserBundle.&lt;/h2&gt;

&lt;p&gt;Continuando com nossas configurações, podemos criar um novo bundle para que o mesmo fique responsável pelo gerenciamento dos usuários, em nosso caso, vamos criar o bundle, porém só vamos usar para configurar a entidade User, caso queiram fazer outras configurações, o bundle já está criado.&lt;/p&gt;

&lt;p&gt;Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:bundle
&lt;/pre&gt;

&lt;p&gt;Digitamos a namespace:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Bundle namespace: Tableless/UserBundle
&lt;/pre&gt;

&lt;p&gt;O console nos sugere um nome, vamos deixar como está, apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Bundle name [TablelessUserBundle]:
&lt;/pre&gt;

&lt;p&gt;No caminho, apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Target directory [/media/candidosouza/Development/GITHUB/tableless/symfony/src]:
&lt;/pre&gt;

&lt;p&gt;Usaremos annotation para configurações:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Configuration format (yml, xml, php, or annotation): annotation
&lt;/pre&gt;

&lt;p&gt;Não vamos querer a geração de toda a estrutura de um bundle, apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Do you want to generate the whole directory structure [no]? 
&lt;/pre&gt;

&lt;p&gt;Vamos confirmar a geração do novo bundle, damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Do you confirm generation [yes]? 
&lt;/pre&gt;

&lt;p&gt;E vamos registrar esse bundle, somente enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Confirm automatic update of your Kernel [yes]?
&lt;/pre&gt;

&lt;p&gt;E gerar as rotas, damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Confirm automatic update of the Routing [yes]?
&lt;/pre&gt;

&lt;p&gt;Pronto, nosso bundle UserBundle está criado, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/01.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/01.png&#34; alt=&#34;pasta&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49557&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nosso bundle está criado, vamos criar nossa entidade User.&lt;/p&gt;

&lt;h2 id=&#34;criando-a-entidade-user&#34;&gt;Criando a Entidade User.&lt;/h2&gt;

&lt;p&gt;Vamos entrar no bundle UserBundle, caminho src/Tableless/UserBundle/, e vamos criar uma pasta chamada Entity. Nessa pasta vamos criar uma classe User, que será nossa entidade, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/02.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/02.png&#34; alt=&#34;Entidade User&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49558&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A nossa entidade User tem que estender a entidade User do FOSUserBundle, vamos dar um use nessa classe e vamos apelida lá de BaseUser, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use FOS\UserBundle\Entity\User as BaseUser;
&lt;/pre&gt;

&lt;p&gt;Também temos que passar as configurações (mapear nossa entidade) via annotation, vamos dar um use na classe Mapping do Doctrine e apelida lá de ORM, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Doctrine\ORM\Mapping as ORM;
&lt;/pre&gt;

&lt;p&gt;Nossa Entidade terá apenas um atributo id, e um método construtor que chamará construtor pai de entidade BaseUser, juntamente com as respectivas annotations, veja nossa entidade User pronta:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\UserBundle\Entity;

use FOS\UserBundle\Entity\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name=&#34;fos_user&#34;)
 */
class User extends BaseUser
{
    /**
     * @ORM\Id
     * @ORM\Column(type=&#34;integer&#34;)
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;)
     */
    protected $id;

    public function __construct()
    {
        parent::__construct();
    }
}
&lt;/pre&gt;

&lt;h2 id=&#34;configurações-de-segurança&#34;&gt;Configurações de segurança.&lt;/h2&gt;

&lt;p&gt;Para configurar a parte de segurança, temos que editar o arquivo security.yml, responsável pela parte de segurança do Symfony, abra o arquivo, caminho: app/config/security.yml.&lt;/p&gt;

&lt;p&gt;Abrindo o arquivo, vamos perceber que o Symfony está configurando o provider via memória, vamos alterar o provider.&lt;/p&gt;

&lt;p&gt;De:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;providers:
    in_memory:
        memory: ~
&lt;/pre&gt;

&lt;p&gt;Para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;providers:
    fos_userbundle:
        id: fos_user.user_provider.username
&lt;/pre&gt;

&lt;p&gt;Para criptografar a senha do usuário vamos configurar um encoder, incluindo o código abaixo, que usará o algoritmo sha512, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;encoders:
        FOS\UserBundle\Model\UserInterface: sha512
&lt;/pre&gt;

&lt;p&gt;Agora vamos configurar a parte de firewalls, onde estabeleceremos o pattern para ativação do firewalls, que pelo acesso da url será ativado, e qual o tipo de provider que será usado para o processo de autenticação, também passaremos o processo de autenticação apenas pelo formulário, não permitindo outro tipo de requisição, usando o csrf_provider. Vamos permitir o logout, e usuários anônimos nas áreas não restritas, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;firewalls:
        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                csrf_provider: form.csrf_provider
            logout:       true
            anonymous:    true
&lt;/pre&gt;

&lt;p&gt;Temos que passar qual o tipo de acesso o usuário terá que ter, para acessar determinadas urls, ex: o usuário anônimo, só poderá acessar as urls: qualquer-url/login, qualquer-url/register, e qualquer-url/resetting, e apenas usuários administradores, poderão acessar a url: qualquer-url/admin/, para isso passaremos a configuração de controle de acesso, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_ADMIN }
&lt;/pre&gt;

&lt;p&gt;Temos que configurar a hierarquia de usuários cadastrados, onde o admin, poderá ser qualquer usuário cadastrado, e o super admin, será o administrador com total acesso, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
&lt;/pre&gt;

&lt;p&gt;Veja o arquivo security.yml pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;security:
    providers:
        fos_userbundle:
            id: fos_user.user_provider.username

    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

    firewalls:
        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                csrf_provider: form.csrf_provider
            logout:       true
            anonymous:    true

    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_ADMIN }

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
&lt;/pre&gt;

&lt;p&gt;Pronto as configurações de segurança, estão prontas.&lt;/p&gt;

&lt;p&gt;E para finalizar as configurações, temos que passar as rotas do FOSUserBundle onde ficarão registradas no sistema, para isso abra o arquivo routing.yml, caminho: app/config/routing.yml.&lt;/p&gt;

&lt;p&gt;Com o arquivo aberto vamos inserir as rotas abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;# FOSUser
fos_user_security:
    resource: &#34;@FOSUserBundle/Resources/config/routing/security.xml&#34;

fos_user_profile:
    resource: &#34;@FOSUserBundle/Resources/config/routing/profile.xml&#34;
    prefix: /profile

fos_user_register:
    resource: &#34;@FOSUserBundle/Resources/config/routing/registration.xml&#34;
    prefix: /register

fos_user_resetting:
    resource: &#34;@FOSUserBundle/Resources/config/routing/resetting.xml&#34;
    prefix: /resetting

fos_user_change_password:
    resource: &#34;@FOSUserBundle/Resources/config/routing/change_password.xml&#34;
    prefix: /profile
&lt;/pre&gt;

&lt;p&gt;Para que tudo ocorra bem, temos que atualizar o banco de dados, para criar a tabela dos usuários, entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console doctrine:schema:update --force
&lt;/pre&gt;

&lt;p&gt;veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/03.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/03.png&#34; alt=&#34;Tabela do banco de dados&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49559&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;estilizando-as-templates-do-fosuserbundle&#34;&gt;Estilizando as templates do FOSUserBundle.&lt;/h2&gt;

&lt;p&gt;O FOSUserBundle está configurado e instalado em nosso sistema, para que possamos testá-lo, entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console router:debug
&lt;/pre&gt;

&lt;p&gt;E veremos todas as rotas criadas em nosso sistema através FOSUserBundle, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/04.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/04.png&#34; alt=&#34;Router Debug&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49561&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Podemos entrar em todas as rotas, e perceberemos que está sem estilização, por exemplo: a rota /register/, se acessamos no navegador essa rota: url: &lt;a href=&#34;http://127.0.0.1:8000/register/&#34;&gt;http://127.0.0.1:8000/register/&lt;/a&gt; veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/05.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/05.png&#34; alt=&#34;tela de registro&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49562&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Está funcionando perfeitamente, porém sem estilização. Vou explicar como fazer para melhorarmos isso, porém não vou me aprofundar.&lt;/p&gt;

&lt;p&gt;As templates do FOSUserBundle estão todas na pasta friendsofsymfony dentro do diretório vendor/, porém, sabemos que nunca devemos mexer em nada no diretório vendor, entretanto podemos sobrescrever essas templates principais do FOSUserBundle, para isso vamos criar uma pasta chamada FOSUserBundle em app/Resources, e dentro da pasta criada, vamos criar outra pasta chamada views, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/06.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/06.png&#34; alt=&#34;Pasta views&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49563&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O FOSUserBundle, trabalha com um layout principal, para que possamos sobrescrevê-lo, dentro da pasta views, vamos criar um arquivo chamado layout.html.twig e estender a nossa template base já criada anteriormente. A tamplate layout.html.twig ficará dessa forma, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{% extends &#39;::base.html.twig&#39; %}

{% block title %}Blog Administração{% endblock %}

{% block content %}
    {% block fos_user_content %}{% endblock %}
{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Pronto, se acessarmos novamente o url: &lt;a href=&#34;http://127.0.0.1:8000/register/&#34;&gt;http://127.0.0.1:8000/register/&lt;/a&gt;, teremos o resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/07.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/07.png&#34; alt=&#34;Tela de registro pronta&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49564&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, ficou melhor que anteriormente, porém podemos melhorar essa estilização, em meu caso vou deixar como está, mas caso queiram, é só criar um arquivo css com as devidas estilizações, e chamá- lo no base.html.twig que configuramos no &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; target=&#34;_blank&#34;&gt;tutorial 06&lt;/a&gt;, ou usar o próprio bootstrap, e fazer as alterações nos arquivos.&lt;/p&gt;

&lt;p&gt;Obs: Podemos sobrescrever todos os arquivos do FOSUserBundle, porém temos que criar os arquivos e as estruturas de pastas, como no original. &lt;a href=&#34;https://github.com/FriendsOfSymfony/FOSUserBundle/tree/1.3.x/Resources/views&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Veja o original&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dessa forma podemos usar as classes do bootstrap para a estilização nos arquivos sobrescritos que foram criados, caso queiram ter uma base, tem um projeto em meu Github, que foi criado dessa forma, &lt;a href=&#34;https://github.com/candidosouza/management-cars/tree/master/app/Resources/FOSUserBundle/views/Registration&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;veja&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;criando-um-administrador&#34;&gt;Criando um Administrador&lt;/h2&gt;

&lt;p&gt;Podemos criar os usuários pela url: &lt;a href=&#34;http://127.0.0.1:8000/register/&#34;&gt;http://127.0.0.1:8000/register/&lt;/a&gt;, porém os usuários criados serão usuários normais do sistema, para criar um super administrador entre no terminal, e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console
&lt;/pre&gt;

&lt;p&gt;Podemos perceber que agora temos mais opções, pois instalamos o FOSUserBundle, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/08.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/08.png&#34; alt=&#34;Novos comandos&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49565&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E para criar um usuário administrador digitamos:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console fos:user:create
&lt;/pre&gt;

&lt;p&gt;damos um nome, um e-mail e senha, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/09.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/09.png&#34; alt=&#34;Criando usuário&#34; width=&#34;750&#34; height=&#34;150&#34; class=&#34;alignnone size-full wp-image-49566&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Porém o usuário criado, ainda é um usuário normal, vamos torná-lo um administrador, ainda no terminal, digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console fos:user:promote
&lt;/pre&gt;

&lt;p&gt;Escolhemos o usuário que no meu caso é admin.&lt;/p&gt;

&lt;p&gt;Digitamos o Role que queremos, no meu caso ROLE_ADMIN&lt;/p&gt;

&lt;p&gt;E pronto, já temos um administrador do sistema.&lt;/p&gt;

&lt;h2 id=&#34;restringindo-o-acesso-no-sistema&#34;&gt;Restringindo o acesso no sistema.&lt;/h2&gt;

&lt;p&gt;Para que um usuário anônimo não tenha acesso a administração, ( em nosso caso a administração de autores e administração de posts), vamos entrar novamente em security.yml, caminho: app/config/security.yml, e vamos alterar o controle de acesso, dizendo que todo o usuário que entrar na rota /post/ e /author/ deverá ser um usuário cadastrado, veja na linha 5 e 6:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/author/, role: ROLE_USER }
        - { path: ^/post/, role: ROLE_USER }
        - { path: ^/admin/, role: ROLE_ADMIN }
&lt;/pre&gt;

&lt;p&gt;Pronto, dessa forma todos os usuários que acessarem as urls: &lt;a href=&#34;http://127.0.0.1:8000/post/&#34;&gt;http://127.0.0.1:8000/post/&lt;/a&gt; e &lt;a href=&#34;http://127.0.0.1:8000/author/&#34;&gt;http://127.0.0.1:8000/author/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;deverão ser cadastrados como usuários, como autores do blog ou administradores.&lt;/p&gt;

&lt;p&gt;Obs: Quando o usuário anônimo acessar as urls citadas acima, serão redirecionados para a tela de login.&lt;/p&gt;

&lt;p&gt;Podemos fazer várias restrições, exemplo: vamos dizer que o usuário autor, pode: visualizar, criar, editar, e deletar um post, porém, ele não pode: criar, nem editar, menos ainda deletar outro autor, para isso entre no AuthorController, caminho: src/Tableless/CoreBundle/Controller/AuthorController.php&lt;/p&gt;

&lt;p&gt;Primeiramente damos um use em AccessDeniedException, na classe AuthorController, veja.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Symfony\Component\Security\Core\Exception\AccessDeniedException;
&lt;/pre&gt;

&lt;p&gt;Nos métodos createAction, newAction, editAction, updateAction e deleteAction, vamos restringir o acesso do usuário normal, onde verificaremos se ele é um administrador, e caso não seja, vamos gerar um erro, veja o código de verificação abaixo, onde introduziremos em todos os métodos citados acima, :&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$securityContext = $this-&amp;gt;get(&#39;security.context&#39;);

        if (!$securityContext-&amp;gt;isGranted(&#39;ROLE_ADMIN&#39;)) {
            throw new AccessDeniedException(&#34; Somente o administrador pode acessar! &#34;);
        }
&lt;/pre&gt;

&lt;p&gt;Exemplo no createAction, nos demais métodos serão iguais, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
* Creates a new Author entity.
*
* @Route(&#34;/&#34;, name=&#34;author_create&#34;)
* @Method(&#34;POST&#34;)
* @Template(&#34;TablelessCoreBundle:Author:new.html.twig&#34;)
*/
public function createAction(Request $request)
{
   $securityContext = $this-&amp;gt;get(&#39;security.context&#39;);

   if (!$securityContext-&amp;gt;isGranted(&#39;ROLE_ADMIN&#39;)) {
      throw new AccessDeniedException(&#34; Somente o administrador pode acessar! &#34;);
   }

    $entity = new Author();
    $form = $this-&amp;gt;createCreateForm($entity);
    $form-&amp;gt;handleRequest($request);

    if ($form-&amp;gt;isValid()) {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();
        $em-&amp;gt;persist($entity);
        $em-&amp;gt;flush();

     return $this-&amp;gt;redirect($this-&amp;gt;generateUrl(&#39;author_show&#39;, array(&#39;id&#39; =&amp;gt; $entity&amp;gt; getId())));
   }

   return array(
   &#39;entity&#39; =&amp;gt; $entity,
       &#39;form&#39;   =&amp;gt; $form-&amp;gt;createView(),
   );
}
&lt;/pre&gt;

&lt;p&gt;Veja o erro caso o usuário não tenha acesso:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/10.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/10.png&#34; alt=&#34;Erro de usuário não autorizado&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49583&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto!&lt;/p&gt;

&lt;p&gt;Podemos fazer outros tipos de restrições, podemos melhorar a segurança em nosso blog, porém no meu caso vou parar por aqui, com o exemplo acima, acredito que temos uma base de como fazer as demais restrições.&lt;/p&gt;

&lt;h2 id=&#34;dicas&#34;&gt;Dicas:&lt;/h2&gt;

&lt;p&gt;Nos tutoriais abordei o básico de como trabalhar com o Symfony 2. Recomendo sempre a documentação para auxílio.&lt;/p&gt;

&lt;p&gt;Gostaria de deixar algumas dicas para estudos, que não foram abordados:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/service_container.html&#34; target=&#34;_blank&#34;&gt;Services&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/performance.html&#34; target=&#34;_blank&#34;&gt;Performance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/testing.html&#34; target=&#34;_blank&#34;&gt;Testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/http_cache.html&#34; target=&#34;_blank&#34;&gt;HTTP Cache:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/translation.html&#34; target=&#34;_blank&#34;&gt;Translation:&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;other-posts-symfony&#34;&gt;Conclusão.&lt;/h2&gt;

&lt;p&gt;Esta é a última parte da série “Iniciando com Symfony 2”, espero ter sido útil.&lt;/p&gt;

&lt;p&gt;Bons estudos!&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – Instalação&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-07/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 07&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-08/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 08&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-09/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 09&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto encontra-se no &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>