<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jquery on Tableless</title>
    <link>http://tableless.com.br/categories/jquery/index.xml</link>
    <description>Recent content in Jquery on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/categories/jquery/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Paginação com JavaScript e jQuery</title>
      <link>http://tableless.com.br/paginacao-com-javascript-e-jquery/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/paginacao-com-javascript-e-jquery/</guid>
      <description>&lt;p&gt;Algumas vezes, vamos deparar com uma situação onde é preciso fazer uma paginação sem a ajuda de uma linguagem de backend. É exatamente isso que vou ensinar aqui: fazer um sistema de paginação utilizando JavaScript , jQuery e Bootstrap.&lt;/p&gt;

&lt;p&gt;Vamos primeiramente criar a nossa estrutura HTML e chamar as bibliotecas:&lt;/p&gt;

&lt;pre class=&#34;lang-html prettyprint linenums prettyprinted&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script src=&#34;http://tableless.com.br/jquery/1.11.3/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link rel=&#34;stylesheet&#34;href=&#34;/css/bootstrap.min.css&#34;&amp;gt;
// somente para ficar mais &#34;bonito o layout&#34; vamos dar um padding-bottom no select
&amp;lt;style type=&#34;text/css&#34;&amp;gt;
.col-lg-12{
   padding-bottom: 20px;
  } 
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&#34;col-lg-12&#34;&amp;gt;
    &amp;lt;p&amp;gt;itens por pagina&amp;lt;/p&amp;gt;
      &amp;lt;select id=&#34;qtd&#34;  class=&#34;form-control input-sm input-order&#34;&amp;gt;
        &amp;lt;option value=&#34;1&#34;&amp;gt;1&amp;lt;/option&amp;gt;
        &amp;lt;option value=&#34;2&#34;&amp;gt;2&amp;lt;/option&amp;gt;
         &amp;lt;option value=&#34;3&#34;&amp;gt;3&amp;lt;/option&amp;gt;
       &amp;lt;/select&amp;gt;
     &amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;all&#34; id=&#34;conteudo&#34;&amp;gt;
  &amp;lt;div class=&#34;col-lg-3 col-md-6&#34;&amp;gt;
    &amp;lt;div class=&#34;panel panel-primary &#34;&amp;gt;
        &amp;lt;p&amp;gt;Tabless 1&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;col-lg-3 col-md-6&#34;&amp;gt;
    &amp;lt;div class=&#34;panel panel-primary &#34;&amp;gt;
        &amp;lt;p&amp;gt;Tabless 2&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;col-lg-3 col-md-6&#34;&amp;gt;
    &amp;lt;div class=&#34;panel panel-primary &#34;&amp;gt;
        &amp;lt;p&amp;gt;Tabless 3&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&#34;pagi&#34;&amp;gt;&amp;lt;/div&amp;gt; //div responsável por mostrar a paginação
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Reparem que eu escrevi 3 vezes a mesma div. Vocês podem repetir quantas vezes quiserem ou até coloca-lá em &lt;em&gt;loop&lt;/em&gt; (&lt;em&gt;foreach&lt;/em&gt; do PHP, por exemplo). É exatamente essa repetição que vamos paginar. Vamos agora criar as funções em JavaScript:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript &#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
//acionamos o jquery para iniciar a paginação quando o documento estiver &#34;pronto&#34;
$(document).ready(function() {
    //Pegamos o valor selecionado default no select id=&#34;qtd&#34;
     var mostrar_por_pagina = $(&#39;#qtd&#39;).val(); 
    //quantidade de divs
      var numero_de_itens = $(&#39;#conteudo&#39;).children(&#39;.col-lg-3&#39;).size();
     //fazemos uma calculo simples para saber quantas paginas existiram
      var numero_de_paginas = Math.ceil(numero_de_itens / mostrar_por_pagina)
    //Colocamos a div class controls dentro da div id pagi
    $(&#39;#pagi&#39;).append(&#39;&amp;lt;div class=controls&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;input id=current_page type=hidden&amp;gt;&amp;lt;input id=mostrar_por_pagina type=hidden&amp;gt;&#39;);
      $(&#39;#current_page&#39;).val(0);
      $(&#39;#mostrar_por_pagina&#39;).val(mostrar_por_pagina);
      //Criamos os links de navegação
      var nevagacao = &#39;&amp;lt;li&amp;gt;&amp;lt;a class=&#34;prev&#34; onclick=&#34;anterior()&#34;&amp;gt;Prev&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#39;;
      var link_atual = 0;
      while (numero_de_paginas &amp;gt; link_atual) {
          nevagacao += &#39;&amp;lt;li&amp;gt;&amp;lt;a class=&#34;page&#34; onclick=&#34;ir_para_pagina(&#39; + link_atual + &#39;)&#34; longdesc=&#34;&#39; 
          + link_atual + &#39;&#34;&amp;gt;&#39; + (link_atual + 1) + &#39;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#39;;
          link_atual++;
      }
      nevagacao += &#39;&amp;lt;li&amp;gt;&amp;lt;a class=&#34;proxima&#34; onclick=&#34;proxima()&#34;&amp;gt;proxima&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#39;;
      //colocamos a nevegação dentro da div class controls
      $(&#39;.controls&#39;).html(&#34;&amp;lt;div class=&#39;paginacao&#39;&amp;gt;\
        &amp;lt;ul class=&#39;pagination pagination-sm&#39;&amp;gt;&#34;+nevagacao+&#34;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&#34;);
      //atribuimos ao primeiro link a class active
      $(&#39;.controls .page:first&#39;).addClass(&#39;active&#39;);
      $(&#39;#conteudo&#39;).children().css(&#39;display&#39;, &#39;none&#39;);
      $(&#39;#conteudo&#39;).children().slice(0, mostrar_por_pagina).css(&#39;display&#39;, &#39;block&#39;);
  });
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Até aqui, a paginação já é mostrada, porém, ao clicar nos links, nada acontece. Vamos criar as seguintes funções em JavaScript para que funcione:  &lt;em&gt;ir_para_pagina()&lt;/em&gt;, _anterior()_ e &lt;em&gt;proxima()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Então mãos à obra:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
function ir_para_pagina(numero_da_pagina) {
      //Pegamos o número de itens definidos que seria exibido por página
      var mostrar_por_pagina = parseInt($(&#39;#mostrar_por_pagina&#39;).val(), 0);
      //pegamos  o número de elementos por onde começar a fatia
      inicia = numero_da_pagina * mostrar_por_pagina;
     //o número do elemento onde terminar a fatia
      end_on = inicia + mostrar_por_pagina;
     $(&#39;#conteudo&#39;).children().css(&#39;display&#39;, &#39;none&#39;).slice(inicia, end_on).css(&#39;display&#39;, &#39;block&#39;);
     $(&#39;.page[longdesc=&#39; + numero_da_pagina+ &#39;]&#39;).addClass(&#39;active&#39;)
       .siblings(&#39;.active&#39;).removeClass(&#39;active&#39;);
    $(&#39;#current_page&#39;).val(numero_da_pagina);
  }

 function anterior() {
     nova_pagina = parseInt($(&#39;#current_page&#39;).val(), 0) - 1;
      //se houver um item antes do link ativo atual executar a função
      if ($(&#39;.active&#39;).prev(&#39;.page&#39;).length == true) {
          ir_para_pagina(nova_pagina);
      }
  }

function proxima() {
      nova_pagina = parseInt($(&#39;#current_page&#39;).val(), 0) + 1;
      //se houver um item após o link ativo atual executar a função
      if ($(&#39;.active&#39;).next(&#39;.page&#39;).length == true) {
          ir_para_pagina(nova_pagina);
      }
  }
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Pronto, agora temos um sistema de paginação baseado em div&amp;#8217;s com JavaScript + jQuery, porém, precisamos pegar a quantidade de itens por página que o usuário escolher e remontar toda a paginação. Para isso, vamos usar a função &lt;em&gt;change&lt;/em&gt; do jQuery:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
// Pegamos o evento change do select id=&#34;qtd&#34; e remontamos toda a paginação default
  $( &#34;#qtd&#34; ).change(function() {
    //Removemos os &#34;controles&#34; de paginação
      $(&#34;.controls&#34;).remove();
    //Pegamos o valor selecionado
      var mostrar_por_pagina = this.value;
     //remontamos a paginação
      var numero_de_itens = $(&#39;#conteudo&#39;).children(&#39;.col-lg-3&#39;).size();
      var numero_de_paginas = Math.ceil(numero_de_itens / mostrar_por_pagina);
      //Colocamos a div class controls dentro da div id pagi
    $(&#39;#pagi&#39;).append(&#39;&amp;lt;div class=controls&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;input id=current_page type=hidden&amp;gt;&amp;lt;input id=mostrar_por_pagina type=hidden&amp;gt;&#39;);
      $(&#39;#current_page&#39;).val(0);
      $(&#39;#mostrar_por_pagina&#39;).val(mostrar_por_pagina);
  //Criamos os links de navegação
      var nevagacao = &#39;&amp;lt;li&amp;gt;&amp;lt;a class=&#34;prev&#34; onclick=&#34;previous()&#34;&amp;gt;Prev&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#39;;
      var link_atual = 0;
      while (numero_de_paginas &amp;gt; link_atual) {
          nevagacao += &#39;&amp;lt;li&amp;gt;&amp;lt;a class=&#34;page&#34; onclick=&#34;ir_para_pagina(&#39; + link_atual + &#39;)&#34; longdesc=&#34;&#39; 
          + link_atual + &#39;&#34;&amp;gt;&#39; + (link_atual + 1) + &#39;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#39;;
          link_atual++;
      }
      nevagacao += &#39;&amp;lt;li&amp;gt;&amp;lt;a class=&#34;next&#34; onclick=&#34;next()&#34;&amp;gt;Next&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#39;;
   //colocamos a navegação dentro da div class controls
      $(&#39;.controls&#39;).html(&#34;&amp;lt;div class=&#39;paginacao&#39;&amp;gt;
        &amp;lt;ul class=&#39;pagination pagination-sm&#39;&amp;gt;&#34;+nevagacao+&#34;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&#34;);
      $(&#39;.controls .page:first&#39;).addClass(&#39;active&#39;);
      $(&#39;#conteudo&#39;).children().css(&#39;display&#39;, &#39;none&#39;);
      $(&#39;#conteudo&#39;).children().slice(0, mostrar_por_pagina).css(&#39;display&#39;, &#39;block&#39;);
    
  });
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Nosso sistema de paginação completo, totalmente no HTML, é uma das vantagens dessa paginação. O ganho de performance, claro, depende da quantidade de dados.&lt;/p&gt;

&lt;p&gt;Adaptado de &lt;a href=&#34;http://web.enavu.com/tutorials/making-a-jquery-pagination-system/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://web.enavu.com/tutorials/making-a-jquery-pagination-system/&#34;&gt;http://web.enavu.com/tutorials/making-a-jquery-pagination-system/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando efeitos de páginas de livro no seu front-end</title>
      <link>http://tableless.com.br/criando-efeitos-de-paginas-de-livro-no-seu-front-end/</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-efeitos-de-paginas-de-livro-no-seu-front-end/</guid>
      <description>

&lt;p&gt;O &lt;a href=&#34;http://www.turnjs.com/&#34; target=&#34;_blank&#34;&gt;Turn.js&lt;/a&gt; é uma biblioteca JavaScript que faz o conteúdo parecer um livro ou revista de verdade, usando as vantagens do HTML5.&lt;/p&gt;

&lt;p&gt;É uma biblioteca baseada no jQuery, versão 1.7 ou superior, então é um requerimento básico.&lt;/p&gt;

&lt;p&gt;Temos o suporte para os navegadores:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chrome 12+&lt;/li&gt;
&lt;li&gt;Safari 5+&lt;/li&gt;
&lt;li&gt;Firefox 10+&lt;/li&gt;
&lt;li&gt;Internet Explorer 9+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;na-prática&#34;&gt;Na prática&lt;/h2&gt;

&lt;p&gt;Como exemplo, vamos usar como base a história criada por  &lt;a href=&#34;http://adagadegelo.deviantart.com/art/A-Historia-Nao-Contada-Da-Estrela-Azul-572943339&#34; target=&#34;_blank&#34;&gt;Rodrigo Martins&lt;/a&gt;, que tranformou em quadrinhos o meme da internet &amp;#8220;Já acabou, Jéssica&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Vamos utilizar &lt;em&gt;divs&lt;/em&gt; para criar as páginas do livro:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;quadrinho&#34;&amp;gt; &amp;lt;!-- Criando um novo quadrinho --&amp;gt;
    &amp;lt;div class=&#34;hard&#34; id=&#34;capa&#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- Criando a capa --&amp;gt;
    &amp;lt;div class=&#34;hard&#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- Criando a parte de trás da capa --&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-2&#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- Criando as páginas --&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-3&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-5&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-6&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-7&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-8&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-9&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;hard&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;hard&#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- Criando a contracapa --&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script src=&#34;https://code.jquery.com/jquery-2.1.1.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&#34;https://raw.githubusercontent.com/blasten/turn.js/master/turn.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Foi utilizado as classes padrões .&lt;em&gt;page&lt;/em&gt; em casos de páginas comuns, e a classe .&lt;em&gt;hard&lt;/em&gt; para a capa e contracapa.&lt;/p&gt;

&lt;p&gt;Agora vamos adicionar alguns estilos:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;#quadrinho{ //Definindo o tamanho
    width: 800px; 
    height: 600px;
}
#quadrinho .page{ //Definindo os valores padrão para todas as páginas
    background-color: #FFF; //Fundo branco porque, caso não carregue as imagens, ela não fique transparente.
    background-size: cover; //O Fundo precisa cobrir toda a página
}
#quadrinho .hard{
    background-color: #CCC; //Fundo cinza para diferenciar das páginas comuns
    background-size: cover;
}

// Definindo as páginas que servirão de exeplo
#capa{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-01.png&#34;);
}
#pagina-2{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-02.png&#34;);
}
#pagina-3{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-03.png&#34;);
}
#pagina-4{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-04.png&#34;);
}
#pagina-5{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-05.png&#34;);
}
#pagina-6{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-06.png&#34;);
}
#pagina-7{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-07.png&#34;);
}
#pagina-8{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-08.png&#34;);
}
#pagina-9{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-09.png&#34;);
}
&lt;/pre&gt;

&lt;p&gt;Cada página do quadrinho recebe seu próprio &lt;em&gt;background&lt;/em&gt;, contendo o conteúdo desejado.&lt;/p&gt;

&lt;p&gt;E por fim, só é preciso colocar 5 linhas de JavaScript:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#quadrinho&#34;).turn({
    width: 800, // Para definir a largura da página
    height: 600, // Para definir a altura da página
});
&lt;/pre&gt;

&lt;p&gt;E pronto: basta abrir o navegador e ser feliz. 🙂&lt;/p&gt;

&lt;p&gt;Quem quiser ver o resultado basta &lt;a href=&#34;http://codepen.io/anon/pen/Vezozz&#34; target=&#34;_blank&#34;&gt;clicar aqui&lt;/a&gt;. [Link atualizado]&lt;/p&gt;

&lt;p&gt;Acesse:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://turnjs.com/&#34; target=&#34;_blank&#34;&gt;Website do Turn.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blasten/turn.js&#34; target=&#34;_blank&#34;&gt;Github do Turn.js&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Desempenho e eventos jQuery: event delegation</title>
      <link>http://tableless.com.br/desempenho-e-eventos-jquery-event-delegation/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/desempenho-e-eventos-jquery-event-delegation/</guid>
      <description>

&lt;p&gt;Todo mundo que leva a experiência de uso da sua página um pouco a sério já se pegou pensando &amp;#8220;uso um plugin pronto ou faço eu mesmo?&amp;#8221; e caso cogite usar algo já pronto, acaba em dúvida sobre quais das várias opções usar.&lt;/p&gt;

&lt;p&gt;Esses dias eu resolvi estudar o código de algumas opções disponíveis. Fiquei com medo.&lt;/p&gt;

&lt;p&gt;Existem algumas falhas que nós desenvolvedores cometemos no desenvolvimento usando jQuery que são críticas e comuns. Hoje eu quero falar sobre uma delas em especial:&lt;/p&gt;

&lt;h1 id=&#34;excesso-de-event-listeners-pela-página&#34;&gt;Excesso de &lt;em&gt;event listeners&lt;/em&gt; pela página&lt;/h1&gt;

&lt;p&gt;Acho que todo mundo já escreveu um código similar a este:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$( &#39;.foo&#39; ).click( callback );&lt;/pre&gt;

&lt;p&gt;Você sabe o que esse código faz? Ele coloca em todos os elementos com a classe &lt;em&gt;foo&lt;/em&gt; da sua página um &lt;em&gt;event listener&lt;/em&gt; que dispara um &lt;em&gt;callback handler&lt;/em&gt; sempre que o usuário clicar nele. No caso esse &lt;em&gt;listener&lt;/em&gt; dispara a função &lt;em&gt;callback&lt;/em&gt;. Legal e útil, né?&lt;/p&gt;

&lt;p&gt;Agora imagine que você tenha 100 elementos com a classe &lt;em&gt;foo&lt;/em&gt;. Serão 100 &lt;em&gt;event listeners&lt;/em&gt; para o navegador tomar conta. Imagine que você coloque outros &lt;em&gt;listeners&lt;/em&gt; para outros eventos e seletores. Dá pra perceber que essa conta não escala muito bem, né?&lt;/p&gt;

&lt;p&gt;A melhor maneira de resolver isso é com &lt;em&gt;event delegation&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;event-delegation&#34;&gt;Event Delegation&lt;/h1&gt;

&lt;p&gt;Vamos supor que nossa class &lt;em&gt;foo&lt;/em&gt; seja aplicada à &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; de um tipo de tabela específica. Algo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;table class=&#34;tar&#34;&amp;gt;
    &amp;lt;tr class=&#34;foo&#34;&amp;gt;...&amp;lt;/tr&amp;gt;
    &amp;lt;tr class=&#34;foo&#34;&amp;gt;...&amp;lt;/tr&amp;gt;
    ...
&amp;lt;/table&amp;gt;&lt;/pre&gt;

&lt;p&gt;Se a gente colocar um &lt;em&gt;listener&lt;/em&gt; diretamente na class da tabela (.&lt;em&gt;tar&lt;/em&gt;) mandando ele ouvir os eventos internos que ocorrerem nos elementos (.&lt;em&gt;foo&lt;/em&gt;), vamos reduzir o número de &lt;em&gt;listeners&lt;/em&gt; espalhados pela página.&lt;/p&gt;

&lt;p&gt;Como se faz isso, Léo?&lt;/p&gt;

&lt;p&gt;Assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$( &#39;.tar&#39; ).on( &#39;click&#39;, &#39;.foo&#39;, callback );&lt;/pre&gt;

&lt;p&gt;Essa linha de código basicamente diz: sempre que houver um evento de clique nos elementos com classe &lt;em&gt;tar&lt;/em&gt; selecionados, verifique se esse evento foi disparado por um elemento interno com a classe &lt;em&gt;foo&lt;/em&gt;. Se sim, execute a função &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Isso pode ser feito pois os eventos do DOM normalmente são transmitidos (ou propagam) (ou propagam) à todos os seus elementos pais na árvore &lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Glossario/DOM&#34;&gt;DOM&lt;/a&gt;. Esse é o caso do evento de clique.&lt;/p&gt;

&lt;p&gt;Logo, o exemplo acima teria quase o mesmo efeito caso fosse escrito desse jeito:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$( document ).on( &#39;click&#39;, &#39;.foo&#39;, callback );&lt;/pre&gt;

&lt;p&gt;Você pode adicionar um &lt;em&gt;event listener&lt;/em&gt; para responder a cliques no documento inteiro e só executar o &lt;em&gt;callback&lt;/em&gt; caso o clique tenha ocorrido em elementos especificados, nesse caso ‘_.foo_’.&lt;/p&gt;

&lt;p&gt;Lembra que a gente está falando de melhora de desempenho? Se você forçar o navegador a ouvir todos os cliques na sua página e só executar em casos específicos, você estará disperdiçando recursos. Não faça isso, a não ser que seja extremamente necessário. Busque sempre  fixar seus eventos em elementos &lt;em&gt;wrappers&lt;/em&gt;, como aquele &lt;table&gt; do exemplo.&lt;/p&gt;

&lt;h2 id=&#34;elementos-adicionados-dinâmicamente&#34;&gt;&lt;strong&gt;Elementos adicionados dinâmicamente&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Usar &lt;em&gt;event delegation&lt;/em&gt; ainda garante um bônus: ter &lt;em&gt;event handlers&lt;/em&gt; disparados por elementos que foram adicionados dinamicamente à página.&lt;/p&gt;

&lt;p&gt;Digamos que o &lt;em&gt;listener&lt;/em&gt; seja criado durante o &lt;a href=&#34;http://api.jquery.com/ready/&#34;&gt;document ready&lt;/a&gt;, como tradicionalmente é feito:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$( document ).ready(function () {
    $( &#39;.foo&#39; ).on( &#39;click&#39;, callback );
});&lt;/pre&gt;

&lt;p&gt;O &lt;em&gt;handler&lt;/em&gt; será anexado somente aos elementos com a classe &lt;em&gt;foo&lt;/em&gt; existentes no momento em que o documento for carregado.&lt;/p&gt;

&lt;p&gt;Se posteriormente você criar novos elementos com a classe &lt;em&gt;foo&lt;/em&gt; (como respostas à ações do usuário, AJAX, etc.), eles não vão ter o &lt;em&gt;event listener&lt;/em&gt; e não ocorrerá o efeito desejado quando o usuário clica-los.&lt;/p&gt;

&lt;p&gt;Se nós delegarmos isso para um elemento pai das &lt;tr class=&amp;#8221;foo&amp;#8221;&gt;, como no caso o &lt;table class=&amp;#8221;tar&amp;#8221;&gt;, não teremos esse problema.&lt;/p&gt;

&lt;h1 id=&#34;as-devtools-são-suas-amigas&#34;&gt;As &lt;em&gt;DevTools&lt;/em&gt; são suas amigas&lt;/h1&gt;

&lt;p&gt;É possível inspecionar o documento através do &lt;em&gt;DevTools&lt;/em&gt; do seu navegador e identificar quais &lt;em&gt;event listeners&lt;/em&gt; estão anexados em cada elemento. Essa pode ser uma boa estratégia inicial para auditar a sua página e verificar quais eventos podem ser anexados em elementos mais específicos, além de eliminar possíveis excessos no &lt;em&gt;document&lt;/em&gt;.&lt;/p&gt;

&lt;div id=&#34;attachment_49318&#34; style=&#34;width: 1450px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/devtools-chrome-evtdelegation.jpg&#34;&gt;&lt;img class=&#34;size-full wp-image-49318&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/devtools-chrome-evtdelegation.jpg&#34; alt=&#34;Screenshot de uma janela do Google Chrome mostrando a aba de eventos do inspector&#34; width=&#34;1440&#34; height=&#34;223&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Aba de eventos do Chrome DevTools
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/devtools-firefox-evtdelegation.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-49319&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/devtools-firefox-evtdelegation.jpg&#34; alt=&#34;Screenshot de uma janela do Mozilla Firefoz Developer Edition mostrando os de eventos no inspector&#34; width=&#34;1440&#34; height=&#34;296&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h1&gt;

&lt;p&gt;Cada &lt;em&gt;event listener&lt;/em&gt; que criamos é incluído na memória utilizada pelo navegador, o excesso deles pode causar um uso excessivo de memória e deixar a sua página bem pesada. Assim como não é recomendável observar os eventos em muitos elementos, não é para fixar tudo em um único elemento pai, como o próprio &lt;em&gt;document&lt;/em&gt;, pois você corre o risco de ter muitos &lt;em&gt;listeners&lt;/em&gt; sendo disparados ao mesmo tempo atoa, o que pode deixar as interações de sua página bem lentas.&lt;/p&gt;

&lt;p&gt;Nem muito específico, nem muito genérico. O importante é observar que a utilização de &lt;em&gt;event delegation&lt;/em&gt; com o jQuery pode ser otimizada e que se deve tomar cuidado para não trocar uma má prática por outra.&lt;/p&gt;

&lt;p&gt;No próximo artigo vou falar sobre como evitar colisão e duplicação de eventos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formulário responsivo com MailChimp</title>
      <link>http://tableless.com.br/formulario-responsivo-com-mailchimp/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/formulario-responsivo-com-mailchimp/</guid>
      <description>

&lt;p&gt;Há cada dia mais utilizamos serviços disponíveis na web que tem um plano básico e gratuito que permite integrações. Nos últimos meses tenho feito formulários com frequência usando uma abordagem bem simples. Vou mostrar agora como criar um formulário responsivo, integrando com MailChimp e usando jQuery Validate.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos criar o formulário da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;CREATE RESPONSIVE FORM WITH INTEGRATE MAILCHIMP&amp;lt;/h1&amp;gt;
  &amp;lt;form id=&#34;form-contact&#34; method=&#34;POST&#34; action=&#34;mailchimp-contact.php&#34;&amp;gt;
    &amp;lt;div class=&#34;input&#34;&amp;gt;
      &amp;lt;label for=&#34;name&#34;&amp;gt;Name&amp;lt;/label&amp;gt;
      &amp;lt;input type=&#34;text&#34; id=&#34;name&#34; name=&#34;name&#34; placeholder=&#34;Your name&#34; required&amp;gt;
    &amp;lt;/div&amp;gt;

    ...
    
    &amp;lt;div class=&#34;input txt&#34;&amp;gt;
      &amp;lt;label for=&#34;message&#34;&amp;gt;Message&amp;lt;/label&amp;gt;
      &amp;lt;textarea id=&#34;message&#34; name=&#34;message&#34; cols=&#34;10&#34; rows=&#34;5&#34; placeholder=&#34;Its message leaves&#34; required&amp;gt;&amp;lt;/textarea&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;buttons&#34;&amp;gt;
      &amp;lt;span class=&#34;form-message&#34;&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;input type=&#34;submit&#34; value=&#34;SEND&#34; /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/section&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-form-mailchimp/demo-only-elements.html&#34; target=&#34;_blank&#34; title=&#34;Ver demo sem style.&#34;&gt;Ver demo sem style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Para cada label e input foi adicionado uma &lt;code&gt;div.input&lt;/code&gt; para inserir uma formatação por grupo.&lt;/p&gt;

&lt;h3 id=&#34;o-form-está-centralizado-com-max-width&#34;&gt;O form está centralizado com max-width:&lt;/h3&gt;

&lt;p&gt;Por ser um elemento &amp;#8216;block&amp;#8217;, vamos definir o tamanho máximo que ele pode ter.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;form {
&amp;nbsp; margin: 0 auto;
&amp;nbsp; max-width: 850px;
&amp;nbsp; padding: 20px 10px;
&amp;nbsp; background-color: rgba(255,255,255,0.4)
}
&lt;/pre&gt;

&lt;h3 id=&#34;o-grupo-div-input-com-50-em-8216-width-8217-do-form&#34;&gt;O grupo div.input com 50% em &amp;#8216;width&amp;#8217; do form:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input {
  float: left;
  width: 48%;
  padding: 0 1% 20px;
  position: relative;
}

.input.txt { width: 98%; } /*textarea 100%*/
&lt;/pre&gt;

&lt;h3 id=&#34;os-labels&#34;&gt;Os labels:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input label {
  display: block;
  padding-bottom: 5px;
  color: #666;
}
&lt;/pre&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input label.error {
  position: absolute;
  right: 18px;
  top: 35px;
  color: #f00;
}&lt;/pre&gt;

&lt;p&gt;O label.error é gerado pelo jQuery validate e adicionado seguido dos campos.&lt;/p&gt;

&lt;h3 id=&#34;os-campos&#34;&gt;Os campos:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input input,
.input textarea {
  padding-top: 10px;
  padding-bottom: 9px;
  border: none;
  font-size: 16px;
  font-weight: 100;
  font-family: &#34;Helvetica Neue&#34;, Helvetica, Arial, sans-serif;
}

.input input {
  width: 94%;
  padding-left: 3%;
  padding-right: 3%;
}

.input textarea {
  width: 97%;
  padding-left: 1.5%;
  padding-right: 1.5%;
}&lt;/pre&gt;

&lt;p&gt;Formatamos os campos para ter 100% de tamanho do elemento pai &amp;#8216;div.input&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Sempre que redimensionar não haverá quebras, portanto, responsivo meu amigo.&lt;/p&gt;

&lt;h3 id=&#34;agora-um-capricho-para-resoluções-pequenas&#34;&gt;Agora um capricho para resoluções pequenas.&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 520px) {
  .input {
    width: 98%;
  }
}&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-form-mailchimp/demo-style-elements.html&#34; target=&#34;_blank&#34; title=&#34;Ver demo com style.&#34;&gt;Ver demo com style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-jquery-mailchimp&#34;&gt;O jQuery + MailChimp&lt;/h2&gt;

&lt;p&gt;Com o HTML e CSS prontos, vamos adicionar o JavaScript que é fácil. Como dependemos do jQuery e não podemos iniciar de qualquer forma, segue uma estrutura bem legal:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function(){
  var contact = function(){
    var init = function() {
      //initialize code
    };
    
&amp;nbsp;   //more functions

    return {init: init};
  }();

  //jQuery loaded
  $(document).ready(contact.init);
})();&lt;/pre&gt;

&lt;p&gt;Como sabemos exatamente qual função vai executar quando a jQuery carregar, adicionaremos o jQuery Validate no init:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var init = function() {
  $(&amp;#039;#form-contact&amp;#039;).validate({
    rules : {
      name: &#34;required&#34;,
      email: { required: true, email: true },
      phone: { required: true, minlength: 14 },
      company: &#34;required&#34;,
      message: &#34;required&#34;
    },
    messages: {
      name: &#34;*&#34;,
      email: { required: &#34;*&#34;, email: &#34;*&#34; },
      phone: { required: &#34;*&#34;, minlength: &#34;*&#34; },
      company: &#34;*&#34;,
      message: &#34;*&#34;
    }
  });
};&lt;/pre&gt;

&lt;p&gt;Agora que estamos validando todos os campos, que tal adicionar um ajax para deixar nosso formulário bem suave e uma função para exibir mensagens de sucesso ou erro, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var init = function() {
  $(&amp;#039;#form-contact&amp;#039;).validate({
    rules : {
      ...
    },
    messages: {
      ...
    },
    submitHandler: function(form) {
      var $form = $(form);

      var params = {
        name: $form.find(&amp;#039;#name&amp;#039;).val(),
        email: $form.find(&amp;#039;#email&amp;#039;).val(),
        phone: $form.find(&amp;#039;#phone&amp;#039;).val(),
        company: $form.find(&amp;#039;#company&amp;#039;).val(),
        message: $form.find(&amp;#039;#message&amp;#039;).val()
      };

      $.ajax({
        type: $form.attr(&amp;#039;method&amp;#039;),
        url: $form.attr(&amp;#039;action&amp;#039;),
        data: params,
        success: function( data ) {
          if(data == &#34;true&#34;) {
            $form.find(&amp;#039;.input input&amp;#039;).val(&#34;&#34;);
            $form.find(&amp;#039;.input textarea&amp;#039;).val(&#34;&#34;);
            setMessage(&#34;Mission accomplished. &amp;lt;strong&amp;gt;&#34;+ params.email +&#34;&amp;lt;/strong&amp;gt; was successfully added to list.&#34;, &#34;success&#34;);
          } else {
            setMessage(&#34;Mission failed. &amp;lt;strong&amp;gt;&#34;+ params.email +&#34;&amp;lt;/strong&amp;gt; not was added to list.&#34;, &#34;error&#34;);
          }
        },
        error: function( data ) {
          setMessage(&#34;Mission failed in connection. Try again.&#34;, &#34;error&#34;);
        }
      });

      return false;
    }
  });
};

var setMessage = function($message, $type) {
  $(&amp;#039;.form-message&amp;#039;).html($message).addClass($type);

  setTimeout(function(){
    $(&amp;#039;.form-message&amp;#039;).removeClass($type);
  }, 6000);
};
&lt;/pre&gt;

&lt;p&gt;Via &amp;#8216;submitHandler&amp;#8217; do &lt;a href=&#34;http://jQueryvalidation.org/&#34; target=&#34;_blank&#34;&gt;jQuery Validate&lt;/a&gt;, vamos disparar por ajax todos os dados preenchidos e travar o post do form com &amp;#8216;return false&amp;#8217; no final da função. Assim evitamos aquele redirecionamento de post.&lt;/p&gt;

&lt;h3 id=&#34;o-php&#34;&gt;O PHP&lt;/h3&gt;

&lt;p&gt;Como definimos com &amp;#8216;method&amp;#8217; e &amp;#8216;action&amp;#8217; para o nosso formulário, segue o código para resgatar os dados:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
    require_once &amp;#039;MCAPI.class.php&amp;#039;;
    $api = new MCAPI(&amp;#039;casiuach1293kajsc912319203cja23s-us9&amp;#039;);
    $merge_vars = array(&amp;#039;NAME&amp;#039;=&amp;gt;$_POST[&#34;name&#34;], &#39;PHONE&#39;=&amp;gt;$_POST[&#34;phone&#34;], &#39;COMPANY&#39;=&amp;gt;$_POST[&#34;company&#34;], &#39;MESSAGE&#39;=&amp;gt;$_POST[&#34;message&#34;]);
    
    // Submit subscriber data to MailChimp
    // For parameters doc, refer to: http://apidocs.mailchimp.com/api/1.3/listsubscribe.func.php
    $retval = $api-&amp;gt;listSubscribe( &amp;#039;12938asd98&amp;#039;, $_POST[&#34;email&#34;], $merge_vars, &amp;#039;html&amp;#039;, false, true );
    
    if ($api-&amp;gt;errorCode){
        echo &#34;false&#34;;
    } else {
        echo &#34;true&#34;;
    }
?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Dependemos da MCAPI.class que você pode verificar na &lt;a href=&#34;https://apidocs.mailchimp.com/api/example-code/&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt; ou baixar &lt;a href=&#34;https://codeload.github.com/sunarlim/mailchimp-subscribe/zip/master&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;, só lembrando que precisa adicionar sua API Key e List ID.&lt;/p&gt;

&lt;h2 id=&#34;pronto&#34;&gt;PRONTO&lt;/h2&gt;

&lt;p&gt;Nosso formulário é responsivo e integrado ao mailchimp.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://css4html.com.br/demos/responsive-form-mailchimp/&#34; target=&#34;_blank&#34; title=&#34;Veja como ficou o resultado final&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/palloi/responsive-form-mailchimp/&#34; target=&#34;_blank&#34; title=&#34;Veja o código completo no github&#34;&gt;Veja o c&amp;oacute;digo completo no github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entendendo o Event Delegation da função on() no jQuery</title>
      <link>http://tableless.com.br/entendendo-o-event-delegation-jquery/</link>
      <pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/entendendo-o-event-delegation-jquery/</guid>
      <description>&lt;p&gt;Geralmente uma &amp;#8220;delegação&amp;#8221;, que seria a uma tradução livre para &lt;strong&gt;delegation&lt;/strong&gt;, significa definir um evento para um elemento pai, que será disparado para todos os seus filhos. O evento vai funcionar para qualquer elemento filho que já existir e também para os que forem adicionados posteriormente na árvore do DOM.&lt;/p&gt;

&lt;p&gt;Para exemplificar, entenda o código abaixo. Ele apenas muda o texto do parágrafo quando clicamos em alguma opção do menu. É um uso simples da função &lt;code&gt;on(&#39;click&#39;)&lt;/code&gt; do jQuery:&lt;/p&gt;

&lt;p&gt;Para entender como isso funciona, você precisa saber o que é o &lt;code&gt;event propagation&lt;/code&gt; (ou &lt;code&gt;event bubbling&lt;/code&gt;): toda vez que você clica em um elemento, esse clique é propagado para toda a árvore do DOM, iniciando pelo elemento onde o evento aconteceu e chegando até o root do documento, que no nosso caso é a tag HTML.&lt;/p&gt;

&lt;p&gt;Além disso, você faz seu browser ouvir o click em todos os elementos desse nosso menu, se considerarmos o exemplo acima. Nesse nosso caso, não chega a ser um problema, mas imagine em uma tabela que tem muitas células e que você precisa executar alguma coisa quando alguma das &lt;code&gt;td&lt;/code&gt; é clicada. A performance começa a ser prejudicada.&lt;/p&gt;

&lt;p&gt;Quando usamos o &lt;strong&gt;event delegation&lt;/strong&gt; ao nosso favor, podemos definir o evento no elemento pai e então, quando esse evento acontecer, delegamos para o seu filho. No nosso exemplo acima, nós vamos atrelar o evento de click no &lt;code&gt;ul.menu&lt;/code&gt;, mas delegando esse evento para os links. A função em si nem muda tanto, ela fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.menu&#39;).on(&#39;click&#39;, &#39;a&#39;, function(evt){
        // Seu código...
    });
&lt;/pre&gt;

&lt;p&gt;Perceba que a função &lt;code&gt;on()&lt;/code&gt; recebe dois parâmetros: o primeiro é o evento e o segundo é o elemento filho que esse evento deve ser aplicado.&lt;/p&gt;

&lt;p&gt;Suponha que você tenha alguma função que adiciona mais filhos ao seu elemento pai. A propagação continua funcionando, já que o evento está atrelado ao pai e não aos seus filhos.&lt;/p&gt;

&lt;p&gt;Lembrando que a função &lt;code&gt;on()&lt;/code&gt; foi adicionada no jQuery 1.7, para juntar as vantagens das funções &lt;code&gt;delegate()&lt;/code&gt; e &lt;code&gt;live()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Há uma &lt;a href=&#34;http://jsperf.com/jquery-event-delegation/5&#34;&gt;análise de performance no JSPerf&lt;/a&gt; comparando o várias maneiras para você delegar os eventos aos filhos de um elemento. O &lt;code&gt;delegate()&lt;/code&gt; tem quase a mesma performance que o &lt;code&gt;on()&lt;/code&gt;, mesmo assim é melhor usar o &lt;code&gt;on()&lt;/code&gt;, já que ele tem mais vantagens.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Em um relacionamento sério com generators front-end – Parte 2</title>
      <link>http://tableless.com.br/em-um-relacionamento-serio-com-generators-front-end-parte-2/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/em-um-relacionamento-serio-com-generators-front-end-parte-2/</guid>
      <description>

&lt;h1 id=&#34;o-início&#34;&gt;O início&lt;/h1&gt;

&lt;p&gt;O objetivo desse post não é para fazer com que os desenvolvedores só usem esta ferramenta, e sim para apresentar opções de desenvolvimentos ágeis que podem ser úteis no seu dia a dia. É uma ferramenta a qual lhe oferece um stack completo de estrutura de projeto, basta você saber como usar e para que vai usar.&lt;/p&gt;

&lt;h3 id=&#34;o-yeoman&#34;&gt;O Yeoman&lt;/h3&gt;

&lt;p&gt;O Yeoman é considerado uma ferramenta web de andaimes para criação de webapp modernos, nele você consegue montar um esquema de trabalho facilitando seu desenvolvimento. Seu fluxo de trabalho é composto por 3 ferramentas melhorando sua produtividade e satisfação.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YO &amp;#8211; Conjunto de geradores que nos permite prototipar&lt;/li&gt;
&lt;li&gt;Gruntjs &amp;#8211; Gerencia suas tarefas de forma automatizadas&lt;/li&gt;
&lt;li&gt;Bower &amp;#8211; Gerencia suas dependências aplicadas no projeto&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PS: São ferramentas que por padrão já vem com o Yeoman, porém temos a opção de usar o Gulp para gerenciar nossas tarefas.&lt;/p&gt;

&lt;h3 id=&#34;ta-me-convence&#34;&gt;Ta, me convence!&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/convence.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-46124&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/convence.jpg&#34; alt=&#34;convence&#34; width=&#34;477&#34; height=&#34;275&#34; srcset=&#34;uploads/2014/12/convence.jpg 477w, uploads/2014/12/convence-241x139.jpg 241w, uploads/2014/12/convence-400x230.jpg 400w&#34; sizes=&#34;(max-width: 477px) 100vw, 477px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O Yeoman sendo uma ferramenta completa, pode proporcionar para você formas práticas e ágeis de desenvolvimento com menos tempo e com boa qualidade. Alguns criticam, outros elogiam, mas você só saberá o resultado se positivo ou negativo, quando usar esse brinquedinho.&lt;/p&gt;

&lt;p&gt;Penso o seguinte: Uma ferramenta nova no marcado ou até mesmo uma antiga com novas versões e novas features, precisam ser exploradas para saber o que a mesma pode nos proporcionar. Por isso nunca se intimide com novas tecnologias e sim aproveite para ganhar conhecimentos.&lt;/p&gt;

&lt;h3 id=&#34;dicas-importantes-antes-de-praticar&#34;&gt;Dicas importantes antes de praticar&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/dica.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-46127&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/dica.jpg&#34; alt=&#34;dica&#34; width=&#34;400&#34; height=&#34;245&#34; srcset=&#34;uploads/2014/12/dica.jpg 400w, uploads/2014/12/dica-226x139.jpg 226w&#34; sizes=&#34;(max-width: 400px) 100vw, 400px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Antes de mais nada já saiba que não ter medo do terminal é um diferencial. Sacanagem Hahaha. Mas é importante saber que a maioria das configurações e monitoramento serão via terminal, por isso é bom entender e interpretar cada linha de comando digitada.&lt;/p&gt;

&lt;p&gt;Lembrando que para usar o Yeoman é preciso ter Nodejs instalado em sua máquina, por isso se você não tem essa plataforma, baixe &lt;a href=&#34;http://nodejs.org/download/&#34;&gt;aqui&lt;/a&gt;, instale e parte para a próxima etapa. Após a instalação do nodejs o resto é mágica!&lt;/p&gt;

&lt;p&gt;Uma observação válida a ser feita é o seguinte: Você que desenvolve com Mac OS ou Linux *-* por padrão já vem instalado o Ruby e para quem desenvolve em windows é preciso instalar os dois: Nodejs e Ruby. Você pode baixar o ruby bem &lt;a href=&#34;https://www.ruby-lang.org/pt/downloads/&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;vendo-teorias-na-prática&#34;&gt;Vendo teorias na prática&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/vendo-tv.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-46128&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/vendo-tv.jpg&#34; alt=&#34;vendo-tv&#34; width=&#34;381&#34; height=&#34;315&#34; srcset=&#34;uploads/2014/12/vendo-tv.jpg 381w, uploads/2014/12/vendo-tv-168x139.jpg 168w&#34; sizes=&#34;(max-width: 381px) 100vw, 381px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Conforme comentado acima, precisa ter nodejs instalado, por isso instale e após a instalação seguia os passos seguintes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Digite o código abaixo via linha de comando na raiz do seu projeto. O mesmo instala o Yo, Gruntjs e Bower de forma global, podendo usar também Gulp. &lt;pre class=&#34;lang-html&#34;&gt;npm install -g yo grunt-cli bower&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instale o generator da aplicação, nesse caso o generator escolhido para uso é o &amp;#8220;webapp&amp;#8221;. &lt;pre class=&#34;lang-html&#34;&gt;npm install generator-webapp&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inicie a aplicação com YO. &lt;pre class=&#34;lang-html&#34;&gt;yo webapp&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O comando &amp;#8220;generator-webapp&amp;#8221; é o gerador de aplicações web padrão que será um projeto contendo HTML5 Boilerplate , jQuery , Modernizr e Bootstrap . Você vai ter uma opção durante as instruções interativas para não incluir muitos destes.&lt;/p&gt;

&lt;h3 id=&#34;mas-o-que-vem-depois&#34;&gt;Mas o que vem depois?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/01.jpg&#34;&gt;&lt;img class=&#34;alignnone  wp-image-46228&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/01.jpg&#34; alt=&#34;01&#34; width=&#34;338&#34; height=&#34;190&#34; srcset=&#34;uploads/2014/12/01.jpg 400w, uploads/2014/12/01-247x139.jpg 247w&#34; sizes=&#34;(max-width: 338px) 100vw, 338px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após o processo de instalação seguida passo a passo, a ferramenta já pode ser usada para criar suas aplicações. Você vai perceber que o YO já te retorna uma estrutura de pasta bem completa com tudo que você precisa e ainda alguns recursos a mais. Veja abaixo!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/estrutura-raiz.jpg&#34;&gt;&lt;img class=&#34;alignnone  wp-image-46230&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/estrutura-raiz.jpg&#34; alt=&#34;estrutura raiz&#34; width=&#34;193&#34; height=&#34;269&#34; srcset=&#34;uploads/2014/12/estrutura-raiz.jpg 233w, uploads/2014/12/estrutura-raiz-99x139.jpg 99w&#34; sizes=&#34;(max-width: 193px) 100vw, 193px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Analisando a estrutura, digo o seguinte:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A pasta &lt;strong&gt;app&lt;/strong&gt; é onde vai rodar toda sua aplicação em modo de desenvolvimento. É lá que você cria seus arquivos HTML / CSS / JavaScript e entre outros. Mas essa pasta vamos ver com detalhes já já.&lt;/li&gt;
&lt;li&gt;A pasta &lt;strong&gt;bower_componnets&lt;/strong&gt; é criada pelo bower, onde você vai baixar e usar componentes como bootstrap, AngularJS, Backbone e entre outros e por padrão ele já traz o jQuery para você. Caso você não goste do nome “bower_componentes” você tem a opção de criar uma pasta como “libs” ou “componentes” e apontar seus componentes baixados para está nova pasta, só precisa criar um arquivo “.bowerrc” e lá você aponta para tal pasta. Exemplo: { app/libs ou app/componentes }&lt;/li&gt;
&lt;li&gt;A pasta &lt;strong&gt;node_modules&lt;/strong&gt; são os módulos instalados pelo nodejs, lá você vai ver alguns plugins do Gruntjs instalados por padrão, podendo ainda instalar outros plugins.&lt;/li&gt;
&lt;li&gt;Os arquivos &lt;strong&gt;Gruntfile&lt;/strong&gt; e &lt;strong&gt;Bower.json&lt;/strong&gt; são de configurações de componentes, onde o Gruntfile armazena todas as tarefas automatizadas do gruntjs como: minificação, compilação e otimização. Já o bower.json é um arquivo simples que retorna dados importantes dos componentes gerenciados no bower e armazena os componentes usados e suas versões.&lt;/li&gt;
&lt;li&gt;Os outros arquivos são de configuração da ferramenta, incluindo os arquivos ocultos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-tal-pasta-app-da-minha-aplicação&#34;&gt;A tal pasta APP da minha aplicação&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/02.jpg&#34;&gt;&lt;img class=&#34;alignnone  wp-image-46231&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/02.jpg&#34; alt=&#34;02&#34; width=&#34;355&#34; height=&#34;239&#34; srcset=&#34;uploads/2014/12/02.jpg 425w, uploads/2014/12/02-206x139.jpg 206w, uploads/2014/12/02-400x269.jpg 400w&#34; sizes=&#34;(max-width: 355px) 100vw, 355px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enfim chegamos a pasta de desenvolvimento, é aqui que começa toda a sua aplicação, você não precisa mexer em nenhuma outra pasta, tudo que você precisa mexer e criar vai ser dentro deste diretório, beleza? Veja como funciona a estrutura da pasta e logo após vamos ver funcionando e depois daremos o &lt;strong&gt;build&lt;/strong&gt; *-*&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/estrutura-app.jpg&#34;&gt;&lt;img class=&#34;alignnone  wp-image-46232&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/estrutura-app.jpg&#34; alt=&#34;estrutura-app&#34; width=&#34;134&#34; height=&#34;277&#34; srcset=&#34;uploads/2014/12/estrutura-app.jpg 154w, uploads/2014/12/estrutura-app-67x139.jpg 67w&#34; sizes=&#34;(max-width: 134px) 100vw, 134px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Acredito que detalhar essa estrutura não tem tanta necessidade, pois as pastas e arquivos já falam por si, não é mesmo? Mas qualquer dúvida pode deixar seu comentário que responderei com prazer.&lt;/p&gt;

&lt;p&gt;Bom, você já instalou as ferramentas (Yo/Gruntjs/bower), já instalou o generator que será usado (generator-webapp) e executou o “yo” que retornou essa estrutura de pasta. Agora para ver como funciona é simples. Execute o comando abaixo, ele vai criar um server local para você ir debugando sua aplicação e vendo como ela está se comportanto no browser e o mais legal é que você não precisa dar F5, pois por padrão já vem instalado o “livereload” plugin do grunt que atualiza automaticamente sua aplicação no browser  =)&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;grunt server&lt;/pre&gt;

&lt;p&gt;Após isso você criar sua aplicação normalmente, usando como ponto de partida o arquivo index.html e os diretórios presentes.&lt;/p&gt;

&lt;h3 id=&#34;e-se-eu-quiser-baixar-outros-componentes-e-plugins&#34;&gt;*&lt;strong&gt;&lt;em&gt;&lt;em&gt;E se eu quiser baixar outros componentes e plugins?&lt;/em&gt;&lt;/em&gt;&lt;/strong&gt;*&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/03.jpg&#34;&gt;&lt;img class=&#34;alignnone  wp-image-46233&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/03.jpg&#34; alt=&#34;03&#34; width=&#34;335&#34; height=&#34;216&#34; srcset=&#34;uploads/2014/12/03.jpg 400w, uploads/2014/12/03-215x139.jpg 215w&#34; sizes=&#34;(max-width: 335px) 100vw, 335px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É uma boa pergunta e simples de responder. Para baixar outro componente como por exemplo AngularJS vamos usar o Bower, nosso gerenciador de componentes. E para baixar um novo plugin como por exemplo JSHINT vamos usar o Gruntjs que gerencia nossas tarefas. Os comandos abaixo mostra como baixar componentes e plugins.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Baixando componentes&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;lang-html&#34;&gt;bower install [nome do componente]&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Baixando plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;lang-html&#34;&gt;npm install [nome do plugin] --save-dev&lt;/pre&gt;

&lt;h3 id=&#34;e-meu-ambiente-de-produção&#34;&gt;E meu ambiente de produção?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/04.jpg&#34;&gt;&lt;img class=&#34;alignnone  wp-image-46234&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/04.jpg&#34; alt=&#34;04&#34; width=&#34;363&#34; height=&#34;252&#34; srcset=&#34;uploads/2014/12/04.jpg 392w, uploads/2014/12/04-200x139.jpg 200w&#34; sizes=&#34;(max-width: 363px) 100vw, 363px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chegamos ao nosso momento de build da aplicação. O yeoman compila todos os arquivos da pasta app e nos retorna uma pasta chamada “dist” é lá que encontram seus arquivos de produção prontos para serem usados e testados. Lembrando que qualquer alteração não poderá ser feita na pasta “dist” e sim em “app”.&lt;/p&gt;

&lt;p&gt;Dando o build no projeto e gerando meu diretório de produção:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;grunt build&lt;/pre&gt;

&lt;h3 id=&#34;visão-geral&#34;&gt;Visão geral&lt;/h3&gt;

&lt;p&gt;Hoje aprendemos realmente a usar o yeoman, desde seus conceitos até o modo de produção, é só seguir os passos e dicas. E por falar em dica, lá vai uma dica para melhorar mais ainda a sua transferência de arquivos para o ambiente de produção.&lt;/p&gt;

&lt;p&gt;Ao dar o build ele gera o diretório “dist” contendo nele os arquivos de produção. Já que estamos automatizando tudo, evite o uso do FTP e sim faça deploy =) Abaixo segue algumas referências de um módulo do grunt que você pode acrescentar em sua aplicação e deixá-la mais interessante. Assim você miniminiza retrabalhos. Estou falando de [rsync][12].&lt;/p&gt;

&lt;p&gt;Links de referência Yeoman que podem complementar o Post&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://yeoman.io/&#34;&gt;Site oficial do yeoman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://github.com/yeoman/yeoman&#34;&gt;Projeto yeoman no github para contribuição&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://blog.caelum.com.br/experimente-o-yeoman-em-seu-workflow-de-projetos-front-end/&#34;&gt;Outro Post de referência explicativo e conceitual&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://pt.slideshare.net/pedropolisenso/em-um-relacionamento-srio-com-generators-front-end&#34;&gt;Palestra sobre generators (yeoman)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;considerações-finais&#34;&gt;Considerações finais&lt;/h3&gt;

&lt;p&gt;Chegamos ao final desse capítulo tentando expor as qualidades que o Yeoman pode nos dar e sua forma de uso. No próximo capítulo teremos nosso amigo Beto Muniz (&lt;a href=&#34;https://twitter.com/obetomuniz&#34;&gt;@obetomuniz&lt;/a&gt;) falando sobre Slush dentro da série. Não perca os próximos capítulos da série, onde no 4º capítulo finalizaremos com algumas dicas, apresentaremos projetos que foram criados a parir de um desses generators e mostrar como criar seu próprio generator. Valeu =]&lt;/p&gt;

&lt;p&gt;[12]: Ao%20dar o build ele gera o diretório “dist” contendo nele os arquivos de produção. Já que estamos automatizando tudo, jamais em toda sua vida use FTP e sim faça deploy =) Abaixo segue algumas referências de um módulo do grunt que você pode acrescentar em sua aplicação e deixá-la mais interessante. Assim você miniminiza retrabalhos. Estou falando de rsync&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>All Animation CSS3 – Criar animações CSS3 nunca foi tão fácil</title>
      <link>http://tableless.com.br/animation-css3-criar-animacoes-css3-nunca-foi-tao-facil/</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/animation-css3-criar-animacoes-css3-nunca-foi-tao-facil/</guid>
      <description>

&lt;p&gt;Criar animações para nossos websites era algo &amp;#8220;impensável&amp;#8221; no passado. Com o surgimento do CSS3 e a morte do flash, a criação de websites dinâmicos, animados e leves, foi ficando cada vez mais fácil. Quem diria que há 7 anos atrás poderíamos alterar nossas animações para web sem precisar ter o flash instalado na nossa máquina ou até mesmo criar sites com efeitos paralax? Os devs antigos sabem bem o que estou querendo dizer.&lt;/p&gt;

&lt;p&gt;Assim como o HTML5, o CSS3 também veio com várias novidades interessantes e revolucionárias&amp;#8230; Entre elas temos a propriedade &lt;strong&gt;animation.&lt;/strong&gt; Com esta riquíssima propriedade, podemos produzir transições apenas com CSS. Mas isso você já sabe. Mesmo assim, a propriedade animation e também o método keyframe podem ser ruins de gerenciar quando temos muita animação em um mesmo site. Ai, se houver um framework que ajude esse trabalho, nossa vida se torna mais fácil. É aí que entra o All Animation CSS3.&lt;/p&gt;

&lt;h1 id=&#34;o-framework-all-animation-css3&#34;&gt;O framework All Animation CSS3&lt;/h1&gt;

&lt;p&gt;Bastante empolgado com estas riquíssimas possibilidades que a propriedade animation nos oferece, eu e o Jeftar Mascarenhas resolvemos criar um framework de animações css3, que graças a Deus está dando &amp;#8220;alguns acessos&amp;#8221;, e hoje irei compartilhar com meus amigos &amp;#8220;dev&amp;#8217;s ninjas&amp;#8221;. Seu nome é o &lt;strong&gt;All Animation CSS3&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;8220-all-8230-8221-oquê&#34;&gt;&amp;#8220;All &amp;#8230;&amp;#8221; oquê?&lt;/h2&gt;

&lt;p&gt;O nome soa meio irônico pois All Animation CSS3 (todas as animações css3) nada mais é que um framework que reúne ricas animações CSS3 para você utilizar no seu projeto acadêmico ou comercial. Contém um conjunto de animações, divertidas para deixar seu projeto mais sexy. São animações cross-browser que darão mais ênfase a suas páginas como controles deslizantes, efeitos 3D’s e etc&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;quando-usar&#34;&gt;Quando usar?&lt;/h2&gt;

&lt;p&gt;Como qualquer framework, seu objetivo é agilizar o processo de criação no seu dia-a-dia. Se você assumiu um projeto grande, cujo o período de tempo é muito curto e com certeza, não teria tempo pra desenvolver animações interessantes&amp;#8230; utilizar este framework seria ótimo para ganhar uns &amp;#8220;timers&amp;#8221; a mais.&lt;/p&gt;

&lt;h2 id=&#34;quando-não-usar&#34;&gt;Quando não usar?&lt;/h2&gt;

&lt;p&gt;Como citei acima, o All Animation é  muito bom para quem está com uma carga de trabalho muito alta e um curto período de tempo pra desenvolver, mas se você tem um tempo extra para desenvolver seus projetos, então pode ficar à vontade para criar suas animações na mão.&lt;/p&gt;

&lt;h1 id=&#34;8220-muito-bem-eu-quero-utilizar-nos-meus-projetos-8221&#34;&gt;&amp;#8220;Muito bem, eu quero utilizar nos meus projetos&amp;#8221;&lt;/h1&gt;

&lt;h2 id=&#34;por-onde-começar&#34;&gt;Por onde começar:&lt;/h2&gt;

&lt;p&gt;É fácil integrar o framework no nosso projeto 😀 , veremos passo a passo como ultilizá-lo.&lt;/p&gt;

&lt;h4 id=&#34;passo-1-inclua-os-arquivos-necessários-no-head-para-que-suas-animações-funcionem-corretamente&#34;&gt;Passo 1, inclua os arquivos necessários no head, para que suas animações funcionem corretamente:&lt;/h4&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;yourpath/all-animation.css&#34; /&amp;gt;
&amp;lt;script type=&#34;text/javascript&#34; src=&#34;yourpath/jquery.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;passo-2-dentro-das-delimitações-da-tag-body-coloque-a-seguinte-estrutura-html&#34;&gt;Passo 2, dentro das delimitações da tag body, coloque a seguinte estrutura html:&lt;/h4&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;animation&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;button class=&#34;anny-class&#34;&amp;gt;Trigger class, go!&amp;lt;/button&amp;gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;**Obs: &amp;#8220;&lt;button&gt;&amp;#8221; &lt;strong&gt;é opcional, pois você também pode criar uma animação sem precisar de um ativador (pois o button funciona como um disparador da animação)&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-3-você-pode-usar-a-seguinte-linha-de-código-jquery-para-disparar-a-sua-animação&#34;&gt;Passo 3, você pode usar a seguinte linha de código jQuery, para disparar a sua animação:&lt;/h3&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;.anny-class&#34;).click(function(){
 $(&#34;#animation&#34;).addClass(&#34;journal&#34;);
});
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;journal é uma das classes que o nosso framework disponibiliza para nós usarmos&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Caso queira adicionar o efeito em algum determinado tempo, você pode adicionar um temporizador:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;setTimeout(function(){
 $(&#34;#animation&#34;).addClass(&#34;journal&#34;);
},2000);
&lt;/pre&gt;

&lt;h1 id=&#34;atenção&#34;&gt;Atenção:&lt;/h1&gt;

&lt;p&gt;Se você optar adicionar mais alguma animação em um elemento que já sofreu uma outra animação do All Animation, ou queira reiniciar a animação, você terá que remover a classe da última animação e inserir a sua, ex:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#animation&#34;).removeClass(&#34;journal&#34;).addClass(&#34;four-rock&#34;);&lt;/pre&gt;

&lt;p&gt;Temos várias classes no lugar da class journal, vejamos quais são:&lt;/p&gt;

&lt;h3 id=&#34;especiais&#34;&gt;Especiais:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    dance
  &lt;/li&gt;
  &lt;li&gt;
    journal
  &lt;/li&gt;
  &lt;li&gt;
    pulse
  &lt;/li&gt;
  &lt;li&gt;
    pulse-slow
  &lt;/li&gt;
  &lt;li&gt;
    jamp
  &lt;/li&gt;
  &lt;li&gt;
    four-rock
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bounce&#34;&gt;Bounce:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    enter-up-bounce
  &lt;/li&gt;
  &lt;li&gt;
    enter-down-bounce
  &lt;/li&gt;
  &lt;li&gt;
    enter-right-bounce
  &lt;/li&gt;
  &lt;li&gt;
    enter-left-bounce
  &lt;/li&gt;
  &lt;li&gt;
    scale-bounce
  &lt;/li&gt;
  &lt;li&gt;
    jump-bounce
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;perspective&#34;&gt;Perspective:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    tree-flip-right
  &lt;/li&gt;
  &lt;li&gt;
    tree-flip
  &lt;/li&gt;
  &lt;li&gt;
    tree-flip-up
  &lt;/li&gt;
  &lt;li&gt;
    tree-flip-down
  &lt;/li&gt;
  &lt;li&gt;
    flip-left-bounce
  &lt;/li&gt;
  &lt;li&gt;
    rotate-flip
  &lt;/li&gt;
  &lt;li&gt;
    flip-right-bounce
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fading-entrances&#34;&gt;Fading Entrances:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    flip-top
  &lt;/li&gt;
  &lt;li&gt;
    flip-left
  &lt;/li&gt;
  &lt;li&gt;
    flip-right
  &lt;/li&gt;
  &lt;li&gt;
    flip-bottom
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rotate&#34;&gt;&amp;gt;Rotate:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    rotate-flip-down
  &lt;/li&gt;
  &lt;li&gt;
    rotate-down-bounce
  &lt;/li&gt;
  &lt;li&gt;
    rotate-out
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;agrecives&#34;&gt;&amp;gt;Agrecives:&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
  &lt;li&gt;
    flash-bang
  &lt;/li&gt;
  &lt;li&gt;
    bomba
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não irei listar todas, até porque estou adicionando mais com o passar do tempo 😀&lt;/p&gt;

&lt;h1 id=&#34;mais-alguém-utiliza&#34;&gt;Mais alguém utiliza?&lt;/h1&gt;

&lt;p&gt;Segundo o google analytics, no primeiro mês que lancei este framework , mais de 127 países usaram o All Animation em seus projetos 😀&lt;/p&gt;

&lt;h1 id=&#34;finalizando-8230&#34;&gt;Finalizando&amp;#8230;&lt;/h1&gt;

&lt;p&gt;Segue abaixo dois links para mais informações:&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Ir para à página do All Animation CSS3&#34; href=&#34;http://clovisdasilvaneto.github.io/all-animation/&#34; target=&#34;_blank&#34;&gt;Clique aqui para visualizar uma demo, dos efeitos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;clique aqui para abrir o repositório no github&#34; href=&#34;https://github.com/clovisdasilvaneto/all-animation&#34; target=&#34;_blank&#34;&gt;Github, clique aqui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por hoje é só meus amigos ninjas, obrigado pela atenção, e até a próxima. 😀&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>O futuro do jQuery</title>
      <link>http://tableless.com.br/o-futuro-jquery/</link>
      <pubDate>Fri, 28 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-futuro-jquery/</guid>
      <description>

&lt;p&gt;Desde quando o jQuery foi lançado em 2006, ele se tornou extremamente indispensável no dia-a-dia do desenvolvimento web. Ele é usado em pelo menos 60% dos websites mais visitados e sem dúvida é uma das bibliotecas client-side mais usadas hoje em dia.&lt;/p&gt;

&lt;p&gt;O jQuery se tornou tão popular por uma razão: ele é limpo e sua API é fácil de usar porque abstrai a complexidade de scripts cross-browser, principalmente nos browsers antigos. Logo, conforme nos aproximamos de uma era na Web, onde os browsers estão se tornando rapidamente algo do passado, é compreensível o aumento da necessidade em utilizar tais APIs, mas pensando também na questão do futuro do jQuery.&lt;/p&gt;

&lt;p&gt;Mas antes que você pense qualquer coisa, vamos considerar uma alternativa.&lt;/p&gt;

&lt;h2 id=&#34;api-nativa&#34;&gt;API nativa&lt;/h2&gt;

&lt;p&gt;Embora o jQuery tenha adicionando um tremendo valor na web com o passar dos anos, ele criou uma densa camada entre desenvolvedores e o DOM. Muitos dos desenvolvedores não entendem exatamente o que está acontecendo por trás daquele sinal de dólar ($). Enquanto isso, todos os comandos nativos equivalentes são fáceis de usar.&lt;/p&gt;

&lt;p&gt;Isto não significa que precisamos evitar o jQuery. Nós precisamos considerar o jQuery como uma ferramenta ao invés de uma exigência. Avaliando o &lt;a href=&#34;http://github.com/jquery/jquery&#34; title=&#34;/a&amp;gt; quando comparamos a sintaxe do jQuery com as alternativas nativas. Estas comparações são uma boa base par&#34;&gt;código fonte do jQuery&lt;/a&gt;, podemos encontrar &lt;a href=&#34;http://www.paulirish.com/2010/10-things-i-learned-from-the-jquery-source/&#34; title=&#34;á acontecendo pro trás da cortina e é um grande passo para entender o DOM. Entretanto, é importante entender &#34;&gt;muito valor e algumas ideias&lt;/a&gt; sobre o que estamos usando. Há também &lt;a href=&#34;http://youmightnotneedjquery.com/&#34; title=&#34;inados a terem bugs. Na verdade, &amp;lt;a href=&amp;quot;http://blog.jquery.com/2013/01/14/the-state-of-jquery-2013/&amp;quot; title=&#34;&gt;muito&lt;/a&gt; o que &lt;a href=&#34;http://toddmotto.com/is-it-time-to-drop-jquery-essentials-to-learning-javascript-from-a-jquery-background/&#34; title=&#34;hes e correções para o Chrome, Safari e Firefox do que para o Internet Explorer&amp;quot;&amp;gt;o estado do jQuery em 2013&amp;lt;/&#34;&gt;conversar&lt;/a&gt; quando comparamos a sintaxe do jQuery com as alternativas nativas. Estas comparações são uma boa base para entender o que está acontecendo pro trás da cortina e é um grande passo para entender o DOM. Entretanto, é importante entender também que os browsers estão inclinados a terem bugs. Na verdade, &lt;a href=&#34;http://blog.jquery.com/2013/01/14/the-state-of-jquery-2013/&#34; title=&#34;jQuery 2.0 agora tem mais patches e correções para o Chrome, Safari e Firefox do que para o Internet Explorer&#34;&gt;o estado do jQuery em 2013&lt;/a&gt; afirma-se que o &amp;#8220;jQuery 2.0 agora tem mais patches e correções para o Chrome, Safari e Firefox do que para o Internet Explorer&amp;#8221;. Todo cuidado é pouco, seja cuidadoso quando abandonar o uso de uma biblioteca altamente testada e largamente utilizada como o jQuery.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34; xml:lang=&#34;en&#34;&gt;
  &lt;p&gt;
    You Might Not Need jQuery! … assuming you&amp;#39;ll address these bugs in your hand-written code: &lt;a href=&#34;https://t.co/j2hrG2nCpX&#34;&gt;https://t.co/j2hrG2nCpX&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Paul Irish (@paul_irish) &lt;a href=&#34;https://twitter.com/paul_irish/statuses/431584056883429376&#34;&gt;February 7, 2014&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;a-sintaxe-a-abstração&#34;&gt;A sintaxe, a abstração&lt;/h2&gt;

&lt;p&gt;Frameworks server-side como Ruby on Rails ou frameworks client-sides como Ember e Angular são largamente usadas por conveniência. Conveniência é economia de tempo, e tempo é dinheiro.&lt;/p&gt;

&lt;p&gt;jQuery === $ #amiright?&lt;/p&gt;

&lt;p&gt;Cada linha de código que é escrita nestes frameworks são vistos por milhões de olhos. Erros são capturados e bugs são encontrados.&lt;/p&gt;

&lt;p&gt;Nós também valorizamos um código limpo, curto, proficiente e rápido. Tamanho de arquivo desnecessário, features dispensáveis e condicionais são algo que precisamos considerar. Especialmente dado ao aumento de visitantes mobile. Isto pode ser resolvido com gerenciamento de dependências modulares.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34; xml:lang=&#34;en&#34;&gt;
  &lt;p&gt;
    “YOU MIGHT NOT NEED &lt;a href=&#34;https://twitter.com/jquery&#34;&gt;@jquery&lt;/a&gt;” Bullshit, we need granular dependency management for modular libraries.
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Stephan Bönnemann (@boennemann) &lt;a href=&#34;https://twitter.com/boennemann/statuses/429214761122021376&#34;&gt;January 31, 2014&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enquanto o futuro do jQuery seja incerto, uma coisa é clara, ele não vai a lugar nenhum. E mesmo que o código do jQuery continue pequeno e seu código legado continue sendo removido, ainda assim iremos continuar usando apenas uma fração de toda a biblioteca disponível. Nós não precisamos incluir toda a biblioteca apenas para usar uma parte dela.&lt;/p&gt;

&lt;p&gt;O futuro do jQuery é o gerenciamento modular de dependencias (eu espero).&lt;/p&gt;

&lt;h2 id=&#34;javascript-modular&#34;&gt;Javascript modular&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://browserify.org/&#34;&gt;Browserify&lt;/a&gt; e &lt;a href=&#34;http://requirejs.org/&#34;&gt;RequireJS&lt;/a&gt; são dois métodos para &lt;a href=&#34;http://addyosmani.com/writing-modular-js/]&#34;&gt;escrever Javascript de forma modular&lt;/a&gt;. Ambas as ferramentas tem construído scripts no qual incluem apenas os módulos que são necessários pela aplicação. Se o jQuery for modularizado dessa forma, partes do jQuery que você não usa não serão compiladas em produção. Você não precisa recompilar manualmente seu jQuery toda vez que quiser incluir uma nova feature. Você também nunca precisa se preocupar sobre remover features do jQuery caso não as utilize mais. Em desenvolvimento, estes módulos devem estar disponíveis para você, mas não devem ser publicados em produção a menos que eles sejam necessários em sua aplicação.&lt;/p&gt;

&lt;p&gt;No jQuery 1.9, o &lt;a href=&#34;https://github.com/jquery/jquery&#34;&gt;código fonte&lt;/a&gt; já foi modularizado. A curto prazo, isso permitiu a criação de um &lt;a href=&#34;https://github.com/jquery/jquery#how-to-build-your-own-jquery&#34;&gt;script que constrói um jQuery customizado&lt;/a&gt;. &lt;a href=&#34;http://zeptojs.com/#modules&#34;&gt;Muitas&lt;/a&gt; &lt;a href=&#34;http://lodash.com/custom-builds&#34;&gt;bibliotecas&lt;/a&gt; já tem implementado este tipo de coisa. A longo prazo, entretanto, isso pode permitir que o uso em um carregador AMD-compliant.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;jQuery é uma biblioteca poderosa, bem testada e muito utilizada. Mesmo que ainda faça sentido incluir o jQuery na maioria das suas aplicações web, é importante entender que o DOM não é um lugar assustador. O jQuery pode te ajudar a desviar de bugs e complicações, mas não deve substituir nosso conhecimento ou habilidade para manipular o DOM de forma efetiva e significante.&lt;/p&gt;

&lt;p&gt;O que você acha sobre o futuro do jQuery? &lt;a href=&#34;http://twitter.com/davearel&#34;&gt;Me envie uma mensagem via twitter @davearel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atualização (27 de Fevereiro de 2014):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se você nunca considerou uma implementação modular de dependências usando uma biblioteca como o jQuery, você irá entender que isto não é simples.&lt;/p&gt;

&lt;p&gt;Especialmente dado ao tamanho do código fonte do jQuery. Se você está interessado em contribuir para a discussão sobre como arquitetar algo assim, fale agora: &lt;a href=&#34;https://gist.github.com/davearel/9254418&#34;&gt;https://gist.github.com/davearel/9254418&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Artigo traduzido por &lt;strong&gt;&lt;a href=&#34;http://medium.com/@diegoeis&#34;&gt;Diego Eis&lt;/a&gt;&lt;/strong&gt; e &lt;a href=&#34;https://tech.bellycard.com/blog/the-future-of-jquery/&#34;&gt;escrito originalmente em inglês&lt;/a&gt; pelo &lt;a href=&#34;https://tech.bellycard.com/team/dave-arel/&#34;&gt;Dave Arel&lt;/a&gt; para o blog &lt;a href=&#34;https://tech.bellycard.com/&#34;&gt;Belly&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Se encontrar algum erro ou tem uma sugestão para melhorar a tradução, por favor, &lt;a href=&#34;http://tableless.com.br/contato/&#34;&gt;nos avise&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Considere não usar JQuery</title>
      <link>http://tableless.com.br/considere-nao-usar-jquery/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/considere-nao-usar-jquery/</guid>
      <description>

&lt;p&gt;Como todo novo começo, você aproveita para tentar fazer melhor e diferente. Com o novo design do Tableless, decidi tentar melhorar duas coisas: 1) a montagem do WordPress. 2) Fazer as funções JS sem o JQuery.&lt;/p&gt;

&lt;p&gt;Na primeira opção (que também merece um post separado) comecei a usar melhor algumas features do WordPress. Isso me ajudou a melhorar a performance e a organizar mais o código:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loops feitos com WP_Query() e get_posts().&lt;/li&gt;
&lt;li&gt;get_template_part para separar a incluir partes de código.&lt;/li&gt;
&lt;li&gt;wp_enqueue_script e wp_enqueue_style para distribuir os CSS e Javascripts necessários para cada tela. Isso ajuda a não carregar arquivos desnecessários em cada ela do site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depois faço um post explicando melhor cada ponto desse.&lt;/p&gt;

&lt;p&gt;Outra decisão foi retirar o JQuery. O Tableless não tem comportamentos densos e difíceis de fazer. Ele não é um site com milhões de linhas de javascript. É um site relativamente pequeno. Não há tantos assets para gerenciar. Por todos esses motivos, não havia sentido eu carregar o JQuery simplesmente para fazer um toggleClass, addClass, click ou qualquer outro comportamento simples&amp;#8230; Decidi então &lt;a href=&#34;http://tableless.com.br/wp-content/themes/tableless-2014/js/scripts.js&#34;&gt;retirar o JQuery e usar Javascript puro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Confesso que o código aumentou bastante, mas por que usar o JQuery só para fazer um ToggleClass? Eu sei que o javascript do site não vai ficar gigante. O site do Tableless é tão pequeno que também nem vale a pena ter o trabalho de usar grunt/gulp para minificar e concatenar o código. Faço várias pequenas alterações o tempo todo nele. Isso iria dificultar o processo de atualização.&lt;/p&gt;

&lt;p&gt;Com este novo design, o código JS ficou minúsculo. Basicamente só precisei usar os comandos &lt;strong&gt;classList&lt;/strong&gt; e o &lt;strong&gt;querySelector&lt;/strong&gt; do JS.&lt;/p&gt;

&lt;p&gt;Para você ter uma ideia de como funciona o classList. Se eu quiser adicionar uma classe em todos os divs de uma página, faço assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var $div = document.querySelectorAll(&#39;div&#39;);

  for (var i = 0; i &amp;lt; $div.length; i++) {
    $div[i].classList.add(&#39;classe1&#39;, &#39;classe2&#39;);
  }
&lt;/pre&gt;

&lt;p&gt;A única coisa que o JQuery facilitaria aqui, seria o tratamento da NodeList que o &lt;strong&gt;querySelectorAll&lt;/strong&gt;. No caso aí de cima, tive que fazer manualmente com um &lt;strong&gt;for&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://www.pinceladasdaweb.com.br&#34;&gt;Pedro Rogério&lt;/a&gt; &lt;a href=&#34;http://bit.ly/1m8zH8e&#34;&gt;escreveu sobre sua decisão de tirar JQuery de coisas pequenas&lt;/a&gt; também.&lt;/p&gt;

&lt;p&gt;Muitos desenvolvedores tem se amarrado ao JQuery ficando 100% dependentes do framework. Eu confesso que o código um pouco menor com JQuery. Mesmo assim, por causa de algumas linhas a mais, você deixa de explorar as novas APIs do Javascript, que encurtam o código tanto quanto o JQuery.&lt;/p&gt;

&lt;p&gt;Se você &lt;strong&gt;não&lt;/strong&gt; for fazer um grande framework, ou sistema complexo, ou um site gigante, considere usar Javascript puro.&lt;/p&gt;

&lt;h2 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;Não sou contra JQuery, de forma nenhuma. Você deve usá-lo sempre que julgar necessário. Em projetos grandes ou em lugares onde o Javascript vai se tornar complexos, ele é totalmente indicado.&lt;/p&gt;

&lt;p&gt;Também não estou brigando por causa dos 100kb do framework. O Gzip nesse caso resolve o tamanho. Estou apenas fazendo você pensar duas vezes antes de usar um framework, qualquer um que seja, para fazer algo simples.&lt;/p&gt;

&lt;p&gt;O Leo Balter &lt;a href=&#34;http://leobalter.github.io/pt-br/jquery/2014/02/19/o-hype-sobre-não-utilizar-jquery.html&#34;&gt;fez um post sensacional&lt;/a&gt; sobre isso dando vários exemplos usando o próprio Tableless.&lt;/p&gt;

&lt;p&gt;Lá ele pondera sobre vários pontos, alguns até que nem se aplicam ao Tableless, mas em projetos que talvez você possa estar envolvido, - como testes unitários, compatibilidade cross-browser e alguns outros - e que são muito relevantes quando tratados em websites com densos códigos de JS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Depois do artigo do Leo, aproveitei os pontos que ele citou lá e fiz umas modificações rápidas no Tableless. Ainda tenho várias coisas pra mudar, sabe comequié site novo. Ele fez um outro artigo mostrando uma melhora nos resultados depois dessas modificações. &lt;a href=&#34;http://leobalter.github.io/pt-br/jquery/2014/02/19/o-entendimento-técnico-de-uma-cr%C3%ADtica.html&#34;&gt;Dá uma olhada&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Menu Retrátil com CSS e jQuery</title>
      <link>http://tableless.com.br/menu-retratil-com-css-e-jquery/</link>
      <pubDate>Mon, 12 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/menu-retratil-com-css-e-jquery/</guid>
      <description>

&lt;p&gt;Neste artigo vamos criar passo-a-passo um menu retrátil super versátil que, com apenas algumas linhas de modificação, poderá ser utilizado na horizontal, vertical, sobrepondo ou empurrando o conteúdo de um site. Veja ainda como evitar os &lt;s&gt;malditos bugs&lt;/s&gt; problemas mais comuns deste tipo de navegação.&lt;/p&gt;

&lt;h3 id=&#34;mini-bibliotecas&#34;&gt;Mini bibliotecas&lt;/h3&gt;

&lt;p&gt;Uma das principais vantagens de escrever um HTML semântico e bem organizado é a versatilidade. Com um mesmo código é possível criar diversas variações de estilo utilizando apenas CSS. Na verdade muitas estruturas acabam se repetindo, embora visualmente diferentes. Isto acontece geralmente com formulários, rodapés e navegação. É o motivo pelo qual os frameworks estão tão populares ultimamente. Mas, muitas vezes, não precisamos de algo tão massivo e complexo quanto uma framework para tarefas simples. É algo como tentar acertar uma formiga com uma bazuca! É muito mais prático e funcional construir uma pequena biblioteca pessoal de snippets &amp;#8211; pequenos trechos de código. O formato não importa muito. Pode ser que você salve comentários no seu software de edição favorito, escreva em pequenos blocos de notas no seu computador, envie e-mails para si mesmo ou até mesmo utilize alguma ferramenta como &lt;a href=&#34;http://snippets.me/&#34; title=&#34;Snippets.me&#34;&gt;Snippets.me&lt;/a&gt;  ou &lt;a href=&#34;http://snippi.com/&#34; title=&#34;Snippi&#34;&gt;Snippi&lt;/a&gt;. Seja como for ter algumas cartas na manga é útil na hora de entregar aquele projeto para ontem e recuperar horas de sono. Este menu é uma das minhas.&lt;/p&gt;

&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;O HTML do menu é bem simples. Vamos usar uma div com a classe &amp;#8220;drop&amp;#8221;. Esta div será necessária para as versões do menu em que ele irá sobrepor o site. Ela irá funcionar como uma sustentação para a navegação. Nas demais versões, ela pode ser deletada.&lt;/p&gt;

&lt;p&gt;Dentro da div &amp;#8220;drop&amp;#8221; criamos uma &lt;code&gt;nav&lt;/code&gt; e, como um menu é sempre uma lista de links, vamos usar as tags &lt;code&gt;ul&lt;/code&gt; e &lt;code&gt;li&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No exemplo, o meu menu ocupa 100% da tela mas eu gostaria que os links ficassem dentro de um container centralizado. Para isso, adicionei uma div com a classe wrap e margin automática.&lt;/p&gt;

&lt;p&gt;No final, o HTML ficou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;drop&#34;&amp;gt;
&amp;lt;nav class=&#34;nav nav-aberta&#34;&amp;gt;
&amp;lt;div class=&#34;wrap&#34;&amp;gt;
&amp;lt;ul class=&#34;listaNav&#34;&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 6&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 7&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 8&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 9&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Para ter um elemento servindo de exemplo visual e ser sobreposto ou empurrado pelo meu menu, coloquei apenas uma imagem. Mas, pense nela como todo o conteúdo do site, okay?&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img alt=&#34;&#34; src=&#34;http://placehold.it/1920x800/&amp;text=Conteúdo&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Hoje vamos criar quatro menus utilizando este mesmo html como um coringa.&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Aqui já começamos a ter diferenças de um menu para o outro. Trabalharemos com media-queries que reordenarão os elementos de acordo com o tamanho do viewport do usuário, ou seja, da janela do browser. Para o exemplo, criei um media-querie com a max-width de 800px. É a partir desta largura que o menu se colapsa em apenas uma âncora. Altere este valor de acordo com o seu projeto, é claro.&lt;/p&gt;

&lt;h3 id=&#34;menus-horizontais&#34;&gt;Menus Horizontais&lt;/h3&gt;

&lt;p&gt;Hoje vamos desenvolver dois tipos de menus horizontais diferentes. Um empurrará todo o site para baixo ao abrir (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/fbgLl&#34; title=&#34;Navegação Responsiva 1&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38487&#34; alt=&#34;nav-1&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-1.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-1.jpg 660w, uploads/2013/08/nav-1-329x160.jpg 329w, uploads/2013/08/nav-1-588x286.jpg 588w, uploads/2013/08/nav-1-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E o outro, se abrirá sobre o site (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/iAeyx&#34; title=&#34;Navegação Responsiva 2&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38488&#34; alt=&#34;nav-2&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-2.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-2.jpg 660w, uploads/2013/08/nav-2-329x160.jpg 329w, uploads/2013/08/nav-2-588x286.jpg 588w, uploads/2013/08/nav-2-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note que entre os dois htmls existe apenas uma classe diferente: a div &amp;#8220;drop&amp;#8221;. Esta divisão extra está apenas no segundo exemplo no menu que passa por cima do conteúdo do site. Ela terá uma altura fixa, que será a altura do meu menu quando fechado. Quando ele se abrir, a div que sustenta nosso menu continuará do mesmo tamanho, fazendo com que os demais elementos sobreponham o resto do site.&lt;/p&gt;

&lt;p&gt;Primeiro, vamos ao CSS dele fechado. Como é só uma lista, eu apenas usei o parâmetro &amp;#8220;inline-block&amp;#8221; para que todos os itens se alinhem um ao lado do outro. Os demais parâmetros, são apenas estilização do menu. Não coloquei muitas coisas em termos visuais. Não é para ser bonito. A idéia é ter uma carcaça pronta para receber o SEU design. Eu coloquei na minha nav uma &amp;#8220;position: fixed&amp;#8221; para que o menu fique sempre à vista do usuário, e de fácil acesso. Mas, você não terá problemas se quiser trabalhar com uma posição relativa ou absoluta. Isso irá variar de acordo com o seu projeto.&lt;/p&gt;

&lt;p&gt;Outra coisa importante é o parâmetro &amp;#8220;nav-toggle&amp;#8221;. Ele será o gatilho para abrir e fechar o meu menu, tanto em sua versão vertical quanto na horizontal. Ele é inserido no meu HTML dinamicamente via JavaScript. No entanto, eu não quero que ele apareça quando estiver em resoluções maiores que 800px, por isso coloquei nele um &amp;#8220;display: none&amp;#8221; e, dentro do media-querie que irá atender viewports menores que 800px ele tem o &amp;#8220;display: block&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Veja como ficou o CSS do menu na horizontal que empurrará o site para baixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.wrap {
max-width: 1200px;
margin: 0 auto;
}

.nav {
background: #FFF;
z-index: 200;
position: fixed;
width: 100%;
font-size: 1em;
overflow: auto;
}

.nav ul {
padding: 1em;
}

li {
display: inline-block;
margin-right: 2em;
}

a {
text-decoration: none;
color: #444;
}

a:hover {
color: red;
}

.nav-toggle {
display: none;
}

.foto {
width: 100%;
}

/*Media Queries*/
@media only screen and (max-width: 800px) {
.wrap {
max-width: 100%;
margin: 0;
}

.nav.nav-aberta {
position: relative;
padding: 0 0 0.5em 0;
height: 0;
}

.nav ul {
padding: .5em;
margin: 0;
background: #444;
}

li {
margin: 0;
padding: 0;
display: block;
border-bottom: 1px solid #FFF;
}

li a {
padding: 0.5em 0 0.5em 0;
display: block;
color: #FFF;
}

li:last-child {
border-bottom:none;
}

.nav-toggle {
display: block;
padding: .4em;
margin: .5em 0;
}
}&lt;/pre&gt;

&lt;p&gt;As principais mudanças para telas menores são o .nav-toggle que agora é visível nas versões menores que 800px, a lista que deixa de ser &amp;#8220;inline-block&amp;#8221; para ser apenas &amp;#8220;block&amp;#8221; e a .nav, que antes tinha a posição fixa e agora é relativa.&lt;/p&gt;

&lt;p&gt;Na versão em que o menu irá passar por cima do site, defina uma altura para a classe .drop no media querie equivalente ao menu fechado, posição relativa e o z-index maior que os outros elementos para que ele possa se sobrepor. Veja o código:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.drop {
height: 48px;
position: relative;
z-index: 1000;
}&lt;/pre&gt;

&lt;p&gt;Uma maneira interessante de testar o menu funcionando antes de aplicar o JavaScript é modificar a altura da .nav para &amp;#8220;auto&amp;#8221; ou a altura que você quer que o seu menu tenha quando estiver aberto. Isso fará com que, ao redimensionar o seu browser, o menu apareça como se estivesse aberto. No entanto, para o nosso exemplo, vamos usar a altura 0.&lt;/p&gt;

&lt;h3 id=&#34;menus-verticais&#34;&gt;Menus Verticais&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38499&#34; alt=&#34;menu-lateral&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/menu-lateral.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/menu-lateral.jpg 660w, uploads/2013/08/menu-lateral-329x160.jpg 329w, uploads/2013/08/menu-lateral-588x286.jpg 588w, uploads/2013/08/menu-lateral-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;São dois os modelos de menu vertical:&lt;/p&gt;

&lt;p&gt;Um abrirá a partir da esquerda empurrando todo o site para a direita ao abrir (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/EKylp&#34; title=&#34;Navegação Responsiva 3&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38489&#34; alt=&#34;nav-3&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-3.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-3.jpg 660w, uploads/2013/08/nav-3-329x160.jpg 329w, uploads/2013/08/nav-3-588x286.jpg 588w, uploads/2013/08/nav-3-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E o outro, se abrirá sobre o conteúdo (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/wcCEK&#34; title=&#34;Navegação Responsiva 4&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38490&#34; alt=&#34;nav-4&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-4.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-4.jpg 660w, uploads/2013/08/nav-4-329x160.jpg 329w, uploads/2013/08/nav-4-588x286.jpg 588w, uploads/2013/08/nav-4-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Primeiro, vamos ao CSS do menu quando o viewport for maior que 800px. Neste exemplo, deixei o menu em um background escuro e ocupando 20% do viewport. Assim, o conteúdo, ocupará os 80% restantes. Como os itens da minha lista não ficarão mais uns aos lados dos outros, neste caso eu a mantive o display &amp;#8220;block&amp;#8221; desde o CSS desktop. E, também deixei o gatilho com &amp;#8220;display:none&amp;#8221; e a minha imagem com 80% de largura.&lt;/p&gt;

&lt;p&gt;Quanto ao CSS para telas menores o primeiro ponto é que, neste exemplo, trabalharemos com uma largura fixa para o menu. Deixei o padrão de 175px de largura. Usei esta medida pela segurança de não ficar muito grande em smartphones, já que o tamanho mais comum é de 320px de largura com ele em pé, 175px é uma medida segura para trabalharmos.&lt;/p&gt;

&lt;p&gt;Minha sidebar terá também a posição absoluta no exemplo. Isso serve para que ela possa &amp;#8220;passar por cima&amp;#8221; do conteúdo do site sem problemas. Na versão em que o site irá caminhar para o lado, faremos isso pelo JS.&lt;/p&gt;

&lt;p&gt;E, não podemos esquecer, do gatilho que irá ativar o nosso menu. Assim como no exemplo anterior, usei um item de classe .nav-toggle que será adicionado dinamicamente pelo Javascript. Deixei ele com o display:none fora do media-query e ele irá ter a posição absoluta quando o viewport for menor que 800px. Deixei o topo dele em 0 e ele será alinhado à partir da borda direita dele. Usei, neste caso, um valo negativo. Assim, ele ficará visível quando o meu menu estiver fechado, para ser clicado e, ao abrir, caminhará junto com o meu menu para ser clicado novamente e fecha-lo.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.wrap {
max-width: 1200px;
margin: 0 auto;
}

.nav {
background: #FFF;
z-index: 200;
position: relative;
width: 20%;
font-size: 1em;
float: left;
background: #444;
}

.nav ul {
padding: 1em;
}

li {
display: block;
width: 100%;
margin: 1em 2em 1em 0;
}

a {
text-decoration: none;
color: #FFF;
}

a:hover {
color: red;
}

.nav-toggle {
display: none;
}

.foto {
 width: 80%;
float: right;
}

/*Media Queries*/
@media only screen and (max-width: 800px) {
.wrap {
max-width: 100%;
margin: 0;
}

.nav {
width: 175px;
position: absolute;
top: 0;
left: 0;
}

.nav ul {
padding: .5em;
margin: 0;
background: #444;
}       

li {
margin: 0;
padding: 0;
display: block;
}

li a {
padding: 0.5em 0 0.5em 0;
display: block;
color: #FFF;
}

.nav-toggle {
position: absolute;
top: 0;
right: -56px;
color: #FFF;
cursor: pointer;
width: 44px;
height: 24px;
z-index: 1000;
display: block;
background: #444;
padding: 12px 6px 6px 6px;
}

.foto {
width: 100%;
position: relative;
float: none;
}
}&lt;/pre&gt;

&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;

&lt;p&gt;Como o nosso código utiliza jQuery a primeira coisa a fazer é chamar a biblioteca.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script src=&#34;//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;window.jQuery || document.write(&#39;&amp;lt;script src=&#34;js/vendor/jquery-1.9.1.min.js&#34;&amp;gt;&amp;lt;\/script&amp;gt;&#39;)&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Menus na Horizontal&lt;/p&gt;

&lt;p&gt;Para os dois casos do menu na horizontal, tanto o que empurra quanto o que sobrepõe o site, usei exatamente o mesmo JS. O que irá garantir que ele irá sobrepor o site é a classe .drop . Quando ela estiver com uma altura definida, ela será como um suporte para o menu e fará com que tudo passe por cima dos outros objetos do site. Quando ela não existir, ou não estiver com uma altura definida ela irá aumentar de tamanho, empurrando os demais elementos para baixo.&lt;/p&gt;

&lt;p&gt;A primeira coisa a fazer é utilizar addClass para colocar a classe &amp;#8220;fechada&amp;#8221; no menu. Esta classe será retirada quando o menu for aberto e irá aparecer quando ele fechar novamente. Servirá como um elemento para indicar ao meu JS o que irá fazer.&lt;/p&gt;

&lt;p&gt;Em seguida, utilize o comando de jQuery after para adicionar o gatilho para o menu. Caso queira que ele fique antes do menu, você pode substituir o &amp;#8220;after&amp;#8221; por &amp;#8220;before&amp;#8221;.&lt;/p&gt;

&lt;p&gt;A animação acontece através dos eventos &amp;#8220;click&amp;#8221; e &amp;#8220;animate&amp;#8221;.&lt;/p&gt;

&lt;p&gt;O JavaScript fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;$(&#34;.nav&#34;).addClass(&#34;fechada&#34;);
$(&#34;.nav&#34;).after(&#34;&amp;lt;a class=\&#34;nav-toggle\&#34;&amp;gt;Menu&amp;lt;/a&amp;gt;&#34;);

$(&#34;.nav-toggle&#34;).click(function() {
var altura = $(&#34;.nav ul&#34;).height();
if($(&#34;.nav&#34;).hasClass(&#34;fechada&#34;)) {
$(&#34;.nav&#34;).animate({height:altura},{queue:false, duration:200}).removeClass(&#34;fechada&#34;);
}
else {
$(&#34;.nav&#34;).animate({height:&#34;0px&#34;},{queue:false, duration:200}).addClass(&#34;fechada&#34;);
}
});&lt;/pre&gt;

&lt;p&gt;A mágica é a seguinte: quando o usuário clica no gatilho do menu (no caso, o .nav-toggle), ele pega a altura da minha lista de links. Depois, ele faz uma verificação na minha .nav . Se ela possuir a classe &amp;#8220;fechada&amp;#8221;, ela irá animar aumentando a altura dela e mostrando o menu. Caso esta classe não exista, ele diminui a altura escondendo o menu. Tudo isso na velocidade de 200 milisegundos.&lt;/p&gt;

&lt;p&gt;Escolhi este método por uma questão de praticidade. Existem outras maneiras de realizar o mesmo processo. Ao invés de adicionar uma classe, é possível, por exemplo, verificar a altura da .nav. Se for maior que 0px, significa que ela estava aberta e, ao clicar, será fechada. Se for igual a 0, é porque ela está fechada e precisará ser aberta.&lt;/p&gt;

&lt;h3 id=&#34;e-uma-dica&#34;&gt;E uma dica!&lt;/h3&gt;

&lt;p&gt;Para finalizar, vamos nos livrar de um bug chato que normalmente acontece: ao aumentar a tela para os valores maiores que o nosso media querie (no caso, 800px), o menu poderá ficar com a altura que ele estava quando aberto, e isso obviamente desalinha todo o layout.&lt;/p&gt;

&lt;p&gt;Resolver isso é bem fácil. Podemos fazer com que o nosso JS verifique, ao redimensionar a janela, qual é o tamanho do viewport. Se for maior que 800, ele volta a altura que deveria ter originalmente. Se for menor, ele simplesmente se fecha ou mantém a altura que estava quando aberta. No exemplo, eu fiz com que ele se fechasse. Veja como ficou o JS inteiro:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;$(&#34;.nav&#34;).addClass(&#34;fechada&#34;);
$(&#34;.nav&#34;).after(&#34;&amp;lt;a class=\&#34;nav-toggle\&#34;&amp;gt;Menu&amp;lt;/a&amp;gt;&#34;);

$(&#34;.nav-toggle&#34;).click(function() {
var altura = $(&#34;.nav ul&#34;).height();
if($(&#34;.nav&#34;).hasClass(&#34;fechada&#34;)) {
$(&#34;.nav&#34;).animate({height:altura},{queue:false, duration:200}).removeClass(&#34;fechada&#34;);
}
else {
$(&#34;.nav&#34;).animate({height:&#34;0px&#34;},{queue:false, duration:200}).addClass(&#34;fechada&#34;);
}
});

$(window).resize(function() {
var tamanhoViewport = $(window).width();
if (tamanhoViewport &amp;gt; 800) {
$(&#34;.nav&#34;).css(&#34;height&#34;,&#34;auto&#34;).addClass(&#34;fechada&#34;);
} else {
$(&#34;.nav&#34;).css(&#34;height&#34;,&#34;0px&#34;).addClass(&#34;fechada&#34;);
}
});&lt;/pre&gt;

&lt;p&gt;Menu Vertical&lt;/p&gt;

&lt;p&gt;Neste caso, a verificação da largura do viewport acontece em dois momentos. Uma quando o usuário redimensionar o browser e outra no momento que o documento é aberto. Em ambos, a condição é a mesma: se o tamanho da janela for menor que 800px, ele adiciona a classe &amp;#8220;side-fechado&amp;#8221;, o gatilho &amp;#8220;nav-toggle&amp;#8221; que irá animar o menu e colocar a posição dele como -175px à esquerda, o que garante que o menu ficará fechado logo após o usuário redimensionar o browser. Se for maior que 800px a posição à esquerda fica 0.&lt;/p&gt;

&lt;p&gt;(Lembrando que estas medidas de largura são subjetivas e devem ser alteradas a cada projeto.)&lt;/p&gt;

&lt;p&gt;O JS ficou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;//Menu Sidebar
$(window).resize(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
$(&#39;.foto&#39;).css(&#34;left&#34;, 0);
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}
});

$(document).ready(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);;
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}
});&lt;/pre&gt;

&lt;p&gt;Para animar o menu, vamos criar uma função de nome &amp;#8220;menu&amp;#8221;. Nesta função, ao clicar no gatilho &amp;#8220;.nav-toggle&amp;#8221;, acontecem duas coisas: verificação da existência da classe &amp;#8220;side-fechado&amp;#8221; e animação do menu. Se possuir, o JavaScript anima a navegação para 0px da borda esquerda do menu. Caso não possua (o que indica para nós que o menu está aberto) a navegação volta para os -175px negativos.&lt;/p&gt;

&lt;p&gt;O JS fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function menu() {
$(&#39;.nav-toggle&#39;).click(function() {
if($(&#34;.nav&#34;).hasClass(&#34;side-fechado&#34;)) {
$(&#39;.nav&#39;).animate({
left: &#34;0px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).removeClass(&#34;side-fechado&#34;);
});
}
else {
$(&#39;.nav&#39;).animate({
left: &#34;-175px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).addClass(&#34;side-fechado&#34;);
});
}
});
}&lt;/pre&gt;

&lt;p&gt;Neste exemplo, ele está sobrepondo o conteúdo do site. Mas, eu posso fazer com que ele empurre o site para a direita quando surgir e para a esquerda quando fechar. Para isso, eu coloco um animate no conteúdo do site também (no exemplo, o meu objeto de classe &amp;#8220;.foto&amp;#8221;). O JS fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function menu() {
$(&#39;.nav-toggle&#39;).click(function() {
if($(&#34;.nav&#34;).hasClass(&#34;side-fechado&#34;)) {
$(&#39;.nav&#39;).animate({
left: &#34;0px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).removeClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;175px&#34;,
}, 100);
}
else {
$(&#39;.nav&#39;).animate({
left: &#34;-175px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).addClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;0px&#34;,
}, 100);
}
});
}&lt;/pre&gt;

&lt;p&gt;Agora, é só chamar a função &amp;#8220;menu&amp;#8221; depois das verificações de tamanho da janela. O JS completo fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function menu() {
$(&#39;.nav-toggle&#39;).click(function() {
if($(&#34;.nav&#34;).hasClass(&#34;side-fechado&#34;)) {
$(&#39;.nav&#39;).animate({
left: &#34;0px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).removeClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;175px&#34;,
}, 100);
}
else {
$(&#39;.nav&#39;).animate({
left: &#34;-175px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).addClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;0px&#34;,
}, 100);
}
});
}

//Menu Sidebar
$(window).resize(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
$(&#39;.foto&#39;).css(&#34;left&#34;, 0);
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}

menu();
});

$(document).ready(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);;
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}

menu();
});&lt;/pre&gt;

&lt;h2 id=&#34;demos&#34;&gt;Demos&lt;/h2&gt;

&lt;p&gt;Você pode fazer aqui o &lt;a href=&#34;http://cl.ly/0E0C3O0j2r2T&#34; title=&#34;Navegação Responsiva - Demo&#34;&gt;download dos arquivos&lt;/a&gt; com os exemplos criados ou brincar com as demos online no Codepen.&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/fbgLl&#34; title=&#34;Navegação Responsiva 1&#34;&gt;Navegação 1 &amp;#8211; Menu horizontal empurrando o conteúdo para baixo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/iAeyx&#34; title=&#34;Navegação Responsiva 2&#34;&gt;Navegação 2 &amp;#8211; Menu horizontal passando sobre o conteúdo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/EKylp&#34; title=&#34;Navegação Responsiva 3&#34;&gt;Navegação 3 &amp;#8211; Menu lateral empurrando o conteúdo para o lado.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/wcCEK&#34; title=&#34;Navegação Responsiva 4&#34;&gt;Navegação 4 &amp;#8211; Menu lateral passando sobre o conteúdo.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;A navegação é sempre uma parte fundamental de qualquer layout. Cuidar para que ela apareça da maneira mais otimizada possível, não apenas em aparelhos mobile, mais em dispositivos com o viewport reduzido não é mais um luxo, mas uma necessidade. Existem algumas outras abordagens até mesmo utilizando apenas CSS3. É importante conhecer diversas soluções para adequar as necessidades de cada projeto. Reaproveitando trechos de código como este podemos garantir que o processo de desenvolvimento seja ágil e preciso, sem sacrificar qualidade, semântica e a experiência do usuário.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jQuery 2.0</title>
      <link>http://tableless.com.br/jquery-2-0/</link>
      <pubDate>Thu, 23 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/jquery-2-0/</guid>
      <description>

&lt;p&gt;Há cerca de um mês o jQuery 2.0 foi oficialmente lançado. Neste meio tempo pudemos analisar a nova versão da biblioteca e conhecer de perto as novidades. Mas será que vale a pena fazer o upgrade? Ou já é hora de abandonar o barco? Conheça os novos recursos da biblioteca, diga adeus para alguns antigos e decida por si mesmo.&lt;/p&gt;

&lt;h2 id=&#34;builds-customizáveis&#34;&gt;Builds Customizáveis&lt;/h2&gt;

&lt;p&gt;O jQuery funciona como uma biblioteca real. Você pode escolher quais livros entram e quais vão embora da sua prateleira pessoal. Desde a compilação 1.8 já existia a opção de personalizar a biblioteca. Agora na versão 2.0 este recurso foi ampliado. É possível selecionar entre 12 módulos diferentes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ajax&lt;/strong&gt;: Todas as funcionalidades do AJAX: $.ajax(), $.get(), $.post(), $.ajaxSetup(), .load(), transports, e todos os atalhos de ajax, como.ajaxStart().&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax/xhr&lt;/strong&gt;: Apenas o evento de transporte do AJAX XMLHTTPRequest.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax/script&lt;/strong&gt;: Método de transporte AJAX// &amp;lt;![CDATA[; usado para recuperar scripts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax/jsonp&lt;/strong&gt;: Método de transporte JSONP AJAX; depende do transporte ajax/script.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css&lt;/strong&gt;: O método .css() mais .show(), .hide() e .toggle() não animados.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deprecated&lt;/strong&gt;: Métodos documentados como obsoletos mas que não foram removidos. Atualmente apenas .andSelf().&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dimensions&lt;/strong&gt;: Os metodos .width() e .height() , incluindo as variações inner- e outer-.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;effects&lt;/strong&gt;: O método .animate() e seus atalhos como .slideUp() e .hide(&amp;#8220;slow&amp;#8221;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;event-alias&lt;/strong&gt;: Eventos com gatilhos, como .click() ou .mouseover().&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset&lt;/strong&gt;: Os métodos .offset(), .position(), .offsetParent(), .scrollLeft(), e .scrollTop()&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wrap&lt;/strong&gt;: Métodos .wrap(), .wrapAll(), .wrapInner(), e .unwrap().&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sizzle&lt;/strong&gt;: O motor de seletor Sizzle. Quando este módulo é excluido, ele é substituido por um motor de seletor rudimentar baseado no método querySelectorAll do browser, que não é suportado pelas extensões de seletores ou pela semântica aumentada do jQuery.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eliminar os módulos inúteis para o seu projeto é uma boa prática que pode pode diminuir e muito o tamanho da biblioteca (a versão mais simples pode chegar a cerca de 10Kb quando minificada). Mas Infelizmente ainda não é uma solução prática já que para construir sua versão customizada do jQuery você precisa conhecer um pouco sobre Git, Node.js e Grunt. Você pode ler as &lt;a href=&#34;https://github.com/jquery/jquery/#readme&#34; title=&#34;jQuery ReadMe&#34;&gt;instruções completas&lt;/a&gt; no repositório da equipe. Ou você pode usar o gerador automático &lt;a href=&#34;http://projects.jga.me/jquery-builder/&#34; title=&#34;jQuery Builder&#34;&gt;jQuery builder&lt;/a&gt;. Ele ainda não é compatível com todos os módulos novos, mas já quebra um galho. Ah, e ele funciona também para personalizar as versões mais antigas do jQuery.&lt;/p&gt;

&lt;p&gt;Parece óbvio, mas vale lembrar que os plugins que você pretende utilizar precisam estar trabalhando com os mesmos módulos que você escolheu ou simplesmente não vão funcionar.&lt;/p&gt;

&lt;h2 id=&#34;o-jquery-2-0-não-é-compatível-com-ie-6-7-8&#34;&gt;O jQuery 2.0 não é compatível com IE 6/7/8&lt;/h2&gt;

&lt;p&gt;É isto mesmo. Segundo a equipe de desenvolvimento o jQuery é &amp;#8220;feito para a Web moderna&amp;#8221; e ao abandonar o suporte aos browsers mais antigos eles podem agora se concentrar em deixar a biblioteca mais rápida, leve, etc. Esta atitude foi no mínimo controversa já que muitos profissionais optavam por desenvolver em jQuery em detrimento de soluções mais práticas como HTML5/CSS3 justamente pela retro-compatibilidade.&lt;/p&gt;

&lt;p&gt;Se desenvolver algo acessível para as versões mais antigas do Internet Explorer é algo realmente importante pra você não se desespere. A versão 1.9 continuará sendo suportada pela equipe&amp;#8230; Ou seja, a partir de agora existirão dois caminhos de desenvolvimento diferentes. Algo como duas timelines: uma para a versão 1x e outra para a 2x. Mas é provável que as próximas mudanças da família 1x sejam apenas correções de bugs. Para ser sincera não acredito que implantarão recursos novos. Espero estar errada.&lt;/p&gt;

&lt;h2 id=&#34;mais-leve&#34;&gt;Mais Leve&lt;/h2&gt;

&lt;p&gt;O jQuery 2.0 é 12% mais leve do que a versão anterior (1.9.1). Mas isto, infelizmente, não foi graças a uma otimização mágica. Ser mais leve frequentemente implica em perda de funcionalidades e esta foi a decisão estratégica da equipe do jQuery. Estes 12% a mais eram justamente os patches de compatibilidade do IE que foram retirados. E podemos esperar mais cortes deste tipo no futuro. Provavelmente as próximas atualizações do jQuery não serão compatíveis com versões antigas do Android/Webkit 2.x.&lt;/p&gt;

&lt;h2 id=&#34;onde-eu-consigo&#34;&gt;Onde eu consigo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://code.jquery.com/jquery-2.0.0.min.js&#34; title=&#34;jQuery 2.0 Min&#34;&gt;http://code.jquery.com/jquery-2.0.0.min.js&lt;/a&gt; (minificada, para produção)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://code.jquery.com/jquery-2.0.0.js&#34; title=&#34;jQuery 2.0&#34;&gt;http://code.jquery.com/jquery-2.0.0.js&lt;/a&gt; (não minificada, para teste)&lt;/p&gt;

&lt;h2 id=&#34;fallback&#34;&gt;Fallback&lt;/h2&gt;

&lt;p&gt;Como dito anteriormente o jQuery 2.0 não é compatível com IE 6/7/8. A solução proposta pela equipe é utilizar comentários condicionais como Fallback.&lt;/p&gt;

&lt;pre class=&#34;lang-HTML&#34;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;
&amp;lt;script src=&#34;jquery-1.9.1.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;![endif]--&amp;gt;
&amp;lt;!--[if gte IE 9]&amp;gt;&amp;lt;!--&amp;gt;
&amp;lt;script src=&#34;jquery-2.0.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!--&amp;lt;![endif]--&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;vale-a-pena-mudar&#34;&gt;Vale a pena mudar?&lt;/h2&gt;

&lt;p&gt;A resposta para esta, como muitas outras perguntas sobre desenvolvimento web é depende. Eu também gostaria de viver em um mundo mágico onde ninguém utiliza IE8, mas infelizmente ele ainda é um browser relativamente popular. Os números flutuam de acordo com as pesquisas que você utiliza, mas considerando a &lt;a href=&#34;http://www.w3schools.com/browsers/browsers_explorer.asp&#34; title=&#34;Browser Explorer - W3C Schools&#34;&gt;W3C Schools&lt;/a&gt; o IE 8 representa cerca de 5.3% dos usuários. Se você esta pensando em implementar o jQuery 2.0 no seu site minha recomendação é ignorar estatísticas genéricas e analisar o seus próprios dados para conhecer seus visitantes e tomar uma decisão informada. No geral a nova versão tem mais prós do que contra e até que a participação de mercado do Internet Explorer 6. 7 e 8 realmente diminua ela pode ser inviável se este for seu público alvo. Manter duas versões em comentários condicionais, como sugerido pela própria equipe do jQuery, pode ir contra a proposta de facilitar o desenvolvimento e acabar mais atrapalhando que auxiliando, já que precisaríamos trabalhar com duas bibliotecas diferentes. Se compatibilidade com o IE não é um problema vá em frente e seja feliz!&lt;/p&gt;

&lt;h2 id=&#34;pouco-demais-tarde-demais&#34;&gt;Pouco demais, tarde demais?&lt;/h2&gt;

&lt;p&gt;Quando o jQuery foi lançado ele representou uma mudança grande no modo como pensávamos a internet. Naqueles idos tempos de 2006 a web era um lugar bem diferente. O iPhone ainda não havia sido lançado e nem se sonhava em algo como design responsivo. Muitos sites naquela época ainda utilizavam o formato Flash para interações, mas isto já estava com os dias contados. A nova ordem agora era cortar o peso desnecessário e desenvolver sites mais semânticos e compatíveis com multiplos browsers. Mas alguns desenvolvedores se sentiram orfãos da capacidade de animações dinâmicas oferecidas pelo Flash. O jQuery chegou na hora certa para suprir esta necessidade ao mesmo tempo que oferecer uma solução crossbrowser. Muita gente se jogou de cabeça e centenas de plugins surgiram para todo tipo de situação. Slider, carrosel, shadowbox, pequenas animações&amp;#8230; O mecanismo dos plugins era tão simples que até quem não era familiarizado com JavaScript conseguia implementar com facilidade. E isto foi utilizado com um certo exagero. O que era novo acabou tornando-se repetitivo e até desnecessário algumas vezes. Por uma ironia do destino, o jQuery aos poucos vai sofrendo o mesmo destino do Flash: ser pesado demais para a nova geração. Com o crescimento de dispositivos móveis a preocupação com a perda de peso no browser ficou ainda maior. E as tendências de design minimalista acabam jogando para escanteio todas aquelas firulas e animações desnecessárias. O que entusiasmava muitos no inicio acaba sendo ouvido com uma certa torcida de nariz da comunidade de desenvolvedores.&lt;/p&gt;

&lt;p&gt;O HTML5 e o CSS3 ganharam mais espaço (afinal você pode &lt;a href=&#34;http://tableless.com.br/elementos-de-interface-utilizando-apenas-css3&#34; title=&#34;Elementos de interface utilizando apenas css3&#34;&gt;criar diversos elementos da user interface&lt;/a&gt; utilizando apenas estas tecnologias) e houve uma revitalização do JS baunilha. É, de repente, o jQuery não parece mais tão leve e legal assim quanto no inicio. É claro, ainda existe muita coisa bacana para ser feita com jQuery, mas infelizmente não existe a mesma empolgação de quando era algo novo. Agora é esperar para ver se as próximas versões irão revolucionar novamente a vida dos desenvolvedores.&lt;/p&gt;

&lt;h2 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.jquery.com/2013/04/18/jquery-2-0-release&#34; title=&#34;jQuery 2.0 Release&#34;&gt;jQuery 2.0 Release&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zepto.js: JavaScript peso-leve</title>
      <link>http://tableless.com.br/zepto-js-biblioteca-javascript-peso-leve/</link>
      <pubDate>Wed, 20 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/zepto-js-biblioteca-javascript-peso-leve/</guid>
      <description>

&lt;p&gt;Em tempos em que performance é muito valorizada, a escolha de bibliotecas e plugins extras influencia diretamente no peso do seu site ou aplicativo.&lt;/p&gt;

&lt;p&gt;Com aproximadamente 10kb em sua versão minificada (jQuery, por exemplo, tem 94kb), o framework &lt;strong&gt;Zepto.js&lt;/strong&gt; pode ser o mais indicado para quem deseja melhorar a performance e manter a compatibilidade com a API do jQuery.&lt;/p&gt;

&lt;h2 id=&#34;se-você-sabe-jquery-você-já-sabe-zepto&#34;&gt;Se você sabe jQuery, você já sabe Zepto&lt;/h2&gt;

&lt;p&gt;Além de ser leve, o Zepto.js é também compatível com a maioria dos métodos jQuery. Todos os seletores e métodos para manipulação de CSS/HTML são praticamente idênticos.&lt;/p&gt;

&lt;p&gt;No entanto, é importante frisar que o framework Zepto.js não é 100% compatível (e nem pretende ser) com a API do jQuery. Alguns métodos, inclusive, possuem assinaturas diferentes.&lt;/p&gt;

&lt;h2 id=&#34;funciona-apenas-em-browsers-modernos&#34;&gt;Funciona apenas em browsers modernos&lt;/h2&gt;

&lt;p&gt;Para ser leve, o código do Zepto.js precisou abdicar de &lt;em&gt;hacks&lt;/em&gt; e &lt;em&gt;workarounds&lt;/em&gt; para navegadores mais antigos. Seu foco é funcionar em browsers modernos, tanto em suas versões desktop como mobile.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;fallback&lt;/em&gt; para fazer uso do framework nos navegadores mais antigos é aplicar o seguinte trecho de código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script&amp;gt;
document.write(&#39;&amp;lt;script src=&#39; +
(&#39;__proto__&#39; in {} ? &#39;zepto&#39; : &#39;jquery&#39;) +
&#39;.js&amp;gt;&amp;lt;\/script&amp;gt;&#39;)
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Caso o navegador não dê suporte à propriedade &lt;strong&gt;proto&lt;/strong&gt; em objetos JavaScript, o framework carregado será o jQuery.&lt;/p&gt;

&lt;h2 id=&#34;base&#34;&gt;Base&lt;/h2&gt;

&lt;p&gt;Os métodos do core do Zepto são muito parecidos com os métodos do core do jQuery. Por exemplo, para alterar o html de um elemento, utilizamos o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;#home&#39;).html(&#39;&amp;lt;a href=&#34;index.html&#34;&amp;gt;home&amp;lt;/a&amp;gt;&#39;);&lt;/pre&gt;

&lt;p&gt;Para alterar o CSS de um ou mais elementos com a classe &lt;em&gt;item-menu&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.item-menu&#39;).css(&#39;background-color&#39;, &#39;red&#39;);&lt;/pre&gt;

&lt;p&gt;Ou ainda:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.item-menu&#39;).css({backgroundColor: &#39;red&#39;, color: &#39;#fff&#39;});&lt;/pre&gt;

&lt;p&gt;Para adicionar um novo elemento a um elemento existente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;&amp;lt;a href=&#34;index.html&#34;&amp;gt;home&amp;lt;/a&amp;gt;&#39;).appendTo(&#39;nav&#39;);&lt;/pre&gt;

&lt;p&gt;Notaram a semelhança com jQuery? Esse é um dos pontos fortes do Zepto.js, uma curva de aprendizado quase nula para quem já desenvolve com jQuery.&lt;/p&gt;

&lt;h2 id=&#34;eventos-efeitos&#34;&gt;Eventos &amp;amp; Efeitos&lt;/h2&gt;

&lt;p&gt;A associação de eventos também segue a API do jQuery:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;a&#39;).on(&#39;click&#39;, function(e){ console.log(&#39;clique&#39;); });
$(&#39;#home&#39;).click(function(e){ e.preventDefault(); });&lt;/pre&gt;

&lt;p&gt;A parte de efeitos é composta do objeto &lt;strong&gt;$.fx&lt;/strong&gt;, responsável pelas configurações globais de animação e do método &lt;em&gt;animate&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#top-nav&#34;).animate({
  marginTop: &#39;30px&#39;,
  backgroundColor: &#39;#000&#39;,
  rotateX: &#39;10deg&#39;
}, 300, &#39;linear&#39;)&lt;/pre&gt;

&lt;p&gt;A diferença principal é que as animações do framework Zepto.js são todas feitas utilizando transições e transformações CSS3.&lt;/p&gt;

&lt;h2 id=&#34;ajax&#34;&gt;Ajax&lt;/h2&gt;

&lt;p&gt;Assim como o módulo de efeitos, as configurações globais para Ajax também ficam armazenadas em um objeto, o &lt;strong&gt;$.ajaxSettings&lt;/strong&gt;. É possível alterar o tipo padrão de requisição (o default é GET), o timeout, o tipo de dados entre outros.&lt;/p&gt;

&lt;p&gt;Também é possível configurar os callbacks para as seguintes operações: &lt;em&gt;beforeSend&lt;/em&gt;, &lt;em&gt;success&lt;/em&gt;, &lt;em&gt;error&lt;/em&gt; e &lt;em&gt;complete&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Chamadas Ajax são realizadas utilizando o método &lt;strong&gt;$.ajax&lt;/strong&gt; ou seus atalhos &lt;strong&gt;$.get&lt;/strong&gt;, &lt;strong&gt;$.post&lt;/strong&gt; e &lt;strong&gt;$.getJSON&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$.post(&#39;/projeto/novo&#39;, {titulo: &#39;Novo projeto&#39;}, function(response){
  console.log(&#39;Projeto criado com sucesso&#39;);
});&lt;/pre&gt;

&lt;p&gt;As operações Ajax também disparam eventos que podem ser utilizados por elementos da sua aplicação, entre eles &lt;em&gt;ajaxStart&lt;/em&gt;, &lt;em&gt;ajaxError&lt;/em&gt; e &lt;em&gt;ajaxComplete&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(document).on(&#39;ajaxError&#39;, function(e, xhr, options, error){
  console.log(&#39;;Erro: &#39;; + error);
});&lt;/pre&gt;

&lt;p&gt;O trecho de código acima captura qualquer evento de erro disparado por uma chamada Ajax e exibe o motivo do erro no console.&lt;/p&gt;

&lt;h2 id=&#34;touch-mobile&#34;&gt;Touch &amp;amp; Mobile&lt;/h2&gt;

&lt;p&gt;Originalmente criado para atender especificamente dispositivos mobile, o framework Zepto.js oferece suporte aos seguintes eventos de dispositivos de toque:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tap, singleTap, doubleTap e longTap&lt;/li&gt;
&lt;li&gt;swipe, swipeLeft, swipeRight, swipeUp, swipeDown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Os eventos são associados como qualquer outro tipo de evento:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;#home&#39;).tap(function() {
  $(&#39;;.home-nav&#39;;).toggle();
});

$(&#39;#galeria&#39;).swipe(function() {
  $(this).animate({marginLeft: &#34;-100px&#34;}, 300, &#34;ease-out&#34;);
});&lt;/pre&gt;

&lt;p&gt;O módulo touch é opcional e não acompanha o build default do Zepto.js.&lt;/p&gt;

&lt;h2 id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;Como era de se esperar, o desenvolvimento de plugins para Zepto.js segue o padrão jQuery de estender o objeto $.fn:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$.extend($.fn, {
  meuPlugin: function(){&amp;lt;/p&gt;
  // this é a coleção obtida no seletor
  return this;
});&lt;/pre&gt;

&lt;p&gt;A base de plugins ainda é infinitamente menor do que a base de plugins jQuery. O desenvolvedor brasileiro Jean Carlo Emer possui dois plugins interessantes que podem servir de base para você criar os seus próprios plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jcemer.com/zepto-carousel/&#34;&gt;Zepto Carousel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jcemer.com/zepto-range/&#34;&gt;Zepto Range&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;referências&#34;&gt;Referências&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Site oficial:&lt;/em&gt; &lt;a href=&#34;http://zeptojs.com/&#34;&gt;zeptojs.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Código-fonte:&lt;/em&gt; &lt;a href=&#34;https://github.com/madrobby/zepto&#34;&gt;github.com/madrobby/zepto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Plugins jQuery e bibliotecas JavaScript para e-commerces</title>
      <link>http://tableless.com.br/plugins-jquery-e-bibliotecas-javascript-para-e-commerces/</link>
      <pubDate>Tue, 26 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/plugins-jquery-e-bibliotecas-javascript-para-e-commerces/</guid>
      <description>

&lt;h2 id=&#34;jquery-payment&#34;&gt;jQuery.payment&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://stripe.com/blog/jquery-payment&#34; title=&#34;https://stripe.com/blog/jquery-payment&#34;&gt;https://stripe.com/blog/jquery-payment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O plugin jQuery.payment valida o número dos principais cartões do mercado. Desenvolvido pelo pessoal da &lt;a href=&#34;https://stripe.com/&#34; title=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt;, empresa especializada em uma solução de pagamento para desenvolvedores de e-commerces, o plugin conta com validadores para números de cartão de crédito, data de validade e código de segurança.&lt;/p&gt;

&lt;p&gt;Exemplos de uso:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$(&#39;.numero-cartao&#39;).payment(&#39;formatCardNumber&#39;);
$(&#39;.expiracao-cartao&#39;).payment(&#39;formatCardExpiry&#39;);
$(&#39;.codigo-cartao&#39;).payment(&#39;formatCardCVC&#39;);
$(&#39;.numerico&#39;).payment(&#39;restrictNumeric&#39;);&lt;/pre&gt;

&lt;p&gt;É possível também tirar proveito de alguns utilitários que acompanham o plugin e executar tarefas de validação, além de retornar informações do cartão baseado no número e a data de validade como um objeto:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$.payment.validateCardNumber(&#39;4242 4242 4242 4242&#39;); //=&amp;gt; true
$.payment.validateCardExpiry(&#39;05&#39;, &#39;05&#39;); //=&amp;gt; false
$.payment.validateCardCVC(&#39;12344&#39;); //=&amp;gt; false
$.payment.cardType(&#39;4242 4242 4242 4242&#39;); //=&amp;gt; &#39;visa&#39;
$.payment.cardExpiryVal(&#39;05 / 04&#39;); //=&amp;gt; {month: 5, year: 2004}&lt;/pre&gt;

&lt;p&gt;O código-fonte, em CoffeeScript, está disponível no GitHub: &lt;a href=&#34;https://github.com/stripe/jquery.payment&#34; title=&#34;https://github.com/stripe/jquery.payment&#34;&gt;https://github.com/stripe/jquery.payment&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;accounting-js&#34;&gt;accounting.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://josscrowcroft.github.com/accounting.js/&#34; title=&#34;http://josscrowcroft.github.com/accounting.js/&#34;&gt;http://josscrowcroft.github.com/accounting.js/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accounting.js é uma biblioteca JavaScript com funções utilitárias para formatar números e valores monetários.&lt;/p&gt;

&lt;p&gt;Além de formatar números, extrair valores e converter números decimais, a biblioteca implementa uma função bem interessante para padronizar a exibição de números em colunas de uma tabela.&lt;/p&gt;

&lt;p&gt;Exemplos de uso:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;accounting.formatMoney(1337.99, &#34;R$&#34;, 2, &#34;.&#34;, &#34;,&#34;); // R$1.337,99
accounting.formatColumn([99.9, 12.39, 44.33, 84950, -22], &#34;R$&#34;);
// [&#34;R$    99.90&#34;, &#34;R$    12.39&#34;, &#34;R$    44.33&#34;, &#34;R$84,950.00&#34;, &#34;R$   -22.00&#34;]
accounting.formatNumber(86960, 2, &#34;.&#34;, &#34;,&#34;); // &#34;86.960,00&#34;
(0.932).toFixed(2); // &#34;0.93&#34;
accounting.unformat(&#34;R$ 29.443,32&#34;, &#34;,&#34;); // 29443.32&lt;/pre&gt;

&lt;p&gt;Para padronizar o formato em todas as funções, sem a necessidade de utilizar parâmetros extras em suas chamadas, basta atualizar o objeto &lt;em&gt;accounting.settings&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;accounting.settings = {
  currency: {
      symbol : &#34;R$&#34;,
      decimal : &#34;,&#34;,
      thousand: &#34;.&#34;,
      precision : 2 
  }
}&lt;/pre&gt;

&lt;h2 id=&#34;masked-input&#34;&gt;Masked Input&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://digitalbush.com/projects/masked-input-plugin/&#34; title=&#34;http://digitalbush.com/projects/masked-input-plugin/&#34;&gt;http://digitalbush.com/projects/masked-input-plugin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ainda falando de formatação, temos o plugin MaskedInput, responsável por formatar qualquer &lt;em&gt;input&lt;/em&gt; em formulários, garantindo assim uma maior integridade dos dados digitados.&lt;/p&gt;

&lt;p&gt;Exemplos de uso:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$(&#34;.cnpj&#34;).mask(&#34;99.999.999/9999-99&#34;);
$(&#34;.cpf&#34;).mask(&#34;999.999.999-99&#34;);
$(&#34;.telefone&#34;).mask(&#34;(99) 9999-9999&#34;);
$(&#34;.cep&#34;).mask(&#34;99.999-999&#34;);&lt;/pre&gt;

&lt;p&gt;É importante lembrar que esses tipos de formatação e validação não devem ser realizados apenas no cliente &amp;#8211; devem ser processados também no servidor.&lt;/p&gt;

&lt;h2 id=&#34;ideal-forms&#34;&gt;Ideal Forms&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://elclanrs.github.com/jq-idealforms/&#34; title=&#34;http://elclanrs.github.com/jq-idealforms/&#34;&gt;http://elclanrs.github.com/jq-idealforms/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Formulários são uma parte importante de qualquer e-commerce e, geralmente, são a parte mais chata para o usuário: os cadastros tendem a ser tediosos, com campos desnecessários, validações mal-feitas e falta de informações.&lt;/p&gt;

&lt;p&gt;O plugin Ideal Forms é uma ferramenta completa para a criação de formulários intuitivos e visualmente atraentes. Seus recursos incluem &lt;em&gt;inputs&lt;/em&gt; customizáveis (&lt;em&gt;select&lt;/em&gt;, &lt;em&gt;radio&lt;/em&gt;, &lt;em&gt;checkbox&lt;/em&gt; e arquivo), validação &lt;em&gt;on-the-fly&lt;/em&gt; e um layout totalmente responsivo.&lt;/p&gt;

&lt;p&gt;A validação pode ser feita utilizando o atributo &lt;em&gt;data-ideal&lt;/em&gt;, como no exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div&amp;gt;&amp;lt;label&amp;gt;Usuário:&amp;lt;/label&amp;gt;&amp;lt;input type=&#34;text&#34; name=&#34;username&#34; data-ideal=&#34;required username&#34;/&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;label&amp;gt;Senha:&amp;lt;/label&amp;gt;&amp;lt;input type=&#34;text&#34; name=&#34;password&#34; data-ideal=&#34;required pass&#34;/&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Outra opção é utilizar parâmetros na inicialização do plugin. O Ideal Forms utiliza o atributo &lt;em&gt;name&lt;/em&gt; dos campos para configurações específicas:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$(&#39;#form-cadastro&#39;).idealforms({
    inputs: {
      &#39;idade&#39;: {
        filters: &#39;required min&#39;,
        data: { min: 18 },
        errors: { min: &#39;Você precisa ter 18 anos para comprar nesse site&#39; }
      }
    }
});&lt;/pre&gt;

&lt;p&gt;Ainda é possível dividir um formulário em passos, recurso indicado para o cadastro e o registro de um pedido em um e-commerce. Para isso, basta adicionar mais de um elemento &lt;em&gt;section&lt;/em&gt; dentro do seu formulário.&lt;/p&gt;

&lt;p&gt;A documentação do projeto é bem completa e está disponível no &lt;a href=&#34;https://github.com/elclanrs/jq-idealforms&#34; title=&#34;https://github.com/elclanrs/jq-idealforms&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;filtrify&#34;&gt;Filtrify&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://luis-almeida.github.com/filtrify/&#34; title=&#34;http://luis-almeida.github.com/filtrify/&#34;&gt;http://luis-almeida.github.com/filtrify/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Filtrify é um plugin jQuery que habilita filtros em tempo real, ideal para páginas de produtos em uma loja online. Basedo no atributo &lt;em&gt;data&lt;/em&gt; de elementos HTML, o Filtrify gera uma lista, possibilitando selecionar apenas elementos de um determinado filtro.&lt;/p&gt;

&lt;p&gt;O plugin recebe dois elementos: um &lt;em&gt;container&lt;/em&gt; para os filtros e outro para os elementos a serem filtrados. No exemplo abaixo temos uma lista de produtos (notem as categorias no atributo &lt;em&gt;data&lt;/em&gt;):&lt;/p&gt;

&lt;div id=&#34;filtros&#34;&gt;
&lt;/div&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;filtros&#34;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;ul id=&#34;produtos&#34;&amp;gt;
    &amp;lt;li data-categoria=&#34;informática, eletrônicos, computadores&#34;&amp;gt;Desktop Core i7&amp;lt;/li&amp;gt;
    &amp;lt;li data-genre=&#34;informática, acessórios, impressoras&#34;&amp;gt;Impressora HP Deskjet&amp;lt;/li&amp;gt;
    &amp;lt;li data-genre=&#34;informática, acessórios, tablets&#34;&amp;gt;iPad&amp;lt;/li&amp;gt;
    &amp;lt;li data-genre=&#34;telefonia, celular, apple&#34;&amp;gt;iPhone&amp;lt;/li&amp;gt;
    &amp;lt;li data-genre=&#34;informática, laptops&#34;&amp;gt;Notebook Positivo&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/pre&gt;

&lt;p&gt;A inicialização fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$.filtrify(&#34;produtos&#34;, &#34;filtros&#34;);&lt;/pre&gt;

&lt;p&gt;E o resultado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/02/filtrify.jpg&#34; alt=&#34;filtrify&#34; width=&#34;378&#34; height=&#34;333&#34; class=&#34;alignnone size-full wp-image-10921&#34; srcset=&#34;uploads/2013/02/filtrify.jpg 378w, uploads/2013/02/filtrify-190x168.jpg 190w, uploads/2013/02/filtrify-351x310.jpg 351w&#34; sizes=&#34;(max-width: 378px) 100vw, 378px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;jquery-zoom&#34;&gt;jQuery Zoom&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jacklmoore.com/zoom&#34; title=&#34;http://www.jacklmoore.com/zoom&#34;&gt;http://www.jacklmoore.com/zoom&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O plugin jQuery Zoom habilita o recurso de zoom em imagens com interações do mouse. A inicialização do plugin cria elementos novos para o efeito de zoom, portanto, deve ser aplicada em um elemento capaz de receber outros elementos (não pode ser aplicada em um elemento img).&lt;/p&gt;

&lt;p&gt;Exemplos de uso:&lt;/p&gt;

&lt;pre class=&#34;lang-jquery&#34;&gt;$(&#39;a.foto-produto&#39;).zoom(); 
$(&#39;a.foto-produto-grab&#39;).zoom({ on:&#39;grab&#39; });&lt;/pre&gt;

&lt;p&gt;As opções do plugin incluem os seguintes parâmetros: &lt;em&gt;url&lt;/em&gt; da imagem maior, &lt;em&gt;on&lt;/em&gt; (&lt;em&gt;mouseover&lt;/em&gt;, &lt;em&gt;grab&lt;/em&gt;, &lt;em&gt;click&lt;/em&gt; ou &lt;em&gt;toggle&lt;/em&gt;), &lt;em&gt;duration&lt;/em&gt; (velocidade do zoom) e &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;bônus-carrinho-de-compras-com-drag-and-drop&#34;&gt;Bônus: Carrinho de compras com drag and drop&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/carrinho-de-compras-com-drag-and-drop/&#34; title=&#34;http://tableless.com.br/carrinho-de-compras-com-drag-and-drop/&#34;&gt;http://tableless.com.br/carrinho-de-compras-com-drag-and-drop/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Há mais ou menos dois anos escrevi um tutorial aqui no Tableless mostrando como implementar um carrinho com funções de &lt;em&gt;drag and drop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Utilizando os métodos &lt;em&gt;draggable&lt;/em&gt; e &lt;em&gt;droppable&lt;/em&gt; da biblioteca jQueryUI, ao final do tutorial você tem um carrinho drag and drop completamente funcional, pronto para ser implementado no seu e-commerce.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/carrinho-compras/&#34; title=&#34;http://tableless.github.com/exemplos/carrinho-compras/&#34;&gt;Clique aqui&lt;/a&gt; para visualizar o exemplo do tutorial no navegador.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Locaweb Style – Como iniciamos</title>
      <link>http://tableless.com.br/locaweb-style-como-iniciamos/</link>
      <pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/locaweb-style-como-iniciamos/</guid>
      <description>

&lt;p&gt;Se você ainda não conhece o &lt;a href=&#34;http://developer.locaweb.com.br/locawebstyle/&#34; title=&#34;Locaweb Style - O Framework da Locaweb&#34;&gt;Locaweb Style&lt;/a&gt;, vá lá conhecer e continue lendo esse texto. Vai ser interessante se você está querendo usar um framework pronto se quer criar um novo para seus projetos.&lt;/p&gt;

&lt;p&gt;Uma das minhas missões aqui na Locaweb em 2012 foi iniciar uma reestruturação na área de front-end. Embora todas as equipes aqui tenham programadores super &lt;a href=&#34;https://github.com/locaweb/&#34;&gt;talentosos em back-end&lt;/a&gt;, por incrível que possa parecer, a Locaweb não tinha uma equipe focada para tratar do código front-end de seus produtos. O problema de não ter uma equipe é que cada projeto era escrito de uma maneira diferente. Geralmente as equipes tentavam se virar de alguma maneira. Alguns terceirizavam ou contratavam uma pessoa que suprisse essa demanda. Alguns usavam HAML (arghhh!), outros terceirizavam o desenvolvimento na Índia etc&amp;#8230; A ideia então de ter uma equipe que unificasse o código front-end, facilitando principalmente o entrosamento da equipe de back-end com a equipe de UX, foi tirada do papel e foi aí que eu entrei para fazer minha bagunça.&lt;/p&gt;

&lt;p&gt;Fazia um tempo que a equipe de UX estava planejando um redesign completo dos produtos da Locaweb, unificando todo o visual e padronizando os elementos de interação elementos. Quando começamos a estruturar a área, eles já estavam com o novo design pronto para ser aplicado em um projeto pequeno. Aproveitamos isso e começamos a produzir um padrão de código em cima dessa nova linha visual.&lt;/p&gt;

&lt;h2 id=&#34;escolhendo-a-base&#34;&gt;Escolhendo a base&lt;/h2&gt;

&lt;p&gt;Utilizar o &lt;a href=&#34;http://twitter.github.com/bootstrap/&#34;&gt;Bootstrap&lt;/a&gt; foi nossa primeira decisão. Nós não queríamos e nem podíamos iniciar um projeto do zero. O Bootstrap já tinha todos os elementos e comportamentos que precisávamos. Logo, seria burrice iniciar uma nova biblioteca, que faria a mesma coisa.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Escolha um framework em que confia para ser sua base.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O próximo passo foi convencer os designers a utilizarem os elementos que já existiam no Bootstrap. A vantagem é que os elementos e os comportamentos prontos do Bootstrap são lindões e bem simples, logo, convencer os designers não foi difícil. Mas como nem tudo são flores, nos novos layouts produzidos pela Locaweb existem elementos e estruturas que demandariam a produção de customizações em cima do que já existia no Bootstrap. Por exemplo: cada produto tem uma cor diferente e por causa disso a cor dos botões primários de confirmação seriam da cor do produto. Logo, teríamos que sobreescrever o visual dos botões do Bootstrap com o nosso código. Além disso, como queríamos realinhar o visual dos serviços da Locaweb, elementos estruturais como header, footer, sidebar e etc teriam que ser produzidos do zero.&lt;/p&gt;

&lt;p&gt;Existiam outros pontos onde não queríamos esperar o Bootstrap resolver, por exemplo a forma com que o Boostrap usava ícones. Haviam dois problemas:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Para manter a compatibilidade com browsers antigos, o Booststrap insere um elemento extra vazio no HTML para colocar o ícone.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nós não queríamos deixar um elemento vazio no HTML simplesmente para suprir uma necessidade visual. O elemento não traz semântica nenhuma e nem ajuda na estruturação da página.&lt;/p&gt;

&lt;p&gt;A solução foi reescrever o código para que os ícones fossem inseridos via pseudo-elementos :after ou :before, assim o elemento extra no HTML não seria mais necessário e nós teríamos a mesma liberdade de customização.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Os ícones originais do Bootstrap são feitos como imagem.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Isso trazia vários problemas: como cada serviço tem uma cor específica, teríamos que converter para cada cor os stripes dos ícones do Bootstrap. Outro problema é que os ícones são utilizados em diversos tamanhos, isso já significava que teríamos que reproduzir os ícones do Bootstrap para diversos tamanhos de acordo com o layout.&lt;/p&gt;

&lt;p&gt;Logo a decisão foi utilizar os ícones em formato de fonts. Para tanto usamos os serviços como &lt;a href=&#34;http://fontello.com/&#34;&gt;Fontello&lt;/a&gt; e &lt;a href=&#34;http://icomoon.io/&#34;&gt;IcoMoon&lt;/a&gt;. Dessa forma conseguímos ter os ícones do Bootstrap em formato de font e também demos mais liberdade para os designers escolherem uma cartilha maior de ícones.&lt;/p&gt;

&lt;p&gt;Parece que na versão 3.0 eles substituirão os ícones de imagem por fonts&amp;#8230; Mas aí já fizemos nossa parte aqui! 😉&lt;/p&gt;

&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;

&lt;p&gt;Para suprir algumas outras necessidades, nós contamos com alguns plugins comuns no mercado. Utilizamos o &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt;, &lt;a href=&#34;http://modernizr.com/&#34;&gt;Modernizr&lt;/a&gt;, &lt;a href=&#34;http://ivaynberg.github.com/select2/&#34;&gt;Select2&lt;/a&gt; que é um puxadinho do &lt;a href=&#34;http://harvesthq.github.com/chosen/&#34;&gt;Chosen&lt;/a&gt;, &lt;a href=&#34;http://digitalbush.com/projects/masked-input-plugin/&#34;&gt;Masked Input&lt;/a&gt; e o módulo de &lt;a href=&#34;http://jqueryui.com/datepicker/&#34;&gt;calendário do JQuery UI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Em nosso roadmap já está previsto a refatoração de todo o Javascript &amp;#8211; na verdade já estamos no final do trabalho &amp;#8211; utilizando as melhores práticas e facilitando o acesso de scripts externos aos scripts do Locaweb Style. Precisamos rever uma série de coisas para que o Javascript fique mais flexível e modulado. Todo o Javascript criado foi pensando em comportamentos específicos que os serviços necessitam e que são misturados com os comportamentos do Bootstrap. Por exemplo: um formulário que é aberto dentro de um collapse, mas que quando o collapse é fechado, limpa todos os campos. O script do collapse é do Bootstrap, mas a ação de limpar os campos não. Veja &lt;a href=&#34;http://developer.locaweb.com.br/locawebstyle/conteudo/busca-avancada/&#34;&gt;um exemplo aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Estendemos toda a necessidade de interação e comportamento para nossos produtos, utilizando o que já existia no Bootstrap como padrão e produzindo scripts derivados para complementar a função dos comportamentos.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A ideia é iniciar da maneira correta. Se isso não for feito, tome uma atitude de mudança o mais rápido possível.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Com a refatoração do nosso Javascript, estamos colocando as boas práticas de codificação em ação. O certo mesmo era começarmos já da maneira correta. Mas como estávamos nos baseando totalmente no Bootstrap, durante algum tempo não havia a necessidade da criação de novos scripts. Isso ajudou no começo, mas o pouco código que havia começou a crescer e aí sim nos incomodou. Nesse tempo a equipe cresceu, então pudemos dar mais atenção a isso.&lt;/p&gt;

&lt;p&gt;Meu conselho é começar sempre colocando as boas práticas em ação. Aqui estamos usando &lt;a href=&#34;http://net.tutsplus.com/tutorials/javascript-ajax/prototypes-in-javascript-what-you-need-to-know/&#34;&gt;Prototypes&lt;/a&gt; do javascript (não o &lt;a href=&#34;http://prototypejs.org/&#34;&gt;frameworks&lt;/a&gt;), para quem me perguntou. Outra premissa é retirar do Javascript o máximo daquilo que o CSS pode resolver. Aí entra um mesclado de boas práticas trazidas pelo &lt;a href=&#34;http://tableless.com.br/bem-vindo-a-xangrila-parte-1/&#34; title=&#34;Bem vindo a Xangri-lá – Parte 1&#34;&gt;gracefull degradation e o progressive enhancement&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;escolhendo-o-que-vai-pra-dentro&#34;&gt;Escolhendo o que vai pra dentro&lt;/h3&gt;

&lt;p&gt;Uma das decisões mais difíceis de tomar quando se constrói um framework é decidir o que vai fazer parte do padrão. Se você tem a falsa impressão de que tudo o que é útil será usado no framework, qualquer script bonitinho que o pessoal encontra acaba sendo inserido no framework. Isso infla o código e geralmente não usamos nem metade do que está lá. A ideia é crescer harmoniosamente, tendo features que são realmente usadas pelos projetos. Nada de inserir algo que talvez, um dia, alguém precise. Se não precisa agora, não coloque. Seu framework será sempre um work in progress, lembre-se disso. Se mais pra frente houver a necessidade dessa feature, basta inserí-lo.&lt;/p&gt;

&lt;p&gt;Por isso é importante tomar cuidado quando surgir uma funcionalidade nova, que pode ser muito útil em um projeto e que nunca mais será usada em outro. A mesma coisa acontece quando decidimos quais plugins farão parte do pacote. Se determinada funcionalidade for indispensável em vários produtos, ele entra pro framework, caso contrário ele é utilizado especificamente naquele projeto. Se algum dia, talvez, alguns outros projetos forem utilizar aquilo, é relevante repensar a utilidade de colocá-lo no framework para que sua utilização seja unificada.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nenhum framework do mundo vai se adequar a 100% da sua necessidade. Isso é mito.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Geralmente, a gente adiciona coisas de acordo com a necessidade. Se ainda não precisamos de collapses, não vamos adicionar um script de collpase. Se não existem ainda um carousel no sistema, não vamos adicionar o script de carousel ainda. Uma boa ideia também é discutirmos com a equipe inteira se vale a pena ou não termos determinado plugin no sistema.&lt;/p&gt;

&lt;p&gt;No Locaweb Style temos alguns plugins inclusos: jQuery, Masked Input, Select2 e &lt;a href=&#34;http://tableless.com.br/utilizando-a-biblioteca-modernizr/&#34;&gt;Modernizr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;De cara eu já tiraria o Select2. Eu acho pecado customizar combobox/selects, mas os designers acham bonitinho&amp;#8230; E realmente dependendo do contexto pode ser muito útil.&lt;/p&gt;

&lt;p&gt;O Masked Input serve para criar máscaras em campos de formulário. Não vale a pena fazer um do zero por isso adicionamos no pacote.&lt;/p&gt;

&lt;p&gt;Já o jQuery e a &lt;a href=&#34;http://tableless.com.br/utilizando-a-biblioteca-modernizr/&#34;&gt;Modernizr&lt;/a&gt; nem preciso descrever que são indispensáveis no pacote.&lt;/p&gt;

&lt;h3 id=&#34;mantendo-tudo-em-ordem&#34;&gt;Mantendo tudo em ordem&lt;/h3&gt;

&lt;p&gt;Outro ponto crítico é ajudar os designers não caírem na tentação de criar novas soluções para problemas que já foram resolvidos. Quando a equipe de UX é grande e os integrantes cuidam de projetos diferentes com necessidades similares, é normal que pessoas diferentes criem soluções parecidas para resolver um mesmo problema. Nesse caso a obrigação do front-end é proteger o framework, fazendo com que os designers utilizem as soluções já existentes no pacote. Assim evitamos que a inserção de soluções redundantes. Por isso, é muito interessante que todos da equipe tenham em mente quais as soluções já foram criadas no framework. Isso é facilmente resolvido tendo um manual completo de todos os elementos e suas respectivas funcionalidades.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Um framework é como um quebra-cabeças onde você junta as peças para criar novas formas de layout e estrutura.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aqui na Locaweb a equipe de UX faz uma reunião diária para discutir soluções e a verdadeira utilidade de alguns elementos que compoe o layout. Isso é muito bom por que a reciclagem de novos elementos é feita com frequencia e soluções são transformadas para terem um comportamento melhor.&lt;/p&gt;

&lt;p&gt;O framework precisa servir como um quebra-cabeças. Todas as peças precisam se encaixar a qualquer momento. Isso facilita a criação de novas estruturas e variações de layouts.&lt;/p&gt;

&lt;p&gt;Se tudo der certo o trabalho de produção de views e páginas estáticas se resume a praticamente copy and paste do código pronto do framework. Na verdade não é tão fácil assim, mas esse é o objetivo. =^D&lt;/p&gt;

&lt;h3 id=&#34;fluxo-de-atualização&#34;&gt;Fluxo de atualização&lt;/h3&gt;

&lt;p&gt;Como o Locaweb Style é um framework feito primeiramente para suprir as necessidades dos produtos da Locaweb, a frequencia de atualização precisa acompanhar os deploys dos produtos. Descobrimos que aqui dentro podemos fazer uma atualização pequena a cada 15 dias. No primeiro ano de desenvolvimento fazíamos uma atualização por semana. Resolvíamos bugs e inseríamos novas features.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Seu framework será sempre um work in progress.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hoje só fazemos atualizações fora da janela de 15 dias se tivermos algum pequeno bug que precisa ser resolvido em algum dos serviços. Se não tivermos atualizações relevantes, não fazemos uma major update.&lt;/p&gt;

&lt;p&gt;Atualizações onde mudamos versões de plugins, como jQuery ou Bootstrap, fazemos um deploy individual, marcando bem aquela versão para que quem acompanha possa controlar melhor suas versões.&lt;/p&gt;

&lt;h3 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h3&gt;

&lt;p&gt;Nenhum framework do mundo vai se adequar a 100% da sua necessidade. Isso é mito. Invariavelmente, se você quiser algo bem feito e que você vai ter um trabalho para adequar esse framework às suas necessidades. O pulo do gato é você fazer isso sem produzir código conflitante com o código do framework base.&lt;/p&gt;

&lt;p&gt;Fazer um framework que funcione e que tenha uma continuidade saudável é difícil. Mesmo assim vale a pena pela experiência e pela força de produção que a equipe ganha em novos produtos e na manutenção dos que já existem. Por conta dessa facilidade, conseguimos manter com uma equipe de 3 pessoas algo em torno de 10 produtos simultaneos.&lt;/p&gt;

&lt;p&gt;Se quiser saber mais sobre o Locaweb Style: &lt;a href=&#34;http://developer.locaweb.com.br/locawebstyle/&#34;&gt;http://developer.locaweb.com.br/locawebstyle/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Há também dois artigos que escrevi falando um pouco sobre estruturação front-end. Talvez valha a pena ler.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/estruturacao-de-client-side-preprocessadores-framewoks-e-bibliotecas-parte-1/&#34; title=&#34;Estruturação de front-end – Parte 1: Préprocessadores, Framewoks e Bibliotecas&#34;&gt;Estruturação de front-end – Parte 1: Préprocessadores, Framewoks e Bibliotecas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/estruturacao-de-client-side-designers-e-programadores-parte-2/&#34; title=&#34;Estruturação de front-end – Parte 2: Designers e Programadores&#34;&gt;Estruturação de front-end – Parte 2: Designers e Programadores&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Há outro artigo bem interessante sobre a &lt;a href=&#34;http://tableless.com.br/criando-seu-framework-html-css/&#34; title=&#34;Criando seu próprio Framework HTML CSS&#34;&gt;criação de seu próprio framework&lt;/a&gt; que o &lt;a href=&#34;http://bernarddeluna.com/&#34;&gt;Bernard de Luna&lt;/a&gt; escreveu.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parallax simples com JQuery e CSS</title>
      <link>http://tableless.com.br/parallax-simples-com-jquery-e-css/</link>
      <pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/parallax-simples-com-jquery-e-css/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Parallax é a diferença na posição de objetos vistos em diferentes faixas de visão, medido pelo ângulo de inclinação entre as faixas. Com isso, objetos próximos têm uma maior Parallax que objetos mais distantes, quando observado de posições diferentes. Dessa forma, podemos dizer que o Parallax é o que nos dá a noção de profundidade em nosso campo de visão &amp;#8211; &lt;em&gt;&lt;a href=&#34;http://www.uxdesign.blog.br/imersao/a-imersao-do-efeito-parallax/&#34;&gt;UX Design&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Parallax é algo que virou moda. É um efeito muito interessante quando bem utilizado e pode ser bastante explorado se você for criativo. Não é difícil de fazer este efeito utilizando CSS e Javascript. A coisa toda é muito simples. Vamos mostrar abaixo uma técnica que é bastante divulgada por aí. Tentei evitar firulas. O importante é que você entenda o cálculo, que é a essencia dessa técnica.&lt;/p&gt;

&lt;h2 id=&#34;passo-1-html&#34;&gt;Passo 1: HTML&lt;/h2&gt;

&lt;p&gt;Inicialmente vamos criar dois elementos. Estes elementos terão backgrounds diferentes para e vamos atribuir uma classe bgParallax para identificar que eles terão o movimento do background alterado. Muitos artigos por aí colocam um data-type=&amp;#8221;background&amp;#8221; ou algo do gênero.&lt;/p&gt;

&lt;p&gt;Também vamos inserir um atributo data-speed, que é o que vai definir a velocidade com que o background vai se mover em relação aos outros elementos. O HTML fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;quemsomos&#34; class=&#34;bgParallax&#34; data-speed=&#34;15&#34;&amp;gt;
     &amp;lt;article&amp;gt;
        &amp;lt;h1&amp;gt;That show&#39;s called a pilot.&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;Well, the way they make shows is, they make one show. That show&#39;s called a pilot. Then they show that show to the people who make shows, and on the strength of that one show they decide if they&#39;re going to make more shows. Some pilots get picked and become television programs. Some don&#39;t, become nothing. She starred in one of the ones that became nothing. &amp;lt;/p&amp;gt;
     &amp;lt;/article&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&#34;missao&#34; class=&#34;bgParallax&#34; data-speed=&#34;10&#34;&amp;gt;
     &amp;lt;article&amp;gt;
        &amp;lt;h1&amp;gt;Water&amp;lt;/h1&amp;gt;
     &amp;lt;p&amp;gt;You think water moves fast? You should see ice. It moves like it has a mind. Like it knows it killed the world once and got a taste for murder. After the avalanche, it took us a week to climb out. Now, I don&#39;t know exactly when we turned on each other, but I know that seven of us survived the slide... and only five made it out. Now we took an oath, that I&#39;m breaking now. We said we&#39;d say it was the snow that killed the other two, but it wasn&#39;t. Nature is lethal but it doesn&#39;t hold a candle to man. &amp;lt;/p&amp;gt;
     &amp;lt;/article&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;passo-2-css&#34;&gt;Passo 2: CSS&lt;/h2&gt;

&lt;p&gt;Eu coloquei algum CSS e defini um background para cada um dos divs. Defini uma altura, defini background, font, cor e etc. Veja abaixo o código CSS:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* {margin:0; padding: 0;}
html, body {height:100%;}

/** formata elementos que tem backgrounds parallax **/
.bgParallax {
    font-family: &#39;Elsie&#39;, cursive;
    color:#FFF;
    margin: 0 auto;
    width: 100%;
    max-width: 1920px;
    position: relative;
    min-height: 100%;
    text-shadow:0 0 10px rgba(0,0,0,0.7);

    background-position: 50% 0;
    background-repeat: repeat;
    background-attachment: fixed;
}

/* Define backgrounds dos divs */
#quemsomos {background-image: url(bg2.jpg);}
#missao {
    background-image: url(bg1.jpg);
    -webkit-box-shadow:-20px 0 20px 5px rgba(0,0,0,0.7);
    -moz-box-shadow:-20px 0 20px 5px rgba(0,0,0,0.7);
    -ms-box-shadow:-20px 0 20px 5px rgba(0,0,0,0.7);
    -o-box-shadow:-20px 0 20px 5px rgba(0,0,0,0.7);
    box-shadow:-20px 0 20px 5px rgba(0,0,0,0.7);
}

/** Formata o article que vai o texto **/
.bgParallax article {
  width: 70%;
  text-align: center;
  margin:0 auto;
  padding:20% 0 0;
}

/** formata texto **/
article h1 {font-size:40px;}
article p {line-height: 30px; font-size:20px; margin-top:15px;}
article p a {color:#FFF; text-decoration:none; font-size:30px;}

&lt;/pre&gt;

&lt;p&gt;Nesse ponto eu apenas coloquei o CSS para formatar o visual dos DIVs. Como o background está &lt;strong&gt;fixed&lt;/strong&gt; PARECE mas ainda não está com efeito parallax. Esse truque de colocar FIXED é velho, dá até um efeito bacana. Costumamos chamar de PARALLAX FAKE.&lt;/p&gt;

&lt;p&gt;Agora vamos ao JQuery.&lt;/p&gt;

&lt;h2 id=&#34;passo-3-jquery&#34;&gt;Passo 3: JQuery&lt;/h2&gt;

&lt;p&gt;Primeiro identificamos os elementos que o efeito será aplicado. Nesse caso são todos os elementos com a classe &lt;strong&gt;bgParallax&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(document).ready(function(){

   $(&#39;div.bgParallax&#39;).each(function(){
        var $obj = $(this);
   });  
});
&lt;/pre&gt;

&lt;p&gt;Já que identificamos cada um dos elementos que terão o efeito, temos que identificar quando o usuário rola a página. Para isso iremos usar a função &lt;strong&gt;scroll()&lt;/strong&gt; do JQuery. E aqui você precisa de muita atenção: a velocidade do scroll dos backgrounds é diferente da velocidade do scroll da página. É isso que causa o &lt;a href=&#34;http://en.wikipedia.org/wiki/Parallax&#34;&gt;efeito de Parallax&lt;/a&gt;. É por isso que colocamos o atributo data-speed. Iremos utilizar aquele valor para definir quão rápido será a rolagem do background. Primeiro, precisamos definir a relação da rolagem: digamos que seja de 50px. Ou seja, a cada 50px o background vai rolar uma quantidade determinada de pixels. Esse valor é o 50px dividido pelo data-speed do objeto. Suponha que o data-speed seja de 10px. Logo, a cada 50px de rolagem da página o background rola 5px apenas. Sacou? Olha só o código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var yPos = -($(window).scrollTop() / $obj.data(&#39;speed&#39;)); 
&lt;/pre&gt;

&lt;p&gt;Colocamos esse valor dentro de uma variável &lt;strong&gt;yPos&lt;/strong&gt;. O valor é negativo por que o background tem que se mover para cima.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;$(window).scrollTop()&lt;/strong&gt; pega o valor de quanto a página já rolou do topo, esse valor é dividido pelo &lt;strong&gt;$obj.data(&amp;#8216;speed&amp;#8217;)&lt;/strong&gt;, que é o valor que colocamos no atributo &lt;strong&gt;data-speed&lt;/strong&gt; de cada &lt;strong&gt;div.bgParallax&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora precisamos definir que esse valor seja o valor do TOP no background-position dos divs. Fazemos isso assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var bgpos = &#39;50% &#39;+ yPos + &#39;px&#39;;
&lt;/pre&gt;

&lt;p&gt;Aplicamos isso ao objeto assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$obj.css(&#39;background-position&#39;, bgpos );
&lt;/pre&gt;

&lt;p&gt;O código final fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;div.bgParallax&#39;).each(function(){
    var $obj = $(this);

    $(window).scroll(function() {
        var yPos = -($(window).scrollTop() / $obj.data(&#39;speed&#39;)); 

        var bgpos = &#39;50% &#39;+ yPos + &#39;px&#39;;

        $obj.css(&#39;background-position&#39;, bgpos );

    }); 
});
&lt;/pre&gt;

&lt;p&gt;Veja o &lt;a href=&#34;http://tableless.github.com/exemplos/parallax/parallax.html&#34;&gt;exemplo completo aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>