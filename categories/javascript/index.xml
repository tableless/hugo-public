<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Tableless</title>
    <link>http://tableless.com.br/categories/javascript/index.xml</link>
    <description>Recent content in Javascript on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Crie sites em questão de minutos com o Pingendo</title>
      <link>http://tableless.com.br/crie-sites-em-questao-de-minutos-com-o-pingendo/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/crie-sites-em-questao-de-minutos-com-o-pingendo/</guid>
      <description>

&lt;p&gt;Sem dúvidas, o Bootstrap é uma das frameworks mais utilizadas ultimamente, porém, para algumas pessoas, ainda é meio complicado lidar com os códigos, sejam eles HTML, CSS ou JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-pingendo&#34;&gt;O que é o Pingendo?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pingendo.com/&#34;&gt;Pingendo&lt;/a&gt; é um programa de interface simples e de fácil uso. O Pingendo é um criador de sites em Bootstrap 3 que permite a criação de websites de maneira simples e rápida.&lt;/p&gt;

&lt;h2 id=&#34;drag-and-drop&#34;&gt;Drag and drop&lt;/h2&gt;

&lt;p&gt;O programa usa um modo muito popular em criadores de sites online como Wix, Weebly, etc. É só arrastar e soltar os elementos desejados dentro da área do site e pronto, a mágica está feita.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mGmv44Y.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;imagens&#34;&gt;Imagens&lt;/h2&gt;

&lt;p&gt;Com o Pingendo você tem a seu dispor uma ampla quantidade de imagens livres de direitos autorais e com altíssima qualidade vindas direto do &lt;a href=&#34;https://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NMxtVad.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;fontes&#34;&gt;Fontes&lt;/h2&gt;

&lt;p&gt;A alteração das fontes pode ser feita facilmente através do menu lateral do programa. As fontes são carregadas diretamente do &lt;a href=&#34;https://fonts.google.com/&#34;&gt;Google Fonts&lt;/a&gt;, um dos mais completos banco de dados de fontes da internet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9RGXujM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;cores&#34;&gt;Cores&lt;/h2&gt;

&lt;p&gt;A alteração das cores do tema também podem ser alteradas através do menu lateral, basta escolher as que mais lhe agradam.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/68jKTOb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;responsividade&#34;&gt;Responsividade&lt;/h2&gt;

&lt;p&gt;O Pingendo permite a visualização do seu projeto em telas de diversos tamanhos. Facilitando assim o teste de responsividade do seu website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dCHV33W.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;código&#34;&gt;Código&lt;/h2&gt;

&lt;p&gt;Se você possuí alguma experiencia, mesmo que mínima, em HTML e/ou CSS, pode realizar alterações direto do programa e velas sendo aplicadas em tempo real.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3Fv69GJ.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pingendo está disponível para as plataformas Mac, Windows e Linux no site &lt;a href=&#34;https://pingendo.com/&#34;&gt;www.pingendo.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como criar aplicações em tempo real usando Node.js e RethinkDB</title>
      <link>http://tableless.com.br/como-criar-aplicacoes-em-tempo-real-usando-node-js-e-rethinkdb/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-criar-aplicacoes-em-tempo-real-usando-node-js-e-rethinkdb/</guid>
      <description>

&lt;h2 id=&#34;sobre-o-rethinkdb&#34;&gt;Sobre o RethinkDB&lt;/h2&gt;

&lt;p&gt;Se você precisa de um banco de dados NoSQL que funcione com dados JSON e tenha suporte completo para buscas em tempo real e uma mistura de modelos entre SQL e NoSQL, então uma boa opção é o RethinkDB.&lt;/p&gt;

&lt;p&gt;Trata-se de uma base de dados em código aberto em que todos os dados JSON são persistidos em tabelas como um banco de dados SQL convencional, permitindo que você execute queries entre múltiplas tabelas utilizando o comando clássico &lt;strong&gt;join&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mas você também pode persistir arrays e sub-documentos como está acostumado a fazer com o MongoDB, CouchDB ou PostgreSQL.&lt;/p&gt;

&lt;p&gt;Há alguns materiais bacanas no RethinkDB, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Suporte ao GeoSpartial;&lt;/li&gt;
&lt;li&gt;API para lidar com strings, datas, booleanos e documentos;&lt;/li&gt;
&lt;li&gt;API para Math;&lt;/li&gt;
&lt;li&gt;Suporte ao Map-reduce;&lt;/li&gt;
&lt;li&gt;Cliente HTTP para capturar alguns dados externos;&lt;/li&gt;
&lt;li&gt;Changefeeds , que é uma busca em tempo real;&lt;/li&gt;
&lt;li&gt;Suporte para index (simples, composto e multi);&lt;/li&gt;
&lt;li&gt;Painel de administrador nativo da web;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;desenvolvendo-o-aplicativo&#34;&gt;Desenvolvendo o aplicativo&lt;/h2&gt;

&lt;p&gt;E então, que tal desenvolver algo útil usando o RethinkDB? Para explorar a busca em tempo real, vamos construir uma timeline global simples utilizando o recurso &lt;a href=&#34;http://rethinkdb.com/docs/changefeeds/javascript&#34;&gt;changefeed&lt;/a&gt; para listar todos os dados na timeline em tempo real, com o uso do Node.js, Express, Socket.IO e o RethinkDB.&lt;/p&gt;

&lt;p&gt;Primeiro, você precisa instalar o RethinkDB. Antes de começar escrevendo os códigos abaixo, para instalar esse banco de dados eu recomendo que você leia e siga as instruções deste link &lt;a href=&#34;http://rethinkdb.com/docs/install&#34;&gt;http://rethinkdb.com/docs/install&lt;/a&gt; de acordo com seu sistema operacional.&lt;/p&gt;

&lt;p&gt;Depois de instalá-lo, execute os comandos abaixo para iniciar o projeto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;mkdir timeline
cd timeline
npm init
npm install--save express socket.io rethinkdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora, vamos trabalhar! Para simplificar as coisas nós vamos usar o código do ES6 da versão nativa &lt;strong&gt;Node v6.x.x&lt;/strong&gt;, e o backend será um único arquivo de código para fins de estudo, mas se você precisa desenvolver um servidor backend complexo e bem estruturado utilizando o RethinkDB, dê uma olhada neste projeto &lt;a href=&#34;https://github.com/caio-ribeiro-pereira/node-api-examples&#34;&gt;node-api-examples&lt;/a&gt;, o qual possui uma lista com alguns exemplos de APIs utilizando os mesmos roteadores web e bancos de dados. Existem alguns exemplos do uso do RethinkDB com Koa, Express e o Hapi.js.&lt;/p&gt;

&lt;p&gt;Bem, vamos criar o servidor backend de nossa aplicação. Você pode criar o arquivo &lt;code&gt;index.js&lt;/code&gt; por meio do código abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const http = require(&#39;http&#39;);
const fs = require(&#39;fs&#39;);
const express = require(&#39;express&#39;);
const socketIO = require(&#39;socket.io&#39;);
const r = require(&#39;rethinkdb&#39;);
const config = require(&#39;./config.json&#39;);

// Loading Express, HTTP, Socket.IO and RethinkDB
const db = Object.assign(config.rethinkdb, {
    db: &#39;timeline&#39;
});
const app = express();
const server = http.Server(app);
const io = socketIO(server);

// Connecting to RethinkDB server
r.connect(db)
    .then(conn =&amp;gt; {
        // Index route which renders the index.html
        app.get(&#39;/&#39;, (req, res) =&amp;gt; {
            fs.readFile(`${__dirname}/index.html`, (err, html) =&amp;gt; {
                res.end(html || err);
            });
        });
        // The changefeed is provided by change() function
        // which emits broadcast of new messages for all clients
        r.table(&#39;messages&#39;)
            .changes()
            .run(conn)
            .then(cursor =&amp;gt; {
                cursor.each((err, data) =&amp;gt; {
                    const message = data.new_val;
                    io.sockets.emit(&#39;/messages&#39;, message);
                });
            });
        // Listing all messages when new user connects into socket.io
        io.on(&#39;connection&#39;, (client) =&amp;gt; {
            r.table(&#39;messages&#39;)
                .run(conn)
                .then(cursor =&amp;gt; {
                    cursor.each((err, message) =&amp;gt; {
                        io.sockets.emit(&#39;/messages&#39;, message);
                    });
                });
            // Listening the event from client and insert new messages
            client.on(&#39;/messages&#39;, (body) =&amp;gt; {
                const {
                    name,
                    message
                } = body;
                const data = {
                    name,
                    message,
                    date: new Date()
                };
                r.table(&#39;messages&#39;).insert(data).run(conn);
            });
        });
        server.listen(3000, () =&amp;gt; console.log(&#39;Timeline Server!&#39;));
    })
    .error(err =&amp;gt; {
        console.log(&#39;Can\&#39;t connect to RethinkDB&#39;);
        throw err;
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Existem alguns detalhes importantes que você precisa saber quando for usar o RethinkDB. Primeiro, todas as funções desse módulo funcionam usando callbacks ou &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promessas&lt;/a&gt;. Se você escolher as promessas, você pode criar funções assíncronas bem estruturadas com gerentes de erros melhores.&lt;/p&gt;

&lt;p&gt;O recurso &lt;strong&gt;changefeed&lt;/strong&gt; (via &lt;code&gt;r.table(&#39;messages&#39;).changes()&lt;/code&gt;) é um subscriber do banco de dados, o qual é uma query observadora e retorna qualquer modificação de uma tabela. A combinação com o &lt;code&gt;io.sockets.emit()&lt;/code&gt; permite que o servidor envie dados em tempo real para o cliente.&lt;/p&gt;

&lt;p&gt;Agora, vamos criar um script simples de migração para preparar o banco de dados antes de rodar o servidor. Essa migração é muito comum em bancos de dados relacionais. Crie o arquivo &lt;code&gt;database.js&lt;/code&gt; com o script abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;const r = require(&#39;rethinkdb&#39;);
const config = require(&#39;./config.json&#39;);
let conn;

r.connect(config.rethinkdb)
    .then(connection =&amp;gt; {
        console.log(&#39;Connecting RethinkDB...&#39;);
        conn = connection;
        return r.dbCreate(&#39;timeline&#39;).run(conn);
    })
    .then(() =&amp;gt; {
        console.log(&#39;Database &#34;timeline&#34; created!&#39;);
        return r.db(&#39;timeline&#39;).tableCreate(&#39;messages&#39;).run(conn);
    })
    .then(() =&amp;gt; console.log(&#39;Table &#34;messages&#34; created!&#39;))
    .error(err =&amp;gt; console.log(err))
    .finally(() =&amp;gt; process.exit(0));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E não se esqueça de criar o arquivo &lt;code&gt;config.json&lt;/code&gt;, o qual possui dados para conectar no servidor RethinkDB:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;{
    &#34;rethinkdb&#34;: {
        &#34;host&#34;: &#34;localhost&#34;,
        &#34;port&#34;: 28015
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para finalizar nossa aplicação, precisamos criar o arquivo &lt;code&gt;index.html&lt;/code&gt;, que será a parte do lado do cliente para os usuários enviarem mensagens na timeline.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
    &amp;lt;title&amp;gt;Timeline&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width,initial-scale=1&#34;&amp;gt;
    &amp;lt;script src=&#34;http://tableless.com.br/socket.io/socket.io.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;form style=&#34;text-align:center;margin:50px 0&#34;&amp;gt;
        &amp;lt;label for=&#34;name&#34;&amp;gt;Name:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&#34;text&#34; id=&#34;name&#34; /&amp;gt;
        &amp;lt;label for=&#34;message&#34;&amp;gt;Message:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&#34;text&#34; id=&#34;message&#34; /&amp;gt;
        &amp;lt;button type=&#34;submit&#34;&amp;gt;Send&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;fieldset style=&#34;padding: 20px;width:50%;margin:0 auto&#34;&amp;gt;
        &amp;lt;legend style=&#34;text-align:center&#34;&amp;gt;Timeline&amp;lt;/legend&amp;gt;
        &amp;lt;p id=&#34;messages&#34;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/fieldset&amp;gt;
    &amp;lt;script&amp;gt;
        (function() {
            var socket = io();
            var form = document.querySelector(&#39;form&#39;);
            form.addEventListener(&#39;submit&#39;, function(e) {
                e.preventDefault();
                var name = e.target.querySelector(&#39;#name&#39;);
                var message = e.target.querySelector(&#39;#message&#39;);
                var data = {
                    name: name.value,
                    message: message.value
                };
                socket.emit(&#39;/messages&#39;, data);
                e.target.reset();
            });
            socket.on(&#39;/messages&#39;, function(data) {
                var messages = document.querySelector(&#39;#messages&#39;);
                var message = &#39;&amp;lt;b&amp;gt;&#39; + data.name + &#39;:&amp;lt;/b&amp;gt; &#39; +
                    data.message + &#39;&amp;lt;br /&amp;gt;&#39;;
                messages.innerHTML += message;
            });
        })();
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora nós estamos prontos para rodar essa aplicação! Mas antes de iniciar o servidor, na primeira vez você deve executar a migração do banco de dados para criar o banco de dados e tabela para este projeto. Para isso, execute o seguinte comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node database.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se tudo der certo, você pode iniciar o servidor ao executar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E você pode brincar enviando mensagens nesta aplicação acessando o endereço &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;protegendo-o-aplicativo&#34;&gt;Protegendo o aplicativo&lt;/h2&gt;

&lt;p&gt;Se quiser saber mais sobre como começar protegendo seu aplicativo, basta acessar este &lt;a href=&#34;https://blog.jscrambler.com/jscrambler-101-first-use&#34;&gt;tutorial&lt;/a&gt;, que irá ajudar nos primeiros passos de uso do &lt;a href=&#34;https://www.jscrambler.com&#34;&gt;Jscrambler&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O RethinkDB é o incrível NoSQL! Esse banco de dados pode oferecer suporte total para aplicações de tempo real apenas utilizando o changefeed + socket.io. &lt;a href=&#34;http://rethinkdb.com/docs/changefeeds/javascript&#34;&gt;Neste link&lt;/a&gt;, você pode ler mais sobre o que é possível criar usando o changefeeds. Quase todas as funções podem executar usando as Promises, que fazem com que você escreva um código melhor e você pode facilmente usar o recurso &lt;strong&gt;ES7 async/await&lt;/strong&gt; para simplificar as funções de promessas também.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando a sua primeira aplicação web com React</title>
      <link>http://tableless.com.br/criando-sua-primeira-aplicacao-web-com-react/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-sua-primeira-aplicacao-web-com-react/</guid>
      <description>

&lt;p&gt;Você já deve ter ouvido falar do React, a biblioteca JS mais popular da atualidade, usado por várias empresas grandes como Facebook, Airbnb e Twitter. A ideia desse artigo é demonstrar a criação de uma aplicação simples, que use as principais partes do React. Neste tutorial nós iremos ver:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Componentes&lt;/li&gt;
&lt;li&gt;Componentes puros/funcionais&lt;/li&gt;
&lt;li&gt;O uso do &lt;em&gt;state&lt;/em&gt; vs &lt;em&gt;props&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todos os exemplos deste tutorial serão escritos em ES6. Se você não sabe ES6 &lt;a href=&#34;https://github.com/ldaltro/guia-basico-ES6&#34;&gt;leia esse artigo antes&lt;/a&gt;. Se você é impaciente demais para isso considere que:&lt;/p&gt;

&lt;p&gt;ES6:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const foo = 42; // const declara uma constante
let bar = 5; // let declara uma variável
&lt;/pre&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const soma = (a, b) =&amp;gt; a + b;
ou 
const soma = (a, b) =&amp;gt; { return a + b; };
&lt;/pre&gt;

&lt;p&gt;ES5:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var soma = function (a, b) {
  return a + b;
};
&lt;/pre&gt;

&lt;p&gt;ES6:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import React from &#39;react&#39;;
&lt;/pre&gt;

&lt;p&gt;ES5:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;);
&lt;/pre&gt;

&lt;p&gt;ES6:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class MeuComponente extends React.Component {
  render() {
    return ();
  }
} 
&lt;/pre&gt;

&lt;p&gt;ES5:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var MeuComponente = React.createClass({
  render: function(){
    return ();
  }
});&lt;/pre&gt;

&lt;p&gt;Outro pré-requisito para o tutorial é ter o &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; instalado na sua máquina. Se você ainda não fez isso, clique &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;aqui&lt;/a&gt; e siga as instruções, dependendo do seu sistema operacional.&lt;/p&gt;

&lt;h2 id=&#34;afinal-o-que-é-react&#34;&gt;Afinal, o que é React?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; é uma biblioteca criada pelo Facebook em 2013 com o objetivo de tornar o desenvolvimento de &lt;em&gt;Single Page Applications&lt;/em&gt; (SPAs) mais fácil. A biblioteca se baseia em alguns conceitos como:&lt;/p&gt;

&lt;h3 id=&#34;componentes&#34;&gt;Componentes&lt;/h3&gt;

&lt;p&gt;Uma aplicação React é dividida em componentes, ou seja, pequenos pedaços de código responsáveis por alguma parte da UI. Um componente ideal é independente e reutilizável, capaz de retornar a resposta esperada usando apenas dados genéricos enviados por outras partes da aplicação.&lt;/p&gt;

&lt;p&gt;Um exemplo de componente React interessante pode ser visto &lt;a href=&#34;https://github.com/tomchentw/react-google-maps&#34;&gt;nessa biblioteca de mapas&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&amp;lt;&lt;span class=&#34;pl-ent&#34;&gt;&lt;span class=&#34;pl-c1&#34;&gt;GoogleMap&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;&lt;span class=&#34;pl-smi&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pl-smi&#34;&gt;onMapLoad&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;defaultZoom&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;&lt;span class=&#34;pl-c1&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;defaultCenter&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;{&lt;span class=&#34;pl-c1&#34;&gt; &lt;span class=&#34;pl-s&#34;&gt;lat&lt;/span&gt;:&lt;/span&gt; &lt;span class=&#34;pl-c1&#34;&gt;-25.363882&lt;/span&gt;,&lt;span class=&#34;pl-c1&#34;&gt; &lt;span class=&#34;pl-s&#34;&gt;lng&lt;/span&gt;:&lt;/span&gt; &lt;span class=&#34;pl-c1&#34;&gt;131.044922&lt;/span&gt; }&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;pl-e&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;pl-s1&#34;&gt;&lt;span class=&#34;pl-smi&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;pl-k&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;pl-smi&#34;&gt;onMapClick&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;pl-pse&#34;&gt;}&lt;/span&gt;
  &amp;gt;
&amp;lt;/&lt;span class=&#34;pl-ent&#34;&gt;&lt;span class=&#34;pl-c1&#34;&gt;GoogleMap&lt;/span&gt;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Graças ao componentes do React, podemos importar um mapa do Google Maps e usá-lo como se fosse uma tag nativa de HTML, passando apenas as propriedades que nós queremos no componente, como &lt;em&gt;defaultZoom&lt;/em&gt; e &lt;em&gt;defaultCenter&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;jsx&#34;&gt;JSX&lt;/h3&gt;

&lt;p&gt;Em React nós não usamos HTML, toda a marcação é feita no JavaScript, com uma sintaxe baseada em XML chamada JSX. A ideia pode parecer bem maluca no começo mas vai fazer sentido assim que você começar a escrever os seus próprios componentes. JSX parece bastante com HTML mas existem algumas diferenças como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Todas as tags devem ser fechadas&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Podemos colocar expressões JavaScript dentro do JSX usando {}. Ex.: &lt;pre class=&#34;lang-javascript&#34;&gt;function ola() {
return &amp;ldquo;ola&amp;rdquo;;
}
&amp;lt;p&amp;gt;{2 + 2}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{ola()}&amp;lt;/p&amp;gt;&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Como o JSX fica dentro de arquivos &amp;#8216;.js&amp;#8217; a palavra &lt;em&gt;class&lt;/em&gt; não pode ser usada. Em seu lugar, devemos usar &lt;em&gt;className&lt;/em&gt;. Ex.: &lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;h1 className=&amp;ldquo;titulo&amp;rdquo;&amp;gt;Olá!&amp;lt;/h1&amp;gt;
&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por debaixo dos panos, usamos o &lt;strong&gt;Babel&lt;/strong&gt; para converter o JSX em funções comuns de JavaScript, logo, esse código:&lt;/p&gt;

&lt;pre&gt;&amp;lt;div&amp;gt;Olá mundo&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Fica assim:&lt;/p&gt;

&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &#34;Olá mundo&#34;&lt;span class=&#34;p&#34;&gt;);
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Leia mais sobre JSX &lt;a href=&#34;https://facebook.github.io/react/docs/introducing-jsx.html&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;virtual-dom&#34;&gt;Virtual DOM&lt;/h3&gt;

&lt;p&gt;Para evitar updates custosos e desnecessários, o React não escreve as alterações diretamente na DOM. Ao invés disso, a biblioteca cria uma cópia da árvore de componentes em memória e esta cópia (Virtual DOM) é quem recebe os updates primeiro. Depois que a Virtual DOM é atualizada o React calcula a maneira mais eficiente de atualizar a árvore DOM real usando um algoritmo de &lt;em&gt;diffing.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;pondo-a-mão-na-massa&#34;&gt;Pondo a mão na massa&lt;/h2&gt;

&lt;p&gt;Ok, chega de tanta teoria, vamos por a mão na massa! Abra o seu terminal e vamos instalar um pacote que vai nos ajudar a criar nossas aplicações o &lt;strong&gt;&lt;a href=&#34;https://github.com/facebookincubator/create-react-app&#34;&gt;create-react-app&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;npm install create-react-app&lt;/pre&gt;

&lt;p&gt;Montar um ambiente de desenvolvimento capaz de suportar React costumava ser uma tarefa complicada (&lt;a href=&#34;https://tableless.com.br/hello-world-com-react-do-rascunho-ate-o-primeiro-componente/&#34;&gt;esse tutorial do Diego Eis explica muito bem a criação de um ambiente &amp;#8220;na mão&amp;#8221;&lt;/a&gt;). Por causa disso, o Facebook inventou um pacote chamado &lt;em&gt;create-react-app&lt;/em&gt;, que cria um ambiente com tudo o que nós precisamos para começar o nosso projeto (React, ES6 e webpack).&lt;/p&gt;

&lt;p&gt;Depois de instalar o pacote, vamos criar um novo projeto. No terminal digite:&lt;/p&gt;

&lt;pre class=&#34;p1&#34;&gt;&lt;span class=&#34;s1&#34;&gt;create-react-app vamos-aprender-react&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Depois de alguns minutos todas as dependências estão instaladas e &lt;em&gt;voilà!&lt;/em&gt; Temos um projeto pronto para ser criado.&lt;/p&gt;

&lt;p&gt;Com o terminal do diretório do seu projeto digite:&lt;/p&gt;

&lt;pre&gt;npm start&lt;/pre&gt;

&lt;p&gt;Se tudo deu certo, o seu browser em &lt;em&gt;&lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/em&gt; deve estar assim:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57013 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-19.29.35.png&#34; alt=&#34;Imagem ilustrativa do create-react-app&#34; width=&#34;1438&#34; height=&#34;748&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Parabéns! Você acabou de criar a sua primeira aplicação com React! Vamos dar uma olhada no que foi gerado:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57015 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-19.34.30.png&#34; alt=&#34;Estrutura de pastas do create-react-app&#34; width=&#34;232&#34; height=&#34;415&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como podemos ver, a pastar &lt;em&gt;src&lt;/em&gt; contém todos os nosso componentes React. Dentro de &lt;em&gt;src&lt;/em&gt; abra o arquivo &lt;em&gt;index.js&lt;/em&gt;, ele deve conter algo desse tipo:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./App&#39;;
import &#39;./index.css&#39;;

ReactDOM.render(
 &amp;lt;App /&amp;gt;,
 document.getElementById(&#39;root&#39;)
);
&lt;/pre&gt;

&lt;p&gt;O index.js é o arquivo principal da nossa aplicação, ele é responsável por colocar o nosso componente principal (App) no elemento &lt;em&gt;root&lt;/em&gt; da nossa página. &lt;em&gt;Root&lt;/em&gt; é uma div que está dentro do único arquivo .html do projeto (public/index.html). Toda a nossa aplicação vai ser escrita dentro dessa div root.&lt;/p&gt;

&lt;h3 id=&#34;criando-nosso-primeiro-componente&#34;&gt;Criando nosso primeiro componente&lt;/h3&gt;

&lt;p&gt;Abra o arquivo &lt;em&gt;App.js&lt;/em&gt;, ele é o primeiro componente da nossa árvore. Dentro dele podemos ver o JSX usado para renderizar a tela de boas vindas do &lt;em&gt;create-react-app&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&amp;lt;div className=&#34;App&#34;&amp;gt;
 &amp;lt;div className=&#34;App-header&#34;&amp;gt;
 &amp;lt;img src={logo} className=&#34;App-logo&#34; alt=&#34;logo&#34; /&amp;gt;
 &amp;lt;h2&amp;gt;Welcome to React&amp;lt;/h2&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;p className=&#34;App-intro&#34;&amp;gt;
 To get started, edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Note que todo esse código está dentro de um método chamado &lt;em&gt;render&lt;/em&gt; na classe &lt;em&gt;App&lt;/em&gt; que é filha da classe de &lt;em&gt;React.Component&lt;/em&gt;. &lt;em&gt;Render&lt;/em&gt; é responsável por dizer ao React o que deve ser renderizado, todo componente precisa de um método &lt;em&gt;render&lt;/em&gt; para exibir alguma coisa.&lt;/p&gt;

&lt;p&gt;Substitua o método &lt;em&gt;render&lt;/em&gt; por:&lt;/p&gt;

&lt;pre&gt;render() {
 return &amp;lt;HelloWorld/&amp;gt;;
 }&lt;/pre&gt;

&lt;p&gt;Se tentarmos rodar o projeto, veremos o seguinte erro:&lt;/p&gt;

&lt;pre&gt;7:13 error &#39;HelloWorld&#39; is not defined react/jsx-no-undef 
&lt;/pre&gt;

&lt;p&gt;Isso acontece porque estamos tentando usar um component (HelloWorld) que ainda não foi definido. Vamos resolver isso criando um arquivo chamado HelloWorld.js dentro da pastar &lt;em&gt;src&lt;/em&gt;. Dentro de HelloWorld coloque:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 return &amp;lt;p&amp;gt;Olá mundo!&amp;lt;/p&amp;gt;;
 }
}&lt;/pre&gt;

&lt;p&gt;Esse código cria um componente React chamado HelloWorld e implementa o método &lt;em&gt;render&lt;/em&gt; que retorna um parágrafo com &lt;strong&gt;olá mundo&lt;/strong&gt;. Depois disso vamos importar nosso novo componente em App.js:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!

class App extends Component {
 render() {
 return &amp;lt;HelloWorld/&amp;gt;;
 }
}

export default App;&lt;/pre&gt;

&lt;p&gt;Agora abrindo o browser em &lt;em&gt;&lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/em&gt; vemos:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57018 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-20.00.26.png&#34; alt=&#34;Exemplo de Hello World&#34; width=&#34;1439&#34; height=&#34;723&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ótimo! Nós acabamos de criar nosso primeiro React Component \o/. Mas ele não faz lá muita coisa não é mesmo? Vamos tentar fazer esse componente ser mais customizável.&lt;/p&gt;

&lt;h2 id=&#34;criando-componentes-genéricos-com-props&#34;&gt;Criando componentes genéricos com Props&lt;/h2&gt;

&lt;p&gt;E se nós quiséssemos exibir o nome de uma pessoa na mensagem do nosso HelloWorld? Obviamente poderíamos fazer algo do tipo:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 return &amp;lt;p&amp;gt;Olá Lucas!&amp;lt;/p&amp;gt;;
 }
}&lt;/pre&gt;

&lt;p&gt;Mas e se for necessário escrever novos nomes? Criar um componente novo para cada pessoa não parece uma ideia muito inteligente&amp;#8230; lembra do exemplo do Google Maps mostrado na introdução? No exemplo, nós passávamos dados para um componente como se fosse uma tag HTML. Vamos fazer a mesma coisa para o nosso HelloWorld! Mude App.js para:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!

class App extends Component {
 render() {
 return &amp;lt;div&amp;gt;
 &amp;lt;HelloWorld nome=&#34;Lucas&#34;/&amp;gt;
 &amp;lt;HelloWorld nome=&#34;Tableless&#34;/&amp;gt;
 &amp;lt;HelloWorld nome=&#34;Leitor&#34;/&amp;gt;
 &amp;lt;/div&amp;gt;;
 }
}

export default App;&lt;/pre&gt;

&lt;p&gt;Veja que dessa vez nós tivemos que colocar o HelloWorld dentro de uma div, isso acontece porque o método &lt;em&gt;render&lt;/em&gt; deve sempre retornar apenas um elemento, &lt;strong&gt;sempre que tiver que renderizar mais de um elemento no seu componente, coloque tudo dentro de uma div&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora nós temos que fazer com que o componente HelloWorld leia o valor dado em nome. Isso pode ser feito facilmente usando o objeto &lt;strong&gt;props&lt;/strong&gt; presente em todo componente React. Veja como HelloWorld.js vai ficar agora:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 return &amp;lt;p&amp;gt;Olá {this.props.nome}!&amp;lt;/p&amp;gt;;
 }
}

HelloWorld.propTypes = {
 nome: React.PropTypes.string.isRequired
}&lt;/pre&gt;

&lt;p&gt;Tudo que for passado de um componente para outro é adicionado ao objeto &lt;em&gt;props&lt;/em&gt;, podendo ser acessado dentro do componente. Nós também usamos a propriedade &lt;em&gt;propTypes&lt;/em&gt; para informar ao React que a _prop_ &amp;#8216;nome&amp;#8217; é uma &lt;em&gt;string&lt;/em&gt; e que essa &lt;em&gt;string&lt;/em&gt; é obrigatória para o funcionamento do componente (&lt;em&gt;isRequired&lt;/em&gt;). Você não é obrigado a usar &lt;em&gt;propTypes&lt;/em&gt; nos seus componentes, mas é interessante fazer isso, já que elas facilitam a documentação do seu código e podem reduzir erros.&lt;/p&gt;

&lt;p&gt;Agora nós temos um componente muito mais genérico:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-57023 size-full&#34; src=&#34;uploads/2017/01/Captura-de-Tela-2017-01-22-às-20.18.28.png&#34; alt=&#34;Exemplo de Componente React&#34; width=&#34;181&#34; height=&#34;193&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Props&lt;/em&gt; são algo crucial para os componentes React, já que com elas nós podemos fazer com que o nosso componente seja reutilizado até mesmo em outra aplicação. Mas devemos sempre ter em mente que _props_ são imutáveis, uma vez definida a _prop_ &amp;#8216;nome&amp;#8217;, uma instância de HelloWorld não pode mais ser alterada. Ex.:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class HelloWorld extends React.Component {
 render() {
 this.props.nome = &#34;Fulano&#34;; // ERRO Cannot assign to read only property &#39;nome&#39; of object &#39;#&amp;lt;Object&amp;gt;&#39;
 return &amp;lt;p&amp;gt;Olá {this.props.nome}!&amp;lt;/p&amp;gt;;
 }
}

HelloWorld.propTypes = {
 nome: React.PropTypes.string.isRequired
}&lt;/pre&gt;

&lt;h3 id=&#34;componente-8220-puro-8221-ou-stateless&#34;&gt;Componente &amp;#8220;puro&amp;#8221; ou &lt;em&gt;stateless&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Nosso componente HelloWorld é bastante simples e utiliza apenas &lt;em&gt;props&lt;/em&gt;, por causa disso ele pode ser escrito de uma forma melhor, utilizando uma &lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34;&gt;função pura&lt;/a&gt;. Veja como fica o nosso componente em forma de função:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;; const HelloWorld = (props) =&amp;gt; &amp;lt;p&amp;gt;Olá {props.nome}!&amp;lt;/p&amp;gt;;&lt;/pre&gt;

&lt;pre&gt;HelloWorld.propTypes = { nome: React.PropTypes.string.isRequired } export default HelloWorld;&lt;/pre&gt;

&lt;p&gt;Veja que dessa vez o componente é basicamente escrito em apenas uma linha (&lt;strong&gt;const HelloWorld = (props) =&amp;gt; &lt;p&gt;Olá {props.nome}!&lt;/p&gt;;&lt;/strong&gt;). Esse é o React Component ideal! Simples, reutilizável e escrito em apenas uma função! Tente criar seus componentes dessa maneira, ao invés de ter um componente complexo e grande, crie vários componentes menores e simples, isso vai melhorar bastante a qualidade do seu projeto.&lt;/p&gt;

&lt;p&gt;Para comprovar que o nosso componente é realmente reutilizável vamos usá-lo em uma lista de nomes. Volte para App.js e digite:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!

class App extends Component {
 render() {
 const nomes = [&#34;Lucas&#34;, &#34;Tableless&#34;, &#34;Leitor&#34;, &#34;Maria&#34;, &#34;João&#34;, &#34;Ana&#34;];
 return &amp;lt;div&amp;gt;
 {nomes.map((n, i) =&amp;gt; &amp;lt;HelloWorld nome={n} key={i}/&amp;gt;)}
 &amp;lt;/div&amp;gt;;
 }
}

export default App;
&lt;/pre&gt;

&lt;p&gt;Perceba que nós temos uma mudança aqui, para exibir nomes do nosso &lt;em&gt;array&lt;/em&gt; nós usamos a &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#34;&gt;função map&lt;/a&gt;, já que ela retorna uma expressão JavaScript (além de ter uma sintaxe mais legal que a do o laço for :P) e passamos uma nova &lt;em&gt;prop&lt;/em&gt; chamada &lt;em&gt;&lt;strong&gt;key&lt;/strong&gt;&lt;/em&gt; para o nosso componente. &lt;em&gt;Keys&lt;/em&gt; ajudam o React a identificar qual elemento foi adicionado/removido de uma lista/array (&lt;a href=&#34;https://facebook.github.io/react/docs/lists-and-keys.html&#34;&gt;mais informações sobre o assunto aqui&lt;/a&gt;). Uma &lt;em&gt;Key&lt;/em&gt; deve sempre ser um valor &lt;strong&gt;único&lt;/strong&gt; ou poderemos ter problemas de performance. Evite usar o índice do seu &lt;em&gt;loop&lt;/em&gt; como &lt;em&gt;key&lt;/em&gt; em aplicações reais (como fizemos no exemplo acima), tente usar números realmente únicos como um ID vindo de um backend. Leia mais sobre isso &lt;a href=&#34;https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.4nmajnqsa&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;componentes-interativos-com-state&#34;&gt;Componentes interativos com state&lt;/h2&gt;

&lt;p&gt;Como visto anteriormente &lt;em&gt;props&lt;/em&gt; são imutáveis, componentes feitos apenas com &lt;em&gt;props&lt;/em&gt; não podem por exemplo, ser atualizados baseados em uma ordem do usuário. Para representar o estado mutável do seu componente usamos a propriedade &lt;strong&gt;&lt;em&gt;state&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para ilustrar o uso de &lt;em&gt;state&lt;/em&gt; no nosso elemento vamos fazer um novo componente e chamá-lo de &lt;strong&gt;ContaClick.js&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class ContaClick extends React.Component {
 constructor() {
 super();
 this.state = {
 clicks: 0
 }
 }

 render() {
 return &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;{this.state.clicks}&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
 }
}

&lt;/pre&gt;

&lt;p&gt;No construtor da classe ContaClick nós definimos o estado inicial do nosso componente: um contador de clicks que começa em 0. Vamos adicionar um botão para atualizar o contador:&lt;/p&gt;

&lt;pre&gt;import React from &#39;react&#39;;

export default class ContaClick extends React.Component {
 constructor() {
 super();
 this.state = {
 clicks: 0
 }
 }

 clicou = () =&amp;gt; this.setState({clicks: this.state.clicks + 1});
 
 render() {
 return &amp;lt;div&amp;gt;
 &amp;lt;p&amp;gt;{this.state.clicks}&amp;lt;/p&amp;gt;
 &amp;lt;button onClick={this.clicou}&amp;gt;Clica aqui!&amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
 }
}
&lt;/pre&gt;

&lt;p&gt;No código acima nós criamos um botão embaixo do exibidor de cliques que chama o método &lt;em&gt;&lt;strong&gt;clicou&lt;/strong&gt;&lt;/em&gt; sempre que o evento onClick é disparado. O método &lt;em&gt;&lt;strong&gt;clicou&lt;/strong&gt;&lt;/em&gt; substitui o objeto &lt;em&gt;state&lt;/em&gt; do componente ContaClick por um objeto novo com clicks incrementados em uma unidade. Veja que nós atualizamos o &lt;em&gt;state&lt;/em&gt; usando a função &lt;em&gt;setState&lt;/em&gt;. &lt;strong&gt;NUNCA atualize o objeto _state_ manualmente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora vamos colocar o nosso componente &lt;em&gt;ContaClick&lt;/em&gt; em &lt;em&gt;app&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;import React, { Component } from &#39;react&#39;;
import logo from &#39;./logo.svg&#39;;
import &#39;./App.css&#39;;

import HelloWorld from &#39;./HelloWorld&#39;;// nosso primeiro componente React!
import ContaClick from &#39;./ContaClick&#39;;

class App extends Component {
 render() {
 const nomes = [&#34;Lucas&#34;, &#34;Tableless&#34;, &#34;Leitor&#34;, &#34;Maria&#34;, &#34;João&#34;, &#34;Ana&#34;];
 return &amp;lt;div&amp;gt;
 {nomes.map((n, i) =&amp;gt; &amp;lt;HelloWorld nome={n} key={i}/&amp;gt;)}
 &amp;lt;ContaClick /&amp;gt;
 &amp;lt;/div&amp;gt;;
 }
}

export default App;
&lt;/pre&gt;

&lt;p&gt;Pronto! Rodando a aplicação podemos usar o contador e ver que ele é atualizado a cada clique!&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O futuro das interfaces: Chatbots</title>
      <link>http://tableless.com.br/o-futuro-das-interfaces-chatbots/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-futuro-das-interfaces-chatbots/</guid>
      <description>

&lt;p&gt;Estamos acostumados a interagir diariamente com interfaces gráficas, seja no computador, celular, tablet, smart tv, etc. Naturalmente incorporamos a utilização dessas interfaces para obter nossos objetivos no dispositivo em questão, seja fazer uma busca no google, ver uma página no Facebook, ler um artigo em um portal de notícias ou escolher um filme no Netflix.&lt;/p&gt;

&lt;p&gt;Podemos não perceber, mas quando ligamos para um &lt;em&gt;call-center&lt;/em&gt; onde a máquina (&lt;strong&gt;&lt;em&gt;URA — Unidade de Resposta Audível&lt;/em&gt;&lt;/strong&gt;) nos pede para dizer em voz alta o que desejamos, ou o número correspondente ao que queremos, também estamos interagindo com uma interface de voz para atingir nosso propósito.&lt;/p&gt;

&lt;p&gt;Nesses dois casos, o ponto a se notar é que, não importa como, mas é preciso de uma interface para que nós humanos possamos utilizar sistemas e dispositivos digitais.&lt;/p&gt;

&lt;h2 id=&#34;legal-mas-onde-estão-os-chatbots-nessa-história&#34;&gt;Legal, mas onde estão os chatbots nessa história?&lt;/h2&gt;

&lt;p&gt;Simples. Chatbots podem ser interfaces no qual vamos interagir para atingir nossos objetivos obter !&lt;/p&gt;

&lt;p&gt;Para entender melhor, vamos a um exemplo clássico:&lt;/p&gt;

&lt;p&gt;Você está passeando no shopping, passa na frente do cinema, e descobre que aquele filme que você queria ver já está em cartaz, então decide assistí-lo.&lt;/p&gt;

&lt;p&gt;Porém a fila para comprar ingresso está enorme, você não quer perder todo esse tempo. Então você pega seu celular, entra na loja de aplicativos, procura o app de cinema, começa o download, após finalizar abre o app, seleciona sua cidade, shopping em que está, filme desejado, horário, quantidade de ingressos, e finaliza fazendo o pagamento. Você utilizou a interface gráfica do app de cinema do seu celular para atingir seu objetivo, ótimo, funcionou!&lt;/p&gt;

&lt;p&gt;Porém, não poderia ser mais simples? E se você pudesse interagir via chat com um bot do cinema para comprar seus ingressos?&lt;/p&gt;

&lt;p&gt;Vamos imaginar que o cinema tem um chatbot disponível no seu app de messenger favorito, o Facebook Messenger.&lt;/p&gt;

&lt;p&gt;Você acessa seu messenger clica no usuário do cinema e envia a seguinte mensagem: &amp;#8220;&lt;em&gt;Quero comprar dois ingressos para o filme Star Wars Rogue One, no shopping X, para a sessão das 21:45&lt;/em&gt;&amp;#8220;&lt;em&gt;.&lt;/em&gt; Sua mensagem rapidamente vai ser interpretada, e em mais algumas frases rápidas de conversa (talvez para pagamento), você terá alcançado sua meta de comprar ingresso.&lt;/p&gt;

&lt;p&gt;Você pode não ter percebido, mas assim como fazemos com interfaces gráficas, você interagiu com uma interface para manipular um sistema, e atingir seu objetivo! Você interagiu com uma interface de chatbot!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/02/cb2.jpg&#34; alt=&#34;&#34; width=&#34;626&#34; height=&#34;782&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;porque-esse-tipo-de-interface-é-promissora&#34;&gt;&lt;strong&gt;Porque esse tipo de interface é promissora?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Falando especificamente sobre a era da internet, e das interfaces para os dispositivos atuais (desktop, celulares, tablets), há anos equipes inteiras (UI Designers, UX Designers, Developers, CEO, etc) discutem incansavelmente sobre qual a melhor forma de atingir seus usuários.&lt;/p&gt;

&lt;p&gt;Inúmeros fatores nas interfaces/interação podem ser relevantes em produtos e sistemas. Nas empresas e instituições, sempre existem discussões voltadas para esses e outros fatores:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Cores, formas, fontes e fotos &amp;#8211; Performance e velocidade de páginas e procedimentos &amp;#8211; Quais conteúdos são mais relevantes para o usuário &amp;#8211; Qual o máximo de cliques que um usuário pode ter para alcançar o que deseja&lt;/p&gt;

&lt;p&gt;Portanto, o caminho para uma boa conversa com nosso usuário em questão não é tão simples como parece.&lt;/p&gt;

&lt;p&gt;Além desses pontos, temos uma discussão importantíssima sobre o negócio em si, sobre como o sistema lê, processa e devolve dados e informações, sobre como o sistema irá se comportar diante do usuário.&lt;/p&gt;

&lt;p&gt;E se pudéssemos &amp;#8220;&lt;em&gt;pular uma etapa&lt;/em&gt;&amp;#8221; e focar mais tempo para o que importa? Se pudéssemos focar no objetivo do usuário, e buscar a forma melhor e mais rápida de concluir processos?&lt;/p&gt;

&lt;p&gt;Partindo do pressuposto de que a maioria dos usuários de internet sabem utilizar um chat, os chatbots excluem a curva de aprendizado das interfaces gráficas, facilitando para os desenvolvedores do produto, e para o usuário, que poderá interagir utilizando um processo que se assemelha com a comunicação com outros humanos via internet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“_Nós pensamos que você deve enviar uma mensagem para uma empresa da mesma maneira que você envia a um amigo_” — Mark Zuckerberg na Facebook F8 Conference&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;E ainda não falamos dos detalhes mais técnicos: conexão, rede de dados, apps, espaço disponível no dispositivo…&lt;/p&gt;

&lt;p&gt;Para interagir com um chatbot, sua conexão não precisa ser tão rápida quanto para baixar um app, ou carregar um site. Você não precisa trafegar muitos dados a ponto de acabar com seu pacote diário de internet para conversar num chat. E se o bot está no app que você utilizar para conversar com seus amigos, não será necessário ocupar mais espaço no seu dispositivo.&lt;/p&gt;

&lt;p&gt;São muitas vantagens, não?!&lt;/p&gt;

&lt;h2 id=&#34;as-interfaces-gráficas-vão-morrer&#34;&gt;As interfaces gráficas vão morrer?&lt;/h2&gt;

&lt;p&gt;Não há nenhuma resposta certa, para essa pergunta. É uma questão que só poderá ser respondida com o passar dos anos.&lt;/p&gt;

&lt;p&gt;Na minha opinião, as interfaces podem perder muito espaço, mas não vão morrer completamente. Mesmo num futuro, imagino que sempre haverá algum caso em que pode uma interface gráfica pode ser útil, mesmo que para pequenas interações.&lt;/p&gt;

&lt;p&gt;Também não conseguimos prever com certeza o futuro dos chats. O próprio chatbot do Facebook Messenger tem a capacidade de enviar &lt;a href=&#34;https://developers.facebook.com/docs/messenger-platform/product-overview&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener&#34;&gt;botões, imagens e outros elementos gráfico&lt;/a&gt;s.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;A intenção desse post foi refletir um pouco sobre interfaces, e sobre vantagens e o poder dos chatbots.&lt;/p&gt;

&lt;p&gt;Obviamente, isso é só a ponta do iceberg das discussões sobre chatbots e seu futuro. Mas em pouco tempo de reflexão podemos enxergar um futuro promissor!&lt;/p&gt;

&lt;p&gt;Originalmente postado em: &lt;a href=&#34;https://medium.com/botsbrasil/o-futuro-das-interfaces-chatbots-b222c638bdb1&#34;&gt;https://medium.com/botsbrasil/o-futuro-das-interfaces-chatbots-b222c638bdb1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contraste de cores – Acessibilidade na web</title>
      <link>http://tableless.com.br/contraste-de-cores-acessibilidade-na-web/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/contraste-de-cores-acessibilidade-na-web/</guid>
      <description>

&lt;p&gt;Nesse post vou explicar uma das opções de como fazer um contraste de cores, existe diretrizes de acessibilidade da &lt;a href=&#34;https://www.w3.org/Translations/WCAG20-pt-PT/&#34; target=&#34;_blank&#34;&gt;WCAG 2.0&lt;/a&gt; que explica o nível aceitável de contraste de cores esperadas em um site, veja nesse &lt;a href=&#34;https://www.w3.org/TR/WCAG20/#visual-audio-contrast&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;proposta&#34;&gt;Proposta&lt;/h2&gt;

&lt;p&gt;Criar um contraste de cores em três níveis (Branco, Preto e Azul) usando HTML5, CSS3, Javascript (Puro), Node e o Cookie do navegado para guarda o contraste escolhido.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56600&#34; src=&#34;uploads/2016/12/html5-css-javascript-logos.png&#34; alt=&#34;html5-css-javascript-logos&#34; width=&#34;1267&#34; height=&#34;287&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;como-será-feito&#34;&gt;Como será feito&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Em uma página teremos quatro links em que o usuário vai escolher (Preto, branco, azul ou sem contraste).&lt;/li&gt;
&lt;li&gt;No evento de click vamos passar para o javascript um valor do atributo &amp;#8216;data-contraste&amp;#8217;.&lt;/li&gt;
&lt;li&gt;Vai ser adicionar na tag &amp;#8216;body&amp;#8217; um &amp;#8216;id&amp;#8217; para o CSS fazer toda a mágica de trocar as cores da página.&lt;/li&gt;
&lt;li&gt;Vai ser guardado no cookie a opção selecionada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veja como vai ficar;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56620&#34; src=&#34;uploads/2016/12/contraste-de-cores.gif&#34; alt=&#34;contraste-de-cores&#34; width=&#34;484&#34; height=&#34;264&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Então&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56615&#34; src=&#34;uploads/2016/12/ThomasCook_tagline.jpg&#34; alt=&#34;ThomasCook_tagline_hori_cmyk&#34; width=&#34;479&#34; height=&#34;137&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;O HTML para esse tipo de projeto é de extrema necessidade ser no mínimo validado pelo &lt;a href=&#34;https://validator.w3.org/&#34;&gt;W3C&lt;/a&gt; e ter nível &amp;#8220;AAA&amp;#8221; em alguma ferramenta de análise de acessibilidade, no caso eu usei o &lt;a href=&#34;http://www.acessibilidade.gov.pt/accessmonitor/&#34;&gt;Accessmonitor&lt;/a&gt;, já usando a WCAG 2.0.&lt;/p&gt;

&lt;p&gt;A atenção na contrução do HTML vai determinar se o usuário acessível vai ter uma boa experiência no seu site ou não.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-BR&#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Artigo contraste de cores&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/style.css&#34;&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&#34;row row-header&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;nav&amp;gt;
 &amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#content&#34; title=&#34;Ir para o Conteúdo&#34;&amp;gt;Ir para o Conteúdo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; title=&#34;Ir para o Topo&#34;&amp;gt;Ir para o Topo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#footer&#34; title=&#34;Ir para o Rodapé&#34;&amp;gt;Ir para o Rodapé&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;0&#34; title=&#34;Sem Contraste&#34;&amp;gt;Sem Contraste&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;1&#34; title=&#34;Contraste Branco&#34;&amp;gt;Contraste Branco&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;2&#34; title=&#34;Contraste Preto&#34;&amp;gt;Contraste Preto&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;3&#34; title=&#34;Contraste Azul&#34;&amp;gt;Contraste Azul&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/nav&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .container--&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .row--&amp;gt;
 &amp;lt;div class=&#34;row row-top&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;strong&amp;gt;Front End Developer&amp;lt;/strong&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-banner&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;h1&amp;gt;Hi my names is &amp;lt;span&amp;gt;Orivelton&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
 &amp;lt;img src=&#34;img/avatar.png&#34; alt=&#34;Avatar Front End&#34; class=&#34;avatar&#34;&amp;gt;
 &amp;lt;img src=&#34;img/avatar-preto.png&#34; alt=&#34;Oculos do avatar&#34; class=&#34;oculos&#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-content&#34;&amp;gt;
 &amp;lt;article class=&#34;container&#34; id=&#34;content&#34;&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Html5&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Css3&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Javascript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Typescript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;footer id=&#34;footer&#34;&amp;gt;
 Copyright (c) 2016 Copyright Holder All Rights Reserved.
 &amp;lt;/footer&amp;gt;
 &amp;lt;script type=&#34;text/javascript&#34; src=&#34;js/contraste.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Umas das recomendações da WCAG 2.0 é que o primeiro link do site leve para o conteúdo principal, com isso você já ganha uns pontinhos na ferramenta de análise de acessibilidade.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;css&#34;&gt;CSS&lt;/h2&gt;

&lt;p&gt;O CSS é muito importante, se possível não usar CSS inline, a utilização de unidades relativas (EM, %,  REM) na escrita do CSS melhora a acessibilidade. Validar o CSS vai apontar erros que deixamos passar, para isso temos a ferramenta de análise da W3C o &lt;a href=&#34;https://jigsaw.w3.org/css-validator/&#34;&gt;CSS Validation Service&lt;/a&gt;. Não vou postar aqui o CSS, mas logo abaixo vou deixar o link do projeto completo ;).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;javascript&#34;&gt;Javascript&lt;/h1&gt;

&lt;p&gt;Nesse post resolvi usar javascript puro, pois se trata de uma aplicação simples e não haveria a necessidade de usar JQuery ou alguma lib ou Framework e também eu amo javascript puro, acho bem desafiador \0/.&lt;/p&gt;

&lt;p&gt;Esse Javascript modularizei em três blocos.&lt;/p&gt;

&lt;h3 id=&#34;1-8211-a-escolha-do-contraste-no-click-do-link&#34;&gt;1 &amp;#8211; A escolha do contraste no click do link&lt;/h3&gt;

&lt;pre&gt;//Selecionando os links de contraste
var linksContraste = document.querySelectorAll(&#39;nav a[data-contraste]&#39;);

//Function click passando o valor do data-contraste para a function contraste setar o Id no body
linksContraste.forEach(linksContraste =&amp;gt; linksContraste.addEventListener(&#39;click&#39;, function() {
 var dataContraste = this.dataset.contraste; // pegando o data-contraste da tag &#39;a&#39;
 contraste(dataContraste); // Chamando a function contraste com um parâmetro passado pelo data-contraste da tag &#39;a&#39;
 }
));&lt;/pre&gt;

&lt;h3 id=&#34;2-8211-a-função-de-setar-o-contraste&#34;&gt;2 &amp;#8211; A Função de setar o contraste.&lt;/h3&gt;

&lt;pre&gt;function contraste(dataContraste) {
 var setId;
 //Verificação de qual contraste foi selecionado
 if (dataContraste == 1) {
 setId = &#39;contrasteBranco&#39;;
 } else if (dataContraste == 2) {
 setId = &#39;contrastePreto&#39;;
 } else if (dataContraste == 3) {
 setId = &#39;contrasteAzul&#39;;
 } else {
 setId = &#39;&#39;;
 }
 // setando o ID do contraste escolhido no body
 document.querySelector(&#34;body&#34;).setAttribute(&#34;id&#34;, setId);
 // Guardando o cookie do contraste
 document.cookie = &#34;contraste=&#34; + setId + &#34;&#34;;
}&lt;/pre&gt;

&lt;h3 id=&#34;3-8211-a-verificação-do-cookie-gravado&#34;&gt;3 &amp;#8211; A verificação do cookie gravado&lt;/h3&gt;

&lt;pre&gt;// Verificação do cookie
var cookieContrasteBranco = document.cookie.indexOf(&#39;contrasteBranco&#39;);
var cookieContrastePreto = document.cookie.indexOf(&#39;contrastePreto&#39;);
var cookieContrasteAzul = document.cookie.indexOf(&#39;contrasteAzul&#39;);

//Verificando o cookie setado anteriormente
var cookieTrue = &#39;&#39;;
if (cookieContrasteBranco != -1) {
 cookieTrue = 1;
} else if (cookieContrastePreto != -1) {
 cookieTrue = 2;
} else if (cookieContrasteAzul != -1) {
 cookieTrue = 3;
} else {
 cookieTrue = &#39;&#39;;
}
//Chamando a function contraste com o valor do cookie guardado
contraste(cookieTrue);&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;node-cookie&#34;&gt;Node + Cookie&lt;/h2&gt;

&lt;p&gt;Node? sim, usaremos o Node para subir um servidor, pois não da pra guardar cookie sem um servidor, vamos precisar usar o Node, mas é super simples.&lt;/p&gt;

&lt;p&gt;Não sabe usar? Não sabe o que é? tem um poste aqui muito bom que vai te dar o caminho das pedras, nesse &lt;a href=&#34;https://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js/&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No site &lt;a href=&#34;https://www.npmjs.com/package/http-server&#34;&gt;NPMJS &lt;/a&gt;temos um servidor em que iremos utilizar, abra seu Node e manda essa;&lt;/p&gt;

&lt;pre&gt;npm install http-server -g&lt;/pre&gt;

&lt;p&gt;Pronto, o resultado será esse;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56612&#34; src=&#34;uploads/2016/12/Capture.png&#34; alt=&#34;capture&#34; width=&#34;636&#34; height=&#34;48&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora navegando com o Node até a pasta do seu projeto;&lt;/p&gt;

&lt;pre&gt;http-server&lt;/pre&gt;

&lt;p&gt;Ok, você já tem um servidor no ar, utilize um dos endereços http listados e abra no seu navegador de preferência (&lt;del&gt;&lt;em&gt;Chrome&lt;/em&gt;&lt;/del&gt;);&lt;/p&gt;

&lt;pre&gt;&lt;img class=&#34;alignnone wp-image-56613&#34; src=&#34;uploads/2016/12/Capture-1.png&#34; alt=&#34;capture&#34; width=&#34;640&#34; height=&#34;134&#34; /&gt;&lt;/pre&gt;

&lt;p&gt;Já está tudo pronto, com o servidor no ar já podemos gravar no cookie a escolha do contraste selecionada pelo usuário, isso vai evitar que o usuário atualize a página e carregue a página sem o contraste escolhido.&lt;/p&gt;

&lt;p&gt;já podemos verificar o cookie guardado depois do click no link&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56617&#34; src=&#34;uploads/2016/12/Capture-2.png&#34; alt=&#34;capture&#34; width=&#34;931&#34; height=&#34;509&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Com esse valor guardado no cookie o passo 3 vai funcionar perfeitamente, setando o contraste escolhido anteriormente ao recarregar a página.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Veja o projeto completo no [Nesse post vou explicar uma das opções de como fazer um contraste de cores, existe diretrizes de acessibilidade da &lt;a href=&#34;https://www.w3.org/Translations/WCAG20-pt-PT/&#34; target=&#34;_blank&#34;&gt;WCAG 2.0&lt;/a&gt; que explica o nível aceitável de contraste de cores esperadas em um site, veja nesse &lt;a href=&#34;https://www.w3.org/TR/WCAG20/#visual-audio-contrast&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;proposta-1&#34;&gt;Proposta&lt;/h2&gt;

&lt;p&gt;Criar um contraste de cores em três níveis (Branco, Preto e Azul) usando HTML5, CSS3, Javascript (Puro), Node e o Cookie do navegado para guarda o contraste escolhido.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56600&#34; src=&#34;uploads/2016/12/html5-css-javascript-logos.png&#34; alt=&#34;html5-css-javascript-logos&#34; width=&#34;1267&#34; height=&#34;287&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;como-será-feito-1&#34;&gt;Como será feito&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Em uma página teremos quatro links em que o usuário vai escolher (Preto, branco, azul ou sem contraste).&lt;/li&gt;
&lt;li&gt;No evento de click vamos passar para o javascript um valor do atributo &amp;#8216;data-contraste&amp;#8217;.&lt;/li&gt;
&lt;li&gt;Vai ser adicionar na tag &amp;#8216;body&amp;#8217; um &amp;#8216;id&amp;#8217; para o CSS fazer toda a mágica de trocar as cores da página.&lt;/li&gt;
&lt;li&gt;Vai ser guardado no cookie a opção selecionada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veja como vai ficar;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56620&#34; src=&#34;uploads/2016/12/contraste-de-cores.gif&#34; alt=&#34;contraste-de-cores&#34; width=&#34;484&#34; height=&#34;264&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Então&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56615&#34; src=&#34;uploads/2016/12/ThomasCook_tagline.jpg&#34; alt=&#34;ThomasCook_tagline_hori_cmyk&#34; width=&#34;479&#34; height=&#34;137&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-1&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;O HTML para esse tipo de projeto é de extrema necessidade ser no mínimo validado pelo &lt;a href=&#34;https://validator.w3.org/&#34;&gt;W3C&lt;/a&gt; e ter nível &amp;#8220;AAA&amp;#8221; em alguma ferramenta de análise de acessibilidade, no caso eu usei o &lt;a href=&#34;http://www.acessibilidade.gov.pt/accessmonitor/&#34;&gt;Accessmonitor&lt;/a&gt;, já usando a WCAG 2.0.&lt;/p&gt;

&lt;p&gt;A atenção na contrução do HTML vai determinar se o usuário acessível vai ter uma boa experiência no seu site ou não.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-BR&#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Artigo contraste de cores&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/style.css&#34;&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&#34;row row-header&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;nav&amp;gt;
 &amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#content&#34; title=&#34;Ir para o Conteúdo&#34;&amp;gt;Ir para o Conteúdo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; title=&#34;Ir para o Topo&#34;&amp;gt;Ir para o Topo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#footer&#34; title=&#34;Ir para o Rodapé&#34;&amp;gt;Ir para o Rodapé&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;0&#34; title=&#34;Sem Contraste&#34;&amp;gt;Sem Contraste&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;1&#34; title=&#34;Contraste Branco&#34;&amp;gt;Contraste Branco&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;2&#34; title=&#34;Contraste Preto&#34;&amp;gt;Contraste Preto&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;3&#34; title=&#34;Contraste Azul&#34;&amp;gt;Contraste Azul&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/nav&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .container--&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .row--&amp;gt;
 &amp;lt;div class=&#34;row row-top&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;strong&amp;gt;Front End Developer&amp;lt;/strong&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-banner&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;h1&amp;gt;Hi my names is &amp;lt;span&amp;gt;Orivelton&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
 &amp;lt;img src=&#34;img/avatar.png&#34; alt=&#34;Avatar Front End&#34; class=&#34;avatar&#34;&amp;gt;
 &amp;lt;img src=&#34;img/avatar-preto.png&#34; alt=&#34;Oculos do avatar&#34; class=&#34;oculos&#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-content&#34;&amp;gt;
 &amp;lt;article class=&#34;container&#34; id=&#34;content&#34;&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Html5&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Css3&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Javascript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Typescript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;footer id=&#34;footer&#34;&amp;gt;
 Copyright (c) 2016 Copyright Holder All Rights Reserved.
 &amp;lt;/footer&amp;gt;
 &amp;lt;script type=&#34;text/javascript&#34; src=&#34;js/contraste.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Umas das recomendações da WCAG 2.0 é que o primeiro link do site leve para o conteúdo principal, com isso você já ganha uns pontinhos na ferramenta de análise de acessibilidade.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;css-1&#34;&gt;CSS&lt;/h2&gt;

&lt;p&gt;O CSS é muito importante, se possível não usar CSS inline, a utilização de unidades relativas (EM, %,  REM) na escrita do CSS melhora a acessibilidade. Validar o CSS vai apontar erros que deixamos passar, para isso temos a ferramenta de análise da W3C o &lt;a href=&#34;https://jigsaw.w3.org/css-validator/&#34;&gt;CSS Validation Service&lt;/a&gt;. Não vou postar aqui o CSS, mas logo abaixo vou deixar o link do projeto completo ;).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;javascript-1&#34;&gt;Javascript&lt;/h1&gt;

&lt;p&gt;Nesse post resolvi usar javascript puro, pois se trata de uma aplicação simples e não haveria a necessidade de usar JQuery ou alguma lib ou Framework e também eu amo javascript puro, acho bem desafiador \0/.&lt;/p&gt;

&lt;p&gt;Esse Javascript modularizei em três blocos.&lt;/p&gt;

&lt;h3 id=&#34;1-8211-a-escolha-do-contraste-no-click-do-link-1&#34;&gt;1 &amp;#8211; A escolha do contraste no click do link&lt;/h3&gt;

&lt;pre&gt;//Selecionando os links de contraste
var linksContraste = document.querySelectorAll(&#39;nav a[data-contraste]&#39;);

//Function click passando o valor do data-contraste para a function contraste setar o Id no body
linksContraste.forEach(linksContraste =&amp;gt; linksContraste.addEventListener(&#39;click&#39;, function() {
 var dataContraste = this.dataset.contraste; // pegando o data-contraste da tag &#39;a&#39;
 contraste(dataContraste); // Chamando a function contraste com um parâmetro passado pelo data-contraste da tag &#39;a&#39;
 }
));&lt;/pre&gt;

&lt;h3 id=&#34;2-8211-a-função-de-setar-o-contraste-1&#34;&gt;2 &amp;#8211; A Função de setar o contraste.&lt;/h3&gt;

&lt;pre&gt;function contraste(dataContraste) {
 var setId;
 //Verificação de qual contraste foi selecionado
 if (dataContraste == 1) {
 setId = &#39;contrasteBranco&#39;;
 } else if (dataContraste == 2) {
 setId = &#39;contrastePreto&#39;;
 } else if (dataContraste == 3) {
 setId = &#39;contrasteAzul&#39;;
 } else {
 setId = &#39;&#39;;
 }
 // setando o ID do contraste escolhido no body
 document.querySelector(&#34;body&#34;).setAttribute(&#34;id&#34;, setId);
 // Guardando o cookie do contraste
 document.cookie = &#34;contraste=&#34; + setId + &#34;&#34;;
}&lt;/pre&gt;

&lt;h3 id=&#34;3-8211-a-verificação-do-cookie-gravado-1&#34;&gt;3 &amp;#8211; A verificação do cookie gravado&lt;/h3&gt;

&lt;pre&gt;// Verificação do cookie
var cookieContrasteBranco = document.cookie.indexOf(&#39;contrasteBranco&#39;);
var cookieContrastePreto = document.cookie.indexOf(&#39;contrastePreto&#39;);
var cookieContrasteAzul = document.cookie.indexOf(&#39;contrasteAzul&#39;);

//Verificando o cookie setado anteriormente
var cookieTrue = &#39;&#39;;
if (cookieContrasteBranco != -1) {
 cookieTrue = 1;
} else if (cookieContrastePreto != -1) {
 cookieTrue = 2;
} else if (cookieContrasteAzul != -1) {
 cookieTrue = 3;
} else {
 cookieTrue = &#39;&#39;;
}
//Chamando a function contraste com o valor do cookie guardado
contraste(cookieTrue);&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;node-cookie-1&#34;&gt;Node + Cookie&lt;/h2&gt;

&lt;p&gt;Node? sim, usaremos o Node para subir um servidor, pois não da pra guardar cookie sem um servidor, vamos precisar usar o Node, mas é super simples.&lt;/p&gt;

&lt;p&gt;Não sabe usar? Não sabe o que é? tem um poste aqui muito bom que vai te dar o caminho das pedras, nesse &lt;a href=&#34;https://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js/&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No site &lt;a href=&#34;https://www.npmjs.com/package/http-server&#34;&gt;NPMJS &lt;/a&gt;temos um servidor em que iremos utilizar, abra seu Node e manda essa;&lt;/p&gt;

&lt;pre&gt;npm install http-server -g&lt;/pre&gt;

&lt;p&gt;Pronto, o resultado será esse;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56612&#34; src=&#34;uploads/2016/12/Capture.png&#34; alt=&#34;capture&#34; width=&#34;636&#34; height=&#34;48&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora navegando com o Node até a pasta do seu projeto;&lt;/p&gt;

&lt;pre&gt;http-server&lt;/pre&gt;

&lt;p&gt;Ok, você já tem um servidor no ar, utilize um dos endereços http listados e abra no seu navegador de preferência (&lt;del&gt;&lt;em&gt;Chrome&lt;/em&gt;&lt;/del&gt;);&lt;/p&gt;

&lt;pre&gt;&lt;img class=&#34;alignnone wp-image-56613&#34; src=&#34;uploads/2016/12/Capture-1.png&#34; alt=&#34;capture&#34; width=&#34;640&#34; height=&#34;134&#34; /&gt;&lt;/pre&gt;

&lt;p&gt;Já está tudo pronto, com o servidor no ar já podemos gravar no cookie a escolha do contraste selecionada pelo usuário, isso vai evitar que o usuário atualize a página e carregue a página sem o contraste escolhido.&lt;/p&gt;

&lt;p&gt;já podemos verificar o cookie guardado depois do click no link&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56617&#34; src=&#34;uploads/2016/12/Capture-2.png&#34; alt=&#34;capture&#34; width=&#34;931&#34; height=&#34;509&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Com esse valor guardado no cookie o passo 3 vai funcionar perfeitamente, setando o contraste escolhido anteriormente ao recarregar a página.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Veja o projeto completo no ]&lt;a href=&#34;http://codepen.io/orivelton/pen/XNymQp&#34;&gt;6&lt;/a&gt; e no &lt;a href=&#34;https://github.com/orivelton10/contraste-de-cores&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como instalar Node.js no Linux corretamente (Ubuntu, Debian, Elementary OS)</title>
      <link>http://tableless.com.br/como-instalar-node-js-no-linux-corretamente-ubuntu-debian-elementary-os/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-instalar-node-js-no-linux-corretamente-ubuntu-debian-elementary-os/</guid>
      <description>

&lt;p&gt;Recentemente comecei a minha migração do JSF para o Angular então busquei por um bom curso, pela documentação do &lt;em&gt;Framework&lt;/em&gt; e um bom livro técnico.&lt;/p&gt;

&lt;p&gt;No caso do curso escolhi inicialmente o do &lt;a href=&#34;https://twitter.com/flaviohalmeida&#34;&gt;Flávio Almeida&lt;/a&gt; na &lt;a href=&#34;https://www.alura.com.br/curso-online-angular2-parte1&#34;&gt;Alura&lt;/a&gt; e logo de cara fica claro que não é um &lt;em&gt;Framework&lt;/em&gt; para iniciantes no mundo do JavaScript e nem para iniciantes no mundo da programação, o próprio Flávio avisa sobre isso mais de uma vez além de informar sobre a necessidade de dominar o terminal (o terror dos novatos) do seu sistema operacional.&lt;/p&gt;

&lt;p&gt;Neste curso o Flávio já começa explicando como instalar os requisitos básicos para se começar a estudar sendo basicamente necessário ter instalado o &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt;, qualquer editor de texto (utilizo muito o &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;SublimeText&lt;/a&gt;, mas pra quem ta começando recomendo usar o &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Code&lt;/a&gt; porque ele nativamente consegue trabalhar muito bem com Angular e Node) e o NPM.&lt;/p&gt;

&lt;p&gt;Em distribuições &lt;em&gt;Debian Based&lt;/em&gt; é muito comum utilizar o comando &lt;strong&gt;apt install -nome do pacote-&lt;/strong&gt; e com o &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt; isso pode lhe trazer problemas, novamente o Flávio avisa sobre o possível problema. Entretanto tenho certeza que os mais novos no linux vão preferir utilizar o comando &lt;strong&gt;apt install -nome do pacote-&lt;/strong&gt; do que fazer a instalação do pacote binário e muito provavelmente isso vai quebrar tudo, porque até o momento que estou escrevendo esse texto os repositórios do Debian estão desatualizados (o Debian tem o costume de demorar para atualizar seus repositórios).&lt;/p&gt;

&lt;p&gt;Minha recomendação é que você &lt;strong&gt;não instale o Node&lt;/strong&gt; pelo comando &lt;strong&gt;sudo apt-get install -y nodejs&lt;/strong&gt; vai acontecer um conflito de nomes entre &lt;em&gt;node&lt;/em&gt; e &lt;em&gt;nodejs&lt;/em&gt;, parece besteira que uma simples nomenclatura quebre tudo, mas não é! O NPM que é o gerenciador de dependências vai ficar perdido e algumas funções não funcionarão.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/gritos.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calma! É tentador entrar em desespero, mas segure sua onda…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se você não deseja compilar o arquivo binário de instalação do Node na mão grande, a solução de instalação contínua simples, instale o NVM primeiro e depois o Node. O legal do NVM é que você pode instalar várias versões do Node e ficar alternando entre elas, mas antes de instalar o NVM precisamos de alguns pacotes de dependências que já estão no repositório de sua distribuição Debian Based.&lt;/p&gt;

&lt;h4 id=&#34;sudo-apt-get-update-sudo-apt-get-install-build-essential-libssl-dev&#34;&gt;&lt;em&gt;sudo apt-get update sudo apt-get install build-essential libssl-dev&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Agora que você já tem o necessário em seu sistema vamos instalar o NVM:&lt;/p&gt;

&lt;h4 id=&#34;curl-sl-https-raw-githubusercontent-com-creationix-nvm-v0-31-0-install-sh-7-o-install-nvm-sh&#34;&gt;&lt;em&gt;curl -sL&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh&#34;&gt;&lt;em&gt;https://raw.githubusercontent.com/creationix/nvm/&lt;/em&gt;&lt;strong&gt;&lt;em&gt;v0.31.0&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;/install.sh&lt;/em&gt;&lt;/a&gt; _-o install&lt;em&gt;nvm.sh&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;O número da versão que está em negrito pode mudar com o tempo, então recomendo você acessar a &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;página do projeto no GitHub&lt;/a&gt; e procurar pela nova versão.&lt;/p&gt;

&lt;p&gt;Execute o scrpit com:&lt;/p&gt;

&lt;h4 id=&#34;bash-install-nvm-sh&#34;&gt;_bash install&lt;em&gt;nvm.sh&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Não tenha medo, o que está sendo feito aqui é o download de um script e a execução do mesmo, tudo vai ser instalado em um diretório oculto na pasta do seu usuário &lt;strong&gt;não é necessário utilizar o comando com&lt;/strong&gt; &lt;em&gt;sudo&lt;/em&gt; &lt;strong&gt;nesse caso&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora execute:&lt;/p&gt;

&lt;h4 id=&#34;nvm-ls-remote&#34;&gt;&lt;em&gt;nvm ls-remote&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Ele vai te exibir várias versões do Node e assim sabemos que o NVM está funcionando corretamente. Eu escolhi a versão mais recente do momento a v7.3.0, você pode instalá-la digitando:&lt;/p&gt;

&lt;h4 id=&#34;nvm-install-7-3-0&#34;&gt;&lt;em&gt;nvm install 7.3.0&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Caso você instale mais de uma versão e no futuro tenha necessidade de alternar entre elas utilize o comando:&lt;/p&gt;

&lt;h4 id=&#34;nvm-use-número-da-versão&#34;&gt;&lt;em&gt;nvm use -número da versão-&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Agora vamos verificar a versão do Node para ter certeza que tudo foi instalado corretamente utilizando o comando:&lt;/p&gt;

&lt;h4 id=&#34;node-v&#34;&gt;&lt;em&gt;node -v&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Pronto, agora você já pode dar continuidade aos seus estudos de Angular ou Node.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2, vale a pena?</title>
      <link>http://tableless.com.br/angular-2-vale-pena/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/angular-2-vale-pena/</guid>
      <description>

&lt;p&gt;Ultimamente, com o boom do JavaScript, os desenvolvedores front end se depararam com a difícil questão: qual framework e/ou biblioteca usar em meu projeto? A resposta é: depende do que você está procurando. Construir uma SPA completa? Uma aplicação híbrida? Ou apenas um simples formulário? O objetivo aqui não é enumerar as diferenças entre todas as várias ferramentas existentes no mercado, e sim focar no Angular, a que considero mais completa e que pode atender a todos os objetivos de um projeto.&lt;/p&gt;

&lt;p&gt;O Angular, apesar de ter sido pensado inicialmente para lidar apenas com formulários, é hoje uma das ferramentas mais largamente utilizada para desenvolvimento front end, porém, sempre teve seus problemas, dentre eles, os problemas de performance. E é esse um dos principais motivos que levou a equipe do Angular a desenvolver, do zero, a sua versão 2.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;https://angular-2-training-book.rangle.io/handout/why_angular_2.html&#34; target=&#34;_blank&#34;&gt;rangle.io&lt;/a&gt; listou as principais diferenças entre o Angular 1 e o 2:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“_Transitional Architecture_” se refere ao estilo de programação no Angular 1 de forma a se aproximar o máximo possível do Angular 2, mas com &lt;em&gt;Controllers&lt;/em&gt; e _Diretivas,_ ao invés de classes TypeScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56319 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/Captura-de-Tela-2016-10-27-às-10.28.09.png&#34; alt=&#34;Comparação Angular 1 e 2 do rangle.io&#34; width=&#34;718&#34; height=&#34;274&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mas-e-aí-vale-ou-não-a-pena&#34;&gt;Mas e aí, vale ou não a pena?&lt;/h2&gt;

&lt;h3 id=&#34;adoção&#34;&gt;Adoção&lt;/h3&gt;

&lt;p&gt;A preocupação da maioria das pessoas é simplesmente não saber se Angular 2 vai realmente “vingar”, e acabam ficando com receio de migrar. Fazendo uma simples pesquisa no Google Trends, é possível comparar a popularidade do termo Angular 2, comparado a VueJS e ReactJS, as ferramentas que estão mais em alta atualmente.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56321 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/trends.jpg&#34; alt=&#34;Comparação entre AngularJS, VueJS e ReactJS&#34; width=&#34;1118&#34; height=&#34;357&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mobile&#34;&gt;Mobile&lt;/h3&gt;

&lt;p&gt;Se você pretende desenvolver aplicativos híbridos, cá está mais um excelente motivo para usar Angular 2, a equipe do Ionic está finalizando o desenvolvimento da sua segunda versão, que é totalmente escrita em Angular 2.&lt;/p&gt;

&lt;h3 id=&#34;typescript&#34;&gt;TypeScript&lt;/h3&gt;

&lt;p&gt;Uma vez que a maioria dos navegadores não estão habilitados para rodar ES6 e ES7, surgiram alguns pré-compiladores, que geram todo o código para o JavaScript “entendível” pelo navegador. Mas o Typescript vai um pouco mais longe.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56324 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/v94tyy.jpg&#34; alt=&#34;Meme TypeScript&#34; width=&#34;512&#34; height=&#34;358&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O TypeScript, criado pela Microsoft (isso mesmo), é um “_superset_” do JavaScript, que, além de implementar as funcionalidades do ES6+, traz uma série de “poderes” no desenvolvimento. Uma das coisas que eu gosto bastante, é a capacidade de &lt;em&gt;autocomplete&lt;/em&gt; nas IDEs (se você tiver uma que suporte, como o Sublime Text ou VSCode). Mas acredito que o mais interessante é a parte de organização do código. O TypeScript tem uma sintaxe muito mais clara e fácil de entender. Abaixo um mesmo código escrito em TypeScript e JavaScript:&lt;/p&gt;

&lt;p&gt;TypeScript:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class HelloWorld {
  text: string;
  constructor(text: string) {
    this.text = text;
  }
}
let txt = new HelloWorld(&#34;Olá mundo!&#34;);
console.log(txt);
&lt;/pre&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var HelloWorld = (function () {
  function HelloWorld(text) {
    this.text = text;
  }
return HelloWorld;
}());
var txt = new HelloWorld(&#34;Olá mundo!&#34;);
console.log(txt);&lt;/pre&gt;

&lt;h3 id=&#34;performance&#34;&gt;Performance&lt;/h3&gt;

&lt;p&gt;Um ponto muito importante de destaque é a performance. O Angular 1, de fato, oferece uma experiência de baixa performance devido a excessivas interações com a DOM. O Angular 2 vem pra resolver esse problema de uma vez por todas. O gráfico abaixo, feito pela &lt;a href=&#34;https://auth0.com/blog/more-benchmarks-virtual-dom-vs-angular-12-vs-mithril-js-vs-the-rest/&#34; target=&#34;_blank&#34;&gt;auth0&lt;/a&gt;, mostra, na prática o resultado do &lt;em&gt;benchmark&lt;/em&gt; que eles realizaram:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56328 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/angular2-grafico.png&#34; alt=&#34;angular2 grafico por auth0&#34; width=&#34;615&#34; height=&#34;338&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O Angular 2 veio pra ficar, além de ser uma ferramenta que evoluiu, ter uma grande empresa como o Google por trás só ajuda. A adoção deste framework só tende a crescer mais, e, sim, vale muito a pena usar em seus projetos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proteja seu código usando o Webpack</title>
      <link>http://tableless.com.br/proteja-seu-codigo-usando-o-webpack/</link>
      <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/proteja-seu-codigo-usando-o-webpack/</guid>
      <description>

&lt;p&gt;Não é um eufemismo dizer que que as ferramentas de front-end avançam rapidamente. Por um tempo, &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;Grunt&lt;/a&gt; foi o principal automatizador. E desde então a comunidade adotou o &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt;, uma alternativa de streaming. Embora essas ferramentas sejam ótimas, você ainda precisará trabalhar dura para manter o seu sistema. E é aí que entram os empacotadores como o &lt;a href=&#34;http://browserify.org/&#34; target=&#34;_blank&#34;&gt;Browserify&lt;/a&gt; e &lt;a href=&#34;https://webpack.github.io/&#34; target=&#34;_blank&#34;&gt;Webpack&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;como-usar-um-empacotador&#34;&gt;Como usar um empacotador&lt;/h2&gt;

&lt;p&gt;Os empacotadores resolvem o problema fundamental no desenvolvimento front-end. Eles permitem que você transforme assets arbitrários em algo que possa ser consumido por um navegador. Se você está usando NPM, e deveria, você pode empacotar todos esses pacotes que está utilizando em seu aplicativo para poder usá-los no navegador. Mas há a possibilidade de você querer fazer muitas outras coisas além de empacotar, então você vai entrelaçar isso com alguma ferramenta de automação como o Grunt ou Gulp. Você pode até ignorar um task runner e implementar suas tarefas por meio da seção de &lt;strong&gt;scripts&lt;/strong&gt; &lt;code&gt;package.json&lt;/code&gt; (se estiver usando NPM) para configurar as transformações do Browserify.&lt;/p&gt;

&lt;h2 id=&#34;conhecendo-o-webpack&#34;&gt;Conhecendo o Webpack&lt;/h2&gt;

&lt;p&gt;Você pode alcançar resultados similares tanto com o Browserify quanto o Webpack. O Browserify está mais próximo da filosofia Unix. Ao usá-lo você está literalmente colando pequenos utilitários juntos. Como resultado, o Browserify é fácil de conseguir. Mas se você tem uma lista longa de transformações que deseja aplicar em seu código é melhor utilizar um task runner como Grunt ou Gulp para automatizar esse processo.&lt;/p&gt;

&lt;p&gt;Por outro lado, se você usa Webpack pode nem precisar do Grunt ou Gulp. O Webpack presume que existem certas tarefas que você sempre deseja executar. É claro que você deseja mover os arquivos de uma pasta de origem para um diretório de compilação. Claro que você vai querer completar seu código fonte usando uma (geralmente longa) lista de transformações (aliás, elas são chamadas de &lt;strong&gt;loaders&lt;/strong&gt;, ou carregadores, no Webpack). É claro que você quer usar bibliotecas em diferentes formatos de módulo como CoomonJS, RequireJS ou os novos módulos ES6 se desejar.&lt;/p&gt;

&lt;p&gt;Você pode até desejar lidar com diferentes formatos de arquivos. Para lhe dar um exemplo melhor do que isso significa na prática, considere os códigos abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;style.css&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    font-family: sans-serif;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// load style to the resulting bundle
require(&#39;./style.css&#39;);

// just print hello, normally we would do
// something more involved and start the
// application here
console.log(&#39;hello world&#39;);&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var webpack = require(&#39;webpack&#39;);

    module.exports = {
    // this is the top level file or set of files
    entry: &#39;./index.js&#39;,
    // it will bundle everything inside this output path
    output: {
    path: __dirname,
    filename: &#39;bundle.js&#39;
},
module: {
loaders: [
{
    // 1. resolve @import and url() through css-loader
    // 2. load the result to bundle using style-loader
    // note that loaders are interpreted from right to left
    test: /.css$/, // A regexp to test the require path
    loaders: [&#39;style&#39;, &#39;css&#39;]
}
]
},
plugins: [
    // minify output
    new webpack.optimize.UglifyJsPlugin()
]
};&lt;/pre&gt;

&lt;p&gt;O Webpack permite que você carregue o CSS da mesma forma que carrega outros códigos com &lt;a href=&#34;https://github.com/webpack/css-loader&#34; target=&#34;_blank&#34;&gt;css-loader&lt;/a&gt; e &lt;a href=&#34;https://github.com/webpack/style-loader&#34; target=&#34;_blank&#34;&gt;style-loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por que você iria querer usar o require para o seu CSS em vez da mesma velha maneira que temos utilizado CSS? Bem, porque o Webpack é inteligente o suficiente para concatenar seu CSS quando ele é pequeno o bastante, caso contrário ele irá minificar o arquivo e dar a ele um nome único para fins de cache. O mesmo pode ser feito com imagens utilizando o &lt;a href=&#34;https://github.com/webpack/url-loader&#34; target=&#34;_blank&#34;&gt;url-loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você executou o Webpack contra essa configuração, você irá acabar com um &lt;code&gt;bundle.js&lt;/code&gt; minificado que contém CSS inline. Pode parecer muito esforço para alcançar um simples resultado como esse. Isso está além do ponto. Considere o seguinte:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;E se você quisesse usar os novos recursos do Javascript em seu projeto? Você teria que configurar o &lt;a href=&#34;https://www.npmjs.com/package/babel-loader&#34; target=&#34;_blank&#34;&gt;babel-loader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse usar CSS compilado? Você precisaria configurar o &lt;a href=&#34;https://github.com/webpack/less-loader&#34; target=&#34;_blank&#34;&gt;less-loader&lt;/a&gt; ou o &lt;a href=&#34;https://github.com/jtangelder/sass-loader&#34; target=&#34;_blank&#34;&gt;sass-loader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse sourcemaps? Você teria que configurar a opção &lt;a href=&#34;https://webpack.github.io/docs/configuration.html#devtool&#34; target=&#34;_blank&#34;&gt;devtool&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse uma saída UMD para sua biblioteca? É preciso configurar o &lt;a href=&#34;https://webpack.github.io/docs/configuration.html#output-librarytarget&#34; target=&#34;_blank&#34;&gt;output.libraryTarget&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse um servidor de desenvolvimento &lt;em&gt;hot loading&lt;/em&gt;? Você precisaria configurar o &lt;a href=&#34;https://webpack.github.io/docs/webpack-dev-server.html&#34; target=&#34;_blank&#34;&gt;webpack-dev-server&lt;/a&gt; ou construir um sozinho baseado no Express, como mostrado no &lt;a href=&#34;https://github.com/gaearon/react-transform-boilerplate&#34; target=&#34;_blank&#34;&gt;react-transform-boilerplate&lt;/a&gt;. O recurso de &lt;em&gt;hot loading&lt;/em&gt; separa Webpack conforme atualiza seu navegador automaticamente enquanto mantém o estado do aplicativo.&lt;/li&gt;
&lt;li&gt;E se você quisesse múltiplas metas (desenvolvimento, produção, teste)? Poderia usar uma solução como a &lt;a href=&#34;https://www.npmjs.com/package/webpack-merge&#34; target=&#34;_blank&#34;&gt;webpack-merge&lt;/a&gt; e conectar seu automatizador de tarefas com ela.&lt;/li&gt;
&lt;li&gt;E se você quisesse carregar algumas dependências lentamente? Você precisaria configurar o &lt;a href=&#34;https://webpack.github.io/docs/code-splitting.html#require-ensure&#34; target=&#34;_blank&#34;&gt;require.ensure&lt;/a&gt;. O Webpack irá gerar pacotes separados para dividir os pontos e carregá-los sob demanda.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basicamente, você pode desenvolver as configurações para várias direções baseado em suas necessidades. Há definitivamente uma curva de aprendizado e leva um tempo para entender todas as opções. Dito isso, a abordagem é poderosa uma vez que você entende.&lt;/p&gt;

&lt;h2 id=&#34;conectando-o-webpack-com-jscrambler&#34;&gt;Conectando o Webpack com Jscrambler&lt;/h2&gt;

&lt;p&gt;Se você quiser adicionar o Jscrambler para o seu processo de desenvolvimento e estiver usando o Webpack, nós temos uma boa notícia para você! O &lt;a href=&#34;https://github.com/jscrambler/jscrambler-loader&#34; target=&#34;_blank&#34;&gt;jscrambler-loader&lt;/a&gt; está disponível e é realmente fácil de configurar assim como a maioria dos loaders do Webpack.&lt;/p&gt;

&lt;p&gt;Nós vamos lhe mostrar o quanto essa configuração é fácil utilizando o exemplo abaixo e adicionando o &lt;a href=&#34;https://github.com/jscrambler/jscrambler-loader&#34; target=&#34;_blank&#34;&gt;jscrambler-loader&lt;/a&gt; em nosso processo. Também vamos remover o &lt;strong&gt;UglifyJsPlugin&lt;/strong&gt;, já que o &lt;strong&gt;Jscrambler&lt;/strong&gt; pode desempenhar essa mesma função.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var webpack = require(&#39;webpack&#39;);

    module.exports = {
    // this is the top level file or set of files
    entry: &#39;./index.js&#39;,
    // it will bundle everything inside this output path
    output: {
    path: __dirname,
    filename: &#39;bundle.js&#39;
},
module: {
loaders: [
{
    // 1. resolve @import and url() through css-loader
    // 2. load the result to bundle using style-loader
    // note that loaders are interpreted from right to left
    test: /.css$/, // A regexp to test the require path
    loaders: [&#39;style&#39;, &#39;css&#39;]
},
{
    test: /.js$/,
    exclude: /node_modules/,
    loader: &#39;jscrambler-loader&#39;
}
]
}
};&lt;/pre&gt;

&lt;p&gt;Você também irá precisar criar um arquivo chamado &lt;strong&gt;.jscramblerrc&lt;/strong&gt; com suas credenciais da API.&lt;/p&gt;

&lt;p&gt;Você irá encontrar elas no painel de controlo da sua conta Jscrambler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.jscramblerrc&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{
    &#34;keys&#34;: {
    &#34;accessKey&#34;: &#34;XXXXXX&#34;,
    &#34;secretKey&#34;: &#34;XXXXXX&#34;
},
&#34;params&#34;: {
    &#34;self_defending&#34;: &#34;%DEFAULT%&#34;
    // there is a big set of transformations that you can use
    // check https://jscrambler.com/en/help/javascript_obfuscation
}
}&lt;/pre&gt;

&lt;p&gt;Pronto! Você está pronto para depurar o seu código protegido!&lt;/p&gt;

&lt;p&gt;Há várias outras formas de conectar o Jscrambler com o seu sistema. Isso depende do seu task runner. Eu reuni as possíveis abordagens abaixo:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grunt &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/grunt-jscrambler&#34; target=&#34;_blank&#34;&gt;grunt-jscrambler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gulp &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/gulp-jscrambler&#34; target=&#34;_blank&#34;&gt;gulp-jscrambler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;package.json&lt;/em&gt; &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/jscrambler&#34; target=&#34;_blank&#34;&gt;Jscrambler CLI tool&lt;/a&gt;. Para isso funcionar, crie um &lt;em&gt;script&lt;/em&gt; separado e depois passe sua versão minificada do Webpack através dele. É preferível manter uma versão local da ferramenta Jscrambler CLI (&lt;code&gt;npm i jscrambler --save-dev&lt;/code&gt;) dentro de seu projeto para que tudo funcione independentemente do ambiente.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O Jscrambler tem um conjunto de ferramentas para proteger seu código (ofuscação + armadilhas no código + serviço de autoproteção de aplicativo, ou RASP em inglês), fazendo com que a engenharia reversa fique significantemente difícil, mas também tem alguns recursos de otimização de código para você tirar vantagem. Você pode até usá-lo para minificação ou compressão.&lt;/p&gt;

&lt;p&gt;Saiba mais sobre o Jscrambler em &lt;a href=&#34;https://jscrambler.com?utm_medium=social&amp;utm_source=tableless&#34; target=&#34;_blank&#34;&gt;jscrambler.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Ainda que o Webpack não seja a ferramenta mais fácil de aprender, eu recomendo que você dê uma olhada nela. O livro &lt;a href=&#34;http://survivejs.com/&#34; target=&#34;_blank&#34;&gt;SurviveJS &amp;#8211; Webpack and React&lt;/a&gt;, que está em inglês, fala sobre essa ferramenta com mais detalhes. A maioria dos conteúdos está disponível gratuitamente e irá lhe ajudar a entender o Webpack e React a um nível mais profundo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trabalhando com serviços no Javascript</title>
      <link>http://tableless.com.br/trabalhando-com-servicos-no-javascript/</link>
      <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/trabalhando-com-servicos-no-javascript/</guid>
      <description>

&lt;p&gt;JavaScript é uma &lt;em&gt;linguagem multiparadigma&lt;/em&gt;. Pode-se “_emular_” várias técnicas de programação com ele, e isso é &lt;strong&gt;incrível&lt;/strong&gt; pois podemos decidir qual o melhor paradigma para a resolução dos problemas dos nossos projetos. Porém se por um lado isso pode parecer poderoso para a linguagem, também pode deixar os iniciantes bem confusos, é muito comum escolher a abordagem errada para o problema. Por esse motivo que o JavaScript em sido polêmico nos últimos anos.&lt;/p&gt;

&lt;p&gt;Pensando nisso muitos desenvolvedores criam suas próprias soluções, uns pensando em ajudar e outros em forçar padrões.&lt;/p&gt;

&lt;p&gt;Eu prefiro ensinar a pescar, pois JavaScript não tem que ser complexo. A &lt;strong&gt;versão 6 do JavaScript (ES6/ES2015)&lt;/strong&gt; tornou a linguagem muito mais expressiva, facilitando muito o entendimento.&lt;/p&gt;

&lt;h3 id=&#34;encapsulando-lógicas&#34;&gt;Encapsulando lógicas&lt;/h3&gt;

&lt;p&gt;Tudo em JavaScript são objetos (exceto &lt;em&gt;undefined&lt;/em&gt;), então &lt;strong&gt;serviços também são objetos&lt;/strong&gt;, dominando como criamos e trabalhamos com objetos todas as coisas ficam bem mais tranquilas.&lt;/p&gt;

&lt;p&gt;O Jean Carlo Emer fez um artigo muito, &lt;a href=&#34;http://tableless.com.br/modularizacao-em-javascript/&#34;&gt;mas muito bom sobre Modularização no JavaScript&lt;/a&gt;. Sugiro que você leia, mas vou explicar um pouco sobre o assunto logo abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-medium aligncenter&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hsXIPyBqqI7ZTh2QyLfizw.gif&#34; alt=&#34;i know JavaScript basics &#34; width=&#34;320&#34; height=&#34;237&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;scope-e-closures&#34;&gt;Scope e Closures&lt;/h4&gt;

&lt;p&gt;JavaScript possui escopo léxico. Entre outras coisas isso permite que você crie &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;De maneira resumida você cria um “ambiente controlado” onde há funções/variáveis que só podem ser acessadas naquele escopo, criando um enclausuramento (&lt;em&gt;closure&lt;/em&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const initPage = (root) =&amp;gt; {
  const $root = $(root);
  const $menu = $root.find(&#39;.menu&#39;);
  const $profile = $menu.find(&#39;.profile&#39;);

  const initProfile = () =&amp;gt; {
    $.get(&#39;/me&#39;)
      .then(response =&amp;gt; $profile.text(response.username));
    // ...
  };

  const showProfileModal = e =&amp;gt; {
   // ...
  };

  $profile.on(&#39;click&#39;, e =&amp;gt; showProfileModal(e));

  initProfile();
};

initPage(&#39;body&#39;);
&lt;/pre&gt;

&lt;p&gt;Este é um exemplo bem bobo, mas que ilustra bem como criamos &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As variáveis declaradas dentro de &lt;em&gt;initPage&lt;/em&gt; só existem naquele escopo.&lt;/p&gt;

&lt;p&gt;No mesmo exemplo podemos refatorar esse código em uma &lt;strong&gt;IIFE (Immediately-Invoked Function Expression)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;((root) =&amp;gt; {
  const $root = $(root);
  const $menu = $root.find(&#39;.menu&#39;);
  const $profile = $menu.find(&#39;.profile&#39;);

  const initProfile = () =&amp;gt; {
    $.get(&#39;/me&#39;)
     .then(response =&amp;gt; $profile.text(response.username));
    //  ...
  };

  const showProfileModal = e =&amp;gt; {
    // ...
  };

  $profile.on(&#39;click&#39;, e =&amp;gt; showProfileModal(e));

  initProfile();
})(&#39;body&#39;);
&lt;/pre&gt;

&lt;p&gt;Nesse código declaramos uma função e a executamos imediatamente, passando um argumento. Isso é extremamente útil quando queremos fazer um processamento de uma informação que vai servir apenas para criar uma variável.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const timezones = (() =&amp;gt; {
  const zones = [];
  const min = -12;
  const max = 13;
  let simbol;

  for (let i = min; i &amp;lt;= max; i++) {
    simbol = (i &amp;lt; 0) ? &#39;&#39; : &#39;+&#39;;
    zones.push(`GMT${simbol}${i}`);
  }

  return zones;
})();
&lt;/pre&gt;

&lt;p&gt;Como você já pode perceber, é possível expor dados de uma &lt;em&gt;closure&lt;/em&gt; como no exemplo anterior. A variável zones é retornada, assim a variável &lt;em&gt;timezones&lt;/em&gt; agora possui como valor o resultado da &lt;em&gt;closure&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nesse exemplo a &lt;em&gt;closure&lt;/em&gt; não usa dados externos a ela (&lt;em&gt;parent scope&lt;/em&gt;/escopo pai) porém dada a natureza do JavaScript isso é perfeitamente possível.&lt;/p&gt;

&lt;p&gt;Isso é útil para não poluir o escopo principal com informações irrelevantes.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const makeCounter = (start = 0) =&amp;gt; {
  let current = start;

  const add = (value = 1) =&amp;gt; current += value;
  const remove = (value = 1) =&amp;gt; add(value * -1);
  const get = () =&amp;gt; current;

  return { add, remove, get };
};

const counter = makeCounter(10);

counter.add() // 11
counter.add() // 12
counter.add(8) // 20
counter.remove(10) // 10
&lt;/pre&gt;

&lt;p&gt;Este é um exemplo bem interessante. Estamos combinando &lt;em&gt;closures&lt;/em&gt; com &lt;em&gt;factory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Com isso podemos criar vários contadores, e trabalhar como melhor convir com estes contadores.&lt;/p&gt;

&lt;div id=&#34;attachment_56186&#34; style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;wp-image-56186 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/wtf.gif&#34; alt=&#34;Só isso! Simples, né?&#34; width=&#34;500&#34; height=&#34;284&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Só isso! Simples, né?
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Se você entendeu como o exemplo do contador funciona, parabéns você já sabe criar serviços com javascript.&lt;/p&gt;

&lt;p&gt;Isso mesmo, este contator é um serviço. Na verdade ele é um &lt;em&gt;factory&lt;/em&gt;, mas com pequenos ajustes ele vira um serviço de fácil reuso.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// makeCounter.js -&amp;gt; factory
const makeCounter = (start = 0) =&amp;gt; {
  let current = start;

  const add = (value = 1) =&amp;gt; current += value;
  const remove = (value = 1) =&amp;gt; add(value * -1);
  const get = () =&amp;gt; current;

  return { add, remove, get };
};

export default makeCounter
&lt;/pre&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// counter.js -&amp;gt; service
import makeCounter from &#39;./makeCounter.js&#39;;

export default makeCounter(0);
&lt;/pre&gt;

&lt;p&gt;Agora temos dois arquivos, um contendo o &lt;em&gt;factory&lt;/em&gt; do contador, e outro contendo o serviço de contagem.&lt;/p&gt;

&lt;h2 id=&#34;módulos-javascript&#34;&gt;Módulos JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-56185 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/module.gif&#34; alt=&#34;module&#34; width=&#34;400&#34; height=&#34;250&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como visto anteriormente, é bem simples criar serviços com JavaScript, basta antes entender alguns conceitos.&lt;/p&gt;

&lt;p&gt;Porém isso não é tudo, se você esta criando um serviço é porque tem a intenção de reusar esta lógica em mais de um local da aplicação. Isto não é uma regra, talvez você queira apenas centralizar a lógica da operação.&lt;/p&gt;

&lt;p&gt;Não importa o objetivo inicial, você vai acabar criando um módulo JavaScript para aquela sua operação/serviço. No exemplo do contador foram criados dois arquivos, o &lt;em&gt;contador&lt;/em&gt; e o &lt;em&gt;factory do contador&lt;/em&gt;. Nesse momento você precisa entender minimamente o que são módulos JavaScript.&lt;/p&gt;

&lt;p&gt;Em resumo: um arquivo JavaScript é um módulo e um módulo JavaScript é um arquivo.&lt;/p&gt;

&lt;p&gt;Você pode criar um módulo a partir de outros módulos, como é o exemplo do contador, ele é composto a partir do módulo &lt;em&gt;makeCouter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Em geral a lógica dos módulo é encapsulada em &lt;em&gt;closures&lt;/em&gt; e o retorno delas é &lt;em&gt;cacheado&lt;/em&gt;, sendo assim, uma vez que você importa um módulo, ele será &lt;strong&gt;o mesmo sempre, compartilhando seu estado&lt;/strong&gt;. Saiba mais &lt;a href=&#34;http://www.vuejs-brasil.com.br/utilizando-vuex-na-forma-modular-2/#vamosentenderoqueaconteceu&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;usando-serviços&#34;&gt;Usando serviços&lt;/h3&gt;

&lt;p&gt;Agora que você possui essas informações acredito que criar seus próprios serviços não será nenhum &lt;em&gt;bicho de sete cabeças&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vale a pena dizer que tudo pode ser considerado um serviço, inclusive &lt;em&gt;factories&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para reforçar vou deixar mais um exemplo de uso de serviços.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import Http from &#39;./http.js&#39;;
import UsersService from &#39;./modules/users/service.js&#39;;

Http.setToken(&#39;XPTO&#39;); // Define o token de autentificação

// Cattega a primeira página de usuários
// Exibe um alerta com o nome do primeiro usuário retornado pelo serviço

UsersService
  .getAll({ page: 1 })
  .then(result =&amp;gt; result.data)
  .then(data =&amp;gt; data[0])
  .then(first =&amp;gt; {
    alert(first.name);
  });
&lt;/pre&gt;

&lt;p&gt;Para efeito de aprendizado uma sintaxe alternativa, com &lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/import&#34;&gt;&lt;em&gt;import binding&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { setToken } from &#39;./http.js&#39;;
import { getAll as getAllUsers } from &#39;./modules/users/service.js&#39;;

setToken(&#39;XPTO&#39;); // Define o token de autentificação

// Carrega a primeira página de usuários
// Exibe um alerta com o nome do primeiro usuário retornado pelo serviço

getAllUsers({ page: 1 })
  .then(result =&amp;gt; result.data)
  .then(data =&amp;gt; data[0])
  .then(first =&amp;gt; {
    alert(first.name);
  });
&lt;/pre&gt;

&lt;p&gt;Este pode não parecer para alguns mas é um exemplo bem prático do uso de serviços.&lt;/p&gt;

&lt;p&gt;O serviço de &lt;em&gt;Http&lt;/em&gt; também é usado pelo &lt;em&gt;serviço de usuários&lt;/em&gt;, por isso é possível definir o &lt;strong&gt;&lt;em&gt;token&lt;/em&gt;&lt;/strong&gt; de autentificação antes de efetivamente usar os serviços, pois eles vão compartilhar o mesmo estado/serviço.&lt;/p&gt;

&lt;p&gt;Outra característica interessante é que esses serviços não estão ligados diretamente a nenhum contexto. Isso significa que não importa que ambiente você esteja ou que &lt;em&gt;framework&lt;/em&gt; você esta usando, os serviços são agnósticos. Eles podem ser usados no &lt;strong&gt;NodeJS, VueJS, ReactJS&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;p&gt;Este é um dos princípios do polimorfismos do JavaScript porém este é outro assunto.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Se quiser saber mais sobre meu trabalho visite meu blog&lt;a href=&#34;https://medium.com/@luizvinicius73&#34;&gt; https://medium.com/@luizvinicius73&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Este artigo foi originalmente postado no meu &lt;a href=&#34;https://medium.com/by-vinicius-reis/trabalhando-com-servicos-no-javascript-864310cf386c&#34;&gt;blog no medium&lt;/a&gt; em 31 de Julho de 2016&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando uma aplicação móvel com Ionic 2 e Angular 2 em dez passos</title>
      <link>http://tableless.com.br/criando-uma-aplicacao-movel-com-ionic-2-e-angular-2-em-dez-passos/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-uma-aplicacao-movel-com-ionic-2-e-angular-2-em-dez-passos/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;À esta altura do campeonato é provável que você já tenha ouvido falar da nova versão deste famoso framework para criação de aplicações móveis híbridas. O &lt;strong&gt;&lt;a href=&#34;https://ionicframework.com/docs/v2/&#34; target=&#34;_blank&#34;&gt;Ionic 2&lt;/a&gt;&lt;/strong&gt; acaba de chegar em seu &lt;em&gt;Release Candidate&lt;/em&gt; e, com ele, trás uma série de recursos e otimizações de código, além de um considerável ganho de performance! Muito desse mérito se deve ao &lt;strong&gt;&lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34;&gt;Angular&lt;/a&gt;&lt;/strong&gt; (como é chamada a nova versão do framework, que deixa para trás o &amp;#8220;JS&amp;#8221; ao final do nome) que chega &amp;#8211; finalmente &amp;#8211; na sua versão estável, provando que não está para brincadeiras.&lt;/p&gt;

&lt;p&gt;Depois de passar por várias mudanças e quebras de código à cada novo release, o &lt;strong&gt;Ionic 2&lt;/strong&gt; agora atinge a maturidade e se torna um competidor ainda mais forte do modelo de desenvolvimento tradicional (nativo). No entanto, se você já está familiarizado com o &lt;strong&gt;&lt;a href=&#34;http://ionicframework.com/&#34; target=&#34;_blank&#34;&gt;Ionic 1&lt;/a&gt;&lt;/strong&gt;, a mudança nos conceitos pode lhe soar um tanto quanto desagradáveis à primeira vista. Mas uma vez que você entende como as peças se encaixam, vai perceber que criar aplicações móveis com o framework tornou-se uma atividade ainda mais simples e recompensadora.&lt;/p&gt;

&lt;h3 id=&#34;o-que-tem-de-novo&#34;&gt;O que tem de novo?&lt;/h3&gt;

&lt;p&gt;O Ionic foi desenvolvido com base no &lt;strong&gt;&lt;a href=&#34;https://angularjs.org/&#34; target=&#34;_blank&#34;&gt;AngularJS&lt;/a&gt;&lt;/strong&gt;, um framework voltado para a criação de aplicações web modernas, construídas com base em uma página &lt;strong&gt;HTML5&lt;/strong&gt; que atualiza seu conteúdo de maneira dinâmica (as famosas &lt;em&gt;Single Page Applications&lt;/em&gt; ou &lt;em&gt;SPAs&lt;/em&gt;). Ao tirar proveito dessa arquitetura &amp;#8211; e adicionar uma série de estilos que emulam o visual de aplicações nativas &amp;#8211; o Ionic facilitou, em muito, a tarefa de construir um app híbrido, ou seja, aquele que executa tanto em smartphones &lt;strong&gt;iOS&lt;/strong&gt; quando &lt;strong&gt;Android&lt;/strong&gt;, otimizando o seu &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Time_to_market&#34; target=&#34;_blank&#34;&gt;Tempo de Mercado&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mesmo ainda sendo executado em uma &lt;strong&gt;WebView&lt;/strong&gt; (browser interno dos smartphones), uma aplicação baseada no Ionic 2 é muito mais rápida, modular e escalável, se comparada com a primeira versão. Principalmente porque o framework segue os padrões web mais recentes, como a nova especificação &lt;strong&gt;ES6&lt;/strong&gt; (ou ES2015), trazendo para o javaScript conceitos como &lt;strong&gt;classes&lt;/strong&gt;, &lt;strong&gt;módulos&lt;/strong&gt; e &lt;strong&gt;arrow functions&lt;/strong&gt;. Além disso, temos também a presença do polêmico &lt;strong&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34; target=&#34;_blank&#34;&gt;TypeScript&lt;/a&gt;&lt;/strong&gt; (opcional), que trás o poder da tipagem para o seu código, com o intuito de minimizar erros, simplificar a injeção de dependências, facilitar testes, e etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/tumblr_npjjd6T4Lu1tq4of6o1_400.gif&#34; alt=&#34;Too much information - gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mas embora tudo isso pareça um verdadeiro balaio de gato que funciona mais como repelente do que atrativo, não se deixe enganar: A versão 2 do Ionic dá um considerável salto de inovação em relação à sua versão original e abre caminho para &lt;a href=&#34;https://ionicframework.com/docs/v2/resources/progressive-web-apps/&#34; target=&#34;_blank&#34;&gt;novas e interessantes tendências&lt;/a&gt; que valem a pena serem exploradas!&lt;/p&gt;

&lt;h2 id=&#34;mão-na-massa&#34;&gt;Mão na massa!&lt;/h2&gt;

&lt;p&gt;Para entender melhor como se constrói uma aplicação com o Ionic 2, vamos criar uma do zero 😀&lt;/p&gt;

&lt;p&gt;A aplicação que iremos construir é um simples leitor de feeds baseado na API do &lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt;&lt;/strong&gt;, o poderoso canal agregador de notícias, onde membros da comunidade podem submeter conteúdos como links, textos, imagens, etc. O app será 100% funcional e poderá ser instalado no seu smartphone e, quem sabe, até mesmo evoluir com a inclusão de novas funcionalidades.&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-framework&#34;&gt;Instalando o framework&lt;/h3&gt;

&lt;p&gt;Se você já tem o Ionic 1 instalado na sua máquina, basta digitar o seguinte comando no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g ionic&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Esse comando atualiza o framework para trabalhar com o Ionic 2 sem afetar a instalação da versão 1.&lt;/p&gt;

&lt;p&gt;Mas caso você seja marinheiro de primeira viagem, certifique-se que tenha o &lt;strong&gt;&lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt;&lt;/strong&gt; instalado na sua máquina e, em seguida, digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g ionic cordova&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lembre-se de que você também deve ter o SDK do Android e o Java instalados para fazer build para Android e/ou o Xcode para o build no iPhone:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ionicframework.com/docs/v2/resources/platform-setup/mac-setup.html&#34; target=&#34;_blank&#34;&gt;Guia de instalação para Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ionicframework.com/docs/v2/resources/platform-setup/windows-setup.html&#34; target=&#34;_blank&#34;&gt;Guia de instalação para Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depois que a instalação for concluída, você pode verificar a versão do framework no terminal, digitando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic -v&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;criando-um-novo-projeto&#34;&gt;Criando um novo projeto&lt;/h3&gt;

&lt;p&gt;O CLI (&lt;em&gt;Command Line Interface&lt;/em&gt;) do Ionic vem com um monte de comandos úteis que nos ajudam na criação e na manutenção dos projetos. Para conferir a lista de comandos disponíveis, digite:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic help&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Por enquanto o que nos interessa é o comando &lt;strong&gt;start&lt;/strong&gt;. Digite o seguinte no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic start MyReader blank --v2 --appname &amp;quot;Best Reader Ever&amp;quot; --id &amp;quot;com.tableless.myreader&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;O comando &lt;strong&gt;start&lt;/strong&gt; oferece três tipos de templates com código boilerplate. São eles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sidemenu&lt;/strong&gt; &amp;#8211; adiciona um menu lateral à aplicação (estilo de navegação &lt;a href=&#34;https://material.google.com/patterns/navigation-drawer.html&#34; target=&#34;_blank&#34;&gt;padrão no Android&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tabs&lt;/strong&gt; &amp;#8211; cria uma navegação baseada em guias (modelo de organização de conteúdo &lt;a href=&#34;https://developer.apple.com/ios/human-interface-guidelines/ui-bars/tab-bars/&#34; target=&#34;_blank&#34;&gt;incentivado pelo iOS&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blank&lt;/strong&gt; &amp;#8211; cria um projeto com boilerplate básico, sem nenhum template específico.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O comando que digitamos no terminal vai utilizar o template &lt;strong&gt;blank&lt;/strong&gt;. Também passamos mais três parâmetros adicionais: &lt;strong&gt;v2&lt;/strong&gt; que informa que queremos trabalhar com a versão 2 do Ionic, &lt;strong&gt;appname&lt;/strong&gt;, que define um nome de projeto menos formal e &lt;strong&gt;id&lt;/strong&gt;, que nos possibilita definir o package da aplicação.&lt;/p&gt;

&lt;p&gt;Vamos agora acessar a pasta do nosso projeto, digitando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd MyReader&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-1-8211-conhecendo-a-arquitetura&#34;&gt;Passo 1 &amp;#8211; Conhecendo a arquitetura&lt;/h3&gt;

&lt;p&gt;Depois de tantas configurações e explicações iremos, enfim, para a parte divertida do processo!&lt;/p&gt;

&lt;p&gt;Se você visitar a pasta do projeto dentro de &lt;strong&gt;src/pages/&lt;/strong&gt;, vai notar a presença de uma outra pasta chamada &lt;strong&gt;home&lt;/strong&gt;. Dentro dela há três arquivos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;home.html;&lt;/li&gt;
&lt;li&gt;home.scss;&lt;/li&gt;
&lt;li&gt;home.ts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essas pastas e arquivos foram criados como resultado do comando &lt;strong&gt;start&lt;/strong&gt;. O Ionic é baseado no Angular que, por sua vez, considera que os principais componentes de uma aplicação devem ter escopos isolados. Portanto, cada &amp;#8220;página&amp;#8221; de um projeto tem seu próprio template visual (html), estilo (scss) e classe (ts). Perceba também que, por padrão, o Ionic utiliza &lt;strong&gt;Sass&lt;/strong&gt; para a escrita de CSS e TypeScript para as classes, ao invés de JavaScript puro. Fique à vontade para vasculhar as pastas do projeto e entender como as informações são organizadas, uma vez que este tutorial não tem o propósito de explorar isso com detalhes.&lt;/p&gt;

&lt;p&gt;Antes de modificar algo no projeto, vamos verificar o que já foi gerado de graça. Digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Este comando inicia um servidor local na nossa máquina e abre uma nova aba no browser com a aplicação no ar. Como o &lt;em&gt;LiveReload&lt;/em&gt; já vem habilitado por padrão, modificações que fizermos no código serão refletidas automaticamente no browser:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-1.jpg&#34; alt=&#34;Ionic 2 - Screenshot 1 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos ver isso acontecendo em tempo real. Abra o arquivo &lt;strong&gt;home.html&lt;/strong&gt; e remova o código desnecessário até que ele fique assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar&amp;gt;
    &amp;lt;ion-title&amp;gt;My Feed Reader&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;

&amp;lt;ion-content&amp;gt;

&amp;lt;/ion-content&amp;gt;&lt;/pre&gt;

&lt;p&gt;Confira a mudança ocorrendo automaticamente no browser:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-2.jpg&#34; alt=&#34;Ionic 2 - Screenshot 2 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos dar uma olhada no componente responsável por controlar nosso template. Abra o arquivo &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController } from &#39;ionic-angular&#39;;

@Component({
   selector: &#39;page-home&#39;,
   templateUrl: &#39;home.html&#39;
})
export class HomePage {
   constructor(public navCtrl: NavController) {}
}
&lt;/pre&gt;

&lt;p&gt;Perceba que o arquivo é composto por três blocos distintos, que eu chamo carinhosamente de os &lt;strong&gt;3D&lt;/strong&gt;: &lt;strong&gt;Declaration&lt;/strong&gt;, &lt;strong&gt;Decorator&lt;/strong&gt; e &lt;strong&gt;Definition&lt;/strong&gt;. A primeira parte é onde declaramos componentes externos ou bibliotecas que iremos utilizar em nosso projeto:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController } from &#39;ionic-angular&#39;;
&lt;/pre&gt;

&lt;p&gt;O segundo bloco é composto por um &lt;strong&gt;Decorator&lt;/strong&gt;. No Angular, todo componente tem um &amp;#8220;decorador&amp;#8221;, que é responsável por fornecer metadados ou informações sobre a classe. No nosso caso, o decorador está dizendo que as modificações no html serão feitas apenas no componente &lt;strong&gt;page-home&lt;/strong&gt; e que este arquivo, ou seja, o template html que iremos utilizar, se chama &lt;strong&gt;home.html&lt;/strong&gt;, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;@Component({
   selector: &#39;page-home&#39;,
   templateUrl: &#39;home.html&#39;
})
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Lembre-se que, por padrão, os Decorators ficam sempre em cima do bloco de definição da classe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O seletor &lt;strong&gt;page-home&lt;/strong&gt; será útil quando for necessário criar regras de estilo em CSS aplicadas apenas à ele.&lt;/p&gt;

&lt;p&gt;E, por fim, temos nosso escopo de classe. Classes em qualquer linguagem de programação orientada à objeto servem para definir a estrutura e o comportamento de objetos. Por enquanto o que você precisa saber é que nossa classe tem apenas um construtor que recebe um objeto do tipo &lt;strong&gt;NavController&lt;/strong&gt; por parâmetro. Nosso próximo passo será inserir novos atributos e métodos para definir melhor o seu comportamento:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;export class HomePage {
  constructor(public navCtrl: NavController) {}
&lt;/pre&gt;

&lt;h3 id=&#34;passo-2-8211-consumindo-dados-de-uma-api-pública&#34;&gt;Passo 2 &amp;#8211; Consumindo dados de uma API pública&lt;/h3&gt;

&lt;p&gt;Agora que você já sabe mais ou menos como as coisas funcionam, vamos fazer rapidamente uma requisição à uma API externa (Reddit) para exibir seu resultado em uma lista no nosso template.&lt;/p&gt;

&lt;h4 id=&#34;2-1-8211-trabalhando-com-observables&#34;&gt;2.1 &amp;#8211; Trabalhando com Observables&lt;/h4&gt;

&lt;p&gt;Inclua o seguinte código em &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController } from &#39;ionic-angular&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;

@Component({
  selector: &#39;page-home&#39;,
  templateUrl: &#39;home.html&#39;
})
export class HomePage {

  public feeds: Array&amp;lt;string&amp;gt;;
  private url: string = &#34;https://www.reddit.com/new.json&#34;;  

  constructor(public navCtrl: NavController, public http: Http) {

    this.http.get(this.url).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
        this.feeds = data.data.children;
      }); 
  }

}
&lt;/pre&gt;

&lt;p&gt;_Caso queira entender melhor sobre os endpoints da API, dê uma olhada &lt;a href=&#34;https://www.reddit.com/dev/api/&#34; target=&#34;_blank&#34;&gt;nesse link&lt;/a&gt;._&lt;/p&gt;

&lt;p&gt;O que fizemos acima foi importar o componente &lt;strong&gt;Http&lt;/strong&gt; e injetá-lo no método construtor. Isso nos possibilita acessar sua instância através do objeto &lt;strong&gt;this&lt;/strong&gt;. Note que também estamos importando o operador &lt;strong&gt;map&lt;/strong&gt; da biblioteca &lt;strong&gt;&lt;a href=&#34;https://github.com/Reactive-Extensions/RxJS&#34; target=&#34;_blank&#34;&gt;rxjs&lt;/a&gt;&lt;/strong&gt;. O rxjs é uma das extensões que compõe a &lt;strong&gt;&lt;a href=&#34;http://reactivex.io/&#34; target=&#34;_blank&#34;&gt;reactiveX&lt;/a&gt;&lt;/strong&gt; (Reactive Extensions), uma biblioteca assíncrona que trabalha com o stream de dados no padrão &lt;strong&gt;Observable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;No objeto http estamos fazendo uma requisição do tipo &lt;strong&gt;GET&lt;/strong&gt; à um endpoint que definimos na variável &lt;strong&gt;url&lt;/strong&gt;, acima do método construtor. Note que, com o uso do TypeScript, podemos definir seu escopo (pública ou privada) e ainda definir o seu tipo (string, number, array&amp;#8230;). Ponto para o TypeScript!&lt;/p&gt;

&lt;p&gt;Em seguida, transformamos o resultado dessa requisição utilizando o operador map e o convertemos para JSON através do método &lt;strong&gt;subscribe&lt;/strong&gt; (&amp;#8220;similar&amp;#8221; ao método &lt;strong&gt;then&lt;/strong&gt; de uma Promise).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;É importante salientar que o map da biblioteca rxjs é utilizado exclusivamente para mapear um &lt;strong&gt;array do tipo Observable&lt;/strong&gt; e não é o mesmo map que utilizamos em um array comum no JavaScript. Aprenda mais sobre requisições remotas com Observables &lt;a href=&#34;https://angular.io/docs/ts/latest/guide/server-communication.html#!#rxjs&#34; target=&#34;_blank&#34;&gt;nesse link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Por fim, incluímos o resultado da requisição (agora um objeto do tipo JSON) dentro da variável pública &lt;strong&gt;feeds&lt;/strong&gt;, que aqui representa um array de strings. Seu escopo precisa ser público pois iremos acessar seu conteúdo no template.&lt;/p&gt;

&lt;h4 id=&#34;2-2-8211-exibindo-resultado-para-o-usuário&#34;&gt;2.2 &amp;#8211; Exibindo resultado para o usuário&lt;/h4&gt;

&lt;p&gt;Como você percebeu, dentro do nosso arquivo &lt;strong&gt;home.ts&lt;/strong&gt; há uma referência ao template &lt;strong&gt;home.html&lt;/strong&gt; dentro do bloco &lt;strong&gt;@Component&lt;/strong&gt;. Esse template, na verdade, é aquilo que o usuário realmente vê na tela do seu smartphone, com base no que definimos dentro da nossa classe. Por enquanto ele não está exibindo nada. Modifique o conteúdo de &lt;strong&gt;home.html&lt;/strong&gt; conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar&amp;gt;
    &amp;lt;ion-title&amp;gt;My Feed Reader&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;

&amp;lt;ion-content&amp;gt;
  &amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34;&amp;gt;
      {{feed.data.title}}
    &amp;lt;/ion-item&amp;gt;
  &amp;lt;/ion-list&amp;gt;
&amp;lt;/ion-content&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O Ionic fornece uma grande variedade de componentes visuais &lt;em&gt;out of the box&lt;/em&gt; que nos permite construir uma interface praticamente idêntica à de uma aplicação nativa. Não só isso como também é capaz de adaptar o seu estilo visual de acordo com cada plataforma (algo que veremos em breve).&lt;/p&gt;

&lt;p&gt;A tag &lt;strong&gt;&lt;ion-navbar&gt;&lt;/strong&gt; representa a barra de navegação que fica no topo da tela. Essa barra geralmente comporta o título da aplicação (como visto na tag &lt;strong&gt;&lt;ion-title&gt;&lt;/strong&gt;) mas também pode conter botões de ação e demais itens, caso necessário.&lt;/p&gt;

&lt;p&gt;Já as informações dinâmicas sempre são inseridas dentro da tag &lt;strong&gt;&lt;ion-content&gt;&lt;/strong&gt;, como acabamos de fazer ao inserir o componente &lt;strong&gt;&lt;ion-list&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Não iremos nos aprofundar nos detalhes dos templates visuais fornecidos pelo Ionic. Você pode encontrar exemplos do markup de cada componente &lt;a href=&#34;https://ionicframework.com/docs/v2/components&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;. O componente que estamos utilizando no exemplo acima é &lt;a href=&#34;https://ionicframework.com/docs/v2/components/#lists&#34; target=&#34;_blank&#34;&gt;este&lt;/a&gt;. Eu apenas copiei o markut e inseri aqui, alterando apenas aquilo que é necessário. Esta é, sem dúvida, uma das features mais importantes do framework, uma vez que ela acelera o processo de prototipação de um aplicativo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Observe o seguinte bloco de código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34;&amp;gt;
      {{feed.data.title}}
    &amp;lt;/ion-item&amp;gt;
  &amp;lt;/ion-list&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Note o loop que estamos executando com a instrução *&lt;strong&gt;ngFor&lt;/strong&gt;. Estamos acessando o conteúdo do array &lt;strong&gt;feeds&lt;/strong&gt; e iterando sobre ele com uma variável local (&lt;strong&gt;feed&lt;/strong&gt;) para popular nossa lista. Esta é uma conveniência fornecida pelo Angular conhecida como &lt;em&gt;Embedded templates&lt;/em&gt; ou diretivas html, que nos ajuda na renderização dos atributos disponíveis na classe associada. Observe agora o seguinte trecho:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{{feed.data.title}}&lt;/pre&gt;

&lt;p&gt;Ele representa o valor que será exibido em cada célula da lista, que, neste caso, representa o título do feed. Esta sintaxe entre chaves duplas é chamada de &lt;strong&gt;Interpolação&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora salve o arquivo e verifique o resultado no browser. É provável que você esteja vendo algo assim:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-3.jpg&#34; alt=&#34;Ionic 2 - Screenshot 3 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Se você entendeu tudo que foi explicado até aqui, significa que você já domina boa parte dos principais conceitos não só do Ionic 2 como também do Angular 2. Parabéns!&lt;/p&gt;

&lt;p&gt;Agora é o momento em que nos despedimos das explicações mais detalhadas e partimos para a ação. Vamos dar um tapinha no visual desse app e inserir alguns recursos extras que irão torná-lo ainda mais sexy 😉&lt;/p&gt;

&lt;h3 id=&#34;passo-3-8211-customizando-o-template&#34;&gt;Passo 3 &amp;#8211; Customizando o template&lt;/h3&gt;

&lt;p&gt;Nosso próximo passo será incluir mais informações nas células dessa lista, uma vez que apenas o título não é o suficiente para capturar a atenção do usuário.&lt;/p&gt;

&lt;h4 id=&#34;3-1-8211-adicionando-informações-extras&#34;&gt;3.1 &amp;#8211; Adicionando informações extras&lt;/h4&gt;

&lt;p&gt;Ainda em &lt;strong&gt;home.html&lt;/strong&gt;, altere o conteúdo atual de dentro da tag &lt;strong&gt;&lt;ion-content&gt;&lt;/strong&gt; para:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34;&amp;gt;
       &amp;lt;ion-thumbnail item-left&amp;gt;
          &amp;lt;img [src]=&#34;feed.data.thumbnail&#34;&amp;gt;
       &amp;lt;/ion-thumbnail&amp;gt;
       &amp;lt;h2&amp;gt;{{feed.data.title}}&amp;lt;/h2&amp;gt;
       &amp;lt;p&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
    &amp;lt;/ion-item&amp;gt;
 &amp;lt;/ion-list&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Salve o arquivo e visualize o resultado no browser:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-4.jpg&#34; alt=&#34;Ionic 2 - Screenshot 4 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora estamos utilizando um novo template de lista, que comporta imagens. O Ionic já faz o serviço de ajustar os itens pra você contanto que indiquemos isso através dos atributos e classes que o framework nos oferece. Perceba, por exemplo, o atributo &lt;strong&gt;item-left&lt;/strong&gt; presente dentro da tag &lt;strong&gt;&lt;ion-thumbnail&gt;&lt;/strong&gt;. Altere seu nome para &lt;strong&gt;item-right&lt;/strong&gt; e você verá que as imagens serão posicionadas à direita da célula. Tente também alterar a tag &lt;strong&gt;&lt;ion-thumbnail&gt;&lt;/strong&gt; para &lt;strong&gt;&lt;ion-avatar&gt;&lt;/strong&gt; e verá que as imagens ficarão menores e com bordas arredondadas. Muito conveniente!&lt;/p&gt;

&lt;p&gt;Note que o atributo &lt;strong&gt;src&lt;/strong&gt; da tag de imagem está envolto por colchetes. Essa sintaxe se chama &lt;em&gt;Property binding&lt;/em&gt; e é utilizada para atribuir uma propriedade da view ao valor de uma expressão. No entanto, a mesma sintaxe pode ser substituída por esta:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img src=&#34;{{ feed.data.thumbnail }}&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Para fins didáticos iremos deixar a expressão com colchetes neste exemplo.&lt;/p&gt;

&lt;p&gt;Perceba também que o título do feed agora aparece dentro da tag &lt;strong&gt;h2&lt;/strong&gt; e um novo item foi inserido dentro de uma tag &lt;strong&gt;p&lt;/strong&gt;. Você pode utilizar o &lt;em&gt;Chrome Developer Tools&lt;/em&gt; para inspecionar a conteúdo da listagem disponível no array inserindo a instrução &lt;code&gt;console.log(this.feed);&lt;/code&gt; ao fim da requisição, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.http.get(this.url).map(res =&amp;gt; res.json())
    .subscribe(data =&amp;gt; {
      this.feeds = data.data.children;
     // Exibindo conteúdo do array no console do browser
      console.log(this.feeds);
    }); 
&lt;/pre&gt;

&lt;h3 id=&#34;passo-4-8211-fornecendo-feedback-ao-cliente-e-capturando-eventos&#34;&gt;Passo 4 &amp;#8211; Fornecendo feedback ao cliente e capturando eventos&lt;/h3&gt;

&lt;p&gt;Embora nossa aplicação consiga requisitar dados externos com sucesso, não há nada que informe ao usuário sobre o status dessa ação. Ele pode aguardar poucos segundos como também pode esperar uma eternidade até que alguma coisa apareça na tela do celular, dependendo do tipo de conexão que esteja enfrentando.&lt;/p&gt;

&lt;h4 id=&#34;4-1-8211-adicionando-um-loading&#34;&gt;4.1 &amp;#8211; Adicionando um Loading&lt;/h4&gt;

&lt;p&gt;Insira o seguinte conteúdo no arquivo &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController, LoadingController } from &#39;ionic-angular&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;

@Component({
  selector: &#39;page-home&#39;,
  templateUrl: &#39;home.html&#39;
})
export class HomePage {

  public feeds: Array&amp;lt;string&amp;gt;;
  private url: string = &#34;https://www.reddit.com/new.json&#34;;  

  constructor(public navCtrl: NavController, public http: Http, public loadingCtrl: LoadingController) {

    this.fetchContent();

  }

  fetchContent ():void {
    let loading = this.loadingCtrl.create({
      content: &#39;Fetching content...&#39;
    });

    loading.present();

    this.http.get(this.url).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
        this.feeds = data.data.children;
        loading.dismiss();
      });  
  }
&lt;/pre&gt;

&lt;p&gt;Salve o arquivo e verifique imediatamente o resultado no browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-5.jpg&#34; alt=&#34;Ionic 2 - Screenshot 5 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O Loading é um ótimo componente para fornecer feedback visual para o usuário, indicando que alguma atividade está sendo executada em background. Nada mais é que uma caixa de diálogo que bloqueia qualquer atividade do usuário até que determinada ação seja concluída. A nossa caixa de diálogo inclui um spinner e um texto indicativo por padrão, mas todas essas opções podem ser customizadas para atender melhor a necessidade do seu app.&lt;/p&gt;

&lt;p&gt;Incluir um Loading é extremamente simples: Primeiro nós importamos o componente &lt;strong&gt;LoadingController&lt;/strong&gt; da biblioteca &lt;strong&gt;ionic-angular&lt;/strong&gt; e injetamos o objeto no método construtor. Em seguida, inicializamos o Loading com uma mensagem de feedback e depois apresentamos ele através do método &lt;strong&gt;present&lt;/strong&gt;. Depois nós retiramos o componente da tela caso tenhamos sucesso na requisição através do método &lt;strong&gt;dismiss&lt;/strong&gt;. Simples!&lt;/p&gt;

&lt;p&gt;Perceba também que, como boa prática, movemos a requisição da API para um método chamado &lt;strong&gt;fetchContent&lt;/strong&gt; que é então chamado imediatamente no construtor. Outra novidade é a inclusão do tipo de retorno do método, tipado como &lt;strong&gt;void&lt;/strong&gt;. Se você vem de linguagens como Java, sabe que esta é uma maneira de dizer que o método não retorna nada, apenas executa uma ação.&lt;/p&gt;

&lt;h4 id=&#34;4-2-8211-eventos-html&#34;&gt;4.2 &amp;#8211; Eventos html&lt;/h4&gt;

&lt;p&gt;Antes de passarmos para a próxima etapa, vamos incluir um evento nas células. Faça a seguinte modificação em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34; (click)=&#34;itemSelected(feed)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Queremos executar alguma ação sempre que o usuário clicar/tocar em uma das células. Conseguimos isso fazendo o &lt;em&gt;binding&lt;/em&gt; do método &lt;strong&gt;itemSelected&lt;/strong&gt; no evento html &lt;strong&gt;click&lt;/strong&gt; e passando o feed como argumento. Essa sintaxe de incluir eventos html dentro de parênteses é chamado de &lt;em&gt;Event Binding&lt;/em&gt; no Angular.&lt;/p&gt;

&lt;p&gt;Agora basta incluir o método dentro da classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;itemSelected (feed):void {
    alert(feed.data.url);
  } 
&lt;/pre&gt;

&lt;p&gt;Salve o arquivo e clique em cima de alguma célula. A url do post será exibida em um alert!&lt;/p&gt;

&lt;h3 id=&#34;passo-5-8211-exibindo-o-conteúdo-de-uma-url-no-browser&#34;&gt;Passo 5 &amp;#8211; Exibindo o conteúdo de uma url no browser&lt;/h3&gt;

&lt;p&gt;Agora que você já entendeu como capturar uma ação do usuário, vamos prosseguir com as funcionalidades do nosso app e fazer com que o post seja exibido no browser.&lt;/p&gt;

&lt;h4 id=&#34;5-1-8211-instalando-plugin-inappbrowser&#34;&gt;5.1 &amp;#8211; Instalando plugin InAppBrowser&lt;/h4&gt;

&lt;p&gt;Em uma nova aba do terminal, entre na pasta do projeto e digite o seguinte:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic plugin add cordova-plugin-inappbrowser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Este plugin nos possibilita abrir sites externos em um browser diretamente do app. Mas só será possível testar essa funcionalidade se você fizer o build para testar no emulador ou no seu próprio dispositivo. Para isso, digite a seguinte instrução no terminal caso você possua um iPhone:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic platform add ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ou, caso tenha um dispositivo Android:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic platform add android&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Agora altere o parâmetro do método no arquivo &lt;strong&gt;home.html&lt;/strong&gt; para enviar apenas a url como argumento:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34; (click)=&#34;itemSelected(feed.data.url)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;E agora basta fazer as seguintes alterações em &lt;strong&gt;home.ts&lt;/strong&gt;. Primeiro, importar a classe do plugin:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { InAppBrowser } from &#39;ionic-native&#39;;
&lt;/pre&gt;

&lt;p&gt;Em seguida, faça a seguinte alteração no método:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;itemSelected (url: string):void {
   let browser = new InAppBrowser(url, &#39;_system&#39;);
 }
&lt;/pre&gt;

&lt;p&gt;Pronto! Agora só resta testar se a funcionalidade está sendo executada conforme desejado.&lt;/p&gt;

&lt;h4 id=&#34;5-2-8211-executando-testes-nas-plataformas&#34;&gt;5.2 &amp;#8211; Executando testes nas plataformas&lt;/h4&gt;

&lt;p&gt;Para instalar o emulador do iOS e preparar o ambiente para testes no seu próprio iPhone, basta digitar no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm -g install ios-sim ios-deploy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora digite a instrução abaixo e, caso tudo tenha dado certo, é provável que você veja o aplicativo abrindo no seu emulador:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic run ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Caso esteja com o celular conectado ao computador através da porta USB, o deploy será automaticamente executado no seu iPhone. Se mesmo assim você encontrar dificuldades, tente digitar:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic run ios --device&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para testar no Android, apenas digite:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic run android&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Maiores detalhes sobre deploy e testes em ambas plataformas você encontra &lt;a href=&#34;https://ionicframework.com/docs/v2/resources/developer-tips/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Caso você tenha conseguido testar com sucesso, deve ter percebido que, ao clicar em uma das células, há um certo delay entre o momento do clique e o carregamento da página. Para corrigir isso, apenas insira o conteúdo da célula dentro de um &lt;strong&gt;botão&lt;/strong&gt; (button) com o atributo &lt;strong&gt;ion-item&lt;/strong&gt;, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;button ion-item *ngFor=&#34;let feed of feeds&#34; (click)=&#34;itemSelected(feed.data.url)&#34;&amp;gt;
    &amp;lt;ion-thumbnail item-left&amp;gt;
       &amp;lt;img [src]=&#34;feed.data.thumbnail&#34;&amp;gt;
    &amp;lt;/ion-thumbnail&amp;gt;
    &amp;lt;h2&amp;gt;{{feed.data.title}}&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
 &amp;lt;/button&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Agora o delay não só é removido como é adicionado um overlay em tom mais escuro na célula quando a mesma é pressionada.&lt;/p&gt;

&lt;p&gt;Tem mais uma coisa que está incomodando: Perceba que os posts sem imagens estão quebrando nosso layout e deixando a nossa lista com aspecto pouco profissional. Vamos mudar isso incluindo o seguinte trecho de código dentro do método &lt;strong&gt;subscribe&lt;/strong&gt; de &lt;strong&gt;fecthContent&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.feeds.forEach((e, i, a) =&amp;gt; {
   if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) { 
      e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
   }
 })
&lt;/pre&gt;

&lt;p&gt;Utilizamos o método &lt;strong&gt;forEach&lt;/strong&gt; do JavaScript para iterar pelo array de feeds e verificar quais itens estão sem imagem. Em seguida, para estes itens, incluímos uma imagem padrão do próprio reddit, que está disponível em um link público e irá servir de placeholder.&lt;/p&gt;

&lt;p&gt;Veja o resultado de todas estas modificações rodando em um device iOS:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step5.gif&#34; alt=&#34;Ionic 2 - InAppBrowser&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-6-8211-adicionando-scroll-infinito-na-célula&#34;&gt;Passo 6 &amp;#8211; Adicionando scroll infinito na célula&lt;/h3&gt;

&lt;p&gt;Nosso app está ficando bem legal mas ainda necessita de algumas modificações para ficar realmente atrativo. Uma delas é viabilizar alguma maneira de acessar os posts mais antigos, já que nosso app tem uma restrição de apenas 25 itens por request. Isto é muito ruim, pois o usuário fica limitado à visitar apenas estes itens.&lt;/p&gt;

&lt;p&gt;Se você explorar a API do reddit vai perceber que ela nos fornece vários parâmetros do tipo GET para controlar filtros e paginações. Um deles é chamado &lt;em&gt;after&lt;/em&gt;, que utiliza o o atributo &lt;em&gt;fullName&lt;/em&gt; (junção do tipo do post mais o seu ID) como identificador único e funciona como âncora para os demais posts.&lt;/p&gt;

&lt;p&gt;Em outras palavras, uma requisição como esta:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://www.reddit.com/new.json?after=t3_57ct5z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pode ser lida como: &amp;#8220;_Busque os novos posts que vem depois do post de nome t3&lt;em&gt;57ct5z&lt;/em&gt;&amp;#8221;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fique atento com a forma como você lê a instrução pois há uma pegadinha: &lt;strong&gt;Depois&lt;/strong&gt; aqui se refere ao array de posts, ou seja, os posts mais velhos e não os mais recentes. Veremos como buscar os mais recentes na próxima etapa do app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Agora que você já entendeu a mecânica, vamos começar inserindo o componente responsável por acionar o scroll infinito na nossa página. Insira a seguinte instrução em &lt;strong&gt;home.html&lt;/strong&gt; imediatamente após o fim da tag &lt;strong&gt;&lt;ion-list&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;ion-infinite-scroll (ionInfinite)=&#34;doInfinite($event)&#34;&amp;gt;
    &amp;lt;ion-infinite-scroll-content
       loadingText=&#34;Loading more data...&#34;&amp;gt;
    &amp;lt;/ion-infinite-scroll-content&amp;gt;
 &amp;lt;/ion-infinite-scroll&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;E criamos o método correspondente em nossa classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;doInfinite(infiniteScroll) {

    let paramsUrl = (this.feeds.length &amp;gt; 0) ? this.feeds[this.feeds.length - 1].data.name : &#34;&#34;;

      this.http.get(this.olderPosts + paramsUrl).map(res =&amp;gt; res.json())
        .subscribe(data =&amp;gt; {
        
          this.feeds = this.feeds.concat(data.data.children);
          
          this.feeds.forEach((e, i, a) =&amp;gt; {
            if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
              e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
            }
          })
          infiniteScroll.complete();
        }); 
  }  
&lt;/pre&gt;

&lt;p&gt;Por fim, inserimos a url da requisição:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;private olderPosts: string = &#34;https://www.reddit.com/new.json?after=&#34;;
&lt;/pre&gt;

&lt;p&gt;O novo método é bem parecido com o &lt;strong&gt;fetchContent&lt;/strong&gt;, com a diferença de que criamos uma variável local que guarda o valor do atributo &lt;strong&gt;nome&lt;/strong&gt; do último item do array de feeds e insere este valor no fim da url. Em seguida, pegamos o array resultante da requisição e adicionamos no fim do array original através do método &lt;strong&gt;concat&lt;/strong&gt; do JavaScript. Note também que utilizamos o método &lt;strong&gt;complete&lt;/strong&gt; do componente, indicando que o mesmo deve ser removido da view.&lt;/p&gt;

&lt;p&gt;O resultado você confere abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step6.gif&#34; alt=&#34;Ionic 2 - Infinite Scroll&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E, com isto, incluímos uma funcionalidade extremamente importante em aplicações móveis: A habilidade de adicionar itens em uma lista por demanda, algo que enriquece em muito a experiência do usuário. Se você estava esperando instruções muito complexas, sinto lhe desapontar!&lt;/p&gt;

&lt;h3 id=&#34;passo-7-8211-atualizando-a-lista-com-pull-to-refresh&#34;&gt;Passo 7 &amp;#8211; Atualizando a lista com pull-to-refresh&lt;/h3&gt;

&lt;p&gt;Da mesma forma que adicionamos uma funcionalidade para carregar posts mais antigos sempre que chegarmos ao fim da nossa lista, precisamos agora viabilizar uma maneira de atualiza-la com os posts mais recentes. Uma excelente maneira de fazer isso é incluindo o componente &lt;strong&gt;Refresher&lt;/strong&gt; na nossa aplicação.&lt;/p&gt;

&lt;p&gt;O Refresher é um componente que adiciona o recurso de &lt;strong&gt;pull-to-refresh&lt;/strong&gt; à nossa lista. O pull-to-refresh consiste em manter o dedo pressionado no topo de uma lista e arrastá-la até uma determinada posição até que um evento seja disparado. No nosso caso, utilizaremos esse evento para inserir os posts mais recentes no início do array, ao contrário do que fizemos com o componente InfiniteScroll.&lt;/p&gt;

&lt;p&gt;Sem mais delongas, vamos começar inserindo o markup do componente antes da tag &lt;strong&gt;&lt;ion-list&gt;&lt;/strong&gt; no arquivo &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;ion-refresher (ionRefresh)=&#34;doRefresh($event)&#34;&amp;gt;
    &amp;lt;ion-refresher-content
       pullingIcon=&#34;arrow-dropdown&#34;
       pullingText=&#34;Pull to refresh&#34;
       refreshingSpinner=&#34;circles&#34;
       refreshingText=&#34;Refreshing...&#34;&amp;gt;
    &amp;lt;/ion-refresher-content&amp;gt;
 &amp;lt;/ion-refresher&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;Diferentemente do InfiniteScroll, desta vez eu incluí alguns parâmetros adicionais, como os textos de início e fim do evento, o formato padrão do spinner, o ícone da seta, etc.&lt;/p&gt;

&lt;p&gt;A url da requisição também precisa ser diferente, uma vez que iremos buscar os itens mais novos. Utilizaremos então o parâmetro &lt;em&gt;before&lt;/em&gt; oferecido pelo Reddit, fazendo com que a nossa nova url fique assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;private newerPosts: string = &#34;https://www.reddit.com/new.json?before=&#34;;
&lt;/pre&gt;

&lt;p&gt;Por fim, inserimos o método na classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;doRefresh(refresher) {

    let paramsUrl = this.feeds[0].data.name;

    this.http.get(this.newerPosts + paramsUrl).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
      
        this.feeds = data.data.children.concat(this.feeds);
        
        this.feeds.forEach((e, i, a) =&amp;gt; {
          if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
            e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
          }
        })
        refresher.complete();
      });
  } 

&lt;/pre&gt;

&lt;p&gt;Perceba como o método é similar àquele que escrevemos para o scroll infinito. A única diferença está na variável de parâmetro (que agora guarda o nome do primeiro item da lista como referência) e a maneira como concatenamos o array de feeds, inserindo os novos dados no início da lista e não no fim. Observe também a instrução &lt;strong&gt;refresher.complete&lt;/strong&gt;, que informa que operação foi concluída e que o componente pode ser removido da view.&lt;/p&gt;

&lt;p&gt;Nossa aplicação agora utiliza o refresher para atualizar a lista com os novos posts, veja:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step7.gif&#34; alt=&#34;Ionic 2 - Refresher&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-8-8211-filtrando-a-lista-com-uma-action-sheet&#34;&gt;Passo 8 &amp;#8211; Filtrando a lista com uma Action Sheet&lt;/h3&gt;

&lt;p&gt;Agora que a nossa lista tem potencial para aumentar cada vez mais de tamanho, seria interessante termos uma opção de filtrar posts pertencentes à determinadas categorias. Podemos fazer isso facilmente com uma &lt;strong&gt;Action Sheet&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;No arquivo &lt;strong&gt;home.html&lt;/strong&gt; vamos incluir um botão do lado direito da nossa AppBar/NavBar que será responsável por disparar o método:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-header&amp;gt;
   &amp;lt;ion-navbar&amp;gt;
       &amp;lt;ion-title&amp;gt;My Feed Reader&amp;lt;/ion-title&amp;gt;
       &amp;lt;ion-buttons end&amp;gt;
          &amp;lt;button ion-button icon-only (click)=&#34;showFilters()&#34;&amp;gt;
              &amp;lt;ion-icon name=&#34;funnel&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;
          &amp;lt;/button&amp;gt;
       &amp;lt;/ion-buttons&amp;gt; 
   &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Observe o atributo &lt;strong&gt;end&lt;/strong&gt; na tag &lt;strong&gt;&lt;ion-buttons&gt;&lt;/strong&gt;, indicando que o botão deve ser posicionado à direita, ou seja, no fim da barra de navegação. O atributo &lt;strong&gt;start&lt;/strong&gt; posicionaria o botão à esquerda. O &lt;strong&gt;&lt;ion-buttons&gt;&lt;/strong&gt; funciona como um container de botões. No nosso caso, só precisamos de um que será representado por um ícone (por isso o atributo &lt;strong&gt;icon-only&lt;/strong&gt;). Fizemos o binding do método &lt;strong&gt;showFilters&lt;/strong&gt; no evento &lt;strong&gt;click&lt;/strong&gt; e escolhemos o ícone de nome &lt;strong&gt;funnel&lt;/strong&gt; para representar o filtro.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Os ícones no Ionic são uma implementação própria do que chamamos de &lt;strong&gt;icon fonts&lt;/strong&gt;, ou seja, fontes que contém símbolos ao invés de texto ou números e que podem ser estilizados utilizando CSS. Utilizar esse tipo de fonte é conveniente pois reduz a necessidade de imagens, o que torna nosso aplicativo ligeiramente mais rápido e menos pesado. Para ter acesso à lista de ícones do Ionic 2, dê uma olhada &lt;a href=&#34;https://ionicframework.com/docs/v2/ionicons/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Antes de incluir nosso método, precisamos de mais duas variáveis. Uma que será responsável por guardar a versão íntegra do nosso array de feeds (sem nenhum filtro) e uma outra que será um booleano, com a função de indicar se há ou não um filtro ativo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;public noFilter: Array&amp;lt;any&amp;gt;;
 public hasFilter: boolean = false;
&lt;/pre&gt;

&lt;p&gt;Com isso podemos incluir as seguintes instruções no final do método &lt;strong&gt;subscribe&lt;/strong&gt; das funções &lt;strong&gt;doRefresh&lt;/strong&gt; e &lt;strong&gt;doInfinite&lt;/strong&gt;, com a finalidade de remover qualquer filtro ativo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.noFilter = this.feeds;
 this.hasFilter = false;
&lt;/pre&gt;

&lt;p&gt;Por fim, vamos agora incluir o método &lt;strong&gt;showFilters&lt;/strong&gt; na classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;showFilters() :void {

    let actionSheet = this.actionSheetCtrl.create({
      title: &#39;Filter options:&#39;,
      buttons: [
        {
          text: &#39;Music&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;music&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Movies&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;movies&#34;);
            this.hasFilter = true;
          }
        },        
        {
          text: &#39;Cancel&#39;,
          role: &#39;cancel&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter;
            this.hasFilter = false;
          }
        }
      ]
    });

    actionSheet.present();

  }  
&lt;/pre&gt;

&lt;p&gt;Primeiramente inicializamos o componente com a função &lt;strong&gt;create&lt;/strong&gt; em uma variável local. Este componente recebe um título e um array de botões onde cada botão tem, obrigatoriamente, um texto indicativo e um handler que dispara o evento correspondente. Estes botões representam as opções que serão apresentadas para o usuário na tela. O código do filtro é autoexplicativo.&lt;/p&gt;

&lt;p&gt;O último botão tem a função de cancelar a operação e remover qualquer filtro que esteja ativo. Perceba que este botão tem uma propriedade &lt;strong&gt;role&lt;/strong&gt; com o valor de &lt;strong&gt;cancel&lt;/strong&gt;, indicando que adota o comportamento padrão da plataforma e sempre estará posicionado como última opção da lista. Vale ressaltar que se o usuário clicar fora da Action Sheet, ou seja, no overlay da camada de fundo, a ação será interpretada como um cancelamento (o mesmo comportamento do botão com a role &amp;#8220;cancel&amp;#8221;).&lt;/p&gt;

&lt;p&gt;Em seguida adicionamos o método &lt;strong&gt;actionSheet.present&lt;/strong&gt; para que o componente seja apresentado na tela.&lt;/p&gt;

&lt;p&gt;Por enquanto só estamos filtrando os subreddits com as categorias música ou filmes, mas nada nos impede de inserir mais opções de filtro no componente. O código final da nossa classe fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController, LoadingController, ActionSheetController } from &#39;ionic-angular&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;
import { InAppBrowser } from &#39;ionic-native&#39;;

@Component({
  selector: &#39;page-home&#39;,
  templateUrl: &#39;home.html&#39;
})
export class HomePage {

  public feeds: Array&amp;lt;any&amp;gt;;
  private url: string = &#34;https://www.reddit.com/new.json&#34;;
  private newerPosts: string = &#34;https://www.reddit.com/new.json?before=&#34;;  
  private olderPosts: string = &#34;https://www.reddit.com/new.json?after=&#34;;

  public hasFilter: boolean = false;
  public noFilter: Array&amp;lt;any&amp;gt;;

  constructor(public navCtrl: NavController, public http: Http, 
       public loadingCtrl: LoadingController, public actionSheetCtrl: ActionSheetController) {

    this.fetchContent();

  }

  fetchContent ():void {
    let loading = this.loadingCtrl.create({
      content: &#39;Fetching content...&#39;
    });

    loading.present();

    this.http.get(this.url).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
        this.feeds = data.data.children;

        this.feeds.forEach((e, i, a) =&amp;gt; {
          if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
            e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
          }
        })

        this.noFilter = this.feeds;  

        loading.dismiss();
      });  
  }

  doRefresh(refresher) {

    let paramsUrl = this.feeds[0].data.name;

    this.http.get(this.newerPosts + paramsUrl).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
      
        this.feeds = data.data.children.concat(this.feeds);
        
        this.feeds.forEach((e, i, a) =&amp;gt; {
          if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
            e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
          }
        })

        this.noFilter = this.feeds;
        this.hasFilter = false;

        refresher.complete();
      });
  }  

  doInfinite(infiniteScroll) {

    let paramsUrl = (this.feeds.length &amp;gt; 0) ? this.feeds[this.feeds.length - 1].data.name : &#34;&#34;;

      this.http.get(this.olderPosts + paramsUrl).map(res =&amp;gt; res.json())
        .subscribe(data =&amp;gt; {
        
          this.feeds = this.feeds.concat(data.data.children);
          
          this.feeds.forEach((e, i, a) =&amp;gt; {
            if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
              e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
            }
          })

          this.noFilter = this.feeds;
          this.hasFilter = false;          
          
          infiniteScroll.complete();
        }); 
  }   

  itemSelected (url: string):void {
    let browser = new InAppBrowser(url, &#39;_system&#39;);
  } 
  
  showFilters() :void {

    let actionSheet = this.actionSheetCtrl.create({
      title: &#39;Filter options:&#39;,
      buttons: [
        {
          text: &#39;Music&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;music&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Movies&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;movies&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Games&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;gaming&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Pictures&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;pics&#34;);
            this.hasFilter = true;
          }
        },                
        {
          text: &#39;Ask Reddit&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;askreddit&#34;);
            this.hasFilter = true;
          }
        },        
        {
          text: &#39;Cancel&#39;,
          role: &#39;cancel&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter;
            this.hasFilter = false;
          }
        }
      ]
    });

    actionSheet.present();

  }        

}

&lt;/pre&gt;

&lt;p&gt;Por questões de bom senso, seria interessante indicar ao usuário quando um filtro está ou não ativo alterando a cor do ícone do funil. Podemos fazer isso utilizando o conceito de &lt;em&gt;Property binding&lt;/em&gt; explicado mais acima, com a diferença de que agora a propriedade será atribuída baseada em uma condição.&lt;/p&gt;

&lt;p&gt;insira o seguinte código na tag &lt;strong&gt;&lt;ion-icon&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-icon name=&#34;funnel&#34; [style.color]=&#34;hasFilter ? &#39;orange&#39; : &#39;inherit&#39;&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O resultado pode ser visto abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step8.gif&#34; alt=&#34;Ionic 2 - Action Sheet&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-9-8211-adicionando-um-provider-e-uma-barra-de-busca&#34;&gt;Passo 9 &amp;#8211; Adicionando um provider e uma barra de busca&lt;/h3&gt;

&lt;p&gt;Apesar de termos avançado com sucesso até aqui, tenho certeza de que a quantidade de código repetitivo presente em nossa classe deve ter te causado um certo incômodo. Podemos muito bem mover a responsabilidade de conexão com a API para um outro serviço externo, no intuito de evitar o &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt; e a propagação de &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_smell&#34; target=&#34;_blank&#34;&gt;code smell&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;9-1-8211-criando-um-injectable&#34;&gt;9.1 &amp;#8211; Criando um Injectable&lt;/h4&gt;

&lt;p&gt;O Angular nos permite criar uma classe com a anotação &lt;strong&gt;@Injectable&lt;/strong&gt; para estes cenários. Esse tipo de classe também são conhecidos como &lt;strong&gt;Providers&lt;/strong&gt; e podem tanto ser criados &amp;#8220;na mão&amp;#8221; quanto com a ajuda do CLI. Digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic g provider RedditService&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Esse código cria uma pasta &lt;strong&gt;providers&lt;/strong&gt; no nosso projeto com um arquivo de nome &lt;strong&gt;reddit-service.ts&lt;/strong&gt;, onde o Ionic insere alguns códigos de boilerplate para facilitar nossa vida. Altere seu conteúdo conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Injectable } from &#39;@angular/core&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;

@Injectable()
export class RedditService {

  private feeds: Array&amp;lt;any&amp;gt;;

  constructor(private http: Http) {}

  fetchData(url: string): Promise&amp;lt;any&amp;gt; {
    
    return new Promise(resolve =&amp;gt; {

      this.http.get(url).map(res =&amp;gt; res.json())
        .subscribe(data =&amp;gt; {
          this.feeds = data.data.children;
          
          this.feeds.forEach((e, i, a) =&amp;gt; {
            if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
              e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
            }
          })
          resolve(this.feeds);
        }, err =&amp;gt; console.log(err));          
    });
  }
}
&lt;/pre&gt;

&lt;p&gt;Replicamos boa parte do código presente no método &lt;strong&gt;fetchContent&lt;/strong&gt; da classe &lt;strong&gt;home.ts&lt;/strong&gt; aqui no nosso método &lt;strong&gt;fetchData&lt;/strong&gt;, com algumas diferenças. A primeira delas é a já citada anotação &lt;strong&gt;@Injectable()&lt;/strong&gt; presente antes do nome da classe, o que nos permite mover a definição do serviço para o construtor de &lt;strong&gt;home.ts&lt;/strong&gt; dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;constructor(public redditService: RedditService) {}
&lt;/pre&gt;

&lt;p&gt;Isso evita que tenhamos de instanciar o serviço utilizando &lt;strong&gt;new&lt;/strong&gt;. Clique &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; para saber mais sobre &lt;strong&gt;Injeção de Dependência&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Outra mudança importante é que, por conveniência, a assinatura do método retorna uma &lt;strong&gt;Promise&lt;/strong&gt; do tipo &lt;strong&gt;any&lt;/strong&gt; (para evitar que tenhamos qualquer erro em tempo de compilação) ao invés de um &lt;strong&gt;Observable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por fim, para utilizar este serviço em nossa classe &lt;strong&gt;home.ts&lt;/strong&gt; precisamos incluí-lo no arquivo &lt;strong&gt;app.module.ts&lt;/strong&gt;, dentro da pasta &lt;strong&gt;src/app&lt;/strong&gt;. Este arquivo faz uso da anotação &lt;strong&gt;@NgModule&lt;/strong&gt;, onde todas as dependências da aplicação devem ser declaradas previamente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { NgModule } from &#39;@angular/core&#39;;
import { IonicApp, IonicModule } from &#39;ionic-angular&#39;;
import { MyApp } from &#39;./app.component&#39;;
import { HomePage } from &#39;../pages/home/home&#39;;
//indicamos o source path do arquivo:
import { RedditService } from &#39;../providers/reddit-service&#39;;

@NgModule({
  declarations: [
    MyApp,
    HomePage
  ],
  imports: [
    IonicModule.forRoot(MyApp)
  ],
  bootstrap: [IonicApp],
  entryComponents: [
    MyApp,
    HomePage
  ],
//declaramos o nome do nosso provider:
  providers: [RedditService]
})
export class AppModule {}
&lt;/pre&gt;

&lt;p&gt;Com isso é possível escrever os métodos da nossa classe &lt;strong&gt;home.ts&lt;/strong&gt; da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.redditService.fetchData(this.url).then(data =&amp;gt; {
     this.feeds = data;
     this.noFilter = this.feeds;
     loading.dismiss();
 })
&lt;/pre&gt;

&lt;p&gt;Repare que além de muito mais simples, agora utilizamos o método &lt;strong&gt;then&lt;/strong&gt; ao invés do &lt;strong&gt;subscribe&lt;/strong&gt; para recuperar os dados do serviço e preencher nosso array.&lt;/p&gt;

&lt;h4 id=&#34;9-2-8211-adicionando-uma-searchbar&#34;&gt;9.2 &amp;#8211; Adicionando uma SearchBar&lt;/h4&gt;

&lt;p&gt;Para aplicativos que utilizam listas e exibem conteúdo sob demanda é uma boa prática adicionar algum recurso de busca para que o usuário procure informações com base em uma palavra específica ou sequência de caracteres. Para tal, o Ionic fornece um componente chamado &lt;strong&gt;SearchBar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para evitar conflitos com as ações da nossa lista, escolhi inserir o componente diretamente na AppBar/NavBar da aplicação. Para tal, insira o seguinte bloco de código dentro da tag &lt;strong&gt;&lt;ion-title&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;ion-searchbar 
    [(ngModel)]=&#34;searchTerm&#34;
    (ionInput)=&#34;filterItems()&#34; 
    placeholder=&#34;Type here...&#34; &amp;gt;
 &amp;lt;/ion-searchbar&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Perceba que a junção das sintaxes de &lt;em&gt;Event binding&lt;/em&gt; e &lt;em&gt;Input binding&lt;/em&gt; do &lt;strong&gt;ngModel&lt;/strong&gt; nos permite replicar o tão famoso recurso de &lt;em&gt;Two-way data binding&lt;/em&gt; no Angular 2.&lt;/p&gt;

&lt;p&gt;Agora inclua o seguinte método em &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;filterItems() {
    this.hasFilter = false;
    this.feeds = this.noFilter.filter((item) =&amp;gt; {
        return item.data.title.toLowerCase().indexOf(this.searchTerm.toLowerCase()) &amp;gt; -1;
    });
  }
&lt;/pre&gt;

&lt;p&gt;Veja o resultado rodando em um iPhone:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step9.gif&#34; alt=&#34;Ionic 2 - SearchBar&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Antes de concluir eu gostaria de mostrar um recurso fornecido pelo framework que nos permite testar o comportamento e visual da nossa aplicação em diferentes plataformas chamado &lt;strong&gt;Ionic Lab&lt;/strong&gt;. Caso ainda esteja com o servidor ativo, basta inserir &lt;strong&gt;/ionic-lab&lt;/strong&gt; após o número da porta na url ou digitar &lt;code&gt;ionic serve --lab&lt;/code&gt; no terminal. O resultado é o seguinte:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-ionic-lab.jpg&#34; alt=&#34;Ionic 2 - Ionic Lab&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Na imagem acima você consegue visualizar o nosso aplicativo no &lt;strong&gt;iOS&lt;/strong&gt;, &lt;strong&gt;Android&lt;/strong&gt; e &lt;strong&gt;Windows Phone&lt;/strong&gt;! O Ionic não apenas executa o build da aplicação com uma única base de código para dispositivos diferentes como também se adapta ao comportamento e estilo visual de cada um, numa tentativa de fazer com que o usuário sempre tenha uma experiência condizente com a plataforma que utiliza. Perceba, por exemplo, como o spinner, a barra de busca, os ícones e estilo da lista são diferentes entre as plataformas. No caso do iOS, são incluídos até mesmo as setas na lateral direita da célula, o que é comum na plataforma. Além de tudo isso, poder testar aplicativos dessa maneira e ainda tirar proveito do recurso de &lt;em&gt;LiveReload&lt;/em&gt; enquanto você está programando é algo realmente especial.&lt;/p&gt;

&lt;p&gt;Estamos chegando ao fim da criação do nosso aplicativo. Vimos que, apenas com pequenos ajustes, foi possível obter um código mais modular e ainda incluir o componente &lt;strong&gt;SearchBar&lt;/strong&gt; com o estilo visual adequado para cada plataforma. Tudo isso de maneira simples e rápida, graças ao casamento perfeito entre o &lt;strong&gt;Angular&lt;/strong&gt; e os componentes estilizados fornecido pelo &lt;strong&gt;Ionic&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;passo-10-8211-melhorando-a-experiência-do-usuário&#34;&gt;Passo 10 &amp;#8211; Melhorando a experiência do usuário&lt;/h3&gt;

&lt;p&gt;Mesmo com todos os recursos que o Ionic 2 nos oferece é sempre importante garantir a melhor experiência possível para o usuário fazendo otimizações gerais, como customização de UI, ajustes no comportamento de componentes, ganho de performance, etc. Essa última etapa será dedicada à este propósito.&lt;/p&gt;

&lt;h4 id=&#34;10-1-8211-controlando-o-scroll&#34;&gt;10.1 &amp;#8211; Controlando o scroll&lt;/h4&gt;

&lt;p&gt;Notei alguns problemas ao utilizar a Action Sheet para filtrar a lista quando o scroll está numa posição muito abaixo, pois a ação de carregar posts antigos pode ser disparada indevidamente. Podemos evitar isso fazendo a lista rolar para o topo antes de executar qualquer filtro. Mas como controlar isso programaticamente?&lt;/p&gt;

&lt;p&gt;O componente &lt;strong&gt;Content&lt;/strong&gt; (que gere a tag &lt;strong&gt;&lt;ion-content&gt;&lt;/strong&gt; do nosso template html) disponibiliza um método de controle do scroll chamado &lt;strong&gt;scrollToTop&lt;/strong&gt;. Podemos inserir o código no início do método &lt;strong&gt;showFilters&lt;/strong&gt; da Action Sheet dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.content.scrollToTop();
&lt;/pre&gt;

&lt;p&gt;Antes precisamos obter uma referência à este componente utilizando a anotação &lt;strong&gt;@ViewChild&lt;/strong&gt; da biblioteca &lt;strong&gt;@angular/core&lt;/strong&gt; (algo similar à maneira como protocolos funcionam no iOS):&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;@ViewChild(Content) content: Content;
&lt;/pre&gt;

&lt;p&gt;Agora a lista vai rolar para o topo sempre que acionarmos a Action Sheet!&lt;/p&gt;

&lt;h4 id=&#34;10-2-8211-melhorando-a-busca-com-observables&#34;&gt;10.2 &amp;#8211; Melhorando a busca com Observables&lt;/h4&gt;

&lt;p&gt;Apesar de termos nossa barra de buscas funcionando perfeitamente, a cada caractere digitado estamos emitindo uma nova requisição, o que é desnecessário. Mas há uma forma elegante de lidar com isso utilizando Observables, uma vez que o evento só será disparado quando uma requisição for considerada válida.&lt;/p&gt;

&lt;p&gt;O que queremos fazer é monitorar o componente de duas maneiras: A primeira é oferecendo um tempo maior para que o usuário conclua a digitação da palavra que está buscando através do método &lt;strong&gt;debounceTime&lt;/strong&gt; e a segunda é utilizando o método &lt;strong&gt;distinctUntilChanged&lt;/strong&gt; que irá comparar a palavra (ou a sequência de caracteres) digitada com a última que foi procurada, evitando que uma nova requisição seja emitida para um resultado que já se encontra na tela.&lt;/p&gt;

&lt;p&gt;Iremos utilizar o &lt;strong&gt;FormControl&lt;/strong&gt; de &lt;strong&gt;@angular/forms&lt;/strong&gt; que irá conectar uma variável da classe ao input presente no nosso html (similar à maneira como o &lt;em&gt;Two way binding&lt;/em&gt; funciona).&lt;/p&gt;

&lt;p&gt;Inclua as seguintes instruções no componente &lt;strong&gt;&lt;ion-searchbar&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;ion-searchbar 
    [(ngModel)]=&#34;searchTerm&#34;
    [formControl]=&#34;searchTermControl&#34; 
    [showCancelButton]=true
    (ionInput)=&#34;filterItems()&#34; 
    placeholder=&#34;Type here...&#34; &amp;gt;
 &amp;lt;/ion-searchbar&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Note que além do &lt;strong&gt;formControl&lt;/strong&gt; também atribuímos o valor &lt;strong&gt;true&lt;/strong&gt; à propriedade &lt;strong&gt;showCancelButton&lt;/strong&gt;, que irá apresentar um botão para cancelar a busca e retirar o teclado digital da tela.&lt;/p&gt;

&lt;p&gt;E a seguinte instrução que irá controlar quando devemos disparar a busca:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.searchTermControl = new FormControl();
  this.searchTermControl.valueChanges.debounceTime(1000).distinctUntilChanged().subscribe(search =&amp;gt; {
    if (search !== &#39;&#39; &amp;&amp; search) {
      this.filterItems();
    }
  })  
&lt;/pre&gt;

&lt;p&gt;E com isso o componente se torna mais coerente com a expectativa do usuário, que irá perceber um ganho de performance ao filtrar resultados em uma lista com muitas células.&lt;/p&gt;

&lt;h4 id=&#34;10-3-8211-ajustando-o-visual-dos-componentes-com-css&#34;&gt;10.3 &amp;#8211; Ajustando o visual dos componentes com CSS&lt;/h4&gt;

&lt;p&gt;Nosso aplicativo agora depende de algumas mudanças visuais para corrigir alguns pequenos detalhes. O primeiro deles é referente ao Android. O Ionic 2, ao rodar em um dispositivo Android, oferece automaticamente suporte ao &lt;strong&gt;&lt;a href=&#34;https://material.google.com/&#34; target=&#34;_blank&#34;&gt;Material Design&lt;/a&gt;&lt;/strong&gt; do &lt;strong&gt;Google&lt;/strong&gt; (uma linguagem visual que sintetiza princípios clássicos daquilo que considera o &amp;#8220;bom design&amp;#8221;). Em resumo, o Material Design se preocupa em criar uma experiência unificada de layout entre as plataformas que rodam o sistema operacional do Android. &lt;a href=&#34;https://material.google.com/#introduction-principles&#34; target=&#34;_blank&#34;&gt;Aqui&lt;/a&gt; você pode conhecer melhor sobre seus princípios fundamentais.&lt;/p&gt;

&lt;p&gt;Um dos pontos de atenção é a maneira como os textos devem ser apresentados ao usuário. O Material Design trabalha com a noção de hierarquia baseada em tons e opacidade. Em outras palavras, textos primários (que representam títulos e informações de destaque) recebem 87% de opacidade enquanto subtítulos recebem 54%. Veja abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-material-design-spec.jpg&#34; alt=&#34;Ionic 2 - Material Design Spec&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Se você for inspecionar as cores presentes nos textos das células (utilize o &lt;em&gt;Devtools&lt;/em&gt; para tal) vai notar que elas não seguem este ponto da especificação da linguagem. O texto principal, por exemplo, utiliza preto puro e é sempre bom (fica aqui a dica) &lt;a href=&#34;https://ianstormtaylor.com/design-tip-never-use-black&#34; target=&#34;_blank&#34;&gt;evitar&lt;/a&gt; preto puro em seus designs sempre que possível.&lt;/p&gt;

&lt;p&gt;Diferentemente do Android, a preocupação do iOS está voltada para o conteúdo, por isso não existe nenhuma linguagem tão restritiva quanto o Material Design na plataforma. No entanto, irei replicar a mudança visual que faremos para o Android também no iOS, tornando nossos textos ainda mais agradáveis para leitura.&lt;/p&gt;

&lt;p&gt;Em &lt;strong&gt;home.scss&lt;/strong&gt; inclua o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// iOS &amp; Android only
  .item-md, .item-ios {
      h2 {
          color: rgba($color: #000, $alpha: .87);
      }
      p {
          color: rgba($color: #000, $alpha: .54);
      }
  }
&lt;/pre&gt;

&lt;p&gt;Repare que podemos fazer o nesting dos elementos por estar utilizando &lt;strong&gt;Sass&lt;/strong&gt;. Também perceba que aplicamos a alteração apenas para as plataformas Android e iOS mas não para Windows Phone. As classes você pode obter facilmente ao inspecionar o DOM no console do browser.&lt;/p&gt;

&lt;p&gt;Outro problema aparente são os títulos dos posts que somem ao atingir a borda da célula. Precisamos incluir uma quebra de linha para que eles sejam apresentados por completo. Dessa vez iremos aplicar a alteração às três plataformas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// iOS, Android &amp; WP
  .item-md, .item-ios, .item-wp {
      h2, p {
          white-space: normal;
      }
  }
&lt;/pre&gt;

&lt;p&gt;Por fim, gostaria de melhorar a maneira como a barra de busca se apresenta na versão iOS. Ela está pequena e diminui ainda mais de tamanho quando o botão de cancelar está ativo. Também seria interessante escurecer um pouco mais a opacidade do background para lhe conferir maior destaque:&lt;/p&gt;

&lt;p&gt;Inclua o seguinte código (desta vez aplicado apenas para o iOS):&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// iOS only
  .toolbar-ios { 
      ion-title {
          padding: 0 90px 0 1px;  
      } 
      .searchbar-ios .searchbar-input {
          background: rgba($color: #000, $alpha: 0.12);            
      }
  }
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Caso prefira, você também pode alterar o valor das variáveis Sass do Ionic. &lt;a href=&#34;https://ionicframework.com/docs/v2/theming/overriding-ionic-variables/&#34; target=&#34;_blank&#34;&gt;Neste link&lt;/a&gt; há uma lista de todas elas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;10-4-8211-ajustes-finais-no-html&#34;&gt;10.4 &amp;#8211; Ajustes finais no html&lt;/h4&gt;

&lt;p&gt;Vamos iniciar modificando a cor da NavBar. Inclua o seguinte atributo na tag &lt;strong&gt;&lt;ion-navbar&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-navbar color=&#34;secondary&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Como estamos utilizando &lt;strong&gt;Sass&lt;/strong&gt;, fazemos uma referência à variável &lt;strong&gt;secondary&lt;/strong&gt; do array &lt;strong&gt;colors&lt;/strong&gt; que está listado no arquivo &lt;strong&gt;src/theme/variable.scss&lt;/strong&gt;. Isso significa que você pode alterar o valor da cor na variável ao invés de escrever diretamente no template html.&lt;/p&gt;

&lt;p&gt;Agora eu gostaria de inserir um ícone na frente do meu endereço de domínio (que representa meu subtítulo na lista) sempre que a categoria estiver relacionada com alguma das listadas na nossa Action Sheet. Eu posso controlar esse comportamento utilizando a diretiva de html do Angular chamada &lt;strong&gt;ngSwitch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Substitua esta linha:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;p&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Por esta instrução:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt; &amp;lt;div [ngSwitch]=feed.data.subreddit.toLowerCase()&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;askreddit&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;help-circle&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;gaming&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;logo-playstation&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;music&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;musical-notes&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;movies&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;film&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;pics&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;image&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchDefault&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Observe que os ícones apenas serão aplicados no caso de coincidirem com os argumentos. Em caso contrário, será exibido apenas o texto sem nenhum ícone, conforme descrito na cláusula &lt;strong&gt;ngSwitchDefault&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Outra coisa que me incomoda é o componente &lt;strong&gt;Refresher&lt;/strong&gt; ser acionado com muito pouco esforço. Eu sinto que o usuário poderia puxar um pouco mais a lista para evitar que o evento seja disparado com muita facilidade. Podemos modificar isso alterando a propriedade &lt;strong&gt;pullMin&lt;/strong&gt;, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-refresher (ionRefresh)=&#34;doRefresh($event)&#34; [pullMin]=90&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Alteramos para 90 dpi a distância mínima que o usuário deve alcançar para disparar o evento. A distância padrão é 60.&lt;/p&gt;

&lt;p&gt;Seria também interessante alterar a cor da barra de status da aplicação para a cor branca, já que o fundo da NavBar agora está colorido. Como a barra de status é um componente nativo, para modificá-lo precisaremos instalar um plugin do &lt;strong&gt;Cordova&lt;/strong&gt;. Verifique se ele já está instalado procurando no arquivo &lt;strong&gt;package.json&lt;/strong&gt; por &amp;#8220;&lt;strong&gt;cordova-plugin-statusbar&lt;/strong&gt;&amp;#8220;. Caso contrário, digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic plugin add cordova-plugin-statusbar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;E insira a seguinte instrução dentro do método construtor do arquivo &lt;strong&gt;src/app/app.component.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;StatusBar.backgroundColorByHexString(&#39;#ffffff&#39;);
&lt;/pre&gt;

&lt;p&gt;E agora veja como ficou o visual final da nossa aplicação rodando em um iPhone 6:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step10.gif&#34; alt=&#34;Ionic 2 - UX enhancement&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;10-5-8211-aumentando-o-desempenho&#34;&gt;10.5 &amp;#8211; Aumentando o desempenho&lt;/h4&gt;

&lt;p&gt;Se você pensa em evoluir de um protótipo para um aplicativo real, se preocupar com o seu desempenho é tarefa essencial. Abaixo eu listo algumas sugestões que podem ajudar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WKWebView&lt;/strong&gt; &amp;#8211; Recentemente o time do Ionic tornou possível rodar os aplicativos iOS utilizando o browser WKWebView (evolução do antigo browser UIWebView). Este novo engine oferece aos aplicativos iOS um ganho de performance muito superior ao antigo browser, principalmente na experiência com listas. Para instalar o plugin, digite: &lt;code&gt;ionic plugin add https://github.com/driftyco/cordova-plugin-wkwebview-engine.git --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Crosswalk&lt;/strong&gt; &amp;#8211; Como o Android tem algumas limitações de desempenho que podem ser encontradas em alguns devices (principalmente nos antigos devido às várias versões de sistema existentes), fica difícil garantir que o aplicativo irá rodar exatamente da maneira como queremos. O Crosswalk é um browser moderno que é empacotado junto com o seu app no momento que você faz o build para Android. Isso significa que, independente do device do usuário, ele estará executando o app no Crosswalk. O ganho de performance é visível mas ele pode aumentar o tamanho final da sua aplicação. Para instalar, digite: &lt;code&gt;ionic plugin add cordova-plugin-crosswalk-webview&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual Scroll&lt;/strong&gt; &amp;#8211; O nosso aplicativo pode adicionar novos itens à lista de várias maneiras. Isso significa que, quanto mais a lista aumenta de tamanho, mais itens precisarão ser renderizados, o que irá consumir muita memória e impactar o desempenho geral. O Virtual Scroll foi criado com o intuito de minimizar este impacto, uma vez que ele apenas renderiza uma quantidade &amp;#8220;x&amp;#8221; de células na tela, suficientes para preenche-la. Dessa forma elas podem ser reutilizadas, o que evita uma sobrecarga de memória (comportamento muito similar ao de uma &lt;strong&gt;ListView&lt;/strong&gt; no iOS). Para entender melhor sobre como utilizar o Virtual Scroll, visite &lt;a href=&#34;https://ionicframework.com/docs/v2/api/components/virtual-scroll/VirtualScroll/&#34; target=&#34;_blank&#34;&gt;este link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;considerações-finais&#34;&gt;Considerações finais&lt;/h2&gt;

&lt;p&gt;Sim, é um post gigantesco. Mas a minha meta ao escrevê-lo era gerar o máximo de valor para profissionais que ainda não tiveram contato com o Ionic 2 ou aqueles que desejam entender melhor como ele funciona, uma vez que somos carentes de tutoriais mais densos escritos sobre o assunto em português.&lt;/p&gt;

&lt;p&gt;Seja você um desenvolvedor, gerente de produto ou CIO de uma empresa, é muito importante compreender que ainda é difícil nos dias de hoje suportar a grande diversidade de aparelhos e plataformas existentes em um ecossistema que vive em constante mudança. Os custos para manter uma equipe multidisciplinar sempre atualizada (e com boa sinergia) é altíssimo e isso se reflete no orçamento repassado para o cliente. Optar pelo desenvolvimento de aplicativos híbridos é, antes de mais nada, uma opção estratégica que deve ser avaliada de acordo com o contexto de cada projeto. Muitas das vezes os argumentos à favor do desenvolvimento nativo não se justificam, principalmente se o projeto não demanda um &lt;em&gt;frame rate&lt;/em&gt; muito alto (como aplicativos com muitas animações, transições customizadas ou jogos).&lt;/p&gt;

&lt;p&gt;Outro ponto que precisa ser esclarecido é que o Ionic tem um papel importantíssimo no que se refere à uma fase que é tão ou mais importante que o desenvolvimento em si: A &lt;strong&gt;prototipação&lt;/strong&gt;. Poder validar o produto com o cliente ainda em fase inicial é um grande diferencial. Algo que lhe confere uma posição de destaque em um mercado extremamente competitivo.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Há muito espaço para melhorias e recursos adicionais que podem ser implementados no aplicativo que criamos. Caso tope desafios, você pode tentar os seguintes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Incluir data de publicação do post na lista;&lt;/li&gt;
&lt;li&gt;Incluir recurso de navegação entre telas (deixei o NavController lá de propósito);&lt;/li&gt;
&lt;li&gt;Oferecer opção de alterar url para exibir resultados de um determinado subreddit;&lt;/li&gt;
&lt;li&gt;Considerar cenários onde o usuário pode perder a conexão com a internet;&lt;/li&gt;
&lt;li&gt;Opção de utilizar algum recurso nativo do smartphone (ex: Câmera).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para facilitar o seu aprendizado, o projeto está disponível no &lt;strong&gt;&lt;a href=&#34;https://github.com/carloscabral/my-reader---Ionic2&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/strong&gt; separado por branches. Por exemplo, caso você queira ter acesso ao passo 4 do tutorial, baixa digitar no terminal &lt;code&gt;git checkout step4&lt;/code&gt; e o código fonte referente à este passo estará disponível.&lt;/p&gt;

&lt;p&gt;Bons estudos e até a próxima!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Se você ficou curioso sobre a criação de aplicativos multiplataforma que utilizam tecnologia da web, saiba que o Ionic não é a única opção existente. Leia meu post sobre &lt;strong&gt;&lt;a href=&#34;http://tableless.com.br/react-native-construa-aplicacoes-moveis-nativas-com-javascript/&#34; target=&#34;_blank&#34;&gt;React Native&lt;/a&gt;&lt;/strong&gt; e descubra como já é possível criar uma aplicação 100% nativa utilizando JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Yarn: A evolução do NPM</title>
      <link>http://tableless.com.br/yarn-evolucao-do-npm/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/yarn-evolucao-do-npm/</guid>
      <description>

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-56337&#34; style=&#34;text-align: center&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/yarn-kitten-full.png&#34; alt=&#34;yarn-kitten-full&#34; width=&#34;300&#34; height=&#34;135&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nos primórdios do desenvolvimento web e afins, trabalhar com bibliotecas era uma tarefa árdua. Lembro que tínhamos que pesquisar pela biblioteca, escolher uma versão, baixar o zip e implementar em nosso projeto. Não parece nada de outro mundo ao se tratar de pequenos projetos, mas quando estamos falando de projetos um pouco maiores, isso se torna um transtorno.  A coisa se torna ainda mais complicada quando há a dependência entre bibliotecas.&lt;/p&gt;

&lt;p&gt;Nesse contexto, entram os gerenciadores de pacotes, que chegaram para revolucionar a maneira como lidamos com as dependências de nosso projetos. Um dos principais gerenciadores de pacotes é o &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt;, que inicialmente visava abastecer apenas os desenvolvedores de NodeJS, mas acabou se tornando um hub comum de dependências Javascript em geral. O NPM hoje conta com mais de 300mil bibliotecas em seu repositório central, as quais alcançam cerca  5 bilhões de downloads por mês, e é a ferramenta de gerenciamento de pacotes mais popular do mundo.&lt;/p&gt;

&lt;p&gt;Apesar de ser uma excelente ferramenta, o NPM nunca conseguiu agradar a todos, e são comuns as reclamações de lentidão, a falta de um instalador offline, instalações em fila, etc.&lt;/p&gt;

&lt;h2 id=&#34;yarn-package-manager&#34;&gt;Yarn Package Manager&lt;/h2&gt;

&lt;p&gt;No dia 11 de outubro de 2016, o Facebook &lt;a href=&#34;https://code.facebook.com/posts/1840075619545360&#34;&gt;anunciou&lt;/a&gt; o seu novo gerenciador de pacotes para Javascript: o Yarn, que vem com a proposta de ser mais rápido, seguro e confiável que o NPM. O Yarn é open source, e nasceu com a colaboração, também, das empresas Exponent, Google, e Tilde.&lt;/p&gt;

&lt;p&gt;O Yarn funciona exatamente como o NPM e o Bower, abrangendo, inclusive, as bibliotecas que estão presentes nestes gerenciadores. Uma das coisas mais interessantes, além da rapidez, é a possibilidade de instalação de pacotes offline. Quando você instala um pacote, ele cria um cache em sua máquina que possibilita a futura instalação deste sem precisar estar conectado à internet.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-yarn&#34;&gt;Instalando o Yarn&lt;/h2&gt;

&lt;p&gt;Para a instalação, você pode baixar no &lt;a href=&#34;https://yarnpkg.com/en/docs/install&#34;&gt;site oficial&lt;/a&gt;, mas também pode utilizar outro gerenciador, como o NPM (confesso que parece irônico, como quando utilizávamos o Internet Explorer para baixar o Chrome).&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;npm install -g yarn
&lt;/pre&gt;

&lt;h2 id=&#34;utilizando-o-yarn&#34;&gt;Utilizando o Yarn&lt;/h2&gt;

&lt;h3 id=&#34;inicialização&#34;&gt;Inicialização&lt;/h3&gt;

&lt;p&gt;A utilização do Yarn é bastante semelhante com a do NPM. Para inicializar basta digitar, na linha de comando:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn init
&lt;/pre&gt;

&lt;p&gt;Este comando irá gerar um arquivo &lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;{
&#34;name&#34;: &#34;Yarn&#34;,
&#34;version&#34;: &#34;1.0.0&#34;,
&#34;main&#34;: &#34;index.js&#34;,
&#34;license&#34;: &#34;MIT&#34;
}
&lt;/pre&gt;

&lt;p&gt;O gerenciamento dos pacotes pode ser feito diretamente no &lt;em&gt;package.json&lt;/em&gt;, ou pela linha de comando.&lt;/p&gt;

&lt;h3 id=&#34;adicionando-uma-dependência&#34;&gt;Adicionando uma dependência&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add [package]
yarn add [package]@[version]
yarn add [package]@[tag]
&lt;/pre&gt;

&lt;h3 id=&#34;fazendo-update&#34;&gt;Fazendo update&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn upgrade [package]

yarn upgrade [package]@[version]
yarn upgrade [package]@[tag]
&lt;/pre&gt;

&lt;h3 id=&#34;desfazendo-as-coisas&#34;&gt;Desfazendo as coisas&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn remove [package]
&lt;/pre&gt;

&lt;h3 id=&#34;instalando-as-dependências&#34;&gt;Instalando as dependências&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn install
&lt;/pre&gt;

&lt;h2 id=&#34;outras-funcionalidades&#34;&gt;Outras funcionalidades&lt;/h2&gt;

&lt;h3 id=&#34;lock-file&#34;&gt;Lock file&lt;/h3&gt;

&lt;p&gt;Além do package.json, o Yarn cria, na pasta raíz do projeto, um arquivo yarn.lock, que trata de listar as bibliotecas &amp;#8220;originais&amp;#8221; do projeto, um sistema bem semelhante ao do composer.&lt;/p&gt;

&lt;h3 id=&#34;fazendo-uma-limpeza&#34;&gt;Fazendo uma limpeza&lt;/h3&gt;

&lt;p&gt;Outro recurso interessante é o mecanismo de limpeza de dependências, ao executar o comando:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn clean
&lt;/pre&gt;

&lt;p&gt;O Yarn vasculha as dependências e verifica tudo aquilo que não está sendo utilizado e exporta para um arquivo &lt;strong&gt;.yarnclean&lt;/strong&gt;. Caso você tenha este arquivo em sua pasta raíz, quando executar o &lt;strong&gt;yarn install&lt;/strong&gt;, ele vai instalar as dependências de forma mais limpa.&lt;/p&gt;

&lt;h3 id=&#34;self-update&#34;&gt;Self-update&lt;/h3&gt;

&lt;p&gt;Para atualizar o Yarn, basta digitar no console:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn self-update
&lt;/pre&gt;

&lt;p&gt;ou, caso queira especificar a versão:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn self-update 0.1.2
&lt;/pre&gt;

&lt;h2 id=&#34;futuro&#34;&gt;Futuro&lt;/h2&gt;

&lt;p&gt;Em todos os testes realizados, o Yarn se mostrou um gerenciador de pacotes bastante robusto e completo. De fato, o Yarn é extremamente rápido. Estou utilizando-o há cerca de uma semana, e, sinceramente, não penso em voltar a utilizar o NPM.&lt;/p&gt;

&lt;p&gt;A sua equipe de desenvolvimento está incentivando todos a migrarem e contribuirem na sua página do &lt;a href=&#34;https://github.com/yarnpkg/yarn&#34;&gt;github&lt;/a&gt;, afinal todos só temos a ganhar com esta nova e excelente ferramenta.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World com React, do rascunho até o primeiro componente</title>
      <link>http://tableless.com.br/hello-world-com-react-do-rascunho-ate-o-primeiro-componente/</link>
      <pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/hello-world-com-react-do-rascunho-ate-o-primeiro-componente/</guid>
      <description>

&lt;p&gt;Há muito tempo eu queria fazer um Hello World com React, mas nunca tinha tempo por que eu mudei de área há uns 3 anos, ficando mais na parte de gestão de produtos e times, deixando quase que totalmente o desenvolvimento e a escrita de código. Por isso, senti na pele o que os iniciantes sentem quando precisam fazer um simples Hello World de uma tecnologia nova. São tantos artigos falando coisas diferentes, usando setups diferentes, na sua maioria complexos e que não explicam as coisas com simplicidade.&lt;/p&gt;

&lt;p&gt;Na busca de conteúdo sobre ReactJS, encontrei uma série de fontes pela internet, que você pode conferir no final deste texto, além de um curso grátis, muito, mas muito bem feito pelo &lt;a href=&#34;http://jscasts.teachable.com/&#34;&gt;Matheus Lima no JSCasts&lt;/a&gt;. Esse capítulo baseado em todas essas fontes. Tentei abstrair toda as inutilidades que alguém não precisa aprender logo que está iniciando. Espero que tenha cumprido com o objetivo.&lt;/p&gt;

&lt;h2 id=&#34;conceitos-do-react-e-introdução&#34;&gt;Conceitos do React e Introdução&lt;/h2&gt;

&lt;p&gt;O React foi pensado em como podemos componentizar nossos elementos, de forma que eles sejam independentes, mas reutilizáveis. Pensa em um componente como se fosse um widget ou um módulo. Se ficar mais fácil, pense que um componente é um pedaço de HTML, CSS, JS e os poucos dados que irão popular esse pedaço do layout.&lt;/p&gt;

&lt;p&gt;Sem entrar na polêmica de modularização e componentização no JS, atualmente, nós organizamos na pior das hipóteses &amp;#8211; e mais comum também -, os componentes como partes separadas de códigos. Você pega um pedaço de código HTML, coloca numa determinada página, que é formatada com CSS e manipulada com JS. O código que estrutura, formata e manipula seu componente está separado nesses três arquivos de HTML, CSS e JS. No React, o conceito é mais simples, onde unificamos o HTML dentro do JS, o que no React chamamos de JSX.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/react-component.jpg&#34; alt=&#34;react-component&#34; width=&#34;1784&#34; height=&#34;1298&#34; class=&#34;aligncenter size-full wp-image-56272&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perceba que na imagem acima &amp;#8211; &lt;a href=&#34;https://dribbble.com/shots/1262636-To-Do-Dashboard/attachments/172917&#34;&gt;peguei como exemplo daqui&lt;/a&gt; &amp;#8211; cada retângulo colorido tem um componente pai, com seus componentes internos, que chamamos de componentes filhos. Podemos, então, criar um componente chamado &lt;code&gt;navBar&lt;/code&gt; com um componente filho chamado &lt;code&gt;userInfo&lt;/code&gt;, que conterá as informações do usuário. O nosso componente &lt;strong&gt;pai&lt;/strong&gt;, guarda estado dos dados que usaremos nos componentes filhos. O &lt;strong&gt;pai&lt;/strong&gt; compartilha os dados com os filhos por meio de atributos. Nesse exemplo, a &lt;code&gt;navBar&lt;/code&gt; iria compartilhar as informações do usuário logado para o componente filho &lt;code&gt;userInfo&lt;/code&gt;. Esta hierarquia de pai e filho faz com que o gerenciamento de dados seja simples, por que nós sabemos exatamente onde os dados estarão, não causando confusão usando esses dados erroneamente em outros lugares.&lt;/p&gt;

&lt;p&gt;O JSX é como o ReactJS cria os componentes em JavaScript. Você vai escrever HTML (quase) normal dentro do próprio JS, o ReactJS, por sua vez, vai se encarregar de traduzir esse HTML para JavaScript, que vai renderizar um elemento no DOM. Se você tem o código &lt;code&gt;&amp;lt;h1&amp;gt;Titulo&amp;lt;/h1&amp;gt;&lt;/code&gt;, o JSX vai se transformar em &lt;code&gt;React.createElement(&#39;h1&#39;, null, &#39;Titulo&#39;);&lt;/code&gt; antes de ser executado pelo browser. Escrever com esse HTML do React (JSX), facilita a leitura e você diminui a curva de aprendizado.&lt;/p&gt;

&lt;p&gt;Você já deve ter ouvido sobre o &lt;strong&gt;Virtual DOM&lt;/strong&gt;. O Virtual DOM é a árvore de componentes que o ReactJS gera para que o browser renderize na tela. Pra melhorar a performance, o ReactJS gera todo o HTML (baseado em JSX e transformado em JavaScript) na memória antes de renderizar para o usuário. Além disso, ele fica vigiando esse Virtual DOM procurando por alterações. Quando algo é alterado, ele muda apenas o que foi alterado e não todo o HTML.&lt;/p&gt;

&lt;h2 id=&#34;setup-do-projeto&#34;&gt;Setup do projeto&lt;/h2&gt;

&lt;p&gt;Como todo o projeto, necessitamos fazer um setup inicial, preparando o ambiente e iniciando parte do código. Nesse setup vamos começar criando o projeto com NPM, depois vamos criar arquivos de configuração do Webpack e também o arquivo &lt;strong&gt;index.html&lt;/strong&gt;, que é onde vamos mostrar nossa App.&lt;/p&gt;

&lt;h3 id=&#34;npm&#34;&gt;NPM&lt;/h3&gt;

&lt;p&gt;Como gerenciador de pacotes, vamos usar o NPM. Por isso, abra seu terminal predileto e veja os comandos abaixo. Esses comandos vão criar uma pasta para o projeto (eu já estou na minha pasta publica, onde coloco meus projetos para serem acessados via localhost), depois eu inicio o NPM e aí instalo dois pacotes iniciais &lt;strong&gt;react&lt;/strong&gt; e &lt;strong&gt;react-dom&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ mkdir meu-projeto
$ npm install --save react react-dom
$ npm init # aperte enter em tudo que vier
&lt;/pre&gt;

&lt;p&gt;Agora, dentro da pasta &lt;strong&gt;meu-projeto&lt;/strong&gt; deve haver um &lt;strong&gt;package.json&lt;/strong&gt; que o NPM instalou. Vamos instalar agora o Webpack. O Webpack é o que vai juntar todos os nossos módulos, compilar nosso CSS e etc.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ cd meu-projeto
$ npm install --save-dev webpack
&lt;/pre&gt;

&lt;p&gt;Nós vamos instalar o &lt;strong&gt;webpack&lt;/strong&gt; apenas em desenvolvimento, por que, obviamente vamos usar o código que ele gerar em produção. Mas vamos aproveitar para instalá-lo também globalmente, por que vamos precisar rodar o comando &lt;code&gt;webpack&lt;/code&gt; para gerar nosso bundle:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ npm install webpack -g
&lt;/pre&gt;

&lt;p&gt;Seu &lt;strong&gt;package.json&lt;/strong&gt; tem que ficar mais ou menos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{
  &#34;name&#34;: &#34;curso-react-matheus&#34;,
  &#34;version&#34;: &#34;1.0.0&#34;,
  &#34;description&#34;: &#34;&#34;,
  &#34;main&#34;: &#34;index.js&#34;,
  &#34;scripts&#34;: {
    &#34;test&#34;: &#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;
  },
  &#34;author&#34;: &#34;&#34;,
  &#34;license&#34;: &#34;ISC&#34;,
  &#34;dependencies&#34;: {
    &#34;react&#34;: &#34;^15.3.2&#34;,
    &#34;react-dom&#34;: &#34;^15.3.2&#34;
  },
  &#34;devDependencies&#34;: {
    &#34;webpack&#34;: &#34;^1.13.2&#34;
  }
}
&lt;/pre&gt;

&lt;h3 id=&#34;config-do-webpack&#34;&gt;Config do Webpack&lt;/h3&gt;

&lt;p&gt;O webpack é um empacotador de código focado em módulos. Você pode ver com mais detalhes sobre o que é o webpack &lt;a href=&#34;http://tableless.com.br/introducao-ao-webpack/&#34;&gt;nesse artigo do Leo Cavalcante no Tableless&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como já instalamos anteriormente o webpack com o NPM, vamos criar agora um &lt;strong&gt;webpack.config.js&lt;/strong&gt;. Aqui é onde vamos ter as configurações do Webpack. O Matheus, em seu vídeo, simplificou ao máximo as explicações que não ficasse confusa, tendo que explicar Redux, Flux, ES6 e etc, por isso, vamos fazer o mesmo aqui. Assim facilita seu aprendizado.&lt;/p&gt;

&lt;p&gt;O código do config do Webpack é esse aqui:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;module.exports = {
  entry: &#34;./app/App.js&#34;,
  output: {
    filename: &#34;public/bundle.js&#34;
  },
  module: {
    loaders: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        loader: &#39;babel&#39;,
        query: {
          presets: [&#39;react&#39;]
        }
      }
    ]
  }
}
&lt;/pre&gt;

&lt;p&gt;O Matheus explicou tim tim por tim tim cada uma dessas linhas no segundo vídeo do curso dele. Por enquanto, você só precisa saber o seguinte:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;entry: &amp;quot;./app/App.js&amp;quot;,&lt;/code&gt; vai ler o arquivo App.js, gerando um &lt;strong&gt;output&lt;/strong&gt; chamado &lt;strong&gt;bundle.js&lt;/strong&gt;. Aproveite para criar agora o &lt;strong&gt;App.js&lt;/strong&gt;, dentro de uma pasta &lt;strong&gt;app&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;O React usa o conceito de Loaders. Não vamos ver isso agora. Mas no bloco &lt;code&gt;loaders&lt;/code&gt; desse código, ele vai testar todos os arquivos &lt;strong&gt;.js&lt;/strong&gt;, menos a pasta &lt;strong&gt;node_modules&lt;/strong&gt;, usando o &lt;strong&gt;babel&lt;/strong&gt; para fazer o transpiler. Ali nos presets, estamos dizendo que vamos usar react. Se fossemos usar ES6 no código, nós colocaríamos também ali no chave &lt;code&gt;presets&lt;/code&gt;, para que o babel soubesse que ele também teria que pegar código ES6 para poder transpor para código conhecido.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Agora, para que o babel funcione, vamos instalá-lo também via NPM:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ npm install --save-dev babel-core babel-loader babel-preset-react
&lt;/pre&gt;

&lt;p&gt;E por enquanto, é isso que você precisa saber.&lt;/p&gt;

&lt;h3 id=&#34;index-html&#34;&gt;index.html&lt;/h3&gt;

&lt;p&gt;Todo os projetos React tem um &lt;strong&gt;index.html&lt;/strong&gt; que faz a conexão com o nosso código. Esse &lt;strong&gt;index.html&lt;/strong&gt; é onde o App vai aparecer e ele deve ficar dentro da pasta &lt;strong&gt;public&lt;/strong&gt;. Crie então uma pasta &lt;strong&gt;public&lt;/strong&gt; e dentro coloque o arquivo &lt;strong&gt;index.html&lt;/strong&gt;. O código é mais ou menos esse. Também tendo em mente a simplicidade da explicação. Não inserirmos nada de outro mundo aqui:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
  &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div id=&#34;app&#34;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script src=&#34;bundle.js&#34;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O div APP é onde vamos renderizar a aplicação. É quase que padrão usar o nome &lt;code&gt;app&lt;/code&gt; ali. Mas você pode colocar qualquer outra coisa se quiser.&lt;/p&gt;

&lt;p&gt;Depois chamamos o JavaScript da nossa app, que vai estar tudo contido num arquivo só, que as vezes se chama &lt;code&gt;all.js&lt;/code&gt;, outras &lt;code&gt;bundle.js&lt;/code&gt;, outros &lt;code&gt;app.js&lt;/code&gt;. Tanto faz. Vamos usar &lt;code&gt;bundle.js&lt;/code&gt;, só para não ficar diferente dos artigos que li e do vídeo que o Matheus fez. Assim quando você for procurar mais referências, não fica confuso. E pronto.&lt;/p&gt;

&lt;h2 id=&#34;app-js-e-hello-world&#34;&gt;App.js e Hello World&lt;/h2&gt;

&lt;p&gt;Vamos começar a nossa App fazendo dois &lt;code&gt;require&lt;/code&gt;. O require vai importar para nosso código o &lt;strong&gt;react&lt;/strong&gt; e o &lt;strong&gt;react-dom&lt;/strong&gt; que instalamos aquela hora com NPM. Abra seu &lt;strong&gt;App.js&lt;/strong&gt; e escreva:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;); // importa a lib react
var reactDOM = require(&#39;react-dom&#39;); // importa a lib react-dom
&lt;/pre&gt;

&lt;p&gt;Com esses dois pacotes importados, vamos agora colocar um código inicial. Nesse código vamos usar o &lt;code&gt;reactDOM&lt;/code&gt;, que vai pegar nosso código HTML escrito em JSX e jogar naquele div com id &lt;code&gt;app&lt;/code&gt; que fizemos no &lt;strong&gt;index.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;); // importa a lib react
var reactDOM = require(&#39;react-dom&#39;); // importa a lib react-dom

reactDOM.render(&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/pre&gt;

&lt;p&gt;Pra ver funcionando, lá no seu terminal, rode o comando abaixo na pasta do projeto:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ webpack -w
&lt;/pre&gt;

&lt;p&gt;Ele vai gerar um bundle todas as vezes que você salvar algo no projeto. Você poderá acessar o &lt;strong&gt;index.html&lt;/strong&gt; pelo seu browser. No meu Mac eu acessei nesse endereço &lt;strong&gt;&lt;a href=&#34;http://localhost/curso-react-matheus/public/index.html&#34;&gt;http://localhost/curso-react-matheus/public/index.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O Tutorial puro do ReactJS sugere rodar um server. Exatamente por que eles não mostram o processo usando Webpack. Contudo, se quiser, segue aí as instruções. &lt;a href=&#34;https://github.com/reactjs/react-tutorial/#to-use&#34;&gt;Entre nesse link e rode um dos servidores&lt;/a&gt;. É só baixar um dos arquivos da linguagem que mais te agrada e rodar o comando para que o servidor rode.&lt;/p&gt;

&lt;p&gt;Crie uma pasta, baixe o arquivo preferencial e rode o comando correspondente. Ex.: &lt;code&gt;php server.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sugiro que fique conosco aqui no Webpack, assim você não se perde no processo. Nesse momento, você já deve ter rodado seu primeiro &lt;strong&gt;Hello World&lt;/strong&gt; com React, usando Webpack.&lt;/p&gt;

&lt;h3 id=&#34;importando-seu-primeiro-módulo&#34;&gt;Importando seu primeiro módulo&lt;/h3&gt;

&lt;p&gt;Para importar seu primeiro módulo, lá no &lt;strong&gt;App.js&lt;/strong&gt;, vamos criar uma variável que faz a importação do nosso componente. O arquivo desse componente estará na pasta &lt;strong&gt;components&lt;/strong&gt;, dentro da pasta &lt;strong&gt;App&lt;/strong&gt;. A estrutura de pastas fica assim:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/folders-react.png&#34; alt=&#34;folders-react&#34; width=&#34;650&#34; height=&#34;618&#34; class=&#34;aligncenter size-full wp-image-56270&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O seu App.js fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;); // importa a lib react
var reactDOM = require(&#39;react-dom&#39;);// importa a lib react-dom

var MeuComponente = require(&#39;./components/MeuComponente.js’);

reactDOM.render(, document.getElementById(&#39;app&#39;));
&lt;/pre&gt;

&lt;h4 id=&#34;criando-seu-primeiro-componente&#34;&gt;Criando seu primeiro componente&lt;/h4&gt;

&lt;p&gt;Dentro da pasta &lt;strong&gt;components&lt;/strong&gt;, crie um arquivo chamado &lt;strong&gt;MeuComponente.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; Como boas práticas e uma convenção comum nos projetos, nós colocamos o nome do arquivo do componente como sendo o mesmo nome do componente dentro do código. O nome do arquivo poderia ser diferente do nome do componente, mas aí o risco de bagunça seria enorme. Por isso, mantenha o nome do arquivo do componente sendo igual ao nome do componente no código.&lt;/p&gt;

&lt;p&gt;Voltando… dentro desse componente você vai escrever o código básico de todo o componente, que é o código que segue abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;); // importa a lib react

var MeuComponente = React.createClass({
  render: function(){
    return (
      

&lt;h1&gt;
  teste
&lt;/h1&gt;
    );
  }
});

module.exports = MeuComponente;
&lt;/pre&gt;

&lt;p&gt;Todos os componentes react vão ter esse código. Primeiro ele importa a lib do React. Depois nós criamos uma classe (&lt;code&gt;React.createClass&lt;/code&gt;) onde construíremos nosso Componente. E aí, exportamos (&lt;code&gt;module.exports = MeuComponente&lt;/code&gt;) nosso Componente para importá-lo em outras partes do projeto, como fizemos no App.js.&lt;/p&gt;

&lt;p&gt;Dentro a classe do seu componente, perceba que há uma função &lt;strong&gt;render&lt;/strong&gt;. Essa função irá transformar o código JSX que estiver ali dentro no seu componente e irá renderizá-la na tela.&lt;/p&gt;

&lt;p&gt;Perceba uma curiosidade: Por que precisamos de um parênteses em volta do return? O JavaScript insere o sinal de ponto-virgula (;) automaticamente. Sem os parênteses, o JavaScript ignoraria as linhas seguintes e não retornaria valor algum. Se o JSX começa na mesma linha que o return, então os parênteses não são necessários.&lt;/p&gt;

&lt;p&gt;Se você for no seu browser e mudar o texto do seu componente, você vai perceber que nosso componente está funcionando! ;-D&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/gif-react.gif&#34; alt=&#34;gif-react&#34; width=&#34;1394&#34; height=&#34;878&#34; class=&#34;aligncenter size-full wp-image-56271&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bom, vou ficando por aqui. O objetivo era apenas fazer um setup rápido, para você conseguir inserir pelo menos um componente e ver as coisas mudando na tela. Talvez as coisas tenham ficado mais claras para você agora, assim como ficaram para mim depois desse estudo. Sugiro que você veja os links abaixo para aprofundar mais seus estudos. Tem conteúdo em ingles e também conteúdo em português. Vá fundo!&lt;/p&gt;

&lt;h2 id=&#34;leitura-recomendada&#34;&gt;Leitura recomendada:&lt;/h2&gt;

&lt;p&gt;Algumas leituras eu perdi, outras estão por aí. Todos esses links me ajudaram a entender um bocado sobre o setup do React, seus módulos, inserir CSS, modularização e etc. Praticamente todos eles explicam as mesmas coisas, com palavras diferentes detalhes diferentes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://facebook.github.io/react/tutorial/tutorial.html&#34;&gt;Documentação do React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tutorialspoint.com/reactjs/reactjs_environment_setup.htm&#34;&gt;React Environment Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.andrewray.me/reactjs-for-stupid-people/&#34;&gt;React for Stupid People&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jamesknelson.com/learn-raw-react-no-jsx-flux-es6-webpack/&#34;&gt;Learn React by itsel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jviereck/modularise-css-the-react-way-1e817b317b04&#34;&gt;Modularise CSS the React way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hugogiraudel.com/2015/06/18/styling-react-components-in-sass/&#34;&gt;Style React Components in SASS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://survivejs.com/react/advanced-techniques/styling-react/&#34;&gt;Style React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://buildwithreact.com/tutorial/components&#34;&gt;http://buildwithreact.com/tutorial/components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jscasts.teachable.com/&#34;&gt;Curso do Matheus Lima em Português&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hugobessa.com.br/2015/01/17/comecando-com-react/&#34;&gt;Começando com React &amp;#8211; Hugo Bessa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html&#34;&gt;The React Quick Starter Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/danawoodman/9cfddb1a0c934a35f31a&#34;&gt;React Hello World Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tylermcginnis.com/react-js-tutorial-pt-1-a-comprehensive-guide-to-building-apps-with-react-js-8ce321b125ba#.wn4e2ymf3&#34;&gt;React.js Tutorial Pt 1: A Comprehensive Guide to Building Apps with React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;GitHub do projeto React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/tableless/organizando-uma-aplicação-com-react-5b8ea9075596#.3q8sxog55&#34;&gt;Organizando uma aplicação com React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@ignit.io/react-native-construindo-apps-nativos-com-javascript-parte-1-37af2fbcde84#.muc6c8dyv&#34;&gt;React Native — Construindo Apps Nativos com Javascript (parte 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fnando/react-starter-pack&#34;&gt;Starter Pack para React do Nando&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>API para Autenticar usuários com JWT e Passport</title>
      <link>http://tableless.com.br/autenticar-usuarios-com-jwt-e-passport/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/autenticar-usuarios-com-jwt-e-passport/</guid>
      <description>

&lt;p&gt;Neste artigo nós vamos explorar os principais conceitos e implementações da autenticação de usuário utilizando o mecanismo chamado JWT (&lt;em&gt;&lt;a href=&#34;https://jwt.io&#34;&gt;JSON Web Token&lt;/a&gt;&lt;/em&gt;) por meio de um módulo Passport. Afinal, este é um importante passo para se certificar de que os usuários façam uma autenticação segura dentro de uma API baseada em REST.&lt;/p&gt;

&lt;p&gt;Antes de começarmos, vamos criar uma simples API em REST, que será utilizada ao longo deste post. Para simplificar nosso exemplo, nós vamos criar uma Express API. Para começar, vamos configurar nosso projeto, abrir o terminal e digitar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;mkdir my-api
cd my-api
npm init&lt;/pre&gt;

&lt;p&gt;O &lt;strong&gt;npm init&lt;/strong&gt; mostra um questionário simples para configurar algumas descrições e gerar o arquivo &lt;strong&gt;package.json&lt;/strong&gt;, o principal arquivo que usaremos para instalar alguns módulos para nosso projeto. Você pode responder cada questão como preferir. Depois disso, instale o framework &lt;strong&gt;express&lt;/strong&gt; e o módulo &lt;strong&gt;body-parser&lt;/strong&gt; usando este comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;npm install express body-parser --save&lt;/pre&gt;

&lt;p&gt;Agora que temos o módulo Express instalado, vamos escrever nosso código para a API. Para isso, crie o arquivo &lt;strong&gt;index.js&lt;/strong&gt; com o código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// index.js
var express = require(&#34;express&#34;);
var bodyParser = require(&#34;body-parser&#34;);
var app = express();

app.use(bodyParser.json());

app.get(&#34;/&#34;, function(req, res) {
  res.json({status: &#34;My API is alive!&#34;});
});

app.listen(3000, function() {
  console.log(&#34;My API is running...&#34;);
});
module.exports = app;
&lt;/pre&gt;

&lt;p&gt;Neste post usaremos um array simples de dados de usuários para facilitar a implementação do JWT. No entanto, em aplicações reais é altamente recomendável usar um banco de dados em vez de um simples array. Então, usaremos esse array apenas para exemplo. Nós precisaremos de uma lista de dados de usuários a qual será utilizada para verificar se a solicitação é de um usuário autenticado. Para isso, crie o arquivo &lt;strong&gt;users.js&lt;/strong&gt; com o código a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// users.js
// Fake list of users to be used in the authentication
var users = [
{id: 1, name: &#34;John&#34;, email: &#34;john@mail.com&#34;, password: &#34;john123&#34;},
{id: 2, name: &#34;Sarah&#34;, email: &#34;sarah@mail.com&#34;, password: &#34;sarah123&#34;}
];

module.exports = users;
&lt;/pre&gt;

&lt;p&gt;Agora nós temos uma API simples o suficiente para explorar como implementar a autenticação JWT nas próximas sessões.&lt;/p&gt;

&lt;h2 id=&#34;introdução-ao-passport-js-e-jwt&#34;&gt;Introdução ao Passport.js e JWT&lt;/h2&gt;

&lt;h3 id=&#34;sobre-o-passport-js&#34;&gt;SOBRE O PASSPORT.JS&lt;/h3&gt;

&lt;p&gt;Há um módulo Node.js muito bacana e fácil de trabalhar com autenticação de usuários, e ele é chamado de &lt;strong&gt;Passport&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Passport é um framework extremamente flexível e modular. Ele permite que você trabalhe com as principais estratégias de autenticação, que são: &lt;strong&gt;Basic &amp;amp; Digest&lt;/strong&gt;, &lt;strong&gt;OpenID&lt;/strong&gt;, &lt;strong&gt;OAuth&lt;/strong&gt;, &lt;strong&gt;OAuth 2.0&lt;/strong&gt; e &lt;strong&gt;JWT&lt;/strong&gt;. Além disso, ele também permite trabalhar com serviços de autenticação externos, como &lt;strong&gt;Facebook&lt;/strong&gt;, &lt;strong&gt;Google+&lt;/strong&gt;, &lt;strong&gt;Twitter&lt;/strong&gt;, entre outros. Aliás, no site oficial da framework, &lt;strong&gt;há uma lista com mais de 300 estratégias de autenticação&lt;/strong&gt;, criadas e mantidas por terceiros.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56151&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/site-passport.jpg&#34; alt=&#34;site-passport&#34; width=&#34;1135&#34; height=&#34;617&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O site oficial do Passport é: &lt;a href=&#34;http://passportjs.org&#34;&gt;passportjs.org&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;sobre-a-jwt&#34;&gt;SOBRE A JWT&lt;/h3&gt;

&lt;p&gt;JWT (&lt;em&gt;JSON Web Tokens&lt;/em&gt;) é uma estratégia de autenticação para APIs em REST simples e segura. Trata-se de um padrão aberto para autenticações web e é totalmente baseada em requests JSON entre o cliente e servidor. Seu mecanismo de autenticação funciona da seguinte maneira:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;O cliente faz uma solicitação uma única vez ao enviar as credenciais de login e senha;&lt;/li&gt;
&lt;li&gt;O servidor valida as credenciais e, se tudo estiver certo, ele retorna para o cliente um JSON com um token que codifica dados de um usuário logado no sistema;&lt;/li&gt;
&lt;li&gt;Após receber o token, o cliente pode armazená-lo da forma que preferir, seja por LocalStorage, Cookie ou outros mecanismos de armazenamento do lado do cliente;&lt;/li&gt;
&lt;li&gt;Toda vez que o cliente acessa uma rota que requere autenticação, ele apenas envia esse token para a API para autenticar e liberar os dados de consumo;&lt;/li&gt;
&lt;li&gt;O servidor sempre valida esse token para permitir ou bloquear uma solicitação de cliente.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56152&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/site-jwt.jpg&#34; alt=&#34;site-jwt&#34; width=&#34;1135&#34; height=&#34;609&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para detalhes específicos sobre JWT, acesse &lt;a href=&#34;http://jwt.io&#34;&gt;jwt.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;instalando-passport-e-jwt&#34;&gt;Instalando Passport e JWT&lt;/h2&gt;

&lt;p&gt;Para começar a diversão, nós utilizaremos os seguintes módulos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;passport&lt;/strong&gt;: como um mecanismo de autenticação;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;passport-jwt&lt;/strong&gt;: como estratégia de autenticação JWT para Passport;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jwt-simple&lt;/strong&gt;: como codificador e decodificador para tokens JSON;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, vamos instalar tudo isso rodando este comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;npm install passport passport-jwt jwt-simple --save&lt;/pre&gt;

&lt;p&gt;Para começar esta implementação, primeiro nós vamos criar um arquivo &lt;strong&gt;config.js&lt;/strong&gt; para adicionar dois itens de configuração para o JWT (&lt;strong&gt;jwtSecret&lt;/strong&gt; e &lt;strong&gt;jwtSession&lt;/strong&gt;):&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// config.js
module.exports = {
jwtSecret: &#34;MyS3cr3tK3Y&#34;,
jwtSession: {session: false}
};&lt;/pre&gt;

&lt;p&gt;O campo &lt;strong&gt;jwtSecret&lt;/strong&gt; mantém uma string de chave secreta que serve como base para &lt;strong&gt;codificar&lt;/strong&gt; e &lt;strong&gt;decodificar&lt;/strong&gt; os tokens. É altamente aconselhável utilizar uma string complexa com vários caracteres diferentes e &lt;strong&gt;nunca compartilhar essa chave secreta em público&lt;/strong&gt;, pois se isso vazar, você deixará sua aplicação vulnerável, permitindo que qualquer pessoa má intencionada acesse o sistema e gerencie os tokens de usuários logados sem informar as credenciais corretas no processo de autenticação.&lt;/p&gt;

&lt;p&gt;Para finalizar, o último campo incluído é o &lt;strong&gt;jwtSession&lt;/strong&gt;, que possui o objeto {session:false}. Esse item é utilizado para informar o Passport que a API não irá gerenciar a sessão.&lt;/p&gt;

&lt;h2 id=&#34;implementando-a-autenticação-jwt&#34;&gt;Implementando a autenticação JWT&lt;/h2&gt;

&lt;p&gt;Agora que já temos as configurações do Passport e JWT prontas, vamos implementar as principais regras sobre quais o cliente será autenticado em nossa API. Para começar, vamos implementar as regras de autenticação, que também terão funções intermediárias fornecidas pelo Passport para utilizar dentro das rotas da API. Este código terá duas funções principais e uma intermediária. A middleware (intermediária) será executada no momento em que a aplicação começa a rodar, e ela basicamente recebe em sua ligação uma &lt;strong&gt;payload&lt;/strong&gt; (carga útil) que contém um &lt;strong&gt;JSON decodificado&lt;/strong&gt;, o qual foi decodificado utilizando a chave secreta &lt;strong&gt;cfg.jwtSecret&lt;/strong&gt;. Esse &lt;strong&gt;payload&lt;/strong&gt; útil terá o &lt;strong&gt;ID&lt;/strong&gt; atribuído, o qual será o &lt;strong&gt;ID&lt;/strong&gt; do usuário para ser utilizado como argumento para procurar um usuário no banco de dados. No nosso caso, esse &lt;strong&gt;ID&lt;/strong&gt; será utilizado para pegar um dado de usuário da array de usuários do arquivo &lt;strong&gt;users.js&lt;/strong&gt;. Como essa função intermediária será acessada frequentemente, para evitar processos desnecessários, vamos enviar um simples objeto contendo apenas o &lt;strong&gt;ID&lt;/strong&gt; do usuário com a seguinte função de retorno:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;done(null, {id: user.id});&lt;/pre&gt;

&lt;p&gt;Essa middleware será injetada por meio da função &lt;strong&gt;passport.use(strategy)&lt;/strong&gt;. Para finalizar, duas funções serão inclusas por meio do Passport para serem utilizadas na aplicação. São as funções &lt;strong&gt;initialize()&lt;/strong&gt;, que aciona o Passport e a &lt;strong&gt;authenticate()&lt;/strong&gt;, que é utilizada para autenticar o acesso para uma rota.&lt;/p&gt;

&lt;p&gt;Para entender melhor essa implementação, vamos criar na pasta raiz o arquivo &lt;strong&gt;auth.js&lt;/strong&gt; com o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// auth.js
var passport = require(&#34;passport&#34;);
var passportJWT = require(&#34;passport-jwt&#34;);
var users = require(&#34;./users.js&#34;);
var cfg = require(&#34;./config.js&#34;);
var ExtractJwt = passportJWT.ExtractJwt;
var Strategy = passportJWT.Strategy;
var params = {
  secretOrKey: cfg.jwtSecret,
  jwtFromRequest: ExtractJwt.fromAuthHeader()
};

module.exports = function() {
  var strategy = new Strategy(params, function(payload, done) {
    var user = users[payload.id] || null;
    if (user) {
      return done(null, {id: user.id});
    } else {
      return done(new Error(&#34;User not found&#34;), null);
    }
  });
  passport.use(strategy);
  return {
    initialize: function() {
      return passport.initialize();
    },
    authenticate: function() {
      return passport.authenticate(&#34;jwt&#34;, cfg.jwtSession);
    }
  };
};&lt;/pre&gt;

&lt;p&gt;A validação da JWT começa quando uma nova estratégia é instanciada pelo &lt;strong&gt;new Strategy()&lt;/strong&gt;. Esse objeto, então, recebe dois importantes argumentos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;secretOrkey&lt;/strong&gt;: a chave secreta JWT&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jwtFromRequest&lt;/strong&gt;: define para onde os tokens serão enviados na resposta (header, querystring, body). Veja mais neste link: &lt;a href=&#34;http://npmjs.com/package/passport-jwt#extracting-the-jwt-from-the-request&#34;&gt;npmjs.com/package/passport-jwt#extracting-the-jwt-from-the-request&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dentro dos callbacks da estratégia você pode fazer qualquer validação que preferir. No nosso caso, nós apenas estamos buscando pelo usuário correto se a solicitação enviar o &lt;strong&gt;payload.id&lt;/strong&gt; correto. &lt;strong&gt;No mundo real, você pode escrever autenticações para encontrar usuários em uma base de dados.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agora, para carregar o &lt;strong&gt;auth.js&lt;/strong&gt; durante o tempo de boot (inicialização) do servidor e iniciar o middleware do Passport pelo &lt;strong&gt;app.use(auth.initialize())&lt;/strong&gt;, edite o arquivo &lt;strong&gt;index.js&lt;/strong&gt; da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// index.js
var express = require(&#34;express&#34;);
var bodyParser = require(&#34;body-parser&#34;);
var auth = require(&#34;./auth.js&#34;)();
var app = express();

app.use(bodyParser.json());
app.use(auth.initialize());

app.get(&#34;/&#34;, function(req, res) {
  res.json({status: &#34;My API is alive!&#34;});
});

app.listen(3000, function() {
  console.log(&#34;My API is running...&#34;);
});

module.exports = app;&lt;/pre&gt;

&lt;h2 id=&#34;gerando-tokens-para-usuários-autenticados&#34;&gt;Gerando tokens para usuários autenticados&lt;/h2&gt;

&lt;p&gt;Para finalizar a autenticação em JWT, nós vamos criar uma rota para gerar tokens de usuários que irão se autenticar utilizando seus e-mails e senhas no sistema, e vamos também fazer uma refatoração na rota principal para que seus acessos carreguem apropriadamente a autenticação dos dados de usuário. Ao fazer isso, nós finalizamos essa etapa de autenticação, tornando nossa aplicação mais confiável e segura.&lt;/p&gt;

&lt;p&gt;Agora, vamos criar o &lt;strong&gt;/token&lt;/strong&gt; finalizador. Esta rota será responsável por gerar um token codificado com uma &lt;strong&gt;payload&lt;/strong&gt;, dada ao usuário que envia o e-mail e senha corretos por meio da &lt;strong&gt;req.body.email&lt;/strong&gt; e &lt;strong&gt;req.body.password&lt;/strong&gt; na solicitação.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;payload&lt;/strong&gt; terá apenas o ID do usuário. A geração do token ocorre pelo módulo &lt;strong&gt;jwt-simple&lt;/strong&gt; usando a função &lt;strong&gt;jwt.encode(payload, cfg.jwtSecret)&lt;/strong&gt;, a qual obrigatoriamente utilizará a mesma chave secreta &lt;strong&gt;jwtSecret&lt;/strong&gt;, criada dentro do arquivo &lt;strong&gt;config.js&lt;/strong&gt;. Para simplificar o manipulador de erros desse endpoint, qualquer erro será criado utilizando o código de status &lt;strong&gt;HTTP 401 &amp;#8211; Unauthorized&lt;/strong&gt; a partir do uso da função &lt;strong&gt;res.sendStatus(401)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para incluir essa regra de geração de tokens, vamos editar o arquivo &lt;strong&gt;index.js&lt;/strong&gt; utilizando o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// index.js
var express = require(&#34;express&#34;);
var bodyParser = require(&#34;body-parser&#34;);
var jwt = require(&#34;jwt-simple&#34;);
var auth = require(&#34;./auth.js&#34;)();
var users = require(&#34;./users.js&#34;);
var cfg = require(&#34;./config.js&#34;);
var app = express();

app.use(bodyParser.json());
app.use(auth.initialize());

app.get(&#34;/&#34;, function(req, res) {
  res.json({status: &#34;My API is alive!&#34;});
});

app.post(&#34;/token&#34;, function(req, res) {
  if (req.body.email &amp;&amp; req.body.password) {
    var email = req.body.email;
    var password = req.body.password;
    var user = users.find(function(u) {
      return u.email === email &amp;&amp; u.password === password;
    });
    if (user) {
      var payload = {id: user.id};
      var token = jwt.encode(payload, cfg.jwtSecret);
      res.json({token: token});
    } else {
      res.sendStatus(401);
    }
  } else {
    res.sendStatus(401);
  }
});

app.listen(3000, function() {
  console.log(&#34;My API is running...&#34;);
});

module.exports = app;&lt;/pre&gt;

&lt;p&gt;E para finalizar nossa API, vamos criar uma rota privada, a qual irá produzir o dado autenticado do usuário. Essa rota deve utilizar o middleware &lt;strong&gt;auth.authenticate()&lt;/strong&gt; rodando antes da rota com a função &lt;strong&gt;app.get(“/user”)&lt;/strong&gt;. Essa rota privada irá rodar apenas para token autenticado e você pode utilizar o objeto &lt;strong&gt;req.user.id&lt;/strong&gt; dentro dela, pois esse dado estará disponível se você enviar o token correto, e com essa ID nós vamos produzir um JSON com o usuário autenticado por meio da função &lt;strong&gt;res.json(users[req.user.id])&lt;/strong&gt;. Para criar esta rota, vamos editar o arquivo &lt;strong&gt;index.js&lt;/strong&gt; novamente. Confira como ele fica:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// index.js
var express = require(&#34;express&#34;);
var bodyParser = require(&#34;body-parser&#34;);
var jwt = require(&#34;jwt-simple&#34;);
var auth = require(&#34;./auth.js&#34;)();
var users = require(&#34;./users.js&#34;);
var cfg = require(&#34;./config.js&#34;);
var app = express();

app.use(bodyParser.json());
app.use(auth.initialize());

app.get(&#34;/&#34;, function(req, res) {
  res.json({status: &#34;My API is alive!&#34;});
});

app.get(&#34;/user&#34;, auth.authenticate(), function(req, res) {
  res.json(users[req.user.id]);
});

app.post(&#34;/token&#34;, function(req, res) {
  if (req.body.email &amp;&amp; req.body.password) {
    var email = req.body.email;
    var password = req.body.password;
    var user = users.find(function(u) {
      return u.email === email &amp;&amp; u.password === password;
    });
    if (user) {
      var payload = {id: user.id};
      var token = jwt.encode(payload, cfg.jwtSecret);
      res.json({token: token});
    } else {
      res.sendStatus(401);
    }
  } else {
    res.sendStatus(401);
  }
});

app.listen(3000, function() {
  console.log(&#34;My API is running...&#34;);
});

module.exports = app;&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Parabéns! Nós terminamos uma implementação extremamente importante para vários tipos de aplicações, que é o &lt;strong&gt;processo de autenticação&lt;/strong&gt;. Graças à JWT, agora nós temos um mecanismo seguro para autenticação de usuários entre cliente e servidor utilizando apenas dados JSON. Antes de lançar a sua aplicação, não esqueça de garantir que ela não é adulterada, arruinando a experiência de utilização. Caso tenha interesse, você pode testar a versão &lt;a href=&#34;https://jscrambler.com/account/signup/?ref=http://tableless.com.br/&#34;&gt;trial gratuita&lt;/a&gt; do Jscrambler que em poucos minutos você já configura sua aplicação na plataforma para aplicar proteção no código-fonte de seus projetos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Invertendo o Redux</title>
      <link>http://tableless.com.br/invertendo-o-redux/</link>
      <pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/invertendo-o-redux/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Já faz um tempo desde que implementei pela primeira vez o &lt;a href=&#34;http://redux.js.org/&#34;&gt;Redux&lt;/a&gt;. Numa época que só se falava nos frameworks, ele apareceu do nada, pelo menos para mim. Eu já conhecia o Flux, mas ainda não era o que estava procurando. O &lt;strong&gt;Redux&lt;/strong&gt; realmente é uma das melhores idéias que vi, para mim faz todo o sentido e ainda é simples de entender e de se implementar.&lt;/p&gt;

&lt;p&gt;Depois de usá-lo algumas vezes você precisa se policiar para não se ver usando esta arquitetura em todos os projetos e virar um pregador da arquitetura. A idéia deste post é apresentar alguns aspectos que aprendi usando este padrão, ter um olhar mais crítico apesar do entusiasmo, e apresentar uma proposta um pouco diferente que pode lhe ser útil em alguma situação.&lt;/p&gt;

&lt;h2 id=&#34;uma-visão-crítica&#34;&gt;Uma visão crítica&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Como havia dito, apesar de todo o amor que se pode ter por uma solução, é preciso um pouco de maturidade e entender que tudo o que você gosta possui contras, pontos negativos. Ter consciência disso pode te ajudar a tomar uma decisão melhor quando possui diferentes soluções parecidas para um determinado problema. Te ajudará também a saber quando dar mais atenção aos contras quando estes podem ser mais prejudiciais do que os benefícios dos seus prós. Isso te fará ser mais lúcido, mais racional, tomará menos decisões com natureza emocional. Com isto dito, vamos à alguns pontos sobre o &lt;strong&gt;Redux&lt;/strong&gt; sob minha perspectiva.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Redux&lt;/strong&gt; não é para todas as aplicações, é claro. Me vi em alguns projetos que não eram dos mais complexos, mas também não eram tão simples, nestes casos, a implementação do &lt;strong&gt;Redux&lt;/strong&gt; parece ser demais, um over-engineering, em português claro, um canhão para matar um mosquito.&lt;/li&gt;
&lt;li&gt;Todos os reducers tem um grupo de switch cases que testam o tipo de ação disparada. Estes reducers podem ficar incrivelmente grandes além de ser difícil saber de forma rápida e prática, quais reducers respondem uma determinada ação. Para saber isso você deve abrir cada arquivo do &lt;em&gt;reducer&lt;/em&gt; para descobrir.&lt;/li&gt;
&lt;li&gt;A composição dos reducers pode ser um pouco complicada às vezes de se entender. Principalmente para que está iniciando.&lt;/li&gt;
&lt;li&gt;Em algumas situações você vai preferir que o relacionamento entre as ações e os reducers fosse mais direta, mais simples.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;metodologia&#34;&gt;Metodologia&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Resumidamente, o Redux funciona alterando as propriedades de um único objeto que armazena todo o estado de sua aplicação, utiliza funções puras ( _reducers ) _para aplicar mudanças nestes estados de acordo com uma determinada ação.&lt;/p&gt;

&lt;p&gt;Os tipos das ações são imutáveis, ou seja, são constantes é por isso são usadas strings em &lt;em&gt;uppercase. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pensando em uma alternativa,  removi os tipos das ações de dentro dos reducers, e coloquei no contexto da minha Store. No Redux você pode executar vários reducers para uma mesma ação, mas não pode disparar várias ações usando um reducer.&lt;/p&gt;

&lt;p&gt;Então,  a conclusão que tirei é que posso escrever os tipos das ações como métodos de um objeto. A vantagem disso é que especifico todos os reducers que quero executar para cada um destes métodos, resolvendo o &lt;strong&gt;item 2.&lt;/strong&gt; É fácil enxergar qual &lt;em&gt;reducer&lt;/em&gt; é executado numa ação disparada e como efeito colateral eu resolvo o &lt;strong&gt;item 3&lt;/strong&gt; também, pois a composição entre reducers é direta.&lt;/p&gt;

&lt;p&gt;A lógica no final é: Ao invés de executar _n_ reducers que vão testar todos os tipos das ações, eu faço isso de maneira &lt;strong&gt;inversa&lt;/strong&gt;, eu testo apenas a ação, se esta ação existir no meu objeto, então executo os &lt;em&gt;n&lt;/em&gt; reducers. Por isso chamei esse formato de &lt;em&gt;&lt;strong&gt;Inverted Redux&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;iredux-store&#34;&gt;IRedux Store&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Com esta lógica em mente, foi só necessário escrever o código que comprove a eficácia ou não da hipótese do Inverted Redux. Para meu espanto foi ridiculamente simples. Para simplificar ainda mais por questões de didática, vou partir do princípio que esta nova Store receberá um objeto que implementa o padrão &lt;a href=&#34;https://davidwalsh.name/pubsub-javascript&#34;&gt;publish/subscribe&lt;/a&gt; ( &lt;em&gt;que é um padrão bem simples de se implementar&lt;/em&gt; ).&lt;/p&gt;

&lt;p&gt;Esta é a implementação final desta Store:&lt;/p&gt;

&lt;pre&gt;export default ( pubsub, state ) =&amp;gt; {
        let Store = {
            getState(){
                return state
        },
            subscribe( callback ){
                pubsub.subscribe(&#39;store:update&#39;, callback)
            },
            dispatch( action ){
                pubsub.publish(&#39;store&#39;, action)
            }
        }
        pubsub.subscribe(&#39;store&#39;, ( payload ) =&amp;gt;{
            if( payload.type in Store ){
                var newstate = Store[ payload.type ].call(null, state, payload );
                pubsub.publish( &#39;store:update&#39;, newstate );
            }
        });

    return Store
}

&lt;/pre&gt;

&lt;h2 id=&#34;reducers&#34;&gt;Reducers&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Com esta mudança, os reducers ficaram muito mais simples do que a versão com os _&lt;strong&gt;switch cases&lt;/strong&gt;,_ ficando mais fácil de entender, de compor e de reutilizar também.&lt;/p&gt;

&lt;p&gt;Eu prefiro exportar um objeto contendo os meus reducers agrupados por um contexto em comum. Para exemplificar, vou criar aqui um objeto com as tarefas de &lt;strong&gt;adicionar&lt;/strong&gt;, &lt;strong&gt;remover&lt;/strong&gt; e &lt;strong&gt;editar&lt;/strong&gt; itens de uma lista.&lt;/p&gt;

&lt;pre&gt;export default{

    add( state = [], action ){
        return [...state, {
            text :action.item,
            id   :(Math.random() * Math.pow(10, 20))
        }]
    },

    remove( state = [], action ){
        return state.filter( item =&amp;gt; item.id != action.id )
    },

    edit( state = [], action ){
        return state.map( item =&amp;gt; {
            if( item.id == action.id )
                return { id : item.id, text : action.text }
            else
                return { id : item.id, text : item.text }
        })
    }
}

&lt;/pre&gt;

&lt;p&gt;Neste formato a principal diferença é que os reducers não testam as ações, apenas se preocupam no tratamento dos dados que lhe são passados.&lt;/p&gt;

&lt;h2 id=&#34;juntando-as-peças&#34;&gt;Juntando as peças&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Bom, o resultado final ficou bem simples, considerando que você já tem sua implementação do Inverted Redux e tem os seus reducers prontos, a junção da instância da sua Store com os reducers se dá da seguinte forma:&lt;/p&gt;

&lt;pre&gt;import store from &#39;Iredux&#39;
import Pubsub from &#39;Pubsub&#39;
import reducersList from &#39;reducers/list&#39;

let AppStore = store( Pubsub, {
    produtos :[]
})

AppStore.subscribe( state =&amp;gt;
    console.log( &#39;AppStore.State&#39;, state )
)

AppStore.ADD = ( state, action ) =&amp;gt;{
    state.produtos = reducersList.add( state.produtos, action )
}

AppStore.REMOVE = ( state, action ) =&amp;gt;{
    state.produtos = reducersList.remove( state.produtos, action )
}

AppStore.EDIT = ( state, action ) =&amp;gt;{
    state.produtos = reducersList.edit( state.produtos, action )
}

&lt;/pre&gt;

&lt;p&gt;Os métodos representam os tipos das ações do Redux, usei a mesma convenção de constantes, usando os nomes em &lt;em&gt;uppercase&lt;/em&gt;. Sua Store além de ter os métodos &lt;code&gt;dispatch()&lt;/code&gt;, &lt;code&gt;subscribe()&lt;/code&gt; e &lt;code&gt;getState()&lt;/code&gt;, ainda contém estes métodos que serão executados no disparo de uma ação.&lt;/p&gt;

&lt;p&gt;Esta mudança me ajudou não só na visualização, pois você facilmente consegue identificar quais ações sua Store possui, como também na hora de compor os reducers. Posso também disparar um evento de remoção passando apenas o id, sem a necessidade de passar a lista ( de produtos no meu caso ) na hora de criar uma ação:&lt;/p&gt;

&lt;pre&gt;import PubSub from &#39;PubSub&#39;

$(document.body).on(&#39;click&#39;, &#39;.remove-item&#39;, (e)=&amp;gt;{
    let id = e.target.id
    PubSub.publish(&#39;store&#39;, { type:&#39;REMOVE&#39;, id })
})
&lt;/pre&gt;

&lt;p&gt;No caso do código acima, eu usei o Singleton PubSub para publicar &lt;code&gt;store&lt;/code&gt; , passando apenas o id, porque no arquivo da minha Store propriamente dita, eu já mando o estado &lt;code&gt;produtos&lt;/code&gt; que sempre será uma lista conforme meu reducer &lt;code&gt;edit&lt;/code&gt; espera.&lt;/p&gt;

&lt;p&gt;Assim que a minha Store tiver executado todos os reducers ela disparará novamente outro evento global para meu pubsub, o &lt;code&gt;store:update&lt;/code&gt; . Diferente do Redux, eu preferi sempre enviar o estado da minha aplicação para receber como argumento na hora de registrar um callback, porque eu vi que sempre tinha de executar o método .getState() e tava ficando redundante.&lt;/p&gt;

&lt;pre&gt;AppStore.subscribe( state =&amp;gt;
    console.log( &#39;AppStore.State =&amp;gt;&#39;, state )
)
&lt;/pre&gt;

&lt;p&gt;Ao usar este padrão, percebi também que em alguns casos eu sempre repetia as mesmas chamadas dos reducers em diferentes ações, isso deixava o código meio duplicado e redundante. Mas a solução foi novamente muito simples, bastava criar um reducer intermediário, um middleware, que executava todos os reducers que precisava para uma determinada ação. Passei por isso pela primeira vez quando implementei uma aplicação &lt;code&gt;todomvc&lt;/code&gt; para testar os conceitos, criei um reducer chamado &lt;code&gt;common&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;import r from &#39;stores/reducers/todos&#39;

export default ( store )=&amp;gt;{

    let common = ( state, action )=&amp;gt;{
        state.items     = r.filter( state.todos, { filter : state.filter } )
        state.remaining = r.remaining( state.remaining, { todos: state.todos } )
        return state
    }

    store.ADD = ( state, action ) =&amp;gt;{
        state.todos = r.add( state.todos, action )
        return common( state, action )
    }

    store.REMOVE = ( state, action ) =&amp;gt;{
        state.todos = r.remove( state.todos, action )
        return common( state, action )
    }

    store.UPDATE = ( state, action ) =&amp;gt;{
        state.todos = r.update( state.todos, action )
        return common( state, action )
    }

    store.TOGGLE = ( state, action ) =&amp;gt;{
        state.todos = r.toggle( state.todos, action )
        return common( state, action )
    }

    store.TOGGLE_ALL = ( state, action ) =&amp;gt;{
        state.todos = r.toggle_all( state.todos, action )
        return common( state, action )
    }

    store.EDIT = ( state, action ) =&amp;gt;{
        state.todos = r.edit( state.todos, action )
        return common( state, action )
    }

    store.CANCEL = ( state, action ) =&amp;gt;{
        state.todos = r.cancel( state.todos, action )
        return common( state, action )
    }

    store.CLEAR = ( state, action ) =&amp;gt;{
        state.todos = r.clear( state.todos, action )
        return common( state, action )
    }

    store.FILTER = ( state, action )=&amp;gt;{
        state.filter = action.filter || &#39;all&#39;
        return common( state, action )
    }
}
&lt;/pre&gt;

&lt;p&gt;Deixei o &lt;code&gt;common&lt;/code&gt;  ali para ficar mais claro de entender o que ele faz, poderia muito bem ter colocado dentro do objeto que contém todos os reducers relacionados à minha lista de Todo&amp;#8217;s e referenciá-lo como fiz com outros métodos. Ali dá para ver que eu atualizo os estados &lt;code&gt;items&lt;/code&gt; e &lt;code&gt;remaining&lt;/code&gt; , e passo normalmente para estes reducers actions customizadas, enviando dados que meus reducers sempre esperam.&lt;/p&gt;

&lt;p&gt;Claro, é possível perceber logo de cara que o arquivo da sua Store vai crescer, você pode resolver isso movendo estas ações para outro arquivo, e mandando sua store como parâmetro:&lt;/p&gt;

&lt;pre&gt;import Pubsub from &#39;Pubsub&#39;
import store from &#39;Iredux&#39;
import actions from &#39;stores/actions&#39;

let AppStore = store( Pubsub, {
    produtos :[]
})

AppStore.subscribe( state =&amp;gt;
    console.log( &#39;AppStore.State&#39;, state )
)

// @Actions
actions( AppStore )&lt;/pre&gt;

&lt;p&gt;Neste arquivo &lt;code&gt;stores/actions&lt;/code&gt; eu exporto uma função que recebe a store e faz o registro de todas as ações que esta store deve ter. Aí a organização com relação à estrutura de pastas e a lógica como isso vai se dar, depende de você e também da sua aplicação.&lt;/p&gt;

&lt;h2 id=&#34;conclusões&#34;&gt;Conclusões&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Eu fiquei bastante surpreso com o resultado disso na prática. Há projetos onde criar todos os componentes usando &lt;strong&gt;Redux&lt;/strong&gt; ou mesmo o &lt;em&gt;Inverted Redux&lt;/em&gt; é loucura, principalmente porque muitos componentes acabam trabalhando bem sozinhos, são stand-alone, e não precisam estar num flow mais complexo de relacionamento.&lt;/p&gt;

&lt;p&gt;Na prática, no mundo real, há uma necessidade de se analisar quais estados realmente devem estar em sua Store. Alguns componentes apenas precisam resolver problemas de UI, ou validação, não implicando em um relacionamento mais complexo entre as partes. Você não deve criar toda uma arquitetura Redux, Flux ou qualquer que seja, se sua página apenas contém um formulário que faz um post para uma outra página depois de uma validação simples, ou mesmo ao desenvolver um sticky header.&lt;/p&gt;

&lt;p&gt;Muitas vezes você se depara com soluções do mercado e não sabe se é ou não uma solução otimizada para o seu projeto. Pense que muitas soluções do mercado estão focando nos problemas das &lt;strong&gt;Single Page Applications&lt;/strong&gt;, e fazem isso com toda a razão pois &lt;em&gt;SPA&amp;#8217;s&lt;/em&gt; são difíceis de se desenvolver e mais difícil ainda é criar uma aplicação neste formato com fácil manutenção. Porém há um nicho muito grande que são as páginas que possuem ajax, possuem uma forma um pouco mais rica na interface, mas que não podem ser consideradas totalmente &lt;em&gt;SPA&amp;#8217;s&lt;/em&gt;. Você não deve desprezar  ou subestimar estas aplicações, grandes dores de cabeça costumam vir de onde menos se espera.&lt;/p&gt;

&lt;p&gt;Ao meu ver existe uma supervalorização do verbo &amp;#8220;&lt;strong&gt;escalar&lt;/strong&gt;&amp;#8221; no contexto do desenvolvimento front-end. Vejo muitas soluções serem vendidas utilizando o argumento de que você deve usar isto ou aquilo pois caso contrário sua aplicação não irá escalar. Nenhuma solução é ótima por si só, não há regras inquebráveis e todas elas dependem de um contexto. É por este motivo que escolher um Framework A ou B, ou um padrão C ou D não será suficiente para que sua aplicação escale. É necessário mais que isso, experiência, boas análises de requisitos, funcionalidades e especificações, refactories constantes, organização etc. Portanto, não é um caminho simples.&lt;/p&gt;

&lt;p&gt;A minha intenção com este post, além de compartilhar minhas experiências, é mostrar que o Redux abriu minha mente, minha forma de pensar, fez com que eu voltasse a pensar fora da caixa. Deve servir como solução mas também como uma inspiração, uma forma de te motivar à pensar em outras soluções, à questionar as que já tem, a seguir em frente estimulando sua criatividade.&lt;/p&gt;

&lt;p&gt;Até a próxima, um grande abraço.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Conversão de tipos em JavaScript</title>
      <link>http://tableless.com.br/conversao-de-tipos-em-javascript/</link>
      <pubDate>Mon, 05 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/conversao-de-tipos-em-javascript/</guid>
      <description>

&lt;p&gt;Um dia desses eu recebi um quebra-gelo no Telegram, com o seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Number(null);   // 0
null == 0;  // true né?
&lt;/pre&gt;

&lt;p&gt;De cara eu pensei que seria &lt;code&gt;false&lt;/code&gt;, mas fiz questão de rodar no console e ver no que dava. Claro que deu &lt;code&gt;false&lt;/code&gt;. Mesmo assim, quis entender o motivo de &lt;code&gt;Number(null)&lt;/code&gt; retornar `` e fui procurar na &lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-type-conversion&#34;&gt;documentação&lt;/a&gt; do ECMAScript 6, ou ECMAScript 2015.&lt;/p&gt;

&lt;p&gt;O JavaScript, ou ECMAScript, tem um conjunto de operações abastratas que ocorrem por baixo dos panos. Dentre estas operações, temos as conversões de tipos (&lt;em&gt;Types Conversions&lt;/em&gt;), que é executada sempre que necessário &amp;#8211; que é justamente o caso do &lt;code&gt;Number(null)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Existem várias operações abstratas de conversão de tipos em JS, mas vou abordar apenas as mais comuns.&lt;/p&gt;

&lt;h3 id=&#34;toprimitive&#34;&gt;ToPrimitive&lt;/h3&gt;

&lt;p&gt;Praticamente tudo em JS é tratado como um objeto, então a conversão &lt;em&gt;ToPrimitive&lt;/em&gt; transforma o &lt;em&gt;input&lt;/em&gt; para o seu devido tipo primitivo, isto é, retorna o valor sem ser um objeto. Talvez seja um pouco óbvio e muito comum, mas é interessante ver no console. Primeiro vejamos os tipos primitivos:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// Tipos primitivos
String(&#39;foo&#39;);      // &#39;foo&#39;
Number(2016);       // 2016
Boolean(true);      // true
&lt;/pre&gt;

&lt;p&gt;Agora, já que temos objetos pra quase tudo em JS, veja o retorno ao rodar no console do Chromium/Chrome:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// Tratando como objetos
new String(&#39;foo&#39;);
// String {0: &#34;f&#34;, 1: &#34;o&#34;, 2: &#34;o&#34;, length: 3, [[PrimitiveValue]]: &#34;foo&#34;}

new Number(2016);
// Number {[[PrimitiveValue]]: 2016}

new Boolean(false);
// Boolean {[[PrimitiveValue]]: false}
&lt;/pre&gt;

&lt;p&gt;Veja que os objetos sempre guardam o valor primitivo, que é retornado por baixo dos panos quando precisamos utilizar o valor para alguma outra operação, como por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var ano = new Number(2016);
ano + 1; // 2017

var str = new String(&#39;foo&#39;);
str.concat(&#39; bar&#39;); // &#39;foo bar&#39;
&lt;/pre&gt;

&lt;p&gt;Para converter valores do tipo &lt;code&gt;Object&lt;/code&gt;, é feita uma análise de qual o valor primitivo do objeto, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// `Object(2010)` retorna o valor primitivo do objeto `Number`,
// nesse caso, 2010
Object(2010) + 6;   // 2016

// `Object(&#39;foo&#39;)` retorna o valor primitivo do objeto `String`,
// nesse caso, &#39;foo&#39;
Object(&#34;foo&#34;).concat(&#39; bar&#39;);   // &#39;foo bar&#39;

// `Object(true)` retorna o valor primitivo do objeto `Boolean`,
// nesse caso, true
Object(true) &amp;&amp; false;  // false
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;tonumber&#34;&gt;ToNumber&lt;/h3&gt;

&lt;p&gt;A operação abstrata &lt;em&gt;ToNumber&lt;/em&gt; transforma a entrada em um tipo numérico, e é aqui que entramos naquele exemplo do &lt;code&gt;Number(null)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A conversão para valores numéricos funciona basicamente com as seguintes regras:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// Estas regras estão definidas no ECMAScript
Number(undefined);  // NaN
Number(null);       // +0
Number(true);       // 1
Number(false);      // +0
&lt;/pre&gt;

&lt;p&gt;Então, por regra, é por isso que Number(null) retorna 0, e isso não siginifica que &lt;code&gt;null == 0&lt;/code&gt;, já que são valores primitivos diferentes.&lt;/p&gt;

&lt;p&gt;Mas e quanto a conversão de &lt;em&gt;string&lt;/em&gt; para &lt;em&gt;number&lt;/em&gt;, &lt;code&gt;Number(&amp;quot;2016&amp;quot;)&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Para fazer a conversão de uma string, o &lt;em&gt;ToNumber&lt;/em&gt; tenta interpretar a string na codificação &lt;strong&gt;UTF-16&lt;/strong&gt; e caso não consiga, retorna &lt;code&gt;NaN&lt;/code&gt;, assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Number(&#34;2016&#34;);       // 2016
Number(&#34;20.16&#34;);      // 20.16
Number(&#34;-0&#34;);         // -0
Number(&#34;+Infinity&#34;);  // +Infinity
Number(&#34;++Infinity&#34;); // NaN
Number(&#34;201 6&#34;);      // NaN
Number(&#34;foo&#34;);        // NaN

// Para objetos, o retorno é correspondente ao
// valor primitivo do tipo do objeto
Number(Object(2016))  // 2016
Number(Object(&#34;21&#34;))  // 21
Number(Object(&#34;foo&#34;)) // NaN
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;toboolean&#34;&gt;ToBoolean&lt;/h3&gt;

&lt;p&gt;A operação abstrata &lt;em&gt;ToBoolean&lt;/em&gt; transforma a entrada em um tipo booleano, que assim como o &lt;em&gt;ToNumber&lt;/em&gt;, segue algumas regras. Vamos lá:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;!!undefined;        // false
!!null;             // false
!!Number(+0);       // false
!!Number(-0);       // false
!!Number(NaN);      // false

// Qualquer outro valor numérico retorna true
!!Number(21);       // true

// String retorna `false` se estiver vazia,
// caso contrário, retorna `true`
!!String(&#34;&#34;);       // false
!!String(&#34;foo&#34;);    // true

!!Object();         // true
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;tostring&#34;&gt;ToString&lt;/h3&gt;

&lt;p&gt;A operações abstratas &lt;em&gt;ToString&lt;/em&gt; tem a função de transformar a entrada em uma &lt;em&gt;string&lt;/em&gt;, e assim como as outras operações aqui descritas, também segue as suas regras de conversão, que são:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;String(undefined);      // &#34;undefined&#34;
String(null);           // &#34;null&#34;
String(true);           // &#34;true&#34;
String(false);          // &#34;false&#34;

// Para objetos, o retorno é correspondente ao
// valor primitivo do tipo do objeto
String(Object(2016))  // &#39;2016&#39;
String(Object(&#34;21&#34;))  // &#39;21&#39;
String(Object(true))  // &#39;true&#39;
String(Object(true))  // &#39;true&#39;
String(Object())      // &#39;[object Object]&#39;
&lt;/pre&gt;

&lt;p&gt;Para converter um &lt;code&gt;Number&lt;/code&gt; para &lt;em&gt;string&lt;/em&gt;, há uma série de considerações a se fazer, vou citar algumas. Tomando como base &lt;code&gt;String(Number(m))&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// 1. Se m for NaN:
String(Number(NaN)); // &#34;NaN&#34;

// 2. Se m for +0 ou −0:
String(Number(-0)); // &#34;0&#34;

// 3. Se m for menor que 0 (zero):
String(Number(-2016)); // &#34;-2016&#34;

// 4. Se m for +Infinity:
String(Number(+Infinity)); // &#34;Infinity&#34;

// 5. Para números muito grandes, muito pequenos,
// ou que tem alguma forma particular para serem
// representados como Number:
    Number(2345678987654321123456);  // 2.3456789876543211e+21
 String(Number(2345678987654321123456)); // &#34;2.3456789876543211e+21&#34;
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;toobject&#34;&gt;ToObject&lt;/h3&gt;

&lt;p&gt;Por último, temos a &lt;em&gt;ToObject&lt;/em&gt;, que transforma a entrada em um objeto, quando possível. Até aqui já tivemos a oportinudade de perceber esse tipo de conversão, já que alguns dos exemplos mostraram como &lt;em&gt;ToObject&lt;/em&gt; funciona. O que acontece basicamente é que &lt;em&gt;ToObject&lt;/em&gt; avalia o tipo primitivo da entrada e retorna um novo objeto daquele tipo, com o valor da entrada. Veja bem:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object(2016);   // Number {[[PrimitiveValue]]: 2016}
Object(&#39;foo&#39;);  // String {0: &#34;f&#34;, 1: &#34;o&#34;, 2: &#34;o&#34;, length: 3, [[PrimitiveValue]]: &#34;foo&#34;}
Object(true);   // Boolean {[[PrimitiveValue]]: true}
&lt;/pre&gt;

&lt;p&gt;Enfim, achei a resposta para o &lt;code&gt;Number(null)&lt;/code&gt; retornar `` e deu pra aprender um bocado. Recomendo que você dê uma olhada na &lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/index.html&#34;&gt;documentação do ECMAScript&lt;/a&gt;, existem várias outras operações abstratas interessantes.&lt;/p&gt;

&lt;p&gt;Como curiosidade, olha só e tente adivinhar qual o resultado do último:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object(true);               // new Boolean(true)
Object(true) == Boolean(true);      // true
Object(true) == new Boolean(true);  // ??
&lt;/pre&gt;

&lt;p&gt;O próprio &lt;code&gt;Boolean(true)&lt;/code&gt; retorna o valor primitivo &lt;code&gt;true&lt;/code&gt;, que faz com que o objeto gerado em &lt;code&gt;Object(true)&lt;/code&gt; sofra uma conversão para o valor primitivo e assim fazer a igualdade. Já &lt;code&gt;new Boolean(true)&lt;/code&gt; retorna um novo objeto, que na comparação &lt;code&gt;==&lt;/code&gt; retorna &lt;code&gt;false&lt;/code&gt;. Isso porque ao comparar dois objetos em JS, a comparação é para saber se os dois objetos são iguais. Faça o teste: &lt;code&gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;{}&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;w&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;err&amp;quot;&amp;gt;==&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;w&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;p&amp;quot;&amp;gt;{}&amp;lt;/span&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bom… é isso. Espero que eu tenha sido claro, mas se você ficou com dúvidas, me mande um tweet, vamos trocar ideia (:&lt;/p&gt;

&lt;p&gt;Até a próxima.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Este post foi originalmente postado em meu blog, no dia 12 de junho de 2016, no link abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html&#34;&gt;http://blog.gabsprates.com/2016/07/12/conversao-de-tipos-em-js.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>