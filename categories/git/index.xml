<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Tableless</title>
    <link>https://tableless.github.io/hugo-public/categories/git/index.xml</link>
    <description>Recent content in Git on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Usando GIT para atualizar arquivos no servidor de hospedagem II ‚Äì Final</title>
      <link>https://tableless.github.io/hugo-public/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem-ii-final/</link>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem-ii-final/</guid>
      <description>

&lt;p&gt;Esta √© a segunda e √∫ltima parte do artigo que explica como fazer um esquema simples para deploy autom√°tico usando GIT + Bitbucket&lt;/p&gt;

&lt;p&gt;A mesma configura√ß√£o pode ser usada em qualquer servidor GIT e qualquer servi√ßo de hospedagem que tenha acesso via ssh e git instalado&lt;/p&gt;

&lt;p&gt;Se voc√™ ainda n√£o leu a primeira parte, segue o link: &lt;a href=&#34;http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem&#34;&gt;http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No artigo anterior, criamos as chaves SSH para autentica√ß√£o no Bitbucket, criamos um reposit√≥rio GIT e manualmente executamos o comando | git pull | para atualizar o nosso reposit√≥rio.&lt;/p&gt;

&lt;p&gt;Nessa segunda parte vamos executar o comando para atualiza√ß√£o, de forma automatizada, sem precisar acessar o servidor. Vamos fazer um painel de controle para acompanhar os logs de deploy, mostrando se o comando foi executado com sucesso ou se aconteceu algum erro.&lt;/p&gt;

&lt;p&gt;Gostaria de lembrar que essa √© uma solu√ß√£o simples, existem v√°rias maneiras de fazer deploy automatizado, eu escolhi fazer usando php e shell_exec, √© mais r√°pido e para projetos simples isso funciona muito bem. O mesmo pode ser feito usando &lt;a href=&#34;https://pt.wikipedia.org/wiki/CGI&#34;&gt;CGI&lt;/a&gt; ou &lt;a href=&#34;https://pt.wikipedia.org/wiki/Shell_script&#34;&gt;Shell Script&lt;/a&gt;, ou ainda voc√™ pode usar um servi√ßo online como o heroku.com, ou configurar o Capistrano, ou Jenkins, etc&amp;#8230;&lt;/p&gt;

&lt;h4 id=&#34;o-comando-shell-exec-no-php&#34;&gt;O Comando shell_exec no PHP&lt;/h4&gt;

&lt;p&gt;No manual do php:&lt;/p&gt;

&lt;p&gt;(PHP 4, PHP 5, PHP 7)&lt;/p&gt;

&lt;p&gt;shell_exec ‚Äî Executa um comando via shell e retorna a sa√≠da inteira como uma string&lt;/p&gt;

&lt;p&gt;Isso quer dizer que podemos executar um comando no servidor e ler o retorno desse comando, no nosso caso vamos executar o comando | git pull origin master | o mesmo comando que est√°vamos executando manualmente l√° no servidor, lembra que t√≠nhamos que acessar o servidor via putty, navegar at√© a pasta do nosso reposit√≥rio e depois executar um git pull, j√° que isso √© uma tarefa repetitiva, vamos automatizar, √© isso que devemos fazer com todos os processos repetitivos.&lt;/p&gt;

&lt;p&gt;Em muitos servidores de hospedagem esse comando √© bloqueado por padr√£o, se estiver bloqueado voc√™ vai receber um aviso parecido com esse:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;Warning:  shell_exec() has been disabled for security reasons in /var/www/deploy.php on line 10&lt;/pre&gt;

&lt;p&gt;No meu caso eu abri um chamado no painel da hospedagem, explicando que precisava da libera√ß√£o para usar em um sistema de deploy autom√°tico usando GIT e prontamente fui atendido e o comando foi liberado.&lt;/p&gt;

&lt;p&gt;Vou usar o mesmo reposit√≥rio que usei para a primeira parte, &lt;a href=&#34;https://bitbucket.org/jzonta/artigo_atualizacao_arquivos&#34;&gt;https://bitbucket.org/jzonta/artigo_atualizacao_arquivos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos Come√ßar, e vamos usar um dos termos da metodologia XP &amp;#8211; Extremme Programing, &amp;#8220;Baby Steps&amp;#8221;, vamos executar todo o processo em pequenos passos, eu vou atualizar o reposit√≥rio no GIT com todos os passos, voc√™ pode acessar e ver todos os commits &amp;#8211; inclusive os errados üôÇ &amp;#8211; √© bacana pra ver a evolu√ß√£o do c√≥digo.&lt;/p&gt;

&lt;p&gt;Vou criar uma pasta chamada deploy e dentro um arquivo chamado index.php, quando executado pelo navegador ele atualiza nosso servidor executando o comando git pull no servidor e imprimindo na tela o resultado do commnado.&lt;/p&gt;

&lt;p&gt;A pasta deploy deve ficar dentro da pasta do seu projeto, voc√™ pode ver a estrutura que usei no reposit√≥rio desse artigo no Bitbucket.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Note que no final do comando git pull eu adicionei &amp;#8220;2&amp;gt;&amp;amp;1&amp;#8221; isso quer dizer que alem das sa√≠das normais eu quero exibir as sa√≠das de erro do nosso comando no servidor.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;index.php&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
    &amp;lt;?php
        $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
        echo $exec;
    ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A sa√≠da na tela √© a mesma que aparece quando executamos o comando l√° no servidor, veja o exemplo da sa√≠da no servidor e no navegador:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/comando_shell_navegador.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51941&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/comando_shell_navegador.jpg&#34; alt=&#34;comando_shell_navegador&#34; width=&#34;657&#34; height=&#34;210&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Lembre-se que para enviar esse arquivo ao servidor voc√™ n√£o deve usar o ftp, fa√ßa isso utilizando o comando |git pull|, j√° fizemos isso na primeira parte do artigo.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;J√° estamos atualizando nosso servidor apenas acessando uma url em nosso navegador \o/, mas n√£o √© s√≥ isso que queremos, eu quero que essa url seja chamada sempre que eu enviar um push para o reposit√≥rio, ent√£o acesse sua conta no Bitbucket e vamos configurar isso.&lt;/p&gt;

&lt;p&gt;Acesse seu reposit√≥rio, no menu lateral esquerdo, clique em &amp;#8220;Configura√ß√µes&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Na tela configura√ß√µes clique em &amp;#8220;Webhooks&amp;#8221; e depois em &amp;#8220;Add Webhook&amp;#8221;&lt;/p&gt;

&lt;p&gt;No campo &amp;#8220;Title&amp;#8221; adicione um nome de sua prefer√™ncia e no campo &amp;#8220;URL&amp;#8221; adicione o endere√ßo para a sua url que executa o comando de atualiza√ß√£o, no meu caso a URL √© &amp;#8220;&lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php&amp;amp;#8221&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php&amp;amp;#8221&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;Mas n√£o podemos deixar essa URL aberta, porque qualquer um poderia acessar e isso iria executar o comando git pull em nosso servidor, ent√£o vamos criar um token de autentica√ß√£o, junto com a URL eu passo um token que mais tarde vamos validar l√° no nosso c√≥digo, ent√£o a URL ficaria assim: &lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php?token=d41d8cd98f00b204e9800998ecf8427e&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php?token=d41d8cd98f00b204e9800998ecf8427e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Use este site para gerar seu token: &lt;a href=&#34;http://www.miraclesalad.com/webtools/md5.php&#34;&gt;http://www.miraclesalad.com/webtools/md5.php&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/adicionar_webhook.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51940&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/adicionar_webhook.jpg&#34; alt=&#34;adicionar_webhook&#34; width=&#34;850&#34; height=&#34;439&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, toda vez que enviar um push para o Bitbucket ele vai acessar a URL, e nossa url vai disparar o comando |git pull| no servidor e os arquivos ser√£o atualizados. Nosso deploy j√° esta funcionando, mas eu tamb√©m quero visualizar os logs, para ter maior controle sobre oque esta acontecendo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/local_git_servidor.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51943&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/local_git_servidor.jpg&#34; alt=&#34;local_git_servidor&#34; width=&#34;444&#34; height=&#34;352&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*No seu reposit√≥rio no Bitbucket, vc pode ver os requests que foram feitos entrando em &amp;#8220;Configura√ß√µes&amp;#8221;, &amp;#8220;Web Hooks&amp;#8221;, ao lado do Title do seu webhook voc√™ clica em &amp;#8220;View Requests&amp;#8221; e pode ver todas as requisi√ß√µes que o Bitbucket fez para a sua URL.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;gravando-log&#34;&gt;Gravando Log&lt;/h4&gt;

&lt;p&gt;Primeiro vamos gerar o texto que queremos gravar no nosso arquivo de log, poder√≠amos apenas colocar a sa√≠da do comando shell_exec, mas vamos adicionar a data, hora e algumas quebras de linha para deixar o nosso log mais leg√≠vel, veja como ficou o c√≥digo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
    &amp;lt;?php
        $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
        echo $exec;

        $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
        $textoLog .= PHP_EOL.$exec;

        $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
        fwrite($arquivoLog, $textoLog);
        fclose($arquivoLog);
    ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;N√£o precisa explicar muito o c√≥digo php porque √© bem simples, se algu√©m tem d√∫vida dobre alguma das fun√ß√µes usadas √© s√≥ dar uma procurada no site do php (&lt;php.net&gt;) ou no google, tem bastante material.&lt;/p&gt;

&lt;p&gt;Se tudo est√° ocorrendo como planejado, quando voc√™ executar novamente seu endere√ßo URL ele vai criar um arquivo chamado log.txt na mesma pasta, e gravar os logs neste arquivo.&lt;/p&gt;

&lt;h4 id=&#34;adicionando-token-de-valida√ß√£o&#34;&gt;Adicionando Token de Valida√ß√£o&lt;/h4&gt;

&lt;p&gt;Vamos deixar nosso deploy um pouco mais seguro. Lembra que na URL que adicionamos l√° no webhook do Bitbucket colocamos um token? Ent√£o, agora vamos validar esse token.&lt;/p&gt;

&lt;p&gt;Criei uma variavel chamada $token e adicionei a nossa string MD5&lt;/p&gt;

&lt;p&gt;Depois a variavel $tokenValido recebe true se o token enviado via post ou get for igual ao token que configuramos na variavel $token, caso contr√°rio recebe false.&lt;/p&gt;

&lt;p&gt;Depois verificamos se $tokenValido for igual a true executa o deploy se n√£o exibe o log e um bot√£o para atualizar manualmente.&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;pre&amp;gt;
    &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else {
            //Deve exibir o log e um bot√£o para para executar a atualiza√ß√£o
        }
    ?&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;implementando-a-leitura-do-log-e-bot√£o-para-atualizar&#34;&gt;Implementando a Leitura do Log e Bot√£o Para Atualizar&lt;/h4&gt;

&lt;p&gt;No c√≥digo abaixo foi adiciona a implementa√ß√£o que l√™ o arquivo de log atrav√©s do comando file() e depois exibe na tela, tamb√©m foi adicionado um formul√°rio com o bot√£o &amp;#8220;Atualizar&amp;#8221;, caso ocorra alguma falha na atualiza√ß√£o autom√°tica atrav√©s do webhook esse bot√£o pode ser utilizado para for√ßar essa atualiza√ß√£o e executar o nosso deploy.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
        &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else {
        ?&amp;gt;
            &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
                &amp;lt;input type=&#34;hidden&#34; name=&#34;token&#34; value=&#34;d41d8cd98f00b204e9800998ecf8427e&#34;&amp;gt;
                &amp;lt;input type=&#34;submit&#34; value=&#34;Atualizar&#34;&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;?php
        $texto = file(&#39;log.txt&#39;);
        foreach ($texto as $linha) {
            echo $linha;
        }
        }
        ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;adicionando-autentica√ß√£o&#34;&gt;Adicionando Autentica√ß√£o&lt;/h4&gt;

&lt;p&gt;Tudo funcionando, mas qualquer um pode entrar na nossa URL, visualizar os logs e clicar no bot√£o para atualizar o servidor.&lt;/p&gt;

&lt;p&gt;Ent√£o vou implementar uma autentica√ß√£o simples, iniciando uma sess√£o e usando a vari√°vel $senhaAcesso, ent√£o nossas regras seriam as seguintes:&lt;/p&gt;

&lt;p&gt;Se receber o token, faz a valida√ß√£o, se estiver correto, atualiza o nosso servidor&lt;/p&gt;

&lt;p&gt;Se receber a senhaAcesso, faz a valida√ß√£o se estiver correto, mostra o log e o bot√£o para atualizar&lt;/p&gt;

&lt;p&gt;Se n√£o receber o token e nem a senhaAcesso mostra um form solicitando a senha&lt;/p&gt;

&lt;p&gt;Nosso c√≥digo tem apenas 3 condi√ß√µes no if, eu preferi deixar assim pra ficar mais f√°cil de entender, as condi√ß√µes separadas para ficar mais f√°cil de entender:&lt;/p&gt;

&lt;pre&gt;if($tokenValido) {
            // Se o toquem for v√°lido
            // Executa o comando git pull para atualizar o servidor e grava o log
        } else if($_SESSION[&#39;usuarioValido&#39;]) {
            // Se o usu√°rio estiver logado mostra o log e o bot√£o para atualizar
        } else {
            //Se o usu√°rio n√£o estiver logado mostra o formul√°rio para logar
        }
&lt;/pre&gt;

&lt;p&gt;Abaixo o c√≥digo completo desta etapa:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
session_start();
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
$senhaAcesso = &#39;joaozonta&#39;;

if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;

if($_REQUEST[&#39;senhaAcesso&#39;] == $senhaAcesso &amp;&amp; empty($_SESSION[&#39;usuarioValido&#39;]))
    $_SESSION[&#39;usuarioValido&#39;] = true;

if($_REQUEST[&#39;sair&#39;])
    unset($_SESSION[&#39;usuarioValido&#39;]);
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;pre&amp;gt;
    &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else if($_SESSION[&#39;usuarioValido&#39;]) {
        ?&amp;gt;
        &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
            &amp;lt;input type=&#34;hidden&#34; name=&#34;token&#34; value=&#34;d41d8cd98f00b204e9800998ecf8427e&#34;&amp;gt;
            &amp;lt;input type=&#34;submit&#34; value=&#34;Atualizar&#34;&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;?php
        if($_SESSION[&#39;usuarioValido&#39;])
            echo &#39;&amp;lt;p&amp;gt;&amp;lt;a href=&#34;index.php?sair=true&#34;&amp;gt;Sair&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#39;;
            $texto = file(&#39;log.txt&#39;);
            foreach ($texto as $linha) {
                echo $linha;
            }
        } else {
        ?&amp;gt;
        &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type=&#34;text&#34; placeholder=&#34;Senha&#34; name=&#34;senhaAcesso&#34;&amp;gt; 
            &amp;lt;/div&amp;gt;
            &amp;lt;input type=&#34;submit&#34; value=&#34;Acessar Sistema&#34;&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;?php
        }
    ?&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h4&gt;

&lt;p&gt;De uma maneira muito simples voc√™ pode atualizar seu servidor sem depender de um sistema complexo de deploy e sem muitas configura√ß√µes.&lt;/p&gt;

&lt;p&gt;Voc√™ pode implementar muitas outras op√ß√µes para deixar o seu sistema cada vez mais completo, pode adicionar um bot√£o para limpar o log ou adicionar o log em um banco de dados. J√° imaginou mostrar um combo com os √∫ltimos commits realizados e voc√™ escolher qual desses commits voc√™ quer atualizar no servidor, podendo assim voltar e avan√ßar vers√µes.&lt;/p&gt;

&lt;p&gt;N√£o falei sobre banco de dados nesse artigo, acho que isso pode ser tratado em outro t√≥pico.&lt;/p&gt;

&lt;p&gt;Voc√™ pode ver o exemplo funcionando em &lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/&lt;/a&gt;, use a senha &amp;#8220;joaozonta&amp;#8221;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;No exemplo que esta no ar foram comentadas as linhas que fazem o deploy autom√°tico, est√° apenas simulando o funcionamento.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fique √° vontade para entrar em contato para qualquer d√∫vida, sugest√£o, cr√≠tica ou erro que encontrar nesse artigo.&lt;/p&gt;

&lt;p&gt;Jo√£o A. Zonta&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.joaozonta.com.br&#34;&gt;joaozonta.com.br&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/joaozontaweb&#34;&gt;@joaozontaweb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;mailto:joao@joaozonta.com.br&#34;&gt;joao@joaozonta.com.br&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tudo que voc√™ queria saber sobre Git e GitHub, mas tinha vergonha de perguntar</title>
      <link>https://tableless.github.io/hugo-public/tudo-que-voce-queria-saber-sobre-git-e-github-mas-tinha-vergonha-de-perguntar/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tudo-que-voce-queria-saber-sobre-git-e-github-mas-tinha-vergonha-de-perguntar/</guid>
      <description>

&lt;p&gt;Este artigo traz a voc√™ tudo que precisa saber para se tornar um desenvolvedor que possa dominar tanto o git, quanto o Github. Nosso objetivo √© trazer os conhecimentos necess√°rios para que voc√™ possa, a partir do zero, dominar os conceitos gerais do git, e usar o github para &amp;#8220;hospedar&amp;#8221; seus projetos pessoais e acompanhar outros projetos de seu interesse.&lt;/p&gt;

&lt;h2 id=&#34;o-que-√©-git&#34;&gt;O que √© git?&lt;/h2&gt;

&lt;p&gt;Git √© um sistema de controle de vers√£o de arquivos. Atrav√©s deles podemos&amp;nbsp;desenvolver projetos&amp;nbsp;na qual diversas pessoas podem contribuir simultaneamente no mesmo, editando e criando novos arquivos e permitindo que os mesmos possam existir sem o risco de suas altera√ß√µes serem sobrescritas.&lt;/p&gt;

&lt;p&gt;Se n√£o houver um sistema de vers√£o, imagine o caos entre duas pessoas abrindo o mesmo arquivo ao mesmo tempo. Uma das aplica√ß√µes do git √© justamente essa, permitir que um arquivo possa ser editado ao mesmo tempo por pessoas diferentes. Por mais complexo que isso seja, ele tenta manter tudo em ordem para evitar problemas para n√≥s desenvolvedores.&lt;/p&gt;

&lt;p&gt;Outro fator importante do git (e essa √© um dos seus diferenciais em rela√ß√£o ao svn &amp;#8211; caso vc o conhe√ßa) √© a possibilidade de criar, a qualquer momento, v√°rios &lt;code&gt;snapshots&lt;/code&gt; do seu projeto, ou como chamamos mais &amp;#8220;nerdmenete&amp;#8221;, branch. Suponha que o seu projeto seja um site html, e voc√™ deseja criar uma nova se√ß√£o no seu c√≥digo HTML, mas naquele momento voc√™ n√£o deseja que estas altera√ß√µes estejam dispon√≠veis para mais ningu√©m, s√≥ para voc√™. Isso √©, voc√™ quer alterar o projeto (incluindo v√°rios arquivos nele), mas ainda n√£o quer que isso seja tratado como &amp;#8220;oficial&amp;#8221; para outras pessoas, ent√£o vc cria um branch (como se fosse uma c√≥pia espelho) e ent√£o trabalha apenas nesse branch, at√© acertar todos os detalhes dele. Ap√≥s isso, voc√™ pode fazer um merge de volta do seu branch at√© o projeto original. Veja bem, se tudo isso que voc√™ leu s√≥ ajudou a te confundir mais &amp;#8211; respire fundo &amp;#8211; e siga em frente. Com exemplos tudo fica melhor.&lt;/p&gt;

&lt;h2 id=&#34;o-que-√©-github&#34;&gt;O que √© github?&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; √© um servi√ßo web que oferece diversas funcionalidades extras aplicadas ao git. Resumindo, voc√™ poder√° usar gratuitamente o github para hospedar seus projetos pessoais. Al√©m disso, quase todos os projetos/frameworks/bibliotecas sobre desenvolvimento open source est√£o no github, e voc√™ pode acompanh√°-los atrav√©s de novas vers√µes, contribuir informando bugs ou at√© mesmo enviando c√≥digo e corre√ß√µes. Se voc√™ √© desenvolvedor e ainda n√£o tem github, voc√™ est√° atrasado e essa √© a hora de correr atr√°s do preju√≠zo.&lt;/p&gt;

&lt;h2 id=&#34;instalando-git&#34;&gt;Instalando git&lt;/h2&gt;

&lt;p&gt;O git √© um programa que pode ser instalado &lt;a href=&#34;http://git-scm.com/download/win&#34; target=&#34;_blank&#34;&gt;neste link&lt;/a&gt; para Windows, &lt;a href=&#34;http://git-scm.com/download/mac&#34; target=&#34;_blank&#34;&gt;neste&lt;/a&gt; para Mac, ou ent√£o atrav√©s do comando &lt;code&gt;sudo apt-get install git&lt;/code&gt; para plataformas Linux/Debian, como o Ubuntu. Se voc√™ usa uma VM na nuvem, como o &lt;a href=&#34;http://c9.io&#34; target=&#34;_blank&#34;&gt;cloud9&lt;/a&gt; ou &lt;a href=&#34;https://koding.com/&#34; target=&#34;_blank&#34;&gt;koding&lt;/a&gt;, o git j√° estar√° dispon√≠vel em sua linha de comando.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nossa metodologia √© fazer com que voc√™ aprenda git j√° utilizando o github, ent√£o vamos a sua configura√ß√£o!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;criando-a-conta-no-github&#34;&gt;Criando a conta no GitHub&lt;/h2&gt;

&lt;p&gt;O github n√£o possui instala√ß√£o, ele √© um servi√ßo, e caso voc√™ n√£o tenha uma conta, chegou a hora de cri√°-la, &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;neste link&lt;/a&gt;. Ap√≥s criar a conta, voc√™ ver√° um bot√£o verde &lt;code&gt;+New Repository&lt;/code&gt; na qual poder√° criar um reposit√≥rio de acordo com a tela a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github.png&#34; alt=&#34;github&#34; width=&#34;750&#34; height=&#34;477&#34; class=&#34;alignleft size-full wp-image-51160&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nesta imagem estamos criando um reposit√≥rio cujo nome √© &lt;code&gt;site&lt;/code&gt;, de dom√≠nio p√∫blico (podem ser criados reps privados pagando uma mensalidade), e com o arquivo &lt;code&gt;README.md&lt;/code&gt; embutido, que cont√©m uma descri√ß√£o do seu projeto. Para que possamos come√ßar a entender como o git funciona, √© fundamental criar um rep como este para os nossos testes.&lt;/p&gt;

&lt;p&gt;Ap√≥s a cria√ß√£o do reposit√≥rio, ele estar√° dispon√≠vel no endere√ßo &lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/site&lt;/code&gt;, onde &lt;code&gt;username&lt;/code&gt;√© o login que voc√™ usou para se cadastrar. Acessando esta url temos a seguinte resposta:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_site.png&#34; alt=&#34;github_site&#34; width=&#34;1051&#34; height=&#34;780&#34; class=&#34;alignleft size-full wp-image-51163&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Temos muitas informa√ß√µes nesta tela, pois ela √© a tela principal do seu projeto. Explicaremos algumas informa√ß√µes ao longo deste artigo, por enquanto repare apenas no bot√£o &lt;code&gt;HTTPs Clone Url&lt;/code&gt; na parte inferior √† direta. Esta URl ser√° necess√°ria para que possamos &amp;#8220;clonar&amp;#8221; este projeto em nosso ambiente de estudo (sua m√°quina windows, mac, linux ou a vm). Clique no bot√£o de copiar URL e perceba que a seguinte URL est√° na √°rea de transfer√™ncia: &lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/site.git&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-git&#34;&gt;Configurando o git&lt;/h2&gt;

&lt;p&gt;Existem 2 pequenos passos para configurar o seu GIT para ter um acesso mais simplificado ao github. Aqui estaremos estabelecendo que, sempre que necessitar, voc√™ ir√° fornecer o seu login e senha ao GitHub. Existem meios para salvar a senha em local seguro, mas vamos pular esta etapa. Para abrir um terminal GIT no Windows, basta criar uma pasta no seu sistema e, nela, clicar com o bot√£o direito do mouse e escolher &lt;code&gt;Git Bash Here&lt;/code&gt;. Em sistemas mac/linux voc√™ j√° est√° acostumado a usar o terminal/console, o git estar√° l√° dispon√≠vel. Neste artigo estaremos utilizando a m√°quina virtual cloud9, que voc√™ pode aprender a us√°-la neste &lt;a href=&#34;http://tableless.com.br/programando-na-nuvem-com-o-cloud9/&#34; target=&#34;_blank&#34;&gt;artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ent√£o, com o seu terminal git aberto, vamos digitar:&lt;/p&gt;

&lt;pre&gt;$ git config --global user.name &#34;YOUR NAME&#34;
$ git config --global user.email &#34;YOUR EMAIL ADDRESS&#34;
&lt;/pre&gt;

&lt;p&gt;Estas configura√ß√µes ficam alocadas no arquivo &lt;code&gt;~/.gitconfig&lt;/code&gt;, onde o ~ √© o seu diret√≥rio home. No Windows, ele fica em &lt;code&gt;c:\Usuarios\&amp;lt;username&amp;gt;\.gitconfig&lt;/code&gt;. Veja a figura a seguir com a minha configura√ß√£o no cloud9.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_config.png&#34; alt=&#34;git_config&#34; width=&#34;300&#34; height=&#34;146&#34; class=&#34;alignleft size-medium wp-image-51167&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;vamos-clonar&#34;&gt;Vamos clonar!&lt;/h2&gt;

&lt;p&gt;Ent√£o o que temos at√© agora √© o git configurado para utilizar o github e o projeto no github criado. Precisamos trazer este projeto para o nosso git, e este processo se chama &lt;code&gt;clonar&lt;/code&gt;. Ent√£o, quando voc√™ quiser come√ßar um projeto utilizando git, voc√™ cria ele no github e clona na sua m√°quina. O comando para clonar o projeto √© &lt;code&gt;git clone &amp;quot;url&amp;quot;&lt;/code&gt;, veja:&lt;/p&gt;

&lt;pre&gt;git clone https://github.com/&amp;lt;username&amp;gt;/site.git
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_clone.png&#34; alt=&#34;git_clone&#34; width=&#34;720&#34; height=&#34;223&#34; class=&#34;alignleft size-full wp-image-51172&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perceba que, ao fazer o git clone, o projeto √© baixado para a sua m√°quina, e uma pasta com o nome do projeto √© criada.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quer dizer que qualquer pessoa pode baixar o meu projeto? Sim, isso √© natural, j√° que o seu reposit√≥rio est√° p√∫blico. Qualquer um pode clonar ele para si, mas eles n√£o podem alterar os seus arquivos, isso n√£o vai acontecer, exceto que voc√™ permita.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;comandos-iniciais-do-git&#34;&gt;Comandos iniciais do git&lt;/h2&gt;

&lt;p&gt;Com o reposit√≥rio na sua m√°quina, vamos aprender 4 comandos iniciais que far√£o parte da sua vida a partir de agora:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add &amp;lt;arquivos...&amp;gt;&lt;/code&gt; Este comando adiciona o(s) arquivo(s) em um lugar que chamamos de INDEX, que funciona como uma √°rea do git no qual os arquivos possam ser enviados ao Github. √â importante saber que ADD n√£o est√° adicionando um arquivo novo ao reposit√≥rio, mas sim dizendo que o arquivo (sendo novo ou n√£o) est√° sendo preparado para entrar na pr√≥xima revis√£o do reposit√≥rio.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;coment√°rio qualquer&amp;quot;&lt;/code&gt; Este comando realiza o que chamamos de &amp;#8220;commit&amp;#8221;, que significa pegar todos os arquivos que est√£o naquele lugar INDEX que o comando &lt;code&gt;add&lt;/code&gt; adicionou e criar uma revis√£o com um n√∫mero e um coment√°rio, que ser√° vista por todos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt; Push (empurrar) √© usado para publicar todos os seus commits para o github. Neste momento, ser√° pedido a sua senha.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; Exibe o status do seu reposit√≥rio atual &lt;/ul&gt;&lt;/p&gt;

&lt;h2 id=&#34;vamos-praticar&#34;&gt;Vamos praticar!&lt;/h2&gt;

&lt;p&gt;Chegou o momento de praticar um pouco o que vimos at√© agora, e com bastante calma para que voc√™ possa entender cada passo. Ap√≥s clonar o seu projeto, crie o arquivo &lt;code&gt;index.html&lt;/code&gt; na pasta site que √© o seu reposit√≥rio git. Ap√≥s criar o arquivo, execute o comando &lt;code&gt;git status&lt;/code&gt;. A resposta √© semelhante a figura a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_touch_index.png&#34; alt=&#34;git_touch_index&#34; width=&#34;628&#34; height=&#34;284&#34; class=&#34;alignleft size-full wp-image-51179&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ou seja, o comando &lt;code&gt;git status&lt;/code&gt; nos trouxe v√°rias informa√ß√µes, que iremos ignorar a princ√≠pio, exceto pelo &lt;code&gt;Untracked files&lt;/code&gt;, dizendo que existe um arquivo que n√£o est√° sendo &amp;#8220;mapeado&amp;#8221; pelo git. Para preparar este arquivo para o seu versionamento, usamos o comando &lt;code&gt;git add&lt;/code&gt;, veja:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_add.png&#34; alt=&#34;git_add&#34; width=&#34;600&#34; height=&#34;272&#34; class=&#34;alignleft size-full wp-image-51180&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora temos o nosso arquivo index.html no INDEX do reposit√≥rio, ou se voc√™ quiser pensar: &amp;#8220;preparado para um commit&amp;#8221;. Para commitar este arquivo, usamos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_commit.png&#34; alt=&#34;git_commit&#34; width=&#34;760&#34; height=&#34;248&#34; class=&#34;alignleft size-full wp-image-51182&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ap√≥s &amp;#8220;commitar&amp;#8221; o arquivo, ele j√° est√° presente no nosso reposit√≥rio local, tanto que realizamos o comando &lt;code&gt;git status&lt;/code&gt; novamente e ele retornou que n√£o havia nada de novo no projeto. Perceba agora que, mesmo recarregando o projeto no github, nada muda. Ou seja, estas mudan√ßas at√© agora foram locais, voc√™ pode realizar v√°rias opera√ß√µes antes de public√°-las no github. Para publicar, usamos o comando &lt;code&gt;git push&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_push.png&#34; alt=&#34;git_push&#34; width=&#34;600&#34; height=&#34;255&#34; class=&#34;alignleft size-full wp-image-51184&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ap√≥s realizar o git push podemos ver no site github as mudan√ßas realizadas no projeto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_site2.png&#34; alt=&#34;github_site2&#34; width=&#34;812&#34; height=&#34;552&#34; class=&#34;alignleft size-full wp-image-51185&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Desta forma, aprendemos os 4 comandos mais b√°sicos do git, e com ele podemos come√ßar a compreender como funciona o processo de versionamento de arquivos com git e github.&lt;/p&gt;

&lt;h3 id=&#34;errei-a-mensagem-do-commit-como-arrumo&#34;&gt;Errei a mensagem do commit, como arrumo?&lt;/h3&gt;

&lt;p&gt;Imagine que voc√™ tenha errado a mensagem que escreveu no commit ou simplesmente queira melhorar a descri√ß√£o do seu trabalho. Voc√™ j√° comitou a mensagem mas ainda n√£o fez o push das suas modifica√ß√µes para o servidor. Nesse caso voc√™ usa a flag &lt;code&gt;--amend&lt;/code&gt;. Fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ git commit --amend&lt;/pre&gt;
    

&lt;p&gt;O &lt;code&gt;git commit --amend&lt;/code&gt; modifica a mensagem do commit mais recente, ou seja, o √∫ltimo commit feito por voc√™ no projeto. Al√©m de voc√™ mudar a mensagem do commit, voc√™ consegue adicionar arquivos que voc√™ se esqueceu ou retirar arquivos comitados por engano. O git cria um commit totalmente novo e corrigido.&lt;/p&gt;

&lt;h2 id=&#34;cad√™-o-git-pull&#34;&gt;Cad√™ o git pull?&lt;/h2&gt;

&lt;p&gt;Ainda existe um comando importante neste processo, que √© o &lt;code&gt;git pull&lt;/code&gt;. Ele √© usado para trazer todas as modifica√ß√µes que est√£o no github para o seu projeto local. Isso √© vital quando existem projetos mantidos por mais de uma pessoa, ou se voc√™ possui duas m√°quinas e precisa manter a sincronia entre elas. Supondo que voc√™ possui uma m√°quina no trabalho e outra em casa. Ambas tem o reposit√≥rio local ligado ao github. Quando voc√™ executar um &lt;code&gt;git push&lt;/code&gt; em uma das m√°quinas, ter√° que realizar um &lt;code&gt;git pull&lt;/code&gt; na outra.&lt;/p&gt;

&lt;p&gt;Para exemplificar, vamos alterar o arquivo README.md diretamente no github. Isso √© poss√≠vel clicando no arquivo e depois clicando no √≠cone para edi√ß√£o, conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_edit.png&#34; alt=&#34;github_edit&#34; width=&#34;935&#34; height=&#34;356&#34; class=&#34;alignleft size-full wp-image-51241&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ap√≥s clicar em edit, adicione algum texto, forne√ßa uma mensagem de commit e clique no bot√£o &amp;#8220;Commit Changes&amp;#8221;. Com isso, uma nova revis√£o no seu projeto √© criada, mas como ela foi gerada no github, o seu projeto local est√° desatualizado. Para atualizar o seu projeto, use &lt;code&gt;git pull&lt;/code&gt;, e perceba que o arquivo README.md √© atualizado de acordo com a sua √∫ltima revis√£o, semelhante a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git-pull.png&#34; alt=&#34;git-pull&#34; width=&#34;520&#34; height=&#34;285&#34; class=&#34;alignleft size-full wp-image-51242&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;melhorando-o-conceito-do-comando-git-add&#34;&gt;Melhorando o conceito do comando git add&lt;/h2&gt;

&lt;p&gt;Possivelmente voc√™ imaginou que o comando &lt;code&gt;git add&lt;/code&gt; √© usado para novos arquivos, mas isso n√£o √© verdade. O comando &lt;code&gt;add&lt;/code&gt; √© usado para adicionar qualquer altera√ß√£o de arquivo ao INDEX do git, que √© uma √°rea especial onde os arquivos est√£o sendo preparados para o commit. Quando usamos &lt;code&gt;add&lt;/code&gt;, estamos dizendo que o arquivo estar√° adicionando ao pr√≥ximo commit, quando este for realizado. Isso √© necess√°rio porque nem sempre queremos que todos os arquivos que alteramos sejam comitados.&lt;/p&gt;

&lt;p&gt;Vamos a um exemplo simples, adicionando o seguinte c√≥digo no arquivo index.html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
    

&lt;p&gt;Ap√≥s salvar este modelo html, o comando git status ir√° apresentar:&lt;/p&gt;

&lt;pre&gt;modified:   index.html
&lt;/pre&gt;
    

&lt;p&gt;Para adicionar o arquivo e prepar√°-lo para o commit, usamos &lt;code&gt;git add index.html&lt;/code&gt;. Desta forma, ele est√° pronto para usarmos o comando &lt;code&gt;git commit&lt;/code&gt;, o que n√£o faremos agora. Antes disso, altere novamente o arquivo e adicione algum texto entre as tags body, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
Esse √© meu site
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
    

&lt;p&gt;Ap√≥s alterar o arquivo, temos a seguinte situa√ß√£o:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adicionamos o conte√∫do html no arquivo index.html&lt;/li&gt;
&lt;li&gt;Realizamos &lt;code&gt;git add index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Alteramos index.html e adicionamos o texto entre as tags body
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Neste momento, fa√ßa: &lt;code&gt;git commit -m &amp;quot;Altera√ß√£o no arquivo index.html&amp;quot;&lt;/code&gt;, e ap√≥s isso, fa√ßa: &lt;code&gt;git push&lt;/code&gt;. Analise agora no github se a sua altera√ß√£o na tag body est√° vis√≠vel. Ela n√£o estar√°. Mas porque isso aconteceu? Quando usamos o comando &lt;code&gt;git add&lt;/code&gt;, aquela altera√ß√£o no body ainda n√£o tinha sido escrita, ent√£o ela n√£o estar√° pronta at√© que voc√™ fa√ßa novamente o comando &lt;code&gt;git add&lt;/code&gt;. Em termos t√©cnicos, a segunda altera√ß√£o que fez ainda n√£o est√° na INDEX do reposit√≥rio. Como tarefa, fa√ßa novamente &lt;code&gt;git add index.html&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt; e &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;trabalhando-com-branches&#34;&gt;Trabalhando com branches&lt;/h2&gt;

&lt;p&gt;Branches e mergers sempre foram os pesadelos de qualquer gerenciador de vers√£o (ok, do svn&amp;#8230;). No git, o conceito de branch tornou-se algo muito simples e f√°cil de usar. Mas quando que temos que criar um branch? Imagine que o seu site est√° pronto, tudo funcionando perfeitamente, mas surge a necessidade de alterar algumas partes dele como forma de melhor√°-lo. Al√©m disso, voc√™ precisa manter estas altera√ß√µes tanto no computador de casa quanto do trabalho. Com isso temos um problema, se voc√™ come√ßa a alterar os arquivos em casa, para na metade da implementa√ß√£o, e precisa terminar no trabalho, como voc√™ iria comitar tudo pela metade e deixar o site incompleto?&lt;/p&gt;

&lt;p&gt;Para isso existe o conceito de branch, que √© justamente ramificar o seu projeto em 2, como se cada um deles fosse um reposit√≥rio, e depois junt√°-lo novamente. Voltando ao github, perceba o detalhe da imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/master.png&#34; alt=&#34;master&#34; width=&#34;821&#34; height=&#34;344&#34; class=&#34;alignleft size-full wp-image-51249&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sem saber, voc√™ j√° est√° em um branch, que chamamos de master. Perceba tamb√©m que, sempre que us√°vamos &lt;code&gt;git status&lt;/code&gt;, o nome do branch √© exibido, e sempre que comit√°vamos ou faz√≠amos o push, o mesmo aparecia. Ou seja, at√© este momento fizemos todas as altera√ß√µes no master. Voc√™ pode criar um branch no github ou em linha de comando. Inicialmente, vamos pelo github, criando o branch &amp;#8220;new_menu&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/new_branch.png&#34; alt=&#34;new_branch&#34; width=&#34;468&#34; height=&#34;328&#34; class=&#34;alignleft size-full wp-image-51250&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Criamos o branch new_menu, e para que possamos trabalhar nele, usamos o comando &lt;code&gt;git checkout new_menu&lt;/code&gt;. No primeiro momento que voc√™ cria este branch no github, √© necess√°rio realizar o comando &lt;code&gt;git pull&lt;/code&gt; no seu projeto para que ele possa saber que este branch foi criado. Ap√≥s realizar &lt;code&gt;git pull&lt;/code&gt;, pode-se alterar para o novo branch, conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/new_menu.png&#34; alt=&#34;new_menu&#34; width=&#34;604&#34; height=&#34;299&#34; class=&#34;alignleft size-full wp-image-51252&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Neste momento, estamos no branch &lt;code&gt;new_menu&lt;/code&gt;, e tudo que fizermos agora ser√° pertencente a ele. Caso haja necessidade de voltar ao branch master, basta realizar o comando &lt;code&gt;git checkout master&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aten√ß√£o, o comando &lt;code&gt;checkout&lt;/code&gt; do git n√£o √© o mesmo do checkout do svn, caso voc√™ o conhe√ßa. Ambos tem sentidos totalmente diferentes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ent√£o, entando no branch new_menu, vamos adicionar um simples menu na p√°gina:&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;ldquo;UTF-8&amp;rdquo;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;body&amp;gt;
    Meu Site&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;ul&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;index.html&amp;quot;&amp;amp;gt;Home&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;sobre.html&amp;quot;&amp;amp;gt;Sobre&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;contato.html&amp;quot;&amp;amp;gt;Contato&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
&amp;amp;lt;/ul&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ap√≥s criar o menu, certifique-se de estar no branch new_menu e fa√ßa o commit, conforme a figura a seguir.

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/new_menu_commit.png&amp;quot; alt=&amp;quot;new_menu_commit&amp;quot; width=&amp;quot;716&amp;quot; height=&amp;quot;536&amp;quot; class=&amp;quot;alignleft size-full wp-image-51254&amp;quot; /&amp;gt;

Agora temos algumas modifica√ß√µes no branch new\_menu, e podemos trabalhar nesse branch por quanto tempo for necess√°rio, j√° que o master est√° intacto. Aqui temos uma funcionalidade interessante, que se destaca em rela√ß√£o as outras ferramentas de versionamento. Suponha que, no meio do seu desenvolvimento do menu, surge a necessidade de resolver um bug cr√≠tico no master, algo como &amp;amp;#8220;est√° faltando o h1 no t√≠tulo do seu site&amp;amp;#8221;&amp;amp;#8230;. Ou seja, estamos no branch new\_menu e precisamos alterar o master. Para isso, use o comando `git checkout master`. Ao fazer isso, retornamos ao master e aquele menu que criamos n√£o est√° mais presente, conforme a figura a seguir.

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/back_to_master.png&amp;quot; alt=&amp;quot;back_to_master&amp;quot; width=&amp;quot;624&amp;quot; height=&amp;quot;686&amp;quot; class=&amp;quot;alignleft size-full wp-image-51255&amp;quot; /&amp;gt;

√â claro que n√£o perdemos o menu, ele est√° apenas no branch new_menu. Quando retornarmos a ele, voltar√°. Agora altere o t√≠tulo do site, incluindo o h1, veja:

&amp;lt;pre class=&amp;quot;lang-html&amp;quot;&amp;gt;&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;ldquo;UTF-8&amp;rdquo;&amp;gt;
    &amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Meu Site&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ap√≥s alterar, fa√ßa commit e o push! Veja:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/git_push2.png&amp;quot; alt=&amp;quot;git_push2&amp;quot; width=&amp;quot;687&amp;quot; height=&amp;quot;529&amp;quot; class=&amp;quot;alignleft size-full wp-image-51256&amp;quot; /&amp;gt;

Agora que resolvemos o problema do t√≠tulo, podemos voltar ao new_menu: `git checkout new_menu`. Ap√≥s realizar este comando, temos o menu de volta no arquivo index.html, mas veja que o t√≠tulo n√£o possui a tag H1. Isso acontece que estamos em outro branch. Tudo que acontece no master, fica no master. Tudo que acontece no new\_menu, fica no new\_menu

## Merge com conflitos

Se desejar trazer o t√≠tulo do master para o new_menu, devemos fazer uma opera√ß√£o chamada `merge`, que ir√° juntar um c√≥digo no outro. Ent√£o, estando no branch new_menu, e querendo trazer uma altera√ß√£o do master para este branch, precisamos realizar o seguinte comando: `git merge master`. Caso existam altera√ß√µes nas mesmas linhas entre mesmos arquivos, um conflito ser√° gerado, como no exemplo a seguir:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/conflict.png&amp;quot; alt=&amp;quot;conflict&amp;quot; width=&amp;quot;595&amp;quot; height=&amp;quot;616&amp;quot; class=&amp;quot;alignleft size-full wp-image-51259&amp;quot; /&amp;gt;

Este √© um exemplo de conflito que podo ocorrer quando realizamos um merge, indicado em `1`. Perceba que o c√≥digo html possui uma defini√ß√£o entre dois blocos, o primeiro, em `2` mostra como √© o c√≥digo do branch new_menu, e o segundo bloco, em `3`, mostra como √© o c√≥digo no branch master. Edite o arquivo repassando para a seguinte forma:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge2.png&amp;quot; alt=&amp;quot;merge2&amp;quot; width=&amp;quot;578&amp;quot; height=&amp;quot;613&amp;quot; class=&amp;quot;alignleft size-full wp-image-51260&amp;quot; /&amp;gt;

Ou seja, ajustamos os dois blocos, como se fosse um merge manual. Ap√≥s resolver o conflito, vamos prepar√°-lo para o commit no branch new_menu, com o comando `git add`. Veja:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge3.png&amp;quot; alt=&amp;quot;merge3&amp;quot; width=&amp;quot;779&amp;quot; height=&amp;quot;105&amp;quot; class=&amp;quot;alignleft size-full wp-image-51261&amp;quot; /&amp;gt;

Ou seja, resolvemos o conflito &amp;amp;#8220;na m√£o&amp;amp;#8221; e depois comitamos normalmente.

## Merge sem conflitos

Quando n√£o alteremos a mesma linha de um arquivo em branches diferentes, conseguimos realizar um merge sem ocasionar conflitos. Isso pode ser notado ao trazermos o menu do branch new_menu para o master, da seguinte forma:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge4.png&amp;quot; alt=&amp;quot;merge4&amp;quot; width=&amp;quot;585&amp;quot; height=&amp;quot;652&amp;quot; class=&amp;quot;alignleft size-full wp-image-51262&amp;quot; /&amp;gt;

Se n√£o houver conflitos, basta realizar um commit normal para confirmar o merge.

## Vendo branches e merges

O github possui uma ferramenta gr√°fica para exibir os branches e merges do seu projeto. Clique no √≠cone em forma de gr√°fico no menu √† direita do site e clique na aba Network, para se ter um resultado semelhante a figura a seguir:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/graph.png&amp;quot; alt=&amp;quot;graph&amp;quot; width=&amp;quot;1027&amp;quot; height=&amp;quot;446&amp;quot; class=&amp;quot;alignleft size-full wp-image-51265&amp;quot; /&amp;gt;

## Lendo mais

Voc√™ pode ler mais sobre git e entender mais sobre controles de vers√£o, nesses artigos do Tableless:

  * &amp;lt;a href=&amp;quot;http://tableless.com.br/alguns-comandos-git/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Comandos Iniciais do Git&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/slides-devs-10-git/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Apresenta√ß√µes sobre GIT&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/iniciando-no-git-parte-1/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Iniciando com GIT &amp;amp;#8211; Parte 1&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/iniciando-no-git-parte-2/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Iniciando com GIT &amp;amp;#8211; Parte 2&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/git-com-interface-grafica/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git com Interface Gr√°fica&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>