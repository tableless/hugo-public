<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Destaques on Tableless</title>
    <link>http://tableless.com.br/categories/destaques/index.xml</link>
    <description>Recent content in Destaques on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/categories/destaques/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>O fim da profissão front-end</title>
      <link>http://tableless.com.br/carreira-de-front-end-vai-morrer/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/carreira-de-front-end-vai-morrer/</guid>
      <description>

&lt;p&gt;O processo de desenvolvimento web pode se dividir em três categorias: design, front-end e back-end. Na minha opinião, a categoria que tem mais processos manuais e repetitivos é sem duvida o front-end.&lt;/p&gt;

&lt;p&gt;Pare pra pensar: o core do trabalho do front-end se resume em duas partes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;implementação do layout&lt;/strong&gt;: produção da primeira camada de código, onde replicamos o layout criado em algum programa gráfico, para código estático em HTML, CSS e JS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;integração com API&lt;/strong&gt;: depois (ou junto, tanto faz) de feito o código estático, a interface é integrada com a API, que geralmente carrega boa parte da lógica, já que essa mesma API é usada para alimentar outras plataformas como mobile, robôs etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As outras &amp;#8220;responsabilidades&amp;#8221; que orbitam em volta do front-end como acessibilidade, SEO, performance, compatibilidade entre browsers, código semântico, entre outras coisas que você pode julgar serem de responsabilidade de um front-end &lt;strong&gt;são um mero apetrecho&lt;/strong&gt;. Elas podem existir ou não em um projeto. Mas um projeto não sobrevive sem o código front-end do layout e sem o conteúdo integrado à interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Um observação: acessibilidade é algo que as máquinas podem fazer muito melhor que um ser humano. Embora eu tenha colocado como algo que possa existir ou não em um projeto, é importante demais que você faça um esforço para que todos os seus projetos sejam acessíveis. Eu sei que isso não é a realidade até hoje no mercado e provavelmente nunca será até que esse processo seja automatizado.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Existem uma série de tarefas manuais que nós delegamos para ferramentas criadas afim de economizar parte do nosso tempo evitando a execução de tarefas repetitivas, automatizando o workflow do front-end. Só para citar algumas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pre-processadores CSS:&lt;/strong&gt; Sass, Less, Stylus&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task runners:&lt;/strong&gt; Gulp, Grunt , Make, NPM Scripts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scaffolding:&lt;/strong&gt; Yeoman, Slush&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependências/Module Bundles:&lt;/strong&gt; Bower, NPM, Yarn, Webpack, Duo, RequireJS, Browserify, JSPM, Rollup&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SPA/Libraries/Frameworks:&lt;/strong&gt; React, Angular, Vue.js, Backbone, EmberJS, todomvc, Polymer, Lodash, Aurelia, MeteorJS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Frameworks/Libraries:&lt;/strong&gt; SemanticUI, Bootstrap, Foundation, UiKit, YUI, Susy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JS Test&lt;/strong&gt;: Mocha, Jasmine, QUnit, Ava, Tape, Jest&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JS Templates:&lt;/strong&gt; Underscore, Mustache, Handlebars, DoT, Dust, EJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mas mesmo com todas essas ferramentas, o core da responsabilidade de um front-end ainda continua sendo &lt;strong&gt;implementar layout original&lt;/strong&gt; e &lt;strong&gt;integrar a interface com o back-end&lt;/strong&gt;. Você ainda continua &lt;strong&gt;replicando&lt;/strong&gt; o layout que alguém passou dias desenhando e integra o conteúdo que está numa API, que outra pessoa criou. Seu dia se resume em alternar entre as janelas do Sublime / Sketch / Browser / Sublime / API / Browser / Sublime.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Automation isn&amp;#8217;t about being lazy. It&amp;#8217;s about being efficient.&amp;#8221; &amp;#8212; Addy Osmani&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esse processo se torna tedioso e a lista de requisitos para tentar tornar o trabalho de front-end eficiente só aumenta. Toda tarefa mecânica, repetitiva e manual tende a ser automatizada e na minha opinião, em pouco tempo, &lt;strong&gt;não vamos precisar de alguém executando o trabalho de front-end de ponta a ponta&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Okay, respira. Isso é a minha opinião. Dado que o front-end é a parte mais operacional de todo o processo, mais cedo ou mais tarde todo o trabalho executado no front-end vai ser automatizado. A parte mais difícil são essas duas tarefas que nós fazemos desde os primórdios. Contudo, elas já podem estar com seus dias contados.&lt;/p&gt;

&lt;h2 id=&#34;trabalhando-com-dados-reais-direto-no-design&#34;&gt;Trabalhando com dados reais direto no Design&lt;/h2&gt;

&lt;p&gt;Você pode não ser designer, mas há uma premissa no mundo dos designers que diz que &lt;strong&gt;você deve trabalhar sempre com conteúdo real&lt;/strong&gt;. Isso quer dizer que entregar um layout com texto em &lt;em&gt;Lorem Ipsum Dolor&lt;/em&gt; é coisa de designer júnior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;If your site or application requires data input, enter real and relevant words and type the text, don’t just paste it in from another source.&amp;#8221; &amp;#8212; Jason Fried&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A ideia é que você crie um layout da forma mais fiel possível usando os termos, palavras, nomes, datas etc, afim de chegar mais perto da experiência do usuário.&lt;/p&gt;

&lt;p&gt;Atualmente a maioria dos programas visuais utilizados para criar layouts para web tem alguma feature ou plugin que permite a integração com alguma fonte de dados que contenha o conteúdo real.&lt;/p&gt;

&lt;p&gt;Por exemplo o Sketch, que é o programa de criação visual mais querido do momento, conta com plugins que permitem a integração direta entre API e layout. Veja por exemplo o vídeo abaixo demonstrando a utilização do plugin Craft (também disponível para Photoshop):&lt;/p&gt;

&lt;p&gt;Ou essa demonstração que usa a API do Stackoverflow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Em pouco tempo, não vamos precisar de alguém executando o trabalho de front-end de ponta a ponta.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O ponto aqui é: nós só precisamos criar o layout uma vez, usando o programa desejado (Sketch/Photoshop/Figma/Adobe XD etc) e pronto. Não precisamos de uma pessoa para refazer esse layout com HTML/CSS/JS de forma alguma. Isso nos leva para uma segunda discussão: mesmo com o design pronto, usando dados reais de uma API, nós ainda precisamos que ele seja acessível pelos browsers. Como resolvemos isso?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Obs.: E aquele movimento do &amp;#8220;Design in the Browser&amp;#8221;? Esse é um movimento criado exatamente para evitar o trabalho de produzir duas vezes o mesmo layout. Mas é MUITO melhor fazer um design usando um programa visual do que escrever direto no código. IMHO.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;código-bonito-não-é-importante&#34;&gt;Código bonito não é importante&lt;/h2&gt;

&lt;p&gt;Desde sempre os front-ends escrotizavam o código que era gerado automaticamente por programas como o Dreamweaver. Eles tinham uma razão pra isso: o código era completamente horrível. Era um tempo onde a conexão com a internet era precária e tudo o que pudéssemos fazer para melhorar o carregamento do site, nós fazíamos. O código gerado por programas Wysiwyg tinha vários problemas: era difícil de ler, não havia semântica alguma, continha código inútil e muitas vezes não era compatível com todos os browsers. Tudo isso fazia com que o código limpo, semântico, enxuto e acessível tivesse um valor inestimável.&lt;/p&gt;

&lt;p&gt;Código limpo era sinônimo de bom ranking no Google, boa compatibilidade entre os browsers, performance de carregamento garantida, produtividade entre os membros do time por causa da legibilidade do código, facilidade de manutenção etc etc etc.&lt;/p&gt;

&lt;p&gt;Hoje, boa parte desses problemas foram resolvidos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;os browsers tem uma ótima complacência com os padrões web, extinguindo a maioria dos problemas de compatibilidade de layout;&lt;/li&gt;
&lt;li&gt;a performance é atacada em várias frentes: processo de build dos assets, tecnologias como HTTP/2 e até a evolução da conexão que fica mais rápida a cada ano;&lt;/li&gt;
&lt;li&gt;a manutenção e a legibilidade do código HTML/CSS não é mais um problema sério, já que o HTML é facilmente escrito usando poucas tags e o CSS tem os pré-processadores, que auxiliam muito na hora de definir padrões, além das boas práticas;&lt;/li&gt;
&lt;li&gt;o JS está bem assessorado por frameworks, libraries e uma série de boas práticas que se responsabilizam pela parte pesada do trabalho, deixando pouca margem de erro para os devs;&lt;/li&gt;
&lt;li&gt;e o mais importante para mim é que a semântica não está mais no HTML. Desde a vinda de tecnologias com o JSON-LD, a semântica não está mais atrelada ao código HTML e isso é ótimo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu sei que mesmo que grande parte da responsabilidade fique na mão dos frameworks, bibliotecas e ferramentas, o dev tem grandes chances de fazer merda com o pedaço de código que ele cuida. Não olha pro seu amiguinho do lado, coitado&amp;#8230; Todos nós cometemos erros&amp;#8230; uns mais, outros menos.&lt;/p&gt;

&lt;p&gt;Mas entenda uma coisa: &lt;strong&gt;código bonito, não é mais algo importante&lt;/strong&gt;. As ferramentas que nos auxiliam hoje para buildar os assets podem ser usadas por programas/robôs ao criar automaticamente código HTML/CSS/JS a partir de layouts produzidos em programas como Sketch. Veja por exemplo &lt;a href=&#34;https://github.com/sskyy/blade&#34;&gt;esse plugin&lt;/a&gt; que não é mais atualizado desde 2015 já tentava automatizar a exportação de código no Sketch. O cara estava tentando fazer código HTML a partir do layout desenhado no Sketch versão 3. Hoje o Sketch está na versão 42. E sabe de uma coisa: na versão 43 o Sketch está abrindo o código dos seus arquivos em formato JSON. O que nos leva para o próximo assunto.&lt;/p&gt;

&lt;h3 id=&#34;automatização-do-design&#34;&gt;Automatização do Design&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;We have a new file format which is more compact, and enables more powerful integrations for third-party developers. &amp;#8212; &lt;a href=&#34;https://rink.hockeyapp.net/apps/0172d48cceec171249a8d850fb16276b&#34;&gt;Sketch Team&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Isso quer dizer que o Sketch se transformará em uma plataforma de desenvolvimento. Abrindo o código dos seus arquivos, qualquer um conseguirá ler esses arquivos e partir daí criar &lt;strong&gt;qualquer coisa&lt;/strong&gt;. Quanto tempo para alguém criar um plugin que lê o arquivo do Sketch em formato JSON e &lt;strong&gt;gera automaticamente HTML/CSS/JS&lt;/strong&gt; a partir de um layout Sketch?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Computadores evoluem. Se os princípios mudassem não haveria base para a evolução. &amp;#8211; Caio Vaccaro&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, mas espera aí: mesmo antes desse formato novo de arquivo do Sketch, já existia algumas ferramentas que talvez você não conhecia como o &lt;a href=&#34;https://protoship.io/tools/teleport.html&#34;&gt;Teleport&lt;/a&gt;, que converte &lt;strong&gt;qualquer website&lt;/strong&gt; em um artboard do Sketch. E também o &lt;a href=&#34;https://protoship.io/tools/uipad.html&#34;&gt;UIPad&lt;/a&gt;, que converte layout do Sketch em HTML/CSS e React! Se liga:&lt;/p&gt;

&lt;p&gt;Essa tendência já estava sendo desenhada há tempos. É a coisa mais inteligente de se fazer. Você pode fazer coisas mais importantes do que ficar sentado na frente do computador alternando entre browser, layout, browser, layout.&lt;/p&gt;

&lt;p&gt;Okay: nós temos um design que se integra com a API, puxando dados reais do sistema. Nós temos um programa que design que exporta o layout para código HTML/CSS/JS pronto para ser usado. Mas ainda estamos usando código HTML/CSS/JS como antigamente. Há mais um passo que pode ser melhorado.&lt;/p&gt;

&lt;h3 id=&#34;webassembly-wasm&#34;&gt;WebAssembly (Wasm)&lt;/h3&gt;

&lt;p&gt;Outro ponto importante, que não tem nada definido ainda, mas que pode começar a fazer todo sentido é toda aquela &lt;a href=&#34;https://tableless.com.br/o-webassembly-vem-ai/&#34;&gt;história do WebAssembly&lt;/a&gt;, que é um novo formato binário criado pelo Google Microsoft, Mozilla e vários outros.&lt;/p&gt;

&lt;p&gt;O formato de código binário do WebAssembly pode ser decodificado muito mais rápido do que o JavaScript é parseado. Isso realmente traz para a Web a experiência de programas nativos, principalmente no mobile.&lt;/p&gt;

&lt;p&gt;O legal é que outras linguagens podem ser compiladas para WebAssembly. Hoje o projeto está um pouco mais focado em C/C++, mas com certeza outras linguagens serão abrangidas. O objetivo principal do WebAssembly é a performance.&lt;/p&gt;

&lt;p&gt;Uma preocupação que surge no ar é que isso cheira monopólio. Lembra do Flash? Querendo ou não ele era uma alternativa de criar algo nativo na Web. Mas a graça é que:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;WebAssembly não substitui o JavaScript. Tudo tem retrocompatibilidade, tudo será executado no mesmo universo que o JS e a segurança terá as mesmas restrições que o JS;&lt;/li&gt;
&lt;li&gt;Não é só uma empresa ou grupo que está por trás do Wasm, mas várias como Firefox, Chromium, Edge e Webkit;&lt;/li&gt;
&lt;li&gt;Para rodar WebAssembly não será necessário rodar plugins de terceiros, já que os motores dos browsers serão totalmente compatíveis;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Está entendendo por que buscar por um código limpo (como conhecemos hoje) não faz mais tanto sentido?&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Mais cedo ou mais tarde a profissão de front-end como nós conhecemos até hoje &lt;strong&gt;vai deixar de existir&lt;/strong&gt;. Você que já é velho na área, talvez nem precise se preocupar, porque eu não acho que isso vai acontecer agora, mas você que acabou de começar, é melhor pensar duas vezes no futuro da sua carreira.&lt;/p&gt;

&lt;p&gt;Eu tenho certeza que a área de back-end também pode passar por esse processo, embora seja muito mais difícil de acontecer. E eu também acho que vai demorar muito (se chegar a acontecer) a automatização da parte criativa responsável pelo design dos layouts de produtos e websites.&lt;/p&gt;

&lt;p&gt;Eu não chuto em quanto tempo isso pode acontecer ou se vai acontecer. É mais um chute meu do que qualquer outra. Quero só abrir para discussão esse assunto. Mas até ontem &lt;a href=&#34;https://www.wired.com/2016/10/ubers-self-driving-truck-makes-first-delivery-50000-beers/&#34;&gt;carros e caminhões autônomos&lt;/a&gt; eram coisa de filme.&lt;/p&gt;

&lt;p&gt;Mas com certeza existem vários pontos ainda a serem resolvidos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A automatização de sites gigantes de conteúdo vai ocorrer?&lt;/li&gt;
&lt;li&gt;E sistemas/produtos, como vamos fazer?&lt;/li&gt;
&lt;li&gt;Coloque aqui sua dúvida maluca&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Minha outra aposta é sobre a profissão de UX, que vai desaparecer não porque suas responsabilidades serão automatizadas, mas por se tornar obsoleto mesmo. Esse é assunto para um outro artigo, mas se quiser pensar sobre isso agora, comece ouvindo &lt;a href=&#34;http://movimentoux.com/work/felipememoria/&#34;&gt;esse capítulo do podcast do Movimento UX&lt;/a&gt; com o &lt;a href=&#34;http://www.fmemoria.com.br/&#34;&gt;Felipe Memória&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;para-ler-mais&#34;&gt;Para ler mais&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dados reais no design&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shopify.com/partners/blog/91010886-3-easy-steps-for-working-with-realistic-data-in-sketch-using-json&#34;&gt;3 Easy Steps for Working with Realistic Data in Sketch Using JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@markjenkins/designing-with-data-7f6bcd907f0a#.95haya5yq&#34;&gt;Designing with Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.framer.com/prototype-with-real-data-in-framer-from-json-to-multi-device-and-internet-of-things-6eb1ae8b8325#.fo9b8i4gz&#34;&gt;Prototype with real data in Framer, from JSON to multi-device and internet of things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@anirudhs/project-comet-designing-with-real-data-959beccb5c1a#.v6khfndrh&#34;&gt;Adobe XD: Designing with Real Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sobre não usar texto fake em layouts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2010/01/lorem-ipsum-killing-designs/&#34;&gt;Lorem Ipsum is Killing Your Designs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thenextweb.com/dd/2015/04/09/why-designers-should-never-use-fake-text/#.tnw_zjSSHkxh&#34;&gt;Why designers should never use fake text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.creativebloq.com/design/stop-using-lorem-ipsum-7116907&#34;&gt;Stop using Lorem Ipsum!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://signalvnoise.com/archives/001083.php&#34;&gt;&amp;#8220;Getting Real&amp;#8221; design tip: Just say no to Lorem Ipsum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WebAssembly&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webassembly.org/docs/faq/&#34;&gt;FAQ do site WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tableless.com.br/o-webassembly-vem-ai/&#34;&gt;WebAssembly – a web compilada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/&#34;&gt;Google, Microsoft, Mozilla And Others Team Up To Launch WebAssembly, A New Binary Format For The Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaydson.com/webassembly-e-o-futuro-da-web/&#34;&gt;WebAssembly e o futuro da Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brendaneich.com/2015/06/from-asm-js-to-webassembly&#34;&gt;From asm.js to webassembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/&#34;&gt;The Web is getting its bytecode: WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sobre o cenário das ferramentas de front-end&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://frontend.directory/&#34;&gt;front-end.directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radify.io/blog/using-build-tools/&#34;&gt;Using front-end build tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://usablica.github.io/front-end-frameworks/compare.html&#34;&gt;A Collection Of Best Front End Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/showcases/front-end-javascript-frameworks?s=stars&#34;&gt;GitHub: Front-end JavaScript frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/front-end-tooling-trends-2017/&#34;&gt;Front-End Tooling Trends for 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.debugme.eu/front-end-web-developer-tools/&#34;&gt;Updated List: The 67 Very Best Front End Web Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techbeacon.com/most-popular-javascript-front-end-tools&#34;&gt;The most popular JavaScript front-end tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colorlib.com/wp/top-templating-engines-for-javascript/&#34;&gt;Top 10 Templating Engines for JavaScript To Improve and Simplify Your Workflow 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/addyosmani/automating-front-end-workflow&#34;&gt;Automating Front-end Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@caiovaccaro/javascript-state-of-the-union-2015-parte-3-281aa04bece1#.bulta9j6j&#34;&gt;Javascript State of the Union 2015, parte 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/Hugeinc/javascript-state-of-the-union-2015&#34;&gt;Slides &amp;#8211; Javascript State of the Union 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results&#34;&gt;The State of Front-End Tooling 2016 &amp;#8211; Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/front-end-roles-and-responsibilities-6ee8654f1649#.gsg5zdjtr&#34;&gt;Front-end Roles and Responsibilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>UX: Como aumentar a tolerância do usuário para atrasos</title>
      <link>http://tableless.com.br/ux-como-aumentar-tolerancia-do-usuario-para-atrasos/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/ux-como-aumentar-tolerancia-do-usuario-para-atrasos/</guid>
      <description>&lt;p&gt;Vivemos em um tempo onde velocidade é diferencial. Exigimos rapidez de tudo ao nosso redor, seja em um atendimento, em uma entrega de produto, na velocidade da Internet, no feedback do cliente, na estratégia de SEO do nosso site, entre tantos outros exemplos que poderiam ser citados. A realidade é evidente: esperar é doloroso.&lt;/p&gt;

&lt;p&gt;E em um cenário onde rapidez é fator de satisfação, a espera pode influenciar negativamente no valor de um produto ou serviço oferecido. Quando pensamos em UX temos de pensar em todo e qualquer motivo que possa atrapalhar a boa experiência do usuário, e principalmente, naqueles que possam impedir que ele chegue ao seu objetivo.&lt;/p&gt;

&lt;p&gt;Temos inúmeros exemplos em nosso cotidiano de tentativas de minimizar a dor da espera, como por exemplo, ao invés daquela música instrumental repetitiva, alguns canais de telemarketing optam por sons de propaganda ou até dicas de como resolver problemas frequentes de consumidores enquanto aguardam na linha para falar com o atendente. Quem nunca na fila da loja ou do supermercado, enquanto esperava, decidiu pegar mais uma balinha, um chocolate, ou uma revista que ficava bem ao lado da fila do caixa?&lt;/p&gt;

&lt;p&gt;O tempo de espera, enquanto você está fazendo outra coisa é percebido como muito mais curto do que quando esperamos estaticamente, sem qualquer tipo de distração. Os usuários esperam com menos incômodo quando se distraem com outra coisa, do que quando olham para a tela e veem somente um círculo girando continuamente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quando esperar vale a pena?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apesar do constante desejo por velocidade, também precisamos de resultados de qualidade, e muitas das vezes qualidade requer mais esforço e consequentemente leva mais tempo. Sendo assim, a espera ela passa a ser justificada e compreendida pelo usuário, quando é possível para ele identificar o esforço empregado.&lt;/p&gt;

&lt;p&gt;Mas como identificar o esforço de uma ferramenta online, de um site, de um app, de um computador, de um celular ou de qualquer outro produto ou serviço cujo esforço não é visível?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desafio de UX&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como podemos projetar interfaces que são percebidas como sendo mais rápidas do que realmente são? Como aumentar a tolerância do usuário para atrasos na entrega dos resultados?&lt;/p&gt;

&lt;p&gt;O esforço empregado para qualidade e que deve ser identificado pelo usuário para compreensão da espera, em ambiente digital é o equivalente à transparência do que está sendo feito.&lt;/p&gt;

&lt;p&gt;O usuário precisa ver o andamento, precisa identificar o que está sendo feito e encontrar uma justificativa do porquê ele está esperando. Quando abrimos o Photoshop, por exemplo, ele abre sua tela de inicialização e começa a me mostrar informações como: “Inicializando&amp;#8230;”, “Lendo o arquivo x&amp;#8230;”, “Incluindo y&amp;#8230;” e estes dados me confortam muito mais do que se fosse algo estático. Vejo que algo está sendo feito e quanto mais rápidas as informações são mostradas, tenho a real sensação que não vou ter de esperar tanto tempo para utilizá-lo.&lt;/p&gt;

&lt;p&gt;Em um experimento da Harvard Business School, os participantes tinham de escolher a melhor experiência entre dois sites com resultados idênticos e experiências diferentes. Um site devolvia o resultado instantaneamente, já o segundo site demorava cerca de 30 a 60 segundos e variava entre mostrar a transparência do processo ou não. Como resultado, 62% dos participantes preferiram a experiência de usuário com transparência no processo.&lt;/p&gt;

&lt;p&gt;Vale ressaltar também um caso polêmico para a área, onde o UX Designer Graeme Pyle, publicou um vídeo sobre uma progress bar falsa que ele encontrou. No vídeo, Pyle mostra que o andamento da barra evolui mesmo sem conexão com a Internet, e que ainda tenta ser realista dando pequenas pausas durante o progresso. Vale a pena uma transparência falsa? Pense no impacto negativo de uma falsa experiência para os usuários.&lt;/p&gt;

&lt;p&gt;Link do vídeo: &lt;a href=&#34;https://www.youtube.com/watch?v=gpBWwl-Ngak&#34;&gt;https://www.youtube.com/watch?v=gpBWwl-Ngak&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A transparência é sempre a solução?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sabemos que nem toda solução convém para todos os projetos. A transparência ela é útil sim, mas de nada adianta se o tempo de espera for muito grande. Mesmo não havendo um tempo uma regra sobre o tempo tolerável de espera, é necessário estudar e ver qual a duração ideal. Sendo assim, caso o atraso esteja fora do tempo favorável devo encarar reduzir o tempo como prioritário em relação a implementação da transparência.&lt;/p&gt;

&lt;p&gt;Outra informação importante é que os resultados oferecidos têm de ser úteis e de qualidade, em relação ao que foi solicitado, pois mesmo com uma experiência adequada durante o tempo de espera, se o usuário não receber resultados satisfatórios, a experiência volta a ser péssima.&lt;/p&gt;

&lt;p&gt;Deve se considerar que nenhuma demonstração de esforço supera um mal funcionamento. Se o produto ou serviço não funciona bem posso implementar milhões de alternativas mas no fim, a experiência nunca será agradável.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moz://a</title>
      <link>http://tableless.com.br/novo-logo-mozilla/</link>
      <pubDate>Thu, 19 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/novo-logo-mozilla/</guid>
      <description>&lt;p&gt;A Mozilla mudou seu logo.&lt;/p&gt;

&lt;p&gt;Desde o ano passado a Mozilla estava passando por um processo de rebranding. Não foi um processo como qualquer outra empresa faz: a Mozilla pediu a opinião de toda a sua comunidade. Ela contratou uma agência de Londres chamada &lt;a href=&#34;http://johnsonbanks.co.uk/thoughtfortheweek/mozilla-the-chosen-route/&#34;&gt;Johnson Banks&lt;/a&gt;, que fez sete identidades primárias. &lt;a href=&#34;https://blog.mozilla.org/opendesign/now-for-the-fun-part/&#34;&gt;A comunidade ajudou a escolher nesse site&lt;/a&gt; qual logo era mais legal, bonito, adequado e que se encaixava mais com a cultura da Mozilla e tudo o que ela representava. As sete propostas eram:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.mozilla.org/opendesign/design-route-a-the-eye/&#34;&gt;&lt;img src=&#34;uploads/2017/01/Mozilla1.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;450&#34; class=&#34;aligncenter size-full wp-image-56961&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.mozilla.org/opendesign/design-route-e-wireframe-world/&#34;&gt;&lt;img src=&#34;uploads/2017/01/Mozilla2.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;450&#34; class=&#34;aligncenter size-full wp-image-56962&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.mozilla.org/opendesign/design-route-f-the-impossible-m/&#34;&gt;&lt;img src=&#34;uploads/2017/01/Mozilla3.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;450&#34; class=&#34;aligncenter size-full wp-image-56963&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.mozilla.org/opendesign/design-route-g-flik-flak/&#34;&gt;&lt;img src=&#34;uploads/2017/01/Mozilla4-1.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;450&#34; class=&#34;aligncenter size-full wp-image-56964&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.mozilla.org/opendesign/design-route-d-protocol/&#34;&gt;&lt;img src=&#34;uploads/2017/01/Mozilla5.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;450&#34; class=&#34;aligncenter size-full wp-image-56965&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.mozilla.org/opendesign/design-route-c-the-open-button/&#34;&gt;&lt;img src=&#34;uploads/2017/01/Mozilla6.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;450&#34; class=&#34;aligncenter size-full wp-image-56966&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.mozilla.org/opendesign/design-route-b-the-connector/&#34;&gt;&lt;img src=&#34;uploads/2017/01/Mozilla7.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;450&#34; class=&#34;aligncenter size-full wp-image-56967&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cada uma dessas propostas tem um conceito explicando os motivos de terem sido feitos assim. Clique em cada uma das imagens para entender melhor cada um deles.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Today, we believe these principles matter more than ever. And as a not-for-profit organization, we’re uniquely able to build products, technologies, and programs that keep the Internet growing and healthy, with individuals informed and in control of their online lives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Depois de sete meses Baseado na escolha da comunidade, a agência trabalhou mais um pouco no logo e finalmente eles decidiram como ia ficar. O grande lançamento foi hoje e o resultado é esse:&lt;/p&gt;

&lt;p&gt;O logo tem o intuito de reforçar que a internet é o coração de todos os esforços da Mozilla, mostrando o comprometimento para a intenção original de que o link é o começo de uma internet sem filtros e sem mediações para uma experiência para o consumo de conteúdo rico.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/Mozilla-12jan-1500px_logo-1400x990.jpg&#34; alt=&#34;&#34; width=&#34;1400&#34; height=&#34;990&#34; class=&#34;aligncenter size-full wp-image-56969&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Uma coisa interessante que a Mozilla destacou, é que usando um logo baseado em uma font, há a possibilidade da comunidade combinar o logo com outras montagens usando imagens, tornando o logo muito flexível, fazendo um paralelo com a riqueza e criatividade que existe na web.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/Mozilla-12jan-1500px_architecture-1400x990.jpg&#34; alt=&#34;&#34; width=&#34;1400&#34; height=&#34;990&#34; class=&#34;aligncenter size-full wp-image-56968&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Trocar o &lt;strong&gt;ill&lt;/strong&gt; por &lt;strong&gt;://&lt;/strong&gt; é uma ideia sensacional, já que o &lt;strong&gt;://&lt;/strong&gt; é universal ao remeter à uma das bases mais fundamentais da internet que é a URL. É muito legal todo o estudo que eles tiveram, levando muito em consideração aos mais de 3000 comentários que a iniciativa rendeu. Por exemplo, antes do &lt;strong&gt;://&lt;/strong&gt; o &amp;#8220;M&amp;#8221; é minúsculo, já que estamos &lt;a href=&#34;https://blog.mozilla.org/opendesign/route-one-protocol-2-0/#comments&#34;&gt;lembrando uma URL e como você bem sabe, não usamos letras maiúsculas em URLs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/Mozilla-12jan-1500px_color-1400x990.jpg&#34; alt=&#34;&#34; width=&#34;1400&#34; height=&#34;990&#34; class=&#34;aligncenter size-full wp-image-56970&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Eu gostei muito do novo logo. Dá um baque no início, mas lendo os conceitos, os comentários da comunidade e todas as cores com que agora o logo novo tem, dá para sentir uma vibe muito boa numa das empresas que mais respeitam o usuário e principalmente uma das que mais lutam por uma internet livre. Long live to the &lt;strong&gt;Moz://a&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/johnsonbanks_Mozilla_healthyinternet_2.jpg&#34; alt=&#34;&#34; width=&#34;1478&#34; height=&#34;834&#34; class=&#34;aligncenter size-full wp-image-56975&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/johnsonbanks_Mozilla_love.jpg&#34; alt=&#34;&#34; width=&#34;1500&#34; height=&#34;1061&#34; class=&#34;aligncenter size-full wp-image-56976&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/johnsonbanks_Mozilla_save.jpg&#34; alt=&#34;&#34; width=&#34;1500&#34; height=&#34;1061&#34; class=&#34;aligncenter size-full wp-image-56977&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Opera Neon – Até que enfim um browser decente</title>
      <link>http://tableless.com.br/opera-neon-ate-que-enfim-um-browser-decente/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/opera-neon-ate-que-enfim-um-browser-decente/</guid>
      <description>&lt;p&gt;Eu tenho um faniquito com browser. Eu AMO o Safari. Sério. Ele é limpo, leve, rápido o bastante, não mata toda a memória do meu Mac, tem um Inspector usável&amp;#8230; Mas muitas, visitando vários sites, funcionalidades simples deixaram de funcionar por algum motivo desconhecido. Quando eu abria o mesmo site no Firefox ou no Chrome, o funcionamento era perfeito. Isso aconteceu diversas vezes ate que me enchi e comecei a usar o Firefox. Mas aqui vai uma confissão: eu não consigo usar o Firefox mais do que duas semanas seguidas até me encher com a sua lentidão. O Firefox é um browser meio desajeitado, pesado, lerdo. Não me venha falar do Chrome, essa porcaria já deu crash comigo várias vezes com coisas bestas. Odeio aquela pastinha na minha cara o tempo inteiro. Agora o Opera&amp;#8230; Eu nunca consegui me acostumar com o Opera. Sempre que eu uso o Opera parece que eu vou pra um mundo novo, estranho, desconfortável&amp;#8230; Embora ele sempre foi e é o browser mais inovador do mundo. Todos os outros browsers apenas o seguem.&lt;/p&gt;

&lt;p&gt;Mas a verdade é que nenhum browser realmente saiu da zona de conforto de verdade. Todos eles tem o design totalmente diferente, mas o resto das funcionalidades é tudo mais do mesmo. Mas não dessa vez. O &lt;a href=&#34;https://www.opera.com/pt-br/computer/neon&#34;&gt;Opera lançou o Neon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O Opera Neon não é um simples update do browser que já existe. Ele é um browser TOTALMENTE novo, pensado de maneira DIFERENTE dos demais. Quando ele abre, você leva um susto. Parece que você está no seu desktop, mas totalmente remodelado. Os atalhos para seus websites ficam logo de cara.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/startscreen-neon.jpg&#34; alt=&#34;&#34; width=&#34;2005&#34; height=&#34;1286&#34; class=&#34;aligncenter size-full wp-image-56905&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esqueça as tabs, elas não existem mais. Em vez disso, ao lado direito, ficam os sites que você está visitando agora. Elas se organizam automaticamente de acordo com a sua utilização: as usadas mais ficam sempre pra no topo.&lt;/p&gt;

&lt;p&gt;Você consegue fazer split-screen das suas janelas, colocando-as uma ao lado da outra. Sem plugin, baby!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/janelas.gif&#34; alt=&#34;&#34; width=&#34;1704&#34; height=&#34;1213&#34; class=&#34;aligncenter size-full wp-image-56907&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Além dos pequenos segredos. Você consegue por exemplo, tirar um screenshot da página com apenas um click em um ícone que fica ao lado esquerdo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/crop-neon.jpg&#34; alt=&#34;&#34; width=&#34;1310&#34; height=&#34;866&#34; class=&#34;aligncenter size-full wp-image-56909&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Do mesmo lado desse ícone, o Neon agrupa automaticamente sites que estão tocando música ou vídeo. Assim você não fica perdidão procurando onde diabos está saindo aquele som. Se quiser pausar o vídeo, dá para fazer por lá mesmo! 😉&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/video-neon.gif&#34; alt=&#34;&#34; width=&#34;443&#34; height=&#34;461&#34; class=&#34;aligncenter size-full wp-image-56910&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Eu não sei se outro browser tem isso, eu nunca vi, mas há uma opção de TASK MANAGER, onde abre uma telinha com a lista das janelas que estão sendo usadas agora e quanto elas estão consumindo de memória. Sensacional para encontrar o site maldito que está acabando com o processamento do seu computador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/taskmanager.jpg&#34; alt=&#34;&#34; width=&#34;1014&#34; height=&#34;448&#34; class=&#34;aligncenter size-full wp-image-56917&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Todo o suporte aos padrões web vem do engine do Chrome. O inspector e todas as suas features também. Logo, você não precisa se preocupar com isso na hora de trabalhar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/Screen-Shot-2017-01-15-at-08.21.28.png&#34; alt=&#34;&#34; width=&#34;593&#34; height=&#34;242&#34; class=&#34;aligncenter size-full wp-image-56915&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Coloquei como meu browser padrão. Vamos ver quanto tempo eu consigo usá-lo e quais os seus defeitos. Agora, vou ser obrigado a instalar o Opera no mobile, só para ter acesso às minhas senhas. Mas até aí, a gente se acostuma.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.opera.com/pt-br/computer/neon&#34;&gt;Baixe e experimente o Opera Neon agora&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando uma aplicação de Chat simples com NodeJS e Socket.io</title>
      <link>http://tableless.com.br/criando-uma-aplicacao-de-chat-simples-com-nodejs-e-socket-io/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-uma-aplicacao-de-chat-simples-com-nodejs-e-socket-io/</guid>
      <description>

&lt;p&gt;Neste tutorial iremos abordar alguns conceitos do Socket.io criando um simples sistema de chat para browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dericeira/Simple-Chat-Socket.io/master/example.gif&#34; alt=&#34;https://raw.githubusercontent.com/dericeira/Simple-Chat-Socket.io/master/example.gif&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-socket-io&#34;&gt;O que é Socket.io?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://socket.io&#34;&gt;Socket.io&lt;/a&gt; é um uma biblioteca Javascript feita para construir aplicações real-time, possibilitando uma comunicação bi-direcional entre cliente e servidor. O socket.io utiliza as especificações de Web Sockets (para quem quer saber mais, recomendo dar uma olhada &lt;a href=&#34;https://www.html5rocks.com/pt/tutorials/websockets/basics/&#34;&gt;neste ótimo artigo&lt;/a&gt; da HTML5 Rocks).&lt;/p&gt;

&lt;p&gt;O Socket.io roda, no lado do servidor, em NodeJS, e, no lado do cliente, ele roda diretamente no browser, possibilitando uma enorme gama de possibilidades de aplicações, como jogos, sistemas de notificações, real-time analytics e sistemas de chats e conversas em tempo real.&lt;/p&gt;

&lt;h2 id=&#34;setando-o-projeto&#34;&gt;Setando o projeto&lt;/h2&gt;

&lt;p&gt;Primeiramente, temos que instalar algumas bibliotecas que iremos utilizar no projeto, para isso usarei o &lt;a href=&#34;https://github.com/yarnpkg/yarn&#34;&gt;yarn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, vou adicionar ao projeto a biblioteca do Socket.io que rodará do lado do servidor.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add socketio&lt;/pre&gt;

&lt;p&gt;Também iremos utilizar o express:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add express&lt;/pre&gt;

&lt;p&gt;Também precisamos adicionar o Socket.io para o cliente (você pode utilizar a CDN oficial disponibilizada no site deles também):&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add socket.io-client&lt;/pre&gt;

&lt;p&gt;E, por último, usarei a biblioteca jQuery para manipular a DOM.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;yarn add jquery&lt;/pre&gt;

&lt;h2 id=&#34;fazendo-o-html-css&#34;&gt;Fazendo o HTML+CSS&lt;/h2&gt;

&lt;p&gt;Vamos criar um arquivo index.html e já deixar preparado o nosso template do sistema de chat.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;en&#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Simple chat&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;assets/css.css&#34;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&#34;nickname_container&#34; id=&#34;nick&#34;&amp;gt;

 &amp;lt;span&amp;gt;Type your nickname:&amp;lt;/span&amp;gt;
 &amp;lt;form id=&#34;submit&#34;&amp;gt;&amp;lt;input type=&#34;text&#34; id=&#34;nickname&#34; /&amp;gt;&amp;lt;/form&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div id=&#34;chat&#34; hidden&amp;gt;

 &amp;lt;div class=&#34;menu&#34; =&amp;gt;
 &amp;lt;div class=&#34;name&#34; id=&#34;name&#34;&amp;gt;Alex&amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;last&#34; id=&#34;time&#34;&amp;gt;18:09&amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;ol class=&#34;chat&#34;&amp;gt;
 
 &amp;lt;/ol&amp;gt;
 
 &amp;lt;input class=&#34;textarea&#34; type=&#34;text&#34; placeholder=&#34;Type here!&#34; id=&#34;textarea&#34; /&amp;gt;
&amp;lt;/div&amp;gt;
 &amp;lt;script src=&#34;node_modules/jquery/dist/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src=&#34;node_modules/socket.io-client/socket.io.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src=&#34;assets/js.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Repare que eu também criei o diretório assets, e criei os arquivos css.css e js.js.&lt;/p&gt;

&lt;p&gt;Não entrarei na parte do CSS, pois o foco aqui é o javascript, mas você pode ver o resultado no &lt;a href=&#34;https://github.com/dericeira/Simple-Chat-Socket.io/blob/master/assets/css.css&#34;&gt;github&lt;/a&gt;. Eu utilizei como base &lt;a href=&#34;https://codepen.io/Varo/pen/gbZzgr&#34;&gt;este pen&lt;/a&gt; para construir o layout.&lt;/p&gt;

&lt;h2 id=&#34;server-side&#34;&gt;Server-side&lt;/h2&gt;

&lt;p&gt;Vamos iniciar com a criação da parte de servidor do Socket.io, ou seja, iremos lidar com os eventos server-side.&lt;/p&gt;

&lt;p&gt;Iniciaremos criando um arquivo &lt;strong&gt;app.js&lt;/strong&gt; no diretório raíz e importaremos os módulos e faremos algumas operações iniciais:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var app = require(&#39;express&#39;)();
var http = require(&#39;http&#39;).Server(app);
var io = require(&#39;socket.io&#39;)(http);

var clients = {};

app.get(&#39;/&#39;, function(req, res){
res.send(&#39;server is running&#39;);
});

//SocketIO vem aqui

http.listen(3000, function(){
console.log(&#39;listening on port 3000&#39;);
});
&lt;/pre&gt;

&lt;p&gt;Este script implementa um servidor Node utilizando os módulos http e express (para roteamento).&lt;/p&gt;

&lt;p&gt;A variável clientes que está sendo criada servirá para armazenar nossa lista de clientes.&lt;/p&gt;

&lt;p&gt;Agora iremos adicionar o nosso primeiro evento do Socket.io, que será o &lt;strong&gt;connection&lt;/strong&gt;, que dispara a cada vez que um cliente se conecta ao socket.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;io.on(&#34;connection&#34;, function (client) {
    console.log(&#39;user connected&#39;);
});&lt;/pre&gt;

&lt;p&gt;Para nossa sala de chat, precisaremos implementar outros 3 eventos: &lt;strong&gt;join&lt;/strong&gt;, &lt;strong&gt;send&lt;/strong&gt; e &lt;strong&gt;disconnect&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;io.on(&#34;connection&#34;, function (client) {
  client.on(&#34;join&#34;, function(name){
    console.log(&#34;Joined: &#34; + name);
    clients[client.id] = name;
    client.emit(&#34;update&#34;, &#34;You have connected to the server.&#34;);
    client.broadcast.emit(&#34;update&#34;, name + &#34; has joined the server.&#34;)
  });

  client.on(&#34;send&#34;, function(msg){
    console.log(&#34;Message: &#34; + msg);
    client.broadcast.emit(&#34;chat&#34;, clients[client.id], msg);
  });

  client.on(&#34;disconnect&#34;, function(){
    console.log(&#34;Disconnect&#34;);
    io.emit(&#34;update&#34;, clients[client.id] + &#34; has left the server.&#34;);
    delete clients[client.id];
  });
});
&lt;/pre&gt;

&lt;p&gt;O evento join deverá ser disparado quando o cliente entrar no servidor, adicionando o id do cliente no array e emitindo dois novos eventos, nomeando-os de &lt;strong&gt;update&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note que há uma diferença entre o método &lt;strong&gt;client.emit&lt;/strong&gt; e o &lt;strong&gt;client.broadcast.emit&lt;/strong&gt;. O client.emit enviará a notificação somente para o cliente atual, ou seja, o cliente que acabou de entrar na sala de chat. O &lt;strong&gt;client.broadcast.emit&lt;/strong&gt; irá emitir para todos os clientes conectados, com exceção do que está executando a ação. Se utilizássemos o método &lt;strong&gt;io.emit&lt;/strong&gt;, a mensagem seria enviada a todos os clientes conectados ao socket. Abaixo uma série de exemplos de métodos disponíveis:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// enviar apenas para o cliente atual
client.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes, inclusive o atual
io.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes, exceto o atual
client.broadcast.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes (com exceção do atual) para uma sala específica
socket.broadcast.to(&#39;game&#39;).emit(&#39;message&#39;, &#39;nice game&#39;);

// enviar para todos os clientes em uma sala específica
io.in(&#39;game&#39;).emit(&#39;message&#39;, &#39;cool game&#39;);

// enviar para o atual, caso ele esteja na sala
client.to(&#39;game&#39;).emit(&#39;message&#39;, &#39;enjoy the game&#39;);

// enviar para todos os clientes em um namespace &#39;namespace1&#39;
io.of(&#39;namespace1&#39;).emit(&#39;message&#39;, &#39;gg&#39;);

// enviando para um socketid individual
client.broadcast.to(socketid).emit(&#39;message&#39;, &#39;for your eyes only&#39;);&lt;/pre&gt;

&lt;p&gt;Com todos esses métodos, conseguiríamos implementar salas específicas, mensagens individuais, etc. Porém nosso foco é mostrar a parte mais básica e entender o funcionamento.&lt;/p&gt;

&lt;h2 id=&#34;client-side&#34;&gt;Client-side&lt;/h2&gt;

&lt;p&gt;Com nosso servidor concluido e rodando, vamos passar para a parte de client-side de nossa aplicação de chat. Vamos ao &lt;strong&gt;js.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Primeiramente, inicializaremos o socket.io e criaremos uma variável &lt;strong&gt;ready&lt;/strong&gt;, setada como false. Esta variável será responsável por indicar se o usuário já informou ou não o seu nickname.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;$(document).ready(function(){
    var socket = io.connect(&#34;http://localhost:3000&#34;);
    var ready = false;
});
&lt;/pre&gt;

&lt;p&gt;Com esta implementação, já conseguimos disparar o evento &lt;strong&gt;connection&lt;/strong&gt; em nosso servidor. Porém, precisamos fazer com que o servidor receba a informação cada vez que um novo usuário entrar na sala informando o seu nickname.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#submit&#34;).submit(function(e) {
    e.preventDefault();
    $(&#34;#nick&#34;).fadeOut();
    $(&#34;#chat&#34;).fadeIn();
    var name = $(&#34;#nickname&#34;).val();
    var time = new Date();
    $(&#34;#name&#34;).html(name);
    $(&#34;#time&#34;).html(&#39;First login: &#39; + time.getHours() + &#39;:&#39; + time.getMinutes());

    ready = true;
    socket.emit(&#34;join&#34;, name);
});
&lt;/pre&gt;

&lt;p&gt;A função jQuery acima captura a submissão do formulário de nickname, fecha a tela de seleção de nick, mostra a tela de chat, seta a variável ready para true e executa um comando de socket, o &lt;strong&gt;socket.emit&lt;/strong&gt;, que informa para o nosso servidor que um novo usuário acabou de entrar na sala.&lt;/p&gt;

&lt;p&gt;Nada irá acontecer, pois ainda não temos o receptor do evento &lt;strong&gt;update&lt;/strong&gt;, que está sendo disparado no nosso servidor, então vamos criá-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;socket.on(&#34;update&#34;, function(msg) {
    if (ready) {
        $(&#39;.chat&#39;).append(&#39;&amp;lt;li class=&#34;info&#34;&amp;gt;&#39; + msg + &#39;&amp;lt;/li&amp;gt;&#39;)
    }
});
&lt;/pre&gt;

&lt;p&gt;Este código fará com que, a cada vez que o servidor emitir um update, o jQuery adicione uma nova linha no chat com a mensagem retornada.&lt;/p&gt;

&lt;p&gt;Agora, iremos fazer com que nossa aplicação envie as mensagens ao servidor a cada vez que o cliente apertar o enter no input de texto:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;$(&#34;#textarea&#34;).keypress(function(e){
    if(e.which == 13) {
         var text = $(&#34;#textarea&#34;).val();
         $(&#34;#textarea&#34;).val(&#39;&#39;);
         var time = new Date();
         $(&#34;.chat&#34;).append(&#39;&amp;lt;li class=&#34;self&#34;&amp;gt;&amp;lt;div class=&#34;msg&#34;&amp;gt;&amp;lt;span&amp;gt;&#39;
                      + $(&#34;#nickname&#34;).val() + &#39;:&amp;lt;/span&amp;gt;    &amp;lt;p&amp;gt;&#39; + text + &#39;&amp;lt;/p&amp;gt;&amp;lt;time&amp;gt;&#39; + 
                      time.getHours() + &#39;:&#39; + time.getMinutes() + &#39;&amp;lt;/time&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&#39;);
         socket.emit(&#34;send&#34;, text);
    }
});
&lt;/pre&gt;

&lt;p&gt;E, para concluir, precisamos fazer com que o socket.io observe todas as mensagens referente ao chat em si, e adicione à DOM:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;socket.on(&#34;chat&#34;, function(client,msg) {
 if (ready) {
    var time = new Date();
    $(&#34;.chat&#34;).append(&#39;&amp;lt;li class=&#34;other&#34;&amp;gt;&amp;lt;div class=&#34;msg&#34;&amp;gt;&amp;lt;span&amp;gt;&#39; + 
                 client + &#39;:&amp;lt;/span&amp;gt;&amp;lt;p&amp;gt;&#39; + msg + &#39;&amp;lt;/p&amp;gt;&amp;lt;time&amp;gt;&#39; + time.getHours() + &#39;:&#39; + 
                 time.getMinutes() + &#39;&amp;lt;/time&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&#39;);
 }
});&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Na minha opinião,  as sockets são uma das melhores funcionalidades do HTML5, e possuem uma infinidade de aplicação. O ganho de performance é espetacular se bem aplicado, uma vez que evita o uso de requisições HTTP em aplicações onde a necessidade de atualização é grande (baixa latência).&lt;/p&gt;

&lt;p&gt;Disponibilizei o código do tutorial no &lt;a href=&#34;https://github.com/dericeira/Simple-Chat-Socket.io&#34;&gt;github&lt;/a&gt; para quem se interessar, e estou aberto a tirar dúvidas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução bem rápida sobre vim</title>
      <link>http://tableless.com.br/introducao-bem-rapida-sobre-vim/</link>
      <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-bem-rapida-sobre-vim/</guid>
      <description>

&lt;p&gt;O &lt;strong&gt;vim&lt;/strong&gt; é um editor de texto muito conhecido no mundo Linux. Embora conheça faz tempo, eu nunca o utilizei exatamente por que a curva de aprendizado é terrivelmente longa. Aposto que você conhece alguém que já ficou preso no vim quando foi editar um arquivo no servidor e nem sabia como salvar e sair do arquivo. Normal quando se está começando e nem tem ideia de como o vim funciona.&lt;/p&gt;

&lt;p&gt;Só para avisar: eu uso Mac, mas é provável que tudo isso aqui funcione num Linux. Mas não tenho ideia se alguma coisa funcionaria no Windows.&lt;/p&gt;

&lt;h2 id=&#34;um-pouco-de-blá-blá-blá-histórico&#34;&gt;Um pouco de blá blá blá histórico&lt;/h2&gt;

&lt;p&gt;Se você for cavar informações na Web, vai encontrar várias informações interessantes sobre de onde o &lt;strong&gt;vim&lt;/strong&gt; surgiu. Primeiro, a palavra vim significa &lt;strong&gt;VI Improvement&lt;/strong&gt;. O vim é uma melhoria do editor &lt;strong&gt;vi&lt;/strong&gt;, que foi baseado num editor chamado &lt;strong&gt;ex&lt;/strong&gt;, que por sua vez foi baseado num editor chamado &lt;strong&gt;qed&lt;/strong&gt;, que por sua vez era uma melhoria de um editor chamado &lt;strong&gt;ed&lt;/strong&gt;, que talvez foi inspirado em outro editor. 😉&lt;/p&gt;

&lt;p&gt;Todas essas e outras informações você pode achar &lt;a href=&#34;https://en.wikipedia.org/wiki/Ed_(text_editor)&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;https://en.wikipedia.org/wiki/Vi&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O interessante do &lt;strong&gt;vim&lt;/strong&gt; é que você pode aprender praticamente TUDO sobre ele executando apenas o comando &lt;strong&gt;:help&lt;/strong&gt;. Abra o vim simplesmente digitando &lt;strong&gt;vim&lt;/strong&gt; no seu terminal e aperte &lt;strong&gt;ENTER&lt;/strong&gt;. Depois de aberto, digite &lt;strong&gt;:help&lt;/strong&gt; para abrir o manual. Lá tem TUDO o que você precisa saber. Eu poderia terminar esse artigo aqui e pronto. 😀&lt;/p&gt;

&lt;h2 id=&#34;modos-e-comandos-básicos&#34;&gt;Modos e comandos básicos&lt;/h2&gt;

&lt;p&gt;A curva de aprendizado do vim é gigante por que você primeiro precisa entender que: &lt;strong&gt;o mouse é seu inimigo&lt;/strong&gt;. A ideia é aumentar a produtividade. Parar de usar o teclado para usar o mouse enquanto estamos digitando código é perda de tempo. Logo, o objetivo é que você tente usar cada vez menos o mouse. Para isso, o vim tem alguns modos de controle:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No modo &lt;strong&gt;Normal&lt;/strong&gt; você pode executar todos os comandos normais do editor. Serve para você navegar e manipular o texto. Este é o modo que o vim inicia e que você volta toda vez que sai de outro modo usando a tecla &lt;strong&gt;ESC&lt;/strong&gt;. Geralmente, para navegar no texto, o pessoal do vim usa as seguintes teclas: &lt;strong&gt;h&lt;/strong&gt; para esquerda, &lt;strong&gt;j&lt;/strong&gt; para baixo, &lt;strong&gt;k&lt;/strong&gt; para cima e &lt;strong&gt;l&lt;/strong&gt; para direita. Eu ainda não me acostumei com isso e insisto em usar as setas do teclado. :-&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;O modo &lt;strong&gt;Visual&lt;/strong&gt; é como o modo &lt;strong&gt;Normal&lt;/strong&gt;, mas quando você navega pelas palavras ou linhas, elas são selecionadas. Quando um comando é executado, ele vai ter efeito apenas na área selecionada. Quando você está nesse modo, aparece um &amp;#8220;&lt;em&gt;&amp;#8212; VISUAL &amp;#8212;&lt;/em&gt;&amp;#8221; no rodapé da janela. Ela é ativada apertando a tecla &lt;strong&gt;v&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;O modo &lt;strong&gt;Select&lt;/strong&gt; é igual ao &lt;strong&gt;Visual&lt;/strong&gt;, mas um pouco parecido com o estilo de seleção do MS-Windows. Não se preocupe com esse modo&amp;#8230; me atrevo a dizer que você nunca vai usá-lo.&lt;/li&gt;
&lt;li&gt;O modo &lt;strong&gt;Insert&lt;/strong&gt; é onde você escreve e modifica o texto do arquivo (buffer). Ela é ativada apertando a tecla &lt;strong&gt;i&lt;/strong&gt;. Apertando a tecla &lt;strong&gt;i&lt;/strong&gt;, você poderá inserir ou apagar o texto onde o cursor está naquele momento.&lt;/li&gt;
&lt;li&gt;No modo &lt;strong&gt;Command-line&lt;/strong&gt; ou &lt;strong&gt;Cmdline&lt;/strong&gt;, você escreve um comando no rodapé da janela. Esse modo é ativado usando alguns comando como busca (&lt;strong&gt;?&lt;/strong&gt; ou &lt;strong&gt;/&lt;/strong&gt;) e o comando de filtro (&lt;strong&gt;!&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;O modo &lt;strong&gt;Ex&lt;/strong&gt; é ativado com o comando &lt;strong&gt;:&lt;/strong&gt;. Nesse modo, você vai executar comandos como salvar o arquivo (&lt;strong&gt;:w&lt;/strong&gt;), fechar o arquivo (&lt;strong&gt;:q&lt;/strong&gt;) ou até juntar os dois comandos (&lt;strong&gt;:wq&lt;/strong&gt;), além de outros.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Isso tudo parece complicado&amp;#8230; Só parece&amp;#8230; Vamos aprender na prática.&lt;/p&gt;

&lt;h2 id=&#34;na-prática-editando-e-salvando-um-arquivo&#34;&gt;Na prática: editando e salvando um arquivo&lt;/h2&gt;

&lt;p&gt;Abra seu terminal e entre na pasta do seu Desktop (ou qualquer outra pasta que você desejar). Agora execute o seguinte comando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim teste.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Isso vai abrir uma instância do vim, editando um arquivo vazio chamado &lt;strong&gt;teste.md&lt;/strong&gt;. Agora, aperte a tecla &lt;strong&gt;i&lt;/strong&gt;. Este é o comando para entrar no modo de &lt;strong&gt;Insert&lt;/strong&gt; (ou Inserção). Digite &lt;em&gt;Hello World&lt;/em&gt;. O arquivo ainda não existe, por que você ainda não o salvou. Para salvar o arquivo, você precisa sair do modo de &lt;strong&gt;Insert&lt;/strong&gt; e voltar para o modo &lt;strong&gt;Normal&lt;/strong&gt;. Para fazer isso basta apertar a tecla &lt;strong&gt;ESC&lt;/strong&gt;. Agora, pra salvar o arquivo, exatamente na pasta em que você está, basta executar o comando &lt;strong&gt;:w&lt;/strong&gt;. Para sair do arquivo e voltar para o terminal, basta executar o comando &lt;strong&gt;:q&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Verifique agora se o arquivo existe e se o seu conteúdo é o esperado. Pode fazer isso usando qualquer outro editor de texto.&lt;/p&gt;

&lt;p&gt;Por enquanto, a interface do seu vim deve estar muito, mas muito feia. Vamos dar um jeito nisso.&lt;/p&gt;

&lt;h2 id=&#34;customizando-seu-vim&#34;&gt;Customizando seu vim&lt;/h2&gt;

&lt;p&gt;Como qualquer editor que se preze, o vim pode ser totalmente customizado. Eu nunca gostei de usar o vim &amp;#8211; estou aprendendo por pura curiosidade &amp;#8211; mas sempre gostei do visual simples e clean do editor. Você customiza o vim por meio do seu arquivo de configuração chamado &lt;em&gt;.vimrc&lt;/em&gt;. O &lt;em&gt;.vimrc&lt;/em&gt; vai guardar todas as configurações do editor e também quais os plugins que serão instalados, bem como algumas configurações desses plugins. Eu conheço um cara chamado &lt;a href=&#34;https://www.sergioaugrod.com.br&#34;&gt;Sérgio&lt;/a&gt; que tem &lt;a href=&#34;https://github.com/sergioaugrod/dotfiles/blob/master/.vimrc&#34;&gt;o vim mais legal que eu já vi&lt;/a&gt;. Ele me deu o &lt;strong&gt;.vimrc&lt;/strong&gt; dele e a partir dali eu modifiquei para ficar de acordo com as minhas necessidades (que eram bem mais simples que as dele).&lt;/p&gt;

&lt;p&gt;Para facilitar, existe um gerenciador de plugins para vim chamado &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt; (não vá se confundir com o &lt;a href=&#34;https://www.google.com.br/search?q=vando&amp;amp;safe=off&amp;amp;client=safari&amp;amp;rls=en&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=0ahUKEwiqhqm086TRAhXCF5AKHQqRBVAQ_AUICSgC&amp;amp;biw=2398&amp;amp;bih=1351#safe=off&amp;amp;tbm=isch&amp;amp;q=vando+calcinha&amp;amp;imgrc=eFoxWJye6tM-TM%3A&#34;&gt;Vando&lt;/a&gt;, hein?!). Eu fiz o meu &lt;em&gt;.vimrc&lt;/em&gt; se baseando nas configurações do &lt;a href=&#34;https://github.com/sergioaugrod/dotfiles/blob/master/.vimrc&#34;&gt;arquivo do Sérgio&lt;/a&gt;. Logo, sugiro que você faça o mesmo. O &lt;a href=&#34;https://github.com/diegoeis/configfiles/blob/master/vimrc&#34;&gt;meu está aqui&lt;/a&gt; e &lt;a href=&#34;https://github.com/sergioaugrod/dotfiles/blob/master/.vimrc&#34;&gt;o dele está aqui&lt;/a&gt;. A diferença dos dois são os plugins que serão instalados. O visual do editor é praticamente o mesmo.&lt;/p&gt;

&lt;p&gt;Para customizar seu vim, baixe algum dos &lt;em&gt;.vimrc&lt;/em&gt; citados acima e coloque na sua pasta Home (&lt;strong&gt;~/&lt;/strong&gt;). Feito isso, instale o &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;, vamos precisar dele.&lt;/p&gt;

&lt;p&gt;Depois abra o Terminal, digite &lt;strong&gt;vim&lt;/strong&gt; e aperte &lt;strong&gt;ENTER&lt;/strong&gt;. O vim feião do seu Mac/Linux vai abrir. Do jeito que ele abrir, digite &lt;strong&gt;:PluginInstall&lt;/strong&gt;. Deve aparecer uma tela mais ou menos assim:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/vundle.png&#34; alt=&#34;&#34; width=&#34;1139&#34; height=&#34;767&#34; class=&#34;aligncenter size-full wp-image-56793&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora feche e abra o Terminal e abra o vim novamente. Ele deve estar mais ou menos igual a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/vim.png&#34; alt=&#34;&#34; width=&#34;1139&#34; height=&#34;767&#34; class=&#34;aligncenter size-full wp-image-56792&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;instale-o-macvim&#34;&gt;Instale o MacVim&lt;/h2&gt;

&lt;p&gt;Bom, vamos facilitar para quem usa Mac, como eu. Para ter uma integração melhor com o Mac, eu uso o MacVim, que é simplesmente o &lt;strong&gt;vim&lt;/strong&gt;, só que mais integrado com o sistema operacional e standalone&amp;#8230; isso quer dizer que ele não está &amp;#8220;preso&amp;#8221; no Terminal. Por exemplo, você tem suporte a edição fullscreen, scroll e copy and paste como se fosse qualquer app do Mac&amp;#8230; basta instalar via brew ou &lt;a href=&#34;http://macvim-dev.github.io/macvim/&#34;&gt;baixar no site oficial&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install macvim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depois execute o comando abaixo ou coloque no seu &lt;strong&gt;.bash_profile&lt;/strong&gt; ou similar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias gvim=&#39;/Applications/MacVim.app/Contents/MacOS/Vim -g&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora, pra abrir um arquivo, basta digitar &lt;strong&gt;gvim [nome_do_arquivo]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;É uma boa ideia você ler o &lt;a href=&#34;https://github.com/macvim-dev/macvim/wiki/FAQ&#34;&gt;FAQ do MacVim&lt;/a&gt;. Tem muita coisa bem explicadinho lá.&lt;/p&gt;

&lt;p&gt;Essa &lt;a href=&#34;https://faraohh.files.wordpress.com/2009/01/vim-super_editor.pdf&#34;&gt;apresentação vai te ajudar muito a entender melhor o vim&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reação é melhor que previsão</title>
      <link>http://tableless.com.br/reacao-e-melhor-que-previsao/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/reacao-e-melhor-que-previsao/</guid>
      <description>

&lt;p&gt;Entender o usuário é algo difícil. Você pode perceber isso facilmente comparando a sua forma de usar algum serviço de internet, digamos o Facebook, com qualquer outra pessoa ao seu redor. Provavelmente você tem um costume totalmente diferente de navegar, consumir conteúdo, comentar etc. Pessoas diferentes, usam de formas diferentes um mesmo produto e isso é totalmente normal. É por isso que tentar prever cenários para desenvolver um produto para internet é algo complicado.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But in the end, for something this complicated, it&amp;#8217;s really hard to design products by focus groups. A lot of times, people don&amp;#8217;t know what they want until you show it to them. &amp;#8212; Steve Jobs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para tentar diminuir essa dificuldade, é costume antigo entre os profissionais entrevistarem os usuários (além de fazer outras cerimônias) afim de tentar entender qual a sua perspectiva do usuário sobre o produto/site. Geralmente, com um bom papo, você consegue pescar uma série de pontos importantes afim de tentar adiantar a solução de problemas de uso. Métodos assim, podem não ser tão eficazes por vários motivos, aqui vão alguns deles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Geralmente o usuário não sabe se expressar.&lt;/strong&gt; Muitas vezes, o que o usuário fala não é exatamente o problema real. Você precisa conhecer muito bem seu projeto para conseguir traduzir qual o sentido real do problema para saber onde atacar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Entrevistas com os usuários dependem do engajamento do usuário.&lt;/strong&gt; Fazer com o que o usuário saia da sua casa para ir até você é uma tarefa difícil e muito incomoda. Para compensar isso, alguns inventam de pagar ou dar alguma recompensa para o usuário, por um trabalho, que ao meu ver, não é de responsabilidade do usuário, mas da pessoa que está planejando o projeto. Já vi pessoas se prepararem uma semana para um encontro com os usuários, mas que nenhum usuário apareceu. As vezes a gente precisa ir até onde o usuário está, o que é ruim, por que o ambiente onde ele trabalha tem muitas distrações.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testes guiados são importantes, mas os resultados são danificados pelo ambiente estranho e pela ansiedade dos usuários.&lt;/strong&gt; Você já parou do lado de um designer ou de um programador enquanto ele executava uma tarefa? Cara, é desconfortável ter um papagaio de pirata &amp;#8220;fiscalizando&amp;#8221; o que você está fazendo. Geralmente os usuários não executam suas tarefas naturalmente, como eles executariam em dias comuns. Quando usamos frequentemente um produto, nós nos acostumamos com a interface, fluxo e outras ações. Em entrevistas, é inevitável que o usuários sinta que está sendo avaliado. Achar o contrário é se enganar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Você não vai obter respostas reais com perguntas meia boca.&lt;/strong&gt; É muito difícil obter boas respostas com perguntas como: &amp;#8220;Qual a primeira ação que você faria nessa tela?&amp;#8221; ou &amp;#8220;Qual a primeira impressão sobre essa tela?&amp;#8221;. Há uma série de técnicas para tornar essas &lt;a href=&#34;http://www.uxdesign.blog.br/pesquisa-com-usuarios/perguntas-a-serem-evitadas-em-pesquisa-com-usuarios/&#34;&gt;entrevistas mais inteligentes&lt;/a&gt;, mas infelizmente isso não é tão fácil de executar. Conto nos dedos as pessoas que vi fazerem isso da maneira correta.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tenho certeza de que você pode citar vários outros cenários parecidos, onde usamos várias técnicas e cerimonias na tentativa de prever qual seria a melhor solução para o usuário, mas que na real, não dão respostas que possamos usar &lt;strong&gt;de verdade&lt;/strong&gt; para solucionar os problemas do produto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gifimgs.com/res/1216/585c791fb62d8123354586.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Outro dia vi uma apresentação com a seguinte frase: &lt;strong&gt;Evite Fails no projeto e economize tempo&lt;/strong&gt;. Para mim, esse é o típico comentário de alguém que não tem a mentalidade ágil e que não sabe trabalhar com pequenas entregas incrementais, que atrasa a entrega de valor para o cliente porque quer entregar &amp;#8220;algo completo&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Bom, minha sugestão: &lt;strong&gt;não tente prever o que seria melhor para o usuário, tente reagir à experimentos e aos dados de uso real de produção&lt;/strong&gt;. Colocar no ar uma mudança pequena e medir o comportamento dos usuários, ajuda muito mais a entender qual será o próximo passo. É um erro tentar prever o que seria melhor para um produto se baseando na opinião de pessoas, que embora sejam seus clientes diretos, tem expectativas e níveis de conhecimento diferentes.&lt;/p&gt;

&lt;h2 id=&#34;entrega-rápida-de-valor&#34;&gt;Entrega rápida de valor&lt;/h2&gt;

&lt;p&gt;Essa previsão mentirosa me leva a outro assunto: entregas pequenas são melhores que entregas grandes.&lt;/p&gt;

&lt;p&gt;Planejar grandes mudanças de uma vez é furada. Qualquer um sabe disso. Mudanças pequenas são controláveis, causam menos impacto, são fáceis de medir os acertos e os erros. Existem exceções, claro, por exemplo em casos onde o produto precisa de um redesign completo e o realinhamento progressivo de interface é impossível. Há produtos antigos que não tem a possibilidade de fazer um realinhamento ao longo do tempo e por isso o redesign completo, feito de uma vez, é a única opção. Mas tirando essas exceções, entregas pequenas, funcionais e incrementais é o mais indicado.&lt;/p&gt;

&lt;p&gt;Eu sei que é difícil pensar dessa forma. A maioria dos UXzes e Devs prefere pensar na funcionalidade por inteiro. Eles têm a falsa impressão de que entregar algo pequeno, mesmo que seja funcional, é o mesmo que entregar algo incompleto. Não entra na cabeça deles entregar um pedacinho em vez da obra completa. Eles podem fazer um pedaço pequeno, porém essencial da funcionalidade, medir o comportamento do usuário e aí sim tomar a decisão de qual será o próximo passo. Transformação e adaptação é o nome do jogo.&lt;/p&gt;

&lt;p&gt;Mas há um ponto para tomar cuidado em entregas incrementais: a feature precisa ser terminada. Ela precisa ter um ponto onde possamos dizer que ela está &amp;#8220;completa&amp;#8221;. A abordagem de entregas incrementais pode virar um ciclo infinito e a feature pode mudar muitas vezes durante um longo período de tempo. O outro ponto é que se o P.O. não priorizar as outras tarefas da feature, ela realmente pode ficar incompleta, embora fique totalmente funcional.&lt;/p&gt;

&lt;p&gt;Moral da história: prefira tomar decisões baseadas em dados ao invés de tentar prever as ações do usuário. Dados são fatos. Usuários, infelizmente, mentem&amp;#8230; e há um monte de profissionais que caem nessas mentiras.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integração Contínua com Travis CI — Parte 01</title>
      <link>http://tableless.com.br/integracao-continua-com-travis-ci-parte-01/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/integracao-continua-com-travis-ci-parte-01/</guid>
      <description>

&lt;p&gt;O objetivo geral do artigo é mostrar como fazer uma Integração Contínua (técnica de desenvolvimento agile) com &lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travi CI&lt;/a&gt;, criando um repositório no &lt;a href=&#34;https://github.com/&#34;&gt;O objetivo geral do artigo é mostrar como fazer uma Integração Contínua (técnica de desenvolvimento agile) com &lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travi CI&lt;/a&gt;, criando um repositório no&lt;/a&gt; e publicando nosso projeto em um Host utilizando o &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nesse primeiro post iremos montar toda nossa estrutura de diretórios e configuração de arquivos. Por fim iremos criar nosso repositório no GitHub e enviar o nosso projeto local.&lt;/p&gt;

&lt;p&gt;No segundo post iremos registrar nossa aplicação no Dribbble, configurar o Travis e Heroku e finalizar nossa aplicação client-side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sobre o Travis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Travis CI é uma plataforma/serviço de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Integração Contínua&lt;/a&gt;, que é free para todos os projetos open source hospedados no GitHub. Com apenas um arquivo chamado &lt;em class=&#34;markup--em markup--p-em&#34;&gt;.travis.yml&lt;/em&gt; contendo algumas informações sobre o projeto, podemos produzir builds automatizados com todas as mudanças, para o branch master ou outro, e até mesmo através de &lt;em class=&#34;markup--em markup--p-em&#34;&gt;pull request&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pré Requisitos&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conta no GitHub&lt;/li&gt;
&lt;li&gt;Conta no Heroku&lt;/li&gt;
&lt;li&gt;Para o Travis você poderá usar a mesma conta do GitHub&lt;/li&gt;
&lt;li&gt;Git, NodeJS e Bower instalado&lt;/li&gt;
&lt;li&gt;Um editor de texto: Sublime Text, Atom ou qualquer outro de sua preferência.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Descrição do Projeto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Iremos implementar uma aplicação client-side que consulta uma API do site **[O objetivo geral do artigo é mostrar como fazer uma Integração Contínua (técnica de desenvolvimento agile) com &lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travi CI&lt;/a&gt;, criando um repositório no &lt;a href=&#34;https://github.com/&#34;&gt;O objetivo geral do artigo é mostrar como fazer uma Integração Contínua (técnica de desenvolvimento agile) com &lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travi CI&lt;/a&gt;, criando um repositório no&lt;/a&gt; e publicando nosso projeto em um Host utilizando o &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nesse primeiro post iremos montar toda nossa estrutura de diretórios e configuração de arquivos. Por fim iremos criar nosso repositório no GitHub e enviar o nosso projeto local.&lt;/p&gt;

&lt;p&gt;No segundo post iremos registrar nossa aplicação no Dribbble, configurar o Travis e Heroku e finalizar nossa aplicação client-side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sobre o Travis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Travis CI é uma plataforma/serviço de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Integração Contínua&lt;/a&gt;, que é free para todos os projetos open source hospedados no GitHub. Com apenas um arquivo chamado &lt;em class=&#34;markup--em markup--p-em&#34;&gt;.travis.yml&lt;/em&gt; contendo algumas informações sobre o projeto, podemos produzir builds automatizados com todas as mudanças, para o branch master ou outro, e até mesmo através de &lt;em class=&#34;markup--em markup--p-em&#34;&gt;pull request&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pré Requisitos&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conta no GitHub&lt;/li&gt;
&lt;li&gt;Conta no Heroku&lt;/li&gt;
&lt;li&gt;Para o Travis você poderá usar a mesma conta do GitHub&lt;/li&gt;
&lt;li&gt;Git, NodeJS e Bower instalado&lt;/li&gt;
&lt;li&gt;Um editor de texto: Sublime Text, Atom ou qualquer outro de sua preferência.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Descrição do Projeto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Iremos implementar uma aplicação client-side que consulta uma API do site &lt;strong&gt;]&lt;a href=&#34;https://dribbble.com&#34;&gt;4&lt;/a&gt;&lt;/strong&gt; e mostre os Shots mais populares. Usaremos as seguintes tecnologias no front-end: &lt;strong&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;Angularjs&lt;/a&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;a href=&#34;http://materializecss.com&#34;&gt;Materialize.css&lt;/a&gt;&lt;/strong&gt; como framework de componentes. Para gerenciar os pacotes e dependências utilizaremos o Bower. No server-side usaremos a plataforma NodeJS como nosso servidor web, e o &lt;strong&gt;&lt;a href=&#34;http://gruntjs.com/&#34;&gt;Gruntjs&lt;/a&gt;&lt;/strong&gt; para automatizar algumas tarefas. Para o versionamento utilizaremos o &lt;strong&gt;Git&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criando Nossa Estrutura de Diretórios&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*b5H0NRwfSN13Ex659Hw_Ag.png&#34; alt=&#34;Estrutura de Diretórios&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Os arquivos e diretórios podem ser criados da maneira que você se sentir mas a vontade. &lt;strong&gt;OBS.:&lt;/strong&gt; Não crie o diretório “.git”, pois ele será criado através da nossa linha de comando, o restante pode ser criado manualmente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Detalhamento da Estrutura&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li id=&#34;4172&#34; class=&#34;graf graf--li graf-after--h4&#34;&gt;
    &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;client&lt;/strong&gt;: diretório onde ficará todos os nossos arquivos de front-end.
  &lt;/li&gt;
  &lt;li id=&#34;fc63&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;.bowerrc&lt;/strong&gt;: arquivo de configuração do &lt;em class=&#34;markup--em markup--li-em&#34;&gt;Bower&lt;/em&gt;, é nele que iremos definir onde serão instalados nossos pacotes. Se você não criá-lo as dependências serão instaladas no diretório chamado &lt;em class=&#34;markup--em markup--li-em&#34;&gt;bower_components&lt;/em&gt; padrão do bower.
  &lt;/li&gt;
  &lt;li id=&#34;d36f&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;.gitignore&lt;/strong&gt;: arquivos que podem ser ignorados pelo versionamento do Git.
  &lt;/li&gt;
  &lt;li id=&#34;94ba&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;.travis.yml&lt;/strong&gt;: arquivo de configuração da nossa integração com o Travis.
  &lt;/li&gt;
  &lt;li id=&#34;c613&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;Gruntfile.js&lt;/strong&gt;: arquivo onde ficará todas as configurações de tarefas automatizadas, como por exemplo: concatenação e minificação dos arquivos.
  &lt;/li&gt;
  &lt;li id=&#34;2e90&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;server.js&lt;/strong&gt;: arquivo onde faremos a configuração de nosso servidor web.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;deixe o diretório &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;client&lt;/strong&gt; com a seguinte estrutura:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*5ohek1gfXzLGL5OTdmrcPQ.png&#34; alt=&#34;Diretório Client&#34; /&gt;&lt;/p&gt;

&lt;p&gt;código do arquivo &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;.bowerrc&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{&amp;lt;br /&amp;gt;
&amp;quot;directory&amp;quot; : &amp;quot;client/vendor&amp;quot;&amp;lt;br /&amp;gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;código do arquivo &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;.gitignore&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node_modules/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;código do arquivo .travis.yml&lt;/p&gt;

&lt;p&gt;&lt;code&gt;language: node_js&amp;lt;br /&amp;gt;
node_js:&amp;lt;br /&amp;gt;
- &amp;quot;6.1&amp;quot;&amp;lt;br /&amp;gt;
- &amp;quot;5.12.0&amp;quot;&amp;lt;br /&amp;gt;
- &amp;quot;5.11.1&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;código do arquivo &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;server.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var express = require(&#39;express&#39;);&amp;lt;br /&amp;gt;
var serveStatic = require(&#39;serve-static&#39;);&amp;lt;br /&amp;gt;
var app = express();&amp;lt;br /&amp;gt;
var client = process.env.NODE_APP_DIRECTORY === &#39;production&#39;&amp;lt;br /&amp;gt;
? &#39;/client/dist&#39; : &#39;/client&#39;;&amp;lt;br /&amp;gt;
var port = process.env.PORT || 8081;&amp;lt;br /&amp;gt;
app.use(serveStatic(__dirname + client));&amp;lt;br /&amp;gt;
app.listen(port,function(){&amp;lt;br /&amp;gt;
console.log(&#39;localhost:&#39;+port);&amp;lt;br /&amp;gt;
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Link para o código do arquivo &lt;strong&gt;&lt;a href=&#34;https://gist.github.com/dejaneves/b983dd0cfd54d63d6bd9f4310a812289&#34;&gt;server.js&lt;/a&gt; &lt;/strong&gt;no GitHub&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;código do arquivo &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;&lt;a href=&#34;https://gist.github.com/dejaneves/996644e20b2f651939c2da892dbea555#file-gruntfile-ci-agile-th-js&#34;&gt;Gruntfile.js&lt;/a&gt;. &lt;/strong&gt;O código e toda sua configuração, será explicado na segunda parte do post.&lt;/p&gt;

&lt;h4 id=&#34;d351.graf.graf--h4.graf-after--figure&#34;&gt;Bower: Instalação dos Pacotes e suas dependências&lt;/h4&gt;

&lt;p&gt;Vá para raiz do projeto e digite o seguinte comando para instalação das dependências.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ bower install angular angular-resource angular-ui-router angular-sanitize&amp;lt;br /&amp;gt;
angular-loading-bar bootstrap materialize&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;após a execução desse comando o seu diretório &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;client/vendor&lt;/strong&gt; ficará da seguinte forma:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*0z-hRCazRdhCpIMfe3gQ1g.png&#34; alt=&#34;Pasta Client&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;40e5.graf.graf--h4.graf-after--figure&#34;&gt;Nodejs: Instalação e Configuração dos Pacotes&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ npm init -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;após a execução desse comando será criado um arquivo na raiz do seu projeto chamado &lt;em class=&#34;markup--em markup--p-em&#34;&gt;package.json&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;bf1d.graf.graf--h4.graf-after--p&#34;&gt;Instalação das Dependências&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ npm install express serve-static --save&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;3693.graf.graf--h4.graf-after--pre&#34;&gt;Iniciando o Versionamento com o GIT&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git init&amp;lt;br /&amp;gt;
$ git add .&amp;lt;br /&amp;gt;
$ git commit -m &amp;quot;primeiro commit&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;6204.graf.graf--h4.graf-after--pre&#34;&gt;Executando a aplicação&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;node server.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;o seu sistema terá que exibir a seguinte mensagem&lt;/p&gt;

&lt;p&gt;&lt;code&gt;client: /client&amp;lt;br /&amp;gt;
environment: undefined&amp;lt;br /&amp;gt;
localhost:8081&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;para parar a execução do servidor pressione &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;ctrl&lt;/strong&gt; + &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;c&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;66d0.graf.graf--h3.graf-after--p&#34;&gt;Criando Repositório no GitHub&lt;/h3&gt;

&lt;p id=&#34;3970&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;
  Abra o site do &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;GitHub&lt;/a&gt;, crie um repositório público chamado &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;ci-agile-th.&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*h3yRLVKf2peVF_UucGQYJg.png&#34; alt=&#34;Criando um repositório&#34; /&gt;&lt;/p&gt;

&lt;p&gt;após a criação aparecerá a seguinte tela&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*VQf-VyPNBK8dSQl3Lqmq_A.png&#34; alt=&#34;Repositório&#34; /&gt;digite os comandos que estão dentro do 2º bloco na raiz do seu projeto&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git remote add origin https://github.com/dejaneves/ci-agile-th.git&amp;lt;br /&amp;gt;
$ git push -u origin master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;te espero no próximo post.&lt;/p&gt;

&lt;h3 id=&#34;8a4b.graf.graf--h3.graf-after--p&#34;&gt;Links Úteis&lt;/h3&gt;

&lt;p id=&#34;0259&#34; class=&#34;graf graf--p graf-after--h3&#34;&gt;
  Instalação do NodeJS
&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li id=&#34;67c7&#34; class=&#34;graf graf--li graf-after--p&#34;&gt;
    &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;https://udgwebdev.com/node-js-para-leigos-instalacao-e-configuracao&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Underground WebDev&lt;/a&gt;
  &lt;/li&gt;
  &lt;li id=&#34;0c62&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;http://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tableless&lt;/a&gt;
  &lt;/li&gt;
  &lt;li id=&#34;e04c&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;https://www.digitalocean.com/community/tutorials/como-instalar-o-node-js-em-um-servidor-ubuntu-14-04-pt&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Digitalocean&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&#34;273d&#34; class=&#34;graf graf--p graf-after--li&#34;&gt;
  Instalação do Bower
&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li id=&#34;caf2&#34; class=&#34;graf graf--li graf-after--p&#34;&gt;
    &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;http://tableless.com.br/bower-na-pratica&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Tableless&lt;/a&gt;
  &lt;/li&gt;
  &lt;li id=&#34;4a32&#34; class=&#34;graf graf--li graf-after--li&#34;&gt;
    &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;http://www.carvalhoweb.com/articles/bower-guia-definitivo&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Carvalho Web&lt;/a&gt;
  &lt;/li&gt;
  &lt;li id=&#34;1621&#34; class=&#34;graf graf--li graf-after--li graf--last&#34;&gt;
    &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;http://blog.thiagobelem.net/gerenciando-assets-com-o-bower&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Thiago Belem&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Dicas para transformar leads em vendas</title>
      <link>http://tableless.com.br/dicas-para-transformar-leads-em-vendas/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/dicas-para-transformar-leads-em-vendas/</guid>
      <description>

&lt;p&gt;Melhorar o relacionamento com seu público-alvo e consequentemente alavancar as vendas são os objetivos dos e-commerces que investem em marketing digital. Para isso, é preciso não só apostar em um design responsivo (adaptado para internet móvel), mas também em uma &lt;a href=&#34;http://www.ibmmarketingcloud.com/pt-br/gestao-de-leads.html&#34;&gt;eficaz gestão de leads&lt;/a&gt;. Dessa forma, as chances de conversão irão aumentar bastante. Confira algumas dicas para transformar leads em vendas.&lt;/p&gt;

&lt;h3 id=&#34;crie-sua-própria-lista-de-leads&#34;&gt;&lt;strong&gt;Crie sua própria lista de leads&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Quando o assunto é conversão, de nada adianta ter uma extensa lista de leads se ela está recheada de pessoas que não se interessam por seus produtos ou serviços. Se você quer realmente transformar leads em vendas, a dica é nunca comprar uma lista de e-mails.  Essa prática costuma resultar em impacto negativo para a empresa.&lt;/p&gt;

&lt;p&gt;Afinal, se sua comunicação não foi solicitada pelo internauta, ele irá interpretá-la como spam. E assim sua marca pode nem ter a chance de criar um relacionamento com o prospect. Ou pior ainda, começar mal por ser um contato imposto por você.&lt;/p&gt;

&lt;h3 id=&#34;leads-de-qualidade-é-o-segredo-do-sucesso&#34;&gt;&lt;strong&gt;Leads de qualidade é o segredo do sucesso&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Criar seus próprios leads é indispensável para quem tem como objetivo aumentar as vendas. Isso porque se sua comunicação não for bem-vinda, por mais que você se esforce para fazer uma brilhante campanha de e-mail marketing com conteúdo atraente, só a taxa de descadastramento e rejeição irão crescer.&lt;/p&gt;

&lt;p&gt;A dica para iniciar um lead de qualidade é oferecer recompensas digitais em troca dos dados pessoais. Assim o internauta escolhe se quer mesmo criar um relacionamento com sua marca.&lt;/p&gt;

&lt;p&gt;No primeiro e-mail marketing de sua campanha não deixe de lembrar de onde vocês se conheceram. Ou seja, relembre que a comunicação foi autorizada quando a pessoa recebeu, por exemplo, o  cupom de desconto tal.&lt;/p&gt;

&lt;h3 id=&#34;automação-de-marketing-facilita-distribuição-do-conteúdo&#34;&gt;&lt;strong&gt;Automação de marketing facilita distribuição do conteúdo&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A nutrição de leads é muito importante para aumentar as conversões. Para facilitar a vida do responsável pela campanha de e-mail marketing e tornar toda a comunicação entre sua marca e o internauta mais eficaz, a dica é apostar em ferramentas para automatizar o processo. Assim, você consegue entregar o conteúdo certo na hora certa.&lt;/p&gt;

&lt;h3 id=&#34;conteúdo-personalizado-faz-a-diferença&#34;&gt;&lt;strong&gt;Conteúdo personalizado faz a diferença&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Quem não gosta de ser chamado pelo nome? E de receber uma mensagem com conteúdo que parece ter sido selecionado especialmente para você. E ainda manda um brinde útil como um cupom de desconto no produto que você quer comprar.&lt;/p&gt;

&lt;p&gt;Cuidados como esses são fundamentais para conquistar sua audiência. Assim as chances de conversão aumentam significativamente. A dica para personalizar seu e-mail marketing é contar com processos automatizados de envio. É muito mais assertivo e prático.&lt;/p&gt;

&lt;h3 id=&#34;equipe-de-vendas-precisa-trabalhar-em-parceria-com-o-marketing&#34;&gt;&lt;strong&gt;Equipe de vendas precisa trabalhar em parceria com o marketing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Essa é uma prática que muitas empresas de sucesso adotam. O conteúdo precisa ter sempre uma Call to Action que leve a uma landing page da sua empresa. Mas, não é só isso.&lt;/p&gt;

&lt;p&gt;Todos os textos do blog e das mídias sociais precisam ser pensados para esclarecer o máximo de dúvidas dos internautas. Dessa forma, a equipe de venda só irá entrar em contato quando realmente precisar. E para fazer a conversão de forma rápida.&lt;/p&gt;

&lt;p&gt;Dessa forma, o telemarketing insistente e nada bem-vindo para o consumidor passa a ser coisa do passado. Mais do que transformar leads em vendas, sua empresa começa um relacionamento bom e duradouro com os internautas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adicionando SSL no NGINX com o Let’s Encrypt</title>
      <link>http://tableless.com.br/adicionando-ssl-no-nginx-com-o-lets-encrypt/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/adicionando-ssl-no-nginx-com-o-lets-encrypt/</guid>
      <description>

&lt;p&gt;O &lt;strong&gt;Let&amp;#8217;s Encrypt&lt;/strong&gt; é uma forma fácil, automatizada e gratuita de se inserir &lt;strong&gt;&lt;a href=&#34;https://www.1and1.com/certificado-ssl&#34;&gt;SSL&lt;/a&gt;&lt;/strong&gt; em uma aplicação &lt;em&gt;web&lt;/em&gt;. A utilização do &lt;strong&gt;SSL&lt;/strong&gt; é bem importante quando se há autenticação, tráfego de dados privados ou até mesmo para ser melhor colocado no &lt;em&gt;ranking&lt;/em&gt; do &lt;em&gt;Google&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Neste artigo vou demonstrar como gerar e adicionar o &lt;strong&gt;SSL&lt;/strong&gt; no &lt;strong&gt;NGINX&lt;/strong&gt; com a ferramenta &lt;strong&gt;Let&amp;#8217;s Encrypt&lt;/strong&gt;. Irei utilizar o sistema operacional &lt;em&gt;Debian&lt;/em&gt; para executar os comandos, mas estes podem ser facilmente modificados para serem executados em qualquer &lt;em&gt;distro&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;instalandooletsencrypt&#34;&gt;Instalando o Let&amp;#8217;s Encrypt:&lt;/h4&gt;

&lt;p&gt;Clone o projeto no &lt;em&gt;github&lt;/em&gt; e redirecione para o caminho &lt;strong&gt;/opt/letsencrypt&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt
&lt;/pre&gt;

&lt;p&gt;É necessário ter o &lt;em&gt;git&lt;/em&gt; instalado, caso não tenha:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ sudo apt-get install git
&lt;/pre&gt;

&lt;h4 id=&#34;preparandoonginxparaservalidado&#34;&gt;Preparando o NGINX para ser validado:&lt;/h4&gt;

&lt;p&gt;O &lt;strong&gt;Let&amp;#8217;s Encrypt&lt;/strong&gt; valida se o domínio realmente é seu, então para isso é necessário adicionar uma regra no seu &lt;em&gt;site&lt;/em&gt; do &lt;strong&gt;NGINX&lt;/strong&gt;. Adicione o &lt;strong&gt;location&lt;/strong&gt; &lt;em&gt;^/.well-known&lt;/em&gt; no seu site &lt;strong&gt;(/etc/nginx/sites-enabled/yoursite)&lt;/strong&gt;, como por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;server {  
    listen 80;
    server_name your-domain.com.br;

    location ~ ^/.well-known {
        root /var/www/yoursite;
    }

    location / {
        return 301 https://www.$server_name$request_uri;
    }
}
&lt;/pre&gt;

&lt;p&gt;Este &lt;strong&gt;location&lt;/strong&gt; será requisitado pelo &lt;strong&gt;Let&amp;#8217;s Encrypt&lt;/strong&gt; para confirmar sua identidade. Lembrando que você deve substituir o &lt;strong&gt;root&lt;/strong&gt; e o &lt;strong&gt;server_name&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Após adicionar o &lt;em&gt;well-known&lt;/em&gt;, reinicie o seu &lt;strong&gt;NGINX&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ sudo systemctl restart nginx
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;É bom lembrar que o seu domínio deve estar apontando para sua aplicação para obter sucesso com o &lt;strong&gt;SSL&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;gerandoosslcomoletsencrypt&#34;&gt;Gerando o SSL com o Let&amp;#8217;s Encrypt:&lt;/h4&gt;

&lt;p&gt;Substitua no comando abaixo, o caminho &lt;strong&gt;/var/www/yoursite&lt;/strong&gt; pelo diretório raiz do seu site no &lt;strong&gt;NGINX&lt;/strong&gt;, e também o &lt;strong&gt;yourdomain.com.br&lt;/strong&gt; e &lt;strong&gt;www.yourdomain.com.br&lt;/strong&gt; pelo seu domínio:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ sudo /opt/letsencrypt/letsencrypt-auto certonly -a webroot --webroot-path=/var/www/yoursite -d yourdomain.com.br -d www.yourdomain.com.br
&lt;/pre&gt;

&lt;p&gt;Neste processo irá ser solicitado seu &lt;em&gt;e-mail&lt;/em&gt;, para caso necessite da recuperação de seu certificado.&lt;/p&gt;

&lt;h4 id=&#34;adicionandoocertificadoemsuaaplicao&#34;&gt;Adicionando o certificado em sua aplicação:&lt;/h4&gt;

&lt;p&gt;Após o certificado ser gerado com sucesso, altere novamente o seu arquivo de regras do seu site &lt;strong&gt;(/etc/nginx/sites-enabled/yoursite)&lt;/strong&gt;, adicionando mais um &lt;strong&gt;server&lt;/strong&gt;, desta vez o de &lt;strong&gt;ssl&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;server {  
    listen 443 ssl;
    server_name yourdomain.com.br www.yourdomain.com.br;

    location / {
        proxy_pass http://localhost:8080;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
    }

    location ~ ^/.well-known {
        root /var/www/yoursite;
    }

    ssl_certificate /etc/letsencrypt/live/yourdomain.com.br/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com.br/privkey.pem;
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Lembrando que você deve alterar o &lt;strong&gt;location /&lt;/strong&gt; com as configurações específicas da sua aplicação web.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Reinicie novamente o seu &lt;strong&gt;NGINX&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ sudo systemctl restart nginx
&lt;/pre&gt;

&lt;p&gt;Entre em seu domínio utilizando o &lt;strong&gt;https&lt;/strong&gt; e veja se o processo ocorreu com sucesso.&lt;/p&gt;

&lt;h4 id=&#34;conferindoaqualidadedoseussl&#34;&gt;Conferindo a qualidade do seu SSL:&lt;/h4&gt;

&lt;p&gt;Altere &lt;em&gt;example.com&lt;/em&gt; pelo seu domínio:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ssllabs.com/ssltest/analyze.html?d=example.com&#34;&gt;https://www.ssllabs.com/ssltest/analyze.html?d=example.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;melhorandoaqualidadedoseucertificado&#34;&gt;Melhorando a qualidade do seu certificado:&lt;/h4&gt;

&lt;p&gt;É importante validar as cifras utilizadas, limitar a versão do protocolo &lt;strong&gt;SSL&lt;/strong&gt;, entre outras coisas. Para isso, recomendo a leitura do seguinte tópico na wiki da Mozilla, &lt;a href=&#34;https://wiki.mozilla.org/Security/Server_Side_TLS&#34;&gt;Server Side TLS&lt;/a&gt;. Existe também o &lt;a href=&#34;https://mozilla.github.io/server-side-tls/ssl-config-generator&#34;&gt;Mozilla SSL Configuration Generator&lt;/a&gt;, um gerador de configuração &lt;strong&gt;SSL&lt;/strong&gt; para diversos servidores de aplicação.&lt;/p&gt;

&lt;h4 id=&#34;renovandoseucertificadocomcrontab&#34;&gt;Renovando seu certificado com crontab:&lt;/h4&gt;

&lt;p&gt;O certificado gerado é válido por 3 meses, para facilitar a renovação, você pode criar um &lt;em&gt;cronjob&lt;/em&gt; para fazer este trabalho:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ crontab -e
&lt;/pre&gt;

&lt;p&gt;Adicione no final do arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;0 0 1 */2 * /opt/letsencrypt/letsencrypt-auto renew --quiet --no-self-upgrade  
0 0 1 */2 * systemctl reload nginx  
&lt;/pre&gt;

&lt;h3 id=&#34;concluindo&#34;&gt;Concluindo:&lt;/h3&gt;

&lt;p&gt;Neste artigo foi demonstrando a geração do &lt;strong&gt;SSL&lt;/strong&gt; para o &lt;strong&gt;NGINX&lt;/strong&gt;, mas este mesmos passos podem ser facilmente executados em qualquer servidor de aplicação, com algumas modificações. Lembrando que existem outros comandos específicos da ferramenta &lt;strong&gt;Let&amp;#8217;s Encrypt&lt;/strong&gt;, como &lt;strong&gt;letsencrypt-apache&lt;/strong&gt; que faz todo o trabalho pra você no caso do &lt;em&gt;Apache&lt;/em&gt;, mas tentei demonstrar a forma genérica, que pode servir para outros servidores.&lt;/p&gt;

&lt;h3 id=&#34;referências-e-links&#34;&gt;Referências e Links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://letsencrypt.org&#34;&gt;https://letsencrypt.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/certbot/certbot&#34;&gt;https://github.com/certbot/certbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/blog/free-certificates-lets-encrypt-and-nginx&#34;&gt;https://www.nginx.com/blog/free-certificates-lets-encrypt-and-nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;O certificado &lt;a href=&#34;https://www.1and1.com/certificado-ssl&#34;&gt;SSL&lt;/a&gt; também pode ser contratado na &lt;a href=&#34;https://www.1and1.com/&#34;&gt;1&amp;amp;1&lt;/a&gt; ou Certisign.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proteja seu código usando o Webpack</title>
      <link>http://tableless.com.br/proteja-seu-codigo-usando-o-webpack/</link>
      <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/proteja-seu-codigo-usando-o-webpack/</guid>
      <description>

&lt;p&gt;Não é um eufemismo dizer que que as ferramentas de front-end avançam rapidamente. Por um tempo, &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;Grunt&lt;/a&gt; foi o principal automatizador. E desde então a comunidade adotou o &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt;, uma alternativa de streaming. Embora essas ferramentas sejam ótimas, você ainda precisará trabalhar dura para manter o seu sistema. E é aí que entram os empacotadores como o &lt;a href=&#34;http://browserify.org/&#34; target=&#34;_blank&#34;&gt;Browserify&lt;/a&gt; e &lt;a href=&#34;https://webpack.github.io/&#34; target=&#34;_blank&#34;&gt;Webpack&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;como-usar-um-empacotador&#34;&gt;Como usar um empacotador&lt;/h2&gt;

&lt;p&gt;Os empacotadores resolvem o problema fundamental no desenvolvimento front-end. Eles permitem que você transforme assets arbitrários em algo que possa ser consumido por um navegador. Se você está usando NPM, e deveria, você pode empacotar todos esses pacotes que está utilizando em seu aplicativo para poder usá-los no navegador. Mas há a possibilidade de você querer fazer muitas outras coisas além de empacotar, então você vai entrelaçar isso com alguma ferramenta de automação como o Grunt ou Gulp. Você pode até ignorar um task runner e implementar suas tarefas por meio da seção de &lt;strong&gt;scripts&lt;/strong&gt; &lt;code&gt;package.json&lt;/code&gt; (se estiver usando NPM) para configurar as transformações do Browserify.&lt;/p&gt;

&lt;h2 id=&#34;conhecendo-o-webpack&#34;&gt;Conhecendo o Webpack&lt;/h2&gt;

&lt;p&gt;Você pode alcançar resultados similares tanto com o Browserify quanto o Webpack. O Browserify está mais próximo da filosofia Unix. Ao usá-lo você está literalmente colando pequenos utilitários juntos. Como resultado, o Browserify é fácil de conseguir. Mas se você tem uma lista longa de transformações que deseja aplicar em seu código é melhor utilizar um task runner como Grunt ou Gulp para automatizar esse processo.&lt;/p&gt;

&lt;p&gt;Por outro lado, se você usa Webpack pode nem precisar do Grunt ou Gulp. O Webpack presume que existem certas tarefas que você sempre deseja executar. É claro que você deseja mover os arquivos de uma pasta de origem para um diretório de compilação. Claro que você vai querer completar seu código fonte usando uma (geralmente longa) lista de transformações (aliás, elas são chamadas de &lt;strong&gt;loaders&lt;/strong&gt;, ou carregadores, no Webpack). É claro que você quer usar bibliotecas em diferentes formatos de módulo como CoomonJS, RequireJS ou os novos módulos ES6 se desejar.&lt;/p&gt;

&lt;p&gt;Você pode até desejar lidar com diferentes formatos de arquivos. Para lhe dar um exemplo melhor do que isso significa na prática, considere os códigos abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;style.css&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    font-family: sans-serif;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// load style to the resulting bundle
require(&#39;./style.css&#39;);

// just print hello, normally we would do
// something more involved and start the
// application here
console.log(&#39;hello world&#39;);&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var webpack = require(&#39;webpack&#39;);

    module.exports = {
    // this is the top level file or set of files
    entry: &#39;./index.js&#39;,
    // it will bundle everything inside this output path
    output: {
    path: __dirname,
    filename: &#39;bundle.js&#39;
},
module: {
loaders: [
{
    // 1. resolve @import and url() through css-loader
    // 2. load the result to bundle using style-loader
    // note that loaders are interpreted from right to left
    test: /.css$/, // A regexp to test the require path
    loaders: [&#39;style&#39;, &#39;css&#39;]
}
]
},
plugins: [
    // minify output
    new webpack.optimize.UglifyJsPlugin()
]
};&lt;/pre&gt;

&lt;p&gt;O Webpack permite que você carregue o CSS da mesma forma que carrega outros códigos com &lt;a href=&#34;https://github.com/webpack/css-loader&#34; target=&#34;_blank&#34;&gt;css-loader&lt;/a&gt; e &lt;a href=&#34;https://github.com/webpack/style-loader&#34; target=&#34;_blank&#34;&gt;style-loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por que você iria querer usar o require para o seu CSS em vez da mesma velha maneira que temos utilizado CSS? Bem, porque o Webpack é inteligente o suficiente para concatenar seu CSS quando ele é pequeno o bastante, caso contrário ele irá minificar o arquivo e dar a ele um nome único para fins de cache. O mesmo pode ser feito com imagens utilizando o &lt;a href=&#34;https://github.com/webpack/url-loader&#34; target=&#34;_blank&#34;&gt;url-loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você executou o Webpack contra essa configuração, você irá acabar com um &lt;code&gt;bundle.js&lt;/code&gt; minificado que contém CSS inline. Pode parecer muito esforço para alcançar um simples resultado como esse. Isso está além do ponto. Considere o seguinte:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;E se você quisesse usar os novos recursos do Javascript em seu projeto? Você teria que configurar o &lt;a href=&#34;https://www.npmjs.com/package/babel-loader&#34; target=&#34;_blank&#34;&gt;babel-loader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse usar CSS compilado? Você precisaria configurar o &lt;a href=&#34;https://github.com/webpack/less-loader&#34; target=&#34;_blank&#34;&gt;less-loader&lt;/a&gt; ou o &lt;a href=&#34;https://github.com/jtangelder/sass-loader&#34; target=&#34;_blank&#34;&gt;sass-loader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse sourcemaps? Você teria que configurar a opção &lt;a href=&#34;https://webpack.github.io/docs/configuration.html#devtool&#34; target=&#34;_blank&#34;&gt;devtool&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse uma saída UMD para sua biblioteca? É preciso configurar o &lt;a href=&#34;https://webpack.github.io/docs/configuration.html#output-librarytarget&#34; target=&#34;_blank&#34;&gt;output.libraryTarget&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse um servidor de desenvolvimento &lt;em&gt;hot loading&lt;/em&gt;? Você precisaria configurar o &lt;a href=&#34;https://webpack.github.io/docs/webpack-dev-server.html&#34; target=&#34;_blank&#34;&gt;webpack-dev-server&lt;/a&gt; ou construir um sozinho baseado no Express, como mostrado no &lt;a href=&#34;https://github.com/gaearon/react-transform-boilerplate&#34; target=&#34;_blank&#34;&gt;react-transform-boilerplate&lt;/a&gt;. O recurso de &lt;em&gt;hot loading&lt;/em&gt; separa Webpack conforme atualiza seu navegador automaticamente enquanto mantém o estado do aplicativo.&lt;/li&gt;
&lt;li&gt;E se você quisesse múltiplas metas (desenvolvimento, produção, teste)? Poderia usar uma solução como a &lt;a href=&#34;https://www.npmjs.com/package/webpack-merge&#34; target=&#34;_blank&#34;&gt;webpack-merge&lt;/a&gt; e conectar seu automatizador de tarefas com ela.&lt;/li&gt;
&lt;li&gt;E se você quisesse carregar algumas dependências lentamente? Você precisaria configurar o &lt;a href=&#34;https://webpack.github.io/docs/code-splitting.html#require-ensure&#34; target=&#34;_blank&#34;&gt;require.ensure&lt;/a&gt;. O Webpack irá gerar pacotes separados para dividir os pontos e carregá-los sob demanda.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basicamente, você pode desenvolver as configurações para várias direções baseado em suas necessidades. Há definitivamente uma curva de aprendizado e leva um tempo para entender todas as opções. Dito isso, a abordagem é poderosa uma vez que você entende.&lt;/p&gt;

&lt;h2 id=&#34;conectando-o-webpack-com-jscrambler&#34;&gt;Conectando o Webpack com Jscrambler&lt;/h2&gt;

&lt;p&gt;Se você quiser adicionar o Jscrambler para o seu processo de desenvolvimento e estiver usando o Webpack, nós temos uma boa notícia para você! O &lt;a href=&#34;https://github.com/jscrambler/jscrambler-loader&#34; target=&#34;_blank&#34;&gt;jscrambler-loader&lt;/a&gt; está disponível e é realmente fácil de configurar assim como a maioria dos loaders do Webpack.&lt;/p&gt;

&lt;p&gt;Nós vamos lhe mostrar o quanto essa configuração é fácil utilizando o exemplo abaixo e adicionando o &lt;a href=&#34;https://github.com/jscrambler/jscrambler-loader&#34; target=&#34;_blank&#34;&gt;jscrambler-loader&lt;/a&gt; em nosso processo. Também vamos remover o &lt;strong&gt;UglifyJsPlugin&lt;/strong&gt;, já que o &lt;strong&gt;Jscrambler&lt;/strong&gt; pode desempenhar essa mesma função.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var webpack = require(&#39;webpack&#39;);

    module.exports = {
    // this is the top level file or set of files
    entry: &#39;./index.js&#39;,
    // it will bundle everything inside this output path
    output: {
    path: __dirname,
    filename: &#39;bundle.js&#39;
},
module: {
loaders: [
{
    // 1. resolve @import and url() through css-loader
    // 2. load the result to bundle using style-loader
    // note that loaders are interpreted from right to left
    test: /.css$/, // A regexp to test the require path
    loaders: [&#39;style&#39;, &#39;css&#39;]
},
{
    test: /.js$/,
    exclude: /node_modules/,
    loader: &#39;jscrambler-loader&#39;
}
]
}
};&lt;/pre&gt;

&lt;p&gt;Você também irá precisar criar um arquivo chamado &lt;strong&gt;.jscramblerrc&lt;/strong&gt; com suas credenciais da API.&lt;/p&gt;

&lt;p&gt;Você irá encontrar elas no painel de controlo da sua conta Jscrambler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.jscramblerrc&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{
    &#34;keys&#34;: {
    &#34;accessKey&#34;: &#34;XXXXXX&#34;,
    &#34;secretKey&#34;: &#34;XXXXXX&#34;
},
&#34;params&#34;: {
    &#34;self_defending&#34;: &#34;%DEFAULT%&#34;
    // there is a big set of transformations that you can use
    // check https://jscrambler.com/en/help/javascript_obfuscation
}
}&lt;/pre&gt;

&lt;p&gt;Pronto! Você está pronto para depurar o seu código protegido!&lt;/p&gt;

&lt;p&gt;Há várias outras formas de conectar o Jscrambler com o seu sistema. Isso depende do seu task runner. Eu reuni as possíveis abordagens abaixo:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grunt &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/grunt-jscrambler&#34; target=&#34;_blank&#34;&gt;grunt-jscrambler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gulp &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/gulp-jscrambler&#34; target=&#34;_blank&#34;&gt;gulp-jscrambler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;package.json&lt;/em&gt; &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/jscrambler&#34; target=&#34;_blank&#34;&gt;Jscrambler CLI tool&lt;/a&gt;. Para isso funcionar, crie um &lt;em&gt;script&lt;/em&gt; separado e depois passe sua versão minificada do Webpack através dele. É preferível manter uma versão local da ferramenta Jscrambler CLI (&lt;code&gt;npm i jscrambler --save-dev&lt;/code&gt;) dentro de seu projeto para que tudo funcione independentemente do ambiente.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O Jscrambler tem um conjunto de ferramentas para proteger seu código (ofuscação + armadilhas no código + serviço de autoproteção de aplicativo, ou RASP em inglês), fazendo com que a engenharia reversa fique significantemente difícil, mas também tem alguns recursos de otimização de código para você tirar vantagem. Você pode até usá-lo para minificação ou compressão.&lt;/p&gt;

&lt;p&gt;Saiba mais sobre o Jscrambler em &lt;a href=&#34;https://jscrambler.com?utm_medium=social&amp;utm_source=tableless&#34; target=&#34;_blank&#34;&gt;jscrambler.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Ainda que o Webpack não seja a ferramenta mais fácil de aprender, eu recomendo que você dê uma olhada nela. O livro &lt;a href=&#34;http://survivejs.com/&#34; target=&#34;_blank&#34;&gt;SurviveJS &amp;#8211; Webpack and React&lt;/a&gt;, que está em inglês, fala sobre essa ferramenta com mais detalhes. A maioria dos conteúdos está disponível gratuitamente e irá lhe ajudar a entender o Webpack e React a um nível mais profundo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Features que sua API REST precisa ter desde o início</title>
      <link>http://tableless.com.br/features-que-sua-api-rest-precisa-ter-desde-o-inicio/</link>
      <pubDate>Thu, 17 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/features-que-sua-api-rest-precisa-ter-desde-o-inicio/</guid>
      <description>

&lt;p&gt;Eu tenho trabalhado com dados suavemente flutuando através do protocolo http por um tempo e agora eu tenho esse sentimento altruísta de que eu posso contribuir com os desenvolvedores mais jovens com algumas histórias sobre os desafios que enfrentei durante a minha jornada.&lt;/p&gt;

&lt;p&gt;Este artigo basicamente tem o objetivo de listar e discutir sobre alguns pontos importantes que sua API, possivelmente, poderia abraçar desde o início do projeto, a fim de acelerar o processo de desenvolvimento para todos em sua equipe.&lt;/p&gt;

&lt;h2 id=&#34;autenticação-e-autorização&#34;&gt;Autenticação e Autorização&lt;/h2&gt;

&lt;p&gt;Se você se preocupa com quem vai acessar seus endpoints, é necessário prestar atenção sobre este tópico. Existem algumas especificações conhecidas para lidar com este assunto, principalmente &lt;a href=&#34;https://jwt.io/&#34;&gt;JWT&lt;/a&gt;, &lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt; e &lt;a href=&#34;https://oauth.net/2/&#34;&gt;OAuth2&lt;/a&gt;. Estas abordagens irão abranger a maioria dos cenários em seus aplicativos, mas às vezes você será desafiado a criar um novo tipo de camada de segurança para atender algum requisito específico, neste caso, tente não reinventar a roda e adapte suas necessidades em um desses listados.&lt;/p&gt;

&lt;h2 id=&#34;query-filtering-sorting-e-pagination&#34;&gt;Query, Filtering, Sorting e Pagination&lt;/h2&gt;

&lt;p&gt;Assim que o seu banco de dados cresce, você vai começar a notar que alguns recursos estão demorando muito para serem recuperados. As abordagens comuns para esta situação são: armazenar em cache seus objetos (próximo tópico) e / ou criar a paginação / filtragem. Se você pode obter o seu recurso com algo como:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;shiny.api.com/resources?query[type=2]&amp;limit=5&amp;start=1&amp;order=[name]&lt;/pre&gt;

&lt;p&gt;&amp;#8230;seus clients serão capazes de selecionar apenas o que eles realmente precisam para processar uma página ou tela específica. É bom para dar uma certa autonomia para seus consumidores. Próximo nível deste assunto é &lt;a href=&#34;http://graphql.org/learn/&#34;&gt;GraphQL&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cache&#34;&gt;Cache&lt;/h2&gt;

&lt;p&gt;Uma boa maneira de recuperar seus recursos incrivelmente rápido é desenvolver alguma estratégia de cache. O custo de suas requisições serão menores uma vez que seus dados estarão prontos para serem consumidos em um banco de dados in-memory. Com algum esforço você pode lidar com isso usando &lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt; ou &lt;a href=&#34;https://memcached.org/&#34;&gt;Memcached&lt;/a&gt;. Boa sorte com sua expiração de cache. Confira algumas reflexões sobre este tema com o &lt;a href=&#34;http://blog.remarkablelabs.com/2012/12/russian-doll-caching-cache-digests-rails-4-countdown-to-2013&#34;&gt;Russian Doll Caching&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;wrappers-e-summarized-fields&#34;&gt;Wrappers e Summarized Fields&lt;/h2&gt;

&lt;p&gt;Às vezes, você precisará fornecer alguns campos calculados &amp;#8211; ou quaisquer dados agregados em geral &amp;#8211; em suas respostas e para esse cenário, posso sugerir-lhe montar algo nessa linha:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;summay&#34;: {
    &#34;total&#34;: 2
    &#34;averageAge&#34;: 22
  },
  &#34;data&#34;:[
  {
    &#34;name&#34;: &#34;John&#34;,
    &#34;age&#34;: 22
  },
  {
    &#34;name&#34;: &#34;Mary&#34;,
    &#34;age&#34;: 22
  }
  ]
}
&lt;/pre&gt;

&lt;h2 id=&#34;hateos&#34;&gt;HATEOS&lt;/h2&gt;

&lt;p&gt;HATEOAS significa &lt;em&gt;Hypermedia as the application state of the engine&lt;/em&gt;. É uma abordagem que permite que os clientes interpretem de forma autônima e dinâmica o estado atual de um recurso e as transições que podem ser iniciados decorrente deste mesmo estado.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;id&#34;: 276,
  &#34;amount&#34;: 90.00,
  &#34;links&#34;: [
  {
    &#34;type&#34;: &#34;orders&#34;,
    &#34;rel&#34;: &#34;self&#34;,
    &#34;href&#34;: &#34;/orders/ 276&#34;
  },
  {
    &#34;type&#34;: &#34;customer&#34;,
    &#34;rel&#34;: &#34;order&#39;s customer&#34;,
    &#34;href&#34;: &#34;/orders/276/customers&#34;
  }
  ]
}
&lt;/pre&gt;

&lt;p&gt;Sobre o JSON acima, você pode tirar as seguintes conclusões:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dentro do array &amp;#8220;links&amp;#8221; são todas as &amp;#8216;transições&amp;#8217; possíveis com o recurso, neste caso, podem acessar o cliente que criou as ordens com o URI /orders/276/customers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rel:auto&lt;/strong&gt; significa que esta URI é a referência do estado atual, neste caso, a ordem com ID 276. &lt;strong&gt;rel&lt;/strong&gt;, em geral, representa a relação entre a ligação com o recurso atual.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; indica o tipo de recurso que é o link em questão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ao padronizar seus serviços RESTful usando HATEOAS você permite que os clientes usem os recursos de maneiras mais fáceis, afinal de contas, as possibilidades de navegação entre os estados serão listadas em cada hit em seus recursos.&lt;/p&gt;

&lt;p&gt;Conforme descrito em um &lt;a href=&#34;http://martinfowler.com/articles/richardsonMaturityModel.html&#34;&gt;post&lt;/a&gt; de Martin Fowler, HATEOAS em sua API é o último passo para atingir a &amp;#8216;Glória de REST&amp;#8221;, o estado da arte.&lt;/p&gt;

&lt;h2 id=&#34;message-queue&#34;&gt;Message Queue&lt;/h2&gt;

&lt;p&gt;Aposto que você tem algumas rotas em suas APIs que são síncronas mas não precisam necessariamente ser. Alguns casos de uso para uso de fila de mensagens são: enviar e-mails após alguma ação, redimensionamento de imagem, codificação de vídeo, etc. Uma prática comum para esta situação é colocar essas ações em uma fila de mensagens para serem processadas posteriormente de forma assíncrona. Dê uma olhada na &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; ou &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;, ambas são grandes soluções.&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;/p&gt;

&lt;p&gt;É isso aí. Pelo menos para mim estes são os principais aspectos que eu vi nos últimos anos no desenvolvimento de novos apis http/rpc/rest. Se você acha que existem alguns outros pontos importantes para mencionar, por favor deixe nos comentários e conversamos sobre 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Yarn: A evolução do NPM</title>
      <link>http://tableless.com.br/yarn-evolucao-do-npm/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/yarn-evolucao-do-npm/</guid>
      <description>

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-56337&#34; style=&#34;text-align: center&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/yarn-kitten-full.png&#34; alt=&#34;yarn-kitten-full&#34; width=&#34;300&#34; height=&#34;135&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nos primórdios do desenvolvimento web e afins, trabalhar com bibliotecas era uma tarefa árdua. Lembro que tínhamos que pesquisar pela biblioteca, escolher uma versão, baixar o zip e implementar em nosso projeto. Não parece nada de outro mundo ao se tratar de pequenos projetos, mas quando estamos falando de projetos um pouco maiores, isso se torna um transtorno.  A coisa se torna ainda mais complicada quando há a dependência entre bibliotecas.&lt;/p&gt;

&lt;p&gt;Nesse contexto, entram os gerenciadores de pacotes, que chegaram para revolucionar a maneira como lidamos com as dependências de nosso projetos. Um dos principais gerenciadores de pacotes é o &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt;, que inicialmente visava abastecer apenas os desenvolvedores de NodeJS, mas acabou se tornando um hub comum de dependências Javascript em geral. O NPM hoje conta com mais de 300mil bibliotecas em seu repositório central, as quais alcançam cerca  5 bilhões de downloads por mês, e é a ferramenta de gerenciamento de pacotes mais popular do mundo.&lt;/p&gt;

&lt;p&gt;Apesar de ser uma excelente ferramenta, o NPM nunca conseguiu agradar a todos, e são comuns as reclamações de lentidão, a falta de um instalador offline, instalações em fila, etc.&lt;/p&gt;

&lt;h2 id=&#34;yarn-package-manager&#34;&gt;Yarn Package Manager&lt;/h2&gt;

&lt;p&gt;No dia 11 de outubro de 2016, o Facebook &lt;a href=&#34;https://code.facebook.com/posts/1840075619545360&#34;&gt;anunciou&lt;/a&gt; o seu novo gerenciador de pacotes para Javascript: o Yarn, que vem com a proposta de ser mais rápido, seguro e confiável que o NPM. O Yarn é open source, e nasceu com a colaboração, também, das empresas Exponent, Google, e Tilde.&lt;/p&gt;

&lt;p&gt;O Yarn funciona exatamente como o NPM e o Bower, abrangendo, inclusive, as bibliotecas que estão presentes nestes gerenciadores. Uma das coisas mais interessantes, além da rapidez, é a possibilidade de instalação de pacotes offline. Quando você instala um pacote, ele cria um cache em sua máquina que possibilita a futura instalação deste sem precisar estar conectado à internet.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-yarn&#34;&gt;Instalando o Yarn&lt;/h2&gt;

&lt;p&gt;Para a instalação, você pode baixar no &lt;a href=&#34;https://yarnpkg.com/en/docs/install&#34;&gt;site oficial&lt;/a&gt;, mas também pode utilizar outro gerenciador, como o NPM (confesso que parece irônico, como quando utilizávamos o Internet Explorer para baixar o Chrome).&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;npm install -g yarn
&lt;/pre&gt;

&lt;h2 id=&#34;utilizando-o-yarn&#34;&gt;Utilizando o Yarn&lt;/h2&gt;

&lt;h3 id=&#34;inicialização&#34;&gt;Inicialização&lt;/h3&gt;

&lt;p&gt;A utilização do Yarn é bastante semelhante com a do NPM. Para inicializar basta digitar, na linha de comando:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn init
&lt;/pre&gt;

&lt;p&gt;Este comando irá gerar um arquivo &lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;{
&#34;name&#34;: &#34;Yarn&#34;,
&#34;version&#34;: &#34;1.0.0&#34;,
&#34;main&#34;: &#34;index.js&#34;,
&#34;license&#34;: &#34;MIT&#34;
}
&lt;/pre&gt;

&lt;p&gt;O gerenciamento dos pacotes pode ser feito diretamente no &lt;em&gt;package.json&lt;/em&gt;, ou pela linha de comando.&lt;/p&gt;

&lt;h3 id=&#34;adicionando-uma-dependência&#34;&gt;Adicionando uma dependência&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add [package]
yarn add [package]@[version]
yarn add [package]@[tag]
&lt;/pre&gt;

&lt;h3 id=&#34;fazendo-update&#34;&gt;Fazendo update&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn upgrade [package]

yarn upgrade [package]@[version]
yarn upgrade [package]@[tag]
&lt;/pre&gt;

&lt;h3 id=&#34;desfazendo-as-coisas&#34;&gt;Desfazendo as coisas&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn remove [package]
&lt;/pre&gt;

&lt;h3 id=&#34;instalando-as-dependências&#34;&gt;Instalando as dependências&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn install
&lt;/pre&gt;

&lt;h2 id=&#34;outras-funcionalidades&#34;&gt;Outras funcionalidades&lt;/h2&gt;

&lt;h3 id=&#34;lock-file&#34;&gt;Lock file&lt;/h3&gt;

&lt;p&gt;Além do package.json, o Yarn cria, na pasta raíz do projeto, um arquivo yarn.lock, que trata de listar as bibliotecas &amp;#8220;originais&amp;#8221; do projeto, um sistema bem semelhante ao do composer.&lt;/p&gt;

&lt;h3 id=&#34;fazendo-uma-limpeza&#34;&gt;Fazendo uma limpeza&lt;/h3&gt;

&lt;p&gt;Outro recurso interessante é o mecanismo de limpeza de dependências, ao executar o comando:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn clean
&lt;/pre&gt;

&lt;p&gt;O Yarn vasculha as dependências e verifica tudo aquilo que não está sendo utilizado e exporta para um arquivo &lt;strong&gt;.yarnclean&lt;/strong&gt;. Caso você tenha este arquivo em sua pasta raíz, quando executar o &lt;strong&gt;yarn install&lt;/strong&gt;, ele vai instalar as dependências de forma mais limpa.&lt;/p&gt;

&lt;h3 id=&#34;self-update&#34;&gt;Self-update&lt;/h3&gt;

&lt;p&gt;Para atualizar o Yarn, basta digitar no console:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn self-update
&lt;/pre&gt;

&lt;p&gt;ou, caso queira especificar a versão:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn self-update 0.1.2
&lt;/pre&gt;

&lt;h2 id=&#34;futuro&#34;&gt;Futuro&lt;/h2&gt;

&lt;p&gt;Em todos os testes realizados, o Yarn se mostrou um gerenciador de pacotes bastante robusto e completo. De fato, o Yarn é extremamente rápido. Estou utilizando-o há cerca de uma semana, e, sinceramente, não penso em voltar a utilizar o NPM.&lt;/p&gt;

&lt;p&gt;A sua equipe de desenvolvimento está incentivando todos a migrarem e contribuirem na sua página do &lt;a href=&#34;https://github.com/yarnpkg/yarn&#34;&gt;github&lt;/a&gt;, afinal todos só temos a ganhar com esta nova e excelente ferramenta.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World com React, do rascunho até o primeiro componente</title>
      <link>http://tableless.com.br/hello-world-com-react-do-rascunho-ate-o-primeiro-componente/</link>
      <pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/hello-world-com-react-do-rascunho-ate-o-primeiro-componente/</guid>
      <description>

&lt;p&gt;Há muito tempo eu queria fazer um Hello World com React, mas nunca tinha tempo por que eu mudei de área há uns 3 anos, ficando mais na parte de gestão de produtos e times, deixando quase que totalmente o desenvolvimento e a escrita de código. Por isso, senti na pele o que os iniciantes sentem quando precisam fazer um simples Hello World de uma tecnologia nova. São tantos artigos falando coisas diferentes, usando setups diferentes, na sua maioria complexos e que não explicam as coisas com simplicidade.&lt;/p&gt;

&lt;p&gt;Na busca de conteúdo sobre ReactJS, encontrei uma série de fontes pela internet, que você pode conferir no final deste texto, além de um curso grátis, muito, mas muito bem feito pelo &lt;a href=&#34;http://jscasts.teachable.com/&#34;&gt;Matheus Lima no JSCasts&lt;/a&gt;. Esse capítulo baseado em todas essas fontes. Tentei abstrair toda as inutilidades que alguém não precisa aprender logo que está iniciando. Espero que tenha cumprido com o objetivo.&lt;/p&gt;

&lt;h2 id=&#34;conceitos-do-react-e-introdução&#34;&gt;Conceitos do React e Introdução&lt;/h2&gt;

&lt;p&gt;O React foi pensado em como podemos componentizar nossos elementos, de forma que eles sejam independentes, mas reutilizáveis. Pensa em um componente como se fosse um widget ou um módulo. Se ficar mais fácil, pense que um componente é um pedaço de HTML, CSS, JS e os poucos dados que irão popular esse pedaço do layout.&lt;/p&gt;

&lt;p&gt;Sem entrar na polêmica de modularização e componentização no JS, atualmente, nós organizamos na pior das hipóteses &amp;#8211; e mais comum também -, os componentes como partes separadas de códigos. Você pega um pedaço de código HTML, coloca numa determinada página, que é formatada com CSS e manipulada com JS. O código que estrutura, formata e manipula seu componente está separado nesses três arquivos de HTML, CSS e JS. No React, o conceito é mais simples, onde unificamos o HTML dentro do JS, o que no React chamamos de JSX.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/react-component.jpg&#34; alt=&#34;react-component&#34; width=&#34;1784&#34; height=&#34;1298&#34; class=&#34;aligncenter size-full wp-image-56272&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perceba que na imagem acima &amp;#8211; &lt;a href=&#34;https://dribbble.com/shots/1262636-To-Do-Dashboard/attachments/172917&#34;&gt;peguei como exemplo daqui&lt;/a&gt; &amp;#8211; cada retângulo colorido tem um componente pai, com seus componentes internos, que chamamos de componentes filhos. Podemos, então, criar um componente chamado &lt;code&gt;navBar&lt;/code&gt; com um componente filho chamado &lt;code&gt;userInfo&lt;/code&gt;, que conterá as informações do usuário. O nosso componente &lt;strong&gt;pai&lt;/strong&gt;, guarda estado dos dados que usaremos nos componentes filhos. O &lt;strong&gt;pai&lt;/strong&gt; compartilha os dados com os filhos por meio de atributos. Nesse exemplo, a &lt;code&gt;navBar&lt;/code&gt; iria compartilhar as informações do usuário logado para o componente filho &lt;code&gt;userInfo&lt;/code&gt;. Esta hierarquia de pai e filho faz com que o gerenciamento de dados seja simples, por que nós sabemos exatamente onde os dados estarão, não causando confusão usando esses dados erroneamente em outros lugares.&lt;/p&gt;

&lt;p&gt;O JSX é como o ReactJS cria os componentes em JavaScript. Você vai escrever HTML (quase) normal dentro do próprio JS, o ReactJS, por sua vez, vai se encarregar de traduzir esse HTML para JavaScript, que vai renderizar um elemento no DOM. Se você tem o código &lt;code&gt;&amp;lt;h1&amp;gt;Titulo&amp;lt;/h1&amp;gt;&lt;/code&gt;, o JSX vai se transformar em &lt;code&gt;React.createElement(&#39;h1&#39;, null, &#39;Titulo&#39;);&lt;/code&gt; antes de ser executado pelo browser. Escrever com esse HTML do React (JSX), facilita a leitura e você diminui a curva de aprendizado.&lt;/p&gt;

&lt;p&gt;Você já deve ter ouvido sobre o &lt;strong&gt;Virtual DOM&lt;/strong&gt;. O Virtual DOM é a árvore de componentes que o ReactJS gera para que o browser renderize na tela. Pra melhorar a performance, o ReactJS gera todo o HTML (baseado em JSX e transformado em JavaScript) na memória antes de renderizar para o usuário. Além disso, ele fica vigiando esse Virtual DOM procurando por alterações. Quando algo é alterado, ele muda apenas o que foi alterado e não todo o HTML.&lt;/p&gt;

&lt;h2 id=&#34;setup-do-projeto&#34;&gt;Setup do projeto&lt;/h2&gt;

&lt;p&gt;Como todo o projeto, necessitamos fazer um setup inicial, preparando o ambiente e iniciando parte do código. Nesse setup vamos começar criando o projeto com NPM, depois vamos criar arquivos de configuração do Webpack e também o arquivo &lt;strong&gt;index.html&lt;/strong&gt;, que é onde vamos mostrar nossa App.&lt;/p&gt;

&lt;h3 id=&#34;npm&#34;&gt;NPM&lt;/h3&gt;

&lt;p&gt;Como gerenciador de pacotes, vamos usar o NPM. Por isso, abra seu terminal predileto e veja os comandos abaixo. Esses comandos vão criar uma pasta para o projeto (eu já estou na minha pasta publica, onde coloco meus projetos para serem acessados via localhost), depois eu inicio o NPM e aí instalo dois pacotes iniciais &lt;strong&gt;react&lt;/strong&gt; e &lt;strong&gt;react-dom&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ mkdir meu-projeto
$ npm install --save react react-dom
$ npm init # aperte enter em tudo que vier
&lt;/pre&gt;

&lt;p&gt;Agora, dentro da pasta &lt;strong&gt;meu-projeto&lt;/strong&gt; deve haver um &lt;strong&gt;package.json&lt;/strong&gt; que o NPM instalou. Vamos instalar agora o Webpack. O Webpack é o que vai juntar todos os nossos módulos, compilar nosso CSS e etc.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ cd meu-projeto
$ npm install --save-dev webpack
&lt;/pre&gt;

&lt;p&gt;Nós vamos instalar o &lt;strong&gt;webpack&lt;/strong&gt; apenas em desenvolvimento, por que, obviamente vamos usar o código que ele gerar em produção. Mas vamos aproveitar para instalá-lo também globalmente, por que vamos precisar rodar o comando &lt;code&gt;webpack&lt;/code&gt; para gerar nosso bundle:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ npm install webpack -g
&lt;/pre&gt;

&lt;p&gt;Seu &lt;strong&gt;package.json&lt;/strong&gt; tem que ficar mais ou menos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{
  &#34;name&#34;: &#34;curso-react-matheus&#34;,
  &#34;version&#34;: &#34;1.0.0&#34;,
  &#34;description&#34;: &#34;&#34;,
  &#34;main&#34;: &#34;index.js&#34;,
  &#34;scripts&#34;: {
    &#34;test&#34;: &#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;
  },
  &#34;author&#34;: &#34;&#34;,
  &#34;license&#34;: &#34;ISC&#34;,
  &#34;dependencies&#34;: {
    &#34;react&#34;: &#34;^15.3.2&#34;,
    &#34;react-dom&#34;: &#34;^15.3.2&#34;
  },
  &#34;devDependencies&#34;: {
    &#34;webpack&#34;: &#34;^1.13.2&#34;
  }
}
&lt;/pre&gt;

&lt;h3 id=&#34;config-do-webpack&#34;&gt;Config do Webpack&lt;/h3&gt;

&lt;p&gt;O webpack é um empacotador de código focado em módulos. Você pode ver com mais detalhes sobre o que é o webpack &lt;a href=&#34;http://tableless.com.br/introducao-ao-webpack/&#34;&gt;nesse artigo do Leo Cavalcante no Tableless&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como já instalamos anteriormente o webpack com o NPM, vamos criar agora um &lt;strong&gt;webpack.config.js&lt;/strong&gt;. Aqui é onde vamos ter as configurações do Webpack. O Matheus, em seu vídeo, simplificou ao máximo as explicações que não ficasse confusa, tendo que explicar Redux, Flux, ES6 e etc, por isso, vamos fazer o mesmo aqui. Assim facilita seu aprendizado.&lt;/p&gt;

&lt;p&gt;O código do config do Webpack é esse aqui:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;module.exports = {
  entry: &#34;./app/App.js&#34;,
  output: {
    filename: &#34;public/bundle.js&#34;
  },
  module: {
    loaders: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        loader: &#39;babel&#39;,
        query: {
          presets: [&#39;react&#39;]
        }
      }
    ]
  }
}
&lt;/pre&gt;

&lt;p&gt;O Matheus explicou tim tim por tim tim cada uma dessas linhas no segundo vídeo do curso dele. Por enquanto, você só precisa saber o seguinte:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;entry: &amp;quot;./app/App.js&amp;quot;,&lt;/code&gt; vai ler o arquivo App.js, gerando um &lt;strong&gt;output&lt;/strong&gt; chamado &lt;strong&gt;bundle.js&lt;/strong&gt;. Aproveite para criar agora o &lt;strong&gt;App.js&lt;/strong&gt;, dentro de uma pasta &lt;strong&gt;app&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;O React usa o conceito de Loaders. Não vamos ver isso agora. Mas no bloco &lt;code&gt;loaders&lt;/code&gt; desse código, ele vai testar todos os arquivos &lt;strong&gt;.js&lt;/strong&gt;, menos a pasta &lt;strong&gt;node_modules&lt;/strong&gt;, usando o &lt;strong&gt;babel&lt;/strong&gt; para fazer o transpiler. Ali nos presets, estamos dizendo que vamos usar react. Se fossemos usar ES6 no código, nós colocaríamos também ali no chave &lt;code&gt;presets&lt;/code&gt;, para que o babel soubesse que ele também teria que pegar código ES6 para poder transpor para código conhecido.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Agora, para que o babel funcione, vamos instalá-lo também via NPM:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ npm install --save-dev babel-core babel-loader babel-preset-react
&lt;/pre&gt;

&lt;p&gt;E por enquanto, é isso que você precisa saber.&lt;/p&gt;

&lt;h3 id=&#34;index-html&#34;&gt;index.html&lt;/h3&gt;

&lt;p&gt;Todo os projetos React tem um &lt;strong&gt;index.html&lt;/strong&gt; que faz a conexão com o nosso código. Esse &lt;strong&gt;index.html&lt;/strong&gt; é onde o App vai aparecer e ele deve ficar dentro da pasta &lt;strong&gt;public&lt;/strong&gt;. Crie então uma pasta &lt;strong&gt;public&lt;/strong&gt; e dentro coloque o arquivo &lt;strong&gt;index.html&lt;/strong&gt;. O código é mais ou menos esse. Também tendo em mente a simplicidade da explicação. Não inserirmos nada de outro mundo aqui:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
  &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div id=&#34;app&#34;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script src=&#34;bundle.js&#34;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O div APP é onde vamos renderizar a aplicação. É quase que padrão usar o nome &lt;code&gt;app&lt;/code&gt; ali. Mas você pode colocar qualquer outra coisa se quiser.&lt;/p&gt;

&lt;p&gt;Depois chamamos o JavaScript da nossa app, que vai estar tudo contido num arquivo só, que as vezes se chama &lt;code&gt;all.js&lt;/code&gt;, outras &lt;code&gt;bundle.js&lt;/code&gt;, outros &lt;code&gt;app.js&lt;/code&gt;. Tanto faz. Vamos usar &lt;code&gt;bundle.js&lt;/code&gt;, só para não ficar diferente dos artigos que li e do vídeo que o Matheus fez. Assim quando você for procurar mais referências, não fica confuso. E pronto.&lt;/p&gt;

&lt;h2 id=&#34;app-js-e-hello-world&#34;&gt;App.js e Hello World&lt;/h2&gt;

&lt;p&gt;Vamos começar a nossa App fazendo dois &lt;code&gt;require&lt;/code&gt;. O require vai importar para nosso código o &lt;strong&gt;react&lt;/strong&gt; e o &lt;strong&gt;react-dom&lt;/strong&gt; que instalamos aquela hora com NPM. Abra seu &lt;strong&gt;App.js&lt;/strong&gt; e escreva:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;); // importa a lib react
var reactDOM = require(&#39;react-dom&#39;); // importa a lib react-dom
&lt;/pre&gt;

&lt;p&gt;Com esses dois pacotes importados, vamos agora colocar um código inicial. Nesse código vamos usar o &lt;code&gt;reactDOM&lt;/code&gt;, que vai pegar nosso código HTML escrito em JSX e jogar naquele div com id &lt;code&gt;app&lt;/code&gt; que fizemos no &lt;strong&gt;index.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;); // importa a lib react
var reactDOM = require(&#39;react-dom&#39;); // importa a lib react-dom

reactDOM.render(&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/pre&gt;

&lt;p&gt;Pra ver funcionando, lá no seu terminal, rode o comando abaixo na pasta do projeto:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ webpack -w
&lt;/pre&gt;

&lt;p&gt;Ele vai gerar um bundle todas as vezes que você salvar algo no projeto. Você poderá acessar o &lt;strong&gt;index.html&lt;/strong&gt; pelo seu browser. No meu Mac eu acessei nesse endereço &lt;strong&gt;&lt;a href=&#34;http://localhost/curso-react-matheus/public/index.html&#34;&gt;http://localhost/curso-react-matheus/public/index.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O Tutorial puro do ReactJS sugere rodar um server. Exatamente por que eles não mostram o processo usando Webpack. Contudo, se quiser, segue aí as instruções. &lt;a href=&#34;https://github.com/reactjs/react-tutorial/#to-use&#34;&gt;Entre nesse link e rode um dos servidores&lt;/a&gt;. É só baixar um dos arquivos da linguagem que mais te agrada e rodar o comando para que o servidor rode.&lt;/p&gt;

&lt;p&gt;Crie uma pasta, baixe o arquivo preferencial e rode o comando correspondente. Ex.: &lt;code&gt;php server.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sugiro que fique conosco aqui no Webpack, assim você não se perde no processo. Nesse momento, você já deve ter rodado seu primeiro &lt;strong&gt;Hello World&lt;/strong&gt; com React, usando Webpack.&lt;/p&gt;

&lt;h3 id=&#34;importando-seu-primeiro-módulo&#34;&gt;Importando seu primeiro módulo&lt;/h3&gt;

&lt;p&gt;Para importar seu primeiro módulo, lá no &lt;strong&gt;App.js&lt;/strong&gt;, vamos criar uma variável que faz a importação do nosso componente. O arquivo desse componente estará na pasta &lt;strong&gt;components&lt;/strong&gt;, dentro da pasta &lt;strong&gt;App&lt;/strong&gt;. A estrutura de pastas fica assim:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/folders-react.png&#34; alt=&#34;folders-react&#34; width=&#34;650&#34; height=&#34;618&#34; class=&#34;aligncenter size-full wp-image-56270&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O seu App.js fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;); // importa a lib react
var reactDOM = require(&#39;react-dom&#39;);// importa a lib react-dom

var MeuComponente = require(&#39;./components/MeuComponente.js’);

reactDOM.render(, document.getElementById(&#39;app&#39;));
&lt;/pre&gt;

&lt;h4 id=&#34;criando-seu-primeiro-componente&#34;&gt;Criando seu primeiro componente&lt;/h4&gt;

&lt;p&gt;Dentro da pasta &lt;strong&gt;components&lt;/strong&gt;, crie um arquivo chamado &lt;strong&gt;MeuComponente.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; Como boas práticas e uma convenção comum nos projetos, nós colocamos o nome do arquivo do componente como sendo o mesmo nome do componente dentro do código. O nome do arquivo poderia ser diferente do nome do componente, mas aí o risco de bagunça seria enorme. Por isso, mantenha o nome do arquivo do componente sendo igual ao nome do componente no código.&lt;/p&gt;

&lt;p&gt;Voltando… dentro desse componente você vai escrever o código básico de todo o componente, que é o código que segue abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react&#39;); // importa a lib react

var MeuComponente = React.createClass({
  render: function(){
    return (
      

&lt;h1&gt;
  teste
&lt;/h1&gt;
    );
  }
});

module.exports = MeuComponente;
&lt;/pre&gt;

&lt;p&gt;Todos os componentes react vão ter esse código. Primeiro ele importa a lib do React. Depois nós criamos uma classe (&lt;code&gt;React.createClass&lt;/code&gt;) onde construíremos nosso Componente. E aí, exportamos (&lt;code&gt;module.exports = MeuComponente&lt;/code&gt;) nosso Componente para importá-lo em outras partes do projeto, como fizemos no App.js.&lt;/p&gt;

&lt;p&gt;Dentro a classe do seu componente, perceba que há uma função &lt;strong&gt;render&lt;/strong&gt;. Essa função irá transformar o código JSX que estiver ali dentro no seu componente e irá renderizá-la na tela.&lt;/p&gt;

&lt;p&gt;Perceba uma curiosidade: Por que precisamos de um parênteses em volta do return? O JavaScript insere o sinal de ponto-virgula (;) automaticamente. Sem os parênteses, o JavaScript ignoraria as linhas seguintes e não retornaria valor algum. Se o JSX começa na mesma linha que o return, então os parênteses não são necessários.&lt;/p&gt;

&lt;p&gt;Se você for no seu browser e mudar o texto do seu componente, você vai perceber que nosso componente está funcionando! ;-D&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/gif-react.gif&#34; alt=&#34;gif-react&#34; width=&#34;1394&#34; height=&#34;878&#34; class=&#34;aligncenter size-full wp-image-56271&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bom, vou ficando por aqui. O objetivo era apenas fazer um setup rápido, para você conseguir inserir pelo menos um componente e ver as coisas mudando na tela. Talvez as coisas tenham ficado mais claras para você agora, assim como ficaram para mim depois desse estudo. Sugiro que você veja os links abaixo para aprofundar mais seus estudos. Tem conteúdo em ingles e também conteúdo em português. Vá fundo!&lt;/p&gt;

&lt;h2 id=&#34;leitura-recomendada&#34;&gt;Leitura recomendada:&lt;/h2&gt;

&lt;p&gt;Algumas leituras eu perdi, outras estão por aí. Todos esses links me ajudaram a entender um bocado sobre o setup do React, seus módulos, inserir CSS, modularização e etc. Praticamente todos eles explicam as mesmas coisas, com palavras diferentes detalhes diferentes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://facebook.github.io/react/tutorial/tutorial.html&#34;&gt;Documentação do React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tutorialspoint.com/reactjs/reactjs_environment_setup.htm&#34;&gt;React Environment Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.andrewray.me/reactjs-for-stupid-people/&#34;&gt;React for Stupid People&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jamesknelson.com/learn-raw-react-no-jsx-flux-es6-webpack/&#34;&gt;Learn React by itsel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jviereck/modularise-css-the-react-way-1e817b317b04&#34;&gt;Modularise CSS the React way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hugogiraudel.com/2015/06/18/styling-react-components-in-sass/&#34;&gt;Style React Components in SASS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://survivejs.com/react/advanced-techniques/styling-react/&#34;&gt;Style React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://buildwithreact.com/tutorial/components&#34;&gt;http://buildwithreact.com/tutorial/components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jscasts.teachable.com/&#34;&gt;Curso do Matheus Lima em Português&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hugobessa.com.br/2015/01/17/comecando-com-react/&#34;&gt;Começando com React &amp;#8211; Hugo Bessa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html&#34;&gt;The React Quick Starter Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/danawoodman/9cfddb1a0c934a35f31a&#34;&gt;React Hello World Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tylermcginnis.com/react-js-tutorial-pt-1-a-comprehensive-guide-to-building-apps-with-react-js-8ce321b125ba#.wn4e2ymf3&#34;&gt;React.js Tutorial Pt 1: A Comprehensive Guide to Building Apps with React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;GitHub do projeto React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/tableless/organizando-uma-aplicação-com-react-5b8ea9075596#.3q8sxog55&#34;&gt;Organizando uma aplicação com React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@ignit.io/react-native-construindo-apps-nativos-com-javascript-parte-1-37af2fbcde84#.muc6c8dyv&#34;&gt;React Native — Construindo Apps Nativos com Javascript (parte 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fnando/react-starter-pack&#34;&gt;Starter Pack para React do Nando&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>API para Autenticar usuários com JWT e Passport</title>
      <link>http://tableless.com.br/autenticar-usuarios-com-jwt-e-passport/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/autenticar-usuarios-com-jwt-e-passport/</guid>
      <description>

&lt;p&gt;Neste artigo nós vamos explorar os principais conceitos e implementações da autenticação de usuário utilizando o mecanismo chamado JWT (&lt;em&gt;&lt;a href=&#34;https://jwt.io&#34;&gt;JSON Web Token&lt;/a&gt;&lt;/em&gt;) por meio de um módulo Passport. Afinal, este é um importante passo para se certificar de que os usuários façam uma autenticação segura dentro de uma API baseada em REST.&lt;/p&gt;

&lt;p&gt;Antes de começarmos, vamos criar uma simples API em REST, que será utilizada ao longo deste post. Para simplificar nosso exemplo, nós vamos criar uma Express API. Para começar, vamos configurar nosso projeto, abrir o terminal e digitar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;mkdir my-api
cd my-api
npm init&lt;/pre&gt;

&lt;p&gt;O &lt;strong&gt;npm init&lt;/strong&gt; mostra um questionário simples para configurar algumas descrições e gerar o arquivo &lt;strong&gt;package.json&lt;/strong&gt;, o principal arquivo que usaremos para instalar alguns módulos para nosso projeto. Você pode responder cada questão como preferir. Depois disso, instale o framework &lt;strong&gt;express&lt;/strong&gt; e o módulo &lt;strong&gt;body-parser&lt;/strong&gt; usando este comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;npm install express body-parser --save&lt;/pre&gt;

&lt;p&gt;Agora que temos o módulo Express instalado, vamos escrever nosso código para a API. Para isso, crie o arquivo &lt;strong&gt;index.js&lt;/strong&gt; com o código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// index.js
var express = require(&#34;express&#34;);
var bodyParser = require(&#34;body-parser&#34;);
var app = express();

app.use(bodyParser.json());

app.get(&#34;/&#34;, function(req, res) {
  res.json({status: &#34;My API is alive!&#34;});
});

app.listen(3000, function() {
  console.log(&#34;My API is running...&#34;);
});
module.exports = app;
&lt;/pre&gt;

&lt;p&gt;Neste post usaremos um array simples de dados de usuários para facilitar a implementação do JWT. No entanto, em aplicações reais é altamente recomendável usar um banco de dados em vez de um simples array. Então, usaremos esse array apenas para exemplo. Nós precisaremos de uma lista de dados de usuários a qual será utilizada para verificar se a solicitação é de um usuário autenticado. Para isso, crie o arquivo &lt;strong&gt;users.js&lt;/strong&gt; com o código a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// users.js
// Fake list of users to be used in the authentication
var users = [
{id: 1, name: &#34;John&#34;, email: &#34;john@mail.com&#34;, password: &#34;john123&#34;},
{id: 2, name: &#34;Sarah&#34;, email: &#34;sarah@mail.com&#34;, password: &#34;sarah123&#34;}
];

module.exports = users;
&lt;/pre&gt;

&lt;p&gt;Agora nós temos uma API simples o suficiente para explorar como implementar a autenticação JWT nas próximas sessões.&lt;/p&gt;

&lt;h2 id=&#34;introdução-ao-passport-js-e-jwt&#34;&gt;Introdução ao Passport.js e JWT&lt;/h2&gt;

&lt;h3 id=&#34;sobre-o-passport-js&#34;&gt;SOBRE O PASSPORT.JS&lt;/h3&gt;

&lt;p&gt;Há um módulo Node.js muito bacana e fácil de trabalhar com autenticação de usuários, e ele é chamado de &lt;strong&gt;Passport&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Passport é um framework extremamente flexível e modular. Ele permite que você trabalhe com as principais estratégias de autenticação, que são: &lt;strong&gt;Basic &amp;amp; Digest&lt;/strong&gt;, &lt;strong&gt;OpenID&lt;/strong&gt;, &lt;strong&gt;OAuth&lt;/strong&gt;, &lt;strong&gt;OAuth 2.0&lt;/strong&gt; e &lt;strong&gt;JWT&lt;/strong&gt;. Além disso, ele também permite trabalhar com serviços de autenticação externos, como &lt;strong&gt;Facebook&lt;/strong&gt;, &lt;strong&gt;Google+&lt;/strong&gt;, &lt;strong&gt;Twitter&lt;/strong&gt;, entre outros. Aliás, no site oficial da framework, &lt;strong&gt;há uma lista com mais de 300 estratégias de autenticação&lt;/strong&gt;, criadas e mantidas por terceiros.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56151&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/site-passport.jpg&#34; alt=&#34;site-passport&#34; width=&#34;1135&#34; height=&#34;617&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O site oficial do Passport é: &lt;a href=&#34;http://passportjs.org&#34;&gt;passportjs.org&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;sobre-a-jwt&#34;&gt;SOBRE A JWT&lt;/h3&gt;

&lt;p&gt;JWT (&lt;em&gt;JSON Web Tokens&lt;/em&gt;) é uma estratégia de autenticação para APIs em REST simples e segura. Trata-se de um padrão aberto para autenticações web e é totalmente baseada em requests JSON entre o cliente e servidor. Seu mecanismo de autenticação funciona da seguinte maneira:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;O cliente faz uma solicitação uma única vez ao enviar as credenciais de login e senha;&lt;/li&gt;
&lt;li&gt;O servidor valida as credenciais e, se tudo estiver certo, ele retorna para o cliente um JSON com um token que codifica dados de um usuário logado no sistema;&lt;/li&gt;
&lt;li&gt;Após receber o token, o cliente pode armazená-lo da forma que preferir, seja por LocalStorage, Cookie ou outros mecanismos de armazenamento do lado do cliente;&lt;/li&gt;
&lt;li&gt;Toda vez que o cliente acessa uma rota que requere autenticação, ele apenas envia esse token para a API para autenticar e liberar os dados de consumo;&lt;/li&gt;
&lt;li&gt;O servidor sempre valida esse token para permitir ou bloquear uma solicitação de cliente.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56152&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/site-jwt.jpg&#34; alt=&#34;site-jwt&#34; width=&#34;1135&#34; height=&#34;609&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para detalhes específicos sobre JWT, acesse &lt;a href=&#34;http://jwt.io&#34;&gt;jwt.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;instalando-passport-e-jwt&#34;&gt;Instalando Passport e JWT&lt;/h2&gt;

&lt;p&gt;Para começar a diversão, nós utilizaremos os seguintes módulos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;passport&lt;/strong&gt;: como um mecanismo de autenticação;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;passport-jwt&lt;/strong&gt;: como estratégia de autenticação JWT para Passport;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jwt-simple&lt;/strong&gt;: como codificador e decodificador para tokens JSON;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, vamos instalar tudo isso rodando este comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;npm install passport passport-jwt jwt-simple --save&lt;/pre&gt;

&lt;p&gt;Para começar esta implementação, primeiro nós vamos criar um arquivo &lt;strong&gt;config.js&lt;/strong&gt; para adicionar dois itens de configuração para o JWT (&lt;strong&gt;jwtSecret&lt;/strong&gt; e &lt;strong&gt;jwtSession&lt;/strong&gt;):&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// config.js
module.exports = {
jwtSecret: &#34;MyS3cr3tK3Y&#34;,
jwtSession: {session: false}
};&lt;/pre&gt;

&lt;p&gt;O campo &lt;strong&gt;jwtSecret&lt;/strong&gt; mantém uma string de chave secreta que serve como base para &lt;strong&gt;codificar&lt;/strong&gt; e &lt;strong&gt;decodificar&lt;/strong&gt; os tokens. É altamente aconselhável utilizar uma string complexa com vários caracteres diferentes e &lt;strong&gt;nunca compartilhar essa chave secreta em público&lt;/strong&gt;, pois se isso vazar, você deixará sua aplicação vulnerável, permitindo que qualquer pessoa má intencionada acesse o sistema e gerencie os tokens de usuários logados sem informar as credenciais corretas no processo de autenticação.&lt;/p&gt;

&lt;p&gt;Para finalizar, o último campo incluído é o &lt;strong&gt;jwtSession&lt;/strong&gt;, que possui o objeto {session:false}. Esse item é utilizado para informar o Passport que a API não irá gerenciar a sessão.&lt;/p&gt;

&lt;h2 id=&#34;implementando-a-autenticação-jwt&#34;&gt;Implementando a autenticação JWT&lt;/h2&gt;

&lt;p&gt;Agora que já temos as configurações do Passport e JWT prontas, vamos implementar as principais regras sobre quais o cliente será autenticado em nossa API. Para começar, vamos implementar as regras de autenticação, que também terão funções intermediárias fornecidas pelo Passport para utilizar dentro das rotas da API. Este código terá duas funções principais e uma intermediária. A middleware (intermediária) será executada no momento em que a aplicação começa a rodar, e ela basicamente recebe em sua ligação uma &lt;strong&gt;payload&lt;/strong&gt; (carga útil) que contém um &lt;strong&gt;JSON decodificado&lt;/strong&gt;, o qual foi decodificado utilizando a chave secreta &lt;strong&gt;cfg.jwtSecret&lt;/strong&gt;. Esse &lt;strong&gt;payload&lt;/strong&gt; útil terá o &lt;strong&gt;ID&lt;/strong&gt; atribuído, o qual será o &lt;strong&gt;ID&lt;/strong&gt; do usuário para ser utilizado como argumento para procurar um usuário no banco de dados. No nosso caso, esse &lt;strong&gt;ID&lt;/strong&gt; será utilizado para pegar um dado de usuário da array de usuários do arquivo &lt;strong&gt;users.js&lt;/strong&gt;. Como essa função intermediária será acessada frequentemente, para evitar processos desnecessários, vamos enviar um simples objeto contendo apenas o &lt;strong&gt;ID&lt;/strong&gt; do usuário com a seguinte função de retorno:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;done(null, {id: user.id});&lt;/pre&gt;

&lt;p&gt;Essa middleware será injetada por meio da função &lt;strong&gt;passport.use(strategy)&lt;/strong&gt;. Para finalizar, duas funções serão inclusas por meio do Passport para serem utilizadas na aplicação. São as funções &lt;strong&gt;initialize()&lt;/strong&gt;, que aciona o Passport e a &lt;strong&gt;authenticate()&lt;/strong&gt;, que é utilizada para autenticar o acesso para uma rota.&lt;/p&gt;

&lt;p&gt;Para entender melhor essa implementação, vamos criar na pasta raiz o arquivo &lt;strong&gt;auth.js&lt;/strong&gt; com o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// auth.js
var passport = require(&#34;passport&#34;);
var passportJWT = require(&#34;passport-jwt&#34;);
var users = require(&#34;./users.js&#34;);
var cfg = require(&#34;./config.js&#34;);
var ExtractJwt = passportJWT.ExtractJwt;
var Strategy = passportJWT.Strategy;
var params = {
  secretOrKey: cfg.jwtSecret,
  jwtFromRequest: ExtractJwt.fromAuthHeader()
};

module.exports = function() {
  var strategy = new Strategy(params, function(payload, done) {
    var user = users[payload.id] || null;
    if (user) {
      return done(null, {id: user.id});
    } else {
      return done(new Error(&#34;User not found&#34;), null);
    }
  });
  passport.use(strategy);
  return {
    initialize: function() {
      return passport.initialize();
    },
    authenticate: function() {
      return passport.authenticate(&#34;jwt&#34;, cfg.jwtSession);
    }
  };
};&lt;/pre&gt;

&lt;p&gt;A validação da JWT começa quando uma nova estratégia é instanciada pelo &lt;strong&gt;new Strategy()&lt;/strong&gt;. Esse objeto, então, recebe dois importantes argumentos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;secretOrkey&lt;/strong&gt;: a chave secreta JWT&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jwtFromRequest&lt;/strong&gt;: define para onde os tokens serão enviados na resposta (header, querystring, body). Veja mais neste link: &lt;a href=&#34;http://npmjs.com/package/passport-jwt#extracting-the-jwt-from-the-request&#34;&gt;npmjs.com/package/passport-jwt#extracting-the-jwt-from-the-request&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dentro dos callbacks da estratégia você pode fazer qualquer validação que preferir. No nosso caso, nós apenas estamos buscando pelo usuário correto se a solicitação enviar o &lt;strong&gt;payload.id&lt;/strong&gt; correto. &lt;strong&gt;No mundo real, você pode escrever autenticações para encontrar usuários em uma base de dados.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agora, para carregar o &lt;strong&gt;auth.js&lt;/strong&gt; durante o tempo de boot (inicialização) do servidor e iniciar o middleware do Passport pelo &lt;strong&gt;app.use(auth.initialize())&lt;/strong&gt;, edite o arquivo &lt;strong&gt;index.js&lt;/strong&gt; da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// index.js
var express = require(&#34;express&#34;);
var bodyParser = require(&#34;body-parser&#34;);
var auth = require(&#34;./auth.js&#34;)();
var app = express();

app.use(bodyParser.json());
app.use(auth.initialize());

app.get(&#34;/&#34;, function(req, res) {
  res.json({status: &#34;My API is alive!&#34;});
});

app.listen(3000, function() {
  console.log(&#34;My API is running...&#34;);
});

module.exports = app;&lt;/pre&gt;

&lt;h2 id=&#34;gerando-tokens-para-usuários-autenticados&#34;&gt;Gerando tokens para usuários autenticados&lt;/h2&gt;

&lt;p&gt;Para finalizar a autenticação em JWT, nós vamos criar uma rota para gerar tokens de usuários que irão se autenticar utilizando seus e-mails e senhas no sistema, e vamos também fazer uma refatoração na rota principal para que seus acessos carreguem apropriadamente a autenticação dos dados de usuário. Ao fazer isso, nós finalizamos essa etapa de autenticação, tornando nossa aplicação mais confiável e segura.&lt;/p&gt;

&lt;p&gt;Agora, vamos criar o &lt;strong&gt;/token&lt;/strong&gt; finalizador. Esta rota será responsável por gerar um token codificado com uma &lt;strong&gt;payload&lt;/strong&gt;, dada ao usuário que envia o e-mail e senha corretos por meio da &lt;strong&gt;req.body.email&lt;/strong&gt; e &lt;strong&gt;req.body.password&lt;/strong&gt; na solicitação.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;payload&lt;/strong&gt; terá apenas o ID do usuário. A geração do token ocorre pelo módulo &lt;strong&gt;jwt-simple&lt;/strong&gt; usando a função &lt;strong&gt;jwt.encode(payload, cfg.jwtSecret)&lt;/strong&gt;, a qual obrigatoriamente utilizará a mesma chave secreta &lt;strong&gt;jwtSecret&lt;/strong&gt;, criada dentro do arquivo &lt;strong&gt;config.js&lt;/strong&gt;. Para simplificar o manipulador de erros desse endpoint, qualquer erro será criado utilizando o código de status &lt;strong&gt;HTTP 401 &amp;#8211; Unauthorized&lt;/strong&gt; a partir do uso da função &lt;strong&gt;res.sendStatus(401)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para incluir essa regra de geração de tokens, vamos editar o arquivo &lt;strong&gt;index.js&lt;/strong&gt; utilizando o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// index.js
var express = require(&#34;express&#34;);
var bodyParser = require(&#34;body-parser&#34;);
var jwt = require(&#34;jwt-simple&#34;);
var auth = require(&#34;./auth.js&#34;)();
var users = require(&#34;./users.js&#34;);
var cfg = require(&#34;./config.js&#34;);
var app = express();

app.use(bodyParser.json());
app.use(auth.initialize());

app.get(&#34;/&#34;, function(req, res) {
  res.json({status: &#34;My API is alive!&#34;});
});

app.post(&#34;/token&#34;, function(req, res) {
  if (req.body.email &amp;&amp; req.body.password) {
    var email = req.body.email;
    var password = req.body.password;
    var user = users.find(function(u) {
      return u.email === email &amp;&amp; u.password === password;
    });
    if (user) {
      var payload = {id: user.id};
      var token = jwt.encode(payload, cfg.jwtSecret);
      res.json({token: token});
    } else {
      res.sendStatus(401);
    }
  } else {
    res.sendStatus(401);
  }
});

app.listen(3000, function() {
  console.log(&#34;My API is running...&#34;);
});

module.exports = app;&lt;/pre&gt;

&lt;p&gt;E para finalizar nossa API, vamos criar uma rota privada, a qual irá produzir o dado autenticado do usuário. Essa rota deve utilizar o middleware &lt;strong&gt;auth.authenticate()&lt;/strong&gt; rodando antes da rota com a função &lt;strong&gt;app.get(“/user”)&lt;/strong&gt;. Essa rota privada irá rodar apenas para token autenticado e você pode utilizar o objeto &lt;strong&gt;req.user.id&lt;/strong&gt; dentro dela, pois esse dado estará disponível se você enviar o token correto, e com essa ID nós vamos produzir um JSON com o usuário autenticado por meio da função &lt;strong&gt;res.json(users[req.user.id])&lt;/strong&gt;. Para criar esta rota, vamos editar o arquivo &lt;strong&gt;index.js&lt;/strong&gt; novamente. Confira como ele fica:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;// index.js
var express = require(&#34;express&#34;);
var bodyParser = require(&#34;body-parser&#34;);
var jwt = require(&#34;jwt-simple&#34;);
var auth = require(&#34;./auth.js&#34;)();
var users = require(&#34;./users.js&#34;);
var cfg = require(&#34;./config.js&#34;);
var app = express();

app.use(bodyParser.json());
app.use(auth.initialize());

app.get(&#34;/&#34;, function(req, res) {
  res.json({status: &#34;My API is alive!&#34;});
});

app.get(&#34;/user&#34;, auth.authenticate(), function(req, res) {
  res.json(users[req.user.id]);
});

app.post(&#34;/token&#34;, function(req, res) {
  if (req.body.email &amp;&amp; req.body.password) {
    var email = req.body.email;
    var password = req.body.password;
    var user = users.find(function(u) {
      return u.email === email &amp;&amp; u.password === password;
    });
    if (user) {
      var payload = {id: user.id};
      var token = jwt.encode(payload, cfg.jwtSecret);
      res.json({token: token});
    } else {
      res.sendStatus(401);
    }
  } else {
    res.sendStatus(401);
  }
});

app.listen(3000, function() {
  console.log(&#34;My API is running...&#34;);
});

module.exports = app;&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Parabéns! Nós terminamos uma implementação extremamente importante para vários tipos de aplicações, que é o &lt;strong&gt;processo de autenticação&lt;/strong&gt;. Graças à JWT, agora nós temos um mecanismo seguro para autenticação de usuários entre cliente e servidor utilizando apenas dados JSON. Antes de lançar a sua aplicação, não esqueça de garantir que ela não é adulterada, arruinando a experiência de utilização. Caso tenha interesse, você pode testar a versão &lt;a href=&#34;https://jscrambler.com/account/signup/?ref=http://tableless.com.br/&#34;&gt;trial gratuita&lt;/a&gt; do Jscrambler que em poucos minutos você já configura sua aplicação na plataforma para aplicar proteção no código-fonte de seus projetos.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>