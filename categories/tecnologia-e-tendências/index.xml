<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tecnologia E Tendências on Tableless</title>
    <link>https://tableless.github.io/hugo-public/categories/tecnologia-e-tend%C3%AAncias/index.xml</link>
    <description>Recent content in Tecnologia E Tendências on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/categories/tecnologia-e-tend%C3%AAncias/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>O fim da profissão front-end</title>
      <link>https://tableless.github.io/hugo-public/carreira-de-front-end-vai-morrer/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/carreira-de-front-end-vai-morrer/</guid>
      <description>

&lt;p&gt;O processo de desenvolvimento web pode se dividir em três categorias: design, front-end e back-end. Na minha opinião, a categoria que tem mais processos manuais e repetitivos é sem duvida o front-end.&lt;/p&gt;

&lt;p&gt;Pare pra pensar: o core do trabalho do front-end se resume em duas partes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;implementação do layout&lt;/strong&gt;: produção da primeira camada de código, onde replicamos o layout criado em algum programa gráfico, para código estático em HTML, CSS e JS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;integração com API&lt;/strong&gt;: depois (ou junto, tanto faz) de feito o código estático, a interface é integrada com a API, que geralmente carrega boa parte da lógica, já que essa mesma API é usada para alimentar outras plataformas como mobile, robôs etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As outras &amp;#8220;responsabilidades&amp;#8221; que orbitam em volta do front-end como acessibilidade, SEO, performance, compatibilidade entre browsers, código semântico, entre outras coisas que você pode julgar serem de responsabilidade de um front-end &lt;strong&gt;são um mero apetrecho&lt;/strong&gt;. Elas podem existir ou não em um projeto. Mas um projeto não sobrevive sem o código front-end do layout e sem o conteúdo integrado à interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Um observação: acessibilidade é algo que as máquinas podem fazer muito melhor que um ser humano. Embora eu tenha colocado como algo que possa existir ou não em um projeto, é importante demais que você faça um esforço para que todos os seus projetos sejam acessíveis. Eu sei que isso não é a realidade até hoje no mercado e provavelmente nunca será até que esse processo seja automatizado.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Existem uma série de tarefas manuais que nós delegamos para ferramentas criadas afim de economizar parte do nosso tempo evitando a execução de tarefas repetitivas, automatizando o workflow do front-end. Só para citar algumas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pre-processadores CSS:&lt;/strong&gt; Sass, Less, Stylus&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task runners:&lt;/strong&gt; Gulp, Grunt , Make, NPM Scripts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scaffolding:&lt;/strong&gt; Yeoman, Slush&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependências/Module Bundles:&lt;/strong&gt; Bower, NPM, Yarn, Webpack, Duo, RequireJS, Browserify, JSPM, Rollup&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SPA/Libraries/Frameworks:&lt;/strong&gt; React, Angular, Vue.js, Backbone, EmberJS, todomvc, Polymer, Lodash, Aurelia, MeteorJS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Frameworks/Libraries:&lt;/strong&gt; SemanticUI, Bootstrap, Foundation, UiKit, YUI, Susy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JS Test&lt;/strong&gt;: Mocha, Jasmine, QUnit, Ava, Tape, Jest&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JS Templates:&lt;/strong&gt; Underscore, Mustache, Handlebars, DoT, Dust, EJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mas mesmo com todas essas ferramentas, o core da responsabilidade de um front-end ainda continua sendo &lt;strong&gt;implementar layout original&lt;/strong&gt; e &lt;strong&gt;integrar a interface com o back-end&lt;/strong&gt;. Você ainda continua &lt;strong&gt;replicando&lt;/strong&gt; o layout que alguém passou dias desenhando e integra o conteúdo que está numa API, que outra pessoa criou. Seu dia se resume em alternar entre as janelas do Sublime / Sketch / Browser / Sublime / API / Browser / Sublime.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Automation isn&amp;#8217;t about being lazy. It&amp;#8217;s about being efficient.&amp;#8221; &amp;#8212; Addy Osmani&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esse processo se torna tedioso e a lista de requisitos para tentar tornar o trabalho de front-end eficiente só aumenta. Toda tarefa mecânica, repetitiva e manual tende a ser automatizada e na minha opinião, em pouco tempo, &lt;strong&gt;não vamos precisar de alguém executando o trabalho de front-end de ponta a ponta&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Okay, respira. Isso é a minha opinião. Dado que o front-end é a parte mais operacional de todo o processo, mais cedo ou mais tarde todo o trabalho executado no front-end vai ser automatizado. A parte mais difícil são essas duas tarefas que nós fazemos desde os primórdios. Contudo, elas já podem estar com seus dias contados.&lt;/p&gt;

&lt;h2 id=&#34;trabalhando-com-dados-reais-direto-no-design&#34;&gt;Trabalhando com dados reais direto no Design&lt;/h2&gt;

&lt;p&gt;Você pode não ser designer, mas há uma premissa no mundo dos designers que diz que &lt;strong&gt;você deve trabalhar sempre com conteúdo real&lt;/strong&gt;. Isso quer dizer que entregar um layout com texto em &lt;em&gt;Lorem Ipsum Dolor&lt;/em&gt; é coisa de designer júnior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;If your site or application requires data input, enter real and relevant words and type the text, don’t just paste it in from another source.&amp;#8221; &amp;#8212; Jason Fried&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A ideia é que você crie um layout da forma mais fiel possível usando os termos, palavras, nomes, datas etc, afim de chegar mais perto da experiência do usuário.&lt;/p&gt;

&lt;p&gt;Atualmente a maioria dos programas visuais utilizados para criar layouts para web tem alguma feature ou plugin que permite a integração com alguma fonte de dados que contenha o conteúdo real.&lt;/p&gt;

&lt;p&gt;Por exemplo o Sketch, que é o programa de criação visual mais querido do momento, conta com plugins que permitem a integração direta entre API e layout. Veja por exemplo o vídeo abaixo demonstrando a utilização do plugin Craft (também disponível para Photoshop):&lt;/p&gt;

&lt;p&gt;Ou essa demonstração que usa a API do Stackoverflow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Em pouco tempo, não vamos precisar de alguém executando o trabalho de front-end de ponta a ponta.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O ponto aqui é: nós só precisamos criar o layout uma vez, usando o programa desejado (Sketch/Photoshop/Figma/Adobe XD etc) e pronto. Não precisamos de uma pessoa para refazer esse layout com HTML/CSS/JS de forma alguma. Isso nos leva para uma segunda discussão: mesmo com o design pronto, usando dados reais de uma API, nós ainda precisamos que ele seja acessível pelos browsers. Como resolvemos isso?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Obs.: E aquele movimento do &amp;#8220;Design in the Browser&amp;#8221;? Esse é um movimento criado exatamente para evitar o trabalho de produzir duas vezes o mesmo layout. Mas é MUITO melhor fazer um design usando um programa visual do que escrever direto no código. IMHO.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;código-bonito-não-é-importante&#34;&gt;Código bonito não é importante&lt;/h2&gt;

&lt;p&gt;Desde sempre os front-ends escrotizavam o código que era gerado automaticamente por programas como o Dreamweaver. Eles tinham uma razão pra isso: o código era completamente horrível. Era um tempo onde a conexão com a internet era precária e tudo o que pudéssemos fazer para melhorar o carregamento do site, nós fazíamos. O código gerado por programas Wysiwyg tinha vários problemas: era difícil de ler, não havia semântica alguma, continha código inútil e muitas vezes não era compatível com todos os browsers. Tudo isso fazia com que o código limpo, semântico, enxuto e acessível tivesse um valor inestimável.&lt;/p&gt;

&lt;p&gt;Código limpo era sinônimo de bom ranking no Google, boa compatibilidade entre os browsers, performance de carregamento garantida, produtividade entre os membros do time por causa da legibilidade do código, facilidade de manutenção etc etc etc.&lt;/p&gt;

&lt;p&gt;Hoje, boa parte desses problemas foram resolvidos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;os browsers tem uma ótima complacência com os padrões web, extinguindo a maioria dos problemas de compatibilidade de layout;&lt;/li&gt;
&lt;li&gt;a performance é atacada em várias frentes: processo de build dos assets, tecnologias como HTTP/2 e até a evolução da conexão que fica mais rápida a cada ano;&lt;/li&gt;
&lt;li&gt;a manutenção e a legibilidade do código HTML/CSS não é mais um problema sério, já que o HTML é facilmente escrito usando poucas tags e o CSS tem os pré-processadores, que auxiliam muito na hora de definir padrões, além das boas práticas;&lt;/li&gt;
&lt;li&gt;o JS está bem assessorado por frameworks, libraries e uma série de boas práticas que se responsabilizam pela parte pesada do trabalho, deixando pouca margem de erro para os devs;&lt;/li&gt;
&lt;li&gt;e o mais importante para mim é que a semântica não está mais no HTML. Desde a vinda de tecnologias com o JSON-LD, a semântica não está mais atrelada ao código HTML e isso é ótimo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu sei que mesmo que grande parte da responsabilidade fique na mão dos frameworks, bibliotecas e ferramentas, o dev tem grandes chances de fazer merda com o pedaço de código que ele cuida. Não olha pro seu amiguinho do lado, coitado&amp;#8230; Todos nós cometemos erros&amp;#8230; uns mais, outros menos.&lt;/p&gt;

&lt;p&gt;Mas entenda uma coisa: &lt;strong&gt;código bonito, não é mais algo importante&lt;/strong&gt;. As ferramentas que nos auxiliam hoje para buildar os assets podem ser usadas por programas/robôs ao criar automaticamente código HTML/CSS/JS a partir de layouts produzidos em programas como Sketch. Veja por exemplo &lt;a href=&#34;https://github.com/sskyy/blade&#34;&gt;esse plugin&lt;/a&gt; que não é mais atualizado desde 2015 já tentava automatizar a exportação de código no Sketch. O cara estava tentando fazer código HTML a partir do layout desenhado no Sketch versão 3. Hoje o Sketch está na versão 42. E sabe de uma coisa: na versão 43 o Sketch está abrindo o código dos seus arquivos em formato JSON. O que nos leva para o próximo assunto.&lt;/p&gt;

&lt;h3 id=&#34;automatização-do-design&#34;&gt;Automatização do Design&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;We have a new file format which is more compact, and enables more powerful integrations for third-party developers. &amp;#8212; &lt;a href=&#34;https://rink.hockeyapp.net/apps/0172d48cceec171249a8d850fb16276b&#34;&gt;Sketch Team&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Isso quer dizer que o Sketch se transformará em uma plataforma de desenvolvimento. Abrindo o código dos seus arquivos, qualquer um conseguirá ler esses arquivos e partir daí criar &lt;strong&gt;qualquer coisa&lt;/strong&gt;. Quanto tempo para alguém criar um plugin que lê o arquivo do Sketch em formato JSON e &lt;strong&gt;gera automaticamente HTML/CSS/JS&lt;/strong&gt; a partir de um layout Sketch?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Computadores evoluem. Se os princípios mudassem não haveria base para a evolução. &amp;#8211; Caio Vaccaro&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, mas espera aí: mesmo antes desse formato novo de arquivo do Sketch, já existia algumas ferramentas que talvez você não conhecia como o &lt;a href=&#34;https://protoship.io/tools/teleport.html&#34;&gt;Teleport&lt;/a&gt;, que converte &lt;strong&gt;qualquer website&lt;/strong&gt; em um artboard do Sketch. E também o &lt;a href=&#34;https://protoship.io/tools/uipad.html&#34;&gt;UIPad&lt;/a&gt;, que converte layout do Sketch em HTML/CSS e React! Se liga:&lt;/p&gt;

&lt;p&gt;Essa tendência já estava sendo desenhada há tempos. É a coisa mais inteligente de se fazer. Você pode fazer coisas mais importantes do que ficar sentado na frente do computador alternando entre browser, layout, browser, layout.&lt;/p&gt;

&lt;p&gt;Okay: nós temos um design que se integra com a API, puxando dados reais do sistema. Nós temos um programa que design que exporta o layout para código HTML/CSS/JS pronto para ser usado. Mas ainda estamos usando código HTML/CSS/JS como antigamente. Há mais um passo que pode ser melhorado.&lt;/p&gt;

&lt;h3 id=&#34;webassembly-wasm&#34;&gt;WebAssembly (Wasm)&lt;/h3&gt;

&lt;p&gt;Outro ponto importante, que não tem nada definido ainda, mas que pode começar a fazer todo sentido é toda aquela &lt;a href=&#34;https://tableless.com.br/o-webassembly-vem-ai/&#34;&gt;história do WebAssembly&lt;/a&gt;, que é um novo formato binário criado pelo Google Microsoft, Mozilla e vários outros.&lt;/p&gt;

&lt;p&gt;O formato de código binário do WebAssembly pode ser decodificado muito mais rápido do que o JavaScript é parseado. Isso realmente traz para a Web a experiência de programas nativos, principalmente no mobile.&lt;/p&gt;

&lt;p&gt;O legal é que outras linguagens podem ser compiladas para WebAssembly. Hoje o projeto está um pouco mais focado em C/C++, mas com certeza outras linguagens serão abrangidas. O objetivo principal do WebAssembly é a performance.&lt;/p&gt;

&lt;p&gt;Uma preocupação que surge no ar é que isso cheira monopólio. Lembra do Flash? Querendo ou não ele era uma alternativa de criar algo nativo na Web. Mas a graça é que:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;WebAssembly não substitui o JavaScript. Tudo tem retrocompatibilidade, tudo será executado no mesmo universo que o JS e a segurança terá as mesmas restrições que o JS;&lt;/li&gt;
&lt;li&gt;Não é só uma empresa ou grupo que está por trás do Wasm, mas várias como Firefox, Chromium, Edge e Webkit;&lt;/li&gt;
&lt;li&gt;Para rodar WebAssembly não será necessário rodar plugins de terceiros, já que os motores dos browsers serão totalmente compatíveis;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Está entendendo por que buscar por um código limpo (como conhecemos hoje) não faz mais tanto sentido?&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Mais cedo ou mais tarde a profissão de front-end como nós conhecemos até hoje &lt;strong&gt;vai deixar de existir&lt;/strong&gt;. Você que já é velho na área, talvez nem precise se preocupar, porque eu não acho que isso vai acontecer agora, mas você que acabou de começar, é melhor pensar duas vezes no futuro da sua carreira.&lt;/p&gt;

&lt;p&gt;Eu tenho certeza que a área de back-end também pode passar por esse processo, embora seja muito mais difícil de acontecer. E eu também acho que vai demorar muito (se chegar a acontecer) a automatização da parte criativa responsável pelo design dos layouts de produtos e websites.&lt;/p&gt;

&lt;p&gt;Eu não chuto em quanto tempo isso pode acontecer ou se vai acontecer. É mais um chute meu do que qualquer outra. Quero só abrir para discussão esse assunto. Mas até ontem &lt;a href=&#34;https://www.wired.com/2016/10/ubers-self-driving-truck-makes-first-delivery-50000-beers/&#34;&gt;carros e caminhões autônomos&lt;/a&gt; eram coisa de filme.&lt;/p&gt;

&lt;p&gt;Mas com certeza existem vários pontos ainda a serem resolvidos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A automatização de sites gigantes de conteúdo vai ocorrer?&lt;/li&gt;
&lt;li&gt;E sistemas/produtos, como vamos fazer?&lt;/li&gt;
&lt;li&gt;Coloque aqui sua dúvida maluca&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Minha outra aposta é sobre a profissão de UX, que vai desaparecer não porque suas responsabilidades serão automatizadas, mas por se tornar obsoleto mesmo. Esse é assunto para um outro artigo, mas se quiser pensar sobre isso agora, comece ouvindo &lt;a href=&#34;http://movimentoux.com/work/felipememoria/&#34;&gt;esse capítulo do podcast do Movimento UX&lt;/a&gt; com o &lt;a href=&#34;http://www.fmemoria.com.br/&#34;&gt;Felipe Memória&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;para-ler-mais&#34;&gt;Para ler mais&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dados reais no design&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shopify.com/partners/blog/91010886-3-easy-steps-for-working-with-realistic-data-in-sketch-using-json&#34;&gt;3 Easy Steps for Working with Realistic Data in Sketch Using JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@markjenkins/designing-with-data-7f6bcd907f0a#.95haya5yq&#34;&gt;Designing with Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.framer.com/prototype-with-real-data-in-framer-from-json-to-multi-device-and-internet-of-things-6eb1ae8b8325#.fo9b8i4gz&#34;&gt;Prototype with real data in Framer, from JSON to multi-device and internet of things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@anirudhs/project-comet-designing-with-real-data-959beccb5c1a#.v6khfndrh&#34;&gt;Adobe XD: Designing with Real Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sobre não usar texto fake em layouts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2010/01/lorem-ipsum-killing-designs/&#34;&gt;Lorem Ipsum is Killing Your Designs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thenextweb.com/dd/2015/04/09/why-designers-should-never-use-fake-text/#.tnw_zjSSHkxh&#34;&gt;Why designers should never use fake text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.creativebloq.com/design/stop-using-lorem-ipsum-7116907&#34;&gt;Stop using Lorem Ipsum!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://signalvnoise.com/archives/001083.php&#34;&gt;&amp;#8220;Getting Real&amp;#8221; design tip: Just say no to Lorem Ipsum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WebAssembly&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webassembly.org/docs/faq/&#34;&gt;FAQ do site WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tableless.com.br/o-webassembly-vem-ai/&#34;&gt;WebAssembly – a web compilada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/&#34;&gt;Google, Microsoft, Mozilla And Others Team Up To Launch WebAssembly, A New Binary Format For The Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaydson.com/webassembly-e-o-futuro-da-web/&#34;&gt;WebAssembly e o futuro da Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brendaneich.com/2015/06/from-asm-js-to-webassembly&#34;&gt;From asm.js to webassembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/&#34;&gt;The Web is getting its bytecode: WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sobre o cenário das ferramentas de front-end&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://frontend.directory/&#34;&gt;front-end.directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radify.io/blog/using-build-tools/&#34;&gt;Using front-end build tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://usablica.github.io/front-end-frameworks/compare.html&#34;&gt;A Collection Of Best Front End Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/showcases/front-end-javascript-frameworks?s=stars&#34;&gt;GitHub: Front-end JavaScript frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/front-end-tooling-trends-2017/&#34;&gt;Front-End Tooling Trends for 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.debugme.eu/front-end-web-developer-tools/&#34;&gt;Updated List: The 67 Very Best Front End Web Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techbeacon.com/most-popular-javascript-front-end-tools&#34;&gt;The most popular JavaScript front-end tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colorlib.com/wp/top-templating-engines-for-javascript/&#34;&gt;Top 10 Templating Engines for JavaScript To Improve and Simplify Your Workflow 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/addyosmani/automating-front-end-workflow&#34;&gt;Automating Front-end Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@caiovaccaro/javascript-state-of-the-union-2015-parte-3-281aa04bece1#.bulta9j6j&#34;&gt;Javascript State of the Union 2015, parte 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/Hugeinc/javascript-state-of-the-union-2015&#34;&gt;Slides &amp;#8211; Javascript State of the Union 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results&#34;&gt;The State of Front-End Tooling 2016 &amp;#8211; Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/front-end-roles-and-responsibilities-6ee8654f1649#.gsg5zdjtr&#34;&gt;Front-end Roles and Responsibilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Teste de carga em APIs utilizando Artillery</title>
      <link>https://tableless.github.io/hugo-public/teste-de-carga-em-apis-utilizando-artillery/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/teste-de-carga-em-apis-utilizando-artillery/</guid>
      <description>&lt;p&gt;Independente do produto que você esteja criando, é sempre importante assegurar a qualidade do mesmo fazendo uma bateria de testes antes de colocar no mercado. Se tratando de desenvolvimento de software, existem algumas métricas que são essenciais para deixar claro para todos os envolvidos no projeto, incluindo seus usuários, o quanto determinado sistema/aplicativo é confiável para suportar o uso do público.&lt;/p&gt;

&lt;p&gt;Dentro da área de qualidade de software, existem diversos tipos de testes que visam atingir o objetivo citado acima, de mostrar a todos que o produto é estável e robusto, alguns deles: teste de integração, teste unitário, teste de penetração, teste de regressão e por aí vai.&lt;/p&gt;

&lt;p&gt;Este post tem como objetivo falar um pouco sobre o teste de carga, que em sua essência foi criado para simular quantidades diferentes de tentativa de acesso a determinado sistema ou device, tendo como saída um relatório de como o software se comportou em determinado cenário.&lt;/p&gt;

&lt;p&gt;Quando falamos de APIs e escalonamento de infra, é interessante saber o número exato de requisições que o servidor (ou servidores) consegue responder corretamente em um tempo aceitável para seus clientes.&lt;/p&gt;

&lt;p&gt;Caso você já tenha tentado fazer algo do tipo, provavelmente se deparou com o JMeter, que é uma das ferramentas mais famosas e completas para esse tipo de trabalho. Porém, a curva de aprendizado com o JMeter é um pouco longa, pois existem muitas configurações/opções que o usuário acaba se perdendo no início, até encontrar o que realmente precisa para o seu caso.&lt;figure class=&#34;graf graf--figure&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;graf-image&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*1hZHPrQKHwCctBX7bFOPmw.png&#34; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Na tentativa de tornar esse processo de teste de carga um pouco mais amigável ao usuário, foi criado o &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://artillery.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Artillery&lt;/a&gt;, uma ferramenta que com poucos passos permite você simular diversos tipos de cenários para teste de serviços que estejam utilizando para comunicação http e/ou web sockets.&lt;/p&gt;

&lt;p&gt;Basicamente você precisa ter o &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node&lt;/a&gt; e o &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://www.npmjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;npm&lt;/a&gt; instalado para poder começar a brincadeira.&lt;/p&gt;

&lt;p&gt;Para instalar o Artillery:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ npm install -g artillery&lt;/pre&gt;

&lt;p&gt;Para testar sua instalação:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ artillery dino&lt;/pre&gt;

&lt;p&gt;Caso tenha aparecido um dinossauro em seu terminal, está tudo certo e você pode seguir adiante.&lt;/p&gt;

&lt;p&gt;Para começar a rodar seus testes de carga, é necessário criar um arquivo de configuração. Você pode dar qualquer nome a ele, mas para esse artigo, criarei um chamado &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;artillery.yml&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Neste cara que você colocará todas as informações referentes a sua API, como endpoint, rotas e cenários. Você pode tanto testar rotas/recursos isolados, quanto cenários mais complexos, como por exemplo um processo de compra em um ecommerce, que basicamente teria uma rota para buscar os produtos, outra pra fazer checkout e outra para pagamento.&lt;/p&gt;

&lt;p&gt;Segue abaixo um exemplo desse arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;config:
  target: &#39;&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://localhost:3000%27&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener noopener&#34;&gt;http://localhost:3000&#39;&lt;/a&gt;
  phases:
    - duration: 60
      arrivalRate: 20
scenarios:
  -
    name: &#39;Listagem de usuários&#39;
    flow:
    - get:
        url: &#34;/users&#34;&lt;/pre&gt;

&lt;p&gt;No arquivo acima colocamos o endpoint da nossa API, o atributo &lt;em&gt;duration&lt;/em&gt; representa a duração deste ciclo de teste em segundos e o &lt;em&gt;arrivalRate&lt;/em&gt; o número de novos usuários por segundo.&lt;/p&gt;

&lt;p&gt;Para rodar o teste, rode o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ artillery run artillery.yml&lt;/pre&gt;

&lt;p&gt;Após a execução, temos o seguinte resultado:&lt;figure class=&#34;graf graf--figure&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;graf-image&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*iuh0Z_BoqM4epjC2pOvt_A.png&#34; /&gt;&lt;figcaption class=&#34;imageCaption&#34;&gt;Output do Artillery&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Todas as métricas de tempo são em milis, &lt;em class=&#34;markup--em markup--p-em&#34;&gt;RPS&lt;/em&gt; (request per second), &lt;em class=&#34;markup--em markup--p-em&#34;&gt;codes&lt;/em&gt; são os códigos HTTP e o número de respostas com o mesmo, no caso acima, tivemos 1200 (60&amp;#215;20, como configuramos) requisições em 60 segundos e todas retornaram 200. &lt;em class=&#34;markup--em markup--p-em&#34;&gt;Scenarios launched&lt;/em&gt; são os ‘usuários virtuais’ criados e &lt;em class=&#34;markup--em markup--p-em&#34;&gt;Scenarios completed&lt;/em&gt; são quantos deles conseguiram executar o cenário com sucesso.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Importante: &lt;/strong&gt;Enquanto o teste estiver rodando, um preview do resultado vai sendo printado no terminal a cada 10 segundos, mas só no final você tem os números consolidados do teste completo.&lt;/p&gt;

&lt;p&gt;Agora você pode ir alterando números de usuários concorrentes, quantidade de tempo do teste, novos cenários, simulando fluxos mais complexos e etc.&lt;/p&gt;

&lt;p&gt;Vale a pena dar uma olhada na &lt;a href=&#34;https://artillery.io/docs/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentação&lt;/a&gt; que é super objetiva e simples de entender.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O futuro das interfaces: Chatbots</title>
      <link>https://tableless.github.io/hugo-public/o-futuro-das-interfaces-chatbots/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-futuro-das-interfaces-chatbots/</guid>
      <description>

&lt;p&gt;Estamos acostumados a interagir diariamente com interfaces gráficas, seja no computador, celular, tablet, smart tv, etc. Naturalmente incorporamos a utilização dessas interfaces para obter nossos objetivos no dispositivo em questão, seja fazer uma busca no google, ver uma página no Facebook, ler um artigo em um portal de notícias ou escolher um filme no Netflix.&lt;/p&gt;

&lt;p&gt;Podemos não perceber, mas quando ligamos para um &lt;em&gt;call-center&lt;/em&gt; onde a máquina (&lt;strong&gt;&lt;em&gt;URA — Unidade de Resposta Audível&lt;/em&gt;&lt;/strong&gt;) nos pede para dizer em voz alta o que desejamos, ou o número correspondente ao que queremos, também estamos interagindo com uma interface de voz para atingir nosso propósito.&lt;/p&gt;

&lt;p&gt;Nesses dois casos, o ponto a se notar é que, não importa como, mas é preciso de uma interface para que nós humanos possamos utilizar sistemas e dispositivos digitais.&lt;/p&gt;

&lt;h2 id=&#34;legal-mas-onde-estão-os-chatbots-nessa-história&#34;&gt;Legal, mas onde estão os chatbots nessa história?&lt;/h2&gt;

&lt;p&gt;Simples. Chatbots podem ser interfaces no qual vamos interagir para atingir nossos objetivos obter !&lt;/p&gt;

&lt;p&gt;Para entender melhor, vamos a um exemplo clássico:&lt;/p&gt;

&lt;p&gt;Você está passeando no shopping, passa na frente do cinema, e descobre que aquele filme que você queria ver já está em cartaz, então decide assistí-lo.&lt;/p&gt;

&lt;p&gt;Porém a fila para comprar ingresso está enorme, você não quer perder todo esse tempo. Então você pega seu celular, entra na loja de aplicativos, procura o app de cinema, começa o download, após finalizar abre o app, seleciona sua cidade, shopping em que está, filme desejado, horário, quantidade de ingressos, e finaliza fazendo o pagamento. Você utilizou a interface gráfica do app de cinema do seu celular para atingir seu objetivo, ótimo, funcionou!&lt;/p&gt;

&lt;p&gt;Porém, não poderia ser mais simples? E se você pudesse interagir via chat com um bot do cinema para comprar seus ingressos?&lt;/p&gt;

&lt;p&gt;Vamos imaginar que o cinema tem um chatbot disponível no seu app de messenger favorito, o Facebook Messenger.&lt;/p&gt;

&lt;p&gt;Você acessa seu messenger clica no usuário do cinema e envia a seguinte mensagem: &amp;#8220;&lt;em&gt;Quero comprar dois ingressos para o filme Star Wars Rogue One, no shopping X, para a sessão das 21:45&lt;/em&gt;&amp;#8220;&lt;em&gt;.&lt;/em&gt; Sua mensagem rapidamente vai ser interpretada, e em mais algumas frases rápidas de conversa (talvez para pagamento), você terá alcançado sua meta de comprar ingresso.&lt;/p&gt;

&lt;p&gt;Você pode não ter percebido, mas assim como fazemos com interfaces gráficas, você interagiu com uma interface para manipular um sistema, e atingir seu objetivo! Você interagiu com uma interface de chatbot!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/02/cb2.jpg&#34; alt=&#34;&#34; width=&#34;626&#34; height=&#34;782&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;porque-esse-tipo-de-interface-é-promissora&#34;&gt;&lt;strong&gt;Porque esse tipo de interface é promissora?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Falando especificamente sobre a era da internet, e das interfaces para os dispositivos atuais (desktop, celulares, tablets), há anos equipes inteiras (UI Designers, UX Designers, Developers, CEO, etc) discutem incansavelmente sobre qual a melhor forma de atingir seus usuários.&lt;/p&gt;

&lt;p&gt;Inúmeros fatores nas interfaces/interação podem ser relevantes em produtos e sistemas. Nas empresas e instituições, sempre existem discussões voltadas para esses e outros fatores:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Cores, formas, fontes e fotos &amp;#8211; Performance e velocidade de páginas e procedimentos &amp;#8211; Quais conteúdos são mais relevantes para o usuário &amp;#8211; Qual o máximo de cliques que um usuário pode ter para alcançar o que deseja&lt;/p&gt;

&lt;p&gt;Portanto, o caminho para uma boa conversa com nosso usuário em questão não é tão simples como parece.&lt;/p&gt;

&lt;p&gt;Além desses pontos, temos uma discussão importantíssima sobre o negócio em si, sobre como o sistema lê, processa e devolve dados e informações, sobre como o sistema irá se comportar diante do usuário.&lt;/p&gt;

&lt;p&gt;E se pudéssemos &amp;#8220;&lt;em&gt;pular uma etapa&lt;/em&gt;&amp;#8221; e focar mais tempo para o que importa? Se pudéssemos focar no objetivo do usuário, e buscar a forma melhor e mais rápida de concluir processos?&lt;/p&gt;

&lt;p&gt;Partindo do pressuposto de que a maioria dos usuários de internet sabem utilizar um chat, os chatbots excluem a curva de aprendizado das interfaces gráficas, facilitando para os desenvolvedores do produto, e para o usuário, que poderá interagir utilizando um processo que se assemelha com a comunicação com outros humanos via internet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“_Nós pensamos que você deve enviar uma mensagem para uma empresa da mesma maneira que você envia a um amigo_” — Mark Zuckerberg na Facebook F8 Conference&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;E ainda não falamos dos detalhes mais técnicos: conexão, rede de dados, apps, espaço disponível no dispositivo…&lt;/p&gt;

&lt;p&gt;Para interagir com um chatbot, sua conexão não precisa ser tão rápida quanto para baixar um app, ou carregar um site. Você não precisa trafegar muitos dados a ponto de acabar com seu pacote diário de internet para conversar num chat. E se o bot está no app que você utilizar para conversar com seus amigos, não será necessário ocupar mais espaço no seu dispositivo.&lt;/p&gt;

&lt;p&gt;São muitas vantagens, não?!&lt;/p&gt;

&lt;h2 id=&#34;as-interfaces-gráficas-vão-morrer&#34;&gt;As interfaces gráficas vão morrer?&lt;/h2&gt;

&lt;p&gt;Não há nenhuma resposta certa, para essa pergunta. É uma questão que só poderá ser respondida com o passar dos anos.&lt;/p&gt;

&lt;p&gt;Na minha opinião, as interfaces podem perder muito espaço, mas não vão morrer completamente. Mesmo num futuro, imagino que sempre haverá algum caso em que pode uma interface gráfica pode ser útil, mesmo que para pequenas interações.&lt;/p&gt;

&lt;p&gt;Também não conseguimos prever com certeza o futuro dos chats. O próprio chatbot do Facebook Messenger tem a capacidade de enviar &lt;a href=&#34;https://developers.facebook.com/docs/messenger-platform/product-overview&#34; target=&#34;_blank&#34; rel=&#34;nofollow noopener&#34;&gt;botões, imagens e outros elementos gráfico&lt;/a&gt;s.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;A intenção desse post foi refletir um pouco sobre interfaces, e sobre vantagens e o poder dos chatbots.&lt;/p&gt;

&lt;p&gt;Obviamente, isso é só a ponta do iceberg das discussões sobre chatbots e seu futuro. Mas em pouco tempo de reflexão podemos enxergar um futuro promissor!&lt;/p&gt;

&lt;p&gt;Originalmente postado em: &lt;a href=&#34;https://medium.com/botsbrasil/o-futuro-das-interfaces-chatbots-b222c638bdb1&#34;&gt;https://medium.com/botsbrasil/o-futuro-das-interfaces-chatbots-b222c638bdb1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Novidades Adobe Creative Cloud 2017</title>
      <link>https://tableless.github.io/hugo-public/novidades-adobe-creative-cloud-2017/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/novidades-adobe-creative-cloud-2017/</guid>
      <description>

&lt;p&gt;A Adobe anunciou esses dias algumas novidades para o &lt;a href=&#34;http://www.software.com.br/p/adobe-creative-cloud&#34;&gt;Creative Cloud 2017&lt;/a&gt;. Muitas das atualizações focaram em usabilidade e também algumas novas integrações nos serviços de cloud, como o TipeKit e o Creative Cloud Libraries.&lt;/p&gt;

&lt;p&gt;Aqui vão algumas novidades do Photoshop e do Illustrator, que são os programas que mais uso. Mas toda a suite do Creative Cloud teve alterações.&lt;/p&gt;

&lt;h2 id=&#34;photoshop&#34;&gt;Photoshop&lt;/h2&gt;

&lt;p&gt;Como esperado, o Photoshop ganhou suporte de uso com o Touch Bar do novo MacBook lançado pela Apple meses atrás. Você consegue usar a Touch Bar em algumas modos: Layers Properties (que é o modo default), Brushes, Favorites. &lt;a href=&#34;https://helpx.adobe.com/photoshop/using/touchbar.html&#34;&gt;Nesse link&lt;/a&gt; você consegue ter mais detalhes sobre a interface e as funcionalidades que a Adobe preparou para a Touch Bar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2016/12/v3_TopView_new.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Além dos comandos desses três modos, outras operações especificas ficaram disponíveis dependendo do que você está trabalhando no Photoshop. São coisas bem simples, que na minha opinião, talvez você nem vá se acostumar tanto (mas acho que isso vai de pessoa para pessoa). Por exemplo, quando você ferramentas de Transform ou Texto, a Touch Bar mostra as opções de OK ou Cancel. Coisas que você já consegue resolver hoje usando o teclado.&lt;/p&gt;

&lt;p&gt;O Photoshop também ganhou suporte para fontes OpenType SVG. Agora é possível acessar qualquer uma das fontes OpenType instaladas no seu computador diretamente pelo menu do Photoshop.&lt;/p&gt;

&lt;p&gt;Uma feature, e talvez a mais interessante, foi a Busca. Como se fosse um Spotlight do Mac, onde você ativa com o comando CMD/CTRL+F, digita o comando desejado ou outros termos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2016/12/All_tab.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Se liga &lt;a href=&#34;http://www.adobe.com/creativecloud/features.photoshop-cc-in-app-search.socialshare.html?scid=social67131146#photoshop-cc-in-app-search&#34;&gt;nesse vídeo de apresentação&lt;/a&gt; dessa feature de busca.&lt;/p&gt;

&lt;h2 id=&#34;illustrator&#34;&gt;Illustrator&lt;/h2&gt;

&lt;p&gt;Sem dúvida meu software favorito do Adobe Creative Cloud. Com ele eu comecei a aprender a pintar quadrinhos (&lt;a href=&#34;http://diegoeis.deviantart.com/art/Battle-Chasers-in-vetor-6907950&#34;&gt;dá uma olhada aqui&lt;/a&gt;). É com ele também que eu fazia layouts para sites. Eu sei, você pode ser daqueles caras que vão me julgar por não fazer layouts usando Photoshop&amp;#8230; Na verdade, a ferramenta pouco vai importar perante o resultado, não é verdade? Vamos para as novidades&amp;#8230;&lt;/p&gt;

&lt;p&gt;Para começar o Illustrator teve sua interface quase que totalmente remodelada, saindo do antigo cinza sem graça para um cinza mais claro, perto do branco, praticamente a mesma interface do Photoshop e InDesign.&lt;/p&gt;

&lt;p&gt;Outra novidade é o que eles chamam de Live Font Previewing, que já tem no Photoshop e agora também no Illustrator, que é a possibilidade de ver o preview da font direto na letra enquanto você escolhe. Isso adianta um trabalho gigante e não sei por que não havia antes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2016/12/live-font-preview.gif&#34; alt=&#34;live-font-preview&#34; width=&#34;800&#34; height=&#34;480&#34; class=&#34;aligncenter size-full wp-image-56691&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Uma feature MUITO bacana é a possibilidade de importar um texto direto de um arquivo para dentro de um shape específico. Tipo, se você tiver um triângulo, por exemplo, você preenchê-lo com um texto vindo de um arquivo &lt;strong&gt;.txt&lt;/strong&gt;, por exemplo. Logo, alguém, que não tenha o programa, consegue atualizar e modificar o texto, com as especificações do designer, claro.&lt;/p&gt;

&lt;p&gt;Uma coisa que sempre me deixava furioso no Illustrator era o zoom. Geralmente o Zoom aproximava a arte levando em consideração o centro da tela. Agora, apertando o atalho &lt;strong&gt;cmd/ctrl + + (sinal de mais)&lt;/strong&gt;, o Illustrator faz o zoom levando em consideração a sua seleção.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2016/12/zoom-to-selection_3.gif&#34; alt=&#34;zoom-to-selection_3&#34; width=&#34;964&#34; height=&#34;822&#34; class=&#34;aligncenter size-full wp-image-56693&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Existem várias &lt;a href=&#34;https://helpx.adobe.com/illustrator/using/whats-new.html&#34;&gt;outras novidades do Illustrator nesse link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É possível acompanhar todas as &lt;a href=&#34;http://www.adobe.com/creativecloud/features.html&#34;&gt;novidades dos produtos da Adobe nesse link&lt;/a&gt;. Além disso, dá para ver os vídeos do &lt;a href=&#34;http://max.adobe.com/sessions/max-online/&#34;&gt;evento MAX, que rolou no dia 2 de Novembro de 2016&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;só-um-pitaco-sobre-o-dreamweaver&#34;&gt;Só um pitaco sobre o Dreamweaver&lt;/h2&gt;

&lt;p&gt;Eu sempre brinquei sobre usar seriamente o Dreamweaver como um editor para desenvolvedores profissionais. Mas o Dreamweaver melhorou demais nos últimos tempos, incluindo uma série de features bem legais.&lt;/p&gt;

&lt;video allowairplay=&#34;allow&#34; controls style=&#34;width: 100%; height: auto;&#34; src=&#34;http://images-tv.adobe.com/avp/vr/17da0fa7-490c-4daa-a14e-9507b290149a/dff07833-7104-474a-a2ff-ab7c541aa8b6/5a25eade-06f4-4ae7-980b-286f35a97369\_20161021120402.960x540at1200\_h264.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;Ele foi quase que totalmente reestruturado pra facilitar a gestão dos assets, além de ajudar muito a combinação HTML+CSS. A Adobe tem dado uma atenção bem legal para quem está começando na área e tem o DreamWeaver como ponto inicial de contato, com várias ajudas contextuais para tirar dúvidas sobre HTML, CSS e JS. Além de ter suporte nativo aos pré-processadores comuns do mercado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://helpx.adobe.com/dreamweaver/using/whats-new/_jcr_content/main-pars/image_1350455085.img.gif/codehint.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A feature que mais me chamou atenção foi o que eles chamam de &lt;strong&gt;Quick Edit&lt;/strong&gt;. Quando você encontra uma classe no seu HTML, e essa classe está atrelada a algum CSS, você consegue alterar o CSS desse elemento rapidamente ali mesmo, contratualmente, no HTML.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2016/12/quick-edit.gif&#34; alt=&#34;quick-edit&#34; width=&#34;768&#34; height=&#34;432&#34; class=&#34;aligncenter size-full wp-image-56692&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Veja &lt;a href=&#34;http://www.adobe.com/br/products/dreamweaver/features.html&#34;&gt;todas as features do Dreamweaver 2017 aqui&lt;/a&gt;. Vale a pena dar uma nova chance, já que ele tem ficado mais esperto a cada versão.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Projeto Felix: O novo software de 3D da Adobe</title>
      <link>https://tableless.github.io/hugo-public/projeto-felix-o-novo-software-de-3d-da-adobe/</link>
      <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/projeto-felix-o-novo-software-de-3d-da-adobe/</guid>
      <description>&lt;p&gt;A Adobe liberou no dia 17/12/2016 o seu mais novo &lt;a href=&#34;http://www.adobe.com/br/products/project-felix.html#x&#34;&gt;software&lt;/a&gt;, nomeado de &lt;strong&gt;Felix&lt;/strong&gt;. Buscando aqueles que hoje utilizam 2D, mas pensam em partir para o 3D sem muita dificuldade, o software apresenta uma&lt;/p&gt;

&lt;p&gt;interface simples e amigável, seguindo os padrões da empresa.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You already think in 3D. Now design in it.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56675&#34; src=&#34;uploads/2016/12/projectfelix-riverflow3-720x620.jpg&#34; alt=&#34;projectfelix-riverflow3-720x620&#34; width=&#34;720&#34; height=&#34;620&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O foco principal aparente é se utilizar dos atuais usuários da marca e chama-los para uma nova vibe, o 3D. Abranger usuários sem experiencia e com pouca disponibilidade de estudar a tecnologia a fundo. Em poucas palavras, o Felix é um mão na roda para iniciantes na área.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No 3D experience? No problem.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Composite 3D and 2D assets into photo-realistic images without steep learning curves or complex workflows. Just drag and drop a 3D model, material, and a light into your scene. Then choose your background image. Felix automatically detects the horizon line and provides gridlines to help you align and place your model. Felix can even use the background image to generate the right lighting.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prometendo tirar algumas barreiras do desenvolvimento 3D, ele utiliza um sistema de drag and drop(arrastar e soltar), além de possuir uma biblioteca para poder escolher dentre diversos modelos e materiais online. Ademais, o software possui um sistema para facilitar a iluminação e criação de environments(ambientes) realisticos.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56674&#34; src=&#34;uploads/2016/12/Capturar.png&#34; alt=&#34;capturar&#34; width=&#34;886&#34; height=&#34;517&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A ideia é abrir, arrastar e soltar, selecionar a iluminação, fundo e pronto. Sendo assim, o programa faz toda a configuração da iluminação e criação das grades.&lt;/p&gt;

&lt;div style=&#34;width: 640px;&#34; class=&#34;wp-video&#34;&gt;
  &lt;!--[if lt IE 9]&gt;&lt;![endif]--&gt;&lt;video class=&#34;wp-video-shortcode&#34; id=&#34;video-56670-1&#34; width=&#34;640&#34; height=&#34;360&#34; preload=&#34;metadata&#34; controls=&#34;controls&#34;&gt;&lt;source type=&#34;video/mp4&#34; src=&#34;http://images-tv.adobe.com/avp/vr/17da0fa7-490c-4daa-a14e-9507b290149a/24b26164-19d0-4a08-9ea1-f23901b86056/f8830b26-07bc-4d58-aa4f-79f1f697681b_20161021124416.960x540at1200_h264.mp4?_=1&#34; /&gt;
  
  &lt;a href=&#34;http://images-tv.adobe.com/avp/vr/17da0fa7-490c-4daa-a14e-9507b290149a/24b26164-19d0-4a08-9ea1-f23901b86056/f8830b26-07bc-4d58-aa4f-79f1f697681b_20161021124416.960x540at1200_h264.mp4&#34;&gt;http://images-tv.adobe.com/avp/vr/17da0fa7-490c-4daa-a14e-9507b290149a/24b26164-19d0-4a08-9ea1-f23901b86056/f8830b26-07bc-4d58-aa4f-79f1f697681b_20161021124416.960x540at1200_h264.mp4&lt;/a&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;Para concorrer e atrair os atuais usuários dos softwares mais utilizados como Maya, 3D Max, Blender, entre outros. O programa não se demonstra efetivo, haja vista que esses usuários tem um poderosíssimo poder comparado com o Felix. Entretanto, visando o foco principal da empresa(atrair usuários sem experiencia) a interface atrai e passa uma proposta de algo simples e fácil, trazendo um monte ideias para esses usuários.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56678&#34; src=&#34;uploads/2016/12/projectfelix-riverflow2-720x620.jpg&#34; alt=&#34;projectfelix-riverflow2-720x620&#34; width=&#34;720&#34; height=&#34;620&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Link para mais informações: &lt;a href=&#34;https://blogs.adobe.com/creativecloud/project-felix-now-available-for-download/&#34;&gt;Project Felix: Now Available for Download&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Features que sua API REST precisa ter desde o início</title>
      <link>https://tableless.github.io/hugo-public/features-que-sua-api-rest-precisa-ter-desde-o-inicio/</link>
      <pubDate>Thu, 17 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/features-que-sua-api-rest-precisa-ter-desde-o-inicio/</guid>
      <description>

&lt;p&gt;Eu tenho trabalhado com dados suavemente flutuando através do protocolo http por um tempo e agora eu tenho esse sentimento altruísta de que eu posso contribuir com os desenvolvedores mais jovens com algumas histórias sobre os desafios que enfrentei durante a minha jornada.&lt;/p&gt;

&lt;p&gt;Este artigo basicamente tem o objetivo de listar e discutir sobre alguns pontos importantes que sua API, possivelmente, poderia abraçar desde o início do projeto, a fim de acelerar o processo de desenvolvimento para todos em sua equipe.&lt;/p&gt;

&lt;h2 id=&#34;autenticação-e-autorização&#34;&gt;Autenticação e Autorização&lt;/h2&gt;

&lt;p&gt;Se você se preocupa com quem vai acessar seus endpoints, é necessário prestar atenção sobre este tópico. Existem algumas especificações conhecidas para lidar com este assunto, principalmente &lt;a href=&#34;https://jwt.io/&#34;&gt;JWT&lt;/a&gt;, &lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt; e &lt;a href=&#34;https://oauth.net/2/&#34;&gt;OAuth2&lt;/a&gt;. Estas abordagens irão abranger a maioria dos cenários em seus aplicativos, mas às vezes você será desafiado a criar um novo tipo de camada de segurança para atender algum requisito específico, neste caso, tente não reinventar a roda e adapte suas necessidades em um desses listados.&lt;/p&gt;

&lt;h2 id=&#34;query-filtering-sorting-e-pagination&#34;&gt;Query, Filtering, Sorting e Pagination&lt;/h2&gt;

&lt;p&gt;Assim que o seu banco de dados cresce, você vai começar a notar que alguns recursos estão demorando muito para serem recuperados. As abordagens comuns para esta situação são: armazenar em cache seus objetos (próximo tópico) e / ou criar a paginação / filtragem. Se você pode obter o seu recurso com algo como:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;shiny.api.com/resources?query[type=2]&amp;limit=5&amp;start=1&amp;order=[name]&lt;/pre&gt;

&lt;p&gt;&amp;#8230;seus clients serão capazes de selecionar apenas o que eles realmente precisam para processar uma página ou tela específica. É bom para dar uma certa autonomia para seus consumidores. Próximo nível deste assunto é &lt;a href=&#34;http://graphql.org/learn/&#34;&gt;GraphQL&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cache&#34;&gt;Cache&lt;/h2&gt;

&lt;p&gt;Uma boa maneira de recuperar seus recursos incrivelmente rápido é desenvolver alguma estratégia de cache. O custo de suas requisições serão menores uma vez que seus dados estarão prontos para serem consumidos em um banco de dados in-memory. Com algum esforço você pode lidar com isso usando &lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt; ou &lt;a href=&#34;https://memcached.org/&#34;&gt;Memcached&lt;/a&gt;. Boa sorte com sua expiração de cache. Confira algumas reflexões sobre este tema com o &lt;a href=&#34;http://blog.remarkablelabs.com/2012/12/russian-doll-caching-cache-digests-rails-4-countdown-to-2013&#34;&gt;Russian Doll Caching&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;wrappers-e-summarized-fields&#34;&gt;Wrappers e Summarized Fields&lt;/h2&gt;

&lt;p&gt;Às vezes, você precisará fornecer alguns campos calculados &amp;#8211; ou quaisquer dados agregados em geral &amp;#8211; em suas respostas e para esse cenário, posso sugerir-lhe montar algo nessa linha:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;summay&#34;: {
    &#34;total&#34;: 2
    &#34;averageAge&#34;: 22
  },
  &#34;data&#34;:[
  {
    &#34;name&#34;: &#34;John&#34;,
    &#34;age&#34;: 22
  },
  {
    &#34;name&#34;: &#34;Mary&#34;,
    &#34;age&#34;: 22
  }
  ]
}
&lt;/pre&gt;

&lt;h2 id=&#34;hateos&#34;&gt;HATEOS&lt;/h2&gt;

&lt;p&gt;HATEOAS significa &lt;em&gt;Hypermedia as the application state of the engine&lt;/em&gt;. É uma abordagem que permite que os clientes interpretem de forma autônima e dinâmica o estado atual de um recurso e as transições que podem ser iniciados decorrente deste mesmo estado.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;id&#34;: 276,
  &#34;amount&#34;: 90.00,
  &#34;links&#34;: [
  {
    &#34;type&#34;: &#34;orders&#34;,
    &#34;rel&#34;: &#34;self&#34;,
    &#34;href&#34;: &#34;/orders/ 276&#34;
  },
  {
    &#34;type&#34;: &#34;customer&#34;,
    &#34;rel&#34;: &#34;order&#39;s customer&#34;,
    &#34;href&#34;: &#34;/orders/276/customers&#34;
  }
  ]
}
&lt;/pre&gt;

&lt;p&gt;Sobre o JSON acima, você pode tirar as seguintes conclusões:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dentro do array &amp;#8220;links&amp;#8221; são todas as &amp;#8216;transições&amp;#8217; possíveis com o recurso, neste caso, podem acessar o cliente que criou as ordens com o URI /orders/276/customers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rel:auto&lt;/strong&gt; significa que esta URI é a referência do estado atual, neste caso, a ordem com ID 276. &lt;strong&gt;rel&lt;/strong&gt;, em geral, representa a relação entre a ligação com o recurso atual.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; indica o tipo de recurso que é o link em questão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ao padronizar seus serviços RESTful usando HATEOAS você permite que os clientes usem os recursos de maneiras mais fáceis, afinal de contas, as possibilidades de navegação entre os estados serão listadas em cada hit em seus recursos.&lt;/p&gt;

&lt;p&gt;Conforme descrito em um &lt;a href=&#34;http://martinfowler.com/articles/richardsonMaturityModel.html&#34;&gt;post&lt;/a&gt; de Martin Fowler, HATEOAS em sua API é o último passo para atingir a &amp;#8216;Glória de REST&amp;#8221;, o estado da arte.&lt;/p&gt;

&lt;h2 id=&#34;message-queue&#34;&gt;Message Queue&lt;/h2&gt;

&lt;p&gt;Aposto que você tem algumas rotas em suas APIs que são síncronas mas não precisam necessariamente ser. Alguns casos de uso para uso de fila de mensagens são: enviar e-mails após alguma ação, redimensionamento de imagem, codificação de vídeo, etc. Uma prática comum para esta situação é colocar essas ações em uma fila de mensagens para serem processadas posteriormente de forma assíncrona. Dê uma olhada na &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; ou &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;, ambas são grandes soluções.&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;/p&gt;

&lt;p&gt;É isso aí. Pelo menos para mim estes são os principais aspectos que eu vi nos últimos anos no desenvolvimento de novos apis http/rpc/rest. Se você acha que existem alguns outros pontos importantes para mencionar, por favor deixe nos comentários e conversamos sobre 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Yarn: A evolução do NPM</title>
      <link>https://tableless.github.io/hugo-public/yarn-evolucao-do-npm/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/yarn-evolucao-do-npm/</guid>
      <description>

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-56337&#34; style=&#34;text-align: center&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/yarn-kitten-full.png&#34; alt=&#34;yarn-kitten-full&#34; width=&#34;300&#34; height=&#34;135&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nos primórdios do desenvolvimento web e afins, trabalhar com bibliotecas era uma tarefa árdua. Lembro que tínhamos que pesquisar pela biblioteca, escolher uma versão, baixar o zip e implementar em nosso projeto. Não parece nada de outro mundo ao se tratar de pequenos projetos, mas quando estamos falando de projetos um pouco maiores, isso se torna um transtorno.  A coisa se torna ainda mais complicada quando há a dependência entre bibliotecas.&lt;/p&gt;

&lt;p&gt;Nesse contexto, entram os gerenciadores de pacotes, que chegaram para revolucionar a maneira como lidamos com as dependências de nosso projetos. Um dos principais gerenciadores de pacotes é o &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt;, que inicialmente visava abastecer apenas os desenvolvedores de NodeJS, mas acabou se tornando um hub comum de dependências Javascript em geral. O NPM hoje conta com mais de 300mil bibliotecas em seu repositório central, as quais alcançam cerca  5 bilhões de downloads por mês, e é a ferramenta de gerenciamento de pacotes mais popular do mundo.&lt;/p&gt;

&lt;p&gt;Apesar de ser uma excelente ferramenta, o NPM nunca conseguiu agradar a todos, e são comuns as reclamações de lentidão, a falta de um instalador offline, instalações em fila, etc.&lt;/p&gt;

&lt;h2 id=&#34;yarn-package-manager&#34;&gt;Yarn Package Manager&lt;/h2&gt;

&lt;p&gt;No dia 11 de outubro de 2016, o Facebook &lt;a href=&#34;https://code.facebook.com/posts/1840075619545360&#34;&gt;anunciou&lt;/a&gt; o seu novo gerenciador de pacotes para Javascript: o Yarn, que vem com a proposta de ser mais rápido, seguro e confiável que o NPM. O Yarn é open source, e nasceu com a colaboração, também, das empresas Exponent, Google, e Tilde.&lt;/p&gt;

&lt;p&gt;O Yarn funciona exatamente como o NPM e o Bower, abrangendo, inclusive, as bibliotecas que estão presentes nestes gerenciadores. Uma das coisas mais interessantes, além da rapidez, é a possibilidade de instalação de pacotes offline. Quando você instala um pacote, ele cria um cache em sua máquina que possibilita a futura instalação deste sem precisar estar conectado à internet.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-yarn&#34;&gt;Instalando o Yarn&lt;/h2&gt;

&lt;p&gt;Para a instalação, você pode baixar no &lt;a href=&#34;https://yarnpkg.com/en/docs/install&#34;&gt;site oficial&lt;/a&gt;, mas também pode utilizar outro gerenciador, como o NPM (confesso que parece irônico, como quando utilizávamos o Internet Explorer para baixar o Chrome).&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;npm install -g yarn
&lt;/pre&gt;

&lt;h2 id=&#34;utilizando-o-yarn&#34;&gt;Utilizando o Yarn&lt;/h2&gt;

&lt;h3 id=&#34;inicialização&#34;&gt;Inicialização&lt;/h3&gt;

&lt;p&gt;A utilização do Yarn é bastante semelhante com a do NPM. Para inicializar basta digitar, na linha de comando:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn init
&lt;/pre&gt;

&lt;p&gt;Este comando irá gerar um arquivo &lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;{
&#34;name&#34;: &#34;Yarn&#34;,
&#34;version&#34;: &#34;1.0.0&#34;,
&#34;main&#34;: &#34;index.js&#34;,
&#34;license&#34;: &#34;MIT&#34;
}
&lt;/pre&gt;

&lt;p&gt;O gerenciamento dos pacotes pode ser feito diretamente no &lt;em&gt;package.json&lt;/em&gt;, ou pela linha de comando.&lt;/p&gt;

&lt;h3 id=&#34;adicionando-uma-dependência&#34;&gt;Adicionando uma dependência&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add [package]
yarn add [package]@[version]
yarn add [package]@[tag]
&lt;/pre&gt;

&lt;h3 id=&#34;fazendo-update&#34;&gt;Fazendo update&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn upgrade [package]

yarn upgrade [package]@[version]
yarn upgrade [package]@[tag]
&lt;/pre&gt;

&lt;h3 id=&#34;desfazendo-as-coisas&#34;&gt;Desfazendo as coisas&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn remove [package]
&lt;/pre&gt;

&lt;h3 id=&#34;instalando-as-dependências&#34;&gt;Instalando as dependências&lt;/h3&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn install
&lt;/pre&gt;

&lt;h2 id=&#34;outras-funcionalidades&#34;&gt;Outras funcionalidades&lt;/h2&gt;

&lt;h3 id=&#34;lock-file&#34;&gt;Lock file&lt;/h3&gt;

&lt;p&gt;Além do package.json, o Yarn cria, na pasta raíz do projeto, um arquivo yarn.lock, que trata de listar as bibliotecas &amp;#8220;originais&amp;#8221; do projeto, um sistema bem semelhante ao do composer.&lt;/p&gt;

&lt;h3 id=&#34;fazendo-uma-limpeza&#34;&gt;Fazendo uma limpeza&lt;/h3&gt;

&lt;p&gt;Outro recurso interessante é o mecanismo de limpeza de dependências, ao executar o comando:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn clean
&lt;/pre&gt;

&lt;p&gt;O Yarn vasculha as dependências e verifica tudo aquilo que não está sendo utilizado e exporta para um arquivo &lt;strong&gt;.yarnclean&lt;/strong&gt;. Caso você tenha este arquivo em sua pasta raíz, quando executar o &lt;strong&gt;yarn install&lt;/strong&gt;, ele vai instalar as dependências de forma mais limpa.&lt;/p&gt;

&lt;h3 id=&#34;self-update&#34;&gt;Self-update&lt;/h3&gt;

&lt;p&gt;Para atualizar o Yarn, basta digitar no console:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn self-update
&lt;/pre&gt;

&lt;p&gt;ou, caso queira especificar a versão:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn self-update 0.1.2
&lt;/pre&gt;

&lt;h2 id=&#34;futuro&#34;&gt;Futuro&lt;/h2&gt;

&lt;p&gt;Em todos os testes realizados, o Yarn se mostrou um gerenciador de pacotes bastante robusto e completo. De fato, o Yarn é extremamente rápido. Estou utilizando-o há cerca de uma semana, e, sinceramente, não penso em voltar a utilizar o NPM.&lt;/p&gt;

&lt;p&gt;A sua equipe de desenvolvimento está incentivando todos a migrarem e contribuirem na sua página do &lt;a href=&#34;https://github.com/yarnpkg/yarn&#34;&gt;github&lt;/a&gt;, afinal todos só temos a ganhar com esta nova e excelente ferramenta.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Semântica na Prática Parte 1: A Web do futuro (ou quase isso)</title>
      <link>https://tableless.github.io/hugo-public/web-semantica-na-pratica-parte-1-web-do-futuro-ou-quase-isso/</link>
      <pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/web-semantica-na-pratica-parte-1-web-do-futuro-ou-quase-isso/</guid>
      <description>

&lt;p&gt;É possível conferir aqui mesmo no Tableless alguns bons artigos introdutórios sobre Web Semântica (veja &lt;a href=&#34;http://tableless.com.br/a-web-semantica/&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://tableless.com.br/semantica-padroes-e-o-que-voce-tem-a-ver-com-isto/&#34;&gt;aqui&lt;/a&gt;), os quais eu recomendo a leitura caso você nunca tenha ouvido falar sobre o assunto.&lt;/p&gt;

&lt;p&gt;A intenção dessa sequência de posts que nomeei como “Web Semântica na Prática” é destrinchar esse assunto de modo aprofundado, apresentando os conceitos e exemplificando-os na prática. O tutorial completo será composto de 9 posts que irão reunir, ao final, um guia bastante abrangente sobre os conceitos, padrões, tecnologias, linguagens e ferramentas utilizadas na criação de aplicações para Web Semântica. Preparados?&lt;/p&gt;

&lt;h2 id=&#34;apresentando-a-web-do-futuro&#34;&gt;Apresentando a Web do Futuro&lt;/h2&gt;

&lt;p&gt;Caso você já tenha lido os textos introdutórios linkados no inicio desse texto, você tem uma noção do que é a Web Semântica (carinhosamente chamada de SemWeb pelos íntimos e também reconhecida pela alcunha de Web 3.0, mas você pode usar a buzzword que mais lhe agradar), mas independente de ter lido ou não, vamos apresentar rapidamente o que é esse conjunto de conceitos, pelas palavras de seus próprios criadores, Tim Berners-Lee, James Hendler e Ora Lassila:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“A Web Semântica não é uma Web separada mas sim uma extensão da Web atual onde a informação possui significado, permitindo que computadores e pessoas trabalhem em cooperação&amp;#8221;&lt;/p&gt;

&lt;p&gt;— Tradução livre a partir do artigo &amp;#8220;&lt;a href=&#34;http://www.scientificamerican.com/article/the-semantic-web/&#34;&gt;The Semantic Web&amp;#8221;&lt;/a&gt;* publicado em 2001 na Scientific American&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;É praticamente de sabedoria popular que a Web está inundada de dados e que esse volume só cresce a cada dia que passa, mas também é fato que esses dados não possuem um significado claro e estabelecido, impossibilitando sua utilização de modo integrado sem conflitos. Determinar esse significado e converter esses dados em informação aproveitável por qualquer agente (humano ou computadorizado) é o objetivo maior da Web Semântica.&lt;/p&gt;

&lt;p&gt;De certa forma, a Web Semântica é uma visão do que a Web será no futuro, onde agentes computadorizados poderão enfim compreender o significado dos dados da mesma maneira que nós compreendemos e atuar sobre eles, executando tarefas repetitivas e auxiliando os usuários das mais diversas maneiras.&lt;/p&gt;

&lt;p&gt;É importante notar que, sendo uma “previsão”, a Web Semântica não é um padrão de mercado ainda, logo é bom estar ciente de que todos os padrões, formatos e linguagens utilizadas para criar aplicações nesse ambiente hoje em dia talvez não sejam nunca usados em larga escala no &amp;#8220;mundo real&amp;#8221;. De forma sucinta, &lt;strong&gt;a&lt;/strong&gt; &lt;strong&gt;Web Semântica é o futuro da Web, mas o modo como vemos a implementação dela hoje pode não ser a mesma quando este futuro chegar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Você pode estar se perguntando: Porque então estudar esses conceitos se eles podem nem chegar a ser utilizados?&lt;/p&gt;

&lt;p&gt;O motivo é simples: embora não seja possível afirmar de forma categórica que a Web Semântica será implementada desse modo, isso é extremamente provável.&lt;/p&gt;

&lt;p&gt;Veja, o termo foi cunhado em &lt;sup&gt;2000&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2001&lt;/sub&gt; juntamente com as possíveis tecnologias e padrões para sua implementação. As ideias iniciais foram revisadas em 2006 e em 2011 (veja “&lt;a href=&#34;http://ieeexplore.ieee.org/abstract/document/1637364/?reload=true&#34;&gt;The Semantic Web Revisited&lt;/a&gt;”* e &amp;#8220;&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=1988690&#34;&gt;The Semantic Web 10th year update&lt;/a&gt;&amp;#8220;*) e a base tecnológica para Web Semântica é composta por padrões que estão por aí desde sempre e são bem conhecidas por todos: basicamente XML, URI e Unicode.&lt;/p&gt;

&lt;p&gt;Soma-se a isso o amadurecimento desses conceitos nos 15 anos que separam sua criação da Web atual, e então é possível notar de forma clara que a Web está evoluindo e precisando dar seu próximo passo para algo ao menos próximo daquilo foi proposto como sendo a Web Semântica.&lt;/p&gt;

&lt;p&gt;Resumindo, apesar de ser uma previsão, as tecnologias estão aí, já estão sendo usadas e, mesmo não sendo um padrão de mercado, elas funcionam e podem guiar o desenvolvimento de aplicações Web em alguns anos. É bom estar preparado.&lt;/p&gt;

&lt;p&gt;Se isso não bastar para te convencer a continuar lendo essa série de posts, creio que possa ser interessante conhecer todos os conceitos por trás dessa proposta pois, sendo eles baseados em conceitos sólidos, aplicá-los na prática pode ser útil para uma completa compreensão da Web como um todo, seja para usá-los hoje ou em qualquer momento no futuro.&lt;/p&gt;

&lt;h2 id=&#34;as-camadas-da-web-semântica&#34;&gt;As camadas da Web Semântica&lt;/h2&gt;

&lt;p&gt;O primeiro passo para estudar a Web Semântica é ter uma visão abrangente de como uma aplicação é arquitetada nesse contexto, incluindo os padrões e tecnologias utilizados. Para este fim, nada melhor que um desenho. ;-P&lt;/p&gt;

&lt;p&gt;A “Pirâmide da Web Semântica” foi descrita ainda em 2001 e segue sendo um dos diagramas mais utilizados para explicar este universo de forma sucinta. Vale notar que esse diagrama possui diversas versões e modificações realizadas por profissionais de diferentes áreas (Ciência da Computação, Ciência da Informação,Biblioteconomia, ente outros), pois existem diversas propostas sobre a organização da Web Semântica, mas a versão que você vê abaixo é uma adaptação (traduzida) da figura original de 2001 que é inclusive a versão utilizada pelo W3C atualmente, com apenas um ou dois adendos que achei necessários.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;wp-image-56086 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/camadasWebSem.png&#34; alt=&#34;camadas_web_semantica&#34; width=&#34;484&#34; height=&#34;334&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A ideia desta estrutura é definir como implementar a Web Semântica, sendo que cada camada é complementar a camada imediatamente inferior, definindo as linguagens e conceitos chave que devem ser utilizados em tal implementação.&lt;/p&gt;

&lt;p&gt;É muito importante ressaltar que o termo Web Semântica é como “guarda-chuva” de conceitos, técnicas e padrões, conforme pode ser observado na figura, e não uma conjunto indissociável de linguagens e frameworks que devem ser utilizados de modo obrigatório. Exatamente por esse motivo que a maior parte das aplicações existentes hoje em dia não utiliza todas as camadas, mas sim apenas uma parte delas.&lt;/p&gt;

&lt;p&gt;Embora não tenha nada de realmente prático nesse primeiro post, imagino que para um texto introdutório chegamos a um ponto interessante e espero que tenha atiçado a curiosidade de cada um para investir um pouco de tempo estudando o que foi apresentado aqui (e também o que será apresentado nos próximos posts) para contribuir para a Web do futuro ou pelo menos chegar perto disso.&lt;/p&gt;

&lt;p&gt;No próximo capítulo: “IRI, URI, URL, URN e como identificar TUDO na Web”.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entrevista com Bert Bos (Criador da CSS) e W3C</title>
      <link>https://tableless.github.io/hugo-public/entrevista-com-bert-bos-e-hakon-wium-lie-criador-da-css-e-w3c/</link>
      <pubDate>Wed, 14 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/entrevista-com-bert-bos-e-hakon-wium-lie-criador-da-css-e-w3c/</guid>
      <description>&lt;p&gt;Na &lt;a href=&#34;http://conferenciaweb.w3c.br/&#34;&gt;8ª edição da Web.br&lt;/a&gt; teremos a presença ilustre de Bert Bos como keynote speaker. Ele, junto com &lt;a href=&#34;https://en.wikipedia.org/wiki/Håkon_Wium_Lie&#34;&gt;Håkon Wium Lie&lt;/a&gt;, foram os dois inventores dos Cascading Style Sheets, tecnologia também conhecida pela sigla CSS. Bert trabalha no W3C desde 1995 com desenvolvimento e padronização do CSS, assim como de outros padrões da web, como HTML, XML e MathML. Nessa entrevista ele descreve o contexto que o levou a trabalhar nos primeiros rascunhos do padrão CSS, o que ainda falta ser aprimorado e sua perspectiva para a evolução do CSS e do HTML a longo-prazo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Quais eram as necessidades específicas e o contexto que o levaram a trabalhar nos primeiros rascunhos do padrão CSS ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quando Tim Berners-Lee criou seu primeiro navegador Web, este possuía folhas de estilos, mas apenas para o usuário. A ideia era que o autor especificasse o conteúdo de um documento, mas que o navegador junto com o usuário determinassem como melhor exibi-lo.&lt;/p&gt;

&lt;p&gt;Durante certo tempo, esse foi o modelo, afinal de contas, o usuário é quem melhor sabe qual tipo de tela ele tem, de quais cores ele gosta mais, o quão grande são as janelas em seu sistema. Foram criados diversos outros navegadores que permitiam ao usuário configurar a exibição do conteúdo, como o &lt;a href=&#34;https://en.wikipedia.org/wiki/ViolaWWW&#34;&gt;Viola&lt;/a&gt; e o &lt;a href=&#34;https://en.wikipedia.org/wiki/Mosaic_%28web_browser%29&#34;&gt;Mosaic&lt;/a&gt;. Eu mesmo criei também um navegador dessa forma, chamado &lt;a href=&#34;https://en.wikipedia.org/wiki/Argo_%28web_browser%29&#34;&gt;Argo&lt;/a&gt;. As folhas de estilo no meu navegador eram mais poderosas, mas ainda assim apenas para o usuário, e não para o autor.&lt;/p&gt;

&lt;p&gt;Os primeiros autores na Web eram em sua maioria cientistas. Eles estavam acostumados a escrever documentos e deixar outra pessoa decidir sua aparência: jornais científicos normalmente fornecem suas próprias folhas de estilo (em &lt;a href=&#34;https://en.wikipedia.org/wiki/LaTeX&#34;&gt;LaTeX&lt;/a&gt;, por exemplo), assim o HTML se encaixou bem nesse modelo.&lt;/p&gt;

&lt;p&gt;Mas conforme a Web se tornava mais popular, designers começaram a se interessar e a opinião deles era de que, por serem designers, eles sabiam com mais propriedade que os usuários como apresentar um documento da melhor forma. Assim como a aparência de um livro lhe informa sobre que tipo de livro se trata, a aparência de um documento deveria também lhe dizer algo sobre seu conteúdo.&lt;/p&gt;

&lt;p&gt;Mas, naquela época, em 1994, isso era impossível de se fazer usando HTML. Assim, duas coisas aconteceram: os designers perceberam que o HTML permitia o uso de imagens, e então eles começaram a substituir textos por imagens, porque assim eles tinham total controle. E o Netscape, o primeiro navegador comercial, notando essa demanda dos designers, começou a adicionar extensões proprietárias ao HTML, como atributos de cor e de plano de fundo, um elemento &lt;center&gt;, e elementos de espaçamento.&lt;/p&gt;

&lt;p&gt;Os usuários não estavam felizes com isso: você não pode redimensionar imagens ou recortar e colar partes delas, e imagens também não proviam acessibilidade. E os elementos proprietários faziam os documentos ficarem grandes e difíceis de serem mantidos, e mais difíceis para o usuário aplicar estilos. E, assim, pessoas na lista de discussão www-talk@w3.org começaram a procurar soluções.&lt;/p&gt;

&lt;p&gt;Se você quiser ler a história completa do que aconteceu naquela época, você pode ler o &lt;a href=&#34;http://www.w3.org/Style/LieBos2e/history/&#34;&gt;capítulo relevante no livro que Håkon e eu escrevemos&lt;/a&gt; ou a &lt;a href=&#34;http://people.opera.com/howcome/2006/phd/&#34;&gt;tese de PhD do Håkon&lt;/a&gt;. Em suma: diversas pessoas propuseram linguagens de folhas de estilo, algumas eram novas, e outras eram versões simplificadas do que já existia no mundo do SGML, por que o HTML foi derivado do SGML. Duas dessas linguagens eram a “Cascading HTML Style Sheets” do Håkon e a minha linguagem “Streaming Style Sheets”.&lt;/p&gt;

&lt;p&gt;Quando eu olhei para a linguagem do Håkon, eu vi uma ideia interessante, que era a de que você poderia ter um tipo de negociação entre o que o autor propunha e o que o usuário queria. Nós começamos a trabalhar juntos, combinando as ideias dele e as minhas (por exemplo, seletores contextuais e a aplicação de folhas de estilos para outros tipo de documento além de HTML), nós inventamos uma nova sintaxe e logo nossa proposta (chamada “Cascading Style Sheets” omitindo o “HTML” do nome) se tornou a mais popular, e outras pessoas começaram a contribuir.&lt;/p&gt;

&lt;p&gt;Em 1995, o novo grupo de trabalho de HTML assumiu a tarefa, de modo a torná-lo um padrão. E um pouco depois o grupo se separou, formando o grupo de trabalho de CSS existente ainda hoje.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Você já considerou aplicar regras de estilo CSS em outros tipos de conteúdo (além de HTML)? Se isso já foi feito, você poderia fornecer um exemplo? Caso contrário, você poderia discutir em que outros conteúdos poderia ser útil o uso de CSS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uma das ideias da minha proposta original de folhas de estilo era justamente isto: usar a mesma linguagem de folhas de estilo para uma ampla gama de documentos, não apenas para HTML (meu próprio navegador podia exibir muitos documentos SGML, e HTML era apenas uma subclasse destes).&lt;/p&gt;

&lt;p&gt;Naquela época, ainda não existia XML, mas nós pensamos que deveríamos ter uma linguagem de folhas de estilo para SGML simples ou qualquer coisa que tivesse uma estrutura simples de árvore.&lt;/p&gt;

&lt;p&gt;Quando o XML foi criado um pouco depois (pesquisa iniciada em 1996, com a publicação do padrão em 1998), acabou combinando muito bem com o que tínhamos em mente e assim o CSS pôde ser utilizado com grande parte de documentos XML também.&lt;/p&gt;

&lt;p&gt;E o CSS pode ser usado, e está de fato sendo usado, para outras coisas também. Um exemplo é a biblioteca de interfaces gráficas &lt;a href=&#34;http://qt-project.org/doc/qt-4.8/stylesheet.html&#34;&gt;Qt&lt;/a&gt;. Ela usa CSS para aplicar estilo aos componentes da interface gráfica (&lt;a href=&#34;http://doc.qt.io/qt-5/stylesheet.html&#34;&gt;http://doc.qt.io/qt-5/&lt;/a&gt;). Outro exemplo é o MapCSS, usado por diversos programadores para desenhar mapas cartográficos (&lt;a href=&#34;http://wiki.openstreetmap.org/wiki/MapCSS&#34;&gt;http://wiki.openstreetmap&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Quais partes da atual versão da estecificação do CSS você acha que ainda precisa de mais aprimoramentos?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tem muitas coisas que ainda estão faltando, especialmente agora que editores estão usando CSS fortemente para editoração de livros, tanto em papel quanto para e-books.&lt;/p&gt;

&lt;p&gt;Originalmente nós desenhamos o CSS para ser a linguagem de estilos simples, e adicionamos XSL (por exemplo, XSLT + XSL-FO) em 2001 para as tarefas complexas, como edição de livros. Mas, no momento, o desenvolvimento do XSL parou, e nós não sabemos quando ele irá continuar, e então os editores estão migrando para o CSS.&lt;/p&gt;

&lt;p&gt;Apenas para dar alguns exemplos de coisas que estão faltando no CSS: para o tratamento adequado de hipertexto, nós precisamos de elementos colapsantes (veja &lt;a href=&#34;http://en.wikipedia.org/wiki/StretchText&#34;&gt;aqui&lt;/a&gt;) ou, de modo geral, uma forma de alternar o estado de elementos (e não apenas ‘checkboxes’) entre dois possíveis estilos. Nós também não temos ainda containers que formem um conjunto de páginas em abas.&lt;/p&gt;

&lt;p&gt;E temos *muito* trabalho a ser feito para tudo que envolva texto paginado: notas de rodapé, elementos flutuantes no topo ou no pé da página, texto que se estenda atravessando colunas, divisão de texto em múltiplos fluxos e alinhamento desses fluxos de texto em um template de página baseado em uma grade, referências cruzadas (como “veja página 7″), índices alfabéticos, ‘copyfitting’ (fazer um texto caber exatamente em um espaço alocado), cabeçalhos e rodapés contendo texto bidirecional ou fórmulas matemáticas etc. Eu comecei a colecionar uma lista de requisitos que pode ser vista &lt;a href=&#34;http://www.w3.org/Style/2013/paged-media-tasks&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Existem propostas e implementações experimentais para algumas dessas funcionalidades, mas grande parte do trabalho ainda não foi realizado.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Qual é a sua perspectiva para a evolução do CSS e do HTML em longo prazo? Como você acha que essas tecnologias evoluirão nas próximas décadas?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Foi muito bom o HTML4 ter permanecido sem modificações por tanto tempo. Isso nos permitiu compreendê-lo e criar softwares interessantes. Nós esperávamos certos tipos de aplicações, mas algumas vezes levou muitos anos para que as pessoas se tornassem capazes de efetivamente criá-los. Por exemplo, nós esperávamos que algo como os microformatos fosse surgir, mas levou bastante tempo até algumas pessoas de fato descobrirem como fazê-lo corretamente. E algumas coisas foram inesperadas e apenas descobertas depois.&lt;/p&gt;

&lt;p&gt;Então, de certa forma, é uma pena que agora nós tenhamos que migrar nossos softwares para o HTML5, mesmo que o HTML5 adicione novas funcionalidades interessantes. Eu estou lentamente migrando meus softwares, mas levará um bom tempo até que eu possa fazer com o HTML5 o que eu posso fazer com o HTML4. Assim, estou esperançoso de que grande parte de tudo o que é o HTML5, ou sua próxima revisão, volte a permanecer estável por 10 ou 15 anos.&lt;/p&gt;

&lt;p&gt;Para o CSS, não tenho muita certeza sobre o que quero. Como visto acima, há várias coisas que precisamos adicionar para satisfazer os vários novos usos. Mas o CSS não foi desenhado para tarefas complexas. Ele foi feito para ser usado por usuários comuns para aplicação de estilos simples. Ao adicionar novas capacidades ao seu modelo original, o CSS está se tornando complexo demais para a maioria das pessoas. Então talvez seja o momento de se recomeçar do zero criando duas novas linguagens: uma simples que todas as pessoas saibam usar, mas que talvez seja limitada na quantidade de controles detalhados que oferece, e uma avançada, adequada até mesmo para editoração complexa de livros e revistas. Mas eu ainda não vi nenhuma proposta que tenha me agradado.&lt;/p&gt;

&lt;p&gt;É bom ver diversos pré-processadores de CSS para ajudar os usuários avançados, como o &lt;a href=&#34;http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29&#34;&gt;SASS&lt;/a&gt; e o &lt;a href=&#34;http://en.wikipedia.org/wiki/LESS_%28stylesheet_language%29&#34;&gt;LESS&lt;/a&gt;. Eu tinha esperança de eles aparecessem mais cedo. Espero que eles se desenvolvam e se tornem ainda melhores. Por outro lado, estou surpreso com o tamanho de algumas folhas de estilo que as pessoas têm criado. As mais complexas que eu mesmo criei têm 10 kbytes, e a maioria é bem menor que isso. Fico me questionando se eles estão fazendo a coisa certa…&lt;/p&gt;

&lt;p&gt;Dessa forma, em termos práticos, acho que ainda iremos adicionar novas funcionalidades ao CSS durante os próximos poucos anos. Haverá, sem dúvidas, novos módulos no CSS3, e alguns módulos que já estão finalizados serão provavelmente estendidos ou substituídos por um módulo do CSS4.&lt;/p&gt;

&lt;p&gt;Continuaremos mantendo a retrocompatibilidade do CSS, mas isso também significa se tornará gradativamente mais difícil de adicionar novas funcionalidades a ele, e suas sintaxes poderão não ser as mais intuitivas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrando de enterprise dev para startup dev</title>
      <link>https://tableless.github.io/hugo-public/migrando-de-enterprise-dev-para-startup-dev/</link>
      <pubDate>Sun, 11 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/migrando-de-enterprise-dev-para-startup-dev/</guid>
      <description>&lt;p&gt;Comecei minha carreira na área de desenvolvimento de software razoavelmente cedo, aos 16 anos estudava no ensino médio pela manhã, estagiava à tarde e estudava no curso técnico à noite. Ao contrário de muitos desenvolvedores, meu primeiro contato com código não foi dos melhores, foram horas e horas de estudo pra conseguir entender &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; do que o professor estava tentando ensinar, na época ASP — sim, o ‘clássico’.&lt;/p&gt;

&lt;p&gt;Agora, com 26 anos, posso fazer uma análise interessante do que aconteceu nos últimos 10 anos de software e talvez essa reflexão sirva como norte pra quem está começando ou pra quem está afim de fazer uma troca de ares.&lt;/p&gt;

&lt;p&gt;Começando com algumas verdades:&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;O mercado de trabalho em grandes empresas é entediante&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tive a oportunidade de trabalhar em multinacionais gigantes — não cabe citá-las aqui — e lembro que ao entrar em cada uma delas, a vontade de criar e ser o melhor profissional possível sempre me acompanhava e a cada dia de trabalho essa mesma vontade ia se auto-destruindo por alguns motivos como: código legado horrível, tecnologias do tempo do meu avô, pessoas com incrível má vontade, burocracias infinitas para coisas pequenas e por aí vai.&lt;/p&gt;

&lt;p&gt;Boa parte da energia era sugada por todo e qualquer tipo de atividade, menos pela única coisa que eu realmente queria: criar algo com algum real valor.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Trabalhar com tecnologia pode e deve ser legal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Durante muito tempo questionei se eu realmente estava na área certa, porque a minha satisfação profissional estava sempre abaixo do esperado. Criei diversos side projects, alguns relacionados com TI e outros não, para prencheer essa lacuna da realização.&lt;/p&gt;

&lt;p&gt;O que sempre me intrigava é que ao chegar em casa e criar esses projetos, aprender novas linguagens, fazer um CLI pra ler tweets ou um bot inútil, parecia ser tão legal. Por que eu não conseguia ter um suspiro parecido no meu ambiente profissional?&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Você pode se divertir com TI também&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Certo dia resolvi chutar o balde, largar o emprego em uma dessas grandes multinacionais e ver no que dava.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;PS:&lt;/strong&gt; Anter de continuar, eu não tenho filhos, nem grandes responsabilidades, não vá fazer o mesmo de forma inconsequente, não é essa a ideia 😛&lt;/p&gt;

&lt;p&gt;Dei sorte, fui parar em uma companhia com pessoas excepcionais e que estavam pilhadas na criação de um novo projeto. Eu nunca havia experimentado aquele tipo de dinamismo e vontade de fazer as coisas, parecia que eu estava cego esse tempo todo, que havia um mundo diferente na área de TI e eu só havia enxergado agora.&lt;/p&gt;

&lt;p&gt;Atualmente, em uma outra companhia, encontrei o mesmo feeling e liberdade de criação, de poder usar boas práticas, de ter pessoas com vontade de fazer o melhor todo dia, sem aquele clima de velório, com todo mundo reclamando do processo ou do lay-off que está por vir.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Como você pode fazer esse shift?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Existem diversas maneiras de você se tornar um profissional mais atraente pro mercado, onde esses projetos bacanas estão sendo feitos. Abaixo algumas sugestões:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Aprenda coisas novas fora do ambiente de trabalho, não se limite ao que você vê das 8 as 18, existe um mundo de paradigmas de programação, linguagens, design patterns, projetos open source, tipos de arquitetura que você pode aprender e tirar lições.&lt;/li&gt;
&lt;li&gt;Crie side/pet projects para por em prática essas coisas que você aprende por conta própria, é a melhor maneira de assegurar que você realmente entendeu o que você aprendeu.&lt;/li&gt;
&lt;li&gt;Coloque esses projetos no &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;&lt;/a&gt;, o mesmo pode servir de ‘portfolio’ para você em algum processo seletivo.&lt;/li&gt;
&lt;li&gt;Participe de algum &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;https://www.meetup.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://www.meetup.com/&#34;&gt;https://www.meetup.com/&lt;/a&gt;&lt;/a&gt; de tecnologia, existem centenas acontecendo pelo Brasil e é uma ótima oportunidade de conhecer pessoas que estão em outros lugares e que podem te ajudar a conseguir uma nova oportunidade.&lt;/li&gt;
&lt;li&gt;Te inscreve em algum dos milhares de cursos onlines (Udemy, Pluralsight, Code Academy, Udacity, Tree House, etc) e faça um até o final.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Por fim, apenas um esclarecimento: eu conheci pessoas muito bacanas e excelentes profissionais nessas grandes empresas que passei também e sim, é possível ser feliz trabalhando nesses lugares, tudo depende do seu perfil. Se você é mais da pilha de inovação/criação de projetos, minhas sugestões talvez façam mais sentido.&lt;/p&gt;

&lt;p&gt;Ah, e não estou considerando ‘enterprise’ empresas como Google, Facebook e/ou qualquer outra que mesmo sendo grande tenha em sua cultura uma vibe diferente em relação aos projetos/times.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript, muito além dos navegadores e dos servidores</title>
      <link>https://tableless.github.io/hugo-public/javascript-muito-alem-dos-navegadores-e-dos-servidores/</link>
      <pubDate>Sun, 04 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/javascript-muito-alem-dos-navegadores-e-dos-servidores/</guid>
      <description>&lt;p&gt;Quem é esse novo JavaScript que tem despertado a curiosidade de desenvolvedores de outras linguagens e tem atraído-os para seu universo pluralista e multiplataforma.&lt;/p&gt;

&lt;p&gt;Isso mesmo, nosso bom e velho JavaScript não roda apenas nos navegadores e servidores (Node.js), ele vai muito mais além&amp;#8230;&lt;/p&gt;

&lt;p&gt;Neste artigo irei apresentar a linguagem JavaScript sendo utilizada junto a tecnologias exponenciais, sendo elas: inteligência artificial, realidade virtual, internet das coisas e até mesmo para controle de drones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synaptic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Esta biblioteca de rede neural JavaScript roda no runtime node.js e também no navegador, seu algoritmo de generalização é livre de arquitetura, assim é possível construir e treinar basicamente qualquer tipo de primeira ordem ou até segunda ordem de arquiteturas de rede neural.&lt;/p&gt;

&lt;p&gt;Link do projeto no GitHub: &lt;a href=&#34;https://github.com/cazala/synaptic&#34;&gt;https://github.com/cazala/synaptic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WebVR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WebVR fornece suporte para expor dispositivos de realidade virtual como o Oculus Rift para aplicações web, permitindo que os desenvolvedores criem experiências de realidade virtual que rodem em qualquer navegador habilitado para WebGL.&lt;/p&gt;

&lt;p&gt;Link do site do projeto: &lt;a href=&#34;https://mozvr.com/#start&#34;&gt;https://mozvr.com/#start&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Johhny-Five&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Johnny-Five é a Plataforma JavaScript Robotics &amp;amp; Internet das coisas. Lançado pela Bocoup em 2012, Johnny-Five é mantido por uma comunidade de desenvolvedores de software apaixonados e engenheiros de hardware. Mais de 75 desenvolvedores fizeram contribuições para a construção de um ecossistema robusto, extensível e combináveis.&lt;/p&gt;

&lt;p&gt;Link do site do projeto: &lt;a href=&#34;http://johnny-five.io/&#34;&gt;http://johnny-five.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AR Drone&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Esta biblioteca possibilita o desenvolvimento de software para controle de drones.&lt;/p&gt;

&lt;p&gt;Link do projeto no GitHub: &lt;a href=&#34;https://github.com/felixge/node-ar-drone&#34;&gt;https://github.com/felixge/node-ar-drone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Se você sabe JavaScript, você pode ir onde quiser!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fantástico, realmente com apenas o conhecimento de programação na linguagem JavaScript podemos começar a desenvolver para as mais diversas plataformas, seja na terra, seja no ar, seja nessa realidade, seja na virtual, JavaScript está provando ser a tecnologia multiplataforma e que funciona nos mais variados dispositivos.&lt;/p&gt;

&lt;p&gt;E você, conhece outras bibliotecas e frameworks JavaScript nessas e em outras tecnologias que não estão apenas nos navegadores e servidores?&lt;/p&gt;

&lt;p&gt;Então, compartilha com a gente, deixe seu comentário.&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programação funcional em Javascript. Implementando Curry e Compose, com bind e reduce.</title>
      <link>https://tableless.github.io/hugo-public/programacao-funcional-em-javascript-implementando-curry-e-compose-com-bind-e-reduce/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/programacao-funcional-em-javascript-implementando-curry-e-compose-com-bind-e-reduce/</guid>
      <description>

&lt;p&gt;Nos últimos tempos só se fala em programação funcional, seus benefícios, funções puras, dados imutáveis, composição de funções, etc.&lt;/p&gt;

&lt;p&gt;Atualmente temos diversas libs que auxiliam o javascript na missão de ser funcional, Lodash, Underscore e Ramda são uma delas. Então porque estarei falando do &lt;a href=&#34;https://github.com/concretesolutions/pareto.js&#34;&gt;Pareto.js&lt;/a&gt;? Simples como o Princípio de Pareto, a lib criada tem o objetivo de ser leve e resolver 80% dos seus problemas com 20% de código.&lt;/p&gt;

&lt;p&gt;Geralmente procuro aprender algo desmitificando a “mágica” por tras da implementação. Foi assim quando comecei a aprender Angular, e agora o mesmo está sendo aplicado à programação funcional. Por isso nesse post vamos avaliar as implementações de Curry e Compose do Pareto.js.&lt;/p&gt;

&lt;h3 id=&#34;curry-graf-h3-graf-after-p&#34;&gt;Curry {.graf&amp;ndash;h3.graf-after&amp;ndash;p}&lt;/h3&gt;

&lt;p class=&#34;graf-after--h3&#34;&gt;
  Curry é a ação de pegar uma função que receba múltiplos argumentos e transforma-la em uma cadeia de funções, em que cada uma receba somente um parâmetro.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const curry = (fn, ...args) =&amp;gt; {
    if (args.length === fn.length) {
        return fn(...args)
    }
    return curry.bind(this, fn, ...args)
}&lt;/pre&gt;

&lt;p&gt;Vamos agora ver o teste dessa função:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;describe(&#39;curry&#39;, () =&amp;gt; {
  it(&#39;returns the curried function&#39;, () =&amp;gt; {
      const add = (a, b) =&amp;gt; a + b

      expect(FunctionUtils.curry(add, 1, 2)).toBe(3)
      expect(FunctionUtils.curry(add)(1)(2)).toBe(3)
      expect(FunctionUtils.curry(add)(1, 2)).toBe(3)
      expect(FunctionUtils.curry(add, 1)(2)).toBe(3)
  })
})

&lt;/pre&gt;

&lt;p&gt;Para começarmos a desmitificar a mágica, temos duas perguntas a serem feitas:&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li&gt;
    Como a nossa função curry irá armazenar os parâmetros já passados?
  &lt;/li&gt;
  &lt;li&gt;
    O que o Function.prototype.bind() tem a ver com isso?
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;function-prototype-bind&#34;&gt;Function.prototype.bind()&lt;/h4&gt;

&lt;p&gt;Comumente usamos .bind() para passarmos para uma função um contexto para sua execução, porém nos esquecemos de algo importante, como dito na documentação do &lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&#34; rel=&#34;nofollow&#34;&gt;developer.mozilla.org&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Partial Functions&lt;/p&gt;

&lt;p&gt;The next simplest use of bind() is to make a function with pre-specified initial arguments. These arguments (if any) follow the provided this value and are then inserted at the start of the arguments passed to the target function…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&#34;graf-after--blockquote&#34;&gt;
  Resumindo:
&lt;/p&gt;&lt;p Um dos usos de bind() é construir uma função 

&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;com argumentos iniciais pré-especificados&lt;/strong&gt;. Esses argumentos, serão passados após o valor de &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;This&lt;/em&gt;&lt;/strong&gt; e &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;serão inseridos no inicio dos argumentos passados para a função de destino&lt;/strong&gt;…&lt;/p&gt; &lt;p Difícil de entender? Então vamos a mais um exemplo (em ES5 para que você possa abrir o &lt;em class=&#34;markup--em markup--p-em&#34;&gt;devtools &lt;/em&gt;e já testar).&lt;/p&gt; 

&lt;pre class=&#34;lang-javascript&#34;&gt;&#34;use strict&#34;;

function myNumbers(x, y, z){
  console.log(x);
  console.log(y);
  console.log(z);
}

var foo = myNumbers.bind(this, 1);
foo(); 
// 1
// undefined
// undefined

var bar = foo.bind(this, 2);
bar();
// 1
// 2
// undefined

var baz = bar.bind(this, 3);
baz();
//1
//2
//3
&lt;/pre&gt;

&lt;p&gt;Reparem que a função &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;myNumbers &lt;/strong&gt;espera três parâmetros, a cada vez que chamamos &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;.bind(this, val)&lt;/strong&gt;, a função retornada pelo método .bind() &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;automagicamente &lt;/strong&gt;guarda o argumento passado.&amp;lt;p E com isso chegamos à implementação do curry no pareto.js, que irá chamar curry.bind(this, fn, &amp;hellip;args), empilhando os parâmetros no&lt;/p&gt;

&lt;p&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;spread operator &amp;#8230;args &lt;/em&gt;até que a quantidade de argumentos seja a mesma que a função espera &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;(args.length === fn.length)&lt;/strong&gt;. Caso não tenha entendido o que é &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;…args&lt;/em&gt;&lt;/strong&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;,&lt;/em&gt; dê uma lida em &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&#34; rel=&#34;nofollow&#34;&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;spread operator&lt;/em&gt;&lt;/a&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;

&lt;h3 id=&#34;compose-graf-h3-graf-after-p&#34;&gt;Compose {.graf&amp;ndash;h3.graf-after&amp;ndash;p}&lt;/h3&gt;

&lt;p class=&#34;graf-after--h3&#34;&gt;
  Como o próprio nome sugere, &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;Compose &lt;/em&gt;&lt;/strong&gt;é construir funções mais complexas através de funções mais simples, compondo-as. Vamos à implementação no Pareto.js:
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const compose = (...fns) =&amp;gt; fns.reduce((f, g) =&amp;gt; (...args) =&amp;gt; f(g(...args)))

&lt;/pre&gt;

&lt;p&gt;Vamos ao teste dessa função:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;describe(&#39;compose&#39;, () =&amp;gt; {
    it(&#39;composes functions&#39;, () =&amp;gt; {
        const toUpperCase = x =&amp;gt; x.toUpperCase()
        const exclaim = x =&amp;gt; `${x}!`
        const moreExclaim = x =&amp;gt; `${x}!!`

        expect(FunctionUtils.compose(toUpperCase, exclaim)(&#39;test&#39;)).toBe(&#39;TEST!&#39;)
        expect(FunctionUtils.compose(toUpperCase, exclaim, moreExclaim)(&#39;test&#39;)).toBe(&#39;TEST!!!&#39;)
    })
})

&lt;/pre&gt;

&lt;p&gt;E assim temos uma pergunta:&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li&gt;
    O que Array.prototype.reduce() está fazendo aí no meio ?
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;array-prototype-reduce&#34;&gt;Array.prototype.reduce()&lt;/h4&gt;

&lt;p&gt;Em geral pensamos no .reduce() como um acumulador, porém somente no sentido de soma de valores e não de &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;composição&lt;/strong&gt;. Sabemos que o .reduce() aplica uma função de callback sobre um &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;acumulador&lt;/strong&gt;, varrendo &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;todos os elementos do array&lt;/strong&gt;. Vamos começar a desconstrução do nosso compose:&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li&gt;
    Sabemos que ele recebe um array de funções como argumentos, através do spread operator …args;
  &lt;/li&gt;
  &lt;li&gt;
    A função de &lt;em class=&#34;markup--em markup--li-em&#34;&gt;callback &lt;/em&gt;do .reduce(), que será executada sobre cada item do nosso array, pode receber até 4 parâmetros, sendo eles: &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;previousValue, currentValue, index, array&lt;/em&gt;&lt;/strong&gt;. Porém aqui só iremos utilizar os dois primeiros (&lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;previousValue&lt;/em&gt;&lt;/strong&gt; e &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;currentValue&lt;/em&gt;&lt;/strong&gt;). Lembrando que na primeira chamada à nossa função de callback, &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;previousValue&lt;/em&gt; será o valor do primeiro elemento do array e &lt;em class=&#34;markup--em markup--li-em&#34;&gt;currentValue&lt;/em&gt; será o valor do elemento seguinte;&lt;/strong&gt;
  &lt;/li&gt;
  &lt;li&gt;
    A nossa função de &lt;em class=&#34;markup--em markup--li-em&#34;&gt;callback&lt;/em&gt; irá compor a função passada em &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;previousValue&lt;/em&gt;&lt;/strong&gt; com a que está em &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;currentValue&lt;/em&gt;&lt;/strong&gt;, adicionando na declaração da função que ela poderá receber &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;N&lt;/strong&gt; argumentos (…args). Resultando em &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;previousValue(currentValue(…args))&lt;/em&gt;.&lt;/strong&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De acordo com o nosso testes, vamos observar os passos de execução em uma tabela:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-53670&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/04/compose-print.png&#34; alt=&#34;compose-print&#34; width=&#34;737&#34; height=&#34;83&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E com isso temos o resultado da função mais interna (&lt;em class=&#34;markup--em markup--p-em&#34;&gt;moreExclaim&lt;/em&gt;) alimentando as funções mais externas (&lt;em class=&#34;markup--em markup--p-em&#34;&gt;exclaim&lt;/em&gt; e depois &lt;em class=&#34;markup--em markup--p-em&#34;&gt;toUpperCase&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&amp;lt;&lt;/p&gt;

&lt;p&gt;p E é isso pessoal. Espero que tenha ajudado à vocês a entenderem a relação de curry e compose com .bind() e .reduce(). Feedbacks são mais do que bem-vindos e incentivados. Até a proxima.&lt;/p&gt;

&lt;p&gt;Fontes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&#34;&gt;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[&lt;a href=&#34;https://medium.com/@matheusml/entendendo-programa%C3%A7%C3%A3o-funcional-em-javascript-de-uma-vez-c676489be08b#&#34;&gt;https://medium.com/@matheusml/entendendo-programa%C3%A7%C3%A3o-funcional-em-javascript-de-uma-vez-c676489be08b#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/concretesolutions/pareto.js][2&#34;&gt;https://github.com/concretesolutions/pareto.js][2&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ReactJS 101</title>
      <link>https://tableless.github.io/hugo-public/reactjs-101/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/reactjs-101/</guid>
      <description>

&lt;h4 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h4&gt;

&lt;p&gt;ReactJS é a biblioteca criada pelo Facebook para criação de interfaces. Pensando no mundo &lt;strong&gt;MV&lt;/strong&gt;* qual vivenciamos hoje, este seria o &lt;strong&gt;V&lt;/strong&gt; (view).&lt;/p&gt;

&lt;p&gt;Através de uma api simples qual previlegia o uso do javascript e com uma performance acima da apresentada pelos seus concorrentes, o ReactJS vem ganhando cada dia mais adeptos.&lt;/p&gt;

&lt;h4 id=&#34;building-blocks&#34;&gt;Building Blocks&lt;/h4&gt;

&lt;p&gt;Fortemente inspirado pelo conceito de componentes, trazendo duas grandes características que o desenvolvedor deve se concentrar: &lt;em&gt;Components&lt;/em&gt; e&lt;em&gt;Elements&lt;/em&gt;.&lt;/p&gt;

&lt;h5 id=&#34;components&#34;&gt;Components&lt;/h5&gt;

&lt;p&gt;É o template para criação de elementos. Fazendo um paralelo com a web atual, exemplos de components são &lt;em&gt;div&lt;/em&gt;, &lt;em&gt;button&lt;/em&gt;, &lt;em&gt;label&lt;/em&gt; entre outros.&lt;/p&gt;

&lt;h5 id=&#34;elements&#34;&gt;Elements&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;Element&lt;/em&gt; é a instância de um &lt;em&gt;component&lt;/em&gt;. Por exemplo quando inserimos um &lt;em&gt;button&lt;/em&gt; em uma página HTML, este elemento é a materialização/instância de um componente no DOM.&lt;/p&gt;

&lt;p&gt;Complicado?&lt;/p&gt;

&lt;p&gt;Vamos ver como funciona na prática:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;//cria elemento
var customDiv = React.createElement(&#39;div&#39;);

//renderiza elemento
ReactDOM.render(customDiv, document.getElementById(&#39;container&#39;));
&lt;/pre&gt;

&lt;p&gt;O código acima cria um &lt;em&gt;element&lt;/em&gt; baseado no &lt;em&gt;component&lt;/em&gt; &lt;code&gt;div&lt;/code&gt; e renderiza o mesmo no DOM.&lt;/p&gt;

&lt;p&gt;Legal! Mas usar diretamente o HTML não é mais eficiente?&lt;/p&gt;

&lt;p&gt;A resposta: normalmente não.&lt;/p&gt;

&lt;p&gt;E eis que lhes apresento o &lt;em&gt;Virtual DOM&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;virtual-dom&#34;&gt;Virtual DOM&lt;/h4&gt;

&lt;p&gt;Como todos sabem a manipulação de DOM além de não ser uma das coisas mais simples no mundo web, ainda tem um grande impacto na performance de nossas aplicações.&lt;/p&gt;

&lt;p&gt;E com isso em mente os engenheiros do facebook/instagram criaram o &lt;em&gt;virtual DOM&lt;/em&gt; que na prática é a representação do DOM em memória. Deste modo, todos os &lt;em&gt;elements&lt;/em&gt; que criamos utilizando React.createElement são criados e mantidos nesse ambiente virtual antes de serem renderizados no DOM original.&lt;/p&gt;

&lt;p&gt;A mágica acontece de verdade nas atualizações. Imagine o seguinte cenário: numa tela HTML temos um campo de texto do tipo numeric e um botão de adicionar. Toda vez que clicamos no botão adiciona em 1 o valor do campo de texto.&lt;/p&gt;

&lt;p&gt;Uma atividade super simples como adicionar um handler para o evento de click do botão e dentro do handler pegar o campo de texto através da api de DOM e somar 1 ao value do mesmo. Tudo lindo, mas tem alguns problemas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;adicionar e manter event handlers nos &lt;em&gt;elements&lt;/em&gt; do DOM consomem bastante memória.&lt;/li&gt;
&lt;li&gt;modificar o conteúdo da página gera reflow (nova renderização do _element_modificado e seus filhos).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Agora imagine tudo isso acontecendo em uma página com centenas ou talvez milhares de &lt;em&gt;elements&lt;/em&gt; no DOM. Não é uma experiência muito boa.&lt;/p&gt;

&lt;p&gt;Com o &lt;em&gt;virtual DOM&lt;/em&gt; esses problemas são minimizados com a técnica conhecida como &amp;#8220;o menos é mais&amp;#8221;, ou seja, toda vez que algo é alterado nos &lt;em&gt;elements&lt;/em&gt; que foram criados através do método React.createElement. O ReactJS renderiza esse conteúdo no &lt;em&gt;virtual DOM&lt;/em&gt; e através de um algoritmo super otimizado calcula a diferença entre o DOM atual e o DOM com as alterações e são essas diferenças que são renderizadas no DOM original. E desta forma causa o mínimo de impacto possível fazendo com que nossas páginas estejam sempre responsivas e rápidas para o usuário.&lt;/p&gt;

&lt;h4 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h4&gt;

&lt;p&gt;ReactJS é uma nova opção para criação de interfaces focada na simplidade de desenvolvimento e alta performance. Com baixo consumo de memória e um gerenciamento eficiente do DOM esta biblioteca vem ganhando o mundo.&lt;/p&gt;

&lt;p&gt;Por hoje é isso!&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado dessa introdução e até a próxima!&lt;/p&gt;

&lt;h5 id=&#34;links-de-referência&#34;&gt;Links de referência:&lt;/h5&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&#34; target=&#34;_blank&#34;&gt;DOM (Document Object Model)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://developers.google.com/speed/articles/reflow&#34; target=&#34;_blank&#34;&gt;Reflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://facebook.github.io/react/docs/getting-started.html&#34; target=&#34;_blank&#34;&gt;ReactJS&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com o Docker: Criando suas próprias imagens</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-o-docker-criando-suas-proprias-imagens/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-o-docker-criando-suas-proprias-imagens/</guid>
      <description>

&lt;p&gt;No artigo &lt;a href=&#34;http://tableless.com.br/iniciando-com-o-docker-dicas-praticas-para-comecar-usar-agora-mesmo/&#34; target=&#34;_blank&#34;&gt;anterior&lt;/a&gt;, eu descrevi alguns comandos básicos e como iniciar com o pé direito no mundo do &lt;strong&gt;Docker&lt;/strong&gt;, trazendo de forma direta alguns conceitos que com o passar do tempo se tornaram fundamentais no meu fluxo de desenvolvimento.&lt;/p&gt;

&lt;p&gt;Hoje eu quero partir um pouco mais para o lado prático da coisa, vamos construir uma imagem para encapsular uma pequena aplicação em &lt;strong&gt;GO&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;primeiros-passos&#34;&gt;Primeiros passos&lt;/h2&gt;

&lt;p&gt;O arquivo de manifesto do Docker é o Dockerfile, nele você coloca as instruções de como você quer que sua imagem seja construída. Você pode na construção da imagem setar outro arquivo com o parâmetro -f.&lt;/p&gt;

&lt;p&gt;Abaixo temos um exemplo de Dockerfile, esse é um exemplo de um app em go já compilado para ubuntu então eu só preciso copiar o arquivo executável elasticpush para dentro do docker:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;FROM debian:jessie
RUN mkdir /app
ENV ACCESS_TOKEN abc
ENV SECRET_TOKEN xyz
COPY ./bin/elasticpush /app/elasticpush
ENTRYPOINT [“/app/elasticpush”]
&lt;/pre&gt;

&lt;p&gt;Detalhando os comandos utilizados:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt;: Este é o comando mais importante, pois ele especifica a imagem base para a construção de uma nova. Na maioria das vezes a imagem especificada vai ser uma distribuição linux, se essa imagem não for encontrada na máquina local, o docker tentará buscar em algum repository. Caso queira, por exemplo, fazer a build do seu app em GO dentro do container, você vai precisar de uma imagem que tenha o GO instalado e configurado. Outra forma também seria criar diversas instruções com o comando &lt;em&gt;RUN&lt;/em&gt; para fazer essa instalação.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RUN&lt;/strong&gt;: Esse comando serve para executar outros comandos que a versão do sistema operacional permite. Por exemplo, se for debian vc pode instalar pacotes com apt-get, se for CentOS você pode utilizar o yum para pegar as dependências que seu serviço precisa para rodar. Com o RUN você também pode criar arquivos, pastas, enfim acho que deu pra entender que ele executa os mesmo comando do que você executaria na sua máquina, logo você consegue fazer praticamente tudo, e deixar a sequência de comandos versionada aqui dentro.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ENV&lt;/strong&gt;: Serve para você setar variáveis de ambiente, você pode tanto deixar essas variáveis setadas de forma fixa dentro do Dockerfile quanto passá-las dinamicamente na hora que você instanciar o container. Para passar essas variáveis de ambiente na instanciação do container basta usar o parâmetro -e.&lt;/p&gt;

&lt;p&gt;Exemplo: _docker run -e ACCESS&lt;em&gt;TOKEN=abcd [nome da imagem]&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;COPY&lt;/strong&gt;: O COPY serve para você poder copiar arquivos e pastas para dentro da imagem do Docker, nesse exemplo eu copiei o arquivo elasticpush que estava dentro da pasta bin na minha máquina local para dentro da pasta /app na imagem do docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ENTRYPOINT&lt;/strong&gt;: Com esse parâmetro você pode setar se quer que algo seja executado na hora da instanciação do container. Então, quando você der um &lt;em&gt;docker run&lt;/em&gt; nessa imagem, ela já vai instanciar e executar o programa que está no caminho que você colocar entre colchetes. No nosso caso queremos que essa imagem execute nossa aplicação do Elasticpush, o mesmo vale para quaisquer outros serviços como Redis, Elasticsearch, Nodejs, etc&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;build-8211-construíndo-a-imagem&#34;&gt;Build &amp;#8211; Construíndo a imagem&lt;/h2&gt;

&lt;p&gt;A essa altura provavelmente você já tem o Docker instalado na sua máquina, caso contrário ensinamos a fazer isso nesse &lt;a href=&#34;http://elasticpush.com/blog/iniciando-com-o-docker-dicas-praticas-para-comecar-a-usar-agora-mesmo/&#34; target=&#34;_blank&#34;&gt;artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para construir a imagem você precisa executar o seguinte comando, na mesma pasta que está o &lt;strong&gt;Dockerfile&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;em&gt;sudo docker build -t app/elasticpush .&lt;/em&gt;&lt;/pre&gt;

&lt;p&gt;Eu escolhi que o nome da minha imagem fosse app/elasticpush, mas isso fica a seu critério, escolha o nome que melhor se adéque ao seu serviço.&lt;/p&gt;

&lt;p&gt;Executado o comando, se tudo correr bem terá uma saída semelhante a essa:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Sending build context to Docker daemon 45.03 MB
 Sending build context to Docker daemon
 Step 0 : FROM debian:jessie
 — &amp;gt; a582cd499e0f
 Step 1 : RUN mkdir /app
 — &amp;gt; Using cache
 — &amp;gt; 3763257cc26e
 Step 2 : COPY ./bin/elasticpush /app/elasticpush
 — &amp;gt; cc4b56f3fd8e
 Removing intermediate container 0bb2091ca437
 Step 3 : ENTRYPOINT /app/elasticpush
 —&amp;gt; Running in ad99734cd065
 — &amp;gt; 3ffec68d5499
 Removing intermediate container ad99734cd065
 Successfully built 3ffec68d5499
 &lt;/pre&gt;

&lt;p&gt;Agora você já tem uma imagem construída. Execute o seguinte comando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo docker images&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A imagem com a tag que você escolheu vai estar listada. A partir dessa imagem você pode iniciar o container com o seguinte comando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo docker run -d [nome da imagem]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Observe que utilizei o parâmetro -d que serve para jogar em segundo plano a inicialização do container, o que é opcional. Após isso será entregue um token que identifica o container, tipo esse:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;19895b08f19d7a4436afa1cb8af8f815939000d5468c7db10c4498317fd81cc3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para navegar dentro do container utilize o seguinte comando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo docker exec -it 19895b08f19d7a4436afa1cb8af8f815939000d5468c7db10c4498317fd81cc3 bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Com isso você estará dentro do container para caso precise fazer alguma coisa específica. Para sair é só digitar &lt;strong&gt;exit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Bom pessoal, por enquanto é isso, uma dica que dou é tentar criar imagens mais complexas do que a que eu exemplifiquei, caso tenham alguma dúvida é só deixar um comentário.&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testes de Invasão e Análise de Vulnerabilidades</title>
      <link>https://tableless.github.io/hugo-public/testes-de-invasao-e-analise-de-vulnerabilidades/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/testes-de-invasao-e-analise-de-vulnerabilidades/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-um-teste-de-invasão&#34;&gt;O que é um Teste de Invasão&lt;/h2&gt;

&lt;p&gt;Teste de invasão ou &lt;em&gt;pentest&lt;/em&gt; são métodos que avaliam a segurança de um sistema de computador ou de uma rede, simulando ataques de uma fonte maliciosa. O processo envolve uma análise nas atividades do sistema, que envolvem a busca de alguma vulnerabilidade em potencial que possa ser resultado de uma má configuração do sistema, falhas em hardwares/softwares desconhecidas, deficiência no sistema operacional ou técnicas contramedidas. Todas as análises submetidas pelos testes escolhidos são apresentadas no sistema, junto com uma avaliação do seu impacto e muitas vezes com uma proposta de resolução ou de uma solução técnica.&lt;/p&gt;

&lt;h3 id=&#34;testes-de-invasão-x-análise-de-vulnerabilidades&#34;&gt;Testes de Invasão x Análise de Vulnerabilidades&lt;/h3&gt;

&lt;p&gt;Diferente de uma avaliação de vulnerabilidades, ao realizar um teste de invasão, os &lt;em&gt;pentesters&lt;/em&gt; não só identificam as vulnerabilidades que poderiam ser utilizadas pelos invasores, mas também exploram essas vulnerabilidades, sempre que possível, para avaliar os danos que os invasores poderiam causar após uma exploração bem-sucedida das falhas.&lt;/p&gt;

&lt;h3 id=&#34;como-se-realiza-um-pentest&#34;&gt;Como se realiza um Pentest?&lt;/h3&gt;

&lt;p&gt;Um &lt;em&gt;pentest&lt;/em&gt; é realizado seguindo algumas etapas explicadas abaixo. Porém, antes de iniciar um &lt;em&gt;pentest&lt;/em&gt;, é necessário que o cliente esteja a par de todo o processo para que não haja nenhuma falha de comunicação entre as partes. É necessário conhecer os objetivos do negócio do cliente no que diz respeito ao teste de invasão: se esse é o primeiro teste de invasão, o que o levou a procurar esse serviço? Quais as exposições que ele mais teme? Existe algum dispositivo frágil com o qual deveremos ter cuidado ao efetuar os testes?&lt;/p&gt;

&lt;h4 id=&#34;1-preparação&#34;&gt;1. Preparação&lt;/h4&gt;

&lt;p&gt;Nessa fase é necessário decidir o escopo do teste de invasão: quais endereços de IP serão incluídos nos testes e quais não serão, quais tipos de ações o cliente permitirá que sejam realizados durante o teste, permissões para desativar potencialmente determinado serviço, limitar a avaliação a simplesmente uma análise de vulnerabilidades, etc. O cliente pode solicitar que os testes sejam realizados somente em determinados dias e durante horários específicos.&lt;/p&gt;

&lt;h4 id=&#34;2-coleta-de-informações&#34;&gt;2. Coleta de Informações&lt;/h4&gt;

&lt;p&gt;Nesta fase será analisada livremente as fontes de informações disponíveis, um processo conhecido como coleta de OSINT (&lt;em&gt;Open Source Intelligence&lt;/em&gt;, ou inteligência de fonte aberta). Essa pesquisa é realizada através de motores de busca, como o Google, Bing e Yahoo, redes sociais e demais fontes de informações públicas como registro de domínio.&lt;/p&gt;

&lt;h4 id=&#34;3-mapeamento-de-rede&#34;&gt;3. Mapeamento de Rede&lt;/h4&gt;

&lt;p&gt;O DNS (&lt;em&gt;Domain Name System&lt;/em&gt;, ou sistema de nomes de domínio) é um sistema de gerenciamento de nomes hierárquico e distribuído para computadores, serviços ou qualquer recurso conectado à Internet ou em uma rede privada. Através do DNS é possível descobrir a topologia da rede, endereços de IP e a quantidade de computadores na rede interna.&lt;/p&gt;

&lt;h4 id=&#34;4-enumeração-de-serviços&#34;&gt;4. Enumeração de Serviços&lt;/h4&gt;

&lt;p&gt;Utilizando ferramentas específicas, uma varredura de portas abertas é realizada nas máquinas descobertas e nos IP&amp;#8217;s informados com o fim de descobrir quais sistemas estão presentes na Internet ou na rede interna, bem como quais softwares estão sendo executados.&lt;/p&gt;

&lt;h4 id=&#34;5-análise-de-vulnerabilidades&#34;&gt;5. Análise de Vulnerabilidades&lt;/h4&gt;

&lt;p&gt;Tendo conhecimento das portas, softwares instalados e sistemas ativos, é iniciado o processo de análise de vulnerabilidades utilizando &lt;em&gt;scanners&lt;/em&gt; e banco de dados de vulnerabilidades no auxílio em detectar falhas nos ativos do cliente que possam a vir, através da execução de &lt;em&gt;exploits&lt;/em&gt; (códigos específicos para exploração de falhas), permitir o acesso à rede e computadores.&lt;/p&gt;

&lt;h4 id=&#34;6-exploração-de-falhas&#34;&gt;6. Exploração de Falhas&lt;/h4&gt;

&lt;p&gt;Esta é a fase onde executamos os &lt;em&gt;exploits&lt;/em&gt; nas vulnerabilidades detectadas na fase anterior, como por exemplo: acessar remotamente uma máquina sem a necessidade de autenticação através de login e senha ou por meio de tentativas de autenticação com senhas padrão em determinados sistemas.&lt;/p&gt;

&lt;h4 id=&#34;7-pós-exploração-de-falhas&#34;&gt;7. Pós-Exploração de Falhas&lt;/h4&gt;

&lt;p&gt;Nesta fase são reunidas informações sobre o sistema invadido, busca por arquivos relevantes ao teste de invasão, a criação de &lt;em&gt;backdoors&lt;/em&gt; para posteriores acessos ao sistema, ampliar a exploração da rede ganhando assim acesso à demais máquinas/sistemas que não estavam visíveis na tentativa inicial de escaneamento da rede.&lt;/p&gt;

&lt;h4 id=&#34;8-relatório&#34;&gt;8. Relatório&lt;/h4&gt;

&lt;p&gt;Ao final de todas as etapas de um &lt;em&gt;pentest&lt;/em&gt; é gerado um relatório contendo todo o descritivo do teste realizado de forma clara, transparente e objetiva. Neste relatório será apontado o que o cliente está fazendo corretamente, quais pontos ele deverá melhorar sua postura quanto à segurança da informação, como foi possível realizar a invasão, quais os resultados das descobertas durante a invasão, como corrigir esses problemas, etc.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>