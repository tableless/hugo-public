<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programação Funcional on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/programa%C3%A7%C3%A3o-funcional/index.xml</link>
    <description>Recent content in Programação Funcional on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/programa%C3%A7%C3%A3o-funcional/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Programação funcional em Javascript. Implementando Curry e Compose, com bind e reduce.</title>
      <link>https://tableless.github.io/hugo-public/programacao-funcional-em-javascript-implementando-curry-e-compose-com-bind-e-reduce/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/programacao-funcional-em-javascript-implementando-curry-e-compose-com-bind-e-reduce/</guid>
      <description>

&lt;p&gt;Nos últimos tempos só se fala em programação funcional, seus benefícios, funções puras, dados imutáveis, composição de funções, etc.&lt;/p&gt;

&lt;p&gt;Atualmente temos diversas libs que auxiliam o javascript na missão de ser funcional, Lodash, Underscore e Ramda são uma delas. Então porque estarei falando do &lt;a href=&#34;https://github.com/concretesolutions/pareto.js&#34;&gt;Pareto.js&lt;/a&gt;? Simples como o Princípio de Pareto, a lib criada tem o objetivo de ser leve e resolver 80% dos seus problemas com 20% de código.&lt;/p&gt;

&lt;p&gt;Geralmente procuro aprender algo desmitificando a “mágica” por tras da implementação. Foi assim quando comecei a aprender Angular, e agora o mesmo está sendo aplicado à programação funcional. Por isso nesse post vamos avaliar as implementações de Curry e Compose do Pareto.js.&lt;/p&gt;

&lt;h3 id=&#34;curry-graf-h3-graf-after-p&#34;&gt;Curry {.graf&amp;ndash;h3.graf-after&amp;ndash;p}&lt;/h3&gt;

&lt;p class=&#34;graf-after--h3&#34;&gt;
  Curry é a ação de pegar uma função que receba múltiplos argumentos e transforma-la em uma cadeia de funções, em que cada uma receba somente um parâmetro.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const curry = (fn, ...args) =&amp;gt; {
    if (args.length === fn.length) {
        return fn(...args)
    }
    return curry.bind(this, fn, ...args)
}&lt;/pre&gt;

&lt;p&gt;Vamos agora ver o teste dessa função:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;describe(&#39;curry&#39;, () =&amp;gt; {
  it(&#39;returns the curried function&#39;, () =&amp;gt; {
      const add = (a, b) =&amp;gt; a + b

      expect(FunctionUtils.curry(add, 1, 2)).toBe(3)
      expect(FunctionUtils.curry(add)(1)(2)).toBe(3)
      expect(FunctionUtils.curry(add)(1, 2)).toBe(3)
      expect(FunctionUtils.curry(add, 1)(2)).toBe(3)
  })
})

&lt;/pre&gt;

&lt;p&gt;Para começarmos a desmitificar a mágica, temos duas perguntas a serem feitas:&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li&gt;
    Como a nossa função curry irá armazenar os parâmetros já passados?
  &lt;/li&gt;
  &lt;li&gt;
    O que o Function.prototype.bind() tem a ver com isso?
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;function-prototype-bind&#34;&gt;Function.prototype.bind()&lt;/h4&gt;

&lt;p&gt;Comumente usamos .bind() para passarmos para uma função um contexto para sua execução, porém nos esquecemos de algo importante, como dito na documentação do &lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&#34; rel=&#34;nofollow&#34;&gt;developer.mozilla.org&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Partial Functions&lt;/p&gt;

&lt;p&gt;The next simplest use of bind() is to make a function with pre-specified initial arguments. These arguments (if any) follow the provided this value and are then inserted at the start of the arguments passed to the target function…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&#34;graf-after--blockquote&#34;&gt;
  Resumindo:
&lt;/p&gt;&lt;p Um dos usos de bind() é construir uma função 

&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;com argumentos iniciais pré-especificados&lt;/strong&gt;. Esses argumentos, serão passados após o valor de &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;This&lt;/em&gt;&lt;/strong&gt; e &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;serão inseridos no inicio dos argumentos passados para a função de destino&lt;/strong&gt;…&lt;/p&gt; &lt;p Difícil de entender? Então vamos a mais um exemplo (em ES5 para que você possa abrir o &lt;em class=&#34;markup--em markup--p-em&#34;&gt;devtools &lt;/em&gt;e já testar).&lt;/p&gt; 

&lt;pre class=&#34;lang-javascript&#34;&gt;&#34;use strict&#34;;

function myNumbers(x, y, z){
  console.log(x);
  console.log(y);
  console.log(z);
}

var foo = myNumbers.bind(this, 1);
foo(); 
// 1
// undefined
// undefined

var bar = foo.bind(this, 2);
bar();
// 1
// 2
// undefined

var baz = bar.bind(this, 3);
baz();
//1
//2
//3
&lt;/pre&gt;

&lt;p&gt;Reparem que a função &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;myNumbers &lt;/strong&gt;espera três parâmetros, a cada vez que chamamos &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;.bind(this, val)&lt;/strong&gt;, a função retornada pelo método .bind() &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;automagicamente &lt;/strong&gt;guarda o argumento passado.&amp;lt;p E com isso chegamos à implementação do curry no pareto.js, que irá chamar curry.bind(this, fn, &amp;hellip;args), empilhando os parâmetros no&lt;/p&gt;

&lt;p&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;spread operator &amp;#8230;args &lt;/em&gt;até que a quantidade de argumentos seja a mesma que a função espera &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;(args.length === fn.length)&lt;/strong&gt;. Caso não tenha entendido o que é &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;…args&lt;/em&gt;&lt;/strong&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;,&lt;/em&gt; dê uma lida em &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&#34; rel=&#34;nofollow&#34;&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;spread operator&lt;/em&gt;&lt;/a&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;

&lt;h3 id=&#34;compose-graf-h3-graf-after-p&#34;&gt;Compose {.graf&amp;ndash;h3.graf-after&amp;ndash;p}&lt;/h3&gt;

&lt;p class=&#34;graf-after--h3&#34;&gt;
  Como o próprio nome sugere, &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;&lt;em class=&#34;markup--em markup--p-em&#34;&gt;Compose &lt;/em&gt;&lt;/strong&gt;é construir funções mais complexas através de funções mais simples, compondo-as. Vamos à implementação no Pareto.js:
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const compose = (...fns) =&amp;gt; fns.reduce((f, g) =&amp;gt; (...args) =&amp;gt; f(g(...args)))

&lt;/pre&gt;

&lt;p&gt;Vamos ao teste dessa função:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;describe(&#39;compose&#39;, () =&amp;gt; {
    it(&#39;composes functions&#39;, () =&amp;gt; {
        const toUpperCase = x =&amp;gt; x.toUpperCase()
        const exclaim = x =&amp;gt; `${x}!`
        const moreExclaim = x =&amp;gt; `${x}!!`

        expect(FunctionUtils.compose(toUpperCase, exclaim)(&#39;test&#39;)).toBe(&#39;TEST!&#39;)
        expect(FunctionUtils.compose(toUpperCase, exclaim, moreExclaim)(&#39;test&#39;)).toBe(&#39;TEST!!!&#39;)
    })
})

&lt;/pre&gt;

&lt;p&gt;E assim temos uma pergunta:&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li&gt;
    O que Array.prototype.reduce() está fazendo aí no meio ?
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;array-prototype-reduce&#34;&gt;Array.prototype.reduce()&lt;/h4&gt;

&lt;p&gt;Em geral pensamos no .reduce() como um acumulador, porém somente no sentido de soma de valores e não de &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;composição&lt;/strong&gt;. Sabemos que o .reduce() aplica uma função de callback sobre um &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;acumulador&lt;/strong&gt;, varrendo &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;todos os elementos do array&lt;/strong&gt;. Vamos começar a desconstrução do nosso compose:&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li&gt;
    Sabemos que ele recebe um array de funções como argumentos, através do spread operator …args;
  &lt;/li&gt;
  &lt;li&gt;
    A função de &lt;em class=&#34;markup--em markup--li-em&#34;&gt;callback &lt;/em&gt;do .reduce(), que será executada sobre cada item do nosso array, pode receber até 4 parâmetros, sendo eles: &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;previousValue, currentValue, index, array&lt;/em&gt;&lt;/strong&gt;. Porém aqui só iremos utilizar os dois primeiros (&lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;previousValue&lt;/em&gt;&lt;/strong&gt; e &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;currentValue&lt;/em&gt;&lt;/strong&gt;). Lembrando que na primeira chamada à nossa função de callback, &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;previousValue&lt;/em&gt; será o valor do primeiro elemento do array e &lt;em class=&#34;markup--em markup--li-em&#34;&gt;currentValue&lt;/em&gt; será o valor do elemento seguinte;&lt;/strong&gt;
  &lt;/li&gt;
  &lt;li&gt;
    A nossa função de &lt;em class=&#34;markup--em markup--li-em&#34;&gt;callback&lt;/em&gt; irá compor a função passada em &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;previousValue&lt;/em&gt;&lt;/strong&gt; com a que está em &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;currentValue&lt;/em&gt;&lt;/strong&gt;, adicionando na declaração da função que ela poderá receber &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;N&lt;/strong&gt; argumentos (…args). Resultando em &lt;strong class=&#34;markup--strong markup--li-strong&#34;&gt;&lt;em class=&#34;markup--em markup--li-em&#34;&gt;previousValue(currentValue(…args))&lt;/em&gt;.&lt;/strong&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De acordo com o nosso testes, vamos observar os passos de execução em uma tabela:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-53670&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/04/compose-print.png&#34; alt=&#34;compose-print&#34; width=&#34;737&#34; height=&#34;83&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E com isso temos o resultado da função mais interna (&lt;em class=&#34;markup--em markup--p-em&#34;&gt;moreExclaim&lt;/em&gt;) alimentando as funções mais externas (&lt;em class=&#34;markup--em markup--p-em&#34;&gt;exclaim&lt;/em&gt; e depois &lt;em class=&#34;markup--em markup--p-em&#34;&gt;toUpperCase&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&amp;lt;&lt;/p&gt;

&lt;p&gt;p E é isso pessoal. Espero que tenha ajudado à vocês a entenderem a relação de curry e compose com .bind() e .reduce(). Feedbacks são mais do que bem-vindos e incentivados. Até a proxima.&lt;/p&gt;

&lt;p&gt;Fontes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&#34;&gt;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[&lt;a href=&#34;https://medium.com/@matheusml/entendendo-programa%C3%A7%C3%A3o-funcional-em-javascript-de-uma-vez-c676489be08b#&#34;&gt;https://medium.com/@matheusml/entendendo-programa%C3%A7%C3%A3o-funcional-em-javascript-de-uma-vez-c676489be08b#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/concretesolutions/pareto.js][2&#34;&gt;https://github.com/concretesolutions/pareto.js][2&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Introdução à Programação Funcional (Functional Programming) em Javascript</title>
      <link>https://tableless.github.io/hugo-public/introducao-programacao-funcional-functional-programming-em-javascript/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-programacao-funcional-functional-programming-em-javascript/</guid>
      <description>&lt;p&gt;Eu venho estudando functional programming já faz um tempo, e decidi colocar no papel o que aprendi, pois para mim essa é a melhor forma de reter o que se aprendeu. Além disso, será um prazer se esse post ajudar outros programadores.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Em ciência da computação, &lt;strong&gt;programação funcional&lt;/strong&gt; é um paradigma de programação que trata a computação como uma avaliação de funções matemáticas e que evita estados ou dados mutáveis. Ela enfatiza a aplicação de funções, em contraste da programação imperativa, que enfatiza mudanças no estado do programa” &lt;a href=&#34;https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional&#34;&gt;https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A princípio, isso pode parecer algo de outro mundo, mas com calma você também entenderá.&lt;/p&gt;

&lt;p&gt;Basicamente, em programação funcional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dados são imutáveis, ou seja, uma vez atribuídos os valores de uma variável, não devemos nunca alterá-los (parece bizarro, mas fará sentido logo logo)&lt;/li&gt;
&lt;li&gt;As funções devem ser sem estado (stateless), ou seja, elas devem sempre agir e retornar algo como se fosse a primeira vez que elas fossem utilizadas no programa. Para uma função neste paradigma, o que aconteceu antes de ser chamada não lhe interessa e não deve influenciar em nada a sua resposta&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por isso, a principal característica da programação funcional é a ausência de efeitos secundários. Como uma função não altera nenhum dado externo e não depende de nenhum dado externo para fazer o seu trabalho, teoricamente não existe efeitos secundários causados por ela no programa.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Como programar utilizando o paradigma da Programação Funcional&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Abaixo eu coloquei 3 regras básicas para transformar seu código em Programação Funcional (tirado deste ótimo artigo &lt;a href=&#34;http://www.smashingmagazine.com/2014/07/dont-be-scared-of-functional-programming/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2014/07/dont-be-scared-of-functional-programming/&#34;&gt;http://www.smashingmagazine.com/2014/07/dont-be-scared-of-functional-programming/&lt;/a&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A função deve conter pelo menos 1 argumento&lt;/li&gt;
&lt;li&gt;A função deve retornar algum dado ou outra função (isso será visto mais pra frente)&lt;/li&gt;
&lt;li&gt;Sem loops (este ponto é controverso, pois a biblioteca Lodash foi otimizada usando loops internamente nas funções. Gostaria de ouvir comentários e mais informações a respeito)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Utilizaremos uma pequena aplicação, uma página para uma agência de turismo virtual, e  transformaremos tudo o que for possível em seu código seguindo os conceitos de programação funcional.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://farinelliwebdevelopment.com/demo/functional-programming&#34; target=&#34;_blank&#34;&gt;Demo Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(se quiser pegar o código para acompanhar e testar você mesmo, &lt;a href=&#34;https://github.com/maufarinelli/tutorial-functional-programming/tree/functional-part1&#34; target=&#34;_blank&#34;&gt;pegue o código no github&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Começaremos pela parte dos dados:&lt;/p&gt;

&lt;pre class=&#34;lang-javasript&#34;&gt;(function(_) {
    // Data
    var cities = [
        {name: &#39;Nova York&#39;, passagem: 1550.00, hotel: 1800.00, category: &#39;north-america&#39;},
        {name: &#39;Paris&#39;,     passagem: 1720.00, hotel: 2100.00, category: &#39;europe&#39;},
        {name: &#39;Londres&#39;,   passagem: 1630.00, hotel: 2500.00, category: &#39;europe&#39;},
        {name: &#39;Amsterdam&#39;, passagem: 1430.00, hotel: 1750.00, category: &#39;europe&#39;},
        {name: &#39;Santiago&#39;,  passagem: 600.00,  hotel: 1150.00, category: &#39;south-america&#39;},
        {name: &#39;Buenos Aires&#39;, passagem: 520.00, hotel: 950.00, category: &#39;south-america&#39;},
        {name: &#39;Barcelona&#39;, passagem: 1390.00, hotel: 1670.00, category: &#39;europe&#39;},
        {name: &#39;Lisboa&#39;,    passagem: 1280.00, hotel: 1450.00, category: &#39;europe&#39;},
        {name: &#39;Vancouver&#39;, passagem: 1590.00, hotel: 320.00, category: &#39;north-america&#39;},
        {name: &#39;Roma&#39;,      passagem: 1400.00, hotel: 1950.00, category: &#39;europe&#39;},
    ];
    function createPackages() {
        for(var i = 0; i &amp;lt; cities.length; i++) {
            cities[i].pacote = (cities[i].passagem + cities[i].hotel) * 0.8;
        }
}
});
&lt;/pre&gt;

&lt;p&gt;A função &lt;code&gt;createPackages()&lt;/code&gt; não tem nada de programação funcional. Ela depende da variável &lt;em&gt;cities&lt;/em&gt; e ela altera os dados dessa variável, uma vez chamada.&lt;/p&gt;

&lt;p&gt;Vamos transformá-la em uma função pura, como dizem na programação funcional, onde ela não dependerá de uma variável externa e não irá alterar nada exterior a ela.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;(function(_) {
  // Data
  var cities = [
    {name: &#39;Nova York&#39;, passagem: 1550.00, hotel: 1800.00, category: &#39;north-america&#39;},
    {name: &#39;Paris&#39;,     passagem: 1720.00, hotel: 2100.00, category: &#39;europe&#39;},
    {name: &#39;Londres&#39;,   passagem: 1630.00, hotel: 2500.00, category: &#39;europe&#39;},
    {name: &#39;Amsterdam&#39;, passagem: 1430.00, hotel: 1750.00, category: &#39;europe&#39;},
    {name: &#39;Santiago&#39;,  passagem: 600.00,  hotel: 1150.00, category: &#39;south-america&#39;},
    {name: &#39;Buenos Aires&#39;, passagem: 520.00, hotel: 950.00, category: &#39;south-america&#39;},
    {name: &#39;Barcelona&#39;, passagem: 1390.00, hotel: 1670.00, category: &#39;europe&#39;},
    {name: &#39;Lisboa&#39;,    passagem: 1280.00, hotel: 1450.00, category: &#39;europe&#39;},
    {name: &#39;Vancouver&#39;, passagem: 1590.00, hotel: 320.00, category: &#39;north-america&#39;},
    {name: &#39;Roma&#39;,      passagem: 1400.00, hotel: 1950.00, category: &#39;europe&#39;},
  ];
  function setPackages(collection) {
    var result = [];
    for(var i = 0; i &amp;lt; collection.length; i++) {
        collection[i].pacote = (collection[i].passagem + collection[i].hotel) * 0.8;
        result.push(collection[i]);
    }
    return result;
  }

  var citiesWithPackages = setPackages(cities);
});
&lt;/pre&gt;

&lt;p&gt;A função setPackages pega qualquer coleção e, para cada objeto dessa coleção, insere mais uma propriedade chamada &lt;em&gt;pacote&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Alterei o nome da função, pois além de fazer mais sentido, fica claro para o leitor que na verdade, é uma nova função. Ela é pura, ou seja, não depende mais de dados externos e não alterará nada fora do seu escopo.&lt;/p&gt;

&lt;p&gt;Opps, quase pura. O leitor mais atento já pode ter percebido que, na verdade, ela alterou sim a variável &lt;em&gt;cities&lt;/em&gt; também. Isso porque em JavaScript, assim como Java e outros linguagens, no momento em que fizemos : &lt;code&gt;collection[i].pacote = alguma coisa&lt;/code&gt;, esta alterando o objeto que esta alocado na referência &lt;em&gt;collection[i].&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-53585&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/04/tuto3.png&#34; alt=&#34;tuto3&#34; width=&#34;867&#34; height=&#34;138&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para que essa função seja realmente pura, teremos que clonar o objeto para somente após inserirmos essa nova propriedade. Para isso, vou criar um objecto chamado utilities, que conterá funções utilitárias para nossa aplicação, e a primeira será o método &lt;code&gt;cloneObject&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;(function(_) {
  var utilities = {};

  utilities.cloneObject = function(obj) {
    if(typeof obj === &#34;object&#34;) {
      var clone = {};
      for (var prop in obj)
        if (obj.hasOwnProperty(prop))
          clone[prop] = obj[prop];
      return clone;
    }
  };

  // Data
  var cities = [
    {name: &#39;Nova York&#39;, passagem: 1550.00, hotel: 1800.00, category: &#39;north-america&#39;},
    {name: &#39;Paris&#39;,     passagem: 1720.00, hotel: 2100.00, category: &#39;europe&#39;},
    {name: &#39;Londres&#39;,   passagem: 1630.00, hotel: 2500.00, category: &#39;europe&#39;},
    {name: &#39;Amsterdam&#39;, passagem: 1430.00, hotel: 1750.00, category: &#39;europe&#39;},
    {name: &#39;Santiago&#39;,  passagem: 600.00,  hotel: 1150.00, category: &#39;south-america&#39;},
    {name: &#39;Buenos Aires&#39;, passagem: 520.00, hotel: 950.00, category: &#39;south-america&#39;},
    {name: &#39;Barcelona&#39;, passagem: 1390.00, hotel: 1670.00, category: &#39;europe&#39;},
    {name: &#39;Lisboa&#39;,    passagem: 1280.00, hotel: 1450.00, category: &#39;europe&#39;},
    {name: &#39;Vancouver&#39;, passagem: 1590.00, hotel: 320.00, category: &#39;north-america&#39;},
    {name: &#39;Roma&#39;,      passagem: 1400.00, hotel: 1950.00, category: &#39;europe&#39;},
  ];
  function setPackages(collection) {
    var result = [];
    for(var i = 0; i &amp;lt; collection.length; i++) {
      if(typeof collection[i].passagem !== &#39;undefined&#39; &amp;&amp; typeof collection[i].hotel !== &#39;undefined&#39;) {
        var cloned = utilities.cloneObject(collection[i]);
        cloned.pacote = (cloned.passagem + cloned.hotel) * 0.8;
        result.push(cloned);
      }
    }
    return result;
  }

  var citiesWithPackages = setPackages(cities);
});
&lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-53587&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/04/tuto5.png&#34; alt=&#34;tuto5&#34; width=&#34;872&#34; height=&#34;138&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora sim, temos uma função realmente pura, que não altera nenhum dado externo. Como calculamos os pacotes a partir do preço da passagem e do hotel, devemos checar se o objeto em questão contém essas duas propriedades para evitarmos erros, pois agora essa função é mais abstrata e pode receber qualquer tipo de coleção.&lt;/p&gt;

&lt;p&gt;Contudo, se queremos uma função abstrata, que pode aceitar qualquer tipo de coleção, por que não criarmos um método de utilities que fará esse papel.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;(function(_) {
  var utilities = {};

  utilities.map = function(list, callback) {
    var resultList = [];
    for(var i = 0; i &amp;lt; list.length; i++) {
      resultList.push(callback(list[i]));
    }
    return resultList;
  }

  utilities.cloneObject = function(obj) {
    if(typeof obj === &#34;object&#34;) {
      var clone = {};
      for (var prop in obj)
        if (obj.hasOwnProperty(prop))
          clone[prop] = obj[prop];
      return clone;
    }
  };

  // Data
  var cities = [
    {name: &#39;Nova York&#39;, passagem: 1550.00, hotel: 1800.00, category: &#39;north-america&#39;},
    {name: &#39;Paris&#39;,     passagem: 1720.00, hotel: 2100.00, category: &#39;europe&#39;},
    {name: &#39;Londres&#39;,   passagem: 1630.00, hotel: 2500.00, category: &#39;europe&#39;},
    {name: &#39;Amsterdam&#39;, passagem: 1430.00, hotel: 1750.00, category: &#39;europe&#39;},
    {name: &#39;Santiago&#39;,  passagem: 600.00,  hotel: 1150.00, category: &#39;south-america&#39;},
    {name: &#39;Buenos Aires&#39;, passagem: 520.00, hotel: 950.00, category: &#39;south-america&#39;},
    {name: &#39;Barcelona&#39;, passagem: 1390.00, hotel: 1670.00, category: &#39;europe&#39;},
    {name: &#39;Lisboa&#39;,    passagem: 1280.00, hotel: 1450.00, category: &#39;europe&#39;},
    {name: &#39;Vancouver&#39;, passagem: 1590.00, hotel: 320.00, category: &#39;north-america&#39;},
    {name: &#39;Roma&#39;,      passagem: 1400.00, hotel: 1950.00, category: &#39;europe&#39;},
  ];
  var citiesWithPackages = utilities.map(cities, function(city){
    if(typeof collection[i].passagem !== &#39;undefined&#39; &amp;&amp; typeof collection[i].hotel !== &#39;undefined&#39;) {
      var city = utilities.cloneObject(city);
      city.pacote = (city.passagem + city.hotel) * 0.8;
    }
    return city;
  });
});

&lt;/pre&gt;

&lt;p&gt;O método map, existente em diversas linguagens de programação, percorre nossa coleção e retornará uma nova coleção com os dados alterados da forma que a função callback quiser. Ou seja, agora temos toda flexibilidade para inserirmos ou retirarmos dados dos objetos de uma coleção sem afetar a coleção original.&lt;/p&gt;

&lt;p&gt;Pode parecer estranho para alguns que não estão habituados a javascript, mais funções callback são tão comuns nessa linguagem que, as vezes, nem me dou conta.&lt;/p&gt;

&lt;p&gt;Em javascript, funções podem receber outras funções como argumento e funções podem retornar outras funções.&lt;/p&gt;

&lt;p&gt;Vamos a explicação do que fizemos no método map: primeiramente ele aceita uma função como argumento. O que essa função retorna é que realmente será inserido na array resultList.&lt;/p&gt;

&lt;p&gt;Funções que podem receber outras funções como argumento ou que retornar outras funções são chamadas funções de ordem superior (higher-order functions).&lt;/p&gt;

&lt;p&gt;Vamos supor que eu precise clonar uma array e não mais um objeto. O método cloneObjects como próprio nome já diz, não irá ajudar. Então preciso criar outro método mais eficiente.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;(function(_) {
  var utilities = {};

  utilities.map = function(list, callback) {
    var resultList = [];
    for(var i = 0; i &amp;lt; list.length; i++) {
      resultList.push(callback(list[i]));
    }
    return resultList;
  }

  utilities.toClone = function() {
    if(arguments[0] === &#34;object&#34;) {
      return function(obj) {
        var clone = {};
        for(var prop in obj)
          if (obj.hasOwnProperty(prop))
            clone[prop] = obj[prop];
        return clone;
      }
    }
    if (arguments[0]===&#34;array&#34;){
      return function(obj) {
        var arrayClone = [];
        for (var i=0; i &amp;lt; obj.length; i++) {
          arrayClone.push(obj);
        }
        return arrayClone;
      };
    }
  };

  utilities.cloneObject = function(obj) {
    if(typeof obj === &#34;object&#34;) {
      var clone = {};
      for (var prop in obj)
        if (obj.hasOwnProperty(prop))
          clone[prop] = obj[prop];
      return clone;
    }
  };

  // Data
  var cities = [
    {name: &#39;Nova York&#39;, passagem: 1550.00, hotel: 1800.00, category: &#39;north-america&#39;},
    {name: &#39;Paris&#39;,     passagem: 1720.00, hotel: 2100.00, category: &#39;europe&#39;},
    {name: &#39;Londres&#39;,   passagem: 1630.00, hotel: 2500.00, category: &#39;europe&#39;},
    {name: &#39;Amsterdam&#39;, passagem: 1430.00, hotel: 1750.00, category: &#39;europe&#39;},
    {name: &#39;Santiago&#39;,  passagem: 600.00,  hotel: 1150.00, category: &#39;south-america&#39;},
    {name: &#39;Buenos Aires&#39;, passagem: 520.00, hotel: 950.00, category: &#39;south-america&#39;},
    {name: &#39;Barcelona&#39;, passagem: 1390.00, hotel: 1670.00, category: &#39;europe&#39;},
    {name: &#39;Lisboa&#39;,    passagem: 1280.00, hotel: 1450.00, category: &#39;europe&#39;},
    {name: &#39;Vancouver&#39;, passagem: 1590.00, hotel: 320.00, category: &#39;north-america&#39;},
    {name: &#39;Roma&#39;,      passagem: 1400.00, hotel: 1950.00, category: &#39;europe&#39;},
  ];
  var citiesWithPackages = utilities.map(cities, function(city){
    if(typeof city.passagem !== &#39;undefined&#39; &amp;&amp; typeof city.hotel !== &#39;undefined&#39;) {
      var clone = utilities.toClone(&#34;object&#34;);
      var city = clone(city);
      city.pacote = (city.passagem + city.hotel) * 0.8;
    }
    return city;
  });
});
&lt;/pre&gt;

&lt;p&gt;O método toClone é muito mais eficiente. Ele recebe como argumento a string “object” ou “array” e retorna a função correta para clonar esse tipo de objeto. E foi isso que utilizei na linha 58, dentro da função callback para a variável citiesWithPackages.&lt;/p&gt;

&lt;p&gt;O método toClone é uma função de ordem superior que retorna outra função para ser utilizada futuramente.&lt;/p&gt;

&lt;p&gt;Bom, é isso. Uma introdução à programação funcional. Por fim, se quiser continuar seu aprendizado em programação funcional, recomendo as video aulas da &lt;a href=&#34;http://webschool.io/jsfuncional/&#34;&gt;webschool.io&lt;/a&gt;, do Suissa. O cara disponibiliza gratuitamente um material muito bom e abrengente.&lt;/p&gt;

&lt;p&gt;Grande abraço.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>