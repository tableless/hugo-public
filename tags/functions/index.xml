<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functions on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/functions/index.xml</link>
    <description>Recent content in Functions on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/functions/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fun√ß√µes extras para tratamento de Strings no PHP</title>
      <link>https://tableless.github.io/hugo-public/funcoes-extras-para-tratamento-de-strings-no-php/</link>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/funcoes-extras-para-tratamento-de-strings-no-php/</guid>
      <description>&lt;p&gt;Como o projeto j√° estava atrasado, decidi que seria melhor continuar pesquisando alguma alternativa para resolver o problema da &amp;#8220;limpagem&amp;#8221; de strings, ent√£o encontrei a biblioteca¬†&lt;a href=&#34;https://github.com/jbroadway/urlify&#34; title=&#34; URLify for PHP&#34;&gt;URLify for PHP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A principio ele √© uma classe simples em PHP com as funcionalidades que n√£o s√£o nativas do PHP, por√©m s√£o uma m√£o na roda na hora de trabalhar com strings em projetos grandes, onde n√£o existe tempo para o dev criar do zero (muito menos test√°-los sem perder o foco do problema que realmente importa).&lt;/p&gt;

&lt;p&gt;Como trabalho com CakePHP, s√≥ tive o trabalho de adicion√°-lo no meu diret√≥rio &amp;#8216;Lib&amp;#8217;, importar a classe,&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;App::uses(&#39;URLify&#39;,&#39;Lib&#39;);
&lt;/pre&gt;

&lt;p&gt;e chamar a fun√ß√£o &amp;#8216;::downcode&amp;#8217;, que transcreve os caracteres especiais para os seus correspondentes no alfabeto (Ex: &amp;#8216;√ß&amp;#8217; -&amp;gt; &amp;#8216;c&amp;#8217; ; &amp;#8216;√°&amp;#8217; -&amp;gt; &amp;#8216;a&amp;#8217;)&lt;/p&gt;

&lt;pre style=&#34;font-size:16px&#34; class=&#34;lang-php&#34;&gt;$mytext = &#39;ca√ßamba lil√°s&#39;;
   $newtext = URLify::downcode($mytext);
   //cacamba lilas
&lt;/pre&gt;

&lt;p&gt;e pronto, mantive meu c√≥digo limpo, com uma biblioteca leve e elegante.&lt;/p&gt;

&lt;p&gt;A classe tamb√©m possui outros m√©todos bem legais de filtragem de strings como o &amp;#8216;::add_chars&amp;#8217;, que permite adicionar suas pr√≥prias exce√ß√µes a lista de filtragem de caracteres.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;URLify::add_chars (array (
         &#39;¬ø&#39; =&amp;gt; &#39;?&#39;, &#39;¬Æ&#39; =&amp;gt; &#39;(r)&#39;, &#39;¬º&#39; =&amp;gt; &#39;1/4&#39;,
         &#39;¬º&#39; =&amp;gt; &#39;1/2&#39;, &#39;¬æ&#39; =&amp;gt; &#39;3/4&#39;, &#39;¬∂&#39; =&amp;gt; &#39;P&#39;
     ));

     echo URLify::downcode (&#39;¬ø ¬Æ ¬º ¬º ¬æ ¬∂&#39;);
     // &#34;? (r) 1/2 1/2 3/4 P&#34;

&lt;/pre&gt;

&lt;p&gt;e o &amp;#8216;::remove_words&amp;#8217;, que pelo nome ja d√° pra saber o que faz&amp;#8230;&lt;/p&gt;

&lt;pre style=&#34;font-size:16px&#34; class=&#34;lang-php&#34;&gt;URLify::remove_words (array (&#39;remove&#39;, &#39;these&#39;, &#39;too&#39;));
&lt;/pre&gt;

&lt;p&gt;E √© isso, espero que tenha ajudado algu√©m, at√© o pr√≥ximo post&amp;#8230;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6 truques b√°sicos do functions.php do WordPress</title>
      <link>https://tableless.github.io/hugo-public/6-truques-de-wordpress/</link>
      <pubDate>Tue, 22 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/6-truques-de-wordpress/</guid>
      <description>

&lt;p&gt;O &lt;strong&gt;functions.php&lt;/strong&gt; √© o arquivo de fun√ß√µes do seu tema. √â nele que voc√™ habilita os menus, cria widgets e define uma s√©rie de configura√ß√µes dos temas de WordPress. Essas s√£o 5 pequenos truques que uso nos meus projetos em WordPress.&lt;/p&gt;

&lt;h2 id=&#34;como-tirar-a-barra-de-admin&#34;&gt;Como tirar a barra de admin&lt;/h2&gt;

&lt;p&gt;Eu odeio aquela barra de administra√ß√£o que o WordPress coloca no site quando estamos logados. Eles atrapalham muitas vezes o desenvolvimento do projeto, por isso enquanto estou desenvolvendo, eu desabilito essa feature. Para fazer isso basta inserir uma linha no functions.php:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;add_filter(&#39;show_admin_bar&#39;, &#39;__return_false&#39;);
&lt;/pre&gt;

&lt;h2 id=&#34;atualizando-o-wordpress-sem-necessidade-de-ftp&#34;&gt;Atualizando o WordPress sem necessidade de FTP&lt;/h2&gt;

&lt;p&gt;Com apenas um clique voc√™ consegue atualizar seu WordPress pela pr√≥pria interface administrativa. Basta clicar um bot√£o e pronto. Eu geralmente atualizo o WordPress localmente, comito via git e depois atualizo os arquivos no server.&lt;/p&gt;

&lt;p&gt;Geralmente, por motivos de seguran√ßa, quando o WordPress √© atualizado pela interface administrativa, ele pede as informa√ß√µes de FTP. Como n√£o tenho FTP instalado nem no server, nem local, eu desabilito essa parte. Para isso, uso a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;define(&#39;FS_METHOD&#39;,&#39;direct&#39;);
&lt;/pre&gt;

&lt;h2 id=&#34;definindo-o-tamanho-padr√£o-das-imagens&#34;&gt;Definindo o tamanho padr√£o das imagens&lt;/h2&gt;

&lt;p&gt;Quando voc√™ sobe uma imagem no WordPress, por padr√£o ele salva algumas imagens em tamanhos espec√≠ficos. Isso √© bom porque voc√™ pode usar imagens menores quando necess√°rio em vez de usar no tamanho original. Por isso √© bom que voc√™ configure o tamanho das imagens geradas de acordo com o seu layout.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;if ( function_exists( &#39;add_theme_support&#39; ) ) {
    add_theme_support( &#39;post-thumbnails&#39; );
    set_post_thumbnail_size( 650, 250, true ); // Tamanho da largura das imagens.
}
&lt;/pre&gt;

&lt;h2 id=&#34;adicionando-excerpt-nas-p√°ginas-do-wordpress&#34;&gt;Adicionando EXCERPT nas p√°ginas do WordPress&lt;/h2&gt;

&lt;p&gt;No WordPress h√° duas maneiras de cadastrar textos: usando p√°ginas ou posts. P√°ginas cont√©m textos mais est√°ticos, que v√£o mudar pouco. Os posts tem uma ordem cronol√≥gica, indicam novidades e etc. Os Excerpts s√£o os resumos que fazem a introdu√ß√£o exclusivamente de posts. Mas as vezes, em alguns projetos, precisamos usar em P√°ginas tamb√©m. Essa linha habilita o uso de excerpts em p√°ginas:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;add_post_type_support( &#39;page&#39;, &#39;excerpt&#39; );
&lt;/pre&gt;

&lt;h2 id=&#34;retirando-a-metatag-wordpress-generator&#34;&gt;Retirando a metatag WordPress Generator&lt;/h2&gt;

&lt;p&gt;Geralmente o WordPress coloca uma metatag indicando que o site foi gerado com WordPress e tamb√©m qual a vers√£o do CMS.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;meta name=&#34;generator&#34; content=&#34;WordPress 3.2.1&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Eu, particularmente, n√£o preciso disso, bem como muitos sites por a√≠. Essa linha retira a metatag.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;remove_action(&#39;wp_head&#39;, &#39;wp_generator&#39;);
&lt;/pre&gt;

&lt;h2 id=&#34;inserindo-a-imagem-de-destaque-para-o-feed&#34;&gt;Inserindo a imagem de destaque para o FEED&lt;/h2&gt;

&lt;p&gt;No WordPress h√° como definir uma imagem de destaque para os posts. Essa imagem, por padr√£o, n√£o √© inserida quando os leitores leem o post via feed. Para habilitar isso, basta inserir as linhas abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;add_filter(&#39;the_content_feed&#39;, &#39;rss_post_thumbnail&#39;);
function rss_post_thumbnail($content) {
    global $post;
    if( has_post_thumbnail($post-&gt;ID) )
        $content = &#39;&amp;lt;p&amp;gt;&#39; . get_the_post_thumbnail($post-&gt;ID, &#39;thumbnail&#39;) . &#39;&amp;lt;/p&amp;gt;&#39; . $content;
    return $content;
}
&lt;/pre&gt;

&lt;p&gt;E pronto. üòâ&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>