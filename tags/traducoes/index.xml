<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Traducoes on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/traducoes/index.xml</link>
    <description>Recent content in Traducoes on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/traducoes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Entendendo o async e o await em JavaScript</title>
      <link>https://tableless.github.io/hugo-public/entendendo-o-async-e-o-await-em-javascript/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/entendendo-o-async-e-o-await-em-javascript/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;As funcionalidades &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; não conseguiram chegar para o ES6, mas isso não significa que elas não irão chegar ao JavaScript. Enquanto escrevo esse post, ela é uma proposta na &lt;a href=&#34;https://github.com/tc39/ecma262/tree/82bebe057c9fca355cfbfeb36be8e42f18c61e94&#34; target=&#34;_blank&#34;&gt;fase 3&lt;/a&gt; e está sendo trabalhada ativamente. As funcionalidades já estão no &lt;a href=&#34;https://blogs.windows.com/msedgedev/2015/09/30/asynchronous-code-gets-easier-with-es2016-async-function-support-in-chakra-and-microsoft-edge/&#34; target=&#34;_blank&#34;&gt;Edge&lt;/a&gt; e devem chegar a outros browsers assim que chegar na &lt;a href=&#34;https://twitter.com/bterlson/status/692464374842290176&#34; target=&#34;_blank&#34;&gt;fase 4&lt;/a&gt; &amp;#8211; pavimentando seu caminho para inclusão na próxima edição da linguagem (veja também: &lt;a href=&#34;https://tc39.github.io/process-document/&#34; target=&#34;_blank&#34;&gt;Processo TC39&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;utilizando-promises&#34;&gt;Utilizando Promises&lt;/h2&gt;

&lt;p&gt;Vamos supor que tenhamos o código abaixo. Aqui eu estou encapsulando uma chamada &lt;code&gt;HTTP&lt;/code&gt; em uma &lt;code&gt;Promise&lt;/code&gt;. A promise executa o &lt;code&gt;body&lt;/code&gt; caso haja sucesso e é rejeitada com um &lt;code&gt;err&lt;/code&gt; caso contrário. Ela puxa o HTML de um artigo aleatório &lt;a href=&#34;https://ponyfoo.com/&#34; target=&#34;_blank&#34;&gt;desse blog&lt;/a&gt; toda vez que é executada.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var request = require(&#39;request&#39;);

function getRandomPonyFooArticle () {
  return new Promise((resolve, reject) =&amp;gt; {
    request(&#39;https://ponyfoo.com/articles/random&#39;, (err, res, body) =&amp;gt; {
      if (err) {
        reject(err); return;
      }
      resolve(body);
    });
  });
}
&lt;/pre&gt;

&lt;p&gt;Uma utilização típica da promise mostrada anteriormente está no código abaixo. Nele nós construímos um encadeamento de promises transformando o HTML da página em Markdown de um subconjunto de seu DOM e então imprimimos de forma amigável no terminal utilizando um &lt;code&gt;console.log&lt;/code&gt;. Sempre lembre de adicionar um &lt;code&gt;.catch&lt;/code&gt; para suas promises.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var hget = require(&#39;hget&#39;);
var marked = require(&#39;marked&#39;);
var Term = require(&#39;marked-terminal&#39;);

printRandomArticle();

function printRandomArticle () {
  getRandomPonyFooArticle()
    .then(html =&amp;gt; hget(html, {
      markdown: true,
      root: &#39;main&#39;,
      ignore: &#39;.at-subscribe,.mm-comments,.de-sidebar&#39;
    }))
    .then(md =&amp;gt; marked(md, {
      renderer: new Term()
    }))
    .then(txt =&amp;gt; console.log(txt))
    .catch(reason =&amp;gt; console.error(reason));
}
&lt;/pre&gt;

&lt;p&gt;Esse código foi “melhor que utilizar callbacks” quando se trata da sensação de como foi ler o código sequencialmente.&lt;/p&gt;

&lt;h2 id=&#34;usando-generators&#34;&gt;Usando generators&lt;/h2&gt;

&lt;p&gt;Nós já exploramos os generators como uma forma de deixar o html disponível de uma maneira sintética e síncrona &lt;a href=&#34;https://ponyfoo.com/articles/es6-generators-in-depth&#34; target=&#34;_blank&#34;&gt;no passado&lt;/a&gt;. Mesmo que o código agora seja um pouco síncrono, existe um pouco de encapsulamento envolvido, e generators podem não ser a melhor maneira de chegar aos resultados que queremos, então vamos continuar utilizando Promises.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function getRandomPonyFooArticle (gen) {
  var g = gen();
  request(&#39;https://ponyfoo.com/articles/random&#39;, (err, res, body) =&amp;gt; {
    if (err) {
      g.throw(err); return;
    }
    g.next(body);
  });
}

getRandomPonyFooArticle(function* printRandomArticle () {
  var html = yield;
  var md = hget(html, {
    markdown: true,
    root: &#39;main&#39;,
    ignore: &#39;.at-subscribe,.mm-comments,.de-sidebar&#39;
  });
  var txt = marked(md, {
    renderer: new Term()
  });
  console.log(txt);
});
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Lembre-se que você deve encapsular a chamada ao yield em um bloco try / catch para preservar o tratamento de erros que adicionamos quando usamos promises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nem precisamos falar que usar generators dessa maneira não permite que escalemos bem nossas aplicações. Além de envolver uma sintaxe não intuitiva nessa mistura, seu código iterador será altamente acoplado ao generator que está sendo consumido. Isso faz com que você terá de modificar ele toda vez que uma nova expressão de &lt;code&gt;await&lt;/code&gt; for inserida no generator. A melhor alternativa é utilizar uma nova funcionalidade que está chegando: &lt;strong&gt;Funções Assíncronas&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;utilizando-async-await&#34;&gt;Utilizando &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Quando as &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; finalmente chegarem, seremos capazes de pegar nossa implementação baseada em promises e tirar a vantagem do estilo de &lt;strong&gt;“aparência síncrona”&lt;/strong&gt; dos generators. Outro benefício dessa abordagem é que não teremos que alterar o &lt;code&gt;getRandomPonyFooArticle&lt;/code&gt;, enquanto ele retornar uma promise ele poderá ser aguardado.&lt;/p&gt;

&lt;p&gt;Perceba que o &lt;code&gt;await&lt;/code&gt; só poderá ser utilizado em funções marcadas com a palavra chave &lt;code&gt;async&lt;/code&gt;. Ele funciona similarmente aos generators, suspendendo a execução em seu contexto até que a promise seja entregue. Se a expressão esperada não for uma promise, ela é transformada em uma promise.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;read();

async function read () {
  var html = await getRandomPonyFooArticle();
  var md = hget(html, {
    markdown: true,
    root: &#39;main&#39;,
    ignore: &#39;.at-subscribe,.mm-comments,.de-sidebar&#39;
  });
  var txt = marked(md, {
    renderer: new Term()
  });
  console.log(txt);
}
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Novamente &amp;#8211; assim como os generators &amp;#8211; lembre-se que você deverá encapsular o await em um bloco try / catch para que possamos capturar e tratar erros esperados das promises das funções assíncronas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Além disso, uma &lt;strong&gt;Função Assíncrona&lt;/strong&gt; sempre irá retornar uma &lt;code&gt;Promise&lt;/code&gt;. Essa promise é rejeitada em caso de exceções não tratadas ou é resolvida e enviada como retorno da função assíncrona caso contrário. Isso nos permite invocar uma Função assíncrona e misturar isso com uma continuação baseada em promises normalmente. O exemplo a seguir mostra como as duas maneiras podem ser combinadas.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function asyncFun () {
  var value = await Promise
    .resolve(1)
    .then(x =&amp;gt; x * 3)
    .then(x =&amp;gt; x + 5)
    .then(x =&amp;gt; x / 2);
  return value;
}
asyncFun().then(x =&amp;gt; console.log(`x: ${x}`));
// &amp;lt;- &amp;#039;x: 4&amp;#039;
&lt;/pre&gt;

&lt;p&gt;Voltando ao nosso exemplo anterior, ele mostra que podemos usar o &lt;code&gt;return txt&lt;/code&gt; da nossa função &lt;code&gt;async read&lt;/code&gt; e permitir que os “consumidores” possam dar continuidade utilizando promises ou até mesmo uma outra &lt;strong&gt;Função Assíncrona&lt;/strong&gt;. Dessa maneira, nossa função read deve se preocupar apenas com imprimir um markdown de forma legível no terminal de um artigo aleatório do Pony Foo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function read () {
  var html = await getRandomPonyFooArticle();
  var md = hget(html, {
    markdown: true,
    root: &#39;main&#39;,
    ignore: &#39;.at-subscribe,.mm-comments,.de-sidebar&#39;
  });
  var txt = marked(md, {
    renderer: new Term()
  });
  return txt;
}
&lt;/pre&gt;

&lt;p&gt;Então você poderá adicionar mais tarde um &lt;code&gt;await read()&lt;/code&gt; em outra &lt;strong&gt;Função Assíncrona&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function write () {
  var txt = await read();
  console.log(txt);
}
&lt;/pre&gt;

&lt;p&gt;Ou poderá simplesmente utilizar promises para dar continuação.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;read().then(txt =&amp;gt; console.log(txt));
&lt;/pre&gt;

&lt;h2 id=&#34;bifurcação-no-caminho&#34;&gt;Bifurcação no caminho&lt;/h2&gt;

&lt;p&gt;No fluxo assíncrono de código é comum executar duas ou mais tarefas concorrentemente. Enquanto as &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; facilitam a escrita de código assíncrono, elas também transformam elas mesmas em um código que é serial, ou seja, código que executa uma operação por vez. Uma função com múltiplos &lt;code&gt;await&lt;/code&gt; irá ser suspensa uma vez em cada &lt;code&gt;await&lt;/code&gt; até que a &lt;code&gt;Promise&lt;/code&gt; chegue (antes de retomar a execução e mover para o próximo &lt;code&gt;await&lt;/code&gt;, não diferente de como podemos ver com os generators e o &lt;code&gt;yield&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Para contornar isso você pode usar o &lt;code&gt;Promise.all&lt;/code&gt; para criar uma única promise que você irá dar o &lt;code&gt;await&lt;/code&gt; nela. O único problema é pegar o hábito de utilizar o &lt;code&gt;Promise.all&lt;/code&gt; ao invés de deixar tudo ocorrer em série, como também pode diminuir a performance do seu código.&lt;/p&gt;

&lt;p&gt;O exemplo a seguir mostra como você pode utilizar o &lt;code&gt;await&lt;/code&gt; em três diferentes promises que poderiam ser executadas concorrentemente. Dado que o &lt;code&gt;await&lt;/code&gt; suspende a sua &lt;strong&gt;Função Assíncrona&lt;/strong&gt; e que o &lt;code&gt;await Promise.all&lt;/code&gt; resulta em um &lt;strong&gt;array de results&lt;/strong&gt;, nós podemos desestruturar para puxar resultados individualmente do array.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function concurrent () {
  var [r1, r2, r3] = await Promise.all([p1, p2, p3]);
}
&lt;/pre&gt;

&lt;p&gt;Até um tempo atrás havia uma alternativa para o código acima: &lt;code&gt;await*&lt;/code&gt;, onde você não precisava encapsular as promises com o &lt;code&gt;Promise.all&lt;/code&gt;. O &lt;strong&gt;Babel 5&lt;/strong&gt; ainda suporta essa sintaxe, mas ela foi tirada da documentação e também do &lt;strong&gt;Babel 6&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function concurrent () {
  var [r1, r2, r3] = await* [p1, p2, p3];
}
&lt;/pre&gt;

&lt;p&gt;Você ainda pode utilizar algo como &lt;code&gt;all = Promise.all.bind(Promise)&lt;/code&gt; para obter uma alternativa ao &lt;code&gt;Promise.all&lt;/code&gt;. Partindo desse ponto, você pode fazer o mesmo para o &lt;code&gt;Promise.race&lt;/code&gt;, que não tinha um equivalente para &lt;code&gt;await*&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const all = Promise.all.bind(Promise);
async function concurrent () {
  var [r1, r2, r3] = await all([p1, p2, p3]);
}
&lt;/pre&gt;

&lt;h2 id=&#34;tratamento-de-erros&#34;&gt;Tratamento de Erros&lt;/h2&gt;

&lt;p&gt;Note que &lt;strong&gt;erros são engolidos “silenciosamente” nas Funções Assíncronas&lt;/strong&gt; &amp;#8211; assim como em &lt;code&gt;Promises&lt;/code&gt; normais. A menos que você adicione blocos &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; ao redor de chamadas &lt;code&gt;await&lt;/code&gt;, exceções não capturadas &amp;#8211; independentemente se ocorreram no corpo da sua &lt;strong&gt;Função Assíncrona&lt;/strong&gt; ou enquanto estava suspensa durante o &lt;code&gt;await&lt;/code&gt; &amp;#8211; irão rejeitar a &lt;code&gt;Promise&lt;/code&gt; retornada pela &lt;strong&gt;Função Assíncrona&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Naturalmente isso pode ser visto como um ponto forte: você tem a capacidade de tirar proveito das convenções do uso do &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt;, algo que você era incapaz de realizar com o uso de &lt;code&gt;callbacks&lt;/code&gt; &amp;#8211; e de alguma forma utilizar com &lt;code&gt;Promises&lt;/code&gt;. Nesse sentido, &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; são semelhantes aos generators, onde você também tinha a capacidade de tirar proveito do uso do &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; graças à suspensão da execução da função tornando um fluxo assíncrono em um código síncrono.&lt;/p&gt;

&lt;p&gt;Além disso, você também é capaz de capturar exceções de fora da &lt;strong&gt;Função Assíncrona&lt;/strong&gt;, simplesmente adicionando uma cláusula &lt;code&gt;.catch&lt;/code&gt; à &lt;code&gt;Promise&lt;/code&gt; que eles retornam. Enquanto isso é uma forma flexível de combinar o tratamento de erros utilizando &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; com cláusulas &lt;code&gt;.catch&lt;/code&gt; nas &lt;code&gt;Promises&lt;/code&gt;, também pode levar a uma grande confusão e deixar com que erros fiquem sem tratamento.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;read()
  .then(txt =&amp;gt; console.log(txt))
  .catch(reason =&amp;gt; console.error(reason));
&lt;/pre&gt;

&lt;p&gt;Nós devemos ter cuidado e educarmos a nós mesmos sobre as diferentes formas em que podemos encontrar, tratar, registrar e prevenir as exceções.&lt;/p&gt;

&lt;h2 id=&#34;utilizando-async-await-hoje&#34;&gt;Utilizando &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; hoje&lt;/h2&gt;

&lt;p&gt;Uma das formas de se utilizar &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; em seu código hoje é através do &lt;strong&gt;Babel&lt;/strong&gt;. Isso envolve uma série de módulos, mas você pode sempre criar um módulo que encapsula todos esses outros em um se você preferir. Eu incluí um &lt;code&gt;npm-run&lt;/code&gt; como uma maneira útil de se manter tudo em pacotes instalados localmente.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;npm i -g npm-run
npm i -D \
  browserify \
  babelify \
  babel-preset-es2015 \
  babel-preset-stage-3 \
  babel-runtime \
  babel-plugin-transform-runtime

echo &#39;{
  &#34;presets&#34;: [&#34;es2015&#34;, &#34;stage-3&#34;],
  &#34;plugins&#34;: [&#34;transform-runtime&#34;]
}&#39; &amp;gt; .babelrc
&lt;/pre&gt;

&lt;p&gt;O exemplo a seguir irá compilar o arquivo &lt;code&gt;example.js&lt;/code&gt; utilizando o &lt;strong&gt;browserify&lt;/strong&gt; enquanto utiliza o &lt;strong&gt;babelify&lt;/strong&gt; para habilitar o suporte às &lt;strong&gt;Funções Assíncronas&lt;/strong&gt;. Você pode então enviar o script para o &lt;strong&gt;node&lt;/strong&gt; ou &lt;strong&gt;salvar em disco&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;npm-run browserify -t babelify example.js | node
&lt;/pre&gt;

&lt;h2 id=&#34;leitura-adicional&#34;&gt;Leitura adicional&lt;/h2&gt;

&lt;p&gt;O rascunho das &lt;a href=&#34;https://tc39.github.io/ecmascript-asyncawait/&#34; target=&#34;_blank&#34;&gt;especificações para Funções Assíncronas&lt;/a&gt; é bem curto e deve ser uma leitura interessante se você quer aprender mais sobre essa funcionalidade que está por vir.&lt;/p&gt;

&lt;p&gt;Eu colei um pedaço de código abaixo com a finalidade de ajudar você a entender como &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; funcionam internamente. Mesmo que não possamos criar novas palavras chave, é importante em termos de compreensão saber o que está acontecendo atrás dar curtinas do &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;É útil saber que &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; internamente se aproveitam dos &lt;strong&gt;generators&lt;/strong&gt; e das &lt;strong&gt;promises&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O código a seguir mostra como uma declaração de uma &lt;strong&gt;Função Assíncrona&lt;/strong&gt; pode ser transformada em uma função comum que retorna o resultado alimentando a &lt;code&gt;spawn&lt;/code&gt; com um generator &amp;#8211; onde nós iremos considerar o &lt;code&gt;await&lt;/code&gt; como o equivalente sintático para &lt;code&gt;yield&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;async function example (a, b, c) {
  example function body
}

function example (a, b, c) {
  return spawn(function* () {
    example function body
  }, this);
}
&lt;/pre&gt;

&lt;p&gt;Na &lt;code&gt;spawn&lt;/code&gt;, uma promise é encapsulada em volta do código que irá percorrer o generator &amp;#8211; composta do código do usuário &amp;#8211; em série, repassando valores para o “generator” (corpo da &lt;strong&gt;Função Assíncrona&lt;/strong&gt;). Com isso podemos observar que &lt;strong&gt;Funções Assíncronas&lt;/strong&gt; são um &lt;code&gt;syntactic sugar&lt;/code&gt; que utiliza generators e promises, isso faz com que seja importante você entender como cada uma dessas partes trabalham para que você possa ter um melhor entendimento em como você pode misturar, comparar e combinar diferentes tipos de fluxo de código assíncrono juntos.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function spawn (genF, self) {
  return new Promise(function (resolve, reject) {
    var gen = genF.call(self);
    step(() =&amp;gt; gen.next(undefined));
    function step (nextF) {
      var next;
      try {
        next = nextF();
      } catch(e) {
        // finished with failure, reject the promise
        reject(e);
        return;
      }
      if (next.done) {
        // finished with success, resolve the promise
        resolve(next.value);
        return;
      }
      // not finished, chain off the yielded promise and `step` again
      Promise.resolve(next.value).then(
        v =&amp;gt; step(() =&amp;gt; gen.next(v)),
        e =&amp;gt; step(() =&amp;gt; gen.throw(e))
      );
    }
  });
}
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Os pedaços de códigos mostrados devem ajudá-lo a compreender como o algoritmo do &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; itera sobre uma sequência de generators (expressões &lt;code&gt;await&lt;/code&gt;), encapsulando cada item na sequência em uma promise e então encadeando com a próxima sequência. Quando a sequência terminar ou uma das promises são rejeitadas ou a promise é retornada para a função que chamou o generator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Artigo traduzido e adaptado de: &lt;a href=&#34;https://ponyfoo.com/articles/understanding-javascript-async-await&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://ponyfoo.com/articles/understanding-javascript-async-await&#34;&gt;https://ponyfoo.com/articles/understanding-javascript-async-await&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sass vs. LESS vs. Stylus: Batalha dos Pré-processadores</title>
      <link>https://tableless.github.io/hugo-public/sass-vs-less-vs-stylus-batalha-dos-pre-processadores/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/sass-vs-less-vs-stylus-batalha-dos-pre-processadores/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Pré-processadores CSS3 são linguagens criadas com um único propósito de adicionar funcionalidades legais e criativas para o CSS sem quebrar a compatibilidade entre browsers. Os pré-processadores disponibilizam milhares de funcionalidades, e nesse artigo iremos falar sobre as mais utilizadas e conhecidas e algumas nem tanto conhecidas. Vamos começar:&lt;/p&gt;

&lt;h2 id=&#34;sintaxe&#34;&gt;Sintaxe&lt;/h2&gt;

&lt;p&gt;A parte mais importante ao escrever códigos utilizando um pré-processador é entender a sua sintaxe. Felizmente para nós, a sintaxe é (ou pode ser) idêntica à do CSS puro para os três pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-less&#34;&gt;Sass e LESS&lt;/h3&gt;

&lt;p&gt;Ambos utilizam o a sintaxe padrão do CSS. Isso faz com que seja extremamente fácil converter um arquivo CSS já existente para qualquer um deles. Sass utiliza arquivos com extensão .scss e LESS com extensão .less. Uma configuração básica de um arquivo Sass ou LESS pode ser como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.scss ou style.less */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ter notado, isso é apenas CSS puro, que compila perfeitamente em ambos pré-processadores (Sass e LESS).&lt;/p&gt;

&lt;p&gt;É importante notar que Sass também tem uma sintaxe mais antiga, que omite ponto e vírgula e as chaves. Ainda pode ser usado, mas como é uma sintaxe antiga, não iremos utilizá-la depois deste exemplo. A sintaxe utiliza arquivos com a extensão .sass e são da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.sass */
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Observação pessoal:&lt;/strong&gt; Essa sintaxe não é por causa de ser mais antiga e sim pois no início o &lt;strong&gt;Sass&lt;/strong&gt; era parte de um outro pré-processador chamado &lt;strong&gt;Haml&lt;/strong&gt; criado por desenvolvedores &lt;strong&gt;Ruby&lt;/strong&gt;, e por causa disso as folhas de estilo escritas com &lt;strong&gt;Sass&lt;/strong&gt; utilizavam uma sintaxe como a do &lt;strong&gt;Ruby&lt;/strong&gt;, sem chaves, ponto e vírgula e controlado por identação.&lt;/p&gt;

&lt;h3 id=&#34;stylus&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;A sintaxe para o Stylus é muito mais adaptável. Utiliza arquivos com extensão .styl, aceita a sintaxe padrão do CSS, porém também aceita algumas variações onde chaves, dois-pontos e ponto e vírgula são todos opcionais. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.styl */
h1 {
    color: #0982c1;
}
/* omitindo chaves */
h1
    color: #0982c1;

/* omitindo dois-pontos e ponto e vírgula
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;Utilizar diferentes variações em um mesmo arquivo também é válido, então o seguinte código seria compilado sem erros.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1 {
    color #0982c1
}
h2
    font-size: 1.2em
&lt;/pre&gt;

&lt;h2 id=&#34;variáveis&#34;&gt;Variáveis&lt;/h2&gt;

&lt;p&gt;Variáveis podem ser declaradas e usadas através das folhas de estilo. Elas podem ter qualquer valor que seja um valor em CSS (por exemplo: cores, números [unidades também], ou texto), e podem ser referenciadas em qualquer lugar das nossas folhas de estilo.&lt;/p&gt;

&lt;h3 id=&#34;sass&#34;&gt;Sass&lt;/h3&gt;

&lt;p&gt;Variáveis em Sass tem seu nome começado o símbolo &amp;#8220;$&amp;#8221; e o nome e o seu valor são separados com dois-pontos, assim como uma propriedade CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$mainColor: #0982c1;
$siteWidth: 1024px;
$borderStyle: dotted;

body {
    color: $mainColor;
    border: 1px $borderStyle $mainColor;
    max-width: $siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;Varíaves em LESS são praticamente iguais as variáveis no Sass, exceto por começarem seus nomes com o símbolo &amp;#8220;@&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mainColor: #0982c1;
@siteWidth: 1024px;
@borderStyle: dotted;

body {
    color: @mainColor;
    border: 1px @borderStyle @mainColor;
    max-width: @siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-1&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;Variáveis em Stylus não precisam começar com nenhum símbolo, porém ele permite a utilização do símbolo &amp;#8220;$&amp;#8221;. Como sempre, o ponto e vírgula para finalizar não é necessário, mas um sinal de igual entre o nome da variável e seu valor é. Uma coisa importante para se notar é que na versão 0.22.4 do Stylus variáveis com nome começados com o símbolo &amp;#8220;@&amp;#8221; são compiladas, porém não aplicam seu valor quando referenciadas. Em oturas palavras, não faça isso.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;mainColor = #0982c1;
siteWidth = 1024px;
$borderStyle = dotted;

body
    color mainColor
    border 1px $borderStyle mainColor
    max-width siteWidth
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Cada um dos arquivos acima irão compilar no mesmo CSS. Você pode usar sua imaginação para ver quão úteis variáveis podem ser. Não precisaremos mais ao mudar uma cor reescrever a mesma vinte vezes, ou querer mudar a largura de nosso site e ter de procurar por todo o site para fazer isso. Aqui está o CSS depois de compilado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    color: #0982c1;
    border: 1px dotted #0982c1;
    max-width: 1024px.
}
&lt;/pre&gt;

&lt;h2 id=&#34;aninhamento&#34;&gt;Aninhamento&lt;/h2&gt;

&lt;p&gt;Se precisarmos referenciar múltiplos elementos com o mesmo pai em nosso CSS, pode ser entediante ficar digitanto o pai toda vez.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;p&gt;Ao invés disso, usando um pré-processador, podemos escrever os seletores filhos dentro das chaves do elemento pai. O símbolo &amp;#8220;&amp;amp;&amp;#8221; é usado para referenciar o seletor pai.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;p&gt;Todos os três pré-processdores utilizam a mesma sintaxe para aninhar seletores.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;

    nav {
        height: 25px;

        a {
            color: #0982c1;

            &amp;:hover {
                text-decoration: underline;
            }
        }
    }
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-1&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Abaixo está o CSS compilado do código escrito acima. Está exatamente igual ao mostrado no começo &amp;#8211; que conveniente!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;h2 id=&#34;mixins&#34;&gt;Mixins&lt;/h2&gt;

&lt;p&gt;Mixins são funções que permitem reusar propriedades através de nossas folhas de estilo. Ao invés de procurar por todas nossas folhas de estilo e mudar uma propriedade várias vezes, podemos apenas mudar dentro de nosso mixin. Isso pode ser realmente útil para estilização de elementos específicos e para &amp;#8220;vendor prefixes&amp;#8221; (moz-*, o-*, etc). Quando os mixins são chamados de dentro de um seletor CSS, os argumentos são reconhecidos e os estilos dentro do mixin são aplicados ao seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-1&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Sass chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
@mixin error($borderWidth: 2px) {
    border: $borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    @include error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    @include error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-1&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em LESS chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
.error(@borderWidth: 2px) {
    border: @borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    .error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    .error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-2&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Stylus chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
error(borderWidth = 2px) {
    border: borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-2&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Todos pré-processadores irão compilar o mesmo código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.generic-error {
    padding: 20px;
    margin: 4px;
    border: 2px solid #f00;
    color: #f00;
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    border: 5px solid #f00;
    color: #f00;
}
&lt;/pre&gt;

&lt;h2 id=&#34;herança&#34;&gt;Herança&lt;/h2&gt;

&lt;p&gt;Quando estamos escrevendo CSS da velha maneira, nós usaríamos o seguinte código para aplicar o mesmo estilo para múltiplos elementos de uma só vez:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p,
u,
ol {
    /* estilos aqui */
}
&lt;/pre&gt;

&lt;p&gt;Isso funciona perfeitamente, mas se depois precisássemos de estilizar os elementos individualmente, outro seletor deveria ser criado para cada um e rapidamente poderia ficar cada vez mais bagunçado e difícil de manter. Podemos utilizar herança para resolver isso. Herança é a habilidade de outros seletores CSS herdarem as propriedades de outro seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-stylus&#34;&gt;Sass e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}

p {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-sass-e-stylus&#34;&gt;CSS Compilado (Sass e Stylus)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block, p, ul, ol {
    margin: 10px 5px;
    padding: 2px;
}
p {
    border: 1px solid #eee;
}
ul, ol {
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-2&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;LESS não tem suporte a herança de estilos como Sass e Stylus. Ao invés de adicionar diversos seletores para um grupo de propriedades, ele trata herança como um mixin sem argumentos e importa os estilos para dentro de seus próprios seletores. O problema disso é que propriedades são repetidas em sua folha de estilo compilada. Abaixo segue como deve-se utilizar:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
 
p {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Observação pessoal:&lt;/strong&gt; Como mencionado nos comentários, o LESS tem suporte a herança e pode ser feita com a seguinte sintaxe:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p {
        &amp;:extend(.block);
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-less&#34;&gt;CSS Compilado (LESS)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
p {
    margin: 10px 5px;
    padding: 2px;
    border: 1px solid #eee;
}
ul,
ol {
    margin: 10px 5px;
    padding: 2px;
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ver, os estilos do seletor .block foram inseridas nos seletores que queríamos aplicar a herança. É importante notar que a prioridade das propriedades pode se tornar um problema, então devemos ter bastante cautela.&lt;/p&gt;

&lt;h2 id=&#34;importação&#34;&gt;Importação&lt;/h2&gt;

&lt;p&gt;Na comunidade CSs, importar CSS é visto com maus olhos por utilizar diversas chamadas HTTP. Importar com um pré-processador funciona de forma diferente no entanto. Se você importar um arquivo com qualquer um dos três pré-processadores, ele irá literalmente pegar todo o conteúdo do arquivo durante a importação e gerar apenas um arquivo. Lembre-se que arquivos .css comuns importados compilam com o código:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;file.css&#34;;
&lt;/pre&gt;

&lt;p&gt;Lembre-se também que mixins e variáveis podem ser importadas e usadas em sua folha de estilo principal. Importação faz com que possamos criar arquivos separados para uma melhor organização.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-1&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* arquivo.{extensao} */
body {
    background: #eee;
}
&lt;/pre&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;reset.css&#34;;
@import &#34;arquivo.{extensao}&#34;;
 
p {
    background: #0982c1;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-3&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;h2 id=&#34;introdução-1&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;-&amp;gt;Pré-processadores produzem CSS que funciona em todos os browsers&lt;/p&gt;

&lt;p&gt;Pré-processadores CSS3 são linguagens criadas com um único propósito de adicionar funcionalidades legais e criativas para o CSS sem quebrar a compatibilidade entre browsers. Eles fazem isso compilando o código que escrevemos em CSS puro que pode ser usado em qualquer browser de agora até a era das pedras. Os pré-processadores disponibilizam milhares de funcionalidades, e nesse artigo iremos falar sobre as mais utilizadas e conhecidas e algumas nem tanto conhecidas. Vamos começar&lt;/p&gt;

&lt;h2 id=&#34;sintaxe-1&#34;&gt;Sintaxe&lt;/h2&gt;

&lt;p&gt;A parte mais importante ao escrever códigos utilizando um pré-processador CSS é entender a sua sintaxe. Felizmente para nós, a sintaxe é (ou pode ser) idêntica à do CSS puro para os três pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-less-1&#34;&gt;Sass e LESS&lt;/h3&gt;

&lt;p&gt;Ambos utilizam o a sintaxe padrão do CSS. Isso faz com que seja extremamente fácil converter um arquivo CSS já existente para qualquer um deles. Sass utiliza arquivos com extensão .scss e LESS com extensão .less. Uma configuração básica de um arquivo Sass ou LESS pode ser como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.scss ou style.less */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ter notado, isso é apenas CSS puro, que compila perfeitamente em ambos pré-processadores (Sass e LESS).&lt;/p&gt;

&lt;p&gt;É importante notar que Sass também tem uma sintaxe mais antiga, que omite ponto e vírgula e as chaves. Ainda pode ser usado, mas como é uma sintaxe antiga, não iremos utilizá-la depois deste exemplo. A sintaxe utiliza arquivos com a extensão .sass e são da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.sass */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-3&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;A sintaxe para o Stylus é muito mais adaptável. Utiliza arquivos com extensão .styl, aceita a sintaxe padrão do CSS, porém também aceita algumas variações onde chaves, dois-pontos e ponto e vírgula são todos opcionais. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.styl */
h1 {
    color: #0982c1;
}
/* omitindo chaves */
h1
    color: #0982c1;

/* omitindo dois-pontos e ponto e vírgula
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;Utilizar diferentes variações em um mesmo arquivo também é válido, então o seguinte código seria compilado sem erros.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1 {
    color #0982c1
}
h2
    font-size: 1.2em
&lt;/pre&gt;

&lt;h2 id=&#34;variáveis-1&#34;&gt;Variáveis&lt;/h2&gt;

&lt;p&gt;Variáveis podem ser declaradas e usadas através das folhas de estilo. Elas podem ter qualquer valor que seja um valor em CSS (por exemplo: cores, números [unidades também], ou texto), e podem ser referenciadas em qualquer lugar das nossas folhas de estilo.&lt;/p&gt;

&lt;h3 id=&#34;sass-2&#34;&gt;Sass&lt;/h3&gt;

&lt;p&gt;Variáveis em Sass tem seu nome começado o símbolo &amp;#8220;$&amp;#8221; e o nome e o seu valor são separados com dois-pontos, assim como uma propriedade CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$mainColor: #0982c1;
$siteWidth: 1024px;
$borderStyle: dotted;

body {
    color: $mainColor;
    border: 1px $borderStyle $mainColor;
    max-width: $siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-3&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;Varíaves em LESS são praticamente iguais as variáveis no Sass, exceto por começarem seus nomes com o símbolo &amp;#8220;@&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mainColor: #0982c1;
@siteWidth: 1024px;
@borderStyle: dotted;

body {
    color: @mainColor;
    border: 1px @borderStyle @mainColor;
    max-width: @siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-4&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;Variáveis em Stylus não precisam começar com nenhum símbolo, porém ele permite a utilização do símbolo &amp;#8220;$&amp;#8221;. Como sempre, o ponto e vírgula para finalizar não é necessário, mas um sinal de igual entre o nome da variável e seu valor é. Uma coisa importante para se notar é que na versão 0.22.4 do Stylus variáveis com nome começados com o símbolo &amp;#8220;@&amp;#8221; são compiladas, porém não aplicam seu valor quando referenciadas. Em oturas palavras, não faça isso.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;mainColor = #0982c1;
siteWidth = 1024px;
$borderStyle = dotted;

body
    color mainColor
    border 1px $borderStyle mainColor
    max-width siteWidth
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-4&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Cada um dos arquivos acima irão compilar no mesmo CSS. Você pode usar sua imaginação para ver quão úteis variáveis podem ser. Não precisaremos mais ao mudar uma cor reescrever a mesma vinte vezes, ou querer mudar a largura de nosso site e ter de procurar por todo o site para fazer isso. Aqui está o CSS depois de compilado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    color: #0982c1;
    border: 1px dotted #0982c1;
    max-width: 1024px.
}
&lt;/pre&gt;

&lt;h2 id=&#34;aninhamento-1&#34;&gt;Aninhamento&lt;/h2&gt;

&lt;p&gt;Se precisarmos referenciar múltiplos elementos com o mesmo pai em nosso CSS, pode ser entediante ficar digitanto o pai toda vez.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;p&gt;Ao invés disso, usando um pré-processador, podemos escrever os seletores filhos dentro das chaves do elemento pai. O símbolo &amp;#8220;&amp;amp;&amp;#8221; é usado para referenciar o seletor pai.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-2&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;p&gt;Todos os três pré-processdores utilizam a mesma sintaxe para aninhar seletores.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;

    nav {
        height: 25px;

        a {
            color: #0982c1;

            &amp;:hover {
                text-decoration: underline;
            }
        }
    }
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-5&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Abaixo está o CSS compilado do código escrito acima. Está exatamente igual ao mostrado no começo &amp;#8211; que conveniente!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;h2 id=&#34;mixins-1&#34;&gt;Mixins&lt;/h2&gt;

&lt;p&gt;Mixins são funções que permitem reusar propriedades através de nossas folhas de estilo. Ao invés de procurar por todas nossas folhas de estilo e mudar uma propriedade várias vezes, podemos apenas mudar dentro de nosso mixin. Isso pode ser realmente útil para estilização de elementos específicos e para &amp;#8220;vendor prefixes&amp;#8221; (moz-*, o-*, etc). Quando os mixins são chamados de dentro de um seletor CSS, os argumentos são reconhecidos e os estilos dentro do mixin são aplicados ao seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-3&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Sass chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
@mixin error($borderWidth: 2px) {
    border: $borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    @include error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    @include error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-4&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em LESS chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
.error(@borderWidth: 2px) {
    border: @borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    .error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    .error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-5&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Stylus chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
error(borderWidth = 2px) {
    border: borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-6&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Todos pré-processadores irão compilar o mesmo código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.generic-error {
    padding: 20px;
    margin: 4px;
    border: 2px solid #f00;
    color: #f00;
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    border: 5px solid #f00;
    color: #f00;
}
&lt;/pre&gt;

&lt;h2 id=&#34;herança-1&#34;&gt;Herança&lt;/h2&gt;

&lt;p&gt;Quando estamos escrevendo CSS da velha maneira, nós usaríamos o seguinte código para aplicar o mesmo estilo para múltiplos elementos de uma só vez:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p,
u,
ol {
    /* estilos aqui */
}
&lt;/pre&gt;

&lt;p&gt;Isso funciona perfeitamente, mas se depois precisássemos de estilizar os elementos individualmente, outro seletor deveria ser criado para cada um e rapidamente poderia ficar cada vez mais bagunçado e difícil de manter. Podemos utilizar herança para resolver isso. Herança é a habilidade de outros seletores CSS herdarem as propriedades de outro seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-stylus-1&#34;&gt;Sass e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}

p {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-sass-e-stylus-1&#34;&gt;CSS Compilado (Sass e Stylus)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block, p, ul, ol {
    margin: 10px 5px;
    padding: 2px;
}
p {
    border: 1px solid #eee;
}
ul, ol {
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-5&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;LESS não tem suporte a herança de estilos como Sass e Stylus. Ao invés de adicionar diversos seletores para um grupo de propriedades, ele trata herança como um mixin sem argumentos e importa os estilos para dentro de seus próprios seletores. O problema disso é que propriedades são repetidas em sua folha de estilo compilada. Abaixo segue como deve-se utilizar:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
 
p {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-less-1&#34;&gt;CSS Compilado (LESS)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
p {
    margin: 10px 5px;
    padding: 2px;
    border: 1px solid #eee;
}
ul,
ol {
    margin: 10px 5px;
    padding: 2px;
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ver, os estilos do seletor .block foram inseridas nos seletores que queríamos aplicar a herança. É importante notar que a prioridade das propriedades pode se tornar um problema, então devemos ter bastante cautela.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;reset.css&#34;;
body {
    background: #eee;
}
p {
    background: #0982c1;
}
&lt;/pre&gt;

&lt;h2 id=&#34;funções-de-cores&#34;&gt;Funções de Cores&lt;/h2&gt;

&lt;p&gt;Funções de cores são funções nativas que transformam uma cor por compilação. Podem ser extremamente úteis para criar gradientes, escurecer cores no &amp;#8220;hover&amp;#8221; de elementos e muito mais.&lt;/p&gt;

&lt;h3 id=&#34;sass-4&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten($color, 10%); /* retorna uma cor 10% mais clara que $color */
darken($color, 10%);  /* retorna uma cor 10% mais escura $color */
 
saturate($color, 10%);   /* retorna uma cor 10% mais saturada que $color */
desaturate($color, 10%); /* retorna uma cor 10% menos saturada que $color */
 
grayscale($color);  /* retorna $color na escala de cinza */
complement($color); /* retorna cor complementar de $color */
invert($color);     /* retorna cor inversa de $color */
 
mix($color1, $color2, 50%); /* mistura $color1 com $color2 com um peso de 50% */
&lt;/pre&gt;

&lt;p&gt;Essas é apenas uma pequena lista de funções de cores disponíveis no Sass. A lista completa das funções de cores disponíveis no Sass pode ser encontrada na &lt;a href=&#34;http://sass-lang.com/documentation/Sass/Script/Functions.html&#34; target=&#34;_blank&#34;&gt;documentação do Sass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Funções de cores podem ser usadas em qualquer lugar que uma cor é válida no CSS. Veja um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$color: #0982C1;
 
h1 {
    background: $color;
    border: 3px solid darken($color, 50%);
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-6&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten(@color, 10%); /* retorna uma cor 10% mais clara que @color */
darken(@color, 10%);  /* retorna uma cor 10% mais escura @color */
 
saturate(@color, 10%);   /* retorna uma cor 10% mais saturada que @color */
desaturate(@color, 10%); /* retorna uma cor 10% menos saturada que @color */
 
spin(@color, 10); /* retorna uma cor 10 graus acima na matiz/tonalidade que @color */
spin(@color, -10); /* retorna uma cor 10 graus abaixo na matiz/tonalidade que @color */
 
mix(@color1, @color2); /* mistura @color1 com @color2 */
&lt;/pre&gt;

&lt;p&gt;A lista de todas as funções disponíveis no LESS pode encontrada na &lt;a href=&#34;http://lesscss.org/#-color-functions&#34; target=&#34;_blank&#34;&gt;documentação LESS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veja um exemplo de como usar uma função de cores no LESS:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@color: #0982C1;
 
h1 {
    background: @color;
    border: 3px solid darken(@color, 50%);
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-6&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten(color, 10%); /* retorna uma cor 10% mais clara que &#39;color&#39; */
darken(color, 10%);  /* retorna uma cor 10% mais escura &#39;color&#39; */
 
saturate(color, 10%);   /* retorna uma cor 10% mais saturada que &#39;color&#39; */
desaturate(color, 10%); /* retorna uma cor 10% menos saturada que &#39;color&#39; */
&lt;/pre&gt;

&lt;p&gt;A lista completa de todas funções de cores disponíveis no Stylus pode ser encontrada na &lt;a href=&#34;http://stylus-lang.com/docs/bifs.html&#34; target=&#34;_blank&#34;&gt;documentação Stylus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veja um exemplo de como usar uma função de cores no Stylus:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;color = #0982C1
 
h1
    background color
    border 3px solid darken(color, 50%)
&lt;/pre&gt;

&lt;h2 id=&#34;operações&#34;&gt;Operações&lt;/h2&gt;

&lt;p&gt;Fazer cálculos no CSS é bastante útil e agora totalmente possível. É bem simples e é dessa maneira que fazemos:&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-3&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    margin: (14px/2);
    top: 50px + 100px;
    right: 100px - 50px;
    left: 10 * 10;
}
&lt;/pre&gt;

&lt;h2 id=&#34;aplicações-práticas&#34;&gt;Aplicações Práticas&lt;/h2&gt;

&lt;p&gt;Nós falamos de diversas funcionalidades e novas coisas que pré-processadores podem fazer, mas não mostramos nada na prática ainda. Veja uma pequena lista de aplicações no mundo real em que um pré-processador é um salva-vidas.&lt;/p&gt;

&lt;h3 id=&#34;vendor-prefixes&#34;&gt;Vendor Prefixes&lt;/h3&gt;

&lt;p&gt;Essa é uma das principais razões para se usar um pré-processador e por um motivo bom &amp;#8211; economia gigante de tempo e lágrimas. Criar um mixin para cuidar dos vendor prefixes é fácil e nos salva de uma codificação repetitiva e dolorosa. Veja como fazer:&lt;/p&gt;

&lt;h4 id=&#34;sass-5&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mixin border-radius($values) {
    -webkit-border-radius: $values;
        -moz-border-radius: $values;
            border-radius: $values;
}
 
div {
    @include border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-7&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.border-radius(@values) {
    -webkit-border-radius: @values;
        -moz-border-radius: @values;
            border-radius: @values;
}
 
div {
    .border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-7&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;border-radius(values) {
    -webkit-border-radius: values;
        -moz-border-radius: values;
            border-radius: values;
}
 
div {
    border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;css-compilado-7&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
    -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
            border-radius: 10px;
}
&lt;/pre&gt;

&lt;h3 id=&#34;texto-3d&#34;&gt;Texto 3D&lt;/h3&gt;

&lt;p&gt;Simular um texto 3D utilizando diversos text-shadows é uma grande ideia. O único problema é que mudar a cor depois de criar é difícil e incômodo. Usando mixins e funções de cores, podemos criar um texto 3D e mudar sua cor sem nenhuma dificuldade.&lt;/p&gt;

&lt;h4 id=&#34;sass-6&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mixin text3d($color) {
    color: $color;
    text-shadow: 1px 1px 0px darken($color, 5%),
            2px 2px 0px darken($color, 10%),
            3px 3px 0px darken($color, 15%),
            4px 4px 0px darken($color, 20%),
            4px 4px 2px #000;
}
 
h1 {
    font-size: 32pt;
    @include text3d(#0982c1);
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-8&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.text3d(@color) {
    color: @color;
    text-shadow: 1px 1px 0px darken(@color, 5%),
            2px 2px 0px darken(@color, 10%),
            3px 3px 0px darken(@color, 15%),
            4px 4px 0px darken(@color, 20%),
            4px 4px 2px #000;
}
 
span {
    font-size: 32pt;
    .text3d(#0982c1);
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-8&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;text3d(color)
    color: color
    text-shadow: 1px 1px 0px darken(color, 5%), 2px 2px 0px darken(color, 10%), 3px 3px 0px darken(color, 15%), 4px 4px 0px darken(color, 20%), 4px 4px 2px #000
span
    font-size: 32pt
    text3d(#0982c1)
&lt;/pre&gt;

&lt;p&gt;Escolhi escrever os &amp;#8220;text-shadows&amp;#8221; do Stylus em apenas uma linha pois omiti as chaves.&lt;/p&gt;

&lt;h4 id=&#34;css-compilado-8&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;span {
    font-size: 32pt;
    color: #0982c1;
    text-shadow: 1px 1px 0px #097bb7, 
            2px 2px 0px #0875ae, 
            3px 3px 0px #086fa4, 
            4px 4px 0px #07689a, 
            4px 4px 2px #000;
}
&lt;/pre&gt;

&lt;h4 id=&#34;resultado-final&#34;&gt;Resultado Final&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn.tutsplus.com/net/uploads/legacy/1144_preprocshootout/text3d.png&#34; alt=&#34;Texto 3D&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;colunas&#34;&gt;Colunas&lt;/h3&gt;

&lt;p&gt;Usar operações numéricas e variáveis para colunas é uma ideia que tive da primeira vez que estava brincando com pré-processadores CSS. Declarando a largura desejada em uma variável, podemos facilmente alterá-la sem precisar de nenhum cálculo mental. Veja como fazer:&lt;/p&gt;

&lt;h4 id=&#34;sass-7&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$siteWidth: 1024px;
$gutterWidth: 20px;
$sidebarWidth: 300px;
 
body {
    margin: 0 auto;
    width: $siteWidth;
}
.content {
    float: left;
    width: $siteWidth - ($sidebarWidth+$gutterWidth);
}
.sidebar {
    float: left;
    margin-left: $gutterWidth;
    width: $sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-9&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@siteWidth: 1024px;
@gutterWidth: 20px;
@sidebarWidth: 300px;
 
body {
    margin: 0 auto;
    width: @siteWidth;
}
.content {
    float: left;
    width: @siteWidth - (@sidebarWidth+@gutterWidth);
}
.sidebar {
    float: left;
    margin-left: @gutterWidth;
    width: @sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-9&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;siteWidth = 1024px;
gutterWidth = 20px;
sidebarWidth = 300px;
 
body {
    margin: 0 auto;
    width: siteWidth;
}
.content {
    float: left;
    width: siteWidth - (sidebarWidth+gutterWidth);
}
.sidebar {
    float: left;
    margin-left: gutterWidth;
    width: sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;css-compilado-9&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    margin: 0 auto;
    width: 1024px;
}
.content {
    float: left;
    width: 704px;
}
.sidebar {
    float: left;
    margin-left: 20px;
    width: 300px;
}
&lt;/pre&gt;

&lt;h2 id=&#34;peculiaridades-notáveis&#34;&gt;Peculiaridades Notáveis&lt;/h2&gt;

&lt;p&gt;Existem algumas peculiaridades ao usar um pré-processador CSS. Irei falar de algumas engraçadas, mas se você está realmente interessado em encontrar todas elas eu recomendo você vasculhar toda a documentação, ou melhor, começar a usar um pré-processador na sua codificação diária.&lt;/p&gt;

&lt;h3 id=&#34;relatório-de-erros&#34;&gt;Relatório de Erros&lt;/h3&gt;

&lt;p&gt;Se você já escreveu CSS por uma boa quantia de tempo, tenho certeza que você já chegou a um ponto onde você tinha um erro em algum lugar e simplesmente não conseguia o encontrar. Se você é como eu, provavelmente passou a tarde toda arrancando os cabelos fora e comentando diversas coisas para caçar o erro.&lt;/p&gt;

&lt;p&gt;Pré-processadores CSS relatam os erros. Simples assim. Se tem alguma coisa errada em seu códigom ele te fala onde e, se você estiver com sorte até mesmo o porquê. Você pode dar uma olhada &lt;a href=&#34;http://tjholowaychuk.com/post/5002088731/stylus-vs-sass-vs-less-error-reporting&#34; target=&#34;_blank&#34;&gt;nesse post&lt;/a&gt; caso esteja interessado em ver como os erros são relatados em diferentes pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;comentários&#34;&gt;Comentários&lt;/h3&gt;

&lt;p&gt;Quando um pré-processador CSS está compilando, qualquer comentário escrito com barras duplas &amp;#8220;//&amp;#8221; é excluído e qualquer comentários escrito com barra e asterisco &amp;#8220;/* */&amp;#8221; não é alterado. Dito isso, use comentários com barras duplas para comentários que você queira na versão não compilada e comentários com barra e asterisco para comentários que serão visíveis após a compilação.&lt;/p&gt;

&lt;p&gt;Observação: Se você compilar os arquivos, minificando-os, todos comentários são excluídos.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Cada um dos pré-processadores que falamos (Sass, LESS e Stylus) possui um modo único de realizar a mesma tarefa &amp;#8211; dando a nós desenvolvedor a habilidade de usar funcionalidades úteis mantendo a compatibilidade entre browsers e um código limpo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mesmo não sendo uma exigência para o desenvolvimento, pré-processadores podem economizar muito tempo e tem funcionalidades bastante úteis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eu aconselho todos vocês a utilizar e testar a maior quantidade de pré-processadores possível, pois assim você poderá escolher efetivamente um favorito e saber o porquê ele é seu favorito dentre tantos outros. Se você ainda não testou usar nenhum pré-processador para escrever seu CSS, eu recomendo grandemente a você testar.&lt;/p&gt;

&lt;p&gt;Você tem alguma funcionalidade de seu pré-processador favorito que não foi mencionada? Há algo que algum pré-processador possa fazer e outros não? Conte-nos nos comentários abaixo!&lt;/p&gt;

&lt;p&gt;Traduzido e adaptado de: &lt;a href=&#34;http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout--net-24320&#34;&gt;http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout&amp;#8211;net-24320&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exercícios Simples de JavaScript para Entrevista</title>
      <link>https://tableless.github.io/hugo-public/exercicios-simples-de-javascript-para-entrevista/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/exercicios-simples-de-javascript-para-entrevista/</guid>
      <description>

&lt;p&gt;Qualquer um pode aprender teoria lendo posts de blogs, mas muitas pessoas nunca a entendem. Então para ter certeza que o(a) candidato(a) realmente entende sobre o tópico que ele(a) está falando, é uma boa ideia testar o seus conhecimentos através de exercícios. Exercícios não devem demorar muito e eles podem mostrar o nível de proficiência do candidato imediatamente.&lt;/p&gt;

&lt;p&gt;Estes são alguns exercícios que podem ser aplicados em entrevistas.&lt;/p&gt;

&lt;h2 id=&#34;contexto-call-apply&#34;&gt;Contexto(call, apply)&lt;/h2&gt;

&lt;p&gt;Essa é a forma que queremos usar &amp;#8220;someFn&amp;#8221;. O(a) candidato(a) deve implementá-la:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var result = someFun({ someProperty: &#39;interview&#39; }, function() {
    console.log(&#39;This pointing to&#39;. this);
});

console.log(&#39;Result is&#39;, result);

// Resultado esperado
This pointing to { someProperty: &#39;interview&#39; }
Result is 1
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var someFn = function(obj, cb) {
    cb.call(obj);
    return 1;
&lt;/pre&gt;

&lt;h3 id=&#34;adicional&#34;&gt;Adicional&lt;/h3&gt;

&lt;p&gt;Você pode modificar a função para checar se o(a) candidato(a) sabe como usar o &amp;#8220;apply&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var result = someFn({ someProperty: &#39;interview&#39; }, function (param1, param2) {
    console.log(&#39;This pointing to&#39;, this);
    console.log(&#39;Param 1 is&#39;, param1);
    console.log(&#39;Param 2 is&#39;, param2);
}, [&#39;cool&#39;, &#39;interview&#39;]);

console.log(&#39;Result is&#39;, result);

// Resultado esperado
This pointing to { someProperty: &#39;interview&#39; }
Param 1 is &#34;cool&#34;
Param 2 is &#34;interview&#34;
Result is 1
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var someFn = function (obj, cb, params) {
    cb.apply(obj, params);
    return 1;
}
&lt;/pre&gt;

&lt;h2 id=&#34;prototype-e-iteração&#34;&gt;Prototype e Iteração&lt;/h2&gt;

&lt;p&gt;Definir um método nativo chamado &amp;#8220;each&amp;#8221; para iterar em um array, com a opção de passar o contexto como segundo argumento.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var arr = [1, 2, 3];
arr.each(function (arrayItem, counter) {
    console.log(&#39;index&#39;, counter);
    console.log(&#39;item&#39;, arrayItem);

    arr[counter] = arrayItem + 1;
}, this);
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Array.prototype.each = Array.prototype.each || function (cb, context) {
    for (var i = 0; i &amp;lt; this.length; i++) {
        cb.call(context || this, this[i], i);
    }
};
&lt;/pre&gt;

&lt;h2 id=&#34;escopo&#34;&gt;Escopo&lt;/h2&gt;

&lt;p&gt;Definir &amp;#8220;someFn&amp;#8221; que irá funcionar da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var counter = someFn(1);
console.log(&#39;First call&#39;, counter(3));
console.log(&#39;Second call&#39;, counter(1));
console.log(&#39;Third call&#39;, counter(5));

// Resultado esperado
First call 4
Second call 5
Third call 10
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var someFn = function (start) {
    var private = start;

    return function (increment) {
        private += increment;

        return private;
    }
}
&lt;/pre&gt;

&lt;p&gt;Traduzido de: &lt;a href=&#34;http://goschevski.com/simple-javascript-interview-exercises/&#34;&gt;http://goschevski.com/simple-javascript-interview-exercises/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Guide by @mdo</title>
      <link>https://tableless.github.io/hugo-public/code-guide-mdo/</link>
      <pubDate>Fri, 28 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/code-guide-mdo/</guid>
      <description>&lt;p&gt;Alguns devem conhecer o &lt;a href=&#34;http://twitter.com/@mdo&#34;&gt;@mdo&lt;/a&gt;. Se você não conhece, ele é um dos criadores do &lt;a href=&#34;http://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ontem a noite ele liberou um Guia de Escrita de Código. É um guia simples onde ele cita uma série de boas práticas e guidelines para escrever código bem estruturado, escalável e legível para todos da equipe. Como eu sigo a grande maioria das regras do guia em todos os meus projetos, achei legal traduzir pra divulgar as boas práticas aqui no Brasil.&lt;/p&gt;

&lt;p&gt;Eu &lt;a href=&#34;https://github.com/diegoeis/code-guide/&#34;&gt;forkei o projeto e traduzi o guia para o português&lt;/a&gt;. Mesmo assim eu preciso ainda de ajuda para revisão. Se alguém quiser ajudar ou apenas estiver curioso para ler o guia em português, visite: &lt;a href=&#34;http://diegoeis.github.io/code-guide/&#34;&gt;Code Guide by @mdo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O Cenário do Web Design Responsivo</title>
      <link>https://tableless.github.io/hugo-public/o-cenario-do-web-design-responsivo/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-cenario-do-web-design-responsivo/</guid>
      <description>

&lt;p&gt;O Web design responsivo está por aí há alguns anos, e foi destaque em 2012. Muitas estrelas da web, como Brad Frost e Luke Wroblewski, possuem vasta experiência neste tema e têm nos ajudado a fazer grandes melhorias. &lt;strong&gt;Mesmo assim, ainda há muito a ser feito&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Neste artigo, vamos ver o que já é possível fazer hoje, o que será possível no futuro &amp;#8211; usando propriedades ainda não padronizadas (como CSS nível 4 e API&amp;#8217;s do HTML5) &amp;#8211; e o que ainda precisa ser melhorado. Este não é um artigo tão completo, por isso não entraremos a fundo em cada técnica, entretanto, você terá links e referências para explorar por conta própria.&lt;/p&gt;

&lt;h2 id=&#34;o-cenário-das-imagens-no-web-design-responsivo&#34;&gt;O Cenário das Imagens no Web Design Responsivo&lt;/h2&gt;

&lt;p&gt;Há um aspecto melhor para começar a falar no web design responsivo que não seja imagens? Este até agora tem sido o tópico principal. E fica cada vez mais importante com a chegada das telas de alta densidade. E quando digo alta densidade, quero dizer telas com uma proporção de pixel maior que 2; esses dispositivos são chamados pela Apple de tela retina, e pelo Google de XHDPI. No web design responsivo, as imagens vem relacionadas a dois grandes desafios: tamanho e desempenho.&lt;/p&gt;

&lt;p&gt;A maioria dos designers buscam a perfeição no pixel, porém imagens de tamanho &amp;#8220;normal&amp;#8221; em dispositivos de alta densidade aparecem pixeladas e borradas. Servir imagens com o dobro do tamanho a esses dispositivos parece ser tentador não é mesmo? No entanto, isso pode criar um problema de performance, pois imagens com o dobro do tamanho levam mais tempo para carregar, e usuários de dispositivos com alta densidade de pixels nem sempre tem a largura de banda necessária para fazer o download dessas imagens. Além disso, dependendo do país em que o usuário vive, esta largura de banda pode ser bem cara.&lt;/p&gt;

&lt;p&gt;O segundo problema afeta dispositivos menores: Por que um dispositivo teria que fazer o download de uma imagem de 700 pixels quando ele só necessita de uma de 300? Teríamos uma maneira de &amp;#8220;cropar&amp;#8221; essas imagens para que usuários de dispositivos menores possam focar no que realmente importa a eles?&lt;/p&gt;

&lt;h3 id=&#34;duas-soluções-de-marcação-o-elemento-picture-e-o-atributo-srcset&#34;&gt;Duas soluções de marcação: O elemento &lt;picture&gt; e o atributo srcset&lt;/h3&gt;

&lt;p&gt;O primeiro passo para resolver o desafio de imagens responsivas é mudar a marcação das imagens embutidas em uma página HTML.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://responsiveimages.org/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Responsive Images Community Group&amp;#8221;&lt;/a&gt; apoia a proposta de um elemento novo e mais flexível, o elemento &lt;a href=&#34;http://picture.responsiveimages.org/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;picture&lt;/em&gt;&lt;/a&gt;. O conceito é usar as já tão conhecidas media queries para &lt;strong&gt;servir imagens diferentes a diferentes dispositivos&lt;/strong&gt;. Assim, dispositivos menores receberiam imagens menores. Funciona um pouco como a marcação para vídeo, mas com imagens diferentes sendo refenciadas no elemento de origem.&lt;/p&gt;

&lt;p&gt;O código na especificação proposta fica da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture width=&#34;500&#34;  height=&#34;500&#34;&amp;gt;     
  &amp;lt;source  media=&#34;(min-width: 45em)&#34; src=&#34;large.jpg&#34;&amp;gt;
  &amp;lt;source  media=&#34;(min-width: 18em)&#34; src=&#34;med.jpg&#34;&amp;gt;
  &amp;lt;source  src=&#34;small.jpg&#34;&amp;gt;
  &amp;lt;img  src=&#34;small.jpg&#34; alt=&#34;&#34;&amp;gt;
  &amp;lt;p&amp;gt;Accessible  text&amp;lt;/p&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Se oferecer fontes diferentes para imagens é possível, poderíamos também imaginar o fornecimento de imagens com &lt;strong&gt;recortes diferentes&lt;/strong&gt; e focar naquilo que realmente importa aos dispositivos menores. O tópico &lt;a href=&#34;http://usecases.responsiveimages.org/#art-direction&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Art Direction&amp;#8221;&lt;/a&gt; da W3C mostra um belo exemplo do que poderia ser feito.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110231.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110231.jpg?itok=65RrJGnF&#34; width=&#34;433&#34; height=&#34;475&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Imagem: &lt;a href=&#34;http://www.flickr.com/photos/egorick/3754608666/&#34; target=&#34;_blank&#34;&gt;Egor Pasko&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A solução vem sendo discutida pelo &lt;a href=&#34;http://www.w3.org/community/respimg/&#34; target=&#34;_blank&#34;&gt;W3C Responsive Images Community Group&lt;/a&gt; mas, até onde sabemos, ainda não é utilizável por nenhum browser. Um polyfill chamado &lt;a href=&#34;https://github.com/scottjehl/picturefill&#34; target=&#34;_blank&#34;&gt;Picturefill&lt;/a&gt; está disponível, e faz praticamente a mesma coisa. Utiliza uma div e um atributo na sintaxe por questões de segurança.&lt;/p&gt;

&lt;p&gt;A segunda proposta para a marcação de imagens responsivas foi feita pela Apple para a W3C e é chamada de &amp;#8220;atributo srcset&amp;#8221;; Ela é equivalente ao image-set() (propriedade CSS nível 4). A proposta deste atributo é forçar os navegadores a selecionar um recurso apropriado do set, ao invés de baixar o conjunto.&lt;/p&gt;

&lt;p&gt;A sintaxe HTML para esta proposta se baseia na própria tag &lt;em&gt;img&lt;/em&gt;, e o exemplo na especificação fica desta forma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img  alt=&#34;The Breakfast Combo&#34; 
  src=&#34;banner.jpeg&#34;
  srcset=&#34;banner-HD.jpeg  2x, banner-phone.jpeg 100w, banner-phone-HD.jpeg 100w 2x&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Como você pode ver a &lt;strong&gt;sintaxe não é não é tão intuitiva&lt;/strong&gt;. Os valores da tag consistem em uma string separada por vírgulas. Os valores do atributo são os nomes ou URL&amp;#8217;s de várias imagens, a densidade de pixels do dispositivo e o tamanho máximo da viewport a que se destina.&lt;/p&gt;

&lt;p&gt;Numa linguagem clara, o que o trecho acima diz é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A imagem padrão é &lt;em&gt;banner.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;O dispositivo que tiver um pixel ratio maior do que 2 deve usar o &lt;em&gt;banner-HD.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Dispositivos com um tamanho máximo da viewport de &lt;em&gt;100w&lt;/em&gt; deve utilizar o &lt;em&gt;banner-phone.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Dispositivos com um tamanho máximo da viewport de &lt;em&gt;100w&lt;/em&gt; e um pixel ratio maior que 2 devem utilizar o &lt;em&gt;banner-phone-HD.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caso o atributo &lt;em&gt;srcset&lt;/em&gt; não seja suportado, a primeira fonte é a imagem padrão. O sufixo &lt;em&gt;2x&lt;/em&gt; para o &lt;em&gt;banner-HD.jpeg&lt;/em&gt; significa que esta imagem em particular deveria ser usada para dispositivos com um pixel ratio maior que 2, e o &lt;em&gt;100w&lt;/em&gt; no &lt;em&gt;banner-phone.jpeg&lt;/em&gt; representa o tamanho mínimo da viewport em que esta imagem deve ser utilizada. &lt;strong&gt;Devido a sua complexidade&lt;/strong&gt;, a sintaxe do atributo srcset ainda não foi implementada nos navegadores.&lt;/p&gt;

&lt;p&gt;A sintaxe da propriedade CSS &lt;em&gt;image-set()&lt;/em&gt; funciona praticamente da mesma forma e permite que você carregue uma determinada imagem de background tendo como base a resolução da tela:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: image-set(  &#34;foo.png&#34; 1x,
  &#34;foo-2x.png&#34;  2x,
  &#34;foo-print.png&#34;  600dpi );
&lt;/pre&gt;

&lt;p&gt;Esta proposta ainda esta em fase de projeto na W3C, e por enquanto funciona no Safari (6+) e no Chrome (21+).&lt;/p&gt;

&lt;h3 id=&#34;formatos-de-imagem-compressão-e-svg-a-mudança-de-como-trabalhamos-com-imagens-na-web&#34;&gt;Formatos de Imagem, Compressão e SVG: A mudança de como trabalhamos com imagens na web.&lt;/h3&gt;

&lt;p&gt;Como podem ver, as tentativas em encontrar um novo formato de marcação para imagens ainda são altamente experiementais.Isto por si só levantou uma questão sobre formatos de imagens. Podemos conceber uma solução responsiva para mudar a forma como lidamos com eles?&lt;/p&gt;

&lt;p&gt;O primeiro passo seria buscar formatos alternativos de imagens que tenham uma melhor taxa de compressão. O Google, por exemplo, desenvolveu um &lt;strong&gt;novo formato de imagem&lt;/strong&gt; chamado &lt;a href=&#34;https://developers.google.com/speed/webp/&#34; target=&#34;_blank&#34;&gt;WebP&lt;/a&gt;, o qual é 26% menor que o PNG e 25 a 34% menor que o JPEG. O formato é suportado pelo Chrome, Opera, Yandex, Android e Safari, e pode ser ativado no Internet Explorer usando o &lt;a href=&#34;http://www.google.com/chromeframe?quickenable=true&#34; target=&#34;_blank&#34;&gt;Google Chrome Frameplugin&lt;/a&gt;. O problema principal deste formato é que o firefox não tem planos de implementá-lo. Sabendo disto, por enquanto, o seu uso generalizado é improvável.&lt;/p&gt;

&lt;p&gt;Outra ideia que está ganhando popularidade são as &lt;strong&gt;imagens JPEG progressivas&lt;/strong&gt;. Estas imagens são, como o nome sugere, progressivamente renderizadas. A primeira renderização é embaçada, então a imagem vai progressivamente ganhando nitidez. Já as imagens JPEG não-progressivas são renderizadas de cima pra baixo. Em seu artigo &lt;a href=&#34;http://calendar.perfplanet.com/2012/progressive-jpegs-a-new-best-practice/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;JPEG&amp;#8217;s progressivos: Uma nova boa prática&amp;#8221;&lt;/a&gt;, Ann Robson afirma que o JPEG progressivo aparenta ser mais veloz que o JPEG baseline. Um JPEG progressivo dá ao usuário uma impressão geral sobre a imagem antes mesmo de ela ser totalmente carregada, o que beneficia a experiência do usuário.&lt;/p&gt;

&lt;p&gt;Uma outra solução aos problemas de performance e tamanho de imagem está em &lt;strong&gt;alterar a taxa de compressão das imagens&lt;/strong&gt;. Durante muito tempo, pensamos que o alargamento da taxa de compressão de uma imagem prejudicaria a sua qualidade. Entretanto, Daan Jobsis fez uma extensa pesquisa sobre o assunto e escreveu um artigo a respeito chamado &lt;a href=&#34;http://blog.netvlies.nl/design-interactie/retina-revolution/&#34;&gt;&amp;#8220;Retina Revolution&amp;#8221;&lt;/a&gt;. Em seus experimentos, ele testou diferentes tamanhos de imagens e taxas de compressão, o que gerou uma solução muito interessante. Se você dobrar o tamanho de uma imagem, mas também usar uma taxa de compressão mais alta, a imagem terá um arquivo com um tamanho menor que o original, mas ainda serão nítidas em telas normais e de alta densidade. Com esta técnica, Jobsis reduziu em 75% o peso da imagem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110629.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Demonstração de compressão de imagens por Daan Jobsis.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110629.jpg?itok=DCu9elrj&#34; width=&#34;473&#34; height=&#34;242&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dadas as dores de cabeça das imagens responsivas, a ideia de ganhar a independência do pixel a partir de imagens, sempre que possível, está seduzindo cada vez mais designers e desenvolvedores. O formato SVG, por exemplo, pode ser usado para criar todos os elementos da interface de um website &lt;a style=&#34;line-height: 1.538em&#34; href=&#34;http://coding.smashingmagazine.com/2012/01/16/resolution-independence-with-svg/&#34; target=&#34;_blank&#34;&gt;independente da resolução&lt;/a&gt;. Os elementos serão dimensionados para dispositivos menores e não ficarão pixelados nos dispositivos de alta densidade de pixels. &lt;a style=&#34;line-height: 1.538em&#34; href=&#34;http://css-tricks.com/using-fonts-for-icons/&#34; target=&#34;_blank&#34;&gt;Font icons&lt;/a&gt; são outra tendência crescente. Eles envolvem o uso de uma fonte, onde os caracteres alfanuméricos são substituídos por ícones glifos, dando a flexibilidade que uma fonte oferece. Infelizmente, esta solução ainda não funciona com imagens, o que faz com que seja ansiosamente esperado uma marcação ou formato de imagem viável.&lt;/p&gt;

&lt;h2 id=&#34;o-desafio-do-layout-responsivo-reorganizar-e-trabalhar-o-conteúdo-sem-tocar-no-html&#34;&gt;O Desafio do Layout Responsivo: Reorganizar e Trabalhar o Conteúdo sem Tocar no HTML?&lt;/h2&gt;

&lt;p&gt;Sejamos realistas, os grids fluidos usados atualmente, produzidos com floats e blocos inline, são um pobre improviso aguardando uma solução melhor. Trabalhar com o layout e rearranjar blocos numa página mobile sem recorrer ao JavaScript hoje em dia é um pesadelo, e não é nem um pouco flexível. Isto é algo crucial a websites criados com CMS, onde o designer não pode alterar o HTML de cada página ou versão do site.&lt;/p&gt;

&lt;p&gt;E aí, como isto pode ser melhorado?&lt;/p&gt;

&lt;h3 id=&#34;quatro-soluções-com-css3-que-abordam-o-problema-do-layout-flexível&#34;&gt;Quatro Soluções com CSS3 que abordam o problema do Layout Flexível&lt;/h3&gt;

&lt;p&gt;A solução mais óbvia possível é o &lt;a href=&#34;http://www.w3.org/TR/css3-flexbox/&#34; target=&#34;_blank&#34;&gt;modelo de box flexível do CSS3&lt;/a&gt; (ou &lt;strong&gt;flexbox&lt;/strong&gt;). Seu status atual é a de &amp;#8220;candidato a recomendação&amp;#8221; na W3C, e é suportado pela &lt;a href=&#34;http://caniuse.com/#feat=flexbox&#34; target=&#34;_blank&#34;&gt;maioria dos browsers mobile e desktop&lt;/a&gt; (no IE começou na versão 10). O model permite reorganizar facilmente os elementos na tela, independente do HTML. Você também pode alterar o fluxo e a orientação do box, distribuir o espaço e alinhá-lo de acordo com o contexto. Abaixo um exemplo de layout que poderia ser reorganizado para mobile. A sintaxe ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.parent {
   display: flex;
   flex-flow: column; /* exibe itens na coluna */
}

.children {
   order: 1; /* muda a ordem dos elementos */
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110724.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110724.jpg?itok=jmzs81k7&#34; width=&#34;479&#34; height=&#34;297&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O artigo &lt;a href=&#34;http://coding.smashingmagazine.com/2011/09/19/css3-flexible-box-layout-explained/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;CSS3 Flexible Box Layout Explained&amp;#8221;&lt;/a&gt; dará a você uma compreensão mais profunda de como o flexbox funciona. (nota do tradutor: o bbburp traduziu um &lt;a href=&#34;http://www.bbburp.com.br/artigos/layout-com-flexbox-e-como-tirar-doce-de-crianca&#34; target=&#34;_blank&#34;&gt;excelente artigo sobre flexbox&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Outra solução bastante próxima do conceito flexbox de reordenação de blocos na página, porém com JavaScript, é o &lt;a href=&#34;https://github.com/edenspiekermann/minwidth-relocate&#34; target=&#34;_blank&#34;&gt;Relocate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um segundo tipo de layout, que hoje em dia é bastante utilizado no design responsivo, é o &lt;strong&gt;layout multiple-column do CSS3&lt;/strong&gt;. O módulo está no estágio de &amp;#8220;candidato a recomendação&amp;#8221; na W3C, e &lt;a href=&#34;http://www.w3.org/TR/css3-multicol/&#34; target=&#34;_blank&#34;&gt;funciona muito bem na maioria dos browsers&lt;/a&gt; (aguardado para IE9 e abaixo). A principal vantagem deste model é que o conteúdo pode fluir de uma coluna a outra, proporcionando um ganho enorme na flexibilidade. No que diz respeito a responsividade, o número de colunas pode ser alterado de acordo com o tamanho da viewport.&lt;/p&gt;

&lt;p&gt;É possível apenas ajustar o tamanho das colunas e deixar com que o browser calcule o seu número de acordo com o espaço disponível. Também é possível ajustar o número de colunas, com gaps e regras entre elas, e deixar que o browser calcule a sua largura.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110803.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110803.jpg?itok=1MS5s-6X&#34; width=&#34;477&#34; height=&#34;297&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A sintaxe se parece com isto:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container {
   column-width: 10em ;
   /* O browser vai criar uma coluna de 10em.
   O número de colunas vai depender dos espaço disponível */
}

.container {
   columns: 5;
   /* O browser vai criar 5 colunas.
   O tamanho das colunas vai depender do espaço disponível. */
   column-gap: 2em;
}
&lt;/pre&gt;

&lt;p&gt;Para aprender mais, leia o artigo de David Walsh: &lt;a href=&#34;http://davidwalsh.name/css-columns&#34; target=&#34;_blank&#34;&gt;“CSS Columns”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Uma terceira propriedade CSS3 que pode ganhar mais atenção no futuro é a &lt;a href=&#34;http://dev.w3.org/csswg/css-grid/&#34; target=&#34;_blank&#34;&gt;CSS3 grid layout&lt;/a&gt;. Esta propriedade dá a designers e desenvolvedores um &lt;strong&gt;grid flexível&lt;/strong&gt;, onde eles podem trabalhar com na criação de layouts diferentes. Ela permite que os elementos de conteúdo sejam exibidos nas linhas e colunas sem uma estrutura definida. Primeiro você deve declarar um grid no container, e então colocar todos os elementos filhos neste grid virtual. Você pode, então, definir um grid diferente para dispositivos menores ou alterar a posição dos elementos no grid. Isto gera uma enorme flexibilidade quando usado com media queries, em mudanças de orientação, etc.&lt;/p&gt;

&lt;p&gt;A sintaxe para esta propriedade é assim (projeto de trabalho no W3C &amp;#8211; working draft &amp;#8211; a partir de 2 de abril de 2013):&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.parent {
   display: grid; /* declare o grid */
   grid-definition-columns: 1stgridsize  2ndgridsize …;
   grid-definition-rows: 1strowsize  2ndrowsize …;
}

.element {
   grid-column: 1;
   grid-row: 1;
}

.element2 {
   grid-column: 1; 
   grid-row: 3;
}
&lt;/pre&gt;

&lt;p&gt;Para definir o tamanho das linhas e colunas você pode usar diversas unidades, conforme &lt;a href=&#34;http://www.w3.org/TR/css3-grid-layout/#grid-definition-columns&#34;&gt;detalhado na especificação&lt;/a&gt;. Para posicionar os elementos, a especificação diz o seguinte: &amp;#8220;Cada parte está posicionada entre as linhas do grid, fazendo referência a linha de grid inicial e então especificando, se houver mais de uma, o número de linhas ou colunas distribuídas para determinar a linha de grid final, delimitando a área do layout&amp;#8221;.&lt;/p&gt;

&lt;p&gt;O maior problema com esta propriedade é que é &lt;a href=&#34;http://caniuse.com/#feat=css-grid&#34; target=&#34;_blank&#34;&gt;suportada apenas pelo IE10&lt;/a&gt;. Para aprender mais sobre este layout, leia o artigo &amp;#8220;&lt;a href=&#34;http://24ways.org/2012/css3-grid-layout/&#34; target=&#34;_blank&#34;&gt;Giving Content Priority With CSS3 Grid Layout&lt;/a&gt;&amp;#8221; de Rachel Andrew. Além disso, note que a especificação e a sintaxe para grid layouts com CSS foi alterada no dia 2 de abril de 2013. Andrew escreveu uma atualização sobre a sintaxe, a qual foi intitulada de &lt;a href=&#34;http://www.rachelandrew.co.uk/archives/2013/04/10/css-grid-layout---what-has-changed/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;CSS Grid Layout: What Has Changed?&amp;#8221;&lt;/a&gt; (CSS Grid Layout: O que mudou?).&lt;/p&gt;

&lt;p&gt;O último layout, que pode tornar-se bastante útil no futuro se implementado nos browsers, é o &lt;a href=&#34;http://www.w3.org/TR/2009/WD-css3-layout-20090402/&#34; target=&#34;_blank&#34;&gt;CSS3 template layout&lt;/a&gt;. Este módulo CSS3 funciona associando um elemento ao &amp;#8220;nome&amp;#8221; do layout, e em seguida ordenando os elementos num grid invisível. O grid pode ser fixo ou flexível, e pode ser alterado de acordo com o tamanho da viewport.&lt;/p&gt;

&lt;p&gt;A sintaxe fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.parent {
   display: &#34;ab&#34;
            &#34;cd&#34;; /* criando um grid invisível */
}

.child1 {
   position: a;
}

.child2 {
   position: b;
}

.child3 {
   position: c;
}

.child4 {
   position: d;
}
&lt;/pre&gt;

&lt;p&gt;E é renderizado assim:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110848.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110848.jpg?itok=y7SmFn5a&#34; width=&#34;477&#34; height=&#34;297&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Infelizmente, o suporte a navegadores para este módulo é praticamente nulo. Talvez algum dia, se designers e desenvolvedores mostrarem interesse suficiente nesta especificação, algum fabricante de browser possa implementá-lo. Por enquanto, você pode testá-lo usando &lt;a href=&#34;https://code.google.com/p/css-template-layout/&#34; target=&#34;_blank&#34;&gt;um polyfill&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;unidades-relativas-da-viewport-e-o-fim-do-layout-baseado-em-pixels&#34;&gt;Unidades Relativas da Viewport e o fim do Layout baseado em pixels&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/css3-values/#viewport-relative-lengths&#34; target=&#34;_blank&#34;&gt;Medidas de comprimento baseadas na viewport&lt;/a&gt; &amp;#8211; &lt;em&gt;vw&lt;/em&gt;, &lt;em&gt;vh&lt;/em&gt;, &lt;em&gt;vm&lt;/em&gt;, &lt;em&gt;vmin&lt;/em&gt; e &lt;em&gt;vmax&lt;/em&gt; &amp;#8211; são unidades de medida relativa das dimensões da própria viewport.&lt;/p&gt;

&lt;p&gt;Uma unidade vw é igual a 1% da largura do bloco inicial que a contém. Se a largura da viewport é 320, então 1&lt;em&gt;vw&lt;/em&gt; é 1 x &lt;sup&gt;320&lt;/sup&gt;&amp;frasl;&lt;sub&gt;100&lt;/sub&gt; = 3.2 pixels.&lt;/p&gt;

&lt;p&gt;A unidade vh funciona da mesma maneira, mas é relativa a altura da viewport. Desta forma, 50 &lt;em&gt;vh&lt;/em&gt; equivale a 50% da altura do documento. A esta altura você pode se perguntar qual a diferença desta unidade para a percentual. A diferença é que enquanto a unidade percentual é relativa ao tamanho do elemento pai, as unidades &lt;em&gt;vh&lt;/em&gt; e &lt;em&gt;vw&lt;/em&gt; serão sempre relativas ao tamanho da viewport, independente do tamanho dos seus elementos-pai.&lt;/p&gt;

&lt;p&gt;Isso fica bem interessante quando você quer, por exemplo, criar um container e ter a certeza de que ele nunca se extenderá abaixo da altura do viewport para que o usuário não precise rolar a página para baixo para achar o conteúdo.  Também possibilita que criemos um elemento com 100% da altura sem alterar todos os containers pai.&lt;/p&gt;

&lt;p&gt;A unidade &lt;em&gt;vmin&lt;/em&gt; é igualada ao menor valor da unidade &lt;em&gt;vm&lt;/em&gt; ou &lt;em&gt;vh&lt;/em&gt;, e &lt;em&gt;vmax&lt;/em&gt; ao maior valor; por isso, essas unidades também respondem perfeitamente às alterações na orientação dos dispositivos. Infelizmente, por enquanto, &lt;a href=&#34;http://caniuse.com/#feat=viewport-units&#34; target=&#34;_blank&#34;&gt;essas unidades não são suportadas pelo browser do Android&lt;/a&gt;. Sendo assim, pode ser que você ainda tenha que aguardar um tempo para utilizá-las.&lt;/p&gt;

&lt;h3 id=&#34;uma-palavra-sobre-tipografia-adaptável-adaptive-typography&#34;&gt;Uma Palavra sobre Tipografia Adaptável (Adaptive Typography)&lt;/h3&gt;

&lt;p&gt;O layout de um site vai depender muito do conteúdo. Não posso concluir uma seção que fala sobre as diversas possibilidades do layout responsivo sem abordar a tipografia. O CSS3 introduziu uma unidade para fontes que pode ser bastante útil a tipografia responsiva: &lt;a href=&#34;http://www.w3.org/TR/css3-values/#font-relative-lengths&#34; target=&#34;_blank&#34;&gt;a unidade “&lt;em&gt;rem&lt;/em&gt;”&lt;/a&gt;. Enquanto as fontes medidas pela unidade “_em_” apresentam um tamanho herdado do seu elemento pai, a fonte medida pela unidade “rem” é relativa ao tamanho da fonte do seu elemento root (ou raiz). Para um site responsivo, você poderia escrever o CSS como o código abaixo, e em seguida alterar o tamanho de todas as fontes simplesmente mudando o tamanho da fonte especificada no elemento &lt;em&gt;html&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;html {
   font-size: 14px;
}

p {
   font-size: 1rem /* isto tem 14px */
}

@media screen and (max-width:380px) {
   html {
      font-size: 12px;
      /* tornando a fonte menor para dispositivos mobile */
   }

   p {
      font-size: 1rem;
      /* isto agora equivale a 12px */
   }
}
&lt;/pre&gt;

&lt;p&gt;Com exceção do IE8 e do Opera mini, o &lt;a href=&#34;http://caniuse.com/#search=rem&#34; target=&#34;_blank&#34;&gt;suporte ao &amp;#8220;&lt;em&gt;rem&lt;/em&gt;&amp;#8220;&lt;/a&gt; é excelente. Para aprender mais sobre a unidade &lt;em&gt;rem&lt;/em&gt;, leia o artigo de Matthew Lettini &lt;a href=&#34;http://techtime.getharvest.com/blog/in-defense-of-rem-units&#34;&gt;&amp;#8220;In Defense of Rem Units&amp;#8221;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-melhor-maneira-de-trabalhar-responsivamente-com-outros-conteúdos-complexos&#34;&gt;A Melhor Maneira de Trabalhar Responsivamente com Outros Conteúdos Complexos&lt;/h2&gt;

&lt;p&gt;Aos poucos vamos ficando cada vez melhor em lidar com imagens e textos em layouts responsivos, embora ainda seja necessário encontrar soluções para outros tipos mais complexos de conteúdo&lt;/p&gt;

&lt;h3 id=&#34;lidando-com-formulários-no-website-responsivo&#34;&gt;Lidando com Formulários no Website Responsivo&lt;/h3&gt;

&lt;p&gt;De um modo geral, lidar com formulários, especialmente os muito grandes, no web design responsivo é um enorme desafio! Quanto maior o formulário, mais complicado será adaptá-lo a dispositivos menores. A adaptação física não é tão difícil; a maioria dos designers simplesmente colocam os elementos do formulário numa única coluna e esticam os inputs completando a largura da tela. Entretanto, fazer formulários visualmente atraentes não é o bastante. Temos que torná-los fáceis de usar também nos dispositivos mobile.&lt;/p&gt;

&lt;p&gt;Para começar, &lt;a href=&#34;http://uxdesign.smashingmagazine.com/2010/03/11/forms-on-mobile-devices-modern-solutions/&#34; target=&#34;_blank&#34;&gt;Luke Wroblewski aconselha&lt;/a&gt; evitar inputs de texto, &lt;strong&gt;contando com checkboxes, radio buttons e menus drop-downs&lt;/strong&gt;, e utilizando o select sempre que possível. Desta forma, o usuário precisa digitar o mínimo de informação. Outra dica é não fazer com que o usuário aperte o botão &amp;#8220;enviar&amp;#8221; antes de obter um feedback sobre o conteúdo a ser submetido. A checagem de erros imediata é extremamente importante no mobile, onde a maioria dos formulários ultrapassa a altura da tela. Se o usuário digitar um campo incorretamente e tiver que enviar o formulário para só assim perceber o erro, provavelmente ele não verá onde o erro está.&lt;/p&gt;

&lt;p&gt;No futuro, novos inputs e atributos HTML5 serão de grande ajuda na melhoria dos formulários, e não haverá a necessidade de utilizar tanto JavaScript. Por exemplo, você poderia usar o &lt;a href=&#34;http://www.w3.org/wiki/HTML5_form_additions#required&#34; target=&#34;_blank&#34;&gt;atributo&lt;/a&gt; &lt;em&gt;required&lt;/em&gt; para dar feedback imediato sobre um campo específico. Infelizmente, por enquanto, &lt;a href=&#34;http://caniuse.com/#search=required&#34; target=&#34;_blank&#34;&gt;o suporte para dispositivos mobile&lt;/a&gt; ainda é ruim. O &lt;a href=&#34;http://www.w3.org/TR/2011/WD-html5-20110525/common-input-element-attributes.html#the-autocomplete-attribute&#34; target=&#34;_blank&#34;&gt;atributo&lt;/a&gt; &lt;em&gt;autocomplete&lt;/em&gt; também poderia ajudar a montar formulários mais responsivos.&lt;/p&gt;

&lt;p&gt;Um smartphone é um bem pessoal, por isso podemos assumir que dados como nome e endereço serão algo consistente. Usando o atributo &lt;em&gt;autocomplete&lt;/em&gt; do HTML5 &lt;strong&gt;poderíamos fazer um auto-preenchimento dos campos&lt;/strong&gt; sem que o usuário tivesse que digitar todas as informações. Há ainda uma &lt;a href=&#34;http://www.w3.org/wiki/HTML5_form_additions#New_form_controls&#34; target=&#34;_blank&#34;&gt;lista inteira de novos inputs HTML5&lt;/a&gt; que podem ser utilizados muito em breve, a fim de tornar os formulários mais responsivos.&lt;/p&gt;

&lt;p&gt;Datas em elementos de formulário são um bom exemplo do que se pode melhorar com o HTML5. Já estamos acostumados a contar com JavaScript ao criar calendários. Eles podem ser muito úteis se utilizados em grandes telas desktop, mas difíceis de usar em dispositivos touch screen, pois selecionar a data certa com o dedo é difícil quando a área sensível ao toque é muito pequena.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110938.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Como posso selecionar uma data se meu dedo está tocando três ao mesmo tempo?&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110938.jpg?itok=sakIwk63&#34; width=&#34;478&#34; height=&#34;248&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uma solução promissora está no novo &lt;em&gt;input type=&amp;#8221;date&amp;#8221;&lt;/em&gt; do HTML5 , que define uma string no formato de data. Já o &lt;em&gt;input type=&amp;#8221;datetime&amp;#8221;&lt;/em&gt; define uma string no formato de data e hora. A grande vantagem deste método é que deixamos o browser decidir qual UI utilizar. Desta forma, a UI é automaticamente otimizada em dispositivos mobile. Abaixo um exemplo da aparência de um &lt;em&gt;input type=&amp;#8221;date&amp;#8221;&lt;/em&gt; no desktop, em smartphone e tablet com Android (com o browser Chrome), Iphone e Ipad.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111218.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Renderização do input input type=&amp;quot;date&amp;quot; em diferentes dispositivos.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111218.jpg?itok=dEKeEFpj&#34; width=&#34;402&#34; height=&#34;478&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note que as screenshots foram feitas em meu browser e no Android phone, então a linguagem foi automaticamente adaptada ao sistema de linguagem (Francês). Ao utilizar componentes nativos, você não precisa mais adaptar a lingua para diferentes versões do site.&lt;/p&gt;

&lt;p&gt;Por enquanto, com exceção do Opera e do Chrome, &lt;a href=&#34;http://caniuse.com/input-datetime&#34; target=&#34;_blank&#34;&gt;não há suporte&lt;/a&gt; ao &lt;em&gt;input type=&amp;#8221;date&amp;#8221;&lt;/em&gt; para o desktop. Browsers nativos do Android ainda não o suportam completamente, mas o Chrome Android sim, e também o Safari para iOS. O fato é que ainda há muito a ser trabalhado para sermos capazes de utilizar esta solução em sites responsivos. Enquanto isto, você pode usar um polyfill como o &lt;a href=&#34;http://demo.mobiscroll.com/calendar/calendartime&#34; target=&#34;_blank&#34;&gt;Mobiscroll&lt;/a&gt; para browsers mobile que não suportarem o atributo nativamente.&lt;/p&gt;

&lt;p&gt;Além destas soluções de inputs HTML5, foram feitas tentativas para melhorar outros padrões de design, como as &lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1653&#34; target=&#34;_blank&#34;&gt;senhas do mobile&lt;/a&gt; e &lt;a href=&#34;http://www.lukew.com/ff/entry.asp?756&#34; target=&#34;_blank&#34;&gt;inputs complexos utilizando máscaras&lt;/a&gt;. Como você pode notar, isto tudo é experimental. O formulário responsivo perfeito não existe no momento; Muito ainda deve ser feito neste campo.&lt;/p&gt;

&lt;h3 id=&#34;lidando-com-tabelas-em-sites-responsivos&#34;&gt;Lidando com Tabelas em Sites Responsivos&lt;/h3&gt;

&lt;p&gt;Outro tipo de conteúdo que fica bastante confuso em sites mobile e responsivos são as tabelas. A maioria das tabelas são orientadas horizontalmente e apresentam uma grande quantidade de dados de uma só vez. Imagine então que exibi-las corretamente em small screens seja bem complicado. Tabelas HTML são bastante flexíveis &amp;#8211; você pode usar porcentagens para mudar a largura das colunas &amp;#8211; o que também pode rapidamente tornar o conteúdo ilegível.&lt;/p&gt;

&lt;p&gt;Ainda não encontraram uma forma perfeita de mostrar tabelas, mas algumas sugestões foram feitas:&lt;/p&gt;

&lt;p&gt;Uma forma de abordagem é &lt;strong&gt;esconder colunas consideradas &amp;#8220;menos importantes&amp;#8221;&lt;/strong&gt;, e oferecer checkboxes para que o usuário escolha quais ele deseja ver. No desktop, todas as colunas seriam mostradas, enquanto no mobile o número de colunas dependeria do tamanho da tela. O Filament Group &lt;a href=&#34;http://filamentgroup.com/lab/responsive_design_approach_for_complex_multicolumn_data_tables/&#34; target=&#34;_blank&#34;&gt;explica este método&lt;/a&gt; e &lt;a href=&#34;http://filamentgroup.com/examples/rwd-table-patterns/&#34; target=&#34;_blank&#34;&gt;demonstra&lt;/a&gt; em um de seus artigos. A solução também é usada no &lt;a href=&#34;http://view.jquerymobile.com/tables/docs/tables/table-column-toggle.html&#34; target=&#34;_blank&#34;&gt;table column toggle do jQuery Mobile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111308.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Alguns exemplos de tabelas responsivas.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111308.jpg?itok=buAWCW1w&#34; width=&#34;479&#34; height=&#34;429&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A segunda abordagem brinca com a ideia de &lt;strong&gt;scroll em tabelas&lt;/strong&gt;. Você poderia &amp;#8220;fixar&amp;#8221; uma única coluna com tamanho fixo a esquerda, e então deixar uma scroll bar numa pequena parte da tabela a direita. &lt;a href=&#34;http://dbushell.com/2012/01/05/responsive-tables-2/&#34; target=&#34;_blank&#34;&gt;David Bushell implementa esta ideia&lt;/a&gt; em um artigo usando CSS para exibir todo o conteúdo da _&lt;/p&gt;

&lt;p&gt;_&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;__ do lado esquerdo da tabela, deixando o usuário mover-se pelo conteúdo a direita através da scroll bar. &lt;strong&gt;Zurb&lt;/strong&gt; utiliza a mesma ideia, mas de um jeito diferente, &lt;a href=&#34;http://zurb.com/playground/responsive-tables&#34; target=&#34;_blank&#34;&gt;neste plug in&lt;/a&gt;. Neste caso, as headers ficam no topo da tabela, e a tabela é duplicada com JavaScript de modo que apenas a primeira coluna seja mostrada a esquerda, e as demais colunas sejam mostradas do lado direito através da scroll bar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111348.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Dois exemplos de tabelas responsivas com scroll&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111348.jpg?itok=2bOK8ygE&#34; width=&#34;477&#34; height=&#34;455&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A grande questão em utilizar scroll bars e propriedades CSS tais como &lt;em&gt;overflow: auto&lt;/em&gt; é que muitos dispositivos mobile e tablets simplesmente não exibem uma scroll bar visível. A área da direita da tabela permite a rolagem, mas o usuário não terá qualquer indício visual desta possibilidade. Precisamos encontrar uma maneira de indicar que há mais conteúdo a ser exibido à direita.&lt;/p&gt;

&lt;p&gt;Uma terceira abordagem é em &lt;strong&gt;reestruturar a tabela e dividir as colunas&lt;/strong&gt; em listas de itens com cabeçalhos.Esta técnica é utilizada no &lt;a href=&#34;http://view.jquerymobile.com/tables/docs/tables/table-reflow.html&#34; target=&#34;_blank&#34;&gt;&amp;#8220;reflow mode&amp;#8221;&lt;/a&gt; no jQuery Mobile e foi explicada por Chris Coyier em seu artigo &lt;a href=&#34;http://css-tricks.com/responsive-data-tables/&#34;&gt;“Responsive Data Tables”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111441.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Reestruturando uma tabela para dispositivos móveis&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111441.jpg?itok=nOmy8Tpm&#34; width=&#34;478&#34; height=&#34;438&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Existem &lt;a href=&#34;http://css-tricks.com/responsive-data-table-roundup/&#34; target=&#34;_blank&#34;&gt;diversas outras técnicas&lt;/a&gt;, e qual usar depende muito do seu projeto. Não há dois projetos iguais, por isso só posso mostrar como outras pessoas estão lidando com isto. Se você chegar a uma boa solução, por favor compartilhe nos comentários, no Twitter ou em qualquer outro lugar. Estamos no mesmo barco, e exibir tabelas no mobile está uma droga (é sério). Então vamos melhorá-las juntos!&lt;/p&gt;

&lt;h2 id=&#34;incorporando-conteúdo-de-terceiros-o-problema-do-iframe-responsivo&#34;&gt;Incorporando Conteúdo de Terceiros: O problema do Iframe Responsivo&lt;/h2&gt;

&lt;p&gt;Muitos desses conteúdos, ao serem incorporados, fazem você utilizar iframes. Mas vamos encarar: lidar com iframes no design responsivo é doloroso. O  grande problema é que iframes exigem largura e altura fixa diretamente no seu código HTML. Forçar uma largura de 100% no iframe deveria resolver, mas daí você perderia a proporção do conteúdo incorporado. Então, para incorporar um vídeo ou slideshow e preservar a proporção original, seria necessário encontrar uma solução alternativa.&lt;/p&gt;

&lt;h3 id=&#34;uma-solução-com-html-e-css&#34;&gt;Uma solução com HTML e CSS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tjkdesign.com/&#34; target=&#34;_blank&#34;&gt;Thierry Koblentz&lt;/a&gt; escreveu um ótimo artigo chamado &lt;a href=&#34;http://alistapart.com/article/creating-intrinsic-ratios-for-video&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Creating Intrinsic Ratios for Vídeo&amp;#8221;&lt;/a&gt; (criando proporções intrínsecas para vídeos), onde ele propõe uma forma de incorporar vídeos responsivos usando uma proporção 16:9. Esta solução pode ser estendida a outros tipos de conteúdos, como apresentações em SlideShare e Google Maps. Koblentz envolve o iframe num container usando uma classe a qual podemos manipular no CSS. O container torna possível o iframe ser redimensionado fluidamente, mesmo tendo um valor fixo de pixels no HTML. O &lt;a href=&#34;http://amobil.se/2011/11/responsive-embeds/&#34; target=&#34;_blank&#34;&gt;código, adaptado por Anders M. Andersen&lt;/a&gt;, fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.embed-container  {
   position: relative;
   padding-bottom: 56.25%; /* 16:9 ratio */
   padding-top: 30px; /* solução para IE 6 */
   height: 0;
   overflow: hidden;
}

.embed-container iframe,
.embed-container object,
.embed-container embed {
   position: absolute;
   top: 0;
   left: 0;
   width: 100%;
   height: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Isto vai funcionar em todos os iframes. O único problema é que você terá que envolver todos os iframes de seu site em um elemento. Enquanto esta técnica funcionaria muito bem para desenvolvedores que tivessem controle total de seu código, ou para clientes que estivessem razoavelmente familiarizados com HTML, não funcionaria com clientes que não tivessem qualquer habilidade técnica. Você poderia, é claro, usar JavaScript para detectar os elementos iframe e automaticamente incorporá-los na classe, mas como podemos ver, seria uma grande solução, mas não a solução perfeita.&lt;/p&gt;

&lt;h2 id=&#34;lidando-com-vídeos-responsivos-no-futuro&#34;&gt;Lidando com Vídeos Responsivos no Futuro&lt;/h2&gt;

&lt;p&gt;O HTML5 abre um mundo de possibilidades para o vídeo &amp;#8211; particularmente com o &lt;a href=&#34;http://www.w3.org/wiki/HTML/Elements/video&#34;&gt;elemento video&lt;/a&gt;. A grande notícia é que o &lt;a href=&#34;http://caniuse.com/#feat=video&#34; target=&#34;_blank&#34;&gt;suporte a este elemento é surpreendentemente bom em dispositivos mobile&lt;/a&gt;! Com exceção do Opera Mini, a maioria dos browsers o suportam. O elemento video também é bastante flexível, e apresentar um vídeo responsivo é tão simples quanto isto:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;video {
   max-width: 100%;
   height: auto;
}
&lt;/pre&gt;

&lt;p&gt;Você provavelmente está se perguntando, &amp;#8220;Então, qual o problema?&amp;#8221;&lt;/p&gt;

&lt;p&gt;O problema é que, embora YouTube e Vimeo suportem o elemento video, você ainda precisa incorporar vídeos usando o tal método do iframe. E isso meu amigo, é uma droga. Sendo assim, até que YouTube e Vimeo ofereçam um meio de incorporar vídeos em sites utilizando a tag video do HTML5, &lt;strong&gt;teremos que descobrir soluções&lt;/strong&gt; para que incorporações de vídeo trabalhem adequadamente em sites responsivos. Pensando nisto, Chris Coyier criou uma solução com um plugin jQuery chamado &lt;a href=&#34;http://fitvidsjs.com/&#34; target=&#34;_blank&#34;&gt;FitVids.js&lt;/a&gt;. Ele usa a primeira técnica mencionada acima: cria um container em torno do iframe e preserva a sua proporção.&lt;/p&gt;

&lt;h3 id=&#34;incorporando-google-maps&#34;&gt;Incorporando Google Maps&lt;/h3&gt;

&lt;p&gt;Se você incorporou um Google Map em seu site, a técnica descrita acima com container e CSS funcionará. Mas, de novo, é um hackzinho sujo. Além disso, o mapa vai redimensionar proporcionalmente e pode ficar tão pequeno, que poderá perder a área de foco que você quer mostrar ao usuário. A &lt;a href=&#34;https://developers.google.com/maps/&#34; target=&#34;_blank&#34;&gt;página do Google Maps para mobile&lt;/a&gt; diz que você pode utilizar uma &lt;a href=&#34;https://developers.google.com/maps/documentation/staticmaps/&#34; target=&#34;_blank&#34;&gt;API de mapas estáticos&lt;/a&gt; para incorporações mobile. Usar um mapa estático de fato eliminaria os problemas com iframe. Brad Frost escreveu um belo artigo a respeito, e criou uma demo de &lt;a href=&#34;http://bradfrostweb.com/blog/post/adaptive-maps/&#34; target=&#34;_blank&#34;&gt;mapas adaptáveis (adaptive maps)&lt;/a&gt; onde utiliza a mesma técnica. Um JavaScript detecta o tamanho da tela, em seguida o iframe é substituído pelo mapa estático em celulares. Como podemos ver, temos novamente que recorrer a técnicas que lidem com problemas de iframe, devido a ausência de uma solução nativa (ou seja, do Google).&lt;/p&gt;

&lt;h3 id=&#34;precisamos-de-apis-melhores&#34;&gt;Precisamos de APIS Melhores&lt;/h3&gt;

&lt;p&gt;Agora a grande pergunta: Há um jeito melhor? O maior problema em usar iframes para incorporar o conteúdo de terceiros responsivamente é a falta de controle sobre o código gerado. &lt;strong&gt;Desenvolvedores e designers são muito dependentes&lt;/strong&gt; de conteúdo de terceiros e, por extensão, o seu HTML gerado. E o número de sites que oferecem conteúdo de outros sites cresce rapidamente. Precisamos de soluções muito melhores do que iframes para incorporar este conteúdo.&lt;/p&gt;

&lt;p&gt;Agora, fale a verdade: incorporar iframes do Facebook é um verdadeiro sofrimento. A falta de controle sobre o CSS pode fazer nosso trabalho parecer bem desleixado e algumas vezes arruinar o design. A web é um lugar aberto, por isso talvez fosse um bom momento em começar a pensar em mais API&amp;#8217;s abertas! No futuro, vamos precisar de API&amp;#8217;s que sejam melhores e mais simples de utilizar, de modo que qualquer pessoa possa incorporar um conteúdo de maneira flexível, sem ter que contar com iframes fixos não responsivos. No entanto, até que decidam criar essas API&amp;#8217;s, estamos presos a iframes medíocres, tendo que recorrer a truques para torná-los viáveis.&lt;/p&gt;

&lt;h2 id=&#34;navegação-responsiva-um-panorama-pelas-soluções-atuais&#34;&gt;Navegação Responsiva: Um Panorama pelas Soluções Atuais&lt;/h2&gt;

&lt;p&gt;Outro grande desafio é o que fazer com a navegação. Quanto mais complexa e profunda a arquitetura de um website, mais inventivos precisamos ser.&lt;/p&gt;

&lt;p&gt;(Nota do tradutor: publiquei aqui no Tableless uma tradução sobre &lt;a href=&#34;http://tableless.com.br/padroes-complexos-de-navegacao-no-design-responsivo&#34;&gt;padrões complexos de navegação no web design responsivo&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Uma das primeiras tentativas de lidar com isto de maneira simples foi &lt;a href=&#34;http://css-tricks.com/convert-menu-to-dropdown/&#34; target=&#34;_blank&#34;&gt;converter a navegação em um menu dropdown&lt;/a&gt; para telas pequenas. Infelizmente, esta forma não é a ideal. Primeiro porque esta solução fica terrivelmente complicada numa navegação multi-level, podendo também causar problemas de acessibilidade. Eu recomendo o artigo &lt;a href=&#34;http://uxmovement.com/forms/stop-misusing-select-menus/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Stop Misusing Select Menus&amp;#8221;&lt;/a&gt; para entender todos os problemas consequentes desta técnica.&lt;/p&gt;

&lt;p&gt;Algumas pessoas, incluindo &lt;a href=&#34;http://bradfrostweb.com/blog/web/responsive-nav-patterns/&#34; target=&#34;_blank&#34;&gt;Brad Frost&lt;/a&gt; e Luke Wroblewski, têm tentado resolver este problema. Brad Frost compilou algumas de suas técnicas no site &lt;a href=&#34;http://bradfrost.github.io/this-is-responsive/patterns.html#navigation&#34;&gt;This Is Responsive&lt;/a&gt;, na seção de navegação.&lt;/p&gt;

&lt;p&gt;A navegação alternada (toggle navigation) envolve ocultar o menu nos dispositivos mobile, exibindo um único link. Quando o usuário dá um clique todos os links aparecem como um bloco de elementos abaixo do link, empurrando o conteúdo principal pra baixo da navegação.&lt;/p&gt;

&lt;p&gt;Uma variante deste tipo de menu, inspirado em alguns padrões de aplicativos nativos, é a navegação &lt;a href=&#34;http://coding.smashingmagazine.com/2013/01/15/off-canvas-navigation-for-responsive-website/&#34; target=&#34;_blank&#34;&gt;off-canvas&lt;/a&gt;. Essa navegação fica escondida debaixo de um link no menu ou ícone. Quano o usuário clica, a navegação desliza em forma de painel pela esquerda ou direita, empurrando o conteúdo principal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111531.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Alguns exemplos do toggle navigation&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111531.jpg?itok=LzZHvbzg&#34; width=&#34;478&#34; height=&#34;225&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;p&gt;
    O problema com essas técnicas é que a navegação permanece no topo da tela. Neste artigo &lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1649&#34;&gt;&amp;#8220;Responsive Navigation: Optimizing for Touch Across Devices&amp;#8221;&lt;/a&gt;, Luke Wroblewski mostra &lt;strong&gt;quais zonas são facilmente acessíveis aos diferentes tipos de dispositivos&lt;/strong&gt;. A área superior esquerda é a mais difícil de chegar num dispositivo mobile.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111609.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Áreas facilmente acessíveis na tela de celulares e tablets, de acordo com Luke Wroblewski.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111609.jpg?itok=1xGtEHVW&#34; width=&#34;478&#34; height=&#34;356&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Com base nisto, Jason Weaver criou &lt;a href=&#34;http://jasonweaver.name/lab/touchnav/v2/&#34; target=&#34;_blank&#34;&gt;algumas demos&lt;/a&gt; com a navegação no bottom da tela. Uma solução é o &lt;a href=&#34;http://codepen.io/bradfrost/full/mlyvu&#34; target=&#34;_blank&#34;&gt;footer anchor&lt;/a&gt; (âncora de rodapé), com a navegação fixada no bottom da página para dispositivos menores, e um menu link que envia o usuário até lá. Esta técnica utiliza o sistema link âncora do HTML.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
  &lt;p&gt;
    &lt;a href=&#34;http://codepen.io/bradfrost/full/orJwL&#34; target=&#34;_blank&#34;&gt;Diversas&lt;/a&gt; outras &lt;a href=&#34;http://codepen.io/bradfrost/full/vcuem&#34; target=&#34;_blank&#34;&gt;tentativas&lt;/a&gt; foram &lt;a href=&#34;http://codepen.io/bradfrost/full/qwJvF&#34; target=&#34;_blank&#34;&gt;feitas&lt;/a&gt; para solucionar problemas de navegação no web design responsivo. Como você pode ver, ainda não há uma solução perfeita; isso realmente depende do projeto e da profundidade da navegação. Felizmente para nós, alguma pessoas estão tentando resolver esse problema e têm compartilhado suas experiências com a comunidade.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;Outra questão não resolvida é qual ícone usar&lt;/strong&gt; para dizer ao usuário &amp;#8220;Olá! há um menu escondido aqui. Clique em mim!&amp;#8221;. Alguns websites tem um símbolo de mais (+), outros uma grade de quadrados e alguns têm três linhas (como um ícone de hamburger).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111659.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111659.jpg?itok=Sa8jlYOv&#34; width=&#34;477&#34; height=&#34;138&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Para ver esses ícones usado em websites reais, dê uma olhada no &lt;a href=&#34;http://stuffandnonsense.co.uk/blog/about/we_need_a_standard_show_navigation_icon_for_responsive_web_design&#34; target=&#34;_blank&#34;&gt;&amp;#8220;We Need a Standard ‘Show Navigation’ Icon for Responsive Web Design”&lt;/a&gt; (precisamos de um ícone padrão no web design responsivo para &amp;#8220;mostrar a navegação&amp;#8221;).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O maior problema é descobrir qual desses ícones seria o mais reconhecível a uma quantidade de usuários. Se todos concordássemos em usar um deles, os usuários seriam instruídos a reconhecê-los. O problema é, qual escolher? Eu realmente gostaria de saber qual ícone vocês usam, então não hesite em compartilhar nos comentários 1 (1 &amp;#8211; nota do tradutor: para deixar sua opinião sobre qual o ícone você utiliza, acesse o artigo original).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;
    Especificidades Mobile: &amp;#8220;O usuário está com um dispositivo mobile? Se sim, o que pode ser feito?&amp;#8221;
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Dispositivos mobile e tablets são um mundo novo &amp;#8211; longe dos computadores desktops -, com suas próprias regras, comportamentos e capacidades. Podemos querer adaptar nossos projetos a esta nova gama de capacidades.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    Detectando Capacidades Touch com JavaScript Nativo
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Além do tamanho da tela, aposto que se você perguntasse qual a principal diferença entre mobiles (incluindo tablets) e desktops, a maioria das pessoas diriam ser a capacidade touch. Não há mouse num celular (é verdade!), e com exceção de alguns dispositivos híbridos raros, em que você pode plugar um mouse, você não vai poder realizar muitos eventos num tablet com um mouse. Isto significa que, dependendo do browser, a pseudo-classe &lt;em&gt;:hover&lt;/em&gt; do CSS pode não funcionar. Alguns browsers são inteligentes o bastante para oferecer um fallback nativo ao evento do hover traduzindo em um evento touch. Infelizmente, nem todos os browsers são tão flexíveis assim. Criar um design que não dependa de elementos ocultos, a serem revelados sob eventos &lt;em&gt;:hover&lt;/em&gt;, seria o mais sensato.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;Capturar eventos touch&lt;/strong&gt; poderia também ser uma outra solução. A W3C working group começou a trabalhar numa &lt;a href=&#34;http://www.w3.org/TR/touch-events/&#34; target=&#34;_blank&#34;&gt;especificação de eventos touch&lt;/a&gt;. Futuramente, seremos capazes de capturar eventos tais como &lt;em&gt;touchstart&lt;/em&gt;, &lt;em&gt;touchmove&lt;/em&gt; e &lt;em&gt;toucheend&lt;/em&gt;. Seremos capazes de lidar com esses eventos diretamente no JavaScript sem a necessidade de frameworks de terceiros como &lt;a href=&#34;http://eightmedia.github.io/hammer.js/&#34; target=&#34;_blank&#34;&gt;Hammer.js&lt;/a&gt; ou &lt;a href=&#34;http://jgestures.codeplex.com/&#34; target=&#34;_blank&#34;&gt;jGestures&lt;/a&gt;. Mas JavaScript é uma coisa &amp;#8211; E o que acontece com o CSS?
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    CSS nível 4 &amp;#8211; Media Query &amp;#8220;Pointer&amp;#8221;
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O CSS nível 4 especifica uma &lt;a href=&#34;http://dev.w3.org/csswg/mediaqueries4/#pointer&#34; target=&#34;_blank&#34;&gt;nova media querry chamada &amp;#8220;pointer&amp;#8221;&lt;/a&gt;, que pode ser usada para capturar a existência e precisão de um dispositivo apontador (pointing device), tal como um mouse. A media query tem um dos três valores:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;
      &lt;em&gt;none&lt;/em&gt;&lt;br /&gt; O dispositivo não tem nenhum pointing device.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;coarse&lt;/em&gt;&lt;br /&gt; O dispositivo tem um pointing device com precisão limitada, por exemplo, um celular ou tablet com capacidades touch, onde o &amp;#8220;pointer&amp;#8221; seria um dedo.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;fine&lt;/em&gt;&lt;br /&gt; O dispositivo tem um pointing device preciso, como um mouse, trackpad ou caneta (stylus).
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Usando esta media query, nós podemos ampliar a maneira de utilização de botões e links para dispositivos móveis:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-css&#34;&gt;
@media  (pointer:coarse) {
   input[type=&amp;ldquo;submit&amp;rdquo;],
       a.button {
       min-width: 30px;
       min-height: 40px;
       background: transparent;
   }
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    A media query pointer ainda não é suportada &amp;#8211; apenas sendo proposta. Todavia, ser potencial é enorme, pois seria permitiria &lt;strong&gt;detectar dispositivos touch via CSS&lt;/strong&gt;, sem a necessidade de uma bilbioteca, como &lt;a href=&#34;http://modernizr.com/docs/#touch&#34; target=&#34;_blank&#34;&gt;Modernizr&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    CSS nível 4 &amp;#8211; Media Query &amp;#8220;Hover&amp;#8221;
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    A especificação CSS nível 4 propõe uma nova &lt;a href=&#34;http://dev.w3.org/csswg/mediaqueries4/#hover&#34; target=&#34;_blank&#34;&gt;media query hover&lt;/a&gt;, que detecta se o sistema primário do dispositivo dá suporte ao hover. Ele retorna valores&lt;em&gt; boleanos: 1&lt;/em&gt; se o dispositivo suporta hover, &lt;em&gt;&lt;/em&gt; se não suporta. Note que isto não tem nada a ver com a pseudo-classe &lt;em&gt;:hover&lt;/em&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Usando a media query hover podemos melhorar a interface e ocultar certas características dos dispositivos que o suportam. O código fica mais ou menos assim:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-css&#34;&gt;
@media  (hover) {
   .hovercontent { display: none; }
   /* oculta o conteúdo apenas para dispositivos com suporte ao hover. */
   .hovercontent:hover { display: block; }
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Pode também ser usado para criar menus dropdowns com hover; e o fallback para dispositivos mobile é em CSS nativo, sem a necessidade de um framework que detecte a feature.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    CSS nível 4 &amp;#8211; Media Query Luminosity
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Outra capacidade dos dispositivos mobile é o sensor de luminosidade. A especificação CSS nível 4 tem a &lt;a href=&#34;http://dev.w3.org/csswg/mediaqueries4/#luminosity&#34; target=&#34;_blank&#34;&gt;media query luminosity&lt;/a&gt;, que nos dá acesso ao sensor de luz dos dispositivos diretamente no CSS. Abaixo a descrição da especificação.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
    &lt;p&gt;
      A característica da media &amp;#8220;luminosity&amp;#8221; é usada para verificar a luminosidade do ambiente o qual o dispositivo está sendo usado, e permitir que o autor ajuste o estilo do documento responsivamente.
    &lt;/p&gt;
  &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    No futuro, seremos capazes de criar &lt;strong&gt;websites que respondam a luminosidade do ambiente&lt;/strong&gt;. Isto vai melhorar muito a experiência do usuário. Seremos capazes de detectar, por exemplo, ambientes extremamente brilhantes usando o valor &lt;em&gt;washed&lt;/em&gt;, adaptando o contraste do site ao local. O valor &lt;em&gt;dim&lt;/em&gt; é usado para ambientes escuros (a noite por exemplo), e o valor &lt;em&gt;normal&lt;/em&gt; para quando o nível de luminosidade não necessita de qualquer tipo de adaptação.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O código fica assim:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-css&#34;&gt;
@media  (luminosity: washed) {
   p { background: white; color: black; font-size: 2em; }
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Como podemos ver, as CSS4 prometem um monte de coisas novas. Se você está curioso em ver o que vem por aí &amp;#8211; não só para mobile &amp;#8211; então dê uma olhada na &lt;a href=&#34;http://coding.smashingmagazine.com/2013/01/21/sneak-peek-future-selectors-level-4/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Sneak Peek Into the Future: Selectors, Level 4&amp;#8221;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    Mais Recursos Mobile para Detectar o Uso de API&amp;#8217;s e JavaScript
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Muitas outras coisas poderiam ser detectadas para tornar a experiência do usuário surpreendente num site responsivo. Por exemplo, poderíamos ter acesso nativo ao giroscópio, bússola e acelerômetro para detectar a orientação do dispositivo usando o &lt;em&gt;DeviceOrientationEvent&lt;/em&gt; do HTML5. O &lt;a href=&#34;http://caniuse.com/#feat=deviceorientation&#34;&gt;suporte ao DeviceOrientationEvent&lt;/a&gt; nos browsers do Android e iOS está ficando cada vez melhor, mas a especificação ainda está em fase de rascunho. No entanto, a API parece promissora. Imagine jogar jogos HTML5 diretamente no browser!
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Outra API que seria particularmente utilizada por alguns usuários mobile é a de &lt;a href=&#34;http://dev.w3.org/geo/api/spec-source.html&#34; target=&#34;_blank&#34;&gt;geolocation&lt;/a&gt;. A boa notícia é que ela já é &lt;a href=&#34;http://caniuse.com/#search=geolocation&#34; target=&#34;_blank&#34;&gt;bem suportada&lt;/a&gt;. Esta API &lt;strong&gt;nos permite localizar geograficamente o usuário usando o GPS&lt;/strong&gt; e inferir sua localização a partir de sinais de rede, como IP, RFID, Wi-Fi e endereços MAC Bluetooth. Isto pode ser usado em alguns sites responsivos para oferecer informações contextuais aos usuários. Uma grande cadeia de restaurantes poderia melhorar sua experiência mobile mostrando aos usuários a localização de seus restaurantes em sua área. As possibilidades são infinitas.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    A W3C também propôs um rascunho para uma &lt;a href=&#34;http://dev.w3.org/2009/dap/vibration/&#34; target=&#34;_blank&#34;&gt;API de vibração&lt;/a&gt;. Nele o browser pode oferecer um feedbacl tátil ao usuário em forma de vibração. Isto, no entanto, ainda está engatinhando em campos mais específicos de aplicações Web and mobile games in the browser.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Outra API que tem sido altamente discutida é a &lt;a href=&#34;http://www.w3.org/TR/netinfo-api/&#34; target=&#34;_blank&#34;&gt;network information API&lt;/a&gt;. A possibilidade de medir a largura de banda do usuário, e otimizar conforme o resultado, tem seduzido muitos desenvolvedores. Seriamos capazes de servir imagens com qualidade de alta definição para usuários com alta largura de banda e imagens de baixa qualidade aos usuários com baixa largura de banda. Com o atributo &lt;em&gt;bandwith&lt;/em&gt; da network API, seria possível calcular a velocidade de download de um usuário em megabytes por segundo. O segundo atributo, &lt;em&gt;metered&lt;/em&gt;, é um booleano que nos diz se o usuário tem uma conexão aferida (como um cartão pré-pago). Esses dois atributos são atualmente acessíveis via JavaScript.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Infelizmente, &lt;strong&gt;medir a conexão de um usuário é algo tecnicamente complicado&lt;/strong&gt;, pois uma conexão poderia mudar de forma abrupta. O usuário poderia, por exemplo, entrar num túnel e perder sua conexão, ou sua velocidade poderia cair de repente. Sendo assim, a media query mágica que mede a largura de banda parece ser hipotética no momento. Yoav Weiis escreveu um belo artigo sobre os problemas criados por essa media query e sobre medição de largura de banda chamado &lt;a href=&#34;http://mobile.smashingmagazine.com/2013/01/09/bandwidth-media-queries-we-dont-need-em/&#34; target=&#34;_blank&#34;&gt;“Bandwidth Media Queries? We Don’t Need ’Em!”&lt;/a&gt; (media queries de largura de banda? Não precisamos delas!&amp;#8221;)
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Muitas outras API&amp;#8217;s lidam com recursos mobile. Se você estiver interessado em aprender mais, a Mozilla tem uma &lt;a href=&#34;https://wiki.mozilla.org/WebAPI&#34; target=&#34;_blank&#34;&gt;lista bem detalhada&lt;/a&gt;. A maioria ainda não está completamente disponível ou padronizada, e é destinada mais a aplicações web do que a sites responsivos. No entanto, é um ótimo panorama de como grandes e complexos sites mobile podem ser no futuro.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;
    Repensando a Maneira Como Nós e o Usuário Lidamos com o Conteúdo
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Do ponto de vista técnico, ainda existem muitos desafios ao lidar com o conteúdo em grande escala. O método mobile-first tem sido parte do processo de desenvolvimento e design já há algum tempo. Poderíamos, por exemplo, servir a dispositivos mobile o mínimo de dados necessários, e então usar JavaScript e AJAX para condicionalmente carregar mais conteúdo e imagens para desktop e tablets. No entanto, para isto, também teríamos que &lt;strong&gt;repensar como lidar com o conteúdo&lt;/strong&gt; e ser capaz de priorizar uma forma de gerar um conteúdo suficientemente flexível e adaptável. Um bom exemplo disto é o mapa de solução responsiva descrito acima: Carregamos uma imagem para mobile, e melhoramos a experiência com um mapa real para desktops. Quanto mais responsivo o website, mais complexo será lidar com o conteúdo. Um código flexível pode nos ajudar a formatar um conteúdo adaptável.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Uma forma sugerida por alguns é criar frases responsivas e marcá-las com spans que tenham classes, e então exibi-los de acordo com o tamanho da tela. Aparar trechos das frases para dispositivos menores é possível com media querries. Você pode ver esta técnica no 37signals&amp;#8217; &lt;a href=&#34;http://37signals.com/svn/&#34; target=&#34;_blank&#34;&gt;Signal vs. Noise&lt;/a&gt; blog e no artigo de Frankie Roberto &lt;a href=&#34;http://www.frankieroberto.com/responsive_text&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Responsive Text&amp;#8221;&lt;/a&gt;. Mesmo que tal técnica pudesse ser usada para melhorar pequenas partes de um website, tais como um slogan do footer, aplicando isto a todos os textos de um site é difícil de imaginar.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Isto levanta uma questão no web design responsivo que se tornará mais e mais importante no futuro: a importância de meta dados e a estrutura semântica de conteúdo. Se quisermos ser capazes de reutilizar o conteúdo de outros websites automaticamente, eles deverão estar bem estruturados e preparados para isto. Novas tags HTML5 como &lt;em&gt;article&lt;/em&gt; e &lt;em&gt;section&lt;/em&gt; são um bom começo para ganhar algum significado semântico. O objetivo é pensar e estruturar o conteúdo de modo que um único item (por exemplo, um post em um blog), possa ser reutilizado e exibido em diferentes dispositivos, e em diferentes formatos.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O grande desafio será &lt;strong&gt;fazer com que os metadados sejam facilmente compreendidos&lt;/strong&gt; a todas as pessoas que fazem parte da criação de conteúdo do website. Teremos que explicar a todos eles como os metadados podem ser utilizados para priorizar o conteúdo e programaticamente reunir o conteúdo, sendo uma plataforma independente. Um grande desafio será o de ajudá-los a pensar em blocos reutilizáveis, em vez de um grande pedaço de texto no qual eles copiam e colam conteúdo do Microsoft Word no seu sistema de gerenciamento de conteúdo WYSIWYG. Teremos que ajudá-los a entender que conteúdo e estrutura são coisas distintas e independentes, como quando os designers tiveram que entender que o conteúdo (HTML) e a apresentação (CSS) eram mantidos melhor separados.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;Não podemos nos dar ao luxo de escrever um conteúdo que seja orientado a uma única plataforma&lt;/strong&gt;. Quem sabe em qual dispositivo ele será publicado daqui a seis meses, ou um ano? &lt;a href=&#34;http://mobile.smashingmagazine.com/2013/01/14/preparing-websites-for-the-unexpected/&#34; target=&#34;_blank&#34;&gt;Precisamos preparar nossos websites para o inesperado&lt;/a&gt;. Mas, para isto, precisamos de ferramentas melhores de publicação também. Karen McGrane deu uma palestra intitulada &lt;a href=&#34;http://karenmcgrane.com/2012/09/04/adapting-ourselves-to-adaptive-content-video-slides-and-transcript-oh-my/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Adapting Ourselves to Adaptive Content&amp;#8221;&lt;/a&gt; (Nos Adaptando a um Conteúdo Adaptável), com alguns exemplos reais da indústria editorial. Ela fala sobre o processo de criação de conteúdo reutilizável e apresenta a ideia do COPE: create once and publish everywhere (Criar uma vez e publicar em todos os lugares). Precisamos construir CMS&amp;#8217;s melhores, que possam utilizar e gerar metadados para priorizar o conteúdo. Precisamos explicar às pessoas como o sistema funciona e pensar em objetos de módulos de conteúdo reutilizáveis em vez de páginas WYSIWYG. Como McGrane diz:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
    &lt;p&gt;
      &amp;#8220;Você pode escrever três versões diferentes de título; você pode escrever duas versões diferentes de resumos e anexar diversas imagens para isto, com diferentes cortes e tamanhos, e você pode não ser a pessoa responsável em decidir qual imagem ou qual título será exibido em uma determinada plataforma. Essa decisão será tomada pelos metadados. Será feita pelas regras de negócios. [&amp;#8230;] Metadados é a nova direção de arte.&amp;#8221;
    &lt;/p&gt;
  &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Truncar o conteúdo para dispositivos menores não é uma estratégia de conteúdo &amp;#8220;à prova do futuro&amp;#8221;. Precisamos de CMS&amp;#8217;s que ofereçam a estrutura necessária para criar esse conteúdo reutilizável. Precisamos de melhores workflows de publicação em CMS&amp;#8217;s também. Interfaces desajeitadas assustam os usuários, e a maioria das pessoas que geram conteúdo não estão particularmente confortáveis com ferramentas complicadas. Temos que oferecer a essas pessoas ferramentas mais fáceis de entender e que lhe ajudem a publicar um conteúdo limpo e semântico, independente da apresentação.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;
    Conclusão
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Por mais longo que este artigo seja, &lt;strong&gt;ele só abrange o básico&lt;/strong&gt;. Mas agora, a maioria dos leitores da Smashing Magazine entendem que o web design responsivo é muito mais que usar media queries, escolher breakpoints certos e dobrar o tamanho das imagens para celulares de alta densidade. Como você pode ver, o caminho é longo e ainda não chegamos lá. Há ainda muitas questões não resolvidas, e a solução responsiva perfeita ainda não existe.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Soluções técnicas podem ser descobertas no futuro usando alguma nova tecnologia apresentada neste artigo, com a ajuda da &lt;a href=&#34;http://www.w3.org/&#34; target=&#34;_blank&#34;&gt;W3C&lt;/a&gt;, &lt;a href=&#34;http://www.whatwg.org/&#34; target=&#34;_blank&#34;&gt;WHATWG&lt;/a&gt; e organizações como o &lt;a href=&#34;http://filamentgroup.com/&#34; target=&#34;_blank&#34;&gt;Filament Group&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Mais importante, nós web designers e desenvolvedores podemos ajudar a encontrar soluções ainda melhores. Pessoas como &lt;a href=&#34;http://www.lukew.com/&#34; target=&#34;_blank&#34;&gt;Luke Wroblewski&lt;/a&gt; e &lt;a href=&#34;http://bradfrostweb.com/&#34; target=&#34;_blank&#34;&gt;Brad Frost&lt;/a&gt;, e todas as incríveis pessoas mencionadas neste artigo estão experimentando uma série de soluções e técnicas diferentes. Se serão bem ou mal sucedidas, &lt;strong&gt;a coisa mais importante é compartilhar&lt;/strong&gt; o que nós &amp;#8211; designers, desenvolvedores, estrategistas de conteúdo e membros da comunidade web &amp;#8211; estamos fazendo para tentar resolver alguns dos desafios da comunidade do web design. Afinal, estamos todos no mesmo barco, tentando tornar a web um lugar melhor, não estamos?
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &amp;#8212;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Traduzido com autorização da &lt;a href=&#34;http://www.smashingmagazine.com/&#34; target=&#34;_blank&#34;&gt;Smashing Magazine&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Artigo original escrito por &lt;a href=&#34;http://mobile.smashingmagazine.com/author/stephanie-walter/?rel=author&#34; target=&#34;_blank&#34;&gt;Stéphanie Walter&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Acesse o artigo original na &lt;a href=&#34;http://mobile.smashingmagazine.com/2013/05/29/the-state-of-responsive-web-design/&#34; target=&#34;_blank&#34;&gt;Smashing Magazine&lt;/a&gt; &amp;#8211; &amp;#8220;The State Of Responsive Web Design&amp;#8221; &amp;#8211; 29 de maio de 2013.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &amp;#8212;
  &lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Padrões Complexos de Navegação no Design Responsivo</title>
      <link>https://tableless.github.io/hugo-public/padroes-complexos-de-navegacao-no-design-responsivo/</link>
      <pubDate>Fri, 28 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/padroes-complexos-de-navegacao-no-design-responsivo/</guid>
      <description>

&lt;p&gt;A pergunta que mais recebo desde que postei meu artigo sobre &lt;a href=&#34;http://bradfrostweb.com/blog/web/responsive-nav-patterns/&#34; target=&#34;_blank&#34;&gt;Modelos responsivos de navegação&lt;/a&gt; é: &lt;strong&gt;Como lidar com uma navegação complexa no design responsivo?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ótima pergunta, mas antes de entrar nos pormenores, eu vos peço: &lt;strong&gt;Use o celular como uma desculpa para revisitar sua navegação&lt;/strong&gt;. Observe suas análises. Quais os pontos chave da sua experiência? Onde as pessoas passam a maior parte do tempo? Você realmente precisa da sua &amp;#8220;política de privacidade&amp;#8221; na navegação principal? &lt;a href=&#34;http://futurefriend.ly/thinking.html#laser-focus&#34; target=&#34;_blank&#34;&gt;Tenha foco&lt;/a&gt;. Aproveite a falta de espaço da tela para retirar todo o besteirol político do site etc, e elimine todo o conteúdo inútil. Seus usuários agradecerão.&lt;/p&gt;

&lt;p&gt;Mais uma coisa: Se você tem zilhões de seções e páginas, &lt;strong&gt;priorize a busca&lt;/strong&gt;. Um formulário de busca é uma maneira eficaz de levar os usuários onde eles desejam ir, sem ter que percorrer vários níveis na navegação.&lt;/p&gt;

&lt;p&gt;Ok, agora que definimos algumas coisas, é &lt;a href=&#34;http://www.youtube.com/watch?v=cdaAWFoWr2c&#34; target=&#34;_blank&#34;&gt;hora da verdade&lt;/a&gt;. Às vezes não é muito prático reduzir suas milhares de páginas em três pequenos e ordenados links que se ajustem a tela de um dispositivo mobile. Muitas vezes você é um grande varejista, ou uma universidade com um enorme conteúdo para um grande público alvo. Às vezes o cliente que anuncia no seu site vai, &lt;strong&gt;literalmente, te engolir&lt;/strong&gt; por remover o seu link da navegação.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enfim, às vezes você só precisa de uma navegação mais complexa&lt;/strong&gt;. O que você vai fazer? Bem, aí vão alguns padrões para lidarmos com navegações complexas, longas e multi-level.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multi Toggle&lt;/li&gt;
&lt;li&gt;O bom e velho Right-To-Left&lt;/li&gt;
&lt;li&gt;Pular a sub-navegação&lt;/li&gt;
&lt;li&gt;Priority+&lt;/li&gt;
&lt;li&gt;Off-Canvas Flyout&lt;/li&gt;
&lt;li&gt;Carousel+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;o-multi-toggle&#34;&gt;O MULTI-TOGGLE&lt;/h2&gt;

&lt;p&gt;&lt;img style=&#34;width: 550px;height: 375px&#34; title=&#34;Fig: Navegação multi-toggle no redesign do site de Barack Obama&#34; alt=&#34;Navegação multi-toggle do site do Barack Obama&#34; src=&#34;http://bradfrostweb.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-27-at-11.43.41-PM-650x443.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O menu multi-toggle é basicamente um acordeão encaixado. Basta dar um &lt;em&gt;tap&lt;/em&gt; na categoria para revelar sub-categorias ocultas. Uma vez que a tela tenha largura suficiente, é convertida num menu suspenso &lt;a href=&#34;http://devsnippets.com/article/reviews/10-brilliant-multi-level-navigation-menu-techniques.html&#34; target=&#34;_blank&#34;&gt;dropdown multi-level&lt;/a&gt;, como já estamos acostumados a ver.&lt;/p&gt;

&lt;p&gt;Dica rápida: Use os ícones + ou ▼ para deixar o usuário saber que há mais conteúdo.&lt;/p&gt;

&lt;h3 id=&#34;prós&#34;&gt;Prós&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Escaneável&lt;/strong&gt; &amp;#8211; Os usuários podem rapidamente escanear as categorias principais, antes de tomar qualquer decisão em ir ao próximo nível.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Escalável&lt;/strong&gt; &amp;#8211; Seu menu tem 17 níveis? Esta solução pode lidar com isso facilmente (mas, por favor, não faça isso).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;contras&#34;&gt;Contras&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Não é tão atraente&lt;/strong&gt; &amp;#8211; Dar &lt;em&gt;taps&lt;/em&gt; ao longo dos vários níveis não é a coisa mais elegante do mundo, mas acho que você poderia acabar dizendo a mesma coisa diante de qualquer solução de navegação multi-level.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Um possível JS é requerido&lt;/strong&gt; &amp;#8211; Digo &amp;#8220;possível&amp;#8221; pois a maioria desses estilos de interação usam JavaScript para fazer a coisa acontecer. No entanto, o brilhante &lt;a href=&#34;https://twitter.com/aarongustafson&#34; target=&#34;_blank&#34;&gt;Aaron Gustafson&lt;/a&gt; demonstrou que você pode &lt;a href=&#34;http://www.netmagazine.com/tutorials/build-smart-mobile-navigation-without-hacks&#34; target=&#34;_blank&#34;&gt;realizar este efeito&lt;/a&gt; usando a pseudo-classe :target na regra CSS. Muito legal! Além disso, a necessidade de JavaScript não é necessariamente um contra. Apenas certifique-se que a navegação não será acessada por usuários sem suporte a esta linguagem.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recursos&#34;&gt;Recursos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.netmagazine.com/tutorials/build-smart-mobile-navigation-without-hacks&#34; target=&#34;_blank&#34;&gt;Construa um smart mobile navigation sem hacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsfiddle.net/leaverou/zwvNY/&#34; target=&#34;_blank&#34;&gt;Anime usando min-height&lt;/a&gt; por &lt;a href=&#34;https://twitter.com/leaverou&#34; target=&#34;_blank&#34;&gt;Lea Verou&lt;/a&gt; – Esta técnica é insanamente incrível. Eu a utilizo em todas as minhas necessidades de height-animating, Inclusive em accordions.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jqueryui.com/accordion/&#34; target=&#34;_blank&#34;&gt;jQuery Accordion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;na-web&#34;&gt;Na web&lt;/h3&gt;

&lt;p&gt;O redesign do site do &lt;a href=&#34;http://www.barackobama.com/&#34; target=&#34;_blank&#34;&gt;Barack Obama&lt;/a&gt; em conjunto com o padrão &lt;a href=&#34;http://bradfrostweb.com/blog/web/responsive-nav-patterns/#footer-anchor&#34; target=&#34;_blank&#34;&gt;footer anchor&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-bom-e-velho-right-to-left&#34;&gt;O BOM E VELHO RIGHT-TO-LEFT&lt;/h2&gt;

&lt;p&gt;&lt;img style=&#34;width: 475px;height: 427px&#34; title=&#34;Navegaçao em tela pequena da Sony&#34; alt=&#34;Sony&#34; src=&#34;http://bradfrostweb.com/wp-content/uploads/2012/08/sony.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Em vez de itens de sub-navegação aparecendo por baixo da categoria, como no multi-toggle, o nível seguinte da navegação fica à direita (fora da tela) e é animado quando requisitado.&lt;/p&gt;

&lt;h3 id=&#34;prós-1&#34;&gt;Prós&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Muito atraente&lt;/strong&gt; &amp;#8211; Não é sempre que um menu de navegação te surpreende, mas a navegação right-to-left sem dúvida é muito elegante;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Segue as convenções do mobile&lt;/strong&gt; &amp;#8211; A maioria das principais plataformas de smartphones tem algum padrão de animação right-to-left para potencializar sua experiência&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Escalável&lt;/strong&gt; &amp;#8211; É bom para uma navegação com muitos níveis.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;contras-1&#34;&gt;Contras&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Complexo &amp;#8211; Isto não é necessariamente um contra, mas este padrão tem &amp;#8211; literalmente &amp;#8211; um monte de peças móveis. Por isso, certifique-se de deixá-las todas acessíveis, garanta-se e teste no maior número de dispositivos possível;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Desempenho da animação&lt;/strong&gt; &amp;#8211; O desempenho varia bastante entre os diversos dispositivos e plataformas. Algumas plataformas mobile o animam muito bem, enquanto em outras é uma droga. Também esteja ciente de que algumas plataformas não suportam esta animação, e uma mudança repentina na navegação pode ser um choque ao usuário.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;na-web-1&#34;&gt;Na web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sony.com/index.php&#34; target=&#34;_blank&#34;&gt;Sony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.currys.co.uk/gbuk/index.html&#34; target=&#34;_blank&#34;&gt;Currys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pular-a-sub-navegação&#34;&gt;PULAR A SUB-NAVEGAÇÃO&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://bradfrostweb.com/wp-content/uploads/2012/08/wwf.png&#34; target=&#34;_blank&#34;&gt;&lt;img style=&#34;width: 550px;height: 128px&#34; title=&#34;A navegação responsiva da WWF ignora a sub-navegação em telas menores, fazendo com que os usuários sejam levados direto à página de destino da categoria.&#34; alt=&#34;World Wildlife Fund Navigation&#34; src=&#34;http://bradfrostweb.com/wp-content/uploads/2012/08/wwf-650x151.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A sub-navegação normalmente inclui itens que também são inclusos na página principal da categoria. Pelo fato do conteúdo ser acessível desta página, é perfeitamente viável simplesmente levar os usuários de small screens direto à página principal e deixá-lo tomar sua próxima decisão de lá.&lt;/p&gt;

&lt;h3 id=&#34;prós-2&#34;&gt;Prós&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Evita ter que lidar com sub-navegações&lt;/strong&gt; &amp;#8211; Simplesmente levar o usuário a uma nova página elimina a dor de cabeça resultante de uma sub-navegação. Embora ele possa se sentir enganado, lembre-se que o &lt;em&gt;tap&lt;/em&gt; é utilizado em dispositivos sem um estado &lt;em&gt;hover&lt;/em&gt;. Assim, quando o usuário dá um &lt;em&gt;tap&lt;/em&gt; em &amp;#8220;clothing&amp;#8221; e então é levado à página principal de roupas, ele já está atingindo o seu objetivo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simples&lt;/strong&gt; – Links para outras páginas.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;contras-2&#34;&gt;Contras&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requer a atualização de uma página inteira para acessar os itens de sub-navegação&lt;/strong&gt; &amp;#8211; Este é um grande contra. Ter que ir a uma outra página não é tão eficiente para uma navegação rápida.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Usuários de &lt;em&gt;small screens&lt;/em&gt; ainda fazem download do conteúdo da sub-navegação&lt;/strong&gt; &amp;#8211; Também é um grande contra. É um caso clássico de usuários mobile fazer download de elementos que nunca irão usar. No entanto, não precisa ser assim. Sub-navegações, especialmente mega menus monstruosos, daqueles cheios de tranqueiras que ninguém nunca irá usar e&amp;#8230; onde eu estava? Ah sim&amp;#8230; eles podem (e devem) ser &lt;a href=&#34;http://24ways.org/2011/conditional-loading-for-responsive-designs/&#34; target=&#34;_blank&#34;&gt;condicionalmente carregados&lt;/a&gt; para que usuários de small screens não tenham que baixar um conteúdo inútil.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recursos-1&#34;&gt;Recursos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://24ways.org/2011/conditional-loading-for-responsive-designs/&#34; target=&#34;_blank&#34;&gt;Carregamento condicional para design responsivo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://filamentgroup.com/lab/ajax_includes_modular_content/&#34; target=&#34;_blank&#34;&gt;Padrão Ajax-Include para conteúdo modular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;na-web-2&#34;&gt;Na web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://worldwildlife.org/&#34; target=&#34;_blank&#34;&gt;World Wildlife Fund (WWF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wvu.edu/&#34; target=&#34;_blank&#34;&gt;West Virginia University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bostonglobe.com/&#34; target=&#34;_blank&#34;&gt;Boston Globe&lt;/a&gt; AJAXifies é uma sub-navegação feita do jeito certo.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.chapman.edu/arts/index.aspx&#34; target=&#34;_blank&#34;&gt;Chapman University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uca.edu/&#34; target=&#34;_blank&#34;&gt;University of Central Arkansas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.southwales.ac.uk/&#34; target=&#34;_blank&#34;&gt;University of Glamorgan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;priority&#34;&gt;PRIORITY+&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://bradfrostweb.com/wp-content/uploads/2012/08/priority2.gif&#34; target=&#34;_blank&#34;&gt;&lt;img style=&#34;width: 550px;height: 467px&#34; title=&#34;Padrão Priority+ &#34; alt=&#34;Padrão Priority+&#34; src=&#34;http://bradfrostweb.com/wp-content/uploads/2012/08/priority2.gif&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://justmarkup.com/log/2012/06/19/responsive-multi-level-navigation/&#34; target=&#34;_blank&#34;&gt;padrão Priority+&lt;/a&gt; foi cunhado por &lt;a href=&#34;http://justmarkup.com/&#34; target=&#34;_blank&#34;&gt;Michael Scharnagl&lt;/a&gt; (&lt;a href=&#34;http://twitter.com/justmarkup&#34; target=&#34;_blank&#34;&gt;@justmarkup&lt;/a&gt;) para descrever uma navegação que exibe os elementos considerados &amp;#8220;mais importantes&amp;#8221; na navegação, ocultando os itens menos relevantes por trás de um link &amp;#8220;more&amp;#8221;. Esses itens somente são revelados quando o usuário clicar neste link.&lt;/p&gt;

&lt;h3 id=&#34;prós-3&#34;&gt;Prós&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Relativamente simples de implementar&lt;/strong&gt; &amp;#8211; A lógica requerida para executar esta técnica não é tão complicada. Basta um comando show/hide para revelar e esconder os itens de navegação.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expõe as características mais acessadas (é o que a gente acredita)&lt;/strong&gt; &amp;#8211; Com isto, esperamos revelar três ou quatro itens que a maioria dos usuários acessam com frequência.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;contras-3&#34;&gt;Contras&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Oculta potencialmente importantes itens da navegação&lt;/strong&gt; &amp;#8211; o que você julga mais importante pode não ser a opinião do seu usuário. Enterrar itens de navegação significa ter que fazer suposições, e ao mesmo tempo que esperamos ser útil para a maior parte dos usuários, pode irritar a outros.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Não funciona muito bem com a navegação multi-level&lt;/strong&gt; &amp;#8211; O modelo priority+ parece bom para navegações que tem muitos itens num mesmo nível de hierarquia, mas infelizmente parece ainda não resolver o dilema da sub-navegação.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recursos-2&#34;&gt;Recursos&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://justmarkup.com/log/2012/06/19/responsive-multi-level-navigation/&#34; target=&#34;_blank&#34;&gt;Navegação Responsiva Multi Level – Vamos tentar!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://justmarkup.com/lab/juma/nav/example2/&#34; target=&#34;_blank&#34;&gt;Priority+ Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;na-web-3&#34;&gt;Na web&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.wm.edu/&#34; target=&#34;_blank&#34;&gt;William and Mary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;http://m.usatoday.com/sports&#34; target=&#34;_blank&#34;&gt;section pages do site mobile do USA Today&lt;/a&gt; não seguem exatamente esta proposta, mas exibem as categorias mais importantes por padrão, e uma seta revela os itens de navegação restantes. Bastante atrativo.&lt;/p&gt;

&lt;h2 id=&#34;off-canvas-flyout&#34;&gt;OFF-CANVAS FLYOUT&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://bradfrostweb.com/wp-content/uploads/2012/08/nav-obama.png&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Navegação Left Flyout do site do Barack Obama&#34; alt=&#34;nav-obama&#34; src=&#34;http://bradfrostweb.com/wp-content/uploads/2012/08/nav-obama-650x295.png&#34; width=&#34;573&#34; height=&#34;260&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O menu off-canvas flyout revela uma coluna de navegação. Os itens do sub-menu podem ser tantos quanto o comprimento da própria página, por isso há espaço de sobra para uma longa e/ou complexa navegação. Como já escrevi sobre o &lt;a href=&#34;http://bradfrostweb.com/blog/web/responsive-nav-patterns/#left&#34; target=&#34;_blank&#34;&gt;modelo flyout left&lt;/a&gt; antes, vou poupá-los da análise de prós e contras. Em vez disso, estou disponibilizando uma lista de referências para modelos off-canvas.&lt;/p&gt;

&lt;h3 id=&#34;recursos-para-off-canvas&#34;&gt;Recursos para off-canvas&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1517&#34; target=&#34;_blank&#34;&gt;Off Canvas Multi-Device Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1569&#34; target=&#34;_blank&#34;&gt;Off Canvas Multi-Device Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jasonweaver.name/lab/offcanvas/&#34; target=&#34;_blank&#34;&gt;Off-Canvas demo por Jason Weaver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zurb.com/playground/off-canvas-layouts&#34; target=&#34;_blank&#34;&gt;Off Canvas Layouts na Zurb Foundation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;na-web-4&#34;&gt;Na web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/&#34; target=&#34;_blank&#34;&gt;Facebook’s mobile site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;carousel&#34;&gt;CAROUSEL+&lt;/h2&gt;

&lt;p&gt;&lt;img style=&#34;width: 494px;height: 523px&#34; alt=&#34;Carousel+ Pattern&#34; src=&#34;http://bradfrostweb.com/wp-content/uploads/2012/08/Screen-shot-2012-08-27-at-12.47.20-PM.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Este é o menu da moda. O padrão Carousel+ é um carrossel contendo uma categoria principal com opções de sub-navegação exibidas na parte inferior. O usuário pode deslizar horizontalmente pelas opções de navegação ou usar as setas (direita/esquerda) para mover-se pelo carrosel.&lt;/p&gt;

&lt;h3 id=&#34;prós-4&#34;&gt;Prós&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Relativamente atraente&lt;/strong&gt; &amp;#8211; Esta é certamente uma solução única e elegante para navegações mais complexas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Funciona bem com touch screens&lt;/strong&gt; &amp;#8211; A capacidade de deslizar por um pequeno carrossel é uma interação muito legal, e é eficiente no sentido de conseguir &amp;#8216;chegar aonde você quer&amp;#8217;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;contras-4&#34;&gt;Contras&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Não exibe todas as categorias&lt;/strong&gt; &amp;#8211; Assim como o modelo Priority+, o modelo Carousel+ requer uma interação antes de o usuário poder compreender todas as opções disponíveis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pesado em dispositivos non-touch&lt;/strong&gt; &amp;#8211; Ter um carrossel deslizante é ótimo, mas ainda existem muitos ambientes e dispositivos que não suportam eventos touch JavaScript. Para esses ambientes, o usuário terá que recorrer a setas que avançam uma categoria de cada vez, o que pode ser bem entendiante.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Não é recomendado para navegação multi-level&lt;/strong&gt; &amp;#8211; Este padrão funciona bem quando a sub-navegação tem apenas um nível. Mas, não é escalável além disso.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Questões de proximidade entre a navegação principal e a sub-navegação&lt;/strong&gt; &amp;#8211; A distância entre os itens do primeiro nível da navegação e da sub-navegação é muito pequena. Não fica muito legal. Sei lá, talvez seja só pra mim.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;na-web-5&#34;&gt;Na web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://m.intel.com/us/en/home.html&#34; target=&#34;_blank&#34;&gt;Site mobile da Intel&lt;/a&gt; &amp;#8211; Sim, sei que não é responsivo, mas não significa que este padrão não possa ser usado em um ambiente responsivo&lt;a id=&#34;anchornota1&#34; href=&#34;#nota1&#34; name=&#34;achornota1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adiante&#34;&gt;ADIANTE!&lt;/h2&gt;

&lt;p&gt;Não importa o que você faça, ajustar uma navegação complexa e multi-level para small screens é algo difícil. Lembre-se de priorizar a busca, e de subtrair o que for possível antes de embarcar na implementação de uma navegação complexa. Essa coleção de padrões de navegação não está tão abrangente, por isso fique a vontade para sugerir outras soluções interessantes que você já viu.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;nota1&#34; name=&#34;nota1&#34;&gt;&lt;/a&gt;1 &amp;#8211; Nota do tradutor: O site da Intel agora é responsivo, e utiliza um outro padrão de menu. Mantive este link apenas para ser fiel a tradução. Vocês podem observar este padrão de menu pela imagem que abre a seção &lt;em&gt;Carousel+&lt;/em&gt;. &lt;a href=&#34;#anchornota1&#34;&gt;voltar ao texto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;_Artigo traduzido com autorização de &lt;a href=&#34;http://bradfrostweb.com/&#34; target=&#34;_blank&#34;&gt;Brad Frost&lt;/a&gt;._&lt;/p&gt;

&lt;p&gt;_Artigo original escrito por &lt;a href=&#34;http://bradfrostweb.com/&#34; target=&#34;_blank&#34;&gt;Brad Frost&lt;/a&gt;._&lt;/p&gt;

&lt;p&gt;_Acesse o artigo original em &lt;a href=&#34;http://bradfrostweb.com/blog/web/complex-navigation-patterns-for-responsive-design/&#34; target=&#34;_blank&#34;&gt;Brad Frost Web &amp;#8211; &amp;#8220;Complex Navigation Pattern for Responsive Design&amp;#8221; &amp;#8211; 27 de agosto de 2012&lt;/a&gt;._&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Personalidade no Design</title>
      <link>https://tableless.github.io/hugo-public/personalidade-no-design/</link>
      <pubDate>Mon, 12 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/personalidade-no-design/</guid>
      <description>

&lt;p&gt;_Traduzido com autorização da &lt;a href=&#34;http://www.alistapart.com/&#34; target=&#34;_blank&#34;&gt;A List Apart Magazine&lt;/a&gt; e do autor._&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Estamos animados em apresentar um trecho do 3° capítulo do livro “&lt;/em&gt;&lt;a href=&#34;http://www.abookapart.com/products/designing-for-emotion&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Designing for Emotion&lt;/em&gt;&lt;/a&gt;&lt;em&gt;” de Aarron Walter (Ed. A Book Apart, 2011)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Chamamos de personalidade, o centro de relações duradouras, em torno de qualidades únicas, e perspectivas que todos possuímos. Através de nossa personalidade, expressamos uma gama de emoções humanas. Personalidade é a força que nos atrai a certas pessoas e nos repele de outras. Pelo fato de a personalidade exercer grande influência em nosso processo de tomada de decisões, a mesma pode ser uma poderosa ferramenta no design.&lt;/p&gt;

&lt;h2 id=&#34;personalidade-é-a-plataforma-para-a-emoção&#34;&gt;Personalidade é a plataforma para a emoção&lt;/h2&gt;

&lt;p&gt;O design de interfaces está em uma ampla categoria chamada Interação Humano-Computador, ou IHC, em conjunto com a ciência da computação, ciência comportamental e o design. Especialistas em IHC entendem de psicologia, usabilidade, design de interação, conceitos de programação, e princípios básicos de design visual. Se isto lhe soa familar, saiba que é muito do que os designers de UX lidam todos os dias.&lt;/p&gt;

&lt;p&gt;Vou contar um segredo, não sou fã do nome &lt;em&gt;“Interação Humano-Computador”&lt;/em&gt;. Quando desenvolvo um projeto, trabalho arduamente na experiência da interface, sentindo que haverá um ser humano do outro lado, e não um computador. Pode até soar a mesma coisa, mas nomes são importantes. Nomes moldam a nossa percepção, e nos sugestionam ideias que se encaixam em determinadas categorias.&lt;/p&gt;

&lt;p&gt;O design emocional tem como principal objetivo facilitar a comunicação entre seres humanos. Se estivermos desenvolvendo bem o nosso trabalho, o computador ficará apenas como plano de fundo, e a personalidade virá à tona. Para atingirmos este objetivo, devemos levar em conta a maneira como interagimos uns com os outros na vida real.&lt;/p&gt;

&lt;p&gt;Eu gostaria que você parasse por um momento, e lembrasse de alguém que você teve uma conexão recente na vida real. Talvez tenha encontrado essa pessoa enquanto estava em algum evento, ou talvez um amigo tenha lhe apresentado, e a conversa que se seguiu tenha sido interessante, cativante e até mesmo divertida. O que havia nessa pessoa que fez com que a conversa fosse tão emocionante? Vocês provavelmente tinham interesses em comum, e isso provocou uma discussão, mas não foi só isso que fez com que o encontro fosse tão memorável certo? Foi sua personalidade que lhe atraiu a essa pessoa, que levou a discussão e que lhe deixou tão animado. Suas personalidades interceptaram a troca de brincadeiras, o tom de voz, e a cadência da conversa. Isso fez com que você baixasse a guarda, e confiasse nessa pessoa. Personalidades promovem amizades e servem como uma plataforma para as ligações emocionais.&lt;/p&gt;

&lt;p&gt;Prenda-se a esta lembrança. Revisite-a quando for iniciar um novo projeto. É este tipo de sentimento que estamos tentando construir através do design emocional. Vamos criar esta sensação de excitação, e a vincularemos ao nosso público através da concepção de uma personalidade, que será incorporada a nossa interface.&lt;/p&gt;

&lt;p&gt;Pensaremos em nossos projetos de design não como uma fachada interativa, mas como pessoas com quem o nosso público possa ter uma conversa inspirada. Produtos também são pessoas.&lt;/p&gt;

&lt;p&gt;Como sempre a História explica a nossa atual situação, e vamos verificar que designers têm feito experiências com personalidades, a fim de criar uma experiência mais humana, há séculos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Uma breve História da personalidade no design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Existe um histórico de injeção de personalidade nas coisas que fizemos, numa tentativa de humanizar as criações mecânicas. Quando Johannes Gutenberg – ourives e pai da máquina de impressão – fez experimentos com tipos móveis, em meados do século XV, foi a mão humana que o inspirou. Antes da máquina de impressão, os escribas – que geralmente eram monges – escreviam  a mão, meticulosamente, cada página de seus manuscritos religiosos, usando pena e tinta. Transcrever uma bíblia era um dever sagrado, e os escribas achavam que era uma maneira  para canalizar a mensagem divina.  Por esta razão, a presença da “mão” nesses manuscritos tem grande importância espiritual.&lt;/p&gt;

&lt;p&gt;Então, quando Gutenberg projetou e moldou os tipos originais, usados para imprimir centenas de bíblias, a forma da fonte imitava o estilo caligráfico dos escribas. E embora tenha criado máquinas para produzir a mensagem divina, ele esforçou-se para tentar fazer uma representação mais humana (figura 3.1)&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://www.alistapart.com/d/personality-in-design/figure3_1.jpg&#34; alt=&#34;&#34; width=&#34;540&#34; height=&#34;334&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figura 3.1: Os tipos móveis de Gutenberg imitavam a caligrafia dos escribas, na tentativa de fazer com que suas bíblias, produzidas mecanicamente, fossem mais humanizadas.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Podemos ver a tendência do design humano manifestando-se no século XX, quando a produção em massa permeou quase todos os setores da indústria.&lt;/p&gt;

&lt;p&gt;O Volkswagen Beetle (Fusca no Brasil), lançado em 1938 e produzido até 2003, foi o projeto mais vendido na história automobilística, e seu design distintamente humano contribuiu para o seu sucesso (figura 3.2). Concebido como o “Carro do povo”, o design antropomorfizado o tornou mais que um carro para o povo: Tornou-o uma pessoa. Os faróis arredondados que denotavam olhos, enquanto o seu capô em forma de concha sorria para nós, personificando uma ideia de um rosto de bebê. Embora originalmente projetado com uma aerodinâmica sem personalidade, a “face” do Fusca transmite uma atitude esperançosa e divertida, que fez com que gerações se relacionassem facilmente a ela, mesmo com mudanças culturais ao longo de sete décadas.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://www.alistapart.com/d/personality-in-design/figure3_2.jpg&#34; alt=&#34;&#34; width=&#34;540&#34; height=&#34;383&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figura 3.2: Personalidade à frente e no centro do design do Volkswagen Fusca, que ajudou a torná-lo um sucesso esmagador por gerações.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Este sorriso que cumprimenta o motorista reflete a emoção e estabelece um tipo específico de relacionamento. É difícil não retribuir a um sorriso, mesmo vindo de um objeto. Em torno desta simples interação, construímos uma persona emocional para este automóvel, levando-o a jogos (“Slug bug red!”) e como herói no filme “Herbie”. Criamos memórias ao redor dessas experiências, e elas nos lembraram as emoções positivas que o Fusca inspira.&lt;/p&gt;

&lt;p&gt;Embora a bíblia de Gutenberg e o Fusca sejam casos interessantes, não há um exemplo mais concreto de personalidade no design do que a campanha publicitária da Apple _“Get a Mac”_ (Nota do Tradutor – &lt;a href=&#34;http://www.youtube.com/watch?v=BdGqf4d2GHM&#34; target=&#34;_blank&#34;&gt;Exemplo da campanha&lt;/a&gt;). Nos anúncios, Justin Long interpreta um jovem e moderno Mac – John Hodgman é um PC comum – que sem esforço algum consegue resolver problemas complexos e todas as suas tarefas. Esses anúncios transmitem uma experiência de personalidade e ajudam os consumidores a comparar os diferentes relacionamentos que poderiam ter com o seu computador. Os anúncios não falam sobre especificações ou características, e sim sobre como você se sentiria se comprasse um Mac. Compreendendo a história da personalidade no design, vamos voltar ao presente, onde nos esforçamos para tentar entender o nosso público, e damos o nosso melhor para desenvolver experiências atraentes para a web.&lt;/p&gt;

&lt;h2 id=&#34;personas&#34;&gt;Personas&lt;/h2&gt;

&lt;p&gt;No web design atual pesquisamos, planejamos e criamos coforme as motivações e atitudes do nosso público. Os desenvolvedores de experiência de usuário entrevistam o seu público, e então criam personas – um dossiê sobre um arquétipo de usuário representando um grupo maior. Pense nas personas como um artefato de pesquisa do usuário. Elas ajudam a equipe de web a permanecer consciente do seu público-alvo e manter o foco em suas necessidades.&lt;/p&gt;

&lt;p&gt;O exemplo de persona mostrado na Figura 3.3, criado por Todd Zaki Warfel (designer na messagefirst), conta a estória de Julia. Através deste documento, aprendemos sobre a sua demografia, seus interesses, seus conhecimentos em diversos assuntos, e o que influência as suas decisões sobre assuntos pertinentes ao projeto – nós começamos a entender quem é a Júlia. Temos agora um vislumbre de sua personalidade, o que nos ajuda a entender as suas motivações e formar as decisões seguintes no design.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://www.alistapart.com/d/personality-in-design/figure3_3.jpg&#34; alt=&#34;&#34; width=&#34;540&#34; height=&#34;825&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figura 3.3: Personas ajudam a guiar o processo do design, mantendo o foco nas necessidades do usuário.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Embora Júlia não seja uma pessoa real, mas um arquétipo representativo de um grupo de usuários, ela está realmente próxima de ser uma pessoa bastante  conhecida pelo time da messagefirst (empresa que a criou). Eles desenvolvem todas as suas personas desta maneira, o que é muito útil. Quando se deparam com um ponto complicado no processo de seus projetos, em que estejam inseguros de quais percepções, valores e comportamentos esperar de seu público numa determinada interface, podem simplesmente telefonar e fazer perguntas. Isto não só ajuda a criar soluções perfeitas no design, mas também os mantém focados em pessoas reais que usarão esta interface.&lt;/p&gt;

&lt;p&gt;Sabemos que todo usuário necessita que o nosso design seja funcional, confiável e utilizável. Ao compreender nosso público, podemos atender melhor suas necessidades. Esta informação também nos ajuda a atender a camada superior desta hierarquia, nos indicando a personalidade (no design) mais suscetível a criar uma conexão emocional. A Persona é uma ferramenta padrão no processo de design, mas ela só oferece uma imagem parcial do relacionamento construido com nosso público. Sabemos quem elas são, mas quem somos nós?&lt;/p&gt;

&lt;p&gt;Mencionamos no início do artigo que produtos podem ser pessoas também. Seguindo esta linha de raciocínio, nosso projeto não deveria ter uma persona também, funcionando como a ficha da persona do usuário? Deveria? Sim, deveria.&lt;/p&gt;

&lt;h3 id=&#34;projetando-uma-persona-para-o-seu-website&#34;&gt;Projetando uma Persona para o seu website&lt;/h3&gt;

&lt;p&gt;Se o seu website fosse uma pessoa, quem ele seria? Ele seria sério, bem vestido, um homem de negócios, confiável e capaz? Ou ele seria um amigo rabugento, que deixa as tarefas mundanas mais divertidas?&lt;/p&gt;

&lt;p&gt;Seguindo uma estrutura similar a do usuário, você também pode detalhar a personalidade do seu projeto desenvolvendo uma persona. A personalidade pode manifestar-se na interface através do design visual, da reprodução e interações.  A persona descreve como a personalidade será dirigida a cada segmento, e ajuda a equipe a construir um resultado unificado e consistente. O objetivo é construir uma personalidade que seja retratada de forma tão clara como Justin Long e John Hodgman o fizeram nos anúncios do “Get a Mac “.&lt;/p&gt;

&lt;p&gt;Antes de darmos uma olhada na persona que criei para o Mailchimp, vamos examinar os componentes desta documentação. Veja o que você deve incluir ao projetar a sua persona.&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Nome da marca:&lt;/strong&gt;_ O nome da sua empresa ou serviço&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Resumo:&lt;/strong&gt;_ Um pequeno resumo da personalidade de sua marca. O que faz com que a personalidade de sua marca seja única?&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Imagem da Personalidade:&lt;/strong&gt;_ É a imagem atual de uma pessoa que incorpore as características que você deseja incluir em sua marca. Isto faz com que a personalidade fique menos abstrata. Escolha uma pessoa famosa, ou alguém que seja familiar a sua equipe. Se sua marca tem um mascote ou representante que já incorpore essa personalidade, utilize-o. Descreva os  atributos do mascote que comunique a personalidade da marca.&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Características da marca:&lt;/strong&gt;_ Liste de cinco a sete características que melhor descrevam a sua marca, junto com uma característica que você deseja evitar. Isto ajuda a quem desenvolve esta persona, a criar uma personalidade mais consistente, evitando traços que levariam a sua marca na direção errada.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mapa da personalidade:&lt;/em&gt;&lt;/strong&gt; Podemos mapear personalidades através de um eixo cartesiano X/Y. O eixo X representa o grau ao qual a personalidade é hostil ou amigável; já o eixo Y  mostra o grau de submissão ou dominação.&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Voz:&lt;/strong&gt;_ Se a sua marca pudesse falar, como seria?  O que ela diria? Ela falaria com uma voz popular ou mais refinada? Descreva os aspectos específicos da voz da sua marca, e como ela pode mudar em situações diversas de comunicação.  As pessoas mudam a sua linguagem e o seu tom, a fim de adequar-se a situação. Assim deve ser a voz da sua marca.&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Exemplos de reprodução:&lt;/strong&gt; _Forneça exemplos de reprodução que podem ser usados em diferentes situações na sua interface. Isto ajuda os desenvolvedores  a entender como a sua persona deve se comunicar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Visual léxico:&lt;/em&gt;&lt;/strong&gt; Se você é um designer, crie este documento para si e/ou a equipe de design. Você pode criar um visual léxico do projeto da sua persona que inclui resumo de cores, tipografia e estilo visual que transmita a personalidade da sua marca. Você pode ser bem generalista nestes conceitos, ou incluir um &lt;a href=&#34;http://www.webdesignerdepot.com/2008/12/why-mood-boards-matter/&#34; target=&#34;_blank&#34;&gt;mood board&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Métodos de envolvimento:&lt;/em&gt;&lt;/strong&gt; Descreva os métodos de envolvimento emocional que você pode usar em sua interface, para ajudar o desenvolvedor da persona  a criar uma experiência memorável.&lt;/p&gt;

&lt;p&gt;Agora daremos uma olhada num exemplo. Como líder do desenvolvimento de experiência de usuário na Mailchimp, criei uma persona para guiar o trabalho que fizemos. Seguindo a mesma estrutura que acabamos de ver, aqui está uma versão ligeiramente abreviada do documento:&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Nome da marca: &lt;/strong&gt;_MailChimp&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Resumo:&lt;/strong&gt;_ Freedie Von Chimpenheimer IV é o rosto da Mailchimp e incorpora a personalidade da marca (figura 3.4). A forte estrutura de Freddie comunica o poder da aplicação, e sua aparência permite que as pessoas saibam que tipo de negócio a marca oferece.&lt;/p&gt;

&lt;p&gt;Freddie está sempre com um sorriso gentil que acolhe os usuários e faz com que eles se sintam em casa. O estilo cartoon comunicado pela Mailchimp oferece uma experiência divertida e informal. Sim, Freddie é um macaco em estilo cartoon, e de alguma maneira ele ainda consegue ser cool. Ele gosta de piadas espirituosas, mas quando a situação é grave, ele também sabe controlar suas brincadeiras.&lt;/p&gt;

&lt;p&gt;A Mailchimp sempre surpreende os usuários com uma mensagem surpresa, ou um link para degustar um vídeo no YouTube. A diversão está em todos os cantos, mas nunca atrapalhando a funcionalidade do site.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://www.alistapart.com/d/personality-in-design/figure3_4.jpg&#34; alt=&#34;&#34; width=&#34;320&#34; height=&#34;264&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figura 3.4: Freddie Von Chimpenheimer IV, mascote da Mailchimp&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Imagem da Personalidade:&lt;/strong&gt; _Figura 3.4.&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Características da marca: &lt;/strong&gt;_Divertida, mas não infantil. Engraçada, mas não pateta. Poderosa, mas não complicada. Doida, mas não doente mental. Fácil, mas não simplista. Confiável, mas não indigesta. Informal, mas não descuidada.&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Personality map&lt;/strong&gt;:_ Fig 3.5&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://www.alistapart.com/d/personality-in-design/figure3_5.jpg&#34; alt=&#34;&#34; width=&#34;320&#34; height=&#34;313&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig 3.5: Mapa da personalidade do Mailchimp &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Voz:&lt;/strong&gt; _A voz do Mailchimp é familiar, amigável e, acima de tudo, humana. As personalidades das pessoas por trás da marca brilham de honestidade. A voz da Mailchimp solta piadas (que você pode compartilhar com sua mãe por exemplo), conta estórias, e se comunica com um tom bem popular, daqueles que você utiliza com um velho amigo. A mailchimp utiliza contrações como “pra” em vez de “para”, pois é assim que as pessoas conversam umas com as outras. a Mailchimp usa sons como “hmmmmmm…” quando quer dizer que você está pensando demais, ou “uau, isso é impressionante!” para comunicar empatia. A forma lowercase e os botões de texto ajudam a reforçar a informalidade da marca.&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Exemplos de reprodução:&lt;/strong&gt;_ Mensagem de sucesso: “Toca aqui! Sua lista foi importada!”. Mensagem de erro: “Ops, parece que você esqueceu de digitar um endereço de e-mail”. Falha crítica: “Um de nossos servidores caiu temporariamente. Nossos engenheiros já estão cuidando do caso, e voltará em breve. Obrigado pela sua paciência.”&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Visual léxico:&lt;/strong&gt; Cor:_ A paleta de cores ligeiramente desaturada da Mailchimp transmite um sensação de diversão e humor. As cores são refinadas e não ultrapassam os seus limites. A Mailchimp é divertida mas também é poderosa. _Tipografia:_ A Mailchimp é simples, eficiente e fácil de usar, e sua tipografia reflete isso. Simples, sem serifa, título e corpo variam de maneira apropriada a sua escala, peso, e sua cor, comunicando a informação de forma hierárquica, fazendo com que a Mailchimp soe como algo familiar e confortável, e que seja funcional e amável ao mesmo tempo. _Notas gerais de estilo:_ Os elementos de interface são planos e simples, mantendo as coisas mais fáceis de entender, não intimidando o usuário. Texturas sutis podem aparecer em determinados locais com o intuito de aquecer o espaço e deixá-lo mais humano. Freddie deve ser usado com moderação, e unicamente para interpor um pouco de humor. Freddie nunca dá feedbacks da aplicação, estatísticas, ou ajuda nas tarefas.&lt;/p&gt;

&lt;p&gt;_&lt;strong&gt;Métodos de envolvimento:&lt;/strong&gt; Surpresa e alegria:_ Telas temáticas de login comemoram feriados, eventos culturais ou uma pessoa querida. Easter eggs (telas/mensagens surpresa) criam momentos inesperados de humor que podem transmitir nostalgia ou uma referência a cultura pop kitsch.&lt;/p&gt;

&lt;p&gt;_Antecipação:_ No topo de cada página, Freddy faz saudações randômicas e engraçadas, gerando uma antecipação em carregar a próxima página. Esses cumprimentos nunca dão informações ou feedbacks. Eles são layers divertidos, que nunca interferem na funcionalidade ou usabilidade.&lt;/p&gt;

&lt;p&gt;Faça o download de um template para construção de persona e o modelo do Mailchimp em &lt;a href=&#34;http://aarronwalter.com/design-personas&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://aarronwalter.com/design-personas&#34;&gt;http://aarronwalter.com/design-personas&lt;/a&gt;&lt;/a&gt;. Experimente em seu projeto, ou talvez até mesmo em um redesign.&lt;/p&gt;

&lt;p&gt;Da mesma forma que os desenvolvedores de UX deixam as personas a disposição de designers, desenvolvedores e estrategistas de conteúdo ao longo do projeto, a sua persona deve estar visível para lembrar a equipe o tipo de relacionamento que você deseja construir com seu público. As personas devem guiar todos aqueles que queiram desenvolver/alterar um pixel, um parágrafo ou esteja envolvido em qualquer processo do website.&lt;/p&gt;

&lt;p&gt;Muitos sites já estão usando a personalidade para dar forma a experiência do usuário, e prover o sucesso em seu negócio. Embora diferentes na marca, objetivos de negócios e plataforma, A&lt;em&gt;Tapbots&lt;/em&gt;, _Carbonmade_ e _Housing Works_ descobriram que a personalidade é o ingrediente chave nas conexões emocionais que estão construindo com o seu público, e em seu sucesso esmagador.&lt;/p&gt;

&lt;h2 id=&#34;tapbots-robot-love&#34;&gt;Tapbots: robot Love&lt;/h2&gt;

&lt;p&gt;A Tapbots é fabricante de aplicativos para iPhones e criou uma personalidade distinta em sua interface, tornando diversas tarefas chatas bem mais agradáveis (Figura 3.6).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://www.alistapart.com/d/personality-in-design/figure3_6.jpg&#34; alt=&#34;&#34; width=&#34;540&#34; height=&#34;405&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figura 3.6: Os apps da Tapbots são como robozinhos prontos para fazer o seu fone fazer todo o trabalho sujo.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O app convertbot, como o próprio nome diz, faz simples conversões de unidades de medidas. Já o  Weightbot ajuda os usuários a controlarem as alterações de sua massa corporal. Nenhuma dessas tarefas é muito agradável de realizar, especialmente o acompanhamento de peso, coisa que pode balançar a sua auto-estima. Mas o design dos aplicativos adquiriu um público fiel que faz deles um sucesso estrondoso.&lt;/p&gt;

&lt;p&gt;Os aplicativos parecem ter rostos pelos quais toda a interação acontece. O painel escuro no topo parece ser inspirado nos óculos de &lt;a href=&#34;http://pt.wikipedia.org/wiki/Kool_Moe_Dee&#34; target=&#34;_blank&#34;&gt;Kool Moe Dee&lt;/a&gt;, sendo apoiados sobre um nariz pequeno e uma boca larga.&lt;/p&gt;

&lt;p&gt;Ao contrário de outros aplicativos para iPhone, a interface parece pequenos robôs-humanos. Um robô em particular inspirou o aplicativo Tapbot. O designer Mark Jardine, que desenvolveu a personalidade da UI, diz:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Todo o conceito de interface do usuário foi inspirado no filme Wall-e. Nosso conceito para os dois primeiros aplicativos era de projetá-los como se fossem robôs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Queremos que nossos aplicativos sejam utilizados com seriedade, mas que também dê um sensação de que são mais que apenas um software. Queremos que os usuários tenham uma conexão emocional com nossos aplicativos. A maior parte das pessoas não tem amor e nem se divertem com os seus softwares (como fazem os geeks)”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O blogueiro &lt;a href=&#34;http://daringfireball.net/linked/2009/04/02/designing-convertbot&#34; target=&#34;_blank&#34;&gt;John Gruber&lt;/a&gt; resume o sentimento do público a respeito dos aplicativos Tapbots de uma forma bem simples:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Eu adoro a forma e os sons desses aplicativos”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ironicamente, Gruber sequer menciona a funcionalidade dos aplicativos, embora a sua apreciação esteja implícita. Ele usa o termo “adoro”, ou seja, ele não apenas “gosta” do aplicativo, ele “adora”. Essas interfaces antropomorfizadas dão aos usuários a sensação de que estão interagindo com outro ser vivo com personalidade, fazendo uma possível ligação emocional. Interfaces que conseguem tocar suas emoções, de maneira eficaz, não apenas criam uma ampla base de fãs, elas constroem um exército evangelizador.&lt;/p&gt;

&lt;p&gt;A personalidade da marca transborda no próximo exemplo. A Carbonmade consegue construir uma personalidade eficaz para sua marca, que ressoa ao seu público num mar de excentricidades.&lt;/p&gt;

&lt;h2 id=&#34;carbonmade-polvos-unicórnios-e-bigodes&#34;&gt;Carbonmade: Polvos, unicórnios e bigodes&lt;/h2&gt;

&lt;p&gt;A personalidade pode estabelecer relações com um público, desde que seja única e autêntica, mas se utilizada como um artifício, pode ter o efeito contrário, pois notarão a personalidade forjada e sem autenticidade no design e deixarão de confiar em sua marca.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://carbonmade.com/&#34; target=&#34;_blank&#34;&gt;Carbonmade&lt;/a&gt; é um pequeno e inteligente aplicativo que ajuda as pessoas a desenvolver portfólios elegantes, e expressa a sua personalidade em todo o seu site, combinando a seriedade de &lt;a href=&#34;http://pt.wikipedia.org/wiki/James_Stewart&#34; target=&#34;_blank&#34;&gt;Jimmy Stewart&lt;/a&gt; com o charme cômico de &lt;a href=&#34;http://en.wikipedia.org/wiki/Eddie_Izzard&#34;&gt;Eddie Izzard&lt;/a&gt;. Polvos e unicórnios brincam em sua paisagem fantástica (ver figura 3.7), o que é atípico  para um site com foco em conversão.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://www.alistapart.com/d/personality-in-design/figure3_7.jpg&#34; alt=&#34;&#34; width=&#34;540&#34; height=&#34;567&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figura 3.7: A Carbonmade usa uma personalidade exagerada para atrair novos usuários&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Esta personalidade excêntrica e livre, é conjurada pelo seu criador, o designer Dave Gorum, e como se vê, incentiva designers e artista a se cadastrarem. Gorum explica:&lt;/p&gt;

&lt;p&gt;_“Minha regra é adicionar diversão até o ponto de distração da mensagem. _&lt;em&gt;Mantendo coisas informais e malucas, fica bem mais fácil obter usuários para clicar no botão ‘Sign-up’ “.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“A informalidade facilita muito o diálogo com nosso público.  Somos como um amigo divertido, o qual é realmente fácil de falar e que ao mesmo tempo pode montar um portfólio encantador”. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A personalidade da marca Carbonmade cria um contraste claro para o público que tenta compará-los a concorrência. Este contraste é parte essencial do processo humano de tomada de decisão.&lt;/p&gt;

&lt;p&gt;Embora o humor seja o ponto central da personalidade do Carbonmade, nem sempre ele é apropriado. É nosso desejo compartilhar um pouco de nós mesmos com outros que afeiçoem-se a personalidade de nosso design, e que ajude-nos a conectar-se com nosso público. Somos pessoas complexas, com uma ampla gama de emoções. Quando se trata de design emocional, necessitamos adequar a personalidade ao conteúdo e ao público.&lt;/p&gt;

&lt;p&gt;Poucos websites fazem isto tão bem quanto o Housing Works, que estampa rostos humanos numa importante causa.&lt;/p&gt;

&lt;h2 id=&#34;housing-works-um-nome-com-um-rosto&#34;&gt;Housing Works: Um nome com um rosto&lt;/h2&gt;

&lt;p&gt;Assim como no mundo real, nem sempre podemos pontuar a personalidade nos sites com perspicácia e humor. Certas situações exigem táticas diferenciadas. A Housing Works é uma organização sem fins lucrativos, dedicada a inspirar aidéticos em estado terminal e sem moradia. A Housing Works transforma vidas todos os dias. Suas histórias são de empatia, bondade e esperança para pessoas comuns.&lt;/p&gt;

&lt;p&gt;Quando o estúdio &lt;a href=&#34;http://happycog.com/&#34; target=&#34;_blank&#34;&gt;Happy Cog&lt;/a&gt; fez o redesign do site em 2008 (fig 3.8), a personalidade da organização e das pessoas a quem ela auxilia foi a musa inspiradora do processo de design.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://www.alistapart.com/d/personality-in-design/figure3_8.jpg&#34; alt=&#34;&#34; width=&#34;540&#34; height=&#34;362&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figura 3.8: A Housing Works constrói um vínculo emocional com o seu público, compartilhando as histórias das pessoas que ela auxilia. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dan Mall, lead designer da Housing Works, explica:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Ficou muito claro que o coração da Housing Works são as pessoas que auxiliam e são auxiliadas, que são esmagadoramente calorosas e carinhosas. Nessa direção, foi muito fácil desenvolver o site atual”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fotografias enormes e citações de como a Housing Works mudou a vida das pessoas, figuram de forma proeminente na home, comunicando a personalidade da organização, enquanto inspira o seu público. Rostos sorridentes e um doce ciclo de histórias pessoais ajudam o site a obter uma comunicação humana verdadeira.&lt;/p&gt;

&lt;p&gt;As imagens moldam a perspectiva emocional do público. A proporção em que os rostos são dispostos no design encorajam uma resposta emocional do espectador, e ao mesmo tempo enfatiza a personalidade do projeto. Este recorte mais amplo da imagem enfatiza a aparência física das pessoas. As fotos na Housing Works são estrategicamente recortadas para ajudar-nos a ver a bela personalidade das pessoas representadas, tornando-nos simpáticos a sua causa.&lt;/p&gt;

&lt;h2 id=&#34;o-poder-da-personalidade&#34;&gt;O Poder da Personalidade&lt;/h2&gt;

&lt;p&gt;Assim como as personalidades mudam com o contexto da comunicação na vida real, elas devem mudar conforme o design que projetamos. Para isto, não há uma solução exclusiva. Se pararmos de pensar nas interfaces como meros painéis de controle, e pensar nelas como “pessoas que o nosso público-alvo vai interagir”, podemos criar experiências emocionais mais envolventes, que deixem uma impressão duradoura.&lt;/p&gt;

&lt;p&gt;Tenha em mente que quando você enfatiza a personalidade na experiência do usuário, algumas pessoas podem não gostar.  Mas tudo bem. Personalidades confrontam, e no caso das empresas, podem realmente ser um bom negócio. Se as pessoas não entenderem a sua personalidade, as chances são de este cliente não ser o certo para você, e no final você está evitando um futuro cliente-problema. Personalidade é um risco, mas há muitos exemplos na vida real que mostram que a recompensa vale muito a pena.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;_Artigo original escrito por &lt;a href=&#34;http://www.alistapart.com/authors/w/awalter&#34; target=&#34;_blank&#34; rel=&#34;author&#34;&gt;Aarron Walter&lt;/a&gt;_&lt;/p&gt;

&lt;p&gt;_Acesse o artigo original no &lt;a href=&#34;http://www.alistapart.com/articles/personality-in-design/&#34; target=&#34;_blank&#34;&gt;A List Apart&lt;/a&gt; &amp;#8211; Personality in Design &amp;#8211; 18 de Outubro de 2011_&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>