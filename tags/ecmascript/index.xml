<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ecmascript on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/ecmascript/index.xml</link>
    <description>Recent content in Ecmascript on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/ecmascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Trabalhando com serviços no Javascript</title>
      <link>https://tableless.github.io/hugo-public/trabalhando-com-servicos-no-javascript/</link>
      <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/trabalhando-com-servicos-no-javascript/</guid>
      <description>

&lt;p&gt;JavaScript é uma &lt;em&gt;linguagem multiparadigma&lt;/em&gt;. Pode-se “_emular_” várias técnicas de programação com ele, e isso é &lt;strong&gt;incrível&lt;/strong&gt; pois podemos decidir qual o melhor paradigma para a resolução dos problemas dos nossos projetos. Porém se por um lado isso pode parecer poderoso para a linguagem, também pode deixar os iniciantes bem confusos, é muito comum escolher a abordagem errada para o problema. Por esse motivo que o JavaScript em sido polêmico nos últimos anos.&lt;/p&gt;

&lt;p&gt;Pensando nisso muitos desenvolvedores criam suas próprias soluções, uns pensando em ajudar e outros em forçar padrões.&lt;/p&gt;

&lt;p&gt;Eu prefiro ensinar a pescar, pois JavaScript não tem que ser complexo. A &lt;strong&gt;versão 6 do JavaScript (ES6/ES2015)&lt;/strong&gt; tornou a linguagem muito mais expressiva, facilitando muito o entendimento.&lt;/p&gt;

&lt;h3 id=&#34;encapsulando-lógicas&#34;&gt;Encapsulando lógicas&lt;/h3&gt;

&lt;p&gt;Tudo em JavaScript são objetos (exceto &lt;em&gt;undefined&lt;/em&gt;), então &lt;strong&gt;serviços também são objetos&lt;/strong&gt;, dominando como criamos e trabalhamos com objetos todas as coisas ficam bem mais tranquilas.&lt;/p&gt;

&lt;p&gt;O Jean Carlo Emer fez um artigo muito, &lt;a href=&#34;http://tableless.com.br/modularizacao-em-javascript/&#34;&gt;mas muito bom sobre Modularização no JavaScript&lt;/a&gt;. Sugiro que você leia, mas vou explicar um pouco sobre o assunto logo abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-medium aligncenter&#34; src=&#34;https://cdn-images-1.medium.com/max/800/1*hsXIPyBqqI7ZTh2QyLfizw.gif&#34; alt=&#34;i know JavaScript basics &#34; width=&#34;320&#34; height=&#34;237&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;scope-e-closures&#34;&gt;Scope e Closures&lt;/h4&gt;

&lt;p&gt;JavaScript possui escopo léxico. Entre outras coisas isso permite que você crie &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;De maneira resumida você cria um “ambiente controlado” onde há funções/variáveis que só podem ser acessadas naquele escopo, criando um enclausuramento (&lt;em&gt;closure&lt;/em&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const initPage = (root) =&amp;gt; {
  const $root = $(root);
  const $menu = $root.find(&#39;.menu&#39;);
  const $profile = $menu.find(&#39;.profile&#39;);

  const initProfile = () =&amp;gt; {
    $.get(&#39;/me&#39;)
      .then(response =&amp;gt; $profile.text(response.username));
    // ...
  };

  const showProfileModal = e =&amp;gt; {
   // ...
  };

  $profile.on(&#39;click&#39;, e =&amp;gt; showProfileModal(e));

  initProfile();
};

initPage(&#39;body&#39;);
&lt;/pre&gt;

&lt;p&gt;Este é um exemplo bem bobo, mas que ilustra bem como criamos &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As variáveis declaradas dentro de &lt;em&gt;initPage&lt;/em&gt; só existem naquele escopo.&lt;/p&gt;

&lt;p&gt;No mesmo exemplo podemos refatorar esse código em uma &lt;strong&gt;IIFE (Immediately-Invoked Function Expression)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;((root) =&amp;gt; {
  const $root = $(root);
  const $menu = $root.find(&#39;.menu&#39;);
  const $profile = $menu.find(&#39;.profile&#39;);

  const initProfile = () =&amp;gt; {
    $.get(&#39;/me&#39;)
     .then(response =&amp;gt; $profile.text(response.username));
    //  ...
  };

  const showProfileModal = e =&amp;gt; {
    // ...
  };

  $profile.on(&#39;click&#39;, e =&amp;gt; showProfileModal(e));

  initProfile();
})(&#39;body&#39;);
&lt;/pre&gt;

&lt;p&gt;Nesse código declaramos uma função e a executamos imediatamente, passando um argumento. Isso é extremamente útil quando queremos fazer um processamento de uma informação que vai servir apenas para criar uma variável.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const timezones = (() =&amp;gt; {
  const zones = [];
  const min = -12;
  const max = 13;
  let simbol;

  for (let i = min; i &amp;lt;= max; i++) {
    simbol = (i &amp;lt; 0) ? &#39;&#39; : &#39;+&#39;;
    zones.push(`GMT${simbol}${i}`);
  }

  return zones;
})();
&lt;/pre&gt;

&lt;p&gt;Como você já pode perceber, é possível expor dados de uma &lt;em&gt;closure&lt;/em&gt; como no exemplo anterior. A variável zones é retornada, assim a variável &lt;em&gt;timezones&lt;/em&gt; agora possui como valor o resultado da &lt;em&gt;closure&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nesse exemplo a &lt;em&gt;closure&lt;/em&gt; não usa dados externos a ela (&lt;em&gt;parent scope&lt;/em&gt;/escopo pai) porém dada a natureza do JavaScript isso é perfeitamente possível.&lt;/p&gt;

&lt;p&gt;Isso é útil para não poluir o escopo principal com informações irrelevantes.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const makeCounter = (start = 0) =&amp;gt; {
  let current = start;

  const add = (value = 1) =&amp;gt; current += value;
  const remove = (value = 1) =&amp;gt; add(value * -1);
  const get = () =&amp;gt; current;

  return { add, remove, get };
};

const counter = makeCounter(10);

counter.add() // 11
counter.add() // 12
counter.add(8) // 20
counter.remove(10) // 10
&lt;/pre&gt;

&lt;p&gt;Este é um exemplo bem interessante. Estamos combinando &lt;em&gt;closures&lt;/em&gt; com &lt;em&gt;factory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Com isso podemos criar vários contadores, e trabalhar como melhor convir com estes contadores.&lt;/p&gt;

&lt;div id=&#34;attachment_56186&#34; style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;wp-image-56186 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/wtf.gif&#34; alt=&#34;Só isso! Simples, né?&#34; width=&#34;500&#34; height=&#34;284&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Só isso! Simples, né?
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Se você entendeu como o exemplo do contador funciona, parabéns você já sabe criar serviços com javascript.&lt;/p&gt;

&lt;p&gt;Isso mesmo, este contator é um serviço. Na verdade ele é um &lt;em&gt;factory&lt;/em&gt;, mas com pequenos ajustes ele vira um serviço de fácil reuso.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// makeCounter.js -&amp;gt; factory
const makeCounter = (start = 0) =&amp;gt; {
  let current = start;

  const add = (value = 1) =&amp;gt; current += value;
  const remove = (value = 1) =&amp;gt; add(value * -1);
  const get = () =&amp;gt; current;

  return { add, remove, get };
};

export default makeCounter
&lt;/pre&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// counter.js -&amp;gt; service
import makeCounter from &#39;./makeCounter.js&#39;;

export default makeCounter(0);
&lt;/pre&gt;

&lt;p&gt;Agora temos dois arquivos, um contendo o &lt;em&gt;factory&lt;/em&gt; do contador, e outro contendo o serviço de contagem.&lt;/p&gt;

&lt;h2 id=&#34;módulos-javascript&#34;&gt;Módulos JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-56185 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/module.gif&#34; alt=&#34;module&#34; width=&#34;400&#34; height=&#34;250&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Como visto anteriormente, é bem simples criar serviços com JavaScript, basta antes entender alguns conceitos.&lt;/p&gt;

&lt;p&gt;Porém isso não é tudo, se você esta criando um serviço é porque tem a intenção de reusar esta lógica em mais de um local da aplicação. Isto não é uma regra, talvez você queira apenas centralizar a lógica da operação.&lt;/p&gt;

&lt;p&gt;Não importa o objetivo inicial, você vai acabar criando um módulo JavaScript para aquela sua operação/serviço. No exemplo do contador foram criados dois arquivos, o &lt;em&gt;contador&lt;/em&gt; e o &lt;em&gt;factory do contador&lt;/em&gt;. Nesse momento você precisa entender minimamente o que são módulos JavaScript.&lt;/p&gt;

&lt;p&gt;Em resumo: um arquivo JavaScript é um módulo e um módulo JavaScript é um arquivo.&lt;/p&gt;

&lt;p&gt;Você pode criar um módulo a partir de outros módulos, como é o exemplo do contador, ele é composto a partir do módulo &lt;em&gt;makeCouter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Em geral a lógica dos módulo é encapsulada em &lt;em&gt;closures&lt;/em&gt; e o retorno delas é &lt;em&gt;cacheado&lt;/em&gt;, sendo assim, uma vez que você importa um módulo, ele será &lt;strong&gt;o mesmo sempre, compartilhando seu estado&lt;/strong&gt;. Saiba mais &lt;a href=&#34;http://www.vuejs-brasil.com.br/utilizando-vuex-na-forma-modular-2/#vamosentenderoqueaconteceu&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;usando-serviços&#34;&gt;Usando serviços&lt;/h3&gt;

&lt;p&gt;Agora que você possui essas informações acredito que criar seus próprios serviços não será nenhum &lt;em&gt;bicho de sete cabeças&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vale a pena dizer que tudo pode ser considerado um serviço, inclusive &lt;em&gt;factories&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para reforçar vou deixar mais um exemplo de uso de serviços.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import Http from &#39;./http.js&#39;;
import UsersService from &#39;./modules/users/service.js&#39;;

Http.setToken(&#39;XPTO&#39;); // Define o token de autentificação

// Cattega a primeira página de usuários
// Exibe um alerta com o nome do primeiro usuário retornado pelo serviço

UsersService
  .getAll({ page: 1 })
  .then(result =&amp;gt; result.data)
  .then(data =&amp;gt; data[0])
  .then(first =&amp;gt; {
    alert(first.name);
  });
&lt;/pre&gt;

&lt;p&gt;Para efeito de aprendizado uma sintaxe alternativa, com &lt;a href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/import&#34;&gt;&lt;em&gt;import binding&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { setToken } from &#39;./http.js&#39;;
import { getAll as getAllUsers } from &#39;./modules/users/service.js&#39;;

setToken(&#39;XPTO&#39;); // Define o token de autentificação

// Carrega a primeira página de usuários
// Exibe um alerta com o nome do primeiro usuário retornado pelo serviço

getAllUsers({ page: 1 })
  .then(result =&amp;gt; result.data)
  .then(data =&amp;gt; data[0])
  .then(first =&amp;gt; {
    alert(first.name);
  });
&lt;/pre&gt;

&lt;p&gt;Este pode não parecer para alguns mas é um exemplo bem prático do uso de serviços.&lt;/p&gt;

&lt;p&gt;O serviço de &lt;em&gt;Http&lt;/em&gt; também é usado pelo &lt;em&gt;serviço de usuários&lt;/em&gt;, por isso é possível definir o &lt;strong&gt;&lt;em&gt;token&lt;/em&gt;&lt;/strong&gt; de autentificação antes de efetivamente usar os serviços, pois eles vão compartilhar o mesmo estado/serviço.&lt;/p&gt;

&lt;p&gt;Outra característica interessante é que esses serviços não estão ligados diretamente a nenhum contexto. Isso significa que não importa que ambiente você esteja ou que &lt;em&gt;framework&lt;/em&gt; você esta usando, os serviços são agnósticos. Eles podem ser usados no &lt;strong&gt;NodeJS, VueJS, ReactJS&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;p&gt;Este é um dos princípios do polimorfismos do JavaScript porém este é outro assunto.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Se quiser saber mais sobre meu trabalho visite meu blog&lt;a href=&#34;https://medium.com/@luizvinicius73&#34;&gt; https://medium.com/@luizvinicius73&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Este artigo foi originalmente postado no meu &lt;a href=&#34;https://medium.com/by-vinicius-reis/trabalhando-com-servicos-no-javascript-864310cf386c&#34;&gt;blog no medium&lt;/a&gt; em 31 de Julho de 2016&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ECMAScript 6, uma breve introdução à POO</title>
      <link>https://tableless.github.io/hugo-public/ecmascript-6-uma-breve-introducao-a-poo/</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/ecmascript-6-uma-breve-introducao-a-poo/</guid>
      <description>

&lt;p&gt;Bom galera, já falei aqui no tableless, sobre o uso de classes na ECMAScript 6, porém, foram exemplos bem superficiais. Então decidi criar um exemplo mais prático de como utilizá-la. Você pode encontrar o artigo que estou falando &lt;a href=&#34;http://tableless.com.br/tableless-weekly-5/&#34; title=&#34;Tableless Weekly 5&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;entendendo-o-projeto&#34;&gt;Entendendo o projeto&lt;/h2&gt;

&lt;p&gt;A ideia inicial foi criar uma mini (e põe mini nisso) loja virtual, utilizando dados em JSON.&lt;/p&gt;

&lt;p&gt;O que teremos, nada mais é que uma variável contendo dados em JSON e estes dados serão transformados em objetos&amp;#8230; Advinha? Objetos de uma classe da ES6.&lt;/p&gt;

&lt;h3 id=&#34;tá-mas-pra-quê&#34;&gt;Tá, mas pra quê?&lt;/h3&gt;

&lt;p&gt;Bem, hoje em dia temos muitas ferramentas no mercado que utilizam dados em JSON o tempo todo para o front-end. O AngularJS, o backbone.js, e vários outros, são frameworks que utilizam de dados JSON parar gerar views.&lt;/p&gt;

&lt;h2 id=&#34;estrutura-dos-arquivos&#34;&gt; Estrutura dos arquivos&lt;/h2&gt;

&lt;p&gt;Os arquivos do projeto seguem a seguinte estrutura:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;    -/css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        bootstrap.min.css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;    -/img&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        01.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        02.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        03.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;    -/js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        script.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como você já deve ter percebido, na pasta css temos o bootstrap, na pasta img, temos algumas imagens, temos também o arquivo index.html na raiz do projeto, e por fim, na pasta js temos o arquivo script.js, que é onde acontece a mágica.&lt;/p&gt;

&lt;p&gt;No final do artigo deixarei um link com o repositório deste projeto no github.&lt;/p&gt;

&lt;h2 id=&#34;finalmente-mãos-à-obra&#34;&gt;Finalmente, mãos à obra 🙂&lt;/h2&gt;

&lt;p&gt;Vamos começar pelo arquivo index.html, que tem uma estrutura bem simples, veja:&lt;/p&gt;

&lt;pre&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
&amp;lt;title&amp;gt;Teste com ECMAScript 6 classes&amp;lt;/title&amp;gt;
&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/bootstrap.min.css&#34;&amp;gt;
&amp;lt;style type=&#34;text/css&#34;&amp;gt;
    .old-price{
        text-decoration: line-through;
    }
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&#34;container&#34;&amp;gt;
        &amp;lt;div class=&#34;row&#34; id=&#34;lista&#34;&amp;gt;
 
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script type=&#34;text/javascript&#34; src=&#34;js/script.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Bem simples não?&lt;/p&gt;

&lt;p&gt;Vamos usar uma estrutura bem básica, pois a nossa mini loja só vai mostrar alguns produtos e pronto. Como eu já disse, o objetivo é usar a ES6.&lt;/p&gt;

&lt;p&gt;No final teremos o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-46212&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/zoa.jpg&#34; alt=&#34;zoa&#34; width=&#34;1177&#34; height=&#34;576&#34; srcset=&#34;uploads/2014/12/zoa.jpg 1177w, uploads/2014/12/zoa-265x129.jpg 265w, uploads/2014/12/zoa-400x195.jpg 400w&#34; sizes=&#34;(max-width: 1177px) 100vw, 1177px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bem, vamos estudar um pouco o HTML acima.&lt;/p&gt;

&lt;p&gt;Nas linhas 6 a 10, apenas criamos um css para &amp;#8220;riscar&amp;#8221; o preço antigo no caso de promoção usando a classe &lt;strong&gt;.old-price&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Na linha 13 criamos o container e na linha 14 uma div com o atributo id setado como &amp;#8220;lista&amp;#8221;, é nesta div onde carregaremos os produtos.&lt;/p&gt;

&lt;h3 id=&#34;preparado-vamos-ao-javascript&#34;&gt;Preparado? Vamos ao JavaScript.&lt;/h3&gt;

&lt;p&gt;O JavaScript será estudado mais a fundo, então não vou simplesmente colar o código e explicar as linhas como fiz com o HTML, vou fazer um passo à passo e no final mostro o resultado do arquivo.&lt;/p&gt;

&lt;h4 id=&#34;qual-o-primeiro-passo&#34;&gt;Qual o primeiro passo?&lt;/h4&gt;

&lt;p&gt;Habilitar a ES6 no seu navegador, é claro!&lt;/p&gt;

&lt;p&gt;Como a ES6 ainda não está funcionando totalmente nos navegadores e ainda não foi adotada como padrão, ela está por padrão desabilitada.&lt;/p&gt;

&lt;p&gt;Neste exemplo utilizei o Google Chrome Canary, indico que você o utilize também, mas nada contra o firefox.&lt;/p&gt;

&lt;p&gt;Para habilitar a ES6 no Chrome Canary, basta você abrir uma nova aba e acessar a url: &lt;strong&gt;chrome://flags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Após acessar esta url, você vai procurar algo parecido com a imagem abaixo, basta apenas habilitar e pronto:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-46218&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/zoa21.jpg&#34; alt=&#34;zoa2&#34; width=&#34;830&#34; height=&#34;316&#34; srcset=&#34;uploads/2014/12/zoa21.jpg 830w, uploads/2014/12/zoa21-265x100.jpg 265w, uploads/2014/12/zoa21-400x152.jpg 400w&#34; sizes=&#34;(max-width: 830px) 100vw, 830px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, podemos começar :).&lt;/p&gt;

&lt;p&gt;O primeiro passo, é habilitar o strict mode do JavaScript, pois objetos não podem ser utilizados sem o modo strict. Você pode ver mais sobre o strict mode [Bom galera, já falei aqui no tableless, sobre o uso de classes na ECMAScript 6, porém, foram exemplos bem superficiais. Então decidi criar um exemplo mais prático de como utilizá-la. Você pode encontrar o artigo que estou falando &lt;a href=&#34;http://tableless.com.br/tableless-weekly-5/&#34; title=&#34;Tableless Weekly 5&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;entendendo-o-projeto-1&#34;&gt;Entendendo o projeto&lt;/h2&gt;

&lt;p&gt;A ideia inicial foi criar uma mini (e põe mini nisso) loja virtual, utilizando dados em JSON.&lt;/p&gt;

&lt;p&gt;O que teremos, nada mais é que uma variável contendo dados em JSON e estes dados serão transformados em objetos&amp;#8230; Advinha? Objetos de uma classe da ES6.&lt;/p&gt;

&lt;h3 id=&#34;tá-mas-pra-quê-1&#34;&gt;Tá, mas pra quê?&lt;/h3&gt;

&lt;p&gt;Bem, hoje em dia temos muitas ferramentas no mercado que utilizam dados em JSON o tempo todo para o front-end. O AngularJS, o backbone.js, e vários outros, são frameworks que utilizam de dados JSON parar gerar views.&lt;/p&gt;

&lt;h2 id=&#34;estrutura-dos-arquivos-1&#34;&gt; Estrutura dos arquivos&lt;/h2&gt;

&lt;p&gt;Os arquivos do projeto seguem a seguinte estrutura:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;    -/css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        bootstrap.min.css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;    -/img&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        01.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        02.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        03.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;    -/js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;        script.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como você já deve ter percebido, na pasta css temos o bootstrap, na pasta img, temos algumas imagens, temos também o arquivo index.html na raiz do projeto, e por fim, na pasta js temos o arquivo script.js, que é onde acontece a mágica.&lt;/p&gt;

&lt;p&gt;No final do artigo deixarei um link com o repositório deste projeto no github.&lt;/p&gt;

&lt;h2 id=&#34;finalmente-mãos-à-obra-1&#34;&gt;Finalmente, mãos à obra 🙂&lt;/h2&gt;

&lt;p&gt;Vamos começar pelo arquivo index.html, que tem uma estrutura bem simples, veja:&lt;/p&gt;

&lt;pre&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
&amp;lt;title&amp;gt;Teste com ECMAScript 6 classes&amp;lt;/title&amp;gt;
&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/bootstrap.min.css&#34;&amp;gt;
&amp;lt;style type=&#34;text/css&#34;&amp;gt;
    .old-price{
        text-decoration: line-through;
    }
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&#34;container&#34;&amp;gt;
        &amp;lt;div class=&#34;row&#34; id=&#34;lista&#34;&amp;gt;
 
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script type=&#34;text/javascript&#34; src=&#34;js/script.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Bem simples não?&lt;/p&gt;

&lt;p&gt;Vamos usar uma estrutura bem básica, pois a nossa mini loja só vai mostrar alguns produtos e pronto. Como eu já disse, o objetivo é usar a ES6.&lt;/p&gt;

&lt;p&gt;No final teremos o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-46212&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/zoa.jpg&#34; alt=&#34;zoa&#34; width=&#34;1177&#34; height=&#34;576&#34; srcset=&#34;uploads/2014/12/zoa.jpg 1177w, uploads/2014/12/zoa-265x129.jpg 265w, uploads/2014/12/zoa-400x195.jpg 400w&#34; sizes=&#34;(max-width: 1177px) 100vw, 1177px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bem, vamos estudar um pouco o HTML acima.&lt;/p&gt;

&lt;p&gt;Nas linhas 6 a 10, apenas criamos um css para &amp;#8220;riscar&amp;#8221; o preço antigo no caso de promoção usando a classe &lt;strong&gt;.old-price&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Na linha 13 criamos o container e na linha 14 uma div com o atributo id setado como &amp;#8220;lista&amp;#8221;, é nesta div onde carregaremos os produtos.&lt;/p&gt;

&lt;h3 id=&#34;preparado-vamos-ao-javascript-1&#34;&gt;Preparado? Vamos ao JavaScript.&lt;/h3&gt;

&lt;p&gt;O JavaScript será estudado mais a fundo, então não vou simplesmente colar o código e explicar as linhas como fiz com o HTML, vou fazer um passo à passo e no final mostro o resultado do arquivo.&lt;/p&gt;

&lt;h4 id=&#34;qual-o-primeiro-passo-1&#34;&gt;Qual o primeiro passo?&lt;/h4&gt;

&lt;p&gt;Habilitar a ES6 no seu navegador, é claro!&lt;/p&gt;

&lt;p&gt;Como a ES6 ainda não está funcionando totalmente nos navegadores e ainda não foi adotada como padrão, ela está por padrão desabilitada.&lt;/p&gt;

&lt;p&gt;Neste exemplo utilizei o Google Chrome Canary, indico que você o utilize também, mas nada contra o firefox.&lt;/p&gt;

&lt;p&gt;Para habilitar a ES6 no Chrome Canary, basta você abrir uma nova aba e acessar a url: &lt;strong&gt;chrome://flags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Após acessar esta url, você vai procurar algo parecido com a imagem abaixo, basta apenas habilitar e pronto:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-46218&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/zoa21.jpg&#34; alt=&#34;zoa2&#34; width=&#34;830&#34; height=&#34;316&#34; srcset=&#34;uploads/2014/12/zoa21.jpg 830w, uploads/2014/12/zoa21-265x100.jpg 265w, uploads/2014/12/zoa21-400x152.jpg 400w&#34; sizes=&#34;(max-width: 830px) 100vw, 830px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, podemos começar :).&lt;/p&gt;

&lt;p&gt;O primeiro passo, é habilitar o strict mode do JavaScript, pois objetos não podem ser utilizados sem o modo strict. Você pode ver mais sobre o strict mode]&lt;a href=&#34;http://tableless.com.br/javascript-strict-mode/&#34; title=&#34;JavaScript Strict Mode&#34;&gt;2&lt;/a&gt; do Fabiano de Lima Abreu.&lt;/p&gt;

&lt;p&gt;Para fazer isto é simples, vamos inserir na primeira linha do arquivo o seguinte:&lt;/p&gt;

&lt;pre&gt;&#34;use strict&#34;;&lt;/pre&gt;

&lt;p&gt;Simples, não?&lt;/p&gt;

&lt;p&gt;Agora vamos criar a nossa classe Produto e seu método construtor, veja abaixo:&lt;/p&gt;

&lt;pre&gt;class Produto{
    constructor(codigo,nome,imagem,promocao,preco,desconto){
        this.codigo = codigo;
        this.nome = nome;
        this.imagem = imagem;
        this.promocao = promocao;
        this.preco = preco;
        this.desconto = desconto;
    }
}&lt;/pre&gt;

&lt;p&gt;Não precisa ser um gênio para entender esta parte, e se você chegou a ler o artigo que deixei no início deste, já estará familiarizado com o assunto.&lt;/p&gt;

&lt;p&gt;Criamos uma classe com seu método construtor, que possui os atributos, código, nome, imagem, promocao, preco e desconto.&lt;/p&gt;

&lt;p&gt;Bacana, e agora?&lt;/p&gt;

&lt;p&gt;Vamos criar um método para listagem de produtos, que receberá uma variável em JSON e organizará os produto no HTML.&lt;/p&gt;

&lt;p&gt;Criaremos o método lista, que receberá como parâmetro uma variável contendo o JSON:&lt;/p&gt;

&lt;pre&gt;lista(products){
}
&lt;/pre&gt;

&lt;p&gt;Em seguida criaremos uma variável lista pegando a div onde a lista será inserida pelo id:&lt;/p&gt;

&lt;pre&gt;lista(products){
    var lista = document.getElementById(&#34;lista&#34;);
}&lt;/pre&gt;

&lt;p&gt;Agora, vamos criar um laço de repetição que percorrerá nossa lista em JSON e criará seus elementos:&lt;/p&gt;

&lt;pre&gt;lista(products){
    var lista = document.getElementById(&#34;lista&#34;);
    for(var i=0; i &amp;lt; products.length; i++){
        //conteúdo do loop
    }
}&lt;/pre&gt;

&lt;p&gt;Dentro deste laço, criaremos e preencheremos os elementos HTML de cada produto, utilizaremos os thumbnails do bootstrap, como você pôde ver na foto com o resultado final.&lt;/p&gt;

&lt;p&gt;A estrutura básica será a seguinte:&lt;/p&gt;

&lt;pre&gt;&amp;lt;div class=&#34;col-xs-12 col-sm-6 col-md-4 col-lg-4&#34;&amp;gt;
    &amp;lt;div class=&#34;thumbnail&#34;&amp;gt;
        &amp;lt;h1 class=&#34;text-center&#34;&amp;gt;Sapatênis Puma Preto&amp;lt;/h1&amp;gt;
        &amp;lt;img src=&#34;img/01.jpg&#34;&amp;gt;
        &amp;lt;small class=&#34;old-price&#34;&amp;gt;R$ 250&amp;lt;/small&amp;gt;
        &amp;lt;p class=&#34;price&#34;&amp;gt;R$ 200&amp;lt;/p&amp;gt;
        &amp;lt;a class=&#34;btn btn-primary&#34;&amp;gt;Comprar&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Para cada produto lido através do JSON, teremos esta estrutura para exibi-lo.&lt;/p&gt;

&lt;p&gt;Primeiramente vamos instanciar a classe produto a cada repetição deste laço, utilizando o método construtor para atribuir às suas propriedades:&lt;/p&gt;

&lt;pre&gt;let produto = new Produto(products[i].codigo,products[i].nome,products[i].imagem,products[i].promocao,products[i].preco,products[i].desconto);&lt;/pre&gt;

&lt;p&gt;Quando criamos um objeto à partir de uma classe, é necessário a utilização da palavra reservada &lt;strong&gt;let&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Em seguida, vamos criar os elementos HTML dos produtos, começando pelas variáveis:&lt;/p&gt;

&lt;pre&gt;var column, thumbnail, title, image, old_price, price, btn;&lt;/pre&gt;

&lt;p&gt;Em seguida, atribuímos o HTML nessas variáveis:&lt;/p&gt;

&lt;pre&gt;column = document.createElement(&#34;div&#34;);
thumbnail = document.createElement(&#34;div&#34;);
title = document.createElement(&#34;h1&#34;);
image = document.createElement(&#34;img&#34;);
old_price = document.createElement(&#34;small&#34;);
price = document.createElement(&#34;p&#34;);
btn = document.createElement(&#34;a&#34;);&lt;/pre&gt;

&lt;p&gt;Em seguida, vamos adicionar as classes aos elementos para receberem a formatação do bootstrap:&lt;/p&gt;

&lt;pre&gt;column.classList.add(&#34;col-xs-12&#34;);
column.classList.add(&#34;col-sm-6&#34;);
column.classList.add(&#34;col-md-4&#34;);
column.classList.add(&#34;col-lg-4&#34;);

thumbnail.classList.add(&#34;thumbnail&#34;);

title.classList.add(&#34;text-center&#34;);

old_price.classList.add(&#34;old-price&#34;);

price.classList.add(&#34;price&#34;);

btn.classList.add(&#34;btn&#34;);
btn.classList.add(&#34;btn-primary&#34;);
btn.innerHTML = &#34;Comprar&#34;;&lt;/pre&gt;

&lt;p&gt;Para adiantar, já colocamos o innerHTML do botão com o texto &amp;#8220;Comprar&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Agora o que temos que fazer é inserir nos elementos os seus valores:&lt;/p&gt;

&lt;pre&gt;title.innerHTML = produto.nome;

image.setAttribute(&#34;src&#34;,produto.imagem);&lt;/pre&gt;

&lt;p&gt;Eu coloquei por enquanto, apenas o nome do produto, e sua imagem. Pois precisamos pensar na promoção.&lt;/p&gt;

&lt;p&gt;O atributo promocao, é um valor booleano, que nos mostrará se o produto vai ou não ter desconto.&lt;/p&gt;

&lt;p&gt;Caso promocao seja verdadeiro, colocaremos o preço normal do produto com a classe &lt;strong&gt;.old-price&lt;/strong&gt; que criamos lá em cima para que ele fique &amp;#8220;riscado&amp;#8221;, e o preço real será um cálculo do valor do produto subtraído do desconto. Caso ocorra o contrário, o elemento &lt;strong&gt;old_price&lt;/strong&gt; receberá um &lt;strong&gt;display:none&lt;/strong&gt; e o preço não sofrerá alteração:&lt;/p&gt;

&lt;pre&gt;if(produto.promocao == true){
    old_price.innerHTML = &#34;R$ &#34;+ produto.preco;
    price.innerHTML = &#34;R$ &#34;+ (produto.preco - produto.desconto);
}else{
    old_price.setAttribute(&#34;display&#34;,&#34;none&#34;);
    price.innerHTML = &#34;R$ &#34;+ produto.preco;
 }&lt;/pre&gt;

&lt;p&gt;E por fim, para finalizarmos o nosso laço de repetição, iremos dar um &lt;strong&gt;appendChild()&lt;/strong&gt; onde for necessário, criando a hierarquia do HTML:&lt;/p&gt;

&lt;pre&gt;thumbnail.appendChild(title);
thumbnail.appendChild(image);
thumbnail.appendChild(old_price);
thumbnail.appendChild(price);
thumbnail.appendChild(btn);

column.appendChild(thumbnail);

lista.appendChild(column);&lt;/pre&gt;

&lt;p&gt;Não vou postar o código final do nosso método, pois o artigo já está bem grande. Basta dar uma olhadinha no repositório no final do artigo e você verá a estrutura completa.&lt;/p&gt;

&lt;h3 id=&#34;beleza-mas-e-agora&#34;&gt;Beleza, mas e agora?&lt;/h3&gt;

&lt;p&gt;Bom, criei uma variável após o final de nossa classe Produto, com os dados em formato JSON para testarmos os produtos. Em um sistema real, estes dados viriam de fontes externas.&lt;/p&gt;

&lt;p&gt;Abaixo o código:&lt;/p&gt;

&lt;pre&gt;var products = [
 {
 codigo: 1,
 nome: &#34;Sapatênis Puma Preto&#34;,
 imagem: &#34;img/01.jpg&#34;,
 promocao: true,
 preco: 250.00,
 desconto: 50.00
 },
 {
 codigo: 2,
 nome: &#34;Sapatênis Preto Linha Vermelha&#34;,
 imagem: &#34;img/02.jpg&#34;,
 promocao: false,
 preco: 250.00,
 desconto: null
 },
 {
 codigo: 3,
 nome: &#34;Sapatênis Bege c/ Branco&#34;,
 imagem: &#34;img/03.jpg&#34;,
 promocao: false,
 preco: 250.00,
 desconto: null
 },
]&lt;/pre&gt;

&lt;p&gt;Por fim, basta apenas instanciar a classe Produto e chamarmos o método lista, passando como parâmetro nossa variável contendo os dados em JSON:&lt;/p&gt;

&lt;pre&gt;let produto = new Produto();
produto.lista(products);&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Bom galera, o artigo ficou um pouco longo, pois tentei ser o mais específico possível.&lt;/p&gt;

&lt;p&gt;Este foi só um exemplo do que podemos fazer com as novas features da ECMAScript 6 e as mudanças (pra melhor) que ela nos proporciona.&lt;/p&gt;

&lt;p&gt;Aguardamos ansiosamente que ela comece à ser suportada pelos browsers por completo, pois além de tanta coisa que se pode fazer com ela, o Angular 2.0 está sendo escrito nela também.&lt;/p&gt;

&lt;p&gt;Pra quem quiser dar um olhada no repositório com o código deste artigo basta seguir este &lt;a href=&#34;https://github.com/lnlwd/ECMAScript6-loja&#34; title=&#34;Repositório&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por hoje é só 🙂 até mais galera!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript: entendendo o this</title>
      <link>https://tableless.github.io/hugo-public/javascript-entendendo-o-this/</link>
      <pubDate>Thu, 25 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/javascript-entendendo-o-this/</guid>
      <description>

&lt;p&gt;O operador &lt;strong&gt;this&lt;/strong&gt; é um dos maiores responsáveis por erros e pegadinhas em um código JavaScript. Entender o seu mecanismo de funcionamento e criação é um grande passo para tirar maior proveito da linguagem.&lt;/p&gt;

&lt;h2 id=&#34;contexto-de-execução&#34;&gt;Contexto de execução&lt;/h2&gt;

&lt;p&gt;Toda função JavaScript, ao ser executada, gera uma associação do objeto criado pelo interpretador através da palavra reservada &lt;strong&gt;this&lt;/strong&gt;. A especificação da ECMAScript chama isso de &lt;strong&gt;ThisBinding&lt;/strong&gt;, um evento que acontece toda vez que um código JavaScript é executado e um novo contexto de execução é estabelecido. O valor do &lt;strong&gt;this&lt;/strong&gt; é constante e ele existe enquanto este contexto de execução existir.&lt;/p&gt;

&lt;p&gt;No browser, o &lt;strong&gt;this&lt;/strong&gt; &amp;#8220;padrão&amp;#8221; referencia o objeto global &lt;strong&gt;window&lt;/strong&gt;. Toda função declarada no escopo global também vai possuir o objeto &lt;strong&gt;window&lt;/strong&gt; como valor do &lt;strong&gt;this&lt;/strong&gt; (no &lt;a href=&#34;http://loopinfinito.com.br/2013/07/16/javascript-strict-mode/&#34; title=&#34;http://loopinfinito.com.br/2013/07/16/javascript-strict-mode/&#34; target=&#34;_blank&#34;&gt;strict mode&lt;/a&gt; vai ser &lt;strong&gt;undefined&lt;/strong&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function myFunc () {
     console.log(this);   
}

var myFunc2 = function () {
     console.log(this);   
}

myFunc(); // Window (...)
myFunc2();  // Window (...)&lt;/pre&gt;

&lt;h2 id=&#34;objetos&#34;&gt;Objetos&lt;/h2&gt;

&lt;p&gt;Quando uma função representa um método de um objeto, o valor do &lt;strong&gt;this&lt;/strong&gt; passa a ser o objeto referenciado. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var myObj = {
    init: function () {
        console.log(this);   
    }
};

myObj.init(); // Object {init: function}&lt;/pre&gt;

&lt;p&gt;O mesmo acontece quando um objeto é criado utilizando uma &lt;a href=&#34;http://tableless.com.br/javascript-objetos-literais-vs-funcoes-construtoras/&#34; title=&#34;http://tableless.com.br/javascript-objetos-literais-vs-funcoes-construtoras/&#34; target=&#34;_blank&#34;&gt;função construtora&lt;/a&gt;, só que nesse caso o &lt;strong&gt;this&lt;/strong&gt; representa o objeto instanciado.&lt;/p&gt;

&lt;pre&gt;function MyObj () {
    console.log(this);   
}

var obj = new MyObj(); // MyObj {}&lt;/pre&gt;

&lt;h2 id=&#34;callbacks-eventos&#34;&gt;Callbacks &amp;amp; Eventos&lt;/h2&gt;

&lt;p&gt;Um dos erros mais comuns acontece quando utilizamos a palavra reservada &lt;strong&gt;this&lt;/strong&gt; dentro de um &lt;em&gt;callback&lt;/em&gt; e confundimos seu valor. O &lt;strong&gt;this&lt;/strong&gt; dentro do &lt;em&gt;callback&lt;/em&gt; vai guardar o valor do objeto pai da função &lt;em&gt;callback&lt;/em&gt; e não da função que recebe o &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var myObj = {
    init: function (callback) {
        callback(); 
    }
};

myObj.init(function () {
    console.log(this); // Window (...)  
});&lt;/pre&gt;

&lt;p&gt;Para esses casos especiais, podemos definir o valor do &lt;strong&gt;this&lt;/strong&gt; utilizando os métodos &lt;strong&gt;call&lt;/strong&gt; e &lt;strong&gt;apply&lt;/strong&gt; (falo mais sobre eles logo, logo).&lt;/p&gt;

&lt;p&gt;Outro ponto que merece atenção é o uso do &lt;strong&gt;this&lt;/strong&gt; na hora de anexar eventos a um elemento. Nesse caso, o valor da palavra reservada representa o elemento e não a função.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var myObj = {
    init: function () {
        this.link = document.querySelector(&#39;a&#39;);
        this.link.onclick = function (e) {
            console.log(this);   
        };
    }
};

myObj.init();
// clique no link: &amp;lt;a href=&#34;#&#34;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;Aqui a solução é armazenar o estado do objeto em uma variável, normalmente chamada de &lt;strong&gt;that&lt;/strong&gt; ou &lt;strong&gt;self&lt;/strong&gt; e utilizá-la na função do evento.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var myObj = {
    init: function () {
        var that = this;
        this.link = document.querySelector(&#39;a&#39;);
        this.link.onclick = function (e) {
            console.log(that);   
        };
    }
};

myObj.init();
// clique no link: Object {init: function, link: a}&lt;/pre&gt;

&lt;h2 id=&#34;call-apply&#34;&gt;call &amp;amp; apply&lt;/h2&gt;

&lt;p&gt;Os métodos &lt;strong&gt;call&lt;/strong&gt; e &lt;strong&gt;apply&lt;/strong&gt; permitem que seja definido um valor para o &lt;strong&gt;this&lt;/strong&gt; de uma função. Vejamos o nosso exemplo de &lt;em&gt;callback&lt;/em&gt;, agora utilizando uma chamada com o método &lt;strong&gt;call&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var myObj = {
    init: function (callback) {
        callback.call(this); 
    }
};

myObj.init(function () {
    console.log(this); // Object {init: function}
});&lt;/pre&gt;

&lt;p&gt;Notem que o valor retornado pelo log do console agora foi o próprio objeto ao invés do objeto global &lt;strong&gt;window&lt;/strong&gt;. Isto porque executamos o &lt;em&gt;callback&lt;/em&gt; através do método &lt;strong&gt;call&lt;/strong&gt;, definindo o valor do &lt;strong&gt;this&lt;/strong&gt; no contexto de execução como sendo o &lt;strong&gt;this&lt;/strong&gt; do objeto.&lt;/p&gt;

&lt;p&gt;Sobre os métodos &lt;strong&gt;call&lt;/strong&gt; e &lt;strong&gt;apply&lt;/strong&gt;, a principal diferença entre eles é que um permite a passagem de argumentos utilizando um &lt;em&gt;array&lt;/em&gt; enquanto o outro aceita os argumentos como &lt;em&gt;strings&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;fun.apply(thisArg[, argsArray])

fun.call(thisArg[, arg1[, arg2[, ...]]])&lt;/pre&gt;

&lt;h2 id=&#34;referências&#34;&gt;Referências&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&#34; target=&#34;_blank&#34;&gt;MDN &amp;#8211; this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&#34; target=&#34;_blank&#34;&gt;MDN &amp;#8211; apply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&#34; target=&#34;_blank&#34;&gt;MDN &amp;#8211; call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.digital-web.com/articles/scope_in_javascript/&#34; target=&#34;_blank&#34;&gt;Scope in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>