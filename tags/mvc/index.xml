<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mvc on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/mvc/index.xml</link>
    <description>Recent content in Mvc on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/mvc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Porque o Codeigniter ainda é uma boa opção</title>
      <link>https://tableless.github.io/hugo-public/porque-codeigniter-ainda-e-uma-boa-opcao/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/porque-codeigniter-ainda-e-uma-boa-opcao/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-codeigniter&#34;&gt;O que é Codeigniter?&lt;/h2&gt;

&lt;p&gt;O &lt;strong&gt;Codeigniter&lt;/strong&gt; é um &lt;em&gt;framework&lt;/em&gt; para desenvolvimento web baseado na arquitetura MVC. Se você não sabe o que significa MVC ou não entende bem o seu funcionamento poderá encontrar maiores informações &lt;a href=&#34;http://tableless.com.br/mvc-afinal-e-o-que/&#34; target=&#34;_blank&#34;&gt;neste post&lt;/a&gt; do Tableless.&lt;/p&gt;

&lt;p&gt;Este &lt;em&gt;framework&lt;/em&gt; apresenta uma estrutura que lhe permite de forma rápida fazer uso de bibliotecas para ganhar tempo e aproveitar a reutilização de código. Entenda este &lt;em&gt;framework&lt;/em&gt; como um kit de ferramentas que tornarão seu ambiente de desenvolvimento ainda mais rápido.&lt;/p&gt;

&lt;h2 id=&#34;porque-o-codeigniter-ainda-é-uma-boa-opção&#34;&gt;Porque o Codeigniter ainda é uma boa opção?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Possui uma excelente documentação: considere documentação imprescindível para qualquer ferramenta de desenvolvimento que você usar. Sem documentação suficiente você sofre muito para fazer coisas que deveriam ser simples;&lt;/li&gt;
&lt;li&gt;Permite de forma não tão complexa ter um &lt;em&gt;engine&lt;/em&gt; segura;&lt;/li&gt;
&lt;li&gt;Não precisa instalar \o/;&lt;/li&gt;
&lt;li&gt;Você não terá problemas para estender classes se precisar (e acredite, você vai precisar 😀 );&lt;/li&gt;
&lt;li&gt;Não precisa se preocupar tanto com pré-requisitos em servidores;&lt;/li&gt;
&lt;li&gt;É muito leve em relação a outros &lt;em&gt;frameworks&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Não será descontinuado tão cedo. O medo já passou;&lt;/li&gt;
&lt;li&gt;Mantém-se atualizado;&lt;/li&gt;
&lt;li&gt;Está entre os &lt;em&gt;frameworks&lt;/em&gt; PHP favoritos para 2015 (&lt;a title=&#34;frameworks PHP favoritos 2015&#34; href=&#34;http://icl.googleusercontent.com/?lite_url=http://blog.a-way-out.net/blog/2015/03/27/php-framework-benchmark/&amp;ei=UJ3_QIlA&amp;lc=pt-BR&amp;s=1&#34; target=&#34;_blank&#34;&gt;veja aqui&lt;/a&gt;);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se você nunca usou o Codeigniter, veja dicas e técnicas de utilização hackeando a &lt;a title=&#34;codeigniter&#34; href=&#34;http://www.codeigniter.com/&#34; target=&#34;_blank&#34;&gt;documentação aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;faça-seu-hello-world-com-o-codeigniter&#34;&gt;Faça seu Hello World com o Codeigniter&lt;/h2&gt;

&lt;p&gt;Acesse a página inicial do Codeigniter para fazer &lt;a href=&#34;http://www.codeigniter.com/download&#34; target=&#34;_blank&#34;&gt;download&lt;/a&gt; da versão atual do &lt;em&gt;framework&lt;/em&gt;. A versão utilizada para a realização deste post é a 3.0.&lt;/p&gt;

&lt;p&gt;Para que você possa fazer uso do &lt;em&gt;framework&lt;/em&gt; será necessário a utilização de um servidor local. Você pode usar, por exemplo, ferramentas como o &lt;a href=&#34;https://www.apachefriends.org/pt_br/index.html&#34; target=&#34;_blank&#34;&gt;Xampp&lt;/a&gt;, que possui Apache, PHP e MySql disponíveis.&lt;/p&gt;

&lt;p&gt;Após isto, descompacte o conteúdo do arquivo que você baixou no site do Codeigniter e mova o seu conteúdo para a pasta do servidor, no caso do Xampp (usando o Windows) ficaria em C:\xampp\htdocs.&lt;/p&gt;

&lt;p&gt;Colocando a pasta do Codeigniter neste local será possível visualizar uma estrutura como a que segue:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-49601 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/estrutura-inicial-codeigniter.png&#34; alt=&#34;estrutura do codeigniter&#34; width=&#34;688&#34; height=&#34;273&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dentro da pasta &lt;em&gt;application&lt;/em&gt;, ficarão todos os arquivos importantes para o desenvolvimento da sua aplicação.  Na pasta &lt;em&gt;system&lt;/em&gt; ficam o que podemos chamar de &amp;#8220;&lt;em&gt;kernel&lt;/em&gt;&amp;#8221; do &lt;em&gt;framework&lt;/em&gt;, mas isso é assunto para outro momento. 😀&lt;/p&gt;

&lt;p&gt;Dentro da pasta &lt;em&gt;application&lt;/em&gt; você encontrará duas pastas importantes para o nosso &amp;#8220;&lt;em&gt;Hello World&lt;/em&gt;&amp;#8220;, sendo elas: a pasta &lt;em&gt;controller&lt;/em&gt; e a pasta &lt;em&gt;views&lt;/em&gt;. Novamente, se você tem dúvidas sobre a nomenclatura destas pastas e como funciona a arquitetura MVC, &lt;a href=&#34;http://tableless.com.br/mvc-afinal-e-o-que/&#34; target=&#34;_blank&#34;&gt;este post&lt;/a&gt; pode te auxiliar.&lt;/p&gt;

&lt;p&gt;Com o Apache inicializado, acesse o endereço: &lt;strong&gt;&lt;em&gt;&lt;a href=&#34;http://localhost/CodeIgniter-3.0.0/&#34;&gt;http://localhost/CodeIgniter-3.0.0/&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. Será possível ver seu Codeigniter funcionando conforme a imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/screenshot-localhost-2015-06-17-10-47-23.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49602 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/screenshot-localhost-2015-06-17-10-47-23.png&#34; alt=&#34;Tela - Seja bem vindo ao Codeigniter&#34; width=&#34;1512&#34; height=&#34;394&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao acessar a pasta &lt;em&gt;controller&lt;/em&gt; será possível visualizar o controlador responsável pela exibição desta tela. Dentro do arquivo também será possível verificar qual a _view_ chamada para exibir os dados na tela.&lt;/p&gt;

&lt;p&gt;Acesse a &lt;em&gt;view&lt;/em&gt; existente (na pasta &lt;em&gt;views&lt;/em&gt;) e você poderá alterar o conteúdo HTML a ser exibido, como no exemplo abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/screenshot-localhost-2015-06-17-10-51-21.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-49603 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/screenshot-localhost-2015-06-17-10-51-21.png&#34; alt=&#34;Conteúdo HTML Hello World com Codeigniter&#34; width=&#34;302&#34; height=&#34;141&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao acessar os arquivos conforme explicado neste post você verá como é fácil a realização deste exemplo. Até breve \o/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entendendo o padrão MVC na prática</title>
      <link>https://tableless.github.io/hugo-public/entendendo-o-padrao-mvc-na-pratica/</link>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/entendendo-o-padrao-mvc-na-pratica/</guid>
      <description>&lt;p&gt;Práticas modernas do PHP exigem estudo e preparação, e o padrão de projeto que merece muita atenção é o MVC. Muita gente conhece este padrão através dos &lt;em&gt;frameworks&lt;/em&gt; (isso não é um problema, eu mesmo estou neste grupo), mas ir a fundo é essencial para evitar erros e falar coisas como:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Seu MVC está errado, o &lt;em&gt;controller&lt;/em&gt; está maior que o &lt;em&gt;model&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Este erro de definição acontece pois em nenhum lugar está escrito que a quantidade de linhas define o padrão MVC, mas vamos entender isto melhor?&lt;/p&gt;

&lt;h2 id=&#34;as-camadas-do-mvc&#34;&gt;As camadas do MVC&lt;/h2&gt;

&lt;h3 id=&#34;o-que-é-model&#34;&gt;O que é &lt;em&gt;Model&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Model&lt;/em&gt; é onde fica a lógica da aplicação. Só isso.&lt;/p&gt;

&lt;p&gt;Vai disparar um e-mail? Validar um formulário? Enviar ou receber dados do banco? Não importa. A &lt;em&gt;model&lt;/em&gt; deve saber como executar as tarefas mais diversa, mas não precisa saber quando deve ser feito, nem como mostrar estes dados.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-view&#34;&gt;O que é &lt;em&gt;View&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;View&lt;/em&gt; exibe os dados. Só isso.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View&lt;/em&gt; não é só o HTML, mas qualquer tipo de retorno de dados, como &lt;em&gt;PDF&lt;/em&gt;, &lt;em&gt;Json&lt;/em&gt;, &lt;em&gt;XML&lt;/em&gt;, o retorno dos dados do servidor &lt;em&gt;RESTFull&lt;/em&gt;, os &lt;em&gt;tokens&lt;/em&gt; de autenticação &lt;em&gt;OAuth2&lt;/em&gt;, entre outro. Qualquer retorno de dados para uma interface qualquer (o navegador, por exemplo) é responsabilidade da &lt;em&gt;view&lt;/em&gt;. A &lt;em&gt;view&lt;/em&gt; deve saber renderizar os dados corretamente, mas não precisa saber como obtê-los ou quando renderizá-los.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-controller&#34;&gt;O que é &lt;em&gt;Controller&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;O &lt;em&gt;controller&lt;/em&gt; diz quando as coisas devem acontecer. Só isso.&lt;/p&gt;

&lt;p&gt;É usado para intermediar a &lt;em&gt;model&lt;/em&gt; e a _view_ de uma camada. Por exemplo, para pegar dados da &lt;em&gt;model&lt;/em&gt; (guardados em um banco) e exibir na &lt;em&gt;view&lt;/em&gt; (em uma página HTML), ou pegar os dados de um formulário (&lt;em&gt;view&lt;/em&gt;) e enviar para alguém (&lt;em&gt;model&lt;/em&gt;). Também é responsabilidade do &lt;em&gt;controller&lt;/em&gt; cuidar das requisições (&lt;em&gt;request&lt;/em&gt; e &lt;em&gt;response&lt;/em&gt;) e isso também inclui os famosos &lt;em&gt;middlewares&lt;/em&gt; (&lt;a href=&#34;http://laravel.com/&#34; target=&#34;_blank&#34;&gt;Laravel&lt;/a&gt;, &lt;a href=&#34;http://www.slimframework.com/&#34; target=&#34;_blank&#34;&gt;Slim Framework&lt;/a&gt;, &lt;a href=&#34;http://expressjs.com/&#34; target=&#34;_blank&#34;&gt;Express&lt;/a&gt;, &lt;a href=&#34;http://www.rubyonrails.com.br/&#34; target=&#34;_blank&#34;&gt;Ruby on Rails&lt;/a&gt;, etc.). O &lt;em&gt;controller&lt;/em&gt; não precisa saber como obter os dados nem como exibi-los, só quando fazer isso.&lt;/p&gt;

&lt;h2 id=&#34;na-prática&#34;&gt;Na prática&lt;/h2&gt;

&lt;p&gt;Uma sugestão aos desenvolvedores é criar seu próprio &lt;em&gt;framework&lt;/em&gt; de estudo (e publicar no &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;) mas nunca os usar em produção. Esta prática te faz compreender o quanto você conhece da linguagem, e daqui a algum tempo, ver o quanto melhorou.&lt;/p&gt;

&lt;p&gt;Neste estudo, vamos criar uma aplicação MVC simples com PHP, usando práticas modernas.&lt;/p&gt;

&lt;p&gt;Para começar, vamos utilizar a ideia de que não devemos criar nada que já existe: este é o princípio da interoperabilidade buscada pelo &lt;a href=&#34;http://www.php-fig.org/&#34; target=&#34;_blank&#34;&gt;PHP-FIG&lt;/a&gt; (grupo formado pelas principais empresas e grupos PHP para definir boas práticas e padrões). Utilizaremos &lt;a href=&#34;http://www.php-fig.org/psr/psr-4/&#34; target=&#34;_blank&#34;&gt;PSR-4&lt;/a&gt; e &lt;a href=&#34;https://getcomposer.org/&#34; target=&#34;_blank&#34;&gt;Composer&lt;/a&gt; para gerenciar o carregamento das classes.&lt;/p&gt;

&lt;p&gt;Para instalar o Composer, cito uma parte do artigo &lt;a href=&#34;http://tableless.com.br/composer-para-iniciantes/&#34; target=&#34;_blank&#34;&gt;Composer para iniciantes&lt;/a&gt; de &lt;a href=&#34;http://www.andrebian.com/&#34; target=&#34;_blank&#34;&gt;Andre Cardoso&lt;/a&gt; aqui no Tableless:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primeiramente você precisa realizar o download do &lt;em&gt;phar&lt;/em&gt; do composer. O &lt;a title=&#34;Descubra o que é um arquivo Phar&#34; href=&#34;https://php.net/manual/pt_BR/book.phar.php&#34; target=&#34;_blank&#34;&gt;phar&lt;/a&gt; é um empacotamento de uma aplicação e é utilizado para fornecer bibliotecas e ferramentas nas quais o desenvolvedor não tem de se preocupar com sua estrutura. Em outras palavras, é pegar e usar.&lt;/li&gt;
&lt;li&gt;Para que você obtenha o composer há duas maneiras distintas. Através da biblioteca &lt;a title=&#34;Descubra o que é cURL&#34; href=&#34;http://en.wikipedia.org/wiki/CURL&#34; target=&#34;_blank&#34;&gt;cURL&lt;/a&gt; e através do próprio PHP. Basta selecionar uma das opções abaixo e executar em seu terminal.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instalando via cURL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -sS https://getcomposer.org/installer | php&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instalando via PHP:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php -r “readfile(‘https://getcomposer.org/installer’);” | php&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para saber mais sobre &lt;a href=&#34;http://www.php-fig.org/psr/psr-4/&#34; target=&#34;_blank&#34;&gt;PSR-4 veja o guia oficial aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Na raiz do diretório do seu projeto crie estes 5 arquivos (e diretórios):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;src/App/Mvc/Controller.php&lt;/li&gt;
&lt;li&gt;src/App/Mvc/Model.php&lt;/li&gt;
&lt;li&gt;src/App/Mvc/View.php&lt;/li&gt;
&lt;li&gt;composer.json&lt;/li&gt;
&lt;li&gt;index.php&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ao baixar o composer.phar (explicado acima) você também o terá no diretório raiz, junto ao composer.json e ao index.php&lt;/p&gt;

&lt;p&gt;O seu arquivo composer.json deverá ter o conteúdo a seguir:&lt;/p&gt;

&lt;pre&gt;{
   &#34;autoload&#34;: {
      &#34;psr-4&#34;: {
         &#34;App\\&#34;: &#34;src/App&#34;
      }
   }
}&lt;/pre&gt;

&lt;p&gt;Rode o comando &lt;code&gt;php composer.phar install.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A ideia é que o nosso &lt;em&gt;controller&lt;/em&gt; carregue as informações da _model _e as envie para a &lt;em&gt;view&lt;/em&gt;. Pensando nisso, faremos com que o &lt;em&gt;controller&lt;/em&gt; carregue ambas as classes: &lt;em&gt;Model&lt;/em&gt; e &lt;em&gt;View&lt;/em&gt;. A sequência para criá-las é:&lt;/p&gt;

&lt;p&gt;Conteúdo do arquivo src/App/Mvc/Controller.php:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class Controller
   {
      ...
   }&lt;/pre&gt;

&lt;p&gt;Conteúdo do arquivo src/App/Mvc/Model.php:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class Model
   {
      ...
   }&lt;/pre&gt;

&lt;p&gt;Conteúdo do arquivo src/App/Mvc/View.php:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class View
   {
      ...
   }&lt;/pre&gt;

&lt;p&gt;Seguimos algumas regras da PSR-4: primeiro registramos um &lt;em&gt;namespace&lt;/em&gt; no composer.json que vai até o diretório src/App. Toda classe tem um &lt;em&gt;namespace&lt;/em&gt; e o App do começo indica o diretório que registramos (src/App). O Mvc é o diretório seguinte (ficando src/App/Mvc) e a classe tem o mesmo nome do arquivo (src/App/Mvc/Controller.php). Com isso podemos carregar as classes dinamicamente:&lt;/p&gt;

&lt;p&gt;Conteúdo do arquivo index.php:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   require &#39;vendor/autoload.php&#39;;
   $controller = new App\Mvc\Controller();&lt;/pre&gt;

&lt;p&gt;Nossa classe ainda não faz nada, então vamos testar com algo mais concreto: no Controller.php adicione um novo método chamado index() &amp;#8211; os métodos públicos de um &lt;em&gt;Controller&lt;/em&gt; são chamados de &lt;em&gt;actions&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class Controller
   {
      public function index()
      {
         echo &#39;Olá mundo!&#39;;
      }
   }&lt;/pre&gt;

&lt;p&gt;E no index.php adicione no final a linha:&lt;/p&gt;

&lt;pre&gt;$controller-&amp;gt;index();&lt;/pre&gt;

&lt;p&gt;Ao rodar o index.php você verá um &lt;em&gt;&amp;#8220;Olá mundo!&amp;#8221;&lt;/em&gt; na tela. Agora vamos separar este código nas camadas do MVC.&lt;/p&gt;

&lt;p&gt;No &lt;em&gt;model&lt;/em&gt;, vamos criar o método que serve o texto em questão. Ele poderia carregar um componente que facilitaria as tarefas com o banco de dados, como o &lt;a href=&#34;http://www.doctrine-project.org/&#34; target=&#34;_blank&#34;&gt;Doctrine&lt;/a&gt;, por exemplo, mas aqui só retorna um texto.&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class Model
   {
      public function getText($str = &#39;Olá mundo!&#39;)
      {
         return $str;
      }
   }&lt;/pre&gt;

&lt;p&gt;Na &lt;em&gt;view&lt;/em&gt; vamos imprimir este texto na tela. Poderíamos carregar um &lt;em&gt;template engine&lt;/em&gt; (&lt;a href=&#34;http://laravel.com/docs/5.0/templates&#34; target=&#34;_blank&#34;&gt;Blade&lt;/a&gt;, &lt;a href=&#34;http://twig.sensiolabs.org/&#34; target=&#34;_blank&#34;&gt;Twig&lt;/a&gt;, etc.), ou até criar o nosso próprio, mas ele só fará um &lt;em&gt;echo&lt;/em&gt; mesmo.&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class View
   {
      public function render($str)
      {
         echo $str;
      }
   }&lt;/pre&gt;

&lt;p&gt;E o &lt;em&gt;controller&lt;/em&gt; intermediando tudo isso:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class Controller
   {
      public function index()
      {
         $model = new Model;
         $view = new View;
         $view-&amp;gt;render($model-&amp;gt;getText());
      }
   }&lt;/pre&gt;

&lt;p&gt;Rode o index.php novamente e você vai obter o mesmo resultado anterior, mas agora com uma estrutura MVC.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Note que neste exemplo a maior classe é o &lt;em&gt;controller&lt;/em&gt; (com 14 linhas) e mesmo assim não estamos &amp;#8220;quebrando o MVC&amp;#8221;. Também não há nada de absurdo, como carregar a classe &lt;em&gt;Model&lt;/em&gt; no &lt;em&gt;Controller&lt;/em&gt; e passar todas as configurações gigantescas ali dentro. Mesmo que não seja uma quebra de MVC, o &lt;em&gt;Model&lt;/em&gt; ainda vai cuidar de tudo. O ideal é mover o máximo de lógica para dentro da &lt;em&gt;Model&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Apenas para reforçar, o exemplo abaixo deveria estar dentro de um arquivo de &lt;em&gt;Model&lt;/em&gt;, e nunca no &lt;em&gt;Controller&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;$users = User::whereRaw(&#39;age &amp;gt; ? and votes = 100&#39;, [25])-&amp;gt;get();&lt;/pre&gt;

&lt;p&gt;Este último exemplo foi retirado de &lt;a href=&#34;http://laravel.com/docs/5.0/eloquent&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://laravel.com/docs/5.0/eloquent&#34;&gt;http://laravel.com/docs/5.0/eloquent&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quanto mais organizada e centralizada a lógica, melhor. Pense nisso e comece a pesquisar &lt;a href=&#34;https://www.google.com.br/search?q=Dependency+Injection&amp;oq=Dependency+Injection&amp;aqs=chrome..69i57&amp;sourceid=chrome&amp;es_sm=122&amp;ie=UTF-8&#34; target=&#34;_blank&#34;&gt;Dependency Injection&lt;/a&gt;. Isso organiza seu código ainda mais.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Você conhece o Framework brasileiro Maestro?</title>
      <link>https://tableless.github.io/hugo-public/voce-conhece-o-framework-brasileiro-maestro/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/voce-conhece-o-framework-brasileiro-maestro/</guid>
      <description>

&lt;p&gt;Aqui em nossa Universidade tivemos o privilégio de poder construir um framework quase que do zero, adaptado inicialmente às nossas necessidades. Tínhamos como desafio criar uma ERP acadêmica, caminho este que temos percorrido desde 2002. São quase 13 anos de muita experiência e dedicação, e neste ano de 2015 estamos contribuindo (ou tentando) disponibilizando o framework para a comunidade. Sabemos que não basta apenas disponibilizar o código fonte, mas precisamos também criar artigos e prover suporte para que todos possam se beneficiar deste framework.&lt;/p&gt;

&lt;h2 id=&#34;vamos-então-falar-um-pouco-do-maestro-framework&#34;&gt;Vamos então falar um pouco do Maestro Framework&lt;/h2&gt;

&lt;p&gt;O Maestro é um framework MVC em PHP (5.4 ou superior). Suporta os bancos de dados Oracle, Mysql, PostgreSQL, Sqlite. Ele é compatível com o Firefox/Safari/Chrome. A principal característica do framework é que ele foi concebido para o desenvolvimento de software exclusivamente. Se você pretende criar um blog ou um site, existem frameworks melhores por aí. Quando falamos em software, estamos abordando a criação de formulários, a entrada de dados, o processamento deles e posteriormente a sua saída seja em forma de relatórios (PDF) ou gráficos. Estamos sempre voltados a criação de software, pois é a nossa necessidade básica atualmente.&lt;/p&gt;

&lt;h2 id=&#34;quer-ver-uma-demo&#34;&gt;Quer ver uma demo!&lt;/h2&gt;

&lt;p&gt;É claro que quando apresentamos uma tecnologia nova, é melhor dar uma &amp;#8220;espiada&amp;#8221; no seu funcionamento antes de partir para qualquer informação mais profunda. Vou deixar dois links a seguir para que você possa acessar e ver:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.danielschmitz.com.br/maestro/index.php/guia/main&#34;&gt;http://www.danielschmitz.com.br/maestro/index.php/guia/main&lt;/a&gt; Este é um guia que criamos com diversas informações sobre o framework. Você pode consultá-lo sempre que quiser. Se for seu desejo continuar a estudar o framework, este guia contém informações importantes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.danielschmitz.com.br/maestro/index.php/exemplos/main&#34;&gt;http://www.danielschmitz.com.br/maestro/index.php/exemplos/main&lt;/a&gt; Aqui temos diversos exemplos tanto de componentes quanto de fluxo e utilidades em geral. Alguns exemplos contém erros e estamos empenhados em saná-los.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;github-instalação&#34;&gt;Github &amp;amp; Instalação&lt;/h2&gt;

&lt;p&gt;Estamos exportando o framework para o Github. Inicialmente ele estava alocado no SVN da nossa instituição e sabemos que ele deve estar no Github para uma melhor distribuição do código. O endereço é:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/frameworkmaestro/maestro/releases/tag/v1.0&#34;&gt;https://github.com/frameworkmaestro/maestro/releases/tag/v1.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para executar o framework no seu computador, basta fazer o download do zip e colocar a pasta &lt;em&gt;maestro&lt;/em&gt; no seu diretório web. Também pode-se clonar o projeto diretamente do master, caso deseje.&lt;/p&gt;

&lt;p&gt;Neste artigo estamos usando o WAMP SERVER para facilitar, então basta baixar o Maestro e colocá-lo na pasta &lt;strong&gt;c:\wamp\www,&lt;/strong&gt; conforme a imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/004.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-48348&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/004.png&#34; alt=&#34;004&#34; width=&#34;522&#34; height=&#34;460&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com o maestro no lugar certo, basta acessar:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost/maestro/&#34;&gt;http://localhost/maestro/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para ver o mesmo guia online que disponibilizei no início do artigo. Se quiser ver os exemplos diretamente da sua instalação, basta acessar:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost/maestro/index.php/exemplos/main&#34;&gt;http://localhost/maestro/index.php/exemplos/main&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se tudo funcionou, estamos prontos para começar a entender melhor o framework, no qual veremos mais informações no próximo artigo! Qualquer dificuldade ou dúvida, comente!&lt;/p&gt;

&lt;p&gt;Até a próxima pessoal!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MVC – Afinal, é o quê ?</title>
      <link>https://tableless.github.io/hugo-public/mvc-afinal-e-o-que/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/mvc-afinal-e-o-que/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Model–view–controller (MVC)&lt;/strong&gt; is a software &lt;strong&gt;architectural pattern&lt;/strong&gt; for implementing user interfaces. It &lt;strong&gt;divides&lt;/strong&gt; a given &lt;strong&gt;software&lt;/strong&gt; application into &lt;strong&gt;three&lt;/strong&gt; interconnected &lt;strong&gt;parts&lt;/strong&gt;, so as to separate &lt;strong&gt;internal&lt;/strong&gt; representations of &lt;strong&gt;information&lt;/strong&gt; from the ways that &lt;strong&gt;information&lt;/strong&gt; is &lt;strong&gt;presented&lt;/strong&gt; to or accepted from the user. &amp;#8211; Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Leia atentamente:  &lt;strong&gt;architecture pattern&lt;/strong&gt;. Reforcei isso pois no início de meus estudos deparei-me com alguns sites dizendo que MVC era um &lt;strong&gt;design pattern&lt;/strong&gt;, padrão sobre o design do código.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MVC&lt;/strong&gt; é nada mais que um padrão de arquitetura de software, separando sua aplicação em 3 camadas. A camada de interação do usuário(&lt;strong&gt;view&lt;/strong&gt;), a camada de manipulação dos dados(&lt;strong&gt;model&lt;/strong&gt;) e a camada de controle(&lt;strong&gt;controller&lt;/strong&gt;).&lt;/p&gt;

&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;

&lt;p&gt;Sempre que você pensar em manipulação de dados, pense em model. Ele é &lt;strong&gt;responsável&lt;/strong&gt; pela &lt;strong&gt;leitura&lt;/strong&gt; e &lt;strong&gt;escrita&lt;/strong&gt; de &lt;strong&gt;dados,&lt;/strong&gt; e também de suas &lt;strong&gt;validações&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;view&#34;&gt;View&lt;/h2&gt;

&lt;p&gt;Simples: a camada de interação com o usuário. Ela apenas faz a  &lt;strong&gt;exibição&lt;/strong&gt; dos &lt;strong&gt;dados&lt;/strong&gt;, sendo ela por meio de um &lt;strong&gt;html&lt;/strong&gt; ou &lt;strong&gt;xml&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;controller&#34;&gt;Controller&lt;/h2&gt;

&lt;p&gt;O responsável por &lt;strong&gt;receber&lt;/strong&gt; todas as &lt;strong&gt;requisições&lt;/strong&gt; do &lt;strong&gt;usuário&lt;/strong&gt;. Seus métodos chamados actions são responsáveis por uma página, controlando qual model usar e qual view será mostrado ao usuário.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/02/laravel-introducao.jpg&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-47324&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/laravel-introducao.jpg&#34; alt=&#34;laravel-introducao&#34; width=&#34;505&#34; height=&#34;367&#34; srcset=&#34;uploads/2015/02/laravel-introducao.jpg 505w, uploads/2015/02/laravel-introducao-191x139.jpg 191w, uploads/2015/02/laravel-introducao-400x291.jpg 400w&#34; sizes=&#34;(max-width: 505px) 100vw, 505px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caso você ainda esteja um pouco confuso, espero que esse diálogo possa te &amp;#8220;dar a luz&amp;#8221;.&lt;/p&gt;

&lt;h2 id=&#34;o-diálogo-das-camadas&#34;&gt;O diálogo das camadas&lt;/h2&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &lt;strong&gt;View &lt;/strong&gt;&amp;#8211; Fala Controller ! O usuário acabou de pedir para acessar o Facebook ! Pega os dados de login dele ai.
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &lt;strong&gt;Controller&lt;/strong&gt; &amp;#8211; Blz. Já te mando a resposta. Ai model, meu parceiro, toma esses dados de login e verifica se ele loga.
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &lt;strong&gt;Model&lt;/strong&gt; &amp;#8211; Os dados são válidos. Mandando a resposta de login.
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &lt;strong&gt;Controller&lt;/strong&gt; &amp;#8211; Blz. View, o usuário informou os dados corretos. Vou mandar pra vc os dados dele e você carrega a página de perfil.
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &lt;strong&gt;View&lt;/strong&gt; &amp;#8211; Vlw. Mostrando ao usuário&amp;#8230;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando uma aplicação simples com AngularJS</title>
      <link>https://tableless.github.io/hugo-public/criando-uma-aplicacao-simples-com-angularjs/</link>
      <pubDate>Thu, 26 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-uma-aplicacao-simples-com-angularjs/</guid>
      <description>

&lt;p&gt;AngularJS é o mais novo lançamento do time de desenvolvedores do Google. Diferentemente de outros frameworks JavaScript, ele adota uma abordagem mais ligada à sintaxe HTML, funcionando como uma espécie de extensão da linguagem.&lt;/p&gt;

&lt;p&gt;Neste artigo, vamos criar uma aplicação simples de lista de compras e aprender os conceitos básicos do framework no que diz respeito à associação, manipulação e exibição de dados.&lt;/p&gt;

&lt;h2 id=&#34;estrutura-inicial&#34;&gt;Estrutura inicial&lt;/h2&gt;

&lt;p&gt;Assim como qualquer aplicação web, nosso ponta-pé inicial acontece com a criação de um página básica. A diferença aqui é que vamos informar um nova propriedade na tag do nosso arquivo: &lt;strong&gt;ng-app&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Lista de compras&amp;lt;/title&amp;gt;
        &amp;lt;script src=&#34;http://code.angularjs.org/1.0.1/angular-1.0.1.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Essa é a grande sacada do AngularJS. Ao declarar a propriedade ng-app, estamos inicializando a nossa aplicação. É a primeira de algumas novas propriedades que iremos utilizar. Todo o funcionamento do framework gira em torno dessas novas declarações.&lt;/p&gt;

&lt;p&gt;O atributo ng-app na tag informa que o nosso DOM, além de HTML, é também um documento AngularJS. Esta propriedade pode ser utilizada em qualquer elemento do DOM &amp;mdash; em alguns casos, apenas uma parte do seu HTML será uma aplicação Angular. Por baixo dos panos, o framework define o elemento com o atributo ng-app como a raiz da aplicação.&lt;/p&gt;

&lt;h2 id=&#34;olá-tableless&#34;&gt;Olá, Tableless!&lt;/h2&gt;

&lt;p&gt;Para provar que o foco do Angular está no HTML e não no JavaScript, vamos implementar um exemplo simples em nossa estrutura:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;AngularJS - Tableless&amp;lt;/title&amp;gt;
        &amp;lt;script src=&#34;http://code.angularjs.org/1.0.1/angular-1.0.1.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;input type=&#34;text&#34; ng-model=&#34;nome&#34;&amp;gt;
        &amp;lt;p&amp;gt;Olá, Tableless! Meu nome é: {{ nome }}&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Ao carregarmos esse HTML no navegador e digitarmos qualquer coisa no input, o parágrafo é atualizado automagicamente. Perceberam que até agora não escrevemos nenhum código JavaScript?&lt;/p&gt;

&lt;p&gt;A propriedade &lt;em&gt;ng-model&lt;/em&gt; funciona como um canal entre a nossa view e o form. Ela pode ser utilizada em inputs do tipo texto, selects, textareas, checkboxes e radio buttons.&lt;/p&gt;

&lt;p&gt;O model, seus dados e suas validações ficam automaticamente disponíveis no escopo da nossa aplicação, como veremos a seguir.&lt;/p&gt;

&lt;p&gt;A associação de dados é feita através do famoso &amp;#8220;bigode-bigode&amp;#8221; ({{ }}), passando nomes presentes no escopo (no exemplo acima, o model &lt;strong&gt;nome&lt;/strong&gt;).&lt;/p&gt;

&lt;h2 id=&#34;enfim-javascript&#34;&gt;Enfim, JavaScript!&lt;/h2&gt;

&lt;p&gt;Chegou a hora de escrevermos nosso primeiro trecho de código JavaScript. Vamos criar um controller para nossa aplicação que carrega uma lista inicial de ítens. Os ítens são armazenados no escopo da aplicação ($scope).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function ListaComprasController($scope) {
    $scope.itens = [
        {produto: &#39;Leite&#39;, quantidade: 2, comprado: false},
        {produto: &#39;Cerveja&#39;, quantidade: 12, comprado: false}
    ];
}&lt;/pre&gt;

&lt;p&gt;E é só isso por enquanto!&lt;/p&gt;

&lt;h2 id=&#34;exibindo-nossos-ítens&#34;&gt;Exibindo nossos ítens&lt;/h2&gt;

&lt;p&gt;Vamos agora adicionar um novo bloco HTML com a tabela de listagem dos produtos:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div ng-controller=&#34;ListaComprasController&#34;&amp;gt;
    &amp;lt;table&amp;gt;
      &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;Produto&amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt;Quantidade&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/thead&amp;gt;
      &amp;lt;tbody&amp;gt;
        &amp;lt;tr ng-repeat=&#34;item in itens&#34;&amp;gt;
          &amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;{{ item.produto }}&amp;lt;/strong&amp;gt;&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;{{ item.quantidade }}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Duas novidades foram apresentadas no HTML acima:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;o atributo &lt;strong&gt;ng-controller&lt;/strong&gt; informa o nome do controller JavaScript responsável pelo bloco contido no elemento, no nosso caso o controller &lt;em&gt;ListaComprasController&lt;/em&gt; definido anteriormente.&lt;/li&gt;
&lt;li&gt;o atributo &lt;strong&gt;ng-repeat&lt;/strong&gt; executa um &lt;em&gt;loop&lt;/em&gt; na variável &lt;strong&gt;itens&lt;/strong&gt; declarada no escopo da aplicação, retornando cada ítem e imprimindo o produto e a quantidade em uma linha da nossa tabela. O formato é: &lt;retorno&gt; in &lt;coleção&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adicionando-produtos&#34;&gt;Adicionando produtos&lt;/h2&gt;

&lt;p&gt;Para não ficarmos apenas com 4 linhas de JavaScript, vamos adicionar uma funcionalidade que inclui ítens em nossa lista de compras.&lt;/p&gt;

&lt;p&gt;O primeiro passo é criar um formulário que será responsável pela ação:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;form class=&#34;form-inline&#34; name=&#34;formItem&#34;&amp;gt;
  &amp;lt;input type=&#34;text&#34; ng-model=&#34;item.produto&#34;&amp;gt;
  &amp;lt;input type=&#34;number&#34; ng-model=&#34;item.quantidade&#34;&amp;gt;
  &amp;lt;button ng-click=&#34;adicionaItem()&#34;&amp;gt;adicionar ítem&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;&lt;/pre&gt;

&lt;p&gt;Estamos utilizando de novo o atributo &lt;strong&gt;ng-model&lt;/strong&gt; para definir um model para os nossos inputs. O controller passa a receber diretamente informações sobre esses campos.&lt;/p&gt;

&lt;p&gt;A novidade dessa vez fica por conta do atributo &lt;strong&gt;ng-click&lt;/strong&gt;, que recebe uma função que precisamos declarar no controller:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function ListaComprasController($scope) {
    $scope.itens = [
        {produto: &#39;Leite&#39;, quantidade: 2, comprado: false},
        {produto: &#39;Cerveja&#39;, quantidade: 12, comprado: false}
    ];

    $scope.adicionaItem = function () {
        $scope.itens.push({produto: $scope.item.produto,
                           quantidade: $scope.item.quantidade,
                           comprado: false});
        $scope.item.produto = $scope.item.quantidade = &#39;&#39;;
    };
}&lt;/pre&gt;

&lt;p&gt;Ao clicarmos no botão, o produto é adicionado à tabela. Aqui o model poderia estar realizando diversas validações disponíveis na API do framework entre outras coisas. Porém, no nosso exemplo, apenas adicionamos um novo ítem à lista de produtos e em seguida limpamos os models (os campos do formulário).&lt;/p&gt;

&lt;h2 id=&#34;testes&#34;&gt;Testes&lt;/h2&gt;

&lt;p&gt;Por ser um framework que demanda um código JavaScript mais estruturado, fica bem simples testar sua aplicação. Utilizando &lt;a href=&#34;http://tableless.com.br/testando-seu-codigo-jquery-com-jasmine-parte-1/&#34; target=&#34;_blank&#34;&gt;Jasmine&lt;/a&gt;, por exemplo, poderíamos facilmente testar o controller dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;describe(&#39;Lista Compras Unitário&#39;, function () {
    describe(&#39;ListaComprasController&#39;, function () {
        beforeEach(function () {
            this.$scope = {};
            this.controller = new ListaComprasController(this.$scope);
        });

        it(&#39;deve criar &#34;itens&#34; com 2 ítens&#39;, function () {
            expect(this.$scope.itens.length).toBe(2);
        });

        describe(&#39;adicionaItem&#39;, function () {
            it(&#39;deve adicionar um novo ítem à lista com dados do escopo&#39;, function () {
                this.$scope.item = {};
                this.$scope.item.produto = &#39;Carne&#39;;
                this.$scope.item.quantidade = 5;
                this.$scope.adicionaItem();
                expect(this.$scope.itens.length).toBe(3);
                expect(this.$scope.itens[2].produto).toBe(&#39;Carne&#39;);
                expect(this.$scope.itens[2].quantidade).toBe(5);
                expect(this.$scope.itens[2].comprado).toBeFalse;
            });
        });
    });
});&lt;/pre&gt;

&lt;h2 id=&#34;angularjs-é-muito-mais-do-que-isso&#34;&gt;AngularJS é muito mais do que isso!&lt;/h2&gt;

&lt;p&gt;Deixei muitos tópicos de fora por enquanto. O objetivo aqui era mostrar o potencial do framework AngularJS. Seus recursos ainda incluem rotas, múltiplas views, AJAX e serviços REST e a criação de componentes personalizados. O que vocês viram foi o básico do básico, uma introdução.&lt;/p&gt;

&lt;p&gt;No &lt;a href=&#34;http://angularjs.org/&#34; target=&#34;_blank&#34;&gt;site do framework&lt;/a&gt; há uma documentação bem completa, com diversos tutoriais.&lt;/p&gt;

&lt;p&gt;O código fonte do nosso exemplo vocês encontram no &lt;a href=&#34;https://github.com/tableless/exemplos/tree/gh-pages/angularjs/lista-compras/&#34; target=&#34;_blank&#34;&gt;Github do Tableless&lt;/a&gt;. E &lt;a href=&#34;http://tableless.github.com/exemplos/angularjs/lista-compras/&#34; target=&#34;_blank&#34;&gt;nesse link&lt;/a&gt; vocês conseguem visualizar nossa lista de compras em ação.&lt;/p&gt;

&lt;p&gt;Finalizando, nosso camarada Vedovelli gravou um &lt;a href=&#34;http://blog.vedovelli.com.br/?p=1946&#34; target=&#34;_blank&#34;&gt;screencast&lt;/a&gt; bem completo sobre o AngularJS, recomendo!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>