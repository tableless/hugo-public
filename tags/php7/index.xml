<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php7 on Tableless</title>
    <link>http://tableless.com.br/tags/php7/index.xml</link>
    <description>Recent content in Php7 on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/php7/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Novidade PHP 7 – Operador Null Coalesce</title>
      <link>http://tableless.com.br/novidade-php-7-operador-null-coalesce/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/novidade-php-7-operador-null-coalesce/</guid>
      <description>&lt;p&gt;Estou começando a estudar as &lt;em&gt;features&lt;/em&gt; do PHP 7 e paralelamente irei escrever sobre elas. A primeira &lt;em&gt;feature&lt;/em&gt; que vou falar é sobre o operador &lt;strong&gt;Null Coalescing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Este operador já existia em outras linguagens, como C# e Pearl. Eu achei muito interessante como ele melhora a legibilidade do código na checagem de variáveis.&lt;/p&gt;

&lt;p&gt;A lógica do operador é a seguinte: retornar o primeiro valor que exista e não seja nulo dentre os valores passados. Em alguns casos, para pegar o valor de GET, por exemplo, utilizamos a seguinte sintaxe:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$valor = (isset($_GET[&#39;id&#39;]))? $_GET[&#39;id&#39;] : 1;
&lt;/pre&gt;

&lt;p&gt;O trecho acima verifica se o índice ‘id’ está setado em GET, e caso esteja, ele seta na variável $valor, caso contrário, é informado o valor 1.&lt;/p&gt;

&lt;p&gt;Já com o operador &lt;em&gt;null coalesce&lt;/em&gt;, este trecho fica muito mais claro e fácil de entender.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$valor = $_GET[&#39;id&#39;] ?? 1;
&lt;/pre&gt;

&lt;p&gt;O operador &lt;strong&gt;??&lt;/strong&gt; (&lt;em&gt;null coalesce&lt;/em&gt;) ficará responsável por retornar o primeiro valor que existe e não nulo. Então, se caso não seja passado um ‘id’ via GET, o valor 1 será setado em $valor.&lt;/p&gt;

&lt;p&gt;Agora, vamos imaginar que temos o seguinte cenário: precisamos setar um valor na variável $valor, só que este valor pode vir de diversos lugares e há uma ordem a ser seguida de verificação. Como você faria?&lt;/p&gt;

&lt;p&gt;Com o &lt;em&gt;null coalesce&lt;/em&gt; isso torna-se muito simples:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$valor = $_GET[&#39;id&#39;]  ?? $_POST[&#39;id&#39;] ?? 1;
&lt;/pre&gt;

&lt;p&gt;Primeiro, o operador verifica GET, caso não exista ou seja nulo, ele irá verificar POST. Caso também não exista ou seja nulo, ele irá retornar 1.&lt;/p&gt;

&lt;p&gt;É isso galera. Qualquer dúvida, sugestão ou crítica é só comentar. Regards!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Constant Array no PHP 7</title>
      <link>http://tableless.com.br/constant-array-no-php-7/</link>
      <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/constant-array-no-php-7/</guid>
      <description>&lt;p&gt;Até o lançamento da versão do PHP 7, só era possível criar constantes com dados do tipo &lt;em&gt;inteiro&lt;/em&gt;, &lt;em&gt;float&lt;/em&gt;, &lt;em&gt;string&lt;/em&gt;, &lt;em&gt;boolean&lt;/em&gt;, ou &lt;em&gt;NULL&lt;/em&gt;, mas com o PHP 7 agora é possível criar constantes do tipo &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Vamos lá. Definindo uma constante:&lt;/p&gt;

&lt;pre&gt;define(&#34;CONSTANT&#34;, &#34;Olá Constantes.&#34;);
echo CONSTANT; // Resultando em: &#34;Olá Constantes.&#34;
&lt;/pre&gt;

&lt;h3 id=&#34;com-o-php-7-criando-uma-constante-do-tipo-array-matrizes&#34;&gt;Com o PHP 7 criando uma constante do tipo array (matrizes)&lt;/h3&gt;

&lt;p&gt;Exemplo de constante array:&lt;/p&gt;

&lt;pre&gt;// array simples:

define(&#34;CONSTANT_ARRAY&#34;, [&#39;pera&#39;, &#39;uva&#39;, &#39;maça&#39;,]);
echo &#39;Eu gosto de comer &#39; . CONSTANT_ARRAY[1];
// Resultando em: &#34;Eu gosto de comer uva&#34;
&lt;/pre&gt;

&lt;p&gt;Também é possível usar arrays multidimensionais:&lt;/p&gt;

&lt;p&gt;Exemplo de constante array multimensional:&lt;/p&gt;

&lt;pre&gt;// array multidimensional:
define(&#34;CONSTANT_ARRAY_MULTIDIMENSIONAL&#34;, [
&#39;frutas&#39; =&amp;gt; [&#39;pera&#39;, &#39;uva&#39;, &#39;maça&#39;,],
&#39;carros&#39; =&amp;gt; [&#39;fusca&#39;, &#39;chevette&#39;, &#39;passat&#39;,],
&#39;mulheres&#39; =&amp;gt; [&#39;loira&#39;, &#39;ruiva&#39;, &#39;morena&#39;,],
]);
echo &#39;Eu gosto de comer &#39; . CONSTANT_ARRAY_MULTIDIMENSIONAL[&#39;frutas&#39;][1];
// Resultando em: &#34;Eu gosto de comer uva&#34;
echo &#39;&amp;lt;br&amp;gt;&#39;;
echo &#39;meu carro é um &#39; . CONSTANT_ARRAY_MULTIDIMENSIONAL[&#39;carros&#39;][2];
// Resultando em: &#34;Meu carro é um passat&#34;
echo &#39;&amp;lt;br&amp;gt;&#39;;
echo &#39;As &#39; . CONSTANT_ARRAY_MULTIDIMENSIONAL[&#39;mulheres&#39;][0] . &#39;s são mais bonitas.&#39;;
// Resultando em: &#34;As loiras são mais bonitas.&#34;
&lt;/pre&gt;

&lt;p&gt;Só lembrando, as constantes são &lt;em&gt;case sensitive&lt;/em&gt;, ou seja, se você declarou a mesma em letras maiúsculas, só poderá usá-la com letra maiúscula.&lt;/p&gt;

&lt;h3 id=&#34;usando-a-sintaxe-const&#34;&gt;Usando a sintaxe &lt;strong&gt;const&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Também é possível utilizar a sintaxe &lt;strong&gt;const&lt;/strong&gt; para criar uma constante no PHP, mas essa só poderá ser usada dentro de uma classe:&lt;/p&gt;

&lt;pre&gt;class MinhaClasse
{
const MINHACONSTANTE = [&#39;pera&#39;, &#39;uva&#39;, &#39;maça&#39;,];

public static function constante() {
return self::MINHACONSTANTE;
}
}
&lt;/pre&gt;

&lt;p&gt;No exemplo acima usei um array simples, a mesma usado no primeiro exemplo, mas agora dentro da classe &lt;em&gt;MinhaClasse&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Seu uso seria algo assim:&lt;/p&gt;

&lt;pre&gt;$meuArray = MinhaClasse::constante();
print_r($meuArray);
&lt;/pre&gt;

&lt;p&gt;O código acima irá imprimir:&lt;/p&gt;

&lt;pre&gt;Array ( [0] =&amp;gt; pera [1] =&amp;gt; uva [2] =&amp;gt; maça )&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/Captura-de-tela-de-2016-01-02-16-17-16.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52669&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/Captura-de-tela-de-2016-01-02-16-17-16.png&#34; alt=&#34;Constant Class PHP com array&#34; width=&#34;491&#34; height=&#34;303&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lembrando que, para obter sucesso com os exemplos acima, é necessário ter a versão 7 do PHP ou superior. As demais versões não dão suporte á constantes do tipo &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;No exemplo, também foi usado a &lt;em&gt;short sintaxe&lt;/em&gt; do array. Você também pode usar a sintaxe antiga, mas é uma questão de gosto pessoal. Eu, particularmente, quando escrevo um array, sempre procuro usar a versão curta. Além de ser mais bonita e simples, também se aproxima de outras linguagens, como o JavaScript, por exemplo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>10 novidades do PHP 7</title>
      <link>http://tableless.com.br/10-novidades-do-php-7/</link>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/10-novidades-do-php-7/</guid>
      <description>

&lt;p&gt;O PHP 7 está prestes a ser lançada oficialmente, até o final deste ano de 2015.&lt;/p&gt;

&lt;p&gt;A versão &lt;em&gt;Release Candidate&lt;/em&gt; (RC) do PHP 7 foi lançada no dia 21 de agosto. Sendo uma versão RC, não haverá implementações novas no PHP 7.0, apenas correções de bugs.&lt;/p&gt;

&lt;p&gt;Vou apresentar aqui algumas novidades e recursos novos desta versão do PHP.&lt;/p&gt;

&lt;h2 id=&#34;1-desempenho-fantástico&#34;&gt;1. Desempenho Fantástico&lt;/h2&gt;

&lt;p&gt;O PHP 7 teve seu motor remodelado. Com isso, houve um grande ganho de desempenho.&lt;/p&gt;

&lt;p&gt;Em alguns casos, é possível alcançar &lt;a href=&#34;http://rberaldo.com.br/php-7-9-vezes-mais-rapido-que-php-5-6/&#34; target=&#34;_blank&#34;&gt;até 9 vezes mais velocidade&lt;/a&gt;. Mas esse número pode variar conforme a plataforma e a aplicação utilizada nos testes.&lt;/p&gt;

&lt;p&gt;Eu utilizei o script para benchmark criado pela própria equipe do PHP, disponibilizado junto com o código-fonte da linguagem. Em comparação com a versão 5.6, consegui aproximadamente 9 vezes mais velocidade usando o PHP 7. Expliquei esse teste com mais detalhes &lt;a href=&#34;http://rberaldo.com.br/php-7-9-vezes-mais-rapido-que-php-5-6/&#34; target=&#34;_blank&#34;&gt;neste meu artigo&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;MySQL Removido&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Desde o PHP 5.5, &lt;a href=&#34;http://PS: funções mysql_* estão obsoletas desde o PHP 5.5  e já foram removidas no PHP 7. Prefira usar MySQLi ou PDO. Veja mais aqui: http://www.ultimatephp.com.br/php-por-que-nao-utilizar-funcoes-mysql&#34; target=&#34;_blank&#34;&gt;as funções mysql_* eram consideradas obsoletas&lt;/a&gt;. Ou seja, tudo indicava que elas seriam removidas em um futuro bem próximo.&lt;/p&gt;

&lt;p&gt;Pois bem. A hora chegou.&lt;/p&gt;

&lt;p&gt;No PHP 7, as funções mysql_* (como mysql_connect(), mysql_query() e outras) deixaram de existir. Agora é preciso utilizar MySQLi ou PDO.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ultimatephp.com.br/como-usar-pdo-com-banco-de-dados-mysql/&#34; target=&#34;_blank&#34;&gt;Recomendo utilizar PDO&lt;/a&gt;, por ser mais robusta e ser independente de SGBD.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Funções ereg_* Removidas&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Além das funções mysql_*, as funções ereg_* e eregi_* (como ereg(), ereg_replace, eregi() e outras) eram consideradas obsoletas desde o PHP 5.3.&lt;/p&gt;

&lt;p&gt;Elas também foram removidas no PHP 7.&lt;/p&gt;

&lt;p&gt;Agora é preciso usar as funções preg_*, da &lt;a href=&#34;http://php.net/manual/pt_BR/book.pcre.php&#34; target=&#34;_blank&#34;&gt;biblioteca PCRE&lt;/a&gt;, como preg_match e preg_replace.&lt;/p&gt;

&lt;p&gt;As funções preg_* exigem delimitadores. Consequentemente, é possível utilizar &lt;a href=&#34;http://php.net/manual/pt_BR/reference.pcre.pattern.modifiers.php&#34; target=&#34;_blank&#34;&gt;modificadores&lt;/a&gt;, como &amp;#8220;i&amp;#8221; e &amp;#8220;u&amp;#8221;. O &amp;#8220;i&amp;#8221;, por exemplo, significa case-insensitive. Ou seja, se você usava eregi_*, passará a usar preg_*, sempre com o modificador &amp;#8220;i&amp;#8221;.&lt;/p&gt;

&lt;h2 id=&#34;3-erros-fatais-e-exceções&#34;&gt;3. Erros Fatais e Exceções&lt;/h2&gt;

&lt;p&gt;No PHP 7, erros fatais passaram a ser Exceções. Isso quer dizer que eles podem ser tratados em bloco try/catch, sem interromper a execução do script.&lt;/p&gt;

&lt;p&gt;Para exemplificar, vamos executar este código (no PHP 7, não no PHP 5):&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;ereg(&#39;^[a-z]$&#39;, &#39;php7&#39;);
echo &#34;FIM&#34;;
&lt;/pre&gt;

&lt;p&gt;Veremos este erro:&lt;/p&gt;

&lt;pre&gt;Fatal error: Uncaught Error: Call to undefined function ereg()...
&lt;/pre&gt;

&lt;p&gt;E o texto &amp;#8220;FIM&amp;#8221; não será exibido. Isso ocorre pois a exceção interrompe o script.&lt;/p&gt;

&lt;p&gt;Agora execute este script:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;try
{
    ereg(&#39;^[a-z]$&#39;, &#39;php7&#39;);
}
catch (Error $e)
{
    echo &#34;Ocorreu um erro: &#34; . $e-&amp;gt;getMessage();
}

echo &#34;FIM&#34;;
&lt;/pre&gt;

&lt;p&gt;Você verá a seguinte saída:&lt;/p&gt;

&lt;pre&gt;Ocorreu um erro: Call to undefined function ereg()
FIM
&lt;/pre&gt;

&lt;p&gt;Ou seja, nossa aplicação tratou a exceção e a execução continuou normalmente.&lt;/p&gt;

&lt;h2 id=&#34;4-construtores-do-php-4-obsoletos&#34;&gt;4. Construtores do PHP 4 Obsoletos&lt;/h2&gt;

&lt;p&gt;Antes do PHP 5, os construtores recebiam o mesmo nome da classe. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class ClassePHP4
{
    function ClassePHP4()
    {
        echo &#34;Construtor chamado&#34;;
    }
}
&lt;/pre&gt;

&lt;p&gt;Isso continuou funcionando no PHP 5, mas era recomendado usar o método &lt;code&gt;__construct&lt;/code&gt;, ficando desta forma:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class ClassePHP5
{
    public function __construct()
    {
        echo &#34;Construtor chamado&#34;;
    }
}
&lt;/pre&gt;

&lt;p&gt;O PHP 7 recomenda que seja usado método &lt;code&gt;__construct&lt;/code&gt; em vez do método com o mesmo nome da classe. Ou seja, o uso de construtores no padrão do PHP 4 continuará sendo possível, mas é um recurso obsoleto (&lt;em&gt;Deprecated&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Para testar isso, vamos executar este código:&lt;/p&gt;

&lt;h2 id=&#34;5-indução-de-tipos-scalar-types&#34;&gt;5. Indução de Tipos: &lt;em&gt;Scalar Types&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;PHP é uma linguagem &lt;strong&gt;NÃO&lt;/strong&gt; tipada.&lt;/p&gt;

&lt;p&gt;Aos poucos ela vem ganhando alguns recursos que a torna fracamente tipada.&lt;/p&gt;

&lt;p&gt;Isso significa que podemos criar códigos mais consistentes e menos suscetíveis a erros e problemas.&lt;/p&gt;

&lt;p&gt;O PHP 5 já possui o recurso de &lt;a href=&#34;http://php.net/manual/pt_BR/language.oop5.typehinting.php&#34; target=&#34;_blank&#34;&gt;Indução de Tipos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É possível definir alguns tipos para parâmetros de métodos e funções. Mas só é possível definir dois tipos: arrays (o tipo &amp;#8220;array&amp;#8221;) e objetos (com o nome da classe).&lt;/p&gt;

&lt;p&gt;A partir do PHP 7, poderemos usar outros tipos também: int, float, string e bool.&lt;/p&gt;

&lt;p&gt;Esses tipos podem ser definidos nos parâmetros de funções e métodos, como já era feito no PHP 5. Mas agora há uma novidade: também poderemos definir o tipo do retorno.&lt;/p&gt;

&lt;h2 id=&#34;6-tipo-de-retorno-de-funções-e-métodos&#34;&gt;6. Tipo de Retorno de Funções e Métodos&lt;/h2&gt;

&lt;p&gt;Seguindo a mesma ideia da Indução de Tipos que vimos anteriormente, o PHP 7 vai permitir definir o tipo de retorno de uma função ou método.&lt;/p&gt;

&lt;p&gt;Basta seguir esta sintaxe:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function nomeFuncao() : tipo
{
    // corpo da função
}
&lt;/pre&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function soma($x, $y) : float
{
    return $x + $y + 1.5;
}
&lt;/pre&gt;

&lt;p&gt;E, claro, pode usar todos os tipos suportados: int, float, string, bool, array e objeto.&lt;/p&gt;

&lt;h2 id=&#34;7-novo-operador-spaceship&#34;&gt;7. Novo Operador &lt;em&gt;Spaceship&lt;/em&gt; (&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;Esse operador recebe o nome de &amp;#8220;&lt;em&gt;Spaceship&lt;/em&gt;&amp;#8221; em algumas outras linguagens, e é usado para comparação numérica.&lt;/p&gt;

&lt;p&gt;Se você já usou a função &lt;code&gt;strcmp()&lt;/code&gt;, com certeza vai entender esse operador sem dificuldades.&lt;/p&gt;

&lt;p&gt;Mesmo se não usou, é simples de entender.&lt;/p&gt;

&lt;p&gt;Veja estes exemplos:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;var_dump(2 &amp;lt;=&amp;gt; 3); // retorna -1
var_dump(2 &amp;lt;=&amp;gt; 2); // retorna 0
var_dump(2 &amp;lt;=&amp;gt; 1); // retorna 1
&lt;/pre&gt;

&lt;p&gt;Ou seja, o operador &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; retorna um destes 3 valores:&lt;/p&gt;

&lt;p&gt;&amp;#8211; retorna -1 quando o primeiro operando é menor que o segundo&lt;/p&gt;

&lt;p&gt;&amp;#8211; retorna 0 quando os dois operandos são iguais&lt;/p&gt;

&lt;p&gt;&amp;#8211; retorna 1 quando o segundo operando é maior que o primeiro&lt;/p&gt;

&lt;h2 id=&#34;9-null-coalesce-operator-operador&#34;&gt;9. &lt;em&gt;Null Coalesce Operator&lt;/em&gt; (operador &lt;code&gt;??&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;O nome parece complicado, mas ele faz algo bem simples.&lt;/p&gt;

&lt;p&gt;Ele é útil para verificar a existência de variáveis, como fazemos com valores de &lt;code&gt;$_GET&lt;/code&gt; ou &lt;code&gt;$_POST&lt;/code&gt;, usando &lt;code&gt;isset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ele faz com que esta linha:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$email = $_POST[&#39;email&#39;] ?? &#39;valor padrão&#39;;
&lt;/pre&gt;

&lt;p&gt;&amp;#8230; seja transformada nesta:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$email = isset($_POST[&#39;email&#39;]) ? $_POST[&#39;email&#39;] : &#39;valor padrão&#39;;
&lt;/pre&gt;

&lt;p&gt;Super simples!&lt;/p&gt;

&lt;h2 id=&#34;10-classes-anônimas&#34;&gt;10. Classes Anônimas&lt;/h2&gt;

&lt;p&gt;O PHP, a partir da versão 5.4, permite a criação de &lt;a href=&#34;http://php.net/manual/pt_BR/functions.anonymous.php&#34; target=&#34;_blank&#34;&gt;Funções Anônimas&lt;/a&gt;. Elas são úteis especialmente para criação de &lt;em&gt;callbacks&lt;/em&gt; ou para usar em parâmetros de funções, como &lt;code&gt;array_map()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A partir do PHP 7, podemos criar Classes Anônimas também.&lt;/p&gt;

&lt;p&gt;Podemos, por exemplo, fazer uma função retornar uma classe, definida ns própria expressão &lt;code&gt;return&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function createObject()
{
    return new class{
        public function test()
        {
            echo &#34;test&#34; . PHP_EOL;
        }
    };
}

$obj = createObject();
$obj-&amp;gt;test();
&lt;/pre&gt;

&lt;p&gt;Há outros casos de uso, como em testes de software.&lt;/p&gt;

&lt;p&gt;Você pode ver a proposta e alguns casos de uso no &lt;a href=&#34;https://wiki.php.net/rfc/anonymous_classes&#34; target=&#34;_blank&#34;&gt;RFC que descreve esse recurso&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O PHP 7 traz diversas novidades. E, se você seguia as Boas Práticas e padrões que o PHP recomendava, a partir da versão 5.5, provavelmente terá pouquíssimos problemas (ou nenhum) para migrar para o PHP 7.&lt;/p&gt;

&lt;p&gt;Se quiser conhecer melhor essas novidades e algumas outras, criei um &lt;a href=&#34;http://cursophp7.ultimatephp.com.br&#34; target=&#34;_blank&#34;&gt;curso gratuito&lt;/a&gt;, onde mostro com mais detalhes cada um desses novos recursos. Também mostro como instalar o PHP 7, sem afetar a sua instalação atual do PHP 5.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://cursophp7.ultimatephp.com.br&#34; target=&#34;_blank&#34;&gt;Clique aqui e se inscreva no meu curso gratuito do PHP 7&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bons estudos e fique de olho no PHP 7!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>