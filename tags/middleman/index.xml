<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Middleman on Tableless</title>
    <link>http://tableless.com.br/tags/middleman/index.xml</link>
    <description>Recent content in Middleman on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/middleman/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gerando arquivos estáticos com o Middleman</title>
      <link>http://tableless.com.br/gerando-arquivos-estaticos-com-o-middleman/</link>
      <pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/gerando-arquivos-estaticos-com-o-middleman/</guid>
      <description>

&lt;p&gt;O Middleman, assim como o &lt;a href=&#34;http://tableless.com.br/jekyll-servindo-sites-estaticos/&#34;&gt;Jekyll&lt;/a&gt;, serve sites estáticos, sem banco de dados, baseados em puro código HTML e informação. Existem uma &lt;a href=&#34;https://www.staticgen.com&#34;&gt;série de sistemas&lt;/a&gt; desse tipo e é uma das minhas armas em muitos projetos.&lt;/p&gt;

&lt;h2 id=&#34;instalando&#34;&gt;Instalando&lt;/h2&gt;

&lt;p&gt;Supondo que você tem o Ruby e RubyGems na sua máquina, basta instalar a GEM do Middleman:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;$ gem install middleman
&lt;/pre&gt;

&lt;p&gt;Depois de instalado, os comandos básicos são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;middleman init&lt;/strong&gt; para iniciar um projeto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;middleman server&lt;/strong&gt; para rodar essa aplicação/projeto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;middleman build&lt;/strong&gt; para compilar os assets e preparar uma pasta com os arquivos estáticos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;iniciando-um-site&#34;&gt;Iniciando um site&lt;/h2&gt;

&lt;p&gt;Abra novamente o terminal e digite o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;middleman init &lt;strong&gt;nome_do_projeto&lt;/strong&gt;
&lt;/pre&gt;

&lt;p&gt;Se a pasta não existir, ele vai criá-la. Lá dentro ele vai colocar toda a estrutura de arquivos para funcionar seu projeto. Desapegue da estrutura de arquivos que você ama e adora. A estrutura que o Middleman monta é bastante simples e bem enxuta. Basicamente é formada da pasta &lt;code&gt;source&lt;/code&gt; e do arquivo &lt;code&gt;config.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O arquivo &lt;code&gt;config.rb&lt;/code&gt; é onde você vai define as configurações do Middleman e informações de como habilitar algumas features que podem ser úteis aos desenvolver seu projeto e principalmente de como habilitar o módulo de blog (isso mesmo, blog).&lt;/p&gt;

&lt;p&gt;Na pasta &lt;code&gt;source&lt;/code&gt; é onde tem todo o seu projeto. A estrutura inicial dessa pasta é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;images
index.html.erb
javascripts
layouts
stylesheets
&lt;/pre&gt;

&lt;p&gt;Logo no começo eu já mudo algumas configurações para modificar um pouco essa estrutura, deixando tudo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;assets/
  images
  javascripts
  stylesheets
index.html.erb
layouts
&lt;/pre&gt;

&lt;p&gt;Depois que movi as pastas do jeito que eu quis, mudo lá no &lt;code&gt;config.rb&lt;/code&gt; três variáveis:&lt;/p&gt;

&lt;pre class=&#34;lang-ruby&#34;&gt;set :css_dir, &#39;stylesheets&#39;
set :js_dir, &#39;javascripts&#39;
set :images_dir, &#39;images&#39;
&lt;/pre&gt;

&lt;p&gt;Fica isso aqui:&lt;/p&gt;

&lt;pre class=&#34;lang-ruby&#34;&gt;set :css_dir, &#39;assets/stylesheets&#39;
set :js_dir, &#39;assets/javascripts&#39;
set :images_dir, &#39;assets/images&#39;
&lt;/pre&gt;

&lt;p&gt;E basicamente essa é a única mudança que faço para deixar meu ambiente funcionando!&lt;/p&gt;

&lt;h2 id=&#34;rodando-o-projeto&#34;&gt;Rodando o projeto&lt;/h2&gt;

&lt;p&gt;Agora que seu ambiente está configurado, vamos rodar. Estando dentro da pasta do projeto, rode:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;middleman server
&lt;/pre&gt;

&lt;p&gt;Isso vai subir o projeto na porta &lt;strong&gt;&lt;a href=&#34;http://localhost:4567/&#34;&gt;http://localhost:4567/&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se você já tiver algum projeto nessa porta, você pode mudar colocando a flag &lt;strong&gt;&amp;#8211;p&lt;/strong&gt; no comando escolhendo a porta:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;middleman server --p 3001
&lt;/pre&gt;

&lt;p&gt;Depois que seu projeto está rodando, você pode escrever CSS, HTML e o que quiser.&lt;/p&gt;

&lt;h2 id=&#34;templates-e-partials&#34;&gt;Templates e Partials&lt;/h2&gt;

&lt;p&gt;Acho que você percebeu ali em cima que além dos assets, existe uma pasta chamada &lt;strong&gt;layouts&lt;/strong&gt;. Essa pasta é a responsável por guardar os templates que você vai usar nas páginas. Você tem um template para páginas de texto, para galerias e etc. Esses templates diferentes, vão ali e você vai indicar indicar em cada arquivo, qual template de layout ele vai utilizar.&lt;/p&gt;

&lt;p&gt;Esse aqui é o código que &lt;strong&gt;layout.erb&lt;/strong&gt; vem como padrão:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!doctype html&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;

    &amp;lt;!-- Always force latest IE rendering engine or request Chrome Frame --&amp;gt;
    &amp;lt;meta content=&#34;IE=edge,chrome=1&#34; http-equiv=&#34;X-UA-Compatible&#34;&amp;gt;

    &amp;lt;!-- Use title if it&#39;s in the page YAML frontmatter --&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;%= current_page.data.title || &#34;The Middleman&#34; %&amp;gt;&amp;lt;/title&amp;gt;

    &amp;lt;%= stylesheet_link_tag &#34;normalize&#34;, &#34;all&#34; %&amp;gt;
    &amp;lt;%= javascript_include_tag  &#34;all&#34; %&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body class=&#34;&amp;lt;%= page_classes %&amp;gt;&#34;&amp;gt;
    &amp;lt;%= yield %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Esse seria o template padrão usado para as páginas. Como vou ter vários templates, que usarão as mesmas informações da tag HEAD e do FOOTER, eu prefiro separar essas informações em partials. Ou se você escreve PHP, em includes. Funcionam diferente, mas a ideia geral é a mesma: reutilizar blocos de código em arquivos do projeto.&lt;/p&gt;

&lt;p&gt;Para isso, geralmente crio também uma pasta &lt;strong&gt;partials&lt;/strong&gt; para guardar esses pedaços que serão reutilizados várias vezes no projeto. Talvez esta é a parte mais legal de usar geradores como o Middleman e o Jekyll. Como tudo é arquivo estático, facilitando minha vida, eu ainda consigo ter a facilidade de separar meus arquivos da maneira que eu quiser.&lt;/p&gt;

&lt;p&gt;A estrutura de código que mostrei lá em cima, pode ficar assim:&lt;/p&gt;

&lt;pre class=&#34;lang-ruby&#34;&gt;&amp;lt;%= partial &#39;partials/header&#39;%&amp;gt;
&amp;lt;%= yield %&amp;gt;
&amp;lt;%= partial &#39;partials/footer&#39;%&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Mas se não tem Banco de Dados, como que você define informações de título, descrição da página ou qualquer outra coisa? Simples: todos os arquivos de conteúdo tem um cabeçalho em formato YAML, no início no arquivo que leva essas informações.&lt;/p&gt;

&lt;h3 id=&#34;um-pouco-sobre-yaml&#34;&gt;Um pouco sobre YAML&lt;/h3&gt;

&lt;p&gt;O formato &lt;strong&gt;YAML&lt;/strong&gt; é conhecido pela facilidade de leitura. Ele foi criado para estruturarmos informação de maneira que seja fácil de entender e escrever. Ou seja, ele é um formato simples para escrevermos manualmente, mas que também possamos manipular via programação.&lt;/p&gt;

&lt;p&gt;Qualquer arquivo que contém um bloco YAML – que geralmente é chamado de &lt;strong&gt;front-matter&lt;/strong&gt; – será processado como um arquivo especial. O front-matter precisa ser a primeira coisa do arquivo e deve estar num formato válido de YAML. Toda página do seu site, tanto no Jekyll quanto no Middleman, precisam começar com uma estrutura assim:&lt;/p&gt;

&lt;pre class=&#34;lang-yaml&#34;&gt;---
title: Home
layout: default
---
&lt;/pre&gt;

&lt;p&gt;Simples, ahn? O bloco é demarcado pelos três traços no começo e no fim. TEM que ser três traços. Nem mais, nem menos. O código YAML são as duas variáveis &lt;strong&gt;layout&lt;/strong&gt; e &lt;strong&gt;title&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ambos os sistemas usam essa notação para organizar seus arquivos e informações. Você pode definir variáveis em cada um dos arquivos para fazer condições nas páginas. Se em uma página, por exemplo, eu quero que a sidebar apareça, a notação YAML dela vai se algo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-yaml&#34;&gt;---
title: Contato
layout: interna
sidebar: true
---
&lt;/pre&gt;

&lt;p&gt;A variável &lt;strong&gt;sidebar&lt;/strong&gt; com o valor &lt;strong&gt;false&lt;/strong&gt; foi criada por mim. No template, usarei algo parecido com isso, no Middleman:&lt;/p&gt;

&lt;pre class=&#34;lang-ruby&#34;&gt;&amp;lt;% if current_page.data.sidebar? %&amp;gt;
  &amp;lt;%= partial &#39;partials/header&#39;%&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Lindo e simples. Quando buildar o projeto. O sistema já vai compilar os arquivos da maneira correta, com o código sidebar, no lugar que você pediu.&lt;/p&gt;

&lt;h2 id=&#34;fazendo-o-build-do-projeto&#34;&gt;Fazendo o build do projeto&lt;/h2&gt;

&lt;p&gt;O comando &lt;strong&gt;middleman build&lt;/strong&gt; vai compilar seu projeto em uma pasta &lt;strong&gt;build&lt;/strong&gt;. Lá dentro terão os arquivos usados no projeto, praticamente na mesma estrutura que você deixou no projeto original, só que agora tudo estático em HTML.&lt;/p&gt;

&lt;p&gt;Geralmente, nos projetos que me envolvo, onde o cliente precisa apenas de arquivos estáticos, eu envio essa pasta build. Facilita muito minha vida. Se eu preciso fazer o HTML/CSS de um projeto com milhares de páginas, eu posso simplesmente usar o Middleman ou qualquer outro gerador similar, para me ajudar a separar partials/includes dos pedaços comuns de código, como HEADER, FOOTER, SIDEBAR e etc&amp;#8230; Depois é só buildar o projeto e pronto. Ele monta as partes automaticamente para mim.&lt;/p&gt;

&lt;p&gt;Há uma série de outras dicas sobre o Middleman aqui, como fazer um blog por exemplo, mas deixo para próxima. Por enquanto, isso aqui já consegue te ajudar bastante.&lt;/p&gt;

&lt;p&gt;Estou estudando &lt;a href=&#34;https://ghost.org/download/&#34;&gt;Ghost&lt;/a&gt; ultimamente. Em um projeto de duas páginas, é muito prático usar um Middleman da vida, mas o cliente ainda quer ter a facilidade de criar páginas ou modificar o conteúdo. Certamente eu não vou instruí-lo para que ele faça isso editando arquivos no Sublime. Logo, uma interface administrativa faz bastante falta. O Ghost trabalha com arquivos estáticos e tem uma interface administrativa básica, para gerenciar o conteúdo. Tendo mais novidades, escrevo por aqui.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>