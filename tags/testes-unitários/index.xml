<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testes Unitários on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/testes-unit%C3%A1rios/index.xml</link>
    <description>Recent content in Testes Unitários on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/testes-unit%C3%A1rios/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introdução ao Behavior Driven Development</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-behavior-driven-development/</link>
      <pubDate>Fri, 21 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-behavior-driven-development/</guid>
      <description>

&lt;p&gt;O &lt;strong&gt;BDD&lt;/strong&gt; &lt;em&gt;(Behavior Driven Development ou Desenvolvimento guiado por comportamento)&lt;/em&gt;, é uma resposta ao &lt;strong&gt;TDD&lt;/strong&gt;, criado em 2003, por &lt;em&gt;Dan North&lt;/em&gt;, e tem se expandido bastante nos últimos anos. Seu foco é obter um código testado a partir de um conjunto de cenários que descrevem como a aplicação ou unidade de código deverá se comportar em determinada situação.&lt;/p&gt;

&lt;h3 id=&#34;as-práticas-de-bdd-incluem&#34;&gt;As práticas de &lt;strong&gt;BDD&lt;/strong&gt; incluem:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Envolver as partes interessadas no processo através de &lt;em&gt;Outside-in Development&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Usar linguagem ubíqua para descrever o comportamento de uma aplicação&lt;/li&gt;
&lt;li&gt;Automatizar os exemplos para provê um feedback rápido e testes de regressão&lt;/li&gt;
&lt;li&gt;Usar &lt;strong&gt;&lt;em&gt;SHOULD&lt;/em&gt;&lt;/strong&gt; na hora de descrever o comportamento de software para ajudar esclarecer responsabilidades e permitir que funcionalidades do software sejam questionadas&lt;/li&gt;
&lt;li&gt;Usar dublês de teste &lt;em&gt;(mocks, stubs, fakes, dummies, spies)&lt;/em&gt; para auxiliar na colaboração entre módulos e códigos que ainda não foram escritos&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;e-8230&#34;&gt;E&amp;#8230;&lt;/h2&gt;

&lt;p&gt;O grande lance do BDD, é que nos trabalhamos com comportamentos de uma maneira que&lt;/p&gt;

&lt;p&gt;qualquer pessoa possa entender ou escrever novos testes. Baseado no que espera que&lt;/p&gt;

&lt;p&gt;a aplicação executa o aferir uma ação específica.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Qual a vantagem disso?&lt;/em&gt; O especialista do domínio pode escrever testes.&lt;/p&gt;

&lt;p&gt;O gerente de projetos pode escrever testes. o PO pode escrever testes baseados&lt;/p&gt;

&lt;p&gt;no que ele espera da aplicação. O padeiro da esquina pode escrever testes&lt;/p&gt;

&lt;p&gt;também. Qualquer um pode descrever o que espera da aplicação sem a necessidade&lt;/p&gt;

&lt;p&gt;de ter habilidades de um programador.&lt;/p&gt;

&lt;h2 id=&#34;cenários&#34;&gt;Cenários&lt;/h2&gt;

&lt;p&gt;Cada cenário descreve uma ação que será aferida e testada. Eles devem conter&lt;/p&gt;

&lt;p&gt;passos lógicos e simple de como obter um resultado específico a partir de uma sequência&lt;/p&gt;

&lt;p&gt;de ações.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cenário 1:&lt;/strong&gt; &lt;em&gt;Quantidade de items no estoque&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dado que há 5 items no estoque&lt;/li&gt;
&lt;li&gt;E um cliente comprou 2 items do estoque&lt;/li&gt;
&lt;li&gt;Então quando contar os items restantes no estoque&lt;/li&gt;
&lt;li&gt;Terei 3 items&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como podemos perceber, desenvolvedores podem se concentrar exclusivamente nas razões pelas quais o código deve ser criado, e não em detalhes técnicos, além de minimizar traduções entre a linguagem técnica na qual o código é escrito e outras linguagens de domínio.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHPUnit, como iniciar sem dores</title>
      <link>https://tableless.github.io/hugo-public/phpunit-como-iniciar-sem-dores/</link>
      <pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/phpunit-como-iniciar-sem-dores/</guid>
      <description>

&lt;p&gt;Como já mencionei em um artigo anterior, o &lt;a title=&#34;Ir ao repositório do PHPUnit&#34; href=&#34;https://github.com/sebastianbergmann/phpunit/&#34; target=&#34;_blank&#34;&gt;PHPUnit&lt;/a&gt; é um framework de testes unitários para a linguagem PHP. Ele provê um ecossistema para a execução de testes de forma automatizada.&lt;/p&gt;

&lt;p&gt;Neste artigo veremos a sua instalação utilizando o gerenciador de pacotes &lt;a title=&#34;Ir à página oficial do Composer&#34; href=&#34;http://getcomposer.org/&#34; target=&#34;_blank&#34;&gt;composer&lt;/a&gt;, configuração e estrutura de pastas e alguns testes simples sem persistência de dados.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-phpunit&#34;&gt;Instalando o PHPUnit&lt;/h2&gt;

&lt;p&gt;Para iniciar a instalação do PHPUnit precisamos primeiramente de um diretório que será nosso diretório de trabalho neste exemplo. Após criado o diretório é necessário criar um arquivo chamado &lt;a title=&#34;Ir ao modelo do arquivo composer.json&#34; href=&#34;http://getcomposer.org/doc/04-schema.md&#34; target=&#34;_blank&#34;&gt;&lt;i&gt;composer&lt;/i&gt;&lt;i&gt;.json&lt;/i&gt;&lt;/a&gt; para que seja definida a necessidade do PHP Unit no projeto. O arquivo _composer_&lt;em&gt;.json&lt;/em&gt; é responsável por declarar todas as bibliotecas que serão necessárias para o projeto em questão, em suma todas soluções de terceiros, incluindo suas soluções genéricas que encontrem-se no &lt;a title=&#34;Ir ao Packagist, repositório do composer&#34; href=&#34;https://packagist.org/&#34; target=&#34;_blank&#34;&gt;repositório do composer&lt;/a&gt; serão gerenciadas conforme a especificação do arquivo &lt;em&gt;composer.json.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O arquivo para este artigo deverá conter o seguinte conteúdo:&lt;/p&gt;

&lt;pre class=&#34;lang-json&#34;&gt;{
    &#34;require-dev&#34;: {
        &#34;phpunit/phpunit&#34;: &#34;3.7.*&#34;
    }
}&lt;/pre&gt;

&lt;p&gt;Isto quer dizer que estamos registrando como uma dependência de nosso projeto o PHPUnit em sua versão 3.7 sempre solicitando a última atualização. Para que sempre seja utilizada a última versão do PHPUnit basta remover a sequência &amp;#8220;3.7.*&amp;#8221; por simplesmente &amp;#8220;*&amp;#8221;. O mesmo é possível com qualquer biblioteca gerenciada pelo composer.&lt;/p&gt;

&lt;p&gt;Agora já estão prontas as declarações de nossas dependências basta baixar o gerenciador de dependência &lt;a title=&#34;Baixar o composer&#34; href=&#34;http://getcomposer.org/download/&#34; target=&#34;_blank&#34;&gt;composer&lt;/a&gt; e rodar o comando&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;php composer.phar install.&lt;/pre&gt;

&lt;p&gt;Isto irá de maneira automática baixar todas as dependências que foram especificadas no arquivo composer.json, e neste exemplo trata-se apenas do PHPUnit no entanto o próprio PHP Unit requer algumas bibliotecas de terceiros então outras bibliotecas estarão disponíveis além do mesmo dentro da pasta &lt;em&gt;vendor&lt;/em&gt; que será criada.&lt;/p&gt;

&lt;div id=&#34;attachment_40041&#34; style=&#34;width: 407px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40041 &#34; alt=&#34;PHPUnit - Instalação a partir do composer&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/01-composer-install-397x310.png&#34; width=&#34;397&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/12/01-composer-install-397x310.png 397w, uploads/2013/12/01-composer-install-215x168.png 215w, uploads/2013/12/01-composer-install.png 881w&#34; sizes=&#34;(max-width: 397px) 100vw, 397px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Instalação a partir do composer
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_40049&#34; style=&#34;width: 394px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40049 &#34; alt=&#34;PHPUnit - Estrutura de pastas&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/02-estrutura-pastas-384x310.png&#34; width=&#34;384&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/12/02-estrutura-pastas-384x310.png 384w, uploads/2013/12/02-estrutura-pastas-208x168.png 208w, uploads/2013/12/02-estrutura-pastas.png 784w&#34; sizes=&#34;(max-width: 384px) 100vw, 384px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Estrutura de pastas
  &lt;/p&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Existe uma convenção de padrões definidos pela &lt;a title=&#34;Ir à página do Framework Interop Group&#34; href=&#34;http://www.php-fig.org/&#34; target=&#34;_blank&#34;&gt;FIG&lt;/a&gt; chamada &lt;a title=&#34;Ver todas as PSRs&#34; href=&#34;https://github.com/php-fig/fig-standards/tree/master/accepted&#34; target=&#34;_blank&#34;&gt;PSR (Proposal Standards Recommendation)&lt;/a&gt;. Para facilitar será utilizada a definição do Autoloader para o exemplo que está descrito na PSR-0. Após a correta instalação via composer devem ser criadas os diretórios &lt;em&gt;src&lt;/em&gt; e dentro dele &lt;em&gt;Application&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Com a definição do Autoloader a nova estrutura do composer é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-json&#34;&gt;{
    &#34;autoload&#34;: {
        &#34;psr-0&#34;: {&#34;Application\\&#34;: &#34;src/&#34;}
    },
    &#34;require-dev&#34;: {
        &#34;phpunit/phpunit&#34;: &#34;3.7.*&#34;
    }
}&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;No arquivo composer.json agora é dito que o autoloader deve reconhecer o namespace &amp;#8220;Application&amp;#8221; que encontra-se dentro do diretorio &lt;em&gt;src&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;div id=&#34;attachment_40044&#34; style=&#34;width: 598px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40044 &#34; alt=&#34;PHPUnit - Nova estrutura de pastas&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/4-nova-estrutura-pastas-588x303.png&#34; width=&#34;588&#34; height=&#34;303&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Nova estrutura de pastas
  &lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;iniciando-com-um-simples-teste&#34;&gt;Iniciando com um simples teste&lt;/h2&gt;

&lt;p&gt;Como o PHPUnit já está instalado corretamente no projeto agora vem a parte legal que é criar pequenos testes (unitários, obviamente) e colocar em prática o vermelho-verde-refatora já mencionado no meu post anterior &lt;a href=&#34;http://tableless.com.br/tdd-por-que-usar&#34; title=&#34;Ler mais sobre TDD&#34;&gt;TDD, por que usar?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Primeiramente deve ser criada a pasta &lt;em&gt;tests&lt;/em&gt; que servirá para acomodar todos os casos de teste a serem executados.&lt;/p&gt;

&lt;p&gt;Começando com um teste simples, e na verdade este artigo somente mostrará o uso simplificado pois a finalidade do mesmo é apenas mostrar o caminho das pedras, como começar, instalar, configurar e rodar os primeiros testes. A partir daí cabe à necessidade de cada desenvolvedor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aqui será criado um arquivo PHPNativeElements onde serão testados algumas funções nativas do PHP e seus comportamentos. Obviamente que este caso de teste calha somente em modo didático pois tais testes e classe testada terá muito mais de uma única responsabilidade, é somente em caráter demonstrativo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Criado o arquivo _PHPNativeElementsTest.php_ dentro do diretório tests, siga o exemplo abaixo.&lt;/p&gt;

&lt;div id=&#34;attachment_40045&#34; style=&#34;width: 383px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40045  &#34; alt=&#34;PHPUnit - Estrutura inicial do primeiro teste&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/5-estrutura-primeiro-teste-373x310.png&#34; width=&#34;373&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/12/5-estrutura-primeiro-teste-373x310.png 373w, uploads/2013/12/5-estrutura-primeiro-teste-202x168.png 202w, uploads/2013/12/5-estrutura-primeiro-teste.png 738w&#34; sizes=&#34;(max-width: 373px) 100vw, 373px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Estrutura inicial do primeiro teste
  &lt;/p&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt; Para que seja reconhecido como um teste o arquivo deve conter a sufixo Test.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;executando-de-forma-simples&#34;&gt;Executando de forma simples&lt;/h2&gt;

&lt;p&gt;Como o PHPUnit foi instalado a partir do composer, é a partir da estrutura montada pelo mesmo que este será executado digitando no terminal&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;./vendor/bin/phpunit&lt;/pre&gt;

&lt;p&gt;Com isto uma tela de ajuda deve aparecer com todas as opções disponíveis para a utilização do PHPUnit. Seguem as definições do comando que será executado neste primeiro momento.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #000080&#34;&gt;./vendor/bin/phpunit&lt;/span&gt; &lt;span style=&#34;color: #333333&#34;&gt;&amp;#8211;colors&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;&amp;#8211;debug&lt;/span&gt; &lt;span style=&#34;color: #800000&#34;&gt;tests/PHPNativeElements &lt;/span&gt;onde:&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #000080&#34;&gt;./vendor/bin/phpunit&lt;/span&gt;: o próprio executável do PHPUnit&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;#8211;colors&lt;/span&gt;: habilita coloração ( assim podemos ver os estágios vermelho-verde de forma mais simples)&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #008000&#34;&gt;&amp;#8211;debug&lt;/span&gt;: habilita o modo debug para detalhamento das ações que estão sendo tomadas durante os testes – Esta ação serve como ótima documentação como já mencionado em meu artigo anterior.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #800000&#34;&gt;tests/PHPNativeElements&lt;/span&gt;: o nome da classe de testes a ser testada.&lt;/p&gt;

&lt;p&gt;Ao rodarmos o comando acima a mensagem resultante deverá ser a de que não há testes disponíveis na classe testada.&lt;/p&gt;

&lt;div id=&#34;attachment_40050&#34; style=&#34;width: 484px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40050  &#34; alt=&#34;PHPUnit - Falta de testes&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/6-falta-de-testes-474x310.png&#34; width=&#34;474&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/12/6-falta-de-testes-474x310.png 474w, uploads/2013/12/6-falta-de-testes-256x168.png 256w, uploads/2013/12/6-falta-de-testes.png 881w&#34; sizes=&#34;(max-width: 474px) 100vw, 474px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Informação de que ainda não há testes
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;fazendo-o-primeiro-teste-passar&#34;&gt;Fazendo o primeiro teste passar&lt;/h2&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;O TDD define que o desenvolvimento deve ser orientado a testes, com isso, criaremos primeiramente a expectativa na nossa classe de testes e em seguida a implementação no código de produção.&lt;/p&gt;

&lt;p&gt;Após o método &lt;em&gt;tearDown&lt;/em&gt; que já encontra-se na classe &lt;em&gt;PHPNativeElementsTest&lt;/em&gt; crie um método chamado &lt;em&gt;testOperacaoMatematica&lt;/em&gt;. Assim como a classe de teste possui uma convenção com os métodos também é necessário especificar qual trata-se de um teste a partir do prefixo &lt;em&gt;test.&lt;/em&gt; Por este motivo nosso primeiro caso de teste se chamar testOperacaoMatematica. Caso não contenha o prefixo test e, não sendo os métodos setUp e tearDown, o PHPUnit simplesmente não executa o método.&lt;/p&gt;

&lt;p&gt;Como estamos utilizando o Autoloader, em nossa classe de teste usaremos o namespace &amp;#8220;_Application_&lt;em&gt;NativeElements\Math&amp;#8221;&lt;/em&gt; para carregar a nossa classe que será testada a partir da classe de testes. Como atributo de nossa classe de teste adicionaremos &amp;#8220;$math&amp;#8221; e nele instanciaremos a classe _Application_&lt;em&gt;NativeElements\Math&lt;/em&gt; dentro do método &lt;em&gt;setUp&lt;/em&gt;.&lt;/p&gt;

&lt;div id=&#34;attachment_40052&#34; style=&#34;width: 434px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40052 &#34; alt=&#34;PHPUnit - Nova estrutura da classe de teste&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/7-nova-estrutura-classe-de-testes1-424x310.png&#34; width=&#34;424&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/12/7-nova-estrutura-classe-de-testes1-424x310.png 424w, uploads/2013/12/7-nova-estrutura-classe-de-testes1-230x168.png 230w, uploads/2013/12/7-nova-estrutura-classe-de-testes1.png 804w&#34; sizes=&#34;(max-width: 424px) 100vw, 424px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Nova estrutura da classe de teste
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;Ao rodarmos novamente o PHPUnit o teste simplesmente quebra. Isto porque a classe&lt;/p&gt;

&lt;p&gt;_Application_&lt;em&gt;NativeElements\Math&lt;/em&gt; ainda não existe. Este é o próximo passo, o código que fará o testes passar.&lt;/p&gt;

&lt;div id=&#34;attachment_40053&#34; style=&#34;width: 498px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40053 &#34; alt=&#34;PHPUnit - Quebra do teste&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/8-quebra-do-teste-488x310.png&#34; width=&#34;488&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/12/8-quebra-do-teste-488x310.png 488w, uploads/2013/12/8-quebra-do-teste-264x168.png 264w, uploads/2013/12/8-quebra-do-teste.png 875w&#34; sizes=&#34;(max-width: 488px) 100vw, 488px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Quebra do teste por não existir a classe testada
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;Criamos o arquivo&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Math.php&lt;/em&gt; dentro do diretório &lt;em&gt;Application/NativeElements&lt;/em&gt; e no mesmo a classe &lt;em&gt;Math&lt;/em&gt; definindo como namespace &lt;em&gt;Application\NativeElements&lt;/em&gt;. Por hora nenhum método é criado nesta nova classe.&lt;/p&gt;

&lt;div id=&#34;attachment_40056&#34; style=&#34;width: 514px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40056 &#34; alt=&#34;PHPUnit - Classe de produção, nela os problemas criados nos testes serão solucionados&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/9-class-504x310.png&#34; width=&#34;504&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/12/9-class-504x310.png 504w, uploads/2013/12/9-class-273x168.png 273w, uploads/2013/12/9-class.png 955w&#34; sizes=&#34;(max-width: 504px) 100vw, 504px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Classe de produção, nela os problemas criados nos testes serão solucionados
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;Rodando nosso teste novamente ele quebra mais uma vez. Agora o que está faltando é o método testado (&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sum&lt;/em&gt; ).&lt;/p&gt;

&lt;div id=&#34;attachment_40057&#34; style=&#34;width: 598px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40057 &#34; alt=&#34;PHPUnit - Faltando método sum&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/10-method-missing-588x289.png&#34; width=&#34;588&#34; height=&#34;289&#34; srcset=&#34;uploads/2013/12/10-method-missing-588x289.png 588w, uploads/2013/12/10-method-missing-329x162.png 329w, uploads/2013/12/10-method-missing-628x310.png 628w, uploads/2013/12/10-method-missing.png 880w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Faltando método sum
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;Ao criar o método sum e sua lógica estando correta o teste atual passará, então passamos do estágio vermelho para o estágio verde. Como este exemplo é uma simples operação matemática muito provavelmente não será necessária uma refatoração. No entanto sendo um lógica mais complexa o ideal é que sempre comece testando pequenos passos, que são chamados de baby steps ou passos de bebê. Ao se deparar com uma situação complexa em que o resultado depende de N variáveis, trata-se sempre o meio mais simples e os testes passando passa-se a procurar solucionar uma nova condição para o resultado.&lt;/p&gt;

&lt;div id=&#34;attachment_40058&#34; style=&#34;width: 598px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40058 &#34; alt=&#34;PHPUnit - Método com a lógica necessária e primeiro teste passando&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/11-pass-588x262.png&#34; width=&#34;588&#34; height=&#34;262&#34; srcset=&#34;uploads/2013/12/11-pass-588x262.png 588w, uploads/2013/12/11-pass-329x146.png 329w, uploads/2013/12/11-pass-660x294.png 660w, uploads/2013/12/11-pass.png 1364w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Método com a lógica necessária e primeiro teste passando
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;Agora basta adicionar os asserts para as demais operações matemáticas.&lt;/p&gt;

&lt;div id=&#34;attachment_40059&#34; style=&#34;width: 598px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40059 &#34; alt=&#34;PHPUnit - Outros métodos de operações matemáticas simples&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/12-other-methods-588x272.png&#34; width=&#34;588&#34; height=&#34;272&#34; srcset=&#34;uploads/2013/12/12-other-methods-588x272.png 588w, uploads/2013/12/12-other-methods-329x152.png 329w, uploads/2013/12/12-other-methods-660x305.png 660w, uploads/2013/12/12-other-methods.png 1358w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Outros métodos de operações matemáticas simples
  &lt;/p&gt;
&lt;/div&gt;

&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;

&lt;blockquote&gt;
&lt;p&gt;Como pode ser percebido, como terceiro parâmetro do assert foi adicionada uma mensagem opcional, isso para que ao dar erro da asserção tal mensagem seja exibida, conforme a imagem seguinte.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&#34;attachment_40060&#34; style=&#34;width: 507px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40060 &#34; alt=&#34;PHPUnit - Mensagem de erro de asserção&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/13-message-497x310.png&#34; width=&#34;497&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/12/13-message-497x310.png 497w, uploads/2013/12/13-message-269x168.png 269w, uploads/2013/12/13-message.png 809w&#34; sizes=&#34;(max-width: 497px) 100vw, 497px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Mensagem de erro de asserção
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;refatorando&#34;&gt;Refatorando&lt;/h2&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;Agora voltando ao código originado na classe&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Math&lt;/em&gt;, dá pra perceber que há muita repetição pois todos os métodos recebem dois valores e retornam uma operação correspondente. Como utilizando TDD temos segurança em desenvolver, podemos tranquilamente remover tais repetições criando uma interface onde é previamente definida a operação a ser realizada e retorna o resultado desta operação. Obviamente com esta atitude o teste também sofrerá alterações e isso é algo comum pois uma aplicação está sempre evoluindo.&lt;/p&gt;

&lt;p&gt;Frenta à necessidade de refatoração novamente começamos a partir do teste e ele fica como na imagem a seguir:&lt;/p&gt;

&lt;div id=&#34;attachment_40061&#34; style=&#34;width: 498px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40061 &#34; alt=&#34;PHPUnit - Alterações na classe de teste&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/14-test-refactor-488x310.png&#34; width=&#34;488&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/12/14-test-refactor-488x310.png 488w, uploads/2013/12/14-test-refactor-264x168.png 264w, uploads/2013/12/14-test-refactor.png 899w&#34; sizes=&#34;(max-width: 488px) 100vw, 488px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Alterações na classe de teste
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;Com a refatoração nossa classe Math é modificada e criada uma interface:&lt;/p&gt;

&lt;div id=&#34;attachment_40063&#34; style=&#34;width: 598px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40063 &#34; alt=&#34;PHPUnit - refatoração da classe Math&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/15-refactor-588x284.png&#34; width=&#34;588&#34; height=&#34;284&#34; srcset=&#34;uploads/2013/12/15-refactor-588x284.png 588w, uploads/2013/12/15-refactor-329x159.png 329w, uploads/2013/12/15-refactor-640x310.png 640w, uploads/2013/12/15-refactor.png 1354w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Refatoração da classe Math
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;E agora rodando novamente o teste após a refatoração, simplesmente continuamos com tudo verde, ou seja, alteramos muito a forma de implementação de uma classe e ela continua executando seu papel como deve.&lt;/p&gt;

&lt;div id=&#34;attachment_40064&#34; style=&#34;width: 587px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-medium wp-image-40064 &#34; alt=&#34;PHPUnit - Teste passando após refatoração&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/16-refactor-pass-577x310.png&#34; width=&#34;577&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/12/16-refactor-pass-577x310.png 577w, uploads/2013/12/16-refactor-pass-313x168.png 313w, uploads/2013/12/16-refactor-pass.png 818w&#34; sizes=&#34;(max-width: 577px) 100vw, 577px&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Teste passando após refatoração
  &lt;/p&gt;
&lt;/div&gt;

&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;

&lt;blockquote&gt;
&lt;p&gt;Este é apenas um exemplo didático de refatoração, mas mesmo com ele dá pra perceber como houve a anulação de código repetido e para um futura manutenção basta que mexa-se em um local somente para que surta efeitos à todas as operações matemáticas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;finalizando&#34;&gt;Finalizando&lt;/h2&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;Neste artigo foi abordado apenas a instalação do PHPUnit e a execução de um teste muito simples. Para testes mais avançados serão criados novos artigos sempre em sequência para que o estudo de desenvolvimento orientado a testes siga um fluxo sadio. Já fora criado um artigo explicando os por ques de se utilizar e não se utilizar TDD que encontra-se neste&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/tdd-por-que-usar&#34; title=&#34;Ler mais sobre TDD&#34;&gt;link&lt;/a&gt; e é o primeiro artigo da sequência.&lt;/p&gt;

&lt;p&gt;&lt;!-- P { margin-bottom: 0.08in; }A:link {  } --&gt;Os próximos artigos seguirão a sequência abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configurações avançadas – Apenas uma breve abordagem de como realizar configurações avançadas na execução do PHPUnit gerando reports como coverage.&lt;/li&gt;
&lt;li&gt;Persistência – Será utilizado o ORM Doctrine para complementarmos o projeto&lt;/li&gt;
&lt;li&gt;Mockery – Utilizando objetos simulados para atender certos comportamentos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Você pode baixar o código-fonte dos exemplos apresentados aqui no &lt;a title=&#34;Ir para o repositório de exemplos desenvolvidos neste artigo&#34; href=&#34;https://github.com/andrebian/phpunit-como-iniciar-sem-dores&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TDD, por que usar?</title>
      <link>https://tableless.github.io/hugo-public/tdd-por-que-usar/</link>
      <pubDate>Tue, 17 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tdd-por-que-usar/</guid>
      <description>

&lt;p&gt;TDD é o desenvolvimento de software orientado a testes, ou em inglês, &lt;a title=&#34;Test Driven Development&#34; href=&#34;http://pt.wikipedia.org/wiki/Test_Driven_Development&#34; target=&#34;_blank&#34;&gt;Test Driven Development&lt;/a&gt;. Mas mais do que simplesmente testar seu código, TDD é uma filosofia, uma cultura. Neste artigo você conhecerá um pouco sobre sua motivação e também saberá os fatores que contribuem e dificultam sua prática.&lt;/p&gt;

&lt;h2 id=&#34;por-que-muitos-não-praticam&#34;&gt;Por que muitos não praticam?&lt;/h2&gt;

&lt;p&gt;Muitos fatores contribuem para que inúmeros programadores deixem de utilizar TDD logo no início. Alguns deles são:&lt;/p&gt;

&lt;h3 id=&#34;dificuldade-em-começar&#34;&gt;Dificuldade em começar&lt;/h3&gt;

&lt;p&gt;Apesar de uma extensa e clara documentação, iniciar o desenvolvimento orientado a testes pode ser um trabalho árduo para muitos pelo simples fato de que geralmente muitos iniciantes tentam praticá-lo em código já existente. Este definitivamente não é o caminho. A principal característica do desenvolvimento orientado a testes é que ele seja orientado a testes. Em outras palavras o código que realizará sua lógica deve ser criado somente após a criação do teste e isso torna-se algo de difícil aceitação pois ainda não se tem nada e já se faz necessário testar.&lt;/p&gt;

&lt;h3 id=&#34;curva-de-apendizado&#34;&gt;Curva de apendizado&lt;/h3&gt;

&lt;p&gt;Complementando o item anterior, este é outro motivo que faz programadores desistirem do desenvolvimento orientado a testes. Como qualquer nova tecnologia, para a pratica de TDD leva-se um bom tempo dependendo disponibilidade e principalmente da vontade do programador.&lt;/p&gt;

&lt;p&gt;Tempo&lt;/p&gt;

&lt;p&gt;Engana-se quem pensa que produzirá mais código pelo simples fato de utilizar TDD. O TDD na verdade chega a desacelerar a produção de código. Quando falo em produção de código, me refiro à quantidade de linhas escritas. Mas nisso tudo há vantagens e elas serão descritas mais a frente.&lt;/p&gt;

&lt;h3 id=&#34;cultura&#34;&gt;Cultura&lt;/h3&gt;

&lt;p&gt;Muito fala-se de TDD no Brasil, mas ao questionarmos programadores de diversas empresas muitos apresentam os motivos citados acima para não utilizá-lo. Existem sim muitas empresas e programadores que levam a prática a sério e a evangelizam justamente por conhecerem as vantagens que o TDD nos traz.&lt;/p&gt;

&lt;h2 id=&#34;nem-tudo-é-tão-ruim&#34;&gt;Nem tudo é tão ruim&lt;/h2&gt;

&lt;p&gt;Vistos alguns pontos que dificultam programadores a aderirem ao TDD, listamos agora alguns benefícios que esta prática nos fornece.&lt;/p&gt;

&lt;h3 id=&#34;qualidade-do-código&#34;&gt;Qualidade do código&lt;/h3&gt;

&lt;p&gt;Um dos principais ensinamentos, senão o principal, do TDD é que se algo não é possível de ser testado então foi desenvolvido de forma errada. Parece um pouco drástico mas não é. Em pouco tempo utilizando testes o programador percebe mudanças relevantes em sua forma de programar. Em suma o uso de TDD ajuda o programador a elaborar um código com cada vez mais qualidade criando objetos concisos e com menos dependências.&lt;/p&gt;

&lt;h3 id=&#34;raciocínio&#34;&gt;Raciocínio&lt;/h3&gt;

&lt;p&gt;Para que o código torne-se mais conciso, tenha menos acoplamentos e dependências o programador deve forçar seu raciocínio a níveis elevados. É muito difícil criar algo que realmente tenha um bom design. Utilizando TDD o programador praticamente obriga-se a olhar seu código de outra forma normalmente jamais vista antes. Aí é que está a parte legal da coisa toda.&lt;/p&gt;

&lt;h3 id=&#34;segurança&#34;&gt;Segurança&lt;/h3&gt;

&lt;p&gt;Ponto importantíssimo para qualquer software nos dias de hoje. Mas não se engane, não estou falando de segurança da informação e sim de segurança ao desenvolver. Pense em uma situação em que o programador tenha um código que desenvolvera ha cerca de um ano. Como normalmente vivemos em um mundo com inúmeros softwares desenvolvidos ao longo de cada ano, torna-se muito difícil lembrar de tudo a respeito de um que merece nossa atenção em determinado momento. Normalmente deve-se realizar um trabalho bastante cauteloso para nova implementação em um software que encontra-se em produção. Toda e qualquer alteração deve ser minunciosamente testada e garantida que não afetará demais módulos do software. Fazer isto manualmente é realmente complicado pois até então não sabe-se (ou lembra-se) ao certo quem afeta quem no sistema. Com a prática de TDD cada pequeno passo do software está devidamente testado. Ou seja, com este cenário o programador pode realizar qualquer alteração sem medo e sem culpa.&lt;/p&gt;

&lt;p&gt;Como cada pequeno passo tomado pelo sistema está testado ao qualquer módulo ou funcionalidade sofrer alteração, com poucos segundos descobre-se se houveram quebras e o melhor de tudo, onde foram essas quebras. Com isso em mãos a correção das quebras torna-se uma tarefa simples sem frustrar o cliente e o usuário.&lt;/p&gt;

&lt;h3 id=&#34;trabalho-em-equipe&#34;&gt;Trabalho em equipe&lt;/h3&gt;

&lt;p&gt;Por prover mais segurança o trabalho em equipe torna-se muito mais proveitoso eliminando discussões e dúvidas desnecessárias. Ao entrar no desenvolvimento do projeto o novo desenvolvedor tem apenas o trabalho de entender qual task deve ser realizada e ler os testes das features já desenvolvidas. Ao rodar os testes pela primeira vez o programador descobre se está no caminho de ter um entregável mais rapidamente e com segurança. Existem empresas em que um novo programador tem entregáveis logo no primeiro dia de trabalho. Sem testes normalmente haveria um período de adaptação para prévio entendimento do que há no sistema no momento de seu ingresso ao time de desenvolvimento.&lt;/p&gt;

&lt;h3 id=&#34;documentação&#34;&gt;Documentação&lt;/h3&gt;

&lt;p&gt;Ao criar testes descritivos estes servem como uma excelente documentação para o software. Quando qualquer programador for rodar os testes, basta habilitar o modo verbose que uma “história” é contada eliminando o árduo trabalho de documentar um software onde nos meios tradicionais tende a defasar-se. O problema é que a documentação tradicional raramente segue o mesmo ritmo do desenvolvimento. Com os testes unitários a “documentação” é gerada antes mesmo da nova feature ser implementada e permanece fiel a qualquer alteração.&lt;/p&gt;

&lt;h2 id=&#34;o-que-resume-se-disto-tudo&#34;&gt;O que resume-se disto tudo?&lt;/h2&gt;

&lt;p&gt;Até aqui temos os pontos negativos e positivos do desenvolvimento orientado a testes. Agora vamos aprender um pouco sobre o que é TDD.&lt;/p&gt;

&lt;p&gt;O TDD (Test Driven Development) baseia-se em três passos, vermelho-verde-refatora. O vermelho é a escrita do primeiro teste antes mesmo da lógica existir. O verde é o ponto em que a lógica para que o teste previamente criado passe. Esta lógica deve ser desenvolvida da forma mais simples possível eliminando complexidades desnecessárias fazendo com que a evolução do código ocorra de forma segura. O refatora é a melhoria do código. Neste ponto são removidas duplicações, múltiplas responsabilidades e o código fica cada vez mais próximo de sua versão final.&lt;/p&gt;

&lt;p&gt;Para que o processo vermelho-verde-refatora seja de fato implementado, utiliza-se baby steps ou passos de bebê. Esta técnica consiste em realizar um pequeno passo de cada vez, se uma lógica é complexa de ser desenvolvida ela é dividida em muitas pequenas partes que evoluem até sua solução final. Obviamente que esta técnica é aplicável preferencialmente em processos complexos que dependem de muitas variáveis. Para processos simples nem sempre é a mais indicada.&lt;/p&gt;

&lt;p&gt;Os testes devem ser unitários. Isto implica em um teste automatizado certificar-se de apenas uma funcionalidade do código utilizando para isso quantos asserts forem necessários. Por serem testes automatizados são fácil e rapidamente executados eliminando testes manuais que encarecem o software em vários aspectos. Devido à dinâmica de tais testes é possível vincular o software com ferramentas de integração contínua como Jenkins reduzindo ainda mais o custo (tempo de desenvolvimento) do mesmo.&lt;/p&gt;

&lt;p&gt;Concluindo&lt;/p&gt;

&lt;p&gt;Como ficou claro a prática do desenvolvimento orientado a testes pode ser penosa para quem está começando mas muito satisfatória para quem já a tem como parte de seu dia a dia. Ao utilizar TDD o programador “perde” em linhas de código por hora mas ganha horas, dias, quem sabe até semanas na prevenção de novos erros e correção dos que ocorrem durante a implementação de uma nova feature. Detalhe que o método TDD parte do princípio que o teste sempre deve ser implementado antes do código de produção.&lt;/p&gt;

&lt;p&gt;Em suma tudo vai depender to porte do projeto em que se está trabalhando, da cultura da empresa e da vontade de programadores mas sabe-se que quem utiliza TDD reconhece suas vantagens.&lt;/p&gt;

&lt;p&gt;Agora que você já tem uma noção do que é TDD, suas vantagens e desvantagens, sugiro a ler sobre &lt;a title=&#34;xUnit - Framework de testes unitários&#34; href=&#34;http://www.martinfowler.com/bliki/Xunit.html&#34; target=&#34;_blank&#34;&gt;xUnit&lt;/a&gt;. O xUnit é um framework de testes disponível para várias linguagens de programação. Em PHP temos o &lt;a title=&#34;PHPUnit - Framework de testes unitários para PHP&#34; href=&#34;http://phpunit.de/manual/3.7/pt_br/automating-tests.html&#34; target=&#34;_blank&#34;&gt;PHPUnit&lt;/a&gt;, em java o &lt;a title=&#34;jUnit - Framework de testes unitários para Java&#34; href=&#34;http://junit.org/&#34; target=&#34;_blank&#34;&gt;jUnit&lt;/a&gt; e demais linguagens possuem seus frameworks que tem a mesma finalidade, criar um ecossistema para que o programador desenvolva orientando-se a testes.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução de como executar testes unitários em diferentes tipos de navegadores</title>
      <link>https://tableless.github.io/hugo-public/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://saucelabs.com/&#34; title=&#34;SauceLabs&#34;&gt;SauceLabs&lt;/a&gt; é uma plataforma de teste que possibilita realizar testes automáticos ou manuais em aplicações móveis e web (incluindo navegadores como Internet Explorer, Opera, Safari, Android, iPhone, Chrome etc). Essa plataforma permite executar os testes em diversas linguagem de programação, porém, em nosso exemplo, iremos utilizar o NodeJS (JavaScript).&lt;/p&gt;

&lt;p&gt;O NodeJS e o Gerenciador de Pacotes do Node (traduzido do inglês Node Package Manager &amp;#8211; NPM) podem ser baixados no &lt;a href=&#34;http://nodejs.org/download/&#34; title=&#34;site oficial NodeJS&#34;&gt;site oficial&lt;/a&gt;. Esse gerenciador de pacotes permite a interação com um repositório online via linha de comando, facilitando a instalação de várias ferramentas.&lt;/p&gt;

&lt;p&gt;Nesse exemplo, será utilizado uma ferramenta chamada &lt;a href=&#34;https://github.com/airportyh/testem&#34; title=&#34;documentação do Test&#39;em&#34;&gt;Test&amp;#8217;em&lt;/a&gt;, que é gerenciada e instalada pelo NPM. Essa ferramenta permite rodar os testes unitários de JavaScript localmente em diferentes plataformas, tornando a execução mais fácil e divertida. Test&amp;#8217;em suporta vários frameworks de teste, tais como: Jasmine, QUnit e Mocha. Para instalar, basta digitar no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install testem -g&lt;/pre&gt;

&lt;p&gt;No exemplo, será utilizado o framework Jasmine. Mesmo código do &lt;a href=&#34;https://saucelabs.com/docs/javascript-unit-testing-tutorial&#34; title=&#34;tutorial oficial do SauceLabs&#34;&gt;tutorial oficial do SauceLabs&lt;/a&gt;. As especificações do código estão descritas no arquivo PastaSpec.js e a implementação no arquivo Pasta.js. Ambos arquivos encontra-se abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PastaSpec.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;describe(&#34;Pasta&#34;, function() { 
  it(&#34;should make spaghetti bolognese&#34;, function() { 
    var pasta = new Pasta(); 
    pasta.add(&#34;tomatoes&#34;); 
    pasta.add(&#34;garlic&#34;); 
    pasta.add(&#34;olive&#34;); 
    pasta.add(&#34;herbs&#34;); 
    pasta.add(&#34;meat&#34;); 
    expect(pasta.getType()).toEqual(&#34;bolognese&#34;); 
    expect(pasta.isTasty()).toEqual(true); 
  }); 

  it(&#34;should make pasta with no sauce&#34;, function() { 
    var pasta = new Pasta(); 
    pasta.add(&#34;meat&#34;); 
    expect(pasta.getType()).toEqual(undefined); 
    // pasta with no sauce? yeah that&#39;s not too tasty 
    expect(pasta.isTasty()).toEqual(false); 
  }); 
});&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Pasta.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function Pasta() { 
  // recipes for good pasta sauces 
  this.sauces = { 
    &#39;bolognese&#39;: [&#34;tomatoes&#34;, &#34;garlic&#34;, &#34;olive&#34;, &#34;herbs&#34;, &#34;meat&#34;] 
  }; 
  this.sauceIngredients = []; 
} 

Pasta.prototype.add = function (ingredient) { 
  this.sauceIngredients.push(ingredient); 
}; 

Pasta.prototype.getType = function () { 
  for (var posssibleSauce in this.sauces) { 
    var ingredientsValid = true; 
    // checking if arrays are equal 
    if (!(this.sauceIngredients.sort() &amp;gt; this.sauces[posssibleSauce].sort() || 
          this.sauceIngredients.sort() &amp;lt; this.sauces[posssibleSauce].sort())) { 
      return posssibleSauce; 
    } 
  } 
  return undefined; 
}; 

Pasta.prototype.isTasty = function () { 
  if (this.getType() !== undefined) { return true; } 
  return false; 
};&lt;/pre&gt;

&lt;p&gt;Uma vez criado o arquivo de especificação &amp;#8216;PastaSpec.js&amp;#8217; e a implementação &amp;#8216;Pasta.js&amp;#8217;, é preciso criar um arquivo de configuração &amp;#8216;&lt;em&gt;testem.json&lt;/em&gt;&amp;#8216;. Necessário apenas informar o framework utilizado e os arquivos JavaScript. Conforme escrito abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;testem.json&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{ 
  &#34;framework&#34;: &#34;jasmine&#34;, 
  &#34;src_files&#34;: [ 
    &#34;Pasta.js&#34;, 
    &#34;PastaSpec.js&#34; 
  ] 
}&lt;/pre&gt;

&lt;p&gt;O Test&amp;#8217;em usa como padrão a porta 7357. O parâmetro &amp;#8216;&amp;#8211;port&amp;#8217; serve para especificar uma outra. Nesse caso, vamos utilizar a 8080, digitando:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;testem --port=8080&lt;/pre&gt;

&lt;p&gt;Após a execução do comando, o resultado dos testes pode ser visto pela url &lt;strong&gt;&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/strong&gt;. Caso a url seja aberta no Chrome, os testes serão executados no navegador Chrome. Caso aberta no Safari, será executado no Safari. Como ilustra a figura seguinte.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/4c25f04b60b6f6aaff1b50a0069ca0f5487860be/687474703a2f2f7332312e706f7374696d672e6f72672f6e72393273783469762f6a61736d696e655f74657374735f6f6e5f74657374656d2e706e67&#34; alt=&#34;testing Jasmine code on Test&#39;em&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para testar o código em diversos navegadores ou diversos sistemas operacionais, não é necessário ter máquinas virtuais nem mesmo outros dispositivos, como celulares ou tablet. O Sauce Labs prover o conector &lt;a href=&#34;http://saucelabs.com/downloads/Sauce-Connect-latest.zip&#34; title=&#34;Sauce Connect&#34;&gt;Sauce Connect&lt;/a&gt;. Com ele é possível criar uma conexão entre a nossa máquina e os servidores do SauceLabs, assim é possível rodar os testes dentro do firewall do Sauce Labs Cloud. Cloud que disponibiliza mais de &lt;a href=&#34;https://saucelabs.com/docs/platforms&#34; title=&#34;plataformas SauceLabs&#34;&gt;200 plataformas&lt;/a&gt;, que inclui dispositivos móveis, diversos SO e navegadores. Uma vez baixado o Sauce Connect, essa conexão é feita pelo comando:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;java -jar Sauce-Connect.jar --tunnel-identifier &#34;tabless&#34; $SAUCE_USERNAME $SAUCE_ACCESS_KEY&lt;/pre&gt;

&lt;p&gt;Vale ressaltar que _$SAUCE&lt;em&gt;USERNAME&lt;/em&gt; e &lt;em&gt;$SAUCE_ACCESS_KEY&lt;/em&gt; são variáveis de ambientes. Método recomendado para evitar a divulgação de dados privados. Para obter dados de acesso, acesse a &lt;a href=&#34;https://saucelabs.com/signup&#34; title=&#34;página de cadastro do SauceLabs&#34;&gt;página de cadastro&lt;/a&gt;. Após a criação da conta, uma chave de acesso já é fornecida, conforme é ilustrado na figura abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/b29a04372bbe9224392df879736467128316054e/687474703a2f2f7332312e706f7374696d672e6f72672f63673666346a786e722f73617563656c6162735f6163636f756e745f706167652e706e67&#34; alt=&#34;página inicial da conta SauceLabs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Na página inicial, o botão &lt;strong&gt;New Interactive Session&lt;/strong&gt; permite a criação de uma instância de navegador. Uma popup (ilustrada na imagem abaixo) será exibida ao clicar no botão, com várias opções de sistema operacional e de navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/7de3c788dc9a56a153bada645514034a442ae6d4/687474703a2f2f7332312e706f7374696d672e6f72672f736f693230616834372f6e65775f696e7465726163746976655f73657373696f6e5f706f7075702e706e67&#34; alt=&#34;popup para a criação de uma nova instância de navegador do SauceLabs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ao instanciar o navegador, é possível visualizar o resultado dos testes no terminal (ilustração na imagem abaixo). Os testes sempre serão executados novamente caso haja alguma alteração tanto no código quanto nas especificações, possibilitando assim a prática de TDD ou BDD, utilizando qualquer tipo de navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/404afe58a076603719c0448fbc1a41ca92c85e0c/687474703a2f2f7332312e706f7374696d672e6f72672f74687a39366e6369762f697061645f73617563656c6162735f73657373696f6e2e706e67&#34; alt=&#34;instancia de um iPad do SauceLabs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse exemplo contempla apenas a execução de testes de forma manual. Essas ferramentas que foram utilizadas também oferecem suporte para a automatização de testes, mas isso ficará para um próximo capítulo. Para quem se interessar, todo código está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/7649954&#34; title=&#34;gist do exemplo&#34;&gt;gist&lt;/a&gt;. Muito obrigado.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>