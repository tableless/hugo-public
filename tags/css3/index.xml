<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css3 on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/css3/index.xml</link>
    <description>Recent content in Css3 on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/css3/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CSS3 — Trabalhando com Múltiplas imagens background-images</title>
      <link>https://tableless.github.io/hugo-public/css3-trabalhando-com-multiplas-imagens-background-images/</link>
      <pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-trabalhando-com-multiplas-imagens-background-images/</guid>
      <description>

&lt;p class=&#34;graf--p&#34;&gt;
  Quem nunca se deparou com um layout com múltiplas imagens “sobrepostas” ou mesmo com títulos ou parágrafos que precisavam ficar suspensos sobre múltiplas imagens de fundo? Essa semana me deparei com o mesmo problema.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Com &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;CSS3&#34; href=&#34;https://developer.mozilla.org/en/CSS/CSS3&#34;&gt;CSS3&lt;/a&gt;, você pode aplicar aos elementos múltiplas imagens sobrepostas como plano de fundo. Sem a utilização do Z-index! É isso mesmo, “necas de pitibiriba” de Z-index.
&lt;/p&gt;

&lt;h2 id=&#34;velho-dilema-de-sobrepor-imagens-com-div-s-com-z-index-graf-h4&#34;&gt;Velho dilema de sobrepor imagens com div’s com Z-index… {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  A primeira solução que vem à cabeça é o velho e bom “Z-index”, Veja um exemplo de implementação:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;red&#34;&amp;gt;Red&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;green&#34;&amp;gt;Green&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;blue&#34;&amp;gt;Blue&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.red, .green, .blue {
    color: #fff;
    display: block;
    line-height: 100px;
    position: absolute;
    text-align: center;
    width: 100px;
}
.red {
    background: red;
    left: 20px;
    top: 20px;
    z-index: 0;
    opacity:0.5;
}
.green {
    background: green;
    left: 60px;
    top: 60px;
    z-index: 1;
    opacity:0.6;
}
.blue {
    background: blue;
    left: 100px;
    top: 100px;
    z-index: 2;
    opacity:0.7;
}
body {
    color: #777;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/grvvLw/&#34;&gt;Z-index&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;funciona-em-class-markup-em-markup-h4-em-sim-em-mas-espere-um-momento-essa-não-é-a-única-solução-graf-h4&#34;&gt;Funciona?!… &lt;em class=&#34;markup--em markup--h4-em&#34;&gt;SIM!&lt;/em&gt; Mas espere um momento, essa não é a única solução… {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  … Você já tava pensando num “workaround” safadinho, a mão da gambiarra chega a tremer nessas horas, mas nada de programação orientada a “Go-Horse”, hoje em dia temos “solucionática” pra quase tudo hehe…
&lt;/p&gt;

&lt;div style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*pAiFtxYHdjg4-HP6e46wZA.gif&#34; alt=&#34;www.gohorseprocess.com.br/extreme-go-horse-(xgh)&#34; width=&#34;500&#34; height=&#34;374&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    www.gohorseprocess.com.br/extreme-go-horse-(xgh)
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;conhecendo-as-propriedades-css-do-background-graf-h4&#34;&gt;Conhecendo as propriedades CSS do Background: {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;pre&gt;background-color.........define a cor do fundo;
background-image.........define uma imagem de fundo;
background-repeat........define a maneira como a imagem de fundo é posicionada;
background-attachment....define se a imagem de fundo &#34;rola&#34; ou não com a tela;
background-position......define como e onde a imagem de fundo é posicionada;
background-clip..........define a área do box onde a imagem de fundo é aplicada;
background-origin........define a posição de origem da imagem no box;
background-size..........define as dimensões da imagem no box;
background...............maneira abreviada para declarar todas as propriedades anteriores;&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  O nosso grande mestre &lt;a class=&#34;markup--user markup--p-user&#34; href=&#34;https://medium.com/u/addb7196c9b9&#34;&gt;Maurício Samy Silva&lt;/a&gt; #Maujor explica melhor as aplicações das propriedades &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&#34; rel=&#34;nofollow&#34;&gt;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Agora que conhecemos suas propriedades e características… agora vamos ver como o “background-image” funciona para entendermos nosso horizonte de possibilidades:
&lt;/p&gt;

&lt;h2 id=&#34;background-image-vs-z-index-a-batalha-graf-h4&#34;&gt;Background-image VS Z-index — A BATALHA: {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando trabalhamos 2 ou 3 elementos (sejam &lt;img&gt;, &lt;div&gt;, &lt;etc…&gt;) temos um controle até tolerável, mas… quando utilizamos 6, 10 ou mais elementos numa mesma div ou aninhamento próximo, o z-index começa a se tornar “linguiçento” demais e somos obrigados a utilizar mais classes e ids para organizarmos nosso CSS, pensando nisso que escrevi esse post!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;em&gt;Às vezes não necessariamente queremos ou podemos utilizar o z-index.&lt;/em&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Sem contar que quebramos o conceito de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/oocss-smacss-bem-dry-css-afinal-como-escrever-css/&#34;&gt;DRY&lt;/a&gt; em nosso documento CSS e não queremos isso, não é amiguinhos?
&lt;/p&gt;

&lt;div style=&#34;width: 495px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*xt8qqJopHwF-Gcg9xM6t3w.gif&#34; alt=&#34;Vida de um Front-end&#34; width=&#34;485&#34; height=&#34;364&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Front-end Lifestyle
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;z-index-quando-usar-graf-h4&#34;&gt;Z-index — Quando usar? {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando temos muitos elementos e precisamos especificar propriedades e características CSS que vão além do propósito de uma “imagem de fundo” ou “sobreposição” então o Z-index é a melhor opção!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Mas se você quer simplesmente sobrepor uma imagem de um logo (ou uma composição de camadas que formam um logo) sobre um uma ou mais imagem de preenchimento de fundo o background-image é a melhor solução!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Estes elementos ficam empilhados em camadas uma acima da outra, onde o primeiro fundo dado será desenhado no topo e apenas o último elemento da lista poderá definir uma cor sólida de fundo, ou não, aí fica ao seu critério.
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.minhaClasse {
  background: fundo1, fundo2, ..., fundoN;
}&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/tag/css3/&#34;&gt;CSS3&lt;/a&gt; permite especificar imagens de fundo para múltiplos elementos, usando nada mais do que uma única lista separada por vírgulas.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Você pode fazer isso com a propriedade reduzida &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt; e também com as propriedade individuais, com a exceção de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-color&#34;&gt;background-color&lt;/a&gt;. Isto é, as seguintes propriedades de plano de fundo podem ser especificadas com uma lista, uma por fundo: &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-attachment&#34;&gt;background-attachment&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;A propriedade CSS background-clip especifica se o fundo de um elemento, seja cor ou imagem, se extende debaixo de sua borda.&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-clip&#34;&gt;background-clip&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;background-image&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-origin&#34;&gt;background-origin&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-position&#34;&gt;background-position&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-repeat&#34;&gt;background-repeat&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-size&#34;&gt;background-size&lt;/a&gt;. (rola até gradiente!)
&lt;/p&gt;

&lt;h2 id=&#34;exemplos-graf-h3&#34;&gt;Exemplos {.graf&amp;ndash;h3}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Neste exemplo, três planos de fundos estão empilhados: um texto estilizado, o logo da Tableless.com.br, e uma imagem de fundo ilustrando uma cidade:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;div class=&#34;intro-text&#34;&amp;gt;
    &amp;lt;h1 class=&#34;name-index&#34;&amp;gt;BEM-VINDO À&amp;lt;/br&amp;gt;&amp;lt;span&amp;gt;INTERNET&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;header {
  background: url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&#34; rel=&#34;nofollow&#34;&gt;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&lt;/a&gt;) no-repeat center center, url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&#34; rel=&#34;nofollow&#34;&gt;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&lt;/a&gt;) no-repeat center top;
  height: 100vh;
  width: auto;
  box-sizing: border-box;
}
header .intro-text {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
header .intro-text &amp;gt; h1 {
  text-shadow: 8px 5px 5px #00181c;
  color: #fff;
  text-transform: uppercase;
  text-align: center;
}
header .intro-text .name-index {
  font-size: 7vw;
}
header .intro-text .name-index span {
  font-size: 9.2vw;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/vKddRK/&#34;&gt;Multiple backgrounds backgroud-image&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Suporte do navegador para múltiplas imagens com a propriedade CSS background-image é relativamente difundido na implementação do recurso citado acima:
&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Mozilla Firefox (3.6 ou superior)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Safari / Chrome (1.0 / 1.3 +)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Opera (10.5+)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    até mesmo no Internet Explorer (9.0+)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Bibliografia (Fontes)
&lt;/p&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;background-image&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;The CSS background-image property sets one or several background images for an element. The images are drawn on…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;Multiple backgrounds&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;Com CSS3 , você pode aplicar aos elementos multiplos planos de fundo. Estes ficam em camadas empilhadas uma acima da…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sass vs. LESS vs. Stylus: Batalha dos Pré-processadores</title>
      <link>https://tableless.github.io/hugo-public/sass-vs-less-vs-stylus-batalha-dos-pre-processadores/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/sass-vs-less-vs-stylus-batalha-dos-pre-processadores/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Pré-processadores CSS3 são linguagens criadas com um único propósito de adicionar funcionalidades legais e criativas para o CSS sem quebrar a compatibilidade entre browsers. Os pré-processadores disponibilizam milhares de funcionalidades, e nesse artigo iremos falar sobre as mais utilizadas e conhecidas e algumas nem tanto conhecidas. Vamos começar:&lt;/p&gt;

&lt;h2 id=&#34;sintaxe&#34;&gt;Sintaxe&lt;/h2&gt;

&lt;p&gt;A parte mais importante ao escrever códigos utilizando um pré-processador é entender a sua sintaxe. Felizmente para nós, a sintaxe é (ou pode ser) idêntica à do CSS puro para os três pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-less&#34;&gt;Sass e LESS&lt;/h3&gt;

&lt;p&gt;Ambos utilizam o a sintaxe padrão do CSS. Isso faz com que seja extremamente fácil converter um arquivo CSS já existente para qualquer um deles. Sass utiliza arquivos com extensão .scss e LESS com extensão .less. Uma configuração básica de um arquivo Sass ou LESS pode ser como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.scss ou style.less */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ter notado, isso é apenas CSS puro, que compila perfeitamente em ambos pré-processadores (Sass e LESS).&lt;/p&gt;

&lt;p&gt;É importante notar que Sass também tem uma sintaxe mais antiga, que omite ponto e vírgula e as chaves. Ainda pode ser usado, mas como é uma sintaxe antiga, não iremos utilizá-la depois deste exemplo. A sintaxe utiliza arquivos com a extensão .sass e são da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.sass */
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Observação pessoal:&lt;/strong&gt; Essa sintaxe não é por causa de ser mais antiga e sim pois no início o &lt;strong&gt;Sass&lt;/strong&gt; era parte de um outro pré-processador chamado &lt;strong&gt;Haml&lt;/strong&gt; criado por desenvolvedores &lt;strong&gt;Ruby&lt;/strong&gt;, e por causa disso as folhas de estilo escritas com &lt;strong&gt;Sass&lt;/strong&gt; utilizavam uma sintaxe como a do &lt;strong&gt;Ruby&lt;/strong&gt;, sem chaves, ponto e vírgula e controlado por identação.&lt;/p&gt;

&lt;h3 id=&#34;stylus&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;A sintaxe para o Stylus é muito mais adaptável. Utiliza arquivos com extensão .styl, aceita a sintaxe padrão do CSS, porém também aceita algumas variações onde chaves, dois-pontos e ponto e vírgula são todos opcionais. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.styl */
h1 {
    color: #0982c1;
}
/* omitindo chaves */
h1
    color: #0982c1;

/* omitindo dois-pontos e ponto e vírgula
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;Utilizar diferentes variações em um mesmo arquivo também é válido, então o seguinte código seria compilado sem erros.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1 {
    color #0982c1
}
h2
    font-size: 1.2em
&lt;/pre&gt;

&lt;h2 id=&#34;variáveis&#34;&gt;Variáveis&lt;/h2&gt;

&lt;p&gt;Variáveis podem ser declaradas e usadas através das folhas de estilo. Elas podem ter qualquer valor que seja um valor em CSS (por exemplo: cores, números [unidades também], ou texto), e podem ser referenciadas em qualquer lugar das nossas folhas de estilo.&lt;/p&gt;

&lt;h3 id=&#34;sass&#34;&gt;Sass&lt;/h3&gt;

&lt;p&gt;Variáveis em Sass tem seu nome começado o símbolo &amp;#8220;$&amp;#8221; e o nome e o seu valor são separados com dois-pontos, assim como uma propriedade CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$mainColor: #0982c1;
$siteWidth: 1024px;
$borderStyle: dotted;

body {
    color: $mainColor;
    border: 1px $borderStyle $mainColor;
    max-width: $siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;Varíaves em LESS são praticamente iguais as variáveis no Sass, exceto por começarem seus nomes com o símbolo &amp;#8220;@&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mainColor: #0982c1;
@siteWidth: 1024px;
@borderStyle: dotted;

body {
    color: @mainColor;
    border: 1px @borderStyle @mainColor;
    max-width: @siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-1&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;Variáveis em Stylus não precisam começar com nenhum símbolo, porém ele permite a utilização do símbolo &amp;#8220;$&amp;#8221;. Como sempre, o ponto e vírgula para finalizar não é necessário, mas um sinal de igual entre o nome da variável e seu valor é. Uma coisa importante para se notar é que na versão 0.22.4 do Stylus variáveis com nome começados com o símbolo &amp;#8220;@&amp;#8221; são compiladas, porém não aplicam seu valor quando referenciadas. Em oturas palavras, não faça isso.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;mainColor = #0982c1;
siteWidth = 1024px;
$borderStyle = dotted;

body
    color mainColor
    border 1px $borderStyle mainColor
    max-width siteWidth
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Cada um dos arquivos acima irão compilar no mesmo CSS. Você pode usar sua imaginação para ver quão úteis variáveis podem ser. Não precisaremos mais ao mudar uma cor reescrever a mesma vinte vezes, ou querer mudar a largura de nosso site e ter de procurar por todo o site para fazer isso. Aqui está o CSS depois de compilado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    color: #0982c1;
    border: 1px dotted #0982c1;
    max-width: 1024px.
}
&lt;/pre&gt;

&lt;h2 id=&#34;aninhamento&#34;&gt;Aninhamento&lt;/h2&gt;

&lt;p&gt;Se precisarmos referenciar múltiplos elementos com o mesmo pai em nosso CSS, pode ser entediante ficar digitanto o pai toda vez.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;p&gt;Ao invés disso, usando um pré-processador, podemos escrever os seletores filhos dentro das chaves do elemento pai. O símbolo &amp;#8220;&amp;amp;&amp;#8221; é usado para referenciar o seletor pai.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;p&gt;Todos os três pré-processdores utilizam a mesma sintaxe para aninhar seletores.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;

    nav {
        height: 25px;

        a {
            color: #0982c1;

            &amp;:hover {
                text-decoration: underline;
            }
        }
    }
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-1&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Abaixo está o CSS compilado do código escrito acima. Está exatamente igual ao mostrado no começo &amp;#8211; que conveniente!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;h2 id=&#34;mixins&#34;&gt;Mixins&lt;/h2&gt;

&lt;p&gt;Mixins são funções que permitem reusar propriedades através de nossas folhas de estilo. Ao invés de procurar por todas nossas folhas de estilo e mudar uma propriedade várias vezes, podemos apenas mudar dentro de nosso mixin. Isso pode ser realmente útil para estilização de elementos específicos e para &amp;#8220;vendor prefixes&amp;#8221; (moz-*, o-*, etc). Quando os mixins são chamados de dentro de um seletor CSS, os argumentos são reconhecidos e os estilos dentro do mixin são aplicados ao seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-1&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Sass chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
@mixin error($borderWidth: 2px) {
    border: $borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    @include error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    @include error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-1&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em LESS chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
.error(@borderWidth: 2px) {
    border: @borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    .error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    .error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-2&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Stylus chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
error(borderWidth = 2px) {
    border: borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-2&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Todos pré-processadores irão compilar o mesmo código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.generic-error {
    padding: 20px;
    margin: 4px;
    border: 2px solid #f00;
    color: #f00;
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    border: 5px solid #f00;
    color: #f00;
}
&lt;/pre&gt;

&lt;h2 id=&#34;herança&#34;&gt;Herança&lt;/h2&gt;

&lt;p&gt;Quando estamos escrevendo CSS da velha maneira, nós usaríamos o seguinte código para aplicar o mesmo estilo para múltiplos elementos de uma só vez:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p,
u,
ol {
    /* estilos aqui */
}
&lt;/pre&gt;

&lt;p&gt;Isso funciona perfeitamente, mas se depois precisássemos de estilizar os elementos individualmente, outro seletor deveria ser criado para cada um e rapidamente poderia ficar cada vez mais bagunçado e difícil de manter. Podemos utilizar herança para resolver isso. Herança é a habilidade de outros seletores CSS herdarem as propriedades de outro seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-stylus&#34;&gt;Sass e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}

p {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-sass-e-stylus&#34;&gt;CSS Compilado (Sass e Stylus)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block, p, ul, ol {
    margin: 10px 5px;
    padding: 2px;
}
p {
    border: 1px solid #eee;
}
ul, ol {
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-2&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;LESS não tem suporte a herança de estilos como Sass e Stylus. Ao invés de adicionar diversos seletores para um grupo de propriedades, ele trata herança como um mixin sem argumentos e importa os estilos para dentro de seus próprios seletores. O problema disso é que propriedades são repetidas em sua folha de estilo compilada. Abaixo segue como deve-se utilizar:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
 
p {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Observação pessoal:&lt;/strong&gt; Como mencionado nos comentários, o LESS tem suporte a herança e pode ser feita com a seguinte sintaxe:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p {
        &amp;:extend(.block);
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-less&#34;&gt;CSS Compilado (LESS)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
p {
    margin: 10px 5px;
    padding: 2px;
    border: 1px solid #eee;
}
ul,
ol {
    margin: 10px 5px;
    padding: 2px;
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ver, os estilos do seletor .block foram inseridas nos seletores que queríamos aplicar a herança. É importante notar que a prioridade das propriedades pode se tornar um problema, então devemos ter bastante cautela.&lt;/p&gt;

&lt;h2 id=&#34;importação&#34;&gt;Importação&lt;/h2&gt;

&lt;p&gt;Na comunidade CSs, importar CSS é visto com maus olhos por utilizar diversas chamadas HTTP. Importar com um pré-processador funciona de forma diferente no entanto. Se você importar um arquivo com qualquer um dos três pré-processadores, ele irá literalmente pegar todo o conteúdo do arquivo durante a importação e gerar apenas um arquivo. Lembre-se que arquivos .css comuns importados compilam com o código:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;file.css&#34;;
&lt;/pre&gt;

&lt;p&gt;Lembre-se também que mixins e variáveis podem ser importadas e usadas em sua folha de estilo principal. Importação faz com que possamos criar arquivos separados para uma melhor organização.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-1&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* arquivo.{extensao} */
body {
    background: #eee;
}
&lt;/pre&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;reset.css&#34;;
@import &#34;arquivo.{extensao}&#34;;
 
p {
    background: #0982c1;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-3&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;h2 id=&#34;introdução-1&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;-&amp;gt;Pré-processadores produzem CSS que funciona em todos os browsers&lt;/p&gt;

&lt;p&gt;Pré-processadores CSS3 são linguagens criadas com um único propósito de adicionar funcionalidades legais e criativas para o CSS sem quebrar a compatibilidade entre browsers. Eles fazem isso compilando o código que escrevemos em CSS puro que pode ser usado em qualquer browser de agora até a era das pedras. Os pré-processadores disponibilizam milhares de funcionalidades, e nesse artigo iremos falar sobre as mais utilizadas e conhecidas e algumas nem tanto conhecidas. Vamos começar&lt;/p&gt;

&lt;h2 id=&#34;sintaxe-1&#34;&gt;Sintaxe&lt;/h2&gt;

&lt;p&gt;A parte mais importante ao escrever códigos utilizando um pré-processador CSS é entender a sua sintaxe. Felizmente para nós, a sintaxe é (ou pode ser) idêntica à do CSS puro para os três pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-less-1&#34;&gt;Sass e LESS&lt;/h3&gt;

&lt;p&gt;Ambos utilizam o a sintaxe padrão do CSS. Isso faz com que seja extremamente fácil converter um arquivo CSS já existente para qualquer um deles. Sass utiliza arquivos com extensão .scss e LESS com extensão .less. Uma configuração básica de um arquivo Sass ou LESS pode ser como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.scss ou style.less */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ter notado, isso é apenas CSS puro, que compila perfeitamente em ambos pré-processadores (Sass e LESS).&lt;/p&gt;

&lt;p&gt;É importante notar que Sass também tem uma sintaxe mais antiga, que omite ponto e vírgula e as chaves. Ainda pode ser usado, mas como é uma sintaxe antiga, não iremos utilizá-la depois deste exemplo. A sintaxe utiliza arquivos com a extensão .sass e são da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.sass */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-3&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;A sintaxe para o Stylus é muito mais adaptável. Utiliza arquivos com extensão .styl, aceita a sintaxe padrão do CSS, porém também aceita algumas variações onde chaves, dois-pontos e ponto e vírgula são todos opcionais. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.styl */
h1 {
    color: #0982c1;
}
/* omitindo chaves */
h1
    color: #0982c1;

/* omitindo dois-pontos e ponto e vírgula
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;Utilizar diferentes variações em um mesmo arquivo também é válido, então o seguinte código seria compilado sem erros.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1 {
    color #0982c1
}
h2
    font-size: 1.2em
&lt;/pre&gt;

&lt;h2 id=&#34;variáveis-1&#34;&gt;Variáveis&lt;/h2&gt;

&lt;p&gt;Variáveis podem ser declaradas e usadas através das folhas de estilo. Elas podem ter qualquer valor que seja um valor em CSS (por exemplo: cores, números [unidades também], ou texto), e podem ser referenciadas em qualquer lugar das nossas folhas de estilo.&lt;/p&gt;

&lt;h3 id=&#34;sass-2&#34;&gt;Sass&lt;/h3&gt;

&lt;p&gt;Variáveis em Sass tem seu nome começado o símbolo &amp;#8220;$&amp;#8221; e o nome e o seu valor são separados com dois-pontos, assim como uma propriedade CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$mainColor: #0982c1;
$siteWidth: 1024px;
$borderStyle: dotted;

body {
    color: $mainColor;
    border: 1px $borderStyle $mainColor;
    max-width: $siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-3&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;Varíaves em LESS são praticamente iguais as variáveis no Sass, exceto por começarem seus nomes com o símbolo &amp;#8220;@&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mainColor: #0982c1;
@siteWidth: 1024px;
@borderStyle: dotted;

body {
    color: @mainColor;
    border: 1px @borderStyle @mainColor;
    max-width: @siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-4&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;Variáveis em Stylus não precisam começar com nenhum símbolo, porém ele permite a utilização do símbolo &amp;#8220;$&amp;#8221;. Como sempre, o ponto e vírgula para finalizar não é necessário, mas um sinal de igual entre o nome da variável e seu valor é. Uma coisa importante para se notar é que na versão 0.22.4 do Stylus variáveis com nome começados com o símbolo &amp;#8220;@&amp;#8221; são compiladas, porém não aplicam seu valor quando referenciadas. Em oturas palavras, não faça isso.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;mainColor = #0982c1;
siteWidth = 1024px;
$borderStyle = dotted;

body
    color mainColor
    border 1px $borderStyle mainColor
    max-width siteWidth
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-4&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Cada um dos arquivos acima irão compilar no mesmo CSS. Você pode usar sua imaginação para ver quão úteis variáveis podem ser. Não precisaremos mais ao mudar uma cor reescrever a mesma vinte vezes, ou querer mudar a largura de nosso site e ter de procurar por todo o site para fazer isso. Aqui está o CSS depois de compilado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    color: #0982c1;
    border: 1px dotted #0982c1;
    max-width: 1024px.
}
&lt;/pre&gt;

&lt;h2 id=&#34;aninhamento-1&#34;&gt;Aninhamento&lt;/h2&gt;

&lt;p&gt;Se precisarmos referenciar múltiplos elementos com o mesmo pai em nosso CSS, pode ser entediante ficar digitanto o pai toda vez.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;p&gt;Ao invés disso, usando um pré-processador, podemos escrever os seletores filhos dentro das chaves do elemento pai. O símbolo &amp;#8220;&amp;amp;&amp;#8221; é usado para referenciar o seletor pai.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-2&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;p&gt;Todos os três pré-processdores utilizam a mesma sintaxe para aninhar seletores.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;

    nav {
        height: 25px;

        a {
            color: #0982c1;

            &amp;:hover {
                text-decoration: underline;
            }
        }
    }
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-5&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Abaixo está o CSS compilado do código escrito acima. Está exatamente igual ao mostrado no começo &amp;#8211; que conveniente!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;h2 id=&#34;mixins-1&#34;&gt;Mixins&lt;/h2&gt;

&lt;p&gt;Mixins são funções que permitem reusar propriedades através de nossas folhas de estilo. Ao invés de procurar por todas nossas folhas de estilo e mudar uma propriedade várias vezes, podemos apenas mudar dentro de nosso mixin. Isso pode ser realmente útil para estilização de elementos específicos e para &amp;#8220;vendor prefixes&amp;#8221; (moz-*, o-*, etc). Quando os mixins são chamados de dentro de um seletor CSS, os argumentos são reconhecidos e os estilos dentro do mixin são aplicados ao seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-3&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Sass chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
@mixin error($borderWidth: 2px) {
    border: $borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    @include error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    @include error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-4&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em LESS chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
.error(@borderWidth: 2px) {
    border: @borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    .error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    .error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-5&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Stylus chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
error(borderWidth = 2px) {
    border: borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-6&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Todos pré-processadores irão compilar o mesmo código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.generic-error {
    padding: 20px;
    margin: 4px;
    border: 2px solid #f00;
    color: #f00;
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    border: 5px solid #f00;
    color: #f00;
}
&lt;/pre&gt;

&lt;h2 id=&#34;herança-1&#34;&gt;Herança&lt;/h2&gt;

&lt;p&gt;Quando estamos escrevendo CSS da velha maneira, nós usaríamos o seguinte código para aplicar o mesmo estilo para múltiplos elementos de uma só vez:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p,
u,
ol {
    /* estilos aqui */
}
&lt;/pre&gt;

&lt;p&gt;Isso funciona perfeitamente, mas se depois precisássemos de estilizar os elementos individualmente, outro seletor deveria ser criado para cada um e rapidamente poderia ficar cada vez mais bagunçado e difícil de manter. Podemos utilizar herança para resolver isso. Herança é a habilidade de outros seletores CSS herdarem as propriedades de outro seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-stylus-1&#34;&gt;Sass e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}

p {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-sass-e-stylus-1&#34;&gt;CSS Compilado (Sass e Stylus)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block, p, ul, ol {
    margin: 10px 5px;
    padding: 2px;
}
p {
    border: 1px solid #eee;
}
ul, ol {
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-5&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;LESS não tem suporte a herança de estilos como Sass e Stylus. Ao invés de adicionar diversos seletores para um grupo de propriedades, ele trata herança como um mixin sem argumentos e importa os estilos para dentro de seus próprios seletores. O problema disso é que propriedades são repetidas em sua folha de estilo compilada. Abaixo segue como deve-se utilizar:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
 
p {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-less-1&#34;&gt;CSS Compilado (LESS)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
p {
    margin: 10px 5px;
    padding: 2px;
    border: 1px solid #eee;
}
ul,
ol {
    margin: 10px 5px;
    padding: 2px;
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ver, os estilos do seletor .block foram inseridas nos seletores que queríamos aplicar a herança. É importante notar que a prioridade das propriedades pode se tornar um problema, então devemos ter bastante cautela.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;reset.css&#34;;
body {
    background: #eee;
}
p {
    background: #0982c1;
}
&lt;/pre&gt;

&lt;h2 id=&#34;funções-de-cores&#34;&gt;Funções de Cores&lt;/h2&gt;

&lt;p&gt;Funções de cores são funções nativas que transformam uma cor por compilação. Podem ser extremamente úteis para criar gradientes, escurecer cores no &amp;#8220;hover&amp;#8221; de elementos e muito mais.&lt;/p&gt;

&lt;h3 id=&#34;sass-4&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten($color, 10%); /* retorna uma cor 10% mais clara que $color */
darken($color, 10%);  /* retorna uma cor 10% mais escura $color */
 
saturate($color, 10%);   /* retorna uma cor 10% mais saturada que $color */
desaturate($color, 10%); /* retorna uma cor 10% menos saturada que $color */
 
grayscale($color);  /* retorna $color na escala de cinza */
complement($color); /* retorna cor complementar de $color */
invert($color);     /* retorna cor inversa de $color */
 
mix($color1, $color2, 50%); /* mistura $color1 com $color2 com um peso de 50% */
&lt;/pre&gt;

&lt;p&gt;Essas é apenas uma pequena lista de funções de cores disponíveis no Sass. A lista completa das funções de cores disponíveis no Sass pode ser encontrada na &lt;a href=&#34;http://sass-lang.com/documentation/Sass/Script/Functions.html&#34; target=&#34;_blank&#34;&gt;documentação do Sass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Funções de cores podem ser usadas em qualquer lugar que uma cor é válida no CSS. Veja um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$color: #0982C1;
 
h1 {
    background: $color;
    border: 3px solid darken($color, 50%);
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-6&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten(@color, 10%); /* retorna uma cor 10% mais clara que @color */
darken(@color, 10%);  /* retorna uma cor 10% mais escura @color */
 
saturate(@color, 10%);   /* retorna uma cor 10% mais saturada que @color */
desaturate(@color, 10%); /* retorna uma cor 10% menos saturada que @color */
 
spin(@color, 10); /* retorna uma cor 10 graus acima na matiz/tonalidade que @color */
spin(@color, -10); /* retorna uma cor 10 graus abaixo na matiz/tonalidade que @color */
 
mix(@color1, @color2); /* mistura @color1 com @color2 */
&lt;/pre&gt;

&lt;p&gt;A lista de todas as funções disponíveis no LESS pode encontrada na &lt;a href=&#34;http://lesscss.org/#-color-functions&#34; target=&#34;_blank&#34;&gt;documentação LESS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veja um exemplo de como usar uma função de cores no LESS:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@color: #0982C1;
 
h1 {
    background: @color;
    border: 3px solid darken(@color, 50%);
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-6&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten(color, 10%); /* retorna uma cor 10% mais clara que &#39;color&#39; */
darken(color, 10%);  /* retorna uma cor 10% mais escura &#39;color&#39; */
 
saturate(color, 10%);   /* retorna uma cor 10% mais saturada que &#39;color&#39; */
desaturate(color, 10%); /* retorna uma cor 10% menos saturada que &#39;color&#39; */
&lt;/pre&gt;

&lt;p&gt;A lista completa de todas funções de cores disponíveis no Stylus pode ser encontrada na &lt;a href=&#34;http://stylus-lang.com/docs/bifs.html&#34; target=&#34;_blank&#34;&gt;documentação Stylus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veja um exemplo de como usar uma função de cores no Stylus:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;color = #0982C1
 
h1
    background color
    border 3px solid darken(color, 50%)
&lt;/pre&gt;

&lt;h2 id=&#34;operações&#34;&gt;Operações&lt;/h2&gt;

&lt;p&gt;Fazer cálculos no CSS é bastante útil e agora totalmente possível. É bem simples e é dessa maneira que fazemos:&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-3&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    margin: (14px/2);
    top: 50px + 100px;
    right: 100px - 50px;
    left: 10 * 10;
}
&lt;/pre&gt;

&lt;h2 id=&#34;aplicações-práticas&#34;&gt;Aplicações Práticas&lt;/h2&gt;

&lt;p&gt;Nós falamos de diversas funcionalidades e novas coisas que pré-processadores podem fazer, mas não mostramos nada na prática ainda. Veja uma pequena lista de aplicações no mundo real em que um pré-processador é um salva-vidas.&lt;/p&gt;

&lt;h3 id=&#34;vendor-prefixes&#34;&gt;Vendor Prefixes&lt;/h3&gt;

&lt;p&gt;Essa é uma das principais razões para se usar um pré-processador e por um motivo bom &amp;#8211; economia gigante de tempo e lágrimas. Criar um mixin para cuidar dos vendor prefixes é fácil e nos salva de uma codificação repetitiva e dolorosa. Veja como fazer:&lt;/p&gt;

&lt;h4 id=&#34;sass-5&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mixin border-radius($values) {
    -webkit-border-radius: $values;
        -moz-border-radius: $values;
            border-radius: $values;
}
 
div {
    @include border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-7&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.border-radius(@values) {
    -webkit-border-radius: @values;
        -moz-border-radius: @values;
            border-radius: @values;
}
 
div {
    .border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-7&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;border-radius(values) {
    -webkit-border-radius: values;
        -moz-border-radius: values;
            border-radius: values;
}
 
div {
    border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;css-compilado-7&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
    -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
            border-radius: 10px;
}
&lt;/pre&gt;

&lt;h3 id=&#34;texto-3d&#34;&gt;Texto 3D&lt;/h3&gt;

&lt;p&gt;Simular um texto 3D utilizando diversos text-shadows é uma grande ideia. O único problema é que mudar a cor depois de criar é difícil e incômodo. Usando mixins e funções de cores, podemos criar um texto 3D e mudar sua cor sem nenhuma dificuldade.&lt;/p&gt;

&lt;h4 id=&#34;sass-6&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mixin text3d($color) {
    color: $color;
    text-shadow: 1px 1px 0px darken($color, 5%),
            2px 2px 0px darken($color, 10%),
            3px 3px 0px darken($color, 15%),
            4px 4px 0px darken($color, 20%),
            4px 4px 2px #000;
}
 
h1 {
    font-size: 32pt;
    @include text3d(#0982c1);
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-8&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.text3d(@color) {
    color: @color;
    text-shadow: 1px 1px 0px darken(@color, 5%),
            2px 2px 0px darken(@color, 10%),
            3px 3px 0px darken(@color, 15%),
            4px 4px 0px darken(@color, 20%),
            4px 4px 2px #000;
}
 
span {
    font-size: 32pt;
    .text3d(#0982c1);
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-8&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;text3d(color)
    color: color
    text-shadow: 1px 1px 0px darken(color, 5%), 2px 2px 0px darken(color, 10%), 3px 3px 0px darken(color, 15%), 4px 4px 0px darken(color, 20%), 4px 4px 2px #000
span
    font-size: 32pt
    text3d(#0982c1)
&lt;/pre&gt;

&lt;p&gt;Escolhi escrever os &amp;#8220;text-shadows&amp;#8221; do Stylus em apenas uma linha pois omiti as chaves.&lt;/p&gt;

&lt;h4 id=&#34;css-compilado-8&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;span {
    font-size: 32pt;
    color: #0982c1;
    text-shadow: 1px 1px 0px #097bb7, 
            2px 2px 0px #0875ae, 
            3px 3px 0px #086fa4, 
            4px 4px 0px #07689a, 
            4px 4px 2px #000;
}
&lt;/pre&gt;

&lt;h4 id=&#34;resultado-final&#34;&gt;Resultado Final&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn.tutsplus.com/net/uploads/legacy/1144_preprocshootout/text3d.png&#34; alt=&#34;Texto 3D&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;colunas&#34;&gt;Colunas&lt;/h3&gt;

&lt;p&gt;Usar operações numéricas e variáveis para colunas é uma ideia que tive da primeira vez que estava brincando com pré-processadores CSS. Declarando a largura desejada em uma variável, podemos facilmente alterá-la sem precisar de nenhum cálculo mental. Veja como fazer:&lt;/p&gt;

&lt;h4 id=&#34;sass-7&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$siteWidth: 1024px;
$gutterWidth: 20px;
$sidebarWidth: 300px;
 
body {
    margin: 0 auto;
    width: $siteWidth;
}
.content {
    float: left;
    width: $siteWidth - ($sidebarWidth+$gutterWidth);
}
.sidebar {
    float: left;
    margin-left: $gutterWidth;
    width: $sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-9&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@siteWidth: 1024px;
@gutterWidth: 20px;
@sidebarWidth: 300px;
 
body {
    margin: 0 auto;
    width: @siteWidth;
}
.content {
    float: left;
    width: @siteWidth - (@sidebarWidth+@gutterWidth);
}
.sidebar {
    float: left;
    margin-left: @gutterWidth;
    width: @sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-9&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;siteWidth = 1024px;
gutterWidth = 20px;
sidebarWidth = 300px;
 
body {
    margin: 0 auto;
    width: siteWidth;
}
.content {
    float: left;
    width: siteWidth - (sidebarWidth+gutterWidth);
}
.sidebar {
    float: left;
    margin-left: gutterWidth;
    width: sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;css-compilado-9&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    margin: 0 auto;
    width: 1024px;
}
.content {
    float: left;
    width: 704px;
}
.sidebar {
    float: left;
    margin-left: 20px;
    width: 300px;
}
&lt;/pre&gt;

&lt;h2 id=&#34;peculiaridades-notáveis&#34;&gt;Peculiaridades Notáveis&lt;/h2&gt;

&lt;p&gt;Existem algumas peculiaridades ao usar um pré-processador CSS. Irei falar de algumas engraçadas, mas se você está realmente interessado em encontrar todas elas eu recomendo você vasculhar toda a documentação, ou melhor, começar a usar um pré-processador na sua codificação diária.&lt;/p&gt;

&lt;h3 id=&#34;relatório-de-erros&#34;&gt;Relatório de Erros&lt;/h3&gt;

&lt;p&gt;Se você já escreveu CSS por uma boa quantia de tempo, tenho certeza que você já chegou a um ponto onde você tinha um erro em algum lugar e simplesmente não conseguia o encontrar. Se você é como eu, provavelmente passou a tarde toda arrancando os cabelos fora e comentando diversas coisas para caçar o erro.&lt;/p&gt;

&lt;p&gt;Pré-processadores CSS relatam os erros. Simples assim. Se tem alguma coisa errada em seu códigom ele te fala onde e, se você estiver com sorte até mesmo o porquê. Você pode dar uma olhada &lt;a href=&#34;http://tjholowaychuk.com/post/5002088731/stylus-vs-sass-vs-less-error-reporting&#34; target=&#34;_blank&#34;&gt;nesse post&lt;/a&gt; caso esteja interessado em ver como os erros são relatados em diferentes pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;comentários&#34;&gt;Comentários&lt;/h3&gt;

&lt;p&gt;Quando um pré-processador CSS está compilando, qualquer comentário escrito com barras duplas &amp;#8220;//&amp;#8221; é excluído e qualquer comentários escrito com barra e asterisco &amp;#8220;/* */&amp;#8221; não é alterado. Dito isso, use comentários com barras duplas para comentários que você queira na versão não compilada e comentários com barra e asterisco para comentários que serão visíveis após a compilação.&lt;/p&gt;

&lt;p&gt;Observação: Se você compilar os arquivos, minificando-os, todos comentários são excluídos.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Cada um dos pré-processadores que falamos (Sass, LESS e Stylus) possui um modo único de realizar a mesma tarefa &amp;#8211; dando a nós desenvolvedor a habilidade de usar funcionalidades úteis mantendo a compatibilidade entre browsers e um código limpo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mesmo não sendo uma exigência para o desenvolvimento, pré-processadores podem economizar muito tempo e tem funcionalidades bastante úteis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eu aconselho todos vocês a utilizar e testar a maior quantidade de pré-processadores possível, pois assim você poderá escolher efetivamente um favorito e saber o porquê ele é seu favorito dentre tantos outros. Se você ainda não testou usar nenhum pré-processador para escrever seu CSS, eu recomendo grandemente a você testar.&lt;/p&gt;

&lt;p&gt;Você tem alguma funcionalidade de seu pré-processador favorito que não foi mencionada? Há algo que algum pré-processador possa fazer e outros não? Conte-nos nos comentários abaixo!&lt;/p&gt;

&lt;p&gt;Traduzido e adaptado de: &lt;a href=&#34;http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout--net-24320&#34;&gt;http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout&amp;#8211;net-24320&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Experimentando flexbox hoje: topo alinhado sem muito esforço</title>
      <link>https://tableless.github.io/hugo-public/experimentando-flexbox-hoje-topo-alinhado-sem-muito-esforco/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/experimentando-flexbox-hoje-topo-alinhado-sem-muito-esforco/</guid>
      <description>

&lt;p&gt;Como muitos desenvolvedores web, gosto de experimentar &lt;em&gt;features&lt;/em&gt; novas ocasionalmente. Uma das coisas que costumava fazer em todo projeto é deixar o menu alinhado horizontalmente à logo, como no exemplo abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/11/print.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-52030 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/11/print.png&#34; alt=&#34;Exemplo de topo com logo e links&#34; width=&#34;1175&#34; height=&#34;78&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Só que nunca foi tão fácil assim: para deixar eles alinhados verticalmente, precisamos adicionar &lt;code&gt;margin&lt;/code&gt; ou &lt;code&gt;padding&lt;/code&gt; à logo ou ao menu. E com a popularização do site responsivo, os tamanhos dessas propriedades não eram os únicos problemas: tanto a logo quanto o espaçamento entre os links poderiam diminuir ou aumentar conforme o tamanho da tela e daria um grande trabalho (criar vários &lt;em&gt;media queries&lt;/em&gt; com vários ajustes em cada resolução) para conseguirmos alinhar em todos os dispositivos.&lt;/p&gt;

&lt;p&gt;É aí que entra o &lt;strong&gt;&lt;em&gt;flexbox&lt;/em&gt;&lt;/strong&gt;. Se você usa &lt;a href=&#34;http://getbootstrap.com/&#34; target=&#34;_blank&#34;&gt;Bootstrap&lt;/a&gt;, sua sintaxe do topo deve ser similar à esta:&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/alanmarcos/pen/xwmWOV/&#34; target=&#34;_blank&#34;&gt;xwmWOV&lt;/a&gt; by Alan Marcos (&lt;a href=&#34;http://codepen.io/alanmarcos&#34; target=&#34;_blank&#34;&gt;@alanmarcos&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34; target=&#34;_blank&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;solução&#34;&gt;Solução&lt;/h3&gt;

&lt;p&gt;Costumo criar uma classe para esse tipo de alinhamento:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row-centered {
   display: flex;
   align-items: center;
}
&lt;/pre&gt;

&lt;p&gt;E com só duas linhas de código, temos um topo alinhado horizontalmente sem muito esforço!&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/alanmarcos/pen/epbMgY/&#34; target=&#34;_blank&#34;&gt;epbMgY&lt;/a&gt; by Alan Marcos (&lt;a href=&#34;http://codepen.io/alanmarcos&#34; target=&#34;_blank&#34;&gt;@alanmarcos&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34; target=&#34;_blank&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;compatibilidade&#34;&gt;Compatibilidade&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&#34;http://caniuse.com/flexbox&#34; target=&#34;_blank&#34;&gt;compatibilidade do flexbox&lt;/a&gt; hoje já é bem alta, ou seja, você também pode usar nos seus projetos, lembrando que você pode utilizar o &lt;a href=&#34;https://modernizr.com/&#34; target=&#34;_blank&#34;&gt;Modernizr&lt;/a&gt; para detectar essa &lt;em&gt;feature&lt;/em&gt; e usar um &lt;em&gt;fallback&lt;/em&gt; quando necessário.&lt;/p&gt;

&lt;h3 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h3&gt;

&lt;p&gt;Pode parecer um problema pequeno, mas estas duas linhas acabaram resolvendo muitos problemas nos meus projetos mais recentes. Como o &lt;em&gt;flexbox&lt;/em&gt; ainda não é uma _feature_ &amp;#8220;100% &lt;em&gt;bulletproof&amp;#8221;&lt;/em&gt;, recomendo usar em pequenos ajustes como o deste post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como usar variáveis no CSS de forma nativa</title>
      <link>https://tableless.github.io/hugo-public/como-usar-variaveis-no-css-de-forma-nativa/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/como-usar-variaveis-no-css-de-forma-nativa/</guid>
      <description>

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Olá pessoal, neste artigo irei abordar o básico sobre variáveis nativas com CSS, e como você pode usar essa tecnologia hoje e sem medo de ser feliz.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-a-href-http-www-w3-org-tr-css-variables-target-blank-css-custom-properties-for-cascading-variables-module-level-1-a-span-p4&#34;&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;&lt;a href=&#34;http://www.w3.org/TR/css-variables/&#34; target=&#34;_blank&#34;&gt;CSS Custom Properties for Cascading Variables Module Level 1&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt; {.p4}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Esta especificação ainda em fase de &lt;em&gt;Last Call Working Draft&lt;/em&gt;, traz um novo módulo de CSS3 que permite a criação de varáveis de forma nativa, de uma forma simples e rápida como veremos a seguir.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-como-declarar-uma-variável-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Como declarar uma variável?&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Para declarar uma variável utilizamos as chamadas &lt;em&gt;Custom Properties&lt;/em&gt;, uma nova forma de declarar uma propriedade utilizando a seguinte sintaxe:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.exemplo {
  --destaque: #660066;
}
&lt;/pre&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Por definição uma &lt;em&gt;Custom Property&lt;/em&gt; é qualquer propriedade que inicie com dois hífens, como ‘—foo’. &lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-como-utilizar-uma-variável-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Como utilizar uma variável?&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Para utilizar uma variável utilizamos a função var(), passando a variável criada como parâmetro,  assim ela irá retornar o valor da variável, veja o exemplo a seguir:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.exemplo {
  --destaque: #660066;
  background-color: var(--destaque);
}
&lt;/pre&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;O que equivale diretamente a:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.exemplo {
  background-color: #660066;
}
&lt;/pre&gt;

&lt;h2 id=&#34;span-class-s1-a-notícia-ruim-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;A notícia ruim 🙁&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;As variáveis tem um escopo a ser seguido, logo uma variável não pode ser usada fora de seu escopo.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Exemplos de utilização correta do escopo:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.menu {
  --tamanho: 20px;
}
.menu ul li {
  padding: var(--tamanho); // retorna 20px
}
&lt;/pre&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Exemplo de utilização incorreta do escopo:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.menu {
  --tamanho: 20px;
}
.footer {
  padding: var(--tamanho); // não retorna nada
}
&lt;/pre&gt;

&lt;h2 id=&#34;span-class-s1-a-notícia-boa-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;A notícia boa 🙂&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Podemos declarar variáveis em um tipo de &amp;#8220;escopo global”, que nada mais é do que a raiz do documento,&lt;span class=&#34;Apple-converted-space&#34;&gt;  &lt;/span&gt;para isso utilizamos o seletor :root.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Exemplo de variáveis declaradas na raiz do documento.&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;:root {
  --tamanho: 50%;
  --cor: #660066;
}

.exemplo-1 {
  margin: var(--tamanho); // retorna 50%
}

.exemplo-2 {
  color: var(--cor); // retorna #660066
}
&lt;/pre&gt;

&lt;h2 id=&#34;span-class-s1-até-aqui-legal-mas-e-o-suporte-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Até aqui legal, mas e o suporte?&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Nem tudo são flores amigos, até o momento o suporte é apenas para Firefox. Vejam a tabela completa no &lt;a href=&#34;http://caniuse.com/#feat=css-variables&#34; target=&#34;_blank&#34;&gt;Can i use&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-como-usar-hoje-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Como usar hoje!&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Não teria graça se eu trouxesse aqui uma coisa tão divertida e ninguém pudesse usar, e com um suporte tão ruim, só nos resta apelar para o&lt;span class=&#34;Apple-converted-space&#34;&gt; &lt;/span&gt;maravilhoso &lt;a href=&#34;https://github.com/MadLittleMods/postcss-css-variables&#34; target=&#34;_blank&#34;&gt;postcss-css-variables&lt;/a&gt;, que é um plugin para &lt;a href=&#34;https://github.com/postcss/postcss&#34; target=&#34;_blank&#34;&gt;Post CSS&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h3 id=&#34;span-class-s1-mas-o-que-é-mesmo-esse-post-css-span-p3&#34;&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;Mas o que é mesmo esse Post CSS?&lt;/span&gt;&lt;/strong&gt; {.p3}&lt;/h3&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Esse cara é um pós-processador de CSS que possuí vários &lt;a href=&#34;https://github.com/postcss/postcss#plugins&#34; target=&#34;_blank&#34;&gt;plugins&lt;/a&gt;, sendo o mais famoso o &lt;a href=&#34;https://github.com/postcss/autoprefixer&#34; target=&#34;_blank&#34;&gt;Autoprefixer&lt;/a&gt;, quer por sua vez pega seu código e aplica os &lt;em&gt;vendors prefixes&lt;/em&gt; conforme a necessidade, e é exatamente isso que o postcss-css-variables faz, ele pega suas variáveis e as poem em seu devido lugar, compilando seu &amp;#8220;CSS do futuro&amp;#8221;, para um CSS nativo e suportado por todos.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Você pode ver exatamente como o plugin funciona no &lt;a href=&#34;https://madlittlemods.github.io/postcss-css-variables/playground/&#34; target=&#34;_blank&#34;&gt;postcss-css-variables Playground&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h3 id=&#34;span-class-s1-quais-as-vantagens-de-utilizar-o-postcss-css-variables-span-p3&#34;&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;Quais as vantagens de utilizar o postcss-css-variables?&lt;/span&gt;&lt;/strong&gt; {.p3}&lt;/h3&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;1 &amp;#8211; Você vai &lt;strong&gt;escrever o CSS de forma nativa&lt;/strong&gt;, e usar o pós-processador como um tipo de &amp;#8220;polyfill&amp;#8221;, que no futuro,  caso outros navegares além do firefox adotem a especificação, pode ser retirado e seu código já estará pronto, mais ou menos como ocorre com o JavaScript e o &lt;a href=&#34;https://babeljs.io/&#34; target=&#34;_blank&#34;&gt;Babel&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;2 &amp;#8211; Usar uma coisa nova em seu &lt;em&gt;workflow&lt;/em&gt;. Isso faz bem, principalmente quando abre um leque de novas possibilidades como aprender outras várias funções incríveis que o Post CSS trás.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-conclusão-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Conclusão&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Caso alguém me pergunte se &lt;strong&gt;v&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;ale a pena mudar o &lt;em&gt;workflow&lt;/em&gt; apenas para escrever variáveis de forma nativa?&lt;/span&gt;&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Talvez a resposta seja &lt;strong&gt;não&lt;/strong&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Agora, se alguém perguntasse se &lt;strong&gt;v&lt;/strong&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&lt;strong&gt;ale a pena brincar com uma coisa nova&lt;/strong&gt;, que no fim das contas vai me &lt;strong&gt;ensinar sobre pós-processadores&lt;/strong&gt;, me apresentar uma especificação que pode &lt;strong&gt;virar padrão no futuro&lt;/strong&gt; e me fazer &lt;strong&gt;refletir sobre formas diferentes de fazer a mesma coisa?&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Nesse caso a resposta é um imenso &lt;strong&gt;SIM&lt;/strong&gt;.&lt;/span&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nth-child() e calc() – Uma proposta para o abandono de frameworks de grids responsivos</title>
      <link>https://tableless.github.io/hugo-public/nth-child-calc-responsivos/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/nth-child-calc-responsivos/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Apesar da adoção do _Tableless _para construção de layouts o conceito de tabela ainda persiste através de inúmeros &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Além da semântica, o conceito &lt;em&gt;Tableless&lt;/em&gt; prega, sempre que possível, levar a responsabilidade do layout para o CSS. O problema dos &lt;em&gt;frameworks&lt;/em&gt; CSS focados em &lt;em&gt;grids&lt;/em&gt; é que a especificação do layout continua dentro do HTML, descrita através de classes CSS, ancoradas diretamente aos elementos HTML, e de forma intrusiva, ou seja, os elementos &lt;em&gt;&lt;table&gt;&lt;/em&gt; antigamente utilizados foram substituídos por elementos &lt;em&gt;&lt;div class=&amp;#8221;col-&amp;#8220;&gt;&lt;/em&gt; para a criação do layout.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-49871 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/gridLayout.png&#34; alt=&#34;Exemplo de Grid Layout&#34; width=&#34;521&#34; height=&#34;354&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enquanto a especificação &amp;#8220;&lt;a href=&#34;http://www.w3.org/TR/css3-grid-layout/&#34; target=&#34;_blank&#34;&gt;CSS Grid Layout Module&lt;/a&gt;&amp;#8221; ainda está no forno, proponho uma alternativa simples aos &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos, através da dupla dinâmica &lt;em&gt;&lt;strong&gt;nth-child()&lt;/strong&gt;&lt;/em&gt; e &lt;em&gt;&lt;strong&gt;calc()&lt;/strong&gt;&lt;/em&gt; presentes no CSS3, e que são suportadas pelos navegadores modernos, inclusive o IE9 (veja mais opções de compatibilidade &lt;a href=&#34;http://caniuse.com/#search=CALC&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://caniuse.com/#search=nth-child&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;). Para um rápido entendimento destes recursos também confira estes artigos: &lt;a href=&#34;http://tableless.com.br/nth-child/&#34;&gt;http://tableless.com.br/nth-child/&lt;/a&gt; e &lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34;&gt;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;exemplo-de-formulário&#34;&gt;Exemplo de formulário&lt;/h2&gt;

&lt;p&gt;Antes de partimos para o CSS, sempre que possível, precisamos usar elementos HTML5 semânticos, atributos WAI-ARIA, entre outros padrões de acessibilidade. Para este exemplo, o uso dos elementos de entradas de dados seguirão as técnicas preconizadas pelo eMAG 3.1 (ver &lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34;&gt;http://emag.governoeletronico.gov.br/&lt;/a&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Para cada elemento de entrada de dados presente na estrutura &lt;em&gt;form -&amp;gt; fieldset&lt;/em&gt; o seguinte padrão será seguido:&lt;/p&gt;

&lt;pre&gt;&lt;span style=&#34;line-height: 1.5;&#34;&gt;&amp;lt;label&amp;gt;
    &amp;lt;span&amp;gt;XXX:&amp;lt;/span&amp;gt;
    &amp;lt;input type=&#34;text&#34; value=&#34;&#34;&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Agora podemos aplicar o seguinte CSS para todos os elementos &lt;em&gt;&lt;label&gt;&lt;/em&gt; presentes neste padrão.&lt;/p&gt;

&lt;pre&gt;form fieldset &amp;gt; label {
    display: block;
    float: left;
    width: calc(100% - 10px);
    height: 55px;
    margin-top: 10px;
    margin-right: 10px;
}
form fieldset label &amp;gt; input {
    float: left;
}
label &amp;gt; input {
    display: block;
    width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Por termos utilizado o &lt;em&gt;margin-right&lt;/em&gt; com 10px, este valor foi contabilizado na largura do &lt;em&gt;label&lt;/em&gt; (uso da função &lt;em&gt;calc&lt;/em&gt;) com a finalidade de que sua margem não ultrapasse os limites do contêiner. Isto foi feito para que possamos alterar o layout de uma coluna para múltiplas colunas diretamente pelo CSS. Com este estilo, cada campo de entrada de dados aparecerá disposto como uma lista, e se adaptará a largura do contêiner.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49865 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário&#34; width=&#34;658&#34; height=&#34;532&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O próximo passo é poder criar mais de uma &amp;#8220;coluna&amp;#8221;, para que o campo Código e Nome fiquem na mesma &amp;#8220;linha&amp;#8221; quando o tamanho da tela for grande. O campo Código terá uma largura fixa de 80px e o campo Nome preencherá o restante do espaço do contêiner descontando a largura do campo Código juntamente com a margem de 10px dos dois &lt;em&gt;labels&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49869 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário Responsivo&#34; width=&#34;789&#34; height=&#34;537&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com estes recursos podemos alterar o layout da página HTML diretamente pelo CSS sem que a estrutura do layout fique no próprio HTML. Além de criar colunas que se adaptam a largura do contêiner, é possível criar colunas com tamanhos fixos, evitando também o uso de classes CSS, que só é encorajado quando for realmente necessário.&lt;/p&gt;

&lt;p&gt;O código fonte completo e a &lt;em&gt;Demo&lt;/em&gt; deste exemplo encontra-se em &lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34;&gt;http://codepen.io/rogeriodegoiania/pen/GJQmzb&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simples modal com CSS responsivo</title>
      <link>https://tableless.github.io/hugo-public/simples-modal-com-css-responsivo/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/simples-modal-com-css-responsivo/</guid>
      <description>

&lt;p&gt;Continuando com os artigos, vamos utilizar novamente os seletores de css para exibir nosso modal.&lt;/p&gt;

&lt;p&gt;Se você chegou aqui e não viu os posts anteriores, para conhecer a estrutura inicial acesse os links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/header-responsivo-somente-com-css/&#34; target=&#34;_blank&#34;&gt;Header responsivo somente com css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/destaques-responsivos/&#34; target=&#34;_blank&#34;&gt;Destaques responsivos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;De uma maneira bem simples veja como preparar seu html e css.&lt;/p&gt;

&lt;h2 id=&#34;o-label&#34;&gt;O LABEL&lt;/h2&gt;

&lt;p&gt;Com os destaques responsivos, vamos adicionar abaixo da descrição um label que terá a função de marcar o checkbox e por css iremos exibir o modal.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
&amp;nbsp; &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img1&#34; name=&#34;highlights&#34; checked=&#34;checked&#34; /&amp;gt;
&amp;nbsp; &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;lt;label class=&#34;highlights-button&#34; for=&#34;modal-chaves&#34;&amp;gt;Ver fotos do Chaves&amp;lt;/label&amp;gt;
&amp;nbsp; &amp;lt;/div&amp;gt;
&amp;nbsp;&amp;nbsp;
&amp;nbsp; ...
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;h2 id=&#34;o-css-do-botão&#34;&gt;O CSS DO BOTÃO&lt;/h2&gt;

&lt;p&gt;Vamos formatar o label para ser o nosso botão, lembrando que sempre precisamos usar a propriedade &amp;#8220;for&amp;#8221; para marcar o checkbox.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-button {
  display: inline-block;
  padding: 10px 15px 8px;
  cursor: pointer;
  border-radius: 3px;
  border: 1px solid #ccc;
  background-color: #ececec;
  -webkit-transition: background-color 300ms ease-in-out, border-color 300ms ease-in-out;
  transition: background-color 300ms ease-in-out, border-color 300ms ease-in-out;
}
&lt;/pre&gt;

&lt;p&gt;Adicionando o hover:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-button:hover {
  border: 1px solid #ececec;
  background-color: #ccc;
}
&lt;/pre&gt;

&lt;h2 id=&#34;o-html-do-modal&#34;&gt;O HTML DO MODAL&lt;/h2&gt;

&lt;p&gt;Para um melhor resultado vamos adicionar html antes do &amp;#8220;body&amp;#8221;, mas se quiser aplicar dentro da section sem problemas. Ao aplicar &amp;#8220;position: fixed&amp;#8221; o elemento ignora o &amp;#8220;position&amp;#8221; do pai e respeita o tamanho da janela.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;input type=&#34;checkbox&#34; id=&#34;modal_chaves&#34; /&amp;gt;
&amp;lt;div class=&#34;modal&#34;&amp;gt;
  &amp;lt;div class=&#34;modal-content&#34;&amp;gt;
    &amp;lt;h4&amp;gt;Foto Grande do Chaves&amp;lt;/h4&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-fotos-raras-4.jpg&#34; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;label class=&#34;modal-close&#34; for=&#34;modal_chaves&#34;&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;No resultado final poderá ver as modais aplicados dentro e fora da section.&lt;/p&gt;

&lt;h2 id=&#34;o-css-do-modal&#34;&gt;O CSS DO MODAL&lt;/h2&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.modal {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  opacity: 0;
  visibility: hidden;
  -webkit-transition: all 0.5s 0.5s ease-in-out;
  transition: all 0.5s 0.5s ease-in-out;
}

.modal-content {
  padding: 10px;
  max-width: 600px;
  min-width: 360px;
  max-height: 85%;
  overflow: auto;
  position: absolute;
  top: 5%;
  left: 50%;
  z-index: 2;
  opacity: 0;
  border-radius: 3px;
  background: #fff;
  -webkit-transform: translate(-50%, 0);
  -ms-transform: translate(-50%, 0);
  transform: translate(-50%, 0);
  -webkit-transition: all 0.5s ease-in-out;
  transition: all 0.5s ease-in-out;
}

.modal-content img {
  display: block;
  width: 100%;
  margin: 10px 0 0;
}

.modal-content p {
  padding-top: 10px;
  text-align: justify;
}&lt;/pre&gt;

&lt;p&gt;Agora formatando a cortina e o botão de fechar que é o label que colocamos depois do conteúdo do modal.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.modal-close {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: rgba(0,0,0,0.5);
}

.modal-close:after {
  content: &#34;X&#34;;
  float: right;
  margin: 5px 5px 0 0;
  width: 30px;
  height: 30px;
  position: relative;
  z-index: 3;
  text-align: center;
  line-height: 30px;
  cursor: pointer;
  background-color: rgba(255,255,255,0.8);
  border-radius: 20px;
  box-shadow: 0 0 3px #000;
}&lt;/pre&gt;

&lt;p&gt;Agora vamos esconder o checkbox e fazer nosso modal aparecer com &amp;#8220;:checked&amp;#8221; do css3.&lt;/p&gt;

&lt;p&gt;Um pequeno truque ao usar fixed e 50% para top, faz que o checkbox sempre fique no meio da janela evitando rolar a página ao ser selecionado. Se realizar um teste usando o inspect removendo o top: 50% e clicar no terceiro botão irá simular a rolagem.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;input[id*=&#34;modal_&#34;] {
  position: fixed;
  left: -9999px;
  top: 50%;
  opacity: 0;
}

input[id*=&#34;modal_&#34;]:checked + div.modal {
  opacity: 1;
  visibility: visible;
  -webkit-transition-delay: 0s;
  -ms-transition-delay: 0s;
  transition-delay: 0s;
}

input[id*=&#34;modal_&#34;]:checked + div.modal .modal-content {
  opacity: 1;
  -webkit-transform: translate(-50%, 0);
  -ms-transform: translate(-50%, 0);
  transform: translate(-50%, 0);
  -webkit-transition-delay: 0.5s;
  -ms-transition-delay: 0.5s;
  transition-delay: 0.5s;
}&lt;/pre&gt;

&lt;p&gt;Praticamente nosso css já está responsivo, mas vamos adaptar para resoluções menores que 768px.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
  .modal-content {
    padding: 10px 5%;
    min-width: 88%;
  }
}&lt;/pre&gt;

&lt;h2 id=&#34;pronto&#34;&gt;PRONTO&lt;/h2&gt;

&lt;p&gt;Temos um modal responsivo e seu conteúdo pode ser adaptado para qualquer tamanho, desde que faça isso acontecer.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Veja como ficou o resultado final&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/responsive-modal.html&#34; target=&#34;_blank&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;código completo no github&#34; href=&#34;https://github.com/palloi/responsive-header-only-css&#34; target=&#34;_blank&#34;&gt;Veja o código completo no github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;CONCLUINDO&lt;/h2&gt;

&lt;p&gt;Podemos aplicar de várias formas e uma delas é usando o &amp;#8220;:target&amp;#8221;, porém quando temos uma tela muito grande e ao fechar precisamos adicionar o &amp;#8220;#&amp;#8221;, isso faz que a página role para o topo.&lt;/p&gt;

&lt;p&gt;Agora com sua imaginação pode fazer diversas animações para exibir seu modal.&lt;/p&gt;

&lt;p&gt;Espero ter ajudado com a criação de modais só com css.&lt;/p&gt;

&lt;p&gt;Obrigado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seletores CSS Nível 4 – O que vem por aí</title>
      <link>https://tableless.github.io/hugo-public/seletores-css-nivel-4-o-que-vem-por-ai/</link>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/seletores-css-nivel-4-o-que-vem-por-ai/</guid>
      <description>

&lt;p&gt;Os seletores do CSS são a coisa mais importante da linguagem. As propriedades você consegue decorar e aprender de acordo com necessidade. Mas os seletores são a sua ferramenta de trabalho. A falta de um seletor adequado é determinante quando você decide fazer aquela gambiarra nojenta para conseguir formatar um elemento específico. Com seletores mais inteligentes, você também previne a chuva de classes que tem sido comum em projetos alheios. Por isso é importante que você conheça os novos seletores de nível 4 do CSS. Eles trazem uma série de novidades importantes para resolver aqueles problema recorrentes principalmente em projetos complexos. Abaixo, veja alguns exemplos.&lt;/p&gt;

&lt;p&gt;Para os mais puristas: quase nenhum destes seletores podem ser usados. A maioria apenas com a ajuda de prefixos e outros com a nomenclatura diferente da do padrão estabelecido. Por isso, não fique esperando que tudo isso poderá ser usado agora. Este é apenas um vislumbre do que você terá como ferramenta nos próximos anos (ou meses?).&lt;/p&gt;

&lt;h2 id=&#34;matcher&#34;&gt;:matcher&lt;/h2&gt;

&lt;p&gt;É uma pseudo-classe que seleciona como argumento uma lista de elementos. Nesse caso, não é possível fazer um seletor com combinadores. Muito útil, veja o exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section h1, header h1, article h1 {
  color: blue;
}
&lt;/pre&gt;

&lt;p&gt;Seria o mesmo que escrever:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;:matches(section, header, article) h1 {
  color: blue;
}
&lt;/pre&gt;

&lt;p&gt;Para você testar aí no Firefox ou no WebKit, note que eles estão usando um seletor prefixado chamado &lt;strong&gt;any&lt;/strong&gt;. É usado assim: &lt;strong&gt;-moz-any()&lt;/strong&gt; e &lt;strong&gt;-webkit-any()&lt;/strong&gt;. Alguma hora eles irão mudar para o nome definido pelo W3C.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;:-moz-any(section, article, header) h1,
:-webkit-any(section, article, header) h1 {
  color: red;
}
&lt;/pre&gt;

&lt;h2 id=&#34;not&#34;&gt;:not&lt;/h2&gt;

&lt;p&gt;O &lt;strong&gt;:not&lt;/strong&gt; foi apresentado no nível 3 do CSS, mas na versão 4 ele ganha um novo improvement, sendo utilizado assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p:not(.active, .visible) {
   color: red;
}
&lt;/pre&gt;

&lt;p&gt;Esse código seleciona todos os parágrafos que não tem a classe ACTIVE ou VISIBLE aplicadas.&lt;/p&gt;

&lt;h2 id=&#34;any-link&#34;&gt;:any-link&lt;/h2&gt;

&lt;p&gt;Esse é uma pequena adição, mas que ajuda bastante. Veja o exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a:link,
a:visited,
a:actived {
  color: green;
}
&lt;/pre&gt;

&lt;p&gt;É substituído por:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a:any-link {
  color: green;
}
&lt;/pre&gt;

&lt;h2 id=&#34;case-sensitivity&#34;&gt;Case-sensitivity&lt;/h2&gt;

&lt;p&gt;Atributos e Valores geralmente são minúsculos, mas alguns linguagens ou devs desavisados podem colocar letras maiúsculas nos valores dos atributos do HTML. Isto se torna um problema quando fazemos a seleção dos elementos via atributo e valor, como no exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a[href$=&#34;PDF&#34;] {
  color: green;
}
&lt;/pre&gt;

&lt;p&gt;Para prevenir isso, basta adicionar uma flag &lt;strong&gt;i&lt;/strong&gt; ainda dentro dos colchetes para que o browser ignore o case-sensitivity dos valores:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a[href$=&#34;pdf&#34; i] {
  color: green;
}
&lt;/pre&gt;

&lt;h2 id=&#34;dir&#34;&gt;:dir()&lt;/h2&gt;

&lt;p&gt;Seleciona elementos com uma direção de leitura específica. Veja o exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// Parágrafos com direção de leitura da esquerda para direita
p:dir(ltr) {
  color: green;
}

// Parágrafos com direção de leitura da direita para esquerda
p:dir(rtl) {
  color: red;
}
&lt;/pre&gt;

&lt;h2 id=&#34;read-only-e-read-write&#34;&gt;:read-only e :read-write&lt;/h2&gt;

&lt;p&gt;Outra adição bastante simples. Com essas pseudo-classes nós podemos selecionar e formatar os elementos que são read-only ou read-write na página. Geralmente todos os elementos são apenas read-only. Você não interage ou muda um parágrafo, por exemplo. Você vê um exemplo bastante simples pelos formulários:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;input:-moz-read-only {
  border: 1px solid red;
}

input:-moz-read-write {
  border: 1px solid blue;
}
&lt;/pre&gt;

&lt;h2 id=&#34;subject-seletor&#34;&gt;Subject Seletor&lt;/h2&gt;

&lt;p&gt;Agora você tem a possibilidade de inverter a ordem do seletor. Calma, eu explico: o seletor é lido sempre da direita para a esquerda. Mas agora você pode inverter essa ordem usando a flag &lt;strong&gt;!&lt;/strong&gt; no começo do seletor. Assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;!ul &gt; li {
  border: 1px solid blue;
}
&lt;/pre&gt;

&lt;p&gt;No caso acima, a &lt;strong&gt;UL&lt;/strong&gt; ficará com a borda. Bem interessante! Coisa lindíssima.&lt;/p&gt;

&lt;h2 id=&#34;entre-outros&#34;&gt;Entre outros&lt;/h2&gt;

&lt;p&gt;Existem uma &lt;a href=&#34;http://dev.w3.org/csswg/selectors-4/#overview&#34;&gt;listagem completa na documentação do W3C&lt;/a&gt; que mostra não apenas os seletores de nível 4, mas também os seletores que entraram nas versões anteriores. Vale a pena dar uma lida na documentação.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://css4-selectors.com/selectors/&#34;&gt;Neste link&lt;/a&gt; você encontra uma listagem com exemplos de sintaxe&lt;/p&gt;

&lt;p&gt;Alguns seletores eu queria muito ver funcionando, como é o caso das time-pseudos &lt;a href=&#34;http://dev.w3.org/csswg/selectors-4/#time-pseudos&#34;&gt;:current, :past e :future&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Destaques responsivos</title>
      <link>https://tableless.github.io/hugo-public/destaques-responsivos/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/destaques-responsivos/</guid>
      <description>

&lt;p&gt;Hoje criaremos três destaques com um comportamento totalmente responsivo.&lt;/p&gt;

&lt;p&gt;Com um crescimento das SPAs e seguindo o mesmo conceito do artigo anterior, vou passar agora de uma forma simples de como usar, o input radio para transformar nossos destaques em galeria navegável.&lt;/p&gt;

&lt;h2 id=&#34;aproveitando&#34;&gt;Aproveitando&lt;/h2&gt;

&lt;p&gt;Como já temos um header responsivo, vamos continuar com a mesma estrutura até o final dos artigos só com css e html. Se você ainda não viu como criar um &lt;a href=&#34;http://tableless.com.br/header-responsivo-somente-com-css/&#34; title=&#34;Header responsivo somente com css&#34; target=&#34;_blank&#34;&gt;header responsivo, clique aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos iniciar realocando a foto do Chaves para um novo formato:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-2.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Pensando na Paty&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-3.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Quero tanto esse sanduiche iche iche&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Temos um simples html para 3 itens, deixei os nome das classes mais compreensível e semântico, observado pelo amigo Shankar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-header-only-css/demo-only-elements.html&#34; target=&#34;_blank&#34;&gt;Ver demo sem style&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Sempre pensando no responsivo, vamos deixar nossos itens em % para 3 colunas seguindo dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-item {
  float: left;
  margin: 0 0 0 2%;
  width: 32%;
}

.highlights-item:first-of-type {
  margin-left: 0;
}

.highlights-item img {
  display: block;
  width: 100%;
  margin: 0 0 5px;
}

.highlights-item p {
  font-size: 14px;
  text-align: center;
}
&lt;/pre&gt;

&lt;p&gt;Para cada item apliquei 32% em width + 2% em margin-left, se multiplicarmos por 3 a soma é 102% que passa os 100% representado pelo elemento pai. Por estourar o tamanho do pai o terceiro item sempre cai.&lt;/p&gt;

&lt;p&gt;Então selecionamos o primeiro item para zerar o margin usando o seletor &amp;#8220;:first-of-type&amp;#8221;, por que mais adiante vamos adicionar mais elementos e já evitamos quebrar o css se caso usássemos os &amp;#8220;first-child&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-header-only-css/demo-basic-highlights.html&#34; target=&#34;_blank&#34;&gt;Ver demo com style&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-responsivo&#34;&gt;O RESPONSIVO&lt;/h2&gt;

&lt;p&gt;Já apresentada a forma de como usar os seletores, agora vamos adicionar antes de cada item um input radio, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img1&#34; name=&#34;highlights&#34; checked=&#34;checked&#34; /&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  ...
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;o-css-para-transformar&#34;&gt;O CSS PARA TRANSFORMAR&lt;/h2&gt;

&lt;p&gt;Com o html simples para 3 colunas, vamos transformar em uma galeria suave com o &amp;#8216;media screen&amp;#8217;, &amp;#8216;transition&amp;#8217; e &amp;#8216;transform&amp;#8217;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
  .highlights-item {
    width: 100%;
    margin-left: 0;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    visibility: hidden;
    -webkit-transition: all 500ms ease-in-out;
    transition: all 500ms ease-in-out;
    -webkit-transform: scale(0.9);
    -ms-transform: scale(0.9);
    transform: scale(0.9);
  }
}
&lt;/pre&gt;

&lt;p&gt;Nesse css deixei todos os itens com &amp;#8216;position absolute&amp;#8217;, mas isso faz que todo o conteúdo abaixo dele suba ocupando seu espaço. Mas como teremos um ativo vamos resolver logo abaixo.&lt;/p&gt;

&lt;p&gt;Importante lembrar que sempre precisamos de um radio marcado com &amp;#8216;checked&amp;#8217;, quando responder ao responsivo teremos sempre um ativo. Para mostrar o item ativo vamos adicionar as seguintes linhas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
   /*checked*/
  .highlights input:checked + div {
    position: relative;
    opacity: 1;
    visibility: visible;
    z-index: 1;
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
&lt;/pre&gt;

&lt;p&gt;O item que estiver ativo, recebe o &amp;#8216;position relative&amp;#8217; para bloquear sua área e outras propriedades para exibir suavemente.&lt;/p&gt;

&lt;p&gt;Como os type&amp;#8217;s dos input&amp;#8217;s são &amp;#8216;radio&amp;#8217;, teremos somente um &amp;#8216;:checked&amp;#8217; por grupo &amp;#8216;name&amp;#8217;.&lt;/p&gt;

&lt;h2 id=&#34;navegação-com-label&#34;&gt;NAVEGAÇÃO COM LABEL&lt;/h2&gt;

&lt;p&gt;Para selecionar cada radio, precisamos relacionar cada label usando o for e vamos adicionar o seguinte html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  ...
  &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img3&#34; name=&#34;highlights&#34; /&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    ....
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-buttons&#34;&amp;gt;
    &amp;lt;label for=&#34;radio-img1&#34;&amp;gt;Image 1&amp;lt;/label&amp;gt;
    &amp;lt;label for=&#34;radio-img2&#34;&amp;gt;Image 2&amp;lt;/label&amp;gt;
    &amp;lt;label for=&#34;radio-img3&#34;&amp;gt;Image 3&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Por padrão defino &amp;#8216;display none&amp;#8217; para os botões e com resoluções menores 768px mudamos para &amp;#8216;block&amp;#8217; para exibir.&lt;/p&gt;

&lt;h2 id=&#34;label-e-seu-css&#34;&gt;LABEL E SEU CSS&lt;/h2&gt;

&lt;p&gt;Agora que adicionamos os label&amp;#8217;s que tem a missão dos botões, vamos inserir uma formatação bem simples.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-buttons {
  display: none;
  clear: both;
  text-align: center;
}

.highlights-buttons label {
  display: inline-block;
  width: 15px;
  height: 15px;
  margin: 0 10px; 
  border-radius: 10px;
  background-color: #ccc;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  text-indent: -9999px;
  -webkit-transition: background-color 300ms ease-in-out;
  transition: background-color 300ms ease-in-out;
}
/*exibindo os botões*/
@media screen and (max-width: 767px) {
  .highlights-buttons {
    display: block;
  }
}
&lt;/pre&gt;

&lt;p&gt;Estamos falando de css puro e sempre precisamos definir o que vai ser feito, veja como aplicar o label ativo nessa estrutura que criamos:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights input:nth-of-type(1):checked ~ .highlights-buttons label:nth-child(1),
.highlights input:nth-of-type(2):checked ~ .highlights-buttons label:nth-child(2),
.highlights input:nth-of-type(3):checked ~ .highlights-buttons label:nth-child(3) {
  background-color: #000;
}
&lt;/pre&gt;

&lt;p&gt;Para evitar a repetição manual a cada novo item, se você usa SASS ou LESS vai tirar de letra com alguma função.&lt;/p&gt;

&lt;h2 id=&#34;e-pronto&#34;&gt;E PRONTO&lt;/h2&gt;

&lt;p&gt;Mais uma vez com poucos elementos e css, conseguimos deixar nossos destaques em uma galeria navegável e responsivo.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Veja como ficou o resultado final&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/responsive-highlights.html&#34; target=&#34;_blank&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Código completo no github&#34; href=&#34;https://github.com/palloi/responsive-header-only-css&#34; target=&#34;_blank&#34;&gt;Veja o código completo no github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;CONCLUINDO&lt;/h2&gt;

&lt;p&gt;Existe diversas maneiras de aplicar no css e quantidades de itens, espero que todos possam aproveitar um pouco do que foi apresentado.&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Header responsivo somente com css</title>
      <link>https://tableless.github.io/hugo-public/header-responsivo-somente-com-css/</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/header-responsivo-somente-com-css/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/header-responsive-only-css.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/header-responsive-only-css.png&#34; alt=&#34;header-responsive-only-css&#34; class=&#34;alignnone size-full wp-image-46175&#34; srcset=&#34;uploads/2014/12/header-responsive-only-css.png 750w, uploads/2014/12/header-responsive-only-css-265x106.png 265w, uploads/2014/12/header-responsive-only-css-400x160.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A cada novo projeto queremos alcançar o máximo de usuários, não importa se o dispositivo seja grande ou pequeno, tem que funcionar.&lt;/p&gt;

&lt;p&gt;Com uma abordagem simples e rápida, esse tutorial vai te fazer pensar antes de querer usar o bootstrap só para ter o menu responsivo, claro que ele tem suas vantagens mas procuro sempre desenvolver do zero.&lt;/p&gt;

&lt;p&gt;Estarei criando uma serie de tutoriais abordando o assunto e espero que gostem do meu primeiro artigo.&lt;/p&gt;

&lt;h2 id=&#34;valendo&#34;&gt;Valendo!!!&lt;/h2&gt;

&lt;p&gt;Hoje em dia quando o cliente diz que o site é responsivo, quem aqui pensa no bootstrap?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;#8220;Fazer menu responsivo é só com bootstrap&amp;#8221; ou &amp;#8220;vamos precisar de javascript.&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nada contra o bootstrap, mas prefiro o &lt;a title=&#34;Locawebstyle&#34; href=&#34;http://locaweb.github.io/locawebstyle/&#34; target=&#34;_blank&#34;&gt;Locawebstyle&lt;/a&gt; que está lindo e o javascript é maravilhoso.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos criar primeiro nosso html com header simples:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;h1 class=&#34;fL&#34;&amp;gt;
    &amp;lt;a href=&#34;#&#34; title=&#34;A TURMA DO CHAVES&#34;&amp;gt;A TURMA DO CHAVES&amp;lt;/a&amp;gt;
  &amp;lt;/h1&amp;gt;

  &amp;lt;nav class=&#34;fR&#34;&amp;gt;
    &amp;lt;ul class=&#34;l2&#34;&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Chaves&#34; title=&#34;Chaves&#34;&amp;gt;Chaves&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Chiquinha&#34; title=&#34;Chiquinha&#34;&amp;gt;Chiquinha&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Seu-Madruga&#34; title=&#34;Seu Madruga&#34;&amp;gt;Seu Madruga&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Quico&#34; title=&#34;Quico&#34;&amp;gt;Quico&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/pre&gt;

&lt;p&gt;​Agora com o nosso html pronto, vamos fazer o primeiro teste olhando nosso html puro e formatar usando poucas linhas de css.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Ver demo sem style.&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/demo-only-elements.html&#34; target=&#34;_blank&#34;&gt;Ver demo sem style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Como nosso header ficará sempre fixo no topo, vamos formatar da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;header {
  min-height: 60px;
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  border-bottom: 1px solid #ccc;
  background: #ECECEC;
  z-index: 2;
}
&lt;/pre&gt;

&lt;p&gt;Agora com o header formatado, o segundo teste é redimensionar o navegador para perceber que o header sempre acompanha e ao diminuir muito tem quebra por falta de espaço.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Ver demo com style.&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/demo-basic-header.html&#34; target=&#34;_blank&#34;&gt;Ver demo com style.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Montamos um header simples e funcional, com mais 3 elementos e CSS teremos um header simples e responsivo.&lt;/p&gt;

&lt;p&gt;Esses elementos são dois label&amp;#8217;s e um checkbox, com o selector &amp;#8216;~&amp;#8217; do css3 vamos transformar o header.&lt;/p&gt;

&lt;h2 id=&#34;começando-o-responsivo&#34;&gt;Começando o responsivo&lt;/h2&gt;

&lt;p&gt;Vamos adicionar os elementos antes da nav e o html fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;h1 class=&#34;fL&#34;&amp;gt;
    &amp;lt;a href=&#34;#&#34; title=&#34;A TURMA DO CHAVES&#34;&amp;gt;A TURMA DO CHAVES&amp;lt;/a&amp;gt;
  &amp;lt;/h1&amp;gt;
  
  &amp;lt;input type=&#34;checkbox&#34; id=&#34;control-nav&#34; /&amp;gt;
  &amp;lt;label for=&#34;control-nav&#34; class=&#34;control-nav&#34;&amp;gt;&amp;lt;/label&amp;gt;
  &amp;lt;label for=&#34;control-nav&#34; class=&#34;control-nav-close&#34;&amp;gt;&amp;lt;/label&amp;gt;

  &amp;lt;nav class=&#34;fR&#34;&amp;gt;
    &amp;lt;ul class=&#34;l2&#34;&amp;gt;
      ...
    &amp;lt;/ul&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Nesse ponto o checkbox tem o papel de substituir o javascript.&lt;/p&gt;

&lt;p&gt;Conseguimos também por css saber se o elemento está marcado com o famoso &amp;#8220;:checked&amp;#8221; que todos já usaram com jQuery.&lt;/p&gt;

&lt;h2 id=&#34;seu-projeto-suas-medidas&#34;&gt;Seu projeto, suas medidas&lt;/h2&gt;

&lt;p&gt;Para nosso exemplo adicionei no head:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, height=device-height, initial-scale=1, maximum-scale=1, user-scalable=no&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e no css:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px)
&lt;/pre&gt;

&lt;p&gt;Quando redimensionar o navegador menor que 768px, a formatação do header vai se comportar de outra maneira e já escondida utilizando transform:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
  header .control-nav {
    position: absolute;
    right: 20px;
    top: 20px;
    display: block;
    width: 30px;
    padding: 5px 0;
    border: solid #333;
    border-width: 3px 0;
    z-index: 2;
    cursor: pointer;
  }

  header .control-nav:before {
    content: &#34;&#34;;
    display: block;
    height: 3px;
    background: #333;
  }

  header .control-nav-close {
    position: fixed;
    right: 0;
    top: 0;
    bottom: 0;
    left: 0;
    display: block;
    z-index: 1;
    background: rgba(0,0,0,0.4);
    -webkit-transition: all 500ms ease;
    transition: all 500ms ease;
    -webkit-transform: translate(100%, 0);
    -ms-transform: translate(100%, 0);
    transform: translate(100%, 0);
  }

  header nav {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    width: 250px;
    border-left: 1px solid #ccc;
    background: #fff;
    overflow-x: auto;
    z-index: 2;
    -webkit-transition: all 500ms ease;
    transition: all 500ms ease;
    -webkit-transform: translate(100%, 0);
    -ms-transform: translate(100%, 0);
    transform: translate(100%, 0);
  }
}
&lt;/pre&gt;

&lt;p&gt;Formatei o &amp;#8220;label .control-nav&amp;#8221; para ser o botão responsivo, o &amp;#8220;label .control-nav-close&amp;#8221; para ser a cortina bloqueando o fundo e o &amp;#8216;nav&amp;#8217; para ficar fixo e redimensionável.&lt;/p&gt;

&lt;h2 id=&#34;agora-o-pulo-do-gato&#34;&gt;Agora o pulo do gato&lt;/h2&gt;

&lt;p&gt;Utilizando dos seletores do CSS3 que são os &amp;#8216;:checked&amp;#8217; e &amp;#8216;~&amp;#8217;, conseguimos formatar elementos de acordo com a necessidade, &lt;a title=&#34;Veja a documentação&#34; href=&#34;http://www.w3.org/TR/css3-selectors/#selectors&#34; target=&#34;_blank&#34;&gt;veja a documentação&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sendo mais claro, com o seletor &amp;#8216;~&amp;#8217; você consegue selecionar elemento do mesmo pai declarado depois dele.&lt;/p&gt;

&lt;p&gt;Ao marcar o input, no css usando o transform vamos exibir suavemente o menu, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;#control-nav:checked ~ .control-nav-close {
  -webkit-transform: translate(0, 0);
  -ms-transform: translate(0, 0);
  transform: translate(0, 0);
}

#control-nav:checked ~ nav {
  -webkit-transform: translate(0, 0);
  -ms-transform: translate(0, 0);
  transform: translate(0, 0);
}
&lt;/pre&gt;

&lt;h2 id=&#34;pronto&#34;&gt;Pronto&lt;/h2&gt;

&lt;p&gt;Agora o menu é responsivo e bem simples com poucos elementos.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Veja como ficou o resultado final&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/&#34; target=&#34;_blank&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;código completo no github&#34; href=&#34;https://github.com/palloi/responsive-header-only-css&#34; target=&#34;_blank&#34;&gt;Veja o código completo no github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Filters – Aplicando filtros em imagens com CSS</title>
      <link>https://tableless.github.io/hugo-public/css-filters-aplicando-filtros-em-imagens-com-css/</link>
      <pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css-filters-aplicando-filtros-em-imagens-com-css/</guid>
      <description>&lt;p&gt;A cada dia que passa o CSS tem virado de fato uma linguagem visual, para formatar como os elementos, imagens e qualquer outro tipo de informação aparece nos browsers, celulares e etc. Um bom exemplo disso são os CSS Filters, que permite aplicar filtros, antes vistos apenas em programas como Photoshop, diretamente no browser com CSS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A filter effect is a graphical operation that is applied to an element as it is drawn into the document. It is an image-based effect, in that it takes zero or more images as input, a number of parameters specific to the effect, and then produces an image as output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A possibilidade de aplicar filtros com CSS já é possível desde algo em torno de 2011, mas apenas para o motor WebKit. Agora essa possibilidade se transformou de fato em &lt;a href=&#34;http://www.w3.org/TR/filter-effects/&#34;&gt;rascunho do W3C&lt;/a&gt; para que um dia vire uma recomendação. O &lt;a href=&#34;http://caniuse.com/#feat=css-filters&#34;&gt;suporte ainda não é muito bom&lt;/a&gt;, mas, dependendo do seu público, você já pode usar agora.&lt;/p&gt;

&lt;p&gt;A sintaxe é simples e bem fácil de entender:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;seletor {
  filter: funcao(valor) | none
}
&lt;/pre&gt;

&lt;p&gt;Os valores possíveis por enquanto são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blur()&lt;/li&gt;
&lt;li&gt;brightness()&lt;/li&gt;
&lt;li&gt;contrast()&lt;/li&gt;
&lt;li&gt;drop-shadow()&lt;/li&gt;
&lt;li&gt;grayscale()&lt;/li&gt;
&lt;li&gt;sepia()&lt;/li&gt;
&lt;li&gt;hue-rotate()&lt;/li&gt;
&lt;li&gt;invert()&lt;/li&gt;
&lt;li&gt;opacity()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A imagem abaixo já está com contrast() aplicado e passando o mouse, fica com efeito blur():&lt;/p&gt;

&lt;p&gt;Você pode passar uma ou várias funções em uma mesma propriedade &lt;code&gt;filter&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p {
  filter: blur(50px);
}

img {
  filter: blur(50px) contrast(5);
}
&lt;/pre&gt;

&lt;p&gt;Abaixo você pode ver alguns exemplos:&lt;/p&gt;

&lt;p&gt;Existem algumas observações interessantes sobre a aplicação dos filtros. Por exemplo, se você quiser combinar os filtros sepia() e grayscale(), certifique-se de adicionar sepia() antes do grayscale(), caso contrário o resultado será apenas grayscale().&lt;/p&gt;

&lt;p&gt;Você pode não entender o efeito de hue-rotate(), sugiro que &lt;a href=&#34;http://en.wikipedia.org/wiki/Hue&#34;&gt;leia mais sobre HUE aqui&lt;/a&gt;. Leia mais sobre &lt;a href=&#34;http://tableless.com.br/sobre-cor-e-webdesign/&#34;&gt;cores na web aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SASS: Mixin ou Placeholder?</title>
      <link>https://tableless.github.io/hugo-public/sass-mixin-ou-placeholder/</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/sass-mixin-ou-placeholder/</guid>
      <description>

&lt;p&gt;Se é um tema que sempre vejo a respeito da utilização ou não, é sobre o uso de pré processadores CSS. Alguns &lt;em&gt;devs&lt;/em&gt; que costumo seguir e ler os artigos, e que pra mim são algumas das nossas referências, apontam as suas considerações sobre o tema. O Miller Medeiros, em um &lt;a href=&#34;http://blog.millermedeiros.com/the-problem-with-css-pre-processors/&#34;&gt;post&lt;/a&gt; mostra alguns pontos negativos na utilização de pré processadores. O Jean Carlos Emer em um outro &lt;a href=&#34;http://tableless.com.br/css-steroids/&#34; title=&#34;CSS on steroids&#34;&gt;post&lt;/a&gt; mostra as reais vantagens de se utilizar um pré-processador. O Diego Eis, em um outro &lt;a href=&#34;http://tableless.com.br/pre-processadores-usar-ou-nao-usar/&#34; title=&#34;Pré processadores: usar ou não usar?&#34;&gt;post&lt;/a&gt; faz uma conclusão muito boa sobre a utilização ou não:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pré processadores podem ajudar como também podem maltratar bastante. Basta um escorregão para que seu projeto vire um inferno. &amp;#8211; Diego Eis&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A utilização ou não de um pré processador fica a seu critério mas, se você já utiliza nos seus projetos ou está pensando em usar, você sabe o que são um &lt;strong&gt;placeholder&lt;/strong&gt; e um &lt;strong&gt;mixin&lt;/strong&gt;? Se sim, sabe qual a principal diferença entre eles e quando usar um ou outro? Navegando um dia pela internet, achei um &lt;a href=&#34;http://www.sitepoint.com/sass-mixin-placeholder/&#34;&gt;artigo&lt;/a&gt; do &lt;a href=&#34;https://twitter.com/HugoGiraudel&#34; title=&#34;Perfil do twitter do desenvolvedor Hugo Giraudel&#34;&gt;Hugo Giraudel&lt;/a&gt;, um dev front-end francês, no &lt;a href=&#34;http://www.sitepoint.com/&#34; title=&#34;Link do website SitePoint&#34;&gt;SitePoint&lt;/a&gt; que trata exatamente sobre esse assunto.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Quando comecei a trabalhar com SASS cerca de um ano e meio atrás, uma coisa que me levou tempo para entender foi a diferença entre &lt;em&gt;&lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins&#34;&gt;incluir um mixin&lt;/a&gt;&lt;/em&gt; e &lt;em&gt;&lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders&#34;&gt;estender um placeholder&lt;/a&gt;&lt;/em&gt;. Na verdade, até mesmo a noção de &lt;em&gt;placeholder&lt;/em&gt; era uma espécie de magia negra vodu naquela época.&lt;/p&gt;

&lt;p&gt;Se você estiver em uma situação semelhante, não se preocupe, porque eu vou tentar iluminar o caminho. Hoje vamos aprender para que exatamente serve um &lt;em&gt;mixin&lt;/em&gt;, e quando usar um &lt;em&gt;placeholder do SASS&lt;/em&gt;. Você vai entender que ambos tem diferentes finalidades e não devem ser confundidas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota: Enquanto pretendo falar sobre SASS, esse artigo pode ser aplicado a qualquer outro pré-processador CSS, seja Stylus, LESS, ou outro que você venha a usar. Essas tecnologias geralmente fazem a mesma coisa, portanto fique a vontade para adaptar o conteúdo deste artigo para a ferramenta de sua escolha&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Primeiro devemos fazer um breve resumo sobre o que estamos falando quando nos referimos aos &lt;strong&gt;placeholder e mixins do SASS&lt;/strong&gt;, então vamos fazer isso já.&lt;/p&gt;

&lt;h2 id=&#34;entendendo-o-mixin&#34;&gt;Entendendo o mixin&lt;/h2&gt;

&lt;p&gt;Um mixin é uma diretiva que permite que você defina várias regras com diversos argumentos. Pense nisso como uma função que irá retornar conteúdo CSS ao invés de um valor. Aqui está a definição de &lt;em&gt;mixin&lt;/em&gt; da &lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content&#34;&gt;referência do SASS&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote cite=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content&#34;&gt;
  &lt;p&gt;
    Mixins permitem definir estilos que podem ser reutilizados em toda a folha de estilo, sem a necessidade de recorrer a classes não semânticas como &lt;i&gt;.float-left&lt;/i&gt;. Mixins podem também conter regras completas de CSS e quaisquer outras coisas permitidas em um documento SASS. Eles podem até mesmo possuírem argumentos que lhe permitem produzir uma ampla variedade de estilos com poucos mixins.
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agora que cobrimos a terminologia, vamos dizer que você encontra algumas declarações que são repetidas várias vezes ao longo da sua folha de estilos. Você que está familiarizado com o conceito de DRY (&lt;a href=&#34;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;Don&amp;#8217;t Repeat Yourself&lt;/a&gt;), sabe que a repetição de código é ruim. Para corrigir isso, você pode escrever um mixin para todas aquelas declarações repetidas:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin center() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.container {
    @include center();
    /* Outros estilos aqui... */
}

/* Outros estilos... */

.image-cover {
    @include center;
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota: Se você não passar um argumento para um mixin, você pode omitir os parênteses. Na verdade, você pode até omiti-los na definição do &lt;code&gt;@mixin&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Com este mixin recém-criado, você não precisa repetir aquelas três linhas de código cada vez que precisar centralizar um elemento; você simplesmente inclui o mixin. Muito prático, não é?!&lt;/p&gt;

&lt;p&gt;Algumas vezes você vai querer um mixin para construir o que você chamaria de &lt;em&gt;shorthand&lt;/em&gt; para algumas propriedades. Por exemplo, largura e altura. Você não está cansado de escrever as duas linhas várias e várias vezes? Especialmente quando ambas tem o mesmo valor? Bem, vamos lidar com isso usando um mixin!&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}
&lt;/pre&gt;

&lt;p&gt;Muito simples, não é? Note como deixamos o parâmetro &lt;code&gt;$height&lt;/code&gt; ser opcional e, por padrão assumir o mesmo valor do parâmetro &lt;code&gt;$width&lt;/code&gt; na assinatura do mixin. Agora, sempre que você precisar definir as dimensões para um elemento, você pode simplesmente fazer isso:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.icon {
    @include size(32px);
}

.cover {
    @include size(100%, 10em);
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota: Um outro bom exemplo de mixin seria &lt;a href=&#34;http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/&#34;&gt;este aqui&lt;/a&gt; que eu fiz para evitar de escrever as posições &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; e &lt;code&gt;bottom&lt;/code&gt; toda vez que quiser utilizar um sistema de posicionamento diferente do estático.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;conhecendo-seu-placeholder&#34;&gt;Conhecendo seu Placeholder&lt;/h2&gt;

&lt;p&gt;Placeholders são um tipo de coisa estranha. Eles são classes que não são retornadas quando o seu SCSS é compilado. Você deve então pensar: &lt;em&gt;&amp;#8220;Qual é o sentido disso?&amp;#8221;&lt;/em&gt;. Na verdade, o ponto seria minímo senão fosse a expressão &lt;code&gt;@extend&lt;/code&gt;. Mas vamos por partes. Essa é a forma que você escreve um placeholder:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
    display: block;
    margin-left: auto;
    margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota do editor: Como um placeholder, um mixin é igualmente inútil, a menos que seja referenciado, assim essa seção não está dizendo que eles são diferentes nesse aspecto, mas apenas esclarecendo que mesmo que se pareça similar com um bloco de declaração CSS, não será gerado por conta própria.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basicamente você escreve exatamente como uma classe &lt;code&gt;CSS&lt;/code&gt; exceto pelo símbolo % ao invés do ponto. Além disso, segue as mesmas &lt;a href=&#34;http://www.w3.org/TR/html401/types.html#type-cdata&#34;&gt;regras de nomenclatura&lt;/a&gt; das classes.&lt;/p&gt;

&lt;p&gt;Agora, se você tentar compilar seu SCSS, você não vai ver esse pedaço de código no arquivo gerado. Como eu disse: &lt;strong&gt;placeholders não são compilados&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Então, por agora, esse placeholder é totalmente inútil. Você não consegue fazer qualquer uso dele a não ser que você veja o &lt;code&gt;@extend&lt;/code&gt;. Um &lt;code&gt;@extend&lt;/code&gt; tem como objetivo herdar as propriedades de um seletor CSS / SCSS placeholder. Aqui como usá-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.container {
  @extend %center;
}
&lt;/pre&gt;

&lt;p&gt;Ao fazer isso, o arquivo SASS vai pegar o conteúdo do placeholder &lt;code&gt;%center&lt;/code&gt; e aplicá-lo no &lt;code&gt;.container&lt;/code&gt; (mesmo que isso não aconteça exatamente assim &amp;#8211; mas isso não é importante agora). Como eu disse, você também pode &lt;em&gt;estender&lt;/em&gt; seletores CSS já existentes (além de placeholders SCSS) dessa maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.table-zebra {
  @extend .table;

  tr:nth-of-type(even) {
    background: rgba(0,0,0,.5);
  }
}
&lt;/pre&gt;

&lt;p&gt;Esse é um caso muito comum para o uso do &lt;code&gt;@extend&lt;/code&gt;. Nesse caso, pedimos para a classe &lt;code&gt;.table-zebra&lt;/code&gt; se comportar exatamente como a classe &lt;code&gt;.table&lt;/code&gt; e então adicionamos as regras específicas da classe &lt;code&gt;.table-zebra&lt;/code&gt;. &lt;em&gt;Estender&lt;/em&gt; seletores é bastante conveniente quando você desenvolve seu site ou aplicação em componentes modulares.&lt;/p&gt;

&lt;h2 id=&#34;qual-utilizar&#34;&gt;Qual utilizar?&lt;/h2&gt;

&lt;p&gt;Então, a pergunta permanece: o que você deve usar? Bem, como tudo em nossa área: &lt;strong&gt;depende&lt;/strong&gt;. Depende do contexto e, em uma outra análise, do que você está querendo fazer.&lt;/p&gt;

&lt;p&gt;O melhor conselho seria: se você precisa de variáveis, utilize o mixin. Caso contrário, use o placeholder. Há duas razões para isso:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primeiro, você não pode usar variáveis em um placeholder. Na verdade, até pode, mas você não consegue &lt;em&gt;passar&lt;/em&gt; uma variável em um placeholder para gerar um conteúdo específico de CSS, como você faria em um mixin.&lt;/li&gt;
&lt;li&gt;Segundo, a forma como o SASS lida com os mixins, os torna muito incovenientes quando você os utiliza sem variáveis contextuais. Simplificando: o SASS vai duplicar a saída de um mixin toda vez que você o utilizá-lo, resultando não apenas em CSS duplicado, mas também em uma folha de estilos maior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considere o primeiro exemplo desse artigo:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.container {
  @include center;
}

.image-cover {
  @include center;
}
&lt;/pre&gt;

&lt;p&gt;O CSS compilado seria esse:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.image-cover {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;Observou o CSS duplicado? Ele não é tão prejudicial se forem apenas três linhas duplicadas, mas se você tiver muitos mixins que são usados várias vezes em um projeto, essas três linhas podem facilmente se tornarem 300. E se reformularmos nosso exemplo, só que dessa vez utilizando o placeholder?&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.container {
  @extend %center;
}

.image-cover {
  @extend %center;
}
&lt;/pre&gt;

&lt;p&gt;Agora, esse é o CSS gerado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container, .image-cover {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;Muito melhor! A compilação leva vantagem &lt;a href=&#34;http://reference.sitepoint.com/css/selectorgrouping&#34;&gt;agrupando seletores&lt;/a&gt;, sem nenhum estilo repetido. Assim, sempre que você quiser evitar a escrever as mesmas propriedades diversas vezes, sabendo que elas não mudarão, é uma boa idéia &lt;em&gt;estender&lt;/em&gt; um placeholder. Isso resultará em um código CSS compilado muito mais limpo.&lt;/p&gt;

&lt;p&gt;Por outro lado, se você precisa escrever as mesmas propriedades em vários lugares mas com valores diferentes (tamanho, cores, etc), um mixin é o melhor caminho a seguir. Agora se você possui ambos, um grupo de valores fixos e outro de valores variáveis, você deve tentar usar uma combinação dos dois.&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
  margin-left: auto;
  margin-right: auto;
  display: block;
}

@mixin skin($color, $size) {
  @extend %center;
  background: $color;
  height: $size;
}

a { @include skin(pink, 10em) }
b { @include skin(blue, 90px) }
&lt;/pre&gt;

&lt;p&gt;Neste caso, o mixin está &lt;em&gt;estendendo&lt;/em&gt; o placeholder para os valores fixos em vez de jogá-los diretamente em seu corpo. Isso gera um CSS mais limpo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a, b {
  margin-left: auto;
  margin-right: auto;
  display: block;
}

a {
  background: pink;
  height: 10em;
}

b {
  background: blue;
  height: 90px;
}
&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;É isso. Espero ter deixado claro não só o que são mixins e placeholders, mas também quando você deve usá-los e qual os efeitos sobre o CSS compilado.&lt;/p&gt;

&lt;p&gt;Se você tiver alguma coisa a acrescentar sobre suas experiências com essas &lt;em&gt;features&lt;/em&gt; dos pré-processadores de CSS, sinta-se livre para compartilhar nos comentários.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do [Se é um tema que sempre vejo a respeito da utilização ou não, é sobre o uso de pré processadores CSS. Alguns &lt;em&gt;devs&lt;/em&gt; que costumo seguir e ler os artigos, e que pra mim são algumas das nossas referências, apontam as suas considerações sobre o tema. O Miller Medeiros, em um &lt;a href=&#34;http://blog.millermedeiros.com/the-problem-with-css-pre-processors/&#34;&gt;post&lt;/a&gt; mostra alguns pontos negativos na utilização de pré processadores. O Jean Carlos Emer em um outro &lt;a href=&#34;http://tableless.com.br/css-steroids/&#34; title=&#34;CSS on steroids&#34;&gt;post&lt;/a&gt; mostra as reais vantagens de se utilizar um pré-processador. O Diego Eis, em um outro &lt;a href=&#34;http://tableless.com.br/pre-processadores-usar-ou-nao-usar/&#34; title=&#34;Pré processadores: usar ou não usar?&#34;&gt;post&lt;/a&gt; faz uma conclusão muito boa sobre a utilização ou não:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pré processadores podem ajudar como também podem maltratar bastante. Basta um escorregão para que seu projeto vire um inferno. &amp;#8211; Diego Eis&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A utilização ou não de um pré processador fica a seu critério mas, se você já utiliza nos seus projetos ou está pensando em usar, você sabe o que são um &lt;strong&gt;placeholder&lt;/strong&gt; e um &lt;strong&gt;mixin&lt;/strong&gt;? Se sim, sabe qual a principal diferença entre eles e quando usar um ou outro? Navegando um dia pela internet, achei um &lt;a href=&#34;http://www.sitepoint.com/sass-mixin-placeholder/&#34;&gt;artigo&lt;/a&gt; do &lt;a href=&#34;https://twitter.com/HugoGiraudel&#34; title=&#34;Perfil do twitter do desenvolvedor Hugo Giraudel&#34;&gt;Hugo Giraudel&lt;/a&gt;, um dev front-end francês, no &lt;a href=&#34;http://www.sitepoint.com/&#34; title=&#34;Link do website SitePoint&#34;&gt;SitePoint&lt;/a&gt; que trata exatamente sobre esse assunto.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Quando comecei a trabalhar com SASS cerca de um ano e meio atrás, uma coisa que me levou tempo para entender foi a diferença entre &lt;em&gt;&lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins&#34;&gt;incluir um mixin&lt;/a&gt;&lt;/em&gt; e &lt;em&gt;&lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders&#34;&gt;estender um placeholder&lt;/a&gt;&lt;/em&gt;. Na verdade, até mesmo a noção de &lt;em&gt;placeholder&lt;/em&gt; era uma espécie de magia negra vodu naquela época.&lt;/p&gt;

&lt;p&gt;Se você estiver em uma situação semelhante, não se preocupe, porque eu vou tentar iluminar o caminho. Hoje vamos aprender para que exatamente serve um &lt;em&gt;mixin&lt;/em&gt;, e quando usar um &lt;em&gt;placeholder do SASS&lt;/em&gt;. Você vai entender que ambos tem diferentes finalidades e não devem ser confundidas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota: Enquanto pretendo falar sobre SASS, esse artigo pode ser aplicado a qualquer outro pré-processador CSS, seja Stylus, LESS, ou outro que você venha a usar. Essas tecnologias geralmente fazem a mesma coisa, portanto fique a vontade para adaptar o conteúdo deste artigo para a ferramenta de sua escolha&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Primeiro devemos fazer um breve resumo sobre o que estamos falando quando nos referimos aos &lt;strong&gt;placeholder e mixins do SASS&lt;/strong&gt;, então vamos fazer isso já.&lt;/p&gt;

&lt;h2 id=&#34;entendendo-o-mixin-1&#34;&gt;Entendendo o mixin&lt;/h2&gt;

&lt;p&gt;Um mixin é uma diretiva que permite que você defina várias regras com diversos argumentos. Pense nisso como uma função que irá retornar conteúdo CSS ao invés de um valor. Aqui está a definição de &lt;em&gt;mixin&lt;/em&gt; da &lt;a href=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content&#34;&gt;referência do SASS&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote cite=&#34;http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content&#34;&gt;
  &lt;p&gt;
    Mixins permitem definir estilos que podem ser reutilizados em toda a folha de estilo, sem a necessidade de recorrer a classes não semânticas como &lt;i&gt;.float-left&lt;/i&gt;. Mixins podem também conter regras completas de CSS e quaisquer outras coisas permitidas em um documento SASS. Eles podem até mesmo possuírem argumentos que lhe permitem produzir uma ampla variedade de estilos com poucos mixins.
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agora que cobrimos a terminologia, vamos dizer que você encontra algumas declarações que são repetidas várias vezes ao longo da sua folha de estilos. Você que está familiarizado com o conceito de DRY (&lt;a href=&#34;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;Don&amp;#8217;t Repeat Yourself&lt;/a&gt;), sabe que a repetição de código é ruim. Para corrigir isso, você pode escrever um mixin para todas aquelas declarações repetidas:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin center() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.container {
    @include center();
    /* Outros estilos aqui... */
}

/* Outros estilos... */

.image-cover {
    @include center;
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota: Se você não passar um argumento para um mixin, você pode omitir os parênteses. Na verdade, você pode até omiti-los na definição do &lt;code&gt;@mixin&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Com este mixin recém-criado, você não precisa repetir aquelas três linhas de código cada vez que precisar centralizar um elemento; você simplesmente inclui o mixin. Muito prático, não é?!&lt;/p&gt;

&lt;p&gt;Algumas vezes você vai querer um mixin para construir o que você chamaria de &lt;em&gt;shorthand&lt;/em&gt; para algumas propriedades. Por exemplo, largura e altura. Você não está cansado de escrever as duas linhas várias e várias vezes? Especialmente quando ambas tem o mesmo valor? Bem, vamos lidar com isso usando um mixin!&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}
&lt;/pre&gt;

&lt;p&gt;Muito simples, não é? Note como deixamos o parâmetro &lt;code&gt;$height&lt;/code&gt; ser opcional e, por padrão assumir o mesmo valor do parâmetro &lt;code&gt;$width&lt;/code&gt; na assinatura do mixin. Agora, sempre que você precisar definir as dimensões para um elemento, você pode simplesmente fazer isso:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.icon {
    @include size(32px);
}

.cover {
    @include size(100%, 10em);
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota: Um outro bom exemplo de mixin seria &lt;a href=&#34;http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/&#34;&gt;este aqui&lt;/a&gt; que eu fiz para evitar de escrever as posições &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; e &lt;code&gt;bottom&lt;/code&gt; toda vez que quiser utilizar um sistema de posicionamento diferente do estático.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;conhecendo-seu-placeholder-1&#34;&gt;Conhecendo seu Placeholder&lt;/h2&gt;

&lt;p&gt;Placeholders são um tipo de coisa estranha. Eles são classes que não são retornadas quando o seu SCSS é compilado. Você deve então pensar: &lt;em&gt;&amp;#8220;Qual é o sentido disso?&amp;#8221;&lt;/em&gt;. Na verdade, o ponto seria minímo senão fosse a expressão &lt;code&gt;@extend&lt;/code&gt;. Mas vamos por partes. Essa é a forma que você escreve um placeholder:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
    display: block;
    margin-left: auto;
    margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Nota do editor: Como um placeholder, um mixin é igualmente inútil, a menos que seja referenciado, assim essa seção não está dizendo que eles são diferentes nesse aspecto, mas apenas esclarecendo que mesmo que se pareça similar com um bloco de declaração CSS, não será gerado por conta própria.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basicamente você escreve exatamente como uma classe &lt;code&gt;CSS&lt;/code&gt; exceto pelo símbolo % ao invés do ponto. Além disso, segue as mesmas &lt;a href=&#34;http://www.w3.org/TR/html401/types.html#type-cdata&#34;&gt;regras de nomenclatura&lt;/a&gt; das classes.&lt;/p&gt;

&lt;p&gt;Agora, se você tentar compilar seu SCSS, você não vai ver esse pedaço de código no arquivo gerado. Como eu disse: &lt;strong&gt;placeholders não são compilados&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Então, por agora, esse placeholder é totalmente inútil. Você não consegue fazer qualquer uso dele a não ser que você veja o &lt;code&gt;@extend&lt;/code&gt;. Um &lt;code&gt;@extend&lt;/code&gt; tem como objetivo herdar as propriedades de um seletor CSS / SCSS placeholder. Aqui como usá-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.container {
  @extend %center;
}
&lt;/pre&gt;

&lt;p&gt;Ao fazer isso, o arquivo SASS vai pegar o conteúdo do placeholder &lt;code&gt;%center&lt;/code&gt; e aplicá-lo no &lt;code&gt;.container&lt;/code&gt; (mesmo que isso não aconteça exatamente assim &amp;#8211; mas isso não é importante agora). Como eu disse, você também pode &lt;em&gt;estender&lt;/em&gt; seletores CSS já existentes (além de placeholders SCSS) dessa maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;.table-zebra {
  @extend .table;

  tr:nth-of-type(even) {
    background: rgba(0,0,0,.5);
  }
}
&lt;/pre&gt;

&lt;p&gt;Esse é um caso muito comum para o uso do &lt;code&gt;@extend&lt;/code&gt;. Nesse caso, pedimos para a classe &lt;code&gt;.table-zebra&lt;/code&gt; se comportar exatamente como a classe &lt;code&gt;.table&lt;/code&gt; e então adicionamos as regras específicas da classe &lt;code&gt;.table-zebra&lt;/code&gt;. &lt;em&gt;Estender&lt;/em&gt; seletores é bastante conveniente quando você desenvolve seu site ou aplicação em componentes modulares.&lt;/p&gt;

&lt;h2 id=&#34;qual-utilizar-1&#34;&gt;Qual utilizar?&lt;/h2&gt;

&lt;p&gt;Então, a pergunta permanece: o que você deve usar? Bem, como tudo em nossa área: &lt;strong&gt;depende&lt;/strong&gt;. Depende do contexto e, em uma outra análise, do que você está querendo fazer.&lt;/p&gt;

&lt;p&gt;O melhor conselho seria: se você precisa de variáveis, utilize o mixin. Caso contrário, use o placeholder. Há duas razões para isso:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primeiro, você não pode usar variáveis em um placeholder. Na verdade, até pode, mas você não consegue &lt;em&gt;passar&lt;/em&gt; uma variável em um placeholder para gerar um conteúdo específico de CSS, como você faria em um mixin.&lt;/li&gt;
&lt;li&gt;Segundo, a forma como o SASS lida com os mixins, os torna muito incovenientes quando você os utiliza sem variáveis contextuais. Simplificando: o SASS vai duplicar a saída de um mixin toda vez que você o utilizá-lo, resultando não apenas em CSS duplicado, mas também em uma folha de estilos maior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considere o primeiro exemplo desse artigo:&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;@mixin center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.container {
  @include center;
}

.image-cover {
  @include center;
}
&lt;/pre&gt;

&lt;p&gt;O CSS compilado seria esse:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.image-cover {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;Observou o CSS duplicado? Ele não é tão prejudicial se forem apenas três linhas duplicadas, mas se você tiver muitos mixins que são usados várias vezes em um projeto, essas três linhas podem facilmente se tornarem 300. E se reformularmos nosso exemplo, só que dessa vez utilizando o placeholder?&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.container {
  @extend %center;
}

.image-cover {
  @extend %center;
}
&lt;/pre&gt;

&lt;p&gt;Agora, esse é o CSS gerado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container, .image-cover {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
&lt;/pre&gt;

&lt;p&gt;Muito melhor! A compilação leva vantagem &lt;a href=&#34;http://reference.sitepoint.com/css/selectorgrouping&#34;&gt;agrupando seletores&lt;/a&gt;, sem nenhum estilo repetido. Assim, sempre que você quiser evitar a escrever as mesmas propriedades diversas vezes, sabendo que elas não mudarão, é uma boa idéia &lt;em&gt;estender&lt;/em&gt; um placeholder. Isso resultará em um código CSS compilado muito mais limpo.&lt;/p&gt;

&lt;p&gt;Por outro lado, se você precisa escrever as mesmas propriedades em vários lugares mas com valores diferentes (tamanho, cores, etc), um mixin é o melhor caminho a seguir. Agora se você possui ambos, um grupo de valores fixos e outro de valores variáveis, você deve tentar usar uma combinação dos dois.&lt;/p&gt;

&lt;pre class=&#34;lang-scss&#34;&gt;%center {
  margin-left: auto;
  margin-right: auto;
  display: block;
}

@mixin skin($color, $size) {
  @extend %center;
  background: $color;
  height: $size;
}

a { @include skin(pink, 10em) }
b { @include skin(blue, 90px) }
&lt;/pre&gt;

&lt;p&gt;Neste caso, o mixin está &lt;em&gt;estendendo&lt;/em&gt; o placeholder para os valores fixos em vez de jogá-los diretamente em seu corpo. Isso gera um CSS mais limpo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a, b {
  margin-left: auto;
  margin-right: auto;
  display: block;
}

a {
  background: pink;
  height: 10em;
}

b {
  background: blue;
  height: 90px;
}
&lt;/pre&gt;

&lt;h2 id=&#34;conclusão-1&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;É isso. Espero ter deixado claro não só o que são mixins e placeholders, mas também quando você deve usá-los e qual os efeitos sobre o CSS compilado.&lt;/p&gt;

&lt;p&gt;Se você tiver alguma coisa a acrescentar sobre suas experiências com essas &lt;em&gt;features&lt;/em&gt; dos pré-processadores de CSS, sinta-se livre para compartilhar nos comentários.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do]&lt;a href=&#34;http://www.sitepoint.com/sass-mixin-placeholder/&#34;&gt;4&lt;/a&gt; escrito pelo &lt;a href=&#34;https://twitter.com/HugoGiraudel&#34; title=&#34;Perfil do twitter&#34;&gt;Hugo Giraudel&lt;/a&gt; em 30 de janeiro de 2014.&lt;/p&gt;

&lt;p&gt;Tradução autorizada pelo &lt;a href=&#34;http://www.sitepoint.com/&#34;&gt;SitePoint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Qualquer erro ou sugestão de melhoria na tradução, é bem vinda! 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Estilizar e formatar placeholder de inputs</title>
      <link>https://tableless.github.io/hugo-public/estilizar-e-formatar-placeholder-de-inputs/</link>
      <pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/estilizar-e-formatar-placeholder-de-inputs/</guid>
      <description>&lt;p&gt;O atributo &lt;strong&gt;placeholder&lt;/strong&gt; foi uma das maravilhas herdadas do HTML5. Eu me lembro de todas as gambiarras em Javascript e CSS que fazíamos para simular o que o atributo placeholder faz tão facilmente.&lt;/p&gt;

&lt;p&gt;O atributo placeholder é uma pequena dica, uma pequena frase, uma palavra, que tem o intuito de ajudar o usuário a entender como ele deve preencher aquele formulário. Entenda que e o placeholder NÃO deve ser usado como alternativa para a LABEL. Ou seja, aquela prática de colocar um &lt;strong&gt;display: none&lt;/strong&gt; nas labels e deixar apenas o placeholder visível não é legal. Também não é aconselhável ter uma descrição gigante. Para isso, use o atributo TITLE.&lt;/p&gt;

&lt;p&gt;Como esse atributo simplesmente insere um texto contextual no campo de formulário, muitos devs acham que não há maneira de formatá-lo, trocando cor, tamanho, font e etc&amp;#8230; Mas há! E é bem simples. Infelizmente você ainda precisa usar prefixos para funcionar, mas logo mais, quem sabe, não será mais necessário.&lt;/p&gt;

&lt;p&gt;Para formatar o atributo placeholder dos campos de formulários e textareas, basta manipular a pseudo-class ::placeholder. Não me perguntem por que é uma pseudo classe não e um pseudo elemento. Mas isso é só um detalhe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dica:&lt;/strong&gt; Eu poderia ter agrupado os seletores pra facilitar a leitura, o problema é que se um dos browsers não reconhece um dos seletores, ele acabam invalidando o grupo inteiro, aí nada funcionaria. Nesse caso a solução é colocar separado mesmo.&lt;/p&gt;

&lt;p&gt;Veja a &lt;a href=&#34;http://developers.whatwg.org/common-input-element-attributes.html#the-placeholder-attribute&#34;&gt;documentação oficial&lt;/a&gt; direto do WHATWG.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Geração de conteúdo estático via CSS</title>
      <link>https://tableless.github.io/hugo-public/geracao-estatica-de-conteudo-via-css/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/geracao-estatica-de-conteudo-via-css/</guid>
      <description>

&lt;p&gt;A Propriedade &lt;code&gt;content&lt;/code&gt; cria um conteúdo estático utilizando os pseudo-elementos &lt;code&gt;::after&lt;/code&gt; e &lt;code&gt;::before&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Só para esclarecer: o W3C determinou que pseudo-elementos usem sempre &lt;strong&gt;::&lt;/strong&gt; em vez de apenas dois pontos &lt;strong&gt;:&lt;/strong&gt; que é para diferenciar das pseudo-classes. Por isso não fique intrigado caso os exemplos usarem &lt;strong&gt;::&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;relembrando&#34;&gt;Relembrando&lt;/h3&gt;

&lt;p&gt;No CSS existe a possibilidade de você inserir um elemento de mentira (pseudo-elemento) em objetos no HTML. Estes elementos pode te auxiliar em diversos momentos do desenvolvimento, prevenindo a criação de elementos HTML vazios para produzir algum detalhe do layout que possa se misturar com o conteúdo real.&lt;/p&gt;

&lt;p&gt;Quem nunca teve que criar um span vazio no começo ou no final de um elemento para produzir uma seta, um background decorativo ou qualquer outro detalhe? Usar os pseudo-elementos funciona como um span vazio, só que melhor, por que não é gerado lixo no HTML.&lt;/p&gt;

&lt;p&gt;Abaixo você vê alguns exemplos de como podemos melhorar a utilização dessa vantagem.&lt;/p&gt;

&lt;h3 id=&#34;valores-da-propriedade&#34;&gt;Valores da propriedade&lt;/h3&gt;

&lt;p&gt;A propriedade &lt;code&gt;content&lt;/code&gt; pode ter os seguintes valores:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;none, normal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O conteúdo não vai ser gerado.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;string&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uma string de texto normal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;url()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Aqui ela te permite inserir imagens de fontes externas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;counter()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Aqui inserimos contadores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;attr(attribute)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Aqui permitimos pegar o valor de um determinado atributo do elemento.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;open-quote, close-quote, no-open-quote, no-close-quote&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Gera automaticamente marcações de aspas.&lt;/p&gt;

&lt;p&gt;Lembrando que a propriedade &lt;strong&gt;content&lt;/strong&gt; só pode ser usada nos pseudo-elementos &lt;code&gt;::after&lt;/code&gt; ou &lt;code&gt;::before&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;string&#34;&gt;String&lt;/h3&gt;

&lt;p&gt;Vamos gerar um texto simples no início ou no fim do elemento.&lt;pre class=&#34;lang-html&amp;quot&gt; &lt;h1&gt;T&amp;iacute;tulo&lt;/h1&gt; &lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Até aqui sem segredo, fizemos um título em HTML. YEAH!&lt;/p&gt;

&lt;p&gt;Imagine agora que você queira inserir neste título algum conteúdo no início ou no final dele. Imagine que você queira inserir no começo de todos os títulos, algum conteúdo&amp;#8230; Por exemplo, todos os títulos devem começar com a palavra &amp;#8220;Seção: &amp;#8220;. Em vez de colocar direto no HTML, podemos colocar via CSS, assim:&lt;/p&gt;

&lt;p&gt;Claro que se esse fosse um caso real, muito provavelmente eu colocaria a palavra direto no HTML. Mas vai que você precise usar este texto em vários lugares, e em algum destes lugares é necessário incluir um prefixo nos títulos? Esta é A solução para este problema (e outros).&lt;/p&gt;

&lt;p&gt;Mas suponha que não vai ser usado em tantos lugares assim e você precisa inserir um traço, por exemplo, no início dos títulos.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1::before {
    content: &#34;- &#34;;
}
&lt;/pre&gt;

&lt;p&gt;Esse traço não seria muito interessante se fosse colocado direto no HTML. Os leitores de tela o leriam, os sistemas de busca indexariam o título com o traço e etc&amp;#8230; Ele não é um conteúdo que agrega informação, é puramente para organizar visualmente os títulos.&lt;/p&gt;

&lt;h3 id=&#34;url&#34;&gt;url()&lt;/h3&gt;

&lt;p&gt;Agora, imagine que você queira inserir uma imagem, como uma seta, nos ítens de uma lista, por exemplo.&lt;/p&gt;

&lt;h3 id=&#34;counter&#34;&gt;counter()&lt;/h3&gt;

&lt;p&gt;Este é um dos meus prediletos. Você pode inserir contadores automáticos nos elementos. Imagine que você queira colocar no final de cada título o número do título. Como abaixo:&lt;/p&gt;

&lt;p&gt;As propriedades usadas ali são as &lt;code&gt;counter-increment&lt;/code&gt; e a &lt;code&gt;counter()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Elas funcionam assim: coloquei a propriedade &lt;strong&gt;counter-increment&lt;/strong&gt; com o valor &lt;strong&gt;numero-do-titulo&lt;/strong&gt;. Esse valor é como se fosse uma variável em todos os elementos &lt;code&gt;h1&lt;/code&gt;. Toda vez que o browser renderizar um H1, ele pegará essa variável (&lt;strong&gt;numero-do-titulo&lt;/strong&gt;) que eu defini e incrementará o valor dela.&lt;/p&gt;

&lt;p&gt;No pseudo-elemento &lt;code&gt;:after&lt;/code&gt; de cada título, eu exibi o valor de contador daquela variável com o &lt;strong&gt;counter(numero-do-titulo)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Muito simples, hein?&lt;/p&gt;

&lt;p&gt;Dá para fazer um post inteiro com essa propriedade, mostrando suas variações e propriedades que funcionam conjuntamente com ela.&lt;/p&gt;

&lt;h3 id=&#34;attr-attribute&#34;&gt;attr(attribute)&lt;/h3&gt;

&lt;p&gt;Usando o valor &lt;code&gt;attr(attribute)&lt;/code&gt; eu consigo exibir o valor de algum atributo do elemento nos pseudo-elementos ::before e ::after. Muito simples também. Suponha que você queira mostrar ao lado de cada link o endereço do próprio link. O resultado é este:&lt;/p&gt;

&lt;h3 id=&#34;formatando-com-css&#34;&gt;Formatando com CSS&lt;/h3&gt;

&lt;p&gt;O mais legal é que você pode formatar com CSS os elementos ::after e ::before como se fossem elementos do HTML, usando as propriedades normais que já usamos diariamente. Veja o exemplo acima com os endereços dos links formatados:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fazendo um slide menu mobile – sem plugin</title>
      <link>https://tableless.github.io/hugo-public/fazendo-um-slide-menu-mobile-sem-plugin/</link>
      <pubDate>Mon, 30 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/fazendo-um-slide-menu-mobile-sem-plugin/</guid>
      <description>

&lt;p&gt;Vou ensinar o básico para você que quer fazer um slide menu para mobile, isso quer dizer que você vai ter &lt;strong&gt;pouquíssimo&lt;/strong&gt; javascript. Por isso não vai ter swipe para fazer o menu aparecer.&lt;/p&gt;

&lt;h2 id=&#34;o-resultado&#34;&gt;O resultado&lt;/h2&gt;

&lt;p&gt;O resultado é bastante simples: você quer um menu como os apps nativos, daqueles que o menu fica escondido na esquerda e quando há um clique naqueles três &amp;#8220;risquinhos&amp;#8221; o menu sai da esquerda e vai para a direita. Geralmente, até a atualização do iOS7, o menu empurrava o conteúdo principal para o lado. Vamos fazer essa versão!&lt;/p&gt;

&lt;p&gt;Veja aqui o resultado final.&lt;/p&gt;

&lt;p data-height=&#34;401&#34; data-theme-id=&#34;1482&#34; data-slug-hash=&#34;ADnfr&#34; data-user=&#34;diegoeis&#34; data-default-tab=&#34;result&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/diegoeis/pen/ADnfr&#39;&gt;Slide menu 3&lt;/a&gt; by Diego Eis (&lt;a href=&#39;http://codepen.io/diegoeis&#39;&gt;@diegoeis&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;O código HTML pode ser feito de várias formas. O mais fácil é se você conseguir fazer uma versão mobile e desktop usando a mesma estrutura HTML para não precisar fazer ajustes malucos. O formato mais básico que você pode fazer é tirando o MENU de dentro do header, ficando com a estrutura nessa ordem: HEADER, MENU, MAIN. Como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
    &amp;lt;h1&amp;gt;LOGO&amp;lt;/h1&amp;gt;
    &amp;lt;input type=&#34;text&#34; value=&#34;busca&#34;&amp;gt;
        &amp;lt;span class=&#34;menu-anchor&#34;&amp;gt;Menu&amp;lt;/span&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;menu&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Produtos&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Servi&amp;ccedil;os&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Sobre&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Contato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/menu&amp;gt;

&amp;lt;section class=&#34;main&#34;&amp;gt;
   &amp;lt;p&amp;gt;Conte&amp;uacute;do do site&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Lembrando que se você não se sentir à vontade com essa estrutura, faça modificações para manter do jeito que você quer. Isso vai exigir adaptações também no CSS. Essa estrutura te facilita as coisas, embora danifique um pouquinho a semântica.&lt;/p&gt;

&lt;p&gt;Aquele SPAN ali é necessário. Você pode inserí-lo via Javascript em um mundo ideal, assim o código html original não fica tão sujo. Para não complicarmos este tutorial, vamos deixar ele direto no html, ok?&lt;/p&gt;

&lt;h2 id=&#34;o-javascript&#34;&gt;O Javascript&lt;/h2&gt;

&lt;p&gt;Coisa simples. Pudim de leite. Mamão com açúcar. Você não fará nada complexo, só precisa apenas incluir uma classe da tag HTML (ou body se preferir) para sabermos quando o menu está ativo. O código abaixo resolve bem.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.menu-anchor&#39;).on(&#39;click touchstart&#39;, function(e){
    $(&#39;html&#39;).toggleClass(&#39;menu-active&#39;);
    e.preventDefault();
});
&lt;/pre&gt;

&lt;p&gt;Na primeira linha capturamos o clique no elemento &lt;strong&gt;.menu-anchor&lt;/strong&gt;, que é o botão que terá os 3 risquinhos tradicionais. Note que eu também coloquei um outro evento para ser capturado chamado &lt;strong&gt;touchstart&lt;/strong&gt;. Este evento detecta quando o touch inicia na tela do aparelho. O &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent&#34;&gt;Javascript já entende esse evento&lt;/a&gt; nativamente. É interessante que ele esteja ali, para que os mobiles tenham uma performance e receptividade melhor. Geralmente com &lt;a href=&#34;https://www.google.com.br/search?client=safari&amp;amp;rls=en&amp;amp;q=click+mobile+delay&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;gws_rd=cr&amp;amp;ei=mFhHUsPyIpSI9ATun4HwDg&#34;&gt;o click o Safari Mobile tem um delay de 300ms&lt;/a&gt; para identificar a ação e só depois desse tempo ele executa. Com o &lt;strong&gt;touchstart&lt;/strong&gt; previnimos isso, fazendo-o executar a função assim que o touch iniciar. É necessário ter o click também para contemplarmos aparelhos que usam ponteiros, como o mouse. Aparelhos que suportam ponteiros e touch estão se popularizando desde o lançamento do Windows 8.&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Agora iniciamos a mágica do CSS. Suponha que você já tenha o layout pronto, posicionando o menu onde ele deveria ficar quando aberto. Como esse exemplo:&lt;/p&gt;

&lt;p data-height=&#34;375&#34; data-theme-id=&#34;0&#34; data-slug-hash=&#34;pCiah&#34; data-user=&#34;diegoeis&#34; data-default-tab=&#34;result&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/diegoeis/pen/pCiah&#39;&gt;pCiah&lt;/a&gt; by Diego Eis (&lt;a href=&#39;http://codepen.io/diegoeis&#39;&gt;@diegoeis&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Note que o menu ainda está em cima do HEADER e do MAIN. Vamos então deslocá-lo de forma que ele fique escondido, fora do viewport. Assim que o script acima for executado e inserir a classe &lt;strong&gt;menu-active&lt;/strong&gt; no HTML, você muda a posição do menu, fazendo-o reaparecer na posição original.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Simuladores ajudam muito, mas só bata o martelo se você já tiver testado em alguns aparelhos reais, só assim você vai ter certeza do tamanho da tela, utilização real, performance e outros ajustes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sua primeira reação pode ser essa: &amp;#8220;é bico: basta fazer uma jogadkmha com position, manipulando o valor da propriedade left e pronto&amp;#8221;. Aí você testa em tudo quanto é simulador (eu uso o nativo do iPhone no Mac) e vê que tudo funciona bem. O código fica mais ou menos assim:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Não esqueça de usar os prefixos de browser nas propriedades transition e transform&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* posicionando pra fora do viewport */
.menu {
   left: -220px;
   transition: left .25s linear;
}

/* quando o script inserir a classe, nós retornamos o menu para a posição original */
.menu-active .menu {
   left: 0;
}
&lt;/pre&gt;

&lt;p&gt;Mas aí você testa em um aparelho de verdade e vê que a animação tem um lag maldito. O problema é que fazer animação com position é uma desgraça! Quando animamos os valores de position do CSS, há uma carga de processamento muito grande do browser para fazer tudo aqui acontecer. Você só percebe a olho nu quando testa direto nos aparelhos. E aqui vai outra dica: use sempre aparelhos para testar suas versões. Simuladores ajudam muito, mas só bata o martelo se você já tiver testado em alguns aparelhos reais, só assim você vai ter certeza do tamanho da tela, utilização real, performance e outros ajustes.&lt;/p&gt;

&lt;h3 id=&#34;css-repainting&#34;&gt;CSS Repainting&lt;/h3&gt;

&lt;p&gt;Se você não leu ainda o estudo que o Paul Irish fez &lt;a href=&#34;http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/&#34;&gt;sobre movimentar elementos usando translate em vez de position, vá agora lá e leia&lt;/a&gt;. Ele também comenta que o &lt;a href=&#34;http://css-tricks.com/tale-of-animation-performance/&#34;&gt;Chris Coyier fez um estudo antes também&lt;/a&gt;. Estou preparando um artigo sobre o assunto que logo mais será publicado aqui no Tableless.&lt;/p&gt;

&lt;p&gt;Quando você posiciona qualquer elemento em um determinado lugar da tela utilizando coordenadas em position, o browser redenha aquele elemento naquela coordenada que você definiu. Quando você faz uma animação, onde você muda a coordenada seguidamente, o browser redesenha aquele elemento pixel por pixel durante toda a animação. Em um ou outra animação no desktop fica difícil ver a olho nu a força que o browser está fazendo. Mas quando usamos o inspector e monitoramos os frames, você percebe que o browser passa muito tempo redesenhando o elemento na tela, pixel por pixel, passo a passo durante toda a animação.&lt;/p&gt;

&lt;p&gt;No inspector você pode perceber exatamente o que browser faz quando vai na parte de TIMELINE &amp;gt; FRAME, percebe o processo executado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/09/Screen-Shot-2013-09-29-at-8.40.25-PM.png&#34; alt=&#34;Screen Shot 2013-09-29 at 8.40.25 PM&#34; width=&#34;949&#34; height=&#34;432&#34; class=&#34;alignnone size-full wp-image-39086&#34; srcset=&#34;uploads/2013/09/Screen-Shot-2013-09-29-at-8.40.25-PM.png 949w, uploads/2013/09/Screen-Shot-2013-09-29-at-8.40.25-PM-329x149.png 329w, uploads/2013/09/Screen-Shot-2013-09-29-at-8.40.25-PM-588x267.png 588w, uploads/2013/09/Screen-Shot-2013-09-29-at-8.40.25-PM-660x300.png 660w&#34; sizes=&#34;(max-width: 949px) 100vw, 949px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Quando usamos o top/left, o browser leva um tempo muito grande para redesenhar cada frame da animação, o que resulta em uma animação ruim, nada suave. Se o elemento utiliza muitos detalhes como sombras, bordas, transparências e etc, o browser consome muito processamento para gerar todos esses efeitos. Se há uma sombra atrás do elemento por exemplo, o browser tem que calcular todo o gradiente semi-transparente que essa sombra gera com o background da página a todo momento.&lt;/p&gt;

&lt;p&gt;Ao fazermos a animação usando o translate da propriedade transform do CSS3, todo esse cálculo é feito diretamente pela GPU, em uma linha de processamento própria chamada RenderLayer, usando a placa de vídeo do aparelho para calcular tudo isso. Qualquer transformação 2D, 3D, mudanças de opacidade e tudo mais é executado pela GPU do dispositivo, fazendo uma animação mais suave.&lt;/p&gt;

&lt;p&gt;Veja uma comparação abaixo. Do lado esquerdo é uma animação usando posicionamento normal, com absolute, top/left. Do lado direito é usando o CSS Transform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/09/timeline-frames-macbook1.png&#34; alt=&#34;timeline-frames-macbook1&#34; width=&#34;720&#34; height=&#34;193&#34; class=&#34;alignnone size-full wp-image-39087&#34; srcset=&#34;uploads/2013/09/timeline-frames-macbook1.png 720w, uploads/2013/09/timeline-frames-macbook1-329x88.png 329w, uploads/2013/09/timeline-frames-macbook1-588x157.png 588w, uploads/2013/09/timeline-frames-macbook1-660x176.png 660w&#34; sizes=&#34;(max-width: 720px) 100vw, 720px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As barras verdes indicam o quanto o elemento foi redesenhado na tela.&lt;/p&gt;

&lt;p&gt;Se você ainda não parou pra entender essa ferramenta do inspector, me faça um favor e vai lá dar uma olhadinha. No Chrome é melhor.&lt;/p&gt;

&lt;h3 id=&#34;animando-as-coisas-com-translate&#34;&gt;Animando as coisas com translate&lt;/h3&gt;

&lt;p&gt;Se você não sabe ainda o que é o translate, sugiro que pare aqui e &lt;a href=&#34;http://tableless.com.br/css-transforms/&#34;&gt;leia agora esse artigo&lt;/a&gt;. Agora que você sabe o básico sobre a performance do translate e top/left, vamos voltar à nossa programação normal. Você vai precisar mover 3 elementos: o header, o main e o menu. O HEADER e o MAIN começarão com o valor inicial de 0, obviamente por que eles estarão em seus lugares originais, o código fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/*
   Essa é a posição original do HEADER e do MAIN
*/
header, .main {
    -webkit-transform: translateX(0);
}
&lt;/pre&gt;

&lt;p&gt;Agora temos que colocar o MENU para fora da tela, essa vai se a posição inicial dele. O código fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/*
   Aqui você esconde o menu para fora da tela 
   O valor é exatamente a largura da sidebar
*/
menu {
    transform: translateX(-220px);
}
&lt;/pre&gt;

&lt;p&gt;O valor ali é exatamente o valor da largura do MENU. E esse será o valor que iremos colocar no translate final do HEADER e do MAIN.&lt;/p&gt;

&lt;p&gt;Lembra-se do processo? Quando clicarmos nos 3 risquinhos, o javascript adiciona a classe &lt;strong&gt;menu-active&lt;/strong&gt; na tag HTML. Quando houver essa classe, o HEADER e o MAIN tem o valor do translate alterado, empurrando-os para a direta. O MENU também terá seu translate alterado, para o valor 0, fazendo-o voltar para a tela. O código mostrando essas diferenças é o que segue abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/*
   Com a classe menu-active na tag HTML
*/
.menu-active menu {
    transform: translateX(0);
}

.menu-active header, 
.menu-active .main {
    transform: translateX(220px);
}
&lt;/pre&gt;

&lt;p&gt;Maravilha! Veja como está agora sem animação:&lt;/p&gt;

&lt;p data-height=&#34;393&#34; data-theme-id=&#34;0&#34; data-slug-hash=&#34;kBmDJ&#34; data-user=&#34;diegoeis&#34; data-default-tab=&#34;result&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/diegoeis/pen/kBmDJ&#39;&gt;Slide menu 2&lt;/a&gt; by Diego Eis (&lt;a href=&#39;http://codepen.io/diegoeis&#39;&gt;@diegoeis&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Vamos inserir agora a animação. Usaremos para isso a propriedade transition do CSS3. Se você não conhece essa propriedade, leia &lt;a href=&#34;http://tableless.com.br/transition-e-animation/&#34;&gt;esse&lt;/a&gt;, &lt;a href=&#34;http://tableless.com.br/introducao-ao-css-animation/&#34;&gt;esse&lt;/a&gt; e &lt;a href=&#34;http://tableless.com.br/introducao-ao-css-animation/&#34;&gt;esse&lt;/a&gt; artigo para entender melhor.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/*
    Aqui você esconde o menu para fora da tela 
    O valor é exatamente a largura da sidebar
*/
menu {
    transform: translateX(-220px);
    transition: all .25s linear;
}

/*
    Essa é a posição original do HEADER e do MAIN
*/
header, .main {
    transform: translateX(0);
    transition: all .25s linear;
}
&lt;/pre&gt;

&lt;p&gt;Veja o resultado final com animação:&lt;/p&gt;

&lt;p data-height=&#34;401&#34; data-theme-id=&#34;1482&#34; data-slug-hash=&#34;ADnfr&#34; data-user=&#34;diegoeis&#34; data-default-tab=&#34;result&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/diegoeis/pen/ADnfr&#39;&gt;Slide menu 3&lt;/a&gt; by Diego Eis (&lt;a href=&#39;http://codepen.io/diegoeis&#39;&gt;@diegoeis&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;E eu acho que é só. Se quiser ver direto no seu aparelho, visite este endereço: &lt;a href=&#34;http://cdpn.io/ADnfr&#34;&gt;http://cdpn.io/ADnfr&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elementos de interface utilizando apenas CSS3</title>
      <link>https://tableless.github.io/hugo-public/elementos-de-interface-utilizando-apenas-css3/</link>
      <pubDate>Thu, 09 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elementos-de-interface-utilizando-apenas-css3/</guid>
      <description>

&lt;p&gt;Se por um lado está na hora de você &lt;a href=&#34;http://tableless.com.br/criando-um-plugin-javascript-sem-jquery/&#34;&gt;parar de usar jQuery para tudo e investir mais em códigos JavaScript&lt;/a&gt;, por outro já é possível criar elementos animados e interativos utilizando apenas CSS3.&lt;/p&gt;

&lt;p&gt;É claro que você vai precisar abrir mão de efeitos em navegadores antigos (ou, na maioria dos casos, da implementação inteira). É claro também que as implementações são até certo ponto limitadas em comparação a plugins e bibliotecas JavaScript, mas dão um show em performance e otimização.&lt;/p&gt;

&lt;p&gt;Botões, galerias/slides, tabs e até mesmo o famoso efeito de lightbox já podem ser implementados sem nenhuma linha de JavaScript. Confira alguns exemplos.&lt;/p&gt;

&lt;h2 id=&#34;galeria&#34;&gt;Galeria&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://benschwarz.github.io/gallery-css/&#34; title=&#34;http://benschwarz.github.io/gallery-css/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/gallery-css.jpg&#34; alt=&#34;gallery-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37344&#34; srcset=&#34;uploads/2013/05/gallery-css.jpg 660w, uploads/2013/05/gallery-css-324x168.jpg 324w, uploads/2013/05/gallery-css-588x304.jpg 588w, uploads/2013/05/gallery-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://benschwarz.github.io/gallery-css/&#34; title=&#34;http://benschwarz.github.io/gallery-css/&#34;&gt;http://benschwarz.github.io/gallery-css/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ben Schwarz caprichou e lançou recentemente uma galeria utilizando apenas CSS3. A galeria permite controles personalizados e vem com uma animação para autoplay.&lt;/p&gt;

&lt;p&gt;Os slides podem conter qualquer conteúdo em HTML e o grande segredo por trás dessa galeria é o uso de âncoras (#) aliado a elementos com position:absolute e o pseudo-atributo &lt;a href=&#34;http://www.w3.org/TR/css3-selectors/#target-pseudo&#34; title=&#34;http://www.w3.org/TR/css3-selectors/#target-pseudo&#34;&gt;:target&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O pseudo atributo target é aplicado em elementos referenciados por uma âncora. Por exemplo, sua página tem um elemento section com o id &amp;#8220;section-1&amp;#8221; e um link para a âncora #section-1. Quando o usuário clicar nesse link, o CSS definido na regra section:target será aplicado no elemento #section-1.&lt;/p&gt;

&lt;h2 id=&#34;lightbox&#34;&gt;Lightbox&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tympanus.net/codrops/2011/12/26/css3-lightbox/&#34; title=&#34;http://tympanus.net/codrops/2011/12/26/css3-lightbox/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/lightbox-css.jpg&#34; alt=&#34;lightbox-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37345&#34; srcset=&#34;uploads/2013/05/lightbox-css.jpg 660w, uploads/2013/05/lightbox-css-324x168.jpg 324w, uploads/2013/05/lightbox-css-588x304.jpg 588w, uploads/2013/05/lightbox-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tympanus.net/codrops/2011/12/26/css3-lightbox/&#34; title=&#34;http://tympanus.net/codrops/2011/12/26/css3-lightbox/&#34;&gt;http://tympanus.net/codrops/2011/12/26/css3-lightbox/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O efeito Lightbox é um dos grandes responsáveis pela popularização do JavaScript e suas bibliotecas. Hoje já existem centenas de clones do original, com diferentes configurações e a versão CSS supera muitas dessas implementações em JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;menu-dropdown&#34;&gt;Menu Dropdown&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://line25.com/tutorials/how-to-create-a-pure-css-dropdown-menu&#34; title=&#34;http://line25.com/tutorials/how-to-create-a-pure-css-dropdown-menu&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/dropdown-css.jpg&#34; alt=&#34;dropdown-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37343&#34; srcset=&#34;uploads/2013/05/dropdown-css.jpg 660w, uploads/2013/05/dropdown-css-324x168.jpg 324w, uploads/2013/05/dropdown-css-588x304.jpg 588w, uploads/2013/05/dropdown-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://line25.com/tutorials/how-to-create-a-pure-css-dropdown-menu&#34; title=&#34;http://line25.com/tutorials/how-to-create-a-pure-css-dropdown-menu&#34;&gt;http://line25.com/tutorials/how-to-create-a-pure-css-dropdown-menu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Outro elemento bastante popular em JavaScript é o menu dropdown. Sua versão CSS usa apenas o atributo :hover dos links para exibir e esconder os múltiplos níveis de submenus.&lt;/p&gt;

&lt;p&gt;Ainda dá para usar algum tipo de transition ou animation para deixar o menu mais atraente. Quem se habilita? 🙂&lt;/p&gt;

&lt;h2 id=&#34;abas&#34;&gt;Abas&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sitepoint.com/css3-tabs-using-target-selector/&#34; title=&#34;http://www.sitepoint.com/css3-tabs-using-target-selector/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/tabs-css.jpg&#34; alt=&#34;tabs-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37346&#34; srcset=&#34;uploads/2013/05/tabs-css.jpg 660w, uploads/2013/05/tabs-css-324x168.jpg 324w, uploads/2013/05/tabs-css-588x304.jpg 588w, uploads/2013/05/tabs-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sitepoint.com/css3-tabs-using-target-selector/&#34; title=&#34;http://www.sitepoint.com/css3-tabs-using-target-selector/&#34;&gt;http://www.sitepoint.com/css3-tabs-using-target-selector/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E que tal uma interface separada por abas sem usar JavaScript? É isso que este tutorial do Sitepoint oferece, mais uma vez fazendo uso do atributo target.&lt;/p&gt;

&lt;h2 id=&#34;tooltip&#34;&gt;Tooltip&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://kushagragour.in/lab/hint/&#34; title=&#34;http://kushagragour.in/lab/hint/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/tooltip-css.jpg&#34; alt=&#34;tooltip-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37347&#34; srcset=&#34;uploads/2013/05/tooltip-css.jpg 660w, uploads/2013/05/tooltip-css-324x168.jpg 324w, uploads/2013/05/tooltip-css-588x304.jpg 588w, uploads/2013/05/tooltip-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kushagragour.in/lab/hint/&#34; title=&#34;http://kushagragour.in/lab/hint/&#34;&gt;http://kushagragour.in/lab/hint/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tooltips possuem dezenas de implementações utilizando JavaScript. Sua versão CSS3 usa e abusa dos pseudo atributos &lt;a href=&#34;http://www.w3.org/TR/css3-selectors/#gen-content&#34;&gt;:after e :before&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Uma nota importante: as transições nos atributos after e before só foram implementadas recentemente no Chrome (versão 26). Nada que impeça a tooltip de funcionar &amp;#8211; ela apenas será renderizada sem animações.&lt;/p&gt;

&lt;h2 id=&#34;botões&#34;&gt;Botões&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://hellohappy.org/css3-buttons/&#34; title=&#34;http://hellohappy.org/css3-buttons/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/buttons-css.jpg&#34; alt=&#34;buttons-css&#34; width=&#34;660&#34; height=&#34;342&#34; class=&#34;alignnone size-full wp-image-37342&#34; srcset=&#34;uploads/2013/05/buttons-css.jpg 660w, uploads/2013/05/buttons-css-324x168.jpg 324w, uploads/2013/05/buttons-css-588x304.jpg 588w, uploads/2013/05/buttons-css-598x310.jpg 598w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hellohappy.org/css3-buttons/&#34; title=&#34;http://hellohappy.org/css3-buttons/&#34;&gt;http://hellohappy.org/css3-buttons/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Não é só JavaScript que pode ser cortado &amp;#8211; também podemos parar de utilizar sprites para botões. Hoje em dia já é possível criar botões consistentes e interativos utilizando apenas CSS3.&lt;/p&gt;

&lt;p&gt;O designer Chad Mazzola mantém um repositório de botões &amp;#8220;que utilizam o markup mais simples possível&amp;#8221;. Este é um bom ponto de partida, mas os exemplos de botões utilizando apenas CSS são os mais fáceis de encontrar.&lt;/p&gt;

&lt;h2 id=&#34;evento-de-clique&#34;&gt;Evento de clique&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ryancollins.me/?p=1041&#34; title=&#34;http://www.ryancollins.me/?p=1041&#34;&gt;http://www.ryancollins.me/?p=1041&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esse último exemplo não é bem um elemento, mas sim uma aplicação do evento de clique utilizando o atributo active de um elemento. Com poucas linhas de código é possível exibir/esconder um menu ao clicar em um botão.&lt;/p&gt;

&lt;p&gt;E você, já deixou de fazer alguma coisa em JavaScript para implementar utilizando apenas CSS? Diz aí nos comentários!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>