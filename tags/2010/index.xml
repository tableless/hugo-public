<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2010 on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/2010/index.xml</link>
    <description>Recent content in 2010 on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/2010/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JQuery para produção de Layouts</title>
      <link>https://tableless.github.io/hugo-public/jquery-para-layouts/</link>
      <pubDate>Wed, 15 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/jquery-para-layouts/</guid>
      <description>

&lt;p&gt;O &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; tem me dado um importante suporte para aqueles problemas que o CSS não consegue resolver por falta de compatibilidade em alguns browsers e também para evitar sujar o código HTML com elementos dispensáveis, em ocasiões comuns como no caso da criação de bordas arredondadas.&lt;/p&gt;

&lt;p&gt;Nestes cenários, invarialmente temos que criar alguns elementos agregados que servirão para dar exclusivamente suporte visual para o layout.&lt;/p&gt;

&lt;p&gt;Não é bom que sujemos nosso HTML com código que não carregue significado semântico nenhum, mas em alguns casos, como ao fazer bordas arredondadas, a criação destes elementos é necessária. É nesse ponto que o &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; pode nos ajudar grandemente.&lt;/p&gt;

&lt;p&gt;Se você é desenvolvedor client-side, tenha em mente que você não precisa saber programar para aprender &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt;. Sua sintaxe é muito simples e pode salvar sua vida quando ocorre problemas de compatibilidade entre browsers. É o que veremos a seguir: como o &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; pode nos auxiliar em momentos da falta de suporte do CSS.&lt;/p&gt;

&lt;h3 id=&#34;criando-elementos-dinamicamente&#34;&gt;Criando elementos dinamicamente&lt;/h3&gt;

&lt;p&gt;Suponha que você tenha um botão simples, onde as bordas são arredondadas. Para facilitar nosso exemplo esse botão não terá altura variável, apenas largura. Eu poderia fazer duas imagens: uma imagem seria a borda da esquerda e a outra imagem a borda da da direita. Se fôssemos fazer com HTML e CSS puro, o código seria esse:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#&#34;&gt;texto do botão&lt;/a&gt;{.btn}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;O CSS:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;.btn {&lt;/p&gt;

&lt;p&gt;border-radius:10px;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Talvez eu teria que colocar um prefixo para o Frefox (-moz-) entender a borda arredondada, mas vamos simplificar nosso exemplo.&lt;/p&gt;

&lt;p&gt;Os IE7-8 não reconheceriam essa propriedade. Mas se seu cliente precisa de que o suporte seja estendido para esses browsers, não há outra escolha a não ser fazer as benditas bordas (ou qualquer outro problema) funcionar no IE.&lt;/p&gt;

&lt;p&gt;Uma maneira simples de ser feita é colocando um backgrounds diretamente no LINK, pode ser a borda da esquerda e em outro elemento definiríamos a borda da direita. Criar um elemento para que sua única função seja manter o padrão visual vai de encontro contra toda a ideia de semântica. Fazendo isso também misturamos aquela teoria de separação de formatação com informação. Mesmo assim essa a única solução. É aí que o &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; vem nos ajudar. O código HTML, caso fossemos criar um elemento extra, seria:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;a href=&#34;#&#34;&gt;texto do botão &lt;span class=&#34;borderdir&#34;&gt;&lt;/span&gt;&lt;/a&gt;{.btn}[/cc]&lt;/p&gt;

&lt;p&gt;Para mantermos a integridade do nosso HTML, criaremos esse elemento via &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; da seguinte forma utilizando a função &lt;a href=&#34;http://api.[JQuery][1].com/append/&amp;#8221;&gt;append&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript&amp;#8221;]$(document).ready(function(){&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.btn&amp;#8217;).append(&amp;#8216;&lt;span class=&#34;borderdir&#34; /&gt;&amp;#8216;);&lt;/p&gt;

&lt;p&gt;});[/cc]&lt;/p&gt;

&lt;p&gt;Já que estes elementos são cridos dinamicamente, os leitores de tela e os indexadores de busca não os leem, logo, o código HTML não fica poluído e você não perde com SEO. A manutenção fica simples de ser mantida e o HTML, se já estiver sob programação server-side não precisará ser modificado manualmente.&lt;/p&gt;

&lt;h3 id=&#34;escolhendo-elementos-específicos&#34;&gt;Escolhendo elementos específicos&lt;/h3&gt;

&lt;p&gt;Outro problema muito comum é a necessidade de ter que escolher elementos específicos no Layout sem ter que adicionar manualmente classes ou tendo que fazer uma condição maluca para ter que capturar tais elementos. Isso seria muito simples se utilizássemos o pseudo-elemento &lt;strong&gt;nth-child&lt;/strong&gt; do CSS. O &lt;strong&gt;nth-child&lt;/strong&gt; seleciona determinados elementos em uma árvore de elementos. Por exemplo, você tem uma lista e quer pegar o terceiro ítem da lista, você utilizaria algo assim:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]ul li:nth-child(3n) {&lt;/p&gt;

&lt;p&gt;color:red;&lt;/p&gt;

&lt;p&gt;}[/cc]&lt;/p&gt;

&lt;p&gt;O problema? Nada disso funciona nos IEs. Mas isso é extremamente útil e com &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; você pode adicionar uma classe nestes elementos para formatar com CSS.&lt;/p&gt;

&lt;p&gt;A Home deste site foi feita desta forma. O conteúdo foi criado com um simples LOOP do WordPress que joga o HTML do conteúdo em uma única página. Veja que cada um blocos de texto desta home é diferente. Sem poder utilizar o &lt;strong&gt;nth-child&lt;/strong&gt; eu utilizei a função &lt;a href=&#34;http://api.[JQuery][1].com/slice/&amp;#8221;&gt;slice&lt;/a&gt; do &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;$(document).ready(function(){&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.homeposts article&amp;#8217;).slice(1, 3).addClass(&amp;#8216;destaqueprincipal&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.homeposts article&amp;#8217;).slice(3, 6).addClass(&amp;#8216;destaquethird&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.homeposts article&amp;#8217;).slice(6, 10).addClass(&amp;#8216;destaques&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.homeposts article&amp;#8217;).slice(10, 12).addClass(&amp;#8216;chamadas&amp;#8217;);&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Por exemplo, note essa linha:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;$(document).ready(function(){&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.homeposts article&amp;#8217;).slice(1, 3).addClass(&amp;#8216;destaqueprincipal&amp;#8217;);&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Aqui eu digo que o primeiro, segundo e terceiro e &lt;strong&gt;elemento article&lt;/strong&gt; de &lt;strong&gt;.homeposts&lt;/strong&gt; terão uma classe adicional chamada &lt;em&gt;destaqueprincipal&lt;/em&gt;. E a mesma lógica foi aplicada para os elementos posteriores.&lt;/p&gt;

&lt;h3 id=&#34;utilizando-seletores-complexos&#34;&gt;Utilizando seletores complexos&lt;/h3&gt;

&lt;p&gt;Outro problema é a inserção de classes em elementos do mesmo gênero mas com funções diferentes, como os campos de formulários. Normalmente, quando produzimos um formulário de contato, por exemplo, precisamos diferenciar os inputs de texto, inputs de checkbox, inputs de radio, inputs de submit etc. Pode ser que estes inputs sejam criados dinamicamente pelo framework utilizado para auxiliar na programação back-end. Nesse caso não temos controle manual nenhum.&lt;/p&gt;

&lt;p&gt;No melhor dos mundos utilizaríamos &lt;a href=&#34;http://tableless.com.br/seletores-complexos-do-css&#34; title=&#34;Introdução aos Seletores complexos&#34;&gt;seletores complexos&lt;/a&gt; para aplicar um estilo específico para um dos elementos. A sintaxe em CSS ficaria mais ou menos assim:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;input[type=&amp;#8221;text&amp;#8221;] {&lt;/p&gt;

&lt;p&gt;border:1px solid gray;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;O código acima define uma borda preta para os elementos &lt;strong&gt;input&lt;/strong&gt; que tenham o atributo &lt;strong&gt;type&lt;/strong&gt; cujo valor seja &lt;strong&gt;text&lt;/strong&gt;. Você faria isso para cada um dos tipos dos inputs que você gostaria de formatar:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;input[type=&amp;#8221;text&amp;#8221;] {border:1px solid gray;}&lt;/p&gt;

&lt;p&gt;input[type=&amp;#8221;checkbox&amp;#8221;] {border:1px solid green;}&lt;/p&gt;

&lt;p&gt;input[type=&amp;#8221;submit&amp;#8221;] {border:1px solid red;}&lt;/p&gt;

&lt;p&gt;input[type=&amp;#8221;radio&amp;#8221;] {border:1px solid yellow;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Esse código pode não funcionar em &lt;span title=&#34;leia-se Internet Explorer&#34;&gt;alguns browsers&lt;/span&gt;, por isso faremos com a ajuda de &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O código é muito simples e na realidade não foge muito da sintaxe do CSS. Adicionaremos uma classe para cada um destes elementos possibilitando a estilização via CSS por meio dessa classe. O código ficaria assim:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;$(document).ready(function(){&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;input[type=&amp;#8221;text&amp;#8221;]&amp;#8217;).addClass(&amp;#8216;inputText&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;input[type=&amp;#8221;checkbox&amp;#8221;]&amp;#8217;).addClass(&amp;#8216;inputCheckbox&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;input[type=&amp;#8221;submit&amp;#8221;]&amp;#8217;).addClass(&amp;#8216;inputSubmit&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;input[type=&amp;#8221;radio&amp;#8221;]&amp;#8217;).addClass(&amp;#8216;inputRadio&amp;#8217;);&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Com as classes atribuídas, podemos temos controle total via CSS.&lt;/p&gt;

&lt;h3 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h3&gt;

&lt;p&gt;Estas pequenas dicas contribuem para soluções sustentáveis para seu código. Com um pouco de planejamento você conseguirá manter o controle total do seu código e um alto índice de compatibilidade com os browsers atuais no mercado. A diminuição de hacks no CSS também diminui bastante já que com uma mesma solução, você abrange até os browsers mais antigos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML5: Elemento AUDIO</title>
      <link>https://tableless.github.io/hugo-public/elemento-tag-audio/</link>
      <pubDate>Tue, 14 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elemento-tag-audio/</guid>
      <description>

&lt;p&gt;O elemento &lt;code&gt;audio&lt;/code&gt; do HTML5 representa um som ou um stream de áudio. Atributos como: &lt;code&gt;src, preload, autoplay, loop e controls&lt;/code&gt; podem ser utilizados em todos elementos de media, como o elemento &lt;code&gt;audio&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;formatos-suportados&#34;&gt;Formatos suportados&lt;/h3&gt;

&lt;p&gt;Os formatos de audio suportados são:&lt;/p&gt;

&lt;table class=&#34;reference&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34; border=&#34;1&#34; width=&#34;100%&#34;&gt;
  &lt;tr&gt;
    &lt;th width=&#34;20%&#34; align=&#34;left&#34;&gt;
      Formato
    &lt;/th&gt;
    
    &lt;th width=&#34;16%&#34; align=&#34;left&#34;&gt;
      IE 8
    &lt;/th&gt;
    
    &lt;th width=&#34;16%&#34; align=&#34;left&#34;&gt;
      Firefox 3.5
    &lt;/th&gt;
    
    &lt;th width=&#34;16%&#34; align=&#34;left&#34;&gt;
      Opera 10.5
    &lt;/th&gt;
    
    &lt;th width=&#34;16%&#34; align=&#34;left&#34;&gt;
      Chrome 3.0
    &lt;/th&gt;
    
    &lt;th width=&#34;16%&#34; align=&#34;left&#34;&gt;
      Safari 3.0
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ogg Vorbis
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      MP3
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Wav
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Como no caso dos vídeos, ainda é um problema termos um formato que funcione com sucesso em todos os browsers. Enquanto isso, para mantermos a compatibilidade precisamos servir diversos formatos.&lt;/p&gt;

&lt;h3 id=&#34;sintaxe&#34;&gt;Sintaxe&lt;/h3&gt;

&lt;p&gt;A sintaxe é muito simples:&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34;&gt;&amp;lt;audio src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.mp3&#34; controls=&#34;controls&#34;&gt;&amp;lt;/audio&gt;
&lt;/pre&gt;

&lt;p&gt;Colocando um conteúdo dentro da tag para que browsers que não suportam possam baixar este arquivo.&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34; line=&#34;1&#34;&gt;&amp;lt;audio src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.mp3&#34; controls=&#34;controls&#34;&gt;
   Você pode &lt;a href=&#34;http://www.publicdomain2ten.com/2010/09/louis-armstrong-all-his-stars-struttin-with-some-barbecue-mp3/&#34;&gt;baixar essa música gratuitamente no Public Domain 2Ten.&lt;/a&gt;
&amp;lt;/audio&gt;
&lt;/pre&gt;

&lt;p&gt;Suponha então que você tenha que servir dois tipos de formatos de audio para cobrir a maioria dos browsers:&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34;&gt;&amp;lt;audio controls=&#34;controls&#34;&gt;
  &amp;lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.ogg&#34; type=&#34;audio/ogg&#34; /&gt;
  &amp;lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.mp3&#34; type=&#34;audio/mpeg&#34; /&gt;
   Você pode &lt;a href=&#34;http://www.publicdomain2ten.com/2010/09/louis-armstrong-all-his-stars-struttin-with-some-barbecue-mp3/&#34;&gt;baixar essa música gratuitamente no Public Domain 2Ten.&lt;/a&gt;
&amp;lt;/audio&gt;
&lt;/pre&gt;

&lt;p&gt;Resultado:&lt;/p&gt;

&lt;p&gt;&lt;audio controls=&#34;controls&#34;&gt;&lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.ogg&#34; type=&#34;audio/ogg&#34; /&gt;&lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.mp3&#34; type=&#34;audio/mpeg&#34; /&gt;Você pode &lt;a href=&#34;http://www.publicdomain2ten.com/2010/09/louis-armstrong-all-his-stars-struttin-with-some-barbecue-mp3/&#34;&gt;baixar essa música gratuitamente no Public Domain 2Ten.&lt;/a&gt;&lt;/audio&gt;&lt;/p&gt;

&lt;p&gt;Se você entrar com o Internet Explorer, provavelmente ele mostrará a mensagem para baixar o arquivo que colocamos. 😉&lt;/p&gt;

&lt;h3 id=&#34;os-atributos-possíveis&#34;&gt;Os atributos possíveis&lt;/h3&gt;

&lt;table class=&#34;reference&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34; border=&#34;1&#34; width=&#34;100%&#34;&gt;
  &lt;tr&gt;
    &lt;th align=&#34;left&#34; width=&#34;20%&#34;&gt;
      Atributo
    &lt;/th&gt;
    
    &lt;th align=&#34;left&#34; width=&#34;20%&#34;&gt;
      Valor
    &lt;/th&gt;
    
    &lt;th align=&#34;left&#34; width=&#34;50%&#34;&gt;
      Descrição
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      autoplay
    &lt;/td&gt;
    
    &lt;td&gt;
      autoplay
    &lt;/td&gt;
    
    &lt;td&gt;
      Define que o audio começará a ser tocado assim que ele estiver pronto.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      controls
    &lt;/td&gt;
    
    &lt;td&gt;
      controls
    &lt;/td&gt;
    
    &lt;td&gt;
      Os controles serão mostrados.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      loop
    &lt;/td&gt;
    
    &lt;td&gt;
      loop
    &lt;/td&gt;
    
    &lt;td&gt;
      Define que o audio começará a ser tocado novamente quando terminar.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      preload
    &lt;/td&gt;
    
    &lt;td&gt;
      preload
    &lt;/td&gt;
    
    &lt;td&gt;
      Define que o audio será carregado enquanto a página é lida. Esse atributo é ignorado caso o atributo autoplay estiver definido.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      src
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;i&gt;url&lt;/i&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      URL do arquivo a ser tocado.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Você tem algum controle sobre o player que aparece no browser com CSS. Testando aqui, customizamos largura, altura, colocamos float e position. Por natureza ele é um elemento de bloco. Isso acontece também com os elemento sde vídeo. A graça disso tudo é que tanto o elemento de vídeo quanto o elemento de audio são tratados como elementos do HTML e não como plugins. Isso nos dá essa flexibilidade de customização via CSS, facilitando muito as coisas.&lt;/p&gt;

&lt;p&gt;O elemento &lt;code&gt;audio&lt;/code&gt; do HTML5 representa um som ou um stream de áudio. Atributos como: &lt;code&gt;src, preload, autoplay, loop e controls&lt;/code&gt; podem ser utilizados em todos elementos de media, como o elemento &lt;code&gt;audio&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;formatos-suportados-1&#34;&gt;Formatos suportados&lt;/h3&gt;

&lt;p&gt;Os formatos de audio suportados são:&lt;/p&gt;

&lt;table class=&#34;reference&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34; border=&#34;1&#34; width=&#34;100%&#34;&gt;
  &lt;tr&gt;
    &lt;th width=&#34;20%&#34; align=&#34;left&#34;&gt;
      Formato
    &lt;/th&gt;
    
    &lt;th width=&#34;16%&#34; align=&#34;left&#34;&gt;
      IE 8
    &lt;/th&gt;
    
    &lt;th width=&#34;16%&#34; align=&#34;left&#34;&gt;
      Firefox 3.5
    &lt;/th&gt;
    
    &lt;th width=&#34;16%&#34; align=&#34;left&#34;&gt;
      Opera 10.5
    &lt;/th&gt;
    
    &lt;th width=&#34;16%&#34; align=&#34;left&#34;&gt;
      Chrome 3.0
    &lt;/th&gt;
    
    &lt;th width=&#34;16%&#34; align=&#34;left&#34;&gt;
      Safari 3.0
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ogg Vorbis
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      MP3
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Wav
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;span class=&#34;marked&#34;&gt;Não&lt;/span&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Sim
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Como no caso dos vídeos, ainda é um problema termos um formato que funcione com sucesso em todos os browsers. Enquanto isso, para mantermos a compatibilidade precisamos servir diversos formatos.&lt;/p&gt;

&lt;h3 id=&#34;sintaxe-1&#34;&gt;Sintaxe&lt;/h3&gt;

&lt;p&gt;A sintaxe é muito simples:&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34;&gt;&amp;lt;audio src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.mp3&#34; controls&gt;&amp;lt;/audio&gt;
&lt;/pre&gt;

&lt;p&gt;Colocando um conteúdo dentro da tag para que browsers que não suportam possam baixar este arquivo.&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34;&gt;&amp;lt;audio src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.mp3&#34; controls=&#34;controls&#34;&gt;
   Você pode &lt;a href=&#34;http://www.publicdomain2ten.com/2010/09/louis-armstrong-all-his-stars-struttin-with-some-barbecue-mp3/&#34;&gt;baixar essa música gratuitamente no Public Domain 2Ten.&lt;/a&gt;
&amp;lt;/audio&gt;
&lt;/pre&gt;

&lt;p&gt;Suponha então que você tenha que servir dois tipos de formatos de audio para cobrir a maioria dos browsers:&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34;&gt;&amp;lt;audio controls&gt;
  &amp;lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.ogg&#34; type=&#34;audio/ogg&#34; /&gt;
  &amp;lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.mp3&#34; type=&#34;audio/mpeg&#34; /&gt;
   Você pode &lt;a href=&#34;http://www.publicdomain2ten.com/2010/09/louis-armstrong-all-his-stars-struttin-with-some-barbecue-mp3/&#34;&gt;baixar essa música gratuitamente no Public Domain 2Ten.&lt;/a&gt;
&amp;lt;/audio&gt;
&lt;/pre&gt;

&lt;p&gt;Resultado:&lt;/p&gt;

&lt;p&gt;&lt;audio controls&gt;&lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.ogg&#34; type=&#34;audio/ogg&#34; /&gt;&lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.mp3&#34; type=&#34;audio/mpeg&#34; /&gt;Você pode &lt;a href=&#34;http://www.publicdomain2ten.com/2010/09/louis-armstrong-all-his-stars-struttin-with-some-barbecue-mp3/&#34;&gt;baixar essa música gratuitamente no Public Domain 2Ten.&lt;/a&gt;&lt;/audio&gt;&lt;/p&gt;

&lt;p&gt;Se você entrar com o Internet Explorer, provavelmente ele mostrará a mensagem para baixar o arquivo que colocamos. 😉&lt;/p&gt;

&lt;h3 id=&#34;os-atributos-possíveis-1&#34;&gt;Os atributos possíveis&lt;/h3&gt;

&lt;table class=&#34;reference&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34; border=&#34;1&#34; width=&#34;100%&#34;&gt;
  &lt;tr&gt;
    &lt;th align=&#34;left&#34; width=&#34;20%&#34;&gt;
      Atributo
    &lt;/th&gt;
    
    &lt;th align=&#34;left&#34; width=&#34;20%&#34;&gt;
      Valor
    &lt;/th&gt;
    
    &lt;th align=&#34;left&#34; width=&#34;50%&#34;&gt;
      Descrição
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      autoplay
    &lt;/td&gt;
    
    &lt;td&gt;
      autoplay
    &lt;/td&gt;
    
    &lt;td&gt;
      Define que o audio começará a ser tocado assim que ele estiver pronto.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      controls
    &lt;/td&gt;
    
    &lt;td&gt;
      controls
    &lt;/td&gt;
    
    &lt;td&gt;
      Os controles serão mostrados.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      loop
    &lt;/td&gt;
    
    &lt;td&gt;
      loop
    &lt;/td&gt;
    
    &lt;td&gt;
      Define que o audio começará a ser tocado novamente quando terminar.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      preload
    &lt;/td&gt;
    
    &lt;td&gt;
      preload
    &lt;/td&gt;
    
    &lt;td&gt;
      Define que o audio será carregado enquanto a página é lida. Esse atributo é ignorado caso o atributo autoplay estiver definido.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      src
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;i&gt;url&lt;/i&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      URL do arquivo a ser tocado.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Você tem algum controle sobre o player que aparece no browser com CSS. Testando aqui, customizamos largura, altura, colocamos float e position. Por natureza ele é um elemento de bloco. Isso acontece também com os elemento sde vídeo. A graça disso tudo é que tanto o elemento de vídeo quanto o elemento de audio são tratados como elementos do HTML e não como plugins. Isso nos dá essa flexibilidade de customização via CSS, facilitando muito as coisas.&lt;/p&gt;

&lt;h3 id=&#34;caminho-das-pedras-para-customizar&#34;&gt;Caminho das pedras para customizar&lt;/h3&gt;

&lt;p&gt;Você pode criar seu próprio player se preferir. Você pode manipular os controles de som como PLAY, PAUSE, VOLUME com outros elementos do HTML. Isso facilita a customização do player caso você não queira utilizar o player padrão do browser. Se souber um pouco de Javascript, você já entenderá o que pode ser feito com o código abaixo.&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34;&gt;&lt;div class=&#34;controlsplayer&#34;&gt;
  &lt;button onclick=&#34;javascript: document.getElementById(&#39;player&#39;).play()&#34;&gt;Play&lt;/button&gt;
    &lt;button onclick=&#34;javascript: document.getElementById(&#39;player&#39;).pause()&#34;&gt;Pause&lt;/button&gt;
    &lt;button onclick=&#34;javascript: document.getElementById(&#39;player&#39;).volume += 0.1&#34;&gt;Aumenta Volume&lt;/button&gt;
    &lt;button onclick=&#34;javascript: document.getElementById(&#39;player&#39;).volume -= 0.1&#34;&gt;Diminui Volume&lt;/button&gt;
  
&lt;/div&gt;
&lt;/pre&gt;

&lt;p&gt;Teste abaixo:&lt;/p&gt;

&lt;p&gt;&lt;audio id=&#34;player&#34; controls&gt;&lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.ogg&#34; type=&#34;audio/ogg&#34; /&gt;&lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/LouisArmstrongAllHisStars-StruttinWithSomeBarbecue.mp3&#34; type=&#34;audio/mpeg&#34; /&gt;Você pode &lt;a href=&#34;http://www.publicdomain2ten.com/2010/09/louis-armstrong-all-his-stars-struttin-with-some-barbecue-mp3/&#34;&gt;baixar essa música gratuitamente no Public Domain 2Ten.&lt;/a&gt;&lt;/audio&gt;&lt;/p&gt;

&lt;div class=&#34;controlsplayer&#34; style=&#34;padding:20px;&#34;&gt;
  &lt;button onclick=&#34;javascript: document.getElementById(&#39;player&#39;).play()&#34;&gt;Play&lt;/button&gt;&lt;br /&gt; &lt;button onclick=&#34;javascript: document.getElementById(&#39;player&#39;).pause()&#34;&gt;Pause&lt;/button&gt;&lt;br /&gt; &lt;button onclick=&#34;javascript: document.getElementById(&#39;player&#39;).volume += 0.1&#34;&gt;Aumenta Volume&lt;/button&gt;&lt;br /&gt; &lt;button onclick=&#34;javascript: document.getElementById(&#39;player&#39;).volume -= 0.1&#34;&gt;Diminui Volume&lt;/button&gt;
&lt;/div&gt;

&lt;p&gt;Customizando estes botões com CSS e aprimorando o Javascript, você consegue fazer um player bem desenhado e que funciona em diversas plataformas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Templates e jQuery – parte 2</title>
      <link>https://tableless.github.io/hugo-public/templates-jquery-parte2/</link>
      <pubDate>Mon, 13 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/templates-jquery-parte2/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/templates-e-jquery-parte-1&#34;&gt;Na primeira parte&lt;/a&gt; deste artigo você conferiu uma introdução ao novo plugin .tmpl() que possibilita a utilização de templates para retornos e saídas de suas aplicações jQuery. O plugin certamente é um avanço considerável na organização de código &amp;#8211; é o JavaScript ficando cada vez mais profissional e robusto, abandonando a fama de ser uma simples linguagem de script, sem padrões.&lt;/p&gt;

&lt;p&gt;A forma mais básica de utilização do plugin .tmpl() é declarar seu template em uma variável e chamá-lo da seguinte forma:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var noticias = [&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;titulo : &amp;#8216;Notícia 1&amp;#8242;,&lt;/p&gt;

&lt;p&gt;data_publicacao : &amp;#8217;28/10/2010 20h31&amp;#8217;,&lt;/p&gt;

&lt;p&gt;chamada : &amp;#8216;Chamada da notícia 1&amp;#8217;,&lt;/p&gt;

&lt;p&gt;link : &amp;#8216;/noticia-1/&amp;#8217;,&lt;/p&gt;

&lt;p&gt;},&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;titulo : &amp;#8216;Notícia 2&amp;#8242;,&lt;/p&gt;

&lt;p&gt;data_publicacao : &amp;#8217;28/10/2010 20h32&amp;#8217;,&lt;/p&gt;

&lt;p&gt;chamada : &amp;#8216;Chamada da notícia 2&amp;#8217;,&lt;/p&gt;

&lt;p&gt;link : &amp;#8216;/noticia-2/&amp;#8217;,&lt;/p&gt;

&lt;p&gt;},&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;titulo : &amp;#8216;Notícia 3&amp;#8242;,&lt;/p&gt;

&lt;p&gt;data_publicacao : &amp;#8217;28/10/2010 20h33&amp;#8217;,&lt;/p&gt;

&lt;p&gt;chamada : &amp;#8216;Chamada da notícia 3&amp;#8217;,&lt;/p&gt;

&lt;p&gt;link : &amp;#8216;/noticia-3/&amp;#8217;,&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;];&lt;/p&gt;

&lt;p&gt;var tpl_noticia = &amp;#8216;&lt;li&gt;&lt;h3&gt;${titulo}&lt;/h3&gt;&lt;span class=&amp;#8221;data&amp;#8221;&gt;${data_publicacao}&lt;/span&gt;&lt;span&gt;${chamada}&lt;/span&gt;&lt;span&gt;&lt;a href=&amp;#8221;${link}&amp;#8221;&gt;Veja mais&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;$.tmpl( tpl_noticia, noticias ).appendTo( &amp;#8216;ul#noticias&amp;#8217; );&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;Um problema do exemplo acima é que o template acaba ficando confuso dentro de uma variável. Uma outra forma de declarar um modelo seria utilizando a própria tag script, mas com um tipo diferente (text/x-jquery-tmpl):&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;xml&amp;#8221;]&lt;/p&gt;

&lt;script id=&amp;#8221;tpl-noticia&amp;#8221; type=&amp;#8221;text/x-jquery-tmpl&amp;#8221;&gt;
      
&lt;li&gt;
      
&lt;h3&gt;${titulo}&lt;/h3&gt;
      
&lt;span class=&amp;#8221;data&amp;#8221;&gt;${data}&lt;/span&gt;
      
&lt;p class=&amp;#8221;chamada&amp;#8221;&gt;${chamada}&lt;/p&gt;
      
&lt;a href=&amp;#8221;${link}&amp;#8221;&gt;Leia mais&lt;/a&gt;
     
&lt;/li&gt;
  
&lt;/script&gt;
  

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;Dessa forma é possível indentar o template HTML obtendo uma melhor organização/visualização do código.&lt;/p&gt;

&lt;h2 id=&#34;caching&#34;&gt;Caching&lt;/h2&gt;

&lt;p&gt;Antes de um template ser retornado através do método .tmpl(), ele é tranformado em uma função e depois executado. Uma forma de evitar esta execução toda vez que for retornado o plugin é utilizar o método .template() para criar uma versão em cache, otimizando a performance do script.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;// renderizando como plugin diretamente no objeto jQuery&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;#tpl-noticia&amp;#8217;).template(&amp;#8216;tplNoticia&amp;#8217;);&lt;/p&gt;

&lt;p&gt;// associando diretamente a uma variável&lt;/p&gt;

&lt;p&gt;var tplNoticia = $(&amp;#8216;#tpl-noticia&amp;#8217;).template();&lt;/p&gt;

&lt;p&gt;// renderizando passando html/texto como parâmetro&lt;/p&gt;

&lt;p&gt;$.template(&amp;#8216;tplNoticia&amp;#8217;, &amp;#8216;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;${titulo}
&amp;#8216;);
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;No exemplo acima, a variável &lt;strong&gt;tplNoticia&lt;/strong&gt; armazena a função responsável por nosso template. O método .template() é chamado de duas formas distintas: a primeira cria a função do template baseada no script com o id tpl-noticia. A segunda chamada funciona da mesma forma, só que dessa vez passamos o conteúdo do template diretamente como parâmetro. &lt;a href=&#34;http://tableless.com.br/anatomia-de-um-plugin-jquery&#34;&gt;Lembram do artigo sobre plugins?&lt;/a&gt; Então, uma é um método público e a outra um utilitário jQuery.&lt;/p&gt;

&lt;h2 id=&#34;wrap-e-tmpl&#34;&gt;{{wrap}} e {{tmpl}}&lt;/h2&gt;

&lt;p&gt;As tags especiais {{wrap}} e {{tmpl}} possuem objetivos bem parecidos. A primeira permite a iteração e inclusão de trechos HTML dentro de um objeto de template. Já a tag {{tmpl}} utiliza, ao invés de trechos HTML, um outro objeto template.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;xml&amp;#8221;]&lt;/p&gt;

&lt;script id=&amp;#8221;tplNoticia&amp;#8221; type=&amp;#8221;text/x-jquery-tmpl&amp;#8221;&gt;
      
{{wrap &amp;#8220;#tableNoticia&amp;#8221;}}
          
&lt;h2&gt;Notícia 1&lt;/h2&gt;
          
&lt;p&gt;&lt;a href=&amp;#8221;noticia-1&amp;#8243;&gt;Chamada da notícia 1&lt;/a&gt;&lt;/p&gt;
          
&lt;h2&gt;Notícia 2&lt;/h2&gt;
          
&lt;p&gt;&lt;a href=&amp;#8221;noticia-2&amp;#8243;&gt;Chamada da notícia 2&lt;/p&gt;
      
{{/wrap}}
  
&lt;/script&gt;

&lt;script id=&amp;#8221;tableNoticia&amp;#8221; type=&amp;#8221;text/x-jquery-tmpl&amp;#8221;&gt;
      
&lt;table&gt;
        
&lt;tbody&gt;
          
&lt;tr&gt;
              
{{each $item.html(&amp;#8220;h2&amp;#8221;, true)}}
                  
&lt;td&gt;
                      
${$value}
                  
&lt;/td&gt;
              
{{/each}}
          
&lt;/tr&gt;
          
&lt;tr&gt;
              
{{each $item.html(&amp;#8220;p&amp;#8221;)}}
                  
&lt;td&gt;
                      
{{html $value}}
                  
&lt;/td&gt;
              
{{/each}}
          
&lt;/tr&gt;
        
&lt;/tbody&gt;
      
&lt;/table&gt;
  
&lt;/script&gt;

&lt;div id=&amp;#8221;noticias&amp;#8221;&gt;&lt;/div&gt;

&lt;script&gt;
  
$(function(){
    
$(&amp;#8220;#tplNoticia&amp;#8221;).tmpl().appendTo(&amp;#8220;#noticias&amp;#8221;);
  
});
  
&lt;/script&gt;
  

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;No código acima utilizamos a tag {{wrap}} para popular dados em uma tabela. A primeira linha (&lt;tr&gt;) da tabela recebe os títulos do nosso template de notícias &amp;#8211; tudo o que estiver entre a tag &lt;h2&gt;. A iteração é feita através da tag {{each}}, explicada no &lt;a href=&#34;http://tableless.com.br/templates-e-jquery-parte-1&#34;&gt;artigo anterior&lt;/a&gt;. O que o exemplo acima faz é buscar todos os elementos H2 no item de template e adicionar o seu conteúdo, sem a tag, na célula da tabela. (Lembrando que você pode utilizar qualquer método jQuery no item de um loop dentro do template.)&lt;/p&gt;

&lt;p&gt;Já a segunda linha da tabela recebe a chamada da notícia, preservando suas tags HTML &amp;#8211; por isso a utilização da tag {{html}} no valor de cada notícia.&lt;/p&gt;

&lt;p&gt;A tag {{tmpl}} é muito útil quando precisamos encadear ou utilizar uma espécie de include dentro de um outro template. No exemplo abaixo, o template para o título e o template da chamada da notícia estão separados. O método .tmpl() recebe apenas o template da chamada.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;xml&amp;#8221;]&lt;/p&gt;

&lt;script id=&amp;#8221;tplNoticia&amp;#8221; type=&amp;#8221;text/x-jquery-tmpl&amp;#8221;&gt;
      
{{tmpl &amp;#8220;#tplTitulo&amp;#8221;}}
      
&lt;p class=&amp;#8221;chamada&amp;#8221;&gt;${chamada} &lt;a href=&amp;#8221;${link}&amp;#8221;&gt;Leia mais&amp;#8230;&lt;/a&gt;&lt;/p&gt;
  
&lt;/script&gt;

&lt;script id=&amp;#8221;tplTitulo&amp;#8221; type=&amp;#8221;text/x-jquery-tmpl&amp;#8221;&gt;
      
&lt;h2&gt;${titulo}&lt;/h2&gt;
      
&lt;span class=&amp;#8221;data&amp;#8221;&gt;${data_publicacao}&lt;/span&gt;
  
&lt;/script&gt;

&lt;div id=&amp;#8221;noticias&amp;#8221;&gt;&lt;/div&gt;

&lt;script&gt;
  
$(function(){
    
$( &amp;#8220;#tplNoticia&amp;#8221; ).tmpl( noticias ).appendTo( &amp;#8220;#noticias&amp;#8221; );
  
});
  
&lt;/script&gt;
  

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h2 id=&#34;como-e-quando-utilizar-templates&#34;&gt;Como e quando utilizar templates?&lt;/h2&gt;

&lt;p&gt;Templating é um conceito relativamente novo no jQuery, portanto, algumas funcionalidades ainda podem parecer confusas. Cabe a você decidir qual a melhor forma de definir e converter seus modelos. Por exemplo, se o seu template só vai ser utilizado uma única vez não é necessário utilizar caching (de repente não é necessário nem mesmo utilizar um template!).&lt;/p&gt;

&lt;p&gt;Procure organizar bem seu código e pensar sempre em uma possível evolução do projeto &amp;#8211; nesse caso, templates vão ser uma mão na roda.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bem vindo a Xangri-lá – Parte 2</title>
      <link>https://tableless.github.io/hugo-public/bem-vindo-a-xangrila-parte-2/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/bem-vindo-a-xangrila-parte-2/</guid>
      <description>

&lt;p&gt;Uma vez familiares com a premissa do Progressive Enhancement, vamos entender como aplicar a abordagem para criar suas páginas do zero, garantindo que elas funcionem na maior aplitude de navegadores e dispositivos. Antes de começar, é importante lembrar que para tudo funcionar bem, você precisa conhecer as funcionalidades e limitações da especificacao HTML, seus elementos, tags, e atributos aprovados, isso esta disponivel no site do w3c. É importante tambem se manter no &lt;em&gt;bleeding edge&lt;/em&gt;, para que novas linguagens (como o HTML5) não fiquem de fora de suas análises e ponderações. Um plus é você conhecer (ou pelo menos ter em mãos para referência) as especificacoes de CSS 2.1 e 3 disponiveis no w3c. Vale lembrar que CSS3 e HTML5 são assuntos novos e ainda não se tornaram especificação (ainda está no status de &lt;em&gt;working draft&lt;/em&gt;), o que não nos impede de usar todo o poder já disponível para se criar aplicações online.&lt;/p&gt;

&lt;h2 id=&#34;analisando-a-aplicação-um-raio-x&#34;&gt;Analisando a aplicação: Um raio-x&lt;/h2&gt;

&lt;p&gt;As expectativas e considerações do cliente geram o design e a funcionalidade de sua aplicação. Mas como esse design deve funcionar nos mais diversos cenários é responsabilidade nossa. A primeira etapa é fazer um scan detalhado do que vai ser construido naquela etapa do processo. Se você recebeu wireframes que mostram como sua página deve ser visualizada em um monitores 4:3, 16:9 e mobile em telas paisagem e retrato você deve pegar estes 3 designs e sua estrutura &lt;strong&gt;básica&lt;/strong&gt; de HTML para entender quais serão as partes em comum para a partir daí escrever o HTML.&lt;/p&gt;

&lt;div id=&#34;attachment_2381&#34; style=&#34;width: 710px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2010/12/layouts.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/layouts.png&#34; alt=&#34;Wireframes mostrando diferentes designs para 16:9, 4:3, mobile horizontal e vertical&#34; width=&#34;700&#34; height=&#34;167&#34; class=&#34;size-full wp-image-2381&#34; srcset=&#34;uploads/2010/12/layouts.png 700w, uploads/2010/12/layouts-300x71.png 300w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Diferentes Wireframes para o mesmo design
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;O que está presente em todas as páginas? Como deve ser a semântica e a linearidade do HTML ponderando os wireframes desktop X mobile? Se a navegação (em amarelo escuro nos designs) fizer uso de um acordion, como o HTML mais básico deverá ser escrito, de modo que o design acima seja garantido para todos os dispositivos que vão acessar a página, independente de sua configuração? (isso seria válido para qualquer plugin na página)&lt;/p&gt;

&lt;p&gt;Com um raio-x nos designs acima, veremos que o cabeçalho(em laranja), pesquisa(azul topo), navegacao (amarelo escuro com boxes), conteúdo (centro) e rodapé (azul fundo) são as partes presentes em todos os designs. Dá até pra assumir que o exemplo acima é o de um portal – se o usuário acessa de uma tela desktop wide, anúncios (amarelo claro) são mostrados. Se o cara acessa de um desktop, uma animação no cabecalho é mostrada.&lt;/p&gt;

&lt;p&gt;As condições deste exemplo são simples – na vida real é &lt;strong&gt;sempre&lt;/strong&gt; mais complexo – mas é assim que você deve montar a sua análise. Eu poderia por exemplo colocar os anúncios do wireframe 16:9 em um elemento &lt;strong&gt;aside&lt;/strong&gt; sabendo de suas funcionalidades. A navegação poderia ser embarcada no elemento &lt;strong&gt;nav&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Você pode se perguntar: Mas o elemento *&lt;strong&gt;&lt;em&gt;nav&lt;/em&gt;&lt;/strong&gt;* e &lt;strong&gt;aside&lt;/strong&gt;, nativos do HTML5 são novos e precisaremos de um &lt;strong&gt;document.createElement()&lt;/strong&gt; para que ele renderize em navegadores sem suporte a linguagem. Não estamos misturando Graceful Degradation aqui, uma vez que estamos usando uma solução e depois corringindo “deficiências” da solução com um patch?&lt;/p&gt;

&lt;p&gt;Sim, estamos usando princípios de Graceful Degradation para corrigir essa limitação do HTML5, mas como estamos no planejamento da aplicação, e ela ainda não está nem perto de ser codificada, a orientação geral continua sendo o Progressive Enhancement.&lt;/p&gt;

&lt;p&gt;Os wireframes são intuitivos, e as regras muito claras. Para as páginas de conteúdo a única funcionalidade avançada existente está na navegação(um accordion) e no topo (um slideshow). Passando um plugin de um accordion em um raio-x, vemos que o HTML dele é semântico:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ul&amp;gt;&amp;lt;!--primeiro nivel--&amp;gt;
&amp;lt;li&amp;gt;
   &amp;lt;ul&amp;gt;&amp;lt;!--segundo nivel--&amp;gt;
    &amp;lt;li&amp;gt;
       &amp;lt;ul&amp;gt;&amp;lt;!--terceiro nivel--&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
       &amp;lt;/ul&amp;gt;
     &amp;lt;/li&amp;gt;
     &amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Sabemos que a manipulação que o jQuery faz não será disponível para dispositivos com javascript desabilitado. Como resolver então os níveis que devem ser ocultos em situações como essa? CSS &lt;strong&gt;display:none/block;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A estrutura usual de slideshows é muito parecida com o accordion, e a solução provavelmente seria a mesma. E esta estrutura garante a mesma experiencia de navegação ao usuario, com javascript ou não.&lt;/p&gt;

&lt;h2 id=&#34;aplicando-o-progressive-enhancement&#34;&gt;Aplicando o Progressive Enhancement&lt;/h2&gt;

&lt;p&gt;Como você pode ver, os maiores segredos dessa abordagem é separar bem HTML, CSS e javascript de acordo com funcionalidades que podem ser renderizadas nos dispositivos que acessam sua página.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tenha um documento HTML semântico e bem estruturado;&lt;/li&gt;
&lt;li&gt;Mantenha sempre o layout separado do conteúdo (e mantenha as linhas que dividem essas áreas sempre muito bem visíveis)&lt;/li&gt;
&lt;li&gt;Mantenha suas iterações avancadas em uma camada específica, tanto estilo como script, sempre atento as limitações de Usabilidade e Acessibilidade.&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&#34;attachment_2380&#34; style=&#34;width: 986px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2010/12/fluxo_dev.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/fluxo_dev.png&#34; alt=&#34;Fluxograma de desenvolvimento orientado ao Progressive Enhancement&#34; width=&#34;700&#34; height=&#34;146&#34; class=&#34;size-full wp-image-2380&#34; srcset=&#34;uploads/2010/12/fluxo_dev.png 976w, uploads/2010/12/fluxo_dev-300x62.png 300w, uploads/2010/12/fluxo_dev-940x198.png 940w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Evolução do código HTML e CSS em uma aplicação que usa PE para diferentes versões: Básica, Mobile, Desktop e Enhanced
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;As abordagens de Progressive Enhancement pedem um documento HTML muito bem estruturado e escalável, e a evolução de seu desenvolvimento é mostrado na primeira linha da visualização acima. Com um &lt;em&gt;markup&lt;/em&gt; mais básico, podemos garantir a visualização em dispositivos primitivos, fazendo com que o propósito da aplicação seja garantido. Esse markup evolui para englobar as outras versões, e com o desenvolvimento CSS não é diferente. Linearizar o desenvolvimento desta maneira traz vários benefícios: pode garantir a entrega de releases a medida que o desenvolvimento caminha, mostrando a evolução do projeto para o cliente, mantem o time de testes (se existente) com uma carga de trabalho para detecção de erros, fazendo com que o período de homoogação seja menos doloroso na entrega do projeto, a lista cresce. Normalmente para a criação de um site ou aplicação, eu uso este diagrama de fluxo para garantir que o meu desenvolvimento vai ser o mais alinhado aos métodos de Progressive Enhancement possível. Cada uma das caixas em cinza tem várias sub-divisões que vou adicionando de acordo com a necessidade do projeto. Com ele consigo garantir um grande número de dispositivos com um pouco menos de trabalho la na frente adequando páginas aos mais diferentes tipos de dispositivo.&lt;/p&gt;

&lt;p&gt;Eu coloco o desenvolvimento da versão mobile em primeiro, e este é um ponto de discordância com alguns amigos nos papos de bar – e de IM também. Considero mobile uma versão incipiente das informações que o usuário costuma encontrar em uma versão desktop. Posso confessar que esta é uma metodologia que foi desenvolvida adequada a uma certa realidade. Ela pode variar se seu workflow de desenvolvimento é direfente. Repito o que disse no post anterior – &lt;strong&gt;desenvolva, adote ou customize uma metodologia&lt;/strong&gt;. A minha metodologia partiu do livro do Filament Group _&lt;a href=&#34;http://filamentgroup.com/dwpe/&#34; target=&#34;_blank&#34; title=&#34;Acessar o site do Filament Group&#34;&gt;Designing with Progressive Enhancement&lt;/a&gt;_, de artigos na web (alguns deles eu usei para montar a minha série de posts) e de análises da minha carga e tipo de trabalho.&lt;/p&gt;

&lt;p&gt;Um exemplo? Se o seu design está sendo feito para interfaces mobile apenas, sabemos que as preocupações para engine de renderização e desktop somem, mas ainda sim teríamos uma versão &lt;strong&gt;básica&lt;/strong&gt;, para aqueles navegadores dos celulares mais antigos, uma versão &lt;strong&gt;mobile&lt;/strong&gt;, uma versão &lt;strong&gt;enhanced&lt;/strong&gt;, e uma versão para &lt;strong&gt;print&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Separar a versão mobile de enhanced é apenas uma preocupação com a &lt;strong&gt;escalabilidade do código&lt;/strong&gt;. Ainda não enfrentamos tantos problemas de interface em navegadores mobile, mas possivelmente iremos enfrentar. Não temos muitas aplicações que dependam de serviços de impressão, como o que temos no &lt;a href=&#34;http://labnol.org/?p=17827&#34; target=&#34;_blank&#34; title=&#34;Acessar o Digital Inspiration&#34;&gt;Dropbox&lt;/a&gt;. Mas ainda vamos ter. Uma aplicação mobile que gerencie os pedidos de qualquer negócio e precise gerar a impressão de uma nota de compra ainda não aparece com frequência no mercado para se desenvolver. Mas vai.&lt;/p&gt;

&lt;p&gt;Percebem as águas que vamos navegar em breve? Os problemas que iremos ter que lidar, a complexidade que o desenvolvimento web vai requerer? Esse fluxograma é o que eu uso &lt;strong&gt;hoje&lt;/strong&gt; no meu trabalho. Mas agora no final do ano ele vai ganhar um upgrade porque o iPad não está na jogada ainda quer entrar no bolo, afinal um design feito com uma palheta de cores mais viva pode ganhar com tom mais intenso, tirando maior proveito da tecnologia Retina do visor dos iPads (e dos iPhones também).&lt;/p&gt;

&lt;p&gt;No próximo post irei continuar o assunto que abordei no meu primeiro artigo, discutir um Plano de Usabilidade e suas fases; vamos aplicá-las em uma empresa fictícia e após termos um “Plano de Governo”, voltaremos a Xangri-lá, para a última parte desta série de posts, fazendo um grande lab mostrando a implantação de um projeto web usando os conceitos de Progressive Enhancement. &lt;em&gt;Namastê&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;referência&#34;&gt;Referência&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://filamentgroup.com/lab/announcing_our_book_designing_with_progressive_enhancement/&#34; target=&#34;_blank&#34; title=&#34;Acessar o site do Filament Group e o livro&#34;&gt;Designing with Progressive Enhancement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thomasmaier.me/2010/06/css-for-iphone-4-retina-display/&#34; target=&#34;_blank&#34; title=&#34;Acessar o blog do Thomas Maier&#34;&gt;Criando CSS para iPhone4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thomasmaier.me/2010/03/howto-css-for-the-ipad/&#34; target=&#34;_blank&#34; title=&#34;Acessar o blog do Thomas Maier 2&#34;&gt;Criando CSS para iPads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.labnol.org/internet/print-from-mobile-phones/17827/&#34; target=&#34;_blank&#34; title=&#34;Acessar o Digital Inspiration&#34;&gt;Imprindo de telefones usando dropbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Desenvolvendo para IE6</title>
      <link>https://tableless.github.io/hugo-public/dev-ie6/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/dev-ie6/</guid>
      <description>&lt;p&gt;Você ainda faz sites para IE6? Já me fizeram uma pergunta dessas certa vez. A resposta: Sim. Mas&amp;#8230;&lt;/p&gt;

&lt;p&gt;Desenvolver para Internet Explorer 6 já foi uma obrigação. Enquanto ele era o browser mais utilizado e ainda era o browser mais atual da série, nós tínhamos que desenvolver para ele. Não havia escolha. O cenário atual é outro.&lt;/p&gt;

&lt;p&gt;Eu não desenvolvo sites para o Internet Explorer 6 se o cliente não pedir. Nas propostas e nas reuniões costumo deixar bem claro que o IE6 está fora da cartilha de browsers compatíveis. Nesse momento é bom conversar com o cliente para entender o mercado dele. Caso ele precise que o Internet Explorer 6 seja previsto, eu aviso duas coisas: 1. O valor da proposta vai aumentar. 2. O tempo de desenvolvimento também.&lt;/p&gt;

&lt;p&gt;Claro que os motivos para estas decisões precisam ser explicados. Não vou aumentar o valor da proposta simplesmente porque sou contra o IE6. Mas porque eu terei mais trabalho pela frente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;É muito trabalho, para pouco retorno&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eu não preciso dizer para você que o Internet Explorer 6 é complicado. Você já sabe. Mas o seu cliente não deve saber.&lt;/p&gt;

&lt;p&gt;Para que o IE6 passe no teste de satisfação, temos que seguir alguns longos passos:&lt;/p&gt;

&lt;p&gt;1.    Previsão de bugs de compatibilidade de CSS e HTML.&lt;/p&gt;

&lt;p&gt;2.    Previsão de CSS escrito exclusivamente para o IE6.&lt;/p&gt;

&lt;p&gt;3.    Bateria de testes e pente fino de Design em comparação ao layout original e outros browsers.&lt;/p&gt;

&lt;p&gt;4.    Manutenção exclusiva&lt;/p&gt;

&lt;p&gt;5.    Muito código e limitações de tecnologia&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Previsão de bugs de compatibilidade de CSS e HTML.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Não preciso dizer que o IE6 é uma colcha de retalhos. Há dezenas de bugs conhecidos  relacionados ao desenvolvimento com CSS e HTML. Todos estes bugs precisam ser previstos e solucionados.&lt;/p&gt;

&lt;p&gt;Muitos desenvolvedores já tem conhecimento destes bugs já preparam o código para que eles sejam previamente solucionados e não haja surpresas posteriores. Infelizmente isso nos leva para o próximo tópico.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Previsão de CSS escrito exclusivamente para o IE6.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Não é nada inteligente escrever código CSS cheio de Hacks. Você acaba misturando código errado com código correto. Sem contar que que usuários de browsers atuais não precisam baixar um código com hacks para solucionar problemas de um browser descontinuado. Por isso, uma solução interessante é criar um arquivo CSS apenas para o Internet Explorer 6. Entenda que nesse arquivo não haverá todo o código do site, apenas o código que servirá para curar os bugs de layout exclusivos do IE6.&lt;/p&gt;

&lt;p&gt;Atualmente essa solução é a mais interessante porque o IE6 está prestes a sumir. Quando isso acontecer, basta você retirar a linha que linka esse código e pronto, seu site não suporta mais IE6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bateria de testes e pente fino de Design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Invarialmente você precisará gastar um tempo para fazer uma bateria de testes em todo o layout para se certificar de que nada está fora do lugar.&lt;/p&gt;

&lt;p&gt;É regra haver diferenças gritantes de alinhamento, medidas e distâncias no layout do Internet Explorer 6  em relação ao layout original e aos outros browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manutenção exclusiva&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prepare-se para ter alguém cuidando exclusivamente do Internet Explorer 6 durante tempo indeterminado.&lt;/p&gt;

&lt;p&gt;Com os browsers atuais, é normal fazermos implementarmos um layout e o resultado ser homogêneo durante as versões posteriores dos browsers. Se você precisar fazer alguma alteração brusca no layout, prepare-se para a manutenção no IE6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Muito código e limitações de tecnologia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Um exemplo clássico é o suporte ao PNG. Havia um trabalho terrível para replicar sombras e determinados tipos de gradiente por conta do efeito alpha que os designers aplicavam nas imagens. O desenvolvedor client-side precisava fazer tantos slices de imagens quanto nos tempos do desenvolvimento com tabelas. A ideia de que o design deveria trabalhar para o conteúdo era totalmente esquecida. O design deveria ser seguido ao pé da letra, mesmo que isso prejudicasse a informação.&lt;/p&gt;

&lt;p&gt;Ainda com o exemplo do PNG. Se quisermos que o PNG funcione no IE6, é necessário a utilização de alguns códigos extras de Javascript. O resultado não é 100%, há um consumo desnecessário de banda e também o browser consome processamento de máquina do usuário. Escrevemos muito código para ter por resultado.&lt;/p&gt;

&lt;p&gt;Os exemplos acima são decisivos para o desenvolvimento. Isso precisa ser explicado se seu cliente faz questão do IE6. Contudo, há clientes que precisam dessa compatibilidade por obrigação, por conta de um legado que não é simples de resolver. Aí não tem jeito. Você vai ter mais trabalho e o cliente vai gastar mais. Ninguém fica feliz.&lt;/p&gt;

&lt;p&gt;O processo de evangelização é feito nas trincheiras. Então, mãos à obra!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bem vindo a Xangri-lá – Parte 1</title>
      <link>https://tableless.github.io/hugo-public/bem-vindo-a-xangrila-parte-1/</link>
      <pubDate>Thu, 25 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/bem-vindo-a-xangrila-parte-1/</guid>
      <description>

&lt;p&gt;Um dia desses eu estava no meio de muita gente boa em um treinamento em São Paulo – um dos melhores que já fiz – e no meio de uma discussão sobre abordagens de desenvolvimento de aplicações internet crossbrowser e a maravilha que era o HTML5, o Elcio &amp;#8211; ele mesmo &amp;#8211; da &lt;a href=&#34;http://visie.com.br/&#34;&gt;Visie&lt;/a&gt; disse que Progressive Enhancement e &lt;a href=&#34;http://tableless.com.br/graceful-degradation-e-tudo-sobre-acessibilidade&#34;&gt;Graceful Degradation&lt;/a&gt; eram a &lt;em&gt;&amp;#8220;mesma coisa&amp;#8221;&lt;/em&gt;. Eu discordava dele porém não continuei o assunto porque essa questão poderia ser abordada de maneira mais abrangente, e porque o momento era de HTML5, não de como temos que escrever código. Deixei em italico a afirmação porque eu tenho certeza do que ele estava querendo dizer. Quando olhamos rapidamente a afirmação ela parece ter um significado, mas analisando mais a fundo, encontramos o Eldorado.&lt;/p&gt;

&lt;p&gt;Mas porque trazer essa discussão para o Tableless, de maneira muito mais abrangente? Porque o Elcio já usa PE em seus projetos (conseguir entregar o que a Visie entrega no tempo que entrega só mostra isso). Mas justamente por já desenvolver &lt;strong&gt;pensando&lt;/strong&gt; orientado ao Progressive Enhancement, pra ele tanto faz uma abordagem ou uma metodologia pois as paginas dele ja tem um proposito que PE e Graceful Degradation perseguem: a garantia do maior número possivel de usuários tendo o &lt;strong&gt;mesmo&lt;/strong&gt; tipo de experiência ou funcionalidade, independente do browser, tamanho de tela, dispositivo ou conexão. O novo site da &lt;a title=&#34;Acessar o site da Brastemp&#34; href=&#34;http://www.brastemp.com.br/&#34; target=&#34;_blank&#34;&gt;Brastemp&lt;/a&gt;, que os caras da Visie entregaram a poucos dias mostra bem isso. Tente acessar esse website do seu browser preferido. A experiência nao é comprometida em nenhum momento. Agora tente acessar do seu mobile. Agora tente acessar do seu PSP. Agora tente acessar do seu PS3. Voce vai perceber que a experiencia é a mesma.&lt;/p&gt;

&lt;p&gt;Sem muita delonga, vou direto as diferenças: &lt;strong&gt;Graceful Degradation&lt;/strong&gt; parte da premissa que você vai desenvolver seu site com a melhor tecnologia disponível, plugins e tudo mais. E mesmo que seu cliente possua browsers que não renderizem efeitos/features utilizados, sua navegação vai acontecer “sem problemas”, porque uma vez que a funcionalidade esta OK em um browser, vamos efetuando mudancas no código até garantir que a funcionalidade rode em todos os browsers usados. Partimos da premissa que a experiência que o usuario terá em browsers mais modernos será suavemente degradada para funcionalidades mais simples em browsers mais antigos.&lt;/p&gt;

&lt;p&gt;Dito isso, bem vindos ao Eldorado: &lt;strong&gt;Progressive Enhancement&lt;/strong&gt; usa tecnologias web em “camadas” que permitem que todos os usuários, independente de browser e velocidade de conexão, tenham acesso as &lt;strong&gt;funcionalidades básicas e conteúdo&lt;/strong&gt; de uma página. E quanto mais avançado for o browser do usuário e sua conexão, mais rica será sua experiência. Partindo de um baseline que &lt;strong&gt;garantidamente funcione em todos os browsers&lt;/strong&gt;, vamos pouco a pouco adicionando funcionalidades que, após testadas, funcionarão &lt;strong&gt;apenas&lt;/strong&gt; em browsers que a suportam.&lt;/p&gt;

&lt;p&gt;Em outras palavras, Graceful Degradation parte do difícil, do bleeding edge. Uma vez que seu jQuery maneirão já esta funcionando bonitinho no Chrome, é hora de voce passar o final de semana namorando seu código e sua garrafa de café, para garantir que o bendito plugin também funcione no amado IE6. Progressive Enhancement vai na direção oposta. Partindo do simples, garantimos que uma funcionalidade roda no IE6 para só depois “perfumá-la” para o Chrome.&lt;/p&gt;

&lt;p&gt;Um exemplo?&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34; line=&#34;1&#34;&gt;&lt;p&gt;
  &lt;a href=&#34;window.print()&#34;&gt;Imprimir&lt;/a&gt;
      
&lt;/p&gt;
&lt;/pre&gt;

&lt;p&gt;Esse link funciona quando o JavaScript está disponível e habilitado e o browser suporta o comando de impressão. No entanto, se o JavaScript não estiver disponível (por exemplo, em alguns dispositivos móveis), o link não funcionará, criando um problema grande. Você, como o desenvolvedor do site, prometeu a seus visitantes uma funcionalidade que não funciona. Quando clicam no link e ele não funciona eles se sentem confusos, enganados e vão culpá-lo (com razão) por entregar uma experiência ruim ao usuário final.&lt;/p&gt;

&lt;p&gt;Para resolver isso os Devs costumam usar Graceful Degradation: dizem ao usuário que o link pode não estar funcionando e qual a razão para isso, e talvez até sugiram uma solução alternativa para conseguir o que o usuário deseja fazer. Um truque comum é usar o elemento noscript.&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34; line=&#34;1&#34;&gt;&lt;p&gt;
  &lt;a href=&#34;window.print()&#34;&gt;Imprimir**&lt;/a&gt;
      
&lt;/p&gt;
    
      

&lt;p class=&#34;scriptwarning&#34;&gt;
  Para imprimir vc precisa do javascript habilitado. 
          Por favor, habilite-o em seu browser.
        
&lt;/p&gt;
    
&lt;/pre&gt;

&lt;p&gt;Com isso explicamos que algo deu errado e como consertar o problema. Porém partimos da premissa que nosso usuário:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sabe o que é javascript;&lt;/li&gt;
&lt;li&gt;Sabe como habilitar(e desabilitar) javascript;&lt;/li&gt;
&lt;li&gt;Tem permissões administrativas para mudar essa configuração;&lt;/li&gt;
&lt;li&gt;Se sente confortável em habilitar o javascript apenas para imprimir um documento;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ainda usando Graceful degradation, poderíamos ser mais gentis com o usuario:&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34; line=&#34;1&#34;&gt;&lt;p&gt;
  &lt;a href=&#34;window.print()&#34;&gt;Imprimir**&lt;/a&gt;
      
&lt;/p&gt;
    
      

&lt;p class=&#34;scriptwarning&#34;&gt;
  Impress&amp;atilde;o do documento: 
          Selecione o bot&amp;atilde;o imprimir/print no seu browser, ou no menu arquivo/file, selecione a op&amp;ccedil;&amp;atilde;o imprimir/print. Voc&amp;ecirc; tamb&amp;eacute;m pode tentar o atalho ctrl+p em seu teclado.
        
&lt;/p&gt;
    
&lt;/pre&gt;

&lt;p&gt;Isso resolve vários problemas do dev, mas parte da premissa que a funcionalidade de impressao é a &lt;strong&gt;mesma&lt;/strong&gt; em todos os browsers. E essa afirmacao não é correta.&lt;/p&gt;

&lt;p&gt;Se fossemos fazer a funcionalidade acima usando PE, a primeira coisa seria descobrir como imprimir a página sem usar javascripts. Como sabemos que isso non ecziste, chegamos a primeira conclusão: &lt;strong&gt;um link não é a melhor escolha de elemento HTML a se usar nesse caso&lt;/strong&gt;. Mas se mesmo assim você quer usar essa funcionalidade de impressão, você deve usar botões ao invés de scripts. Por definição &lt;a title=&#34;Acessar o w3c&#34; href=&#34;http://www.w3.org/TR/html401/interact/forms.html&#34; target=&#34;_blank&#34;&gt;botões existem para suportar scripts&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Botões não têm um comportamento padrão. Cada botão pode ter um script client-side associando os atributos do elemento ao evento. Quando ocorre um evento (por exemplo, o usuário pressiona o botão), o script associado é acionado.”&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;* *(w3c, 17.2.1 Control types)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;A segunda conclusão é não assumir que o javascript estará habilitado, ou que o browser possa imprimir. Ao invés disso, informamos que o usuário precisa imprimir sua página:&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34; line=&#34;1&#34;&gt;&lt;p&gt;
  Obrigado! Por favor imprima essa p&amp;acute;gina para seus registros.
&lt;/p&gt;
&lt;/pre&gt;

&lt;p&gt;Esse parágrafo com certeza funciona em &lt;strong&gt;qualquer&lt;/strong&gt; browser. O resto é fácil.&lt;/p&gt;

&lt;pre lang=&#34;HTML&#34; line=&#34;1&#34;&gt;(function(){
      if(document.getElementById){
        var pt = document.getElementById(&#39;printthis&#39;);
        if(pt &amp;&amp; typeof window.print === &#39;function&#39;){
          var but = document.createElement(&#39;input&#39;);
          but.setAttribute(&#39;type&#39;,&#39;button&#39;);
          but.setAttribute(&#39;value&#39;,&#39;Imprimir&#39;);
          but.onclick = function(){
            window.print();
          };
          pt.appendChild(but);
        }
      }
    })();
    
&lt;/pre&gt;

&lt;p&gt;Dê uma olhada no script, veja a abordagem usada. Não assumimos nada, tratamos caso a caso cada situação, e oferecemos a &lt;strong&gt;mesma&lt;/strong&gt; funcionalidade a todas elas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Colocando toda funcionalidade em uma função e a executando em seguida, não deixamos variáveis soltas na página.&lt;/li&gt;
&lt;li&gt;Testamos o suporte a DOM e tentamos chegar no elemento que queremos para adicionar o botão a ele.&lt;/li&gt;
&lt;li&gt;Após testar a existência do elemento, testamos se o browser suporta o objeto window e o método print&lt;/li&gt;
&lt;li&gt;Se as duas condições passam, criamos um novo botão e aplicamos o window.print() no evento do clique.&lt;/li&gt;
&lt;li&gt;Adicionamos o botão ao paragrafo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como disse lá em cima, isto irá funcionar para todos os usuários, independentemente do ambiente. Não prometemos ao usuário um elemento de interface que não funciona &amp;#8211; em vez disso, apenas mostramos o feature quando ele funciona.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Em tempo:&lt;/strong&gt; Tecnicamente não há nenhuma necessidade de um botao &amp;#8220;imprimir&amp;#8221;, mas para entender, mantive o exemplo simples.&lt;/p&gt;

&lt;h2 id=&#34;navegando-nas-águas-dos-browsers&#34;&gt;Navegando nas águas dos browsers&lt;/h2&gt;

&lt;p&gt;Grande parte dos desenvolvedores mantém em sua máquina de desenvolvimento um IE8, talvez um IETester, Firefox 2, Firefox 3.6 e Firefox 4. Normalmente os contratos rezam sobre esses browsers, e quando isso representa a maior fatia da internet (73% do mercado), faz sentido. &lt;strong&gt;Mas faz sentido apenas até o ponto aonde essa afirmação não atinge consumidores em potencial.&lt;/strong&gt; E não podemos desconsiderar o poder de 500 milhões de potenciais compradores. Com os browsers mencionados acima voce garante o &lt;em&gt;grosso da internet&lt;/em&gt; e isso aí é o &lt;strong&gt;minimo&lt;/strong&gt; que desenvolvedores como nós pode oferecer.&lt;/p&gt;

&lt;p&gt;Analizamos os numeros abaixo, a situação fica mais visivel. Em outubro, os numeros* foram:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Firefox: A raposinha tem 44,1% do mercado, ou quase &lt;strong&gt;870 milhões&lt;/strong&gt; de browsers instalados&lt;/li&gt;
&lt;li&gt;IE: Em franca decadência desde a sangrenta batalha com a Netscape, hoje tem &lt;strong&gt;580 milhões&lt;/strong&gt; de browsers instalados &amp;#8211; 29,7%&lt;/li&gt;
&lt;li&gt;Chrome: Como tudo do Google, o crescimento espantoso graças a estrategia de marketing que eles usam já garantem quase &lt;strong&gt;380 milhões&lt;/strong&gt; de usuarios, com 19,2%&lt;/li&gt;
&lt;li&gt;Safari / Opera: Juntos, os dois simpáticos browsers tem quase &lt;strong&gt;120 milhões&lt;/strong&gt; de usuários &amp;#8211; 3,9% e 2,2% respectivamente&lt;/li&gt;
&lt;li&gt;O resto: temos pouco mais de &lt;strong&gt;17 milhões&lt;/strong&gt; de pessoas que navegam com outros browsers, a lista é “infinita”&lt;/li&gt;
&lt;/ol&gt;

&lt;p style=&#34;font-size: 9px&#34;&gt;
  &lt;img alt=&#34;391de7d2-f315-11df-b15d-000255111976&#34; src=&#34;http://www-958.ibm.com/me/files/thumbnails/391de7d2-f315-11df-b15d-000255111976.png?size=600x494&#34; style=&#34;border: 0px solid #6898C8;margin: 0;padding-top: 10px;padding-bottom: 3px&#34; /&gt;&lt;br /&gt; Essa comparação gerou uma visualizacao no manyeyes. Você pode vê-la &lt;a title=&#34;Acessar o many Eyes para ver a guerra de browsers versao 1&#34; href=&#34;http://www-958.ibm.com/software/data/cognos/manyeyes/visualizations/browser-wars-2&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; e &lt;a title=&#34;Acessar o many Eyes para ver a guerra de browsers versao 2&#34; href=&#34;http://www-958.ibm.com/software/data/cognos/manyeyes/visualizations/browser-wars-v2&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Considerando que estamos cobrindo 73% do mercado, deixamos fora da festa a considerável quantia de mais de &lt;strong&gt;500 milhões de usuários&lt;/strong&gt; que fazem uso de outro browser. Voce realmente quer perder ou deixar de lado essa audiência? Você não poderia desenvolver seus websites de uma maneira que uma fatia maior de usuários possa usar sem problemas a sua aplicação? Quer deixar essa equação mais difícil ainda? Estamos falando de números para browsers que hoje estão em sua maioria em &lt;strong&gt;desktops&lt;/strong&gt;. O problema deve aumentar expoencialmente a medida que novos dispositivos comecarem a acessar seus websites.&lt;/p&gt;

&lt;p&gt;O cenário caminha para o completo caos se pensarmos que nossos clientes normalmente pedem seus websites em um timeframe muito pequeno. Cobrir todas as áreas do desenvolvimento web em um mês normalmente e ainda garantir que a aplicação vai rodar em 5 diferentes browsers (IE6/7/8/9, FFox &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;.&lt;sup&gt;6&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;, Safari4, Opera11, Seamonkey, Chrome) é muita tarefa para o exército-de-um-developer-só. E é ai que entra o PE. Usar uma abordagem diferente para trabalhar é a chave do negocio. Chegou um novo projeto?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separe conteúdo da forma. Isso facilitará o passo 3&lt;/li&gt;
&lt;li&gt;Defina um baseline de funcionalidades &lt;strong&gt;básicas&lt;/strong&gt; da aplicação. Pesquise na documentação se estas funcionalidades rodam OK no browser &lt;strong&gt;mais antigo&lt;/strong&gt; que o seu contrato pede no desenvolvimento. Se não funciona nele, esta não é uma funcionalidade básica. Redefina e pesquise até chegar a um denominador comum. Se o projeto for HTML5, recomendo partir do &lt;a title=&#34;Acessar o HTML5 Boilerplate&#34; href=&#34;http://html5boilerplate.com&#34; target=&#34;_blank&#34;&gt;HTML5 Boilerplate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Escreva um HTML &lt;strong&gt;semântico&lt;/strong&gt; aonde depois você vai encapsular o conteúdo. Nada de javascripts, nada de CSS. Apenas o HTML nesse momento. Valide o template, veja se tudo esta ok antes do próximo passo.&lt;/li&gt;
&lt;li&gt;Aplique o CSS para o HTML desenhado, teste nos browsers que você precisa cobrir no desenvolvimento. Garanta a mesma experiência ao usuário em todos eles.&lt;/li&gt;
&lt;li&gt;Aplique o javascript. Faça modificações, teste novamente em todos os browsers. Ao implementar, tenha em mãos uma &lt;a href=&#34;http://www.quirksmode.org/dom/events/index.html&#34; target=&#34;_blank&#34; title=&#34;Acessar o quirksmode.org&#34;&gt;lista de objetos e métodos aceitos pelo browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Seja feliz e tenha certeza que ao entregar o seu produto, seu celular não vai tocar no final de semana porque o plugin de código de barras não funciona no cliente que tenta deseperadamente imprimir um boleto de compra usando IE7.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Isso significa que Graceful Degradation é o fim do mundo, técnica &lt;em&gt;capenga&lt;/em&gt; de desenvolvimento quando comparado ao Progressive Enhancement? Não, de maneira alguma. Graceful Degradation também tem seus benefícios &amp;#8211; principalmente em projetos que já estão em produção &amp;#8211; mas se você vai escrever um projeto &lt;strong&gt;do zero&lt;/strong&gt;, use Progressive Enhancement. Não complique. Progressive Enhancement é mais sofisticado e mais estável que GD, mas se você não tem uma metodologia de trabalho ja definida, PE pode tomar mais tempo. &lt;strong&gt;Se você ainda não tem uma metodologia de trabalho, desenvolva-a.&lt;/strong&gt; Se você vai trabalhar em um projeto que já está rodando, se vai mudar uma funcionalidade que já está no ar, você pode usar Graceful Degradation, atuando como um “patch” para um produto ja existente, uma vez que o tempo de desenvolvimento sera menor que desenhar uma solução do zero usando Progressive Enhancement. É, pensando bem, dá pra usar os dois pra achar o Eldorado, é só ter cuidado ao criar novos sites, e guardar seu canivete-suiço de soluções ninja para fazer tudo funcionar em todos os browsers para os momentos aonde esse skill sera exaustivamente colocado a prova. Mãos a obra!&lt;/p&gt;

&lt;p&gt;Uma vez apresentado, é hora de mergulhar fundo no Progressive Enhancement, mas isso é assunto para o próximo post. Um abraço!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;*Os percentuais eu retirei do w3schools, os milhoes de um calculo que so foi possivel gracas ao excelente livro Designing with Progressive Enhancement, do pessoal do Filament group, aos numeros do Internet World stats, e algumas xicaras de cafe. Todavia, recomendo fortemente a leitura do livro.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;** Bons olhos James! Obrigado pelo toque, o wordpress remove o javascript: da minha chamada automaticamente, deve ter algo a ver com a tag pre. Assim que resolvido, o código estará corrigido.&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&#34;referências&#34;&gt;Referências:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3schools.com/browsers/browsers_stats.asp&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;Browser stats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_web_browsers&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;Lista de browsers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://upload.wikimedia.org/wikipedia/commons/7/74/Timeline_of_web_browsers.svg&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;timeline dos browsers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://upload.wikimedia.org/wikipedia/commons/5/55/Layout_engine_usage_share-2009-01-07.svg&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;browser engine share usados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://filamentgroup.com/&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;Filament group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://filamentgroup.com/lab/announcing_our_book_designing_with_progressive_enhancement/&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;Designing with PE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.internetworldstats.com/stats.htm&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;Internet World Stats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://craigmdennis.com/web-design/graceful-degradation-vs-progressive-enhancement/&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;Graceful Degradation vs Progressive Enhancement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Progressive_enhancement&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;Progressive Enhancement no Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.digital-web.com/articles/fluid_thinking/&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;Fluid Thinking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.opera.com/articles/view/graceful-degradation-progressive-enhance/&#34; target=&#34;_blank&#34;&gt;Graceful Degradation vs Progressive Enhancement by Opera Curriculum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/html401/interact/forms.html#push-button&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;Buttons: howto by w3c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Browser_wars&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;A Guerra dos Browsers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gs.statcounter.com/&#34; target=&#34;_blank&#34; title=&#34;Acessar o site de referencia&#34;&gt;Statcounter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 – O que vem por aí…</title>
      <link>https://tableless.github.io/hugo-public/css3-o-que-vem-por-ai/</link>
      <pubDate>Mon, 22 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-o-que-vem-por-ai/</guid>
      <description>&lt;p&gt;O grande papel do desenvolvedor Front-End, na minha opinião, é traduzir em tags html, folhas de estilos e programação Javascript ou até mesmo uma linguagem backside, aquilo que o designer de interface criou e espera estar disponível a clicks e à leitura dos usuários. Ao meu ver, este é o nosso grande trabalho, recriar interfaces de forma adaptada aos diversos browsers de mercado e às diversas possibilidades tecnológicas que temos na web respeitando os limites dos padrões online e a essência da criação visual.&lt;/p&gt;

&lt;p&gt;Com a “quase” padronização entre browsers, as infinitas possibilidades Front-End e a atualização do html, nós teremos a chance de ampliar conhecimento saindo do estigma de “recortes de imagens” ou criadores de códigos não planejados e nada semânticos. Já &lt;a href=&#34;http://tableless.com.br/afinal-o-que-muda-com-o-html-5&#34; target=&#34;_blank&#34;&gt;comentei algo a respeito em outro artigo&lt;/a&gt; e reforço a mensagem neste, pois o assunto é novas tecnologias e novo aprendizado, sendo assim, esta questão de mercado também deverá vir à tona quando o desenvolvimento web começar a exigir o uso do HTML5 e seus companheiros.&lt;/p&gt;

&lt;p&gt;De fontes não pertencentes ao grupo das &lt;a href=&#34;http://www.w3.org/TR/WD-font/&#34; target=&#34;_blank&#34;&gt;WebFonts&lt;/a&gt; à sombras e gradientes, o CSS3 promete revolucionar e dar ao desenvolvedor ainda mais possibilidades de traduzir elementos visuais em códigos dentro de folhas de estilo diminuindo consideravelmente o “recorte de imagens”.&lt;/p&gt;

&lt;p&gt;De antemão, eu alerto: não vamos sair por aí já utilizando essas possibilidades, salvo em casos de testes, pois as devidas documentações normativas ainda estão sendo escritas pela W3C e muitos browsers ainda não conseguem renderizar algumas propriedades.&lt;/p&gt;

&lt;p&gt;Afinal o que vamos poder realizar com o CSS3?!&lt;/p&gt;

&lt;p&gt;Primeiramente, enfatizo duas das novas possibilidades do CSS3 já descritas aqui no Tableless &amp;#8211; o uso das propriedades “font-face” e do “background gradient”.&lt;/p&gt;

&lt;p&gt;Imaginou poder colocar em seu website uma fonte da família “Butter” e fazer um gradiente radial sem precisar recortar imagens de repetição? Pois estas duas propriedades nos auxiliarão nesta missão. Abaixo, o link para os dois artigos &amp;#8211; tutoriais criados pelo Diego falando melhor sobre o assunto:&lt;/p&gt;

&lt;p&gt;@font-face &amp;#8211; &lt;a href=&#34;http://tableless.com.br/font-face-fonts-externas-na-web&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tableless.com.br/font-face-fonts-externas-na-web&#34;&gt;http://tableless.com.br/font-face-fonts-externas-na-web&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gradientes em CSS3 &amp;#8211; &lt;a href=&#34;http://tableless.com.br/gradientes-em-css&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tableless.com.br/gradientes-em-css&#34;&gt;http://tableless.com.br/gradientes-em-css&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/gradientes-em-css&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;No seletor “background”, duas novas possibilidades que prometem resolver parte dos problemas que tínhamos com layouts e vários tipos de imagens de fundo são &amp;#8211; o uso de múltiplos background’s e a inserção de dimensões para imagens de fundo. Dessa maneira, com o CSS3 vamos poder adicionar mais de uma url de uma imagem de fundo para um mesmo elemento:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;background:url (fundo1.png) no-repeat 0px 0px, url(fundo2.jpg) repeat-x 0px 0px;&lt;/pre&gt;

&lt;p&gt;E especificar o tamanho de imagens de fundo:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;background-size: 50% auto;&lt;/pre&gt;

&lt;p&gt;Textos poderão receber fontes “não padrão” utilizando a propriedade @font-face, anteriormente comentada, e poderão também receber a propriedade “text-shadow” que adicionará sombra ao texto e será declarada da seguinte forma:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;text-shadow: 2px 2px 2px #000;&lt;/pre&gt;

&lt;p&gt;Além de famílias de fontes e sombra, ainda serão permitidas algumas propriedades relacionadas ao redimensionamento de elementos que contenham textos, como div’s, por exemplo, permitindo adicionar reticências automaticamente a textos que vão além das dimensões do elemento onde estão contidos, como na declaração abaixo de exemplo:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;text-overflow: ellipsis-word;&lt;/pre&gt;

&lt;p&gt;As bordas também ganharão novas propriedades com grande expectativa para as bordas arredondadas. Além desta propriedade, as bordas poderão receber url de imagens como valores, tanto para top, bottom, left e right, quanto para o cantos. Exemplos das propriedades e valores para bordas:&lt;/p&gt;

&lt;p&gt;ex 1:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;border-image: url(border.png) 27 27 27 27 round round;&lt;/pre&gt;

&lt;p&gt;ex 2:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;border-radius: 15px;&lt;/pre&gt;

&lt;p&gt;As cores também poderão ser declaradas não apenas em números hexadecimais, mas também em RGB e RGBA, além de valores para HSL e HSLA. Exemplo:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;background: rgb(243, 191, 189);&lt;/pre&gt;

&lt;p&gt;Para finalizar essa breve introdução ao que nos será possível realizar com a chegada do CSS3, tão importante quanto as demais propriedades, será a propriedade “column”, que vai permitir ao desenvolvedor já estabelecer em quantas colunas um determinado conteúdo deverá ser divido, bem como o espaçamento e a largura que existirá entre elas. Esta propriedade, por enquanto, é aceita apenas pelo Firefox e pelo Safari. As declarações serão feitas desta forma:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;-moz-column-width: 13em;
-webkit-column-width: 13em;
 -moz-column-gap: 1em; -webkit-column-gap: 1em;&lt;/pre&gt;

&lt;p&gt;Ao que tudo indica, nosso trabalho tende a se direcionar muito mais a arquitetura das propriedades que utilizaremos nas folhas de estilo buscando fazer uma tradução perfeita das interfaces criadas pelos designers, do que à adição desenfreada de “slices” em PSD’s.&lt;/p&gt;

&lt;p&gt;Essas novidades ainda estão em estudo, testes e em padronização pela W3C, de qualquer forma, vale já começar a se familiarizar com que está por vir, principalmente no que diz respeito aos companheiros do HTML5 que prometem revolucionar o “jeito de se fazer websites”.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Responsabilidade de um dev client-side</title>
      <link>https://tableless.github.io/hugo-public/responsabilidade-de-um-dev-client-side/</link>
      <pubDate>Wed, 10 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/responsabilidade-de-um-dev-client-side/</guid>
      <description>&lt;p&gt;O reconhecimento do desenvolvedor client-side está maior do que nos anos passados. Isso é importante para nós. Anteriormente nenhuma empresa levava a sério esse setor, não porque ele era menos importante, porque na verdade ele não era, mas por falta de &amp;#8220;inteligência&amp;#8221; das próprias empresas e dos liderantes. O ponto é que esse mercado cresceu, se estruturou, passou por uma reforma natural como todo e qualquer novo mercado que surge e é prostituído com profissionais imaturos.&lt;/p&gt;

&lt;p&gt;Com o crescimento deste mercado as responsabilidades do desenvolvedor client-side mudou. Na verdade, não apenas as responsabilidades, mas a estrutura da equipe que ele está inserido mudou completamente. Fica mais granulada. Fica se parecendo mais com uma linha de montagem, só que mais específica e menor. Vamos entender basicamente o processo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2010/11/organograma.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-2275&#34; title=&#34;Processo de desenvolvimento simples&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2010/11/organograma.gif&#34; alt=&#34;&#34; width=&#34;610&#34; height=&#34;880&#34; srcset=&#34;uploads/2010/11/organograma.gif 610w, uploads/2010/11/organograma-207x300.gif 207w&#34; sizes=&#34;(max-width: 610px) 100vw, 610px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cada etapa deste processo pode ser completado por um ou mais profissionais. Podem haver processos antes do Design, como: planejamento, briefing, entrevistas, levantamento de informações e hipóteses entre outros.&lt;/p&gt;

&lt;p&gt;Também podem haver processos posteriores ao server-side: testes de funcionalidades, usabilidade, SEO, otimização de banco e código, migrações etc.&lt;/p&gt;

&lt;p&gt;Existem processos paralelos também, mas não vamos detalhar.&lt;/p&gt;

&lt;p&gt;Sabemos que em Server-side, apenas um programador pode resolver o problema. Não adianta colocar um designer ou um dev client-side. Eles não sabem programar, não querem programar, não estão afim. Na parte do client-side é a mesma coisa. O programador não tem noção de design. Ele não tem noção das peculiaridades dos browsers. Não sabe quais as propriedades funcionam nos diversos browsers, não tem noção de acessibilidade, de design e outros pontos importantes. O dev de client-side tem as seguintes responsabilidades na minha opinião:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Planejamento do HTML&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mapeamento dos elementos do layout&lt;/li&gt;
&lt;li&gt;Estudo de SEO e semântica dos elementos&lt;/li&gt;
&lt;li&gt;Estrutura do HTML padrão&lt;/li&gt;
&lt;li&gt;Otimização do código&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Implementação do HTML&lt;/li&gt;
&lt;li&gt;Planejamento do CSS&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Estudo de escalabilidade do CSS&lt;/li&gt;
&lt;li&gt;Modularização dos arquivos&lt;/li&gt;
&lt;li&gt;Nomenclatura de classes e ids&lt;/li&gt;
&lt;li&gt;Nomenclatura e padronização código&lt;/li&gt;
&lt;li&gt;Otimização do código&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Comportamento dos elementos&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Definição do comportamento (junto ao designer)&lt;/li&gt;
&lt;li&gt;Criação e padrão de funções e aplicação&lt;/li&gt;
&lt;li&gt;Modularização dos arquivos&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Veja que dividimos basicamente alguns pontos relacionados às camadas de desenvolvimento: informação, formatação e comportamento. Lembrando que na camada de comportamento o dev client-side só precisa saber a manipulação de elementos. Não precisa aprender a programar profundamente em Javascript. Basta saber um pouco de JQuery ou outra biblioteca da linguagem. Para ocasiões mais complexas há o programador client-side que é o especialista em Javascript. O cara que programa em Javascript como ninguém outro e que vai fazer funções mais complexas do que fazer um DIV aparecer e desaparecer.&lt;/p&gt;

&lt;p&gt;Mas quem vai fazer o HTML, CSS e Javascript do projeto? Depende e é aqui que entra a polêmica: em algumas empresas é preferível que o designer seja o coder client-side. Ele já vai ter feito o design dentro dos limites das compatibilidades e possibilidades do HTML/CSS/Javascript. Ele terá a autonomia de retirar ou colocar elementos no layout.&lt;/p&gt;

&lt;p&gt;Já em outras empresas o processo é separado: o designer cria o layout e depois de pronto e aprovado pelo cliente (no melhor dos mundos) o dev client-side senta e codifica o layout. Pode ser que nessa fase ainda haja uma divisão, entrando dois profissionais: um para HTML/CSS e outro para Javascript.&lt;/p&gt;

&lt;p&gt;Eu não aconselho uma granulação maior, ou seja, um profissional para HTML, outro para CSS e outro para Javascript. Não é necessário. Quem escreveu o HTML já tem em sua cabeça toda a estrutura e já entende como o CSS poderá ser escrito e por isso o processo pode ser mais demorado se outro profissional for fazer o CSS.&lt;/p&gt;

&lt;p&gt;É interessante que o designer conheça profundamente HTML e CSS. Uma por que ele conhecerá os limites de cada uma das linguagens e outra porque ele poderá codificar seus layouts em momentos que os projetos precisarem de um reforço. Não recomendo que ele conheça Javascript, não é necessário.&lt;/p&gt;

&lt;p&gt;Já o dev que fará o HTML/CSS não precisa ser um designer excelente, mas ele precisa ter noções do belo. Ser perfeccionista em distâncias, tamanhos, cores e fontes. Entender como fazer para que um browser antigo degrade o layout harmoniosamente e assim por diante.&lt;/p&gt;

&lt;p&gt;Com a divulgação e adoção do HTML5 e CSS3, o mercado de client-side deixa de ser restrito ao trio HTML/CSS/Javascript. Muitos especialistas em SVG, Canvas, XML e etc surgirão. O mercado cresceu e mudou muito. Quanto mais o mercado cresce, mas se torna necessário especializar-se em vez de ser um canivete suiço.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Templates e jQuery – parte 1</title>
      <link>https://tableless.github.io/hugo-public/templates-e-jquery-parte-1/</link>
      <pubDate>Mon, 08 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/templates-e-jquery-parte-1/</guid>
      <description>

&lt;p&gt;Na dieta diária do desenvolvedor front-end sempre esteve presente uma saladinha de HTML com JavaScript. Principalmente quando precisamos implementar um código com funcionalidades AJAX. Por exemplo, imagine que o bloco abaixo representa o retorno de um getJSON() da vida:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;for( i in noticias )
{
    html = &#39;&amp;lt;li&amp;gt;&amp;lt;h3&amp;gt;&#39; + noticias[i][&#39;titulo&#39;] + &#39;&amp;lt;/h3&amp;gt;&#39;;
    html += &#39;&amp;lt;span class=&#34;data&#34;&amp;gt;&#39; + noticias[i][&#39;data_publicacao&#39;] + &#39;&amp;lt;/span&amp;gt;&#39;;
    html += &#39;&amp;lt;span&amp;gt;&#39; + noticias[i][&#39;chamada&#39;] + &#39;&amp;lt;/span&amp;gt;&#39;;
    html += &#39;&amp;lt;span&amp;gt;&amp;lt;a href=&#34;&#39; + link + &#39;&#34;&amp;gt;Veja mais&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#39;;
}
$(&#39;#noticias&#39;).append( html );&lt;/pre&gt;

&lt;p&gt;O problema do código acima é que ele é pouco reutilizável e de baixa legibilidade, além de ser muito chato de digitar e prestar manutenção, com todas as concatenações e índices. Foi pensando nisso que o pessoal da Microsoft desenvolveu o plugin &lt;a href=&#34;http://github.com/jquery/jquery-tmpl&#34; rel=&#34;external&#34; title=&#34;jQuery.tmpl() no GitHub&#34;&gt;jQuery.tmpl()&lt;/a&gt; (tmpl de template, é claro), aceito recentemente na &lt;a href=&#34;http://api.jquery.com/jquery.tmpl/&#34; rel=&#34;external&#34; title=&#34;Página do plugin jQuery.tmpl() na documentação oficial do jQuery&#34;&gt;API oficial do jQuery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mas não confunda template com separar o JavaScript do HTML no sentido &amp;#8220;físico&amp;#8221; da coisa (colocando tudo que é JS em arquivos externos, outra boa prática para desenvolvedores). Neste texto você aprende a utilizar blocos de código HTML nas suas interações via jQuery, substituindo variáveis por conteúdos de saída/retorno.&lt;/p&gt;

&lt;h2 id=&#34;definindo-seu-template&#34;&gt;Definindo seu template&lt;/h2&gt;

&lt;p&gt;Quem já trabalhou ou já viu algum tipo de implementação de templates não vai ter muitas dificuldades para se adaptar à forma de templating do jQuery. O conceito básico é definir um modelo padrão para um bloco de código e trabalhar com substituição de variáveis. O template do bloco mostrado anteriormente seria o seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tpl_noticia = &#39;&amp;lt;li&amp;gt;&amp;lt;h3&amp;gt;${titulo}&amp;lt;/h3&amp;gt;&amp;lt;span class=&#34;data&#34;&amp;gt;${data_publicacao}&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;${chamada}&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&#34;${link}&#34;&amp;gt;Veja mais&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#39;;&lt;/pre&gt;

&lt;p&gt;Abaixo você confere uma chamada simples para nosso template. (Note que os dados de exemplo estão armazenados em um objeto JSON.)&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var noticias = [
    {
        titulo : &#39;Notícia 1&#39;,
        data_publicacao : &#39;28/10/2010 20h31&#39;,
        chamada : &#39;Chamada da notícia 1&#39;,
        link : &#39;/noticia-1/&#39;,
    },
    {
        titulo : &#39;Notícia 2&#39;,
        data_publicacao : &#39;28/10/2010 20h32&#39;,
        chamada : &#39;Chamada da notícia 2&#39;,
        link : &#39;/noticia-2/&#39;,
    },
    {
        titulo : &#39;Notícia 3&#39;,
        data_publicacao : &#39;28/10/2010 20h33&#39;,
        chamada : &#39;Chamada da notícia 3&#39;,
        link : &#39;/noticia-3/&#39;,
    }
];

$(function(){
    // aplica o template tpl_noticias aos dados e adiciona a lista ao elemento ul
    $.tmpl( tpl_noticia, noticias ).appendTo( &#39;ul#noticias&#39; );
});&lt;/pre&gt;

&lt;p&gt;Além do .appendTo(), você pode ainda utilizar os seguintes métodos para trabalhar co templates: .prependTo(), .insertAfter() e .insertBefore().&lt;/p&gt;

&lt;h2 id=&#34;tipos-de-dados&#34;&gt;Tipos de dados&lt;/h2&gt;

&lt;h3 id=&#34;var&#34;&gt;${var}&lt;/h3&gt;

&lt;p&gt;Provavelmente a que você vai utilizar com mais frequência. Representa variáveis ou expressões JavaScript, é um atalho para {= expr/var}.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tpl = &#39;&amp;lt;li&amp;gt;${nome}&amp;lt;/li&amp;gt;&#39;;
                
// exemplo de express&amp;atilde;o
var tpl = &#39;&amp;lt;p class=&#34;&#34;&amp;gt;${formataData( data_publicacao )}&amp;lt;/p&amp;gt;&#39;;

var formataData = function( sdata )
{
    var meses = { 
        1 : &#39;Janeiro&#39;, 2 : &#39;Fevereiro&#39;, 3 : &#39;Mar&amp;ccedil;o&#39;, 4 : &#39;Abril&#39;, 
        5 : &#39;Maio&#39;, 6 : &#39;Junho&#39;, 7 : &#39;Julho&#39;, 8 : &#39;Agosto&#39;, 9 : &#39;Setembro&#39;, 
        10 : &#39;Outubro&#39;, 11 : &#39;Novembro&#39;, 12 : &#39;Dezembro&#39; 
    };
    var mes = parseInt( sdata.substr( 3, 2 ), 10 );
    var dia = sdata.substr( 0, 2 );
    var ano = sdata.substr( 6, 4 );
    return dia + &#39; de &#39; + meses[mes] + &#39; de &#39; + ano;
};&lt;/pre&gt;

&lt;h3 id=&#34;each-each&#34;&gt;{{each}}{{/each}}&lt;/h3&gt;

&lt;p&gt;Define um loop entre elementos de um array ou objeto javascript, dentro do escopo do template. Assim como a tag para expressões, também aceita métodos para tratar o valor. Suas variáveis internas são $index e $value (chave e valor do array/objeto, respectivamente).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tpl_artigo = &#39;&amp;lt;p&amp;gt;&amp;lt;h3&amp;gt;${titulo}&amp;lt;/h3&amp;gt;{{each autores}}${$value.toUpperCase()}&amp;lt;br /&amp;gt;{{/each}}&amp;lt;/p&amp;gt;&#39;;

var artigos = [
    { 
        titulo: &#39;Javascript &amp;amp; Acessibilidade&#39;, 
        autores: [&#39;Davi Ferreira&#39;, &#39;Let&amp;iacute;cia Stallone&#39;],
        abstract: &#39;&amp;lt;strong&amp;gt;Acessibilidade e Javascript&amp;lt;/strong&amp;gt;&#39;,
        },
    { 
        titulo: &#39;Humor no Javascript&#39;, 
        autores: [&#39;Let&amp;iacute;cia Stallone&#39;],
        abstract: &#39;&amp;lt;strong&amp;gt;Javascript pode ser bem engra&amp;ccedil;ado&amp;lt;/strong&amp;gt;&#39;,
    },
    { 
        titulo: &#39;Boas pr&amp;aacute;ticas&#39;, 
        autores: &#39;&#39;,
        abstract: &#39;&amp;lt;strong&amp;gt;Boas pr&amp;aacute;ticas de desenvolvimento web&amp;lt;/strong&amp;gt;&#39;,
    }
];&lt;/pre&gt;

&lt;h3 id=&#34;if-else-if&#34;&gt;{{if}}{{else}}{{/if}}&lt;/h3&gt;

&lt;p&gt;Implementa condicionais dentro do template. Executa (ou não) uma determinada condição, baseada no valor/retorno da variável/expressão. Esta tag interpreta como &lt;em&gt;false&lt;/em&gt; qualquer valor nulo, 0 ou &lt;em&gt;undefined&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tpl_artigo = &#39;&amp;lt;li&amp;gt;&amp;lt;h3&amp;gt;${titulo}&amp;lt;/h3&amp;gt;{{if autores.length}}Autor(es): {{else}}sem autor cadastrado{{/if}}{{each autores}}${$value.toUpperCase()}&amp;lt;br /&amp;gt;{{/each}}&amp;lt;/li&amp;gt;&#39;;&lt;/pre&gt;&lt;/p&gt; 

### {{html}}

Caso você tente dar a saída no template de um conteúdo com tags HTML o jquery.tmpl() vai transformar as marcações em texto puro. Para que a saída aconteça também em HTML é necessário utilizar a tag especial {{html}}. 

&lt;pre class=&#34;lang-javascript&#34;&gt;var tpl_artigo = &#39;&amp;lt;li&amp;gt;&amp;lt;h3&amp;gt;${titulo}&amp;lt;/h3&amp;gt;{{if autores.length}}Autor(es): {{else}}sem autor cadastrado{{/if}}{{each autores}}${$value.toUpperCase()}&amp;lt;br /&amp;gt;{{/each}}{{html abstract}}&amp;lt;/li&amp;gt;&#39;;&lt;/pre&gt;

&lt;p&gt;Deu pra perceber a potencialidade deste plugin para aplicações mais elaboradas, com diversas interações via AJAX? Você pode ter um .js só para seus modelos e parar de concatenar tudo e todos diretamente no código. As tags são bastante flexíveis, permitindo tanto variáveis simples como expressões mais avançadas.&lt;/p&gt;

&lt;p&gt;Na parte 2 deste artigo veremos como implementar os templates com caching e ainda as tags avançadas {{wrap}} e {{tmpl}}.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sections: elemento article – Parte 4</title>
      <link>https://tableless.github.io/hugo-public/section-elemento-article/</link>
      <pubDate>Mon, 25 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/section-elemento-article/</guid>
      <description>

&lt;p&gt;Você deve marcar a área do conteúdo do seu site com um DIV com um ID do tipo: conteudo, texto, main, content e etc&amp;#8230; Normalmente esta é uma área nobre. O Google e outros sistemas de busca não tem com saberem onde fica o bloco do texto principal do site. Não havia nenhuma indicação dizendo que determinado elemento é se trata do bloco que carrega a informação principal do site. O &lt;strong&gt;article&lt;/strong&gt; surgiu para suprir essa necessidade.&lt;/p&gt;

&lt;h3 id=&#34;o-que-a-especificação-diz&#34;&gt;O que a especificação diz&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;The article element represents a component of a page that consists of a self-contained composition in a document, page, application, or site and that is intended to be independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O elemento &lt;strong&gt;article&lt;/strong&gt; representa uma seção de conteúdo do site, que forma uma parte independente do documento. Dentro do &lt;strong&gt;article&lt;/strong&gt; você colocará uma post de blog, artigo, texto, posts em fóruns e etc. Você pode marcar os comentários de um blog com &lt;strong&gt;article&lt;/strong&gt;. Todo o conteúdo do &lt;strong&gt;article&lt;/strong&gt; pode ser reutilizado em feeds ou outros meios de &amp;#8220;sindicação&amp;#8221; (syndication).&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;article&lt;/strong&gt; pode conter uma estrutura como essa:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;article&gt; &lt;header&gt;&lt;/p&gt;

&lt;h1 id=&#34;título-do-post&#34;&gt;Título do post&lt;/h1&gt;

&lt;p&gt;&lt;time datetime=&#34;12-03-1983&#34; pubdate=&#34;pubdate&#34;&gt;03 de Dezembro de 1983&lt;/time&gt;&lt;/p&gt;

&lt;p&gt;Texto de introdução.&lt;/header&gt;&lt;/p&gt;

&lt;h2 id=&#34;um-outro-título&#34;&gt;Um outro título&lt;/h2&gt;

&lt;p&gt;Texto do post.&lt;/p&gt;

&lt;p&gt;Texto do post.&lt;/p&gt;

&lt;p&gt;Texto do post.&lt;/article&gt;&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Veja que o &lt;strong&gt;article&lt;/strong&gt; envolve tudo o que é relacionado ao conteúdo do post: data, introdução, título e etc. Você não precisa agregar tudo isso no &lt;strong&gt;article&lt;/strong&gt; se não quiser.&lt;/p&gt;

&lt;h3 id=&#34;de-olho-na-semântica&#34;&gt;De olho na semântica&lt;/h3&gt;

&lt;p&gt;Alguns podem confundir os elementos de &lt;strong&gt;article&lt;/strong&gt;, &lt;strong&gt;section&lt;/strong&gt; e &lt;strong&gt;div&lt;/strong&gt;. Entenda que o &lt;strong&gt;article&lt;/strong&gt; é um elemento mais específico que o &lt;strong&gt;section&lt;/strong&gt; e o &lt;strong&gt;div&lt;/strong&gt;. O &lt;strong&gt;article&lt;/strong&gt; indica que um determinado bloco leva um conteúdo importante. O &lt;strong&gt;section&lt;/strong&gt; é apenas um bloco de separação de assuntos diferentes. O &lt;strong&gt;div&lt;/strong&gt;, o mais genérico de todos apenas é aplicado para separar elementos em blocos, por isso ele não carrega nenhum significado semântico. Para entender melhor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para informação e conteúdo que fará sentido se visto fora do seu site como em leitores de RSS ou outros meios, utilize o &lt;strong&gt;article&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Para separar e organizar conteúdos de diversos assuntos em blocos diferentes, utilize o &lt;strong&gt;section&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Para utilização não semântica, detalhes genéricos e etc, utilize &lt;strong&gt;div&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sections: elemento aside – Parte 3</title>
      <link>https://tableless.github.io/hugo-public/sections-elemento-aside/</link>
      <pubDate>Wed, 13 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/sections-elemento-aside/</guid>
      <description>&lt;p&gt;Engana-se se o você acha que o &lt;code&gt;aside&lt;/code&gt; serve apenas para fazer &amp;#8220;sidebars&amp;#8221;. Lembre-se de outros blocos para utilizamos para expor algum tipo de informação referente ao assunto principal. Isso acontece muito em livros: dependendo do livro que você estiver lendo, como um livro técnico, ele pode ter caixas de informação durante todo o fluxo de texto do livro. Essas caixas normalmente servem para chamar sua atenção para alguma informação importante ou outras informações que agregarão mais ao conteúdo principal. O elemento &lt;code&gt;aside&lt;/code&gt; fará esse papel quando se tratar de websites. Logo, tenha em mente: o elemento &lt;code&gt;aside&lt;/code&gt; agrega mais informação ao conteúdo principal.&lt;/p&gt;

&lt;p&gt;Algumas utilidades do &lt;code&gt;aside&lt;/code&gt;: citações ou sidebars, agrupamento de publicidade, grupos e blocos de navegação e para qualquer outro conteúdo que é separado do conteúdo principal.&lt;/p&gt;

&lt;p&gt;Dentro do &lt;code&gt;aside&lt;/code&gt; você pode agregar por exemplo grupos de elementos nav, headers, sections e etc. Isso te permite fazer um menu lateral separando os grupos de informações:&lt;/p&gt;

&lt;pre lang=&#34;html&#34; line=&#34;1&#34;&gt;&amp;lt;aside id=&#34;menulateral&#34;&gt;
   &amp;lt;nav&gt;
       

&lt;h3&gt;
  Esportes
&lt;/h3&gt;
       

&lt;ul&gt;
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Fórmula 1&lt;/a&gt;
  &lt;/li&gt;
            
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Futebol&lt;/a&gt;
  &lt;/li&gt;
            
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Baskete&lt;/a&gt;
  &lt;/li&gt;
            
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Voley&lt;/a&gt;
  &lt;/li&gt;
         
&lt;/ul&gt;
   &amp;lt;/nav&gt;

   &amp;lt;nav&gt;
       

&lt;h3&gt;
  Política
&lt;/h3&gt;
       

&lt;ul&gt;
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Eleições 2010&lt;/a&gt;
  &lt;/li&gt;
            
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Urna eletrônica&lt;/a&gt;
  &lt;/li&gt;
            
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Candidatos&lt;/a&gt;
  &lt;/li&gt;
         
&lt;/ul&gt;
   &amp;lt;/nav&gt;
&amp;lt;/aside&gt;
&lt;/pre&gt;

&lt;p&gt;Note que não utilizamos nenhum &lt;code&gt;div&lt;/code&gt;, pelo contrário, utilizamos apenas tags que trazem algum tipo de significado semântico. Neste exemplo, indicamos para o navegador, aplicação, sistema de busca &amp;#8211; qualquer outra coisa que acessará nosso código &amp;#8211; que aquele é bloco lateral, e que cada grupo de &lt;code&gt;nav&lt;/code&gt; é referente um assunto.&lt;/p&gt;

&lt;p&gt;O elemento &lt;code&gt;aside&lt;/code&gt; pode ir também dentro de um elemento &lt;code&gt;article&lt;/code&gt; como uma caixa de notação ou algo do genêro. Nesse caso, quando o usuário imprimir, você pode dar ênfase a esta caixa como se fosse um box de informação, como nos livros.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sections: elemento nav – Parte 2</title>
      <link>https://tableless.github.io/hugo-public/sections-elemento-nav/</link>
      <pubDate>Thu, 30 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/sections-elemento-nav/</guid>
      <description>&lt;p&gt;Se você não leu o &lt;a href=&#34;http://tableless.com.br/sections-html5&#34;&gt;primeiro artigo da série&lt;/a&gt;, é interessante que o faça agora.&lt;/p&gt;

&lt;p&gt;O elemento &lt;code&gt;nav&lt;/code&gt; representa uma seção da página que contém link para outras páginas ou partes do mesmo website. Resumindo: &lt;code&gt;nav&lt;/code&gt; é uma seção de links de navegação.&lt;/p&gt;

&lt;p&gt;Essa definição é muito mais complexa do que se imagina. A tag &lt;code&gt;nav&lt;/code&gt; pode agrupar uma série de elementos que anteriormente faríamos com &lt;code&gt;div&lt;/code&gt;. Nem todos os grupos de links da página precisam ser um elemento &lt;code&gt;nav&lt;/code&gt;, mas apenas as seções que consitem em blocos principais. Imagine uma sidebar (agora descrito com a tag &lt;code&gt;aside&lt;/code&gt;) com uma série de links, como por exemplo uma sidebar de um portal como o G1, R7, UOL e etc&amp;#8230; Nestas sidebars é normal você encontrar os diversos links das diversas categorias de assuntos. Anteriormente, se quiséssemos agrupar por exemplo um Título e uma lista de links faríamos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;categ categ-esporte&#34;&amp;gt;
  &amp;lt;h3&amp;gt;Esporte&amp;lt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Copa 2014&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Brasileir&amp;atilde;o&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;F&amp;oacute;rmula 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Baskete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Resolvia nosso problema de formatação. Poderíamos utilizar &lt;code&gt;div&lt;/code&gt; que envolve o título e a lista para fazer algum detalhe visual e etc. Mas a nível de informação, não havia nenhuma indicação de que o título estivesse ligado ao conteúdo. Não há nenhuma referência de que o título ESPORTE apresenta a lista de links sobre esporte abaixo. Os sistemas de busca não podem se basear apenas na posição dos elementos, é algo muito genérico para eles confirmarem que a lista e o título que a precede estão ligados em um mesmo assunto.&lt;/p&gt;

&lt;p&gt;Com o HTML5, isso muda. Veja o código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;nav class=&#34;categ categ-esporte&#34;&amp;gt;
  &amp;lt;h3&amp;gt;Esporte&amp;lt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Copa 2014&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Brasileir&amp;atilde;o&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;F&amp;oacute;rmula 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Baskete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Com a tag &lt;code&gt;nav&lt;/code&gt;, há uma indicação de que aquele grupo é uma seção (&lt;code&gt;nav&lt;/code&gt; é um tipo de &lt;code&gt;section&lt;/code&gt;. Enquanto a tag &lt;code&gt;section&lt;/code&gt; serve para indicar seções no site, a tag &lt;code&gt;nav&lt;/code&gt; indica que um determinado grupo é uma seção de navegação) é um bloco de navegação.&lt;/p&gt;

&lt;p&gt;Dentro da &lt;code&gt;nav&lt;/code&gt; você pode agrupar uma série de listas de links.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;nav&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Copa 2014&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Brasileir&amp;atilde;o&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;F&amp;oacute;rmula 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Baskete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;

  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Educa&amp;ccedil;&amp;atilde;o&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Dicion&amp;aacute;rios&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Vestibular&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;

  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Cotidiano&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Pol&amp;iacute;tica&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Jornais&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A tag &lt;code&gt;nav&lt;/code&gt; também pode estar em todos os elementos do HTML. Você pode colocá-la no &lt;code&gt;header&lt;/code&gt; para definir menus, no &lt;code&gt;footer&lt;/code&gt; para definir grupos de links, sidebars, articles e etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6 dicas para evitar problemas de incompatibilidade entre browsers.</title>
      <link>https://tableless.github.io/hugo-public/evite-incompatibilidade-browsers/</link>
      <pubDate>Tue, 28 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/evite-incompatibilidade-browsers/</guid>
      <description>

&lt;p&gt;Nas últimas semanas muito falou-se das novas versões de &lt;em&gt;browsers&lt;/em&gt; que serão colocadas à disposição dos usuários nos próximos meses. Alguns esperam para ver se a gigante Microsoft recuperará o mercado e outros acompanham as novidades de Mozilla e Google com suas versões beta do Firefox 4 e do Chrome 6. É inevitável perceber a preocupação de todos em adaptar-se às necessidades dos usuários, padrões de desenvolvimento web e compatibilidade com o novo protagonista da web &amp;#8211; o HTML5 &amp;#8211; porém em meio à esses lançamentos, fica a pergunta: enquanto isso, como agir com os atuais &lt;em&gt;browsers&lt;/em&gt;? Como criar estruturas de &lt;em&gt;front-end&lt;/em&gt; para que os parâmetros do CSS 2 sejam igualmente aplicados à todos?&lt;/p&gt;

&lt;p&gt;Essas perguntas já travaram várias batalhas entre desenvolvedores e navegadores, tendo como principal vilão o Internet Explorer em suas versões 6, 7 e 8 que além de não ser compatível com os demais browsers também não é compatível entre suas próprias versões, dificultando a criação de padrões e a exclusão de &lt;em&gt;hacks&lt;/em&gt;. De qualquer forma, nosso trabalho é visualizar igualmente as interfaces em todos os navegadores &amp;#8211; o chamado &lt;em&gt;crossbrowser&lt;/em&gt; &amp;#8211; e para isso, apresento algumas possibilidades e propriedades que podem ser inseridas aos seus arquivos css para evitar esses problemas sem utilizar &lt;em&gt;hacks&lt;/em&gt;, “gambiarras” ou arquivos diferentes para cada &lt;em&gt;browser.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;dica-nº-1-organização-x-manutenção&#34;&gt;Dica nº 1: Organização x manutenção.&lt;/h3&gt;

&lt;p&gt;Em seu artigo, a &lt;a href=&#34;http://tableless.com.br/6-estrategias-para-melhorar-a-organizacao-do-seu-css-2#author-image&#34;&gt;Talita Pagani&lt;/a&gt; apresenta &lt;a href=&#34;http://tableless.com.br/6-estrategias-para-melhorar-a-organizacao-do-seu-css-2&#34;&gt;estratégias para melhorar a organização dos arquivos CSS&lt;/a&gt; e aproveito o gancho para aconselhar: é indiscutível que, em se tratando de manutenção ou a criação de arquivos CSS, a organização seja fundamental para encontrarmos os problemas quando as incompatibilidades surgirem. Então, uma estrutura de classes, ID&amp;#8217;s e identação de elementos, parâmetros e valores é ponto crucial para manutenção e desenvolvimento de estruturas &lt;em&gt;html&amp;amp;css&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;dica-nº-2-elementos-com-propriedades-pré-definidas&#34;&gt;Dica nº 2: Elementos com propriedades pré-definidas.&lt;/h3&gt;

&lt;p&gt;Muitos desenvolvedores não sabem, mas alguns elementos do HTML tem propriedades pré-definidas que, quando começamos a trabalhar com a diagramação podem por exemplo, nos trazer dificuldades de encontrar aquele “espaço a mais” que incomoda tanto. Então, inicialmente, vamos eliminar todas estas formatações criando uma declaração que elimina os principais parâmetros pré-definidos que “bagunçam” a interface de &lt;em&gt;browser&lt;/em&gt; para &lt;em&gt;browser:&lt;/em&gt; &lt;em&gt;margin’s&lt;/em&gt; e &lt;em&gt;padding’s.&lt;/em&gt; Para tanto, utilizaremos o selector universal (*) no ínicio da folha de estilo eliminando os espaçamentos internos ou externos dos elementos:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]*{&lt;/p&gt;

&lt;p&gt;padding: 0;&lt;/p&gt;

&lt;p&gt;margin:0;&lt;/p&gt;

&lt;p&gt;}[/cc]&lt;/p&gt;

&lt;p&gt;Caso em sua estrutura tenha várias folhas de estilo, separadas por página (home.css), aconselho que seja criado um arquivo específico para a declaração desta propriedade e valores zerados, com o nome de &amp;#8220;geral.css&amp;#8221; ou &amp;#8220;reset.css&amp;#8221;. Assim, posteriormente ele poderá ser linkado à página ou inserido, via parâmetro &lt;strong&gt;@import&lt;/strong&gt;,  às outras folhas de estilo incorporando às demais declarações.&lt;/p&gt;

&lt;p&gt;Se necessário utilizar &lt;em&gt;margin’s&lt;/em&gt; ou &lt;em&gt;padding’s&lt;/em&gt; para alguns elementos, meu conselho é que você crie classes específicas para cada um deles, pois isso vai lhe garantir um controle maior de qual elemento tem uma propriedade que pode causar alguma diferença em larguras ou alturas nos blocos do HTML.&lt;/p&gt;

&lt;p&gt;Há um artigo aqui no Tableless que explica esse conceito chamado &lt;a href=&#34;http://tableless.com.br/css-reset&#34; title=&#34;Como fazer um reset nas propriedades do CSS&#34;&gt;CSS Reset&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;dica-nº-3-largura-e-altura-x-propriedade-padding&#34;&gt;Dica nº 3: largura e altura x propriedade &lt;em&gt;padding&lt;/em&gt;.&lt;/h3&gt;

&lt;p&gt;Alguns desenvolvedores também não sabem, mas quando inserimos a propriedade &lt;em&gt;width&lt;/em&gt; ou &lt;em&gt;height&lt;/em&gt; à um elemento e adicionamos a propriedade &lt;em&gt;padding&lt;/em&gt; à esse mesmo elemento, os valores estabelecidos serão somados. Por exemplo, se tenho um elemento com &lt;em&gt;width: 640px&lt;/em&gt; e estabeleço o parâmetro &lt;em&gt;padding-left: 20px&lt;/em&gt;, meu elemento terá ao todo &lt;em&gt;660px&lt;/em&gt; de largura. Portanto, quando utilizar a propriedade &lt;em&gt;padding&lt;/em&gt;, tanto os valores de largura quanto os de altura, devem ser reduzidos proporcionalmente para que seu bloco continue com o mesmo tamanho e com um espaçamento interno necessário.&lt;/p&gt;

&lt;p&gt;No nosso exemplo, o correto então seria: &lt;em&gt;width: 620px&lt;/em&gt; e &lt;em&gt;padding-left: 20px&lt;/em&gt;. Ficando o elemento todo com uma largura total de &lt;em&gt;640px&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;].blocoNoticias{&lt;/p&gt;

&lt;p&gt;width: 620px;&lt;/p&gt;

&lt;p&gt;padding-left: 20px;&lt;/p&gt;

&lt;p&gt;}[/cc]&lt;/p&gt;

&lt;h3 id=&#34;dica-nº-4-colunas-x-propriedade-float&#34;&gt;Dica nº 4: colunas x propriedade float.&lt;/h3&gt;

&lt;p&gt;Toda vez que utilizamos a propriedade &lt;em&gt;float&lt;/em&gt; para formatação de colunas em nossa página, temos que nos lembrar de regras básicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;#8211; Se as colunas estão inseridas dentro de algum outro elemento, você terá que obrigatoriamente usar, neste elemento “externo”, a propriedade &lt;em&gt;display:table&lt;/em&gt; e a propriedade &lt;em&gt;height:auto&lt;/em&gt;. Caso contrário, no Firefox, seu background pode não aparecer ou tão pouco obedecer a altura da colunas.&lt;/li&gt;
&lt;li&gt;&amp;#8211; Se após as colunas, existir um outro elemento com propriedade horizontal, formando uma linha, ele obrigatoriamente deve receber a propriedade &lt;em&gt;clear:both&lt;/em&gt;, para que ele não incorpore a propriedade &lt;em&gt;float&lt;/em&gt; inserida nas colunas e fique logo abaixo delas.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dica-nº-5-propriedade-border-para-visualizar-os-problemas&#34;&gt;Dica nº 5: Propriedade border para visualizar os problemas.&lt;/h3&gt;

&lt;p&gt;Para quem já está com toda a página pronta e não consegue encontrar e resolver alguns problemas como uma coluna embaixo da outra ou um texto ultrapassando o limite de seu bloco, insira a propriedade &lt;em&gt;border:solid 1px red&lt;/em&gt; ao elemento e visualize na tela a altura e largura deste bloco. Com isso você vai conseguir perceber qual elemento está extrapolando o limite ou qual espaçamento está “empurrando” os demais blocos.&lt;/p&gt;

&lt;p&gt;Visualizar o problema na tela, facilita a resolução.&lt;/p&gt;

&lt;h3 id=&#34;dica-nº-6-verifique-sua-página-desde-o-início-em-todos-os-browsers&#34;&gt;Dica nº 6: verifique sua página, desde o início, em todos os &lt;em&gt;browsers.&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;É muito mais fácil começar uma estrutura &lt;em&gt;html&amp;amp;css&lt;/em&gt; já verificando a inserção de cada elemento em todos os &lt;em&gt;browsers&lt;/em&gt; ao mesmo tempo, do que desenvolver tudo visualizando apenas em um dos navegadores e após finalizar o projeto, visualizar nos demais. Com toda certeza, se este cuidado não for tomado, você vai se deparar com uma interface com cara de “jogos de &lt;em&gt;puzzle&lt;/em&gt; embaralhados” em algum momento e vai ser ainda mais difícil resolver os problemas.&lt;/p&gt;

&lt;p&gt;Essas são apenas algumas das tantas possibilidades que temos para evitar o uso de hacks ou “jeitinhos” na construção de nossos arquivos html&amp;amp;css no trabalho de &lt;em&gt;crossbroswers&lt;/em&gt;. De qualquer forma, me mantenho na torcida de que com a nova geração, tenhamos muito mais chances de desenvolver um código html melhor estruturado e um css com propriedades visuais que hoje ainda não podemos utilizar, do que ficar estudando os erros dos navegadores para encontrarmos os acertos dos desenvolvedores &amp;#8211; quase como tiros no escuro.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sections: seções do HTML5 – Parte 1</title>
      <link>https://tableless.github.io/hugo-public/sections-html5/</link>
      <pubDate>Thu, 23 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/sections-html5/</guid>
      <description>

&lt;p&gt;A estrutura de um site é dividida em diversas seções. Cada seção representa uma fatia do layout e também representa um grupo de conteúdo. Cada um destes grupos tem seu assunto específico. Nas minhas aulas eu costumava apresentar estas seções como &lt;strong&gt;seções mestres&lt;/strong&gt; ou &lt;strong&gt;seções principais&lt;/strong&gt;. Normalmente para descrever em HTML estas seções, usávamos a tag &lt;code&gt;div&lt;/code&gt;. O elemento &lt;code&gt;div&lt;/code&gt; é um elemento genérico que serve para criar DIVISÕES. Estas divisões não tinham significado semântico nenhum, não levavam nenhum tipo de informação &amp;#8220;extra&amp;#8221;, mas a nível de formatação resolvia nosso problema. Nós agrupávamos o conteúdo das seções e conseguíamos distinguir cada seção nomeando os divs com CLASSES e IDs e assim formatávamos o código com CSS.&lt;/p&gt;

&lt;p&gt;A nível de semântica ou seja, para entregar informação útil para o usuário, sistemas ou aplicações, estas seções não eram eficazes. Não havia como distinguir um cabeçalho de um rodaé. Não era possível diferenciá-los pelo nome porque cada desenvolvedor dava seu próprio nome para o elemento: alguns chamavam de header, outro cabeçalhos, outros testeira (acredite se quiser) e assim por diante. Por estes motivos que no &lt;strong&gt;HTML5&lt;/strong&gt; as seções ganharam mais significado.&lt;/p&gt;

&lt;h3 id=&#34;cada-coisa-em-seu-lugar&#34;&gt;Cada coisa em seu lugar&lt;/h3&gt;

&lt;p&gt;As novas seções também fazem divisões, mas além disso elas servem significado para o código. Neste novo cenário o &lt;code&gt;div&lt;/code&gt; perdeu um pouco o foco e será utilizado em detalhes. Ele ficou bem mais genérico que antes. Essa é uma das razões que o &lt;code&gt;div&lt;/code&gt; é coisa do passado. Abaixo veja uma breve descrição dos novos elementos de seção do HTML5:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;HEADER&lt;/dt&gt;
&lt;dd&gt;Define um grupo de títulos ou o cabeçalho de uma determinada seção.&lt;/dd&gt;
&lt;dt&gt;FOOTER&lt;/dt&gt;
&lt;dd&gt;Define o rodapé das seções ou da página.&lt;/dd&gt;
&lt;dt&gt;NAV&lt;/dt&gt;
&lt;dd&gt;Define um grupo ou bloco de links de navegação.&lt;/dd&gt;
&lt;dt&gt;ASIDE&lt;/dt&gt;
&lt;dd&gt;Define um elemento lateral que pode conter blocos de navegação (NAVs), citações e outras informações que costumamos colocar em uma sidebar.&lt;/dd&gt;
&lt;dt&gt;ARTICLE&lt;/dt&gt;
&lt;dd&gt;Define a área onde há um artigo, texto, redação, conteúdo e etc&amp;#8230;&lt;/dd&gt;
&lt;dt&gt;SECTION&lt;/dt&gt;
&lt;dd&gt;Define um bloco ou um grupo de um assunto específico. É importante entender que a section agrupa diversos elementos que tenham relação entre si. Por exemplo, se há uma área no site que há links, conteúdo, imagens e etc de um assunto em comum, você agrupará esses elementos com uma section. Nesse caso, ele entrou no lugar daquele div que fazíamos para dividir grandes blocos de assuntos em comum.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;e-o-div-exemplo&#34;&gt;E o div? Exemplo.&lt;/h3&gt;

&lt;p&gt;E onde entra o &lt;code&gt;div&lt;/code&gt;? O Div servirá para agruparmos elementos dentro destes sections ou fazer outros detalhes que não precisam de significado semântico, apenas visual.&lt;/p&gt;

&lt;p&gt;Imagine que exista uma section chamada NOTÍCIAS:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section id=&#34;noticias&#34;&amp;gt;
...
&amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Dentro dessa &lt;code&gt;section&lt;/code&gt; há 3 colunas de assuntos diversos ou randomizados que dividem as chamadas.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section id=&#34;noticias&#34;&amp;gt;
   &amp;lt;div&amp;gt;
      ...
   &amp;lt;/div&amp;gt;
   &amp;lt;div&amp;gt;
      ...
   &amp;lt;/div&amp;gt;
   &amp;lt;div&amp;gt;
      ...
   &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Suponha que cada uma colunas seja de um assunto diferente, por exemplo: Esporte, Política e Educação. Aí nesse caso não usaríamos &lt;code&gt;div&lt;/code&gt; mas sim outras &lt;code&gt;sections&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section id=&#34;noticias&#34;&amp;gt;
   &amp;lt;section id=&#34;esporte&#34;&amp;gt;
      ...
   &amp;lt;/section&amp;gt;
   &amp;lt;section id=&#34;politica&#34;&amp;gt;
      ...
   &amp;lt;/section&amp;gt;
   &amp;lt;section id=&#34;educacao&#34;&amp;gt;
      ...
   &amp;lt;/section&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Você poderia utilizar DIVs com os IDs? Sim, claro. Mas lembre-se que o DIV é genérico, para os sistemas de busca, leitores de tela, aplicações e etc, os DIVs não indicam seções de conteúdo, mas o elemento &lt;code&gt;section&lt;/code&gt; sim.&lt;/p&gt;

&lt;p&gt;Há uma polêmica ainda com algumas ordens nas estruturas. No exemplo acima colocamos &lt;code&gt;sections&lt;/code&gt; em vez de &lt;code&gt;divs&lt;/code&gt;. Poderíamos ter colocado &lt;code&gt;article&lt;/code&gt; dentro da &lt;code&gt;section&lt;/code&gt; principal. Não vou entrar no que é mais certo ou no que é mais semântico porque neste contexto, ainda é subjetivo. Há alguns conceitos que iremos amadurecer durante um tempo. Contudo, temos que começar por algum lugar e claro, devemos estudar as melhores formas tanto para o projeto quanto para a semântica do código.&lt;/p&gt;

&lt;p&gt;Você já deve ter lido isso aqui, mas lembre-se: semântica é o nome do jogo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gradientes em CSS</title>
      <link>https://tableless.github.io/hugo-public/gradientes-em-css/</link>
      <pubDate>Wed, 22 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/gradientes-em-css/</guid>
      <description>

&lt;p&gt;Uma das vantagens do CSS3 é a economia de imagem. É normal utilizar imagens para tratar partes do layout que são exclusivamente visuais. Um exemplo é o uso de gradientes. Até agora a única maneira de produzir gradientes era com imagens. E dá um trabalhão caso você queira modificá-la ou caso você esteja produzindo um site baseado em themes. Com CSS3 você consegue produzir gradientes diretamente pelo código CSS. Isso dá possibilidades para manipulação via Javascript e outros frameworks. Sem contar que a manutenção é muito mais suave.&lt;/p&gt;

&lt;h3 id=&#34;suporte-de-browser&#34;&gt;Suporte de browser&lt;/h3&gt;

&lt;p&gt;Firefox, Safari, Chrome e IE5+ suportam gradientes. O Opera irá suportar um pouco mais pra frente. Parece que essa feature já está nos planos do browser. O problema é que a sintaxe utilizada é diferente para cada um deles. O que não deixa é exatamente um problemão, contanto que o resultado visual seja parecido ou igual.&lt;/p&gt;

&lt;h3 id=&#34;sintaxe&#34;&gt;Sintaxe&lt;/h3&gt;

&lt;p&gt;O gradiente será feito no background. Você define a direção do gradiente, onde ele começará e terminará, e quais as cores que farão a transição.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Para Mozilla/Gecko (Firefox etc) */
background: -moz-linear-gradient(top, #666, #fff) repeat-X;

/* Para WebKit (Safari, Google Chrome etc) */
background: -webkit-gradient(linear, left top, left bottom, from(#666), to(#fff)) repeat-X;

/* Para IE 8 */
-ms-filter: &#34;progid:DXImageTransform.Microsoft.gradient(startColorstr=#666, endColorstr=#FFFFFFFF)&#34;;

/* Para IE 5.5 - 7 */
filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#666, endColorstr=#FFFFFFFF);
&lt;/pre&gt;

&lt;p&gt;Estou torcendo para que os browsers resolvam logo essa questão da sintaxe.&lt;/p&gt;

&lt;p&gt;Veja abaixo como fazemos um gradiente radial. Infelizmente não funcionará no IE.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Para Mozilla/Gecko (Firefox etc) */
background: -moz-radial-gradient(40% 40%, farthest-side, #666, #FFF) repeat-X;

/* Para WebKit (Safari, Google Chrome etc) */
background: -webkit-gradient(radial, 20% 20%, 20, 20% 20%, 60, from(#666), to(#FFF)) repeat-X;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2010/09/gradiente.html&#34;&gt;Veja um exemplo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://developer.apple.com/library/safari/#documentation/InternetWeb/Conceptual/SafariVisualEffectsProgGuide/Gradients/Gradients.html&#34;&gt;biblioteca de referência do Safari&lt;/a&gt; tem alguns exemplos muito bons sobre o assunto. Contudo, acho a sintaxe do webkit mais difícil de ser entendida. Aqui tem um &lt;a href=&#34;http://www.westciv.com/tools/gradients/index.html&#34;&gt;simulador bacana para webkit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para gradientes simples e para ocasiões onde o Internet Explorer não seja requisitado, esse recurso é interessante. Se o IE for realmente uma pedra no seu caminho e você precisa fazer uma versão com imagens para ele, aconselho deixar essa técnica para lá e fazer uma versão com imagens para todos os browsers. Você vai ter o trabalho já de produzir as imagens, recortá-las e etc, não vale a pena manter dois tipos de códigos.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>