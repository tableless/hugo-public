<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Versionamento on Tableless</title>
    <link>http://tableless.com.br/tags/versionamento/index.xml</link>
    <description>Recent content in Versionamento on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/versionamento/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git com Interface Gr√°fica</title>
      <link>http://tableless.com.br/git-com-interface-grafica/</link>
      <pubDate>Mon, 26 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/git-com-interface-grafica/</guid>
      <description>&lt;p&gt;Voc√™ deve n√£o gostar de usar Git no terminal do windows, mac ou linux. As vezes voc√™ faz muitas altera√ß√µes e √© chato voc√™ parar a todo momento para commitar altera√ß√µes separadas. Prejudica o fluxo do seu trabalho e voc√™ acabada perdendo o foco. Por isso as vezes √© interessante voc√™ usar uma interface mais humana para facilitar as coisas. No site do Git tem &lt;a href=&#34;http://git-scm.com/downloads/guis&#34;&gt;indica√ß√µes interessantes&lt;/a&gt; para voc√™ poder baixar e utilizar o Git de um jeito mais confort√°vel.&lt;/p&gt;

&lt;p&gt;O Git j√° instala um GUI b√°sico chamado &lt;a href=&#34;http://gitk.sourceforge.net&#34;&gt;Gitk&lt;/a&gt;, que √© uma vers√£o generalizada. Basta digitar &lt;strong&gt;gitk&lt;/strong&gt; no diret√≥rio controlado pelo git para que ele seja aberto. √â muito simples, mas para visualiza√ß√µes r√°pidas ou quando voc√™ n√£o estiver no seu computador ele √© bem bacana.&lt;/p&gt;

&lt;p&gt;A minha sugest√£o √© a aplica√ß√£o do GitHub. Ele tem vers√µes para &lt;a href=&#34;http://mac.github.com&#34;&gt;Mac&lt;/a&gt; e &lt;a href=&#34;http://windows.github.com&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/promo-screenshot.png&#34; alt=&#34;&#34; title=&#34;promo-screenshot&#34; width=&#34;515&#34; height=&#34;243&#34; class=&#34;alignnone size-full wp-image-7313&#34; srcset=&#34;uploads/2012/11/promo-screenshot.png 515w, uploads/2012/11/promo-screenshot-300x141.png 300w&#34; sizes=&#34;(max-width: 515px) 100vw, 515px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Com ele voc√™ consegue ver, criar e excluir os branchs, clonar reposit√≥rios, escolher quais arquivos ser√£o enviados em um determinado commit, visualizar o hist√≥rico de commits, visualizar as altera√ß√µes dos arquivos etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/Screen-Shot-2012-11-19-at-2.22.35-PM1.png&#34; alt=&#34;&#34; title=&#34;Screen Shot 2012-11-19 at 2.22.35 PM&#34; width=&#34;808&#34; height=&#34;888&#34; class=&#34;alignnone size-full wp-image-7337&#34; srcset=&#34;uploads/2012/11/Screen-Shot-2012-11-19-at-2.22.35-PM1.png 808w, uploads/2012/11/Screen-Shot-2012-11-19-at-2.22.35-PM1-272x300.png 272w&#34; sizes=&#34;(max-width: 808px) 100vw, 808px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/11/Screen-Shot-2012-11-19-at-2.23.16-PM.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/Screen-Shot-2012-11-19-at-2.23.16-PM-1024x857.png&#34; alt=&#34;&#34; title=&#34;Screen Shot 2012-11-19 at 2.23.16 PM&#34; width=&#34;640&#34; height=&#34;535&#34; class=&#34;alignnone size-large wp-image-7319&#34; srcset=&#34;uploads/2012/11/Screen-Shot-2012-11-19-at-2.23.16-PM-1024x857.png 1024w, uploads/2012/11/Screen-Shot-2012-11-19-at-2.23.16-PM-300x251.png 300w, uploads/2012/11/Screen-Shot-2012-11-19-at-2.23.16-PM.png 1060w&#34; sizes=&#34;(max-width: 640px) 100vw, 640px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se voc√™ n√£o gostar da aplica√ß√£o do GitHub, eu usava uma bem √∫til e √°gil chamada &lt;a href=&#34;http://gitx.frim.nl&#34;&gt;GitX&lt;/a&gt;. N√£o tem vers√£o windows, s√≥ Mac.&lt;/p&gt;

&lt;p&gt;Para windows, mac e linux h√° o &lt;a href=&#34;http://www.syntevo.com/smartgit/index.html&#34;&gt;SmartGit&lt;/a&gt; e o &lt;a href=&#34;http://git-cola.github.com/&#34;&gt;Git-Cola&lt;/a&gt;. As duas interfaces n√£o s√£o l√° essas coisas, mas quebram o galho. H√° tamb√©m para windows o &lt;a href=&#34;http://code.google.com/p/gitextensions/&#34;&gt;GitExtensions&lt;/a&gt;. Todos tem as a√ß√µes b√°sicas do Git e podem facilitar o processo de commits.&lt;/p&gt;

&lt;p&gt;A aplica√ß√£o mais bem acabada mesmo √© a do GitHub, mesmo assim h√° algumas limita√ß√µes, tipo: eu n√£o consigo visualizar tags no hist√≥rico de commits. Mesmo assim quando preciso usar tags eu corro pro terminal. Nada t√£o ruim assim. üòâ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando no GIT ‚Äì Parte 2</title>
      <link>http://tableless.com.br/iniciando-no-git-parte-2/</link>
      <pubDate>Thu, 22 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/iniciando-no-git-parte-2/</guid>
      <description>

&lt;p&gt;J√° leu a &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;primeira parte desse artigo&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;No primeiro artigo&lt;/a&gt; aprendemos sobre como funciona o Git, como iniciar um projeto e como inserimos os arquivos que ser√£o controlados pelo sistema.&lt;/p&gt;

&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;

&lt;p&gt;Antes de tudo voc√™ precisa entender em qual status os arquivos se encontram. Voc√™ pode modificar um arquivo, mas n√£o commita-lo. Veja abaixo uma imagem direto do site do Git que mostra os diversos status dos arquivos.&lt;/p&gt;

&lt;p&gt;Voc√™ j√° clonou ou iniciou seu projeto no Git e agora vai fazer modifica√ß√µes nos arquivos e enviar essas modifica√ß√µes para o reposit√≥rio. Lembre-se que os arquivos em seu Work Directory podem estar &lt;strong&gt;traked&lt;/strong&gt; ou &lt;strong&gt;untracked&lt;/strong&gt;. Vou manter os termos em ingl√™s para voc√™ se familiarizar melhor. Arquivos com status &lt;strong&gt;tracked&lt;/strong&gt; s√£o arquivos que j√° est√£o inseridos no reposit√≥rio. Eles podem ser &lt;strong&gt;unmodified&lt;/strong&gt; (que n√£o foram modificados por voc√™), &lt;strong&gt;modified&lt;/strong&gt; (que foram modificados por voc√™) ou &lt;strong&gt;staged&lt;/strong&gt; (que s√£o os arquivos que acabaram de ser mudados).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/18333fig0201-tn.png&#34; alt=&#34;&#34; title=&#34;18333fig0201-tn&#34; width=&#34;500&#34; height=&#34;317&#34; class=&#34;alignnone size-full wp-image-7272&#34; srcset=&#34;uploads/2012/11/18333fig0201-tn.png 500w, uploads/2012/11/18333fig0201-tn-300x190.png 300w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse ciclo √© repetido diversas e diversas vezes. Veja abaixo um exemplo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/11/git2.jpg&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/git2-1024x549.jpg&#34; alt=&#34;&#34; title=&#34;git2&#34; width=&#34;640&#34; height=&#34;343&#34; class=&#34;alignnone size-large wp-image-7273&#34; srcset=&#34;uploads/2012/11/git2-1024x549.jpg 1024w, uploads/2012/11/git2-300x161.jpg 300w, uploads/2012/11/git2.jpg 1131w&#34; sizes=&#34;(max-width: 640px) 100vw, 640px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;commit&#34;&gt;Commit&lt;/h2&gt;

&lt;p&gt;Suponha que voc√™ resolveu um bug no projeto. √â hora de commitar suas modifica√ß√µes. Essas modifica√ß√µes ser√£o inseridas no hist√≥rico do projeto e ficar√£o dispon√≠veis para que os outros integrantes da equipe.&lt;/p&gt;

&lt;p&gt;Ao commitar voc√™ escreve uma descri√ß√£o sobre o que foi feito ali. Assim essa modifica√ß√£o n√£o fica perdida e todo mundo sabe do que se trata aquela mudan√ßa. Voc√™ documenta essa mudan√ßa. √â mais ou menos isso que √© o commit.&lt;/p&gt;

&lt;p&gt;Quando voc√™ commita uma modifica√ß√£o, os arquivos editados saem do status staged e voltam para o status unmodified. Claro, por que teoricamente aquela altera√ß√£o j√° foi feita e agora os arquivos voltam com o status de sem modifica√ß√µes.&lt;/p&gt;

&lt;p&gt;O comando √© este:&lt;/p&gt;

&lt;pre&gt;git commit -m &#34;Resolvendo bug da modal sobreposta na p√°gina de pagamentos.&#34;&lt;/pre&gt;

&lt;p&gt;Se voc√™ fizer um &lt;strong&gt;git log&lt;/strong&gt; no projeto, voc√™ consegue visualizar uma lista de todos os commits enviados para o projeto, seus commits e commits de outros integrantes. Veja abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/Screen-Shot-2012-11-19-at-12.17.50-PM.png&#34; alt=&#34;&#34; title=&#34;Screen Shot 2012-11-19 at 12.17.50 PM&#34; width=&#34;756&#34; height=&#34;609&#34; class=&#34;alignnone size-full wp-image-7274&#34; srcset=&#34;uploads/2012/11/Screen-Shot-2012-11-19-at-12.17.50-PM.png 756w, uploads/2012/11/Screen-Shot-2012-11-19-at-12.17.50-PM-300x241.png 300w&#34; sizes=&#34;(max-width: 756px) 100vw, 756px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;pull&#34;&gt;Pull&lt;/h2&gt;

&lt;p&gt;N√£o √© s√≥ voc√™ que est√° fazendo modifica√ß√µes nos arquivos, mas tamb√©m sua equipe. Por isso √© importante que voc√™ deixe o projeto sempre atualizado. Para isso voc√™ precisa trazer as modifica√ß√µes que eles fizeram e commitaram para o seu reposit√≥rio local. Voc√™ vai usar o comando &lt;strong&gt;pull&lt;/strong&gt; para trazer essas modifica√ß√µes:&lt;/p&gt;

&lt;pre&gt;git pull&lt;/pre&gt;

&lt;p&gt;Feito isso vai at√© o servidor buscar todas as modifica√ß√µes a partir da vers√£o do seu reposit√≥rio local, ele vai baixar essas modifica√ß√µes e far√° um merge autom√°tico nos arquivos necess√°rios que foram modificados. Coisa linda&amp;#8230; algu√©m deve ter modificado o mesmo arquivo que voc√™, o Git vai entender isso e vai juntar seu c√≥digo com o dele, automaticamente&amp;#8230; Claro que pode ser que de conflitos caso voc√™s tenham modificado a mesma linha, mas a√≠ √© outra hist√≥ria, vemos mais pra frente como resolver isso. Se quiser se adiantar, procure sobre o comando &lt;strong&gt;diff&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;push&#34;&gt;Push&lt;/h2&gt;

&lt;p&gt;Voc√™ modificou os arquivos, commitou descrevendo o que fez exatamente naquela modifica√ß√£o e agora precisa enviar tudo isso para o servidor. O comando &lt;strong&gt;git push&lt;/strong&gt; empurra as suas modifica√ß√µes para o servidor, incluido-as no hist√≥rico do projeto. Quando os outros integrantes da equipe fizerem um &lt;strong&gt;git pull&lt;/strong&gt;, essas modifica√ß√µes ser√£o baixadas e inclu√≠das no reposit√≥rio local da pessoa.&lt;/p&gt;

&lt;pre&gt;git push&lt;/pre&gt;

&lt;p&gt;O Git Push s√≥ pode ser feito se voc√™ executou o &lt;strong&gt;git pull&lt;/strong&gt; antes. Isso √© uma forma de voc√™ ter o seu reposit√≥rio atualizado e tamb√©m para evitar poss√≠veis conflitos no projeto. Quando voc√™ faz o pull, se der algum conflito de c√≥digo, voc√™ dever√° resolve-los para depois enviar o novo c√≥digo novamente.&lt;/p&gt;

&lt;p&gt;H√° algumas outras op√ß√µes tanto no Pull e no Push que podemos utilizar para especificar o branch para onde iremos empurrar ou buscar atualiza√ß√µes. Mas isso fica para outra hora.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://git-scm.com/docs&#34;&gt;documenta√ß√£o do Git&lt;/a&gt; √© muito f√°cil de ler e entender. √â bem objetiva e n√£o perde tempo bl√° bl√° bl√°&amp;#8230; Recomendo que voc√™ leia e entenda melhor como utilizar o git nos seus projetos. Nada de FTP, SFTP e outras coisas&amp;#8230; Isso √© coisa do passado.&lt;/p&gt;

&lt;p&gt;Veja um v√≠deo que mostra os comandos b√°sicos do GIT:&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>