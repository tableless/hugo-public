<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cotidiano on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/cotidiano/index.xml</link>
    <description>Recent content in Cotidiano on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/cotidiano/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Começando um blog – O público alvo</title>
      <link>https://tableless.github.io/hugo-public/comecando-um-blog-o-publico-alvo/</link>
      <pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/comecando-um-blog-o-publico-alvo/</guid>
      <description>&lt;p&gt;Ano novo, vida nova e blog novo. Mas por onde eu devo começar?&lt;/p&gt;

&lt;p&gt;Sem sombra de dúvidas a primeira decisão a ser feita é sobre o que você quer publicar e qual o seu intuito com o blog. Se você quer publicar apenas por publicar e não está focado em rentabilizar o blog, então deixe de ler essa postagem e corre instalar o wordpress. O que quero dizer com isso é: Alguns assuntos serão muito difíceis de você ganhar uma grana, um exemplo disso seria eu gostar de falar sobre as borboletas do Afeganistão (salve mamonas), quantas pessoas mais estariam interessadas nesse assunto? Percebem o quanto é difícil atingir um público simplesmente porque gosto desse assunto. Mas se o seu intuito é apenas publicar para ser feliz, vai em frente. Quem sabe no domingo o fantástico não faz uma matéria sobre as borboletas do Afeganistão e isso vira moda, difícil, mas o intuito não era ganhar dinheiro não é mesmo?&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-56762 aligncenter&#34; src=&#34;uploads/2016/12/mamonas-mente.gif&#34; alt=&#34;mamonas-mente&#34; width=&#34;250&#34; height=&#34;199&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora se você quer ser o próximo blogueiro de sucesso (odeio esse termo &amp;#8220;sucesso), você precisa encontrar um tema do qual ame falar e ao mesmo tempo que seja algo que outras pessoas queiram saber. Não vai adiantar nada você falar sobre um tema da moda, sendo que não entende nada do assunto. Eu vou falar sobre gastronomia porque vi um monte de vídeo sobre isso bombando no youtube, resolvi que posso fazer uma grana escrevendo sobre isso. Mas nunca fritei um ovo sequer. Seria quase impossível fazer um conteúdo de qualidade desse jeito, a não ser que você tenha um bom dinheiro para contratar jornalistas especializados no assunto e queira somente gerenciar o blog, mas acredito que você não veio aqui para isso. Uma opção seria fazer um blog sobre gastronomia para quem nem sabe fritar um ovo e contar suas experiências, pode ser que dê certo :).&lt;/p&gt;

&lt;p&gt;Bom então vamos ao que interessa. A primeira coisa para você começar um blog, é focar em um assunto, quanto mais focado for o seu blog, mais fácil fazer campanhas no face, google e etc. Agora imagine se você faz um blog sobre política e no meio começa a publicar coisas sobre celebridades por exemplo. Um portal pode fazer isso, abranger vários assuntos, mas um blog, principalmente que está começando, pode ser que seja um fracasso. Imagine os caras que amam política vendo que a Gretchen casou mais uma vez, péssimo né? Além de que para fazer campanha no facebook com assuntos tão variados, você vai gastar uma nota e será muito difícil atingir um público que retorne ao blog, assine newsletter, receba notificações e por ai vai.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;wp-image-56764 aligncenter&#34; src=&#34;uploads/2016/12/red-hands-woman-creative-1.jpg&#34; alt=&#34;red-hands-woman-creative&#34; width=&#34;526&#34; height=&#34;331&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Então vamos focar em um público de exemplo, vamos fazer um blog que fale sobre fotografia, ah mas eu vou postar sobre vídeos e vai dar certo também? Difícil, lembre-se foque, foque e foque. Você está começando, não tente abraçar o Mundo. Mas mesmo focando, nem tudo é um mar de rosas. Se você fizer uma campanha no face para quem gosta de fotografia, irá aparecer tanto gente que realmente fotografa quanto aquela pessoas que só querem ver umas fotos maneiras e nunca pegaram em uma câmera. Mas você pode fazer a campanha no face mega focada também, impulsionando somente para pessoas que curtiram a página da Leica por exemplo. Você sabe o que é Leica? É uma das melhores e mais caras câmeras do Mundo, pode ter certeza que somente fotógrafos curtem essa marca. Viu como fica muito mais fácil com um público focado e seleto? E sem fazer apenas para as borboletas do Afeganistão?&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;wp-image-56763 aligncenter&#34; src=&#34;uploads/2016/12/pexels-photo-164474.jpeg&#34; alt=&#34;pexels-photo-164474&#34; width=&#34;496&#34; height=&#34;414&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pode ter a maior certeza do Mundo que vai demorar para você ter bastante acessos e ver o analytics pulando de alegria, mas será muito mais fácil chegar em um resultado satisfatório assim do que falando sobre tudo e nada ao mesmo tempo. Além de que banners do adsense dão muito pouco dinheiro por visualizações, tendo um público focado você pode vender campanhas para lojas de fotografia, no nosso exemplo ai, e ganhar muito mais do que os míseros centavos do adsense.&lt;/p&gt;

&lt;p&gt;E aí, você tem experiências para contar? Manda ver ai nos comentários&lt;/p&gt;

&lt;p&gt;Valeu!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Código Limpo</title>
      <link>https://tableless.github.io/hugo-public/codigo-limpo/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/codigo-limpo/</guid>
      <description>

&lt;p&gt;Um dos assuntos que costumo discutir bastante com a galera é sobre qualidade de código. Nesses papos sempre vem questões como: quais práticas podemos adotar para ter um código de alta qualidade? E como sabemos se o nosso código está bom? Como temos certeza de que estamos no caminho certo?&lt;/p&gt;

&lt;p&gt;Vou explicar meu humilde ponto de vista com exemplos e opiniões sobre qualidade de código. Vou abordar casos de uso com JavaScript, mas nada te impede aplicar muitas dessas dicas usando outras linguagens.&lt;/p&gt;

&lt;h2 id=&#34;gdd-8211-gambiarra-driven-development&#34;&gt;GDD &amp;#8211; Gambiarra Driven Development&lt;/h2&gt;

&lt;p&gt;Vamos começar pela metodologia mais antiga e talvez a mais adotada no mercado. Já trabalhei com profissionais que defendiam com unhas e dentes o não uso de padrões e boas práticas. Vamos ver as &lt;del&gt;desculpas&lt;/del&gt; justificativas mais usadas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;O projeto é muito simples. Não precisa de muita frescura.&lt;/li&gt;
&lt;li&gt;Faço isso há muitos anos e dificilmente tenho problemas.&lt;/li&gt;
&lt;li&gt;Desse jeito entrego em 10 minutos o que faríamos em horas.&lt;/li&gt;
&lt;li&gt;Não preciso padronizar, o código tá fácil de entender.&lt;/li&gt;
&lt;li&gt;Não temos tempo para documentar.&lt;/li&gt;
&lt;li&gt;Não temos tempo para escrever testes.&lt;/li&gt;
&lt;li&gt;Não temos tempo para refatorar.&lt;/li&gt;
&lt;li&gt;Esse código aí não é meu.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conseguiu se lembrar de alguns momentos na sua carreira, onde você já falou ou ouviu qualquer uma das frases acima? Não? Sortudo!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Não acredito que é errado você usar uma gambiarra para resolver um erro, desde que posteriormente você empregue uma solução mais robusta. O problema maior ocorre quando o uso de soluções paliativas se tornam frequentes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mas de longe esse é o único ou pior problema que encontramos na codificação. Gambiarras e &lt;em&gt;anti-patterns&lt;/em&gt; podem ser bons e eficientes a curto prazo, mas a longo prazo te mostram o inferno na terra.&lt;/p&gt;

&lt;p&gt;Vou apontar algumas boas práticas voltadas á escrita de código e o motivo para usá-las.&lt;/p&gt;

&lt;h2 id=&#34;antes-de-tudo-8230&#34;&gt;Antes de tudo&amp;#8230;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Você como desenvolvedor, tem a obrigação de entender cada linha de código que você escreve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Estude boas práticas e metodologias sempre. Mas não seja ingênuo a ponto de acreditar que a adoção de uma delas irá salvar parte do seu projeto/equipe. Muitas soluções podem trazer novos problemas. Quantas vezes a solução de um bug gerou outros 10 na aplicação? Por isso é necessário sempre ter na equipe alguém experiente com bastante vivência, que saiba direcionar o projeto nesses cenários.&lt;/p&gt;

&lt;p&gt;Já vi projetos que começaram repletos de boas práticas, e terminaram desastrados por conta da falta de maturidade prática da equipe. O ponto inicial que jamais deve ser ignorado é: &lt;strong&gt;você como desenvolvedor, tem a obrigação de entender cada linha de código que você escreve&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;no-caminho-certo&#34;&gt;No caminho certo&lt;/h2&gt;

&lt;p&gt;Seu código atual tem uma qualidade superior comparado com o que você escreveu há 6 meses atrás? Se sua resposta for sim, isso indica que você está no caminho certo. Programação é algo em constante evolução, o você programador, também deve evoluir. Com o passar dos anos seu código deve se tornar mais bem organizado, limpo e elegante.&lt;/p&gt;

&lt;p&gt;Uma leitura obrigatória é o livro &lt;a href=&#34;http://www.saraiva.com.br/clean-code-a-handbook-of-agile-software-craftsman-3095979.html&#34; target=&#34;_blank&#34;&gt;Clean Code&lt;/a&gt;. Muitos artigos e palestras sobre boas práticas (incluindo esse artigo), repetem pontos abordados nesse livro. Já vi até empresas cobrando a leitura desse livro como requisito para contratação.&lt;/p&gt;

&lt;h2 id=&#34;código-limpo&#34;&gt;Código Limpo&lt;/h2&gt;

&lt;p&gt;Enquanto o _GDD_ pode te dar felicidade a curto prazo, escrever código de forma limpa e consistente vai te garantir um futuro mais confortável. Você terá um código de fácil entendimento, o que tornará sua manutenção mais eficiente. E se você for um garoto prendado e cobrir sua aplicação com o máximo possível de testes, erros de regressão não irão mais chatear teu cliente/chefe.&lt;/p&gt;

&lt;p&gt;Vou focar em poucos pontos. Se quiser mais conteúdo, leia o &lt;a href=&#34;http://www.saraiva.com.br/clean-code-a-handbook-of-agile-software-craftsman-3095979.html&#34; target=&#34;_blank&#34;&gt;Clean Code&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-review&#34;&gt;Code Review&lt;/h3&gt;

&lt;p&gt;Sempre peça para um colega revisar teu código. Se outra pessoa entendeu perfeitamente o que você escreveu, é um bom sinal.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Qualquer tolo consegue escrever código que um computador entenda. Bons programadores escrevem código que humanos possam entender.&amp;#8221; &amp;#8211; Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;linters&#34;&gt;Linters&lt;/h3&gt;

&lt;p&gt;Ferramentas que escaneiam nosso código procurando o uso de más práticas e possíveis erros de execução, são nossos aliados. No dia-a-dia costumo usar o &lt;a href=&#34;http://jshint.com/&#34; target=&#34;_blank&#34;&gt;JSHint&lt;/a&gt; e agora meu novo parceiro: &lt;a href=&#34;https://github.com/danielstjules/jsinspect&#34; target=&#34;_blank&#34;&gt;JSInspect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Gosto do JSHint pelo fato de poder customizar algumas regras. Já o JSInspect te ajuda á identificar o padrão &lt;em&gt;copy &amp;amp; paste&lt;/em&gt;, te ajudando a escrever módulos melhores.&lt;/p&gt;

&lt;h3 id=&#34;nomenclaturas&#34;&gt;Nomenclaturas&lt;/h3&gt;

&lt;p&gt;Quando me perguntam qual parte da programação eu acho mais difícil, respondo na lata: nomear coisas.&lt;/p&gt;

&lt;p&gt;Passamos boa parte do tempo fazendo isso no nosso código, nomeando funções, variáveis, classes, namespaces, etc. Muitas vezes demoramos até chegar em um resultado bacana.&lt;/p&gt;

&lt;h3 id=&#34;seja-verboso&#34;&gt;Seja verboso&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Existem duas coisas muito difíceis na Ciência da Computação: invalidar cache e dar nome às coisas.&amp;#8221; &amp;#8211; Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consegue me dizer se você entende de cara o que faz a instrução abaixo?&lt;/p&gt;

&lt;pre&gt;u.cptTasks = false;&lt;/pre&gt;

&lt;p&gt;E agora com o código abaixo?&lt;/p&gt;

&lt;pre&gt;var u = new User();
u.name = &#39;Joana Souza&#39;;
u.adminPerm = true;
u.cptTasks = false;
u.save();&lt;/pre&gt;

&lt;p&gt;Conseguiu entender tudo? Vamos ver se fica mais fácil:&lt;/p&gt;

&lt;pre&gt;var user = new User();
user.name = &#39;Joana Souza&#39;;
user.hasAdministratorPermissions = true;
user.didCompleteAllTasks = false;
user.save();&lt;/pre&gt;

&lt;p&gt;Nomear a variável como &lt;em&gt;u&lt;/em&gt; não ajudou muito. Principalmente se você for reutilizar essa variável muitas linhas abaixo. Abreviações também atrapalham bastante. Duvido que de imediato você soube o significado de &lt;em&gt;u.cptTasks&lt;/em&gt;. Pode ter tido várias idéias, o que te guiou ao velho &lt;em&gt;achismo&lt;/em&gt;. E quantos erros já não cometemos pelo simples fato de _acharmos_ isso ou aquilo?&lt;/p&gt;

&lt;h3 id=&#34;considere-o-uso-da-nossa-querida-língua-portuguesa&#34;&gt;Considere o uso da nossa querida Língua Portuguesa&lt;/h3&gt;

&lt;p&gt;Usar a língua portuguesa para nomear coisas pode ser muito bom, principalmente para os novatos. Pelo simples motivo de que fazendo isso, fica mais visível o que é API nativa da linguagem/browser, e API proprietária. Dá uma olhada:&lt;/p&gt;

&lt;pre&gt;var usuario = new Usuario();
usuario.nome = &#39;Joana Souza&#39;;
usuario.temPermissoesAdministrativas = true;
usuario.completouTodasTarefas = false;
usuario.salvar();&lt;/pre&gt;

&lt;p&gt;Ficou mais confortável né? Seu cérebro praticamente se deu ao único trabalho de compreender o código. Não precisou traduzir de um idioma para outro. Mas isso é também uma faca de dois gumes.&lt;/p&gt;

&lt;p&gt;Conhecer a língua inglesa é extremamente importante no mundo da programação, pois muitas documentações e materiais estão nesse idioma. Logo, nomear coisas em português te tira a oportunidade de praticar o idioma, pelo menos na forma escrita. Vale á pena bater um papo com a sua equipe á respeito disso.&lt;/p&gt;

&lt;h3 id=&#34;adote-uma-convenção&#34;&gt;Adote uma convenção&lt;/h3&gt;

&lt;p&gt;A adoção de uma convenção facilita muito na padronização de estilo de escrita e organização de código. É uma ótima opção iniciar com alguma existente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://snowdream.github.io/javascript-style-guide/javascript-style-guide/br/naming-conventions.html&#34; target=&#34;_blank&#34;&gt;Convenção de Nomenclatura &amp;#8211; Airbnb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://andrecomws.com/lab/code-standards/&#34; target=&#34;_blank&#34;&gt;Padrões de Código Front-End &amp;#8211; Isobar&lt;/a&gt; (a versão original está &lt;a href=&#34;http://isobar-idev.github.io/code-standards/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript.crockford.com/code.html&#34; target=&#34;_blank&#34;&gt;Convenções do Douglas Crockford&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/styleguide/javascriptguide.xml&#34; target=&#34;_blank&#34;&gt;Padrões de Código da Google&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bônus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Leitura obrigatória: &lt;a href=&#34;http://jstherightway.org/pt-br/&#34; target=&#34;_blank&#34;&gt;JavaSript the Right Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;variáveis-e-funções-não-utilizadas&#34;&gt;Variáveis e funções não utilizadas&lt;/h3&gt;

&lt;p&gt;Variáveis e funções não utilizadas são um belo exemplo de sujeira. Alguma vez você já deu manutenção em algum código, cujo algum tempo foi investido para compreender o que foi escrito, pra no final das contas perceber que o código estava morto, sem utilização? Chato, né?&lt;/p&gt;

&lt;p&gt;Pra se livrar dessa sujeira é bem simples: ninguém está usando? Apague! Essa regra também vale para código comentado.&lt;/p&gt;

&lt;h3 id=&#34;reinvenção-da-roda&#34;&gt;Reinvenção da roda&lt;/h3&gt;

&lt;p&gt;Esse erro é geralmente cometido por novos e &lt;em&gt;antigos juniores&lt;/em&gt; (entendo como antigo júnior aquele profissional que programa há muitos anos, mas nunca se interessou em aprofundar em uma linguagem).&lt;/p&gt;

&lt;p&gt;O fato de não conhecer muito bem a API da linguagem, pode te levar á reinventar á roda.&lt;/p&gt;

&lt;p&gt;Um exemplo disso é quando precisamos fazer um filtro em um array. Quem não está familiarizado, irá primeiramente fazer o bom e velho &lt;em&gt;for&lt;/em&gt;, possivelmente desconhecendo outras opções como &lt;em&gt;Array.filter&lt;/em&gt; e &lt;em&gt;Array.map&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;funções-pequenas&#34;&gt;Funções Pequenas&lt;/h3&gt;

&lt;p&gt;Funções devem ser claras, objetivas e pequenas. Respeite a regra da responsabilidade única: sua função deve fazer somente uma coisa, e deve fazê-la muito bem.&lt;/p&gt;

&lt;p&gt;Dá uma olhada no exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;usuario.salvar()

...

function salvar() {
    var camposObrigatorios = [ &#39;nome&#39;, &#39;email&#39;, &#39;cpf&#39; ];

    camposObrigatorios.forEach( ( propriedade ) =&amp;gt; {
        if ( !usuario[ propriedade ] ) {
            throw new Error( `É obrigatório informar o ${ propriedade } do usuário.` );
        }
    } );

    $http.post( &#39;http://app.com/api/usuario&#39;, usuario )
        .success( ... )
        .error( ... )
        .finally( ... );
}&lt;/pre&gt;

&lt;p&gt;Pelo nome da função ficou claro o objetivo dela. Mas analisando vemos a implementação de duas coisas: validação e persistência dos dados. Poderíamos dividir as responsabilidades da seguinte forma:&lt;/p&gt;

&lt;pre&gt;validarUsuario() &amp;&amp; usuario.salvar();

...

function validarUsuario() {
    var camposObrigatorios = [ &#39;nome&#39;, &#39;email&#39;, &#39;cpf&#39; ];

    camposObrigatorios.forEach( ( propriedade ) =&amp;gt; {
        if ( !usuario[ propriedade ] ) {
            throw new Error( `É obrigatório informar o ${ propriedade } do usuário.` );
        }
    } );

    return true;
}

function salvar() {
    $http.post( &#39;http://app.com/api/usuario&#39;, usuario )
        .success( ... )
        .error( ... )
        .finally( ... );
}&lt;/pre&gt;

&lt;p&gt;Manter suas funções enxutas te auxilia á praticar o reuso do código.&lt;/p&gt;

&lt;p&gt;Esse é um assunto que pode ser extenso. Uma discussão bem bacana rolou no StackOverflow. Dá uma olhada &lt;a href=&#34;http://pt.stackoverflow.com/questions/30772/uma-fun%C3%A7%C3%A3o-grande-ou-muitas-pequenas&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;comentários&#34;&gt;Comentários&lt;/h3&gt;

&lt;p&gt;Já ouvi dizer que código semântico dispensa comentários. Concordo parcialmente com isso. Acredito que é válido usar comentários nas seguintes situações:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utilização muito pouco comum de uma parte da API pode ajudar a galera mais nova&lt;/li&gt;
&lt;li&gt;Nem sempre conseguimos deixar nosso código semântico, a ponto dele &lt;em&gt;contar o que está acontecendo&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Existem poucos momentos em que devemos fazer uso de uma má prática. E é bom deixar documentado o motivo antes que alguém refatore e quebre alguma funcionalidade&lt;/li&gt;
&lt;li&gt;Sua aplicação expõe uma API pública. Sugiro o uso do &lt;a href=&#34;http://usejsdoc.org/&#34; target=&#34;_blank&#34;&gt;JSDocs&lt;/a&gt; para manter um padrão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora  &lt;strong&gt;/* código comentado */ &lt;/strong&gt;é algo deve ter pouquíssima tolerância.&lt;/p&gt;

&lt;h3 id=&#34;indentação&#34;&gt;Indentação&lt;/h3&gt;

&lt;p&gt;Esse é conhecido como &lt;em&gt;problema de perfumaria&lt;/em&gt;. Saca só:&lt;/p&gt;

&lt;pre&gt;if(usuario.idade!==null||usuario.idade!==undefined||typeof usuario.idade == &#39;number&#39;||usuario.idade&amp;lt;18){
  alert(&#39;O usuário não possui idade suficiente para ser cadastrado nesse sistema.&#39;);
  return false;
}else{
    usuario.salvar();
}&lt;/pre&gt;

&lt;p&gt;Lindo né? Que tal dar mais espaço pra essa bagunça?&lt;/p&gt;

&lt;pre&gt;if ( usuario.idade &amp;&amp; typeof usuario.idade === &#39;number&#39; &amp;&amp; usuario.idade &amp;lt; 18 ) {
    alert( &#39;O usuário não possui idade suficiente para ser cadastrado nesse sistema.&#39; );
    return false;
}

usuario.salvar();&lt;/pre&gt;

&lt;p&gt;E agora? Ficou mais fácil de ler?&lt;/p&gt;

&lt;p&gt;Enfiar todo o código em uma pequena lata de sardinha pode dificultar um pouco a sua compreensão, por mais que o seu editor de texto ou IDE tenha um highlight com alto contraste. Uma ferramenta bacana pra te ajudar á manter esse padrão é o &lt;a href=&#34;http://jscs.info/&#34; target=&#34;_blank&#34;&gt;JSCS&lt;/a&gt;. Gosto de usar o preset jQuery dessa ferramenta, pois o código fica com mais espaçamento, deixando o mais confortável para ler.&lt;/p&gt;

&lt;h3 id=&#34;vale-lembrar-que-8230&#34;&gt;Vale lembrar que&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Muitas dicas dadas aqui retirei do livro Clean Code, e outras aprendi com o passar do tempo em experiência com diversos projetos. O seu comentário com um ponto de vista diferente pode me ajudar á aprender mais sobre o assunto.&lt;/p&gt;

&lt;p&gt;Espero ter ajudado.&lt;/p&gt;

&lt;p&gt;=)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elevação ou JavaScript hoisting</title>
      <link>https://tableless.github.io/hugo-public/elevacao-ou-javascript-hoisting/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elevacao-ou-javascript-hoisting/</guid>
      <description>

&lt;h2 id=&#34;um-pouco-de-teoria-antes-da-diversão&#34;&gt;Um pouco de Teoria antes da diversão.&lt;/h2&gt;

&lt;p&gt;Muitas vezes, um simples princípio não compreendido, pode confundir novatos ou especialistas em JavaScript. Neste artigo, vamos tentar entender melhor um problema comum, que é mais simples do que parece.&lt;/p&gt;

&lt;h2 id=&#34;declarações-na-frente&#34;&gt;Declarações na frente&lt;/h2&gt;

&lt;p&gt;Antigamente em linguagens como C, se usavam funções ou procedimentos para dividir um programa, mas havia um problema: as declarações deveriam ficar sempre na frente.&lt;/p&gt;

&lt;p&gt;Suponha que você queira usar uma função que junta palavras:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;juntarPalavras(&#39;Arco&#39;, &#39;íris&#39;);&lt;/pre&gt;

&lt;p&gt;Mas temos um problema aqui, não? Essa função não foi definida antes de ser chamada!&lt;/p&gt;

&lt;p&gt;O programa retornará um erro, pois &lt;strong&gt;juntarPalavras()&lt;/strong&gt; não foi criada, ou acha que a linguagem deve permitir que você use funções que são definidas no final do código?&lt;/p&gt;

&lt;p&gt;Declarar funções no início do programa resolveu o problema por um tempo, pois todas as funções e variáveis eram declaradas antes de serem usadas, sendo assim não se tinha erros de referência.&lt;/p&gt;

&lt;p&gt;Com o tempo os programadores pensaram: &amp;#8220;Mas por que cargas d&amp;#8217;água não fazemos isso mais amigável e fácil de ler?&amp;#8221;, &amp;#8220;por que ler o código de baixo para cima e, não de cima para baixo?&amp;#8221;. Agora podemos colocar as definições em qualquer lugar do código e usá-los, mesmo antes de realmente serem definidos, que maravilha não?&lt;/p&gt;

&lt;p&gt;O que acontece agora é que os compiladores ou até mesmo linguagens runtime leem todo o programa para saber que funções e variáveis você declarou no código. Após isso, a execução real acontece e ele já sabe onde está cada coisa. JavaScript faz exatamente isso, o que chamamos de Hoisting.&lt;/p&gt;

&lt;h2 id=&#34;hora-da-diversão&#34;&gt;Hora da diversão&lt;/h2&gt;

&lt;p&gt;Vamos começar com algo leve, para ir aquecendo os neurônios, veja o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;nome = &#39;Jonatan&#39;;
console.log(nome);
// Jonatan
&lt;/pre&gt;

&lt;p&gt;Até aqui nada de novo, apenas iniciamos a variável nome com o valor jonatan e mostramos na tela;&lt;/p&gt;

&lt;p&gt;Certo, e que tal tentarmos isso:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var nome = meunome;
console.log(nome);
// ReferenceError: meunome is not defined
&lt;/pre&gt;

&lt;p&gt;Recebemos um erro bem obvio não acha? Como vamos definir o &lt;strong&gt;nome&lt;/strong&gt; com o valor de &lt;strong&gt;meunome&lt;/strong&gt; se essa variável nem existe ainda?&lt;/p&gt;

&lt;p&gt;Agora, deste jeito:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var nome = meunome;
console.log(nome);
var meunome;
// undefined
&lt;/pre&gt;

&lt;p&gt;Opa! “undefined”, sacam a jogada?&lt;/p&gt;

&lt;p&gt;Isso acontece porque o JavaScript não obriga você a declarar variáveis, ​​permite que você defina as funções em qualquer lugar que você queira, o que lhe permite usar uma função antes de sua definição. O nome hoisting, elevação ou até mesmo içamento, é só um termo especificado, pois ele arranca as declarações até o topo do seu escopo.&lt;/p&gt;

&lt;p&gt;Beleza, agora qual a diferença entre declaração e inicialização? Simples:&lt;/p&gt;

&lt;p&gt;Aqui apenas declaramos a variável &lt;strong&gt;meunome&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var meunome;
//undefined
&lt;/pre&gt;

&lt;p&gt;Já nesta parte iniciamos seu conteúdo como &lt;strong&gt;Jonatan&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;meunome = &#39;Jonatan&#39;;
//Jonatan
&lt;/pre&gt;

&lt;p&gt;Este é o mesmo procedimento feito com as funções:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
var multiplicaNumero = function(a,b) {
  return a*b;
}
//TypeError: undefined is not a function
&lt;/pre&gt;

&lt;p&gt;Viram? Ele elevou a declaração var multiplicaNumero, mas como chamamos antes de ele ser iniciado recebemos um erro.&lt;/p&gt;

&lt;p&gt;Se mudarmos para:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
multiplicaNumero = function(a,b) {
  return a*b;
}
//ReferenceError: multiplicaNumero is not defined
&lt;/pre&gt;

&lt;p&gt;Recebemos o erro nos dizendo que &lt;strong&gt;multiplicaNumero&lt;/strong&gt; não foi declarado.&lt;/p&gt;

&lt;p&gt;Alteramos novamente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
function multiplicaNumero (a,b) {
  return a*b;
}
// 100
&lt;/pre&gt;

&lt;p&gt;E agora o código executou sem erro porque toda declaração de função não anônima é elevada para o topo do escopo.&lt;/p&gt;

&lt;p&gt;Fácil não é? Com isso aprendemos que é uma boa prática declarar e/ou iniciar variáveis e funções no início do escopo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var a, foo = &#39;bar&#39;;
var bar = function(){
  var foo = &#39;foo&#39;;
  console.log(&#39;local: &#39;+foo);
};
bar();
console.log(&#39;global: &#39;+foo);
//local: foo
//global: bar 
&lt;/pre&gt;

&lt;p&gt;Boas práticas nos levam a caminhos melhores.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cuidado com invasões no WordPress</title>
      <link>https://tableless.github.io/hugo-public/cuidado-com-invasoes-no-wordpress/</link>
      <pubDate>Fri, 20 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/cuidado-com-invasoes-no-wordpress/</guid>
      <description>

&lt;p&gt;Um dos principais gerenciadores de conteúdo, o WordPress, possui ainda possui algumas falhas. É necessário ficar atento e tomar cuidado para qualquer situação.&lt;/p&gt;

&lt;p&gt;Há duas semanas, passei sérios problemas com o WordPress, com o blog &lt;a href=&#34;http://papodebuteco.net&#34;&gt;Papo de Buteco&lt;/a&gt;. Nunca tinha passado por uma situação parecida com essa, e por isso que tomar cuidado antes de agir.&lt;/p&gt;

&lt;h2 id=&#34;como-verifiquei&#34;&gt;Como verifiquei&lt;/h2&gt;

&lt;p&gt;Por otimizar o site, sempre estou verificando como as páginas do blog estão se comportando no Google. Busquei por &lt;strong&gt;site:papodebuteco.net&lt;/strong&gt; para verificar todas as minhas páginas indexas no Google, e obtive o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/04/serp-papo-de-buteco.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-5948&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/04/serp-papo-de-buteco-300x280.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;280&#34; srcset=&#34;uploads/2012/04/serp-papo-de-buteco-300x280.png 300w, uploads/2012/04/serp-papo-de-buteco.png 800w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao primeiro olhar, já observei as tags de título das páginas estavam totalmente diferentes, no mínimo estranho, não é? Comecei a estudar a situação, e conclui que neste caso, aconteceu uma espécie de &lt;strong&gt;&lt;a href=&#34;http://www.mestreseo.com.br/black-hat/cloaking-aplicacao-scripts-blackhat-e-questoes-eticas&#34; title=&#34;Cloaking&#34;&gt;Cloaking&lt;/a&gt;&lt;/strong&gt;, que reproduzia a página normal para o usuário e outra página para o Google.&lt;/p&gt;

&lt;p&gt;De primeira, achei que eram os plug-ins instalados no site que estavam fazendo isso, mas até que o Google me enviou a seguinte mensagem para o &lt;strong&gt;&lt;a href=&#34;https://www.google.com/webmasters/tools&#34;&gt;Web Master Tools&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;do site:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/04/mensagem-google.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-5951&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/04/mensagem-google-300x211.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;211&#34; srcset=&#34;uploads/2012/04/mensagem-google-300x211.png 300w, uploads/2012/04/mensagem-google.png 1000w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao acessar o link indicado na mensagem, e realmente foi mostrada uma página com um conteúdo não relacionado ao blog.&lt;/p&gt;

&lt;h2 id=&#34;solucionando-o-problema&#34;&gt;Solucionando o problema&lt;/h2&gt;

&lt;p&gt;O que precisa ser feito é: &lt;strong&gt;Reinstalar o WordPress para atualizar seus arquivos.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No próprio painel do gerenciador&lt;/strong&gt;, é possível fazer essa reinstalação, então nada de apagar todos os arquivos do FTP, enviar novamente e reintegrar com o banco de dados.&lt;/p&gt;

&lt;p&gt;Em seu painel de adiminstração, procure no menu de navegação por &lt;strong&gt;Atualizações&lt;/strong&gt; e siga como na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/04/menu-navegacao.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-5944&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/04/menu-navegacao-128x300.png&#34; alt=&#34;&#34; width=&#34;128&#34; height=&#34;300&#34; srcset=&#34;uploads/2012/04/menu-navegacao-128x300.png 128w, uploads/2012/04/menu-navegacao.png 286w&#34; sizes=&#34;(max-width: 128px) 100vw, 128px&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/04/reinstalando-wordpress.png&#34;&gt;&lt;img class=&#34;alignright size-medium wp-image-5953&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/04/reinstalando-wordpress-300x164.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;164&#34; srcset=&#34;uploads/2012/04/reinstalando-wordpress-300x164.png 300w, uploads/2012/04/reinstalando-wordpress.png 800w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois disso, acessei a página que o Google indicou na mensagem e não tive mais problemas, a página foi carregou com seu conteúdo real.&lt;/p&gt;

&lt;p&gt;Para confirmar, você pode tirar a &lt;em&gt;“prova real”&lt;/em&gt; &lt;strong&gt;buscando como o Googlebot&lt;/strong&gt;, que é uma ferramenta encontrada no Google Webmaster Tools.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/04/gwmt-1.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-5945 alignleft&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/04/gwmt-1-300x156.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;156&#34; srcset=&#34;uploads/2012/04/gwmt-1-300x156.png 300w, uploads/2012/04/gwmt-1-1024x535.png 1024w, uploads/2012/04/gwmt-1.png 1423w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Ao clicar em &lt;strong&gt;“Processando”&lt;/strong&gt; e estiver lendo a página do jeito que deveria ler, com o seu código fonte real, pode ter certeza que o problema foi resolvido.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Não se sabe ao certo ainda como essa invasão se manifestou no blog, mas é bom ficar atento a qualquer tipo de propagação estranha relacionada a seu site. O tipo de invasão apresentado no artigo não é único, podem existir outros casos espalhados. A vulnerabilidade pode também está relacionada com o servidor onde o seu site está hospedado.&lt;/p&gt;

&lt;p&gt;As páginas que não entraram no cache do Google depois que o problema foi solucionado, ainda se encontram com o mesmo conteúdo da invasão, se vocês procurarem, ainda acharam algumas páginas assim.&lt;/p&gt;

&lt;p&gt;Apesar de tudo isso, &lt;strong&gt;não houve oscilação com o número de visitas do site&lt;/strong&gt;, ele se mantéu estável. E o &lt;strong&gt;número de &lt;em&gt;backlinks&lt;/em&gt; apontados para as páginas do blog cresceu&lt;/strong&gt;, mas com um textos âncora sem relação ao conteúdo real do blog.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;Cloaking&lt;/strong&gt; é considerada uma técnica de blackhat pelo Google, caso o problema não fosse solucionado a tempo, o blog poderia ser sofrer algum tipo de punição, veja mais em: &lt;a href=&#34;http://support.google.com/webmasters/bin/answer.py?hl=pt-BR&amp;amp;answer=66355&#34;&gt;http://support.google.com/webmasters/bin/answer.py?hl=pt-BR&amp;amp;answer=66355&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se o seu site ainda não é integrado ao Google &lt;strong&gt;&lt;a href=&#34;https://www.google.com/webmasters/tools/&#34;&gt;Web Master Tools&lt;/a&gt;&lt;/strong&gt;, acesse agora e integre! É simples, fácil, e oferece informações importantes para o seu site. Para completar e evitar que algo semelhante aconteça, confira &lt;strong&gt;&lt;a href=&#34;http://webperfeita.com/10-dicas-para-aumentar-a-seguranca-do-wordpress/&#34;&gt;dicas para aumentar a segurança no WordPress&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quero aproveitar o espaço para agradecer &lt;a href=&#34;http://twitter.com/#!/papodebuteco&#34;&gt;Leandro Lopes&lt;/a&gt; (dono do blog Papo de Buteco), que autorizou a postagem de exemplos relacionados ao blog dele. É importante relatar o que aconteceu, ainda mais com casos verídicos, pois pode acontecer com qualquer um.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seu lugar ao sol</title>
      <link>https://tableless.github.io/hugo-public/seu-lugar-ao-sol/</link>
      <pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/seu-lugar-ao-sol/</guid>
      <description>&lt;p&gt;Você realmente acha que vai escrever CSS e HTML como escreve hoje em um cenário como este?&lt;/p&gt;

&lt;p&gt;Você já parou para pensar onde CSS/HTML e Javascript se encaixam em um ambiente onde a web é praticamente camuflada por APPs específicos? Eu não estou me referindo a estes Apps como conhecemos hoje. Podem ser Apps instaladas ou WebApps, neste futuro, dá na mesma. Não há diferença.&lt;/p&gt;

&lt;p&gt;Pior do que pensar o lugar que CSS e HTML estarão é pensar em como VOCÊ se colocará em um ambiente tão novo quanto este. O que realmente iremos fazer? Qual será o papel de cada um? Será que a metodologia de trabalho será a mesma?&lt;/p&gt;

&lt;p&gt;Você também já deve ter visto o vídeo acima. Veja como os personagens utilizam seus gadgets e como tudo está sincronizado. A discussão aí não é se é melhor criar uma App ou uma aplicação Web, é se o seu produto é realmente relevante e se vai ajudar realmente a vida das pessoas. A forma como isso é oferecido não importa, porque em um cenário como esse tudo é igual. Não faz diferença nenhuma. &lt;a href=&#34;http://tableless.com.br/utilizando-apps-em-vez-de-browsers/&#34;&gt;A Web não é só o seu browser&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É por isso que eu acho que &lt;a href=&#34;http://tableless.com.br/agora-e-a-vez-dos-desenvolvedores/&#34;&gt;os desenvolvedores precisam acordar&lt;/a&gt;. Urgente.&lt;/p&gt;

&lt;p&gt;Eu perco as contas de quantos desenvolvedores me castigam quando eu digo para ignorar totalmente os browsers antigos. Você acha que um futuro como mostrado nos vídeos ou qualquer outro tipo de futuro, vai ficar esperando um browser ser adequado aos padrões? Aliás, browsers existirão?&lt;/p&gt;

&lt;p&gt;Você precisa repensar o que realmente é vida digital. Qual a real utilidade de se carregar um &lt;del&gt;celular&lt;/del&gt; &lt;ins&gt;dispositivo móvel&lt;/ins&gt;. Repense o que será design responsivo. Eu sei que a necessidade de hoje é adaptar websites e aplicações para as diversas telas, mas entende que isso é só uma necessidade que vai passar rápido? Vai passar rápido não porque é uma modinha sem importância, mas porque isso deverá ser padrão daqui pra frente. Assim como o Tableless. Lembra que falavam que isso era uma modinha e que já já passaria? Pois é.&lt;/p&gt;

&lt;p&gt;Experimente fazer o exercício de entender o futuro da web. É algo que todo profissional web deveria fazer, principalmente os desenvolvedores. Não importa qual linguagem de programação você vai precisar aprender ou desaprender, o que importa é como ela será aplicada. Isso muda tudo.&lt;/p&gt;

&lt;p&gt;Embora a ideia não seja apenas direcionada a Mobile mas para todos os meios de acesso, vale muito a pena ver a apresentação que o &lt;a href=&#34;http://www.viuisso.com.br/?utm_source=TablelessComBr&amp;amp;utm_medium=linkPost&amp;amp;utm_campaign=PostBlog&#34;&gt;Michel Lent&lt;/a&gt; fez. Dá uma olhada:&lt;/p&gt;

&lt;div style=&#34;width:595px&#34; id=&#34;__ss_11955809&#34;&gt;
  &lt;strong style=&#34;display:block;margin:12px 0 4px&#34;&gt;&lt;a href=&#34;http://www.slideshare.net/mlent68/repensando-o-marketing-a-partir-do-mobile&#34; title=&#34;Repensando o marketing a partir do mobile&#34; target=&#34;_blank&#34;&gt;Repensando o marketing a partir do mobile&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>GoMo – Teste seu site mobile</title>
      <link>https://tableless.github.io/hugo-public/gomo-teste-seu-site-mobile/</link>
      <pubDate>Thu, 16 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/gomo-teste-seu-site-mobile/</guid>
      <description>&lt;p&gt;Quer saber como seu site aparece nos smartphones por aí mas não nenhum aparelho para testar? O Google tem uma iniciativa chamada &lt;a href=&#34;http://bit.ly/Aj7XXh&#34;&gt;GoMo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O GoMo faz um teste rápido no seu site e mostra um screenshot de como seu site aparece em aparelhos móveis, aparentemente somente em aparelhos que rodam Android. Lembrando que muito provavelmente seu site aparecerá da mesma forma em dispositivos da Apple, que rodam WebKit, mesmo motor de renderização do browser do Android.&lt;/p&gt;

&lt;p&gt;Ao final do teste ele entrega o resultando indicando 4 pontos principais: velocidade, imagens quebradas, legibilidade de textos e navegação. Muito interessante para quem quer pelo menos ter um teste superficial de como seu site se comporta nestes dispositivos.&lt;/p&gt;

&lt;p&gt;Visite o &lt;a href=&#34;http://bit.ly/Aj7XXh&#34;&gt;GoMo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agora é a vez dos desenvolvedores</title>
      <link>https://tableless.github.io/hugo-public/agora-e-a-vez-dos-desenvolvedores/</link>
      <pubDate>Sun, 05 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/agora-e-a-vez-dos-desenvolvedores/</guid>
      <description>

&lt;p&gt;O desenvolvimento web depende de três personagens principais: &lt;strong&gt;W3C&lt;/strong&gt;, que regulamenta, cria e sanciona padrões para a web. Os &lt;strong&gt;browsers&lt;/strong&gt;, que importam essas regras e padrões de forma que a web seja mais homogênea e também podem criar padrões. E por fim os &lt;strong&gt;desenvolvedores&lt;/strong&gt;, que aplicam os padrões em projetos, produzindo e criando na web.&lt;/p&gt;

&lt;p&gt;Cada um destes personagens tem papéis importantes para que a web continue evoluindo com força, traçando novos caminhos, cobrindo as necessidades atuais dos usuários e prevendo necessidades e soluções futuras. Existe um ciclo que envolve estes três personagens para que tudo ande bem.&lt;/p&gt;

&lt;h2 id=&#34;o-w3c&#34;&gt;O W3C&lt;/h2&gt;

&lt;p&gt;O W3C cuida dos padrões. Ele tem ideias, ele prevê problemas e tenta solucioná-los. Ele incorpora boas ideias dos desenvolvedores e principalmente dos browsers. O W3C não aplica, ele apenas planeja. É um trabalho difícil por que é necessário uma visão muito apurada da web. Uma decisão errada pode acarretar problemas que levarão anos para serem solucionados. Por isso esse trabalho de planejamento deve ser meticuloso. Devo confessar que em muitos casos o W3C não supera as expectativas e faz com que iniciativas paralelas surjam e direcionem a Web para um caminha mais correto. Foi o que aconteceu com o HTML 5.&lt;/p&gt;

&lt;h2 id=&#34;os-browsers&#34;&gt;Os browsers&lt;/h2&gt;

&lt;p&gt;Os browsers, por sua vez, precisam entender e adotar as idéias do W3C, absorvendo as soluções e criando suporte nos seus softwares. Esse trabalho também tem seus perigos. Os browsers precisam pesquisar quais das necessidades dos desenvolvedores é mais importante e assim implementá-las. Não pode ser algo feito ao acaso. Os browsers precisam ouvir os desenvolvedores para implementar soluções que realmente ajudem na produção diária. Obviamente alguns decidem suportar aquelas soluções que darão mais pontos estratégicos contra o concorrente. Por que você acha que o Safari tem um bom suporte aos padrões desde o primeiro iPhone?&lt;/p&gt;

&lt;h2 id=&#34;os-desenvolvedores&#34;&gt;Os desenvolvedores&lt;/h2&gt;

&lt;p&gt;Finalizando o ciclo, os desenvolvedores aplicam tudo o W3C define, mas apenas aquilo que os browsers “querem” ou podem suportar. E isso, claro, faz com que o desenvolvedor tenha problemas na produção. Principalmente de compatibilidade. Nesse ponto, hoje está tudo muito mais tranquilo. Mas quem nunca quis usar uma determinada API do Javascript ou uma propriedade do CSS que estava disponível apenas em um navegador?&lt;/p&gt;

&lt;p&gt;Durante muito tempo, esse ciclo não era afinado. Havia uma certa confusão e um jogo de interesses próprios envolvendo principalmente os browsers. O W3C estava apenas pensando em como resolver problemas que talvez existiriam daqui longos anos. Os browsers estavam apenas interessados em criar uma massa de usuários suficiente para ser o primeiro no ranking. Os desenvolvedores, por sua vez, queriam ganhar seu dinheirinho, fazer o trabalho, entregar pro cliente e acabar com o problema.&lt;/p&gt;

&lt;p&gt;Ninguém deu atenção quando começamos a desenvolver com tabelas, fazendo com que os sites ficassem mais pesados, aumentando o tempo de desenvolvimento e o custo do projeto.&lt;/p&gt;

&lt;p&gt;Este ciclo defeituoso foi praticado durante muito tempo. Por incrível que pareça, foram os Desenvolvedores que começaram a fazer o ciclo funcionar como deveria. Eles acordaram os fabricantes de browsers e também o W3C. A revolução começou nas trincheiras.&lt;/p&gt;

&lt;p&gt;Por causa dessa revolução silenciosa dos desenvolvedores, o W3C passou a pensar mais em problemas presentes. Solucionou problemas iminentes e que entregavam valor para os projetos.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Os desenvolvedores fizeram duas revoluções: uma que foi liderada pelo pessoal da WaSP e outra quando um grupo começou o desenvolvimento do HTML 5, sem depender do W3C para planejar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Os browsers suportaram o mais rápido possível essas mudanças, atualizando seus engines, e fortalecendo as bases para novas soluções e flexibilizações posteriores.&lt;/p&gt;

&lt;p&gt;Já os desenvolvedores estagnaram. Desculpe-me, serei um pouco revoltado daqui para frente. Os desenvolvedores dormiram. Quando o W3C e os browsers apresentaram soluções para problemas como transparência, bordas arredondadas, backgrounds inteligentes, utilização de fonte remotas, apis de javascript decentes, novas tags e etc, os desenvolvedores resolveram que não era a hora dessas soluções por causa de coisas como o IE6. Na verdade estou sendo meio injusto aqui. Não foram todos os desenvolvedores que criaram caso com isso, foram somente os idiotas.&lt;/p&gt;

&lt;p&gt;Logo os idiotas, que reclamavam tanto da falta de recursos mais inteligentes para trabalhar. Que precisávamos de idéias realmente inovadoras que transformassem os projetos e facilitassem o desenvolvimento. Protestaram, escreveram manifestos, postaram em blogs, revoltados com a falta de visão do W3C e com a pobreza do suporte dos browsers. Mas quando chegou a hora, deram para trás. Amarelaram. Pediram arrego.&lt;/p&gt;

&lt;p&gt;Infelizmente, via-se muito mais disso aqui no Brasil do que no resto do mundo. Ouvi muitas desculpas como: &amp;#8211; &amp;#8220;Mas meu cliente usa IE6.&amp;#8221; ou &amp;#8220;Mas isso não funciona em IE6.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Entenda uma coisa: você é desenvolvedor web. Você trata com seu cliente todos os dias. Você tem o poder de &lt;a href=&#34;http://tableless.com.br/convencimento-e-educacao-liberdade/&#34; title=&#34;Convencimento e educação = liberdade&#34;&gt;educar e convencer&lt;/a&gt;. Se você acha que não tem poder nenhum, por que ainda trabalha com web?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Talvez isso seja trauma do passado. Talvez não. O fato é que não podemos mais nivelar por baixo. Isso é atrasar uma &amp;#8220;evolução&amp;#8221; inteira.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Temos falado incansavelmente aqui no Tableless sobre &lt;a href=&#34;http://tableless.com.br/bem-vindo-a-xangrila-parte-1/&#34; title=&#34;Bem vindo a Xangri-lá – Parte 1&#34;&gt;Graceful Degradation, Enhanced Progressive&lt;/a&gt;, &lt;a href=&#34;http://tableless.com.br/categoria/client-side/html-css/html5-client-side/&#34;&gt;HTML 5&lt;/a&gt;, as &lt;a href=&#34;http://tableless.com.br/categoria/client-side/html-css/css3/&#34;&gt;maravilhas do CSS 3&lt;/a&gt; e etc, pois esse é o assunto que rola lá fora. Há desenvolvedores e empresas, que acham que devemos ter uma autorização especial dos gringos para utilizarmos novas tecnologias e principalmente &lt;a href=&#34;http://tableless.com.br/browsers-antigos-guerra-contra-o-terror/&#34;&gt;para deixar os browsers antigos no passado&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Esse assunto me faz pensar em outra pergunta: Estamos (você está?) preparados para o ritmo alucinante que será ditado daqui pra frente?&lt;/p&gt;

&lt;p&gt;Até a Microsoft está cumprindo com a palavra de ter um browser atualizado. Eles anunciam uma versão após a outra do Internet Explorer com mais inovações, suporte aos padrões e novidades&amp;#8230; Mas ainda há os bobalhões que preferem falar mal do Internet Explorer do que abrir os olhos e seguir em frente.&lt;/p&gt;

&lt;p&gt;O mercado de client-side se transformará rapidamente nos próximos anos. Muitas mudanças no HTML e no CSS serão publicadas com o intuito de tornar a web mais homogênea, flexível, portável. O HTML 5 não é só uma coleção de novas tags e APIs. O CSS 3 não ganhou só bordas arredondadas. E nem só de iPhone vive o homem. Existem milhares de Nokias, Windows Phones e Androids por aí.&lt;/p&gt;

&lt;p&gt;Os desenvolvedores precisam acordar.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Artigo originalmente publicado em Nov/2009 na revista TI Digital.&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Boas práticas de Acessibilidade</title>
      <link>https://tableless.github.io/hugo-public/boas-praticas-de-acessibilidade/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/boas-praticas-de-acessibilidade/</guid>
      <description>&lt;p&gt;Preparei uma pequena (nem tão pequena assim) apresentação que mostra algumas boas práticas e técnicas sobre acessibilidade para sistemas e websites. São pequenos ajustes que podemos incorporar mesmo depois de todo o desenvolvimento pronto e que dão resultados importantes para adequação dos seus sites ou sistemas.&lt;/p&gt;

&lt;div style=&#34;width:595px&#34; id=&#34;__ss_11217803&#34;&gt;
  &lt;strong style=&#34;display:block;margin:12px 0 4px&#34;&gt;&lt;a href=&#34;http://www.slideshare.net/diegoeis/apresentancao-acessibilidade&#34; title=&#34;Apresentancao acessibilidade&#34; target=&#34;_blank&#34;&gt;Apresentancao acessibilidade&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt; 
  
  &lt;div style=&#34;padding:5px 0 12px&#34;&gt;
    Veja mais &lt;a href=&#34;http://www.slideshare.net/&#34; target=&#34;_blank&#34;&gt;apresentações&lt;/a&gt; de &lt;a href=&#34;http://www.slideshare.net/diegoeis&#34; target=&#34;_blank&#34;&gt;Diego Eis&lt;/a&gt;
  &lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introdução aos padrões de codificação</title>
      <link>https://tableless.github.io/hugo-public/introducao-a-padroes-de-codificacao/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-a-padroes-de-codificacao/</guid>
      <description>&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#identação&#34;&gt;Identação&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#espaços-em-brancos-whitespaces&#34;&gt;Espaços em brancos (Whitespaces)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nomenclatura&#34;&gt;Nomenclatura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comentários&#34;&gt;Comentários&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arquivos&#34;&gt;Arquivos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chaves-e-ponto-vírgula&#34;&gt;Chaves e ponto/vírgula&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;

&lt;p&gt;Como os idiomas reais, cada linguagem de programação tem suas respectivas regras, individualidades, pontuações, pausas e pontos em comum com outras linguagens. Você precisa conhecer essas peculiaridades para falar fluentemente ou no mínimo ser entendido. Nas linguagens de para web ou qualquer outra linguagem de programação, precisamos seguir algumas regras básicas para que o código não vire uma língua estrangeira no meio do projeto.&lt;/p&gt;

&lt;p&gt;Definir padrões é normal para que a equipe inteira escreva o código da mesma maneira. Esse assunto é longo e muito importante para todas as equipes de desenvolvimento. Programadores já quiseram me matar várias vezes porque eu uso TABS em vez de ESPAÇOS em arquivos Python/PHP. Programadores gostam de espaços. Eu não. Mas não é o nosso gosto que vai definir quais os padrões de código que devemos seguir.&lt;/p&gt;

&lt;p&gt;Quando definimos padrões e boas práticas, garantimos que todos da equipe conseguirão ter o mínimo de entendimento do código daquele projeto que está na empresa a tempos. Se alguém da equipe adoecer ou precisar ir para o Canadá, outro integrante pode assumir o seu lugar sem precisar se preocupar em aprender novas regras, porque elas devem ser as mesmas do projeto anterior.&lt;/p&gt;

&lt;p&gt;É importante que os integrantes da equipe sejam sempre fiéis aos acordos firmados no momento em que combinam esses padrões. É importante também que, caso eles encontrem um integrante fora da lei, que eles forcem o meliante a seguir as regras. Já vi gente perdendo o trabalho de uma semana por que estava trabalhando diretamente pelo FTP e o projeto não estava no GIT. O programador simplesmente APAGOU o projeto da pessoa. Nunca mais ela resolveu editar os arquivos fora do controle de versão. Esse tipo de atitude é perigosa mas muito necessárias às vezes. Devemos forçar as regras num ambiente onde todos devem quem, quando e como as linhas de código do projeto foram escritas.&lt;/p&gt;

&lt;p&gt;Alguns pontos para se pensar e combinar:&lt;/p&gt;

&lt;h6 id=&#34;identação&#34;&gt;Identação&lt;/h6&gt;

&lt;p&gt;Como devemos identar o código? Com espaços ou tabs? Se for com espaços quantos?&lt;/p&gt;

&lt;h6 id=&#34;espaços-em-brancos-whitespaces&#34;&gt;Espaços em brancos (Whitespaces)&lt;/h6&gt;

&lt;p&gt;Espaços devem ser incluídos depois de uma operação condicional? Espaços devem ser colocados entre o seletor e as chaves? E no final de cada linha, precisa?&lt;/p&gt;

&lt;h6 id=&#34;nomenclatura&#34;&gt;Nomenclatura&lt;/h6&gt;

&lt;p&gt;Como as classes, ids e variáveis devem ser nomeadas? E as funções? Vamos usar &lt;a href=&#34;http://en.wikipedia.org/wiki/CamelCase&#34;&gt;CamelCase&lt;/a&gt;?&lt;/p&gt;

&lt;h6 id=&#34;comentários&#34;&gt;Comentários&lt;/h6&gt;

&lt;p&gt;Como faremos com os comentários? Como serão os delimitadores do comentário? O comentário deve ser completo ou precisa ser algo mais resumido?&lt;/p&gt;

&lt;h6 id=&#34;arquivos&#34;&gt;Arquivos&lt;/h6&gt;

&lt;p&gt;Como os arquivos, que não fazem parte da estrutura padrão do CMS, Framework e etc deverão ser chamados? E o nome das pastas? Como as páginas serão chamadas?&lt;/p&gt;

&lt;h6 id=&#34;chaves-e-ponto-vírgula&#34;&gt;Chaves e ponto/vírgula&lt;/h6&gt;

&lt;p&gt;As chaves deverão ser abertas na mesma linha ou devemos quebrar linhas? Vamos sempre usar ponto/vírgula? Vamos usar o padrão &lt;a href=&#34;http://en.wikipedia.org/wiki/Indent_style#K.26R_style&#34;&gt;K&amp;amp;R ou Allman&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Quando definimos estas pequenas coisas, diminuímos muitos percalços no meio do caminho. Já vi projetos atrasarem meses por que um palerma abriu e salvou arquivos com o charset diferente do que já tinha sido combinado no início.&lt;/p&gt;

&lt;p&gt;&amp;#8220;It&amp;#8217;s more important for people on a team to agree to a single coding style than it is to find the perfect style.&amp;#8221; &lt;a href=&#34;http://www.amazon.com/gp/product/0596102356/ref=as_li_ss_tl?ie=UTF8&amp;amp;tag=tableless-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596102356&#34;&gt;Building Scalable Web Sites: Building, Scaling, and Optimizing the Next Generation of Web Applications&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Indico este livro sobre esse e outros assuntos sobre a construção, desenvolvimento e manutenção de websites&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS1K</title>
      <link>https://tableless.github.io/hugo-public/css1k/</link>
      <pubDate>Fri, 20 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css1k/</guid>
      <description>&lt;p&gt;Você deve conhecer o &lt;a href=&#34;http://www.csszengarden.com/&#34;&gt;CSS Zen Garden&lt;/a&gt;. O CSS Zen Garden foi criado pelo &lt;a href=&#34;http://mezzoblue.com/&#34;&gt;Dave Shea&lt;/a&gt;, foi um dos sites responsáveis por convencer toda a galera desenvolvedora orgulhosa e desconfiada mostrando que era possível produzir e implementar websites flexívels, diferentes, não quadrados nem com cara de blog &amp;#8211; como falavam &amp;#8211; utilizando CSS puro. Tendo este pensamento em mente, &lt;a href=&#34;http://twitter.com/jacobrask&#34;&gt;Jacob Rask&lt;/a&gt; decidiu fazer o &lt;a href=&#34;http://css1k.com/&#34;&gt;CSS1K&lt;/a&gt;: um desafio para você que acha que consegue implementar um design utilizando apenas 1K de CSS.&lt;/p&gt;

&lt;p&gt;O que você tem que fazer é simples:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Você só pode enviar CSS.&lt;/p&gt;

&lt;p&gt;&amp;#8211; O seu código CSS deve ter 1K (1024 bytes), minificado.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Não precisa utilizar prefixos de browsers, eles colocarão lá para você, logo, você pode usar as coisas bacanas de CSS que só funcionam em browsers (não o IE).&lt;/p&gt;

&lt;p&gt;&amp;#8211; O Design não precisa ficar igualzinho em todos os browsers, mas gracefull degradation é uma boa pedida.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Seu código é submetido sob a licensa &lt;a href=&#34;http://www.opensource.org/licenses/mit-license.php&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Eles &lt;a href=&#34;https://github.com/jacobrask/CSS1K/&#34;&gt;dão o código HTML&lt;/a&gt; que você não pode modificar em hipótese alguma, se não acaba a graça da brincadeira.&lt;/p&gt;

&lt;p&gt;E aí, consegue?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Um pensamento sobre design para web</title>
      <link>https://tableless.github.io/hugo-public/um-pensamento-sobre-design-para-web/</link>
      <pubDate>Thu, 19 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/um-pensamento-sobre-design-para-web/</guid>
      <description>&lt;p&gt;É engraçado quando designers de peças offline tentam migrar para web e ficam assustados com as diferenças no processo de criação e produção. O controle que o design para impresso tem sobre a posição dos elementos e a forma final da arte nunca (nunca?) será a mesma na web. No impresso você define precisamente as medidas, posicionando dos elementos, o tamanho das letras, entrelinhas e cores (mesmo brigando bastante nas gráficas por aí). Já na web você briga porque um determinado elemento está deslocado para a direita em um browser ou outro, porque determinada fonte é maior em uma tela e até pouco tempo só tinha um punhado de fonts para criar. Mesmo quando definimos tudo em pixels, há variações inesperadas entre browsers e dispositivos. Também lembro quando havia muita diferença de cores de monitor para monitor. Graças a Deus temos monitores LCD/LED.&lt;/p&gt;

&lt;p&gt;E agora ainda temos que prestar atenção aos dispositivos que &lt;a href=&#34;http://www.alistapart.com/articles/a-pixel-identity-crisis/?utm_source=TablelessComBr&amp;amp;utm_medium=postLink&amp;amp;utm_campaign=citacaoTexto&#34;&gt;comprimem mais pixels por ponto do que antigamente&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A boa experiência no design de impresso depende muito da arte inspiradora do designer, qual o papel usado, que tipo de impressão, da gráfica&amp;#8230; em web dependemos muito do tamanho da tela, do dispositivo utilizado, do browser, da configuração do texto, velocidade da internet e do computador. São muitas variações para tentarmos manter o controle de cada detalhe.&lt;/p&gt;

&lt;p&gt;Quando um designer faz peças para uma campanha ou algum projeto offline, dependendo do caso é necessário criar peças para diversos formatos de veiculação em outdoors, revistas, posters etc. Em relação a web, nós temos todos os formatos de telas que envolvem tablets, notebooks, monitores, TVs e celulares&amp;#8230; Com um diferencial: cada uma dessas telas tem um tipo de comportamento diferente dependendo da manipulação do dispositivo e também do usuário. Em alguns dispositivos como tablets e mobiles em uma tela temos dois formatos: retrato e paisagem. Já no impresso não há manipulação pelo usuário. A estimulo é totalmente visual e muitas vezes tátil. Mesmo assim, a experiência que a web entrega é totalmente outra.&lt;/p&gt;

&lt;p&gt;No design impresso, &lt;a href=&#34;http://www.luli.com.br/2009/02/02/design-e-uma-conversa-revista-webdesign/?utm_source=TablelessComBr&amp;amp;utm_medium=link&amp;amp;utm_campaign=citacaoTexto&#34;&gt;quanto mais proporcional, harmoniosa e equilibrada&lt;/a&gt; for a peça, melhor será recebida. No design para web também: os layouts precisam ser proporcionais em cada um dos dispositivos e harmoniosos em cada navegador, além da acessibilidade para alcançar usuário distantes.&lt;/p&gt;

&lt;p&gt;Mas em ambas a &lt;a href=&#34;http://www.alistapart.com/articles/personality-in-design/?utm_source=TablelessComBr&amp;amp;utm_medium=postLink&amp;amp;utm_campaign=citacaoTexto&#34;&gt;personalidade é a plataforma para a emoção&lt;/a&gt; do usuário. Seja online ou offline, o layout, a forma com que o usuário o consome deve leva-lo para uma experiência diferente do normal. E não estou falando de hotsites feitos em flashs ordinários puramente comerciais.&lt;/p&gt;

&lt;p&gt;Eu queria ser designer para entender melhor os conceitos que envolvem esse assunto e talvez explicar tudo isso com mais propriedade.&lt;/p&gt;

&lt;p&gt;Assim como não é possível escrever uma linha de código sem saber os porquês da importância do código semântico e acessível, não é possível desenhar um website sem ter a plena certeza de que qualquer usuário terá uma experiência envolvente e agradável.&lt;/p&gt;

&lt;p&gt;O design para web está mudando de novo outra vez por causa da explosão de novos dispositivos. Se você ainda não parou para pensar, pense: faça as contas das telas: notebooks, monitores, tablets e smartphones. Sendo que cada uma destes tipos de telas tem diversas variações de tamanho e principalmente de resoluções. Já disse que a &lt;a href=&#34;http://tableless.com.br/experiencia-cross-device/&#34;&gt;experiência do usuário precisa ser cross-device&lt;/a&gt;, caso contrário, algo se perde.&lt;/p&gt;

&lt;p&gt;Eu &lt;a href=&#34;http://www.bmwblog.com/2008/08/08/behind-the-design-of-the-bmw-7-series/&#34;&gt;queria mesmo era fazer um carro&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Experiência cross-device</title>
      <link>https://tableless.github.io/hugo-public/experiencia-cross-device/</link>
      <pubDate>Thu, 22 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/experiencia-cross-device/</guid>
      <description>&lt;p&gt;Eu vivo comentando aqui no Tableless sobre o desenvolvimento de sistemas e websites para os diversos meios de acesso. Eu falei sobre &lt;a href=&#34;http://tableless.com.br/diversidade-dos-meios-acesso/&#34;&gt;esse assunto&lt;/a&gt; em &lt;a href=&#34;http://tableless.com.br/experiencia-deve-ter-comeco-meio-e-fim/&#34;&gt;diversos&lt;/a&gt; &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34;&gt;artigos&lt;/a&gt;. Eu li um artigo chamado &lt;a href=&#34;http://designmind.frogdesign.com/blog/the-coming-zombie-apocalypse-small-cheap-devices-will-disrupt-our-old-school-ux-assumptions.htm&#34;&gt;The Coming Zombie Apocalypse&lt;/a&gt;, escrito por Scott Jenson em abril deste ano. Este artigo me fez perceber que eu estava levando o assunto muito superficialmente, mas que tem muito a ver com o artigo publicado aqui chamado &lt;a href=&#34;http://tableless.com.br/experiencia-deve-ter-comeco-meio-e-fim/&#34;&gt;A Experiência deve ter começo, meio e fim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O artigo do &lt;a href=&#34;http://twitter.com/scottjenson&#34;&gt;Scott Jenson&lt;/a&gt; começa dizendo que a popularização dos smartphones são apenas o começo. Juntando o barateamento das peças para a produção destes aparelhos com a criação sistemas de baixo custo e acessíveis como o Android, não só estão surgindo dispositivos baratos capazes de fazer tarefas que antes eram possíveis apenas em computadores, mas dispositivos baratos baseados na web, trazendo uma experiência cross-device nunca antes experimentada. Um exemplo disso é quando utilizamos estes dispositivos integrados com aplicações como o sistema de som &lt;a href=&#34;http://www.sonos.com/&#34;&gt;Sonos&lt;/a&gt;. O Scott Jenson chamada de Zombie Apocalypse dos eletrônicos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/12/twitter-original-homepage.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/twitter-original-homepage-300x209.png&#34; alt=&#34;&#34; title=&#34;twitter-original-homepage&#34; width=&#34;300&#34; height=&#34;209&#34; class=&#34;alignleft size-medium wp-image-4951&#34; srcset=&#34;uploads/2011/12/twitter-original-homepage-300x209.png 300w, uploads/2011/12/twitter-original-homepage.png 1022w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O paradigma dos computadores desktops estão nos impedindo de enxergar novos caminhos não tão longes assim. Isso é totalmente evidente quando falamos sobre smartphones, no qual nós sabemos que não são computadores desktops e tão somente por isso nós temos outras experiências e outras abordargens quando estamos usando aparelhos deste tipo. Perceba que diversos serviços e aplicações estão sendo portados para os dispositivos móveis porque fazem mais sentido nesse meio. O Twitter mesmo foi criado inicialmente para publicações vindas apenas pelos smartphones. Foi um processo reverso.&lt;/p&gt;

&lt;p&gt;Me lembro que aqui no Brasil o recebimento de SMS internacional era um problema em algumas operadoras. Muitos queriam utilizar o Twitter, mas não podiam atualizar suas timelines porque naquela época as atualizações eram feitas via SMS. Foi aí que a plataforma se popularizou e então a possibilidade de atualizar sua timeline por outros meios surgiu.&lt;/p&gt;

&lt;p&gt;Há uma frase interessantíssima no artigo de Scott Jenson onde ele diz assim:&lt;/p&gt;

&lt;blockquote cite=&#34;http://designmind.frogdesign.com/blog/the-coming-zombie-apocalypse-small-cheap-devices-will-disrupt-our-old-school-ux-assumptions.htm&#34; lang=&#34;en&#34;&gt;
  &lt;p&gt;
    This problem is simple, but pernicious: designers think of new technologies in terms of yesterday&amp;#8217;s tasks, failing to clearly see the real potential of the new technologies.
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Minha tradução livre: &amp;#8220;O problema é simples mas pernicioso: os designers pensam nas novas tecnologias baseando-se nas tarefas de ontem, falhando em ver claramente o real potencial das novas tecnologias.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Muito óbvio. É por isso que o Windows Mobile falhou! A Microsoft durante muito tempo liderou o mercado de sistemas para mobiles com um sistema ruim, bugado e muito, mas muito inútil, simplesmente porque eles eram praticamente os únicos. O problema com o sistema deles foi a tentiva de portar os conceitos, experiências, comportamentos e tarefas do sistema dos desktops para os mobiles. Claramente um grande erro. Com o Windows Phone eles mudaram (tarde) o cenário. Eles criaram o Windows Phone levando em consideração os atos e comportamentos do usuário em aparelhos deste tipo. Não há nenhuma analogia aos desktops. E mais uma vez, algo que foi criado primeiramente para aparelhos móveis será portado para os desktops, que é o caso da interface Metro levada para o &lt;a href=&#34;http://www.youtube.com/watch?v=7Dv670PwVLM&#34;&gt;Windows 8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Os PCs de hoje serão apenas hubs num futuro próximo. No cenário de hoje você escolhe entre Mac ou PC e baixa aplicativos que muito provavelmente funcionarão apenas para um destes sistemas. O modelo ideal, que já é mais real do que imaginamos, é que cada pessoa possa usar múltiplos dispositivos acessando um mesmo dado, uma mesma informação, normalmente pela núvem.&lt;/p&gt;

&lt;p&gt;O exemplo do serviço de música via streaming Pandora é perfeito. Ele permite que nós possamos utilizar seus serviços em uma variedade gigante de dispositivos. Sempre sincronizando suas músicas via internet. Tudo sempre integrado. Aqui no Brasil, como o Pandora não funciona, talvez não seja a sua realidade&amp;#8230; Entretanto estamos vivendo em um mundo onde o software, a aplicação, o serviço, define qual aparelho você vai comprar.&lt;/p&gt;

&lt;p&gt;O Sonos é um aparelho de som Wi-Fi. Além do Pandora você pode sincronizar sua biblioteca de músicas de diversos outros serviços como iTunes ou o Spotify. Quando o conheci eu o quis sem pensar. Nada de iPod ou iPhone plugado no aparelho de som. Nada de fio p2-p2 para ligar meu celular ao aparelho de som&amp;#8230; Eu quero ouvir minhas músicas livremente pelo serviço que eu mais gosto no sistema de som da minha casa. Mas quando eu for pra rua e quero continuar ouvindo a mesma biblioteca de música, só que agora no meu fone de ouvido. Essa integração entre dispositivos e softwares é incrível. Perceba que não estamos falando sobre um ecosistema fechado como o da Apple. Estamos falando de hardware e software de fabricantes diferentes, que prestam diferentes serviços, mas que se integram.&lt;/p&gt;

&lt;p&gt;Entende o que é a experiência do usuário nesse cenário?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O que é Usabilidade?</title>
      <link>https://tableless.github.io/hugo-public/o-que-e-usabilidade/</link>
      <pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-que-e-usabilidade/</guid>
      <description>

&lt;p&gt;Já vimos em um &lt;a href=&#34;http://tableless.com.br/estabelecendo-uma-metodologia-agil-para-avaliacao-de-usabilidade&#34;&gt;artigo anterior&lt;/a&gt; como a usabilidade beneficia o desenvolvimento web. Mas, o que de fato compreende a usabilidade? Nem tudo que se refere à experiência de uso está dentro do escopo dela. Sim, a usabilidade tem limitações e lacunas que são complementadas por outros paradigmas, como o design de interação. Porém, podemos considera-la a &lt;em&gt;base da pirâmide&lt;/em&gt; que sustenta o projeto de uma aplicação com boa experiência de uso.  Neste artigo, veremos brevemente o que faz parte do conceito de usabilidade e qual o papel que ela tem no processo de desenvolvimento de aplicações.&lt;/p&gt;

&lt;h2 id=&#34;afinal-o-que-é-usabilidade&#34;&gt;Afinal, o que é usabilidade?&lt;/h2&gt;

&lt;p&gt;A Usabilidade é “filha” da Interação Humano-Computador (IHC) e “neta” da Engenharia de Software, carregando esse legado ao longo de sua evolução, podendo ser definida como o &lt;strong&gt;grau de facilidade&lt;/strong&gt; com que o usuário consegue interagir com determinada interface.&lt;/p&gt;

&lt;p&gt;Partindo da IHC, a usabilidade aborda a forma como o usuário se comunica com a máquina e como a tecnologia responde à interação do usuário, considerando as seguintes habilidades, de acordo com a norma &lt;a title=&#34;Norma ISO 9241&#34; href=&#34;http://en.wikipedia.org/wiki/ISO_9241&#34; target=&#34;_blank&#34;&gt;ISO 9241&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Facilidade de aprendizado:&lt;/strong&gt; a utilização do sistema requer pouco treinamento;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fácil de memorizar:&lt;/strong&gt; o usuário deve lembrar como utilizar a interface depois de algum tempo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maximizar a produtividade:&lt;/strong&gt; a interface deve permitir que o usuário realize a tarefa de forma rápida e eficiente;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimizar a taxa de erros:&lt;/strong&gt; caso aconteçam erros, a interface deve avisar o usuário e permitir a correção de modo fácil;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maximizar a satisfação do usuário:&lt;/strong&gt; a interface deve dar-lhe confiança e segurança.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;p&gt;
    Partindo da Engenharia de Software, a usabilidade é englobada dentro da qualidade e visa garantir uma parte da eficiência e eficácia do sistema. A eficiência refere-se a uma interação produtiva entre o usuário e o sistema, permitindo a realização de tarefas com menor esforço sob uma experiência agradável. A eficácia pode ser entendida como a capacidade do sistema e da interface possibilitarem ao usuário a completude da tarefa e o alcance de seus objetivos no sistema.
  &lt;/p&gt;
  
  &lt;h2&gt;
    A importância da usabilidade no desenvolvimento de projetos
  &lt;/h2&gt;
  
  &lt;p&gt;
    A usabilidade se encaixa em qualquer tipo de projeto de interface, tendo amplitude diferente de acordo com a criticidade do projeto, ou seja, quanto mais crítico for o sistema, maiores serão as perdas caso ele não seja de fácil utilização e proporcione satisfação. Ela deve ser pensada desde o planejamento do projeto, até a etapa de desenvolvimento e teste.
  &lt;/p&gt;
  
  &lt;p&gt;
    As empresas têm consciência da importância da usabilidade. Porém, muitas ainda a veem como um fator que só deve ser levado em conta durante o desenvolvimento se houver tempo e recurso, como se ela representasse um custo adicional, fora do que é essencial. Mas as empresas têm muito mais a perder ao minimizar a usabilidade dessa forma. De acordo com Cybis, Betiol e Faust (2007):
  &lt;/p&gt;
  
  &lt;p&gt;
    “&lt;em&gt;Dependendo da frequência com que o software é empregado, os prejuízos para as empresas podem também ser expressivos, não só em decorrência do absenteísmo e da rotatividade do pessoal, mas também pela baixa produtividade, competitividade e menor retorno de investimento. Sistemas difíceis de usar implicam em erros e perda de tempo, fatores que se multiplicam com a frequência das tarefas e o número de usuários. A perda de dados e informações pode implicar na perda de clientes e de oportunidades. Acontecimentos deste tipo causam desde uma resistência ao uso do sistema até a sua subutilização e abandono completo, com o devido consentimento da empresa. O barato terá custado caro.&lt;/em&gt;”
  &lt;/p&gt;
  
  &lt;p&gt;
    A usabilidade pode ser abordada de diferentes formas ao longo do projeto:
  &lt;/p&gt;
  
  &lt;div id=&#34;attachment_4011&#34; style=&#34;width: 548px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/07/Slide1.png&#34;&gt;&lt;img class=&#34;size-full wp-image-4011  &#34; src=&#34;http://tableless.com.br/wp-content/uploads/2011/07/Slide1.png&#34; alt=&#34;Técnicas utilizadas para garantir e verificar a usabilidade em diferentes etapas&#34; width=&#34;538&#34; height=&#34;403&#34; srcset=&#34;uploads/2011/07/Slide1.png 960w, uploads/2011/07/Slide1-300x225.png 300w&#34; sizes=&#34;(max-width: 538px) 100vw, 538px&#34; /&gt;&lt;/a&gt;
    
    &lt;p class=&#34;wp-caption-text&#34;&gt;
      Técnicas utilizadas para garantir e verificar a usabilidade em diferentes etapas
    &lt;/p&gt;
  &lt;/div&gt;
  

&lt;p&gt;&lt;h2&gt;
    Lacunas a serem preenchidas
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Apesar de a usabilidade ser responsável por assegurar grande parte dos quesitos de experiência do usuário, ela possui duas grandes limitações:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ol start=&#34;1&#34;&gt;
    &lt;li&gt;
      Embora considere a satisfação do usuário, trata apenas dessa satisfação perante a realização de uma determinada tarefa, concentrando-se na função, sem considerar fatores físicos, ambientais e emocionais inerentes ao contexto de utilização do sistema. Mais do que ser de fácil utilização, aprendizagem e permitir completude da tarefa, uma boa experiência de uso está baseada em uma interação agradável, considerando a forma como as pessoas percebem a interação com o sistema;
    &lt;/li&gt;
    &lt;li&gt;
      O contexto usualmente analisado pela usabilidade é mais restrito: abrange apenas a visão do usuário. Para garantir uma boa experiência de uso, é necessário abranger a visão de diferentes &lt;em&gt;stakeholders&lt;/em&gt;: do usuário, da organização e da equipe de desenvolvimento, cada qual com requisitos e necessidades diferentes frente ao sistema.
    &lt;/li&gt;
  &lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Adaptando um gráfico apresentado durante a nnGroup Conference de 2008, podemos ver a usabilidade enquadrada da seguinte forma:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;attachment_4012&#34; style=&#34;width: 586px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/07/Slide2.png&#34;&gt;&lt;img class=&#34;size-full wp-image-4012 &#34; src=&#34;http://tableless.com.br/wp-content/uploads/2011/07/Slide2.png&#34; alt=&#34;O escopo da usabilidade&#34; width=&#34;576&#34; height=&#34;432&#34; srcset=&#34;uploads/2011/07/Slide2.png 960w, uploads/2011/07/Slide2-300x225.png 300w&#34; sizes=&#34;(max-width: 576px) 100vw, 576px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
  O escopo da usabilidade
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    Referências e Leitura Complementar
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    ABRAS, C.; MALONEY-KRICHMAR, D.; PREECE, J. &lt;strong&gt;User-Centered Design&lt;/strong&gt;. In: Bainbridge, W. &lt;em&gt;Encyclopedia of Human-Computer Interaction&lt;/em&gt;. Thousand Oaks: Sage Publications, 2004.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    CYBIS, W.; BETIOL, A. H.; FAUST, R. &lt;strong&gt;Ergonomia e Usabilidade: &lt;/strong&gt;Conhecimentos, Métodos e Aplicações. São Paulo: Novatec Editora, 2007. 344p.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    SUMATHI, B. &lt;strong&gt;Chapter Three: User Centered Design Approach&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://dspace.fsktm.um.edu.my/bitstream/1812/214/8/Chapter%20Three.pdf&#34;&gt;http://dspace.fsktm.um.edu.my/bitstream/1812/214/8/Chapter%20Three.pdf&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    NIELSEN, J.; LORANGER, H. &lt;strong&gt;Usabilidade na Web: &lt;/strong&gt;Projetando Websites com qualidade. Rio de Janeiro: Elsevier, 2007. 406p.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    OLIVEIRA NETTO, A. A. &lt;strong&gt;IHC – Interação Humano Computador:&lt;/strong&gt; Modelagem e Gerência de Interfaces com o Usuário. Florianópolis: VisualBooks, 2004. 120p.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    PREECE, J.; ROGERS; Y.; SHARP, H. &lt;strong&gt;Interaction Design: &lt;/strong&gt;Beyond Human-Computer Interaction. New York: John Wiley &amp;amp; Sons, Inc., 2002. 551p.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    ROCHA, H. R.; BARANAUSKAS, M. C. C. &lt;strong&gt;Design e Avaliação de Interfaces Humano-Computador&lt;/strong&gt;. Campinas: Universidade Estadual de Campinas, 2007.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    UX Revisions. &lt;strong&gt;The Difference Between Usability and User Experience&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://www.uxrevisions.com/user-experience-design/the-difference-between-usability-and-user-experience/18/&#34;&gt;http://www.uxrevisions.com/user-experience-design/the-difference-between-usability-and-user-experience/18/&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    UX Revisions. &lt;strong&gt;User Experience vs User Interaction&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://www.uxrevisions.com/user-experience-design/user-experience-vs-user-interaction/16/&#34;&gt;http://www.uxrevisions.com/user-experience-design/user-experience-vs-user-interaction/16/&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Usability Geek. &lt;strong&gt;The Difference (And Relationship) Between Usability And User Experience&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://usabilitygeek.com/the-difference-between-usability-and-user-experience/&#34;&gt;http://usabilitygeek.com/the-difference-between-usability-and-user-experience/&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    NeoSpot. &lt;strong&gt;Usability vs. User Experience (UX)&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://neospot.se/usability-vs-user-experience/&#34;&gt;http://neospot.se/usability-vs-user-experience/&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Interaction by Design. &lt;strong&gt;Usability vs. user experience&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://www.interactionbydesign.com/thoughts/thumbnails/00000050.html&#34;&gt;http://www.interactionbydesign.com/thoughts/thumbnails/00000050.html&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Especificação para touch screens</title>
      <link>https://tableless.github.io/hugo-public/especificacao-para-touch-screens/</link>
      <pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/especificacao-para-touch-screens/</guid>
      <description>&lt;p&gt;Até alguns anos atrás nós acessávamos a internet apenas utilizando computadores e celulares. Hoje existem aparelhos de diversos tipos. Temos até dispositivos como o &lt;a href=&#34;http://www.microsoft.com/surface/&#34;&gt;Surface&lt;/a&gt;, ainda que seu uso seja mais restrito e específico. Mas não demora muito que outros dispositivos surjam e preencham alguma lacuna escondida. O importante é entender que cada aparelho tem sua forma de interação.&lt;/p&gt;

&lt;p&gt;Hoje, as interfaces touch estão maduras e estáveis, que chegam a inspirar as interfaces dos sistemas desktops. Vide o que aconteceu com o OS X Lion e com o Windows 8. As principais ideias foram retiradas de suas respectivas interfaces mobiles: o Windows do Windows Phone e o Lion do OS X para iPad.&lt;/p&gt;

&lt;p&gt;As interfaces mobiles e as interfaces desktop ficarão mais homogêneas com o passar do tempo, se assemelhando cada vez mais, contudo, as interações são totalmente diferentes. As interfaces criadas para cada dispositivo nos ajudam a distinguir os ambientes e também a forma com que o usuário interage.&lt;/p&gt;

&lt;p&gt;Estamos acostumados com a experiência de interação com a ajuda do mouse. Isso foi desde os primórdios e provavelmente ainda será por bastante tempo. Nós desenhamos interfaces para ações baseadas no mouse ou qualquer aparelho que controle a setinha da sua tela. Criar interfaces touch é algo relativamente novo. Nós trouxemos ideias da interação com mouse para os dispositivos touch, mas grande parte das interações precisaram ser reinventadas porque o modo, o ato, a forma de interagir com a informação é diferente. Na interface touch você não &amp;#8220;coloca o mouse&amp;#8221; em cima do elemento. Você não utiliza teclas de atalho para executar ações. Normalmente as ações importantes estão expostas na interface, facilitando o acesso rápido. Isso é muito importante porque nos ensina criar interfaces mais intuitivas, com a curva de aprendizado menor.&lt;/p&gt;

&lt;p&gt;Há também o outro lado da moeda, onde detalhes das interfaces touch não podem ser portadas para interfaces baseadas em mouse. Lembre agora na forma de como você gira uma imagem em um dispositivo touch e como você gira essa mesma imagem utilizando um mouse. A interface muda, o seu comportamento muda.&lt;/p&gt;

&lt;p&gt;Sabendo dessas limitações você deve entender que não podemos simplesmente portar o visual de um determinado site para um dispositivo touch. Você pode dizer que &amp;#8220;hoje fazemos isso e até agora está funcionando muito bem&amp;#8221;. Mas pense melhor&amp;#8230; a grande maioria dos sites que você visita hoje no iPad ou qualquer outro tablet, por exemplo, são sites onde a sua interação é limitada. O que você faz em um site hoje em dia? Clica nos links e lê. Salvo às vezes quando você visita um site mais &amp;#8220;animadinho&amp;#8221; com mais ações para entreter o usuário. Mas e se você faz um site onde é preciso rotacionar uma imagem ou fazer um ZOOM? Você precisará manter as mesmas ações nos dois cenários. E como antigamente, para manter o cenário das interfaces touch você precisa da ajuda de muito script.&lt;/p&gt;

&lt;p&gt;Ambas as versões tem suas limitações e um legado de compatibilidade com seu sistema base que precisam manter.&lt;/p&gt;

&lt;p&gt;A ideia de criar uma especificação destinada para as interfaces touch é que tenhamos controle sobre as ações do usuário, da mesma forma que temos nos desktops. Para isso eles estão &lt;a href=&#34;http://bit.ly/mMP5jy&#34;&gt;mapeando uma série de eventos que específicos das interfaces touch&lt;/a&gt;. Assim podemos definir ações baseadas nessas interfaces. Estão participando da escrita desta especificação Doug Schepers do W3C, Sangwhan Moon da Opera Software ASA e Matt Brubeck da Mozilla.&lt;/p&gt;

&lt;p&gt;Se você parar para ler a específicação, vai entender que poderemos controlar quando o usuário interage encostando o dedo na tela, movendo o dedo e também ao retirá-lo. Você poderá controlar a área de toque. Se o elemento for pequeno, por exemplo, você poderá aumentar essa área de toque para que o usuário não tenha dificuldades. Poderá acionar eventos no momento que o usuário rotacionar os elementos. Se você está fazendo um WebApp poderá acionar um menu contextual personalizado quando o usuário fizer um &amp;#8220;tap&amp;#8221; com dois dedos. O usuário vira basicamente um proctologista. 😉&lt;/p&gt;

&lt;p&gt;A especificação ainda é um rascunho mas já está mostrando que as possibilidades são imensas. Eu vivo me perguntando até onde irá o HTML, CSS e Javascript com essas novas mudanças. Será que vão continuar fáceis como são hoje ou tudo vai ficar complicado? Será que serão eles que farão todo o trabalho ou novas linguagens serão criadas para lidar com essas novidades? Who knows? Eu tenho um palpite, mas é assunto para outra hora.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Em tempo de transição, quais recursos utilizar?</title>
      <link>https://tableless.github.io/hugo-public/em-tempo-de-transicao-quais-recursos-utilizar/</link>
      <pubDate>Tue, 24 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/em-tempo-de-transicao-quais-recursos-utilizar/</guid>
      <description>

&lt;p&gt;HTML 5, CSS3, IE9, Firefox 4&amp;#8230; enfim, siglas, nomes e versões que não param de pipocar nos tweets, posts, artigos, e em todos os lugares dentro do nosso universo do desenvolvimento web e automaticamente nos perguntamos &amp;#8211; como traçar nosso trabalho nesta época de transição? O que é certo? O que é errado?&lt;/p&gt;

&lt;h3 id=&#34;graciosamente-retroceder-ou-progressivamente-evoluir&#34;&gt;Graciosamente retroceder ou progressivamente evoluir?&lt;/h3&gt;

&lt;p&gt;A melhor análise antes de decidir qual caminho tomar e a qual evolução recorrer vem do planejamento de seu projeto. Estudo de estatísticas de navegadores, perfil do usuário, resolução de tela, dispositivos, etc; são alguns dos pontos a serem levados em consideração, criando material suficiente para você decidir qual caminho seguir: considerar o retrocesso [ por exemplo: desenvolver seu website para IE6 ] ou expor a evolução de forma progressiva [ por exemplo: utilizar bordas arredondadas e novas características via CSS3 ].&lt;/p&gt;

&lt;p&gt;Determinar os fins do projeto vão estabelecer o melhor caminho a seguir durante toda a sua execução pois, em época de transição, os riscos de utilizar algo que não dê certo e a presença de retrabalho são quase inevitáveis. Assim, considere todas as possibilidades.&lt;/p&gt;

&lt;h3 id=&#34;graciosamente-retroceder&#34;&gt;Graciosamente retroceder&lt;/h3&gt;

&lt;p&gt;Quando pensamos em retrocesso, no caso do desenvolvimento web, o utilizamos para conceituar uma codificação baseada em X-HTML/CSS 2 e Crossbrowser [ com browsers de mercado incluindo o IE6 ], de qualquer forma, a ideia não é pensar que esteja errado ou que seja um método fora de uso, mas sim uma segurança em utilizar o que já está regulamentado, validado pela W3C e igualmente embutido na renderização padrão dos browsers mais utilizados.&lt;/p&gt;

&lt;p&gt;Inúmeras são as dicas aqui no Tableles relacionadas à esta frente de desenvolvimento, mas o que podemos levar em consideração quando pensamos em desenvolver um website dentro dessas diretrizes é que: IE 6 e IE7 ainda devem fazer parte dos browsers em testes e que ainda utilizaremos imagens para criação de bordas arredondadas e sombras. Além claro, de nos encontrar em momentos que utilizaremos diversos elementos em nosso código html apenas para assegurar que algum efeito visual seja renderizado na tela [ as vezes dependente do uso de Javascript para tanto ]. Considerando estes pontos e pensando nos fins do projeto, basta iniciar o desenvolvimento.&lt;/p&gt;

&lt;p&gt;Algumas dicas que podem ajudar nesta escolha estão em: &lt;a href=&#34;http://tableless.com.br/categoria/client-side/html-css/page/2&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tableless.com.br/categoria/client-side/html-css/page/2&#34;&gt;http://tableless.com.br/categoria/client-side/html-css/page/2&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;progressivamente-evoluir&#34;&gt;Progressivamente evoluir&lt;/h3&gt;

&lt;p&gt;Como falamos acima, estamos num momento de transição que significa acima de tudo &amp;#8211; escolha. Utilizar novas possibilidades na criação de websites é uma escolha que deve ser igualmente planejada pois, o risco não vem do que já conhecemos e do que já sabemos que vai exigir maior cuidado, mas sim do que desconhecemos &amp;#8211; a renderização de novos parâmetros em folhas de estilo e a interpretação de uma nova tag html, por exemplo.&lt;/p&gt;

&lt;p&gt;Pouco ainda consegue-se definir a respeito das novas possibilidades, mas é fato que muitos desenvolvedores estão aprendendo como utilizar o novo, testando e reportando erros e acertos e este comportamento deve estender-se por anos, até que as diretrizes sejam regulamentadas pela W3C e os browsers tenham o mesmo número de usuários que suas versões de mercado tem hoje.&lt;/p&gt;

&lt;p&gt;Com isso, os testes geralmente giram em torno dos novos browsers, mas eventualmente necessitamos também direcionar o desenvolvimento à navegadores mais antigos, encontrando assim, a dificuldade em visualizar a mesma coisa em todos eles. Para ajudar, pensando em HTML 5 e CSS3, abaixo uma lista de algumas ferramentas que podem ajudar na implementação das novas técnicas em browsers e possibilidades atuais:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modernizr: &lt;a href=&#34;http://www.modernizr.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.modernizr.com/&#34;&gt;http://www.modernizr.com/&lt;/a&gt;&lt;/a&gt; &amp;#8211; uma ferramenta JavaScript que suporta propriedades CSS3 em diferentes navegadores.&lt;/li&gt;
&lt;li&gt;CSS3 Pie: &lt;a href=&#34;http://css3pie.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://css3pie.com/&#34;&gt;http://css3pie.com/&lt;/a&gt;&lt;/a&gt; &amp;#8211; &lt;a href=&#34;http://tableless.com.br/css3-bordas-arredondadas-sombras-e-gradiente&#34; target=&#34;_blank&#34;&gt;já comentada em outro artigo&lt;/a&gt;, o CSS3 Pie é uma ferramenta JavaScript que permite renderizar bordas arredondadas, background-gradient e box-shadow nas versões anteriores de IE.&lt;/li&gt;
&lt;li&gt;Selectivizr: &lt;a href=&#34;http://selectivizr.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://selectivizr.com/&#34;&gt;http://selectivizr.com/&lt;/a&gt;&lt;/a&gt; &amp;#8211; ferramenta JavaScript que emula seletores CSS3 e pseudo-classes, como por exemplo :focus em diferentes browsers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Além das ferramentas, conheça no link ao lado também, algumas das melhorias trazidas para as folhas de estilo em sua nova versão e para a evolução da linguagem de marcação &amp;#8211; o HTML5: &lt;a href=&#34;http://tableless.com.br/categoria/client-side/html-css&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tableless.com.br/categoria/client-side/html-css&#34;&gt;http://tableless.com.br/categoria/client-side/html-css&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Testar o novo ou trabalhar com o conhecido? Esta pergunta não podemos responder, mas analisadas as características do seu projeto, você mesmo poderá tomar esta decisão consciente de um trabalho profissional e determinado ao sucesso.&lt;/p&gt;

&lt;p&gt;Boas escolhas e até a próxima.&lt;/p&gt;

&lt;p&gt;😉&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>