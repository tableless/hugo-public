<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/dev/index.xml</link>
    <description>Recent content in Dev on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/dev/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL Essencial (parte 1)</title>
      <link>https://tableless.github.io/hugo-public/mysql-essencial-parte-1/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/mysql-essencial-parte-1/</guid>
      <description>

&lt;h2 id=&#34;o-inicio-e-quem-usa-o-mysql&#34;&gt;O inicio e quem usa o MySQL&lt;/h2&gt;

&lt;p&gt;O MySQL é um sistema relacional de gerenciamento de banco de dados de código aberto, que utiliza o SQL (Linguagem de consulta estruturada) como interface, é atualmente um dos bancos de dados mais populares na internet, mais de 10 milhões de instalações pelo mundo inteiro. Em Julho de 2013, foi considerado o segundo banco mais utilizado do mundo.&lt;/p&gt;

&lt;p&gt;Criado na Suécia por David Axmark, Allan Larsson e Michael &amp;#8220;Monty&amp;#8221; Widenius, a primeira versão surgiu em 23 de Maio de 1995. Hoje, seu desenvolvimento emprega mais de 400 profissionais no mundo inteiro. Em 2008, a MySQL AB, desenvolvedora do MySQL, foi comprada pela Sun Microsystems (que em 2009, foi comprada pela Oracle), por 1 bilhão de dólares.&lt;/p&gt;

&lt;p&gt;Entre alguns dos usuários mais famosos do MySQL, estão: PayPal, YouTube, Google, Walmart, NASA, Bradesco, Nokia, HP, Lufthansa, etc&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;mão-na-massa&#34;&gt;Mão na massa&lt;/h2&gt;

&lt;p&gt;Neste artigo, partiremos do principio que você já tem o MySQL instalado e rodando bonitinho&amp;#8230;&lt;/p&gt;

&lt;p&gt;Para acessar o MySQL utilize o comando a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;mysql -u &amp;lt;usuário&amp;gt; -p&lt;/pre&gt;

&lt;p&gt;Depois desse comando, o MySQL vai te pedir a senha do usuário, obviamente, por segurança.&lt;/p&gt;

&lt;p&gt;Dentro do MySQL, você tem poderes para atualizar, criar e editar qualquer tabela/banco. Para acessar o help, simplesmente digite &amp;#8216;help&amp;#8217; no terminal e aparecerá o menu de ajuda do MySQL.&lt;/p&gt;

&lt;p&gt;Para ver todos os bancos criados, utilize o:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;show databases;
&lt;/pre&gt;

&lt;p&gt;Para criar um banco, depois de logado no MySQL, você pode seguir o seguir o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;CREATE DATABASE banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;E &amp;#8216;paaaah&amp;#8217;, seu banco foi criado com sucesso. Agora você precisa acessar este banco:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;USE banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Agora, para a coisa ficar mais interessante, vamos criar uma tabela, para podermos adicionar dados nela:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;CREATE TABLE tabela_do_banco_exemplo (
id INT(11) AUTO_INCREMENT PRIMARY KEY,
first_name VARCHAR(30) NOT NULL,
last_name VARCHAR(30) NOT NULL,
mail VARCHAR(100) NOT NULL,
mobile VARCHAR(100),
created_at TIMESTAMP
);
&lt;/pre&gt;

&lt;p&gt;No comando acima, criamos uma tabela dentro o seu banco. Nessa tabela teremos 6 colunas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ID &amp;#8211; um número inteiro de até 11 caracteres que se auto incrementa, ou seja, nunca se repete, se já existir o 1, ele coloca o 2 e que é a chave principal da nossa tabela.&lt;/li&gt;
&lt;li&gt;first_name &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 30 caracteres e não pode ser NULL.&lt;/li&gt;
&lt;li&gt;last_name &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 30 caracteres e não pode ser NULL.&lt;/li&gt;
&lt;li&gt;mail &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 100 caracteres e não pode ser NULL.&lt;/li&gt;
&lt;li&gt;mobile &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 100 caracteres.&lt;/li&gt;
&lt;li&gt;created_at &amp;#8211; TIMESTAMP preenche a coluna com o exato horário da inserção da linha na tabela, ou seja, o momento em que a linha foi inserida.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora vamos partir para a inserção de conteúdo dentro desta tabela, a final, uma tabela sem nenhuma linha de conteúdo não tem nenhuma função. Então vamos lá:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;INSERT INTO tabela_do_banco_exemplo (first_name, last_name, mail, mobile, created_at) VALUES (&#39;claudio&#39;, &#39;melo&#39;,&#39;claudio@claudiomelo.net&#39;,&#39;(11) 99999-9999&#39;, NOW());
&lt;/pre&gt;

&lt;p&gt;Ao infinito e além, bom, é o seguinte, na linha acima, inserimos uma linha na tabela que criamos, o INSERT INTO, se explica por si só, né? Lembrando que não colocamos o ID pois ele se &amp;#8220;AUTO INCREMENTA&amp;#8221;, como setamos ao criar a nossa tabela.&lt;/p&gt;

&lt;p&gt;Quando especificamos as colunas que devem ser inseridas, não precisamos necessariamente respeitar a ordem que fizemos quando criamos a tabela, como podem ver no exemplo, eu inverti o mobile e o mail, como dizia na matemática, a ordem dos fatores não altera o produto. Porém, lembre-se de, quando setar o conteúdo da coluna nos VALUES, você tem que seguir a mesma ordem que declarou na lista de colunas que serão atingidas.&lt;/p&gt;

&lt;p&gt;Agora que já criamos um banco, já criamos uma tabela, já inserimos conteúdo dentro desta tabela, chegou o momento de buscar algum conteúdo dentro dessa tabela:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT * FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Isso vai te retornar TODAS as colunas de uma tabela, simples né? Se tiver 50 linhas na sua tabela, o select vai te retornar todas as colunas das 50 linhas. E mais uma vez, você deve estar prestes a me xingar por que quer só as colunas que precisa, mas ai eu te digo, vamos pegar somente as colunas que queremos neste momento:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT first_name FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Mais simples que isso, faça um esforço e tente entender a linha que escrevemos, esqueça o CTRL+C e CTRL+V. Pedimos ao banco um SELECT da coluna first_name, isso vai nos retornar o first_name de todas as linhas da nossa tabela.&lt;/p&gt;

&lt;p&gt;Nesse momento, podemos ser até um pouco mais ousados, eu diria, vamos selecionar a coluna mobile somente de linhas que tem números de telefone diferentes, ou seja, dois cadastros com números iguais de telefone, não aparecerão nessa lista:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT DISTINCT mobile FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Agora você deve estar louco para buscar duas colunas junto com o DISTINCT, então vamos nessa:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT DISTINCT mobile, first_name FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Isso vai nos retornar uma lista onde não haverá linhas que repitam o número de telefone E (preste bem a atenção neste E) o primeiro nome.&lt;/p&gt;

&lt;p&gt;Bom, por enquanto é só. Criticas ou sugestões é só falar nos comentários ou entrar em contato comigo, ficarei muito agradecido! Em breve teremos a parte 2 para continuar esse papo legal sobre MySQL.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O mercado de desenvolvimento front-end</title>
      <link>https://tableless.github.io/hugo-public/pensamentos-sobre-o-mercado-de-desenvolvimento-front-end/</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/pensamentos-sobre-o-mercado-de-desenvolvimento-front-end/</guid>
      <description>

&lt;p&gt;Você já deve ter notado que o mercado cresceu demais nos últimos anos. De repente, codificar HTML virou a coisa mais importante do mundo e saber JavaScript transforma você automaticamente em um rockstar.&lt;/p&gt;

&lt;p&gt;O interesse das empresas também aumentou bastante. Empresas gringas tem buscado desesperadamente profissionais no mundo todo, inclusive no Brasil. Hoje não é muito difícil ir trabalhar em Amsterdam ou em Bangkok. A mão de obra nestes países está bem escassa. Mal sabem eles que aqui no Brasil o cenário é o mesmo: falta profissionais. Isso é bom, por um lado, pois os novatos ganham importantes oportunidades . Quem se esforça para aprender certo e rápido, se dá muito bem.&lt;/p&gt;

&lt;p&gt;Diversos fatores contribuíram para que a revolução acontecesse e que finalmente o dev front-end se tornasse a estrela da vez. E sim, isso é uma REvolução.&lt;/p&gt;

&lt;h2 id=&#34;a-primeira-evolução&#34;&gt;A primeira Evolução&lt;/h2&gt;

&lt;p&gt;Se você é novo na profissão, pode não ter acompanhado quando a febre dos Padrões Web contaminou todos os devs. Foi um negócio bem incrível de viver.&lt;/p&gt;

&lt;p&gt;O cenário do desenvolvimento web naquele início era bem grotesco. Tudo estava começando e ninguém — ninguém mesmo — sabia de verdade como produzir websites. Estou falando de um mercado pós-bolha.&lt;/p&gt;

&lt;p&gt;Os browsers eram bem ruins. O W3C era mais lerdo que uma tartaruga para avançar com as recomendações. E os desenvolvedores sofriam de todas as maneiras possíveis.&lt;/p&gt;

&lt;p&gt;Produzir websites para browsers ruins e uma conexão indecente era uma aventura. É por isso que dou risada quando alguém diz que o Internet Explorer 8 é uma porcaria. Ah! Se ele soubesse como é resolver um bug para o IE3/4…&lt;/p&gt;

&lt;p&gt;Foi nesse cenário e em plena guerra dos browsers que o WaSP surgiu. O WaSP era composto de designers e desenvolvedores que estavam cansados de produzir websites de maneira espartana. Algo precisava acontecer, precisava mudar. Tudo precisava ser derrubado para algo novo se reerguer. Eles fizeram exatamente isso. A evolução foi iniciada nas trincheiras.&lt;/p&gt;

&lt;p&gt;Hoje o mercado está no patamar atual muito por causa da iniciativa desses poucos profissionais inconformados. Este foi um fator importante, que abriu a trilha para o caminho correto. Vamos aos outros pontos.&lt;/p&gt;

&lt;h2 id=&#34;o-html-5&#34;&gt;O HTML 5&lt;/h2&gt;

&lt;p&gt;A forma com que as novidades do HTML foram divulgadas pelo W3C e pelo grupo WHATWG ajudaram muito a adoção e principalmente na popularidade da linguagem. Nenhuma outra versão do HTML ganhou um logo, um site para divulgação, adesivos, camisetas e etc… Toda esse campanha contribuiu para que o HTML fosse divulgado como uma linguagem séria e madura.&lt;/p&gt;

&lt;p&gt;O WHATWG teve uma atitude muito semelhante que a do WaSP. Eles estavam cansados de esperar as decisões do W3C, que literalmente levavam anos para serem tomadas. Foi aí que um grupo de desenvolvedores resolveu iniciar por conta própria a recomendação do que seria hoje o HTML5.&lt;/p&gt;

&lt;p&gt;As novas APIs facilitaram milhões de vezes a manipulação do DOM com JavaScript. Isso chamou a atenção de outros profissionais, como designers e desenvolvedores back-end. A partir de então tudo começou a mudar, desde o processo de desenvolvimento até a divisão de responsabilidades em projetos.&lt;/p&gt;

&lt;p&gt;Os desenvolvedores back-end sempre tiveram o suporte de várias ferramentas que os auxiliam no desenvolvimento. Mas esse suporte praticamente não existia no mundo front-end. Me lembro da empolgação geral quando saiu uma extensão do Firefox chamada Web Developer Tools. O que nos leva a outro ponto importante: ferramentário.&lt;/p&gt;

&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;

&lt;p&gt;Quem nunca ouviu falar de Yeoman, Bower, Grunt, Middleman, Jekyll, Sass, Compass, Less e uma série de outras ferramentas que facilitam o desenvolvimento diário? Depois que o Node.js surgiu, uma série de ferramentas surgiriam com ele. Outras ferramentas vieram da comunidade Ruby, suprindo uma série de outras dificuldades.&lt;/p&gt;

&lt;p&gt;Hoje podemos automatizar tarefas com o Grunt ou Gulp, gerenciar nossas dependências com o Bower, escrever sites estáticos com Middleman e Jekyll. Há uma série de outras ferramentas que medem a performance do site, que buscam erros no seu código etc etc etc.&lt;/p&gt;

&lt;p&gt;A falta de ferramentas era um problema grande no início. Não havia nada que nos ajudasse a escrever código de alta qualidade, apenas nós mesmos e a fiscalização dos colegas de trabalho. Fazia parecer que a área era meio amadora, sabe? Tentando fazer as coisas no achismo. Parecia que todo mundo ainda estava tentando descobrir os truques da área. Hoje é muito difícil conhecer alguém que não conheça o Inspector dos browsers ou que não use qualquer outra ferramenta auxiliar.&lt;/p&gt;

&lt;h2 id=&#34;o-javascript&#34;&gt;O JavaScript&lt;/h2&gt;

&lt;p&gt;Mas, na minha opinião, o que fez com que pessoas olhassem o front-end de forma diferente foi o JavaScript. De uma hora para outra uma série de iniciativas envolvendo a linguagem surgiram e de repente todo mundo achava o JavaScript uma linguagem maravilhosa. Principalmente os devs back-end que tinham uma visão ruim da nossa profissão. Muitos desdenhavam porque achavam que era só escrever HTML e pintar quadradinhos com CSS.&lt;/p&gt;

&lt;p&gt;O Node.js abriu os olhos de muita gente. Gente que não dava nada para esse mercado. Daí em diante é história.&lt;/p&gt;

&lt;p&gt;Depois que frameworks como Angular, Ember e Backbone surgiram, a badalação em volta do JavaScript cresceu muito. Isso é bom e ruim. É muito polêmico ainda escrever JS no servidor. Em vários lugares os devs ainda estão perdidos. A iniciativa de escrever JS no servidoré algo um pouco nebuloso ainda. Desenvolvedores que não sabem lidar com a novidade, acabam fazendo projetos híbridos, construindo parte de projetos com essas tecnologias. O projeto acaba ficando estranho, onde parte é escrita em JavaScript no servidor e a outra é escrita em linguagem server-side comum. Isso por que todo mundo quer experimentar. Eu ainda acho estranho abordagens assim. Se você quer escrever JS no servidor, ele precisa ser sua linguagem principal. Oras, você nunca misturou PHP com Ruby, não é? Por que fazer parte do projeto em Ruby e apenas um pedaço JavaScript então? Mesmo assim, essa visão é meio estranha, já que nenhuma linguagem resolve todos os problemas de um projeto. &lt;/p&gt;

&lt;p&gt;Mesmo assim o mercado vai caminhando. Não creio que essa confusão dure muito mais tempo e que todo mundo consiga encontrar uma maneira decente de fazer o processo funcionar.&lt;/p&gt;

&lt;p&gt;Além disso, um dev front-end não é só aquele que escreve JavaScript. Envolve muito mais. Na verdade esse é outro problema. Para mim não existe front-end, existe designer e programador. Mas deixa essa conversa para próxima.&lt;/p&gt;

&lt;h2 id=&#34;aceitação-do-grupo&#34;&gt;Aceitação do grupo&lt;/h2&gt;

&lt;p&gt;Aos poucos os front-ends foram sendo aceitos no processo e em outros meios. Essa aceitação é ótima. Existe o lado ruim sim, mas toda essa vitrine que o mercado de front-end ganhou é interessante para essa comunidade que andava pelas sombras e com vergonha de si mesmo durante anos. Esse novo ciclo é bom para aprendermos o que realmente dá resultado e como podemos formar profissionais cada vez mais importantes no processo.&lt;/p&gt;

&lt;p&gt;É importante que os devs tenham ideia do contexto geral desse mercado para que não sejam engolidos como aconteceu anos atrás, tanto na bolha, quanto no advento dos Padrões Web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Artigo originalmente &lt;a href=&#34;https://medium.com/@diegoeis/sobre-o-mercado-de-desenvolvimento-front-end-7fdd918c4206&#34;&gt;escrito no meu blog&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6 dicas para se dar bem em freelas e trabalhos remotos</title>
      <link>https://tableless.github.io/hugo-public/6-dicas-freelas-remoto/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/6-dicas-freelas-remoto/</guid>
      <description>

&lt;p&gt;Ao contrário do que muitos acham, trabalho remoto (ou até um projeto freelancer) não é algo fácil. Eu sei que é o sonho de todo mundo ficar em casa, organizar o seu próprio horário para ir ao parque (cinema, praia, sítio, bar, prostíbulo etc etc etc) enquanto todo mundo se mata em um escritório.&lt;/p&gt;

&lt;p&gt;Para ter esse privilégio, você não precisa ser só bom no que faz, você precisa ser responsável e ter disciplinas extras que vão além das suas responsabilidades técnicas.&lt;/p&gt;

&lt;p&gt;Montar uma empresa remota &amp;#8211; como o Tableless está se tornando &amp;#8211; é algo realmente desafiador. Você precisa encontrar profissionais que tem um senso &amp;#8220;social&amp;#8221; muito apurado. Que não pensam apenas na sua tarefa, mas também na tarefa de todos os outros integrantes do projeto, inclusive, o lado do cliente, que geralmente está preocupado com o andamento do projeto.&lt;/p&gt;

&lt;p&gt;Estas são algumas dicas básicas para você não ser um fiasco quando quiser se aventurar em trabalhar remotamente, aqui no Tableless ou em qualquer outra empresa que tenha essa possibilidade:&lt;/p&gt;

&lt;h2 id=&#34;1-dê-status&#34;&gt;1. Dê status&lt;/h2&gt;

&lt;p&gt;A equipe não está o tempo todo do seu lado e é muito difícil todo mundo trabalhar no mesmo horário. Trabalhar em uma equipe remota não quer dizer que todo mundo precisa estar ali no chat o dia inteiro. Claro, é bem diferente se você trabalha em uma empresa convencional e vai fazer um dia de trabalho remoto. Nesse caso é muito aconselhável que você trabalhe no horário normal, como se você tivesse ido à empresa normalmente.&lt;/p&gt;

&lt;p&gt;Em uma equipe não presencial, o status é o que faz as coisas não saírem dos eixos. Você precisa dar e receber o status do projeto o tempo inteiro. Seja por email, por sms, por código morse ou sinal de fumaça. Você precisa dar notícias e essas notícias precisam ser frequentes.&lt;/p&gt;

&lt;p&gt;&amp;#8220;Mas Diego, não basta a equipe olhar os commits e pronto?&amp;#8221;&lt;/p&gt;

&lt;p&gt;Não, não é só checar os commits e a listagem de issues concluídas. A equipe e a pessoa que interage e atende o cliente precisa saber de TUDO. Embora seu commit seja incrivelmente detalhado, isso não basta. Você precisa conversar com a equipe e dizer exatamente qual o status da sua parte no projeto. A lista de tarefas feitas e a lista de commits serão o apoio, mas o que vai mesmo deixá-los seguros e informados são as suas palavras.&lt;/p&gt;

&lt;p&gt;Se você não gosta de dar satisfações, esqueça, você não serve para fazer trabalho remoto. Se você não gosta de mandar email dizendo detalhadamente em que pé está seu trabalho, desista, isso não é para você.&lt;/p&gt;

&lt;p&gt;Geralmente o status pode ser dado 2 vezes ao dia, pela manhã e na parte da tarde. Se você fizer uma parada longa no decorrer do dia, é bom também manter a equipe informada. Mas geralmente um report no meio da manhã e outro no final da tarde é essencial para que o gerente do projeto possa informar ao cliente como tudo está andando.&lt;/p&gt;

&lt;h2 id=&#34;2-nunca-omita-informações&#34;&gt;2. Nunca omita informações&lt;/h2&gt;

&lt;p&gt;Se você precisa dar notícias o tempo todo, você não pode, em hipótese alguma, omitir ou esquecer informações. Quando alguém perguntar a você qual o status da tarefa, não se preocupe se ela está incompleta, diga exatamente o status atual. Não tente agradar ou dar aquela enrolada, isso não funciona.&lt;/p&gt;

&lt;p&gt;Se falta fazer um pedaço da funcionalidade, diga. Se você se esqueceu de fazer alguma coisa, diga. Se você bebeu até cair na noite anterior e não vai conseguir trabalhar, diga. Mas nunca, de forma nenhuma, omita qualquer tipo de informação.&lt;/p&gt;

&lt;p&gt;Digo isso porque toda a equipe e também quem está lidando direto com o cliente necessita de informações exatas. Se você simplesmente omitir informações, as decisões emergenciais, que são as decisões mais importantes, serão totalmente equivocadas.&lt;/p&gt;

&lt;p&gt;Essas informações serão usadas também indicar um status mais adequado para o cliente. Aqui no Tableless eu sou bem sincero. Prefiro perder o cliente falando a verdade do que tentar enrolá-lo. Dá mais trabalho enrolar do que perder o projeto. Prefiro ficar são para finalizar os outros projetos que restam, do que aflito e maluco tentando inventar uma desculpa para o cliente.&lt;/p&gt;

&lt;p&gt;Dinheiro nenhum paga uma dor de cabeça desse tipo.&lt;/p&gt;

&lt;h2 id=&#34;3-mantenha-o-repositório-do-projeto-sempre-atualizado&#34;&gt;3. Mantenha o repositório do projeto sempre atualizado&lt;/h2&gt;

&lt;p&gt;NUNCA, NUNCA, NUNCA saia da frente do computador sem dar um push antes. Vai pra praia curtir? Atualize seu projeto e envie seus commits para o repositório. Vai pro parque correr com seu cachorro? Atualize o repositório.&lt;/p&gt;

&lt;p&gt;Atrasar um projeto por que você não atualizou o repositório é coisa de júnior. Ainda mais quando as suas tarefas afetam as tarefas do time.&lt;/p&gt;

&lt;p&gt;Esse é um erro que pode causar uma dor de cabeça terrível para equipe inteira.&lt;/p&gt;

&lt;p&gt;Só para deixar claro: não estou dizendo que você tem que subir tarefas incompletas. Você só sobe tarefas totalmente completas e revisadas para o repositório. Mesmo assim, se você estiver trabalhando em um branch separado dedicado para uma determinada tarefa, suba tudo o que puder e avise o time que determinado branch está com uma tarefa incompleta, mas sempre deixe esse branch atualizado. Alguém, eventualmente, pode continuar seu projeto de onde você parou. Se isso acontecer e você não tiver atualizado o branch, alguém vai ter problemas.&lt;/p&gt;

&lt;h2 id=&#34;4-uma-notícia-ruim-é-melhor-do-que-notícia-nenhuma&#34;&gt;4. Uma notícia ruim é melhor do que notícia nenhuma&lt;/h2&gt;

&lt;p&gt;Ahhh, notícias ruins. Notícias ruins são normais em projetos de internet. Contudo, não ter notícia nenhuma é pior. O cliente fica desesperado, estressado e começa a duvidar da sua capacidade. Problemas acontecem. Estamos falando sobre desenvolvimento de software, ou seja, problemas invariavelmente acontecerão.&lt;/p&gt;

&lt;p&gt;O problema é a sua posição perante este cenário. Ninguém gosta de receber notícias ruins, mas todo mundo gosta de receber notícias sobre seu projeto. É importante para que o cliente consiga programar seu cronograma. Ele pode ter engatilhado um grande lançamento, campanha de marketing, apresentação para executivos ou qualquer outra coisa importante. Quando você não dá a notícia ruim (ou qualquer outra notícia), você prejudica uma cadeia inteira de pessoas e processos.&lt;/p&gt;

&lt;p&gt;Lembre-se que O problema não é dar a notícia ruim, o problema é não dar notícia nenhuma. Sempre dê notícias sobre o projeto para o cliente, por mais insignificante que essa notícia seja.&lt;/p&gt;

&lt;h2 id=&#34;5-não-pegue-o-projeto-se-você-acha-que-não-vai-entregá-lo&#34;&gt;5. Não pegue o projeto se você acha que não vai entregá-lo&lt;/h2&gt;

&lt;p&gt;Talvez você esteja muito atarefado. Talvez você esteja de saco cheio e queira tirar férias. Talvez você queira tanto dinheiro que se envolve em muitos projetos e não entrega nenhum. Talvez você tenha problemas de saúde&amp;#8230; Não importa o motivo, mas se você sabe que não vai conseguir entregar o projeto, seja por incompetência ou por qualquer outro motivo, não se comprometa.&lt;/p&gt;

&lt;p&gt;É melhor perder um cliente que talvez possa te contactar novamente mais tarde, do que você se envolver, estragar o projeto do cliente e depois largá-lo com um problema gigante nas mãos.&lt;/p&gt;

&lt;p&gt;Nesse cenário, o melhor é ser honesto. Diga que você não tem tempo porque está com muitos projetos, porque pretende viajar ou por causa de qualquer outro motivo. Nunca dispense o cliente sem uma desculpa verdadeira.&lt;/p&gt;

&lt;p&gt;O cliente não vai ficar bravo com você. Nesse momento você não está comprometido com nada. Você pode dizer &lt;em&gt;não&lt;/em&gt; tranquilamente nesse momento.&lt;/p&gt;

&lt;h2 id=&#34;6-seja-responsável&#34;&gt;6. Seja responsável&lt;/h2&gt;

&lt;p&gt;Eu sinto que não deveria conversar sobre nenhum destes pontos com ninguém, pelo simples motivo de que isso é questão de ter ou não responsabilidade. Se você tiver responsabilidade e claro, comprometimento, você vai se dar bem. O problema é que muitos devs simplesmente pisam na bola e para mim isso não tem outro nome: irresponsabilidade.&lt;/p&gt;

&lt;p&gt;Você tem um trabalho para entregar e existem pessoas que contam contigo. Você tem um cliente, que te paga para fazer um determinado projeto, ele &amp;#8220;manda&amp;#8221; na bagaça toda. É muita falta de responsabilidade, de educação e comprometimento você falhar ao tentar deixá-lo a par dos acontecimentos do seu próprio projeto.&lt;/p&gt;

&lt;p&gt;Lembre-se de todas essas disciplinas e com certeza você vai se destacar da média.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drops 10 – Web Apps ou Instaláveis no dispositivos?</title>
      <link>https://tableless.github.io/hugo-public/drops-10-web-apps-ou-instalaveis-no-dispositivos/</link>
      <pubDate>Fri, 22 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/drops-10-web-apps-ou-instalaveis-no-dispositivos/</guid>
      <description>&lt;p&gt;Você fará uma aplicação. Essa aplicação será instalada no dispositivo ou será baseada em web?&lt;/p&gt;

&lt;p&gt;Essa é uma discussão antiga e não dá para dizer o que é certo e errado por enquanto. Eu sou do time do pessoal que acha que web apps são o melhor caminho. Tenho alguns motivos para pensar assim e quero compartilhar com vocês nesse Drops. O que você acha sobre isso?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/podcast/drops10.mp3&#34;&gt;Link direto do arquivo&lt;/a&gt;. &lt;a href=&#34;feed://tableless.com.br/categoria/podcasts/feed/&#34;&gt;RSS direto do podcast&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O dev front-end – Podcast #1</title>
      <link>https://tableless.github.io/hugo-public/o-dev-front-end-podcast-1/</link>
      <pubDate>Sun, 06 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-dev-front-end-podcast-1/</guid>
      <description>&lt;p&gt;Estamos relançando o podcast do Tableless. Este será o primeiro e falamos sobre um assunto que está sendo bastante comentado nos últimos dias.&lt;/p&gt;

&lt;p&gt;Será que o desenvolvedor client-side deveria fazer alguma faculdade? Será que ele precisa aprender a programar? Será que seria interessante ele ser um designer? Será que aprender apenas um framework javascript já é o suficiente?&lt;/p&gt;

&lt;p&gt;Assine o &lt;a href=&#34;http://tableless.com.br/categoria/podcasts/feed&#34;&gt;FEED direto do podcast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Arquivo mp3.&lt;/p&gt;

&lt;p&gt;Link &lt;a href=&#34;http://tableless.com.br/podcast/podcast1-final.mp3&#34;&gt;direto do MP3&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>