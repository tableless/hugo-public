<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Semantic.Gs on Tableless</title>
    <link>http://tableless.com.br/tags/semantic.gs/index.xml</link>
    <description>Recent content in Semantic.Gs on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/semantic.gs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Grids semânticos com LESS</title>
      <link>http://tableless.com.br/grids-semanticos-com-less/</link>
      <pubDate>Fri, 08 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/grids-semanticos-com-less/</guid>
      <description>

&lt;h1 id=&#34;grids-semânticos-com-less&#34;&gt;Grids semânticos com LESS&lt;/h1&gt;

&lt;p&gt;Já reparou como os blocos da sidebar aqui do Tableless possuem todos a mesma largura? Ou como a largura do bloco de artigo somada a largura da sidebar é equivalente ao wrap do menu e do rodapé? Mesmo que você não tenha percebido isto antes de maneira consciente, a informação parece mais organizada desta forma&amp;#8230;É por que o design do Tableless, como boa parte do conteúdo da internet, foi alinhado com o auxilio de um grid.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-grid&#34;&gt;O que é um grid?&lt;/h2&gt;

&lt;p&gt;Um grid é basicamente um conjunto de linhas guias, horizontais e/ou verticais, que servem de base para um design. No caso de design digital, o grid funciona como um esqueleto onde o layout será apoiado. Grids estão em todos os lugares, mesmo que você não os enxergue. Basta olhar a sua volta. A organização da informação é uma das principais vantagens na utilização de um grid, mas eu poderia citar diversas outras como precisão, consistência, hierarquia visual, ritmo&amp;#8230; Só isto já daria um artigo inteiro. Grids são mesmo maravilhosos e a maior parte dos designers que conheço são apaixonados pro eles. Mas muitas vezes reproduzir a precisão de um grid em um código HTML/CSS é uma tarefa muito desgastante. Alguns desenvolvedores &amp;#8211; as vezes por desconhecimento, as vezes por preguiça, as vezes por falta de tempo hábil &amp;#8211; acabam alterando os valores. Arredondam uma porcentagem aqui, inventam uma margem ali, completamente desconsideram o valor de espaçamento entre linha&amp;#8230; Resultado: o layout final parece bem diferente do original já que o grid foi praticamente descartado. Designers choram. Desenvolvedores se descabelam. Caos. Okay, talvez não de maneira tão dramática. Mas recriar a precisão do grid no CSS pode ser um problema. Ainda mais quando se trata de um projeto que inclui design responsivo&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;sistemas-convencionais-de-grids-e-seus-problemas&#34;&gt;Sistemas convencionais de grids (e seus problemas)&lt;/h2&gt;

&lt;p&gt;Existem algumas alternativas que prometem ajudar nesta tarefa. Sistemas como o &lt;a href=&#34;http://cssgrid.net/&#34; title=&#34;1140 Grid System&#34;&gt;1140 Grid System&lt;/a&gt; e o clássico &lt;a href=&#34;http://960.gs/&#34; title=&#34;960gs&#34;&gt;960gs&lt;/a&gt; quebram um galho e são faceis de utilizar, mas diversos aspectos me incomodavam nestes sistemas: classes não semânticas que sujavam o código (.onecol, .twocol&amp;#8230; argh!), a necessidade de utilizar excessivamente truques como clearfix para &amp;#8220;abrir&amp;#8221; as fileiras e o aspecto engessado já que em nenhum destes sistemas existia a opção de customizar a largura das margens e colunas de acordo com o projeto. O jeito então era escrever manualmente um grid para cada job. Falo por mim mesma quando digo que matemática nunca foi o meu forte e aqueles pequenos segundos quebrando a cabeça na calculadora acabavam deixando todo processo mais lento quando somados no fim do dia. Mas tudo isto mudou com o adventos dos pré-processadores de CSS.&lt;/p&gt;

&lt;h2 id=&#34;para-que-servem-pré-processadores&#34;&gt;Para que servem pré-processadores?&lt;/h2&gt;

&lt;p&gt;Basicamente eles pegam o texto escrito em uma linguagem e convertem ele para outra. Ou seja, literalmente pré-processam o código. No que isto é útil? Bem, é possível adicionar funcionalidades novas em linguagens pré existentes. Sistemas como &lt;a href=&#34;http://lesscss.org/&#34; title=&#34;LESS &#34;&gt;LESS&lt;/a&gt;, &lt;a href=&#34;http://sass-lang.com/&#34; title=&#34;SASS&#34;&gt;SASS&lt;/a&gt; e &lt;a href=&#34;http://learnboost.github.com/stylus/&#34; title=&#34;Stylus&#34;&gt;Stylus&lt;/a&gt; tornam possível trabalhar com velhos conhecidos dos programadores como variáveis, mixins, funções e operações matemáticas dentro do próprio CSS. É algo como uma folha de estilos com esteróides. E são estas funcionalidades extras que permitem a criação de um grid semântico.&lt;/p&gt;

&lt;h2 id=&#34;um-aviso-aos-navegantes&#34;&gt;Um aviso aos navegantes&lt;/h2&gt;

&lt;p&gt;Vamos utilizar o sistema &lt;a href=&#34;http://semantic.gs/&#34; title=&#34;Semantic.gs&#34;&gt;Semantic.gs&lt;/a&gt;. Existem muitos outros do tipo, mas a vantagem dele é que não se trata de um framework cheio de classes inúteis ou de um plugin de js que pesará no final. Este grid é todo escrito usando apenas CSS compatível com as linguagens do LESS, SASS e Stylus. Para este artigo eu escolhi utilizar LESS por ser a linguagem mais popular. Mas é facinho de adaptar para as outras, só vai mudar a sintaxe. Ainda não sabe utilizar o LESS? Sugiro que você leia o artigo aqui do Tableless &amp;#8220;&lt;a href=&#34;http://tableless.com.br/css-dinamico-com-less/&#34; title=&#34;CSS dinâmico com LESS&#34;&gt;CSS Dinâmico com Less&lt;/a&gt;&amp;#8220;. Entendeu tudo direitinho? Então você esta pronto para começar.&lt;/p&gt;

&lt;h2 id=&#34;o-design&#34;&gt;O design&lt;/h2&gt;

&lt;p&gt;O primeiro passo, obviamente, é criar o grid no seu editor de imagens favoritos. No caso do Photoshop você pode quebrar a cabeça puxando linhas guias, utilizar algum plugin como o &lt;a href=&#34;http://guideguide.me/&#34; title=&#34;GuideGuide&#34;&gt;GuideGuide&lt;/a&gt; ou ainda utilizar usar um gerador online. Eu recomendo o &lt;a href=&#34;http://gridcalculator.dk/&#34; title=&#34;Grid Calculator&#34;&gt;Grid Calculator&lt;/a&gt;. Você insere o tamanho das colunas, das margens e a largura total do arquivo e magicamente ele gera um script de Photoshop ou Ilustrator ou ainda um arquivo em png com o grid prontinho. Mais fácil que tirar sarro do Internet Explorer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Um grid é basicamente um conjunto de linhas guias, horizontais e/ou verticais, que servem de base para um design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então vamos considerar uma estrutura basica bem simples. Header, um bloco de conteúdo, sidebar e footer em um wrap de 960 pixes de largura.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-13192&#34; alt=&#34;grid-exemplo-layout&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/03/layout.jpg&#34; width=&#34;580&#34; height=&#34;407&#34; srcset=&#34;uploads/2013/03/layout.jpg 580w, uploads/2013/03/layout-239x168.jpg 239w, uploads/2013/03/layout-441x310.jpg 441w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para criar este layout eu utilizei um grid de 12 colunas com 60 pixels de largura. Okay. Layout feito. Hora de desenvolver.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-13191&#34; alt=&#34;grid-exemplo-colunas&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/03/grid.jpg&#34; width=&#34;580&#34; height=&#34;407&#34; srcset=&#34;uploads/2013/03/grid.jpg 580w, uploads/2013/03/grid-239x168.jpg 239w, uploads/2013/03/grid-441x310.jpg 441w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;construindo-o-grid&#34;&gt;Construindo o Grid&lt;/h2&gt;

&lt;p&gt;Baixe a &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/03/grid.zip&#34;&gt;Demo&lt;/a&gt; ou crie um novo arquivo HTML com a seguinte estrutura.&lt;/p&gt;

&lt;pre&gt;&amp;lt;body&amp;gt;

&amp;lt;div class=&#34;wrap&#34;&amp;gt;
&amp;lt;header class=&#34;cabecalho&#34;&amp;gt;
&amp;lt;h1&amp;gt;Header&amp;lt;/h1&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;section class=&#34;conteudo&#34;&amp;gt;
&amp;lt;h1&amp;gt;Conteúdo&amp;lt;/h1&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;aside class=&#34;sidebar&#34;&amp;gt;
&amp;lt;h1&amp;gt;Sidebar&amp;lt;/h1&amp;gt;
&amp;lt;/aside&amp;gt;

&amp;lt;footer class=&#34;footer&#34;&amp;gt;
&amp;lt;h1&amp;gt;Footer&amp;lt;/h1&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;/div&amp;gt; &amp;lt;!-- /wrap--&amp;gt;

&amp;lt;/body&amp;gt;&lt;/pre&gt;

&lt;p&gt;Crie também um arquivo de CSS na linguagem LESS (style.less, por exemplo) e coloque o link entre as tags head do seu layout.&lt;/p&gt;

&lt;pre&gt;&amp;lt;link rel=&#34;stylesheet/less&#34; href=&#34;css/style.less&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Não se esqueça de fazer o download da &lt;a href=&#34;https://raw.github.com/cloudhead/less.js/master/dist/less-1.3.3.min.js&#34; title=&#34;LESS&#34;&gt;última versão do LESS&lt;/a&gt; e referencia-la também head do seu HTML. Lembrando sempre que este script deve aparecer depois da folha de estilos.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;js/less-1.3.3.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hora de setar o nosso grid. Inclua o seguinte código na sua folha de estilos LESS:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* ==|=======================================================================
   Grid //  http://semantic.gs/ 
========================================================================== */

/*Altere estes valores de acordo com a largura das colunas, largura das margens e o número de colunas do seu grid.*/
@column-width: 60;
@gutter-width: 20;
@columns: 12;

@gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;

/*Delete a linha abaixo se desejar trabalhar com valores em pixel.*/
@total-width: 100%;

.clearfix() {
    *zoom:1;

    &amp;:before,
    &amp;:after {
        content:&#34;&#34;;
        display:table;
    }
    &amp;:after {
        clear:both;
    }
}

body {
    width: 100%;
    .clearfix;
}

.row(@columns:@columns) {
    display: block;
    width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width);
    margin: 0 @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1);
    .clearfix;
}
.column(@x,@columns:@columns) {
    display: inline;
    float: left;
    width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
    margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
    }

.push(@offset:1) {
    margin-left: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}
.pull(@offset:1) {
    margin-right: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}

/*Determine a largura do seu container.*/
.wrap {
    max-width: 960px;
    margin: 0 auto;
}&lt;/pre&gt;

&lt;p&gt;Para customizar de acordo com o seu grid é bem fácil. Basta alterar os valores deste trecho:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@column-width: 60;
@gutter-width: 20;
@columns: 12;&lt;/pre&gt;

&lt;p&gt;Na opção @column-width você escreve a largura em pixels da coluna, em @gutter-width você escolhe a largura das margens e em @columns o número de colunas. E pronto! A matemática é toda feita pra você e o semantic.gs converte todas as medidas de pixel para porcentagem.&lt;/p&gt;

&lt;h2 id=&#34;como-aplicar-o-grid&#34;&gt;Como aplicar o grid&lt;/h2&gt;

&lt;p&gt;Segundo o nosso (belíssimo) layout o header deve ocupar a largura total do wrap, ou seja, o espaço equivalente a 12 colunas. Para isto basta acrescentar a classe .column(12) na folha de estilos.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.cabecalho {
      .column(12);
}&lt;/pre&gt;

&lt;p&gt;E isto no CSS final é compilado para os valores em porcentagens com uma margem de 10px:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.cabecalho  {
   display: inline;
   float: left;
   width: 97.61904761904762%;
   margin: 0 1.1904761904761905%;
}&lt;/pre&gt;

&lt;p&gt;Legal, né? Da mesma forma podemos determinar o espaço destinado ao conteúdo e a sidebar.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.conteudo {
        .column(9);
}
.sidebar {
        .column(3);
}&lt;/pre&gt;

&lt;p&gt;E isto será compilado para:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.conteudo {
  display: inline;
  float: left;
  width: 64.58333333333334%;
  margin: 0 1.0416666666666665%;
}
.sidebar {
  display: inline;
  float: left;
  width: 31.25%;
  margin: 0 1.0416666666666665%;
}&lt;/pre&gt;

&lt;h2 id=&#34;dominando-o-mundo-com-media-queries&#34;&gt;Dominando o mundo com media queries&lt;/h2&gt;

&lt;p&gt;Agora para fazer o conteúdo se adaptar a dispositivos mobile é moleza. É só utilizar os bons e velhos media-queries. Vamos supor que para smartphones tanto a section conteúdo quanto a sidebar devem ocupar a largura total do wrap.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 480px) {
   .conteudo, .sidebar {
      .column(12);
   }
 }&lt;/pre&gt;

&lt;p&gt;E pronto! Desenvolvimento responsivo de maneira prática e semântica, sem se preocupar com a matemática.&lt;/p&gt;

&lt;h2 id=&#34;como-a-magia-acontece&#34;&gt;Como a magia acontece&lt;/h2&gt;

&lt;p&gt;É tudo através desta função. Basicamente ele considera a largura total do sistema de grid como a largura das colunas multiplicado pelo número de colunas somado com a largura das margens multiplicado pelo número de colunas vezes um pixel.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;&lt;/pre&gt;

&lt;p&gt;Não quer trabalhar com porcentagens? Sem problema. Delete esta linha que os valores ficam em pixel.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@total-width: 100%;&lt;/pre&gt;

&lt;h2 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h2&gt;

&lt;p&gt;Existem algumas outras funções interessantes como a possibilidade de puxar e empurrar as divs e trabalhar com colunas aninhadas. Vale a pena ler a &lt;a href=&#34;http://semantic.gs/&#34; title=&#34;Semantic.gs&#34;&gt;documentação do semantic.gs&lt;/a&gt; e seguir o projeto no &lt;a href=&#34;https://github.com/twigkit/semantic.gs/&#34; title=&#34;Semantic.gs no GitHub&#34;&gt;GitHub&lt;/a&gt; para conferir futuras atualizações. O sistema é compatível com Firefox 3.5+, Safari 4+, Chrome, Opera 9+ e IE6.&lt;/p&gt;

&lt;p&gt;E vocês? Utilizam algum sistema de grid? Quais são as vantagens e desvantagens? Deixem as sugestões nos comentários.&lt;/p&gt;

&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/03/grid.zip&#34;&gt;Demo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>