<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jsx on Tableless</title>
    <link>http://tableless.com.br/tags/jsx/index.xml</link>
    <description>Recent content in Jsx on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/jsx/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>React Native: Construa aplica√ß√µes m√≥veis nativas com JavaScript</title>
      <link>http://tableless.com.br/react-native-construa-aplicacoes-moveis-nativas-com-javascript/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/react-native-construa-aplicacoes-moveis-nativas-com-javascript/</guid>
      <description>

&lt;h2 id=&#34;introdu√ß√£o&#34;&gt;Introdu√ß√£o&lt;/h2&gt;

&lt;p&gt;O &lt;strong&gt;React Native&lt;/strong&gt;¬†√© um projeto desenvolvido pelos engenheiros do &lt;strong&gt;Facebook&lt;/strong&gt; e que consiste em uma s√©rie de ferramentas que viabilizam a cria√ß√£o de aplica√ß√µes m√≥veis &lt;strong&gt;nativas&lt;/strong&gt; para a plataforma¬†&lt;strong&gt;iOS&lt;/strong&gt;¬†e &lt;strong&gt;Android&lt;/strong&gt;, utilizando o que h√° de mais moderno no desenvolvimento Front-end &amp;#8211; mirando no futuro. √â o estado da arte no que se refere ao desenvolvimento mobile baseado em JavaScript.&lt;/p&gt;

&lt;p&gt;O stack do React Native √© poderoso, pois nos permite utilizar &lt;strong&gt;ECMAScript 6&lt;/strong&gt;, &lt;strong&gt;CSS Flexbox&lt;/strong&gt;, &lt;strong&gt;JSX&lt;/strong&gt;, diversos pacotes do &lt;strong&gt;NPM&lt;/strong&gt; e muito mais. Sem contar que nos permite fazer debug na mesma IDE utilizada para o desenvolvimento nativo com essas plataformas (al√©m de tornar o processo extremamente divertido).&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Nesta introdu√ß√£o ao React Native iremos criar um aplicativo nativo voltado para a plataforma iOS, o que significa que voc√™ precisa de um computador rodando &lt;strong&gt;Mac OS X&lt;/strong&gt;. Embora o desenvolvimento para Android j√° seja poss√≠vel com o framework (foi anunciado em setembro de 2015), o foco aqui ser√° o iOS. Mas irei falar um pouco sobre o Android mais √† frente neste post.&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-xcode&#34;&gt;Instalando o Xcode&lt;/h3&gt;

&lt;p&gt;A primeira coisa que voc√™ precisa instalar (caso ainda n√£o o tenha em sua m√°quina) √© o &lt;strong&gt;Xcode&lt;/strong&gt;. Xcode √© a IDE de desenvolvimento da Apple para cria√ß√£o de aplicativos para iPhone e iPad. Sua instala√ß√£o √© necess√°ria pois, sem ele, nosso c√≥digo n√£o poder√° ser &amp;#8220;compilado&amp;#8221; para Objective-C. Tamb√©m √© nele que iremos fazer o debug de nossa aplica√ß√£o.&lt;/p&gt;

&lt;p&gt;Para instalar, basta abrir a App Store no seu Mac e buscar por &amp;#8220;Xcode&amp;#8221;. A instala√ß√£o pode ser um pouco demorada. Aproveite esse tempo pra contar para os seus familiares que voc√™ ir√° construir uma aplica√ß√£o iOS nativa utilizando apenas JavaScript e os recursos mais modernos da plataforma. üòâ&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-node-js&#34;&gt;Instalando o Node.js&lt;/h3&gt;

&lt;p&gt;O React Native √© um projeto que utiliza recursos provenientes do Node.js, portanto precisaremos dele para prosseguir.&lt;/p&gt;

&lt;p&gt;H√° duas maneiras de instalar o Nodejs: Voce pode fazer download diretamente no &lt;a href=&#34;https://nodejs.org/en/download/&#34; target=&#34;_blank&#34;&gt;site do projeto&lt;/a&gt; ou atrav√©s do &lt;a href=&#34;http://brew.sh/&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt;, o famoso package manager do Mac OS X. Caso j√° o tenha instalado na sua m√°quina, basta digitar o seguinte c√≥digo no seu Terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ter o Homebrew instalado na sua m√°quina √© prefer√≠vel pois iremos utiliz√°-lo para instalar a maioria dos outros pacotes necess√°rios para nossa aplica√ß√£o.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Conforme sugerido pela documenta√ß√£o oficial, voc√™ pode instalar o &lt;strong&gt;NVM&lt;/strong&gt; (Node Version Manager) ao inv√©s de instalar o Node diretamente, j√° que o React Native trabalha com vers√µes do Node iguais ou superiores √† vers√£o 4.0. Basta digitar no Terminal &amp;#8220;&lt;strong&gt;brew install nvm&lt;/strong&gt;&amp;#8221; e em seguida &amp;#8220;&lt;strong&gt;nvm install node &amp;amp;&amp;amp; nvm alias default node&lt;/strong&gt;&amp;#8221; para garantir a instala√ß√£o da vers√£o mais recente.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;instalando-o-watchman&#34;&gt;Instalando o Watchman&lt;/h3&gt;

&lt;p&gt;O &lt;strong&gt;Watchman&lt;/strong&gt; √© um pacote muito bacana respons√°vel por monitorar altera√ß√µes em nosso c√≥digo e atualizar a nossas views em tempo real (um recurso extremamente poderoso no qual iremos falar mais √† frente).&lt;/p&gt;

&lt;p&gt;Digite a seguinte instru√ß√£o no seu Terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install --HEAD watchman&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;O par√¢metro &lt;code&gt;--HEAD&lt;/code&gt; √© necess√°rio pois garante que a √∫ltima vers√£o do Watchman ser√° instalada, evitando problemas de compatibilidade com a vers√£o mais recente do Framework.&lt;/p&gt;

&lt;p&gt;√ìtimo. Estamos quase l√°&amp;#8230;&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-cli-do-react-native&#34;&gt;Instalando o CLI do React Native&lt;/h3&gt;

&lt;p&gt;Por fim, precisamos instalar o &lt;strong&gt;CLI&lt;/strong&gt; (Command Line Interface) do projeto que consiste em uma s√©rie de helpers necess√°rios para a cria√ß√£o dos nossos aplicativos. Dessa vez, iremos instalar utilizando o NPM:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g react-native-cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Utilizamos o &lt;code&gt;-g&lt;/code&gt; para instalar o CLI de forma global em nossa m√°quina.&lt;/p&gt;

&lt;p&gt;Perfeito! Agora que todo o nosso arsenal foi preparado, podemos iniciar nossa aventura. Vamos conhecer um pouco do React Native e criar uma aplica√ß√£o simples de exemplo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caso queira acompanhar atrav√©s do &lt;strong&gt;Git&lt;/strong&gt;, basta clonar o &lt;a href=&#34;https://github.com/carloscabral/myFirstProject---React-Native&#34; target=&#34;_blank&#34;&gt;reposit√≥rio do projeto no Github&lt;/a&gt;, acessar a pasta do mesmo atrav√©s da linha de comando e digitar as seguintes instru√ß√µes no Terminal: &lt;strong&gt;git checkout step2 &amp;amp;&amp;amp; npm install&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;executando-o-aplicativo-de-exemplo&#34;&gt;Executando o aplicativo de exemplo&lt;/h2&gt;

&lt;p&gt;Criar uma aplica√ß√£o com o React Native √© muito simples. Crie uma pasta qualquer e navegue pra dentro dela utilizando o Terminal. Digite o seguinte comando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-native init MyFirstProject&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Se voc√™ abrir a pasta do projeto no seu computador, ir√° verificar que tr√™s arquivos foram automaticamente criados:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.ios.js&lt;/li&gt;
&lt;li&gt;index.android.js&lt;/li&gt;
&lt;li&gt;package.json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E tr√™s pastas tamb√©m:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ios&lt;/li&gt;
&lt;li&gt;android&lt;/li&gt;
&lt;li&gt;node_modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O arquivo &lt;em&gt;index.ios.js&lt;/em&gt; √© onde iremos escrever o c√≥digo da nossa aplica√ß√£o. A vantagem aqui √© que podemos utilizar o nosso editor de texto favorito ao inv√©s de uma IDE (pr√°tica comum entre os devs Frontend). O arquivo &lt;em&gt;package.json&lt;/em&gt; √© criado automaticamente pelo NPM e serve para gerenciar as depend√™ncias da nossa aplica√ß√£o, que, por sua vez, ficam dispon√≠veis na pasta _node&lt;em&gt;modules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A pasta &lt;em&gt;ios&lt;/em&gt; √© onde a m√°gica ocorre. Esta √© a pasta que cont√©m o projeto iOS nativo gerado pelo React Native (o mesmo conceito para a pasta android). Fa√ßa um teste e abra o arquivo &lt;em&gt;MyFirstProject.xcodeproj&lt;/em&gt; no Xcode para visualizar sua extrutura no &lt;strong&gt;Project Navigator&lt;/strong&gt; (√† esquerda). Agora pressione o bot√£o &lt;strong&gt;Run&lt;/strong&gt; na barra de ferramentas, conforme a imagem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/xcode-run-button.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52737&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/xcode-run-button.jpg&#34; alt=&#34;xcode-run-button&#34; width=&#34;442&#34; height=&#34;139&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com isso acabamos de solicitar a execu√ß√£o do aplicativo. Neste momento estamos &amp;#8220;compilando o c√≥digo JavaScript&amp;#8221; presente no nosso projeto (criado por default) para Objective-C e gerando o bundle da aplica√ß√£o. Agora j√° podemos testar o resultado em um emulador.&lt;/p&gt;

&lt;p&gt;Geralmente o emulador demora um pouco para exibir alguma coisa na primeira vez que √© acionado, mas nada lhe impede de rodar o app em um iPhone real. Basta abrir o arquivo &lt;em&gt;AppDelegate.m&lt;/em&gt;, localizar a string atribu√≠da ao objeto &lt;code&gt;jsCodeLocation&lt;/code&gt; com o conte√∫do &lt;strong&gt;@&lt;a href=&#34;http://localhost:8081/&amp;amp;#8230&#34;&gt;http://localhost:8081/&amp;amp;#8230&lt;/a&gt;;&lt;/strong&gt; e alterar o valor de &lt;code&gt;localhost&lt;/code&gt; para o n√∫mero de IP do seu computador. Lembre-se que o device precisa estar conectado ao seu Mac atrav√©s da porta USB e ambos devem compartilhar da mesma rede Wifi. Por fim, basta selecionar o seu iPhone na lista de emuladores dispon√≠veis no Xcode.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Para que o procedimento acima seja poss√≠vel, √© necess√°rio que voc√™ tenha uma conta de desenvolvedor (iOS developer account) configurada na Apple. Basta gerar um certificado, registrar o seu device e &amp;#8211; depois de efetuar todo o exaustivo processo de configura√ß√£o &amp;#8211; ele ficar√° dispon√≠vel na lista de &lt;strong&gt;deploy target&lt;/strong&gt; do Xcode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quando o emulador terminar de carregar, o resultado exibido ser√° este:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-initial-screen_2.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52742&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-initial-screen_2.jpg&#34; alt=&#34;react native initial screen&#34; width=&#34;344&#34; height=&#34;524&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perceba que o aplicativo de exemplo cont√©m apenas poucos par√°grafos com instru√ß√µes b√°sicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para iniciar, basta editar o arquivo &lt;em&gt;index.ios.js&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Para recarregar a aplica√ß√£o, basta pressionar &lt;strong&gt;CMD + R&lt;/strong&gt; no teclado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vamos ent√£o abrir o arquivo &lt;em&gt;index.ios.js&lt;/em&gt; em nosso editor favorito. No meu caso, irei trabalhar com o &lt;a href=&#34;http://www.sublimetext.com/2&#34; target=&#34;_blank&#34;&gt;Sublime Text 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se voc√™ j√° est√° acostumado com a escrita de c√≥digo do React, n√£o h√° motivos para sustos. Mas, se este n√£o for o seu caso, n√£o entre em p√¢nico: o React Native √© muito simples de trabalhar.&lt;/p&gt;

&lt;p&gt;Vamos fazer um pouco de m√°gica agora: Encontre o texto &lt;strong&gt;Welcome to React Native&lt;/strong&gt; e modifique-o para &lt;strong&gt;My First Voodoo App!&lt;/strong&gt; &amp;#8211; ou qualquer outra coisa que voc√™ queira. Abra o emulador e pressione &lt;strong&gt;CMD + R&lt;/strong&gt; no seu teclado (caso abra uma action sheet, basta clicar em &amp;#8220;Reload&amp;#8221;). Perceba que, em poucos segundos, sua View foi atualizada com o texto novo. Este, meu amigo, √© um dos recursos mais fant√°sticos presentes na plataforma: O live-reload!&lt;/p&gt;

&lt;p&gt;Se voc√™ j√° vem de um background web, deve estar se perguntando: &amp;#8221; &amp;#8211; S√©rio? Existe motivo para dramatizar com isso?&amp;#8221;. Mas se voc√™ j√° tem experi√™ncia no desenvolvimento com &lt;strong&gt;Swift&lt;/strong&gt; ou &lt;strong&gt;Objective-C&lt;/strong&gt; deve saber que altera√ß√µes feitas no seu c√≥digo precisam ser re-compiladas no Xcode para que voc√™ possa visualizar o que foi modificado. Altera√ß√µes em Views n√£o s√£o refletidas em tempo real quando voc√™ est√° trabalhando de forma nativa. Isso, por si s√≥, j√° faz o React Native merecer sua aten√ß√£o!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fazer preview de altera√ß√µes visuais de componentes em tempo de desenvolvimento √© um recurso que pode ser conseguido com &lt;strong&gt;IBDesignables&lt;/strong&gt; de modo nativo. Este recurso est√° dispon√≠vel a partir da vers√£o 6 do Xcode. Com ele o desenvolvedor pode visualizar aquilo que est√° modificando na View sem precisar compilar o app. Mas este √© um recurso relativamente avan√ßado utilizado por desenvolvedores mais experientes e que necessita de escrita de c√≥digo para funcionar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos agora tentar entender melhor como foi estruturado o c√≥digo de exemplo e o que cada bloco significa.&lt;/p&gt;

&lt;h2 id=&#34;estrutura-do-react-native&#34;&gt;Estrutura do React Native&lt;/h2&gt;

&lt;p&gt;Todo projeto em React tem como premissa a cria√ß√£o e reutiliza√ß√£o de componentes. Basicamente, o que o c√≥digo de exemplo faz √© criar o componente e exibi-lo na tela. Olhando pra ele, voc√™ j√° deve ter reparado que o bloco central √© o principal respons√°vel por essa opera√ß√£o:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var MyFirstProject = React.createClass({
 render: function() {
   return (
     &amp;lt;View style={styles.container}&amp;gt;
       &amp;lt;Text style={styles.welcome}&amp;gt;
         My First Voodoo App!
       &amp;lt;/Text&amp;gt;
       &amp;lt;Text style={styles.instructions}&amp;gt;
         To get started, edit index.ios.js
       &amp;lt;/Text&amp;gt;
       &amp;lt;Text style={styles.instructions}&amp;gt;
         Shake or press menu button for dev menu
       &amp;lt;/Text&amp;gt;
     &amp;lt;/View&amp;gt;
   );
 }
});
&lt;/pre&gt;

&lt;p&gt;Agora que voc√™ j√° brincou um pouco com o c√≥digo gerado por default, vamos esquec√™-lo por um minuto e criar algo do zero.&lt;/p&gt;

&lt;p&gt;Exclua todo o conte√∫do do arquivo &lt;em&gt;index.ios.js&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Em React, para criar um novo componente, basta criar uma vari√°vel qualquer que receba a nota√ß√£o:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;React.createClass({});
&lt;/pre&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Tableless = React.createClass({

});
&lt;/pre&gt;

&lt;p&gt;Agora √© necess√°rio suprir esse componente com par√¢metros e uma s√©rie de instru√ß√µes, respons√°veis por definir o seu comportamento e aspecto visual. Quem se responsabiliza por isso √© o m√©todo &lt;code&gt;render&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo, se quisermos retornar alguma coisa na classe &lt;strong&gt;Tableless&lt;/strong&gt; que acabamos de criar, far√≠amos:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Tableless = React.createClass({
   render: function() {
      return &amp;lt;p&amp;gt;Hello, Tableless!&amp;lt;/p&amp;gt;;
   }
});
&lt;/pre&gt;

&lt;p&gt;Mas, pera a√≠&amp;#8230; O que significa essa tag de par√°grafo HTML envolta do texto? Afinal, estamos lidando com HTML ou JavaScript?&lt;/p&gt;

&lt;h3 id=&#34;jsx&#34;&gt;JSX&lt;/h3&gt;

&lt;p&gt;Para facilitar a escrita de c√≥digo, o React utiliza &lt;strong&gt;JSX&lt;/strong&gt; (opcional), uma sintaxe que possibilita a escrita de componentes JavaScript por meio de tags.&lt;/p&gt;

&lt;p&gt;Para ilustrar isso melhor, o componente acima poderia ser escrito da seguinte maneira sem o uso do JSX:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Tableless = React.createClass({
  render: function() {
     return React.createElement(&#34;p&#34;, null, &#34;Hello, Tableless!&#34;);
  }
});
&lt;/pre&gt;

&lt;p&gt;Conforme pode ser observado, esta √© uma forma de escrita muito mais verbosa do que a anterior. Eu sei, pode parecer que voc√™ est√° escrevendo HTML dentro de JavaScript mas, com a devida pr√°tica, voc√™ vai entender como o JSX quebra um grande galho para o desenvolvedor. Optar por n√£o utiliz√°-lo √© certeza de ter um c√≥digo muito repetitivo e de dif√≠cil manuten√ß√£o.&lt;/p&gt;

&lt;p&gt;Agora que voc√™ compreendeu como funciona o JSX, deve estar se perguntando (pelo menos eu espero) como uma aplica√ß√£o m√≥vel pode retornar tags HTML como &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;h1&lt;/code&gt; ou &lt;code&gt;div&lt;/code&gt; dentro de um componente nativo, certo?&lt;/p&gt;

&lt;p&gt;Exatamente&amp;#8230; n√£o pode.&lt;/p&gt;

&lt;p&gt;Embora o c√≥digo acima execute sem falhas em aplica√ß√µes web, ele n√£o funcionaria dentro do escopo do React Native, simplesmente porque o que precisamos s√£o de componentes do iOS, como &lt;code&gt;UIView&lt;/code&gt;, &lt;code&gt;UILabel&lt;/code&gt; e &lt;code&gt;UIImage&lt;/code&gt;. Ou seja, se voc√™ precisa de um &amp;#8220;wrapper&amp;#8221; na sua tela, voc√™ ir√° retornar o componente &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; ao inv√©s de uma &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. Caso queira exibir um texto, voc√™ ir√° utilizar a tag &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; ao inv√©s de um &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; e assim por diante.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/react-native/docs/&#34; target=&#34;_blank&#34;&gt;Aqui&lt;/a&gt; voc√™ encontra a listagem completa dos componentes dispon√≠veis, tanto para iOS quanto para Android.&lt;/p&gt;

&lt;h3 id=&#34;es6&#34;&gt;ES6&lt;/h3&gt;

&lt;p&gt;Ap√≥s a cria√ß√£o de um componente precisamos registr√°-lo para exibi√ß√£o. Fazemos isso retornando a fun√ß√£o com o nome do componente atrav√©s do &lt;code&gt;AppRegistry&lt;/code&gt;, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Se o c√≥digo acima n√£o ficou √≥bvio pra voc√™, n√£o se assuste. Por default o React Native permite que trabalhemos com as novas epecifica√ß√µes do &lt;strong&gt;EcmaScript 6&lt;/strong&gt; (ou 2015, para os √≠ntimos). Uma delas √© a sintaxe chamada de &lt;strong&gt;arrow functions&lt;/strong&gt; (familiar para quem j√° trabalhou com &lt;strong&gt;CoffeeScript&lt;/strong&gt;), que permite uma escrita mais simples baseada em &lt;strong&gt;closures&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A vers√£o JavaScript &lt;strong&gt;ES5&lt;/strong&gt; do c√≥digo acima seria:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;AppRegistry.registerComponent(&#39;MyFirstProject&#39;, function() {
   return Tableless
});
&lt;/pre&gt;

&lt;p&gt;Mas uma vez, √© uma quest√£o de prefer√™ncia e n√£o uma imposi√ß√£o da ferramenta.&lt;/p&gt;

&lt;p&gt;Contudo, o que fizemos at√© aqui n√£o ser√° suficiente para fazer o c√≥digo rodar. N√≥s n√£o definimos nenhuma das depend√™ncias declaradas na aplica√ß√£o. Vamos resolver esse problema:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react-native&#39;);&lt;/pre&gt;

&lt;p&gt;A string entre aspas √© a biblioteca que estamos solicitando acesso. Nesta caso, estamos atribuindo seu retorno √† vari√°vel React que acabamos de criar.&lt;/p&gt;

&lt;p&gt;Agora que temos acesso √† principal biblioteca do React, vamos declarar as restantes, necess√°rias para rodar nossa aplica√ß√£o sem erros. A vers√£o completa do nosso c√≥digo fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var AppRegistry = React.AppRegistry;
var View = React.View;
var Text = React.Text;

var Tableless = React.createClass({
    render: function() {
        return &amp;lt;View&amp;gt;
            &amp;lt;Text&amp;gt;
              Hello, Tableless!
            &amp;lt;/Text&amp;gt;
        &amp;lt;/View&amp;gt;
    }
});

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Se voc√™ pressionar &lt;strong&gt;CMD + R&lt;/strong&gt; no teclado j√° ter√° uma aplica√ß√£o rodando sem erros. Mas vamos corrigir mais duas coisinhas pra deixar nosso c√≥digo ainda mais atraente&amp;#8230;&lt;/p&gt;

&lt;p&gt;Substitua o c√≥digo do escopo de declara√ß√£o pelo seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react-native&#39;);
var {
  AppRegistry,
  View,
  Text,
} = React;
&lt;/pre&gt;

&lt;p&gt;Como todas as bibliotecas declaradas depois da react-native fazem parte do seu core, podemos assinalar as tr√™s vari√°veis seguintes ao objeto React. Este √© mais um recurso dispon√≠vel do &lt;strong&gt;ES6/ES2015&lt;/strong&gt; chamado de &lt;strong&gt;destructuring assignment&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Outra coisa que n√£o est√° muito legal no c√≥digo √© a indenta√ß√£o dos componentes no m√©todo return. Vamos envolv√™-los em um par√™nteses para que seja permitido pular de linha e tabular tudo seguindo uma melhor hierarquia visual, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;render: function() {
     return (
       &amp;lt;View&amp;gt;
          &amp;lt;Text&amp;gt;
             Hello, Tableless!
          &amp;lt;/Text&amp;gt;
       &amp;lt;/View&amp;gt;
     );
  }
&lt;/pre&gt;

&lt;p&gt;Vale salientar que sem o par√™nteses essa tabula√ß√£o n√£o seria poss√≠vel e iria disparar um erro no simulador.&lt;/p&gt;

&lt;p&gt;Vamos ver como ficou o c√≥digo final agora:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
  AppRegistry,
  View,
  Text,
} = React;

var Tableless = React.createClass({
   render: function() {
      return (
         &amp;lt;View&amp;gt;
             &amp;lt;Text&amp;gt;
                Hello, Tableless!
             &amp;lt;/Text&amp;gt;
         &amp;lt;/View&amp;gt;
      );
   }
});

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Se voc√™ rodar o aplicativo, ir√° perceber que o mesmo executa sem erros. Mas, numa primeira olhada, parece que n√£o h√° nada na tela! Se voc√™ observar atentamente, ir√° perceber que o texto est√° no canto superior esquerdo da tela, sem qualquer tipo de orienta√ß√£o ou margem. Precisamos corrigir isso!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_1.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52746&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_1.jpg&#34; alt=&#34;react native simple label&#34; width=&#34;344&#34; height=&#34;524&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;flexbox&#34;&gt;Flexbox&lt;/h3&gt;

&lt;p&gt;Como estamos lidando exclusivamente com JavaScript, n√£o temos acesso a CSS. Mas para aproximar a experi√™ncia de criar aplicativos m√≥veis ao desenvolvimento de uma p√°gina web, os respons√°veis pelo projeto desenvolveram uma maneira declarativa de estilizar componentes bem similar ao CSS.&lt;/p&gt;

&lt;p&gt;Insira a seguinte nota√ß√£o no bloco da View principal (linha 2 do c√≥digo):&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;return (
      // fazemos refer√™ncia ao estilo
      &amp;lt;View style={styles.container}&amp;gt;
          &amp;lt;Text&amp;gt;
              Hello, Tableless!
          &amp;lt;/Text&amp;gt;
      &amp;lt;/View&amp;gt;
   );
&lt;/pre&gt;

&lt;p&gt;Agora vamos criar uma vari√°vel &amp;#8220;styles&amp;#8221; que recebe o objeto &lt;strong&gt;StyleSheet&lt;/strong&gt; com os seguintes par√¢metros:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var styles = StyleSheet.create({

container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
}

})
&lt;/pre&gt;

&lt;p&gt;Antes de executar o c√≥digo, precisamos incluir o &lt;strong&gt;StyleSheet&lt;/strong&gt; em nosso escopo de inicializa√ß√£o:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var {
  AppRegistry,
  StyleSheet,
  Text,
  View,
} = React;
&lt;/pre&gt;

&lt;p&gt;Agora sim. Execute o c√≥digo pelo Xcode e voc√™ ver√° o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_3.2.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52767&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_3.2.jpg&#34; alt=&#34;react native simple label with border&#34; width=&#34;344&#34; height=&#34;524&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O texto agora se encontra alinhado no centro da tela e temos uma borda vermelha envolta do container. O que aconteceu aqui?&lt;/p&gt;

&lt;p&gt;Bem, n√≥s criamos um objeto container com seis par√¢metros: &lt;code&gt;flex&lt;/code&gt;, &lt;code&gt;flexDirection&lt;/code&gt;, &lt;code&gt;justifyContent&lt;/code&gt;, &lt;code&gt;alignItems&lt;/code&gt;, &lt;code&gt;borderWidth&lt;/code&gt; e &lt;code&gt;borderColor&lt;/code&gt;. Os dois √∫ltimos s√£o autoexplicativos e similares √† aplica√ß√£o de bordas do CSS. A diferen√ßa aqui √© que ao inv√©s de declarar &lt;code&gt;border-width&lt;/code&gt;, com h√≠fen, declaramos &lt;code&gt;borderWidth&lt;/code&gt;, em &lt;strong&gt;camelCase&lt;/strong&gt; (lembrando que estamos lidando com JavaScript e n√£o CSS de verdade). Outra observa√ß√£o importante √© que n√£o precisamos atribuir &lt;strong&gt;px&lt;/strong&gt; ao final do valor como fazemos na web, pois aplicativos nativos tem suas resolu√ß√µes de tela baseada em pontos &lt;strong&gt;(pt)&lt;/strong&gt; e n√£o em pixels.&lt;/p&gt;

&lt;p&gt;O React Native utiliza o &lt;strong&gt;Flexbox&lt;/strong&gt; para organiza√ß√£o visual dos componentes, o que simplifica, em muito, a constru√ß√£o de layouts. Basicamente, o par√¢metro &lt;code&gt;flex: 1&lt;/code&gt; significa que o container ocupa 100% de altura e largura na tela. O par√¢metro &lt;code&gt;flexDirection: column&lt;/code&gt; significa que os elementos seguir√£o o fluxo baseado em colunas, que √© de cima para baixo. A outra op√ß√£o seria &lt;code&gt;flexDirection: row&lt;/code&gt;, onde os elementos s√£o ordenados da esquerda para a direita. Por default, O fluxo padr√£o √© o de colunas, portanto voc√™ pode apagar essa instru√ß√£o sem nenhum impacto no seu c√≥digo.&lt;/p&gt;

&lt;p&gt;Por fim, temos a instru√ß√£o &lt;code&gt;justifyContent: center&lt;/code&gt; e &lt;code&gt;alignItems: center&lt;/code&gt;. O primeiro √© respons√°vel por alinhar o conte√∫do de forma vertical (eixo y), enquanto o √∫ltimo serve para alinhar de forma horizontal (eixo x). Al√©m de &lt;code&gt;center&lt;/code&gt;, tamb√©m existem outros valores como &lt;code&gt;flex-start&lt;/code&gt; e &lt;code&gt;flex-end&lt;/code&gt;. Tente utiliz√°-los para ver o que acontece no seu layout&amp;#8230;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Se ainda restou alguma d√∫vida, &lt;a href=&#34;http://tableless.com.br/centralizando-conteudo-na-vertical-e-horizontal-com-css-flexbox/&#34; target=&#34;_blank&#34;&gt;este post&lt;/a&gt; escrito pelo Diego Eis pode te ajudar a entender.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;E se eu quiser uma borda arredondada envolta do texto e n√£o no container? Tamb√©m gostaria de mudar a cor do texto, centraliz√°-lo e inserir um padding envolta do mesmo. Simples&amp;#8230;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
 AppRegistry,
 StyleSheet,
 Text,
 View,
} = React;

var Tableless = React.createClass({
   render: function() {
      return (
         &amp;lt;View style={styles.container}&amp;gt;
             // criamos um novo estilo para o componente de texto
             &amp;lt;Text style={styles.myText}&amp;gt;
                 Hello, Tableless!
             &amp;lt;/Text&amp;gt;
         &amp;lt;/View&amp;gt;
      );
   }
});

var styles = StyleSheet.create({

 container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
 },
 // declara√ß√£o do nosso novo estilo
 myText: {            
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
   borderRadius: 4,
   textAlign: &#39;center&#39;,
   padding: 10,
 // tamb√©m √© permitido passar uma string da cor ao inv√©s de um hexadecimal
   color: &#39;green&#39;,
 }

})

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Executando o c√≥digo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_2.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52746&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-simple-label_2.jpg&#34; alt=&#34;react native simple label&#34; width=&#34;344&#34; height=&#34;524&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora que voc√™ j√° est√° familiarizado com o &amp;#8220;modo React&amp;#8221; de criar aplica√ß√µes, vamos tentar entender rapidamente o que acontece por baixo dos panos&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;javascriptcore&#34;&gt;JavaScriptCore&lt;/h2&gt;

&lt;p&gt;Se voc√™ j√° ouviu falar sobre React, j√° ouviu sobre &lt;strong&gt;Virtual DOM&lt;/strong&gt;. Essa √© uma forma genial de abstra√ß√£o que os engenheiros do facebook desenvolveram para trazer melhorias na performance de aplica√ß√µes web, uma vez que um &lt;a href=&#34;https://pt.wikipedia.org/wiki/Modelo_de_Objeto_de_Documentos&#34; target=&#34;_blank&#34;&gt;DOM&lt;/a&gt; Virtual fica em mem√≥ria e apenas modifica√ß√µes significativas em sua estrutura s√£o novamente renderizadas na tela, sem necessidade de percorrer toda a √°rvore novamente.&lt;/p&gt;

&lt;p&gt;Em algum momento eles pensaram: &lt;em&gt;&amp;#8220;E se, utilizando essa abordagem, pud√©ssemos tamb√©m abstrair uma camada qualquer diferente do DOM para conseguir resultados similares em rela√ß√£o √† performance?&amp;#8230;&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At√© ent√£o, o √∫nico componente presente no iOS e no Android que viabiliza a execu√ß√£o de c√≥digo JavaScript de modo nativo s√£o seus browsers internos, conhecidos como WebViews. Com base nesse cen√°rio, v√°rios frameworks surgiram nos √∫ltimos anos com a proposta de utilizar a camada de c√≥digo nativa apenas para disparar uma aplica√ß√£o com c√≥digo escrito em HTML, CSS e JavaScript no pr√≥prio Browser (sem a barra de endere√ßos, obviamente). Como o container respons√°vel pelo ciclo de vida da aplica√ß√£o √© nativo, isso possibilita que essas aplica√ß√µes sejam desenvolvidas e distribu√≠das atrav√©s das lojas oficiais, como a &lt;strong&gt;App Store&lt;/strong&gt; e &lt;a href=&#34;https://play.google.com/store/apps&#34; target=&#34;_blank&#34;&gt;Google Play&lt;/a&gt;, sem maiores problemas. Esse movimento originou o termo atualmente conhecido como &lt;strong&gt;Aplicativos H√≠bridos&lt;/strong&gt;. Embora essa abordagem provou-se vitoriosa em alguns cen√°rios, ainda consiste em uma p√°gina web que simula uma aplica√ß√£o escrita de forma nativa, o que, algumas vezes, peca em quest√£o de performance e experi√™ncia.&lt;/p&gt;

&lt;p&gt;Em React Native continuamos escrevendo um aplicativo em JavaScript, mas que n√£o exibe uma p√°gina web como resultado. Ao inv√©s disso, o nosso c√≥digo executa uma inst√¢ncia do chamado &lt;a href=&#34;http://trac.webkit.org/wiki/JavaScriptCore&#34; target=&#34;_blank&#34;&gt;JavaScriptCore&lt;/a&gt; respons√°vel por renderizar componentes &lt;strong&gt;verdadeiramente nativos&lt;/strong&gt; dentro do nosso app. Por exemplo, se voc√™ abrir o arquivo &lt;em&gt;/ios/MyFirstProject/AppDelegate.m&lt;/em&gt; no Xcode, vai encontrar sempre o seguinte conte√∫do, independente da quantidade de c√≥digo que tiver escrito no seu editor de texto:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/AppDelegate.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-53026&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/AppDelegate.png&#34; alt=&#34;AppDelegate.m image &#34; width=&#34;844&#34; height=&#34;777&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O segredo est√° nessa classe &lt;code&gt;RCTRootView&lt;/code&gt;. Ela √© uma classe criada pelo pr√≥prio framework, respons√°vel por apresentar os elementos da classe &lt;code&gt;UIKit&lt;/code&gt; com base no c√≥digo que escrevemos em JS. Ou seja, o controle do comportamento do nosso app √© feito em JavaScript, mas em nenhum momento ocorre compila√ß√£o desse c√≥digo para Objective-C, bin√°rio ou coisa do tipo. Por isso conseguimos ver atualiza√ß√µes em tempo real em nossa aplica√ß√£o, uma vez que nenhum c√≥digo em Objective-C √© escrito, apenas c√≥digo JavaScript. N√£o tem nada pra re-compilar! Genial.&lt;/p&gt;

&lt;p&gt;Como essa &amp;#8220;passagem de bast√£o&amp;#8221; entre o c√≥digo JavaScript e Objective-C √© feita est√° fora do escopo desse post, mas caso tenha curiosidade de saber onde vai parar o c√≥digo que escrevemos, basta acessar a url &lt;a href=&#34;http://localhost:8081/index.ios.bundle?platform=ios&amp; dev=true&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://localhost:8081/index.ios.bundle?platform=ios&amp;amp;&#34;&gt;http://localhost:8081/index.ios.bundle?platform=ios&amp;amp;&lt;/a&gt; dev=true&lt;/a&gt; enquanto a aplica√ß√£o estiver no ar. Voc√™ ir√° perceber nosso c√≥digo em meio √† um monte de outros gerados pelo framework.&lt;/p&gt;

&lt;h2 id=&#34;explorando-as-apis-e-componentes-nativos&#34;&gt;Explorando as APIs e componentes nativos&lt;/h2&gt;

&lt;p&gt;Uma das coisas mais legais &amp;#8211; e vantajosas &amp;#8211; de se trabalhar com o React Native √© a possibilidade de utilizar os componentes e APIs nativos da plataforma. Indiscutivelmente, √© um recurso que oferece uma experi√™ncia mais atrativa para o usu√°rio e que torna dispens√°vel a utiliza√ß√£o de servi√ßos de terceiros como o &lt;a href=&#34;https://cordova.apache.org/&#34; target=&#34;_blank&#34;&gt;Apache Cordova&lt;/a&gt;, por exemplo. O React Native tamb√©m trabalha em uma thread separada da thread principal, o que faz com que sua aplica√ß√£o mantenha a alta performance sem sacrificar a capacidade do seu smartphone (o que √© incr√≠vel!).&lt;/p&gt;

&lt;p&gt;Para come√ßar a ilustrar esses pontos, vamos modificar o nosso c√≥digo para exibir um alerta nativo do iOS quando um bot√£o for clicado.&lt;/p&gt;

&lt;h3 id=&#34;capturando-eventos-e-fornecendo-feedback-visual&#34;&gt;Capturando eventos e fornecendo feedback visual&lt;/h3&gt;

&lt;p&gt;Assim como todos os demais componentes, o React Native criou um espec√≠fico para recuperar o evento de &lt;strong&gt;touch&lt;/strong&gt; (ou tap) na tela do device. Seu nome √© &lt;code&gt;&amp;lt;TouchableHighlight&amp;gt;&lt;/code&gt;, que nada mais √© do que um wrapper invis√≠vel respons√°vel por fazer algum outro componente responder ao toque do usu√°rio e, em seguida, conect√°-lo a algum evento/m√©todo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;TouchableHighlight onPress={this.someFunction}&amp;gt;
   // aplica√ß√£o de estilo no componente
   &amp;lt;View style={styles.button}&amp;gt;
      &amp;lt;Text&amp;gt;An Alert Message&amp;lt;/Text&amp;gt;
   &amp;lt;/View&amp;gt;
&amp;lt;/TouchableHighlight&amp;gt;
&lt;/pre&gt;

&lt;p&gt;No c√≥digo acima temos um exemplo de como podemos fazer uso desse componente. Perceba que dentro dele temos uma outra &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; que abriga um componente &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; com um texto indicativo. O &lt;code&gt;&amp;lt;TouchableHighlight&amp;gt;&lt;/code&gt; recebe uma fun√ß√£o de nome &lt;code&gt;someFunction&lt;/code&gt; quando o evento &lt;strong&gt;onPress&lt;/strong&gt; for acionado. Outra coisa bacana do componente √© que o mesmo fornece feedback visual do momento em que o usu√°rio pressiona e solta o bot√£o. Por default, o React Native aplica um efeito de &lt;strong&gt;overlay&lt;/strong&gt; ao componente sem que precisemos fazer nada. Awesome!&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;&amp;lt;TouchableHighlight&amp;gt;&lt;/code&gt; tamb√©m responde √† outros eventos, como &lt;code&gt;onPressIn&lt;/code&gt;, &lt;code&gt;onPressOut&lt;/code&gt; e &lt;code&gt;onLongPress&lt;/code&gt;, para atender √†s demais necessidades de intera√ß√£o com o usu√°rio.&lt;/p&gt;

&lt;p&gt;Vamos agora mexer no nosso c√≥digo e substituir a fun√ß√£o &lt;code&gt;someFunction&lt;/code&gt; do evento &lt;code&gt;onPress&lt;/code&gt; do nosso bot√£o por um &lt;strong&gt;alert dialog&lt;/strong&gt; nativo da plataforma. O c√≥digo do alerta √© muito simples, conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;AlertIOS.alert(
  &#39;Simple Title&#39;,
  &#39;Hi, I am a native iOS alert component in action.&#39;
)
&lt;/pre&gt;

&lt;p&gt;Nosso alerta √© simples e recebe apenas dois par√¢metros: O t√≠tulo e a descri√ß√£o que ser√£o exibidos para o usu√°rio. Vamos juntar tudo e ver como fica o nosso c√≥digo final (&lt;code&gt;git checkout step3&lt;/code&gt;):&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
   AppRegistry,
   StyleSheet,
   Text,
   View,
   // declaramos o TouchableHighlight.
   TouchableHighlight,     
   // declaramos o AlertIOS.
   AlertIOS,           
} = React;

var Tableless = React.createClass({

 render: function() {
   return (
      &amp;lt;View style={styles.container} &amp;gt;
        &amp;lt;Text style={styles.myText}&amp;gt;
          Hello, Tableless!
        &amp;lt;/Text&amp;gt;
        // inserimos o c√≥digo do alerta no lugar da fun√ß√£o
        &amp;lt;TouchableHighlight onPress={() =&amp;gt; AlertIOS.alert(    
             &#39;Simple Title&#39;,
             &#39;Hi, I am a native iOS alert component in action.&#39;
           )}&amp;gt;
           &amp;lt;View style={styles.button}&amp;gt;
               // exemplo de estilo inline.
               &amp;lt;Text style={{color: &#39;#fff&#39;}}&amp;gt;An Alert Message&amp;lt;/Text&amp;gt; 
           &amp;lt;/View&amp;gt;
        &amp;lt;/TouchableHighlight&amp;gt;
      &amp;lt;/View&amp;gt;
    );
 }
});

var styles = StyleSheet.create({

container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
},
myText: {
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
   borderRadius: 4,
   textAlign: &#39;center&#39;,
   padding: 10,
   marginBottom: 10,
   color: &#39;green&#39;,
},
// estilo do bot√£o.
button: {                
   backgroundColor: &#39;lightblue&#39;,
   padding: 20,
   borderRadius: 5,
},

})

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Pressione &lt;strong&gt;CMD + R&lt;/strong&gt; no teclado e veja o resultado do que criamos no seu emulador com poucas linhas de c√≥digo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-alert-ios.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52771&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-alert-ios.gif&#34; alt=&#34;react native alert ios&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;props-state&#34;&gt;Props &amp;amp; State&lt;/h3&gt;

&lt;p&gt;Tudo o que fizemos at√© o momento foi √≥timo, mas n√£o √© o suficiente para manter uma aplica√ß√£o em funcionamento. E se eu quisesse alterar o valor do texto que aparece na tela de forma din√¢mica, com base em um input do usu√°rio? Podemos fazer isso facilmente utilizando o conceito de &lt;strong&gt;state&lt;/strong&gt;, que nada mais √© do que &lt;strong&gt;gerenciar um componente e aplicar altera√ß√µes em seu valor durante seu ciclo de vida&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para que isso seja poss√≠vel, precisaremos de tr√™s coisas novas em nosso c√≥digo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Um m√©todo que defina o &lt;strong&gt;estado inicial&lt;/strong&gt; do meu componente;&lt;/li&gt;
&lt;li&gt;Um componente nativo que receba &lt;strong&gt;inputs do usu√°rio&lt;/strong&gt; na tela;&lt;/li&gt;
&lt;li&gt;Um m√©todo respons√°vel por &lt;strong&gt;modificar o valor&lt;/strong&gt; desse meu componente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Primeiramente, vamos criar o estado inicial do meu componente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;getInitialState : function() {
   // Inicializamos nosso componente com uma String de texto.
   return { myText : &#34;Hello, Tableless!&#34; };
},    
&lt;/pre&gt;

&lt;p&gt;Em seguida, um componente para receber inputs do usu√°rio:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;TextInput
         placeholder=&#34;Type something...&#34;
         onChange={this.textInputDidChange} /&amp;gt;
// Input com um placeholder + m√©todo.
&lt;/pre&gt;

&lt;p&gt;E, por fim, a fun√ß√£o com o m√©todo respons√°vel por atualizar o estado da minha View sempre que o valor do meu componente for modificado:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;textInputDidChange : function (event) {      
   this.setState({ myText: event.nativeEvent.text });
},   
&lt;/pre&gt;

&lt;p&gt;Vamos ver como tudo isso fica no nosso c√≥digo (&lt;code&gt;git checkout step4&lt;/code&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
   AppRegistry,
   StyleSheet,
   Text,
   View,
   TouchableHighlight,
   AlertIOS,
   // declaramos o TextInput.
   TextInput,        
} = React;

var Tableless = React.createClass({

getInitialState : function() {
   return { myText : &#34;Hello, Tableless!&#34; };
},    

textInputDidChange : function (event) {      
   this.setState({ myText: event.nativeEvent.text });
},

 render: function() {
  return (
    &amp;lt;View style={styles.container} &amp;gt;
      // Repare os estilos inline (opcional).
      &amp;lt;TextInput style = {{ height: 50, padding: 6, fontSize: 16, borderColor: &#34;lightblue&#34;, borderWidth: 1,     margin: 10, borderRadius: 4 }}
               placeholder=&#34;Type something...&#34;
               onChange={this.textInputDidChange} /&amp;gt;   
         &amp;lt;Text style={styles.myText}&amp;gt;
            // Ao inv√©s do texto est√°tico, fazemos refer√™ncia √† vari√°vel myText.
            {this.state.myText}   
         &amp;lt;/Text&amp;gt;
         &amp;lt;TouchableHighlight onPress={() =&amp;gt; AlertIOS.alert(
                 &#39;Simple Title&#39;,
                 &#39;Hi, I am a native iOS alert component in action.&#39;
              )}&amp;gt;
           &amp;lt;View style={styles.button}&amp;gt;
                &amp;lt;Text style={{color: &#39;#fff&#39;}}&amp;gt;An Alert Message&amp;lt;/Text&amp;gt;
           &amp;lt;/View&amp;gt;
         &amp;lt;/TouchableHighlight&amp;gt;
    &amp;lt;/View&amp;gt;
  );
 }
});

var styles = StyleSheet.create({

 container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
 },
 myText: {
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
   borderRadius: 4,
   textAlign: &#39;center&#39;,
   padding: 10,
   marginBottom: 10,
   color: &#39;green&#39;,
 },
 button: {
   backgroundColor: &#39;lightblue&#39;,
   padding: 20,
   borderRadius: 5,
 },

})

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; Tableless);
&lt;/pre&gt;

&lt;p&gt;Agora nosso label reflete o valor que digitamos em nosso input, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-text-input-ios.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52776&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-text-input-ios.gif&#34; alt=&#34;react native text input ios&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caso queira simular o teclado do device, basta ir na barra de ferramentas do emulador e procurar a op√ß√£o &lt;strong&gt;Hardware -&amp;gt; Keyboard -&amp;gt; Toggle Software Keyboard&lt;/strong&gt;. Ao habilitar essa op√ß√£o, o teclado nativo do device ser√° exibido sempre que um input for solicitado.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Se voc√™ tem o costume de utilizar aplicativos no iPhone j√° deve ter reparado que o comportamento de transi√ß√£o de telas √© ligeiramente diferente daquilo que observamos na web. Ao inv√©s de exibir uma outra p√°gina qualquer como resultado de alguma a√ß√£o (como clique em um link ou uma busca) no iOS n√≥s trabalhamos com um componente chamado &lt;strong&gt;UINavigationController&lt;/strong&gt; que gerencia essa transi√ß√£o de forma hier√°rquica. Obviamente j√° temos √† nossa disposi√ß√£o um componente para lidar com isso, chamado &lt;strong&gt;NavigatorIOS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Dito isso, a primeira coisa que precisamos fazer √© mudar o componente &lt;strong&gt;root&lt;/strong&gt; da nossa aplica√ß√£o que, ao inv√©s de apontar para &lt;strong&gt;Tableless&lt;/strong&gt;, agora ir√° apontar para a classe &lt;strong&gt;MainNav&lt;/strong&gt;, conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; MainNav);&lt;/pre&gt;

&lt;p&gt;Agora vamos criar a classe &lt;strong&gt;MainNav&lt;/strong&gt; que ir√° funcionar como um container que far√° refer√™ncia √† tela &lt;strong&gt;Tableless&lt;/strong&gt; que est√°vamos trabalhando anteriormente, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var MainNav = React.createClass({
  render: function() {
    return (
      // Inclu√≠mos o NavigatorIOS em MainNav e fazemos ele apontar para Tableless.
      &amp;lt;NavigatorIOS
        initialRoute={{ component: Tableless, title: &#39;MyFirstProject&#39; }} 
        style={{ flex: 1 }} /&amp;gt;
    );    
  }
});
&lt;/pre&gt;

&lt;p&gt;Perfeito. Agora vamos criar uma outra tela que ser√° respons√°vel por exibir o texto que iremos digitar em nossa View principal. Irei chamar essa tela de &lt;strong&gt;NextScreen&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var NextScreen = React.createClass({
  render: function() {
    return (
      &amp;lt;View&amp;gt;
        &amp;lt;Text&amp;gt;
          You entered: {this.props.inputText}
        &amp;lt;/Text&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }
});
&lt;/pre&gt;

&lt;p&gt;Perceba a instru√ß√£o &lt;code&gt;{this.props.inputText}&lt;/code&gt; dentro do componente &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;. Ele ser√° o respons√°vel por apresentar o valor digitado no nosso input. Mas para que isso ocorra, precisamos de um novo evento¬†em nosso &lt;code&gt;&amp;lt;TextInput&amp;gt;&lt;/code&gt; que guarde esse valor e o conduza at√© a pr√≥xima tela que acabamos de criar. J√° que n√£o temos um bot√£o pra disparar esse m√©todo, que tal cham√°-lo logo ap√≥s pressionar o &lt;strong&gt;Return&lt;/strong&gt; do teclado? Existe um evento chamado &lt;code&gt;onEndEditing&lt;/code&gt; que faz justamente isso:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;TextInput placeholder=&#34;Type something...&#34;
              onChange={this.textInputDidChange}
              // inclu√≠mos o novo evento aqui.
              onEndEditing={ event =&amp;gt; this.callNextScreen(event.nativeEvent.text) } /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Referenciamos a fun√ß√£o de nome¬†&lt;strong&gt;callNextScreen&lt;/strong&gt; que recupera o texto¬†que digitamos atrav√©s do evento de nome¬†&lt;code&gt;event.nativeEvent.text&lt;/code&gt;. Vamos criar essa fun√ß√£o:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// a fun√ß√£o recebe o texto digitado como par√¢metro
callNextScreen: function (inputText) {
  // chamamos a transi√ß√£o &lt;strong&gt;push&lt;/strong&gt; nativa do iOS.
  this.props.navigator.push({
     title: &#34;The Next Screen&#34;,
     component: NextScreen,
     // enviamos o par√¢metro para a tela &lt;strong&gt;NextScreen&lt;/strong&gt;
     passProps: { &#39;inputText&#39;: inputText }
  });
}
&lt;/pre&gt;

&lt;p&gt;Perceba que n√≥s chamamos a fun√ß√£o &lt;code&gt;push&lt;/code&gt; do &lt;code&gt;navigator&lt;/code&gt; que faz parte do atributo props da nossa tela &lt;strong&gt;NextScreen&lt;/strong&gt;. Uma outra novidade √© o par√¢metro &lt;code&gt;passProps&lt;/code&gt; que recebe um objeto com chave e valor de nome &lt;code&gt;inputText&lt;/code&gt;, respons√°vel por guardar o texto que digitamos e conduzi-lo √† pr√≥xima tela. Vamos ver como ficou o c√≥digo final (&lt;code&gt;git checkout step5&lt;/code&gt;):&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
  AppRegistry,
  StyleSheet,
  Text,
  View,
  TouchableHighlight,
  AlertIOS,
  TextInput,
  // novo componente NavigatorIOS
  NavigatorIOS, 
} = React;

var Tableless = React.createClass({

getInitialState : function() {
  return {
    myText : &#34;Hello, Tableless!&#34;
  };
},

callNextScreen: function (inputText) {
  this.props.navigator.push({
    title: &#34;The Next Screen&#34;,
    component: NextScreen,
    passProps: { &#39;inputText&#39;: inputText }
});
},

textInputDidChange : function (event) {
  this.setState({ myText: event.nativeEvent.text });
},

render: function() {
  return (
   &amp;lt;View style={styles.container} &amp;gt;
    &amp;lt;TextInput style = {{ height: 50, padding: 6, fontSize: 16, borderColor: &#34;lightblue&#34;, borderWidth: 1, margin:    10, borderRadius: 4 }}
      placeholder=&#34;Type something...&#34;
      onChange={this.textInputDidChange}
      onEndEditing={ event =&amp;gt; this.callNextScreen(event.nativeEvent.text) } /&amp;gt;
    &amp;lt;Text style={styles.myText}&amp;gt;
      {this.state.myText}
    &amp;lt;/Text&amp;gt;
    &amp;lt;TouchableHighlight onPress={() =&amp;gt; AlertIOS.alert(
        &#39;Simple Title&#39;,
        &#39;Hi, I am a native iOS alert component in action.&#39;
      )}&amp;gt;
      &amp;lt;View style={styles.button}&amp;gt;
        &amp;lt;Text style={{color: &#39;#fff&#39;}}&amp;gt;An Alert Message&amp;lt;/Text&amp;gt;
      &amp;lt;/View&amp;gt;
    &amp;lt;/TouchableHighlight&amp;gt;
   &amp;lt;/View&amp;gt;
  );
}

});

var MainNav = React.createClass({
 render: function() {
   return (
     &amp;lt;NavigatorIOS
       initialRoute={{
         component: Tableless,
         title: &#39;MyFirstProject&#39;
       }}
       style={{ flex: 1 }} /&amp;gt;
   );
 }
});

var NextScreen = React.createClass({
 render: function() {
   return (
     &amp;lt;View style = {{ backgroundColor: &#39;green&#39;, flex: 1, justifyContent: &#39;center&#39;, alignItems: &#39;center&#39; }} &amp;gt;
       &amp;lt;Text style = {{ color: &#39;#fff&#39;, fontSize: 22 }} &amp;gt;
         You entered: {this.props.inputText}
       &amp;lt;/Text&amp;gt;
     &amp;lt;/View&amp;gt;
   );
 }
});

var styles = StyleSheet.create({

 container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
 },
 myText: {
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
   borderRadius: 4,
   textAlign: &#39;center&#39;,
   padding: 10,
   marginBottom: 10,
   color: &#39;green&#39;,
 },
 button: {
   backgroundColor: &#39;lightblue&#39;,
   padding: 20,
   borderRadius: 5,
 },

})

AppRegistry.registerComponent(&#39;MyFirstProject&#39;, () =&amp;gt; MainNav);
&lt;/pre&gt;

&lt;p&gt;O¬†resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-navigator-ios.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52778&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-navigator-ios.gif&#34; alt=&#34;react native navigator ios&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fa√ßa um teste no seu device e observe o qu√£o suave s√£o as anima√ß√µes. Uma vez na tela seguinte, voc√™ pode retornar para a anterior com um simples gesto de deslizar os dedos da esquerda para a direita (o famoso &lt;strong&gt;swipe gesture&lt;/strong&gt;). Voc√™ consegue at√© mesmo simular uma transi√ß√£o similar em html com &lt;code&gt;overflow&lt;/code&gt;, mas n√£o ser√° a mesma coisa. Esse √© o verdadeiro ganho de trabalhar com componentes 100% nativos: As transi√ß√µes em &lt;strong&gt;60fps&lt;/strong&gt; (60 frames por segundo).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-swipe-60fps.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-52793&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/react-native-swipe-60fps.gif&#34; alt=&#34;react native swipe 60fps&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por fim, voc√™ foi apresentado aos dois principais conceitos do React: &lt;strong&gt;props&lt;/strong&gt;, utilizado quando queremos compartilhar valores entre componentes e &lt;strong&gt;state&lt;/strong&gt;, quando desejamos monitorar o estado de um componente e suas altera√ß√µes (geralmente ocasionado por algum evento de usu√°rio).&lt;/p&gt;

&lt;h2 id=&#34;modularidade&#34;&gt;Modularidade&lt;/h2&gt;

&lt;p&gt;Voc√™ tem consci√™ncia da bagun√ßa que nosso c√≥digo pode se tornar se prosseguirmos com a escrita de toda a l√≥gica em um mesmo arquivo, n√©? Mas uma das vantagens da plataforma √© justamente a modulariza√ß√£o, uma vez que cada componente pode estar isolado em arquivos diferentes, gerenciando seus pr√≥prios estados de forma individual. Fazemos isso atrav√©s do &lt;strong&gt;module.exports&lt;/strong&gt; do Node, presente na especifica√ß√£o do &lt;strong&gt;CommonJS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para ilustrar como isso pode ser feito, vamos separar nossa se√ß√£o de estilos no arquivo &lt;em&gt;style.js&lt;/em&gt; e requisitar seu acesso no arquivo _index.ios.js_¬†(&lt;code&gt;git checkout step6&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Conte√∫do de &lt;em&gt;style.js&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var React = require(&#39;react-native&#39;);
var { StyleSheet } = React;

var styles = StyleSheet.create({

 container: {
   flex: 1,
   flexDirection: &#39;column&#39;,
   justifyContent: &#39;center&#39;,
   alignItems: &#39;center&#39;,
 },
 myText: {
   borderWidth: 2,
   borderColor: &#39;ff0000&#39;,
   borderRadius: 4,
   textAlign: &#39;center&#39;,
   padding: 10,
   marginBottom: 10,
   color: &#39;green&#39;,
 },
 button: {
   backgroundColor: &#39;lightblue&#39;,
   padding: 20,
   borderRadius: 5,
 },

});
// viabilizamos a exporta√ß√£o do m√≥dulo.
module.exports = styles;
&lt;/pre&gt;

&lt;p&gt;E no arquivo &lt;em&gt;index.ios.js&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#39;use strict&#39;;

var React = require(&#39;react-native&#39;);
var {
  AppRegistry,
  StyleSheet,
  Text,
  View,
  TouchableHighlight,
  AlertIOS,
  TextInput,
  NavigatorIOS,
} = React;

// solicitamos acesso ao conte√∫do de¬†&lt;em&gt;style.js&lt;/em&gt;
var styles = require(&#39;./style&#39;);

var Tableless = React.createClass({ ... })
&lt;/pre&gt;

&lt;p&gt;Seguindo esse conceito, sua aplica√ß√£o fica muito mais leg√≠vel, principalmente se utilizarmos o &lt;strong&gt;Nesting&lt;/strong&gt; de componentes (n√£o abordado nesse tutorial).&lt;/p&gt;

&lt;p&gt;Como exerc√≠cio, tente fazer o mesmo com os demais componentes que criamos.&lt;/p&gt;

&lt;h3 id=&#34;android&#34;&gt;Android&lt;/h3&gt;

&lt;p&gt;Uma das vantagens oferecidas pelo framework √© poder criar aplica√ß√µes agn√≥sticas, que compartilham a mesma base de c√≥digo. Neste caso, voc√™ poderia ter os arquivos &lt;em&gt;index.ios.js&lt;/em&gt; e &lt;em&gt;index.android.js&lt;/em&gt; apontando para uma classe &amp;#8220;root&amp;#8221;, respons√°vel por executar o c√≥digo com base no sistema utilizado pelo usu√°rio: iOS ou Android. Isso √© poss√≠vel se voc√™ fizer uso de componentes que n√£o s√£o espec√≠ficos de cada plataforma, como &lt;code&gt;View&lt;/code&gt;, &lt;code&gt;Image&lt;/code&gt;, &lt;code&gt;ListView&lt;/code&gt;, &lt;code&gt;MapView&lt;/code&gt;, &lt;code&gt;Modal&lt;/code&gt;, &lt;code&gt;TouchableHighlight&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Outra possibilidade, em aplica√ß√µes mais complexas, √© de compartilhar a mesma l√≥gica entre ambas as plataformas com a diferen√ßa de utilizar componentes espec√≠ficos para cada uma delas. A vantagem seria proporcionar a melhor experi√™ncia &lt;strong&gt;nativa&lt;/strong&gt; poss√≠vel para o usu√°rio. Como exemplo, temos os componentes &lt;code&gt;DrawerLayoutAndroid&lt;/code&gt;, &lt;code&gt;ProgressBarAndroid&lt;/code&gt;, &lt;code&gt;ToolbarAndroid&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h2 id=&#34;um-futuro-m√≥vel-para-o-javascript&#34;&gt;Um futuro m√≥vel para o JavaScript&lt;/h2&gt;

&lt;p&gt;Hoje em dia o desenvolvedor JavaScript vive um momento fant√°stico, pois al√©m de contar com frameworks como &lt;a href=&#34;http://ionicframework.com/&#34; target=&#34;_blank&#34;&gt;Ionic&lt;/a&gt;, que tem o intuito de explorar o desenvolvimento h√≠brido atrav√©s de tecnologias web, agora temos o React Native √† nossa disposi√ß√£o, com o intuito de conduzir o JavaScript ao ambiente nativo. No entanto, diferente do conhecido termo imortalizado pelo Java &amp;#8220;&lt;em&gt;Write once, run anywhere&lt;/em&gt;&amp;#8220;, o framework defende o &amp;#8220;&lt;em&gt;Learn once, write anywhere&lt;/em&gt;&amp;#8220;, o que significa que cada plataforma tem seu pr√≥prio visual, estrutura e recursos √∫nicos. E que voc√™, como engenheiro de software, deve ser capaz de construir aplica√ß√µes para qualquer que seja a plataforma &amp;#8211; sem necessariamente aprender uma gama de novas tecnologias &amp;#8211; mas sempre respeitando o ecossistema nativo de cada uma delas. Isso √© fant√°stico!&lt;/p&gt;

&lt;p&gt;Outro ponto que vale ressaltar √© a otimiza√ß√£o que o framework oferece ao dia a dia de uma equipe, uma vez que ele tem o potencial de acelerar todo o processo &amp;#8211; n√£o s√≥ de desenvolvimento, mas tamb√©m de lan√ßamento de um aplicativo. Como exemplo, a Apple possibilita que altera√ß√µes sejam executadas no &amp;#8220;ar&amp;#8221; em aplicativos baseados no tal JavaScriptCore &lt;strong&gt;sem precisar aguardar pelo exaustivo processo de review deles&lt;/strong&gt;. Ou seja, mais produtividade e mais clientes felizes!&lt;/p&gt;

&lt;p&gt;Embora o React Native seja um framework fant√°stico no que se prop√µe a oferecer, ele n√£o √© o √∫nico. Existem outras ferramentas que permitem o desenvolvimento de aplicativos nativos utilizando JavaScript, como √© o caso do j√° conhecido &lt;a href=&#34;http://www.appcelerator.com/mobile-app-development-products/&#34; target=&#34;_blank&#34;&gt;Titanium&lt;/a&gt; e, do mais recente, &lt;a href=&#34;https://www.nativescript.org/&#34; target=&#34;_blank&#34;&gt;NativeScript&lt;/a&gt;. Mas a grande sacada do React Native √© o &lt;strong&gt;React&lt;/strong&gt; em si. Sua natureza declarativa, a metodologia de reutiliza√ß√£o de componentes e o foco prim√°rio na interface do usu√°rio proporcionam uma experi√™ncia, at√© o momento, in√©dita para o desenvolvedor web que deseja migrar para o mundo do desenvolvimento m√≥vel.&lt;/p&gt;

&lt;p&gt;Em resumo, o React Native merece sua aten√ß√£o porque&amp;#8230;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;N√£o remove voc√™ do ecossistema da web:¬†&lt;/strong&gt;As mesmas ferramentas que usamos para o desenvolvimento web s√£o basicamente as mesmas que utilizaremos para desenvolvimento mobile. Ao inv√©s de depender exclusivamente do Xcode ou Android Studio, um &lt;a href=&#34;http://www.sublimetext.com/&#34; target=&#34;_blank&#34;&gt;SublimeText&lt;/a&gt;, &lt;a href=&#34;https://atom.io/&#34; target=&#34;_blank&#34;&gt;Atom&lt;/a&gt; ou &lt;a href=&#34;http://brackets.io/&#34; target=&#34;_blank&#34;&gt;Brackets&lt;/a&gt; j√° dar√£o conta do recado pra voc√™. Com se isso n√£o bastasse, voc√™ ainda tem a op√ß√£o de fazer debug do c√≥digo via &lt;a href=&#34;https://developers.google.com/web/tools/chrome-devtools/&#34; target=&#34;_blank&#34;&gt;Chrome DevTools&lt;/a&gt;, atrav√©s de uma extens√£o desenvolvida exclusivamente para o React, como se fosse uma aplica√ß√£o web de verdade!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utiliza Flexbox e CSS:¬†&lt;/strong&gt;O Flexbox permite que voc√™ estruture sua camada visual de maneira muito simples e intuitiva. Esse √© um ponto cr√≠tico em aplica√ß√µes nativas. Tome o AutoLayout do iOS, como exemplo. Lidar com Constraints, Size Classes e outros recursos n√£o s√£o assim t√£o simples. Sem contar que essa fica sendo uma tarefa exclusiva do Desenvolvedor e n√£o do Designer. Em contrapartida, se voc√™ j√° √© um Webdesigner, pode aproveitar seu c√≥digo CSS diretamente na plataforma &amp;#8211; ou solicitar que o Designer gere ele pra voc√™ incluir no seu app. N√£o √© o m√°ximo?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;√â extremamente extens√≠vel:¬†&lt;/strong&gt;Voc√™ pode compartilhar o seu c√≥digo JavaScript com o seu colega de trabalho que desenvolve em Objective-C, Swift ou Java sem maiores problemas. O framework possibilita a integra√ß√£o de m√≥dulos nativos, proporcionando um ambiente colaborativo ainda mais rico e transparente. Ou seja, sempre que houver a necessidade de implementar um m√≥dulo nativo &amp;#8211; ou reaproveitar algum que j√° tenha sido criado pela sua equipe &amp;#8211; basta import√°-lo no seu projeto e ele estar√° dispon√≠vel. Yes!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utiliza Polyfills para tirar vantagem dos recursos web:¬†&lt;/strong&gt;APIs como &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;geolocation&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt; e o pr√≥prio &lt;code&gt;flexbox&lt;/code&gt; n√£o existem em ambiente nativo, mas existem no Browser! Mais uma vez, a transi√ß√£o entre os ambientes web e nativo fica ainda mais simples de ser feita.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simples gerenciamento das depend√™ncias do projeto:&lt;/strong&gt;Programadores JavaScript j√° est√£o acostumados a utilizar o NPM para gerir depend√™ncias e fazer build de suas aplica√ß√µes. Trazer essa ferramenta para dentro do escopo nativo significa menos uma barreira adicional. Em um simples arquivo &lt;em&gt;package.json&lt;/em&gt; voc√™ √© capaz de organizar todas as suas depend√™ncias como se estivesse trabalhando na web, sem a necessidade de aprender ferramentas como &lt;a href=&#34;https://cocoapods.org/&#34; target=&#34;_blank&#34;&gt;Cocoapods&lt;/a&gt; para iOS ou &lt;a href=&#34;http://gradle.org/&#34; target=&#34;_blank&#34;&gt;Gradle&lt;/a&gt; no caso do Android.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;O desenvolvimento mobile est√° mudando com a mesma velocidade da demanda de mercado. Mais e mais ferramentas v√™m sendo desenvolvidas com o intuito de prover uma experi√™ncia mais rica, tanto para o desenvolvedor quanto para o usu√°rio final. Frameworks como React Native surgem como uma prova de conceito de que existem falhas em ambos os ecossistemas e o que resta fazer √© unir o melhor dos dois mundos. O mais importante, no fim das contas, √© a tal da estrat√©gia. Se &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_to_market&#34; target=&#34;_blank&#34;&gt;tempo de mercado&lt;/a&gt; e produtividade fazem parte do seu vocabul√°rio (ou de sua startup), fique de olho nas mudan√ßas. Elas est√£o apenas come√ßando&amp;#8230;&lt;/p&gt;

&lt;p&gt;Enfim&amp;#8230; √© uma √©poca excelente para ser um desenvolvedor JavaScript. üôÇ&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Conhe√ßa mais sobre o React para web &lt;a href=&#34;http://tableless.com.br/react-javascript-reativo/&#34; target=&#34;_blank&#34;&gt;neste post&lt;/a&gt; do Davi Ferreira.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Introdu√ß√£o ao webpack</title>
      <link>http://tableless.com.br/introducao-ao-webpack/</link>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-ao-webpack/</guid>
      <description>

&lt;h2 id=&#34;o-que-√©-onde-vivem-o-que-comem&#34;&gt;O que √©? (Onde vivem? O que comem?)&lt;/h2&gt;

&lt;p&gt;webpack (com &amp;#8220;w&amp;#8221; min√∫sculo, respeitando a grafia do site oficial) √© um empacotador de c√≥digo para projetos web, como o &lt;a href=&#34;http://browserify.org/&#34;&gt;browserify&lt;/a&gt;. O que ele se prop√µe a fazer de diferente √© focar em m√≥dulos da sua aplica√ß√£o. Nem sempre ter todo e qualquer JavaScript/CSS do seu projeto num √∫nico arquivo √© bom, por isso o webpack tem a ideia de &lt;a href=&#34;http://webpack.github.io/docs/code-splitting.html&#34;&gt;code splitting&lt;/a&gt;, onde voc√™ modulariza partes reaproveit√°veis do seu projeto, facilitando o desenvolvimento independente, por exemplo, ter uma equipe trabalhando em um m√≥dulo X e outra num m√≥dulo Y, mas ambos de um mesmo projeto.&lt;/p&gt;

&lt;p&gt;N√£o √© sempre que a gente faz um projeto t√£o grande assim, a ponto de precisar separar equipes em diferentes m√≥dulos, mas o webpack tamb√©m pode ser ideal para pequenos projetos.&lt;/p&gt;

&lt;h2 id=&#34;instalando&#34;&gt;Instalando.&lt;/h2&gt;

&lt;p&gt;√â bem simples. Voc√™ tem o webpack como pacote do &lt;a href=&#34;http://nodejs.org/&#34;&gt;NodeJS&lt;/a&gt;. Se voc√™ n√£o sabe o que √© NodeJS, &lt;a href=&#34;http://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js/&#34;&gt;pare agora e leia esse artigo&lt;/a&gt;. Sugiro dar uma pesquisada sobre &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt; antes. Se voc√™ entendeu tudo at√© aqui, pode escolher entre t√™-lo globalmente ou somente num projeto:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;&amp;gt; npm install&amp;lt;/span&gt; webpack -g
&amp;gt; npm install webpack --&lt;span class=&#34;hljs-built_in&#34;&gt;save&lt;/span&gt;-&lt;span class=&#34;hljs-built_in&#34;&gt;dev&lt;/span&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;usando&#34;&gt;Usando&lt;/h2&gt;

&lt;p&gt;√â bem simples, tamb√©m. O comando espera dois argumentos, um arquivo de entrada e um arquivo de sa√≠da que se n√£o existir vai ser criado e se j√° existir ser√° substitu√≠do.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ webpack &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;entry&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-title&#34;&gt;output&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Voc√™ pode definir um arquivo de configura√ß√£o pro comando com a op√ß√£o &lt;code&gt;--config example.config.js&lt;/code&gt; se nada for passado o webpack vai procurar um arquivo chamado &lt;code&gt;webpack.config.js&lt;/code&gt; onde ele est√° sendo executado (normalmente raiz do projeto) se n√£o achar, vai usar as configura√ß√µes padr√£o, o famoso default.&lt;/p&gt;

&lt;h2 id=&#34;loaders-e-preloaders&#34;&gt;Loaders e preloaders&lt;/h2&gt;

&lt;p&gt;O webpack pode executar transforma√ß√µes nos arquivos durante o processo de empacotamento, essas transforma√ß√µes s√£o, por exemplo, nossos famosos pr√©-processadores, React (JSX), Coffee, 6to5, SweetJS, TypeScript&amp;#8230; a lista de &lt;em&gt;loaders&lt;/em&gt; j√° prontos √© muito boa e claro, voc√™ pode construir os seus se sentir falta de algum. Tamb√©m tem Less, Sass, Stylus, Jade, Ejs, Mustache, Handlebars, Markdown&amp;#8230; n√£o √© s√≥ pra JavaScript. Em adi√ß√£o aos &lt;em&gt;loaders&lt;/em&gt;, voc√™ pode ter plugins, que executam processos mais complexos que as transforma√ß√µes, por exemplo, &lt;strong&gt;UglifyJsPlugin!&lt;/strong&gt; Yay!&lt;/p&gt;

&lt;h2 id=&#34;bora-ver-na-pr-tica&#34;&gt;Bora ver na pr√°tica&lt;/h2&gt;

&lt;p&gt;Vamos criar um m√≥dulo super √∫til que nunca vi por a√≠ que serve pra deixar as letras de um texto em caixa alta.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// upper.js
module.exports = function(str) {
    return str.toUpperCase();
};
&lt;/pre&gt;

&lt;p&gt;Agora a gente chama esse modulo no nosso arquivo de entrada, que n√£o √© necessariamente o principal, por isso a gente n√£o vai chamar de &lt;em&gt;main.js&lt;/em&gt; ou &lt;em&gt;app.js.&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// entry.js
var upper = require(&#39;./upper.js&#39;);
console.log(upper(&#39;test&#39;));
&lt;/pre&gt;

&lt;p&gt;Sim! Como puderam perceber, podemos usar o padr√£o CommonJS pra criar nossos m√≥dulos, que √© o mesmo padr√£o usado pelo NodeJS, ent√£o a gente pode usar alguns pacotes do NPM tamb√©m, mesmo num build com target pro browser (m√≥dulo focado para o navegador). Vamos ver o que vai dar isso at√© agora.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;&amp;gt; webpack entry.js bundle.js&lt;/pre&gt;

&lt;p&gt;O comando gera um &lt;em&gt;report&lt;/em&gt; simples no console mesmo, aqui ficou:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Hash: 0b87391ad5027f171afe
Version: webpack 1.5.3
Time: 310ms
Asset Size Chunks Chunk Names
bundle.js 1706 0 [emitted] main
[0] ./entry.js 63 {0} [built]
[1] ./upper.js 67 {0} [built]
&lt;/pre&gt;

&lt;p&gt;Se voc√™ estiver acompanhando na pr√°tica, pode abrir o &lt;em&gt;bundle.js&lt;/em&gt; (se j√° n√£o fez isso seguindo o instinto curioso de qualquer dev) e ver como fica o &lt;em&gt;build&lt;/em&gt;. Voc√™ vai notar que o &lt;strong&gt;webpack&lt;/strong&gt; tem um &lt;em&gt;boilerplate&lt;/em&gt; at√© consider√°vel, mas √© √∫til, ele tem um sistema de cache que performa os &lt;em&gt;builds&lt;/em&gt;, ele vai saber qual m√≥dulo mudou de verdade ao inv√©s de pegar tudo e &lt;em&gt;buildar&lt;/em&gt; tudo de novo.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;&amp;gt; node bundle.js
TEST
&lt;/pre&gt;

&lt;h2 id=&#34;react-t-na-moda-vamos-usar-&#34;&gt;React t√° na moda, vamos usar.&lt;/h2&gt;

&lt;p&gt;Vamos usar um arquivo de configura√ß√£o pra vincular os arquivos &lt;em&gt;.jsx&lt;/em&gt; ao Loader certo, o webpack usa RegExp pra testar sobre o nome dos arquivos e vincular a um &lt;em&gt;loader&lt;/em&gt; e o arquivo de configura√ß√£o √© um m√≥dulo CommonJS. J√° que estamos usando um arquivo para a configura√ß√£o, vamos por nele qual √© nosso &lt;em&gt;entry&lt;/em&gt; e qual √© nosso &lt;em&gt;output&lt;/em&gt;. Mas antes, como usaremos m√≥dulos do NPM, vamos inicia-lo em nosso projeto e ter um arquivo declarando essas depend√™ncias, o &lt;em&gt;packages.json&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;&amp;gt; npm init
&amp;gt; npm install react --save
&amp;gt; npm install jsx-loader --save-dev
&lt;/pre&gt;

&lt;p&gt;Nosso arquivo de configura√ß√£o vai ficar assim:&lt;/p&gt;

&lt;pre&gt;// webpack.config.js
module.exports = {
    entry: &#34;./entry.jsx&#34;,
    output: {
        filename: &#34;bundle.js&#34;
    },
    module: {
        loaders: [
            {test: /\.jsx/, loader: &#39;jsx-loader&#39;}
        ]
    }
};
&lt;/pre&gt;

&lt;p&gt;Agora √© s√≥ rodar o webpack, sem passar nada, ele j√° vai ler nas configura√ß√µes.&lt;/p&gt;

&lt;pre&gt;&amp;gt; webpack&lt;/pre&gt;

&lt;p&gt;T√° l√°! Voc√™ tem um &lt;em&gt;bundle&lt;/em&gt; com React pronto pra web.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;Essa foi s√≥ uma introdu√ß√£o e vale ressaltar que o webpack n√£o √© uma alternativa aos &lt;em&gt;tasks managers&lt;/em&gt; como Gulp e Grunt (caso algu√©m tenha entendido isso), mas s√≥ com o webpack voc√™ tem um &lt;em&gt;watcher&lt;/em&gt; pro &lt;em&gt;build&lt;/em&gt; acontecer logo que ele detecta uma altera√ß√£o em um arquivo e o plugin do UglifyJS pra &lt;em&gt;minificar&lt;/em&gt; seu &lt;em&gt;build&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Isso a√≠, se ficou alguma d√∫vida, s√≥ chamar üòâ&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>