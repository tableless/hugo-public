<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Underscorejs on Tableless</title>
    <link>http://tableless.com.br/tags/underscorejs/index.xml</link>
    <description>Recent content in Underscorejs on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/underscorejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Underscore.js: cinto de utilidades JavaScript</title>
      <link>http://tableless.com.br/underscore-js-cinto-de-utilidades-javascript/</link>
      <pubDate>Wed, 19 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/underscore-js-cinto-de-utilidades-javascript/</guid>
      <description>

&lt;p&gt;Underscore.js √© uma pequena biblioteca de c√≥digos utilit√°rios voltados principalmente para a manipula√ß√£o de estrutura de dados.&lt;/p&gt;

&lt;p&gt;Por m√≠seros 4kb voc√™ ganha funcionalidades como &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;select&lt;/em&gt; e &lt;em&gt;invoke&lt;/em&gt;, al√©m de uma engine de &lt;em&gt;templating&lt;/em&gt; que, por si s√≥, j√° faz valer o uso da biblioteca.&lt;/p&gt;

&lt;p&gt;Outro ponto legal √© que os scripts procuram sempre utilizar recursos nativos do navegador, ou seja, em browsers modernos a biblioteca tira proveito das implementa√ß√µes de &lt;em&gt;forEach&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;indexOf&lt;/em&gt;, &lt;em&gt;filter&lt;/em&gt; etc.&lt;/p&gt;

&lt;h2 id=&#34;utilizando&#34;&gt;Utilizando&lt;/h2&gt;

&lt;p&gt;O processo √© simples e conhecido. Basta fazer o [download do c√≥digo-fonte][1] e incluir o script em sua p√°gina/aplica√ß√£o. Todas as novas funcionalidades ficam dispon√≠veis atrav√©s do objeto global da biblioteca, o caractere underscore: _. Funciona basicamente como o $ do jQuery.&lt;/p&gt;

&lt;p&gt;Vejamos agora algumas das principais fun√ß√µes disponibilizadas.&lt;/p&gt;

&lt;h2 id=&#34;cole√ß√µes-arrays-e-objetos&#34;&gt;Cole√ß√µes (arrays e objetos)&lt;/h2&gt;

&lt;h3 id=&#34;each&#34;&gt;each&lt;/h3&gt;

&lt;p&gt;Este m√©todo varre uma lista de elementos e retorna a chave (quando houver) e o valor para uma fun√ß√£o pr√©-determinada.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.each([&amp;#8216;BA&amp;#8217;, &amp;#8216;MT&amp;#8217;, &amp;#8216;RJ&amp;#8217;, &amp;#8216;RN&amp;#8217;, &amp;#8216;RS&amp;#8217;], function (estado) { console.log(estado); });&lt;/p&gt;

&lt;p&gt;_.each({RJ: &amp;#8216;Rio de Janeiro&amp;#8217;, SP: &amp;#8216;S√£o Paulo&amp;#8217;, RS: &amp;#8216;Rio Grande do Sul&amp;#8217;}, function (estado, sigla) { console.log(estado + &amp;#8216;/&amp;#8217; + sigla); });&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;map&#34;&gt;map&lt;/h3&gt;

&lt;p&gt;A fun√ß√£o &lt;strong&gt;map&lt;/strong&gt; retorna uma nova lista de elementos criada a partir de uma fun√ß√£o executada em cada um dos itens da lista original.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var times = [&amp;#8216;Flamengo&amp;#8217;, &amp;#8216;Fluminense&amp;#8217;, &amp;#8216;Vasco&amp;#8217;, &amp;#8216;Botafogo&amp;#8217;];&lt;/p&gt;

&lt;p&gt;_.map(times, function (time) { return time + &amp;#8216;-RJ&amp;#8217;; });&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;Flamengo-RJ&amp;#8221;, &amp;#8220;Fluminense-RJ&amp;#8221;, &amp;#8220;Vasco-RJ&amp;#8221;, &amp;#8220;Botafogo-RJ&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;filter&#34;&gt;filter&lt;/h3&gt;

&lt;p&gt;O utilit√°rio &lt;strong&gt;filter&lt;/strong&gt; busca por elementos que retornem verdadeiro no teste especificado.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var multiplosDeTres = _.filter([1, 2, 3, 4, 5, 6, 7, 8, 9], function(num){ return num % 3 == 0; });&lt;/p&gt;

&lt;p&gt;// [3, 6, 9]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;find&#34;&gt;find&lt;/h3&gt;

&lt;p&gt;Diferentemente do m√©todo &lt;strong&gt;_filter_&lt;/strong&gt;, o &lt;strong&gt;_find_&lt;/strong&gt; retorna apenas o primeiro elemento que passe no teste especificado.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var primeiroMultiploDeTres = _.find([1, 2, 3, 4, 5, 6, 7, 8, 9], function(num){ return num % 3 == 0; });&lt;/p&gt;

&lt;p&gt;// 3&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;pluck&#34;&gt;pluck&lt;/h3&gt;

&lt;p&gt;O m√©todo &lt;strong&gt;_pluck&lt;/strong&gt; √© uma vers√£o muito usada do utilit√°rio &lt;strong&gt;_map_&lt;/strong&gt; que retorna uma lista formada por valores de uma propriedade espec√≠fica.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var estados = [{sigla: &amp;#8216;RJ&amp;#8217;, nome: &amp;#8216;Rio de Janeiro&amp;#8217;},&lt;/p&gt;

&lt;p&gt;{sigla: &amp;#8216;SP&amp;#8217;, nome: &amp;#8216;S√£o Paulo&amp;#8217;},&lt;/p&gt;

&lt;p&gt;{sigla: &amp;#8216;RS&amp;#8217;, nome: &amp;#8216;Rio Grande do Sul&amp;#8217;}],&lt;/p&gt;

&lt;p&gt;nomes = _.pluck(estados, &amp;#8216;nome&amp;#8217;);&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;Rio de Janeiro&amp;#8221;, &amp;#8220;S√£o Paulo&amp;#8221;, &amp;#8220;Rio Grande do Sul&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;max-min&#34;&gt;max, min&lt;/h3&gt;

&lt;p&gt;Os m√©todos &lt;strong&gt;max&lt;/strong&gt; e &lt;strong&gt;min&lt;/strong&gt; retornam os maiores e menores valores em uma lista. Estes valores podem ser tanto os n√∫meros em uma lista simples, como valores de propriedades de um objeto quando voc√™ especifica uma fun√ß√£o.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var numeros = [100, 32, 29, 105, 30];&lt;/p&gt;

&lt;p&gt;_.min(numeros);&lt;/p&gt;

&lt;p&gt;// 29&lt;/p&gt;

&lt;p&gt;_.max(numeros);&lt;/p&gt;

&lt;p&gt;// 105&lt;/p&gt;

&lt;p&gt;var times = [{nome: &amp;#8216;Flamengo&amp;#8217;, titulos: 6},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Fluminense&amp;#8217;, titulos: 2},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Vasco&amp;#8217;, titulos: 4},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Botafogo&amp;#8217;, titulos: 1}];&lt;/p&gt;

&lt;p&gt;_.max(times, function (time) { return time.titulos });&lt;/p&gt;

&lt;p&gt;// {nome: &amp;#8220;Flamengo&amp;#8221;, titulos: 6}&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;sortby&#34;&gt;sortBy&lt;/h3&gt;

&lt;p&gt;Este m√©todo ordena uma lista do maior para o menor valor. O par√¢metro de ordena√ß√£o pode ser uma propriedade comum dos objetos ou uma fun√ß√£o comparativa.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;// usando a mesma vari√°vel times acima üôÇ&lt;/p&gt;

&lt;p&gt;_.sortBy(times, &amp;#8216;titulos&amp;#8217;).reverse();&lt;/p&gt;

&lt;p&gt;// [{nome: &amp;#8220;Flamengo&amp;#8221;, titulos: 6}, {nome: &amp;#8220;Vasco&amp;#8221;, titulos: 4}, {nome: &amp;#8220;Fluminense&amp;#8221;, titulos: 2}, {nome: &amp;#8220;Botafogo&amp;#8221;, titulos: 1}]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h2 id=&#34;arrays&#34;&gt;Arrays&lt;/h2&gt;

&lt;h3 id=&#34;first-last&#34;&gt;first, last&lt;/h3&gt;

&lt;p&gt;Os m√©todos &lt;strong&gt;first&lt;/strong&gt; e &lt;strong&gt;last&lt;/strong&gt; retornam, respectivamente, os primeiros e os √∫ltimos elementos de um array. Voc√™ pode especificar, como segundo par√¢metro, a quantidade de itens a ser retornada.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var linguagens = [&amp;#8216;ruby&amp;#8217;, &amp;#8216;python&amp;#8217;, &amp;#8216;php&amp;#8217;, &amp;#8216;java&amp;#8217;];&lt;/p&gt;

&lt;p&gt;_.first(linguagens, 2);&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;ruby&amp;#8221;, &amp;#8220;python&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.last(linguagens);&lt;/p&gt;

&lt;p&gt;// java&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;union&#34;&gt;union&lt;/h3&gt;

&lt;p&gt;O m√©todo &lt;strong&gt;union&lt;/strong&gt; retorna uma lista com os elementos √∫nicos de dois ou mais arrays.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.union([1, 2, 3], [4, 3], [10, 2, 9])&lt;/p&gt;

&lt;p&gt;// [1, 2, 3, 4, 10, 9]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;difference&#34;&gt;difference&lt;/h3&gt;

&lt;p&gt;O utilit√°rio &lt;strong&gt;difference&lt;/strong&gt; retorna elementos de um array que n√£o est√£o presentes em outros arrays.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var times = [&amp;#8216;Flamengo&amp;#8217;, &amp;#8216;Vasco&amp;#8217;, &amp;#8216;Botafogo&amp;#8217;, &amp;#8216;Fluminense&amp;#8217;];&lt;/p&gt;

&lt;p&gt;var segundaDivisao = [&amp;#8216;Vasco&amp;#8217;, &amp;#8216;Botafogo&amp;#8217;];&lt;/p&gt;

&lt;p&gt;var terceiraDivisao = [&amp;#8216;Fluminense&amp;#8217;];&lt;/p&gt;

&lt;p&gt;_.difference(times, segundaDivisao, terceiraDivisao);&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;Flamengo&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;indexof&#34;&gt;indexOf&lt;/h3&gt;

&lt;p&gt;O m√©todo &lt;strong&gt;indexOf&lt;/strong&gt; retorna o √≠ndice de um elemento no array especificado.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var times = [&amp;#8216;Flamengo&amp;#8217;, &amp;#8216;Vasco&amp;#8217;, &amp;#8216;Botafogo&amp;#8217;, &amp;#8216;Fluminense&amp;#8217;];&lt;/p&gt;

&lt;p&gt;_.indexOf(times, &amp;#8216;Vasco&amp;#8217;);&lt;/p&gt;

&lt;p&gt;// 1&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h2 id=&#34;fun√ß√µes&#34;&gt;Fun√ß√µes&lt;/h2&gt;

&lt;h3 id=&#34;bind&#34;&gt;bind&lt;/h3&gt;

&lt;p&gt;N√£o confunda o &lt;strong&gt;bind&lt;/strong&gt; do Underscore.js com o &lt;strong&gt;bind&lt;/strong&gt; do jQuery. Aqui, este m√©todo associa um objeto a uma fun√ß√£o, ou seja, o &lt;strong&gt;this&lt;/strong&gt; no contexto da fun√ß√£o ser√° o objeto informado. Voc√™ ainda pode passar valores para os par√¢metros da fun√ß√£o.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var retornaTotalArtigos = function () { return this.nome + &amp;#8216;: &amp;#8216; + this.totalArtigos };&lt;/p&gt;

&lt;p&gt;retornaTotalArtigos = _.bind(retornaTotalArtigos, {nome: &amp;#8216;Davi Ferreira&amp;#8217;, totalArtigos: 12});&lt;/p&gt;

&lt;p&gt;retornaTotalArtigos();&lt;/p&gt;

&lt;p&gt;// Davi Ferreira: 12&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;once&#34;&gt;once&lt;/h3&gt;

&lt;p&gt;O m√©todo &lt;strong&gt;once&lt;/strong&gt; cria uma fun√ß√£o que s√≥ pode ser executada uma √∫nica vez. As pr√≥ximas chamadas da fun√ß√£o v√£o sempre retornar o valor da primeira execu√ß√£o.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var dataCarregamentoInicial = function () { return +new Date; };&lt;/p&gt;

&lt;p&gt;dataCarregamentoInicial = _.once(dataCarregamentoInicial);&lt;/p&gt;

&lt;p&gt;dataCarregamentoInicial();&lt;/p&gt;

&lt;p&gt;dataCarregamentoInicial();&lt;/p&gt;

&lt;p&gt;// as duas chamadas v√£o retornar sempre o mesmo timestamp&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h2 id=&#34;objetos&#34;&gt;Objetos&lt;/h2&gt;

&lt;h3 id=&#34;keys-values&#34;&gt;keys, values&lt;/h3&gt;

&lt;p&gt;Os m√©todos acima retornam, respectivamente, os nomes e os valores das propriedades de um objeto.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.keys({RJ: &amp;#8216;Rio de Janeiro&amp;#8217;, SP: &amp;#8216;S√£o Paulo&amp;#8217;, RS: &amp;#8216;Rio Grande do Sul&amp;#8217;});&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;RJ&amp;#8221;, &amp;#8220;SP&amp;#8221;, &amp;#8220;RS&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.values({RJ: &amp;#8216;Rio de Janeiro&amp;#8217;, SP: &amp;#8216;S√£o Paulo&amp;#8217;, RS: &amp;#8216;Rio Grande do Sul&amp;#8217;});&lt;/p&gt;

&lt;p&gt;// [&amp;#8220;Rio de Janeiro&amp;#8221;, &amp;#8220;S√£o Paulo&amp;#8221;, &amp;#8220;Rio Grande do Sul&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;clone&#34;&gt;clone&lt;/h3&gt;

&lt;p&gt;Este m√©todo clona um objeto, mantendo suas refer√™ncias.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.clone({RJ: &amp;#8216;Rio de Janeiro&amp;#8217;, SP: &amp;#8216;S√£o Paulo&amp;#8217;, RS: &amp;#8216;Rio Grande do Sul&amp;#8217;});&lt;/p&gt;

&lt;p&gt;// {RJ: &amp;#8216;Rio de Janeiro&amp;#8217;, SP: &amp;#8216;S√£o Paulo&amp;#8217;, RS: &amp;#8216;Rio Grande do Sul&amp;#8217;}&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;fun√ß√µes-verificadoras&#34;&gt;fun√ß√µes verificadoras&lt;/h3&gt;

&lt;p&gt;A biblioteca Underscore.js oferece uma vasta gama de fun√ß√µes verificadoras para objetos, entre elas: &lt;strong&gt;isEqual&lt;/strong&gt;, &lt;strong&gt;isEmpty&lt;/strong&gt;, &lt;strong&gt;isFunction&lt;/strong&gt; e &lt;strong&gt;isNull&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var obj = {},&lt;/p&gt;

&lt;p&gt;obj2 = {};&lt;/p&gt;

&lt;p&gt;_.isEmpty(obj);&lt;/p&gt;

&lt;p&gt;// true&lt;/p&gt;

&lt;p&gt;obj = {site: &amp;#8216;Tableless&amp;#8217;, categorias: [&amp;#8216;JavaScript&amp;#8217;. &amp;#8216;jQuery&amp;#8217;, &amp;#8216;HTML5&amp;#8217;]};&lt;/p&gt;

&lt;p&gt;obj2 = {site: &amp;#8216;Tableless&amp;#8217;, categorias: [&amp;#8216;JavaScript&amp;#8217;. &amp;#8216;jQuery&amp;#8217;, &amp;#8216;HTML5&amp;#8217;]};&lt;/p&gt;

&lt;p&gt;_.isEqual(obj, obj2);&lt;/p&gt;

&lt;p&gt;// true&lt;/p&gt;

&lt;p&gt;obj = function () { console.log(&amp;#8216;Sou uma func√ß√£o!&amp;#8217;); };&lt;/p&gt;

&lt;p&gt;_.isFunction(obj);&lt;/p&gt;

&lt;p&gt;// true&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h2 id=&#34;utilit√°rios&#34;&gt;Utilit√°rios&lt;/h2&gt;

&lt;h3 id=&#34;mixin&#34;&gt;mixin&lt;/h3&gt;

&lt;p&gt;Este m√©todo permite a cria√ß√£o de suas pr√≥prias fun√ß√µes utilit√°rias no objeto Underscore.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.mixin({&lt;/p&gt;

&lt;p&gt;isEven : function(number) {&lt;/p&gt;

&lt;p&gt;return number % 2 ? false : true;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;_.isEven(3);&lt;/p&gt;

&lt;p&gt;// false&lt;/p&gt;

&lt;p&gt;_.isEven(10);&lt;/p&gt;

&lt;p&gt;// true&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;escape&#34;&gt;escape&lt;/h3&gt;

&lt;p&gt;O m√©todo &lt;strong&gt;escape&lt;/strong&gt; transforma caracteres como &amp;#8220;&amp;amp;&amp;#8221; e &amp;#8220;/&amp;#8221; para utiliza√ß√£o dentro de um bloco HTML.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;_.escape(&amp;#8216;&lt;/p&gt;

&lt;p&gt;Tableless: JavaScript, HTML &amp;amp; CSS&lt;/p&gt;

&lt;p&gt;&amp;#8216;);&lt;/p&gt;

&lt;p&gt;// &lt;p&gt;Tableless: JavaScript, HTML &amp;amp; CSS&amp;lt;&amp;#x2F;p&amp;gt;&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;template&#34;&gt;template&lt;/h3&gt;

&lt;p&gt;Por fim, um m√©todo para aplicar templates em seu c√≥digo JavaScript:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var times = [{nome: &amp;#8216;Flamengo&amp;#8217;, titulos: 6},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Fluminense&amp;#8217;, titulos: 2},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Vasco&amp;#8217;, titulos: 4},&lt;/p&gt;

&lt;p&gt;{nome: &amp;#8216;Botafogo&amp;#8217;, titulos: 1}],&lt;/p&gt;

&lt;p&gt;tpl = &amp;#8220;&amp;lt;% _.each(times, function(time) { %&amp;gt; &lt;li&gt;&amp;lt;%= time.nome %&amp;gt; &amp;#8211; &amp;lt;%= time.titulos %&amp;gt; t√≠tulo(s)&lt;/li&gt; &amp;lt;% }); %&amp;gt;&amp;#8221;;&lt;/p&gt;

&lt;p&gt;_.template(tpl, {times: times});&lt;/p&gt;

&lt;p&gt;// &lt;li&gt;Flamengo &amp;#8211; 6 t√≠tulo(s)&lt;/li&gt; &lt;li&gt;Fluminense &amp;#8211; 2 t√≠tulo(s)&lt;/li&gt; &lt;li&gt;Vasco &amp;#8211; 4 t√≠tulo(s)&lt;/li&gt; &lt;li&gt;Botafogo &amp;#8211; 1 t√≠tulo(s)&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;Para facilitar e aumentar a legibilidade, o seu template pode ser declarado em uma tag script separada:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;script type=&amp;#8221;text/html&amp;#8221; id=&amp;#8221;tplTimes&amp;#8221;&gt;
  
&lt;% _.each(times, function(time) { %&gt;
    
&lt;li&gt;&lt;%= time.nome %&gt; &amp;#8211; &lt;%= time.titulos %&gt; t√≠tulo(s)&lt;/li&gt;
  
&lt;% }); %&gt;
  
&lt;/script&gt;

&lt;script&gt;
  
var times = [{nome: &amp;#8216;Flamengo&amp;#8217;, titulos: 6},
               
{nome: &amp;#8216;Fluminense&amp;#8217;, titulos: 2},
               
{nome: &amp;#8216;Vasco&amp;#8217;, titulos: 4},
               
{nome: &amp;#8216;Botafogo&amp;#8217;, titulos: 1}],
      
tpl = $(&amp;#8216;#tplTimes&amp;#8217;).html();
  
_.template(tpl, {times: times});
  
&lt;/script&gt;
  

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;Estes foram apenas alguns exemplos de m√©todos e fun√ß√µes utilit√°rias presentes na biblioteca Underscore.js. Para saber mais sobre o projeto, visite o &lt;a href=&#34;http://underscorejs.org/&#34;&gt;site oficial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[1]: &lt;a href=&#34;http://underscorejs.org/&#34;&gt;http://underscorejs.org/&lt;/a&gt; &amp;ldquo;&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>