<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Middlewares Silex on Tableless</title>
    <link>http://tableless.com.br/tags/middlewares-silex/index.xml</link>
    <description>Recent content in Middlewares Silex on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/middlewares-silex/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Silex 2 &amp; Middlewares 101 – Parte 02</title>
      <link>http://tableless.com.br/silex-2-middlewares-101-parte-02/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/silex-2-middlewares-101-parte-02/</guid>
      <description>

&lt;p&gt;Estamos de volta com mais um post da série sobre o micro-framework Silex! Desta vez, vamos fazer uma parada para atualizar a versão do nosso micro-framework, para versão 2.*!&lt;/p&gt;

&lt;p&gt;A partir deste post vamos escrever baseada nesta versão e falaremos ao longo de cada post, sobre as principais diferenças em relação as versões passadas! Vamos lá!&lt;/p&gt;

&lt;h2 id=&#34;silex-2&#34;&gt;Silex 2&lt;/h2&gt;

&lt;p&gt;Uma das grandes mudanças do micro-framework, foi o seu componente de Dependency Injection, o Pimple. O que impactou diretamente na parte de services.  Houveram algumas implementações na parte de controllers básicos e também alguns serviços internos que foram renomeados ou integrados diretamente no micro-fw. Como comentei, veremos cada particularidade nas mudanças ao longo dos posts!&lt;/p&gt;

&lt;h3 id=&#34;atualizando-para-a-versa-o-2&#34;&gt;Atualizando para a versão 2&lt;/h3&gt;

&lt;p&gt;Para atualizarmos o Silex para sua versão mais recente, precisamos alterar nosso arquivo composer.json. Nosso composer.json fica da seguinte forma, em relação ao &lt;a href=&#34;https://tableless.com.br/conhecendo-e-instalando-o-silex/&#34; target=&#34;_blank&#34;&gt;primeiro post&lt;/a&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-json&#34;&gt;{
    &#34;require&#34; : {
    &#34;silex/silex&#34; : &#34;2.*&#34;
    }
}
&lt;/pre&gt;

&lt;p&gt;Agora, basta executarmos um composer update em nosso terminal para obtermos o Silex atualizado!&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-57045 aligncenter&#34; src=&#34;uploads/2017/01/Screen-Shot-2017-01-23-at-13.36.09.png&#34; alt=&#34;&#34; width=&#34;582&#34; height=&#34;631&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;middlewares-continuação&#34;&gt;Middlewares (Continuação)&lt;/h2&gt;

&lt;p&gt;Em &lt;a href=&#34;https://tableless.com.br/silex-middlewares-101-parte-1/&#34; target=&#34;_blank&#34;&gt;nosso último post&lt;/a&gt;, da série, falamos sobre os middlewares de aplicação, como vimos, seu impacto abrange todo o app!&lt;/p&gt;

&lt;h3 id=&#34;middlewares-de-rota&#34;&gt;Middlewares de Rota&lt;/h3&gt;

&lt;p&gt;A diferença entre os middlewares de rota pros middlewares de aplicação, além do escopo que abrange apenas a rota na qual o middleware está definido, é que os middlewares de rota não possuem o método &lt;code&gt;finish&lt;/code&gt;, apenas o &lt;code&gt;before&lt;/code&gt; e o &lt;code&gt;after&lt;/code&gt;. O comportamento é o mesmo. Veja o código a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
require __DIR__ . &#39;/vendor/autoload.php&#39;;

use Silex\Application;

$app = new Application();
$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Router Content!&#39;);
})
-&amp;gt;before(function(){
    print &#39;Before Route Middleware | &#39;;
})
-&amp;gt;after(function(){ print &#39; After Route Middleware&#39;; }); 

$app-&amp;gt;run();&lt;/pre&gt;

&lt;p&gt;No código acima temos os dois middlewares de rotas disponíveis, porém os mesmos só serão executados quando acessarmos a rota / (Rota principal de nosso app), mantendo o mesmo comportamento dos de aplicação.&lt;/p&gt;

&lt;h3 id=&#34;definindo-ordem-de-execução&#34;&gt;Definindo ordem de execução&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Podemos encadear quantos middlewares quisermos, para Rota e para Aplicação, e também definirmos uma ordem de execução.  Por padrão, os middlewares serão executados na ordem em que estão escritos, seguindo suas regras! Porém, o Silex nos disponibiliza duas constantes para alterarmos a ordem de execução dos mesmos. São elas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Application::EARLY_EVENT;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Application::LATE_EVENT;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vejamos o código a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$app = new Application();
$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Router Content!&#39;);
})
-&amp;gt;before(function(){
    print &#39;Executará segundo por conta do LateEvent&#39;;
}, Application::LATE_EVENT)
-&amp;gt;before(function(){ 
    print &#39;Executará primeiro por conta do EarlyEvent&#39;; 
}, Application::EARLY_EVENT); 
&lt;/pre&gt;

&lt;p&gt;O código acima, por padrão, executaria os middlewares before na ordem em que seguem, porém o primeiro middleware a ser executado será o segundo before e logo em seguida o primeiro before definido. Isso acontece por conta da ordem de prioridade estabelecida com as contantes, onde, tudo que tiver EARLY_EVENT executará primeiro, e LATE_EVENT executará por último.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Bom, vamos chegando ao fim de mais um post sobre o micro-framework Silex, até o momento já temos o conhecimento geral de como os middlewares funcionam e com certeza eles serão bem úteis em determinados cenários quando você estiver utilizando o Silex em suas criações! Nas próximas postagens falaremos mais sobre o micro-framework, especificamente sobre como os Services trabalham! Nos vemos lá!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Silex Middlewares 101 – Parte 1</title>
      <link>http://tableless.com.br/silex-middlewares-101-parte-1/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/silex-middlewares-101-parte-1/</guid>
      <description>

&lt;p&gt;Fala pessoal! Tudo bem? Espero que sim! Depois de uma longa temporada retorno com mais este post sobre o micro-framework Silex! Desta vez abordarei o uso dos middlewares no mesmo.&lt;/p&gt;

&lt;h2 id=&#34;middlewares&#34;&gt;Middlewares&lt;/h2&gt;

&lt;p&gt;Os middlewares no Silex são utilizados para mudar o comportamento padrão do mesmo, os middlewares se mostram muito úteis quando pensamos na validação de tokens de acesso, save de logs e muitas outras tarefas. Basicamente temos dois tipos de middlewares, os de aplicação e os de rota. Mostraremos as diferenças abaixo:&lt;/p&gt;

&lt;h2 id=&#34;middlewares-de-aplicação&#34;&gt;Middlewares De Aplicação&lt;/h2&gt;

&lt;p&gt;Como o próprio nome já diz, esses middlewares impactam a aplicação como um todo e são três. Vamos ver como cada um funciona logo abaixo:&lt;/p&gt;

&lt;h3 id=&#34;before-method&#34;&gt;Before Method&lt;/h3&gt;

&lt;p&gt;O método &lt;code&gt;before();&lt;/code&gt; é sempre executado antes de suas rotas, no escopo de aplicação ele será acionado sempre que um usuário fizer alguma requisição a mesma. Veja o código abaixo:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
#...
$app = new Application();

$app-&amp;gt;before(function(){
    //Sua lógica aqui.
});

$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Middlewares&#39;);
});

$app-&amp;gt;run();
&lt;/pre&gt;

&lt;p&gt;Das linhas 5 a 7 temos a definição do nosso middleware &lt;code&gt;before&lt;/code&gt;, como comentado, sempre que nossa aplicação for acessada, o middleware será acionado antes da execução da rota em questão. O before se torna muito útil para validação de tokens de acesso, validação de sessão, transformação de dados, dentre outros.&lt;/p&gt;

&lt;h3 id=&#34;after-method&#34;&gt;After Method&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;after();&lt;/code&gt;, apesar do nome sugestivo, não quer dizer que o mesmo será executado após a chamada da rota, calma vô explicar!&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;after&lt;/code&gt; executa antes da saída do response da rota chamada!&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
#...
$app-&amp;gt;after(function(){
    //Exemplo
    print &#39;After Middleware | &#39;;
});

$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Router Content!&#39;);
});

#...
&lt;/pre&gt;

&lt;p&gt;A saida do código acima seria algo como:&lt;/p&gt;

&lt;p&gt;``Fala pessoal! Tudo bem? Espero que sim! Depois de uma longa temporada retorno com mais este post sobre o micro-framework Silex! Desta vez abordarei o uso dos middlewares no mesmo.&lt;/p&gt;

&lt;h2 id=&#34;middlewares-1&#34;&gt;Middlewares&lt;/h2&gt;

&lt;p&gt;Os middlewares no Silex são utilizados para mudar o comportamento padrão do mesmo, os middlewares se mostram muito úteis quando pensamos na validação de tokens de acesso, save de logs e muitas outras tarefas. Basicamente temos dois tipos de middlewares, os de aplicação e os de rota. Mostraremos as diferenças abaixo:&lt;/p&gt;

&lt;h2 id=&#34;middlewares-de-aplicação-1&#34;&gt;Middlewares De Aplicação&lt;/h2&gt;

&lt;p&gt;Como o próprio nome já diz, esses middlewares impactam a aplicação como um todo e são três. Vamos ver como cada um funciona logo abaixo:&lt;/p&gt;

&lt;h3 id=&#34;before-method-1&#34;&gt;Before Method&lt;/h3&gt;

&lt;p&gt;O método &lt;code&gt;before();&lt;/code&gt; é sempre executado antes de suas rotas, no escopo de aplicação ele será acionado sempre que um usuário fizer alguma requisição a mesma. Veja o código abaixo:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
#...
$app = new Application();

$app-&amp;gt;before(function(){
    //Sua lógica aqui.
});

$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Middlewares&#39;);
});

$app-&amp;gt;run();
&lt;/pre&gt;

&lt;p&gt;Das linhas 5 a 7 temos a definição do nosso middleware &lt;code&gt;before&lt;/code&gt;, como comentado, sempre que nossa aplicação for acessada, o middleware será acionado antes da execução da rota em questão. O before se torna muito útil para validação de tokens de acesso, validação de sessão, transformação de dados, dentre outros.&lt;/p&gt;

&lt;h3 id=&#34;after-method-1&#34;&gt;After Method&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;after();&lt;/code&gt;, apesar do nome sugestivo, não quer dizer que o mesmo será executado após a chamada da rota, calma vô explicar!&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;after&lt;/code&gt; executa antes da saída do response da rota chamada!&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
#...
$app-&amp;gt;after(function(){
    //Exemplo
    print &#39;After Middleware | &#39;;
});

$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Router Content!&#39;);
});

#...
&lt;/pre&gt;

&lt;p&gt;A saida do código acima seria algo como:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Um caso de uso para tal, seria a transformação do response dentre outras tarefas!&lt;/p&gt;

&lt;h3 id=&#34;finish-method&#34;&gt;Finish Method&lt;/h3&gt;

&lt;p&gt;Existe ainda o middleware &lt;code&gt;finish();&lt;/code&gt;, esse sim! É executado após a execução da rota em questão!&lt;/p&gt;

&lt;p&gt;Vamos ao exemplo:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
#...
$app-&amp;gt;finish(function(){
    //Exemplo
    print &#39;Finish middleware&#39;;
});

$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Router Content | &#39;);
});
#...
&lt;/pre&gt;

&lt;p&gt;A saída do código seria:&lt;/p&gt;

&lt;p&gt;```Fala pessoal! Tudo bem? Espero que sim! Depois de uma longa temporada retorno com mais este post sobre o micro-framework Silex! Desta vez abordarei o uso dos middlewares no mesmo.&lt;/p&gt;

&lt;h2 id=&#34;middlewares-2&#34;&gt;Middlewares&lt;/h2&gt;

&lt;p&gt;Os middlewares no Silex são utilizados para mudar o comportamento padrão do mesmo, os middlewares se mostram muito úteis quando pensamos na validação de tokens de acesso, save de logs e muitas outras tarefas. Basicamente temos dois tipos de middlewares, os de aplicação e os de rota. Mostraremos as diferenças abaixo:&lt;/p&gt;

&lt;h2 id=&#34;middlewares-de-aplicação-2&#34;&gt;Middlewares De Aplicação&lt;/h2&gt;

&lt;p&gt;Como o próprio nome já diz, esses middlewares impactam a aplicação como um todo e são três. Vamos ver como cada um funciona logo abaixo:&lt;/p&gt;

&lt;h3 id=&#34;before-method-2&#34;&gt;Before Method&lt;/h3&gt;

&lt;p&gt;O método &lt;code&gt;before();&lt;/code&gt; é sempre executado antes de suas rotas, no escopo de aplicação ele será acionado sempre que um usuário fizer alguma requisição a mesma. Veja o código abaixo:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
#...
$app = new Application();

$app-&amp;gt;before(function(){
    //Sua lógica aqui.
});

$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Middlewares&#39;);
});

$app-&amp;gt;run();
&lt;/pre&gt;

&lt;p&gt;Das linhas 5 a 7 temos a definição do nosso middleware &lt;code&gt;before&lt;/code&gt;, como comentado, sempre que nossa aplicação for acessada, o middleware será acionado antes da execução da rota em questão. O before se torna muito útil para validação de tokens de acesso, validação de sessão, transformação de dados, dentre outros.&lt;/p&gt;

&lt;h3 id=&#34;after-method-2&#34;&gt;After Method&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;after();&lt;/code&gt;, apesar do nome sugestivo, não quer dizer que o mesmo será executado após a chamada da rota, calma vô explicar!&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;after&lt;/code&gt; executa antes da saída do response da rota chamada!&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
#...
$app-&amp;gt;after(function(){
    //Exemplo
    print &#39;After Middleware | &#39;;
});

$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Router Content!&#39;);
});

#...
&lt;/pre&gt;

&lt;p&gt;A saida do código acima seria algo como:&lt;/p&gt;

&lt;p&gt;``Fala pessoal! Tudo bem? Espero que sim! Depois de uma longa temporada retorno com mais este post sobre o micro-framework Silex! Desta vez abordarei o uso dos middlewares no mesmo.&lt;/p&gt;

&lt;h2 id=&#34;middlewares-3&#34;&gt;Middlewares&lt;/h2&gt;

&lt;p&gt;Os middlewares no Silex são utilizados para mudar o comportamento padrão do mesmo, os middlewares se mostram muito úteis quando pensamos na validação de tokens de acesso, save de logs e muitas outras tarefas. Basicamente temos dois tipos de middlewares, os de aplicação e os de rota. Mostraremos as diferenças abaixo:&lt;/p&gt;

&lt;h2 id=&#34;middlewares-de-aplicação-3&#34;&gt;Middlewares De Aplicação&lt;/h2&gt;

&lt;p&gt;Como o próprio nome já diz, esses middlewares impactam a aplicação como um todo e são três. Vamos ver como cada um funciona logo abaixo:&lt;/p&gt;

&lt;h3 id=&#34;before-method-3&#34;&gt;Before Method&lt;/h3&gt;

&lt;p&gt;O método &lt;code&gt;before();&lt;/code&gt; é sempre executado antes de suas rotas, no escopo de aplicação ele será acionado sempre que um usuário fizer alguma requisição a mesma. Veja o código abaixo:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
#...
$app = new Application();

$app-&amp;gt;before(function(){
    //Sua lógica aqui.
});

$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Middlewares&#39;);
});

$app-&amp;gt;run();
&lt;/pre&gt;

&lt;p&gt;Das linhas 5 a 7 temos a definição do nosso middleware &lt;code&gt;before&lt;/code&gt;, como comentado, sempre que nossa aplicação for acessada, o middleware será acionado antes da execução da rota em questão. O before se torna muito útil para validação de tokens de acesso, validação de sessão, transformação de dados, dentre outros.&lt;/p&gt;

&lt;h3 id=&#34;after-method-3&#34;&gt;After Method&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;after();&lt;/code&gt;, apesar do nome sugestivo, não quer dizer que o mesmo será executado após a chamada da rota, calma vô explicar!&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;after&lt;/code&gt; executa antes da saída do response da rota chamada!&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
#...
$app-&amp;gt;after(function(){
    //Exemplo
    print &#39;After Middleware | &#39;;
});

$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Router Content!&#39;);
});

#...
&lt;/pre&gt;

&lt;p&gt;A saida do código acima seria algo como:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Um caso de uso para tal, seria a transformação do response dentre outras tarefas!&lt;/p&gt;

&lt;h3 id=&#34;finish-method-1&#34;&gt;Finish Method&lt;/h3&gt;

&lt;p&gt;Existe ainda o middleware &lt;code&gt;finish();&lt;/code&gt;, esse sim! É executado após a execução da rota em questão!&lt;/p&gt;

&lt;p&gt;Vamos ao exemplo:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
#...
$app-&amp;gt;finish(function(){
    //Exemplo
    print &#39;Finish middleware&#39;;
});

$app-&amp;gt;get(&#39;/&#39;, function(Application $app) {
    return $app-&amp;gt;escape(&#39;Router Content | &#39;);
});
#...
&lt;/pre&gt;

&lt;p&gt;A saída do código seria:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Muito útil para save de logs dentre outras tarefas!&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Esses são os middlewares de aplicação do Silex Framework, percebemos que os mesmos tornam nossos trabalhos bem mais simplificados em determinados casos, só precisamos tomar um pouco de cuidado para não deixa-los um tanto quanto complexos, evitando assim dor de cabeça futura!&lt;/p&gt;

&lt;p&gt;Em nosso próximo post, ainda sobre Middlewares, abordaremos os middlewares de rotas e algumas particularidades dos middlewares como um todo!&lt;/p&gt;

&lt;p&gt;O código completo deste post você pode encontrar no &lt;a href=&#34;https://goo.gl/LI4BsY&#34; target=&#34;_blank&#34;&gt;gist&lt;/a&gt;. Abraços e até a próxima!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>