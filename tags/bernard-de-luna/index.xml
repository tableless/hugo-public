<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bernard De Luna on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/bernard-de-luna/index.xml</link>
    <description>Recent content in Bernard De Luna on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/bernard-de-luna/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como usar linear-gradient em CSS de forma consciente?</title>
      <link>https://tableless.github.io/hugo-public/como-usar-gradient-no-css-de-forma-consciente/</link>
      <pubDate>Wed, 20 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/como-usar-gradient-no-css-de-forma-consciente/</guid>
      <description>

&lt;p&gt;Vejo em diversos grupos, f√≥runs e blogs as pessoas recomendando diversos sites que geram automaticamente o seu linear-gradient em CSS, Eu nos √∫ltimos meses tenho criticado um pouco a recomenda√ß√£o dessas tecnologias, pois j√° est√° mais do que na hora de aprendermos e utilizarmos esses atributos de forma criativa.&lt;/p&gt;

&lt;h2 id=&#34;desculpa-bernard-mas-do-que-voc√™-est√°-falando&#34;&gt;Desculpa Bernard, mas do que voc√™ est√° falando?&lt;/h2&gt;

&lt;p&gt;Ol√° tudo bem? Meu nome √© Bernard De Luna, voc√™ est√° no Tableless, at√© a√≠ tudo bem? Brincadeira, deixa eu contextualiz√°-lo primeiro:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;linear-gradient&lt;/code&gt; √© uma funcionalidade das CSS3 para criar degrades entre 2 ou mais cores em linha. Farei um pequeno exemplo para perceberem como √© f√°cil fazer um gradiente sem utilizar editor:&lt;/p&gt;

&lt;p&gt;OBS: Por quest√£o de compatibilidade de browsers, vale a pena voc√™s consultarem o &lt;a href=&#34;http://caniuse.com/#search=linear&#34; title=&#34;http://caniuse.com/#search=linear&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://caniuse.com/#search=linear&#34;&gt;http://caniuse.com/#search=linear&lt;/a&gt;&lt;/a&gt; para usar prefixos como -webkit, -moz, -ms, -o, etc., &lt;strong&gt;para esses exemplos n√£o utilizarei prefixos&lt;/strong&gt;. Outro ponto importante √© que na nova especifica√ß√£o, o &amp;#8220;top&amp;#8221; virou &amp;#8220;to bottom&amp;#8221;, por√©m essa mudan√ßa s√≥ existe no valor sem prefixo, as escritas com prefixo ainda usam a dire√ß√£o top, right, bottom, left como padr√µes.&lt;/p&gt;

&lt;h2 id=&#34;linear-gradient-n√≠vel-b√°sico&#34;&gt;linear-gradient n√≠vel b√°sico&lt;/h2&gt;

&lt;p&gt;O gradiente √© renderizado como uma imagem de fundo, ent√£o podemos cham√°-lo assim. Dentro do ( ) temos que definir o √¢ngulo do degrade e depois em v√≠rgulas os canais de cores.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: linear-gradient(to bottom, white, purple);&lt;/pre&gt;

&lt;div class=&#34;exemplo e1&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Mudando o √¢ngulo do degrade&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: linear-gradient(to right, white, purple);&lt;/pre&gt;

&lt;div class=&#34;exemplo e2&#34;&gt;
&lt;/div&gt;

&lt;pre class=&#34;lang-html&#34;&gt;background-image: linear-gradient(45deg, white, purple);&lt;/pre&gt;

&lt;div class=&#34;exemplo e3&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Podemos colocar mais v√≠rgulas e inserir mais canais de cores para o degrade, at√© agora tudo muito simples n√©?&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: linear-gradient(to right, white, purple, yellow);&lt;/pre&gt;

&lt;div class=&#34;exemplo e4&#34;&gt;
&lt;/div&gt;

&lt;p&gt;O problema das explica√ß√µes sobre gradient √© que s√£o todas feias e n√£o usuais, o que dificulta algumas pessoas se sentirem confiantes em cri√°-las, por isso, vamos criar um degrade bacana para um bot√£o.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: linear-gradient(to bottom, #cf2b4f, #980021);&lt;/pre&gt;

&lt;div class=&#34;exemplo e5&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Eu prefiro degrades mais suaves, por isso, vamos aprender outra coisa importante no &lt;code&gt;linear-gradient&lt;/code&gt;, que √© onde a cor vai parar. Ent√£o vamos dizer que o vermelho mais escuro n√£o finalizar√° no padr√£o (n√£o informado) de 100%, vamos faz√™-lo parar um pouco depois, suavizando um pouco mais o gradiente.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: linear-gradient(to bottom, #980021 130%);&lt;/pre&gt;

&lt;div class=&#34;exemplo e6&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Viram que ficou mais bonito? Para ficar ainda mais visual, colocarei alguns estilos simples para perceberem que somados fazem nosso elemento ficar bastante sexy!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;height:auto;
padding: 40px 0;
color:#fff;
font-size:20px;
text-align:center;
border-radius:4px;
border:1px solid #980021;
box-shadow: inset 0 2px 3px 0 rgba(255,255,255,.3), inset 0 -3px 6px 0 rgba(0,0,0,.2), 0 3px 2px 0 rgba(0,0,0,.2);
background-image: linear-gradient(to bottom, #cf2b4f, #980021 130%);
&lt;/pre&gt;

&lt;div class=&#34;exemplo e7&#34;&gt;
  olha como eu sou sexy!
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Como esse post √© apenas sobre degrade, vamos voltar para o assunto üôÇ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Em alguns casos, voc√™ n√£o precisa definir as cores precisamente do seu degradee, passando a usar transpar√™ncia para isso. Por exemplo, voc√™ pode utilizar o &lt;code&gt;background-color&lt;/code&gt; para definir a cor de fundo, e depois utilizar um degrade que vai do transparente para o preto com 30% de transpar√™ncia, vejamos:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#4fd8e8;
background-image: linear-gradient(to bottom, transparent, rgba(0,0,0,.3));&lt;/pre&gt;

&lt;div class=&#34;exemplo e8&#34;&gt;
&lt;/div&gt;

&lt;p&gt;O novo rgba √© interessant√≠ssimo para fazer diversas coisas no CSS, como por exemplo fazer um elemento estilo GLASS. H√° muitos anos atr√°s, l√° pelos 2006 &amp;#8211; 2007, o estilo visual de vidro estava tomando todas as interfaces, um dia identifiquei um padr√£o para criar bot√µes de vidro com facilidade. A t√©cnica era t√£o f√°cil que at√© hoje eu lembro dela, basta voc√™ come√ßar com uma cor CLARA que vai para uma cor MUITO CLARA, &lt;strong&gt;colado a essa cor&lt;/strong&gt; MUITO CLARA voc√™ tem a mesma cor NORMAL, e finaliza com a cor UM POUCO CLARA, apenas essas 4 varia√ß√µes da mesma cor, ou da luz, n√£o acredita? Veja s√≥.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#4fd8e8;
background-image: linear-gradient(to bottom, rgba(255,255,255,.1), rgba(255,255,255,.4), rgba(255,255,255,0), rgba(255,255,255,.4));&lt;/pre&gt;

&lt;div class=&#34;exemplo e9&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Sei que essa hora voc√™ est√° rindo de mim dizendo que n√£o ficou nem parecido com glass, que ficou horr√≠vel, que eu sou loiro e burro. Eu sei, mas lembra que eu falei que a cor precisava ser colada(coloquei at√© em negrito porque eu sabia que voc√™ n√£o repararia)? Vamos ajustar o &lt;strong&gt;&amp;#8220;color stop&amp;#8221;&lt;/strong&gt; do degrade, em outras palavras, vamos ajustar onde cada cor vai parar.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#4fd8e8;
background-image: linear-gradient(to bottom, rgba(255,255,255,.1), rgba(255,255,255,.4) 49%, rgba(255,255,255,0) 50%, rgba(255,255,255,.4));&lt;/pre&gt;

&lt;div class=&#34;exemplo e10&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Agora sim hein! Como diz Bart Simpsons &amp;#8220;&lt;em&gt;Meninos loiros n√£o s√£o burros, eles s√£o maus, como em Karate Kid ou II Guerra Mundial&lt;/em&gt;&amp;#8220;. O mais bacana √© que como o degrade est√° sendo feito com camadas de transpar√™ncia, voc√™ pode fazer qualquer efeito ou adapta√ß√£o do efeito atrav√©s da simples mudan√ßa de cor de fundo. Outro ponto muito importante √© que o &lt;strong&gt;CSS transition n√£o funciona para o linear&lt;/strong&gt;, pois o mesmo √© renderizado como IMAGEM, sendo assim, voc√™ consegue mudar apenas a cor de fundo e utilizar o CSS transition para tornar o movimento mais divertido. Veja s√≥:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;{
height:auto;
padding: 40px 0;
color:#fff;
font-size:20px;
text-align:center;
background-color:#4fd8e8;
background-image: linear-gradient(to bottom, rgba(255,255,255,.1), rgba(255,255,255,.4) 49%, rgba(255,255,255,0) 50%, rgba(255,255,255,.4));
transition: all .5s;
}
:hover { background-color:#0b8b9a; }&lt;/pre&gt;

&lt;div class=&#34;exemplo e11&#34;&gt;
  HOVER ME!
&lt;/div&gt;

&lt;h2 id=&#34;linear-gradient-n√≠vel-intermedi√°rio&#34;&gt;linear-gradient n√≠vel intermedi√°rio&lt;/h2&gt;

&lt;p&gt;Agora que voc√™ j√° entendeu como fazer degrades simples utilizando o &lt;code&gt;linear-gradient&lt;/code&gt;, vamos brincar um pouco mais? Quando eu criei o &lt;a title=&#34;https://developer.mozilla.org/en-US/demos/detail/old-radio/launch&#34; href=&#34;https://developer.mozilla.org/en-US/demos/detail/old-radio/launch&#34; target=&#34;_blank&#34;&gt;Old Radio&lt;/a&gt; sem utilizar nenhuma imagem eu tive 3 itens para trabalhar a realidade apenas com CSS: a retina display, a textura de madeira e as esta√ß√µes do r√°dio, vamos aprender a fazer as tr√™s coisas?&lt;/p&gt;

&lt;h3 id=&#34;retina-display&#34;&gt;Retina Display&lt;/h3&gt;

&lt;p&gt;Essa t√©cnica foi bem simples, mas o resultado ficou muito bom, √∫nica coisa que precisamos √© utilizar a transpar√™ncia do RGBA mostrada anteriormente e um √¢ngulo diferente para dar o efeito, no Old Radio eu usei -88deg, mas aqui colocarei -78deg para ficar mais vis√≠vel, veja s√≥:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#312d28;
background-image:linear-gradient(-87deg, rgba(255,255,255,0.1) 0%,rgba(255,255,255,0.08) 49%,rgba(255,255,255,0.03) 50%,rgba(0,0,0,0) 51%,rgba(0,0,0,0.4) 100%);&lt;/pre&gt;

&lt;div class=&#34;exemplo e12&#34;&gt;
&lt;/div&gt;

&lt;h3 id=&#34;textura-de-madeira&#34;&gt;Textura de Madeira&lt;/h3&gt;

&lt;p&gt;Fiquei bons minutos olhando para a textura de madeira sem saber como a faria em CSS, at√© mesmo se seria poss√≠vel, at√© que fiz um teste utilizando o RGBA em cima da cor marrom e rapidamente vi que poderia criar uma t√©cnica bem divertida para transformar uma cor marrom em uma textura de madeira. A t√©cnica √© utilizar 2 √∫nicas cores, sendo uma transparente e outra com 10% de transpar√™ncia, veja bem como foi feita:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#5f3c24;
background-image:linear-gradient(to bottom, transparent, rgba(0,0,0,.1));&lt;/pre&gt;

&lt;div class=&#34;exemplo e13&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Agora digo que cada cor para depois de 1px, como a altura do elemento √© maior que 2px (s√≥ temos duas cores), a √∫ltima cor persistir√° at√© o final do elemento.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#5f3c24;
background-image:linear-gradient(to bottom, transparent 1px, rgba(0,0,0,.1) 1px);&lt;/pre&gt;

&lt;div class=&#34;exemplo e14&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Para finalizar, eu utilizo um atributo novo bem importante que √© o &lt;code&gt;background-size&lt;/code&gt; onde eu digo que a altura do meu degrade √© de 2px, como o padr√£o do fundo √© repetir, as linhas come√ßam a se repetir, fazendo uma textura bem suave de madeira.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#5f3c24;
background-image:linear-gradient(to bottom, transparent 1px, rgba(0,0,0,.1) 1px);
background-size: auto 2px;&lt;/pre&gt;

&lt;div class=&#34;exemplo e15&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Prontinho! Temos uma textura de madeira apenas com gradiente, caso voc√™ n√£o esteja conseguindo ver a diferen√ßa, d√™ um zoom no browser e veja a belezura üôÇ Ent√£o vamos ao √∫ltimo e mais dif√≠cil das 3 coisas do Old Radio, as esta√ß√µes de r√°dio.&lt;/p&gt;

&lt;h3 id=&#34;esta√ß√µes-de-r√°dio&#34;&gt;Esta√ß√µes de r√°dio&lt;/h3&gt;

&lt;p&gt;Criar as esta√ß√µes de r√°dio apenas com uma tag e apenas no CSS parecia ser algo imposs√≠vel, mas nada que um estudo n√£o pudesse me mostrar novamente que tudo √© poss√≠vel com CSS, √© apenas combinar o gradiente com repeti√ß√£o, posi√ß√£o e tamanho do background. Inicialmente vamos criar v√°rias palhetas utilizando a mesma t√©cnica do exerc√≠cio anterior:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#312d28;
background-image: linear-gradient(to right, rgba(255,255,255,.3) 1px, transparent 1px);
background-size: 5px 5px;&lt;/pre&gt;

&lt;div class=&#34;exemplo e16&#34;&gt;
&lt;/div&gt;

&lt;p&gt;S√≥ que n√≥s n√£o queremos que o nosso fundo v√° at√© o final, repare que colocamos o &lt;code&gt;background-size: 5px 5px&lt;/code&gt;, mas de que adianta isso se n√£o mexermos no &lt;code&gt;background-repeat&lt;/code&gt;? Ent√£o vamos definir que o nosso fundo s√≥ vai se repetir horizontalmente. Para o exerc√≠cio ficar mais vis√≠vel vou aumentar um pouco o tamanho das palhetas ok?&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#312d28;
background-image: linear-gradient(to right, rgba(255,255,255,.3) 1px, transparent 1px);
background-size: 10px 10px;
background-repeat: repeat-x;&lt;/pre&gt;

&lt;div class=&#34;exemplo e17&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Agora vem uma coisa bem legal! O CSS3 permite m√∫ltiplos backgrounds, ou seja, vamos agora fazer a mesma t√©cnica para essas palhetas pequenas, com apenas duas diferen√ßas, ela vai ser um branco mais forte e estar√° com o &lt;code&gt;backgrond-size&lt;/code&gt; diferente. OBS: Quando voc√™ tem mais de uma imagem de fundo, voc√™ pode controlar cada propriedade do background usando v√≠rgulas, sendo a primeira informa√ß√£o para o primeiro fundo, a segunda para o segundo e assim vai, se houver uma s√≥, ela valer√° para todos.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#312d28;
background-image: linear-gradient(to right, rgba(255,255,255,1) 1px, transparent 1px), linear-gradient(to right, rgba(255,255,255,.3) 1px, transparent 1px);
background-size: 50px 50px, 10px 30px;
background-repeat: repeat-x;&lt;/pre&gt;

&lt;div class=&#34;exemplo e18&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Irado hein!!! S√≥ que isso √© uma r√©gua meu camarada e n√£o uma esta√ß√£o de r√°dio. Para parecer definitivamente uma esta√ß√£o de r√°dio precisaremos alinhar o fundo pela parte de baixo, e isso √© simples e antigo no css, chama-se &lt;code&gt;background-position&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-color:#312d28;
background-image: linear-gradient(to right, rgba(255,255,255,1) 1px, transparent 1px), linear-gradient(to right, rgba(255,255,255,.3) 1px, transparent 1px);
background-size: 50px 50px, 10px 30px;
background-repeat: repeat-x;
background-position: 0 bottom;&lt;/pre&gt;

&lt;div class=&#34;exemplo e19&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Agora sim! Parab√©ns, voc√™ criou uma esta√ß√£o de r√°dio apenas usando CSS! Can you feel it?&lt;/p&gt;

&lt;h2 id=&#34;concluindo-8230&#34;&gt;Concluindo&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Os atributos n√£o s√£o muito complicados de serem utilizados, a percep√ß√£o √© que faz toda a diferen√ßa para uma aplica√ß√£o criativa. Agora √© voc√™ criar experimentos com essas etapas que foram mostradas aqui e ficar O MOOOOONNNSTRROOO do linear-gradient! Quem sabe depois n√£o vem um apenas sobre radial-gradient?&lt;/p&gt;

&lt;p&gt;Aproveite que chegou at√© aqui e me conte o que achou üôÇ Voc√™ j√° sabia fazer essas coisas com facilidade usando linear-gradient? Deixe seu coment√°rio&lt;/p&gt;

&lt;p&gt;OBS1: Com a nova especifica√ß√£o do valor linear-gradient, o √¢ngulo 0 deixou de ser top e passou a ser right, sendo valores positivos para seguir na dire√ß√£o do rel√≥gio e negativo para o contr√°rio. (chamada de aten√ß√£o pelo grande Sergio Lopes) *j√° corrigido.&lt;/p&gt;

&lt;p&gt;OBS2: Chamei no come√ßo do artigo linear-gradient de propriedade o que √© errado, j√° que ele √© um valor. (chamada de aten√ß√£o pelo amigo Maujor) *j√° corrigido.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando seu pr√≥prio Framework HTML CSS</title>
      <link>https://tableless.github.io/hugo-public/criando-seu-framework-html-css/</link>
      <pubDate>Mon, 07 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-seu-framework-html-css/</guid>
      <description>

&lt;p&gt;Em 2011, principalmente em 2012, dezenas de pessoas vinham e voltavam com o assunto &amp;#8220;Qual o melhor Framework?&amp;#8221;, fora os bootstrap fanboys de plant√£o que falavam t√£o cegamente do Twitter Bootstrap que se somasse todos os amores da internet teriamos um &amp;#8220;cupcake de gato dan√ßando Gangnam Style ap√≥s tentar beber 1 litro de absolute&amp;#8221; bootstrape. Eu sempre falo isso no meio das minhas palestras e come√ßo dizendo no in√≠cio desse post: Sejamos menos emotivos e mais analistas em Front-end, explico a seguir:&lt;/p&gt;

&lt;p&gt;Nossa fun√ß√£o √© analisar as possibilidades, testar as inova√ß√µes, medir os riscos e otimizar os resultados. Testar frameworks como Twitter Bootstrap, Foundation, &amp;#8230; √© parte do nosso trabalho, onde em muitos casos a pessoa esquece a melhor parte: &lt;strong&gt;Criar o seu pr√≥prio Framework Front-end&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;por-que-voc√™-deseja-criar-seu-pr√≥prio-framework&#34;&gt;Por que voc√™ deseja criar seu pr√≥prio Framework?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nenhum dos frameworks tem o objeto que eu preciso&lt;/li&gt;
&lt;li&gt;Eu quero total controle sobre o c√≥digo&lt;/li&gt;
&lt;li&gt;Eu preciso de algo mais simples ou menos objetos do que os outros possuem&lt;/li&gt;
&lt;li&gt;Aprender a criar um Framework por divers√£o e aprendizado&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;por-que-voc√™-n√£o-deve-criar-o-seu-pr√≥prio-framework&#34;&gt;Por que voc√™ n√£o deve criar o seu pr√≥prio Framework?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Voc√™ n√£o tem tempo dispon√≠vel para cri√°-lo&lt;/li&gt;
&lt;li&gt;√â mais vantajoso utilizar um j√° pronto do que criar um do zero&lt;/li&gt;
&lt;li&gt;Maior produtividade por utilizar algo j√° criado e documentado&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se voc√™ teve mais afinidade a primeira lista, ou √© apenas curioso, vamos come√ßar com alguns t√≥picos que o levar√£o a criar o &amp;#8220;defina o nome a sua escolha&amp;#8221; bootstrap.&lt;/p&gt;

&lt;h2 id=&#34;tudo-depende-da-nomeclatura-e-organiza√ß√£o&#34;&gt;Tudo depende da nomeclatura e organiza√ß√£o&lt;/h2&gt;

&lt;p&gt;Para componentizar sua p√°gina de maneira sustent√°vel voc√™ precisa explorar ao m√°ximo a organiza√ß√£o e padroniza√ß√£o do projeto. Quando eu analiso c√≥digo de alguns profissionais ou empresas, sempre come√ßo olhando pelos nomes utilizados em classes, pois me diz muito sobre a pol√≠tica da empresa na hora da cria√ß√£o das p√°ginas, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;Bot√£o = .button, .botao, .btn, .bt&lt;/pre&gt;

&lt;p&gt;A partir da escolha do padr√£o, voc√™ precisa mant√™-lo nas varia√ß√µes&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;.btn-enviar, .btn-cancelar, .btn-salvar, .btn-pesquisar, ...&lt;/pre&gt;

&lt;p&gt;Ent√£o geramos uma redund√¢ncia no prefixo, que √© uma coisa boa quando falamos em padr√£o e organiza√ß√£o&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;A partir da√≠ voc√™ vai seguir a mesma linha para demais diferencia√ß√µes e se s√£o diferenciais espec√≠ficas do componente de bot√£o ou se √© uma varia√ß√£o gen√©rica, como visto abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;/* classe full espec√≠fica */
&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar btn-full&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;

/* classe full generica */
&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar full&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Assim, podemos contextualizar para outros artefatos e seus devidos prefixos:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;Bot√£o = .button, .botao, .btn, .bt
Tabela = .table, .tabela, .tbl, .tb
listas = .list, .lista, .group
widgets = .widgets, .wid
t√≠tulos = .title, .tit, .tt, .header, .h
&lt;/pre&gt;

&lt;p&gt;e algumas devidas personaliza√ß√µes&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;Bot√£o = .btn-primary, .btn-secondary, .btn-small, .btn-medium, .btn-loading, .btn-disabled
Tabela = .tbl-roles, .tbl-full, .tbl-small
Tooltip = .tooltip, .tooltip-pin-up, .tooltip-pin-down, .tooltip-small, .tooltip-warning
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OBS: √â √≥bvio que estou dando exemplos e voc√™ deve construir seus padr√µes com a sua equipe e profissionais envolvidos no processo.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;revisando&#34;&gt;Revisando&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A parte mais primordial para a constru√ß√£o de um Framework sustent√°vel √© o trabalho de nomeclaturas e seu emprego no c√≥digo&lt;/li&gt;
&lt;li&gt;O nome dado ao componente deve vir como prefixo das suas diversifica√ß√µes&lt;/li&gt;
&lt;li&gt;Caso uma das varia√ß√µes seja utilizada em outros componentes, ela pode ser utilizada sem prefixo como &amp;#8220;full, clear, left, right, error&amp;#8221;&lt;/li&gt;
&lt;li&gt;Mapeie a nomeclatura e as possibilidades com sua equipe, nunca sozinho&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;coloque-todos-seus-padr√µes-em-um-√∫nico-local&#34;&gt;Coloque todos seus padr√µes em um √∫nico local&lt;/h2&gt;

&lt;p&gt;Um bom framework √© reconhecido pela reutiliza√ß√£o de seu c√≥digo, sendo assim, voc√™ n√£o pode contar que seus elementos caibam, se alinhem e harmonizem apenas no local pre desenhado, por isso, voc√™ precisa criar uma p√°gina que apresente todos os elementos padronizados, a fim de test√°-los e document√°-los. Repare nas duas p√°ginas abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter Bootstrap: &lt;a href=&#34;http://twitter.github.com/bootstrap/components.html&#34; title=&#34;http://twitter.github.com/bootstrap/components.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://twitter.github.com/bootstrap/components.html&#34;&gt;http://twitter.github.com/bootstrap/components.html&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Foundation: &lt;a href=&#34;http://foundation.zurb.com/docs/elements.php&#34; title=&#34;http://foundation.zurb.com/docs/elements.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://foundation.zurb.com/docs/elements.php&#34;&gt;http://foundation.zurb.com/docs/elements.php&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora que est√° convencido, voc√™ precisa criar essa p√°gina de apresenta√ß√£o onde voc√™ listar√° os componentes padronizados. Em um primeiro momento voc√™ pode inserir os componentes na p√°gina, agrupando (Veja os links acima para inspirar-se) da maneira que achar mais organizada. Essa etapa lhe dar√° mais seguran√ßa, pois a cada componente finalizado, voc√™ e sua equipe comemorar√° pelo padr√£o criado. Lembre-se que mais do que criar os componentes √© preciso sempre dar 360 nos seus artefatos, identificando pontos de melhoria ou bugs, tratando e atualizando-os nessa p√°gina de padr√µes.&lt;/p&gt;

&lt;h3 id=&#34;adendo-para-projetos-responsivos&#34;&gt;Adendo para projetos responsivos&lt;/h3&gt;

&lt;p&gt;Caso voc√™ tenha varia√ß√µes padronizadas para projetos responsivos, n√£o os considere na mesma p√°gina, por mais que a mudan√ßa possa ser percebida na mudan√ßa do viewport, crie uma p√°gina &amp;#8220;padrao-mobile.html&amp;#8221; ou algo do tipo com o local √∫til j√° reduzido simulando a largura do device pretendido, pois os padr√µes precisam ser facilmente visualizados, nenhuma equipe ficaria contente toda hora tendo que redimensionar navegador para ver o elemento normal e para mobile n√©?&lt;/p&gt;

&lt;h3 id=&#34;revisando-1&#34;&gt;Revisando&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Todos os componentes padronizados precisam ser inclu√≠dos em uma p√°gina separada da aplica√ß√£o para documenta√ß√£o e valida√ß√£o&lt;/li&gt;
&lt;li&gt;Se o elemento estar√° pronto quando puder ser reutilizado em outros locais sem quebrar (geralmente por m√° heran√ßa CSS)&lt;/li&gt;
&lt;li&gt;Agrupe os elementos (form, t√≠tulos, bot√µes, grid, etc) para manter a organiza√ß√£o do seu projeto&lt;/li&gt;
&lt;li&gt;Planeje e organize os padr√µes com sua equipe, nunca sozinho&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;m√≥dulos-produtos-componentes-e-ou-artefatos&#34;&gt;M√≥dulos, produtos, componentes e(ou) artefatos&lt;/h2&gt;

&lt;p&gt;Os nomes s√£o variados, pode chamar como achar mais fofo, mas o importante √© saber que qualquer framework utiliza itens comuns, ent√£o comece por eles e, a partir da√≠, desenvolva em cima das suas necessidades menos comuns. Os componentes comuns s√£o:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grid&lt;/li&gt;
&lt;li&gt;Tipografia&lt;/li&gt;
&lt;li&gt;Bot√µes&lt;/li&gt;
&lt;li&gt;Formul√°rios&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Claro que cada projeto pedir√° necessidades especiais, cabendo a voc√™ e sua equipe serem flex√≠veis e espertos. Vamos conversar rapidamente sobre cada um desses 4 componentes?&lt;/p&gt;

&lt;h3 id=&#34;grid&#34;&gt;Grid&lt;/h3&gt;

&lt;p&gt;Lembro de quando eu criei o &lt;a href=&#34;http://formee.org&#34; title=&#34;formee framework&#34; target=&#34;_blank&#34;&gt;Formee framework&lt;/a&gt; e penava com c√°lculos e mais c√°lculos para chegar ao Grid flex√≠vel perfeito, foram muitas p√°ginas de caderno rabiscadas com contas e mais contas. O Grid √© uma parte perigosa do projeto, principalmente por exigirem algumas escolhas desde o come√ßo, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usarei float para diagrama√ß√£o?&lt;/li&gt;
&lt;li&gt;Usarei algum pre processador como Less, Sass ou Stylus?&lt;/li&gt;
&lt;li&gt;Usarei colunas em pixels ou colunas flex√≠veis?&lt;/li&gt;
&lt;li&gt;Minhas colunas ser√£o responsivas?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A partir da√≠, voc√™ tem uma s√©rie de Grids famosos para voc√™ estudar e basear o seu projeto, alguns fugindo do float, gerando projetos mais interessantes, por√©m menos seguros para browsers n√£o atuais (n√£o, n√£o me refiro apenas a IE); alguns utilizando contas dos pre processadores, gerando larguras e espa√ßamentos autom√°ticos de acordo com o container; alguns utilizando colunas flex√≠veis (exemplo do Formee) que podem ser muito interessantes para muitos projetos, mas come√ßa a gerar desconforto em containers muito pequenos e alguns utilizando colunas responsivas, que podem refazer todo o pensamento dos 3 primeiros itens dessa lista.&lt;/p&gt;

&lt;p&gt;Uma dica para quem est√° estudando o desenvolvimento de GRIDs √© pesquisar sobre o atributo CSS &lt;strong&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/strong&gt; que √© respons√°vel por mudar o display do box model, passando a considerar o padding e border na hora de aparecer na largura/altura final, o box-model convencional n√£o os considera na largura e altura, somando no resultado os valores, ou seja, 300px de largura acaba se tornando 300px + 2px de borda + 10px de padding = 312px total.&lt;/p&gt;

&lt;p&gt;Outro ponto mais avan√ßado que voc√™s precisar√£o trabalhar em cima √© a parte da cria√ß√£o do grid. Atualmente voc√™ tem duas formas de faz√™-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;grid-6-12&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;grid-6-12&#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;row&#34;&amp;gt;
&amp;lt;div class=&#34;col-6&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;col-6&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Conseguem entender a diferen√ßa? O primeiro √© comum em projetos onde voc√™ n√£o tem controle sobre a quantidade de divs, assim voc√™ cria algo e vai administrando, do outro lado, voc√™ controla a diagrama√ß√£o linha por linha. O problema da primeira √© o famoso bug de float, que quando um dos elementos rouba mais altura e impacta no elemento da linha de baixo, ele gera um buraco, desorientando os demais irm√£os, o problema da segunda √© que com isso voc√™ engessa totalmente o seu c√≥digo, prejudicando inclusive a liberdade de uma diagrama√ß√£o criativa para mobiles.&lt;/p&gt;

&lt;p&gt;Rabisque para chegar numa largura confort√°vel do seu grid, conte com um espa√ßamento confort√°vel entre as colunas, teste, teste, teste e teste.&lt;/p&gt;

&lt;h3 id=&#34;tipografia&#34;&gt;Tipografia&lt;/h3&gt;

&lt;p&gt;Precisamos definir os elementos textuais da aplica√ß√£o, geralmente s√£o t√≠tulos, listas, par√°grafos e links. √â bastante importante voc√™ simular todas as combina√ß√µes poss√≠veis na etapa de testes, pois sempre pode gerar algum incomodo pro usu√°rio, por exemplo, voc√™ ter um t√≠tulo grande, um par√°grafo de 2 linhas e outro t√≠tulo grande n√£o √© a mesma coisa que 1 t√≠tulo grande e 5 par√°grafos grandes, tudo isso precisa ser testado.&lt;/p&gt;

&lt;p&gt;Para voc√™ conhecer um pouco mais sobre tipografia na parte de Front-end, recomendo a &lt;a href=&#34;https://github.com/necolas/normalize.css/wiki&#34; title=&#34;https://github.com/necolas/normalize.css/wiki&#34; target=&#34;_blank&#34;&gt;wiki do Normalize.css criado pelo Nicolas Gallagher&lt;/a&gt; que retrata a falta de padroniza√ß√£o na mostragem dos elementos textuais entre os browsers. Eu tenho algumas considera√ß√µes sobre essa filosofia, mas quem sabe isso fica para um outro post üôÇ&lt;/p&gt;

&lt;h3 id=&#34;bot√µes&#34;&gt;Bot√µes&lt;/h3&gt;

&lt;p&gt;Creio que a melhor forma de come√ßar a criar seus padr√µes √© pelo grupo de bot√µes, pois √© bastante simples e gostoso de criar. Geralmente em um aplicativo existem 2 tipos de bot√µes, prim√°rio e gen√©rico. O bot√£o prim√°rio(&lt;code&gt;.btn-primary&lt;/code&gt;, &lt;code&gt;.btn-cta&lt;/code&gt;) √© o bot√£o das fun√ß√µes principais da p√°gina, √© o bot√£o de a√ß√£o final e por isso mais importante, enquanto o bot√£o gen√©rico √© utilizado para fun√ß√µes variadas que n√£o sejam a fun√ß√£o principal do usu√°rio, a rela√ß√£o prim√°rio/gen√©rico √© a mesma de salvar/cancelar, avan√ßar/upload photo, etc.&lt;/p&gt;

&lt;p&gt;Alguns projetos acabam necessitando de outros padr√µes no bot√£o como, por exemplo, &lt;code&gt;.btn-secondary&lt;/code&gt; para bot√£o de import√¢ncia secund√°rio, mas ainda sim n√£o gen√©rico, e &lt;code&gt;.btn-error.btn-no.btn-delete&lt;/code&gt; para bot√µes que tenham uma carga negativa (vermelho talvez) clara neles para o usu√°rio saber que pode ser perigosa tal op√ß√£o.&lt;/p&gt;

&lt;p&gt;Geralmente, os bot√µes possuim algumas particularidades comuns em todos os projetos como o .small para uma vers√£o mais minimalista, .full para uma vers√£o de ocupar toda a largura do container. Uma possibilidade √© bot√µes com √≠cones, assim sendo, primeiro √© necess√°rio criar um agrupamento de padr√µes chamados √≠cones, depois voc√™ precisa estudar se o elemento bot√£o precisa sofrer alguma mudan√ßa por ter o √≠cone dentro, caso sim, seria interessante pensar em um padr√£o focado no &amp;#8220;estado&amp;#8221; do bot√£o, podendo ser &lt;code&gt;.btn-icon&lt;/code&gt;, seguindo o padr√£o de &lt;code&gt;.btn-disabled&lt;/code&gt;, &lt;code&gt;.btn-loading&lt;/code&gt;, ou at√© mesmo criar um prefixo que indica as chamadas &lt;strong&gt;&amp;#8220;state rules&amp;#8221;&lt;/strong&gt;, mais difundida atualmente pelo &lt;a href=&#34;http://smacss.com/book/type-state&#34; title=&#34;http://smacss.com/book/type-state&#34; target=&#34;_blank&#34;&gt;SMACSS&lt;/a&gt;, segue um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a.is-disabled { 
  color: gray;
}
.btn.is-disabled { 
  background: gray;
}
&lt;/pre&gt;

&lt;p&gt;Assim, o &lt;code&gt;&amp;quot;is-&amp;quot;&lt;/code&gt; passa a ser um padr√£o que pode ser reutilizado em diversos componentes, trazendo formata√ß√µes diferentes. Ent√£o voc√™ pode criar dois &amp;#8220;states&amp;#8221; se achar interessante no seu projeto, um seria o &lt;code&gt;&amp;quot;is-&amp;quot;&lt;/code&gt; para &lt;code&gt;.is-loading&lt;/code&gt;, &lt;code&gt;.is-active&lt;/code&gt;, &lt;code&gt;.is-disabled&lt;/code&gt;, e criar outro chamado &lt;code&gt;&amp;quot;has-&amp;quot;&lt;/code&gt; como &lt;code&gt;.has-icon&lt;/code&gt;, &lt;code&gt;.has-photo&lt;/code&gt;, &lt;code&gt;.has-offer&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;formul√°rios&#34;&gt;Formul√°rios&lt;/h3&gt;

&lt;p&gt;Formul√°rio, assim como o Grid √© um elemento bastante complexo, pois exige muito estudo e testes. Voc√™ deve estar pensando &amp;#8220;Ah! Estilizar um input √© muito simples&amp;#8221;, e estilizar uma lista de checkbox, radio? E personalizar um select para ele ficar mais interessante no Chrome (atualmente √© horr√≠vel), e voc√™ considerar os novos inputs HTML5 como tel, search, range, e MUITOS outros e tratar de uma forma bacana pro seu app, por isso √© bom voc√™ realizar testes e padr√µes.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/strong&gt; citado no Grid √© um bom amigo para elementos de formul√°rio tamb√©m, pois voc√™ consegue controlar a largura dele de forma segura, visto que elemento como input n√£o ocupar√° a linha toda s√≥ por ser display: block, voc√™ precisar√° definir largura 100%, da√≠ ele somar√° o padding e a borda e quebrar√° seu grid. Mudando o box-sizing, voc√™ consegue dizer que o padding e a borda far√° parte do 100% de largura, ficando bem mais f√°cil, n√£o acha?&lt;/p&gt;

&lt;p&gt;N√£o se esque√ßa que mensagens de erro, sucesso, aten√ß√£o, inputs com erros, labels, precisam ser padronizados e tamb√©m colocados na p√°gina com os padr√µes no agrupamento de formul√°rio. √â bastante importante que esse arquivo seja visto pelos desenvolvedores back-end tamb√©m, para que eles possam at√© j√° utilizar os padr√µes na hora de fazerem testes ou qualquer prototipagem, facilitando na hora da manipula√ß√£o.&lt;/p&gt;

&lt;h2 id=&#34;javascript-n√£o-√©-um-plus&#34;&gt;Javascript n√£o √© um plus&lt;/h2&gt;

&lt;p&gt;Melhor do que a padroniza√ß√£o visual, a padroniza√ß√£o de classes, html e css, √© ter tamb√©m a padroniza√ß√£o do funcionamento e manipula√ß√£o desses componentes. Assim, o desenvolvedor front-end deve se arriscar a padronizar tamb√©m o javascript, permitindo a reutiliza√ß√£o do mesmo e manipulando dentro do padr√£o perseguido. Tanto o Foundation quanto o Bootstrap s√£o excelentes Frameworks, pois al√©m de seus m√≥dulos prontos, possuem intera√ß√µes bem implementadas como modais, tooltips, slideshow, accordion, dropdown, e muitos outros que agregam diretamente no projeto.&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;Nesses 8 anos de experi√™ncia espec√≠ficos de desenvolvimento de aplicativos online, percebi que quanto mais padr√µes forem definidos em equipe, aumentamos mais a produtividade, diminuimos os erros no projeto, nos comunicamos melhor entre setores, perdas e ganhos de pessoas no time n√£o gera uma grande perda de velocidade do time, e que a empresa fica sempre com um legado. A cria√ß√£o de um framework n√£o √© f√°cil, mas √© bastante poss√≠vel e, acredite, divertida.&lt;/p&gt;

&lt;h3 id=&#34;turbinando-seu-framework&#34;&gt;Turbinando seu Framework&lt;/h3&gt;

&lt;p&gt;Separei 3 coisas n√£o comentadas acima que eu fa√ßo quando desenvolvo meus frameworks atualmente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separo meu CSS em arquivos LESS como: reset, base, theme, responsive. Tenho um style.less que compila todos num √∫nico CSS, mas mantendo a organiza√ß√£o do projeto, o que √© muito dif√≠cil de fazer depois que se passa das 3 mil linhas.&lt;/li&gt;
&lt;li&gt;De tanto em tanto tempo dou um 360 em uma dos padr√µes criados&lt;/li&gt;
&lt;li&gt;Apresento meu rascunho de planejamento do padr√£o para o Designer respons√°vel (se houver) para que o mesmo possa alinhar os agrupamentos na hora de criar o &lt;a href=&#34;http://www.onextrapixel.com/2012/09/28/30-handy-and-free-ui-kits-for-web-and-mobile/&#34; title=&#34;http://www.onextrapixel.com/2012/09/28/30-handy-and-free-ui-kits-for-web-and-mobile/&#34; target=&#34;_blank&#34;&gt;UI kit&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;E voc√™ j√° criou o seu pr√≥prio Framework?&lt;/strong&gt; Conte aqui sua experi√™ncia üôÇ&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>