<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Px on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/px/index.xml</link>
    <description>Recent content in Px on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/px/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Qual unidade utilizar ‚Äì Pixel, EM ou REM</title>
      <link>https://tableless.github.io/hugo-public/unidade-pixels-em-rem/</link>
      <pubDate>Mon, 03 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/unidade-pixels-em-rem/</guid>
      <description>

&lt;p&gt;Aqui no Brasil √© muito comum usarmos pixels para defini√ß√£o de tamanho de textos. L√° fora a galera gosta muito de usar EM. Mas qual a diferen√ßa? Por que usar um ou outro?&lt;/p&gt;

&lt;h3 id=&#34;pixels&#34;&gt;Pixels&lt;/h3&gt;

&lt;p&gt;Unidade em pixels √© mais velho que andar para tr√°s. Voc√™ utiliza pixels para definir a largura de um elemento, o tamanho do texto, a espessura da borda e outras coisas.&lt;/p&gt;

&lt;p&gt;Os pixels s√£o utilizados para definir o tamanho dos textos por que √© a medida mais exata que voc√™ pode encontrar. Por n√£o ser uma medida vari√°vel, Pixels s√£o f√°ceis de controlar. F√°ceis de usar. Voc√™ abre seu Photoshop, mede e pronto, passa os valores para CSS facilmente. √â tudo muito eficiente. √â por isso que todo mundo prefere utilizar pixels nos projetos, principalmente aqui no Brasil onde a pregui√ßa impera.&lt;/p&gt;

&lt;p&gt;Antigamente definir unidades de texto em pixels trazia uma desvantagem por causa do Internet Explorer. Quando o usu√°rio tentava mudar o tamanho do texto pelo browser, por algum motivo bizarro o IE n√£o aumentava esse texto pelo simples motivo de que o texto estava definido em pixels. Um problema s√©rio de acessibilidade. √â por isso que muitos devs preferiram durante um tempo definir o tamanho do texto utilizando % (porcentagem) em vez de trabalhar com pixels. O problema √© que trabalhar com porcentagem √© algo muito inst√°vel. Havia diferen√ßas de tamanhos de textos entre os browsers e por causa disso o layout nunca ficava igual.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
  font: normal 16px verdana, arial, tahoma, sans-serif;
}
&lt;/pre&gt;

&lt;p&gt;Agora, definindo a mesma font com um tamanho vari√°vel em porcentagem:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
  font: normal 100% verdana, arial, tahoma, sans-serif;
}
&lt;/pre&gt;

&lt;p&gt;A diferen√ßa de um e para outro √© um pouco √≥bvia. O tamanho padr√£o das font dos browsers geralmente √© de 16px. Logo, se voc√™ define que a fonte ter√° 100% do seu tamanho, voc√™ est√° dizendo que a font ter√° 16px. Claro, se algum dia o browser mudar o tamanho padr√£o de sua font, ela ter√° um novo fator de base.&lt;/p&gt;

&lt;h3 id=&#34;unidades-em-em&#34;&gt;Unidades em EM&lt;/h3&gt;

&lt;p&gt;EM √© uma unidade de medida tipogr√°fica. Seu nome est√° relacionada com a letra ‚ÄúM‚Äù, onde o tamanho base dessa unidade deriva da largura da letra M em mai√∫scula. Dizem que 1em equivale aproximadamente 16 pontos.&lt;/p&gt;

&lt;p&gt;N√£o sou eu que estou falando isso, &lt;a href=‚Äúhttp://en.wikipedia.org/wiki/Em_(typography)‚Äù&gt;√© a Wikipedia&lt;/a&gt;. üòâ&lt;/p&gt;

&lt;p&gt;O problema de utilizar fonts em EM √© que elas s√£o vari√°veis como a porcentagem. Diferentemente da utiliza√ß√£o de pixels, temos que fazer um pouco de matem√°tica para planejar nossas unidades no projeto. N√£o √© nada de outro mundo, ent√£o pare de pregui√ßa.&lt;/p&gt;

&lt;h4 id=&#34;calculando-o-em&#34;&gt;Calculando o EM&lt;/h4&gt;

&lt;p&gt;A f√≥rmula √© f√°cil de entender. Vou manter os termos em ingl√™s para voc√™ entender melhor quando for procurar mais informa√ß√µes sobre este assunto:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;target √∑ context = result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Um exemplo: imagine um t√≠tulo, H1, cujo seu tamanho de texto seja 20px.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1 {
  font: 20px verdana, arial, tahoma, sans-serif;
}
&lt;/pre&gt;

&lt;p&gt;Ent√£o o target (que √© o elemento que queremos modificar) √© 20px. Nesse caso o BODY √© o pai do nosso H1. Logo, valor da font do body √© o context (contexto), que como j√° dissemos tem o valor padr√£o de 16px. Logo 20 √∑ 16 = 1.25.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1 {
  font: 1.25em verdana, arial, tahoma, sans-serif;
}
&lt;/pre&gt;

&lt;p&gt;Se este H1 estiver dentro de um outro elemento, tipo um div, o valor de context agora √© o tamanho da font do div. Tenha como exemplo esse HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;Um t&amp;iacute;tulo bacana&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Um texto grande e bacana para fazermos par&amp;aacute;grafos.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O CSS:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
    font: 30px verdana, arial, tahoma, sans-serif;
}

h1 {
    font-size: 20px;
}

p {
    font-size: 12px;
}

&lt;/pre&gt;

&lt;p&gt;Vamos passar tudo isso para EM. Primeiro o par√°grafo:&lt;/p&gt;

&lt;p&gt;12px (target) √∑ 30px (context [div]) = 0.4em&lt;/p&gt;

&lt;p&gt;T√≠tulo:&lt;/p&gt;

&lt;p&gt;20px (target) √∑ 30px (context [div]) = 0.67em&lt;/p&gt;

&lt;p&gt;Div:&lt;/p&gt;

&lt;p&gt;30px (target) √∑ 16px (context [body]) = 1.88em&lt;/p&gt;

&lt;p&gt;Simples, ahn?&lt;/p&gt;

&lt;p&gt;Isso √© √∫til por qu√™?&lt;/p&gt;

&lt;p&gt;Imagine que voc√™ fa√ßa um site mobile ou um site para grandes telas. Em vez de voc√™ mudar as fonts de cada elemento, voc√™ pode simplesmente muda o valor da font do target, ou seja, do body!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {font: 100% verdana, arial, tahoma, sans-serif;}

div {
    font-size: 1.88em;
}

h1 {
    font-size: 0.67em;
}

p {
    font-size: 0.4em;
}
&lt;/pre&gt;

&lt;p&gt;Mudando o valor de porcentagem da font do body, voc√™ consegue mudar proporcionalmente a font de todos os outros elementos.&lt;/p&gt;

&lt;h3 id=&#34;mas-d√°-trabalho&#34;&gt;Mas d√° trabalho&lt;/h3&gt;

&lt;p&gt;Realmente‚Ä¶ ficar calculando target e context para cada um dos elementos √© muito chato. Seria interessante se o valor do context fosse sempre o mesmo, n√£o √©? Pois √©‚Ä¶ J√° pensaram nisso e fizeram uma unidade chamada REM.&lt;/p&gt;

&lt;p&gt;A REM sempre ter√° o valor de contexto do ROOT (√© isso que significa o R do REM), ou seja, sempre o body‚Ä¶ Os valores do nosso exemplo acima ficaria assim se referenciando pelo body e n√£o pelo DIV. Logo os valores ficam como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {font: 100% verdana, arial, tahoma, sans-serif;}

div {
    font-size: 1.88rem;
}

h1 {
    font-size: 1.25rem;
}

p {
    font-size: 0.75rem;
}
&lt;/pre&gt;

&lt;p&gt;Infelizmente isso n√£o √© para todos os browsers‚Ä¶ Firefox 3.6+, Chrome, Safari 5, e IE9 suportam a unidade REM. Mas e os caras que n√£o suportam? Bom, use a font em PX. C√° entre n√≥s, dessa lista de browsers s√≥ faltou o IE8, j√° que o IE7 e 6 j√° foram embora. Se voc√™ n√£o suportar em seus projetos o IE8, pode ignorar essa t√©cnica.&lt;/p&gt;

&lt;p&gt;Basta definir os dois valores, tanto em REM quanto em PIXELS. Lembre-se de sempre colocar a linha de PIXELS antes da REM. Assim, os browsers que entendem REM v√£o sobreescrever o valor em PIXELS e os browsers que n√£o conhecem REM v√£o ignorar essa linha.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {font: 100% verdana, arial, tahoma, sans-serif;}

div {
    font-size: 30px;
    font-size: 1.88rem;
}

h1 {
    font-size: 20px;
    font-size: 1.25rem;
}

p {
    font-size: 12px;
    font-size: 0.75rem;
}
&lt;/pre&gt;

&lt;p&gt;Decidir qual dessas unidades usar n√£o pode ser caso de d√∫vidas e atrasos. Saiba que pixels s√£o mais precisos entre os browsers, mas menos flex√≠veis. Enquanto o REM/EM s√£o mais flex√≠veis, nos d√° a vantagem da acessibilidade, mas envolve um pouco de matem√°tica. Mesmo assim utilizar REM tem sido uma √≥tima pr√°tica e n√£o est√° trazendo tantos problemas crossbrowser.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>