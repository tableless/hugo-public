<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React.Js on Tableless</title>
    <link>http://tableless.com.br/tags/react.js/index.xml</link>
    <description>Recent content in React.Js on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/react.js/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ReactJS 101</title>
      <link>http://tableless.com.br/reactjs-101/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/reactjs-101/</guid>
      <description>

&lt;h4 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h4&gt;

&lt;p&gt;ReactJS é a biblioteca criada pelo Facebook para criação de interfaces. Pensando no mundo &lt;strong&gt;MV&lt;/strong&gt;* qual vivenciamos hoje, este seria o &lt;strong&gt;V&lt;/strong&gt; (view).&lt;/p&gt;

&lt;p&gt;Através de uma api simples qual previlegia o uso do javascript e com uma performance acima da apresentada pelos seus concorrentes, o ReactJS vem ganhando cada dia mais adeptos.&lt;/p&gt;

&lt;h4 id=&#34;building-blocks&#34;&gt;Building Blocks&lt;/h4&gt;

&lt;p&gt;Fortemente inspirado pelo conceito de componentes, trazendo duas grandes características que o desenvolvedor deve se concentrar: &lt;em&gt;Components&lt;/em&gt; e&lt;em&gt;Elements&lt;/em&gt;.&lt;/p&gt;

&lt;h5 id=&#34;components&#34;&gt;Components&lt;/h5&gt;

&lt;p&gt;É o template para criação de elementos. Fazendo um paralelo com a web atual, exemplos de components são &lt;em&gt;div&lt;/em&gt;, &lt;em&gt;button&lt;/em&gt;, &lt;em&gt;label&lt;/em&gt; entre outros.&lt;/p&gt;

&lt;h5 id=&#34;elements&#34;&gt;Elements&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;Element&lt;/em&gt; é a instância de um &lt;em&gt;component&lt;/em&gt;. Por exemplo quando inserimos um &lt;em&gt;button&lt;/em&gt; em uma página HTML, este elemento é a materialização/instância de um componente no DOM.&lt;/p&gt;

&lt;p&gt;Complicado?&lt;/p&gt;

&lt;p&gt;Vamos ver como funciona na prática:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;//cria elemento
var customDiv = React.createElement(&#39;div&#39;);

//renderiza elemento
ReactDOM.render(customDiv, document.getElementById(&#39;container&#39;));
&lt;/pre&gt;

&lt;p&gt;O código acima cria um &lt;em&gt;element&lt;/em&gt; baseado no &lt;em&gt;component&lt;/em&gt; &lt;code&gt;div&lt;/code&gt; e renderiza o mesmo no DOM.&lt;/p&gt;

&lt;p&gt;Legal! Mas usar diretamente o HTML não é mais eficiente?&lt;/p&gt;

&lt;p&gt;A resposta: normalmente não.&lt;/p&gt;

&lt;p&gt;E eis que lhes apresento o &lt;em&gt;Virtual DOM&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;virtual-dom&#34;&gt;Virtual DOM&lt;/h4&gt;

&lt;p&gt;Como todos sabem a manipulação de DOM além de não ser uma das coisas mais simples no mundo web, ainda tem um grande impacto na performance de nossas aplicações.&lt;/p&gt;

&lt;p&gt;E com isso em mente os engenheiros do facebook/instagram criaram o &lt;em&gt;virtual DOM&lt;/em&gt; que na prática é a representação do DOM em memória. Deste modo, todos os &lt;em&gt;elements&lt;/em&gt; que criamos utilizando React.createElement são criados e mantidos nesse ambiente virtual antes de serem renderizados no DOM original.&lt;/p&gt;

&lt;p&gt;A mágica acontece de verdade nas atualizações. Imagine o seguinte cenário: numa tela HTML temos um campo de texto do tipo numeric e um botão de adicionar. Toda vez que clicamos no botão adiciona em 1 o valor do campo de texto.&lt;/p&gt;

&lt;p&gt;Uma atividade super simples como adicionar um handler para o evento de click do botão e dentro do handler pegar o campo de texto através da api de DOM e somar 1 ao value do mesmo. Tudo lindo, mas tem alguns problemas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;adicionar e manter event handlers nos &lt;em&gt;elements&lt;/em&gt; do DOM consomem bastante memória.&lt;/li&gt;
&lt;li&gt;modificar o conteúdo da página gera reflow (nova renderização do _element_modificado e seus filhos).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Agora imagine tudo isso acontecendo em uma página com centenas ou talvez milhares de &lt;em&gt;elements&lt;/em&gt; no DOM. Não é uma experiência muito boa.&lt;/p&gt;

&lt;p&gt;Com o &lt;em&gt;virtual DOM&lt;/em&gt; esses problemas são minimizados com a técnica conhecida como &amp;#8220;o menos é mais&amp;#8221;, ou seja, toda vez que algo é alterado nos &lt;em&gt;elements&lt;/em&gt; que foram criados através do método React.createElement. O ReactJS renderiza esse conteúdo no &lt;em&gt;virtual DOM&lt;/em&gt; e através de um algoritmo super otimizado calcula a diferença entre o DOM atual e o DOM com as alterações e são essas diferenças que são renderizadas no DOM original. E desta forma causa o mínimo de impacto possível fazendo com que nossas páginas estejam sempre responsivas e rápidas para o usuário.&lt;/p&gt;

&lt;h4 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h4&gt;

&lt;p&gt;ReactJS é uma nova opção para criação de interfaces focada na simplidade de desenvolvimento e alta performance. Com baixo consumo de memória e um gerenciamento eficiente do DOM esta biblioteca vem ganhando o mundo.&lt;/p&gt;

&lt;p&gt;Por hoje é isso!&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado dessa introdução e até a próxima!&lt;/p&gt;

&lt;h5 id=&#34;links-de-referência&#34;&gt;Links de referência:&lt;/h5&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&#34; target=&#34;_blank&#34;&gt;DOM (Document Object Model)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://developers.google.com/speed/articles/reflow&#34; target=&#34;_blank&#34;&gt;Reflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://facebook.github.io/react/docs/getting-started.html&#34; target=&#34;_blank&#34;&gt;ReactJS&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>