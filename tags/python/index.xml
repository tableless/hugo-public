<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Tableless</title>
    <link>http://tableless.com.br/tags/python/index.xml</link>
    <description>Recent content in Python on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Por que Python?</title>
      <link>http://tableless.com.br/por-que-python/</link>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/por-que-python/</guid>
      <description>

&lt;p&gt;Eu sou apaixonado por &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;. Muito. Daquele tipo que fala de Python sempre que pode. E uma pergunta que sempre me fazem √©: por qu√™? Vou tentar fazer uma lista dos motivos mais relevantes:&lt;/p&gt;

&lt;h2 id=&#34;1-√©-muito-bom-escrever-c√≥digo-python&#34;&gt;1. √â muito bom escrever c√≥digo Python&lt;/h2&gt;

&lt;p&gt;Geralmente, quando algu√©m cria uma linguagem de programa√ß√£o, tem em vista um objetivo. Por exemplo,¬†Lisp foi escrita para programa√ß√£o funcional. Java foi escrita para que o mesmo c√≥digo pudesse rodar em qualquer lugar. PHP foi criada para construir p√°ginas web. E Python foi criada para ser produtiva e f√°cil de escrever.&lt;/p&gt;

&lt;p&gt;Um programador experiente aprende a sintaxe do Python em algumas poucas horas. O jeito de escrever faz sentido.&lt;/p&gt;

&lt;p&gt;Veja, por exemplo, essa fun√ß√£o para calcular um n√∫mero de &lt;a href=&#34;https://pt.wikipedia.org/wiki/Sequ%C3%AAncia_de_Fibonacci&#34;&gt;Fibonacci&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;def fib(n):
    if n&amp;lt;3:
        return n
    return fib(n-1) + fib(n-2)&lt;/pre&gt;

&lt;p&gt;Note como a sintaxe √© simples. Mesmo nas decis√µes de design que s√£o &amp;#8220;pouco ortodoxas&amp;#8221;, como os blocos baseados na indenta√ß√£o, a decis√£o foi tomada pensando em produtividade. O modelo de blocos do Python faz com que voc√™ precise digitar menos. Al√©m disso, √© imposs√≠vel escrever c√≥digo n√£o indentado em Python.&lt;/p&gt;

&lt;p&gt;Veja nesse outro exemplo, a fun√ß√£o de Fibonacci em uma vers√£o &lt;a href=&#34;https://en.wikipedia.org/wiki/Memoization&#34;&gt;memoized&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;memo = {0:0, 1:1}

def fib(n):
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Reparou como √© simples? Ao trabalhar com Python, a linguagem nunca est√° entre voc√™ e seu problema. Voc√™ pode gastar seu tempo com a l√≥gica de programa√ß√£o, que √© o que realmente importa, e n√£o com especificidades da linguagem que voc√™ est√° usando.&lt;/p&gt;

&lt;h2 id=&#34;2-organizar-um-projeto-python-√©-muito-f√°cil&#34;&gt;2.¬†Organizar um projeto Python √© muito f√°cil&lt;/h2&gt;

&lt;p&gt;Vamos colocar nossa fun√ß√£o de Fibonacci e salvar num arquivo, fib.py, incluindo um pouquinho de documenta√ß√£o. Chamamos cada arquivo Python de m√≥dulo:&lt;/p&gt;

&lt;pre&gt;&#39;&#39;&#39;Fibonacci function, memoized for better performance.&#39;&#39;&#39;
memo = {0:0, 1:1}

def fib(n):
    &#39;&#39;&#39;Returns the nth Fibonacci number.&#39;&#39;&#39;
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Agora vamos importar esse arquivo no console do Python, e veja o que d√° para fazer:&lt;/p&gt;

&lt;div style=&#34;width: 490px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://elcio.com.br/wp-content/uploads/2015/09/fib.gif&#34; alt=&#34;&#34; width=&#34;480&#34; height=&#34;267&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Executando fib.py e ajuda.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;√â como PHPDoc ou Javadoc, mas completamente nativo, e com uma sintaxe muito simples. E tudo o que voc√™ precisa para ler a documenta√ß√£o √© o pr√≥prio Python.&lt;/p&gt;

&lt;h2 id=&#34;3-o-ecossistema-python-√©-fant√°stico&#34;&gt;3. O ecossistema Python √© fant√°stico&lt;/h2&gt;

&lt;p&gt;Come√ßando pela pr√≥pria linguagem, que vem com uma excelente &lt;a href=&#34;https://docs.python.org/3/library/&#34;&gt;biblioteca padr√£o&lt;/a&gt;. Essa biblioteca √© bastante extensa e possui excelentes m√≥dulos, bem documentados e f√°ceis de usar. Por exemplo, digamos que voc√™ queira baixar o c√≥digo fonte desse artigo e gerar um arquivo GZip com ele, veja como √© f√°cil:&lt;/p&gt;

&lt;pre&gt;import urllib
import gzip
html=urllib.urlopen(&#39;http://tableless.com.br/por-que-python/&#39;).read()
gzfile=gzip.open(&#39;por-que-python.html.gz&#39;,&#39;w&#39;)
gzfile.write(html)&lt;/pre&gt;

&lt;p&gt;Usamos os m√≥dulos urllib e gzip.¬†Entre os recursos fornecidos pelos m√≥dulos que j√° vem com o Python, posso citar o controle de threads e processamento paralelo, a cria√ß√£o de webservices, bibliotecas para sockets, http, ftp, e-mail, a leitura e escrita de XML, JSON, CSV, o acesso a recursos do sistema operacional, matem√°tica e estat√≠stica, criptografia, manipula√ß√£o de arquivos de √°udio, testes automatizados, etc.&lt;/p&gt;

&lt;p&gt;Como¬†√© f√°cil escrever c√≥digo bom e bem documentado, a comunidade Python tem feito um excelente em fornecer m√≥dulos para praticamente tudo o que voc√™ precisar fazer. Voc√™ pode encontrar, no &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;Python Package Index&lt;/a&gt;, milhares de m√≥dulos prontos para coisas como ler e escrever arquivos Excel, trabalhar com imagens, acessar bancos de dados os mais diversos, trabalhar com automa√ß√£o residencial, enviar SMS, integrar seu software ao Gmail, falar com servi√ßos de VoIP, conectar-se a redes sociais, criar um servidor de e-mails, desenvolver jogos 3D, e uma infinidade de outros recursos.&lt;/p&gt;

&lt;h3 id=&#34;e-tem-mais-8230&#34;&gt;E tem mais&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Se voc√™ n√£o programa em Python, espero t√™-lo deixado pelo menos um pouquinho curioso. No pr√≥ximo artigo, vamos falar um pouco mais da linguagem, mostrando algumas caracter√≠sticas da sintaxe e dos tipos de dados que a tornam t√£o interessante. At√© l√°, fique √† vontade nos coment√°rios. Sugest√µes, d√∫vidas, cr√≠ticas e opini√µes s√£o muito bem vindas e v√£o me ajudar a preparar os pr√≥ximos artigos.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando comandos de atalhos no terminal</title>
      <link>http://tableless.com.br/criando-comandos-de-atalhos-no-terminal/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-comandos-de-atalhos-no-terminal/</guid>
      <description>

&lt;p&gt;Esta dica pode ser utilizada em qualquer distribui√ß√£o Linux ou Mac OS X.&lt;/p&gt;

&lt;p&gt;Se voc√™ est√° cansado de digitar comandos gigantescos no terminal, aqui vai uma dica: crie atalhos para os comandos no seu terminal para melhorar a produtividade. Uma dica simples mas √© muito util.&lt;/p&gt;

&lt;p&gt;Para rodar um projeto python/django, geralmente executamos este comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;python manage.py runserver
&lt;/pre&gt;

&lt;p&gt;Com o comando de atalho criado, execute-o desta maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;h2 id=&#34;criando-os-atalhos&#34;&gt;Criando os atalhos&lt;/h2&gt;

&lt;p&gt;Para come√ßar a criar seus atalhos, abra o arquivo &lt;strong&gt;.profile&lt;/strong&gt; ou &lt;strong&gt;.bashrc&lt;/strong&gt; que ficam na raiz da pasta do usu√°rio. Em seguida abra-os em seu editor de prefer√™ncia.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sublime ~/.bashrc&lt;/pre&gt;

&lt;p&gt;Agora adicione a fun√ß√£o no final do arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run() {
    echo &#34;executando... python manage.py runserver
    python manage.py runserver
}
&lt;/pre&gt;

&lt;p&gt;Pronto! Agora basta atualizar o arquivo para que o terminal o reconhe√ßa e entenda os novos comandos. Fa√ßa isso assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;source ~/.bashrc&lt;/pre&gt;

&lt;p&gt;Ap√≥s a execu√ß√£o do comando acima, a func√£o criada j√° est√° dispon√≠vel no terminal, digite o comando abaixo para testar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;p&gt;Podemos fazer fun√ß√µes mais elaboradas, imagine que voc√™ precisa rodar diversos projetos e cada um em uma porta diferente, ent√£o veja como fazer:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run() {
    if [ &#34;$1&#34; != &#39;&#39; ]; then
        python manage.py runserver &#34;0.0.0.0:$1&#34;
    else
        python manage.py runserver &#34;0.0.0.0:8000&#34;
    fi
}
&lt;/pre&gt;

&lt;p&gt;Outra dica √© utilizar argumentos em suas fun√ß√µes. No caso da fun√ß√£o acima, $1 √© um argumento que √© passado ap√≥s o comando que define em qual porta ir√° rodar o projeto. Se n√£o for passado nenhum valor, ele ir√° rodar na porta padr√£o que foi definida como 8000.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run 8001&lt;/pre&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run 8002&lt;/pre&gt;

&lt;p&gt;√â poss√≠vel passar diversos argumentos, veja um exemplo na fun√ß√£o:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;teste(){
    echo $1 $2;
}
&lt;/pre&gt;

&lt;p&gt;Os argumentos veem em seguida ao comando sempre com espa√ßos entre eles, como no exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;teste Willem Allan&lt;/pre&gt;

&lt;p&gt;Retorno do comando executado ser√°:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Willem Allan&lt;/pre&gt;

&lt;p&gt;Logo abaixo seguem algumas fun√ß√µes que eu utilizo no meu .bashrc üòâ&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;# git commit
cm() {
    git commit -m &#34;echo $1&#34; -a
}

# git add all &amp; commit
cma() {
    git add .
    git commit -m &#34;echo $1&#34; -a
}

# python - run django
run() {
    if [ &#34;$1&#34; != &#39;&#39; ]; then
        python manage.py runserver &#34;0.0.0.0:$1&#34;
    else
        python manage.py runserver &#34;0.0.0.0:8000&#34;
    fi
}

# python - migrate
migrate() {
    echo &#34;executando... python manage.py migrate&#34;
    python manage.py migrate
}

# python - auto
auto() {
    echo &#34;executando... python manage.py schemamigration $1 --auto&#34;
    python manage.py schemamigration $1 --auto
}

# python - initial
initial() {
    echo &#34;executando... python manage.py schemamigration $1 --initial&#34;
    python manage.py schemamigration $1 --initial
}
&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>