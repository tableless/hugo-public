<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Twitter on Tableless</title>
    <link>http://tableless.com.br/tags/twitter/index.xml</link>
    <description>Recent content in Twitter on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/twitter/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Por que Desenvolvedores/Programadores usam Twitter?</title>
      <link>http://tableless.com.br/por-que-desenvolvedoresprogramadores-usam-twitter/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/por-que-desenvolvedoresprogramadores-usam-twitter/</guid>
      <description>

&lt;h3 id=&#34;graf-graf-h3&#34;&gt;{.graf.graf&amp;ndash;h3}&lt;/h3&gt;

&lt;p class=&#34;graf graf--p graf--hasDropCapModel graf--hasDropCap&#34;&gt;
  &lt;span class=&#34;graf-dropCap&#34;&gt;N&lt;/span&gt;os últimos 4 meses a comunidade &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://twitter.com/javabahia&#34; target=&#34;_blank&#34;&gt;Java Bahia&lt;/a&gt; me fez andar por varias universidades/faculdades e em todas elas perguntamos (não andei sozinho por aí) durante as palestras quem tinha costume de usar o Twitter. Infelizmente não tive o insight de fazer uma estatística disso, mas deu para notar que poucos desenvolvedores/programadores possuem o costume de frequentar a rede social.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Muito provavelmente essa galera passou pela mesma experiência que eu tive nas minhas duas primeiras tentativas. Acredito que você assim como eu, criou uma conta no Twitter seguindo o tutorial padrão que lá no finalzinho te faz aquela pergunta marota pedindo autorização para que ele possa selecionar pessoas que você vai acabar seguindo com base na sua lista de e-mail.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Se você tá começando na área ou tem pouco contato com desenvolvedores por meio da internet, será mesmo que você conhece pessoas interessantes na área que vão lhe trazer novidades no lugar daquelas piadinhas que conseguimos visualizar internet a fora?
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Essa é uma pergunta que você tem que si responder. Mas pela experiência e conversas que tive acredito que não, aí chegamos na segunda resposta mais falada nesses 4 meses — “Já tentei usar o Twitter, não consegui ver coisa útil nele e larguei de mão”.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Infelizmente muita gente está por fora dos benefícios que conseguimos em nossas carreiras por simplesmente usar um pouco do Twitter no nosso dia a dia. E com esse post espero conseguir te guiar a dar os primeiros passos.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Por que Desenvolvedores/Programadores usam Twitter?&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Essa é uma pergunta que na minha visão tem uma resposta muito simples. Usamos o Twitter para nos conectar com gente que até nunca vimos na vida e que possuem conhecimento de alguma tecnologia que gostamos, assim passamos a trocar feedbacks de projetos e ficamos por dentro do que está valendo a pena olhar no momento. Só de seguir as pessoas que possuem influência na sua área de estudo isso já lhe faz poupar um tempo absurdo pulando assuntos irrelevantes.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Mas a parte mais legal do Twitter é que você consegue se sentir dentro de um grupo quando aquele brodinho que parece inalcançável te responde uma dúvida, que muitas vezes na sua cabeça é tão boba, daí você não quer perguntar e fica impedido de ir adiante porque você não fez a maldita pergunta. Mas de uma maneira você vai lá e faz a pergunta, passa um tempo a pessoa te responde de um jeito que você consegue entender e se não entender, não precisa ficar acanhado basta perguntar de novo!
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Muitas vezes lanço perguntas sem uma direção específica somente com algumas #hashtags e quando menos espero &lt;em class=&#34;markup--em markup--p-em&#34;&gt;BOOM! &lt;/em&gt;alguém me responde. Imediatamente começo a trocar algumas ideias e questionamentos com essa pessoa, pronto criei mais um network com alguém que sei lá… está no Japão.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Tenho usado o Twitter desde 2013 e agora mais do que nunca estou buscando criar conexões com as pessoas para saber como elas “codam”, que tipo de projetos elas curtem e com o que elas andam mexendo. Para que assim eu possa ter ideias e vislumbrar novidades para me atualizar.
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Mas e aí… Quem eu posso começar seguindo?&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Tenho muitas indicações para dar e infelizmente não tenho como falar um pouco sobre cada um, tenham um pouco de curiosidade e visitem os perfis dessas pessoas e analisam o que elas publicam. Lembrando que a ordem aqui não significa nada, eu só tinha que começar de alguma maneira
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Povão do Front-end:&lt;/strong&gt;&lt;br /&gt; Maria Clara — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @olarclara&#34; href=&#34;http://twitter.com/olarclara&#34; target=&#34;_blank&#34;&gt;@olarclara&lt;/a&gt;&lt;br /&gt; Beto Muniz — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @obetomuniz&#34; href=&#34;http://twitter.com/obetomuniz&#34; target=&#34;_blank&#34;&gt;@obetomuniz&lt;/a&gt;&lt;br /&gt; Wilson Mendes — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @willmendesneto&#34; href=&#34;http://twitter.com/willmendesneto&#34; target=&#34;_blank&#34;&gt;@willmendesneto&lt;/a&gt;&lt;br /&gt; Felipe Fialho — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @LFeh&#34; href=&#34;http://twitter.com/LFeh&#34; target=&#34;_blank&#34;&gt;@LFeh&lt;/a&gt;&lt;br /&gt; Joselito Junior — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @joselitojunior1&#34; href=&#34;http://twitter.com/joselitojunior1&#34; target=&#34;_blank&#34;&gt;@joselitojunior1&lt;/a&gt;&lt;br /&gt; Willian Justen — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @Willian_justen&#34; href=&#34;http://twitter.com/Willian_justen&#34; target=&#34;_blank&#34;&gt;@Willian_justen&lt;/a&gt;&lt;br /&gt; Felipe Nascimento — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @felipenmoura&#34; href=&#34;http://twitter.com/felipenmoura&#34; target=&#34;_blank&#34;&gt;@felipenmoura&lt;/a&gt;&lt;br /&gt; Elvis Detona — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @elvisdetona&#34; href=&#34;http://twitter.com/elvisdetona&#34; target=&#34;_blank&#34;&gt;@elvisdetona&lt;/a&gt;&lt;br /&gt; Diego Eis — &lt;a href=&#34;https://twitter.com/diegoeis&#34;&gt;@diegoeis&lt;/a&gt;&lt;br /&gt; Fábio Vedovelli &amp;#8211; &lt;strong&gt;&lt;a class=&#34;ProfileHeaderCard-screennameLink u-linkComplex js-nav&#34; href=&#34;https://twitter.com/vedovelli&#34;&gt;@&lt;span class=&#34;u-linkComplex-target&#34;&gt;vedovelli&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Povão do Android:&lt;/strong&gt;&lt;br /&gt; Marcello Galhardo — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @MarcelloGalhard&#34; href=&#34;http://twitter.com/MarcelloGalhard&#34; target=&#34;_blank&#34;&gt;@MarcelloGalhard&lt;/a&gt;&lt;br /&gt; Paula Rosa — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @_paulacr&#34; href=&#34;http://twitter.com/_paulacr&#34; target=&#34;_blank&#34;&gt;@_paulacr&lt;/a&gt;&lt;br /&gt; Juliana Chahoud — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @jchahoud&#34; href=&#34;http://twitter.com/jchahoud&#34; target=&#34;_blank&#34;&gt;@jchahoud&lt;/a&gt;&lt;br /&gt; Nelson Glauber — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @nglauber&#34; href=&#34;http://twitter.com/nglauber&#34; target=&#34;_blank&#34;&gt;@nglauber&lt;/a&gt;&lt;br /&gt; Walmyr Carvalho — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @walmyrcarvalho&#34; href=&#34;http://twitter.com/walmyrcarvalho&#34; target=&#34;_blank&#34;&gt;@walmyrcarvalho&lt;/a&gt;&lt;br /&gt; Marcelo Quinta — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @mrquinta&#34; href=&#34;http://twitter.com/mrquinta&#34; target=&#34;_blank&#34;&gt;@mrquinta&lt;/a&gt;&lt;br /&gt; Rodrigo Sicarelli — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @rsicarelli&#34; href=&#34;http://twitter.com/rsicarelli&#34; target=&#34;_blank&#34;&gt;@rsicarelli&lt;/a&gt;&lt;br /&gt; Ubiratan Soares — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @ubiratanfsoares&#34; href=&#34;http://twitter.com/ubiratanfsoares&#34; target=&#34;_blank&#34;&gt;@ubiratanfsoares&lt;/a&gt;&lt;br /&gt; Eduardo Cucharro — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @eduardocucharro&#34; href=&#34;http://twitter.com/eduardocucharro&#34; target=&#34;_blank&#34;&gt;@eduardocucharro&lt;/a&gt;&lt;br /&gt; Lucio Maciel — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @luciofm&#34; href=&#34;http://twitter.com/luciofm&#34; target=&#34;_blank&#34;&gt;@luciofm&lt;/a&gt;&lt;br /&gt; Neto Marin — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @netomarin&#34; href=&#34;http://twitter.com/netomarin&#34; target=&#34;_blank&#34;&gt;@netomarin&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Povão do Java:&lt;/strong&gt;&lt;br /&gt; Daniel Cunha — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @dvlc_&#34; href=&#34;http://twitter.com/dvlc_&#34; target=&#34;_blank&#34;&gt;@dvlc_&lt;/a&gt;&lt;br /&gt; Eder Ignatowicz — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @ederign&#34; href=&#34;http://twitter.com/ederign&#34; target=&#34;_blank&#34;&gt;@ederign&lt;/a&gt;&lt;br /&gt; Otávio Santana — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @otaviojava&#34; href=&#34;http://twitter.com/otaviojava&#34; target=&#34;_blank&#34;&gt;@otaviojava&lt;/a&gt;&lt;br /&gt; Leonardo Rocha Lima — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @leomrlima&#34; href=&#34;http://twitter.com/leomrlima&#34; target=&#34;_blank&#34;&gt;@leomrlima&lt;/a&gt;&lt;br /&gt; Java — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @java&#34; href=&#34;http://twitter.com/java&#34; target=&#34;_blank&#34;&gt;@java&lt;/a&gt;&lt;br /&gt; Vinicius Senger — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @vsenger&#34; href=&#34;http://twitter.com/vsenger&#34; target=&#34;_blank&#34;&gt;@vsenger&lt;/a&gt;&lt;br /&gt; Fabio Velloso — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @fabiovelloso&#34; href=&#34;http://twitter.com/fabiovelloso&#34; target=&#34;_blank&#34;&gt;@fabiovelloso&lt;/a&gt;&lt;br /&gt; Michael Nascimento — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @mr__m&#34; href=&#34;http://twitter.com/mr__m&#34; target=&#34;_blank&#34;&gt;@mr__m&lt;/a&gt;&lt;br /&gt; Michel Graciano — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @mgraciano&#34; href=&#34;http://twitter.com/mgraciano&#34; target=&#34;_blank&#34;&gt;@mgraciano&lt;/a&gt;&lt;br /&gt; Edson Yanaga — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @yanaga&#34; href=&#34;http://twitter.com/yanaga&#34; target=&#34;_blank&#34;&gt;@yanaga&lt;/a&gt;&lt;br /&gt; Marcelo de Castro — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @mcastroinfo&#34; href=&#34;http://twitter.com/mcastroinfo&#34; target=&#34;_blank&#34;&gt;@mcastroinfo&lt;/a&gt;&lt;br /&gt; Yara M H Senger — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @yarasenger&#34; href=&#34;http://twitter.com/yarasenger&#34; target=&#34;_blank&#34;&gt;@yarasenger&lt;/a&gt;&lt;br /&gt; Mauricio Leal — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @maltron&#34; href=&#34;http://twitter.com/maltron&#34; target=&#34;_blank&#34;&gt;@maltron&lt;/a&gt;&lt;br /&gt; Loiane Groner — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @loiane&#34; href=&#34;http://twitter.com/loiane&#34; target=&#34;_blank&#34;&gt;@loiane&lt;/a&gt;&lt;br /&gt; Bruno Souza — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @brjavaman&#34; href=&#34;http://twitter.com/brjavaman&#34; target=&#34;_blank&#34;&gt;@brjavaman&lt;/a&gt;&lt;br /&gt; Bruno Borges — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @brunoborges&#34; href=&#34;http://twitter.com/brunoborges&#34; target=&#34;_blank&#34;&gt;@brunoborges&lt;/a&gt;&lt;br /&gt; Rafael Ponte — &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;Twitter profile for @rponte&#34; href=&#34;http://twitter.com/rponte&#34; target=&#34;_blank&#34;&gt;@rponte&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&#34;graf graf--p&#34;&gt;
  Então até pra escrever esse post fui solicitando ajuda no Twitter e aí nasceu essa lista bem recheada para vocês. E como dica final tentem criar lista no Twitter para organizar melhor os assuntos (vou montar um outro texto explicando como tirar proveito disso) e também uma ferramenta muito bacana chamada &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;https://tweetdeck.twitter.com/&#34; target=&#34;_blank&#34;&gt;Tweetdeck &lt;/a&gt;que tem me ajudado bastante.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fazendo a animação do coração de like do Twitter</title>
      <link>http://tableless.com.br/fazendo-a-animacao-do-coracao-de-like-do-twitter/</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/fazendo-a-animacao-do-coracao-de-like-do-twitter/</guid>
      <description>&lt;p&gt;Quando o Twitter colocou uma animação no coração de Like na versão web, eu fiquei me perguntando como fazer aquela animação. De cara, parece ser bastante simples, e é. Mas é um detalhe que faz a diferença na interface para quem usa a rede social com frequência. Fiz uma versão mais simples. Segue abaixo:&lt;/p&gt;

&lt;p&gt;Antes de olhar o código deles pra pesquisar como foi feito, fiquei pensando em uma série de formas para fazer isso aí. Primeiro, pensei em ter várias imagens, e aí usar &lt;code&gt;keyframes&lt;/code&gt; pra alterar esse background do elemento a cada X tempo de milésimos de segundos. Depois evolui o pensamento para fazer apenas uma imagem, com todos os &amp;#8220;frames&amp;#8221; da animação. Muito mais inteligente, claro&amp;#8230; lembra dos Sprites&amp;#8230; Pois é. Com essa imagem eu poderia simplesmente mover o background com um transition simples do CSS. A imagem em questão é essa aqui:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/web_heart_animation.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/web_heart_animation.png&#34; alt=&#34;web_heart_animation&#34; style=&#34;width: 100%; height: auto;&#34; class=&#34;alignnone size-full wp-image-52833&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mas a coisa não funcionou muito bem. Ficou mais ou menos assim:&lt;/p&gt;

&lt;p&gt;Perceba que não houve o efeito de animação como eu estava esperando. Mas tem um truque: quando utilizamos a propriedade &lt;code&gt;transition&lt;/code&gt;, geralmente usamos os valores &lt;code&gt;linear&lt;/code&gt;, &lt;code&gt;ease-in&lt;/code&gt;, &lt;code&gt;ease-out&lt;/code&gt; e etc&amp;#8230; Essas funções definem como os valores intermediários de uma transição serão calculados. Eles pegam um valor inicial e calculam como a transição vai ocorrer até o valor final.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://developer.mozilla.org/files/3426/cubic-bezier,ease-in.png&#34; alt=&#34;&#34; /&gt;&lt;img src=&#34;https://mdn.mozillademos.org/files/3429/cubic-bezier,ease.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dá uma olhada nessa &lt;a href=&#34;http://easings.net&#34;&gt;tabela de referência&lt;/a&gt; de como as transições funcionam.&lt;/p&gt;

&lt;p&gt;Há um valor que eu não conhecia até então, chamado &lt;code&gt;steps()&lt;/code&gt;. A representação da transição do steps é assim:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mdn.mozillademos.org/files/3437/steps(4,end).png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;steps()&lt;/code&gt;, ao contrário dos outros valores, não determina uma transição contínua, mas ele separa os valores intermediários em frames estáticos. Veja um exemplo básico abaixo. Um usando linear e outro usando steps().&lt;/p&gt;

&lt;p&gt;Esse efeito seria o mesmo efeito que eu conseguiria se tivesse feito manualmente a primeira ideia de separar os frames da animação em várias imagens&amp;#8230; Mas muito mais inteligente. Mas perceba que eu ainda faço a transição movendo a posição do background. O valor &lt;code&gt;left&lt;/code&gt; do &lt;code&gt;background-position&lt;/code&gt; começa no **** e termina no &lt;strong&gt;-2800px&lt;/strong&gt;. Esse valor é exatamente a largura da imagem original que você quer fazer a animação. O coração do twitter é bem menor do que esse que eu estamos usando aqui no exemplo (embora a imagem seja a mesma). Aí é só mudar o tamanho usando o &lt;code&gt;background-size&lt;/code&gt; e fazendo os devidos acertos.&lt;/p&gt;

&lt;p&gt;O final, ficou assim:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando seu próprio Framework HTML CSS</title>
      <link>http://tableless.com.br/criando-seu-framework-html-css/</link>
      <pubDate>Mon, 07 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-seu-framework-html-css/</guid>
      <description>

&lt;p&gt;Em 2011, principalmente em 2012, dezenas de pessoas vinham e voltavam com o assunto &amp;#8220;Qual o melhor Framework?&amp;#8221;, fora os bootstrap fanboys de plantão que falavam tão cegamente do Twitter Bootstrap que se somasse todos os amores da internet teriamos um &amp;#8220;cupcake de gato dançando Gangnam Style após tentar beber 1 litro de absolute&amp;#8221; bootstrape. Eu sempre falo isso no meio das minhas palestras e começo dizendo no início desse post: Sejamos menos emotivos e mais analistas em Front-end, explico a seguir:&lt;/p&gt;

&lt;p&gt;Nossa função é analisar as possibilidades, testar as inovações, medir os riscos e otimizar os resultados. Testar frameworks como Twitter Bootstrap, Foundation, &amp;#8230; é parte do nosso trabalho, onde em muitos casos a pessoa esquece a melhor parte: &lt;strong&gt;Criar o seu próprio Framework Front-end&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;por-que-você-deseja-criar-seu-próprio-framework&#34;&gt;Por que você deseja criar seu próprio Framework?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nenhum dos frameworks tem o objeto que eu preciso&lt;/li&gt;
&lt;li&gt;Eu quero total controle sobre o código&lt;/li&gt;
&lt;li&gt;Eu preciso de algo mais simples ou menos objetos do que os outros possuem&lt;/li&gt;
&lt;li&gt;Aprender a criar um Framework por diversão e aprendizado&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;por-que-você-não-deve-criar-o-seu-próprio-framework&#34;&gt;Por que você não deve criar o seu próprio Framework?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Você não tem tempo disponível para criá-lo&lt;/li&gt;
&lt;li&gt;É mais vantajoso utilizar um já pronto do que criar um do zero&lt;/li&gt;
&lt;li&gt;Maior produtividade por utilizar algo já criado e documentado&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se você teve mais afinidade a primeira lista, ou é apenas curioso, vamos começar com alguns tópicos que o levarão a criar o &amp;#8220;defina o nome a sua escolha&amp;#8221; bootstrap.&lt;/p&gt;

&lt;h2 id=&#34;tudo-depende-da-nomeclatura-e-organização&#34;&gt;Tudo depende da nomeclatura e organização&lt;/h2&gt;

&lt;p&gt;Para componentizar sua página de maneira sustentável você precisa explorar ao máximo a organização e padronização do projeto. Quando eu analiso código de alguns profissionais ou empresas, sempre começo olhando pelos nomes utilizados em classes, pois me diz muito sobre a política da empresa na hora da criação das páginas, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;Botão = .button, .botao, .btn, .bt&lt;/pre&gt;

&lt;p&gt;A partir da escolha do padrão, você precisa mantê-lo nas variações&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;.btn-enviar, .btn-cancelar, .btn-salvar, .btn-pesquisar, ...&lt;/pre&gt;

&lt;p&gt;Então geramos uma redundância no prefixo, que é uma coisa boa quando falamos em padrão e organização&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;A partir daí você vai seguir a mesma linha para demais diferenciações e se são diferenciais específicas do componente de botão ou se é uma variação genérica, como visto abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;/* classe full específica */
&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar btn-full&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;

/* classe full generica */
&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar full&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Assim, podemos contextualizar para outros artefatos e seus devidos prefixos:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;Botão = .button, .botao, .btn, .bt
Tabela = .table, .tabela, .tbl, .tb
listas = .list, .lista, .group
widgets = .widgets, .wid
títulos = .title, .tit, .tt, .header, .h
&lt;/pre&gt;

&lt;p&gt;e algumas devidas personalizações&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;Botão = .btn-primary, .btn-secondary, .btn-small, .btn-medium, .btn-loading, .btn-disabled
Tabela = .tbl-roles, .tbl-full, .tbl-small
Tooltip = .tooltip, .tooltip-pin-up, .tooltip-pin-down, .tooltip-small, .tooltip-warning
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OBS: É óbvio que estou dando exemplos e você deve construir seus padrões com a sua equipe e profissionais envolvidos no processo.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;revisando&#34;&gt;Revisando&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A parte mais primordial para a construção de um Framework sustentável é o trabalho de nomeclaturas e seu emprego no código&lt;/li&gt;
&lt;li&gt;O nome dado ao componente deve vir como prefixo das suas diversificações&lt;/li&gt;
&lt;li&gt;Caso uma das variações seja utilizada em outros componentes, ela pode ser utilizada sem prefixo como &amp;#8220;full, clear, left, right, error&amp;#8221;&lt;/li&gt;
&lt;li&gt;Mapeie a nomeclatura e as possibilidades com sua equipe, nunca sozinho&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;coloque-todos-seus-padrões-em-um-único-local&#34;&gt;Coloque todos seus padrões em um único local&lt;/h2&gt;

&lt;p&gt;Um bom framework é reconhecido pela reutilização de seu código, sendo assim, você não pode contar que seus elementos caibam, se alinhem e harmonizem apenas no local pre desenhado, por isso, você precisa criar uma página que apresente todos os elementos padronizados, a fim de testá-los e documentá-los. Repare nas duas páginas abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter Bootstrap: &lt;a href=&#34;http://twitter.github.com/bootstrap/components.html&#34; title=&#34;http://twitter.github.com/bootstrap/components.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://twitter.github.com/bootstrap/components.html&#34;&gt;http://twitter.github.com/bootstrap/components.html&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Foundation: &lt;a href=&#34;http://foundation.zurb.com/docs/elements.php&#34; title=&#34;http://foundation.zurb.com/docs/elements.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://foundation.zurb.com/docs/elements.php&#34;&gt;http://foundation.zurb.com/docs/elements.php&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora que está convencido, você precisa criar essa página de apresentação onde você listará os componentes padronizados. Em um primeiro momento você pode inserir os componentes na página, agrupando (Veja os links acima para inspirar-se) da maneira que achar mais organizada. Essa etapa lhe dará mais segurança, pois a cada componente finalizado, você e sua equipe comemorará pelo padrão criado. Lembre-se que mais do que criar os componentes é preciso sempre dar 360 nos seus artefatos, identificando pontos de melhoria ou bugs, tratando e atualizando-os nessa página de padrões.&lt;/p&gt;

&lt;h3 id=&#34;adendo-para-projetos-responsivos&#34;&gt;Adendo para projetos responsivos&lt;/h3&gt;

&lt;p&gt;Caso você tenha variações padronizadas para projetos responsivos, não os considere na mesma página, por mais que a mudança possa ser percebida na mudança do viewport, crie uma página &amp;#8220;padrao-mobile.html&amp;#8221; ou algo do tipo com o local útil já reduzido simulando a largura do device pretendido, pois os padrões precisam ser facilmente visualizados, nenhuma equipe ficaria contente toda hora tendo que redimensionar navegador para ver o elemento normal e para mobile né?&lt;/p&gt;

&lt;h3 id=&#34;revisando-1&#34;&gt;Revisando&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Todos os componentes padronizados precisam ser incluídos em uma página separada da aplicação para documentação e validação&lt;/li&gt;
&lt;li&gt;Se o elemento estará pronto quando puder ser reutilizado em outros locais sem quebrar (geralmente por má herança CSS)&lt;/li&gt;
&lt;li&gt;Agrupe os elementos (form, títulos, botões, grid, etc) para manter a organização do seu projeto&lt;/li&gt;
&lt;li&gt;Planeje e organize os padrões com sua equipe, nunca sozinho&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;módulos-produtos-componentes-e-ou-artefatos&#34;&gt;Módulos, produtos, componentes e(ou) artefatos&lt;/h2&gt;

&lt;p&gt;Os nomes são variados, pode chamar como achar mais fofo, mas o importante é saber que qualquer framework utiliza itens comuns, então comece por eles e, a partir daí, desenvolva em cima das suas necessidades menos comuns. Os componentes comuns são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grid&lt;/li&gt;
&lt;li&gt;Tipografia&lt;/li&gt;
&lt;li&gt;Botões&lt;/li&gt;
&lt;li&gt;Formulários&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Claro que cada projeto pedirá necessidades especiais, cabendo a você e sua equipe serem flexíveis e espertos. Vamos conversar rapidamente sobre cada um desses 4 componentes?&lt;/p&gt;

&lt;h3 id=&#34;grid&#34;&gt;Grid&lt;/h3&gt;

&lt;p&gt;Lembro de quando eu criei o &lt;a href=&#34;http://formee.org&#34; title=&#34;formee framework&#34; target=&#34;_blank&#34;&gt;Formee framework&lt;/a&gt; e penava com cálculos e mais cálculos para chegar ao Grid flexível perfeito, foram muitas páginas de caderno rabiscadas com contas e mais contas. O Grid é uma parte perigosa do projeto, principalmente por exigirem algumas escolhas desde o começo, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usarei float para diagramação?&lt;/li&gt;
&lt;li&gt;Usarei algum pre processador como Less, Sass ou Stylus?&lt;/li&gt;
&lt;li&gt;Usarei colunas em pixels ou colunas flexíveis?&lt;/li&gt;
&lt;li&gt;Minhas colunas serão responsivas?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A partir daí, você tem uma série de Grids famosos para você estudar e basear o seu projeto, alguns fugindo do float, gerando projetos mais interessantes, porém menos seguros para browsers não atuais (não, não me refiro apenas a IE); alguns utilizando contas dos pre processadores, gerando larguras e espaçamentos automáticos de acordo com o container; alguns utilizando colunas flexíveis (exemplo do Formee) que podem ser muito interessantes para muitos projetos, mas começa a gerar desconforto em containers muito pequenos e alguns utilizando colunas responsivas, que podem refazer todo o pensamento dos 3 primeiros itens dessa lista.&lt;/p&gt;

&lt;p&gt;Uma dica para quem está estudando o desenvolvimento de GRIDs é pesquisar sobre o atributo CSS &lt;strong&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/strong&gt; que é responsável por mudar o display do box model, passando a considerar o padding e border na hora de aparecer na largura/altura final, o box-model convencional não os considera na largura e altura, somando no resultado os valores, ou seja, 300px de largura acaba se tornando 300px + 2px de borda + 10px de padding = 312px total.&lt;/p&gt;

&lt;p&gt;Outro ponto mais avançado que vocês precisarão trabalhar em cima é a parte da criação do grid. Atualmente você tem duas formas de fazê-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;grid-6-12&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;grid-6-12&#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;row&#34;&amp;gt;
&amp;lt;div class=&#34;col-6&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;col-6&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Conseguem entender a diferença? O primeiro é comum em projetos onde você não tem controle sobre a quantidade de divs, assim você cria algo e vai administrando, do outro lado, você controla a diagramação linha por linha. O problema da primeira é o famoso bug de float, que quando um dos elementos rouba mais altura e impacta no elemento da linha de baixo, ele gera um buraco, desorientando os demais irmãos, o problema da segunda é que com isso você engessa totalmente o seu código, prejudicando inclusive a liberdade de uma diagramação criativa para mobiles.&lt;/p&gt;

&lt;p&gt;Rabisque para chegar numa largura confortável do seu grid, conte com um espaçamento confortável entre as colunas, teste, teste, teste e teste.&lt;/p&gt;

&lt;h3 id=&#34;tipografia&#34;&gt;Tipografia&lt;/h3&gt;

&lt;p&gt;Precisamos definir os elementos textuais da aplicação, geralmente são títulos, listas, parágrafos e links. É bastante importante você simular todas as combinações possíveis na etapa de testes, pois sempre pode gerar algum incomodo pro usuário, por exemplo, você ter um título grande, um parágrafo de 2 linhas e outro título grande não é a mesma coisa que 1 título grande e 5 parágrafos grandes, tudo isso precisa ser testado.&lt;/p&gt;

&lt;p&gt;Para você conhecer um pouco mais sobre tipografia na parte de Front-end, recomendo a &lt;a href=&#34;https://github.com/necolas/normalize.css/wiki&#34; title=&#34;https://github.com/necolas/normalize.css/wiki&#34; target=&#34;_blank&#34;&gt;wiki do Normalize.css criado pelo Nicolas Gallagher&lt;/a&gt; que retrata a falta de padronização na mostragem dos elementos textuais entre os browsers. Eu tenho algumas considerações sobre essa filosofia, mas quem sabe isso fica para um outro post 🙂&lt;/p&gt;

&lt;h3 id=&#34;botões&#34;&gt;Botões&lt;/h3&gt;

&lt;p&gt;Creio que a melhor forma de começar a criar seus padrões é pelo grupo de botões, pois é bastante simples e gostoso de criar. Geralmente em um aplicativo existem 2 tipos de botões, primário e genérico. O botão primário(&lt;code&gt;.btn-primary&lt;/code&gt;, &lt;code&gt;.btn-cta&lt;/code&gt;) é o botão das funções principais da página, é o botão de ação final e por isso mais importante, enquanto o botão genérico é utilizado para funções variadas que não sejam a função principal do usuário, a relação primário/genérico é a mesma de salvar/cancelar, avançar/upload photo, etc.&lt;/p&gt;

&lt;p&gt;Alguns projetos acabam necessitando de outros padrões no botão como, por exemplo, &lt;code&gt;.btn-secondary&lt;/code&gt; para botão de importância secundário, mas ainda sim não genérico, e &lt;code&gt;.btn-error.btn-no.btn-delete&lt;/code&gt; para botões que tenham uma carga negativa (vermelho talvez) clara neles para o usuário saber que pode ser perigosa tal opção.&lt;/p&gt;

&lt;p&gt;Geralmente, os botões possuim algumas particularidades comuns em todos os projetos como o .small para uma versão mais minimalista, .full para uma versão de ocupar toda a largura do container. Uma possibilidade é botões com ícones, assim sendo, primeiro é necessário criar um agrupamento de padrões chamados ícones, depois você precisa estudar se o elemento botão precisa sofrer alguma mudança por ter o ícone dentro, caso sim, seria interessante pensar em um padrão focado no &amp;#8220;estado&amp;#8221; do botão, podendo ser &lt;code&gt;.btn-icon&lt;/code&gt;, seguindo o padrão de &lt;code&gt;.btn-disabled&lt;/code&gt;, &lt;code&gt;.btn-loading&lt;/code&gt;, ou até mesmo criar um prefixo que indica as chamadas &lt;strong&gt;&amp;#8220;state rules&amp;#8221;&lt;/strong&gt;, mais difundida atualmente pelo &lt;a href=&#34;http://smacss.com/book/type-state&#34; title=&#34;http://smacss.com/book/type-state&#34; target=&#34;_blank&#34;&gt;SMACSS&lt;/a&gt;, segue um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a.is-disabled { 
  color: gray;
}
.btn.is-disabled { 
  background: gray;
}
&lt;/pre&gt;

&lt;p&gt;Assim, o &lt;code&gt;&amp;quot;is-&amp;quot;&lt;/code&gt; passa a ser um padrão que pode ser reutilizado em diversos componentes, trazendo formatações diferentes. Então você pode criar dois &amp;#8220;states&amp;#8221; se achar interessante no seu projeto, um seria o &lt;code&gt;&amp;quot;is-&amp;quot;&lt;/code&gt; para &lt;code&gt;.is-loading&lt;/code&gt;, &lt;code&gt;.is-active&lt;/code&gt;, &lt;code&gt;.is-disabled&lt;/code&gt;, e criar outro chamado &lt;code&gt;&amp;quot;has-&amp;quot;&lt;/code&gt; como &lt;code&gt;.has-icon&lt;/code&gt;, &lt;code&gt;.has-photo&lt;/code&gt;, &lt;code&gt;.has-offer&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;formulários&#34;&gt;Formulários&lt;/h3&gt;

&lt;p&gt;Formulário, assim como o Grid é um elemento bastante complexo, pois exige muito estudo e testes. Você deve estar pensando &amp;#8220;Ah! Estilizar um input é muito simples&amp;#8221;, e estilizar uma lista de checkbox, radio? E personalizar um select para ele ficar mais interessante no Chrome (atualmente é horrível), e você considerar os novos inputs HTML5 como tel, search, range, e MUITOS outros e tratar de uma forma bacana pro seu app, por isso é bom você realizar testes e padrões.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/strong&gt; citado no Grid é um bom amigo para elementos de formulário também, pois você consegue controlar a largura dele de forma segura, visto que elemento como input não ocupará a linha toda só por ser display: block, você precisará definir largura 100%, daí ele somará o padding e a borda e quebrará seu grid. Mudando o box-sizing, você consegue dizer que o padding e a borda fará parte do 100% de largura, ficando bem mais fácil, não acha?&lt;/p&gt;

&lt;p&gt;Não se esqueça que mensagens de erro, sucesso, atenção, inputs com erros, labels, precisam ser padronizados e também colocados na página com os padrões no agrupamento de formulário. É bastante importante que esse arquivo seja visto pelos desenvolvedores back-end também, para que eles possam até já utilizar os padrões na hora de fazerem testes ou qualquer prototipagem, facilitando na hora da manipulação.&lt;/p&gt;

&lt;h2 id=&#34;javascript-não-é-um-plus&#34;&gt;Javascript não é um plus&lt;/h2&gt;

&lt;p&gt;Melhor do que a padronização visual, a padronização de classes, html e css, é ter também a padronização do funcionamento e manipulação desses componentes. Assim, o desenvolvedor front-end deve se arriscar a padronizar também o javascript, permitindo a reutilização do mesmo e manipulando dentro do padrão perseguido. Tanto o Foundation quanto o Bootstrap são excelentes Frameworks, pois além de seus módulos prontos, possuem interações bem implementadas como modais, tooltips, slideshow, accordion, dropdown, e muitos outros que agregam diretamente no projeto.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Nesses 8 anos de experiência específicos de desenvolvimento de aplicativos online, percebi que quanto mais padrões forem definidos em equipe, aumentamos mais a produtividade, diminuimos os erros no projeto, nos comunicamos melhor entre setores, perdas e ganhos de pessoas no time não gera uma grande perda de velocidade do time, e que a empresa fica sempre com um legado. A criação de um framework não é fácil, mas é bastante possível e, acredite, divertida.&lt;/p&gt;

&lt;h3 id=&#34;turbinando-seu-framework&#34;&gt;Turbinando seu Framework&lt;/h3&gt;

&lt;p&gt;Separei 3 coisas não comentadas acima que eu faço quando desenvolvo meus frameworks atualmente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separo meu CSS em arquivos LESS como: reset, base, theme, responsive. Tenho um style.less que compila todos num único CSS, mas mantendo a organização do projeto, o que é muito difícil de fazer depois que se passa das 3 mil linhas.&lt;/li&gt;
&lt;li&gt;De tanto em tanto tempo dou um 360 em uma dos padrões criados&lt;/li&gt;
&lt;li&gt;Apresento meu rascunho de planejamento do padrão para o Designer responsável (se houver) para que o mesmo possa alinhar os agrupamentos na hora de criar o &lt;a href=&#34;http://www.onextrapixel.com/2012/09/28/30-handy-and-free-ui-kits-for-web-and-mobile/&#34; title=&#34;http://www.onextrapixel.com/2012/09/28/30-handy-and-free-ui-kits-for-web-and-mobile/&#34; target=&#34;_blank&#34;&gt;UI kit&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;E você já criou o seu próprio Framework?&lt;/strong&gt; Conte aqui sua experiência 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comportamento e meios de acesso</title>
      <link>http://tableless.com.br/comportamento-meios-acesso/</link>
      <pubDate>Fri, 18 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/comportamento-meios-acesso/</guid>
      <description>&lt;p&gt;Ainda lembro quando comprei meu primeiro smartphone. Odiava navegar naquilo. Eu estava acostumado a utilizer a internet em desktops, com telas grandes e confortáveis. Os sites também não ajudavam. Praticamente nenhum site tinha versão mobile ou uma que funcionasse direito. O Opera tentava fazer a parte dos desenvolvedores, tentando manipular o site para que ele fosse melhor visto em telas menores. Era bom, mas não o ideal.&lt;/p&gt;

&lt;p&gt;Hoje o cenário é diferente. Antes usávamos o celular para no máximo procurar um endereço. Hoje lemos feeds, twitter, facebook, enviamos, recebemos e arquivamos emails. Dependendo do aparelho é possível criar planilhas, documentos, pastas e tudo mais. Já perdi a conta de quantos artigos comecei no smartphone e terminei no notebook.&lt;/p&gt;

&lt;p&gt;Sistemas baseados em web, teoricamente, já funcionam em qualquer aparelho móvel. Do ponto de vista de desenvolvimento, não é preciso reprogramar o sistema. Mas o design para mobiles é diferente do design para desktops. E é aí que as mudanças são necessárias.&lt;/p&gt;

&lt;p&gt;O comportamento, respostas cognitivas e a forma de uso dos mobiles é totalmente diferente do que estamos acostumados em desktops. Isso afeta totalmente a acessibilidade e a usabilidade do sistema/site. Temos muitas indicações das ações feitas com o mouse. Por exemplo, quando clicamos em algum botão ou link, muda-se as cores, sublinhado, background, bordas e etc. Tudo isso nos dá uma resposta de que acionamos algum mecanismo. Nos mobiles isso é diferente. Normalmente, como utilizamos nosso dedo, a área visível do botão praticamente some. Logo, indicações de cor, fundo, sublinhado e etc não são tão efetivas. Como indicação de comportamento podemos fazer o aparelho vibrar, fazendo com que o usuário saiba que ele executou uma ação.&lt;/p&gt;

&lt;p&gt;É por conta destas diferenças &amp;#8211; que parecem simples em uma primeira análise &amp;#8211; que a ideia de ampliar as possibilidade das linguagens client-side pode ajudar. Imagine controlar via CSS a força, quantidade de vezes e tempo de vibração do aparelho. Em desktops isso não afetará em nada, mas para mobiles e outros tipos de aparelhos – touchs, principalmente &amp;#8211; trariam uma grande vantagem de acessibilidade e usabilidade.&lt;/p&gt;

&lt;p&gt;Você já deve saber que o desenvolvimento com padrões web é dividido em 3 camadas: informação, formatação e comportamento. O HTML é responsável pela informação. O CSS é responsável pela formatação e o Javascript é responsável pelo comportamento.&lt;/p&gt;

&lt;p&gt;Isso mudou um pouco nos últimos tempos. O Javascript controlava o CSS para manipular o comportamento dos elementos HTML. Para fazermos tabelas zebradas (tabelas com linhas de cores alternados), animações, menu com submenus e etc utilizávamos Javascript. Hoje, uma boa quantidade destas necessidades já podemos fazer com CSS, como é o caso das tabelas zebradas. Com as inovações do CSS3 e do HTML5, a terceira camada de comportamento não depende mais apenas do Javascript. Logo o comportamento (do ponto de vista visual e cognitivo e não funcional) que os celulares deveriam ter quando determinado botão é selecionado ou clicado, também será responsabilidade do CSS.&lt;/p&gt;

&lt;p&gt;Para que você entenda melhor, sugiro que leia a a especificação do W3C sobre CSS Aural. Eu já aviso que é coisa do tinhoso.&lt;/p&gt;

&lt;p&gt;Imagine que um internauta cego visite um site. Por causa do problema de visão, ele utiliza um leitor de tela ligado ao sistema de som do computador ou a um sistema de som de multi-canais, como um Home Theater. Ao visitar o site, o leitor de tela leria seu HTML e interpretaria o CSS Aural escrito para o site. Com o CSS Aural, o desenvolvedor controla, por exemplo, se a voz que o usuário ouvirá é feminina ou masculina. Controla de onde o som sairá, se é da caixa da esquerda ou da direita. Será possível escolher em qual das caixas de som a voz do leitor de tela sairá. Controlaremos a pausa da fala, volume, força da voz e etc&amp;#8230; Você praticamente “formata” a voz ouvida pelo visitante. Isso tudo com CSS! Genial!&lt;/p&gt;

&lt;p&gt;Entenda que a web é mais do que conhecemos. Hoje você assiste vídeos, vê imagens e lê blogs, notícias e etc. Você escreve, compartilha e produz conteúdo. Todas essas características devem estar disponíveis &lt;strong&gt;não importa qual meio de acesso&lt;/strong&gt; o visitante utiliza. Não deve importar também qual o nível de acessibilidade o visitante necessita. CSS Aural é útil para pessoas com problema de visão. Há outros tipos de problemas, muitas vezes nem são problemas físicos. Entenda também que os dispositivos não se limitam a notebooks, desktops e smartphones. A moda agora são as tablets e não vai demorar muito para surgirem outros dispositivos. Não estou me referindo sobre a criação de novos dispositivos. Pode ser que a próxima moda seja uma geladeira ou um microondas que acessa a internet. Pode ser que o Surface da Microsoft passe a custar barato&amp;#8230; Abra sua cabeça. Saia da caixa.&lt;/p&gt;

&lt;p&gt;Para o desenvolvimento web, o termo “dispositivo” não pode mais existir. O que existe são meios de acesso. O Google é um meio de acesso assim como o smartphone, o browser, o leitor de feed, etc etc etc.&lt;/p&gt;

&lt;p&gt;Toda &lt;strong&gt;a informação publicada na web é reutilizável&lt;/strong&gt;. É reutilizada por seus usuários ao compartilharem, é reutilizada pelos buscadores, por outros sites e etc. Por isso a informação precisa estar disponível em qualquer lugar, a qualquer hora, não importando o meio que pela qual ela é acessada.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>