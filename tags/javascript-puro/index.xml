<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript Puro on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/javascript-puro/index.xml</link>
    <description>Recent content in Javascript Puro on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/javascript-puro/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Criando slideshow do zero com javascript puro</title>
      <link>https://tableless.github.io/hugo-public/criando-slideshow-zero-com-javascript-puro-2/</link>
      <pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-slideshow-zero-com-javascript-puro-2/</guid>
      <description>

&lt;p&gt;Depois de criar um artigo no devmedia de &lt;a href=&#34;http://www.devmedia.com.br/criando-slideshow-do-zero-com-jquery-sem-usar-plugins/28297&#34; title=&#34;Clique para ir ao artigo&#34;&gt;como criar um slideshow do zero em Jquery sem plugins&lt;/a&gt;, recebi v√°rios pedidos para fazer o mesmo com javascript, tamb√©m pude notar que muitas pessoas estavam com dificuldade em colocar link nas imagens e os bot√µes de anterior/pr√≥ximo.¬†Veremos neste artigo como criar um slideshow do zero apenas com javascript e uma dose elegante de CSS3, com controladores, legendas e links nas imagens.&lt;/p&gt;

&lt;p&gt;Abaixo o resultado final do nosso slide:&lt;/p&gt;

&lt;div id=&#34;attachment_40991&#34; style=&#34;width: 579px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/02/slide.fw_.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-40991&#34; title=&#34;Criando slideshow do zero com javascript puro&#34; alt=&#34;Criando slideshow do zero com javascript puro&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/slide.fw_-569x310.png&#34; width=&#34;569&#34; height=&#34;310&#34; srcset=&#34;uploads/2014/02/slide.fw_-569x310.png 569w, uploads/2014/02/slide.fw_-308x168.png 308w, uploads/2014/02/slide.fw_.png 1365w&#34; sizes=&#34;(max-width: 569px) 100vw, 569px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Resultado final do nosso slide
  &lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;estrutura-html&#34;&gt;Estrutura HTML&lt;/h2&gt;

&lt;p&gt;Nossa estrutura html √© bem simples, veja na listagem 1:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 1&lt;/strong&gt; &amp;#8211; Estrutura html do slideshow&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;figure&amp;gt;
   &amp;lt;span class=&#34;trs next&#34;&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;span class=&#34;trs prev&#34;&amp;gt;&amp;lt;/span&amp;gt;

   &amp;lt;div id=&#34;slider&#34;&amp;gt;
      &amp;lt;a href=&#34;#&#34; class=&#34;trs&#34;&amp;gt;&amp;lt;img src=&#34;imagem1.jpg&#34; alt=&#34;Legenda da imagem 1&#34; /&amp;gt;&amp;lt;/a&amp;gt;
      &amp;lt;a href=&#34;#&#34; class=&#34;trs&#34;&amp;gt;&amp;lt;img src=&#34;imagem2.jpg&#34; alt=&#34;Legenda da imagem 2&#34; /&amp;gt;&amp;lt;/a&amp;gt;
   &amp;lt;/div&amp;gt;

   &amp;lt;figcaption&amp;gt;&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;&lt;/pre&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;/figure&gt; &amp;#8211;&amp;gt; Figura que ser√° respons√°vel de gerenciar todos os elementos do nosso slide&lt;/p&gt;

&lt;p&gt;&lt;span class=&amp;#8221;next trs&amp;#8221;&gt;, &lt;span class=&amp;#8221;prev trs&amp;#8221;&gt; &amp;#8211;&amp;gt; Ser√£o os controladores do nosso slide&lt;/p&gt;

&lt;p&gt;&lt;div id=&amp;#8221;slide&amp;#8221;&gt; &amp;#8211;&amp;gt; div que abriga as imagens do nosso slide, facilitar√° nosso controle no javascript&lt;/p&gt;

&lt;p&gt;&lt;figcaption&gt; &amp;#8211;&amp;gt; Legenda do slide, ser√° baseada pelo o atributo &amp;#8220;alt&amp;#8221; das imagens&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s go! vamos agora estilizar nosso slide.&lt;/p&gt;

&lt;h2 id=&#34;estilo-css&#34;&gt;Estilo CSS&lt;/h2&gt;

&lt;p&gt;Abaixo na listagem 2, o nosso estilo css, n√£o explicarei a fundo nossa estiliza√ß√£o, irei focar apenas nos principais pontos&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 2 &amp;#8211;¬†&lt;/strong&gt;Estilo css&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;&amp;lt;style&amp;gt;
* {margin: 0; padding: 0;}
body {background: #000}
a,img {border: none;}
.trs {-webkit-transition:all ease-out 0.5s;
    -moz-transition:all ease-out 0.5s;
    -o-transition:all ease-out 0.5s;
    -ms-transition:all ease-out 0.5s;
    transition:all ease-out 0.5s;}  
#slider {position: relative; z-index: 1;}
#slider a { position: absolute; top: 0; left: 0; opacity: 0;filter:alpha(opacity=0);}
.ativo {opacity: 1!important; filter:alpha(opacity=100)!important;}

/*controladores*/
span {background: #0190EE; cursor: pointer; opacity: 0;filter:alpha(opacity=0); position: absolute; bottom: 40%; width: 43px; height: 43px; z-index: 5;}
.next {right: 10px;}
.next:before,.next:after {left: 21px;}
.next:before {
    -webkit-transform: rotate(-42deg);
    top: 5px;
}
.next:after {
    -webkit-transform: rotate(-132deg);
    top: 19px;
}
.next:before,.next:after,.prev:before,.prev:after {content: &#34;&#34;;
    height: 20px;
    background: #fff;
    width: 1px;
    position: absolute;
}
.prev {left: 10px;}
.prev:before,.prev:after {left: 18px;}
.prev:before {
    -webkit-transform: rotate(42deg);
    top: 5px;
}
.prev:after {
    -webkit-transform: rotate(132deg);
    top: 19px;
}

figure:hover span {opacity: 0.76;filter:alpha(opacity=76);}
    figure {
    max-width: 937px;
    height: 354px;
    position: relative;
    overflow: hidden;
    margin: 50px auto;
}

figcaption {padding-left: 20px;color: #fff; font-family: &#34;Kaushan Script&#34;,&#34;Lato&#34;,&#34;arial&#34;; font-size: 22px; background: rgba(1, 144, 238, 0.76); width: 100%; position: absolute; bottom: 0; left: 0; line-height: 55px; height: 55px; z-index: 5}
&amp;lt;/style&amp;gt;&lt;/pre&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;.trs &amp;#8211;&amp;gt; class que define a transi√ß√£o das imagens do nosso slide e dos nossos controladores&lt;/p&gt;

&lt;p&gt;.ativo &amp;#8211;&amp;gt; class que define qual imagem est√° ativa&lt;/p&gt;

&lt;p&gt;figure:hover span &amp;#8211;&amp;gt; faz com que mostre nossos controladores ao passar o mouse no nosso slide&lt;/p&gt;

&lt;p&gt;Parece que tudo est√° indo bem, vamos come√ßar a brincar agora com nosso slider, gogo ninja lvl2 üòÄ&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;

&lt;p&gt;Veremos cada passo do c√≥digo javascript bem detalhado para que n√£o haja d√∫vida alguma ao termino do post.&lt;/p&gt;

&lt;p&gt;Primeiramente vamos criar uma fun√ß√£o &lt;strong&gt;setaImagem¬†&lt;/strong&gt;e colocar para que ela rode quando a janela (window) for carregada:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 3&lt;/strong&gt; &amp;#8211; Cria√ß√£o da fun√ß√£o &amp;#8220;setaImagem&amp;#8221;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
   function setaImagem(){
   }
   window.addEventListener(&#34;load&#34;,setaImagem,false);
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;onde:&lt;/p&gt;

&lt;p&gt;window.addEventListener(&amp;#8220;load&amp;#8221;,setaImagem,false); &amp;#8211;&amp;gt; faz com que a fun√ß√£o &amp;#8220;setaImagem&amp;#8221; seja executada quando a janela for carregada&lt;/p&gt;

&lt;p&gt;Agora iremos criar nossa vari√°vel &amp;#8220;settings&amp;#8221; que receber√° alguns objetos e fun√ß√µes anonimas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 4¬†&lt;/strong&gt;&amp;#8211; Criando nossa var√°vel &amp;#8220;settings&amp;#8221;, j√° com duas fun√ß√µes anonimas dentro, que s√£o &amp;#8220;legenda&amp;#8221; e &amp;#8220;primeiraImg&amp;#8221;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var settings = {
  primeiraImg: function(){
    elemento = document.querySelector(&#34;#slider a:first-child&#34;);
    elemento.classList.add(&#34;ativo&#34;);
    this.legenda(elemento);
  },
  legenda: function(obj){
    var legenda = obj.querySelector(&#34;img&#34;).getAttribute(&#34;alt&#34;);
    document.querySelector(&#34;figcaption&#34;).innerHTML = legenda;
  }
 }&lt;/pre&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;var settings = {} &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt; define uma variavel &amp;#8220;settings&amp;#8221; que conter√° as configura√ß√µes do nosso slide&lt;/p&gt;

&lt;p&gt;primeiraImg: function(){&amp;#8230;} &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt; Fun√ß√£o que seta a imagem que aparecer√° inicialmente no nosso slide&lt;/p&gt;

&lt;p&gt;elemento = document.querySelector(&amp;#8220;#slider a:first-child&amp;#8221;);&lt;span style=&#34;color: #888888&#34;&gt;&lt;strong&gt;¬†&amp;#8211;&amp;gt;&lt;/strong&gt;&lt;/span&gt; captura a primeira tag &amp;#8220;&lt;a&gt;&amp;#8221; da &amp;#8220;div#slider&amp;#8221; e coloca numa variavel elemento.&lt;/p&gt;

&lt;p&gt;elemento.classList.add(&amp;#8220;ativo&amp;#8221;); &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt;¬†coloca a classe ativo na tag capturada (elemento.classList.add(&amp;#8220;ativo&amp;#8221;)).&lt;/p&gt;

&lt;p&gt;this.legenda(elemento); &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt; chama a fun√ß√£o anonima &amp;#8220;legenda&amp;#8221; e passa como par√¢metro a vari√°vel elemento que acabamos de criar&lt;/p&gt;

&lt;p&gt;legenda:function(obj){&amp;#8230;} &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt; fun√ß√£o anonima que coloca captura o atributo &amp;#8220;alt&amp;#8221; da tag &amp;#8220;&lt;img&gt;&amp;#8221; que tem como pai, o par√¢metro determinado como &amp;#8220;obj&amp;#8221; e coloca como legenda do slideshow&lt;/p&gt;

&lt;p&gt;var legenda = obj.querySelector(&amp;#8220;img&amp;#8221;).getAttribute(&amp;#8220;alt&amp;#8221;); &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt;¬†captura o atributo &amp;#8220;alt&amp;#8221; da tag &amp;#8220;&lt;img&gt;&amp;#8221; que tem como pai, o par√¢metro determinado como &amp;#8220;obj&amp;#8221; (que neste caso √© a primeira tag &amp;#8220;&lt;a&gt;&amp;#8221;) e coloca numa vari√°vel legenda&lt;/p&gt;

&lt;p&gt;document.querySelector(&amp;#8220;figcaption&amp;#8221;).innerHTML = legenda; &lt;strong&gt;&amp;#8211;&amp;gt;&lt;/strong&gt; coloca o html, que est√° dentro do atributo alt da variavel legenda, dentro da tag &amp;#8220;&lt;figcaption&gt;&amp;#8221; que neste caso √© a nossa legenda do slideshow.&lt;/p&gt;

&lt;p&gt;At√© agora tudo certo, mas note que se voc√™ executar nosso documento, nada acontece, isto porque n√£o chamamos nossa fun√ß√£o de setar a imagem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 5¬†&lt;/strong&gt;&amp;#8211; chamando nossa variavel settings e suas respectivas fun√ß√µes anonimas&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;//chama o slide
settings.primeiraImg();

//chama a legenda
settings.legenda(elemento);

//chama o slide √† um determinado tempo
var intervalo = setInterval(settings.slide,4000);&lt;/pre&gt;

&lt;p&gt;Primeiro chamamos nossa fun√ß√£o de setar a imagem no slideshow, depois setamos sua legenda e por fim, acionamos um temporizador que roda nosso slide a cada 4 segundos.&lt;/p&gt;

&lt;p&gt;Vamos agora adicionar mais uma fun√ß√£o √† configura√ß√£o do nosso slide, seu nome ser√° &amp;#8220;slide&amp;#8221;. Esta fun√ß√£o servir√° para controlar as transi√ß√µes autom√°ticas do nosso slideshow.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;obs: Adicione a linha de c√≥digo abaixo, dentro da vari√°vel settings&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 6¬†&lt;/strong&gt;&amp;#8211; Cria√ß√£o da fun√ß√£o slide&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;slide: function(){
    elemento = document.querySelector(&#34;.ativo&#34;);
    if(elemento.nextElementSibling){
        elemento.nextElementSibling.classList.add(&#34;ativo&#34;);
        settings.legenda(elemento.nextElementSibling);
        elemento.classList.remove(&#34;ativo&#34;);
    }else{
        elemento.classList.remove(&#34;ativo&#34;);
        settings.primeiraImg();
    }
},&lt;/pre&gt;

&lt;p&gt;Primeiro criamos nossa fun√ß√£o slide, dentro dela, capturamos a tag que cont√©m a class &amp;#8220;ativo&amp;#8221; e colocamos numa vari√°vel &amp;#8220;elemento&amp;#8221;, logo em seguida fazemos uma verifica√ß√£o, se ouver uma tag ap√≥s a tag &amp;#8220;ativo&amp;#8221; colocamos nesta outra tag a classe ativo, adicionamos a legenda dela no nosso slide e retiramos a classe ativo da nossa¬†imagem que est√° ativa. Se n√£o ouver nenhuma outra tag, tiramos a classe &amp;#8220;ativo&amp;#8221; da imagem que est√° ativa, e chamamos a fun√ß√£o &amp;#8220;primeiraImg&amp;#8221; que servir√° para setar a primeira imagem no nosso slide.&lt;/p&gt;

&lt;p&gt;show de bola! nosso slide est√° rodando, mas note que nossos controladores ainda n√£o funcionam, vamos agora fazer eles funcionarem.&lt;/p&gt;

&lt;p&gt;Primeiro vamos criar nossa fun√ß√£o que mostra a pr√≥xima imagem &amp;#8220;pr√≥ximo&amp;#8221;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 7¬†&lt;/strong&gt;&amp;#8211; Fun√ß√£o &amp;#8220;pr√≥ximo&amp;#8221;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;proximo: function(){
    clearInterval(intervalo);
    elemento = document.querySelector(&#34;.ativo&#34;);

    if(elemento.nextElementSibling){
        elemento.nextElementSibling.classList.add(&#34;ativo&#34;);
        settings.legenda(elemento.nextElementSibling);
        elemento.classList.remove(&#34;ativo&#34;);
    }else{
        elemento.classList.remove(&#34;ativo&#34;);
        settings.primeiraImg();
    }
    intervalo = setInterval(settings.slide,4000);
},&lt;/pre&gt;

&lt;p&gt;O processo da fun√ß√£o anonima &amp;#8220;proximo&amp;#8221; √© o mesmo da fun√ß√£o slide, apenas adicionamos um clearInterval(intervalo), que ir√° limpar o temporizador(tempo de execu√ß√£o) do nosso slide, e ao final da fun√ß√£o reiniciamos nosso temporizador.&lt;/p&gt;

&lt;p&gt;Agora iremos criar a fun√ß√£o para mostrar a imagem anterior&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 8¬†&lt;/strong&gt;&amp;#8211; fun√ß√£o &amp;#8220;anterior&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;anterior: function(){
    clearInterval(intervalo);
    elemento = document.querySelector(&#34;.ativo&#34;);

    if(elemento.previousElementSibling){
        elemento.previousElementSibling.classList.add(&#34;ativo&#34;);
        settings.legenda(elemento.previousElementSibling);
        elemento.classList.remove(&#34;ativo&#34;);
    }else{
        elemento.classList.remove(&#34;ativo&#34;);                     
        elemento = document.querySelector(&#34;a:last-child&#34;);
        elemento.classList.add(&#34;ativo&#34;);
        this.legenda(elemento);
    }
    intervalo = setInterval(settings.slide,4000);
},&lt;/pre&gt;

&lt;p&gt;Esta fun√ß√£o tamb√©m √© quase a mesma que a anterior, so mudamos onde tem &amp;#8220;next&amp;#8221;(pr√≥ximo) e colocamos &amp;#8220;previous&amp;#8221;(anterior).&lt;/p&gt;

&lt;p&gt;Ainda falta anexar o evento de click nos nossos controladores, segue abaixo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 9&lt;/strong&gt; &amp;#8211; Anexando a fun√ß√£o de clique nos controladores&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;document.querySelector(&#34;.next&#34;).addEventListener(&#34;click&#34;,settings.proximo,false);
    document.querySelector(&#34;.prev&#34;).addEventListener(&#34;click&#34;,settings.anterior,false);&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Obs: Coloque a fun√ß√£o de clique nos controladores no final da fun√ß√£o &amp;#8220;setaImagem&amp;#8221;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Disponibilizei nosso c√≥digo no github para quem quiser contribuir ou esteja tendo algum problema no slide &lt;a href=&#34;https://github.com/clovisdasilvaneto/slide-com-javascript-puro&#34; title=&#34;visualizar exemplo pelo github&#34;&gt;(clique aqui)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bem amigos ninjas javascript&amp;#8217;s, com isso terminamos nosso post, um forte abra√ßo e at√© a pr√≥xima&lt;/p&gt;

&lt;p&gt;Abaixo nosso c√≥digo javascript completo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
function setaImagem(){
    var settings = {
        primeiraImg: function(){
            elemento = document.querySelector(&#34;#slider a:first-child&#34;);
            elemento.classList.add(&#34;ativo&#34;);
            this.legenda(elemento);
        },

        slide: function(){
            elemento = document.querySelector(&#34;.ativo&#34;);

            if(elemento.nextElementSibling){
                elemento.nextElementSibling.classList.add(&#34;ativo&#34;);
                settings.legenda(elemento.nextElementSibling);
                elemento.classList.remove(&#34;ativo&#34;);
            }else{
                elemento.classList.remove(&#34;ativo&#34;);
                settings.primeiraImg();
            }

        },

        proximo: function(){
            clearInterval(intervalo);
            elemento = document.querySelector(&#34;.ativo&#34;);

            if(elemento.nextElementSibling){
                elemento.nextElementSibling.classList.add(&#34;ativo&#34;);
                settings.legenda(elemento.nextElementSibling);
                elemento.classList.remove(&#34;ativo&#34;);
            }else{
                elemento.classList.remove(&#34;ativo&#34;);
                settings.primeiraImg();
            }
            intervalo = setInterval(settings.slide,4000);
        },

        anterior: function(){
            clearInterval(intervalo);
            elemento = document.querySelector(&#34;.ativo&#34;);

            if(elemento.previousElementSibling){
                elemento.previousElementSibling.classList.add(&#34;ativo&#34;);
                settings.legenda(elemento.previousElementSibling);
                elemento.classList.remove(&#34;ativo&#34;);
            }else{
                elemento.classList.remove(&#34;ativo&#34;);                     
                elemento = document.querySelector(&#34;a:last-child&#34;);
                elemento.classList.add(&#34;ativo&#34;);
                this.legenda(elemento);
            }
            intervalo = setInterval(settings.slide,4000);
        },

        legenda: function(obj){
            var legenda = obj.querySelector(&#34;img&#34;).getAttribute(&#34;alt&#34;);
            document.querySelector(&#34;figcaption&#34;).innerHTML = legenda;
        }

    }

    //chama o slide
    settings.primeiraImg();

    //chama a legenda
    settings.legenda(elemento);

    //chama o slide √† um determinado tempo
    var intervalo = setInterval(settings.slide,4000);
    document.querySelector(&#34;.next&#34;).addEventListener(&#34;click&#34;,settings.proximo,false);
    document.querySelector(&#34;.prev&#34;).addEventListener(&#34;click&#34;,settings.anterior,false);
}

window.addEventListener(&#34;load&#34;,setaImagem,false);
&amp;lt;/script&amp;gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Criando efeito de fadeIn e fadeOut com javascript puro</title>
      <link>https://tableless.github.io/hugo-public/criando-efeito-de-fadein-e-fadeout-com-javascript-puro/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-efeito-de-fadein-e-fadeout-com-javascript-puro/</guid>
      <description>

&lt;p&gt;O uso de bibliotecas JavaScript vem crescendo muito atualmente, mas √†s vezes utilizamos certas bibliotecas (como a jQuery) para simples tarefas, que poder√≠amos fazer apenas com JavaScript.&lt;/p&gt;

&lt;p&gt;Vejamos na &lt;strong&gt;Listagem 1&lt;/strong&gt; o que acontece muito nas p√°ginas da web de hoje.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 1:&lt;/strong&gt; Pegando o atributo src de uma imagem com jQuery&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#imagem&#34;).attr(&#34;src&#34;);&lt;/pre&gt;

&lt;p&gt;Poder√≠amos usar simplesmente o JavaScript para ter o mesmo resultado usando o c√≥digo da &lt;strong&gt;Listagem 2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 2:&lt;/strong&gt;¬†Pegando o atributo src de uma imagem com JavaScript&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;document.getElementById(&#34;imagem&#34;).src;&lt;/pre&gt;

&lt;p&gt;A inten√ß√£o do artigo n√£o √© desencorajar ningu√©m a deixar de usar jQuery, mas para quem quer ser um bom front end, um ninja front end, √© bom come√ßar a estudar o JavaScript puro. Muitos desanimam ao estudar essa tecnologia por causa da maneira um pouco &amp;#8220;diferente&amp;#8221; de obter um efeito legal e com um c√≥digo curto, como acontece com o jQuery, mas com o JavaScript puro d√° para se ter efeitos, digamos ‚Äúmuito show‚Äù.&lt;/p&gt;

&lt;p&gt;Muito bem, chega de conversa, vamos dar inicio ao nosso treinamento ‚Äúninja‚Äù&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;estrutura-html-e-css&#34;&gt;Estrutura HTML e CSS&lt;/h2&gt;

&lt;p&gt;Vamos criar um pequeno exemplo para mostrar os efeitos fadeIn e fadeOut. Primeiro vamos elaborar nossa estrutura HTML, criando uma div que ir√° sofrer o efeitos atrav√©s de dois bot√µes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dica:&lt;/strong&gt; &lt;em&gt;Antes de criar algum efeito com javascript ou qualquer outra biblioteca javascript, sempre seguimos estas tr√™s ordens: Primeiro construimos a estrutura html, depois elaboramos o nosso estilo com o css, e por √∫ltimo, come√ßamos a brincar com as nossas linhas de c√≥digos javascript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Observe a &lt;strong&gt;Listagem 3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 3:&lt;/strong&gt;¬†Estrutura html5 simples&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&#34;pr-br&#34;&amp;gt;
¬†&amp;lt;head&amp;gt;
¬†¬†¬†&amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
  ¬†&amp;lt;title&amp;gt;Meu primeiro efeito ninja em js&amp;lt;/title&amp;gt;
¬†&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;section id=&#34;objeto&#34;&amp;gt;&amp;lt;/section&amp;gt;
   ¬†&amp;lt;button id=&#34;fadeIn&#34;&amp;gt;&amp;lt;/button&amp;gt;
   ¬†&amp;lt;button id=&#34;fadeOut&#34;&amp;gt;&amp;lt;/button&amp;gt;
¬†&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;A marca√ß√£o html √© simples, temos uma tag section, que sofrer√° as mudan√ßas de opacidade, determinadas como fadeIn e fadeOut. Temos tamb√©m dois bot√µes qualquer, que ser√£o respons√°veis por chamar as fun√ß√µes de acordo com seu ‚Äúid‚Äù.&lt;/p&gt;

&lt;p&gt;Em seguida, aplicamos nosso style,conforme a &lt;strong&gt;Listagem 4&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 4:&lt;/strong&gt; Estilo CSS&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;&amp;lt;style type=&#34;text/css&#34;&amp;gt;
  ¬†section {
   ¬†¬†¬†width: 150px;
   ¬†¬†¬†height: 100px;
   ¬†¬†¬†background: red;
¬†¬† }
&amp;lt;/style&amp;gt;&lt;/pre&gt;

&lt;p&gt;Note que s√≥ estilizamos a tag section, pois o estilo do bot√£o n√£o √© relevante neste exemplo, s√≥ √© necess√°rio uma cor de fundo na section para que possamos visualizar ela sumindo e aparecendo.&lt;/p&gt;

&lt;p&gt;agora iremos aplicar a fun√ß√£o dos bot√µes quando o documento for carregado. Observe a &lt;strong&gt;Listagem 5&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 5:&lt;/strong&gt; Anexando a fun√ß√£o de clique nos bot√µes quando o documento for lido&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
 window.onload = function(){
    var objeto = document.getElementById(&#39;objeto&#39;);
    document.getElementById(&#34;fadeIn&#34;).onclick = function(){
    fadeIn(objeto,1);
    }
   document.getElementById(&#34;fadeOut&#34;).onclick = function(){
    fadeOut(objeto,1);
   }
 }
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Nestas linhas de c√≥digos acima, anexamos a fun√ß√£o de clique para os bot√µes e, de acordo com seu ‚Äúid‚Äù, chamamos a fun√ß√£o de fadeIn e/ou fadeOut&lt;/p&gt;

&lt;p&gt;Em seguida, criaremos as fun√ß√µes fadeIn (que servir√° para determinar quando elemento ir√° aparecer) e fadeOut (para determinar quando o elemento ir√° sumir), conforme as &lt;strong&gt;Listagens 6&lt;/strong&gt; e &lt;strong&gt;7&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 6:&lt;/strong&gt;¬†Fun√ß√£o ¬†fadeIn&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function fadeIn(element,time){
   processa(element,time,0,100);
 }&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Listagem 7:¬†&lt;/strong&gt;Fun√ß√£o fadeOut&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function fadeOut(element,time){
  processa(element,time,100,0);
 }&lt;/pre&gt;

&lt;p&gt;Estas fun√ß√µes tem como par√¢metros element, time, intial, e end, onde:&lt;/p&gt;

&lt;p&gt;¬∑ ¬†¬†¬†¬†¬†¬†¬†element &amp;#8211; Elemento que sofrer√° o fadeIn ou fadeOut;&lt;/p&gt;

&lt;p&gt;¬∑ ¬†¬†¬†¬†¬†¬†¬†time &amp;#8211; Tempo que o fade acontecer√° (neste caso, um segundo);&lt;/p&gt;

&lt;p&gt;¬∑ ¬†¬†¬†¬†¬†¬†¬†initial &amp;#8211; Estado inicial do elemento;&lt;/p&gt;

&lt;p&gt;¬∑ ¬†¬†¬†¬†¬†¬†¬†end &amp;#8211; Estado final do elemento.&lt;/p&gt;

&lt;p&gt;Agora criaremos uma fun√ß√£o que ser√° respons√°vel por processar os efeitos de fadeIn e fadeOut, conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function processa(element,time,initial,end){
¬† ¬† //c√≥gigo
}&lt;/pre&gt;

&lt;p&gt;No escopo da nossa fun√ß√£o, declararemos uma vari√°vel respons√°vel pelo incremento (no caso do fadeIn) ou decremento (no caso do fadeOut) do efeito. Esta vari√°vel ser√° a chave principal para setar o efeito na opacidade do nosso elemento. Observe a &lt;strong&gt;Listagem 8.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 8&lt;/strong&gt;. Cria√ß√£o da vari√°vel de incremento da fun√ß√£o processa&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;if(initial == 0){
  increment = 2;
   element.style.display = &#34;block&#34;;
}else {
  increment = -2;
}&lt;/pre&gt;

&lt;p&gt;Se o estado inicial do elemento for igual a zero, declaramos o incremento como positivo para que o elemento possa aparecer, colocando-o com um display:block. Mas se o estado inicial do elemento for diferente de zero, ent√£o declaramos o incremento como negativo, assumindo o efeito de fadeOut&lt;/p&gt;

&lt;p&gt;Agora iremos declarar a opacidade inicial do nosso elemento, declarando uma vari√°vel cujo nome ser√° &amp;#8220;opc&amp;#8221; que ir√° ‚Äúsofrer‚Äù as mudan√ßas de incremento ou decremento. Observe a &lt;strong&gt;Listagem 9.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 9:&lt;/strong&gt; declara√ß√£o da vari√°vel de opacidade&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;if(initial == 0){
  increment = 2;
   element.style.display = &#34;block&#34;;
}else {
  increment = -2;
}
opc = initial;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Obs:&lt;/strong&gt; Declaramos a vari√°vel ‚Äúopc‚Äù, porque iremos precisar do valor ‚Äúinitial‚Äù para fazer uma verifica√ß√£o, em um loop mais na frente, mas tamb√©m iremos precisar que o valor da vari√°vel ‚Äúinitial‚Äù tamb√©m mude para que possamos aplicar as mudan√ßas na tag section&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agora iremos criar um intervalo para simular o efeito fadeIn / fadeOut no nosso elemento. Este intervalo ir√° se repetir em um intervalo de 10 milissegundos, pois queremos que aconte√ßa o fade em um segundo (1 * 10) == (time * 10), conforme a &lt;strong&gt;Listagem 10.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 10:&lt;/strong&gt;¬†Intervalo respons√°vel por aplicar efeito de fadeIn ou fadeOut&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;intervalo = setInterval(function(){
},time * 10);&lt;/pre&gt;

&lt;p&gt;Dentro do nosso intervalo verificaremos se a vari√°vel opc chegou ao estado final, ou seja, se o intervalo completar o efeito de fade limpamos o mesmo, pois ele n√£o ser√° mais necess√°rio. Observe a &lt;strong&gt;Listagem 11.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 11:&lt;/strong&gt;¬†Verificando se o fade foi completado&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;intervalo = setInterval(function(){
  if((opc == end)){
    if(end == 0){
    element.style.display = &#34;none&#34;;
    }
    clearInterval(intervalo);
  }
},time * 10);&lt;/pre&gt;

&lt;p&gt;Note que foi feita uma nova verifica√ß√£o para ver se o estado final do elemento √© zero. Se est√° em zero, ent√£o teremos que esconde-lo para que n√£o ocupe espa√ßo na tela.&lt;/p&gt;

&lt;p&gt;Logo ap√≥s a verifica√ß√£o, setaremos a opacidade do nosso elemento, conforme a &lt;strong&gt;Listagem 12.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 12:&lt;/strong&gt;¬†setando a opacidade do elemento&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;}else {
  opc += increment;
  element.style.opacity = opc/100;
  element.style.filter = &#34;alpha(opacity=&#34;+opc+&#34;)&#34;;
}&lt;/pre&gt;

&lt;p&gt;Os comandos dentro deste bloco ser√£o executados a cada 10 milissegundos. Na linha ‚Äúopc += increment;‚Äù, a opacidade incrementa ou decrementa. Por exemplo, se a opacidade for 0, o incremento √© positivo e teremos a seguinte repeti√ß√£o:&lt;/p&gt;

&lt;p&gt;0 + 2= 2 (na primeira execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;2 + 2 = 4 (na segunda execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;(&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;)&lt;/p&gt;

&lt;p&gt;98 + 2 = 100 (na ultima execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;Mas se a vari√°vel opc for ¬†maior que ¬†0 (no caso 100), significa que o incremento √© positivo, pois no topo do escopo da nossa fun√ß√£o processa(), temos uma verifica√ß√£o do par√¢metro ‚Äúinitial‚Äù, e se initial n√£o for igual a zero (que declaramos a vari√°vel opc = initial) a vari√°vel increment √© negativa. Logo teremos a seguinte fun√ß√£o:&lt;/p&gt;

&lt;p&gt;100 &amp;#8211; 2= 98 (na primeira execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;98 &amp;#8211; 2 = 96 (na segunda execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;(&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;)&lt;/p&gt;

&lt;p&gt;98 &amp;#8211; 2 = 100 (na ultima execu√ß√£o do loop);&lt;/p&gt;

&lt;p&gt;J√° na linha ‚Äúelement.style.opacity = opc/100;‚Äù seta a opacidade no elemento.&lt;/p&gt;

&lt;p&gt;E quem disse que o nosso efeito n√£o √© cross browser? Esta linha abaixo faz o nosso efeito de opacidade funcionar no ie8 at√© o ie6,&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Element.style.filter = ‚Äúalpha(opacity=‚Äù+opc+‚Äù)‚Äù;&lt;/pre&gt;

&lt;p&gt;O Internet Explorer do 8 abaixo, interpreta a propriedade filter:alpha(opacity=100) como opacity:1;&lt;/p&gt;

&lt;p&gt;Disponibilizei o c√≥digo no github, &lt;a href=&#34;https://github.com/clovisdasilvaneto/fadein-fadeout-com-javascript-puro&#34; title=&#34;c√≥digo do post&#34;&gt;clique aqui.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Um forte abra√ßo e at√© a pr√≥xima.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>