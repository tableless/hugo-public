<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Service on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/web-service/index.xml</link>
    <description>Recent content in Web Service on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/web-service/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Features que sua API REST precisa ter desde o in√≠cio</title>
      <link>https://tableless.github.io/hugo-public/features-que-sua-api-rest-precisa-ter-desde-o-inicio/</link>
      <pubDate>Thu, 17 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/features-que-sua-api-rest-precisa-ter-desde-o-inicio/</guid>
      <description>

&lt;p&gt;Eu tenho trabalhado com dados suavemente flutuando atrav√©s do protocolo http por um tempo e agora eu tenho esse sentimento altru√≠sta de que eu posso contribuir com os desenvolvedores mais jovens com algumas hist√≥rias sobre os desafios que enfrentei durante a minha jornada.&lt;/p&gt;

&lt;p&gt;Este artigo basicamente tem¬†o objetivo de listar e discutir sobre alguns pontos importantes que sua API, possivelmente, poderia abra√ßar desde o in√≠cio do projeto, a fim de acelerar o processo de desenvolvimento para todos em sua equipe.&lt;/p&gt;

&lt;h2 id=&#34;autentica√ß√£o-e-autoriza√ß√£o&#34;&gt;Autentica√ß√£o e Autoriza√ß√£o&lt;/h2&gt;

&lt;p&gt;Se voc√™ se preocupa com quem vai acessar seus endpoints, √© necess√°rio prestar aten√ß√£o sobre este t√≥pico. Existem algumas especifica√ß√µes conhecidas para lidar com este assunto, principalmente &lt;a href=&#34;https://jwt.io/&#34;&gt;JWT&lt;/a&gt;, &lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt; e &lt;a href=&#34;https://oauth.net/2/&#34;&gt;OAuth2&lt;/a&gt;. Estas abordagens ir√£o abranger a maioria dos cen√°rios em seus aplicativos, mas √†s vezes voc√™ ser√° desafiado a criar um novo tipo¬†de camada de seguran√ßa para atender¬†algum requisito espec√≠fico, neste caso, tente n√£o reinventar a roda e adapte suas necessidades em um desses listados.&lt;/p&gt;

&lt;h2 id=&#34;query-filtering-sorting-e-pagination&#34;&gt;Query, Filtering, Sorting¬†e Pagination&lt;/h2&gt;

&lt;p&gt;Assim que o seu banco de dados cresce, voc√™ vai come√ßar a notar que alguns recursos est√£o demorando muito para serem recuperados. As abordagens comuns para esta situa√ß√£o s√£o: armazenar em cache seus objetos (pr√≥ximo t√≥pico) e / ou criar a pagina√ß√£o / filtragem. Se voc√™ pode obter o seu recurso com algo como:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;shiny.api.com/resources?query[type=2]&amp;limit=5&amp;start=1&amp;order=[name]&lt;/pre&gt;

&lt;p&gt;&amp;#8230;seus clients ser√£o capazes de selecionar apenas o que eles realmente precisam para processar uma p√°gina ou tela espec√≠fica. √â bom para dar uma certa autonomia para seus consumidores. Pr√≥ximo n√≠vel deste assunto √© &lt;a href=&#34;http://graphql.org/learn/&#34;&gt;GraphQL&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cache&#34;&gt;Cache&lt;/h2&gt;

&lt;p&gt;Uma boa maneira de recuperar seus recursos incrivelmente r√°pido √© desenvolver alguma estrat√©gia de cache. O custo de suas requisi√ß√µes¬†ser√£o menores uma vez que seus dados estar√£o prontos para serem consumidos em um banco de dados in-memory. Com algum esfor√ßo voc√™ pode lidar com isso usando¬†&lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt; ou &lt;a href=&#34;https://memcached.org/&#34;&gt;Memcached&lt;/a&gt;. Boa sorte com sua expira√ß√£o de cache. Confira algumas reflex√µes sobre este tema com o &lt;a href=&#34;http://blog.remarkablelabs.com/2012/12/russian-doll-caching-cache-digests-rails-4-countdown-to-2013&#34;&gt;Russian Doll Caching&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;wrappers-e-summarized-fields&#34;&gt;Wrappers e Summarized Fields&lt;/h2&gt;

&lt;p&gt;√Äs vezes, voc√™ precisar√° fornecer alguns campos calculados &amp;#8211; ou quaisquer dados agregados¬†em geral &amp;#8211; em suas respostas e para esse cen√°rio, posso sugerir-lhe montar algo nessa linha:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;summay&#34;: {
    &#34;total&#34;: 2
    &#34;averageAge&#34;: 22
  },
  &#34;data&#34;:[
  {
    &#34;name&#34;: &#34;John&#34;,
    &#34;age&#34;: 22
  },
  {
    &#34;name&#34;: &#34;Mary&#34;,
    &#34;age&#34;: 22
  }
  ]
}
&lt;/pre&gt;

&lt;h2 id=&#34;hateos&#34;&gt;HATEOS&lt;/h2&gt;

&lt;p&gt;HATEOAS significa¬†&lt;em&gt;Hypermedia as the application state of the engine&lt;/em&gt;. √â uma abordagem que permite que os clientes interpretem de forma aut√¥nima e din√¢mica¬†o estado atual de um recurso e as transi√ß√µes que podem ser iniciados decorrente deste mesmo estado.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;id&#34;: 276,
  &#34;amount&#34;: 90.00,
  &#34;links&#34;: [
  {
    &#34;type&#34;: &#34;orders&#34;,
    &#34;rel&#34;: &#34;self&#34;,
    &#34;href&#34;: &#34;/orders/ 276&#34;
  },
  {
    &#34;type&#34;: &#34;customer&#34;,
    &#34;rel&#34;: &#34;order&#39;s customer&#34;,
    &#34;href&#34;: &#34;/orders/276/customers&#34;
  }
  ]
}
&lt;/pre&gt;

&lt;p&gt;Sobre o JSON acima, voc√™ pode tirar as seguintes conclus√µes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dentro do array &amp;#8220;links&amp;#8221; s√£o todas as &amp;#8216;transi√ß√µes&amp;#8217; poss√≠veis com o recurso, neste caso, podem acessar o cliente que criou as ordens com o URI /orders/276/customers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rel:auto&lt;/strong&gt; significa que esta URI √© a refer√™ncia do estado atual, neste caso, a ordem com ID 276. &lt;strong&gt;rel&lt;/strong&gt;, em geral, representa a rela√ß√£o entre a liga√ß√£o com o recurso atual.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;¬†indica o tipo de recurso que √© o link em quest√£o.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ao padronizar seus servi√ßos RESTful usando HATEOAS voc√™ permite que os clientes usem os recursos de maneiras mais f√°ceis, afinal de contas, as possibilidades de navega√ß√£o entre os estados ser√£o listadas em cada hit em seus recursos.&lt;/p&gt;

&lt;p&gt;Conforme descrito em um &lt;a href=&#34;http://martinfowler.com/articles/richardsonMaturityModel.html&#34;&gt;post&lt;/a&gt; de Martin Fowler, HATEOAS em sua API √© o √∫ltimo passo para atingir a &amp;#8216;Gl√≥ria de REST&amp;#8221;, o estado da arte.&lt;/p&gt;

&lt;h2 id=&#34;message-queue&#34;&gt;Message Queue&lt;/h2&gt;

&lt;p&gt;Aposto que voc√™ tem algumas rotas em suas APIs que s√£o s√≠ncronas¬†mas n√£o precisam necessariamente ser. Alguns casos de uso para uso de fila de mensagens s√£o: enviar e-mails ap√≥s alguma a√ß√£o, redimensionamento de imagem, codifica√ß√£o de v√≠deo, etc. Uma pr√°tica comum para esta situa√ß√£o √© colocar essas a√ß√µes em uma fila de mensagens para serem processadas posteriormente de forma ass√≠ncrona. D√™ uma olhada na &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; ou &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;, ambas s√£o grandes solu√ß√µes.&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;/p&gt;

&lt;p&gt;√â isso a√≠. Pelo menos para mim estes s√£o os principais aspectos que eu vi nos √∫ltimos anos no desenvolvimento de novos apis http/rpc/rest. Se voc√™ acha que existem alguns outros pontos importantes para mencionar, por favor deixe nos coment√°rios e conversamos sobre üôÇ&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>