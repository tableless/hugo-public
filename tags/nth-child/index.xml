<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nth Child on Tableless</title>
    <link>http://tableless.com.br/tags/nth-child/index.xml</link>
    <description>Recent content in Nth Child on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/nth-child/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>nth-child() e calc() – Uma proposta para o abandono de frameworks de grids responsivos</title>
      <link>http://tableless.com.br/nth-child-calc-responsivos/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/nth-child-calc-responsivos/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Apesar da adoção do _Tableless _para construção de layouts o conceito de tabela ainda persiste através de inúmeros &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Além da semântica, o conceito &lt;em&gt;Tableless&lt;/em&gt; prega, sempre que possível, levar a responsabilidade do layout para o CSS. O problema dos &lt;em&gt;frameworks&lt;/em&gt; CSS focados em &lt;em&gt;grids&lt;/em&gt; é que a especificação do layout continua dentro do HTML, descrita através de classes CSS, ancoradas diretamente aos elementos HTML, e de forma intrusiva, ou seja, os elementos &lt;em&gt;&lt;table&gt;&lt;/em&gt; antigamente utilizados foram substituídos por elementos &lt;em&gt;&lt;div class=&amp;#8221;col-&amp;#8220;&gt;&lt;/em&gt; para a criação do layout.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-49871 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/gridLayout.png&#34; alt=&#34;Exemplo de Grid Layout&#34; width=&#34;521&#34; height=&#34;354&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enquanto a especificação &amp;#8220;&lt;a href=&#34;http://www.w3.org/TR/css3-grid-layout/&#34; target=&#34;_blank&#34;&gt;CSS Grid Layout Module&lt;/a&gt;&amp;#8221; ainda está no forno, proponho uma alternativa simples aos &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos, através da dupla dinâmica &lt;em&gt;&lt;strong&gt;nth-child()&lt;/strong&gt;&lt;/em&gt; e &lt;em&gt;&lt;strong&gt;calc()&lt;/strong&gt;&lt;/em&gt; presentes no CSS3, e que são suportadas pelos navegadores modernos, inclusive o IE9 (veja mais opções de compatibilidade &lt;a href=&#34;http://caniuse.com/#search=CALC&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://caniuse.com/#search=nth-child&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;). Para um rápido entendimento destes recursos também confira estes artigos: &lt;a href=&#34;http://tableless.com.br/nth-child/&#34;&gt;http://tableless.com.br/nth-child/&lt;/a&gt; e &lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34;&gt;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;exemplo-de-formulário&#34;&gt;Exemplo de formulário&lt;/h2&gt;

&lt;p&gt;Antes de partimos para o CSS, sempre que possível, precisamos usar elementos HTML5 semânticos, atributos WAI-ARIA, entre outros padrões de acessibilidade. Para este exemplo, o uso dos elementos de entradas de dados seguirão as técnicas preconizadas pelo eMAG 3.1 (ver &lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34;&gt;http://emag.governoeletronico.gov.br/&lt;/a&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Para cada elemento de entrada de dados presente na estrutura &lt;em&gt;form -&amp;gt; fieldset&lt;/em&gt; o seguinte padrão será seguido:&lt;/p&gt;

&lt;pre&gt;&lt;span style=&#34;line-height: 1.5;&#34;&gt;&amp;lt;label&amp;gt;
    &amp;lt;span&amp;gt;XXX:&amp;lt;/span&amp;gt;
    &amp;lt;input type=&#34;text&#34; value=&#34;&#34;&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Agora podemos aplicar o seguinte CSS para todos os elementos &lt;em&gt;&lt;label&gt;&lt;/em&gt; presentes neste padrão.&lt;/p&gt;

&lt;pre&gt;form fieldset &amp;gt; label {
    display: block;
    float: left;
    width: calc(100% - 10px);
    height: 55px;
    margin-top: 10px;
    margin-right: 10px;
}
form fieldset label &amp;gt; input {
    float: left;
}
label &amp;gt; input {
    display: block;
    width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Por termos utilizado o &lt;em&gt;margin-right&lt;/em&gt; com 10px, este valor foi contabilizado na largura do &lt;em&gt;label&lt;/em&gt; (uso da função &lt;em&gt;calc&lt;/em&gt;) com a finalidade de que sua margem não ultrapasse os limites do contêiner. Isto foi feito para que possamos alterar o layout de uma coluna para múltiplas colunas diretamente pelo CSS. Com este estilo, cada campo de entrada de dados aparecerá disposto como uma lista, e se adaptará a largura do contêiner.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49865 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário&#34; width=&#34;658&#34; height=&#34;532&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O próximo passo é poder criar mais de uma &amp;#8220;coluna&amp;#8221;, para que o campo Código e Nome fiquem na mesma &amp;#8220;linha&amp;#8221; quando o tamanho da tela for grande. O campo Código terá uma largura fixa de 80px e o campo Nome preencherá o restante do espaço do contêiner descontando a largura do campo Código juntamente com a margem de 10px dos dois &lt;em&gt;labels&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49869 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário Responsivo&#34; width=&#34;789&#34; height=&#34;537&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com estes recursos podemos alterar o layout da página HTML diretamente pelo CSS sem que a estrutura do layout fique no próprio HTML. Além de criar colunas que se adaptam a largura do contêiner, é possível criar colunas com tamanhos fixos, evitando também o uso de classes CSS, que só é encorajado quando for realmente necessário.&lt;/p&gt;

&lt;p&gt;O código fonte completo e a &lt;em&gt;Demo&lt;/em&gt; deste exemplo encontra-se em &lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34;&gt;http://codepen.io/rogeriodegoiania/pen/GJQmzb&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>