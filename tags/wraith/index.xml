<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wraith on Tableless</title>
    <link>http://tableless.com.br/tags/wraith/index.xml</link>
    <description>Recent content in Wraith on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/wraith/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Processo front-end na Locaweb</title>
      <link>http://tableless.com.br/processo-front-end-na-locaweb/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/processo-front-end-na-locaweb/</guid>
      <description>

&lt;p&gt;É muito interessante entender como funcionam os processos em grandes empresas e comparar com processo que você executa na sua própria empresa. Depois que li &lt;a href=&#34;http://jaydson.org/processo-front-end-no-terra/&#34;&gt;o post que o Jaydson fez falando um pouco sobre o processo de desenvolvimento no Terra&lt;/a&gt;, fiquei de escrever um artigo parecido mostrando mais ou menos como nós aqui da Locaweb fazemos nosso front-end. Sugiro que leia o post do Jaydson e mate a sua curiosidade sobre o processo que eles tem lá.&lt;/p&gt;

&lt;h2 id=&#34;testes&#34;&gt;Testes&lt;/h2&gt;

&lt;p&gt;Eu vou repetir o que o Jaydson e o Rafael Rinaldi já falaram tantas vezes em eventos e artigos: Fazer testes front-end é difícil. Ferramentas front-end ainda estão caminhando e nos últimos anos tivemos uma explosão de novidades que nos ajudou muito a avançar na profissionalização da área. Mas testes ainda é um dos pontos fracos. Conseguimos testar muito bem JavaScript usando Jasmine, QUnit e tantos outros, mas testes CSS ainda é um problema grande.&lt;/p&gt;

&lt;p&gt;Essa semana adotamos na equipe a utilização do &lt;a href=&#34;https://github.com/BBC-News/wraith&#34;&gt;Wraith&lt;/a&gt;, um &lt;a href=&#34;http://bbc-news.github.io/wraith/&#34;&gt;teste de comparação de telas feito pelos desenvolvedores da BBC&lt;/a&gt;. Essa é só uma forma de conseguir testar a consistência das telas do seu produto. O &lt;a href=&#34;http://hardy.io&#34;&gt;Hardy&lt;/a&gt;, por exemplo, que usa o Cucumber para comparar seu código.&lt;/p&gt;

&lt;p&gt;Se você se interessar por testes CSS e quiser se aventurar nesse mundo, sugiro que &lt;a href=&#34;http://csste.st&#34;&gt;visite o site CSSTe.st&lt;/a&gt;. Eles compilaram informações de várias iniciativas e sistemas que fazem o trabalho de testar CSS mais fácil. Dá uma vasculhada lá, você vai achar coisas bem interessantes.&lt;/p&gt;

&lt;h2 id=&#34;pull-request&#34;&gt;Pull Request&lt;/h2&gt;

&lt;p&gt;Fazemos branch feature. Isso quer dizer que ninguém faz fork do projeto. As modificações são feitas em branchs separadas e submetidas via Pull Request (ou Merge Request, dependendo do sistema que você usar).&lt;/p&gt;

&lt;p&gt;O Pull Request precisa ter o OK de duas pessoas do time antes de ser aprovado. Antes de baixar o branch, a gente avalia algumas coisas antes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;As issues e o Pull Request estão bem descritivos mostrando qual o problema e o qual a solução adotada, com instruções exatas do que deve ser testado e avaliado?&lt;/li&gt;
&lt;li&gt;O CI passou? Tá okay?&lt;/li&gt;
&lt;li&gt;Se for JavaScript, os testes foram feitos? Se já existiam, precisou de modificação?&lt;/li&gt;
&lt;li&gt;Documentação está okay? Todas as atualizações foram feitas?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O pior momento é descrever bem o Pull Request e as Issues. Temos que ter em mente que isso faz parte do Changelog e é muito útil para consultas posteriores.&lt;/p&gt;

&lt;p&gt;O pessoal da PlataformaTec tem uma cultura muito rica nesse assunto (e outros também). &lt;a href=&#34;http://guidelines.plataformatec.com.br/pull-requests.html&#34;&gt;Dá uma olhada no processo deles&lt;/a&gt;, que interessante!&lt;/p&gt;

&lt;h2 id=&#34;framework&#34;&gt;Framework&lt;/h2&gt;

&lt;p&gt;Desenvolvemos um framework interno chamado &lt;a href=&#34;http://opensource.locaweb.com.br/locawebstyle/&#34;&gt;Locaweb Style&lt;/a&gt;. Na verdade, hoje existem 3 tipos de frameworks de interface aqui na firma. Cada um serve para serviços com designs e propósitos totalmente diferentes: um para a área de Checkout (compra), outro para área de Central do Cliente e o principal que é para a interface dos produtos.&lt;/p&gt;

&lt;p&gt;Esso deve ser padrão em muitas empresas e várias pessoas vão perguntar por que não usamos o Bootstrap. Nosso framework principal, que é o que faz a interface dos produtos que tem contato direto com o usuário se chama &lt;strong&gt;Locaweb Style&lt;/strong&gt; e você pode ver o projeto (que é totalmente open source) &lt;a href=&#34;http://github.com/locaweb/locawebstyle/&#34;&gt;no nosso GitHub&lt;/a&gt;. A documentação está bem completa e &lt;a href=&#34;http://opensource.locaweb.com.br/locawebstyle/&#34;&gt;pode ser vista aqui&lt;/a&gt;. A ideia é que todos os produtos que tenham interface com o usuário use esse framework. Esse ponto é importante porque resolve uma série de problemas como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Processo&lt;/strong&gt; &amp;#8211; As três equipes trabalham melhor quando as responsabilidades são bem dividas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Experiência padronizada&lt;/strong&gt; &amp;#8211; Padronizando a interface e as interações, o usuário tem uma experiência melhor entre os produtos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tirar a responsabilidade do client-side dos back-ends&lt;/strong&gt; &amp;#8211; Cá entre nós: back-end não tem que se preocupar se o layout está bonito, se tem botão desalinhado, se aquilo vai ser bem visto no celular, se o CSS está bem escrito etc etc etc…&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Excesso de projetos&lt;/strong&gt; &amp;#8211; São diversos projetos ao mesmo tempo, com equipes enxutas, trabalhando paralelamente. Não perde-se mais tempo de desenvolvimento criando telas parecidas do zero.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UX com mais liberdade&lt;/strong&gt; &amp;#8211; O time de UX precisa de atenção, carinho e de alguém que sente com eles para se preocupar com coisas que façam o nosso cliente amar o produto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Liberar gargalos&lt;/strong&gt; &amp;#8211; Os times de UX e de front-end eram gargalos constantes. Precisávamos agilizar o processo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Já estamos na versão 3 e cometemos uma série de erros nas duas primeiras versões. O maior erro que eu posso citar é a utilização do Bootstrap como base. Geralmente, o design definido pelo designer do time não era igual ao do Bootstrap. Claro. A empresa precisa de uma identidade própria. Logo, tínhamos o problema de recriar o design dos módulos e muitas vezes, precisávamos estender as funcionalidades JS de alguns módulos do Bootstrap. Quando percebemos, estávamos reescrevendo boa parte do framework. Logo, decidimos retirar totalmente o Bootstrap da versão atual, mantendo apenas o GRID.&lt;/p&gt;

&lt;h2 id=&#34;stack-de-desenvolvimento&#34;&gt;Stack de desenvolvimento&lt;/h2&gt;

&lt;p&gt;Não vou explicar detalhadamente cada uma das tecnologias, mas segue todas que usamos hoje para manter principalmente o framework:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SASS&lt;/strong&gt; &amp;#8211; Usando sintaxe &lt;strong&gt;.sass&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wraith&lt;/strong&gt; &amp;#8211; Como teste de comparação visual de interface.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jasmine&lt;/strong&gt; &amp;#8211; Para testes JS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSHint&lt;/strong&gt; &amp;#8211; Para manter a escrita de JS padronizada.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rake&lt;/strong&gt; &amp;#8211; Para executar os testes e outras tarefas como publicação da documentação e fechamento de pacote para deploy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Middleman&lt;/strong&gt; &amp;#8211; Para manter as documentações.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.editorconfig&lt;/strong&gt; &amp;#8211; Para manter o padrão dos editores em dia.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nos projetos, nós nem nos preocupamos com o build dos assets. O Asset Pipeline está plugado em todos os projetos e faz tudo muito bem. Não há Grunt ou Gulp nos projetos.&lt;/p&gt;

&lt;p&gt;Usamos Travis ligado no nosso &lt;a href=&#34;http://github.com/locaweb/&#34;&gt;GitHub&lt;/a&gt;. Os projetos todos internamente usam Jenkins.&lt;/p&gt;

&lt;h2 id=&#34;deploy-e-ambiente&#34;&gt;Deploy e ambiente&lt;/h2&gt;

&lt;p&gt;O deploy melhorou muito nos últimos anos. Hoje estamos assim: alguns produtos, não todos, podem fazer deploy a qualquer hora. Alguns precisam abrir um ticket para agendar uma janela. Nós, quando precisamos fazer um deploy do framework, ainda precisamos agendar. Mas já estamos andando para fazer deploy a qualquer momento do dia sem limite de vezes. Como os produtos usam o Locaweb Style com a versão travada, não há nenhum tipo de risco. O Deploy também pode ser descomplicado e automatizado, já que são apenas assets.&lt;/p&gt;

&lt;p&gt;O nosso ambiente é bastante comum: temos um ambiente de teste, um de homologação e produção. Simples assim.&lt;/p&gt;

&lt;h2 id=&#34;pontos-falhos&#34;&gt;Pontos falhos&lt;/h2&gt;

&lt;p&gt;Existem uma série de coisas que precisamos melhorar assim que encontrarmos tempo entre um projeto e outro. Mas o principal é manter a padronização de escrita de JS nos projetos. Há projetos que não usam nenhum tipo de pattern (nós usamos o &lt;a href=&#34;http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript&#34;&gt;Revealing Module Pattern&lt;/a&gt;), outros que usam CoffeeScript (o padrão é não usar), outros projetos que misturam JS puro com jQuery (o padrão é usar sempre a abstração do jQuery). A ideia é que nenhum projeto precise ter CSS para customizações. Toda a interface precisa estar dentro do Locaweb Style. Nem sempre é possível, já que há uma premissa que tudo o que está no framework precisa ser usado em dois produtos no mínimo. Não tem sentido colocar algo lá se apenas um produto vai usar e os outros não.&lt;/p&gt;

&lt;h2 id=&#34;entrosamento&#34;&gt;Entrosamento&lt;/h2&gt;

&lt;p&gt;Ter uma equipe unida e entrosada é difícil. Todo mundo precisa estar disposto a fazer aquele relacionamento dar certo, sempre entendendo as diferenças pessoais de cada um, como em um casamento. Ter uma equipe 100% unida, sem brigas, concordando com tudo é impossível. Eu tenho a sorte de trabalhar com uma equipe que se conhece e sabe exatamente onde temos que melhorar mais, entendendo os pontos fracos e principalmente nossos pontos fortes. Leva tempo para criar esse entrosamento. Muito trabalho, suor e sangue. São muitas reuniões de feedback, 1 on 1, retrospectiva&amp;#8230;&lt;/p&gt;

&lt;p&gt;Outra coisa que ajuda é a multidisciplinaridade entre os integrantes. Temos caras que lá programam um pouco de back. Outros que são mestres no CSS e tem um chamego especial para o lado de UX e Design, outros que gostam de mexer com infra. Isso tudo conta como ponto positivo.&lt;/p&gt;

&lt;p&gt;Lendo assim, até parece simples! 😉&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>