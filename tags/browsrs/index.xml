<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Browsrs on Tableless</title>
    <link>http://tableless.com.br/tags/browsrs/index.xml</link>
    <description>Recent content in Browsrs on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/browsrs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Performance front-end ‚Äì Parte 2</title>
      <link>http://tableless.com.br/performance-frontend-parte2/</link>
      <pubDate>Mon, 28 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/performance-frontend-parte2/</guid>
      <description>

&lt;p&gt;Se voc√™ ainda n√£o leu a primeira parte desse assunto, veja aqui: &lt;a href=&#34;http://tableless.com.br/performance-frontend-parte1/&#34;&gt;Performance front-end &amp;#8211; Parte 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Os browsers ajudam em muitos sentidos otimizando o carregamento de assets e a renderiza√ß√£o da p√°gina, mesmo assim √© necess√°rio fazer algumas tarefas para que sua aplica√ß√£o/website carregue mais r√°pido.&lt;/p&gt;

&lt;p&gt;Quando colocamos a performance como uma tarefa durante o desenvolvimento, determinamos o aumento ou a diminui√ß√£o da convers√£o e da quantidade de pageviews. Dependendo do tamanho do seu cliente, isso significa ter grandes resultados apenas diminuindo mil√©simos de segundos do carregamento.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.strangeloopnetworks.com/assets/images/infographic2.jpg&#34;&gt;Nessa imagem&lt;/a&gt;, veja alguns dos resultados obtidos em grandes websites quando eles melhoraram a performance dos seus servi√ßos. Os n√∫meros podem estar meio ultrapassados, mas servem para ter uma ideia. Por exemplo: a cada 100 milisegundos que a Amazon diminui do carregamento do seu site, eles aumentam 1% do seu redimento. Fa√ßa a conta: a &lt;a href=&#34;http://computerworld.uol.com.br/negocios/2012/04/27/receita-da-amazon-cresce-34-no-trimestre-e-bate-expectativas/&#34;&gt;Amazon teve uma receita de 13.18 Bilh√µes no √∫ltimo trimetre&lt;/a&gt;. A cada 400 milisegundos otimizados o Yahoo! aumenta em 9% o seu tr√°fego. Fazendo as p√°ginas carregarem 2.2 segundos mais r√°pidas, a Mozilla aumentou em 60 milh√µes de downloads do Firefox por ano.&lt;/p&gt;

&lt;p&gt;Por isso, quando algu√©m disser que melhorar milisegundos de performance do seu site n√£o √© grande coisa, mostre estes n√∫meros para a pessoa. Claro, que dependendo do tamanho do seu site, voc√™ n√£o vai dobrar suas visitas apenas diminuindo 100 milisegundos do carregamento seu site. Mas com certeza ajuda.&lt;/p&gt;

&lt;h2 id=&#34;medindo&#34;&gt;Medindo&lt;/h2&gt;

&lt;p&gt;Para come√ßarmos, indico o &lt;a href=&#34;https://developers.google.com/speed/pagespeed/?hl=pt-BR&#34;&gt;PageSpeed&lt;/a&gt; para a medi√ß√£o da performance dos seus websites. H√° outras maneiras de medir, milhares de sites e plugins, mas esse √© do pessoal do Google, que al√©m de dar uma pontua√ß√£o, ele oferece fontes de informa√ß√£o para voc√™ entender melhor o que √© cada t√≥pico medido.&lt;/p&gt;

&lt;p&gt;Voc√™ pode ver online &lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights&#34;&gt;como est√° a performance do seu site&lt;/a&gt;. Veja aqui o nosso em &lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights#url=tableless.com.br&amp;amp;mobile=false&#34;&gt;desktops&lt;/a&gt; ou em &lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights#url=tableless.com.br&amp;amp;mobile=true&#34;&gt;mobiles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No &lt;a href=&#34;https://developers.google.com/speed/docs/best-practices/rules_intro?hl=pt-BR&#34;&gt;site deles existem uma s√©rie de regrinhas e boas pr√°ticas&lt;/a&gt;. Se quiser deixar esse artigo de lado e ir direto para l√°, eu n√£o vou ficar chateado. üòâ&lt;/p&gt;

&lt;p&gt;Veja tamb√©m uma s√©rie de &lt;a href=&#34;https://developers.google.com/speed/tools?hl=pt-BR&#34;&gt;ferramentas e downloads&lt;/a&gt; para voc√™ n√£o se sentir sozinho ao fazer o trabalho sujo.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://yslow.org/&#34;&gt;YSlow&lt;/a&gt; do Yahoo! tamb√©m √© √≥timo. Ele tem as mesmas caracter√≠sticas do PageSpeed, logo, √© quest√£o de gosto qual dos dois voc√™ usar√°.&lt;/p&gt;

&lt;h2 id=&#34;diminuindo-o-tempo-de-viagem&#34;&gt;Diminuindo o tempo de viagem&lt;/h2&gt;

&lt;p&gt;RTT (Road-trip Time) √© o tempo que leva para o browser (ou qualquer outro cliente) conversar com o servidor buscando a informa√ß√£o solicitada pelo usu√°rio.&lt;/p&gt;

&lt;p&gt;Normalmente um browser inicia a comunica√ß√£o com o servidor com pelo menos 3 RTTs: Uma requisi√ß√£o para a resolu√ß√£o do DNS. Outra para o setup de conex√£o TCP e outra para a requisi√ß√£o HTTP. Normalmente os websites tem muitas requisi√ß√µes HTTP. E isso √© muito ruim. ‚Ä®&lt;/p&gt;

&lt;p&gt;Ter muitas requisi√ß√µes significa que seu browser precisa ir e voltar v√°rias vezes durante a abertura da p√°gina. Essa ida e volta s√£o os RTT, ou a Road-trip Time. S√£o as RTTs que contribuem para uma lat√™ncia ruim nas redes. Se seu cliente demora para trazer a informa√ß√£o, o download da p√°gina √© prejudicado.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bit.ly/WhiWbW&#34;&gt;N√≥s falamos sobre isso neste artigo.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;onde-colocar-as-chamadas-de-css-e-javascript&#34;&gt;Onde colocar as chamadas de CSS e Javascript&lt;/h2&gt;

&lt;p&gt;O browser tem uma ordem correta para carregar os arquivos do site. Por isso h√° uma ordem espec√≠fica para linkar o arquivos de CSS e Javascript, otimizando o trabalho de carregamento do browser.&lt;/p&gt;

&lt;p&gt;Para voc√™ entender melhor, note que:&lt;/p&gt;

&lt;p&gt;O CSS bloqueia a renderiza√ß√£o da p√°gina. Isso por que o browser n√£o quer carregar primeiro um HTML feio s√≥ para depois fazer um render da p√°gina novamente aplicando seu estilo. Por isso ele bloqueia o m√°ximo que puder a renderiza√ß√£o da p√°gina at√© que tenha carregado seu c√≥digo CSS. Esta √© a raz√£o pela qual voc√™ deve inserir o link do CSS no HEAD, afim de que o browser o encontre rapidamente.&lt;/p&gt;

&lt;p&gt;O Javascript por sua vez bloqueia o download de outros arquivos. Lembre-se de que o browser procura baixar v√°rios arquivos ao mesmo tempo enquanto ele carrega a p√°gina. Quando carregamos o Javascript, ele p√°ra tudo e carrega um script de cada vez. Ele faz isso por que geralmente o Javascript modifica o HTML e tamb√©m o CSS. Logo, ele n√£o pode fazer isso se o c√≥digo HTML, o CSS ou outros arquivos como as imagens n√£o foram baixados.&lt;/p&gt;

&lt;p&gt;Isso tamb√©m √© aplicado na ordem em que voc√™ linka os arquivos de Javascript. Um exemplo simples: voc√™ n√£o consegue fazer funcionar um plugin de jQuery se n√£o tiver linkado o jQuery antes do script de plugin.&lt;/p&gt;

&lt;h2 id=&#34;melhorando-o-download-paralelo&#34;&gt;Melhorando o download paralelo&lt;/h2&gt;

&lt;p&gt;Como j√° comentamos acima o browser sempre tenta fazer o m√°ximo de downloads de arquivos em paralelo afim de aumentar a velocidade do carregamento. O problema √© que h√° um limite para o download de arquivos simult√¢neos em um mesmo dom√≠nio. De acordo com o protocolo HTTP, os browsers podem pode ter duas conex√µes simult√¢neas por dom√≠nio. Eu n√£o consegui encontrar um lugar que d√™ o n√∫mero exato, mas dizem por a√≠ que o Firefox e Chrome conseguem baixar at√© 6 arquivos por vez. Se um documento contem referencias para v√°rias recursos como CSS, Javascripts, Imagens e etc, de forma que estoure o m√°ximo permitido pelo host, o browser come√ßa a baixar um parte e deixa os outros arquivos na fila esperando. Quando ele termina de baixar todos os recursos atuais, ele vai pra fila e pega o pr√≥ximo grupo.&lt;/p&gt;

&lt;p&gt;A estrat√©gia √© separar parte destes recursos em outro dom√≠nio. Fazendo isso o browser pode baixar o m√°ximo de recursos por dom√≠nio paralelamente. Por isso √© que normalmente separamos arquivos &amp;#8211; como imagens &amp;#8211; em outro servidor.&lt;/p&gt;

&lt;p&gt;Qualquer grande site faz isso. Veja por exemplo o endere√ßo do meu avatar no twitter: &lt;strong&gt;&lt;a href=&#34;https://si0.twimg.com/profile_images/2927099623/a39b6f1a9af28d8dada6bc8958392cf3_normal.jpeg&#34;&gt;https://si0.twimg.com/profile_images/2927099623/a39b6f1a9af28d8dada6bc8958392cf3_normal.jpeg&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O endere√ßo come√ßa com &lt;strong&gt;si0.twimg.com&lt;/strong&gt; que √© um servidor do Twitter para servir assets est√°ticos. Se voc√™ abrir o c√≥digo fonte de qualquer grande site vai ver que isso √© bem comum para diminuir a carga de carregamento.&lt;/p&gt;

&lt;p&gt;Uma solu√ß√£o interessante tamb√©m √© usar arquivos como o jQuery ou outros scripts via CDNs. O jQuery, por exemplo, &lt;a href=&#34;http://jquery.com/download/&#34;&gt;tem uma s√©rie de CDNs pela Microsoft, MediaTemple e Google&lt;/a&gt; que voc√™ pode usar para linkar o script ao seu projeto sem precisar fazer a requisi√ß√£o no seu pr√≥prio servidor.&lt;/p&gt;

&lt;p&gt;Isso √© bom por que voc√™ n√£o sobrecarrega seu servidor. As vezes o donwload do arquivo pode demorar mais do que se estivesse no seu servidor. Mesmo assim, mantendo um arquivo em outro servidor, voc√™ abre caminho para que o browser fa√ßa o carregamento de outro arquivos paralelamente.&lt;/p&gt;

&lt;h2 id=&#34;link-prefetching-e-prerender&#34;&gt;Link prefetching e Prerender&lt;/h2&gt;

&lt;p&gt;Link prefetching √© um mecanismo que utiliza o tempo ocioso do browser para fazer o download ou buscar doumentos que talvez ser√£o usados no futuro pelo usu√°rio. Por exemplo: se o usu√°rio est√° visitando determinada p√°gina no site e voc√™ tem quase certeza de qual ser√° a pr√≥xima p√°gina que ele visitar√°, voc√™ pode avisar o browser para que ele fa√ßa o download dos arquivos dessa p√°gina para o seu cache enquanto ele estiver ocioso, de forma que quando o usu√°rio for visitar essa p√°gina a renderiza√ß√£o √© agilizada.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;prefetch&#34; href=&#34;http://tableless.com.br/imagens/destaque.jpg&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Ou:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;prefetch&#34; href=&#34;http://seuwebsite.com.br/parte2/&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Existe tamb√©m o link prerender. Nesse caso o browser al√©m de baixar os assets necess√°rios, ele pr√© renderiza a p√°gina na mem√≥ria de forma que ao visitar essa p√°gina, ela j√° estar√° totalmente renderizada. Diferentemente do link prefetch que apenas baixa os arquivos e s√≥ renderiza a p√°gina quando o usu√°rio fizer a visita.&lt;/p&gt;

&lt;p&gt;Nem preciso dizer que isso deve ser usado com muito cuidado, principalmente quando estamos produzindo algo para mobiles. Voc√™ n√£o quer acabar com a bateria e o pacote de dados do usu√°rio baixando p√°ginas que talvez ele nem v√° visitar. Por isso √© recomend√°vel fazer o prefetch/prerender de poucas p√°ginas e arquivos por vez. Se voc√™ n√£o tem certeza de qual ser√° a p√°gina a pr√≥xima p√°gina visitada, √© melhor nem utilizar essa t√°tica.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;prerender&#34; href=&#34;http://seuwebsite.com.br/parte2/&#34;&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;A busca por performance deve ser algo constante. H√° alguns pontos que voc√™ n√£o conseguir√° cobrir, nesse caso, n√£o se preocupe. Fa√ßa um estudo do seu caso e entenda at√© onde voc√™ pode ir para melhorar a performance de seus servi√ßos. Use e abuse de ferramentas para melhorar seu trabalho e entenda melhor como funciona os browsers. Todas essas informa√ß√µes melhorar√£o seu processo de produ√ß√£o e definir√£o uma experi√™ncia mais amig√°vel para o usu√°rio.&lt;/p&gt;

&lt;h3 id=&#34;para-ler-mais&#34;&gt;Para ler mais&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.yahoo.com/performance/rules.html&#34;&gt;Best Practices for Speeding Up Your Web Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://csswizardry.com/2013/01/front-end-performance-for-web-designers-and-front-end-developers/&#34;&gt;Front-end performance for web designers and front-end developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yuiblog.com/blog/2007/04/11/performance-research-part-4/&#34;&gt;Maximizing Parallel Downloads in the Carpool Lane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sixrevisions.com/web-development/five-ways-to-speed-up-page-response-times/&#34;&gt;Five Ways to Speed Up Page Response Times&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>