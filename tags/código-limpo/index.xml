<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Código Limpo on Tableless</title>
    <link>http://tableless.com.br/tags/c%C3%B3digo-limpo/index.xml</link>
    <description>Recent content in Código Limpo on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/c%C3%B3digo-limpo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Código Limpo – Escreva seu código hoje sem esquecer da manutenção de amanhã</title>
      <link>http://tableless.com.br/codigo-limpo-escreva-seu-codigo-hoje-sem-esquecer-da-manutencao-de-amanha/</link>
      <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/codigo-limpo-escreva-seu-codigo-hoje-sem-esquecer-da-manutencao-de-amanha/</guid>
      <description>

&lt;p&gt;Você provavelmente já precisou entender o código de outra pessoa. Seja para realizar uma alteração, corrigir um &lt;em&gt;bug&lt;/em&gt; ou até mesmo para procurar um comportamento específico.&lt;/p&gt;

&lt;p&gt;Talvez você até tenha feito isso no seu próprio código!&lt;/p&gt;

&lt;p&gt;Agora pense por alguns segundos: O código foi &lt;strong&gt;fácil&lt;/strong&gt; de entender?&lt;/p&gt;

&lt;p&gt;Você, &lt;strong&gt;só pela leitura&lt;/strong&gt;, conseguiu identificar o método exato que precisava alterar?&lt;/p&gt;

&lt;p&gt;Se a resposta for positiva: ótimo! O programador fez a sua parte e conseguiu deixar o código limpo (ou pelo menos fez um código simples o suficiente para ser entendido).&lt;/p&gt;

&lt;p&gt;Mas se a resposta for &amp;#8220;mais ou menos&amp;#8221;, ou &amp;#8220;nem um pouco&amp;#8221;, é aí que mora o problema.&lt;/p&gt;

&lt;p&gt;E essa é a explicação para o título deste post.&lt;/p&gt;

&lt;h2 id=&#34;mas-por-que-isso-acontece&#34;&gt;Mas por que isso acontece?&lt;/h2&gt;

&lt;p&gt;Quando aprendemos a programar, estamos mais preocupados em aprender a lógica de programação e fazer as coisas funcionarem do que com a estrutura e leitura do código. E isso é totalmente normal, afinal, estamos iniciando.&lt;/p&gt;

&lt;p&gt;Porém, na minha opinião, o problema começa quando evoluímos em nossa carreira (começamos a trabalhar em projetos maiores e ter mais responsabilidades) e &lt;strong&gt;não evoluímos o nosso código na mesma medida&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Aí começam a aparecer os famosos &amp;#8220;códigos espaguete&amp;#8221; ou mesmo aquele monte de variáveis que não ajudam em nada a entender o código.&lt;/p&gt;

&lt;p&gt;Leia o código abaixo e responda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consegue identificar qual método você precisa chamar primeiro pra cadastrar um novo cliente?&lt;/li&gt;
&lt;li&gt;Percebe como os métodos estão sem ordem nenhuma e um chama o outro internamente, formando um &amp;#8220;espaguete&amp;#8221;?&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class CadastroCliente
{
    public function enviarEmail()
    {
        $mailer = new Mailer();
        $mailer-&amp;gt;send();
    } 
    
    public function gerarSenha()
    {
        // codigo para gerar senha
        
        return $senha;
    }
    
    public function atualizar($cliente)
    {
        $model = new ClienteModel();
        $model-&amp;gt;confirmar($cliente);
    }

    public function criar($cliente)
    {
        $senha = $this-&amp;gt;gerarSenha();
        
        $model = new ClienteModel();
        $model-&amp;gt;add($cliente, $senha);

        $this-&amp;gt;enviarEmail();
    }
    
    public function confirmarCadastro($cliente)
    {
        $this-&amp;gt;enviarEmail();
        $this-&amp;gt;atualizar($cliente);
    }
}
&lt;/pre&gt;

&lt;p&gt;O problema dessa evolução tardia é que somente depois de muito tempo o desenvolvedor vai descobrir que poderia ter feito melhor. Note que começar escrevendo códigos confusos não é o problema, mas sim o tempo necessário para entender que essa evolução é importante.&lt;/p&gt;

&lt;p&gt;E então, ao perceber que o código não está dos melhores, o desenvolvedor pode escolher entre:&lt;/p&gt;

&lt;p&gt;1 &amp;#8211; Deixar pra lá, por que o seu código sempre funciona&lt;/p&gt;

&lt;p&gt;2 &amp;#8211; Começar a melhorar o seu código pensando na qualidade do software&lt;/p&gt;

&lt;h2 id=&#34;código-funcionando-next&#34;&gt;Código funcionando! Next!&lt;/h2&gt;

&lt;p&gt;A sensação de ver nosso código funcionando é ótima! Quem não gosta?&lt;/p&gt;

&lt;p&gt;Só que muita gente para por aí, nem lembra que por trás daquele comportamento existem classes, métodos, variáveis, etc.&lt;/p&gt;

&lt;p&gt;Mas será que esse código está legível? As classes possuem responsabilidades definidas? Os métodos estão coerentes?&lt;/p&gt;

&lt;p&gt;Pois é, existem vários pontos que precisamos estar atentos para que nosso código seja limpo.&lt;/p&gt;

&lt;p&gt;Mas apesar de parecer muito complicado, na verdade podemos começar da forma mais simples possível: comece aos poucos e vá sempre buscando deixá-lo mais legível. Não tem como você fazer o melhor código de primeira.&lt;/p&gt;

&lt;p&gt;Para exemplificar essa transformação de um código difícil de ser lido em um código limpo, veja o trecho abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $vl;
    private $prods;

    public function adic($prods)
    {
        foreach ($prods as $prod) {
            if ($prod-&amp;gt;getCat() == &#39;P&#39;) {
                $vl = $prod-&amp;gt;getVl() * 0.75;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            } elseif ($prod-&amp;gt;getCat() == &#39;B&#39;) {
                $vl = 0;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            } elseif ($prod-&amp;gt;getCat() == &#39;&#39;) {
                $vl = $prod-&amp;gt;getVl();
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Você consegue identificar o que são aqueles valores (P e B) ou até mesmo entender rapidamente o que o método faz?&lt;/p&gt;

&lt;p&gt;Vamos deixá-lo um pouco mais claro:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos)
    {
        foreach ($produtos as $produto) {
            if ($produto-&amp;gt;getCategoria() == &#39;PROMOCAO&#39;) {
                $valor = $produto-&amp;gt;getValor() * 0.75;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;BRINDE&#39;) {
                $valor = 0;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;&#39;) {
                $valor = $produto-&amp;gt;getValor();
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Agora já dá pra entender mais rápido o que o método faz: adicionar um produto no carrinho e acrescenta o valor do produto no valor total.&lt;/p&gt;

&lt;p&gt;Mas dá pra melhorar ainda mais:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos)
    {   
        foreach ($produtos as $produto) {
            $valor = $produto-&amp;gt;getValor();
            
            if ($produto-&amp;gt;getCategoria() == &#39;PROMOCAO&#39;) {
                $valor = $produto-&amp;gt;getValor() * 0.75;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;BRINDE&#39;) {
                $valor = 0;
            }

            $this-&amp;gt;valorTotal += $valor;
            $this-&amp;gt;produtos[] = $produto;
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Notou que as linhas que atualizam o valor total e os produtos internos da classe se repetiam a cada &lt;code&gt;if&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Já que se repetem, podemos tirar de dentro dos &lt;code&gt;ifs&lt;/code&gt;, pois ele sempre será executado independente da condição.&lt;/p&gt;

&lt;p&gt;Além disso, podemos inicializar a variável &lt;code&gt;$valor&lt;/code&gt; com o valor do produto, e de acordo com a categoria do produto atualizamos essa variável. Assim conseguimos eliminar a utilização de um &lt;code&gt;if&lt;/code&gt; desnecessário verificando se o produto não tem categoria.&lt;/p&gt;

&lt;p&gt;Agora o toque final:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos = [])
    {   
        foreach ($produtos as $produto) {
            $this-&amp;gt;valorTotal += $this-&amp;gt;calcularValorProduto($produto);
            $this-&amp;gt;produtos[] = $produto;
        }
    }

    private function calcularValorProduto(Produto $produto)
    {
        if ($produto-&amp;gt;getCategoria() == Produto::CATEGORIA_BRINDE) {
            return 0;
        }

        if ($produto-&amp;gt;getCategoria() == Produto::CATEGORIA_PROMOCAO) {
            return $produto-&amp;gt;getValor() * 0.75;
        }

        return $produto-&amp;gt;getValor();
    }
}
&lt;/pre&gt;

&lt;p&gt;Pronto, o código agora ficou mais simples e os métodos com uma únicaresponsabilidade definida.&lt;/p&gt;

&lt;p&gt;Veja as alterações realizadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Agora o cálculo do valor fica em um método privado da classe, para não ficar tudo no método &lt;code&gt;adicionarProduto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Foi adicionado um &lt;em&gt;Type Hint&lt;/em&gt; no método &lt;code&gt;calcularValorProduto&lt;/code&gt; para garantir que a variável &lt;code&gt;$produto&lt;/code&gt; seja um objeto da classe &lt;code&gt;Produto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No método de cálculo, trocamos o &lt;code&gt;elseif&lt;/code&gt; por dois &lt;code&gt;ifs&lt;/code&gt; separados: isso facilita a separação por blocos de código, e consequentemente a leitura&lt;/li&gt;
&lt;li&gt;Ainda no método de cálculo, ao invés de inicializar a variável &lt;code&gt;$valor&lt;/code&gt; com o valor do produto, foram adicionados &lt;code&gt;returns&lt;/code&gt; em cada condição: isso possibilita o método retornar o valor mais rapidamente, já que não é mais necessário executar o método inteiro&lt;/li&gt;
&lt;li&gt;Foram trocados os valores fixos das categorias por constantes da classe &lt;code&gt;Produto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Objetivo alcançado: conseguimos deixar o código mais descritivo, separar os métodos e manter o mesmo funcionamento. E o mais importante: tudo isso foi feito de forma incremental.&lt;/p&gt;

&lt;p&gt;Talvez depois de um tempo outras melhorias possam sem aplicadas, mas o código já melhorou o suficiente por enquanto.&lt;/p&gt;

&lt;p&gt;Aliás, isso é o que todos nós deveríamos fazer: ao invés de você tentar abraçar o mundo e deixar seu código perfeito, tente deixá-lo o mais simples possível (e que atenda os requisitos, claro), e vá aperfeiçoando com o tempo.&lt;/p&gt;

&lt;p&gt;Até por que provavelmente você terá que realizar alterações nele depois, e aí você pode &amp;#8220;aparar as arestas&amp;#8221; e ir deixando cada vez melhor.&lt;/p&gt;

&lt;p&gt;Só não deixe seu código para trás sem revisá-lo antes, isso com certeza vai deixar alterações futuras muito mais custosas de serem feitas.&lt;/p&gt;

&lt;h2 id=&#34;certo-mas-e-se-o-prazo-estiver-apertado&#34;&gt;Certo, mas e se o prazo estiver apertado?&lt;/h2&gt;

&lt;p&gt;No ciclo de desenvolvimento de software, sempre existem os casos em que o prazo é bem apertado.&lt;/p&gt;

&lt;p&gt;Apesar de entender que precisamos de tempo suficiente para sempre testar nosso código e escrevê-lo bem, algumas vezes realmente não há saída: precisamos entregar e ponto.&lt;/p&gt;

&lt;p&gt;Nestes casos, precisamos sempre colocar na balança se vale a pena gastar mais tempo para projetar melhor a arquitetura, testar todas as nossas classes e revisar o código.&lt;/p&gt;

&lt;p&gt;O que não pode acontecer é utilizar estes argumentos como desculpas para não entregar a solução.&lt;/p&gt;

&lt;p&gt;Se há espaço para refinar o código e testá-lo, então eu recomendo que faça. Você vai agradecer um dia por ter feito isso.&lt;/p&gt;

&lt;p&gt;Caso a entrega seja de muita urgência, desenvolva de uma forma que conseguirá entregar no prazo. Mas também não use isso como desculpa para escrever qualquer código!&lt;/p&gt;

&lt;p&gt;Fique atento a boas práticas durante o desenvolvimento acelerado, seja nomeando suas variáveis e métodos melhor, quebrando os comportamento em classes menores, etc.&lt;/p&gt;

&lt;p&gt;Observe uma alteração pequena usando o exemplo anterior, mas que vai ajudar a tornar o código muito mais simples:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $vl;
    private $prods;

    // Adiciona um produto no carrinho
    // Passar um array de produtos
    public function adic($prods)
    {
        foreach ($prods as $prod) {
            // Categoria do produto -&amp;gt; P = Promocao
            if ($prod-&amp;gt;getCat() == &#39;P&#39;) {
                $vl = $prod-&amp;gt;getVl() * 0.75;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
                
            // Categoria do produto -&amp;gt; B = Brinde
            } elseif ($prod-&amp;gt;getCat() == &#39;B&#39;) {
                $vl = 0;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            
            // Sem categoria, utilizar o valor do produto
            } elseif ($prod-&amp;gt;getCat() == &#39;&#39;) {
                $vl = $prod-&amp;gt;getVl();
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Você acha que esses comentários são importantes para o código? E se um dia algum outro desenvolvedor alterar as siglas das categorias, você acha que os comentários serão atualizados?&lt;/p&gt;

&lt;p&gt;E se ao invés de adicionar comentários, você deixasse explícito o que cada variável e método faz por meio do nome deles?&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos)
    {
        foreach ($produtos as $produto) {
            if ($produto-&amp;gt;getCategoria() == &#39;PROMOCAO&#39;) {
                $valor = $produto-&amp;gt;getValor() * 0.75;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;BRINDE&#39;) {
                $valor = 0;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;&#39;) {
                $valor = $produto-&amp;gt;getValor();
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Veja que todos os comentários foram removidos. Ao invés de escrever o comportamento da classe nos comentários, os métodos e variáveis já dizem o que fazem e para o que servem.&lt;/p&gt;

&lt;p&gt;Por isso, por mais que o prazo seja apertado, sempre há um jeito de deixar o código mais limpo.&lt;/p&gt;

&lt;p&gt;Só não deixe de entregar o seu trabalho no prazo tentando fazer o código perfeito, isso talvez não valha tanto a pena no final.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Você provavelmente percebeu o valor de escrever código limpo.&lt;/p&gt;

&lt;p&gt;Isso no longo prazo faz uma enorme diferença, e é uma responsabilidade que todos nós programadores precisamos estar cientes. Não basta apenas escrever código, você tem que sempre pensar que outras pessoas também irão trabalhar nele.&lt;/p&gt;

&lt;p&gt;Por isso sempre procure aperfeiçoar suas habilidades não só para aprender outras linguagens, mas para melhorar o seu código em si, independente da linguagem que você trabalhe.&lt;/p&gt;

&lt;p&gt;E se você quer aprender como escrever código limpo, existem alguns livros que irão explicar os principais conceitos e técnicas.&lt;/p&gt;

&lt;p&gt;Um deles que eu recomendo é o &lt;a href=&#34;https://www.amazon.com.br/C%C3%B3digo-Limpo-Habilidades-Pr%C3%A1ticas-Softwar/dp/8576082675/ref=sr_1_1?ie=UTF8&amp;qid=1467162877&amp;sr=8-1&amp;keywords=c%C3%B3digo+limpo&#34; target=&#34;_blank&#34;&gt;Código Limpo, do Robert C. Martin (Uncle Bob)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Além disso, existem algumas práticas para auxiliar no projeto de classes e na implementação dos métodos, como &lt;em&gt;SOLID&lt;/em&gt; e &lt;em&gt;Object Calisthenics&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por fim, esta é a minha visão sobre qualidade de código, se você tiver outro ponto de vista ou algum complemento, escreva nos comentários!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>