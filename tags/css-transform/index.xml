<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css Transform on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/css-transform/index.xml</link>
    <description>Recent content in Css Transform on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/css-transform/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fazendo um slide menu mobile – sem plugin</title>
      <link>https://tableless.github.io/hugo-public/fazendo-um-slide-menu-mobile-sem-plugin/</link>
      <pubDate>Mon, 30 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/fazendo-um-slide-menu-mobile-sem-plugin/</guid>
      <description>

&lt;p&gt;Vou ensinar o básico para você que quer fazer um slide menu para mobile, isso quer dizer que você vai ter &lt;strong&gt;pouquíssimo&lt;/strong&gt; javascript. Por isso não vai ter swipe para fazer o menu aparecer.&lt;/p&gt;

&lt;h2 id=&#34;o-resultado&#34;&gt;O resultado&lt;/h2&gt;

&lt;p&gt;O resultado é bastante simples: você quer um menu como os apps nativos, daqueles que o menu fica escondido na esquerda e quando há um clique naqueles três &amp;#8220;risquinhos&amp;#8221; o menu sai da esquerda e vai para a direita. Geralmente, até a atualização do iOS7, o menu empurrava o conteúdo principal para o lado. Vamos fazer essa versão!&lt;/p&gt;

&lt;p&gt;Veja aqui o resultado final.&lt;/p&gt;

&lt;p data-height=&#34;401&#34; data-theme-id=&#34;1482&#34; data-slug-hash=&#34;ADnfr&#34; data-user=&#34;diegoeis&#34; data-default-tab=&#34;result&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/diegoeis/pen/ADnfr&#39;&gt;Slide menu 3&lt;/a&gt; by Diego Eis (&lt;a href=&#39;http://codepen.io/diegoeis&#39;&gt;@diegoeis&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;O código HTML pode ser feito de várias formas. O mais fácil é se você conseguir fazer uma versão mobile e desktop usando a mesma estrutura HTML para não precisar fazer ajustes malucos. O formato mais básico que você pode fazer é tirando o MENU de dentro do header, ficando com a estrutura nessa ordem: HEADER, MENU, MAIN. Como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
    &amp;lt;h1&amp;gt;LOGO&amp;lt;/h1&amp;gt;
    &amp;lt;input type=&#34;text&#34; value=&#34;busca&#34;&amp;gt;
        &amp;lt;span class=&#34;menu-anchor&#34;&amp;gt;Menu&amp;lt;/span&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;menu&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Produtos&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Servi&amp;ccedil;os&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Sobre&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Contato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/menu&amp;gt;

&amp;lt;section class=&#34;main&#34;&amp;gt;
   &amp;lt;p&amp;gt;Conte&amp;uacute;do do site&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Lembrando que se você não se sentir à vontade com essa estrutura, faça modificações para manter do jeito que você quer. Isso vai exigir adaptações também no CSS. Essa estrutura te facilita as coisas, embora danifique um pouquinho a semântica.&lt;/p&gt;

&lt;p&gt;Aquele SPAN ali é necessário. Você pode inserí-lo via Javascript em um mundo ideal, assim o código html original não fica tão sujo. Para não complicarmos este tutorial, vamos deixar ele direto no html, ok?&lt;/p&gt;

&lt;h2 id=&#34;o-javascript&#34;&gt;O Javascript&lt;/h2&gt;

&lt;p&gt;Coisa simples. Pudim de leite. Mamão com açúcar. Você não fará nada complexo, só precisa apenas incluir uma classe da tag HTML (ou body se preferir) para sabermos quando o menu está ativo. O código abaixo resolve bem.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.menu-anchor&#39;).on(&#39;click touchstart&#39;, function(e){
    $(&#39;html&#39;).toggleClass(&#39;menu-active&#39;);
    e.preventDefault();
});
&lt;/pre&gt;

&lt;p&gt;Na primeira linha capturamos o clique no elemento &lt;strong&gt;.menu-anchor&lt;/strong&gt;, que é o botão que terá os 3 risquinhos tradicionais. Note que eu também coloquei um outro evento para ser capturado chamado &lt;strong&gt;touchstart&lt;/strong&gt;. Este evento detecta quando o touch inicia na tela do aparelho. O &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent&#34;&gt;Javascript já entende esse evento&lt;/a&gt; nativamente. É interessante que ele esteja ali, para que os mobiles tenham uma performance e receptividade melhor. Geralmente com &lt;a href=&#34;https://www.google.com.br/search?client=safari&amp;amp;rls=en&amp;amp;q=click+mobile+delay&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;gws_rd=cr&amp;amp;ei=mFhHUsPyIpSI9ATun4HwDg&#34;&gt;o click o Safari Mobile tem um delay de 300ms&lt;/a&gt; para identificar a ação e só depois desse tempo ele executa. Com o &lt;strong&gt;touchstart&lt;/strong&gt; previnimos isso, fazendo-o executar a função assim que o touch iniciar. É necessário ter o click também para contemplarmos aparelhos que usam ponteiros, como o mouse. Aparelhos que suportam ponteiros e touch estão se popularizando desde o lançamento do Windows 8.&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Agora iniciamos a mágica do CSS. Suponha que você já tenha o layout pronto, posicionando o menu onde ele deveria ficar quando aberto. Como esse exemplo:&lt;/p&gt;

&lt;p data-height=&#34;375&#34; data-theme-id=&#34;0&#34; data-slug-hash=&#34;pCiah&#34; data-user=&#34;diegoeis&#34; data-default-tab=&#34;result&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/diegoeis/pen/pCiah&#39;&gt;pCiah&lt;/a&gt; by Diego Eis (&lt;a href=&#39;http://codepen.io/diegoeis&#39;&gt;@diegoeis&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Note que o menu ainda está em cima do HEADER e do MAIN. Vamos então deslocá-lo de forma que ele fique escondido, fora do viewport. Assim que o script acima for executado e inserir a classe &lt;strong&gt;menu-active&lt;/strong&gt; no HTML, você muda a posição do menu, fazendo-o reaparecer na posição original.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Simuladores ajudam muito, mas só bata o martelo se você já tiver testado em alguns aparelhos reais, só assim você vai ter certeza do tamanho da tela, utilização real, performance e outros ajustes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sua primeira reação pode ser essa: &amp;#8220;é bico: basta fazer uma jogadkmha com position, manipulando o valor da propriedade left e pronto&amp;#8221;. Aí você testa em tudo quanto é simulador (eu uso o nativo do iPhone no Mac) e vê que tudo funciona bem. O código fica mais ou menos assim:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Não esqueça de usar os prefixos de browser nas propriedades transition e transform&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* posicionando pra fora do viewport */
.menu {
   left: -220px;
   transition: left .25s linear;
}

/* quando o script inserir a classe, nós retornamos o menu para a posição original */
.menu-active .menu {
   left: 0;
}
&lt;/pre&gt;

&lt;p&gt;Mas aí você testa em um aparelho de verdade e vê que a animação tem um lag maldito. O problema é que fazer animação com position é uma desgraça! Quando animamos os valores de position do CSS, há uma carga de processamento muito grande do browser para fazer tudo aqui acontecer. Você só percebe a olho nu quando testa direto nos aparelhos. E aqui vai outra dica: use sempre aparelhos para testar suas versões. Simuladores ajudam muito, mas só bata o martelo se você já tiver testado em alguns aparelhos reais, só assim você vai ter certeza do tamanho da tela, utilização real, performance e outros ajustes.&lt;/p&gt;

&lt;h3 id=&#34;css-repainting&#34;&gt;CSS Repainting&lt;/h3&gt;

&lt;p&gt;Se você não leu ainda o estudo que o Paul Irish fez &lt;a href=&#34;http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/&#34;&gt;sobre movimentar elementos usando translate em vez de position, vá agora lá e leia&lt;/a&gt;. Ele também comenta que o &lt;a href=&#34;http://css-tricks.com/tale-of-animation-performance/&#34;&gt;Chris Coyier fez um estudo antes também&lt;/a&gt;. Estou preparando um artigo sobre o assunto que logo mais será publicado aqui no Tableless.&lt;/p&gt;

&lt;p&gt;Quando você posiciona qualquer elemento em um determinado lugar da tela utilizando coordenadas em position, o browser redenha aquele elemento naquela coordenada que você definiu. Quando você faz uma animação, onde você muda a coordenada seguidamente, o browser redesenha aquele elemento pixel por pixel durante toda a animação. Em um ou outra animação no desktop fica difícil ver a olho nu a força que o browser está fazendo. Mas quando usamos o inspector e monitoramos os frames, você percebe que o browser passa muito tempo redesenhando o elemento na tela, pixel por pixel, passo a passo durante toda a animação.&lt;/p&gt;

&lt;p&gt;No inspector você pode perceber exatamente o que browser faz quando vai na parte de TIMELINE &amp;gt; FRAME, percebe o processo executado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/09/Screen-Shot-2013-09-29-at-8.40.25-PM.png&#34; alt=&#34;Screen Shot 2013-09-29 at 8.40.25 PM&#34; width=&#34;949&#34; height=&#34;432&#34; class=&#34;alignnone size-full wp-image-39086&#34; srcset=&#34;uploads/2013/09/Screen-Shot-2013-09-29-at-8.40.25-PM.png 949w, uploads/2013/09/Screen-Shot-2013-09-29-at-8.40.25-PM-329x149.png 329w, uploads/2013/09/Screen-Shot-2013-09-29-at-8.40.25-PM-588x267.png 588w, uploads/2013/09/Screen-Shot-2013-09-29-at-8.40.25-PM-660x300.png 660w&#34; sizes=&#34;(max-width: 949px) 100vw, 949px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Quando usamos o top/left, o browser leva um tempo muito grande para redesenhar cada frame da animação, o que resulta em uma animação ruim, nada suave. Se o elemento utiliza muitos detalhes como sombras, bordas, transparências e etc, o browser consome muito processamento para gerar todos esses efeitos. Se há uma sombra atrás do elemento por exemplo, o browser tem que calcular todo o gradiente semi-transparente que essa sombra gera com o background da página a todo momento.&lt;/p&gt;

&lt;p&gt;Ao fazermos a animação usando o translate da propriedade transform do CSS3, todo esse cálculo é feito diretamente pela GPU, em uma linha de processamento própria chamada RenderLayer, usando a placa de vídeo do aparelho para calcular tudo isso. Qualquer transformação 2D, 3D, mudanças de opacidade e tudo mais é executado pela GPU do dispositivo, fazendo uma animação mais suave.&lt;/p&gt;

&lt;p&gt;Veja uma comparação abaixo. Do lado esquerdo é uma animação usando posicionamento normal, com absolute, top/left. Do lado direito é usando o CSS Transform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/09/timeline-frames-macbook1.png&#34; alt=&#34;timeline-frames-macbook1&#34; width=&#34;720&#34; height=&#34;193&#34; class=&#34;alignnone size-full wp-image-39087&#34; srcset=&#34;uploads/2013/09/timeline-frames-macbook1.png 720w, uploads/2013/09/timeline-frames-macbook1-329x88.png 329w, uploads/2013/09/timeline-frames-macbook1-588x157.png 588w, uploads/2013/09/timeline-frames-macbook1-660x176.png 660w&#34; sizes=&#34;(max-width: 720px) 100vw, 720px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As barras verdes indicam o quanto o elemento foi redesenhado na tela.&lt;/p&gt;

&lt;p&gt;Se você ainda não parou pra entender essa ferramenta do inspector, me faça um favor e vai lá dar uma olhadinha. No Chrome é melhor.&lt;/p&gt;

&lt;h3 id=&#34;animando-as-coisas-com-translate&#34;&gt;Animando as coisas com translate&lt;/h3&gt;

&lt;p&gt;Se você não sabe ainda o que é o translate, sugiro que pare aqui e &lt;a href=&#34;http://tableless.com.br/css-transforms/&#34;&gt;leia agora esse artigo&lt;/a&gt;. Agora que você sabe o básico sobre a performance do translate e top/left, vamos voltar à nossa programação normal. Você vai precisar mover 3 elementos: o header, o main e o menu. O HEADER e o MAIN começarão com o valor inicial de 0, obviamente por que eles estarão em seus lugares originais, o código fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/*
   Essa é a posição original do HEADER e do MAIN
*/
header, .main {
    -webkit-transform: translateX(0);
}
&lt;/pre&gt;

&lt;p&gt;Agora temos que colocar o MENU para fora da tela, essa vai se a posição inicial dele. O código fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/*
   Aqui você esconde o menu para fora da tela 
   O valor é exatamente a largura da sidebar
*/
menu {
    transform: translateX(-220px);
}
&lt;/pre&gt;

&lt;p&gt;O valor ali é exatamente o valor da largura do MENU. E esse será o valor que iremos colocar no translate final do HEADER e do MAIN.&lt;/p&gt;

&lt;p&gt;Lembra-se do processo? Quando clicarmos nos 3 risquinhos, o javascript adiciona a classe &lt;strong&gt;menu-active&lt;/strong&gt; na tag HTML. Quando houver essa classe, o HEADER e o MAIN tem o valor do translate alterado, empurrando-os para a direta. O MENU também terá seu translate alterado, para o valor 0, fazendo-o voltar para a tela. O código mostrando essas diferenças é o que segue abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/*
   Com a classe menu-active na tag HTML
*/
.menu-active menu {
    transform: translateX(0);
}

.menu-active header, 
.menu-active .main {
    transform: translateX(220px);
}
&lt;/pre&gt;

&lt;p&gt;Maravilha! Veja como está agora sem animação:&lt;/p&gt;

&lt;p data-height=&#34;393&#34; data-theme-id=&#34;0&#34; data-slug-hash=&#34;kBmDJ&#34; data-user=&#34;diegoeis&#34; data-default-tab=&#34;result&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/diegoeis/pen/kBmDJ&#39;&gt;Slide menu 2&lt;/a&gt; by Diego Eis (&lt;a href=&#39;http://codepen.io/diegoeis&#39;&gt;@diegoeis&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Vamos inserir agora a animação. Usaremos para isso a propriedade transition do CSS3. Se você não conhece essa propriedade, leia &lt;a href=&#34;http://tableless.com.br/transition-e-animation/&#34;&gt;esse&lt;/a&gt;, &lt;a href=&#34;http://tableless.com.br/introducao-ao-css-animation/&#34;&gt;esse&lt;/a&gt; e &lt;a href=&#34;http://tableless.com.br/introducao-ao-css-animation/&#34;&gt;esse&lt;/a&gt; artigo para entender melhor.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/*
    Aqui você esconde o menu para fora da tela 
    O valor é exatamente a largura da sidebar
*/
menu {
    transform: translateX(-220px);
    transition: all .25s linear;
}

/*
    Essa é a posição original do HEADER e do MAIN
*/
header, .main {
    transform: translateX(0);
    transition: all .25s linear;
}
&lt;/pre&gt;

&lt;p&gt;Veja o resultado final com animação:&lt;/p&gt;

&lt;p data-height=&#34;401&#34; data-theme-id=&#34;1482&#34; data-slug-hash=&#34;ADnfr&#34; data-user=&#34;diegoeis&#34; data-default-tab=&#34;result&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/diegoeis/pen/ADnfr&#39;&gt;Slide menu 3&lt;/a&gt; by Diego Eis (&lt;a href=&#39;http://codepen.io/diegoeis&#39;&gt;@diegoeis&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;E eu acho que é só. Se quiser ver direto no seu aparelho, visite este endereço: &lt;a href=&#34;http://cdpn.io/ADnfr&#34;&gt;http://cdpn.io/ADnfr&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>