<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cache on Tableless</title>
    <link>http://tableless.com.br/tags/cache/index.xml</link>
    <description>Recent content in Cache on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/cache/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Acelere o carregamento de seu site com PHP Caching</title>
      <link>http://tableless.com.br/acelere-o-carregamento-de-seu-site-com-php-caching/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/acelere-o-carregamento-de-seu-site-com-php-caching/</guid>
      <description>

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Criar um site dinâmico, de fácil manutenção e que carregue rápido é o desejo de todo desenvolvedor, mas para isso não existe uma fórmula mágica, é necessário conciliar diferentes ferramentas e técnicas. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Mas muitos desenvolvedores iniciantes em PHP não conhecem as soluções existentes ou tem medo da curva de aprendizado que os frameworks exigem.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;O foco desse artigo é mostrar para esses desenvolvedores como uma técnica simples, utilizando apenas comandos básicos do PHP, pode acelerar o carregamento de seu site e evitar que ele fique caindo.&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;o-problema-a-ser-resolvido-processamento-desnecessário&#34;&gt;O problema a ser resolvido, processamento desnecessário&lt;/h3&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Para cada acesso a um site dinâmico, o servidor geralmente realiza consultas no banco de dados, executa blocos de códigos e entrega uma página pronta para exibição.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Mesmo que os acessos a uma página ocorram com poucos segundos de diferença e nada no conteúdo tenha sido alterado, o servidor irá fazer o mesmo processo para cada solicitação, quantas vezes for preciso.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Isto é um trabalho desnecessário e que exige muito processamento do servidor, principalmente em momentos de tráfego intenso, e se o servidor não der conta, o seu site ficará temporariamente fora do ar.&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-solução-php-caching&#34;&gt;A solução, PHP Caching&lt;/h3&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Também conhecido como Cache de Objetos, essa técnica executa uma página PHP e armazena o conteúdo gerado em um arquivo HTML, e para os próximos acessos, durante um certo período, o servidor irá entregar esse HTML gerado.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Sem a necessidade de consultar o banco de dados ou executar algum tipo de programação para montar a página, o servidor além de conseguir entregar uma página mais rapidamente, também suportará um número maior de acessos concorrentes.&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;qual-o-ganho-na-performance&#34;&gt;&lt;strong&gt;Qual o ganho na performance?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Vai depender muito da programação do site, mas quanto mais ações forem realizadas no backend, maior será o ganho. Veja abaixo os resultados obtidos durante um teste:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-55365 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/07/phpcaching-benchmarks.jpg&#34; width=&#34;1180&#34; height=&#34;393&#34; /&gt;A versão dinâmica foi entregue em 318 ms e a versão cacheada em 14 ms, 23 vezes mais rápido.&lt;/p&gt;

&lt;h2 id=&#34;desenvolvimento&#34;&gt;Desenvolvimento&lt;/h2&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Chega de teoria e vamos para a prática, criaremos juntos um exemplo que seja o mais simples possível.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Primeiro crie uma pasta no seu ambiente de desenvolvimento chamada &lt;code&gt;phpcaching&lt;/code&gt;, dentro dela crie outras duas pastas, uma chamada &lt;code&gt;paginas&lt;/code&gt; onde iremos armazenar as páginas dinâmicas em PHP e outra chamada &lt;code&gt;cache&lt;/code&gt; que irá armazenar os arquivos HTML.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Dentro da pasta &lt;code&gt;paginas&lt;/code&gt; crie um arquivo chamado &lt;code&gt;index.php&lt;/code&gt;, com o código:&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;font-weight: 400&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;font-weight: 400&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span style=&#34;font-weight: 400&#34;&gt;    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;font-weight: 400&#34;&gt;    &amp;lt;title&amp;gt;PHP Caching&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span style=&#34;font-weight: 400&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span style=&#34;font-weight: 400&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span style=&#34;font-weight: 400&#34;&gt;    &amp;lt;p&amp;gt;Página gerada em: &amp;lt;?php echo date(&#39;H:i:s&#39;) ?&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span style=&#34;font-weight: 400&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span style=&#34;font-weight: 400&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Teste a página que acabamos de criar, acessando ela pelo navegador, no meu caso o endereço é: &lt;code&gt;&lt;a href=&#34;http://localhost/phpcaching/paginas/index.php&#34;&gt;http://localhost/phpcaching/paginas/index.php&lt;/a&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Você verá uma página simples, que apenas mostra o horário atual toda vez que é acessada.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Agora vamos criar o nosso controlador de cache, que irá funcionar da seguinte maneira:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-55366 &#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/07/phpcaching-diagrama-de-atividades.jpg&#34; width=&#34;551&#34; height=&#34;551&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Sabendo a lógica de funcionamento, fica mais fácil programar nosso controlador. Crie na raiz do projeto um arquivo chamado &lt;code&gt;index.php&lt;/code&gt; com o seguinte código:&lt;/span&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
// Configurações
$validadeEmSegundos = 60;
$arquivoCache = &#39;cache/index.html&#39;;
$urlDinamica = &#39;http://localhost/phpcaching/paginas/index.php&#39;;

// Verifica se o arquivo cache existe e se ainda é válido
if (file_exists($arquivoCache) &amp;&amp; (filemtime($arquivoCache) &amp;gt; time() - $validadeEmSegundos)) {

    // Lê o arquivo cacheado
    $conteudo = file_get_contents($arquivoCache);
} else {

    // Acessa a versão dinâmica
    $conteudo = file_get_contents($urlDinamica);

    // Cria o cache
    file_put_contents($arquivoCache, $conteudo);
}

// Exibe o conteúdo da página
echo $conteudo;
&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Vou explicar as funções utilizadas para caso você não conheça alguma delas:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;&lt;code&gt;file_exists&lt;/code&gt;: verifica se um arquivo existe&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;&lt;code&gt;file_get_contents&lt;/code&gt;: lê o conteúdo de um arquivo&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;&lt;code&gt;file_put_contents&lt;/code&gt;: escreve o conteúdo em um arquivo&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;&lt;code&gt;filemtime&lt;/code&gt;: retorna o horário que o arquivo foi modificado&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;&lt;code&gt;time&lt;/code&gt;: retorna o horário atual&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Agora acesse o site através do controlador de cache, no meu caso &lt;code&gt;&lt;a href=&#34;http://localhost/phpcaching/&#34;&gt;http://localhost/phpcaching/&lt;/a&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Repare que o horário aparece como anteriormente, mas se atualizarmos a página o horário não muda. Isto acontece porque a página exibida é a versão cacheada, que foi armazenada na pasta &lt;code&gt;cache&lt;/code&gt; com o nome &lt;code&gt;index.html&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Pronto, nossa solução para cachear páginas está criada.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Esta técnica é uma maneira eficaz de aumentar a performance de seu site, sem precisar instalar algo no servidor ou algum framework no seu projeto e é recomendada para quem está iniciando no assunto.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;O código apresentado não é uma solução definitiva, mas uma base que podemos expandir de acordo com as necessidades de cada projeto, crie sua versão melhorada, faça um teste com um projeto que você já possua e analise a diferença no tempo de carregamento do site.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Eu utilizo essa técnica em um portal de notícias da minha região, e apesar do site já ter sido migrado de servidor algumas vezes, o código nunca precisou de alteração, essa é a vantagem de utilizar apenas comandos básicos do PHP.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400&#34;&gt;Continuem os estudos e que a performance esteja com você.&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cache busting: entrega inteligente de assets</title>
      <link>http://tableless.com.br/cache-busting-entrega-inteligente-de-assets/</link>
      <pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/cache-busting-entrega-inteligente-de-assets/</guid>
      <description>

&lt;h2 id=&#34;definição&#34;&gt;Definição&lt;/h2&gt;

&lt;p&gt;Cache busting nada mais é do que uma técnica para contornar o problema do carregamento de versões antigas dos assets armazenados em cache no navegador do cliente.&lt;/p&gt;

&lt;h2 id=&#34;problema&#34;&gt;Problema&lt;/h2&gt;

&lt;p&gt;Na verdade, essa é uma questão de longa data. Muitos desenvolvedores utilizam-se do incremento de variáveis com códigos aleatórios no final das chamadas (querystrings) dos assets para contornar o problema, o que, de acordo com &lt;a href=&#34;http://stevesouders.com/&#34;&gt;Steve Souders&lt;/a&gt;, guru em performance de sites na web, não é uma boa prática.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;assets/main.css?v=786523&#34;&amp;gt; &amp;lt;!-- NÃO RECOMENDADO! --&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Segundo Souders, &lt;a href=&#34;http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/&#34;&gt;o uso de querystrings não é bom&lt;/a&gt; porque faz com que normalmente o browser recarregue o asset da origem. Para o ambiente de desenvolvimento isso seria o ideal. Para o usuário final isso não seria bom, pois o comportamento de seu navegador seria alterado em termos do número de conexões que são abertas, ignorando o uso do cache e comprometendo a performance de carregamento da página.&lt;/p&gt;

&lt;h2 id=&#34;solução&#34;&gt;Solução&lt;/h2&gt;

&lt;p&gt;Para resolver o problema sem a utilização de querystrings, o ideal é que todos os arquivos de assets que estão sendo requisitados na página sejam renomeados. Logicamente que as chamadas para esses assets renomeados também precisam ser atualizadas na página. Sabemos que fazer esse processo manualmente seria algo árduo, quase insano. Então como fazê-lo de forma elegante, automatizada?&lt;/p&gt;

&lt;p&gt;A fórmula mágica para que isso aconteça de maneira prática é o &lt;a href=&#34;https://github.com/hollandben/grunt-cache-bust&#34;&gt;grunt-cache-bust&lt;/a&gt;, um plugin para o &lt;a href=&#34;http://tableless.com.br/grunt-voce-deveria-estar-usando/&#34;&gt;Grunt&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;show-me-the-code&#34;&gt;Show me the code&lt;/h3&gt;

&lt;p&gt;Vou supor que você já conhece o &lt;a href=&#34;http://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt; e que há uma &lt;em&gt;index.html&lt;/em&gt; na raiz de seu projeto, ok? Sendo assim, irei focar apenas na utilização do plugin.&lt;/p&gt;

&lt;p&gt;A princípio você só precisa seguir 4 passos básicos para usar o grunt-cache-bust:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Instale o plugin usando o seguinte comando:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&#34;lang-sh&#34;&gt;npm install grunt-cache-bust --save-dev
&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Em seu &lt;em&gt;Gruntfile.js&lt;/em&gt;, adicione a seguinte propriedade ao objeto passado como parâmetro em &lt;em&gt;grunt.initConfig&lt;/em&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&#34;lang-js&#34;&gt;cacheBust: {
  options: {
    encoding: &#39;utf8&#39;,
    length: 16
  },
  scripts: {
    files: [{
      src: [&#39;index.html&#39;]
    }]
  }
}
&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Ainda em seu &lt;em&gt;Gruntfile.js&lt;/em&gt;, adicione a seguinte linha para ativar o plugin:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&#34;lang-js&#34;&gt;grunt.loadNpmTasks(&#39;grunt-cache-bust&#39;);
&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Tudo certo, agora é só rodar a task e voilà!&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&#34;lang-sh&#34;&gt;grunt cacheBust
&lt;/pre&gt;

&lt;h3 id=&#34;resultado&#34;&gt;Resultado&lt;/h3&gt;

&lt;p&gt;Lembra que na raíz de seu projeto há uma &lt;em&gt;index.html&lt;/em&gt;? Então, basicamente a task vai varrer esse documento buscando por chamadas de assets (CSS, JS, imagens e favicons), copiar esses arquivos com um novo nome e atualizar o source de cada chamada encontrada com o novo nome do arquivo. Esse novo nome terá o formato {nome}.{hash}.{extensão}, onde {hash} seria um código aleatório.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;index.html&lt;/em&gt; antes:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script src=&#34;assets/main.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;index.html&lt;/em&gt; depois:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script src=&#34;assets/main.6419373d85d7afe3.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Lindo, né?&lt;/p&gt;

&lt;p&gt;Vale lembrar que o plugin irá ignorar automaticamente chamadas que apontam para CDNs.&lt;/p&gt;

&lt;p&gt;A propriedade &lt;a href=&#34;https://github.com/hollandben/grunt-cache-bust#options&#34;&gt;options&lt;/a&gt; do plugin oferece uma porção de possibilidades interessantes que flexibilizam a utilização do cache busting, como por exemplo manter ou não os arquivos originais dos assets requisitados, escolher o algoritmo e tamanho das hashes, ignorar chamadas de assets através de regex, etc. Enfim, considere dar uma boa olhada na &lt;a href=&#34;https://github.com/hollandben/grunt-cache-bust#getting-started&#34;&gt;documentação oficial do plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Cache busting é algo realmente útil no ciclo de desenvolvimento web. Chega de &lt;em&gt;Cmd+Shift+R&lt;/em&gt; ou &lt;em&gt;Ctrl+F5&lt;/em&gt;, né?&lt;/p&gt;

&lt;p&gt;Se você tem alguma outra solução para essa questão, utilizando Gulp ou outra ferramenta, conta pra gente aqui nos comentários. A comunidade agradece! ;D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Otimizando seu site em WordPress para SEO</title>
      <link>http://tableless.com.br/otimizando-site-wordpress-seo/</link>
      <pubDate>Thu, 17 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/otimizando-site-wordpress-seo/</guid>
      <description>

&lt;p&gt;Uma característica que defina o WordPress é a &lt;strong&gt;customização&lt;/strong&gt;. Em poucas linhas conseguimos soluções significantes. Seja trabalhando com suas funções ou com seus plugins, temos resultados objetivos para preparar um Blog e até mesmo um site de grande porte, como temos hoje, vários exemplos disso.&lt;/p&gt;

&lt;p&gt;Elogiam muito o WordPress por ele ter uma facilidade para &lt;a href=&#34;http://www.oitobitdigital.com.br/servico/otimizacao-de-sites-seo/&#34;&gt;otimização de sites&lt;/a&gt; (SEO). Antes de começarem a ler as dicas que vou citar, faça a seguinte reflexão: O que é um site hoje, sem ser bem indexado pelos mecanismos de busca?&lt;/p&gt;

&lt;h3 id=&#34;melhore-a-tag-title-do-seu-site&#34;&gt;Melhore a tag title do seu site&lt;/h3&gt;

&lt;p&gt;Você acha mesmo que a tag de título do seu site não tem importância? Espero que não, pois é com ela que os mecanismos de busca reconhecem uma das primeiras informações do seu site.&lt;/p&gt;

&lt;p&gt;Coloque o seu título da seguinte forma:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&lt;title&gt;
  &amp;lt;?php wp_title(“|”, true, ‘right’); ?&amp;gt;&amp;lt;?php bloginfo(‘name’); ?&amp;gt;
&lt;/title&gt;[/cce]&lt;/p&gt;

&lt;p&gt;A função &lt;strong&gt;wp_title&lt;/strong&gt; imprime vários resultados a depender da sua página.&lt;/p&gt;

&lt;h3 id=&#34;links-permanentes-permalinks&#34;&gt;Links permanentes (Permalinks)&lt;/h3&gt;

&lt;p&gt;Quem usa WordPress e não usa essa função básica, não sabe o que está perdendo. A URL também tem uma função importante para indexação de sites, pois também é reconhecido antes da página ser carregada. O seu site sairia na frente de diversas URL’s que usam aqueles parâmetros grandes e sem semântica.&lt;/p&gt;

&lt;p&gt;Dentro de seu painel de administração, procure por Settings (Configurações) e depois Links Permanentes (Permalinks). Selecione a opção Custom Structure (Estrutura Personalizada) e altere sua estrutura para:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;html&amp;#8221;]/%category%/%postname%/[/cce]&lt;/p&gt;

&lt;h3 id=&#34;otimizando-as-metas-do-seu-site&#34;&gt;Otimizando as metas do seu site&lt;/h3&gt;

&lt;p&gt;Para otimizar as metas, utilize o plug-in &lt;a href=&#34;http://wordpress.org/extend/plugins/all-in-one-seo-pack/&#34; title=&#34;Plug-in All in One SEO Pack&#34;&gt;All in One SEO Pack&lt;/a&gt;, com esse plug-in conseguimos facilmente manipular as metas e também títulos do site. Com ele, alteram-se as metas de descrição e keywords (palavras-chave) da página inicial e também dos posts, além dos títulos de cada página.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org/extend/plugins/all-in-one-seo-pack/&#34; title=&#34;Plug-in All in One SEO Pack&#34;&gt;Baixe o plug-in&lt;/a&gt;, instale-o e ative.&lt;/p&gt;

&lt;h3 id=&#34;mecanismos-de-busca-odeiam-spam&#34;&gt;Mecanismos de busca odeiam SPAM&lt;/h3&gt;

&lt;p&gt;Os mecanismos de busca odeiam SPAM, ou seja, odeiam conteúdo ruim e/ou desnecessário. Existe um plug-in que modera spam no seu site, chama-se Akismet. Geralmente ele já é incluído quando você instala o WordPress, mas caso não encontre depois que instalar, &lt;a href=&#34;http://wordpress.org/extend/plugins/akismet/&#34; title=&#34;Akismet plug-in&#34;&gt;baixe-o&lt;/a&gt; e ative-o.&lt;/p&gt;

&lt;p&gt;Para usar do plug-in é necessário resgatar um código gerado pelo &lt;a href=&#34;http://akismet.com/&#34; title=&#34;Site Akismet&#34;&gt;site&lt;/a&gt; deles.&lt;/p&gt;

&lt;h3 id=&#34;use-semântica-no-seu-código&#34;&gt;Use semântica no seu código&lt;/h3&gt;

&lt;p&gt;Do que adianta ter todos esses aperfeiçoamentos no seu site e seu site não estiver com um código semântico? Por isso trabalhe com um código de qualidade para que não haja dificuldade para seu código ser lido pelos mecanismos de busca.&lt;/p&gt;

&lt;p&gt;Use alt e title para as imagens, não esqueçam, pois as imagens só podem ser lidas desta maneira. Trabalhe bem com as tags de título &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;, e estabeleça uma hierarquia entre elas.&lt;/p&gt;

&lt;h3 id=&#34;utilize-sempre-um-plug-in-de-cache&#34;&gt;Utilize sempre um plug-in de cache&lt;/h3&gt;

&lt;p&gt;A partir da demanda do seu site e ele for crescendo em questão de conteúdo, é sempre bom ter um plug-in de cache para diminuir o carregamento da sua página, sendo assim os mecanismos de busca não terão dificuldades para carregar seu site.&lt;/p&gt;

&lt;p&gt;Indico &lt;a href=&#34;http://wordpress.org/extend/plugins/wp-super-cache/&#34; title=&#34;WP Super Cache&#34;&gt;WP Super Cache&lt;/a&gt;, &lt;a href=&#34;http://wordpress.org/extend/plugins/wp-super-cache/&#34; title=&#34;W3 Total Cache&#34;&gt;W3 Total Cache&lt;/a&gt;, &lt;a href=&#34;http://wordpress.org/extend/plugins/batcache/&#34; title=&#34;Batcache&#34;&gt;Batcache&lt;/a&gt; ou &lt;a href=&#34;http://wordpress.org/extend/plugins/hyper-cache/&#34; title=&#34;Hyper Cache&#34;&gt;Hyper Cache.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tenho certeza que com um deles, seu site estará em boas mãos em relação ao cache.&lt;/p&gt;

&lt;h3 id=&#34;sitemaps-mapa-do-site&#34;&gt;Sitemaps (mapa do site)&lt;/h3&gt;

&lt;p&gt;Para os mecanismos de busca, um sitemap ajuda nas buscas de páginas, pois ele relaciona as URL existentes no seu site. Leia esse &lt;a href=&#34;http://tableless.com.br/seo-sitemaps&#34; title=&#34;Artigo SEO Sitemaps Tableless&#34;&gt;artigo&lt;/a&gt; e veja o porquê do uso de sitemaps.&lt;/p&gt;

&lt;p&gt;O WordPress tem um plug-in que gera um sitemap já otimizado para mecanismos de busca.&lt;/p&gt;

&lt;p&gt;Use o &lt;a href=&#34;http://wordpress.org/extend/plugins/google-sitemap-generator/&#34; title=&#34;Plug-in Google SiteMap Generator&#34;&gt;Google SiteMap Generator&lt;/a&gt; e não tenha possíveis problemas para este assunto.&lt;/p&gt;

&lt;h3 id=&#34;crie-um-bom-meta-robôs&#34;&gt;Crie um bom Meta Robôs&lt;/h3&gt;

&lt;p&gt;É importante você ter um robots.txt na raiz do seu site, que é um arquivo funciona como filtro para os Crawlers e os robôs dos mecanismos de busca, permitindo ou não acesso a páginas do seu site.&lt;/p&gt;

&lt;p&gt;Crie um arquivo em txt, chamado robots.txt com o seguinte código:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;p&gt;User-agent: *&lt;/p&gt;

&lt;p&gt;Disallow: /cgi-bin&lt;/p&gt;

&lt;p&gt;Disallow: /wp-admin&lt;/p&gt;

&lt;p&gt;Disallow: /wp-includes&lt;/p&gt;

&lt;p&gt;Disallow: /wp-content/plugins&lt;/p&gt;

&lt;p&gt;Disallow: /wp-content/cache&lt;/p&gt;

&lt;p&gt;Disallow: /wp-content/themes&lt;/p&gt;

&lt;p&gt;Disallow: /trackback&lt;/p&gt;

&lt;p&gt;Disallow: /feed&lt;/p&gt;

&lt;p&gt;Disallow: /comments&lt;/p&gt;

&lt;p&gt;Disallow: /category/*/*&lt;/p&gt;

&lt;p&gt;Disallow: */trackback&lt;/p&gt;

&lt;p&gt;Disallow: */feed&lt;/p&gt;

&lt;p&gt;Disallow: */comments&lt;/p&gt;

&lt;p&gt;Disallow: /*?*&lt;/p&gt;

&lt;p&gt;Disallow: /*?&lt;/p&gt;

&lt;p&gt;Allow: /wp-content/uploads&lt;/p&gt;

&lt;p&gt;# Google Image&lt;/p&gt;

&lt;p&gt;User-agent: Googlebot-Image&lt;/p&gt;

&lt;p&gt;Disallow:&lt;/p&gt;

&lt;p&gt;Allow: /*&lt;/p&gt;

&lt;p&gt;# Google AdSense&lt;/p&gt;

&lt;p&gt;User-agent: Mediapartners-Google*&lt;/p&gt;

&lt;p&gt;Disallow:&lt;/p&gt;

&lt;p&gt;Allow: /*&lt;/p&gt;

&lt;p&gt;# digg mirror&lt;/p&gt;

&lt;p&gt;User-agent: duggmirror&lt;/p&gt;

&lt;p&gt;Disallow: /&lt;/p&gt;

&lt;p&gt;Sitemap: &lt;a href=&#34;http://www.seusite.com.br/sitemap.xml&#34;&gt;http://www.seusite.com.br/sitemap.xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;Envie para o servidor e ponha na raiz do seu site.&lt;/p&gt;

&lt;p&gt;E no header.php do seu tema, adicione o código:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&amp;lt;?php&lt;/p&gt;

&lt;p&gt;if(is_single() || is_page() || is_category() || is_home()) {&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;meta name=&amp;#8221;robots&amp;#8221; content=&amp;#8221;all,noodp&amp;#8221; /&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;else if(is_archive()) {&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;meta name=&amp;#8221;robots&amp;#8221; content=&amp;#8221;noarchive,noodp&amp;#8221; /&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;else if(is_search() || is_404()) {&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;meta name=&amp;#8221;robots&amp;#8221; content=&amp;#8221;noindex,noarchive&amp;#8221; /&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;?&amp;gt;&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;faça-um-bom-conteúdo&#34;&gt;Faça um bom conteúdo&lt;/h3&gt;

&lt;p&gt;Não adianta ter um site todo otimizado para os mecanismos e eles não terem o que buscar de conteúdo no seu site. Fazer um bom conteúdo é essencial para qualquer indexação de artigo, página, textos ect.&lt;/p&gt;

&lt;p&gt;Também não se esqueça de trabalhar com as redes sociais, pois maior quantidade de links gerados para o seu site, maior relevância ele terá.&lt;/p&gt;

&lt;p&gt;Seja sempre objetivo e claro na suas publicações, tenho certeza que terá um bom resultado. Vale ressaltar que o Google está punindo quem copia conteúdo, muito cuidado.&lt;/p&gt;

&lt;p&gt;Caso tenha futuras dúvidas, o WordPress oferece no seu codex um &lt;a href=&#34;http://codex.wordpress.org/Search_Engine_Optimization_for_WordPress&#34; title=&#34;Guia para otimização de SEO WordPress&#34;&gt;guia para otimização de SEO&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>