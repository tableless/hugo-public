<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Submenu on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/submenu/index.xml</link>
    <description>Recent content in Submenu on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/submenu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Navegando com a jQuery</title>
      <link>https://tableless.github.io/hugo-public/navegando-com-a-jquery/</link>
      <pubDate>Thu, 11 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/navegando-com-a-jquery/</guid>
      <description>&lt;p&gt;Para os designers, familiarizar-se com a jQuery é um ato muito sutil. Isso se deve ao fato da mesma basear-se em um comando ( jQuery ou o seu atalho $ ) que referencia elementos e assim atribuir valores ou aplicar ações a eles. O mais interessante é que usamos as mesmas chamadas que usamos para referenciar elementos quando trabalhamos com CSS. Logo:&lt;/p&gt;

&lt;pre&gt;$(&#39;p&#39;) // Chama todos os paragrafos
$(&#39;.menu&#39;) // Chama os elementos que contenham a classe menu
$(&#39;#caixas .chamada&#39;) // Chama os elementos .chamada que estão dentro de #caixas
$(&#39;.menu, .box&#39;) // Chama a classe menu e a classe box
$(&#39;#lista *&#39;) // Chama todos os elementos que estão dentro de #lista&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;A jQuery ainda implementa algumas chamadas especiais, baseadas no CSS3.&lt;/p&gt;

&lt;pre&gt;$(&#39;#menu &amp;gt; li&#39;) // chama os li&#39;s filhos direto de #menu, exclui #menu li li
$(&#39;label + input&#39;) // chama apenas os inputs que tiveram um label antes &amp;lt;label&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;input /&amp;gt;
$(&#39;.galeria ~ .fotos&#39;) // chama todas as .fotos que estão no mesmo nivel e após .galeria
$(&#39;#menu li:fist&#39;) // Chama apenas o primeiro li dentro de #menu
$(&#39;table tr:even&#39;) // Chama apenas os tr&#39;s impares
$(&#39;tr[colspan=2]&#39;) // Chama os tr&#39;s que contenham o atributo colspan definido como 2
$(&#39;form :text&#39;)  // Chama os inputs com type definido como text, caixas de texto&lt;/pre&gt;

&lt;p&gt;A lista completa pode ser &lt;a href=&#34;http://docs.jquery.com/Selectors&#34; title=&#34;Selectores da jQuery&#34;&gt;encontrada&lt;/a&gt; no site oficial da jQuery bem documentada e com exemplos para cada caso. Com a seleção na cabeça, podemos aplicar efeitos (hide, show, fadeIn, fadeOut, slideUp, slideDown por exemplo) nos elementos que selecionarmos, colocar atributos para estes elementos como css ou mesmo colocar eventos neles, ou seja, funções que rodam quando você faz alguma coisa com eles, como por exemplo clicar, passar o mouse em cima, dar dois cliques, colocar o cursor na caixa de texto e assim por diante.&lt;/p&gt;

&lt;p&gt;Em um exemplo prático, vamos fazer um menu com submenus onde não precisamos nos preocupar em adicionar classes e tudo mais. Primeiro vamos implantar o HTML, assim podemos fazer um belo menu semântico. Se quiser, aplique também um belo CSS, mas não se esqueça: não suma com os submenus neste momento, afinal, se o browser do usuário não possuir javascript ele não poderá mostrá-los. Então deixe os submenus à mostra porque depois vamos escondê-los via javascript.&lt;/p&gt;

&lt;pre&gt;&amp;lt;ul id=&#34;menu&#34;&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;inicio&#34;&amp;gt;Inicio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34; title=&#34;Estas são as categorias do meu site&#34;&amp;gt;Categorias&amp;lt;/a&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;ferramentas&#34;&amp;gt;Ferramentas&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;downloads&#34;&amp;gt;Downloads&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;templates&#34;&amp;gt;Templates&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34; title=&#34;Artigos técnicos&#34;&amp;gt;Artigos&amp;lt;/a&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;tableless&#34;&amp;gt;Tableless&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;javascript&#34;&amp;gt;JavaScript&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;php&#34;&amp;gt;PHP&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Banco de dados&amp;lt;/a&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;mysql&#34;&amp;gt;MySQL&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;postgree&#34;&amp;gt;PostGree&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;python&#34;&amp;gt;Python&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/pre&gt;

&lt;p&gt;Note que não há qualquer referência a quem é pai ou filho de sebmenu. Vamos usar as chamadas da própria jQuery para encontrar quem tiver submenu. O resultado deste menu, já com CSS aplicado pode ser visto &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/menu-submenu-parte1.html&#34; title=&#34;Aplicação do HTML e JavaScript ao menu com submenu&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Agora, vamos desaparecer com os submenus de forma dinâmica. Lembre-se que não podemos aplicar a jQuery em qualquer lugar, afinal o html pode ainda não ter sido gerado quando o script rodar, então colocamos o &amp;#8220;desaparecimento&amp;#8221; dentro da função de carregamento da própria jQuery. Isto fará com que nosso script só seja executado quando todo o HTML for carregado.&lt;/p&gt;

&lt;pre&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
$(function(){ // Inicio da função de carregamento
$(&#39;#menu ul&#39;).hide()
}) // Fim da função de carregamento
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Com uma simples linha, sumimos com os submenus com a função hide(), note que usamos os próprios atributos para os quais chamamos esses submenus com CSS. &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/menu-submenu-parte2.html&#34; title=&#34;Sumindo com os submenus com uma linha de código&#34;&gt;Veja&lt;/a&gt; como desaparecemos com os submenus de uma forma simples e fácil.&lt;/p&gt;

&lt;p&gt;Agora, a dinâmica! Vamos usar a chamada aos submenus usando como referencia os links que tenham como href o valor de # (tralha, sustenido, lasagna, jogo-da-velha, plus, ou como você quiser chamar). Fica assim:&lt;/p&gt;

&lt;pre&gt;$(&#39;#menu a[href=#]&#39;)&lt;/pre&gt;

&lt;p&gt;Assim, filtramos todos os nossos links pegando somente os links dentro de #menu que tenham o href como #.&lt;/p&gt;

&lt;p&gt;Neles vamos implantar os comandos de click para mostrar o menu e o submenu, mas primeiro precisamos navegar entre os elementos. Para isso, usamos &lt;strong&gt;next&lt;/strong&gt; ou &lt;strong&gt;prev&lt;/strong&gt;, funções próprias da jQuery que navega entre o elemento que estiver após ou antes (respectivamente) do elemento em questão. Levando em conta que as funções de ação da jQuery (click/hover/toogle/etc) recebem como parâmetro &lt;strong&gt;this&lt;/strong&gt; o elemento que recebeu a ação temos:&lt;/p&gt;

&lt;pre&gt;$(&#39;a[href=#]&#39;).click(function(){
this // é o elemento &#34;a&#34; (link) que foi clicado naquele momento
})&lt;/pre&gt;

&lt;p&gt;Então vamos navegar até o submenu, que é o elemento que está após o link:&lt;/p&gt;

&lt;pre&gt;$(&#39;a[href=#]&#39;).click(function(){
$(this).next() // Agora sim, com base no link (dinamicamente) temos o submenu
}&lt;/pre&gt;

&lt;p&gt;Perceba que apesar de recebermos em this o elemento, precisamos usar mais uma vez a jQuery pois se trata do elemento em si e não uma chamada à ele via jQuery.&lt;/p&gt;

&lt;p&gt;Agora sim, podemos sumir ou aparecer com os submenus, usando o slideToggle da jQuery vemos como isso é implantado de forma simples e prática. Precisamos aplicar também um &lt;strong&gt;return false&lt;/strong&gt; para cancelar a navegação do link, afinal ele não deixou de ser um link.&lt;/p&gt;

&lt;pre&gt;$(&#39;a[href=#]&#39;).click(function(){
$(this).next().slideToggle() // Some, aparece, some, aparece, incrivelmente simples com a jQuery
return false
}&lt;/pre&gt;

&lt;p&gt;Com apenas seis linhas de código (real) concluímos um menu com submenu dinâmico, navegando entre os elementos com a jQuery. Ainda aplicamos uma animação para esse submenu. O resultado pode ser visto &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/menu-submenu-parte3.html&#34; title=&#34;Versão final do menu com submenu dinâmico&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um dos motivos pelos quais a jQuery é uma das bibliotecas mais incríveis de se trabalhar porque seu aprendizado é simples e prático. Vale a pena investir um tempo para aprender a usá-la.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jQuery é bom para designers</title>
      <link>https://tableless.github.io/hugo-public/jquery-e-bom-para-designers/</link>
      <pubDate>Tue, 05 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/jquery-e-bom-para-designers/</guid>
      <description>&lt;p&gt;No começo da web JavaScript era considerado uma linguagem de programação completamente difícil e inútil. Afinal, depois de uma semana estudando a linguagem, o sujeito só conseguia escrever um script que validasse um formulário de contato que muitas vezes dava erro em outros browsers que não o Internet Explorer. Isso acontecia porque tanto o Netscape quanto o Browser azul tinha seus prórpios padrões de implementações de solução para o Javascript que era ainda estava engatinhando como linguagem.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Dessa forma, muitos códigos proprietários solucionavam problemas em determinado browser, que faziam o programador javascript (sim, isso já foi cargo) fazer muita volta para solucionar em outro browser. Isso acarretava em problemas imensos em manutenção. O cliente, em um belo domingo de sol ligava e dizia que o formulário estava &amp;#8220;pulando&amp;#8221;, muitas vezes acompanhado de um não sei nem o que é browser/navegador: &amp;#8220;eu dou dois cliques no ícone da internet e entro&amp;#8221;. Então lá ia o programador e precisava revisar dois, três códigos que faziam a mesma coisa em navegadores diferentes.&lt;/p&gt;

&lt;p&gt;Ainda bem que, assim como o HTML e o CSS, o JavaScript também sofreu sua padronização, facilitando a criação de &lt;a href=&#34;http://elcio.com.br/reusable/jquery/diretrizes.pt&#34;&gt;scripts que facilitam muito a vida do designer&lt;/a&gt;, deixando o designer cada vez mais feliz sem precisar consultar um programador. Uma dessas soluções foi a biblioteca &lt;a href=&#34;http://jquery.com&#34;&gt;jQuery&lt;/a&gt;. Uma biblioteca tão simples que designers conseguem fazer ótimos efeitos com apenas algumas linhas de comando.&lt;/p&gt;

&lt;p&gt;Vamos a um exemplo/tutorial prático: um menu com submenus. Quando a pessoa clicar no link o submenu deve aparecer, com um efeito de slide.&lt;/p&gt;

&lt;p&gt;Para o html usamos uma marcação simples, indicando quem é o menu e quem é o submenu.&lt;/p&gt;

&lt;pre lang=&#34;html&#34; line=&#34;1&#34;&gt;&lt;ul class=&#34;menu&#34;&gt;
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Item 1&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li class=&#34;itemPai&#34;&gt;
    Item 2
  &lt;/li&gt;
  
  
  &lt;ul class=&#34;subMenu&#34;&gt;
    &lt;li&gt;
      &lt;a href=&#34;#&#34;&gt;SubItem 1&lt;/a&gt;
    &lt;/li&gt;
    
    
    &lt;li&gt;
      &lt;a href=&#34;#&#34;&gt;SubItem 2&lt;/a&gt;
    &lt;/li&gt;
    
    
    &lt;li&gt;
      &lt;a href=&#34;#&#34;&gt;SubItem 3&lt;/a&gt;
    &lt;/li&gt;
    
  &lt;/ul&gt;
  
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Item 3&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Item 4&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Item 5&lt;/a&gt;
  &lt;/li&gt;
  
&lt;/ul&gt;
&lt;/pre&gt;

&lt;p&gt;Para ativar o jQuery você precisa baixá-la do site oficial (é apenas um aquivo js pequenininho) e coloque-a de preferencia na pasta ou em uma subpasta de onde está seu aquivo html, precisamos colocar a seguinte linha (de preferencia entre as tags &lt;head&gt; e &lt;/head&gt; ):&lt;/p&gt;

&lt;pre&gt;&amp;lt;script type=&#34;text/javascript&#34; src=&#34;pasta/onde/está/a/jquery.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Após a inclusão da jQuery podemos usá-la sem problemas. Coloque seu código entre as tags &lt;script&gt; e &lt;script&gt; depois da chamada da jQuery. Tenha em mente que todo o que você vai fazer é chamado pela chave $ e interligamos os comandos com pontos. Então, para chamarmos o elemento que queremos colocar uma ação, no caso clicar, usamos a chave $ e para referenciamos, usamos as mesmas chamadas que usamos para o css.&lt;/p&gt;

&lt;pre&gt;$(&#39;ul.menu li.itemPai&#39;)&lt;/pre&gt;

&lt;p&gt;Agora, linkamos esse objeto com a ação click, ou seja quando a pessoa clicar no link propriamente dito.&lt;/p&gt;

&lt;pre&gt;$(&#39;ul.menu li.itemPai&#39;).click()&lt;/pre&gt;

&lt;p&gt;E passamos para ele uma função que fará nosso efeito de slide.&lt;/p&gt;

&lt;pre lang=&#34;javascript&#34; line=&#34;1&#34;&gt;$(&#39;ul.menu li.itemPai&#39;).click(function(){
// Aqui virá a função
})
&lt;/pre&gt;

&lt;p&gt;Agora, a função que fará o efeito. Chamamos com a chave $ quem queremos animar e o linkamos com o tipo de animação. Para o efeito de slide (ou seja, encolher e esticar o elemento dando a ilusão de que ele está saindo de trás do outro elemento para baixo) a jQuery tem dois efeitos prontos que são: slideUp que recolhe o elemento e slideDown que expande o elemento. Ainda temos o slideToggle, que recolhe o elemento se estiver expandido ou vice-versa. Então iremos usar slideToggle para este efeito. Também usamos o return false para fazer com que o link não seja executado, retirando o usuario da nossa página.&lt;/p&gt;

&lt;pre lang=&#34;javascript&#34; line=&#34;1&#34;&gt;$(&#39;ul.menu li.itemPai&#39;).click(function(){
$(&#39;.menu .submenu&#39;).slideToggle()
return false
})&lt;/pre&gt;

&lt;p&gt;E voilá, o efeito está pronto. Exceto por um problema&amp;#8230; Se você colocar este script antes do seu menu, ele não vai funcionar porque você esta referenciando um elemento que ainda não existe para o navegador, logo ele não pode referenciar ninguém. Uma solução seria colocar o seu script após o seu código html, mas isso vai contra uma das práticas de &lt;a href=&#34;http://tableless.com.br/faq&#34;&gt;tableless&lt;/a&gt; que é trabalhar com camadas e, assim como o CSS, não é interessante deixar ele entre o código html por n razões. A outra solução faz parte do escopo do jQuery que faz com que seu script só rode após o carregamento completo do seu código html. Para isso basta criar uma função que englobe seu script dentro da chave $. Ficando assim:&lt;/p&gt;

&lt;pre lang=&#34;javascript&#34; line=&#34;1&#34;&gt;$(function(){
$(&#39;ul.menu li.itemPai&#39;).click(function(){
$(&#39;.menu .submenu&#39;).slideToggle()
return false
})
})&lt;/pre&gt;

&lt;p&gt;Isto resolve nosso problema. Agora, precisamos esconder nosso submenu quando a página carregar. Fazemos isso via javascript e não via css porque não queremos que o menu fique invisivel para pessoas que não usam javascript. Para isso, a jQuery tem a função hide que esconde um elemento (display:none). Se você quiser fazer o contrario, basta usar show no lugar de hide.&lt;/p&gt;

&lt;pre lang=&#34;javascript&#34; line=&#34;1&#34;&gt;&lt;/pre&gt;

&lt;p&gt;E esse é o nosso script final que pode ser visto &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/menu-simples.html&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/menu-simples-arquivos-importados.html&#34;&gt;aqui com aplicação de CSS básico&lt;/a&gt;. O interessante da jQuery é que ela é bem inuitiva e tem muitas coisas que já vem no escopo dela que resolvem muitos problemas que os designers querem desenvolver, mas não querem que um programador faça por ser uma coisa tão simples de fazer. jQuery é a parte da programação que os designers sentiam falta e muitas vezes contornavam com um arquivo flash que destruia a semantica de área como o menu que acabamos de construir.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>