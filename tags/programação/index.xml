<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programação on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/programa%C3%A7%C3%A3o/index.xml</link>
    <description>Recent content in Programação on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/programa%C3%A7%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Por que Python?</title>
      <link>https://tableless.github.io/hugo-public/por-que-python/</link>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/por-que-python/</guid>
      <description>

&lt;p&gt;Eu sou apaixonado por &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;. Muito. Daquele tipo que fala de Python sempre que pode. E uma pergunta que sempre me fazem é: por quê? Vou tentar fazer uma lista dos motivos mais relevantes:&lt;/p&gt;

&lt;h2 id=&#34;1-é-muito-bom-escrever-código-python&#34;&gt;1. É muito bom escrever código Python&lt;/h2&gt;

&lt;p&gt;Geralmente, quando alguém cria uma linguagem de programação, tem em vista um objetivo. Por exemplo, Lisp foi escrita para programação funcional. Java foi escrita para que o mesmo código pudesse rodar em qualquer lugar. PHP foi criada para construir páginas web. E Python foi criada para ser produtiva e fácil de escrever.&lt;/p&gt;

&lt;p&gt;Um programador experiente aprende a sintaxe do Python em algumas poucas horas. O jeito de escrever faz sentido.&lt;/p&gt;

&lt;p&gt;Veja, por exemplo, essa função para calcular um número de &lt;a href=&#34;https://pt.wikipedia.org/wiki/Sequ%C3%AAncia_de_Fibonacci&#34;&gt;Fibonacci&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;def fib(n):
    if n&amp;lt;3:
        return n
    return fib(n-1) + fib(n-2)&lt;/pre&gt;

&lt;p&gt;Note como a sintaxe é simples. Mesmo nas decisões de design que são &amp;#8220;pouco ortodoxas&amp;#8221;, como os blocos baseados na indentação, a decisão foi tomada pensando em produtividade. O modelo de blocos do Python faz com que você precise digitar menos. Além disso, é impossível escrever código não indentado em Python.&lt;/p&gt;

&lt;p&gt;Veja nesse outro exemplo, a função de Fibonacci em uma versão &lt;a href=&#34;https://en.wikipedia.org/wiki/Memoization&#34;&gt;memoized&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;memo = {0:0, 1:1}

def fib(n):
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Reparou como é simples? Ao trabalhar com Python, a linguagem nunca está entre você e seu problema. Você pode gastar seu tempo com a lógica de programação, que é o que realmente importa, e não com especificidades da linguagem que você está usando.&lt;/p&gt;

&lt;h2 id=&#34;2-organizar-um-projeto-python-é-muito-fácil&#34;&gt;2. Organizar um projeto Python é muito fácil&lt;/h2&gt;

&lt;p&gt;Vamos colocar nossa função de Fibonacci e salvar num arquivo, fib.py, incluindo um pouquinho de documentação. Chamamos cada arquivo Python de módulo:&lt;/p&gt;

&lt;pre&gt;&#39;&#39;&#39;Fibonacci function, memoized for better performance.&#39;&#39;&#39;
memo = {0:0, 1:1}

def fib(n):
    &#39;&#39;&#39;Returns the nth Fibonacci number.&#39;&#39;&#39;
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Agora vamos importar esse arquivo no console do Python, e veja o que dá para fazer:&lt;/p&gt;

&lt;div style=&#34;width: 490px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://elcio.com.br/wp-content/uploads/2015/09/fib.gif&#34; alt=&#34;&#34; width=&#34;480&#34; height=&#34;267&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Executando fib.py e ajuda.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;É como PHPDoc ou Javadoc, mas completamente nativo, e com uma sintaxe muito simples. E tudo o que você precisa para ler a documentação é o próprio Python.&lt;/p&gt;

&lt;h2 id=&#34;3-o-ecossistema-python-é-fantástico&#34;&gt;3. O ecossistema Python é fantástico&lt;/h2&gt;

&lt;p&gt;Começando pela própria linguagem, que vem com uma excelente &lt;a href=&#34;https://docs.python.org/3/library/&#34;&gt;biblioteca padrão&lt;/a&gt;. Essa biblioteca é bastante extensa e possui excelentes módulos, bem documentados e fáceis de usar. Por exemplo, digamos que você queira baixar o código fonte desse artigo e gerar um arquivo GZip com ele, veja como é fácil:&lt;/p&gt;

&lt;pre&gt;import urllib
import gzip
html=urllib.urlopen(&#39;http://tableless.com.br/por-que-python/&#39;).read()
gzfile=gzip.open(&#39;por-que-python.html.gz&#39;,&#39;w&#39;)
gzfile.write(html)&lt;/pre&gt;

&lt;p&gt;Usamos os módulos urllib e gzip. Entre os recursos fornecidos pelos módulos que já vem com o Python, posso citar o controle de threads e processamento paralelo, a criação de webservices, bibliotecas para sockets, http, ftp, e-mail, a leitura e escrita de XML, JSON, CSV, o acesso a recursos do sistema operacional, matemática e estatística, criptografia, manipulação de arquivos de áudio, testes automatizados, etc.&lt;/p&gt;

&lt;p&gt;Como é fácil escrever código bom e bem documentado, a comunidade Python tem feito um excelente em fornecer módulos para praticamente tudo o que você precisar fazer. Você pode encontrar, no &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;Python Package Index&lt;/a&gt;, milhares de módulos prontos para coisas como ler e escrever arquivos Excel, trabalhar com imagens, acessar bancos de dados os mais diversos, trabalhar com automação residencial, enviar SMS, integrar seu software ao Gmail, falar com serviços de VoIP, conectar-se a redes sociais, criar um servidor de e-mails, desenvolver jogos 3D, e uma infinidade de outros recursos.&lt;/p&gt;

&lt;h3 id=&#34;e-tem-mais-8230&#34;&gt;E tem mais&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Se você não programa em Python, espero tê-lo deixado pelo menos um pouquinho curioso. No próximo artigo, vamos falar um pouco mais da linguagem, mostrando algumas características da sintaxe e dos tipos de dados que a tornam tão interessante. Até lá, fique à vontade nos comentários. Sugestões, dúvidas, críticas e opiniões são muito bem vindas e vão me ajudar a preparar os próximos artigos.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jQuery é bom para designers</title>
      <link>https://tableless.github.io/hugo-public/jquery-e-bom-para-designers/</link>
      <pubDate>Tue, 05 Aug 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/jquery-e-bom-para-designers/</guid>
      <description>&lt;p&gt;No começo da web JavaScript era considerado uma linguagem de programação completamente difícil e inútil. Afinal, depois de uma semana estudando a linguagem, o sujeito só conseguia escrever um script que validasse um formulário de contato que muitas vezes dava erro em outros browsers que não o Internet Explorer. Isso acontecia porque tanto o Netscape quanto o Browser azul tinha seus prórpios padrões de implementações de solução para o Javascript que era ainda estava engatinhando como linguagem.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Dessa forma, muitos códigos proprietários solucionavam problemas em determinado browser, que faziam o programador javascript (sim, isso já foi cargo) fazer muita volta para solucionar em outro browser. Isso acarretava em problemas imensos em manutenção. O cliente, em um belo domingo de sol ligava e dizia que o formulário estava &amp;#8220;pulando&amp;#8221;, muitas vezes acompanhado de um não sei nem o que é browser/navegador: &amp;#8220;eu dou dois cliques no ícone da internet e entro&amp;#8221;. Então lá ia o programador e precisava revisar dois, três códigos que faziam a mesma coisa em navegadores diferentes.&lt;/p&gt;

&lt;p&gt;Ainda bem que, assim como o HTML e o CSS, o JavaScript também sofreu sua padronização, facilitando a criação de &lt;a href=&#34;http://elcio.com.br/reusable/jquery/diretrizes.pt&#34;&gt;scripts que facilitam muito a vida do designer&lt;/a&gt;, deixando o designer cada vez mais feliz sem precisar consultar um programador. Uma dessas soluções foi a biblioteca &lt;a href=&#34;http://jquery.com&#34;&gt;jQuery&lt;/a&gt;. Uma biblioteca tão simples que designers conseguem fazer ótimos efeitos com apenas algumas linhas de comando.&lt;/p&gt;

&lt;p&gt;Vamos a um exemplo/tutorial prático: um menu com submenus. Quando a pessoa clicar no link o submenu deve aparecer, com um efeito de slide.&lt;/p&gt;

&lt;p&gt;Para o html usamos uma marcação simples, indicando quem é o menu e quem é o submenu.&lt;/p&gt;

&lt;pre lang=&#34;html&#34; line=&#34;1&#34;&gt;&lt;ul class=&#34;menu&#34;&gt;
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Item 1&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li class=&#34;itemPai&#34;&gt;
    Item 2
  &lt;/li&gt;
  
  
  &lt;ul class=&#34;subMenu&#34;&gt;
    &lt;li&gt;
      &lt;a href=&#34;#&#34;&gt;SubItem 1&lt;/a&gt;
    &lt;/li&gt;
    
    
    &lt;li&gt;
      &lt;a href=&#34;#&#34;&gt;SubItem 2&lt;/a&gt;
    &lt;/li&gt;
    
    
    &lt;li&gt;
      &lt;a href=&#34;#&#34;&gt;SubItem 3&lt;/a&gt;
    &lt;/li&gt;
    
  &lt;/ul&gt;
  
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Item 3&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Item 4&lt;/a&gt;
  &lt;/li&gt;
  
  
  &lt;li&gt;
    &lt;a href=&#34;#&#34;&gt;Item 5&lt;/a&gt;
  &lt;/li&gt;
  
&lt;/ul&gt;
&lt;/pre&gt;

&lt;p&gt;Para ativar o jQuery você precisa baixá-la do site oficial (é apenas um aquivo js pequenininho) e coloque-a de preferencia na pasta ou em uma subpasta de onde está seu aquivo html, precisamos colocar a seguinte linha (de preferencia entre as tags &lt;head&gt; e &lt;/head&gt; ):&lt;/p&gt;

&lt;pre&gt;&amp;lt;script type=&#34;text/javascript&#34; src=&#34;pasta/onde/está/a/jquery.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Após a inclusão da jQuery podemos usá-la sem problemas. Coloque seu código entre as tags &lt;script&gt; e &lt;script&gt; depois da chamada da jQuery. Tenha em mente que todo o que você vai fazer é chamado pela chave $ e interligamos os comandos com pontos. Então, para chamarmos o elemento que queremos colocar uma ação, no caso clicar, usamos a chave $ e para referenciamos, usamos as mesmas chamadas que usamos para o css.&lt;/p&gt;

&lt;pre&gt;$(&#39;ul.menu li.itemPai&#39;)&lt;/pre&gt;

&lt;p&gt;Agora, linkamos esse objeto com a ação click, ou seja quando a pessoa clicar no link propriamente dito.&lt;/p&gt;

&lt;pre&gt;$(&#39;ul.menu li.itemPai&#39;).click()&lt;/pre&gt;

&lt;p&gt;E passamos para ele uma função que fará nosso efeito de slide.&lt;/p&gt;

&lt;pre lang=&#34;javascript&#34; line=&#34;1&#34;&gt;$(&#39;ul.menu li.itemPai&#39;).click(function(){
// Aqui virá a função
})
&lt;/pre&gt;

&lt;p&gt;Agora, a função que fará o efeito. Chamamos com a chave $ quem queremos animar e o linkamos com o tipo de animação. Para o efeito de slide (ou seja, encolher e esticar o elemento dando a ilusão de que ele está saindo de trás do outro elemento para baixo) a jQuery tem dois efeitos prontos que são: slideUp que recolhe o elemento e slideDown que expande o elemento. Ainda temos o slideToggle, que recolhe o elemento se estiver expandido ou vice-versa. Então iremos usar slideToggle para este efeito. Também usamos o return false para fazer com que o link não seja executado, retirando o usuario da nossa página.&lt;/p&gt;

&lt;pre lang=&#34;javascript&#34; line=&#34;1&#34;&gt;$(&#39;ul.menu li.itemPai&#39;).click(function(){
$(&#39;.menu .submenu&#39;).slideToggle()
return false
})&lt;/pre&gt;

&lt;p&gt;E voilá, o efeito está pronto. Exceto por um problema&amp;#8230; Se você colocar este script antes do seu menu, ele não vai funcionar porque você esta referenciando um elemento que ainda não existe para o navegador, logo ele não pode referenciar ninguém. Uma solução seria colocar o seu script após o seu código html, mas isso vai contra uma das práticas de &lt;a href=&#34;http://tableless.com.br/faq&#34;&gt;tableless&lt;/a&gt; que é trabalhar com camadas e, assim como o CSS, não é interessante deixar ele entre o código html por n razões. A outra solução faz parte do escopo do jQuery que faz com que seu script só rode após o carregamento completo do seu código html. Para isso basta criar uma função que englobe seu script dentro da chave $. Ficando assim:&lt;/p&gt;

&lt;pre lang=&#34;javascript&#34; line=&#34;1&#34;&gt;$(function(){
$(&#39;ul.menu li.itemPai&#39;).click(function(){
$(&#39;.menu .submenu&#39;).slideToggle()
return false
})
})&lt;/pre&gt;

&lt;p&gt;Isto resolve nosso problema. Agora, precisamos esconder nosso submenu quando a página carregar. Fazemos isso via javascript e não via css porque não queremos que o menu fique invisivel para pessoas que não usam javascript. Para isso, a jQuery tem a função hide que esconde um elemento (display:none). Se você quiser fazer o contrario, basta usar show no lugar de hide.&lt;/p&gt;

&lt;pre lang=&#34;javascript&#34; line=&#34;1&#34;&gt;&lt;/pre&gt;

&lt;p&gt;E esse é o nosso script final que pode ser visto &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/menu-simples.html&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/menu-simples-arquivos-importados.html&#34;&gt;aqui com aplicação de CSS básico&lt;/a&gt;. O interessante da jQuery é que ela é bem inuitiva e tem muitas coisas que já vem no escopo dela que resolvem muitos problemas que os designers querem desenvolver, mas não querem que um programador faça por ser uma coisa tão simples de fazer. jQuery é a parte da programação que os designers sentiam falta e muitas vezes contornavam com um arquivo flash que destruia a semantica de área como o menu que acabamos de construir.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>