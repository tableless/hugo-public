<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Keystone.Js on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/keystone.js/index.xml</link>
    <description>Recent content in Keystone.Js on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/keystone.js/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Alternativa de CMS com Keystone.js</title>
      <link>https://tableless.github.io/hugo-public/alternativa-de-cms-com-keystone-js/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/alternativa-de-cms-com-keystone-js/</guid>
      <description>

&lt;p&gt;Este é o primeiro artigo de uma série sobre o &lt;a href=&#34;http://keystonejs.com/&#34; target=&#34;_blank&#34;&gt;Keystone.js&lt;/a&gt;, um framework desenvolvido em Node.js para servir de CMS e também Web Application. Pra começarmos, será necessário nesse primeiro artigo um pouco de teoria, pra termos uma noção.&lt;/p&gt;

&lt;p&gt;Aos apressados, o link do repo está disponível no &lt;a href=&#34;https://github.com/victorkurauchi/post-keystone&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pra começar, não vou falar detalhadamente sobre sua descrição, pois no site deles está bem explicado, apenas um resumo sobre, e depois, quando formos iniciar o projeto, ficará mais claro.&lt;/p&gt;

&lt;p&gt;O Keystone.js utiliza o &lt;a href=&#34;http://expressjs.com/&#34; target=&#34;_blank&#34;&gt;Express&lt;/a&gt;, então para muitos a curva de aprendizado será bem pequena e é um ponto bom, pois a customização (quando necessária) será tranquila. Na interface admin, utilizam o &lt;a href=&#34;https://facebook.github.io/react/&#34; target=&#34;_blank&#34;&gt;React.js&lt;/a&gt;. Este framework me chamou muito a atenção pelo fato de agilizar MUITA coisa no desenvolvimento, e ao mesmo tempo não deixar o desenvolvedor sem saber o que ocorre por baixo dos panos, os módulos de rotas/models/views são bem organizados.&lt;/p&gt;

&lt;p&gt;Atualmente, a comunidade Keystone.js está trabalhando na próxima versão (0.4) que terá um rebuild da interface admin com o React e mais novidades.&lt;/p&gt;

&lt;p&gt;O projeto que faremos utilizará a versão 0.3.16&lt;/p&gt;

&lt;p&gt;A idéia nessa série é desenvolver um CMS (obviamente) onde vamos publicar posts, cadastro e listagem de produtos, e também customizar o Framework (é Javascript!) para termos uma API para posterior consumo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Showmethecode!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pré requisitos: &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; e &lt;a href=&#34;http://mongodb.org&#34; target=&#34;_blank&#34;&gt;Mongodb&lt;/a&gt;. No terminal, digite:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$npm install -g generator-keystone
    $mkdir projeto-keystone
    $cd projeto-keystone
    $yo keystone
    $node keystone
&lt;/pre&gt;

&lt;p&gt;Após a instalação via NPM, o generator fará algumas perguntas sobre as engines que deseja utilizar e informações sobre seu projeto (exemplo nome), esta parte fica a seu critério. Itens como template engine, pré-processor, taskers&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ornitorrinko.com/blog/wp-content/uploads/2016/03/Screen-Shot-2016-03-10-at-3.41.32-PM-300x156.png&#34; rel=&#34;attachment wp-att-254&#34;&gt;&lt;img class=&#34;alignnone wp-image-254 size-medium&#34; src=&#34;http://ornitorrinko.com/blog/wp-content/uploads/2016/03/Screen-Shot-2016-03-10-at-3.41.32-PM-300x156.png&#34; alt=&#34;Tela Instalação Keystone.JS&#34; width=&#34;300&#34; height=&#34;156&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora você já consegue navegar em &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; pra ter uma noção do que o framework estruturou para você. Nesse momento, repare que já temos um Blog e uma Galeria de imagens (utilizando uma conta temporária da &lt;a href=&#34;http://cloudinary.com/&#34; target=&#34;_blank&#34;&gt;Cloudinary&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Para acessar o admin, navegue em &lt;a href=&#34;http://localhost:3000/keystone&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://localhost:3000/keystone&#34;&gt;http://localhost:3000/keystone&lt;/a&gt;&lt;/a&gt; e informe usuário e senha que informou no generator (se não informou nada, é user: user@keystonejs.com pass: admin)&lt;/p&gt;

&lt;h2 id=&#34;um-pouco-sobre-as-models-e-rotas&#34;&gt;Um pouco sobre as models e rotas&lt;/h2&gt;

&lt;p&gt;Esta parte é uma mão na roda, dê um check na estrutura de &lt;em&gt;./models/Post.js&lt;/em&gt; e &lt;em&gt;./models/Gallery.js&lt;/em&gt; pra saber do que estamos tratando. O interessante, é que no momento de estruturar as models, você não precisa se preocupar em criar o formulário de cadastro/edição no adminUI (o Keystone.js faz isso conforme vc seta as propriedades da model).&lt;/p&gt;

&lt;p&gt;Já as rotas, ficam em &lt;em&gt;./routes/index.js&lt;/em&gt; para serem registradas. Possuímos o arquivo &lt;em&gt;./routes/middleware.js&lt;/em&gt; para interceptar e tratar as requests de acordo com a nossa necessidade (veremos mais adiante).&lt;/p&gt;

&lt;p&gt;Uma boa prática que adotamos aqui na Ornito é separar a pasta de rotas em &lt;em&gt;./routes/api/*&lt;/em&gt; e _./routes/views/*, onde, respectivamente, incluiremos os arquivos de API  retornardos de nosso JSON, e ServerViews, que vamos renderizar pela template engine (&lt;a href=&#34;http://jade-lang.com/&#34; target=&#34;_blank&#34;&gt;Jade&lt;/a&gt; foi a escolhida)._&lt;/p&gt;

&lt;h3 id=&#34;cadastro-de-produtos&#34;&gt;&lt;strong&gt;Cadastro de Produtos&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Ao subir o Keystone.js pela primeira vez, ele gerou as models de Post e Galeria para nós, por isso, não teremos muito trabalho nesta parte (já está pronto). Vamos agora focar no código para criação de produtos.&lt;/p&gt;

&lt;p&gt;Nosso fluxo de criação: definir Model, definir Rota, definir View.&lt;/p&gt;

&lt;p&gt;Vamos criar o arquivo ./models/Produto.js:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// models/Produto.js

var keystone = require(&#39;keystone&#39;);
var Types = keystone.Field.Types;

/**
 * Model Produto
 * ==========
 */

var Produto = new keystone.List(&#39;Produto&#39;, {
  map: { name: &#39;produto&#39; },
  autokey: { path: &#39;slug&#39;, from: &#39;produto&#39;, unique: true }
});

Produto.add({
  produto: { type: String, required: true },
  ativo: { type: Types.Boolean, initial: true, required: true },
  preco: { type: Types.Money, format: &#39;$0.0,00&#39;, label: &#39;Valor do produto&#39;, },
  descricao: {
    breve: { type: Types.Textarea, height: 150, label: &#34;Breve descrição&#34; },
    completa: { type: Types.Html, wysiwyg: true, height: 200, label: &#34;Descricao completa&#34; }
  },
  criadoEm: { type: Types.Date, index: true, default: new Date() },
  detalhes: { type: Types.TextArray },
  imagens: { type: Types.CloudinaryImages }
  
});

Produto.schema.virtual(&#39;descricao.full&#39;).get(function() {
  return this.descricao.completa || this.descricao.breve;
});

Produto.defaultColumns = &#39;produto, ativo, preco, criadoEm&#39;;
Produto.register();
&lt;/pre&gt;

&lt;p&gt;Já criamos a model, então podemos navegar pelo admin, e &lt;a href=&#34;http://localhost:3000/keystone/produtos&#34;&gt;http://localhost:3000/keystone&lt;/a&gt; nos levará para o cadastro de um produto. Preencha as informações do produto.&lt;/p&gt;

&lt;p&gt;Agora temos que configurar a rota em &lt;em&gt;./routes/views/produtos.js&lt;/em&gt; , &lt;em&gt;./routes/index.js&lt;/em&gt; e &lt;em&gt;./routes/middleware.js&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// routes/views/produtos.js
var keystone = require(&#39;keystone&#39;);

exports = module.exports = function(req, res) {
  
  var view = new keystone.View(req, res);
  var locals = res.locals;
  
  // Set locals
  locals.section = &#39;produtos&#39;;
  
  // Load the galleries by sortOrder
  view.query(&#39;produtos&#39;, keystone.list(&#39;Produto&#39;).model.find().sort(&#39;sortOrder&#39;));
  
  // Render the view
  view.render(&#39;produtos&#39;);
  
};
&lt;/pre&gt;

&lt;p&gt;A rota &lt;em&gt;views/produtos.js&lt;/em&gt; é a responsável por consultar nossa base no mongoDB e retornar os produtos existentes.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// routes/index.js
var keystone = require(&#39;keystone&#39;);
var middleware = require(&#39;./middleware&#39;);
var importRoutes = keystone.importer(__dirname);

// Common Middleware
keystone.pre(&#39;routes&#39;, middleware.initLocals);
keystone.pre(&#39;render&#39;, middleware.flashMessages);

// Import Route Controllers
var routes = {
  views: importRoutes(&#39;./views&#39;)
};

// Setup Route Bindings
exports = module.exports = function(app) {
  
  // Views
  app.get(&#39;/&#39;, routes.views.index);
  app.get(&#39;/blog/:category?&#39;, routes.views.blog);
  app.get(&#39;/blog/post/:post&#39;, routes.views.post);
  app.get(&#39;/gallery&#39;, routes.views.gallery);
  app.all(&#39;/contact&#39;, routes.views.contact);

  app.get(&#39;/produtos&#39;, routes.views.produtos);

};
&lt;/pre&gt;

&lt;p&gt;Em &lt;em&gt;routes/index.js&lt;/em&gt; registramos igual a um app comum em express com &lt;em&gt;app.get()&lt;/em&gt; e apontamos para nossa rota de produtos, a qual vamos consultar os produtos na base.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// routes/middleware.js
var _ = require(&#39;underscore&#39;);

/**
  Initialises the standard view locals
*/

exports.initLocals = function(req, res, next) {
  
  var locals = res.locals;
  
  locals.navLinks = [
    { label: &#39;Home&#39;,    key: &#39;home&#39;,    href: &#39;/&#39; },
    { label: &#39;Blog&#39;,    key: &#39;blog&#39;,    href: &#39;/blog&#39; },
    { label: &#39;Gallery&#39;,   key: &#39;gallery&#39;,   href: &#39;/gallery&#39; },
    { label: &#39;Contact&#39;,   key: &#39;contact&#39;,   href: &#39;/contact&#39; },
    { label: &#39;Produtos&#39;,    key: &#39;produtos&#39;,    href: &#39;/produtos&#39; }
  ];
  
  locals.user = req.user;
  
  next();
  
};

/**
  Fetches and clears the flashMessages before a view is rendered
*/

exports.flashMessages = function(req, res, next) {
  
  var flashMessages = {
    info: req.flash(&#39;info&#39;),
    success: req.flash(&#39;success&#39;),
    warning: req.flash(&#39;warning&#39;),
    error: req.flash(&#39;error&#39;)
  };
  
  res.locals.messages = _.any(flashMessages, function(msgs) { return msgs.length; }) ? flashMessages : false;
  
  next();
  
};

/**
  Prevents people from accessing protected pages when they&#39;re not signed in
 */

exports.requireUser = function(req, res, next) {
  
  if (!req.user) {
    req.flash(&#39;error&#39;, &#39;Please sign in to access this page.&#39;);
    res.redirect(&#39;/keystone/signin&#39;);
  } else {
    next();
  }
  
};
&lt;/pre&gt;

&lt;p&gt;Em &lt;em&gt;routes/middeware.js&lt;/em&gt; estamos apenas estruturando os &lt;em&gt;navLinks&lt;/em&gt; para exibirmos o link de produtos na home.&lt;/p&gt;

&lt;p&gt;E agora vamos exibir nossos produtos em &lt;em&gt;./templates/views/produtos.jade&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-jade&#34;&gt;//- templates/views/produtos.jade
extends ../layouts/default

block intro
  .container
    h1 Nossos produtos
  
block content
  .container
    if produtos.length
      each item in produtos
        h2= item.produto
          .pull-right.text-muted R$ #{item.preco}

        p= item.descricao.breve
        
        .row.gallery-images
          each image in item.imagens
            .col-xs-6.col-sm-4.col-md-3.gallery-image: img(src=image.limit(300,300)).img-rounded
    else
      h3.text-muted Ainda não temos produtos cadastrados 🙁

&lt;/pre&gt;

&lt;p&gt;Navegue em &lt;a href=&#34;http://localhost:3000/produtos&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://localhost:3000/produtos&#34;&gt;http://localhost:3000/produtos&lt;/a&gt;&lt;/a&gt; e verá o resultado 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ornitorrinko.com/blog/wp-content/uploads/2016/03/Screen-Shot-2016-03-11-at-6.10.11-PM-300x148.png&#34; rel=&#34;attachment wp-att-271&#34;&gt;&lt;img class=&#34;alignnone wp-image-271 size-medium&#34; src=&#34;http://ornitorrinko.com/blog/wp-content/uploads/2016/03/Screen-Shot-2016-03-11-at-6.10.11-PM-300x148.png&#34; alt=&#34;Página Nossos Produtos com Keystone.js&#34; width=&#34;300&#34; height=&#34;148&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Neste artigo não foi possível cobrir TODOS os detalhes do Keystone.js. Mas, se você se interessou pelo framework, vale dar uma olhada na &lt;a href=&#34;http://keystonejs.com/docs/getting-started/&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt; sobre tipos de dados, formatos, middlewares, serviços já integrados e tudo mais.&lt;/p&gt;

&lt;p&gt;Fiz aqui uma pequena imersão ao framework para mostrar o que ele pode fazer com pouco tempo e dedicação. No próximo artigo vamos ao detalhe do produto, e também começar com nossa API (para produtos e posts).&lt;/p&gt;

&lt;p&gt;Repo: &lt;a href=&#34;https://github.com/victorkurauchi/post-keystone&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/victorkurauchi/post-keystone&#34;&gt;https://github.com/victorkurauchi/post-keystone&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Até mais.&lt;/p&gt;

&lt;p&gt;@victorkurauchi&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>