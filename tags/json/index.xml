<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/json/index.xml</link>
    <description>Recent content in Json on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Linked Data e JSON-LD</title>
      <link>https://tableless.github.io/hugo-public/linked-data-e-json-ld/</link>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/linked-data-e-json-ld/</guid>
      <description>

&lt;p&gt;Antes de entrarmos em como esse negócio de JSON-LD e Linked Data, queria falar um pouco sobre como a internet funciona. &lt;a href=&#34;http://diegoeis.com/organizando-a-informacao.html&#34;&gt;Organização da Informação&lt;/a&gt; na web é um dos assuntos que mais me fascinam no mundo da internet. Inclusive quando falamos sobre semântica e organização da informação de forma que não apenas humanos, mas computadores possam publicar e reutilizar essa informação livremente na web.&lt;/p&gt;

&lt;p&gt;Hoje a internet é baseada basicamente em código HTML, onde nós podemos mostrar imagens, vídeos, audios e principalmente textos. Os links são o meio pelo qual nós organizamos toda a informação na internet, referenciando informações de um site para outro. Os links organizam, de certa forma, todos os websites da internet, sempre cruzando um termo com uma fonte de informação relacionada àquele termo.&lt;/p&gt;

&lt;p&gt;Nós podemos quebrar a internet em duas partes específicas: nós temos a parte onde nós enxergamos, que basicamente é baseada em HTML, CSS e JS. É onde seres humanos interagem com nosso produto e nosso site.&lt;/p&gt;

&lt;p&gt;Há também a segunda parte, que é formada basicamente por robôs e sistemas que também interagem com nossos produtos e sites, mas de forma diferente dos humanos, claro, consumindo dados que disponibilizamos de várias formas. Uma desses formatos é o JSON. Como alguns outros formatos, o JSON tem uma estrutura que é simples de ser lida por humanos e principalmente por robôs.&lt;/p&gt;

&lt;p&gt;Linked Data é um termo relativamente novo. É um termo que apresenta um caminho para publicar dados interconectados entre diferentes sites, possibilitando que um site referencie e reutilize dados de um outro site. Tipo, um buscador, reutilizando as informações do seu site para mostrar nos resultados da busca.&lt;/p&gt;

&lt;p&gt;Conectar as informações usando links resolve a parte de como os seres humanos conseguem relacionar um site (ou um punhado de informação), com outro. Mas como conseguimos fazer com que as máquinas entendam esse relacionamento? Você, como ser humano (eu espero que você seja um), consegue saber quando um site sobre um determinado assunto contém um link que leva para um site de um assunto completamente diferente, mudando de contexto. Mas as máquinas não conseguem fazer essa distinção. Para a máquina, um link sempre vai ser um link. Se é sobre feijão ou sobre automóveis, um link será um link, mesmo tendo uma mudança de contexto entre os assuntos. Para conseguir relacionar melhor as informações, precisamos indicar melhor para as máquinas o contexto dessa informação, ou melhor, desses dados (informação e dados são coisas diferentes).&lt;/p&gt;

&lt;p&gt;Você já deve ter ouvido falar sobre RDFa. RDFa é um padrão básico para que possamos dar um pouco mais de contexto para as máquinas sobre os dados que elas estão consumindo. RDFa nada mais é do que um conjunto de atributos que colocamos em linguagens de marcação (HTML, XHTML, XML etc), de forma que as máquinas consigam entender que tipo de informação elas estão lidando. Algo como isso:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;h1 property=&#34;dc:title&#34;&amp;gt;Um artigo sobre Semântica&amp;lt;/h1&amp;gt;
&amp;lt;span property=&#34;dc:author&#34;&amp;gt;Diego Eis&amp;lt;/span&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Sim. Você já viu algo parecido quando estudou sobre Microformatos, &lt;a href=&#34;http://tableless.com.br/introducao-a-microdata-no-html5/&#34;&gt;Micro Data&lt;/a&gt; e etc, que são modelos de dados muito mais amigáveis e inteligente do RDF/XML. Mas esse foi um dos primeiros modelos adotados pelo &lt;a href=&#34;https://www.w3.org/2001/sw/RDFCore/&#34;&gt;W3C há muito tempo&lt;/a&gt; e por isso, talvez, só talvez, valha a pena você dar uma lida para entender o conceito.&lt;/p&gt;

&lt;p&gt;Deixando isso de lado, o que quero dizer é que nós marcamos esse tipo de informação, para que buscadores, redes sociais e qualquer outro tipo de sistema que precise de dados para funcionar, possa consumir os dados de forma mais inteligente. Então, enquanto as pessoas consomem HTML, lendo seus textos, vendo suas imagens e assistindo seus vídeos, as máquinas consomem esses dados vasculhando seu código procurando por algum significado.&lt;/p&gt;

&lt;h2 id=&#34;o-json-ld-e-o-context&#34;&gt;O JSON-LD e o @context&lt;/h2&gt;

&lt;p&gt;Mas nós não conseguimos resolver de verdade como as máquinas consomem esses dados. Como eu disse, as máquinas precisam de mais detalhes sobre os dados que publicamos. Eu fiz uma apresentação falando sobre como melhoramos a semântica do código usando as &lt;a href=&#34;http://www.slideshare.net/diegoeis/a-verdadeira-semntica-do-html5&#34;&gt;novas tags do HTML5 e microdata&lt;/a&gt;. Mas temos como melhorar isso, usando JSON-LD.&lt;/p&gt;

&lt;p&gt;Quando um sistema acessar seu site, ele vai receber um arquivo JSON, que contém informações sobre o assunto do seu site. O formato é praticamente idêntico ao JSON que você já deve conhecer, mas com alguns valores e chaves diferentes, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;@context&#34;: &#34;http://json-ld.org/contexts/person.jsonld&#34;,
  &#34;@id&#34;: &#34;http://dbpedia.org/page/Bob_Dylan&#34;,
  &#34;name&#34;: &#34;Bob Dylan&#34;,
  &#34;born&#34;: &#34;1941-05-24&#34;,
  &#34;spouse&#34;: &#34;http://dbpedia.org/resource/Sara_Dylan&#34;
}
&lt;/pre&gt;

&lt;p&gt;O problema é quando você começa a receber esses dados de múltiplos websites. Todos eles oferecem dados como esse. Mas e se dois sites colocarem informações iguais em alguns valores? Por exemplo, um site fornece o seguinte dado:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;name&#34;: &#34;Diego&#34;,
  &#34;homepage&#34;: &#34;http://diegoeis.com&#34;
}
&lt;/pre&gt;

&lt;p&gt;E o outro:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;name&#34;: &#34;diegoeis&#34;,
  &#34;homepage&#34;: &#34;http://diegoeis.com&#34;
}
&lt;/pre&gt;

&lt;p&gt;Perceba que no primeiro exemplo, estamos falando sobre uma pessoa. Já no segundo exemplo, em vez do nome de alguém, está algo parecido com um nickname. O robô não tem como saber o que é cada coisa. É por isso que no JSON-LD tem um conceito chamado &lt;strong&gt;@context&lt;/strong&gt;. O &lt;strong&gt;@context&lt;/strong&gt; diz para a aplicação como interpretar o contexto daquelas informações. Perceba que sempre que você conversa com alguém na vida real, a conversa acontece em volta de um contexto. O exemplo legal ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;@context&#34;: &#34;http://json-ld.org/contexts/person.jsonld&#34;,
  &#34;name&#34;: &#34;Diego&#34;,
  &#34;homepage&#34;: &#34;http://diegoeis.com&#34;
}
&lt;/pre&gt;

&lt;h3 id=&#34;mas-e-o-schema-org&#34;&gt;Mas e o Schema.org?&lt;/h3&gt;

&lt;p&gt;Ahh! Sabia que ia rolar essa pergunta. O &lt;a href=&#34;http://schema.org/&#34;&gt;Schema.org&lt;/a&gt; é uma comunidade colaborativa, formada por buscadores como Google e Yahoo! para criar, manter e promover formatos de dados estruturados para a internet, ajudando a estruturar dados para emails, páginas, sistemas etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O que é um vocabulário: imagina que você tem uma série de coisas para descrever para as máquinas, por exemplo: suponha um site sobre filmes. Você quer indicar para os sistemas de busca (ou qualquer outro tipo de sistema interessado), qual é o pedaço de texto na página que é a resenha do filme, qual imagem é o poster do filme etc. Você marcaria o HTML assim:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;htlang-ml&#34;&gt;&amp;lt;div itemscope itemtype=&#34;http://schema.org/Movie&#34;&amp;gt;
  &amp;lt;a itemprop=&#34;url&#34; href=&#34;http://www.warnerbros.com/matrix&#34;&amp;gt;&amp;lt;div itemprop=&#34;name&#34;&amp;gt;&amp;lt;strong&amp;gt;Matrix&amp;lt;/strong&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;
  
  &amp;lt;div itemprop=&#34;description&#34;&amp;gt;The best movie in the real world.&amp;lt;/div&amp;gt;
  
  &amp;lt;div itemprop=&#34;director&#34; itemscope itemtype=&#34;http://schema.org/Person&#34;&amp;gt;
    Directed by: &amp;lt;span itemprop=&#34;name&#34;&amp;gt;The Wachowskis&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
  
  &amp;lt;div&amp;gt;Starring: 
    &amp;lt;div itemprop=&#34;actors&#34; itemscope itemtype=&#34;http://schema.org/Person&#34;&amp;gt;
      &amp;lt;span itemprop=&#34;name&#34;&amp;gt;Laurence Fishburne&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div itemprop=&#34;actors&#34; itemscope itemtype=&#34;http://schema.org/Person&#34;&amp;gt;
      &amp;lt;span itemprop=&#34;name&#34;&amp;gt;Keanu Reeves&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Perceba que então, o Google, por exemplo, consegue saber o que é cada pedaço de dado da página. Assim ele consegue classificar melhor a informação.&lt;/p&gt;

&lt;p&gt;A ideia é o seguinte, o &lt;strong&gt;@context&lt;/strong&gt; serve para que você consiga especificar o vocabulário dos tipos e propriedades que você está servindo no seu documento. Ali no exemplo, eu usei o vocabulário que o próprio pessoal do JSON-LD publicou. Mas o Google, assim como outros sistemas de busca, apoiam largamente o uso do Schema.org, que é um padrão de vocabulário. Fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;@context&#34;: &#34;http://schema.org&#34;,
  &#34;@type&#34;: &#34;Person&#34;,
  &#34;name&#34;: &#34;Diego&#34;,
  &#34;homepage&#34;: &#34;http://diegoeis.com&#34;
}
&lt;/pre&gt;

&lt;p&gt;Veja ali que a segunda chave é o tipo. O Schema.org fornece uma série de vocabulários, logo, preciso dizer qual é o tipo do vocabulário que eu estou me referindo.&lt;/p&gt;

&lt;p&gt;Perceba que &lt;strong&gt;@context&lt;/strong&gt; e o &lt;strong&gt;@type&lt;/strong&gt; definem o “significado” das outras chaves. Se fosse uma empresa:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  “@context”: “http://schema.org/“,
  “@type”: “Organization”,
  “name”: “National Public Radio”
}
&lt;/pre&gt;

&lt;p&gt;A chave &lt;strong&gt;name&lt;/strong&gt; ali agora se refere ao nome de uma Organização e não de uma pessoa. E assim segue com outras “coisas”.&lt;/p&gt;

&lt;h2 id=&#34;e-o-microdata&#34;&gt;E o Microdata?&lt;/h2&gt;

&lt;p&gt;Bom, se você usar o JSON-LD, você não precisa usar Microdata. O Google está investindo pesando com o JSON-LD, por isso, acho que você devia pensar em usá-lo. Outra coisa: para usar Microdata, você vai precisar mexer no seu código HTML para inserir os atributos necessários. Já com o JSON-LD isso não é necessário, já que você serve via JSON as partes necessárias das informações que você quer publicar.&lt;/p&gt;

&lt;h2 id=&#34;identificadores-globais-do-json-ltd&#34;&gt;Identificadores Globais do JSON-LTD&lt;/h2&gt;

&lt;p&gt;Mas não adianta usar uma terminologia curta, que máquinas e humanos entendam, contendo um contexto, se você ainda não consegue identificar exatamente qual o assunto da conversa. No exemplo acima, o assunto era uma pessoa chamada &lt;strong&gt;Diego&lt;/strong&gt;. Mas qual &lt;strong&gt;Diego&lt;/strong&gt;? Existem milhares deles por aí. Para fazer isso, o JSON-LD usa uma &lt;strong&gt;@id&lt;/strong&gt; para identificar globalmente esse assunto (que pode ser um animal, uma pessoa, um objeto etc).&lt;/p&gt;

&lt;p&gt;Logo, se alguém quiser falar sobre o &lt;strong&gt;Diego&lt;/strong&gt;, basta referenciar esse id específico.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  “@context”: “http://json-ld.org/contexts/person.jsonld”,
  “@id”: “http://diegoeis.com/sobre”
  “name”: “Diego”,
  “homepage”: “http://diegoeis.com”
}
&lt;/pre&gt;

&lt;p&gt;Logo, existem três coisas principais que precisamos entender sobre o JSON-LD.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ele te dá um contexto para a informação.&lt;/li&gt;
&lt;li&gt;Ele usa uma terminologia e uma estrutura fácil para máquinas e humanos.&lt;/li&gt;
&lt;li&gt;Ele identifica o assunto para resolver a ambiguidade de informações.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;como-eu-sirvo-o-json-ld&#34;&gt;Como eu sirvo o JSON-LD&lt;/h2&gt;

&lt;p&gt;Simples: basta chamar na sua página o JSON com as informações que você quer publicar. Veja abaixo um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;&amp;lt;script type=“application/ld+json”&amp;gt; 
{ 
  “@context” : “http://schema.org”, 
  “@type” : “Article”, 
  “name” : “Um pouco sobre imagens para Web”, 
  “author” : { “@type” : “Person”, 
  “name” : “por Diego Eis” }, 
  “datePublished” : “2016-07-05”, 
  “image” : “http://tableless.com.br/wp-content/uploads/2016/07/image-format.jpg”, 
  “articleBody” : “Queria falar um pouco sobre alguns formatos de imagens que usamos todos os dias. Dar algumas informações que encontrei por aí. Vamos explorar as duas principais opções de formato gráfico que pode ser usado na Web para representar gráficos simples,  esquemas ou logotipos. Embora hoje possamos usar SVG em diversos momentos,  principalmente para ícones ou Logos, o PNG e o GIF ainda podem ser usadas. Depois falamos mais sobre o SVG.&amp;lt;/P&amp;gt;\n&amp;lt;H3&amp;gt;GIF&amp;lt;/H3&amp;gt;\n&amp;lt;P&amp;gt;GIF (sigla para Graphics Interchange Format) foi desenvolvido no final dos anos 1980 e ainda é amplamente utilizado. PNG (Portable Network Graphics) foi desenvolvido por volta de 1995, tornou-se uma recomendação W3C em 1996, e tem sido amplamente implementado na maioria dos navegadores da Web, logo em 1998.&amp;lt;/P&amp;gt;&amp;lt;/p&amp;gt;}
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O Google tem uma ferramenta sensacional que te ajuda a criar marcação de dados estruturados direto na sua página. &lt;a href=&#34;https://www.google.com/webmasters/markup-helper/u/0/&#34;&gt;Olha aqui&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;um-pouco-mais-sobre-web-semântica&#34;&gt;Um pouco mais sobre Web Semântica&lt;/h2&gt;

&lt;p&gt;Essas coisas são as fundações do Linked Data. A Web Semântica é muito do que simplesmente organizar informação. Ela envolve também relacionar esses dados encontrados em diferentes pontos da internet, além de facilitar o consumo e a reutilização desses dados por máquinas e seres humanos.&lt;/p&gt;

&lt;p&gt;O Tim Berners-Lee &lt;a href=&#34;https://www.w3.org/DesignIssues/LinkedData.html&#34;&gt;fala sobre os quatro passos (ou regras)&lt;/a&gt; para que os dados sejam interconectados na internet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Identificar as coisas com URIs. Se a forma de identificar os dados não usam o formato universal de símbolos de URI, nós não podemos chamar isso de Web Semântica.&lt;/li&gt;
&lt;li&gt;Usar URI pelo protocolo HTTP é totalmente aceitável pela web inteira. Existe uma tendência gigante da criação de novos esquemas de URI como LSIDs, XRIs etc, se baseando em algo totalmente novo, por fora do DNS, impossibilitando o consumo da informação via formato não popular.&lt;/li&gt;
&lt;li&gt;É necessário ter acesso à informação via URIs. Basicamente você precisa acessar uma URI e encontrar a informação ali, pronta para ser reutilizada.&lt;/li&gt;
&lt;li&gt;Usar links para relacionar dados pela web.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Veja as regras se baseiam em fundações fortes da web hoje. Talvez essas fundações mudem. Mas não vai ser fácil. Veja o trabalho que é fazer para implementar o HTTP/2. Por isso creio que essas regras valerão durante muito tempo e serão ainda nossa baliza para poder servir informação de forma livre pela internet.&lt;/p&gt;

&lt;h3 id=&#34;para-ler-mais&#34;&gt;Para ler mais:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://json-ld.org/&#34;&gt;Site oficial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://manu.sporny.org/2014/json-ld-origins-2/&#34;&gt;JSON-LD and Why I Hate the Semantic Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thecustomizewindows.com/2014/08/json-ld-details/&#34;&gt;JSON-LD in Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4x_xzT5eF5Q&#34;&gt;Vídeo em ingles sobre Linked Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/json-ld/json-ld.org&#34;&gt;Repositório do JSON-LD no GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://norman.walsh.name/2004/07/30/rdfxml&#34;&gt;Is RDF/XML Good For Anything?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>WP Rest API – O futuro do WordPress</title>
      <link>https://tableless.github.io/hugo-public/rest-json-wp-api-e-o-futuro-do-wordpress/</link>
      <pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/rest-json-wp-api-e-o-futuro-do-wordpress/</guid>
      <description>

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;O WP-API é a nova aposta do WordPress. Atualmente, funciona como um plugin do WordPress, a ser incorporado em duas etapas no Core, que expõe o conteúdo em uma arquitetura REST dispondo-o em formato JSON, pronto para consumo em outras linguagens/sites/aplicações/aplicativos.&lt;/p&gt;

&lt;h2 id=&#34;índice&#34;&gt;Índice&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#conceito&#34;&gt;Conceito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prowp&#34;&gt;O que o API significa para o WordPress?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#futuro&#34;&gt;Se esse é o futuro, do que o WP-API é capaz?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#php&#34;&gt;Romper laços com o PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mobile&#34;&gt;Fazer uma integração mobile de verdade.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#frontend&#34;&gt;Front-End modular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#backend&#34;&gt;Back-End com a sua assinatura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#javascript&#34;&gt;Mais um incentivo para você entrar na vibe do JavaScript e seguir a nova ordem mundial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#seguranca&#34;&gt;Ao expôr meu conteúdo, o WP-API não oferece nenhum risco à segurança?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#como&#34;&gt;Como funciona o WP-API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#http&#34;&gt;Um pouco de HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rest&#34;&gt;O que significa REST?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#api&#34;&gt;API? é tipo&amp;#8230; APP?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#instalacao&#34;&gt;Instalando o plugin e fazendo sua primeira requisição&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#posts&#34;&gt;Para obter uma lista de Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post&#34;&gt;Para visualizar um post específico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#paginas&#34;&gt;Para obter uma lista de Páginas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pagina&#34;&gt;Para visualizar uma página especifica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#catags&#34;&gt;Requisitando uma Categoria ou tag de determinado post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cat&#34;&gt;Obtendo uma lista de Categorias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tag&#34;&gt;Lista de Tags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpt&#34;&gt;Lidando e visualizando conteúdo com Custom Post Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#acf&#34;&gt;Usando o ACF? Você ainda está na zona de conforto!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final&#34;&gt;Palavras finais&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conceito&#34;&gt;Conceito&lt;/h2&gt;

&lt;p&gt;Considerada a próxima grande aposta do WordPress (plataforma utilizada por ~25% dos sites em todo mundo), com a primeira fase prevista para a versão 4.4 em dezembro deste ano (2015) e integração total na versão 4.5, o WP-API (também conhecido como JSON API ou REST API) expõe as informações de um site feito em WordPress para que sites externos/aplicações/aplicativos consumam seus dados. Na data deste artigo, o WP-API está disponível como &lt;a href=&#34;https://wordpress.org/plugins/rest-api/&#34; target=&#34;_blank&#34;&gt;plugin&lt;/a&gt; e os desenvolvedores estão otimistas sobre a  &lt;a href=&#34;https://make.wordpress.org/core/tag/json-api/&#34; target=&#34;_blank&#34;&gt;integração com o core do WP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O WP-API foi criado para facilitar a interação de sites em WordPress com outros sites/aplicações. O API permite que outros serviços sejam integrados ao WordPress e abre a possiblidade para que os mesmos criem, leiam, atualizem e deletem seu conteúdo (CRUD), sem necessariamente terem uma instalação local do WordPress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Antes que você questione:&lt;/strong&gt; sem autenticação, apenas a leitura do conteúdo é possível. &lt;a href=&#34;#seguranca&#34;&gt;Mais abaixo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine &lt;a href=&#34;#php&#34;&gt;desenvolver seu blog em WordPress usando Rails? Django? Node? Java???&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quê cara, tá maluco? Que post é esse?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Essa realidade é possível porque a Web é feita de &lt;a href=&#34;#http&#34;&gt;HTTP&lt;/a&gt;, que tem equivalentes CRUD com seus verbos POST, GET, PUT e DELETE, e o &lt;a href=&#34;#api&#34;&gt;API&lt;/a&gt; é feito usando uma &lt;a href=&#34;#rest&#34;&gt;arquitetura REST&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No momento, desenvolver em WordPress requer algum conhecimento em PHP. Com o API, o PHP se tornará algo estritamente opcional, habilitando o desenvolvedor a utilizar seus conhecimentos em HTML, CSS e JavaScript/Ruby/Python/C#/FORTRAN (ok, forcei), o que for, para desenvolver seus temas, integrações, aplicações mobile e tudo o que a juventude de agora gosta de desenvolver. &lt;em&gt;A saber&lt;/em&gt;: um API é uma porção de códigos que permite que outras aplicações acessem seus dados na web em uma forma mais simples (vide o API do YouTube, Facebook, Instagram e agora o WordPress).&lt;/p&gt;

&lt;p&gt;Sendo um API RESTful, o WP-API permite que aplicações bem interessantes sejam criadas &lt;a href=&#34;#como&#34;&gt;utilizando uma interface JSON&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prowp&#34;&gt;O que o API significa para o WordPress?&lt;/h2&gt;

&lt;p&gt;VIDA. FUTURO. DOMINAÇÃO DO MERCADO. UM APLICATIVO DA SUA EMPRESA CONSUMINDO DATA DO SITE FEITO EM WORDPRESS.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-large wp-image-52378 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/11/wp.jpg&#34; alt=&#34;wp&#34; width=&#34;280&#34; height=&#34;157&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O API evolui o WordPress como um CMS para uma aplicação completa. Veja: o API cria um padrão para que outras linguagens consigam interagir diretamente com seu conteúdo.&lt;/p&gt;

&lt;h2 id=&#34;futuro&#34;&gt;Se esse é o futuro, do que o WP-API é capaz?&lt;/h2&gt;

&lt;p&gt;Com a pretensão de usar a força da marca para incentivar desenvolvedores de outras linguagens a construir suas aplicações utilizando o WordPress, sejam elas plugins, temas, integrações, aplicações ou aplicativos, o WP-API amplifica o leque do WordPress à um nível inimáginável há alguns anos e talvez faça você perder seu preconceito. A ferramenta chega com as seguintes promessas:&lt;/p&gt;

&lt;h3 id=&#34;php&#34;&gt;Romper laços com o PHP&lt;/h3&gt;

&lt;p&gt;À parte da cultura da boca-torta criada no passado, o PHP ainda é a força-motriz por trás de 80% dos sites do mundo e tem o suporte de gigantes como Facebook, Wikipedia e o próprio WordPress. Entretanto, nos últimos anos houveram avanços significativos em linguagens como Ruby, Python, Go e claro, JavaScript, seja em termos de ferramentas, escalabilidade ou frameworks disponíveis.&lt;/p&gt;

&lt;p&gt;O WP-API dá aos desenvolvedores dessas linguagens acesso imediato à todo o leque de funcionalidades do WordPress. Razão suficiente para captar a atenção dos desenvolvedores e proprietários de sites. Quando pensamos na grandiosidade do ecossistema do WordPress e nas possibilidades que os desenvolvedores tem de gerar receita com ele (sejam temas ou plugins), o potencial de portar sites inteiros feitos em WordPress para outras linguagens/plataformas é algo tentador em termos de experiência e, claro, receita.&lt;/p&gt;

&lt;h3 id=&#34;mobile&#34;&gt;Fazer uma integração mobile de verdade.&lt;/h3&gt;

&lt;p&gt;Com a popularização de frameworks como Foundation e Bootstrap, grande parte dos sites desenvolvidos nos últimos anos chegaram a um padrão aceitável em termos de visualização de conteúdo em dispositivos móveis, mas uma integração de verdade está longe de ser um padrão.&lt;/p&gt;

&lt;p&gt;Estava.&lt;/p&gt;

&lt;p&gt;Usando o WP-API, desenvolvedores mobile poderão lidar com sites em WordPress como lidariam com qualquer serviço de &lt;a href=&#34;https://en.wikipedia.org/wiki/Mobile_Backend_as_a_service&#34; target=&#34;_blank&#34;&gt;Mobile Back End as a Service (MBaaS ou BaaS)&lt;/a&gt;. Este ponto sozinho já é suficiente para habilitar um site em WordPress como uma possibilidade para servir de backend para aplicações mobile nativas e serve de fundação para todos os tipos de integrações no futuro.&lt;/p&gt;

&lt;p&gt;Quando considerada a quantidade de sites rodando WP, que têm uma versão completamente distinta de suas versões mobile, o escopo para integrações futuras é imenso. O ideal de ter um banco de dados e diversas aplicações consumindo suas informações, agora é possível de forma genuína e descomplicada.&lt;/p&gt;

&lt;h3 id=&#34;frontend&#34;&gt;Front-End modular&lt;/h3&gt;

&lt;p&gt;Do ponto de vista do API, o front-end do WordPress é só mais uma aplicação externa consumindo seus dados. Aplicações MVW (model, view, whatever) como AngularJS, EmberJS, MeteorJS, BackboneJS, poderão facilmente fazer suas requisições e montar o workflow dos seus sonhos sem se preocupar com as entrelinhas de desenvolvimento em WP.&lt;/p&gt;

&lt;p&gt;A expectativa é ver uma revolução em plugins e temas para desenvolvedores e donos de site ao redor do mundo (são 25% da web, considere).&lt;/p&gt;

&lt;h3 id=&#34;backend&#34;&gt;Back-End com a sua assinatura&lt;/h3&gt;

&lt;p&gt;A potencial integração do REST API no core abre a possibilidade de reimaginar o admin do WordPress. Imagine que todas as funcionalidades do core estão abertas à você, com nenhum visual para te limitar. Chega de editar cores e imagens para tentar deixar o admin &amp;#8220;do seu jeito&amp;#8221;, ou baixar o &lt;a href=&#34;https://wordpress.org/plugins/user-role-editor/&#34; target=&#34;_blank&#34;&gt;User Role Editor&lt;/a&gt; para proibir seus clientes de destruírem seu trabalho, ou usar uma função para injetar CSS com um &lt;tt&gt;&amp;ldquo;display: none&amp;rdquo;&lt;/tt&gt; em coisas que você não gostaria que estivessem visíveis. Com o API, o controle é todo seu.&lt;/p&gt;

&lt;h3 id=&#34;javascript&#34;&gt;Mais um incentivo para você entrar na vibe do JavaScript e seguir a nova ordem mundial&lt;/h3&gt;

&lt;p&gt;Convenhamos: o JavaScript está criando uma nova ordem mundial. É hype, é futuro, é presente, opiniões divergentes. Em comum: é JavaScript. Frameworks MV** e outros menos conhecidos estão ditando uma tendência, que acredito seguir linear por um bom tempo.&lt;/p&gt;

&lt;p&gt;O WP-API faz do WordPress um companheiro ideal para essas tecnologias. Na visão de desenvolvedor, poder utilizar tecnologias de vanguarda mantendo sua bagagem em WordPress, é o mundo ideal.&lt;/p&gt;

&lt;h2 id=&#34;seguranca&#34;&gt;Ao expôr meu conteúdo, o WP-API não oferece nenhum risco à segurança?&lt;/h2&gt;

&lt;p&gt;Não. Não propriamente por conta do WP-API.&lt;/p&gt;

&lt;p&gt;A informação que o API fornece é, naturalmente, o que um site WordPress dispõe por padrão publicamente. A única diferença entre o front-end de um site e o WP-API é a forma como as informações são apresentadas. Por padrão não é possível, sem autenticação, apagar, atualizar ou criar nada &amp;#8211; apenas ler o conteúdo (requisição GET).&lt;/p&gt;

&lt;p&gt;Claro que novas funcionalidades expõem novos riscos. Porém, por ora, nenhuma vulnerabilidade foi encontrada e manter seu WordPress atualizado é um método simples e confiável de se manter seguro.&lt;/p&gt;

&lt;h2 id=&#34;como&#34;&gt;Como funciona o WP-API&lt;/h2&gt;

&lt;p&gt;O WP-API é acessado por HTTP e retorna requisições em formato JSON. Ambos fáceis de utilizar e com grande suporte pelas linguagens de programação mais populares, através de bibliotecas como Net::HTTP (Ruby), Requests (Phyton) e GoReq (Go), para citar alguns.&lt;/p&gt;

&lt;p&gt;Eu poderia me limitar a dizer que o WP-API é uma REST API, o que ficaria abstrato e não é o objetivo do artigo. O WP-API é empolgante, mas se você não tem nenhuma base sobre o que significa uma arquitetura REST, HTTP e requisições em geral, procurei expôr os conceitos mais básicos abaixo.&lt;/p&gt;

&lt;p&gt;Antes de falar de REST, é necessário entender alguns conceitos de HTTP.&lt;/p&gt;

&lt;h3 id=&#34;http&#34;&gt;Um pouco de HTTP&lt;/h3&gt;

&lt;p&gt;Ele assina pelo nome de Hypertext Transfer Protocol (HTTP) e é um conjunto de regras que determina como informações podem ser enviadas e recebidas e quais mensagens devem ser retornadas em resposta às requisições.&lt;/p&gt;

&lt;p&gt;Por exemplo, quando uma requisição é enviada pelo cliente e recebida com sucesso pelo servidor, a mensagem (conhecida como código de retorno, acompanhado de uma frase explicativa) é um variante de 200 (onde o número mais importante é a casa da centena, onde 2 significa sucesso na requisição). A mais famosa talvez seja a 404 &amp;#8211; Not Found, que retorna um valor inexistente para sua requisição (onde o primeiro número quatro significa &lt;em&gt;erro no cliente&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Outros protocolos bem conhecidos são o POP3 e o SMTP, que são usados para receber e enviar e-mails, respectivamente.&lt;/p&gt;

&lt;p&gt;O HTTP tem duas funções distintas: servidor e cliente. Em geral, o cliente envia a requisição e o servidor responde. É feito basicamente do &lt;em&gt;header&lt;/em&gt; (que contém metadata e informações importantes para o HTTP) e do &lt;em&gt;body&lt;/em&gt; (que contém o conteúdo da mensagem).&lt;/p&gt;

&lt;p&gt;Hypertext Transfer Protocol ou HTTP é a alma da web. É utilizado todas as vezes que você transfere um documento, ou faz uma solicitação AJAX.&lt;/p&gt;

&lt;p&gt;Se quiser mais informações, o TutsPlus tem &lt;a href=&#34;http://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest--net-16340&#34; target=&#34;_blank&#34;&gt;um ótimo tutorial&lt;/a&gt;, que usei como referência, com uma &lt;a href=&#34;http://code.tutsplus.com/pt/tutorials/a-beginners-guide-to-http-and-rest--net-16340?ec_unit=dropdown-language&#34; target=&#34;_blank&#34;&gt;igualmente ótima tradução&lt;/a&gt; feita pelo &lt;a href=&#34;http://tutsplus.com/authors/thierry-rene&#34; target=&#34;_blank&#34;&gt;Thierry Rene&lt;/a&gt;. Vale cada palavra.&lt;/p&gt;

&lt;p&gt;Concordo com o autor do link de referência sobre o conhecimento de HTTP não ser comum entre desenvolvedores, o que também considero importante e recomendo a leitura.&lt;/p&gt;

&lt;h3 id=&#34;rest&#34;&gt;O que significa REST?&lt;/h3&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-medium wp-image-52376&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/11/rest.jpg&#34; alt=&#34;rest&#34; width=&#34;279&#34; height=&#34;157&#34; /&gt;&lt;/p&gt;

&lt;p&gt;REST é definido por &lt;em&gt;Representational State Transfer&lt;/em&gt;! Entendi tudo, deixa eu dormir agora, obrigado.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Arquitetura: De acordo com uma citação do &lt;cite&gt;&lt;a href=&#34;https://pt.wikipedia.org/wiki/Arquitetura&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt;&lt;/cite&gt;: a arquitetura lidaria com qualquer problema de agenciamento, organização, estética e ordenamento de componentes em qualquer situação de arranjo espacial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uma arquitetura REST é uma uma forma de organizar as interações entre sistemas. Ele define padrões, o que pode e o que não se deve fazer. A arquitetura fornece uma forma padronizada de como acessar dados. Em geral, sistemas seguem um padrão de comandos. Execute informação X, receba informação Y. Em uma arquitetura REST, o acesso é fornecido por recursos. O que significa que, em uma URL, tudo o que é passado são recursos que podem ser consumidos, não existem comandos inseridos e procura-se utilizar uma URL &lt;em&gt;humanamente legível&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;exemplo-de-comando-em-uma-url&#34;&gt;Exemplo de comando em uma URL.&lt;/h4&gt;

&lt;p&gt;Supondo que eu, ao acessar o site de minha empresa, gostaria de procurar por um vendedor admitido em 2015:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://siteincrivel.com.br/equipe.php?funcao=vendedor&amp;admissao=2015&lt;/pre&gt;

&lt;p&gt;Repare na instrução ao servidor: busque por vendedores admitidos em 2015. Enquanto a instrução pode ser facilmente interpretada, &lt;em&gt;equipe&lt;/em&gt; não é um recurso.&lt;/p&gt;

&lt;p&gt;Se a requisição fosse feita em uma arquitetura REST, minha URL seria:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://siteincrivel.com.br/equipe/admissao/2015/funcao/vendedor/&lt;/pre&gt;

&lt;p&gt;A URL, sem parâmetros, identifica o recurso que você deseja manipular de forma que eu obtenha informações precisas em todas as camadas. Fazer a requisição em um diretório retorna uma lista de recursos. Por exemplo, retirar &amp;#8220;vendedor&amp;#8221; da URL poderia me fornecer informações sobre todas as funções contratadas no ano de 2015.&lt;/p&gt;

&lt;p&gt;Veja: a arquitetura não abomina o uso de parâmetros na URL, que podem ser utilizados como uma espécie de filtro ou outra forma conveniente.&lt;/p&gt;

&lt;p&gt;Por fim, os sistemas que seguem os princípios REST são chamados de RESTFul.&lt;/p&gt;

&lt;h3 id=&#34;api&#34;&gt;API? é tipo&amp;#8230; APP?&lt;/h3&gt;

&lt;p&gt;Não, não.&lt;/p&gt;

&lt;p&gt;Um API (application programming interface) é uma forma simples de se comunicar com uma aplicação. Através de &lt;u&gt;endpoints*&lt;/u&gt; definidos, os desenvolvedores podem fazer seus programas e scripts interagirem com a aplicação.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Endpoints são definidos por suas funções, que podem ser acessados por HTTP. É a forma que o WP-API (que agora que você pegou a manha eu posso dizer: é um REST API) provê suas informações e permite seus desenvolvedores manipularem o WordPress, podendo ser a publicação de um post, atualização de uma página ou a exclusão de um comentário.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certo, Cezar. Tudo isso parece mágico, linda teoria. Agora, como posso começar com o WP-API?&lt;/p&gt;

&lt;h2 id=&#34;instalacao&#34;&gt;Instalando o plugin e fazendo sua primeira requisição&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-52375&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/11/plugin_v2b.jpeg&#34; alt=&#34;plugin_v2b&#34; width=&#34;766&#34; height=&#34;343&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Os exemplos utilizados requerem a versão 2 do API. Para baixá-lo, vá ao repositório do WordPess: &lt;a href=&#34;https://wordpress.org/plugins/rest-api/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://wordpress.org/plugins/rest-api/&#34;&gt;https://wordpress.org/plugins/rest-api/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois de baixado, basta fazer a instalação. A instalação ocorre da mesma forma que qualquer outro plugin do WordPress.&lt;/p&gt;

&lt;h3 id=&#34;visualizando-o-conteúdo-like-a-boss-ou-a-primeira-requisição-a-gente-nunca-esquece&#34;&gt;Visualizando o conteúdo &lt;em&gt;like a boss&lt;/em&gt; ou A primeira requisição a gente nunca esquece&lt;/h3&gt;

&lt;p&gt;Se você usa o Chrome, baixe a extensão do &lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&#34; target=&#34;_blank&#34;&gt;Postman&lt;/a&gt;. O postman, dentre suas finalidades, vai servir para o propósito de visualizar o conteúdo da maneira correta.&lt;/p&gt;

&lt;h4 id=&#34;para-todas-as-requisições-que-faremos-tome-nota-dessa-instrução&#34;&gt;Para todas as requisições que faremos, tome nota dessa instrução&lt;/h4&gt;

&lt;p&gt;Para visualizar sua primeira requisição, abra o Postman (você pode digitar o endereço no browser diretamente, se você não se importar com um monte de código chapado na tela) e digite na URL (válido para todos os exemplos abaixo):&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://siteincrivel.com.br/wp-json/wp/v2/REQUISIÇÃO_AQUI.&lt;/pre&gt;

&lt;p&gt;Onde &lt;em&gt;siteincrivel&lt;/em&gt; é o seu site e _REQUISIÇÃO&lt;em&gt;AQUI&lt;/em&gt; será a requisição que vocẽ deseja fazer, dentre as possibilidades:&lt;/p&gt;

&lt;h3 id=&#34;posts&#34;&gt;Para obter uma lista de Posts&lt;/h3&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://siteincrivel.com.br/wp-json/wp/v2/posts&lt;/pre&gt;

&lt;h3 id=&#34;post&#34;&gt;Para visualizar um post específico&lt;/h3&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://siteincrivel.com.br/wp-json/wp/v2/{id}&lt;/pre&gt;

&lt;p&gt;Onde {id} é o ID do Post que você precisa.&lt;/p&gt;

&lt;h3 id=&#34;paginas&#34;&gt;Para obter uma lista de Páginas&lt;/h3&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://siteincrivel.com.br/wp-json/wp/v2/pages&lt;/pre&gt;

&lt;h3 id=&#34;pagina&#34;&gt;Para visualizar uma página especifica:&lt;/h3&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://siteincrivel.com.br/wp-json/wp/v2/pages/{id}&lt;/pre&gt;

&lt;p&gt;Onde {id} é o ID da página que você precisa.&lt;/p&gt;

&lt;h3 id=&#34;para-visualizar-uma-lista-de-categorias-ou-tags&#34;&gt;Para visualizar uma lista de categorias ou tags&lt;/h3&gt;

&lt;p&gt;Categorias e Tags são consideradas taxonomias. As taxonomias, diferente de posts e páginas, funcionam pelo slug e não pelo ID. O ID é necessário apenas para chamadas de Posts/Páginas.&lt;/p&gt;

&lt;p&gt;Os elementos de uma categoria ou tag, são consideradas pelo WordPress como termos (terms). Portanto ao criar a categoria &lt;em&gt;Marketing&lt;/em&gt;, você está dizendo ao WordPress que a taxonomia Categoria tem um termo chamado &lt;em&gt;Marketing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sendo assim:&lt;/p&gt;

&lt;h3 id=&#34;catags&#34;&gt;Requisitando uma Categoria ou tag de determinado post:&lt;/h3&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://demo.wp-api.org/wp-json/wp/v2/posts/{id_do_post}/terms/category/&lt;/pre&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://demo.wp-api.org/wp-json/wp/v2/posts/{id_do_post}/terms/tag/&lt;/pre&gt;

&lt;h3 id=&#34;cat&#34;&gt;Obtendo uma lista de Categorias&lt;/h3&gt;

&lt;p&gt;Nossa categoria modelo (Marketing) deverá aparecer aqui&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://siteincrivel.com.br/wp-json/wp/v2/terms/category&lt;/pre&gt;

&lt;h3 id=&#34;tag&#34;&gt;Lista de Tags&lt;/h3&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://seusite.com.br/wp-json/wp/v2/terms/tag&lt;/pre&gt;

&lt;h3 id=&#34;cpt&#34;&gt;Lidando e visualizando conteúdo com Custom Post Types:&lt;/h3&gt;

&lt;p&gt;Por padrão, o WP-API não autoriza a visualização direta de CPT. Para autorizar a requisição, abra o arquivo onde você armazena as informações sobre CPT do seu tema (em geral no &lt;tt&gt;functions.php&lt;/tt&gt;, ou qualquer &lt;tt&gt;include&lt;/tt&gt; que você tenha feito) e adicione o argumento (dentro de &lt;tt&gt;$args&lt;/tt&gt;, por favor):&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;show_in_rest =&amp;gt; true&lt;/pre&gt;

&lt;p&gt;Caso você tenha feito corretamente, o endereço abaixo vai listar os posts relacionados àquele CPT:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;http://siteincrivel.com.br/wp-json/wp/v2/{nome_do_cpt}&lt;/pre&gt;

&lt;h3 id=&#34;acf&#34;&gt;Usando o ACF? Você ainda está na zona de conforto!&lt;/h3&gt;

&lt;p&gt;A integração com o ACF é extensa para o objetivo do post, o que não importa muito, pois &lt;a href=&#34;https://wordpress.org/plugins/acf-to-wp-api/&#34; target=&#34;_blank&#34;&gt;existe um plugin excelente&lt;/a&gt; que cumpre a maioria das finalidades do ACF. Seja feliz.&lt;/p&gt;

&lt;h2 id=&#34;final&#34;&gt;Palavras finais&lt;/h2&gt;

&lt;p&gt;Vejo em muitos grupos e em alguns sites sobre o futuro do WordPress, que o sistema está em declínio e alguns absurdos também. O WP-API é uma grande aposta e suas promessas fazem merecer um olhar atento à nova funcionalidade.&lt;/p&gt;

&lt;p&gt;Se quiser um &lt;em&gt;modelo&lt;/em&gt; para começar, pode tentar o &lt;a href=&#34;https://github.com/Automattic/picard&#34; target=&#34;_blank&#34;&gt;Picard&lt;/a&gt;, feito em ReactJS pela própria Automattic, ou se quiser uma ideia sobre mais possibilidades do API, o Make WordPress Core tem uma &lt;a href=&#34;https://make.wordpress.org/core/2015/07/23/rest-api-whos-using-this-thing/&#34; target=&#34;_blank&#34;&gt;thread&lt;/a&gt; sobre aplicações que desenvolvedores estão trabalhando.&lt;/p&gt;

&lt;p&gt;E você, tem alguma opinião a respeito? Desenvolveu alguma aplicação com o WP-API? Deixe um comentário, eu adoraria saber!&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;Referências:&lt;/cite&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wp-api.org/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://wp-api.org/&#34;&gt;http://wp-api.org/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://feelingrestful.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://feelingrestful.com/&#34;&gt;https://feelingrestful.com/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://observer.com/2015/07/wordpress-rest-api/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://observer.com/2015/07/wordpress-rest-api/&#34;&gt;http://observer.com/2015/07/wordpress-rest-api/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jacklenox.com/2015/03/30/building-themes-with-the-wp-rest-api-wordcamp-london-march-2015/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://jacklenox.com/2015/03/30/building-themes-with-the-wp-rest-api-wordcamp-london-march-2015/&#34;&gt;http://jacklenox.com/2015/03/30/building-themes-with-the-wp-rest-api-wordcamp-london-march-2015/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://torquemag.io/client-side-applications-powered-by-the-wordpress-json-rest-api/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://torquemag.io/client-side-applications-powered-by-the-wordpress-json-rest-api/&#34;&gt;http://torquemag.io/client-side-applications-powered-by-the-wordpress-json-rest-api/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://premium.wpmudev.org/blog/wordpress-rest-api/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://premium.wpmudev.org/blog/wordpress-rest-api/&#34;&gt;https://premium.wpmudev.org/blog/wordpress-rest-api/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wpengine.com/blog/josh-pollock-wordpress-rest-api-finely-tuned-consultant/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://wpengine.com/blog/josh-pollock-wordpress-rest-api-finely-tuned-consultant/&#34;&gt;https://wpengine.com/blog/josh-pollock-wordpress-rest-api-finely-tuned-consultant/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://premium.wpmudev.org/blog/using-wordpress-rest-api/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://premium.wpmudev.org/blog/using-wordpress-rest-api/&#34;&gt;http://premium.wpmudev.org/blog/using-wordpress-rest-api/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apppresser.com/wp-api-post-submission/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://apppresser.com/wp-api-post-submission/&#34;&gt;https://apppresser.com/wp-api-post-submission/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.nexcess.net/2015/06/04/what-does-the-new-rest-api-mean-for-wordpress/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://blog.nexcess.net/2015/06/04/what-does-the-new-rest-api-mean-for-wordpress/&#34;&gt;https://blog.nexcess.net/2015/06/04/what-does-the-new-rest-api-mean-for-wordpress/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wpwhitesecurity.com/wordpress-security/wordpress-rest-api-and-the-security-worries/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.wpwhitesecurity.com/wordpress-security/wordpress-rest-api-and-the-security-worries/&#34;&gt;http://www.wpwhitesecurity.com/wordpress-security/wordpress-rest-api-and-the-security-worries/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sitepoint.com/wp-api/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.sitepoint.com/wp-api/&#34;&gt;http://www.sitepoint.com/wp-api/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://1fix.io/blog/2015/07/20/query-vars-wp-api/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://1fix.io/blog/2015/07/20/query-vars-wp-api/&#34;&gt;https://1fix.io/blog/2015/07/20/query-vars-wp-api/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest--net-16340&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest&amp;amp;#8211;net-16340&#34;&gt;http://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest&amp;amp;#8211;net-16340&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://make.wordpress.org/core/2015/07/23/rest-api-whos-using-this-thing/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://make.wordpress.org/core/2015/07/23/rest-api-whos-using-this-thing/&#34;&gt;https://make.wordpress.org/core/2015/07/23/rest-api-whos-using-this-thing/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>O grande desencontro do HTTP com o HTML</title>
      <link>https://tableless.github.io/hugo-public/o-grande-desencontro-http-com-o-html/</link>
      <pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-grande-desencontro-http-com-o-html/</guid>
      <description>

&lt;p&gt;O texto irá contar a evolução e desencontro de duas tecnologias. O importante aqui é apresentar a você uma série de conceitos e raciocínios ligados à linguagem de marcação e ao protocolo de marcação mais famosos dos nossos tempos. Vê se não banca o curioso, nada de descer até o fim do texto para conhecer o desfecho desta trama.&lt;/p&gt;

&lt;h2 id=&#34;prólogo&#34;&gt;Prólogo&lt;/h2&gt;

&lt;h3 id=&#34;hypertext-transfer-protocol-http&#34;&gt;Hypertext Transfer Protocol (HTTP)&lt;/h3&gt;

&lt;p&gt;O HTTP é um protocolo de comunicação para distribuição de objetos de hipermídia referenciados por uma URL. Este é o principal dos protocolos da Internet e com certeza, como desenvolvedores, é o que devemos melhor conhecer. A função do protocolo é bastante simples: realizar requisições e receber respostas entre um cliente e servidor.&lt;/p&gt;

&lt;p&gt;A transmissão de informações entre um emissor e um receptor caracteriza uma comunicação. E da mesma forma que uma comunicação interpessoal, a cordialidade é essencial. O protocolo HTTP estabelece um cabeçalho para suas requisições e respostas. O cabeçalho de uma mensagem são informações complementares que são de uso do cliente e servidor. Através das informações passadas pelo cabeçalho, que são de uso exclusivo do servidor e navegador, é possível informar em uma requisição a preferência de idiomas, as codificações e os formatos de conteúdo para uma resposta. O cabeçalho da resposta, por sua vez, contém o &lt;a href=&#34;http://httpstatus.es&#34;&gt;código de status&lt;/a&gt;, codificação, formato do conteúdo e tempo de expiração da página.&lt;/p&gt;

&lt;h4 id=&#34;métodos-de-requisição&#34;&gt;Métodos de requisição&lt;/h4&gt;

&lt;p&gt;O protocolo HTTP foi criado no projeto World Wide Web e designado para operar essencialmente com documentos de hipertexto. Nesta época, havia somente o método GET para requisitar as páginas, mas isto foi antes de qualquer especificação do protocolo.&lt;/p&gt;

&lt;p&gt;O HTTP 1.1, que constitui a especificação consolidada mais recente, possui alguns outros métodos que são informados no cabeçalho da requisição. Os principais métodos que você deve conhecer são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;: desde sempre, solicita um objeto para o servidor. Em tempo, objetos são qualquer entidade que o servidor conheça e que o cliente esteja interessando em manipular.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt;: escreve um objeto no servidor de maneira a respeitar a propriedade da &lt;a href=&#34;http://pt.wikipedia.org/wiki/Idempot%C3%AAncia&#34;&gt;idempotência&lt;/a&gt;. Em linhas gerais, este tipo de requisição pode ser chamada mais de uma vez e o resultado no servidor será o mesmo. Geralmente estas requisições carregam consigo um identificador único para o objeto e portanto são mais usadas para alterá-lo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;: escreve um objeto no servidor sem respeitar a propriedade da idempotência. Requisições deste tipo, quando repetidas, podem gerar resultados diferentes no servidor. O uso comum é para a criação de objetos no servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt;: remove um objeto no servidor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;representational-state-transfer-rest&#34;&gt;Representational State Transfer (REST)&lt;/h3&gt;

&lt;p&gt;Graças a ubiquidade alcançada pelos navegadores, aplicações apoiadas na internet são cada vez mais comuns. REST é um estilo de arquitetura que define como aplicações devem utilizar o protocolo HTTP e URLs para representar recursos.&lt;/p&gt;

&lt;p&gt;O estilo estabelece que o conceito de &lt;strong&gt;recurso&lt;/strong&gt; é tudo aquilo no servidor que pode ser nomeado, tal como documentos ou imagens. Cada recurso deve possuir um identificador único, ou seja, uma &lt;strong&gt;URL&lt;/strong&gt;. Por exemplo, uma aplicação para gerenciar produtos pode identificar um recurso de produto através da URL &lt;code&gt;products/59&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O cliente, através dos &lt;strong&gt;métodos de requisição do HTTP&lt;/strong&gt;, efetua ações em um recurso. Considerando a mesma aplicação, requisições com método &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; e &lt;code&gt;DELETE&lt;/code&gt; para a URL &lt;code&gt;products/59&lt;/code&gt; irão mostrar, alterar e excluir o produto, respectivamente. Note, uma única URL para três diferentes ações.&lt;/p&gt;

&lt;p&gt;O último conceito relacionado a REST é o de &lt;strong&gt;representação&lt;/strong&gt;. O cliente sempre irá transferir uma representação de um recurso. Informações passadas pelo cabeçalho da requisição ou acrescentadas ao fim da URL podem informar qual o formato da representação que se espera de um recurso. Desta forma, o mesmo recurso pode ser transferido na forma de HTML, JSON e até mesmo XML.&lt;/p&gt;

&lt;p&gt;O Ruby on Rails, &lt;em&gt;framework&lt;/em&gt; bastante usado para desenvolver aplicações &lt;em&gt;web&lt;/em&gt;, prove uma série de funcionalidades para auxiliar o uso de REST. Para compreender melhor o assunto, basta conferir &lt;a href=&#34;http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions&#34;&gt;o guia de rotas&lt;/a&gt; do Ruby on Rails, que documenta como definir URLs e ações de &lt;em&gt;controller&lt;/em&gt; com base em recursos.&lt;/p&gt;

&lt;p&gt;A bibliografia a respeito de REST é vasta. A última dica sobre o assunto é conferir a tradução de um texto que é muito bom e engraçado: &lt;a href=&#34;http://distopico.wordpress.com/traducao-de-how-i-explained-rest-to-my-wife&#34;&gt;Como eu expliquei REST para a minha esposa&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;hypertext-markup-language-html&#34;&gt;Hypertext Markup Language (HTML)&lt;/h3&gt;

&lt;p&gt;O desenvolvimento do HTML foi concomitante ao do HTTP, sua função é marcar os documentos do projeto World Wide Web. Você já está careca de saber que o HTML é um conjunto de &lt;em&gt;tags&lt;/em&gt; que estruturam e garantem semântica ao documento.&lt;/p&gt;

&lt;h2 id=&#34;capítulo-1-a-evolução-das-especificações&#34;&gt;Capítulo 1: A evolução das especificações&lt;/h2&gt;

&lt;p&gt;No início, o navegador tinha como função ser a interface para uma grande biblioteca distribuída. O protocolo HTTP, antes mesmo da sua especificação, tinha apenas um método GET. Não havia a intenção de se alterar as informações armazenadas em um servidor. A primeira especificação do HTTP já era mais ambiciosa e definia uma série de &lt;a href=&#34;http://www.w3.org/Protocols/HTTP/Methods.html&#34;&gt;métodos de requisições&lt;/a&gt;. Com estes métodos, já era possível deixar explícito que uma alteração seria realizada no servidor.&lt;/p&gt;

&lt;p&gt;Criada logo após a especificação do HTTP, a &lt;a href=&#34;http://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt&#34;&gt;primeira especificação do HTML&lt;/a&gt; era um pouco menos ambiciosa. Tente imaginar, a especificação não continha formulários. Mesmo assim, os métodos de requisição do HTTP não foram deixados de fora. As âncoras aceitavam um atributo &lt;code&gt;methods&lt;/code&gt; para indicar quais métodos poderiam ser usados ao requisitar determinado objeto. Poucos navegadores deram suporte ao atributo, o qual nunca chamou muita a atenção e na especificação atual já está obsoleto.&lt;/p&gt;

&lt;p&gt;Manter o HTML com o único propósito de marcar conteúdo já não era a estratégia quando definida a segunda especificação da linguagem. A especificação eleva o HTML 2.0 a um &lt;em&gt;Internet Media Type&lt;/em&gt;. Isto significa que os usuários podem não apenas navegar e interagir com documentos, mas também preencher e submeter formulários.&lt;/p&gt;

&lt;p&gt;Além de um atributo &lt;code&gt;action&lt;/code&gt; com a URL de destino, os formulários aceitam um atributo &lt;code&gt;method&lt;/code&gt; que suporta os valores &lt;code&gt;GET&lt;/code&gt; ou &lt;code&gt;POST&lt;/code&gt; como método da requisição de envio. O uso de &lt;code&gt;POST&lt;/code&gt;, segundo a especificação, é restrito a operações que modifiquem a base de dados ou assinem algum serviço.&lt;/p&gt;

&lt;h2 id=&#34;capítulo-2-o-desencontro&#34;&gt;Capítulo 2: O desencontro&lt;/h2&gt;

&lt;p&gt;No estado atual da especificação, o HTML suporta âncoras que realizam requisições com o método &lt;code&gt;GET&lt;/code&gt; e formulários que são enviados com método &lt;code&gt;GET&lt;/code&gt; ou &lt;code&gt;POST&lt;/code&gt;. Qualquer outro recurso, tais como imagens, folhas de estilo e &lt;em&gt;scripts&lt;/em&gt;, são requisitados com o método &lt;code&gt;GET&lt;/code&gt;. &lt;strong&gt;O HTML não possui nenhum recurso para o uso dos métodos &lt;code&gt;PUT&lt;/code&gt; e &lt;code&gt;DELETE&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O resultado é que não existe uma maneira de utilizar uma API REST unicamente através de HTML. Em outras palavras, uma página pode apenas acessar e criar novos recursos. Não é possível excluir ou alterar recursos utilizando REST e toda a sorte dos métodos de requisição do HTTP.&lt;/p&gt;

&lt;p&gt;As discussões a respeito desta falha de compatibilidade são antigas. Existem várias propostas de soluções. A mais notável, chamada &lt;a href=&#34;http://cameronjones.github.io/form-http-extensions/index.html#form-method-attribute&#34;&gt;HTML Form HTTP Extensions&lt;/a&gt;, acrescenta um atributo &lt;code&gt;method&lt;/code&gt; ao formulário que aceita a maioria dos métodos do HTTP 1.1. Desta maneira, é possível disparar uma requisição com método &lt;code&gt;DELETE&lt;/code&gt; através de um formulário. A proposta, que é um rascunho não oficial e não possui suporte em nenhum navegador, inclui também artifícios para adicionar informações ao cabeçalho da requisição.&lt;/p&gt;

&lt;h2 id=&#34;capítulo-3-alternativas&#34;&gt;Capítulo 3: Alternativas&lt;/h2&gt;

&lt;p&gt;Antes de falar das alternativas, é importante nos voltarmos para o JavaScript. A API &lt;code&gt;XMLHttpRequest&lt;/code&gt; permite o uso de todos os métodos além de manipular outros dados do cabeçalho da requisição:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var request = new XMLHttpRequest();
request.open(&#39;DELETE&#39;, &#39;products/59&#39;);

request.setRequestHeader(&#39;X-Requested-With&#39;, &#39;XMLHttpRequest&#39;);
request.send();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É importante destacar que poder disparar requisições com diferentes métodos apenas através de JavaScript não é o bastante. Em especial, requisições deste tipo são assíncronas, não sendo sempre o que precisamos.&lt;/p&gt;

&lt;h3 id=&#34;formulários&#34;&gt;Formulários&lt;/h3&gt;

&lt;p&gt;Apesar do Ruby on Rails se tratar de um framework para desenvolver aplicações web para navegadores, o estilo REST é suportado e evangelizado em toda a documentação do framework.&lt;/p&gt;

&lt;p&gt;Enquanto as especificações não evoluem, os formulários parecem ser a melhor alternativa para disparar diferentes métodos. O Ruby on Rails tem como dependência o &lt;a href=&#34;http://rack.github.io&#34;&gt;Rack&lt;/a&gt;, que é uma interface para desenvolver aplicações em Ruby. O Rack permite que o formulário com método &lt;code&gt;POST&lt;/code&gt; possa informar um novo método através de um campo &lt;code&gt;_method&lt;/code&gt;. Isto não afeta diretamente o método da requisição, apenas faz com que o Ruby on Rails interprete a requisição de maneira diferente. O formulário a seguir seria atendido por uma rota de &lt;code&gt;DELETE&lt;/code&gt; de &lt;code&gt;products/59&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;products/59&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;_method&amp;quot; value=&amp;quot;delete&amp;quot;&amp;gt;
    &amp;lt;button&amp;gt;Deletar produto&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Caso esteja utilizando Ruby on Rails, não é recomendado possuir códigos como este nas suas &lt;code&gt;views&lt;/code&gt;. Ao invés disto, utilize &lt;a href=&#34;http://guides.rubyonrails.org/form_helpers.html&#34;&gt;Form Helpers&lt;/a&gt;, os quais já se encarregam de escrever este e outros campos necessários para o correto funcionamento do framework.&lt;/p&gt;

&lt;p&gt;Tratando-se de outras linguagens, diferentes frameworks &lt;em&gt;full-stack&lt;/em&gt; também endereçam esta solução. O Laravel, escrito em PHP, &lt;a href=&#34;http://laravel.com/docs/html#opening-a-form&#34;&gt;também suporta um campo &lt;code&gt;hidden&lt;/code&gt; de nome &lt;code&gt;_method&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A flexibilidade e vantagem desta solução é poder ter as mesmas rotas e ações para manipular um recurso através de formulários HTML e requisições JavaScript. Graças ao REST, as diferentes ações podem transferir uma representação do recurso em HTML ou JSON para requisições oriundas de formulários e &lt;code&gt;XMLHttpRequest&lt;/code&gt;, respectivamente.&lt;/p&gt;

&lt;h3 id=&#34;âncoras&#34;&gt;Âncoras&lt;/h3&gt;

&lt;p&gt;Segunda a especificação, os &lt;em&gt;links&lt;/em&gt; são conexões entre dois recursos. Em especial, as âncoras permitem que o usuário navegue através de um documento ou acesse outro recurso seguindo determinada URL. Os &lt;em&gt;links&lt;/em&gt;, que incluem &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;area&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;, sempre requisitam recursos através do método &lt;code&gt;GET&lt;/code&gt; e portanto &lt;strong&gt;não devem causar efeito colateral no servidor&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;removendo-registros&#34;&gt;Removendo registros&lt;/h4&gt;

&lt;p&gt;Em áreas administrativas, é bastante comum termos registros em tabelas com uma âncora de excluir. E está errado por vários motivos: não é por navegar para uma página que registros devem ser excluídos. Lembre-se que nos tempos em que conexão banda larga era rara, aceleradores praticavam acesso a todas as âncoras para agilizar a navegação. Assim, tudo seria excluído. O mínimo a se dizer é que cada um destes botões devem estar envoltos em um formulário &lt;code&gt;POST&lt;/code&gt;, até mesmo se sua aplicação não respeitar REST.&lt;/p&gt;

&lt;p&gt;Um argumento que pode surgir contra esta prática é a mudança dos elementos no HTML, por trocarmos um único &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; por um formulário que tem um &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; não tão fácil de estilizar. Se você estiver utilizando REST, existe uma alternativa que é apoiada em JavaScript: continuar usando &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; que quando clicado criará e enviará um formulário. O Ruby on Rails faz exatamente isto com o auxílio do &lt;code&gt;jquery_ujs&lt;/code&gt; incluso na gem &lt;a href=&#34;https://github.com/rails/jquery-rails&#34;&gt;jquery-rails&lt;/a&gt; quando encontra uma âncora com &lt;code&gt;data-method&lt;/code&gt; igual a esta:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;products/59&amp;quot; data-method=&amp;quot;delete&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;Remover&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O atributo &lt;code&gt;rel&lt;/code&gt; com valor &lt;code&gt;nofollow&lt;/code&gt; serve para que esta âncora não seja deliberadamente seguida. Repetindo uma recomendação, caso esteja no Rails, utilize o &lt;em&gt;helper&lt;/em&gt; &lt;code&gt;link_to&lt;/code&gt; ao invés de escrever diretamente o código acima.&lt;/p&gt;

&lt;p&gt;Um detalhe importante é que através desta abordagem, caso o comportamento do JavaScript seja impedido, o usuário terá apenas acesso a uma representação do recurso. O mesmo acontece para o caso de o usuário copiar esta URL e acessar pela barra de navegação. Nestes casos, uma requisição &lt;code&gt;GET&lt;/code&gt; é disparada e não haverá exclusão do recurso. A questão aqui é que a representação do recurso, ou seja, a página que é exibida ao acessar &lt;code&gt;products/59&lt;/code&gt; através de &lt;code&gt;GET&lt;/code&gt;, deve conter um formulário que permita excluir o produto. Este artifício muitas vezes é deixado de lado e a exclusão dos registros fica condiciona a JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;nota-do-autor&#34;&gt;Nota do autor&lt;/h2&gt;

&lt;p&gt;O conceito de REST é muito interessante e espero que logo possamos utilizar nativamente no HTML. Seria genial e com certeza é necessária uma evolução da especificação neste aspecto. Cá entre nós, evoluções deste tipo são muito mais úteis que mudar a semântica de &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; e afins.&lt;/p&gt;

&lt;p&gt;Antes de mais nada, não se esqueça que &lt;strong&gt;acessar um &lt;em&gt;link&lt;/em&gt; não pode causar nenhum efeito colateral na sua aplicação&lt;/strong&gt;. Use e abuse de formulários. Mais ainda, faça que o &lt;em&gt;back-end&lt;/em&gt; da sua aplicação utilize REST. Escolha um bom &lt;em&gt;framework&lt;/em&gt; e vá em frente.&lt;/p&gt;

&lt;p&gt;Desculpe pelo texto ter ficado extenso e talvez um tanto pesado. Espero que tenha gostado e que aproveite estas dicas para escrever aplicações melhores.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>