<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Entrevista on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/entrevista/index.xml</link>
    <description>Recent content in Entrevista on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/entrevista/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exercícios Simples de JavaScript para Entrevista</title>
      <link>https://tableless.github.io/hugo-public/exercicios-simples-de-javascript-para-entrevista/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/exercicios-simples-de-javascript-para-entrevista/</guid>
      <description>

&lt;p&gt;Qualquer um pode aprender teoria lendo posts de blogs, mas muitas pessoas nunca a entendem. Então para ter certeza que o(a) candidato(a) realmente entende sobre o tópico que ele(a) está falando, é uma boa ideia testar o seus conhecimentos através de exercícios. Exercícios não devem demorar muito e eles podem mostrar o nível de proficiência do candidato imediatamente.&lt;/p&gt;

&lt;p&gt;Estes são alguns exercícios que podem ser aplicados em entrevistas.&lt;/p&gt;

&lt;h2 id=&#34;contexto-call-apply&#34;&gt;Contexto(call, apply)&lt;/h2&gt;

&lt;p&gt;Essa é a forma que queremos usar &amp;#8220;someFn&amp;#8221;. O(a) candidato(a) deve implementá-la:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var result = someFun({ someProperty: &#39;interview&#39; }, function() {
    console.log(&#39;This pointing to&#39;. this);
});

console.log(&#39;Result is&#39;, result);

// Resultado esperado
This pointing to { someProperty: &#39;interview&#39; }
Result is 1
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var someFn = function(obj, cb) {
    cb.call(obj);
    return 1;
&lt;/pre&gt;

&lt;h3 id=&#34;adicional&#34;&gt;Adicional&lt;/h3&gt;

&lt;p&gt;Você pode modificar a função para checar se o(a) candidato(a) sabe como usar o &amp;#8220;apply&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var result = someFn({ someProperty: &#39;interview&#39; }, function (param1, param2) {
    console.log(&#39;This pointing to&#39;, this);
    console.log(&#39;Param 1 is&#39;, param1);
    console.log(&#39;Param 2 is&#39;, param2);
}, [&#39;cool&#39;, &#39;interview&#39;]);

console.log(&#39;Result is&#39;, result);

// Resultado esperado
This pointing to { someProperty: &#39;interview&#39; }
Param 1 is &#34;cool&#34;
Param 2 is &#34;interview&#34;
Result is 1
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var someFn = function (obj, cb, params) {
    cb.apply(obj, params);
    return 1;
}
&lt;/pre&gt;

&lt;h2 id=&#34;prototype-e-iteração&#34;&gt;Prototype e Iteração&lt;/h2&gt;

&lt;p&gt;Definir um método nativo chamado &amp;#8220;each&amp;#8221; para iterar em um array, com a opção de passar o contexto como segundo argumento.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var arr = [1, 2, 3];
arr.each(function (arrayItem, counter) {
    console.log(&#39;index&#39;, counter);
    console.log(&#39;item&#39;, arrayItem);

    arr[counter] = arrayItem + 1;
}, this);
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Array.prototype.each = Array.prototype.each || function (cb, context) {
    for (var i = 0; i &amp;lt; this.length; i++) {
        cb.call(context || this, this[i], i);
    }
};
&lt;/pre&gt;

&lt;h2 id=&#34;escopo&#34;&gt;Escopo&lt;/h2&gt;

&lt;p&gt;Definir &amp;#8220;someFn&amp;#8221; que irá funcionar da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var counter = someFn(1);
console.log(&#39;First call&#39;, counter(3));
console.log(&#39;Second call&#39;, counter(1));
console.log(&#39;Third call&#39;, counter(5));

// Resultado esperado
First call 4
Second call 5
Third call 10
&lt;/pre&gt;

&lt;p&gt;Solução:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var someFn = function (start) {
    var private = start;

    return function (increment) {
        private += increment;

        return private;
    }
}
&lt;/pre&gt;

&lt;p&gt;Traduzido de: &lt;a href=&#34;http://goschevski.com/simple-javascript-interview-exercises/&#34;&gt;http://goschevski.com/simple-javascript-interview-exercises/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>