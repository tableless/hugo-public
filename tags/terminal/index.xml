<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terminal on Tableless</title>
    <link>http://tableless.com.br/tags/terminal/index.xml</link>
    <description>Recent content in Terminal on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/terminal/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Editor Vim – Encontrar e Substituir</title>
      <link>http://tableless.com.br/editor-vim-encontrar-e-substituir/</link>
      <pubDate>Tue, 03 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/editor-vim-encontrar-e-substituir/</guid>
      <description>&lt;p&gt;Quem nunca precisou acessar o servidor de um cliente via SSH para resolver um problema de última hora? Um parâmetro errado, uma vírgula faltando pode comprometer a execução de um código.&lt;/p&gt;

&lt;p&gt;Quando se tem apenas a tela preta do terminal, é preciso ter conhecimento de alguns comandos muito úteis que podem te ajudar a resolver um problema rapidamente, principalmente se você não tem um computador disponível, podendo também resolver o problema até pelo celular com qualquer App de conexão SSH.&lt;/p&gt;

&lt;p&gt;O que muitas pessoas não sabem, é que o editor &lt;a title=&#34;Editor Vim&#34; href=&#34;http://www.vim.org/&#34; target=&#34;_blank&#34;&gt;Vim&lt;/a&gt;, além de vários outros comandos para se navegar por um código e fazer modificações em massa com expressões regulares, possui um comando chamado &lt;strong&gt;substitute&lt;/strong&gt;, muito útil na hora de procurar e substituir uma variável ou um trecho de código. Muitas vezes, esse trecho se repete várias vezes dentro do arquivo e algumas expressões regulares podem te ajudar a substituí-los de uma vez só, economizando tempo e facilitando a sua vida. Existem muitas opções, mas provavelmente essas serão as que mais vão ser úteis:&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &amp;#8211; Encontra cada ocorrência de &lt;strong&gt;&amp;#8216;foo&amp;#8217;&lt;/strong&gt; (em todas as linhas) e substitui por &lt;strong&gt;&amp;#8216;bar&amp;#8217;&lt;/strong&gt;:
&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;:%s/foo/bar/g&lt;/pre&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &amp;#8211; Encontra cada ocorrência de &lt;strong&gt;&amp;#8216;foo&amp;#8217;&lt;/strong&gt; (apenas na linha atual) e substitui por &lt;strong&gt;&amp;#8216;bar&amp;#8217;&lt;/strong&gt;:
&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;:s/foo/bar/g&lt;/pre&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &amp;#8211; Substitui cada &lt;strong&gt;&amp;#8216;foo&amp;#8217;&lt;/strong&gt; por &lt;strong&gt;&amp;#8216;bar&amp;#8217;&lt;/strong&gt;, mas pedindo confirmação primeiro:
&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;:%s/foo/bar/gc&lt;/pre&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &amp;#8211; Substitui apenas palavras inteiras que correspondam com &lt;strong&gt;&amp;#8216;foo&amp;#8217;&lt;/strong&gt; por &lt;strong&gt;&amp;#8216;bar&amp;#8217;&lt;/strong&gt;, pedindo por confirmação:
&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;:%s/\&amp;lt;foo\&amp;gt;/bar/gc&lt;/pre&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &amp;#8211; Substitui cada &lt;strong&gt;&amp;#8216;foo&amp;#8217;&lt;/strong&gt; (case insensitive) por &lt;strong&gt;&amp;#8216;bar&amp;#8217;&lt;/strong&gt;, pedindo por confirmação (usado após o uso de &lt;strong&gt;:set noignorecase&lt;/strong&gt; para fazer as consultas serem &lt;strong&gt;case sensitive&lt;/strong&gt;, que é o padrão):
&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;:%s/foo/bar/gci&lt;/pre&gt;

&lt;p style=&#34;padding-left: 30px&#34;&gt;
  &amp;#8211; Substitui cada &lt;strong&gt;&amp;#8216;foo&amp;#8217;&lt;/strong&gt; (case sensitive) por &lt;strong&gt;&amp;#8216;bar&amp;#8217;&lt;/strong&gt;, pedindo por confirmação (usado após o uso de &lt;strong&gt;:set ignorecase&lt;/strong&gt; para fazer as consultas serem &lt;strong&gt;case insensitive&lt;/strong&gt;):
&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;:%s/foo/bar/gcI&lt;/pre&gt;

&lt;p&gt;Alguns outros exemplos de comandos para encontrar e substituir podem ser encontrados &lt;a title=&#34;Vim - Search and Replace&#34; href=&#34;http://vim.wikia.com/wiki/Search_and_replace&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; (em inglês).&lt;/p&gt;

&lt;p&gt;Espero que estas dicas possam ser úteis e que possam ajudá-lo nos seus trabalhos e melhorar sua produtividade.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comandos iniciais do Git</title>
      <link>http://tableless.com.br/alguns-comandos-git/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/alguns-comandos-git/</guid>
      <description>

&lt;p&gt;O Git é um &lt;a href=&#34;http://tableless.com.br/introducao-das-premissas-dos-controles-de-versao/&#34; title=&#34;Introdução das premissas dos controles de versão&#34;&gt;sistema de controle de versão&lt;/a&gt;. Com o Git você não perderá seu trabalho, vai poder voltar para a versões anteriores, recuperando a versão do seu código de antes de ter cometido o erro e poderá criar e trabalhar diversas versões em paralelo.&lt;/p&gt;

&lt;p&gt;Uma ótima leitura que indico é o livro &lt;a title=&#34;Livro Pro Git&#34; href=&#34;http://git-scm.com/book/en/v2&#34; target=&#34;_blank&#34;&gt;Pro Git&lt;/a&gt;, escrito por Scott Chacon. Ele descreve corretamente sobre o controle de versão. Olhe só:&lt;/p&gt;

&lt;h4 id=&#34;o-que-é-controle-de-versão-e-por-que-você-deve-se-importar&#34;&gt;O que é controle de versão, e por que você deve se importar?&lt;/h4&gt;

&lt;p&gt;&amp;#8220;O controle de versão é um sistema que registra as mudanças feitas em um arquivo ou um conjunto de arquivos ao longo do tempo, de forma que você possa recuperar versões específicas.&lt;/p&gt;

&lt;p&gt;Se quer manter todas as versões de uma imagem ou layout, usar um Sistema de Controle de Versão (Version Control System ou VCS) é uma decisão sábia. Ele permite reverter arquivos e projetos inteiros para um estado anterior, compara mudanças feitas ao decorrer do tempo, vê quem foi o último a modificar algo que pode estar causando problemas, quem introduziu um bug e quando, e muito mais. Usar um VCS normalmente significa que caso tenha estragado ou perdido algum arquivo, poderá facilmente reavê-los. Além disso, você pode controlar tudo sem maiores esforços.&amp;#8221;&lt;/p&gt;

&lt;h2 id=&#34;vamos-lá&#34;&gt;Vamos lá!&lt;/h2&gt;

&lt;p&gt;Bom, depois dessa aula com Scott Chacon, vamos ver alguns códigos!&lt;/p&gt;

&lt;p&gt;Lembrando que todos os comandos aqui devem ser feitos pelo Terminal, Console, GitBash, entre outros e o não recomendado Prompt de Comando do Windows, incluindo entradas e saídas de pastas, tudo por comandos!&lt;/p&gt;

&lt;h3 id=&#34;iniciando-o-git&#34;&gt;Iniciando o Git&lt;/h3&gt;

&lt;p&gt;Entre no diretório que deseja controlar a versão e inicie o Git assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git init&lt;/pre&gt;

&lt;p&gt;Feito isso, seus arquivos ainda não estão sendo versionados, mas eles estão esperando para serem adicionados no estágio de controle. Para fazer isso digite o comando&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git add nome-do-arquivo-incluindo-extensão&lt;/pre&gt;

&lt;p&gt;Se você precisa adicionar todos os arquivos do diretório, basta digitar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git add .&lt;/pre&gt;

&lt;p&gt;Saber o status do projeto é importante. Com o comando abaixo você consegue ver quais arquivos estão fora do controle, quais foram modificados e estão esperando por uma descrição de modificação etc:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git status&lt;/pre&gt;

&lt;p&gt;Voltando ao estágio anterior do adicionamento:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git reset HEAD nome-do-arquivo&lt;/pre&gt;

&lt;p&gt;Commit &amp;#8211; Comitando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git commit -m &#34;Mensagem do commit&#34;&lt;/pre&gt;

&lt;p&gt;Adicionando e comitando ao mesmo tempo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git commit -a -m &#34;Mensagem do commit&#34;&lt;/pre&gt;

&lt;h3 id=&#34;voltando-commits-a-versões-anteriores&#34;&gt;Voltando commits a versões anteriores&lt;/h3&gt;

&lt;p&gt;Voltar um commit:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git reset HEAD~1&lt;/pre&gt;

&lt;p&gt;Voltar dois commits:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git reset HEAD~2&lt;/pre&gt;

&lt;p&gt;Voltando um commit e deixando o arquivo no estagio anterior:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git reset HEAD~1 --soft&lt;/pre&gt;

&lt;p&gt;Voltando um commit e excluindo o arquivo, deixando no estágio anterior:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git reset HEAD~1 --hard&lt;/pre&gt;

&lt;p&gt;Verificando o histórico de commits:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git log&lt;/pre&gt;

&lt;p&gt;Verificando o que foi mudado, diferença entre um arquivo e outro:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git log -p&lt;/pre&gt;

&lt;p&gt;Verificando os 2 últimos commits:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git log -p -2&lt;/pre&gt;

&lt;p&gt;Mostrando as estatísticas de todos os commits:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git log --stat&lt;/pre&gt;

&lt;p&gt;Mostrando todos os commits, cada um em uma linha:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git log --pretty=oneline&lt;/pre&gt;

&lt;p&gt;Mostrando todos os commits dos últimos 2 dias até o momento atual&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git log --since=2.days&lt;/pre&gt;

&lt;p&gt;Criando um branch &amp;#8211; uma ramificação&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git checkout -b nome-do-branch&lt;/pre&gt;

&lt;p&gt;Verificando em que branch você está&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git branch&lt;/pre&gt;

&lt;p&gt;Voltando para o branch master&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git checkout master&lt;/pre&gt;

&lt;h3 id=&#34;jogando-o-branch-criado-no-branch-master&#34;&gt;Jogando o branch criado no branch master&lt;/h3&gt;

&lt;p&gt;Entre como branch master:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git merge nome-do-branch-que-foi-criado&lt;/pre&gt;

&lt;h3 id=&#34;grudando-o-branch-criado-no-branch-master-sem-o-commit&#34;&gt;Grudando o branch criado no branch master sem o commit&lt;/h3&gt;

&lt;p&gt;Somente localmente &amp;#8211; localhost, entre como branch master:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git rebase nome-do-branch-que-foi-criado&lt;/pre&gt;

&lt;p&gt;Removendo um branch:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git branch -D nome-do-branch&lt;/pre&gt;

&lt;p&gt;Vendo branchs remotos:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git branch -a&lt;/pre&gt;

&lt;p&gt;Mostrando o início do hash, quem comitou, quanto tempo atrás, mensagem: descrição do commit:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git log --pretty=format: &#34;%h - %an, %ar : %s&#34;&lt;/pre&gt;

&lt;p&gt;Deletando arquivos:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git rm nome-do-arquivo&lt;/pre&gt;

&lt;p&gt;Deletando todos os aquivos removidos ao mesmo tempo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git ls-files --deleted | xargs git rm&lt;/pre&gt;

&lt;h3 id=&#34;ignorando-arquivos&#34;&gt;Ignorando arquivos&lt;/h3&gt;

&lt;p&gt;Existem alguns arquivos que muito provavelmente você não vai precisar versionar, como por exemplo os arquivos de cache do SASS, arquivos de configuração e etc. Nesse caso você precisa fazer com que o controle de versão ignore estes arquivos. Para tanto, crie um arquivo chamado &lt;strong&gt;.gitignore&lt;/strong&gt;. Feito isso, dentro deste arquivo, digite o nome ou o endereço das pastas que você quer ignorar. Um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;# See http://help.github.com/ignore-files/ for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
# git config --global core.excludesfile ~/.gitignore_global

# Ignore bundler config
/.bundle

# Ignore the build directory
/build

# Ignore Sass&#39; cache
/.sass-cache

# Ignore .DS_store file
.DS_Store
.cache
.rvmrc

vendor/*

.DS_Store

# Vim
*.swp
*.swo

Gemfile.lock
.vagrant
Vagrantfile

# rbenv
.ruby-version

# Ignore deploy related files
deploy

Gemfile.lock

&lt;/pre&gt;

&lt;p&gt;O arquivo &lt;strong&gt;.gitignore&lt;/strong&gt; fica na raiz do projeto.&lt;/p&gt;

&lt;h3 id=&#34;clonando-e-puxando-alterações-de-projetos&#34;&gt;Clonando e puxando alterações de projetos&lt;/h3&gt;

&lt;p&gt;Clonando um projeto remoto:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git clone url-do-projeto&lt;/pre&gt;

&lt;p&gt;Fazendo um clone de outros branchs:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git checkout -b nome-do-branch origin/ nome-do-branch&lt;/pre&gt;

&lt;p&gt;Trazendo, puxando as alterações feitas por outros usuários:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git pull origin master&lt;/pre&gt;

&lt;p&gt;Sincronizando tudo que está no repositório remoto:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git pull&lt;/pre&gt;

&lt;p&gt;Enviando o(s) projeto(s), arquivo(s) para o repositório:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git push origin master&lt;/pre&gt;

&lt;p&gt;Enviando um branch para o repositório:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git push origin nome-do-branch&lt;/pre&gt;

&lt;h3 id=&#34;tags&#34;&gt;Tags&lt;/h3&gt;

&lt;p&gt;As tags servem para marcar uma etapa. Imagine que você vai lançar uma versão, que resolve uma série de problemas. Você pode marcar aquela etapa criando uma tag. Assim fica simples de fazer qualquer rollback do projeto para uma tag específica em vez de voltar para um commit. Você sabe que tudo o que foi feito até aquela tag está funcionando.&lt;/p&gt;

&lt;p&gt;Criando tags:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git tag versão-da-tag&lt;/pre&gt;

&lt;p&gt;Listando tags:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git tag -l&lt;/pre&gt;

&lt;p&gt;Enviando a tag para o repositório&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git push origin master --tags&lt;/pre&gt;

&lt;p&gt;Removendo as tags criadas localmente:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git tag -d versão-da-tag&lt;/pre&gt;

&lt;p&gt;Removendo tag no repositório remoto:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;git push origin :refs/tags/versão-da-tag&lt;/pre&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;Se você quer continuar ou iniciar seus estudos com Git, indico o link do livro citado acima, é um ótimo começo, se tiver problemas com o inglês, encontrará várias versões em português.&lt;/p&gt;

&lt;p&gt;O Akita fez um &lt;a href=&#34;http://www.akitaonrails.com/2010/08/17/screencast-comecando-com-git&#34;&gt;screencast para quem está começando com Git&lt;/a&gt;. Vale a pena ver.&lt;/p&gt;

&lt;p&gt;O pessoal da CodeSchool juntamente com o GitHub fizeram uma página exclusivamente para ensinar Git na prática. &lt;a href=&#34;https://try.github.io/levels/1/challenges/1&#34;&gt;Visite aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Há também a &lt;a href=&#34;http://www.git-scm.com/&#34;&gt;documentação do Git&lt;/a&gt; que é bastante completa.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando comandos de atalhos no terminal</title>
      <link>http://tableless.com.br/criando-comandos-de-atalhos-no-terminal/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-comandos-de-atalhos-no-terminal/</guid>
      <description>

&lt;p&gt;Esta dica pode ser utilizada em qualquer distribuição Linux ou Mac OS X.&lt;/p&gt;

&lt;p&gt;Se você está cansado de digitar comandos gigantescos no terminal, aqui vai uma dica: crie atalhos para os comandos no seu terminal para melhorar a produtividade. Uma dica simples mas é muito util.&lt;/p&gt;

&lt;p&gt;Para rodar um projeto python/django, geralmente executamos este comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;python manage.py runserver
&lt;/pre&gt;

&lt;p&gt;Com o comando de atalho criado, execute-o desta maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;h2 id=&#34;criando-os-atalhos&#34;&gt;Criando os atalhos&lt;/h2&gt;

&lt;p&gt;Para começar a criar seus atalhos, abra o arquivo &lt;strong&gt;.profile&lt;/strong&gt; ou &lt;strong&gt;.bashrc&lt;/strong&gt; que ficam na raiz da pasta do usuário. Em seguida abra-os em seu editor de preferência.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sublime ~/.bashrc&lt;/pre&gt;

&lt;p&gt;Agora adicione a função no final do arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run() {
    echo &#34;executando... python manage.py runserver
    python manage.py runserver
}
&lt;/pre&gt;

&lt;p&gt;Pronto! Agora basta atualizar o arquivo para que o terminal o reconheça e entenda os novos comandos. Faça isso assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;source ~/.bashrc&lt;/pre&gt;

&lt;p&gt;Após a execução do comando acima, a funcão criada já está disponível no terminal, digite o comando abaixo para testar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;p&gt;Podemos fazer funções mais elaboradas, imagine que você precisa rodar diversos projetos e cada um em uma porta diferente, então veja como fazer:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run() {
    if [ &#34;$1&#34; != &#39;&#39; ]; then
        python manage.py runserver &#34;0.0.0.0:$1&#34;
    else
        python manage.py runserver &#34;0.0.0.0:8000&#34;
    fi
}
&lt;/pre&gt;

&lt;p&gt;Outra dica é utilizar argumentos em suas funções. No caso da função acima, $1 é um argumento que é passado após o comando que define em qual porta irá rodar o projeto. Se não for passado nenhum valor, ele irá rodar na porta padrão que foi definida como 8000.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run 8001&lt;/pre&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run 8002&lt;/pre&gt;

&lt;p&gt;É possível passar diversos argumentos, veja um exemplo na função:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;teste(){
    echo $1 $2;
}
&lt;/pre&gt;

&lt;p&gt;Os argumentos veem em seguida ao comando sempre com espaços entre eles, como no exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;teste Willem Allan&lt;/pre&gt;

&lt;p&gt;Retorno do comando executado será:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Willem Allan&lt;/pre&gt;

&lt;p&gt;Logo abaixo seguem algumas funções que eu utilizo no meu .bashrc 😉&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;# git commit
cm() {
    git commit -m &#34;echo $1&#34; -a
}

# git add all &amp; commit
cma() {
    git add .
    git commit -m &#34;echo $1&#34; -a
}

# python - run django
run() {
    if [ &#34;$1&#34; != &#39;&#39; ]; then
        python manage.py runserver &#34;0.0.0.0:$1&#34;
    else
        python manage.py runserver &#34;0.0.0.0:8000&#34;
    fi
}

# python - migrate
migrate() {
    echo &#34;executando... python manage.py migrate&#34;
    python manage.py migrate
}

# python - auto
auto() {
    echo &#34;executando... python manage.py schemamigration $1 --auto&#34;
    python manage.py schemamigration $1 --auto
}

# python - initial
initial() {
    echo &#34;executando... python manage.py schemamigration $1 --initial&#34;
    python manage.py schemamigration $1 --initial
}
&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>