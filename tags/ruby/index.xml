<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Tableless</title>
    <link>http://tableless.com.br/tags/ruby/index.xml</link>
    <description>Recent content in Ruby on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bower na pr√°tica</title>
      <link>http://tableless.com.br/bower-na-pratica/</link>
      <pubDate>Wed, 15 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/bower-na-pratica/</guid>
      <description>

&lt;p&gt;A maioria das linguagens j√° possuem ferramentas para automatizar e facilitar esse tipo de tarefa.&lt;/p&gt;

&lt;p&gt;Por exemplo: Java &amp;#8211; (Maven e Ivy), Ruby &amp;#8211; (Rubygems), Python &amp;#8211; (pip), entre outras.&lt;/p&gt;

&lt;p&gt;No desenvolvimento front-end, uma ferramenta que vem ganhando bastante espa√ßo nessa √°rea √© o &lt;a title=&#34;bower.io&#34; href=&#34;http://bower.io/&#34; target=&#34;_blank&#34;&gt;Bower&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como o bower √© para gerenciar componentes de front-end, pode ser adicionado em qualquer projeto, independente do seu back-end ser Java, Ruby, Python, Node, PHP, etc.&lt;/p&gt;

&lt;p&gt;Andei pesquisando a respeito dessa ferramenta e senti a falta de artigos em portugu√™s que ensinem o passo-a-passo de como incorpora-lo em nossas aplica√ß√µes, por isso resolvi escrever esse tutorial, ajudar com que todos possam dar seus primeiros passos com o &lt;a title=&#34;bower.io&#34; href=&#34;http://bower.io/&#34; target=&#34;_blank&#34;&gt;Bower&lt;/a&gt;¬†e melhorar o gerenciamento de depend√™ncias dos seus respectivos front-ends.&lt;/p&gt;

&lt;h2 id=&#34;instala√ß√£o&#34;&gt;Instala√ß√£o&lt;/h2&gt;

&lt;p&gt;Inicialmente √© necess√°rio primeiro que voc√™ tenha o &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node&lt;/a&gt; junto com o &lt;a href=&#34;https://npmjs.org/&#34; title=&#34;npmjs.org&#34;&gt;NPM&lt;/a&gt; instalado na sua m√°quina. Caso contr√°rio, basta acessar o &lt;a href=&#34;http://nodejs.org/&#34;&gt;nodejs.org&lt;/a&gt;, fazer download e instalar. Bem simples!&lt;/p&gt;

&lt;p&gt;Feito isso, vamos para o terminal/cmd e instalar o bower com o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;sh&#34;&gt;npm install -g bower&lt;/pre&gt;

&lt;p&gt;Para quem ainda n√£o conhece, o &lt;a href=&#34;https://npmjs.org/&#34; title=&#34;npmjs.org&#34;&gt;NPM&lt;/a&gt;¬†¬†√© um gerenciador de pacotes de programas que rodam com o Node. Aqui estamos basicamente mandando ele instalar o bower no nosso computador, uma coisa que gostaria de ressaltar √© a op√ß√£o &lt;code&gt;-g&lt;/code&gt; que est√° dizendo para o npm instalar o bower globalmente em nossa m√°quina, assim ele j√° fica nas nossas vari√°veis de ambiente e podemos utiliza-lo facilmente em outros projetos.&lt;/p&gt;

&lt;h2 id=&#34;adicionando-o-bower-ao-projeto&#34;&gt;Adicionando o Bower ao projeto&lt;/h2&gt;

&lt;p&gt;Nesse exemplo, vamos ilustrar um projeto web simples, sem back-end, mas garanto que vai ficar f√°cil de entender como incorpora-lo ao seu projeto, independente da linguagem. Caso voc√™s tenham alguma d√∫vida, perguntem nos coment√°rios que vou me esfor√ßar para ajudar.&lt;/p&gt;

&lt;p&gt;Nosso projeto vai se chamar &lt;strong&gt;&amp;#8220;zombie-striker&amp;#8221;&lt;/strong&gt; e ter√° a seguinte estrutura:&lt;/p&gt;

&lt;pre&gt;|zombie-striker/
|--assets/
|----scripts/
|----styles/
|----images/
|--index.html&lt;/pre&gt;

&lt;p&gt;Para adicionarmos o bower, vamos at√© a pasta do projeto &amp;#8220;/zombie-striker&amp;#8221; e digitar o comando:&lt;/p&gt;

&lt;pre&gt;bower init&lt;/pre&gt;

&lt;p&gt;O bower ir√° iniciar um wizard para gerar o arquivo &amp;#8220;bower.json&amp;#8221; pedindo pra voc√™ completar as seguintes informa√ß√µes:&lt;/p&gt;

&lt;pre&gt;# nome do projeto
name:zombie-striker 

# vers√£o do projeto
version:0.0.1

# descri√ß√£o do projeto
description: app to strike zombies with bower

# arquivo principal do seu projeto
main file: assets/scripts/main.js

# palavras-chaves 
keywords: zombie striker

# autores do projeto
authors: &#34;Diogo Vecchiati http://divecch.com&#34;

# tipo de licen√ßa
license: MIT

#homepage do projeto
homepage: &#34;https://github.com/diRex/zombie-striker&#34;

# se voc√™ gostaria que o bower adicionasse os components j√° instalados, como depend√™ncias no arquivo json.
set currently installed components as dependencies?(y/n) n

# se voc√™ gostaria de adicionar o ignore list default do bower
add commonly ignored files to ignore list?(y/n) y

# se voc√™ gostaria de tornar esse pacote privado para que n√£o seja acidentalmente publicado no registro de pacotes do bower.
would you like to mark this package as private which prevents it from beig accidentally published to the registry?(y/n) y&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Observa√ß√£o&lt;/strong&gt;: Algumas das op√ß√µes acimas s√£o v√°lidas apenas para pacotes que v√£o ser distribu√≠dos como novos componentes, por exemplo: caso voc√™ esteja criando um novo framework e queira disponibilizar aos demais atrav√©s do bower .Por√©m, n√£o √© nosso caso, ent√£o podemos utilizar o &amp;#8220;bower.json&amp;#8221; gerado pelo wizard e modificar de acordo com a nossa necessidade. Caso voc√™ queira, pode pular a etapa de wizard do &lt;code&gt;bower init&lt;/code&gt; e ¬†criar o &amp;#8220;bower.json&amp;#8221; na m√£o com as op√ß√µes que voc√™ queira.&lt;/p&gt;

&lt;p&gt;Ao terminar o wizard, voc√™ ter√° um &amp;#8220;bower.json&amp;#8221; parecido com esse:&lt;/p&gt;

&lt;pre&gt;{
    &#34;name&#34;: &#34;zombie-striker&#34;,
    &#34;version&#34;: &#34;0.0.1&#34;,
    &#34;authors&#34;: [
        &#34;Diogo Vecchiati &amp;lt;http://divecch.com&amp;gt;&#34;
    ],
    &#34;description&#34;: &#34;app to strike zombies with bower&#34;,
    &#34;main&#34;: &#34;assets/scripts/main.js&#34;,
    &#34;keywords&#34;: [
        &#34;zombie&#34;
    ],
    &#34;license&#34;: &#34;MIT&#34;,
    &#34;homepage&#34;: &#34;https://github.com/diRex/zombie-striker&#34;,
    &#34;private&#34;: true,
    &#34;ignore&#34;: [
        &#34;**/.*&#34;,
        &#34;node_modules&#34;,
        &#34;bower_components&#34;,
        &#34;test&#34;,
        &#34;tests&#34;
    ]
}&lt;/pre&gt;

&lt;h2 id=&#34;adicionando-depend√™ncias&#34;&gt;Adicionando depend√™ncias&lt;/h2&gt;

&lt;p&gt;Como de costume na maioria dos projetos front-end, vamos utilizar o JQuery como depend√™ncia. Vou mostrar duas maneiras de fazer isso.&lt;/p&gt;

&lt;h4 id=&#34;editando-o-arquivo-8220-bower-json-8221&#34;&gt;Editando o arquivo &amp;#8220;bower.json&amp;#8221;&lt;/h4&gt;

&lt;p&gt;Voc√™ pode editar o seu arquivo &amp;#8220;bower.json&amp;#8221; e adicionar&lt;/p&gt;

&lt;pre&gt;...
    &#34;ignore&#34;: [
        &#34;**/.*&#34;,
        &#34;node_modules&#34;,
        &#34;bower_components&#34;,
        &#34;test&#34;,
        &#34;tests&#34;
    ]
        &#34;dependencies&#34;: {
                &#34;jquery&#34;: &#34;~2.0.3&#34;
        }
}&lt;/pre&gt;

&lt;p&gt;e em seguida executar:&lt;/p&gt;

&lt;pre&gt;bower install&lt;/pre&gt;

&lt;p&gt;Toda vez que voc√™ executa o &lt;code&gt;bower install&lt;/code&gt;, ele verifica quais as depend√™ncias existentes no seu arquivo &amp;#8220;bower.json&amp;#8221; e caso elas n√£o estejam presentes na pasta de componentes ser√£o instaladas.&lt;/p&gt;

&lt;h4 id=&#34;executando-o-comando-bower-install&#34;&gt;Executando o comando bower install&lt;/h4&gt;

&lt;p&gt;Outra maneira √© executando o camando &lt;code&gt;bower install &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;bower install jquery --save&lt;/pre&gt;

&lt;p&gt;A op√ß√£o &lt;code&gt;--save&lt;/code&gt; serve para adicionar o componente no &amp;#8220;dependencies&amp;#8221; do &amp;#8220;bower.json&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Por padr√£o, o diret√≥rio que o bower utiliza pra salvar os componentes instalados √© &amp;#8220;bower_components/&amp;#8221;, caso voc√™ queira modificar, basta criar um arquivo chamado &amp;#8220;.bowerrc&amp;#8221; com o seguinte conte√∫do:&lt;/p&gt;

&lt;pre&gt;{
    &#34;directory&#34;:&#34;assets/components&#34;
}&lt;/pre&gt;

&lt;p&gt;Depois de alterar o diret√≥rio dos componentes, o ideal √© que voc√™ remova o diret√≥rio anterior, &amp;#8220;bower_componentes&amp;#8221; e execute o &lt;code&gt;bower install&lt;/code&gt;, pra ele fazer download das depend√™ncias novamente. Ou simplesmente renomeie üòõ&lt;/p&gt;

&lt;p&gt;Para importar o jquery no nosso projeto √© o mesmo &amp;#8220;arroz com feij√£o&amp;#8221;, s√≥ adicionar a tag script no html:&lt;/p&gt;

&lt;pre&gt;&amp;lt;script src=&#34;assets/components/jquery/jquery.min.js&#34;&lt;/pre&gt;

&lt;h2 id=&#34;pesquisando-componentes&#34;&gt;Pesquisando componentes&lt;/h2&gt;

&lt;p&gt;Caso voc√™ queira pesquisar mais componentes para adicionar ao seu projeto, √© s√≥ utilizar o &lt;code&gt;bower search&lt;/code&gt;. Por exemplo, quero adicionar o bootstrap ao meu projeto, mas n√£o sei o nome correto do pacote.&lt;/p&gt;

&lt;pre&gt;bower search bootstrap&lt;/pre&gt;

&lt;p&gt;Assim voc√™ consegue listar todos os pacotes que tenham rela√ß√£o com o bootstrap, √© bem confuso de ver no terminal,como acontece na pesquisa de qualquer gerenciador de pacotes, mas da pra encontrar.&lt;/p&gt;

&lt;h2 id=&#34;dicas&#34;&gt;Dicas&lt;/h2&gt;

&lt;h4 id=&#34;n√£o-versione-o-diret√≥rio-de-componentes&#34;&gt;N√£o versione o diret√≥rio de componentes&lt;/h4&gt;

&lt;p&gt;N√£o versione a pasta que vc estiver utilizando pra salvar os componentes gerenciados pelo bower, se a sua pasta for a padr√£o(&amp;#8220;bower_components/&amp;#8221;), coloque no seu .gitignore, assim voc√™ deixa seu reposit√≥rio mais leve e evita conflitos de libs que foram adicionadas por diferentes desenvolvedores.&lt;/p&gt;

&lt;h4 id=&#34;aten√ß√£o-com-as-depend√™ncias&#34;&gt;Aten√ß√£o com as depend√™ncias&lt;/h4&gt;

&lt;p&gt;Mantenham todas as depend√™ncias configuradas no &amp;#8220;bower.json&amp;#8221; algumas vezes pode acontecer de voc√™ executar um &lt;code&gt;bower install jquery&lt;/code&gt;, esquecer da op√ß√£o &lt;code&gt;--save&lt;/code&gt; ou esquecer de adicionar manualmente no &amp;#8220;bower.json&amp;#8221; Quando outro desenvolvedor for participar do seu projeto e executar um &lt;code&gt;bower install&lt;/code&gt;, o jquery n√£o vai estar l√°.&lt;/p&gt;

&lt;h4 id=&#34;ferramenta-visual-para-pesquisa-de-pacotes&#34;&gt;Ferramenta visual para pesquisa de pacotes&lt;/h4&gt;

&lt;p&gt;Outra forma de visualizar os componentes registrados no bower de maneira mais agrad√°vel √© atrav√©s do site: &lt;a href=&#34;http://sindresorhus.com/bower-components/&#34;&gt;http://sindresorhus.com/bower-components/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That&amp;#8217;s all folks&lt;/strong&gt;, espero que tenham gostado, que passem a utilizar o bower em seus projetos, pois facilita muito controlar quais depend√™ncias existentes no projeto. Se quiserem pesquisar mais sobre as possibilidades que o bower oferece, basta acessar o site oficial: &lt;a href=&#34;http://bower.io/&#34;&gt;http://bower.io/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Qualquer d√∫vida, critica ou sugest√µes comentem aqui em baixo.&lt;/p&gt;

&lt;p&gt;[]&amp;#8217;s !!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando um blog com Octopress e Github Pages</title>
      <link>http://tableless.com.br/criando-um-blog-com-octopress-e-github-pages/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-um-blog-com-octopress-e-github-pages/</guid>
      <description>

&lt;p&gt;J√° faz pouco mais de uma semana que venho estudando o Octopress para o desenvolvimento do meu &lt;a title=&#34;divecch.com&#34; href=&#34;http://divecch.com&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt;. Hoje vou mostrar como iniciar seu blog utilizando essa ferramenta e falar um pouco sobre como est√° sendo a experi√™ncia de criar um blog totalmente est√°tico, sem a necessidade de um server-side.&lt;/p&gt;

&lt;p&gt;O &lt;a title=&#34;Octopress Official Page&#34; href=&#34;http://octopress.org/&#34; target=&#34;_blank&#34;&gt;Octopress&lt;/a&gt; √© um framework criado por &lt;a title=&#34;Brandon Mathis Website&#34; href=&#34;http://brandonmathis.com/&#34; target=&#34;_blank&#34;&gt;Brandon Mathis&lt;/a&gt; com o &lt;a title=&#34;Jekyll Framework&#34; href=&#34;http://jekyllrb.com/&#34; target=&#34;_blank&#34;&gt;Jekyll&lt;/a&gt;, que √© uma ferramenta Ruby para gerar sites est√°ticos a partir de templates HTML, CSS, Javascript, arquivos de configura√ß√µes e markdowns. Tamb√©m possui algumas tarefas automatizadas com o rake, para criar, novos posts, gerar o conte√∫do est√°tico, fazer deploy, etc. Eu nunca havia trabalhado com esse tipo de ferramenta e achei bem interessante essa ideia, por√©m o Octopress √© totalmente voltado pra blogs e nesse pouco tempo de uso j√° senti algumas limita√ß√µes, estou come√ßando a cogitar a ideia de criar uma ferramenta dessas pra abranger outros segmentos al√©m de blogs, mas isso √© uma hist√≥ria para outro post. Bom, chega de bl√°, bl√°, bl√° e vamos pra pr√°tica!&lt;/p&gt;

&lt;h3 id=&#34;como-instalar&#34;&gt;Como instalar&lt;/h3&gt;

&lt;p&gt;Antes de come√ßar, certifiquem-se que voc√™s possuem instalado o¬†&lt;strong&gt;&lt;a title=&#34;Ruby&#34; href=&#34;https://www.ruby-lang.org/pt/&#34; target=&#34;_blank&#34;&gt;ruby&lt;/a&gt; ‚Äì vers√£o &amp;gt; 1.9.3&lt;/strong&gt;¬†e¬†&lt;a title=&#34;Git&#34; href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;git&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Agora basta fazer clone do reposit√≥rio do Octopress e adicionar o nome do blog no final do comando. No nosso exemplo vamos utilizar ‚Äúblog-zueiro‚Äù:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;git clone git://github.com/imathis/octopress.git blog-zueiro
cd blog-zueiro&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dentro da pasta ‚Äúblog-zueiro‚Äù, execute os seguintes comandos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;gem install bundler
rbenv rehash   # caso esteja utilizando o rbenv
bundle install # baixa todas as depend√™ncias do projeto
rake install   # instala o tema default do octopress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pronto, temos toda a estrutura do nosso ‚Äúblog-zueiro‚Äù pronta.&lt;/p&gt;

&lt;h3 id=&#34;rodando-no-localhost&#34;&gt;Rodando no localhost&lt;/h3&gt;

&lt;p&gt;Para visualizar nosso blog localmente, basta executar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rake generate   # gera todos os arquivos est√°ticos do nosso blog.
rake preview    # inicia um servidor local na porta 4000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aeee, agora podemos visualizar nosso ‚Äúblog-zueiro‚Äù acessando &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;configura√ß√µes-b√°sicas&#34;&gt;Configura√ß√µes b√°sicas:&lt;/h3&gt;

&lt;p&gt;Uma das grandes¬†vantagens¬†que notei no Octopress, √© a parte de customizar seu blog¬†atrav√©s¬†do arquivo de configura√ß√µes, que fica em¬†‚Äú&lt;strong&gt;/_config.yml&lt;/strong&gt;‚Äù.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;
url:            # url do seu blog: joseh.github.io
title:          # Titulo do blog: Zueiro na Net
subtitle:       # Subt√≠tulo do blog (Slogan)
author:         # Nome do autor do blog.
simple_search:  # Engine da barra de pesquisa no site, default √© o google.
description:    # Descri√ß√£o do blog
date_format:    # Formato de data, no nosso caso ‚Äú%d/%m/%Y‚Äù
subscribe_rss:  # Url para os feeds do seu blog, por padr√£o √© o arquivo /atom.xml
subscribe_email:# Url para inscrever-se por e-mail (servi√ßo obrigat√≥rio)
email:          # E-mail para o feed RSS.
root:           # rootpath das nossas urls (default: /)
permalink:      # formato da url para os posts do nosso blog
source:         # diret√≥rio dos source do projeto
destination:    # diret√≥rio dos arquivos finais
plugins:        # diret√≥rio dos plugins que voc√™ for utilizar no projeto
code_dir:       # diret√≥rio para os code snippets 
category_dir:   # diret√≥rio das paginas de categoria do blog
pygments:       # op√ß√£o para ativar o syntax highlighting do python pygments
paginate:       # numero de posts por pagina na pagina de blog index
pagination_dir: # diret√≥rio base para a pagina√ß√£o
recent_posts:   # quantidade de posts recentes a serem exibidos no sidebar do blog
default_asides: # assides que v√£o ser apresentados no sidebar do blog
blog_index_asides: # assides ser√£o exibidos na p√°gina de blog index
post_asides:    # assides que ser√£o exibidos na p√°gina de algum post
page_asides:    # assides que ser√£o exibidos em uma p√°gina comum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;dica:&lt;/strong&gt; os assides s√£o componentes que ficam exibindo na lateral do blog, como o ‚ÄúRecent Posts‚Äù que ficam no diret√≥rio &lt;strong&gt;source/_includes/assides&lt;/strong&gt;, l√° voc√™ pode modificar , como por exemplo trocar os t√≠tulos pra portugu√™s, ou alterar a estrutura do html e inserir novos c√≥digos ruby para customizar seu asside.&lt;/p&gt;

&lt;p&gt;Caso voc√™ queira criar novos assides, basta criar um novo arquivo em &lt;strong&gt;source/_includes/custom/assides/&lt;/strong&gt; e adicionar ele no default_assides do arquivo &lt;strong&gt;_config.yml&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;primeiro-post&#34;&gt;Primeiro post&lt;/h3&gt;

&lt;p&gt;Legal, temos nosso blog configurado e rodando localmente mas ainda n√£o tem nenhum conte√∫do. O Octopress fornece uma rake task para automatizar a cria√ß√£o de postagens. Ent√£o vamos l√°, vamos criar nossa primeira postagem com o t√≠tulo ‚Äúcome√ßando a zueira na net‚Äù:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rake new_post[‚Äúcome√ßando a zueira na net‚Äù]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Com isso, foi gerado um arquivo .makdown dentro da pasta ‚Äúblog-zueiro/source/_posts‚Äù com o seguinte aspecto:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;layout: post
title: &#34;come√ßando a zueira na net&#34;
date: 2013-11-29 11:14:44 -0200
comments: true
categories:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;layout:&lt;/strong&gt; √© referente ao layout que ele vai usar pra p√°gina. Esses layouts ficam dentro da pasta ‚Äúblog-zueiro/source/_layouts‚Äù, caso voc√™ queira, pode criar seu¬†pr√≥prio¬†layout dentro dessa tela e alterar o markdown para utilizar ele.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;titulo:&lt;/strong&gt; √© o titulo do post&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;data:&lt;/strong&gt; √© a data de cria√ß√£o&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;comments:&lt;/strong&gt; √© se o seu post vai ter coment√°rios ou n√£o (true | false)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;categories:&lt;/strong&gt; s√£o as categorias relacionadas ao seu post, por exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;categories: [zueiro na net, blog, octopress, ruby]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;author:&lt;/strong&gt; √© o¬†autor¬†do post&lt;/p&gt;

&lt;p&gt;Agora basta escrever nosso post:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;---
layout: post
title: &#34;come√ßando a zueira na net&#34;
date: 2013-11-29 11:14:44 -0200
comments: true
categories:[zueiro na net, blog, octopress, ruby]
author: Zeh Zueiro
---
Cheguei na net e to afim de zueira, meu primeiro post √© sobre...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;dica:&lt;/strong&gt; existem v√°rios editores de arquivos markdown que facilita na hora de inserir links, imagens, etc. Teve dois que eu utilizei e gostei bastante que √© o &lt;a href=&#34;https://stackedit.io&#34;&gt;https://stackedit.io&lt;/a&gt; e o &lt;a href=&#34;http://mouapp.com/&#34;&gt;http://mouapp.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;deploy-para-o-githubpages&#34;&gt;Deploy para o GithubPages&lt;/h3&gt;

&lt;p&gt;√ìtimo, j√° temos a estrutura do nosso blog pronta, j√° criamos nosso primeiro post, agora quero mostrar pro meus amigos, afinal, de que adianta eu ter um blog que s√≥ eu vejo???&lt;/p&gt;

&lt;p&gt;Pra colocar nosso blog no ar, vamos utilizar o Github Pages que √© suportado nativamente pelo Octopress e a hospedagem √© free.&lt;/p&gt;

&lt;p&gt;Primeiro acesse sua conta no github.com e crie um reposit√≥rio com o seguinte padr√£o: &lt;strong&gt;username.github.io&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ent√£o se seu username for &lt;strong&gt;joseh&lt;/strong&gt;, o reposit√≥rio dever√° se chamar: &lt;strong&gt;joseh.github.io&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Volte novamente pro terminal e execute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rake setup_github_pages&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nesse momento ele vai pedir pra voc√™ inserir o reposit√≥rio do github, o que a gente criou agora pouco: &lt;a href=&#34;http://github.com/joseh/joseh.github.io.git&#34;&gt;http://github.com/joseh/joseh.github.io.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e em seguida:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;
rake generate # para gerar o conte√∫do est√°tico do blog
rake deploy   # para subir fazer subir seu blog pro reposit√≥rio que configuramos.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;agora voc√™ pode¬†visualizar¬†seu blog no endere√ßo &lt;strong&gt;joseh.github.io&lt;/strong&gt;, lembrando que algumas vezes podem levar at√© 10 minutos pro github disponibilizar seu site online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;poss√≠veis problemas:&lt;/strong&gt; caso sua pagina n√£o esteja online depois de 10 min, verifique se o seu reposit√≥rio esta no padr√£o correto: username.github.io, inclusive respeitando mai√∫sculas e min√∫sculas.&lt;/p&gt;

&lt;p&gt;No meu caso, meu¬†usu√°rio¬†√© diRex, ent√£o meu reposit√≥rio teve que ficar diRex.github.io. Se estiver errado, renomeie seu reposit√≥rio pelo github e¬†execute novamente o rake setup_github_pages pra configurar o reposit√≥rio com o novo nome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dica:&lt;/strong&gt; o Octopress j√° vem com dois¬†branches¬†configurados, um master, onde vai ficar os arquivos de produ√ß√£o do blog e um source, onde ficam,¬†obviamente, o source do seu projeto. Ent√£o, quando for atualizar o source do seu projeto no github‚Ä¶:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;git add .
git commit -m ‚Äúmensagem‚Äù
git push origin source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;e pra baixar as atualiza√ß√µes do source em outra m√°quina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;git pull origin source&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;socializando-nosso-blog&#34;&gt;Socializando nosso blog&lt;/h3&gt;

&lt;p&gt;Nesse mesmo arquivo &lt;strong&gt;_config.yml&lt;/strong&gt; temos algumas configura√ß√µes que permitem adicionar algumas intera√ß√µes com as redes sociais:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;github_user:                    # usu√°rio do github
github_repo_count: 0            # quantidade de reposit√≥rios que v√£o ser exibidos
github_show_profile_link: true  # exibir link para o perfil
github_skip_forks: true         # n√£o exibir forks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;twitter_user:                 # usu√°rio do twitter
twitter_tweet_button: true    # exibir bot√£o de tweet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Google Plus&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;google_plus_one: false        # exibir bot√£o +1
google_plus_one_size: medium  # tamanho do bot√£o
googleplus_user:              # usu√°rio do gplus
googleplus_hidden: false      # esconder bot√£o +1 dos assets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Pinboard&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;pinboard_user:       # usu√°rio do pinboard
pinboard_count: 3    # quantidade de bookmarks exibidos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Delicious&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;delicious_user:      # usu√°rio do delicious
delicious_count: 3   # quantidade de bookmarks exibidos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Disqus Comments&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;disqus_short_name:                # short name do seu disqus app
disqus_show_comment_count: false  # exibir quantidade de coment√°rios
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disqus √© uma plataforma de coment√°rios, caso voc√™ n√£o preencher o short name do disqus, seu blog n√£o vai ter coment√°rios, a menos que utilize os coment√°rios do facebook, como vou ensinar a seguir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Facebook&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;facebook_like: false     # exibir bot√µes de curtir e compartilhar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora √© s√≥ escolher quais op√ß√µes voc√™ quer adicionar no seu blog para ter maior intera√ß√£o com seus visitantes XD!&lt;/p&gt;

&lt;h3 id=&#34;coment√°rios-com-o-facebook&#34;&gt;Coment√°rios com o Facebook&lt;/h3&gt;

&lt;p&gt;Uma coisa que n√£o vem por padr√£o no Octopress e que eu queria colocar no meu blog, s√£o os coment√°rios com o Facebook. Acho que facilita mais do que usar o Disqus, pois grande maioria do pessoal j√° tem conta no Facebook.&lt;/p&gt;

&lt;p&gt;Como acho que outras pessoas tamb√©m ir√£o sentir essa necessidade, vou mostrar como fazer pra colocar essa funcionalidade no seu blog.&lt;/p&gt;

&lt;p&gt;Primeiro crie uma app para o facebook: &lt;a href=&#34;https://developers.facebook.com/apps&#34;&gt;https://developers.facebook.com/apps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos at√© o doc de coment√°rios do facebook: &lt;a href=&#34;https://developers.facebook.com/docs/plugins/comments/&#34;&gt;https://developers.facebook.com/docs/plugins/comments/&lt;/a&gt; e preencha os campos de acordo com a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/7oygYA9JHZZUrF9NHv0OgZSFLSKSJ-MujapA0gUnm1M=w733-h453-no&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clique em &lt;strong&gt;Get Code&lt;/strong&gt; e ele vai gerar pra voc√™ dois trechos de c√≥digos, um javascript e um html. O javascript voc√™ deve¬†substituir¬†pelo c√≥digo que tem¬†dentro do arquivo &lt;strong&gt;source/_includes/facebook_like.html&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O c√≥digo html voc√™ coloca onde for exibir os coment√°rios, no meu caso coloquei em &lt;strong&gt;source/_includes/post/sharing.html&lt;/strong&gt; para exibir em baixo dos bot√µes de curtir e compartilhar.&lt;/p&gt;

&lt;h3 id=&#34;customizar-layout&#34;&gt;Customizar layout&lt;/h3&gt;

&lt;p&gt;O Octopress utiliza o pr√©-processador de css SaSS nos seus templates, esse est√° sendo meu primeiro contato com pr√© processadores e realmente traz muitas facilidades, quem quiser ficar por dentro de como o SaSS funciona, acesse: &lt;a href=&#34;http://sass-lang.com/.&#34;&gt;http://sass-lang.com/.&lt;/a&gt; Toda customiza√ß√£o do layout pode ser feita atrav√©s dos arquivos .scss que ficam na pasta /sass.&lt;/p&gt;

&lt;h3 id=&#34;criando-novas-p√°ginas&#34;&gt;Criando novas p√°ginas&lt;/h3&gt;

&lt;p&gt;Caso voc√™ queira adicionar uma p√°gina mais paginas no seu blog, como uma p√°gina de contato:&lt;/p&gt;

&lt;pre&gt;rake new_page[‚Äúcontato‚Äù]&amp;lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;e o arquivo da sua nova p√°gina ser√° criado em &lt;strong&gt;source/contato/index.markdown&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;trafego-de-acesso-com-google-analytics&#34;&gt;Trafego de acesso com google analytics&lt;/h3&gt;

&lt;p&gt;Ter uma analise do trafego de acesso do seu site √© crucial para tomar decis√µes na hora de melhorar o seu conte√∫do online. Para quem ainda n√£o usou o google analytics, essa √© uma boa hora pra ver como funciona, eu mesmo ainda n√£o tinha utilizado e estou me divertindo vendo os relat√≥rios de acesso, locais de onde o blog recebe visitas e tudo mais.&lt;/p&gt;

&lt;p&gt;Pra adicionar o analytics aos seu blog, basta criar uma conta em www.google.com/analytics/‚Äé e obter um ID de acompanhamento. Depois disso, s√≥ adicionar esse ID no arquivo _config.yml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;google_analytics_tracking_id: XX-99999999-9
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;custom-domain&#34;&gt;Custom domain&lt;/h3&gt;

&lt;p&gt;Para finalizar, caso voc√™ queira usar um custom domain, como por exemplo: exemplo.com,&lt;/p&gt;

&lt;p&gt;tudo que precisa fazer √© criar um arquivo chamado CNAME dentro da pasta &lt;strong&gt;source/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agora v√° at√© o seu provedor de dominio, e configure o subdominio &lt;code&gt;www.exemplo.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;para apontar pro seu endere√ßo do github: &lt;strong&gt;username.github.io&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Caso voc√™ tamb√©m queira usar o naked name &lt;code&gt;exemplo.com&lt;/code&gt;, modifique o seu registro de dns do tipo A para apontar pro ip &lt;code&gt;204.232.175.78&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;E isso √© tudo pessoal, kkkk! Espero que tenham gostado do post, curtam, comentem, compartilhem. Cr√≠ticas quanto ao texto tamb√©m s√£o bem vindas. Se conhecerem outras ferramentas que possuem o mesmo prop√≥sito de gerar conte√∫do est√°tico, comentem tamb√©m!&lt;/p&gt;

&lt;p&gt;Gostaria tamb√©m de agradecer o grande Diego Eis pelo espa√ßo e pela iniciativa do Tableless. Parab√©ns!&lt;/p&gt;

&lt;p&gt;vlw !!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Servindo sites est√°ticos com Jekyll</title>
      <link>http://tableless.com.br/jekyll-servindo-sites-estaticos/</link>
      <pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/jekyll-servindo-sites-estaticos/</guid>
      <description>

&lt;p&gt;O &lt;a href=&#34;http://tableless.com.br/servicos/front-end.php&#34;&gt;Tableless produz c√≥digo front-end&lt;/a&gt; HTML/CSS/JAVASCRIPT para v√°rios tipos de clientes, grandes ou pequenos. Os clientes querem ao final do projeto arquivos est√°ticos, em uma estrutura de arquivos decente e c√≥digo bem organizado e isso n√£o √© algo t√£o trivial assim.&lt;/p&gt;

&lt;h2 id=&#34;o-problema&#34;&gt;O problema&lt;/h2&gt;

&lt;p&gt;O primeiro problema que temos quando iniciamos a produ√ß√£o de um site, √© como resolver as partes de layout que s√£o repetidas em todas as p√°ginas do projeto, por exemplo: header, footer, sidebar e essas coisas. J√° vi v√°rios dos meus alunos mantendo sites com dezenas de p√°ginas, sem nem ao menos usar um simples include de PHP. Eu os perdoo por que a maioria estava come√ßando. Mesmo assim √© algo muito amador manter um site dessa forma. No Tableless, durante algum tempo, por conveni√™ncia, us√°vamos simples includes do PHP para prevenir repeti√ß√µes. Escolhemos PHP por conveni√™ncia, &lt;a href=&#34;http://tableless.com.br/servicos/wordpress.php&#34;&gt;j√° que produzimos muitos sites em WordPress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um dos problemas estava resolvido. O segundo problema era: como entregar isso para o cliente?&lt;/p&gt;

&lt;p&gt;Eu n√£o poderia simplesmente enviar um pacote com v√°rios arquivos &lt;strong&gt;.php&lt;/strong&gt; para um cliente que trabalhava com ASP ou Python.&lt;/p&gt;

&lt;p&gt;Logo come√ßamos a usar o &lt;strong&gt;wget&lt;/strong&gt; para percorrer o projeto e transformar as p√°ginas em HTML est√°tico. N√£o demorou muito para desistirmos disso. Embora seja tudo autom√°tico, n√£o era o ideal. Precis√°vamos ter algo mais inteligente para isso. Foi a√≠ que surgiu em nossas vidas algumas ferramentas para gerar sites est√°ticos. Conhecemos o Jekyll, Middleman e alguns outros. Hoje vamos falar um pouco do &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;jekyll&#34;&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;O Jekyll √© um gerador de c√≥digos est√°ticos. A ideia √© que voc√™ crie p√°ginas e at√© mesmo um blog de forma est√°tica, usando HTML que voc√™ j√° conhece, junto com alguns truques que ir√£o ajud√°-lo a converter seu site em arquivos est√°ticos, pronto para ser publicado. Ele √© baseado em v√°rios formatos como Markdown para formata√ß√£o de textos e posts e um padr√£o de template chamado Liquid com um pouco de YAML para exibir e guardar os dados das vari√°veis. N√£o se preocupe com a sopa de letras, por enquanto. Mais √† frente no texto voc√™ vai entender um pouco mais.&lt;/p&gt;

&lt;h2 id=&#34;estrutura-de-diret√≥rios&#34;&gt;Estrutura de diret√≥rios&lt;/h2&gt;

&lt;p&gt;A coisa toda √© muito simples: todo o arquivo que tiver &lt;strong&gt;_&lt;/strong&gt; (underline) na frente do nome, o Jekyll vai ignorar no pacote final, quando converter seu projeto. Veja uma estrutura de um dos nossos projetos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/11/Screen-Shot-2013-11-10-at-5.09.22-PM.png&#34; alt=&#34;Screen Shot 2013-11-10 at 5.09.22 PM&#34; width=&#34;265&#34; height=&#34;277&#34; class=&#34;alignnone size-full wp-image-39447&#34; srcset=&#34;uploads/2013/11/Screen-Shot-2013-11-10-at-5.09.22-PM.png 265w, uploads/2013/11/Screen-Shot-2013-11-10-at-5.09.22-PM-160x168.png 160w&#34; sizes=&#34;(max-width: 265px) 100vw, 265px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A pasta &lt;strong&gt;_includes&lt;/strong&gt; guarda arquivos que ser√£o reutilizados nas p√°ginas do projeto, tipo o header, footer, sidebar e etc ou qualquer outra coisa de acordo com sua necessidade.&lt;/p&gt;

&lt;p&gt;Na pasta &lt;strong&gt;_layouts&lt;/strong&gt; voc√™ vai colocar os padr√µes de layout de p√°ginas. Imagine que existam p√°ginas com formatos de estruturas diferentes. √â a√≠ que voc√™ vai organizar essas coisas.&lt;/p&gt;

&lt;p&gt;Para voc√™ ter um exemplo, nesse projeto fizemos apenas uma estrutura b√°sica que usamos para home e para as p√°ginas internas. Embora as p√°ginas tenham estruturas diferentes, decidimos usar apenas um arquivo default para incluir por padr√£o em todas as p√°ginas o header e o footer. As estruturas das p√°ginas foram definidas de acordo com o c√≥digo espec√≠fico em cada uma das p√°ginas. Veja o c√≥digo do arquivo &lt;strong&gt;default.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-yaml&#34;&gt;{% include header.html %}

{{ content }}

{% include footer.html %}
&lt;/pre&gt;

&lt;p&gt;Rid√≠culo, n√©?&lt;/p&gt;

&lt;p&gt;Ah! O &lt;code&gt;{{ content }}&lt;/code&gt; √© uma vari√°vel que exibe o conte√∫do das p√°ginas. √â como o &lt;code&gt;the_content()&lt;/code&gt; do WordPress. √â ali que o Jekyll vai inserir o conte√∫do das p√°ginas que voc√™ criar. No nosso caso, o c√≥digo encontrado em &lt;strong&gt;defail-view.html, index e results&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A pasta &lt;strong&gt;_site&lt;/strong&gt; √© o build do seu projeto. √â ali que o Jekyll coloca a vers√£o final est√°tica do site, pronto para ser publicado.&lt;/p&gt;

&lt;p&gt;Tem gente que deixa a pasta _site version√°vel no GIT, tem gente que bota no &lt;strong&gt;.ignore&lt;/strong&gt;. A√≠ vai de voc√™ decidir o que achar melhor.&lt;/p&gt;

&lt;p&gt;As URLs ficam assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;.
|-- _config.yml
|-- _includes/
|-- _layouts/
|-- _posts/
|-- _site/
|-- detail-view.html    # =&amp;gt; http://projeto.com/detail-view.html
|-- index.html    # =&amp;gt; http://projeto.com
‚îî‚îÄ‚îÄ results.html  # =&amp;gt; http://projeto.com/results.html
&lt;/pre&gt;

&lt;p&gt;Se voc√™ inserir um arquivo &lt;strong&gt;index.html&lt;/strong&gt; nas pastas, a url das p√°ginas v√£o ficar assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;.
|-- _config.yml
|-- _includes/
|-- _layouts/
|-- _posts/
|-- _site/
|-- detail-view/
|---- index.html    # =&amp;gt; http://projeto.com/detail-view/
|-- index.html    # =&amp;gt; http://projeto.com
|-- results/
‚îî‚îÄ‚îÄ‚îÄ‚îÄ index.html    # =&amp;gt; http://projeto.com/results/
&lt;/pre&gt;

&lt;h2 id=&#34;estrutura-de-c√≥digo&#34;&gt;Estrutura de c√≥digo&lt;/h2&gt;

&lt;p&gt;A estrutura de c√≥digo dos arquivos √© muito simples de se entender, mas para alguns pode ser um pouco estranha por n√£o ter familiaridade com estruturas de dados como YAML. Mas isso √© simples e voc√™ aprende r√°pido, tenho certeza. Continue lendo para voc√™ ver como √© f√°cil.&lt;/p&gt;

&lt;h3 id=&#34;sem-banco-de-dados&#34;&gt;Sem banco de dados&lt;/h3&gt;

&lt;p&gt;Para come√ßar, voc√™ n√£o mant√©m um banco de dados e √© isso que faz toda a gra√ßa. O conte√∫do do seu site ficar guardado nos arquivos de cada p√°gina. Voc√™ n√£o precisa levantar um servidor de MySQL. Todas as informa√ß√µes do site estar√£o nos arquivos que voc√™ criar para cada p√°gina. Ou seja, nada de queries, nada de templates tags do WordPress.&lt;/p&gt;

&lt;h4 id=&#34;yaml-e-liquid&#34;&gt;YAML e Liquid&lt;/h4&gt;

&lt;p&gt;O formato YAML √© conhecido pela facilidade de leitura. Ele foi criado para ser f√°cil da gente entender e tamb√©m escrever. Ou seja, ele √© um formato simples para escrevermos manualmente, mas tamb√©m para manipularmos via programa√ß√£o. √â aqui que o Jekyll come√ßa a ficar legal. Essa estrutura √© usada tamb√©m no Middleman e no DocPad. Logo, aprendendo aqui, voc√™ j√° vai saber mais ou menos como funciona nos outros geradores.&lt;/p&gt;

&lt;p&gt;Qualquer arquivo que cont√©m um bloco YAML &amp;#8211; que o pessoal do Jekyll chama de &lt;strong&gt;front-matter&lt;/strong&gt; &amp;#8211; ser√° processado como um arquivo especial. O front-matter &lt;strong&gt;precisa ser a primeira coisa do arquivo&lt;/strong&gt; e deve estar num formato v√°lido de YAML. Toda p√°gina do seu site feito em Jekyll precisa come√ßar com essa estrutura:&lt;/p&gt;

&lt;pre class=&#34;lang-yaml&#34;&gt;---
layout: default
title: Home
---
&lt;/pre&gt;

&lt;p&gt;Simples, ahn? O bloco √© demarcado pelos tr√™s tra√ßos no come√ßo e no fim. TEM que ser tr√™s tra√ßos. Nem mais, nem menos. O c√≥digo YAML s√£o as duas vari√°veis &lt;strong&gt;layout&lt;/strong&gt; e &lt;strong&gt;title&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Neste bloco voc√™ pode usar vari√°veis predefinidas ou criar suas pr√≥prias vari√°veis. Essas vari√°veis estar√£o dispon√≠veis para voc√™ acessar usando as tags do formato Liquid. Voc√™ j√° vai ver mais abaixo, primeiro vamos entender as duas vari√°veis acima.&lt;/p&gt;

&lt;p&gt;A vari√°vel &lt;strong&gt;layout&lt;/strong&gt; indica que voc√™ est√° usando a estrutura de template do &lt;strong&gt;default.html&lt;/strong&gt;. Lembra a estrutura de arquivos e diret√≥rios que mostramos logo no in√≠cio? Os nomes que voc√™ coloca ali na vari√°vel &lt;strong&gt;layout&lt;/strong&gt; s√£o os nomes dos arquivos que est√£o dentro da pasta &lt;strong&gt;_layouts&lt;/strong&gt;, sem a extens√£o &lt;strong&gt;.html&lt;/strong&gt;. Logo, se voc√™ tiver um arquivo ali dentro chamado &lt;strong&gt;no-sidebar.html&lt;/strong&gt;, indicando um formato de p√°gina que n√£o vai ter sidebar, o valor da vari√°vel &lt;strong&gt;layout&lt;/strong&gt; ser√° &lt;strong&gt;no-sidebar&lt;/strong&gt;. Fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-yaml&#34;&gt;---
layout: no-sidebar
title: P√°gina Interna
---
&lt;/pre&gt;

&lt;p&gt;A segunda vari√°vel √© a &lt;strong&gt;title&lt;/strong&gt;. Aqui √© uma vari√°vel criada por mim, que ser√° usada para ser o t√≠tulo da p√°gina. Veja abaixo como a gente puxa o valor da vari√°vel &lt;strong&gt;title&lt;/strong&gt; que definimos acima, usando o formato Liquid.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt; {{ page.title }} &amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
...
&lt;/pre&gt;

&lt;p&gt;O &lt;strong&gt;{{ page.title }}&lt;/strong&gt; est√° dizendo que nesse local, ao renderizar o site, o Jekyll ir√° colocar o t√≠tulo da p√°gina atual.&lt;/p&gt;

&lt;p&gt;O formato &lt;a href=&#34;http://docs.shopify.com/themes/liquid-basics&#34;&gt;Liquid&lt;/a&gt; √© um formato de template muito simples. A sua sintaxe √© muito parecida com outros tipos de padr√µes de templates, como por exemplo o &lt;a href=&#34;http://tableless.com.br/templates-client-side-com-mustache-js/&#34;&gt;Mustache.js&lt;/a&gt;. Logo, n√£o tem muito segredo. Voc√™ abre duas chaves &lt;strong&gt;{{&lt;/strong&gt;, coloca o nome da vari√°vel e depois fecha com duas chaves novamente &lt;strong&gt;}}&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;entendendo-mais-sobre-as-vari√°veis&#34;&gt;Entendendo mais sobre as vari√°veis&lt;/h4&gt;

&lt;p&gt;Voc√™ usa o prefixo &lt;strong&gt;page&lt;/strong&gt; para puxar os dados da p√°gina. Qualquer coisa que esteja ali no front-matter vai ser puxado usado o &lt;strong&gt;page&lt;/strong&gt; antes. Se voc√™ quiser pegar o nome do site, por exemplo, ou qualquer outra coisa referente ao site inteiro, voc√™ usa o prefixo &lt;strong&gt;site&lt;/strong&gt;. Um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt; {{ page.title }} - {{ site.name }} &amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
...
&lt;/pre&gt;

&lt;p&gt;Nesse caso, as informa√ß√µes referentes ao site n√£o estar√£o no &lt;strong&gt;front-matter&lt;/strong&gt;, mas em um arquivo de configura√ß√£o, que o Jekyll vai ler sempre quando for iniciado. Esse arquivo se chama &lt;strong&gt;_config.yml&lt;/strong&gt;. Voc√™ vai escrev√™-lo no mesmo formato que o front-matter. Um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-yml&#34;&gt;&lt;strong&gt;name:&lt;/strong&gt; Nome do Projeto
&lt;strong&gt;source:&lt;/strong&gt;      .
&lt;strong&gt;destination:&lt;/strong&gt; ./_site
&lt;strong&gt;plugins:&lt;/strong&gt;     ./_plugins
&lt;strong&gt;layouts:&lt;/strong&gt;     ./_layouts
&lt;strong&gt;css_folder:&lt;/strong&gt;  &#39;assets/stylesheets&#39;
&lt;strong&gt;js_folder:&lt;/strong&gt;  &#39;assets/javascripts&#39;
&lt;strong&gt;img_folder:&lt;/strong&gt;  &#39;assets/images&#39;
&lt;strong&gt;include:&lt;/strong&gt;     [&#39;.htaccess&#39;]
&lt;strong&gt;exclude:&lt;/strong&gt;     []
&lt;strong&gt;keep_files:&lt;/strong&gt;  [&#39;.git&#39;,&#39;.svn&#39;]
&lt;strong&gt;timezone:&lt;/strong&gt;    nil

...

&lt;/pre&gt;

&lt;p&gt;H√° outras vari√°veis globais que podem n√£o estar a√≠ no &lt;strong&gt;_config.yml&lt;/strong&gt;. Por exemplo a &lt;strong&gt;{{ site.pages }}&lt;/strong&gt; que retorna a lista de p√°ginas do site.&lt;/p&gt;

&lt;p&gt;H√° uma s√©rie de vari√°veis dispon√≠veis &lt;a href=&#34;http://jekyllrb.com/docs/frontmatter/&#34;&gt;aqui&lt;/a&gt; e voc√™ pode ver as &lt;a href=&#34;http://jekyllrb.com/docs/variables/&#34;&gt;vari√°veis globais aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;entendendo-o-config-yml&#34;&gt;Entendendo o _config.yml&lt;/h3&gt;

&lt;p&gt;O &lt;strong&gt;_config.yml&lt;/strong&gt; guarda as configura√ß√µes do seu projeto. Ele deve estar sempre no root do seu projeto. Sempre que voc√™ inicia um novo projeto Jekyll, ele cria um _config.yml. Voc√™ pode ver um exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-yml&#34;&gt;source:      .
destination: ./_site
plugins:     ./_plugins
layouts:     ./_layouts
include:     [&#39;.htaccess&#39;]
exclude:     []
keep_files:  [&#39;.git&#39;,&#39;.svn&#39;]
gems:        []
timezone:    nil
encoding:    nil

future:      true
show_drafts: nil
limit_posts: 0
pygments:    true

relative_permalinks: true

permalink:     date
paginate_path: &#39;page:num&#39;

markdown:      maruku
markdown_ext:  markdown,mkd,mkdn,md
textile_ext:   textile

excerpt_separator: &#34;\n\n&#34;

safe:        false
host:        0.0.0.0
port:        4000
baseurl:     /
url:         http://localhost:4000
lsi:         false

maruku:
  use_tex:    false
  use_divs:   false
  png_engine: blahtex
  png_dir:    images/latex
  png_url:    /images/latex

rdiscount:
  extensions: []

redcarpet:
  extensions: []

kramdown:
  auto_ids: true
  footnote_nr: 1
  entity_output: as_char
  toc_levels: 1..6
  smart_quotes: lsquo,rsquo,ldquo,rdquo
  use_coderay: false

  coderay:
    coderay_wrap: div
    coderay_line_numbers: inline
    coderay_line_numbers_start: 1
    coderay_tab_width: 4
    coderay_bold_every: 10
    coderay_css: style

redcloth:
  hard_breaks: true
&lt;/pre&gt;

&lt;p&gt;Para ficar mais f√°cil, eu ainda adiciono uma ou outra op√ß√£o personalizada no _config.yml, como por exemplo o caminho do CSS e do Javascript:&lt;/p&gt;

&lt;pre class=&#34;lang-yml&#34;&gt;css_folder:  &#39;assets/stylesheets&#39;
js_folder:  &#39;assets/javascripts&#39;
img_folder: &#39;assets/images&#39;
&lt;/pre&gt;

&lt;p&gt;Assim eu chamo os assets assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt; {{ page.title }} - {{ site.name }} &amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;

    &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ site.css_folder }}/bootstrap.min.css&#34;&amp;gt;
    &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ site.css_folder }}/style.css&#34;&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

...

&lt;/pre&gt;

&lt;p&gt;Bem legal, n√©?&lt;/p&gt;

&lt;p&gt;N√£o precisa entender todas as vari√°veis que eles colocam ali no &lt;strong&gt;_config.yml&lt;/strong&gt;. Basta entender que d√° para criar novas vari√°veis personalizadas e que voc√™ pode modificar os valores das vari√°veis existentes. H√° muita coisa ali que voc√™ n√£o precisa usar. Mesmo assim, se voc√™ tiver muitos outros dados para usar, voc√™ pode importar em formato YAML entro da pasta &lt;strong&gt;_data&lt;/strong&gt;, que eu n√£o vou detalhar sobre isso aqui, por enquanto.&lt;/p&gt;

&lt;h3 id=&#34;quick-start&#34;&gt;Quick start&lt;/h3&gt;

&lt;p&gt;Para iniciar um projeto e come√ßar a fu√ßar nas coisas √© f√°cil.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;~ $ gem install jekyll
~ $ jekyll new nome-projeto
~ $ cd nome-projeto
~/nome-projeto $ jekyll serve --w
&lt;/pre&gt;

&lt;p&gt;O par√¢metro &lt;strong&gt;&amp;#8211;w&lt;/strong&gt; ou &lt;strong&gt;&amp;#8211;watch&lt;/strong&gt; serve para que a cada vez que voc√™ fizer uma modifica√ß√£o nos arquivos do projeto, o Jekyll faz um build autom√°tico do projeto. A√≠ √© s√≥ fazer um refresh no site e ver as modifica√ß√µes.&lt;/p&gt;

&lt;p&gt;O Jekyll vai subir seu site na porta :4000, √© s√≥ seguir para: &lt;a href=&#34;http://localhost:4000/&#34;&gt;http://localhost:4000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lembre-se que voc√™ precisa ter Ruby instalado na sua m√°quina, j√° que o Jekyll √© uma GEM.&lt;/p&gt;

&lt;p&gt;Feito isso, d√° uma fu√ßada na pasta do projeto. Voc√™ vai perceber que existe uma pasta &lt;strong&gt;_posts&lt;/strong&gt; que eu n√£o citei nesse artigo.&lt;/p&gt;

&lt;p&gt;O Jekyll pode ser usado para criar um blog. Os posts s√£o arquivos escritos em Markdown e que s√£o automaticamente transformados em arquivos HTML e guardados em pastas organizadas por ordem cronol√≥gica. Coisa fina! Talvez em um pr√≥ximo post eu explique melhor esse m√≥dulo.&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;Eu, pessoalmente, prefiro Jekyll ao Middleman. Os dois s√£o bem parecidos. Mas eu acho Jekyll bem mais simples. Eu uso Middeman em outros projetos e vou tentar preparar um post explicando o b√°sico para voc√™s sobre ele.&lt;/p&gt;

&lt;p&gt;Se voc√™ tem Windows e estiver muito afim de fazer isso tudo funcionar, leia esse post do Nando ensinando como faz para instalar &lt;a href=&#34;http://simplesideias.com.br/configurando-ruby-rails-mysql-e-git-no-windows&#34;&gt;Ruby, Rails, MySQL e Git no Windows&lt;/a&gt; ou compra um Mac.&lt;/p&gt;

&lt;p&gt;A comunidade Ruby ajudou muito o mundo front-end com v√°rias ferramentas que ajudam a automatizar processos de desenvolvimento. √â por isso que geralmente os front-ends que trabalham em projetos com Ruby conseguem se virar melhor em determinados pontos. Mas essa √© uma outra hist√≥ria. üòâ&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>