<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Strict Mode on Tableless</title>
    <link>http://tableless.com.br/tags/strict-mode/index.xml</link>
    <description>Recent content in Strict Mode on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/strict-mode/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JavaScript Strict Mode</title>
      <link>http://tableless.com.br/javascript-strict-mode/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/javascript-strict-mode/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-e-porque-usá-lo&#34;&gt;O que é e porque usá-lo&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ECMAScript5&lt;/strong&gt; introduziu o &lt;strong&gt;&amp;#8220;use strict&amp;#8221;&lt;/strong&gt;, que basicamente faz o browser interpretar o código JavaScript no modo mais rigoroso. Quando usamos o JS em strict mode, o browser mostra os erros que antes eram silenciados, como utilizar uma variável que não foi declarada, utilizar palavras reservadas no código, ou utilizar recursos da linguagem que já foram declarados obsoletos e até mesmo, proibindo o uso de partes da linguagem que são tidas como problemáticas, nos forçando a escrever um código de melhor qualidade e ajudando a capturar bugs mais precocemente. Sem habilitarmos o modo restrito, o código abaixo é executado sem lançar qualquer excepção, ainda que seja uma má prática utilizar a variável “nome” sem declará-la:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function minhaFuncao() {
    nome = &#34;Caio Proiete&#34;;
    // ...
 } 
 minhaFuncao();
&lt;/pre&gt;

&lt;p&gt;Se habilitarmos o strict mode, será lançada uma excepção para notificar que temos um problema no código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function minhaFuncao() {
    &#34;use strict&#34;;
 
    // 0x800a13b2 - JavaScript runtime error: Variable undefined in strict mode
    nome = &#34;Caio Proiete&#34;;
    // ...
}

minhaFuncao();
&lt;/pre&gt;

&lt;h2 id=&#34;habilitando&#34;&gt;Habilitando&lt;/h2&gt;

&lt;p&gt;Podemos habilitar o modo restrito em diferentes âmbitos: A primeira forma é a nível de arquivo. Para isso, basta por a string &lt;code&gt;&amp;quot;use strict&amp;quot;;&lt;/code&gt; no começo de um arquivo JS para que todo o código deste arquivo seja executado no modo restrito. Nenhum código pode vir antes da declaração &amp;#8220;use strict&amp;#8221;; (apenas whitespace e comentários são permitidos). Caso um trecho de código apareça antes, o modo restrito não é disparado.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// código &#34;strict&#34;
 &#34;use strict&#34;;
 var foo = &#34;bar&#34;;

 // código &#34;não strict&#34;
 var whatsUp = &#34;suuup&#34;;
 &#34;use strict&#34;;

&lt;/pre&gt;

&lt;p&gt;A outra forma de uso é a nível de função. Quando usado dentro de uma função, apenas o código dentro dela é executado no modo restrito. Todo o código externo continua a ser executado normalmente.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function foo() {
  &#34;use strict&#34;;
  // código da função em modo &#34;strict&#34;
}

function bar() {
  // código da função em modo &#34;não strict&#34;
}
&lt;/pre&gt;

&lt;p&gt;Hoje é muito comum concatenarmos arquivos para diminuir a quantidade de dados trafegados e o número de requisições. Para não disparar o modo restrito em código que não foi testado neste modo, é interessante deixarmos o código que roda e foi testado para rodar no modo restrito isolado. As funções de invocação imediata são perfeitas para isso.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// código no modo &#34;não strict&#34;
(function() {
  &#34;use strict&#34;;
  // código no modo &#34;strict&#34;
}());
// código no modo &#34;não strict&#34;
&lt;/pre&gt;

&lt;h2 id=&#34;o-que-muda&#34;&gt;O que muda?&lt;/h2&gt;

&lt;p&gt;O _strict mode _trouxe várias mudanças na forma de como o JavaScript é executado. Mas vou focar nas principais partes. Caso queira descer mais ainda na toca do coelho, o artigo do&lt;em&gt; &lt;/em&gt;&lt;span style=&#34;text-decoration: underline&#34;&gt;&lt;a style=&#34;color: #666666;text-decoration: underline&#34; href=&#34;http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/&#34;&gt;Dmitry Soshnikov&lt;/a&gt; é uma ótima leitura sobre todos os detalhes das mudanças que o &lt;em&gt;strict mode&lt;/em&gt; trouxe.&lt;/p&gt;&lt;/p&gt;

&lt;h3 id=&#34;remoo_do_with&#34;&gt;
  Remoção do &lt;em&gt;with&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;
  A tão mal compreendida declaração &lt;em&gt;&lt;code&gt;with&lt;/code&gt;&lt;/em&gt;&lt;em&gt; &lt;/em&gt;foi removida da linguagem. No &lt;strong&gt;&lt;em&gt;strict mode&lt;/em&gt;&lt;/strong&gt; seu uso gera um erro de sintaxe.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#34;use strict&#34;;
// gera um erro de sintaxe no &#34;strict mode&#34;
with (location) {
  console.log(href);
}
&lt;/pre&gt;

&lt;h3 id=&#34;declarao_implcita_de_variveis_globais&#34;&gt;
  Declaração implícita de variáveis globais
&lt;/h3&gt;

&lt;p&gt;
  Um dos erros mais comuns em JavaScript. Sem o &lt;em&gt;strict mode&lt;/em&gt;, uma nova variável global é criada sempre que atribuímos um valor a uma variável não declarada. No modo restrito, isto gera um erro.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// gera um erro no &#34;strict mode&#34;
(function() {
  &#34;use strict&#34;;
  variavelNaoDeclarada = &#39;foo&#39;;
}());
&lt;/pre&gt;

&lt;h3 id=&#34;restrio_de_nomes&#34;&gt;
  Restrição de nomes
&lt;/h3&gt;

&lt;p&gt;
  O modo restrito impõe uma série de restrições aos nomes de variáveis, funções e parâmetros. &lt;code&gt;eval&lt;/code&gt; e &lt;em&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/em&gt;&lt;em&gt; &lt;/em&gt;não mais podem ser usados como identificadores, muito menos tentar atribuir um valor a eles. O que é muito bom, uma vez que o JavaScript possui nativamente uma função &lt;code&gt;eval&lt;/code&gt; e um objeto &lt;em&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/em&gt;.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// gera um erro de sintaxe no &#34;strict mode&#34;
function() {
  &#34;use strict&#34;;
  arguments = &#39;foo&#39;;
}
&lt;/pre&gt;

&lt;p&gt;
  Algumas palavras também são proibidas de serem usadas como identificadores pois são candidatas a serem usadas como nomes de futuras &lt;em&gt;features&lt;/em&gt; da linguagem. Entre elas estão:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    implements
  &lt;/li&gt;
  &lt;li&gt;
    interface
  &lt;/li&gt;
  &lt;li&gt;
    let
  &lt;/li&gt;
  &lt;li&gt;
    package
  &lt;/li&gt;
  &lt;li&gt;
    private
  &lt;/li&gt;
  &lt;li&gt;
    protected
  &lt;/li&gt;
  &lt;li&gt;
    public
  &lt;/li&gt;
  &lt;li&gt;
    static
  &lt;/li&gt;
  &lt;li&gt;
    yield
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;uso_do_this&#34;&gt;
  Uso do this
&lt;/h3&gt;

&lt;p&gt;
  O uso do &lt;code&gt;this&lt;/code&gt; foi levemente modificado. Quando usado dentro de uma função, o &lt;code&gt;this &lt;/code&gt;aponta para o objeto que contem a função. Porém quando a função não pertence a um objeto específico, ele aponta para o objeto global &lt;code&gt;window&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
  No modo restrito, caso o &lt;code&gt;this&lt;/code&gt; seja usado em uma função que é definida no escopo global, ele retorna o valor &lt;code&gt;undefined&lt;/code&gt;. Caso uma função pertença a um objeto, ele continua a apontar para o objeto, como acontecia anteriormente.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// retorna &#34;undefined&#34;
function() {
  &#34;use strict&#34;;
  return this;
}
&lt;/pre&gt;

&lt;p&gt;
  Isso evita erros comuns com funções usadas como construtores. No código abaixo chamamos uma função construtora sem o uso do &lt;code&gt;new&lt;/code&gt;. No modo não restrito, o &lt;code&gt;this &lt;/code&gt;apontaria para &lt;code&gt;window&lt;/code&gt; e uma variável global &lt;code&gt;nome&lt;/code&gt; seria criada. Como no &lt;em&gt;strict mode&lt;/em&gt; o &lt;code&gt;this&lt;/code&gt; retorna &lt;code&gt;undefined&lt;/code&gt;, e não podemos adicionar propriedades a&lt;code&gt;undefined&lt;/code&gt;, um erro é gerado. Quando usado da forma apropriada, com o &lt;code&gt;new&lt;/code&gt;, nenhum erro é disparado.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#34;use strict&#34;;

function Blog(nome) {
  this.nome = nome;
}

// gera um erro no &#34;strict mode&#34;
var blog = Blog(&#39;Loop Infinito&#39;);
&lt;/pre&gt;

&lt;h3 id=&#34;parmetros_e_propriedades_duplicadas&#34;&gt;
  Parâmetros e propriedades duplicadas
&lt;/h3&gt;

&lt;p&gt;
  O JavaScript não reclama caso você declare duas propriedades de um objeto com o mesmo nome. A última declaração vai simplesmente sobrescrever a anterior. O modo restrito força o uso de nomes únicos de propriedades.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#34;use strict&#34;;

// gera um erro de sintaxe no modo strict
obj = {
  foo: 1,
  bar: 2,
  foo: 3
}
&lt;/pre&gt;

&lt;p&gt;
  Com o nome de parâmetros temos um cenário parecido. Normalmente o JavaScript aceita como sintaxe válida a declaração de parâmetros com o mesmo nome. No modo restrito isso gera um erro de sintaxe.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// gera um erro de sintaxe
function foo(param1, param1) {
  &#34;use strict&#34;;
  return param1 + 1;
}
&lt;/pre&gt;

&lt;h3&gt;
  Variáveis do contexto &lt;em&gt;eval()&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;
  O &lt;code&gt;eval&lt;/code&gt;, em código não &lt;em&gt;strict&lt;/em&gt;, pode adicionar variáveis ao contexto em que ele está inserido. E antes do &lt;abbr title=&#34;JavaScript Object Notation&#34;&gt;JSON&lt;/abbr&gt; ser nativamente implementado nos &lt;em&gt;browsers&lt;/em&gt;, o &lt;code&gt;eval&lt;/code&gt; era muito usado para construir objetos a partir de &lt;em&gt;strings&lt;/em&gt; e os inserir no contexto externo ao &lt;code&gt;eval&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
  Com o &lt;em&gt;strict mode&lt;/em&gt;, o &lt;code&gt;eval&lt;/code&gt; não pode mais adicionar variáveis fora de seu contexto. Variáveis adicionadas no &lt;code&gt;eval&lt;/code&gt; ficam contidas no contexto do &lt;code&gt;eval&lt;/code&gt;. No código abaixo, sem o &lt;em&gt;strict mode&lt;/em&gt;, seria inserido uma variável &lt;code&gt;foo&lt;/code&gt; e o valor do &lt;code&gt;alert&lt;/code&gt; seria “bar”. No &lt;em&gt;strict mode &lt;/em&gt;acontece um erro de sintaxe pois a variável não foi definida.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#34;use strict&#34;;
eval(&#39;var foo=&#34;bar&#34;;&#39;);
alert(foo); // gera um erro de sintaxe no &#34;strict mode&#34;
&lt;/pre&gt;

&lt;h3 id=&#34;nmeros_no_sistema_octal&#34;&gt;
  Números no sistema octal
&lt;/h3&gt;

&lt;p&gt;
  Números no sistema octal são números representados na base 8. Ou seja, 10 em octal equivale a 8 em decimal. Em JavaScript, e em várias outras linguagens, os números no sistema octal são representados com um 0 na frente do número. 023 em JavaScript equivale a 19 em decimal. Isso gerava muita confusão, já que muitos achavam que um zero a esquerda não iria fazer nenhuma diferença na representação do número.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#34;use strict&#34;;

// gera um erro de sintaxe no modo strict
var foo = 023;
&lt;/pre&gt;

&lt;p&gt;
  No modo restrito o uso de números no sistema octal não é permitido. Caso um 0 seja posto na frente de um número octal válido, será gerado um erro de sintaxe. Caso contrário ele será simplesmente tratado como decimal.
&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&#34;use strict&#34;;

// octal válido. gera erro de sintaxe no &#34;strict mode&#34;
var foo = 023;

// ocatal não válido. é tratado como decimal
var bar = 08;
&lt;/pre&gt;

&lt;p&gt;
  Como o número 08 não é um número octal válido, já que números no sistema octal vão de 0 a 7, ele é tratado como um número decimal. No caso do número 023, por ser um octal válido, um erro de sintaxe é gerado. Caso você não saiba o que um octal é, ande pela sombra evitando o uso de 0’s na frente de números.
&lt;/p&gt;

&lt;h2&gt;
  Suporte
&lt;/h2&gt;

&lt;p&gt;
  O &lt;em&gt;strict mode&lt;/em&gt; pode ser usado sem medo em todos os navegadores. Caso um navegador que não o implemente passe pela declaração &lt;code&gt;&#34;use strict&#34;;&lt;/code&gt;, ele irá tratá-la como uma &lt;em&gt;string&lt;/em&gt; e não irá afetar o comportamento do código seguinte.
&lt;/p&gt;

&lt;p&gt;
  O cenário contrário também é compatível. Caso você desenvolva JavaScript em modo restrito em um navegador que o implementa, o código válido no modo restrito deste navegador é retrocompatível com qualquer outro que implemente o ECMAScript 3. Ou seja, irá rodar até no IE. 😀 haha
&lt;/p&gt;

&lt;p&gt;
  De qualquer forma, você pode ter acesso a lista de compatibilidade do &amp;#8220;use strict&amp;#8221; junto aos navegadores, no no seguinte link: &lt;a href=&#34;http://caniuse.com/use-strict&#34;&gt;CanIUse&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
  Concluindo
&lt;/h2&gt;

&lt;p&gt;
  O Modo restrito além de melhorar a legibilidade e estabilidade do seu código, ajuda a diminuir erros e ainda melhora a segurança associada à execução do código.Seu suporte é muito amplo e mesmo que não seja suportado não irá atrapalhar em nada na execução do código, ou seja, não há motivos para não utiliza-lo.
&lt;/p&gt;

&lt;p&gt;
  Espero que tenham gostado do artigo.
&lt;/p&gt;

&lt;p&gt;
  Dúvidas, criticas, sugestões&amp;#8230; nos comentários 😉
&lt;/p&gt;

&lt;h2&gt;
  Referências
&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;a href=&#34;http://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/&#34;&gt;Nicholas C. Zakas. It’s time to start using JavaScript strict mode&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&#34;http://loopinfinito.com.br/2013/07/16/javascript-strict-mode/&#34;&gt;Caio Gondim. JavaScript Strict Mode. Lopinfinito&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&#34;http://tutsmais.com.br/blog/javascript-2/o-que-e-o-mode-strict-dojavascript/&#34;&gt;Rodrigo Nery. O que é o Mode Strict no JavaScript.&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>