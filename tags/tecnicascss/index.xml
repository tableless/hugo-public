<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tecnicascss on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/tecnicascss/index.xml</link>
    <description>Recent content in Tecnicascss on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/tecnicascss/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como fazer triângulos (setas ou arrows) com CSS</title>
      <link>https://tableless.github.io/hugo-public/fazendo-triangulos-triangle-arrows-com-css/</link>
      <pubDate>Fri, 18 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/fazendo-triangulos-triangle-arrows-com-css/</guid>
      <description>&lt;p&gt;Muitas vezes usamos triângulos em links, botões ou qualquer outro elemento que precise de alguma indicação de clique. Esses triângulos, por serem muito simples, é bem possível criarmos inteiramente usando CSS. Esse truque vale muito a pena para evitar que o browser tenha que baixar pequenas imagens, quem mesmo tendo um peso bem leve, elas atrapalham a performance do carregamento do site.&lt;/p&gt;

&lt;p&gt;Para esse truque você usará os &lt;a href=&#34;http://tableless.com.br/como-usar-before-after/&#34;&gt;pseudo elementos :after ou :before&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Abaixo, segue o código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;a href=&#34;#&#34; class=&#34;seta-cima&#34;&amp;gt;Seta para cima&amp;lt;/a&amp;gt;
&amp;lt;span class=&#34;seta-baixo&#34;&amp;gt;Seta para baixo&amp;lt;/span&amp;gt;
&amp;lt;i class=&#34;seta-esquerda&#34;&amp;gt;Seta para esquerda&amp;lt;/i&amp;gt;
&amp;lt;div class=&#34;seta-direita&#34;&amp;gt;Seta para direita&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/**
*** Seta para ESQUERDA
**/
.seta-esquerda:before {
  content: &#34;&#34;;
  display: inline-block;
  vertical-align: middle;
  margin-right: 10px;
  width: 0; 
  height: 0; 

  border-top: 5px solid transparent;
  border-bottom: 5px solid transparent; 
  border-right: 5px solid blue; 
}

/**
*** Seta para DIREITA
**/
.seta-direita:before {
  content: &#34;&#34;;
  display: inline-block;
  vertical-align: middle;
  margin-right: 10px;
  width: 0; 
  height: 0; 

  border-top: 5px solid transparent;
  border-bottom: 5px solid transparent;
  border-left: 5px solid green;
}

/**
*** Seta para CIMA
**/
.seta-cima:before {
  content: &#34;&#34;;
  display: inline-block;
  vertical-align: middle;
  margin-right: 10px;
  width: 0; 
  height: 0; 

  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-bottom: 5px solid black;
}

/**
*** Seta para BAIXO
**/
.seta-baixo:before {
  content: &#34;&#34;;
  display: inline-block;
  vertical-align: middle;
  margin-right: 10px;
  width: 0; 
  height: 0; 

  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-top: 5px solid #f00;
}
&lt;/pre&gt;

&lt;p&gt;Perceba que o que define o tamanho da seta é o tamanho das bordas. A cor também é definida pela borda. Eu usei em um pseudo-elemento, mas você pode muito bem fazer em um span ou qualquer outro elemento vazio. Eu ainda assim sugiro fazer em um pseudo-elemento para evitar elementos inúteis.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modos de Mesclagem em CSS – Blend Mode CSS</title>
      <link>https://tableless.github.io/hugo-public/modos-de-mesclagem-em-css/</link>
      <pubDate>Tue, 16 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/modos-de-mesclagem-em-css/</guid>
      <description>

&lt;p&gt;Uma das funções mais interessantes do Photoshop é a capacidade de alterar imagens em camadas através de diversos modos de mesclagens (blending modes). Utilizando este recurso é possível criar composições de cores sobrepondo imagens em camadas diferentes.&lt;/p&gt;

&lt;p&gt;Infelizmente, ao converter o layout para HTML e CSS, não possuíamos classes ou ferramentas para chegar no mesmo resultado de softwares de edição de imagens. A única saída era achatar as camadas e exportar a imagem no modo padrão. Mas este problema pode acabar! A própria empresa responsável pelo desenvolvimento do Photoshop, a Adobe, propôs uma série de parâmetros para utilizar modos de mesclagem diretamente através de CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; ainda não existe suporte para esta aplicação em nenhum browser. Nenhum mesmo! Isso não significa que não podemos testar! A Adobe fez um fork do Chromium e disponibilizou para &lt;a href=&#34;https://github.com/adobe/webkit/downloads&#34;&gt;download no GitHub&lt;/a&gt; para podermos ver o código funcionando e já existe um &lt;a href=&#34;http://dev.w3.org/fxtf/compositing-1/&#34;&gt;rascunho na W3C&lt;/a&gt; mostrando também exemplos de uso. Mesmo assim é legal conhecer (e aprender a utilizar!) desde agora pois é muito provável que estas especificações façam em breve parte dos novos parâmetros de CSS e sejam aceitas pelas próximas versões dos principais navegadores.&lt;/p&gt;

&lt;h2 id=&#34;o-que-são-os-modos-de-mesclagem&#34;&gt;O que são os Modos de Mesclagem&lt;/h2&gt;

&lt;p&gt;Blending, ou em português mesclagem, é a capacidade de calcular a mistura de cores em duas (ou mais) imagens sobrepostas. Isto ocorre através de dados matemáticos que podem subtrair, adicionar, multiplicar ou dividir o valor das cores ou de seus aspectos como matiz, saturação e luminosidade.&lt;/p&gt;

&lt;p&gt;Quem trabalha com manipulação de imagens já está acostumado com este conceito. Basicamente os softwares editores, como o Photoshop, utilizam imagens em camadas sobrepostas. Estas imagens podem ser misturadas, clareadas, escurecidas, etc para formar uma nova imagem. Os modos de mesclagem controlam como os pixels desta imagem resultante vão ser coloridos.&lt;/p&gt;

&lt;h3 id=&#34;como-fazíamos-até-então-8230&#34;&gt;Como fazíamos até então&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Designers gostam de modos de mesclagem. E não é a toa. Eles são muito úteis para dar efeitos de iluminação ou fazer sombras bacanas nas imagens, mas é impossível reproduzi-los usando apenas CSS. É até difícil, para quem é desenvolvedor, explicar para um designer empolgadinho que ele não pode utilizar aquele efeito bacana na internet. O único jeito, até então, para desenvolver o código de maneira fiel ao protótipo criado era achatar as camadas e exportar a imagem. Esta prática, quando utilizada com abuso, pode prejudicar o desenvolvimento em alguns pontos. A utilização excessiva de imagens pode deixar o layout mais pesado, não é possível dar qualquer tratamento para texto sem perder a marcação HTML (ninguém em 2013 leitor do Tableless ainda acha que deve utilizar imagens no lugar de texto&amp;#8230; certo?!), tirando o fato de que alguns modos de mesclagem simplesmente perdem a funcionalidade em imagens achatadas&amp;#8230; Enfim, o fato é que com esta sugestão é possível mesclar os elementos de seu site criando novos efeitos e indo muito além das inúmeras opções que já temos. Usando o novo parâmetro &lt;strong&gt;blend mode&lt;/strong&gt; conseguimos um resultado 100% fiel ao mock-ups no Photoshop..&lt;/p&gt;

&lt;h3 id=&#34;como-funciona&#34;&gt;Como funciona&lt;/h3&gt;

&lt;p&gt;Em CSS nós temos o parâmetro &amp;#8220;z-index&amp;#8221; que nos permite usar os elementos como camadas, escolhendo os que ficarão por cima e os que estarão por baixo de tudo. Usando os parâmetros &lt;strong&gt;blend-mode&lt;/strong&gt; ou &lt;strong&gt;background-blend-mode&lt;/strong&gt; é possível misturar as cores dos elementos do nosso site. Como usar uma DIV escura junto com uma imagem e dar o efeito de sombreamento, ou clarear elemento sobrepondo-o com um outro de fundo branco.&lt;/p&gt;

&lt;p&gt;Podemos aplicar o modo de mesclagem em qualquer elemento do HTML que possua um preenchimento. Este preenchimento, correspondente a layer inferior no Photoshop, é a &lt;strong&gt;cor base&lt;/strong&gt;. Se o elemento escolhido não estiver sobrepondo outro, considere a cor base o background do site. A &lt;strong&gt;cor de mesclagem&lt;/strong&gt; é a da camada superior. É esta camada que pretendemos misturar. A cor de mesclagem irá se misturar com a cor base formando um novo resultado, que, para fins de explicação, vamos chamar de &lt;strong&gt;cor resultante&lt;/strong&gt;. É esta a cor que vai aparecer no resultado final.&lt;/p&gt;

&lt;p&gt;Este conceito pode ser explicado através de umas &lt;a href=&#34;http://dev.w3.org/fxtf/compositing-1/#blending&#34;&gt;fórmulas matemáticas&lt;/a&gt;, mas não vou entrar neste mérito aqui. O interessante no nosso contexto é saber o que cada modo faz e como aplica-lo no CSS.&lt;/p&gt;

&lt;p&gt;Quer conferir ao vivo? Preparei uma &lt;a href=&#34;http://codepen.io/daniguerrato/pen/jGqrB&#34;&gt;demo completa destes modos de mesclagem no CodePen&lt;/a&gt;. Lembrando que você precisa de um dos browsers especiais citados no inicio do post para visualizar, ok?&lt;/p&gt;

&lt;h3 id=&#34;o-código&#34;&gt;O código&lt;/h3&gt;

&lt;p&gt;Para o meu exemplo, estou considerando como base uma div sólida com a cor azul com o hexadecimal #00c0ff.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38139&#34; alt=&#34;base&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/base.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/base.jpg 660w, uploads/2013/07/base-277x168.jpg 277w, uploads/2013/07/base-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Por padrão, todos os elementos estão no modo de mesclagem &amp;#8220;normal&amp;#8221;, o que significa que ele não irá interagir com elementos das camadas inferiores. Na prática isto quer dizer que o visual é o referente a cor de mesclagem.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38151&#34; alt=&#34;normal&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/normal.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/normal.jpg 660w, uploads/2013/07/normal-277x168.jpg 277w, uploads/2013/07/normal-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para aplicar um modo de mesclagem a sintaxe em CSS é bem simples.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: normal; blend-mode: normal; }&lt;/pre&gt;

&lt;h2 id=&#34;os-modos-de-mesclagem&#34;&gt;Os Modos de Mesclagem&lt;/h2&gt;

&lt;p&gt;Infelizmente não foram todos os modos do Photoshop que foram introduzidos no CSS. Eis aqui uma listinha básica com todos os propostos, a sintaxe em CSS e um resumo geral do seu funcionamento.&lt;/p&gt;

&lt;h3 id=&#34;multiply-multiplicação&#34;&gt;&lt;strong&gt;Multiply&lt;/strong&gt; (Multiplicação)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38150&#34; alt=&#34;multiply&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/multiply.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/multiply.jpg 660w, uploads/2013/07/multiply-277x168.jpg 277w, uploads/2013/07/multiply-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: multiply; blend-mode: multiply; }&lt;/pre&gt;

&lt;p&gt;Este parâmetro multiplica a cor base pela cor de mesclagem. Imagine que você está pintando uma foto com uma caneta marcadora de texto. É este o efeito do multiply! Qualquer cor multiplicada por branco resulta nela mesma. Quando multiplicadas por matizes escuras, as cores ficam progressivamente mais escuras. Quando multiplicada pelo preto, o resultado será sempre o próprio preto. É ótima para fazer efeitos de sombreamento e vinhetas.&lt;/p&gt;

&lt;h3 id=&#34;screen-divisão&#34;&gt;Screen (Divisão)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38154&#34; alt=&#34;screen&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/screen.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/screen.jpg 660w, uploads/2013/07/screen-277x168.jpg 277w, uploads/2013/07/screen-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: screen; blend-mode: screen; }&lt;/pre&gt;

&lt;p&gt;Você pode pensar no screen como o contrário do multiply. Este parâmetro multiplica o inverso das cores de mesclagem e de base. A cor resultante é sempre mais clara. Quando dividido por preto a cor permanece inalterada e quando dividido por branco o resultado é o próprio branco.&lt;/p&gt;

&lt;h3 id=&#34;overlay-sobrepor&#34;&gt;Overlay (Sobrepor)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38152&#34; alt=&#34;overlay&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/overlay.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/overlay.jpg 660w, uploads/2013/07/overlay-277x168.jpg 277w, uploads/2013/07/overlay-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: overlay; blend-mode: overlay; }&lt;/pre&gt;

&lt;p&gt;Reticula as cores. A cor de base não é substituída, clareada ou escurecida, mas sim misturada com a cor de mesclagem. Por exemplo, se você misturar Azul e Verde, resultará no amarelo.&lt;/p&gt;

&lt;h3 id=&#34;darken-escurecer&#34;&gt;Darken (Escurecer)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38143&#34; alt=&#34;darken&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/darken.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/darken.jpg 660w, uploads/2013/07/darken-277x168.jpg 277w, uploads/2013/07/darken-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: darken; blend-mode: darken; }&lt;/pre&gt;

&lt;p&gt;Examina as cores dos elementos sobrepostos e seleciona a cor mais escura como a resultante. Se você tem um elemento escuro (como um logotipo monocromático, por exemplo) e está trabalhando sobre um fundo claro, você pode usar o Darken para retirar da imagem todos os pixels claros e deixar apenas os escuros inalterados.&lt;/p&gt;

&lt;h3 id=&#34;lighten-clarear&#34;&gt;Lighten (Clarear)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38148&#34; alt=&#34;lighten&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/lighten.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/lighten.jpg 660w, uploads/2013/07/lighten-277x168.jpg 277w, uploads/2013/07/lighten-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: lighten; blend-mode: lighten; }&lt;/pre&gt;

&lt;p&gt;O oposto do Darken. Examina os elementos sobrepostos e o resultante é a tonalidade mais clara. Os pixels mais escuros que a cor de mesclagem são substituídos.&lt;/p&gt;

&lt;h3 id=&#34;color-dodge-subexposição-de-cor&#34;&gt;Color-Dodge (Subexposição de cor)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38141&#34; alt=&#34;color-dodge&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/color-dodge.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/color-dodge.jpg 660w, uploads/2013/07/color-dodge-277x168.jpg 277w, uploads/2013/07/color-dodge-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: color-dodge; blend-mode: color-dodge; }&lt;/pre&gt;

&lt;p&gt;Clareia a cor de base para refletir a cor de mesclagem, diminuindo o contraste entre elas. A mesclagem com o preto não altera a imagem.&lt;/p&gt;

&lt;h3 id=&#34;color-burn-superexposição-de-cor&#34;&gt;Color-Burn (Superexposição de cor)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38140&#34; alt=&#34;color-burn&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/color-burn.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/color-burn.jpg 660w, uploads/2013/07/color-burn-277x168.jpg 277w, uploads/2013/07/color-burn-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: color-burn; blend-mode: color-burn; }&lt;/pre&gt;

&lt;p&gt;Como o nome indica, faz o contrário da subexposição de cor. Este parâmetro escurece a cor de base para refletir a cor de mesclagem, aumentando o contraste entre as duas. A mesclagem com o branco não altera a imagem.&lt;/p&gt;

&lt;h3 id=&#34;hard-light-luz-direta&#34;&gt;Hard-Light (Luz Direta)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38146&#34; alt=&#34;hard-light&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/hard-light.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/hard-light.jpg 660w, uploads/2013/07/hard-light-277x168.jpg 277w, uploads/2013/07/hard-light-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: hard-light; blend-mode: hard-light; }&lt;/pre&gt;

&lt;p&gt;O efeito Hard-Light é semelhante a iluminar o elemento com uma luz direta. Se a cor do elemento superior for mais clara que 50% de cinza, ele irá iluminar a cor base. Se a cor de mesclagem for próxima do preto (50% de cinza &amp;#8220;para baixo&amp;#8221;), a cor base será escurecida. Utilizar preto ou branco puro como cores de mesclagem produz respectivamente preto ou branco puro como cores resultantes.&lt;/p&gt;

&lt;h3 id=&#34;soft-light-luz-indireta&#34;&gt;Soft-Light (Luz Indireta)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38155&#34; alt=&#34;soft-light&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/soft-light.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/soft-light.jpg 660w, uploads/2013/07/soft-light-277x168.jpg 277w, uploads/2013/07/soft-light-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: soft-light; blend-mode: soft-light; }&lt;/pre&gt;

&lt;p&gt;É o efeito de aplicar uma iluminação difusa na imagem, sendo que a cor de mesclagem é a fonte da luz. Se esta cor for mais clara que 50% de cinza, a cor resultante clareará (subexposição). Se a cor de mesclagem for mais escura do que 50% de cinza, a imagem ficará mais escura (superexposição). É ótimo para fazer leves realces ou sombras no elemento.&lt;/p&gt;

&lt;h3 id=&#34;difference-diferença&#34;&gt;Difference (Diferença)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38144&#34; alt=&#34;difference&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/difference.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/difference.jpg 660w, uploads/2013/07/difference-277x168.jpg 277w, uploads/2013/07/difference-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: difference; blend-mode: difference; }&lt;/pre&gt;

&lt;p&gt;Retira os pigmentos da cor do canal que tiver mais brilho e subtrai pelo outro. Por exemplo: Retirar o amarelo do verde resultará em azul. Qualquer cor mesclada com branco resultará em preto (branco é a presença de todas as cores). Agora, quando misturar com o preto, o resultado é sempre a própria cor base (preto é a ausência de cor).&lt;/p&gt;

&lt;h3 id=&#34;exclusion-exclusão&#34;&gt;Exclusion (Exclusão)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38145&#34; alt=&#34;exclusion&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/exclusion.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/exclusion.jpg 660w, uploads/2013/07/exclusion-277x168.jpg 277w, uploads/2013/07/exclusion-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: exclusion; blend-mode: exclusion; }&lt;/pre&gt;

&lt;p&gt;Funciona de maneira semelhante ao modo de mesclagem Difference, mas com menor contraste.&lt;/p&gt;

&lt;h3 id=&#34;saturation-saturation&#34;&gt;Saturation (Saturation)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38153&#34; alt=&#34;saturation&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/saturation.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/saturation.jpg 660w, uploads/2013/07/saturation-277x168.jpg 277w, uploads/2013/07/saturation-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: saturation; blend-mode: saturation; }&lt;/pre&gt;

&lt;p&gt;A cor resultante possuirá o valor de matiz e luminosidade da base, com a saturação da cor de mesclagem. Quando aplicada em áreas cinzas (saturação 0), não produz nenhum efeito.&lt;/p&gt;

&lt;h3 id=&#34;color-cor&#34;&gt;Color (Cor)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38142&#34; alt=&#34;color&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/color.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/color.jpg 660w, uploads/2013/07/color-277x168.jpg 277w, uploads/2013/07/color-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: color; blend-mode: color; }&lt;/pre&gt;

&lt;p&gt;Preserva os níveis de luminosidade da cor base, mesclando com a matiz e a saturação da cor de mesclagem. Como os níveis de cinza são preservadas é ótimo para colorir imagens monocromáticas.&lt;/p&gt;

&lt;h3 id=&#34;luminosity-luminosidade&#34;&gt;Luminosity (Luminosidade)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38149&#34; alt=&#34;luminosity&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/luminosity.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/luminosity.jpg 660w, uploads/2013/07/luminosity-277x168.jpg 277w, uploads/2013/07/luminosity-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: luminosity; blend-mode: luminosity; }&lt;/pre&gt;

&lt;p&gt;A cor resultante possui a luminosidade da cor de mesclagem com a matiz e saturação da base. Pode ser considerado o contrário do Color, já que substitui os tons de cinza mas preserva as cores bases.&lt;/p&gt;

&lt;h3 id=&#34;hue-matiz&#34;&gt;Hue (Matiz)&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38147&#34; alt=&#34;hue&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/hue.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/07/hue.jpg 660w, uploads/2013/07/hue-277x168.jpg 277w, uploads/2013/07/hue-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;* { -webkit-blend-mode: hue; blend-mode: hue; }&lt;/pre&gt;

&lt;p&gt;A cor resultante possui a matiz da cor de mesclagem com a luminosidade e saturação da base. É ótimo para alterar cores de imagens sem deixa-las mais claras ou escuras.&lt;/p&gt;

&lt;h3 id=&#34;multiplos-backgrounds&#34;&gt;Multiplos backgrounds&lt;/h3&gt;

&lt;p&gt;Você pode também utilizar os modos de mesclagens no background, em Divs com múltiplas imagens de fundo. A sintaxe em CSS é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.suaclasse { 
    background: url(img/bg1.jpg), url(img/bg2.jpg);
    background-repeat: repeat-x, no-repeat; 
    background-size: auto, cover;
    background-position: center bottom, left top;
    background-blend-mode: multiply, normal;
}&lt;/pre&gt;

&lt;h3 id=&#34;propriedade-knock-out&#34;&gt;Propriedade Knock-Out&lt;/h3&gt;

&lt;p&gt;Esta propriedade é especialmente útil em grupos de elementos. Quando usamos o parâmetro Knock-Out, utilizamos os modos de mesclagem apenas com os compostos com a primeira camada base (backdrop) e a cor de mesclagem, ignorando a &amp;#8220;pilha&amp;#8221; de camadas sobrepostas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.suaclasse {
    knock-out: knock-out;
}&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Como dito anteriormente, os Modos de Mesclagem em CSS ainda são apenas um rascunho inicial. Não há suporte em nenhum navegador para este parâmetro, por isso, por enquanto, não é possível utilizar em um produto final.  Mesmo assim este é um assunto que vale a pena ser estudado já que pode revolucionar a maneira como desenvolvemos layouts para a web.&lt;/p&gt;

&lt;p&gt;Já é possível fazer experiências dentro do &lt;a href=&#34;https://github.com/adobe/webkit/downloads&#34;&gt;Fork do Chromium disponibilizado pela própria Adobe&lt;/a&gt;, no &lt;a href=&#34;http://www.google.ca/intl/en/chrome/browser/canary.html&#34;&gt;Chrome Canary&lt;/a&gt; e no &lt;a href=&#34;http://nightly.webkit.org/builds/trunk/mac/1&#34;&gt;Webkit Nightly Build&lt;/a&gt;. No Canary Chrome você deve habilitar os itens experimentais do webkit, digitando &amp;#8220;chrome://flags&amp;#8221; na barra de endereço, apertando &amp;#8220;Enter&amp;#8221; e dando &amp;#8220;Enable&amp;#8221; na opção &amp;#8220;Experimental Webkit Features&amp;#8221;.&lt;/p&gt;

&lt;h4 id=&#34;links-úteis&#34;&gt;Links Úteis&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/compositing/&#34;&gt;Documentação na W3C&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://demosthenes.info/blog/707/PhotoShop-In-The-Browser-Understanding-CSS-Blend-Modes?utm_source=CSS-Weekly&amp;amp;utm_campaign=Issue-66&amp;amp;utm_medium=web&#34;&gt;PhotoShop In The Browser: Understanding CSS Blend Modes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://adobe.github.io/web-platform/demos/compositing/blend-photogallery/index.html&#34;&gt;A Modern Look at Classic Blend Modes Changing How Elements Relate Visually&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/adobe/webkit/downloads&#34;&gt;Fork do Chromium na Adobe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.google.ca/intl/en/chrome/browser/canary.html&#34;&gt;Chrome Canary&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Transition e CSS Animation</title>
      <link>https://tableless.github.io/hugo-public/transition-e-animation/</link>
      <pubDate>Fri, 19 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/transition-e-animation/</guid>
      <description>

&lt;h2 id=&#34;transition-prazer&#34;&gt;Transition. Prazer!&lt;/h2&gt;

&lt;blockquote cite=&#34;http://www.w3schools.com/css3/css3_transitions.asp&#34;&gt;
  &lt;p&gt;
    &amp;#8220;Com CSS3, podemos adicionar um efeito quando o navegador troca de um estilo para outro, sem usar animações em Flash ou JavaScript.&amp;#8221; &amp;#8211; w3schools
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mostrar um feedback ao usuário quando ele passar o mouse sobre um link (&lt;em&gt;:hover&lt;/em&gt;) ou quando ele der foco em um campo input (&lt;em&gt;:focus&lt;/em&gt;) são boas práticas. Há muitos jeitos de fazermos isso: mudando a cor do texto, tirando o &lt;em&gt;underline da palavra&lt;/em&gt;, alterando a borda do &lt;em&gt;input&lt;/em&gt; que recebeu o foco ou até alterando a cor de &lt;em&gt;background&lt;/em&gt; do elemento. (&lt;a href=&#34;http://www.smashingmagazine.com/2010/02/13/the-definitive-guide-to-styling-web-links/&#34;&gt;Esse&lt;/a&gt; artigo da &lt;em&gt;Smashing Magazine&lt;/em&gt; trata muito bem a questão da estilização de links).&lt;/p&gt;

&lt;p&gt;Normalmente fazemos isso alterando o valor de uma propriedade &lt;em&gt;CSS&lt;/em&gt; no estado &lt;em&gt;:hover&lt;/em&gt; ou &lt;em&gt;:focus&lt;/em&gt; do elemento. Quando fazemos isso, o resultado é instantâneo. Melhor dizendo, a alteração ocorre imediatamente ao usuário fazer a ação (seja passar o mouse sobre o elemento ou este ganhar foco). A alteração ocorre de forma brusca, do valor antigo da propriedade para o novo valor. Por exemplo, quando temos um elemento com borda colorida, e utilizamos o estado &lt;em&gt;:hover&lt;/em&gt; para alterarmos a cor da borda, essa transição entre uma cor e outra acontece imediatamente assim que você passa o mouse em cima do elemento.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { 
   display: block;
   background-color: #666;
   width: 100px;
   height: 40px;
   border: solid 5px red;
}

div:hover { border: solid 5px black; }&lt;/pre&gt;

&lt;p&gt;É aí que entra a &lt;strong&gt;transition&lt;/strong&gt; do &lt;em&gt;CSS3&lt;/em&gt;. Ela analisa a mudança de valor entre a propriedade e faz com que essa transição, ao invés de ocorrer de forma brusca, ocorra suavemente em um tempo determinado.&lt;/p&gt;

&lt;blockquote cite=&#34;http://www.w3.org/TR/css3-transitions/&#34;&gt;
  &lt;p&gt;
    &amp;#8220;CSS transitions permite que as mudanças nos valores das propriedades CSS ocorram suavemente sobre uma duração especificada.&amp;#8221; &amp;#8211; w3c
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nesse &lt;a href=&#34;http://codepen.io/raphaelfabeni/full/Fkbej&#34;&gt;exemplo&lt;/a&gt;, passe o mouse sobre o logo do Tableless abaixo e veja um exemplo da propriedade &lt;em&gt;transition&lt;/em&gt; em conjunto com a propriedade &lt;em&gt;transform&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tá-legal-entendi-mas-como-faz&#34;&gt;Tá legal, entendi. Mas como faz?&lt;/h3&gt;

&lt;p&gt;A propriedade transition possui quatro propriedades para você configurar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;transition-property&lt;/em&gt;*,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;transition-duration&lt;/em&gt;*,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;transition-timing-function&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;e &lt;em&gt;transition-delay&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;* propriedades obrigatórias na declaração. As demais caso omitidas, assumem seu valor &lt;i&gt;default&lt;/i&gt;.&lt;/small&gt; &lt;strong&gt;transition-property&lt;/strong&gt;: Nome da propriedade &lt;em&gt;CSS&lt;/em&gt; sobre a qual o efeito da transição vai ser aplicado. É obrigatória na declaração pois caso seja omitida, não existirá uma propriedade para se aplicar o efeito da transição. É possível ainda aplicar uma mesma transição para todas as propriedades &lt;em&gt;CSS&lt;/em&gt; do elemento, basta colocar o valor &lt;em&gt;all&lt;/em&gt;. &lt;a href=&#34;http://www.w3.org/TR/css3-transitions/#animatable-properties-&#34;&gt;Aqui&lt;/a&gt; você encontra uma tabela com todas as propriedades que suportam &lt;em&gt;transition&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;transition-property: border-color;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;transition-duration&lt;/strong&gt;: Duração do efeito em segundos (o padrão é 0). Também é obrigatória na declaração pois, se omitida, assume seu valor &lt;em&gt;default&lt;/em&gt; que é zero e a transição não vai ter efeito.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;transition-duration: 1s;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;transition-timing-function&lt;/strong&gt;: Forma como a transição progride no tempo (o padrão é &lt;em&gt;ease&lt;/em&gt;). Falando de um jeito mais fácil, é como se comporta o ritmo da transição durante o efeito. Pode ser usado de duas maneiras: uma é utilizando alguns valores já pré-definidos que são:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;linear&lt;/em&gt;, &lt;em&gt;ease&lt;/em&gt;, &lt;em&gt;ease-in&lt;/em&gt;, &lt;em&gt;ease-out&lt;/em&gt; e &lt;em&gt;ease-in-out&lt;/em&gt;;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;transition-timing-function: linear;&lt;/pre&gt;

&lt;p&gt;&amp;#8230;e a outra é definindo uma função customizada, especificando quatro coordenadas para definir a &lt;em&gt;cubic bezier curve&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;transition-timing-function: cubic-bezier(0.005, 0.625, 0.365, 0.0840);&lt;/pre&gt;

&lt;p&gt;Esse &lt;a href=&#34;http://matthewlein.com/ceaser/&#34;&gt;site&lt;/a&gt; ajuda e muito. Tanto para entender o funcionamento da cubic bezier, quanto para customizar a sua própria transição.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;transition-delay&lt;/strong&gt;: Define a partir de quanto tempo (em segundos) o efeito da transição vai se iniciar (o padrão é 0).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;transition-delay: 0.1s;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Passe&lt;/strong&gt; o mouse sobre o retângulo cinza no exemplo abaixo para ver a &lt;em&gt;transition&lt;/em&gt; em ação:&lt;/p&gt;

&lt;p&gt;*Nos exemplos a seguir, para facilitar a leitura, não utilizei prefixos. Mas, recomendo que dêem uma olhada no &lt;a href=&#34;http://caniuse.com/css-transitions&#34;&gt;Can I Use&lt;/a&gt; para usar os prefixos correspondentes para cada browser.&lt;/p&gt;

&lt;pre class=&#34;codepen&#34;&gt;&lt;/pre&gt;

&lt;p&gt;No exemplo acima, a propriedade que recebeu o efeito da &lt;em&gt;transição&lt;/em&gt; é a &lt;em&gt;border-color&lt;/em&gt;, a &lt;em&gt;duração&lt;/em&gt; do efeito é de &lt;em&gt;1 segundo&lt;/em&gt;, o &lt;em&gt;efeito&lt;/em&gt; (ou ritmo) é &lt;em&gt;linear&lt;/em&gt; e o &lt;em&gt;delay&lt;/em&gt; para a transição se iniciar é de &lt;em&gt;0.1 segundo&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;escrevendo-menos-8230&#34;&gt;Escrevendo menos&amp;#8230;&lt;/h3&gt;

&lt;p&gt;É possível encurtar a sintaxe em um shortcode bem simples. Basta declarar a propriedade &lt;em&gt;transition&lt;/em&gt; que ela agrupa as quatro propriedades específicas que vimos acima. As palavras mágicas e a ordem são as seguintes:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { transition: |property| |duration| |timing-function| |delay|; }&lt;/pre&gt;

&lt;p&gt;O exemplo visto acima ficaria dessa maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { transition: border-color 1s linear 0.1s; }&lt;/pre&gt;

&lt;p&gt;Um outro exemplo, agora adicionando o efeito da transição na &lt;em&gt;opacidade&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;codepen&#34;&gt;&lt;/pre&gt;

&lt;p&gt;No exemplo acima, se olharmos a aba do &lt;em&gt;CSS&lt;/em&gt; identificamos a seguinte chamada:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div &amp;gt; a {
   display: block;
   transition: opacity 0.5s;
}&lt;/pre&gt;

&lt;p&gt;Podemos notar que as propriedades &lt;em&gt;timing-function&lt;/em&gt; e &lt;em&gt;delay&lt;/em&gt; foram omitidas. Com isso, elas assumem seus valores &lt;em&gt;default&lt;/em&gt; que são &lt;em&gt;ease&lt;/em&gt; e __ respectivamente.&lt;/p&gt;

&lt;h3 id=&#34;e-mais-de-uma-propriedade-tem-como&#34;&gt;E mais de uma propriedade.. tem como?&lt;/h3&gt;

&lt;p&gt;É possível aplicar transições diferentes para mais de uma propriedade em um mesmo elemento. Para isso é só você separar cada bloco de declaração de efeito com vírgulas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { transition: opacity 0.5s, padding 0.25s; }&lt;/pre&gt;

&lt;p&gt;No código acima definimos duas transições:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a primeira com o efeito da transição aplicado na opacidade, que já havia sido configurada no exemplo anterior;&lt;/li&gt;
&lt;li&gt;a segunda que define que a propriedade a receber o efeito da transição é o &lt;em&gt;padding&lt;/em&gt;, a &lt;em&gt;duração&lt;/em&gt; vai ser de &lt;em&gt;0.25 segundos&lt;/em&gt;, o &lt;em&gt;ritmo&lt;/em&gt; como está omitido assume seu valor &lt;em&gt;default&lt;/em&gt; que é &lt;em&gt;ease&lt;/em&gt; e o &lt;em&gt;delay&lt;/em&gt;, como também está omitido, assume seu valor &lt;em&gt;default&lt;/em&gt; que é __.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;codepen&#34;&gt;&lt;/pre&gt;

&lt;p&gt;É possível ainda definir uma transição padrão para todas as propriedades de um elemento:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { transition: all 1s linear; }&lt;/pre&gt;

&lt;p&gt;No caso, definimos o valor &lt;em&gt;all&lt;/em&gt; para a &lt;em&gt;property&lt;/em&gt;, o que significa que &lt;strong&gt;todas&lt;/strong&gt; as transições do elemento terão a &lt;em&gt;duração&lt;/em&gt; de &lt;em&gt;1 segundo&lt;/em&gt;, o &lt;em&gt;ritmo&lt;/em&gt; será &lt;em&gt;linear&lt;/em&gt; e o &lt;em&gt;delay&lt;/em&gt; será __.&lt;/p&gt;

&lt;h3 id=&#34;suporte&#34;&gt;Suporte&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IE&lt;/strong&gt; 10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FF&lt;/strong&gt; 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chrome&lt;/strong&gt; 4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Safari&lt;/strong&gt; 3.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opera&lt;/strong&gt; 10.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;Fonte: &lt;a href=&#34;http://caniuse.com/css-transitions&#34;&gt;Can I Use&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&#34;animation&#34;&gt;Animation&lt;/h2&gt;

&lt;blockquote cite=&#34;http://www.w3schools.com/css3/css3_animations.asp&#34;&gt;
  &lt;p&gt;
    &amp;#8220;Com CSS3, conseguimos criar animações que podem substituir imagens animadas, animações em Flash e JavaScript em muitas páginas web&amp;#8221; &amp;#8211; w3schools
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;a-regra-dos-keyframes&#34;&gt;A regra dos keyframes&lt;/h3&gt;

&lt;p&gt;Indo direto ao ponto: É aonde as animações são criadas.&lt;/p&gt;

&lt;p&gt;Um keyframe descreve como o elemento que vai ser animado, deve ser renderizado em uma determinada &lt;strong&gt;fase&lt;/strong&gt;, durante a sequência da animação.&lt;/p&gt;

&lt;p&gt;Ou seja, cada keyframe contém uma ou mais propriedades CSS que vão ser aplicadas no elemento que será ser animado e, a animação se encarrega de mudar de um keyframe para outro, aplicando a transição entre as mudanças de CSS.&lt;/p&gt;

&lt;p&gt;A sintaxe para a criação de keyframes é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@keyframes nomedaanimacao {
   seletores-keyframe { estilo css para esse determinado keyframe; }
}&lt;/pre&gt;

&lt;p&gt;Existem duas maneiras para se criar nossos amigos keyframes:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@keyframes animacao {
   from {
      width: 100px; 
      background: black;
   }
   to { 
     background: yellow;
      width: 200px;
   }
}&lt;/pre&gt;

&lt;p&gt;É a forma mais básica, onde definimos um início e um fim para a animação. No exemplo acima, &lt;em&gt;from&lt;/em&gt; é equivalente ao início da animação (&lt;em&gt;0%&lt;/em&gt;) e &lt;em&gt;to&lt;/em&gt; é equivalente ao final da animação (&lt;em&gt;100%&lt;/em&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@keyframes animacaoBolada {
   0%   { 
      background: black;
      width: 100px;
   }
   25%  { background: green; }
   50%  { background: blue; }
   75%  { background: red; }
   100% { 
      background: yellow;
      width: 200px;
   }
}&lt;/pre&gt;

&lt;p&gt;Já essa é a maneira que temos maior controle da animação. Para isso, utilizamos porcentagem para definir os &lt;em&gt;keyframes&lt;/em&gt;. No código acima, a animação possui 5 passos e, a &lt;strong&gt;porcentagem é relativa à duração da animação&lt;/strong&gt; que vai ser definida posteriormente.&lt;/p&gt;

&lt;p&gt;Com a animação criada nos &lt;em&gt;keyframes&lt;/em&gt;, precisamos vinculá-la a algum seletor, &lt;strong&gt;caso contrário a animação não terá nenhum efeito&lt;/strong&gt;. Para fazer isso, temos que declarar pelo menos duas propriedades que são obrigatórias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;o nome da animação (igual ao especificado nos &lt;em&gt;keyframes&lt;/em&gt;);&lt;/li&gt;
&lt;li&gt;a duração da animação (se não for declarada, a animação não se inicia pois o valor padrão é 0).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Confira no &lt;a href=&#34;http://cdpn.io/eCGhx&#34;&gt;exemplo&lt;/a&gt; as animações com os dois modelos de &lt;em&gt;keyframes&lt;/em&gt; citados acima:&lt;/p&gt;

&lt;p&gt;Mas a &lt;em&gt;animation&lt;/em&gt; do CSS3 possui mais propriedades. Vamos conhecer as outras&amp;#8230;.&lt;/p&gt;

&lt;h3 id=&#34;as-propriedades&#34;&gt;As propriedades&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;animation-name&lt;/strong&gt;: Nome da animação especificada nos &lt;em&gt;@keyframes&lt;/em&gt;;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-name: animacaoBolada;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-duration&lt;/strong&gt;: Quanto tempo, em segundos ou milisegundos, durará um ciclo da animação (o padrão é 0).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-duration: 5s;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-timing-function&lt;/strong&gt;: Forma como a animação progride no tempo (o padrão é &lt;em&gt;ease&lt;/em&gt;). Do mesmo modo que a propriedade &lt;em&gt;transition&lt;/em&gt;, pode ser usada de duas maneiras: uma é utilizando alguns valores já pré-definidos que são:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;linear&lt;/em&gt;, &lt;em&gt;ease&lt;/em&gt;, &lt;em&gt;ease-in&lt;/em&gt;, &lt;em&gt;ease-out&lt;/em&gt; e &lt;em&gt;ease-in-out&lt;/em&gt;;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-timing-function: ease;&lt;/pre&gt;

&lt;p&gt;&amp;#8230; e a outra é definindo uma função customizada, especificando quatro coordenadas para definir a &lt;em&gt;cubic bezier curve&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-timing-function: cubic-bezier(0.005, 0.0625, 0.365, 0.0840);&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-delay&lt;/strong&gt;: Define a partir de quanto tempo a animação vai se iniciar (o padrão é 0).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-delay: 0.2s;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-iteration-count&lt;/strong&gt;: Determina o número de vezes que a animação vai se repetir (o padrão é 1). Podemos deixar a animação repetindo infinitamente, basta especificar o valor &lt;em&gt;infinite&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-iteration-count: infinite;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-direction&lt;/strong&gt;: Especifica se ao final da animação, ela deve reiniciar seu fluxo normalmente (&lt;em&gt;normal&lt;/em&gt;), que é o padrão, ou voltar no sentido inverso (&lt;em&gt;reverse&lt;/em&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-direction: reverse;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-play-state&lt;/strong&gt;: Define se a animação está rodando (&lt;em&gt;running&lt;/em&gt;), que é o padrão, ou pausada (&lt;em&gt;paused&lt;/em&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-play-state: running;&lt;/pre&gt;

&lt;h3 id=&#34;montando-o-bolo-8230&#34;&gt;Montando o bolo&amp;#8230;&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
   animation-name: animacaoBolada;
   animation-duration: 5s;
   animation-timing-function: ease;
   animation-delay: 1s;
   animation-iteration-count: infinite;
   animation-direction: alternate;
   animation-play-state: running;
}&lt;/pre&gt;

&lt;h3 id=&#34;escrevendo-menos-8230-1&#34;&gt;Escrevendo menos&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Da mesma forma que a propriedade &lt;em&gt;transition&lt;/em&gt;, também é possível encurtar a sintaxe em um &lt;em&gt;shortcode&lt;/em&gt;. Basta declarar a propriedade &lt;em&gt;animation&lt;/em&gt; que ela agrupa todas as propriedades que vimos acima. As palavras mágicas e a ordem são as seguintes:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
   |name| |duration| |timing-function| |delay| |iteration-count| |direction| |play-state|;
}&lt;/pre&gt;

&lt;p&gt;O &lt;em&gt;bolo&lt;/em&gt; acima ficaria dessa maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { animation: animacaoBolada 5s ease 1s infinite alternate; }&lt;/pre&gt;

&lt;p&gt;Mais dois exemplos (&lt;a href=&#34;http://cdpn.io/qHkgJ&#34;&gt;1&lt;/a&gt; e &lt;a href=&#34;http://cdpn.io/csubG&#34;&gt;2&lt;/a&gt;) em conjunto com a propriedade &lt;em&gt;transform&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;suporte-1&#34;&gt;Suporte&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IE&lt;/strong&gt; 10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FF&lt;/strong&gt; 5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chrome&lt;/strong&gt; 4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Safari&lt;/strong&gt; 4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opera&lt;/strong&gt; 12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;Fonte: &lt;a href=&#34;http://caniuse.com/css-animation&#34;&gt;Can I Use&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entendendend a regra @viewport do HTML</title>
      <link>https://tableless.github.io/hugo-public/regra-viewport/</link>
      <pubDate>Mon, 04 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/regra-viewport/</guid>
      <description>&lt;p&gt;Faz algum tempo que podemos manipular o viewport dos browsers para podermos entregar um website mais adequado e confortável para os usuários. Essa manipulação era feita diretamente via uma metatag no head do documento, algo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1, maximum-scale=1.0&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Isso é necessário por que você tem uma resolução gigante em aparelhos com a tela &amp;#8220;relativamente&amp;#8221; pequena, com 320&amp;#215;480. Lembre-se que a resolução é uma coisa, o tamanho da tela é outra. Um iPhone tem uma resolução gigante (para mobiles, claro), de algo em torno de 900&amp;#215;640, mas o tamanho da tela é de 320&amp;#215;480. É por isso que quando você abre um website sem manipulação de viewport, ele aparece miniaturizado. Por que embora você esteja vendo o site em uma tela pequena, o site aparece como se estivesse numa resolução alta.&lt;/p&gt;

&lt;p&gt;Quando manipulamos o viewport do browser, nós &amp;#8220;diminuímos&amp;#8221; essa resolução. Na linha do exemplo acima eu diminui a resolução do viewport do browser mobile para ter exatamente a mesma largura e altura da tela do aparelho. Logo, em vez de uma resolução de 900&amp;#215;640, você verá o site em um resolução de 320&amp;#215;480, no caso do iPhones 4S que mencionamos logo acima.&lt;/p&gt;

&lt;p&gt;Assim fica bem mais fácil planejar um website para mobiles. O usuário não vai precisar ficar fazendo zoom ou gestos para procurar informações no site. Você planejará o design para que caiba nesse limite.&lt;/p&gt;

&lt;p&gt;O pessoal do W3C está expandindo essa ideia e agora nós podemos aplicar a regra Viewport dentro de um código CSS em vez de ter que colocá-lo sempre no head.&lt;/p&gt;

&lt;p&gt;A sintaxe é simples. Veja um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@viewport {
  width: device-width;
  zoom: 1;
}
&lt;/pre&gt;

&lt;p&gt;Depois de determinar o viewport, você pode definir suas media queries normalmente, também diretamente de dentro do seu código CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@viewport {
  width: device-width;
  zoom: 1;
}

@media screen and (min-width: 400px) {
  div { color: red; }
}

@media screen and (max-width: 400px) {
  div { color: green; }
}
&lt;/pre&gt;

&lt;p&gt;Lembrando que as media queries podem ser também definidas vida tag link, no head, assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;screen.css&#34; media=&#34;screen and (min-width: 400px)&#34; /&gt;

&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;mobile.css&#34; media=&#34;screen and (max-width: 400px)&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;Assim você pode chamar apenas um CSS e a partir dele distribuir seu código para as telas determinadas, tipo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@viewport {
  width: device-width;
  zoom: 1;
}

@media screen and (min-width: 400px) {
  @import url(desktop.css);
}

@media screen and (max-width: 400px) {
  @import url(mobile.css);
}

&lt;/pre&gt;

&lt;p&gt;Toda essa informação faz parte da documentação que o W3C mantém chamda &lt;a href=&#34;http://dev.w3.org/csswg/css-device-adapt/&#34;&gt;CSS Device Adaptation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;@viewport&lt;/strong&gt; é suportado hoje pelo Internet Explorer 10 e pelo Opera, ainda sob seus respectivos prefixos. Mesmo assim, não demora muito para que os browsers Webkit suportem também, já que a ideia da manipulação de viewport originou-se na Apple com a vinda do iPhone.&lt;/p&gt;

&lt;p&gt;Mais informações? Leia &lt;a href=&#34;http://dev.w3.org/csswg/css-device-adapt/&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Estruturação de front-end – Parte 1: Preprocessadores, Framewoks e Bibliotecas</title>
      <link>https://tableless.github.io/hugo-public/estruturacao-de-client-side-preprocessadores-framewoks-e-bibliotecas-parte-1/</link>
      <pubDate>Wed, 09 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/estruturacao-de-client-side-preprocessadores-framewoks-e-bibliotecas-parte-1/</guid>
      <description>

&lt;p&gt;Existem três categorias de &amp;#8220;ferramentas&amp;#8221; que nos ajudam a desenvolver um projeto client-side: Preprocessadores, Frameworks e Bibliotecas.&lt;/p&gt;

&lt;h3 id=&#34;preprocessadores&#34;&gt;Preprocessadores&lt;/h3&gt;

&lt;p&gt;Preprocessadores são ferramentas onde você escreve CSS de uma determinada forma, modificando sua sintaxe, fazendo com que na hora de sua utilização o código CSS precise ser préprocessado para que o código escrito seja transformado em código CSS puro e assim então os browsers consigam entender.&lt;/p&gt;

&lt;p&gt;Existem muitos preprocessadores no mercado como &lt;a href=&#34;http://lesscss.org/&#34;&gt;Less&lt;/a&gt;, &lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt;, &lt;a href=&#34;http://turbine.peterkroener.de/index.php&#34;&gt;Turbine&lt;/a&gt;, &lt;a href=&#34;http://sourceforge.net/projects/switchcss/&#34;&gt;Switch CSS&lt;/a&gt; e outros.&lt;/p&gt;

&lt;p&gt;Particularmente eu não gosto de usar preprocessadores. Para começar é necessário que você aprenda a linguagem de cada um e a ideia de que seu CSS precisa ser compilado para poder funcionar não me agrada muito. O CSS é simples demais para complicarmos desse jeito. Entretanto, há uma série de coisas interessantes que podemos fazer com os preprocessadores como variáveis, funções, operações e etc que demorarão um pouco (ou não) para fazerem parte do core definitivo da linguagem. Mesmo assim, pessoalmente, para a maioria dos projetos, não vale a pena.&lt;/p&gt;

&lt;h3 id=&#34;frameworks&#34;&gt;Frameworks&lt;/h3&gt;

&lt;p&gt;Frameworks são diferentes de preprocessadores mas são muito parecidos com Bibliotecas. Um Framework disponibiliza para o dev um conjunto de estilos e estruturas prontas para a utilização em projetos de forma escalável e uniforme. Normalmente os frameworks te dão uma coleção de componentes para que sejam usadas por todo o projeto. Esses componentes na maioria das vezes já vem com estilos visuais aplicados, bem como a estrutura. Veja por exemplo o &lt;a href=&#34;http://twitter.github.com/bootstrap&#34;&gt;Bootstrap&lt;/a&gt; ou o &lt;a href=&#34;http://blueprintcss.org&#34;&gt;Blueprint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Com o Bootstrap você consegue, rapidamente, fazer um protótipo simples ou uma estrutura básica de sistema. É o preferido dos programadores. Os elementos visuais já foram criados e desenhados. Talvez não seja uma boa ideia você utilizar um framework em um projeto cujo design já esteja aprovado. Você teria muito retrabalho para &amp;#8220;zerar&amp;#8221; o estilo visual de cada elemento para depois reconstruí-lo utilizando o seu design.&lt;/p&gt;

&lt;p&gt;É muito importante que o uso de um framework CSS/Javascript seja aprovado no início de um grande projeto. Mesmo que você planeje criar um framework do zero, específico para seu projeto. O que na maioria das vezes não vale a pena.&lt;/p&gt;

&lt;h3 id=&#34;bibliotecas&#34;&gt;Bibliotecas&lt;/h3&gt;

&lt;p&gt;Bibliotecas CSS geralmente não modificam o visual como os Frameworks fazem, mas eles disponibilizam uma coleção de classes, reutilizáveis e o melhor, combinatórias, para que se adeque a diversos cenários do seu projeto. Como essas classes não estão ligadas a nenhuma formatação visual, você consegue combinar sem grandes problemas com suas classes e IDs, modificando a hora que quiser a formatação visual dos elementos.&lt;/p&gt;

&lt;p&gt;As bibliotecas são indicadas para projetos mais simples, sem grandes apetrechos técnicos, como um site ou algo parecido. Para fazer um sistema, as bibliotecas irão reforçar os Frameworks, facilitando a organização e formatação da estrutura do site. A biblioteca também ajuda na manipulação dos elementos via Javascript se baseando por estas classes prontas.&lt;/p&gt;

&lt;p&gt;A verdade é que hoje é muito difícil diferenciar uma biblioteca de um framework.&lt;/p&gt;

&lt;h3 id=&#34;como-todos-eles-trabalham-juntos&#34;&gt;Como todos eles trabalham juntos?&lt;/h3&gt;

&lt;p&gt;Você pode usar todos os três ao mesmo tempo em um projeto. Mas não é muito inteligente, já que se você estiver utilizando um framework, muito provavelmente ele terá uma &amp;#8220;biblioteca&amp;#8221; em sua base. Imagine que a biblioteca pode ser específica de estrutura ou formatação visual. O Framework, basicamente, junta os dois. Obviamente há mais coisas envolvidas. Mas para simplificarmos a explicação, imagine que um Framework é a mistura dessas duas bibliotecas.&lt;/p&gt;

&lt;p&gt;O Preprocessador é independente do Framework e da Biblioteca. O seu ganho está ao escrever um código mais escalável, muitas vezes melhorando ou piorando a sintaxe do código. É pura sintaxe, não são classes prédefinidas. Mesmo assim você pode basear seu Framework/Biblioteca em um Préprocessador. O Bootstrap faz isso para facilitar features dinâmicas como grids, cores e etc.&lt;/p&gt;

&lt;p&gt;Como eu disse, eu não gosto de misturar as coisas. Prefiro utilizar o Bootstrap puro, sem a interferência de nenhum préprocessador. Mas, há gosto para tudo. 😉&lt;/p&gt;

&lt;h3 id=&#34;qual-deles-é-melhor-para-o-meu-projeto&#34;&gt;Qual deles é melhor para o meu projeto&lt;/h3&gt;

&lt;p&gt;Eu não sugiro que você utilize um framework para criar websites institucionais. Websites geralmente não usam os mesmos elementos, nem as mesmas estruturas, nem o mesmo design. Logo, se você utilizasse um framework como o Bootstrap, ou o JQuery UI, você acabaria gastando mais tempo reestilizando e brigando com o CSS já criado dos frameworks do que fazendo o que realmente importa: o seu trabalho.&lt;/p&gt;

&lt;p&gt;Logo, para projetos de pequeno porte eu sugiro que você utilize uma biblioteca simples. Sugiro ainda que essa biblioteca seja criada por você.&lt;/p&gt;

&lt;p&gt;Não precisa de muito. Em uma biblioteca você só precisa ter algumas propriedades que fazem tarefas básicas, como fazer o elemento flutuar para a esquerda, para direita, clear, retirar margens e etc. Normalmente eu utilizo um reset chamado &lt;a href=&#34;http://necolas.github.com/normalize.css/&#34;&gt;Normalize&lt;/a&gt;. Ele já reseta meu CSS inteiro e então eu me foco apenas nas propriedades que eu reutilizarei no resto do projeto.&lt;/p&gt;

&lt;p&gt;Se seu projeto for médio ou grande, você já pode pensar em utilizar um Framework. Principalmente se seu projeto for um sistema. Você já vai ter à disposição estilos para formulários (que são um saco pra fazer), botões, grids, reset CSS e outras coisas. O trabalho fica mais fácil por que você tem menos arestas para acertar. Ainda mais se o designer aceitar utilizar alguns dos estilos já prontos do Framework, assim você não precisa reconfigurar formatações visuais e etc.&lt;/p&gt;

&lt;p&gt;A utilização do Preprocessadores é totalmente opcional. Mas se você decidir utilizá-lo juntamente com algum Framework, procure saber se o Framework escolhido suporta algum tipo de préprocessador. O Bootstrap, por exemplo, tem uma versão para LESS.&lt;/p&gt;

&lt;p&gt;No próximo artigo vou contar como estamos fazendo aqui na Locaweb. Estamos criando uma grande biblioteca visual e de front-end que será utilizado por todos os serviços. Os programadores conseguem subir um sistema sem precisar esperar um código HTML definitivo, utilizando os módulos dessa biblioteca. A galera de design faz todos os layouts padronizados visualmente, garantindo a uniformidade de todos os sistemas. E o pessoal de front? Bom o pessoal de front cuida para que tudo isso funcione. 😉&lt;/p&gt;

&lt;p&gt;Veja a segunda parte deste artigo: &lt;a href=&#34;http://tableless.com.br/estruturacao-de-client-side-designers-e-programadores-parte-2/&#34; title=&#34;Estruturação de Client-side – Parte 2: Designers e Programadores&#34;&gt;Designers e Programadores&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 – Texturizando textos</title>
      <link>https://tableless.github.io/hugo-public/css3-texturizando-textos/</link>
      <pubDate>Thu, 23 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-texturizando-textos/</guid>
      <description>

&lt;p&gt;Com o uso da versão 3, já podemos tornar possível a criação de sombra em textos e boxes, arredondamento de bordas, múltiplos backgrounds, etc; objetivando reduzir o tempo de carregamento da página e estimulando o cuidado na utilização de códigos e textos limpos que servirão de comunicação para robôs de busca ou favorecerão a acessibilidade do website.&lt;/p&gt;

&lt;p&gt;A exemplo de mais uma das vantagens do CSS3, vamos conhecer melhor como aplicar uma imagem de textura ao preenchimento de um texto, utilizando apenas declarações &amp;#8220;fonts&amp;#8221; na folha de estilo.&lt;/p&gt;

&lt;p&gt;Vale ressaltar que o exemplo abaixo funcionará, neste momento, exclusivamente no Chrome e no Safari em suas últimas versões. E antes que você pense: “então, não poderei aplicar aos meus projetos&amp;#8230;”, te tranquilizo; talvez você não possa aplicar aos projetos para web em desktop e diversos tipos de outros navegadores, mas você poderá aplicar a seus projetos mobile ou para tablets.  Pense nisso! 😉&lt;/p&gt;

&lt;p&gt;Então, vamos lá!&lt;/p&gt;

&lt;p&gt;Crie um novo documento html com a seguinte marcação:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt; &lt;header&gt;&lt;/p&gt;

&lt;h1 id=&#34;wood-header&#34;&gt;Wood&lt;/header&gt;&lt;/h1&gt;

&lt;p&gt;&lt;/body&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Após, adicione as características de estilo (uso aqui a aplicação incorporada para facilitar os testes):&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]body{background:#fff}&lt;/p&gt;

&lt;p&gt;h1{      &lt;/p&gt;

&lt;p&gt;font:72px bold &amp;#8220;Arial Black&amp;#8221;, Gadget, sans-serif;     &lt;/p&gt;

&lt;p&gt;color:#930;     &lt;/p&gt;

&lt;p&gt;text-transform:uppercase;     &lt;/p&gt;

&lt;p&gt;border:solid 20px #930;     &lt;/p&gt;

&lt;p&gt;padding:10px;&lt;/p&gt;

&lt;p&gt;}[/cc]&lt;/p&gt;

&lt;p&gt;A princípio, seu texto está assim:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/02/img1.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-5549&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/02/img1.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;151&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora, vamos abrir um dos editores de imagem – Photoshop ou Fireworks – e criar uma &lt;strong&gt;imagem PNG&lt;/strong&gt; com a nossa textura. Em meu teste inicial, eu utilizei uma imagem de textura pronta, mas o resultado não ficou como esperado, então aconselho colocar seus dotes de criação em atividade e realmente criar a textura.&lt;/p&gt;

&lt;p&gt;Abaixo uma breve explicação da textura que criei no Fireworks.&lt;/p&gt;

&lt;p&gt;Utilizando o Fireworks, crie um novo documento (1900&amp;#215;200), selecione a ferramenta pincel, depois aplique as seguintes características (barra de ferramentas inferior): &lt;strong&gt;Tip size – 300 | Stroke Category – Pencil Pixel Soft | Texture – Line vertical e Burlap.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/02/img2.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-5550 alignleft&#34; style=&#34;margin-right: 10px&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/02/img2.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;269&#34; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Na hora de escolher a melhor forma de exportar sua imagem, o cuidado com o peso em kb continua valendo. Em se tratando de PNG, é muito fácil um simples arquivo ficar com mais de 500kb, por isso, em meus testes observei que exportando em PNG8 você vai ter um arquivo de 52kb com uma qualidade visual menor, mas que dependendo do estilo de textura é perfeitamente aplicável, ou exportando em PNG32 você preza por uma qualidade visual melhor, mas ao custo de um arquivo de 200kb. A escolha vai depender da velocidade de conexão ao qual você vai estabelecer para esta aplicação e do resultado visual que você julgar aceitável.&lt;/p&gt;

&lt;p&gt;Criada a imagem, vamos incluir ao style do texto o atributo &lt;strong&gt;“mask-image”&lt;/strong&gt; que definem a textura no texto.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]h1{      &lt;/p&gt;

&lt;p&gt;font:72px bold &amp;#8220;Arial Black&amp;#8221;, Gadget, sans-serif;     &lt;/p&gt;

&lt;p&gt;color:#930;&lt;/p&gt;

&lt;p&gt;text-transform:uppercase;     &lt;/p&gt;

&lt;p&gt;border:solid 20px #930;     &lt;/p&gt;

&lt;p&gt;padding:10px;     &lt;/p&gt;

&lt;p&gt;-webkit-mask-image: url(text2.png);&lt;/p&gt;

&lt;p&gt;-o-mask-image: url(text2.png);&lt;/p&gt;

&lt;p&gt;-moz-mask-image: url(text2.png);&lt;/p&gt;

&lt;p&gt;mask-image: url(text2.png);&lt;/p&gt;

&lt;p&gt;}[/cc]&lt;/p&gt;

&lt;p&gt;Reload no navegador&amp;#8230; e voilá! Um texto com um preenchimento texturizado.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/02/img3.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-5553&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/02/img3.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;117&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Daí para frente você pode incrementar utilizando &lt;a title=&#34;Propriedade @font-face CSS – Fonts externas na web&#34; href=&#34;http://tableless.com.br/font-face-fonts-externas-na-web/&#34; target=&#34;_blank&#34;&gt;font-face&lt;/a&gt;, &lt;a title=&#34;CSS3 – Sombras em textos e elementos&#34; href=&#34;http://tableless.com.br/css3-sombras-em-textos-e-elementos/&#34; target=&#34;_blank&#34;&gt;text-shadow&lt;/a&gt; ou outras texturas. Fica a critério da sua criatividade.&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;

&lt;p&gt;😉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Utilizando APPs em vez de browsers</title>
      <link>https://tableless.github.io/hugo-public/utilizando-apps-em-vez-de-browsers/</link>
      <pubDate>Fri, 06 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/utilizando-apps-em-vez-de-browsers/</guid>
      <description>&lt;p&gt;De acordo com a &lt;a href=&#34;http://www.comscore.com/Press_Events/Press_Releases/2011/12/comScore_Reports_November_2011_U.S._Mobile_Subscriber_Market_Share?utm_source=TablelessComBr&amp;amp;utm_medium=link&amp;amp;utm_campaign=Post&#34;&gt;comScore&lt;/a&gt; as pessoas estão usando mais mobile Apps para consumir conteúdo do que browsers.&lt;/p&gt;

&lt;p&gt;O tráfego medido pela comScore mostra o market share dos principais players do mercado de mobile em Novembro. O Android continua ganhando, logo atrás vem o iPhone que foi impulsionado pelas vendas do 4S. Todas as outras plataformas perderam campo. Outra coisa, o report da comScore não conta com iPads nem iPods.&lt;/p&gt;

&lt;p&gt;Os mobiles Android represetam algo em torno de 47% e o iPhone 30%.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/01/Screen-Shot-2012-01-05-at-10.24.17-AM.png&#34; alt=&#34;&#34; title=&#34;Screen Shot 2012-01-05 at 10.24.17 AM&#34; width=&#34;456&#34; height=&#34;271&#34; class=&#34;alignnone size-full wp-image-5123&#34; srcset=&#34;uploads/2012/01/Screen-Shot-2012-01-05-at-10.24.17-AM.png 456w, uploads/2012/01/Screen-Shot-2012-01-05-at-10.24.17-AM-300x178.png 300w&#34; sizes=&#34;(max-width: 456px) 100vw, 456px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/01/Screen-shot-2011-12-29-at-2.03.27-PM.png&#34; alt=&#34;&#34; title=&#34;Screen-shot-2011-12-29-at-2.03.27-PM&#34; width=&#34;514&#34; height=&#34;270&#34; class=&#34;size-full wp-image-5118&#34; srcset=&#34;uploads/2012/01/Screen-shot-2011-12-29-at-2.03.27-PM.png 514w, uploads/2012/01/Screen-shot-2011-12-29-at-2.03.27-PM-300x157.png 300w&#34; sizes=&#34;(max-width: 514px) 100vw, 514px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O mais importante são os números abaixo que mostram o uso de conteúdo por estes dispositivos pelos usuários:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/01/Screen-shot-2011-12-29-at-2.10.55-PM.png&#34; alt=&#34;&#34; title=&#34;Screen-shot-2011-12-29-at-2.10.55-PM&#34; width=&#34;490&#34; height=&#34;325&#34; class=&#34;size-full wp-image-5119&#34; srcset=&#34;uploads/2012/01/Screen-shot-2011-12-29-at-2.10.55-PM.png 490w, uploads/2012/01/Screen-shot-2011-12-29-at-2.10.55-PM-300x198.png 300w&#34; sizes=&#34;(max-width: 490px) 100vw, 490px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Acho que pouquíssimas pessoas, mesmo nos seus computadores, entram no site do Twitter para escrever em vez de usar algum App, não é verdade? Mesmo assim acho que o futuro não estão nos Apps. Eles sempre ficarão lá, firmes e fortes, mas aos poucos muitas empresas irão reformular seus sistemas web para ficar o mais parecido possível com as apps. Esse é o mais inteligente já que você não precisa reprogramar tudo novamente como é feito hoje. A mudança do CSS será o trabalho mais importante nesse caso, já que a interface &amp;#8220;precisa&amp;#8221; ser diferente em cada um aparelhos.&lt;/p&gt;

&lt;p&gt;Na verdade não precisa&amp;#8230; Mas é bom manter a interface nativa de cada um dos aparelhos para que os usuários não estranhem a utilização. Não seria bom que a interface do twitter no Windows Phone fosse igual a do iPhone ou a do Android. Confunde bastante. Não, é?&lt;/p&gt;

&lt;p&gt;Só uma observação: estes números refletem a realidade lá dos states, ok? Provavelmente esse comportamento pode ser multiplicado em outros países, como aqui.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Propriedade background-clip</title>
      <link>https://tableless.github.io/hugo-public/propriedade-background-clip/</link>
      <pubDate>Tue, 03 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/propriedade-background-clip/</guid>
      <description>&lt;p&gt;A propriedade background-clip é muito simples de se entender. Até agora nós nunca tínhamos como controlar onde o background começaria a ser desenhado. Imagine que temos um elemento com um determinado padding e que você queira que o background, seja ele uma imagem ou uma cor, aparecesse somente onde está o conteúdo, ignorando a parte do padding.&lt;/p&gt;

&lt;p&gt;O background-clip tem 4 valores: border-box, content-box, padding-box e text. O valor text foi &lt;a href=&#34;http://www.webkit.org/blog/164/background-clip-text/&#34;&gt;inserido pelo pessoal do Webkit&lt;/a&gt; em 2008 e dave ser incluída no padrões em algum momento por conta da sua utilidade!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/background-clip/&#34;&gt;Este exemplo de como funciona a propriedade&lt;/a&gt; dispensa maiores explicações.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/css3-background/#the-background-clip&#34;&gt;Aqui tem a documentação oficial.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao CSS 3D – Flip Card</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-css-3d-flip-card/</link>
      <pubDate>Wed, 21 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-css-3d-flip-card/</guid>
      <description>

&lt;p&gt;O CSS 3D é sem dúvida uma das features do CSS mais aguardadas por todas as crianças do Brasil. Fala a verdade! Fazer efeitozinhos com sombra, gradientes, transparências e etc já foi um dia na vida do desenvolvimento algo bacana. Hoje é muito fora de moda. Carne de vaca, sabe? Por isso o CSS 3D é tão esperado. Ele trará para a web efeitos visuais para layout que antes só viamos em sistemas que rodam em smartphones, tipo um iPhone ou nos sistemas operacionais mais populares como Linux e OSX.&lt;/p&gt;

&lt;p&gt;Mas não se anime muito. Eu sei que você está ansioso para sair por aí colocando efeitos 3D de CSS em tudo quanto é aplicação. Mas calma&amp;#8230; entenda que o CSS foi feito para estilizar documentos. Você o utiliza para melhorar a experiência dos usuários nos diversos dispositivos e não para enfeitar seu website como se fosse uma penteadeira. Lembra-se dos websites cheios de gifs animados? Pois é, cuidado para não cair no mesmo erro. Você estará utilizando o CSS 3D da maneira certa se seus efeitos passarem desapercebidos pelo usuário ao utilizar seu sistema. Encher seu sistema com efeitos a cada clique ou a cada ação pode fazer com que o usuário perca tempo e a paciência.&lt;/p&gt;

&lt;p&gt;Mas vamos ao que interessa.&lt;/p&gt;

&lt;h3 id=&#34;o-suporte&#34;&gt;O suporte&lt;/h3&gt;

&lt;p&gt;Infelizmente isso ainda está restrito para browsers. O Internet Explorer não tem suporte ainda e nem tem data para tal. Todos os exercícios que você ver neste post são feitos para browsers que tem WebKit como motor de renderização. Por isso teste em seu Chrome ou no seu Safari. Eu testei no Chrome porque o Safari mostrou algumas inconsistências. O Opera está esperando as especificações de CSS Transforms amadurecerem para adicionar este recurso. Testei no Firefox 8.0.1 e o exercício não funcionou.&lt;/p&gt;

&lt;p&gt;A degradação do CSS 3D para os browsers que não o suportam é um pouco infeliz. Sugiro que se você for utilizar essas features, tente fazê-lo em projetos restritos para que não haja problemas com usuários de browsers antigos. Se ainda assim você quiser arriscar, crie soluções especifica para seu projeto, fazendo com que a experiência do seu cliente não seja muito prejudicada.&lt;/p&gt;

&lt;p&gt;Sugiro que &lt;a href=&#34;http://tableless.com.br/utilizando-a-biblioteca-modernizr/&#34; title=&#34;Utilizando a Biblioteca Modernizr&#34;&gt;utilize a biblioteca Modernizr&lt;/a&gt; para identificar os browsers que não entendem o CSS 3D.&lt;/p&gt;

&lt;h3 id=&#34;tudo-é-uma-questão-de-perspectiva&#34;&gt;Tudo é uma questão de perspectiva&lt;/h3&gt;

&lt;p&gt;Para falar de 3D, precisamos falar sobre perspectiva. Para ativar uma área 3D o elemento precisará de perspectiva.&lt;/p&gt;

&lt;p&gt;Você pode aplicar a perspectiva ao elemento de duas formas: utilizando diretamente a propriedade &lt;strong&gt;perspective&lt;/strong&gt; ou adicionando um valor &lt;strong&gt;perspective()&lt;/strong&gt; na propriedade &lt;strong&gt;transform&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
  -webkit-perspective: 600;
}
&lt;/pre&gt;

&lt;p&gt;Ou:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
  -webkit-transform: perspective(600);
}
&lt;/pre&gt;

&lt;p&gt;Estes dois formatos são os gatilhos que ativam a área 3D onde o elemento irá trabalhar.&lt;/p&gt;

&lt;p&gt;O valor da perspectiva determina a intensidade do efeito. Imagine como se fosse a distância de onde vemos o objeto. Quanto maior o valor, mais perto o elemento estará, logo, menos intenso será o visual 3D. Logo, se colocarmos um valor de &lt;em&gt;2000&lt;/em&gt;, o objeto não terá tantas mudanças visuais e o efeito 3D será suave. Se colocarmos &lt;em&gt;100&lt;/em&gt;, o efeito 3D será muito visível, como se fosse um inseto olhando um objeto gigante.&lt;/p&gt;

&lt;p&gt;Você também precisa entender sobre o &lt;a href=&#34;http://pt.wikipedia.org/wiki/Perspectiva_(gráfica)&#34; title=&#34;Wikipedia: sobre ponto de fuga&#34;&gt;ponto de fuga&lt;/a&gt;. O ponto de fuga por padrão está posicionado no centro. Você pode modificar essa posição com a propriedade &lt;strong&gt;perspective-origin&lt;/strong&gt;, que é muito parecido com a propriedade &lt;strong&gt;transform-origin&lt;/strong&gt;, que define onde a ação de transformação do objeto acontecerá, nesse caso &lt;a href=&#34;http://tableless.github.com/exemplos/cssanimation.html&#34;&gt;quando falamos de ações 2D&lt;/a&gt;. A propriedade &lt;strong&gt;perspective-origin&lt;/strong&gt; afeta os eixos X e Y do elemento filho.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/css3d/cardflip/propriedade-perspective.html&#34;&gt;Veja um exemplo com dois elementos&lt;/a&gt;: um com pouca perspectiva e outra com muita perspectiva.&lt;/p&gt;

&lt;h3 id=&#34;css-3d-transforms&#34;&gt;CSS 3D Transforms&lt;/h3&gt;

&lt;p&gt;Se você ainda não leu sobre CSS Transforms você pode &lt;a href=&#34;http://tableless.com.br/introducao-ao-css-animation/&#34; title=&#34;Introdução ao CSS Animation&#34;&gt;ler algo aqui&lt;/a&gt; e &lt;a href=&#34;http://tableless.github.com/exemplos/csstransforms/&#34;&gt;ver em ação aqui&lt;/a&gt;. As propriedades são praticamente iguais, mas aplicadas para os princípios de 3D e não 2D.&lt;/p&gt;

&lt;p&gt;Você deve estar acostumado a trabalhar com os eixos X e Y no CSS padrão. No CSS 3D podemos manipular também o eixo Z, que representa a profundidade.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/css3d/cardflip/propriedade-transform.html&#34;&gt;Veja um exemplo utilizando os valores &lt;strong&gt;rotateY, rotateX e translateZ&lt;/strong&gt;&lt;/a&gt;. Perceba que no &lt;strong&gt;translateZ&lt;/strong&gt; eu utilizei valores negativos e positivos. Quando utilizo o valor negativo, o objeto fica &amp;#8220;mais longe&amp;#8221;, se coloco valores positivos, o objeto fica &amp;#8220;mais perto&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Abaixo segue uma imagem do resultado do exemplo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/css3d/cardflip/propriedade-transform.html&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/img-transform3d.png&#34; alt=&#34;&#34; title=&#34;img-transform3d&#34; width=&#34;801&#34; height=&#34;706&#34; class=&#34;alignnone size-full wp-image-4795&#34; srcset=&#34;uploads/2011/12/img-transform3d.png 801w, uploads/2011/12/img-transform3d-300x264.png 300w&#34; sizes=&#34;(max-width: 801px) 100vw, 801px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nós podemos utilizar também alguns atalhos para estes valores onde podemos definir as três dimensões de uma vez:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;translate3d(x,y,z)&lt;/li&gt;
&lt;li&gt;scale3d(x,y,z)&lt;/li&gt;
&lt;li&gt;rotate3d(x,y,z,angle)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Muito importante: ao utilizar as propriedades resumidas, os browsers ativam automaticamente a aceleração por hardware no Safari para que as animações tenham uma melhor performance.&lt;/p&gt;

&lt;h2 id=&#34;fazendo-o-efeito-de-card-flip&#34;&gt;Fazendo o efeito de Card Flip&lt;/h2&gt;

&lt;p&gt;O efeito de Card Flip é muito conhecido entre os usuários de iPhone. Para ter ideia de como é o efeito &lt;a href=&#34;http://tableless.github.com/exemplos/css3d/cardflip/cardflip.html&#34; title=&#34;Exemplo de efeito card flip com CSS 3 3D&#34; target=&#34;_blank&#34;&gt;veja o exemplo final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A estrutura HTML é esta:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section class=&#34;geral&#34;&amp;gt;
  &amp;lt;div class=&#34;carta&#34;&amp;gt;
    &amp;lt;figure class=&#34;frente&#34;&amp;gt;&amp;lt;img src=&#34;card-front.jpg&#34;&amp;gt;&amp;lt;/figure&amp;gt;
    &amp;lt;figure class=&#34;atras&#34;&amp;gt;&amp;lt;img src=&#34;card-back.jpg&#34;&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O elemento &lt;em&gt;.geral&lt;/em&gt; é onde iniciaremos o ambiente 3D. O elemento &lt;em&gt;.carta&lt;/em&gt; age como container dos objetos 3D. Cada face da carta está separada por um elemento &lt;strong&gt;figure&lt;/strong&gt;, com uma imagem.&lt;/p&gt;

&lt;p&gt;Para começar, precisamos aplicar a perspectiva para o elemento &lt;em&gt;.geral&lt;/em&gt; iniciar o espaço 3D.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.geral { 
    width: 200px;
    height: 293px;
    position: relative;
    margin:10% auto 0;
    -webkit-perspective: 500;
}
&lt;/pre&gt;

&lt;p&gt;Defini uma largura e altura, coloquei um &lt;strong&gt;position: relative;&lt;/strong&gt; para que os elementos dentro dele sejam posicionados se referenciando por ele. Coloquei uma margem só para separá-lo do topo do body a fim de conseguirmos ver melhor os efeitos.&lt;/p&gt;

&lt;p&gt;Por fim, coloquei a propriedade &lt;strong&gt;-webkit-perspective: 500;&lt;/strong&gt; para aplicarmos o efeito 3D. O valor de 500 faz uma boa perspectiva.&lt;/p&gt;

&lt;p&gt;Agora definiremos as dimensões da carta e suas propriedades.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.carta {
  width: 100%;
  height: 100%;
  position: absolute;
  -webkit-transition: -webkit-transform 1s;
}
&lt;/pre&gt;

&lt;p&gt;Largura e altura precisam ser de 100% para definir a área que o 3D irá aplicar. O &lt;strong&gt;position: absolute;&lt;/strong&gt; é necessário para que as cartas fiquem relativas ao elemento &lt;em&gt;.geral&lt;/em&gt;. A propriedade &lt;strong&gt;-webkit-transition: -webkit-transform 1s;&lt;/strong&gt; define o tempo de transição do efeito, neste caso ele vai durar 1 segundo.&lt;/p&gt;

&lt;p&gt;Formatando as cartas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.carta figure {
  margin:0;
  display: block;
  position: absolute;
  width: 100%;
  height: 100%;
  -webkit-backface-visibility: hidden;
}
&lt;/pre&gt;

&lt;p&gt;Vamos direto para a propriedade &lt;strong&gt;-webkit-backface-visibility: hidden;&lt;/strong&gt; já que as outras dispensam comentários. Essa propriedade faz com que a face de trás da carta não apareça e nem se sobreponha no momento do efeito.&lt;/p&gt;

&lt;p&gt;E finalmente, para fazer com que a parte de trás da carta apareça no verso correto, nós temos que rotacioná-la.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.atras{-webkit-transform: rotateY(180deg);}
&lt;/pre&gt;

&lt;p&gt;E feito se completa com o trigger para fazer a animação acontecer. Nesse caso farei com um hover no elemento &lt;em&gt;.carta&lt;/em&gt;, onde iremos rotacioná-lo em -180 graus.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.carta:hover {
  -webkit-transform: rotateY(-180deg);
}
&lt;/pre&gt;

&lt;p&gt;E Voilá! Se quiser brincar um pouco, modifique a origem da transformação com a propriedade &lt;strong&gt;-webkit-transform-origin&lt;/strong&gt;. Adicionando essa linha, a transformação acontece para a direita em vez de ser pelo centro, como é o padrão:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.carta:hover {
  -webkit-transform: rotateY(-180deg);
  -webkit-transform-origin: right center;
}
&lt;/pre&gt;

&lt;h3 id=&#34;3drollover-css&#34;&gt;3Drollover.css&lt;/h3&gt;

&lt;p&gt;Encontrei uma biblioteca muito interessante que nos permite fazer estes efeitos de forma fácil e de acordo com os princípios do OOCSS. É necessário apenas estruturar da forma correta e trocar as classes de acordo com o efeito que você quer fazer. Coisa muito simples.&lt;/p&gt;

&lt;p&gt;O nome da biblioteca é &lt;a href=&#34;https://github.com/codepo8/3drollovers.css&#34;&gt;3Drollover&lt;/a&gt;. Clone no seu computador e divirta-se. Dá para usar em projetos facilmente. Veja abaixo um vídeo que mostra os efeitos:&lt;/p&gt;

&lt;h3 id=&#34;para-ler-mais&#34;&gt;Para ler mais&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Leia a &lt;a href=&#34;http://dev.w3.org/csswg/css3-3d-transforms/&#34;&gt;documentação oficial do W3C sobre CSS 3D Transforms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Pessoal do &lt;a href=&#34;http://www.webkit.org/blog/386/3d-transforms/&#34;&gt;WebKit explicando sobre outras propriedades do CSS 3D Transforms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Você pode &lt;a href=&#34;http://desandro.github.com/3dtransforms/examples/perspective-03.html&#34;&gt;brincar um pouco com as propriedades do CSS 3D aqui&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OOCSS ou CSS do jeito certo</title>
      <link>https://tableless.github.io/hugo-public/oocss-ou-css-do-jeito-certo/</link>
      <pubDate>Mon, 19 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/oocss-ou-css-do-jeito-certo/</guid>
      <description>

&lt;h2 id=&#34;o-conceito&#34;&gt;O conceito&lt;/h2&gt;

&lt;p&gt;Escrever CSS é fácil. Isto não deveria ser um problema, mas é. Por ser fácil os desenvolvedores acabam se esquecendo de princípios básicos, técnicas e metodologias que nos ajudam a manter o controle durante a produção. Entenda que algumas dessas metodologias não precisam ser aplicadas em sites pequenos. Por exemplo, aqui no Tableless eu não &lt;a href=&#34;http://tableless.com.br/modulando-o-css/&#34;&gt;modularizo o CSS em vários arquivos&lt;/a&gt; por um ou dois motivos: &lt;strong&gt;1)&lt;/strong&gt; Somente eu tenho acesso ao código. &lt;strong&gt;2)&lt;/strong&gt; O site não é grande. Ele tem meia dúzia de páginas e funcionalidades.&lt;/p&gt;

&lt;p&gt;Mas quando falamos de sites grandes (em visitação e quantidade de páginas) existem algumas restrições: velocidade de carregamento, compatibilidade entre browsers, manutenção, flexibilidade para mudanças etc. Tudo isso deve ser pensado e planejado antes de colocarmos a mão na massa. É no planejamento que iremos estruturar como serão feitas as manutenções posteriores, como iremos mudar elementos principais sem interferir no layout como um todo.&lt;/p&gt;

&lt;p&gt;O CSS Orientado a Objeto (em inglês OOCSS &amp;#8211; Object Oriented CSS &amp;#8211; Sendo sincero, esse nome é muito ruim) tem como conceito técnicas que já falamos durante muito tempo, mas que como o &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34; title=&#34;Artigo sobre responsive web design&#34; target=&#34;_blank&#34;&gt;Responsive Web Design&lt;/a&gt;, está ganhando força somente agora.&lt;/p&gt;

&lt;h2 id=&#34;princípios&#34;&gt;Princípios&lt;/h2&gt;

&lt;p&gt;O OOCSS está baseado em dois pontos cruciais que são a separação da &lt;strong&gt;estrutura e do visual&lt;/strong&gt; e a &lt;strong&gt;independência do container em relação ao conteúdo&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;separação-da-estrutura-e-do-visual&#34;&gt;Separação da estrutura e do visual&lt;/h3&gt;

&lt;p&gt;A maioria dos elementos estilizados em uma página web tem diferentes características visuais que são repetidas em diferentes contextos e situações. Algumas características são fáceis de identificar como cores, títulos, gradientes, bordas etc. Essas são características visuais. Contudo, existem também as características de estrutura, que é onde nós &amp;#8220;montamos&amp;#8221; os elementos, definindo tamanhos, distâncias, medidas etc. Essas características também são repetidas em diversos elementos no decorrer do site.&lt;/p&gt;

&lt;p&gt;A ideia é que nós separemos as características visuais das características estruturais, tornando-os modulares de forma que possamos reutilizá-los em diferentes elementos tendo resultados iguais.&lt;/p&gt;

&lt;p&gt;Imagine 3 elementos diferentes, como um &lt;strong&gt;botão&lt;/strong&gt;, uma &lt;strong&gt;caixa de chamada&lt;/strong&gt; e um &lt;strong&gt;destaque&lt;/strong&gt; que normalmente fica na lateral do site. Eles tem características estruturais diferentes, como width, height, paddings, margins etc. Mas as características visuais são iguais, como por exemplo o border-radius, background e o box-shadow. O CSS normal ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.botao {
   width:100px;
   height:50px;
   text-align:center;
   font:bold 13px verdana, arial, tahoma, sans-serif;
   border-radius:10px;
   background: url(gradients.png) repeat-X center;
   box-shadow: 0 0 10px rgba(0,0,0,0.5);
}

.chamada {
   width:250px;
   float:left;
   font:bold 23px verdana, arial, tahoma, sans-serif;
   border-radius:10px;
   background: url(gradients.png) repeat-X center;
   box-shadow: 0 0 10px rgba(0,0,0,0.5);
}

.destaque {
   width:300px;
   height:250px;
   border-radius:10px;
   background: url(gradients.png) repeat-X center;
   box-shadow: 0 0 10px rgba(0,0,0,0.5);
}
&lt;/pre&gt;

&lt;p&gt;Para reutilizar de forma inteligente as características iguais destes elementos e prevendo que talvez seria criado outros elementos com as mesmas características &amp;#8211; já que o designer mantém sempre (quase sempre, né?) um padrão visual estético &amp;#8211; é interessante que criemos uma classe que componha estas características e apliquemos essa classe nos elementos necessários. Assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.botao {
   width:100px;
   height:50px;
   text-align:center;
   font:bold 13px verdana, arial, tahoma, sans-serif;
}

.chamada {
   width:250px;
   float:left;
   font:bold 23px verdana, arial, tahoma, sans-serif;
}

.destaque {
   width:300px;
   height:250px;
}

.boxEffects {
   border-radius:10px;
   background: url(gradients.png) repeat-X center;
   box-shadow: 0 0 10px rgba(0,0,0,0.5);
}
&lt;/pre&gt;

&lt;p&gt;Em cada elemento que necessitasse destas características visuais, basta inserir a classe .boxEffects ao elemento.&lt;/p&gt;

&lt;p&gt;Entenda que o abuso dessa técnica pode trazer complicações. Você não vai criar uma classe para cada característica visuais e sair aplicando essas classes em tudo quanto é elemento. Você estaria voltando a 1999 onde tínhamos aquele velho problema de misturar as &lt;a href=&#34;http://tableless.com.br/camadas-de-desenvolvimento-client-side/&#34;&gt;camadas de formatação e informação&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;independência-dos-containers-e-do-conteúdo&#34;&gt;Independência dos containers e do conteúdo&lt;/h3&gt;

&lt;p&gt;Imagine que você crie algum estilo para a formatação de algum elemento como por exemplo um parágrafo e atrela este estilo para os parágrafos localizados no article principal:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;article p {
   font:bold 13px verdana, arial, tahoma, sans-serif;
   line-height:18px;
   letter-spacing:1px;
}
&lt;/pre&gt;

&lt;p&gt;Mas então surge a necessidade de ter um parágrafo com as mesmas características no rodapé, por exemplo, mas com o tamanho da fonte maior! Você pode fazer assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;article p, footer p {
   font: 13px verdana, arial, tahoma, sans-serif;
   line-height:18px;
   letter-spacing:1px;
}

footer p {font-size:20px;}
&lt;/pre&gt;

&lt;p&gt;O que é ainda é ruim, mas é muito melhor do que fazer assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;article p, footer p {
   font: 13px verdana, arial, tahoma, sans-serif;
   line-height:18px;
   letter-spacing:1px;
}

footer p {
   font: 20px verdana, arial, tahoma, sans-serif;
   line-height:18px;
   letter-spacing:1px;
}
&lt;/pre&gt;

&lt;p&gt;Onde duplicamos desnecessariamente vários estilos.&lt;/p&gt;

&lt;p&gt;Com o OOCSS nós devemos transformas estes estilos em módulos para serem reutilizados e não atrelando os estilos a um elemento específico.&lt;/p&gt;

&lt;p&gt;Isso acontece também quando já fizemos uma classe onde carrega os estilos comuns. Se voltarmos ao exemplo anterior, alguém pode fazer assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;footer .boxEffects {...}&lt;/pre&gt;

&lt;p&gt;Estamos aqui atrelando a classe que antes era para ser algo genérico ao elemento footer. Cuidado ao fazer isso. Tenha um bom motivo antes de ir adiante.&lt;/p&gt;

&lt;h2 id=&#34;outras-boas-práticas&#34;&gt;Outras boas práticas&lt;/h2&gt;

&lt;p&gt;Existem algumas boas práticas que fazem parte do OOCSS e que melhoram muito o planejamento e a prática do desenvolvimento web:&lt;/p&gt;

&lt;h3 id=&#34;modularização-de-código-css&#34;&gt;Modularização de código CSS&lt;/h3&gt;

&lt;p&gt;Não estou falando aqui sobre a modularização de &lt;strong&gt;arquivos&lt;/strong&gt; CSS, mas sim do Código. Essa modularização é feita sob medida para cada um dos projetos. O objetivo é que o código CSS seja reutilizado em várias partes da produção evitando que você crie mais código. É aconselhável que se defina padrões de código para os principais elementos do layout. A equipe pode fazer isso ou delegar esse importante trabalho para um desenvolvedor, que será responsável em criar os métodos e os padrões estruturais dos elementos.&lt;/p&gt;

&lt;h3 id=&#34;minimizar-usos-de-seletores-muito-específicos&#34;&gt;Minimizar usos de seletores muito específicos&lt;/h3&gt;

&lt;p&gt;Encontre o meio termo. Não faça seletores muito específicos ou seletores muito genéricos. O CSS trabalha com especificidade: quanto mais específico, mais certeiro você é ao capturar um elemento, mas seu CSS fica mais engessado e consequentemente você usa mais código. Quanto mais genérico, mais elementos do mesmo tipo você formata, mas o risco de conflito de estilos aumenta. O ideal é encontrar o meio termo, onde você é tão específico e nem tão genérico.&lt;/p&gt;

&lt;p&gt;Dependendo da forma que você utiliza os seletores os browsers podem ser ou não mais rápidos ao renderizar seu site. &lt;a href=&#34;http://tableless.com.br/melhorando-performance-css/&#34; title=&#34;Performance do seu CSS&#34; target=&#34;_blank&#34;&gt;Já falamos disso aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;formate-elementos-com-classes-modulares&#34;&gt;Formate elementos com classes modulares&lt;/h3&gt;

&lt;p&gt;A ideia é que ao criar uma nova página, você não tenha que criar novo código CSS. Se a página tiver a estrutura diferente mas os elementos tem características visuais iguais, aí está uma boa oportunidade para modularizar o código visual dos objetos.&lt;/p&gt;

&lt;p&gt;Um exemplo para demonstrar essa prática é ao fazer botões para diferentes ações. Normalmente utilizamos os mesmos botões com cores diferentes para definirmos visualmente ações diferentes que o usuário pode tomar. O botão de SALVAR tem o mesmo formato de CANCELAR, mas a cor dos dois é diferente, sendo que o primeiro é verde o segundo vermelho. O código seria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.botao {
   display:inline-block;
   padding:10px 20px;
   font:13px verdana, arial, tahoma;
   color:white;
   text-decoration: none;
}
&lt;/pre&gt;

&lt;p&gt;Este código cria toda a estrutura do botão. Agora falta definir as cores de fundo. Eu farei isso criando duas classes: &lt;strong&gt;btVerde&lt;/strong&gt; e &lt;strong&gt;btVermelho&lt;/strong&gt;. Essas classes serão utilizadas em pareceria com a classe &lt;strong&gt;botao&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.btVermelho {background: red;}
.btVerde {background: green;}
&lt;/pre&gt;

&lt;p&gt;Agora, o HTML ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;a href=&#34;#&#34; class=&#34;botao btVermelho&#34;&amp;gt;Cancelar&amp;lt;/a&amp;gt;
&amp;lt;a href=&#34;#&#34; class=&#34;botao btVerde&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Porque criei os nomes das classes btVermelho e btVerde em vez de btCancelar e btSalvar? Porque pode ser que exista algum botão que também seja verde, mas não tenha a ação de salvar. Assim deixo meu leque aberto para novas atribuições.&lt;/p&gt;

&lt;h3 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h3&gt;

&lt;p&gt;Seguir esses pequenos detalhes evitam uma série de problemas comuns no desenvolvimento client-side. A reutilização de código CSS se torna real, a velocidade do carregamento melhora e os problemas de manutenção são solucionados. A flexibilidade que teremos ao modificar o CSS será muito grande e não aumentaremos nosso código a cada modificação feita. A ideia é que seu código CSS fique sob controle. A utilização de &lt;a href=&#34;http://tableless.com.br/biblioteca-css-ou-framework/&#34; target=&#34;_blank&#34;&gt;frameworks e bibliotecas podem ajudar em muitos momentos&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Utilizando a Biblioteca Modernizr</title>
      <link>https://tableless.github.io/hugo-public/utilizando-a-biblioteca-modernizr/</link>
      <pubDate>Mon, 17 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/utilizando-a-biblioteca-modernizr/</guid>
      <description>

&lt;h3 id=&#34;problemas-de-compatibilidade&#34;&gt;Problemas de compatibilidade&lt;/h3&gt;

&lt;p&gt;Quando produzimos um site os problemas de compatibilidade fazem parte da regra do jogo. Para tentar contornar estes problemas utilizamos hacks, comentários condicionais, sniffing de browsers e outras coisas, que muitas vezes mais prejudicam do que ajudam.&lt;/p&gt;

&lt;p&gt;Para ajudar mais ainda o CSS3 e o HTML5 apareceram derrubando tudo, e o problema de compatibilidade que já era chato, ficou mais chato que meia molhada. Embora os browsers estejam muito mais atuais e suportando propriedades avançadas de CSS3 e HTML5, não é garantia que todos eles suportem as mesmas propriedades. E é aqui que começamos a ter problemas novamente, como no passado.&lt;/p&gt;

&lt;p&gt;Como você consegue reconhecer quem um determinado browser suporta CSS Animation? Como você sabe que o browser conhece LocalStorage do HTML5? Você não vai ficar olhando numa tabelinha toda vez que tiver essas dúvidas para fazer um visual ou uma solução alternativa para tais browsers.&lt;/p&gt;

&lt;p&gt;É por essas e outras que você utilizará a Modernizr.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-a-modernizr&#34;&gt;O que é a Modernizr&lt;/h3&gt;

&lt;p&gt;Modernizr é uma pequena biblioteca Javascript que detecta a disponibilidade das novas características do HTML5 e CSS3 nos browsers. Muitas destas características já estão implementadas nos browsers, mas é muito chato você decorar quais novidades os browsers já estão suportando. O que a Modernizr faz é simples: ela te diz quais features um determinado browser suporta e insere classes no HTML para que você possa utilizar para fazer uma versão alternativa de visual ou solução.&lt;/p&gt;

&lt;p&gt;Entenda que a Modernizr não é um sniffing de browser. Ela é diferente. A Modernizr faz o trabalho de detectar das seguintes formas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ela testa 40 features de CSS3 e HTML5 em alguns milisegundos.&lt;/li&gt;
&lt;li&gt;Depois ela cria objetos javascript que contém os resultados destes testes.&lt;/li&gt;
&lt;li&gt;Aí são adicionadas classes no elemento HTML descrevendo exatamente quais propriedades e novidades são ou não nativamente suportadas.&lt;/li&gt;
&lt;li&gt;Depois disso você consegue ter os resultados descritos nos navegadores dinamicamente e então pode tomar decisões criando alternativas para aquelas propriedades não suportadas pelos browsers antigos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;como-funciona&#34;&gt;Como funciona&lt;/h3&gt;

&lt;p&gt;É simples: primeiro você baixa a versão mais atual da biblioteca no endereço &lt;a href=&#34;http://www.modernizr.com/&#34;&gt;http://www.modernizr.com/&lt;/a&gt;. O interessante é que você tem a opção para personalizar a biblioteca, indicando quais features você quer que a Modernizr teste no seu projeto.&lt;/p&gt;

&lt;p&gt;Depois você inclui esse pacote no seu HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
    &amp;lt;title&amp;gt;Teste de Modernizr&amp;lt;/title&amp;gt;
    &amp;lt;script src=&#34;modernizr-2.0.6.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Feito isso, insira uma classe &lt;em&gt;no-js&lt;/em&gt; no elemento &lt;em&gt;HTML&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html class=&#34;no-js&#34; lang=&#34;pt-br&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Quando a Modernizr rodar, ela irá substituir essa classe para uma &lt;em&gt;js&lt;/em&gt; se o browser estiver com o Javascript ligado, já te dando um feedback para tomar alguma atitude se o usuário estiver com o Javascript desligado.&lt;/p&gt;

&lt;p&gt;Junto com essa mudança são adicionadas outras classes, indicando o que o browser aceita nativamente ou o que ele não aceita. Ficará algo parecido com isso:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html class=&#34; js flexbox canvas canvastext webgl no-touch geolocation postmessage websqldatabase no-indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths&#34; lang=&#34;pt-br&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O browser que eu utilizei é o Safari/Mac. Pelo visto ele aceita bastante coisa. 😉&lt;/p&gt;

&lt;p&gt;O que o browser não aceita, a Modernizr insere uma classe com o prefixo &lt;strong&gt;no-&lt;/strong&gt; antes da classe, por exemplo: no-boxshadow, no-geolocation, no-touch etc.&lt;/p&gt;

&lt;p&gt;A Modernizr também cria um objeto Javascript contendo um valor booleano para cada uma dessas features, possibilitando a criação de testes. Um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;if (Modernizr.geolocation) {
       alert(&#34;Aceita&#34;)
} else {
       alert(&#34;Não Aceita&#34;)
}
&lt;/pre&gt;

&lt;h3 id=&#34;exemplos-de-utilidade&#34;&gt;Exemplos de utilidade&lt;/h3&gt;

&lt;p&gt;Exemplo bem básico: imagine que você queira utilizar o box-shadow em seu projeto. Browsers como o IE6,7,8 não reconhecem essa feature, então seria interessante darmos uma alternativa, como por exemplo, colocando uma borda em vez de sombra. Assim o elemento não fica tão diferente do que deveria.&lt;/p&gt;

&lt;p&gt;Como a Modernizr colocou uma classe no elemento HTML referente a aceitação das features, podemos utilizá-la fazendo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.loginBox {
    box-shadow:0 10px 10px rgba(0, 0, 0, 0.3);
}

.no-boxshadow .loginBox {
    border: 1px solid #CCC;
    border-bottom: 3px solid #CCC;
}
&lt;/pre&gt;

&lt;p&gt;Assim, se o browser não aceitar a propriedade box-shadow o usuário verá uma borda no lugar. Você pode fazer isso com praticamente qualquer nova feature do CSS3 e do HTML5. Uma &lt;a href=&#34;http://bit.ly/oA9jHu&#34; title=&#34;link externo&#34;&gt;listagem completa dessas features suportadas está aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ah, mais uma coisa: provavelmente você já utiliza um scriptzinho &lt;em&gt;html5.js&lt;/em&gt; para fazer com o que os Internet Explorers reconheçam as tags do HTML5, correto? O Modernizr já faz isso automaticamente. Sugiro que pare de utilizar o html5.js e passe a utilizar a Modernizr somente.&lt;/p&gt;

&lt;p&gt;A Modernizr facilita demais as coisas. A ideia é que você não prive seus projetos da utilização de features novas. A produção vai ficar mais eficaz e seu projeto sempre estará atualizado com as melhores práticas do mercado. Adote a Modernizr e seja feliz.&lt;/p&gt;

&lt;p&gt;Sugiro que você &lt;a href=&#34;http://www.modernizr.com/docs/&#34; title=&#34;link externo para a documentação da Modernizr&#34;&gt;dê uma lida na documentação&lt;/a&gt; da Modernizr. Tem bastante coisa interessante lá que você deveria saber.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 – Sombras em textos e elementos</title>
      <link>https://tableless.github.io/hugo-public/css3-sombras-em-textos-e-elementos/</link>
      <pubDate>Thu, 16 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-sombras-em-textos-e-elementos/</guid>
      <description>&lt;p&gt;Uma das vantagens mais interessantes que o CSS3 nos dá é a possibilidade de cada vez menos abrirmos o Photoshop. Não precisamos mais abrir o Photoshop para criar bordas arredondadas, gradientes e agora até mesmo sombras. Agora temos a possibilidade de inserirmos sombras em textos e em elementos. As propriedades tem nomes diferentes mas a mesma sintaxe. Veja abaixo:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;p&gt;p {&lt;/p&gt;

&lt;p&gt;text-shadow: 5px 5px 5px rbga(0,0,0,0.5);&lt;/p&gt;

&lt;p&gt;box-shadow: 5px 5px 5px rgba(0,0,0,0.5);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Esqueça agora o nome da propriedade e entenda melhor seus parâmetros: colocamos 3 números e por último a cor. Na cor utilizamos RGBA para termos controle sobre o canal de transparência da cor. Você pode ver um &lt;a href=&#34;http://tableless.com.br/css3-breve-introducao-a-rgba&#34; title=&#34;Entenda como funciona o RGBA&#34;&gt;artigo sobre RGBA neste link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Agora vamos entender o significado dos números: os dois primeiros números se referem a posição da sombra: o primeiro número é referente a posição vertical começando pelo topo e o segundo número é referente a posição horizontal, começando pela esquerda.&lt;/p&gt;

&lt;p&gt;O terceiro número se refere ao Blur. Sua sombra pode ser rígida ou &amp;#8220;esfumaçada&amp;#8221;. Isso depende do design que você criou o pegou para implementar. Você controla a rigidez da sombra por este número.&lt;/p&gt;

&lt;p&gt;Praticamente todo o controle de sombra que você tem no Illustrator, você agora tem com o CSS3.&lt;/p&gt;

&lt;p&gt;Na minha opinião pessoal há ainda algumas features que poderiam ser incluídas nessa especificação como por exemplo a possibilidade de colocarmos sombras apenas nos lados que quisermos e termos o controle individual das sombras. Mais ou menos como temos na propriedade border, onde podemos inserir borda apenas de um lado do objeto e podemos controlar as características dessa borda.&lt;/p&gt;

&lt;p&gt;Você &lt;a href=&#34;http://tableless.github.com/exemplos/css3-shadow.html&#34; title=&#34;Exemplo de sombra com CSS3&#34;&gt;pode ver um exemplo em nosso Github&lt;/a&gt;. Lembre-se que codificar é de graça&amp;#8230; Faça um teste agora, antes de deixar este post de lado. 😉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 – Módulo Template Layout</title>
      <link>https://tableless.github.io/hugo-public/css3-modulo-template-layout/</link>
      <pubDate>Mon, 30 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-modulo-template-layout/</guid>
      <description>

&lt;p&gt;Talvez você me chame de louco, mas para mim a parte mais fácil de desenvolver um site com CSS é o planejamento e diagramação do layout. Coincidentemente é a parte que mais os desenvolvedores tem problemas crossbrowser ou por falta de recursos mais avançados. Mas se você parar para pensar, apenas uma propriedade cuida dessa parte, que é a propriedade float. De longe, para mim, o float é a propriedade mais importante que há no CSS. Se o IE não soubesse o que é float, até hoje nós não estaríamos fazendo sites com CSS. O float cuida de toda a diagramação do site, desde os elementos que definirão as áreas mestres do site até os pequenos detalhes de imagens e ícones.&lt;/p&gt;

&lt;p&gt;A propriedade float é muito simples de se entender. O problema não é o funcionamento, mas os efeitos que a propriedade float causa nos elementos próximos. Se você pede para duas colunas ficarem flutuando à esquerda e outra coluna à direita, o rodapé sobe. Ou se você coloca um elemento envolvendo outros elementos com float, esse elemento perde a altura. Estes são problemas corriqueiros que já tem soluções inteligentes e que não apresentam chateações mais graves.&lt;/p&gt;

&lt;p&gt;Infelizmente o float não é o ideal para a diagramação e organização dos elementos do layout. Ele resolve muitos problemas, mas deixa a desejar em diversos sentidos. O float está completamente ligado a ordem dos elementos no HTML. Existem técnicas que você consegue fazer quase que qualquer oganização visual sem encostar no código HTML. Mas há outras necessidades que invariavelmente você precisará modificar a ordem dos elementos no meio do HTML para que a diagramação do site saia conforme o esperado. Essa organização do HTML pode alterar desde programação server-side e até resultados de SEO e acessibilidade. Por isso é interessante que o HTML fique organizado de forma que ele supre as necessidades dessas bases. Sua organização visual deve ser independente desta organização.&lt;/p&gt;

&lt;p&gt;Tendo em vista estes e outros problemas o W3C criou um novo módulo. Na verdade ele não é o único, e nem pode ser para que tenhamos diversas formas de trabalhar. O módulo em questão é chamado de Template Layout. Esse módulo consiste em uma forma de criarmos e organizarmos os elementos e informações do layout de forma menos espartana e mais flexível.&lt;/p&gt;

&lt;p&gt;Podemos dividir a construção do layout em duas grandes partes: 1) Definição dos elementos mestres e grid a ser seguido. 2) Formatação de font, cores, background, bordas etc.&lt;/p&gt;

&lt;p&gt;As propriedades nesta especificação trabalham associando uma política de layout de um elemento. Essa política é chamada de template-based positioning (não tem nada a ver com a propriedade position, pelo contrário é uma alternativa) que dá ao elemento uma grid invisível para alinhar seus elementos descendentes.&lt;/p&gt;

&lt;p&gt;Porque o layout deve se adaptar em diferentes janelas e tamanhos de papéis, as colunas e linhas do grid deve ser fixas ou flexiveis dependendo do tamanho.&lt;/p&gt;

&lt;p&gt;O W3C mostra alguns casos comuns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Páginas complexas com múltiplas barras de navegação em áreas com posições fixas como publicidade, submenus e etc.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Formulários complexos, onde o alinhamento de labels e campos pode&lt;/p&gt;

&lt;p&gt;m ser facilmente definidos com as propriedades deste módulo com a ajuda das propriedades de margin, padding e tables.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GUIs, onde botões, toolbars, labels,&lt;/p&gt;

&lt;p&gt;ícones etc, tem alinhamentos complexos e precisam estar sempre alinhados caso o tamanho ou a resolução da tela mudam.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Medias que são paginadas, como medias de impressão onde cada página são divididos em áreas fixas para conteúdos de gêneros diferentes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Template-based positioning são uma alternativa para a propriedade position com o valor absolute. Antigamente lembro-me que quase todos os desenvolvedores tentavam organizar e diagramar layouts utilizando position. Não que seja errado, mas definitivamente não é a melhor forma. Costumo dizer em meus cursos e palestras que position é para detalhes. Nada muito grande, mas para pequenos detalhes. Usamos position para posicionarmos elementos que não tem relação direta com sua posição no código HTML. Ou seja, não importa onde o elemento esteja, o position:absolute; irá posicionar o elemento nas coordenadas que você quiser.&lt;/p&gt;

&lt;h3 id=&#34;sintaxe-e-funcionamento&#34;&gt;Sintaxe e funcionamento&lt;/h3&gt;

&lt;p&gt;O módulo Template Layout basicamente define slots de layout para que você encaixe e posicione seus elementos. O mapeamento dos slots é feito com duas propriedades que já conhecemos que este módulo adiciona mais alguns valores e funcionalidades, são as propriedades position e display.&lt;/p&gt;

&lt;p&gt;A propriedade display define como será o Grid, ou seja, quantos espaços úteis terá o layout.&lt;/p&gt;

&lt;p&gt;A propriedade position irá posicionar seus elementos nestes slots.&lt;/p&gt;

&lt;p&gt;Veja o código HTML abaixo:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;div class=&#34;geral&#34;&gt;
  &lt;nav class=&#34;menu&#34;&gt;&amp;#8230;&lt;/nav&gt; &lt;aside class=&#34;menulateral&#34;&gt;&amp;#8230;&lt;/aside&gt; &lt;aside class=&#34;publicidade&#34;&gt;&amp;#8230;&lt;/aside&gt; &lt;article class=&#34;post&#34;&gt;&amp;#8230;&lt;/article&gt; &lt;footer&gt;&amp;#8230;&lt;/footer&gt;
&lt;/div&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Agora iremos definir a posição destes elementos. O código CSS seria assim:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;.geral {&lt;/p&gt;

&lt;p&gt;display: &amp;#8220;aaa&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;bcd&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;eee&amp;#8221;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;nav.menu {position:a;}&lt;/p&gt;

&lt;p&gt;aside.menulateral {position:b;}&lt;/p&gt;

&lt;p&gt;aside.publicidade {position:d;}&lt;/p&gt;

&lt;p&gt;article.post {position:c;}&lt;/p&gt;

&lt;p&gt;footer {position:e;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;h3 id=&#34;o-funcionamento-da-propriedade-display&#34;&gt;O funcionamento da propriedade display&lt;/h3&gt;

&lt;p&gt;A propriedade display define a organização dos slots. Um slot é o local onde os elementos serão colocados.&lt;/p&gt;

&lt;p&gt;Aqui o elemento display trabalha como um table, onde seu conteúdo será colocando em colunas e linhas. A única diferença é que o número de linhas e colunas não dependem do conteúdo. A outra principal diferença é que a ordem dos descendentes no código não importa. Ou seja, não importa a estrutura dos elementos no HTML, você pode colocá-los em qualquer lugar do layout.&lt;/p&gt;

&lt;p&gt;Cada letra diferente é um slot de conteúdo diferente. O @ define um sinal para um slot padrão. E o &amp;#8220;.&amp;#8221; (ponto) define um espaço em branco.&lt;/p&gt;

&lt;p&gt;Quando repetimos as letras como no exemplo anterior, tanto na horizontal quanto na vertical, é formado um slot único que se expande para o tamanho da quantidade de slots. Lembra do colspan ou rowspan utilizados na tabela? Pois é, funciona igualzinho.&lt;/p&gt;

&lt;p&gt;Não é possível fazer um slot que não seja retangular ou vários slots com a mesma letra. Um template sem letra nenhuma também não é possível. Um template com mais de um @ também é proibido. Se houverem esses erros a declaração é ignorada pelo browser.&lt;/p&gt;

&lt;p&gt;Pra definir a altura da linha (row-height) podemos utilizar o valor padrão &amp;#8220;auto&amp;#8221;, que define altura que a altura da linha é feito de acordo com a quantidade de conteúdo no slot. Você pode definir um valor fixo para a altura. Não é possível definir um valor negativo. Quando definimos um * (asterísco) para a altura, isso quer dizer que todas as alturas de linha serão iguais.&lt;/p&gt;

&lt;p&gt;A largura da coluna (col-width) é definida com valores fixos, como o row-height. Podemos definir também o valor de * que funciona exatamente igual ao altura de linha, mas aplicados a largura da coluna. Há dois valores chamados max-content e min-content que fazem com que a largura seja determinada de acordo com o conteúdo. Outro valor é o minmax(p,q) que funciona assim: a largura das colunas são fixadas para ser maiores ou iguais a p e menores ou iguais a q. Pode haver um espaço branco (white space) em volta de p e q. Se q &amp;gt; p, então q é ignorado e o minmax(p,q) é tratado como minmax(p,p). O valor fit-content é o equivalente a minmax(min-content, max-content).&lt;/p&gt;

&lt;h4 id=&#34;definindo-a-largura-e-altura-dos-slots&#34;&gt;Definindo a largura e altura dos slots&lt;/h4&gt;

&lt;p&gt;Para definir a altura dos slots, utilizamos uma sintaxe diretamente na propriedade display. Veja abaixo um exemplo de como podemos fazer isso:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;.geral {&lt;/p&gt;

&lt;p&gt;display: &amp;#8220;a a a&amp;#8221; /150px&lt;/p&gt;

&lt;p&gt;&amp;#8220;b c d&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;e e e&amp;#8221; / 150px&lt;/p&gt;

&lt;p&gt;100px 400px 100px;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Formatando de uma maneira que você enteda, fica assim:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;.geral {&lt;/p&gt;

&lt;p&gt;display: &amp;#8220;a a a&amp;#8221; /150px&lt;/p&gt;

&lt;p&gt;&amp;#8220;b c d&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;e e e&amp;#8221; /150px&lt;/p&gt;

&lt;p&gt;100px 400px 100px;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Ou seja, a primeira coluna do grid terá 100px de largura, a segunda 400px e a terceira 100px.&lt;/p&gt;

&lt;p&gt;As medidas que coloquei ao lado, iniciando com uma / (barra) definem a altura das linhas. Logo a primeira linha terá 150px e a terceira linha também. A linha do meio, como não tem altura definida terá a altura de acordo com a quantidade de conteúdo.&lt;/p&gt;

&lt;p&gt;O espaço entre as colunas são definidos com &amp;#8220;.&amp;#8221; (pontos). Veja o exemplo abaixo:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;.geral {&lt;/p&gt;

&lt;p&gt;display: &amp;#8220;a a a&amp;#8221; /150px&lt;/p&gt;

&lt;p&gt;&amp;#8220;&amp;hellip;&amp;#8221; /50px&lt;/p&gt;

&lt;p&gt;&amp;#8220;b c d&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;&amp;hellip;&amp;#8221; /50px&lt;/p&gt;

&lt;p&gt;&amp;#8220;e e e&amp;#8221; /150px&lt;/p&gt;

&lt;p&gt;100px 400px 100px;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;No exemplo acima fiz duas colunas no código compostos por pontos em vez de fazer com letras. Isso quer dizer que entre as colunas do grid haverá um espaço em branco de 50px de altura. Veja a imagem abaixo para entender melhor o código:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/05/templatelayout1.gif&#34; alt=&#34;&#34; title=&#34;templatelayout1&#34; width=&#34;364&#34; height=&#34;336&#34; class=&#34;alignnone size-full wp-image-3767&#34; srcset=&#34;uploads/2011/05/templatelayout1.gif 364w, uploads/2011/05/templatelayout1-300x276.gif 300w&#34; sizes=&#34;(max-width: 364px) 100vw, 364px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;o-funcionamento-da-propriedade-position&#34;&gt;O funcionamento da propriedade position&lt;/h3&gt;

&lt;p&gt;O valor da propriedade position especifica qual linha e coluna o elemento será colocado no template. Você escreve apenas uma letra por elemento. Vários elementos podem ser colocados em um mesmo slot. Logo estes elementos terão o mesmo valor de position.&lt;/p&gt;

&lt;p&gt;Abaixo veja uma imagem que pegamos diretamente do exemplo do W3C. O layout é muito simples:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/05/Untitled.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/05/Untitled-300x89.png&#34; alt=&#34;&#34; title=&#34;Untitled&#34; width=&#34;300&#34; height=&#34;89&#34; class=&#34;alignnone size-medium wp-image-3768&#34; srcset=&#34;uploads/2011/05/Untitled-300x89.png 300w, uploads/2011/05/Untitled.png 914w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este layout é representado pelo código abaixo. Primeiro o HTML:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;ul id=&#34;nav&#34;&gt;
  &lt;li&gt;
    navigation
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&#34;content&#34;&gt;
  &lt;div class=&#34;module news&#34;&gt;
    &lt;h3&gt;
      Weather
    &lt;/h3&gt;
    
    &lt;p&gt;
      There will be weather
    &lt;/p&gt;&lt;/p&gt;
  &lt;/div&gt;
  

&lt;p&gt;&lt;div class=&#34;module sports&#34;&gt;
    &lt;h3&gt;
      Football
    &lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  People like football.
&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;module sports&#34;&gt;
    &lt;h3&gt;
      Chess
    &lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  There was a brawl at the chess tournament
&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;module personal&#34;&gt;
    &lt;h3&gt;
      Your Horoscope
    &lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  You&amp;amp;#8217;re going to die (eventually).
&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p id=&#34;foot&#34;&gt;
    Copyright some folks
  &lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Agora veja o CSS com toda a mágica:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;body {&lt;/p&gt;

&lt;p&gt;display: &amp;#8220;a b&amp;#8221;&lt;/p&gt;

&lt;p&gt;10em *;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;#nav {&lt;/p&gt;

&lt;p&gt;position: a;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;#content {&lt;/p&gt;

&lt;p&gt;position: b;&lt;/p&gt;

&lt;p&gt;display: &amp;#8220;c . d . e &amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;&amp;hellip; . . &amp;#8221; /1em&lt;/p&gt;

&lt;p&gt;&amp;#8220;. . f . . &amp;#8221;&lt;/p&gt;

&lt;p&gt;* 1em * 1em *;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;.module.news {position: c;}&lt;/p&gt;

&lt;p&gt;.module.sports {position: d;}&lt;/p&gt;

&lt;p&gt;.module.personal {position: e;}&lt;/p&gt;

&lt;p&gt;#foot {position: f;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Lembre-se que não importa a posição dos elementos no código. E essa é a mágica. Podemos organizar o código HTML de acordo com nossas necessidades e levando em consideração SEO, Acessibilidade e processo de manutenção. O HTML fica totalmente intacto separado de qualquer formatação. Muito, mas muito interessante.&lt;/p&gt;

&lt;h3 id=&#34;pseudo-elemento-slot&#34;&gt;Pseudo-elemento ::slot()&lt;/h3&gt;

&lt;p&gt;Você pode formatar um slot especifico simplesmente declarando-o no CSS. Suponha que você queira que um determinado slot tenha um fundo diferente, alinhamento e etc&amp;#8230; Essa formatação será aplicada diretamente no slot e não no elemento que você colocou lá. Fica mais simples de se formatar porque você não atrela um estilo ao elemento e sim ao slot. Se você precisar posicionar aquele elemento em outro lugar, você consegue facilmente.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;body { display: &amp;#8220;aaa&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;bcd&amp;#8221; }&lt;/p&gt;

&lt;p&gt;body::slot(b) { background: #FF0 }&lt;/p&gt;

&lt;p&gt;body::slot&amp;copy;, body::slot(d) { vertical-align: bottom }&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;As propriedades aplicadas no pseudo elemento slot() seguem abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Todos as propriedades background.&lt;/li&gt;
&lt;li&gt;vertical-align&lt;/li&gt;
&lt;li&gt;overflow&lt;/li&gt;
&lt;li&gt;box-shadow, block-flow e direction ainda estão sendo estudados pelo W3C se elas entrarão ou não.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mas-e-o-float&#34;&gt;Mas e o float?&lt;/h3&gt;

&lt;p&gt;É senhores&amp;#8230; Eu acho que o float tem seus dias contados para a criação de estruturas de layouts. Quando utilizamos o float para estruturar o layout, nós dependemos profundamente da organização e posição dos elementos no código HTML. Não estou dizendo que o float ficará obsoleto, você ainda vai utilizá-lo e muito. Você vai pará-lo de utilizar para criar a base estrutural do site. Ou seja, a estrutura básica de divisão de conteúdo será feita pelo Template Layout, mas muitos dos detalhes internos e organização dos elementos contidos nos elementos mestres serão feitos com float.&lt;/p&gt;

&lt;p&gt;Com o Template Layout a estrutura do layout não depende da posição dos elementos do HTML no código, você poderá otimizar o código ao máximo para os leitores de tela e sistemas de busca, já que estes meios de acesso prezam pela estrutura do seu conteúdo.&lt;/p&gt;

&lt;h3 id=&#34;já-funciona&#34;&gt;Já funciona?&lt;/h3&gt;

&lt;p&gt;Sim, já funciona, mas não nativamente nos browser. Esta especificação ainda é um rascunho do W3C e por isso os browsers ainda não a suportam. Mesmo assim um desenvolvedor criou um script em Javascript que entende o CSS desta especificação e simula os resultados. Você &lt;a href=&#34;http://migre.me/4FL7D&#34;&gt;pode baixar o script aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veja um &lt;a href=&#34;http://migre.me/4FLGU&#34; title=&#34;exemplo do módulo template layout do CSS3&#34;&gt;exemplo funcionando aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 – Animation e regra keyframe</title>
      <link>https://tableless.github.io/hugo-public/css3-animation-keyframe/</link>
      <pubDate>Mon, 09 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-animation-keyframe/</guid>
      <description>

&lt;p&gt;A propriedade trasition trabalha de forma muito simples e flexível. Você praticamente diz para o browser qual o valor inicial e o valor final para que ele aplique a transição automaticamente, controlamos praticamente apenas o tempo de execução. Para termos mais controle sobre a animação temos a propriedade animation que trabalha juntamente com a rule keyframe.&lt;/p&gt;

&lt;p&gt;Basicamente você consegue controlar as características do objeto e suas diversas transformações definindo fases da animação. Observe o código abaixo e veja seu funcionamento:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@-webkit-keyframes rodar {
    from {
        -webkit-transform:rotate(0deg);
    }
    to {
        -webkit-transform:rotate(360deg);
    }
}
&lt;/pre&gt;

&lt;p&gt;O código acima define um valor inicial e um valor final. Agora vamos aplicar esse código a um elemento. Minha ideia é fazer um DIV girar. 😉&lt;/p&gt;

&lt;p&gt;O código HTML até agora é este. Fiz apenas um div e defini este keyframe:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html lang=&amp;rdquo;pt-br&amp;rdquo;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&amp;rdquo;utf-8&amp;rdquo;&amp;gt;
    &amp;lt;style&amp;gt;
    @-webkit-keyframes rodaroda {
        from {
            -webkit-transform:rotate(0deg);
        }
        to {
            -webkit-transform:rotate(360deg);
        }
    }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Primeiro você define a função de animação, no caso é o nosso código que define um valor inicial de 0 graus e um valor final de 360 graus. Agora vamos definir as características deste DIV.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
    width:50px;
    height:50px;
    margin:30% auto 0;
    background:black;
}
&lt;/pre&gt;

&lt;p&gt;Nas primeiras linhas defini qual será o estilo do div. Ele terá uma largura e uma altura de 50px. A margin de 30% do topo garantirá um espaço entre o objeto e o topo do documento, e background preto.&lt;/p&gt;

&lt;p&gt;A propriedade animation tem uma série de propriedades que podem ser resumidas em um shortcode bem simples. Veja a tabela logo a seguir para entender o que cada propriedade signifca:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;animation-name&lt;/dt&gt;
&lt;dd&gt;Especificamos o nome da função de animação&lt;/dd&gt;
&lt;dt&gt;animation-duration&lt;/dt&gt;
&lt;dd&gt;Define a duração da animação. O valor é declarado em segundos.&lt;/dd&gt;
&lt;dt&gt;animation-timing-function&lt;/dt&gt;
&lt;dd&gt;Descreve qual será a progressão da animação a cada ciclo de duração. Existem uma série de valores possíveis e que pode ser que o seu navegador ainda não suporte, mas são eles: ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) [, ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)]*. O valor padrão é ease.&lt;/dd&gt;
&lt;dt&gt;animation-interation-count&lt;/dt&gt;
&lt;dd&gt;Define o número de vezes que o ciclo deve acontecer. O padrão é um, ou seja, a animação acontece uma vez e pára. Pode ser também infinito definindo o valor infinite no valor.&lt;/dd&gt;
&lt;dt&gt;animation-direction&lt;/dt&gt;
&lt;dd&gt;Define se a animação irá acontecer ou não no sentido inverso em ciclos alternados. Ou seja, se a animação está acontecendo no sentido horário, ao acabar a animação, o browser faz a mesma animação no elemento, mas no sentido antihorário. Os valores são alternate ou normal.&lt;/dd&gt;
&lt;dt&gt;animation-play-state&lt;/dt&gt;
&lt;dd&gt;Define se a animação está acontecendo ou se está pausada. Você poderá por exemplo, via script, pausar a animação se ela estiver acontecendo. Os valores são running ou paused.&lt;/dd&gt;
&lt;dt&gt;animation-delay&lt;/dt&gt;
&lt;dd&gt;Define quando a animação irá começar. Ou seja, você define um tempo para que a animação inicie. O valor 0, significa que a animação começará imediatamente.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Voltando para o nosso código, vamos aplicar algumas dessas propriedades:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
    width:50px;
    height:50px;
    margin:30% auto 0;
    background:black;

    -webkit-animation-name: rodaroda;
    -webkit-animation-duration: 0.5s;
    -webkit-animation-timing-function: linear;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-direction: alternate;
}
&lt;/pre&gt;

&lt;p&gt;Veja que na propriedade animation-name chamamos o mesmo nome que demos na nossa função de keyframe logo no começo da explicação. Depois definimos uma duração de ciclo de meio segundo. Definimos que o comportamento da animação será linear, e com a propriedade animation-iteration-count definimos que ele girará infinitamente. E por último definimos pelo animation-direction que a animação deverá ser alternada, ou seja, o DIV girará para um lado, e quando alcançar o final da animação, o browser deverá alternar essa animação.&lt;/p&gt;

&lt;p&gt;Podemos melhorar esse código utilizando a versão shortcode, que é mais recomendado. Veja a ordem que devemos escrever as propriedades animation em forma de shortcode:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;animation&lt;/strong&gt;: animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction] , animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction&lt;/p&gt;

&lt;p&gt;Aplicando isso ao nosso código:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
    width:50px;
    height:50px;
    margin:30% auto 0;
    background:black;

    -webkit-animation: rodaroda 0.5s linear infinite alternate;
}
&lt;/pre&gt;

&lt;p&gt;Pronto. Agora temos um elemento que gira sem parar, hora para direita hora para esquerda.&lt;/p&gt;

&lt;h3 id=&#34;definindo-ciclos&#34;&gt;Definindo ciclos&lt;/h3&gt;

&lt;p&gt;Nós definimos no keyframe do nosso último exemplo apenas um início e um fim. Mas e se quiséssemos que ao chegar na metade da animação o nosso elemento ficasse com o background vermelho? Ou que ele mudasse de tamanho, posição e etc? É aí onde podemos flexibilizar melhor nosso keyframe definindo as fases da animação. Por exemplo, podemos dizer para o elemento ter uma cor de background diferente quando a animação chegar aos 10% do ciclo, e assim por diante.&lt;/p&gt;

&lt;p&gt;Veja o exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@-webkit-keyframes rodaroda {
    0% {
        -webkit-transform:rotate(0deg);
    }
    50% {
        background:red;
        -webkit-transform:rotate(180deg);
    }
    100% {
        -webkit-transform:rotate(360deg);
    }
}
&lt;/pre&gt;

&lt;p&gt;Definimos acima que o início da animação o elemento começará na posição normal, 0 graus.&lt;/p&gt;

&lt;p&gt;Quando a animação chegar aos 50% do ciclo, o elemento deverá ter girado para 180 graus e o background dele deve ser vermelho. E quando a animação chegar a 100% o elemento deve ter girado ao todo 360 graus e o background, como não está sendo definido, volta ao valor padrão, no nosso caso black, que foi definido no CSS onde formatamos este DIV.&lt;/p&gt;

&lt;p&gt;Logo nosso elemento girará pra sempre e ficará alternando a cor de fundo de preto para vermelho. Fiz um exemplo bem simples modificando apenas o background, mas você pode muito bem definir um position e modificar os valores de left e top para fazer o elemento se movimentar.&lt;/p&gt;

&lt;p&gt;No exemplo também defini apenas 3 estágios (0%, 50% e 100%) você pode definir um maior número de estágios: 5%, 10%, 12%, 16% e etc&amp;#8230; Adequando as fases da animação às suas necessidades.&lt;/p&gt;

&lt;p&gt;Há exemplos muito interessantes na internet onde podemos ver todo o poder das animações feitas pela CSS. Veja o exemplo que fizemos aqui neste texto no endereço: &lt;a href=&#34;http://migre.me/4ubym&#34;&gt;http://migre.me/4ubym&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 – Breve introdução ao RGBA</title>
      <link>https://tableless.github.io/hugo-public/css3-breve-introducao-a-rgba/</link>
      <pubDate>Mon, 02 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-breve-introducao-a-rgba/</guid>
      <description>

&lt;h3 id=&#34;introdução-ao-rgb&#34;&gt;Introdução ao RGB&lt;/h3&gt;

&lt;p&gt;Normalmente em web trabalhamos com cores na forma de hexadecimal. É a forma mais comum e mais utilizada desde os primórdios do desenvolvimento web. Mesmo assim, há outros formatos menos comuns que funcionam sem problemas, um destes formatos é o RGB. O RGB são 3 conjuntos de números que começam no 0 e vão até 255 (0% até 100%), onde o primeiro bloco define a quantidade de vermelho (Red), o segundo bloco a quantidade de verde (Green) e o último bloco a quantidade de azul (Blue). A combinação destes números formam todas as cores que você pode imaginar.&lt;/p&gt;

&lt;p&gt;No HTML o RGB pode ser usado em qualquer propriedade que tenha a necessidade de cor, como: color, background, border etc. Exemplo:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;p {&lt;/p&gt;

&lt;p&gt;background:rgb(255,255,0);&lt;/p&gt;

&lt;p&gt;padding:10px;&lt;/p&gt;

&lt;p&gt;font:13px verdana;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Este código RGB define que o background o elemento P será amarelo.&lt;/p&gt;

&lt;h3 id=&#34;aplicando-o-rgba-e-a-diferença-da-propriedade-opacity&#34;&gt;Aplicando o RGBA e a diferença da propriedade OPACITY&lt;/h3&gt;

&lt;p&gt;Até então nós só podíamos escrever cores sólidas, sem nem ao menos escolhermos a opacidade dessa cor. O CSS3 nos trouxe a possibilidade de modificar a opacidade dos elementos via propriedade opacity. Lembrando que quando modificamos a opacidade do elemento, tudo o que está contido nele também fica transparente e não apenas o background ou a cor dele. &lt;a href=&#34;http://tableless.github.com/exemplos/rgba/&#34; title=&#34;Teste de RGBA&#34;&gt;Veja o exemplo e compare&lt;/a&gt;. É aí que entra o RGBA.&lt;/p&gt;

&lt;p&gt;O RGBA funciona da mesma forma que o RGB. No caso do RGBA, além dos 3 canais RGB (Red, Green e Blue) há um quarto canal, A (Alpha) que controla a opacidade da cor. Nesse caso, podemos controlar a opacidade da cor de background, borda, color ou qualquer propriedade que contenha cor sem afetar a transparência dos outros elementos:&lt;/p&gt;

&lt;p&gt;Veja um exemplo aplicado abaixo:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;p {&lt;/p&gt;

&lt;p&gt;background:rgba(255,255,0, 0.5);&lt;/p&gt;

&lt;p&gt;padding:10px;&lt;/p&gt;

&lt;p&gt;font:13px verdana;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;O último valor é referente ao canal Alpha, onde 1 é totalmente visível e 0 é totalmente invisível. No exemplo acima está com uma opacidade de 50%.&lt;/p&gt;

&lt;p&gt;Como o Hexadecimal, você não precisa decorar todos estes números. Hoje, qualquer programa gráfico já dá o código do RGB da cor utilizada. O Hexadecimal não foi descontinuado. Se caso você tenha alguma cor que não ficará transparente ou algo do tipo, você pode continuar utilizando hexa e para aqueles que tem transparência, você pode utilizar o RGBA sem problemas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/rgba/&#34; title=&#34;Teste de RGBA&#34;&gt;Veja novamente o exemplo aqui&lt;/a&gt; e o &lt;a href=&#34;https://github.com/tableless/exemplos/tree/gh-pages/rgba&#34; title=&#34;Código no Github&#34;&gt;código no github do Tableless&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>