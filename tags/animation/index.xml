<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Animation on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/animation/index.xml</link>
    <description>Recent content in Animation on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/animation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MaterialUp – Uma coleção de conceitos usando Material Design</title>
      <link>https://tableless.github.io/hugo-public/materialup-uma-colecao-de-conceitos-usando-material-design/</link>
      <pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/materialup-uma-colecao-de-conceitos-usando-material-design/</guid>
      <description>&lt;p&gt;O MaterialUp é um site que lista uma série de animações e conceitos que usam as regras visuais e de comportamento do &lt;a href=&#34;http://tableless.com.br/anotacoes-sobre-material-design-google/&#34;&gt;Material Design do Google&lt;/a&gt;. Designers criam animações, comportamentos e conceitos de como aplicativos e elementos se comportariam se fossem feitos usando as regras do Material Design. O legal é perceber que várias animações ali podem ser feitas usando CSS e JS. Mas já vi alguns experimentos ruins, que falharam horrorosamente (&lt;a href=&#34;http://codepen.io/zavoloklom/pen/wtApI&#34;&gt;como este&lt;/a&gt;) ao tentar simular os comportamentos do Material Design com CSS/JS. Não é que não dá pra fazer, mas é que CSS ainda muito verboso para fazer animações tão detalhadas como estas e usar JS é querer misturar as coisas. Se você estiver falando de um sistema, onde há uma base forte de design, é até possível fazer uma estrutura supimpa, com animações de CSS, que possa se sustentar por algum tempo. A manutenção vai ser terrível, mas vai dar para o gasto. Dá uma olhada em alguns conceitos que tem no MaterialUp. Os primeiros são até feitos com CSS.&lt;/p&gt;

&lt;p data-height=&#34;513&#34; data-theme-id=&#34;1482&#34; data-slug-hash=&#34;EBtga&#34; data-default-tab=&#34;result&#34; data-user=&#34;Michiel&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/Michiel/pen/EBtga/&#39;&gt;CSS Animation Material Design&lt;/a&gt; by Michiel Bijl (&lt;a href=&#39;http://codepen.io/Michiel&#39;&gt;@Michiel&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p data-height=&#34;598&#34; data-theme-id=&#34;1482&#34; data-slug-hash=&#34;yyEEKp&#34; data-default-tab=&#34;result&#34; data-user=&#34;pixelass&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/pixelass/pen/yyEEKp/&#39;&gt;#1 @MaterialUp concepts&lt;/a&gt; by Gregor Adams (&lt;a href=&#39;http://codepen.io/pixelass&#39;&gt;@pixelass&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p data-height=&#34;605&#34; data-theme-id=&#34;1482&#34; data-slug-hash=&#34;zxZmYj&#34; data-default-tab=&#34;result&#34; data-user=&#34;pixelass&#34; class=&#39;codepen&#39;&gt;
  See the Pen &lt;a href=&#39;http://codepen.io/pixelass/pen/zxZmYj/&#39;&gt;Material design music app (pure CSS)&lt;/a&gt; by Gregor Adams (&lt;a href=&#39;http://codepen.io/pixelass&#39;&gt;@pixelass&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.materialup.com/posts/practice-animation&#34;&gt;&lt;img src=&#34;http://assets0.materialup.com/uploads/3178a08d-5778-4edc-8a71-5deed4579b31/___-1.gif&#34; width=&#34;800&#34; height=&#34;600&#34; class=&#34;alignnone&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.materialup.com/posts/animations-in-pocket-casts&#34;&gt;&lt;img src=&#34;http://assets0.materialup.com/uploads/d5310357-ec6c-4775-a8af-719bc88e5007/pocketcasts5.gif&#34; width=&#34;461&#34; height=&#34;148&#34; class=&#34;alignnone&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.materialup.com/posts/candy-shop&#34;&gt;&lt;img src=&#34;http://assets0.materialup.com/uploads/090cba2a-8e00-4073-a3c4-3488dea8e7c4/open-uri20150327-11-1scyxbk&#34; width=&#34;800&#34; height=&#34;600&#34; class=&#34;alignnone&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.materialup.com/posts/blob&#34;&gt;&lt;img src=&#34;http://assets0.materialup.com/uploads/d58d0aaf-c182-4db2-804c-654ddc42cb11/blobb.gif&#34; width=&#34;800&#34; height=&#34;600&#34; class=&#34;alignnone&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.materialup.com/posts/total-apps&#34;&gt;&lt;img src=&#34;http://assets0.materialup.com/uploads/7aa9602a-6f90-4907-9ad3-f05d1df6e739/total_apps.png&#34; width=&#34;800&#34; height=&#34;600&#34; class=&#34;alignnone&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.materialup.com/posts/profile-ui&#34;&gt;&lt;img src=&#34;http://assets0.materialup.com/uploads/93aa4233-7082-429f-b5d0-dd397ac01714/shot.png&#34; width=&#34;800&#34; height=&#34;600&#34; class=&#34;alignnone&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Transforms</title>
      <link>https://tableless.github.io/hugo-public/css-transforms/</link>
      <pubDate>Mon, 10 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css-transforms/</guid>
      <description>

&lt;p&gt;O W3C descreve CSS Transform assim:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS 2D Transforms allow elements rendered by CSS to be trans- formed in two-dimensional space.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Há dois tipos de CSS Transforms: no formato 2D e 3D. Veremos aqui apenas o formato 2D que é o que tem mais suporte entre os browsers. Testaremos com Firefox 4, Safari 5 e Opera 10.5. Perceba que o código estará com o prefixo de cada browser para que não haja problemas em browsers que não reconheçam as propriedades que iremos aplicar.&lt;/p&gt;

&lt;p&gt;Temos abaixo um exemplo com 3 imagens. O código HTML é o seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;img src=&#34;http://tableless.github.com/exemplos/csstransforms/images/img1.png&#34; alt=&#34;&#34; /&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;img src=&#34;http://tableless.github.com/exemplos/csstransforms/images/img2.png&#34; alt=&#34;&#34; /&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;img src=&#34;http://tableless.github.com/exemplos/csstransforms/images/img3.png&#34; alt=&#34;&#34; /&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Apliquei o código CSS abaixo para que fique mais apresentável:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    background:#EFEFEF;
}
ul {
    width:900px;
    margin:100px auto 0;
}
ul li {
    display:inline-block;
    list-style:none;
}

ul li img {
    vertical-align:middle;
    border:15px solid #FFF;
}
&lt;/pre&gt;

&lt;p&gt;A propriedade transform irá modificar a forma do elemento. Abaixo vamos conhecer alguns dos valores que iremos aplicar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;scale&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O valor scale modificará a dimensão do elemento. Ele aumentará proporcionalmente o tamanho do elemento levando em consideração o tamanho original do elemento.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;skew&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Skew modificará os angulos dos elementos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;translation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O translation moverá o elemento no eixo X e Y. O interessante é que você não precisa se preocupar com floats, positions, margins e etc. Se você aplica o translation, ele moverá o objeto e pronto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rotate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O rotate rotaciona o elemento levando em consideração seu ângulo, especialmente quando o ângulo é personalisado com o transform-origin.&lt;/p&gt;

&lt;h3 id=&#34;como-funciona&#34;&gt;Como funciona&lt;/h3&gt;

&lt;h4 id=&#34;scale&#34;&gt;Scale&lt;/h4&gt;

&lt;p&gt;Adicionando o código abaixo, ao passarmos o mouse em cima das imagens, sua escala aumentará. Para entender o valor de referência da escala: 1 é o tamanho original do elemento. 2 é o dobro deste tamanho. Neste nosso exemplo diminui pela metade o tamanho da imagem ao passar o mouse aumentei em em 30% o&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;ul li img {
    -webkit-transform:scale(0.5); /* prefixo para browsers webkit */
    -moz-transform:scale(0.5); /* prefixo para browsers gecko */
    -o-transform:scale(0.5); /* prefixo para opera */
    transform:scale(0.5);
}

ul li img:hover {
    -webkit-transform:scale(1.3); /* prefixo para browsers webkit */
    -moz-transform:scale(1.3); /* prefixo para browsers gecko */
    -o-transform:scale(1.3); /* prefixo para opera */
    transform:scale(1.3);
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/csstransforms/exemplo1.html&#34;&gt;Veja este exemplo&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;skew&#34;&gt;Skew&lt;/h4&gt;

&lt;p&gt;Para testar, vamos adicionar o valor skew. Aqui não estaremos fazendo bom uso do skew, mas há exemplos bem interessantes na internet como &lt;a href=&#34;http://www.paulrhayes.com/experiments/cube/multiCubes.html&#34;&gt;este&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;ul li img {
    -webkit-transform:scale(0.5); /* prefixo para browsers webkit */
    -moz-transform:scale(0.5); /* prefixo para browsers gecko */
    -o-transform:scale(0.5); /* prefixo para opera */
    transform:scale(0.5);
}

ul li img:hover {
    -webkit-transform:scale(1.3) skew(30deg); /* prefixo para browsers webkit */
    -moz-transform:scale(1.3) skew(30deg); /* prefixo para browsers gecko */
    -o-transform:scale(1.3) skew(30deg); /* prefixo para opera */
    transform:scale(1.3) skew(30deg);
}
&lt;/pre&gt;

&lt;p&gt;Agora, no hover da imagem mudamos em 30 graus o ângulo. Veja &lt;a href=&#34;http://tableless.github.com/exemplos/csstransforms/exemplo2.html&#34;&gt;um exemplo&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;translate&#34;&gt;Translate&lt;/h4&gt;

&lt;p&gt;Substituindo o skew pelo translate, modificaremos a posição do elemento. Veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;ul li img {
    -webkit-transform:scale(0.5); /* prefixo para browsers webkit */
    -moz-transform:scale(0.5); /* prefixo para browsers gecko */
    -o-transform:scale(0.5); /* prefixo para opera */
    transform:scale(0.5);
}

ul li img:hover {
    -webkit-transform:scale(1.3) translate(80px, 80px); /* prefixo para browsers webkit */
    -moz-transform:scale(1.3) translate(80px, 80px); /* prefixo para browsers gecko */
    -o-transform:scale(1.3) translate(80px, 80px); /* prefixo para opera */
    transform:scale(1.3) translate(80px, 80px);
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/csstransforms/exemplo3.html&#34;&gt;Veja o exemplo&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;rotate&#34;&gt;Rotate&lt;/h4&gt;

&lt;p&gt;E por fim, o efeito que eu acho mais legal é o rotate.&lt;/p&gt;

&lt;p&gt;Com o código abaixo, rotacionamos o elemento em 180 graus.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;ul li img {
    -webkit-transform:scale(0.5);
    -moz-transform:scale(0.5);
    -o-transform:scale(0.5);
    transform:scale(0.5);
}

ul li img:hover {
    -webkit-transform:scale(1.3) rotate(180deg);
    -moz-transform:scale(1.3) rotate(180deg);
    -o-transform:scale(1.3) rotate(180deg);
    transform:scale(0.5) rotate(180deg);
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/csstransforms/exemplo4.html&#34;&gt;veja o exemplo&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;com-animação&#34;&gt;Com animação&lt;/h4&gt;

&lt;p&gt;Aplicando animação via CSS, o &lt;a href=&#34;http://tableless.github.com/exemplos/csstransforms/&#34;&gt;exemplo fica mais interessante&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>