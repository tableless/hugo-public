<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/css/index.xml</link>
    <description>Recent content in Css on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/css/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Crie sites em questão de minutos com o Pingendo</title>
      <link>https://tableless.github.io/hugo-public/crie-sites-em-questao-de-minutos-com-o-pingendo/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/crie-sites-em-questao-de-minutos-com-o-pingendo/</guid>
      <description>

&lt;p&gt;Sem dúvidas, o Bootstrap é uma das frameworks mais utilizadas ultimamente, porém, para algumas pessoas, ainda é meio complicado lidar com os códigos, sejam eles HTML, CSS ou JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-pingendo&#34;&gt;O que é o Pingendo?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pingendo.com/&#34;&gt;Pingendo&lt;/a&gt; é um programa de interface simples e de fácil uso. O Pingendo é um criador de sites em Bootstrap 3 que permite a criação de websites de maneira simples e rápida.&lt;/p&gt;

&lt;h2 id=&#34;drag-and-drop&#34;&gt;Drag and drop&lt;/h2&gt;

&lt;p&gt;O programa usa um modo muito popular em criadores de sites online como Wix, Weebly, etc. É só arrastar e soltar os elementos desejados dentro da área do site e pronto, a mágica está feita.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mGmv44Y.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;imagens&#34;&gt;Imagens&lt;/h2&gt;

&lt;p&gt;Com o Pingendo você tem a seu dispor uma ampla quantidade de imagens livres de direitos autorais e com altíssima qualidade vindas direto do &lt;a href=&#34;https://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NMxtVad.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;fontes&#34;&gt;Fontes&lt;/h2&gt;

&lt;p&gt;A alteração das fontes pode ser feita facilmente através do menu lateral do programa. As fontes são carregadas diretamente do &lt;a href=&#34;https://fonts.google.com/&#34;&gt;Google Fonts&lt;/a&gt;, um dos mais completos banco de dados de fontes da internet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9RGXujM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;cores&#34;&gt;Cores&lt;/h2&gt;

&lt;p&gt;A alteração das cores do tema também podem ser alteradas através do menu lateral, basta escolher as que mais lhe agradam.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/68jKTOb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;responsividade&#34;&gt;Responsividade&lt;/h2&gt;

&lt;p&gt;O Pingendo permite a visualização do seu projeto em telas de diversos tamanhos. Facilitando assim o teste de responsividade do seu website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dCHV33W.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;código&#34;&gt;Código&lt;/h2&gt;

&lt;p&gt;Se você possuí alguma experiencia, mesmo que mínima, em HTML e/ou CSS, pode realizar alterações direto do programa e velas sendo aplicadas em tempo real.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3Fv69GJ.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pingendo está disponível para as plataformas Mac, Windows e Linux no site &lt;a href=&#34;https://pingendo.com/&#34;&gt;www.pingendo.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#BlendingCSS – Modos de mesclagem em CSS: Teoria da Cor e Aplicação Prática</title>
      <link>https://tableless.github.io/hugo-public/blendingcss-modos-de-mesclagem-em-css-teoria-da-cor-e-aplicacao-pratica/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/blendingcss-modos-de-mesclagem-em-css-teoria-da-cor-e-aplicacao-pratica/</guid>
      <description>

&lt;p&gt;OBS:. o método abordado sobre Blending (mesclagem de cores e camadas) não é igual, mas não diferente do método abordado pela nossa colega &lt;a href=&#34;http://tableless.com.br/?author=14&#34;&gt;Dani Guerrato&lt;/a&gt; no post &lt;a href=&#34;http://tableless.com.br/modos-de-mesclagem-em-css/&#34;&gt;Modos de Mesclagem em CSS – Blend Mode CSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Diga-se de passagem nós abordaremos visões abrangentes e características técnicas do método de aplicação de Blending no CSS, mas se você quer dar uma previa nos conceitos de background css antes de ler esse post seria legal: [OBS:. o método abordado sobre Blending (mesclagem de cores e camadas) não é igual, mas não diferente do método abordado pela nossa colega &lt;a href=&#34;http://tableless.com.br/?author=14&#34;&gt;Dani Guerrato&lt;/a&gt; no post &lt;a href=&#34;http://tableless.com.br/modos-de-mesclagem-em-css/&#34;&gt;Modos de Mesclagem em CSS – Blend Mode CSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Diga-se de passagem nós abordaremos visões abrangentes e características técnicas do método de aplicação de Blending no CSS, mas se você quer dar uma previa nos conceitos de background css antes de ler esse post seria legal:]&lt;a href=&#34;tem imagens bem legais&#34;&gt;3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, dados os avisos bora para o código!&lt;/p&gt;

&lt;p&gt;Se você usa Photoshop pode estar familiarizado com o &amp;#8220;Blending&amp;#8221; (modos de mesclagem de camadas). &lt;/p&gt;

&lt;p&gt;Eles nós permitem que você combinar &amp;#8220;camadas&amp;#8221; ( ou layers ) de formas diferentes e eles são muito divertido para brincar. O Blending CSS (&lt;em&gt;modos de mistura em CSS&lt;/em&gt;), no entanto,  infelizmente ainda não são suportados universalmente, mas logo estarão certamente no seu caminho.&lt;/p&gt;

&lt;p&gt;Neste tutorial, vamos aprender como trabalhar com as diferentes maneiras que você pode implementar Blending CSS (modos de mistura) usados CSS.&lt;/p&gt;

&lt;h2 id=&#34;as-noções-básicas-de-blending-css&#34;&gt;As noções básicas de Blending CSS&lt;/h2&gt;

&lt;p&gt;Se você nunca usou este recurso no Photoshop ou nunca ouviu falar dele, vamos te mostrar como Blending (modos de mistura), e suas formas e Formulas funcionam&amp;#8230;  pode parecer um pouco confuso mas vamos dividi-lás em partes visuais para compreendermos melhor.&lt;/p&gt;

&lt;h3 id=&#34;o-que-realmente-significa-8220-blending-8221&#34;&gt;O que realmente significa &amp;#8220;Blending&amp;#8221;?&lt;/h3&gt;

&lt;p&gt;Modos de Mesclagem (&amp;#8220;Blending&amp;#8221;) estão disponíveis no software de desenho já faz alguns anos, mas o conceito de Blending (&amp;#8220;modos de mistura&amp;#8221;) tem sido realmente usados por muito mais tempo, mesmo antes dos computadores fossem inventados.&lt;/p&gt;

&lt;p&gt;O Blending é parte dos &lt;em&gt;modos de mesclagem,&lt;/em&gt; que refere-se a pegar duas cores e combiná-los de uma forma para fazer uma cor só. Mais precisamente, pegamos dois mapas pixel e misturámos eles juntos&lt;/p&gt;

&lt;p&gt;É como um &amp;#8220;Juicer&amp;#8221; &amp;#8211; centrifugas de suco, onde você coloca duas frutas de distintas cores numa ponta e tem um colorido suco misturado do outro lado da máquina.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-56095 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/Blender-Juicer-Vegetables-Fruits-Drink-777x437.jpg&#34; alt=&#34;Blender-Juicer-Vegetables-Fruits-Drink-777x437&#34; width=&#34;777&#34; height=&#34;437&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Como&lt;/em&gt; que a mistura ocorre é a parte &amp;#8220;modo&amp;#8221; de &lt;em&gt;modos&lt;/em&gt; de &lt;em&gt;mesclagem.&lt;/em&gt; Como é que essas cores interagem? Porque estamos a trabalhar com o espaço digital, podemos tomar qualquer fórmula matemática e aplicá-lo às duas entradas para derivar uma saída.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;figure class=&#34;post_image&#34;&gt;&lt;/p&gt;

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/none.jpg&#34; alt=&#34;Uma imagem não tratada de uma medusa&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Uma imagem não tratada de uma medusa
  &lt;/p&gt;
&lt;/div&gt;&lt;/figure&gt; &lt;figure class=&#34;post_image&#34;&gt; 

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/orange.jpg&#34; alt=&#34; A mesma água-viva com uma camada de laranja sólido (a &amp;quot;fonte&amp;quot;) colocado sobre ele&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    A mesma água-viva com uma camada de laranja sólido (a &amp;#8220;origem de mesclagem&amp;#8221;) colocado sobre ele
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/screen.jpg&#34; alt=&#34; Aqui está a nossa camada de origem com a &amp;quot;tela&amp;quot; modo de mesclagem aplicado&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;Aqui está a nossa camada de origem de mesclagem com a &amp;#8220;tela&amp;#8221; com o Blending aplicado&lt;/p&gt;

&lt;p&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h3 id=&#34;você-faz-a-matemática&#34;&gt;Você faz a matemática&lt;/h3&gt;

&lt;p&gt;Se você está se sentindo &lt;em&gt;realmente&lt;/em&gt; ambicioso, dê uma olhada através Task Force FX da W3C do &lt;a href=&#34;https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=pt-BR&amp;ie=UTF8&amp;prev=_t&amp;rurl=translate.google.com.br&amp;sl=en&amp;tl=pt-BR&amp;u=https://drafts.fxtf.org/compositing/&amp;usg=ALkJrhgP7Nj2SjD6ndaobz9HMCmWHLI_xg#blending&#34; target=&#34;_self&#34;&gt;documento de composição oficial&lt;/a&gt; que explica as implementações matemáticas de cada um dos diferentes modos de blending. Demonstra uma fórmula usada para calcular mais modos de mesclagem .&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Cm = B (Cb, Cs)&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Aqui, &lt;code&gt;Cm&lt;/code&gt; é a cor resultante após a mistura.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B&lt;/code&gt; refere-se à função de mistura.&lt;/li&gt;
&lt;li&gt;O &lt;code&gt;Cb&lt;/code&gt; variável é a cor de fundo.&lt;/li&gt;
&lt;li&gt;E o &lt;code&gt;Cs&lt;/code&gt; variável é a cor de origem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/rgb-e-hsl/&#34;&gt;Todas as cores são baseados numa escala de 0-1, que mapeia diretamente para um valor 0-255 RGB.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-56099 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/nee-nees-096-min-compressor.jpg&#34; alt=&#34;nee-nees-096-min-compressor&#34; width=&#34;3888&#34; height=&#34;2592&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Existem duas categorias de modos de Blending: não-separáveis e os separáveis.&lt;/p&gt;

&lt;p&gt;Se um blending é considerada separável, ou não é determinado pelo algoritmo subjacente. Se o algoritmo trata cada um dos canais de cor separados (vermelho, verde e azul // RGB) de igual modo, considera-se inseparáveis. Se ele usa cada um dos canais de cor, individualmente, considera-se separável.&lt;/p&gt;

&lt;p&gt;Todos os modos de mistura só pode voltar cores que estão dentro da gama de 0 a 255. Qualquer coisa para além desta gama em qualquer direção irá ser cortada para o intervalo. Quando você vê grandes áreas de branco ou preto em uma área mista, é provável porque essas áreas estão sendo cortadas.&lt;/p&gt;

&lt;h2 id=&#34;tipos-de-modos-de-mesclagem-disponível-em-css&#34;&gt;Tipos de modos de mesclagem Disponível em CSS&lt;/h2&gt;

&lt;p&gt;Blending CSS, onde são suportados, trabalha de duas maneiras diferentes. O primeiro tipo de modo de mistura é chamada &lt;code&gt;background-blend-mode&lt;/code&gt; . Esta propriedade permite que você misturar todos os fundos dentro de um elemento com o outro.&lt;/p&gt;

&lt;p&gt;Se você tiver definido, por exemplo, múltiplas imagens de fundo (&lt;a href=&#34;https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=pt-BR&amp;ie=UTF8&amp;prev=_t&amp;rurl=translate.google.com.br&amp;sl=en&amp;tl=pt-BR&amp;u=http://caniuse.com/&amp;usg=ALkJrhgJSpRt8OnTYOP3TYJm2Gf1tC3M-A#feat=multibackgrounds&#34; target=&#34;_self&#34;&gt;suportados em todos os navegadores além do IE8&lt;/a&gt;), a primeira imagem de fundo será tratada como a camada de origem, e qualquer imagem adicionada posteriormente será tratada como a camada de fundo, encontrando-se por baixo.&lt;/p&gt;

&lt;p&gt;Adicionando uma cor de fundo (que deve ser o último da lista) coloca mais uma camada na parte inferior. A cor será tratada como a camada de fundo, e as imagens como as camadas de origem. Veja o seguinte na regra de estilo, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
  background:
  url(img/pattern.png),
  url(img/jellyfish.jpg), 
  #f07e32;
}&lt;/pre&gt;

&lt;p&gt;Isso nos dá:&lt;figure class=&#34;post_image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/multiple-backgrounds.jpg&#34; alt=&#34;&#34; /&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;E nós pode então adicionar modos de Blending:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
  background:
  url(img/pattern.png),
  url(img/jellyfish.jpg), 
  #f07e32 ;
  background-blend-mode: screen;
}
&lt;/pre&gt;

&lt;p&gt;Aqui estão dois divs usando esses estilos, um sem o modo de mesclagem, o segundo com:&lt;/p&gt;

&lt;p&gt;A mistura tipo de modo secundário, &lt;code&gt;mix-blend-mode&lt;/code&gt; , permite elementos independentes a serem misturados. A especificação é mais específica sobre a implementação, mas a mistura ocorre em &amp;#8220;contextos de empilhamento&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Isto é o que acontece quando usamos &lt;code&gt;mix-blend-mode&lt;/code&gt; , na tentativa de obter a imagem de fundo e cor dentro do mesmo elemento para misturar (uma sintaxe de código um pouco mais limpa):&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.my-overlay-element {
  background-color: #f07e32;
  background-image: url(img/jellyfish.jpg); // Note: This image will not be blended with the background color.
  mix-blend-mode: color-dodge;
}
&lt;/pre&gt;

&lt;p&gt;Abaixo, você pode encontrar uma &lt;a href=&#34;https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=pt-BR&amp;ie=UTF8&amp;prev=_t&amp;rurl=translate.google.com.br&amp;sl=en&amp;tl=pt-BR&amp;u=http://codepen.io/tutsplus/live/wMvoyj&amp;usg=ALkJrhiUNiZymZ8tkzwi_FO6w2rqQj4-6g&#34; target=&#34;_self&#34;&gt;demonstração interativa&lt;/a&gt; para explorar os efeitos de um determinado modo de mistura.&lt;/p&gt;

&lt;h2 id=&#34;blend-modes-separáveis&#34;&gt;Blend Modes separáveis&lt;/h2&gt;

&lt;p&gt;Vamos dar uma olhada nos modos de mesclagem (&amp;#8220;Blending&amp;#8221;) disponíveis, examinando a fórmula utilizada, e aplicando cada um para o círculo vermelho colocado acima da nossa água-viva.&lt;figure class=&#34;post_image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j1.jpg&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt; &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h4 id=&#34;screen-tela&#34;&gt;Screen (tela):&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;B(Cb, Cs) = 1 - [(1 - Cb) x (1 - Cs)]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Screen (ou tela) é nomeado após o conceito de projetar múltiplas exposições de fotografias, ao mesmo tempo em uma tela. A cor resultante é sempre pelo menos tão leve quanto uma das camadas combinadas.&lt;figure class=&#34;post_image&#34;&gt;&lt;/p&gt;

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j2.jpg&#34; alt=&#34;o modo de blend da tela&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    o modo de blend da tela
  &lt;/p&gt;
&lt;/div&gt;&lt;/figure&gt; 

#### Darken: 

`B(Cb, Cs) = min(Cb, Cs)`

Seleciona a mais escura das duas cores.&lt;figure class=&#34;post_image&#34;&gt; 

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-darken.jpg&#34; alt=&#34;Darken Mode Blending&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Darken Mode Blending
  &lt;/p&gt;
&lt;/div&gt;&lt;/figure&gt; 

Lighten: `B(Cb, Cs) = max(Cb, Cs)`

Seleciona a mais clara das duas cores.&lt;figure class=&#34;post_image&#34;&gt; 

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-lighten.jpg&#34; alt=&#34;Lighten blend mode&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Lighten blend mode
  &lt;/p&gt;
&lt;/div&gt;&lt;/figure&gt; 

#### Color Dodge:

&lt;pre class=&#34;lang-js&#34;&gt;if(Cb == 0)
    B(Cb, Cs) = 0
else if(Cs == 1)
    B(Cb, Cs) = 1
else
    B(Cb, Cs) = min(1, Cb / (1 - Cs))

&lt;/pre&gt;

Color Dodge clareia a cor de fundo para refletir a cor de origem.&lt;figure class=&#34;post_image&#34;&gt; 

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-color-dodge.jpg&#34; alt=&#34;blend mode Color Dodge&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    blend mode Color Dodge
  &lt;/p&gt;
&lt;/div&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt; 

#### Color Burn (cor queimada):

&lt;pre class=&#34;lang-js&#34;&gt;if(Cb == 1)
    B(Cb, Cs) = 1
else if(Cs == 0)
    B(Cb, Cs) = 0
else
    B(Cb, Cs) = 1 - min(1, (1 - Cb) / Cs)
&lt;/pre&gt;

O Color Burn escurece a cor de fundo, aumentando o contraste entre a fonte e o fundo.&lt;figure class=&#34;post_image&#34;&gt; 

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-burn.jpg&#34; alt=&#34;Modo de queimadura mistura Cor&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Color burn blend mode
  &lt;/p&gt;
&lt;/div&gt;&lt;/figure&gt; 

#### Hard light:

&lt;pre class=&#34;lang-js&#34;&gt;if(Cs &amp;lt;= 0.5)
    B(Cb, Cs) = Multiply(Cb, 2 x Cs)
else
    B(Cb, Cs) = Screen(Cb, 2 x Cs -1)
&lt;/pre&gt;

Aplica-se &#34;multiply&#34; em cores mais claras e &#34;screen&#34; em cores mais escuras. Essencialmente, &#34;Hard light&#34; é o oposto de &#34;overlay&#34;, é que veremos a seguir.&lt;figure class=&#34;post_image&#34;&gt; 

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-hardl.jpg&#34; alt=&#34;blend mode luz dura&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Hard light blend mode
  &lt;/p&gt;
&lt;/div&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt; 

#### Overlay:

&lt;div&gt;
  &lt;div id=&#34;highlighter_843579&#34; class=&#34;syntaxhighlighter noskimlinks noskimwords bash&#34;&gt;
    &lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
            1
          &lt;/div&gt;
        &lt;/td&gt;
        
        &lt;td class=&#34;code&#34;&gt;
          &lt;div class=&#34;container&#34;&gt;
            &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
              &lt;code&gt;B(Cb, Cs) = HardLight(Cs, Cb)&lt;/code&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Aplica-se &amp;ldquo;screen&amp;rdquo; em cores mais claras e &amp;ldquo;multiply&amp;rdquo; em cores mais escuras; escrito como o mesmo que &amp;ldquo;Hard light&amp;rdquo;, exceto com os argumentos para a função inversa.&lt;figure class=&#34;post_image&#34;&gt;&lt;/p&gt;

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-overlay.jpg&#34; alt=&#34;modo de blend Overlay&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Overlay blend mode
  &lt;/p&gt;
&lt;/div&gt;&lt;/figure&gt; 

#### Soft Light:

&lt;div&gt;
  &lt;div id=&#34;highlighter_522850&#34; class=&#34;syntaxhighlighter noskimlinks noskimwords bash&#34;&gt;
    &lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
            1
          &lt;/div&gt;
          

&lt;pre&gt;&lt;code&gt;      &amp;lt;div class=&amp;quot;line number2 index1 alt1&amp;quot;&amp;gt;
        2
      &amp;lt;/div&amp;gt;

      &amp;lt;div class=&amp;quot;line number3 index2 alt2&amp;quot;&amp;gt;
        3
      &amp;lt;/div&amp;gt;

      &amp;lt;div class=&amp;quot;line number4 index3 alt1&amp;quot;&amp;gt;
        4
      &amp;lt;/div&amp;gt;

      &amp;lt;div class=&amp;quot;line number5 index4 alt2&amp;quot;&amp;gt;
        5
      &amp;lt;/div&amp;gt;

      &amp;lt;div class=&amp;quot;line number6 index5 alt1&amp;quot;&amp;gt;
        6
      &amp;lt;/div&amp;gt;

      &amp;lt;div class=&amp;quot;line number7 index6 alt2&amp;quot;&amp;gt;
        7
      &amp;lt;/div&amp;gt;

      &amp;lt;div class=&amp;quot;line number8 index7 alt1&amp;quot;&amp;gt;
        8
      &amp;lt;/div&amp;gt;

      &amp;lt;div class=&amp;quot;line number9 index8 alt2&amp;quot;&amp;gt;
        9
      &amp;lt;/div&amp;gt;
    &amp;lt;/td&amp;gt;

    &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;
          &amp;lt;code&amp;gt;if&amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;(Cs &amp;amp;lt;= 0.5)&amp;lt;/code&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number2 index1 alt1&amp;quot;&amp;gt;
          &amp;lt;code&amp;gt;        &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;B(Cb, Cs) = Cb - (1 - 2 x Cs) x Cb x (1 - Cb)&amp;lt;/code&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number3 index2 alt2&amp;quot;&amp;gt;
          &amp;lt;code&amp;gt;    &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;else&amp;lt;/code&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number4 index3 alt1&amp;quot;&amp;gt;
          &amp;lt;code&amp;gt;        &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;B(Cb, Cs) = Cb + (2 x Cs - 1) x (D(Cb) - Cb)&amp;lt;/code&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number5 index4 alt2&amp;quot;&amp;gt;
          &amp;lt;code&amp;gt;with&amp;lt;/code&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number6 index5 alt1&amp;quot;&amp;gt;
          &amp;lt;code&amp;gt;    &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;if&amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;(Cb &amp;amp;lt;= 0.25)&amp;lt;/code&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number7 index6 alt2&amp;quot;&amp;gt;
          &amp;lt;code&amp;gt;        &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;D(Cb) = ((16 * Cb - 12) x Cb + 4) x Cb&amp;lt;/code&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number8 index7 alt1&amp;quot;&amp;gt;
          &amp;lt;code&amp;gt;    &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;else&amp;lt;/code&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number9 index8 alt2&amp;quot;&amp;gt;
          &amp;lt;code&amp;gt;        &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;D(Cb) = sqrt(Cb)&amp;lt;/code&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Este modo de Blending aplica-se uma variante de &amp;ldquo;multiply&amp;rdquo; em valores escuros e uma variante da &amp;ldquo;screen&amp;rdquo; em valores mais leves (similar à screen).&lt;/p&gt;

&lt;p&gt;Neste algoritmo, vemos uma função secundária &lt;code&gt;D&lt;/code&gt; , que está situado no &lt;code&gt;with&lt;/code&gt; cláusula com base no valor atual do azul (_**&lt;span style=&#34;color: #ff0000&#34;&gt;R-&lt;span style=&#34;color: #00ff00&#34;&gt;G-&lt;span style=&#34;color: #0000ff&#34;&gt;B&lt;/strong&gt;&lt;/em&gt;) na cor. O resultado final é tipicamente um efeito muito mais suave do que &amp;ldquo;overlay&amp;rdquo;.&lt;/p&gt; &lt;figure class=&#34;post_image&#34;&gt;&lt;/p&gt;

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-soft.jpg&#34; alt=&#34;blend mode luz Sof&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Sof light blend mode
  &lt;/p&gt;
&lt;/div&gt;&lt;/figure&gt; 

&lt;h4&gt;
  Difference:
&lt;/h4&gt;

&lt;div&gt;
  &lt;div id=&#34;highlighter_841255&#34; class=&#34;syntaxhighlighter noskimlinks noskimwords bash&#34;&gt;
    &lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
            1
          &lt;/div&gt;
        &lt;/td&gt;
        
        &lt;td class=&#34;code&#34;&gt;
          &lt;div class=&#34;container&#34;&gt;
            &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
              &lt;code&gt;B(Cb, Cs) = | Cb - Cs |&lt;/code&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
  Diferença pega o valor absoluto da diferença entre as duas cores, que tem o mesmo efeito de um negativo fotográfico.
&lt;/p&gt;&lt;figure class=&#34;post_image&#34;&gt; 

&lt;p&gt;
  &lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-difference.jpg&#34; alt=&#34;blend mode diferença&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
    
    &lt;p class=&#34;wp-caption-text&#34;&gt;
      Difference blend mode
    &lt;/p&gt;
  &lt;/div&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt; 
  
  &lt;h4&gt;
    Exclusion:
  &lt;/h4&gt;
  
  &lt;div&gt;
    &lt;div id=&#34;highlighter_276376&#34; class=&#34;syntaxhighlighter noskimlinks noskimwords bash&#34;&gt;
      &lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
        &lt;tr&gt;
          &lt;td class=&#34;gutter&#34;&gt;
            &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
              1
            &lt;/div&gt;
          &lt;/td&gt;
          
          &lt;td class=&#34;code&#34;&gt;
            &lt;div class=&#34;container&#34;&gt;
              &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
                &lt;code&gt;B(Cb, Cs) = Cb + Cs - 2 x Cb x Cs&lt;/code&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    O modo de exclusão tem o mesmo efeito de base como o modo &#34;diferença&#34;, excepto que as cores semelhantes resultar num valor mais baixo do meio de contraste (ao invés de um valor mais escuro).
  &lt;/p&gt;&lt;figure class=&#34;post_image&#34;&gt; 
  
  &lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-exclusion.jpg&#34; alt=&#34;blend mode Exclusão&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;
    
    &lt;p class=&#34;wp-caption-text&#34;&gt;
      Exclusion blend mode
    &lt;/p&gt;
  &lt;/div&gt;&lt;/figure&gt; 
  
  &lt;h2&gt;
    Blend Modes não-separáveis
  &lt;/h2&gt;
  
  &lt;p&gt;
    Os Blend Modes &#34;não-separáveis&#34; são modos de mesclagem utilizam algumas funções extras, incluindo as funções &lt;code&gt;ClipColor&lt;/code&gt;, &lt;code&gt;SetLum&lt;/code&gt;, e &lt;code&gt;Sat&lt;/code&gt;.
  &lt;/p&gt;
  

&lt;p&gt;&lt;p&gt;
    &lt;b&gt;Nota importante:&lt;/b&gt; Nenhuma versão do Safari suporta blend modes &amp;ldquo;hue&amp;rdquo;, &amp;ldquo;saturation&amp;rdquo;, &amp;ldquo;color&amp;rdquo;, ou &amp;ldquo;luminosity&amp;rdquo;  com &lt;code&gt;mix-blend-mode&lt;/code&gt; ou &lt;code&gt;background-blend-mode&lt;/code&gt; .
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div id=&#34;highlighter_312047&#34; class=&#34;syntaxhighlighter noskimlinks noskimwords bash&#34;&gt;
      &lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
        &lt;tr&gt;
          &lt;td class=&#34;gutter&#34;&gt;
            &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
              01
            &lt;/div&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;div class=&amp;quot;line number2 index1 alt1&amp;quot;&amp;gt;
          02
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number3 index2 alt2&amp;quot;&amp;gt;
          03
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number4 index3 alt1&amp;quot;&amp;gt;
          04
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number5 index4 alt2&amp;quot;&amp;gt;
          05
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number6 index5 alt1&amp;quot;&amp;gt;
          06
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number7 index6 alt2&amp;quot;&amp;gt;
          07
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number8 index7 alt1&amp;quot;&amp;gt;
          08
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number9 index8 alt2&amp;quot;&amp;gt;
          09
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number10 index9 alt1&amp;quot;&amp;gt;
          10
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number11 index10 alt2&amp;quot;&amp;gt;
          11
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number12 index11 alt1&amp;quot;&amp;gt;
          12
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number13 index12 alt2&amp;quot;&amp;gt;
          13
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number14 index13 alt1&amp;quot;&amp;gt;
          14
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number15 index14 alt2&amp;quot;&amp;gt;
          15
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number16 index15 alt1&amp;quot;&amp;gt;
          16
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number17 index16 alt2&amp;quot;&amp;gt;
          17
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number18 index17 alt1&amp;quot;&amp;gt;
          18
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number19 index18 alt2&amp;quot;&amp;gt;
          19
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number20 index19 alt1&amp;quot;&amp;gt;
          20
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number21 index20 alt2&amp;quot;&amp;gt;
          21
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number22 index21 alt1&amp;quot;&amp;gt;
          22
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number23 index22 alt2&amp;quot;&amp;gt;
          23
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number24 index23 alt1&amp;quot;&amp;gt;
          24
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number25 index24 alt2&amp;quot;&amp;gt;
          25
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number26 index25 alt1&amp;quot;&amp;gt;
          26
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;line number27 index26 alt2&amp;quot;&amp;gt;
          27
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;

      &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;ClipColor(C)&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number2 index1 alt1&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;l = Lum(C)&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number3 index2 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;n = min(Cred, Cgreen, Cblue)&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number4 index3 alt1&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;x = max(Cred, Cgreen, Cblue)&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number5 index4 alt2&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number6 index5 alt1&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;if&amp;lt;/code&amp;gt; &amp;lt;code&amp;gt;n &amp;amp;lt; 0.0&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number7 index6 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;    &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;Cred = l + (((Cred - l) * l) / (l - n))&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number8 index7 alt1&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;    &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;Cgreen = l + (((Cgreen - l) * l) / (l - n))&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number9 index8 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;    &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;Cblue = l + (((Cblue - l) * l) / (l - n))&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number10 index9 alt1&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number11 index10 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;if&amp;lt;/code&amp;gt; &amp;lt;code&amp;gt;x &amp;amp;gt; 1.0&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number12 index11 alt1&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number13 index12 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;    &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;Cred = l + (((Cred - l) * (1 - l)) / (x - l))&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number14 index13 alt1&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;    &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;Cgreen = l + (((Cgreen - l) * (1 - l)) / (x - l))&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number15 index14 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;    &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;Cblue = l + (((Cblue - l) * (1 - l)) / (x - l))&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number16 index15 alt1&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number17 index16 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;return&amp;lt;/code&amp;gt; &amp;lt;code&amp;gt;C&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number18 index17 alt1&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number19 index18 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;SetLum(C, l)&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number20 index19 alt1&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;d = l - Lum(C)&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number21 index20 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;Cred = Cred + d&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number22 index21 alt1&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;Cgreen = Cgreen + d&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number23 index22 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;Cblue = Cblue + d&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number24 index23 alt1&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number25 index24 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;  &amp;lt;/code&amp;gt;&amp;lt;code&amp;gt;return&amp;lt;/code&amp;gt; &amp;lt;code&amp;gt;ClipColor(C)&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number26 index25 alt1&amp;quot;&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class=&amp;quot;line number27 index26 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;Sat(C) = max(Cred, Cgreen, Cblue) - min(Cred, Cgreen, Cblue)&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Observe o &lt;code&gt;min&lt;/code&gt; , &lt;code&gt;mid&lt;/code&gt; e &lt;code&gt;max&lt;/code&gt; são funções de utilitária que consulta a valores máximos, médios e mínimos. (&lt;em&gt;Mid &lt;strong&gt;não &lt;/strong&gt;&lt;/em&gt;é a média dos três valores.) Os valores &lt;code&gt;Cred&lt;/code&gt; , &lt;code&gt;Cgreen&lt;/code&gt; , e &lt;code&gt;Cblue&lt;/code&gt; referem-se a valores de vermelho, verde e azul das cores presentes na &lt;code&gt;C&lt;/code&gt; .
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Com estas definições alinhadas, podemos agora olhar para os blend modes não-separáveis.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;
    &lt;b&gt;Hue&lt;/b&gt; (&lt;b&gt;Matiz):&lt;/b&gt;
  &lt;/h4&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div id=&#34;highlighter_803107&#34; class=&#34;syntaxhighlighter noskimlinks noskimwords bash&#34;&gt;
      &lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
        &lt;tr&gt;
          &lt;td class=&#34;gutter&#34;&gt;
            &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
              1
            &lt;/div&gt;
          &lt;/td&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;B(Cb, Cs) = SetLum(SetSat(Cs, Sat(Cb)), Lum(Cb))&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Este modo aplica-se a tonalidade da camada de fonte para a luminância e saturação da cor de fundo.
  &lt;/p&gt;&lt;figure class=&#34;post_image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-hue.jpg&#34; alt=&#34;blend mode Hue&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
  blend mode Hue
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;
    Saturation (Saturação):
  &lt;/h4&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div id=&#34;highlighter_173459&#34; class=&#34;syntaxhighlighter noskimlinks noskimwords bash&#34;&gt;
      &lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
        &lt;tr&gt;
          &lt;td class=&#34;gutter&#34;&gt;
            &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
              1
            &lt;/div&gt;
          &lt;/td&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;B(Cb, Cs) = SetLum(SetSat(Cb, Sat(Cs)), Lum(Cb))&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Este modo faz a mesma coisa como o modo &amp;ldquo;hue&amp;rdquo;, mas em vez disso se aplica a saturação do primeiro plano para a tonalidade e a luminância de fundo.
  &lt;/p&gt;&lt;figure class=&#34;post_image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-sat.jpg&#34; alt=&#34;modo de mistura de saturação&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
  Saturation blend mode
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;
    Color (cor):
  &lt;/h4&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div id=&#34;highlighter_88781&#34; class=&#34;syntaxhighlighter noskimlinks noskimwords bash&#34;&gt;
      &lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
        &lt;tr&gt;
          &lt;td class=&#34;gutter&#34;&gt;
            &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
              1
            &lt;/div&gt;
          &lt;/td&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;B(Cb, Cs) = SetLum(Cs, Lum(Cb))&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Aplica-se o hue (matiz) e a saturação do primeiro plano para a luminância de fundo.
  &lt;/p&gt;&lt;figure class=&#34;post_image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-color.jpg&#34; alt=&#34;modo de mistura de cores&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
  Color blend mode
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;
    Luminosity (Luminosidade):
  &lt;/h4&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div id=&#34;highlighter_88781&#34; class=&#34;syntaxhighlighter noskimlinks noskimwords bash&#34;&gt;
      &lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
        &lt;tr&gt;
          &lt;td class=&#34;gutter&#34;&gt;
            &lt;div class=&#34;line number1 index0 alt2&#34;&gt;
              1
            &lt;/div&gt;
          &lt;/td&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      &amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;
            &amp;lt;code&amp;gt;B(Cb, Cs) = SetLum(Cs, Lum(Cb))&amp;lt;/code&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Este modo aplica-se a luminosidade da camada de origem com o hue (matiz) e a saturação da camada de fundo.
  &lt;/p&gt;&lt;figure class=&#34;post_image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
      &lt;img src=&#34;https://cms-assets.tutsplus.com/uploads/users/30/posts/25201/image/j-last.jpg&#34; alt=&#34;blend mode Luminosidade&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
    Luminosity blend mode
  &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;figcaption&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;lt;/figure&amp;gt; 

&amp;lt;div class=&amp;quot;post-body view view--loaded&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;post-body__body&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;post-body__content&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;
        Conclusão
      &amp;lt;/h2&amp;gt;

      &amp;lt;p&amp;gt;
        Modos de mistura  (&amp;quot;Blending Mode&amp;quot;) em CSS fornece um nova e excitante flexibilidade para a concepção e experiências estéticas singulares. Entender a matemática e a teoria da cor que se aplica a cada um dos modos de blending (&amp;quot;mesclagem&amp;quot;) disponíveis fornece-lhe um conjunto de ferramentas mais holística.
      &amp;lt;/p&amp;gt;

      &amp;lt;p&amp;gt;
        O que você vai fazer com os navegadores quando eles adicionarem suporte para modos de mistura?
      &amp;lt;/p&amp;gt;

      &amp;lt;h3&amp;gt;
        Links Relacionados
      &amp;lt;/h3&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;
          Confira o que os autores estão fazendo com &amp;lt;a href=&amp;quot;https://translate.googleusercontent.com/translate_c?depth=1&amp;amp;hl=pt-BR&amp;amp;ie=UTF8&amp;amp;prev=_t&amp;amp;rurl=translate.google.com.br&amp;amp;sl=en&amp;amp;tl=pt-BR&amp;amp;u=https://graphicriver.net/tags/blend&amp;amp;usg=ALkJrhjVwZaYbKYEuiA9KqnWHPkBBv5XWg&amp;quot; target=&amp;quot;_self&amp;quot;&amp;gt;Photoshop acções e modos de mistura&amp;lt;/a&amp;gt; ao longo de Mercado Envato
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          Leia mais sobre &amp;lt;a href=&amp;quot;https://translate.googleusercontent.com/translate_c?depth=1&amp;amp;hl=pt-BR&amp;amp;ie=UTF8&amp;amp;prev=_t&amp;amp;rurl=translate.google.com.br&amp;amp;sl=en&amp;amp;tl=pt-BR&amp;amp;u=https://developer.mozilla.org/en/docs/Web/CSS/blend-mode&amp;amp;usg=ALkJrhhucd1JKzMcPZ9w-dM4ZfOQEige2g&amp;quot; target=&amp;quot;_self&amp;quot;&amp;gt;&amp;lt;misturar-mode&amp;gt;&amp;lt;/a&amp;gt; no Mozilla Developer Network
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;a href=&amp;quot;https://translate.googleusercontent.com/translate_c?depth=1&amp;amp;hl=pt-BR&amp;amp;ie=UTF8&amp;amp;prev=_t&amp;amp;rurl=translate.google.com.br&amp;amp;sl=en&amp;amp;tl=pt-BR&amp;amp;u=http://sarasoueidan.com/blog/compositing-and-blending-in-css/&amp;amp;usg=ALkJrhhERbYPRMYL0iPGDgy0A-JLD1MCFQ&amp;quot; target=&amp;quot;_self&amp;quot;&amp;gt;Composição e mistura Em CSS&amp;lt;/a&amp;gt; por Sara Soueidan
        &amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;ad ad--publift&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;h3 class=&amp;quot;ad ad--publift&amp;quot;&amp;gt;
  Texto traduzido
&amp;lt;/h3&amp;gt;

&amp;lt;div class=&amp;quot;content-author&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;content-author__header&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;img class=&amp;quot;content-author__image alignleft&amp;quot; src=&amp;quot;https://cms-assets.tutsplus.com/uploads/users/50/profiles/917/profileImage/av-cutrell.jpg&amp;quot; alt=&amp;quot;Av cutrell&amp;quot; width=&amp;quot;215&amp;quot; height=&amp;quot;215&amp;quot; /&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;pre class=&amp;quot;content-author__name&amp;quot;&amp;gt;&amp;lt;em&amp;gt;Jonathan Cutrell&amp;lt;/em&amp;gt;&amp;lt;/pre&amp;gt;

    &amp;lt;p&amp;gt;
      &amp;lt;span id=&amp;quot;result_box&amp;quot; class=&amp;quot;&amp;quot; lang=&amp;quot;pt&amp;quot;&amp;gt;&amp;lt;em&amp;gt;&amp;lt;span style=&amp;quot;text-decoration: underline&amp;quot;&amp;gt;Diretor de Tecnologia da Whiteboard e apresentador do desenvolvedor Tea&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; 

      &amp;lt;div class=&amp;quot;content-author__header&amp;quot;&amp;gt;
      &amp;lt;/div&amp;gt;

      &amp;lt;div class=&amp;quot;content-author__header&amp;quot;&amp;gt;
        &amp;lt;span id=&amp;quot;result_box&amp;quot; class=&amp;quot;&amp;quot; lang=&amp;quot;pt&amp;quot;&amp;gt;Eu sou o Director &amp;lt;span class=&amp;quot;&amp;quot;&amp;gt;de Tecnologia da &amp;lt;span class=&amp;quot;&amp;quot;&amp;gt;Whiteboard, uma empresa de interação digital &amp;lt;span class=&amp;quot;&amp;quot;&amp;gt;com sede em &amp;lt;span class=&amp;quot;&amp;quot;&amp;gt;Chattanooga, Tennessee. &amp;lt;span class=&amp;quot;&amp;quot;&amp;gt;Tenho um mestrado em Mídia Digital da &amp;lt;span class=&amp;quot;&amp;quot;&amp;gt;Georgia Tech. I &amp;lt;span class=&amp;quot;&amp;quot;&amp;gt;escrever, ensinar e &amp;lt;span class=&amp;quot;&amp;quot;&amp;gt;falar sobre o código e as coisas que ele pode fazer possível.&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 

        &amp;lt;div class=&amp;quot;content-author__header&amp;quot;&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;quot;content-author__header&amp;quot;&amp;gt;
          &amp;lt;a href=&amp;quot;https://webdesign.tutsplus.com/tutorials/blending-modes-in-css-color-theory-and-practical-application--cms-25201&amp;quot;&amp;gt;Link Original do Post retirado do blog Tutsplus&amp;lt;br /&amp;gt; &amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 — Trabalhando com Múltiplas imagens background-images</title>
      <link>https://tableless.github.io/hugo-public/css3-trabalhando-com-multiplas-imagens-background-images/</link>
      <pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-trabalhando-com-multiplas-imagens-background-images/</guid>
      <description>

&lt;p class=&#34;graf--p&#34;&gt;
  Quem nunca se deparou com um layout com múltiplas imagens “sobrepostas” ou mesmo com títulos ou parágrafos que precisavam ficar suspensos sobre múltiplas imagens de fundo? Essa semana me deparei com o mesmo problema.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Com &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;CSS3&#34; href=&#34;https://developer.mozilla.org/en/CSS/CSS3&#34;&gt;CSS3&lt;/a&gt;, você pode aplicar aos elementos múltiplas imagens sobrepostas como plano de fundo. Sem a utilização do Z-index! É isso mesmo, “necas de pitibiriba” de Z-index.
&lt;/p&gt;

&lt;h2 id=&#34;velho-dilema-de-sobrepor-imagens-com-div-s-com-z-index-graf-h4&#34;&gt;Velho dilema de sobrepor imagens com div’s com Z-index… {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  A primeira solução que vem à cabeça é o velho e bom “Z-index”, Veja um exemplo de implementação:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;red&#34;&amp;gt;Red&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;green&#34;&amp;gt;Green&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;blue&#34;&amp;gt;Blue&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.red, .green, .blue {
    color: #fff;
    display: block;
    line-height: 100px;
    position: absolute;
    text-align: center;
    width: 100px;
}
.red {
    background: red;
    left: 20px;
    top: 20px;
    z-index: 0;
    opacity:0.5;
}
.green {
    background: green;
    left: 60px;
    top: 60px;
    z-index: 1;
    opacity:0.6;
}
.blue {
    background: blue;
    left: 100px;
    top: 100px;
    z-index: 2;
    opacity:0.7;
}
body {
    color: #777;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/grvvLw/&#34;&gt;Z-index&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;funciona-em-class-markup-em-markup-h4-em-sim-em-mas-espere-um-momento-essa-não-é-a-única-solução-graf-h4&#34;&gt;Funciona?!… &lt;em class=&#34;markup--em markup--h4-em&#34;&gt;SIM!&lt;/em&gt; Mas espere um momento, essa não é a única solução… {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  … Você já tava pensando num “workaround” safadinho, a mão da gambiarra chega a tremer nessas horas, mas nada de programação orientada a “Go-Horse”, hoje em dia temos “solucionática” pra quase tudo hehe…
&lt;/p&gt;

&lt;div style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*pAiFtxYHdjg4-HP6e46wZA.gif&#34; alt=&#34;www.gohorseprocess.com.br/extreme-go-horse-(xgh)&#34; width=&#34;500&#34; height=&#34;374&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    www.gohorseprocess.com.br/extreme-go-horse-(xgh)
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;conhecendo-as-propriedades-css-do-background-graf-h4&#34;&gt;Conhecendo as propriedades CSS do Background: {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;pre&gt;background-color.........define a cor do fundo;
background-image.........define uma imagem de fundo;
background-repeat........define a maneira como a imagem de fundo é posicionada;
background-attachment....define se a imagem de fundo &#34;rola&#34; ou não com a tela;
background-position......define como e onde a imagem de fundo é posicionada;
background-clip..........define a área do box onde a imagem de fundo é aplicada;
background-origin........define a posição de origem da imagem no box;
background-size..........define as dimensões da imagem no box;
background...............maneira abreviada para declarar todas as propriedades anteriores;&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  O nosso grande mestre &lt;a class=&#34;markup--user markup--p-user&#34; href=&#34;https://medium.com/u/addb7196c9b9&#34;&gt;Maurício Samy Silva&lt;/a&gt; #Maujor explica melhor as aplicações das propriedades &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&#34; rel=&#34;nofollow&#34;&gt;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Agora que conhecemos suas propriedades e características… agora vamos ver como o “background-image” funciona para entendermos nosso horizonte de possibilidades:
&lt;/p&gt;

&lt;h2 id=&#34;background-image-vs-z-index-a-batalha-graf-h4&#34;&gt;Background-image VS Z-index — A BATALHA: {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando trabalhamos 2 ou 3 elementos (sejam &lt;img&gt;, &lt;div&gt;, &lt;etc…&gt;) temos um controle até tolerável, mas… quando utilizamos 6, 10 ou mais elementos numa mesma div ou aninhamento próximo, o z-index começa a se tornar “linguiçento” demais e somos obrigados a utilizar mais classes e ids para organizarmos nosso CSS, pensando nisso que escrevi esse post!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;em&gt;Às vezes não necessariamente queremos ou podemos utilizar o z-index.&lt;/em&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Sem contar que quebramos o conceito de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/oocss-smacss-bem-dry-css-afinal-como-escrever-css/&#34;&gt;DRY&lt;/a&gt; em nosso documento CSS e não queremos isso, não é amiguinhos?
&lt;/p&gt;

&lt;div style=&#34;width: 495px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*xt8qqJopHwF-Gcg9xM6t3w.gif&#34; alt=&#34;Vida de um Front-end&#34; width=&#34;485&#34; height=&#34;364&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Front-end Lifestyle
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;z-index-quando-usar-graf-h4&#34;&gt;Z-index — Quando usar? {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando temos muitos elementos e precisamos especificar propriedades e características CSS que vão além do propósito de uma “imagem de fundo” ou “sobreposição” então o Z-index é a melhor opção!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Mas se você quer simplesmente sobrepor uma imagem de um logo (ou uma composição de camadas que formam um logo) sobre um uma ou mais imagem de preenchimento de fundo o background-image é a melhor solução!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Estes elementos ficam empilhados em camadas uma acima da outra, onde o primeiro fundo dado será desenhado no topo e apenas o último elemento da lista poderá definir uma cor sólida de fundo, ou não, aí fica ao seu critério.
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.minhaClasse {
  background: fundo1, fundo2, ..., fundoN;
}&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/tag/css3/&#34;&gt;CSS3&lt;/a&gt; permite especificar imagens de fundo para múltiplos elementos, usando nada mais do que uma única lista separada por vírgulas.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Você pode fazer isso com a propriedade reduzida &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt; e também com as propriedade individuais, com a exceção de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-color&#34;&gt;background-color&lt;/a&gt;. Isto é, as seguintes propriedades de plano de fundo podem ser especificadas com uma lista, uma por fundo: &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-attachment&#34;&gt;background-attachment&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;A propriedade CSS background-clip especifica se o fundo de um elemento, seja cor ou imagem, se extende debaixo de sua borda.&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-clip&#34;&gt;background-clip&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;background-image&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-origin&#34;&gt;background-origin&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-position&#34;&gt;background-position&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-repeat&#34;&gt;background-repeat&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-size&#34;&gt;background-size&lt;/a&gt;. (rola até gradiente!)
&lt;/p&gt;

&lt;h2 id=&#34;exemplos-graf-h3&#34;&gt;Exemplos {.graf&amp;ndash;h3}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Neste exemplo, três planos de fundos estão empilhados: um texto estilizado, o logo da Tableless.com.br, e uma imagem de fundo ilustrando uma cidade:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;div class=&#34;intro-text&#34;&amp;gt;
    &amp;lt;h1 class=&#34;name-index&#34;&amp;gt;BEM-VINDO À&amp;lt;/br&amp;gt;&amp;lt;span&amp;gt;INTERNET&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;header {
  background: url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&#34; rel=&#34;nofollow&#34;&gt;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&lt;/a&gt;) no-repeat center center, url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&#34; rel=&#34;nofollow&#34;&gt;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&lt;/a&gt;) no-repeat center top;
  height: 100vh;
  width: auto;
  box-sizing: border-box;
}
header .intro-text {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
header .intro-text &amp;gt; h1 {
  text-shadow: 8px 5px 5px #00181c;
  color: #fff;
  text-transform: uppercase;
  text-align: center;
}
header .intro-text .name-index {
  font-size: 7vw;
}
header .intro-text .name-index span {
  font-size: 9.2vw;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/vKddRK/&#34;&gt;Multiple backgrounds backgroud-image&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Suporte do navegador para múltiplas imagens com a propriedade CSS background-image é relativamente difundido na implementação do recurso citado acima:
&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Mozilla Firefox (3.6 ou superior)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Safari / Chrome (1.0 / 1.3 +)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Opera (10.5+)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    até mesmo no Internet Explorer (9.0+)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Bibliografia (Fontes)
&lt;/p&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;background-image&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;The CSS background-image property sets one or several background images for an element. The images are drawn on…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;Multiple backgrounds&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;Com CSS3 , você pode aplicar aos elementos multiplos planos de fundo. Estes ficam em camadas empilhadas uma acima da…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Aplicativos Desktop com NW.js – Node Webkit – Introdução</title>
      <link>https://tableless.github.io/hugo-public/aplicativos-desktop-com-nw-js-node-webkit-introducao/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/aplicativos-desktop-com-nw-js-node-webkit-introducao/</guid>
      <description>

&lt;h1 id=&#34;este-é-o-primeiro-artigo-de-uma-série-que-vou-escrever-sobre-aplicações-desktop-usando-tecnologias-web-html-css-javascript-e-webgl&#34;&gt;&lt;em&gt;&lt;strong&gt;Este é o primeiro artigo de uma série que vou escrever sobre aplicações desktop usando tecnologias web. (HTML, CSS, Javascript e WebGL)&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é uma aplicação em tempo de execução baseado em Chromium e Node.js, com ele é possível desenvolver aplicativos nativos para Windows, Linux e Mac, usando tecnologias web e usufruindo dos pacotes do Node.js.&lt;/p&gt;

&lt;p&gt;Para ter uma ideia do que é possível fazer, visite este link e veja alguns aplicativos desenvolvidos com NW.js -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é um projeto criado pela Intel. Outro projeto muito bom e conhecido para desenvolver aplicativos desktop usando tecnologias web é o &lt;strong&gt;Electron&lt;/strong&gt;, criado pelo GitHub. Segue um link comparativo entre os dois -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa série de artigos, vou explicar como criar um aplicativo desktop, com ícone personalizado e empacotado em um único executável. No último artigo, vou explicar como fazer uma integração com base de dados local, em tempo real e sem a necessidade de abrir portas ou fazer configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A versão mais atual do NW.js no momento em que eu escrevo este artigo é a &lt;strong&gt;&lt;em&gt;nwjs-v0.15.3&lt;/em&gt;&lt;/strong&gt;, é esta que estou usando. Além disso, estou usando Windows como sistema operacional.&lt;/p&gt;

&lt;p&gt;Vamos começar com um &amp;#8220;Olá Mundo&amp;#8221;, porém, vou explicar alguns recursos de &amp;#8220;Window&amp;#8221; e as configurações para iniciar o projeto.&lt;/p&gt;

&lt;p&gt;Primeiro faça o download do NW.js no site &lt;a href=&#34;http://nwjs.io/&#34;&gt;http://nwjs.io/&lt;/a&gt; &amp;#8211; Para desenvolvimento, baixe a versão SDK &amp;#8211; descompacte os arquivos em uma pasta que seja fácil para acessar pelo &lt;em&gt;prompt&lt;/em&gt; de comando &amp;#8211; eu costumo descompactar na pasta _c:\nwjs_&lt;/p&gt;

&lt;p&gt;Para uma aplicação básica funcionar, precisamos apenas de dois arquivos, o &lt;em&gt;package.json&lt;/em&gt;, que contém as configurações da nossa aplicação e o &lt;em&gt;index.html&lt;/em&gt;, que contém o código da nossa aplicação. Depois vamos adicionar arquivos .js e .css. Neste primeiro artigo, vamos brincar um pouco com o package.json.&lt;/p&gt;

&lt;p&gt;Crie um novo arquivo index.html &amp;#8211; vamos adicionar uma estrutura básica de HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Meu Primeiro Projeto&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Olá Mundo.&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Crie um novo arquivo package.json, com o código abaixo e salve na mesma pasta do HTML:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;
}&lt;/pre&gt;

&lt;p&gt;Somente com essas informações no package.json você já pode testar seu &amp;#8220;Olá Mundo&amp;#8221;. &amp;#8220;&lt;em&gt;name&lt;/em&gt;&amp;#8221; é o nome do projeto, e &amp;#8220;&lt;em&gt;main&lt;/em&gt;&amp;#8221; é o arquivo inicial da aplicação, sua &amp;#8220;página inicial&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Para executar nosso aplicativo, abra o &lt;em&gt;prompt&lt;/em&gt; de comando e vá até a pasta do seu projeto, no meu caso &amp;#8220;c:\projetos\olamundo&amp;#8221;, depois vamos executar o comando para o NW.js executar nosso projeto. Como estou usando o Windows, vou apontar para o nw.exe. No Linux ou no Mac é diferente, você pode olhar na documentação. Então nosso comando ficaria assim:&lt;/p&gt;

&lt;pre&gt;cd /path/to/your/app
/path/to/nw .&lt;/pre&gt;

&lt;p&gt;No meu caso:&lt;/p&gt;

&lt;pre&gt;cd c:\projetos\olamundo
c:\nwjs\nw.exe .&lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-54795 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/olamundo01.png&#34; alt=&#34;Tela Olá Mundo NW.js&#34; width=&#34;966&#34; height=&#34;535&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mais-sobre-o-package-json&#34;&gt;Mais sobre o package.json&lt;/h2&gt;

&lt;p&gt;O nosso package.json está muito simples, tem apenas um nome e o caminho do arquivo index. Vou explicar um pouco sobre as configurações &amp;#8220;window&amp;#8221;, que servem para controlar os botões de fechar, minimizar, informar os tamanhos mínimos e máximos, se a janela pode ser dimensionada e outras configurações.&lt;/p&gt;

&lt;p&gt;Abra o seu arquivo package.json e deixe ele como o exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;,
 &#34;version&#34;: &#34;1.0&#34;,
 &#34;description&#34;: &#34;Olá Mundo&#34;,
 &#34;window&#34;: {
 &#34;width&#34;: 400,
 &#34;height&#34;: 300,
 &#34;resizable&#34;: false,
 &#34;frame&#34;: true,
 &#34;title&#34;: &#34;Olá Mundo&#34;,
 &#34;show&#34;: true,
 &#34;fullscreen&#34;: false,
 &#34;kiosk&#34;: false,
 &#34;icon&#34;: &#34;icon.png&#34;
 }
}
&lt;/pre&gt;

&lt;p&gt;Execute novamente o aplicativo e veja como ficou. Abaixo, explico cada uma das configurações usadas.&lt;/p&gt;

&lt;pre&gt;name -&amp;gt; Nome do projeto
main -&amp;gt; Arquivo inicial
version -&amp;gt; Versão
description -&amp;gt; Descrição do projeto
window:
 width -&amp;gt; Largura da janela
 height -&amp;gt; Altura da janela
 resizable -&amp;gt; Se o tamanho da janela pode ser alterado ou não
 frame -&amp;gt; Quadro que envolve a aplicação com o título, ícone, botões de fechar, minimizar e maximizar
 title -&amp;gt; Título da janela
 show -&amp;gt; Se estiver como false você executa o aplicativo e ele fica em modo silencioso, 
  está rodando, mas não aparece. Fica apenas como um processo no Windows.
 fullscreen -&amp;gt; executa em tela cheia
 kiosk -&amp;gt; Executa em tela cheia e dificulta a saída da aplicação, normalmente é usado para exposições.
 icon -&amp;gt; Caminho para o ícone (deve estar na mesma pasta do projeto)&lt;/pre&gt;

&lt;p&gt;Você pode ver mais opções e detalhes na documentação: &lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34;&gt;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repositório com os fontes do primeiro artigo: &lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34;&gt;https://bitbucket.org/jzonta/artigos_nwjs&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;próximos-artigos-8211-aplicativos-desktop-com-nw-js-8211-node-webkit&#34;&gt;Próximos artigos &amp;#8211; Aplicativos Desktop com NW.js &amp;#8211; Node Webkit&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;1º &amp;#8211; Introdução&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Uma breve introdução, fazer um &amp;#8220;Olá Mundo&amp;#8221; e aprender um pouco sobre as configurações iniciais.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2º &amp;#8211; Menus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fazer um menu nativo da aplicação e um menu HTML, capturar as ações do botão de minimizar e alterar para minimizar o aplicativo para o System Try (Aqueles ícones pequenos ao lado do relógio) e vamos adicionar menu de opções no System Try.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3º &amp;#8211; Pacotes Node e Persistência de dados&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vamos aprender como usar os pacotes do Node.js, vamos instalar um pacote para persistir informações em um banco de dados MySql e também em um arquivo local.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4º &amp;#8211; Preparando para produção&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Como empacotar sua aplicação em um executável e adicionar um ícone para o Windows.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5º &amp;#8211; Integração web com base de dados local&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como fazer uma integração de uma aplicação web com um banco de dados local, através de uma api REST, sem a necessidade de abertura de portas ou configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Poste suas dúvidas e sugestões nos comentários!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sass vs. LESS vs. Stylus: Batalha dos Pré-processadores</title>
      <link>https://tableless.github.io/hugo-public/sass-vs-less-vs-stylus-batalha-dos-pre-processadores/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/sass-vs-less-vs-stylus-batalha-dos-pre-processadores/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Pré-processadores CSS3 são linguagens criadas com um único propósito de adicionar funcionalidades legais e criativas para o CSS sem quebrar a compatibilidade entre browsers. Os pré-processadores disponibilizam milhares de funcionalidades, e nesse artigo iremos falar sobre as mais utilizadas e conhecidas e algumas nem tanto conhecidas. Vamos começar:&lt;/p&gt;

&lt;h2 id=&#34;sintaxe&#34;&gt;Sintaxe&lt;/h2&gt;

&lt;p&gt;A parte mais importante ao escrever códigos utilizando um pré-processador é entender a sua sintaxe. Felizmente para nós, a sintaxe é (ou pode ser) idêntica à do CSS puro para os três pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-less&#34;&gt;Sass e LESS&lt;/h3&gt;

&lt;p&gt;Ambos utilizam o a sintaxe padrão do CSS. Isso faz com que seja extremamente fácil converter um arquivo CSS já existente para qualquer um deles. Sass utiliza arquivos com extensão .scss e LESS com extensão .less. Uma configuração básica de um arquivo Sass ou LESS pode ser como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.scss ou style.less */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ter notado, isso é apenas CSS puro, que compila perfeitamente em ambos pré-processadores (Sass e LESS).&lt;/p&gt;

&lt;p&gt;É importante notar que Sass também tem uma sintaxe mais antiga, que omite ponto e vírgula e as chaves. Ainda pode ser usado, mas como é uma sintaxe antiga, não iremos utilizá-la depois deste exemplo. A sintaxe utiliza arquivos com a extensão .sass e são da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.sass */
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Observação pessoal:&lt;/strong&gt; Essa sintaxe não é por causa de ser mais antiga e sim pois no início o &lt;strong&gt;Sass&lt;/strong&gt; era parte de um outro pré-processador chamado &lt;strong&gt;Haml&lt;/strong&gt; criado por desenvolvedores &lt;strong&gt;Ruby&lt;/strong&gt;, e por causa disso as folhas de estilo escritas com &lt;strong&gt;Sass&lt;/strong&gt; utilizavam uma sintaxe como a do &lt;strong&gt;Ruby&lt;/strong&gt;, sem chaves, ponto e vírgula e controlado por identação.&lt;/p&gt;

&lt;h3 id=&#34;stylus&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;A sintaxe para o Stylus é muito mais adaptável. Utiliza arquivos com extensão .styl, aceita a sintaxe padrão do CSS, porém também aceita algumas variações onde chaves, dois-pontos e ponto e vírgula são todos opcionais. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.styl */
h1 {
    color: #0982c1;
}
/* omitindo chaves */
h1
    color: #0982c1;

/* omitindo dois-pontos e ponto e vírgula
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;Utilizar diferentes variações em um mesmo arquivo também é válido, então o seguinte código seria compilado sem erros.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1 {
    color #0982c1
}
h2
    font-size: 1.2em
&lt;/pre&gt;

&lt;h2 id=&#34;variáveis&#34;&gt;Variáveis&lt;/h2&gt;

&lt;p&gt;Variáveis podem ser declaradas e usadas através das folhas de estilo. Elas podem ter qualquer valor que seja um valor em CSS (por exemplo: cores, números [unidades também], ou texto), e podem ser referenciadas em qualquer lugar das nossas folhas de estilo.&lt;/p&gt;

&lt;h3 id=&#34;sass&#34;&gt;Sass&lt;/h3&gt;

&lt;p&gt;Variáveis em Sass tem seu nome começado o símbolo &amp;#8220;$&amp;#8221; e o nome e o seu valor são separados com dois-pontos, assim como uma propriedade CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$mainColor: #0982c1;
$siteWidth: 1024px;
$borderStyle: dotted;

body {
    color: $mainColor;
    border: 1px $borderStyle $mainColor;
    max-width: $siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;Varíaves em LESS são praticamente iguais as variáveis no Sass, exceto por começarem seus nomes com o símbolo &amp;#8220;@&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mainColor: #0982c1;
@siteWidth: 1024px;
@borderStyle: dotted;

body {
    color: @mainColor;
    border: 1px @borderStyle @mainColor;
    max-width: @siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-1&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;Variáveis em Stylus não precisam começar com nenhum símbolo, porém ele permite a utilização do símbolo &amp;#8220;$&amp;#8221;. Como sempre, o ponto e vírgula para finalizar não é necessário, mas um sinal de igual entre o nome da variável e seu valor é. Uma coisa importante para se notar é que na versão 0.22.4 do Stylus variáveis com nome começados com o símbolo &amp;#8220;@&amp;#8221; são compiladas, porém não aplicam seu valor quando referenciadas. Em oturas palavras, não faça isso.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;mainColor = #0982c1;
siteWidth = 1024px;
$borderStyle = dotted;

body
    color mainColor
    border 1px $borderStyle mainColor
    max-width siteWidth
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Cada um dos arquivos acima irão compilar no mesmo CSS. Você pode usar sua imaginação para ver quão úteis variáveis podem ser. Não precisaremos mais ao mudar uma cor reescrever a mesma vinte vezes, ou querer mudar a largura de nosso site e ter de procurar por todo o site para fazer isso. Aqui está o CSS depois de compilado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    color: #0982c1;
    border: 1px dotted #0982c1;
    max-width: 1024px.
}
&lt;/pre&gt;

&lt;h2 id=&#34;aninhamento&#34;&gt;Aninhamento&lt;/h2&gt;

&lt;p&gt;Se precisarmos referenciar múltiplos elementos com o mesmo pai em nosso CSS, pode ser entediante ficar digitanto o pai toda vez.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;p&gt;Ao invés disso, usando um pré-processador, podemos escrever os seletores filhos dentro das chaves do elemento pai. O símbolo &amp;#8220;&amp;amp;&amp;#8221; é usado para referenciar o seletor pai.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;p&gt;Todos os três pré-processdores utilizam a mesma sintaxe para aninhar seletores.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;

    nav {
        height: 25px;

        a {
            color: #0982c1;

            &amp;:hover {
                text-decoration: underline;
            }
        }
    }
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-1&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Abaixo está o CSS compilado do código escrito acima. Está exatamente igual ao mostrado no começo &amp;#8211; que conveniente!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;h2 id=&#34;mixins&#34;&gt;Mixins&lt;/h2&gt;

&lt;p&gt;Mixins são funções que permitem reusar propriedades através de nossas folhas de estilo. Ao invés de procurar por todas nossas folhas de estilo e mudar uma propriedade várias vezes, podemos apenas mudar dentro de nosso mixin. Isso pode ser realmente útil para estilização de elementos específicos e para &amp;#8220;vendor prefixes&amp;#8221; (moz-*, o-*, etc). Quando os mixins são chamados de dentro de um seletor CSS, os argumentos são reconhecidos e os estilos dentro do mixin são aplicados ao seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-1&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Sass chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
@mixin error($borderWidth: 2px) {
    border: $borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    @include error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    @include error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-1&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em LESS chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
.error(@borderWidth: 2px) {
    border: @borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    .error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    .error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-2&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Stylus chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
error(borderWidth = 2px) {
    border: borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-2&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Todos pré-processadores irão compilar o mesmo código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.generic-error {
    padding: 20px;
    margin: 4px;
    border: 2px solid #f00;
    color: #f00;
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    border: 5px solid #f00;
    color: #f00;
}
&lt;/pre&gt;

&lt;h2 id=&#34;herança&#34;&gt;Herança&lt;/h2&gt;

&lt;p&gt;Quando estamos escrevendo CSS da velha maneira, nós usaríamos o seguinte código para aplicar o mesmo estilo para múltiplos elementos de uma só vez:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p,
u,
ol {
    /* estilos aqui */
}
&lt;/pre&gt;

&lt;p&gt;Isso funciona perfeitamente, mas se depois precisássemos de estilizar os elementos individualmente, outro seletor deveria ser criado para cada um e rapidamente poderia ficar cada vez mais bagunçado e difícil de manter. Podemos utilizar herança para resolver isso. Herança é a habilidade de outros seletores CSS herdarem as propriedades de outro seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-stylus&#34;&gt;Sass e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}

p {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-sass-e-stylus&#34;&gt;CSS Compilado (Sass e Stylus)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block, p, ul, ol {
    margin: 10px 5px;
    padding: 2px;
}
p {
    border: 1px solid #eee;
}
ul, ol {
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-2&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;LESS não tem suporte a herança de estilos como Sass e Stylus. Ao invés de adicionar diversos seletores para um grupo de propriedades, ele trata herança como um mixin sem argumentos e importa os estilos para dentro de seus próprios seletores. O problema disso é que propriedades são repetidas em sua folha de estilo compilada. Abaixo segue como deve-se utilizar:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
 
p {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Observação pessoal:&lt;/strong&gt; Como mencionado nos comentários, o LESS tem suporte a herança e pode ser feita com a seguinte sintaxe:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p {
        &amp;:extend(.block);
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-less&#34;&gt;CSS Compilado (LESS)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
p {
    margin: 10px 5px;
    padding: 2px;
    border: 1px solid #eee;
}
ul,
ol {
    margin: 10px 5px;
    padding: 2px;
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ver, os estilos do seletor .block foram inseridas nos seletores que queríamos aplicar a herança. É importante notar que a prioridade das propriedades pode se tornar um problema, então devemos ter bastante cautela.&lt;/p&gt;

&lt;h2 id=&#34;importação&#34;&gt;Importação&lt;/h2&gt;

&lt;p&gt;Na comunidade CSs, importar CSS é visto com maus olhos por utilizar diversas chamadas HTTP. Importar com um pré-processador funciona de forma diferente no entanto. Se você importar um arquivo com qualquer um dos três pré-processadores, ele irá literalmente pegar todo o conteúdo do arquivo durante a importação e gerar apenas um arquivo. Lembre-se que arquivos .css comuns importados compilam com o código:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;file.css&#34;;
&lt;/pre&gt;

&lt;p&gt;Lembre-se também que mixins e variáveis podem ser importadas e usadas em sua folha de estilo principal. Importação faz com que possamos criar arquivos separados para uma melhor organização.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-1&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* arquivo.{extensao} */
body {
    background: #eee;
}
&lt;/pre&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;reset.css&#34;;
@import &#34;arquivo.{extensao}&#34;;
 
p {
    background: #0982c1;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-3&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;h2 id=&#34;introdução-1&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;-&amp;gt;Pré-processadores produzem CSS que funciona em todos os browsers&lt;/p&gt;

&lt;p&gt;Pré-processadores CSS3 são linguagens criadas com um único propósito de adicionar funcionalidades legais e criativas para o CSS sem quebrar a compatibilidade entre browsers. Eles fazem isso compilando o código que escrevemos em CSS puro que pode ser usado em qualquer browser de agora até a era das pedras. Os pré-processadores disponibilizam milhares de funcionalidades, e nesse artigo iremos falar sobre as mais utilizadas e conhecidas e algumas nem tanto conhecidas. Vamos começar&lt;/p&gt;

&lt;h2 id=&#34;sintaxe-1&#34;&gt;Sintaxe&lt;/h2&gt;

&lt;p&gt;A parte mais importante ao escrever códigos utilizando um pré-processador CSS é entender a sua sintaxe. Felizmente para nós, a sintaxe é (ou pode ser) idêntica à do CSS puro para os três pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-less-1&#34;&gt;Sass e LESS&lt;/h3&gt;

&lt;p&gt;Ambos utilizam o a sintaxe padrão do CSS. Isso faz com que seja extremamente fácil converter um arquivo CSS já existente para qualquer um deles. Sass utiliza arquivos com extensão .scss e LESS com extensão .less. Uma configuração básica de um arquivo Sass ou LESS pode ser como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.scss ou style.less */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ter notado, isso é apenas CSS puro, que compila perfeitamente em ambos pré-processadores (Sass e LESS).&lt;/p&gt;

&lt;p&gt;É importante notar que Sass também tem uma sintaxe mais antiga, que omite ponto e vírgula e as chaves. Ainda pode ser usado, mas como é uma sintaxe antiga, não iremos utilizá-la depois deste exemplo. A sintaxe utiliza arquivos com a extensão .sass e são da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.sass */
h1 {
    color: #0982c1;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-3&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;A sintaxe para o Stylus é muito mais adaptável. Utiliza arquivos com extensão .styl, aceita a sintaxe padrão do CSS, porém também aceita algumas variações onde chaves, dois-pontos e ponto e vírgula são todos opcionais. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* style.styl */
h1 {
    color: #0982c1;
}
/* omitindo chaves */
h1
    color: #0982c1;

/* omitindo dois-pontos e ponto e vírgula
h1
    color: #0982c1
&lt;/pre&gt;

&lt;p&gt;Utilizar diferentes variações em um mesmo arquivo também é válido, então o seguinte código seria compilado sem erros.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;h1 {
    color #0982c1
}
h2
    font-size: 1.2em
&lt;/pre&gt;

&lt;h2 id=&#34;variáveis-1&#34;&gt;Variáveis&lt;/h2&gt;

&lt;p&gt;Variáveis podem ser declaradas e usadas através das folhas de estilo. Elas podem ter qualquer valor que seja um valor em CSS (por exemplo: cores, números [unidades também], ou texto), e podem ser referenciadas em qualquer lugar das nossas folhas de estilo.&lt;/p&gt;

&lt;h3 id=&#34;sass-2&#34;&gt;Sass&lt;/h3&gt;

&lt;p&gt;Variáveis em Sass tem seu nome começado o símbolo &amp;#8220;$&amp;#8221; e o nome e o seu valor são separados com dois-pontos, assim como uma propriedade CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$mainColor: #0982c1;
$siteWidth: 1024px;
$borderStyle: dotted;

body {
    color: $mainColor;
    border: 1px $borderStyle $mainColor;
    max-width: $siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-3&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;Varíaves em LESS são praticamente iguais as variáveis no Sass, exceto por começarem seus nomes com o símbolo &amp;#8220;@&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mainColor: #0982c1;
@siteWidth: 1024px;
@borderStyle: dotted;

body {
    color: @mainColor;
    border: 1px @borderStyle @mainColor;
    max-width: @siteWidth;
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-4&#34;&gt;Stylus&lt;/h3&gt;

&lt;p&gt;Variáveis em Stylus não precisam começar com nenhum símbolo, porém ele permite a utilização do símbolo &amp;#8220;$&amp;#8221;. Como sempre, o ponto e vírgula para finalizar não é necessário, mas um sinal de igual entre o nome da variável e seu valor é. Uma coisa importante para se notar é que na versão 0.22.4 do Stylus variáveis com nome começados com o símbolo &amp;#8220;@&amp;#8221; são compiladas, porém não aplicam seu valor quando referenciadas. Em oturas palavras, não faça isso.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;mainColor = #0982c1;
siteWidth = 1024px;
$borderStyle = dotted;

body
    color mainColor
    border 1px $borderStyle mainColor
    max-width siteWidth
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-4&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Cada um dos arquivos acima irão compilar no mesmo CSS. Você pode usar sua imaginação para ver quão úteis variáveis podem ser. Não precisaremos mais ao mudar uma cor reescrever a mesma vinte vezes, ou querer mudar a largura de nosso site e ter de procurar por todo o site para fazer isso. Aqui está o CSS depois de compilado:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    color: #0982c1;
    border: 1px dotted #0982c1;
    max-width: 1024px.
}
&lt;/pre&gt;

&lt;h2 id=&#34;aninhamento-1&#34;&gt;Aninhamento&lt;/h2&gt;

&lt;p&gt;Se precisarmos referenciar múltiplos elementos com o mesmo pai em nosso CSS, pode ser entediante ficar digitanto o pai toda vez.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;p&gt;Ao invés disso, usando um pré-processador, podemos escrever os seletores filhos dentro das chaves do elemento pai. O símbolo &amp;#8220;&amp;amp;&amp;#8221; é usado para referenciar o seletor pai.&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-2&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;p&gt;Todos os três pré-processdores utilizam a mesma sintaxe para aninhar seletores.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;

    nav {
        height: 25px;

        a {
            color: #0982c1;

            &amp;:hover {
                text-decoration: underline;
            }
        }
    }
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-5&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Abaixo está o CSS compilado do código escrito acima. Está exatamente igual ao mostrado no começo &amp;#8211; que conveniente!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;section {
    margin: 10px;
}
section nav {
    height: 25px;
}
section nav a {
    color: #0982c1;
}
section nav a:hover {
    text-decoration: underline;
}
&lt;/pre&gt;

&lt;h2 id=&#34;mixins-1&#34;&gt;Mixins&lt;/h2&gt;

&lt;p&gt;Mixins são funções que permitem reusar propriedades através de nossas folhas de estilo. Ao invés de procurar por todas nossas folhas de estilo e mudar uma propriedade várias vezes, podemos apenas mudar dentro de nosso mixin. Isso pode ser realmente útil para estilização de elementos específicos e para &amp;#8220;vendor prefixes&amp;#8221; (moz-*, o-*, etc). Quando os mixins são chamados de dentro de um seletor CSS, os argumentos são reconhecidos e os estilos dentro do mixin são aplicados ao seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-3&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Sass chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
@mixin error($borderWidth: 2px) {
    border: $borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    @include error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    @include error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-4&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em LESS chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
.error(@borderWidth: 2px) {
    border: @borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    .error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    .error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-5&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Mixin em Stylus chamado error com argumento $borderWidth opcional, caso não seja fornecido, utiliza o valor padrão de 2px; */
error(borderWidth = 2px) {
    border: borderWidth solid #f00;
    color: #f00;
}

.generic-error {
    padding: 20px;
    margin: 4px;
    error(); /* Aplica estilos do mixin error */
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    error(5px); /* Aplica estilos do mixin error com argumento $borderWidth = 5px */
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-6&#34;&gt;CSS Compilado&lt;/h3&gt;

&lt;p&gt;Todos pré-processadores irão compilar o mesmo código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.generic-error {
    padding: 20px;
    margin: 4px;
    border: 2px solid #f00;
    color: #f00;
}
.login-error {
    left: 12px;
    position: absolute;
    top: 20px;
    border: 5px solid #f00;
    color: #f00;
}
&lt;/pre&gt;

&lt;h2 id=&#34;herança-1&#34;&gt;Herança&lt;/h2&gt;

&lt;p&gt;Quando estamos escrevendo CSS da velha maneira, nós usaríamos o seguinte código para aplicar o mesmo estilo para múltiplos elementos de uma só vez:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;p,
u,
ol {
    /* estilos aqui */
}
&lt;/pre&gt;

&lt;p&gt;Isso funciona perfeitamente, mas se depois precisássemos de estilizar os elementos individualmente, outro seletor deveria ser criado para cada um e rapidamente poderia ficar cada vez mais bagunçado e difícil de manter. Podemos utilizar herança para resolver isso. Herança é a habilidade de outros seletores CSS herdarem as propriedades de outro seletor.&lt;/p&gt;

&lt;h3 id=&#34;sass-e-stylus-1&#34;&gt;Sass e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}

p {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    @extend .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-sass-e-stylus-1&#34;&gt;CSS Compilado (Sass e Stylus)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block, p, ul, ol {
    margin: 10px 5px;
    padding: 2px;
}
p {
    border: 1px solid #eee;
}
ul, ol {
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-5&#34;&gt;LESS&lt;/h3&gt;

&lt;p&gt;LESS não tem suporte a herança de estilos como Sass e Stylus. Ao invés de adicionar diversos seletores para um grupo de propriedades, ele trata herança como um mixin sem argumentos e importa os estilos para dentro de seus próprios seletores. O problema disso é que propriedades são repetidas em sua folha de estilo compilada. Abaixo segue como deve-se utilizar:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
 
p {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    border: 1px solid #eee;
}
ul, ol {
    .block; /* Herda estilos do seletor &#39;.block&#39; */
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;h3 id=&#34;css-compilado-less-1&#34;&gt;CSS Compilado (LESS)&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.block {
    margin: 10px 5px;
    padding: 2px;
}
p {
    margin: 10px 5px;
    padding: 2px;
    border: 1px solid #eee;
}
ul,
ol {
    margin: 10px 5px;
    padding: 2px;
    color: #333;
    text-transform: uppercase;
}
&lt;/pre&gt;

&lt;p&gt;Como você pode ver, os estilos do seletor .block foram inseridas nos seletores que queríamos aplicar a herança. É importante notar que a prioridade das propriedades pode se tornar um problema, então devemos ter bastante cautela.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;reset.css&#34;;
body {
    background: #eee;
}
p {
    background: #0982c1;
}
&lt;/pre&gt;

&lt;h2 id=&#34;funções-de-cores&#34;&gt;Funções de Cores&lt;/h2&gt;

&lt;p&gt;Funções de cores são funções nativas que transformam uma cor por compilação. Podem ser extremamente úteis para criar gradientes, escurecer cores no &amp;#8220;hover&amp;#8221; de elementos e muito mais.&lt;/p&gt;

&lt;h3 id=&#34;sass-4&#34;&gt;Sass&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten($color, 10%); /* retorna uma cor 10% mais clara que $color */
darken($color, 10%);  /* retorna uma cor 10% mais escura $color */
 
saturate($color, 10%);   /* retorna uma cor 10% mais saturada que $color */
desaturate($color, 10%); /* retorna uma cor 10% menos saturada que $color */
 
grayscale($color);  /* retorna $color na escala de cinza */
complement($color); /* retorna cor complementar de $color */
invert($color);     /* retorna cor inversa de $color */
 
mix($color1, $color2, 50%); /* mistura $color1 com $color2 com um peso de 50% */
&lt;/pre&gt;

&lt;p&gt;Essas é apenas uma pequena lista de funções de cores disponíveis no Sass. A lista completa das funções de cores disponíveis no Sass pode ser encontrada na &lt;a href=&#34;http://sass-lang.com/documentation/Sass/Script/Functions.html&#34; target=&#34;_blank&#34;&gt;documentação do Sass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Funções de cores podem ser usadas em qualquer lugar que uma cor é válida no CSS. Veja um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$color: #0982C1;
 
h1 {
    background: $color;
    border: 3px solid darken($color, 50%);
}
&lt;/pre&gt;

&lt;h3 id=&#34;less-6&#34;&gt;LESS&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten(@color, 10%); /* retorna uma cor 10% mais clara que @color */
darken(@color, 10%);  /* retorna uma cor 10% mais escura @color */
 
saturate(@color, 10%);   /* retorna uma cor 10% mais saturada que @color */
desaturate(@color, 10%); /* retorna uma cor 10% menos saturada que @color */
 
spin(@color, 10); /* retorna uma cor 10 graus acima na matiz/tonalidade que @color */
spin(@color, -10); /* retorna uma cor 10 graus abaixo na matiz/tonalidade que @color */
 
mix(@color1, @color2); /* mistura @color1 com @color2 */
&lt;/pre&gt;

&lt;p&gt;A lista de todas as funções disponíveis no LESS pode encontrada na &lt;a href=&#34;http://lesscss.org/#-color-functions&#34; target=&#34;_blank&#34;&gt;documentação LESS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veja um exemplo de como usar uma função de cores no LESS:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@color: #0982C1;
 
h1 {
    background: @color;
    border: 3px solid darken(@color, 50%);
}
&lt;/pre&gt;

&lt;h3 id=&#34;stylus-6&#34;&gt;Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;lighten(color, 10%); /* retorna uma cor 10% mais clara que &#39;color&#39; */
darken(color, 10%);  /* retorna uma cor 10% mais escura &#39;color&#39; */
 
saturate(color, 10%);   /* retorna uma cor 10% mais saturada que &#39;color&#39; */
desaturate(color, 10%); /* retorna uma cor 10% menos saturada que &#39;color&#39; */
&lt;/pre&gt;

&lt;p&gt;A lista completa de todas funções de cores disponíveis no Stylus pode ser encontrada na &lt;a href=&#34;http://stylus-lang.com/docs/bifs.html&#34; target=&#34;_blank&#34;&gt;documentação Stylus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veja um exemplo de como usar uma função de cores no Stylus:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;color = #0982C1
 
h1
    background color
    border 3px solid darken(color, 50%)
&lt;/pre&gt;

&lt;h2 id=&#34;operações&#34;&gt;Operações&lt;/h2&gt;

&lt;p&gt;Fazer cálculos no CSS é bastante útil e agora totalmente possível. É bem simples e é dessa maneira que fazemos:&lt;/p&gt;

&lt;h3 id=&#34;sass-less-e-stylus-3&#34;&gt;Sass, LESS e Stylus&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    margin: (14px/2);
    top: 50px + 100px;
    right: 100px - 50px;
    left: 10 * 10;
}
&lt;/pre&gt;

&lt;h2 id=&#34;aplicações-práticas&#34;&gt;Aplicações Práticas&lt;/h2&gt;

&lt;p&gt;Nós falamos de diversas funcionalidades e novas coisas que pré-processadores podem fazer, mas não mostramos nada na prática ainda. Veja uma pequena lista de aplicações no mundo real em que um pré-processador é um salva-vidas.&lt;/p&gt;

&lt;h3 id=&#34;vendor-prefixes&#34;&gt;Vendor Prefixes&lt;/h3&gt;

&lt;p&gt;Essa é uma das principais razões para se usar um pré-processador e por um motivo bom &amp;#8211; economia gigante de tempo e lágrimas. Criar um mixin para cuidar dos vendor prefixes é fácil e nos salva de uma codificação repetitiva e dolorosa. Veja como fazer:&lt;/p&gt;

&lt;h4 id=&#34;sass-5&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mixin border-radius($values) {
    -webkit-border-radius: $values;
        -moz-border-radius: $values;
            border-radius: $values;
}
 
div {
    @include border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-7&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.border-radius(@values) {
    -webkit-border-radius: @values;
        -moz-border-radius: @values;
            border-radius: @values;
}
 
div {
    .border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-7&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;border-radius(values) {
    -webkit-border-radius: values;
        -moz-border-radius: values;
            border-radius: values;
}
 
div {
    border-radius(10px);
}
&lt;/pre&gt;

&lt;h4 id=&#34;css-compilado-7&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
    -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
            border-radius: 10px;
}
&lt;/pre&gt;

&lt;h3 id=&#34;texto-3d&#34;&gt;Texto 3D&lt;/h3&gt;

&lt;p&gt;Simular um texto 3D utilizando diversos text-shadows é uma grande ideia. O único problema é que mudar a cor depois de criar é difícil e incômodo. Usando mixins e funções de cores, podemos criar um texto 3D e mudar sua cor sem nenhuma dificuldade.&lt;/p&gt;

&lt;h4 id=&#34;sass-6&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@mixin text3d($color) {
    color: $color;
    text-shadow: 1px 1px 0px darken($color, 5%),
            2px 2px 0px darken($color, 10%),
            3px 3px 0px darken($color, 15%),
            4px 4px 0px darken($color, 20%),
            4px 4px 2px #000;
}
 
h1 {
    font-size: 32pt;
    @include text3d(#0982c1);
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-8&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.text3d(@color) {
    color: @color;
    text-shadow: 1px 1px 0px darken(@color, 5%),
            2px 2px 0px darken(@color, 10%),
            3px 3px 0px darken(@color, 15%),
            4px 4px 0px darken(@color, 20%),
            4px 4px 2px #000;
}
 
span {
    font-size: 32pt;
    .text3d(#0982c1);
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-8&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;text3d(color)
    color: color
    text-shadow: 1px 1px 0px darken(color, 5%), 2px 2px 0px darken(color, 10%), 3px 3px 0px darken(color, 15%), 4px 4px 0px darken(color, 20%), 4px 4px 2px #000
span
    font-size: 32pt
    text3d(#0982c1)
&lt;/pre&gt;

&lt;p&gt;Escolhi escrever os &amp;#8220;text-shadows&amp;#8221; do Stylus em apenas uma linha pois omiti as chaves.&lt;/p&gt;

&lt;h4 id=&#34;css-compilado-8&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;span {
    font-size: 32pt;
    color: #0982c1;
    text-shadow: 1px 1px 0px #097bb7, 
            2px 2px 0px #0875ae, 
            3px 3px 0px #086fa4, 
            4px 4px 0px #07689a, 
            4px 4px 2px #000;
}
&lt;/pre&gt;

&lt;h4 id=&#34;resultado-final&#34;&gt;Resultado Final&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn.tutsplus.com/net/uploads/legacy/1144_preprocshootout/text3d.png&#34; alt=&#34;Texto 3D&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;colunas&#34;&gt;Colunas&lt;/h3&gt;

&lt;p&gt;Usar operações numéricas e variáveis para colunas é uma ideia que tive da primeira vez que estava brincando com pré-processadores CSS. Declarando a largura desejada em uma variável, podemos facilmente alterá-la sem precisar de nenhum cálculo mental. Veja como fazer:&lt;/p&gt;

&lt;h4 id=&#34;sass-7&#34;&gt;Sass&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;$siteWidth: 1024px;
$gutterWidth: 20px;
$sidebarWidth: 300px;
 
body {
    margin: 0 auto;
    width: $siteWidth;
}
.content {
    float: left;
    width: $siteWidth - ($sidebarWidth+$gutterWidth);
}
.sidebar {
    float: left;
    margin-left: $gutterWidth;
    width: $sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;less-9&#34;&gt;LESS&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@siteWidth: 1024px;
@gutterWidth: 20px;
@sidebarWidth: 300px;
 
body {
    margin: 0 auto;
    width: @siteWidth;
}
.content {
    float: left;
    width: @siteWidth - (@sidebarWidth+@gutterWidth);
}
.sidebar {
    float: left;
    margin-left: @gutterWidth;
    width: @sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;stylus-9&#34;&gt;Stylus&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;siteWidth = 1024px;
gutterWidth = 20px;
sidebarWidth = 300px;
 
body {
    margin: 0 auto;
    width: siteWidth;
}
.content {
    float: left;
    width: siteWidth - (sidebarWidth+gutterWidth);
}
.sidebar {
    float: left;
    margin-left: gutterWidth;
    width: sidebarWidth;
}
&lt;/pre&gt;

&lt;h4 id=&#34;css-compilado-9&#34;&gt;CSS Compilado&lt;/h4&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    margin: 0 auto;
    width: 1024px;
}
.content {
    float: left;
    width: 704px;
}
.sidebar {
    float: left;
    margin-left: 20px;
    width: 300px;
}
&lt;/pre&gt;

&lt;h2 id=&#34;peculiaridades-notáveis&#34;&gt;Peculiaridades Notáveis&lt;/h2&gt;

&lt;p&gt;Existem algumas peculiaridades ao usar um pré-processador CSS. Irei falar de algumas engraçadas, mas se você está realmente interessado em encontrar todas elas eu recomendo você vasculhar toda a documentação, ou melhor, começar a usar um pré-processador na sua codificação diária.&lt;/p&gt;

&lt;h3 id=&#34;relatório-de-erros&#34;&gt;Relatório de Erros&lt;/h3&gt;

&lt;p&gt;Se você já escreveu CSS por uma boa quantia de tempo, tenho certeza que você já chegou a um ponto onde você tinha um erro em algum lugar e simplesmente não conseguia o encontrar. Se você é como eu, provavelmente passou a tarde toda arrancando os cabelos fora e comentando diversas coisas para caçar o erro.&lt;/p&gt;

&lt;p&gt;Pré-processadores CSS relatam os erros. Simples assim. Se tem alguma coisa errada em seu códigom ele te fala onde e, se você estiver com sorte até mesmo o porquê. Você pode dar uma olhada &lt;a href=&#34;http://tjholowaychuk.com/post/5002088731/stylus-vs-sass-vs-less-error-reporting&#34; target=&#34;_blank&#34;&gt;nesse post&lt;/a&gt; caso esteja interessado em ver como os erros são relatados em diferentes pré-processadores.&lt;/p&gt;

&lt;h3 id=&#34;comentários&#34;&gt;Comentários&lt;/h3&gt;

&lt;p&gt;Quando um pré-processador CSS está compilando, qualquer comentário escrito com barras duplas &amp;#8220;//&amp;#8221; é excluído e qualquer comentários escrito com barra e asterisco &amp;#8220;/* */&amp;#8221; não é alterado. Dito isso, use comentários com barras duplas para comentários que você queira na versão não compilada e comentários com barra e asterisco para comentários que serão visíveis após a compilação.&lt;/p&gt;

&lt;p&gt;Observação: Se você compilar os arquivos, minificando-os, todos comentários são excluídos.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Cada um dos pré-processadores que falamos (Sass, LESS e Stylus) possui um modo único de realizar a mesma tarefa &amp;#8211; dando a nós desenvolvedor a habilidade de usar funcionalidades úteis mantendo a compatibilidade entre browsers e um código limpo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mesmo não sendo uma exigência para o desenvolvimento, pré-processadores podem economizar muito tempo e tem funcionalidades bastante úteis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eu aconselho todos vocês a utilizar e testar a maior quantidade de pré-processadores possível, pois assim você poderá escolher efetivamente um favorito e saber o porquê ele é seu favorito dentre tantos outros. Se você ainda não testou usar nenhum pré-processador para escrever seu CSS, eu recomendo grandemente a você testar.&lt;/p&gt;

&lt;p&gt;Você tem alguma funcionalidade de seu pré-processador favorito que não foi mencionada? Há algo que algum pré-processador possa fazer e outros não? Conte-nos nos comentários abaixo!&lt;/p&gt;

&lt;p&gt;Traduzido e adaptado de: &lt;a href=&#34;http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout--net-24320&#34;&gt;http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-preprocessor-shootout&amp;#8211;net-24320&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fazendo a animação do coração de like do Twitter</title>
      <link>https://tableless.github.io/hugo-public/fazendo-a-animacao-do-coracao-de-like-do-twitter/</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/fazendo-a-animacao-do-coracao-de-like-do-twitter/</guid>
      <description>&lt;p&gt;Quando o Twitter colocou uma animação no coração de Like na versão web, eu fiquei me perguntando como fazer aquela animação. De cara, parece ser bastante simples, e é. Mas é um detalhe que faz a diferença na interface para quem usa a rede social com frequência. Fiz uma versão mais simples. Segue abaixo:&lt;/p&gt;

&lt;p&gt;Antes de olhar o código deles pra pesquisar como foi feito, fiquei pensando em uma série de formas para fazer isso aí. Primeiro, pensei em ter várias imagens, e aí usar &lt;code&gt;keyframes&lt;/code&gt; pra alterar esse background do elemento a cada X tempo de milésimos de segundos. Depois evolui o pensamento para fazer apenas uma imagem, com todos os &amp;#8220;frames&amp;#8221; da animação. Muito mais inteligente, claro&amp;#8230; lembra dos Sprites&amp;#8230; Pois é. Com essa imagem eu poderia simplesmente mover o background com um transition simples do CSS. A imagem em questão é essa aqui:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2016/01/web_heart_animation.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/01/web_heart_animation.png&#34; alt=&#34;web_heart_animation&#34; style=&#34;width: 100%; height: auto;&#34; class=&#34;alignnone size-full wp-image-52833&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mas a coisa não funcionou muito bem. Ficou mais ou menos assim:&lt;/p&gt;

&lt;p&gt;Perceba que não houve o efeito de animação como eu estava esperando. Mas tem um truque: quando utilizamos a propriedade &lt;code&gt;transition&lt;/code&gt;, geralmente usamos os valores &lt;code&gt;linear&lt;/code&gt;, &lt;code&gt;ease-in&lt;/code&gt;, &lt;code&gt;ease-out&lt;/code&gt; e etc&amp;#8230; Essas funções definem como os valores intermediários de uma transição serão calculados. Eles pegam um valor inicial e calculam como a transição vai ocorrer até o valor final.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://developer.mozilla.org/files/3426/cubic-bezier,ease-in.png&#34; alt=&#34;&#34; /&gt;&lt;img src=&#34;https://mdn.mozillademos.org/files/3429/cubic-bezier,ease.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dá uma olhada nessa &lt;a href=&#34;http://easings.net&#34;&gt;tabela de referência&lt;/a&gt; de como as transições funcionam.&lt;/p&gt;

&lt;p&gt;Há um valor que eu não conhecia até então, chamado &lt;code&gt;steps()&lt;/code&gt;. A representação da transição do steps é assim:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mdn.mozillademos.org/files/3437/steps(4,end).png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;steps()&lt;/code&gt;, ao contrário dos outros valores, não determina uma transição contínua, mas ele separa os valores intermediários em frames estáticos. Veja um exemplo básico abaixo. Um usando linear e outro usando steps().&lt;/p&gt;

&lt;p&gt;Esse efeito seria o mesmo efeito que eu conseguiria se tivesse feito manualmente a primeira ideia de separar os frames da animação em várias imagens&amp;#8230; Mas muito mais inteligente. Mas perceba que eu ainda faço a transição movendo a posição do background. O valor &lt;code&gt;left&lt;/code&gt; do &lt;code&gt;background-position&lt;/code&gt; começa no **** e termina no &lt;strong&gt;-2800px&lt;/strong&gt;. Esse valor é exatamente a largura da imagem original que você quer fazer a animação. O coração do twitter é bem menor do que esse que eu estamos usando aqui no exemplo (embora a imagem seja a mesma). Aí é só mudar o tamanho usando o &lt;code&gt;background-size&lt;/code&gt; e fazendo os devidos acertos.&lt;/p&gt;

&lt;p&gt;O final, ficou assim:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como usar variáveis no CSS de forma nativa</title>
      <link>https://tableless.github.io/hugo-public/como-usar-variaveis-no-css-de-forma-nativa/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/como-usar-variaveis-no-css-de-forma-nativa/</guid>
      <description>

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Olá pessoal, neste artigo irei abordar o básico sobre variáveis nativas com CSS, e como você pode usar essa tecnologia hoje e sem medo de ser feliz.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-a-href-http-www-w3-org-tr-css-variables-target-blank-css-custom-properties-for-cascading-variables-module-level-1-a-span-p4&#34;&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;&lt;a href=&#34;http://www.w3.org/TR/css-variables/&#34; target=&#34;_blank&#34;&gt;CSS Custom Properties for Cascading Variables Module Level 1&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt; {.p4}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Esta especificação ainda em fase de &lt;em&gt;Last Call Working Draft&lt;/em&gt;, traz um novo módulo de CSS3 que permite a criação de varáveis de forma nativa, de uma forma simples e rápida como veremos a seguir.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-como-declarar-uma-variável-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Como declarar uma variável?&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Para declarar uma variável utilizamos as chamadas &lt;em&gt;Custom Properties&lt;/em&gt;, uma nova forma de declarar uma propriedade utilizando a seguinte sintaxe:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.exemplo {
  --destaque: #660066;
}
&lt;/pre&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Por definição uma &lt;em&gt;Custom Property&lt;/em&gt; é qualquer propriedade que inicie com dois hífens, como ‘—foo’. &lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-como-utilizar-uma-variável-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Como utilizar uma variável?&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Para utilizar uma variável utilizamos a função var(), passando a variável criada como parâmetro,  assim ela irá retornar o valor da variável, veja o exemplo a seguir:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.exemplo {
  --destaque: #660066;
  background-color: var(--destaque);
}
&lt;/pre&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;O que equivale diretamente a:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.exemplo {
  background-color: #660066;
}
&lt;/pre&gt;

&lt;h2 id=&#34;span-class-s1-a-notícia-ruim-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;A notícia ruim 🙁&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;As variáveis tem um escopo a ser seguido, logo uma variável não pode ser usada fora de seu escopo.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Exemplos de utilização correta do escopo:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.menu {
  --tamanho: 20px;
}
.menu ul li {
  padding: var(--tamanho); // retorna 20px
}
&lt;/pre&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Exemplo de utilização incorreta do escopo:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.menu {
  --tamanho: 20px;
}
.footer {
  padding: var(--tamanho); // não retorna nada
}
&lt;/pre&gt;

&lt;h2 id=&#34;span-class-s1-a-notícia-boa-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;A notícia boa 🙂&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Podemos declarar variáveis em um tipo de &amp;#8220;escopo global”, que nada mais é do que a raiz do documento,&lt;span class=&#34;Apple-converted-space&#34;&gt;  &lt;/span&gt;para isso utilizamos o seletor :root.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Exemplo de variáveis declaradas na raiz do documento.&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;:root {
  --tamanho: 50%;
  --cor: #660066;
}

.exemplo-1 {
  margin: var(--tamanho); // retorna 50%
}

.exemplo-2 {
  color: var(--cor); // retorna #660066
}
&lt;/pre&gt;

&lt;h2 id=&#34;span-class-s1-até-aqui-legal-mas-e-o-suporte-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Até aqui legal, mas e o suporte?&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Nem tudo são flores amigos, até o momento o suporte é apenas para Firefox. Vejam a tabela completa no &lt;a href=&#34;http://caniuse.com/#feat=css-variables&#34; target=&#34;_blank&#34;&gt;Can i use&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-como-usar-hoje-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Como usar hoje!&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Não teria graça se eu trouxesse aqui uma coisa tão divertida e ninguém pudesse usar, e com um suporte tão ruim, só nos resta apelar para o&lt;span class=&#34;Apple-converted-space&#34;&gt; &lt;/span&gt;maravilhoso &lt;a href=&#34;https://github.com/MadLittleMods/postcss-css-variables&#34; target=&#34;_blank&#34;&gt;postcss-css-variables&lt;/a&gt;, que é um plugin para &lt;a href=&#34;https://github.com/postcss/postcss&#34; target=&#34;_blank&#34;&gt;Post CSS&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h3 id=&#34;span-class-s1-mas-o-que-é-mesmo-esse-post-css-span-p3&#34;&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;Mas o que é mesmo esse Post CSS?&lt;/span&gt;&lt;/strong&gt; {.p3}&lt;/h3&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Esse cara é um pós-processador de CSS que possuí vários &lt;a href=&#34;https://github.com/postcss/postcss#plugins&#34; target=&#34;_blank&#34;&gt;plugins&lt;/a&gt;, sendo o mais famoso o &lt;a href=&#34;https://github.com/postcss/autoprefixer&#34; target=&#34;_blank&#34;&gt;Autoprefixer&lt;/a&gt;, quer por sua vez pega seu código e aplica os &lt;em&gt;vendors prefixes&lt;/em&gt; conforme a necessidade, e é exatamente isso que o postcss-css-variables faz, ele pega suas variáveis e as poem em seu devido lugar, compilando seu &amp;#8220;CSS do futuro&amp;#8221;, para um CSS nativo e suportado por todos.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Você pode ver exatamente como o plugin funciona no &lt;a href=&#34;https://madlittlemods.github.io/postcss-css-variables/playground/&#34; target=&#34;_blank&#34;&gt;postcss-css-variables Playground&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h3 id=&#34;span-class-s1-quais-as-vantagens-de-utilizar-o-postcss-css-variables-span-p3&#34;&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;Quais as vantagens de utilizar o postcss-css-variables?&lt;/span&gt;&lt;/strong&gt; {.p3}&lt;/h3&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;1 &amp;#8211; Você vai &lt;strong&gt;escrever o CSS de forma nativa&lt;/strong&gt;, e usar o pós-processador como um tipo de &amp;#8220;polyfill&amp;#8221;, que no futuro,  caso outros navegares além do firefox adotem a especificação, pode ser retirado e seu código já estará pronto, mais ou menos como ocorre com o JavaScript e o &lt;a href=&#34;https://babeljs.io/&#34; target=&#34;_blank&#34;&gt;Babel&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;2 &amp;#8211; Usar uma coisa nova em seu &lt;em&gt;workflow&lt;/em&gt;. Isso faz bem, principalmente quando abre um leque de novas possibilidades como aprender outras várias funções incríveis que o Post CSS trás.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-conclusão-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Conclusão&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Caso alguém me pergunte se &lt;strong&gt;v&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;ale a pena mudar o &lt;em&gt;workflow&lt;/em&gt; apenas para escrever variáveis de forma nativa?&lt;/span&gt;&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Talvez a resposta seja &lt;strong&gt;não&lt;/strong&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Agora, se alguém perguntasse se &lt;strong&gt;v&lt;/strong&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&lt;strong&gt;ale a pena brincar com uma coisa nova&lt;/strong&gt;, que no fim das contas vai me &lt;strong&gt;ensinar sobre pós-processadores&lt;/strong&gt;, me apresentar uma especificação que pode &lt;strong&gt;virar padrão no futuro&lt;/strong&gt; e me fazer &lt;strong&gt;refletir sobre formas diferentes de fazer a mesma coisa?&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Nesse caso a resposta é um imenso &lt;strong&gt;SIM&lt;/strong&gt;.&lt;/span&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Electron</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-electron/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-electron/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-o-electron&#34;&gt;O que é o Electron&lt;/h2&gt;

&lt;p&gt;O Electron foi desenvolvido para permitir que o desenvolvimento de aplicações &lt;em&gt;desktop&lt;/em&gt; usando JavaScript, HTML e CSS fosse muito mais fácil. Criado pela equipe do &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;, ficou conhecido no começo como Atom Shell. O Electron foi criado usando tecnologias como o &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; e o Chromium, e atualmente roda em ambiente de produção de vários projetos, como o próprio &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Atom editor&lt;/a&gt; e outros, como o &lt;a href=&#34;https://slack.com/&#34; target=&#34;_blank&#34;&gt;Slack&lt;/a&gt; e o &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Visual Studio Code&lt;/a&gt;. Ele é um &lt;em&gt;framework&lt;/em&gt; bem simples de trabalhar e de rápida configuração, para construção de pequenas e grandes aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para todos que queiram se aventurar mais, ou já conhecem o Electron, a documentação completa é traduzida para vários idiomas, inclusive o português. Para acessá-la é só &lt;a href=&#34;https://github.com/atom/electron/tree/master/docs-translations/pt-BR&#34; target=&#34;_blank&#34;&gt;clicar aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mãos-à-obra&#34;&gt;Mãos à obra&lt;/h2&gt;

&lt;p&gt;Nesta Introdução iremos abordar os primeiros passos para começar a trabalhar com o Electron e desenvolver aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Além do &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; presente em sua máquina, é necessário que você também instale globalmente o pacote &lt;code&gt;electron-prebuilt&lt;/code&gt;. Para isto, basta digitar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;language-bash&#34;&gt;npm install -g electron-prebuilt&lt;/pre&gt;

&lt;h3 id=&#34;entendendo-a-estrutura&#34;&gt;Entendendo a estrutura&lt;/h3&gt;

&lt;p&gt;A estrutura básica de arquivos que usaremos aqui é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;language-text&#34;&gt;electron-app/
├── app 
    ├── assets
        └── css
            └── main.css
    ├── main.js
    ├── index.html
    └── package.json
├── Gulpfile.js
└── package.json
&lt;/pre&gt;

&lt;p&gt;Vamos falar um pouco de cada arquivo e pasta inseridos no exemplo acima:&lt;/p&gt;

&lt;h4 id=&#34;app&#34;&gt;app&lt;/h4&gt;

&lt;p&gt;É  a pasta onde todos os arquivos referentes à aplicação são inseridos.&lt;/p&gt;

&lt;h4 id=&#34;main-js&#34;&gt;main.js&lt;/h4&gt;

&lt;p&gt;É o arquivo de inicialização da aplicação. Nele vão as configurações do tipo: tamanho da tela, posicionamento, manipular eventos do sistema, etc&amp;#8230;&lt;/p&gt;

&lt;h4 id=&#34;index-html&#34;&gt;index.html&lt;/h4&gt;

&lt;p&gt;É a pagina HTML que será nossa &lt;em&gt;view&lt;/em&gt; inicial para essa introdução.&lt;/p&gt;

&lt;h4 id=&#34;app-package-json&#34;&gt;app/package.json&lt;/h4&gt;

&lt;p&gt;O arquivo &lt;code&gt;package.json&lt;/code&gt; que vai dentro da pasta &lt;em&gt;app&lt;/em&gt; é o arquivo que leva todos as dependências que sua aplicação precisará para rodar. Sendo assim, qualquer pacote _npm_ a ser usado diretamente por sua aplicação deverá ser instalado nesse &lt;em&gt;package&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;gulpfile-js&#34;&gt;Gulpfile.js&lt;/h4&gt;

&lt;p&gt;Optei usar &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt; por escolha própria mesmo, mas fiquem livres para escolher seu &lt;em&gt;&amp;#8220;task runner&amp;#8221;&lt;/em&gt; favorito.&lt;/p&gt;

&lt;h4 id=&#34;package-json&#34;&gt;package.json&lt;/h4&gt;

&lt;p&gt;O &lt;code&gt;package.json&lt;/code&gt; que fica na raiz do seu projeto é responsável pelas configurações, dependências para seu ambiente de desenvolvimento. Tudo que for incluso neste arquivo não estará presente na &lt;em&gt;build&lt;/em&gt; de produção da sua &lt;em&gt;app&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;declarando-as-dependências&#34;&gt;Declarando as dependências&lt;/h3&gt;

&lt;p&gt;Após criar a estrutura de pastas que foi citada no tópico anterior. Iremos atribuir os mesmos valores para os atributos de ambos &lt;code&gt;package.json&lt;/code&gt; presentes no projeto. Levando em consideração que &lt;code&gt;&amp;quot;your-app&amp;quot;&lt;/code&gt; será o nome da sua aplicação.&lt;/p&gt;

&lt;pre class=&#34;language-json&#34;&gt;{
  &#34;name&#34;    : &#34;olamundo&#34;,
  &#34;version&#34; : &#34;0.1.0&#34;,
  &#34;main&#34;    : &#34;main.js&#34;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Caso o campo main não tenha sido preenchido, o Electron automaticamente procurará pelo arquivo &lt;code&gt;index.js&lt;/code&gt;. É importante que preencha este campo com o arquivo que usará na inicialização da aplicação.&lt;/p&gt;

&lt;p&gt;Após feito isso, instale as dependências que utilizaremos nesta introdução, no arquivo &lt;code&gt;package.json&lt;/code&gt; que se encontra diretamente na raiz do seu projeto.&lt;/p&gt;

&lt;pre class=&#34; language-bash&#34;&gt;npm install --save-dev electron-prebuilt fs-jetpack asar rcedit Q
&lt;/pre&gt;

&lt;h3 id=&#34;criando-seu-arquivo-de-inicialização&#34;&gt;Criando seu arquivo de inicialização&lt;/h3&gt;

&lt;p&gt;Depois de configurar as pastas e instalar as dependências da nossa aplicação, vamos abrir o nosso arquivo &lt;code&gt;main.js&lt;/code&gt; . Nele vamos incluir todo o código de configuração:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;var app = require(&#39;app&#39;);
var BrowserWindow = require(&#39;browser-window&#39;);

require(&#39;crash-reporter&#39;).start();

var mainWindow = null;

app.on(&#39;window-all-closed&#39;, function() {
  
  if (process.platform != &#39;darwin&#39;) {
    app.quit();
  }

});

app.on(&#39;ready&#39;, function() {
  
  mainWindow = new BrowserWindow({width: 800, height: 600});
  
  mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;);
  
  mainWindow.openDevTools();
  
  mainWindow.on(&#39;closed&#39;, function() {
    
    mainWindow = null;
  });
}); 
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: a Função &lt;em&gt;mainWindow.openDevTools&lt;/em&gt; é chamada apenas para iniciar o &lt;em&gt;Inspetor de Elementos&lt;/em&gt; junto com a aplicação. Caso não precisem, fiquem à vontade para removê-la do seu projeto.&lt;/p&gt;

&lt;h3 id=&#34;primeira-view&#34;&gt;Primeira &lt;em&gt;view&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Finalmente a parte mais fácil. Note que em nosso arquivo &lt;code&gt;main.js&lt;/code&gt; existe a seguinte função:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;); 
&lt;/pre&gt;

&lt;p&gt;Ela será responsável por carregar o arquivo &lt;code&gt;index.html&lt;/code&gt;. No exemplo a seguir, criei um exemplo bem simples de um arquivo HTML. Esta página que foi criada, tem os mesmos aspectos de uma janela aberta de um navegador. Ou seja, podemos carregar todos os arquivos CSS e JavaScript que utilizaremos normalmente. Veja:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
      &amp;lt;meta charset=&#34;utf-8&#34; /&amp;gt;
      &amp;lt;title&amp;gt;Olá Mundo&amp;lt;/title&amp;gt;
      &amp;lt;link href=&#34;assets/css/main.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;Olá Mundo&amp;lt;/h1&amp;gt;
      
      &amp;lt;p&amp;gt;Bem vindos à nossa introdução ao Electron&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
  
  &lt;h2 id=&#34;run-your-app&#34;&gt;
    Rodando sua aplicação
  &lt;/h2&gt;
  
  &lt;h3&gt;
    electron-prebuilt
  &lt;/h3&gt;
  
  &lt;p&gt;
    Se você instalou o &lt;code&gt;electron-prebuilt&lt;/code&gt; global, Acesse a pasta &lt;strong&gt;app&lt;/strong&gt; e rode o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;electron app&lt;/pre&gt;
  
  &lt;p&gt;
    Caso tenha instalado apenas localmente, então, na pasta &lt;strong&gt;app&lt;/strong&gt; de seu projeto, digite o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;&#34;../node_modules/.bin/electron&#34; &#34;./app&#34;&lt;/pre&gt;
  
  &lt;h3&gt;
    Automatizando
  &lt;/h3&gt;
  
  &lt;p&gt;
    Como citei anteriormente, usaremos o &lt;em&gt;Gulp&lt;/em&gt; para automatizar o &lt;em&gt;run&lt;/em&gt; da nossa aplicação, facilitando assim a criação de testes e o próprio desenvolvimento da aplicação. Para isso, deixaremos nosso &lt;code&gt;Gulpfile.js&lt;/code&gt; da seguinte maneira:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;),
  childProcess = require(&#39;child_process&#39;),
  electron = require(&#39;electron-prebuilt&#39;);
  
gulp.task(&#39;run&#39;, function () {
  childProcess.spawn(electron, [&#39;./app&#39;], { stdio: &#39;inherit&#39; });
});
&lt;/pre&gt;
  
  &lt;p&gt;
    Feito isso basta rodar o seguinte comando em seu terminal:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;gulp run&lt;/pre&gt;
  
  &lt;h2&gt;
    Criando uma distribuição
  &lt;/h2&gt;
  
  &lt;p&gt;
    Depois de terminado todo o processo de desenvolvimento, você pode criar uma distribuição do seu &lt;em&gt;app&lt;/em&gt; seguindo as instruções do &lt;a href=&#34;http://electron.atom.io/docs/v0.33.0/tutorial/application-distribution&#34; target=&#34;_blank&#34;&gt;Application Distribution guide&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Pronto! Você está pronto(a) para desenvolver aplicações Desktop com o Electron.
  &lt;/p&gt;
  
  &lt;p&gt;
    E caso queiram, o projeto está disponível no &lt;a href=&#34;https://github.com/henriquesosa/electron-intro&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Use as facilidades do CSS 4 hoje</title>
      <link>https://tableless.github.io/hugo-public/use-as-facilidades-do-css-4-hoje/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/use-as-facilidades-do-css-4-hoje/</guid>
      <description>

&lt;p&gt;Se CSS 3 trouxe muitas animações e transições, CSS 4 por sua vez traz muitos seletores novos que facilitam e muito a resolver problemas recorrentes em projetos complexos e grandes. E a maioria ou quase todas você já pode usar hoje com ajuda de alguns transpilers de CSS. Você consegue ter variáveis sem precisar usar pre processadores como Sass ou Less. A spec de CSS nível 4 ainda está em desenvolvimento, mas com transpilers como &lt;a href=&#34;http://cssnext.io/features/&#34;&gt;CSSNext&lt;/a&gt; e &lt;a href=&#34;https://github.com/reworkcss/rework&#34;&gt;Rework&lt;/a&gt;, você já pode começar a usar essas features hoje.&lt;/p&gt;

&lt;p&gt;A maioria dos seletores da especificação do CSS 4 são pseudo-classes. Os seletores sempre estiveram presentes desde o início da CSS, mas agora eles estão no nível 4 e tem um monte de adições incríveis. Vamos ver apenas as mais interessantes e ver como podemos fazer elas funcionarem hoje com a ajuda dos transpilers.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-o-cssnext&#34;&gt;O que é o CSSNext?&lt;/h3&gt;

&lt;p&gt;CSSNext é um transpiler que permite que você use as mais recentes features do CSS. Ele transforma as novas especificações CSS em CSS compatível com os navegadores hoje. E em um futuro proxímo, os navegadores irão implementar as novas especificações CSS. E com o tempo, poderemos ir removendo algumas transformações do cssnext que não será mais necessário.&lt;/p&gt;

&lt;p&gt;Ele é muito rápido, cssnext usa &lt;a href=&#34;https://github.com/postcss/postcss&#34;&gt;PostCSS&lt;/a&gt; que tem parser CSS de forma mais rápida. É um bom concorrente para libsass, e um pouco mais rápido que o Less por exemplo.&lt;/p&gt;

&lt;h3 id=&#34;como-começar-com-o-cssnext&#34;&gt;Como começar com o cssnext?&lt;/h3&gt;

&lt;p&gt;Para começarmos a brincar com o cssnext precisamos instalar ele, e pode ser feito de duas maneiras com Git ou NPM, que é o mais fácil.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ npm install cssnext&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Você pode instalá-lo local (&amp;#8211;save ou &amp;#8211;save-dev), ou instalar globalmente (-g) que não é muito recomendado.&lt;/p&gt;

&lt;p&gt;Podemos usar cssnext via CLI, com alguma lib JavaScript, algum plugin PostCSS ou através do Gulp, Grunt, broccoli e outros.&lt;/p&gt;

&lt;p&gt;E para você compilar um arquivo com as novas features CSS 4 para CSS compatível, basta você executar o arquivo de CSS 4 e o arquivo de saida:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cssnext index.css output.css&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;vamos-as-features&#34;&gt;Vamos as features!&lt;/h3&gt;

&lt;h4 id=&#34;1-custom-properties-var&#34;&gt;1. custom properties &amp;amp; var()&lt;/h4&gt;

&lt;p&gt;A especificação de CSS 4 dá a possibilidade de poder usar variáveis sem a necessidade de pré-processadores, hoje apenas o Chrome tem suporte a essa feature. E então o cssnext nós ajuda com isso.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;:root {
  --mainBgColor: blue;
}

body {
  color: var(--mainBgColor);
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/variables.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51818&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/variables.gif&#34; alt=&#34;variables&#34; width=&#34;1145&#34; height=&#34;433&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-gray&#34;&gt;2. gray()&lt;/h4&gt;

&lt;p&gt;Permite que você use mais de 50 tons de cinza (transpilado para rgba()). No primeiro argumento, você pode usar um número entre 0 e 255 ou uma porcentagem.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.foo {
  color: gray(85%);
}

.bar {
  color: gray(10%, 50%);
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/gray.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51819&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/gray.gif&#34; alt=&#34;gray&#34; width=&#34;1145&#34; height=&#34;433&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-any-link&#34;&gt;3. any-link&lt;/h4&gt;

&lt;p&gt;any-link simplifica os seletores de target de links. Como :link, :visited, :actived, para somente :any-link.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;nav :any-link {
  background-color: yellow;
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/any-link.gif&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51820&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/any-link.gif&#34; alt=&#34;any-link&#34; width=&#34;1145&#34; height=&#34;433&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E tem muitas outras features incríveis que vem com o CSS 4, e se você quiser saber mais recomendo você ver esse artigo do &lt;a href=&#34;http://tableless.com.br/seletores-css-nivel-4-o-que-vem-por-ai/&#34;&gt;Diego Eis&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;CSS 4 está trazendo muitas features interessantes para seletores inteligentes, por enquanto só podemos brincar e experimentar as novidades do CSS 4 com a ajuda desses transpilers. Isso também mostra o quanto a W3C está interessada em solucionar os problemas dos devs sem a necessidade de usar um pre-processor.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cssnext.io/&#34;&gt;CSSNext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reworkcss/rework&#34;&gt;Rework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://css4.rocks/&#34;&gt;CSS4 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/postcss/&#34;&gt;PostCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Afinal, como usar herança no CSS?</title>
      <link>https://tableless.github.io/hugo-public/afinal-como-usar-heranca-no-css/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/afinal-como-usar-heranca-no-css/</guid>
      <description>

&lt;p&gt;Herança surgiu para ajudar desenvolvedores a escreverem mesmo e produzirem mais. Vamos ver aqui como esse conceito básico das folhas de estilo pode nos ajudar no dia-a-dia.&lt;/p&gt;

&lt;p&gt;Geralmente quando alguém começa a desenvolver interfaces web, o processo é aos trancos e barrancos. Nessa situação, iniciantes buscam aprender como se faz aquela borda arredondada ou como aplicar transparência. Por fim, acabam deixando de lado conceitos básicos de CSS. Levando isso em conta, precisamos primeiramente aprender sobre &lt;strong&gt;especificidade&lt;/strong&gt; e &lt;strong&gt;efeito cascata&lt;/strong&gt;. Esses dois pontos são essenciais para aprendermos como escrever folhas de estilo usando herança.&lt;/p&gt;

&lt;h2 id=&#34;a-especificidade-de-seletores&#34;&gt;A especificidade de seletores&lt;/h2&gt;

&lt;p&gt;Um documento web possui derivadas fontes de estilo, sendo elas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a folha de CSS servida pela página;&lt;/li&gt;
&lt;li&gt;configurações setadas pelo usuário;&lt;/li&gt;
&lt;li&gt;o estilo &lt;em&gt;default&lt;/em&gt; aplicado pelo &lt;em&gt;user agent&lt;/em&gt; (ex: navegadores).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A primeira é a mais importante. A folha de estilo pode sobrescrever as configurações do usuário, que por sua vez pode sobrescrever os estilos aplicados &lt;em&gt;user agent&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Apesar do CSS servido pela página web ser mais específico, é importante lembrar que o usuário tem a opção de forçar o estilo desejado por ele. Porém, isso &lt;strong&gt;não vale para regras&lt;/strong&gt; que recebem &lt;code&gt;!important&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://www.w3.org/TR/css3-selectors/#specificity&#34; target=&#34;_blank&#34;&gt;W3C criou uma forma de calcular a especificidade de seletores&lt;/a&gt;. Para entender de forma simples, basicamente distribuímos pesos diferentes as regras aplicadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS inline: 1000 pontos;&lt;/li&gt;
&lt;li&gt;ID: 100 pontos;&lt;/li&gt;
&lt;li&gt;Classes, pseudo-classe e atributos: 10 pontos;&lt;/li&gt;
&lt;li&gt;Elementos: 1 ponto.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Na prática, podemos fazer cálculos como os exemplos a seguir:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p.foobar&lt;/code&gt;: 1 classe + 1 elemento = 11 pontos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;div#foobar .foo .bar&lt;/code&gt;: 1 ID + 1 elemento + 3 classes = 131&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A especificidade pode dar grandes dores de cabeça em projetos complexos, ainda mais quando o número de desenvolvedores é maior. Não é rara a aplicação com um grande número de uso do &lt;code&gt;!important&lt;/code&gt;. Isso funciona como uma forma de quebrar a especificidade para sobrescrever uma regra.&lt;/p&gt;

&lt;pre&gt;header h1 {
  color: red;
}

/* Essa regra será mais específica. */

h1 {
  color: red !important;
}
&lt;/pre&gt;

&lt;p&gt;Evite ao máximo usar &lt;code&gt;!important&lt;/code&gt;. Os 5 minutos que você economiza fazendo uso dele podem se tornar horas no futuro. Fica a dica:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;pt&#34;&gt;
  &lt;p dir=&#34;ltr&#34; lang=&#34;en&#34;&gt;
    Easy way to tell how screwed you are when dealing with CSS from a legacy project: `grep -rin &amp;#8216;!important&amp;#8217; assets/sass/ | wc -l`
  &lt;/p&gt;
  
  &lt;p&gt;
    — Rafael Rinaldi (@rafaelrinaldi) &lt;a href=&#34;https://twitter.com/rafaelrinaldi/status/586216597913739264&#34;&gt;9 abril 2015&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;efeito-cascata-o-coração-do-css&#34;&gt;Efeito cascata: o coração do CSS&lt;/h2&gt;

&lt;p&gt;Não é a toa que o a palavra &lt;em&gt;cascade&lt;/em&gt; está no nome nas folhas de estilo. Essa técnica é utilizada para definir o estilo a um seletor mesmo em caso de conflitos.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pergunta: você sabe o que acontece quando existem duas regras para um mesmo seletor?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A cascata define o peso de uma regra através das seguintes características:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;importância;&lt;/li&gt;
&lt;li&gt;origem;&lt;/li&gt;
&lt;li&gt;especificidade;&lt;/li&gt;
&lt;li&gt;ordem de declaração.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Saber como o efeito cascata funciona irá lhe poupar boas horas de trabalho.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mas e como o navegador lida com conflitos de regras?&lt;/em&gt; Primeiramente, ele vasculha &lt;strong&gt;todas as regras&lt;/strong&gt; que se aplicam ao elemento. Como segundo passo, ele irá classificar os &lt;strong&gt;níveis de importância&lt;/strong&gt; e suas &lt;strong&gt;origens&lt;/strong&gt;. Depois disso, irá ocorrer um &lt;em&gt;match&lt;/em&gt; das declarações com o &lt;strong&gt;mesmo nível de importância&lt;/strong&gt;. Por último, se houver duas regras com o mesmo peso, a que é &lt;strong&gt;declarada por último&lt;/strong&gt; ganhará.&lt;/p&gt;

&lt;p&gt;Você já deve ter percebido que quanto mais fácil esse processo para o navegador, mais performática será sua aplicação.&lt;/p&gt;

&lt;p&gt;Caso queira saber mais sobre efeito cascata e herança, &lt;a href=&#34;http://tableless.com.br/efeito-cascata-e-especificidade-do-css/&#34; target=&#34;_blank&#34;&gt;recomendo esse post do Tableless de 2009&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-herança&#34;&gt;A herança&lt;/h2&gt;

&lt;p&gt;A palavra herança rapidamente remete ao paradigma de &lt;a href=&#34;https://pt.wikipedia.org/wiki/Orienta%C3%A7%C3%A3o_a_objetos&#34; target=&#34;_blank&#34;&gt;Orientação a Objetos&lt;/a&gt;. Caso você acompanhe discussões sobre &lt;em&gt;front-end&lt;/em&gt;, já deve saber que o termo &amp;#8220;&lt;em&gt;orientação a objetos&lt;/em&gt;&amp;#8221; não é bem visto tratando-se de CSS.&lt;/p&gt;

&lt;p&gt;Assim como você herda métodos e atributos de objetos, no CSS você herda as regras de um elemento pai.&lt;/p&gt;

&lt;pre&gt;/* 
 * Todo o conteúdo textual do documento
 * terá 16px de tamanho, pois herdam do
 * `body`.
 */

body {
  font-size: 16px;
}&lt;/pre&gt;

&lt;p&gt;É importante lembrar que nem todas as propriedades serão herdadas por elementos filho. Geralmente as propriedades que se referem ao &lt;em&gt;box-model&lt;/em&gt; (&lt;code&gt;height&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;) não aceitam herança. Caso você queira forçar a herança, pode usar o valor &lt;code&gt;inherit&lt;/code&gt;. Aliás, você sabe a &lt;a href=&#34;http://tableless.com.br/entendendo-os-valores-initial-e-inherit-do-css/&#34; target=&#34;_blank&#34;&gt;diferença entre initial e inherit&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Podemos fazer um uso inteligente de herança para economizar várias linhas de código. É muito mais fácil especificar valores para elementos pais e utilizá-los em seus filhos do que especificar um por um. Se você der uma olhada em códigos de &lt;em&gt;frameworks&lt;/em&gt; de CSS, irá notar que herança é fortemente usada para melhorar a manutenção do projeto.&lt;/p&gt;

&lt;h2 id=&#34;herança-com-sass&#34;&gt;Herança com Sass&lt;/h2&gt;

&lt;p&gt;Pré-processadores deram super poderes para desenvolvedores escreverem CSS. Em nosso contexto, &lt;code&gt;@extend&lt;/code&gt; e &lt;em&gt;mixins&lt;/em&gt; nos trazem benefícios, mas que devem ser usados com bastante cautela.&lt;/p&gt;

&lt;h3 id=&#34;extend&#34;&gt;@extend&lt;/h3&gt;

&lt;p&gt;Podemos extender &lt;em&gt;placeholders&lt;/em&gt; (&lt;code&gt;%placeholder&lt;/code&gt;) e classes. Muitos autores desencorajam desenvolvedores a usarem esse recurso. O motivo é o CSS gerado.&lt;/p&gt;

&lt;p&gt;Por exemplo, digamos que temos uma classe &lt;code&gt;.error&lt;/code&gt; e queremos usar os estilos dela em outra classe.&lt;/p&gt;

&lt;pre&gt;.error {
  color: red;
}

.icon--error {
  @extend .error;
}
&lt;/pre&gt;

&lt;p&gt;O CSS gerado será o seguinte:&lt;/p&gt;

&lt;pre&gt;.error, .icon--error {
  color: red;
}&lt;/pre&gt;

&lt;p&gt;Ou seja, o Sass não &lt;em&gt;&amp;#8220;copia&amp;#8221;&lt;/em&gt; os valores, ele apenas separa o valor em uma &lt;em&gt;mesma regra&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Agora digamos que em outro contexto precisamos reescrever a cor de erro para um tom mais forte.&lt;/p&gt;

&lt;pre&gt;.other_context .error {
  color: darken(red, 10%);
}
&lt;/pre&gt;

&lt;p&gt;Além de criar a regra para a classe &lt;code&gt;.error&lt;/code&gt;, o pré-processador irá aplicar a regra para as outras &lt;em&gt;&amp;#8220;instâncias&amp;#8221;&lt;/em&gt; da classe:&lt;/p&gt;

&lt;pre&gt;.other_context .error, .other_context .icon--error {
  color: #cc0000;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Isso é péssimo&lt;/strong&gt;. Além de tirar o controle do desenvolvedor, isso irá gerar &lt;strong&gt;código desnecessário&lt;/strong&gt; e prejudicar outras áreas de uma interface. Lembre-se: tome cuidado com o &lt;em&gt;bug&lt;/em&gt; dos &lt;a href=&#34;http://blogs.msdn.com/b/ieinternals/archive/2011/05/14/10164546.aspx&#34; target=&#34;_blank&#34;&gt;4095 seletores&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Usando &lt;em&gt;placeholders&lt;/em&gt;, o Sass irá realmente &amp;#8220;copiar&amp;#8221; os estilos para a classe que possui o &lt;code&gt;@extend&lt;/code&gt;. Porém, se o &lt;em&gt;placeholder&lt;/em&gt; for alterado em um contexto, isso também irá gerar uma regra para as classes que o estenderam.&lt;/p&gt;

&lt;pre&gt;%error,
.error {
  color: red;
}

.icon--error {
  @extend %error;
}

.other_context .error {
  color: darken(red, 10%);
}
&lt;/pre&gt;

&lt;p&gt;O output será esse:&lt;/p&gt;

&lt;pre&gt;.error {
  color: red;
}

.icon--error {
  color: red;
}

.other_context .error {
  color: #cc0000;
}
&lt;/pre&gt;

&lt;p&gt;Perceba que dessa vez a instância de &lt;code&gt;.error&lt;/code&gt;, a classe &lt;code&gt;.icon--error&lt;/code&gt; &lt;strong&gt;não herdou as regras&lt;/strong&gt; em outro contexto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resumindo: evite o &lt;code&gt;@extend&lt;/code&gt;. Se for usar, vá de &lt;em&gt;placeholders&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;mixins&#34;&gt;Mixins&lt;/h3&gt;

&lt;p&gt;Outra forma criar herança é usando &lt;em&gt;mixins&lt;/em&gt;. Com eles você pode realmente &lt;em&gt;copiar&lt;/em&gt; propriedades e valores para uma classe.&lt;/p&gt;

&lt;pre&gt;@mixin error {
  color: red;
}

.icon--error {
  @include error;
}

.label--error {
  @include error;
}
&lt;/pre&gt;

&lt;p&gt;O problema com essa abordagem é que ela não será tão performática, levando em conta que ela gerará duas regras com o mesmo código:&lt;/p&gt;

&lt;pre&gt;.icon--error {
  color: red;
}

.label--error {
  color: red;
}
&lt;/pre&gt;

&lt;p&gt;Porém, mixins são eficientes se você precisar de parâmetros.&lt;/p&gt;

&lt;p&gt;Vamos continuar com nosso exemplo. Se precisarmos de uma cor mais forte, poderemos passar essa opção por parâmetro.&lt;/p&gt;

&lt;pre&gt;@mixin error($critical: false) {
  @if $critical {
    color: darken(red, 10%);
  } @else {
    color: red;
  }
}

.icon--error {
  @include error;
}

.icon--critical-error {
  @include error($critical: true);
}
&lt;/pre&gt;

&lt;p&gt;O Sass irá gerar o vermelho mais escuro quando passarmos o valor &lt;code&gt;true&lt;/code&gt; para a variável &lt;code&gt;$critical&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;.icon--error {
  color: red;
}

.icon--critical-error {
  color: #cc0000;
}
&lt;/pre&gt;

&lt;h2 id=&#34;concatenação-de-classes&#34;&gt;Concatenação de classes&lt;/h2&gt;

&lt;p&gt;Se você é purista e não gosta de pré-processadores ou prefere não usar as &amp;#8220;mágicas&amp;#8221; do Sass, você pode fazer uso da concatenação/composição de classes no HTML. O &lt;a href=&#34;http://getbootstrap.com/&#34; target=&#34;_blank&#34;&gt;Bootstrap&lt;/a&gt; usa essa abordagem.&lt;/p&gt;

&lt;p&gt;Basicamente você terá estilo padrão em uma classe e usará outras, se necessário, para alterar o layout.&lt;/p&gt;

&lt;p&gt;No HTML com um elemento de botão, teríamos a classe &lt;code&gt;.button&lt;/code&gt;. Se precisarmos criar um botão de sucesso, usamos a classe &lt;code&gt;.button--success&lt;/code&gt; juntamente com &lt;code&gt;.button&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;.button {
  display: inline-block;
  padding: 10px;
  color: black;
  background-color: white;
}

.button--success {
  color: white;
  background-color: green;
}
&lt;/pre&gt;

&lt;p&gt;Na minha opinião essa é a forma mais correta de usarmos herança. Sempre opte por usar &lt;em&gt;features&lt;/em&gt; nativas do CSS ao invés das mágicas do Sass.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Herança é uma abordagem extremamente necessária para começar a entender o desenvolvimento de CSS escalável. Depois de entender bem o conceito, estude &lt;a href=&#34;http://tableless.com.br/oocss-smacss-bem-dry-css-afinal-como-escrever-css/&#34; target=&#34;_blank&#34;&gt;padrões de escrita&lt;/a&gt;. Olhe o código fonte de &lt;em&gt;frameworks&lt;/em&gt; para entender a arquitetura usada.&lt;/p&gt;

&lt;p&gt;Nunca saia escrevendo CSS até dar certo. Entenda as regras e planeja seus passos. Pensar antes de começar sem dúvidas será mais produtivo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Centralizando conteúdo na vertical e horizontal  com CSS Flexbox</title>
      <link>https://tableless.github.io/hugo-public/centralizando-conteudo-na-vertical-e-horizontal-com-css-flexbox/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/centralizando-conteudo-na-vertical-e-horizontal-com-css-flexbox/</guid>
      <description>&lt;p&gt;Centralizar as coisas com CSS não é algo trivial. Na verdade, centralizar na horizontal é até fácil. Mas centralizar elementos na vertical já beira o impossível. Existem as maneiras antigas, &lt;a href=&#34;http://tableless.com.br/centralizando-um-objeto-na-horizontal-e-vertical-com-css/&#34;&gt;com position por exemplo&lt;/a&gt;, mas que não passam de gambiarras. Dá para fazer com &lt;code&gt;display: table;&lt;/code&gt; emulando uma tabela. Mas também não é a melhor das soluções.&lt;/p&gt;

&lt;p&gt;Como eu estou usando cada vez mais Flexbox, acho que já é uma boa hora de usarmos essa alegria em produção. Logo, segue aí a dica de como centralizar conteúdo na vertical e na horizontal usando só CSS com Flexbox.&lt;/p&gt;

&lt;p&gt;Nosso HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;
  &amp;lt;div class=&#34;wrapper&#34;&amp;gt;
    &amp;lt;div&amp;gt;
      Tão simples quanto isso.
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Nosso CSS:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;html, body {
  height: 100%;
  min-height: 100%;
}

body {
  font: 15px arial;
  color: rgba(0, 0, 0, .7);
}

.wrapper {
  height: 100%;
  min-height: 100%;
  display: -webkit-flex;
  display: flex;
  -webkit-align-items: center;
  align-items: center;
  -webkit-justify-content: center;
  justify-content: center;
}

.wrapper div {
  padding: 40px;
  border: 1px solid rgba(0, 0, 0, .3)
}
&lt;/pre&gt;

&lt;p&gt;Rapidamente: estamos fazendo com que o HTML e o Body tenham uma altura de 100%, para que o nosso &lt;code&gt;.wrapper&lt;/code&gt; consiga ocupar todo o espaço vertical da tela. Assim podemos posicionar nosso &lt;code&gt;div&lt;/code&gt; no centro.&lt;/p&gt;

&lt;p&gt;No &lt;code&gt;.wrapper&lt;/code&gt; definimos a propriedade &lt;code&gt;display: flex;&lt;/code&gt; que avisa o navegador que os elementos filhos diretos do &lt;code&gt;.wrapper&lt;/code&gt; deverão agir como flexbox. A propriedade &lt;code&gt;align-items&lt;/code&gt; centraliza os elementos flex na vertical. A propriedade &lt;code&gt;justify-content&lt;/code&gt; centraliza os elementos na horizontal.&lt;/p&gt;

&lt;p&gt;Perceba que usei o prefixo &lt;code&gt;-webkit-&lt;/code&gt; por causa do Safari.&lt;/p&gt;

&lt;p&gt;Olha só como está o status no CanIUse.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/Screen-Shot-2015-10-07-at-2.50.22-PM.png&#34; alt=&#34;Flexbox no Can I Use&#34; width=&#34;1254&#34; height=&#34;313&#34; class=&#34;alignnone size-full wp-image-51607&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Material Design com Materialize</title>
      <link>https://tableless.github.io/hugo-public/material-design-com-materialize/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/material-design-com-materialize/</guid>
      <description>

&lt;p&gt;Há muito tempo quero falar um pouco sobre desenvolvimento de sites utilizando layouts baseados no Material Design do Google, mas entre &lt;strong&gt;fazer&lt;/strong&gt; e &lt;strong&gt;falar&lt;/strong&gt; há um abismo enorme. Minha verdadeira intenção é compartilhar um pouco a maneira mais fácil de desenvolver um layout utilizando todos aqueles conceitos que a Google tem implementado atualmente.&lt;/p&gt;

&lt;h2 id=&#34;primeiros-passos&#34;&gt;Primeiros Passos&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&#34;http://materializecss.com/&#34; target=&#34;_blank&#34;&gt;Materialize&lt;/a&gt; é um Framework desenvolvido para facilitar e agilizar nosso desenvolvimento quando o assunto é Material Design. Além de ágil, possui uma infinidade de vantagens que permitem que na maioria das vezes dispensam o uso de outros frameworks para complementá-lo.&lt;/p&gt;

&lt;p&gt;Para baixar os arquivos do Materialize clique em &lt;a href=&#34;http://materializecss.com/getting-started.html&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt;, lá você verá uma documentação explicando como fazer o download dos arquivos e todas as maneiras que você tem para fazer isso, ou também pode usar a CDN dele como geralmente muitos fazem com o JQUERY. Os arquivos são bem distribudos e não diferem dos demais Frameworks que existem.&lt;/p&gt;

&lt;h3 id=&#34;vamos-para-as-vantagens-dele&#34;&gt;Vamos para as vantagens dele&lt;/h3&gt;

&lt;p&gt;Uma das principais vantagens é o fato de ser muito similar ao Material Design desenvolvido pela google. Outra vantagem que podemos observar são os amplos recursos de JQuery que ele possui como: Slider, Lightbox, Captions, Modais, Transitions, Waves entre muitos outros. Melhor do que falar é mostrar. Esses recursos ficam na categoria &lt;a href=&#34;http://materializecss.com/media.html&#34; target=&#34;_blank&#34;&gt;JAVASCRIPT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O sistema de grid usado é bastante parecido com os frameworks já existentes, como o Bootstrap.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/materialize-css-framework-01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;
      &amp;lt;div class=&#34;container&#34;&amp;gt; &amp;lt;!-- Container similar ao utilizado em outros Frameworks --&amp;gt;
            &amp;lt;div class=&#34;row&#34;&amp;gt; &amp;lt;!-- Row também similar ao utilizado em outros Frameworks --&amp;gt;
                 &amp;lt;div class=&#34;col s12 m4 l4&#34;&amp;gt;Eu sou uma coluna&amp;lt;/div&amp;gt; &amp;lt;!-- Coluna com 3 tamanhos--&amp;gt;
            &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;entendendo-as-colunas&#34;&gt;Entendendo as colunas&lt;/h4&gt;

&lt;p&gt;É muito simples, assim como o bootstrap que trabalha com 4 tamanhos de coluna, muito pequeno, pequeno, médio e grande, o materialize decidiu trabalhar com 3 tamanhos que são pequeno médio e grande, nada que assuste ou prejudique o andamento do projeto. Para saber mais entre no &lt;a href=&#34;http://materializecss.com/grid.html&#34; target=&#34;_blank&#34;&gt;menu CSS e acesse o submenu Grid&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;alguns-pequenos-diferenciais-que-ele-possui&#34;&gt;Alguns pequenos diferenciais que ele possui&lt;/h3&gt;

&lt;p&gt;Alguns diferenciais que ele possui são os botões, o modal, os cards, as collections e o mais importante talves de todos o menu lateral, vou mostrar alguns desses abaixo.&lt;/p&gt;

&lt;h4 id=&#34;cards&#34;&gt;Cards&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/Sem-Título-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;sidenav&#34;&gt;Sidenav&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/menu.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;vendo-essa-belezinha-funcionar&#34;&gt;Vendo essa belezinha funcionar ^^&lt;/h3&gt;

&lt;p&gt;Eu poderia colocar um milhão de exemplos feitos aqui, mas não tenho os direitos autorais deles então caso queira ver o showcase do site acesse o link &lt;a href=&#34;http://materializecss.com/showcase.html&#34; target=&#34;_blank&#34;&gt;Showcase&lt;/a&gt; e veja. Mas para não deixar vocês sem nenhum exemplo deixo aqui um site feito por mim através do materialize, espero que gostem o link está na imagem e abaixo dela.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.loguei.com/&#34; target=&#34;_blank&#34;&gt;&lt;br /&gt; &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/263dfd28861105.55d5d38e09a6f.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.loguei.com/&#34; target=&#34;_blank&#34;&gt;blog.loguei.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bem, aqui terminamos esse maravilhoso assunto sobre um Framework bem simples e maneiro de usar. Espero ter ajudado um pouco a todos. Obrigado ^^.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entendendo Sistemas de Grid CSS do Zero</title>
      <link>https://tableless.github.io/hugo-public/entendendo-sistemas-de-grid-css-do-zero/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/entendendo-sistemas-de-grid-css-do-zero/</guid>
      <description>

&lt;p&gt;Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-1&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-1&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-1&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-1&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-1&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-1&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-1&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-1&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Quando resolvemos a fórmula, temos uma única coluna de largura 6.86666666667%. A partir daqui, podemos usar esse número para calcular as larguras das colunas restantes. A fórmula para isso é:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cw = (scw * cs) + (m * (cs – 1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;```Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-2&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-2&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-2&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-2&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-2&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-2&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-2&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-2&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-3&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-3&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-3&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-3&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-3&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-3&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-3&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-3&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Quando resolvemos a fórmula, temos uma única coluna de largura 6.86666666667%. A partir daqui, podemos usar esse número para calcular as larguras das colunas restantes. A fórmula para isso é:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cw = (scw * cs) + (m * (cs – 1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Aplicando essa fórmula para cada uma das 12 colunas resulta no CSS a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column-1 {
  width: 6.86666666667%;
}

.column-2 {
  width: 15.3333333333%;
}

.column-3 {
  width: 23.8%;
}

.column-4 {
  width: 32.2666666667%;
}

.column-5 {
  width: 40.7333333333%;
}

.column-6 {
  width: 49.2%;
}

.column-7 {
  width: 57.6666666667%;
}

.column-8 {
  width: 66.1333333333%;
}

.column-9 {
  width: 74.6%;
}

.column-10 {
  width: 83.0666666667%;
}

.column-11 {
  width: 91.5333333333%;
}

.column-12 {
  width: 100%;
}
&lt;/pre&gt;

&lt;h2 id=&#34;otimizando-para-dispositivos-móveis&#34;&gt;Otimizando para Dispositivos Móveis&lt;/h2&gt;

&lt;p&gt;Apesar do fato que o sistema de grid é responsivo, ele sozinho não pode ir tão longe. Para dispositivos com pequenas telas, tais como smartphones, a largura das colunas precisam se ajustar para permitir que o conteúdo que elas contêm ainda apareça legível e visualmente atraente. Consultas de mídia ajudam com isso:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media only screen and (max-width: 550px) {
  .column-1,
  .column-2,
  .column-3,
  .column-4,
  .column-5,
  .column-6,
  .column-7,
  .column-8,
  .column-9,
  .column-10,
  .column-11,
  .column-12 {
    width: auto;
    float: none;
  }

  .column + .column {
    margin-left: 0;
  }
}
&lt;/pre&gt;

&lt;p&gt;Aqui, estamos dizendo ao grid para permitir que cada coluna possa ocupar a largura total do seu &lt;em&gt;container&lt;/em&gt; para dispositivos com uma janela menor que 550px de largura. &lt;em&gt;Gutters&lt;/em&gt; já não são mais necessárias aqui, então nós as removemos.&lt;/p&gt;

&lt;p&gt;Como alternativa, você pode optar pela estratégia &lt;a href=&#34;http://www.sitepoint.com/making-case-mobile-first-designs/&#34; target=&#34;_blank&#34;&gt;mobile first&lt;/a&gt; que leva a abordagem oposta, aumentando para um layout de 12 colunas. Nesse caso, as colunas começam como uma largura total, depois estabelecemos as larguras das colunas e &lt;em&gt;floats&lt;/em&gt; para permitir que elas se alinhem horizontalmente quando a resolução da tela atinge um limite especificado.&lt;/p&gt;

&lt;p&gt;Esse é a abordagem preferida para o sistema de grid do &lt;a href=&#34;http://www.sitepoint.com/understanding-bootstrap-grid-system/&#34; target=&#34;_blank&#34;&gt;bootstrap&lt;/a&gt;, que não institui a largura das colunas até que a janela de exibição atinja uma largura mínima de 992px. Essa pode ser uma abordagem mais favorável para seu caso, e deve ser algo para analisar melhor quando avaliar um sistema de grid.&lt;/p&gt;

&lt;h2 id=&#34;juntando-tudo&#34;&gt;Juntando Tudo&lt;/h2&gt;

&lt;p&gt;Quando combinamos todos os conceitos e o CSS, podemos escrever uma estrutura de layout em HTML igual a:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;row&#34;&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&#34;row&#34;&amp;gt;
  &amp;lt;div class=&#34;column column-2&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-2&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Confira abaixo a demonstração no CodePen para ver todo o sistema de grid em ação, incluindo grid aninhados.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/SitePoint/pen/dPqqvN/&#34;&gt;Understanding CSS Grid Systems&lt;/a&gt; by SitePoint (&lt;a href=&#34;http://codepen.io/SitePoint&#34;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você também experimentar a &lt;a href=&#34;http://codepen.io/ryanmorr/full/zxRzyE/&#34; target=&#34;_blank&#34;&gt;demo em tela cheia&lt;/a&gt; para uma melhor impressão. Não se esqueça de brincar com as dimensões da tela para ver como o grid lida com várias resoluções.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Como você pode ver, não é preciso muito para montar um sistema de grid básico. A matemática é provavelmente a parte mais complexa. Apesar da simplicidade, o grid continua a ser uma poderosa e flexível ferramenta para layouts estruturais. Com os diversos conceitos que discutimos aqui, espero que você tenha uma melhor compreensão de como sistemas de grid funcionam. Isso deve ajudá-lo a avaliar diferentes sistemas de grid que se destacam, e escolher o melhor deles para o seu próximo projeto, ou até mesmo criar o seu próprio.&lt;/p&gt;

&lt;p&gt;Tradução: Tamiris Bonicenha&lt;/p&gt;

&lt;p&gt;Acesse o artigo original no &lt;a href=&#34;http://www.sitepoint.com/understanding-css-grid-systems/&#34; target=&#34;_blank&#34;&gt;SitePoint – &amp;#8220;Understanding CSS Grid Systems from the Ground Up&amp;#8221;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Processo front-end na Locaweb</title>
      <link>https://tableless.github.io/hugo-public/processo-front-end-na-locaweb/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/processo-front-end-na-locaweb/</guid>
      <description>

&lt;p&gt;É muito interessante entender como funcionam os processos em grandes empresas e comparar com processo que você executa na sua própria empresa. Depois que li &lt;a href=&#34;http://jaydson.org/processo-front-end-no-terra/&#34;&gt;o post que o Jaydson fez falando um pouco sobre o processo de desenvolvimento no Terra&lt;/a&gt;, fiquei de escrever um artigo parecido mostrando mais ou menos como nós aqui da Locaweb fazemos nosso front-end. Sugiro que leia o post do Jaydson e mate a sua curiosidade sobre o processo que eles tem lá.&lt;/p&gt;

&lt;h2 id=&#34;testes&#34;&gt;Testes&lt;/h2&gt;

&lt;p&gt;Eu vou repetir o que o Jaydson e o Rafael Rinaldi já falaram tantas vezes em eventos e artigos: Fazer testes front-end é difícil. Ferramentas front-end ainda estão caminhando e nos últimos anos tivemos uma explosão de novidades que nos ajudou muito a avançar na profissionalização da área. Mas testes ainda é um dos pontos fracos. Conseguimos testar muito bem JavaScript usando Jasmine, QUnit e tantos outros, mas testes CSS ainda é um problema grande.&lt;/p&gt;

&lt;p&gt;Essa semana adotamos na equipe a utilização do &lt;a href=&#34;https://github.com/BBC-News/wraith&#34;&gt;Wraith&lt;/a&gt;, um &lt;a href=&#34;http://bbc-news.github.io/wraith/&#34;&gt;teste de comparação de telas feito pelos desenvolvedores da BBC&lt;/a&gt;. Essa é só uma forma de conseguir testar a consistência das telas do seu produto. O &lt;a href=&#34;http://hardy.io&#34;&gt;Hardy&lt;/a&gt;, por exemplo, que usa o Cucumber para comparar seu código.&lt;/p&gt;

&lt;p&gt;Se você se interessar por testes CSS e quiser se aventurar nesse mundo, sugiro que &lt;a href=&#34;http://csste.st&#34;&gt;visite o site CSSTe.st&lt;/a&gt;. Eles compilaram informações de várias iniciativas e sistemas que fazem o trabalho de testar CSS mais fácil. Dá uma vasculhada lá, você vai achar coisas bem interessantes.&lt;/p&gt;

&lt;h2 id=&#34;pull-request&#34;&gt;Pull Request&lt;/h2&gt;

&lt;p&gt;Fazemos branch feature. Isso quer dizer que ninguém faz fork do projeto. As modificações são feitas em branchs separadas e submetidas via Pull Request (ou Merge Request, dependendo do sistema que você usar).&lt;/p&gt;

&lt;p&gt;O Pull Request precisa ter o OK de duas pessoas do time antes de ser aprovado. Antes de baixar o branch, a gente avalia algumas coisas antes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;As issues e o Pull Request estão bem descritivos mostrando qual o problema e o qual a solução adotada, com instruções exatas do que deve ser testado e avaliado?&lt;/li&gt;
&lt;li&gt;O CI passou? Tá okay?&lt;/li&gt;
&lt;li&gt;Se for JavaScript, os testes foram feitos? Se já existiam, precisou de modificação?&lt;/li&gt;
&lt;li&gt;Documentação está okay? Todas as atualizações foram feitas?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O pior momento é descrever bem o Pull Request e as Issues. Temos que ter em mente que isso faz parte do Changelog e é muito útil para consultas posteriores.&lt;/p&gt;

&lt;p&gt;O pessoal da PlataformaTec tem uma cultura muito rica nesse assunto (e outros também). &lt;a href=&#34;http://guidelines.plataformatec.com.br/pull-requests.html&#34;&gt;Dá uma olhada no processo deles&lt;/a&gt;, que interessante!&lt;/p&gt;

&lt;h2 id=&#34;framework&#34;&gt;Framework&lt;/h2&gt;

&lt;p&gt;Desenvolvemos um framework interno chamado &lt;a href=&#34;http://opensource.locaweb.com.br/locawebstyle/&#34;&gt;Locaweb Style&lt;/a&gt;. Na verdade, hoje existem 3 tipos de frameworks de interface aqui na firma. Cada um serve para serviços com designs e propósitos totalmente diferentes: um para a área de Checkout (compra), outro para área de Central do Cliente e o principal que é para a interface dos produtos.&lt;/p&gt;

&lt;p&gt;Esso deve ser padrão em muitas empresas e várias pessoas vão perguntar por que não usamos o Bootstrap. Nosso framework principal, que é o que faz a interface dos produtos que tem contato direto com o usuário se chama &lt;strong&gt;Locaweb Style&lt;/strong&gt; e você pode ver o projeto (que é totalmente open source) &lt;a href=&#34;http://github.com/locaweb/locawebstyle/&#34;&gt;no nosso GitHub&lt;/a&gt;. A documentação está bem completa e &lt;a href=&#34;http://opensource.locaweb.com.br/locawebstyle/&#34;&gt;pode ser vista aqui&lt;/a&gt;. A ideia é que todos os produtos que tenham interface com o usuário use esse framework. Esse ponto é importante porque resolve uma série de problemas como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Processo&lt;/strong&gt; &amp;#8211; As três equipes trabalham melhor quando as responsabilidades são bem dividas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Experiência padronizada&lt;/strong&gt; &amp;#8211; Padronizando a interface e as interações, o usuário tem uma experiência melhor entre os produtos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tirar a responsabilidade do client-side dos back-ends&lt;/strong&gt; &amp;#8211; Cá entre nós: back-end não tem que se preocupar se o layout está bonito, se tem botão desalinhado, se aquilo vai ser bem visto no celular, se o CSS está bem escrito etc etc etc…&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Excesso de projetos&lt;/strong&gt; &amp;#8211; São diversos projetos ao mesmo tempo, com equipes enxutas, trabalhando paralelamente. Não perde-se mais tempo de desenvolvimento criando telas parecidas do zero.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UX com mais liberdade&lt;/strong&gt; &amp;#8211; O time de UX precisa de atenção, carinho e de alguém que sente com eles para se preocupar com coisas que façam o nosso cliente amar o produto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Liberar gargalos&lt;/strong&gt; &amp;#8211; Os times de UX e de front-end eram gargalos constantes. Precisávamos agilizar o processo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Já estamos na versão 3 e cometemos uma série de erros nas duas primeiras versões. O maior erro que eu posso citar é a utilização do Bootstrap como base. Geralmente, o design definido pelo designer do time não era igual ao do Bootstrap. Claro. A empresa precisa de uma identidade própria. Logo, tínhamos o problema de recriar o design dos módulos e muitas vezes, precisávamos estender as funcionalidades JS de alguns módulos do Bootstrap. Quando percebemos, estávamos reescrevendo boa parte do framework. Logo, decidimos retirar totalmente o Bootstrap da versão atual, mantendo apenas o GRID.&lt;/p&gt;

&lt;h2 id=&#34;stack-de-desenvolvimento&#34;&gt;Stack de desenvolvimento&lt;/h2&gt;

&lt;p&gt;Não vou explicar detalhadamente cada uma das tecnologias, mas segue todas que usamos hoje para manter principalmente o framework:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SASS&lt;/strong&gt; &amp;#8211; Usando sintaxe &lt;strong&gt;.sass&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wraith&lt;/strong&gt; &amp;#8211; Como teste de comparação visual de interface.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jasmine&lt;/strong&gt; &amp;#8211; Para testes JS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSHint&lt;/strong&gt; &amp;#8211; Para manter a escrita de JS padronizada.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rake&lt;/strong&gt; &amp;#8211; Para executar os testes e outras tarefas como publicação da documentação e fechamento de pacote para deploy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Middleman&lt;/strong&gt; &amp;#8211; Para manter as documentações.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.editorconfig&lt;/strong&gt; &amp;#8211; Para manter o padrão dos editores em dia.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nos projetos, nós nem nos preocupamos com o build dos assets. O Asset Pipeline está plugado em todos os projetos e faz tudo muito bem. Não há Grunt ou Gulp nos projetos.&lt;/p&gt;

&lt;p&gt;Usamos Travis ligado no nosso &lt;a href=&#34;http://github.com/locaweb/&#34;&gt;GitHub&lt;/a&gt;. Os projetos todos internamente usam Jenkins.&lt;/p&gt;

&lt;h2 id=&#34;deploy-e-ambiente&#34;&gt;Deploy e ambiente&lt;/h2&gt;

&lt;p&gt;O deploy melhorou muito nos últimos anos. Hoje estamos assim: alguns produtos, não todos, podem fazer deploy a qualquer hora. Alguns precisam abrir um ticket para agendar uma janela. Nós, quando precisamos fazer um deploy do framework, ainda precisamos agendar. Mas já estamos andando para fazer deploy a qualquer momento do dia sem limite de vezes. Como os produtos usam o Locaweb Style com a versão travada, não há nenhum tipo de risco. O Deploy também pode ser descomplicado e automatizado, já que são apenas assets.&lt;/p&gt;

&lt;p&gt;O nosso ambiente é bastante comum: temos um ambiente de teste, um de homologação e produção. Simples assim.&lt;/p&gt;

&lt;h2 id=&#34;pontos-falhos&#34;&gt;Pontos falhos&lt;/h2&gt;

&lt;p&gt;Existem uma série de coisas que precisamos melhorar assim que encontrarmos tempo entre um projeto e outro. Mas o principal é manter a padronização de escrita de JS nos projetos. Há projetos que não usam nenhum tipo de pattern (nós usamos o &lt;a href=&#34;http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript&#34;&gt;Revealing Module Pattern&lt;/a&gt;), outros que usam CoffeeScript (o padrão é não usar), outros projetos que misturam JS puro com jQuery (o padrão é usar sempre a abstração do jQuery). A ideia é que nenhum projeto precise ter CSS para customizações. Toda a interface precisa estar dentro do Locaweb Style. Nem sempre é possível, já que há uma premissa que tudo o que está no framework precisa ser usado em dois produtos no mínimo. Não tem sentido colocar algo lá se apenas um produto vai usar e os outros não.&lt;/p&gt;

&lt;h2 id=&#34;entrosamento&#34;&gt;Entrosamento&lt;/h2&gt;

&lt;p&gt;Ter uma equipe unida e entrosada é difícil. Todo mundo precisa estar disposto a fazer aquele relacionamento dar certo, sempre entendendo as diferenças pessoais de cada um, como em um casamento. Ter uma equipe 100% unida, sem brigas, concordando com tudo é impossível. Eu tenho a sorte de trabalhar com uma equipe que se conhece e sabe exatamente onde temos que melhorar mais, entendendo os pontos fracos e principalmente nossos pontos fortes. Leva tempo para criar esse entrosamento. Muito trabalho, suor e sangue. São muitas reuniões de feedback, 1 on 1, retrospectiva&amp;#8230;&lt;/p&gt;

&lt;p&gt;Outra coisa que ajuda é a multidisciplinaridade entre os integrantes. Temos caras que lá programam um pouco de back. Outros que são mestres no CSS e tem um chamego especial para o lado de UX e Design, outros que gostam de mexer com infra. Isso tudo conta como ponto positivo.&lt;/p&gt;

&lt;p&gt;Lendo assim, até parece simples! 😉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando Layouts com Susy Framework</title>
      <link>https://tableless.github.io/hugo-public/criando-layouts-com-susy-framework/</link>
      <pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-layouts-com-susy-framework/</guid>
      <description>

&lt;p&gt;Com a alta demanda e prazos cada vez menores somos obrigados a trabalhar cada vez mais rápido e isso serve de incentivo para que novos frameworks sejam feitos buscando melhorar a qualidade no desenvolvimento. Um desses frameworks é o Susy e nesse artigo vamos conhecer e dar os primeiros passos com ele.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-susy&#34;&gt;O que é Susy?&lt;/h2&gt;

&lt;p&gt;Susy é um framework que permite criar grids de acordo com as necessidades do seu site. Diferente de outros como Bootstrap e Foundation, você não vai precisar importar um arquivo cheio de classes em que vai usar apenas algumas delas. O Susy trabalha direto no estilo das classes que você definiu e personalizou.&lt;/p&gt;

&lt;p&gt;Para começar a usá-lo você precisa ter o Sass instalado e o mínimo de conhecimento sobre ele. Não vou me aprofundar em Sass, pois não é o foco desse artigo, mas para quem tiver alguma dúvida a respeito pode ver uma série de &lt;a href=&#34;http://goo.gl/PmuwuA&#34; target=&#34;_blank&#34;&gt;artigos&lt;/a&gt; aqui mesmo no Tableless.&lt;/p&gt;

&lt;p&gt;Agora que já sabemos do que se trata vamos começar a desenvolver nosso layout com Susy.&lt;/p&gt;

&lt;h2 id=&#34;criando-seu-primeiro-layout-com-susy&#34;&gt;Criando seu primeiro layout com Susy&lt;/h2&gt;

&lt;p&gt;Assumindo que você já tem o Sass instalado, vamos instalar o Susy. Abra o prompt de comando e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;gem install susy&lt;/pre&gt;

&lt;p&gt;Após concluir a instalação vamos criar uma pasta para o projeto e dentro dela um arquivo index.html, uma pasta css e uma pasta scss com um arquivo style.scss dentro dela.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-50233&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/estrutura-de-pastas.jpg&#34; alt=&#34;Learning Susy&#34; width=&#34;617&#34; height=&#34;76&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;iniciando-o-desenvolvimento&#34;&gt;Iniciando o desenvolvimento&lt;/h2&gt;

&lt;p&gt;Vamos construir o seguinte layout:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-50282&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/layout.png&#34; alt=&#34;layout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Primeiramente vamos iniciar o Sass para que nosso código possa ser compilado. Abra a pasta do projeto na linha de comando e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;sass --watch scss:css -r susy&lt;/pre&gt;

&lt;p&gt;Feito isso um arquivo style.css foi criado dentro da pasta css. Vamos adiciona-lo no head no html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/style.css&#34;&amp;gt;&lt;/pre&gt;

&lt;p&gt;Vamos adicionar o normalize ao nosso projeto&lt;/p&gt;

&lt;p&gt;Para usar o Susy no projeto temos apenas que adicionar a seguinte linha no style.scss:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;susy&#34;;&lt;/pre&gt;

&lt;h3 id=&#34;susy-map&#34;&gt;Susy Map&lt;/h3&gt;

&lt;p&gt;Susy Map é um conjunto de instruções que são declaradas no início do projeto.  O grid é gerado de acordo com as informações declaradas nele. Abaixo temos o Map do nosso projeto, vamos adiciona-lo no style.scss, mais informações podem ser adicionadas , mas para nosso projeto é o suficiente. As linhas estão comentadas informando o que cada uma faz.&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;$susy:(
    columns: 8, // número de colunas do grid
    container: 1140px, // largura do container
    debug: (image: show), // exibe as colunas do grid
);&lt;/pre&gt;

&lt;p&gt;Vou adicionar o código completo, mas somente as funções do Susy serão explicadas. Então vamos começar! No HTML, vamos adicionar o header da página:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header class=&#34;site-header&#34;&amp;gt;
    &amp;lt;div class=&#34;container&#34;&amp;gt;
        &amp;lt;div class=&#34;logo&#34;&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Logo&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;nav class=&#34;menu&#34;&amp;gt;
            &amp;lt;ul&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Photos&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/nav&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;/pre&gt;

&lt;p&gt;Vamos adicionar o estilo dele:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;.container {
    @include container(); // inclui na classe o container definido no Susy Map
}
.logo {
    float: left;
    padding: 0.9375rem;
    line-height: 2rem;
    font-size: 1.5rem;
}
nav {
    float: right;
    li {
        list-style: none;
        float: left;
        margin-left: 2rem;
        line-height: 2rem;
    }
}&lt;/pre&gt;

&lt;p&gt;Depois do header vamos inserir o banner no html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;container&#34;&amp;gt;
    &amp;lt;img src=&#34;img/banner.jpg&#34; class=&#34;banner&#34;&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Agora o estilo do banner:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;img {
    width:100%;
}
.banner {
    @include span(8 of 8);
    margin: gutter() 0;
    height: 100%;
}&lt;/pre&gt;

&lt;p&gt;O &amp;#8220;@include span (8 of 8)&amp;#8221; é uma função do Susy que diz que o banner irar ocupar 8 colunas das 8 declaradas no Susy Map, mas não é só isso, reparem que no margin adicionamos um valor &amp;#8220;gutter()&amp;#8221;, isso é outra função do Susy que adiciona o valor que existe entre os grids, pode ver como o espaço que está entre o header e o banner é o mesmo que está entre as 8 colunas que definimos no grids.&lt;/p&gt;

&lt;p&gt;Agora vamos adicionar o conteúdo do layout:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;container&#34;&amp;gt;
    &amp;lt;div class=&#34;sidebar&#34;&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Fortaleza&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Natal&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Recife&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Salvador&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;content&#34;&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/001.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/002.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/003.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/004.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/005.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/006.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;E o estilo delas:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;.sidebar {
    @include span (2 of 8);
    ul {
        margin: 0;
        padding: 1.2rem;
    }
    li {
        list-style: none;
        font-size: 1.1rem;
        border-bottom: 2px dotted #c6c6c6;
        &amp;:last-child {
            border:none;
        }
    }   
    a {
        display: block;
        padding: 1rem .5rem;
        color: #333;
        line-height: 2;
        text-decoration: none;
    }
}
.content {
    @include span (6 of 8 last);
}
.content-item {
    @include gallery(2 of 6);
    margin-bottom: gutter();
}&lt;/pre&gt;

&lt;p&gt;Repare nos includes que acabamos de usar. Na mesma linha usamos 2 colunas para o sidebar e as 6 para o content, veja que adicionamos um last no final do include na classe content, esse last serve para dizer que são as ultimas colunas da linha. O espaço entre os grids é feito com um margin-right e o last serve parar remover esse margin-right do ultimo item do grid. Olha lá o aquivo style.css para entender melhor o que está sendo feito.&lt;/p&gt;

&lt;p&gt;O footer não tem muito o que falar, então vamos apenas adicionar o código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;footer class=&#34;site-footer&#34;&amp;gt;
    &amp;lt;div class=&#34;container&#34;&amp;gt;
        &amp;lt;p&amp;gt;Copyright © 2015 - Desenvolvido por Felipe César para o Tableless&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;&lt;/pre&gt;

&lt;p&gt;E o estilo:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;.site-footer {
    margin-top: 2rem;
    padding: 0.6rem 0;
    color: #fff;
}&lt;/pre&gt;

&lt;p&gt;Por fim vamos apenas remover do Susy Map a linha que exibe os grids:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;debug: (image: show),&lt;/pre&gt;

&lt;p&gt;Pronto, finalizamos o nosso layout, fácil não é?! Esse projeto foi bem simples apenas para apresentar o framework e mostrar como funciona, mas não pare por aí, faça o &lt;a href=&#34;https://github.com/felipecesr/layout-susy-framework&#34; target=&#34;_blank&#34;&gt;download do código&lt;/a&gt;, brinque com ele, acesse a documentação do &lt;a href=&#34;http://susydocs.oddbird.net/en/latest/&#34; target=&#34;_blank&#34;&gt;Susy&lt;/a&gt; e conheça outros recursos que podem te ajudar bastante no desenvolvimento.&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado do artigo, bons estudos!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>