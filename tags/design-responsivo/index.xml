<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Responsivo on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/design-responsivo/index.xml</link>
    <description>Recent content in Design Responsivo on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/design-responsivo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Entendendo Sistemas de Grid CSS do Zero</title>
      <link>https://tableless.github.io/hugo-public/entendendo-sistemas-de-grid-css-do-zero/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/entendendo-sistemas-de-grid-css-do-zero/</guid>
      <description>

&lt;p&gt;Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-1&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-1&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-1&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-1&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-1&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-1&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-1&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-1&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Quando resolvemos a fórmula, temos uma única coluna de largura 6.86666666667%. A partir daqui, podemos usar esse número para calcular as larguras das colunas restantes. A fórmula para isso é:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cw = (scw * cs) + (m * (cs – 1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;```Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-2&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-2&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-2&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-2&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-2&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-2&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-2&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-2&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-3&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-3&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-3&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-3&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-3&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-3&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-3&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-3&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Quando resolvemos a fórmula, temos uma única coluna de largura 6.86666666667%. A partir daqui, podemos usar esse número para calcular as larguras das colunas restantes. A fórmula para isso é:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cw = (scw * cs) + (m * (cs – 1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Aplicando essa fórmula para cada uma das 12 colunas resulta no CSS a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column-1 {
  width: 6.86666666667%;
}

.column-2 {
  width: 15.3333333333%;
}

.column-3 {
  width: 23.8%;
}

.column-4 {
  width: 32.2666666667%;
}

.column-5 {
  width: 40.7333333333%;
}

.column-6 {
  width: 49.2%;
}

.column-7 {
  width: 57.6666666667%;
}

.column-8 {
  width: 66.1333333333%;
}

.column-9 {
  width: 74.6%;
}

.column-10 {
  width: 83.0666666667%;
}

.column-11 {
  width: 91.5333333333%;
}

.column-12 {
  width: 100%;
}
&lt;/pre&gt;

&lt;h2 id=&#34;otimizando-para-dispositivos-móveis&#34;&gt;Otimizando para Dispositivos Móveis&lt;/h2&gt;

&lt;p&gt;Apesar do fato que o sistema de grid é responsivo, ele sozinho não pode ir tão longe. Para dispositivos com pequenas telas, tais como smartphones, a largura das colunas precisam se ajustar para permitir que o conteúdo que elas contêm ainda apareça legível e visualmente atraente. Consultas de mídia ajudam com isso:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media only screen and (max-width: 550px) {
  .column-1,
  .column-2,
  .column-3,
  .column-4,
  .column-5,
  .column-6,
  .column-7,
  .column-8,
  .column-9,
  .column-10,
  .column-11,
  .column-12 {
    width: auto;
    float: none;
  }

  .column + .column {
    margin-left: 0;
  }
}
&lt;/pre&gt;

&lt;p&gt;Aqui, estamos dizendo ao grid para permitir que cada coluna possa ocupar a largura total do seu &lt;em&gt;container&lt;/em&gt; para dispositivos com uma janela menor que 550px de largura. &lt;em&gt;Gutters&lt;/em&gt; já não são mais necessárias aqui, então nós as removemos.&lt;/p&gt;

&lt;p&gt;Como alternativa, você pode optar pela estratégia &lt;a href=&#34;http://www.sitepoint.com/making-case-mobile-first-designs/&#34; target=&#34;_blank&#34;&gt;mobile first&lt;/a&gt; que leva a abordagem oposta, aumentando para um layout de 12 colunas. Nesse caso, as colunas começam como uma largura total, depois estabelecemos as larguras das colunas e &lt;em&gt;floats&lt;/em&gt; para permitir que elas se alinhem horizontalmente quando a resolução da tela atinge um limite especificado.&lt;/p&gt;

&lt;p&gt;Esse é a abordagem preferida para o sistema de grid do &lt;a href=&#34;http://www.sitepoint.com/understanding-bootstrap-grid-system/&#34; target=&#34;_blank&#34;&gt;bootstrap&lt;/a&gt;, que não institui a largura das colunas até que a janela de exibição atinja uma largura mínima de 992px. Essa pode ser uma abordagem mais favorável para seu caso, e deve ser algo para analisar melhor quando avaliar um sistema de grid.&lt;/p&gt;

&lt;h2 id=&#34;juntando-tudo&#34;&gt;Juntando Tudo&lt;/h2&gt;

&lt;p&gt;Quando combinamos todos os conceitos e o CSS, podemos escrever uma estrutura de layout em HTML igual a:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;row&#34;&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&#34;row&#34;&amp;gt;
  &amp;lt;div class=&#34;column column-2&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-2&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Confira abaixo a demonstração no CodePen para ver todo o sistema de grid em ação, incluindo grid aninhados.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/SitePoint/pen/dPqqvN/&#34;&gt;Understanding CSS Grid Systems&lt;/a&gt; by SitePoint (&lt;a href=&#34;http://codepen.io/SitePoint&#34;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você também experimentar a &lt;a href=&#34;http://codepen.io/ryanmorr/full/zxRzyE/&#34; target=&#34;_blank&#34;&gt;demo em tela cheia&lt;/a&gt; para uma melhor impressão. Não se esqueça de brincar com as dimensões da tela para ver como o grid lida com várias resoluções.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Como você pode ver, não é preciso muito para montar um sistema de grid básico. A matemática é provavelmente a parte mais complexa. Apesar da simplicidade, o grid continua a ser uma poderosa e flexível ferramenta para layouts estruturais. Com os diversos conceitos que discutimos aqui, espero que você tenha uma melhor compreensão de como sistemas de grid funcionam. Isso deve ajudá-lo a avaliar diferentes sistemas de grid que se destacam, e escolher o melhor deles para o seu próximo projeto, ou até mesmo criar o seu próprio.&lt;/p&gt;

&lt;p&gt;Tradução: Tamiris Bonicenha&lt;/p&gt;

&lt;p&gt;Acesse o artigo original no &lt;a href=&#34;http://www.sitepoint.com/understanding-css-grid-systems/&#34; target=&#34;_blank&#34;&gt;SitePoint – &amp;#8220;Understanding CSS Grid Systems from the Ground Up&amp;#8221;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nth-child() e calc() – Uma proposta para o abandono de frameworks de grids responsivos</title>
      <link>https://tableless.github.io/hugo-public/nth-child-calc-responsivos/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/nth-child-calc-responsivos/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Apesar da adoção do _Tableless _para construção de layouts o conceito de tabela ainda persiste através de inúmeros &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Além da semântica, o conceito &lt;em&gt;Tableless&lt;/em&gt; prega, sempre que possível, levar a responsabilidade do layout para o CSS. O problema dos &lt;em&gt;frameworks&lt;/em&gt; CSS focados em &lt;em&gt;grids&lt;/em&gt; é que a especificação do layout continua dentro do HTML, descrita através de classes CSS, ancoradas diretamente aos elementos HTML, e de forma intrusiva, ou seja, os elementos &lt;em&gt;&lt;table&gt;&lt;/em&gt; antigamente utilizados foram substituídos por elementos &lt;em&gt;&lt;div class=&amp;#8221;col-&amp;#8220;&gt;&lt;/em&gt; para a criação do layout.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-49871 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/gridLayout.png&#34; alt=&#34;Exemplo de Grid Layout&#34; width=&#34;521&#34; height=&#34;354&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enquanto a especificação &amp;#8220;&lt;a href=&#34;http://www.w3.org/TR/css3-grid-layout/&#34; target=&#34;_blank&#34;&gt;CSS Grid Layout Module&lt;/a&gt;&amp;#8221; ainda está no forno, proponho uma alternativa simples aos &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos, através da dupla dinâmica &lt;em&gt;&lt;strong&gt;nth-child()&lt;/strong&gt;&lt;/em&gt; e &lt;em&gt;&lt;strong&gt;calc()&lt;/strong&gt;&lt;/em&gt; presentes no CSS3, e que são suportadas pelos navegadores modernos, inclusive o IE9 (veja mais opções de compatibilidade &lt;a href=&#34;http://caniuse.com/#search=CALC&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://caniuse.com/#search=nth-child&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;). Para um rápido entendimento destes recursos também confira estes artigos: &lt;a href=&#34;http://tableless.com.br/nth-child/&#34;&gt;http://tableless.com.br/nth-child/&lt;/a&gt; e &lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34;&gt;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;exemplo-de-formulário&#34;&gt;Exemplo de formulário&lt;/h2&gt;

&lt;p&gt;Antes de partimos para o CSS, sempre que possível, precisamos usar elementos HTML5 semânticos, atributos WAI-ARIA, entre outros padrões de acessibilidade. Para este exemplo, o uso dos elementos de entradas de dados seguirão as técnicas preconizadas pelo eMAG 3.1 (ver &lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34;&gt;http://emag.governoeletronico.gov.br/&lt;/a&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Para cada elemento de entrada de dados presente na estrutura &lt;em&gt;form -&amp;gt; fieldset&lt;/em&gt; o seguinte padrão será seguido:&lt;/p&gt;

&lt;pre&gt;&lt;span style=&#34;line-height: 1.5;&#34;&gt;&amp;lt;label&amp;gt;
    &amp;lt;span&amp;gt;XXX:&amp;lt;/span&amp;gt;
    &amp;lt;input type=&#34;text&#34; value=&#34;&#34;&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Agora podemos aplicar o seguinte CSS para todos os elementos &lt;em&gt;&lt;label&gt;&lt;/em&gt; presentes neste padrão.&lt;/p&gt;

&lt;pre&gt;form fieldset &amp;gt; label {
    display: block;
    float: left;
    width: calc(100% - 10px);
    height: 55px;
    margin-top: 10px;
    margin-right: 10px;
}
form fieldset label &amp;gt; input {
    float: left;
}
label &amp;gt; input {
    display: block;
    width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Por termos utilizado o &lt;em&gt;margin-right&lt;/em&gt; com 10px, este valor foi contabilizado na largura do &lt;em&gt;label&lt;/em&gt; (uso da função &lt;em&gt;calc&lt;/em&gt;) com a finalidade de que sua margem não ultrapasse os limites do contêiner. Isto foi feito para que possamos alterar o layout de uma coluna para múltiplas colunas diretamente pelo CSS. Com este estilo, cada campo de entrada de dados aparecerá disposto como uma lista, e se adaptará a largura do contêiner.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49865 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário&#34; width=&#34;658&#34; height=&#34;532&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O próximo passo é poder criar mais de uma &amp;#8220;coluna&amp;#8221;, para que o campo Código e Nome fiquem na mesma &amp;#8220;linha&amp;#8221; quando o tamanho da tela for grande. O campo Código terá uma largura fixa de 80px e o campo Nome preencherá o restante do espaço do contêiner descontando a largura do campo Código juntamente com a margem de 10px dos dois &lt;em&gt;labels&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49869 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário Responsivo&#34; width=&#34;789&#34; height=&#34;537&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com estes recursos podemos alterar o layout da página HTML diretamente pelo CSS sem que a estrutura do layout fique no próprio HTML. Além de criar colunas que se adaptam a largura do contêiner, é possível criar colunas com tamanhos fixos, evitando também o uso de classes CSS, que só é encorajado quando for realmente necessário.&lt;/p&gt;

&lt;p&gt;O código fonte completo e a &lt;em&gt;Demo&lt;/em&gt; deste exemplo encontra-se em &lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34;&gt;http://codepen.io/rogeriodegoiania/pen/GJQmzb&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tendências Web 2015 para desenvolvedores</title>
      <link>https://tableless.github.io/hugo-public/tendencias-web-2015-para-desenvolvedores/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tendencias-web-2015-para-desenvolvedores/</guid>
      <description>

&lt;p&gt;O mundo dos desenvolvedores web está cada vez mais inovador e fantástico. Em 2015 teremos ferramentas mais qualificadas e conceitos que nos ajudarão na jornada de desenvolver um material super satisfatório. Pois não trará vantagens somente para nossos clientes, mas também nos poupará tempo, e para quem trabalha nessa área sabe que tempo é MUITO PRECIOSO.&lt;/p&gt;

&lt;h2 id=&#34;flat-design&#34;&gt;FLAT DESIGN&lt;/h2&gt;

&lt;p&gt;Sites com sombras, diversas fontes e cores para ressaltar o realismo da página ficou no passado, agora o que manda é a simplicidade. Design de empresas como Google, Twitter, Facebook e Windows 8 são exemplos fortíssimos de que isso deu certo e não vai sair de cena por muito tempo. Lembre-se: menos é mais!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/flat-design.png&#34;&gt;&lt;img class=&#34; size-full wp-image-48161 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/flat-design.png&#34; alt=&#34;flat-design&#34; width=&#34;730&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pense que interessante seria se essa moda aparecesse nos tempos de IE6, quando transparencia, bordas arredondadas e gradientes não funcionavam. Era só colocar um botão com cor chapada de fundo, letra branca e pronto. Funcionaria em todos os browsers. Flat to save the devs.&lt;/p&gt;

&lt;h2 id=&#34;motion-ui&#34;&gt;MOTION UI&lt;/h2&gt;

&lt;p&gt;A moderna forma de atrair o interesse dos usuários de forma leve e dinâmica está em alta. Frameworks te ajudam na missão de implementar mais animação em suas páginas sem fazer com que seu site fique pesado. Visite &lt;a href=&#34;http://foundation.zurb.com/apps/docs/#!/motion-ui&#34; target=&#34;_blank&#34;&gt;Foundation for APPs&lt;/a&gt; ou &lt;a href=&#34;http://daneden.github.io/animate.css/&#34; target=&#34;_blank&#34;&gt;Animate.css&lt;/a&gt; e veja os efeitos incríveis em ação.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/motion-ui.png&#34;&gt;&lt;img class=&#34; size-full wp-image-48162 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/motion-ui.png&#34; alt=&#34;motion-ui&#34; width=&#34;730&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/materialup-uma-colecao-de-conceitos-usando-material-design/&#34;&gt;Há um post aqui no Tableless&lt;/a&gt; que fala um pouco sobre as inspirações que o Material Design do Google teve em diversos designs.&lt;/p&gt;

&lt;h2 id=&#34;responsividade&#34;&gt;RESPONSIVIDADE&lt;/h2&gt;

&lt;p&gt;A preocupação em se adaptar a todos os dispositivos utilizados pelos usuários hoje em dia está ficando cada vez maior entre as empresas, por isso, para não perder mais tempo, utilize de uma ajudinha amiga como &lt;a href=&#34;http://getbootstrap.com/&#34; target=&#34;_blank&#34;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&#34;http://foundation.zurb.com/&#34; target=&#34;_blank&#34;&gt;Foundation&lt;/a&gt; e o novo &lt;del&gt;porém não menos interessante&lt;/del&gt; &lt;a href=&#34;http://semantic-ui.com/&#34; target=&#34;_blank&#34;&gt;Semantic UI&lt;/a&gt;. Todos os frameworks são simples e contam com ótimos tutoriais disponíveis no próprio site.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/design-responsivo.png&#34;&gt;&lt;img class=&#34; size-full wp-image-48163 aligncenter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/design-responsivo.png&#34; alt=&#34;design-responsivo&#34; width=&#34;730&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;single-pages&#34;&gt;SINGLE PAGES&lt;/h2&gt;

&lt;p&gt;Já viu aqueles sites em que você tem todo conteúdo em uma só página? Pois é, as single pages estão entre as tendências web 2015 e com razão. Além de visualmente serem mais agradáveis, são super práticas para usuários que odeiam se perder em milhares de páginas só para achar tal conteúdo que havia se interessado. Essa tecnologia fica ainda mais legal quando aplicada em mobiles! Olha um &lt;a href=&#34;http://www.twitch.tv/year/2014&#34; target=&#34;_blank&#34;&gt;exemplo bem legal aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/single-page.png&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-48164&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/single-page.png&#34; alt=&#34;Single Pages&#34; width=&#34;730&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A ideia de Single Pages Application é bem interessante e cada vez mais há ferramentas que nos ajudam nesse trabalho. Veja por exemplo &lt;a href=&#34;http://sennajs.com/&#34;&gt;o caso do SennaJS&lt;/a&gt;, idealizado pelo nosso amigo Eduardo Lundgreen.&lt;/p&gt;

&lt;h2 id=&#34;vídeos&#34;&gt;VÍDEOS&lt;/h2&gt;

&lt;p&gt;Os vídeos estão tendo muita receptividade pelos usuários hoje em dia e podem facilmente conseguir mais atenção para seu site se você utilizá-lo como forma de apresentação de sua empresa ou produto, por exemplo. Além de ser rápido e prático, é um meio de comunicação muito mais esclarecedor e satisfatório para o usuário que ao assistir irá receber e entender todo o assunto tratado.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/videos.png&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-48165&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/videos.png&#34; alt=&#34;Vídeos&#34; width=&#34;730&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Há outras formas de uso de vídeos por meio dos designers. Dá uma olhada em sites como &lt;a href=&#34;http://www.dadaabstories.org/&#34;&gt;Dadaab&lt;/a&gt; ou &lt;a href=&#34;http://www.barrelny.com/recap/2012/&#34;&gt;Barrel&lt;/a&gt; que fazem uso bem criativo de vídeos como parte do design do site.&lt;/p&gt;

&lt;p&gt;Junte todas essas armas para montar o site dos sonhos de seu cliente. 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RWD é fácil/difícil – Anotações Dan Mall – An Event Apart 2014</title>
      <link>https://tableless.github.io/hugo-public/rwd-ainda-e-facildificil-anotacoes-dan-mall-event-apart-2014/</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/rwd-ainda-e-facildificil-anotacoes-dan-mall-event-apart-2014/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;danielmall.com

&lt;ul&gt;
&lt;li&gt;Henry Ford moveu as pessoas que cuidavam da montagem do motor para mais perto umas das outras, assim ele reduziu custos e usou poucos trabalhadores, mais bem preparados e bem pagos, para fazer bem as coisas.&lt;/li&gt;
&lt;li&gt;Waterfall (fluxo linear) é ruim. Não é paralelo. É muito engessado.&lt;/li&gt;
&lt;li&gt;Muitas empresas tem equipes no modelo de montagem em linha. Um processo típico waterfall consistem em pequenas partes, isoladas: você finaliza uma tarefa e corre para próxima. Hoje, o processo de design precisa ser mais interativo porque nós temos múltiplas telas e dispositivos.&lt;/li&gt;
&lt;li&gt;Use um framework para atestar a qualidade dos seus sistemas não processos.&lt;/li&gt;
&lt;li&gt;Um framework tem restrições, não regras. É como um jogo de futebol: tem 90 minutos e um campo pré-determinado, mas o que acontece nesses 90 minutos e no campo sempre é uma surpresa.&lt;/li&gt;
&lt;li&gt;UX, Designers e desenvolvedores não devem competir entre si. Eles precisam cooperar. Não existe uma tarefa de design, ou uma tarefa do desenvolvedor, existe apenas UMA tarefa, que envolve todas as áreas para ser cumprida.&lt;/li&gt;
&lt;li&gt;O envolvimento das áreas são temperadas durante os processos.&lt;/li&gt;
&lt;li&gt;Crie pontos de foco: comece e termine os projetos em um mesmo lugar. Kick-offs são bons para iniciar os pontos focais. Repita as fases, comprima isso em pequenas tarefas e objetivos.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;modern-web-design-process&#34;&gt;Modern Web design process:&lt;/h2&gt;

&lt;h3 id=&#34;1-plain&#34;&gt;1. Plain&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pesquisa&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;É necessário pesquisar e entender o que funciona e o que não funciona.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trabalhar com Hipoteses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quando você trabalha com hipóteses você consegue respostas mais rápido. Você viaja em visões diferentes de um mesmo problema.&lt;/p&gt;

&lt;p&gt;Tenha uma visão do que o produto será. Compare esta visão com as pesquisas que faz.&lt;/p&gt;

&lt;h3 id=&#34;2-inventory&#34;&gt;2. Inventory&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Inventário de conteúdo&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Livro &amp;#8211; The Elements of Content Statrategy&lt;/li&gt;
&lt;li&gt;Você precisa trabalhar com a possibilidade de formatos no conteúdo: listas, parágrafos, títulos, citações e etc.&lt;/li&gt;
&lt;li&gt;Faça um mapa do conteúdo do site. Para que serve cada página? Qual o tipo de conteúdo deve haver em cada página?&lt;/li&gt;
&lt;li&gt;Uma atitude normal que envolve o Web Design é mostrar para as pessoas como seus sites irão aparecer em dispositivos específicos. Em vez disso, mostre como o site poderá se comportar em diversas telas. Isso é mais flexível.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Performance Budgets&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faça um inventário dos sites competidores.&lt;/li&gt;
&lt;li&gt;Compare a performance de cada um.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pattern Inventory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faça uma lista dos átomos (elementos e módulos do site)&lt;/li&gt;
&lt;li&gt;Organize isso em organismos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Visual Inventory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Normalmente designers tem questões sobre cores, tipografia, conceitos, metáforas. São perguntas normais na hora da produção.&lt;/li&gt;
&lt;li&gt;Tenha uma inventário visual do cliente e veja se as partes combinam, se elas trabalham juntas, se elas se conversam. Fazendo assim você consegue entender se algo precisa mudar para trabalhar melhor seu layout.&lt;/li&gt;
&lt;li&gt;As cores serão flat? Saturadas, Monocromatico?&lt;/li&gt;
&lt;li&gt;O Conceito será mais narrativa, será um caso de estudo direcionado?&lt;/li&gt;
&lt;li&gt;O tom precisa ser mais profissional? Mais engraçado? Mais básico?&lt;/li&gt;
&lt;li&gt;Comece com as fonts: sempre comece com a tipografia. Em telas pequenas, muitos dos modelos visuais podem ter problemas críticos de font.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-sketch&#34;&gt;3. Sketch&lt;/h3&gt;

&lt;p&gt;Explore ideias de modo rápido e rascunhado&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content reference wireframees&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Livro &amp;#8211; Responsive Design Workkflow &amp;#8211; Stephen Way&lt;/li&gt;
&lt;li&gt;liste as coisas que precisam estar na página. Depois organize blocos em uma página, dando prioridades para essas coisas Lembre-se que nem sempre o primeiro é o mais importante ou precisa ser maior que outras áreas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Element Collages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transform frases poderosas em ancoras visuais.&lt;/li&gt;
&lt;li&gt;Desenhe elementos e comece a colocá-los em uma mesma página no photoshop e veja como eles se comportam.&lt;/li&gt;
&lt;li&gt;Crie entregáveis que permitam revelar partes do processo de design para os clientes.&lt;/li&gt;
&lt;li&gt;É óbvio que isso não será um website. Mas você consegue ver como pode ser um website vendo a combinação dos elementos e como eles se comportam juntos.&lt;/li&gt;
&lt;li&gt;Para que o cliente não entenda que isso é um website, faça uma espécie de cartilha horizontal, mostrando todos os elementos e opções alternativas de cores e formas.&lt;/li&gt;
&lt;li&gt;&amp;#8220;Element collages are like giving your client a peek at all those hidden layers&amp;#8221; Paul Lloyd&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prototypes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protótipos de funcionalidades devem resolver um problema, específico, e só aquele problema.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;assemble&#34;&gt;Assemble&lt;/h3&gt;

&lt;p&gt;Colocando tudo junto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Presets&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Um template é como um preset (conjunto de &amp;#8220;configurações&amp;#8221; já preparado) é a junção de módulos e organismos. Princípio do Design Atomico&lt;/li&gt;
&lt;li&gt;Fazer presets ajuda a criar templates modulares e fáceis de manter.&lt;/li&gt;
&lt;li&gt;Responsive Design não é difícil mas traz muitos desafios que sempre estavam lá: performance, workflows, accessibility, benefícios para o negócio.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Imagens Responsivas de Alta Performance</title>
      <link>https://tableless.github.io/hugo-public/imagens-responsivas-de-alta-performance/</link>
      <pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/imagens-responsivas-de-alta-performance/</guid>
      <description>

&lt;p&gt;Desenvolver sites responsivos muitas vezes é como fazer malabarismo. São muitas bolas para manter no ar: largura do viewport, medidas relativas, velocidade da conexão, densidade de pixel e experiência do usuário. Lidar com o peso de tudo isto sem quebrar o layout é um objetivo bem difícil de atingir e por isto, muitos desenvolvedores, clientes e consequentemente usuários se afastam da ideia. No artigo de hoje vamos conhecer algumas técnicas de design responsivo para otimização de imagens que ajudam a reduzir (e muito) o peso final dos sites responsivos e equilibrar as bolas no ar.&lt;/p&gt;

&lt;h2 id=&#34;a-raíz-do-problema&#34;&gt;A raíz do problema&lt;/h2&gt;

&lt;p&gt;Esta técnica é simples e didática e, provavelmente, foi a primeira que você aprendeu quando começou seus estudos de Design Responsivo. Basta declarar no CSS que todas as imagens tenham largura máxima de 100% que todas as figuras do seu layout vão se redimensionar automaticamente e proporcionalmente &amp;#8211; de acordo com a largura do container pai.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;img {
  max-width:100%;
}&lt;/pre&gt;

&lt;p&gt;Isto aparentemente funciona e bem. Mas, se fosse o caminho ideal, o nosso artigo terminaria por aqui, certo? Vamos ver os principais problemas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;O pepino principal aqui é a performance. Você está essencialmente fazendo um usuário de um dispositivo móvel baixar arquivos muito mais pesados do que ele realmente precisa… Para que usar uma imagem gigante de 2560x1600px se ela será vista em um celular de 320x480px? Isto pode ser passável se existirem poucas imagens no seu layout. Mas multiplique isto por dezenas e uma breve visita ao seu site pode muito bem esgotar o plano de dados de alguém.&lt;/li&gt;
&lt;li&gt;Você necessariamente precisa de um container. Pode ser uma div, um figure ou até mesmo um span mas a imagem precisa &lt;strong&gt;estar dentro de alguma coisa&lt;/strong&gt;. E isto pode acrescentar diversas linhas a mais de código que não seriam realmente necessárias.&lt;/li&gt;
&lt;li&gt;As vezes o ideal não é encolher uma imagem e sim substituí-la. Pode ser que o seu banner &amp;#8220;hero&amp;#8221; tenha um texto aplicado ou que a imagem simplesmente perca os detalhes em um tamanho menor. Neste caso você poderia deixar duas imagens no código e usar um display:none no CSS para esconder e mostrar as imagens certas através de media queries. Mas o resultado em performance será ainda mais desastroso pois você está fazendo o usuário baixar DUAS imagens no lugar de uma. Imagine a bagunça se o designer inventar de ter uma imagem para tablets, para televisão, para console portátil….&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;o-dilema&#34;&gt;O dilema&lt;/h2&gt;

&lt;p&gt;Esta é a hora que eu gostaria de escrever que existe uma solução perfeita para este problema. Mas vou ser direta e objetiva com vocês: não existe (ainda). O que nós temos são várias tentativas de contornar o problema, cada uma focada em um aspecto… Algumas das ferramentas que eu vou mostrar a seguir resolvem bem o lado da direção de arte, mas deixam a desejar em semântica e performance, por exemplo. Outras tem o código mais enxuto, mas a implementação depende de uma programação específica server-side. A minha sugestão é: conheça e explore todas elas. Assim vocês saberão os pontos fortes e fracos e qual combina melhor com cada projeto.&lt;/p&gt;

&lt;p&gt;Bem, para escolher qual solução funciona melhor para o seu projeto você precisa se fazer algumas perguntas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Direção de arte é importante para o seu caso (por exemplo: imagens diferentes / cropadas para cada largura)?&lt;/li&gt;
&lt;li&gt;Você está começando do zero ou possui um código legado para dar suporte?&lt;/li&gt;
&lt;li&gt;Você se importa de utilizar JavaScript ou bibliotecas como jQuery?&lt;/li&gt;
&lt;li&gt;Testar a velocidade da conexão do usuário é algo importante?&lt;/li&gt;
&lt;li&gt;Você está utilizando conteúdo dinâmico?&lt;/li&gt;
&lt;li&gt;Você se importa de lidar com aspectos server side?&lt;/li&gt;
&lt;li&gt;Qual é a importância que você dá para semântica?&lt;/li&gt;
&lt;li&gt;Qual é a importância que você dá para validação?&lt;/li&gt;
&lt;li&gt;O seu cliente vai ter que por a mão ali?&lt;/li&gt;
&lt;li&gt;Você se importa de escrever HTML extra?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se isto fosse um daqueles antigos livros de RPG cada uma destas perguntas estaria acompanhado de um &amp;#8220;vá para a página 42&amp;#8221; ou algo do tipo. Pois sim, basicamente você vai ter que escolher entre o caminho menos mal ou sofrer com a performance. Mas, para trazer um pouco de esperança e restaurar a fé na humanidade, vamos dar uma espiadinha no futuro.&lt;/p&gt;

&lt;h2 id=&#34;o-futuro-com-o-elemento-picture&#34;&gt;O Futuro (com o Elemento Picture)&lt;/h2&gt;

&lt;p&gt;Através do picture é possível declarar diversas fontes para uma única imagem no seu HTML e controlar qual deve ser apresentada utilizando media queries. Isto é feito utilizando a tag picture em conjunto com o parâmetro source. Desta forma é possível especificar imagens diferentes de acordo com a largura e altura da janela do browser, orientação do dispositivo, densidade de pixels, layout para a impressão, etc. Obviamente devemos utilizar esta especificação apenas quando existir mais de uma imagem, optando pelo bom e velho img quando tiver apenas uma figura. O img também serve de fallback para browsers que não aceitam o picture.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture&amp;gt;
    &amp;lt;source srcset=&#34;pic1x.jpg 1x, pic2x.jpg 2x, pic4x.jpg 4x&#34;&amp;gt;
    &amp;lt;img alt=&#34;descrição da imagem&#34; src=&#34;pic1x.jpg&#34; width=&#34;500&#34; height=&#34;500&#34;&amp;gt;
&amp;lt;/picture&amp;gt;&lt;/pre&gt;

&lt;p&gt;Reparem que 3 endereços foram especificados no source srcset: pix1x, pic2x e pix4x. Os atributos seguintes (1x, 2x e 4x) são &amp;#8220;dicas&amp;#8221; para o user agent trocar a imagem de acordo com a densidade de pixels da tela. Sendo que 1x é a padrão, 2x o dobro da densidade, etc. Mas, em muitos casos, isto não é específico o suficiente. Podemos então acrescentar um valor Xw e Xh referente a altura e largura do viewport.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture&amp;gt;
    &amp;lt;source sizes=&#34;100%&#34; srcset=&#34;pic400.jpg 400w, pic800.jpg 800w, pic1600.jpg 1600w&#34;&amp;gt;
    &amp;lt;img src=&#34;pic400.jpg&#34; alt=&#34;descrição da imagem&#34;&amp;gt;
&amp;lt;/picture&amp;gt;&lt;/pre&gt;

&lt;p&gt;Ou trabalhar em conjunto com media queries.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture&amp;gt;
    &amp;lt;source media=&#34;(min-width: 45em)&#34; srcset=&#34;grande.jpg&#34;&amp;gt;
    &amp;lt;source media=&#34;(min-width: 18em)&#34; srcset=&#34;media.jpg&#34;&amp;gt;
    &amp;lt;img src=&#34;pequena.jpg&#34; alt=&#34;descrição da imagem&#34;&amp;gt;
&amp;lt;/picture&amp;gt;&lt;/pre&gt;

&lt;p&gt;Os pontos positivos são muitos. A solução já tem um &lt;a href=&#34;http://www.w3.org/TR/html-picture-element/&#34; title=&#34;W3C - HTML picture element&#34;&gt;rascunho &amp;#8220;oficial&amp;#8221; na W3C&lt;/a&gt;, é semântica, versátil e permite direção de arte. Se eu pudesse apostar em um padrão seria neste. O problema é que nenhum browser atual aceita esta solução. Nenhunzinho mesmo. Ela está prevista no roadmap do Firefox, e provavelmente, será implantada em breve nos outros browsers mais moderninhos. Por enquanto é possível testar a implementação apenas em versões de testes. Mas vale consultar o site do grupo &lt;a href=&#34;http://responsiveimages.org/&#34; title=&#34;ResponsiveImages.org&#34;&gt;ResponsiveImages.org&lt;/a&gt;  de tempos em tempos e ficar de olho no sinal verde para colocar em prática. Outro ponto contra é que esta solução exige acrescentar código extra o que pode ser inviável se você já possui um site implantado com milhares de imagens para editar manualmente. Para saber mais basta consultar a &lt;a href=&#34;http://picture.responsiveimages.org/&#34; title=&#34;ResonsiveImages&#34;&gt;documentação oficial&lt;/a&gt; ou o &lt;a href=&#34;https://github.com/ResponsiveImagesCG/picture-element&#34; title=&#34;GithHub - ResponsiveImages&#34;&gt;repositório no GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-imitação-do-picture-com-picturefill&#34;&gt;A imitação do picture (com Picturefill)&lt;/h2&gt;

&lt;p&gt;Bem, vamos conversar sobre o que podemos fazer hoje! O picturefill.js através dos poderes mágicos do JavaScript imita a funcionalidade do elemento picture. A solução é bem leve: 498bytes &amp;#8211; o que francamente já compensa o peso de qualquer imagem. O mark-up fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;span data-picture data-alt=&#34;Descrição da imagem&#34;&amp;gt;
   &amp;lt;span data-src=&#34;pequena.jpg&#34;&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;span data-src=&#34;media.jpg&#34;     data-media=&#34;(min-width: 400px)&#34;&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;span data-src=&#34;grande.jpg&#34;      data-media=&#34;(min-width: 800px)&#34;&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;span data-src=&#34;extragrande.jpg&#34; data-media=&#34;(min-width: 1000px)&#34;&amp;gt;&amp;lt;/span&amp;gt;

   &amp;lt;!-- Fallback para quando o JavaScript estiver desativado. --&amp;gt;
   &amp;lt;noscript&amp;gt;
      &amp;lt;img src=&#34;small.jpg&#34; alt=&#34;Descrição da imagem&#34;&amp;gt;
   &amp;lt;/noscript&amp;gt;
&amp;lt;/span&amp;gt;&lt;/pre&gt;

&lt;p&gt;Bem, basicamente ele utiliza spans (que sozinhos não possuem valor semântico) no lugar do picture. E, através dos atributos data-src e data-media, especifica respectivamente o endereço e largura do viewport. Note também que existe um fallback para browsers mobile antigos / ambientes sem JavaScript dentro da tag .&lt;/p&gt;

&lt;p&gt;É possível incluir no data-media qualquer media-querie, ou seja, facilmente podemos adaptar este código para densidade de pixel diferente, outros tipos de dispositivos, etc.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;span data-picture data-alt=&#34;Descrição da imagem&#34;&amp;gt;
   &amp;lt;span data-src=&#34;imagem.jpg&#34;&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;span data-src=&#34;imagem_x2.jpg&#34; data-media=&#34;(min-device-pixel-ratio: 2.0)&#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/span&amp;gt;&lt;/pre&gt;

&lt;p&gt;Como o IE8 e versões anteriores não trabalham com media queries, ele ficará com a primeira imagem com atributo data-src (ou com a última imagem se nenhuma especificar este atributo). Alternativamente você pode utilizar comentários condicionais para servir outra figura.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!--[if (lt IE 9) &amp; (!IEMobile)]&amp;gt;
    &amp;lt;span data-src=&#34;imagem.jpg&#34;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;![endif]--&amp;gt;&lt;/pre&gt;

&lt;p&gt;Você pode checar a &lt;a href=&#34;http://scottjehl.github.io/picturefill/&#34; title=&#34;Picturefill&#34;&gt;demo online&lt;/a&gt; para ver a bruxaria acontecer. Ou dar uma olhadinha no &lt;a href=&#34;https://github.com/scottjehl/picturefill&#34; title=&#34;GitHub - Picturefill&#34;&gt;GitHub do projeto&lt;/a&gt; para ler a documentação completa.&lt;/p&gt;

&lt;p&gt;A sintaxe obviamente não vai validar. Isto não é exatamente um sinal de um código bom ou rum, mas se você está em uma situação onde isto é vital (pressão e um cliente, por exemplo) é melhor optar por outro caminho. Como esta solução é baseada no funcionamento do picture os mesmos contras se aplicam: linhas de código a mais e consequente dificuldade de implantação se o seu legado for grande, com o agravante extra de depender de JavaScript. Mas se estes pontos não forem problemáticos para você, vá fundo e tenha imagens responsivas de alta performance hoje mesmo!&lt;/p&gt;

&lt;h2 id=&#34;a-detecção-de-banda-com-foresight-js&#34;&gt;A detecção de banda (com Foresight.js)&lt;/h2&gt;

&lt;p&gt;O Foresight.js funciona de maneira um pouco diferente das soluções apresentadas até aqui. Ele basicamente testa a velocidade da conexão do usuário antes de realizar a requisição da imagem no servidor. Isto é ótimo pois vai um pouco contra o mito de que se um usuário está em um dispositivo móvel automaticamente a internet é lenta. Eu utilizo tablets no wi-fi o dia todo em casa e por aqui a conexão é de 100mb, enquanto a internet na casa dos meus pais que serve os computadores desktops é provavelmente mais lenta que o meu 3G. Testar a velocidade da banda é a maneira mais efetiva de verificar quem de fato pode se dar ao luxo de baixar imagens pesadas ou não. O foresight também detecta automaticamente a densidade de pixels do dispositivo, permite as imagens serem controladas por CSS (inclusive com background images), impede requisições múltiplas e não depende de user agents.&lt;/p&gt;

&lt;p&gt;Infelizmente isto tem um preço: uma imagem de 50k é baixada para testar a velocidade da conexão, bloqueando o download de outras imagens até o teste ser completo. Portanto, utilize esta solução apenas quando o carregamento de todas as imagens realmente for fazer a diferença na performance. Ou você estará tampando o sol com uma peneira.&lt;/p&gt;

&lt;p&gt;Na prática funciona da seguinte maneira: depois de apontar para o arquivo js no seu HTML você determina uma classe para a sua imagem. Ah, e lembre-se de utilizar o noscript como fallback.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img data-src=&#34;imagem.w320.jpg&#34; data-width=&#34;320&#34; data-height=&#34;212&#34; class=&#34;fs-img&#34;&amp;gt;
&amp;lt;noscript&amp;gt;
   &amp;lt;img src=imagem-fallback.jpg&#34;&amp;gt;
&amp;lt;/noscript&amp;gt;&lt;/pre&gt;

&lt;p&gt;Depois é só especificar a classe no CSS, substituindo w320 por quaisquer resoluções que você desejar.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;font-family: &#39;image-set( url(w320|w{requestWidth}) 2x high-bandwidth )&#39;;
display:none;&lt;/pre&gt;

&lt;p&gt;Repare que isto é feito através do atributo font-family o que é basicamente dar uma voadora na cara da semântica. Eu sei. Isto me faz ranger os dentes. Mas talvez seja uma boa maneira de pressionar os browsers e orgãos responsáveis a aprovarem mais depressa um padrão oficial para imagens responsivas, como o elemento picture. A reação pode ser algo do tipo &amp;#8220;Oh meu deus! Eles estão utilizando font-family para isto. Devem mesmo estar desesperados!&amp;#8221;. Sem contar que tudo é resolvido apenas por CSS, não requerendo nenhum HTML extra o que é ótimo para conteúdos dinâmicos. E, por incrível, que pareça esta gambiarra valida. Mais uma prova que validação é diferente de semântica. Cabe a você decidir o que é mais importante: semântica ou performance? Apenas me prometa que, se você decidir por utilizar algo assim, vai voltar e deixar tudo bonitinho assim que um padrão bacana for aprovado.&lt;/p&gt;

&lt;p&gt;Saiba mais na &lt;a href=&#34;http://www.cdnconnect.com/docs/foresightjs&#34; title=&#34;Foresight.js&#34;&gt;Documentação Oficial&lt;/a&gt;, no &lt;a href=&#34;https://github.com/adamdbradley/foresight.js&#34; title=&#34;GitHub - Foresight&#34;&gt;GitHub do Foresight&lt;/a&gt; ou de uma olhada nas &lt;a href=&#34;http://www.cdnconnect.com/docs/foresightjs/demos&#34; title=&#34;Foresight - Demos&#34;&gt;demos do projeto&lt;/a&gt;. Lembre-se de utilizar diversos dispositivos ou você não verá nada de diferente acontecendo.&lt;/p&gt;

&lt;h2 id=&#34;a-saga-mobile-first-com-hisrc&#34;&gt;A saga mobile first (com HISRC)&lt;/h2&gt;

&lt;p&gt;Esta solução é um pouco parecida com o Foresight, com a diferença que ao invés de detectar a velocidade através de um placeholder, o HiSRC baixa sempre a imagem mobile primeiro. Se o usuário estiver em uma conexão lenta a imagem mobile fica lá bonitona. Já se a conexão for rápida a versão @1x é baixada. Se a internet for rápida E o dispositivo tiver alta densidade de pixels a versão @2x da imagem é entregue. Isto significa na prática que sim, mais de uma imagem pode ser baixada em uma banda larga. Mas se é para &amp;#8220;punir&amp;#8221; alguém, que seja quem tem menos a perder, certo?&lt;/p&gt;

&lt;p&gt;Para implantar primeiro é necessário chamar o arquivo jQuery e depois configura-lo para as classes de imagens que serão responsivas.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(document).ready(function(){
  $(&#34;.hisrc img&#34;).hisrc();
  $(&#34;.hisrc img+img&#34;).hisrc({
  useTransparentGif: true,
  speedTestUri: &#39;50K.jpg&#39;
});
})&lt;/pre&gt;

&lt;p&gt;Depois utilize as suas imagens em uma div com a mesma classe. A primeira imagem é a mobile (first, lembra?), a com o atributo data-1x é para conexões rápidas de definição normal e com data-2x é para imagens com o dobro da densidade de pixels (para telas como retina display da Apple, por exemplo).&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;hisrc&#34;&amp;gt;
  &amp;lt;img src=&#34;imagem.jpg&#34; data-1x=&#34;imagem@1x.jpg&#34; data-2x=&#34;imagem@2x.jpg&#34;&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Simples e prático de implementar de maneira dinâmica. Como pontos contra além do download duplo, temos a dependência do jQuery e impossibilidade de direção de arte pois não existe controle nenhum do tamanho do viewport ou de media queries (afinal tudo é determinado a partir da velocidade da internet).&lt;/p&gt;

&lt;p&gt;Se você se interessou confira a documentação completa no &lt;a href=&#34;https://github.com/teleject/hisrc&#34; title=&#34;GitHub - HiSRC&#34;&gt;GitHub do projeto&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-solução-server-side-com-adaptive-images&#34;&gt;A Solução server side (com Adaptive Images)&lt;/h2&gt;

&lt;p&gt;Se você tem um zillhão de linhas de código para readaptar pode não ser nada prático revisar imagem por imagem para adicionar atributos extras. Ou talvez você tenha um cliente que vai administrar sozinho um website sem possuir um designer na equipe para cropar e otimizar todas as versões possíveis de imagens responsivas. Em ambos os casos uma solução server side pode ser mais interessante.&lt;/p&gt;

&lt;p&gt;Para estes casos eu indicaria o Adaptive Images. Ele basicamente intercepta os pedidos por imagens no servidor e redimensiona automaticamente as imagens para os breakpoints que você especificou. Além do zero de trabalho extra uma vez que o setup for feito, a solução é bem semântica e não requer marcação extra.&lt;/p&gt;

&lt;p&gt;O contra? Você vai precisar de PHP 5x (com Apache2 / nginx e GD lib), já que o processo é realizado a partir do arquivo .htacess. Este arquivo basicamente diz para o servidor dar uma olhadinha no adaptive-images.php antes de pegar qualquer imagem jpg, gif ou png. Ou seja, se você estiver utilizando alguma outra linguagem como Ruby on Rails ou ASP é melhor buscar outro caminho. Também não é possível fazer direção de arte pois o arquivo é simplesmente redimensionado. Se estes pontos não forem um problema esta é uma solução prática, rápida e efetiva. Outra questão que pode ser vista como um &amp;#8220;defeito&amp;#8221; é, como o adaptative images verifica o viewport através de cookies + cache, as imagens não vão ser servidas se um usuário ficar brincando de aumentar e diminuir a janelinha do browser. Mas acredito que isto pode ser contornado pelo bom e velho max-width 100% como um fallback.&lt;/p&gt;

&lt;p&gt;Para documentação e dicas de implementação dê uma olhada no &lt;a href=&#34;http://adaptive-images.com/&#34; title=&#34;Adaptive Images&#34;&gt;site do projeto&lt;/a&gt; e no &lt;a href=&#34;https://github.com/MattWilcox/Adaptive-Images&#34; title=&#34;Adaptive Images - GitHub&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-caminho-do-wordpress-com-múltiplos-plugins&#34;&gt;O caminho do WordPress (com múltiplos plugins)&lt;/h2&gt;

&lt;p&gt;Se você utiliza o CMS WordPress em seus projetos pode estar com sorte. Como a ferramenta já lida com uma biblioteca de mídia e versões de tamanhos diferentes para imagens existem diversos plugins que facilitam o trabalho de desenvolvimento para a plataforma.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org/plugins/mobble/&#34; title=&#34;Mobble&#34;&gt;Mobble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Funções condicionais para detectar smartphones e tablets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org/plugins/picturefillwp/&#34; title=&#34;Picturefill WP&#34;&gt;Picturefill WP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Baseado no picturefill.js&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org/plugins/simple-responsive-images/&#34; title=&#34;Simple responsive images&#34;&gt;Simple responsive images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redimensiona as imagens para os breakpoints que você escolher.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org/plugins/pb-responsive-images/&#34; title=&#34;PB Responsive Images&#34;&gt;PB Responsive Images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Baseado na tag picture&lt;/p&gt;

&lt;h2 id=&#34;a-lista-de-alternativas&#34;&gt;A lista de alternativas&lt;/h2&gt;

&lt;p&gt;Encontrar uma solução definitiva para a performance de imagens tem sido uma verdadeira caça ao tesouro do design responsivo. Fora as ferramentas que eu já apresentei existem diversas outras iniciativas bacanas bacanas que valem a visita.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sencha.com/products/space/&#34; title=&#34;Sencha.io&#34;&gt;Sencha.IO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solução third-party que funciona como um proxy para imagens responsivas. Possui planos pagos e gratuitos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zurb.com/playground/foundation-interchange&#34; title=&#34;Interchange&#34;&gt;Interchange&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desenvolvido pela Zurb e integrado ao frameworkd Foundation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.resrc.it/&#34; title=&#34;ReSRC&#34;&gt;ReSRC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solução de proxy com algumas outras funções interessantes extras como filtros, crop, integração com sliders e plugins. É cobrada uma mensalidade nos planos avançados.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tubalmartin/riloadr&#34; title=&#34;Riloadr&#34;&gt;Riloadr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Framework de imagens responsivas baseado apenas em HTML, CSS e JavaScript.&lt;/p&gt;

&lt;p&gt;Se você ainda está um pouco perdido &lt;a href=&#34;https://docs.google.com/spreadsheet/ccc?key=0Al0lI17fOl9DdDgxTFVoRzFpV3VCdHk2NTBmdVI2OXc#gid=0&#34;&gt;esta tabela&lt;/a&gt; criada pelos desenvolvedores Chris Coyier e Christopher Schmitt compara algumas das soluções mencionadas neste artigo em critérios como dependência de JavaScript, validação, download de imagens adicionais, direção de arte, etc.&lt;/p&gt;

&lt;p&gt;Conhece alguma outra ferramenta legal? Deixe a referência nos comentários que eu atualizarei esta lista sempre que possível.&lt;/p&gt;

&lt;h3 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://mobile.smashingmagazine.com/2013/07/08/choosing-a-responsive-image-solution/&#34; title=&#34;Choosing a responsive image solution&#34;&gt;Choosing a responsive image solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://css-tricks.com/which-responsive-images-solution-should-you-use/&#34; title=&#34;Which responsive images solution should you use&#34;&gt;Which responsive images solution should you use&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://csswizardry.com/2011/07/responsive-images-right-now/&#34; title=&#34;Responsive images right now&#34;&gt;Responsive images right now&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como testar design responsivo</title>
      <link>https://tableless.github.io/hugo-public/como-testar-design-responsivo/</link>
      <pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/como-testar-design-responsivo/</guid>
      <description>

&lt;p&gt;Você já sabe como criar layouts e desenvolver um site responsivo. Na verdade seu projeto já está quase pronto. A última etapa é testar o funcionamento! Existem diversas maneira de garantir a efetividade do layout. A primeira delas, e mais óbvia, é testando ao vivo em diversos dispositivos. Em um mundo ideal você deveria testar o seu layout na maior quantidade de aparelhos, browsers e sistemas operacionais possíveis! Alias, você pode até ser fanático por isto e incomodar todo amigo que ver com um celular diferente com um &amp;#8220;posso testar uma coisa rapidinho?&amp;#8221;. Diga que leu isto em um artigo. É pelo bem do design! Ok, talvez nem tanto. Se quiser manter seus amigos E garantir que o seu layout está bacana em diferentes dispositivos você pode utilizar algumas das soluções abaixo.&lt;/p&gt;

&lt;h2 id=&#34;bibliotecas-de-dispositivos&#34;&gt;Bibliotecas de Dispositivos&lt;/h2&gt;

&lt;p&gt;Se você trabalhar em uma empresa grande (ou tiver grana sobrando) talvez seja bacana investir em um laboratório de testes com uma biblioteca de dispositivos. Este é um conceito comum no exterior e alguns locais são até gratuitos para a utilização da comunidade. Se você for sortudo e estiver em algum destas cidades de uma olhada nestas bibliotecas aqui:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.devicelab.com.br/&#34; title=&#34;Device Lab&#34;&gt;Device Lab&lt;/a&gt; &amp;#8211; Rio de Janeiro, Brasil&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://clearleft.com/testlab/&#34; title=&#34;Clearleft&#34;&gt;Clearleft&lt;/a&gt; &amp;#8211; Brighton, Inglaterra&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://devicelab.fi/&#34; title=&#34;Device Lab&#34;&gt;Helsinki Open Device Lab&lt;/a&gt; &amp;#8211; Helsinque, Finlândia&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mobileportland.com/device-lab&#34; title=&#34;Mobile Portland&#34;&gt;Mobile Portland&lt;/a&gt;  &amp;#8211; Portland, EUA&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bv02.com/device-lab&#34; title=&#34;http://www.bv02.com/device-lab&#34;&gt;Ottawa Open Device Lab&lt;/a&gt; &amp;#8211; Ottawa, Canadá&lt;/p&gt;

&lt;p&gt;Através do site &lt;a href=&#34;http://opendevicelab.com/&#34; title=&#34;Open Device Lab&#34;&gt;Open Device Lab&lt;/a&gt; é possível procurar o laboratório mais perto de você. Infelizmente no Brasil só encontrei no Rio de Janeiro. Tomara que a idéia se espalhe! Só para ficar com um gostinho a imagem abaixo é do Helsinki Open Device Lab.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://devicelab.fi/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-39216&#34; alt=&#34;helsinki-open-device-lab&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/helsinki-open-device-lab.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/10/helsinki-open-device-lab.jpg 660w, uploads/2013/10/helsinki-open-device-lab-277x168.jpg 277w, uploads/2013/10/helsinki-open-device-lab-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Artigos interessantes sobre como montar seu próprio laboratório:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lab-up.org/&#34; title=&#34;LabUp&#34;&gt;LabUp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mobile.smashingmagazine.com/2012/09/24/establishing-an-open-device-lab/&#34; title=&#34;Establishing An Open Device Lab&#34;&gt;Establishing An Open Device Lab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bradfrostweb.com/blog/mobile/test-on-real-mobile-devices-without-breaking-the-bank/&#34; title=&#34;Test on Real Mobile Devices without Breaking the Bank&#34;&gt;Test on Real Mobile Devices without Breaking the Bank&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dmolsen.com/2012/06/26/how-to-build-a-device-lab-part-1/&#34; title=&#34;How to Build a Device Lab&#34;&gt;How to Build a Device Lab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se você tem o espaço disponível e quiser se aventurar na construção da sua própria biblioteca lembre-se de pensar também na estrutura do local como cabeamento, hub USB, prateleiras, roteador wi-fi e segurança. Existem até empresas como a &lt;a href=&#34;http://devicelab.vanamco.com/&#34; title=&#34;Device Lab&#34;&gt;Vanamco&lt;/a&gt; que oferecem suportes especialmente projetados para o dia-a-dia de desenvolvimento.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://devicelab.vanamco.com/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-39215&#34; alt=&#34;device-lab-stand&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/device-lab-stand.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/10/device-lab-stand.jpg 660w, uploads/2013/10/device-lab-stand-277x168.jpg 277w, uploads/2013/10/device-lab-stand-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ou você pode entrar em uma onda faça você mesmo e improvisar a estrutura. Se precisar de inspiração a &lt;a href=&#34;http://www.chadmanley.ca/ADOBE-DEVICE-WALL&#34; title=&#34;Adobe Device Wall&#34;&gt;Adobe Device Wall&lt;/a&gt; possui um passo-a-passo recheado de fotos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.chadmanley.ca/ADOBE-DEVICE-WALL&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-39213&#34; alt=&#34;adobe-device-wall&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/adobe-device-wall.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/10/adobe-device-wall.jpg 660w, uploads/2013/10/adobe-device-wall-277x168.jpg 277w, uploads/2013/10/adobe-device-wall-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mesmo que você não tenha grana para montar uma estrutura como esta na sua empresa, se estiver em uma equipe grande é provável que tenha uma certa variedade de dispositivos entre todos os profissionais presentes&amp;#8230; Aquele celular velhão ou console portátil que você ia jogar fora pode ser útil para testes, mesmo com a tela rachada ao meio! E assim aos poucos você pode construir uma mini biblioteca. Mesmo que você não possua aparelhos antigos para dispor (ou não queira se separar deles!) pode ser legal instituir um dia da semana na empresa onde todos levem seus aparelhos e emprestam para os colegas testarem por alguns minutinhos. Saber trabalhar em grupo as vezes inclui emprestar brinquedos… Como última opção existem empresas que prestam serviço de locação de aparelhos. Por cerca de R$15 por dia é possível alugar um iPad ou Galaxy Tab em São Paulo, por exemplo. Considerando quanto você pode potencialmente lucrar com design responsivo 15 reais é um investimento bem baixo&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;simuladores&#34;&gt;Simuladores&lt;/h2&gt;

&lt;p&gt;Se uma biblioteca de dispositivos ainda for um sonho distante você pode recorrer a um emulador online. Não vou mentir para você. Nenhum é 100% confiável. Mas é definitivamente melhor do que confiar na sorte, certo?&lt;/p&gt;

&lt;h3 id=&#34;screenfly&#34;&gt;Screenfly&lt;/h3&gt;

&lt;p&gt;O &lt;a href=&#34;http://quirktools.com/screenfly/&#34; title=&#34;Screenfly&#34;&gt;Screenfly&lt;/a&gt; possui uma grande gama de aparelhos (incluindo até televisores). É possível compartilhar as capturas de tela, modificar a orientação e determinar manualmente um breakpoint. A régua de pixels também quebra um galho. Para utilizar o sistema basta digitar a URL que o Screenfly cuida do resto.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://quirktools.com/screenfly/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-39220&#34; alt=&#34;screenfly&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/screenfly.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/10/screenfly.jpg 660w, uploads/2013/10/screenfly-277x168.jpg 277w, uploads/2013/10/screenfly-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;responsinator&#34;&gt;Responsinator&lt;/h3&gt;

&lt;p&gt;O &lt;a href=&#34;http://www.responsinator.com/&#34; title=&#34;Responsinator&#34;&gt;Responsinator&lt;/a&gt; funciona de maneira semelhante ao Screenfly. Basta digitar o endereço do site que a ferramenta simula o layout em alguns aparelhos como iPhone, iPad, Android e Kindle . Tem também um &lt;a href=&#34;http://www.responsinator.com/about/&#34; title=&#34;Responsinator - About&#34;&gt;bookmarklet&lt;/a&gt; útil para facilitar ainda mais o processo. É possível testar sites fixos utilizando o sufixo &lt;strong&gt;&amp;amp;fixed_width=x&lt;/strong&gt; depois da URL. O serviço ainda conta com uma função premium. Por $6 mensais é possível ter um simulador customizado.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.responsinator.com/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-39228&#34; alt=&#34;responsinator-home&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/responsinator-home.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/10/responsinator-home.jpg 660w, uploads/2013/10/responsinator-home-277x168.jpg 277w, uploads/2013/10/responsinator-home-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mobile-emulators-simulators-the-ultimate-guide&#34;&gt;Mobile Emulators &amp;amp; Simulators: The Ultimate Guide&lt;/h3&gt;

&lt;p&gt;Este &lt;a href=&#34;http://www.mobilexweb.com/emulators&#34; title=&#34;Emulators&#34;&gt;site&lt;/a&gt; apresenta uma curadoria de emuladores para Windows, Mac e Linux que você pode instalar no seu computador e testar aparelhos diferentes. Não é tão prático como simplesmente digitar uma URL, mas o resultado é mais fiel e é a única maneira de testar funcionalidades como acelerômetro e giroscópio.&lt;/p&gt;

&lt;h2 id=&#34;outras-ferramentas&#34;&gt;Outras ferramentas&lt;/h2&gt;

&lt;p&gt;Não é só de emuladores que vive um desenvolvedor focado em design responsivo. É necessário ter mais alguns truques na manga. Estas ferramentas vão facilitar a sua vida e ajudar a cumprir a deadline sem crise.&lt;/p&gt;

&lt;h3 id=&#34;adobe-edge-inspect&#34;&gt;Adobe Edge Inspect&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://html.adobe.com/edge/inspect/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-39214&#34; alt=&#34;adobe-edge-inspect&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/adobe-edge-inspect.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/10/adobe-edge-inspect.jpg 660w, uploads/2013/10/adobe-edge-inspect-277x168.jpg 277w, uploads/2013/10/adobe-edge-inspect-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O processo de desenvolvimento responsivo pode ser longo e tedioso. A cada mudança é necessário escrever o código em um computador, salvar, realizar upload em um servidor, pegar o dispositivo que você deseja testar, digitar a URL e verificar se deu certo. E recomeçar esta cadeia a cada vez! O &lt;a href=&#34;http://html.adobe.com/edge/inspect/&#34; title=&#34;Adobe Edge Inspect&#34;&gt;Adobe Edge Inspect &lt;/a&gt;torna este processo muito mais rápido. O software basicamente sincroniza aparelhos com o sistema Android e / ou iOS com o Google Chrome de um desktop através de uma rede sem fio. Isto significa que você pode desenvolver e fazer uso de funções do developers tools, por exemplo, e ver as mudanças em tempo real. Tudo isto inclusive através do localhost. Vale a pena conferir a ferramenta, principalmente por que já vem inclusa na suite Creative Cloud.&lt;/p&gt;

&lt;h3 id=&#34;viewport-resizer&#34;&gt;Viewport Resizer&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://lab.maltewassermann.com/viewport-resizer/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-39221&#34; alt=&#34;viewport-resizer&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/viewport-resizer.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/10/viewport-resizer.jpg 660w, uploads/2013/10/viewport-resizer-277x168.jpg 277w, uploads/2013/10/viewport-resizer-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este &lt;a href=&#34;http://lab.maltewassermann.com/viewport-resizer/&#34; title=&#34;Viewport Resizer&#34;&gt;bookmarklet&lt;/a&gt; adiciona uma barra de opções onde é possível rapidamente trocar a largura da tela de acordo com os aparelhos mais populares, modificar a orientação, verificar o tamanho atual da janela ou escolher manualmente uma medida em pixels.&lt;/p&gt;

&lt;p&gt;Para quem nunca utilizou algo do tipo: bookmarklets são pequenos programinhas em javascript que são armazenados no formato de link favorito do seu navegador e servem para realizar rapidamente uma determinada ação. Para utilizar basta adicionar um bookmarklet a sua barra de favoritos, navegar até o site que você deseja realizar a ação e clicar no bookmarklet.&lt;/p&gt;

&lt;h3 id=&#34;screensiz-es&#34;&gt;Screensiz.es&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://screensiz.es/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-39223&#34; alt=&#34;screensizes&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/screensizes.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/10/screensizes.jpg 660w, uploads/2013/10/screensizes-277x168.jpg 277w, uploads/2013/10/screensizes-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://screensiz.es/&#34; title=&#34;Screensiz.es&#34;&gt;Screensiz.es&lt;/a&gt; é basicamente uma tabela gigante de tamanhos de dispositivos divididos entre smartphones, tablets e monitores. É possível verificar resolução, densidade de pixels e proporção de cada aparelho. Útil para projetar Media Queries mais específicos.&lt;/p&gt;

&lt;h3 id=&#34;pagespeed-insights&#34;&gt;PageSpeed Insights&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-39218&#34; alt=&#34;page-speed-insights&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/page-speed-insights.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/10/page-speed-insights.jpg 660w, uploads/2013/10/page-speed-insights-277x168.jpg 277w, uploads/2013/10/page-speed-insights-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O aspecto visual é apenas a ponta do iceberg. A velocidade de carregamento também tem um grande impacto na aceitação de um site e, com algumas dicas rápidas, é possível melhorar bastante o carregamento de um site responsivo. O &lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights/&#34; title=&#34;Insights&#34;&gt;PageSpeed Insights&lt;/a&gt; da Google dá uma nota de 0 a 100 e oferece algumas sugestões para otimizar o loading.&lt;/p&gt;

&lt;h3 id=&#34;i-am-mobile&#34;&gt;I am mobile&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.iammobile.co.uk/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-39217&#34; alt=&#34;i-a-mobile&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/i-a-mobile.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/10/i-a-mobile.jpg 660w, uploads/2013/10/i-a-mobile-277x168.jpg 277w, uploads/2013/10/i-a-mobile-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Descubra o quanto o seu site é amigável com dispositivos móveis em um ranking the 0 a 8. Esta &lt;a href=&#34;http://www.iammobile.co.uk/&#34; title=&#34;I am mobile&#34;&gt;ferramenta online&lt;/a&gt; dá uma nota para o layout de acordo com alguns padrões como presença da metatag viewport, utilização de touch-icons e outras tags amigáveis. Não leve o resultado a ferro e fogo. Algumas das opções são meio genéricas e subjetivas, mas vale a pena mesmo assim conferir as sugestões. Otimizar nunca é demais.&lt;/p&gt;

&lt;h3 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h3&gt;

&lt;p&gt;Seguindo estas dicas é possível garantir um ótimo resultado em múltiplas plataformas. E vocês? Que ferramenta costumam utilizar para testar design responsivo? Deixem sugestões nos comentários e até a próxima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>URLs Amigáveis, Design Responsivo e o SEO</title>
      <link>https://tableless.github.io/hugo-public/urls-amigaveis-design-responsivo-e-o-seo/</link>
      <pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/urls-amigaveis-design-responsivo-e-o-seo/</guid>
      <description>

&lt;p&gt;Recentemente, o &lt;a title=&#34;Google e as mudanças para Mobile&#34; href=&#34;http://googlewebmastercentral.blogspot.com/2013/06/changes-in-rankings-of-smartphone_11.html&#34; target=&#34;_blank&#34;&gt;Google anunciou&lt;/a&gt; mudanças em seu algoritmo para o rankeamento de dispositivos móveis. O intuito é penalizar aqueles sites que ainda não aderiram ao design responsivo e beneficiar os que já estão com a tecnologia implementada. Confira aqui alguns pontos considerados chave pelo Google para aprimorar os resultados mobile.&lt;/p&gt;

&lt;h2 id=&#34;url-amigável-e-design-responsivo&#34;&gt;URL Amigável e Design Responsivo&lt;/h2&gt;

&lt;p&gt;Essa é uma relação bem interessante. Antigamente os sites mobile ficavam armazenados em um diretório à parte, geralmente um subdomínio (m.seusite.com.br). Hoje o design responsivo nos dá muito mais liberdade para desenvolver e possibilitar ao usuário uma experiência melhor.&lt;/p&gt;

&lt;p&gt;Você deve estar se perguntando: Ok, mas e o Google? O que acontece é que quando fazemos nosso site com design responsivo, a URL de acesso de uma página para desktop é a mesma para o mobile. Se você relacionar isso com a URL amigável (O que é essencial) você ganhará uma estrelinha do Tio Google.&lt;/p&gt;

&lt;p&gt;Isso porque o Google já disse que &lt;a title=&#34;Google prefere URL Amigável e design responsivo para mobile&#34; href=&#34;http://googlewebmastercentral.blogspot.ca/2012/06/recommendations-for-building-smartphone.html&#34; target=&#34;_blank&#34;&gt;prefere soluções móveis que mantêm a mesma URL em todas as plataformas&lt;/a&gt;. E em junho deste ano ele se posicionou de forma oficial, dizendo que sites que trabalham dessa forma serão favorecidos nas buscas móveis.&lt;/p&gt;

&lt;h2 id=&#34;porque-o-google-valoriza-essa-prática&#34;&gt;Porque o Google valoriza essa prática?&lt;/h2&gt;

&lt;h3 id=&#34;motivo-1-compartilhamento&#34;&gt;Motivo 1: Compartilhamento&lt;/h3&gt;

&lt;p&gt;Quando sua URL é única, o compartilhamento fica mais viável pois os plug-ins das Redes Sociais passam a informação com mais eficiência e, de quebra, você ganha autoridade para desktop, smartphones, tablets e afins.&lt;/p&gt;

&lt;h3 id=&#34;motivo-2-redirects-são-mais-lentos&#34;&gt;Motivo 2: Redirects são mais lentos&lt;/h3&gt;

&lt;p&gt;Um quesito que o Google tem dado muita importância é a velocidade do site. Quanto tempo seu site demora para passar a informação ao seus visitantes? Isso é ruim para o seu negócio, pois o usuário decide muito rápido se fica ou não em uma página, e para a sua busca, uma vez que o &lt;a title=&#34;SEO com foco no Usuário&#34; href=&#34;http://tableless.com.br/o-seo-moderno-e-o-foco-no-usuario/&#34; target=&#34;_blank&#34;&gt;Google foca sua experiência no usuário&lt;/a&gt; e ele vai te penalizar se o seu site não for rápido.&lt;/p&gt;

&lt;p&gt;O que acontece nesse caso é que os Redirects reduzem o desempenho, tanto no redirecionamento quanto na análise do conteúdo por meio dos motores. Uma vez que a URL é única, ele vai verificar uma vez só.&lt;/p&gt;

&lt;p&gt;Outro ponto é o nosso glorioso (!) 3G. Pense se o site é um e-commerce. O usuário vai gastar mais tempo, dinheiro e bateria para navegar no seu site. Além disso, há a questão do servidor, que pode não ser lá grandes coisas. O fato é que um simples delay, na visão do Google, pode custar algumas posições ao seu site.&lt;/p&gt;

&lt;h3 id=&#34;evite-os-erros-comuns&#34;&gt;Evite os erros comuns&lt;/h3&gt;

&lt;p&gt;O Google listou alguns &lt;a title=&#34;Erros comuns no Mobile, segundo o Google&#34; href=&#34;https://developers.google.com/webmasters/smartphone-sites/common-mistakes&#34; target=&#34;_blank&#34;&gt;erros comuns&lt;/a&gt; que podem e devem ser evitados. Abaixo, a lista:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vídeo que não se reproduzem&lt;/li&gt;
&lt;li&gt;Problemas de redirecionamento&lt;/li&gt;
&lt;li&gt;Mensagens 404 somente para Smartphone&lt;/li&gt;
&lt;li&gt;Intersticiais de download de aplicativos&lt;/li&gt;
&lt;li&gt;Links cruzados Irrelevantes&lt;/li&gt;
&lt;li&gt;Page Speed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não deixe de passar na &lt;a title=&#34;Erros em sites mobile, segundo o Google&#34; href=&#34;https://developers.google.com/webmasters/smartphone-sites/common-mistakes&#34; target=&#34;_blank&#34;&gt;página do Google &lt;/a&gt;para trabalhar em cima desses erros (caso seu site apresente algum!).&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;É importante se preocupar com as buscas de mobile, uma vez que esses usuários crescem muito, a cada dia e o fato de o Google ter se posicionado é um bom motivo para nos atentarmos e rever as práticas de otimização para as buscas mobile. Ficando atento à esses pontos você estará seguindo por um bom caminho, mas não se esqueça, seja criativo. Quando trabalhamos com SEO, isso é um diferencial!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Design para Google Glass</title>
      <link>https://tableless.github.io/hugo-public/design-para-google-glass/</link>
      <pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/design-para-google-glass/</guid>
      <description>

&lt;p&gt;A não ser que você tenha passado o último ano da sua vida em coma, é provável que você já tenha ouvido falar no &lt;a href=&#34;http://www.google.com/glass/start/&#34; title=&#34;Google Glass&#34;&gt;Google Glass&lt;/a&gt;. Mas o que ele realmente faz? Quais são as limitações técnicas? Como criar layouts tanto para a web quanto para aplicativos nativos que possuam um design adequado para esta nova mídia? E como testar isto tudo sem possuir um aparelho? Ok, Tableless! Vamos responder estas perguntas&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-google-glass&#34;&gt;O que é Google Glass?&lt;/h2&gt;

&lt;p&gt;A resposta curta é: um par de óculos. A resposta longa: um pequeno computador inserido em uma armação leve com uma pequena tela posicionada no canto superior direito acima da linha de visão capaz de navegar na internet, ler e-mails, realizar buscas por voz, enviar mensagens SMS, tirar fotos, gravar vídeos, traduzir conteúdo, exibir mapas em tempo real, calendários, realizar ligações, iniciar um hangout do Google, enfim, praticamente tudo o que o seu smartphone faz. Só que sem as mãos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.google.com/glass/start/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-38672&#34; alt=&#34;google-glass&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/google-glass.jpg&#34; width=&#34;660&#34; height=&#34;258&#34; srcset=&#34;uploads/2013/08/google-glass.jpg 660w, uploads/2013/08/google-glass-329x128.jpg 329w, uploads/2013/08/google-glass-588x229.jpg 588w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desde seu anúncio o Google Glass divide opiniões. Alguns acreditam que o aparelho é a maior invenção do mundo desde a pizza de pepperoni, outros acham que é um dispositivo criado por uma corporação gananciosa para monitorar todas as ações e controlar a mente das pessoas ou até mesmo que o design do aparelho é uma catástrofe da moda tirado de um filme de ficção cientifica B. Seja qual for a sua opinião é improvável que você fique indiferente ao Google Glass. E independente dela, o fato é que o dispositivo vai revolucionar a maneira como lidamos com a informação.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.google.com/glass/start/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-38670&#34; alt=&#34;google-glass-model&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/google-glass-model.jpg&#34; width=&#34;660&#34; height=&#34;372&#34; srcset=&#34;uploads/2013/08/google-glass-model.jpg 660w, uploads/2013/08/google-glass-model-298x168.jpg 298w, uploads/2013/08/google-glass-model-550x310.jpg 550w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O Google Glass atualmente está em fase de teste. Existem 10.000 usuários (ou Glass Explorers) atualmente no mundo sendo que destes 2.000 são desenvolvedores encarregados de criar conteúdo fresquinho para o aparelho. A previsão de lançamento oficial é no final deste ano e, com base no hype, não deve demorar muito para escutarmos a frase &amp;#8220;Eu quero que meu site funcione no Glass&amp;#8221;. Para isto é necessário conhecer bem o aparelho, seus pontos fortes e fracos e como criar layouts que não atrapalhem o dia-a-dia dos usuários. E mais importante de tudo, como é ver o mundo através das lentes do Google Glass.&lt;/p&gt;

&lt;p&gt;Bem, é mais fácil mostrar do que falar. Saca só o vídeo promocional do aparelho.&lt;/p&gt;

&lt;p&gt;[youtube=&lt;a href=&#34;http://www.youtube.com/watch?v=v1uyQZNg2vE&amp;amp;w=600&#34;&gt;http://www.youtube.com/watch?v=v1uyQZNg2vE&amp;amp;w=600&lt;/a&gt;]&lt;/p&gt;

&lt;h3 id=&#34;o-hardware&#34;&gt;O Hardware&lt;/h3&gt;

&lt;p&gt;Uma armação de óculos com uma tela HD de resolução de 640×360 (equivalente a um monitor de de 25 polegadas a uma distancia de 2.5 metros). A tela é posicionada no canto superior direito de maneira que não atrapalhe o campo de visão normal. Os outros features do dispositivo incluem câmera de 5MP, transdutor de condução óssea para áudio (isto significa que você não precisa de fones de ouvido), acelerômetro, painel lateral sensível ao toque, bluetooth, WiFi e 16GB de memória flash. Tudo isto pesando cerca de 40 gramas. Se você está curioso, você pode ler as &lt;a href=&#34;https://support.google.com/glass/answer/3064128?hl=en&#34; title=&#34;Support Google - Glass&#34;&gt;especificações técnicas completas aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;o-que-o-google-glass-não-é&#34;&gt;O que o Google Glass NÃO é&lt;/h3&gt;

&lt;p&gt;Um conceito importante para se ter em mente antes de tudo é: o Google Glass não é realidade aumentada. Na verdade o único aplicativo que combina elementos do mundo real e virtual por enquanto é o GPS. E mesmo isto é feito de maneira contida: as informações mostradas não ocupam a superfície completa do óculos. Isto cegaria o usuário e seria perigoso no dia-a-dia. O viewport do Glass é uma pequena telinha acima do ângulo de visão normal de um óculos. A intenção dos desenvolvedores era ser o menos intrusivo possível, por isto tela fica inativa por padrão. Não é possível, por exemplo, fazer reconhecimento facial (mesmo por que isto levantaria diversas questões relacionadas a privacidade).&lt;/p&gt;

&lt;h2 id=&#34;razões-para-começar-a-estudar-hoje&#34;&gt;Razões para começar a estudar HOJE&lt;/h2&gt;

&lt;p&gt;Vou ser sincera com vocês. Na realidade é impossível prever se o Glass será um sucesso. Não dá para saber como as pessoas navegarão na internet daqui a 2, 3 ou 5 anos. Há pouco tempo anos atrás a linguagem mais popular era o Flash e quem apostou no HTML5 e padrões de desenvolvimento mais semânticos se deu bem. Saber analisar o mercado e distinguir entre quais tecnologias merecem atenção ou não é vital para qualquer profissional que deseja se manter atualizado. Talvez seja ainda um pouco cedo para decidir, mas eu colocaria algumas fichas no Glass.&lt;/p&gt;

&lt;p&gt;Talvez você esteja pensando &amp;#8220;WTF Dani! Este aparelho nem lançou. Por que eu deveria me preocupar com isto?&amp;#8221;. Bem, vamos supor que você demore alguns meses para dominar estas técnicas&amp;#8230; entre elementos de design, linguagens de desenvolvimento / programação, API, enfim, que esta seja a sua curva de aprendizado para se tornar um expert no Google Glass. Quando o aparelho for lançado significa que você vai demorar um bom tempo entre comprar, testar, aprender e de fato produzir conteúdo voltado para o Glass. Exceto que se você começar a estudar hoje vai poder ser um dos pioneiros em uma terra inexplorada e potencialmente ganhar visibilidade e poder cobrar mais caro já que encontrar profissionais qualificados será uma tarefa bem difícil. Fora a satisfação pessoal de estar produzindo algo inovador e desafiador, ganhar muitos pageviews dos early adopters desesperados por conteúdon adaptado e ter um projeto bacana no seu portfólio. Algo semelhante a como foi o Boom do desenvolvimento mobile nos primeiros anos.&lt;/p&gt;

&lt;p&gt;Alias, a razão para o sucesso do Glass talvez esteja em uma &amp;#8220;falha&amp;#8221; nos smartphones: eles interrompem o relacionamento entre as pessoas. Ficar checando o celular de 5 em 5 minutos em uma situação social é um tanto intrusivo (para não dizer que faz você parecer um mala). O fato é que smartphones bloqueiam nossa visão do mundo real. Sem contar as situações que é simplesmente impossível operar o aparelho pois as mão estão ocupadas como ao dirigir um veiculo ou fazer uma operação no cérebro. Ok, esta ultima situação é mais improvável que aconteça no nosso dia-a-dia. Mas seria legal poder consultar um mapa ao em tempo real, ver o inventório durante um jogo de video-games, filmar o mundo do seu próprio ponto de vista ou ler receitas sem correr o risco de derrubar comida em cima do seu tablet. As possibilidades de uso são infinitas e é justamente isto que faz do Glass um conceito excitante. A idéia central é colocar o usuário no foco da experiência.&lt;/p&gt;

&lt;h2 id=&#34;os-competidores&#34;&gt;Os competidores&lt;/h2&gt;

&lt;p&gt;O Google Glass mal foi lançado, mas já existem diversas empresas na corrida pelo mercado eyewear. A idéia do &lt;a href=&#34;http://www.epiphanyeyewear.com/&#34; title=&#34;Epiphany&#34;&gt;Epifhany&lt;/a&gt;, por exemplo, é ser fashion. Já o &lt;a href=&#34;http://www.livemap.info/&#34; title=&#34;LiveMap&#34;&gt;LiveMap&lt;/a&gt; é um capacete para motociclistas com GPS embutido. O &lt;a href=&#34;http://www.lumus-optical.com/&#34; title=&#34;Lumus&#34;&gt;Lumus&lt;/a&gt; se propoe a de fato criar uma realidade aumentada. Além destes temos o GlassUp, Scope Technologies, Seebright, Innovega, Telepathy One&amp;#8230; Os diferenciais variam entre design do produto, especificações técnicas e o mais importante: preço. Inicialmente o custo para comprar um aparelho em beta teste do Google Glass foi de $1500 dolares. Alguns &lt;a href=&#34;http://www.techtudo.com.br/noticias/noticia/2013/08/google-glass-pode-ficar-cinco-vezes-mais-barato-no-lancamento-diz-estudo.html&#34; title=&#34;Google Glass pode ficar cinco vezes mais barato no lançamento, diz estudo&#34;&gt;rumores&lt;/a&gt; indicam que o valor para o consumidor final será bem mais barato: US$ 299. Mas isto não passa de especulação.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.epiphanyeyewear.com/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-38669&#34; alt=&#34;http://www.epiphanyeyewear.com&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/epiphany.jpg&#34; width=&#34;660&#34; height=&#34;355&#34; srcset=&#34;uploads/2013/08/epiphany.jpg 660w, uploads/2013/08/epiphany-312x168.jpg 312w, uploads/2013/08/epiphany-576x310.jpg 576w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Epiphany&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&#34;glassware&#34;&gt;Glassware&lt;/h2&gt;

&lt;p&gt;A primeira coisa que você precisa saber como um desenvolvedor é: por enquanto não existem aplicativos nativos para o Google Glass. Ao menos não como este conceito é utilizado atualmente. Nada é instalado na memória interna do aparelho. Isto ainda está em estudo já que os testes atuais com aplicativos nativos ainda causam alguns problemas como gasto excessivo de bateria e super aquecimento do dispositivo. Isto deve mudar no futuro, mas o que nós temos atualmente são serviços ativados por uma interface web que, de tempos em tempos, são atualizados com novas informações. Estes serviços são chamados de Glassware e todos eles funcionam nas nuvens via &lt;a href=&#34;https://developers.google.com/glass/&#34; title=&#34;Google Mirror Glass&#34;&gt;API Google Mirror Glass&lt;/a&gt;. O layout destes serviços segue uma interface padronizadas: cards em uma timeline.&lt;/p&gt;

&lt;p&gt;Pense na timeline como uma estante&amp;#8230; Quando você autoriza um serviço é como se você colocasse um livro novo nesta estante. É possível trocar de livro utilizando uma sequência de toques na base do óculos. Cada página deste livro corresponde a um cartão informativo (card) contendo mensagens curtas, notificações, vídeos, fotos, atualizações, etc.&lt;/p&gt;

&lt;p&gt;Este vídeo demonstra como interagir com a timeline.&lt;/p&gt;

&lt;p&gt;[youtube=&lt;a href=&#34;http://www.youtube.com/watch?v=4EvNxWhskf8&amp;amp;w=600&#34;&gt;http://www.youtube.com/watch?v=4EvNxWhskf8&amp;amp;w=600&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Já existem alguns serviços em funcionamento no momento como Path, &lt;a href=&#34;http://blog.evernote.com/blog/2013/05/16/first-look-evernote-for-google-glass/&#34; title=&#34;Evernote&#34;&gt;Evernote&lt;/a&gt;, CNN, New York Times, Twitter, Facebook, Elle e Tumblr. Todos eles funcionam através de uma permissão ligada a contas do Facebook e / ou Google+. Através do diretório não-oficial &lt;a href=&#34;http://glass-apps.org/google-glass-application-list&#34; title=&#34;Glass-apps.org&#34;&gt;Glass-apps.org&lt;/a&gt; é possível ver outros exemplos de serviços, reviews e links para instalação.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cnn.currentnewsnotify.com/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-38668&#34; alt=&#34;cnn-google-glass&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/cnn-google-glass.jpg&#34; width=&#34;660&#34; height=&#34;372&#34; srcset=&#34;uploads/2013/08/cnn-google-glass.jpg 660w, uploads/2013/08/cnn-google-glass-298x168.jpg 298w, uploads/2013/08/cnn-google-glass-550x310.jpg 550w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cnn.currentnewsnotify.com/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-38667&#34; alt=&#34;cnn-google-glass-2&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/cnn-google-glass-2.jpg&#34; width=&#34;660&#34; height=&#34;372&#34; srcset=&#34;uploads/2013/08/cnn-google-glass-2.jpg 660w, uploads/2013/08/cnn-google-glass-2-298x168.jpg 298w, uploads/2013/08/cnn-google-glass-2-550x310.jpg 550w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se empolgou para criar Glassware? A boa notícia é que você não precisa aprender nenhuma linguagem nova. É possível projetar serviços utilizando java, .net, ruby, python e php e a &lt;a href=&#34;https://developers.google.com/glass/&#34; title=&#34;Developers Google - Glass&#34;&gt;documentação oficial&lt;/a&gt; inclui muitos exemplo, &lt;a href=&#34;https://developers.google.com/glass/downloads/&#34; title=&#34;Developers Goole - Glass - Downloads&#34;&gt;templates&lt;/a&gt; e até mesmo o &lt;a href=&#34;https://mirror-api-playground.appspot.com/assets/css/base_style.css&#34; title=&#34;Mirror API Playgrounds - Base Style&#34;&gt;CSS dos cards nativos&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;boas-práticas&#34;&gt;Boas práticas&lt;/h2&gt;

&lt;p&gt;Bem, antes de projetar o seu glassware ou até mesmo site otimizado para Google Glass é importante ter em mente alguns conceitos.&lt;/p&gt;

&lt;p&gt;O Glass é projetado para ser utilizado no dia-a-dia e portanto não deve atrapalhar o mundo real! O serviço deve estar ao alcance do usuário quando ele precisar utilizar, mas sem interferir em outras situações. Isto significa nada de notificações frequentes ou inesperadas. Se uma mensagem da timeline for ignorada, por exemplo, isto não deve influenciar no restante da experiência. A idéia é entregar a informação de maneira rápida e precisa para não distrair o usuário do dia-a-dia. Isto significa que os textos devem ser curtos e objetivos. A recomendação é que os artigos mais longos sejam divididos em trechos menores (ocupando um grupo de cartões) ou até mesmo utilizar a função de leitura em voz alta. Já no caso de vídeos criados especificamente para o aparelho a documentação oficial recomenda não ultrapassar o tempo de 10 a 20 segundos.&lt;/p&gt;

&lt;h2 id=&#34;o-browser&#34;&gt;O Browser&lt;/h2&gt;

&lt;p&gt;O Google Glass ainda é um protótipo e portanto tem algumas limitações. Por enquanto não existe a opção de navegar diretamente até uma URL. Você deve primeiro realizar uma busca por voz no Google para então acessar o endereço. Basicamente você diz &amp;#8220;Ok Glass. Google&amp;#8221; e as palavras-chaves que deseja utilizar. Se o resultado da sua busca não for um conteúdo rich media você verá os primeiros 7 links do Google sobre aquele tema e um botão para a próxima página. Portanto, é bom caprichar no SEO!&lt;/p&gt;

&lt;p&gt;O Browser aceita HTML5 (incluindo audio e video), CSS e JavaScript. Inclusive animações ou valores como position:absolute.&lt;/p&gt;

&lt;h3 id=&#34;interações&#34;&gt;Interações&lt;/h3&gt;

&lt;p&gt;Os comandos, em teoria, são bem básicos. É possível descer a barra de rolagem de um site deslizando os dedos pelo painel sensível ao toque na base da armação, utilizando dois dedos é possível direcionar o foco. Para abrir um link basta bater levemente duas vezes. Um círculo na tela serve como ponteiro. É possível ainda dar zoom in e out deslizando dois dedos para frente e para trás. E é isto! São estas as interações do Glass. Isto torna impossível, por exemplo, preencher campos de formulário de texto já que não existe um teclado! Já campos como radio buttons, checkbox e selects são mais viáveis.&lt;/p&gt;

&lt;h2 id=&#34;design-responsivo&#34;&gt;Design Responsivo&lt;/h2&gt;

&lt;p&gt;Navegar em sites não otimizados para o aparelho pode ser uma tarefa complicada. Se nenhuma tag viewport for definida o Glass irá renderizar o layout de uma página como um browser de desktop (viewport de 960px). Até aí tudo bem, mas isto causa alguns problemas já que o texto de um site &amp;#8220;normal&amp;#8221; é bem difícil de ler na distância focal do Glass sem zoom. O mesma vale para selecionar links com precisão. Então um bom tamanho de texto é fundamental já que, ao contrário dos smartphones, é impossível aproximar mais o aparelho do rosto. Os cards nativos utilizam a fonte Roboto com 5 tamanhos para texto padrão: 70px, 50px, 40px, 34px, 30px. Existem duas exceções: 90px para frases importantes e curtas e 26px para o footer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/glass/ui-guidelines&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-38671&#34; alt=&#34;google-glass-template&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/google-glass-template.jpg&#34; width=&#34;660&#34; height=&#34;372&#34; srcset=&#34;uploads/2013/08/google-glass-template.jpg 660w, uploads/2013/08/google-glass-template-298x168.jpg 298w, uploads/2013/08/google-glass-template-550x310.jpg 550w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No caso de sites que utilizam a meta-tag viewport width=device-width a renderização será igual a um smartphone em modo paisagem.&lt;/p&gt;

&lt;p&gt;As especificações de mídia são as seguintes:&lt;/p&gt;

&lt;p&gt;device-width: 640px&lt;/p&gt;

&lt;p&gt;device-height: 360px&lt;/p&gt;

&lt;p&gt;width: 427px&lt;/p&gt;

&lt;p&gt;height: 240px&lt;/p&gt;

&lt;p&gt;orientation: landscape&lt;/p&gt;

&lt;p&gt;-webkit-device-pixel-ratio: 1.5&lt;/p&gt;

&lt;p&gt;Reparem que, pela densidade de pixel ser 1.5, embora a resolução do aparelho seja 640x360px o tamanho do viewport é 427x240px. Ou seja, você pode utilizar o seguinte Media Querie para Google Glass.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (width: 427px) {
/*Google Glass*/
}&lt;/pre&gt;

&lt;h2 id=&#34;design-para-glass&#34;&gt;Design para Glass&lt;/h2&gt;

&lt;p&gt;É importante criar layouts com o foco na experiência do usuário. Como não é um aparelho indicado para ler textos muito longos, a dica aqui é abusar dos call to actions. Pense em destacar as informações / ações mais importantes imediatamente. Chamadas claras e objetivas como &amp;#8220;ligue aqui&amp;#8221;, &amp;#8220;envie um e-mail&amp;#8221;, &amp;#8220;siga no twitter&amp;#8221; ou &amp;#8220;veja nosso endereço&amp;#8221; além de possuirem uma integração bacana com o restante das funcionalidades do aparelho fornecem informações de contato rapidamente. De ao usuário aquilo que ele veio buscar. Os links precisam ser óbvios e grandes o suficiente para serem selecionados com facilidade. A margem entre o conteúdo principal e a borda da janela do browser também é importante para garantir a visibilidade.&lt;/p&gt;

&lt;p&gt;O uso de contraste é fundamental, principalmente entre o texto e o background. Lembre-se que muitos usuários vão acessar o aparelho ao ar livre e é horrível tentar enxergar monitores no sol&amp;#8230;&lt;/p&gt;

&lt;p&gt;Uma coisa que deve ser evitada no momento é o uso de anuncios publicitários. Na verdade eles estão proibidos no caso dos &amp;#8220;aplicativos nativos&amp;#8221; pela política do Google. E é super justificavel. Imagina ter que selecionar um x pequenininho de uma janela popup?&lt;/p&gt;

&lt;p&gt;Não se preocupe se isto parecer informações demais. Para ajudar os desenvolvedores a definirem com mais precisão tamanhos de texto, margem, espaçamento, ícones, etc o Google disponibilizou uma série de &lt;a href=&#34;https://developers.google.com/glass/playground&#34; title=&#34;Deevelopers Google - Playground&#34;&gt;templates em HTML/CSS&lt;/a&gt; que são um bom ponto de partida para quem se interessar pela criação de layouts para o aparelho.&lt;/p&gt;

&lt;h2 id=&#34;inspiração&#34;&gt;Inspiração&lt;/h2&gt;

&lt;p&gt;O Google Glass abriu um mundo de possibilidades (semi) infinitas para designers e desenvolvedores. Basta uma busca no &lt;a href=&#34;http://dribbble.com/search?q=google+glass&#34; title=&#34;Dribbble&#34;&gt;Dribbble&lt;/a&gt; para ver exemplos de conceitos para o aparelho.&lt;/p&gt;

&lt;p&gt;Alguns projetos são perfeitamente possíveis como este app de Fitness do &lt;a href=&#34;http://jackwmorgan.com/ok-glass/&#34; title=&#34;Ok Glass&#34;&gt;Ok Glass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jackwmorgan.com/ok-glass/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-38674&#34; alt=&#34;okglass-2&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/okglass-2.jpg&#34; width=&#34;660&#34; height=&#34;375&#34; srcset=&#34;uploads/2013/08/okglass-2.jpg 660w, uploads/2013/08/okglass-2-295x168.jpg 295w, uploads/2013/08/okglass-2-545x310.jpg 545w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Outros nem tanto como este de reconhecimento facial feito pelo mesmo designer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jackwmorgan.com/ok-glass/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-38675&#34; alt=&#34;okglass&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/okglass.jpg&#34; width=&#34;660&#34; height=&#34;372&#34; srcset=&#34;uploads/2013/08/okglass.jpg 660w, uploads/2013/08/okglass-298x168.jpg 298w, uploads/2013/08/okglass-550x310.jpg 550w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ainda assim pesquisar os protótipos para a plataforma pode ser uma boa fonte de inspiração. &lt;a href=&#34;http://playgroundinc.com/blog/the-future-of-google-glass/&#34; title=&#34;Playground Inc.&#34;&gt;Este vídeo da Playground Inc&lt;/a&gt; também apresenta ideias de aplicativos bem interessantes.&lt;/p&gt;

&lt;h2 id=&#34;como-testar-sem-possuir-um-glass&#34;&gt;Como testar sem possuir um Glass&lt;/h2&gt;

&lt;p&gt;Nenhuma destas ferramentas é perfeita. Mesmo por que interação é algo muito difícil de medir sem de fato possuir o aparelho. Por mais que você possa visualizar o layout é difícil de prever se um objeto será fácil de selecionar utilizando apenas o movimento dos dedos e o olhar. Mas mesmo assim vale a pena utilizar alguma(s) destas ferramentas para testar outros elementos do layout como como peso, tamanho, tipografia, contraste, paleta de cores, etc.&lt;/p&gt;

&lt;h3 id=&#34;playground&#34;&gt;Playground&lt;/h3&gt;

&lt;p&gt;Através do &lt;a href=&#34;https://developers.google.com/glass/playground&#34; title=&#34;Google Mirror API Playground&#34;&gt;Google Mirror API Playground&lt;/a&gt; você pode brincar com templates de cards padrão no seu próprio browser. É possível anexar imagens, escrever textos, renderizar html, cruar menus personalizados, notificações falsas e até visualisar algumas ações da timeline com inserir, modificar e deletar itens.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/glass/playground&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-38673&#34; alt=&#34;mirror-API-playground&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/mirror-API-playground.jpg&#34; width=&#34;660&#34; height=&#34;270&#34; srcset=&#34;uploads/2013/08/mirror-API-playground.jpg 660w, uploads/2013/08/mirror-API-playground-329x134.jpg 329w, uploads/2013/08/mirror-API-playground-588x240.jpg 588w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este &lt;a href=&#34;https://github.com/Scarygami/mirror-api&#34; title=&#34;Scarygami Mirror-API&#34;&gt;projeto no Github&lt;/a&gt; criado pelo desenvolvedor Gerwin Sturm emula a API para que você possa baixar e realizar testes mais complexos sem ser um dos desenvolvedores oficiais (AKA explores) da plataforma.&lt;/p&gt;

&lt;h3 id=&#34;glasssim&#34;&gt;GlassSim&lt;/h3&gt;

&lt;p&gt;O &lt;a href=&#34;http://www.glasssim.com/&#34; title=&#34;GlassSim&#34;&gt;GlassSim&lt;/a&gt; é uma das ferramentas mais interessantes que eu encontrei para simular como é a experiência de utilizar o Glass. Você escolhe um template de card padrão ou escreve do zero a sua própria estrutura utilizando HTML e CSS inline. Depois é possível realizar o upload de uma foto para simular o campo de visão ou até mesmo abrir a sua webcam e ver o layout em ação no mundo real. É possível a partir daí tirar screenshots ou compartilhar o link com outras pessoas. A &lt;a href=&#34;https://plus.google.com/photos/116585924925440751072/albums/5873077927767143073&#34; title=&#34;GlassSim Album @Google+&#34;&gt;galeria&lt;/a&gt; exibe alguns exemplos interessantes do que seria possível fazer com o Glass.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://glasssim.com/&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-38688&#34; alt=&#34;glassSim&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/glassSim.jpg&#34; width=&#34;660&#34; height=&#34;352&#34; srcset=&#34;uploads/2013/08/glassSim.jpg 660w, uploads/2013/08/glassSim-315x168.jpg 315w, uploads/2013/08/glassSim-581x310.jpg 581w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Independente de você ser um fã da tecnologia ou não se interessar nem um pouco pela experiência, o Google Glass trará uma revolução na maneira como o ser humano interage com interfaces digitais. Estar preparado para atender as demandas futuras do mercado e proporcionar aos usuários um design que facilite o acesso a informação independente da mídia deve ser a prioridade de qualquer desenvolvedor que se orgulhe em dizer que faz design responsivo. Pode ser que o Glass torne-se apenas um produto de nicho ou que daqui a 10 anos seja o meio mais popular de acesso a internet. É impossível prever o futuro e quais caminhos o desenvolvimento web trilhará. Mas podemos estar preparados.&lt;/p&gt;

&lt;h3 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/glass/overview&#34; title=&#34;Developers Google - Glass&#34;&gt;Documentação Oficial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sites.google.com/site/glasscomms/faqs&#34; title=&#34;FAQ&#34;&gt;Google Glass FAQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://webdesign.tutsplus.com/articles/general/the-web-designers-guide-to-google-glass/&#34; title=&#34;The web designers guide to Google Glass&#34;&gt;The web designers guide to Google Glass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mobilexweb.com/blog/google-glass-browser-html5-responsive-web-design&#34; title=&#34;http://www.mobilexweb.com/blog/google-glass-browser-html5-responsive-web-design&#34;&gt;Google Glass Browser: HTML5 and Responsive Web Design in your head&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://plus.google.com/communities/105104639432156353586&#34; title=&#34;Glass Developers&#34;&gt;Grupo de Desenvolvedores no Google+&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Menu Retrátil com CSS e jQuery</title>
      <link>https://tableless.github.io/hugo-public/menu-retratil-com-css-e-jquery/</link>
      <pubDate>Mon, 12 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/menu-retratil-com-css-e-jquery/</guid>
      <description>

&lt;p&gt;Neste artigo vamos criar passo-a-passo um menu retrátil super versátil que, com apenas algumas linhas de modificação, poderá ser utilizado na horizontal, vertical, sobrepondo ou empurrando o conteúdo de um site. Veja ainda como evitar os &lt;s&gt;malditos bugs&lt;/s&gt; problemas mais comuns deste tipo de navegação.&lt;/p&gt;

&lt;h3 id=&#34;mini-bibliotecas&#34;&gt;Mini bibliotecas&lt;/h3&gt;

&lt;p&gt;Uma das principais vantagens de escrever um HTML semântico e bem organizado é a versatilidade. Com um mesmo código é possível criar diversas variações de estilo utilizando apenas CSS. Na verdade muitas estruturas acabam se repetindo, embora visualmente diferentes. Isto acontece geralmente com formulários, rodapés e navegação. É o motivo pelo qual os frameworks estão tão populares ultimamente. Mas, muitas vezes, não precisamos de algo tão massivo e complexo quanto uma framework para tarefas simples. É algo como tentar acertar uma formiga com uma bazuca! É muito mais prático e funcional construir uma pequena biblioteca pessoal de snippets &amp;#8211; pequenos trechos de código. O formato não importa muito. Pode ser que você salve comentários no seu software de edição favorito, escreva em pequenos blocos de notas no seu computador, envie e-mails para si mesmo ou até mesmo utilize alguma ferramenta como &lt;a href=&#34;http://snippets.me/&#34; title=&#34;Snippets.me&#34;&gt;Snippets.me&lt;/a&gt;  ou &lt;a href=&#34;http://snippi.com/&#34; title=&#34;Snippi&#34;&gt;Snippi&lt;/a&gt;. Seja como for ter algumas cartas na manga é útil na hora de entregar aquele projeto para ontem e recuperar horas de sono. Este menu é uma das minhas.&lt;/p&gt;

&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;O HTML do menu é bem simples. Vamos usar uma div com a classe &amp;#8220;drop&amp;#8221;. Esta div será necessária para as versões do menu em que ele irá sobrepor o site. Ela irá funcionar como uma sustentação para a navegação. Nas demais versões, ela pode ser deletada.&lt;/p&gt;

&lt;p&gt;Dentro da div &amp;#8220;drop&amp;#8221; criamos uma &lt;code&gt;nav&lt;/code&gt; e, como um menu é sempre uma lista de links, vamos usar as tags &lt;code&gt;ul&lt;/code&gt; e &lt;code&gt;li&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No exemplo, o meu menu ocupa 100% da tela mas eu gostaria que os links ficassem dentro de um container centralizado. Para isso, adicionei uma div com a classe wrap e margin automática.&lt;/p&gt;

&lt;p&gt;No final, o HTML ficou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;drop&#34;&amp;gt;
&amp;lt;nav class=&#34;nav nav-aberta&#34;&amp;gt;
&amp;lt;div class=&#34;wrap&#34;&amp;gt;
&amp;lt;ul class=&#34;listaNav&#34;&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 6&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 7&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 8&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 9&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Para ter um elemento servindo de exemplo visual e ser sobreposto ou empurrado pelo meu menu, coloquei apenas uma imagem. Mas, pense nela como todo o conteúdo do site, okay?&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img alt=&#34;&#34; src=&#34;http://placehold.it/1920x800/&amp;text=Conteúdo&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Hoje vamos criar quatro menus utilizando este mesmo html como um coringa.&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Aqui já começamos a ter diferenças de um menu para o outro. Trabalharemos com media-queries que reordenarão os elementos de acordo com o tamanho do viewport do usuário, ou seja, da janela do browser. Para o exemplo, criei um media-querie com a max-width de 800px. É a partir desta largura que o menu se colapsa em apenas uma âncora. Altere este valor de acordo com o seu projeto, é claro.&lt;/p&gt;

&lt;h3 id=&#34;menus-horizontais&#34;&gt;Menus Horizontais&lt;/h3&gt;

&lt;p&gt;Hoje vamos desenvolver dois tipos de menus horizontais diferentes. Um empurrará todo o site para baixo ao abrir (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/fbgLl&#34; title=&#34;Navegação Responsiva 1&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38487&#34; alt=&#34;nav-1&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-1.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-1.jpg 660w, uploads/2013/08/nav-1-329x160.jpg 329w, uploads/2013/08/nav-1-588x286.jpg 588w, uploads/2013/08/nav-1-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E o outro, se abrirá sobre o site (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/iAeyx&#34; title=&#34;Navegação Responsiva 2&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38488&#34; alt=&#34;nav-2&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-2.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-2.jpg 660w, uploads/2013/08/nav-2-329x160.jpg 329w, uploads/2013/08/nav-2-588x286.jpg 588w, uploads/2013/08/nav-2-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note que entre os dois htmls existe apenas uma classe diferente: a div &amp;#8220;drop&amp;#8221;. Esta divisão extra está apenas no segundo exemplo no menu que passa por cima do conteúdo do site. Ela terá uma altura fixa, que será a altura do meu menu quando fechado. Quando ele se abrir, a div que sustenta nosso menu continuará do mesmo tamanho, fazendo com que os demais elementos sobreponham o resto do site.&lt;/p&gt;

&lt;p&gt;Primeiro, vamos ao CSS dele fechado. Como é só uma lista, eu apenas usei o parâmetro &amp;#8220;inline-block&amp;#8221; para que todos os itens se alinhem um ao lado do outro. Os demais parâmetros, são apenas estilização do menu. Não coloquei muitas coisas em termos visuais. Não é para ser bonito. A idéia é ter uma carcaça pronta para receber o SEU design. Eu coloquei na minha nav uma &amp;#8220;position: fixed&amp;#8221; para que o menu fique sempre à vista do usuário, e de fácil acesso. Mas, você não terá problemas se quiser trabalhar com uma posição relativa ou absoluta. Isso irá variar de acordo com o seu projeto.&lt;/p&gt;

&lt;p&gt;Outra coisa importante é o parâmetro &amp;#8220;nav-toggle&amp;#8221;. Ele será o gatilho para abrir e fechar o meu menu, tanto em sua versão vertical quanto na horizontal. Ele é inserido no meu HTML dinamicamente via JavaScript. No entanto, eu não quero que ele apareça quando estiver em resoluções maiores que 800px, por isso coloquei nele um &amp;#8220;display: none&amp;#8221; e, dentro do media-querie que irá atender viewports menores que 800px ele tem o &amp;#8220;display: block&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Veja como ficou o CSS do menu na horizontal que empurrará o site para baixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.wrap {
max-width: 1200px;
margin: 0 auto;
}

.nav {
background: #FFF;
z-index: 200;
position: fixed;
width: 100%;
font-size: 1em;
overflow: auto;
}

.nav ul {
padding: 1em;
}

li {
display: inline-block;
margin-right: 2em;
}

a {
text-decoration: none;
color: #444;
}

a:hover {
color: red;
}

.nav-toggle {
display: none;
}

.foto {
width: 100%;
}

/*Media Queries*/
@media only screen and (max-width: 800px) {
.wrap {
max-width: 100%;
margin: 0;
}

.nav.nav-aberta {
position: relative;
padding: 0 0 0.5em 0;
height: 0;
}

.nav ul {
padding: .5em;
margin: 0;
background: #444;
}

li {
margin: 0;
padding: 0;
display: block;
border-bottom: 1px solid #FFF;
}

li a {
padding: 0.5em 0 0.5em 0;
display: block;
color: #FFF;
}

li:last-child {
border-bottom:none;
}

.nav-toggle {
display: block;
padding: .4em;
margin: .5em 0;
}
}&lt;/pre&gt;

&lt;p&gt;As principais mudanças para telas menores são o .nav-toggle que agora é visível nas versões menores que 800px, a lista que deixa de ser &amp;#8220;inline-block&amp;#8221; para ser apenas &amp;#8220;block&amp;#8221; e a .nav, que antes tinha a posição fixa e agora é relativa.&lt;/p&gt;

&lt;p&gt;Na versão em que o menu irá passar por cima do site, defina uma altura para a classe .drop no media querie equivalente ao menu fechado, posição relativa e o z-index maior que os outros elementos para que ele possa se sobrepor. Veja o código:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.drop {
height: 48px;
position: relative;
z-index: 1000;
}&lt;/pre&gt;

&lt;p&gt;Uma maneira interessante de testar o menu funcionando antes de aplicar o JavaScript é modificar a altura da .nav para &amp;#8220;auto&amp;#8221; ou a altura que você quer que o seu menu tenha quando estiver aberto. Isso fará com que, ao redimensionar o seu browser, o menu apareça como se estivesse aberto. No entanto, para o nosso exemplo, vamos usar a altura 0.&lt;/p&gt;

&lt;h3 id=&#34;menus-verticais&#34;&gt;Menus Verticais&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38499&#34; alt=&#34;menu-lateral&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/menu-lateral.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/menu-lateral.jpg 660w, uploads/2013/08/menu-lateral-329x160.jpg 329w, uploads/2013/08/menu-lateral-588x286.jpg 588w, uploads/2013/08/menu-lateral-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;São dois os modelos de menu vertical:&lt;/p&gt;

&lt;p&gt;Um abrirá a partir da esquerda empurrando todo o site para a direita ao abrir (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/EKylp&#34; title=&#34;Navegação Responsiva 3&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38489&#34; alt=&#34;nav-3&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-3.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-3.jpg 660w, uploads/2013/08/nav-3-329x160.jpg 329w, uploads/2013/08/nav-3-588x286.jpg 588w, uploads/2013/08/nav-3-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E o outro, se abrirá sobre o conteúdo (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/wcCEK&#34; title=&#34;Navegação Responsiva 4&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38490&#34; alt=&#34;nav-4&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-4.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-4.jpg 660w, uploads/2013/08/nav-4-329x160.jpg 329w, uploads/2013/08/nav-4-588x286.jpg 588w, uploads/2013/08/nav-4-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Primeiro, vamos ao CSS do menu quando o viewport for maior que 800px. Neste exemplo, deixei o menu em um background escuro e ocupando 20% do viewport. Assim, o conteúdo, ocupará os 80% restantes. Como os itens da minha lista não ficarão mais uns aos lados dos outros, neste caso eu a mantive o display &amp;#8220;block&amp;#8221; desde o CSS desktop. E, também deixei o gatilho com &amp;#8220;display:none&amp;#8221; e a minha imagem com 80% de largura.&lt;/p&gt;

&lt;p&gt;Quanto ao CSS para telas menores o primeiro ponto é que, neste exemplo, trabalharemos com uma largura fixa para o menu. Deixei o padrão de 175px de largura. Usei esta medida pela segurança de não ficar muito grande em smartphones, já que o tamanho mais comum é de 320px de largura com ele em pé, 175px é uma medida segura para trabalharmos.&lt;/p&gt;

&lt;p&gt;Minha sidebar terá também a posição absoluta no exemplo. Isso serve para que ela possa &amp;#8220;passar por cima&amp;#8221; do conteúdo do site sem problemas. Na versão em que o site irá caminhar para o lado, faremos isso pelo JS.&lt;/p&gt;

&lt;p&gt;E, não podemos esquecer, do gatilho que irá ativar o nosso menu. Assim como no exemplo anterior, usei um item de classe .nav-toggle que será adicionado dinamicamente pelo Javascript. Deixei ele com o display:none fora do media-query e ele irá ter a posição absoluta quando o viewport for menor que 800px. Deixei o topo dele em 0 e ele será alinhado à partir da borda direita dele. Usei, neste caso, um valo negativo. Assim, ele ficará visível quando o meu menu estiver fechado, para ser clicado e, ao abrir, caminhará junto com o meu menu para ser clicado novamente e fecha-lo.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.wrap {
max-width: 1200px;
margin: 0 auto;
}

.nav {
background: #FFF;
z-index: 200;
position: relative;
width: 20%;
font-size: 1em;
float: left;
background: #444;
}

.nav ul {
padding: 1em;
}

li {
display: block;
width: 100%;
margin: 1em 2em 1em 0;
}

a {
text-decoration: none;
color: #FFF;
}

a:hover {
color: red;
}

.nav-toggle {
display: none;
}

.foto {
 width: 80%;
float: right;
}

/*Media Queries*/
@media only screen and (max-width: 800px) {
.wrap {
max-width: 100%;
margin: 0;
}

.nav {
width: 175px;
position: absolute;
top: 0;
left: 0;
}

.nav ul {
padding: .5em;
margin: 0;
background: #444;
}       

li {
margin: 0;
padding: 0;
display: block;
}

li a {
padding: 0.5em 0 0.5em 0;
display: block;
color: #FFF;
}

.nav-toggle {
position: absolute;
top: 0;
right: -56px;
color: #FFF;
cursor: pointer;
width: 44px;
height: 24px;
z-index: 1000;
display: block;
background: #444;
padding: 12px 6px 6px 6px;
}

.foto {
width: 100%;
position: relative;
float: none;
}
}&lt;/pre&gt;

&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;

&lt;p&gt;Como o nosso código utiliza jQuery a primeira coisa a fazer é chamar a biblioteca.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script src=&#34;//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;window.jQuery || document.write(&#39;&amp;lt;script src=&#34;js/vendor/jquery-1.9.1.min.js&#34;&amp;gt;&amp;lt;\/script&amp;gt;&#39;)&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Menus na Horizontal&lt;/p&gt;

&lt;p&gt;Para os dois casos do menu na horizontal, tanto o que empurra quanto o que sobrepõe o site, usei exatamente o mesmo JS. O que irá garantir que ele irá sobrepor o site é a classe .drop . Quando ela estiver com uma altura definida, ela será como um suporte para o menu e fará com que tudo passe por cima dos outros objetos do site. Quando ela não existir, ou não estiver com uma altura definida ela irá aumentar de tamanho, empurrando os demais elementos para baixo.&lt;/p&gt;

&lt;p&gt;A primeira coisa a fazer é utilizar addClass para colocar a classe &amp;#8220;fechada&amp;#8221; no menu. Esta classe será retirada quando o menu for aberto e irá aparecer quando ele fechar novamente. Servirá como um elemento para indicar ao meu JS o que irá fazer.&lt;/p&gt;

&lt;p&gt;Em seguida, utilize o comando de jQuery after para adicionar o gatilho para o menu. Caso queira que ele fique antes do menu, você pode substituir o &amp;#8220;after&amp;#8221; por &amp;#8220;before&amp;#8221;.&lt;/p&gt;

&lt;p&gt;A animação acontece através dos eventos &amp;#8220;click&amp;#8221; e &amp;#8220;animate&amp;#8221;.&lt;/p&gt;

&lt;p&gt;O JavaScript fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;$(&#34;.nav&#34;).addClass(&#34;fechada&#34;);
$(&#34;.nav&#34;).after(&#34;&amp;lt;a class=\&#34;nav-toggle\&#34;&amp;gt;Menu&amp;lt;/a&amp;gt;&#34;);

$(&#34;.nav-toggle&#34;).click(function() {
var altura = $(&#34;.nav ul&#34;).height();
if($(&#34;.nav&#34;).hasClass(&#34;fechada&#34;)) {
$(&#34;.nav&#34;).animate({height:altura},{queue:false, duration:200}).removeClass(&#34;fechada&#34;);
}
else {
$(&#34;.nav&#34;).animate({height:&#34;0px&#34;},{queue:false, duration:200}).addClass(&#34;fechada&#34;);
}
});&lt;/pre&gt;

&lt;p&gt;A mágica é a seguinte: quando o usuário clica no gatilho do menu (no caso, o .nav-toggle), ele pega a altura da minha lista de links. Depois, ele faz uma verificação na minha .nav . Se ela possuir a classe &amp;#8220;fechada&amp;#8221;, ela irá animar aumentando a altura dela e mostrando o menu. Caso esta classe não exista, ele diminui a altura escondendo o menu. Tudo isso na velocidade de 200 milisegundos.&lt;/p&gt;

&lt;p&gt;Escolhi este método por uma questão de praticidade. Existem outras maneiras de realizar o mesmo processo. Ao invés de adicionar uma classe, é possível, por exemplo, verificar a altura da .nav. Se for maior que 0px, significa que ela estava aberta e, ao clicar, será fechada. Se for igual a 0, é porque ela está fechada e precisará ser aberta.&lt;/p&gt;

&lt;h3 id=&#34;e-uma-dica&#34;&gt;E uma dica!&lt;/h3&gt;

&lt;p&gt;Para finalizar, vamos nos livrar de um bug chato que normalmente acontece: ao aumentar a tela para os valores maiores que o nosso media querie (no caso, 800px), o menu poderá ficar com a altura que ele estava quando aberto, e isso obviamente desalinha todo o layout.&lt;/p&gt;

&lt;p&gt;Resolver isso é bem fácil. Podemos fazer com que o nosso JS verifique, ao redimensionar a janela, qual é o tamanho do viewport. Se for maior que 800, ele volta a altura que deveria ter originalmente. Se for menor, ele simplesmente se fecha ou mantém a altura que estava quando aberta. No exemplo, eu fiz com que ele se fechasse. Veja como ficou o JS inteiro:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;$(&#34;.nav&#34;).addClass(&#34;fechada&#34;);
$(&#34;.nav&#34;).after(&#34;&amp;lt;a class=\&#34;nav-toggle\&#34;&amp;gt;Menu&amp;lt;/a&amp;gt;&#34;);

$(&#34;.nav-toggle&#34;).click(function() {
var altura = $(&#34;.nav ul&#34;).height();
if($(&#34;.nav&#34;).hasClass(&#34;fechada&#34;)) {
$(&#34;.nav&#34;).animate({height:altura},{queue:false, duration:200}).removeClass(&#34;fechada&#34;);
}
else {
$(&#34;.nav&#34;).animate({height:&#34;0px&#34;},{queue:false, duration:200}).addClass(&#34;fechada&#34;);
}
});

$(window).resize(function() {
var tamanhoViewport = $(window).width();
if (tamanhoViewport &amp;gt; 800) {
$(&#34;.nav&#34;).css(&#34;height&#34;,&#34;auto&#34;).addClass(&#34;fechada&#34;);
} else {
$(&#34;.nav&#34;).css(&#34;height&#34;,&#34;0px&#34;).addClass(&#34;fechada&#34;);
}
});&lt;/pre&gt;

&lt;p&gt;Menu Vertical&lt;/p&gt;

&lt;p&gt;Neste caso, a verificação da largura do viewport acontece em dois momentos. Uma quando o usuário redimensionar o browser e outra no momento que o documento é aberto. Em ambos, a condição é a mesma: se o tamanho da janela for menor que 800px, ele adiciona a classe &amp;#8220;side-fechado&amp;#8221;, o gatilho &amp;#8220;nav-toggle&amp;#8221; que irá animar o menu e colocar a posição dele como -175px à esquerda, o que garante que o menu ficará fechado logo após o usuário redimensionar o browser. Se for maior que 800px a posição à esquerda fica 0.&lt;/p&gt;

&lt;p&gt;(Lembrando que estas medidas de largura são subjetivas e devem ser alteradas a cada projeto.)&lt;/p&gt;

&lt;p&gt;O JS ficou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;//Menu Sidebar
$(window).resize(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
$(&#39;.foto&#39;).css(&#34;left&#34;, 0);
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}
});

$(document).ready(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);;
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}
});&lt;/pre&gt;

&lt;p&gt;Para animar o menu, vamos criar uma função de nome &amp;#8220;menu&amp;#8221;. Nesta função, ao clicar no gatilho &amp;#8220;.nav-toggle&amp;#8221;, acontecem duas coisas: verificação da existência da classe &amp;#8220;side-fechado&amp;#8221; e animação do menu. Se possuir, o JavaScript anima a navegação para 0px da borda esquerda do menu. Caso não possua (o que indica para nós que o menu está aberto) a navegação volta para os -175px negativos.&lt;/p&gt;

&lt;p&gt;O JS fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function menu() {
$(&#39;.nav-toggle&#39;).click(function() {
if($(&#34;.nav&#34;).hasClass(&#34;side-fechado&#34;)) {
$(&#39;.nav&#39;).animate({
left: &#34;0px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).removeClass(&#34;side-fechado&#34;);
});
}
else {
$(&#39;.nav&#39;).animate({
left: &#34;-175px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).addClass(&#34;side-fechado&#34;);
});
}
});
}&lt;/pre&gt;

&lt;p&gt;Neste exemplo, ele está sobrepondo o conteúdo do site. Mas, eu posso fazer com que ele empurre o site para a direita quando surgir e para a esquerda quando fechar. Para isso, eu coloco um animate no conteúdo do site também (no exemplo, o meu objeto de classe &amp;#8220;.foto&amp;#8221;). O JS fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function menu() {
$(&#39;.nav-toggle&#39;).click(function() {
if($(&#34;.nav&#34;).hasClass(&#34;side-fechado&#34;)) {
$(&#39;.nav&#39;).animate({
left: &#34;0px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).removeClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;175px&#34;,
}, 100);
}
else {
$(&#39;.nav&#39;).animate({
left: &#34;-175px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).addClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;0px&#34;,
}, 100);
}
});
}&lt;/pre&gt;

&lt;p&gt;Agora, é só chamar a função &amp;#8220;menu&amp;#8221; depois das verificações de tamanho da janela. O JS completo fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function menu() {
$(&#39;.nav-toggle&#39;).click(function() {
if($(&#34;.nav&#34;).hasClass(&#34;side-fechado&#34;)) {
$(&#39;.nav&#39;).animate({
left: &#34;0px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).removeClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;175px&#34;,
}, 100);
}
else {
$(&#39;.nav&#39;).animate({
left: &#34;-175px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).addClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;0px&#34;,
}, 100);
}
});
}

//Menu Sidebar
$(window).resize(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
$(&#39;.foto&#39;).css(&#34;left&#34;, 0);
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}

menu();
});

$(document).ready(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);;
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}

menu();
});&lt;/pre&gt;

&lt;h2 id=&#34;demos&#34;&gt;Demos&lt;/h2&gt;

&lt;p&gt;Você pode fazer aqui o &lt;a href=&#34;http://cl.ly/0E0C3O0j2r2T&#34; title=&#34;Navegação Responsiva - Demo&#34;&gt;download dos arquivos&lt;/a&gt; com os exemplos criados ou brincar com as demos online no Codepen.&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/fbgLl&#34; title=&#34;Navegação Responsiva 1&#34;&gt;Navegação 1 &amp;#8211; Menu horizontal empurrando o conteúdo para baixo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/iAeyx&#34; title=&#34;Navegação Responsiva 2&#34;&gt;Navegação 2 &amp;#8211; Menu horizontal passando sobre o conteúdo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/EKylp&#34; title=&#34;Navegação Responsiva 3&#34;&gt;Navegação 3 &amp;#8211; Menu lateral empurrando o conteúdo para o lado.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/wcCEK&#34; title=&#34;Navegação Responsiva 4&#34;&gt;Navegação 4 &amp;#8211; Menu lateral passando sobre o conteúdo.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;A navegação é sempre uma parte fundamental de qualquer layout. Cuidar para que ela apareça da maneira mais otimizada possível, não apenas em aparelhos mobile, mais em dispositivos com o viewport reduzido não é mais um luxo, mas uma necessidade. Existem algumas outras abordagens até mesmo utilizando apenas CSS3. É importante conhecer diversas soluções para adequar as necessidades de cada projeto. Reaproveitando trechos de código como este podemos garantir que o processo de desenvolvimento seja ágil e preciso, sem sacrificar qualidade, semântica e a experiência do usuário.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 parâmetros de HTML que você deve usar em um futuro próximo</title>
      <link>https://tableless.github.io/hugo-public/3-parametros-de-html-que-voce-dev-usar-em-um-futuro-proximo/</link>
      <pubDate>Tue, 14 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/3-parametros-de-html-que-voce-dev-usar-em-um-futuro-proximo/</guid>
      <description>

&lt;p&gt;Neste artigo vamos conhecer alguns parâmetros que ainda não são largamente utilizados por algum motivo ou outro, mas que merecem ser conhecidos por serem práticos, úteis e interessantes. Alguns não foram aprovados oficialmente por orgãos como W3C, outros já receberam o ok da instituição mas não são compatíveis com a maioria dos browsers&amp;#8230; De qualquer maneira valem a pena serem conhecidos pois todos tem o poder de facilitar nosso dia-a-dia de alguma forma.&lt;/p&gt;

&lt;p&gt;É impossível prever com exatidão quais propostas vieram para ficar e quais vão se perder no limbo dos browsers, mas vale a pena ficar de olho nestas aqui&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;imagens-responsivas&#34;&gt;Imagens responsivas&lt;/h2&gt;

&lt;h3 id=&#34;picture&#34;&gt;Picture&lt;/h3&gt;

&lt;p&gt;Esta proposta pode tornar realidade um sonho de muitos desenvolvedores: imagens responsivas. Esqueça soluções server side complexas ou javascripts pesados. Utilizando você pode servir imagens em diferentes resoluções e / ou densidade de pixels diretamente no HTML. E o melhor, através de Media Queries apenas a imagem correta para cada situação é baixada pelo navegador!&lt;/p&gt;

&lt;p&gt;As possibilidades de uso são imensas. É possível utilizar imagens adequadas para cada ponto de quebra do layout em diferentes dispositivos, servir imagens coloridas ou em preto e branco de acordo com a capacidade da tela ou até mesmo mostrar imagens diferentes de acordo com a orientação do dispositivo (retrato ou paisagem).&lt;/p&gt;

&lt;p&gt;Na prática a tag picture poderia ser aplicada da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-HTML&#34;&gt;&amp;lt;picture&amp;gt;
  &amp;lt;source media=&#34;(min-width: 40em)&#34; srcset=&#34;fotogrande.jpg 1x, fotogrande-hd.jpg 2x&#34;&amp;gt;
  &amp;lt;source srcset=&#34;fotopequena.jpg 1x, fotopequena-hd.jpg 2x&#34;&amp;gt;
  &amp;lt;img src=&#34;fotofallback.jpg&#34; alt=&#34;&#34;&amp;gt;
&amp;lt;/picture&amp;gt;&lt;/pre&gt;

&lt;p&gt;Em dispositivos cuja largura minima é maior do que 40 EM o arquivo &amp;#8220;fotogrande.jpg&amp;#8221; seria exibido, enquanto para larguras menores o arquivo &amp;#8220;fotopequena.jpg&amp;#8221; seria o escolhido. Os atributos &amp;#8220;1x&amp;#8221; e &amp;#8220;2x&amp;#8221; referem-se a densidade de pixels. Ou seja, versões em HD seriam servidas para monitores de alta resolução como o retina display. No caso de não compatibilidade do atributo com o browser uma  &lt;img alt=&#34;&#34; /&gt;normal serviria como fallback.&lt;/p&gt;

&lt;p&gt;Infelizmente, por enquanto, nenhum browser suporta o atributo. Mas isto deve mudar em breve. Pelo menos no que depender do &lt;a href=&#34;http://responsiveimages.org/&#34; title=&#34;Responsive Images Community Group&#34;&gt;Responsive Images Community&lt;/a&gt;, o grupo de desenvolvedores empenhado em discutir, refinar e divulgar o atributo. Eles até construíram um novo build do Chromium só para demonstrar como tudo funcionaria ao vivo. Já existe um &lt;a href=&#34;http://picture.responsiveimages.org/&#34; title=&#34;Responsive Images - Picture&#34;&gt;rascunho não-oficial&lt;/a&gt; do projeto para a W3C com a documentação completa. Na &lt;a href=&#34;https://github.com/responsiveimagescg&#34; title=&#34;Responsive Images CG &#34;&gt;página do grupo no Github&lt;/a&gt; também é possível acompanhar as discussões.&lt;/p&gt;

&lt;h3 id=&#34;srcset&#34;&gt;Srcset&lt;/h3&gt;

&lt;p&gt;Existe ainda uma proposta diferente apoiada pelo mesmo grupo. Incrementar o bom e velho img através do atributo srcset.&lt;/p&gt;

&lt;pre class=&#34;lang-HTML&#34;&gt;&amp;lt;img src=&#34;fallback.jpg&#34; alt=&#34;&#34; srcset=&#34;fotopequena.jpg 640w 1x, fotopequena-hd.jpg 640w 2x, fotogrande.jpg 1x, fotogrande-hd.jpg 2x &#34;&amp;gt;&lt;/pre&gt;

&lt;p&gt;Esta sintaxe é mais concisa e já existe como um &lt;a href=&#34;http://www.w3.org/html/wg/drafts/srcset/w3c-srcset/&#34; title=&#34;W3C - Srcset &#34;&gt;rascunho oficial na W3C&lt;/a&gt;. O conceito ainda está em um estágio bem inicial de desenvolvimento, mas de qualquer forma esta é uma discussão que vale a pena ser acompanhada.&lt;/p&gt;

&lt;h2 id=&#34;rel-8221-logo-8221&#34;&gt;Rel=&amp;#8221;logo&amp;#8221;&lt;/h2&gt;

&lt;p&gt;Buscar por logotipos na internet pode ser uma tarefa difícil. Serviços como Google imagens acabam retornando arquivos de baixa qualidade, rasterizados e pequenos demais. Alguns sites como &lt;a href=&#34;http://www.brandsoftheworld.com/&#34; title=&#34;Brands of the World&#34;&gt;Brands of the World&lt;/a&gt; tentam fazer um apanhado geral de alguns logotipos, mas acabam não dando conta do trabalho. Sem contar que é impossível garantir que o arquivo é uma cópia real e de boa qualidade do logotipo original.&lt;/p&gt;

&lt;p&gt;A proposta do &lt;a href=&#34;http://relogo.org&#34; title=&#34;relogo&#34;&gt;rel=&amp;#8221;logo&amp;#8221;&lt;/a&gt; é criar um padrão para a publicação de logotipos em vetor na internet que possa ser reutilizado por outros sites, aplicativos, leitores, etc. Desta maneira os usuários poderiam facilmente ter acesso a um arquivo escalável e aprovado pelo dono. E isto facilitaria para que as aplicações sempre tivessem a versão mais atualizada do logo, mantendo a consistência da identidade visual de uma marca.&lt;/p&gt;

&lt;p&gt;O padrão foi &lt;a href=&#34;http://microformats.org/wiki/rel-logo&#34; title=&#34;Rel Logo&#34;&gt;rejeitado pelo Microformats&lt;/a&gt; por ser parecido com rel=&amp;#8221;icon&amp;#8221;. (Aparentemente eles não sabem distinguir entre ícones e logotipos). Mas isto não desestimulou o uso já que é algo simples de ser aplicado e que não depende muito de atributos como compatibilidade do browser, etc. Alguns serviços grandes como Foursquare e Github já utilizam rel=&amp;#8221;logo&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Basta uma linha de HTML para utilizar rel=&amp;#8221;logo&amp;#8221; em seu site. O processo é bem similar ao de implementação de um favicon ou um apple touch icon. Para utilizar basta realizar o upload do arquivo SVG em um servidor qualquer e adicionar o seguinte código entre as tags head (obviamente substituindo &amp;#8220;seudominio.com.br&amp;#8221; pelo endereço do seu arquivo).&lt;/p&gt;

&lt;pre class=&#34;lang-HTML&#34;&gt;&amp;lt;link rel=&#34;logo&#34;   type=&#34;image/svg&#34;  href=&#34;http://www.seudominio.com.br/logo.svg&#34;/&amp;gt;&lt;/pre&gt;

&lt;p&gt;E pronto! Você pode testar o funcionamento utilizando a &lt;a href=&#34;http://relogo.org/api/&#34; title=&#34;Relogo API&#34;&gt;API do serviço&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para o futuro existem ainda projetos para ampliar este conceito. A idéia é incluir formatos diferentes (horizontal, vertical, quadrado), variações de cores (mococromático, colorido, etc) e até mesmo link para um manual da marca em PDF.&lt;/p&gt;

&lt;p&gt;Quer gritar para os quatro cantos da web que qualquer um pode baixar seu logo? Você pode implementar uma solução como a do plugin &lt;a href=&#34;http://demo.jarnesjo.net/jquery-logo-downloadtip/&#34; title=&#34;jQuery Logo Downloadtip&#34;&gt;Logo Downloadtip&lt;/a&gt; para facilitar o acesso ao arquivo.&lt;/p&gt;

&lt;h2 id=&#34;a-download&#34;&gt;a[download]&lt;/h2&gt;

&lt;p&gt;Colocar um link direto para um arquivo pesado &amp;#8211; como um PDF por exemplo &amp;#8211; pode ser um desastre. O usuário pode clicar acidentalmente e o navegador travar ao tentar renderizar o arquivo utilizando um plugin&amp;#8230; Pedir para &amp;#8220;clicar com o botão direito e salvar&amp;#8221; também não é uma solução efetiva do ponto de vista da experiência do usuário. Mas através do atributo a[download] você pode forçar o browser a realizar automaticamente o download do arquivo. Existem algumas soluções em PHP para este problema, mas seria muito mais simples se isto pudesse ser resolvido em HTML mesmo, certo?&lt;/p&gt;

&lt;p&gt;Existe uma preocupação grande quanto a segurança deste tipo de funcionalidade. É provável que arquivos executáveis não sejam compatíveis com o formato.&lt;/p&gt;

&lt;p&gt;Bem, o parâmetro a[download] já existe e está presente nas especificações do HTML5. O problema é a compatibilidade com os navegadores. Por enquanto só o Google Chrome 4+ e o Firefox 20+ aceitam&amp;#8230; Mas se você quiser utilizar mesmo assim é bem simples.&lt;/p&gt;

&lt;pre class=&#34;lang-HTML&#34;&gt;&amp;lt;a href=&#34;nomedoarquivogigante.pdf&#34; download&amp;gt;Download do Arquivo Gigante&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;Você também pode especificar um nome através do atributo &amp;#8220;download&amp;#8221;. Isto é especialmente útil no caso de arquivos com o nome gerado automaticamente, já que o arquivo sera salvo com o nome que você especificou. Não se esqueça de incluir a extensão do arquivo já que o Firefox não coloca ela automaticamente.&lt;/p&gt;

&lt;pre class=&#34;lang-HTML&#34;&gt;&amp;lt;a href=&#34;4816162342.pdf&#34; download=&#34;arquivogigante.pdf&#34;&amp;gt;Download do Arquivo Gigante&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;Quer testar como funciona? Esta &lt;a href=&#34;http://html5-demos.appspot.com/static/a.download.html&#34; title=&#34;A-download Demo&#34;&gt;demo do atributo&lt;/a&gt; é bem interessante.&lt;/p&gt;

&lt;p&gt;Além de baixar automáticamente ao clicar no link, no Google Chrome também é possível arrastar e soltar o arquivo para a área de trabalho.&lt;/p&gt;

&lt;h2 id=&#34;seja-a-mudança-que-você-quer-ver-no-mundo&#34;&gt;Seja a mudança que você quer ver no mundo.&lt;/h2&gt;

&lt;p&gt;Este pensamento aplica-se perfeitamente ao desenvolvimento web. As vezes dependemos muito de padrões, consórcios e associações fechadas para determinar o futuro e esquecemos que nós, desenvolvedores, também temos o poder para criarmos nossos próprios caminhos e fazermos a diferença na comunidade. Iniciativas como rel=&amp;#8221;logo&amp;#8221; e Responsive Images Community Group são a prova disto.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Design Responsivo na prática: do rascunho ao digital</title>
      <link>https://tableless.github.io/hugo-public/design-responsivo-na-pratica-do-rascunho-ao-digita/</link>
      <pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/design-responsivo-na-pratica-do-rascunho-ao-digita/</guid>
      <description>

&lt;p&gt;Você já convenceu o seu chefe ou cliente que &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34; title=&#34;O que é Design Responsivo?&#34;&gt;Design Responsivo&lt;/a&gt; é a última bolacha de chocolate do pacote, já sabe como trabalhar com media queries e como desenvolver códigos bonitos, semânticos e cheirosos. Mas a dúvida ainda persiste &amp;#8211; por onde começar? Você não está sozinho. Esta é uma dúvida bem frequente. Por isto resolvi escrever um artigo básico só com dicas de prototipagem para design responsivo coletando algumas ferramentas úteis, artigos interessantes e comentando também um pouco da minha experiência pessoal ao lidar com o assunto no dia-a-dia gerindo um pequeno estúdio de webdesign.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos criar juntos um layout do wireframe ao design final. Assim você poderá acompanhar um processo passo-a-passo e adapta-lo para o seu fluxo de trabalho pessoal. Não tenho a pretensão de criar um guia definitivo, nem comentar técnicas de desenvolvimento mais avançadas. Mas tenho certeza que estas dicas vão ser um bom ponto de partida para você iniciar o seu projeto. Vamos a elas!&lt;/p&gt;

&lt;h2 id=&#34;o-conteúdo-é-o-rei&#34;&gt;O conteúdo é o rei&lt;/h2&gt;

&lt;p&gt;O primeiro passo para projetar &amp;#8211; não apenas um site responsivo, mas qualquer layout para a internet &amp;#8211; é o inventório de conteúdo. É ele que vai ditar qual é a melhor estrutura para o layout. Raramente o seu cliente vai possuir os textos, videos e imagens finais prontinhos para você diagramar. Mas o ideal é sempre ter ao menos uma noção de qual é o &lt;strong&gt;tipo&lt;/strong&gt; de conteúdo que você pretende utilizar. Para isto é importante montar um briefing &amp;#8211; sim, mesmo se o site for para você mesmo. Isto pode variar bastante de complexidade, mas o ideal é saber a resposta de algumas perguntas básicas sobre o tipo de conteúdo que você pretende apresentar para o mundo. O que você pretende exibir na página inicial? Notícias? Serviços? Produtos? Imagens? Qual o tamanho médio dos textos? Existirá um espaço destinado a anúncios publicitários? Qual é o formato do logotipo? Com estas respostas em mãos esta na hora de organizar todos estes elementos em uma estrutura lógica.&lt;/p&gt;

&lt;p&gt;Vamos então projetar um layout de uma página inicial de uma empresa fictícia que deve conter as seguintes informações:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;logotipo&lt;/li&gt;
&lt;li&gt;navegação&lt;/li&gt;
&lt;li&gt;banner apresentando produtos e serviços&lt;/li&gt;
&lt;li&gt;blocos com imagens e textos curtos&lt;/li&gt;
&lt;li&gt;créditos&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;por-onde-começar-o-layout&#34;&gt;Por onde começar o layout?&lt;/h2&gt;

&lt;p&gt;A resposta é bem simples. Pelo papel. Não importa se você vai usar um bloco de notas velho, o verso de um guardanapo, um &lt;a href=&#34;http://sneakpeekit.com/&#34; title=&#34;Sneakpeekit&#34;&gt;template impresso da internet&lt;/a&gt; ou um &lt;a href=&#34;http://appsketchbook.com/&#34; title=&#34;App Sketchbook&#34;&gt;caderno especialmente projetado&lt;/a&gt; para este fim, comece por um rascunho de wireframe no papel. Eu costumo desenhar basicamente duas coisas. Uma teia de navegação (&amp;#8220;Que-link-leva-para-onde&amp;#8221;) e o esqueleto básico do site. Não precisa ficar bonito. Minha habilidade para desenho se resume em bonecos de palito e partidas de Drawsome com estranhos da internet. Ainda assim é fácil criar um wireframe. Use quadrados para imagens e linhas para texto. O importante é você &amp;#8211; e o resto da sua equipe se for o caso &amp;#8211; terem um ponto de partida. O ideal é criar ao menos três versões principais: desktops, tablets e smartphones. Estas categorias são meio utópicas já que existem centenas de dispositivos que ficam no meio termo, mas você precisa ter um ponto de partida, certo? Escolher por qual dos três esqueletos começar é uma questão bem pessoal. Alguns advogam firmemente o mobile first, mas aqui por uma questão de didática vou começar pelo desktop.&lt;/p&gt;

&lt;h2 id=&#34;grids-são-seus-amigos&#34;&gt;Grids são seus amigos&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é basicamente como montar um quebra cabeça onde você pode esticar, encolher, quebrar e dobrar estruturas. Realizar esta tarefa será muito mais fácil se você construir um layout sustentado por um grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Não é absolutamente necessário utilizar um grid em seu CSS (embora seja uma prática recomendável), mas se o seu wireframe básico estiver organizado neste formato ajuda bastante na hora de projetar o design de maneira mais fluida, simétrica e organizada. Isto por que você pode simplesmente re-arranjar os blocos e colunas do seu layout de maneira mais lógica e matemática, o que vai refletir em uma maior coesão do design final.&lt;/p&gt;

&lt;p&gt;Esta parte do fluxo de trabalho é bem parecida com criar um layout para design &amp;#8220;normal&amp;#8221;. O primeiro passo portanto é criar o tal do grid, basicamente um conjunto de linhas &amp;#8220;invisiveis&amp;#8221; que vão sustentar o seu design. Pense que você vai ter que quebrar esta estrutura em pedaços menores e, para manter a simetria o ideal é escolher um número par que possa ser divisível por 2, 3 e/ou 4&amp;#8230; Por isto grids de 12, 16, 18 ou 24 colunas são bem comuns. (Você pode escolher o número que quiser. Eu mesma já trabalhei com 14 colunas. Deu mais trabalho. Não diga que não avisei&amp;#8230; ). Não se esqueça do espaço das margens entre as colunas.&lt;/p&gt;

&lt;h2 id=&#34;o-wireframe&#34;&gt;O wireframe&lt;/h2&gt;

&lt;p&gt;Se você precisar reescrever completamente todos os elementos do CSS você está fazendo design adaptativo, o que tem seus métodos mas não é responsivo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é focado na economia. Economia de tempo, economia de peso de arquivos, economia de código. Pense em escrever estruturas que, embora sofram adaptações, possam ser re-aproveitadas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;desktops&#34;&gt;Desktops&lt;/h3&gt;

&lt;p&gt;Este é o exemplo de wireframe que vamos criar passo-a-passo para o nosso exemplo. A estrutura é bem simples: um logotipo no canto superior esquerdo, um menu no topo a direita, um banner, 4 destaques com texto e foto e um rodapé.&lt;/p&gt;

&lt;p&gt;Este é o meu rascunho inicial:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27002&#34; alt=&#34;wireframe-sketch&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-sketch1.jpg&#34; width=&#34;660&#34; height=&#34;708&#34; srcset=&#34;uploads/2013/04/wireframe-sketch1.jpg 660w, uploads/2013/04/wireframe-sketch1-156x168.jpg 156w, uploads/2013/04/wireframe-sketch1-288x310.jpg 288w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora o mesmo modelo recriado no Photoshop:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27021&#34; alt=&#34;wireframe-desktop&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-desktop.jpg&#34; width=&#34;660&#34; height=&#34;666&#34; srcset=&#34;uploads/2013/04/wireframe-desktop.jpg 660w, uploads/2013/04/wireframe-desktop-166x168.jpg 166w, uploads/2013/04/wireframe-desktop-307x310.jpg 307w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;tablets&#34;&gt;Tablets&lt;/h3&gt;

&lt;p&gt;A técnica para adaptar esta estrutura para as outras versões é simples. Diminua o número de colunas no grid. Se inicialmente tinhamos 16 colunas no desktop, teremos 10 no tablet e 4 no smartphone, por exemplo. O conteúdo deve se re-arranjar para caber nesta estrutura menor. Então no tablet ao invés de 4 destaques lado-a-lado temos 2 fileiras com 2 destaques cada. Para adequar-se a estas mudanças as imagens ficaram maiores. Outra modificação foi um ajuste  no tamanho do texto do menu.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26973&#34; alt=&#34;wireframe-tablet&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-tablet.jpg&#34; width=&#34;660&#34; height=&#34;894&#34; srcset=&#34;uploads/2013/04/wireframe-tablet.jpg 660w, uploads/2013/04/wireframe-tablet-124x168.jpg 124w, uploads/2013/04/wireframe-tablet-228x310.jpg 228w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;smartphones&#34;&gt;Smartphones&lt;/h3&gt;

&lt;p&gt;Como a tela dos smartphones é ainda menor, é necessário re-arranjar as estruturas novamente e fazer alguns outros ajustes. Isto não significa necessariamente diminuir os elementos de tamanho. Lembre-se que a maior parte dos dispositivos móveis utilizam touch screens. Você deve adaptar os elementos considerando esta área de toque. Links muito pequenos e juntinhos são difíceis selecionar. O ideal é que o usuário possa navegar no site sem precisar dar zoom. Por isto optei por colapsar os elementos em um menu drop-down. Os destaques agora ocupam o espaço total do wrap. Optei por juntar os 4 destaques em uma navegação estilo slider (navegáveis através de seletores em forma de &amp;#8220;bolinhas&amp;#8221;). Outra mudança estetica significativa foi o banner. Como pretendo incluir texto em HTML  com os serviços principais da empresa optei por deixa-lo em uma caixa preta abaixo da foto. Desta maneira as imagens ficam mais visíveis e o formato não prejudica a leitura do texto.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26972&#34; alt=&#34;wireframe-smartphone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-smartphone.jpg&#34; width=&#34;660&#34; height=&#34;1102&#34; srcset=&#34;uploads/2013/04/wireframe-smartphone.jpg 660w, uploads/2013/04/wireframe-smartphone-100x168.jpg 100w, uploads/2013/04/wireframe-smartphone-185x310.jpg 185w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resoluções&#34;&gt;Resoluções&lt;/h2&gt;

&lt;p&gt;Existem dezenas de resoluções diferentes e, embora este seja o objetivo final, é bem difícil ter um layout que vai ficar perfeito a cada ponto de quebra (difícil, não impossível). O ideal, portanto, é ter em mente quais são os formatos mais comuns e focalizar para que ao menos nestes estágios o design esteja funcionando perfeitamente. Considere portanto estas resoluções básicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1200 pixels &amp;#8211; Desktops com monitores widescreen.&lt;/li&gt;
&lt;li&gt;960 pixels &amp;#8211; Tablets em formato paisagem e monitores antigos.&lt;/li&gt;
&lt;li&gt;768 pixels &amp;#8211; Tablets em formato retrato.&lt;/li&gt;
&lt;li&gt;480 pixels &amp;#8211; Smartphones em formato paisagem.&lt;/li&gt;
&lt;li&gt;320 pixels &amp;#8211; Smartphones em formato retrato.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para testar o seu HTML final em diferentes resoluções você pode utilizar algum add-on ou &lt;a href=&#34;http://seesparkbox.com/foundry/media_query_bookmarklet&#34; title=&#34;Media Query Bookmarklet&#34;&gt;bookmarklet&lt;/a&gt; para o seu browser. Outra dica super prática é um [Você já convenceu o seu chefe ou cliente que &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34; title=&#34;O que é Design Responsivo?&#34;&gt;Design Responsivo&lt;/a&gt; é a última bolacha de chocolate do pacote, já sabe como trabalhar com media queries e como desenvolver códigos bonitos, semânticos e cheirosos. Mas a dúvida ainda persiste &amp;#8211; por onde começar? Você não está sozinho. Esta é uma dúvida bem frequente. Por isto resolvi escrever um artigo básico só com dicas de prototipagem para design responsivo coletando algumas ferramentas úteis, artigos interessantes e comentando também um pouco da minha experiência pessoal ao lidar com o assunto no dia-a-dia gerindo um pequeno estúdio de webdesign.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos criar juntos um layout do wireframe ao design final. Assim você poderá acompanhar um processo passo-a-passo e adapta-lo para o seu fluxo de trabalho pessoal. Não tenho a pretensão de criar um guia definitivo, nem comentar técnicas de desenvolvimento mais avançadas. Mas tenho certeza que estas dicas vão ser um bom ponto de partida para você iniciar o seu projeto. Vamos a elas!&lt;/p&gt;

&lt;h2 id=&#34;o-conteúdo-é-o-rei-1&#34;&gt;O conteúdo é o rei&lt;/h2&gt;

&lt;p&gt;O primeiro passo para projetar &amp;#8211; não apenas um site responsivo, mas qualquer layout para a internet &amp;#8211; é o inventório de conteúdo. É ele que vai ditar qual é a melhor estrutura para o layout. Raramente o seu cliente vai possuir os textos, videos e imagens finais prontinhos para você diagramar. Mas o ideal é sempre ter ao menos uma noção de qual é o &lt;strong&gt;tipo&lt;/strong&gt; de conteúdo que você pretende utilizar. Para isto é importante montar um briefing &amp;#8211; sim, mesmo se o site for para você mesmo. Isto pode variar bastante de complexidade, mas o ideal é saber a resposta de algumas perguntas básicas sobre o tipo de conteúdo que você pretende apresentar para o mundo. O que você pretende exibir na página inicial? Notícias? Serviços? Produtos? Imagens? Qual o tamanho médio dos textos? Existirá um espaço destinado a anúncios publicitários? Qual é o formato do logotipo? Com estas respostas em mãos esta na hora de organizar todos estes elementos em uma estrutura lógica.&lt;/p&gt;

&lt;p&gt;Vamos então projetar um layout de uma página inicial de uma empresa fictícia que deve conter as seguintes informações:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;logotipo&lt;/li&gt;
&lt;li&gt;navegação&lt;/li&gt;
&lt;li&gt;banner apresentando produtos e serviços&lt;/li&gt;
&lt;li&gt;blocos com imagens e textos curtos&lt;/li&gt;
&lt;li&gt;créditos&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;por-onde-começar-o-layout-1&#34;&gt;Por onde começar o layout?&lt;/h2&gt;

&lt;p&gt;A resposta é bem simples. Pelo papel. Não importa se você vai usar um bloco de notas velho, o verso de um guardanapo, um &lt;a href=&#34;http://sneakpeekit.com/&#34; title=&#34;Sneakpeekit&#34;&gt;template impresso da internet&lt;/a&gt; ou um &lt;a href=&#34;http://appsketchbook.com/&#34; title=&#34;App Sketchbook&#34;&gt;caderno especialmente projetado&lt;/a&gt; para este fim, comece por um rascunho de wireframe no papel. Eu costumo desenhar basicamente duas coisas. Uma teia de navegação (&amp;#8220;Que-link-leva-para-onde&amp;#8221;) e o esqueleto básico do site. Não precisa ficar bonito. Minha habilidade para desenho se resume em bonecos de palito e partidas de Drawsome com estranhos da internet. Ainda assim é fácil criar um wireframe. Use quadrados para imagens e linhas para texto. O importante é você &amp;#8211; e o resto da sua equipe se for o caso &amp;#8211; terem um ponto de partida. O ideal é criar ao menos três versões principais: desktops, tablets e smartphones. Estas categorias são meio utópicas já que existem centenas de dispositivos que ficam no meio termo, mas você precisa ter um ponto de partida, certo? Escolher por qual dos três esqueletos começar é uma questão bem pessoal. Alguns advogam firmemente o mobile first, mas aqui por uma questão de didática vou começar pelo desktop.&lt;/p&gt;

&lt;h2 id=&#34;grids-são-seus-amigos-1&#34;&gt;Grids são seus amigos&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é basicamente como montar um quebra cabeça onde você pode esticar, encolher, quebrar e dobrar estruturas. Realizar esta tarefa será muito mais fácil se você construir um layout sustentado por um grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Não é absolutamente necessário utilizar um grid em seu CSS (embora seja uma prática recomendável), mas se o seu wireframe básico estiver organizado neste formato ajuda bastante na hora de projetar o design de maneira mais fluida, simétrica e organizada. Isto por que você pode simplesmente re-arranjar os blocos e colunas do seu layout de maneira mais lógica e matemática, o que vai refletir em uma maior coesão do design final.&lt;/p&gt;

&lt;p&gt;Esta parte do fluxo de trabalho é bem parecida com criar um layout para design &amp;#8220;normal&amp;#8221;. O primeiro passo portanto é criar o tal do grid, basicamente um conjunto de linhas &amp;#8220;invisiveis&amp;#8221; que vão sustentar o seu design. Pense que você vai ter que quebrar esta estrutura em pedaços menores e, para manter a simetria o ideal é escolher um número par que possa ser divisível por 2, 3 e/ou 4&amp;#8230; Por isto grids de 12, 16, 18 ou 24 colunas são bem comuns. (Você pode escolher o número que quiser. Eu mesma já trabalhei com 14 colunas. Deu mais trabalho. Não diga que não avisei&amp;#8230; ). Não se esqueça do espaço das margens entre as colunas.&lt;/p&gt;

&lt;h2 id=&#34;o-wireframe-1&#34;&gt;O wireframe&lt;/h2&gt;

&lt;p&gt;Se você precisar reescrever completamente todos os elementos do CSS você está fazendo design adaptativo, o que tem seus métodos mas não é responsivo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é focado na economia. Economia de tempo, economia de peso de arquivos, economia de código. Pense em escrever estruturas que, embora sofram adaptações, possam ser re-aproveitadas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;desktops-1&#34;&gt;Desktops&lt;/h3&gt;

&lt;p&gt;Este é o exemplo de wireframe que vamos criar passo-a-passo para o nosso exemplo. A estrutura é bem simples: um logotipo no canto superior esquerdo, um menu no topo a direita, um banner, 4 destaques com texto e foto e um rodapé.&lt;/p&gt;

&lt;p&gt;Este é o meu rascunho inicial:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27002&#34; alt=&#34;wireframe-sketch&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-sketch1.jpg&#34; width=&#34;660&#34; height=&#34;708&#34; srcset=&#34;uploads/2013/04/wireframe-sketch1.jpg 660w, uploads/2013/04/wireframe-sketch1-156x168.jpg 156w, uploads/2013/04/wireframe-sketch1-288x310.jpg 288w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora o mesmo modelo recriado no Photoshop:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27021&#34; alt=&#34;wireframe-desktop&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-desktop.jpg&#34; width=&#34;660&#34; height=&#34;666&#34; srcset=&#34;uploads/2013/04/wireframe-desktop.jpg 660w, uploads/2013/04/wireframe-desktop-166x168.jpg 166w, uploads/2013/04/wireframe-desktop-307x310.jpg 307w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;tablets-1&#34;&gt;Tablets&lt;/h3&gt;

&lt;p&gt;A técnica para adaptar esta estrutura para as outras versões é simples. Diminua o número de colunas no grid. Se inicialmente tinhamos 16 colunas no desktop, teremos 10 no tablet e 4 no smartphone, por exemplo. O conteúdo deve se re-arranjar para caber nesta estrutura menor. Então no tablet ao invés de 4 destaques lado-a-lado temos 2 fileiras com 2 destaques cada. Para adequar-se a estas mudanças as imagens ficaram maiores. Outra modificação foi um ajuste  no tamanho do texto do menu.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26973&#34; alt=&#34;wireframe-tablet&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-tablet.jpg&#34; width=&#34;660&#34; height=&#34;894&#34; srcset=&#34;uploads/2013/04/wireframe-tablet.jpg 660w, uploads/2013/04/wireframe-tablet-124x168.jpg 124w, uploads/2013/04/wireframe-tablet-228x310.jpg 228w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;smartphones-1&#34;&gt;Smartphones&lt;/h3&gt;

&lt;p&gt;Como a tela dos smartphones é ainda menor, é necessário re-arranjar as estruturas novamente e fazer alguns outros ajustes. Isto não significa necessariamente diminuir os elementos de tamanho. Lembre-se que a maior parte dos dispositivos móveis utilizam touch screens. Você deve adaptar os elementos considerando esta área de toque. Links muito pequenos e juntinhos são difíceis selecionar. O ideal é que o usuário possa navegar no site sem precisar dar zoom. Por isto optei por colapsar os elementos em um menu drop-down. Os destaques agora ocupam o espaço total do wrap. Optei por juntar os 4 destaques em uma navegação estilo slider (navegáveis através de seletores em forma de &amp;#8220;bolinhas&amp;#8221;). Outra mudança estetica significativa foi o banner. Como pretendo incluir texto em HTML  com os serviços principais da empresa optei por deixa-lo em uma caixa preta abaixo da foto. Desta maneira as imagens ficam mais visíveis e o formato não prejudica a leitura do texto.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26972&#34; alt=&#34;wireframe-smartphone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-smartphone.jpg&#34; width=&#34;660&#34; height=&#34;1102&#34; srcset=&#34;uploads/2013/04/wireframe-smartphone.jpg 660w, uploads/2013/04/wireframe-smartphone-100x168.jpg 100w, uploads/2013/04/wireframe-smartphone-185x310.jpg 185w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resoluções-1&#34;&gt;Resoluções&lt;/h2&gt;

&lt;p&gt;Existem dezenas de resoluções diferentes e, embora este seja o objetivo final, é bem difícil ter um layout que vai ficar perfeito a cada ponto de quebra (difícil, não impossível). O ideal, portanto, é ter em mente quais são os formatos mais comuns e focalizar para que ao menos nestes estágios o design esteja funcionando perfeitamente. Considere portanto estas resoluções básicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1200 pixels &amp;#8211; Desktops com monitores widescreen.&lt;/li&gt;
&lt;li&gt;960 pixels &amp;#8211; Tablets em formato paisagem e monitores antigos.&lt;/li&gt;
&lt;li&gt;768 pixels &amp;#8211; Tablets em formato retrato.&lt;/li&gt;
&lt;li&gt;480 pixels &amp;#8211; Smartphones em formato paisagem.&lt;/li&gt;
&lt;li&gt;320 pixels &amp;#8211; Smartphones em formato retrato.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para testar o seu HTML final em diferentes resoluções você pode utilizar algum add-on ou &lt;a href=&#34;http://seesparkbox.com/foundry/media_query_bookmarklet&#34; title=&#34;Media Query Bookmarklet&#34;&gt;bookmarklet&lt;/a&gt; para o seu browser. Outra dica super prática é um]&lt;a href=&#34;http://www.envisionsuccess.net/images/responsive-guide.jpg&#34; title=&#34;Responsive Guide Wallpaper&#34;&gt;5&lt;/a&gt; com marcações em pixels.&lt;/p&gt;

&lt;h2 id=&#34;o-mock-up&#34;&gt;O mock-up&lt;/h2&gt;

&lt;p&gt;Hora de criar esta estrutura no seu programa gráfico favorito. Você pode montar o seu próprio grid utilizando linhas guias ou baixar um modelo pronto como o &lt;a href=&#34;http://dribbble.com/shots/410635-Responsive-Grid-PSD/&#34; title=&#34;Responsive Grid PSD&#34;&gt;Responsive Grid PSD&lt;/a&gt; ou o &lt;a href=&#34;http://framelessgrid.com/&#34; title=&#34;Frameless&#34;&gt;Frameless&lt;/a&gt;. Para este tutorial utilizei uma versão modificada do Frameless que você pode &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/04/grid.zip&#34; title=&#34;Grid&#34;&gt;baixar aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;nota-sobre-retina-display&#34;&gt;Nota sobre retina display&lt;/h3&gt;

&lt;p&gt;É importante ter em mente que alguns aparelhos tem a densidade de pixels superior a 1. É interessante, em termos de qualidade de apresentação do layout, criar um arquivo com o dobro da resolução nestes casos. Então dobre o tamanho do seu PSD na versão para smartphones (o que significa um mockup de 960x640px). Assim, na hora de exportar os elementos, você pode criar imagens em alta resolução para dispositivos retina.&lt;/p&gt;

&lt;h3 id=&#34;apresentação&#34;&gt;Apresentação&lt;/h3&gt;

&lt;p&gt;Na minha empresa criamos modelos estáticos para serem aprovados pelos clientes antes de partirmos para etapa de desenvolvimento do HTML/CSS. Na minha experiência, mesmo se nenhum conteúdo for fornecido previamente, fazer um esforcinho a mais e utilizar imagens e textos parecidas com as finais ajudar o seu layout a ser aprovado. Isto acontece por que, ao contrário de nós designers e desenvolvedores, as pessoas &amp;#8220;normais&amp;#8221; possuem naturalmente uma certa dificuldade de abstrair que aqueles quadrados e caixinhas são um site. Adicionar imagens e textos a um tema pode dar mais trabalho, mas é acrescentar contexto e propósito ao seu design, o que por sua vez causa muito mais empatia e identificação.&lt;/p&gt;

&lt;p&gt;Para o nosso exemplo criei a empresa fictícia Space Tour.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26991&#34; alt=&#34;wifreframe&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wifreframe.jpg&#34; width=&#34;660&#34; height=&#34;672&#34; srcset=&#34;uploads/2013/04/wifreframe.jpg 660w, uploads/2013/04/wifreframe-165x168.jpg 165w, uploads/2013/04/wifreframe-304x310.jpg 304w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mesmo com um conteúdo falso aplicado ainda é difícil de imaginar como o produto final vai se comportar online, principalmente no caso de dispositivos móveis. Para que o cliente possa visualizar como o layout vai se comportar é interessante utilizar mock-ups de hardwares reais. Basta procurar no Google que existem diversos recursos gratuitos para este fim. O site &lt;a href=&#34;http://www.psdcovers.com/&#34; title=&#34;PSD Covers&#34;&gt;PSD Covers&lt;/a&gt;, por exemplo, possui actions e templates de Photoshop em alta resolução que podem ajudar bastante na apresentação final. O [Você já convenceu o seu chefe ou cliente que &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34; title=&#34;O que é Design Responsivo?&#34;&gt;Design Responsivo&lt;/a&gt; é a última bolacha de chocolate do pacote, já sabe como trabalhar com media queries e como desenvolver códigos bonitos, semânticos e cheirosos. Mas a dúvida ainda persiste &amp;#8211; por onde começar? Você não está sozinho. Esta é uma dúvida bem frequente. Por isto resolvi escrever um artigo básico só com dicas de prototipagem para design responsivo coletando algumas ferramentas úteis, artigos interessantes e comentando também um pouco da minha experiência pessoal ao lidar com o assunto no dia-a-dia gerindo um pequeno estúdio de webdesign.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos criar juntos um layout do wireframe ao design final. Assim você poderá acompanhar um processo passo-a-passo e adapta-lo para o seu fluxo de trabalho pessoal. Não tenho a pretensão de criar um guia definitivo, nem comentar técnicas de desenvolvimento mais avançadas. Mas tenho certeza que estas dicas vão ser um bom ponto de partida para você iniciar o seu projeto. Vamos a elas!&lt;/p&gt;

&lt;h2 id=&#34;o-conteúdo-é-o-rei-2&#34;&gt;O conteúdo é o rei&lt;/h2&gt;

&lt;p&gt;O primeiro passo para projetar &amp;#8211; não apenas um site responsivo, mas qualquer layout para a internet &amp;#8211; é o inventório de conteúdo. É ele que vai ditar qual é a melhor estrutura para o layout. Raramente o seu cliente vai possuir os textos, videos e imagens finais prontinhos para você diagramar. Mas o ideal é sempre ter ao menos uma noção de qual é o &lt;strong&gt;tipo&lt;/strong&gt; de conteúdo que você pretende utilizar. Para isto é importante montar um briefing &amp;#8211; sim, mesmo se o site for para você mesmo. Isto pode variar bastante de complexidade, mas o ideal é saber a resposta de algumas perguntas básicas sobre o tipo de conteúdo que você pretende apresentar para o mundo. O que você pretende exibir na página inicial? Notícias? Serviços? Produtos? Imagens? Qual o tamanho médio dos textos? Existirá um espaço destinado a anúncios publicitários? Qual é o formato do logotipo? Com estas respostas em mãos esta na hora de organizar todos estes elementos em uma estrutura lógica.&lt;/p&gt;

&lt;p&gt;Vamos então projetar um layout de uma página inicial de uma empresa fictícia que deve conter as seguintes informações:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;logotipo&lt;/li&gt;
&lt;li&gt;navegação&lt;/li&gt;
&lt;li&gt;banner apresentando produtos e serviços&lt;/li&gt;
&lt;li&gt;blocos com imagens e textos curtos&lt;/li&gt;
&lt;li&gt;créditos&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;por-onde-começar-o-layout-2&#34;&gt;Por onde começar o layout?&lt;/h2&gt;

&lt;p&gt;A resposta é bem simples. Pelo papel. Não importa se você vai usar um bloco de notas velho, o verso de um guardanapo, um &lt;a href=&#34;http://sneakpeekit.com/&#34; title=&#34;Sneakpeekit&#34;&gt;template impresso da internet&lt;/a&gt; ou um &lt;a href=&#34;http://appsketchbook.com/&#34; title=&#34;App Sketchbook&#34;&gt;caderno especialmente projetado&lt;/a&gt; para este fim, comece por um rascunho de wireframe no papel. Eu costumo desenhar basicamente duas coisas. Uma teia de navegação (&amp;#8220;Que-link-leva-para-onde&amp;#8221;) e o esqueleto básico do site. Não precisa ficar bonito. Minha habilidade para desenho se resume em bonecos de palito e partidas de Drawsome com estranhos da internet. Ainda assim é fácil criar um wireframe. Use quadrados para imagens e linhas para texto. O importante é você &amp;#8211; e o resto da sua equipe se for o caso &amp;#8211; terem um ponto de partida. O ideal é criar ao menos três versões principais: desktops, tablets e smartphones. Estas categorias são meio utópicas já que existem centenas de dispositivos que ficam no meio termo, mas você precisa ter um ponto de partida, certo? Escolher por qual dos três esqueletos começar é uma questão bem pessoal. Alguns advogam firmemente o mobile first, mas aqui por uma questão de didática vou começar pelo desktop.&lt;/p&gt;

&lt;h2 id=&#34;grids-são-seus-amigos-2&#34;&gt;Grids são seus amigos&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é basicamente como montar um quebra cabeça onde você pode esticar, encolher, quebrar e dobrar estruturas. Realizar esta tarefa será muito mais fácil se você construir um layout sustentado por um grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Não é absolutamente necessário utilizar um grid em seu CSS (embora seja uma prática recomendável), mas se o seu wireframe básico estiver organizado neste formato ajuda bastante na hora de projetar o design de maneira mais fluida, simétrica e organizada. Isto por que você pode simplesmente re-arranjar os blocos e colunas do seu layout de maneira mais lógica e matemática, o que vai refletir em uma maior coesão do design final.&lt;/p&gt;

&lt;p&gt;Esta parte do fluxo de trabalho é bem parecida com criar um layout para design &amp;#8220;normal&amp;#8221;. O primeiro passo portanto é criar o tal do grid, basicamente um conjunto de linhas &amp;#8220;invisiveis&amp;#8221; que vão sustentar o seu design. Pense que você vai ter que quebrar esta estrutura em pedaços menores e, para manter a simetria o ideal é escolher um número par que possa ser divisível por 2, 3 e/ou 4&amp;#8230; Por isto grids de 12, 16, 18 ou 24 colunas são bem comuns. (Você pode escolher o número que quiser. Eu mesma já trabalhei com 14 colunas. Deu mais trabalho. Não diga que não avisei&amp;#8230; ). Não se esqueça do espaço das margens entre as colunas.&lt;/p&gt;

&lt;h2 id=&#34;o-wireframe-2&#34;&gt;O wireframe&lt;/h2&gt;

&lt;p&gt;Se você precisar reescrever completamente todos os elementos do CSS você está fazendo design adaptativo, o que tem seus métodos mas não é responsivo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é focado na economia. Economia de tempo, economia de peso de arquivos, economia de código. Pense em escrever estruturas que, embora sofram adaptações, possam ser re-aproveitadas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;desktops-2&#34;&gt;Desktops&lt;/h3&gt;

&lt;p&gt;Este é o exemplo de wireframe que vamos criar passo-a-passo para o nosso exemplo. A estrutura é bem simples: um logotipo no canto superior esquerdo, um menu no topo a direita, um banner, 4 destaques com texto e foto e um rodapé.&lt;/p&gt;

&lt;p&gt;Este é o meu rascunho inicial:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27002&#34; alt=&#34;wireframe-sketch&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-sketch1.jpg&#34; width=&#34;660&#34; height=&#34;708&#34; srcset=&#34;uploads/2013/04/wireframe-sketch1.jpg 660w, uploads/2013/04/wireframe-sketch1-156x168.jpg 156w, uploads/2013/04/wireframe-sketch1-288x310.jpg 288w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora o mesmo modelo recriado no Photoshop:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27021&#34; alt=&#34;wireframe-desktop&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-desktop.jpg&#34; width=&#34;660&#34; height=&#34;666&#34; srcset=&#34;uploads/2013/04/wireframe-desktop.jpg 660w, uploads/2013/04/wireframe-desktop-166x168.jpg 166w, uploads/2013/04/wireframe-desktop-307x310.jpg 307w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;tablets-2&#34;&gt;Tablets&lt;/h3&gt;

&lt;p&gt;A técnica para adaptar esta estrutura para as outras versões é simples. Diminua o número de colunas no grid. Se inicialmente tinhamos 16 colunas no desktop, teremos 10 no tablet e 4 no smartphone, por exemplo. O conteúdo deve se re-arranjar para caber nesta estrutura menor. Então no tablet ao invés de 4 destaques lado-a-lado temos 2 fileiras com 2 destaques cada. Para adequar-se a estas mudanças as imagens ficaram maiores. Outra modificação foi um ajuste  no tamanho do texto do menu.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26973&#34; alt=&#34;wireframe-tablet&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-tablet.jpg&#34; width=&#34;660&#34; height=&#34;894&#34; srcset=&#34;uploads/2013/04/wireframe-tablet.jpg 660w, uploads/2013/04/wireframe-tablet-124x168.jpg 124w, uploads/2013/04/wireframe-tablet-228x310.jpg 228w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;smartphones-2&#34;&gt;Smartphones&lt;/h3&gt;

&lt;p&gt;Como a tela dos smartphones é ainda menor, é necessário re-arranjar as estruturas novamente e fazer alguns outros ajustes. Isto não significa necessariamente diminuir os elementos de tamanho. Lembre-se que a maior parte dos dispositivos móveis utilizam touch screens. Você deve adaptar os elementos considerando esta área de toque. Links muito pequenos e juntinhos são difíceis selecionar. O ideal é que o usuário possa navegar no site sem precisar dar zoom. Por isto optei por colapsar os elementos em um menu drop-down. Os destaques agora ocupam o espaço total do wrap. Optei por juntar os 4 destaques em uma navegação estilo slider (navegáveis através de seletores em forma de &amp;#8220;bolinhas&amp;#8221;). Outra mudança estetica significativa foi o banner. Como pretendo incluir texto em HTML  com os serviços principais da empresa optei por deixa-lo em uma caixa preta abaixo da foto. Desta maneira as imagens ficam mais visíveis e o formato não prejudica a leitura do texto.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26972&#34; alt=&#34;wireframe-smartphone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-smartphone.jpg&#34; width=&#34;660&#34; height=&#34;1102&#34; srcset=&#34;uploads/2013/04/wireframe-smartphone.jpg 660w, uploads/2013/04/wireframe-smartphone-100x168.jpg 100w, uploads/2013/04/wireframe-smartphone-185x310.jpg 185w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resoluções-2&#34;&gt;Resoluções&lt;/h2&gt;

&lt;p&gt;Existem dezenas de resoluções diferentes e, embora este seja o objetivo final, é bem difícil ter um layout que vai ficar perfeito a cada ponto de quebra (difícil, não impossível). O ideal, portanto, é ter em mente quais são os formatos mais comuns e focalizar para que ao menos nestes estágios o design esteja funcionando perfeitamente. Considere portanto estas resoluções básicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1200 pixels &amp;#8211; Desktops com monitores widescreen.&lt;/li&gt;
&lt;li&gt;960 pixels &amp;#8211; Tablets em formato paisagem e monitores antigos.&lt;/li&gt;
&lt;li&gt;768 pixels &amp;#8211; Tablets em formato retrato.&lt;/li&gt;
&lt;li&gt;480 pixels &amp;#8211; Smartphones em formato paisagem.&lt;/li&gt;
&lt;li&gt;320 pixels &amp;#8211; Smartphones em formato retrato.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para testar o seu HTML final em diferentes resoluções você pode utilizar algum add-on ou &lt;a href=&#34;http://seesparkbox.com/foundry/media_query_bookmarklet&#34; title=&#34;Media Query Bookmarklet&#34;&gt;bookmarklet&lt;/a&gt; para o seu browser. Outra dica super prática é um [Você já convenceu o seu chefe ou cliente que &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34; title=&#34;O que é Design Responsivo?&#34;&gt;Design Responsivo&lt;/a&gt; é a última bolacha de chocolate do pacote, já sabe como trabalhar com media queries e como desenvolver códigos bonitos, semânticos e cheirosos. Mas a dúvida ainda persiste &amp;#8211; por onde começar? Você não está sozinho. Esta é uma dúvida bem frequente. Por isto resolvi escrever um artigo básico só com dicas de prototipagem para design responsivo coletando algumas ferramentas úteis, artigos interessantes e comentando também um pouco da minha experiência pessoal ao lidar com o assunto no dia-a-dia gerindo um pequeno estúdio de webdesign.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos criar juntos um layout do wireframe ao design final. Assim você poderá acompanhar um processo passo-a-passo e adapta-lo para o seu fluxo de trabalho pessoal. Não tenho a pretensão de criar um guia definitivo, nem comentar técnicas de desenvolvimento mais avançadas. Mas tenho certeza que estas dicas vão ser um bom ponto de partida para você iniciar o seu projeto. Vamos a elas!&lt;/p&gt;

&lt;h2 id=&#34;o-conteúdo-é-o-rei-3&#34;&gt;O conteúdo é o rei&lt;/h2&gt;

&lt;p&gt;O primeiro passo para projetar &amp;#8211; não apenas um site responsivo, mas qualquer layout para a internet &amp;#8211; é o inventório de conteúdo. É ele que vai ditar qual é a melhor estrutura para o layout. Raramente o seu cliente vai possuir os textos, videos e imagens finais prontinhos para você diagramar. Mas o ideal é sempre ter ao menos uma noção de qual é o &lt;strong&gt;tipo&lt;/strong&gt; de conteúdo que você pretende utilizar. Para isto é importante montar um briefing &amp;#8211; sim, mesmo se o site for para você mesmo. Isto pode variar bastante de complexidade, mas o ideal é saber a resposta de algumas perguntas básicas sobre o tipo de conteúdo que você pretende apresentar para o mundo. O que você pretende exibir na página inicial? Notícias? Serviços? Produtos? Imagens? Qual o tamanho médio dos textos? Existirá um espaço destinado a anúncios publicitários? Qual é o formato do logotipo? Com estas respostas em mãos esta na hora de organizar todos estes elementos em uma estrutura lógica.&lt;/p&gt;

&lt;p&gt;Vamos então projetar um layout de uma página inicial de uma empresa fictícia que deve conter as seguintes informações:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;logotipo&lt;/li&gt;
&lt;li&gt;navegação&lt;/li&gt;
&lt;li&gt;banner apresentando produtos e serviços&lt;/li&gt;
&lt;li&gt;blocos com imagens e textos curtos&lt;/li&gt;
&lt;li&gt;créditos&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;por-onde-começar-o-layout-3&#34;&gt;Por onde começar o layout?&lt;/h2&gt;

&lt;p&gt;A resposta é bem simples. Pelo papel. Não importa se você vai usar um bloco de notas velho, o verso de um guardanapo, um &lt;a href=&#34;http://sneakpeekit.com/&#34; title=&#34;Sneakpeekit&#34;&gt;template impresso da internet&lt;/a&gt; ou um &lt;a href=&#34;http://appsketchbook.com/&#34; title=&#34;App Sketchbook&#34;&gt;caderno especialmente projetado&lt;/a&gt; para este fim, comece por um rascunho de wireframe no papel. Eu costumo desenhar basicamente duas coisas. Uma teia de navegação (&amp;#8220;Que-link-leva-para-onde&amp;#8221;) e o esqueleto básico do site. Não precisa ficar bonito. Minha habilidade para desenho se resume em bonecos de palito e partidas de Drawsome com estranhos da internet. Ainda assim é fácil criar um wireframe. Use quadrados para imagens e linhas para texto. O importante é você &amp;#8211; e o resto da sua equipe se for o caso &amp;#8211; terem um ponto de partida. O ideal é criar ao menos três versões principais: desktops, tablets e smartphones. Estas categorias são meio utópicas já que existem centenas de dispositivos que ficam no meio termo, mas você precisa ter um ponto de partida, certo? Escolher por qual dos três esqueletos começar é uma questão bem pessoal. Alguns advogam firmemente o mobile first, mas aqui por uma questão de didática vou começar pelo desktop.&lt;/p&gt;

&lt;h2 id=&#34;grids-são-seus-amigos-3&#34;&gt;Grids são seus amigos&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é basicamente como montar um quebra cabeça onde você pode esticar, encolher, quebrar e dobrar estruturas. Realizar esta tarefa será muito mais fácil se você construir um layout sustentado por um grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Não é absolutamente necessário utilizar um grid em seu CSS (embora seja uma prática recomendável), mas se o seu wireframe básico estiver organizado neste formato ajuda bastante na hora de projetar o design de maneira mais fluida, simétrica e organizada. Isto por que você pode simplesmente re-arranjar os blocos e colunas do seu layout de maneira mais lógica e matemática, o que vai refletir em uma maior coesão do design final.&lt;/p&gt;

&lt;p&gt;Esta parte do fluxo de trabalho é bem parecida com criar um layout para design &amp;#8220;normal&amp;#8221;. O primeiro passo portanto é criar o tal do grid, basicamente um conjunto de linhas &amp;#8220;invisiveis&amp;#8221; que vão sustentar o seu design. Pense que você vai ter que quebrar esta estrutura em pedaços menores e, para manter a simetria o ideal é escolher um número par que possa ser divisível por 2, 3 e/ou 4&amp;#8230; Por isto grids de 12, 16, 18 ou 24 colunas são bem comuns. (Você pode escolher o número que quiser. Eu mesma já trabalhei com 14 colunas. Deu mais trabalho. Não diga que não avisei&amp;#8230; ). Não se esqueça do espaço das margens entre as colunas.&lt;/p&gt;

&lt;h2 id=&#34;o-wireframe-3&#34;&gt;O wireframe&lt;/h2&gt;

&lt;p&gt;Se você precisar reescrever completamente todos os elementos do CSS você está fazendo design adaptativo, o que tem seus métodos mas não é responsivo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design responsivo é focado na economia. Economia de tempo, economia de peso de arquivos, economia de código. Pense em escrever estruturas que, embora sofram adaptações, possam ser re-aproveitadas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;desktops-3&#34;&gt;Desktops&lt;/h3&gt;

&lt;p&gt;Este é o exemplo de wireframe que vamos criar passo-a-passo para o nosso exemplo. A estrutura é bem simples: um logotipo no canto superior esquerdo, um menu no topo a direita, um banner, 4 destaques com texto e foto e um rodapé.&lt;/p&gt;

&lt;p&gt;Este é o meu rascunho inicial:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27002&#34; alt=&#34;wireframe-sketch&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-sketch1.jpg&#34; width=&#34;660&#34; height=&#34;708&#34; srcset=&#34;uploads/2013/04/wireframe-sketch1.jpg 660w, uploads/2013/04/wireframe-sketch1-156x168.jpg 156w, uploads/2013/04/wireframe-sketch1-288x310.jpg 288w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora o mesmo modelo recriado no Photoshop:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-27021&#34; alt=&#34;wireframe-desktop&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-desktop.jpg&#34; width=&#34;660&#34; height=&#34;666&#34; srcset=&#34;uploads/2013/04/wireframe-desktop.jpg 660w, uploads/2013/04/wireframe-desktop-166x168.jpg 166w, uploads/2013/04/wireframe-desktop-307x310.jpg 307w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;tablets-3&#34;&gt;Tablets&lt;/h3&gt;

&lt;p&gt;A técnica para adaptar esta estrutura para as outras versões é simples. Diminua o número de colunas no grid. Se inicialmente tinhamos 16 colunas no desktop, teremos 10 no tablet e 4 no smartphone, por exemplo. O conteúdo deve se re-arranjar para caber nesta estrutura menor. Então no tablet ao invés de 4 destaques lado-a-lado temos 2 fileiras com 2 destaques cada. Para adequar-se a estas mudanças as imagens ficaram maiores. Outra modificação foi um ajuste  no tamanho do texto do menu.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26973&#34; alt=&#34;wireframe-tablet&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-tablet.jpg&#34; width=&#34;660&#34; height=&#34;894&#34; srcset=&#34;uploads/2013/04/wireframe-tablet.jpg 660w, uploads/2013/04/wireframe-tablet-124x168.jpg 124w, uploads/2013/04/wireframe-tablet-228x310.jpg 228w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;smartphones-3&#34;&gt;Smartphones&lt;/h3&gt;

&lt;p&gt;Como a tela dos smartphones é ainda menor, é necessário re-arranjar as estruturas novamente e fazer alguns outros ajustes. Isto não significa necessariamente diminuir os elementos de tamanho. Lembre-se que a maior parte dos dispositivos móveis utilizam touch screens. Você deve adaptar os elementos considerando esta área de toque. Links muito pequenos e juntinhos são difíceis selecionar. O ideal é que o usuário possa navegar no site sem precisar dar zoom. Por isto optei por colapsar os elementos em um menu drop-down. Os destaques agora ocupam o espaço total do wrap. Optei por juntar os 4 destaques em uma navegação estilo slider (navegáveis através de seletores em forma de &amp;#8220;bolinhas&amp;#8221;). Outra mudança estetica significativa foi o banner. Como pretendo incluir texto em HTML  com os serviços principais da empresa optei por deixa-lo em uma caixa preta abaixo da foto. Desta maneira as imagens ficam mais visíveis e o formato não prejudica a leitura do texto.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26972&#34; alt=&#34;wireframe-smartphone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wireframe-smartphone.jpg&#34; width=&#34;660&#34; height=&#34;1102&#34; srcset=&#34;uploads/2013/04/wireframe-smartphone.jpg 660w, uploads/2013/04/wireframe-smartphone-100x168.jpg 100w, uploads/2013/04/wireframe-smartphone-185x310.jpg 185w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;resoluções-3&#34;&gt;Resoluções&lt;/h2&gt;

&lt;p&gt;Existem dezenas de resoluções diferentes e, embora este seja o objetivo final, é bem difícil ter um layout que vai ficar perfeito a cada ponto de quebra (difícil, não impossível). O ideal, portanto, é ter em mente quais são os formatos mais comuns e focalizar para que ao menos nestes estágios o design esteja funcionando perfeitamente. Considere portanto estas resoluções básicas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1200 pixels &amp;#8211; Desktops com monitores widescreen.&lt;/li&gt;
&lt;li&gt;960 pixels &amp;#8211; Tablets em formato paisagem e monitores antigos.&lt;/li&gt;
&lt;li&gt;768 pixels &amp;#8211; Tablets em formato retrato.&lt;/li&gt;
&lt;li&gt;480 pixels &amp;#8211; Smartphones em formato paisagem.&lt;/li&gt;
&lt;li&gt;320 pixels &amp;#8211; Smartphones em formato retrato.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para testar o seu HTML final em diferentes resoluções você pode utilizar algum add-on ou &lt;a href=&#34;http://seesparkbox.com/foundry/media_query_bookmarklet&#34; title=&#34;Media Query Bookmarklet&#34;&gt;bookmarklet&lt;/a&gt; para o seu browser. Outra dica super prática é um]&lt;a href=&#34;http://www.envisionsuccess.net/images/responsive-guide.jpg&#34; title=&#34;Responsive Guide Wallpaper&#34;&gt;5&lt;/a&gt; com marcações em pixels.&lt;/p&gt;

&lt;h2 id=&#34;o-mock-up-1&#34;&gt;O mock-up&lt;/h2&gt;

&lt;p&gt;Hora de criar esta estrutura no seu programa gráfico favorito. Você pode montar o seu próprio grid utilizando linhas guias ou baixar um modelo pronto como o &lt;a href=&#34;http://dribbble.com/shots/410635-Responsive-Grid-PSD/&#34; title=&#34;Responsive Grid PSD&#34;&gt;Responsive Grid PSD&lt;/a&gt; ou o &lt;a href=&#34;http://framelessgrid.com/&#34; title=&#34;Frameless&#34;&gt;Frameless&lt;/a&gt;. Para este tutorial utilizei uma versão modificada do Frameless que você pode &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/04/grid.zip&#34; title=&#34;Grid&#34;&gt;baixar aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;nota-sobre-retina-display-1&#34;&gt;Nota sobre retina display&lt;/h3&gt;

&lt;p&gt;É importante ter em mente que alguns aparelhos tem a densidade de pixels superior a 1. É interessante, em termos de qualidade de apresentação do layout, criar um arquivo com o dobro da resolução nestes casos. Então dobre o tamanho do seu PSD na versão para smartphones (o que significa um mockup de 960x640px). Assim, na hora de exportar os elementos, você pode criar imagens em alta resolução para dispositivos retina.&lt;/p&gt;

&lt;h3 id=&#34;apresentação-1&#34;&gt;Apresentação&lt;/h3&gt;

&lt;p&gt;Na minha empresa criamos modelos estáticos para serem aprovados pelos clientes antes de partirmos para etapa de desenvolvimento do HTML/CSS. Na minha experiência, mesmo se nenhum conteúdo for fornecido previamente, fazer um esforcinho a mais e utilizar imagens e textos parecidas com as finais ajudar o seu layout a ser aprovado. Isto acontece por que, ao contrário de nós designers e desenvolvedores, as pessoas &amp;#8220;normais&amp;#8221; possuem naturalmente uma certa dificuldade de abstrair que aqueles quadrados e caixinhas são um site. Adicionar imagens e textos a um tema pode dar mais trabalho, mas é acrescentar contexto e propósito ao seu design, o que por sua vez causa muito mais empatia e identificação.&lt;/p&gt;

&lt;p&gt;Para o nosso exemplo criei a empresa fictícia Space Tour.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26991&#34; alt=&#34;wifreframe&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/wifreframe.jpg&#34; width=&#34;660&#34; height=&#34;672&#34; srcset=&#34;uploads/2013/04/wifreframe.jpg 660w, uploads/2013/04/wifreframe-165x168.jpg 165w, uploads/2013/04/wifreframe-304x310.jpg 304w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mesmo com um conteúdo falso aplicado ainda é difícil de imaginar como o produto final vai se comportar online, principalmente no caso de dispositivos móveis. Para que o cliente possa visualizar como o layout vai se comportar é interessante utilizar mock-ups de hardwares reais. Basta procurar no Google que existem diversos recursos gratuitos para este fim. O site &lt;a href=&#34;http://www.psdcovers.com/&#34; title=&#34;PSD Covers&#34;&gt;PSD Covers&lt;/a&gt;, por exemplo, possui actions e templates de Photoshop em alta resolução que podem ajudar bastante na apresentação final. O]&lt;a href=&#34;http://dribbble.com/&#34; title=&#34;dribbble&#34;&gt;10&lt;/a&gt; também pode ser uma boa fonte para recursos gratuitos.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26974&#34; alt=&#34;mockup-ipad&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/mockup-ipad.jpg&#34; width=&#34;660&#34; height=&#34;680&#34; srcset=&#34;uploads/2013/04/mockup-ipad.jpg 660w, uploads/2013/04/mockup-ipad-163x168.jpg 163w, uploads/2013/04/mockup-ipad-300x310.jpg 300w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-26975&#34; alt=&#34;mockup-smartphone&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/04/mockup-smartphone.jpg&#34; width=&#34;660&#34; height=&#34;536&#34; srcset=&#34;uploads/2013/04/mockup-smartphone.jpg 660w, uploads/2013/04/mockup-smartphone-206x168.jpg 206w, uploads/2013/04/mockup-smartphone-381x310.jpg 381w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;um-processo-em-evolução&#34;&gt;Um processo em evolução&lt;/h2&gt;

&lt;p&gt;Com o passar do tempo este fluxo de trabalho torna-se natural. Ao observar um layout você consegue mentalmente criar os pontos-de-quebra e algumas fases deste processo podem ser puladas. Você pode, por exemplo, trabalhar com apenas dois formatos de wireframe: um para computadores/tablets e um para smartphones. Existem pessoas que preferem ainda queimar completamente estas etapas e desenvolver diretamente no CSS. Cada um tem o seu modo de trabalho e nenhum é necessariamente melhor ou pior que o outro. Vale a pena testar diferentes abordagens até encontrar o que funciona melhor para você, sua equipe e seus clientes.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Bem, agora você já sabe como criar um protótipo de design responsivo. Com o layout aprovado entra a segunda etapa: colocar ele para funcionar. Para isto existem diversos &lt;a href=&#34;http://tableless.com.br/?s=design+responsivo&#34; title=&#34;Tableless Design Responsivo&#34;&gt;artigos sobre Design Responsivo&lt;/a&gt; aqui no Tableless que podem te ajudar como . Ou você pode ainda consultar a &lt;a href=&#34;http://blog.popupdesign.com.br/?s=Design+responsivo&#34; title=&#34;BlogUp - Design Responsivo&#34;&gt;série de artigos do meu blog&lt;/a&gt; . Quer mais? O repositório &lt;a href=&#34;http://bradfrost.github.io/this-is-responsive/resources.html&#34; title=&#34;Responsive Resources&#34;&gt;Responsive Resources&lt;/a&gt; possui uma lista gigante de artigos, recursos e ferramentas úteis sobre o tema. Bons estudos!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mitos sobre dispositivos móveis</title>
      <link>https://tableless.github.io/hugo-public/mitos-sobre-dispositivos-moveis/</link>
      <pubDate>Tue, 26 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/mitos-sobre-dispositivos-moveis/</guid>
      <description>

&lt;h2 id=&#34;mito-1-8211-usuários-utilizam-dispositivos-móveis-apenas-na-rua-e-a-conexão-é-sempre-lenta&#34;&gt;Mito 1 &amp;#8211; Usuários utilizam dispositivos móveis apenas na rua (e a conexão é sempre lenta)&lt;/h2&gt;

&lt;p&gt;Entre todos os meus gadgets o meu tablet é o meu favorito. Ele fica sempre por perto e nunca desliga. Se eu preciso de uma informação é só estender o braço e ler. Muito mais rápido e prático do que andar até o escritório, ligar o computador, esperar o navegador abrir e realizar uma busca. Mas não estou baseando esta informação apenas na forma como eu pessoalmente utilizo a internet.&lt;/p&gt;

&lt;p&gt;Acreditar que um usuário de dispositivo móvel necessariamente tem uma conexão de internet pior, está com pressa ou só acessa a internet através do aparelho da rua é um erro. &lt;a href=&#34;http://www.thinkwithgoogle.com/mobileplanet/en/graph/?country=br&amp;amp;country=cn&amp;amp;country=se&amp;amp;country=uk&amp;amp;country=us&amp;amp;category=DETAILS&amp;amp;topic=DETAILS_LOCA&amp;amp;stat=LOCA01&amp;amp;stat=LOCA02&amp;amp;stat=LOCA03&amp;amp;stat=LOCA04&amp;amp;stat=LOCA06&amp;amp;stat=LOCA10&amp;amp;subcategory=GSA&amp;amp;wave=wave2&amp;amp;age=all&amp;amp;gender=all&amp;amp;active=stat&#34; title=&#34;Our mobile planet&#34;&gt;Pesquisas realizadas pela Google&lt;/a&gt; aqui mesmo no Brasil mostram que a maior parte dos usuários utiliza internet em aparelhos móveis prioritariamente em casa (96% dos entrevistados) ou no trabalho (82%) e só 64% utiliza o aparelho na rua.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O lugar comum em termos de discussão entre desenvolvedores gira atualmente em torno de &amp;#8220;design mobile versus design desktop&amp;#8221;, mas por que não pensar nos dois como aliados ao invés de antagonistas?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;mito-2-8211-usuários-de-dispositivos-móveis-não-precisam-do-conteúdo-total&#34;&gt;Mito 2 &amp;#8211; Usuários de dispositivos móveis não precisam do conteúdo total&lt;/h2&gt;

&lt;p&gt;Imagine que a sua pizzaria favorita abriu um serviço de delivery. Mas ao olhar no menu você percebe que eles só tem disponível para entrega pizza de muzzarela e calabresa. Você já visitou o restaurante e sabe que eles oferecem dezenas de outros sabores para os clientes presenciais. Mas por agum motivo eles acham que quem pede pizza por delivery não está interessado no cardápio completo. É provável que você fique bravo com o estabelecimento e prefira pedir comida em outro lugar. A mesma coisa acontece com os usuários de dispositivos móveis. Na verdade &lt;a href=&#34;http://www.strangeloopnetworks.com/resources/infographics/mobile-infographics/32-percent-of-customers-choose-to-view-the-full-site-on-their-mobile-device/&#34; title=&#34;32% of customers  choose to view the full site on their mobile device&#34;&gt;32% dos usuários&lt;/a&gt; preferem ver a versão para desktop do que a versão móvel. Isto acontece pois muitas vezes a versão mobile possui menos conteúdo que a versão desktop. Não é por que alguém tem uma tela menor que ele deve ser sentenciado a ver menos informações. O ideal é que o conteúdo seja diagramado de forma que o layout adapte-se ao meio. É o design que deve ser modificado para criar a melhor experiência, não o conteúdo.&lt;/p&gt;

&lt;p&gt;A média de &lt;a href=&#34;http://cardealermagazine.co.uk/publish/ebay-sees-huge-acceleration-in-mobile-car-sales-and-launches-its-own-app/66471&#34; title=&#34;Rise in mobile car sale&#34;&gt;vendas de carros no eBay&lt;/a&gt; mobile do Reino Unido é um a cada 57 segundos. Foram mais de 70 millhões de libras em vendas só nos primeiros três meses do ano passado. Ainda acha que o usuário mobile não quer o conteúdo completo?&lt;/p&gt;

&lt;h2 id=&#34;mito-3-8211-usuários-de-dispositivos-móveis-preferem-uma-experiência-mais-simples&#34;&gt;Mito 3 &amp;#8211; Usuários de dispositivos móveis preferem uma experiência mais simples&lt;/h2&gt;

&lt;p&gt;Alguns desenvolvedores pensam que quem acessa um site via smartphone quer ver uma versão lite, como se complexidade fosse necessariamente uma coisa ruim. Não é por que você esta em um dispositivo móvel que você quer ter uma experiência menor ou menos complexa do que em um computador de mesa. Isto não significa que você deva mostrar todas as informações espremidas na mesma tela. Complexidade é diferente de complicação. Usuários de dispositivos móveis farão tudo que um usuários de desktop podem desde que o conteúdo seja apresentado com usabilidade. Limitar as interações é o mesmo que decidir pelos usuários o que eles podem ou não fazer em seus próprios aparelhos. Liberdade de escolha é fundamental.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Acreditar que um usuário de dispositivo móvel necessariamente tem uma conexão de internet pior, está com pressa ou só acessa a internet através do aparelho da rua é um erro.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;mito-4-8211-existe-uma-8220-internet-móvel-8221&#34;&gt;Mito 4 &amp;#8211; Existe uma &amp;#8220;internet móvel&amp;#8221;&lt;/h2&gt;

&lt;p&gt;Quem nunca se irritou ao encontrar um link interessante em um mecanismo de busca apenas para ser redirecionado para a página inicial da versão mobile? Isto acontece por que alguns desenvolvedores tratam as experiências de navegação em diferentes aparelhos como mundos separados, como se existissem duas internets uma &amp;#8220;normal&amp;#8221; e uma &amp;#8220;móvel&amp;#8221;. Esta visão pode quebrar um galho na hora de criar um modelinho de desenvolvimento, mas na real ela é muito rasa. Não faz diferença se você é do time de versões mobile ou do design responsivo, o que importa é centralizar a navegação em um único endereço que possa idealmente ser sincronizado de acordo com o dispositivo. Utilizar uma mesma URL para o conteúdo desktop e mobile não é apenas uma &lt;a href=&#34;http://googlewebmastercentral.blogspot.se/2012/06/recommendations-for-building-smartphone.html&#34; title=&#34;Recommendations for smartphone-optimized websites&#34;&gt;boa prática recomendada pelo Google&lt;/a&gt;, é uma questão de bom senso!&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O lugar comum em termos de discussão entre desenvolvedores gira atualmente em torno de &amp;#8220;design mobile versus design desktop&amp;#8221;, mas por que não pensar nos dois como aliados ao invés de antagonistas? Tablets, smartphones, desktops, televisores e games portáteis formam um verdadeiro ecosssistema de telas. Ao invés de sempre optar pela simplificação, pense em estratégias para tornar a experiência mais atrativa em cada tipo de mídia. Os dispositivos móveis modernos contam com features diferentes de computadores desktops: tela sensível ao toque, microfone, GPS, giroscopio, NFC&amp;#8230; E ainda assim estamos perdendo a oportunidade de explorar estes features ao querer sempre diminuir o número de interações. Projetar experiências complementares e sincrônicas é a grande tendência para o futuro. Tanto o Safari quando o Google Chrome já sincronizam abas e favoritos entre dispositivos. O artigo &lt;a href=&#34;http://precious-forever.com/2011/05/26/patterns-for-multiscreen-strategies/&#34; title=&#34; Patterns for Multiscreen Strategies&#34;&gt;Patterns for Multiscreen Strategies&lt;/a&gt; aponta ao menos 6 modelos de interação entre dispositivos: coesão, sincronização, compartilhamento da tela, migração de dispositivos, complementação e simultaneidade.&lt;/p&gt;

&lt;p&gt;Com todos estes caminhos a explorar, por que se contentar com &amp;#8220;menos é mais&amp;#8221;? As vezes menos pode ser menos. Deixe seu usuário decidir. Um exemplo recente disto é o uso das hashtags. Popularizadas pelo Twitter, muitos usuários começaram a utilizar o recurso no Facebook, mesmo sem nenhuma função prática de busca ou registro de palavras-chave. Graças a popularização das hashtags o &lt;a href=&#34;http://online.wsj.com/article/SB10001424127887323393304578360651345373308.html&#34; title=&#34;Facebook Working on Incorporating the Hashtag&#34;&gt;Facebook pretende implantar&lt;/a&gt; oficialmente o recurso. A lição que podemos aprender com o Facebook é: não tente adivinhar o que usuários querem ou impor qual é o &amp;#8220;jeito certo&amp;#8221; de interagir em uma aplicação. Escute as solicitações. Assim você terá o feedback necessário para projetar interfaces que as pessoas realmente queiram utilizar.&lt;/p&gt;

&lt;h3 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h3&gt;

&lt;p&gt;[## Mito 1 &amp;#8211; Usuários utilizam dispositivos móveis apenas na rua (e a conexão é sempre lenta)&lt;/p&gt;

&lt;p&gt;Entre todos os meus gadgets o meu tablet é o meu favorito. Ele fica sempre por perto e nunca desliga. Se eu preciso de uma informação é só estender o braço e ler. Muito mais rápido e prático do que andar até o escritório, ligar o computador, esperar o navegador abrir e realizar uma busca. Mas não estou baseando esta informação apenas na forma como eu pessoalmente utilizo a internet.&lt;/p&gt;

&lt;p&gt;Acreditar que um usuário de dispositivo móvel necessariamente tem uma conexão de internet pior, está com pressa ou só acessa a internet através do aparelho da rua é um erro. &lt;a href=&#34;http://www.thinkwithgoogle.com/mobileplanet/en/graph/?country=br&amp;amp;country=cn&amp;amp;country=se&amp;amp;country=uk&amp;amp;country=us&amp;amp;category=DETAILS&amp;amp;topic=DETAILS_LOCA&amp;amp;stat=LOCA01&amp;amp;stat=LOCA02&amp;amp;stat=LOCA03&amp;amp;stat=LOCA04&amp;amp;stat=LOCA06&amp;amp;stat=LOCA10&amp;amp;subcategory=GSA&amp;amp;wave=wave2&amp;amp;age=all&amp;amp;gender=all&amp;amp;active=stat&#34; title=&#34;Our mobile planet&#34;&gt;Pesquisas realizadas pela Google&lt;/a&gt; aqui mesmo no Brasil mostram que a maior parte dos usuários utiliza internet em aparelhos móveis prioritariamente em casa (96% dos entrevistados) ou no trabalho (82%) e só 64% utiliza o aparelho na rua.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O lugar comum em termos de discussão entre desenvolvedores gira atualmente em torno de &amp;#8220;design mobile versus design desktop&amp;#8221;, mas por que não pensar nos dois como aliados ao invés de antagonistas?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;mito-2-8211-usuários-de-dispositivos-móveis-não-precisam-do-conteúdo-total-1&#34;&gt;Mito 2 &amp;#8211; Usuários de dispositivos móveis não precisam do conteúdo total&lt;/h2&gt;

&lt;p&gt;Imagine que a sua pizzaria favorita abriu um serviço de delivery. Mas ao olhar no menu você percebe que eles só tem disponível para entrega pizza de muzzarela e calabresa. Você já visitou o restaurante e sabe que eles oferecem dezenas de outros sabores para os clientes presenciais. Mas por agum motivo eles acham que quem pede pizza por delivery não está interessado no cardápio completo. É provável que você fique bravo com o estabelecimento e prefira pedir comida em outro lugar. A mesma coisa acontece com os usuários de dispositivos móveis. Na verdade &lt;a href=&#34;http://www.strangeloopnetworks.com/resources/infographics/mobile-infographics/32-percent-of-customers-choose-to-view-the-full-site-on-their-mobile-device/&#34; title=&#34;32% of customers  choose to view the full site on their mobile device&#34;&gt;32% dos usuários&lt;/a&gt; preferem ver a versão para desktop do que a versão móvel. Isto acontece pois muitas vezes a versão mobile possui menos conteúdo que a versão desktop. Não é por que alguém tem uma tela menor que ele deve ser sentenciado a ver menos informações. O ideal é que o conteúdo seja diagramado de forma que o layout adapte-se ao meio. É o design que deve ser modificado para criar a melhor experiência, não o conteúdo.&lt;/p&gt;

&lt;p&gt;A média de &lt;a href=&#34;http://cardealermagazine.co.uk/publish/ebay-sees-huge-acceleration-in-mobile-car-sales-and-launches-its-own-app/66471&#34; title=&#34;Rise in mobile car sale&#34;&gt;vendas de carros no eBay&lt;/a&gt; mobile do Reino Unido é um a cada 57 segundos. Foram mais de 70 millhões de libras em vendas só nos primeiros três meses do ano passado. Ainda acha que o usuário mobile não quer o conteúdo completo?&lt;/p&gt;

&lt;h2 id=&#34;mito-3-8211-usuários-de-dispositivos-móveis-preferem-uma-experiência-mais-simples-1&#34;&gt;Mito 3 &amp;#8211; Usuários de dispositivos móveis preferem uma experiência mais simples&lt;/h2&gt;

&lt;p&gt;Alguns desenvolvedores pensam que quem acessa um site via smartphone quer ver uma versão lite, como se complexidade fosse necessariamente uma coisa ruim. Não é por que você esta em um dispositivo móvel que você quer ter uma experiência menor ou menos complexa do que em um computador de mesa. Isto não significa que você deva mostrar todas as informações espremidas na mesma tela. Complexidade é diferente de complicação. Usuários de dispositivos móveis farão tudo que um usuários de desktop podem desde que o conteúdo seja apresentado com usabilidade. Limitar as interações é o mesmo que decidir pelos usuários o que eles podem ou não fazer em seus próprios aparelhos. Liberdade de escolha é fundamental.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Acreditar que um usuário de dispositivo móvel necessariamente tem uma conexão de internet pior, está com pressa ou só acessa a internet através do aparelho da rua é um erro.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;mito-4-8211-existe-uma-8220-internet-móvel-8221-1&#34;&gt;Mito 4 &amp;#8211; Existe uma &amp;#8220;internet móvel&amp;#8221;&lt;/h2&gt;

&lt;p&gt;Quem nunca se irritou ao encontrar um link interessante em um mecanismo de busca apenas para ser redirecionado para a página inicial da versão mobile? Isto acontece por que alguns desenvolvedores tratam as experiências de navegação em diferentes aparelhos como mundos separados, como se existissem duas internets uma &amp;#8220;normal&amp;#8221; e uma &amp;#8220;móvel&amp;#8221;. Esta visão pode quebrar um galho na hora de criar um modelinho de desenvolvimento, mas na real ela é muito rasa. Não faz diferença se você é do time de versões mobile ou do design responsivo, o que importa é centralizar a navegação em um único endereço que possa idealmente ser sincronizado de acordo com o dispositivo. Utilizar uma mesma URL para o conteúdo desktop e mobile não é apenas uma &lt;a href=&#34;http://googlewebmastercentral.blogspot.se/2012/06/recommendations-for-building-smartphone.html&#34; title=&#34;Recommendations for smartphone-optimized websites&#34;&gt;boa prática recomendada pelo Google&lt;/a&gt;, é uma questão de bom senso!&lt;/p&gt;

&lt;h2 id=&#34;conclusão-1&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O lugar comum em termos de discussão entre desenvolvedores gira atualmente em torno de &amp;#8220;design mobile versus design desktop&amp;#8221;, mas por que não pensar nos dois como aliados ao invés de antagonistas? Tablets, smartphones, desktops, televisores e games portáteis formam um verdadeiro ecosssistema de telas. Ao invés de sempre optar pela simplificação, pense em estratégias para tornar a experiência mais atrativa em cada tipo de mídia. Os dispositivos móveis modernos contam com features diferentes de computadores desktops: tela sensível ao toque, microfone, GPS, giroscopio, NFC&amp;#8230; E ainda assim estamos perdendo a oportunidade de explorar estes features ao querer sempre diminuir o número de interações. Projetar experiências complementares e sincrônicas é a grande tendência para o futuro. Tanto o Safari quando o Google Chrome já sincronizam abas e favoritos entre dispositivos. O artigo &lt;a href=&#34;http://precious-forever.com/2011/05/26/patterns-for-multiscreen-strategies/&#34; title=&#34; Patterns for Multiscreen Strategies&#34;&gt;Patterns for Multiscreen Strategies&lt;/a&gt; aponta ao menos 6 modelos de interação entre dispositivos: coesão, sincronização, compartilhamento da tela, migração de dispositivos, complementação e simultaneidade.&lt;/p&gt;

&lt;p&gt;Com todos estes caminhos a explorar, por que se contentar com &amp;#8220;menos é mais&amp;#8221;? As vezes menos pode ser menos. Deixe seu usuário decidir. Um exemplo recente disto é o uso das hashtags. Popularizadas pelo Twitter, muitos usuários começaram a utilizar o recurso no Facebook, mesmo sem nenhuma função prática de busca ou registro de palavras-chave. Graças a popularização das hashtags o &lt;a href=&#34;http://online.wsj.com/article/SB10001424127887323393304578360651345373308.html&#34; title=&#34;Facebook Working on Incorporating the Hashtag&#34;&gt;Facebook pretende implantar&lt;/a&gt; oficialmente o recurso. A lição que podemos aprender com o Facebook é: não tente adivinhar o que usuários querem ou impor qual é o &amp;#8220;jeito certo&amp;#8221; de interagir em uma aplicação. Escute as solicitações. Assim você terá o feedback necessário para projetar interfaces que as pessoas realmente queiram utilizar.&lt;/p&gt;

&lt;h3 id=&#34;saiba-mais-1&#34;&gt;Saiba mais&lt;/h3&gt;

&lt;p&gt;]&lt;a href=&#34;http://vimeo.com/48327889&#34; title=&#34;The Seven Deadly Myths of Mobile &#34;&gt;7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2013/02/25/there-is-no-mobile-internet/&#34; title=&#34;Read &#39;There Is No Mobile Internet!&#39;&#34;&gt;There Is No Mobile Internet!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mobile.smashingmagazine.com/2013/01/18/assumptions-about-mobile-to-reconsider/&#34; title=&#34;Read &#39;Think Again: Assumptions About Mobile To Reconsider&#39;&#34;&gt;Assumptions About Mobile To Reconsider&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>