<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Variaveis on Tableless</title>
    <link>http://tableless.com.br/tags/variaveis/index.xml</link>
    <description>Recent content in Variaveis on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/variaveis/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como usar variáveis no CSS de forma nativa</title>
      <link>http://tableless.com.br/como-usar-variaveis-no-css-de-forma-nativa/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-usar-variaveis-no-css-de-forma-nativa/</guid>
      <description>

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Olá pessoal, neste artigo irei abordar o básico sobre variáveis nativas com CSS, e como você pode usar essa tecnologia hoje e sem medo de ser feliz.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-a-href-http-www-w3-org-tr-css-variables-target-blank-css-custom-properties-for-cascading-variables-module-level-1-a-span-p4&#34;&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;&lt;a href=&#34;http://www.w3.org/TR/css-variables/&#34; target=&#34;_blank&#34;&gt;CSS Custom Properties for Cascading Variables Module Level 1&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt; {.p4}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Esta especificação ainda em fase de &lt;em&gt;Last Call Working Draft&lt;/em&gt;, traz um novo módulo de CSS3 que permite a criação de varáveis de forma nativa, de uma forma simples e rápida como veremos a seguir.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-como-declarar-uma-variável-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Como declarar uma variável?&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Para declarar uma variável utilizamos as chamadas &lt;em&gt;Custom Properties&lt;/em&gt;, uma nova forma de declarar uma propriedade utilizando a seguinte sintaxe:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.exemplo {
  --destaque: #660066;
}
&lt;/pre&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Por definição uma &lt;em&gt;Custom Property&lt;/em&gt; é qualquer propriedade que inicie com dois hífens, como ‘—foo’. &lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-como-utilizar-uma-variável-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Como utilizar uma variável?&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Para utilizar uma variável utilizamos a função var(), passando a variável criada como parâmetro,  assim ela irá retornar o valor da variável, veja o exemplo a seguir:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.exemplo {
  --destaque: #660066;
  background-color: var(--destaque);
}
&lt;/pre&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;O que equivale diretamente a:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.exemplo {
  background-color: #660066;
}
&lt;/pre&gt;

&lt;h2 id=&#34;span-class-s1-a-notícia-ruim-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;A notícia ruim 🙁&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;As variáveis tem um escopo a ser seguido, logo uma variável não pode ser usada fora de seu escopo.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Exemplos de utilização correta do escopo:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.menu {
  --tamanho: 20px;
}
.menu ul li {
  padding: var(--tamanho); // retorna 20px
}
&lt;/pre&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Exemplo de utilização incorreta do escopo:&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.menu {
  --tamanho: 20px;
}
.footer {
  padding: var(--tamanho); // não retorna nada
}
&lt;/pre&gt;

&lt;h2 id=&#34;span-class-s1-a-notícia-boa-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;A notícia boa 🙂&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Podemos declarar variáveis em um tipo de &amp;#8220;escopo global”, que nada mais é do que a raiz do documento,&lt;span class=&#34;Apple-converted-space&#34;&gt;  &lt;/span&gt;para isso utilizamos o seletor :root.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Exemplo de variáveis declaradas na raiz do documento.&lt;/span&gt;
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;:root {
  --tamanho: 50%;
  --cor: #660066;
}

.exemplo-1 {
  margin: var(--tamanho); // retorna 50%
}

.exemplo-2 {
  color: var(--cor); // retorna #660066
}
&lt;/pre&gt;

&lt;h2 id=&#34;span-class-s1-até-aqui-legal-mas-e-o-suporte-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Até aqui legal, mas e o suporte?&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Nem tudo são flores amigos, até o momento o suporte é apenas para Firefox. Vejam a tabela completa no &lt;a href=&#34;http://caniuse.com/#feat=css-variables&#34; target=&#34;_blank&#34;&gt;Can i use&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-como-usar-hoje-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Como usar hoje!&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Não teria graça se eu trouxesse aqui uma coisa tão divertida e ninguém pudesse usar, e com um suporte tão ruim, só nos resta apelar para o&lt;span class=&#34;Apple-converted-space&#34;&gt; &lt;/span&gt;maravilhoso &lt;a href=&#34;https://github.com/MadLittleMods/postcss-css-variables&#34; target=&#34;_blank&#34;&gt;postcss-css-variables&lt;/a&gt;, que é um plugin para &lt;a href=&#34;https://github.com/postcss/postcss&#34; target=&#34;_blank&#34;&gt;Post CSS&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h3 id=&#34;span-class-s1-mas-o-que-é-mesmo-esse-post-css-span-p3&#34;&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;Mas o que é mesmo esse Post CSS?&lt;/span&gt;&lt;/strong&gt; {.p3}&lt;/h3&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Esse cara é um pós-processador de CSS que possuí vários &lt;a href=&#34;https://github.com/postcss/postcss#plugins&#34; target=&#34;_blank&#34;&gt;plugins&lt;/a&gt;, sendo o mais famoso o &lt;a href=&#34;https://github.com/postcss/autoprefixer&#34; target=&#34;_blank&#34;&gt;Autoprefixer&lt;/a&gt;, quer por sua vez pega seu código e aplica os &lt;em&gt;vendors prefixes&lt;/em&gt; conforme a necessidade, e é exatamente isso que o postcss-css-variables faz, ele pega suas variáveis e as poem em seu devido lugar, compilando seu &amp;#8220;CSS do futuro&amp;#8221;, para um CSS nativo e suportado por todos.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Você pode ver exatamente como o plugin funciona no &lt;a href=&#34;https://madlittlemods.github.io/postcss-css-variables/playground/&#34; target=&#34;_blank&#34;&gt;postcss-css-variables Playground&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;h3 id=&#34;span-class-s1-quais-as-vantagens-de-utilizar-o-postcss-css-variables-span-p3&#34;&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;Quais as vantagens de utilizar o postcss-css-variables?&lt;/span&gt;&lt;/strong&gt; {.p3}&lt;/h3&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;1 &amp;#8211; Você vai &lt;strong&gt;escrever o CSS de forma nativa&lt;/strong&gt;, e usar o pós-processador como um tipo de &amp;#8220;polyfill&amp;#8221;, que no futuro,  caso outros navegares além do firefox adotem a especificação, pode ser retirado e seu código já estará pronto, mais ou menos como ocorre com o JavaScript e o &lt;a href=&#34;https://babeljs.io/&#34; target=&#34;_blank&#34;&gt;Babel&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;2 &amp;#8211; Usar uma coisa nova em seu &lt;em&gt;workflow&lt;/em&gt;. Isso faz bem, principalmente quando abre um leque de novas possibilidades como aprender outras várias funções incríveis que o Post CSS trás.&lt;/span&gt;
&lt;/p&gt;

&lt;h2 id=&#34;span-class-s1-conclusão-span-p5&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Conclusão&lt;/span&gt; {.p5}&lt;/h2&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Caso alguém me pergunte se &lt;strong&gt;v&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span class=&#34;s1&#34;&gt;ale a pena mudar o &lt;em&gt;workflow&lt;/em&gt; apenas para escrever variáveis de forma nativa?&lt;/span&gt;&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Talvez a resposta seja &lt;strong&gt;não&lt;/strong&gt;.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Agora, se alguém perguntasse se &lt;strong&gt;v&lt;/strong&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&lt;strong&gt;ale a pena brincar com uma coisa nova&lt;/strong&gt;, que no fim das contas vai me &lt;strong&gt;ensinar sobre pós-processadores&lt;/strong&gt;, me apresentar uma especificação que pode &lt;strong&gt;virar padrão no futuro&lt;/strong&gt; e me fazer &lt;strong&gt;refletir sobre formas diferentes de fazer a mesma coisa?&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;p3&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Nesse caso a resposta é um imenso &lt;strong&gt;SIM&lt;/strong&gt;.&lt;/span&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elevação ou JavaScript hoisting</title>
      <link>http://tableless.com.br/elevacao-ou-javascript-hoisting/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/elevacao-ou-javascript-hoisting/</guid>
      <description>

&lt;h2 id=&#34;um-pouco-de-teoria-antes-da-diversão&#34;&gt;Um pouco de Teoria antes da diversão.&lt;/h2&gt;

&lt;p&gt;Muitas vezes, um simples princípio não compreendido, pode confundir novatos ou especialistas em JavaScript. Neste artigo, vamos tentar entender melhor um problema comum, que é mais simples do que parece.&lt;/p&gt;

&lt;h2 id=&#34;declarações-na-frente&#34;&gt;Declarações na frente&lt;/h2&gt;

&lt;p&gt;Antigamente em linguagens como C, se usavam funções ou procedimentos para dividir um programa, mas havia um problema: as declarações deveriam ficar sempre na frente.&lt;/p&gt;

&lt;p&gt;Suponha que você queira usar uma função que junta palavras:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;juntarPalavras(&#39;Arco&#39;, &#39;íris&#39;);&lt;/pre&gt;

&lt;p&gt;Mas temos um problema aqui, não? Essa função não foi definida antes de ser chamada!&lt;/p&gt;

&lt;p&gt;O programa retornará um erro, pois &lt;strong&gt;juntarPalavras()&lt;/strong&gt; não foi criada, ou acha que a linguagem deve permitir que você use funções que são definidas no final do código?&lt;/p&gt;

&lt;p&gt;Declarar funções no início do programa resolveu o problema por um tempo, pois todas as funções e variáveis eram declaradas antes de serem usadas, sendo assim não se tinha erros de referência.&lt;/p&gt;

&lt;p&gt;Com o tempo os programadores pensaram: &amp;#8220;Mas por que cargas d&amp;#8217;água não fazemos isso mais amigável e fácil de ler?&amp;#8221;, &amp;#8220;por que ler o código de baixo para cima e, não de cima para baixo?&amp;#8221;. Agora podemos colocar as definições em qualquer lugar do código e usá-los, mesmo antes de realmente serem definidos, que maravilha não?&lt;/p&gt;

&lt;p&gt;O que acontece agora é que os compiladores ou até mesmo linguagens runtime leem todo o programa para saber que funções e variáveis você declarou no código. Após isso, a execução real acontece e ele já sabe onde está cada coisa. JavaScript faz exatamente isso, o que chamamos de Hoisting.&lt;/p&gt;

&lt;h2 id=&#34;hora-da-diversão&#34;&gt;Hora da diversão&lt;/h2&gt;

&lt;p&gt;Vamos começar com algo leve, para ir aquecendo os neurônios, veja o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;nome = &#39;Jonatan&#39;;
console.log(nome);
// Jonatan
&lt;/pre&gt;

&lt;p&gt;Até aqui nada de novo, apenas iniciamos a variável nome com o valor jonatan e mostramos na tela;&lt;/p&gt;

&lt;p&gt;Certo, e que tal tentarmos isso:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var nome = meunome;
console.log(nome);
// ReferenceError: meunome is not defined
&lt;/pre&gt;

&lt;p&gt;Recebemos um erro bem obvio não acha? Como vamos definir o &lt;strong&gt;nome&lt;/strong&gt; com o valor de &lt;strong&gt;meunome&lt;/strong&gt; se essa variável nem existe ainda?&lt;/p&gt;

&lt;p&gt;Agora, deste jeito:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var nome = meunome;
console.log(nome);
var meunome;
// undefined
&lt;/pre&gt;

&lt;p&gt;Opa! “undefined”, sacam a jogada?&lt;/p&gt;

&lt;p&gt;Isso acontece porque o JavaScript não obriga você a declarar variáveis, ​​permite que você defina as funções em qualquer lugar que você queira, o que lhe permite usar uma função antes de sua definição. O nome hoisting, elevação ou até mesmo içamento, é só um termo especificado, pois ele arranca as declarações até o topo do seu escopo.&lt;/p&gt;

&lt;p&gt;Beleza, agora qual a diferença entre declaração e inicialização? Simples:&lt;/p&gt;

&lt;p&gt;Aqui apenas declaramos a variável &lt;strong&gt;meunome&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var meunome;
//undefined
&lt;/pre&gt;

&lt;p&gt;Já nesta parte iniciamos seu conteúdo como &lt;strong&gt;Jonatan&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;meunome = &#39;Jonatan&#39;;
//Jonatan
&lt;/pre&gt;

&lt;p&gt;Este é o mesmo procedimento feito com as funções:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
var multiplicaNumero = function(a,b) {
  return a*b;
}
//TypeError: undefined is not a function
&lt;/pre&gt;

&lt;p&gt;Viram? Ele elevou a declaração var multiplicaNumero, mas como chamamos antes de ele ser iniciado recebemos um erro.&lt;/p&gt;

&lt;p&gt;Se mudarmos para:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
multiplicaNumero = function(a,b) {
  return a*b;
}
//ReferenceError: multiplicaNumero is not defined
&lt;/pre&gt;

&lt;p&gt;Recebemos o erro nos dizendo que &lt;strong&gt;multiplicaNumero&lt;/strong&gt; não foi declarado.&lt;/p&gt;

&lt;p&gt;Alteramos novamente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
function multiplicaNumero (a,b) {
  return a*b;
}
// 100
&lt;/pre&gt;

&lt;p&gt;E agora o código executou sem erro porque toda declaração de função não anônima é elevada para o topo do escopo.&lt;/p&gt;

&lt;p&gt;Fácil não é? Com isso aprendemos que é uma boa prática declarar e/ou iniciar variáveis e funções no início do escopo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var a, foo = &#39;bar&#39;;
var bar = function(){
  var foo = &#39;foo&#39;;
  console.log(&#39;local: &#39;+foo);
};
bar();
console.log(&#39;global: &#39;+foo);
//local: foo
//global: bar 
&lt;/pre&gt;

&lt;p&gt;Boas práticas nos levam a caminhos melhores.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Variáveis no CSS – Breve</title>
      <link>http://tableless.com.br/variaveis-no-css-breve/</link>
      <pubDate>Mon, 18 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/variaveis-no-css-breve/</guid>
      <description>

&lt;p&gt;Escrever variáveis no CSS é uma das features mais esperadas nesses últimos tempos. &lt;a href=&#34;http://tableless.com.br/estruturacao-de-client-side-preprocessadores-framewoks-e-bibliotecas-parte-1/&#34; title=&#34;Estruturação de Client-side – Parte 1: Préprocessadores, Framewoks e Bibliotecas&#34;&gt;Préprocessadores como SASS e LESS&lt;/a&gt; já disponibilizam este recurso, mas ter essas facilidades no próprio CSS, sem a necessidade de utilizar qualquer outra ferramenta é muito mais do que útil.&lt;/p&gt;

&lt;p&gt;O WebKit tem trabalhado nesse assunto &lt;a href=&#34;http://www.w3.org/TR/css-variables/&#34;&gt;utilizando a documentação do W3C&lt;/a&gt;. E provavelmente já teremos daqui um tempo a possibilidade de utilizar variáveis em browsers que suportam webkit. Se os outros browsers andarem rápido, como o Webkit, muito em breve teremos full-support em todos os browsers, obviamente, browsers antigos ficarão fora dessa. E quando eu digo antigo, incluo até o IE9 e talvez o IE10 e também outros browsers conhecidos. Mesmo assim, com menos risco, já que os outros browsers tem auto-update.&lt;/p&gt;

&lt;h3 id=&#34;sintaxe&#34;&gt;Sintaxe&lt;/h3&gt;

&lt;p&gt;A sintaxe é simples, embora eu não tenha gostado.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;:root {&lt;/p&gt;

&lt;p&gt;var-title-color: green;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;h1 { background-color: var(title-color); }&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Eu começaria tirando o &lt;strong&gt;&amp;#8211;&lt;/strong&gt; (traço) logo depois da palavra &lt;strong&gt;var&lt;/strong&gt;. Assim fica parecido com Javascript.&lt;/p&gt;

&lt;p&gt;Você pode nomes juntos também, sem problemas.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;:root {&lt;/p&gt;

&lt;p&gt;var-FontSizeArticle: 13px;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;article { font-size: var(FontSizeArticle); }&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;O Webkit tem dado &lt;a href=&#34;http://trac.webkit.org/browser/trunk/LayoutTests/fast/css/variables&#34;&gt;alguns exemplos de código aqui&lt;/a&gt;. &lt;a href=&#34;http://www.w3.org/TR/css-variables/&#34;&gt;A documentação&lt;/a&gt; ainda está bem no começo. Mesmo assim, do jeito que as coisas estão andando rápidas, variáveis no CSS estarão presentes na casa de toda família em breve.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>