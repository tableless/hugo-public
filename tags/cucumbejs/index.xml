<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cucumbejs on Tableless</title>
    <link>http://tableless.com.br/tags/cucumbejs/index.xml</link>
    <description>Recent content in Cucumbejs on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/cucumbejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>História de usuário e teste de aceitação em JavaScript</title>
      <link>http://tableless.com.br/historia-de-usuario-e-teste-de-aceitacao-em-javascript/</link>
      <pubDate>Wed, 22 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/historia-de-usuario-e-teste-de-aceitacao-em-javascript/</guid>
      <description>&lt;p&gt;Cada história deve ter valor de negócio na visão do cliente e é uma pequena parte da funcionalidade, não necessariamente uma especificação completa, o que minimiza a necessidade de uma extensa documentação.&lt;/p&gt;

&lt;p&gt;A história de usuário é escrita pelo próprio cliente e, também, serve para conduzir a criação de teste de aceitação, o qual tem o propósito de avaliar a qualidade externa do produto e, na medida do possível, a qualidade de uso e experiência do usuário. A automatização dos testes de aceitação é criada para certificar de que a história foi implementada corretamente.&lt;/p&gt;

&lt;p&gt;Nesse exemplo é preciso a instalação do NodeJS e do Node Package Manager (NPM), que podem ser baixados no &lt;a href=&#34;http://nodejs.org/download/&#34;&gt;site oficial&lt;/a&gt;. O NPM é necessário para instalar o &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;CucumberJS&lt;/a&gt;, o &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; e o &lt;a href=&#34;https://github.com/admc/wd&#34;&gt;WD&lt;/a&gt;, digitando o seguinte _script_ no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install -g cucumber phantomjs&lt;/pre&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install wd&lt;/pre&gt;

&lt;p&gt;O NodeJS possui dois tipos de dependências: global e local. Quando é global, a dependência passa ser executável, tornando possível a utilização da dependência através da linha de comando. Já as dependências locais são instaladas no diretório corrente, dentro de um diretório chamado _node&lt;em&gt;modules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O primeiro &lt;em&gt;script&lt;/em&gt;, que utiliza o parâmetro &lt;strong&gt;-g&lt;/strong&gt;, instala o &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;CucumberJS&lt;/a&gt; e o &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; como dependências globais. O CucumberJS é uma implementação JavaScript para interpretar uma linguagem chamada &lt;a href=&#34;https://github.com/cucumber/gherkin&#34;&gt;Gherkin&lt;/a&gt;, a qual permite escrever funcionalidades e especificações em texto simples. Já o PhantomJS é um WebKit headless totalmente em JavaScript e possui suporte rápido e nativo para vários padrões web como manipulação de DOM, seletores CSS, JSON, Canvas e SVG.&lt;/p&gt;

&lt;p&gt;O segundo _script_ instala o &lt;a href=&#34;https://github.com/admc/wd&#34;&gt;WD&lt;/a&gt; como dependência local, um cliente NodeJS para facilitar o acesso à API do &lt;a href=&#34;http://tableless.com.br/introducao-ao-selenium-2/&#34;&gt;Selenium 2&lt;/a&gt;, o qual suporta &lt;a href=&#34;https://github.com/admc/wd/blob/master/doc/api.md&#34;&gt;métodos&lt;/a&gt; como: fazer requisições GET e POST, clicar no botão VOLTAR do navegador, redimensionar e mover a janela do navegador, submeter formulário, digitar texto, selecionar um elemento DOM, clicar e mover um elemento DOM selecionado, etc.&lt;/p&gt;

&lt;p&gt;Após a instalação das dependências, vamos criar o arquivo &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-apenas-um-exemplo-feature&#34;&gt;&lt;strong&gt;apenas-um-exemplo.feature&lt;/strong&gt;&lt;/a&gt; com a especificação da história de usuário e o teste de aceitação. Algo bem simples. Suficiente para exemplificar a implementação desse tipo de teste utilizando JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;apenas-um-exemplo.feature&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;Feature: Apenas Um Exemplo
  Como um usuario do CucumberJS
  Eu quero acessar um formulario de teste
  Para que eu possa submeter novas informacoes

  Scenario: Submetendo um formulario de teste
    Given o navegador aberto
      And acessar o formulario de teste
      And certificar que o titulo da pagina contem &#34;Sauce Labs&#34;
      And certificar que o titulo da pagina contem &#34;page title&#34;
      And certificar que o titulo da pagina contem &#34;I am a&#34;
    When clicar no botao de submeter formulario
    Then a url do navegador DEVE conter &#34;guinea-pig&#34;
    And o navegador pode ser fechado&lt;/pre&gt;

&lt;p&gt;Ao criar o arquivo de especificação, vamos criar mais dois arquivos: &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-configuracao-webdriver-usando-phantom-js&#34;&gt;&lt;strong&gt;configuracao-webdriver-usando-phantom.js&lt;/strong&gt;&lt;/a&gt; com as configurações do WebDriver e o arquivo &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-step-definitions-js&#34;&gt;&lt;strong&gt;step-definitions.js&lt;/strong&gt;&lt;/a&gt; com as definições de cada passo do teste de aceitação. Em seguida, é preciso, em um outro terminal, rodar o PhantomJS em modo WebDriver, digitando o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;phantomjs --webdriver=localhost:8910&lt;/pre&gt;

&lt;p&gt;Com o PhantomJS rodando em segundo plano, basta rodar o CucumberJS passando como argumento o arquivo com a história de usuário e o teste de aceitação. O parâmetro &lt;strong&gt;&amp;#8211;require&lt;/strong&gt; serve para especificar o arquivo com as definições de cada passo do teste de aceitação. E o parâmetro &lt;strong&gt;&amp;#8211;format&lt;/strong&gt; é para alterar a formatação do resultado dos testes. Abaixo, o _script_ e uma ilustração do resultado obtido:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;cucumber.js apenas-um-exemplo.feature --require step-definitions.js --format pretty&lt;/pre&gt;

&lt;p&gt;&lt;img alt=&#34;Ilustração do resultado de exemplo de como escrever história de usuário e teste de aceitação com JavaScript&#34; src=&#34;http://i1368.photobucket.com/albums/ag182/igorribeirolima/resultado-obtido_zps867ddb6d.png&#34; width=&#34;1020&#34; height=&#34;468&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse exemplo contempla de forma bem simples a implementação de teste de aceitação utilizando JavaScript. Essa abordagem também pode utilizar &lt;a href=&#34;http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/&#34;&gt;diferentes tipos de navegadores&lt;/a&gt;, mas isso ficará para uma próxima discussão. Para quem tiver interesse, todo código está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/8024944&#34; title=&#34;Gist - Exemplo de como escrever história de usuário e teste de aceitação com JavaScript&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>