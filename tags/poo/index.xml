<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Poo on Tableless</title>
    <link>http://tableless.com.br/tags/poo/index.xml</link>
    <description>Recent content in Poo on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/poo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ECMAScript 6, uma breve introduÃ§Ã£o Ã  POO</title>
      <link>http://tableless.com.br/ecmascript-6-uma-breve-introducao-a-poo/</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/ecmascript-6-uma-breve-introducao-a-poo/</guid>
      <description>

&lt;p&gt;Bom galera, jÃ¡ falei aqui no tableless, sobre o uso de classes na ECMAScript 6, porÃ©m, foram exemplos bem superficiais. EntÃ£o decidi criar um exemplo mais prÃ¡tico de como utilizÃ¡-la. VocÃª pode encontrar o artigo que estou falando &lt;a href=&#34;http://tableless.com.br/tableless-weekly-5/&#34; title=&#34;Tableless Weekly 5&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;entendendo-o-projeto&#34;&gt;Entendendo o projeto&lt;/h2&gt;

&lt;p&gt;A ideia inicial foi criar uma mini (e pÃµe mini nisso) loja virtual, utilizando dados emÂ JSON.&lt;/p&gt;

&lt;p&gt;O que teremos, nada mais Ã© que uma variÃ¡vel contendo dados em JSON e estes dados serÃ£o transformados em objetos&amp;#8230; Advinha? Objetos de uma classe da ES6.&lt;/p&gt;

&lt;h3 id=&#34;tÃ¡-mas-pra-quÃª&#34;&gt;TÃ¡, mas pra quÃª?&lt;/h3&gt;

&lt;p&gt;Bem, hoje em dia temos muitas ferramentas no mercado que utilizam dados em JSON o tempo todo para o front-end. O AngularJS, o backbone.js, e vÃ¡rios outros, sÃ£o frameworks que utilizam de dados JSON parar gerar views.&lt;/p&gt;

&lt;h2 id=&#34;estrutura-dos-arquivos&#34;&gt;Â Estrutura dos arquivos&lt;/h2&gt;

&lt;p&gt;Os arquivos do projeto seguem a seguinte estrutura:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  -/css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  Â  Â  bootstrap.min.css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  -/img&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  Â  Â  01.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  Â  Â  02.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  Â  Â  03.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  -/js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  Â  Â  script.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como vocÃª jÃ¡ deve ter percebido, na pasta css temos o bootstrap, na pasta img, temos algumas imagens, temos tambÃ©m o arquivo index.html na raiz do projeto, e por fim, na pasta js temos o arquivo script.js, que Ã© onde acontece a mÃ¡gica.&lt;/p&gt;

&lt;p&gt;No final do artigo deixarei um link com o repositÃ³rio deste projeto no github.&lt;/p&gt;

&lt;h2 id=&#34;finalmente-mÃ£os-Ã -obra&#34;&gt;Finalmente, mÃ£os Ã  obra ðŸ™‚&lt;/h2&gt;

&lt;p&gt;Vamos comeÃ§ar pelo arquivo index.html, que tem uma estrutura bem simples, veja:&lt;/p&gt;

&lt;pre&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
&amp;lt;title&amp;gt;Teste com ECMAScript 6 classes&amp;lt;/title&amp;gt;
&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/bootstrap.min.css&#34;&amp;gt;
&amp;lt;style type=&#34;text/css&#34;&amp;gt;
    .old-price{
        text-decoration: line-through;
    }
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&#34;container&#34;&amp;gt;
        &amp;lt;div class=&#34;row&#34; id=&#34;lista&#34;&amp;gt;
 
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script type=&#34;text/javascript&#34; src=&#34;js/script.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Bem simples nÃ£o?&lt;/p&gt;

&lt;p&gt;Vamos usar uma estrutura bem bÃ¡sica, pois a nossa mini loja sÃ³ vai mostrar alguns produtos e pronto. Como eu jÃ¡ disse, o objetivo Ã© usar a ES6.&lt;/p&gt;

&lt;p&gt;No final teremos o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-46212&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/zoa.jpg&#34; alt=&#34;zoa&#34; width=&#34;1177&#34; height=&#34;576&#34; srcset=&#34;uploads/2014/12/zoa.jpg 1177w, uploads/2014/12/zoa-265x129.jpg 265w, uploads/2014/12/zoa-400x195.jpg 400w&#34; sizes=&#34;(max-width: 1177px) 100vw, 1177px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bem, vamos estudar um pouco o HTML acima.&lt;/p&gt;

&lt;p&gt;Nas linhas 6 a 10, apenas criamos um css para &amp;#8220;riscar&amp;#8221; o preÃ§o antigo no caso de promoÃ§Ã£o usando a classe &lt;strong&gt;.old-price&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Na linha 13 criamos o container e na linha 14 uma div com o atributo id setado como &amp;#8220;lista&amp;#8221;, Ã© nesta div onde carregaremos os produtos.&lt;/p&gt;

&lt;h3 id=&#34;preparado-vamos-ao-javascript&#34;&gt;Preparado? Vamos ao JavaScript.&lt;/h3&gt;

&lt;p&gt;O JavaScript serÃ¡ estudado mais a fundo, entÃ£o nÃ£o vou simplesmente colar o cÃ³digo e explicar as linhas como fiz com o HTML, vou fazer um passo Ã  passo e no final mostro o resultado do arquivo.&lt;/p&gt;

&lt;h4 id=&#34;qual-o-primeiro-passo&#34;&gt;Qual o primeiro passo?&lt;/h4&gt;

&lt;p&gt;Habilitar a ES6 no seu navegador, Ã© claro!&lt;/p&gt;

&lt;p&gt;Como a ES6 ainda nÃ£o estÃ¡ funcionando totalmente nos navegadores e ainda nÃ£o foi adotada como padrÃ£o, ela estÃ¡ por padrÃ£o desabilitada.&lt;/p&gt;

&lt;p&gt;Neste exemplo utilizei o Google Chrome Canary, indico que vocÃª o utilize tambÃ©m, mas nada contra o firefox.&lt;/p&gt;

&lt;p&gt;Para habilitar aÂ ES6 no Chrome Canary, basta vocÃª abrir uma nova aba e acessar a url:Â &lt;strong&gt;chrome://flags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ApÃ³s acessar esta url, vocÃª vai procurar algo parecido com a imagem abaixo, basta apenas habilitar e pronto:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-46218&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/zoa21.jpg&#34; alt=&#34;zoa2&#34; width=&#34;830&#34; height=&#34;316&#34; srcset=&#34;uploads/2014/12/zoa21.jpg 830w, uploads/2014/12/zoa21-265x100.jpg 265w, uploads/2014/12/zoa21-400x152.jpg 400w&#34; sizes=&#34;(max-width: 830px) 100vw, 830px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, podemos comeÃ§ar :).&lt;/p&gt;

&lt;p&gt;O primeiro passo, Ã© habilitar o strict mode do JavaScript, pois objetos nÃ£o podem ser utilizados sem o modo strict. VocÃª pode ver mais sobre o strict mode [Bom galera, jÃ¡ falei aqui no tableless, sobre o uso de classes na ECMAScript 6, porÃ©m, foram exemplos bem superficiais. EntÃ£o decidi criar um exemplo mais prÃ¡tico de como utilizÃ¡-la. VocÃª pode encontrar o artigo que estou falando &lt;a href=&#34;http://tableless.com.br/tableless-weekly-5/&#34; title=&#34;Tableless Weekly 5&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;entendendo-o-projeto-1&#34;&gt;Entendendo o projeto&lt;/h2&gt;

&lt;p&gt;A ideia inicial foi criar uma mini (e pÃµe mini nisso) loja virtual, utilizando dados emÂ JSON.&lt;/p&gt;

&lt;p&gt;O que teremos, nada mais Ã© que uma variÃ¡vel contendo dados em JSON e estes dados serÃ£o transformados em objetos&amp;#8230; Advinha? Objetos de uma classe da ES6.&lt;/p&gt;

&lt;h3 id=&#34;tÃ¡-mas-pra-quÃª-1&#34;&gt;TÃ¡, mas pra quÃª?&lt;/h3&gt;

&lt;p&gt;Bem, hoje em dia temos muitas ferramentas no mercado que utilizam dados em JSON o tempo todo para o front-end. O AngularJS, o backbone.js, e vÃ¡rios outros, sÃ£o frameworks que utilizam de dados JSON parar gerar views.&lt;/p&gt;

&lt;h2 id=&#34;estrutura-dos-arquivos-1&#34;&gt;Â Estrutura dos arquivos&lt;/h2&gt;

&lt;p&gt;Os arquivos do projeto seguem a seguinte estrutura:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  -/css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  Â  Â  bootstrap.min.css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  -/img&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  Â  Â  01.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  Â  Â  02.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  Â  Â  03.jpg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  -/js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â  Â  Â  Â  script.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como vocÃª jÃ¡ deve ter percebido, na pasta css temos o bootstrap, na pasta img, temos algumas imagens, temos tambÃ©m o arquivo index.html na raiz do projeto, e por fim, na pasta js temos o arquivo script.js, que Ã© onde acontece a mÃ¡gica.&lt;/p&gt;

&lt;p&gt;No final do artigo deixarei um link com o repositÃ³rio deste projeto no github.&lt;/p&gt;

&lt;h2 id=&#34;finalmente-mÃ£os-Ã -obra-1&#34;&gt;Finalmente, mÃ£os Ã  obra ðŸ™‚&lt;/h2&gt;

&lt;p&gt;Vamos comeÃ§ar pelo arquivo index.html, que tem uma estrutura bem simples, veja:&lt;/p&gt;

&lt;pre&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
&amp;lt;title&amp;gt;Teste com ECMAScript 6 classes&amp;lt;/title&amp;gt;
&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/bootstrap.min.css&#34;&amp;gt;
&amp;lt;style type=&#34;text/css&#34;&amp;gt;
    .old-price{
        text-decoration: line-through;
    }
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&#34;container&#34;&amp;gt;
        &amp;lt;div class=&#34;row&#34; id=&#34;lista&#34;&amp;gt;
 
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script type=&#34;text/javascript&#34; src=&#34;js/script.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Bem simples nÃ£o?&lt;/p&gt;

&lt;p&gt;Vamos usar uma estrutura bem bÃ¡sica, pois a nossa mini loja sÃ³ vai mostrar alguns produtos e pronto. Como eu jÃ¡ disse, o objetivo Ã© usar a ES6.&lt;/p&gt;

&lt;p&gt;No final teremos o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-46212&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/zoa.jpg&#34; alt=&#34;zoa&#34; width=&#34;1177&#34; height=&#34;576&#34; srcset=&#34;uploads/2014/12/zoa.jpg 1177w, uploads/2014/12/zoa-265x129.jpg 265w, uploads/2014/12/zoa-400x195.jpg 400w&#34; sizes=&#34;(max-width: 1177px) 100vw, 1177px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bem, vamos estudar um pouco o HTML acima.&lt;/p&gt;

&lt;p&gt;Nas linhas 6 a 10, apenas criamos um css para &amp;#8220;riscar&amp;#8221; o preÃ§o antigo no caso de promoÃ§Ã£o usando a classe &lt;strong&gt;.old-price&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Na linha 13 criamos o container e na linha 14 uma div com o atributo id setado como &amp;#8220;lista&amp;#8221;, Ã© nesta div onde carregaremos os produtos.&lt;/p&gt;

&lt;h3 id=&#34;preparado-vamos-ao-javascript-1&#34;&gt;Preparado? Vamos ao JavaScript.&lt;/h3&gt;

&lt;p&gt;O JavaScript serÃ¡ estudado mais a fundo, entÃ£o nÃ£o vou simplesmente colar o cÃ³digo e explicar as linhas como fiz com o HTML, vou fazer um passo Ã  passo e no final mostro o resultado do arquivo.&lt;/p&gt;

&lt;h4 id=&#34;qual-o-primeiro-passo-1&#34;&gt;Qual o primeiro passo?&lt;/h4&gt;

&lt;p&gt;Habilitar a ES6 no seu navegador, Ã© claro!&lt;/p&gt;

&lt;p&gt;Como a ES6 ainda nÃ£o estÃ¡ funcionando totalmente nos navegadores e ainda nÃ£o foi adotada como padrÃ£o, ela estÃ¡ por padrÃ£o desabilitada.&lt;/p&gt;

&lt;p&gt;Neste exemplo utilizei o Google Chrome Canary, indico que vocÃª o utilize tambÃ©m, mas nada contra o firefox.&lt;/p&gt;

&lt;p&gt;Para habilitar aÂ ES6 no Chrome Canary, basta vocÃª abrir uma nova aba e acessar a url:Â &lt;strong&gt;chrome://flags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ApÃ³s acessar esta url, vocÃª vai procurar algo parecido com a imagem abaixo, basta apenas habilitar e pronto:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-46218&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/zoa21.jpg&#34; alt=&#34;zoa2&#34; width=&#34;830&#34; height=&#34;316&#34; srcset=&#34;uploads/2014/12/zoa21.jpg 830w, uploads/2014/12/zoa21-265x100.jpg 265w, uploads/2014/12/zoa21-400x152.jpg 400w&#34; sizes=&#34;(max-width: 830px) 100vw, 830px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, podemos comeÃ§ar :).&lt;/p&gt;

&lt;p&gt;O primeiro passo, Ã© habilitar o strict mode do JavaScript, pois objetos nÃ£o podem ser utilizados sem o modo strict. VocÃª pode ver mais sobre o strict mode]&lt;a href=&#34;http://tableless.com.br/javascript-strict-mode/&#34; title=&#34;JavaScript Strict Mode&#34;&gt;2&lt;/a&gt; do Fabiano de Lima Abreu.&lt;/p&gt;

&lt;p&gt;Para fazer isto Ã© simples, vamos inserir na primeira linha do arquivo o seguinte:&lt;/p&gt;

&lt;pre&gt;&#34;use strict&#34;;&lt;/pre&gt;

&lt;p&gt;Simples, nÃ£o?&lt;/p&gt;

&lt;p&gt;Agora vamos criar a nossa classe Produto e seu mÃ©todo construtor, veja abaixo:&lt;/p&gt;

&lt;pre&gt;class Produto{
    constructor(codigo,nome,imagem,promocao,preco,desconto){
        this.codigo = codigo;
        this.nome = nome;
        this.imagem = imagem;
        this.promocao = promocao;
        this.preco = preco;
        this.desconto = desconto;
    }
}&lt;/pre&gt;

&lt;p&gt;NÃ£o precisa ser um gÃªnio para entender esta parte, e se vocÃª chegou a ler o artigo que deixei no inÃ­cio deste, jÃ¡ estarÃ¡ familiarizado com o assunto.&lt;/p&gt;

&lt;p&gt;Criamos uma classe com seu mÃ©todo construtor, que possui os atributos, cÃ³digo, nome, imagem, promocao, preco e desconto.&lt;/p&gt;

&lt;p&gt;Bacana, e agora?&lt;/p&gt;

&lt;p&gt;Vamos criar um mÃ©todo para listagem de produtos, que receberÃ¡ uma variÃ¡vel em JSON e organizarÃ¡ os produtoÂ no HTML.&lt;/p&gt;

&lt;p&gt;Criaremos o mÃ©todo lista, que receberÃ¡ como parÃ¢metro uma variÃ¡vel contendo o JSON:&lt;/p&gt;

&lt;pre&gt;lista(products){
}
&lt;/pre&gt;

&lt;p&gt;Em seguida criaremos uma variÃ¡vel lista pegando a div onde a lista serÃ¡ inserida pelo id:&lt;/p&gt;

&lt;pre&gt;lista(products){
    var lista = document.getElementById(&#34;lista&#34;);
}&lt;/pre&gt;

&lt;p&gt;Agora, vamos criar um laÃ§o de repetiÃ§Ã£o que percorrerÃ¡ nossa lista em JSON e criarÃ¡ seus elementos:&lt;/p&gt;

&lt;pre&gt;lista(products){
    var lista = document.getElementById(&#34;lista&#34;);
    for(var i=0; i &amp;lt; products.length; i++){
        //conteÃºdo do loop
    }
}&lt;/pre&gt;

&lt;p&gt;Dentro deste laÃ§o, criaremos e preencheremos os elementos HTML de cada produto, utilizaremos os thumbnails do bootstrap, como vocÃª pÃ´de ver na foto com o resultado final.&lt;/p&gt;

&lt;p&gt;A estrutura bÃ¡sica serÃ¡ a seguinte:&lt;/p&gt;

&lt;pre&gt;&amp;lt;div class=&#34;col-xs-12 col-sm-6 col-md-4 col-lg-4&#34;&amp;gt;
    &amp;lt;div class=&#34;thumbnail&#34;&amp;gt;
        &amp;lt;h1 class=&#34;text-center&#34;&amp;gt;SapatÃªnis Puma Preto&amp;lt;/h1&amp;gt;
        &amp;lt;img src=&#34;img/01.jpg&#34;&amp;gt;
        &amp;lt;small class=&#34;old-price&#34;&amp;gt;R$ 250&amp;lt;/small&amp;gt;
        &amp;lt;p class=&#34;price&#34;&amp;gt;R$ 200&amp;lt;/p&amp;gt;
        &amp;lt;a class=&#34;btn btn-primary&#34;&amp;gt;Comprar&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Para cada produto lido atravÃ©s do JSON, teremos esta estrutura para exibi-lo.&lt;/p&gt;

&lt;p&gt;Primeiramente vamos instanciar a classe produto a cada repetiÃ§Ã£o deste laÃ§o, utilizando o mÃ©todo construtor para atribuir Ã s suas propriedades:&lt;/p&gt;

&lt;pre&gt;let produto = new Produto(products[i].codigo,products[i].nome,products[i].imagem,products[i].promocao,products[i].preco,products[i].desconto);&lt;/pre&gt;

&lt;p&gt;Quando criamos um objeto Ã  partir de uma classe, Ã© necessÃ¡rio a utilizaÃ§Ã£o da palavra reservada &lt;strong&gt;let&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Em seguida, vamos criar os elementos HTML dos produtos, comeÃ§ando pelas variÃ¡veis:&lt;/p&gt;

&lt;pre&gt;var column, thumbnail, title, image, old_price, price, btn;&lt;/pre&gt;

&lt;p&gt;Em seguida, atribuÃ­mos o HTML nessas variÃ¡veis:&lt;/p&gt;

&lt;pre&gt;column = document.createElement(&#34;div&#34;);
thumbnail = document.createElement(&#34;div&#34;);
title = document.createElement(&#34;h1&#34;);
image = document.createElement(&#34;img&#34;);
old_price = document.createElement(&#34;small&#34;);
price = document.createElement(&#34;p&#34;);
btn = document.createElement(&#34;a&#34;);&lt;/pre&gt;

&lt;p&gt;Em seguida, vamos adicionar as classes aos elementos para receberem a formataÃ§Ã£o do bootstrap:&lt;/p&gt;

&lt;pre&gt;column.classList.add(&#34;col-xs-12&#34;);
column.classList.add(&#34;col-sm-6&#34;);
column.classList.add(&#34;col-md-4&#34;);
column.classList.add(&#34;col-lg-4&#34;);

thumbnail.classList.add(&#34;thumbnail&#34;);

title.classList.add(&#34;text-center&#34;);

old_price.classList.add(&#34;old-price&#34;);

price.classList.add(&#34;price&#34;);

btn.classList.add(&#34;btn&#34;);
btn.classList.add(&#34;btn-primary&#34;);
btn.innerHTML = &#34;Comprar&#34;;&lt;/pre&gt;

&lt;p&gt;Para adiantar, jÃ¡ colocamos o innerHTML do botÃ£o com o texto &amp;#8220;Comprar&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Agora o que temos que fazer Ã© inserir nos elementos os seus valores:&lt;/p&gt;

&lt;pre&gt;title.innerHTML = produto.nome;

image.setAttribute(&#34;src&#34;,produto.imagem);&lt;/pre&gt;

&lt;p&gt;Eu coloquei por enquanto, apenas o nome do produto, e sua imagem. Pois precisamos pensar na promoÃ§Ã£o.&lt;/p&gt;

&lt;p&gt;O atributo promocao, Ã© um valor booleano, que nos mostrarÃ¡ se o produto vai ou nÃ£o ter desconto.&lt;/p&gt;

&lt;p&gt;Caso promocao seja verdadeiro, colocaremos o preÃ§o normal do produto com a classe &lt;strong&gt;.old-price&lt;/strong&gt; que criamos lÃ¡ em cima para que ele fique &amp;#8220;riscado&amp;#8221;, e o preÃ§o real serÃ¡ um cÃ¡lculo do valor do produto subtraÃ­do do desconto. Caso ocorra o contrÃ¡rio, o elemento &lt;strong&gt;old_price&lt;/strong&gt; receberÃ¡ um &lt;strong&gt;display:none&lt;/strong&gt; e o preÃ§o nÃ£o sofrerÃ¡ alteraÃ§Ã£o:&lt;/p&gt;

&lt;pre&gt;if(produto.promocao == true){
    old_price.innerHTML = &#34;R$ &#34;+ produto.preco;
    price.innerHTML = &#34;R$ &#34;+ (produto.preco - produto.desconto);
}else{
    old_price.setAttribute(&#34;display&#34;,&#34;none&#34;);
    price.innerHTML = &#34;R$ &#34;+ produto.preco;
 }&lt;/pre&gt;

&lt;p&gt;E por fim, para finalizarmos o nosso laÃ§o de repetiÃ§Ã£o, iremos dar um &lt;strong&gt;appendChild()&lt;/strong&gt; onde for necessÃ¡rio, criando a hierarquia do HTML:&lt;/p&gt;

&lt;pre&gt;thumbnail.appendChild(title);
thumbnail.appendChild(image);
thumbnail.appendChild(old_price);
thumbnail.appendChild(price);
thumbnail.appendChild(btn);

column.appendChild(thumbnail);

lista.appendChild(column);&lt;/pre&gt;

&lt;p&gt;NÃ£o vou postar o cÃ³digo final do nosso mÃ©todo, pois o artigo jÃ¡ estÃ¡ bem grande. Basta dar uma olhadinha no repositÃ³rio no final do artigo e vocÃª verÃ¡ a estrutura completa.&lt;/p&gt;

&lt;h3 id=&#34;beleza-mas-e-agora&#34;&gt;Beleza, mas e agora?&lt;/h3&gt;

&lt;p&gt;Bom, criei uma variÃ¡vel apÃ³s o final de nossa classe Produto, com os dados em formato JSON para testarmos os produtos. Em um sistema real, estes dados viriam de fontes externas.&lt;/p&gt;

&lt;p&gt;Abaixo o cÃ³digo:&lt;/p&gt;

&lt;pre&gt;var products = [
 {
 codigo: 1,
 nome: &#34;SapatÃªnis Puma Preto&#34;,
 imagem: &#34;img/01.jpg&#34;,
 promocao: true,
 preco: 250.00,
 desconto: 50.00
 },
 {
 codigo: 2,
 nome: &#34;SapatÃªnis Preto Linha Vermelha&#34;,
 imagem: &#34;img/02.jpg&#34;,
 promocao: false,
 preco: 250.00,
 desconto: null
 },
 {
 codigo: 3,
 nome: &#34;SapatÃªnis Bege c/ Branco&#34;,
 imagem: &#34;img/03.jpg&#34;,
 promocao: false,
 preco: 250.00,
 desconto: null
 },
]&lt;/pre&gt;

&lt;p&gt;Por fim, basta apenas instanciar a classe Produto e chamarmos o mÃ©todo lista, passando como parÃ¢metro nossa variÃ¡vel contendo os dados em JSON:&lt;/p&gt;

&lt;pre&gt;let produto = new Produto();
produto.lista(products);&lt;/pre&gt;

&lt;h2 id=&#34;conclusÃ£o&#34;&gt;ConclusÃ£o&lt;/h2&gt;

&lt;p&gt;Bom galera, o artigo ficou um pouco longo, pois tentei ser o mais especÃ­fico possÃ­vel.&lt;/p&gt;

&lt;p&gt;Este foi sÃ³ um exemplo do que podemos fazer com as novas features da ECMAScript 6 e as mudanÃ§as (pra melhor) que ela nos proporciona.&lt;/p&gt;

&lt;p&gt;Aguardamos ansiosamente que ela comece Ã  ser suportada pelos browsers por completo, pois alÃ©m de tanta coisa que se pode fazer com ela, o Angular 2.0 estÃ¡ sendo escrito nela tambÃ©m.&lt;/p&gt;

&lt;p&gt;Pra quem quiser dar um olhada no repositÃ³rio com o cÃ³digo deste artigo basta seguir este &lt;a href=&#34;https://github.com/lnlwd/ECMAScript6-loja&#34; title=&#34;RepositÃ³rio&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por hoje Ã© sÃ³ ðŸ™‚ atÃ© mais galera!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>