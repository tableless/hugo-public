<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bibliotecas Javascript on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/bibliotecas-javascript/index.xml</link>
    <description>Recent content in Bibliotecas Javascript on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/bibliotecas-javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ReactJS 101</title>
      <link>https://tableless.github.io/hugo-public/reactjs-101/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/reactjs-101/</guid>
      <description>

&lt;h4 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h4&gt;

&lt;p&gt;ReactJS é a biblioteca criada pelo Facebook para criação de interfaces. Pensando no mundo &lt;strong&gt;MV&lt;/strong&gt;* qual vivenciamos hoje, este seria o &lt;strong&gt;V&lt;/strong&gt; (view).&lt;/p&gt;

&lt;p&gt;Através de uma api simples qual previlegia o uso do javascript e com uma performance acima da apresentada pelos seus concorrentes, o ReactJS vem ganhando cada dia mais adeptos.&lt;/p&gt;

&lt;h4 id=&#34;building-blocks&#34;&gt;Building Blocks&lt;/h4&gt;

&lt;p&gt;Fortemente inspirado pelo conceito de componentes, trazendo duas grandes características que o desenvolvedor deve se concentrar: &lt;em&gt;Components&lt;/em&gt; e&lt;em&gt;Elements&lt;/em&gt;.&lt;/p&gt;

&lt;h5 id=&#34;components&#34;&gt;Components&lt;/h5&gt;

&lt;p&gt;É o template para criação de elementos. Fazendo um paralelo com a web atual, exemplos de components são &lt;em&gt;div&lt;/em&gt;, &lt;em&gt;button&lt;/em&gt;, &lt;em&gt;label&lt;/em&gt; entre outros.&lt;/p&gt;

&lt;h5 id=&#34;elements&#34;&gt;Elements&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;Element&lt;/em&gt; é a instância de um &lt;em&gt;component&lt;/em&gt;. Por exemplo quando inserimos um &lt;em&gt;button&lt;/em&gt; em uma página HTML, este elemento é a materialização/instância de um componente no DOM.&lt;/p&gt;

&lt;p&gt;Complicado?&lt;/p&gt;

&lt;p&gt;Vamos ver como funciona na prática:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;//cria elemento
var customDiv = React.createElement(&#39;div&#39;);

//renderiza elemento
ReactDOM.render(customDiv, document.getElementById(&#39;container&#39;));
&lt;/pre&gt;

&lt;p&gt;O código acima cria um &lt;em&gt;element&lt;/em&gt; baseado no &lt;em&gt;component&lt;/em&gt; &lt;code&gt;div&lt;/code&gt; e renderiza o mesmo no DOM.&lt;/p&gt;

&lt;p&gt;Legal! Mas usar diretamente o HTML não é mais eficiente?&lt;/p&gt;

&lt;p&gt;A resposta: normalmente não.&lt;/p&gt;

&lt;p&gt;E eis que lhes apresento o &lt;em&gt;Virtual DOM&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;virtual-dom&#34;&gt;Virtual DOM&lt;/h4&gt;

&lt;p&gt;Como todos sabem a manipulação de DOM além de não ser uma das coisas mais simples no mundo web, ainda tem um grande impacto na performance de nossas aplicações.&lt;/p&gt;

&lt;p&gt;E com isso em mente os engenheiros do facebook/instagram criaram o &lt;em&gt;virtual DOM&lt;/em&gt; que na prática é a representação do DOM em memória. Deste modo, todos os &lt;em&gt;elements&lt;/em&gt; que criamos utilizando React.createElement são criados e mantidos nesse ambiente virtual antes de serem renderizados no DOM original.&lt;/p&gt;

&lt;p&gt;A mágica acontece de verdade nas atualizações. Imagine o seguinte cenário: numa tela HTML temos um campo de texto do tipo numeric e um botão de adicionar. Toda vez que clicamos no botão adiciona em 1 o valor do campo de texto.&lt;/p&gt;

&lt;p&gt;Uma atividade super simples como adicionar um handler para o evento de click do botão e dentro do handler pegar o campo de texto através da api de DOM e somar 1 ao value do mesmo. Tudo lindo, mas tem alguns problemas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;adicionar e manter event handlers nos &lt;em&gt;elements&lt;/em&gt; do DOM consomem bastante memória.&lt;/li&gt;
&lt;li&gt;modificar o conteúdo da página gera reflow (nova renderização do _element_modificado e seus filhos).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Agora imagine tudo isso acontecendo em uma página com centenas ou talvez milhares de &lt;em&gt;elements&lt;/em&gt; no DOM. Não é uma experiência muito boa.&lt;/p&gt;

&lt;p&gt;Com o &lt;em&gt;virtual DOM&lt;/em&gt; esses problemas são minimizados com a técnica conhecida como &amp;#8220;o menos é mais&amp;#8221;, ou seja, toda vez que algo é alterado nos &lt;em&gt;elements&lt;/em&gt; que foram criados através do método React.createElement. O ReactJS renderiza esse conteúdo no &lt;em&gt;virtual DOM&lt;/em&gt; e através de um algoritmo super otimizado calcula a diferença entre o DOM atual e o DOM com as alterações e são essas diferenças que são renderizadas no DOM original. E desta forma causa o mínimo de impacto possível fazendo com que nossas páginas estejam sempre responsivas e rápidas para o usuário.&lt;/p&gt;

&lt;h4 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h4&gt;

&lt;p&gt;ReactJS é uma nova opção para criação de interfaces focada na simplidade de desenvolvimento e alta performance. Com baixo consumo de memória e um gerenciamento eficiente do DOM esta biblioteca vem ganhando o mundo.&lt;/p&gt;

&lt;p&gt;Por hoje é isso!&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado dessa introdução e até a próxima!&lt;/p&gt;

&lt;h5 id=&#34;links-de-referência&#34;&gt;Links de referência:&lt;/h5&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&#34; target=&#34;_blank&#34;&gt;DOM (Document Object Model)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://developers.google.com/speed/articles/reflow&#34; target=&#34;_blank&#34;&gt;Reflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;https://facebook.github.io/react/docs/getting-started.html&#34; target=&#34;_blank&#34;&gt;ReactJS&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Construindo sua própria biblioteca javascript</title>
      <link>https://tableless.github.io/hugo-public/construindo-sua-propria-biblioteca-javascript/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/construindo-sua-propria-biblioteca-javascript/</guid>
      <description>

&lt;p&gt;Pois bem, meu amigo ninja, está na hora de melhorar um pouco mais seus conhecimentos e quem sabe embarcar em uma nova ideia: a criação da sua própria biblioteca javascript!&lt;/p&gt;

&lt;h1 id=&#34;introdução&#34;&gt;Introdução&lt;/h1&gt;

&lt;p&gt;Antes de você pensar: “Ah, mas eu já sei como é. Basta estender o objeto HTMLElement por meio da prototype…”. Digo-lhes que felizmente não é assim. Imagine o peso que seria colocar um novo método em todos os elementos HTML. Impraticável.&lt;/p&gt;

&lt;p&gt;Bem, meu amigo, se você não compreende minhas palavras, segue um exemplo de como podemos anexar um novo método aos elementos HTML por meio do prototype:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;HTMLElement.prototype.esconde = function(){
 this.setAttribute(“style”,”display:none”)
}
&lt;/pre&gt;

&lt;p&gt;Logo poderíamos esconder qualquer elemento HTML através da chamada:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;document.querySelector(“div”).esconde();&lt;/pre&gt;

&lt;p&gt;Então vamos fazer isto da maneira correta, usando um alias ($) para selecionar nossos elementos mais ou menos igual ao jQuery, o resultado final será este:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(“div”).esconde();&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note que a sintaxe ficará igual a biblioteca jQuery. Veremos como obter este resultado passo-a-passo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;passo-1-8211-a-função-imediata&#34;&gt;Passo 1 &amp;#8211; A função imediata&lt;/h1&gt;

&lt;p&gt;Criaremos uma função imediata, incrivelmente versátil e que tornará a linguagem javascript mais poderosa. Esta função imediata, que veremos aqui, criará um escopo temporário e algumas váriaveis “particulares”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 1 — Começando com uma função imediata&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;(function(){ var blJs= function(arg){ }
})();
&lt;/pre&gt;

&lt;p&gt;Note que criei uma função anônima, cujo o nome é: &lt;strong&gt;blJs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Este será o nome da nossa biblioteca&lt;/p&gt;

&lt;h1 id=&#34;passo-2-8211-entendendo-a-bljs&#34;&gt;Passo 2 &amp;#8211; Entendendo a blJs&lt;/h1&gt;

&lt;p&gt;Agora que a brincadeira começa a ficar boa. Primeiro iremos programar nossa função anônima (blJs), para que, sempre que ela for chamada, retorne ela mesmo como um construtor, para podermos ter acesso ao tão poderoso “&lt;strong&gt;this&lt;/strong&gt;”:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 2 — A função blJs&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var blJs= function(arg){ 
 if(!(this instanceof blJs)){ 
  return new blJs(arg); 
 }
 this.myArg = arg;
}
&lt;/pre&gt;

&lt;p&gt;Note que verifiquei se o nosso objeto foi declarado como um construtor. Claro que na chamada inicial ele não será. Por isso invocamos novamente nossa função &lt;strong&gt;blJs&lt;/strong&gt;, mas desta vez como um construtor, para podermos utilizar o &amp;#8216;&lt;strong&gt;this&lt;/strong&gt;&amp;#8216;. Observe que salvei o argumento da função blJs no objeto &lt;strong&gt;myArg&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lembra desta linha de código: $(“div”)…? Isto é o mesmo que: blJs(“div”). Podemos perceber que estamos passando o “&lt;strong&gt;div&lt;/strong&gt;” como parâmetro da nossa função. Logo: &lt;strong&gt;this.myArg = “div”&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;passo-3-8211-estendendo-nossa-biblioteca-inserindo-métodos&#34;&gt;Passo 3 &amp;#8211; Estendendo nossa biblioteca: inserindo métodos☺&lt;/h1&gt;

&lt;p&gt;Se prepare, amigo ninja, pois a mágica funciona justamente nas próximas linhas de códigos a seguir.&lt;/p&gt;

&lt;p&gt;Iremos estender nossa função ( blJs ), por meio da propriedade prototype e fn. Veja a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;blJs.fn = blJs.prototype = { 
 esconde: function(){ 
  document.querySelector(this.myArg).setAttribute(“style”,”display:none”); 
 }
}
window.blJs= blJs, window.$ = blJs;
&lt;/pre&gt;

&lt;p&gt;Logo definimos que &lt;strong&gt;blJs.fn&lt;/strong&gt; é igual a &lt;strong&gt;blJs.prototype&lt;/strong&gt;, onde declaramos nosso novo método. O método esconde, que seleciona a div por meio de querySelector(this.myArg) e esconde o elemento alvo por meio de um display:none.&lt;/p&gt;

&lt;p&gt;Ao final da nossa função imediata, definimos que window.blJs será igual a nossa função “blJs”, para podermos chamar nossa biblioteca fora do escopo da função imediata. Veja como é simples definir um alias para nossa biblioteca: é só referenciar o window.$ à nossa função blJs.&lt;/p&gt;

&lt;h1 id=&#34;finalizando&#34;&gt;Finalizando&lt;/h1&gt;

&lt;p&gt;Agora é só sorrir e correr para o abraço ☺. Sua biblioteca javascript já está pronta para ser usada. É só utilizar a chamada do inicio:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(“div”).esconde() ou blJs(“div”).esconde()&lt;/pre&gt;

&lt;p&gt;Visualize o código completo no &lt;a title=&#34;clique para visualizar o código completo&#34; href=&#34;https://github.com/clovisdasilvaneto/blJs&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bem, amigos ninjas, por hoje é só. Caso tenha alguma dúvida, deixem seu comentário.&lt;/p&gt;

&lt;p&gt;Espero que tenham curtido o artigo. Compartilhem e até a próxima!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>