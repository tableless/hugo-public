<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scrum on Tableless</title>
    <link>http://tableless.com.br/tags/scrum/index.xml</link>
    <description>Recent content in Scrum on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/scrum/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>O Product Owner deve estar na Sprint Retrospective?</title>
      <link>http://tableless.com.br/o-product-owner-deve-estar-na-sprint-retrospective/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-product-owner-deve-estar-na-sprint-retrospective/</guid>
      <description>&lt;p&gt;Existe uma polêmica entre os usuários da metodologia e na comunidade agilista quanto a não participação deste membro na retrospectiva. Pense um momento nesta hipótese:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Scrum Master em conjunto com o time de desenvolvedores, decidem que testers não farão mais parte das retrospectivas. Eles não são necessários, pois eles não são parte do time, suas atividades são diferentes das de desenvolvimento e seus feedback’s são irrelevantes.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pensou? É tão estranho de criar a hipótese quanto de praticá-la, certo?!&lt;/p&gt;

&lt;p&gt;Então porque você deveria cogitar deixar um membro do time como o &lt;em&gt;Product Owner&lt;/em&gt; de fora da cerimonia onde de acordo com o &lt;a href=&#34;http://www.agilemanifesto.org/iso/en/principles.html&#34;&gt;Principles behind the Agile Manifesto&lt;/a&gt;, “a equipe reflete sobre como se tornar mais eficaz e então refina e ajusta seu comportamento de acordo.”.&lt;/p&gt;

&lt;p&gt;Em seu livro &amp;#8216;&lt;a href=&#34;http://amzn.to/295UAz0&#34;&gt;Scrum &amp;#8211; Gestão Ágil para projetos de Sucesso&lt;/a&gt;&amp;#8216; Rafael Sabbagh apresenta dois motivos a serem observados, em um momento quando um P.O. não colaborativo poẽm-se em um nível hierárquico superior ao time e assim causa intimidação no restante do time e um segundo motivo quando a intimidação ocorre em sentido oposto, e o mesmo vira alvo de reclamações e acusações. Para ambos motivos, o autor oferece a solução: o &lt;em&gt;Scrum Master&lt;/em&gt;, é dele o papel de facilitar e garantir uma participação efetiva de todos os membros do time e impedir que estas disfunções ocorram.&lt;/p&gt;

&lt;p&gt;Podemos citar um exemplo em que o &lt;em&gt;Product Owner&lt;/em&gt; tenta interferir diretamente nos estudos de técnicas para automação de deploy implantadas pelo time, alegando que estas impactariam no tempo de desenvolvimento e acarretariam no atraso da sprint release e consequente entrega do produto final. Também é possível analisar esta situação pelo lado oposto, onde o time de desenvolvimento aborda aspectos e informações técnicas corrompendo a visão holística do P.O.. Faisal Mahmood, em seu artigo &lt;a href=&#34;http://www.accelright.com/detail-Should-the-Product-Owner-Attend-Daily-Scrum,-Product-Owner-and-Team-Engagement_63.html#sthash.3XBtjGxD.dpuf&#34;&gt;Should the Product Owner Attend Daily Scrum, Product Owner and Team Engagement&lt;/a&gt;, sinaliza o que será a solução para o cenário apresentado acima, o Product Owner não precisa estar presente o tempo inteiro da cerimonia, bastando que ele pratique um &amp;#8216;&lt;em&gt;step aside&lt;/em&gt;&amp;#8216; e se retire da sala enquanto da liberdade ao time de abordar assuntos estritamente técnicos e que por muitas vezes não pertencem ao cotidiano deste importante papel dentro do &lt;em&gt;Scrum&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Portanto, quando você deixa de incluir seu &lt;em&gt;Product Owner&lt;/em&gt; na retrospectiva ele perde uma importante oportunidade de receber/oferecer um feedback ao time, dificultando a consolidação de um dos pilares do &lt;em&gt;Scrum&lt;/em&gt; que é o processo de transparência, inspeção e adaptação, gera distanciamento do P.O. com o time, acarretando problemas de comunicação e relações no dia a dia, e na minha opinião, a pior das consequências, permite ao time desenvolvimento ter a &lt;strong&gt;falsa idéia&lt;/strong&gt; de que o &lt;em&gt;Product Owner&lt;/em&gt; é um mero &lt;em&gt;proxy&lt;/em&gt; de demandas e não faz parte do Time de &lt;em&gt;Scrum&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O P.O. não só pode, como deve estar presente na cerimônia. Espero e desejo que sua próxima retrospectiva, todos os membros do seu Time de &lt;em&gt;Scrum&lt;/em&gt; estejam presentes!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quando o Scrum irá falhar</title>
      <link>http://tableless.com.br/quando-o-scrum-ira-falhar/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/quando-o-scrum-ira-falhar/</guid>
      <description>

&lt;p&gt;Nesse artigo vamos abordar um pouco os pontos críticos do Scrum, a intenção aqui não é explicar o framework (o Scrum é considerado um framework para gestão de projetos) em si, mas dar um panorama dos casos mais comuns de falhas críticas ao se tentar adotar o Scrum ou modificá-lo. Caso esteja procurando um artigo para entender melhor o que é o Scrum, recomendo esse &lt;a href=&#34;http://tableless.com.br/desenvolvimento-agil-utilizando-scrum/&#34;&gt;aqui&lt;/a&gt;, escrito pela Dani Guerrato. Ou ainda, caso queira mergulhar de cabeça recomendo a leitura do &lt;a href=&#34;http://www.scrumguides.org/docs/scrumguide/v1/Scrum-Guide-Portuguese-BR.pdf&#34;&gt;Scrum Guide&lt;/a&gt; (em português).&lt;/p&gt;

&lt;p&gt;Introdução feita, vamos ao que realmente interessa aqui: O Scrum não é uma bala de prata (a essa altura você já deve saber que nenhuma metodologia ágil é). Se você, assim como eu, já foi (ou é) responsável por trazê-lo para sua empresa, esteja atento ao seu ambiente e aprenda com a implementação do Scrum. Citarei aqui e explicarei sobre cada um dos pontos críticos do Scrum:&lt;/p&gt;

&lt;h2 id=&#34;quando-a-comunicação-não-é-suficiente&#34;&gt;Quando a comunicação não é suficiente&lt;/h2&gt;

&lt;p&gt;Esse talvez seja o mais óbvio ponto crítico do Scrum. Em qualquer projeto, a comunicação se faz necessária, mas diferente de outras metodologias de gerenciamento de projeto, o Scrum delega a responsabilidade do gerenciamento à própria equipe de desenvolvimento e daí a comunicação se torna ainda mais crítica. Como uma equipe pode chegar a um consenso e se autogerenciar se não há uma boa (ou nenhuma) comunicação? Sem comunicação, não há gerenciamento.&lt;/p&gt;

&lt;p&gt;Portanto Scrum Master (ou não), fique atento a esse ponto, ao perceber pequenos atritos não resolvidos, desgaste ou qualquer sinal de que a comunicação do time de desenvolvimento, Product Owner ou até mesmo a sua, não esta indo bem. Trabalhe em cima disso.&lt;/p&gt;

&lt;p&gt;Existe um artefato que tem como objetivo garantir uma comunicação mais fluída e um gerenciamento mais democrático e dinâmico: Planning Poker. Nele todos os membros da equipe de desenvolvimento jogam cartas para determinar o peso de cada estória de usuário. Ao jogarem cartas distintas para uma mesma User Story, é discutido (geralmente entre os jogadores que colocaram os dois pontos mais distantes) o motivo deles avaliarem aquela estória daquela forma; e Mike Cohn defende que você considere uma estória como avaliada somente quando todos do time chegarem a um consenso quanto ao peso daquela estória. Isso garante o diálogo, além de melhorar o comprometimento e a motivação.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;quando-a-motivação-acaba&#34;&gt;Quando a motivação acaba&lt;/h2&gt;

&lt;p&gt;Como garantir algo tão subjetivo durante todo o projeto? Esse é um problema grave não só no Scrum, mas em qualquer outra metodologia ágil. E a resposta é como esperado: você não garante!&lt;/p&gt;

&lt;p&gt;Então nada pode ser feito para que sua equipe se motive? Não, o fato de que motivação é algo subjetivo, não quer dizer que você não possa prover as ferramentas ou o ambiente necessário para sua equipe continuar seguindo motivada.&lt;/p&gt;

&lt;p&gt;Vou considerar aqui que os colaboradores com quem você convive já são pessoas motivadas por natureza, que é o que se espera num ambiente ágil, e que é necessário apenas manter a motivação. Então vou citar aqui os principais motivos que levam um colaborador a se desmotivar durante o projeto:&lt;/p&gt;

&lt;p&gt;&lt;li style=&#34;font-weight: 400&#34;&gt;
  Stakeholders não comprometidos, mas envolvidos apenas com cobranças desalinhadas. Sabe aquele cliente que nunca comparece aos eventos Scrum e um belo dia resolve ficar a par do projeto? Esse cliente geralmente vai acabar com sua Sprint, vai destruir a blindagem do seu time de desenvolvimento e deixará seu Product Owner (caso não seja ele mesmo) louco. Tenha um cuidado especial com o efeito negativo desse stakeholder na motivação do seu time.
&lt;/li&gt;
&lt;li style=&#34;font-weight: 400&#34;&gt;
  Projetos longos que não se renovam. Não me entenda mal. As metodologias ágeis existem com o lema de que mudanças são sempre bem vindas, mas se um projeto se alonga por tempo demasiado você irá perceber um certo desânimo na sua equipe. Principalmente se são mudanças que exigem uma série de atividades desgastantes e que acabam levando o projeto a situações do passado (desfazer estórias de usuário é uma das mais críticas).
&lt;/li&gt;
&lt;li style=&#34;font-weight: 400&#34;&gt;
  Equipe muito pouco reconhecida por projetos. Nada pior que uma entrega ou finalização de projeto com sucesso, onde o time scrum (PO, SM e equipe de desenvolvimento) não é nem sequer reconhecido pelo seu bom trabalho. É válido destacar aqui que o desenvolvimento ágil tem como objetivo entregar produtos com muito mais valor ao cliente, contudo é mais desgastante para os comprometidos com o projeto. Por isso eu recomendo a qualquer gestor que ao término de cada projeto crie sua maneira de bonificar (isso varia de acordo a sua cultura organizacional) a equipe. Lembre-se sempre de que coisas simples como uma pizza, um happy hour ou qualquer outro tipo de confraternização é suficiente para levantar o moral e deixar sua equipe pronta para o próximo projeto.
&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;quando-os-pontos-negativos-individuais-interferem-no-trabalho-em-equipe&#34;&gt;Quando os pontos negativos individuais interferem no trabalho em equipe&lt;/h2&gt;

&lt;p&gt;Como saber se sua equipe trabalha bem em time? Em alguns casos temos uma equipe madura o suficiente para termos um trabalho em equipe direto e enxuto. Mas quando isso não acontece? Quando um membro do time insiste em ser prolixo nas reuniões? Ou quando questões pequenas consomem mais tempo de discussão do que realmente importa? Quem é o responsável por fazer essas coisas funcionarem?&lt;/p&gt;

&lt;p&gt;Bem, considerando que temos um líder-servo como papel do Scrum (Scrum Master), cai sobre ele a responsabilidade com toda sua habilidade para servir e liderar ao mesmo tempo lidar com essa situação.&lt;/p&gt;

&lt;p&gt;Uma boa abordagem é fazer mentorias (aconselhamentos ou tutorias) individuais em pequenas reuniões (bate-papos). Faça com que todo o processo seja o menos assustador possível para aquele que deve ter pontos negativos trabalhados, lembre-se que motivação é uma das chaves do desenvolvimento ágil e você não quer perder um membro motivado em pleno desenvolvimento do projeto, certo? Portanto, o recomendável é fazer da forma mais sutil possível: entenda os motivos que levam o membro a agir daquela forma e através de sugestões e conselhos mostre como ele pode ser mais produtivo para o time como um todo. Lembre-se, o Scrum Master deve ter um excelente conhecimento de sua equipe, logo, essas pequenas mentorias e bate-papos devem ser feitos constantemente.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;quando-o-po-não-encontra-o-cliente&#34;&gt;Quando o PO não encontra o cliente&lt;/h2&gt;

&lt;p&gt;Essa é a maior falha em todo projeto, seja em uma metodologia ágil ou clássica.&lt;/p&gt;

&lt;p&gt;Nesse cenário seu time entrega o que promete com excelência, as cerimonias são cumpridas com precisão, o seu burndown encontra-se impecável.&lt;/p&gt;

&lt;p&gt;Mas nada do que é entregue é realmente um agregador de valor ao cliente final e provavelmente isso se dará quando o seu Product Owner estiver falando com o Stakeholder errado!&lt;/p&gt;

&lt;p&gt;Pegando um exemplo simples e claro: Imagine que sua empresa está desenvolvendo um sistema de ponto para uma fábrica, o dono da empresa é seu principal Stakeholder e o Product Owner mantém constante contato com ele. Porém a cada finalização de Sprint você nota que muito trabalho teve que voltar ao backlog ou teve que ser reescrito em outras estórias de usuário. O exemplo ilustra um sinal claro, que um PO atento logo se alarmara, de que é hora de trazer um novo Stakeholder à frente do projeto e ouvi-lo falar sobre qual será o produto ideal para ele.&lt;/p&gt;

&lt;p&gt;É muito comum, porém, que nem sempre o seu cliente final seja alguém próximo. Ou até mesmo que seu Stakeholder nem sequer o conheça! Aqui entram algumas técnicas do desenvolvimento Lean que eu acho bastante interessantes e que pode ser muito útil para sua empresa e seu trabalho receberem recomendações futuras por salvar a vida de um Stakeholder perdido.&lt;/p&gt;

&lt;p&gt;Se você já vem trabalhando com Scrum, para entender o Lean é apenas mais alguns passos adiante, por tanto irei abordar aqui rapidamente, mas caso tenha interesse deixarei esse &lt;a href=&#34;http://theleanstartup.com/&#34;&gt;link&lt;/a&gt; para maior aprofundamento. O Lean basicamente propõe que você desenvolva um MVP (Minimo Produto Viável, em português), para entrar num ciclo de Construir, Medir e Aprender. Isso tudo feito em pequenas iterações onde cada ciclo completo você tem uma nova iteração 100% funcional (até agora bem familiar, correto?).&lt;/p&gt;

&lt;p&gt;O ponto principal para você que acabou tendo que conhecer o cliente final do seu cliente, sem mesmo que ele o conheça, é que a cada etapa de Medir e Aprender você deve focar em conhecer mais sobre o usuário final: Teste A/B, Personas, teste presenciais de um possível usuário final, heatmap e muitas outras são técnicas e ferramentas válidas para esse momento. Se você não conhece nenhum dos nomes citados anteriormente, convido-o para que faça uma pausa e dê uma lida, ou ao menos separe alguns materiais para uma lida no futuro.&lt;/p&gt;

&lt;h2 id=&#34;quando-o-time-não-é-seu-próprio-gerente&#34;&gt;Quando o time não é seu próprio gerente&lt;/h2&gt;

&lt;p&gt;E quando o projeto inteiro é negociado sem conhecimento algum do time de desenvolvimento? E ao avaliar as estórias de usuários se dão conta de que o projeto iria demorar cerca de 6 meses, mas que a negociação e o contrato foram fechados para um prazo de 2 meses? Aqui está claro o problema: o time de desenvolvimento não é seu próprio gerente, suas cerimônias e artefatos estão perdidos! (Meio dramático, eu sei)&lt;/p&gt;

&lt;p&gt;Mas isso serve para reforçar que esse é um dos momentos mais frustrantes para a equipe de desenvolvimento, pois não será refeita a negociação e sim serão apertados os prazos e as estimativas serão direcionadas por fatores externos.&lt;/p&gt;

&lt;p&gt;Se você está percebendo um grande problema aqui, você provavelmente já pegou bem a ideia do Scrum… O time de desenvolvimento não mais se encontra blindado e será constantemente influenciado por fatores externos, tais como: cliente, diretores, gerentes ou qualquer nível hierárquico que sua empresa possa possuir. Isso é grave… Isso é muito grave!&lt;/p&gt;

&lt;p&gt;Se você pode evitar essa situação faça!&lt;/p&gt;

&lt;p&gt;Caso contrário futuramente será totalmente irremediável durante a execução do projeto e provavelmente fará com que seu time constantemente acabe passando algumas etapas da iteração por cima de outras, levando à um projeto concluído com baixa qualidade e que possivelmente gerará dores de cabeça para seu cliente e por consequência para você em um futuro muito próximo.&lt;/p&gt;

&lt;p&gt;Obrigado por ler até aqui, espero ter apresentado pontos a serem analisados por você e evitados! Caso tenha mais algum ponto crítico que acha interessante que seja adicionado a esse artigo, elogio ou crítica deixe um comentário 😀&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Desenvolvimento ágil utilizando Scrum</title>
      <link>http://tableless.com.br/desenvolvimento-agil-utilizando-scrum/</link>
      <pubDate>Thu, 06 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/desenvolvimento-agil-utilizando-scrum/</guid>
      <description>

&lt;p&gt;No artigo de hoje vamos conhecer os eventos, papéis e artefatos do Scrum e como adapta-los para organizar o seu fluxo de trabalho do dia-a-dia.&lt;/p&gt;

&lt;h2 id=&#34;o-que-significa-desenvolvimento-ágil&#34;&gt;O que significa desenvolvimento ágil?&lt;/h2&gt;

&lt;p&gt;Desenvolvimento ágil é um conjunto de estratégias para gerenciamento de projetos incremental e com ciclos de desenvolvimentos rápido. As vantagens disto são: melhoria continua de um projeto, frequente resolução de problemas e aumento da produtividade. O conceito surgiu em em oposição ao método cascata, no qual o desenvolvimento é linear.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-scrum&#34;&gt;O que é Scrum?&lt;/h2&gt;

&lt;p&gt;O Scrum é um framework para a resolução de problemas. Ou seja, um conjunto de diretrizes e ferramentas que podem auxilia-lo a gerir um projeto. A vantagem do Scrum em relação a outros métodos agéis é que ele é relativamente simples de implementar e extremamente útil em situações onde é difícil prever os problemas futuros. O método também é mais democrático já que as opiniões de todos são igualmente ouvidas e desta maneira fica muito mais fácil estimar prazos, definir funções e criar soluções.&lt;/p&gt;

&lt;p&gt;A base do Scrum é o empirismo. Ou seja, a teoria de que só conhecemos algo de fato através da experiência. E isto é muito visível no nosso mundo de desenvolvimento web, por exemplo. Os clientes fatalmente vão pedir alterações no escopo inicial, bugs vão acontecer, imprevistos vão surgir e negar mudanças pode não ser o melhor caminho para entregar um produto final de qualidade para a sua equipe, os clientes e usuários. Mas é necessário um conjunto de regras para acomodar estas mudanças ou você pode cair em um ciclo de perda de tempo sistematico. O Scrum basicamente é um conjunto de estratégias que vão te ajudar a vencer este tipo de cenário, comum a todas as profissões. O conceito foi criado inicialmente para ser utillizado em empresas de fabricação de automóveis, mas por sua natureza interdisciplinar acabou sendo adaptado para diversas outras áreas. Existem pessoas utilizando metodologias inspiradas no Scrum para organizar empresas, planejar festas, e até para &lt;a href=&#34;http://online.wsj.com/article/SB10001424127887323452204578288192043905634.html&#34; title=&#34;Family Inc&#34;&gt;lidar com problemas familiares&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O termo Scrum surgiu do rugby. No jogo a palavra scrum descreve a formação ordenada dos jogadores em determinados momentos da partida. A inspiração aqui vem da união que equipes esportivas necessitam para vencer o jogo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-37513&#34; alt=&#34;scrum-rugby&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/scrum-rugby.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/05/scrum-rugby.jpg 660w, uploads/2013/05/scrum-rugby-277x168.jpg 277w, uploads/2013/05/scrum-rugby-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-que-você-precisa-para-colocar-na-prática&#34;&gt;O que você precisa para colocar na prática&lt;/h2&gt;

&lt;p&gt;Se você pesquisar por &amp;#8220;Scrum&amp;#8221; vai encontrar diversas cursos, livros e ferramentas online gratuitas e pagas. Mas é importante ressaltar que você não precisa necessariamente pagar por qualquer serviço. Você pode utilizar planilhas de dados, documentos de texto, quadros de notas ou até &amp;#8211; pasmem! &amp;#8211; folhas de papel. Obviamente não sou contra e não estou desvalorizando qualquer curso / certificado / ferramenta / etc. É claro que qualquer iniciativa de buscar mais conhecimento é válida e estes recursos podem agilizar ainda mais o seu trabalho. Mas você não precisa ser um Mestre Certificado XYZ ou qualquer título pomposo para utilizar esta metodologia. Você só precisa sentar com a sua equipe e organizar as tarefas. E é isto que vai gerar resultados positivos no seu empreendimento.&lt;/p&gt;

&lt;p&gt;Com isto em mente vamos conhecer um pouco sobre como o Scrum funciona!&lt;/p&gt;

&lt;h2 id=&#34;o-time-scrum&#34;&gt;O Time Scrum&lt;/h2&gt;

&lt;p&gt;O Time Scrum é um conjunto multi-disciplinar de profissionais. Estes times devem ser autogeridos, ou seja, não existe hierarquia ou a figura de um líder. O time deve decidir, em conjunto a melhor forma de completar o seu trabalho ao invés de receber ordens externas de alguem que não faz parte da equipe e por isto não tem o conhecimento empirico para determinar prazos, por exemplo. A opinião de todos deve ser igualmente ouvida e respeitada. Mas existem alguns papéis fixos para auxiliar o bom andamento do trabalho.&lt;/p&gt;

&lt;h3 id=&#34;product-owner&#34;&gt;Product Owner&lt;/h3&gt;

&lt;p&gt;A responsabilidade do Product Owner, ou Dono do Produto, é garantir a qualidade do trabalho. Este cara representa a voz do cliente, do dono da empresa, dos investidores, enfim, de todas as pessoas externas a equipe&amp;#8230; Ele é responsável por traduzir as histórias dos usuários em uma lista de tarefas concretas, expressar claramente quais são as funcionalidades a serem desenvolvidas e definir a prioridade de cada uma de uma forma objetiva.&lt;/p&gt;

&lt;h3 id=&#34;scrum-master&#34;&gt;Scrum Master&lt;/h3&gt;

&lt;p&gt;O Scrum Master, ao contrário do que o título pode sugerir, não manda na equipe. Muito pelo contrário, o Scrum Master serve a equipe. A função dele é facilitar o bom andamentos dos jobs e garantir que todos tenham as ferramentas necessárias para cumprir suas tarefas. Tipicamente o Scrum Master é o cara que conhece melhor as regras do Scrum e portanto consegue organizar o jogo de maneira mais efetiva. Ele é uma mistura de professor, gerente e ombro amigo.&lt;/p&gt;

&lt;h3 id=&#34;equipe-de-desenvolvimento&#34;&gt;Equipe de desenvolvimento&lt;/h3&gt;

&lt;p&gt;Um pequeno grupo de pessoas (os tradicionalistas sugerem de 4 a 9) com cargos diferentes que vai trabalhar junto para cumprir as metas estabelecidas. É a galera que vai por a mão na massa e entregar um produto &amp;#8220;pronto&amp;#8221; ao final do ciclo de desenvolvimento. No caso de desenvolvimento web teríamos designers, programadores, front-enders, profissionais de UX, etc. Não importa o seu cargo todos tem o mesmo título: desenvolvedor.&lt;/p&gt;

&lt;h2 id=&#34;eventos&#34;&gt;Eventos&lt;/h2&gt;

&lt;p&gt;Quem nunca perdeu tempo em uma reunião longa e sem propósito? As vezes conversar demais (e fazer de menos) pode ser prejudicial para qualquer empresa. Pensando nisso todos os eventos Scrum são time-boxed, ou seja, tem uma duração fixa de tempo. Desta forma a comunicação é sempre mais clara, objetiva e ágil.&lt;/p&gt;

&lt;h3 id=&#34;sprint&#34;&gt;Sprint&lt;/h3&gt;

&lt;p&gt;Se você puder lembrar apenas de um termo do Scrum lembre-se deste: Sprint. As pessoas comuns dividem o tempo em dias, meses, horas&amp;#8230; Os adeptos do Scrum dividem o tempo em ciclos de desenvolvimento chamados Sprints. Basicamente uma Sprint é período de tempo que você determinou para cumprir uma determinada tarefa, uma corrida para atingir uma meta. A idéia é ter algo concreto e funcional no final da Sprint. Estes ciclos devem ser períodos de tempo curtos e fixos. Você estipula anteriormente a duração das Sprints (recomenda-se de uma semana a 1 mês). Uma sprint deve começar imediatamente após o termino de outra.&lt;/p&gt;

&lt;p&gt;Durante a Sprint não é possível alterar os objetivos estabelecidos para aquele ciclo ou os profissionais integrantes da equipe. Isto é super importante para garantir a produtividade. Mas se os objetivos tornarem-se obsoletos o Product Owner pode simplesmente cancelar a Sprint.&lt;/p&gt;

&lt;p&gt;Sprints são divididas em etapas menores: reunião de planejamento, reuniões diárias, o trabalho de desenvolvimento em si, revisão e retrospectiva.&lt;/p&gt;

&lt;h3 id=&#34;reunião-de-planejamento&#34;&gt;Reunião de Planejamento&lt;/h3&gt;

&lt;p&gt;Nesta reunião serão definidos todos os objetivos da Sprint. Nas regras oficiais, considerando um sprint de 1 mês, esta reunião tem a duração de 8 horas. Você pode adaptar isto proporcionalmente de acordo com o seu ciclo de Sprint. Se o seu Sprint é de 1 semana, por exemplo, esta reunião terá a duração máxima de 2 horas. Em cada metade da reunião duas perguntas devem ser respondidas:&lt;/p&gt;

&lt;p&gt;&amp;#8211; O que será entregue como resultado?&lt;/p&gt;

&lt;p&gt;&amp;#8211; Como o trabalho necessário para entregar o produto será realizado?&lt;/p&gt;

&lt;h3 id=&#34;reunião-diária&#34;&gt;Reunião Diária&lt;/h3&gt;

&lt;p&gt;A idéia da reunião diária, ou stand-up meeting, é juntar a equipe para um bate-papo de 15 minutos no máximo para revisar o andamento do projeto. Cada membro da equipe deve responder as seguintes perguntas:&lt;/p&gt;

&lt;p&gt;&amp;#8211; O que eu consegui completar ontem?&lt;/p&gt;

&lt;p&gt;&amp;#8211; O que farei hoje?&lt;/p&gt;

&lt;p&gt;&amp;#8211; Quais obstáculos estão impedindo o meu progresso?&lt;/p&gt;

&lt;p&gt;A função do Scrum Master é moderar a dinâmica e tentar ao máximo solucionar os obstáculos apresentados para que a Sprint seja bem sucedida.&lt;/p&gt;

&lt;p&gt;Ah, e se você está se perguntando o por que do nome é que a recomendação é que estas reuniões sejam realizadas com todos de pé (do inglês stand-up). Desta maneira a reunião não se prolonga por muito tempo e todos ficam mais focados. Na minha opinião pessoal isto é um pouco formal e austero demais. Se você está sentado, de pé ou de ponta-cabeça em marte não é tão relevante quanto responder as perguntas e o respeito ao limite de tempo&amp;#8230; Muitas vezes pausar para tomar um café (sentado) pode tornar estas reuniões muito muito mais confortáveis, agradáveis e divertidas para todos.&lt;/p&gt;

&lt;h3 id=&#34;revisão-da-sprint&#34;&gt;Revisão da Sprint&lt;/h3&gt;

&lt;p&gt;A idéia aqui, obviamente, é revisar todos os itens desenvolvidos e demonstrar o produto final. A duração desta reunião considerando um sprint de um mês é 4 horas.&lt;/p&gt;

&lt;h3 id=&#34;retrospectiva-da-sprint&#34;&gt;Retrospectiva da Sprint&lt;/h3&gt;

&lt;p&gt;A sprint acabou! Agora é hora de olhar para trás e repensar o que deu certo, o que deu errado e planejar o que pode ser melhorado no futuro.&lt;/p&gt;

&lt;h2 id=&#34;artefatos&#34;&gt;Artefatos&lt;/h2&gt;

&lt;p&gt;Vamos ser sinceros: artefato é só um nome mais estiloso para documento ou ferramenta. Mas eles ajudam a facilitar a sua vida&amp;#8230;&lt;/p&gt;

&lt;h3 id=&#34;product-backlog&#34;&gt;Product Backlog&lt;/h3&gt;

&lt;p&gt;O product backlog é uma compilação de tudo o que o seu cliente gostaria de realizar no projeto. Pense com uma grande wishlist com todos os recursos e funcionalidades que os usuários gostariam de ver presentes no trabalho final. Esta lista deve ser organizada pelo Product Owner de acordo com valor, risco, prioridade e necessidade. Por natureza o backlog é algo dinâmico e muda constantemente para incluir as novas solicitações dos clientes, usuários e do mercado em si. Desta forma os produtos são sempre aperfeiçoados em cada Sprint.&lt;/p&gt;

&lt;h3 id=&#34;sprint-backlog&#34;&gt;Sprint Backlog&lt;/h3&gt;

&lt;p&gt;Certo, agora que já sabemos tudo o que precisa ser realizado, a equipe define as tarefas a serem desenvolvidas na próxima Sprint. Esta listinha é conhecida como &amp;#8211; surpresa! &amp;#8211; Sprint Backlog. O Sprint Backlog é necessariamente um afunilamento mais detalhado do Product Backlog.&lt;/p&gt;

&lt;h3 id=&#34;incremento&#34;&gt;Incremento&lt;/h3&gt;

&lt;p&gt;É o produto que deve estar &amp;#8220;pronto&amp;#8221; após a Sprint. Pronto aqui é uma palavra relativa já que o incremento pode (e deve) ser aperfeiçoado em próximos Sprints. Cada equipe vai definir anteriormente o que pronto significa de acordo com o contexto. É importante, no entanto, que o incremento seja algo concreto e utilizável. Uma demo de software ou uma página que possa ser navegada pelo usuário, por exemplo.&lt;/p&gt;

&lt;h3 id=&#34;burndown-chart&#34;&gt;Burndown Chart&lt;/h3&gt;

&lt;p&gt;É um gráfico que tem a função de monitorar o desenvolvimento da equipe. Funciona da seguinte maneira: todos os dias você anota quantas tarefas do seu Sprint Backlog foram efetivamente cumpridas. Desta maneira você pode saber com antecedência a velocidade que sua equipe trabalha. Este gráfico facilita a previsão de prazos futuros e até mesmo deduzir se a deadline vai estourar. O Burndown Chart é criado tendo como base dois eixos: um vertical representando a quantidade de trabalho que existe a ser feito e um horizontal para o tempo. A linha diagonal mostrará a velocidade da equipe ao completar as tarefas. Você pode utilizar alguma ferramenta para gerar automaticamente este gráfico ou até mesmo montar um utilizando lápis e papel. De qualquer forma a Burndown Chart é uma ótima maneira de medir o nível de produtividade do seu projeto. Lembrando sempre que não dá pra adivinhar o futuro com precisão. A base do Scrum ainda é a experiência empírica.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-37512&#34; alt=&#34;burndown-chart&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/burndown-chart.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/05/burndown-chart.jpg 660w, uploads/2013/05/burndown-chart-277x168.jpg 277w, uploads/2013/05/burndown-chart-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;kanban-boards&#34;&gt;Kanban Boards&lt;/h3&gt;

&lt;p&gt;Não é tradicionalmente parte do Scrum, mas é uma boa ferramenta de planejamento e funciona bem em conjunto com o framework. Basicamente é um quadro &amp;#8211; ou um app, folha de papel, parede em branco, etc &amp;#8211; com quatro lista de tarefas: &amp;#8220;para fazer&amp;#8221;, &amp;#8220;em progresso&amp;#8221;, &amp;#8220;esperando verificação&amp;#8221; e &amp;#8220;feito&amp;#8221;. Esta é uma ótima maneira de visualizar rapidamente o status de um projeto, independentemente do uso do Scrum.&lt;/p&gt;

&lt;h2 id=&#34;um-exemplo-concreto&#34;&gt;Um exemplo concreto&lt;/h2&gt;

&lt;p&gt;Artefatos, mestres, papéis. A primeira vista tudo isto pode parecer mais um jogo de RPG do que um framework de gerenciamento de projetos&amp;#8230; Mas na verdade tudo é mais simples do que parece. Vou exemplificar com uma situação real.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-37511&#34; alt=&#34;scrum&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/05/scrum.jpg&#34; width=&#34;660&#34; height=&#34;400&#34; srcset=&#34;uploads/2013/05/scrum.jpg 660w, uploads/2013/05/scrum-277x168.jpg 277w, uploads/2013/05/scrum-511x310.jpg 511w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A sua empresa tem um cliente X que quer lançar um novo site. Um gerente de projetos (Product Owner) faz um briefing e levanta todas as necessidades do site (Users Stories). Ele se reúne com os profissionais de design, front-end e back-end (Equipe de Desenvolvimento) para definir todas as tarefas necessárias para produzir o projeto (Reunião de planejamento) e formaliza isto em uma lista de tarefas (Product Backlog). Você (Scrum Master) fica encarregado de organizar as reuniões e garantir que todos entendam as tarefas. A equipe decide democraticamente que vai entregar a página inicial pronta (Objetivo) até o final da semana (Sprint). A equipe então divide o objetivo em tarefas menores (Sprint Backlog) como criar o layout, desenvolver o HTML e CSS, implantar um sistema de administração de conteúdo e testar tudo em diversos browsers. Cada um escolhe que tarefas gostaria de realizar, define um prazo de duração em horas para cada tarefa e diariamente vocês se reúnem por 15 minutos para acompanhar o andamento do projeto (Reunião Diária). Ao final da semana vocês apresentam o resultado (Revisão da Sprint) e refletem sobre dificuldades e quais melhorias podem ser feitas na próxima semana (Retrospectiva da Sprint). Mas mais importante de tudo vocês entregaram um produto parcial, porém funcional (Incremento) para o cliente. A partir do feedback de todos vocês decidem qual vai ser a tarefa a ser realizada na próxima semana. E assim o ciclo recomeça!&lt;/p&gt;

&lt;h2 id=&#34;scrum-but-8230&#34;&gt;Scrum But&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Algumas pessoas mais tradicionalistas consideram praticamente uma heresia modificar alguns conceitos do Scrum, prática esta que foi apelidada pejorativamente de &amp;#8220;Scrum But&amp;#8221; (no sentido de &amp;#8220;Eu uso o Scrum, mas XYZ&amp;#8230;&amp;#8221;). Eu sou da filosofia que você deve adaptar o que for útil para você, sua equipe e seu ambiente de trabalho. Sem dogmas.&lt;/p&gt;

&lt;h2 id=&#34;scrum-solo&#34;&gt;Scrum solo?&lt;/h2&gt;

&lt;p&gt;O Scrum é uma ótima metodologia para equipes, mas se você é um desenvolvedor solitário ainda pode aproveitar boa parte dos conceitos de gerenciamento de projetos. Neste caso obviamente você cumpre todos os papéis ao mesmo tempo, mas, bem&amp;#8230; se você é um freelancer já está acostumado com isto, certo? Reuniões Diárias também não acontecem da mesma maneira (a não ser que você curta falar sozinho), mas é interessante tirar 15 minutos do seu tempo para repensar o projeto, revisar as tarefas e verificar se você está de fato conseguindo concluir as metas no prazo estipulado e determinar os próximos caminhos. Os artefatos e processos continuam os mesmos. É necessário ter mais disciplina para organizar e documentar o projeto, afinal você é praticamente um exercito de um homem só. Mas trabalhar sozinho pode ter suas vantagens. No final do dia o lucro é só seu&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;é-para-você&#34;&gt;É para você?&lt;/h2&gt;

&lt;p&gt;A proposta destas ferramentas é agilizar os processos de desenvolvimento de projetos, mas devemos tomar cuidado para que estas regras não engessem o fluxo de trabalho. Frameworks como o Scrum podem facilitar o desenvolvimento ou burocratizar processos. Tudo depende da forma que você coloca estas regrinhas na prática. É necessário possuir flexibilidade e visão critica para decidir o que funciona melhor para a sua equipe. Estes fundamentos foram criados tendo como base desenvolvimento de softwares, algo que costuma demandar bem mais tempo do que webdesign, por exemplo. Considerando uma empresa que possua múltiplos projetos simultaneos a coisa pode ficar ainda mais complicada.&lt;/p&gt;

&lt;p&gt;Pode ser constrangedor explicar para um cliente por que ele não pode ter uma mudança simples como a correção de um erro de ortografia imediatamente só por que este requisito não estava no Backlog da Sprint (como bem demonstrado &lt;a href=&#34;http://youtu.be/Sygm9x9sBEo&#34; title=&#34;Another perspective on SCRUM&#34;&gt;nesta sátira&lt;/a&gt;). Eu pessoalmente gosto de separar um tempinho para resolver pepinos que não estavam previstos no Sprint. Outras pessoas preferem o suporte psicológico de métodos fixos com etapas de tempo mais bem delineadas. De qualquer forma é fundamental determinar metas a longo e médio prazo com estimativas de tempo realísticas. E acompanhar de perto se estas metas estão sendo cumpridas e, caso a resposta seja não, verificar o que deve ser corrigido. Ainda assim é interessante conhecer frameworks agéis. Pequenas mudanças no fluxo de trabalho, como as propostas pelo Scrum, podem ter um impacto super positivo no seu dia-a-dia.&lt;/p&gt;

&lt;h4 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.scrum.org/Scrum-Guides&#34; title=&#34;Scrum Guide&#34;&gt;Scrum Guide&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>