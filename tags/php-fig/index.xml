<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php Fig on Tableless</title>
    <link>http://tableless.com.br/tags/php-fig/index.xml</link>
    <description>Recent content in Php Fig on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/php-fig/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Entendendo o padrão MVC na prática</title>
      <link>http://tableless.com.br/entendendo-o-padrao-mvc-na-pratica/</link>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/entendendo-o-padrao-mvc-na-pratica/</guid>
      <description>&lt;p&gt;Práticas modernas do PHP exigem estudo e preparação, e o padrão de projeto que merece muita atenção é o MVC. Muita gente conhece este padrão através dos &lt;em&gt;frameworks&lt;/em&gt; (isso não é um problema, eu mesmo estou neste grupo), mas ir a fundo é essencial para evitar erros e falar coisas como:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Seu MVC está errado, o &lt;em&gt;controller&lt;/em&gt; está maior que o &lt;em&gt;model&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Este erro de definição acontece pois em nenhum lugar está escrito que a quantidade de linhas define o padrão MVC, mas vamos entender isto melhor?&lt;/p&gt;

&lt;h2 id=&#34;as-camadas-do-mvc&#34;&gt;As camadas do MVC&lt;/h2&gt;

&lt;h3 id=&#34;o-que-é-model&#34;&gt;O que é &lt;em&gt;Model&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Model&lt;/em&gt; é onde fica a lógica da aplicação. Só isso.&lt;/p&gt;

&lt;p&gt;Vai disparar um e-mail? Validar um formulário? Enviar ou receber dados do banco? Não importa. A &lt;em&gt;model&lt;/em&gt; deve saber como executar as tarefas mais diversa, mas não precisa saber quando deve ser feito, nem como mostrar estes dados.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-view&#34;&gt;O que é &lt;em&gt;View&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;View&lt;/em&gt; exibe os dados. Só isso.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View&lt;/em&gt; não é só o HTML, mas qualquer tipo de retorno de dados, como &lt;em&gt;PDF&lt;/em&gt;, &lt;em&gt;Json&lt;/em&gt;, &lt;em&gt;XML&lt;/em&gt;, o retorno dos dados do servidor &lt;em&gt;RESTFull&lt;/em&gt;, os &lt;em&gt;tokens&lt;/em&gt; de autenticação &lt;em&gt;OAuth2&lt;/em&gt;, entre outro. Qualquer retorno de dados para uma interface qualquer (o navegador, por exemplo) é responsabilidade da &lt;em&gt;view&lt;/em&gt;. A &lt;em&gt;view&lt;/em&gt; deve saber renderizar os dados corretamente, mas não precisa saber como obtê-los ou quando renderizá-los.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-controller&#34;&gt;O que é &lt;em&gt;Controller&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;O &lt;em&gt;controller&lt;/em&gt; diz quando as coisas devem acontecer. Só isso.&lt;/p&gt;

&lt;p&gt;É usado para intermediar a &lt;em&gt;model&lt;/em&gt; e a _view_ de uma camada. Por exemplo, para pegar dados da &lt;em&gt;model&lt;/em&gt; (guardados em um banco) e exibir na &lt;em&gt;view&lt;/em&gt; (em uma página HTML), ou pegar os dados de um formulário (&lt;em&gt;view&lt;/em&gt;) e enviar para alguém (&lt;em&gt;model&lt;/em&gt;). Também é responsabilidade do &lt;em&gt;controller&lt;/em&gt; cuidar das requisições (&lt;em&gt;request&lt;/em&gt; e &lt;em&gt;response&lt;/em&gt;) e isso também inclui os famosos &lt;em&gt;middlewares&lt;/em&gt; (&lt;a href=&#34;http://laravel.com/&#34; target=&#34;_blank&#34;&gt;Laravel&lt;/a&gt;, &lt;a href=&#34;http://www.slimframework.com/&#34; target=&#34;_blank&#34;&gt;Slim Framework&lt;/a&gt;, &lt;a href=&#34;http://expressjs.com/&#34; target=&#34;_blank&#34;&gt;Express&lt;/a&gt;, &lt;a href=&#34;http://www.rubyonrails.com.br/&#34; target=&#34;_blank&#34;&gt;Ruby on Rails&lt;/a&gt;, etc.). O &lt;em&gt;controller&lt;/em&gt; não precisa saber como obter os dados nem como exibi-los, só quando fazer isso.&lt;/p&gt;

&lt;h2 id=&#34;na-prática&#34;&gt;Na prática&lt;/h2&gt;

&lt;p&gt;Uma sugestão aos desenvolvedores é criar seu próprio &lt;em&gt;framework&lt;/em&gt; de estudo (e publicar no &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;) mas nunca os usar em produção. Esta prática te faz compreender o quanto você conhece da linguagem, e daqui a algum tempo, ver o quanto melhorou.&lt;/p&gt;

&lt;p&gt;Neste estudo, vamos criar uma aplicação MVC simples com PHP, usando práticas modernas.&lt;/p&gt;

&lt;p&gt;Para começar, vamos utilizar a ideia de que não devemos criar nada que já existe: este é o princípio da interoperabilidade buscada pelo &lt;a href=&#34;http://www.php-fig.org/&#34; target=&#34;_blank&#34;&gt;PHP-FIG&lt;/a&gt; (grupo formado pelas principais empresas e grupos PHP para definir boas práticas e padrões). Utilizaremos &lt;a href=&#34;http://www.php-fig.org/psr/psr-4/&#34; target=&#34;_blank&#34;&gt;PSR-4&lt;/a&gt; e &lt;a href=&#34;https://getcomposer.org/&#34; target=&#34;_blank&#34;&gt;Composer&lt;/a&gt; para gerenciar o carregamento das classes.&lt;/p&gt;

&lt;p&gt;Para instalar o Composer, cito uma parte do artigo &lt;a href=&#34;http://tableless.com.br/composer-para-iniciantes/&#34; target=&#34;_blank&#34;&gt;Composer para iniciantes&lt;/a&gt; de &lt;a href=&#34;http://www.andrebian.com/&#34; target=&#34;_blank&#34;&gt;Andre Cardoso&lt;/a&gt; aqui no Tableless:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primeiramente você precisa realizar o download do &lt;em&gt;phar&lt;/em&gt; do composer. O &lt;a title=&#34;Descubra o que é um arquivo Phar&#34; href=&#34;https://php.net/manual/pt_BR/book.phar.php&#34; target=&#34;_blank&#34;&gt;phar&lt;/a&gt; é um empacotamento de uma aplicação e é utilizado para fornecer bibliotecas e ferramentas nas quais o desenvolvedor não tem de se preocupar com sua estrutura. Em outras palavras, é pegar e usar.&lt;/li&gt;
&lt;li&gt;Para que você obtenha o composer há duas maneiras distintas. Através da biblioteca &lt;a title=&#34;Descubra o que é cURL&#34; href=&#34;http://en.wikipedia.org/wiki/CURL&#34; target=&#34;_blank&#34;&gt;cURL&lt;/a&gt; e através do próprio PHP. Basta selecionar uma das opções abaixo e executar em seu terminal.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instalando via cURL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -sS https://getcomposer.org/installer | php&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instalando via PHP:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php -r “readfile(‘https://getcomposer.org/installer’);” | php&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para saber mais sobre &lt;a href=&#34;http://www.php-fig.org/psr/psr-4/&#34; target=&#34;_blank&#34;&gt;PSR-4 veja o guia oficial aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Na raiz do diretório do seu projeto crie estes 5 arquivos (e diretórios):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;src/App/Mvc/Controller.php&lt;/li&gt;
&lt;li&gt;src/App/Mvc/Model.php&lt;/li&gt;
&lt;li&gt;src/App/Mvc/View.php&lt;/li&gt;
&lt;li&gt;composer.json&lt;/li&gt;
&lt;li&gt;index.php&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ao baixar o composer.phar (explicado acima) você também o terá no diretório raiz, junto ao composer.json e ao index.php&lt;/p&gt;

&lt;p&gt;O seu arquivo composer.json deverá ter o conteúdo a seguir:&lt;/p&gt;

&lt;pre&gt;{
   &#34;autoload&#34;: {
      &#34;psr-4&#34;: {
         &#34;App\\&#34;: &#34;src/App&#34;
      }
   }
}&lt;/pre&gt;

&lt;p&gt;Rode o comando &lt;code&gt;php composer.phar install.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A ideia é que o nosso &lt;em&gt;controller&lt;/em&gt; carregue as informações da _model _e as envie para a &lt;em&gt;view&lt;/em&gt;. Pensando nisso, faremos com que o &lt;em&gt;controller&lt;/em&gt; carregue ambas as classes: &lt;em&gt;Model&lt;/em&gt; e &lt;em&gt;View&lt;/em&gt;. A sequência para criá-las é:&lt;/p&gt;

&lt;p&gt;Conteúdo do arquivo src/App/Mvc/Controller.php:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class Controller
   {
      ...
   }&lt;/pre&gt;

&lt;p&gt;Conteúdo do arquivo src/App/Mvc/Model.php:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class Model
   {
      ...
   }&lt;/pre&gt;

&lt;p&gt;Conteúdo do arquivo src/App/Mvc/View.php:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class View
   {
      ...
   }&lt;/pre&gt;

&lt;p&gt;Seguimos algumas regras da PSR-4: primeiro registramos um &lt;em&gt;namespace&lt;/em&gt; no composer.json que vai até o diretório src/App. Toda classe tem um &lt;em&gt;namespace&lt;/em&gt; e o App do começo indica o diretório que registramos (src/App). O Mvc é o diretório seguinte (ficando src/App/Mvc) e a classe tem o mesmo nome do arquivo (src/App/Mvc/Controller.php). Com isso podemos carregar as classes dinamicamente:&lt;/p&gt;

&lt;p&gt;Conteúdo do arquivo index.php:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   require &#39;vendor/autoload.php&#39;;
   $controller = new App\Mvc\Controller();&lt;/pre&gt;

&lt;p&gt;Nossa classe ainda não faz nada, então vamos testar com algo mais concreto: no Controller.php adicione um novo método chamado index() &amp;#8211; os métodos públicos de um &lt;em&gt;Controller&lt;/em&gt; são chamados de &lt;em&gt;actions&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class Controller
   {
      public function index()
      {
         echo &#39;Olá mundo!&#39;;
      }
   }&lt;/pre&gt;

&lt;p&gt;E no index.php adicione no final a linha:&lt;/p&gt;

&lt;pre&gt;$controller-&amp;gt;index();&lt;/pre&gt;

&lt;p&gt;Ao rodar o index.php você verá um &lt;em&gt;&amp;#8220;Olá mundo!&amp;#8221;&lt;/em&gt; na tela. Agora vamos separar este código nas camadas do MVC.&lt;/p&gt;

&lt;p&gt;No &lt;em&gt;model&lt;/em&gt;, vamos criar o método que serve o texto em questão. Ele poderia carregar um componente que facilitaria as tarefas com o banco de dados, como o &lt;a href=&#34;http://www.doctrine-project.org/&#34; target=&#34;_blank&#34;&gt;Doctrine&lt;/a&gt;, por exemplo, mas aqui só retorna um texto.&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class Model
   {
      public function getText($str = &#39;Olá mundo!&#39;)
      {
         return $str;
      }
   }&lt;/pre&gt;

&lt;p&gt;Na &lt;em&gt;view&lt;/em&gt; vamos imprimir este texto na tela. Poderíamos carregar um &lt;em&gt;template engine&lt;/em&gt; (&lt;a href=&#34;http://laravel.com/docs/5.0/templates&#34; target=&#34;_blank&#34;&gt;Blade&lt;/a&gt;, &lt;a href=&#34;http://twig.sensiolabs.org/&#34; target=&#34;_blank&#34;&gt;Twig&lt;/a&gt;, etc.), ou até criar o nosso próprio, mas ele só fará um &lt;em&gt;echo&lt;/em&gt; mesmo.&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class View
   {
      public function render($str)
      {
         echo $str;
      }
   }&lt;/pre&gt;

&lt;p&gt;E o &lt;em&gt;controller&lt;/em&gt; intermediando tudo isso:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
   namespace App\Mvc;
   class Controller
   {
      public function index()
      {
         $model = new Model;
         $view = new View;
         $view-&amp;gt;render($model-&amp;gt;getText());
      }
   }&lt;/pre&gt;

&lt;p&gt;Rode o index.php novamente e você vai obter o mesmo resultado anterior, mas agora com uma estrutura MVC.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Note que neste exemplo a maior classe é o &lt;em&gt;controller&lt;/em&gt; (com 14 linhas) e mesmo assim não estamos &amp;#8220;quebrando o MVC&amp;#8221;. Também não há nada de absurdo, como carregar a classe &lt;em&gt;Model&lt;/em&gt; no &lt;em&gt;Controller&lt;/em&gt; e passar todas as configurações gigantescas ali dentro. Mesmo que não seja uma quebra de MVC, o &lt;em&gt;Model&lt;/em&gt; ainda vai cuidar de tudo. O ideal é mover o máximo de lógica para dentro da &lt;em&gt;Model&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Apenas para reforçar, o exemplo abaixo deveria estar dentro de um arquivo de &lt;em&gt;Model&lt;/em&gt;, e nunca no &lt;em&gt;Controller&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;$users = User::whereRaw(&#39;age &amp;gt; ? and votes = 100&#39;, [25])-&amp;gt;get();&lt;/pre&gt;

&lt;p&gt;Este último exemplo foi retirado de &lt;a href=&#34;http://laravel.com/docs/5.0/eloquent&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://laravel.com/docs/5.0/eloquent&#34;&gt;http://laravel.com/docs/5.0/eloquent&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quanto mais organizada e centralizada a lógica, melhor. Pense nisso e comece a pesquisar &lt;a href=&#34;https://www.google.com.br/search?q=Dependency+Injection&amp;oq=Dependency+Injection&amp;aqs=chrome..69i57&amp;sourceid=chrome&amp;es_sm=122&amp;ie=UTF-8&#34; target=&#34;_blank&#34;&gt;Dependency Injection&lt;/a&gt;. Isso organiza seu código ainda mais.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>