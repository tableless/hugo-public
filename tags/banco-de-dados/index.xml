<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Banco De Dados on Tableless</title>
    <link>http://tableless.com.br/tags/banco-de-dados/index.xml</link>
    <description>Recent content in Banco De Dados on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/banco-de-dados/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL Essencial (parte 1)</title>
      <link>http://tableless.com.br/mysql-essencial-parte-1/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/mysql-essencial-parte-1/</guid>
      <description>

&lt;h2 id=&#34;o-inicio-e-quem-usa-o-mysql&#34;&gt;O inicio e quem usa o MySQL&lt;/h2&gt;

&lt;p&gt;O MySQL é um sistema relacional de gerenciamento de banco de dados de código aberto, que utiliza o SQL (Linguagem de consulta estruturada) como interface, é atualmente um dos bancos de dados mais populares na internet, mais de 10 milhões de instalações pelo mundo inteiro. Em Julho de 2013, foi considerado o segundo banco mais utilizado do mundo.&lt;/p&gt;

&lt;p&gt;Criado na Suécia por David Axmark, Allan Larsson e Michael &amp;#8220;Monty&amp;#8221; Widenius, a primeira versão surgiu em 23 de Maio de 1995. Hoje, seu desenvolvimento emprega mais de 400 profissionais no mundo inteiro. Em 2008, a MySQL AB, desenvolvedora do MySQL, foi comprada pela Sun Microsystems (que em 2009, foi comprada pela Oracle), por 1 bilhão de dólares.&lt;/p&gt;

&lt;p&gt;Entre alguns dos usuários mais famosos do MySQL, estão: PayPal, YouTube, Google, Walmart, NASA, Bradesco, Nokia, HP, Lufthansa, etc&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;mão-na-massa&#34;&gt;Mão na massa&lt;/h2&gt;

&lt;p&gt;Neste artigo, partiremos do principio que você já tem o MySQL instalado e rodando bonitinho&amp;#8230;&lt;/p&gt;

&lt;p&gt;Para acessar o MySQL utilize o comando a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;mysql -u &amp;lt;usuário&amp;gt; -p&lt;/pre&gt;

&lt;p&gt;Depois desse comando, o MySQL vai te pedir a senha do usuário, obviamente, por segurança.&lt;/p&gt;

&lt;p&gt;Dentro do MySQL, você tem poderes para atualizar, criar e editar qualquer tabela/banco. Para acessar o help, simplesmente digite &amp;#8216;help&amp;#8217; no terminal e aparecerá o menu de ajuda do MySQL.&lt;/p&gt;

&lt;p&gt;Para ver todos os bancos criados, utilize o:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;show databases;
&lt;/pre&gt;

&lt;p&gt;Para criar um banco, depois de logado no MySQL, você pode seguir o seguir o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;CREATE DATABASE banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;E &amp;#8216;paaaah&amp;#8217;, seu banco foi criado com sucesso. Agora você precisa acessar este banco:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;USE banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Agora, para a coisa ficar mais interessante, vamos criar uma tabela, para podermos adicionar dados nela:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;CREATE TABLE tabela_do_banco_exemplo (
id INT(11) AUTO_INCREMENT PRIMARY KEY,
first_name VARCHAR(30) NOT NULL,
last_name VARCHAR(30) NOT NULL,
mail VARCHAR(100) NOT NULL,
mobile VARCHAR(100),
created_at TIMESTAMP
);
&lt;/pre&gt;

&lt;p&gt;No comando acima, criamos uma tabela dentro o seu banco. Nessa tabela teremos 6 colunas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ID &amp;#8211; um número inteiro de até 11 caracteres que se auto incrementa, ou seja, nunca se repete, se já existir o 1, ele coloca o 2 e que é a chave principal da nossa tabela.&lt;/li&gt;
&lt;li&gt;first_name &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 30 caracteres e não pode ser NULL.&lt;/li&gt;
&lt;li&gt;last_name &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 30 caracteres e não pode ser NULL.&lt;/li&gt;
&lt;li&gt;mail &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 100 caracteres e não pode ser NULL.&lt;/li&gt;
&lt;li&gt;mobile &amp;#8211; um campo que aceita numeros, letras e caracteres especiais, com até 100 caracteres.&lt;/li&gt;
&lt;li&gt;created_at &amp;#8211; TIMESTAMP preenche a coluna com o exato horário da inserção da linha na tabela, ou seja, o momento em que a linha foi inserida.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora vamos partir para a inserção de conteúdo dentro desta tabela, a final, uma tabela sem nenhuma linha de conteúdo não tem nenhuma função. Então vamos lá:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;INSERT INTO tabela_do_banco_exemplo (first_name, last_name, mail, mobile, created_at) VALUES (&#39;claudio&#39;, &#39;melo&#39;,&#39;claudio@claudiomelo.net&#39;,&#39;(11) 99999-9999&#39;, NOW());
&lt;/pre&gt;

&lt;p&gt;Ao infinito e além, bom, é o seguinte, na linha acima, inserimos uma linha na tabela que criamos, o INSERT INTO, se explica por si só, né? Lembrando que não colocamos o ID pois ele se &amp;#8220;AUTO INCREMENTA&amp;#8221;, como setamos ao criar a nossa tabela.&lt;/p&gt;

&lt;p&gt;Quando especificamos as colunas que devem ser inseridas, não precisamos necessariamente respeitar a ordem que fizemos quando criamos a tabela, como podem ver no exemplo, eu inverti o mobile e o mail, como dizia na matemática, a ordem dos fatores não altera o produto. Porém, lembre-se de, quando setar o conteúdo da coluna nos VALUES, você tem que seguir a mesma ordem que declarou na lista de colunas que serão atingidas.&lt;/p&gt;

&lt;p&gt;Agora que já criamos um banco, já criamos uma tabela, já inserimos conteúdo dentro desta tabela, chegou o momento de buscar algum conteúdo dentro dessa tabela:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT * FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Isso vai te retornar TODAS as colunas de uma tabela, simples né? Se tiver 50 linhas na sua tabela, o select vai te retornar todas as colunas das 50 linhas. E mais uma vez, você deve estar prestes a me xingar por que quer só as colunas que precisa, mas ai eu te digo, vamos pegar somente as colunas que queremos neste momento:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT first_name FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Mais simples que isso, faça um esforço e tente entender a linha que escrevemos, esqueça o CTRL+C e CTRL+V. Pedimos ao banco um SELECT da coluna first_name, isso vai nos retornar o first_name de todas as linhas da nossa tabela.&lt;/p&gt;

&lt;p&gt;Nesse momento, podemos ser até um pouco mais ousados, eu diria, vamos selecionar a coluna mobile somente de linhas que tem números de telefone diferentes, ou seja, dois cadastros com números iguais de telefone, não aparecerão nessa lista:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT DISTINCT mobile FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Agora você deve estar louco para buscar duas colunas junto com o DISTINCT, então vamos nessa:&lt;/p&gt;

&lt;pre class=&#34;lang-sql&#34;&gt;SELECT DISTINCT mobile, first_name FROM tabela_do_banco_exemplo;
&lt;/pre&gt;

&lt;p&gt;Isso vai nos retornar uma lista onde não haverá linhas que repitam o número de telefone E (preste bem a atenção neste E) o primeiro nome.&lt;/p&gt;

&lt;p&gt;Bom, por enquanto é só. Criticas ou sugestões é só falar nos comentários ou entrar em contato comigo, ficarei muito agradecido! Em breve teremos a parte 2 para continuar esse papo legal sobre MySQL.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 Dicas Simples Para Acelerar Seu Site Até 278 Vezes</title>
      <link>http://tableless.com.br/10-dicas-simples-para-acelerar-seu-site-ate-278-vezes/</link>
      <pubDate>Sat, 07 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/10-dicas-simples-para-acelerar-seu-site-ate-278-vezes/</guid>
      <description>

&lt;p&gt;Seu site é veloz?&lt;/p&gt;

&lt;p&gt;Você sabia que, quanto mais veloz for seu site, mais satisfeito seu visitante vai ficar?&lt;/p&gt;

&lt;p&gt;Isso é o que apontam algumas pesquisas realizadas pela &lt;em&gt;Akamai&lt;/em&gt; e pela &lt;em&gt;Gomez.com&lt;/em&gt;. Elas demonstraram que a satisfação do seu visitante com o seu site decai em 16% a cada 1 segundo a mais que ele aguarda pelo carregamento da página.&lt;/p&gt;

&lt;p&gt;As pesquisas também concluíram que os usuários esperam que os sites carreguem em 2 segundos ou menos, sendo que eles abandonariam páginas que levassem mais de 3 segundos para carregar.&lt;/p&gt;

&lt;p&gt;E ainda: 79% dos clientes que tiveram problemas com o desempenho de um site não voltariam a fazer negócio. E 44% deles contariam aos amigos sobre a má experiência.&lt;/p&gt;

&lt;p&gt;Por isso, o tempo de carregamento das páginas é extremamente importante. Pode ser uma das chaves para seu negócio dar certo de verdade e atrair clientes.&lt;/p&gt;

&lt;p&gt;Velocidade de carregamento é fundamental em qualquer site. E é o critério que mais pesa nas avaliações feitas por usuários.&lt;/p&gt;

&lt;p&gt;Afinal, ninguém poderá avaliar o &lt;em&gt;design&lt;/em&gt; do site ou seu conteúdo antes dele carregar completamente.&lt;/p&gt;

&lt;p&gt;O grande problema é que muitos desenvolvedores focam muito em &lt;em&gt;design&lt;/em&gt; e em conteúdo, deixando o desempenho em segundo plano. Muitas vezes, perdem alguns segundos de carregamento em prol de um efeito visual.&lt;/p&gt;

&lt;p&gt;Pense que seu visitante é um cliente fiel, que voltará inúmeras vezes ao seu site. Mas ele só fará isso se o site for rápido e confiável.&lt;/p&gt;

&lt;p&gt;Por isso separei aqui 10 dicas simples, focadas em banco de dados, para você otimizar o carregamento das páginas do seu site.&lt;/p&gt;

&lt;div id=&#34;attachment_51733&#34; style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-full wp-image-51733&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/1909270-many-cars-are-driving-at-night-on-a-highway-and-create-light-trails.jpg&#34; alt=&#34;O mundo se move rápido. Seu site deve fazer o mesmo&#34; width=&#34;500&#34; height=&#34;248&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    &lt;em&gt;O mundo se move rápido. Seu site deve fazer o mesmo&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;selecione-apenas-os-campos-que-realmente-vai-usar&#34;&gt;1. Selecione Apenas os Campos que Realmente Vai Usar&lt;/h2&gt;

&lt;p&gt;É muito comum vermos consultas como &lt;code&gt;SELECT * FROM tabela&lt;/code&gt;. O asterisco (&lt;code&gt;*&lt;/code&gt;) vai trazer todas as colunas da tabela. Mas nem sempre precisamos de todas elas.&lt;/p&gt;

&lt;p&gt;Muitas vezes, temos uma tabela com 20, 50 ou até 100 ou mais colunas. Serão raros os casos em que você precisará de todas elas.&lt;/p&gt;

&lt;p&gt;Por isso sempre defina quais campos quer selecionar.&lt;/p&gt;

&lt;h2 id=&#34;modele-corretamente-o-banco-de-dados&#34;&gt;2. Modele Corretamente o Banco de Dados&lt;/h2&gt;

&lt;p&gt;Esta dica parece bem óbvia, mas o fato é que a maioria dos problemas com desempenho são devido à modelagem errada dos bancos de dados.&lt;/p&gt;

&lt;p&gt;Um simples exemplo que vejo com muita frequência é, salvar diversas informações como dados pessoais e financeiros na mesma coluna de uma tabela.&lt;/p&gt;

&lt;p&gt;Outro exemplo é, salvar em um único campo os valores selecionados em &lt;em&gt;checkboxes&lt;/em&gt;. Alguns programadores pegam todos os valores e os armazenam separados por vírgula em um único campo. Quando o usuário decide atualizar ou remover uma opção, o programador deve escrever linhas e mais linhas para separar os valores, comparar e depois unir de novo.&lt;/p&gt;

&lt;p&gt;Modelagem errada prejudica o banco de dados, o programador, que precisará escrever mais códigos. e, principalmente, o desempenho da aplicação, que precisará processar todo esse código em excesso.&lt;/p&gt;

&lt;p&gt;Modelagem de dados é a primeira fase do desenvolvimento. Estruture bem seu banco de dados antes mesmo de começar a escrever seus códigos.&lt;/p&gt;

&lt;h2 id=&#34;use-a-cláusula-limit&#34;&gt;3. Use a Cláusula &lt;code&gt;LIMIT&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Outra vez, parece uma dica óbvia. Até demais.&lt;/p&gt;

&lt;p&gt;Porém, por incrível que pareça, tem muita gente por aí que não faz isso.&lt;/p&gt;

&lt;p&gt;Imagine um site ou blog que exibe apenas 10 registros por página. O correto é usar &lt;code&gt;LIMIT&lt;/code&gt; para trazer apenas esses 10.&lt;/p&gt;

&lt;p&gt;Já vi códigos sem esse &lt;code&gt;LIMIT&lt;/code&gt;, que buscam diversos registros e pegam, via programação, apenas os 10 primeiros.&lt;/p&gt;

&lt;div id=&#34;attachment_51740&#34; style=&#34;width: 505px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-full wp-image-51740&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/usuaio-impaciente.jpg&#34; alt=&#34;Esse cliente você já perdeu&#34; width=&#34;495&#34; height=&#34;309&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    &lt;em&gt;Esse cliente você já perdeu&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;faça-cache-das-consultas&#34;&gt;4. Faça &lt;em&gt;Cache&lt;/em&gt; das Consultas&lt;/h2&gt;

&lt;p&gt;As consultas mais rápidas são aquelas não executadas.&lt;/p&gt;

&lt;p&gt;Explico.&lt;/p&gt;

&lt;p&gt;Sempre que você executa uma consulta SQL, uma determinada quantidade de recursos do servidor é usada, além do tempo gasto, é claro.&lt;/p&gt;

&lt;p&gt;Por isso, uma ótima opção para sites grandes e com muito tráfego é criar &lt;em&gt;cache&lt;/em&gt; de dados, evitando que algumas consultas SQL frequentes sejam executadas pelo SGBD.&lt;/p&gt;

&lt;p&gt;Há diversas ferramentas para isso, como, por exemplo, AdoDB e Memcached.&lt;/p&gt;

&lt;h2 id=&#34;não-execute-consultas-dentro-de-loops&#34;&gt;5. Não Execute Consultas Dentro de &lt;em&gt;Loops&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;O velho &lt;a href=&#34;http://rberaldo.com.br/o-problema-do-n-mais-1/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Problema do N + 1&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Imagine esta situação: um site de artigos, com uma tabela de usuários e outra de artigos, que possui um campo que relaciona o artigo com seu autor.&lt;/p&gt;

&lt;p&gt;Se precisar listar os autores e os títulos de seus respectivos posts, alguns programadores fariam o seguinte:&lt;/p&gt;

&lt;ol type=&#34;1&#34;&gt;
  &lt;li&gt;
    Selecionar todos os usuários: &lt;code&gt;SELECT id, nome FROM usuarios;&lt;/code&gt;
  &lt;/li&gt;
  &lt;li&gt;
    Para cada usuário, buscar seus posts: &lt;code&gt;SELECT titulo FROM posts WHERE user_id = id_do_usuario;&lt;/code&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A segunda consulta seria executada &lt;code&gt;N&lt;/code&gt; vezes, sendo &lt;code&gt;N&lt;/code&gt; o número total de usuários.&lt;/p&gt;

&lt;p&gt;Ou seja, total de consultas seria &lt;code&gt;N + 1&lt;/code&gt; (&lt;code&gt;N&lt;/code&gt; consultas de posts mais uma consulta para a lista de usuários).&lt;/p&gt;

&lt;p&gt;Porém, bastariam duas consultas ou mesmo um simples &lt;code&gt;JOIN&lt;/code&gt; para resolver o problema, o que pode trazer um ganho de desempenho &lt;a href=&#34;http://rberaldo.com.br/o-problema-do-n-mais-1/&#34; target=&#34;_blank&#34;&gt;de até 13 Vezes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Explico o &lt;strong&gt;Problema do N + 1&lt;/strong&gt; em mais detalhes &lt;a href=&#34;http://rberaldo.com.br/o-problema-do-n-mais-1/&#34; target=&#34;_blank&#34;&gt;neste artigo&lt;/a&gt;.&lt;/p&gt;

&lt;div id=&#34;attachment_51745&#34; style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-full wp-image-51745&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/seo-slow-loading11.jpg&#34; alt=&#34;De olho no relógio!&#34; width=&#34;500&#34; height=&#34;333&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    &lt;em&gt;De olho no relógio!&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;use-joins-em-vez-de-sub-consultas&#34;&gt;6. Use &lt;code&gt;JOIN&lt;/code&gt;s em Vez de Sub-Consultas&lt;/h2&gt;

&lt;p&gt;Quando programamos, usar sub-consultas é algo simples, lógico e funcional, como neste exemplo:&lt;/p&gt;

&lt;pre class=&#34;sourceCode sql&#34;&gt;&lt;code class=&#34;sourceCode sql&#34;&gt;&amp;lt;span class=&#34;kw&#34;&gt;SELECT&amp;lt;/span&gt; usuarios.id,
       (
        &amp;lt;span class=&#34;kw&#34;&gt;SELECT&amp;lt;/span&gt; &amp;lt;span class=&#34;fu&#34;&gt;MAX&amp;lt;/span&gt;(data_criacao)
               &amp;lt;span class=&#34;kw&#34;&gt;FROM&amp;lt;/span&gt; posts
               &amp;lt;span class=&#34;kw&#34;&gt;WHERE&amp;lt;/span&gt; usuario_id = usuarios.id
       ) &amp;lt;span class=&#34;kw&#34;&gt;AS&amp;lt;/span&gt; ultimo_post
       &amp;lt;span class=&#34;kw&#34;&gt;FROM&amp;lt;/span&gt; usuarios u&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Embora sub-consultas sejam úteis, usar &lt;code&gt;JOIN&lt;/code&gt; é igualmente funcional e mais rápido.&lt;/p&gt;

&lt;p&gt;A consulta anterior pode ser transformada nesta:&lt;/p&gt;

&lt;pre class=&#34;sourceCode sql&#34;&gt;&lt;code class=&#34;sourceCode sql&#34;&gt;&amp;lt;span class=&#34;kw&#34;&gt;SELECT&amp;lt;/span&gt; a.id, &amp;lt;span class=&#34;fu&#34;&gt;MAX&amp;lt;/span&gt;(p.data_criacao) &amp;lt;span class=&#34;kw&#34;&gt;AS&amp;lt;/span&gt; ultimo_post
       &amp;lt;span class=&#34;kw&#34;&gt;FROM&amp;lt;/span&gt; usuarios u
       &amp;lt;span class=&#34;kw&#34;&gt;INNER&amp;lt;/span&gt; &amp;lt;span class=&#34;kw&#34;&gt;JOIN&amp;lt;/span&gt; posts p &amp;lt;span class=&#34;kw&#34;&gt;ON&amp;lt;/span&gt; (u.id = p.usuario_id)
       &amp;lt;span class=&#34;kw&#34;&gt;GROUP&amp;lt;/span&gt; &amp;lt;span class=&#34;kw&#34;&gt;BY&amp;lt;/span&gt; u.id&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-unions-em-vez-de-ors&#34;&gt;7. Use &lt;code&gt;UNION&lt;/code&gt;s ao invés de &lt;code&gt;OR&lt;/code&gt;s&lt;/h2&gt;

&lt;p&gt;A seguinte consulta utiliza a cláusula &lt;code&gt;OR&lt;/code&gt; para filtrar os registros:&lt;/p&gt;

&lt;pre class=&#34;sourceCode sql&#34;&gt;&lt;code class=&#34;sourceCode sql&#34;&gt;&amp;lt;span class=&#34;kw&#34;&gt;SELECT&amp;lt;/span&gt; * 
      &amp;lt;span class=&#34;kw&#34;&gt;FROM&amp;lt;/span&gt; tabela1, tabela2
      &amp;lt;span class=&#34;kw&#34;&gt;WHERE&amp;lt;/span&gt; tabela1.p = tabela2.q 
            &amp;lt;span class=&#34;kw&#34;&gt;OR&amp;lt;/span&gt; tabela1.x = tabela2.y;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A cláusula &lt;code&gt;UNION&lt;/code&gt; permite combinar os resultados de dois ou mais &lt;code&gt;SELECT&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;A seguinte consulta, usando &lt;code&gt;UNION&lt;/code&gt;, vai trazer os mesmos resultados que a consulta anterior, sendo mais rápida:&lt;/p&gt;

&lt;pre class=&#34;sourceCode sql&#34;&gt;&lt;code class=&#34;sourceCode sql&#34;&gt;&amp;lt;span class=&#34;kw&#34;&gt;SELECT&amp;lt;/span&gt; *
      &amp;lt;span class=&#34;kw&#34;&gt;FROM&amp;lt;/span&gt; tabela1, tabela2 
      &amp;lt;span class=&#34;kw&#34;&gt;WHERE&amp;lt;/span&gt; tabela1.p = tabela2.q
&amp;lt;span class=&#34;kw&#34;&gt;UNION&amp;lt;/span&gt;
&amp;lt;span class=&#34;kw&#34;&gt;SELECT&amp;lt;/span&gt; * 
      &amp;lt;span class=&#34;kw&#34;&gt;FROM&amp;lt;/span&gt; tabela1, tabela2 
      &amp;lt;span class=&#34;kw&#34;&gt;WHERE&amp;lt;/span&gt; tabela1.x = tabela2.y&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;utilize-índices&#34;&gt;8. Utilize Índices&lt;/h2&gt;

&lt;p&gt;Índices de banco de dados são como índices de bibliotecas. Eles permitem ao banco de dados encontrar os resultados sem perder tempo olhando registro por registro. Assim como um leitor olha o índice da biblioteca e encontra um livro com mais facilidade e rapidez.&lt;/p&gt;

&lt;p&gt;Sempre crie índices em suas tabelas, indexando os campos que são frequentemente consultados.&lt;/p&gt;

&lt;h2 id=&#34;otimize-as-tabelas-do-banco-de-dados&#34;&gt;9. Otimize as Tabelas do Banco de Dados&lt;/h2&gt;

&lt;p&gt;Alguns SGBDs, como o MySQL, possuem ferramentas nativas para otimização de seus dados.&lt;/p&gt;

&lt;p&gt;Se suas tabelas são frequentemente modificadas, recebendo novos dados e removendo outros, pode ser interessante rodar uma otimização com certa frequência, para tornar as tabelas menores e mais rápidas.&lt;/p&gt;

&lt;p&gt;A otimização toma um certo tempo para ser executada, por isso, é recomendável agendá-la para madrugadas ou para horários quando seu sistema tem pouco uso.&lt;/p&gt;

&lt;p&gt;Para o MySQL, um simples exemplo de otimização pode ser feito com esta consulta:&lt;/p&gt;

&lt;pre class=&#34;sourceCode sql&#34;&gt;&lt;code class=&#34;sourceCode sql&#34;&gt;OPTIMIZE &amp;lt;span class=&#34;kw&#34;&gt;TABLE&amp;lt;/span&gt; nome_da_tabela;&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&#34;attachment_51742&#34; style=&#34;width: 646px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img class=&#34;size-full wp-image-51742&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/foguete.jpg&#34; alt=&#34;Site rápido como foguete: desempenho até 278 Vezes maior&#34; width=&#34;636&#34; height=&#34;301&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    &lt;em&gt;Site rápido como foguete: desempenho até 278 Vezes maior&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;use-um-servidor-de-busca&#34;&gt;10. Use um Servidor de Busca&lt;/h2&gt;

&lt;p&gt;Todas as dicas anteriores são válidas e trazem um certo ganho de desempenho.&lt;/p&gt;

&lt;p&gt;Mas já imaginou conseguir ganhos de desempenho de &lt;a href=&#34;http://buscasupersonica.com.br&#34; target=&#34;_blank&#34;&gt;Até 278 Vezes&lt;/a&gt;?!&lt;/p&gt;

&lt;p&gt;Esse é o ganho que podemos conseguir com um Servidor de Busca como o ElasticSearch.&lt;/p&gt;

&lt;p&gt;O ElasticSearch permite armazenar dados de forma otimizada para buscas extremamente rápidas.&lt;/p&gt;

&lt;p&gt;Se o seu sistema faz muitos &lt;code&gt;SELECT&lt;/code&gt;s, o ElasticSearch pode trazer &lt;a href=&#34;http://buscasupersonica.com.br&#34; target=&#34;_blank&#34;&gt;ganhos fenomenais em desempenho&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veja &lt;a href=&#34;http://buscasupersonica.com.br&#34; target=&#34;_blank&#34;&gt;Neste Vídeo&lt;/a&gt; algumas dicas para Acelerar o Seu Site Até 278 Vezes!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parse – Objetos na nuvem</title>
      <link>http://tableless.com.br/parse-objetos-na-nuvem-2/</link>
      <pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/parse-objetos-na-nuvem-2/</guid>
      <description>

&lt;p&gt;Alguns dias atrás eu estava estudando um projeto que deveria apresentar, relacionado a WebApps. Decidi a plataforma da minha apresentação, mas acrescentar algo mais.&lt;/p&gt;

&lt;p&gt;Eu tinha lido algumas coisas sobre um banco de dados que traria uma nova perspectiva aos desenvolvedores, facilitando seu acesso e fazendo suas conexões até por JavaScript (coisa que me intrigou bastante até começar a utilizá-lo), possibilitando leitura, gravação e consulta de dados. Foi aí que comecei a estudar sobre o Parse.&lt;/p&gt;

&lt;h2 id=&#34;uma-breve-introdução-ao-parse&#34;&gt;Uma breve introdução ao Parse&lt;/h2&gt;

&lt;p&gt;Construirei um exemplo pequeno, utilizando JavaScript, gravando dados em uma Classe do Parse e retornando as IDs dos objetos que foram gravados. Mas antes, uma pequena explicação sobre os nomes que esta plataforma usa, para que a gente possa estar falando da mesma coisa, sem usar identificações diferentes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classe: dentro do Parse, é a mesma coisa que tabela. Ou seja, uma tabela de dados, dentro de suas aplicações e até mesmo no painel de sua conta será sempre tratada como &amp;#8220;Class&amp;#8221;;&lt;/li&gt;
&lt;li&gt;Objetos: dentro e fora de seu projeto, cada linha da sua tabela será tratada como um objeto, possuindo várias informações divididas em colunas. Uma dessas informações é a ID que iremos utilizar, gerada automaticamente pelo Parse;&lt;/li&gt;
&lt;li&gt;Campos são colunas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Antes de tudo, vamos à nossa aplicação: você precisa criar uma conta no &lt;a href=&#34;https://parse.com/&#34; target=&#34;_blank&#34;&gt;Parse&lt;/a&gt;, para que possa entender exatamente o que estou falando, e seguir o passo a passo pelos seus dados de usuário (ao final, deixarei um exemplo contendo tudo que utilizei aqui).&lt;/p&gt;

&lt;p&gt;Ao clicar para criar a sua conta, você preencherá seus dados e será informado sobre o nome do seu primeiro Aplicativo. Dê o nome que quiser; você poderá criar outros mais pra frente sem problemas. Após criar sua conta, aparecerá uma janela para você dar início às suas aplicações com o Parse. Como trataremos de um exemplo via JavaScript, clique em &amp;#8220;Data&amp;#8221;, depois clique em &amp;#8220;Web&amp;#8221; e depois em &amp;#8220;New Project&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Você será levado a uma página contendo uma explicação sobre o SDK do Parse, e também sua ID e Key de usuário, para que você possa fazer suas conexões com seus aplicativos do Parse. Um exemplo será disponibilizado para você baixar em um botão como &lt;strong&gt;&amp;#8220;Download the blank Javascript/HTML5 Project&amp;#8221;&lt;/strong&gt;, onde você poderá baixar e dar uma olhada em um exemplo &amp;#8220;em branco&amp;#8221; de uma página acessando seu banco de dados. Baixem essa página, ela será necessária mais pra frente.&lt;/p&gt;

&lt;p&gt;Sua ID e Key aparecerão na página em um trecho JavaScript, dessa forma (exemplo):&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script&amp;gt;
  Parse.initialize(&#34;valor-da-sua-id&#34;, &#34;valor-da-sua-key&#34;);
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Guarde este código, utilizaremos mais pra frente.&lt;/p&gt;

&lt;h2 id=&#34;no-html&#34;&gt;No HTML&lt;/h2&gt;

&lt;p&gt;Construí uma página HTML básica, só para fazer o envio e o recebimento dos objetos à Classe do Parse, desta forma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;p&amp;gt;
  Digite seu nome: &amp;lt;input type=&#34;text&#34; id=&#34;enviaNome&#34;&amp;gt;
  &amp;lt;br&amp;gt; 
  &amp;lt;button onclick=&#34;armazena()&#34;&amp;gt;Armazenar nome no Parse&amp;lt;/button&amp;gt;  
  &amp;lt;button onclick=&#34;retorna()&#34;&amp;gt;Retornar ID dos objetos do Parse&amp;lt;/button&amp;gt; 
&amp;lt;/p&amp;gt;
&amp;lt;p id=&#34;tempNames&#34;&amp;gt;    
&amp;lt;/p&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Deixei um parágrafo para um campo de texto, dois botões que chamam duas funções que já veremos mais pra frente (uma para gravar objetos na base de dados e outra para retornar), e um parágrafo vazio, com uma ID para receber os objetos que gravaremos.&lt;/p&gt;

&lt;h2 id=&#34;mão-na-nuvem&#34;&gt;Mão na nuvem&lt;/h2&gt;

&lt;p&gt;Feito isso, começaremos a utilizar as infomações que o Parse nos dá. Eu separei meus scripts dessa forma, para facilitar a minha visualização (nada impede que você os coloque da forma que quiser, onde quiser, contanto que atinja o objetivo, utilize o padrão ao qual você está acostumado). Lembram daquela linha com o &amp;#8220;Parse.initialize&amp;#8221;? Então, eu a coloquei da seguinte forma, dentro da &lt;head&gt; do meu HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script&amp;gt;
  Parse.initialize(&#34;minha-id&#34;, &#34;minha-key&#34;);
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Como é um trecho de código que &amp;#8220;inicializa&amp;#8221; minha aplicação com o Parse, decidi por colocá-lo dentro do HTML mesmo. Precisaremos do script do Parse que é disponibilizado naquela página &amp;#8220;em branco&amp;#8221;. Você pode baixá-lo ou puxar pelo trecho que eles disponibilizam mesmo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script src=&#34;http://www.parsecdn.com/js/parse-1.4.2.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Beleza! Já temos a aplicação com o ID e com o scripts funcionando corretamente, agora vamos às funções.&lt;/p&gt;

&lt;p&gt;Vamos lá, naquela página em branco vocês terão um exemplo de gravação de objetos dentro do Parse. Eu separei um script com duas funções para realizarmos isso:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script&amp;gt;
  function armazena(){
    var nome = document.getElementById(&#34;enviaNome&#34;).value;
    var conectaParse = Parse.Object.extend(&#34;NomeClasse&#34;)
    obj = new conectaParse();
    obj.set(&#34;nome&#34;, nome);
    obj.save(null, {
      success: function(valor) {
        alert(&#34;Objeto criado com ID: &#34; + obj.id);
      },
      error: function(valor, error) {
        alert(&#34;Falha ao criar objeto&#34; + error.message);
      }
    });
  }

  function retorna(){
    document.getElementById(&#34;tempNames&#34;).innerHTML =&#34;&#34;;
    var query = new Parse.Query(&#34;NomeClasse&#34;);
    query.greaterThan(
      &#34;createdAt&#34;,&#34;2014-06-23T18:20:17.149Z&#34; 
    );
    query.find({
      success: function(results) {
        for (var i = 0; i &amp;lt; results.length; i++) {
          document.getElementById(&#34;tempNames&#34;).innerHTML += (i+1)+&#34;º Objeto da Classe: &#34;+ results[i].id +&#34;&#34;;
        }
      },
      error: function(error) {
        alert(&#39;não foi&#39;);
      }
    });
  }
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Notem que são as duas funções que são ativadas pelos botões que criamos; a função armazena e a função retorna, e elas fazem o seguinte:&lt;/p&gt;

&lt;p&gt;Na função armazena uma variável &lt;strong&gt;nome&lt;/strong&gt; é criada, pegando o valor do campo &lt;strong&gt;enviaNome&lt;/strong&gt; e uma classe &lt;strong&gt;conectaParse&lt;/strong&gt; é criada para realizar a conexão com a classe de nome &lt;strong&gt;NomeParse&lt;/strong&gt; (vale lembrar também que o Parse não aceita Classes com vírgulas, pontos, acentos ou caracteres especiais). Um objeto &lt;strong&gt;obj&lt;/strong&gt; foi criado seguindo as especificações da classe &lt;strong&gt;conectaParse&lt;/strong&gt;, para realizar o armazenamento dos objetos num campo &lt;strong&gt;nome&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se o dado for armazenado como sucesso, um alert aparecerá na tela com uma mensagem mostrando a ID do objeto dentro do banco de dados; caso contrário, uma mensagem de erro aparecerá. Vale lembrar que o tratamento das gravações dentro do Parse é um tanto quanto diferente. Se no seu código você indica uma Classe (lembrando que Classe = Tabela) ou um campo que não existe, a aplicação criará automaticamente essa Classe ou esse campo ao ser executada.&lt;/p&gt;

&lt;p&gt;Na função retorna eu tratei primeiro aquele parágrafo que criamos, para que toda vez que o botão for clicado todo o conteúdo do parágrafo seja apagado antes de pegarmos os objetos do Parse. Uma variável com nome de &lt;strong&gt;query&lt;/strong&gt; foi criada e igualada à query do Parse, recebendo o parâmetro &lt;strong&gt;NomeClasse&lt;/strong&gt;, que é o nome da Classe na qual iremos fazer a consulta.&lt;/p&gt;

&lt;p&gt;Feito isso, o trecho seguinte utiliza o método &lt;strong&gt;greaterThan&lt;/strong&gt; para passar dois parâmetros dentro da pesquisa (ou query) que será executada. Um desses parâmetros é o &lt;strong&gt;createdAt&lt;/strong&gt; e o outro é seu de data, ou seja, dentro dessa pesquisa, todos os objetos que estiverem na Classe do Parse que tenham sido criados na data que foi especificada, ou depois, devem ser retornados (notem que eu passei o ano de 2014, ou seja, como estamos criando essa pesquisa hoje, todos os objetos serão retornados).&lt;/p&gt;

&lt;p&gt;É possível criar diversas pesquisas, com diversos métodos e diversos parâmetros. Esse mesmo que utilizei eu peguei dos próprios campos que são gerados na Classe do Parse, com a data de um dos objetos, aí só troquei o ano para que a função retornasse todos os meus objetos. Feito isso, o método &lt;strong&gt;find&lt;/strong&gt; é chamado, podendo resultar em sucesso ou erro.&lt;/p&gt;

&lt;p&gt;Caso retorne erro, um alert aparecerá com uma mensagem de &amp;#8220;não foi&amp;#8221;, e caso a pesquisa resulte em sucesso um laço de repetição será executado, inserindo no HTML do nosso parágrafo &lt;strong&gt;tempNames&lt;/strong&gt; as IDs de cada objeto que veio como resultado do Parse.&lt;/p&gt;

&lt;p&gt;Aliás, é muito interessante o tratamento das pesquisas dentro do Parse. Tentei criar arrays fora do método &lt;strong&gt;find&lt;/strong&gt;, somente para armazenar os IDs dos objetos, mas não foi possível, todo o tratamento com os objetos que serão retornados com &lt;strong&gt;results&lt;/strong&gt; da pesquisa devem ser trabalhados dentro da própria pesquisa.&lt;/p&gt;

&lt;p&gt;Terminamos! Com isso temos uma página HTML que, por JavaScript, salva objetos em um banco de dados na nuvem e retorna todos os seus IDs.&lt;/p&gt;

&lt;p&gt;Você pode encontrar no site do Parse toda a documentação com os códigos que eles possuem para todas as plataformas que eles atendem. Inclusive, dentro daquela página &amp;#8220;em branco&amp;#8221; que é disponibilizada para download quando criamos nosso projeto, você terá um link para as informações que estarão de acordo com a linguagem que você estiver utilizando.&lt;/p&gt;

&lt;h2 id=&#34;no-parse&#34;&gt;No Parse&lt;/h2&gt;

&lt;p&gt;Feito isso, você pode gerenciar seus aplicativos, suas classes e seus objetos dentro do seu painel no site do Parse. Acessando a aba &amp;#8220;Core&amp;#8221;, dentro do campo &amp;#8220;Data&amp;#8221; estarão as suas classes, e dentro das suas classes estarão os objetos com as suas informações.&lt;/p&gt;

&lt;p&gt;Deixei um &lt;a href=&#34;http://glr-tester.ueuo.com/parse/&#34; target=&#34;_blank&#34;&gt;exemplo pronto disponível&lt;/a&gt;, rodando exatamente tudo isso que expliquei e até com alguns comentários dentro das funções JavaScript para dar uma lembrada do que cada uma faz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deletando registros duplicados no banco de dados</title>
      <link>http://tableless.com.br/deletando-registros-duplicados-banco-de-dados/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/deletando-registros-duplicados-banco-de-dados/</guid>
      <description>&lt;p&gt;Precisei fazer a migração de dados de algumas tabelas de cadastro (telefones, hobbies, interesses, formações e etc.) para uma única tabela diferenciando-os pelo id do usuário e o id do campo. O problema é que meu script acabou duplicando as informações. Para a minha sorte isso aconteceu em um banco de desenvolvimento, onde era possível apagar os dados da tabela, ajustar os scripts e refazer a migração. Eu não queria ter esse trabalho novamente e logo resolvi pesquisar um script sql que me ajudasse a apagar os registros duplicados, nesse caso deixando apenas o último registro gravado.&lt;/p&gt;

&lt;p&gt;Assumindo que você use o banco de dados MySql e tenha uma tabela chamada &amp;#8220;nomes&amp;#8221;, e que essa tabela tenha os campos id e nome. Essa sintaxe pode ser usada em outros bancos, utilizaremos o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;DELETE a FROM nomes AS a, nomes AS b WHERE a.nome=b.nome AND a.id &amp;lt; b.id&lt;/pre&gt;

&lt;p&gt;Perceba que no comando sql após o &lt;code&gt;FROM&lt;/code&gt; eu chamo duas vezes a tabela &amp;#8220;nomes&amp;#8221;, mas as diferencio pelas letras &lt;strong&gt;a&lt;/strong&gt; e &lt;strong&gt;b&lt;/strong&gt;. Você poderia dar o nome que quisesse. Note também que depois do &lt;code&gt;WHERE&lt;/code&gt; eu faço a comparação entre as colunas, verificando a duplicidade e depois digo que o id de &amp;#8220;a&amp;#8221; deve ser menor que o de &amp;#8220;b&amp;#8221;. Dessa forma o MySql vai comparar todos os registros com o mesmo nome e apagar aqueles que contenham o menor id.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;nomes&lt;/strong&gt;: É a tabela com os registros duplicados.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;nome&lt;/strong&gt;: É o campo para comparação dos registros.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;id&lt;/strong&gt;: É a chave primária da tabela.&lt;/p&gt;

&lt;p&gt;Veja na prática como acontece:&lt;/p&gt;

&lt;p&gt;Tabelas com os registros duplicados&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/tableless-select-mysql.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-40122&#34; alt=&#34;tableless-select-mysql&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/tableless-select-mysql.png&#34; width=&#34;487&#34; height=&#34;310&#34; srcset=&#34;uploads/2014/01/tableless-select-mysql.png 487w, uploads/2014/01/tableless-select-mysql-263x168.png 263w&#34; sizes=&#34;(max-width: 487px) 100vw, 487px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aplicando o script descrito acima:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/tableless-mysql-script-delete.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-40121&#34; alt=&#34;tableless-mysql-script-delete&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/tableless-mysql-script-delete-588x205.png&#34; width=&#34;588&#34; height=&#34;205&#34; srcset=&#34;uploads/2014/01/tableless-mysql-script-delete-588x205.png 588w, uploads/2014/01/tableless-mysql-script-delete-329x115.png 329w, uploads/2014/01/tableless-mysql-script-delete-660x231.png 660w, uploads/2014/01/tableless-mysql-script-delete.png 720w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caso queira apagar todos os registros duplicados, deixando apenas os registros únicos é só trocar o “&amp;lt;” por “!=”&lt;/p&gt;

&lt;p&gt;veja um exemplo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/tableless-mysql-script-deletall.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-40120&#34; alt=&#34;tableless-mysql-script-deletall&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/tableless-mysql-script-deletall-410x310.png&#34; width=&#34;410&#34; height=&#34;310&#34; srcset=&#34;uploads/2014/01/tableless-mysql-script-deletall-410x310.png 410w, uploads/2014/01/tableless-mysql-script-deletall-222x168.png 222w, uploads/2014/01/tableless-mysql-script-deletall.png 733w&#34; sizes=&#34;(max-width: 410px) 100vw, 410px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto! É isso aí pessoal, muito simples né?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>