<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Semântica on Tableless</title>
    <link>http://tableless.com.br/tags/sem%C3%A2ntica/index.xml</link>
    <description>Recent content in Semântica on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/sem%C3%A2ntica/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Linked Data e JSON-LD</title>
      <link>http://tableless.com.br/linked-data-e-json-ld/</link>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/linked-data-e-json-ld/</guid>
      <description>

&lt;p&gt;Antes de entrarmos em como esse negócio de JSON-LD e Linked Data, queria falar um pouco sobre como a internet funciona. &lt;a href=&#34;http://diegoeis.com/organizando-a-informacao.html&#34;&gt;Organização da Informação&lt;/a&gt; na web é um dos assuntos que mais me fascinam no mundo da internet. Inclusive quando falamos sobre semântica e organização da informação de forma que não apenas humanos, mas computadores possam publicar e reutilizar essa informação livremente na web.&lt;/p&gt;

&lt;p&gt;Hoje a internet é baseada basicamente em código HTML, onde nós podemos mostrar imagens, vídeos, audios e principalmente textos. Os links são o meio pelo qual nós organizamos toda a informação na internet, referenciando informações de um site para outro. Os links organizam, de certa forma, todos os websites da internet, sempre cruzando um termo com uma fonte de informação relacionada àquele termo.&lt;/p&gt;

&lt;p&gt;Nós podemos quebrar a internet em duas partes específicas: nós temos a parte onde nós enxergamos, que basicamente é baseada em HTML, CSS e JS. É onde seres humanos interagem com nosso produto e nosso site.&lt;/p&gt;

&lt;p&gt;Há também a segunda parte, que é formada basicamente por robôs e sistemas que também interagem com nossos produtos e sites, mas de forma diferente dos humanos, claro, consumindo dados que disponibilizamos de várias formas. Uma desses formatos é o JSON. Como alguns outros formatos, o JSON tem uma estrutura que é simples de ser lida por humanos e principalmente por robôs.&lt;/p&gt;

&lt;p&gt;Linked Data é um termo relativamente novo. É um termo que apresenta um caminho para publicar dados interconectados entre diferentes sites, possibilitando que um site referencie e reutilize dados de um outro site. Tipo, um buscador, reutilizando as informações do seu site para mostrar nos resultados da busca.&lt;/p&gt;

&lt;p&gt;Conectar as informações usando links resolve a parte de como os seres humanos conseguem relacionar um site (ou um punhado de informação), com outro. Mas como conseguimos fazer com que as máquinas entendam esse relacionamento? Você, como ser humano (eu espero que você seja um), consegue saber quando um site sobre um determinado assunto contém um link que leva para um site de um assunto completamente diferente, mudando de contexto. Mas as máquinas não conseguem fazer essa distinção. Para a máquina, um link sempre vai ser um link. Se é sobre feijão ou sobre automóveis, um link será um link, mesmo tendo uma mudança de contexto entre os assuntos. Para conseguir relacionar melhor as informações, precisamos indicar melhor para as máquinas o contexto dessa informação, ou melhor, desses dados (informação e dados são coisas diferentes).&lt;/p&gt;

&lt;p&gt;Você já deve ter ouvido falar sobre RDFa. RDFa é um padrão básico para que possamos dar um pouco mais de contexto para as máquinas sobre os dados que elas estão consumindo. RDFa nada mais é do que um conjunto de atributos que colocamos em linguagens de marcação (HTML, XHTML, XML etc), de forma que as máquinas consigam entender que tipo de informação elas estão lidando. Algo como isso:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;h1 property=&#34;dc:title&#34;&amp;gt;Um artigo sobre Semântica&amp;lt;/h1&amp;gt;
&amp;lt;span property=&#34;dc:author&#34;&amp;gt;Diego Eis&amp;lt;/span&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Sim. Você já viu algo parecido quando estudou sobre Microformatos, &lt;a href=&#34;http://tableless.com.br/introducao-a-microdata-no-html5/&#34;&gt;Micro Data&lt;/a&gt; e etc, que são modelos de dados muito mais amigáveis e inteligente do RDF/XML. Mas esse foi um dos primeiros modelos adotados pelo &lt;a href=&#34;https://www.w3.org/2001/sw/RDFCore/&#34;&gt;W3C há muito tempo&lt;/a&gt; e por isso, talvez, só talvez, valha a pena você dar uma lida para entender o conceito.&lt;/p&gt;

&lt;p&gt;Deixando isso de lado, o que quero dizer é que nós marcamos esse tipo de informação, para que buscadores, redes sociais e qualquer outro tipo de sistema que precise de dados para funcionar, possa consumir os dados de forma mais inteligente. Então, enquanto as pessoas consomem HTML, lendo seus textos, vendo suas imagens e assistindo seus vídeos, as máquinas consomem esses dados vasculhando seu código procurando por algum significado.&lt;/p&gt;

&lt;h2 id=&#34;o-json-ld-e-o-context&#34;&gt;O JSON-LD e o @context&lt;/h2&gt;

&lt;p&gt;Mas nós não conseguimos resolver de verdade como as máquinas consomem esses dados. Como eu disse, as máquinas precisam de mais detalhes sobre os dados que publicamos. Eu fiz uma apresentação falando sobre como melhoramos a semântica do código usando as &lt;a href=&#34;http://www.slideshare.net/diegoeis/a-verdadeira-semntica-do-html5&#34;&gt;novas tags do HTML5 e microdata&lt;/a&gt;. Mas temos como melhorar isso, usando JSON-LD.&lt;/p&gt;

&lt;p&gt;Quando um sistema acessar seu site, ele vai receber um arquivo JSON, que contém informações sobre o assunto do seu site. O formato é praticamente idêntico ao JSON que você já deve conhecer, mas com alguns valores e chaves diferentes, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;@context&#34;: &#34;http://json-ld.org/contexts/person.jsonld&#34;,
  &#34;@id&#34;: &#34;http://dbpedia.org/page/Bob_Dylan&#34;,
  &#34;name&#34;: &#34;Bob Dylan&#34;,
  &#34;born&#34;: &#34;1941-05-24&#34;,
  &#34;spouse&#34;: &#34;http://dbpedia.org/resource/Sara_Dylan&#34;
}
&lt;/pre&gt;

&lt;p&gt;O problema é quando você começa a receber esses dados de múltiplos websites. Todos eles oferecem dados como esse. Mas e se dois sites colocarem informações iguais em alguns valores? Por exemplo, um site fornece o seguinte dado:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;name&#34;: &#34;Diego&#34;,
  &#34;homepage&#34;: &#34;http://diegoeis.com&#34;
}
&lt;/pre&gt;

&lt;p&gt;E o outro:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;name&#34;: &#34;diegoeis&#34;,
  &#34;homepage&#34;: &#34;http://diegoeis.com&#34;
}
&lt;/pre&gt;

&lt;p&gt;Perceba que no primeiro exemplo, estamos falando sobre uma pessoa. Já no segundo exemplo, em vez do nome de alguém, está algo parecido com um nickname. O robô não tem como saber o que é cada coisa. É por isso que no JSON-LD tem um conceito chamado &lt;strong&gt;@context&lt;/strong&gt;. O &lt;strong&gt;@context&lt;/strong&gt; diz para a aplicação como interpretar o contexto daquelas informações. Perceba que sempre que você conversa com alguém na vida real, a conversa acontece em volta de um contexto. O exemplo legal ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;@context&#34;: &#34;http://json-ld.org/contexts/person.jsonld&#34;,
  &#34;name&#34;: &#34;Diego&#34;,
  &#34;homepage&#34;: &#34;http://diegoeis.com&#34;
}
&lt;/pre&gt;

&lt;h3 id=&#34;mas-e-o-schema-org&#34;&gt;Mas e o Schema.org?&lt;/h3&gt;

&lt;p&gt;Ahh! Sabia que ia rolar essa pergunta. O &lt;a href=&#34;http://schema.org/&#34;&gt;Schema.org&lt;/a&gt; é uma comunidade colaborativa, formada por buscadores como Google e Yahoo! para criar, manter e promover formatos de dados estruturados para a internet, ajudando a estruturar dados para emails, páginas, sistemas etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O que é um vocabulário: imagina que você tem uma série de coisas para descrever para as máquinas, por exemplo: suponha um site sobre filmes. Você quer indicar para os sistemas de busca (ou qualquer outro tipo de sistema interessado), qual é o pedaço de texto na página que é a resenha do filme, qual imagem é o poster do filme etc. Você marcaria o HTML assim:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;htlang-ml&#34;&gt;&amp;lt;div itemscope itemtype=&#34;http://schema.org/Movie&#34;&amp;gt;
  &amp;lt;a itemprop=&#34;url&#34; href=&#34;http://www.warnerbros.com/matrix&#34;&amp;gt;&amp;lt;div itemprop=&#34;name&#34;&amp;gt;&amp;lt;strong&amp;gt;Matrix&amp;lt;/strong&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;
  
  &amp;lt;div itemprop=&#34;description&#34;&amp;gt;The best movie in the real world.&amp;lt;/div&amp;gt;
  
  &amp;lt;div itemprop=&#34;director&#34; itemscope itemtype=&#34;http://schema.org/Person&#34;&amp;gt;
    Directed by: &amp;lt;span itemprop=&#34;name&#34;&amp;gt;The Wachowskis&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
  
  &amp;lt;div&amp;gt;Starring: 
    &amp;lt;div itemprop=&#34;actors&#34; itemscope itemtype=&#34;http://schema.org/Person&#34;&amp;gt;
      &amp;lt;span itemprop=&#34;name&#34;&amp;gt;Laurence Fishburne&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div itemprop=&#34;actors&#34; itemscope itemtype=&#34;http://schema.org/Person&#34;&amp;gt;
      &amp;lt;span itemprop=&#34;name&#34;&amp;gt;Keanu Reeves&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Perceba que então, o Google, por exemplo, consegue saber o que é cada pedaço de dado da página. Assim ele consegue classificar melhor a informação.&lt;/p&gt;

&lt;p&gt;A ideia é o seguinte, o &lt;strong&gt;@context&lt;/strong&gt; serve para que você consiga especificar o vocabulário dos tipos e propriedades que você está servindo no seu documento. Ali no exemplo, eu usei o vocabulário que o próprio pessoal do JSON-LD publicou. Mas o Google, assim como outros sistemas de busca, apoiam largamente o uso do Schema.org, que é um padrão de vocabulário. Fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;@context&#34;: &#34;http://schema.org&#34;,
  &#34;@type&#34;: &#34;Person&#34;,
  &#34;name&#34;: &#34;Diego&#34;,
  &#34;homepage&#34;: &#34;http://diegoeis.com&#34;
}
&lt;/pre&gt;

&lt;p&gt;Veja ali que a segunda chave é o tipo. O Schema.org fornece uma série de vocabulários, logo, preciso dizer qual é o tipo do vocabulário que eu estou me referindo.&lt;/p&gt;

&lt;p&gt;Perceba que &lt;strong&gt;@context&lt;/strong&gt; e o &lt;strong&gt;@type&lt;/strong&gt; definem o “significado” das outras chaves. Se fosse uma empresa:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  “@context”: “http://schema.org/“,
  “@type”: “Organization”,
  “name”: “National Public Radio”
}
&lt;/pre&gt;

&lt;p&gt;A chave &lt;strong&gt;name&lt;/strong&gt; ali agora se refere ao nome de uma Organização e não de uma pessoa. E assim segue com outras “coisas”.&lt;/p&gt;

&lt;h2 id=&#34;e-o-microdata&#34;&gt;E o Microdata?&lt;/h2&gt;

&lt;p&gt;Bom, se você usar o JSON-LD, você não precisa usar Microdata. O Google está investindo pesando com o JSON-LD, por isso, acho que você devia pensar em usá-lo. Outra coisa: para usar Microdata, você vai precisar mexer no seu código HTML para inserir os atributos necessários. Já com o JSON-LD isso não é necessário, já que você serve via JSON as partes necessárias das informações que você quer publicar.&lt;/p&gt;

&lt;h2 id=&#34;identificadores-globais-do-json-ltd&#34;&gt;Identificadores Globais do JSON-LTD&lt;/h2&gt;

&lt;p&gt;Mas não adianta usar uma terminologia curta, que máquinas e humanos entendam, contendo um contexto, se você ainda não consegue identificar exatamente qual o assunto da conversa. No exemplo acima, o assunto era uma pessoa chamada &lt;strong&gt;Diego&lt;/strong&gt;. Mas qual &lt;strong&gt;Diego&lt;/strong&gt;? Existem milhares deles por aí. Para fazer isso, o JSON-LD usa uma &lt;strong&gt;@id&lt;/strong&gt; para identificar globalmente esse assunto (que pode ser um animal, uma pessoa, um objeto etc).&lt;/p&gt;

&lt;p&gt;Logo, se alguém quiser falar sobre o &lt;strong&gt;Diego&lt;/strong&gt;, basta referenciar esse id específico.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  “@context”: “http://json-ld.org/contexts/person.jsonld”,
  “@id”: “http://diegoeis.com/sobre”
  “name”: “Diego”,
  “homepage”: “http://diegoeis.com”
}
&lt;/pre&gt;

&lt;p&gt;Logo, existem três coisas principais que precisamos entender sobre o JSON-LD.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ele te dá um contexto para a informação.&lt;/li&gt;
&lt;li&gt;Ele usa uma terminologia e uma estrutura fácil para máquinas e humanos.&lt;/li&gt;
&lt;li&gt;Ele identifica o assunto para resolver a ambiguidade de informações.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;como-eu-sirvo-o-json-ld&#34;&gt;Como eu sirvo o JSON-LD&lt;/h2&gt;

&lt;p&gt;Simples: basta chamar na sua página o JSON com as informações que você quer publicar. Veja abaixo um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;&amp;lt;script type=“application/ld+json”&amp;gt; 
{ 
  “@context” : “http://schema.org”, 
  “@type” : “Article”, 
  “name” : “Um pouco sobre imagens para Web”, 
  “author” : { “@type” : “Person”, 
  “name” : “por Diego Eis” }, 
  “datePublished” : “2016-07-05”, 
  “image” : “http://tableless.com.br/wp-content/uploads/2016/07/image-format.jpg”, 
  “articleBody” : “Queria falar um pouco sobre alguns formatos de imagens que usamos todos os dias. Dar algumas informações que encontrei por aí. Vamos explorar as duas principais opções de formato gráfico que pode ser usado na Web para representar gráficos simples,  esquemas ou logotipos. Embora hoje possamos usar SVG em diversos momentos,  principalmente para ícones ou Logos, o PNG e o GIF ainda podem ser usadas. Depois falamos mais sobre o SVG.&amp;lt;/P&amp;gt;\n&amp;lt;H3&amp;gt;GIF&amp;lt;/H3&amp;gt;\n&amp;lt;P&amp;gt;GIF (sigla para Graphics Interchange Format) foi desenvolvido no final dos anos 1980 e ainda é amplamente utilizado. PNG (Portable Network Graphics) foi desenvolvido por volta de 1995, tornou-se uma recomendação W3C em 1996, e tem sido amplamente implementado na maioria dos navegadores da Web, logo em 1998.&amp;lt;/P&amp;gt;&amp;lt;/p&amp;gt;}
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O Google tem uma ferramenta sensacional que te ajuda a criar marcação de dados estruturados direto na sua página. &lt;a href=&#34;https://www.google.com/webmasters/markup-helper/u/0/&#34;&gt;Olha aqui&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;um-pouco-mais-sobre-web-semântica&#34;&gt;Um pouco mais sobre Web Semântica&lt;/h2&gt;

&lt;p&gt;Essas coisas são as fundações do Linked Data. A Web Semântica é muito do que simplesmente organizar informação. Ela envolve também relacionar esses dados encontrados em diferentes pontos da internet, além de facilitar o consumo e a reutilização desses dados por máquinas e seres humanos.&lt;/p&gt;

&lt;p&gt;O Tim Berners-Lee &lt;a href=&#34;https://www.w3.org/DesignIssues/LinkedData.html&#34;&gt;fala sobre os quatro passos (ou regras)&lt;/a&gt; para que os dados sejam interconectados na internet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Identificar as coisas com URIs. Se a forma de identificar os dados não usam o formato universal de símbolos de URI, nós não podemos chamar isso de Web Semântica.&lt;/li&gt;
&lt;li&gt;Usar URI pelo protocolo HTTP é totalmente aceitável pela web inteira. Existe uma tendência gigante da criação de novos esquemas de URI como LSIDs, XRIs etc, se baseando em algo totalmente novo, por fora do DNS, impossibilitando o consumo da informação via formato não popular.&lt;/li&gt;
&lt;li&gt;É necessário ter acesso à informação via URIs. Basicamente você precisa acessar uma URI e encontrar a informação ali, pronta para ser reutilizada.&lt;/li&gt;
&lt;li&gt;Usar links para relacionar dados pela web.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Veja as regras se baseiam em fundações fortes da web hoje. Talvez essas fundações mudem. Mas não vai ser fácil. Veja o trabalho que é fazer para implementar o HTTP/2. Por isso creio que essas regras valerão durante muito tempo e serão ainda nossa baliza para poder servir informação de forma livre pela internet.&lt;/p&gt;

&lt;h3 id=&#34;para-ler-mais&#34;&gt;Para ler mais:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://json-ld.org/&#34;&gt;Site oficial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://manu.sporny.org/2014/json-ld-origins-2/&#34;&gt;JSON-LD and Why I Hate the Semantic Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thecustomizewindows.com/2014/08/json-ld-details/&#34;&gt;JSON-LD in Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4x_xzT5eF5Q&#34;&gt;Vídeo em ingles sobre Linked Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/json-ld/json-ld.org&#34;&gt;Repositório do JSON-LD no GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://norman.walsh.name/2004/07/30/rdfxml&#34;&gt;Is RDF/XML Good For Anything?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Entendendo o Outline do HTML</title>
      <link>http://tableless.com.br/entendendo-o-outline-html/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/entendendo-o-outline-html/</guid>
      <description>&lt;p&gt;O Outline do documento HTML é a estrutura do documento que é gerada pelos títulos, títulos de formulários, títulos das tabelas e qualquer outro elemento que marque alguma seção de conteúdo no documento. Essas marcações de Outline podem ser usadas para várias iniciativas, por exemplo, um browser ou alguma outra interface possa criar uma Tabela de Conteúdo. Outras tecnologias assistivas podem usar também estas seções para formar a navegação, como em um leitor de tela, mas ou menos como acontece no WAI-ARIA, mas de maneira mais natural.&lt;/p&gt;

&lt;p&gt;Os elementos de cabeçalho h1-h6, contribuem para o outline do documento HTML 5, criando uma estrutura hierárquica e definindo as seções da página. Os cabeçalhos são importantes para otimização de buscas e também para navegação em leitores de telas, já que usuários desses aparelhos navegam pelos títulos na página.&lt;/p&gt;

&lt;p&gt;Nas versões HTML4 e XHTML tudo o que tinhamos para estruturar o outline eram as tags h1-h6. Tínhamos então o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;

  &amp;lt;h1&amp;gt;Midias reprodutiveis&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;Disco&amp;lt;/h2&amp;gt;
  &amp;lt;h2&amp;gt;Arquivo&amp;lt;/h2&amp;gt;
  &amp;lt;h3&amp;gt;Video: Avi, Divx, Mp4, Xvid&amp;lt;/h3&amp;gt;
  &amp;lt;h2&amp;gt;Disco USB de armazenamento&amp;lt;/h2&amp;gt;

&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;E sua saída era:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
  1. Disco
  2. Arquivo
    1. Video: AVI, DIVx, MP4, Xvid
  3. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Browsers comuns não mostram o outline do documento portanto para visualiza-los é necessário usar uma ferramenta chamada HTML5 outliner(&lt;a href=&#34;http://gsnedders.html5.org/outliner/&#34; title=&#34;Link do Html 5 Outliner&#34;&gt;https://gsnedders.html5.org/outliner/&lt;/a&gt;). Mesmo que o nível dos cabeçalhos dos exemplos sejam diferentes, a saída como vimos é a mesma.&lt;/p&gt;

&lt;p&gt;Pois bem, agora com o HTML5 temos novas formas de estruturar o documento. Temos os elementos de sectioning content — article, aside, nav e sections — que demarcam diferentes seções num documento e define o escopo para os elementos de cabeçalho (assim como o header e o footer).&lt;/p&gt;

&lt;p&gt;Isso mudou o paradigma e agora podemos ter diversos elementos seccionados com sua própria hierarquia de h1-h6. Isso tem efeito no outline. Num documento onde temos:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;

   &amp;lt;h1&amp;gt;Midias reprodutiveis&amp;lt;/h1&amp;gt;

   &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Disco&amp;lt;/h1&amp;gt;
   &amp;lt;/section&amp;gt;

   &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Arquivo&amp;lt;/h1&amp;gt;
      &amp;lt;section&amp;gt;&amp;lt;!-- essa é uma section de outra --&amp;gt;
      &amp;lt;h1&amp;gt;Video: Avi, Divx, Mp4, Xvid&amp;lt;/h1&amp;gt;
      &amp;lt;/section&amp;gt;
   &amp;lt;/section&amp;gt;

   &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Disco USB de armazenamento&amp;lt;/h1&amp;gt;
   &amp;lt;/section&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Temos esse outline:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
  1. Disco
  2. Arquivo
    1. Video: AVI, DIVx, MP4, Xvid
  3. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Como pode ser observado cada section tem o seu h1, mas o outline não sofre alteração.&lt;/p&gt;

&lt;p&gt;Mas e se o segundo exemplo não tivesse as sections? Então teriamos um resultado distinto:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
 2. Disco
 3. Arquivo
 4. Video: AVI, DIVx, MP4, Xvid
 5. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Dentre o primeiro e o segundo exemplo, claro que o segundo é mais válido por sua importância semântica.&lt;/p&gt;

&lt;p&gt;Mas todas as sections tem as tags h1. Isso pode ser perigoso. Os leitores de tela não são atualizados no mesmo passo um do outro (assim como os browsers comuns). Sendo assim esse tipo de marcação pode impactar severamente, comprometendo a acessibilidade. Poderíamos usar o segundo exemplo e em alguns leitores de tela o resultado da saída ser o da ultima abordagem:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
 2. Disco
 3. Arquivo
 4. Video: AVI, DIVx, MP4, Xvid
 5. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Isso ocorre por quê esses leitores não distinguem a marcação dentro das tags section. Sendo assim o ideal seria usar as tags sections proporcionando uma melhor marcação, mas uma hierarquia de cabeçalhos semelhante a do HTML4.&lt;/p&gt;

&lt;p&gt;Então fazemos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;

   &amp;lt;h1&amp;gt;Midias reprodutiveis&amp;lt;/h1&amp;gt;

   &amp;lt;section&amp;gt;  
     &amp;lt;h2&amp;gt;Disco&amp;lt;/h2&amp;gt; 
   &amp;lt;/section&amp;gt; 

   &amp;lt;section&amp;gt; 
     &amp;lt;h2&amp;gt;Arquivo&amp;lt;/h2&amp;gt; 
     &amp;lt;section&amp;gt;&amp;lt;!-- essa é uma section de outra --&amp;gt; 
       &amp;lt;h3&amp;gt;Video: Avi, Divx, Mp4, Xvid&amp;lt;/h3&amp;gt; 
     &amp;lt;/section&amp;gt; 
   &amp;lt;/section&amp;gt; 

   &amp;lt;section&amp;gt; 
     &amp;lt;h2&amp;gt;Disco USB de armazenamento &amp;lt;/h2&amp;gt; 
   &amp;lt;/section&amp;gt; 

&amp;lt;body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e a saída nos leitores de tela; atualizados ou não; será a mesma:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
  1. Disco
  2. Arquivo
    1. Video: AVI, DIVx, MP4, Xvid
  3. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Assim preservamos a acessibilidade em leitores de tela atualizados ou não, privilegiando todos os usuários.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://http://www.brucelawson.co.uk/2009/headings-in-html-5-and-accessibility/&#34; title=&#34;Link para Bruce Lawson - Headings in HTML 5 and accessibility&#34;&gt;Bruce Lawson &amp;#8211; Headings in HTML 5 and accessibility&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como escrever bem para o SEO – Texto e Contexto, da palavra-chave à semântica.</title>
      <link>http://tableless.com.br/como-escrever-bem-para-o-seo-texto-e-contexto-da-palavra-chave-semantica/</link>
      <pubDate>Fri, 03 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-escrever-bem-para-o-seo-texto-e-contexto-da-palavra-chave-semantica/</guid>
      <description>

&lt;p&gt;Como escrever bem para o SEO não é um assunto bem explorado, mas muito mal conduzido. Vamos falar sobre a forma de escrever para se atingir bons resultados com SEO no Google.&lt;/p&gt;

&lt;h2 id=&#34;texto-e-contexto-a-contextualização-dos-buscadores&#34;&gt;Texto e Contexto: a contextualização dos buscadores&lt;/h2&gt;

&lt;p&gt;Pois é, está aí uma coisa que deve ser entendida. O significado desse título é mais do que pensar em um texto coeso, com boa estruturação e voltado para um público alvo específico, até porque isso soa meio obvio. Mas vai além. Você já reparou como a web ainda é poluída por sites onde as palavras-chave são mal colocadas em seus textos e títulos?&lt;/p&gt;

&lt;p&gt;Volta e meia a gente se depara com aquele site que fala a mesma palavra-chave umas 10 vezes, do mesmo jeito (igualzinha mesmo!) em tudo que é &lt;strong&gt;&lt;H&gt;&lt;/strong&gt;. Não estou nem falando do puro Keyword Stuffing, mas de sites normais, onde o dono do site acha que quanto mais palavras-chave colocar, melhor ficará no ranking.&lt;/p&gt;

&lt;p&gt;Nessas horas é que o seu conhecimento vai fazer a diferença. Hoje os buscadores são muito mais inteligentes e já não basta saber direcionar e contextualizar o leitor. Mais do que isso, temos que saber contextualizar os buscadores. A ideia é saber explorar de formas diferentes as palavras-chave e assim desenvolver o conteúdo relevante.&lt;/p&gt;

&lt;p&gt;Antigamente as estratégias eram mais engessadas, muitas vezes focadas em um termo de busca. Mas nos dias de hoje, com o SEO crescendo muito, a ideia é mostrar ao buscador que você é especialista em determinado assunto.&lt;/p&gt;

&lt;h2 id=&#34;webwriting&#34;&gt;Webwriting&lt;/h2&gt;

&lt;p&gt;Webwriting, basicamente, é um conjunto de estratégias para desenvolver um texto com um conteúdo estrategicamente escolhido, que chame a atenção do usuário.&lt;/p&gt;

&lt;p&gt;O que acontece é que não é só ir lá e escrever. Você deve focar na estratégia e em uma forma de contextualizar a palavra chave no seu texto.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/12/produção-de-conteúdo.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-40003&#34; alt=&#34;como escrever bem para o SEO - 4 passos&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/produção-de-conteúdo.png&#34; width=&#34;817&#34; height=&#34;315&#34; srcset=&#34;uploads/2013/12/produção-de-conteúdo.png 817w, uploads/2013/12/produção-de-conteúdo-329x126.png 329w, uploads/2013/12/produção-de-conteúdo-588x226.png 588w, uploads/2013/12/produção-de-conteúdo-660x254.png 660w&#34; sizes=&#34;(max-width: 817px) 100vw, 817px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Faça um Brainstorm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Isso é essencial, se você procura uma forma de otimizar seu site para um termo definido de forma contextualizada, essa é uma grande sacada. Ao se definir um tema (que também pode ser feito pelo brainstorm) você pode levantar tópicos interessantes dessa forma.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Estude, pesquise e tenha embasamento.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Saber o que falar nem sempre é o desafio, mas saber sobre o que você vai falar é, de fato, muito importante. Seja o cara naquilo que você quer passar, domine o assunto. Não é legal escrever um artigo ou produzir um conteúdo para o seu site sem qualidade.  Portanto, estude muito, pesquise muito e tenha embasamento.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Planejamento&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uma fase legal! Aqui é onde você vai ditar as regras, escolher como distribuir o conteúdo. Pense em imagens relacionadas (sempre com boa qualidade, por favor). Você também pode pensar em vídeos e enriquecer seus tópicos e/ou parágrafos estrategicamente, deixando o conteúdo mais atrativo e interessante.&lt;/p&gt;

&lt;h2 id=&#34;dicas-para-imagens&#34;&gt;Dicas para imagens&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Procure imagens de alta qualidade.&lt;/li&gt;
&lt;li&gt;Utilize imagens que realmente tenham a ver com o assunto. Seja responsável nessa escolha ;-).&lt;/li&gt;
&lt;li&gt;Renomeie arquivo utilizando a palavra chave. Faça isso sem inventar, use a keyword mas em um contexto que represente bem a imagem.&lt;/li&gt;
&lt;li&gt;Insira as imagens relacionadas no seu texto perto dos parágrafos que tratam do assunto.&lt;/li&gt;
&lt;li&gt;Utilize legendas.&lt;/li&gt;
&lt;li&gt;Cite os direitos autorais.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dicas-para-o-texto&#34;&gt;Dicas para o texto&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Utilize listas em seu texto. É intuitivo e chama a atenção do usuário.&lt;/li&gt;
&lt;li&gt;Parágrafos curtos  bem espaçados e com um fundo leve. Não cansem o usuário antes mesmo de ele começar a ler.&lt;/li&gt;
&lt;li&gt;Seja objetivo.&lt;/li&gt;
&lt;li&gt;Fuja de especificações.&lt;/li&gt;
&lt;li&gt;Utilize a técnica da pirâmide invertida!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dicas-para-vídeos&#34;&gt;Dicas para vídeos&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Utilize vídeos não muito longos.&lt;/li&gt;
&lt;li&gt;Utilize texto junto ao vídeo, não deixe sozinho na página.&lt;/li&gt;
&lt;li&gt;Tente utilizar vídeos com boa qualidade.&lt;/li&gt;
&lt;li&gt;Faça as marcações de Rich Snippet para conteúdo de vídeo:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div itemprop=&#34;video&#34; itemscope itemtype=&#34;http://schema.org/VideoObject&#34;&amp;gt;

&amp;lt;h2&amp;gt;Video: &amp;lt;span itemprop=&#34;name&#34;&amp;gt;Title&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;

&amp;lt;meta itemprop=&#34;duration&#34; content=&#34;T1M33S&#34; /&amp;gt;

&amp;lt;meta itemprop=&#34;thumbnailUrl&#34; content=&#34;thumbnail.jpg&#34; /&amp;gt;

&amp;lt;meta itemprop=&#34;contentURL&#34; content=&#34;http://www.example.com/video123.flv&#34; /&amp;gt;

&amp;lt;meta itemprop=&#34;embedURL&#34; content=&#34;http://www.example.com/videoplayer.swf?video=123&#34; /&amp;gt;

&amp;lt;meta itemprop=&#34;uploadDate&#34; content=&#34;2011-07-05&#34; /&amp;gt;

&amp;lt;meta itemprop=&#34;expires&#34; content=&#34;2012-01-30&#34; /&amp;gt;

&amp;lt;object ...&amp;gt;

&amp;lt;param ...&amp;gt;

&amp;lt;embed type=&#34;application/x-shockwave-flash&#34; ...&amp;gt;

&amp;lt;/object&amp;gt;

&amp;lt;span itemprop=&#34;description&#34;&amp;gt;Video description&amp;lt;/span&amp;gt;

&amp;lt;/div&amp;gt;

&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://support.google.com/webmasters/answer/2413309?hl=pt-BR&#34;&gt;Para saber mais, visite o help da Google para Rich Snippets e Marcação dedados estruturados&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora é hora de escrever e ser feliz. Vamos às estratégias:&lt;/p&gt;

&lt;h3 id=&#34;contextualização-da-palavra-chave&#34;&gt;Contextualização da palavra chave&lt;/h3&gt;

&lt;p&gt;Como eu falei lá no início do artigo, é complicado ficar manipulando o texto em função de uma keyword. Por isso a ideia da contextualização. Não utilize diversas vezes a mesma palavra chave em um texto ou parágrafo. Claro que você fará o básico de coloca-la em no seu &lt;strong&gt;H1&lt;/strong&gt;, nos atributos alt das imagens (sem exageros), no título da sua página, entre outras. Mas no texto é diferente. Supondo que você quer otimizar &lt;strong&gt;Locação de Brinquedos.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Neste caso, você poderia variar a palavra chave e criar o contexto de forma bem legal, por exemplo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Locar brinquedos.&lt;/li&gt;
&lt;li&gt;Brinquedos que geralmente são locados.&lt;/li&gt;
&lt;li&gt;Locação.&lt;/li&gt;
&lt;li&gt;Brinquedos.&lt;/li&gt;
&lt;li&gt;Aluguel de brinquedos.&lt;/li&gt;
&lt;li&gt;Brinquedos alugados.&lt;/li&gt;
&lt;li&gt;Pula pula para crianças.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assim você consegue criar um texto legal, evidenciando e contextualizando a palavra chave. Veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/12/palavra-chave-contextualizada.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-40004&#34; alt=&#34;como escrever conteúdo para seo - contextualizando a palavra chave&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/palavra-chave-contextualizada.png&#34; width=&#34;722&#34; height=&#34;409&#34; srcset=&#34;uploads/2013/12/palavra-chave-contextualizada.png 722w, uploads/2013/12/palavra-chave-contextualizada-296x168.png 296w, uploads/2013/12/palavra-chave-contextualizada-547x310.png 547w&#34; sizes=&#34;(max-width: 722px) 100vw, 722px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;semântica&#34;&gt;Semântica&lt;/h2&gt;

&lt;p&gt;Esses dias &lt;a href=&#34;http://tableless.com.br/semantica-padroes-e-o-que-voce-tem-a-ver-com-isto/&#34;&gt;a Dani publicou um artigo aqui falando de semântica&lt;/a&gt;, muito legal e ela colocou muito bem o quanto as pessoas não escrevem o HTML da forma correta. No SEO o impacto disso pode ser devastador, pois o google presta muita atenção no seu código. E ajuda-lo (fazer a sua obrigação, na verdade!) pode ser um caminho mais curto e correto.&lt;/p&gt;

&lt;p&gt;Utilize Strong para dar importância aos trechos mais importantes. Crie um padrão para botões e links. Estruture a navegação interna do site. Faça isso, mas faça de forma inteligente e bem feita. Faça o uso da Tag &lt;strong&gt;&lt;nav&gt;&lt;/strong&gt; para mostrar ao buscador a sua navegação. Assim ele poderá ver que você se esforçou na montagem da arquitetura do site!&lt;/p&gt;

&lt;p&gt;Utilize listas e utilize &lt;strong&gt;&lt;h2&gt;&lt;/strong&gt; para escrever subtítulos (lembrando que o título principal é o &lt;strong&gt;&lt;h1&gt;&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Muitas vezes você tem um bom texto, um conteúdo de qualidade, mas não escreve direito o HTML da página. Com isso você deixa de usufruir da inteligência dos buscadores, que vão ler os dados estruturados, os alt texts das imagens, entre outros.&lt;/p&gt;

&lt;p&gt;A sacada aqui não é ter um código validado pelo W3C, e sim algo correto, que melhore a usabilidade da página e escancare para o buscador um conteúdo bem feito.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Conheçam bem o HTML, ou passem isso para alguém que sabe e oriente a sua equipe ou você mesmo a focar na qualidade, não na quantidade. Seja o mestre no assunto, entenda daquilo que você escreve. Seja objetivo e convincente para passar conteúdo relevante. Muita gente sabe muito, mas não transmite da forma correta. Seja criativo e lembre-se: Não especifique, conte uma história!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semântica, padrões e o que você tem a ver com isto</title>
      <link>http://tableless.com.br/semantica-padroes-e-o-que-voce-tem-a-ver-com-isto/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/semantica-padroes-e-o-que-voce-tem-a-ver-com-isto/</guid>
      <description>

&lt;p&gt;O HTML é uma linguagem simples de aprender, mas muito difícil de dominar. Segundo a documentação da W3C existem atualmente 107 elementos de HTML5. Muitos deles ainda causam certa confusão entre os desenvolvedores ou por possuírem funções muito parecidas, comportamentos visuais praticamente idênticos ou ainda por serem simplesmente desconhecidos pela comunidade. Alguns elementos ainda são chamados de &amp;#8220;mais semânticos&amp;#8221; que outros. Mas o que isto quer dizer afinal?&lt;/p&gt;

&lt;p&gt;No post de hoje vamos fazer uma breve comparação entre alguns destes elementos para que você tenha sempre a carta certa na manga na hora certa e possa atribuir significado de maneira efetiva.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-web-semântica&#34;&gt;O que é web semântica?&lt;/h2&gt;

&lt;p&gt;A explicação curta: semântica é o estudo do significado. Poderíamos parar por aqui. Mas não vamos.&lt;/p&gt;

&lt;p&gt;A explicação longa e contextualizada: a web semântica é um movimento colaborativo para organizar a informação de maneira acessível para computadores e máquinas através de padrões de formatação de dados. Quem cunhou este termo foi  Tim Berners-Lee, o inventor do protocolo WWW. Isto parte de um esforço para fazer a informação ser facilmente encontrada e compreendida por mecanismos de busca, ser acessível para pessoas com deficiências visuais utilizando leitores de voz e, em um futuro utópico, ser &amp;#8220;compreendida&amp;#8221; pelos computadores. Assim tarefas chatas, burocráticas e que levam muito tempo para serem realizadas poderão ser feitas por máquinas.&lt;/p&gt;

&lt;p&gt;Você pode estar pensando:  o que eu tenho a ver com isto? A resposta é bem simples: tudo. Ainda não possuímos computadores com inteligências artificiais que possam despreender significado da informação na internet, mas podemos marcar o conteúdo de forma que as máquinas possam compreender o contexto de cada bloco de informação e assim atribuir uma &amp;#8220;etiqueta&amp;#8221; de significado. Por exemplo, ao utilizar a tag &lt;nav&gt; estamos dizendo para todos os sistemas do mundo  &amp;#8220;Ei, a navegação está bem aqui&amp;#8221;. Ou ao marcar um título com a tag h1 você está na verdade dizendo &amp;#8220;Cara, este é o título MAIS IMPORTANTE deste artigo&amp;#8221;. Não importa se o texto está em chinês, russo ou português um h1 sempre será um título. E isto é só a ponta do iceberg. Usando meta-dados como schema ou o Facebook Open Graph podemos dizer para o computador não apenas que aquele h1 é um título, como qual é o assunto daquele dado. Assim podemos dizer que &amp;#8220;O HOBBIT&amp;#8221; é o título de um filme. Graças a este tipo de meta informação você já pode, no estado atual de organização da informação, pedir ao seu mecanismo de busca favorito que encontre a próxima seção deste filme ou que mostre uma lista de lojas que possuem o blu-ray em promoção. No futuro você poderá saber tudo o que existe na internet sobre &amp;#8220;O HOBBIT&amp;#8221; sem precisar mineirar a informação clicando manualmente de página em página.  Mas isto já vai além do escopo deste artigo… Em resumo saber qual é o contexto semântico de um determinado elemento não é cagação de regra. Marcação de texto semântica é um pequeno esforço para ajudar pessoas como eu e você a encontrarem, compartilharem, reutilizarem e combinarem dados.&lt;/p&gt;

&lt;h2 id=&#34;uma-questão-de-força-e-ênfase&#34;&gt;Uma questão de força e ênfase&lt;/h2&gt;

&lt;p&gt;A linguagem falada possuí algumas diferenças sutis que são muito difíceis de transmitir por escrito. Eu posso dizer &amp;#8220;Eu amo sorvetes&amp;#8221; e isto ter um significado completamente diferente conforme o tom da minha voz. É possível que esta seja uma afirmação simples e sem emoção, eu posso gritar a plenos pulmões para transmitir ao mundo meu amor ou eu posso estar sendo irônica o tempo todo e, neste caso, o que eu quero realmente comunicar é que eu odeio sorvetes. Tudo vai depender do volume, força, ênfase e humor transmitido pela minha voz.&lt;/p&gt;

&lt;p&gt;Da mesma maneira em HTML possuímos tags que, embora visualmente produzam resultados idênticos, possuem significados diferentes. É claro que não podemos contar com o refinamento e sofisticação de uma língua falada. É como se você só tivesse 107 etiquetas para marcar todo o conteúdo do mundo. Por que, enfim, é exatamente isto que estamos fazendo aqui na realidade. Mas, conhecendo melhor o significado de cada etiqueta podemos transmitir melhor estas mudanças de tom, certo?&lt;/p&gt;

&lt;h3 id=&#34;b-vs-strong&#34;&gt;&lt;b&gt; vs. &lt;strong&gt;&lt;/h3&gt;

&lt;p&gt;Aparentemente as tags &lt;b&gt; e &lt;strong&gt; fazem a mesma coisa: ambas deixam um texto em negrito. Mas existe uma diferença semântica aqui. O elemento &lt;b&gt; é utilizado para separar um conteúdo que, embora seja estilisticamente distinto e você deseje chamar atenção para ele, não possui um significado ou importância maior em relação ao texto normal. Isto pode servir para palavras-chaves, nomes de produtos e serviços, etc.&lt;/p&gt;

&lt;p&gt;Já o &lt;strong&gt; serve para marcar textos com maior importância.  Textos strong serão lidos pelos leitores de tela com uma voz mais forte (EU AMO SORVETEEEE). Este destaque não precisa necessariamente ser comunicado visualmente através do negrito. Utilizando CSS você pode criar contraste através da cor do texto, peso, forma, tamanho, background, etc. Tudo depende do que funciona melhor para o seu layout.&lt;/p&gt;

&lt;h3 id=&#34;em-vs-i&#34;&gt;&lt;em&gt; vs. &lt;i&gt;&lt;/h3&gt;

&lt;p&gt;A mesma confusão acontece entre as tags &lt;em&gt; e &lt;i&gt;. Embora o efeito visual das duas por padrão seja o mesmo &amp;#8211; deixar o texto em itálico &amp;#8211; existe uma diferença de significado. A tag &lt;em&gt; indica um texto com maior ênfase (eu AMO sorvete). Enquanto &lt;i&gt; é utilizado para textos que teriam uma voz alternativa. Isto pode ser uma referência a um humor diferente do restante do texto (uma expressão irônica, por exemplo), ou até mesmo para identificar um termo técnico, cientifico ou idiomático.&lt;/p&gt;

&lt;p&gt;É possível combinar o &lt;i&gt; com atributos lang para indicar expressões em outras línguas. Eu amo &lt;i lang=&amp;#8221;it&amp;#8221;&gt;gelato&lt;/i&gt;.&lt;/p&gt;

&lt;h3 id=&#34;outros-tons&#34;&gt;Outros tons&lt;/h3&gt;

&lt;p&gt;Ainda no campo de ênfase existe ainda a tag &lt;mark&gt;. Ela é utilizada para destacar uma informação. Seria o equivalente a você pegar uma caneta marca texto amarelo berrante e grifar um dado importante. E este é exatamente o visual padrão desta tag.&lt;/p&gt;

&lt;p&gt;Já se o objetivo é marcar um fato desatualizado ou não mais relevante você pode utilizar a tag &lt;s&gt;. Mudanças de preço do tipo de R$100 por R$20 são um bom exemplo de uso.&lt;/p&gt;

&lt;h2 id=&#34;uma-citação-para-cada-situação&#34;&gt;Uma citação para cada situação&lt;/h2&gt;

&lt;p&gt;As tags &lt;blockquote&gt; e &lt;q&gt; também causam uma certa confusão. O elemento &lt;blockquote&gt; é para blocos de citação de uma outra fonte. Já o &lt;q&gt; é para citações curtas inseridas no meio de um texto, sem quebras de parágrafo.&lt;/p&gt;

&lt;p&gt;Por que não simplesmente utilizar aspas? Bem, aspas não significam citações em todos os contextos. Você pode utilizar como um recurso para diferenciar uma expressão idiomática, demonstrar um bloco de texto dito por um personagem em uma narração ou simplesmente &amp;#8220;por que você quis&amp;#8221;. Talvez um leitor atento saiba diferenciar cada uso, mas um computador não sabe. Então para não haver dúvidas que se trata de uma citação utilize &lt;blockquote&gt; ou &lt;q&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;cite&gt;  soa como citação mas não é não. A função dele é indicar um título de um trabalho como um livro, um filme ou um artigo como este que você está lendo. Você pode combinar estas tags. Por exemplo, utilizar um cite para referenciar a obra que você utilizou no blockquote ou ainda usar o cite como um atributo para especificar um link para o trabalho original. Este link não ficará visível para os usuários, mas pode servir para controle interno e para avisar mecanismos de busca a origem da informação.&lt;/p&gt;

&lt;h2 id=&#34;nem-tudo-é-o-que-parece&#34;&gt;Nem tudo é o que parece&lt;/h2&gt;

&lt;h3 id=&#34;small&#34;&gt;&lt;small&gt;&lt;/h3&gt;

&lt;p&gt;Ao contrário do que o nome indica &lt;small&gt; não é para textos pequenos. A função do small é marcar comentários curtos de natureza distinta do assunto principal como disclaimers, licença de uso, atribuição de crédito&amp;#8230; Anúncios do tipo &amp;#8220;O ministério da saúde adverte&amp;#8221; e aquelas letras pequeninas no final de um contrato são &lt;small&gt;.&lt;/p&gt;

&lt;h3 id=&#34;nbsp&#34;&gt;&amp;nbsp;&lt;/h3&gt;

&lt;p&gt;Muita gente utiliza este atributo simplesmente para indicar divs vazias. Mas a função do &amp;nbsp; vai além disto. O conceito aqui é criar um espaço em branco que não irá quebrar em uma nova linha. Isto é útil para palavras que não devem aparecer separadas como indicações de tempo, unidades de medidas ou nomes próprios.&lt;/p&gt;

&lt;h2 id=&#34;um-desafio-diário&#34;&gt;Um desafio diário&lt;/h2&gt;

&lt;p&gt;A princípio parece tudo bem simples: p é de parágrafo, h é para título e divs separam tudo. Mas as coisas nunca são o que parecem. Cada elemento tem seu uso e peculiaridade. . Eu sei que você pode estar pensando &amp;#8220;eu faço isto a anos, eu já sei HTML&amp;#8221;. Mas você já leu com calma a documentação de cada elemento? Eu vou ser a primeira a admitir que não li tudo não. É gigante! Existe muito a aprender. Vire mexe eu descubro um elemento &amp;#8220;novo&amp;#8221;. Meu conselho aqui é: dedique um tempinho do seu dia para estudar HTML. Podem ser 5 minutinhos. Quando estiver em uma fila entediante. São mais de 100 tags. Você poderia passar meses fazendo isto e não zerar tudo. Garanto que você vai descobrir muita coisa nova.&lt;/p&gt;

&lt;h2 id=&#34;da-necessidade-de-padrões&#34;&gt;Da necessidade de padrões&lt;/h2&gt;

&lt;p&gt;Antes de me meter a estudar design cursei Letras por alguns anos. Acabei desistindo do curso por uma questão de afinidade, mas linguística sempre foi um assunto fascinante para mim. E no final desenvolvimento web tem muito mais paralelos com esta área do conhecimento humano do que parecia a princípio. A principal lição que podemos pegar emprestado é que a língua é um organismo vivo e não pode ser controlado. Na prática isto significa que se todo mundo passar a utilizar uma tag x para uma determinada função, não importa muito o significado original &amp;#8220;dicionarizado&amp;#8221;.  Os padrões terão que ser modificados para contemplar este uso.&lt;/p&gt;

&lt;p&gt;Da mesma maneira que o significado de uma palavra ou símbolo pode se modificar ao longo do tempo o mesmo pode ocorrer com linguagens de marcação de texto. Nem eu, nem a W3C, nem o Google, nem ninguém tem o poder de impor significado a nada. No final toda a linguagem, e o HTML não está excluído disto, é essencialmente arbitrária. Mas, porém, todavia, se não existir um esforço para a criação de algum padrão cada um vai falar uma variação divergente e ninguém vai se comunicar. Da mesma forma que as vezes é preciso aprender novas regras de gramática, teremos que criar e aprender novos padrões para se adequar as nossas necessidades como desenvolvedores. Ou evoluir e modificar os antigos. Com a diferença que quem escolhe as regras do jogo não são um punhado de intelectuais elitistas em roupas engraçadas. Somos eu, você, e qualquer um que tiver novas e boas idéias para contribuir para a comunidade de desenvolvimento.&lt;/p&gt;

&lt;p&gt;Pode parecer um esforço inútil colocar ordem no amontoado gigantesco de dados que é a web. Mas é só através deste tipo de iniciativa que teremos comunicação efetiva e transmissão de informação acessível. E estaremos nós, homens e máquinas, enfim falando a mesma língua.&lt;/p&gt;

&lt;h3 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3.org/html/wg/drafts/html/CR/&#34; title=&#34;HTML5&#34;&gt;HTML5 &amp;#8211; W3c &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://joshduck.com/periodic-table.html&#34; title=&#34;Periodic Table of the Elements&#34;&gt;Periodic Table of the Elements&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tenha o DOM</title>
      <link>http://tableless.com.br/tenha-o-dom/</link>
      <pubDate>Mon, 25 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/tenha-o-dom/</guid>
      <description>

&lt;p&gt;Muito ja foi falado sobre DOM e posso estar sendo repetitivo aqui, mas é importante falar deste assunto que em dias de manipulação pesada de seletores, percebo que pouca atenção é dada. Temos muita literatura boa sobre o assunto mas muitas vezes o foco acaba sendo o novo plugin que saiu e faz mais-do-mesmo-no-front-end-só-que-mais-fácil (E se você tiver sorte ele é free).&lt;/p&gt;

&lt;p&gt;Entender realmente como um navegador funciona é importante, e garante seu entendimento do &lt;strong&gt;real&lt;/strong&gt; dos problemas que está enfrentando no código que está implementando. Tem mais! Criar um código que manipula o layout (leia-se DOM) fica mais fácil, é uma relação &lt;em&gt;win-win&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Criado pelo W3C, &lt;strong&gt;O DOM é uma multi-plataforma que representa como as marcações em HTML, XHTML e XML são organizadas e lidas pelo navegador que você usa&lt;/strong&gt;. Uma vez indexadas, estas marcações se transformam em elementos de uma árvore que você pode manipular via API &amp;#8211; que é o que fazemos quando usamos programas ou scripts para alterar funcionalidades de uma página: conteudo, estrutura ou folha de estilo.&lt;/p&gt;

&lt;h2 id=&#34;um-pouco-de-história&#34;&gt;Um pouco de história&lt;/h2&gt;

&lt;p&gt;Não tem graça falar sobre o assunto sem mostrar como ele surgiu. Isso só reforça ainda mais a importância de conhecermos bem o assunto pois mostra sua relevância (e porque falar de _browser wars_ é bem legal, apesar de evidenciar os cabelos brancos).&lt;/p&gt;

&lt;p&gt;Netscape e Microsoft guerreavam com Netscape 2 e IE3.0 lá em 1996 e enquanto a Netscape lançava o &lt;strong&gt;Javascript&lt;/strong&gt; a Microsoft lançava o &lt;strong&gt;JScript&lt;/strong&gt;. A diferença entre um e outro não é nada mais além do nome &amp;#8211; acredite! Por razões comerciais devido as “&lt;span&gt;sangrentas” &lt;em&gt;browser wars&lt;/em&gt; as empresas decidiram adotar nomes diferentes para a mesma coisa &amp;#8211; que na verdade era (e continua sendo) o &lt;strong&gt;ECMAScript&lt;/strong&gt;, a linguagem que comecou a ser criada em 1994 quando o W3C colocou na mesma mesa as duas empresas e várias outras para desenvolver um padrão para linguagens de script para os navegadores. &lt;strong&gt;Javascript, JScript e ActionScript não são nada mais que &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;dialetos&lt;/em&gt; de ECMAScript.&lt;/strong&gt;&lt;/p&gt;&lt;/p&gt;

&lt;h2&gt;
  O DOM em sua forma e como é reconhecido pelos navegadores
&lt;/h2&gt;

&lt;p&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/07/dom_tree.gif&#34; alt=&#34;dom_tree&#34; width=&#34;700&#34; height=&#34;365&#34; class=&#34;alignnone size-full wp-image-43633&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;
  A figura acima mostra a estrutura de uma árvore DOM, a linearização  das marcações de modo que ela possa ser montada inicialmente por um navegador. Esta estrutura não será o que veremos no navegador &amp;#8211; o layout em si. O DOM é a base para uma outra árvore que é o que realmente um browser monta na tela, a &lt;strong&gt;Árvore de Renderização &lt;/strong&gt;&amp;#8211; &lt;em&gt;aka &lt;/em&gt;&lt;em&gt;Render Tree&lt;/em&gt;.
&lt;/p&gt;

&lt;p&gt;
  A base para todos os nós da árvore DOM é o base class chamado &lt;strong&gt;Node.h&lt;/strong&gt;. Ele possui várias categorias, e as relevantes para renderizarmos código no navegador são os nós de &lt;strong&gt;documentos, elementos &lt;/strong&gt;e&lt;strong&gt; texto&lt;/strong&gt;.
&lt;/p&gt;

&lt;ol start=&#34;1&#34;&gt;
  &lt;li&gt;
    &lt;strong&gt;Documentos &lt;/strong&gt;é o nó mais importante do DOM, com três classes diferentes: &lt;strong&gt;Document&lt;/strong&gt;, que é usado por todos os documentos XML e outros que não sejam SVG (que também é um XML, porém com marcação já padronizada), &lt;strong&gt;HTMLDocument &lt;/strong&gt;que como o nome diz, cuida de documentos HTML e SVGDocument, responsável pelos documentos SVG e tambem por outros documentos herdados da classe Document (Como o &lt;strong&gt;Document.h &lt;/strong&gt;e o &lt;strong&gt;HTMLDocument.h&lt;/strong&gt;).
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Elementos&lt;/strong&gt; são todas as tags que estão em arquivos HTML ou XML se transformam em elementos da árvore DOM. Considerando a renderização do navegador, um elemento é um nó com uma tag que pode ser usada para fazer subclasses específicas que podem ser processadas de acordo com as necessidades da &lt;em&gt;&lt;span class=&#34;c4 c9&#34;&gt;Render Tree &lt;/em&gt;(&lt;strong&gt;Element.h&lt;/strong&gt;).&lt;/li&gt; 
    
    &lt;li&gt;
      &lt;strong&gt;Texto&lt;/strong&gt;: É o texto que vai entre os elementos. Todo o conteúdo das tags (&lt;p&gt;Isto é um text node&lt;/p&gt;). O nó de Texto guarda basicamente texto puro, que pode ser renderizado ou trabalhado via script.
    &lt;/li&gt;&lt;/ol&gt; 
    

&lt;pre&gt;&lt;code&gt;&amp;lt;h2&amp;gt;
  A Render Tree
&amp;lt;/h2&amp;gt;

&amp;lt;div id=&amp;quot;attachment_3942&amp;quot; style=&amp;quot;width: 413px&amp;quot; class=&amp;quot;wp-caption alignnone&amp;quot;&amp;gt;
  &amp;lt;a href=&amp;quot;http://tableless.com.br/wp-content/uploads/2011/07/render.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;size-full wp-image-3942  &amp;quot; src=&amp;quot;http://tableless.com.br/wp-content/uploads/2011/07/render.png&amp;quot; alt=&amp;quot;Como a render tree e montada&amp;quot; width=&amp;quot;403&amp;quot; height=&amp;quot;187&amp;quot; srcset=&amp;quot;uploads/2011/07/render.png 630w, uploads/2011/07/render-300x139.png 300w&amp;quot; sizes=&amp;quot;(max-width: 403px) 100vw, 403px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;

  &amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
    Como a render tree é montada
  &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;p&amp;gt;
  A &amp;lt;em&amp;gt;Render Tree&amp;lt;/em&amp;gt; é a parte mais importante do processo de renderização. Bem parecida com a árvore DOM, cada objeto corresponde a nós de &amp;lt;strong&amp;gt;Documentos, Elementos ou&amp;lt;/strong&amp;gt;&amp;lt;strong&amp;gt; Texto&amp;lt;/strong&amp;gt;. A diferença é que q &amp;lt;em&amp;gt;Render Tree&amp;lt;/em&amp;gt; possui tambem objetos que não possuem nós na árvore DOM, como &amp;lt;strong&amp;gt;scripts e folhas de estilos&amp;lt;/strong&amp;gt;.
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  O processo de criação da&amp;lt;strong&amp;gt; Render Tree&amp;lt;/strong&amp;gt; passa pelos seguintes passos:
&amp;lt;/p&amp;gt;

&amp;lt;ol start=&amp;quot;1&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;
    &amp;lt;strong&amp;gt;Attachment&amp;lt;/strong&amp;gt;: Após finalizar o parse do DOM e a criação de seus nós, os navegadores chamam um método chamado &amp;lt;strong&amp;gt;attach &amp;lt;/strong&amp;gt;para começar a renderização. O attach adiciona primeiramente as folhas de estilo a árvore DOM e começa a estilização da página. Um bom exemplo é o uso das propriedades CSS display x visibility: Caso um elemento da árvore DOM tenha uma propriedade display:none, este elemento (e seus nós filhos) não será criado na&amp;lt;em&amp;gt; Render Tree&amp;lt;/em&amp;gt;. Ao contrário do uso de visibility:hidden, que vai renderizar o elemento na &amp;lt;span&amp;gt;árvore, porém  ele irá remover (ou adicionar quando visibility:visible) via&amp;lt;strong&amp;gt; Repaint &amp;lt;/strong&amp;gt;as cores (ou propriedades) que formam este elemento. Vale lembrar também que este processo de attach é &amp;lt;em&amp;gt;top down&amp;lt;/em&amp;gt;, criando sempre inicialmente os nós parent e depois seus descendentes (nós filhos). (&amp;lt;a href=&amp;quot;http://tableless.com.br/entendendo-os-reflows-2&amp;quot; title=&amp;quot;Entendendo os Reflows&amp;quot;&amp;gt;Para saber mais sobre Repaint e Reflows, veja este outro artigo&amp;lt;/a&amp;gt;)&amp;lt;/li&amp;gt; 

    &amp;lt;li&amp;gt;
      &amp;lt;strong&amp;gt;RenderStyle.h&amp;lt;/strong&amp;gt;: Durante o processo de attach um método é criado, o &amp;lt;strong&amp;gt;RenderStyle.h&amp;lt;/strong&amp;gt; que vai guardar objetos de referência com cada uma das propriedades CSS do documento. O nó criado no DOM é verificado no documento de CSS e caso existam propriedades que incidam naquele elemento, ela é aplicada. Esta propriedade fica salva dentro da &amp;lt;em&amp;gt;Render Tree &amp;lt;/em&amp;gt;até que ela seja destruída ou que este valor seja alterado por algum script.
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;strong&amp;gt;CSS Box Model: &amp;lt;/strong&amp;gt;Após o método &amp;lt;strong&amp;gt;RenderStyle&amp;lt;/strong&amp;gt; ser criado, ele é acessado via &amp;lt;strong&amp;gt;RenderObject&amp;lt;/strong&amp;gt;. O Box model é usado para posicionar um elemento dentro da página, oferecendo suporte para o conteúdo, padding, bordas e margens que envolvem este elemento
    &amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt; 

    &amp;lt;p&amp;gt;
      &amp;lt;img class=&amp;quot;alignnone&amp;quot; src=&amp;quot;http://www.w3.org/TR/CSS21/images/boxdim.png&amp;quot; alt=&amp;quot;Uma representação visual do CSS box model&amp;quot; width=&amp;quot;455&amp;quot; height=&amp;quot;340&amp;quot; /&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;h2&amp;gt;
      Destruindo (ou atualizando) a Render Tree
    &amp;lt;/h2&amp;gt;

    &amp;lt;p&amp;gt;
      A &amp;lt;em&amp;gt;Render Tree&amp;lt;/em&amp;gt; é destruída quando nós da árvore DOM são removidos, causando a necessidade de um novo parse no DOM, ou quando uma tab do navegador com a árvore DOM usada é fechada. Após o refresh da árvore DOM, todo o processo acima é refeito, com attach chamando o RenderStyle, que montado chama o método &amp;lt;strong&amp;gt;style()&amp;lt;/strong&amp;gt; do RenderObject que acessa o CSS BOX model.
    &amp;lt;/p&amp;gt;

    &amp;lt;h2&amp;gt;
      Como os navegadores interpretam todos estes elementos criados por DOM e Render Tree antes de aplicar o estilo?
    &amp;lt;/h2&amp;gt;

    &amp;lt;p&amp;gt;
      Todo navegador tem uma lista de elementos HTML suportados. Quando o seu markup possui tags presentes na lista, a árvore DOM é montada e o processo de attachment começa logo na sequência e os estilos são aplicados, dando continuidade a criação da &amp;lt;span&amp;gt;&amp;lt;em&amp;gt;Render tree&amp;lt;/em&amp;gt;.&amp;lt;/p&amp;gt; 

      &amp;lt;p&amp;gt;
        O grande problema é que cada navegador tem a sua própria lista, que trata situações similares de maneiras diferentes. Obviamente já sabemos que o navegador que mais apresenta problemas para as situações acima é o Internet Explorer, mas acredite, &amp;lt;strong&amp;gt;todos &amp;lt;/strong&amp;gt;os navegadores apresentam problemas quando um elemento não está em sua lista de elementos permitidos, e precisa de um trabalho para fazer tudo acontecer na &amp;lt;span&amp;gt;Render Tree como deve ser feito.&amp;lt;/p&amp;gt; 

        &amp;lt;p&amp;gt;
          Elementos fora desta lista são tratados como Elementos desconhecidos. E eles são uma grande fonte de problemas:
        &amp;lt;/p&amp;gt;

        &amp;lt;ol start=&amp;quot;1&amp;quot;&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;strong&amp;gt;Como estilizar este elemento?&amp;lt;/strong&amp;gt;Por exemplo, a tag &amp;lt;p&amp;gt; tem por padrão espacamento no topo e bottom, &amp;lt;blockquote&amp;gt; possui uma indentação automática adicionando uma margem à esquerda ou &amp;lt;h1&amp;gt; tem uma fonte maior que o &amp;lt;p&amp;gt; por ser um cabeçalho. Tudo isso esta padronizado, mas como cuidar de algo que não existe?
          &amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;strong&amp;gt;Como este elemento deve aparecer na árvore DOM?&amp;lt;/strong&amp;gt;Os navegadores também possuem uma lista que mostra quais elementos podem ser filhos de outros elementos. Por exemplo, se você adiciona por engano no seu markup &amp;lt;p&amp;gt;&amp;lt;p&amp;gt; o segundo paragrafo implicitamente fechará o primeiro &amp;lt;p&amp;gt;, fazendo que os dois elementos sejam irmãos (no mesmo nível na árvore DOM) e nao como nós filhos como de maneira linear pode parecer. Porém se vc adiciona um &amp;lt;p&amp;gt;&amp;lt;span&amp;gt;, este paragrafo inicial não será fechado, porque o navegador permite que &amp;lt;span&amp;gt; seja filho de elementos de paragrafo, fazendo assim o &amp;lt;span&amp;gt; ser nó filho de &amp;lt;p&amp;gt;
          &amp;lt;/li&amp;gt;
        &amp;lt;/ol&amp;gt;

        &amp;lt;p&amp;gt;
          Para elementos desconhecidos, a ideia é não estilizar. Caso queira algum estilo em elementos desconhecidos, você deve colocá-lo no nó acima (se necessário um &amp;lt;em&amp;gt;wrapper&amp;lt;/em&amp;gt;), para fazer com que ele herde o estilo.
        &amp;lt;/p&amp;gt;

        &amp;lt;p&amp;gt;
          Perceba a sutileza de como isso funciona. Os dois diagramas mostram uma árvore DOM, montada por um navegador suporte HTML5 nativo e o Internet Explorer 8 (navegadores que não suportam HTML5 tem funcionamento semelhante):
        &amp;lt;/p&amp;gt;

        &amp;lt;div id=&amp;quot;attachment_3988&amp;quot; style=&amp;quot;width: 570px&amp;quot; class=&amp;quot;wp-caption alignnone&amp;quot;&amp;gt;
          &amp;lt;a href=&amp;quot;http://tableless.com.br/wp-content/uploads/2011/07/renderizaao_HTML5-5.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;size-full wp-image-3988 &amp;quot; src=&amp;quot;http://tableless.com.br/wp-content/uploads/2011/07/renderizaao_HTML5-5.png&amp;quot; alt=&amp;quot;Arvore DOM com suporte HTML5&amp;quot; width=&amp;quot;560&amp;quot; height=&amp;quot;472&amp;quot; srcset=&amp;quot;uploads/2011/07/renderizaao_HTML5-5.png 800w, uploads/2011/07/renderizaao_HTML5-5-300x252.png 300w&amp;quot; sizes=&amp;quot;(max-width: 560px) 100vw, 560px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;

          &amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
            Arvore DOM com suporte HTML5
          &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div id=&amp;quot;attachment_3987&amp;quot; style=&amp;quot;width: 576px&amp;quot; class=&amp;quot;wp-caption alignnone&amp;quot;&amp;gt;
          &amp;lt;a href=&amp;quot;http://tableless.com.br/wp-content/uploads/2011/07/renderizacaoIE-5.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;size-full wp-image-3987  &amp;quot; src=&amp;quot;http://tableless.com.br/wp-content/uploads/2011/07/renderizacaoIE-5.png&amp;quot; alt=&amp;quot;Arvore DOM IE e outros navegadores sem suporte HTML5&amp;quot; width=&amp;quot;566&amp;quot; height=&amp;quot;458&amp;quot; srcset=&amp;quot;uploads/2011/07/renderizacaoIE-5.png 1178w, uploads/2011/07/renderizacaoIE-5-300x243.png 300w, uploads/2011/07/renderizacaoIE-5-1024x830.png 1024w&amp;quot; sizes=&amp;quot;(max-width: 566px) 100vw, 566px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;

          &amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
            Arvore DOM IE e outros navegadores sem suporte HTML5
          &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;p&amp;gt;
          É por essas e outras que a gente usa o modernizr, o HTML5shiv ou um simples document.create(“SECTION”) / document.create(“ARTICLE”). E é isso que acontece quando navegadores interpretam elementos desconhecidos. Eles desconsideram o nó real aonde o elemento está, e o reconhece como filho de &amp;lt;BODY&amp;gt;. E por favor, sem trocadilhos com o &amp;lt;span&amp;gt;filho dos outros.&amp;lt;/p&amp;gt; 

          &amp;lt;p&amp;gt;
            Ver como uma árvore DOM é montada  e como a &amp;lt;em&amp;gt;Render tree &amp;lt;/em&amp;gt;é feita nos dá idéia do quão importante é ter um documento semântico. &amp;lt;strong&amp;gt;Realmente semântico&amp;lt;/strong&amp;gt;. Uma vez entendidos os conceitos, a manipulação e a programação dos elementos fica mais fácil.
          &amp;lt;/p&amp;gt;

          &amp;lt;p&amp;gt;
            E você começa a entender como os navegadores funcionam.
          &amp;lt;/p&amp;gt;

          &amp;lt;h2&amp;gt;
            Referências
          &amp;lt;/h2&amp;gt;

          &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;a href=&amp;quot;http://tableless.com.br/entendendo-os-reflows-2&amp;quot;&amp;gt;Entendendo os Reflows&amp;lt;/a&amp;gt; por Alysson Franklin
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;a href=&amp;quot;http://www.modernizr.com/&amp;quot;&amp;gt;Modernizr&amp;lt;/a&amp;gt; para suporte HTML5
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;a href=&amp;quot;http://code.google.com/p/html5shiv/&amp;quot;&amp;gt;HTML5shiv&amp;lt;/a&amp;gt; para suporte HTML5
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Browser_wars&amp;quot;&amp;gt;Browser Wars&amp;lt;/a&amp;gt; pela Wikipedia
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/ECMAScript&amp;quot;&amp;gt;ECMAScript&amp;lt;/a&amp;gt; pela Wikipedia
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/JavaScript&amp;quot;&amp;gt;Javascript&amp;lt;/a&amp;gt; pela Wikipedia
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/JScript&amp;quot;&amp;gt;JScript&amp;lt;/a&amp;gt; pela Wikipedia
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              &amp;lt;a href=&amp;quot;http://www.w3.org/TR/CSS21/box.html#box-dimensions&amp;quot;&amp;gt;CSS Box model&amp;lt;/a&amp;gt; pelo W3C
            &amp;lt;/li&amp;gt;
            &amp;lt;ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Otimizando seu site em WordPress para SEO</title>
      <link>http://tableless.com.br/otimizando-site-wordpress-seo/</link>
      <pubDate>Thu, 17 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/otimizando-site-wordpress-seo/</guid>
      <description>

&lt;p&gt;Uma característica que defina o WordPress é a &lt;strong&gt;customização&lt;/strong&gt;. Em poucas linhas conseguimos soluções significantes. Seja trabalhando com suas funções ou com seus plugins, temos resultados objetivos para preparar um Blog e até mesmo um site de grande porte, como temos hoje, vários exemplos disso.&lt;/p&gt;

&lt;p&gt;Elogiam muito o WordPress por ele ter uma facilidade para &lt;a href=&#34;http://www.oitobitdigital.com.br/servico/otimizacao-de-sites-seo/&#34;&gt;otimização de sites&lt;/a&gt; (SEO). Antes de começarem a ler as dicas que vou citar, faça a seguinte reflexão: O que é um site hoje, sem ser bem indexado pelos mecanismos de busca?&lt;/p&gt;

&lt;h3 id=&#34;melhore-a-tag-title-do-seu-site&#34;&gt;Melhore a tag title do seu site&lt;/h3&gt;

&lt;p&gt;Você acha mesmo que a tag de título do seu site não tem importância? Espero que não, pois é com ela que os mecanismos de busca reconhecem uma das primeiras informações do seu site.&lt;/p&gt;

&lt;p&gt;Coloque o seu título da seguinte forma:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&lt;title&gt;
  &amp;lt;?php wp_title(“|”, true, ‘right’); ?&amp;gt;&amp;lt;?php bloginfo(‘name’); ?&amp;gt;
&lt;/title&gt;[/cce]&lt;/p&gt;

&lt;p&gt;A função &lt;strong&gt;wp_title&lt;/strong&gt; imprime vários resultados a depender da sua página.&lt;/p&gt;

&lt;h3 id=&#34;links-permanentes-permalinks&#34;&gt;Links permanentes (Permalinks)&lt;/h3&gt;

&lt;p&gt;Quem usa WordPress e não usa essa função básica, não sabe o que está perdendo. A URL também tem uma função importante para indexação de sites, pois também é reconhecido antes da página ser carregada. O seu site sairia na frente de diversas URL’s que usam aqueles parâmetros grandes e sem semântica.&lt;/p&gt;

&lt;p&gt;Dentro de seu painel de administração, procure por Settings (Configurações) e depois Links Permanentes (Permalinks). Selecione a opção Custom Structure (Estrutura Personalizada) e altere sua estrutura para:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;html&amp;#8221;]/%category%/%postname%/[/cce]&lt;/p&gt;

&lt;h3 id=&#34;otimizando-as-metas-do-seu-site&#34;&gt;Otimizando as metas do seu site&lt;/h3&gt;

&lt;p&gt;Para otimizar as metas, utilize o plug-in &lt;a href=&#34;http://wordpress.org/extend/plugins/all-in-one-seo-pack/&#34; title=&#34;Plug-in All in One SEO Pack&#34;&gt;All in One SEO Pack&lt;/a&gt;, com esse plug-in conseguimos facilmente manipular as metas e também títulos do site. Com ele, alteram-se as metas de descrição e keywords (palavras-chave) da página inicial e também dos posts, além dos títulos de cada página.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org/extend/plugins/all-in-one-seo-pack/&#34; title=&#34;Plug-in All in One SEO Pack&#34;&gt;Baixe o plug-in&lt;/a&gt;, instale-o e ative.&lt;/p&gt;

&lt;h3 id=&#34;mecanismos-de-busca-odeiam-spam&#34;&gt;Mecanismos de busca odeiam SPAM&lt;/h3&gt;

&lt;p&gt;Os mecanismos de busca odeiam SPAM, ou seja, odeiam conteúdo ruim e/ou desnecessário. Existe um plug-in que modera spam no seu site, chama-se Akismet. Geralmente ele já é incluído quando você instala o WordPress, mas caso não encontre depois que instalar, &lt;a href=&#34;http://wordpress.org/extend/plugins/akismet/&#34; title=&#34;Akismet plug-in&#34;&gt;baixe-o&lt;/a&gt; e ative-o.&lt;/p&gt;

&lt;p&gt;Para usar do plug-in é necessário resgatar um código gerado pelo &lt;a href=&#34;http://akismet.com/&#34; title=&#34;Site Akismet&#34;&gt;site&lt;/a&gt; deles.&lt;/p&gt;

&lt;h3 id=&#34;use-semântica-no-seu-código&#34;&gt;Use semântica no seu código&lt;/h3&gt;

&lt;p&gt;Do que adianta ter todos esses aperfeiçoamentos no seu site e seu site não estiver com um código semântico? Por isso trabalhe com um código de qualidade para que não haja dificuldade para seu código ser lido pelos mecanismos de busca.&lt;/p&gt;

&lt;p&gt;Use alt e title para as imagens, não esqueçam, pois as imagens só podem ser lidas desta maneira. Trabalhe bem com as tags de título &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;, e estabeleça uma hierarquia entre elas.&lt;/p&gt;

&lt;h3 id=&#34;utilize-sempre-um-plug-in-de-cache&#34;&gt;Utilize sempre um plug-in de cache&lt;/h3&gt;

&lt;p&gt;A partir da demanda do seu site e ele for crescendo em questão de conteúdo, é sempre bom ter um plug-in de cache para diminuir o carregamento da sua página, sendo assim os mecanismos de busca não terão dificuldades para carregar seu site.&lt;/p&gt;

&lt;p&gt;Indico &lt;a href=&#34;http://wordpress.org/extend/plugins/wp-super-cache/&#34; title=&#34;WP Super Cache&#34;&gt;WP Super Cache&lt;/a&gt;, &lt;a href=&#34;http://wordpress.org/extend/plugins/wp-super-cache/&#34; title=&#34;W3 Total Cache&#34;&gt;W3 Total Cache&lt;/a&gt;, &lt;a href=&#34;http://wordpress.org/extend/plugins/batcache/&#34; title=&#34;Batcache&#34;&gt;Batcache&lt;/a&gt; ou &lt;a href=&#34;http://wordpress.org/extend/plugins/hyper-cache/&#34; title=&#34;Hyper Cache&#34;&gt;Hyper Cache.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tenho certeza que com um deles, seu site estará em boas mãos em relação ao cache.&lt;/p&gt;

&lt;h3 id=&#34;sitemaps-mapa-do-site&#34;&gt;Sitemaps (mapa do site)&lt;/h3&gt;

&lt;p&gt;Para os mecanismos de busca, um sitemap ajuda nas buscas de páginas, pois ele relaciona as URL existentes no seu site. Leia esse &lt;a href=&#34;http://tableless.com.br/seo-sitemaps&#34; title=&#34;Artigo SEO Sitemaps Tableless&#34;&gt;artigo&lt;/a&gt; e veja o porquê do uso de sitemaps.&lt;/p&gt;

&lt;p&gt;O WordPress tem um plug-in que gera um sitemap já otimizado para mecanismos de busca.&lt;/p&gt;

&lt;p&gt;Use o &lt;a href=&#34;http://wordpress.org/extend/plugins/google-sitemap-generator/&#34; title=&#34;Plug-in Google SiteMap Generator&#34;&gt;Google SiteMap Generator&lt;/a&gt; e não tenha possíveis problemas para este assunto.&lt;/p&gt;

&lt;h3 id=&#34;crie-um-bom-meta-robôs&#34;&gt;Crie um bom Meta Robôs&lt;/h3&gt;

&lt;p&gt;É importante você ter um robots.txt na raiz do seu site, que é um arquivo funciona como filtro para os Crawlers e os robôs dos mecanismos de busca, permitindo ou não acesso a páginas do seu site.&lt;/p&gt;

&lt;p&gt;Crie um arquivo em txt, chamado robots.txt com o seguinte código:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;p&gt;User-agent: *&lt;/p&gt;

&lt;p&gt;Disallow: /cgi-bin&lt;/p&gt;

&lt;p&gt;Disallow: /wp-admin&lt;/p&gt;

&lt;p&gt;Disallow: /wp-includes&lt;/p&gt;

&lt;p&gt;Disallow: /wp-content/plugins&lt;/p&gt;

&lt;p&gt;Disallow: /wp-content/cache&lt;/p&gt;

&lt;p&gt;Disallow: /wp-content/themes&lt;/p&gt;

&lt;p&gt;Disallow: /trackback&lt;/p&gt;

&lt;p&gt;Disallow: /feed&lt;/p&gt;

&lt;p&gt;Disallow: /comments&lt;/p&gt;

&lt;p&gt;Disallow: /category/*/*&lt;/p&gt;

&lt;p&gt;Disallow: */trackback&lt;/p&gt;

&lt;p&gt;Disallow: */feed&lt;/p&gt;

&lt;p&gt;Disallow: */comments&lt;/p&gt;

&lt;p&gt;Disallow: /*?*&lt;/p&gt;

&lt;p&gt;Disallow: /*?&lt;/p&gt;

&lt;p&gt;Allow: /wp-content/uploads&lt;/p&gt;

&lt;p&gt;# Google Image&lt;/p&gt;

&lt;p&gt;User-agent: Googlebot-Image&lt;/p&gt;

&lt;p&gt;Disallow:&lt;/p&gt;

&lt;p&gt;Allow: /*&lt;/p&gt;

&lt;p&gt;# Google AdSense&lt;/p&gt;

&lt;p&gt;User-agent: Mediapartners-Google*&lt;/p&gt;

&lt;p&gt;Disallow:&lt;/p&gt;

&lt;p&gt;Allow: /*&lt;/p&gt;

&lt;p&gt;# digg mirror&lt;/p&gt;

&lt;p&gt;User-agent: duggmirror&lt;/p&gt;

&lt;p&gt;Disallow: /&lt;/p&gt;

&lt;p&gt;Sitemap: &lt;a href=&#34;http://www.seusite.com.br/sitemap.xml&#34;&gt;http://www.seusite.com.br/sitemap.xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;Envie para o servidor e ponha na raiz do seu site.&lt;/p&gt;

&lt;p&gt;E no header.php do seu tema, adicione o código:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&amp;lt;?php&lt;/p&gt;

&lt;p&gt;if(is_single() || is_page() || is_category() || is_home()) {&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;meta name=&amp;#8221;robots&amp;#8221; content=&amp;#8221;all,noodp&amp;#8221; /&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;else if(is_archive()) {&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;meta name=&amp;#8221;robots&amp;#8221; content=&amp;#8221;noarchive,noodp&amp;#8221; /&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;else if(is_search() || is_404()) {&lt;/p&gt;

&lt;p&gt;echo &amp;#8216;&lt;meta name=&amp;#8221;robots&amp;#8221; content=&amp;#8221;noindex,noarchive&amp;#8221; /&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;?&amp;gt;&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h3 id=&#34;faça-um-bom-conteúdo&#34;&gt;Faça um bom conteúdo&lt;/h3&gt;

&lt;p&gt;Não adianta ter um site todo otimizado para os mecanismos e eles não terem o que buscar de conteúdo no seu site. Fazer um bom conteúdo é essencial para qualquer indexação de artigo, página, textos ect.&lt;/p&gt;

&lt;p&gt;Também não se esqueça de trabalhar com as redes sociais, pois maior quantidade de links gerados para o seu site, maior relevância ele terá.&lt;/p&gt;

&lt;p&gt;Seja sempre objetivo e claro na suas publicações, tenho certeza que terá um bom resultado. Vale ressaltar que o Google está punindo quem copia conteúdo, muito cuidado.&lt;/p&gt;

&lt;p&gt;Caso tenha futuras dúvidas, o WordPress oferece no seu codex um &lt;a href=&#34;http://codex.wordpress.org/Search_Engine_Optimization_for_WordPress&#34; title=&#34;Guia para otimização de SEO WordPress&#34;&gt;guia para otimização de SEO&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Um raio-x do seu website</title>
      <link>http://tableless.com.br/um-raio-x-do-seu-website/</link>
      <pubDate>Thu, 03 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/um-raio-x-do-seu-website/</guid>
      <description>

&lt;p&gt;A criacão de aplicações web evolui ao longo dos anos. A interação front-end/aplicação também segue esta evolução e é previsivel que a complexidade e a integração de funcionalidades com a interface web deva evoluir tambem. Só que para devs front-end, essa complexidade não está em novas linguagens ou tecnologias, e sim em como embarcar todas elas em um HTML semântico, limpo e de acordo com os requisitos. Tudo isso no menor tempo possível. Tempos ágeis, esses. As necessidades do cliente sempre não são compatíveis com nossos relógios e cada segundo vale nesse cenário.&lt;/p&gt;

&lt;p&gt;Não é dificil abracarmos ferramentas que podem otimizar o nosso tempo. Fazer um mockup ou mesmo os primeiros protótipos sem usar Zen Coding podem ser tarefas demoradas. O Diego &lt;a href=&#34;http://tableless.com.br/produtividade-editores-e-snippets&#34;&gt;já mencionou isso&lt;/a&gt; aqui no Tableless há quase um ano e não é dificil vermos o pessoal maravilhado quando clicamos no tab e de repente a &amp;#8220;mágica&amp;#8221; acontece, montando um HTML inteiro. Não usar boilerplates ou grids pode ser fator determinante na demora no período de homologação. Mas até aí estamos falando apenas das ferramentas, e elas não são nada sem o conhecimento do desenvolvedor, somado a suas metodologias de trabalho. Nesta fase inicial de projeto, enviar uma arte para aprovação do cliente e algumas horas depois de aprovado já apresentar um modelo funcional básico, HTML/CSS com certeza pode garantir que o relacionamento cliente/desenvolvedor possa ser mais &amp;#8220;tranquilo&amp;#8221;, com uma pressão bem diferente se entre aprovação e o primeiro mockup tivermos um intervalo de um dia, por exemplo.&lt;/p&gt;

&lt;p&gt;Só que isso não é tudo, é apenas a ponta do iceberg. Montar um mockup é o início do trabalho para garantir que esse design e as funcionalidades pedidas pelo cliente funcionem da mesma maneira, na maior gama de navegadores e dispositivos possível, e mesmo com suas limitações, oferecer a mesma experiência para os usuários. E isso é doloroso e nos toma muitas noites de sono que a gente teima em descontar xingando um ou outro navegador.&lt;/p&gt;

&lt;p&gt;O Progressive Enhancement pode nos ajudar como mostramos em outros artigos. E hoje vamos mergulhar em um tópico específico da metodologia: iremos aprender como usar a perspectiva Raio-X para desconstruir uma página, separando o conteúdo do markup, usando abordagens top-bottom e bottom-up respectivamente. Dito isso vamos em frente que atras vem gente &amp;#8211; e prazos cada vez mais apertados!&lt;/p&gt;

&lt;p&gt;A Perspectiva Raio-X é baseada no princípio de que mesmo o mais complexo design – mesmo que seja algo dinâmico, como aplicações com AJAX com comportamentos estilo desktop – conteúdo e funcionalidade possam ser expressados com um simples HTML semântico, oferecendo uma experiencia acessivel e com Usabilidade para toda audiência.&lt;/p&gt;

&lt;p&gt;Essa perspectiva nada mais é do que um metodo para planejarmos o design (sim, podemos usá-la para o design também) e desenvolvimento de modo a garantir, antes mesmo de começar, premissas que vão ser MUITO mais fáceis de seguir ao longo do desenvolvimento do projeto, afinal garantir acessibilidade e usabilidade desde o inicio é muito mais facil do que lá na frente, com tudo pronto, abracar o Graceful Degradation e um bom tempo brigando com javascripts que teimam em funcionar em um navegador e outro não. Você ainda terá que fazer isso, é fato. Mas é muito melhor trabalhar em um pequeno pedaço de código lá na frente do que descobrir que alterar um método desencadeará um efeito dominó que vai fazer você perder muito tempo entendendo o comportamento do script atraves da funcionalidades de uma aplicação.&lt;/p&gt;

&lt;p&gt;Como o foco aqui é o desenvolvimento e não o design, partimos da premissa que já temos um design com funcionalidades e uma experiência que o visitante vai ter caso use o &lt;em&gt;navegador do momento&lt;/em&gt;. Com esse design em mãos, antes de começar a codificar, planejamos um processo de desenvolvimento dividido em 3 partes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Definir a hierarquia do conteúdo e sua prioridade, mapeando componentes para encontrarmos elementos básicos no HTML equivalentes a esta componentização.&lt;/li&gt;
&lt;li&gt;Criar um markup de fundação, oferecendo todo o conteúdo essencial e funcionalidade com o mínimo de CSS(garantindo que o usado sejam &amp;#8220;atributos seguros&amp;#8221;) e ZERO de javascript.&lt;/li&gt;
&lt;li&gt;Escrever o markup avançado, com CSS e javascript para cuidar da camada visual e funcional de acordo com as funcionalidades que cada navegador suporta.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vale lembrar que essa experiencia é interativa, e mudanças no markup de fundação podem acontecer a medida que limitações no código são encontradas de acordo com os navegadores ou dispositivos testados. Mas estas mudanças serão pequenas e de fácil implementação, uma vez que todo o desenvolvimento foi planejado para minimizar este tipo de impacto.&lt;/p&gt;

&lt;h3 id=&#34;definindo-hierarquia-de-conteúdo-e-mapeando-componentes-para-o-html&#34;&gt;&lt;strong&gt;Definindo Hierarquia de Conteúdo e mapeando componentes para o HTML&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Algumas perguntas podem ser feitas para ordenar o fluxo de trabalho nesta fase do processo, elas vão ajudar a estabelecer regras e normas de inteface, centralizando estilo e regras de comportamento funcional no processo de desenvolvimento. Analisando o design, vamos aprofundar a analise pelos componentes visuais no trabalho. A partir da sala, comecamos nosso top-down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quais são as partes mais importantes da página?&lt;/li&gt;
&lt;li&gt;O quanto de conhecimento sobre o assunto a audiência precisa para entender a informação da página? Há informação suficiente para este entendimento?&lt;/li&gt;
&lt;li&gt;Existe uma ordem literal ou implícita para ordenar este conteúdo?&lt;/li&gt;
&lt;li&gt;Olhando o site como um todo, existem partes em comum, com funcionalidades ou padrões de comportamento que podem ser reutilizados com templates?&lt;/li&gt;
&lt;li&gt;Existe alguma tarefa que precisa ser feita na página? Se sim, quais são os passos que a audiência deve seguir e quais ferramentas ou plugins ela deve usar até completar estes requisitos? Existem passos adicionais/opcionais/mandatórios?&lt;/li&gt;
&lt;li&gt;Existe conteúdo ou fluxo de pagina/formulários que dependam de opções previamente inputadas pela audiência?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Até aí estamos olhando apenas a sala. O código também precisa de uma abordagem parecida. É hora de olharmos a cozinha da aplicação e fazermos nosso bottom-up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Existe algo que é inserido dinamicamente via AJAX? Se sim, temos que oferecer uma opção acessível, com conteúdo similar inserido na página ou em um HTML em separado;&lt;/li&gt;
&lt;li&gt;Existem partes na interface que dependem de um workflow de escolhas aonde uma escolha determina opções em outra, ou ainda dependa de conexões já feitas em um servidor para validar o fluxo? Se sim, temos que ter certeza que estas experiências estao devidamente segregadas na versão básica da pagina, ajudando usuários a serem mais eficientes na tarefa da cognição, minimizando erros e complicações.&lt;/li&gt;
&lt;li&gt;Existem partes na interface que são complicadores devido a alto grau de consumo de banda ou dificuldade de uso para uma experiência básica que são construidas apenas com markup HTML? Se sim, podemos oferecer componentes simplificados no markup de fundação ou ainda encorajar usuários básicos a viver a experiência através de uma alternativa offline.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Com estas duas análises da sua aplicação, fica fácil fazer o mapeamento dos componentes na página e quais elementos básicos do HTML melhor suportam a causa-fim. Ao mesmo tempo, analisamos como implementar o CSS e o Javascript a este markup. Se é necessário algum trabalho adicional para garantir a acessibilidade, é o momento de analisar a abordagem a ser usada. Com isso temos definido a hierarquia de conteúdo e seus agrupamentos, funcionalidade de todos os elementos de página associados a elementos básicos HTML, garantindo markups e estilos mínimos para uma expêriencia básica que todos os usuários &amp;#8211; independentes de navegador ou dispositivo possam ter. A partir daí trabalhamos estilos e scripts a serem incorporados a experiência básica, tratados como um expansão que o usuário pode viver dependendo do seu navegador.&lt;/p&gt;

&lt;h3 id=&#34;html4-x-html5-ganhando-tempo&#34;&gt;&lt;strong&gt;HTML4 x HTML5 – Ganhando tempo&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;O W3C ainda esta incorporando funcionalidades ao HTML, mas isso não significa que você não pode usar o HTML5 dependendo dos requisitos do projeto. De fato o HTML5 melhora e muito a produtividade, incorporando melhorias na linguagem que salvam tempo na criacao de componentes (como placeholders no input, datepickers avançados, players de áudio e vídeo, para mencionar alguns), porém com o foco em Progressive Enhancements, é necessario manter o foco na usabilidade &amp;#8211; um player de vídeo por exemplo precisa de um plano de fallback para navegadores que não suportam o HTML5, como o IE6 (na ausência do suporte, um player flash pode ser carregado).&lt;/p&gt;

&lt;p&gt;Pesquisas com desenvolvedores indicando o que tem sido codificado e colocado em produção mostram que as implementações estão a todo vapor. Por ordem de popularidade e facilidade na implementação:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Semântica&lt;/li&gt;
&lt;li&gt;Melhorias de formulário&lt;/li&gt;
&lt;li&gt;Áudio / Vídeo&lt;/li&gt;
&lt;li&gt;Canvas&lt;/li&gt;
&lt;li&gt;Outros&lt;/li&gt;
&lt;li&gt;Drag and Drop&lt;/li&gt;
&lt;li&gt;Microdata&lt;/li&gt;
&lt;li&gt;Geolocation&lt;/li&gt;
&lt;li&gt;Offline Storage&lt;/li&gt;
&lt;li&gt;Cross Document Messaging&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O uso depende de estudo. Quanto mais direcionado for o escopo do projeto, mais você poderá tirar vantagem do HTML5. Separando o HTML5 em 3 partes distintas, teriamos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nível 1:&lt;/strong&gt; elementos que ganharam nova semântica, a maior parte deles sem nenhuma mudançaa drástica &amp;#8211; exceção ao elemento deâncora &lt;a&gt;, que agora permite nao apenas links inline (no contexto linear, uma frase por exemplo), mas tambem links em bloco. Fazendo com que em determinadas situações &lt;a&gt; possa ter o mesmo comportamento de um &lt;div&gt; por exemplo. Estas melhorias são amplamente suportadas pelos browsers e não tem porque não utilizarmos as mesmas. Podemos mencionar a sintaxe simplificada, redução nas chamadas de DOCTYPE, charset, &lt;script&gt; e &lt;style&gt; e os atributos type, alem da não necessidade de fechar tags para elementos self-closing (/&amp;gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nível 2:&lt;/strong&gt; Alguns extras que já não são garantidos em todos os navegadores. Algumas intervenções serão necessárias para implementar este nível, mas nada muito complicado que possa oferecer riscos de impacto ao design. Por default, estas funcionalidades são atingidas pelo Graceful Degradation (ex.: uma caixa &lt;input type=&amp;#8221;range&amp;#8221;&gt; em navegadores sem suporte se transformam em caixas comum de texto. Nada que não possa ser resolvido com um pouco de javascript.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nível 3:&lt;/strong&gt; Tudo o que não foi mencionado antes. Infelizmente são solucoes que ainda precisam de intervenções para termos escalabilidade. Alguns deles possuem já soluções consagradas (como os já mencionados Boilerplates e Grids) e garantem escalabilidade em navegadores que não oferecem suporte. Tags para diagramação de conteúdo como &lt;section&gt;, &lt;article&gt;, &lt;nav&gt;, &lt;aside&gt;, &lt;header&gt;, &lt;footer&gt; ; tags para elementos inline &lt;mark&gt;, &lt;time&gt; ; tags para elementos dinamicos como &lt;audio&gt;, &lt;video&gt;, &lt;details&gt;, &lt;canvas&gt; são suportadas via document.createElement ou boilerplate. As APIs tambem chegam para oferecer possibilidades infindáveis mas novamente, cuidado e análise neste nivel são coisas fundamentais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combinar o HTML5 com metodologias como o Progressive Enhancement é um grande diferencial, e, dominando as ferramentas, fica facil entregar mais com menos &amp;#8211; e com maior qualidade. Pronto para tirar uma &lt;em&gt;chapa&lt;/em&gt; de suas páginas e começar a analisar o que pode ser otimizado?&lt;/p&gt;

&lt;h3 id=&#34;referências&#34;&gt;Referências&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/produtividade-editores-e-snippets&#34;&gt;Tableless &amp;#8211; Editores e Snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/zen-coding/&#34;&gt;zen coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://br.html5boilerplate.com/&#34;&gt;html5 boilerplate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sixrevisions.com/web_design/the-960-grid-system-made-easy/&#34;&gt;960 grid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://filamentgroup.com/dwpe/&#34;&gt;Designing w/ Progressive Enhancement&lt;/a&gt; (esse ja é um clássico)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://css-tricks.com/poll-results-html5-features-in-use-on-production-sites/&#34;&gt;HTML5 Features in use on Production Sites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://diveintohtml5.org/forms.html&#34;&gt;A Form of Madness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mathiasbynens.be/notes/html5-levels&#34;&gt;3 levels of HTML usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HTML 5, novos elementos e atributos.</title>
      <link>http://tableless.com.br/html-5-novos-elementos-e-atributos/</link>
      <pubDate>Mon, 28 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/html-5-novos-elementos-e-atributos/</guid>
      <description>

&lt;p&gt;Tags, mídia, interação usuário x website, relevância nos resultados de busca, usabilidade e acessibilidade são as grandes definições do poder de transformação que o HTML 5 promete estabelecer quando desenvolvedores web puderem utilizá-lo e &lt;a href=&#34;http://tableless.com.br/afinal-o-que-muda-com-o-html-5&#34; target=&#34;_blank&#34; rel=&#34;external&#34;&gt;como já mencionado em outro artigo&lt;/a&gt;, especializações na área devem surgir com esta nova versão, ou seja, você terá a possibilidade de escolher em qual das vertentes citadas acima vai deter maior conhecimento. Ainda assim, é fato que a construção de códigos para interfaces continuará sendo tarefa geral do desenvolvedor Front-End e saber quais tags utilizar e de que forma as utilizar continuará sendo conhecimento básico no desenvolvimento de códigos de marcação.&lt;/p&gt;

&lt;p&gt;Determinar como distribuir informação será o grande objetivo no planejamento de construção de seu código html na versão 5. Esta hoje, acaba sendo uma das tarefas de um profissional SEO, mas acredita-se que com uso das novas tags desenvolvedores Front-End terão conhecimento e possibilidades de participar deste planejamento.&lt;/p&gt;

&lt;p&gt;Desta forma, o conselho é: você desenvolvedor não familiarizado com algumas destas técnicas de construção semântica de códigos html priorizando informação, pode fazer algumas leituras complementares a respeito, como por exemplo, &lt;a href=&#34;http://tableless.com.br/introducao-a-microdata-no-html5&#34; target=&#34;_blank&#34;&gt;o uso de Microdata no HTML 5 &amp;#8211; explanado pela Talita Pagani&lt;/a&gt;. Este com certeza, será um diferencial no perfil de um profissional Front-End.&lt;/p&gt;

&lt;h3 id=&#34;novos-elementos&#34;&gt;Novos elementos&lt;/h3&gt;

&lt;p&gt;Além das tags de mídia (&lt;code&gt;audio&lt;/code&gt; e &lt;code&gt;vídeo&lt;/code&gt;), a incansavelmente comentada &lt;code&gt;canvas&lt;/code&gt; e das novas tags de estrutura: &lt;code&gt;section&lt;/code&gt;, &lt;code&gt;article&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;aside&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt; e &lt;code&gt;footer&lt;/code&gt;, teremos também, de acordo com a W3C, ainda outras novas tags que determinarão o tipo de informação que estará sendo exibida na tela. Um exemplo são as tags: &lt;code&gt;embed&lt;/code&gt; que será usada para pluggins e a tag &lt;code&gt;progress&lt;/code&gt; que representará dados em progresso como o download de um arquivo.&lt;/p&gt;

&lt;p&gt;Outro exemplo de novos elementos, será a tag &lt;code&gt;time&lt;/code&gt; utilizada para informações de dia e hora que poderão situar o usuário quanto ao horário e data de navegação ou apenas quanto a periodicidade de um novo post em um blog ou de um novo comentário. Abaixo, 3 exemplos de como aplicar esta tag:&lt;/p&gt;

&lt;p&gt;Para determinar hora:&lt;/p&gt;

&lt;pre lang=&#34;html&#34; class=&#34;1&#34;&gt;&lt;p&gt;
  Postado às &amp;lt;time&gt;09:00hs&amp;lt;/time&gt;
&lt;/p&gt;
&lt;/pre&gt;

&lt;p&gt;Para determinar a data [ através do uso do atributo datetime]:&lt;/p&gt;

&lt;pre lang=&#34;html&#34; class=&#34;1&#34;&gt;&lt;p&gt;
  Postado em &amp;lt;time datetime=”2011-02-13”&gt; 13 de fevereiro de 2011&amp;lt;/time&gt;
&lt;/p&gt;
&lt;/pre&gt;

&lt;p&gt;Ou para determinar data e hora de um local específico:&lt;/p&gt;

&lt;pre lang=&#34;html&#34; class=&#34;1&#34;&gt;&lt;p&gt;
  Postado em &amp;lt;time datetime=”2011-02-13”&gt; 13 de fevereiro de 2011 às 09:00hs&amp;lt;/time&gt;
&lt;/p&gt;
&lt;/pre&gt;

&lt;p&gt;Neste último exemplo, a informação referente ao horário é separada da informação de data através do separador “T” (obrigatório caso ambas as informações sejam declaradas). Logo após é possível adicionar a informação de fuso horário &lt;code&gt;[+03:00]&lt;/code&gt; &amp;#8211; declarada para situar o local onde este horário está sendo determinado &amp;#8211; em nosso exemplo: regiões Nordeste / Sul e Sudeste do Brasil, de acordo com o ponto referencial &amp;#8211; Meridiano de Greenwich.&lt;/p&gt;

&lt;h3 id=&#34;novos-atributos&#34;&gt;Novos atributos&lt;/h3&gt;

&lt;p&gt;Com o HTML 5, novos atributos à elementos que já existentes também foram criados.&lt;/p&gt;

&lt;p&gt;Uma das possibilidades que está entusiasmando desenvolvedores é quanto a criação de formulários sem a necessidade de scripts externos para validação das informação que serão “inputadas” pelos usuários.&lt;/p&gt;

&lt;p&gt;Por exemplo, o elemento &lt;code&gt;input&lt;/code&gt; poderá receber atributos como &lt;code&gt;tel&lt;/code&gt; [para número de telefones], &lt;code&gt;search&lt;/code&gt; [para campos de busca], &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; [para informações referentes a tempo e data], &lt;code&gt;email&lt;/code&gt; [para endereços eletrônicos], entre outros. &lt;a href=&#34;http://tableless.com.br/html5/?chapter=7&#34; target=&#34;_blank&#34;&gt;Saiba mais sobre a construção de formulários em HTML 5.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Outros novos atributos que também prometem revolucionar são: &lt;code&gt;placeholder&lt;/code&gt; que poderá ser declarado nos elementos &lt;code&gt;input&lt;/code&gt; e &lt;code&gt;textarea&lt;/code&gt;, utilizado para validar o tipo de informação a ser inserida. Por exemplo: &lt;code&gt;&amp;lt;input type=”email” placeholder=”a@b.com.br” /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;E o atributo &lt;code&gt;required&lt;/code&gt; que poderá ser declarado aos campos de um formulário exigindo preenchimento.&lt;/p&gt;

&lt;h3 id=&#34;elementos-alterados&#34;&gt;Elementos Alterados&lt;/h3&gt;

&lt;p&gt;Alguns elementos terão sua significancia alterada no HTML 5. Como por exemplo, o elemento &lt;code&gt;b&lt;/code&gt; que não representará nada além de uma informação em negrito na tela e o elemento &lt;code&gt;i&lt;/code&gt; que representará informações em outras línguas ou um novo tom de voz para leitores de tela.&lt;/p&gt;

&lt;h3 id=&#34;elementos-eliminados&#34;&gt;Elementos eliminados&lt;/h3&gt;

&lt;p&gt;E como não poderia deixar de ser, alguns elementos não deverão mais ser utilizados, como por exemplo os elementos &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;tt&lt;/code&gt;, &lt;code&gt;frame&lt;/code&gt; e &lt;code&gt;noframes&lt;/code&gt;. Inevitavelmente, algumas das técnicas de acessibilidade que utilizamos hoje, deverão ser revistas bem como a busca por novas alternativas para esta nova versão.&lt;/p&gt;

&lt;p&gt;Muito do que foi descrito acima, ainda está em estudo e aprendizado. Alguns testes já podem ser feitos em navegadores como o Chrome e Opera e, em algumas semanas, Firefox 4, e são essenciais para um entendimento mais direto das limitações e possibilidades que teremos. Sem descartar claro, que a troca de informações entre profissionais do desenvolvimento web será essencial, portanto comente, observe e sugira maneiras de utilização e saiba, este é só o começo do quanto o HTML 5 pretende revolucionar o que conhecemos por “construção de websites”.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução a Microdata no HTML5</title>
      <link>http://tableless.com.br/introducao-a-microdata-no-html5/</link>
      <pubDate>Mon, 20 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-a-microdata-no-html5/</guid>
      <description>

&lt;p&gt;Provavelmente você já ouviu falar de &lt;a href=&#34;http://tableless.com.br/para-ficar-de-olho-microformats&#34; title=&#34;Microformatos&#34;&gt;microformats&lt;/a&gt;, um padrão que permite representar informações de modo mais semântico no XHTML, como, por exemplo, informações de contato (&lt;em&gt;hCard&lt;/em&gt;) ou dados de um evento (&lt;em&gt;hCalendar&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;No HTML5, temos o &lt;em&gt;microdata&lt;/em&gt;, conceito semelhante aos microformats e RDFa, um padrão de representação de informações que estende as potencialidades semânticas do HTML5.&lt;/p&gt;

&lt;p&gt;As informações representadas através de &lt;em&gt;microdata&lt;/em&gt; utilizam elementos pertencentes a um vocabulário específico que deve ser referenciado no documento HTML. O vocabulário é a especificação das propriedades utilizadas e qual tipo de informação elas representam.&lt;/p&gt;

&lt;p&gt;Atualmente, vocabulários de &lt;em&gt;microdata&lt;/em&gt; podem ser encontrados no site &lt;a href=&#34;http://www.data-vocabulary.org/&#34;&gt;http://www.data-vocabulary.org/&lt;/a&gt;, contendo especificações para descrever eventos, empresas, pessoa, produto e até breadcrumbs (caminhos de navegação de um site). No site podem ser encontradas as propriedades referentes a cada especificação e uma descrição de finalidade e utilização.&lt;/p&gt;

&lt;p&gt;Ao utilizar este tipo de padrão para descrição de dados, você possibilita que mecanismos de busca entendam estas informações dentro do contexto semântico definido e facilita a outras aplicações reconhecer e importar estes dados de seu site. E isto não é uma projeção para o futuro, o mecanismo de busca do Google já reconhece &lt;em&gt;microdata&lt;/em&gt; e possui artigos no &lt;a href=&#34;http://www.google.com/support/webmasters/bin/topic.py?topic=21997&#34;&gt;Help Center do Webmasters Tools&lt;/a&gt;, portanto, já pode ser utilizado.&lt;/p&gt;

&lt;h3 id=&#34;como-utilizar-microdata-no-html5&#34;&gt;Como utilizar microdata no HTML5&lt;/h3&gt;

&lt;p&gt;Primeiro é preciso determinar uma tag que será o escopo do &lt;em&gt;microdata&lt;/em&gt;, ou seja, será o elemento que contém as informações. Para isso, essa tag deve possuir a propriedade &lt;strong&gt;itemscope&lt;/strong&gt; e também a propriedade &lt;strong&gt;itemtype&lt;/strong&gt; com o valor indicando o vocabulário de &lt;em&gt;microdata&lt;/em&gt; a ser utilizado para que o mecanismo de busca saiba que tipo de informação irá encontrar dentro das tags deste elemento.&lt;/p&gt;

&lt;p&gt;Vamos exemplificar que desejamos exibir um microdata com informações de uma organização. Primeiro definimos uma &lt;strong&gt;div&lt;/strong&gt; como escopo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div itemscope itemtype=&#34;http://data-vocabulary.org/Organization&#34;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;As tags que estarão dentro desta &lt;strong&gt;div&lt;/strong&gt; devem conter a propriedade &lt;strong&gt;itemprop&lt;/strong&gt; para identificar qual elemento (propriedade) aquela tag estará representando. No caso do vocabulário &lt;em&gt;Organization&lt;/em&gt; temos elementos como name (nome da empresa), tel (telefone), geo (coordenadas geográficas como latitude e longitude), entre outras. Também é possível adicionar microdata aninhado, ou seja, outro vocabulário microdata para detalhar alguma informação.&lt;/p&gt;

&lt;p&gt;Neste exemplo, além das propriedades do vocabulário &lt;em&gt;Organization&lt;/em&gt;, iremos também utilizar de modo aninhado o microdata &lt;em&gt;Address&lt;/em&gt;, especificando detalhes do endereço.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div itemscope itemtype=&#34;http://data-vocabulary.org/Organization&#34;&amp;gt;
    &amp;lt;h1 itemprop=&#34;name&#34;&amp;gt;Tableless &amp;ndash; Treinamento e Desenvolvimento Web&amp;lt;/h1&amp;gt;
    &amp;lt;p itemprop=&#34;tel&#34;&amp;gt;11 9999-9999&amp;lt;/p&amp;gt;
    &amp;lt;p itemprop=&#34;address&#34; itemscope itemtype=&#34;http://data-vocabulary.org/Address&#34;&amp;gt;
      &amp;lt;span itemprop=&#34;street-address&#34;&amp;gt;Rua do Tableless, 232&amp;lt;/span&amp;gt;,
      &amp;lt;span itemprop=&#34;locality&#34;&amp;gt;S&amp;atilde;o Paulo&amp;lt;/span&amp;gt;,
      &amp;lt;span itemprop=&#34;region&#34;&amp;gt;SP&amp;lt;/span&amp;gt;.
    &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Utilizar tecnologias como &lt;em&gt;microdata&lt;/em&gt;, &lt;em&gt;microformarts&lt;/em&gt; ou &lt;em&gt;RDFa&lt;/em&gt; só vem a enriquecer as informações que podem ser oferecidas em páginas HTML e ajudar a construir uma web mais semântica.&lt;/p&gt;

&lt;p&gt;Saiba mais sobre microdata no artigo &lt;a href=&#34;http://www.webmonkey.com/2010/09/microdata-html5s-best-kept-secret/&#34;&gt;Microdata: HTML5’s Best-Kept Secret&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bem vindo a Xangri-lá – Parte 2</title>
      <link>http://tableless.com.br/bem-vindo-a-xangrila-parte-2/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/bem-vindo-a-xangrila-parte-2/</guid>
      <description>

&lt;p&gt;Uma vez familiares com a premissa do Progressive Enhancement, vamos entender como aplicar a abordagem para criar suas páginas do zero, garantindo que elas funcionem na maior aplitude de navegadores e dispositivos. Antes de começar, é importante lembrar que para tudo funcionar bem, você precisa conhecer as funcionalidades e limitações da especificacao HTML, seus elementos, tags, e atributos aprovados, isso esta disponivel no site do w3c. É importante tambem se manter no &lt;em&gt;bleeding edge&lt;/em&gt;, para que novas linguagens (como o HTML5) não fiquem de fora de suas análises e ponderações. Um plus é você conhecer (ou pelo menos ter em mãos para referência) as especificacoes de CSS 2.1 e 3 disponiveis no w3c. Vale lembrar que CSS3 e HTML5 são assuntos novos e ainda não se tornaram especificação (ainda está no status de &lt;em&gt;working draft&lt;/em&gt;), o que não nos impede de usar todo o poder já disponível para se criar aplicações online.&lt;/p&gt;

&lt;h2 id=&#34;analisando-a-aplicação-um-raio-x&#34;&gt;Analisando a aplicação: Um raio-x&lt;/h2&gt;

&lt;p&gt;As expectativas e considerações do cliente geram o design e a funcionalidade de sua aplicação. Mas como esse design deve funcionar nos mais diversos cenários é responsabilidade nossa. A primeira etapa é fazer um scan detalhado do que vai ser construido naquela etapa do processo. Se você recebeu wireframes que mostram como sua página deve ser visualizada em um monitores 4:3, 16:9 e mobile em telas paisagem e retrato você deve pegar estes 3 designs e sua estrutura &lt;strong&gt;básica&lt;/strong&gt; de HTML para entender quais serão as partes em comum para a partir daí escrever o HTML.&lt;/p&gt;

&lt;div id=&#34;attachment_2381&#34; style=&#34;width: 710px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2010/12/layouts.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/layouts.png&#34; alt=&#34;Wireframes mostrando diferentes designs para 16:9, 4:3, mobile horizontal e vertical&#34; width=&#34;700&#34; height=&#34;167&#34; class=&#34;size-full wp-image-2381&#34; srcset=&#34;uploads/2010/12/layouts.png 700w, uploads/2010/12/layouts-300x71.png 300w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Diferentes Wireframes para o mesmo design
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;O que está presente em todas as páginas? Como deve ser a semântica e a linearidade do HTML ponderando os wireframes desktop X mobile? Se a navegação (em amarelo escuro nos designs) fizer uso de um acordion, como o HTML mais básico deverá ser escrito, de modo que o design acima seja garantido para todos os dispositivos que vão acessar a página, independente de sua configuração? (isso seria válido para qualquer plugin na página)&lt;/p&gt;

&lt;p&gt;Com um raio-x nos designs acima, veremos que o cabeçalho(em laranja), pesquisa(azul topo), navegacao (amarelo escuro com boxes), conteúdo (centro) e rodapé (azul fundo) são as partes presentes em todos os designs. Dá até pra assumir que o exemplo acima é o de um portal – se o usuário acessa de uma tela desktop wide, anúncios (amarelo claro) são mostrados. Se o cara acessa de um desktop, uma animação no cabecalho é mostrada.&lt;/p&gt;

&lt;p&gt;As condições deste exemplo são simples – na vida real é &lt;strong&gt;sempre&lt;/strong&gt; mais complexo – mas é assim que você deve montar a sua análise. Eu poderia por exemplo colocar os anúncios do wireframe 16:9 em um elemento &lt;strong&gt;aside&lt;/strong&gt; sabendo de suas funcionalidades. A navegação poderia ser embarcada no elemento &lt;strong&gt;nav&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Você pode se perguntar: Mas o elemento *&lt;strong&gt;&lt;em&gt;nav&lt;/em&gt;&lt;/strong&gt;* e &lt;strong&gt;aside&lt;/strong&gt;, nativos do HTML5 são novos e precisaremos de um &lt;strong&gt;document.createElement()&lt;/strong&gt; para que ele renderize em navegadores sem suporte a linguagem. Não estamos misturando Graceful Degradation aqui, uma vez que estamos usando uma solução e depois corringindo “deficiências” da solução com um patch?&lt;/p&gt;

&lt;p&gt;Sim, estamos usando princípios de Graceful Degradation para corrigir essa limitação do HTML5, mas como estamos no planejamento da aplicação, e ela ainda não está nem perto de ser codificada, a orientação geral continua sendo o Progressive Enhancement.&lt;/p&gt;

&lt;p&gt;Os wireframes são intuitivos, e as regras muito claras. Para as páginas de conteúdo a única funcionalidade avançada existente está na navegação(um accordion) e no topo (um slideshow). Passando um plugin de um accordion em um raio-x, vemos que o HTML dele é semântico:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ul&amp;gt;&amp;lt;!--primeiro nivel--&amp;gt;
&amp;lt;li&amp;gt;
   &amp;lt;ul&amp;gt;&amp;lt;!--segundo nivel--&amp;gt;
    &amp;lt;li&amp;gt;
       &amp;lt;ul&amp;gt;&amp;lt;!--terceiro nivel--&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
       &amp;lt;/ul&amp;gt;
     &amp;lt;/li&amp;gt;
     &amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Sabemos que a manipulação que o jQuery faz não será disponível para dispositivos com javascript desabilitado. Como resolver então os níveis que devem ser ocultos em situações como essa? CSS &lt;strong&gt;display:none/block;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A estrutura usual de slideshows é muito parecida com o accordion, e a solução provavelmente seria a mesma. E esta estrutura garante a mesma experiencia de navegação ao usuario, com javascript ou não.&lt;/p&gt;

&lt;h2 id=&#34;aplicando-o-progressive-enhancement&#34;&gt;Aplicando o Progressive Enhancement&lt;/h2&gt;

&lt;p&gt;Como você pode ver, os maiores segredos dessa abordagem é separar bem HTML, CSS e javascript de acordo com funcionalidades que podem ser renderizadas nos dispositivos que acessam sua página.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tenha um documento HTML semântico e bem estruturado;&lt;/li&gt;
&lt;li&gt;Mantenha sempre o layout separado do conteúdo (e mantenha as linhas que dividem essas áreas sempre muito bem visíveis)&lt;/li&gt;
&lt;li&gt;Mantenha suas iterações avancadas em uma camada específica, tanto estilo como script, sempre atento as limitações de Usabilidade e Acessibilidade.&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&#34;attachment_2380&#34; style=&#34;width: 986px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2010/12/fluxo_dev.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2010/12/fluxo_dev.png&#34; alt=&#34;Fluxograma de desenvolvimento orientado ao Progressive Enhancement&#34; width=&#34;700&#34; height=&#34;146&#34; class=&#34;size-full wp-image-2380&#34; srcset=&#34;uploads/2010/12/fluxo_dev.png 976w, uploads/2010/12/fluxo_dev-300x62.png 300w, uploads/2010/12/fluxo_dev-940x198.png 940w&#34; sizes=&#34;(max-width: 700px) 100vw, 700px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Evolução do código HTML e CSS em uma aplicação que usa PE para diferentes versões: Básica, Mobile, Desktop e Enhanced
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;As abordagens de Progressive Enhancement pedem um documento HTML muito bem estruturado e escalável, e a evolução de seu desenvolvimento é mostrado na primeira linha da visualização acima. Com um &lt;em&gt;markup&lt;/em&gt; mais básico, podemos garantir a visualização em dispositivos primitivos, fazendo com que o propósito da aplicação seja garantido. Esse markup evolui para englobar as outras versões, e com o desenvolvimento CSS não é diferente. Linearizar o desenvolvimento desta maneira traz vários benefícios: pode garantir a entrega de releases a medida que o desenvolvimento caminha, mostrando a evolução do projeto para o cliente, mantem o time de testes (se existente) com uma carga de trabalho para detecção de erros, fazendo com que o período de homoogação seja menos doloroso na entrega do projeto, a lista cresce. Normalmente para a criação de um site ou aplicação, eu uso este diagrama de fluxo para garantir que o meu desenvolvimento vai ser o mais alinhado aos métodos de Progressive Enhancement possível. Cada uma das caixas em cinza tem várias sub-divisões que vou adicionando de acordo com a necessidade do projeto. Com ele consigo garantir um grande número de dispositivos com um pouco menos de trabalho la na frente adequando páginas aos mais diferentes tipos de dispositivo.&lt;/p&gt;

&lt;p&gt;Eu coloco o desenvolvimento da versão mobile em primeiro, e este é um ponto de discordância com alguns amigos nos papos de bar – e de IM também. Considero mobile uma versão incipiente das informações que o usuário costuma encontrar em uma versão desktop. Posso confessar que esta é uma metodologia que foi desenvolvida adequada a uma certa realidade. Ela pode variar se seu workflow de desenvolvimento é direfente. Repito o que disse no post anterior – &lt;strong&gt;desenvolva, adote ou customize uma metodologia&lt;/strong&gt;. A minha metodologia partiu do livro do Filament Group _&lt;a href=&#34;http://filamentgroup.com/dwpe/&#34; target=&#34;_blank&#34; title=&#34;Acessar o site do Filament Group&#34;&gt;Designing with Progressive Enhancement&lt;/a&gt;_, de artigos na web (alguns deles eu usei para montar a minha série de posts) e de análises da minha carga e tipo de trabalho.&lt;/p&gt;

&lt;p&gt;Um exemplo? Se o seu design está sendo feito para interfaces mobile apenas, sabemos que as preocupações para engine de renderização e desktop somem, mas ainda sim teríamos uma versão &lt;strong&gt;básica&lt;/strong&gt;, para aqueles navegadores dos celulares mais antigos, uma versão &lt;strong&gt;mobile&lt;/strong&gt;, uma versão &lt;strong&gt;enhanced&lt;/strong&gt;, e uma versão para &lt;strong&gt;print&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Separar a versão mobile de enhanced é apenas uma preocupação com a &lt;strong&gt;escalabilidade do código&lt;/strong&gt;. Ainda não enfrentamos tantos problemas de interface em navegadores mobile, mas possivelmente iremos enfrentar. Não temos muitas aplicações que dependam de serviços de impressão, como o que temos no &lt;a href=&#34;http://labnol.org/?p=17827&#34; target=&#34;_blank&#34; title=&#34;Acessar o Digital Inspiration&#34;&gt;Dropbox&lt;/a&gt;. Mas ainda vamos ter. Uma aplicação mobile que gerencie os pedidos de qualquer negócio e precise gerar a impressão de uma nota de compra ainda não aparece com frequência no mercado para se desenvolver. Mas vai.&lt;/p&gt;

&lt;p&gt;Percebem as águas que vamos navegar em breve? Os problemas que iremos ter que lidar, a complexidade que o desenvolvimento web vai requerer? Esse fluxograma é o que eu uso &lt;strong&gt;hoje&lt;/strong&gt; no meu trabalho. Mas agora no final do ano ele vai ganhar um upgrade porque o iPad não está na jogada ainda quer entrar no bolo, afinal um design feito com uma palheta de cores mais viva pode ganhar com tom mais intenso, tirando maior proveito da tecnologia Retina do visor dos iPads (e dos iPhones também).&lt;/p&gt;

&lt;p&gt;No próximo post irei continuar o assunto que abordei no meu primeiro artigo, discutir um Plano de Usabilidade e suas fases; vamos aplicá-las em uma empresa fictícia e após termos um “Plano de Governo”, voltaremos a Xangri-lá, para a última parte desta série de posts, fazendo um grande lab mostrando a implantação de um projeto web usando os conceitos de Progressive Enhancement. &lt;em&gt;Namastê&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;referência&#34;&gt;Referência&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://filamentgroup.com/lab/announcing_our_book_designing_with_progressive_enhancement/&#34; target=&#34;_blank&#34; title=&#34;Acessar o site do Filament Group e o livro&#34;&gt;Designing with Progressive Enhancement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thomasmaier.me/2010/06/css-for-iphone-4-retina-display/&#34; target=&#34;_blank&#34; title=&#34;Acessar o blog do Thomas Maier&#34;&gt;Criando CSS para iPhone4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thomasmaier.me/2010/03/howto-css-for-the-ipad/&#34; target=&#34;_blank&#34; title=&#34;Acessar o blog do Thomas Maier 2&#34;&gt;Criando CSS para iPads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.labnol.org/internet/print-from-mobile-phones/17827/&#34; target=&#34;_blank&#34; title=&#34;Acessar o Digital Inspiration&#34;&gt;Imprindo de telefones usando dropbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sections: elemento article – Parte 4</title>
      <link>http://tableless.com.br/section-elemento-article/</link>
      <pubDate>Mon, 25 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/section-elemento-article/</guid>
      <description>

&lt;p&gt;Você deve marcar a área do conteúdo do seu site com um DIV com um ID do tipo: conteudo, texto, main, content e etc&amp;#8230; Normalmente esta é uma área nobre. O Google e outros sistemas de busca não tem com saberem onde fica o bloco do texto principal do site. Não havia nenhuma indicação dizendo que determinado elemento é se trata do bloco que carrega a informação principal do site. O &lt;strong&gt;article&lt;/strong&gt; surgiu para suprir essa necessidade.&lt;/p&gt;

&lt;h3 id=&#34;o-que-a-especificação-diz&#34;&gt;O que a especificação diz&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;The article element represents a component of a page that consists of a self-contained composition in a document, page, application, or site and that is intended to be independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O elemento &lt;strong&gt;article&lt;/strong&gt; representa uma seção de conteúdo do site, que forma uma parte independente do documento. Dentro do &lt;strong&gt;article&lt;/strong&gt; você colocará uma post de blog, artigo, texto, posts em fóruns e etc. Você pode marcar os comentários de um blog com &lt;strong&gt;article&lt;/strong&gt;. Todo o conteúdo do &lt;strong&gt;article&lt;/strong&gt; pode ser reutilizado em feeds ou outros meios de &amp;#8220;sindicação&amp;#8221; (syndication).&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;article&lt;/strong&gt; pode conter uma estrutura como essa:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;article&gt; &lt;header&gt;&lt;/p&gt;

&lt;h1 id=&#34;título-do-post&#34;&gt;Título do post&lt;/h1&gt;

&lt;p&gt;&lt;time datetime=&#34;12-03-1983&#34; pubdate=&#34;pubdate&#34;&gt;03 de Dezembro de 1983&lt;/time&gt;&lt;/p&gt;

&lt;p&gt;Texto de introdução.&lt;/header&gt;&lt;/p&gt;

&lt;h2 id=&#34;um-outro-título&#34;&gt;Um outro título&lt;/h2&gt;

&lt;p&gt;Texto do post.&lt;/p&gt;

&lt;p&gt;Texto do post.&lt;/p&gt;

&lt;p&gt;Texto do post.&lt;/article&gt;&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Veja que o &lt;strong&gt;article&lt;/strong&gt; envolve tudo o que é relacionado ao conteúdo do post: data, introdução, título e etc. Você não precisa agregar tudo isso no &lt;strong&gt;article&lt;/strong&gt; se não quiser.&lt;/p&gt;

&lt;h3 id=&#34;de-olho-na-semântica&#34;&gt;De olho na semântica&lt;/h3&gt;

&lt;p&gt;Alguns podem confundir os elementos de &lt;strong&gt;article&lt;/strong&gt;, &lt;strong&gt;section&lt;/strong&gt; e &lt;strong&gt;div&lt;/strong&gt;. Entenda que o &lt;strong&gt;article&lt;/strong&gt; é um elemento mais específico que o &lt;strong&gt;section&lt;/strong&gt; e o &lt;strong&gt;div&lt;/strong&gt;. O &lt;strong&gt;article&lt;/strong&gt; indica que um determinado bloco leva um conteúdo importante. O &lt;strong&gt;section&lt;/strong&gt; é apenas um bloco de separação de assuntos diferentes. O &lt;strong&gt;div&lt;/strong&gt;, o mais genérico de todos apenas é aplicado para separar elementos em blocos, por isso ele não carrega nenhum significado semântico. Para entender melhor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para informação e conteúdo que fará sentido se visto fora do seu site como em leitores de RSS ou outros meios, utilize o &lt;strong&gt;article&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Para separar e organizar conteúdos de diversos assuntos em blocos diferentes, utilize o &lt;strong&gt;section&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Para utilização não semântica, detalhes genéricos e etc, utilize &lt;strong&gt;div&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sections: elemento nav – Parte 2</title>
      <link>http://tableless.com.br/sections-elemento-nav/</link>
      <pubDate>Thu, 30 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/sections-elemento-nav/</guid>
      <description>&lt;p&gt;Se você não leu o &lt;a href=&#34;http://tableless.com.br/sections-html5&#34;&gt;primeiro artigo da série&lt;/a&gt;, é interessante que o faça agora.&lt;/p&gt;

&lt;p&gt;O elemento &lt;code&gt;nav&lt;/code&gt; representa uma seção da página que contém link para outras páginas ou partes do mesmo website. Resumindo: &lt;code&gt;nav&lt;/code&gt; é uma seção de links de navegação.&lt;/p&gt;

&lt;p&gt;Essa definição é muito mais complexa do que se imagina. A tag &lt;code&gt;nav&lt;/code&gt; pode agrupar uma série de elementos que anteriormente faríamos com &lt;code&gt;div&lt;/code&gt;. Nem todos os grupos de links da página precisam ser um elemento &lt;code&gt;nav&lt;/code&gt;, mas apenas as seções que consitem em blocos principais. Imagine uma sidebar (agora descrito com a tag &lt;code&gt;aside&lt;/code&gt;) com uma série de links, como por exemplo uma sidebar de um portal como o G1, R7, UOL e etc&amp;#8230; Nestas sidebars é normal você encontrar os diversos links das diversas categorias de assuntos. Anteriormente, se quiséssemos agrupar por exemplo um Título e uma lista de links faríamos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;categ categ-esporte&#34;&amp;gt;
  &amp;lt;h3&amp;gt;Esporte&amp;lt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Copa 2014&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Brasileir&amp;atilde;o&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;F&amp;oacute;rmula 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Baskete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Resolvia nosso problema de formatação. Poderíamos utilizar &lt;code&gt;div&lt;/code&gt; que envolve o título e a lista para fazer algum detalhe visual e etc. Mas a nível de informação, não havia nenhuma indicação de que o título estivesse ligado ao conteúdo. Não há nenhuma referência de que o título ESPORTE apresenta a lista de links sobre esporte abaixo. Os sistemas de busca não podem se basear apenas na posição dos elementos, é algo muito genérico para eles confirmarem que a lista e o título que a precede estão ligados em um mesmo assunto.&lt;/p&gt;

&lt;p&gt;Com o HTML5, isso muda. Veja o código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;nav class=&#34;categ categ-esporte&#34;&amp;gt;
  &amp;lt;h3&amp;gt;Esporte&amp;lt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Copa 2014&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Brasileir&amp;atilde;o&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;F&amp;oacute;rmula 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Baskete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Com a tag &lt;code&gt;nav&lt;/code&gt;, há uma indicação de que aquele grupo é uma seção (&lt;code&gt;nav&lt;/code&gt; é um tipo de &lt;code&gt;section&lt;/code&gt;. Enquanto a tag &lt;code&gt;section&lt;/code&gt; serve para indicar seções no site, a tag &lt;code&gt;nav&lt;/code&gt; indica que um determinado grupo é uma seção de navegação) é um bloco de navegação.&lt;/p&gt;

&lt;p&gt;Dentro da &lt;code&gt;nav&lt;/code&gt; você pode agrupar uma série de listas de links.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;nav&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Copa 2014&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Brasileir&amp;atilde;o&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;F&amp;oacute;rmula 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Baskete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;

  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Educa&amp;ccedil;&amp;atilde;o&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Dicion&amp;aacute;rios&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Vestibular&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;

  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Cotidiano&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Pol&amp;iacute;tica&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Jornais&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A tag &lt;code&gt;nav&lt;/code&gt; também pode estar em todos os elementos do HTML. Você pode colocá-la no &lt;code&gt;header&lt;/code&gt; para definir menus, no &lt;code&gt;footer&lt;/code&gt; para definir grupos de links, sidebars, articles e etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sections: seções do HTML5 – Parte 1</title>
      <link>http://tableless.com.br/sections-html5/</link>
      <pubDate>Thu, 23 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/sections-html5/</guid>
      <description>

&lt;p&gt;A estrutura de um site é dividida em diversas seções. Cada seção representa uma fatia do layout e também representa um grupo de conteúdo. Cada um destes grupos tem seu assunto específico. Nas minhas aulas eu costumava apresentar estas seções como &lt;strong&gt;seções mestres&lt;/strong&gt; ou &lt;strong&gt;seções principais&lt;/strong&gt;. Normalmente para descrever em HTML estas seções, usávamos a tag &lt;code&gt;div&lt;/code&gt;. O elemento &lt;code&gt;div&lt;/code&gt; é um elemento genérico que serve para criar DIVISÕES. Estas divisões não tinham significado semântico nenhum, não levavam nenhum tipo de informação &amp;#8220;extra&amp;#8221;, mas a nível de formatação resolvia nosso problema. Nós agrupávamos o conteúdo das seções e conseguíamos distinguir cada seção nomeando os divs com CLASSES e IDs e assim formatávamos o código com CSS.&lt;/p&gt;

&lt;p&gt;A nível de semântica ou seja, para entregar informação útil para o usuário, sistemas ou aplicações, estas seções não eram eficazes. Não havia como distinguir um cabeçalho de um rodaé. Não era possível diferenciá-los pelo nome porque cada desenvolvedor dava seu próprio nome para o elemento: alguns chamavam de header, outro cabeçalhos, outros testeira (acredite se quiser) e assim por diante. Por estes motivos que no &lt;strong&gt;HTML5&lt;/strong&gt; as seções ganharam mais significado.&lt;/p&gt;

&lt;h3 id=&#34;cada-coisa-em-seu-lugar&#34;&gt;Cada coisa em seu lugar&lt;/h3&gt;

&lt;p&gt;As novas seções também fazem divisões, mas além disso elas servem significado para o código. Neste novo cenário o &lt;code&gt;div&lt;/code&gt; perdeu um pouco o foco e será utilizado em detalhes. Ele ficou bem mais genérico que antes. Essa é uma das razões que o &lt;code&gt;div&lt;/code&gt; é coisa do passado. Abaixo veja uma breve descrição dos novos elementos de seção do HTML5:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;HEADER&lt;/dt&gt;
&lt;dd&gt;Define um grupo de títulos ou o cabeçalho de uma determinada seção.&lt;/dd&gt;
&lt;dt&gt;FOOTER&lt;/dt&gt;
&lt;dd&gt;Define o rodapé das seções ou da página.&lt;/dd&gt;
&lt;dt&gt;NAV&lt;/dt&gt;
&lt;dd&gt;Define um grupo ou bloco de links de navegação.&lt;/dd&gt;
&lt;dt&gt;ASIDE&lt;/dt&gt;
&lt;dd&gt;Define um elemento lateral que pode conter blocos de navegação (NAVs), citações e outras informações que costumamos colocar em uma sidebar.&lt;/dd&gt;
&lt;dt&gt;ARTICLE&lt;/dt&gt;
&lt;dd&gt;Define a área onde há um artigo, texto, redação, conteúdo e etc&amp;#8230;&lt;/dd&gt;
&lt;dt&gt;SECTION&lt;/dt&gt;
&lt;dd&gt;Define um bloco ou um grupo de um assunto específico. É importante entender que a section agrupa diversos elementos que tenham relação entre si. Por exemplo, se há uma área no site que há links, conteúdo, imagens e etc de um assunto em comum, você agrupará esses elementos com uma section. Nesse caso, ele entrou no lugar daquele div que fazíamos para dividir grandes blocos de assuntos em comum.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;e-o-div-exemplo&#34;&gt;E o div? Exemplo.&lt;/h3&gt;

&lt;p&gt;E onde entra o &lt;code&gt;div&lt;/code&gt;? O Div servirá para agruparmos elementos dentro destes sections ou fazer outros detalhes que não precisam de significado semântico, apenas visual.&lt;/p&gt;

&lt;p&gt;Imagine que exista uma section chamada NOTÍCIAS:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section id=&#34;noticias&#34;&amp;gt;
...
&amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Dentro dessa &lt;code&gt;section&lt;/code&gt; há 3 colunas de assuntos diversos ou randomizados que dividem as chamadas.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section id=&#34;noticias&#34;&amp;gt;
   &amp;lt;div&amp;gt;
      ...
   &amp;lt;/div&amp;gt;
   &amp;lt;div&amp;gt;
      ...
   &amp;lt;/div&amp;gt;
   &amp;lt;div&amp;gt;
      ...
   &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Suponha que cada uma colunas seja de um assunto diferente, por exemplo: Esporte, Política e Educação. Aí nesse caso não usaríamos &lt;code&gt;div&lt;/code&gt; mas sim outras &lt;code&gt;sections&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section id=&#34;noticias&#34;&amp;gt;
   &amp;lt;section id=&#34;esporte&#34;&amp;gt;
      ...
   &amp;lt;/section&amp;gt;
   &amp;lt;section id=&#34;politica&#34;&amp;gt;
      ...
   &amp;lt;/section&amp;gt;
   &amp;lt;section id=&#34;educacao&#34;&amp;gt;
      ...
   &amp;lt;/section&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Você poderia utilizar DIVs com os IDs? Sim, claro. Mas lembre-se que o DIV é genérico, para os sistemas de busca, leitores de tela, aplicações e etc, os DIVs não indicam seções de conteúdo, mas o elemento &lt;code&gt;section&lt;/code&gt; sim.&lt;/p&gt;

&lt;p&gt;Há uma polêmica ainda com algumas ordens nas estruturas. No exemplo acima colocamos &lt;code&gt;sections&lt;/code&gt; em vez de &lt;code&gt;divs&lt;/code&gt;. Poderíamos ter colocado &lt;code&gt;article&lt;/code&gt; dentro da &lt;code&gt;section&lt;/code&gt; principal. Não vou entrar no que é mais certo ou no que é mais semântico porque neste contexto, ainda é subjetivo. Há alguns conceitos que iremos amadurecer durante um tempo. Contudo, temos que começar por algum lugar e claro, devemos estudar as melhores formas tanto para o projeto quanto para a semântica do código.&lt;/p&gt;

&lt;p&gt;Você já deve ter lido isso aqui, mas lembre-se: semântica é o nome do jogo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Conteúdo, Flash e HTML</title>
      <link>http://tableless.com.br/contedo-flash-e-html/</link>
      <pubDate>Thu, 29 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/contedo-flash-e-html/</guid>
      <description>&lt;p&gt;Steve Jobs fez um texto explicando os motivos pelos quais a Apple não suporta e nem suportará Flash em seus aparelhos. Sugiro que você &lt;a href=&#34;http://migre.me/AyLA&#34;&gt;leia o artigo&lt;/a&gt; antes de continuar. &lt;a href=&#34;http://moglobo.globo.com/integra.asp?txtUrl=/tecnologia/mat/2010/04/29/steve-jobs-explica-em-carta-aberta-por-que-nao-permite-flash-no-iphone-no-ipad-916462367.asp&#34;&gt;Aqui tem uma versão traduzida&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A Web foi criada para facilitar o compartilhamento de informação. Este objetivo é muito claro quando estudamos sua história. Você pode enviar um email, um tweet ou uma mensagem no gTalk e a pessoa do outro lado ter essa informação na hora. É muito melhor do que esperar dias para receber uma folha de papel. A ideia da web é compartilhar e oferecer informação de fácil acesso. Não importa se isso seja uma mensagem de 140 caractéres ou se um portal de notícias completo.&lt;/p&gt;

&lt;p&gt;Essa informação, por sua vez, precisa estar disponível a qualquer hora para ser consumida e reutilizada. Um exemplo clássico disso são os blogs. Os posts são acessíveis se você visitar a página ou por meio de RSS. Você pode acessar essa informação também pelo Google ou qualquer outro sistema de busca que exista. Se quiser, você pode usar seu dispositivo móvel para acessar essa informação aonde quer que esteja. Se você instalar em seu mobile uma App que baixa o conteúdo, melhor ainda, porque você poderá consumir essa informação offline.&lt;/p&gt;

&lt;p&gt;O HTML foi criado para que isso tudo funcione perfeitamente. O HTML foi criado para construir uma web interoperável. Uma web que seja acessível em qualquer parte do planeta com qualquer tipo de dispositivo ou meio de acesso.&lt;/p&gt;

&lt;p&gt;Não quero tirar o peso dos erros do W3C em demorar para reformular a linguagem. A W3C precisou de um empurrãozinho de vários desenvolvedores insatisfeitos pela falta de atitude e demora do W3C para reformular o HTML. Estes desenvolvedores por sua vez querem uma web mais pública, mais integrável, mais aberta. Estes objetivos estão sendo seguidos à risca agora com o desenvolvimento do HTML5 e do CSS3. Sugiro que leia o texto do W3C explicando qual é o objetivo real do HTML. &lt;a href=&#34;http://www.w3.org/TR/html401/intro/intro.html#h-2.2&#34;&gt;A brief history of HTML&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quando falamos sobre a importância de separar o &lt;a href=&#34;http://tableless.com.br/camadas-de-desenvolvimento-client-side&#34;&gt;desenvolvimento web em camadas&lt;/a&gt;, queremos que o desenvolvedor web entenda que há um motivo por trás de toda essa metodologia. Aquela ideia de que &amp;#8220;Conteúdo é Rei&amp;#8221; precisa ser levada ao pé da letra. O HTML é o coadjuvante de toda essa história. O conteúdo é o protagonista. Você trabalha com web porque existe conteúdo, caso contrário, qual seria o motivo para se ter internet?&lt;/p&gt;

&lt;p&gt;Concordo com o tio Steve quando ele não aceita suportar Flash em seus aparelhos. O Flash corre para o caminho contrário de todos os objetivos do W3C, da Apple e de todo mundo que luta por uma web mais interoperável. Entenda que também não sou contra Flash. O Flash teve o seu papel. Ajudou muito a web durante um tempo. Felizmente esse tempo já passou.&lt;/p&gt;

&lt;p&gt;Já passou o tempo dos sites mais &amp;#8220;interativos&amp;#8221; (odeio essa palavra quando quero me referir ao Flash), mais animados e etc . O HTML5 juntamente com o CSS3 leva o desenvolvimento para web para um novo patamar. Um patamar onde a informação está lá esperando para ser utilizada quantas vezes for necessária, onde for necessária e por qualquer meio de acesso. Seja esse meio acesso um simples sistema de leitura de tela ou um dispositivo ultrarevolucionário.&lt;/p&gt;

&lt;p&gt;Toda aquela história de semântica, código simples e com significado, é regra e precisa ser seguida. HTML mal escrito, com tags indicando significados errôneos para o conteúdo é tão ruim quanto o Flash. Talvez seja até pior. Ter cuidado é necessário, é muito trabalhoso também, sem dúvida, mas é uma das partes mais importantes da produção.&lt;/p&gt;

&lt;p&gt;A web só existe por causa do conteúdo. Se a informação desaparece ou se torna difícil de ser acessada, a web perde o sentido. Se você é desenvolvedor web e não trabalha para que essa informação fique cada mais semântica, acessível, abundante, você não é um profissional de internet, vocé qualquer coisa, menos isso.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ah, o maravilhoso mundo real</title>
      <link>http://tableless.com.br/ah-o-maravilhoso-mundo-real/</link>
      <pubDate>Thu, 10 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/ah-o-maravilhoso-mundo-real/</guid>
      <description>&lt;p&gt;O Diego publicou, há mais de uma semana, um &lt;a href=&#34;http://tableless.com.br/se-prepare-para-a-revolucao&#34;&gt;artigo sobre o impacto da mudança de estratégia do W3C&lt;/a&gt; em relação ao ciclo de vida de seus padrões. O artigo gerou algumas opiniões contrárias nos comentários, em relação ao fato de ele ter dito que bordas arredondadas são mais importantes que a web semântica e em relação à estratégia de especificações modulares do W3C. Vou compartilhar minha opinião sobre os dois pontos.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, é importante distinguir o ideal daquilo que é possível fazer. Li um bocado sobre RDF e ontologias há uns dez anos. Li &amp;#8220;A Revolução Inacabada&amp;#8221;, vi o RSS nascer e se tornar popular, vi as primeiras aplicações entenderem o formato. RDF falhou. Dez anos se passaram e continuamos escrevendo HTML para ser lido por navegadores e só. Há poucos exemplos de aplicações semânticas na vida real, e a maioria seria desenvolvida de uma forma ou de outra.&lt;/p&gt;

&lt;p&gt;Há muita gente, por exemplo, definindo seu próprio padrão de XML para trocar dados com sistemas parceiros. Quantos desses estão usando RDF, com uma ontologia interpretada automaticamente por sistemas que &amp;#8220;descobrem&amp;#8221; os serviços um do outro? Ou seja, não há novidades nisso nos últimos dez anos.&lt;/p&gt;

&lt;p&gt;Escrever HTML bom é importante, porque vai ajudar o Google a indexar seu site e vai facilitar a vida de quem tentar HTML parsing nele. Mas, seja sincero, você tem mesmo esperanças de que alguém vá lê-lo como XML? Vê alguma vantagem real em validar seu código como XHTML, além de provar a si próprio que fez tudo direito? E onde está a promessa dos microformats? Microformats só fazem diferença se forem usados por muita gente. Ninguém vai fazer um parser de um formato usado em apenas um site. Você consegue citar, de cabeça, cinco sites que usem microformats e não foram feitos por você? Ah, claro, não vale incluir na lista o microformats.org.&lt;/p&gt;

&lt;p&gt;Nem RSS é um bom exemplo de aplicação de semântica XML. Existem pelo menos dois formatos populares do padrão, além do padrão Atom, que serve para a mesma coisa. E não sei de nenhum leitor de RSS de sucesso que faça parsing dos feeds como XML. O que todos fazem é ler e interpretar a string. É isso mesmo que você entendeu, quase tão bom quanto um CSV! Outro exemplo digno de nota é o SOAP, que foi criado para fornecer aos webservices a capacidade de &amp;#8220;autodescoberta&amp;#8221;. Você conhece alguém que use isso de verdade? Já viu algum robô que varre a web em busca de serviços e entende sozinho como usá-los? SOAP só tem a vantagem de oferecer tooltips para ajudar os programadores .Net que usam Visual Studio. Enquanto isso, lá fora, XMLRPC e REST (com JSON) estão mudando o mundo.&lt;/p&gt;

&lt;p&gt;Por que essas tecnologias falharam, embora pareçam todas boas idéias? Meu palpite é que elas exigiam um raciocínio de longo prazo, um tipo de aposta, que é muito difícil de conseguir. Embora XHTML, Microformats ou SOAP sejam idéias muito boas, aplicá-las em seu site só vai ter valor se muito mais gente o fizer. Se você aplicar o formato sozinho vai perder seu tempo.&lt;/p&gt;

&lt;p&gt;O que é muito diferente de, por exemplo, deixar de usar tabelas para layout, escrever bom HTML ou usar jQuery. Essas coisas lhe devolvem um benefício imediato. Se deixar de usar tabelas para layout vai ter um site mais leve e vai perder muito menos tempo quando tiver que mudar o layout, se escrever HTML bom vai ter menos trabalho para escrever CSS, para fazer o CSS mobile e o de impressão, e se usar jQuery vai escrever javascript em um terço do tempo.&lt;/p&gt;

&lt;p&gt;Note que esses três exemplos também tiram benefícios do fato de muita gente estar usando. Há muitos bons lugares para se aprender HTML e CSS, há muitos sistemas Open Source que já trabalham gerando código bom e os buscadores entendem a semântica do bom HTML. Mas você não depende desses benefícios para tomar a decisão de uso. Quando começamos, há dez anos, a fazer layouts tableless, não aparecíamos melhor no Google e praticamente não havia sistemas gerando HTML direito. Mas o fizemos assim mesmo porque os benefícios imediatos compensavam o esforço.&lt;/p&gt;

&lt;p&gt;É por isso que eu temo que nunca teremos uma web semântica de verdade, e estamos condenados a fazer HTML parsing para sempre.&lt;/p&gt;

&lt;p&gt;Há exceções. RSS, por exemplo. RSS é uma sombra do que poderia, mas é um padrão de sucesso, amplamente adotado. E não pode ser explicado com minha teoria do benefício individual imediato. Se você estiver usando RSS sozinho no mundo, não terá nenhum benefício. Talvez o sucesso do RSS se deva ao fato de precisar de uma pequena rede de usuários para oferecer um grande benefício.&lt;/p&gt;

&lt;p&gt;Você já se perguntou como foram vendidos os primeiros aparelhos de FAX? Ter um FAX só faz sentido se mais gente tiver. Foram vendidos aos pares. As empresas o compravam para trocar documentos entre a matriz e as filiais. O fato de poder trocar documentos com o resto do mundo era, no início, um &amp;#8220;benefício adicional&amp;#8221;. Se você precisa trocar conteúdo com um site parceiro e vocês forem os únicos usuários de RSS no mundo, terá valido a pena. Conforme a comunidade de usuários aumentava, o valor de ter RSS crescia. Muita gente começou a usar Bloglines e todo mundo queria entrar na festa.&lt;/p&gt;

&lt;p&gt;Há alguns anos eu percorri o país com o pessoal da Locaweb comparando o modelo de adoção do RSS com o que eu imaginava que seriam os microformats. Eu estava errado. Pense um segundo no formato de reviews dos microformats. Qual o real benefício de usá-lo? Há alguma aplicação indispensável, onde você realmente quer estar, baseada em hReview? Para que você vai perder seu tempo?&lt;/p&gt;

&lt;p&gt;Será que não estamos resolvendo o problema errado? Quando o Diego diz que bordas arredondadas são mais importantes que RDF, será que ele não tem razão? Para meus clientes, hoje, bordas arredondadas com CSS significam um site mais rápido, mais barato (menos tempo gasto recortando imagens) e, para os sites muito visitados, economia de banda. É uma diferença pequena, mas é uma vantagem. E RDF? Além de oferecer RSS, que nem vai ser lido como XML, o que eu posso fazer de real hoje com RDF para meus clientes?&lt;/p&gt;

&lt;p&gt;Desculpe se meu raciocínio parece mesquinho. Ele é. Estou tentando ser realista. Uma das principais influências sobre as decisões humanas é a inércia, e não acredito que o mundo vá, num futuro próximo, adotar de maneira revolucionária o RDF ou mesmo o XHTML. Ainda acho essas idéias fantásticas, só não sei se são possíveis.&lt;/p&gt;

&lt;p&gt;O realismo também me faz crer que a nova estratégia de especificações modulares do W3C é uma coisa boa. Sofremos décadas com implementações parciais do HTML 4 e do CSS 2. Agora vamos assumir a realidade inevitável. Os desenvolvedores de navegador se sentirão mais à vontade para dizer a você o que funciona ou não. E não precisamos esperar anos para a definição de um padrão. Podemos usar os recursos com os quais o consórcio já concordou hoje. Leva mesmo alguns anos para o W3C bater o martelo sobre determinado padrão, e as especificações modulares representam um ciclo de releases muito mais dinâmico.&lt;/p&gt;

&lt;p&gt;Já temos um acordo sobre CSS Transform, bordas arredondadas, múltiplos backgrounds, repetição no DOM, validadores de formulários, SVG, DOM Storage, querySelectors e uma série de outros recursos legais. Por que esperar até a próxima Olimpíada para dizer aos desenvolvedores de browsers: &amp;#8220;Ok, pessoal, fechamos tudo, HTML 5 e CSS 3 já são padrões, podem implementar&amp;#8221;? De qualquer maneira, a adoção modular das especificações do W3C é inevitável. Embora a especificação tenha saído inteira, a adoção foi modular no HTML 3, no HTML 4, no CSS 2. Sabendo que não vai ser diferente mesmo, não é melhor que tenhamos bonitas tabelas de compatibilidade entre o que existe e o que cada navegador suporta?&lt;/p&gt;

&lt;p&gt;Dá uma olhada na &lt;a href=&#34;http://www.w3.org/Style/CSS/current-work&#34;&gt;lista de módulos do CSS3&lt;/a&gt;. Você não quer esperar isso tudo ficar pronto para ter bordas arredondadas.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>