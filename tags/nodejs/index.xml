<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on Tableless</title>
    <link>http://tableless.com.br/tags/nodejs/index.xml</link>
    <description>Recent content in Nodejs on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como instalar Node.js no Linux corretamente (Ubuntu, Debian, Elementary OS)</title>
      <link>http://tableless.com.br/como-instalar-node-js-no-linux-corretamente-ubuntu-debian-elementary-os/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-instalar-node-js-no-linux-corretamente-ubuntu-debian-elementary-os/</guid>
      <description>

&lt;p&gt;Recentemente comecei a minha migração do JSF para o Angular então busquei por um bom curso, pela documentação do &lt;em&gt;Framework&lt;/em&gt; e um bom livro técnico.&lt;/p&gt;

&lt;p&gt;No caso do curso escolhi inicialmente o do &lt;a href=&#34;https://twitter.com/flaviohalmeida&#34;&gt;Flávio Almeida&lt;/a&gt; na &lt;a href=&#34;https://www.alura.com.br/curso-online-angular2-parte1&#34;&gt;Alura&lt;/a&gt; e logo de cara fica claro que não é um &lt;em&gt;Framework&lt;/em&gt; para iniciantes no mundo do JavaScript e nem para iniciantes no mundo da programação, o próprio Flávio avisa sobre isso mais de uma vez além de informar sobre a necessidade de dominar o terminal (o terror dos novatos) do seu sistema operacional.&lt;/p&gt;

&lt;p&gt;Neste curso o Flávio já começa explicando como instalar os requisitos básicos para se começar a estudar sendo basicamente necessário ter instalado o &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt;, qualquer editor de texto (utilizo muito o &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;SublimeText&lt;/a&gt;, mas pra quem ta começando recomendo usar o &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Code&lt;/a&gt; porque ele nativamente consegue trabalhar muito bem com Angular e Node) e o NPM.&lt;/p&gt;

&lt;p&gt;Em distribuições &lt;em&gt;Debian Based&lt;/em&gt; é muito comum utilizar o comando &lt;strong&gt;apt install -nome do pacote-&lt;/strong&gt; e com o &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt; isso pode lhe trazer problemas, novamente o Flávio avisa sobre o possível problema. Entretanto tenho certeza que os mais novos no linux vão preferir utilizar o comando &lt;strong&gt;apt install -nome do pacote-&lt;/strong&gt; do que fazer a instalação do pacote binário e muito provavelmente isso vai quebrar tudo, porque até o momento que estou escrevendo esse texto os repositórios do Debian estão desatualizados (o Debian tem o costume de demorar para atualizar seus repositórios).&lt;/p&gt;

&lt;p&gt;Minha recomendação é que você &lt;strong&gt;não instale o Node&lt;/strong&gt; pelo comando &lt;strong&gt;sudo apt-get install -y nodejs&lt;/strong&gt; vai acontecer um conflito de nomes entre &lt;em&gt;node&lt;/em&gt; e &lt;em&gt;nodejs&lt;/em&gt;, parece besteira que uma simples nomenclatura quebre tudo, mas não é! O NPM que é o gerenciador de dependências vai ficar perdido e algumas funções não funcionarão.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/gritos.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calma! É tentador entrar em desespero, mas segure sua onda…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se você não deseja compilar o arquivo binário de instalação do Node na mão grande, a solução de instalação contínua simples, instale o NVM primeiro e depois o Node. O legal do NVM é que você pode instalar várias versões do Node e ficar alternando entre elas, mas antes de instalar o NVM precisamos de alguns pacotes de dependências que já estão no repositório de sua distribuição Debian Based.&lt;/p&gt;

&lt;h4 id=&#34;sudo-apt-get-update-sudo-apt-get-install-build-essential-libssl-dev&#34;&gt;&lt;em&gt;sudo apt-get update sudo apt-get install build-essential libssl-dev&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Agora que você já tem o necessário em seu sistema vamos instalar o NVM:&lt;/p&gt;

&lt;h4 id=&#34;curl-sl-https-raw-githubusercontent-com-creationix-nvm-v0-31-0-install-sh-7-o-install-nvm-sh&#34;&gt;&lt;em&gt;curl -sL&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh&#34;&gt;&lt;em&gt;https://raw.githubusercontent.com/creationix/nvm/&lt;/em&gt;&lt;strong&gt;&lt;em&gt;v0.31.0&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;/install.sh&lt;/em&gt;&lt;/a&gt; _-o install&lt;em&gt;nvm.sh&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;O número da versão que está em negrito pode mudar com o tempo, então recomendo você acessar a &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;página do projeto no GitHub&lt;/a&gt; e procurar pela nova versão.&lt;/p&gt;

&lt;p&gt;Execute o scrpit com:&lt;/p&gt;

&lt;h4 id=&#34;bash-install-nvm-sh&#34;&gt;_bash install&lt;em&gt;nvm.sh&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Não tenha medo, o que está sendo feito aqui é o download de um script e a execução do mesmo, tudo vai ser instalado em um diretório oculto na pasta do seu usuário &lt;strong&gt;não é necessário utilizar o comando com&lt;/strong&gt; &lt;em&gt;sudo&lt;/em&gt; &lt;strong&gt;nesse caso&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora execute:&lt;/p&gt;

&lt;h4 id=&#34;nvm-ls-remote&#34;&gt;&lt;em&gt;nvm ls-remote&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Ele vai te exibir várias versões do Node e assim sabemos que o NVM está funcionando corretamente. Eu escolhi a versão mais recente do momento a v7.3.0, você pode instalá-la digitando:&lt;/p&gt;

&lt;h4 id=&#34;nvm-install-7-3-0&#34;&gt;&lt;em&gt;nvm install 7.3.0&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Caso você instale mais de uma versão e no futuro tenha necessidade de alternar entre elas utilize o comando:&lt;/p&gt;

&lt;h4 id=&#34;nvm-use-número-da-versão&#34;&gt;&lt;em&gt;nvm use -número da versão-&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Agora vamos verificar a versão do Node para ter certeza que tudo foi instalado corretamente utilizando o comando:&lt;/p&gt;

&lt;h4 id=&#34;node-v&#34;&gt;&lt;em&gt;node -v&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Pronto, agora você já pode dar continuidade aos seus estudos de Angular ou Node.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando uma aplicação de Chat simples com NodeJS e Socket.io</title>
      <link>http://tableless.com.br/criando-uma-aplicacao-de-chat-simples-com-nodejs-e-socket-io/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-uma-aplicacao-de-chat-simples-com-nodejs-e-socket-io/</guid>
      <description>

&lt;p&gt;Neste tutorial iremos abordar alguns conceitos do Socket.io criando um simples sistema de chat para browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dericeira/Simple-Chat-Socket.io/master/example.gif&#34; alt=&#34;https://raw.githubusercontent.com/dericeira/Simple-Chat-Socket.io/master/example.gif&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-socket-io&#34;&gt;O que é Socket.io?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://socket.io&#34;&gt;Socket.io&lt;/a&gt; é um uma biblioteca Javascript feita para construir aplicações real-time, possibilitando uma comunicação bi-direcional entre cliente e servidor. O socket.io utiliza as especificações de Web Sockets (para quem quer saber mais, recomendo dar uma olhada &lt;a href=&#34;https://www.html5rocks.com/pt/tutorials/websockets/basics/&#34;&gt;neste ótimo artigo&lt;/a&gt; da HTML5 Rocks).&lt;/p&gt;

&lt;p&gt;O Socket.io roda, no lado do servidor, em NodeJS, e, no lado do cliente, ele roda diretamente no browser, possibilitando uma enorme gama de possibilidades de aplicações, como jogos, sistemas de notificações, real-time analytics e sistemas de chats e conversas em tempo real.&lt;/p&gt;

&lt;h2 id=&#34;setando-o-projeto&#34;&gt;Setando o projeto&lt;/h2&gt;

&lt;p&gt;Primeiramente, temos que instalar algumas bibliotecas que iremos utilizar no projeto, para isso usarei o &lt;a href=&#34;https://github.com/yarnpkg/yarn&#34;&gt;yarn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, vou adicionar ao projeto a biblioteca do Socket.io que rodará do lado do servidor.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add socketio&lt;/pre&gt;

&lt;p&gt;Também iremos utilizar o express:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add express&lt;/pre&gt;

&lt;p&gt;Também precisamos adicionar o Socket.io para o cliente (você pode utilizar a CDN oficial disponibilizada no site deles também):&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add socket.io-client&lt;/pre&gt;

&lt;p&gt;E, por último, usarei a biblioteca jQuery para manipular a DOM.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;yarn add jquery&lt;/pre&gt;

&lt;h2 id=&#34;fazendo-o-html-css&#34;&gt;Fazendo o HTML+CSS&lt;/h2&gt;

&lt;p&gt;Vamos criar um arquivo index.html e já deixar preparado o nosso template do sistema de chat.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;en&#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Simple chat&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;assets/css.css&#34;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&#34;nickname_container&#34; id=&#34;nick&#34;&amp;gt;

 &amp;lt;span&amp;gt;Type your nickname:&amp;lt;/span&amp;gt;
 &amp;lt;form id=&#34;submit&#34;&amp;gt;&amp;lt;input type=&#34;text&#34; id=&#34;nickname&#34; /&amp;gt;&amp;lt;/form&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div id=&#34;chat&#34; hidden&amp;gt;

 &amp;lt;div class=&#34;menu&#34; =&amp;gt;
 &amp;lt;div class=&#34;name&#34; id=&#34;name&#34;&amp;gt;Alex&amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;last&#34; id=&#34;time&#34;&amp;gt;18:09&amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;ol class=&#34;chat&#34;&amp;gt;
 
 &amp;lt;/ol&amp;gt;
 
 &amp;lt;input class=&#34;textarea&#34; type=&#34;text&#34; placeholder=&#34;Type here!&#34; id=&#34;textarea&#34; /&amp;gt;
&amp;lt;/div&amp;gt;
 &amp;lt;script src=&#34;node_modules/jquery/dist/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src=&#34;node_modules/socket.io-client/socket.io.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src=&#34;assets/js.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Repare que eu também criei o diretório assets, e criei os arquivos css.css e js.js.&lt;/p&gt;

&lt;p&gt;Não entrarei na parte do CSS, pois o foco aqui é o javascript, mas você pode ver o resultado no &lt;a href=&#34;https://github.com/dericeira/Simple-Chat-Socket.io/blob/master/assets/css.css&#34;&gt;github&lt;/a&gt;. Eu utilizei como base &lt;a href=&#34;https://codepen.io/Varo/pen/gbZzgr&#34;&gt;este pen&lt;/a&gt; para construir o layout.&lt;/p&gt;

&lt;h2 id=&#34;server-side&#34;&gt;Server-side&lt;/h2&gt;

&lt;p&gt;Vamos iniciar com a criação da parte de servidor do Socket.io, ou seja, iremos lidar com os eventos server-side.&lt;/p&gt;

&lt;p&gt;Iniciaremos criando um arquivo &lt;strong&gt;app.js&lt;/strong&gt; no diretório raíz e importaremos os módulos e faremos algumas operações iniciais:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var app = require(&#39;express&#39;)();
var http = require(&#39;http&#39;).Server(app);
var io = require(&#39;socket.io&#39;)(http);

var clients = {};

app.get(&#39;/&#39;, function(req, res){
res.send(&#39;server is running&#39;);
});

//SocketIO vem aqui

http.listen(3000, function(){
console.log(&#39;listening on port 3000&#39;);
});
&lt;/pre&gt;

&lt;p&gt;Este script implementa um servidor Node utilizando os módulos http e express (para roteamento).&lt;/p&gt;

&lt;p&gt;A variável clientes que está sendo criada servirá para armazenar nossa lista de clientes.&lt;/p&gt;

&lt;p&gt;Agora iremos adicionar o nosso primeiro evento do Socket.io, que será o &lt;strong&gt;connection&lt;/strong&gt;, que dispara a cada vez que um cliente se conecta ao socket.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;io.on(&#34;connection&#34;, function (client) {
    console.log(&#39;user connected&#39;);
});&lt;/pre&gt;

&lt;p&gt;Para nossa sala de chat, precisaremos implementar outros 3 eventos: &lt;strong&gt;join&lt;/strong&gt;, &lt;strong&gt;send&lt;/strong&gt; e &lt;strong&gt;disconnect&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;io.on(&#34;connection&#34;, function (client) {
  client.on(&#34;join&#34;, function(name){
    console.log(&#34;Joined: &#34; + name);
    clients[client.id] = name;
    client.emit(&#34;update&#34;, &#34;You have connected to the server.&#34;);
    client.broadcast.emit(&#34;update&#34;, name + &#34; has joined the server.&#34;)
  });

  client.on(&#34;send&#34;, function(msg){
    console.log(&#34;Message: &#34; + msg);
    client.broadcast.emit(&#34;chat&#34;, clients[client.id], msg);
  });

  client.on(&#34;disconnect&#34;, function(){
    console.log(&#34;Disconnect&#34;);
    io.emit(&#34;update&#34;, clients[client.id] + &#34; has left the server.&#34;);
    delete clients[client.id];
  });
});
&lt;/pre&gt;

&lt;p&gt;O evento join deverá ser disparado quando o cliente entrar no servidor, adicionando o id do cliente no array e emitindo dois novos eventos, nomeando-os de &lt;strong&gt;update&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note que há uma diferença entre o método &lt;strong&gt;client.emit&lt;/strong&gt; e o &lt;strong&gt;client.broadcast.emit&lt;/strong&gt;. O client.emit enviará a notificação somente para o cliente atual, ou seja, o cliente que acabou de entrar na sala de chat. O &lt;strong&gt;client.broadcast.emit&lt;/strong&gt; irá emitir para todos os clientes conectados, com exceção do que está executando a ação. Se utilizássemos o método &lt;strong&gt;io.emit&lt;/strong&gt;, a mensagem seria enviada a todos os clientes conectados ao socket. Abaixo uma série de exemplos de métodos disponíveis:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// enviar apenas para o cliente atual
client.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes, inclusive o atual
io.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes, exceto o atual
client.broadcast.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes (com exceção do atual) para uma sala específica
socket.broadcast.to(&#39;game&#39;).emit(&#39;message&#39;, &#39;nice game&#39;);

// enviar para todos os clientes em uma sala específica
io.in(&#39;game&#39;).emit(&#39;message&#39;, &#39;cool game&#39;);

// enviar para o atual, caso ele esteja na sala
client.to(&#39;game&#39;).emit(&#39;message&#39;, &#39;enjoy the game&#39;);

// enviar para todos os clientes em um namespace &#39;namespace1&#39;
io.of(&#39;namespace1&#39;).emit(&#39;message&#39;, &#39;gg&#39;);

// enviando para um socketid individual
client.broadcast.to(socketid).emit(&#39;message&#39;, &#39;for your eyes only&#39;);&lt;/pre&gt;

&lt;p&gt;Com todos esses métodos, conseguiríamos implementar salas específicas, mensagens individuais, etc. Porém nosso foco é mostrar a parte mais básica e entender o funcionamento.&lt;/p&gt;

&lt;h2 id=&#34;client-side&#34;&gt;Client-side&lt;/h2&gt;

&lt;p&gt;Com nosso servidor concluido e rodando, vamos passar para a parte de client-side de nossa aplicação de chat. Vamos ao &lt;strong&gt;js.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Primeiramente, inicializaremos o socket.io e criaremos uma variável &lt;strong&gt;ready&lt;/strong&gt;, setada como false. Esta variável será responsável por indicar se o usuário já informou ou não o seu nickname.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;$(document).ready(function(){
    var socket = io.connect(&#34;http://localhost:3000&#34;);
    var ready = false;
});
&lt;/pre&gt;

&lt;p&gt;Com esta implementação, já conseguimos disparar o evento &lt;strong&gt;connection&lt;/strong&gt; em nosso servidor. Porém, precisamos fazer com que o servidor receba a informação cada vez que um novo usuário entrar na sala informando o seu nickname.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#submit&#34;).submit(function(e) {
    e.preventDefault();
    $(&#34;#nick&#34;).fadeOut();
    $(&#34;#chat&#34;).fadeIn();
    var name = $(&#34;#nickname&#34;).val();
    var time = new Date();
    $(&#34;#name&#34;).html(name);
    $(&#34;#time&#34;).html(&#39;First login: &#39; + time.getHours() + &#39;:&#39; + time.getMinutes());

    ready = true;
    socket.emit(&#34;join&#34;, name);
});
&lt;/pre&gt;

&lt;p&gt;A função jQuery acima captura a submissão do formulário de nickname, fecha a tela de seleção de nick, mostra a tela de chat, seta a variável ready para true e executa um comando de socket, o &lt;strong&gt;socket.emit&lt;/strong&gt;, que informa para o nosso servidor que um novo usuário acabou de entrar na sala.&lt;/p&gt;

&lt;p&gt;Nada irá acontecer, pois ainda não temos o receptor do evento &lt;strong&gt;update&lt;/strong&gt;, que está sendo disparado no nosso servidor, então vamos criá-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;socket.on(&#34;update&#34;, function(msg) {
    if (ready) {
        $(&#39;.chat&#39;).append(&#39;&amp;lt;li class=&#34;info&#34;&amp;gt;&#39; + msg + &#39;&amp;lt;/li&amp;gt;&#39;)
    }
});
&lt;/pre&gt;

&lt;p&gt;Este código fará com que, a cada vez que o servidor emitir um update, o jQuery adicione uma nova linha no chat com a mensagem retornada.&lt;/p&gt;

&lt;p&gt;Agora, iremos fazer com que nossa aplicação envie as mensagens ao servidor a cada vez que o cliente apertar o enter no input de texto:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;$(&#34;#textarea&#34;).keypress(function(e){
    if(e.which == 13) {
         var text = $(&#34;#textarea&#34;).val();
         $(&#34;#textarea&#34;).val(&#39;&#39;);
         var time = new Date();
         $(&#34;.chat&#34;).append(&#39;&amp;lt;li class=&#34;self&#34;&amp;gt;&amp;lt;div class=&#34;msg&#34;&amp;gt;&amp;lt;span&amp;gt;&#39;
                      + $(&#34;#nickname&#34;).val() + &#39;:&amp;lt;/span&amp;gt;    &amp;lt;p&amp;gt;&#39; + text + &#39;&amp;lt;/p&amp;gt;&amp;lt;time&amp;gt;&#39; + 
                      time.getHours() + &#39;:&#39; + time.getMinutes() + &#39;&amp;lt;/time&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&#39;);
         socket.emit(&#34;send&#34;, text);
    }
});
&lt;/pre&gt;

&lt;p&gt;E, para concluir, precisamos fazer com que o socket.io observe todas as mensagens referente ao chat em si, e adicione à DOM:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;socket.on(&#34;chat&#34;, function(client,msg) {
 if (ready) {
    var time = new Date();
    $(&#34;.chat&#34;).append(&#39;&amp;lt;li class=&#34;other&#34;&amp;gt;&amp;lt;div class=&#34;msg&#34;&amp;gt;&amp;lt;span&amp;gt;&#39; + 
                 client + &#39;:&amp;lt;/span&amp;gt;&amp;lt;p&amp;gt;&#39; + msg + &#39;&amp;lt;/p&amp;gt;&amp;lt;time&amp;gt;&#39; + time.getHours() + &#39;:&#39; + 
                 time.getMinutes() + &#39;&amp;lt;/time&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&#39;);
 }
});&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Na minha opinião,  as sockets são uma das melhores funcionalidades do HTML5, e possuem uma infinidade de aplicação. O ganho de performance é espetacular se bem aplicado, uma vez que evita o uso de requisições HTTP em aplicações onde a necessidade de atualização é grande (baixa latência).&lt;/p&gt;

&lt;p&gt;Disponibilizei o código do tutorial no &lt;a href=&#34;https://github.com/dericeira/Simple-Chat-Socket.io&#34;&gt;github&lt;/a&gt; para quem se interessar, e estou aberto a tirar dúvidas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aplicativos Desktop com NW.js – Node Webkit – Introdução</title>
      <link>http://tableless.com.br/aplicativos-desktop-com-nw-js-node-webkit-introducao/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/aplicativos-desktop-com-nw-js-node-webkit-introducao/</guid>
      <description>

&lt;h1 id=&#34;este-é-o-primeiro-artigo-de-uma-série-que-vou-escrever-sobre-aplicações-desktop-usando-tecnologias-web-html-css-javascript-e-webgl&#34;&gt;&lt;em&gt;&lt;strong&gt;Este é o primeiro artigo de uma série que vou escrever sobre aplicações desktop usando tecnologias web. (HTML, CSS, Javascript e WebGL)&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é uma aplicação em tempo de execução baseado em Chromium e Node.js, com ele é possível desenvolver aplicativos nativos para Windows, Linux e Mac, usando tecnologias web e usufruindo dos pacotes do Node.js.&lt;/p&gt;

&lt;p&gt;Para ter uma ideia do que é possível fazer, visite este link e veja alguns aplicativos desenvolvidos com NW.js -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é um projeto criado pela Intel. Outro projeto muito bom e conhecido para desenvolver aplicativos desktop usando tecnologias web é o &lt;strong&gt;Electron&lt;/strong&gt;, criado pelo GitHub. Segue um link comparativo entre os dois -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa série de artigos, vou explicar como criar um aplicativo desktop, com ícone personalizado e empacotado em um único executável. No último artigo, vou explicar como fazer uma integração com base de dados local, em tempo real e sem a necessidade de abrir portas ou fazer configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A versão mais atual do NW.js no momento em que eu escrevo este artigo é a &lt;strong&gt;&lt;em&gt;nwjs-v0.15.3&lt;/em&gt;&lt;/strong&gt;, é esta que estou usando. Além disso, estou usando Windows como sistema operacional.&lt;/p&gt;

&lt;p&gt;Vamos começar com um &amp;#8220;Olá Mundo&amp;#8221;, porém, vou explicar alguns recursos de &amp;#8220;Window&amp;#8221; e as configurações para iniciar o projeto.&lt;/p&gt;

&lt;p&gt;Primeiro faça o download do NW.js no site &lt;a href=&#34;http://nwjs.io/&#34;&gt;http://nwjs.io/&lt;/a&gt; &amp;#8211; Para desenvolvimento, baixe a versão SDK &amp;#8211; descompacte os arquivos em uma pasta que seja fácil para acessar pelo &lt;em&gt;prompt&lt;/em&gt; de comando &amp;#8211; eu costumo descompactar na pasta _c:\nwjs_&lt;/p&gt;

&lt;p&gt;Para uma aplicação básica funcionar, precisamos apenas de dois arquivos, o &lt;em&gt;package.json&lt;/em&gt;, que contém as configurações da nossa aplicação e o &lt;em&gt;index.html&lt;/em&gt;, que contém o código da nossa aplicação. Depois vamos adicionar arquivos .js e .css. Neste primeiro artigo, vamos brincar um pouco com o package.json.&lt;/p&gt;

&lt;p&gt;Crie um novo arquivo index.html &amp;#8211; vamos adicionar uma estrutura básica de HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Meu Primeiro Projeto&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Olá Mundo.&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Crie um novo arquivo package.json, com o código abaixo e salve na mesma pasta do HTML:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;
}&lt;/pre&gt;

&lt;p&gt;Somente com essas informações no package.json você já pode testar seu &amp;#8220;Olá Mundo&amp;#8221;. &amp;#8220;&lt;em&gt;name&lt;/em&gt;&amp;#8221; é o nome do projeto, e &amp;#8220;&lt;em&gt;main&lt;/em&gt;&amp;#8221; é o arquivo inicial da aplicação, sua &amp;#8220;página inicial&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Para executar nosso aplicativo, abra o &lt;em&gt;prompt&lt;/em&gt; de comando e vá até a pasta do seu projeto, no meu caso &amp;#8220;c:\projetos\olamundo&amp;#8221;, depois vamos executar o comando para o NW.js executar nosso projeto. Como estou usando o Windows, vou apontar para o nw.exe. No Linux ou no Mac é diferente, você pode olhar na documentação. Então nosso comando ficaria assim:&lt;/p&gt;

&lt;pre&gt;cd /path/to/your/app
/path/to/nw .&lt;/pre&gt;

&lt;p&gt;No meu caso:&lt;/p&gt;

&lt;pre&gt;cd c:\projetos\olamundo
c:\nwjs\nw.exe .&lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-54795 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/olamundo01.png&#34; alt=&#34;Tela Olá Mundo NW.js&#34; width=&#34;966&#34; height=&#34;535&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mais-sobre-o-package-json&#34;&gt;Mais sobre o package.json&lt;/h2&gt;

&lt;p&gt;O nosso package.json está muito simples, tem apenas um nome e o caminho do arquivo index. Vou explicar um pouco sobre as configurações &amp;#8220;window&amp;#8221;, que servem para controlar os botões de fechar, minimizar, informar os tamanhos mínimos e máximos, se a janela pode ser dimensionada e outras configurações.&lt;/p&gt;

&lt;p&gt;Abra o seu arquivo package.json e deixe ele como o exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;,
 &#34;version&#34;: &#34;1.0&#34;,
 &#34;description&#34;: &#34;Olá Mundo&#34;,
 &#34;window&#34;: {
 &#34;width&#34;: 400,
 &#34;height&#34;: 300,
 &#34;resizable&#34;: false,
 &#34;frame&#34;: true,
 &#34;title&#34;: &#34;Olá Mundo&#34;,
 &#34;show&#34;: true,
 &#34;fullscreen&#34;: false,
 &#34;kiosk&#34;: false,
 &#34;icon&#34;: &#34;icon.png&#34;
 }
}
&lt;/pre&gt;

&lt;p&gt;Execute novamente o aplicativo e veja como ficou. Abaixo, explico cada uma das configurações usadas.&lt;/p&gt;

&lt;pre&gt;name -&amp;gt; Nome do projeto
main -&amp;gt; Arquivo inicial
version -&amp;gt; Versão
description -&amp;gt; Descrição do projeto
window:
 width -&amp;gt; Largura da janela
 height -&amp;gt; Altura da janela
 resizable -&amp;gt; Se o tamanho da janela pode ser alterado ou não
 frame -&amp;gt; Quadro que envolve a aplicação com o título, ícone, botões de fechar, minimizar e maximizar
 title -&amp;gt; Título da janela
 show -&amp;gt; Se estiver como false você executa o aplicativo e ele fica em modo silencioso, 
  está rodando, mas não aparece. Fica apenas como um processo no Windows.
 fullscreen -&amp;gt; executa em tela cheia
 kiosk -&amp;gt; Executa em tela cheia e dificulta a saída da aplicação, normalmente é usado para exposições.
 icon -&amp;gt; Caminho para o ícone (deve estar na mesma pasta do projeto)&lt;/pre&gt;

&lt;p&gt;Você pode ver mais opções e detalhes na documentação: &lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34;&gt;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repositório com os fontes do primeiro artigo: &lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34;&gt;https://bitbucket.org/jzonta/artigos_nwjs&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;próximos-artigos-8211-aplicativos-desktop-com-nw-js-8211-node-webkit&#34;&gt;Próximos artigos &amp;#8211; Aplicativos Desktop com NW.js &amp;#8211; Node Webkit&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;1º &amp;#8211; Introdução&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Uma breve introdução, fazer um &amp;#8220;Olá Mundo&amp;#8221; e aprender um pouco sobre as configurações iniciais.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2º &amp;#8211; Menus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fazer um menu nativo da aplicação e um menu HTML, capturar as ações do botão de minimizar e alterar para minimizar o aplicativo para o System Try (Aqueles ícones pequenos ao lado do relógio) e vamos adicionar menu de opções no System Try.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3º &amp;#8211; Pacotes Node e Persistência de dados&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vamos aprender como usar os pacotes do Node.js, vamos instalar um pacote para persistir informações em um banco de dados MySql e também em um arquivo local.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4º &amp;#8211; Preparando para produção&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Como empacotar sua aplicação em um executável e adicionar um ícone para o Windows.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5º &amp;#8211; Integração web com base de dados local&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como fazer uma integração de uma aplicação web com um banco de dados local, através de uma api REST, sem a necessidade de abertura de portas ou configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Poste suas dúvidas e sugestões nos comentários!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Alternativa de CMS com Keystone.js</title>
      <link>http://tableless.com.br/alternativa-de-cms-com-keystone-js/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/alternativa-de-cms-com-keystone-js/</guid>
      <description>

&lt;p&gt;Este é o primeiro artigo de uma série sobre o &lt;a href=&#34;http://keystonejs.com/&#34; target=&#34;_blank&#34;&gt;Keystone.js&lt;/a&gt;, um framework desenvolvido em Node.js para servir de CMS e também Web Application. Pra começarmos, será necessário nesse primeiro artigo um pouco de teoria, pra termos uma noção.&lt;/p&gt;

&lt;p&gt;Aos apressados, o link do repo está disponível no &lt;a href=&#34;https://github.com/victorkurauchi/post-keystone&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pra começar, não vou falar detalhadamente sobre sua descrição, pois no site deles está bem explicado, apenas um resumo sobre, e depois, quando formos iniciar o projeto, ficará mais claro.&lt;/p&gt;

&lt;p&gt;O Keystone.js utiliza o &lt;a href=&#34;http://expressjs.com/&#34; target=&#34;_blank&#34;&gt;Express&lt;/a&gt;, então para muitos a curva de aprendizado será bem pequena e é um ponto bom, pois a customização (quando necessária) será tranquila. Na interface admin, utilizam o &lt;a href=&#34;https://facebook.github.io/react/&#34; target=&#34;_blank&#34;&gt;React.js&lt;/a&gt;. Este framework me chamou muito a atenção pelo fato de agilizar MUITA coisa no desenvolvimento, e ao mesmo tempo não deixar o desenvolvedor sem saber o que ocorre por baixo dos panos, os módulos de rotas/models/views são bem organizados.&lt;/p&gt;

&lt;p&gt;Atualmente, a comunidade Keystone.js está trabalhando na próxima versão (0.4) que terá um rebuild da interface admin com o React e mais novidades.&lt;/p&gt;

&lt;p&gt;O projeto que faremos utilizará a versão 0.3.16&lt;/p&gt;

&lt;p&gt;A idéia nessa série é desenvolver um CMS (obviamente) onde vamos publicar posts, cadastro e listagem de produtos, e também customizar o Framework (é Javascript!) para termos uma API para posterior consumo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Showmethecode!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pré requisitos: &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; e &lt;a href=&#34;http://mongodb.org&#34; target=&#34;_blank&#34;&gt;Mongodb&lt;/a&gt;. No terminal, digite:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$npm install -g generator-keystone
    $mkdir projeto-keystone
    $cd projeto-keystone
    $yo keystone
    $node keystone
&lt;/pre&gt;

&lt;p&gt;Após a instalação via NPM, o generator fará algumas perguntas sobre as engines que deseja utilizar e informações sobre seu projeto (exemplo nome), esta parte fica a seu critério. Itens como template engine, pré-processor, taskers&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ornitorrinko.com/blog/wp-content/uploads/2016/03/Screen-Shot-2016-03-10-at-3.41.32-PM-300x156.png&#34; rel=&#34;attachment wp-att-254&#34;&gt;&lt;img class=&#34;alignnone wp-image-254 size-medium&#34; src=&#34;http://ornitorrinko.com/blog/wp-content/uploads/2016/03/Screen-Shot-2016-03-10-at-3.41.32-PM-300x156.png&#34; alt=&#34;Tela Instalação Keystone.JS&#34; width=&#34;300&#34; height=&#34;156&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora você já consegue navegar em &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; pra ter uma noção do que o framework estruturou para você. Nesse momento, repare que já temos um Blog e uma Galeria de imagens (utilizando uma conta temporária da &lt;a href=&#34;http://cloudinary.com/&#34; target=&#34;_blank&#34;&gt;Cloudinary&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Para acessar o admin, navegue em &lt;a href=&#34;http://localhost:3000/keystone&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://localhost:3000/keystone&#34;&gt;http://localhost:3000/keystone&lt;/a&gt;&lt;/a&gt; e informe usuário e senha que informou no generator (se não informou nada, é user: user@keystonejs.com pass: admin)&lt;/p&gt;

&lt;h2 id=&#34;um-pouco-sobre-as-models-e-rotas&#34;&gt;Um pouco sobre as models e rotas&lt;/h2&gt;

&lt;p&gt;Esta parte é uma mão na roda, dê um check na estrutura de &lt;em&gt;./models/Post.js&lt;/em&gt; e &lt;em&gt;./models/Gallery.js&lt;/em&gt; pra saber do que estamos tratando. O interessante, é que no momento de estruturar as models, você não precisa se preocupar em criar o formulário de cadastro/edição no adminUI (o Keystone.js faz isso conforme vc seta as propriedades da model).&lt;/p&gt;

&lt;p&gt;Já as rotas, ficam em &lt;em&gt;./routes/index.js&lt;/em&gt; para serem registradas. Possuímos o arquivo &lt;em&gt;./routes/middleware.js&lt;/em&gt; para interceptar e tratar as requests de acordo com a nossa necessidade (veremos mais adiante).&lt;/p&gt;

&lt;p&gt;Uma boa prática que adotamos aqui na Ornito é separar a pasta de rotas em &lt;em&gt;./routes/api/*&lt;/em&gt; e _./routes/views/*, onde, respectivamente, incluiremos os arquivos de API  retornardos de nosso JSON, e ServerViews, que vamos renderizar pela template engine (&lt;a href=&#34;http://jade-lang.com/&#34; target=&#34;_blank&#34;&gt;Jade&lt;/a&gt; foi a escolhida)._&lt;/p&gt;

&lt;h3 id=&#34;cadastro-de-produtos&#34;&gt;&lt;strong&gt;Cadastro de Produtos&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Ao subir o Keystone.js pela primeira vez, ele gerou as models de Post e Galeria para nós, por isso, não teremos muito trabalho nesta parte (já está pronto). Vamos agora focar no código para criação de produtos.&lt;/p&gt;

&lt;p&gt;Nosso fluxo de criação: definir Model, definir Rota, definir View.&lt;/p&gt;

&lt;p&gt;Vamos criar o arquivo ./models/Produto.js:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// models/Produto.js

var keystone = require(&#39;keystone&#39;);
var Types = keystone.Field.Types;

/**
 * Model Produto
 * ==========
 */

var Produto = new keystone.List(&#39;Produto&#39;, {
  map: { name: &#39;produto&#39; },
  autokey: { path: &#39;slug&#39;, from: &#39;produto&#39;, unique: true }
});

Produto.add({
  produto: { type: String, required: true },
  ativo: { type: Types.Boolean, initial: true, required: true },
  preco: { type: Types.Money, format: &#39;$0.0,00&#39;, label: &#39;Valor do produto&#39;, },
  descricao: {
    breve: { type: Types.Textarea, height: 150, label: &#34;Breve descrição&#34; },
    completa: { type: Types.Html, wysiwyg: true, height: 200, label: &#34;Descricao completa&#34; }
  },
  criadoEm: { type: Types.Date, index: true, default: new Date() },
  detalhes: { type: Types.TextArray },
  imagens: { type: Types.CloudinaryImages }
  
});

Produto.schema.virtual(&#39;descricao.full&#39;).get(function() {
  return this.descricao.completa || this.descricao.breve;
});

Produto.defaultColumns = &#39;produto, ativo, preco, criadoEm&#39;;
Produto.register();
&lt;/pre&gt;

&lt;p&gt;Já criamos a model, então podemos navegar pelo admin, e &lt;a href=&#34;http://localhost:3000/keystone/produtos&#34;&gt;http://localhost:3000/keystone&lt;/a&gt; nos levará para o cadastro de um produto. Preencha as informações do produto.&lt;/p&gt;

&lt;p&gt;Agora temos que configurar a rota em &lt;em&gt;./routes/views/produtos.js&lt;/em&gt; , &lt;em&gt;./routes/index.js&lt;/em&gt; e &lt;em&gt;./routes/middleware.js&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// routes/views/produtos.js
var keystone = require(&#39;keystone&#39;);

exports = module.exports = function(req, res) {
  
  var view = new keystone.View(req, res);
  var locals = res.locals;
  
  // Set locals
  locals.section = &#39;produtos&#39;;
  
  // Load the galleries by sortOrder
  view.query(&#39;produtos&#39;, keystone.list(&#39;Produto&#39;).model.find().sort(&#39;sortOrder&#39;));
  
  // Render the view
  view.render(&#39;produtos&#39;);
  
};
&lt;/pre&gt;

&lt;p&gt;A rota &lt;em&gt;views/produtos.js&lt;/em&gt; é a responsável por consultar nossa base no mongoDB e retornar os produtos existentes.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// routes/index.js
var keystone = require(&#39;keystone&#39;);
var middleware = require(&#39;./middleware&#39;);
var importRoutes = keystone.importer(__dirname);

// Common Middleware
keystone.pre(&#39;routes&#39;, middleware.initLocals);
keystone.pre(&#39;render&#39;, middleware.flashMessages);

// Import Route Controllers
var routes = {
  views: importRoutes(&#39;./views&#39;)
};

// Setup Route Bindings
exports = module.exports = function(app) {
  
  // Views
  app.get(&#39;/&#39;, routes.views.index);
  app.get(&#39;/blog/:category?&#39;, routes.views.blog);
  app.get(&#39;/blog/post/:post&#39;, routes.views.post);
  app.get(&#39;/gallery&#39;, routes.views.gallery);
  app.all(&#39;/contact&#39;, routes.views.contact);

  app.get(&#39;/produtos&#39;, routes.views.produtos);

};
&lt;/pre&gt;

&lt;p&gt;Em &lt;em&gt;routes/index.js&lt;/em&gt; registramos igual a um app comum em express com &lt;em&gt;app.get()&lt;/em&gt; e apontamos para nossa rota de produtos, a qual vamos consultar os produtos na base.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// routes/middleware.js
var _ = require(&#39;underscore&#39;);

/**
  Initialises the standard view locals
*/

exports.initLocals = function(req, res, next) {
  
  var locals = res.locals;
  
  locals.navLinks = [
    { label: &#39;Home&#39;,    key: &#39;home&#39;,    href: &#39;/&#39; },
    { label: &#39;Blog&#39;,    key: &#39;blog&#39;,    href: &#39;/blog&#39; },
    { label: &#39;Gallery&#39;,   key: &#39;gallery&#39;,   href: &#39;/gallery&#39; },
    { label: &#39;Contact&#39;,   key: &#39;contact&#39;,   href: &#39;/contact&#39; },
    { label: &#39;Produtos&#39;,    key: &#39;produtos&#39;,    href: &#39;/produtos&#39; }
  ];
  
  locals.user = req.user;
  
  next();
  
};

/**
  Fetches and clears the flashMessages before a view is rendered
*/

exports.flashMessages = function(req, res, next) {
  
  var flashMessages = {
    info: req.flash(&#39;info&#39;),
    success: req.flash(&#39;success&#39;),
    warning: req.flash(&#39;warning&#39;),
    error: req.flash(&#39;error&#39;)
  };
  
  res.locals.messages = _.any(flashMessages, function(msgs) { return msgs.length; }) ? flashMessages : false;
  
  next();
  
};

/**
  Prevents people from accessing protected pages when they&#39;re not signed in
 */

exports.requireUser = function(req, res, next) {
  
  if (!req.user) {
    req.flash(&#39;error&#39;, &#39;Please sign in to access this page.&#39;);
    res.redirect(&#39;/keystone/signin&#39;);
  } else {
    next();
  }
  
};
&lt;/pre&gt;

&lt;p&gt;Em &lt;em&gt;routes/middeware.js&lt;/em&gt; estamos apenas estruturando os &lt;em&gt;navLinks&lt;/em&gt; para exibirmos o link de produtos na home.&lt;/p&gt;

&lt;p&gt;E agora vamos exibir nossos produtos em &lt;em&gt;./templates/views/produtos.jade&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-jade&#34;&gt;//- templates/views/produtos.jade
extends ../layouts/default

block intro
  .container
    h1 Nossos produtos
  
block content
  .container
    if produtos.length
      each item in produtos
        h2= item.produto
          .pull-right.text-muted R$ #{item.preco}

        p= item.descricao.breve
        
        .row.gallery-images
          each image in item.imagens
            .col-xs-6.col-sm-4.col-md-3.gallery-image: img(src=image.limit(300,300)).img-rounded
    else
      h3.text-muted Ainda não temos produtos cadastrados 🙁

&lt;/pre&gt;

&lt;p&gt;Navegue em &lt;a href=&#34;http://localhost:3000/produtos&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://localhost:3000/produtos&#34;&gt;http://localhost:3000/produtos&lt;/a&gt;&lt;/a&gt; e verá o resultado 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ornitorrinko.com/blog/wp-content/uploads/2016/03/Screen-Shot-2016-03-11-at-6.10.11-PM-300x148.png&#34; rel=&#34;attachment wp-att-271&#34;&gt;&lt;img class=&#34;alignnone wp-image-271 size-medium&#34; src=&#34;http://ornitorrinko.com/blog/wp-content/uploads/2016/03/Screen-Shot-2016-03-11-at-6.10.11-PM-300x148.png&#34; alt=&#34;Página Nossos Produtos com Keystone.js&#34; width=&#34;300&#34; height=&#34;148&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Neste artigo não foi possível cobrir TODOS os detalhes do Keystone.js. Mas, se você se interessou pelo framework, vale dar uma olhada na &lt;a href=&#34;http://keystonejs.com/docs/getting-started/&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt; sobre tipos de dados, formatos, middlewares, serviços já integrados e tudo mais.&lt;/p&gt;

&lt;p&gt;Fiz aqui uma pequena imersão ao framework para mostrar o que ele pode fazer com pouco tempo e dedicação. No próximo artigo vamos ao detalhe do produto, e também começar com nossa API (para produtos e posts).&lt;/p&gt;

&lt;p&gt;Repo: &lt;a href=&#34;https://github.com/victorkurauchi/post-keystone&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/victorkurauchi/post-keystone&#34;&gt;https://github.com/victorkurauchi/post-keystone&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Até mais.&lt;/p&gt;

&lt;p&gt;@victorkurauchi&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Electron</title>
      <link>http://tableless.com.br/introducao-ao-electron/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-ao-electron/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-o-electron&#34;&gt;O que é o Electron&lt;/h2&gt;

&lt;p&gt;O Electron foi desenvolvido para permitir que o desenvolvimento de aplicações &lt;em&gt;desktop&lt;/em&gt; usando JavaScript, HTML e CSS fosse muito mais fácil. Criado pela equipe do &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;, ficou conhecido no começo como Atom Shell. O Electron foi criado usando tecnologias como o &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; e o Chromium, e atualmente roda em ambiente de produção de vários projetos, como o próprio &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Atom editor&lt;/a&gt; e outros, como o &lt;a href=&#34;https://slack.com/&#34; target=&#34;_blank&#34;&gt;Slack&lt;/a&gt; e o &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Visual Studio Code&lt;/a&gt;. Ele é um &lt;em&gt;framework&lt;/em&gt; bem simples de trabalhar e de rápida configuração, para construção de pequenas e grandes aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para todos que queiram se aventurar mais, ou já conhecem o Electron, a documentação completa é traduzida para vários idiomas, inclusive o português. Para acessá-la é só &lt;a href=&#34;https://github.com/atom/electron/tree/master/docs-translations/pt-BR&#34; target=&#34;_blank&#34;&gt;clicar aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mãos-à-obra&#34;&gt;Mãos à obra&lt;/h2&gt;

&lt;p&gt;Nesta Introdução iremos abordar os primeiros passos para começar a trabalhar com o Electron e desenvolver aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Além do &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; presente em sua máquina, é necessário que você também instale globalmente o pacote &lt;code&gt;electron-prebuilt&lt;/code&gt;. Para isto, basta digitar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;language-bash&#34;&gt;npm install -g electron-prebuilt&lt;/pre&gt;

&lt;h3 id=&#34;entendendo-a-estrutura&#34;&gt;Entendendo a estrutura&lt;/h3&gt;

&lt;p&gt;A estrutura básica de arquivos que usaremos aqui é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;language-text&#34;&gt;electron-app/
├── app 
    ├── assets
        └── css
            └── main.css
    ├── main.js
    ├── index.html
    └── package.json
├── Gulpfile.js
└── package.json
&lt;/pre&gt;

&lt;p&gt;Vamos falar um pouco de cada arquivo e pasta inseridos no exemplo acima:&lt;/p&gt;

&lt;h4 id=&#34;app&#34;&gt;app&lt;/h4&gt;

&lt;p&gt;É  a pasta onde todos os arquivos referentes à aplicação são inseridos.&lt;/p&gt;

&lt;h4 id=&#34;main-js&#34;&gt;main.js&lt;/h4&gt;

&lt;p&gt;É o arquivo de inicialização da aplicação. Nele vão as configurações do tipo: tamanho da tela, posicionamento, manipular eventos do sistema, etc&amp;#8230;&lt;/p&gt;

&lt;h4 id=&#34;index-html&#34;&gt;index.html&lt;/h4&gt;

&lt;p&gt;É a pagina HTML que será nossa &lt;em&gt;view&lt;/em&gt; inicial para essa introdução.&lt;/p&gt;

&lt;h4 id=&#34;app-package-json&#34;&gt;app/package.json&lt;/h4&gt;

&lt;p&gt;O arquivo &lt;code&gt;package.json&lt;/code&gt; que vai dentro da pasta &lt;em&gt;app&lt;/em&gt; é o arquivo que leva todos as dependências que sua aplicação precisará para rodar. Sendo assim, qualquer pacote _npm_ a ser usado diretamente por sua aplicação deverá ser instalado nesse &lt;em&gt;package&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;gulpfile-js&#34;&gt;Gulpfile.js&lt;/h4&gt;

&lt;p&gt;Optei usar &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt; por escolha própria mesmo, mas fiquem livres para escolher seu &lt;em&gt;&amp;#8220;task runner&amp;#8221;&lt;/em&gt; favorito.&lt;/p&gt;

&lt;h4 id=&#34;package-json&#34;&gt;package.json&lt;/h4&gt;

&lt;p&gt;O &lt;code&gt;package.json&lt;/code&gt; que fica na raiz do seu projeto é responsável pelas configurações, dependências para seu ambiente de desenvolvimento. Tudo que for incluso neste arquivo não estará presente na &lt;em&gt;build&lt;/em&gt; de produção da sua &lt;em&gt;app&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;declarando-as-dependências&#34;&gt;Declarando as dependências&lt;/h3&gt;

&lt;p&gt;Após criar a estrutura de pastas que foi citada no tópico anterior. Iremos atribuir os mesmos valores para os atributos de ambos &lt;code&gt;package.json&lt;/code&gt; presentes no projeto. Levando em consideração que &lt;code&gt;&amp;quot;your-app&amp;quot;&lt;/code&gt; será o nome da sua aplicação.&lt;/p&gt;

&lt;pre class=&#34;language-json&#34;&gt;{
  &#34;name&#34;    : &#34;olamundo&#34;,
  &#34;version&#34; : &#34;0.1.0&#34;,
  &#34;main&#34;    : &#34;main.js&#34;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Caso o campo main não tenha sido preenchido, o Electron automaticamente procurará pelo arquivo &lt;code&gt;index.js&lt;/code&gt;. É importante que preencha este campo com o arquivo que usará na inicialização da aplicação.&lt;/p&gt;

&lt;p&gt;Após feito isso, instale as dependências que utilizaremos nesta introdução, no arquivo &lt;code&gt;package.json&lt;/code&gt; que se encontra diretamente na raiz do seu projeto.&lt;/p&gt;

&lt;pre class=&#34; language-bash&#34;&gt;npm install --save-dev electron-prebuilt fs-jetpack asar rcedit Q
&lt;/pre&gt;

&lt;h3 id=&#34;criando-seu-arquivo-de-inicialização&#34;&gt;Criando seu arquivo de inicialização&lt;/h3&gt;

&lt;p&gt;Depois de configurar as pastas e instalar as dependências da nossa aplicação, vamos abrir o nosso arquivo &lt;code&gt;main.js&lt;/code&gt; . Nele vamos incluir todo o código de configuração:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;var app = require(&#39;app&#39;);
var BrowserWindow = require(&#39;browser-window&#39;);

require(&#39;crash-reporter&#39;).start();

var mainWindow = null;

app.on(&#39;window-all-closed&#39;, function() {
  
  if (process.platform != &#39;darwin&#39;) {
    app.quit();
  }

});

app.on(&#39;ready&#39;, function() {
  
  mainWindow = new BrowserWindow({width: 800, height: 600});
  
  mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;);
  
  mainWindow.openDevTools();
  
  mainWindow.on(&#39;closed&#39;, function() {
    
    mainWindow = null;
  });
}); 
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: a Função &lt;em&gt;mainWindow.openDevTools&lt;/em&gt; é chamada apenas para iniciar o &lt;em&gt;Inspetor de Elementos&lt;/em&gt; junto com a aplicação. Caso não precisem, fiquem à vontade para removê-la do seu projeto.&lt;/p&gt;

&lt;h3 id=&#34;primeira-view&#34;&gt;Primeira &lt;em&gt;view&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Finalmente a parte mais fácil. Note que em nosso arquivo &lt;code&gt;main.js&lt;/code&gt; existe a seguinte função:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;); 
&lt;/pre&gt;

&lt;p&gt;Ela será responsável por carregar o arquivo &lt;code&gt;index.html&lt;/code&gt;. No exemplo a seguir, criei um exemplo bem simples de um arquivo HTML. Esta página que foi criada, tem os mesmos aspectos de uma janela aberta de um navegador. Ou seja, podemos carregar todos os arquivos CSS e JavaScript que utilizaremos normalmente. Veja:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
      &amp;lt;meta charset=&#34;utf-8&#34; /&amp;gt;
      &amp;lt;title&amp;gt;Olá Mundo&amp;lt;/title&amp;gt;
      &amp;lt;link href=&#34;assets/css/main.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;Olá Mundo&amp;lt;/h1&amp;gt;
      
      &amp;lt;p&amp;gt;Bem vindos à nossa introdução ao Electron&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
  
  &lt;h2 id=&#34;run-your-app&#34;&gt;
    Rodando sua aplicação
  &lt;/h2&gt;
  
  &lt;h3&gt;
    electron-prebuilt
  &lt;/h3&gt;
  
  &lt;p&gt;
    Se você instalou o &lt;code&gt;electron-prebuilt&lt;/code&gt; global, Acesse a pasta &lt;strong&gt;app&lt;/strong&gt; e rode o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;electron app&lt;/pre&gt;
  
  &lt;p&gt;
    Caso tenha instalado apenas localmente, então, na pasta &lt;strong&gt;app&lt;/strong&gt; de seu projeto, digite o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;&#34;../node_modules/.bin/electron&#34; &#34;./app&#34;&lt;/pre&gt;
  
  &lt;h3&gt;
    Automatizando
  &lt;/h3&gt;
  
  &lt;p&gt;
    Como citei anteriormente, usaremos o &lt;em&gt;Gulp&lt;/em&gt; para automatizar o &lt;em&gt;run&lt;/em&gt; da nossa aplicação, facilitando assim a criação de testes e o próprio desenvolvimento da aplicação. Para isso, deixaremos nosso &lt;code&gt;Gulpfile.js&lt;/code&gt; da seguinte maneira:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;),
  childProcess = require(&#39;child_process&#39;),
  electron = require(&#39;electron-prebuilt&#39;);
  
gulp.task(&#39;run&#39;, function () {
  childProcess.spawn(electron, [&#39;./app&#39;], { stdio: &#39;inherit&#39; });
});
&lt;/pre&gt;
  
  &lt;p&gt;
    Feito isso basta rodar o seguinte comando em seu terminal:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;gulp run&lt;/pre&gt;
  
  &lt;h2&gt;
    Criando uma distribuição
  &lt;/h2&gt;
  
  &lt;p&gt;
    Depois de terminado todo o processo de desenvolvimento, você pode criar uma distribuição do seu &lt;em&gt;app&lt;/em&gt; seguindo as instruções do &lt;a href=&#34;http://electron.atom.io/docs/v0.33.0/tutorial/application-distribution&#34; target=&#34;_blank&#34;&gt;Application Distribution guide&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Pronto! Você está pronto(a) para desenvolver aplicações Desktop com o Electron.
  &lt;/p&gt;
  
  &lt;p&gt;
    E caso queiram, o projeto está disponível no &lt;a href=&#34;https://github.com/henriquesosa/electron-intro&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Teste automatizado de API com frisby e jasmine</title>
      <link>http://tableless.com.br/teste-automatizado-de-api-com-frisby-e-jasmine/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/teste-automatizado-de-api-com-frisby-e-jasmine/</guid>
      <description>

&lt;p&gt;O &lt;a href=&#34;http://frisbyjs.com/&#34;&gt;Frisby&lt;/a&gt; é um framework para teste de API REST que roda em cima do nodejs. Seu principal apelo é a facilidade em se fazer testes automatizados de API com o apoio do framework de teste BDD jasmine.&lt;/p&gt;

&lt;h3 id=&#34;instalação&#34;&gt;Instalação:&lt;/h3&gt;

&lt;p&gt;Pré requisitos: nodejs, npm.&lt;/p&gt;

&lt;p&gt;1) jasmine-node. Instalação global.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sudo npm install -g jasmine-node&lt;/pre&gt;

&lt;p&gt;2) frisby. Instalação local no projeto.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sudo nam install --save-dev frisby&lt;/pre&gt;

&lt;h3 id=&#34;hello-world&#34;&gt;Hello, World!&lt;/h3&gt;

&lt;p&gt;Para o uso devemos instanciar seu módulo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;var frisby = require (&#39;frisby&#39;);&lt;/pre&gt;

&lt;p&gt;No seu uso mais básico, passamos como parâmetro a url a ser chamada e a resposta esperada.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;frisby.create(&#39;Teste BDD&#39;).get(&#39;http://www.teste.com/pessoa/1&#39;).expectStatus(200).toss();&lt;/pre&gt;

&lt;p&gt;Com o comando acima, estamos testando a API sendo que seu sucesso depende do código de retorno HTTP 200.&lt;/p&gt;

&lt;p&gt;Por convenção devemos salvar este arquivo de teste com o sufixo &amp;#8216;-spec.js&amp;#8217;. Ex: &amp;#8216;pessoa-spec.js&amp;#8217;&lt;/p&gt;

&lt;p&gt;Para execução do teste e para que o mesmo gere relatório no formato &amp;#8216;junitreport&amp;#8217; devemos executar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;jasmine-node pessoa-spec.js --junitreport --output specTestReportJasmine&lt;/pre&gt;

&lt;p&gt;Na prática apontamos para um pasta de teste para que todos sejam executados. Ex:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;jasmine-node spec/ --junitreport --output specTestReportJasmine&lt;/pre&gt;

&lt;p&gt;Já temos o essencial para integração do teste de api com alguma ferramenta de CI como o Jenkins(&lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;https://jenkins-ci.org/&lt;/a&gt;) com relatório padronizado.&lt;/p&gt;

&lt;h3 id=&#34;hello-universe&#34;&gt;Hello, Universe!&lt;/h3&gt;

&lt;p&gt;O framework oferece alguns recursos interessantes e de fácil implementação para testar a resposta da API REST.&lt;/p&gt;

&lt;p&gt;1) Testar se a resposta HTTP contém um cabeçalho específico.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;frisby.create(&#39;Teste BDD&#39;).get(&#39;http://www.teste.com/pessoa/1&#39;)
   .expectStatus(200)
   .expectHeaderContains(&#39;Content-Type&#39;, &#39;json&#39;)
   .toss();

&lt;/pre&gt;

&lt;p&gt;2) Testar se a resposta HTTP contém um objeto com um conteúdo específico.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;frisby.create(&#39;Teste BDD&#39;).get(&#39;http://www.teste.com/pessoa/1&#39;)
   .expectStatus(200)
   .expectHeaderContains(&#39;Content-Type&#39;, &#39;json&#39;)
   .expectJSON({codigo:1,nome:&#34;fulano&#34;})
   .toss();&lt;/pre&gt;

&lt;p&gt;3) Testar se a resposta HTTP contém um objeto com um tipo específico.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;frisby.create(&#39;Teste BDD&#39;).get(&#39;http://www.teste.com/pessoa/1&#39;)
   .expectStatus(200)
   .expectHeaderContains(&#39;Content-Type&#39;, &#39;json&#39;)
   .expectJSONTypes({codigo: Number})
   .toss();&lt;/pre&gt;

&lt;p&gt;4) Realizar um teste que depende da conclusão de um teste anterior.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;frisby.create(&#39;Teste BDD&#39;).get(&#39;http://www.teste.com/pessoa/1&#39;)
   .expectStatus(200)
   .expectHeaderContains(&#39;Content-Type&#39;, &#39;json&#39;)
   .expectJSONTypes({codigo: Number})
   .after(function(){
      frisby.create(&#39;Teste BDD&#39;).delete(&#39;http://www.teste.com/pessoa/1&#39;).expectStatus(200).toss();
   })
   .toss();&lt;/pre&gt;

&lt;p&gt;No teste acima, caso tenha sucesso ao obter informações de uma pessoa será feito um teste da exclusão da mesma.&lt;/p&gt;

&lt;h4 id=&#34;integração-com-gulp-projetos-em-nodejs&#34;&gt;Integração com GULP(Projetos em nodejs)&lt;/h4&gt;

&lt;p&gt;Quando a aplicação backend é feita em nodejs é interessante configurar o gulpjs(&lt;a href=&#34;http://gulpjs.com/&#34;&gt;http://gulpjs.com/&lt;/a&gt;) para o gerenciamento dos testes. No exemplo abaixo o gulp é configurado para iniciar a aplicação backend, disparar os testes e finalizar a aplicação:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;gulp.task(&#39;spec&#39;, function() {
   var jasmine = spawn(&#39;jasmine-node&#39;, [&#39;spec/&#39;,&#39;--junitreport&#39;,&#39;--output&#39;,&#39;specTestReportJasmine&#39;]);
   var serverApp = require(&#39;./server&#39;);
   var resumeText = &#34;&#34;;
 
   serverApp.init(8082);
 
   jasmine.stdout.on(&#39;data&#39;, function (data) {
      var texto = data.toString().trim();
      resumeText += texto;
   });
   jasmine.stderr.on(&#39;data&#39;, function (data) {
      console.log(&#39;erro: &#39; + data);
   });
   jasmine.on(&#39;close&#39;, function (code) {
      console.log(&#39;*********************\n&#39; + resumeText);
      serverApp.close();
      process.exit();
   });
});&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Raspagem de dados com Node.js</title>
      <link>http://tableless.com.br/raspagem-de-dados-com-node-js/</link>
      <pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/raspagem-de-dados-com-node-js/</guid>
      <description>

&lt;p&gt;Raspagem de dados, ou &lt;em&gt;Web scraping&lt;/em&gt;, é uma técnica de extração de dados onde é possível recuperar informações de websites.&lt;/p&gt;

&lt;p&gt;Existem diversas maneiras de fazer raspagem de dados: pode ser feito manualmente copiando e colando, utilizando uma ferramenta online, usando uma extensão para o navegador Google Chrome (como o &lt;a href=&#34;https://chrome.google.com/webstore/detail/web-scraper/jnhgnonknehpejjnehehllkliplmbmhn&#34; target=&#34;_blank&#34;&gt;Webscrapper&lt;/a&gt;), etc. Neste artigo será mostrado um passo-a-passo de como fazer raspagem de dados no site Portal da Transparência. O site &lt;a href=&#34;http://www.portaldatransparencia.gov.br/&#34; target=&#34;_blank&#34;&gt;Portal da Transparência&lt;/a&gt; é mantido pelo Tribunal de Contas da União, órgão que fiscaliza as contas do governo. Informações de gastos com aquisição e contratação de obras e compras governamentais, diárias pagas, cartões de pagamento do Governo Federal, entre outras são exemplos que podem ser encontrado.&lt;/p&gt;

&lt;p&gt;Para fazer a aplicação raspar dados, usaremos as seguintes ferramentas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nodejs.org/&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://expressjs.com/&#34; target=&#34;_blank&#34;&gt;Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/request/request&#34; target=&#34;_blank&#34;&gt;Request&lt;/a&gt; &amp;#8211; Para fazer chamadas HTTP&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cheeriojs/cheerio&#34; target=&#34;_blank&#34;&gt;Cheerio&lt;/a&gt; &amp;#8211; Para acessar o DOM externo e extrair os dados&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuração&#34;&gt;Configuração&lt;/h2&gt;

&lt;p&gt;Primeiro devemos configurar as dependências necessárias no arquivo package.json:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{
{
    &#34;name&#34;: &#34;node-scrap-govbr&#34;,
    &#34;repository&#34;: {
        &#34;type&#34;: &#34;git&#34;,
        &#34;url&#34;: &#34;git://github.com/rennan/node-scrap-govbr.git&#34;
    },
    &#34;version&#34;: &#34;0.0.1&#34;,
    &#34;description&#34;: &#34;Exemplo simples de raspagem de dados em um site do Governo Federal Brasileiro com Node.js.&#34;,
    &#34;main&#34;: &#34;server.js&#34;,
    &#34;author&#34;: &#34;Rennan Martini &#34;,
    &#34;license&#34;: &#34;MIT&#34;,
    &#34;dependencies&#34;: {
        &#34;express&#34;: &#34;latest&#34;,
        &#34;request&#34;: &#34;latest&#34;,
        &#34;cheerio&#34;: &#34;latest&#34;
    }
}
&lt;/pre&gt;

&lt;p&gt;Com o arquivo &lt;strong&gt;package.json&lt;/strong&gt; pronto, é só instalar as dependências com o comando &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora que as dependências foram instaladas, iremos definir o que deve ser criado. Neste exemplo, iremos fazer uma requisição na página de &lt;a href=&#34;http://www.portaldatransparencia.gov.br/PortalComprasDiretasOEOrgaoSuperior.asp?Ano=2015&amp;Valor=86726995548647&amp;Pagina=1&#34; target=&#34;_blank&#34;&gt;Gastos Diretos por Órgão Executor&lt;/a&gt;. Nesta página teremos acesso aos gastos que o governo teve em 2015, separado por Ministério. Uma vez que tivermos acesso a estas informações, podemos escolher o que salvar em um arquivo JSON no computador.&lt;/p&gt;

&lt;h2 id=&#34;a-aplicação&#34;&gt;A aplicação&lt;/h2&gt;

&lt;p&gt;O resumo da raspagem de dados funcionará da seguinte forma:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Nossa app vai fazer uma requisição a URL que iremos raspar&lt;/li&gt;
&lt;li&gt;A requisição irá capturar o HTML da página e fornecer ele para o nosso server&lt;/li&gt;
&lt;li&gt;Pelo server, iremos acessar o DOM e extrair as informações específicas (no caso a tabela de gastos)&lt;/li&gt;
&lt;li&gt;Em seguida, nossa app vai criar um arquivo .json com os dados extraídos e salvar na pasta do projeto.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Toda a a estrutura lógica ficará em um arquivo &lt;strong&gt;server.js&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var express = require(&#39;express&#39;),
    fs = require(&#39;fs&#39;),
    request = require(&#39;request&#39;),
    cheerio = require(&#39;cheerio&#39;),
    app = express();

// Passo 1
app.get(&#39;/raspagem&#39;, function(req, res) {
    ...
})

app.listen(&#39;8081&#39;)
console.log(&#39;Executando raspagem de dados na porta 8081...&#39;);
exports = module.exports = app;
&lt;/pre&gt;

&lt;h2 id=&#34;fazendo-a-requisição&#34;&gt;Fazendo a requisição&lt;/h2&gt;

&lt;p&gt;A requisição externa deve ser realizada dentro do escopo do método &lt;code&gt;app.get()&lt;/code&gt; através da função &lt;code&gt;&amp;lt;b&amp;gt;request()&amp;lt;/b&amp;gt;&lt;/code&gt;. O método &lt;code&gt;request&lt;/code&gt; deve receber dois parâmetros: a &lt;code&gt;url&lt;/code&gt; e o &lt;code&gt;callback&lt;/code&gt;. No parâmetro &lt;code&gt;url&lt;/code&gt; colocamos a página do Portal da Transparência e no &lt;code&gt;callback&lt;/code&gt; iremos declarar três novos parâmetros: &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;response&lt;/code&gt; e o &lt;code&gt;html&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;app.get(&#39;/raspagem&#39;, function(req, res) {
    // Passo 2
    url = &#39;http://www.portaldatransparencia.gov.br/PortalComprasDiretasOEOrgaoSuperior.asp?Ano=2015&amp;Valor=86726995548647&amp;Pagina=1&#39;;
    request(url, function(error, response, html) {
        ...
    })
})
&lt;/pre&gt;

&lt;h2 id=&#34;acessando-o-dom-da-url-externa&#34;&gt;Acessando o DOM da URL externa&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/DOM.gif&#34; alt=&#34;DOM&#34; width=&#34;1104&#34; height=&#34;1040&#34; class=&#34;alignleft size-full wp-image-50467&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Inspecionamos o código-fonte para ver o seletor da tabela que iremos fazer a raspagem. O cheerio é uma biblioteca que nos dá permissão de manipular facilmente o DOM dos elementos da url. Se você já utilizou jQuery, está familiarizado com a estrutura dos seletores. Depois de encontrar o seletor, iremos manipular os elementos filhos da &lt;code&gt;div#listagem&lt;/code&gt;, no caso a tabela.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;...
// Assegurar que não tenha erros para fazer a raspagem de dados com sucesso
if (!error) {
    var $ = cheerio.load(html);

    // Objeto que irá armazenar a tabela
    var resultado = [];

    // Passo 3
    // Manipulando o seletor específico para montar nossa estrutura
    // Escolhi não selecionar a primeira linha porque faz parte do header da tabela
    $(&#39;#listagem tr:not(:first-child)&#39;).each(function(i) {
        // Obtendo as propriedades da tabela. 
        // O método .trim() garante que irá remover espaço em branco
        var codigo = $(this).find(&#39;td&#39;).eq(0).text().trim(),
            orgao = $(this).find(&#39;td&#39;).eq(1).text().trim(),
            valorTotal = $(this).find(&#39;td&#39;).eq(2).text().trim();
        
        // Inserindo os dados obtidos no nosso objeto
        resultado.push({
            codigo: codigo,
            orgao: orgao,
            total: valorTotal
        });
    });
}
&lt;/pre&gt;

&lt;h2 id=&#34;formatando-e-extraindo&#34;&gt;Formatando e Extraindo&lt;/h2&gt;

&lt;p&gt;Nós armazenamos os dados extraídos em uma variável chamada &lt;code&gt;resultado&lt;/code&gt;. Agora é necessário colocar as mãos na API do NodeJS chamada &lt;strong&gt;Fyle System&lt;/strong&gt;. Esta biblioteca nos dá acesso pra várias coisas legais, dentre elas a possibilidade de &lt;a href=&#34;escrever arquivos&#34; target=&#34;_blank&#34;&gt;escrever arquivos&lt;/a&gt;. No método &lt;code&gt;writeFile()&lt;/code&gt; passaremos dois parâmetros: o &lt;strong&gt;arquivo .json&lt;/strong&gt; que será gerado e o &lt;strong&gt;objeto&lt;/strong&gt; que será exportado neste arquivo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// Passo 4
fs.writeFile(&#39;resultado.json&#39;, JSON.stringify(resultado, null, 4), function(err) {
    console.log(&#39;JSON escrito com sucesso! O arquivo está na raiz do projeto.&#39;)
})
&lt;/pre&gt;

&lt;p&gt;Assim, quando executarmos o comando &lt;code&gt;node server.js&lt;/code&gt; no terminal a nossa aplicação irá fazer a raspagem na URL e gerar o arquivo &lt;strong&gt;resultado.json&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/resultado.json_.png&#34; alt=&#34;resultado.json&#34; width=&#34;1110&#34; height=&#34;974&#34; class=&#34;alignleft size-full wp-image-50472&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;validando&#34;&gt;Validando&lt;/h2&gt;

&lt;p&gt;É sempre importante validar o que você está fazendo. Podemos verificar se o nosso arquivo .json é válido com a ferramenta &lt;a href=&#34;http://jsonlint.com/&#34; target=&#34;_blank&#34;&gt;JSONLint&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/valid_json.png&#34; alt=&#34;valid_json&#34; width=&#34;961&#34; height=&#34;631&#34; class=&#34;alignleft size-full wp-image-50473&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;considerações-finais&#34;&gt;Considerações finais&lt;/h2&gt;

&lt;p&gt;Vimos neste exemplo que o processo de raspagem de dados pode ser bem simples, porém é uma técnica poderosa que aliada a outros serviços é possível construir ótimas aplicações. O código completo utilizado como exemplo neste post está versionado no &lt;a href=&#34;https://github.com/rennan/node-scrap-govbr/&#34; target=&#34;_blank&#34;&gt;GitHub do autor&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;porquê-escolhi-um-site-do-governo&#34;&gt;Porquê escolhi um site do governo&lt;/h3&gt;

&lt;p&gt;Decidi escolher um site do governo porquê trata-se de um Portal com todas informações disponíveis ao cidadão, que por uma série de fatores acaba passando despercebido. É importante evidenciar que o Governo incentiva o manuseio de suas informações com &lt;a href=&#34;http://dados.gov.br/dados-abertos/&#34; target=&#34;_blank&#34;&gt;dados abertos&lt;/a&gt;. Para se ter uma noção sobre esta iniciativa, existem &lt;a href=&#34;http://br.okfn.org/projetos/&#34; target=&#34;_blank&#34;&gt;diversos projetos&lt;/a&gt; que trabalham com os dados governamentais, através de raspagem e bots automatizadores de tarefas. O &lt;a href=&#34;http://databr.io/&#34;&gt;DataBR&lt;/a&gt;, por exemplo, é um conjunto de API&amp;#8217;s que possibilita desenvolvedores, jornalistas, analistas e demais interessados, trabalhar com dados governamentais brasileiros.&lt;/p&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  ***
&lt;/p&gt;

&lt;p&gt;Espero que tenha aproveitado a leitura.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como publicar aplicação NodeJS no Heroku</title>
      <link>http://tableless.com.br/como-publicar-aplicacao-nodejs-heroku/</link>
      <pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-publicar-aplicacao-nodejs-heroku/</guid>
      <description>&lt;p&gt;O código da aplicação de exemplo está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/69153705256f6a9a4557&#34; title=&#34;gist&#34;&gt;gist&lt;/a&gt;, para baixá-lo digite o comando:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-sh&#34;&gt;git clone gist@gist.github.com:69153705256f6a9a4557.git minhas-midias-sociais&lt;/pre&gt;

&lt;p&gt;Dentro da pasta &lt;strong&gt;&lt;em&gt;minhas midias sociais&lt;/em&gt;&lt;/strong&gt;, o arquivo _&lt;a href=&#34;https://gist.github.com/igorlima/69153705256f6a9a4557#file-index-html&#34; rel=&#34;noreferrer&#34;&gt;index.html&lt;/a&gt;_ pode ser aberto utilizando qualquer navegador. Como são arquivos estáticos, será possível visualizar a aplicação web normalmente.&lt;/p&gt;

&lt;p&gt;Para rodar esse pequeno projeto no serviço de cloud, será preciso criar um servidor para tal. Nesse caso, vamos usar o &lt;a href=&#34;http://expressjs.com/&#34; rel=&#34;noreferrer&#34;&gt;Express&lt;/a&gt;, framework para &lt;a href=&#34;http://nodejs.org/&#34; rel=&#34;noreferrer&#34;&gt;NodeJS&lt;/a&gt; inspirado no &lt;a href=&#34;http://www.sinatrarb.com/&#34; title=&#34;sinatra&#34;&gt;Sinatra&lt;/a&gt;. O código está no arquivo &lt;em&gt;&lt;a href=&#34;https://gist.github.com/igorlima/69153705256f6a9a4557#file-server-js&#34; rel=&#34;noreferrer&#34;&gt;server.js&lt;/a&gt;&lt;/em&gt;. Para rodá-lo execute:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-sh&#34;&gt;npm install
node server.js&lt;/pre&gt;

&lt;p&gt;Para confirmar que tudo está funcionando como o esperado, acesse o endereço &lt;code&gt;http://localhost:5000&lt;/code&gt; e pingo, já temos uma aplicação NodeJS para ser hospedada na nuvem.&lt;/p&gt;

&lt;p&gt;Agora, vá ao site Heroku e faça os seguintes passos: (i) se &lt;a href=&#34;https://id.heroku.com/signup/www-home-top&#34; rel=&#34;noreferrer&#34;&gt;cadastre&lt;/a&gt;, (ii) &lt;a href=&#34;https://dashboard.heroku.com/apps&#34; rel=&#34;noreferrer&#34;&gt;crie uma aplicação&lt;/a&gt; e (iii) carregue sua chave pública ssh na &lt;a href=&#34;https://dashboard.heroku.com/account&#34; rel=&#34;noreferrer&#34;&gt;sessão SSH Keys&lt;/a&gt;. Caso precise de detalhes de como gerar uma &lt;em&gt;chave ssh&lt;/em&gt;, acesse o &lt;a href=&#34;https://help.github.com/articles/generating-ssh-keys&#34; rel=&#34;noreferrer&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Heroku possui um mecanismo para declarar qual comando deve ser executado para iniciar um serviço na nuvem: no nosso caso, o script &lt;code&gt;node server.js&lt;/code&gt;. Isso deve ser declarado no arquivo de texto &lt;em&gt;&lt;a href=&#34;https://gist.github.com/igorlima/69153705256f6a9a4557#file-procfile&#34; rel=&#34;noreferrer&#34;&gt;Procfile&lt;/a&gt;&lt;/em&gt;. Após esses passos, tudo está pronto para a nossa primeira publicação na nuvem. Digite o script abaixo no diretório do projeto e a mágica estará feita:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-sh&#34;&gt;git remote add heroku git@heroku.com:o-nome-da-aplicacao-criada-no-heroku.git
git push heroku HEAD:master&lt;/pre&gt;

&lt;p&gt;Após o &lt;strong&gt;&lt;em&gt;push&lt;/em&gt;&lt;/strong&gt;, sua aplicação pode ser visualizada no endereço &lt;code&gt;http:/o-nome-da-aplicacao-criada-no-heroku.herokuapp.com/&lt;/code&gt;, conforme ilustra imagem abaixo. E é isso, pessoal. Espero que tenha gostado. Até a próxima.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i1368.photobucket.com/albums/ag182/igorribeirolima/a0000d4f6b3b7ca0469fcdeba8a6f6e2_zps2ba999fa.jpg&#34; alt=&#34;Screenshot da aplicação &#39;minhas midias sociais&#39;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizando páginas responsivas em diversos navegadores</title>
      <link>http://tableless.com.br/visualizando-pagina-responsiva-em-diversos-navegadores/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/visualizando-pagina-responsiva-em-diversos-navegadores/</guid>
      <description>&lt;p&gt;Nesse artigo vou mostrar rapidamente como tirar um Print Screen da página inicial de seu site utilizando diversos dispositivos. Algo que pode facilitar e muito a vida caso esteja desenvolvendo uma página responsiva.&lt;/p&gt;

&lt;p&gt;Nesse exemplo vamos utilizar o &lt;a href=&#34;http://nodejs.org/&#34; rel=&#34;noreferrer&#34;&gt;NodeJS&lt;/a&gt; e o &lt;a href=&#34;http://tableless.com.br/introducao-ao-selenium-2/&#34; rel=&#34;noreferrer&#34;&gt;Selenium 2&lt;/a&gt;. As outras dependências necessárias estão especificadas no arquivo &lt;a href=&#34;http://docs.nodejitsu.com/articles/getting-started/npm/what-is-the-file-package-json&#34; rel=&#34;noreferrer&#34;&gt;package.json&lt;/a&gt;. Arquivo que é usado para fornecer ao gerenciador de pacotes NPM, informações de como lidar com as dependências do projeto, a descrição do projeto, a licença utilizada, &lt;a href=&#34;http://package.json.nodejitsu.com/&#34; rel=&#34;noreferrer&#34;&gt;dentre outras&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para facilitar nossa vida, utilizaremos um serviço de Cloud do &lt;a href=&#34;https://saucelabs.com/&#34; rel=&#34;noreferrer&#34;&gt;SauceLabs&lt;/a&gt;. Esse serviço permite utilizar diversos tipos de navegadores. Logo, logo estarei escrevendo outros artigos, mostrando outros tipos de serviços parecidos, como por exemplo o &lt;a href=&#34;http://www.browserstack.com/&#34; rel=&#34;noreferrer&#34;&gt;BrowserStack&lt;/a&gt;. Todos esses serviços de Cloud fornecem uma &lt;strong&gt;chave de acesso&lt;/strong&gt;. Para criar uma conta, basta acessar a &lt;a href=&#34;https://saucelabs.com/signup&#34; rel=&#34;noreferrer&#34;&gt;página de cadastro&lt;/a&gt; e preencher o formulário. Posso te assegurar que o cadastro é simples e rápido.&lt;/p&gt;

&lt;p&gt;Tendo a chave de acesso em mãos, vamos executar &lt;a href=&#34;https://gist.github.com/igorlima/9875745&#34; rel=&#34;noreferrer&#34;&gt;o seguinte script&lt;/a&gt;. Magicamente teremos um printscreen da página inicial do site do Tableless:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;git clone https://gist.github.com/9875745.git visualizao-pagina-web
npm install
node script.js -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY --url &#39;http://tableless.com.br/&#39; --screenshot &#39;printscreen-da-pagina-do-tableless.png&#39;&lt;/pre&gt;

&lt;p&gt;Esse script utiliza como padrão a última versão do navegador Chrome. Para utilizar outros navegadores, especificaremos via parâmetros direto no Terminal. Os detalhes de cada parâmetro são obtidos utilizando &lt;em&gt;&amp;#8211;help&lt;/em&gt;. Existe uma lista com centenas de navegadores e dispositivos, os quais podem ser vistos no seguinte &lt;a href=&#34;https://saucelabs.com/platforms&#34; rel=&#34;noreferrer&#34;&gt;link&lt;/a&gt;. Segue abaixo dois exemplos de como visualizar o site do Tableless em um tablet com Android e em um iPhone:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;node script.js -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY --url &#39;http://tableless.com.br/&#39; --screenshot &#39;printscreen-tableless-android.png&#39; -b &#39;android&#39; -p &#39;Linux&#39; -v &#39;4.0&#39; --deviceType tablet --deviceOrientation landscape
node script.js -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY --url &#39;http://tableless.com.br/&#39; --screenshot &#39;printscreen-tableless-iphone.png&#39; -b &#39;iphone&#39; -p &#39;OS X 10.9&#39; -v &#39;7.0&#39;&lt;/pre&gt;

&lt;p&gt;O resultado é ilustrado na imagem abaixo.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone&#34; alt=&#34;PrintScreen da página do Tableless em diversos dispositivos&#34; src=&#34;https://camo.githubusercontent.com/0ba7d9a87cde934188995961c780401e73d19350/68747470733a2f2f63616d6f2e67697468756275736572636f6e74656e742e636f6d2f323936383265353030646663643562303032656230653766383832666332346231636266653261622f3638373437343730336132663266363933313333333633383265373036383666373436663632373536333662363537343265363336663664326636313663363237353664373332663631363733313338333232663639363736663732373236393632363536393732366636633639366436313266373436313632366336353663363537333733326436313732373436393633366336353264363936643631363736353566376137303733333933313335333536333634333636313265366137303637&#34; width=&#34;836&#34; height=&#34;695&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso se interessem e queiram modificar o script utilizado acima, fiquem a vontade. Para um melhor entendimento do script, deem uma lida nos seguintes artigos: &lt;strong&gt;(i)&lt;/strong&gt; &lt;a href=&#34;http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/&#34; rel=&#34;noreferrer&#34;&gt;Introdução de como executar testes unitários em diferentes tipos de navegadores&lt;/a&gt; e &lt;strong&gt;(ii)&lt;/strong&gt; &lt;a href=&#34;http://tableless.com.br/javascript-de-forma-assincrona-e-legivel/&#34; rel=&#34;noreferrer&#34;&gt;JavaScript de forma assíncrona e legível&lt;/a&gt;. Espero que tenham gostado. Até a próxima.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>História de usuário e teste de aceitação em JavaScript</title>
      <link>http://tableless.com.br/historia-de-usuario-e-teste-de-aceitacao-em-javascript/</link>
      <pubDate>Wed, 22 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/historia-de-usuario-e-teste-de-aceitacao-em-javascript/</guid>
      <description>&lt;p&gt;Cada história deve ter valor de negócio na visão do cliente e é uma pequena parte da funcionalidade, não necessariamente uma especificação completa, o que minimiza a necessidade de uma extensa documentação.&lt;/p&gt;

&lt;p&gt;A história de usuário é escrita pelo próprio cliente e, também, serve para conduzir a criação de teste de aceitação, o qual tem o propósito de avaliar a qualidade externa do produto e, na medida do possível, a qualidade de uso e experiência do usuário. A automatização dos testes de aceitação é criada para certificar de que a história foi implementada corretamente.&lt;/p&gt;

&lt;p&gt;Nesse exemplo é preciso a instalação do NodeJS e do Node Package Manager (NPM), que podem ser baixados no &lt;a href=&#34;http://nodejs.org/download/&#34;&gt;site oficial&lt;/a&gt;. O NPM é necessário para instalar o &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;CucumberJS&lt;/a&gt;, o &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; e o &lt;a href=&#34;https://github.com/admc/wd&#34;&gt;WD&lt;/a&gt;, digitando o seguinte _script_ no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install -g cucumber phantomjs&lt;/pre&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install wd&lt;/pre&gt;

&lt;p&gt;O NodeJS possui dois tipos de dependências: global e local. Quando é global, a dependência passa ser executável, tornando possível a utilização da dependência através da linha de comando. Já as dependências locais são instaladas no diretório corrente, dentro de um diretório chamado _node&lt;em&gt;modules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O primeiro &lt;em&gt;script&lt;/em&gt;, que utiliza o parâmetro &lt;strong&gt;-g&lt;/strong&gt;, instala o &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;CucumberJS&lt;/a&gt; e o &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; como dependências globais. O CucumberJS é uma implementação JavaScript para interpretar uma linguagem chamada &lt;a href=&#34;https://github.com/cucumber/gherkin&#34;&gt;Gherkin&lt;/a&gt;, a qual permite escrever funcionalidades e especificações em texto simples. Já o PhantomJS é um WebKit headless totalmente em JavaScript e possui suporte rápido e nativo para vários padrões web como manipulação de DOM, seletores CSS, JSON, Canvas e SVG.&lt;/p&gt;

&lt;p&gt;O segundo _script_ instala o &lt;a href=&#34;https://github.com/admc/wd&#34;&gt;WD&lt;/a&gt; como dependência local, um cliente NodeJS para facilitar o acesso à API do &lt;a href=&#34;http://tableless.com.br/introducao-ao-selenium-2/&#34;&gt;Selenium 2&lt;/a&gt;, o qual suporta &lt;a href=&#34;https://github.com/admc/wd/blob/master/doc/api.md&#34;&gt;métodos&lt;/a&gt; como: fazer requisições GET e POST, clicar no botão VOLTAR do navegador, redimensionar e mover a janela do navegador, submeter formulário, digitar texto, selecionar um elemento DOM, clicar e mover um elemento DOM selecionado, etc.&lt;/p&gt;

&lt;p&gt;Após a instalação das dependências, vamos criar o arquivo &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-apenas-um-exemplo-feature&#34;&gt;&lt;strong&gt;apenas-um-exemplo.feature&lt;/strong&gt;&lt;/a&gt; com a especificação da história de usuário e o teste de aceitação. Algo bem simples. Suficiente para exemplificar a implementação desse tipo de teste utilizando JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;apenas-um-exemplo.feature&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;Feature: Apenas Um Exemplo
  Como um usuario do CucumberJS
  Eu quero acessar um formulario de teste
  Para que eu possa submeter novas informacoes

  Scenario: Submetendo um formulario de teste
    Given o navegador aberto
      And acessar o formulario de teste
      And certificar que o titulo da pagina contem &#34;Sauce Labs&#34;
      And certificar que o titulo da pagina contem &#34;page title&#34;
      And certificar que o titulo da pagina contem &#34;I am a&#34;
    When clicar no botao de submeter formulario
    Then a url do navegador DEVE conter &#34;guinea-pig&#34;
    And o navegador pode ser fechado&lt;/pre&gt;

&lt;p&gt;Ao criar o arquivo de especificação, vamos criar mais dois arquivos: &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-configuracao-webdriver-usando-phantom-js&#34;&gt;&lt;strong&gt;configuracao-webdriver-usando-phantom.js&lt;/strong&gt;&lt;/a&gt; com as configurações do WebDriver e o arquivo &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-step-definitions-js&#34;&gt;&lt;strong&gt;step-definitions.js&lt;/strong&gt;&lt;/a&gt; com as definições de cada passo do teste de aceitação. Em seguida, é preciso, em um outro terminal, rodar o PhantomJS em modo WebDriver, digitando o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;phantomjs --webdriver=localhost:8910&lt;/pre&gt;

&lt;p&gt;Com o PhantomJS rodando em segundo plano, basta rodar o CucumberJS passando como argumento o arquivo com a história de usuário e o teste de aceitação. O parâmetro &lt;strong&gt;&amp;#8211;require&lt;/strong&gt; serve para especificar o arquivo com as definições de cada passo do teste de aceitação. E o parâmetro &lt;strong&gt;&amp;#8211;format&lt;/strong&gt; é para alterar a formatação do resultado dos testes. Abaixo, o _script_ e uma ilustração do resultado obtido:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;cucumber.js apenas-um-exemplo.feature --require step-definitions.js --format pretty&lt;/pre&gt;

&lt;p&gt;&lt;img alt=&#34;Ilustração do resultado de exemplo de como escrever história de usuário e teste de aceitação com JavaScript&#34; src=&#34;http://i1368.photobucket.com/albums/ag182/igorribeirolima/resultado-obtido_zps867ddb6d.png&#34; width=&#34;1020&#34; height=&#34;468&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse exemplo contempla de forma bem simples a implementação de teste de aceitação utilizando JavaScript. Essa abordagem também pode utilizar &lt;a href=&#34;http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/&#34;&gt;diferentes tipos de navegadores&lt;/a&gt;, mas isso ficará para uma próxima discussão. Para quem tiver interesse, todo código está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/8024944&#34; title=&#34;Gist - Exemplo de como escrever história de usuário e teste de aceitação com JavaScript&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>