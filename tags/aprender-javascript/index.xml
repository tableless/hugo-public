<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aprender Javascript on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/aprender-javascript/index.xml</link>
    <description>Recent content in Aprender Javascript on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/aprender-javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Aprendendo JavaScript online</title>
      <link>https://tableless.github.io/hugo-public/aprendendo-javascript-online/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/aprendendo-javascript-online/</guid>
      <description>

&lt;p&gt;Outro dia eu estava tentando me lembrar de um site bem simpático e simples para aprender JavaScript online. Eu não me lembrava do nome do site, nem o nome de quem havia feito. Joguei no twitter a pergunta e uma pancada de gente trouxe vários websites cuja a abordagem era aprender JS online, grátis, de forma fácil. Nenhum dos sites era o que eu estava procurando, mas eram sites bem legais que talvez você possa se interessar. Abaixo segue o link para todos eles.&lt;/p&gt;

&lt;h2 id=&#34;javascript-com&#34;&gt;Javascript.com&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://javascript.com/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/javascript-com.jpg&#34; alt=&#34;javascript-com&#34; width=&#34;500&#34; height=&#34;300&#34; class=&#34;alignnone size-full wp-image-49682&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;codewars&#34;&gt;CodeWars&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codewars.com/join?language=javascript&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/code-wars.jpg&#34; alt=&#34;code-wars&#34; width=&#34;500&#34; height=&#34;300&#34; class=&#34;alignnone size-full wp-image-49683&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;codeavengers&#34;&gt;CodeAvengers&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codeavengers.com/javascript/1#1.1&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/code-avengers.jpg&#34; alt=&#34;code-avengers&#34; width=&#34;500&#34; height=&#34;300&#34; class=&#34;alignnone size-full wp-image-49684&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;codecombat&#34;&gt;CodeCombat&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://codecombat.com/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/code-combat.jpg&#34; alt=&#34;code-combat&#34; width=&#34;500&#34; height=&#34;300&#34; class=&#34;alignnone size-full wp-image-49681&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Código Limpo</title>
      <link>https://tableless.github.io/hugo-public/codigo-limpo/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/codigo-limpo/</guid>
      <description>

&lt;p&gt;Um dos assuntos que costumo discutir bastante com a galera é sobre qualidade de código. Nesses papos sempre vem questões como: quais práticas podemos adotar para ter um código de alta qualidade? E como sabemos se o nosso código está bom? Como temos certeza de que estamos no caminho certo?&lt;/p&gt;

&lt;p&gt;Vou explicar meu humilde ponto de vista com exemplos e opiniões sobre qualidade de código. Vou abordar casos de uso com JavaScript, mas nada te impede aplicar muitas dessas dicas usando outras linguagens.&lt;/p&gt;

&lt;h2 id=&#34;gdd-8211-gambiarra-driven-development&#34;&gt;GDD &amp;#8211; Gambiarra Driven Development&lt;/h2&gt;

&lt;p&gt;Vamos começar pela metodologia mais antiga e talvez a mais adotada no mercado. Já trabalhei com profissionais que defendiam com unhas e dentes o não uso de padrões e boas práticas. Vamos ver as &lt;del&gt;desculpas&lt;/del&gt; justificativas mais usadas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;O projeto é muito simples. Não precisa de muita frescura.&lt;/li&gt;
&lt;li&gt;Faço isso há muitos anos e dificilmente tenho problemas.&lt;/li&gt;
&lt;li&gt;Desse jeito entrego em 10 minutos o que faríamos em horas.&lt;/li&gt;
&lt;li&gt;Não preciso padronizar, o código tá fácil de entender.&lt;/li&gt;
&lt;li&gt;Não temos tempo para documentar.&lt;/li&gt;
&lt;li&gt;Não temos tempo para escrever testes.&lt;/li&gt;
&lt;li&gt;Não temos tempo para refatorar.&lt;/li&gt;
&lt;li&gt;Esse código aí não é meu.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conseguiu se lembrar de alguns momentos na sua carreira, onde você já falou ou ouviu qualquer uma das frases acima? Não? Sortudo!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Não acredito que é errado você usar uma gambiarra para resolver um erro, desde que posteriormente você empregue uma solução mais robusta. O problema maior ocorre quando o uso de soluções paliativas se tornam frequentes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mas de longe esse é o único ou pior problema que encontramos na codificação. Gambiarras e &lt;em&gt;anti-patterns&lt;/em&gt; podem ser bons e eficientes a curto prazo, mas a longo prazo te mostram o inferno na terra.&lt;/p&gt;

&lt;p&gt;Vou apontar algumas boas práticas voltadas á escrita de código e o motivo para usá-las.&lt;/p&gt;

&lt;h2 id=&#34;antes-de-tudo-8230&#34;&gt;Antes de tudo&amp;#8230;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Você como desenvolvedor, tem a obrigação de entender cada linha de código que você escreve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Estude boas práticas e metodologias sempre. Mas não seja ingênuo a ponto de acreditar que a adoção de uma delas irá salvar parte do seu projeto/equipe. Muitas soluções podem trazer novos problemas. Quantas vezes a solução de um bug gerou outros 10 na aplicação? Por isso é necessário sempre ter na equipe alguém experiente com bastante vivência, que saiba direcionar o projeto nesses cenários.&lt;/p&gt;

&lt;p&gt;Já vi projetos que começaram repletos de boas práticas, e terminaram desastrados por conta da falta de maturidade prática da equipe. O ponto inicial que jamais deve ser ignorado é: &lt;strong&gt;você como desenvolvedor, tem a obrigação de entender cada linha de código que você escreve&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;no-caminho-certo&#34;&gt;No caminho certo&lt;/h2&gt;

&lt;p&gt;Seu código atual tem uma qualidade superior comparado com o que você escreveu há 6 meses atrás? Se sua resposta for sim, isso indica que você está no caminho certo. Programação é algo em constante evolução, o você programador, também deve evoluir. Com o passar dos anos seu código deve se tornar mais bem organizado, limpo e elegante.&lt;/p&gt;

&lt;p&gt;Uma leitura obrigatória é o livro &lt;a href=&#34;http://www.saraiva.com.br/clean-code-a-handbook-of-agile-software-craftsman-3095979.html&#34; target=&#34;_blank&#34;&gt;Clean Code&lt;/a&gt;. Muitos artigos e palestras sobre boas práticas (incluindo esse artigo), repetem pontos abordados nesse livro. Já vi até empresas cobrando a leitura desse livro como requisito para contratação.&lt;/p&gt;

&lt;h2 id=&#34;código-limpo&#34;&gt;Código Limpo&lt;/h2&gt;

&lt;p&gt;Enquanto o _GDD_ pode te dar felicidade a curto prazo, escrever código de forma limpa e consistente vai te garantir um futuro mais confortável. Você terá um código de fácil entendimento, o que tornará sua manutenção mais eficiente. E se você for um garoto prendado e cobrir sua aplicação com o máximo possível de testes, erros de regressão não irão mais chatear teu cliente/chefe.&lt;/p&gt;

&lt;p&gt;Vou focar em poucos pontos. Se quiser mais conteúdo, leia o &lt;a href=&#34;http://www.saraiva.com.br/clean-code-a-handbook-of-agile-software-craftsman-3095979.html&#34; target=&#34;_blank&#34;&gt;Clean Code&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-review&#34;&gt;Code Review&lt;/h3&gt;

&lt;p&gt;Sempre peça para um colega revisar teu código. Se outra pessoa entendeu perfeitamente o que você escreveu, é um bom sinal.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Qualquer tolo consegue escrever código que um computador entenda. Bons programadores escrevem código que humanos possam entender.&amp;#8221; &amp;#8211; Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;linters&#34;&gt;Linters&lt;/h3&gt;

&lt;p&gt;Ferramentas que escaneiam nosso código procurando o uso de más práticas e possíveis erros de execução, são nossos aliados. No dia-a-dia costumo usar o &lt;a href=&#34;http://jshint.com/&#34; target=&#34;_blank&#34;&gt;JSHint&lt;/a&gt; e agora meu novo parceiro: &lt;a href=&#34;https://github.com/danielstjules/jsinspect&#34; target=&#34;_blank&#34;&gt;JSInspect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Gosto do JSHint pelo fato de poder customizar algumas regras. Já o JSInspect te ajuda á identificar o padrão &lt;em&gt;copy &amp;amp; paste&lt;/em&gt;, te ajudando a escrever módulos melhores.&lt;/p&gt;

&lt;h3 id=&#34;nomenclaturas&#34;&gt;Nomenclaturas&lt;/h3&gt;

&lt;p&gt;Quando me perguntam qual parte da programação eu acho mais difícil, respondo na lata: nomear coisas.&lt;/p&gt;

&lt;p&gt;Passamos boa parte do tempo fazendo isso no nosso código, nomeando funções, variáveis, classes, namespaces, etc. Muitas vezes demoramos até chegar em um resultado bacana.&lt;/p&gt;

&lt;h3 id=&#34;seja-verboso&#34;&gt;Seja verboso&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Existem duas coisas muito difíceis na Ciência da Computação: invalidar cache e dar nome às coisas.&amp;#8221; &amp;#8211; Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consegue me dizer se você entende de cara o que faz a instrução abaixo?&lt;/p&gt;

&lt;pre&gt;u.cptTasks = false;&lt;/pre&gt;

&lt;p&gt;E agora com o código abaixo?&lt;/p&gt;

&lt;pre&gt;var u = new User();
u.name = &#39;Joana Souza&#39;;
u.adminPerm = true;
u.cptTasks = false;
u.save();&lt;/pre&gt;

&lt;p&gt;Conseguiu entender tudo? Vamos ver se fica mais fácil:&lt;/p&gt;

&lt;pre&gt;var user = new User();
user.name = &#39;Joana Souza&#39;;
user.hasAdministratorPermissions = true;
user.didCompleteAllTasks = false;
user.save();&lt;/pre&gt;

&lt;p&gt;Nomear a variável como &lt;em&gt;u&lt;/em&gt; não ajudou muito. Principalmente se você for reutilizar essa variável muitas linhas abaixo. Abreviações também atrapalham bastante. Duvido que de imediato você soube o significado de &lt;em&gt;u.cptTasks&lt;/em&gt;. Pode ter tido várias idéias, o que te guiou ao velho &lt;em&gt;achismo&lt;/em&gt;. E quantos erros já não cometemos pelo simples fato de _acharmos_ isso ou aquilo?&lt;/p&gt;

&lt;h3 id=&#34;considere-o-uso-da-nossa-querida-língua-portuguesa&#34;&gt;Considere o uso da nossa querida Língua Portuguesa&lt;/h3&gt;

&lt;p&gt;Usar a língua portuguesa para nomear coisas pode ser muito bom, principalmente para os novatos. Pelo simples motivo de que fazendo isso, fica mais visível o que é API nativa da linguagem/browser, e API proprietária. Dá uma olhada:&lt;/p&gt;

&lt;pre&gt;var usuario = new Usuario();
usuario.nome = &#39;Joana Souza&#39;;
usuario.temPermissoesAdministrativas = true;
usuario.completouTodasTarefas = false;
usuario.salvar();&lt;/pre&gt;

&lt;p&gt;Ficou mais confortável né? Seu cérebro praticamente se deu ao único trabalho de compreender o código. Não precisou traduzir de um idioma para outro. Mas isso é também uma faca de dois gumes.&lt;/p&gt;

&lt;p&gt;Conhecer a língua inglesa é extremamente importante no mundo da programação, pois muitas documentações e materiais estão nesse idioma. Logo, nomear coisas em português te tira a oportunidade de praticar o idioma, pelo menos na forma escrita. Vale á pena bater um papo com a sua equipe á respeito disso.&lt;/p&gt;

&lt;h3 id=&#34;adote-uma-convenção&#34;&gt;Adote uma convenção&lt;/h3&gt;

&lt;p&gt;A adoção de uma convenção facilita muito na padronização de estilo de escrita e organização de código. É uma ótima opção iniciar com alguma existente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://snowdream.github.io/javascript-style-guide/javascript-style-guide/br/naming-conventions.html&#34; target=&#34;_blank&#34;&gt;Convenção de Nomenclatura &amp;#8211; Airbnb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://andrecomws.com/lab/code-standards/&#34; target=&#34;_blank&#34;&gt;Padrões de Código Front-End &amp;#8211; Isobar&lt;/a&gt; (a versão original está &lt;a href=&#34;http://isobar-idev.github.io/code-standards/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript.crockford.com/code.html&#34; target=&#34;_blank&#34;&gt;Convenções do Douglas Crockford&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/styleguide/javascriptguide.xml&#34; target=&#34;_blank&#34;&gt;Padrões de Código da Google&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bônus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Leitura obrigatória: &lt;a href=&#34;http://jstherightway.org/pt-br/&#34; target=&#34;_blank&#34;&gt;JavaSript the Right Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;variáveis-e-funções-não-utilizadas&#34;&gt;Variáveis e funções não utilizadas&lt;/h3&gt;

&lt;p&gt;Variáveis e funções não utilizadas são um belo exemplo de sujeira. Alguma vez você já deu manutenção em algum código, cujo algum tempo foi investido para compreender o que foi escrito, pra no final das contas perceber que o código estava morto, sem utilização? Chato, né?&lt;/p&gt;

&lt;p&gt;Pra se livrar dessa sujeira é bem simples: ninguém está usando? Apague! Essa regra também vale para código comentado.&lt;/p&gt;

&lt;h3 id=&#34;reinvenção-da-roda&#34;&gt;Reinvenção da roda&lt;/h3&gt;

&lt;p&gt;Esse erro é geralmente cometido por novos e &lt;em&gt;antigos juniores&lt;/em&gt; (entendo como antigo júnior aquele profissional que programa há muitos anos, mas nunca se interessou em aprofundar em uma linguagem).&lt;/p&gt;

&lt;p&gt;O fato de não conhecer muito bem a API da linguagem, pode te levar á reinventar á roda.&lt;/p&gt;

&lt;p&gt;Um exemplo disso é quando precisamos fazer um filtro em um array. Quem não está familiarizado, irá primeiramente fazer o bom e velho &lt;em&gt;for&lt;/em&gt;, possivelmente desconhecendo outras opções como &lt;em&gt;Array.filter&lt;/em&gt; e &lt;em&gt;Array.map&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;funções-pequenas&#34;&gt;Funções Pequenas&lt;/h3&gt;

&lt;p&gt;Funções devem ser claras, objetivas e pequenas. Respeite a regra da responsabilidade única: sua função deve fazer somente uma coisa, e deve fazê-la muito bem.&lt;/p&gt;

&lt;p&gt;Dá uma olhada no exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;usuario.salvar()

...

function salvar() {
    var camposObrigatorios = [ &#39;nome&#39;, &#39;email&#39;, &#39;cpf&#39; ];

    camposObrigatorios.forEach( ( propriedade ) =&amp;gt; {
        if ( !usuario[ propriedade ] ) {
            throw new Error( `É obrigatório informar o ${ propriedade } do usuário.` );
        }
    } );

    $http.post( &#39;http://app.com/api/usuario&#39;, usuario )
        .success( ... )
        .error( ... )
        .finally( ... );
}&lt;/pre&gt;

&lt;p&gt;Pelo nome da função ficou claro o objetivo dela. Mas analisando vemos a implementação de duas coisas: validação e persistência dos dados. Poderíamos dividir as responsabilidades da seguinte forma:&lt;/p&gt;

&lt;pre&gt;validarUsuario() &amp;&amp; usuario.salvar();

...

function validarUsuario() {
    var camposObrigatorios = [ &#39;nome&#39;, &#39;email&#39;, &#39;cpf&#39; ];

    camposObrigatorios.forEach( ( propriedade ) =&amp;gt; {
        if ( !usuario[ propriedade ] ) {
            throw new Error( `É obrigatório informar o ${ propriedade } do usuário.` );
        }
    } );

    return true;
}

function salvar() {
    $http.post( &#39;http://app.com/api/usuario&#39;, usuario )
        .success( ... )
        .error( ... )
        .finally( ... );
}&lt;/pre&gt;

&lt;p&gt;Manter suas funções enxutas te auxilia á praticar o reuso do código.&lt;/p&gt;

&lt;p&gt;Esse é um assunto que pode ser extenso. Uma discussão bem bacana rolou no StackOverflow. Dá uma olhada &lt;a href=&#34;http://pt.stackoverflow.com/questions/30772/uma-fun%C3%A7%C3%A3o-grande-ou-muitas-pequenas&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;comentários&#34;&gt;Comentários&lt;/h3&gt;

&lt;p&gt;Já ouvi dizer que código semântico dispensa comentários. Concordo parcialmente com isso. Acredito que é válido usar comentários nas seguintes situações:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utilização muito pouco comum de uma parte da API pode ajudar a galera mais nova&lt;/li&gt;
&lt;li&gt;Nem sempre conseguimos deixar nosso código semântico, a ponto dele &lt;em&gt;contar o que está acontecendo&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Existem poucos momentos em que devemos fazer uso de uma má prática. E é bom deixar documentado o motivo antes que alguém refatore e quebre alguma funcionalidade&lt;/li&gt;
&lt;li&gt;Sua aplicação expõe uma API pública. Sugiro o uso do &lt;a href=&#34;http://usejsdoc.org/&#34; target=&#34;_blank&#34;&gt;JSDocs&lt;/a&gt; para manter um padrão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora  &lt;strong&gt;/* código comentado */ &lt;/strong&gt;é algo deve ter pouquíssima tolerância.&lt;/p&gt;

&lt;h3 id=&#34;indentação&#34;&gt;Indentação&lt;/h3&gt;

&lt;p&gt;Esse é conhecido como &lt;em&gt;problema de perfumaria&lt;/em&gt;. Saca só:&lt;/p&gt;

&lt;pre&gt;if(usuario.idade!==null||usuario.idade!==undefined||typeof usuario.idade == &#39;number&#39;||usuario.idade&amp;lt;18){
  alert(&#39;O usuário não possui idade suficiente para ser cadastrado nesse sistema.&#39;);
  return false;
}else{
    usuario.salvar();
}&lt;/pre&gt;

&lt;p&gt;Lindo né? Que tal dar mais espaço pra essa bagunça?&lt;/p&gt;

&lt;pre&gt;if ( usuario.idade &amp;&amp; typeof usuario.idade === &#39;number&#39; &amp;&amp; usuario.idade &amp;lt; 18 ) {
    alert( &#39;O usuário não possui idade suficiente para ser cadastrado nesse sistema.&#39; );
    return false;
}

usuario.salvar();&lt;/pre&gt;

&lt;p&gt;E agora? Ficou mais fácil de ler?&lt;/p&gt;

&lt;p&gt;Enfiar todo o código em uma pequena lata de sardinha pode dificultar um pouco a sua compreensão, por mais que o seu editor de texto ou IDE tenha um highlight com alto contraste. Uma ferramenta bacana pra te ajudar á manter esse padrão é o &lt;a href=&#34;http://jscs.info/&#34; target=&#34;_blank&#34;&gt;JSCS&lt;/a&gt;. Gosto de usar o preset jQuery dessa ferramenta, pois o código fica com mais espaçamento, deixando o mais confortável para ler.&lt;/p&gt;

&lt;h3 id=&#34;vale-lembrar-que-8230&#34;&gt;Vale lembrar que&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Muitas dicas dadas aqui retirei do livro Clean Code, e outras aprendi com o passar do tempo em experiência com diversos projetos. O seu comentário com um ponto de vista diferente pode me ajudar á aprender mais sobre o assunto.&lt;/p&gt;

&lt;p&gt;Espero ter ajudado.&lt;/p&gt;

&lt;p&gt;=)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>