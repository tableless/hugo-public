<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Weekly on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/weekly/index.xml</link>
    <description>Recent content in Weekly on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/weekly/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tableless Weekly #5</title>
      <link>https://tableless.github.io/hugo-public/tableless-weekly-5/</link>
      <pubDate>Thu, 09 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tableless-weekly-5/</guid>
      <description>

&lt;p&gt;Mais um artigo da s√©rie Tableless Weekly. Quero me desculpar por ter ficado algumas semanas sem escrever, mas creio que isto n√£o se repetir√° e estarei aqui com voc√™s todas as semanas. üôÇ&lt;/p&gt;

&lt;p&gt;Antes de ir aos links e tudo mais, quero discutir um assunto com voc√™s. No √∫ltimo artigo, falei sobre a nova especifica√ß√£o ECMAScript 6, que foi adotada parcialmente em alguns navegadores.&lt;/p&gt;

&lt;p&gt;Uma das partes que ainda n√£o foi adotada, √© a nova especifica√ß√£o de orienta√ß√£o a objetos que a ES6 traz consigo. Vou dar alguns exemplos aqui e falar um pouco sobre este novo modelo de OO para que possamos discutir sobre o assunto. N√£o deixem de comentar üôÇ&lt;/p&gt;

&lt;p&gt;Uma das coisas mais interessantes, foi a quest√£o das classes, que deixar√£o de ser &amp;#8220;fun√ß√µes&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Para quem se recorda, no modelo antigo, far√≠amos algo mais ou menos assim:&lt;/p&gt;

&lt;pre&gt;function Car(){
    //e aqui iriam os m√©todos e atributos desta classe.
}
&lt;/pre&gt;

&lt;p&gt;No novo modelo de OO ser√° escrito da seguinte forma:&lt;/p&gt;

&lt;pre&gt;class Car{
    //e aqui iriam os m√©todos e atributos desta classe.
}
&lt;/pre&gt;

&lt;p&gt;Outro aspecto interessante que foi a ado√ß√£o de m√©todos construtores para a classe, o que torna nosso c√≥digo padronizado e mais bem estruturado. Os construtores da ES6, s√£o bem similares aos m√©todos construtores do PHP. No PHP usamos construtores atrav√©s da palavra reservada &lt;strong&gt;__constructor()&lt;/strong&gt;, e na ES6 usaremos a palavra reservada apenas como &lt;strong&gt;constructor()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Vamos recordar mais uma vez o modelo antigo e o novo modelo. Utilizaremos a mesma classe acima.&lt;/p&gt;

&lt;pre&gt;function Car(marca, modelo){
    this.marca = marca; //atribu√≠mos o valor da vari√°vel passada ao instanciar a classe √† uma de suas propriedades
    this.modelo = modelo; //atribu√≠mos o valor da vari√°vel passada ao instanciar a classe √† uma de suas propriedades
}
//Instanciamos a classe
var car = new Car(&#39;Ford&#39;,&#39;Mustang GT&#39;);
console.log(&#39;Seu carro √© um &#39;+car.marca+&#39; modelo: &#39;+car.modelo);
&lt;/pre&gt;

&lt;p&gt;No novo modelo:&lt;/p&gt;

&lt;pre&gt;class Car{
    constructor(marca, modelo){//Criamos o m√©todo construtor para atribuir vari√°veis para as propriedades
        this.marca = marca;
        this.modelo = modelo;
    }
}
let car = new Car(&#39;Chevrolet&#39;,&#39;Camaro SS&#39;);
console.log(&#39;Seu carro √© um &#39;+car.marca+&#39; modelo: &#39;+car.modelo);&lt;/pre&gt;

&lt;p&gt;Mais um ponto que merece destaque √© a constru√ß√£o de m√©todos de uma classe. Se tornou mais simples e objetiva. Continuando a mesma classe acima:&lt;/p&gt;

&lt;pre&gt;function Car(marca, modelo){
    this.marca = marca;
    this.modelo = modelo;

    //Criamos um m√©todo para escrever a marca e o modelo do carro
    this.mostraInfo = function(){
        console.log(&#39;Seu carro √© um &#39;+this.marca+&#39; modelo: &#39;+this.modelo);
    }
}
var car = new Car(&#39;Ford&#39;,&#39;Mustang GT&#39;);
car.mostraInfo();&lt;/pre&gt;

&lt;p&gt;No novo Padr√£o seria:&lt;/p&gt;

&lt;pre&gt;class Car{
    constructor(marca, modelo){
        this.marca = marca;
        this.modelo = modelo;
    }
    // Podemos notar como √© mais simples cria o m√©todo
    mostraInfo(){
        console.log(&#39;Seu carro √© um &#39;+this.marca+&#39; modelo: &#39;+this.modelo);
    }
}
let car = new Car(&#39;Chevrolet&#39;,&#39;Camaro SS&#39;);
car.mostraInfo();&lt;/pre&gt;

&lt;p&gt;Com apenas essas pequenas mudan√ßas j√° podemos ter uma OO bem mais simples de entender que o modelo OO tradicional do JavaScript. Mas, e se eu disser que ainda tem mais?&lt;/p&gt;

&lt;p&gt;No novo modelo de OO da ES6, podemos estender classes, assim como fazemos nas demais linguagens orientadas √† objetos.&lt;/p&gt;

&lt;p&gt;Imagine que tiv√©ssemos propriedades no Camaro SS, que n√£o s√£o comuns ao Mustang GT. Poder√≠amos criar uma classe para cada um que tivesse suas propriedades e m√©todos pr√≥prios:&lt;/p&gt;

&lt;pre&gt;class Car{
    constructor(marca, modelo){
        this.marca = marca;
        this.modelo = modelo;
    }
}
class MustangGT extends Car{
    constructor(marca, modelo, historia){
        super.constructor(marca,modelo); //Utilizamos a palavra reservada super para chamar um m√©todo da classe pai
        this.historia = historia;
    }
}
class Camaro extends Car{
    constructor(marca, modelo, musica){
        super.constructor(marca,modelo);
        this.musica = musica;
    }
}&lt;/pre&gt;

&lt;p&gt;Veja que estendemos as classes para herdarmos as propriedades &lt;strong&gt;marca&lt;/strong&gt; e &lt;strong&gt;modelo&lt;/strong&gt;¬†da classe pai para as classes filhas, e ent√£o criamos as propriedades distintas em cada uma das classes, como a propriedade m√∫sica, que pertence somente ao Camaro, e a propriedade hist√≥ria, que pertence somente ao Mustang.&lt;/p&gt;

&lt;p&gt;Bom, espero que tenham gostado da nova especifica√ß√£o de OO da ES6. Como todas as mudan√ßas, tem seus pr√≥s e contras e quero que deixem suas opini√µes √† respeito nos coment√°rios.&lt;/p&gt;

&lt;h2 id=&#34;sites-legais&#34;&gt;Sites Legais&lt;/h2&gt;

&lt;p&gt;Vamos aos sites legais desta edi√ß√£o.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thebuildingofmemories.com/&#34;&gt;The Building of ¬†Memories&lt;/a&gt;¬†&amp;#8211; Site feito pela Coca-Cola, para mostrar sua presen√ßa em¬†alguns momentos marcantes na hist√≥ria. Achei bem legal o design flat e as anima√ß√µes do site.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://demicreative.com/&#34;&gt;DemiCreative&lt;/a&gt;¬†&amp;#8211; Site de uma ag√™ncia de design e cria√ß√£o, muito interessante tamb√©m.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.burnkit.com/&#34;&gt;Burnkit&lt;/a&gt; &amp;#8211; Outra ag√™ncia de design bem bacana.&lt;/p&gt;

&lt;h2 id=&#34;links-√∫teis&#34;&gt;Links √öteis&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.raphaelfabeni.com.br/flags-css3/&#34;&gt;CSS3 Flags&lt;/a&gt;¬†&amp;#8211; Uma p√°gina feita pelo nosso amigo Raphael Fabeni, onde ele criou bandeiras de diversos pa√≠ses utilizando apenas CSS3. O mais bacana √© que se voc√™ analisar o c√≥digo, poder√° aprender bastante as aplica√ß√µes do CSS Animation.&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;N√£o quis ser muito extenso com os links neste artigo devido ao texto inicial ser bem grande, para n√£o ficar cansativo.&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado e estarei de volta na pr√≥xima semana com mais um Tableless Weekly. At√© a pr√≥xima.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>