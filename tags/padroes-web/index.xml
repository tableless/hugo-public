<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Padroes Web on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/padroes-web/index.xml</link>
    <description>Recent content in Padroes Web on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/padroes-web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Web Semântica na Prática Parte 1: A Web do futuro (ou quase isso)</title>
      <link>https://tableless.github.io/hugo-public/web-semantica-na-pratica-parte-1-web-do-futuro-ou-quase-isso/</link>
      <pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/web-semantica-na-pratica-parte-1-web-do-futuro-ou-quase-isso/</guid>
      <description>

&lt;p&gt;É possível conferir aqui mesmo no Tableless alguns bons artigos introdutórios sobre Web Semântica (veja &lt;a href=&#34;http://tableless.com.br/a-web-semantica/&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://tableless.com.br/semantica-padroes-e-o-que-voce-tem-a-ver-com-isto/&#34;&gt;aqui&lt;/a&gt;), os quais eu recomendo a leitura caso você nunca tenha ouvido falar sobre o assunto.&lt;/p&gt;

&lt;p&gt;A intenção dessa sequência de posts que nomeei como “Web Semântica na Prática” é destrinchar esse assunto de modo aprofundado, apresentando os conceitos e exemplificando-os na prática. O tutorial completo será composto de 9 posts que irão reunir, ao final, um guia bastante abrangente sobre os conceitos, padrões, tecnologias, linguagens e ferramentas utilizadas na criação de aplicações para Web Semântica. Preparados?&lt;/p&gt;

&lt;h2 id=&#34;apresentando-a-web-do-futuro&#34;&gt;Apresentando a Web do Futuro&lt;/h2&gt;

&lt;p&gt;Caso você já tenha lido os textos introdutórios linkados no inicio desse texto, você tem uma noção do que é a Web Semântica (carinhosamente chamada de SemWeb pelos íntimos e também reconhecida pela alcunha de Web 3.0, mas você pode usar a buzzword que mais lhe agradar), mas independente de ter lido ou não, vamos apresentar rapidamente o que é esse conjunto de conceitos, pelas palavras de seus próprios criadores, Tim Berners-Lee, James Hendler e Ora Lassila:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“A Web Semântica não é uma Web separada mas sim uma extensão da Web atual onde a informação possui significado, permitindo que computadores e pessoas trabalhem em cooperação&amp;#8221;&lt;/p&gt;

&lt;p&gt;— Tradução livre a partir do artigo &amp;#8220;&lt;a href=&#34;http://www.scientificamerican.com/article/the-semantic-web/&#34;&gt;The Semantic Web&amp;#8221;&lt;/a&gt;* publicado em 2001 na Scientific American&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;É praticamente de sabedoria popular que a Web está inundada de dados e que esse volume só cresce a cada dia que passa, mas também é fato que esses dados não possuem um significado claro e estabelecido, impossibilitando sua utilização de modo integrado sem conflitos. Determinar esse significado e converter esses dados em informação aproveitável por qualquer agente (humano ou computadorizado) é o objetivo maior da Web Semântica.&lt;/p&gt;

&lt;p&gt;De certa forma, a Web Semântica é uma visão do que a Web será no futuro, onde agentes computadorizados poderão enfim compreender o significado dos dados da mesma maneira que nós compreendemos e atuar sobre eles, executando tarefas repetitivas e auxiliando os usuários das mais diversas maneiras.&lt;/p&gt;

&lt;p&gt;É importante notar que, sendo uma “previsão”, a Web Semântica não é um padrão de mercado ainda, logo é bom estar ciente de que todos os padrões, formatos e linguagens utilizadas para criar aplicações nesse ambiente hoje em dia talvez não sejam nunca usados em larga escala no &amp;#8220;mundo real&amp;#8221;. De forma sucinta, &lt;strong&gt;a&lt;/strong&gt; &lt;strong&gt;Web Semântica é o futuro da Web, mas o modo como vemos a implementação dela hoje pode não ser a mesma quando este futuro chegar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Você pode estar se perguntando: Porque então estudar esses conceitos se eles podem nem chegar a ser utilizados?&lt;/p&gt;

&lt;p&gt;O motivo é simples: embora não seja possível afirmar de forma categórica que a Web Semântica será implementada desse modo, isso é extremamente provável.&lt;/p&gt;

&lt;p&gt;Veja, o termo foi cunhado em &lt;sup&gt;2000&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2001&lt;/sub&gt; juntamente com as possíveis tecnologias e padrões para sua implementação. As ideias iniciais foram revisadas em 2006 e em 2011 (veja “&lt;a href=&#34;http://ieeexplore.ieee.org/abstract/document/1637364/?reload=true&#34;&gt;The Semantic Web Revisited&lt;/a&gt;”* e &amp;#8220;&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=1988690&#34;&gt;The Semantic Web 10th year update&lt;/a&gt;&amp;#8220;*) e a base tecnológica para Web Semântica é composta por padrões que estão por aí desde sempre e são bem conhecidas por todos: basicamente XML, URI e Unicode.&lt;/p&gt;

&lt;p&gt;Soma-se a isso o amadurecimento desses conceitos nos 15 anos que separam sua criação da Web atual, e então é possível notar de forma clara que a Web está evoluindo e precisando dar seu próximo passo para algo ao menos próximo daquilo foi proposto como sendo a Web Semântica.&lt;/p&gt;

&lt;p&gt;Resumindo, apesar de ser uma previsão, as tecnologias estão aí, já estão sendo usadas e, mesmo não sendo um padrão de mercado, elas funcionam e podem guiar o desenvolvimento de aplicações Web em alguns anos. É bom estar preparado.&lt;/p&gt;

&lt;p&gt;Se isso não bastar para te convencer a continuar lendo essa série de posts, creio que possa ser interessante conhecer todos os conceitos por trás dessa proposta pois, sendo eles baseados em conceitos sólidos, aplicá-los na prática pode ser útil para uma completa compreensão da Web como um todo, seja para usá-los hoje ou em qualquer momento no futuro.&lt;/p&gt;

&lt;h2 id=&#34;as-camadas-da-web-semântica&#34;&gt;As camadas da Web Semântica&lt;/h2&gt;

&lt;p&gt;O primeiro passo para estudar a Web Semântica é ter uma visão abrangente de como uma aplicação é arquitetada nesse contexto, incluindo os padrões e tecnologias utilizados. Para este fim, nada melhor que um desenho. ;-P&lt;/p&gt;

&lt;p&gt;A “Pirâmide da Web Semântica” foi descrita ainda em 2001 e segue sendo um dos diagramas mais utilizados para explicar este universo de forma sucinta. Vale notar que esse diagrama possui diversas versões e modificações realizadas por profissionais de diferentes áreas (Ciência da Computação, Ciência da Informação,Biblioteconomia, ente outros), pois existem diversas propostas sobre a organização da Web Semântica, mas a versão que você vê abaixo é uma adaptação (traduzida) da figura original de 2001 que é inclusive a versão utilizada pelo W3C atualmente, com apenas um ou dois adendos que achei necessários.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;wp-image-56086 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/camadasWebSem.png&#34; alt=&#34;camadas_web_semantica&#34; width=&#34;484&#34; height=&#34;334&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A ideia desta estrutura é definir como implementar a Web Semântica, sendo que cada camada é complementar a camada imediatamente inferior, definindo as linguagens e conceitos chave que devem ser utilizados em tal implementação.&lt;/p&gt;

&lt;p&gt;É muito importante ressaltar que o termo Web Semântica é como “guarda-chuva” de conceitos, técnicas e padrões, conforme pode ser observado na figura, e não uma conjunto indissociável de linguagens e frameworks que devem ser utilizados de modo obrigatório. Exatamente por esse motivo que a maior parte das aplicações existentes hoje em dia não utiliza todas as camadas, mas sim apenas uma parte delas.&lt;/p&gt;

&lt;p&gt;Embora não tenha nada de realmente prático nesse primeiro post, imagino que para um texto introdutório chegamos a um ponto interessante e espero que tenha atiçado a curiosidade de cada um para investir um pouco de tempo estudando o que foi apresentado aqui (e também o que será apresentado nos próximos posts) para contribuir para a Web do futuro ou pelo menos chegar perto disso.&lt;/p&gt;

&lt;p&gt;No próximo capítulo: “IRI, URI, URL, URN e como identificar TUDO na Web”.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A arquitetura Redux usando Jails</title>
      <link>https://tableless.github.io/hugo-public/arquitetura-redux-usando-jails/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/arquitetura-redux-usando-jails/</guid>
      <description>

&lt;p&gt;Ultimamente tenho me preocupado mais com arquiteturas no front-end do que propriamente com as implementações de alguns frameworks. Isso porque eu acho que realmente nos falta um pouco mais de conhecimento sistêmico, mais arquitetural, porque os problemas só estão crescendo e percebi que pelo menos eu não estava acompanhando devidamente a complexidade das aplicações desenvolvidas em Javascript.&lt;/p&gt;

&lt;h2 id=&#34;uma-pequena-reflexão&#34;&gt;Uma pequena reflexão&lt;/h2&gt;

&lt;p&gt;Os frameworks acabaram aparecendo nos últimos tempos e percebo que tiveram uma importância muito maior do que o nosso amadurecimento quanto aos novos desafios nas aplicações web, especificamente na linguagem Javascript. Percebo por comentários de colegas que em entrevistas a preocupação com o conhecimento em determinados frameworks é maior do que a preocupação com o pensamento abstrato do programador Javascript.&lt;/p&gt;

&lt;p&gt;Eu acabei escrevendo um micro-framework, já postei ele aqui, o &lt;strong&gt;&lt;a href=&#34;http://tableless.com.br/jails-o-framework-e-arquitetura-javascript/&#34; target=&#34;_blank&#34;&gt;Jails&lt;/a&gt;&lt;/strong&gt;. Que nada mais é do que uma aplicação de um conceito de relacionamento entre as partes, uma micro-arquitetura baseada em eventos, com alguns padrões, bem simples. Ao invés de vir de fábrica lotada de features, ela apenas resolve o problema básico de &lt;strong&gt;organização.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-problema-principal-e-o-secundário&#34;&gt;O Problema principal e o secundário&lt;/h2&gt;

&lt;p&gt;O &lt;strong&gt;Jails&lt;/strong&gt; não resolve todos os problemas, aliás, não deve e se devesse, não conseguiria. Eu particularmente acredito que quanto mais simples uma solução for, mais &amp;#8220;composable&amp;#8221; ela vai ser, e se possui componentes que podem ser compostos, sua aplicação tende a ser mais simples e mais otimizada para o seu problema inicial.&lt;/p&gt;

&lt;p&gt;Menos tempo também se perde com manutenção de soluções que não estavam no escopo inicial. Aqui entra o velho conceito de divisão e conquista, para um problema complexo, o mais inteligente a se fazer é resolvê-lo quebrando-o em partes menores. O Jails melhorou bastante a organização e a forma de abstrair as coisas para mim sobretudo na reutilização do código, eram estes os problemas iniciais.&lt;/p&gt;

&lt;p&gt;Existe porém um problema secundário, como manter a previsibilidade dos estados de uma aplicação? Um exemplo, o usuário escolhe uma opção em um dropdown, outro componente precisa ser atualizado de acordo com esta opção, em conjunto, um terceiro componente precisa atualizar o texto, e um quarto componente deve mostrar na UI algo que tem relação com a escolha feita no primeiro componente, e todos eles estão de forma espalhada na tela, não são portanto um conjunto de um mesmo módulo.&lt;/p&gt;

&lt;p&gt;Quer dizer então que o Jails não resolve este problema? Claro que não, e isto não significa que é um problema sem solução. Com framework ou sem você vai resolver esse problema. A questão aqui não é apenas resolvê-lo, é como solucionar de maneira &lt;strong&gt;elegante&lt;/strong&gt;, usando uma forma que não comprometa a sanidade do seu código. Isso te ajuda diretamente na manutenção e consequentemente a ser mais ágil quando tiver que fazer alterações ou mesmo criar novas features.&lt;/p&gt;

&lt;h2 id=&#34;redux-a-predictable-state-container&#34;&gt;Redux, a predictable state container&lt;/h2&gt;

&lt;p&gt;Aqui entra um dos conceitos mais interessantes que vi nestes útimos tempos, não me parece ter recebido tanta atenção quanto deveria, mais é genial, pelo menos para mim. Bom, como o título sugere, ele é basicamente um container de estados para sua a aplicação, ele simplifica a arquitetura Flux, adiciona para nós alguns conceitos como reducers, imutabilidade e funções puras.&lt;/p&gt;

&lt;p&gt;A idéia geral dele é, que você tenha apenas uma &lt;strong&gt;Store &lt;/strong&gt;que mantêm todos os estados da sua aplicação, e para cada ação do usuário você deve disparar uma &amp;#8220;action&amp;#8221; para esta store que por sua vez vai atualizar os estados e te notificar que esta atualização finalizou, assim, ao ser notificado você resgata estes estados que são read-only e atualiza seus componentes. As mudanças nestes estados devem ser feitas apenas usando funções puras chamadas de &amp;#8220;reducers&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Há um tempo atrás, quando ainda estava desenvolvendo o Jails, eu já havia notado que em alguns casos seria interessante manter os estados da aplicação em um objeto, fazendo estas alterações neste objeto usando métodos de array como filters, map, reduce para listas, e posteriormente atualizado a view usando um template engine, mustache por exemplo. Uma prova disso é que hoje, as apps e as controllers do Jails compartilham um objeto &lt;strong&gt;data&lt;/strong&gt; entre eles com esta finalidade.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import &#39;components/view&#39;
import jails from &#39;jails&#39;
jails.app(&#39;app&#39;, function(html, data){
    this.init = ()=&amp;gt;{
        let view = this.x(&#39;[data-component*=view]&#39;)
        view(&#39;render&#39;, data)
    }
})
&lt;/pre&gt;

&lt;p&gt;E foi desta forma que resolvia estes problemas de estado da aplicação, mas que possui uma consequência. Não era trivial saber quando ou quem havia alterado aquele objeto. É o clássico problema da variável global, você não consegue dizer com facilidade qual ação foi responsável por uma mudança.&lt;/p&gt;

&lt;p&gt;Outro problema é que objetos não são funções, não há callbacks. Você não consegue dizer à outros módulos que houve uma alteração neste objeto. Aí você vai se sentir tentado a usar aquelas manobras de watch, observer, two-way binding ou seja lá qual for o nome que dê para isso, para te alertar quando o objeto é alterado.&lt;/p&gt;

&lt;p&gt;Hoje já temos bastante informação sobre estas técnicas e sabemos que é difícil verificar de forma recursiva se alguma propriedade do objeto alterou e não é performático.&lt;/p&gt;

&lt;p&gt;É por isso que acho o Redux genial, ele utiliza alguns conceitos do paradigma funcional que resolve de maneira elegante este problema e tem esta idéia de preservar os estados da aplicação em um objeto só, que pra mim por dedução é algo interessante a se fazer hoje em dia, além disso nos garante um mínimo previsibilidade. O Redux usa o conceito de funções puras para alterar os estados e estas funções por serem puras são facilmente passíveis de composições e também são previsíveis. E o melhor, não está preso à implementação do React, é um padrão/arquitetura, um conceito que você pode usar &lt;strong&gt;ONDE VOCÊ QUISER&lt;/strong&gt;. Você prefere AngularJS? Ember? Js Vanilão? React? Não importa, e essa qualidade para mim não tem preço.&lt;/p&gt;

&lt;h2 id=&#34;não-seja-um-robô-pense-por-conta-própria-8230&#34;&gt;Não seja um robô, pense por conta própria&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Já vi lutas ferrenhas sobre qual framework/solução usar, existem aquelas pessoas que são realmente evangelistas no sentido mais religioso, aprendem a usar alguma ferramenta e aquela é a única que presta, a única que irá salvar à todos&amp;#8230; Você já deve ter conhecido alguns destes pregadores de tecnologias certo? Bom, se eu pensasse da mesma forma, diria que deve seguir e usar o Redux em todas as suas aplicações e seguir de forma &amp;#8220;strict&amp;#8221;, usando EXATAMENTE como foi concebida.&lt;/p&gt;

&lt;p&gt;A experiência dos erros que cometi me diz o contrário, não há uma solução que seja ótima para todos os problemas, e é aí que entra o propósito do meu post, só agora posso esclarecer isso.&lt;/p&gt;

&lt;p&gt;Existem muitas outras fontes que ensinam de forma muito mais didática sobre o Redux, screencasts do próprio desenvolvedor que concebeu este conceito e uma documentação completa no github. Não faz sentido repassar estas informações que já estão disponíveis na web.&lt;/p&gt;

&lt;p&gt;Meu intuito é passar um pouco do aprendizado e experiência que eu tive &lt;strong&gt;usando&lt;/strong&gt; e &lt;strong&gt;adaptando&lt;/strong&gt; o Redux. Talvez isso seja útil para você que trabalha com Backbone, Angular ou qualquer outro framework. Pense no seu projeto, pense nas pessoas que vão trabalhar nele, pense no quão complexo ele é ou vai ser. Use sua criatividade para adaptar algo no conceito quando ele está verboso demais, complexo demais ou quando não serve exatamente da maneira como foi concebido, o meu conselho é que não lute para fazer com que ele &amp;#8220;caiba&amp;#8221; no seu projeto exatamente como é, pense por conta própria também.&lt;/p&gt;

&lt;h2 id=&#34;a-implementação-e-mudanças&#34;&gt;A implementação e mudanças&lt;/h2&gt;

&lt;p&gt;Para experimentar este conceito novo para mim, implementei um Todo List, não tão complexo quanto o &lt;a href=&#34;http://todomvc.com/&#34;&gt;TodoMVC&lt;/a&gt;, serviu apenas para poder fixar as idéias. As primeiras mudanças que fiz foi remover os &lt;strong&gt;actions creators&lt;/strong&gt; e as &lt;strong&gt;constantes&lt;/strong&gt;. Actions creators são funções que criam as actions (objetos) que são usados como informações pela Store. Uma action também possui uma propriedade &lt;strong&gt;type &lt;/strong&gt;que armazena qual o tipo de ação, ela é uma string e portanto na documentação oficial ela é referenciada através de uma constante.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function addTodo( text ){
    return{
        type :ADD_TODO,
        text
    }
}
&lt;/pre&gt;

&lt;p&gt;Há alguns motivos pelos quais tanto as constantes quanto as actions creators existem, principalmente em projetos muito grandes, o motivo mais óbvio é que essa granulação ajuda caso seja necessário alterar por exemplo o nome de uma constante, ou adicionar propriedades em uma action sem que seja necesário revisitar todos os lugares onde se usam as constantes ou as actions.&lt;/p&gt;

&lt;p&gt;Mas no meu caso o projeto é pequeno, e a consequência disso é que ao invés de ajudar isso acaba atrapalhando um pouco na manutenção. Se o projeto é pequeno e possui apenas um lugar onde estas actions existem, este processo acaba tornando sua arquitetura burocrática desnecessariamente, você força o programador a alterar várias partes diferentes da aplicação ainda que a mudança seja algo muito simples, costumamos chamar isso de &lt;em&gt;over engineering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;No &lt;strong&gt;Jails&lt;/strong&gt; a controller é como um módulo fechado, que controla os eventos. Para uma &lt;em&gt;todo&lt;/em&gt; list, o processo de adicionar &lt;em&gt;todos&lt;/em&gt; ou_ _remover &lt;em&gt;todos&lt;/em&gt; só fará sentido neste módulo ( neste meu projeto ). Portanto, não preciso dar tantas voltas:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import &#39;components/riot-view/riot-view&#39;
import &#39;components/submitter/submitter&#39;

import jails from &#39;jails&#39;
import store from &#39;stores/todos&#39;

jails.controller(&#39;todos&#39;, function(){

    const view = this.x(&#39;.view&#39;)

    this.init = ()=&amp;gt;{

        this.on(&#39;blur&#39;, &#39;li .form-control&#39;, save)
        this.on(&#39;click&#39;, &#39;.remove&#39;, remove)
        this.listen(&#39;submitter:post&#39;, add)

        //...
    }

    function update( state = todos.getState() ){
        view(&#39;update&#39;, state )
    }

    function save( id, text ){
        let id = +e.target.title,
            text = e.target.value
        if ( text ){
            store.dispatch({ id, text, type :&#39;UPDATE_TODO&#39; })
        }
    }

    function add( e, opt ){
        let form = e.target,
            text = opt.params.text.trim()
        if( text ){
            store.dispatch({ text, type :&#39;ADD_TODO&#39; })
        }
    }

    function remove( e ){
        let id = +e.target.title
        store.dispatch({ id, type :&#39;REMOVE_TODO&#39; })
    }
        //...
})


&lt;/pre&gt;

&lt;p&gt;Um pouco mais direto&amp;#8230;  Como podem ver no código, o Jails abstrai a parte de eventos do DOM, e interpreta qual é a ação executada pelo usuário e delega a action para o módulo &lt;strong&gt;store&lt;/strong&gt;. Aí estão algumas ações que a minha todo list espera, como adicionar um todo, remover e salvar.&lt;/p&gt;

&lt;h2 id=&#34;a-store&#34;&gt;A Store&lt;/h2&gt;

&lt;p&gt;A minha store é bem simples para este caso, não precisei fazer mudanças drásticas, o modelo da documentação já me serviu, as mudanças apenas são de forma estrutural por causa do framework que eu utilizo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import Reduxtore from &#39;modules/reduxtore/reduxtore&#39;
import storage from &#39;modules/storage/storage&#39;
import reducer from &#39;reducers/todos/index&#39;

export default (()=&amp;gt;{

    let list, store

    list = storage.session.get(&#39;todos&#39;) || []

    store = new Reduxtore( reducer, {
        filter  :&#39;all&#39;,
        todos   :list,
        items   :list
    })

    store.subscribe(()=&amp;gt;{
        storage.session.set(&#39;todos&#39;, store.getState().todos )
    })

    return store
})()
&lt;/pre&gt;

&lt;p&gt;Aqui está a definição da store da minha aplicação, eu importo um módulo AMD que abstrai o processo de local storage, para poder salvar o estado da aplicação, importo um reducer que será passado como parametro para minha store, e também defino o estado inicial e os campos que minha aplicação deve conter.&lt;/p&gt;

&lt;p&gt;A classe Reduxtore é apenas uma implementação que fiz em AMD do conceito de Store do Redux, seguindo a especificação, possui os métodos .&lt;strong&gt;getState()&lt;/strong&gt;, .&lt;strong&gt;dispatch()&lt;/strong&gt; e &lt;strong&gt;subscribe()&lt;/strong&gt;. Na especificação existem outros métodos, mas estes para mim por enquanto são suficientes.&lt;/p&gt;

&lt;p&gt;Toda vez que quero disparar uma ação utilizo .&lt;strong&gt;dispatch()&lt;/strong&gt;, o callback de uma alteração de estado é registrado pelo método .&lt;strong&gt;subscribe()&lt;/strong&gt; e sempre que quiser resgatar o estado atual da aplicação, utilizo .&lt;strong&gt;getState()&lt;/strong&gt;. No meu caso, a minha store salva os dados no local storage e resgata-os assim que inicia.&lt;/p&gt;

&lt;h2 id=&#34;reducers-e-funções-puras&#34;&gt;Reducers e Funções puras&lt;/h2&gt;

&lt;p&gt;Se a Store é responsável por manter e armazenar o estado da minha aplicação, você deve se perguntar quem faz as alterações nos estados. Eu havia dito anteriormente que são os reducers, o nome pode assustar um pouco porque podemos fazer algumas assunções, mas a grosso modo, são apenas funções puras, que recebem um estado como primeiro parâmetro e uma &amp;#8220;action&amp;#8221; como segundo parâmetro.&lt;/p&gt;

&lt;p&gt;De forma bem grosseira, funções puras são aquelas do tipo f(x, y) =&amp;gt; x + y , por exemplo, onde o resultado esperado como saída deve ser sempre o mesmo quando passados os mesmos valores. O que significa que para a função acima de exemplo, se x for 10 e y for 5 o resultado final SEMPRE será 15. Ela não pode ser não-determinística a ponto de te retornar um valor diferente para os mesmos parametros. Tipo : &lt;strong&gt;f(10, 5) = 15&lt;/strong&gt;,** &lt;span style=&#34;color: #ff0000&#34;&gt;f(10, 5) = 20&lt;/span&gt;**.&lt;/p&gt;

&lt;p&gt;Outra característica das funções puras é o fato delas não acarretarem efeitos colaterais na sua execução, ou seja, passados x, y ela apenas irão computar x e y. Não se pode inserir um z na questão, ou executar um método de I/O como ler um arquivo , executar um ajax ou mesmo alterar um elemento do dom. Por isso as funções puras são previsíveis, o que nos ajuda e muito na sanidade da nossa aplicação, ao invés disso, o que costumamos fazer é algo do tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function soma( x, y ){
    document.body.innerHTML = &#39;AHAHAHHAH&#39;
    global.var = null
    return x+y
}
&lt;/pre&gt;

&lt;p&gt;Esta função não é pura, inclusive é imunda. Esse exemplo é caricato, mas pode perceber que faz muito isso olhando pros seus códigos, esta função soma que deveria apenas somar produz efeitos colaterais, no caso acima, no DOM e numa variável global. E se retirar a linha que altera o DOM e a linha da variável global, e por algum motivo sua função retorna soma algumas vezes e outras retorna a divisão, pros mesmos parâmetros, então ela também não é pura. É interessante que mantenha em mente o que eu disse anteriormente sobre não ser um robô. Não mude todas as suas funções para funções puras. As funções impuras também tem sua utilidade.&lt;/p&gt;

&lt;p&gt;Então teríamos um reducer que modificaria um determinado campo do nosso objeto que armazena os estados da nossa aplicação.&lt;/p&gt;

&lt;p&gt;Abaixo segue a implementação do reducer que modifica o estado &lt;strong&gt;{ todos:[] } &lt;/strong&gt;da minha Store:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;export default function( state = [], action ){

    switch( action.type ){

        case &#39;ADD_TODO&#39;: return [
            ...state, {
                text        :action.text,
                completed   :false,
                edit        :false,
                id      :(Math.random() * Math.pow(10, 20))
            }
        ]

        case &#39;UPDATE_TODO&#39;: return state.map( item =&amp;gt;{
            if( item.id == action.id ){
                item.text = action.text
                item.edit = false
            }
            return item
        })

        case &#39;REMOVE_TODO&#39;: return state.filter( item =&amp;gt;
            item.id != action.id
        )

        default : return state
    }
}
&lt;/pre&gt;

&lt;p&gt;Como o estado &lt;strong&gt;todos &lt;/strong&gt;é uma lista, eu sempre vou retornar uma lista, todos os reducers recebem as ações disparadas, cabe a você definir à quais ações o seu reducer irá responder. Isso é muito legal no Redux, facilita e MUITO no processo de inserir novas features no seu projeto.&lt;/p&gt;

&lt;p&gt;Para o estado &lt;strong&gt;filter&lt;/strong&gt; que cuida dos filtros da minha todo list como &amp;#8220;completos&amp;#8221; &amp;#8220;ativos&amp;#8221; ou &amp;#8220;todos&amp;#8221;, eu crio outro reducer, responsável por alterar apenas este estado:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;export default (state = &#39;all&#39;, action) =&amp;gt;{
    return action.filter? action.filter :state
}
&lt;/pre&gt;

&lt;p&gt;Este é bem simples. Este reducer sempre vai retornar valores entre &amp;#8220;all&amp;#8221;, &amp;#8220;completed&amp;#8221;, &amp;#8220;active&amp;#8221;. Note que aqui estou desconsiderando o tratamento do action.filter, portanto se for passado um estado que não está dentro dos valores que mencionei, o código irá quebrar. Mantive desta forma por questões didáticas.&lt;/p&gt;

&lt;h2 id=&#34;combinação-de-reducers&#34;&gt;Combinação de Reducers&lt;/h2&gt;

&lt;p&gt;Lembra que na definição da minha Store, eu podia passar apenas um reducer, certo? Como eu tenho dois para essa aplicação como eu passo estes reducers se minha store recebe apenas um?&lt;/p&gt;

&lt;p&gt;Aqui é onde você percebe que as coisas encaixam&amp;#8230;  Se você tem duas funções puras que recebem um estado como primeiro parâmetro e a mesma action como segundo, basta criar uma terceira que engloba as outras duas, combinando os reducers:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import todos from &#39;reducers/todos/todo&#39;
import visibility from &#39;reducers/todos/visibility&#39;

export default ( state, action ) =&amp;gt;{

            let list = todos( state.todos, action ),
        filter   = visibility( state.filter, action ),
        filtered = todos( list, { type  :&#39;FILTER_TODO&#39;, filter })

    return {
        filter,
        todos   :list,
        items   :filtered
    }
}
&lt;/pre&gt;

&lt;p&gt;Este reducer é exatamente o que é importado lá em cima na nossa Store. Lembrando que na nossa Store, nos passamos um objeto com 3 estados, { &lt;strong&gt;todos, items, filter &lt;/strong&gt;}. Essa main reducer vai receber como primeiro parametro esse objeto com os 3 estados, e vai repassar cada estado para seu reespectivo reducer que por sua vez, vai retornar um novo estado dado aquela ação, e todos recebem a mesma action! \o/&lt;/p&gt;

&lt;p&gt;No meu main reducer ali eu mudei um pouco, fiz diferente do modo como vi na implementação do redux no TodoMVC, eu criei  um estado a mais que é o estado &lt;strong&gt;items&lt;/strong&gt;, porque este é o que aparece para o usuário, mas não é o reflexo de todos os &lt;strong&gt;todos&lt;/strong&gt; que eu possuo. O que acontecia antes de eu adicionar esse campo é que na hora de escolher por um filtro que apenas mostrava os &lt;strong&gt;todos&lt;/strong&gt; completados a minha Store automaticamente salvava este estado no session storage e eu perdia os items que estavam &lt;strong&gt;incompletos&lt;/strong&gt; por exemplo. Então eu precisava de um campo para realmente armazenar todas as entradas que eu tinha, e outro campo chamado &amp;#8220;&lt;strong&gt;items&lt;/strong&gt;&amp;#8221; que serve de forma visual na hora de filtrar os &lt;strong&gt;todos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Na documentação do redux usando React ele resolve esse problema dos itens filtrados na view. Eu particularmente prefiro ter &lt;strong&gt;menos lógica possível&lt;/strong&gt; na view e isso é só uma questão de preferência.&lt;/p&gt;

&lt;p&gt;Essa alteração foi extremamente simples e é incrível como é fácil resolver problemas deste tipo de forma elegante, não fugi do padrão do reducer, das funções puras, e consegui reutilizar o reducer &lt;strong&gt;todos &lt;/strong&gt;apenas passando a ação de filtro para a mesma lista de items usando a mesma função salvando em outro estado.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;De fato isso melhorou bastante o desenvolvimento de aplicações complexas que estava desenvolvendo, é preciso amadurecimento nessa arquitetura ainda. Faz apenas alguns meses que estou mexendo nisso e não posso incluir essa arquitetura em qualquer projeto, então o processo de amadurecimento e experiência é lento.&lt;/p&gt;

&lt;p&gt;Realmente isso resolve muitos problemas recorrentes que tinha e de quebra você ganha um poder que nem percebeu, de graça. Por concentrar todos os estados da sua aplicação em um objeto, e realizar todas as mudanças neste objeto, você pode &amp;#8220;voltar no tempo&amp;#8221;, basta fazer um subscribe na sua Store, e sempre que ela atualizar, armazene o último estado em um array. Dessa forma, como sua aplicação responde sempre à um estado, você pode incluir uma funcionalidade de &amp;#8220;undo&amp;#8221; e &amp;#8220;redo&amp;#8221;, apenas navegando entre os estados desse array =).&lt;/p&gt;

&lt;p&gt;Além disso você perde menos tempo com detalhes do DOM, delegue isso para alguma lib de template, e se concentre nos estados, isso inclusive te ajuda na hora de testar o comportamento da sua aplicação, você não precisa emular o DOM, basta testar as propriedades de cada estado.&lt;/p&gt;

&lt;h2 id=&#34;finalizando-8230&#34;&gt;Finalizando&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Bom galera, era isso que eu tinha pra falar, eu não postei a aplicação por completo para não estender ainda mais esse post, deixarei no final do post um link com o app funcionando e o código-fonte no caso de alguém se interessar. A idéia do post não é servir como referência para suas aplicações baseadas em Redux, serve apenas para instigar um pouco a curiosidade com relação à padrões e arquiteturas, deixando os frameworks em segundo plano. Há outros conceitos não discutidos como &lt;strong&gt;imutabilidade&lt;/strong&gt; e outras coisas mais, sugiro a leitura da documentação oficial para maiores detalhes.&lt;/p&gt;

&lt;p&gt;O TodoApp que fiz é um projeto feito em AMD, usando o micro-framework Jails para relacionamento entre componentes e módulos, o projeto foi escrito usando a sintaxe do ES6 usando &lt;strong&gt;Babel&lt;/strong&gt; para gerar os AMD&amp;#8217;s em ES5. Estou usando como componente de renderização o &lt;a href=&#34;http://riotjs.com/&#34; target=&#34;_blank&#34;&gt;RiotJS&lt;/a&gt; que implementa virtualDOM e é extremamente leve, tornou-se minha engine padrão nos projetos para renderização de templates, embora ela seja muito mais que isso. O Riotjs é uma ótima alternativa para quem quer colocar os conceitos do React em prática.&lt;/p&gt;

&lt;p&gt;Um grande abraço.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jails-org/Demos/tree/master/TodoApp&#34; target=&#34;_blank&#34;&gt;Jails TodoApp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree?series=getting-started-with-redux&#34; target=&#34;_blank&#34;&gt;Redux Course ( Screencasts )&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://redux.js.org/&#34; target=&#34;_blank&#34;&gt;Redux Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34; target=&#34;_blank&#34;&gt;Pure Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://riotjs.com/&#34; target=&#34;_blank&#34;&gt;RiotJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://babeljs.io/docs/plugins/transform-es2015-modules-amd/&#34;&gt;Babel &amp;amp; AMD modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Código Limpo</title>
      <link>https://tableless.github.io/hugo-public/codigo-limpo/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/codigo-limpo/</guid>
      <description>

&lt;p&gt;Um dos assuntos que costumo discutir bastante com a galera é sobre qualidade de código. Nesses papos sempre vem questões como: quais práticas podemos adotar para ter um código de alta qualidade? E como sabemos se o nosso código está bom? Como temos certeza de que estamos no caminho certo?&lt;/p&gt;

&lt;p&gt;Vou explicar meu humilde ponto de vista com exemplos e opiniões sobre qualidade de código. Vou abordar casos de uso com JavaScript, mas nada te impede aplicar muitas dessas dicas usando outras linguagens.&lt;/p&gt;

&lt;h2 id=&#34;gdd-8211-gambiarra-driven-development&#34;&gt;GDD &amp;#8211; Gambiarra Driven Development&lt;/h2&gt;

&lt;p&gt;Vamos começar pela metodologia mais antiga e talvez a mais adotada no mercado. Já trabalhei com profissionais que defendiam com unhas e dentes o não uso de padrões e boas práticas. Vamos ver as &lt;del&gt;desculpas&lt;/del&gt; justificativas mais usadas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;O projeto é muito simples. Não precisa de muita frescura.&lt;/li&gt;
&lt;li&gt;Faço isso há muitos anos e dificilmente tenho problemas.&lt;/li&gt;
&lt;li&gt;Desse jeito entrego em 10 minutos o que faríamos em horas.&lt;/li&gt;
&lt;li&gt;Não preciso padronizar, o código tá fácil de entender.&lt;/li&gt;
&lt;li&gt;Não temos tempo para documentar.&lt;/li&gt;
&lt;li&gt;Não temos tempo para escrever testes.&lt;/li&gt;
&lt;li&gt;Não temos tempo para refatorar.&lt;/li&gt;
&lt;li&gt;Esse código aí não é meu.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conseguiu se lembrar de alguns momentos na sua carreira, onde você já falou ou ouviu qualquer uma das frases acima? Não? Sortudo!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Não acredito que é errado você usar uma gambiarra para resolver um erro, desde que posteriormente você empregue uma solução mais robusta. O problema maior ocorre quando o uso de soluções paliativas se tornam frequentes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mas de longe esse é o único ou pior problema que encontramos na codificação. Gambiarras e &lt;em&gt;anti-patterns&lt;/em&gt; podem ser bons e eficientes a curto prazo, mas a longo prazo te mostram o inferno na terra.&lt;/p&gt;

&lt;p&gt;Vou apontar algumas boas práticas voltadas á escrita de código e o motivo para usá-las.&lt;/p&gt;

&lt;h2 id=&#34;antes-de-tudo-8230&#34;&gt;Antes de tudo&amp;#8230;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Você como desenvolvedor, tem a obrigação de entender cada linha de código que você escreve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Estude boas práticas e metodologias sempre. Mas não seja ingênuo a ponto de acreditar que a adoção de uma delas irá salvar parte do seu projeto/equipe. Muitas soluções podem trazer novos problemas. Quantas vezes a solução de um bug gerou outros 10 na aplicação? Por isso é necessário sempre ter na equipe alguém experiente com bastante vivência, que saiba direcionar o projeto nesses cenários.&lt;/p&gt;

&lt;p&gt;Já vi projetos que começaram repletos de boas práticas, e terminaram desastrados por conta da falta de maturidade prática da equipe. O ponto inicial que jamais deve ser ignorado é: &lt;strong&gt;você como desenvolvedor, tem a obrigação de entender cada linha de código que você escreve&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;no-caminho-certo&#34;&gt;No caminho certo&lt;/h2&gt;

&lt;p&gt;Seu código atual tem uma qualidade superior comparado com o que você escreveu há 6 meses atrás? Se sua resposta for sim, isso indica que você está no caminho certo. Programação é algo em constante evolução, o você programador, também deve evoluir. Com o passar dos anos seu código deve se tornar mais bem organizado, limpo e elegante.&lt;/p&gt;

&lt;p&gt;Uma leitura obrigatória é o livro &lt;a href=&#34;http://www.saraiva.com.br/clean-code-a-handbook-of-agile-software-craftsman-3095979.html&#34; target=&#34;_blank&#34;&gt;Clean Code&lt;/a&gt;. Muitos artigos e palestras sobre boas práticas (incluindo esse artigo), repetem pontos abordados nesse livro. Já vi até empresas cobrando a leitura desse livro como requisito para contratação.&lt;/p&gt;

&lt;h2 id=&#34;código-limpo&#34;&gt;Código Limpo&lt;/h2&gt;

&lt;p&gt;Enquanto o _GDD_ pode te dar felicidade a curto prazo, escrever código de forma limpa e consistente vai te garantir um futuro mais confortável. Você terá um código de fácil entendimento, o que tornará sua manutenção mais eficiente. E se você for um garoto prendado e cobrir sua aplicação com o máximo possível de testes, erros de regressão não irão mais chatear teu cliente/chefe.&lt;/p&gt;

&lt;p&gt;Vou focar em poucos pontos. Se quiser mais conteúdo, leia o &lt;a href=&#34;http://www.saraiva.com.br/clean-code-a-handbook-of-agile-software-craftsman-3095979.html&#34; target=&#34;_blank&#34;&gt;Clean Code&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-review&#34;&gt;Code Review&lt;/h3&gt;

&lt;p&gt;Sempre peça para um colega revisar teu código. Se outra pessoa entendeu perfeitamente o que você escreveu, é um bom sinal.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Qualquer tolo consegue escrever código que um computador entenda. Bons programadores escrevem código que humanos possam entender.&amp;#8221; &amp;#8211; Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;linters&#34;&gt;Linters&lt;/h3&gt;

&lt;p&gt;Ferramentas que escaneiam nosso código procurando o uso de más práticas e possíveis erros de execução, são nossos aliados. No dia-a-dia costumo usar o &lt;a href=&#34;http://jshint.com/&#34; target=&#34;_blank&#34;&gt;JSHint&lt;/a&gt; e agora meu novo parceiro: &lt;a href=&#34;https://github.com/danielstjules/jsinspect&#34; target=&#34;_blank&#34;&gt;JSInspect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Gosto do JSHint pelo fato de poder customizar algumas regras. Já o JSInspect te ajuda á identificar o padrão &lt;em&gt;copy &amp;amp; paste&lt;/em&gt;, te ajudando a escrever módulos melhores.&lt;/p&gt;

&lt;h3 id=&#34;nomenclaturas&#34;&gt;Nomenclaturas&lt;/h3&gt;

&lt;p&gt;Quando me perguntam qual parte da programação eu acho mais difícil, respondo na lata: nomear coisas.&lt;/p&gt;

&lt;p&gt;Passamos boa parte do tempo fazendo isso no nosso código, nomeando funções, variáveis, classes, namespaces, etc. Muitas vezes demoramos até chegar em um resultado bacana.&lt;/p&gt;

&lt;h3 id=&#34;seja-verboso&#34;&gt;Seja verboso&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Existem duas coisas muito difíceis na Ciência da Computação: invalidar cache e dar nome às coisas.&amp;#8221; &amp;#8211; Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consegue me dizer se você entende de cara o que faz a instrução abaixo?&lt;/p&gt;

&lt;pre&gt;u.cptTasks = false;&lt;/pre&gt;

&lt;p&gt;E agora com o código abaixo?&lt;/p&gt;

&lt;pre&gt;var u = new User();
u.name = &#39;Joana Souza&#39;;
u.adminPerm = true;
u.cptTasks = false;
u.save();&lt;/pre&gt;

&lt;p&gt;Conseguiu entender tudo? Vamos ver se fica mais fácil:&lt;/p&gt;

&lt;pre&gt;var user = new User();
user.name = &#39;Joana Souza&#39;;
user.hasAdministratorPermissions = true;
user.didCompleteAllTasks = false;
user.save();&lt;/pre&gt;

&lt;p&gt;Nomear a variável como &lt;em&gt;u&lt;/em&gt; não ajudou muito. Principalmente se você for reutilizar essa variável muitas linhas abaixo. Abreviações também atrapalham bastante. Duvido que de imediato você soube o significado de &lt;em&gt;u.cptTasks&lt;/em&gt;. Pode ter tido várias idéias, o que te guiou ao velho &lt;em&gt;achismo&lt;/em&gt;. E quantos erros já não cometemos pelo simples fato de _acharmos_ isso ou aquilo?&lt;/p&gt;

&lt;h3 id=&#34;considere-o-uso-da-nossa-querida-língua-portuguesa&#34;&gt;Considere o uso da nossa querida Língua Portuguesa&lt;/h3&gt;

&lt;p&gt;Usar a língua portuguesa para nomear coisas pode ser muito bom, principalmente para os novatos. Pelo simples motivo de que fazendo isso, fica mais visível o que é API nativa da linguagem/browser, e API proprietária. Dá uma olhada:&lt;/p&gt;

&lt;pre&gt;var usuario = new Usuario();
usuario.nome = &#39;Joana Souza&#39;;
usuario.temPermissoesAdministrativas = true;
usuario.completouTodasTarefas = false;
usuario.salvar();&lt;/pre&gt;

&lt;p&gt;Ficou mais confortável né? Seu cérebro praticamente se deu ao único trabalho de compreender o código. Não precisou traduzir de um idioma para outro. Mas isso é também uma faca de dois gumes.&lt;/p&gt;

&lt;p&gt;Conhecer a língua inglesa é extremamente importante no mundo da programação, pois muitas documentações e materiais estão nesse idioma. Logo, nomear coisas em português te tira a oportunidade de praticar o idioma, pelo menos na forma escrita. Vale á pena bater um papo com a sua equipe á respeito disso.&lt;/p&gt;

&lt;h3 id=&#34;adote-uma-convenção&#34;&gt;Adote uma convenção&lt;/h3&gt;

&lt;p&gt;A adoção de uma convenção facilita muito na padronização de estilo de escrita e organização de código. É uma ótima opção iniciar com alguma existente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://snowdream.github.io/javascript-style-guide/javascript-style-guide/br/naming-conventions.html&#34; target=&#34;_blank&#34;&gt;Convenção de Nomenclatura &amp;#8211; Airbnb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://andrecomws.com/lab/code-standards/&#34; target=&#34;_blank&#34;&gt;Padrões de Código Front-End &amp;#8211; Isobar&lt;/a&gt; (a versão original está &lt;a href=&#34;http://isobar-idev.github.io/code-standards/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript.crockford.com/code.html&#34; target=&#34;_blank&#34;&gt;Convenções do Douglas Crockford&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/styleguide/javascriptguide.xml&#34; target=&#34;_blank&#34;&gt;Padrões de Código da Google&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bônus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Leitura obrigatória: &lt;a href=&#34;http://jstherightway.org/pt-br/&#34; target=&#34;_blank&#34;&gt;JavaSript the Right Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;variáveis-e-funções-não-utilizadas&#34;&gt;Variáveis e funções não utilizadas&lt;/h3&gt;

&lt;p&gt;Variáveis e funções não utilizadas são um belo exemplo de sujeira. Alguma vez você já deu manutenção em algum código, cujo algum tempo foi investido para compreender o que foi escrito, pra no final das contas perceber que o código estava morto, sem utilização? Chato, né?&lt;/p&gt;

&lt;p&gt;Pra se livrar dessa sujeira é bem simples: ninguém está usando? Apague! Essa regra também vale para código comentado.&lt;/p&gt;

&lt;h3 id=&#34;reinvenção-da-roda&#34;&gt;Reinvenção da roda&lt;/h3&gt;

&lt;p&gt;Esse erro é geralmente cometido por novos e &lt;em&gt;antigos juniores&lt;/em&gt; (entendo como antigo júnior aquele profissional que programa há muitos anos, mas nunca se interessou em aprofundar em uma linguagem).&lt;/p&gt;

&lt;p&gt;O fato de não conhecer muito bem a API da linguagem, pode te levar á reinventar á roda.&lt;/p&gt;

&lt;p&gt;Um exemplo disso é quando precisamos fazer um filtro em um array. Quem não está familiarizado, irá primeiramente fazer o bom e velho &lt;em&gt;for&lt;/em&gt;, possivelmente desconhecendo outras opções como &lt;em&gt;Array.filter&lt;/em&gt; e &lt;em&gt;Array.map&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;funções-pequenas&#34;&gt;Funções Pequenas&lt;/h3&gt;

&lt;p&gt;Funções devem ser claras, objetivas e pequenas. Respeite a regra da responsabilidade única: sua função deve fazer somente uma coisa, e deve fazê-la muito bem.&lt;/p&gt;

&lt;p&gt;Dá uma olhada no exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;usuario.salvar()

...

function salvar() {
    var camposObrigatorios = [ &#39;nome&#39;, &#39;email&#39;, &#39;cpf&#39; ];

    camposObrigatorios.forEach( ( propriedade ) =&amp;gt; {
        if ( !usuario[ propriedade ] ) {
            throw new Error( `É obrigatório informar o ${ propriedade } do usuário.` );
        }
    } );

    $http.post( &#39;http://app.com/api/usuario&#39;, usuario )
        .success( ... )
        .error( ... )
        .finally( ... );
}&lt;/pre&gt;

&lt;p&gt;Pelo nome da função ficou claro o objetivo dela. Mas analisando vemos a implementação de duas coisas: validação e persistência dos dados. Poderíamos dividir as responsabilidades da seguinte forma:&lt;/p&gt;

&lt;pre&gt;validarUsuario() &amp;&amp; usuario.salvar();

...

function validarUsuario() {
    var camposObrigatorios = [ &#39;nome&#39;, &#39;email&#39;, &#39;cpf&#39; ];

    camposObrigatorios.forEach( ( propriedade ) =&amp;gt; {
        if ( !usuario[ propriedade ] ) {
            throw new Error( `É obrigatório informar o ${ propriedade } do usuário.` );
        }
    } );

    return true;
}

function salvar() {
    $http.post( &#39;http://app.com/api/usuario&#39;, usuario )
        .success( ... )
        .error( ... )
        .finally( ... );
}&lt;/pre&gt;

&lt;p&gt;Manter suas funções enxutas te auxilia á praticar o reuso do código.&lt;/p&gt;

&lt;p&gt;Esse é um assunto que pode ser extenso. Uma discussão bem bacana rolou no StackOverflow. Dá uma olhada &lt;a href=&#34;http://pt.stackoverflow.com/questions/30772/uma-fun%C3%A7%C3%A3o-grande-ou-muitas-pequenas&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;comentários&#34;&gt;Comentários&lt;/h3&gt;

&lt;p&gt;Já ouvi dizer que código semântico dispensa comentários. Concordo parcialmente com isso. Acredito que é válido usar comentários nas seguintes situações:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utilização muito pouco comum de uma parte da API pode ajudar a galera mais nova&lt;/li&gt;
&lt;li&gt;Nem sempre conseguimos deixar nosso código semântico, a ponto dele &lt;em&gt;contar o que está acontecendo&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Existem poucos momentos em que devemos fazer uso de uma má prática. E é bom deixar documentado o motivo antes que alguém refatore e quebre alguma funcionalidade&lt;/li&gt;
&lt;li&gt;Sua aplicação expõe uma API pública. Sugiro o uso do &lt;a href=&#34;http://usejsdoc.org/&#34; target=&#34;_blank&#34;&gt;JSDocs&lt;/a&gt; para manter um padrão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora  &lt;strong&gt;/* código comentado */ &lt;/strong&gt;é algo deve ter pouquíssima tolerância.&lt;/p&gt;

&lt;h3 id=&#34;indentação&#34;&gt;Indentação&lt;/h3&gt;

&lt;p&gt;Esse é conhecido como &lt;em&gt;problema de perfumaria&lt;/em&gt;. Saca só:&lt;/p&gt;

&lt;pre&gt;if(usuario.idade!==null||usuario.idade!==undefined||typeof usuario.idade == &#39;number&#39;||usuario.idade&amp;lt;18){
  alert(&#39;O usuário não possui idade suficiente para ser cadastrado nesse sistema.&#39;);
  return false;
}else{
    usuario.salvar();
}&lt;/pre&gt;

&lt;p&gt;Lindo né? Que tal dar mais espaço pra essa bagunça?&lt;/p&gt;

&lt;pre&gt;if ( usuario.idade &amp;&amp; typeof usuario.idade === &#39;number&#39; &amp;&amp; usuario.idade &amp;lt; 18 ) {
    alert( &#39;O usuário não possui idade suficiente para ser cadastrado nesse sistema.&#39; );
    return false;
}

usuario.salvar();&lt;/pre&gt;

&lt;p&gt;E agora? Ficou mais fácil de ler?&lt;/p&gt;

&lt;p&gt;Enfiar todo o código em uma pequena lata de sardinha pode dificultar um pouco a sua compreensão, por mais que o seu editor de texto ou IDE tenha um highlight com alto contraste. Uma ferramenta bacana pra te ajudar á manter esse padrão é o &lt;a href=&#34;http://jscs.info/&#34; target=&#34;_blank&#34;&gt;JSCS&lt;/a&gt;. Gosto de usar o preset jQuery dessa ferramenta, pois o código fica com mais espaçamento, deixando o mais confortável para ler.&lt;/p&gt;

&lt;h3 id=&#34;vale-lembrar-que-8230&#34;&gt;Vale lembrar que&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Muitas dicas dadas aqui retirei do livro Clean Code, e outras aprendi com o passar do tempo em experiência com diversos projetos. O seu comentário com um ponto de vista diferente pode me ajudar á aprender mais sobre o assunto.&lt;/p&gt;

&lt;p&gt;Espero ter ajudado.&lt;/p&gt;

&lt;p&gt;=)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Transition e CSS Animation</title>
      <link>https://tableless.github.io/hugo-public/transition-e-animation/</link>
      <pubDate>Fri, 19 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/transition-e-animation/</guid>
      <description>

&lt;h2 id=&#34;transition-prazer&#34;&gt;Transition. Prazer!&lt;/h2&gt;

&lt;blockquote cite=&#34;http://www.w3schools.com/css3/css3_transitions.asp&#34;&gt;
  &lt;p&gt;
    &amp;#8220;Com CSS3, podemos adicionar um efeito quando o navegador troca de um estilo para outro, sem usar animações em Flash ou JavaScript.&amp;#8221; &amp;#8211; w3schools
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mostrar um feedback ao usuário quando ele passar o mouse sobre um link (&lt;em&gt;:hover&lt;/em&gt;) ou quando ele der foco em um campo input (&lt;em&gt;:focus&lt;/em&gt;) são boas práticas. Há muitos jeitos de fazermos isso: mudando a cor do texto, tirando o &lt;em&gt;underline da palavra&lt;/em&gt;, alterando a borda do &lt;em&gt;input&lt;/em&gt; que recebeu o foco ou até alterando a cor de &lt;em&gt;background&lt;/em&gt; do elemento. (&lt;a href=&#34;http://www.smashingmagazine.com/2010/02/13/the-definitive-guide-to-styling-web-links/&#34;&gt;Esse&lt;/a&gt; artigo da &lt;em&gt;Smashing Magazine&lt;/em&gt; trata muito bem a questão da estilização de links).&lt;/p&gt;

&lt;p&gt;Normalmente fazemos isso alterando o valor de uma propriedade &lt;em&gt;CSS&lt;/em&gt; no estado &lt;em&gt;:hover&lt;/em&gt; ou &lt;em&gt;:focus&lt;/em&gt; do elemento. Quando fazemos isso, o resultado é instantâneo. Melhor dizendo, a alteração ocorre imediatamente ao usuário fazer a ação (seja passar o mouse sobre o elemento ou este ganhar foco). A alteração ocorre de forma brusca, do valor antigo da propriedade para o novo valor. Por exemplo, quando temos um elemento com borda colorida, e utilizamos o estado &lt;em&gt;:hover&lt;/em&gt; para alterarmos a cor da borda, essa transição entre uma cor e outra acontece imediatamente assim que você passa o mouse em cima do elemento.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { 
   display: block;
   background-color: #666;
   width: 100px;
   height: 40px;
   border: solid 5px red;
}

div:hover { border: solid 5px black; }&lt;/pre&gt;

&lt;p&gt;É aí que entra a &lt;strong&gt;transition&lt;/strong&gt; do &lt;em&gt;CSS3&lt;/em&gt;. Ela analisa a mudança de valor entre a propriedade e faz com que essa transição, ao invés de ocorrer de forma brusca, ocorra suavemente em um tempo determinado.&lt;/p&gt;

&lt;blockquote cite=&#34;http://www.w3.org/TR/css3-transitions/&#34;&gt;
  &lt;p&gt;
    &amp;#8220;CSS transitions permite que as mudanças nos valores das propriedades CSS ocorram suavemente sobre uma duração especificada.&amp;#8221; &amp;#8211; w3c
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nesse &lt;a href=&#34;http://codepen.io/raphaelfabeni/full/Fkbej&#34;&gt;exemplo&lt;/a&gt;, passe o mouse sobre o logo do Tableless abaixo e veja um exemplo da propriedade &lt;em&gt;transition&lt;/em&gt; em conjunto com a propriedade &lt;em&gt;transform&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tá-legal-entendi-mas-como-faz&#34;&gt;Tá legal, entendi. Mas como faz?&lt;/h3&gt;

&lt;p&gt;A propriedade transition possui quatro propriedades para você configurar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;transition-property&lt;/em&gt;*,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;transition-duration&lt;/em&gt;*,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;transition-timing-function&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;e &lt;em&gt;transition-delay&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;* propriedades obrigatórias na declaração. As demais caso omitidas, assumem seu valor &lt;i&gt;default&lt;/i&gt;.&lt;/small&gt; &lt;strong&gt;transition-property&lt;/strong&gt;: Nome da propriedade &lt;em&gt;CSS&lt;/em&gt; sobre a qual o efeito da transição vai ser aplicado. É obrigatória na declaração pois caso seja omitida, não existirá uma propriedade para se aplicar o efeito da transição. É possível ainda aplicar uma mesma transição para todas as propriedades &lt;em&gt;CSS&lt;/em&gt; do elemento, basta colocar o valor &lt;em&gt;all&lt;/em&gt;. &lt;a href=&#34;http://www.w3.org/TR/css3-transitions/#animatable-properties-&#34;&gt;Aqui&lt;/a&gt; você encontra uma tabela com todas as propriedades que suportam &lt;em&gt;transition&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;transition-property: border-color;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;transition-duration&lt;/strong&gt;: Duração do efeito em segundos (o padrão é 0). Também é obrigatória na declaração pois, se omitida, assume seu valor &lt;em&gt;default&lt;/em&gt; que é zero e a transição não vai ter efeito.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;transition-duration: 1s;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;transition-timing-function&lt;/strong&gt;: Forma como a transição progride no tempo (o padrão é &lt;em&gt;ease&lt;/em&gt;). Falando de um jeito mais fácil, é como se comporta o ritmo da transição durante o efeito. Pode ser usado de duas maneiras: uma é utilizando alguns valores já pré-definidos que são:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;linear&lt;/em&gt;, &lt;em&gt;ease&lt;/em&gt;, &lt;em&gt;ease-in&lt;/em&gt;, &lt;em&gt;ease-out&lt;/em&gt; e &lt;em&gt;ease-in-out&lt;/em&gt;;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;transition-timing-function: linear;&lt;/pre&gt;

&lt;p&gt;&amp;#8230;e a outra é definindo uma função customizada, especificando quatro coordenadas para definir a &lt;em&gt;cubic bezier curve&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;transition-timing-function: cubic-bezier(0.005, 0.625, 0.365, 0.0840);&lt;/pre&gt;

&lt;p&gt;Esse &lt;a href=&#34;http://matthewlein.com/ceaser/&#34;&gt;site&lt;/a&gt; ajuda e muito. Tanto para entender o funcionamento da cubic bezier, quanto para customizar a sua própria transição.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;transition-delay&lt;/strong&gt;: Define a partir de quanto tempo (em segundos) o efeito da transição vai se iniciar (o padrão é 0).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;transition-delay: 0.1s;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Passe&lt;/strong&gt; o mouse sobre o retângulo cinza no exemplo abaixo para ver a &lt;em&gt;transition&lt;/em&gt; em ação:&lt;/p&gt;

&lt;p&gt;*Nos exemplos a seguir, para facilitar a leitura, não utilizei prefixos. Mas, recomendo que dêem uma olhada no &lt;a href=&#34;http://caniuse.com/css-transitions&#34;&gt;Can I Use&lt;/a&gt; para usar os prefixos correspondentes para cada browser.&lt;/p&gt;

&lt;pre class=&#34;codepen&#34;&gt;&lt;/pre&gt;

&lt;p&gt;No exemplo acima, a propriedade que recebeu o efeito da &lt;em&gt;transição&lt;/em&gt; é a &lt;em&gt;border-color&lt;/em&gt;, a &lt;em&gt;duração&lt;/em&gt; do efeito é de &lt;em&gt;1 segundo&lt;/em&gt;, o &lt;em&gt;efeito&lt;/em&gt; (ou ritmo) é &lt;em&gt;linear&lt;/em&gt; e o &lt;em&gt;delay&lt;/em&gt; para a transição se iniciar é de &lt;em&gt;0.1 segundo&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;escrevendo-menos-8230&#34;&gt;Escrevendo menos&amp;#8230;&lt;/h3&gt;

&lt;p&gt;É possível encurtar a sintaxe em um shortcode bem simples. Basta declarar a propriedade &lt;em&gt;transition&lt;/em&gt; que ela agrupa as quatro propriedades específicas que vimos acima. As palavras mágicas e a ordem são as seguintes:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { transition: |property| |duration| |timing-function| |delay|; }&lt;/pre&gt;

&lt;p&gt;O exemplo visto acima ficaria dessa maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { transition: border-color 1s linear 0.1s; }&lt;/pre&gt;

&lt;p&gt;Um outro exemplo, agora adicionando o efeito da transição na &lt;em&gt;opacidade&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;codepen&#34;&gt;&lt;/pre&gt;

&lt;p&gt;No exemplo acima, se olharmos a aba do &lt;em&gt;CSS&lt;/em&gt; identificamos a seguinte chamada:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div &amp;gt; a {
   display: block;
   transition: opacity 0.5s;
}&lt;/pre&gt;

&lt;p&gt;Podemos notar que as propriedades &lt;em&gt;timing-function&lt;/em&gt; e &lt;em&gt;delay&lt;/em&gt; foram omitidas. Com isso, elas assumem seus valores &lt;em&gt;default&lt;/em&gt; que são &lt;em&gt;ease&lt;/em&gt; e __ respectivamente.&lt;/p&gt;

&lt;h3 id=&#34;e-mais-de-uma-propriedade-tem-como&#34;&gt;E mais de uma propriedade.. tem como?&lt;/h3&gt;

&lt;p&gt;É possível aplicar transições diferentes para mais de uma propriedade em um mesmo elemento. Para isso é só você separar cada bloco de declaração de efeito com vírgulas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { transition: opacity 0.5s, padding 0.25s; }&lt;/pre&gt;

&lt;p&gt;No código acima definimos duas transições:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a primeira com o efeito da transição aplicado na opacidade, que já havia sido configurada no exemplo anterior;&lt;/li&gt;
&lt;li&gt;a segunda que define que a propriedade a receber o efeito da transição é o &lt;em&gt;padding&lt;/em&gt;, a &lt;em&gt;duração&lt;/em&gt; vai ser de &lt;em&gt;0.25 segundos&lt;/em&gt;, o &lt;em&gt;ritmo&lt;/em&gt; como está omitido assume seu valor &lt;em&gt;default&lt;/em&gt; que é &lt;em&gt;ease&lt;/em&gt; e o &lt;em&gt;delay&lt;/em&gt;, como também está omitido, assume seu valor &lt;em&gt;default&lt;/em&gt; que é __.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;codepen&#34;&gt;&lt;/pre&gt;

&lt;p&gt;É possível ainda definir uma transição padrão para todas as propriedades de um elemento:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { transition: all 1s linear; }&lt;/pre&gt;

&lt;p&gt;No caso, definimos o valor &lt;em&gt;all&lt;/em&gt; para a &lt;em&gt;property&lt;/em&gt;, o que significa que &lt;strong&gt;todas&lt;/strong&gt; as transições do elemento terão a &lt;em&gt;duração&lt;/em&gt; de &lt;em&gt;1 segundo&lt;/em&gt;, o &lt;em&gt;ritmo&lt;/em&gt; será &lt;em&gt;linear&lt;/em&gt; e o &lt;em&gt;delay&lt;/em&gt; será __.&lt;/p&gt;

&lt;h3 id=&#34;suporte&#34;&gt;Suporte&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IE&lt;/strong&gt; 10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FF&lt;/strong&gt; 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chrome&lt;/strong&gt; 4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Safari&lt;/strong&gt; 3.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opera&lt;/strong&gt; 10.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;Fonte: &lt;a href=&#34;http://caniuse.com/css-transitions&#34;&gt;Can I Use&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&#34;animation&#34;&gt;Animation&lt;/h2&gt;

&lt;blockquote cite=&#34;http://www.w3schools.com/css3/css3_animations.asp&#34;&gt;
  &lt;p&gt;
    &amp;#8220;Com CSS3, conseguimos criar animações que podem substituir imagens animadas, animações em Flash e JavaScript em muitas páginas web&amp;#8221; &amp;#8211; w3schools
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;a-regra-dos-keyframes&#34;&gt;A regra dos keyframes&lt;/h3&gt;

&lt;p&gt;Indo direto ao ponto: É aonde as animações são criadas.&lt;/p&gt;

&lt;p&gt;Um keyframe descreve como o elemento que vai ser animado, deve ser renderizado em uma determinada &lt;strong&gt;fase&lt;/strong&gt;, durante a sequência da animação.&lt;/p&gt;

&lt;p&gt;Ou seja, cada keyframe contém uma ou mais propriedades CSS que vão ser aplicadas no elemento que será ser animado e, a animação se encarrega de mudar de um keyframe para outro, aplicando a transição entre as mudanças de CSS.&lt;/p&gt;

&lt;p&gt;A sintaxe para a criação de keyframes é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@keyframes nomedaanimacao {
   seletores-keyframe { estilo css para esse determinado keyframe; }
}&lt;/pre&gt;

&lt;p&gt;Existem duas maneiras para se criar nossos amigos keyframes:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@keyframes animacao {
   from {
      width: 100px; 
      background: black;
   }
   to { 
     background: yellow;
      width: 200px;
   }
}&lt;/pre&gt;

&lt;p&gt;É a forma mais básica, onde definimos um início e um fim para a animação. No exemplo acima, &lt;em&gt;from&lt;/em&gt; é equivalente ao início da animação (&lt;em&gt;0%&lt;/em&gt;) e &lt;em&gt;to&lt;/em&gt; é equivalente ao final da animação (&lt;em&gt;100%&lt;/em&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@keyframes animacaoBolada {
   0%   { 
      background: black;
      width: 100px;
   }
   25%  { background: green; }
   50%  { background: blue; }
   75%  { background: red; }
   100% { 
      background: yellow;
      width: 200px;
   }
}&lt;/pre&gt;

&lt;p&gt;Já essa é a maneira que temos maior controle da animação. Para isso, utilizamos porcentagem para definir os &lt;em&gt;keyframes&lt;/em&gt;. No código acima, a animação possui 5 passos e, a &lt;strong&gt;porcentagem é relativa à duração da animação&lt;/strong&gt; que vai ser definida posteriormente.&lt;/p&gt;

&lt;p&gt;Com a animação criada nos &lt;em&gt;keyframes&lt;/em&gt;, precisamos vinculá-la a algum seletor, &lt;strong&gt;caso contrário a animação não terá nenhum efeito&lt;/strong&gt;. Para fazer isso, temos que declarar pelo menos duas propriedades que são obrigatórias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;o nome da animação (igual ao especificado nos &lt;em&gt;keyframes&lt;/em&gt;);&lt;/li&gt;
&lt;li&gt;a duração da animação (se não for declarada, a animação não se inicia pois o valor padrão é 0).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Confira no &lt;a href=&#34;http://cdpn.io/eCGhx&#34;&gt;exemplo&lt;/a&gt; as animações com os dois modelos de &lt;em&gt;keyframes&lt;/em&gt; citados acima:&lt;/p&gt;

&lt;p&gt;Mas a &lt;em&gt;animation&lt;/em&gt; do CSS3 possui mais propriedades. Vamos conhecer as outras&amp;#8230;.&lt;/p&gt;

&lt;h3 id=&#34;as-propriedades&#34;&gt;As propriedades&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;animation-name&lt;/strong&gt;: Nome da animação especificada nos &lt;em&gt;@keyframes&lt;/em&gt;;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-name: animacaoBolada;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-duration&lt;/strong&gt;: Quanto tempo, em segundos ou milisegundos, durará um ciclo da animação (o padrão é 0).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-duration: 5s;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-timing-function&lt;/strong&gt;: Forma como a animação progride no tempo (o padrão é &lt;em&gt;ease&lt;/em&gt;). Do mesmo modo que a propriedade &lt;em&gt;transition&lt;/em&gt;, pode ser usada de duas maneiras: uma é utilizando alguns valores já pré-definidos que são:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;linear&lt;/em&gt;, &lt;em&gt;ease&lt;/em&gt;, &lt;em&gt;ease-in&lt;/em&gt;, &lt;em&gt;ease-out&lt;/em&gt; e &lt;em&gt;ease-in-out&lt;/em&gt;;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-timing-function: ease;&lt;/pre&gt;

&lt;p&gt;&amp;#8230; e a outra é definindo uma função customizada, especificando quatro coordenadas para definir a &lt;em&gt;cubic bezier curve&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-timing-function: cubic-bezier(0.005, 0.0625, 0.365, 0.0840);&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-delay&lt;/strong&gt;: Define a partir de quanto tempo a animação vai se iniciar (o padrão é 0).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-delay: 0.2s;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-iteration-count&lt;/strong&gt;: Determina o número de vezes que a animação vai se repetir (o padrão é 1). Podemos deixar a animação repetindo infinitamente, basta especificar o valor &lt;em&gt;infinite&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-iteration-count: infinite;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-direction&lt;/strong&gt;: Especifica se ao final da animação, ela deve reiniciar seu fluxo normalmente (&lt;em&gt;normal&lt;/em&gt;), que é o padrão, ou voltar no sentido inverso (&lt;em&gt;reverse&lt;/em&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-direction: reverse;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;animation-play-state&lt;/strong&gt;: Define se a animação está rodando (&lt;em&gt;running&lt;/em&gt;), que é o padrão, ou pausada (&lt;em&gt;paused&lt;/em&gt;).&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;animation-play-state: running;&lt;/pre&gt;

&lt;h3 id=&#34;montando-o-bolo-8230&#34;&gt;Montando o bolo&amp;#8230;&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
   animation-name: animacaoBolada;
   animation-duration: 5s;
   animation-timing-function: ease;
   animation-delay: 1s;
   animation-iteration-count: infinite;
   animation-direction: alternate;
   animation-play-state: running;
}&lt;/pre&gt;

&lt;h3 id=&#34;escrevendo-menos-8230-1&#34;&gt;Escrevendo menos&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Da mesma forma que a propriedade &lt;em&gt;transition&lt;/em&gt;, também é possível encurtar a sintaxe em um &lt;em&gt;shortcode&lt;/em&gt;. Basta declarar a propriedade &lt;em&gt;animation&lt;/em&gt; que ela agrupa todas as propriedades que vimos acima. As palavras mágicas e a ordem são as seguintes:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
   |name| |duration| |timing-function| |delay| |iteration-count| |direction| |play-state|;
}&lt;/pre&gt;

&lt;p&gt;O &lt;em&gt;bolo&lt;/em&gt; acima ficaria dessa maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div { animation: animacaoBolada 5s ease 1s infinite alternate; }&lt;/pre&gt;

&lt;p&gt;Mais dois exemplos (&lt;a href=&#34;http://cdpn.io/qHkgJ&#34;&gt;1&lt;/a&gt; e &lt;a href=&#34;http://cdpn.io/csubG&#34;&gt;2&lt;/a&gt;) em conjunto com a propriedade &lt;em&gt;transform&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;suporte-1&#34;&gt;Suporte&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IE&lt;/strong&gt; 10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FF&lt;/strong&gt; 5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chrome&lt;/strong&gt; 4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Safari&lt;/strong&gt; 4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opera&lt;/strong&gt; 12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;Fonte: &lt;a href=&#34;http://caniuse.com/css-animation&#34;&gt;Can I Use&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adobe Edge</title>
      <link>https://tableless.github.io/hugo-public/adobe-edge/</link>
      <pubDate>Wed, 26 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/adobe-edge/</guid>
      <description>&lt;p&gt;A &lt;a href=&#34;http://tableless.com.br/adobe-e-os-padroes-web/&#34;&gt;Adobe tem ajudado demais&lt;/a&gt; o mercado de desenvolvimento web nos últimos tempos. Ela entendeu que a perda do mercado do Flash não foi uma derrota, pelo contrário. Com esse cenário ela criou o Edge, uma suite de desenvolvimento que reúne diversas soluções que ajudam o desenvolvedor web a produzir serviços e websites utilizando as últimas novidades dos padrões web. Como diz parte da Missão descrito no site deles:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Adobe makes tools that enable designers and developers to share their creativity with the world. The advent of sophisticated graphical and interactive features has made it possible for the web to deliver highly engaging experiences. For Adobe, that means the need for new creative tools and services.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/09/edge_reflow_hero-300x164.png&#34; alt=&#34;&#34; title=&#34;edge_reflow_hero&#34; width=&#34;300&#34; height=&#34;164&#34; class=&#34;alignleft size-medium wp-image-6972&#34; srcset=&#34;uploads/2012/09/edge_reflow_hero-300x164.png 300w, uploads/2012/09/edge_reflow_hero.png 900w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;O novo &lt;a href=&#34;http://html.adobe.com/edge/&#34; title=&#34;Ferramentas para Desenvolvedores Web&#34; target=&#34;_blank&#34;&gt;Adobe Edge&lt;/a&gt; inclue ferramentas como o &lt;a href=&#34;http://html.adobe.com/edge/animate/&#34; title=&#34;Animações com CSS e Javascript&#34; target=&#34;_blank&#34;&gt;Edge Animate 1.0&lt;/a&gt;, uma ferramenta que cria animações baseadas em HTML, CSS e Javascript. Há também o &lt;a href=&#34;http://html.adobe.com/edge/inspect/&#34; title=&#34;Teste seu código&#34; target=&#34;_blank&#34;&gt;Edge Inspect&lt;/a&gt;, conhecido como Adobe Shadow, que permite testar seus sites em diversos dispositivos de uma vez. Há também o &lt;a href=&#34;http://html.adobe.com/edge/code/&#34; target=&#34;_blank&#34;&gt;Edge Code&lt;/a&gt;, um fork do editor de código &lt;a href=&#34;https://github.com/adobe/brackets&#34; target=&#34;_blank&#34;&gt;Brackets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Há também o glorioso &lt;a href=&#34;http://html.adobe.com/edge/webfonts/&#34;&gt;Edge Web Fonts&lt;/a&gt;, uma espécie de Google Fonts que a Adobe criou que te dá acesso a uma biblioteca gigante de fonts feitas com contribuições da Adobe, Google e diversos designers do mundo todo. &lt;strong&gt;De graça&lt;/strong&gt;. Vale um post apenas para este serviço, já está no forno.&lt;/p&gt;

&lt;p&gt;A Adobe também anunciou o &lt;a href=&#34;http://html.adobe.com/edge/reflow/&#34; target=&#34;_blank&#34;&gt;Edge Reflow&lt;/a&gt;, uma nova ferramenta para trabalhar com layouts baseados em RWD. O Edge Reflow é uma boa idéia para marcar breakpoints e planejar um layout responsive, mesmo assim eu não me vejo utilizando algumas features como modificar fundos, imagens e cores como mostra no vídeo abaixo, mesmo assim eu quer experimentá-lo quando estiver disponível.&lt;/p&gt;

&lt;p&gt;Acho que o meu favorito foi o Edge Animate. Existem algumas coisa no CSS 3 que não são necessárias fazer sempre na mão, como gradientes, por exemplo. Eu utilizo ferramentas como &lt;a href=&#34;http://www.colorzilla.com/gradient-editor/&#34; target=&#34;_blank&#34;&gt;sistema de criação de gradientes do ColorZilla.com&lt;/a&gt; sem dó. É simples, rápido e indolor. Um sistema bem feito para criar animações baseadas em padrões web é tudo o que um refugiado do Flash gostaria de ter hoje em dia. O Edge Animate vem para resolver essa necessidade. Ele ainda não faz animações baseadas em SVG ou Canvas, mas utiliza um motor Javascript baseado em JQuery para produzir animações customizáveis em qualquer editor de texto, como &lt;a href=&#34;http://html.adobe.com/edge/animate/faq.html&#34; target=&#34;_blank&#34;&gt;informa o FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Edge Animate implements animations and imported graphics using a JavaScript animation library that is built on the popular jQuery Core framework. Animations and graphics created in Edge Animate are unobtrusive (they are attached to the HTML at runtime by JavaScript), which makes it easy to integrate Edge Animate compositions with larger web pages and sites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O problema é que a Adobe tem que ganhar dinheiro de alguma forma, né? Ou você acha que ela é o papai noel? O Edge Animate pode ser seu pela bagatela de USD$499 ou USD$14.99 mensais. Por um tempo limitado ele será disponibilizado de graça dentro do Creative Cloud (mais detalhes sobre o Creative Cloud em um post posterior).&lt;/p&gt;

&lt;p&gt;Para falar a verdade eu gostei das iniciativas da Adobe e com certeza ela vai ganhar muitos adeptos que se foram durante o tempo e também, talvez, quem sabe, recuperará a má fama adquirida por muitos desenvolvedores web nos últimos anos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sobrevivendo na selva da Internet</title>
      <link>https://tableless.github.io/hugo-public/sobrevivendo-na-internet/</link>
      <pubDate>Mon, 17 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/sobrevivendo-na-internet/</guid>
      <description>&lt;p&gt;Muitas pessoas sonham em criar sites que terão milhares de acessos diarios. Sites que serão compartilhados por outras pessoas e que em pouco tempo se tornarão referencia. Apelam para designers inovadores, endereços um pouco estranhos e até mesmo para divulgação em serviços sociais, tudo isso para sair do anonimato.&lt;/p&gt;

&lt;p&gt;Meses depois vem a pergunta cruel – O que está dando errado?  E completa dizendo “Meu site é bonito, leve e fácil de usar, mas tenho poucos senão nenhum acesso diário.&lt;/p&gt;

&lt;p&gt;Como é comum essa indagação!! Por dia sites nascem e morrem devido erros simples que condenam a visibilidade dele na web.&lt;/p&gt;

&lt;p&gt;Quando alguém pensa em abrir um comércio seja ele fisico ou eletrônico, logo querem websites glamurosos com cores, milhares de animações em flash, efeitos de cliques, formulários flutuantes, cantos arredondados e tudo mais. Chegam a ficar horas escolhendo também o dominio na web e se deparam com outro problema – Porque todo o nome que busco já está registrado? – acabam então por criar sites com nomes compostos, com apelidos de usuarios, nomes gigantescos, girias em ingles, palavras pouco sugestivas. Para ser sincero, eu já fiz isso também. Criei websites cujo meu desejo era o sucesso, porém com nomes que me levavam ao fracasso. Como pode ser bom um site de vendas de esculturas com o nome de arteempregosdsl.com.br? Sim, usei este endereço, o que aconteceu? Fracasso de acessos. Como poderei classificar um site com este nome no Google e esperar meu link aparecer no topo de buscas?&lt;/p&gt;

&lt;p&gt;Nomes longos de sites servem apenas para promoções relâmpagos, e não para ser o site principal. Galera, seu site é acessado inicialmente pelo nome que possuí, pois quem está acessando não tem ideia do que tem dentro da pagina. Por isso cuidem do nome em primeiro lugar, nomes curtos e objetivos, sem composição ou seja não unir seu nome com sobrenome do sócio para criar um endereço.&lt;/p&gt;

&lt;p&gt;Uma outra coisa interessante e que estressa muito os usuarios: pensar que todos possuem banda larga de 10Mb em casa e com decide colocar  logo de inicio uma animação em flash com um vídeo incorporado que obriga o usuario a ver para posteriormente fazer um redirect pro site principal. Isto é frustante. Quer colocar um video? Sem problemas, desde que não seja pré-requisito assisti-lo para entrar em sua pagina.&lt;/p&gt;

&lt;p&gt;E as cores? Possuem importância? Sim e ainda fundamental, nada de pensar que tal cor fica bonito com outra, tenha certeza nas cores que irá utilizar, e como fazer isso? Simples, use ferramentas já existentes no mercado que são gratuitas como por exemplo kuler.adobe.com, com ele você poderá escolher a cor base de seu site e receber em troca todas as cores compativeis com a base escolhida. Com isso morreu o problema de existir Rosa com vermelho num site, verde com amarelo ou preto com azul.&lt;/p&gt;

&lt;p&gt;Outra coisa, como anda seu formulário de registro? Imenso? Desejando saber a árvore genealógica de seu usuário? Espero que não, pois abordagens assim apenas para instituições financeiras, se no seu caso for apenas assinatura de newsletter use apenas e-mail. Se for para login de acesso qual o motivo de saber endereço residencial do usuário, endereços secundários, telefones de todos os tipos ? Apenas desperdicio de tempo.&lt;/p&gt;

&lt;p&gt;OK. Meu site está leve e bonito e agora? Agora vem o marketing nível 1. Como você faria hoje para divulgar seu website? Avisaria os amigos para colocarem likes no facebook? Colocaria o endereço no seu cartão de visitas? É exatamente assim que seu site morrerá em alguns meses. Este tipo de publico não são fixos mas apenas sazonais, ou seja, vem e vão. Por favor, adote medidas mais dinamicas, utilize de SEO(Search Engine Optimization) nas suas páginas, coloque palavras chaves de identificação simples e não compostas. Nenhum usuário chega no google e digita “Quero um Iphone de 16Gb novo e barato”, eles são diretos ou seja “Iphone 16Gb”, “Iphone novo”, “promoção Iphone” coisas simples que você como cliente pesquisaria devem ser usados como palavras-chave.&lt;/p&gt;

&lt;p&gt;Depois dessas ações você olha seu Google Analytics &amp;#8211;  se você ainda não incorporou em site faça-o imediatamente &amp;#8211; e percebe que possuí 200 acessos por dia, o que fazer? Chegou a hora do marketing nível 2 por grupos de interesse, ou seja, formar “panelinhas” de usuários em seu site. Descontos promocionais de curta duração, códigos promocionais, email marketing com os usuarios cadastrados( para isso existe o site mailchimp.com, que é ótimo para este serviço e gratuito), brindes de compras, sugestões de serviços tudo voltado para o publico de acesso. Mas, não fique preso a isso, em paralelo, divulgue seu site em outros sites, chame pessoas que desconhecem seus serviços, fidelize-os pela simplicidade.&lt;/p&gt;

&lt;p&gt;Caso você possa e queira pagar, utilize o serviço ad-words do Google para patrocinar seu link e colocá-lo em destaque nas pesquisas, isso não será o principal motivo de sucesso de seu site mas sim uma ferramenta de apoio.&lt;/p&gt;

&lt;p&gt;Lembre-se o usuário não deseja um site lindo e maravilhoso, isso é consequência de seu acesso, o que ele deseja mesmo é um serviço direto e simples, sem pop-ups chatos de anuncios, sem obrigatoriedade de acessos em outros serviços, sem termos de compromissos gigantescos. Apenas simplicidade.&lt;/p&gt;

&lt;p&gt;Isso te manterá vivo na web, te dando espaço para pensar em outras estratégias de divulgação do serviço. Lembre-se que divulgar seu trabalho nas redes sociais é legal também, use suas redes de amigos para divulgar seus serviços. Mas não espere uma chuva de acessos com isso, pois como disse são clientes sazonais e também devido as Redes Sociais serem muito dinamicas em poucos minutos eles não verão mais seu post de divulgação, então fique de olho, poste sempre novidades que façam link com seu serviço, mas cuidado, utilizando as redes sociais seus serviços ficarão vulneráveis a difamação ou reclamação coletiva que deverá ser tratado com máximo cuidado.&lt;/p&gt;

&lt;p&gt;Com isso, sucesso em suas publicações e em caso de duvidas me procurem que auxiliarei com muito prazer.&lt;/p&gt;

&lt;p&gt;Abraços galera.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Minha empresa está nas redes sociais. E agora?</title>
      <link>https://tableless.github.io/hugo-public/minha-empresa-redes-sociais/</link>
      <pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/minha-empresa-redes-sociais/</guid>
      <description>

&lt;p&gt;De certo modo muitos especialistas definem o surgimento das Redes Sociais como sendo uma importante evolução na comunicação e no mundo tecnológico. Felizmente as empresas também se atentaram a isso e começaram a armas suas estratégias de negocio, porém não contando ou não acreditando no real poder das redes.&lt;/p&gt;

&lt;p&gt;Quando falamos de &amp;#8220;real poder&amp;#8221; estamos falando a mais pura verdade, hoje o poder de decisão sobre o que comprar, quais cores escolher, a marca, o formato e todos os outros aspectos de um produto é decido pelo cliente e não mais pela empresa. Grande prova disso está na aproximação de diversas marcas com o seu publico alvo, criando campanhas de novos sabores e embalagens, funcionalidades e formas tudo isso com o intuito de se aproximar do consumidor e dar a ele a sensação de que a empresa é sua amiga e que entende seus problemas.&lt;/p&gt;

&lt;p&gt;Com toda essa mudança estratégica, houve a necessidade de um gerenciamento da imagem corporativa nas redes sociais, pois um simples deslize por parte da empresa pode custar uma avalanche de pessoas reclamando de seu produto. Como prova disso, temos casos de uma gigante do mercado, empresa  muito conhecida pelo seu famoso video game que num certo natal resolveu lançar uma campanha no Youtube de adolescentes implorando para seus pais para ganhar um video-game portatil. Logo de cara parecia um video caseiro, engraçado até. Mas com que a empresa não contava era que um super usuário rastreou a procedencia do vídeo descobrindo que não passava de um golpe de marketing da empresa para faturar com as vendas no Natal. Até ai sem problemas, porém essa noticia se espalhou pelas Redes Sociais encurralando a gigante empresa e obrigando-a se declarar num blog criado especialmente para esta ocasião, se desculpando pelo ocorrido e retirando imediatamente o vídeo de circulação.&lt;/p&gt;

&lt;h3 id=&#34;mas-e-se-acontecer-comigo-como-posso-agir&#34;&gt;Mas e se acontecer comigo, como posso agir?&lt;/h3&gt;

&lt;p&gt;O primeiro passo é manter a calma e não sair postando nada as pressas, caso contrário isto poderá piorar a situação. Garanta que você esteja ciente do problema, se ponha no lugar do usuário, teste o produto e serviço que ele usou e comprove o problema. Assim você se sentirá de igual para igual ao falar do assunto.&lt;/p&gt;

&lt;p&gt;Estes são alguns passos que você tentar utilizá-los para contornar a situação:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Fale a língua de seu cliente:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quando alguém conversa com você utilizando termos técnicos ou fala de uma forma que você desconhece não é desconfortante? Pois então, a mesma coisa acontece com os clientes de seus produtos e serviços. Muitas das vezes as empresas querem passar informações para seus clientes sem antes transformá-la em algo compreensível, sem tirar as palavras técnicas e colocar simplicidade no texto.&lt;/p&gt;

&lt;p&gt;Uma pergunta importante: Você conhece seu cliente? Ele é especialista no produto que utiliza ou apenas usuário doméstico? &amp;#8211;  com as respostas em mãos você saberá como falar com cada cliente em especial e colocar seu ponto de vista sem parecer enrrolação.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Agir rápido diretamente na fonte de todo o mal:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quando alguém falar mal de seus produtos e serviços opte por falar diretamente com o usuário insatisfeito. Não adianta você tentar se explicar para as outras pessoas que leram o desabafo, porque para pessoa que você convence de que nada está errado haverá mais 10 achando seu produto um horror. Então esqueça isso, a solução é ir diretamente na pessoa que iniciou tudo. Mas como fazer isso? Simples, entre no perfil deste cliente e procure saber mais sobre o ocorrido. Algumas empresas até preferem trocar o produto ao invés de repará-lo. Caso não seja um produto mas sim um serviço, ofereça pacotes especiais para ele. Assim o cliente divulgará informações favoráveis a empresa e em pouco tempo o problema pode se transformar em solução.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Sempre assuma a culpa:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nunca diga ao cliente que o problema causado não é por culpa da empresa mas sim por manuseio incorreto ou falta de informação, isso é a pior das piores coisas que pode ser dito para um usuário furioso, ao contrário disso assuma o erro logo de cara. Peça desculpas e inicie um profundo processo de investigação, testando seu próprio produto ou serviço reproduzindo os passos do usuário, após detectado o problema comece a solucioná-lo, entre em contato com o cliente dizendo que foi encontrado a causa do problema e informe a solução ou a possível data do mesmo. Caso não seja problema do sistema mas sim do cliente, diga pra ele que o problema foi solucionado e os passos que ele deverá seguir para utilizar o produto/serviço. Dessa forma o cliente se sentirá confortável e não constrangido em pedir ajuda.&lt;/p&gt;

&lt;p&gt;Você percebe as simples medidas que podem ser tomadas para garantir o sucesso de sua imagem corporativa nas redes sociais?&lt;/p&gt;

&lt;p&gt;Saiba que existem profissionais especializados em redes sociais que poderão fazer parte do seu time para evitar ou solucionar problemas como os citados.&lt;/p&gt;

&lt;p&gt;E você, o que acha?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Documentos poliglotas com XHTML5</title>
      <link>https://tableless.github.io/hugo-public/documentos-poliglotas-com-xhtml5/</link>
      <pubDate>Wed, 16 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/documentos-poliglotas-com-xhtml5/</guid>
      <description>

&lt;p&gt;Quando se começou a falar massivamente a respeito do HTML5, em 2009, muitos desenvolvedores (inclusive eu) torceram o nariz para o fato de poder voltar a utilizar a sintaxe tolerante do HTML, ou seja, tags em uppercase ou sem fechamento, valores de atributos sem aspas, fechar tags em ordem incorreta, entre outros. Inclusive, &lt;a href=&#34;http://tableless.com.br/o-dilema-da-sintaxe-no-html5/&#34;&gt;comentei especificamente sobre isso em um outro artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Grande parte dos desenvolvedores aprenderam  e se habituaram a utilizar a sintaxe do XHTML, que segue as diretrizes do XML para documentos bem formados e que apresentariam erros de renderização caso essas diretrizes são fossem seguidas. Isto nos permitia códigos mais limpos e bem estruturados. Porém, no HTML5, a escolha é sua e você não será punido por não fechar tags.&lt;/p&gt;

&lt;p&gt;Com toda essa preocupação, no mesmo ano começou a ideia do XHTML5, uma tentativa de contornar o problema, adicionando as restrições de marcação do XML a documentos escritos em HTML5. Podemos dizer que seria uma tentativa de unir o melhor de cada especificação. O &lt;a href=&#34;http://html5doctor.com/html-5-xml-xhtml-5/&#34;&gt;artigo escrito por Bruce Lawson para o HTML5 Doctor&lt;/a&gt; (com &lt;a href=&#34;http://www.pinceladasdaweb.com.br/blog/2009/12/10/html-5-xml-xhtml-5/&#34;&gt;versão traduzida no Pinceladas da Web&lt;/a&gt;) foi um dos primeiros a comentar sobre o tema.&lt;/p&gt;

&lt;p&gt;Durante cerca de 1 ano isto era uma forma, digamos, marginalizada de tratar essa questão, por não ser algo reconhecido pelo  &lt;a title=&#34;Web Hypertext Application Technology Working Group&#34; href=&#34;http://www.whatwg.org/&#34; target=&#34;_blank&#34;&gt;WHATWG&lt;/a&gt; / &lt;a title=&#34;W3C HTML Working Group&#34; href=&#34;http://www.w3.org/html/wg/&#34; target=&#34;_blank&#34;&gt;HTML WG&lt;/a&gt;. Mas em 2010 surgiu o primeiro draft com a proposta de nortear o uso do HTML5 com a sintaxe do XML/XHTML. O W3C denominou essa metodologia de &lt;a href=&#34;http://dev.w3.org/html5/html-xhtml-author-guide/&#34;&gt;marcação poliglota&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-um-documento-com-marcação-poliglota&#34;&gt;O que é um documento com marcação poliglota?&lt;/h3&gt;

&lt;p&gt;Um documento com marcação poliglota é um documento escrito em HTML5 que pode ser processado tanto como HTML quanto como XML dentro de um conjunto de restrições definidas, porém, ainda seguindo a especificação do HTML5. Eles são compatíveis com o HTML e XHTML.&lt;/p&gt;

&lt;p&gt;Significa que você pode utilizar todo o poder do HTML5 dentro do padrão de marcação bem formada do XML. É importante ressaltar que isto não afeta as tags que você pode utilizar. Por exemplo, elementos que são considerados &lt;em&gt;deprecated&lt;/em&gt; em XHTML mas válidos no HTML5 continuam a ser válidos. Uma exceção é com relação a algumas tags que são excluídas de documentos poliglotas por não serem possível de serem replicadas em um &lt;em&gt;parser&lt;/em&gt; XML (como é o caso da tag &lt;em&gt;&lt;noscript&gt;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Mas em linhas gerais, esta “fusão” não altera a especificação, mas sim as regras de sintaxe para processamento e há influência no DOM também (ex.: &lt;em&gt;document.write&lt;/em&gt; não é permitido, mas sim &lt;em&gt;innerHTML&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Segundo o W3C, um documento poliglota resulta em:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Um documento HTML5 válido;&lt;/li&gt;
&lt;li&gt;Um documento XML bem formado (mas não significa um documento XML válido);&lt;/li&gt;
&lt;li&gt;DOM idêntico quando processado tanto como HTML quanto como XML, isto porque os parsers geram diferentes DOMs para determinados atributos relativos ao XML.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;como-escrever-um-documento-poliglota&#34;&gt;Como escrever um documento poliglota&lt;/h3&gt;

&lt;p&gt;Um dos principais requisitos para escrever um documento em XHTML5 é o MIME-type utilizado. Isto vai definir se o navegador irá interpretar o documento como HTML ou XHTML. Segundo o WHATWG, um documento HTML5 se torna um documento poliglota se for provido o MIME-type application/xhtml+xml.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;application/xhtml+xml; charset=utf-8&#34; /&gt;
[/cc]&lt;/p&gt;

&lt;p&gt;Até algum tempo atrás, o IE não suportava este MIME-type. Para isso, você pode indicar que o MIME-type é o usual &lt;em&gt;text/html&lt;/em&gt;. Ele pode ser utilizado junto com o primeiro (separando por vírgula), ou pode ser feita uma validação do navegador para decidir qual o MIME-type a ser utilizado.&lt;/p&gt;

&lt;p&gt;O doctype passa a ser opcional, mas ainda é recomendável utilizar para prevenir o &lt;a href=&#34;http://en.wikipedia.org/wiki/Quirks_mode&#34;&gt;quirks mode&lt;/a&gt; dos navegadores. Se utilizado, a palavra doctype deve ser escrito adequadamente em uppercase, ex.: &lt;em&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/em&gt;. A meta-tag que especifica o charset e a declaração &lt;em&gt;&amp;lt;?xml version=”1.0” encoding=”UTF-8”?&amp;gt;&lt;/em&gt; (herdada do XHTML 1.1) também passam a ser opcionais se o charset desejado para o documento é UTF-8 (padrão do XML).&lt;/p&gt;

&lt;p&gt;Além disso é preciso definir também o namespace do XHTML na tag &lt;em&gt;&lt;html&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;][/cc]&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Ao utilizar recursos como SVG e MathML, é preciso especificar também o atributo xml para a tag raiz correspondente de cada um.&lt;/p&gt;

&lt;p&gt;Outras recomendações são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usar tanto o atributo lang quanto xml:lang na tag &lt;em&gt;&lt;html&gt;&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Usar &lt;em&gt;tbody&lt;/em&gt; / &lt;em&gt;thead&lt;/em&gt; / &lt;em&gt;tfoot&lt;/em&gt; em _&lt;table&gt;_s;&lt;/li&gt;
&lt;li&gt;Quando o elemento &lt;em&gt;&lt;col&gt;&lt;/em&gt; é utilizado em tabelas, utilizar também o elemento &lt;em&gt;&lt;colgroup&gt;&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Não utilizar o elemento &lt;em&gt;&lt;noscript&gt;&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Não iniciar as tags &lt;em&gt;&lt;pre&gt;&lt;/em&gt; e &lt;em&gt;&lt;textarea&gt;&lt;/em&gt; com linha em branco;&lt;/li&gt;
&lt;li&gt;Utilizar &lt;em&gt;innerHTML&lt;/em&gt; ao invés de &lt;em&gt;documento.write&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Para scripts embutidos na página, escreva o código entre uma seção CDATA com os delimitadores comentados. É uma forma de fazer com que o parser do XML (que analisa apenas a marcação) não acuse erros ao utilizar &amp;lt; ou &amp;amp; no script;&lt;/li&gt;
&lt;li&gt;Os atributos &lt;em&gt;xml:space&lt;/em&gt; e &lt;em&gt;xml:base&lt;/em&gt; são permitidos apenas nos elementos relativos a SVG e MathML;&lt;/li&gt;
&lt;li&gt;Elementos que podem ter conteúdo mas estão vazios não devem ser minimizados para o formato de tag órfã. Ex.: &lt;em&gt;&lt;p /&gt;&lt;/em&gt; não deve ser utilizado, mas sim &lt;em&gt;&lt;p&gt;&lt;/p&gt;&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ao escrever documentos poliglotas, é possível utilizar todas as funcionalidades do HTML5 com uma garantia de código bem formado de acordo com as restrições do XHTML. Com isso, é possível ter um código mais organizado e consistente que seja mais fácil de produzir, manter e reutilizar a longo prazo, principalmente quando este trabalho é realizado em equipe.&lt;/p&gt;

&lt;h3 id=&#34;referências&#34;&gt;Referências&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.w3.org/html5/html-xhtml-author-guide/&#34;&gt;Polyglot Markup: HTML-Compatible XHTML Documents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.whatwg.org/xhtml5-in-a-nutshell&#34;&gt;XHTML5 in a nutshell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.xmlplease.com/xhtml/xhtml5polyglot/&#34;&gt;Benefits of polyglot XHTML5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://html5doctor.com/html-5-xml-xhtml-5/&#34;&gt;HTML 5 + XML = XHTML 5&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entendendo quais APIs (realmente) fazem parte do HTML5</title>
      <link>https://tableless.github.io/hugo-public/entendendo-quais-apis-realmente-fazem-parte-do-html5/</link>
      <pubDate>Wed, 02 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/entendendo-quais-apis-realmente-fazem-parte-do-html5/</guid>
      <description>

&lt;p&gt;Com o HTML5 ganhando força no mercado de desenvolvimento web, maior tem sido o interesse dos desenvolvedores em compreender seus recursos, novas APIs e tecnologias adjacentes. E é aí que acontece uma grande confusão.&lt;/p&gt;

&lt;p&gt;Sabemos que o HTML5 não se trata apenas de marcação, mas também de um conjunto de novas funcionalidades encapsuladas em APIs que podem ser acessadas via JavaScript.&lt;/p&gt;

&lt;p&gt;Porém, há APIs em processo de padronização pelo W3C que não fazem parte da especificação do HTML5. Elas são especificações relacionadas não intrínsecas ao HTML5, ou seja, a utilização delas não está estritamente atrelada ao uso da linguagem. Algumas, inclusive, faziam parte do &lt;em&gt;core&lt;/em&gt; do HTML5, mas hoje estão dissociadas e contam com uma especificação separada, como é o caso do &lt;a href=&#34;http://www.w3.org/TR/webstorage/&#34;&gt;Web Storage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As APIs próprias do HTML5 são mais específicas às funcionalidades que atuam no escopo da página e da manipulação de elementos. Elas se relacionam em grande parte com o &lt;a href=&#34;http://tableless.com.br/tenha-o-dom/&#34;&gt;DOM&lt;/a&gt;. Já as outras APIs geralmente trabalham com funcionalidades um pouco mais complexas, como armazenamento de dados e manipulação de arquivos, por exemplo.&lt;/p&gt;

&lt;p&gt;Algumas das novas APIs que estão contidas na especificação do HTML5 são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Canvas&lt;/li&gt;
&lt;li&gt;Validação de formulários&lt;/li&gt;
&lt;li&gt;Controles de áudio e vídeo&lt;/li&gt;
&lt;li&gt;Application cache / offline applications&lt;/li&gt;
&lt;li&gt;Funcionalidade de markup editável (contenteditable)&lt;/li&gt;
&lt;li&gt;Drag and drop&lt;/li&gt;
&lt;li&gt;Novas funcionalidades para manipulação do histórico do navegador&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Algumas das novas APIs que são desenvolvidas em conjunto pelo WHATWG e W3C e trabalham muito bem com HTML5 mas que não são (mais) exclusivas dele:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Storage (localStorage e sessionStorage)&lt;/li&gt;
&lt;li&gt;Web messaging&lt;/li&gt;
&lt;li&gt;Microdata&lt;/li&gt;
&lt;li&gt;Web Workers&lt;/li&gt;
&lt;li&gt;Web Sockets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E algumas especificações relacionadas, que não são desenvolvidas pelo WHATWG e possuem especificações publicadas separamente pelo W3C:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Geolocation&lt;/li&gt;
&lt;li&gt;File API&lt;/li&gt;
&lt;li&gt;Indexed DB&lt;/li&gt;
&lt;li&gt;File Writer&lt;/li&gt;
&lt;li&gt;Notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O gráfico abaixo, desenvolvido por Sergey Mavrody fornece uma boa visão deste contexto e do relacionamento entre as novas APIs e o HTML, além de mostrar o status de desenvolvimento de cada uma destas especificações. Note que o Web Storage ainda está incluído junto à especificação do HTML5, mas isto já mudou.&lt;/p&gt;

&lt;div id=&#34;attachment_5982&#34; style=&#34;width: 650px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/04/800px-HTML5-APIs-and-related-technologies-by-Sergey-Mavrody.png&#34;&gt;&lt;img class=&#34; wp-image-5982 &#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/04/800px-HTML5-APIs-and-related-technologies-by-Sergey-Mavrody.png&#34; alt=&#34;HTML5 e as APIs relacionadas&#34; width=&#34;640&#34; height=&#34;434&#34; srcset=&#34;uploads/2012/04/800px-HTML5-APIs-and-related-technologies-by-Sergey-Mavrody.png 800w, uploads/2012/04/800px-HTML5-APIs-and-related-technologies-by-Sergey-Mavrody-300x203.png 300w&#34; sizes=&#34;(max-width: 640px) 100vw, 640px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    HTML5 e as APIs relacionadas por Sergey Mavrody
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Portanto, muitas vezes quando falamos das novas possibilidades do HTML5, na verdade estamos nos referindo à toda uma nova geração de tecnologias para a web.&lt;/p&gt;

&lt;p&gt;O que podemos concluir disso tudo é que o HTML5, sozinho, não faz uma web melhor. Porém, ele ajudou a movimentar o mercado rumo ao desenvolvimento de novas tecnologias. Saímos da zona de conforto que já estávamos há alguns anos. O cenário que temos agora é de uma série de tecnologias web que, trabalhando em conjunto, fazem uma web melhor, para as pessoas e para os desenvolvedores 😉&lt;/p&gt;

&lt;h3 id=&#34;referências&#34;&gt;Referências:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.whatwg.org/specs/web-apps/current-work/multipage/introduction.html&#34;&gt;Especificação do HTML pelo WHATWG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.w3.org/html5/html4-differences/#apis&#34;&gt;W3C &amp;#8211; HTML5 differences from HTML4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/HTML5&#34;&gt;HTML5 &amp;#8211; Wikipedia&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>As cores da minha web</title>
      <link>https://tableless.github.io/hugo-public/as-cores-da-minha-web/</link>
      <pubDate>Mon, 02 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/as-cores-da-minha-web/</guid>
      <description>&lt;p&gt;Talvez as cores que eu veja não sejam as mesmas que você enxerga, mas isso não faz com que a sua percepção da web seja diferente. Nesse ambiente tão democrático, nada mais justo do que discutir as diversas formas de perceber as cores da web.&lt;/p&gt;

&lt;p&gt;Tenho um grande amigo que sonhava ser piloto de avião. Por trabalhar em uma empresa aérea, a proximidade com as grandes máquinas voadoras o encantava. Porém, seu sonho de pilotar acabou quando, aos trinta anos de idade, ele descobriu que tinha um grau de daltonismo que o impediu de continuar o treinamento.&lt;/p&gt;

&lt;p&gt;O mais curioso dessa história foi que ele viveu seus trinta anos anteriores sem saber que enxergava cores de forma diferente das demais pessoas. Seu tipo de daltonismo foi classificado como deuteranopia, que dificultava reconhecer certos tons de verde. A partir dessa descoberta, comecei a estudar como cada pessoa vê as cores da sua web.&lt;/p&gt;

&lt;p&gt;Por esse motivo, os cuidados com cores são importantíssimos no desenvolvimento de páginas web. O WCAG 2.0 (Web Content Accessibility Guidelines) é bem direto com relação a isso: &lt;a href=&#34;http://www.w3.org/WAI/WCAG20/quickref/#qr-visual-audio-contrast-without-color&#34;&gt;A cor não deve ser utilizada como o único meio visual de transmitir informações&lt;/a&gt;. Isso significa que você não deve utilizar indicações como &amp;#8220;clique no botão verde para continuar&amp;#8221; ou, &amp;#8220;campos marcados em vermelho são obrigatórios&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Mas isso não significa que o uso de cores deve ser banido da web. Pelo contrário. O uso de cores e contrastes é um dos maiores atrativos visuais de uma página. O que faz uma página ser bela aos olhos de um usuário é a combinação entre tons e cores. Mas o cuidado com o contraste deve ser considerado, já que pessoas com certos graus de daltonísmo e baixa visão podem ter dificuldade de enxergar alguns contrastes. Por isso mesmo, o &lt;a href=&#34;http://www.governoeletronico.gov.br/acoes-e-projetos/e-MAG&#34;&gt;E-Mag, modelo de acessibilidade do Governo Eletrônico&lt;/a&gt; diz que o mínimo de contraste entre o plano de fundo e o primeiro plano deve ser de 3 para 1. Se você tem dúvidas, na última página do E-Mag existe uma tabela de cores que faz o contraste adequado com preto e branco (já em hexadecimal). No &lt;a href=&#34;http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html&#34;&gt;WCAG 2.0, esse valor é de 4,5 para 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E quando o daltonismo é tão severo ao ponto de fazer com que a pessoa não enxergue cor nenhuma (somente tons de cinza)? Esse é um tipo de daltonismo raro, mas aconteceu com o artista Neil Harbisson, que esteve na quinta edição da Campus Party Brasil contando como conseguiu resolver seu problema de distinguir cores: implantando uma câmera em seu crânio que identifica as cores e transforma essa informação em áudio. &lt;a href=&#34;http://www.youtube.com/watch?v=CvPOh0p9cf0&#34;&gt;Uma ótima palestra que vale a pena ser assistida&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E por falar em bani-las da web, o que podemos dizer da implementação de cores quando o acesso a página é feito por um software leitor de tela? A primeira recomendação dada pelo WCAG é &lt;a href=&#34;http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-TECHS/C22&#34;&gt;separar a estrutura do documento da apresentação&lt;/a&gt;, ou seja: Formatação visual somente dentro do CSS. Isso quer dizer que o software leitor de tela, que navega pelo código da página HTML, ignora as cores aplicadas no documento? Não!&lt;/p&gt;

&lt;p&gt;O software JAWS, popular software leitor de tela, possui uma &lt;a href=&#34;http://www.stacybleeks.com/jaws_speech_manager_tutorial.html&#34;&gt;configuração que permite que o usuário saiba quais as cores ou fontes utilizadas na página&lt;/a&gt;, ou mesmo &lt;a href=&#34;http://webaim.org/resources/shortcuts/jaws&#34;&gt;simples combinações de tecla podem permitir que o usuário cego saiba que fonte está sendo usada no site e qual a cor dela&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Isso significa que a minha web tem cor, inclusive para uma pessoa cega que acessa minha página.&lt;/p&gt;

&lt;p&gt;Além de todas as diretrizes citadas nesse documento o uso do bom senso é fundamental para termos uma web bela, cheia de cores e que permitam que todos possam navegar por ela. Inclusive aquele meu amigo do início desse texto, que um dia me pediu ajuda para instalar sua televisão nova e não enxergava um tal botão verde no controle remoto que fazia a busca por canais. Felizmente, o termo &amp;#8220;pesquisar canais&amp;#8221; estava escrito no controle.&lt;/p&gt;

&lt;p&gt;Talvez eu não enxergue as cores da mesma forma que você, mas mesmo com essas diferenças a minha web é tão bela quanto a sua deve ser.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seu lugar ao sol</title>
      <link>https://tableless.github.io/hugo-public/seu-lugar-ao-sol/</link>
      <pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/seu-lugar-ao-sol/</guid>
      <description>&lt;p&gt;Você realmente acha que vai escrever CSS e HTML como escreve hoje em um cenário como este?&lt;/p&gt;

&lt;p&gt;Você já parou para pensar onde CSS/HTML e Javascript se encaixam em um ambiente onde a web é praticamente camuflada por APPs específicos? Eu não estou me referindo a estes Apps como conhecemos hoje. Podem ser Apps instaladas ou WebApps, neste futuro, dá na mesma. Não há diferença.&lt;/p&gt;

&lt;p&gt;Pior do que pensar o lugar que CSS e HTML estarão é pensar em como VOCÊ se colocará em um ambiente tão novo quanto este. O que realmente iremos fazer? Qual será o papel de cada um? Será que a metodologia de trabalho será a mesma?&lt;/p&gt;

&lt;p&gt;Você também já deve ter visto o vídeo acima. Veja como os personagens utilizam seus gadgets e como tudo está sincronizado. A discussão aí não é se é melhor criar uma App ou uma aplicação Web, é se o seu produto é realmente relevante e se vai ajudar realmente a vida das pessoas. A forma como isso é oferecido não importa, porque em um cenário como esse tudo é igual. Não faz diferença nenhuma. &lt;a href=&#34;http://tableless.com.br/utilizando-apps-em-vez-de-browsers/&#34;&gt;A Web não é só o seu browser&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É por isso que eu acho que &lt;a href=&#34;http://tableless.com.br/agora-e-a-vez-dos-desenvolvedores/&#34;&gt;os desenvolvedores precisam acordar&lt;/a&gt;. Urgente.&lt;/p&gt;

&lt;p&gt;Eu perco as contas de quantos desenvolvedores me castigam quando eu digo para ignorar totalmente os browsers antigos. Você acha que um futuro como mostrado nos vídeos ou qualquer outro tipo de futuro, vai ficar esperando um browser ser adequado aos padrões? Aliás, browsers existirão?&lt;/p&gt;

&lt;p&gt;Você precisa repensar o que realmente é vida digital. Qual a real utilidade de se carregar um &lt;del&gt;celular&lt;/del&gt; &lt;ins&gt;dispositivo móvel&lt;/ins&gt;. Repense o que será design responsivo. Eu sei que a necessidade de hoje é adaptar websites e aplicações para as diversas telas, mas entende que isso é só uma necessidade que vai passar rápido? Vai passar rápido não porque é uma modinha sem importância, mas porque isso deverá ser padrão daqui pra frente. Assim como o Tableless. Lembra que falavam que isso era uma modinha e que já já passaria? Pois é.&lt;/p&gt;

&lt;p&gt;Experimente fazer o exercício de entender o futuro da web. É algo que todo profissional web deveria fazer, principalmente os desenvolvedores. Não importa qual linguagem de programação você vai precisar aprender ou desaprender, o que importa é como ela será aplicada. Isso muda tudo.&lt;/p&gt;

&lt;p&gt;Embora a ideia não seja apenas direcionada a Mobile mas para todos os meios de acesso, vale muito a pena ver a apresentação que o &lt;a href=&#34;http://www.viuisso.com.br/?utm_source=TablelessComBr&amp;amp;utm_medium=linkPost&amp;amp;utm_campaign=PostBlog&#34;&gt;Michel Lent&lt;/a&gt; fez. Dá uma olhada:&lt;/p&gt;

&lt;div style=&#34;width:595px&#34; id=&#34;__ss_11955809&#34;&gt;
  &lt;strong style=&#34;display:block;margin:12px 0 4px&#34;&gt;&lt;a href=&#34;http://www.slideshare.net/mlent68/repensando-o-marketing-a-partir-do-mobile&#34; title=&#34;Repensando o marketing a partir do mobile&#34; target=&#34;_blank&#34;&gt;Repensando o marketing a partir do mobile&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Experiência deve ter começo, meio e fim</title>
      <link>https://tableless.github.io/hugo-public/experiencia-deve-ter-comeco-meio-e-fim/</link>
      <pubDate>Mon, 28 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/experiencia-deve-ter-comeco-meio-e-fim/</guid>
      <description>&lt;p&gt;&lt;small&gt;Esse artigo pode parecer meio confuso, mas é apenas um pensamento que estive matutando. Não ligue se a ordem das ideias estiverem tortas e sinuosas. 😉&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Tive uma experiência muito ruim no primeiro dia de 2010: pulei na piscina com meu iPhone no bolso.&lt;/p&gt;

&lt;p&gt;Ok, pode me xingar agora.&lt;/p&gt;

&lt;p&gt;Depois da tragédia, ele durou rápidos 5 segundos, e faleceu. Não ligava, não apitava, não fazia nada. &amp;#8220;Paciência&amp;#8221;, falei para mim mesmo. No dia seguinte peguei um celular reserva que eu tinha guardado: um HTC Touch, com Windows Mobile 6 (não Windows Phone). Foi então que eu notei o porque o trabalho da Apple vicia os consumidores.&lt;/p&gt;

&lt;p&gt;Estamos bem acostumados a utilizar um notebook ou um computador desktop, com monitor, teclado e mouse. A interface do sistema muitas vezes parece desaparecer quando se abre o navegador. A experiência de uso dos periféricos já é bastante conhecida e isso facilita muito a forma com que o usuário interaje com a interface. Há uma harmonia, se é que você me entende. A mesma coisa é dificil de acontecer quando utilizamos um dispositivo mobile. Em um dispositivo móvel você precisa de foco. Não há espaço para milhares de botões com dezenas de ações. É SIM e NÃO. É OK ou CANCELAR e mais nada. O que não é o caso do Windows Mobile. O Windows Mobile foi feito daquele jeito Microsoft. Muito, mas muito diferente do Windows Phone que está um primor. Com uma interface totalmente repensada, do zero, onde seu visual se integra com os outros sistemas da marca. Há uma homogeneidade na experiência do usuário quando ele usa a Live do XBOX, o Windows Phone e o Windows 8. A experiência é cross-platform. A Apple faz isso durante anos. E durante todos estes anos esse foi seu segredo. O famoso &amp;#8220;eco sistema Apple&amp;#8221;. Tudo funciona muito bem quando estamos com nossos iPhones, iPads, MacBooks e iPods. Se eu tenho um iPad, mas utilizo um PC, algo fica estranho. Funciona, mas fica estranho.&lt;/p&gt;

&lt;p&gt;Assim como sistema dos mobiles, os sites precisam seguir a mesma fórmula de simplicidade e foco. Por isso, criar sites para mobiles é uma arte. É um jogo de prioridades. Você precisa saber o que é importante na página e focar naquilo. Há um bom trabalho de arquitetura de informação que precisa ser feito. E não se engane, as vezes é muito mais dificil desenvolver um projeto de arquitetura para mobiles do que para versões full.&lt;/p&gt;

&lt;p&gt;O iPhone, e agora o Windows Phone, se destacam muito por conta dessa harmonia que citei acima. Há uma ligação em tudo ali. Quando você aciona o Safari, ele tem uma interface intuitiva, bem acabada e que não agride a usabilidade do site. O iPhone tem um browser 100% atualizado com os Padrões Web e isso ajuda um bocado o desenvolvimento de interfaces inteligentes.&lt;/p&gt;

&lt;p&gt;E a Apple se preocupa com essa harmonia da qual estamos falando, ela prepara uma série de materiais que ajudam os desenvolvedores. São guias de desenvolvimento e referência com os princípios de design e usabilidade que garantem a experiência completa. Por causa disso os desenvolvedores e designers fazem ótimos apps, tornando a experiência do usuário completa e uniforme durante o uso do dispositivo.&lt;/p&gt;

&lt;p&gt;É por isso que a vale a pena municiar os desenvolvedores e designers do mundo todo, para que a experiência não termine quando o consumidor feche o seu aplicativo ou abra o navegador. Experiência tem começo, meio e fim. A Apple se preocupa com essas etapas. Ela sabe que se o site abrir &amp;#8220;quebrado&amp;#8221; o consumidor vai xingar primeiro o aparelho e não site. Tudo é uma única experiência. Começa no sistema do aparelho e termina no site de um terceiro.&lt;/p&gt;

&lt;p&gt;O resto dos aparelhos começam pecando por ter um browser ruim ou uma interface de uso complicada. Na maioria os browsers não dão suporte algum aos Padrões. Isso é um pecado. Se eu tenho um Smartphone, eu passarei mais tempo na internet, conectado, do que falando ao telefone. Esse é apenas um ponto sobre o porque um dispositivo móvel precisa ter um browser decente.&lt;/p&gt;

&lt;p&gt;O usuário tem uma boa experiência quando consegue com sucesso a informação que procurava, sem bloqueios. Se ele consegue passar esse processo com sucesso, como se o dispositivo (mobile, desktop, notebook, leitor e tela etc) e o site/sistema fossem transparentes, aí cumprimos com o nosso dever.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O que é Usabilidade?</title>
      <link>https://tableless.github.io/hugo-public/o-que-e-usabilidade/</link>
      <pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-que-e-usabilidade/</guid>
      <description>

&lt;p&gt;Já vimos em um &lt;a href=&#34;http://tableless.com.br/estabelecendo-uma-metodologia-agil-para-avaliacao-de-usabilidade&#34;&gt;artigo anterior&lt;/a&gt; como a usabilidade beneficia o desenvolvimento web. Mas, o que de fato compreende a usabilidade? Nem tudo que se refere à experiência de uso está dentro do escopo dela. Sim, a usabilidade tem limitações e lacunas que são complementadas por outros paradigmas, como o design de interação. Porém, podemos considera-la a &lt;em&gt;base da pirâmide&lt;/em&gt; que sustenta o projeto de uma aplicação com boa experiência de uso.  Neste artigo, veremos brevemente o que faz parte do conceito de usabilidade e qual o papel que ela tem no processo de desenvolvimento de aplicações.&lt;/p&gt;

&lt;h2 id=&#34;afinal-o-que-é-usabilidade&#34;&gt;Afinal, o que é usabilidade?&lt;/h2&gt;

&lt;p&gt;A Usabilidade é “filha” da Interação Humano-Computador (IHC) e “neta” da Engenharia de Software, carregando esse legado ao longo de sua evolução, podendo ser definida como o &lt;strong&gt;grau de facilidade&lt;/strong&gt; com que o usuário consegue interagir com determinada interface.&lt;/p&gt;

&lt;p&gt;Partindo da IHC, a usabilidade aborda a forma como o usuário se comunica com a máquina e como a tecnologia responde à interação do usuário, considerando as seguintes habilidades, de acordo com a norma &lt;a title=&#34;Norma ISO 9241&#34; href=&#34;http://en.wikipedia.org/wiki/ISO_9241&#34; target=&#34;_blank&#34;&gt;ISO 9241&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Facilidade de aprendizado:&lt;/strong&gt; a utilização do sistema requer pouco treinamento;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fácil de memorizar:&lt;/strong&gt; o usuário deve lembrar como utilizar a interface depois de algum tempo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maximizar a produtividade:&lt;/strong&gt; a interface deve permitir que o usuário realize a tarefa de forma rápida e eficiente;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimizar a taxa de erros:&lt;/strong&gt; caso aconteçam erros, a interface deve avisar o usuário e permitir a correção de modo fácil;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maximizar a satisfação do usuário:&lt;/strong&gt; a interface deve dar-lhe confiança e segurança.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;p&gt;
    Partindo da Engenharia de Software, a usabilidade é englobada dentro da qualidade e visa garantir uma parte da eficiência e eficácia do sistema. A eficiência refere-se a uma interação produtiva entre o usuário e o sistema, permitindo a realização de tarefas com menor esforço sob uma experiência agradável. A eficácia pode ser entendida como a capacidade do sistema e da interface possibilitarem ao usuário a completude da tarefa e o alcance de seus objetivos no sistema.
  &lt;/p&gt;
  
  &lt;h2&gt;
    A importância da usabilidade no desenvolvimento de projetos
  &lt;/h2&gt;
  
  &lt;p&gt;
    A usabilidade se encaixa em qualquer tipo de projeto de interface, tendo amplitude diferente de acordo com a criticidade do projeto, ou seja, quanto mais crítico for o sistema, maiores serão as perdas caso ele não seja de fácil utilização e proporcione satisfação. Ela deve ser pensada desde o planejamento do projeto, até a etapa de desenvolvimento e teste.
  &lt;/p&gt;
  
  &lt;p&gt;
    As empresas têm consciência da importância da usabilidade. Porém, muitas ainda a veem como um fator que só deve ser levado em conta durante o desenvolvimento se houver tempo e recurso, como se ela representasse um custo adicional, fora do que é essencial. Mas as empresas têm muito mais a perder ao minimizar a usabilidade dessa forma. De acordo com Cybis, Betiol e Faust (2007):
  &lt;/p&gt;
  
  &lt;p&gt;
    “&lt;em&gt;Dependendo da frequência com que o software é empregado, os prejuízos para as empresas podem também ser expressivos, não só em decorrência do absenteísmo e da rotatividade do pessoal, mas também pela baixa produtividade, competitividade e menor retorno de investimento. Sistemas difíceis de usar implicam em erros e perda de tempo, fatores que se multiplicam com a frequência das tarefas e o número de usuários. A perda de dados e informações pode implicar na perda de clientes e de oportunidades. Acontecimentos deste tipo causam desde uma resistência ao uso do sistema até a sua subutilização e abandono completo, com o devido consentimento da empresa. O barato terá custado caro.&lt;/em&gt;”
  &lt;/p&gt;
  
  &lt;p&gt;
    A usabilidade pode ser abordada de diferentes formas ao longo do projeto:
  &lt;/p&gt;
  
  &lt;div id=&#34;attachment_4011&#34; style=&#34;width: 548px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/07/Slide1.png&#34;&gt;&lt;img class=&#34;size-full wp-image-4011  &#34; src=&#34;http://tableless.com.br/wp-content/uploads/2011/07/Slide1.png&#34; alt=&#34;Técnicas utilizadas para garantir e verificar a usabilidade em diferentes etapas&#34; width=&#34;538&#34; height=&#34;403&#34; srcset=&#34;uploads/2011/07/Slide1.png 960w, uploads/2011/07/Slide1-300x225.png 300w&#34; sizes=&#34;(max-width: 538px) 100vw, 538px&#34; /&gt;&lt;/a&gt;
    
    &lt;p class=&#34;wp-caption-text&#34;&gt;
      Técnicas utilizadas para garantir e verificar a usabilidade em diferentes etapas
    &lt;/p&gt;
  &lt;/div&gt;
  

&lt;p&gt;&lt;h2&gt;
    Lacunas a serem preenchidas
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Apesar de a usabilidade ser responsável por assegurar grande parte dos quesitos de experiência do usuário, ela possui duas grandes limitações:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ol start=&#34;1&#34;&gt;
    &lt;li&gt;
      Embora considere a satisfação do usuário, trata apenas dessa satisfação perante a realização de uma determinada tarefa, concentrando-se na função, sem considerar fatores físicos, ambientais e emocionais inerentes ao contexto de utilização do sistema. Mais do que ser de fácil utilização, aprendizagem e permitir completude da tarefa, uma boa experiência de uso está baseada em uma interação agradável, considerando a forma como as pessoas percebem a interação com o sistema;
    &lt;/li&gt;
    &lt;li&gt;
      O contexto usualmente analisado pela usabilidade é mais restrito: abrange apenas a visão do usuário. Para garantir uma boa experiência de uso, é necessário abranger a visão de diferentes &lt;em&gt;stakeholders&lt;/em&gt;: do usuário, da organização e da equipe de desenvolvimento, cada qual com requisitos e necessidades diferentes frente ao sistema.
    &lt;/li&gt;
  &lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Adaptando um gráfico apresentado durante a nnGroup Conference de 2008, podemos ver a usabilidade enquadrada da seguinte forma:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;attachment_4012&#34; style=&#34;width: 586px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/07/Slide2.png&#34;&gt;&lt;img class=&#34;size-full wp-image-4012 &#34; src=&#34;http://tableless.com.br/wp-content/uploads/2011/07/Slide2.png&#34; alt=&#34;O escopo da usabilidade&#34; width=&#34;576&#34; height=&#34;432&#34; srcset=&#34;uploads/2011/07/Slide2.png 960w, uploads/2011/07/Slide2-300x225.png 300w&#34; sizes=&#34;(max-width: 576px) 100vw, 576px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
  O escopo da usabilidade
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    Referências e Leitura Complementar
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    ABRAS, C.; MALONEY-KRICHMAR, D.; PREECE, J. &lt;strong&gt;User-Centered Design&lt;/strong&gt;. In: Bainbridge, W. &lt;em&gt;Encyclopedia of Human-Computer Interaction&lt;/em&gt;. Thousand Oaks: Sage Publications, 2004.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    CYBIS, W.; BETIOL, A. H.; FAUST, R. &lt;strong&gt;Ergonomia e Usabilidade: &lt;/strong&gt;Conhecimentos, Métodos e Aplicações. São Paulo: Novatec Editora, 2007. 344p.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    SUMATHI, B. &lt;strong&gt;Chapter Three: User Centered Design Approach&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://dspace.fsktm.um.edu.my/bitstream/1812/214/8/Chapter%20Three.pdf&#34;&gt;http://dspace.fsktm.um.edu.my/bitstream/1812/214/8/Chapter%20Three.pdf&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    NIELSEN, J.; LORANGER, H. &lt;strong&gt;Usabilidade na Web: &lt;/strong&gt;Projetando Websites com qualidade. Rio de Janeiro: Elsevier, 2007. 406p.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    OLIVEIRA NETTO, A. A. &lt;strong&gt;IHC – Interação Humano Computador:&lt;/strong&gt; Modelagem e Gerência de Interfaces com o Usuário. Florianópolis: VisualBooks, 2004. 120p.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    PREECE, J.; ROGERS; Y.; SHARP, H. &lt;strong&gt;Interaction Design: &lt;/strong&gt;Beyond Human-Computer Interaction. New York: John Wiley &amp;amp; Sons, Inc., 2002. 551p.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    ROCHA, H. R.; BARANAUSKAS, M. C. C. &lt;strong&gt;Design e Avaliação de Interfaces Humano-Computador&lt;/strong&gt;. Campinas: Universidade Estadual de Campinas, 2007.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    UX Revisions. &lt;strong&gt;The Difference Between Usability and User Experience&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://www.uxrevisions.com/user-experience-design/the-difference-between-usability-and-user-experience/18/&#34;&gt;http://www.uxrevisions.com/user-experience-design/the-difference-between-usability-and-user-experience/18/&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    UX Revisions. &lt;strong&gt;User Experience vs User Interaction&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://www.uxrevisions.com/user-experience-design/user-experience-vs-user-interaction/16/&#34;&gt;http://www.uxrevisions.com/user-experience-design/user-experience-vs-user-interaction/16/&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Usability Geek. &lt;strong&gt;The Difference (And Relationship) Between Usability And User Experience&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://usabilitygeek.com/the-difference-between-usability-and-user-experience/&#34;&gt;http://usabilitygeek.com/the-difference-between-usability-and-user-experience/&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    NeoSpot. &lt;strong&gt;Usability vs. User Experience (UX)&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://neospot.se/usability-vs-user-experience/&#34;&gt;http://neospot.se/usability-vs-user-experience/&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Interaction by Design. &lt;strong&gt;Usability vs. user experience&lt;/strong&gt;. Disponível em: &lt;a href=&#34;http://www.interactionbydesign.com/thoughts/thumbnails/00000050.html&#34;&gt;http://www.interactionbydesign.com/thoughts/thumbnails/00000050.html&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 – Breve introdução ao RGBA</title>
      <link>https://tableless.github.io/hugo-public/css3-breve-introducao-a-rgba/</link>
      <pubDate>Mon, 02 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-breve-introducao-a-rgba/</guid>
      <description>

&lt;h3 id=&#34;introdução-ao-rgb&#34;&gt;Introdução ao RGB&lt;/h3&gt;

&lt;p&gt;Normalmente em web trabalhamos com cores na forma de hexadecimal. É a forma mais comum e mais utilizada desde os primórdios do desenvolvimento web. Mesmo assim, há outros formatos menos comuns que funcionam sem problemas, um destes formatos é o RGB. O RGB são 3 conjuntos de números que começam no 0 e vão até 255 (0% até 100%), onde o primeiro bloco define a quantidade de vermelho (Red), o segundo bloco a quantidade de verde (Green) e o último bloco a quantidade de azul (Blue). A combinação destes números formam todas as cores que você pode imaginar.&lt;/p&gt;

&lt;p&gt;No HTML o RGB pode ser usado em qualquer propriedade que tenha a necessidade de cor, como: color, background, border etc. Exemplo:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;p {&lt;/p&gt;

&lt;p&gt;background:rgb(255,255,0);&lt;/p&gt;

&lt;p&gt;padding:10px;&lt;/p&gt;

&lt;p&gt;font:13px verdana;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Este código RGB define que o background o elemento P será amarelo.&lt;/p&gt;

&lt;h3 id=&#34;aplicando-o-rgba-e-a-diferença-da-propriedade-opacity&#34;&gt;Aplicando o RGBA e a diferença da propriedade OPACITY&lt;/h3&gt;

&lt;p&gt;Até então nós só podíamos escrever cores sólidas, sem nem ao menos escolhermos a opacidade dessa cor. O CSS3 nos trouxe a possibilidade de modificar a opacidade dos elementos via propriedade opacity. Lembrando que quando modificamos a opacidade do elemento, tudo o que está contido nele também fica transparente e não apenas o background ou a cor dele. &lt;a href=&#34;http://tableless.github.com/exemplos/rgba/&#34; title=&#34;Teste de RGBA&#34;&gt;Veja o exemplo e compare&lt;/a&gt;. É aí que entra o RGBA.&lt;/p&gt;

&lt;p&gt;O RGBA funciona da mesma forma que o RGB. No caso do RGBA, além dos 3 canais RGB (Red, Green e Blue) há um quarto canal, A (Alpha) que controla a opacidade da cor. Nesse caso, podemos controlar a opacidade da cor de background, borda, color ou qualquer propriedade que contenha cor sem afetar a transparência dos outros elementos:&lt;/p&gt;

&lt;p&gt;Veja um exemplo aplicado abaixo:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;p {&lt;/p&gt;

&lt;p&gt;background:rgba(255,255,0, 0.5);&lt;/p&gt;

&lt;p&gt;padding:10px;&lt;/p&gt;

&lt;p&gt;font:13px verdana;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;O último valor é referente ao canal Alpha, onde 1 é totalmente visível e 0 é totalmente invisível. No exemplo acima está com uma opacidade de 50%.&lt;/p&gt;

&lt;p&gt;Como o Hexadecimal, você não precisa decorar todos estes números. Hoje, qualquer programa gráfico já dá o código do RGB da cor utilizada. O Hexadecimal não foi descontinuado. Se caso você tenha alguma cor que não ficará transparente ou algo do tipo, você pode continuar utilizando hexa e para aqueles que tem transparência, você pode utilizar o RGBA sem problemas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/rgba/&#34; title=&#34;Teste de RGBA&#34;&gt;Veja novamente o exemplo aqui&lt;/a&gt; e o &lt;a href=&#34;https://github.com/tableless/exemplos/tree/gh-pages/rgba&#34; title=&#34;Código no Github&#34;&gt;código no github do Tableless&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manipulando a metatag Viewport</title>
      <link>https://tableless.github.io/hugo-public/manipulando-metatag-viewport/</link>
      <pubDate>Mon, 18 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/manipulando-metatag-viewport/</guid>
      <description>

&lt;p&gt;O viewport é a área onde seu website aparece. É a área branca da janela quando você abre o browser. O viewport sempre vai ter o tamanho da janela. Mas a forma como os elementos são renderizados vai depender bastante do dispositivo. Em máquinas desktop nós não precisamos nos preocupar muito, já estamos acostumados com um determinado tamanho de tela e resolução média utilizada pelos usuários. Mas quando começamos a variar muito o tamanho das telas, a largura do viewport começa a ser uma preocupação porque afeta diretamente a forma como o usuário utiliza seu website. O ponto é que em uma tela pequena, com uma resolução muito grande, por exemplo como as telas dos iPhone e da maioria dos smartphones de hoje, o conteúdo pode aparecer muito, muito pequeno. Imagine uma resolução FULL HD dentro de uma tela bem menor que uma TV&amp;#8230; Por isso precisamos fazer com que o viewport mostre o conteúdo se baseando pelo tamanho da tela e não da resolução.&lt;/p&gt;

&lt;p&gt;Hoje existe uma gama muito grande de aparelhos com telas de tamanhos variados. Comece a pensar pelos notebooks de 11 ou 10 polegadas. Depois vá diminuindo até chegar em um smartphone popular como iPhone e os Samsungs da vida. A variação de tamanho de tela é muito grande. Lembrando que o tamanho da tela é uma coisa e a resolução de tela é outra. Nunca confunda os dois. A largura da tela do iPhone 5s na posição retrato é de 320px. Mas sua resolução padrão é 980px. Isso quer dizer que se você fizer um HTML simples, colocar uma imagem de 980px de largura e visualizar no iPhone, não existirá barra de rolagem. Obviamente a imagem ficará miniaturizada, como mostra abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/980px.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Isso é interessante porque possibilita a boa visualização de websites que não estão preparados para mobiles. Vemos o site inteiro miniaturizado, com possibilidade de fazer zoom em qualquer parte do layout.&lt;/p&gt;

&lt;h3 id=&#34;a-tag-meta-viewport&#34;&gt;A tag meta viewport&lt;/h3&gt;

&lt;p&gt;Mesmo assim os smartphones tem telas pequenas podem dificultar a leitura se fizermos um sistema planejado para grandes resoluções. Por isso é interessante que possamos customizar o viewport para que ele se adeque a realidade desses dispositivos. É aí que entra a metatag viewport.&lt;/p&gt;

&lt;p&gt;Com essa metatag iremos customizar a resolução inicial que o browser deve renderizar do viewport do dispositivo. Dessa forma, podemos preparar websites com resoluções personalizadas para smartphones e outros aparelhos.&lt;/p&gt;

&lt;p&gt;A sintaxe é muito simples e deve ser colocada, como sempre, na tag &lt;strong&gt;head&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Os valores de content são os que seguem abaixo:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Valor&lt;/th&gt;
&lt;th&gt;Descrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;width&lt;/td&gt;
&lt;td&gt;Define uma largura para o viewport. Os valores podem ser em PX ou &amp;#8220;device-width&amp;#8221;, que determina automaticamente um valor igual a largura da tela do dispositivo.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;height&lt;/td&gt;
&lt;td&gt;Define uma altura para o viewport. Os valores podem ser em PX ou &amp;#8220;device-height&amp;#8221;, que determina automaticamente um valor igual a altura da tela do dispositivo.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;initial-scale&lt;/td&gt;
&lt;td&gt;Define a escala inicial do viewport.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user-scalable&lt;/td&gt;
&lt;td&gt;Define a possibilidade de o usuário fazer &amp;#8220;zoom&amp;#8221; em um determinado lugar da tela. É ativado quando o usuário bate duas vezes com o dedo em um lugar da tela.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;como-usar&#34;&gt;Como usar&lt;/h3&gt;

&lt;p&gt;A tela abaixo não tem nenhuma tag de viewport definida.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/viewport-980.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Veja que o texto do elemento está bem pequeno. Isso é porque estamos visualizando-o em 980px de resolução em uma tela de smartphone.&lt;/p&gt;

&lt;p&gt;Vou acrescentar a seguinte linha:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;width=320px&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Define que a largura do viewport será 320px. O resultado está abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/viewport-320px.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Se inserirmos uma imagem ou um objeto maior que a largura do viewport, uma barra de rolagem é criada. Não precisa se preocupar com o espaço da barra, já que pelo menos nos OSs de smartphones novos, como iPhone e Android, a barra fica invisível e só aparece pro cima dos elementos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/rolagem.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Adicionando o &lt;strong&gt;initial-scale&lt;/strong&gt; com o valor de 1.5, temos um aumento na escala da visualização. Abaixo segue um exemplo comparativo. A imagem inserida tem 320px de largura, logo ela ficará bem justa na tela quando a escala é 1.0, e um pouco estourada quando a escala é 1.5 ou maior. Veja:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/initi-scale1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora com escala de 1.5:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/init-scale15.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora com escala de 2:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/init-scale2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E agora com texto, nas mesmas proporções:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/scale1-text.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/scale15-text.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/scale2-text.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Se colocarmos o &lt;strong&gt;user-scalable&lt;/strong&gt; como NO, desabilitamos a possibilidade do usuário de fazer zoom quando ele bate duas vezes com o dedo. Deixar habilitado o zoom é interessante utilizar quando o viewport não está sendo customizado. No nosso caso aqui, isso não iria adiantar muita coisa, já que todos os elementos estão com o tamanho natural, por isso vamos desabilitá-lo.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;width=320px, user-scalable=no&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Atente-se para o detalhe de colocar , (vírgula) entre um valor e outro.&lt;/p&gt;

&lt;p&gt;Veja um &lt;a href=&#34;http://tableless.github.com/exemplos/viewport/viewport.html&#34;&gt;exemplo aqui&lt;/a&gt;. Tente ver com um smartphone como o iPhone, Android, etc.&lt;/p&gt;

&lt;p&gt;Manipular o Viewport nos dá possibilidades para personalizar o visual de qualquer site para praticamente qualquer dispositivo, não importa sua resolução ou seu tamanho de tela. Quando unimos isso às &lt;a href=&#34;http://tableless.com.br/introducao-sobre-media-queries&#34;&gt;media queries&lt;/a&gt;, temos um outro mundo de possibilidades.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>