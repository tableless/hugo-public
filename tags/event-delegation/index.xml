<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Event Delegation on Tableless</title>
    <link>http://tableless.com.br/tags/event-delegation/index.xml</link>
    <description>Recent content in Event Delegation on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/event-delegation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Entendendo o Event Delegation da função on() no jQuery</title>
      <link>http://tableless.com.br/entendendo-o-event-delegation-jquery/</link>
      <pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/entendendo-o-event-delegation-jquery/</guid>
      <description>&lt;p&gt;Geralmente uma &amp;#8220;delegação&amp;#8221;, que seria a uma tradução livre para &lt;strong&gt;delegation&lt;/strong&gt;, significa definir um evento para um elemento pai, que será disparado para todos os seus filhos. O evento vai funcionar para qualquer elemento filho que já existir e também para os que forem adicionados posteriormente na árvore do DOM.&lt;/p&gt;

&lt;p&gt;Para exemplificar, entenda o código abaixo. Ele apenas muda o texto do parágrafo quando clicamos em alguma opção do menu. É um uso simples da função &lt;code&gt;on(&#39;click&#39;)&lt;/code&gt; do jQuery:&lt;/p&gt;

&lt;p&gt;Para entender como isso funciona, você precisa saber o que é o &lt;code&gt;event propagation&lt;/code&gt; (ou &lt;code&gt;event bubbling&lt;/code&gt;): toda vez que você clica em um elemento, esse clique é propagado para toda a árvore do DOM, iniciando pelo elemento onde o evento aconteceu e chegando até o root do documento, que no nosso caso é a tag HTML.&lt;/p&gt;

&lt;p&gt;Além disso, você faz seu browser ouvir o click em todos os elementos desse nosso menu, se considerarmos o exemplo acima. Nesse nosso caso, não chega a ser um problema, mas imagine em uma tabela que tem muitas células e que você precisa executar alguma coisa quando alguma das &lt;code&gt;td&lt;/code&gt; é clicada. A performance começa a ser prejudicada.&lt;/p&gt;

&lt;p&gt;Quando usamos o &lt;strong&gt;event delegation&lt;/strong&gt; ao nosso favor, podemos definir o evento no elemento pai e então, quando esse evento acontecer, delegamos para o seu filho. No nosso exemplo acima, nós vamos atrelar o evento de click no &lt;code&gt;ul.menu&lt;/code&gt;, mas delegando esse evento para os links. A função em si nem muda tanto, ela fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.menu&#39;).on(&#39;click&#39;, &#39;a&#39;, function(evt){
        // Seu código...
    });
&lt;/pre&gt;

&lt;p&gt;Perceba que a função &lt;code&gt;on()&lt;/code&gt; recebe dois parâmetros: o primeiro é o evento e o segundo é o elemento filho que esse evento deve ser aplicado.&lt;/p&gt;

&lt;p&gt;Suponha que você tenha alguma função que adiciona mais filhos ao seu elemento pai. A propagação continua funcionando, já que o evento está atrelado ao pai e não aos seus filhos.&lt;/p&gt;

&lt;p&gt;Lembrando que a função &lt;code&gt;on()&lt;/code&gt; foi adicionada no jQuery 1.7, para juntar as vantagens das funções &lt;code&gt;delegate()&lt;/code&gt; e &lt;code&gt;live()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Há uma &lt;a href=&#34;http://jsperf.com/jquery-event-delegation/5&#34;&gt;análise de performance no JSPerf&lt;/a&gt; comparando o várias maneiras para você delegar os eventos aos filhos de um elemento. O &lt;code&gt;delegate()&lt;/code&gt; tem quase a mesma performance que o &lt;code&gt;on()&lt;/code&gt;, mesmo assim é melhor usar o &lt;code&gt;on()&lt;/code&gt;, já que ele tem mais vantagens.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>