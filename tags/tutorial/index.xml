<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/tutorial/index.xml</link>
    <description>Recent content in Tutorial on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Criando uma aplica√ß√£o m√≥vel com Ionic 2 e Angular 2 em dez passos</title>
      <link>https://tableless.github.io/hugo-public/criando-uma-aplicacao-movel-com-ionic-2-e-angular-2-em-dez-passos/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-uma-aplicacao-movel-com-ionic-2-e-angular-2-em-dez-passos/</guid>
      <description>

&lt;h2 id=&#34;introdu√ß√£o&#34;&gt;Introdu√ß√£o&lt;/h2&gt;

&lt;p&gt;√Ä esta altura do campeonato √© prov√°vel que voc√™ j√° tenha ouvido falar da nova vers√£o deste famoso framework para cria√ß√£o de aplica√ß√µes m√≥veis h√≠bridas. O &lt;strong&gt;&lt;a href=&#34;https://ionicframework.com/docs/v2/&#34; target=&#34;_blank&#34;&gt;Ionic 2&lt;/a&gt;&lt;/strong&gt; acaba de chegar em seu &lt;em&gt;Release Candidate&lt;/em&gt; e, com ele, tr√°s uma s√©rie de recursos e otimiza√ß√µes de c√≥digo, al√©m de um consider√°vel ganho de performance! Muito desse m√©rito se deve ao &lt;strong&gt;&lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34;&gt;Angular&lt;/a&gt;&lt;/strong&gt; (como √© chamada a nova vers√£o do framework, que deixa para tr√°s o &amp;#8220;JS&amp;#8221; ao final do nome) que chega &amp;#8211; finalmente &amp;#8211; na sua vers√£o est√°vel, provando que n√£o est√° para brincadeiras.&lt;/p&gt;

&lt;p&gt;Depois de passar por v√°rias mudan√ßas e quebras de c√≥digo √† cada novo release, o &lt;strong&gt;Ionic 2&lt;/strong&gt; agora atinge a maturidade e se torna um competidor ainda mais forte do modelo de desenvolvimento tradicional (nativo). No entanto, se voc√™ j√° est√° familiarizado com o &lt;strong&gt;&lt;a href=&#34;http://ionicframework.com/&#34; target=&#34;_blank&#34;&gt;Ionic 1&lt;/a&gt;&lt;/strong&gt;, a mudan√ßa nos conceitos pode lhe soar um tanto quanto desagrad√°veis √† primeira vista. Mas uma vez que voc√™ entende como as pe√ßas se encaixam, vai perceber que criar aplica√ß√µes m√≥veis com o framework tornou-se uma atividade ainda mais simples e recompensadora.&lt;/p&gt;

&lt;h3 id=&#34;o-que-tem-de-novo&#34;&gt;O que tem de novo?&lt;/h3&gt;

&lt;p&gt;O Ionic foi desenvolvido com base no &lt;strong&gt;&lt;a href=&#34;https://angularjs.org/&#34; target=&#34;_blank&#34;&gt;AngularJS&lt;/a&gt;&lt;/strong&gt;, um framework voltado para a cria√ß√£o de aplica√ß√µes web modernas, constru√≠das com base em uma p√°gina &lt;strong&gt;HTML5&lt;/strong&gt; que atualiza seu conte√∫do de maneira din√¢mica (as famosas &lt;em&gt;Single Page Applications&lt;/em&gt; ou &lt;em&gt;SPAs&lt;/em&gt;). Ao tirar proveito dessa arquitetura &amp;#8211; e adicionar uma s√©rie de estilos que emulam o visual de aplica√ß√µes nativas &amp;#8211; o Ionic facilitou, em muito, a tarefa de construir um app h√≠brido, ou seja, aquele que executa tanto em smartphones &lt;strong&gt;iOS&lt;/strong&gt; quando &lt;strong&gt;Android&lt;/strong&gt;, otimizando o seu &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Time_to_market&#34; target=&#34;_blank&#34;&gt;Tempo de Mercado&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mesmo ainda sendo executado em uma &lt;strong&gt;WebView&lt;/strong&gt; (browser interno dos smartphones), uma aplica√ß√£o baseada no Ionic 2 √© muito mais r√°pida, modular e escal√°vel, se comparada com a primeira vers√£o. Principalmente porque o framework segue os padr√µes web mais recentes, como a nova especifica√ß√£o &lt;strong&gt;ES6&lt;/strong&gt; (ou ES2015), trazendo para o javaScript conceitos como &lt;strong&gt;classes&lt;/strong&gt;, &lt;strong&gt;m√≥dulos&lt;/strong&gt; e &lt;strong&gt;arrow functions&lt;/strong&gt;. Al√©m disso, temos tamb√©m a presen√ßa do pol√™mico &lt;strong&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34; target=&#34;_blank&#34;&gt;TypeScript&lt;/a&gt;&lt;/strong&gt; (opcional), que tr√°s o poder da tipagem para o seu c√≥digo, com o intuito de minimizar erros, simplificar a inje√ß√£o de depend√™ncias, facilitar testes, e etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/tumblr_npjjd6T4Lu1tq4of6o1_400.gif&#34; alt=&#34;Too much information - gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mas embora tudo isso pare√ßa um verdadeiro balaio de gato que funciona mais como repelente do que atrativo, n√£o se deixe enganar: A vers√£o 2 do Ionic d√° um consider√°vel salto de inova√ß√£o em rela√ß√£o √† sua vers√£o original e abre caminho para &lt;a href=&#34;https://ionicframework.com/docs/v2/resources/progressive-web-apps/&#34; target=&#34;_blank&#34;&gt;novas e interessantes tend√™ncias&lt;/a&gt; que valem a pena serem exploradas!&lt;/p&gt;

&lt;h2 id=&#34;m√£o-na-massa&#34;&gt;M√£o na massa!&lt;/h2&gt;

&lt;p&gt;Para entender melhor como se constr√≥i uma aplica√ß√£o com o Ionic 2, vamos criar uma do zero üòÄ&lt;/p&gt;

&lt;p&gt;A aplica√ß√£o que iremos construir √© um simples leitor de feeds baseado na API do &lt;strong&gt;&lt;a href=&#34;https://www.reddit.com/&#34; target=&#34;_blank&#34;&gt;Reddit&lt;/a&gt;&lt;/strong&gt;, o poderoso canal agregador de not√≠cias, onde membros da comunidade podem submeter conte√∫dos como links, textos, imagens, etc. O app ser√° 100% funcional e poder√° ser instalado no seu smartphone e, quem sabe, at√© mesmo evoluir com a inclus√£o de novas funcionalidades.&lt;/p&gt;

&lt;h3 id=&#34;instalando-o-framework&#34;&gt;Instalando o framework&lt;/h3&gt;

&lt;p&gt;Se voc√™ j√° tem o Ionic 1 instalado na sua m√°quina, basta digitar o seguinte comando no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g ionic&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Esse comando atualiza o framework para trabalhar com o Ionic 2 sem afetar a instala√ß√£o da vers√£o 1.&lt;/p&gt;

&lt;p&gt;Mas caso voc√™ seja marinheiro de primeira viagem, certifique-se que tenha o &lt;strong&gt;&lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt;&lt;/strong&gt; instalado na sua m√°quina e, em seguida, digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g ionic cordova&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lembre-se de que voc√™ tamb√©m deve ter o SDK do Android e o Java instalados para fazer build para Android e/ou o Xcode para o build no iPhone:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ionicframework.com/docs/v2/resources/platform-setup/mac-setup.html&#34; target=&#34;_blank&#34;&gt;Guia de instala√ß√£o para Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ionicframework.com/docs/v2/resources/platform-setup/windows-setup.html&#34; target=&#34;_blank&#34;&gt;Guia de instala√ß√£o para Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depois que a instala√ß√£o for conclu√≠da, voc√™ pode verificar a vers√£o do framework no terminal, digitando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic -v&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;criando-um-novo-projeto&#34;&gt;Criando um novo projeto&lt;/h3&gt;

&lt;p&gt;O CLI (&lt;em&gt;Command Line Interface&lt;/em&gt;) do Ionic vem com um monte de comandos √∫teis que nos ajudam na cria√ß√£o e na manuten√ß√£o dos projetos. Para conferir a lista de comandos dispon√≠veis, digite:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic help&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Por enquanto o que nos interessa √© o comando &lt;strong&gt;start&lt;/strong&gt;. Digite o seguinte no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic start MyReader blank --v2 --appname &amp;quot;Best Reader Ever&amp;quot; --id &amp;quot;com.tableless.myreader&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;O comando &lt;strong&gt;start&lt;/strong&gt; oferece tr√™s tipos de templates com c√≥digo boilerplate. S√£o eles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sidemenu&lt;/strong&gt; &amp;#8211; adiciona um menu lateral √† aplica√ß√£o (estilo de navega√ß√£o &lt;a href=&#34;https://material.google.com/patterns/navigation-drawer.html&#34; target=&#34;_blank&#34;&gt;padr√£o no Android&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tabs&lt;/strong&gt; &amp;#8211; cria uma navega√ß√£o baseada em guias (modelo de organiza√ß√£o de conte√∫do &lt;a href=&#34;https://developer.apple.com/ios/human-interface-guidelines/ui-bars/tab-bars/&#34; target=&#34;_blank&#34;&gt;incentivado pelo iOS&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blank&lt;/strong&gt; &amp;#8211; cria um projeto com boilerplate b√°sico, sem nenhum template espec√≠fico.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O comando que digitamos no terminal vai utilizar o template &lt;strong&gt;blank&lt;/strong&gt;. Tamb√©m passamos mais tr√™s par√¢metros adicionais: &lt;strong&gt;v2&lt;/strong&gt; que informa que queremos trabalhar com a vers√£o 2 do Ionic, &lt;strong&gt;appname&lt;/strong&gt;, que define um nome de projeto menos formal e &lt;strong&gt;id&lt;/strong&gt;, que nos possibilita definir o package da aplica√ß√£o.&lt;/p&gt;

&lt;p&gt;Vamos agora acessar a pasta do nosso projeto, digitando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd MyReader&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-1-8211-conhecendo-a-arquitetura&#34;&gt;Passo 1 &amp;#8211; Conhecendo a arquitetura&lt;/h3&gt;

&lt;p&gt;Depois de tantas configura√ß√µes e explica√ß√µes iremos, enfim, para a parte divertida do processo!&lt;/p&gt;

&lt;p&gt;Se voc√™ visitar a pasta do projeto dentro de &lt;strong&gt;src/pages/&lt;/strong&gt;, vai notar a presen√ßa de uma outra pasta chamada &lt;strong&gt;home&lt;/strong&gt;. Dentro dela h√° tr√™s arquivos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;home.html;&lt;/li&gt;
&lt;li&gt;home.scss;&lt;/li&gt;
&lt;li&gt;home.ts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essas pastas e arquivos foram criados como resultado do comando &lt;strong&gt;start&lt;/strong&gt;. O Ionic √© baseado no Angular que, por sua vez, considera que os principais componentes de uma aplica√ß√£o devem ter escopos isolados. Portanto, cada &amp;#8220;p√°gina&amp;#8221; de um projeto tem seu pr√≥prio template visual (html), estilo (scss) e classe (ts). Perceba tamb√©m que, por padr√£o, o Ionic utiliza &lt;strong&gt;Sass&lt;/strong&gt; para a escrita de CSS e TypeScript para as classes, ao inv√©s de JavaScript puro. Fique √† vontade para vasculhar as pastas do projeto e entender como as informa√ß√µes s√£o organizadas, uma vez que este tutorial n√£o tem o prop√≥sito de explorar isso com detalhes.&lt;/p&gt;

&lt;p&gt;Antes de modificar algo no projeto, vamos verificar o que j√° foi gerado de gra√ßa. Digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Este comando inicia um servidor local na nossa m√°quina e abre uma nova aba no browser com a aplica√ß√£o no ar. Como o &lt;em&gt;LiveReload&lt;/em&gt; j√° vem habilitado por padr√£o, modifica√ß√µes que fizermos no c√≥digo ser√£o refletidas automaticamente no browser:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-1.jpg&#34; alt=&#34;Ionic 2 - Screenshot 1 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos ver isso acontecendo em tempo real. Abra o arquivo &lt;strong&gt;home.html&lt;/strong&gt; e remova o c√≥digo desnecess√°rio at√© que ele fique assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar&amp;gt;
    &amp;lt;ion-title&amp;gt;My Feed Reader&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;

&amp;lt;ion-content&amp;gt;

&amp;lt;/ion-content&amp;gt;&lt;/pre&gt;

&lt;p&gt;Confira a mudan√ßa ocorrendo automaticamente no browser:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-2.jpg&#34; alt=&#34;Ionic 2 - Screenshot 2 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos dar uma olhada no componente respons√°vel por controlar nosso template. Abra o arquivo &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController } from &#39;ionic-angular&#39;;

@Component({
   selector: &#39;page-home&#39;,
   templateUrl: &#39;home.html&#39;
})
export class HomePage {
   constructor(public navCtrl: NavController) {}
}
&lt;/pre&gt;

&lt;p&gt;Perceba que o arquivo √© composto por tr√™s blocos distintos, que eu chamo carinhosamente de os &lt;strong&gt;3D&lt;/strong&gt;: &lt;strong&gt;Declaration&lt;/strong&gt;, &lt;strong&gt;Decorator&lt;/strong&gt; e &lt;strong&gt;Definition&lt;/strong&gt;. A primeira parte √© onde declaramos componentes externos ou bibliotecas que iremos utilizar em nosso projeto:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController } from &#39;ionic-angular&#39;;
&lt;/pre&gt;

&lt;p&gt;O segundo bloco √© composto por um &lt;strong&gt;Decorator&lt;/strong&gt;. No Angular, todo componente tem um &amp;#8220;decorador&amp;#8221;, que √© respons√°vel por fornecer metadados ou informa√ß√µes sobre a classe. No nosso caso, o decorador est√° dizendo que as modifica√ß√µes no html ser√£o feitas apenas no componente &lt;strong&gt;page-home&lt;/strong&gt; e que este arquivo, ou seja, o template html que iremos utilizar, se chama &lt;strong&gt;home.html&lt;/strong&gt;, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;@Component({
   selector: &#39;page-home&#39;,
   templateUrl: &#39;home.html&#39;
})
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Lembre-se que, por padr√£o, os Decorators ficam sempre em cima do bloco de defini√ß√£o da classe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O seletor &lt;strong&gt;page-home&lt;/strong&gt; ser√° √∫til quando for necess√°rio criar regras de estilo em CSS aplicadas apenas √† ele.&lt;/p&gt;

&lt;p&gt;E, por fim, temos nosso escopo de classe. Classes em qualquer linguagem de programa√ß√£o orientada √† objeto servem para definir a estrutura e o comportamento de objetos. Por enquanto o que voc√™ precisa saber √© que nossa classe tem apenas um construtor que recebe um objeto do tipo &lt;strong&gt;NavController&lt;/strong&gt; por par√¢metro. Nosso pr√≥ximo passo ser√° inserir novos atributos e m√©todos para definir melhor o seu comportamento:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;export class HomePage {
  constructor(public navCtrl: NavController) {}
&lt;/pre&gt;

&lt;h3 id=&#34;passo-2-8211-consumindo-dados-de-uma-api-p√∫blica&#34;&gt;Passo 2 &amp;#8211; Consumindo dados de uma API p√∫blica&lt;/h3&gt;

&lt;p&gt;Agora que voc√™ j√° sabe mais ou menos como as coisas funcionam, vamos fazer rapidamente uma requisi√ß√£o √† uma API externa (Reddit) para exibir seu resultado em uma lista no nosso template.&lt;/p&gt;

&lt;h4 id=&#34;2-1-8211-trabalhando-com-observables&#34;&gt;2.1 &amp;#8211; Trabalhando com Observables&lt;/h4&gt;

&lt;p&gt;Inclua o seguinte c√≥digo em &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController } from &#39;ionic-angular&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;

@Component({
  selector: &#39;page-home&#39;,
  templateUrl: &#39;home.html&#39;
})
export class HomePage {

  public feeds: Array&amp;lt;string&amp;gt;;
  private url: string = &#34;https://www.reddit.com/new.json&#34;;  

  constructor(public navCtrl: NavController, public http: Http) {

    this.http.get(this.url).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
        this.feeds = data.data.children;
      }); 
  }

}
&lt;/pre&gt;

&lt;p&gt;_Caso queira entender melhor sobre os endpoints da API, d√™ uma olhada &lt;a href=&#34;https://www.reddit.com/dev/api/&#34; target=&#34;_blank&#34;&gt;nesse link&lt;/a&gt;._&lt;/p&gt;

&lt;p&gt;O que fizemos acima foi importar o componente &lt;strong&gt;Http&lt;/strong&gt; e injet√°-lo no m√©todo construtor. Isso nos possibilita acessar sua inst√¢ncia atrav√©s do objeto &lt;strong&gt;this&lt;/strong&gt;. Note que tamb√©m estamos importando o operador &lt;strong&gt;map&lt;/strong&gt; da biblioteca &lt;strong&gt;&lt;a href=&#34;https://github.com/Reactive-Extensions/RxJS&#34; target=&#34;_blank&#34;&gt;rxjs&lt;/a&gt;&lt;/strong&gt;. O rxjs √© uma das extens√µes que comp√µe a &lt;strong&gt;&lt;a href=&#34;http://reactivex.io/&#34; target=&#34;_blank&#34;&gt;reactiveX&lt;/a&gt;&lt;/strong&gt; (Reactive Extensions), uma biblioteca ass√≠ncrona que trabalha com o stream de dados no padr√£o &lt;strong&gt;Observable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;No objeto http estamos fazendo uma requisi√ß√£o do tipo &lt;strong&gt;GET&lt;/strong&gt; √† um endpoint que definimos na vari√°vel &lt;strong&gt;url&lt;/strong&gt;, acima do m√©todo construtor. Note que, com o uso do TypeScript, podemos definir seu escopo (p√∫blica ou privada) e ainda definir o seu tipo (string, number, array&amp;#8230;). Ponto para o TypeScript!&lt;/p&gt;

&lt;p&gt;Em seguida, transformamos o resultado dessa requisi√ß√£o utilizando o operador map e o convertemos para JSON atrav√©s do m√©todo &lt;strong&gt;subscribe&lt;/strong&gt; (&amp;#8220;similar&amp;#8221; ao m√©todo &lt;strong&gt;then&lt;/strong&gt; de uma Promise).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;√â importante salientar que o map da biblioteca rxjs √© utilizado exclusivamente para mapear um &lt;strong&gt;array do tipo Observable&lt;/strong&gt; e n√£o √© o mesmo map que utilizamos em um array comum no JavaScript. Aprenda mais sobre requisi√ß√µes remotas com Observables &lt;a href=&#34;https://angular.io/docs/ts/latest/guide/server-communication.html#!#rxjs&#34; target=&#34;_blank&#34;&gt;nesse link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Por fim, inclu√≠mos o resultado da requisi√ß√£o (agora um objeto do tipo JSON) dentro da vari√°vel p√∫blica &lt;strong&gt;feeds&lt;/strong&gt;, que aqui representa um array de strings. Seu escopo precisa ser p√∫blico pois iremos acessar seu conte√∫do no template.&lt;/p&gt;

&lt;h4 id=&#34;2-2-8211-exibindo-resultado-para-o-usu√°rio&#34;&gt;2.2 &amp;#8211; Exibindo resultado para o usu√°rio&lt;/h4&gt;

&lt;p&gt;Como voc√™ percebeu, dentro do nosso arquivo &lt;strong&gt;home.ts&lt;/strong&gt; h√° uma refer√™ncia ao template &lt;strong&gt;home.html&lt;/strong&gt; dentro do bloco &lt;strong&gt;@Component&lt;/strong&gt;. Esse template, na verdade, √© aquilo que o usu√°rio realmente v√™ na tela do seu smartphone, com base no que definimos dentro da nossa classe. Por enquanto ele n√£o est√° exibindo nada. Modifique o conte√∫do de &lt;strong&gt;home.html&lt;/strong&gt; conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-header&amp;gt;
  &amp;lt;ion-navbar&amp;gt;
    &amp;lt;ion-title&amp;gt;My Feed Reader&amp;lt;/ion-title&amp;gt;
  &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;

&amp;lt;ion-content&amp;gt;
  &amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34;&amp;gt;
      {{feed.data.title}}
    &amp;lt;/ion-item&amp;gt;
  &amp;lt;/ion-list&amp;gt;
&amp;lt;/ion-content&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O Ionic fornece uma grande variedade de componentes visuais &lt;em&gt;out of the box&lt;/em&gt; que nos permite construir uma interface praticamente id√™ntica √† de uma aplica√ß√£o nativa. N√£o s√≥ isso como tamb√©m √© capaz de adaptar o seu estilo visual de acordo com cada plataforma (algo que veremos em breve).&lt;/p&gt;

&lt;p&gt;A tag &lt;strong&gt;&lt;ion-navbar&gt;&lt;/strong&gt; representa a barra de navega√ß√£o que fica no topo da tela. Essa barra geralmente comporta o t√≠tulo da aplica√ß√£o (como visto na tag &lt;strong&gt;&lt;ion-title&gt;&lt;/strong&gt;) mas tamb√©m pode conter bot√µes de a√ß√£o e demais itens, caso necess√°rio.&lt;/p&gt;

&lt;p&gt;J√° as informa√ß√µes din√¢micas sempre s√£o inseridas dentro da tag &lt;strong&gt;&lt;ion-content&gt;&lt;/strong&gt;, como acabamos de fazer ao inserir o componente &lt;strong&gt;&lt;ion-list&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N√£o iremos nos aprofundar nos detalhes dos templates visuais fornecidos pelo Ionic. Voc√™ pode encontrar exemplos do markup de cada componente &lt;a href=&#34;https://ionicframework.com/docs/v2/components&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;. O componente que estamos utilizando no exemplo acima √© &lt;a href=&#34;https://ionicframework.com/docs/v2/components/#lists&#34; target=&#34;_blank&#34;&gt;este&lt;/a&gt;. Eu apenas copiei o markut e inseri aqui, alterando apenas aquilo que √© necess√°rio. Esta √©, sem d√∫vida, uma das features mais importantes do framework, uma vez que ela acelera o processo de prototipa√ß√£o de um aplicativo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Observe o seguinte bloco de c√≥digo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34;&amp;gt;
      {{feed.data.title}}
    &amp;lt;/ion-item&amp;gt;
  &amp;lt;/ion-list&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Note o loop que estamos executando com a instru√ß√£o *&lt;strong&gt;ngFor&lt;/strong&gt;. Estamos acessando o conte√∫do do array &lt;strong&gt;feeds&lt;/strong&gt; e iterando sobre ele com uma vari√°vel local (&lt;strong&gt;feed&lt;/strong&gt;) para popular nossa lista. Esta √© uma conveni√™ncia fornecida pelo Angular conhecida como &lt;em&gt;Embedded templates&lt;/em&gt; ou diretivas html, que nos ajuda na renderiza√ß√£o dos atributos dispon√≠veis na classe associada. Observe agora o seguinte trecho:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{{feed.data.title}}&lt;/pre&gt;

&lt;p&gt;Ele representa o valor que ser√° exibido em cada c√©lula da lista, que, neste caso, representa o t√≠tulo do feed. Esta sintaxe entre chaves duplas √© chamada de &lt;strong&gt;Interpola√ß√£o&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora salve o arquivo e verifique o resultado no browser. √â prov√°vel que voc√™ esteja vendo algo assim:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-3.jpg&#34; alt=&#34;Ionic 2 - Screenshot 3 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Se voc√™ entendeu tudo que foi explicado at√© aqui, significa que voc√™ j√° domina boa parte dos principais conceitos n√£o s√≥ do Ionic 2 como tamb√©m do Angular 2. Parab√©ns!&lt;/p&gt;

&lt;p&gt;Agora √© o momento em que nos despedimos das explica√ß√µes mais detalhadas e partimos para a a√ß√£o. Vamos dar um tapinha no visual desse app e inserir alguns recursos extras que ir√£o torn√°-lo ainda mais sexy üòâ&lt;/p&gt;

&lt;h3 id=&#34;passo-3-8211-customizando-o-template&#34;&gt;Passo 3 &amp;#8211; Customizando o template&lt;/h3&gt;

&lt;p&gt;Nosso pr√≥ximo passo ser√° incluir mais informa√ß√µes nas c√©lulas dessa lista, uma vez que apenas o t√≠tulo n√£o √© o suficiente para capturar a aten√ß√£o do usu√°rio.&lt;/p&gt;

&lt;h4 id=&#34;3-1-8211-adicionando-informa√ß√µes-extras&#34;&gt;3.1 &amp;#8211; Adicionando informa√ß√µes extras&lt;/h4&gt;

&lt;p&gt;Ainda em &lt;strong&gt;home.html&lt;/strong&gt;, altere o conte√∫do atual de dentro da tag &lt;strong&gt;&lt;ion-content&gt;&lt;/strong&gt; para:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;¬†&amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34;&amp;gt;
       &amp;lt;ion-thumbnail item-left&amp;gt;
          &amp;lt;img [src]=&#34;feed.data.thumbnail&#34;&amp;gt;
       &amp;lt;/ion-thumbnail&amp;gt;
       &amp;lt;h2&amp;gt;{{feed.data.title}}&amp;lt;/h2&amp;gt;
       &amp;lt;p&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
    &amp;lt;/ion-item&amp;gt;
 &amp;lt;/ion-list&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Salve o arquivo e visualize o resultado no browser:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-4.jpg&#34; alt=&#34;Ionic 2 - Screenshot 4 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora estamos utilizando um novo template de lista, que comporta imagens. O Ionic j√° faz o servi√ßo de ajustar os itens pra voc√™ contanto que indiquemos isso atrav√©s dos atributos e classes que o framework nos oferece. Perceba, por exemplo, o atributo &lt;strong&gt;item-left&lt;/strong&gt; presente dentro da tag &lt;strong&gt;&lt;ion-thumbnail&gt;&lt;/strong&gt;. Altere seu nome para &lt;strong&gt;item-right&lt;/strong&gt; e voc√™ ver√° que as imagens ser√£o posicionadas √† direita da c√©lula. Tente tamb√©m alterar a tag &lt;strong&gt;&lt;ion-thumbnail&gt;&lt;/strong&gt; para &lt;strong&gt;&lt;ion-avatar&gt;&lt;/strong&gt; e ver√° que as imagens ficar√£o menores e com bordas arredondadas. Muito conveniente!&lt;/p&gt;

&lt;p&gt;Note que o atributo &lt;strong&gt;src&lt;/strong&gt; da tag de imagem est√° envolto por colchetes. Essa sintaxe se chama &lt;em&gt;Property binding&lt;/em&gt; e √© utilizada para atribuir uma propriedade da view ao valor de uma express√£o. No entanto, a mesma sintaxe pode ser substitu√≠da por esta:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img src=&#34;{{ feed.data.thumbnail }}&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Para fins did√°ticos iremos deixar a express√£o com colchetes neste exemplo.&lt;/p&gt;

&lt;p&gt;Perceba tamb√©m que o t√≠tulo do feed agora aparece dentro da tag &lt;strong&gt;h2&lt;/strong&gt; e um novo item foi inserido dentro de uma tag &lt;strong&gt;p&lt;/strong&gt;. Voc√™ pode utilizar o &lt;em&gt;Chrome Developer Tools&lt;/em&gt; para inspecionar a conte√∫do da listagem dispon√≠vel no array inserindo a instru√ß√£o &lt;code&gt;console.log(this.feed);&lt;/code&gt; ao fim da requisi√ß√£o, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.http.get(this.url).map(res =&amp;gt; res.json())
    .subscribe(data =&amp;gt; {
      this.feeds = data.data.children;
     // Exibindo conte√∫do do array no console do browser
      console.log(this.feeds);
    }); 
&lt;/pre&gt;

&lt;h3 id=&#34;passo-4-8211-fornecendo-feedback-ao-cliente-e-capturando-eventos&#34;&gt;Passo 4 &amp;#8211; Fornecendo feedback ao cliente e capturando eventos&lt;/h3&gt;

&lt;p&gt;Embora nossa aplica√ß√£o consiga requisitar dados externos com sucesso, n√£o h√° nada que informe ao usu√°rio sobre o status dessa a√ß√£o. Ele pode aguardar poucos segundos como tamb√©m pode esperar uma eternidade at√© que alguma coisa apare√ßa na tela do celular, dependendo do tipo de conex√£o que esteja enfrentando.&lt;/p&gt;

&lt;h4 id=&#34;4-1-8211-adicionando-um-loading&#34;&gt;4.1 &amp;#8211; Adicionando um Loading&lt;/h4&gt;

&lt;p&gt;Insira o seguinte conte√∫do no arquivo &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController, LoadingController } from &#39;ionic-angular&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;

@Component({
  selector: &#39;page-home&#39;,
  templateUrl: &#39;home.html&#39;
})
export class HomePage {

  public feeds: Array&amp;lt;string&amp;gt;;
  private url: string = &#34;https://www.reddit.com/new.json&#34;;  

  constructor(public navCtrl: NavController, public http: Http, public loadingCtrl: LoadingController) {

    this.fetchContent();

  }

  fetchContent ():void {
    let loading = this.loadingCtrl.create({
      content: &#39;Fetching content...&#39;
    });

    loading.present();

    this.http.get(this.url).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
        this.feeds = data.data.children;
        loading.dismiss();
      });  
  }
&lt;/pre&gt;

&lt;p&gt;Salve o arquivo e verifique imediatamente o resultado no browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-localhost-5.jpg&#34; alt=&#34;Ionic 2 - Screenshot 5 localhost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O Loading √© um √≥timo componente para fornecer feedback visual para o usu√°rio, indicando que alguma atividade est√° sendo executada em background. Nada mais √© que uma caixa de di√°logo que bloqueia qualquer atividade do usu√°rio at√© que determinada a√ß√£o seja conclu√≠da. A nossa caixa de di√°logo inclui um spinner e um texto indicativo por padr√£o, mas todas essas op√ß√µes podem ser customizadas para atender melhor a necessidade do seu app.&lt;/p&gt;

&lt;p&gt;Incluir um Loading √© extremamente simples: Primeiro n√≥s importamos o componente &lt;strong&gt;LoadingController&lt;/strong&gt; da biblioteca &lt;strong&gt;ionic-angular&lt;/strong&gt; e injetamos o objeto no m√©todo construtor. Em seguida, inicializamos o Loading com uma mensagem de feedback e depois apresentamos ele atrav√©s do m√©todo &lt;strong&gt;present&lt;/strong&gt;. Depois n√≥s retiramos o componente da tela caso tenhamos sucesso na requisi√ß√£o atrav√©s do m√©todo &lt;strong&gt;dismiss&lt;/strong&gt;. Simples!&lt;/p&gt;

&lt;p&gt;Perceba tamb√©m que, como boa pr√°tica, movemos a requisi√ß√£o da API para um m√©todo chamado &lt;strong&gt;fetchContent&lt;/strong&gt; que √© ent√£o chamado imediatamente no construtor. Outra novidade √© a inclus√£o do tipo de retorno do m√©todo, tipado como &lt;strong&gt;void&lt;/strong&gt;. Se voc√™ vem de linguagens como Java, sabe que esta √© uma maneira de dizer que o m√©todo n√£o retorna nada, apenas executa uma a√ß√£o.&lt;/p&gt;

&lt;h4 id=&#34;4-2-8211-eventos-html&#34;&gt;4.2 &amp;#8211; Eventos html&lt;/h4&gt;

&lt;p&gt;Antes de passarmos para a pr√≥xima etapa, vamos incluir um evento nas c√©lulas. Fa√ßa a seguinte modifica√ß√£o em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34; (click)=&#34;itemSelected(feed)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Queremos executar alguma a√ß√£o sempre que o usu√°rio clicar/tocar em uma das c√©lulas. Conseguimos isso fazendo o &lt;em&gt;binding&lt;/em&gt; do m√©todo &lt;strong&gt;itemSelected&lt;/strong&gt; no evento html &lt;strong&gt;click&lt;/strong&gt; e passando o feed como argumento. Essa sintaxe de incluir eventos html dentro de par√™nteses √© chamado de &lt;em&gt;Event Binding&lt;/em&gt; no Angular.&lt;/p&gt;

&lt;p&gt;Agora basta incluir o m√©todo dentro da classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;itemSelected (feed):void {
    alert(feed.data.url);
  } 
&lt;/pre&gt;

&lt;p&gt;Salve o arquivo e clique em cima de alguma c√©lula. A url do post ser√° exibida em um alert!&lt;/p&gt;

&lt;h3 id=&#34;passo-5-8211-exibindo-o-conte√∫do-de-uma-url-no-browser&#34;&gt;Passo 5 &amp;#8211; Exibindo o conte√∫do de uma url no browser&lt;/h3&gt;

&lt;p&gt;Agora que voc√™ j√° entendeu como capturar uma a√ß√£o do usu√°rio, vamos prosseguir com as funcionalidades do nosso app e fazer com que o post seja exibido no browser.&lt;/p&gt;

&lt;h4 id=&#34;5-1-8211-instalando-plugin-inappbrowser&#34;&gt;5.1 &amp;#8211; Instalando plugin InAppBrowser&lt;/h4&gt;

&lt;p&gt;Em uma nova aba do terminal, entre na pasta do projeto e digite o seguinte:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic plugin add cordova-plugin-inappbrowser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Este plugin nos possibilita abrir sites externos em um browser diretamente do app. Mas s√≥ ser√° poss√≠vel testar essa funcionalidade se voc√™ fizer o build para testar no emulador ou no seu pr√≥prio dispositivo. Para isso, digite a seguinte instru√ß√£o no terminal caso voc√™ possua um iPhone:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic platform add ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ou, caso tenha um dispositivo Android:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic platform add android&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Agora altere o par√¢metro do m√©todo no arquivo &lt;strong&gt;home.html&lt;/strong&gt; para enviar apenas a url como argumento:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-item *ngFor=&#34;let feed of feeds&#34; (click)=&#34;itemSelected(feed.data.url)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;E agora basta fazer as seguintes altera√ß√µes em &lt;strong&gt;home.ts&lt;/strong&gt;. Primeiro, importar a classe do plugin:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { InAppBrowser } from &#39;ionic-native&#39;;
&lt;/pre&gt;

&lt;p&gt;Em seguida, fa√ßa a seguinte altera√ß√£o no m√©todo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;itemSelected (url: string):void {
   let browser = new InAppBrowser(url, &#39;_system&#39;);
 }
&lt;/pre&gt;

&lt;p&gt;Pronto! Agora s√≥ resta testar se a funcionalidade est√° sendo executada conforme desejado.&lt;/p&gt;

&lt;h4 id=&#34;5-2-8211-executando-testes-nas-plataformas&#34;&gt;5.2 &amp;#8211; Executando testes nas plataformas&lt;/h4&gt;

&lt;p&gt;Para instalar o emulador do iOS e preparar o ambiente para testes no seu pr√≥prio iPhone, basta digitar no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm -g install ios-sim ios-deploy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora digite a instru√ß√£o abaixo e, caso tudo tenha dado certo, √© prov√°vel que voc√™ veja o aplicativo abrindo no seu emulador:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic run ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Caso esteja com o celular conectado ao computador atrav√©s da porta USB, o deploy ser√° automaticamente executado no seu iPhone. Se mesmo assim voc√™ encontrar dificuldades, tente digitar:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic run ios --device&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para testar no Android, apenas digite:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic run android&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Maiores detalhes sobre deploy e testes em ambas plataformas voc√™ encontra &lt;a href=&#34;https://ionicframework.com/docs/v2/resources/developer-tips/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Caso voc√™ tenha conseguido testar com sucesso, deve ter percebido que, ao clicar em uma das c√©lulas, h√° um certo delay entre o momento do clique e o carregamento da p√°gina. Para corrigir isso, apenas insira o conte√∫do da c√©lula dentro de um &lt;strong&gt;bot√£o&lt;/strong&gt; (button) com o atributo &lt;strong&gt;ion-item&lt;/strong&gt;, dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;¬†&amp;lt;button ion-item *ngFor=&#34;let feed of feeds&#34; (click)=&#34;itemSelected(feed.data.url)&#34;&amp;gt;
    &amp;lt;ion-thumbnail item-left&amp;gt;
       &amp;lt;img [src]=&#34;feed.data.thumbnail&#34;&amp;gt;
    &amp;lt;/ion-thumbnail&amp;gt;
    &amp;lt;h2&amp;gt;{{feed.data.title}}&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
 &amp;lt;/button&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Agora o delay n√£o s√≥ √© removido como √© adicionado um overlay em tom mais escuro na c√©lula quando a mesma √© pressionada.&lt;/p&gt;

&lt;p&gt;Tem mais uma coisa que est√° incomodando: Perceba que os posts sem imagens est√£o quebrando nosso layout e deixando a nossa lista com aspecto pouco profissional. Vamos mudar isso incluindo o seguinte trecho de c√≥digo dentro do m√©todo &lt;strong&gt;subscribe&lt;/strong&gt; de &lt;strong&gt;fecthContent&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.feeds.forEach((e, i, a) =&amp;gt; {
   if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) { 
      e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
   }
 })
&lt;/pre&gt;

&lt;p&gt;Utilizamos o m√©todo &lt;strong&gt;forEach&lt;/strong&gt; do JavaScript para iterar pelo array de feeds e verificar quais itens est√£o sem imagem. Em seguida, para estes itens, inclu√≠mos uma imagem padr√£o do pr√≥prio reddit, que est√° dispon√≠vel em um link p√∫blico e ir√° servir de placeholder.&lt;/p&gt;

&lt;p&gt;Veja o resultado de todas estas modifica√ß√µes rodando em um device iOS:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step5.gif&#34; alt=&#34;Ionic 2 - InAppBrowser&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-6-8211-adicionando-scroll-infinito-na-c√©lula&#34;&gt;Passo 6 &amp;#8211; Adicionando scroll infinito na c√©lula&lt;/h3&gt;

&lt;p&gt;Nosso app est√° ficando bem legal mas ainda necessita de algumas modifica√ß√µes para ficar realmente atrativo. Uma delas √© viabilizar alguma maneira de acessar os posts mais antigos, j√° que nosso app tem uma restri√ß√£o de apenas 25 itens por request. Isto √© muito ruim, pois o usu√°rio fica limitado √† visitar apenas estes itens.&lt;/p&gt;

&lt;p&gt;Se voc√™ explorar a API do reddit vai perceber que ela nos fornece v√°rios par√¢metros do tipo GET para controlar filtros e pagina√ß√µes. Um deles √© chamado &lt;em&gt;after&lt;/em&gt;, que utiliza o o atributo &lt;em&gt;fullName&lt;/em&gt; (jun√ß√£o do tipo do post mais o seu ID) como identificador √∫nico e funciona como √¢ncora para os demais posts.&lt;/p&gt;

&lt;p&gt;Em outras palavras, uma requisi√ß√£o como esta:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://www.reddit.com/new.json?after=t3_57ct5z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pode ser lida como: &amp;#8220;_Busque os novos posts que vem depois do post de nome t3&lt;em&gt;57ct5z&lt;/em&gt;&amp;#8221;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fique atento com a forma como voc√™ l√™ a instru√ß√£o pois h√° uma pegadinha: &lt;strong&gt;Depois&lt;/strong&gt; aqui se refere ao array de posts, ou seja, os posts mais velhos e n√£o os mais recentes. Veremos como buscar os mais recentes na pr√≥xima etapa do app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Agora que voc√™ j√° entendeu a mec√¢nica, vamos come√ßar inserindo o componente respons√°vel por acionar o scroll infinito na nossa p√°gina. Insira a seguinte instru√ß√£o em &lt;strong&gt;home.html&lt;/strong&gt; imediatamente ap√≥s o fim da tag &lt;strong&gt;&lt;ion-list&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;¬†&amp;lt;ion-infinite-scroll (ionInfinite)=&#34;doInfinite($event)&#34;&amp;gt;
    &amp;lt;ion-infinite-scroll-content
       loadingText=&#34;Loading more data...&#34;&amp;gt;
    &amp;lt;/ion-infinite-scroll-content&amp;gt;
 &amp;lt;/ion-infinite-scroll&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;E criamos o m√©todo correspondente em nossa classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;doInfinite(infiniteScroll) {

    let paramsUrl = (this.feeds.length &amp;gt; 0) ? this.feeds[this.feeds.length - 1].data.name : &#34;&#34;;

      this.http.get(this.olderPosts + paramsUrl).map(res =&amp;gt; res.json())
        .subscribe(data =&amp;gt; {
        
          this.feeds = this.feeds.concat(data.data.children);
          
          this.feeds.forEach((e, i, a) =&amp;gt; {
            if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
              e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
            }
          })
          infiniteScroll.complete();
        }); 
  }  
&lt;/pre&gt;

&lt;p&gt;Por fim, inserimos a url da requisi√ß√£o:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;private olderPosts: string = &#34;https://www.reddit.com/new.json?after=&#34;;
&lt;/pre&gt;

&lt;p&gt;O novo m√©todo √© bem parecido com o &lt;strong&gt;fetchContent&lt;/strong&gt;, com a diferen√ßa de que criamos uma vari√°vel local que guarda o valor do atributo &lt;strong&gt;nome&lt;/strong&gt; do √∫ltimo item do array de feeds e insere este valor no fim da url. Em seguida, pegamos o array resultante da requisi√ß√£o e adicionamos no fim do array original atrav√©s do m√©todo &lt;strong&gt;concat&lt;/strong&gt; do JavaScript. Note tamb√©m que utilizamos o m√©todo &lt;strong&gt;complete&lt;/strong&gt; do componente, indicando que o mesmo deve ser removido da view.&lt;/p&gt;

&lt;p&gt;O resultado voc√™ confere abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step6.gif&#34; alt=&#34;Ionic 2 - Infinite Scroll&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E, com isto, inclu√≠mos uma funcionalidade extremamente importante em aplica√ß√µes m√≥veis: A habilidade de adicionar itens em uma lista por demanda, algo que enriquece em muito a experi√™ncia do usu√°rio. Se voc√™ estava esperando instru√ß√µes muito complexas, sinto lhe desapontar!&lt;/p&gt;

&lt;h3 id=&#34;passo-7-8211-atualizando-a-lista-com-pull-to-refresh&#34;&gt;Passo 7 &amp;#8211; Atualizando a lista com pull-to-refresh&lt;/h3&gt;

&lt;p&gt;Da mesma forma que adicionamos uma funcionalidade para carregar posts mais antigos sempre que chegarmos ao fim da nossa lista, precisamos agora viabilizar uma maneira de atualiza-la com os posts mais recentes. Uma excelente maneira de fazer isso √© incluindo o componente &lt;strong&gt;Refresher&lt;/strong&gt; na nossa aplica√ß√£o.&lt;/p&gt;

&lt;p&gt;O Refresher √© um componente que adiciona o recurso de &lt;strong&gt;pull-to-refresh&lt;/strong&gt; √† nossa lista. O pull-to-refresh consiste em manter o dedo pressionado no topo de uma lista e arrast√°-la at√© uma determinada posi√ß√£o at√© que um evento seja disparado. No nosso caso, utilizaremos esse evento para inserir os posts mais recentes no in√≠cio do array, ao contr√°rio do que fizemos com o componente InfiniteScroll.&lt;/p&gt;

&lt;p&gt;Sem mais delongas, vamos come√ßar inserindo o markup do componente antes da tag &lt;strong&gt;&lt;ion-list&gt;&lt;/strong&gt; no arquivo &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;¬†&amp;lt;ion-refresher (ionRefresh)=&#34;doRefresh($event)&#34;&amp;gt;
    &amp;lt;ion-refresher-content
       pullingIcon=&#34;arrow-dropdown&#34;
       pullingText=&#34;Pull to refresh&#34;
       refreshingSpinner=&#34;circles&#34;
       refreshingText=&#34;Refreshing...&#34;&amp;gt;
    &amp;lt;/ion-refresher-content&amp;gt;
 &amp;lt;/ion-refresher&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;Diferentemente do InfiniteScroll, desta vez eu inclu√≠ alguns par√¢metros adicionais, como os textos de in√≠cio e fim do evento, o formato padr√£o do spinner, o √≠cone da seta, etc.&lt;/p&gt;

&lt;p&gt;A url da requisi√ß√£o tamb√©m precisa ser diferente, uma vez que iremos buscar os itens mais novos. Utilizaremos ent√£o o par√¢metro &lt;em&gt;before&lt;/em&gt; oferecido pelo Reddit, fazendo com que a nossa nova url fique assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;private newerPosts: string = &#34;https://www.reddit.com/new.json?before=&#34;;
&lt;/pre&gt;

&lt;p&gt;Por fim, inserimos o m√©todo na classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;doRefresh(refresher) {

    let paramsUrl = this.feeds[0].data.name;

    this.http.get(this.newerPosts + paramsUrl).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
      
        this.feeds = data.data.children.concat(this.feeds);
        
        this.feeds.forEach((e, i, a) =&amp;gt; {
          if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
            e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
          }
        })
        refresher.complete();
      });
  } 

&lt;/pre&gt;

&lt;p&gt;Perceba como o m√©todo √© similar √†quele que escrevemos para o scroll infinito. A √∫nica diferen√ßa est√° na vari√°vel de par√¢metro (que agora guarda o nome do primeiro item da lista como refer√™ncia) e a maneira como concatenamos o array de feeds, inserindo os novos dados no in√≠cio da lista e n√£o no fim. Observe tamb√©m a instru√ß√£o &lt;strong&gt;refresher.complete&lt;/strong&gt;, que informa que opera√ß√£o foi conclu√≠da e que o componente pode ser removido da view.&lt;/p&gt;

&lt;p&gt;Nossa aplica√ß√£o agora utiliza o refresher para atualizar a lista com os novos posts, veja:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step7.gif&#34; alt=&#34;Ionic 2 - Refresher&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-8-8211-filtrando-a-lista-com-uma-action-sheet&#34;&gt;Passo 8 &amp;#8211; Filtrando a lista com uma Action Sheet&lt;/h3&gt;

&lt;p&gt;Agora que a nossa lista tem potencial para aumentar cada vez mais de tamanho, seria interessante termos uma op√ß√£o de filtrar posts pertencentes √† determinadas categorias. Podemos fazer isso facilmente com uma &lt;strong&gt;Action Sheet&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;No arquivo &lt;strong&gt;home.html&lt;/strong&gt; vamos incluir um bot√£o do lado direito da nossa AppBar/NavBar que ser√° respons√°vel por disparar o m√©todo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-header&amp;gt;
   &amp;lt;ion-navbar&amp;gt;
       &amp;lt;ion-title&amp;gt;My Feed Reader&amp;lt;/ion-title&amp;gt;
       &amp;lt;ion-buttons end&amp;gt;
          &amp;lt;button ion-button icon-only (click)=&#34;showFilters()&#34;&amp;gt;
              &amp;lt;ion-icon name=&#34;funnel&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;
          &amp;lt;/button&amp;gt;
       &amp;lt;/ion-buttons&amp;gt; 
   &amp;lt;/ion-navbar&amp;gt;
&amp;lt;/ion-header&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Observe o atributo &lt;strong&gt;end&lt;/strong&gt; na tag &lt;strong&gt;&lt;ion-buttons&gt;&lt;/strong&gt;, indicando que o bot√£o deve ser posicionado √† direita, ou seja, no fim da barra de navega√ß√£o. O atributo &lt;strong&gt;start&lt;/strong&gt; posicionaria o bot√£o √† esquerda. O &lt;strong&gt;&lt;ion-buttons&gt;&lt;/strong&gt; funciona como um container de bot√µes. No nosso caso, s√≥ precisamos de um que ser√° representado por um √≠cone (por isso o atributo &lt;strong&gt;icon-only&lt;/strong&gt;). Fizemos o binding do m√©todo &lt;strong&gt;showFilters&lt;/strong&gt; no evento &lt;strong&gt;click&lt;/strong&gt; e escolhemos o √≠cone de nome &lt;strong&gt;funnel&lt;/strong&gt; para representar o filtro.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Os √≠cones no Ionic s√£o uma implementa√ß√£o pr√≥pria do que chamamos de &lt;strong&gt;icon fonts&lt;/strong&gt;, ou seja, fontes que cont√©m s√≠mbolos ao inv√©s de texto ou n√∫meros e que podem ser estilizados utilizando CSS. Utilizar esse tipo de fonte √© conveniente pois reduz a necessidade de imagens, o que torna nosso aplicativo ligeiramente mais r√°pido e menos pesado. Para ter acesso √† lista de √≠cones do Ionic 2, d√™ uma olhada &lt;a href=&#34;https://ionicframework.com/docs/v2/ionicons/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Antes de incluir nosso m√©todo, precisamos de mais duas vari√°veis. Uma que ser√° respons√°vel por guardar a vers√£o √≠ntegra do nosso array de feeds (sem nenhum filtro) e uma outra que ser√° um booleano, com a fun√ß√£o de indicar se h√° ou n√£o um filtro ativo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;public noFilter: Array&amp;lt;any&amp;gt;;
 public hasFilter: boolean = false;
&lt;/pre&gt;

&lt;p&gt;Com isso podemos incluir as seguintes instru√ß√µes no final do m√©todo &lt;strong&gt;subscribe&lt;/strong&gt; das fun√ß√µes &lt;strong&gt;doRefresh&lt;/strong&gt; e &lt;strong&gt;doInfinite&lt;/strong&gt;, com a finalidade de remover qualquer filtro ativo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.noFilter = this.feeds;
 this.hasFilter = false;
&lt;/pre&gt;

&lt;p&gt;Por fim, vamos agora incluir o m√©todo &lt;strong&gt;showFilters&lt;/strong&gt; na classe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;showFilters() :void {

    let actionSheet = this.actionSheetCtrl.create({
      title: &#39;Filter options:&#39;,
      buttons: [
        {
          text: &#39;Music&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;music&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Movies&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;movies&#34;);
            this.hasFilter = true;
          }
        },        
        {
          text: &#39;Cancel&#39;,
          role: &#39;cancel&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter;
            this.hasFilter = false;
          }
        }
      ]
    });

    actionSheet.present();

  }  
&lt;/pre&gt;

&lt;p&gt;Primeiramente inicializamos o componente com a fun√ß√£o &lt;strong&gt;create&lt;/strong&gt; em uma vari√°vel local. Este componente recebe um t√≠tulo e um array de bot√µes onde cada bot√£o tem, obrigatoriamente, um texto indicativo e um handler que dispara o evento correspondente. Estes bot√µes representam as op√ß√µes que ser√£o apresentadas para o usu√°rio na tela. O c√≥digo do filtro √© autoexplicativo.&lt;/p&gt;

&lt;p&gt;O √∫ltimo bot√£o tem a fun√ß√£o de cancelar a opera√ß√£o e remover qualquer filtro que esteja ativo. Perceba que este bot√£o tem uma propriedade &lt;strong&gt;role&lt;/strong&gt; com o valor de &lt;strong&gt;cancel&lt;/strong&gt;, indicando que adota o comportamento padr√£o da plataforma e sempre estar√° posicionado como √∫ltima op√ß√£o da lista. Vale ressaltar que se o usu√°rio clicar fora da Action Sheet, ou seja, no overlay da camada de fundo, a a√ß√£o ser√° interpretada como um cancelamento (o mesmo comportamento do bot√£o com a role &amp;#8220;cancel&amp;#8221;).&lt;/p&gt;

&lt;p&gt;Em seguida adicionamos o m√©todo &lt;strong&gt;actionSheet.present&lt;/strong&gt; para que o componente seja apresentado na tela.&lt;/p&gt;

&lt;p&gt;Por enquanto s√≥ estamos filtrando os subreddits com as categorias m√∫sica ou filmes, mas nada nos impede de inserir mais op√ß√µes de filtro no componente. O c√≥digo final da nossa classe fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Component } from &#39;@angular/core&#39;;
import { NavController, LoadingController, ActionSheetController } from &#39;ionic-angular&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;
import { InAppBrowser } from &#39;ionic-native&#39;;

@Component({
  selector: &#39;page-home&#39;,
  templateUrl: &#39;home.html&#39;
})
export class HomePage {

  public feeds: Array&amp;lt;any&amp;gt;;
  private url: string = &#34;https://www.reddit.com/new.json&#34;;
  private newerPosts: string = &#34;https://www.reddit.com/new.json?before=&#34;;  
  private olderPosts: string = &#34;https://www.reddit.com/new.json?after=&#34;;

  public hasFilter: boolean = false;
  public noFilter: Array&amp;lt;any&amp;gt;;

  constructor(public navCtrl: NavController, public http: Http, 
       public loadingCtrl: LoadingController, public actionSheetCtrl: ActionSheetController) {

    this.fetchContent();

  }

  fetchContent ():void {
    let loading = this.loadingCtrl.create({
      content: &#39;Fetching content...&#39;
    });

    loading.present();

    this.http.get(this.url).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
        this.feeds = data.data.children;

        this.feeds.forEach((e, i, a) =&amp;gt; {
          if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
            e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
          }
        })

        this.noFilter = this.feeds;  

        loading.dismiss();
      });  
  }

  doRefresh(refresher) {

    let paramsUrl = this.feeds[0].data.name;

    this.http.get(this.newerPosts + paramsUrl).map(res =&amp;gt; res.json())
      .subscribe(data =&amp;gt; {
      
        this.feeds = data.data.children.concat(this.feeds);
        
        this.feeds.forEach((e, i, a) =&amp;gt; {
          if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
            e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
          }
        })

        this.noFilter = this.feeds;
        this.hasFilter = false;

        refresher.complete();
      });
  }  

  doInfinite(infiniteScroll) {

    let paramsUrl = (this.feeds.length &amp;gt; 0) ? this.feeds[this.feeds.length - 1].data.name : &#34;&#34;;

      this.http.get(this.olderPosts + paramsUrl).map(res =&amp;gt; res.json())
        .subscribe(data =&amp;gt; {
        
          this.feeds = this.feeds.concat(data.data.children);
          
          this.feeds.forEach((e, i, a) =&amp;gt; {
            if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
              e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
            }
          })

          this.noFilter = this.feeds;
          this.hasFilter = false;          
          
          infiniteScroll.complete();
        }); 
  }   

  itemSelected (url: string):void {
    let browser = new InAppBrowser(url, &#39;_system&#39;);
  } 
  
  showFilters() :void {

    let actionSheet = this.actionSheetCtrl.create({
      title: &#39;Filter options:&#39;,
      buttons: [
        {
          text: &#39;Music&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;music&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Movies&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;movies&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Games&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;gaming&#34;);
            this.hasFilter = true;
          }
        },
        {
          text: &#39;Pictures&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;pics&#34;);
            this.hasFilter = true;
          }
        },                
        {
          text: &#39;Ask Reddit&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter.filter((item) =&amp;gt; item.data.subreddit.toLowerCase() === &#34;askreddit&#34;);
            this.hasFilter = true;
          }
        },        
        {
          text: &#39;Cancel&#39;,
          role: &#39;cancel&#39;,
          handler: () =&amp;gt; {
            this.feeds = this.noFilter;
            this.hasFilter = false;
          }
        }
      ]
    });

    actionSheet.present();

  }        

}

&lt;/pre&gt;

&lt;p&gt;Por quest√µes de bom senso, seria interessante indicar ao usu√°rio quando um filtro est√° ou n√£o ativo alterando a cor do √≠cone do funil. Podemos fazer isso utilizando o conceito de &lt;em&gt;Property binding&lt;/em&gt; explicado mais acima, com a diferen√ßa de que agora a propriedade ser√° atribu√≠da baseada em uma condi√ß√£o.&lt;/p&gt;

&lt;p&gt;insira o seguinte c√≥digo na tag &lt;strong&gt;&lt;ion-icon&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-icon name=&#34;funnel&#34; [style.color]=&#34;hasFilter ? &#39;orange&#39; : &#39;inherit&#39;&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O resultado pode ser visto abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step8.gif&#34; alt=&#34;Ionic 2 - Action Sheet&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;passo-9-8211-adicionando-um-provider-e-uma-barra-de-busca&#34;&gt;Passo 9 &amp;#8211; Adicionando um provider e uma barra de busca&lt;/h3&gt;

&lt;p&gt;Apesar de termos avan√ßado com sucesso at√© aqui, tenho certeza de que a quantidade de c√≥digo repetitivo presente em nossa classe deve ter te causado um certo inc√¥modo. Podemos muito bem mover a responsabilidade de conex√£o com a API para um outro servi√ßo externo, no intuito de evitar o &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;_blank&#34;&gt;DRY&lt;/a&gt; e a propaga√ß√£o de &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_smell&#34; target=&#34;_blank&#34;&gt;code smell&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;9-1-8211-criando-um-injectable&#34;&gt;9.1 &amp;#8211; Criando um Injectable&lt;/h4&gt;

&lt;p&gt;O Angular nos permite criar uma classe com a anota√ß√£o &lt;strong&gt;@Injectable&lt;/strong&gt; para estes cen√°rios. Esse tipo de classe tamb√©m s√£o conhecidos como &lt;strong&gt;Providers&lt;/strong&gt; e podem tanto ser criados &amp;#8220;na m√£o&amp;#8221; quanto com a ajuda do CLI. Digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic g provider RedditService&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Esse c√≥digo cria uma pasta &lt;strong&gt;providers&lt;/strong&gt; no nosso projeto com um arquivo de nome &lt;strong&gt;reddit-service.ts&lt;/strong&gt;, onde o Ionic insere alguns c√≥digos de boilerplate para facilitar nossa vida. Altere seu conte√∫do conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { Injectable } from &#39;@angular/core&#39;;
import { Http } from &#39;@angular/http&#39;;
import &#39;rxjs/add/operator/map&#39;;

@Injectable()
export class RedditService {

  private feeds: Array&amp;lt;any&amp;gt;;

  constructor(private http: Http) {}

  fetchData(url: string): Promise&amp;lt;any&amp;gt; {
    
    return new Promise(resolve =&amp;gt; {

      this.http.get(url).map(res =&amp;gt; res.json())
        .subscribe(data =&amp;gt; {
          this.feeds = data.data.children;
          
          this.feeds.forEach((e, i, a) =&amp;gt; {
            if (!e.data.thumbnail || e.data.thumbnail.indexOf(&#39;b.thumbs.redditmedia.com&#39;) === -1 ) {  
              e.data.thumbnail = &#39;http://www.redditstatic.com/icon.png&#39;;
            }
          })
          resolve(this.feeds);
        }, err =&amp;gt; console.log(err));          
    });
  }
}
&lt;/pre&gt;

&lt;p&gt;Replicamos boa parte do c√≥digo presente no m√©todo &lt;strong&gt;fetchContent&lt;/strong&gt; da classe &lt;strong&gt;home.ts&lt;/strong&gt; aqui no nosso m√©todo &lt;strong&gt;fetchData&lt;/strong&gt;, com algumas diferen√ßas. A primeira delas √© a j√° citada anota√ß√£o &lt;strong&gt;@Injectable()&lt;/strong&gt; presente antes do nome da classe, o que nos permite mover a defini√ß√£o do servi√ßo para o construtor de &lt;strong&gt;home.ts&lt;/strong&gt; dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;constructor(public redditService: RedditService) {}
&lt;/pre&gt;

&lt;p&gt;Isso evita que tenhamos de instanciar o servi√ßo utilizando &lt;strong&gt;new&lt;/strong&gt;. Clique &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; para saber mais sobre &lt;strong&gt;Inje√ß√£o de Depend√™ncia&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Outra mudan√ßa importante √© que, por conveni√™ncia, a assinatura do m√©todo retorna uma &lt;strong&gt;Promise&lt;/strong&gt; do tipo &lt;strong&gt;any&lt;/strong&gt; (para evitar que tenhamos qualquer erro em tempo de compila√ß√£o) ao inv√©s de um &lt;strong&gt;Observable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por fim, para utilizar este servi√ßo em nossa classe &lt;strong&gt;home.ts&lt;/strong&gt; precisamos inclu√≠-lo no arquivo &lt;strong&gt;app.module.ts&lt;/strong&gt;, dentro da pasta &lt;strong&gt;src/app&lt;/strong&gt;. Este arquivo faz uso da anota√ß√£o &lt;strong&gt;@NgModule&lt;/strong&gt;, onde todas as depend√™ncias da aplica√ß√£o devem ser declaradas previamente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import { NgModule } from &#39;@angular/core&#39;;
import { IonicApp, IonicModule } from &#39;ionic-angular&#39;;
import { MyApp } from &#39;./app.component&#39;;
import { HomePage } from &#39;../pages/home/home&#39;;
//indicamos o source path do arquivo:
import { RedditService } from &#39;../providers/reddit-service&#39;;

@NgModule({
  declarations: [
    MyApp,
    HomePage
  ],
  imports: [
    IonicModule.forRoot(MyApp)
  ],
  bootstrap: [IonicApp],
  entryComponents: [
    MyApp,
    HomePage
  ],
//declaramos o nome do nosso provider:
  providers: [RedditService]
})
export class AppModule {}
&lt;/pre&gt;

&lt;p&gt;Com isso √© poss√≠vel escrever os m√©todos da nossa classe &lt;strong&gt;home.ts&lt;/strong&gt; da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.redditService.fetchData(this.url).then(data =&amp;gt; {
     this.feeds = data;
     this.noFilter = this.feeds;
     loading.dismiss();
 })
&lt;/pre&gt;

&lt;p&gt;Repare que al√©m de muito mais simples, agora utilizamos o m√©todo &lt;strong&gt;then&lt;/strong&gt; ao inv√©s do &lt;strong&gt;subscribe&lt;/strong&gt; para recuperar os dados do servi√ßo e preencher nosso array.&lt;/p&gt;

&lt;h4 id=&#34;9-2-8211-adicionando-uma-searchbar&#34;&gt;9.2 &amp;#8211; Adicionando uma SearchBar&lt;/h4&gt;

&lt;p&gt;Para aplicativos que utilizam listas e exibem conte√∫do sob demanda √© uma boa pr√°tica adicionar algum recurso de busca para que o usu√°rio procure informa√ß√µes com base em uma palavra espec√≠fica ou sequ√™ncia de caracteres. Para tal, o Ionic fornece um componente chamado &lt;strong&gt;SearchBar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para evitar conflitos com as a√ß√µes da nossa lista, escolhi inserir o componente diretamente na AppBar/NavBar da aplica√ß√£o. Para tal, insira o seguinte bloco de c√≥digo dentro da tag &lt;strong&gt;&lt;ion-title&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;¬†&amp;lt;ion-searchbar 
    [(ngModel)]=&#34;searchTerm&#34;
    (ionInput)=&#34;filterItems()&#34; 
    placeholder=&#34;Type here...&#34; &amp;gt;
 &amp;lt;/ion-searchbar&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Perceba que a jun√ß√£o das sintaxes de &lt;em&gt;Event binding&lt;/em&gt; e &lt;em&gt;Input binding&lt;/em&gt; do &lt;strong&gt;ngModel&lt;/strong&gt; nos permite replicar o t√£o famoso recurso de &lt;em&gt;Two-way data binding&lt;/em&gt; no Angular 2.&lt;/p&gt;

&lt;p&gt;Agora inclua o seguinte m√©todo em &lt;strong&gt;home.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;filterItems() {
    this.hasFilter = false;
    this.feeds = this.noFilter.filter((item) =&amp;gt; {
        return item.data.title.toLowerCase().indexOf(this.searchTerm.toLowerCase()) &amp;gt; -1;
    });
  }
&lt;/pre&gt;

&lt;p&gt;Veja o resultado rodando em um iPhone:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step9.gif&#34; alt=&#34;Ionic 2 - SearchBar&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Antes de concluir eu gostaria de mostrar um recurso fornecido pelo framework que nos permite testar o comportamento e visual da nossa aplica√ß√£o em diferentes plataformas chamado &lt;strong&gt;Ionic Lab&lt;/strong&gt;. Caso ainda esteja com o servidor ativo, basta inserir &lt;strong&gt;/ionic-lab&lt;/strong&gt; ap√≥s o n√∫mero da porta na url ou digitar &lt;code&gt;ionic serve --lab&lt;/code&gt; no terminal. O resultado √© o seguinte:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-ionic-lab.jpg&#34; alt=&#34;Ionic 2 - Ionic Lab&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Na imagem acima voc√™ consegue visualizar o nosso aplicativo no &lt;strong&gt;iOS&lt;/strong&gt;, &lt;strong&gt;Android&lt;/strong&gt; e &lt;strong&gt;Windows Phone&lt;/strong&gt;! O Ionic n√£o apenas executa o build da aplica√ß√£o com uma √∫nica base de c√≥digo para dispositivos diferentes como tamb√©m se adapta ao comportamento e estilo visual de cada um, numa tentativa de fazer com que o usu√°rio sempre tenha uma experi√™ncia condizente com a plataforma que utiliza. Perceba, por exemplo, como o spinner, a barra de busca, os √≠cones e estilo da lista s√£o diferentes entre as plataformas. No caso do iOS, s√£o inclu√≠dos at√© mesmo as setas na lateral direita da c√©lula, o que √© comum na plataforma. Al√©m de tudo isso, poder testar aplicativos dessa maneira e ainda tirar proveito do recurso de &lt;em&gt;LiveReload&lt;/em&gt; enquanto voc√™ est√° programando √© algo realmente especial.&lt;/p&gt;

&lt;p&gt;Estamos chegando ao fim da cria√ß√£o do nosso aplicativo. Vimos que, apenas com pequenos ajustes, foi poss√≠vel obter um c√≥digo mais modular e ainda incluir o componente &lt;strong&gt;SearchBar&lt;/strong&gt; com o estilo visual adequado para cada plataforma. Tudo isso de maneira simples e r√°pida, gra√ßas ao casamento perfeito entre o &lt;strong&gt;Angular&lt;/strong&gt; e os componentes estilizados fornecido pelo &lt;strong&gt;Ionic&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;passo-10-8211-melhorando-a-experi√™ncia-do-usu√°rio&#34;&gt;Passo 10 &amp;#8211; Melhorando a experi√™ncia do usu√°rio&lt;/h3&gt;

&lt;p&gt;Mesmo com todos os recursos que o Ionic 2 nos oferece √© sempre importante garantir a melhor experi√™ncia poss√≠vel para o usu√°rio fazendo otimiza√ß√µes gerais, como customiza√ß√£o de UI, ajustes no comportamento de componentes, ganho de performance, etc. Essa √∫ltima etapa ser√° dedicada √† este prop√≥sito.&lt;/p&gt;

&lt;h4 id=&#34;10-1-8211-controlando-o-scroll&#34;&gt;10.1 &amp;#8211; Controlando o scroll&lt;/h4&gt;

&lt;p&gt;Notei alguns problemas ao utilizar a Action Sheet para filtrar a lista quando o scroll est√° numa posi√ß√£o muito abaixo, pois a a√ß√£o de carregar posts antigos pode ser disparada indevidamente. Podemos evitar isso fazendo a lista rolar para o topo antes de executar qualquer filtro. Mas como controlar isso programaticamente?&lt;/p&gt;

&lt;p&gt;O componente &lt;strong&gt;Content&lt;/strong&gt; (que gere a tag &lt;strong&gt;&lt;ion-content&gt;&lt;/strong&gt; do nosso template html) disponibiliza um m√©todo de controle do scroll chamado &lt;strong&gt;scrollToTop&lt;/strong&gt;. Podemos inserir o c√≥digo no in√≠cio do m√©todo &lt;strong&gt;showFilters&lt;/strong&gt; da Action Sheet dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.content.scrollToTop();
&lt;/pre&gt;

&lt;p&gt;Antes precisamos obter uma refer√™ncia √† este componente utilizando a anota√ß√£o &lt;strong&gt;@ViewChild&lt;/strong&gt; da biblioteca &lt;strong&gt;@angular/core&lt;/strong&gt; (algo similar √† maneira como protocolos funcionam no iOS):&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;@ViewChild(Content) content: Content;
&lt;/pre&gt;

&lt;p&gt;Agora a lista vai rolar para o topo sempre que acionarmos a Action Sheet!&lt;/p&gt;

&lt;h4 id=&#34;10-2-8211-melhorando-a-busca-com-observables&#34;&gt;10.2 &amp;#8211; Melhorando a busca com Observables&lt;/h4&gt;

&lt;p&gt;Apesar de termos nossa barra de buscas funcionando perfeitamente, a cada caractere digitado estamos emitindo uma nova requisi√ß√£o, o que √© desnecess√°rio. Mas h√° uma forma elegante de lidar com isso utilizando Observables, uma vez que o evento s√≥ ser√° disparado quando uma requisi√ß√£o for considerada v√°lida.&lt;/p&gt;

&lt;p&gt;O que queremos fazer √© monitorar o componente de duas maneiras: A primeira √© oferecendo um tempo maior para que o usu√°rio conclua a digita√ß√£o da palavra que est√° buscando atrav√©s do m√©todo &lt;strong&gt;debounceTime&lt;/strong&gt; e a segunda √© utilizando o m√©todo &lt;strong&gt;distinctUntilChanged&lt;/strong&gt; que ir√° comparar a palavra (ou a sequ√™ncia de caracteres) digitada com a √∫ltima que foi procurada, evitando que uma nova requisi√ß√£o seja emitida para um resultado que j√° se encontra na tela.&lt;/p&gt;

&lt;p&gt;Iremos utilizar o &lt;strong&gt;FormControl&lt;/strong&gt; de &lt;strong&gt;@angular/forms&lt;/strong&gt; que ir√° conectar uma vari√°vel da classe ao input presente no nosso html (similar √† maneira como o &lt;em&gt;Two way binding&lt;/em&gt; funciona).&lt;/p&gt;

&lt;p&gt;Inclua as seguintes instru√ß√µes no componente &lt;strong&gt;&lt;ion-searchbar&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;¬†&amp;lt;ion-searchbar 
    [(ngModel)]=&#34;searchTerm&#34;
    [formControl]=&#34;searchTermControl&#34; 
    [showCancelButton]=true
    (ionInput)=&#34;filterItems()&#34; 
    placeholder=&#34;Type here...&#34; &amp;gt;
 &amp;lt;/ion-searchbar&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Note que al√©m do &lt;strong&gt;formControl&lt;/strong&gt; tamb√©m atribu√≠mos o valor &lt;strong&gt;true&lt;/strong&gt; √† propriedade &lt;strong&gt;showCancelButton&lt;/strong&gt;, que ir√° apresentar um bot√£o para cancelar a busca e retirar o teclado digital da tela.&lt;/p&gt;

&lt;p&gt;E a seguinte instru√ß√£o que ir√° controlar quando devemos disparar a busca:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;this.searchTermControl = new FormControl();
  this.searchTermControl.valueChanges.debounceTime(1000).distinctUntilChanged().subscribe(search =&amp;gt; {
    if (search !== &#39;&#39; &amp;&amp; search) {
      this.filterItems();
    }
  })  
&lt;/pre&gt;

&lt;p&gt;E com isso o componente se torna mais coerente com a expectativa do usu√°rio, que ir√° perceber um ganho de performance ao filtrar resultados em uma lista com muitas c√©lulas.&lt;/p&gt;

&lt;h4 id=&#34;10-3-8211-ajustando-o-visual-dos-componentes-com-css&#34;&gt;10.3 &amp;#8211; Ajustando o visual dos componentes com CSS&lt;/h4&gt;

&lt;p&gt;Nosso aplicativo agora depende de algumas mudan√ßas visuais para corrigir alguns pequenos detalhes. O primeiro deles √© referente ao Android. O Ionic 2, ao rodar em um dispositivo Android, oferece automaticamente suporte ao &lt;strong&gt;&lt;a href=&#34;https://material.google.com/&#34; target=&#34;_blank&#34;&gt;Material Design&lt;/a&gt;&lt;/strong&gt; do &lt;strong&gt;Google&lt;/strong&gt; (uma linguagem visual que sintetiza princ√≠pios cl√°ssicos daquilo que considera o &amp;#8220;bom design&amp;#8221;). Em resumo, o Material Design se preocupa em criar uma experi√™ncia unificada de layout entre as plataformas que rodam o sistema operacional do Android. &lt;a href=&#34;https://material.google.com/#introduction-principles&#34; target=&#34;_blank&#34;&gt;Aqui&lt;/a&gt; voc√™ pode conhecer melhor sobre seus princ√≠pios fundamentais.&lt;/p&gt;

&lt;p&gt;Um dos pontos de aten√ß√£o √© a maneira como os textos devem ser apresentados ao usu√°rio. O Material Design trabalha com a no√ß√£o de hierarquia baseada em tons e opacidade. Em outras palavras, textos prim√°rios (que representam t√≠tulos e informa√ß√µes de destaque) recebem 87% de opacidade enquanto subt√≠tulos recebem 54%. Veja abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic-2-material-design-spec.jpg&#34; alt=&#34;Ionic 2 - Material Design Spec&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Se voc√™ for inspecionar as cores presentes nos textos das c√©lulas (utilize o &lt;em&gt;Devtools&lt;/em&gt; para tal) vai notar que elas n√£o seguem este ponto da especifica√ß√£o da linguagem. O texto principal, por exemplo, utiliza preto puro e √© sempre bom (fica aqui a dica) &lt;a href=&#34;https://ianstormtaylor.com/design-tip-never-use-black&#34; target=&#34;_blank&#34;&gt;evitar&lt;/a&gt; preto puro em seus designs sempre que poss√≠vel.&lt;/p&gt;

&lt;p&gt;Diferentemente do Android, a preocupa√ß√£o do iOS est√° voltada para o conte√∫do, por isso n√£o existe nenhuma linguagem t√£o restritiva quanto o Material Design na plataforma. No entanto, irei replicar a mudan√ßa visual que faremos para o Android tamb√©m no iOS, tornando nossos textos ainda mais agrad√°veis para leitura.&lt;/p&gt;

&lt;p&gt;Em &lt;strong&gt;home.scss&lt;/strong&gt; inclua o seguinte c√≥digo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// iOS &amp; Android only
  .item-md, .item-ios {
      h2 {
          color: rgba($color: #000, $alpha: .87);
      }
      p {
          color: rgba($color: #000, $alpha: .54);
      }
  }
&lt;/pre&gt;

&lt;p&gt;Repare que podemos fazer o nesting dos elementos por estar utilizando &lt;strong&gt;Sass&lt;/strong&gt;. Tamb√©m perceba que aplicamos a altera√ß√£o apenas para as plataformas Android e iOS mas n√£o para Windows Phone. As classes voc√™ pode obter facilmente ao inspecionar o DOM no console do browser.&lt;/p&gt;

&lt;p&gt;Outro problema aparente s√£o os t√≠tulos dos posts que somem ao atingir a borda da c√©lula. Precisamos incluir uma quebra de linha para que eles sejam apresentados por completo. Dessa vez iremos aplicar a altera√ß√£o √†s tr√™s plataformas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// iOS, Android &amp; WP
  .item-md, .item-ios, .item-wp {
      h2, p {
          white-space: normal;
      }
  }
&lt;/pre&gt;

&lt;p&gt;Por fim, gostaria de melhorar a maneira como a barra de busca se apresenta na vers√£o iOS. Ela est√° pequena e diminui ainda mais de tamanho quando o bot√£o de cancelar est√° ativo. Tamb√©m seria interessante escurecer um pouco mais a opacidade do background para lhe conferir maior destaque:&lt;/p&gt;

&lt;p&gt;Inclua o seguinte c√≥digo (desta vez aplicado apenas para o iOS):&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// iOS only
  .toolbar-ios { 
      ion-title {
          padding: 0 90px 0 1px;  
      } 
      .searchbar-ios .searchbar-input {
          background: rgba($color: #000, $alpha: 0.12);            
      }
  }
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Caso prefira, voc√™ tamb√©m pode alterar o valor das vari√°veis Sass do Ionic. &lt;a href=&#34;https://ionicframework.com/docs/v2/theming/overriding-ionic-variables/&#34; target=&#34;_blank&#34;&gt;Neste link&lt;/a&gt; h√° uma lista de todas elas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;10-4-8211-ajustes-finais-no-html&#34;&gt;10.4 &amp;#8211; Ajustes finais no html&lt;/h4&gt;

&lt;p&gt;Vamos iniciar modificando a cor da NavBar. Inclua o seguinte atributo na tag &lt;strong&gt;&lt;ion-navbar&gt;&lt;/strong&gt; em &lt;strong&gt;home.html&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-navbar color=&#34;secondary&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Como estamos utilizando &lt;strong&gt;Sass&lt;/strong&gt;, fazemos uma refer√™ncia √† vari√°vel &lt;strong&gt;secondary&lt;/strong&gt; do array &lt;strong&gt;colors&lt;/strong&gt; que est√° listado no arquivo &lt;strong&gt;src/theme/variable.scss&lt;/strong&gt;. Isso significa que voc√™ pode alterar o valor da cor na vari√°vel ao inv√©s de escrever diretamente no template html.&lt;/p&gt;

&lt;p&gt;Agora eu gostaria de inserir um √≠cone na frente do meu endere√ßo de dom√≠nio (que representa meu subt√≠tulo na lista) sempre que a categoria estiver relacionada com alguma das listadas na nossa Action Sheet. Eu posso controlar esse comportamento utilizando a diretiva de html do Angular chamada &lt;strong&gt;ngSwitch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Substitua esta linha:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;p&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Por esta instru√ß√£o:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;¬†&amp;lt;div [ngSwitch]=feed.data.subreddit.toLowerCase()&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;askreddit&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;help-circle&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;gaming&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;logo-playstation&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;music&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;musical-notes&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;movies&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;film&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchCase=&#34;&#39;pics&#39;&#34;&amp;gt;&amp;lt;ion-icon name=&#34;image&#34;&amp;gt;&amp;lt;/ion-icon&amp;gt;&amp;nbsp;{{feed.data.domain}}&amp;lt;/p&amp;gt;
   &amp;lt;p *ngSwitchDefault&amp;gt;{{feed.data.domain}}&amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Observe que os √≠cones apenas ser√£o aplicados no caso de coincidirem com os argumentos. Em caso contr√°rio, ser√° exibido apenas o texto sem nenhum √≠cone, conforme descrito na cl√°usula &lt;strong&gt;ngSwitchDefault&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Outra coisa que me incomoda √© o componente &lt;strong&gt;Refresher&lt;/strong&gt; ser acionado com muito pouco esfor√ßo. Eu sinto que o usu√°rio poderia puxar um pouco mais a lista para evitar que o evento seja disparado com muita facilidade. Podemos modificar isso alterando a propriedade &lt;strong&gt;pullMin&lt;/strong&gt;, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ion-refresher (ionRefresh)=&#34;doRefresh($event)&#34; [pullMin]=90&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Alteramos para 90 dpi a dist√¢ncia m√≠nima que o usu√°rio deve alcan√ßar para disparar o evento. A dist√¢ncia padr√£o √© 60.&lt;/p&gt;

&lt;p&gt;Seria tamb√©m interessante alterar a cor da barra de status da aplica√ß√£o para a cor branca, j√° que o fundo da NavBar agora est√° colorido. Como a barra de status √© um componente nativo, para modific√°-lo precisaremos instalar um plugin do &lt;strong&gt;Cordova&lt;/strong&gt;. Verifique se ele j√° est√° instalado procurando no arquivo &lt;strong&gt;package.json&lt;/strong&gt; por &amp;#8220;&lt;strong&gt;cordova-plugin-statusbar&lt;/strong&gt;&amp;#8220;. Caso contr√°rio, digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ionic plugin add cordova-plugin-statusbar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;E insira a seguinte instru√ß√£o dentro do m√©todo construtor do arquivo &lt;strong&gt;src/app/app.component.ts&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;StatusBar.backgroundColorByHexString(&#39;#ffffff&#39;);
&lt;/pre&gt;

&lt;p&gt;E agora veja como ficou o visual final da nossa aplica√ß√£o rodando em um iPhone 6:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #666&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/ionic2-step10.gif&#34; alt=&#34;Ionic 2 - UX enhancement&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;10-5-8211-aumentando-o-desempenho&#34;&gt;10.5 &amp;#8211; Aumentando o desempenho&lt;/h4&gt;

&lt;p&gt;Se voc√™ pensa em evoluir de um prot√≥tipo para um aplicativo real, se preocupar com o seu desempenho √© tarefa essencial. Abaixo eu listo algumas sugest√µes que podem ajudar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WKWebView&lt;/strong&gt; &amp;#8211; Recentemente o time do Ionic tornou poss√≠vel rodar os aplicativos iOS utilizando o browser WKWebView (evolu√ß√£o do antigo browser UIWebView). Este novo engine oferece aos aplicativos iOS um ganho de performance muito superior ao antigo browser, principalmente na experi√™ncia com listas. Para instalar o plugin, digite: &lt;code&gt;ionic plugin add https://github.com/driftyco/cordova-plugin-wkwebview-engine.git --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Crosswalk&lt;/strong&gt; &amp;#8211; Como o Android tem algumas limita√ß√µes de desempenho que podem ser encontradas em alguns devices (principalmente nos antigos devido √†s v√°rias vers√µes de sistema existentes), fica dif√≠cil garantir que o aplicativo ir√° rodar exatamente da maneira como queremos. O Crosswalk √© um browser moderno que √© empacotado junto com o seu app no momento que voc√™ faz o build para Android. Isso significa que, independente do device do usu√°rio, ele estar√° executando o app no Crosswalk. O ganho de performance √© vis√≠vel mas ele pode aumentar o tamanho final da sua aplica√ß√£o. Para instalar, digite: &lt;code&gt;ionic plugin add cordova-plugin-crosswalk-webview&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual Scroll&lt;/strong&gt; &amp;#8211; O nosso aplicativo pode adicionar novos itens √† lista de v√°rias maneiras. Isso significa que, quanto mais a lista aumenta de tamanho, mais itens precisar√£o ser renderizados, o que ir√° consumir muita mem√≥ria e impactar o desempenho geral. O Virtual Scroll foi criado com o intuito de minimizar este impacto, uma vez que ele apenas renderiza uma quantidade &amp;#8220;x&amp;#8221; de c√©lulas na tela, suficientes para preenche-la. Dessa forma elas podem ser reutilizadas, o que evita uma sobrecarga de mem√≥ria (comportamento muito similar ao de uma &lt;strong&gt;ListView&lt;/strong&gt; no iOS). Para entender melhor sobre como utilizar o Virtual Scroll, visite &lt;a href=&#34;https://ionicframework.com/docs/v2/api/components/virtual-scroll/VirtualScroll/&#34; target=&#34;_blank&#34;&gt;este link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;considera√ß√µes-finais&#34;&gt;Considera√ß√µes finais&lt;/h2&gt;

&lt;p&gt;Sim, √© um post gigantesco. Mas a minha meta ao escrev√™-lo era gerar o m√°ximo de valor para profissionais que ainda n√£o tiveram contato com o Ionic 2 ou aqueles que desejam entender melhor como ele funciona, uma vez que somos carentes de tutoriais mais densos escritos sobre o assunto em portugu√™s.&lt;/p&gt;

&lt;p&gt;Seja voc√™ um desenvolvedor, gerente de produto ou CIO de uma empresa, √© muito importante compreender que ainda √© dif√≠cil nos dias de hoje suportar a grande diversidade de aparelhos e plataformas existentes em um ecossistema que vive em constante mudan√ßa. Os custos para manter uma equipe multidisciplinar sempre atualizada (e com boa sinergia) √© alt√≠ssimo e isso se reflete no or√ßamento repassado para o cliente. Optar pelo desenvolvimento de aplicativos h√≠bridos √©, antes de mais nada, uma op√ß√£o estrat√©gica que deve ser avaliada de acordo com o contexto de cada projeto. Muitas das vezes os argumentos √† favor do desenvolvimento nativo n√£o se justificam, principalmente se o projeto n√£o demanda um &lt;em&gt;frame rate&lt;/em&gt; muito alto (como aplicativos com muitas anima√ß√µes, transi√ß√µes customizadas ou jogos).&lt;/p&gt;

&lt;p&gt;Outro ponto que precisa ser esclarecido √© que o Ionic tem um papel important√≠ssimo no que se refere √† uma fase que √© t√£o ou mais importante que o desenvolvimento em si: A &lt;strong&gt;prototipa√ß√£o&lt;/strong&gt;. Poder validar o produto com o cliente ainda em fase inicial √© um grande diferencial. Algo que lhe confere uma posi√ß√£o de destaque em um mercado extremamente competitivo.&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;H√° muito espa√ßo para melhorias e recursos adicionais que podem ser implementados no aplicativo que criamos. Caso tope desafios, voc√™ pode tentar os seguintes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Incluir data de publica√ß√£o do post na lista;&lt;/li&gt;
&lt;li&gt;Incluir recurso de navega√ß√£o entre telas (deixei o NavController l√° de prop√≥sito);&lt;/li&gt;
&lt;li&gt;Oferecer op√ß√£o de alterar url para exibir resultados de um determinado subreddit;&lt;/li&gt;
&lt;li&gt;Considerar cen√°rios onde o usu√°rio pode perder a conex√£o com a internet;&lt;/li&gt;
&lt;li&gt;Op√ß√£o de utilizar algum recurso nativo do smartphone (ex: C√¢mera).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para facilitar o seu aprendizado, o projeto est√° dispon√≠vel no &lt;strong&gt;&lt;a href=&#34;https://github.com/carloscabral/my-reader---Ionic2&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/strong&gt; separado por branches. Por exemplo, caso voc√™ queira ter acesso ao passo 4 do tutorial, baixa digitar no terminal &lt;code&gt;git checkout step4&lt;/code&gt; e o c√≥digo fonte referente √† este passo estar√° dispon√≠vel.&lt;/p&gt;

&lt;p&gt;Bons estudos e at√© a pr√≥xima!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Se voc√™ ficou curioso sobre a cria√ß√£o de aplicativos multiplataforma que utilizam tecnologia da web, saiba que o Ionic n√£o √© a √∫nica op√ß√£o existente. Leia meu post sobre &lt;strong&gt;&lt;a href=&#34;http://tableless.com.br/react-native-construa-aplicacoes-moveis-nativas-com-javascript/&#34; target=&#34;_blank&#34;&gt;React Native&lt;/a&gt;&lt;/strong&gt; e descubra como j√° √© poss√≠vel criar uma aplica√ß√£o 100% nativa utilizando JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>ES2015 ‚Äì Babel 6 com Browserify e Babelify</title>
      <link>https://tableless.github.io/hugo-public/es2015-babel-6-com-browserify-e-babelify/</link>
      <pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/es2015-babel-6-com-browserify-e-babelify/</guid>
      <description>

&lt;p&gt;Vivemos um momento de transi√ß√£o no mundo Javascript com a aprova√ß√£o do ES2015 ou ES6, por√©m, este novo padr√£o ainda n√£o √© suportado totalmente por todos os navegadores, para administrar este problema foi criado o Babel, um compiler Javascript, que al√©m de suas muitas fun√ß√µes, nesta vers√£o 6, pode transformar ES2015 em ES5.&lt;/p&gt;

&lt;h2 id=&#34;instalando&#34;&gt;Instalando&lt;/h2&gt;

&lt;p&gt;Para este tutorial, iremos utilizar o &lt;a href=&#34;https://github.com/babel/babelify&#34; target=&#34;_blank&#34;&gt;Babelify&lt;/a&gt;, um m√≥dulo &lt;a href=&#34;https://www.npmjs.com/&#34; target=&#34;_blank&#34;&gt;npm&lt;/a&gt; feito para funcionar juntamente com o &lt;a href=&#34;http://browserify.org/&#34; target=&#34;_blank&#34;&gt;Browserify&lt;/a&gt;, outro m√≥dulo que empacota todos os seus requires para serem usados no browser.&lt;/p&gt;

&lt;p&gt;Para instalar ambos, √© necess√°rio ter instalado em seu computador o &lt;a href=&#34;https://nodejs.org/&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt;, que juntamente instala o npm (Node Package Manager) ou Gerenciador de Pacotes Node.&lt;/p&gt;

&lt;p&gt;Navegue via terminal at√© a raiz do seu projeto e digite o comando abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bsh&#34;&gt;npm install --save-dev browserify babelify babel-preset-es2015
&lt;/pre&gt;

&lt;p&gt;O comando ir√° instalar o Browserify, Babelify e o plugin es2015 do Babel, respons√°vel por cuidar da convers√£o de ES2015 para ES5, al√©m de salv√°-los na lista de devDependencies do seu &lt;a href=&#34;https://docs.npmjs.com/files/package.json&#34; target=&#34;_blank&#34;&gt;package.json&lt;/a&gt;. Nesta vers√£o do Babel (6) nenhum plugin √© instalado por padr√£o, por isso precisamos instalar ele √† parte, voc√™ pode encontrar a lista completa de plugins &lt;a href=&#34;http://babeljs.io/docs/plugins/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configurando&#34;&gt;Configurando&lt;/h2&gt;

&lt;h3 id=&#34;script&#34;&gt;Script&lt;/h3&gt;

&lt;p&gt;Para configurarmos via script, abra o seu arquivo &lt;a href=&#34;https://docs.npmjs.com/files/package.json&#34; target=&#34;_blank&#34;&gt;package.json&lt;/a&gt;, crie a sess√£o &lt;a href=&#34;https://docs.npmjs.com/misc/scripts&#34; target=&#34;_blank&#34;&gt;scripts&lt;/a&gt; e nela vamos adicionar o c√≥digo que ir√° transformar seu c√≥digo ES2015 para ES5:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;&#34;build-browserify&#34;: &#34;browserify ./src/meuarquivo.js -t [ babelify --presets [ es2015 ] ] -o ./dist/meunovoarquivo.js&#34;
&lt;/pre&gt;

&lt;p&gt;Explicando um pouco mais sobre o c√≥digo acima:&lt;/p&gt;

&lt;p&gt;./src/meuarquivo.js &amp;#8211; Este √© o local do seu arquivo JS escrito nos padr√µes ES2015.&lt;/p&gt;

&lt;p&gt;-t [ babelify &amp;#8211;presets [ es2015 ] ] &amp;#8211; A option¬†-t se refere √† transform, que utiliza de m√≥dulos de transforma√ß√£o terceiros, neste caso o &lt;a href=&#34;https://github.com/babel/babelify&#34; target=&#34;_blank&#34;&gt;Babelify&lt;/a&gt;. Passamos o m√≥dulo que iremos utilizar e passamos uma option para o m√≥dulo (&amp;#8211;presets), nesta option listamos os &lt;a href=&#34;http://babeljs.io/docs/plugins/&#34; target=&#34;_blank&#34;&gt;plugins&lt;/a&gt; que iremos utilizar do Babel, que ser√° o es2015.&lt;/p&gt;

&lt;p&gt;-o ./dist/meunovoarquivo.js &amp;#8211; A option -o se refere √† output, aqui passamos o destino do nosso arquivo, que ser√° gerado ap√≥s a transforma√ß√£o.&lt;/p&gt;

&lt;h3 id=&#34;grunt&#34;&gt;Grunt&lt;/h3&gt;

&lt;p&gt;Podemos utilizar tamb√©m o &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;Grunt&lt;/a&gt;, um Task Runner de Javascript, para realizarmos a transforma√ß√£o do arquivo. Para isso √© necess√°rio instalarmos mais um m√≥dulo npm, o &lt;a href=&#34;https://www.npmjs.com/package/grunt-browserify&#34; target=&#34;_blank&#34;&gt;grunt-browserify&lt;/a&gt; (contando que voc√™ j√° tenha instalado em seu projeto os m√≥dulos &lt;a href=&#34;https://www.npmjs.com/package/grunt&#34; target=&#34;_blank&#34;&gt;grunt&lt;/a&gt; e &lt;a href=&#34;https://www.npmjs.com/package/grunt-cli&#34; target=&#34;_blank&#34;&gt;grunt-cli&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Novamente na raiz do seu projeto via terminal, digite o comando abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bsh&#34;&gt;npm install --save-dev grunt-browserify
&lt;/pre&gt;

&lt;p&gt;Ap√≥s a instala√ß√£o, v√° em seu arquivo &lt;a href=&#34;http://gruntjs.com/sample-gruntfile&#34; target=&#34;_blank&#34;&gt;Gruntfile.js&lt;/a&gt;¬†e adicione no config:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;browserify: {
    dist: {
        options: {
            &#34;transform&#34;: [ [&#34;babelify&#34;, { &#34;presets&#34;: [&#34;es2015&#34;] }] ]
        },
        files: {
            &#39;./dist/meunovoarquivo.js&#39;: [&#39;./src/meuarquivo.js&#39;]
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;Depois, carregue o m√≥dulo e registre uma task:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;grunt.loadNpmTasks(&#39;grunt-browserify&#39;);
grunt.registerTask(&#39;default&#39;, [&#39;browserify&#39;]);
&lt;/pre&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;Ainda estamos iniciando essa nova fase de ES2015, por√©m j√° podemos perceber que o futuro espera muitas novidades e um crescimento maravilhoso do Javascript.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando um widget de ‚ÄúArtigos Populares‚Äù por numero de visualiza√ß√µes</title>
      <link>https://tableless.github.io/hugo-public/criando-um-widget-de-artigos-populares-por-numero-de-visualizacoes/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-um-widget-de-artigos-populares-por-numero-de-visualizacoes/</guid>
      <description>&lt;p&gt;Recentemente tive que implementar um widget de artigos populares para um cliente. Acontece que at√© ent√£o a √∫nica maneira que eu sabia fazer isso era ordenando os posts por n√∫mero de coment√°rios. Propus a solu√ß√£o ao meu cliente e o mesmo disse que queria que o mesmo fosse ordenados por n√∫mero de visualiza√ß√µes. Bom, nunca tinha feito isso, ent√£o corri atr√°s de alguns artigos &amp;#8220;gringos&amp;#8221; explicando como fazer e me espantei sobre como era simples.&lt;/p&gt;

&lt;p&gt;Primeiro de tudo, precisamos encontrar uma maneira de registrar cada visita do artigo. Para que isso seja poss√≠vel adicionamos esse c√≥digo no &lt;strong&gt;functions.php&lt;/strong&gt; do tema:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/* Populares */
function wpb_set_post_views($postID) {
$cookie = strtotime(date(&#39;Y-m-d&#39;));
 $pv_url = &#39;wpmidia_&#39;.md5($_SERVER[&#39;REQUEST_URI&#39;]);
 
 if( is_single() &amp;&amp; !isset($_COOKIE[$pv_url]) ){
 $count_key = &#39;wpb_post_views_count&#39;;
 $count = get_post_meta($postID, $count_key, true);
 if($count==&#39;&#39;){
 $count = 0;
 delete_post_meta($postID, $count_key);
 add_post_meta($postID, $count_key, &#39;0&#39;);&lt;/pre&gt;

&lt;pre&gt;setcookie($pv_url, $cookie, time()+3600, COOKIEPATH, COOKIE_DOMAIN, false); // 1 hora
 }else{
 $count++;
 update_post_meta($postID, $count_key, $count);
 setcookie($pv_url, $cookie, time()+3600, COOKIEPATH, COOKIE_DOMAIN, false); // 1 hora
 }
 }
}
//To keep the count accurate, lets get rid of prefetching
remove_action( &#39;wp_head&#39;, &#39;adjacent_posts_rel_link_wp_head&#39;, 10, 0);
function wpb_track_post_views ($post_id) {
 if ( !is_single() ) return;
 if ( empty ( $post_id) ) {
 global $post;
 $post_id = $post-&amp;gt;ID; 
 }
 wpb_set_post_views($post_id);
}
add_action( &#39;wp_head&#39;, &#39;wpb_track_post_views&#39;);&lt;/pre&gt;

&lt;p&gt;A segunda fun√ß√£o¬†&lt;strong&gt;wpb_track_post_views&lt;/strong&gt; vai basicamente chamar a primeira fun√ß√£o toda vez que o tipo de p√°gina for &amp;#8220;single&amp;#8221;, ou seja, em todos os artigos. √â essencial que seu template tenha a chamada &lt;code&gt;wp_head();&lt;/code&gt; no header do tema. A primeira fun√ß√£o vai registrar mais uma visualiza√ß√£o do post em nosso banco de dados pela vari√°vel &lt;code&gt;$count_key&lt;/code&gt;. S√≥ que tem um pequeno problema que j√° contornamos no nosso c√≥digo: toda vez que um usu√°rio der refresh na p√°gina ele registraria mais uma visualiza√ß√£o, isso faria com que usu√°rios comuns conseguissem burlar, sem querer (ou por querer, sei l√°), os posts. Como dito, conseguimos driblar isso, no c√≥digo usamos o &lt;code&gt;setcookie&lt;/code&gt; para criar um cookie no navegador e impedir que a fun√ß√£o seja chamada nos pr√≥ximos 3600 segundos ou 1 hora (voc√™ pode alterar se quiser).&lt;/p&gt;

&lt;p&gt;Dito isso, n√£o adiantaria nada se n√£o pud√™ssemos chamar essa fun√ß√£o. Para isso adicionamos mais um trecho no &lt;strong&gt;functions.php&lt;/strong&gt; do tema:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function wpb_get_post_views($postID){
 $count_key = &#39;wpb_post_views_count&#39;;
 $count = get_post_meta($postID, $count_key, true);
 if($count==&#39;&#39;){
 delete_post_meta($postID, $count_key);
 add_post_meta($postID, $count_key, &#39;0&#39;);
 return &#34;0 View&#34;;
 }
 return $count.&#39; Views&#39;;
 }&lt;/pre&gt;

&lt;p&gt;A fun√ß√£o acima serve tamb√©m para retornar o numero de visualiza√ß√µes que o artigo teve, basta chama-la com¬†wpb_get_post_views($id), sendo $id o ID do artigo.&lt;/p&gt;

&lt;p&gt;Agora que implementamos todas as fun√ß√µes precisamos exibir isso em algum lugar e o c√≥digo abaixo serve justamente para isso:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;ul&amp;gt;
 &amp;lt;?php $popularpost = new WP_Query( array( &#39;posts_per_page&#39; =&amp;gt; 5, &#39;meta_key&#39; =&amp;gt; &#39;wpb_post_views_count&#39;, &#39;orderby&#39; =&amp;gt; &#39;meta_value_num&#39;, &#39;order&#39; =&amp;gt; &#39;DESC&#39; ) );
 while ( $popularpost-&amp;gt;have_posts() ) : $popularpost-&amp;gt;the_post();
 ?&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;small&amp;gt;&amp;lt;?php the_category(&#39;, &#39;); ?&amp;gt;&amp;lt;/small&amp;gt;
 &amp;lt;a href=&#34;&amp;lt;?php echo get_permalink(); ?&amp;gt;&#34; title=&#34;&amp;lt;?php the_title_attribute(); ?&amp;gt;&#34;&amp;gt;
 &amp;lt;h3&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;h3&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;?php
 endwhile;
 wp_reset_query();
 ?&amp;gt;
 &amp;lt;/ul&amp;gt;&lt;/pre&gt;

&lt;p&gt;Voc√™ pode adicionar thumbnails, links e afins como o de costume.&lt;/p&gt;

&lt;p&gt;O que achou? Tem uma solu√ß√£o melhor? Comenta!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 ‚Äì Parte Final</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-final/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-final/</guid>
      <description>

&lt;p&gt;Chegamos ao final da nossa s√©rie sobre Symfony. Se voc√™ n√£o leu os outros, no final do artigo h√° uma &lt;a href=&#34;#other-posts-symfony&#34;&gt;listagem com todos os artigos&lt;/a&gt; j√° publicados dessa s√©rie.&lt;/p&gt;

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-09/&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, instalamos e configuramos o bundle StofDoctrineExtensionsBundle, para fazermos os slugs de nossos posts, agora vamos instalar e configurar o Bundle FOSUserBundle, para fazer a autentica√ß√£o da √°rea administrativa do nosso blog.&lt;/p&gt;

&lt;h2 id=&#34;instala√ß√£o-do-bundle-fosuserbundle&#34;&gt;Instala√ß√£o do bundle FOSUserBundle.&lt;/h2&gt;

&lt;p&gt;Para instalar o FOSUserBundle, temos que adicion√°-lo em nosso composer.json. Abra o arquivo composer.json e adicione a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&#34;friendsofsymfony/user-bundle&#34;: &#34;1.3.*&#34;
&lt;/pre&gt;

&lt;p&gt;Depois de adicionando o FOSUserBundle no composer, vamos instal√°- lo. Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ composer update
&lt;/pre&gt;

&lt;p&gt;Ap√≥s o Download, o FOSUserBundle est√° instalado em nossa aplica√ß√£o.&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-fosuserbundle&#34;&gt;Configurando o FOSUserBundle.&lt;/h2&gt;

&lt;p&gt;A primeira configura√ß√£o que devemos fazer, √© registrar o novo bundle instalado, para isso entre no AppKernel, caminho: app/AppKernel.php&lt;/p&gt;

&lt;p&gt;Adicione a linha abaixo no registro de bundles:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;new FOS\UserBundle\FOSUserBundle(),
&lt;/pre&gt;

&lt;p&gt;Veja na linha 18:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class AppKernel extends Kernel 
{ 
    public function registerBundles() 
    { 
        $bundles = array( 
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(), 
            new Symfony\Bundle\SecurityBundle\SecurityBundle(), 
            new Symfony\Bundle\TwigBundle\TwigBundle(), 
            new Symfony\Bundle\MonologBundle\MonologBundle(), 
            new Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle(), 
            new Symfony\Bundle\AsseticBundle\AsseticBundle(), 
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(), 
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(), 
            new Tableless\CoreBundle\TablelessCoreBundle(), 
            new Tableless\ModelBundle\TablelessModelBundle(), 
         new Knp\Bundle\PaginatorBundle\KnpPaginatorBundle(),
         new Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle(),
         new FOS\UserBundle\FOSUserBundle(),
        );

...
&lt;/pre&gt;

&lt;p&gt;Pronto, o FOSUserBundle est√° registrado.&lt;/p&gt;

&lt;p&gt;Agora vamos fazer as configura√ß√µes no arquivo config.yml, caminho: app/config/config.yml.&lt;/p&gt;

&lt;p&gt;Para que o sistema de login venha traduzido, devemos descomentar a linha translator em framework, veja na linha 3 do c√≥digo abaixo:&lt;/p&gt;

&lt;p&gt;De:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;framework:
    #esi:             ~
    #translator:      { fallback: &#34;%locale%&#34; }
&lt;/pre&gt;

&lt;p&gt;Para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;framework:
    #esi:             ~
    translator:      { fallback: &#34;%locale%&#34; }
&lt;/pre&gt;

&lt;p&gt;No final do arquivo adicione as configura√ß√µes abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;# FOSUser
fos_user:
    db_driver: orm # other valid values are &#39;mongodb&#39;, &#39;couchdb&#39; and &#39;propel&#39;
    firewall_name: main
    user_class: Tableless\UserBundle\Entity\User
&lt;/pre&gt;

&lt;p&gt;Perceba que na configura√ß√£o acima, estamos indicando uma entidade User, por√©m ainda n√£o existente, vamos cri√°-la.&lt;/p&gt;

&lt;h2 id=&#34;criando-o-bundle-userbundle&#34;&gt;Criando o bundle UserBundle.&lt;/h2&gt;

&lt;p&gt;Continuando com nossas configura√ß√µes, podemos criar um novo bundle para que o mesmo fique respons√°vel pelo gerenciamento dos usu√°rios, em nosso caso, vamos criar o bundle, por√©m s√≥ vamos usar para configurar a entidade User, caso queiram fazer outras configura√ß√µes, o bundle j√° est√° criado.&lt;/p&gt;

&lt;p&gt;Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:bundle
&lt;/pre&gt;

&lt;p&gt;Digitamos a namespace:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Bundle namespace: Tableless/UserBundle
&lt;/pre&gt;

&lt;p&gt;O console nos sugere um nome, vamos deixar como est√°, apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Bundle name [TablelessUserBundle]:
&lt;/pre&gt;

&lt;p&gt;No caminho, apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Target directory [/media/candidosouza/Development/GITHUB/tableless/symfony/src]:
&lt;/pre&gt;

&lt;p&gt;Usaremos annotation para configura√ß√µes:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Configuration format (yml, xml, php, or annotation): annotation
&lt;/pre&gt;

&lt;p&gt;N√£o vamos querer a gera√ß√£o de toda a estrutura de um bundle, apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Do you want to generate the whole directory structure [no]? 
&lt;/pre&gt;

&lt;p&gt;Vamos confirmar a gera√ß√£o do novo bundle, damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Do you confirm generation [yes]? 
&lt;/pre&gt;

&lt;p&gt;E vamos registrar esse bundle, somente enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Confirm automatic update of your Kernel [yes]?
&lt;/pre&gt;

&lt;p&gt;E gerar as rotas, damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Confirm automatic update of the Routing [yes]?
&lt;/pre&gt;

&lt;p&gt;Pronto, nosso bundle UserBundle est√° criado, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/01.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/01.png&#34; alt=&#34;pasta&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49557&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nosso bundle est√° criado, vamos criar nossa entidade User.&lt;/p&gt;

&lt;h2 id=&#34;criando-a-entidade-user&#34;&gt;Criando a Entidade User.&lt;/h2&gt;

&lt;p&gt;Vamos entrar no bundle UserBundle, caminho src/Tableless/UserBundle/, e vamos criar uma pasta chamada Entity. Nessa pasta vamos criar uma classe User, que ser√° nossa entidade, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/02.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/02.png&#34; alt=&#34;Entidade User&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49558&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A nossa entidade User tem que estender a entidade User do FOSUserBundle, vamos dar um use nessa classe e vamos apelida l√° de BaseUser, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use FOS\UserBundle\Entity\User as BaseUser;
&lt;/pre&gt;

&lt;p&gt;Tamb√©m temos que passar as configura√ß√µes (mapear nossa entidade) via annotation, vamos dar um use na classe Mapping do Doctrine e apelida l√° de ORM, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Doctrine\ORM\Mapping as ORM;
&lt;/pre&gt;

&lt;p&gt;Nossa Entidade ter√° apenas um atributo id, e um m√©todo construtor que chamar√° construtor pai de entidade BaseUser, juntamente com as respectivas annotations, veja nossa entidade User pronta:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\UserBundle\Entity;

use FOS\UserBundle\Entity\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name=&#34;fos_user&#34;)
 */
class User extends BaseUser
{
    /**
     * @ORM\Id
     * @ORM\Column(type=&#34;integer&#34;)
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;)
     */
    protected $id;

    public function __construct()
    {
        parent::__construct();
    }
}
&lt;/pre&gt;

&lt;h2 id=&#34;configura√ß√µes-de-seguran√ßa&#34;&gt;Configura√ß√µes de seguran√ßa.&lt;/h2&gt;

&lt;p&gt;Para configurar a parte de seguran√ßa, temos que editar o arquivo security.yml, respons√°vel pela parte de seguran√ßa do Symfony, abra o arquivo, caminho: app/config/security.yml.&lt;/p&gt;

&lt;p&gt;Abrindo o arquivo, vamos perceber que o Symfony est√° configurando o provider via mem√≥ria, vamos alterar o provider.&lt;/p&gt;

&lt;p&gt;De:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;providers:
    in_memory:
        memory: ~
&lt;/pre&gt;

&lt;p&gt;Para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;providers:
    fos_userbundle:
        id: fos_user.user_provider.username
&lt;/pre&gt;

&lt;p&gt;Para criptografar a senha do usu√°rio vamos configurar um encoder, incluindo o c√≥digo abaixo, que usar√° o algoritmo sha512, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;encoders:
        FOS\UserBundle\Model\UserInterface: sha512
&lt;/pre&gt;

&lt;p&gt;Agora vamos configurar a parte de firewalls, onde estabeleceremos o pattern para ativa√ß√£o do firewalls, que pelo acesso da url ser√° ativado, e qual o tipo de provider que ser√° usado para o processo de autentica√ß√£o, tamb√©m passaremos o processo de autentica√ß√£o apenas pelo formul√°rio, n√£o permitindo outro tipo de requisi√ß√£o, usando o csrf_provider. Vamos permitir o logout, e usu√°rios an√¥nimos nas √°reas n√£o restritas, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;firewalls:
        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                csrf_provider: form.csrf_provider
            logout:       true
            anonymous:    true
&lt;/pre&gt;

&lt;p&gt;Temos que passar qual o tipo de acesso o usu√°rio ter√° que ter, para acessar determinadas urls, ex: o usu√°rio an√¥nimo, s√≥ poder√° acessar as urls: qualquer-url/login, qualquer-url/register, e qualquer-url/resetting, e apenas usu√°rios administradores, poder√£o acessar a url: qualquer-url/admin/, para isso passaremos a configura√ß√£o de controle de acesso, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_ADMIN }
&lt;/pre&gt;

&lt;p&gt;Temos que configurar a hierarquia de usu√°rios cadastrados, onde o admin, poder√° ser qualquer usu√°rio cadastrado, e o super admin, ser√° o administrador com total acesso, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
&lt;/pre&gt;

&lt;p&gt;Veja o arquivo security.yml pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;security:
    providers:
        fos_userbundle:
            id: fos_user.user_provider.username

    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

    firewalls:
        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                csrf_provider: form.csrf_provider
            logout:       true
            anonymous:    true

    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_ADMIN }

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
&lt;/pre&gt;

&lt;p&gt;Pronto as configura√ß√µes de seguran√ßa, est√£o prontas.&lt;/p&gt;

&lt;p&gt;E para finalizar as configura√ß√µes, temos que passar as rotas do FOSUserBundle onde ficar√£o registradas no sistema, para isso abra o arquivo routing.yml, caminho: app/config/routing.yml.&lt;/p&gt;

&lt;p&gt;Com o arquivo aberto vamos inserir as rotas abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;# FOSUser
fos_user_security:
    resource: &#34;@FOSUserBundle/Resources/config/routing/security.xml&#34;

fos_user_profile:
    resource: &#34;@FOSUserBundle/Resources/config/routing/profile.xml&#34;
    prefix: /profile

fos_user_register:
    resource: &#34;@FOSUserBundle/Resources/config/routing/registration.xml&#34;
    prefix: /register

fos_user_resetting:
    resource: &#34;@FOSUserBundle/Resources/config/routing/resetting.xml&#34;
    prefix: /resetting

fos_user_change_password:
    resource: &#34;@FOSUserBundle/Resources/config/routing/change_password.xml&#34;
    prefix: /profile
&lt;/pre&gt;

&lt;p&gt;Para que tudo ocorra bem, temos que atualizar o banco de dados, para criar a tabela dos usu√°rios, entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console doctrine:schema:update --force
&lt;/pre&gt;

&lt;p&gt;veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/03.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/03.png&#34; alt=&#34;Tabela do banco de dados&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49559&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;estilizando-as-templates-do-fosuserbundle&#34;&gt;Estilizando as templates do FOSUserBundle.&lt;/h2&gt;

&lt;p&gt;O FOSUserBundle est√° configurado e instalado em nosso sistema, para que possamos test√°-lo, entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console router:debug
&lt;/pre&gt;

&lt;p&gt;E veremos todas as rotas criadas em nosso sistema atrav√©s FOSUserBundle, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/04.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/04.png&#34; alt=&#34;Router Debug&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49561&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Podemos entrar em todas as rotas, e perceberemos que est√° sem estiliza√ß√£o, por exemplo: a rota /register/, se acessamos no navegador essa rota: url: &lt;a href=&#34;http://127.0.0.1:8000/register/&#34;&gt;http://127.0.0.1:8000/register/&lt;/a&gt; veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/05.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/05.png&#34; alt=&#34;tela de registro&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49562&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Est√° funcionando perfeitamente, por√©m sem estiliza√ß√£o. Vou explicar como fazer para melhorarmos isso, por√©m n√£o vou me aprofundar.&lt;/p&gt;

&lt;p&gt;As templates do FOSUserBundle est√£o todas na pasta friendsofsymfony dentro do diret√≥rio vendor/, por√©m, sabemos que nunca devemos mexer em nada no diret√≥rio vendor, entretanto podemos sobrescrever essas templates principais do FOSUserBundle, para isso vamos criar uma pasta chamada FOSUserBundle em app/Resources, e dentro da pasta criada, vamos criar outra pasta chamada views, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/06.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/06.png&#34; alt=&#34;Pasta views&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49563&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O FOSUserBundle, trabalha com um layout principal, para que possamos sobrescrev√™-lo, dentro da pasta views, vamos criar um arquivo chamado layout.html.twig e estender a nossa template base j√° criada anteriormente. A tamplate layout.html.twig ficar√° dessa forma, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{% extends &#39;::base.html.twig&#39; %}

{% block title %}Blog Administra√ß√£o{% endblock %}

{% block content %}
    {% block fos_user_content %}{% endblock %}
{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Pronto, se acessarmos novamente o url: &lt;a href=&#34;http://127.0.0.1:8000/register/&#34;&gt;http://127.0.0.1:8000/register/&lt;/a&gt;, teremos o resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/07.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/07.png&#34; alt=&#34;Tela de registro pronta&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49564&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, ficou melhor que anteriormente, por√©m podemos melhorar essa estiliza√ß√£o, em meu caso vou deixar como est√°, mas caso queiram, √© s√≥ criar um arquivo css com as devidas estiliza√ß√µes, e cham√°- lo no base.html.twig que configuramos no &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; target=&#34;_blank&#34;&gt;tutorial 06&lt;/a&gt;, ou usar o pr√≥prio bootstrap, e fazer as altera√ß√µes nos arquivos.&lt;/p&gt;

&lt;p&gt;Obs: Podemos sobrescrever todos os arquivos do FOSUserBundle, por√©m temos que criar os arquivos e as estruturas de pastas, como no original. &lt;a href=&#34;https://github.com/FriendsOfSymfony/FOSUserBundle/tree/1.3.x/Resources/views&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Veja o original&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dessa forma podemos usar as classes do bootstrap para a estiliza√ß√£o nos arquivos sobrescritos que foram criados, caso queiram ter uma base, tem um projeto em meu Github, que foi criado dessa forma, &lt;a href=&#34;https://github.com/candidosouza/management-cars/tree/master/app/Resources/FOSUserBundle/views/Registration&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;veja&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;criando-um-administrador&#34;&gt;Criando um Administrador&lt;/h2&gt;

&lt;p&gt;Podemos criar os usu√°rios pela url: &lt;a href=&#34;http://127.0.0.1:8000/register/&#34;&gt;http://127.0.0.1:8000/register/&lt;/a&gt;, por√©m os usu√°rios criados ser√£o usu√°rios normais do sistema, para criar um super administrador entre no terminal, e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console
&lt;/pre&gt;

&lt;p&gt;Podemos perceber que agora temos mais op√ß√µes, pois instalamos o FOSUserBundle, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/08.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/08.png&#34; alt=&#34;Novos comandos&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49565&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E para criar um usu√°rio administrador digitamos:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console fos:user:create
&lt;/pre&gt;

&lt;p&gt;damos um nome, um e-mail e senha, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/09.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/09.png&#34; alt=&#34;Criando usu√°rio&#34; width=&#34;750&#34; height=&#34;150&#34; class=&#34;alignnone size-full wp-image-49566&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por√©m o usu√°rio criado, ainda √© um usu√°rio normal, vamos torn√°-lo um administrador, ainda no terminal, digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console fos:user:promote
&lt;/pre&gt;

&lt;p&gt;Escolhemos o usu√°rio que no meu caso √© admin.&lt;/p&gt;

&lt;p&gt;Digitamos o Role que queremos, no meu caso ROLE_ADMIN&lt;/p&gt;

&lt;p&gt;E pronto, j√° temos um administrador do sistema.&lt;/p&gt;

&lt;h2 id=&#34;restringindo-o-acesso-no-sistema&#34;&gt;Restringindo o acesso no sistema.&lt;/h2&gt;

&lt;p&gt;Para que um usu√°rio an√¥nimo n√£o tenha acesso a administra√ß√£o, ( em nosso caso a administra√ß√£o de autores e administra√ß√£o de posts), vamos entrar novamente em security.yml, caminho: app/config/security.yml, e vamos alterar o controle de acesso, dizendo que todo o usu√°rio que entrar na rota /post/ e /author/ dever√° ser um usu√°rio cadastrado, veja na linha 5 e 6:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/author/, role: ROLE_USER }
        - { path: ^/post/, role: ROLE_USER }
        - { path: ^/admin/, role: ROLE_ADMIN }
&lt;/pre&gt;

&lt;p&gt;Pronto, dessa forma todos os usu√°rios que acessarem as urls: &lt;a href=&#34;http://127.0.0.1:8000/post/&#34;&gt;http://127.0.0.1:8000/post/&lt;/a&gt; e &lt;a href=&#34;http://127.0.0.1:8000/author/&#34;&gt;http://127.0.0.1:8000/author/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;dever√£o ser cadastrados como usu√°rios, como autores do blog ou administradores.&lt;/p&gt;

&lt;p&gt;Obs: Quando o usu√°rio an√¥nimo acessar as urls citadas acima, ser√£o redirecionados para a tela de login.&lt;/p&gt;

&lt;p&gt;Podemos fazer v√°rias restri√ß√µes, exemplo: vamos dizer que o usu√°rio autor, pode: visualizar, criar, editar, e deletar um post, por√©m, ele n√£o pode: criar, nem editar, menos ainda deletar outro autor, para isso entre no AuthorController, caminho: src/Tableless/CoreBundle/Controller/AuthorController.php&lt;/p&gt;

&lt;p&gt;Primeiramente damos um use em AccessDeniedException, na classe AuthorController, veja.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Symfony\Component\Security\Core\Exception\AccessDeniedException;
&lt;/pre&gt;

&lt;p&gt;Nos m√©todos createAction, newAction, editAction, updateAction e deleteAction, vamos restringir o acesso do usu√°rio normal, onde verificaremos se ele √© um administrador, e caso n√£o seja, vamos gerar um erro, veja o c√≥digo de verifica√ß√£o abaixo, onde introduziremos em todos os m√©todos citados acima, :&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$securityContext = $this-&amp;gt;get(&#39;security.context&#39;);

        if (!$securityContext-&amp;gt;isGranted(&#39;ROLE_ADMIN&#39;)) {
            throw new AccessDeniedException(&#34; Somente o administrador pode acessar! &#34;);
        }
&lt;/pre&gt;

&lt;p&gt;Exemplo no createAction, nos demais m√©todos ser√£o iguais, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
* Creates a new Author entity.
*
* @Route(&#34;/&#34;, name=&#34;author_create&#34;)
* @Method(&#34;POST&#34;)
* @Template(&#34;TablelessCoreBundle:Author:new.html.twig&#34;)
*/
public function createAction(Request $request)
{
   $securityContext = $this-&amp;gt;get(&#39;security.context&#39;);

   if (!$securityContext-&amp;gt;isGranted(&#39;ROLE_ADMIN&#39;)) {
      throw new AccessDeniedException(&#34; Somente o administrador pode acessar! &#34;);
   }

    $entity = new Author();
    $form = $this-&amp;gt;createCreateForm($entity);
    $form-&amp;gt;handleRequest($request);

    if ($form-&amp;gt;isValid()) {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();
        $em-&amp;gt;persist($entity);
        $em-&amp;gt;flush();

     return $this-&amp;gt;redirect($this-&amp;gt;generateUrl(&#39;author_show&#39;, array(&#39;id&#39; =&amp;gt; $entity&amp;gt; getId())));
   }

   return array(
   &#39;entity&#39; =&amp;gt; $entity,
       &#39;form&#39;   =&amp;gt; $form-&amp;gt;createView(),
   );
}
&lt;/pre&gt;

&lt;p&gt;Veja o erro caso o usu√°rio n√£o tenha acesso:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/10.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/10.png&#34; alt=&#34;Erro de usu√°rio n√£o autorizado&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49583&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto!&lt;/p&gt;

&lt;p&gt;Podemos fazer outros tipos de restri√ß√µes, podemos melhorar a seguran√ßa em nosso blog, por√©m no meu caso vou parar por aqui, com o exemplo acima, acredito que temos uma base de como fazer as demais restri√ß√µes.&lt;/p&gt;

&lt;h2 id=&#34;dicas&#34;&gt;Dicas:&lt;/h2&gt;

&lt;p&gt;Nos tutoriais abordei o b√°sico de como trabalhar com o Symfony 2. Recomendo sempre a documenta√ß√£o para aux√≠lio.&lt;/p&gt;

&lt;p&gt;Gostaria de deixar algumas dicas para estudos, que n√£o foram abordados:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/service_container.html&#34; target=&#34;_blank&#34;&gt;Services&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/performance.html&#34; target=&#34;_blank&#34;&gt;Performance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/testing.html&#34; target=&#34;_blank&#34;&gt;Testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/http_cache.html&#34; target=&#34;_blank&#34;&gt;HTTP Cache:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/translation.html&#34; target=&#34;_blank&#34;&gt;Translation:&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;other-posts-symfony&#34;&gt;Conclus√£o.&lt;/h2&gt;

&lt;p&gt;Esta √© a √∫ltima parte da s√©rie ‚ÄúIniciando com Symfony 2‚Äù, espero ter sido √∫til.&lt;/p&gt;

&lt;p&gt;Bons estudos!&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì Instala√ß√£o&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-07/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 07&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-08/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 08&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-09/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 09&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto¬†encontra-se no &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 ‚Äì Parte 09</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-09/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-09/</guid>
      <description>

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-08/&#34; title=&#34;tutorial anterior&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, instalamos e configuramos o bundle Knp Paginator, para fazer a pagina√ß√£o de posts em nosso index, agora vamos instalar e configurar o Bundle StofDoctrineExtensionsBundle, para fazermos os slugs de nossos posts&lt;/p&gt;

&lt;h2 id=&#34;instala√ß√£o-do-bundle-stofdoctrineextensionsbundle&#34;&gt;Instala√ß√£o do bundle StofDoctrineExtensionsBundle&lt;/h2&gt;

&lt;p&gt;Para instalar o StofDoctrineExtensionsBundle, temos que adicion√°-lo em nosso composer.json. Abra o arquivo composer.json e adicione a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&#34;stof/doctrine-extensions-bundle&#34;: &#34;1.2.*@dev&#34;
&lt;/pre&gt;

&lt;p&gt;Depois de adicionando o StofDoctrineExtensionsBundle no composer, vamos instal√°- lo. Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ composer update
&lt;/pre&gt;

&lt;p&gt;Ap√≥s o Download, o StofDoctrineExtensionsBundle est√° instalado em nossa aplica√ß√£o.&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-stofdoctrineextensionsbundle&#34;&gt;Configurando o StofDoctrineExtensionsBundle&lt;/h2&gt;

&lt;p&gt;A primeira configura√ß√£o que devemos fazer, √© registrar o novo bundle instalado, para isso entre no AppKernel, caminho: app/AppKernel.php&lt;/p&gt;

&lt;p&gt;Adicione a linha abaixo no registro de bundles:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;new Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle(),
&lt;/pre&gt;

&lt;p&gt;Veja na linha 17:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class AppKernel extends Kernel 
{ 
    public function registerBundles() 
    { 
        $bundles = array( 
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(), 
            new Symfony\Bundle\SecurityBundle\SecurityBundle(), 
            new Symfony\Bundle\TwigBundle\TwigBundle(), 
            new Symfony\Bundle\MonologBundle\MonologBundle(), 
            new Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle(), 
            new Symfony\Bundle\AsseticBundle\AsseticBundle(), 
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(), 
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(), 
            new Tableless\CoreBundle\TablelessCoreBundle(), 
            new Tableless\ModelBundle\TablelessModelBundle(), 
        new Knp\Bundle\PaginatorBundle\KnpPaginatorBundle(),
        new Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle(),
        );

...

&lt;/pre&gt;

&lt;p&gt;Pronto, o StofDoctrineExtensionsBundle est√° registrado.&lt;/p&gt;

&lt;p&gt;Agora vamos fazer as configura√ß√µes no arquivo config.yml, caminho: app/config/config.yml&lt;/p&gt;

&lt;p&gt;No final do arquivo adicione as configura√ß√µes abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;stof_doctrine_extensions:
    orm:
        default:
            sluggable: true
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-a-entidade-post&#34;&gt;Configurando a entidade Post&lt;/h2&gt;

&lt;p&gt;Temos que configurar nossa entidade post, para que a mesma receba os slugs. Entre na entidade post, caminho: src/Tableless/ModelBundle/Entity/Post.php&lt;/p&gt;

&lt;p&gt;Vamos dar um use em Annotation, e apelid√°-la de Gedmo veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Gedmo\Mapping\Annotation as Gedmo;
&lt;/pre&gt;

&lt;p&gt;Agora vamos criar uma propriedade privada chamada slug, com as suas annotations correspondentes, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
     * @var string
     *
     * @Gedmo\Slug(fields={&#34;title&#34;}, unique=false)
     * @ORM\Column(length=255)
     */
     private $slug;

...

&lt;/pre&gt;

&lt;p&gt;Temos que gerar os getters e setters, para isso vamos entrar no terminal e digitar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:entities TablelessModelBundle:Post
&lt;/pre&gt;

&lt;p&gt;Pronto, em nossa entidade Post, temos os getters e setters, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
     * Set slug
     *
     * @param string $slug
     *
     * @return Post
     */
    public function setSlug($slug)
    {
        $this-&amp;gt;slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this-&amp;gt;slug;
    }

...
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-o-banco-de-dados&#34;&gt;Configurando o Banco de Dados&lt;/h2&gt;

&lt;p&gt;Depois de nossa entidade configurada, temos que atualizar o banco de dados, por√©m se tivermos posts j√° criados, ocorrer√° um erro em nosso blog. Caso n√£o tenha nenhum post escrito poder√° rodar o comando abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:update ‚Äìforce
&lt;/pre&gt;

&lt;p&gt;Caso tenha escrito algum post para exemplo, como no meu caso, vamos excluir o banco de dados, e cri√° lo novamente. Entre no terminal e digite:&lt;/p&gt;

&lt;p&gt;Excluindo o banco de dados:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$ php app/console doctrine:database:drop --force
&lt;/pre&gt;

&lt;p&gt;Criando o banco de dados novamente:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:database:create
&lt;/pre&gt;

&lt;p&gt;Criando as tabelas:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:create
&lt;/pre&gt;

&lt;p&gt;Obs: Caso tenha posts escritos, e n√£o queria excluir o banco de dados, poder√° apenas atualiz√°-lo, por√©m ter√° que adicionar manualmente, slug por slug em cada post no banco de dados, sen√£o ocorrer√° erro na aplica√ß√£o.&lt;/p&gt;

&lt;p&gt;Veja a estrutura do banco de dados:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/01.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/01.png&#34; alt=&#34;Banco de dados&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-48547&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-controller&#34;&gt;Configurando o Controller&lt;/h2&gt;

&lt;p&gt;Depois de termos feito as configura√ß√µes citadas acima, vamos configurar nosso controller, para isso entre no IndexControlerController, caminho: src/Tableless/CoreBundle/Controller/IndexControlerController.php&lt;/p&gt;

&lt;p&gt;No nosso m√©todo showAction, estamos passando por par√¢metro o $id, no momento n√£o queremos mais buscar nossos posts pelo id, e sim pelo slug, vamos alterar:&lt;/p&gt;

&lt;p&gt;de:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;public function showAction($id)
&lt;/pre&gt;

&lt;p&gt;para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;public function showAction($slug)
&lt;/pre&gt;

&lt;p&gt;Temos que mudar tamb√©m a annotation da rota, veja:&lt;/p&gt;

&lt;p&gt;de:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;* @Route(&#34;/show/{id}&#34;, name=&#34;show&#34;)
&lt;/pre&gt;

&lt;p&gt;para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;* @Route(&#34;/show/{slug}&#34;, name=&#34;show&#34;)
&lt;/pre&gt;

&lt;p&gt;Estamos passando para a vari√°vel $post, o m√©todo find, e recuperando o id, vamos mudar o find para findOneBy e passar um array de slug, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

$post = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findOneBy([
            &#39;slug&#39; =&amp;gt; $slug
        ]);

...

&lt;/pre&gt;

&lt;p&gt;Veja o m√©todo showAction pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /**
     * @Route(&#34;/post/{slug}&#34;, name=&#34;show&#34;)
     * @Template()
     */
    public function showAction($slug)
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $post = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findOneBy([
            &#39;slug&#39; =&amp;gt; $slug
        ]);

        if (!$post) {
            throw $this-&amp;gt;createNotFoundException(&#39;O post n√£o existe! Volte para home!&#39;);
        }

        return [
            &#39;post&#39; =&amp;gt; $post,
        ];
    }
 
    ...
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-o-index&#34;&gt;Configurando o index&lt;/h2&gt;

&lt;p&gt;Em nossa index, estamos passando os links para que os posts sejam buscados pelo id, por√©m temos que alter√°- los para que possamos buscar os posts pelo slug.&lt;/p&gt;

&lt;p&gt;Entre no index.html.twig, caminho: src/Tableless/CoreBundle/Resources/views/IndexController/Index.html.twig&lt;/p&gt;

&lt;p&gt;Vamos alterar os links:&lt;/p&gt;

&lt;p&gt;No meu caso a linha 21, 29 e 35:&lt;/p&gt;

&lt;p&gt;de:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;para:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { slug: post.slug }) }}&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Testando nossa aplica√ß√£o:&lt;/p&gt;

&lt;p&gt;Caso tenham seguido o tutorial e exclu√≠do o bando de dados, que foi criado novamente, como no meu caso. Antes de criarmos um post, temos que criar os autores novamente, depois sim criarmos os posts. No meu caso vou criar apena um post para exemplo.&lt;/p&gt;

&lt;p&gt;Depois do post criado, click no link e observe a url, ver√° o slug, que em nosso caso √© o slug do titulo, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/02.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/02.png&#34; alt=&#34;Urls&#34; width=&#34;750&#34; height=&#34;50&#34; class=&#34;alignnone size-full wp-image-48548&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;Pronto, nosso simples projeto est√° retornando o slug dos post em nossa url.&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;instala√ß√£o&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì Instala√ß√£o&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;parte 02&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;parte 03&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;parte 04&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; title=&#34;parte 05&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; title=&#34;parte 06&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-07/&#34; title=&#34;parte 07&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 07&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-08/&#34; title=&#34;parte 08&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 08&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto¬†encontra-se no &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;github do projeto&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 ‚Äì Parte 08</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-08/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-08/</guid>
      <description>

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-07/&#34; title=&#34;Parte 07&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, criamos um upload de imagens para servirem de capa para nossos posts, agora vamos instalar e configurar um Bundle, disponibilizado pela comunidade, para fazer a pagina√ß√£o de nossa p√°gina index. Para isso temos que instalar o Knp Paginator em nossa aplica√ß√£o.&lt;/p&gt;

&lt;h2 id=&#34;instala√ß√£o-do-knp-paginator&#34;&gt;Instala√ß√£o do Knp Paginator&lt;/h2&gt;

&lt;p&gt;Para instalar o Knp Paginator, temos que adicion√°-lo em nosso composer.json. Abra o arquivo composer.json e adicione a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&#34;knplabs/knp-paginator-bundle&#34;: &#34;2.4.*@dev&#34;
&lt;/pre&gt;

&lt;p&gt;Caso n√£o o conhe√ßa, ou tenha d√∫vidas, leia este post (&lt;a href=&#34;http://tableless.com.br/composer-um-pouco-alem-basico/&#34; title=&#34;Composer&#34; target=&#34;_blank&#34;&gt;Composer para iniciantes&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Depois de adicionado o Knp Paginator no composer, vamos instal√°- lo. Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ composer update
&lt;/pre&gt;

&lt;p&gt;Ap√≥s o Download, o Knp Paginator est√° instalado em nossa aplica√ß√£o.&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-knp-paginator&#34;&gt;Configurando o Knp Paginator&lt;/h2&gt;

&lt;p&gt;A primeira configura√ß√£o que devemos fazer, √© registrar o novo bundle instalado, para isso entre no AppKernel, caminho: app/AppKernel.php&lt;/p&gt;

&lt;p&gt;Adicione a linha abaixo no registro de bundles:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;new Knp\Bundle\PaginatorBundle\KnpPaginatorBundle(),
&lt;/pre&gt;

&lt;p&gt;Veja na linha 16:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Symfony\Bundle\SecurityBundle\SecurityBundle(),
            new Symfony\Bundle\TwigBundle\TwigBundle(),
            new Symfony\Bundle\MonologBundle\MonologBundle(),
            new Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle(),
            new Symfony\Bundle\AsseticBundle\AsseticBundle(),
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(),
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(),
            new Tableless\CoreBundle\TablelessCoreBundle(),
            new Tableless\ModelBundle\TablelessModelBundle(),
        new Knp\Bundle\PaginatorBundle\KnpPaginatorBundle(),
        );
...
&lt;/pre&gt;

&lt;p&gt;Pronto o Knp Paginator est√° registrado.&lt;/p&gt;

&lt;p&gt;Agora vamos fazer as configura√ß√µes padr√µes no Knp, para isso entre no arquivo config.yml, caminho: app/config/config.yml&lt;/p&gt;

&lt;p&gt;No final do arquivo adicione as configura√ß√µes abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-yml&#34;&gt;knp_paginator:
    page_range: 5                      # default page range used in pagination control
    default_options:
        page_name: page                # page query parameter name
        sort_field_name: sort          # sort field query parameter name
        sort_direction_name: direction # sort direction query parameter name
        distinct: true                 # ensure distinct results, useful when ORM queries are using GROUP BY statements
    template:
        pagination: KnpPaginatorBundle:Pagination:sliding.html.twig     # sliding pagination controls template
        sortable: KnpPaginatorBundle:Pagination:sortable_link.html.twig # sort link template
&lt;/pre&gt;

&lt;p&gt;Essas configura√ß√µes foram tiradas da &lt;a href=&#34;https://github.com/KnpLabs/KnpPaginatorBundle#configuration-example&#34; title=&#34;Documenta√ß√£o Knp Paginator&#34; target=&#34;_blank&#34;&gt;documenta√ß√£o do Knp Paginator&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-controller&#34;&gt;Configurando o Controller&lt;/h2&gt;

&lt;p&gt;Depois de termos feito as configura√ß√µes de instala√ß√£o do Knp Paginator, vamos configurar nosso controller, para isso entre no IndexControlerController, caminho: src/Tableless/CoreBundle/Controller/IndexControlerController.php&lt;/p&gt;

&lt;p&gt;Primeiramente para pegar o n√∫mero de p√°ginas, de acordo com a quantidade de posts temos que usar o request do symfony, ent√£o vamos dar um use em Request, veja na linha 8:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\CoreBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Symfony\Component\HttpFoundation\Request;

...
&lt;/pre&gt;

&lt;p&gt;Em nossa indexAction temos que pegar a biblioteca do paginador, passar nosso posts, pegar as p√°ginas via request, e quantidade de posts que queremos por p√°ginas, e retorn√°- los em forma de array para que nossa view possa apresentar. Em meu caso vou usar apenas tr√™s posts por p√°gina.&lt;/p&gt;

&lt;p&gt;Veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
     * @Route(&#34;/&#34;, name=&#34;index&#34;)
     * @Template()
     */
    public function indexAction(Request $request)
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $posts = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findAllInOrder();

        /** @var  $paginator */
        $paginator  = $this-&amp;gt;get(&#39;knp_paginator&#39;);
        $pagination = $paginator-&amp;gt;paginate($posts, $request-&amp;gt;query-&amp;gt;get(&#39;page&#39;, 1), 3);

        return [
            &#39;pagination&#39; =&amp;gt; $pagination,
        ];
    }

‚Ä¶
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-a-view&#34;&gt;Configurando a View&lt;/h2&gt;

&lt;p&gt;Nosso controller est√° configurado, agora temos que configurar nossa view, para que a mesma apresente os posts, com a pagina√ß√£o.&lt;/p&gt;

&lt;p&gt;Entre na view index.html.twig, caminho: src/Tableless/CoreBundle/Resources/views/IndexController/index.html.twig&lt;/p&gt;

&lt;p&gt;Em nossa index, temos um for, que est√° recebendo a vari√°vel posts, vamos trocar a vari√°vel posts por pagination, que foi a vari√°vel que passamos em nosso controller, veja:&lt;/p&gt;

&lt;p&gt;de:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{% for post in posts %}
&lt;/pre&gt;

&lt;p&gt;troque por:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{% for post in pagination %}
&lt;/pre&gt;

&lt;p&gt;E onde queremos que nossa pagina√ß√£o fique, vamos colocar o c√≥digo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{{ knp_pagination_render(pagination) }}
&lt;/pre&gt;

&lt;p&gt;Veja nossa index.html.twig pronta&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{% extends &#34;::base.html.twig&#34; %}

{% block title %}Simples Blog{% endblock %}

{% block content %}

    &amp;lt;div class=&#34;container&#34;&amp;gt;

        &amp;lt;div class=&#34;row&#34;&amp;gt;

            {{ knp_pagination_render(pagination) }}

            &amp;lt;div class=&#34;col-lg-12&#34;&amp;gt;


            {% for post in pagination %}

                &amp;lt;article class=&#34;col-lg-4&#34;&amp;gt;

                    &amp;lt;div class=&#34;thumbnail&#34;&amp;gt;

                        &amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;

                            &amp;lt;img class=&#34;img-responsive&#34; src=&#34;{{ asset(post.getCoverWeb) }}&#34; alt=&#34;{{ post.cover }}&#34; title=&#34;{{ post.cover }}&#34;/&amp;gt;

                        &amp;lt;/a&amp;gt;

                        &amp;lt;div class=&#34;caption&#34;&amp;gt;

                            &amp;lt;h3&amp;gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;

                            &amp;lt;p&amp;gt;Escrito por: {{ post.author.name }}&amp;lt;/p&amp;gt;

                            &amp;lt;p&amp;gt;{{ post.content|slice(0, 45) }} ...&amp;lt;/p&amp;gt;

                            &amp;lt;p&amp;gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;Leia mais...&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

                        &amp;lt;/div&amp;gt;

                    &amp;lt;/div&amp;gt;

                &amp;lt;/article&amp;gt;

            {% endfor %}

        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
        {{ knp_pagination_render(pagination) }}

    &amp;lt;/div&amp;gt;

{% endblock %}

&lt;/pre&gt;

&lt;p&gt;Rode o servidor:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console server:run
&lt;/pre&gt;

&lt;p&gt;Entre na url:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000&#34;&gt;http://127.0.0.1:8000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Veja a imagem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/011.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/011.png&#34; alt=&#34;Pagina√ß√£o&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-48300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;estilizando-a-pagina√ß√£o&#34;&gt;Estilizando a pagina√ß√£o&lt;/h2&gt;

&lt;p&gt;Podemos perceber, que a pagina√ß√£o est√° sem estiliza√ß√£o, por√©m como estamos utilizando o bootstrap, vamos entrar no arquivo config.yml, caminho: app/config/config.yml&lt;/p&gt;

&lt;p&gt;E vamos alterar o pagination da tamplete do knp_paginator&lt;/p&gt;

&lt;p&gt;de:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;pagination: KnpPaginatorBundle:Pagination:sliding.html.twig
&lt;/pre&gt;

&lt;p&gt;para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;pagination: KnpPaginatorBundle:Pagination:twitter_bootstrap_v3_pagination.html.twig
&lt;/pre&gt;

&lt;p&gt;Atualize a p√°gina, e pronto, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/021.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/021.png&#34; alt=&#34;Pagina√ß√£o estilizada&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-48301&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;Pronto, nosso simples projeto est√° fazendo a pagina√ß√£o de posts, no pr√≥ximo tutorial vamos configurar outro Bundle, onde faremos o slug para nossos posts, para que nossas urls, fiquem um pouco mais amig√°veis.&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;part 01&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì Instala√ß√£o&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;parte 02&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;parte 03&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;parte 04&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; title=&#34;parte 05&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; title=&#34;parte 06&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-07/&#34; title=&#34;parte 07&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 07&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto¬†encontra-se no &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;GitHub do projeto&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 ‚Äì Parte 07</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-07/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-07/</guid>
      <description>

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; title=&#34;Iniciando com Symfony&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, estilizamos nossas p√°ginas, index e show, e inclu√≠mos um imagem para apresentar nossos posts no index, por√©m colocamos esta imagem pelo c√≥digo fonte, agora vamos fazer algumas configura√ß√µes, para que, na cria√ß√£o dos posts, tenha a op√ß√£o de fazer o upload de uma imagem, para ser apresentada como capa de nossos posts.&lt;/p&gt;

&lt;h2 id=&#34;configurando-a-entidade-post&#34;&gt;Configurando a entidade Post&lt;/h2&gt;

&lt;p&gt;Para criarmos um upload de imagem, vamos usar o componente http-foundation do Symfony, e usar sua classe UploadedFile em nossa entidade Post.&lt;/p&gt;

&lt;p&gt;Para isso, vamos entrar em nossa entidade Post, caminho: src/Tableless/ModelBundle/Entity/Post.php.&lt;/p&gt;

&lt;p&gt;Com a entidade Post aberta vamos dar um use em UploadedFile, veja na linha 7:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 
use Symfony\Component\HttpFoundation\File\UploadedFile; 


/** 
 * Post 
 * 
 * @ORM\Table(name=&#34;post&#34;)
‚Ä¶

&lt;/pre&gt;

&lt;p&gt;Precisamos criar dois atributos privados, $cover, e $file , e inserir as annotations correspondentes, o atributo $cover, receber√° o nome da imagem, e o $file o aquivo com um limite de tamanho, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;cover&#34;, type=&#34;string&#34;, length=255, nullable=true) 
     */ 
    private $cover; 
    
    /** 
     * @Assert\File(maxSize=&#34;1000000&#34;) 
     */ 
    private $file;

    ...
&lt;/pre&gt;

&lt;p&gt;Vamos fazer os Getters and Setters desses atributos.&lt;/p&gt;

&lt;p&gt;O setFile receber√° um par√¢metro $file, esse par√¢metro ser√° do tipo UploadedFile, e caso n√£o passamos uma imagem, poder√° ser nulo, veja os getters and setters criados:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /** 
     * Get cover 
     * 
     * @return string 
     */ 
    public function getCover() 
    { 
        return $this-&amp;gt;cover; 
    } 

    /** 
     * Set cover 
     * 
     * @param string $cover 
     * @return Image 
     */ 
    public function setCover($cover) 
    { 
        $this-&amp;gt;cover = $cover; 
    } 

    /** 
     * Get file. 
     * 
     * @return UploadedFile 
     */ 
    public function getFile() 
    { 
        return $this-&amp;gt;file; 
    } 

    /** 
     * Set file. 
     * 
     * @param UploadedFile $file 
     */ 
    public function setFile(UploadedFile $file = null) 
    { 
        $this-&amp;gt;file = $file; 
    }

    ...
&lt;/pre&gt;

&lt;p&gt;Precisamos obter o caminho relativo do upload, ou seja, a pasta para onde as imagens ser√£o enviadas; para isso vamos criar o m√©todo protegido getUploadPath(), que nos retornar√° essa pasta. Veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /** 
     * Relative path. 
     * Get web path to upload directory. 
     * 
     * @return string 
     */ 
    protected function getUploadPath() 
    { 
        return &#39;uploads/covers&#39;; 
    }

    ...

&lt;/pre&gt;

&lt;p&gt;Temos que obter o caminho absoluto, para fazer o upload de nossas imagens, que ficar√° na pasta web, para isso vamos criar o m√©todo protegido getUploadAbsolutePath(), que nos retornar√° o caminho absoluto, e para chegarmos na pasta &amp;#8220;uploads/covers&amp;#8221;, vamos concatenar com o m√©todo getUploadPath() criado acima, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /** 
     * Absolute path. 
     * Get absolute path to upload directory. 
     * 
     * @return string 
     */ 
    protected function getUploadAbsolutePath() 
    { 
        return __DIR__ . &#39;/../../../../web/&#39; . $this-&amp;gt;getUploadPath(); 
    }

    ...

&lt;/pre&gt;

&lt;p&gt;Agora precisamos apresentar o caminho de nossas imagens para as views, vamos criar o m√©todo p√∫blico getCoverWeb(), caso tenhamos uma imagem, ou seja, caso a imagem n√£o seja nula, apresentamos a imagem nas views, para isso usaremos o m√©todo getUploadPath(), concatenado com o nome de nossa imagem, ou seja o m√©todo getCover(), veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /** 
     * Relative path. 
     * Get web path to a cover. 
     * 
     * @return null|string 
     */ 
    public function getCoverWeb() 
    { 
        return null === $this-&amp;gt;getCover() 
            ? null 
            : $this-&amp;gt;getUploadPath() . &#39;/&#39; . $this-&amp;gt;getCover(); 
    }

    ...

&lt;/pre&gt;

&lt;p&gt;Podemos precisar do caminho absoluto de nossa imagem, para isso vamos criar o m√©todo getCoverAbsolute(), para obtermos esse caminho quando precisarmos, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /** 
     * Get path on disk to a cover. 
     * 
     * @return null|string 
     *   Absolute path. 
     */ 
    public function getCoverAbsolute() 
    { 
        return null === $this-&amp;gt;getCover() 
            ? null 
            : $this-&amp;gt;getUploadAbsolutePath() . &#39;/&#39; . $this-&amp;gt;getCover(); 
    }

    ...
&lt;/pre&gt;

&lt;p&gt;Agora temos que criar um m√©todo que far√° o upload da imagem, para isso criaremos um m√©todo como nome upload(), caso a imagem n√£o seja nula, ele far√° o upload usando alguns m√©todos prontos da classe UploadedFile, para mover a imagens, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;... 
  
    /** 
     * Upload a cover file. 
     */ 
    public function upload() 
    { 
        if (null === $this-&amp;gt;getFile()) { 
            return; 
        } 
        $filename = $this-&amp;gt;getFile()-&amp;gt;getClientOriginalName(); 
        $this-&amp;gt;getFile()-&amp;gt;move($this-&amp;gt;getUploadAbsolutePath(), $filename); 
        $this-&amp;gt;setCover($filename); 
        $this-&amp;gt;setFile(); 
    }


    ...

&lt;/pre&gt;

&lt;p&gt;Pronto, nossa entidade Post, agora est√° recebendo um upload de imagem.&lt;/p&gt;

&lt;p&gt;Veja o entidade Post pronta:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\ModelBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\HttpFoundation\File\UploadedFile;


/**
 * Post
 *
 * @ORM\Table(name=&#34;post&#34;)
 * @ORM\Entity(repositoryClass=&#34;Tableless\ModelBundle\Repository\PostRepository&#34;)
 */
class Post extends Timestampable
{
    /**
     * @var integer
     *
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;)
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name=&#34;title&#34;, type=&#34;string&#34;, length=255)
     * @Assert\NotBlank
     */
    private $title;

    /**
     * @var string
     *
     * @ORM\Column(name=&#34;content&#34;, type=&#34;text&#34;)
     * @Assert\NotBlank
     */
    private $content;

    /**
     * @var Author
     *
     * @ORM\ManyToOne(targetEntity=&#34;Author&#34;, inversedBy=&#34;posts&#34;)
     * @ORM\JoinColumn(name=&#34;author_id&#34;, referencedColumnName=&#34;id&#34;, nullable=false)
     * @Assert\NotBlank
     */
    private $author;

    /**
     * @var string
     *
     * @ORM\Column(name=&#34;cover&#34;, type=&#34;string&#34;, length=255, nullable=true)
     */
    private $cover;

    /**
     * @Assert\File(maxSize=&#34;1000000&#34;)
     */
    private $file;


    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this-&amp;gt;id;
    }

    /**
     * Set title
     *
     * @param string $title
     * @return Post
     */
    public function setTitle($title)
    {
        $this-&amp;gt;title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string 
     */
    public function getTitle()
    {
        return $this-&amp;gt;title;
    }

    /**
     * Set content
     *
     * @param string $content
     * @return Post
     */
    public function setContent($content)
    {
        $this-&amp;gt;content = $content;

        return $this;
    }

    /**
     * Get content
     *
     * @return string 
     */
    public function getContent()
    {
        return $this-&amp;gt;content;
    }

    /**
     * Set author
     *
     * @param \Tableless\ModelBundle\Entity\Author $author
     * @return Post
     */
    public function setAuthor(\Tableless\ModelBundle\Entity\Author $author)
    {
        $this-&amp;gt;author = $author;

        return $this;
    }

    /**
     * Get author
     *
     * @return \Tableless\ModelBundle\Entity\Author 
     */
    public function getAuthor()
    {
        return $this-&amp;gt;author;
    }

    // m√©todos criados

    /**
     * Get cover
     *
     * @return string
     */
    public function getCover()
    {
        return $this-&amp;gt;cover;
    }


    /**
     * Set cover
     *
     * @param string $cover
     * @return Image
     */
    public function setCover($cover)
    {
        $this-&amp;gt;cover = $cover;
    }

    /**
     * Get file.
     *
     * @return UploadedFile
     */
    public function getFile()
    {
        return $this-&amp;gt;file;
    }

    /**
     * Sets file.
     *
     * @param UploadedFile $file
     */
    public function setFile(UploadedFile $file = null)
    {
        $this-&amp;gt;file = $file;
    }

    /**
     * Relative path.
     * Get web path to upload directory.
     *
     * @return string
     */
    protected function getUploadPath()
    {
        return &#39;uploads/covers&#39;;
    }

    /**
     * Absolute path.
     * Get absolute path to upload directory.
     *
     * @return string
     */
    protected function getUploadAbsolutePath()
    {
        return __DIR__ . &#39;/../../../../web/&#39; . $this-&amp;gt;getUploadPath();
    }

    /**
     * Relative path.
     * Get web path to a cover.
     *
     * @return null|string
     */
    public function getCoverWeb()
    {
        return null === $this-&amp;gt;getCover()
            ? null
            : $this-&amp;gt;getUploadPath() . &#39;/&#39; . $this-&amp;gt;getCover();
    }

    /**
     * Get path on disk to a cover.
     *
     * @return null|string
     *   Absolute path.
     */
    public function getCoverAbsolute()
    {
        return null === $this-&amp;gt;getCover()
            ? null
            : $this-&amp;gt;getUploadAbsolutePath() . &#39;/&#39; . $this-&amp;gt;getCover();
    }

    /**
     * Upload a cover file.
     */
    public function upload()
    {
        if (null === $this-&amp;gt;getFile()) {
            return;
        }
        $filename = $this-&amp;gt;getFile()-&amp;gt;getClientOriginalName();
        $this-&amp;gt;getFile()-&amp;gt;move($this-&amp;gt;getUploadAbsolutePath(), $filename);
        $this-&amp;gt;setCover($filename);
        $this-&amp;gt;setFile();
    }
}
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-o-controller&#34;&gt;Configurando o controller&lt;/h2&gt;

&lt;p&gt;Para que nossos formul√°rios de posts tenham acesso ao upload, temos que configurar o controller PostController.&lt;/p&gt;

&lt;p&gt;Entre no PostController, caminho: src/Tableless/CoreBundle/Controller/PostController.php, e no m√©todo createAction, insira o c√≥digo $entity-&amp;gt;upload(); veja na linha 15:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * Creates a new Post entity. 
     * 
     * @Route(&#34;/&#34;, name=&#34;post_create&#34;) 
     * @Method(&#34;POST&#34;) 
     * @Template(&#34;TablelessCoreBundle:Post:new.html.twig&#34;) 
     */ 
    public function createAction(Request $request) 
    { 
        $entity = new Post(); 
        $form = $this-&amp;gt;createCreateForm($entity); 
        $form-&amp;gt;handleRequest($request); 

        if ($form-&amp;gt;isValid()) { 
            $entity-&amp;gt;upload(); 
            $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager(); 
            $em-&amp;gt;persist($entity); 
            $em-&amp;gt;flush(); 

            return $this-&amp;gt;redirect($this-&amp;gt;generateUrl(&#39;post_show&#39;, array(&#39;id&#39; =&amp;gt; $entity-&amp;gt;getId()))); 
        } 

        return array( 
            &#39;entity&#39; =&amp;gt; $entity, 
            &#39;form&#39;   =&amp;gt; $form-&amp;gt;createView(), 
        ); 
    }
&lt;/pre&gt;

&lt;p&gt;Temos que fazer o mesmo procedimento com o m√©todo updateAction na linha 23, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * Edits an existing Post entity. 
     * 
     * @Route(&#34;/{id}&#34;, name=&#34;post_update&#34;) 
     * @Method(&#34;PUT&#34;) 
     * @Template(&#34;TablelessModelBundle:Post:edit.html.twig&#34;) 
     */ 
    public function updateAction(Request $request, $id) 
    { 
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager(); 

        $entity = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;find($id); 

        if (!$entity) { 
            throw $this-&amp;gt;createNotFoundException(&#39;Unable to find Post entity.&#39;); 
        } 

        $deleteForm = $this-&amp;gt;createDeleteForm($id); 
        $editForm = $this-&amp;gt;createEditForm($entity); 
        $editForm-&amp;gt;handleRequest($request); 

        if ($editForm-&amp;gt;isValid()) { 
            $entity-&amp;gt;upload(); 
            $em-&amp;gt;flush(); 

            return $this-&amp;gt;redirect($this-&amp;gt;generateUrl(&#39;post_edit&#39;, array(&#39;id&#39; =&amp;gt; $id))); 
        } 

        return array( 
            &#39;entity&#39;      =&amp;gt; $entity, 
            &#39;edit_form&#39;   =&amp;gt; $editForm-&amp;gt;createView(), 
            &#39;delete_form&#39; =&amp;gt; $deleteForm-&amp;gt;createView(), 
        ); 
    } 

&lt;/pre&gt;

&lt;h2 id=&#34;configurando-os-formul√°rios&#34;&gt;Configurando os formul√°rios&lt;/h2&gt;

&lt;p&gt;Pronto, nossa entidade e controller de posts, est√£o configurados para receberem o upload, por√©m temos que configurar nossos formul√°rios. Entre no PostType.php, para fazermos as configura√ß√µes necess√°rias, caminho: src/Tableless/ModelBundle/Form/PostType, e no m√©todo buildForm adicione o &amp;#8216;file&amp;#8217;, veja na linha 10.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @param FormBuilderInterface $builder 
     * @param array $options 
     */ 
    public function buildForm(FormBuilderInterface $builder, array $options) 
    { 
        $builder 
            -&amp;gt;add(&#39;title&#39;) 
            -&amp;gt;add(&#39;content&#39;) 
            -&amp;gt;add(&#39;file&#39;) 
            -&amp;gt;add(&#39;author&#39;) 
        ; 
    }
&lt;/pre&gt;

&lt;h2 id=&#34;atualizando-o-banco-de-dados&#34;&gt;Atualizando o banco de dados&lt;/h2&gt;

&lt;p&gt;Para vermos a m√°gica acontecer, s√≥ precisamos, atualizar nosso banco, para isso entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:update --force 
&lt;/pre&gt;

&lt;p&gt;Pronto! Nosso upload de imagem, est√° pronto, veja a imagem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/01.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/01.png&#34; alt=&#34;Bot√£o de upload no formul√°rio no symfony&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-48201&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-as-views&#34;&gt;Configurando as views&lt;/h2&gt;

&lt;p&gt;Agora temos que configurar nossas views para que as mesmas apresentem as imagens. Entre na view index.html.twig, caminho: src/Tablesless/CoreBundle/Resources/views/IndexController/index.html.twig, mude a linha 21.&lt;/p&gt;

&lt;p&gt;mude de:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;img class=&#34;img-responsive&#34; src=&#34;{{ asset(&#39;logo-tableless.png&#39;) }}&#34; alt=&#34;img&#34; title=&#34;img&#34;/&amp;gt;
&lt;/pre&gt;

&lt;p&gt;para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;img class=&#34;img-responsive&#34; src=&#34;{{ asset(post.getCoverWeb) }}&#34; alt=&#34;{{ post.cover }}&#34; title=&#34;{{ post.cover }}&#34;/&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Vamos entrar em nossa view show.html.twig, caminho: caminho: src/Tablesless/CoreBundle/Resources/views/IndexController/show.html.twig, e vamos acrescentar a mesma linha acima do t√≠tulo, ou onde acharem melhor, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;article class=&#34;col-lg-12&#34; &amp;gt;

&amp;lt;img class=&#34;img-responsive&#34; src=&#34;{{ asset(post.getCoverWeb) }}&#34; alt=&#34;{{ post.cover }}&#34; title=&#34;{{ post.cover }}&#34;/&amp;gt;

&amp;lt;h1&amp;gt;{{ post.title }}&amp;lt;/h1&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Vamos fazer os testes, criando um novo post, e inserindo uma imagem.&lt;/p&gt;

&lt;p&gt;Observe a imagem na pasta web/uploads/cover.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/02.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/02.png&#34; alt=&#34;Pasta de upload no symfony&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-48205&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;Pronto, nosso simples projeto est√° fazendo upload de imagens para cada post, no pr√≥ximo tutorial vamos aprender a configurar um Bundle pronto, disponibilizado pela comunidade, onde faremos a pagina√ß√£o de resultados para nossa p√°gina index.&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;instala√ß√£o&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì Instala√ß√£o&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;parte 02&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;parte 03&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;parte 04&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; title=&#34;parte 05&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; title=&#34;parte 06&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto¬†encontra-se no &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;GitHub do projeto&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 ‚Äì Parte 06</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-06/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-06/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/capa.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/capa.png&#34; alt=&#34;Symfony e Twig&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47950&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; title=&#34;iniciando com symfony 2 - parte 05&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, configuramos nosso projeto e criamos nossas p√°ginas, home e show, por√©m as mesmas se encontram sem estiliza√ß√£o, neste tutorial, vamos apenas estruturar nossas p√°ginas de um modo simples e b√°sico, por√©m funcional. N√£o entrarei em detalhes sobre o Bootstrap, n√£o √© meu objetivo, por√©m para iniciantes, recomendo a &lt;a href=&#34;http://getbootstrap.com/css/&#34; title=&#34;Doc. Bootstrap&#34; target=&#34;_blank&#34;&gt;documenta√ß√£o&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sobre o Twig, falarei o b√°sico do b√°sico, somente o que vamos usar. Lembrando que ele j√° vem instalado e configurado no Symfony, por√©m podemos instal√°-lo separadamente &lt;a href=&#34;https://packagist.org/packages/twig/twig&#34; title=&#34;Pacote do Twig&#34; target=&#34;_blank&#34;&gt;via Composer&lt;/a&gt; e configur√°- lo em outros projetos, usando ou n√£o outros frameworks.&lt;/p&gt;

&lt;h2 id=&#34;instalando-e-configurando-o-twitter-bootstrap-no-symfony&#34;&gt;Instalando e configurando o Twitter Bootstrap no Symfony&lt;/h2&gt;

&lt;p&gt;Vamos iniciar com a configura√ß√£o do bootstrap.&lt;/p&gt;

&lt;p&gt;Temos algumas formas de instalar e configurar o arquivo css no symfony, em nosso caso vamos fazer uma configura√ß√£o simples apenas para a did√°tica, caso queiram se aprofundar mais no assunto, aconselho a &lt;a href=&#34;http://symfony.com/doc/current/cookbook/assetic/asset_management.html#including-css-stylesheets&#34; title=&#34;Assets no Symfony&#34; target=&#34;_blank&#34;&gt;documenta√ß√£o&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Primeiramente vamos criar uma pasta dentro da pasta Resource do bundle CoreBundle, caminho: src/Tableless/CoreBundle/Resouces, com o nome public, e dentro dessa nova pasta, vamos criar outra pasta com o nome css.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getbootstrap.com/getting-started/#download&#34; title=&#34;Download do bootstrap&#34; target=&#34;_blank&#34;&gt;Baixe o bootstrap&lt;/a&gt;, e copie o arquivo bootstrap.min.css para a pasta css/, veja a imagem abaixo para compara√ß√£o:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/011.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/011.png&#34; alt=&#34;Pasta para bootstrap&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47951&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caso queiram, podem usar o arquivo bootstrap.css, em nosso caso vamos usar o .min.css.&lt;/p&gt;

&lt;p&gt;Para que o bootstrap seja carregado vamos entrar no terminal, e digitar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console assets:install --symlink
&lt;/pre&gt;

&lt;p&gt;Desse forma estamos criando um link simb√≥lico do arquivo na pasta web, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/022.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/022.png&#34; alt=&#34;Link simb√≥lico&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47952&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora devemos carregar o aquivo bootstrap em nossa aplica√ß√£o. Vamos entrar no arquivo base.html.twig, caminho: app/Resources/views/base.html.twig, e carregar o bootstrap, no bloco stylesheets, veja na linha 7.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt; 
&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt; 
        &amp;lt;meta charset=&#34;UTF-8&#34; /&amp;gt;
        &amp;lt;title&amp;gt;{% block title %}Welcome!{% endblock %}&amp;lt;/title&amp;gt;
        {% block stylesheets %} 
                &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ asset(&#39;bundles/tablelesscore/css/bootstrap.min.css&#39;) }}&#34; /&amp;gt;
        {% endblock %} 
        &amp;lt;link rel=&#34;icon&#34; type=&#34;image/x-icon&#34; href=&#34;{{ asset(&#39;favicon.ico&#39;) }}&#34; /&amp;gt;
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
        {% block body %}{% endblock %} 
        {% block javascripts %}{% endblock %} 
   &amp;lt;/body&amp;gt; 
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;iniciando-com-twig&#34;&gt;Iniciando com Twig&lt;/h2&gt;

&lt;p&gt;Pronto, o bootstrap est√° instalado e configurado.&lt;/p&gt;

&lt;p&gt;Neste momento vou criar quatro posts em off, apenas para visualiza√ß√£o, recomendo que fa√ßam o mesmo, pois assim ficar√° f√°cil para estilizar.&lt;/p&gt;

&lt;p&gt;Vamos iniciar nossos trabalhos com o Twig.&lt;/p&gt;

&lt;p&gt;Ainda com o arquivo base.html.twig aberto, vamos fazer algumas configura√ß√µes.&lt;/p&gt;

&lt;p&gt;O twig trabalha com blocos, que podem ser herdados pelas templates filhas, em nosso caso vamos criar um bloco com o nome &amp;#8220;content&amp;#8221;, para que nossas templates possam herdar. Para criar um bloco √© bem simples, veja abaixo:&lt;/p&gt;

&lt;p&gt;Abre o bloco:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% block nome-do-bloco %} 
&lt;/pre&gt;

&lt;p&gt;Fecha o bloco:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Ok! Vamos criar nosso bloco, que ficar√° dentro de outro bloco j√° existente no arquivo base.html.twig, veja abaixo na linha 15.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;UTF-8&#34; /&amp;gt;
    &amp;lt;title&amp;gt;{% block title %}Welcome!{% endblock %}&amp;lt;/title&amp;gt;
{% block stylesheets %}
        &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ asset(&#39;bundles/tablelesscore/css/bootstrap.min.css&#39;) }}&#34; /&amp;gt;
    {% endblock %}
    &amp;lt;link rel=&#34;icon&#34; type=&#34;image/x-icon&#34; href=&#34;{{ asset(&#39;favicon.ico&#39;) }}&#34; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
{% block body %}

    {# Novo bloco criado #}
    {% block content %}{% endblock %}
    
{% endblock %}
{% block javascripts %}{% endblock %}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Agora para concluirmos esse arquivo, vamos estruturar o html, j√° incluindo as classes do bootstrap, veja abaixo o arquivo base.html.twig pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt; 
&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt; 
        &amp;lt;meta charset=&#34;UTF-8&#34; /&amp;gt;
        &amp;lt;title&amp;gt;{% block title %}Welcome!{% endblock %}&amp;lt;/title&amp;gt; 
        {% block stylesheets %} 
                &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ asset(&#39;bundles/tablelesscore/css/bootstrap.min.css&#39;) }}&#34; /&amp;gt;
        {% endblock %} 
        &amp;lt;link rel=&#34;icon&#34; type=&#34;image/x-icon&#34; href=&#34;{{ asset(&#39;favicon.ico&#39;) }}&#34; /&amp;gt; 
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
        {% block body %} 
        &amp;lt;div class=&#34;container&#34;&amp;gt; 
            &amp;lt;header class=&#34;row&#34;&amp;gt; 
                &amp;lt;div class=&#34;col-lg-6&#34;&amp;gt; 
                    &amp;lt;h1&amp;gt;Simples Blog&amp;lt;/h1&amp;gt; 
                    &amp;lt;a href=&#34;#&#34; title=&#34;&#34;&amp;gt;Home&amp;lt;/a&amp;gt; | 
                    &amp;lt;a href=&#34;#&#34; title=&#34;&#34;&amp;gt;administra√ß√£o&amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt; 
            &amp;lt;/header&amp;gt; 
        {% block content %} 
        {% endblock %} 
            &amp;lt;footer class=&#34;col-lg-12&#34;&amp;gt; 
                &amp;lt;p&amp;gt;&amp;copy; 2015 Tableless - Todos os direitos reservados&amp;lt;/p&amp;gt; 
            &amp;lt;/footer&amp;gt;
        &amp;lt;/div&amp;gt; 

        {% endblock %} 
        {% block javascripts %}{% endblock %} 
    &amp;lt;body&amp;gt; 
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Podemos perceber que os links est√£o sem caminho, para passarmos um link no Symfony precisamos do nome de nossas rotas, e para pegar esses nomes, vamos entrar no terminal.&lt;/p&gt;

&lt;p&gt;Abra o terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console router:debug
&lt;/pre&gt;

&lt;p&gt;Vamos ter uma lista dos nomes de nossas rotas, a primeira que vamos usar √© a rota da home &amp;#8220;/&amp;#8221; , veja a imagem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/032.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/032.png&#34; alt=&#34;Rotas&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47953&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Percebemos que o nome dessa rota, est√° muito extenso, vamos mudar isso, deixando o nome dessa rota e da rota de visualiza√ß√£o do post, um pouco mais curto.&lt;/p&gt;

&lt;p&gt;Para isso, devemos entrar no controller indexController, caminho: src/Tableless/CoreBunde/ IndexControlerController.php&lt;/p&gt;

&lt;p&gt;Abra o arquivo, e nas annotations dos m√©todos indexAction e showAction, vamos colocar os nomes que queremos para nossas rotas. Exemplo: @Route(&amp;#8220;/&amp;#8221;, name=&amp;#8221;index&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Veja o exemplo na linha 2 e na linha 9 do c√≥digo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;/** 
     * @Route(&#34;/&#34;, name=&#34;index&#34;) 
     * @Template() 
     */ 
    public function indexAction() 
    .... 

    /** 
     * @Route(&#34;/show/{id}&#34;, name=&#34;show&#34;) 
     * @Template() 
     */ 
    public function showAction($id) 
    ...
&lt;/pre&gt;

&lt;p&gt;Agora nossas rotas est√£o com os nomes mais curtos.&lt;/p&gt;

&lt;p&gt;Para vermos novamente entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;$ php app/console router:debug
&lt;/pre&gt;

&lt;p&gt;Veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/042.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/042.png&#34; alt=&#34;Rotas&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47976&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto! Agora podemos inserir nossos links.&lt;/p&gt;

&lt;p&gt;Para pegarmos o link da home, digitamos: {{ path(&amp;#8216;index&amp;#8217;) }}, e para o link da administra√ß√£o vou pegar o link da lista de post.&lt;/p&gt;

&lt;p&gt;Veja o arquivo base.html.twig pronto, os links est√£o na linha 17 e 18.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt; 
&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt; 
        &amp;lt;meta charset=&#34;UTF-8&#34; /&amp;gt;
        &amp;lt;title&amp;gt;{% block title %}Welcome!{% endblock %}&amp;lt;/title&amp;gt; 
        {% block stylesheets %} 
                &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ asset(&#39;bundles/tablelesscore/css/bootstrap.min.css&#39;) }}&#34; /&amp;gt;
        {% endblock %} 
        &amp;lt;link rel=&#34;icon&#34; type=&#34;image/x-icon&#34; href=&#34;{{ asset(&#39;favicon.ico&#39;) }}&#34; /&amp;gt; 
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
        {% block body %} 
        &amp;lt;div class=&#34;container&#34;&amp;gt; 
            &amp;lt;header class=&#34;row&#34;&amp;gt; 
                &amp;lt;div class=&#34;col-lg-6&#34;&amp;gt; 
                    &amp;lt;h1&amp;gt;Simples Blog&amp;lt;/h1&amp;gt; 
                    &amp;lt;a href=&#34;{{ path(&#39;index&#39;) }}&#34; title=&#34;Home&#34;&amp;gt;Home&amp;lt;/a&amp;gt; | 
                    &amp;lt;a href=&#34;{{ path(&#39;post&#39;) }}&#34; title=&#34;Administra√ß√£o&#34;&amp;gt;administra√ß√£o&amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt; 
            &amp;lt;/header&amp;gt; 
        {% block content %} 
        {% endblock %} 
            &amp;lt;footer class=&#34;col-lg-12&#34;&amp;gt; 
                &amp;lt;p&amp;gt;&amp;copy; 2015 Tableless - Todos os direitos reservados&amp;lt;/p&amp;gt; 
            &amp;lt;/footer&amp;gt;
        &amp;lt;/div&amp;gt; 

        {% endblock %} 
        {% block javascripts %}{% endblock %} 
    &amp;lt;body&amp;gt; 
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;estruturando-e-estilizando-o-index&#34;&gt;Estruturando e estilizando o index&lt;/h2&gt;

&lt;p&gt;Nossa base est√° pronta, vamos agora para o arquivo index.html.twig, que √© o index de nosso blog.&lt;/p&gt;

&lt;p&gt;Caminho: src/Tableless/CoreBundle/Resources/views/IndexController/index.html.twig&lt;/p&gt;

&lt;p&gt;Abra o arquivo para que possamos estrutur√°- lo.&lt;/p&gt;

&lt;p&gt;Podemos perceber que na primeira linha, nosso arquivo est√° estendendo o arquivo base.html.twig, que acabamos de estruturar.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar vamos criar um t√≠tulo para nossa p√°gina.&lt;/p&gt;

&lt;p&gt;Para isso, digitamos o t√≠tulo que queremos dentro do bloco title.&lt;/p&gt;

&lt;p&gt;Para que nosso conte√∫do, posicione- se no lugar correto, vamos renomear o bloco body, para content, que criamos no arquivo base, o h1 e dump, vamos excluir, veja nosso arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% extends &#34;::base.html.twig&#34; %} 

{% block title %}Simples Blog{% endblock %} 

{% block content %} 
    
{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Nosso Controller IndexController est√° retornando um array de posts, atrav√©s do m√©todo indexAction, para recuperarmos esse array via Twig, devemos fazer um &amp;#8220;for&amp;#8221; para recuperar cada dado do post.&lt;/p&gt;

&lt;p&gt;Obs: Se tiv√©ssemos usando o php para recuperar esses dados, passar√≠amos um foreach, no caso do Twig para fazermos esse mesmo processo, usamos um for, veja abaixo o exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% for valor in array %}

{% endfor %}
&lt;/pre&gt;

&lt;p&gt;Para entender melhor o funcionamento do for, recomendo a &lt;a href=&#34;http://twig.sensiolabs.org/doc/tags/for.html&#34; title=&#34;twig for&#34; target=&#34;_blank&#34;&gt;documenta√ß√£o&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vamos entender melhor&lt;/p&gt;

&lt;p&gt;Nosso m√©todo indexAction, do controller indexController, est√° nos retornando um array, veja na linha 7.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;public function indexAction() 
    { 
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager(); 

        $posts = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findAllInOrder(); 

        return [ 
            &#39;posts&#39; =&amp;gt; $posts, 
        ]; 
    } 

&lt;/pre&gt;

&lt;p&gt;Para recuperarmos esses dados no twig, vamos fazer:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% for post in posts %}

    {{ post.title }}
    {{ post.author.name }}
    {{ post.content | slice(0, 45) }}

{% endfor %}
&lt;/pre&gt;

&lt;p&gt;Perceba que ao recuperarmos o post.content, que √© o conte√∫do do nosso post, vamos passar um &amp;#8220;slice&amp;#8221;, que serve para cortar o texto, come√ßando do 0 at√© 45 caracteres. Caso queiram mais de 45 caracteres, √© s√≥ aumentar esse valor.&lt;/p&gt;

&lt;p&gt;Tamb√©m, temos que estruturar nossa p√°gina com html, incluir as classes do bootstrap e criar os links. Em rela√ß√£o aos links, para acessarmos um post, temos que passar o &amp;#8220;id&amp;#8221; desse post no link.&lt;/p&gt;

&lt;p&gt;Vamos colocar uma imagem, escolham uma imagem, e coloque na pasta web, caminho: web/&lt;/p&gt;

&lt;p&gt;Para recuperarmos essa imagem, vamos usar o asset.&lt;/p&gt;

&lt;p&gt;Veja abaixo o exemplo do asset para imagem:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img src=&#34;{{ asset(&#39;imagem.png&#39;) }}&#34; /&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;Veja o index.html.twig pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% extends &#34;::base.html.twig&#34; %} 

{% block title %}Simples Blog{% endblock %} 

{% block content %} 

    &amp;lt;div class=&#34;container&#34;&amp;gt; 

        &amp;lt;div class=&#34;row&#34;&amp;gt; 
 
            &amp;lt;div class=&#34;col-lg-12&#34;&amp;gt;

                {% for post in posts %} 

                    &amp;lt;article class=&#34;col-lg-4&#34;&amp;gt;

                        &amp;lt;div class=&#34;thumbnail&#34;&amp;gt;

                            &amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;

                                &amp;lt;img class=&#34;img-responsive&#34; src=&#34;{{ asset(&#39;logo-tableless.png&#39;) }}&#34; alt=&#34;img&#34; title=&#34;img&#34;/&amp;gt;

                            &amp;lt;/a&amp;gt; 

                            &amp;lt;div class=&#34;caption&#34;&amp;gt; 

                                &amp;lt;h3&amp;gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt; 

                                &amp;lt;p&amp;gt;Escrito por: {{ post.author.name }}&amp;lt;/p&amp;gt; 

                                &amp;lt;p&amp;gt;{{ post.content|slice(0, 45) }} ...&amp;lt;/p&amp;gt;

                                &amp;lt;p&amp;gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;Leia mais...&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

                            &amp;lt;/div&amp;gt;

                        &amp;lt;/div&amp;gt; 

                    &amp;lt;/article&amp;gt;

                {% endfor %} 

            &amp;lt;/div&amp;gt;

        &amp;lt;/div&amp;gt; 

    &amp;lt;/div&amp;gt;

{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Vamos entrar no terminal, e subir nosso servidor.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console server:run
&lt;/pre&gt;

&lt;p&gt;Entre na url: &lt;a href=&#34;http://127.0.0.1:8000/&#34;&gt;http://127.0.0.1:8000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nossa home est√° pronto, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/051.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/051.png&#34; alt=&#34;blog&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47980&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;estruturando-e-estilizando-o-show&#34;&gt;Estruturando e estilizando o show&lt;/h2&gt;

&lt;p&gt;Vamos estruturar o show.html.twig, que √© respons√°vel pela visualiza√ß√£o de cada post.&lt;/p&gt;

&lt;p&gt;Abra o arquivo, caminho: src/Tableless/CoreBundle/Resources/views/IndexController/ show.html.twig, e vamos estrutur√° lo.&lt;/p&gt;

&lt;p&gt;Vamos colocar um t√≠tulo no bloco &amp;#8220;title&amp;#8221;, renomear o bloco body para content, fazer a estrutura√ß√£o com o html e passar as classes do bootstrap. Perceba que nesse caso n√£o precisamos fazer um &amp;#8220;for&amp;#8221; com o twig, pois estamos recebendo somente um array, ou seja, um post.&lt;/p&gt;

&lt;p&gt;Temos que dar uma aten√ß√£o para a data de cria√ß√£o, e a data de atualiza√ß√£o, n√£o estamos recebendo essas datas no formato correto. Para que possamos apresentar as datas, temos que passar um date() no twig, veja o exemplo abaixo&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{{ post.createdAt | date(&#39;d/m/Y - H:m:s&#39;) }}
&lt;/pre&gt;

&lt;p&gt;Veja o arquivo show.html.twig pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% extends &#34;::base.html.twig&#34; %} 

{% block title %}Blog - {{ post.title }}{% endblock %} 

{% block content %} 

&amp;lt;div class=&#34;container&#34;&amp;gt; 

    &amp;lt;div class=&#34;row&#34;&amp;gt; 

        &amp;lt;article class=&#34;col-lg-12&#34;&amp;gt; 

            &amp;lt;h1&amp;gt;{{ post.title }}&amp;lt;/h1&amp;gt; 

            &amp;lt;p&amp;gt;Escrito por: {{ post.author.name }}&amp;lt;/p&amp;gt;

            &amp;lt;p&amp;gt;Postado em: {{ post.createdAt | date(&#39;d/m/Y - H:m:s&#39;) }}&amp;lt;/p&amp;gt;

            &amp;lt;p&amp;gt;{{ post.content }}&amp;lt;/p&amp;gt; 

        &amp;lt;/article&amp;gt; 

    &amp;lt;/div&amp;gt; 
    
&amp;lt;/div&amp;gt; 

{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Imagem da p√°gina pronta:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/061.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/061.png&#34; alt=&#34;Show post&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47981&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;Nossa p√°gina de visualiza√ß√£o de post, e nossa home, est√° estruturada e estilizada, temos que fazer a parte administrativa, tanto a administra√ß√£o de post, quanto de autores. Vou fazer essa parte em off. Os arquivos, encontram- se no github, os caminhos s√£o:&lt;/p&gt;

&lt;p&gt;src/Tableless/CoreBundle/Resources/views/Author/&lt;/p&gt;

&lt;p&gt;src/Tableless/CoreBundle/Resources/views/Posts/&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;instala√ß√£o&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì Instala√ß√£o&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;pt 02&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;pt 3&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;pt 4&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; title=&#34;pt 5&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 ‚Äì parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;Github do projeto&#34; target=&#34;_blank&#34;&gt;encontra-se no GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 ‚Äì Parte 05</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-05/</link>
      <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-05/</guid>
      <description>

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;Iniciando com symfony2 - parte 4&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, criamos a entidade Author, e fizemos o relacionamento com os posts, neste tutorial vamos fazer as configura√ß√µes adequadas para que possamos deixar nossa aplica√ß√£o estruturada corretamente, e vamos criar e configurar a p√°gina index, onde os usu√°rios ter√£o acesso para visualizar e ler os posts.&lt;/p&gt;

&lt;h2 id=&#34;configurando&#34;&gt;Configurando&lt;/h2&gt;

&lt;p&gt;Vamos come√ßar com as configura√ß√µes.&lt;/p&gt;

&lt;p&gt;Entrando no bundle CoreBundle, caminho: src/Tableless/CoreBundle, exclua a pasta Controller.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/021.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/021.png&#34; alt=&#34;Excluindo a pasta controller&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47743&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ainda neste mesmo bundle vamos excluir a pasta view, caminho: src/Tableless/CoreBundle/Resources/view.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/031.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/031.png&#34; alt=&#34;Excluindo a pasta view&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47744&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos entrar no bundle ModelBundle, caminho: src/Tableless/ModelBundle.&lt;/p&gt;

&lt;p&gt;E vamos mover a pasta Controller desse bundle para o bundle CoreBundle&lt;/p&gt;

&lt;p&gt;Vamos mover tamb√©m a pasta view do ModelBundle para o bundle CoreBundle.&lt;/p&gt;

&lt;p&gt;Depois das mudan√ßas, nossa estrutura de pastas ficar√° como na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/041.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/041.png&#34; alt=&#34;Estrutura de pastas pronta&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47746&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-os-controllers&#34;&gt;Configurando os Controllers&lt;/h2&gt;

&lt;p&gt;Vamos continuar nossas configura√ß√µes, agora vamos alterar nossos controllers para que os mesmos fiquem de acordo com a estrutura de pasta atual.&lt;/p&gt;

&lt;p&gt;Primeiramente, vamos excluir a rota do ModelBundle, pois n√£o vamos us√°-la.&lt;/p&gt;

&lt;p&gt;Entre no arquivo app/config/routing.yml e exclua as linhas abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-yml&#34;&gt;tableless_model:
    resource: &#34;@TablelessModelBundle/Controller/&#34;
    type:     annotation
    prefix:   /
&lt;/pre&gt;

&lt;p&gt;Deixando somente a rota tableless_core como mostrado na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/05.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/05.png&#34; alt=&#34;Arquivo routing.yml&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47747&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos excluir o DefaultController.php, pois n√£o vamos usar esse controller.&lt;/p&gt;

&lt;p&gt;Abra o arquivo AuthorController.php, caminho: src/Tableless/CoreBundle/Controller/AuthorController.php&lt;/p&gt;

&lt;p&gt;Na linha 3, mude o namespace.&lt;/p&gt;

&lt;p&gt;De: Tableless\ModelBundle\Controller;&lt;/p&gt;

&lt;p&gt;Para: Tableless\CoreBundle\Controller;&lt;/p&gt;

&lt;p&gt;Na linha 43, mude a annotation:&lt;/p&gt;

&lt;p&gt;De: @Template(&amp;#8220;TablelessModelBundle:Author:new.html.twig&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Para: @Template(&amp;#8220;TablelessCoreBundle:Author:new.html.twig&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Agora vamos configurar o controller PostController, caminho: src/Tableless/CoreBundle/Controller/PostController.php, vamos fazer a mesma altera√ß√£o.&lt;/p&gt;

&lt;p&gt;Na linha 3, mude o namespace.&lt;/p&gt;

&lt;p&gt;De: Tableless\ModelBundle\Controller;&lt;/p&gt;

&lt;p&gt;Para: Tableless\CoreBundle\Controller;&lt;/p&gt;

&lt;p&gt;Na linha 43, mude a annotation:&lt;/p&gt;

&lt;p&gt;De: @Template(&amp;#8220;TablelessModelBundle:Post:new.html.twig&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Para: @Template(&amp;#8220;TablelessCoreBundle:Post:new.html.twig&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Para verificarmos se correu tudo bem, vamos fazer o teste.&lt;/p&gt;

&lt;p&gt;Rode o servidor&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ app/console server:run
&lt;/pre&gt;

&lt;p&gt;Entre nas urls:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/post/&#34;&gt;http://127.0.0.1:8000/post/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/author/&#34;&gt;http://127.0.0.1:8000/author/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se tudo foi configurado corretamente, nossa aplica√ß√£o voltar√° a funcionar perfeitamente, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/06.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/06.png&#34; alt=&#34;P√°gina index, e show&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47751&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;criando-um-controller&#34;&gt;Criando um Controller&lt;/h2&gt;

&lt;p&gt;Nesse momento vamos criar um index, para nossa aplica√ß√£o, para que seja nossa pagina principal, e possamos visualizar os posts de forma correta.&lt;/p&gt;

&lt;p&gt;Podemos criar o controller codificando, por√©m para efeito de did√°tica vamos criar atrav√©s do console.&lt;/p&gt;

&lt;p&gt;Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:controller
&lt;/pre&gt;

&lt;p&gt;Ao digitarmos o comando acima e darmos enter, entramos no assistente do console do Symfony e ele nos comunica: Primeiro, voc√™ precisa dar o nome do controlador que voc√™ deseja gerar. Voc√™ deve usar a nota√ß√£o de atalho como AcmeBlogBundle:Post&lt;/p&gt;

&lt;p&gt;Nesse momento digitamos:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Controller name: TablelessCoreBundle:IndexControler
&lt;/pre&gt;

&lt;p&gt;Ao darmos o nome do nosso controller e darmos enter, o assistente nos pergunta: Qual o formato que vamos configurar a nossa rota?&lt;/p&gt;

&lt;p&gt;E nos indica annotation, vamos deixar como est√°, e apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$ Routing format (php, xml, yml, annotation) [annotation]:
&lt;/pre&gt;

&lt;p&gt;A pr√≥xima pergunta √©:&lt;/p&gt;

&lt;p&gt;Qual o formato que vamos usar para template?&lt;/p&gt;

&lt;p&gt;Ele mesmo nos indica o twig. Apenas damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$ Template format (twig, php) [twig]:
&lt;/pre&gt;

&lt;p&gt;Ap√≥s o enter ele nos pede o nome de nossas a√ß√µes, que s√£o os m√©todos que vamos criar para o nosso controller.&lt;/p&gt;

&lt;p&gt;A primeira a√ß√£o (m√©todo) vamos chamar de indexAction, e damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New action name (press  to stop adding actions): indexAction
&lt;/pre&gt;

&lt;p&gt;O assistente nos pede a rota, vamos digitar ‚Äú/‚Äù e damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Action route [/index]: /
&lt;/pre&gt;

&lt;p&gt;Nos pergunta o caminho da nossa template, e ele nos indica um caminho, vamos deixar como est√° e apenas damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Templatename (optional) [TablelessCoreBundle:IndexControler:index.html.twig]:
&lt;/pre&gt;

&lt;p&gt;Novamente o assistente nos pede para darmos um nome para uma nova a√ß√£o (m√©todo), essa nova a√ß√£o far√° com que o post seja visualizado para a leitura, vamos dar o nome de showAction.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New action name (press  to stop adding actions): showAction
&lt;/pre&gt;

&lt;p&gt;O assistente nos pede a rota, e nos indica como ‚Äú/show‚Äù, vamos deixar como est√° e damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Action route [/show]:
&lt;/pre&gt;

&lt;p&gt;Nos pergunta sobre caminho da template, e ele nos indica um caminho, vamos deixar como est√° e apenas damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Templatename (optional) [TablelessCoreBundle:IndexControler:show.html.twig]:
&lt;/pre&gt;

&lt;p&gt;Ao darmos enter, entramos no modo de cria√ß√£o de uma nova a√ß√£o, por√©m n√£o queremos nenhuma outra a√ß√£o, ent√£o apenas damos um enter, para entrarmos no processo de finaliza√ß√£o.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New action name (press  to stop adding actions):
&lt;/pre&gt;

&lt;p&gt;Ao entramos no processo de finaliza√ß√£o o assistente nos pergunta se queremos confirmar a gera√ß√£o desse controller, ele nos indica sim, como queremos, apenas damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you confirm generation [yes]?
&lt;/pre&gt;

&lt;p&gt;Pronto! Nosso controller IndexController est√° criado, juntamente com suas templates, veja a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/07.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/07.png&#34; alt=&#34;Index controller&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47775&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao entrarmos na url: &lt;a href=&#34;http://127.0.0.1:8000/&#34;&gt;http://127.0.0.1:8000/&lt;/a&gt;, vamos entrar no nosso index, e receberemos a mensagem abaixo:&lt;/p&gt;

&lt;p&gt;Welcome to the IndexControler:index page&lt;/p&gt;

&lt;h2 id=&#34;criando-um-reposit√≥rio&#34;&gt;Criando um reposit√≥rio&lt;/h2&gt;

&lt;p&gt;Se entrarmos em nosso controller IndexController, caminho: src/Tableless/CoreBunde/ IndexController.php, vamos perceber que nossos m√©todos est√£o criados, por√©m n√£o est√£o implementados, vamos implement√°-los, mas queremos que nosso index apresente para o usu√°rio os √∫ltimos posts escritos, para que sempre o post mais atual seja apresentado em primeiro lugar, para isso devemos criar um reposit√≥rio para nossa entidade Post.&lt;/p&gt;

&lt;p&gt;Para isso, vamos entrar no bundle ModelBundle e crie uma pasta com o nome de Repository, dentro dessa pasta crie uma classe com o nome PostRepository.&lt;/p&gt;

&lt;p&gt;Com a classe PostRepository aberta, adicione o nemspace dessa classe, e de um extends na classe EntityRepository do Doctrine, n√£o se esquecendo de dar um use nessa classe.&lt;/p&gt;

&lt;p&gt;use Doctrine\ORM\EntityRepository;&lt;/p&gt;

&lt;p&gt;Crie um m√©todo privado com o nome getQueryBuilder e acrescente a EntityManager para que possamos usar nossa entidade Post, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;private function getQueryBuilder()
{
    $em = $this-&amp;gt;getEntityManager();

    $queryBuilder = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)
    -&amp;gt;createQueryBuilder(&#39;p&#39;);

    return $queryBuilder;
 }
&lt;/pre&gt;

&lt;p&gt;Agora vamos criar um m√©todo publico chamado findAllInOrder, e vamos chamar o m√©todo getQueryBuilder(), para orden√°-lo da forma que queremos, para que seja mostrado o √∫ltimo post postado primeiro. Veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;public function findAllInOrder()
{
    $qb = $this-&amp;gt;getQueryBuilder()
    -&amp;gt;orderBy(&#39;p.createdAt&#39;, &#39;desc&#39;);

    return $qb-&amp;gt;getQuery()-&amp;gt;getResult();
}
&lt;/pre&gt;

&lt;p&gt;Veja a classe PostRepository pronta:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\ModelBundle\Repository;

use Doctrine\ORM\EntityRepository;

class PostRepository extends EntityRepository
{
    private function getQueryBuilder()
    {
        $em = $this-&amp;gt;getEntityManager();
        $queryBuilder = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)
            -&amp;gt;createQueryBuilder(&#39;p&#39;);
        return $queryBuilder;
    }

     public function findAllInOrder()
    {
        $qb = $this-&amp;gt;getQueryBuilder()
            -&amp;gt;orderBy(&#39;p.createdAt&#39;, &#39;desc&#39;);

        return $qb-&amp;gt;getQuery()-&amp;gt;getResult();
    }
} 

&lt;/pre&gt;

&lt;p&gt;Agora temos que indicar para a entidade Post via annotation, onde est√° a classe PostRepository, para isso vamos abrir a entidade Post, caminho:src/Tableless/ModelBundle/Entity/Post.php, e acrescentar a annotation (repositoryClass=&amp;#8221;Tableless\ModelBundle\Repository\PostRepository&amp;#8221;) na linha 12 de sua entidade, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
 * Post
 *
 * @ORM\Table(name=&#34;post&#34;)
 * @ORM\Entity(repositoryClass=&#34;Tableless\ModelBundle\Repository\PostRepository&#34;)
 */
class Post extends Timestampable
{
    ...
&lt;/pre&gt;

&lt;h2 id=&#34;implementando-o-controller&#34;&gt;Implementando o controller&lt;/h2&gt;

&lt;p&gt;Vamos voltar para nosso IndexController, para que possamos implement√°- lo. Abra o IndexController , e no m√©todo indexAction() temos que chamar nossa entidade Post, para que atrav√©s dela chamemos o m√©todo findAllInOrder() da classe PostRepository, e retornar o resultado em forma de array, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;public function indexAction()
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $posts = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findAllInOrder();

        return [
            &#39;posts&#39; =&amp;gt; $posts,
        ];
    } 
&lt;/pre&gt;

&lt;p&gt;Tamb√©m vamos implementar o m√©todo showAction(), para que seja buscado apena o post clickado pelo usu√°rio, para isso devemos passar um par√¢metro id, tanto no m√©todo, quanto na annotation para rota, para que seja buscado somente o post solicitado. Temos que chamar nossa entidade Post novamente, para que atrav√©s dela chamemos o m√©todo find(), que j√° vem pr√© configurado pelo Doctrine, por√©m se o usu√°rio requisitar um post que n√£o existe, temos que passar uma mensagem de erro, para inform√°- lo, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
     * @Route(&#34;/show/{id}&#34;)
     * @Template()
     */
    public function showAction($id)
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $post = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;find($id);

        if (!$post) {
            throw $this-&amp;gt;createNotFoundException(&#39;O post n√£o existe! Volte para home!&#39;);
        }

        return [
            &#39;post&#39; =&amp;gt; $post,
        ];
    }
&lt;/pre&gt;

&lt;p&gt;Veja o IndexController pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\CoreBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;

class IndexControlerController extends Controller
{
     /**
     * @Route(&#34;/&#34;)
     * @Template()
     */
    public function indexAction()
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $posts = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findAllInOrder();

        return [
            &#39;posts&#39; =&amp;gt; $posts,
        ];
    }

     /**
     * @Route(&#34;/show/{id}&#34;)
     * @Template()
     */
    public function showAction($id)
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $post = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;find($id);

        if (!$post) {
            throw $this-&amp;gt;createNotFoundException(&#39;O post n√£o existe! Volte para home!&#39;);
        }

        return [
            &#39;post&#39; =&amp;gt; $post,
        ];
    }
}

&lt;/pre&gt;

&lt;p&gt;Para vemos como est√° ficando nossa aplica√ß√£o, abra a index.html.twig, do IndexController, caminho: src/Tableless/CoreBundle/Resouces/views/IndexController/index.html.twig e vamos dar um dump em posts, veja abaixo, vamos adicionar a linha 8:&lt;/p&gt;

&lt;pre class=&#34;lang-twig&#34;&gt;{% extends &#34;::base.html.twig&#34; %}

{% block title %}TablelessCoreBundle:IndexControler:index{% endblock %}

{% block body %}
Welcome to the IndexControler:index page

    {{ dump(posts) }}
    
{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Vamos fazer a mesma modifica√ß√£o para o arquivo show.html.twig no mesmo diret√≥rio, por√©m ao em vez de dar um dump em posts, vamos dar um dump em post, sem o ‚Äús‚Äù no final, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% extends &#34;::base.html.twig&#34; %}

{% block title %}TablelessCoreBundle:IndexControler:show{% endblock %}

{% block body %}
Welcome to the IndexControler:show page

    {{ dump(post) }}
    
{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Para vemos o resultado, entre nas urls:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/&#34;&gt;http://127.0.0.1:8000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/show/{o&#34;&gt;http://127.0.0.1:8000/show/{o&lt;/a&gt; id do seu post}&lt;/p&gt;

&lt;p&gt;Veja as imagens para compara√ß√£o:&lt;/p&gt;

&lt;p&gt;index &amp;#8211; url: &lt;a href=&#34;http://127.0.0.1:8000/&#34;&gt;http://127.0.0.1:8000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/08.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/08.png&#34; alt=&#34;index&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47767&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pagina show ‚Äì url: &lt;a href=&#34;http://127.0.0.1:8000/show/4&#34;&gt;http://127.0.0.1:8000/show/4&lt;/a&gt; -&amp;gt; {o id do seu post} no meu caso 4.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/09.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/09.png&#34; alt=&#34;show&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47768&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;No tutorial anterior, eu comentei que iriamos configurar nosso projeto e come√ßarmos a trabalhar com o Twig, por√©m nossa configura√ß√£o e a cria√ß√£o do index, deixou este tutorial extenso, mas no pr√≥ximo tutorial, vamos trabalhar com o bootstrap e com o twig para que possamos visualizar nossos post em nossa home da forma adequada e bonita.&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;instala√ß√£o&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 &amp;#8211; Instala√ß√£o&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;parte 02&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 &amp;#8211; parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;parte 03&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 &amp;#8211; parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;parte 04&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 &amp;#8211; parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;Git do projeto&#34; target=&#34;_blank&#34;&gt;encontra-se no GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorial Ionic ‚Äì Meu primeiro app</title>
      <link>https://tableless.github.io/hugo-public/tutorial-ionic-meu-primeiro-app/</link>
      <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tutorial-ionic-meu-primeiro-app/</guid>
      <description>

&lt;h2 id=&#34;introdu√ß√£o&#34;&gt;Introdu√ß√£o&lt;/h2&gt;

&lt;p&gt;Ap√≥s publicar uma &lt;a href=&#34;http://tableless.com.br/introducao-ao-ionic-framework/&#34; target=&#34;_blank&#34;&gt;breve introdu√ß√£o do Ionic Framework&lt;/a&gt;, vamos agora tentar construir uma app que consiga abordar o uso de componentes nativos de um celular assim como o build para as determinadas plataformas.&lt;/p&gt;

&lt;p&gt;Para isso, ao decorrer deste tutorial, vamos construir uma app bastante simples que utiliza a posi√ß√£o do usu√°rio para exibir os dados do tempo na tela.&lt;/p&gt;

&lt;h2 id=&#34;o-que-√©-necess√°rio&#34;&gt;O que √© necess√°rio?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ap√≥s instalar os 2, vamos instalar o &lt;em&gt;ionic&lt;/em&gt; e o &lt;em&gt;cordova&lt;/em&gt; como m√≥dulos globais.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;npm install -g ionic cordova
&lt;/pre&gt;

&lt;h2 id=&#34;criando-o-projeto&#34;&gt;Criando o projeto&lt;/h2&gt;

&lt;p&gt;Para criar a estrutura inicial do projeto, vamos utilizar o gerador do Ionic CLI. Como o app √© bastante simples, vamos utilizar o gerador &lt;em&gt;blank&lt;/em&gt; do ionic.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic start weather blank
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/02/Screen-Shot-2015-02-28-at-12.21.21-AM.png&#34;&gt;&lt;img alt=&#34;estrutura de p√°ginas do Ionic&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/Screen-Shot-2015-02-28-at-12.21.21-AM.png&#34; width=&#34;163&#34; height=&#34;440&#34; class=&#34;alignnone size-full wp-image-47368&#34; srcset=&#34;uploads/2015/02/Screen-Shot-2015-02-28-at-12.21.21-AM.png 163w, uploads/2015/02/Screen-Shot-2015-02-28-at-12.21.21-AM-51x139.png 51w&#34; sizes=&#34;(max-width: 163px) 100vw, 163px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Podemos ver ent√£o a estrutura de pastas inicial do projeto. Inicialmente vamos mexer somente no conte√∫do da pasta &lt;em&gt;www&lt;/em&gt; que √© onde se encontra nosso projecto html, css e js.&lt;/p&gt;

&lt;h2 id=&#34;apis-e-plugins-utilizados&#34;&gt;APIS e Plugins utilizados&lt;/h2&gt;

&lt;p&gt;Para fazer a captura dos dados meteorol√≥gicos vamos utilizar uma API gratuita chamada &lt;a href=&#34;https://developer.forecast.io/&#34; target=&#34;_blank&#34;&gt;Forecast for Developers&lt;/a&gt;. Para fazer a captura dos dados temos que utilizar um plugin do Cordova de Geolocaliza√ß√£o. √â importante dizer que n√£o √© recomend√°vel utilizar o &lt;em&gt;navigator.geolocation&lt;/em&gt; nativo pois ele ir√° pedir permiss√£o para o usu√°rio com frequ√™ncia e ir√° mostrar uma mensagem n√£o amig√°vel para isso como a imagem abaixo ilustra.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Di√°logo de permiss√£o de localiza√ß√£o via html5&#34; src=&#34;http://www.raymondcamden.com/images/bad.png&#34; width=&#34;320&#34; height=&#34;480&#34; class=&#34;aligncenter&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para instalar o plugin de geolocaliza√ß√£o do Cordova, basta rodarmos o comando abaixo na pasta do projeto.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;cordova plugin add org.apache.cordova.geolocation
&lt;/pre&gt;

&lt;p&gt;Ap√≥s instalado o plugin do cordova, vamos instalar uma lib que tem implementado a comunica√ß√£o com alguns plugins do Cordova de uma forma mais amig√°vel para o AngularJS que √© o &lt;a href=&#34;http://ngcordova.com/&#34; target=&#34;_blank&#34;&gt;ngCordova&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para instalar o &lt;em&gt;ngCordova&lt;/em&gt; basta rodar&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;bower install ngCordova
&lt;/pre&gt;

&lt;p&gt;E importar no arquivo &lt;em&gt;www/index.html&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script src=&#34;lib/ngCordova/dist/ng-cordova.js&#34;&amp;gt;&amp;lt;/script&amp;gt; 
&amp;lt;script src=&#34;cordova.js&#34;&amp;gt;&amp;lt;/script&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;Ap√≥s feito isso, devemos avisar para o AngularJS que nosso projeto depende deste m√≥dulo. Esta defini√ß√£o est√° no arquivo &lt;em&gt;www/js/app.js&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;(function() {
    angular.module(&#39;weather&#39;, [&#39;ionic&#39;, &#39;ngCordova&#39;])
        .run(function($ionicPlatform) {
            $ionicPlatform.ready(function() {
                // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
                // for form inputs)
                if (window.cordova &amp;&amp; window.cordova.plugins.Keyboard) {
                    cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
                }
                if (window.StatusBar) {
                    StatusBar.styleDefault();
                }
            });
        });
})();
&lt;/pre&gt;

&lt;p&gt;Desse momento em diante temos acesso a todos os m√≥dulos do &lt;em&gt;ngCordova&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;organiza√ß√£o&#34;&gt;Organiza√ß√£o&lt;/h2&gt;

&lt;p&gt;Como a App √© bastante simples, n√£o vamos fragmentar a implementa√ß√£o em diversos arquivos. Vamos focar em construir apenas utilizando o &lt;em&gt;app.js&lt;/em&gt;. Vamos ent√£o construir 2 componentes no AngularJS, o servi√ßo &lt;em&gt;Weather&lt;/em&gt; para se comunicar com a API e o controller &lt;em&gt;WeatherCtrl&lt;/em&gt; para fazer a ponte entre a nossa view e a api.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;(function() {
    angular.module(&#39;weather&#39;, [&#39;ionic&#39;, &#39;ngCordova&#39;])
        .run(function($ionicPlatform) {
            $ionicPlatform.ready(function() {
                // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
                // for form inputs)
                if (window.cordova &amp;&amp; window.cordova.plugins.Keyboard) {
                    cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
                }
                if (window.StatusBar) {
                    StatusBar.styleDefault();
                }
            });
        })
        .factory(&#39;Weather&#39;, function($http) {

        })
        .controller(&#39;WeatherCtrl&#39;, function($scope, Weather) {

        });
})();
&lt;/pre&gt;

&lt;p&gt;Ap√≥s feito isso, devemos fazer o bind entre o &lt;em&gt;WeatherCtrl&lt;/em&gt; e o nosso HTML.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body ng-app=&#34;weather&#34; ng-controller=&#34;WeatherCtrl as weatherCtrl&#34;&amp;gt;
    &amp;lt;ion-pane&amp;gt;
        &amp;lt;ion-header-bar class=&#34;bar-stable&#34;&amp;gt;
            &amp;lt;h1 class=&#34;title&#34;&amp;gt;Weather&amp;lt;/h1&amp;gt;
        &amp;lt;/ion-header-bar&amp;gt;
        &amp;lt;ion-content&amp;gt;
            
        &amp;lt;/ion-content&amp;gt;
    &amp;lt;/ion-pane&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Feito isso, devemos ent√£o implementar o acesso aos dados da API atrav√©s de uma posi√ß√£o geogr√°fica.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;.factory(&#39;Weather&#39;, function($q, $http) {
            var deferred = $q.defer();

            function getCurrentWeather(lat, lng) {
                var url = &#39;https://api.forecast.io/forecast/SUA_CHAVE_DE_API/&#39; + lat +&#39;,&#39; + lng + &#39;?callback=JSON_CALLBACK&#39;;
                $http.jsonp(url)
                    .success(deferred.resolve)
                    .error(deferred.reject);

                return deferred.promise;
            }

            return {
                getCurrentWeather: getCurrentWeather
            };
        })
&lt;/pre&gt;

&lt;p&gt;O servi√ßo retorna uma promise que √© o retorno da chamada JSONP para a API que iremos capturar no controller ap√≥s acessarmos a localiza√ß√£o do dispositivo.&lt;/p&gt;

&lt;p&gt;Com o servi√ßo pronto, vamos ent√£o fazer a chamada ao GPS no &lt;em&gt;controller&lt;/em&gt; e com a posi√ß√£o, vamos capturar os dados meteorol√≥gicos.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;.controller(&#39;WeatherCtrl&#39;, function($scope, $cordovaGeolocation, Weather) {
            $scope.loading = true;

            $scope.toCelsius = function(temperature) {
                return ((temperature - 32) / 1.8).toFixed(1);
            };

            $cordovaGeolocation
                .getCurrentPosition({
                    timeout: 10000,
                    enableHighAccuracy: false
                })
                .then(function(position) {
                    var lat = position.coords.latitude;
                    var long = position.coords.longitude;

                    Weather.getCurrentWeather(lat, long).then(function(data) {
                        $scope.weatherInfo = data;
                        $scope.loading = false;
                    }, function(error) {
                        //TODO Display error message
                    });
                }, function(err) {
                    //TODO Display error message
                });
        });
&lt;/pre&gt;

&lt;p&gt;Se voc√™s repararem, eu adicionei umas vari√°veis ao escopo para controlar se est√° carregando dados ou n√£o e para converter de Fahrenheit para Celsius que usaremos posteriormente no nosso HTML.&lt;/p&gt;

&lt;p&gt;Com o &lt;em&gt;controller&lt;/em&gt; preparado vamos ent√£o preparar o nosso HTML para mostrar uma imagem de carregamento enquanto n√£o demos os dados e posteriormente mostrar a temperatura e a sensa√ß√£o t√©rmica em celsius.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body ng-app=&#34;weather&#34; ng-controller=&#34;WeatherCtrl as weatherCtrl&#34;&amp;gt;
    &amp;lt;ion-pane&amp;gt;
        &amp;lt;ion-header-bar class=&#34;bar-stable&#34;&amp;gt;
            &amp;lt;h1 class=&#34;title&#34;&amp;gt;Weather&amp;lt;/h1&amp;gt;
        &amp;lt;/ion-header-bar&amp;gt;
        &amp;lt;ion-content class=&#34;text-center&#34;&amp;gt;
            &amp;lt;div ng-show=&#34;loading&#34;&amp;gt;
                Carregando informa√ß√µes...
            &amp;lt;/div&amp;gt;
            &amp;lt;div ng-hide=&#34;loading&#34;&amp;gt;
                &amp;lt;p&amp;gt;
                    Temperatura: {{toCelsius(weatherInfo.currently.temperature)}}¬∫
                &amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;
                    Sensa√ß√£o t√©rmica: {{toCelsius(weatherInfo.currently.apparentTemperature)}}¬∫
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/ion-content&amp;gt;
    &amp;lt;/ion-pane&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Para visualizar o resultado podemos rodar o projeto no navegador utilizando o comando&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic serve
&lt;/pre&gt;

&lt;h2 id=&#34;gerando-as-builds-para-o-celular&#34;&gt;Gerando as &lt;em&gt;builds&lt;/em&gt; para o celular&lt;/h2&gt;

&lt;p&gt;Para gerar as os pacotes de App para celular basta rodarmos alguns comandos no Ionic CLI. √â importante ressaltar que para criar o projeto iOS √© necess√°rio possuir um computador OSX.&lt;/p&gt;

&lt;h3 id=&#34;adicionando-as-plataformas&#34;&gt;Adicionando as plataformas&lt;/h3&gt;

&lt;p&gt;Para adicionarmos as plataformas em que vamos compilar nossa app bastar rodar o comando &lt;em&gt;ionic platform add PLATFORM&lt;/em&gt; passando a plataforma desejada. Para efeitos de teste, vamos utilizar apenas o Android.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic platform add android
&lt;/pre&gt;

&lt;p&gt;Ap√≥s rodar esse comando vamos ver que o Ionic est√° criando um projeto Android dentro da pasta &lt;em&gt;platforms&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/02/Screen-Shot-2015-02-28-at-1.13.16-AM.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/Screen-Shot-2015-02-28-at-1.13.16-AM.png&#34; alt=&#34;Cria√ß√£o do projeto Android&#34; width=&#34;1061&#34; height=&#34;258&#34; class=&#34;alignnone size-full wp-image-47383&#34; srcset=&#34;uploads/2015/02/Screen-Shot-2015-02-28-at-1.13.16-AM.png 1061w, uploads/2015/02/Screen-Shot-2015-02-28-at-1.13.16-AM-265x64.png 265w, uploads/2015/02/Screen-Shot-2015-02-28-at-1.13.16-AM-400x97.png 400w&#34; sizes=&#34;(max-width: 1061px) 100vw, 1061px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A partir da√≠ n√£o precisamos fazer mais nada! Basta rodar a app em seu aparelho ou emulador atrav√©s do comando&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic run android
&lt;/pre&gt;

&lt;p&gt;Este comando ir√° fazer o &lt;em&gt;build&lt;/em&gt; e enviar para o celular que estiver conectado ou emulador que estiver aberto.&lt;/p&gt;

&lt;p&gt;Para quem quiser, o projeto est√° dispon√≠vel no &lt;a href=&#34;https://github.com/grillorafael/ionic-weather&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 ‚Äì Parte 04</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-04/</link>
      <pubDate>Wed, 04 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-04/</guid>
      <description>

&lt;p&gt;Anteriormente, &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;Iniciando com symfony - parte-03&#34; target=&#34;_blank&#34;&gt;criamos a entidade Post&lt;/a&gt;, vamos dar continuidade ao nosso simples projeto, criando uma entidade Author, faremos o relacionamento para que cada autor fique ligado ao post que criou.&lt;/p&gt;

&lt;h2 id=&#34;criando-a-entidade-author&#34;&gt;Criando a entidade Author&lt;/h2&gt;

&lt;p&gt;Vamos criar a entidade Author, entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:entity
&lt;/pre&gt;

&lt;p&gt;Vamos digitar o nome da entidade como : TablelessModelBundle:Author.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ The Entity shortcut name: TablelessModelBundle:Author
&lt;/pre&gt;

&lt;p&gt;Vamos mape√°-la usando annotation. Apenas damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Configuration format (yml, xml, php, or annotation) [annotation]:
&lt;/pre&gt;

&lt;p&gt;O assistente nos pergunta: Qual ser√° o nome do nosso campo?&lt;/p&gt;

&lt;p&gt;Digitamos &amp;#8220;name&amp;#8221; e damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New field name (press  to stop adding fields): name
&lt;/pre&gt;

&lt;p&gt;Ser√° do tipo string.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Field type [string]:
&lt;/pre&gt;

&lt;p&gt;Com o tamanho de 100.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Field length [255]: 100
&lt;/pre&gt;

&lt;p&gt;Quando o assistente nos perguntar novamente: Qual ser√° o novo campo? Damos enter para entrarmos no processo de finaliza√ß√£o. E nos pergunta, se queremos criar uma classe de reposit√≥rio, ele nos indica n√£o, vamos apenas dar um enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Do you want to generate an empty repository class [no]?
&lt;/pre&gt;

&lt;p&gt;E para finalizar, o assistente pergunta se realmente queremos gerar a entidade. Como queremos, digitamos apenas enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you confirm generation [yes]?
&lt;/pre&gt;

&lt;p&gt;Nossa entidade Author est√° pronta.&lt;/p&gt;

&lt;p&gt;Ao entrarmos na pasta src/Tableless/ModelBundle/Entity/ vamos encontr√°-la.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/02.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/02.png&#34; alt=&#34;Entidade Author criada&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47412&#34; srcset=&#34;uploads/2015/03/02.png 750w, uploads/2015/03/02-259x139.png 259w, uploads/2015/03/02-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora devemos adicionar a annotations, @ORM\Table(name=&amp;#8221;author&amp;#8221;) para o nome da nossa tabela, veja na linha 10:&lt;/p&gt;

&lt;p&gt;Veja toda a entidade Author:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 

/** 
 * Author 
 * 
 * @ORM\Table(name=&#34;author&#34;)
 * @ORM\Entity 
 */ 
class Author 
{ 
    /** 
     * @var integer 
     * 
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;) 
     * @ORM\Id 
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;) 
     */ 
    private $id; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;name&#34;, type=&#34;string&#34;, length=100) 
     */ 
    private $name; 

    /** 
     * Get id 
     * 
     * @return integer 
     */ 
    public function getId() 
    { 
        return $this-&amp;gt;id; 
    } 

    /** 
     * Set name 
     * 
     * @param string $name 
     * @return Author 
     */ 
    public function setName($name) 
    { 
        $this-&amp;gt;name = $name; 
        return $this; 
    } 

    /** 
     * Get name 
     * 
     * @return string 
     */ 
    public function getName() 
    { 
        return $this-&amp;gt;name; 
    } 
} 
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-o-projeto&#34;&gt;Configurando o projeto&lt;/h2&gt;

&lt;p&gt;Nesse momento vamos criar uma classe abstrata com o nome Timestampable, para que n√£o fiquemos repetindo c√≥digo, pois entidade Author tamb√©m receber√° uma data de cria√ß√£o e data de atualiza√ß√£o.&lt;/p&gt;

&lt;p&gt;Vamos l√°!&lt;/p&gt;

&lt;p&gt;Entre na pasta src/Tableless/ModelBundle/Entity/, e vamos criar uma classe abstrata com o nome Timestampable, para que possamos mape√° l√° vamos usar a classe do Doctrine Mapping e vamos dar um apelido de ORM, e fazer as annotations correspondentes.&lt;/p&gt;

&lt;p&gt;Nesse momento, ficar explicando detalhe por detalhe levar√° muito tempo, e o tutorial ficar√° extenso, veja a classe Timestampable pronta abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 

/** 
 * Timestampable abstract class 
 * @ORM\MappedSuperclass 
 */ 
abstract class Timestampable 
{ 
    /** 
     * @var \DateTime 
     * 
     * @ORM\Column(name=&#34;created_at&#34;, type=&#34;datetime&#34;) 
     * @Assert\NotBlank 
     */ 
    private $createdAt; 

    /** 
     * @var \DateTime 
     * 
     * @ORM\Column(name=&#34;updated_at&#34;, type=&#34;datetime&#34;) 
     * @Assert\NotBlank 
     */ 
    private $updatedAt; 

    /** 
     * Construct 
     */ 
    public function __construct() 
    { 
        $this-&amp;gt;createdAt = new \DateTime(); 
        $this-&amp;gt;updatedAt = new \DateTime(); 
    } 

    /** 
     * Set createdAt 
     * 
     * @param $createdAt 
     */ 
    public function setCreatedAt($createdAt) 
    { 
        $this-&amp;gt;createdAt = $createdAt; 
    } 

    /** 
     * Get CreatedAt 
     * 
     * @return \DateTime 
     */ 
    public function getCreatedAt() 
    { 
        return $this-&amp;gt;createdAt; 
    } 

    /** 
     * Set UpdatedAt 
     * 
     * @param \DateTime $updatedAt 
     */ 
    public function setUpdatedAt($updatedAt) 
    { 
        $this-&amp;gt;updatedAt = $updatedAt; 
    } 
    /** 
     * Get UpdateAt 
     * 
     * @return \DateTime 
     */ 
    public function getUpdatedAt() 
    { 
        return $this-&amp;gt;updatedAt; 
    } 
}
&lt;/pre&gt;

&lt;p&gt;Vamos estender essa classe na entidade Author, veja abaixo na linha 13:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 

/** 
 * Author 
 * 
 * @ORM\Table(name=&#34;author&#34;)
 * @ORM\Entity 
 */ 
class Author extends Timestampable 
{ 
‚Ä¶
&lt;/pre&gt;

&lt;p&gt;Temos que validar os campos da entidade Author, vamos dar um use em Constraints e apelid√°-la como Assert:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Symfony\Component\Validator\Constraints as Assert;
&lt;/pre&gt;

&lt;p&gt;vamos validar o campo name com @Assert\NotBlank, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
* @var string 
* 
* @ORM\Column(name=&#34;name&#34;, type=&#34;string&#34;, length=100) 
* @Assert\NotBlank 
*/ 
private $name; 
&lt;/pre&gt;

&lt;p&gt;Veja a entidade Author depois da configura√ß√£o:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 

/** 
 * Author 
 * 
 * @ORM\Table(name=&#34;author&#34;)
 * @ORM\Entity 
 */ 
class Author extends Timestampable 
{  
    /** 
     * @var integer 
     * 
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;) 
     * @ORM\Id 
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;) 
     */ 
    private $id; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;name&#34;, type=&#34;string&#34;, length=100) 
     * @Assert\NotBlank 
     */ 
    private $name; 


    /** 
     * Get id 
     * 
     * @return integer 
     */ 
    public function getId() 
    { 
        return $this-&amp;gt;id; 
    } 

    /** 
     * Set name 
     * 
     * @param string $name 
     * @return Author 
     */ 
    public function setName($name) 
    { 
        $this-&amp;gt;name = $name; 
 
        return $this; 
    } 

    /** 
     * Get name 
     * 
     * @return string 
     */ 
    public function getName() 
    { 
        return $this-&amp;gt;name; 
    } 
} 
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-a-entidade-post&#34;&gt;Configurando a entidade Post&lt;/h2&gt;

&lt;p&gt;Como criamos um classe abstrata, vamos alterar a entidade Post para que ela estenda a entidade Timestampable.&lt;/p&gt;

&lt;p&gt;Exclua os atributos $createdAt e $updatedAt e os m√©todos setCreatedAt(), getCreatedAt(), setUpdatedAt(), getUpdatedAt() e o __contruct(), e vamos estender a classe Timestampable, depois de configurada, a entidade Post ficar√° assim:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 

/** 
 * Post 
 * 
 * @ORM\Table(name=&#34;post&#34;) 
 * @ORM\Entity 
 */ 
class Post extends Timestampable 
{ 
    /** 
     * @var integer 
     * 
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;) 
     * @ORM\Id 
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;) 
     */ 
    private $id; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;title&#34;, type=&#34;string&#34;, length=255) 
     * @Assert\NotBlank 
     */ 
    private $title; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;content&#34;, type=&#34;text&#34;) 
     * @Assert\NotBlank 
     */ 
    private $content; 

     /** 
     * Get id 
     * 
     * @return integer 
     */ 
    public function getId() 
    { 
        return $this-&amp;gt;id; 
    } 

    /** 
     * Set title 
     * 
     * @param string $title 
     * @return Post 
     */ 
    public function setTitle($title) 
    { 
        $this-&amp;gt;title = $title; 

     return $this; 
    } 

    /** 
     * Get title 
     * 
     * @return string 
     */ 
    public function getTitle() 
    { 
        return $this-&amp;gt;title; 
    } 

    /** 
     * Set content 
     * 
     * @param string $content 
     * @return Post 
     */ 
    public function setContent($content) 
    { 
        $this-&amp;gt;content = $content; 

        return $this; 
    } 

    /** 
     * Get content 
     * 
     * @return string 
     */ 
    public function getContent() 
    { 
        return $this-&amp;gt;content; 
    } 
} 
&lt;/pre&gt;

&lt;h2 id=&#34;atualizando-o-banco-de-dados&#34;&gt;Atualizando o banco de dados&lt;/h2&gt;

&lt;p&gt;Geramos a entidade Author e alteramos a entidade Post, dessa forma devemos atualizar nosso banco, para que o mesmo fique configurado de acordo com as entidades.&lt;/p&gt;

&lt;p&gt;Vamos ao terminal, e para atualizar o banco de dados vamos digitar o c√≥digo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:update --force
&lt;/pre&gt;

&lt;p&gt;Teremos o resultado:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Updating database schema... 
 Database schema updated successfully! &#34;1&#34; queries were execute
&lt;/pre&gt;

&lt;p&gt;Entrando no banco de dados vamos perceber que a tabela author criada:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/03.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/03.png&#34; alt=&#34;Tabela Author&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47434&#34; srcset=&#34;uploads/2015/03/03.png 750w, uploads/2015/03/03-259x139.png 259w, uploads/2015/03/03-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;criando-o-crud-da-entidade-author&#34;&gt;Criando o CRUD da entidade Author&lt;/h2&gt;

&lt;p&gt;Depois da configura√ß√£o das nossa entidade, vamos gerar o CRUD da entidade Author. Vamos digitar no console:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:crud
&lt;/pre&gt;

&lt;p&gt;Digitamos TablelessModelBundle:Author:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ The Entity shortcut name: TablelessModelBundle:Author
&lt;/pre&gt;

&lt;p&gt;O assistente nos pergunta se queremos gerar as a√ß√µes de grava√ß√£o, digitamos: yes.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you want to generate the &#34;write&#34; actions [no]? Yes
&lt;/pre&gt;

&lt;p&gt;Como vamos configurar? Vamos deixar como est√°, annotation, e damos enter&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Configuration format (yml, xml, php, or annotation) [annotation]:
&lt;/pre&gt;

&lt;p&gt;Como ser√° a rota? Vamos deixar como ele nos indica, damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Routes prefix [/author]:
&lt;/pre&gt;

&lt;p&gt;Vamos confirmar a gera√ß√£o desse CRUD dando enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you confirm generation [yes]?
&lt;/pre&gt;

&lt;p&gt;Prontinho nosso CRUD da entidade Author est√° pronto, vamos testar.&lt;/p&gt;

&lt;p&gt;Inicie o servidor:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console server:run
&lt;/pre&gt;

&lt;p&gt;entre na url:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/author/&#34;&gt;http://127.0.0.1:8000/author/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos criar um autor com o nome Tableless&lt;/p&gt;

&lt;h2 id=&#34;relacionamento-com-doctrine&#34;&gt;Relacionamento com Doctrine&lt;/h2&gt;

&lt;p&gt;Vamos fazer um relacionamento no banco de dados, pois queremos que, ao criarmos um post, o mesmo esteja relacionado com o autor que o criou. N√£o entraremos em detalhes sobre relacionamento, caso tenha d√∫vidas, &lt;a href=&#34;http://doctrine-orm.readthedocs.org/en/latest/reference/association-mapping.html&#34; title=&#34;Documenta√ß√£o de relacionamento com Doctrine&#34; target=&#34;_blank&#34;&gt;consulte a documenta√ß√£o&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vamos configurar novamente as entidades para que o relacionamento possa acontecer.&lt;/p&gt;

&lt;p&gt;Entre na entidade Post e acrescente o atributo $author com as seguintes annotations:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @var Author 
     * 
     * @ORM\ManyToOne(targetEntity=&#34;Author&#34;, inversedBy=&#34;posts&#34;) 
     * @ORM\JoinColumn(name=&#34;author_id&#34;, referencedColumnName=&#34;id&#34;, nullable=false) 
     * @Assert\NotBlank 
     */ 
    private $author;
&lt;/pre&gt;

&lt;p&gt;Entre na entidade Author e acrescente o atributo $post, com as seguintes annotations:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @var ArrayCollection 
     * 
     * @ORM\OneToMany(targetEntity=&#34;Post&#34;, mappedBy=&#34;author&#34;, cascade={&#34;remove&#34;}) 
     */ 
    private $post;
&lt;/pre&gt;

&lt;p&gt;Precisamos tamb√©m dar um use na classe ArrayCollection, do Doctrine, pois um autor ter√° v√°rios posts, e os posts ser√£o buscados como array, insira o c√≥digo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Doctrine\Common\Collections\ArrayCollection;
&lt;/pre&gt;

&lt;p&gt;Vamos criar um construtor, por√©m a entidade Timestampable j√° tem um construtor, para resolver esse problema, vamos adicionar um parent::__construct(), veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * Constructor 
     */ 
    public function __construct() 
    { 
         parent::__construct();
    
        $this-&amp;gt;post = new ArrayCollection(); 
    }
&lt;/pre&gt;

&lt;p&gt;Agora vamos gerar os m√©todos necess√°rios da entidade Author, entre no console e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:entities TablelessModelBundle:Author
&lt;/pre&gt;

&lt;p&gt;Temos que gerar tamb√©m para a entidade Post:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:entities TablelessModelBundle:Post
&lt;/pre&gt;

&lt;p&gt;Entre novamente na entidade Author e acrescente o m√©todo abaixo no final da entidade:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @return string 
     */ 
    public function __toString() 
    { 
        return $this-&amp;gt;getName(); 
    }
&lt;/pre&gt;

&lt;p&gt;Veja como ficou a entidade Author depois de configurarmos:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 
use Doctrine\Common\Collections\ArrayCollection; 

/** 
 * Author 
 * 
 * @ORM\Table(name=&#34;author&#34;) 
 * @ORM\Entity 
 */ 
class Author extends Timestampable 
{ 
   /** 
     * @var integer 
     * 
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;) 
     * @ORM\Id 
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;) 
     */ 
    private $id; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;name&#34;, type=&#34;string&#34;, length=100) 
     * @Assert\NotBlank 
     */ 
    private $name; 

    /** 
     * @var ArrayCollection 
     * 
     * @ORM\OneToMany(targetEntity=&#34;Post&#34;, mappedBy=&#34;author&#34;, cascade={&#34;remove&#34;}) 
     */ 
    private $post; 

    /** 
     * Constructor 
     */ 
    public function __construct() 
    { 
         parent::__construct();

        $this-&amp;gt;post = new ArrayCollection(); 
    } 

        /** 
     * Get id 
     * 
     * @return integer 
     */ 
    public function getId() 
    { 
        return $this-&amp;gt;id; 
    } 

    /** 
     * Set name 
     * 
     * @param string $name 
     * @return Author 
     */ 
    public function setName($name) 
    { 
        $this-&amp;gt;name = $name; 

        return $this; 
    } 

    /** 
     * Get name 
     * 
     * @return string

    */ 
    public function getName() 
    { 
        return $this-&amp;gt;name; 
    } 

    /** 
     * Add post 
     * 
     * @param \Tableless\ModelBundle\Entity\Post $post 
     * @return Author 
     */ 
    public function addPost(\Tableless\ModelBundle\Entity\Post $post) 
    { 
        $this-&amp;gt;post[] = $post; 

        return $this; 
    } 

    /** 
     * Remove post 
     * 
     * @param \Tableless\ModelBundle\Entity\Post $post 
     */ 
    public function removePost(\Tableless\ModelBundle\Entity\Post $post) 
    { 
        $this-&amp;gt;post-&amp;gt;removeElement($post); 
    } 

    /** 
     * Get post 
     * 
     * @return \Doctrine\Common\Collections\Collection 
     */ 
    public function getPost() 
    { 
        return $this-&amp;gt;post; 
    } 

    /** 
     * @return string 
     */ 
    public function __toString() 
    { 
        return $this-&amp;gt;getName(); 
    } 
} 

&lt;/pre&gt;

&lt;p&gt;Veja a entidade Post, ap√≥s a configura√ß√£o:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 

/** 
 * Post 
 * 
 * @ORM\Table(name=&#34;post&#34;) 
 * @ORM\Entity 
 */ 
class Post extends Timestampable 
{ 
    /** 
     * @var integer 
     * 
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;) 
     * @ORM\Id 
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;) 
     */ 
    private $id; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;title&#34;, type=&#34;string&#34;, length=255) 
     * @Assert\NotBlank 
     */ 
    private $title; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;content&#34;, type=&#34;text&#34;) 
     * @Assert\NotBlank 
     */ 
    private $content; 

    /** 
     * @var Author 
     * 
     * @ORM\ManyToOne(targetEntity=&#34;Author&#34;, inversedBy=&#34;posts&#34;) 
     * @ORM\JoinColumn(name=&#34;author_id&#34;, referencedColumnName=&#34;id&#34;, nullable=false) 
     * @Assert\NotBlank
    */ 
    private $author; 


    /** 
     * Get id 
     * 
     * @return integer 
     */ 
    public function getId() 
    { 
        return $this-&amp;gt;id; 
    } 

    /** 
     * Set title 
     * 
     * @param string $title 
     * @return Post 
     */ 
    public function setTitle($title) 
    { 
        $this-&amp;gt;title = $title; 

        return $this; 
    } 

    /** 
     * Get title 
     * 
     * @return string 
     */ 
    public function getTitle() 
    { 
        return $this-&amp;gt;title; 
    } 

    /** 
     * Set content 
     * 
     * @param string $content 
     * @return Post 
     */ 
    public function setContent($content) 
    { 
        $this-&amp;gt;content = $content; 

        return $this; 
    } 

    /** 
     * Get content
     * 
     * @return string 
     */ 
    public function getContent() 
    { 
        return $this-&amp;gt;content; 
    } 

    /** 
     * Set author 
     * 
     * @param \Tableless\ModelBundle\Entity\Author $author 
     * @return Post 
     */ 
    public function setAuthor(\Tableless\ModelBundle\Entity\Author $author) 
    { 
        $this-&amp;gt;author = $author; 

        return $this; 
    } 

    /** 
     * Get author 
     * 
     * @return \Tableless\ModelBundle\Entity\Author 
     */ 
    public function getAuthor() 
    { 
        return $this-&amp;gt;author; 
    } 
} 
&lt;/pre&gt;

&lt;p&gt;Agora vamos atualizar o banco de dados para gerar o relacionamento, para isso apague todo o conte√∫do das tabelas do banco de dados, caso n√£o o fa√ßa, ocorrer√° erro,&lt;/p&gt;

&lt;p&gt;Ap√≥s apagar o conte√∫do do banco, rode o comando no console:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:update --force
&lt;/pre&gt;

&lt;h2 id=&#34;corrigindo-os-formul√°rios&#34;&gt;Corrigindo os formul√°rios&lt;/h2&gt;

&lt;p&gt;Entre na classe PostType, caminho: src/Tableless/ModelBundle/Form/PostType, e acrescente a linha abaixo, no m√©todo buildForm:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;-&amp;gt;add(&#39;author&#39;)
&lt;/pre&gt;

&lt;p&gt;Tamb√©m vamos apagar as linhas:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;-&amp;gt;add(&#39;createdAt&#39;) 
 -&amp;gt;add(&#39;updatedAt&#39;) 
&lt;/pre&gt;

&lt;p&gt;Pois n√£o precisamos inserir as datas, em que o post foi criado, ou alterado, isso acontecer√° automaticamente!&lt;/p&gt;

&lt;p&gt;Depois das modifica√ß√µes, o m√©todo formBuilder ficar√° como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @param FormBuilderInterface $builder 
     * @param array $options 
     */ 
    public function buildForm(FormBuilderInterface $builder, array $options) 
    { 
        $builder 
            -&amp;gt;add(&#39;title&#39;) 
            -&amp;gt;add(&#39;content&#39;) 
            -&amp;gt;add(&#39;author&#39;) 
        ; 
    }
&lt;/pre&gt;

&lt;p&gt;Tudo configurado para que possamos criar nossos posts.&lt;/p&gt;

&lt;p&gt;Para verificarmos se est√° tudo correto, precisamos criar primeiramente um autor, depois criamos um post, onde teremos que selecionar um autor, para o mesmo.&lt;/p&gt;

&lt;p&gt;Veja abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/04.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/04.png&#34; alt=&#34;autor&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47469&#34; srcset=&#34;uploads/2015/03/04.png 750w, uploads/2015/03/04-259x139.png 259w, uploads/2015/03/04-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lembrando que a url de autor √©:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/author/&#34;&gt;http://127.0.0.1:8000/author/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e a url de post √©:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/post/&#34;&gt;http://127.0.0.1:8000/post/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;Vamos terminar este tutorial, pois seu conte√∫do est√° muito extenso, no pr√≥ximo, vamos fazer as configura√ß√µes necess√°rias em nossa simples aplica√ß√£o, e vamos criar um index, para mostrar nossos posts, que configuraremos com o Bootstrap, e com o template engine twig. O projeto &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;GitHub do projeto&#34; target=&#34;_blank&#34;&gt;encontra-se no GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 ‚Äì Parte 03</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-03/</link>
      <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-03/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;Iniciando com Symfony - parte 2&#34; target=&#34;_blank&#34;&gt;Dando continuidade ao tutorial anterior&lt;/a&gt;, vamos continuar usando o componente console do Symfony, agora criaremos uma entidade, para acessar o banco de dados, usando o Doctrine ORM.&lt;/p&gt;

&lt;h2 id=&#34;banco-de-dados-com-doctrine-orm&#34;&gt;Banco de dados com Doctrine ORM&lt;/h2&gt;

&lt;p&gt;Quando falamos de banco de dados em projetos com Symfony, estamos falando de Doctrine ORM (Object Relational Mapper), onde criamos uma camada de persist√™ncia entre a aplica√ß√£o e um banco de dados, que mapeia nossas tabelas com entidades, para que possamos acessar o banco.&lt;/p&gt;

&lt;p&gt;N√£o vou me aprofundar sobre Doctrine, por√©m, o que voc√™ precisa saber √© que o Doctrine √© um projeto espetacular e grandioso, muito usado pela comunidade, para projetos robustos.&lt;/p&gt;

&lt;h2 id=&#34;iniciando-com-doctrine-orm&#34;&gt;Iniciando com Doctrine ORM&lt;/h2&gt;

&lt;p&gt;O Doctrine j√° vem instalado e configurado no Symfony. Lembrando que voc√™ pode instal√°-lo &lt;a href=&#34;https://packagist.org/packages/doctrine/orm&#34; title=&#34;Doctrine ORM&#34; target=&#34;_blank&#34;&gt;separadamente via Composer&lt;/a&gt;. &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;Instala√ß√£o do Symfony&#34; target=&#34;_blank&#34;&gt;No primeiro post que escrevi&lt;/a&gt; sobre a instala√ß√£o do Symfony, n√≥s configuramos as op√ß√µes de banco de dados, o host, usu√°rio e senha. Vale lembrar que s√£o de configura√ß√£o pessoais, configuradas em sua m√°quina.&lt;/p&gt;

&lt;p&gt;No meu caso, configurei de acordo com minhas configura√ß√µes do MySQL. Tamb√©m demos um nome para o banco de dados que vamos utilizar agora e que foi configurado com o nome ‚Äúsymfony‚Äù. Por√©m este n√£o est√° criado, vamos cri√°-lo neste momento usando o componente console do Symfony em conjunto com o Doctrine.&lt;/p&gt;

&lt;p&gt;Vamos digitar no terminal para criar nosso banco:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:database:create
&lt;/pre&gt;

&lt;p&gt;E obteremos a resposta: Banco de dados criado para a conex√£o, com o nome &amp;#8216;symfony&amp;#8217;.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Created database for connection named &#39;symfony&#39;
&lt;/pre&gt;

&lt;h2 id=&#34;gerando-entidades&#34;&gt;Gerando Entidades&lt;/h2&gt;

&lt;p&gt;Agora que nosso banco foi gerado, vamos iniciar criando uma entidade. No Doctrine s√£o objetos leves que cont√™m propriedades persistentes, que s√£o salvos e recuperados do banco de dados por recursos de mapeamento de dados.&lt;/p&gt;

&lt;p&gt;Para gerarmos uma entidade vamos digitar no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:entity
&lt;/pre&gt;

&lt;p&gt;Neste momento o console nos d√° a dica do que devemos fazer:&lt;/p&gt;

&lt;p&gt;&amp;#8220;Em primeiro lugar, voc√™ precisa dar o nome para a entidade que pretende gerar.&lt;/p&gt;

&lt;p&gt;Voc√™ deve usar a nota√ß√£o de atalho como AcmeBlogBundle:Post.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Em nosso caso vamos digitar &amp;#8220;TablelessModelBundle:Post&amp;#8221;, para criar a entidade Post no bundle TablelessModelBundle.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ TablelessModelBundle:Post
&lt;/pre&gt;

&lt;p&gt;Feito isso, o console nos pergunda: Qual o formato que vamos usar para obter as informa√ß√µes de mapeamento? Por padr√£o ele nos indica annotation, vamos deixar como est√° e damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Configuration format (yml, xml, php, or annotation) [annotation]:
&lt;/pre&gt;

&lt;p&gt;As annotations s√£o usadas pelo Doctrine para mapear as entidades, e obter informa√ß√µes por meio delas.&lt;/p&gt;

&lt;p&gt;Ap√≥s darmos o enter, o console nos indica a inserir novos campos, (Obs: automaticamente, j√° foi gerado o &amp;#8220;id&amp;#8221; como primary key), e nos pergunta qual o nome do novo campo que vamos criar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New field name (press  to stop adding fields):
&lt;/pre&gt;

&lt;p&gt;Voc√™ pode interromper, apenas dando um enter, em nosso caso vamos continuar, digitando o nosso primeiro campo que ser√° &amp;#8220;title&amp;#8221;, o titulo de nosso post, damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New field name (press  to stop adding fields):title
&lt;/pre&gt;

&lt;p&gt;Nos pergunta qual o tipo, que vamos usar nesse campo, e ele nos indica ‚Äústring‚Äù, vamos deixar como est√°, apenas damos um enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Field type [string]:
&lt;/pre&gt;

&lt;p&gt;A pr√≥xima pergunta √©: Qual o comprimento desse campo? E por padr√£o nos indica &amp;#8220;255&amp;#8221;, voc√™ pode deixar assim, em nosso caso vamos digitar &amp;#8220;150&amp;#8221;, como √© um t√≠tulo, para esse projeto n√£o vejo necessidade de mais, damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Field length [255]:150
&lt;/pre&gt;

&lt;p&gt;Criamos nosso primeiro campo na entidade, como √© um post, vamos precisar al√©m do titulo, um conte√∫do, quando o post foi criado, e quando foi atualizado, ent√£o vamos criar nosso pr√≥ximo campo, digitamos &amp;#8220;content&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New field name (press  to stop adding fields): content
&lt;/pre&gt;

&lt;p&gt;O tipo deste campo ser√° um texto, digitamos &amp;#8220;text&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Field type [string]:text
&lt;/pre&gt;

&lt;p&gt;Automaticamente, o console n√£o nos pede o tamanho, pois √© um campo do tipo text. Vamos para o nosso pr√≥ximo campo, por conven√ß√£o digitamos createdAt.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New field name (press  to stop adding fields): createdAt
&lt;/pre&gt;

&lt;p&gt;O tipo ser√° uma data, ent√£o digitamos &amp;#8220;datetime&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Field type [string]: datetime
&lt;/pre&gt;

&lt;p&gt;Vamos para o pr√≥ximo campo. Nosso post, pode ser atualizado, e para sabermos qual foi a data de atualiza√ß√£o vamos criar um campo para isso, digitamos &amp;#8220;updatedAt&amp;#8221;, tamb√©m com o tipo &amp;#8220;datetime&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New field name (press  to stop adding fields): updatedAt
&lt;/pre&gt;

&lt;p&gt;Tipo&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Field type [string]: datetime
&lt;/pre&gt;

&lt;p&gt;Como vamos criar um simples blog, e n√£o vamos fazer nada complexo, deixaremos somente estes campos, voc√™ pode criar mais campos como texto de introdu√ß√£o, etc, nesse momento vamos deixar assim, e quando o console nos perguntar novamente sobre um novo campo, n√£o vamos digitar nada, apena vamos dar um enter, para entrarmos no processo de finaliza√ß√£o.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New field name (press  to stop adding fields):
&lt;/pre&gt;

&lt;p&gt;Ap√≥s o enter, ele nos pergunta se queremos criar uma classe de reposit√≥rio vazia para a nossa entidade Post, e por padr√£o, nos indica [n√£o], no momento n√£o vamos usar reposit√≥rios, abordaremos isso mais pra frente, novamente damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you want to generate an empty repository class [no]?
&lt;/pre&gt;

&lt;p&gt;Nesse momento o console nos pergunta, se confirmamos a gera√ß√£o da nossa entidade, por padr√£o ele nos indica [Sim], como queremos, damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you confirm generation [yes]? 
&lt;/pre&gt;

&lt;p&gt;Pronto, nossa primeira entidade est√° criada!&lt;/p&gt;

&lt;p&gt;Ao entrarmos em nosso projeto, notaremos que uma pasta &amp;#8220;Entity&amp;#8221; foi criada, e nela teremos nossa entidade &amp;#8220;Post&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/02/011.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/011.png&#34; alt=&#34;Criando entidades no symfony&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-46965&#34; srcset=&#34;uploads/2015/02/011.png 750w, uploads/2015/02/011-259x139.png 259w, uploads/2015/02/011-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nossa entidade Post criada:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\ModelBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * Post
 *
 * @ORM\Table()
 * @ORM\Entity
 */
class Post
{
    /**
     * @var integer
     *
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;)
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name=&#34;title&#34;, type=&#34;string&#34;, length=255)
     */
    private $title;

    /**
     * @var string
     *
     * @ORM\Column(name=&#34;content&#34;, type=&#34;text&#34;)
     */
    private $content;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name=&#34;createdAt&#34;, type=&#34;datetime&#34;)
     */
    private $createdAt;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name=&#34;updatedAt&#34;, type=&#34;datetime&#34;)
     */
    private $updatedAt;


    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this-&amp;gt;id;
    }

    /**
     * Set title
     *
     * @param string $title
     * @return Post
     */
    public function setTitle($title)
    {
        $this-&amp;gt;title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string 
     */
    public function getTitle()
    {
        return $this-&amp;gt;title;
    }

    /**
     * Set content
     *
     * @param string $content
     * @return Post
     */
    public function setContent($content)
    {
        $this-&amp;gt;content = $content;

        return $this;
    }

    /**
     * Get content
     *
     * @return string 
     */
    public function getContent()
    {
        return $this-&amp;gt;content;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     * @return Post
     */
    public function setCreatedAt($createdAt)
    {
        $this-&amp;gt;createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime 
     */
    public function getCreatedAt()
    {
        return $this-&amp;gt;createdAt;
    }

    /**
     * Set updatedAt
     *
     * @param \DateTime $updatedAt
     * @return Post
     */
    public function setUpdatedAt($updatedAt)
    {
        $this-&amp;gt;updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime 
     */
    public function getUpdatedAt()
    {
        return $this-&amp;gt;updatedAt;
    }
}

&lt;/pre&gt;

&lt;h2 id=&#34;configurando-a-entidade&#34;&gt;Configurando a entidade&lt;/h2&gt;

&lt;p&gt;Vamos fazer algumas modifica√ß√µes.&lt;/p&gt;

&lt;p&gt;Daremos o nome &amp;#8220;post&amp;#8221; pra nossa tabela quando ela for criada, para isso temos que configurar via annotation para que o Doctrine saiba. Para fazer isso vamos adicionar na linha 10 a annotation correspondente:&lt;/p&gt;

&lt;p&gt;Obs: As annotations do Doctrine, come√ßam com &amp;#8220;@ORM&amp;amp;#8221;, o restante √© documenta√ß√£o‚Ä¶&lt;/p&gt;

&lt;p&gt;Verifique a altera√ß√£o na linha 10, vamos inserir: (name=‚Äùpost‚Äù).&lt;/p&gt;

&lt;p&gt;Caso n√£o fa√ßamos essa altera√ß√£o, n√£o ocorrer√° erro, por√©m por padr√£o o Doctrine criar√° uma tabela com o nome da classe &amp;#8220;Post&amp;#8221;, com a letra ‚ÄúP‚Äù mai√∫scula.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
 * Post
 *
 * @ORM\Table(name=&#34;post&#34;)
 * @ORM\Entity
 */
class Post
{
...
&lt;/pre&gt;

&lt;p&gt;Mudaremos tamb√©m o nome da coluna &amp;#8220;createdAt&amp;#8221; para &amp;#8220;creadet_at&amp;#8221; na linha 41 de nossa entidade, no caso do c√≥digo abaixo, a linha 4.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
 * @var \DateTime
 *
 * @ORM\Column(name=&#34;created_at&#34;, type=&#34;datetime&#34;)
 */
 private $createdAt;
...
&lt;/pre&gt;

&lt;p&gt;E a linha 48, de &amp;#8220;updatedAt&amp;#8221; para &amp;#8220;updated_at&amp;#8221;, no c√≥digo abaixo a linha 4.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
 * @var \DateTime
 *
 * @ORM\Column(name=&#34;updated_at&#34;, type=&#34;datetime&#34;)
 */
 private $updatedAt;
...
&lt;/pre&gt;

&lt;p&gt;Precisamos que, ao criarmos nosso post, seja inserido automaticamente a data de cria√ß√£o, e a data de atualiza√ß√£o, para isso vamos criar um m√©todo construtor em nossa entidade, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
 * Construct
 */
 public function __construct()
 {
    $this-&amp;gt;createdAt = new \DateTime();
    $this-&amp;gt;updatedAt = new \DateTime();
 }
&lt;/pre&gt;

&lt;h2 id=&#34;validando&#34;&gt;Validando&lt;/h2&gt;

&lt;p&gt;Agora vamos fazer uma valida√ß√£o, para que nossos campos &amp;#8220;title&amp;#8221; e &amp;#8220;content&amp;#8221;, n√£o aceitem conte√∫dos nulos, em brancos. Para isso chamaremos a classe Constraints do Symfony, dando um &amp;#8220;use&amp;#8221; nesse objeto em nossa entidade, por padr√£o daremos o apelido de Assert para Constraints. Veja na linha 06:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\ModelBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Post
 *
 * @ORM\Table(name=&#34;post&#34;)
 * @ORM\Entity
 */
class Post
{
&lt;/pre&gt;

&lt;p&gt;Para que a valida√ß√£o seja feita colocaremos a annotation &amp;#8220;@Assert\NotBlank&amp;#8221; nos campos que queremos, veja na linha 5 e na linha 13:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
 * @var string
 *
 * @ORM\Column(name=&#34;title&#34;, type=&#34;string&#34;, length=255)
 * @Assert\NotBlank
 */
 private $title;

 /**
 * @var string
 *
 * @ORM\Column(name=&#34;content&#34;, type=&#34;text&#34;)
 * @Assert\NotBlank
 */
 private $content;
&lt;/pre&gt;

&lt;p&gt;Pronto! Nossa entidade Post est√° criada e configurada, por√©m faremos modifica√ß√µes no fututo para que ela se adeque melhor em nosso projeto.&lt;/p&gt;

&lt;h2 id=&#34;gerando-crud-com-doctrine-orm&#34;&gt;Gerando CRUD com Doctrine ORM&lt;/h2&gt;

&lt;p&gt;Agora que nossa entidade est√° conclu√≠da, vamos fazer um CRUD, para que possamos inserir, atualizar, visualizar e deletar nossos posts.&lt;/p&gt;

&lt;p&gt;Por√©m antes, precisamos criar nossas tabelas, para fazer isso, vamos voltar para o terminal e digitar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:create
&lt;/pre&gt;

&lt;p&gt;Receberemos a resposta do console:&lt;/p&gt;

&lt;p&gt;&amp;#8220;ATEN√á√ÉO: Esta opera√ß√£o n√£o deve ser executado em um ambiente de produ√ß√£o.&lt;/p&gt;

&lt;p&gt;Cria√ß√£o de esquema de banco de dados&amp;#8230;&lt;/p&gt;

&lt;p&gt;Esquema de banco de dados criado com sucesso!&amp;#8221;&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ATTENTION: This operation should not be executed in a production environment.

Creating database schema...
Database schema created successfully!
&lt;/pre&gt;

&lt;p&gt;Vamos ao CRUD! Para fazer um CRUD com Doctrine, √© extremamente f√°cil, vamos digitar no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:crud
&lt;/pre&gt;

&lt;p&gt;Ao digitarmos o comando acima e darmos o enter, entramos no assistente para criarmos nosso CRUD, e ele nos pede para que informemos a entidade que queremos criar o CRUD, ent√£o digitamos: TablelessModelBundle:Post&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ The Entity shortcut name: TablelessModelBundle:Post
&lt;/pre&gt;

&lt;p&gt;Logo ap√≥s, nos pergunta se queremos gerar as a√ß√µes de &amp;#8220;grava√ß√£o&amp;#8221;, ele nos indica [n√£o], por√©m n√≥s queremos, ent√£o digitamos &amp;#8220;yes&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you want to generate the &#34;write&#34; actions [no]? yes
&lt;/pre&gt;

&lt;p&gt;Nos pergunta como vamos configurar nosso CRUD, e nos indica [annotation], s√≥ damos um enter para prosseguir.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Configuration format (yml, xml, php, or annotation) [annotation]:
&lt;/pre&gt;

&lt;p&gt;Ap√≥s o enter, nos pergunta como vai ser a rota que vamos usar, e nos indica [/post], vamos usar essa mesma, damos um enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Routes prefix [/post]:
&lt;/pre&gt;

&lt;p&gt;Nos pergunta se confirmamos a gera√ß√£o, e nos indica [yes], sim queremos, damos enter para prosseguir.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you confirm generation [yes]?
&lt;/pre&gt;

&lt;p&gt;Pronto! CRUD criado, simples n√£o!&lt;/p&gt;

&lt;p&gt;Nesse momento vamos fazer uma configura√ß√£o somente para vermos nossa aplica√ß√£o rodando, por√©m n√£o vamos usar essa rota, √© somente para vermos se est√° tudo certo. Entre no arquivo app/config/route.yml e vamos adicionar a rota desse CRUD:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;tableless_model:
    resource: &#34;@TablelessModelBundle/Controller/&#34;
    type:     annotation
    prefix:   /
&lt;/pre&gt;

&lt;p&gt;Agora vamos rodar nosso aplica√ß√£o pelo console:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console server:run
&lt;/pre&gt;

&lt;p&gt;E vamos entrar no navegador com a url:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/post/&#34;&gt;http://127.0.0.1:8000/post/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para inserirmos um novo post, √© s√≥ dar um clique, em &amp;#8220;Create a new entry&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Eu inseri um post, com um texto ‚ÄúLorem Ipsum‚Äù, apenas para reprodu√ß√£o das p√°ginas, veja o resultado abaixo:&lt;/p&gt;

&lt;p&gt;Lista de posts = url: &lt;a href=&#34;http://127.0.0.1:8000/post/&#34;&gt;http://127.0.0.1:8000/post/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Novo post = url: &lt;a href=&#34;http://127.0.0.1:8000/post/new&#34;&gt;http://127.0.0.1:8000/post/new&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ver o post = url: &lt;a href=&#34;http://127.0.0.1:8000/post/1&#34;&gt;http://127.0.0.1:8000/post/1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Editar post = url: &lt;a href=&#34;http://127.0.0.1:8000/post/1/edit&#34;&gt;http://127.0.0.1:8000/post/1/edit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/02/031.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/031.png&#34; alt=&#34;P√°ginas criadas&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47111&#34; srcset=&#34;uploads/2015/02/031.png 750w, uploads/2015/02/031-259x139.png 259w, uploads/2015/02/031-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao navegar pelas p√°ginas, verificar√°, que n√£o tem estiliza√ß√£o, por√©m est√° funcional, vamos fazer isso mais tarde, poder√° verificar tamb√©m seu banco de dados, e ver√° que foi criado um banco de dados com o nome &amp;#8220;symfony&amp;#8221;, nesse banco, encontrar√° a tabela &amp;#8220;post&amp;#8221; que criamos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/02/021.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/021.png&#34; alt=&#34;Table post no banco de dados&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47098&#34; srcset=&#34;uploads/2015/02/021.png 750w, uploads/2015/02/021-259x139.png 259w, uploads/2015/02/021-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;Uma observa√ß√£o importante, estamos criando nossos c√≥digos por linha de comando usando o console, √© uma forma de mostrar a agilidade e produtividade, que o Symfony e o Doctrine nos permite, por√©m para entender o m√≠nimo, o funcionamento do Symfony, ou de qualquer outro framework PHP, √© de extrema import√¢ncia saber PHP Orientado a Objetos, padr√£o MVC e outros Design Patterns. Fazer a reprodu√ß√£o codificando, sem usar o console, √© uma boa forma de aprender e entender o funcionamento do Symfony.&lt;/p&gt;

&lt;p&gt;Este projeto &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;GitHub do projeto&#34; target=&#34;_blank&#34;&gt;encontra-se no gitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2/</guid>
      <description>

&lt;p&gt;O symfony √© um framework fullstack de aplica√ß√µes web para as necessidades de alto desempenho, √© um conjunto de componentes PHP, para grandes e avan√ßados projetos, por√©m podemos instalar seus componentes separadamente em casos de projetos menores. √â muito respeitado pela comunidade, n√£o √© apenas um Framework popular, mas tamb√©m √© uma das melhores plataformas para construir projetos Open-Source. Muitos projetos PHP est√£o incorporando alguns dos componentes ou est√£o usando o framework full-stack, projetos como &lt;a title=&#34;DrupAl&#34; href=&#34;http://symfony.com/projects/drupal&#34; target=&#34;_blank&#34;&gt;Drupal&lt;/a&gt;, &lt;a title=&#34;Laravel&#34; href=&#34;http://symfony.com/projects/laravel&#34; target=&#34;_blank&#34;&gt;Laravel&lt;/a&gt;, entre outros, &lt;a title=&#34;Projetos com Symfony&#34; href=&#34;http://symfony.com/projects&#34; target=&#34;_blank&#34;&gt;veja a lista&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;iniciando&#34;&gt;Iniciando&lt;/h2&gt;

&lt;p&gt;Vou abordar nesse simples tutorial a instala√ß√£o do Symfony, para que, em tutoriais futuros possamos dar continuidade a dicas mais avan√ßadas.&lt;/p&gt;

&lt;p&gt;Primeiramente vamos criar uma pasta, para que nosso projeto se mantenha organizado, digitando o comando no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ mkdir tableless&lt;/pre&gt;

&lt;p&gt;Ap√≥s a cria√ß√£o da pasta, vamos entrar na mesma, com o comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ cd tableless&lt;/pre&gt;

&lt;h2 id=&#34;instala√ß√£o&#34;&gt;Instala√ß√£o&lt;/h2&gt;

&lt;p&gt;Vamos instalar o Symfony via composer, caso n√£o o conhe√ßa, ou tenha d√∫vidas, leia este post (&lt;a title=&#34;Composer para iniciantes&#34; href=&#34;//tableless.com.br/composer-para-iniciantes/&#34; target=&#34;_blank&#34;&gt;Composer para iniciantes&lt;/a&gt;). Para fazermos o Download do Symfony entramos no &lt;a title=&#34;Symfony Download&#34; href=&#34;http://symfony.com/download&#34; target=&#34;_blank&#34;&gt;site&lt;/a&gt; e copiamos o comando, como na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/01/01.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-46532&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/01/01.png&#34; alt=&#34;Download do Symfony&#34; width=&#34;750&#34; height=&#34;403&#34; srcset=&#34;uploads/2015/01/01.png 750w, uploads/2015/01/01-259x139.png 259w, uploads/2015/01/01-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos trocar o final do c√≥digo, onde est√° path/ vamos colocar symfony/ que ser√° a pasta onde instalaremos o Symfony, o comando ficar√° assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ composer create-project symfony/framework-standard-edition symfony/&lt;/pre&gt;

&lt;p&gt;Ao darmos enter, a instala√ß√£o ir√° come√ßar como na imagem abaixo, isso poder√° demorar alguns minutos, j√° que o composer ir√° baixar a distribui√ß√£o padr√£o do Symfony, juntamente com todas as suas bibliotecas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/01/02.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-46533&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/01/02.png&#34; alt=&#34;Instala√ß√£o do symfony&#34; width=&#34;750&#34; height=&#34;403&#34; srcset=&#34;uploads/2015/01/02.png 750w, uploads/2015/01/02-259x139.png 259w, uploads/2015/01/02-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao baixar todos os componentes, a instala√ß√£o do symfony vai nos fazer diversas perguntas.&lt;/p&gt;

&lt;p&gt;1¬∫ &amp;#8211; Gostaria de instalar Acme demo bundle? [y/N] digitamos &amp;#8220;N&amp;#8221; e damos enter.&lt;/p&gt;

&lt;p&gt;O Acme demo bundle √© apenas uma demonstra√ß√£o de alguns recursos que podemos trabalhar, e nesse caso n√£o vamos instalar!&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Would you like to install Acme demo bundle? [y/N]:N&lt;/pre&gt;

&lt;p&gt;2¬∫ &amp;#8211; O symfony nos pergunta qual o drive de banco de dados que vamos utilizar.&lt;/p&gt;

&lt;p&gt;Em nosso caso vamos usar o PDO, que hoje √© &lt;a title=&#34;PHP PDO&#34; href=&#34;http://php.net/manual/pt_BR/book.pdo.php&#34; target=&#34;_blank&#34;&gt;basicamente um padr√£o do PHP&lt;/a&gt;, e o pr√≥prio symfony nos recomenda, damos apenas um enter para continuar.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ database_driver (pdo_mysql):&lt;/pre&gt;

&lt;p&gt;3¬∫ &amp;#8211; Nos pergunta qual o host do banco de dados, como estamos em localhost apenas damos um enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ database_host (127.0.0.1):&lt;/pre&gt;

&lt;p&gt;4¬∫ &amp;#8211; Qual a porta que vamos usar, por defult vamos deixar como est√°, e damos um Enter&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ database_port (null)&lt;/pre&gt;

&lt;p&gt;5¬∫ &amp;#8211; Qual o nome do banco de dados vamos usar, nesse caso, vamos deixar como est√°, mas voc√™ pode utilizar o nome que quiser, e damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ database_name (symfony):&lt;/pre&gt;

&lt;p&gt;6¬∫ &amp;#8211; Qual o nome do nosso usu√°rio do banco, no meu caso vou deixar como est√°, meu usu√°rio √© root, damos um enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ database_user (root):&lt;/pre&gt;

&lt;p&gt;7¬∫ &amp;#8211; Qual √© nossa senha, no meu caso √© root, deixo assim em ambiente de desenvolvimento, digito root e dou enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ database_password (null): root&lt;/pre&gt;

&lt;p&gt;8¬∫ &amp;#8211; Nos pergunta sobre nossos dados de e-mail, vamos apenas dar um enter, pois n√£o vamos usar agora.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ mailer_transport (smtp):&lt;/pre&gt;

&lt;p&gt;9¬∫ &amp;#8211; Qual o host de e-mail, apenas damos um enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ mailer_host (127.0.0.1):&lt;/pre&gt;

&lt;p&gt;10¬∫ &amp;#8211; Nos pergunta sobre o usu√°rio de e-mail, damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ mailer_user (null):&lt;/pre&gt;

&lt;p&gt;11¬∫ &amp;#8211; Nos pergunta sobre a senha, enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ mailer_password (null):&lt;/pre&gt;

&lt;p&gt;12¬∫ &amp;#8211; Sobre localidade, e digitamos pt_BR, e enter&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ locale (en): pt_BR&lt;/pre&gt;

&lt;p&gt;13¬∫ &amp;#8211; Nos pergunta sobre a chave secreta de nossa aplica√ß√£o, vamos deixar como est√°, apenas damos um enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ secret (ThisTokenIsNotSoSecretChangeIt):&lt;/pre&gt;

&lt;p&gt;Segue a imagem para compara√ß√£o, se tudo ocorreu bem, ficar√° assim:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/01/03.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-46534&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/01/03.png&#34; alt=&#34;Instalando Symfony&#34; width=&#34;750&#34; height=&#34;403&#34; srcset=&#34;uploads/2015/01/03.png 750w, uploads/2015/01/03-259x139.png 259w, uploads/2015/01/03-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;rodando-a-aplica√ß√£o&#34;&gt;Rodando a aplica√ß√£o&lt;/h2&gt;

&lt;p&gt;Pronto, o Symfony est√° instalado!&lt;/p&gt;

&lt;p&gt;Para v√™-lo rodando vamos iniciar nosso servidor.&lt;/p&gt;

&lt;p&gt;A partir do PHP 5.4, o pr√≥prio vem com um servidor web embutido (&lt;a title=&#34;Manual Servidor PHP&#34; href=&#34;http://php.net/manual/pt_BR/features.commandline.webserver.php&#34; target=&#34;_blank&#34;&gt;PHP&amp;#8217;s built-in Web Server&lt;/a&gt;). Ele pode ser usado para executar suas aplica√ß√µes PHP localmente durante o desenvolvimento, para testar ou para demonstra√ß√µes de aplicativos. Desta forma, voc√™ n√£o tem que se preocupar em configurar um servidor full-featured web como o Apache ou Nginx.&lt;/p&gt;

&lt;p&gt;Para iniciarmos o servidor do php digitamos no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php -S 127.0.0.1:8080&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php -S 127.0.0.1:8080 -t public_html/&lt;/pre&gt;

&lt;p&gt;para indicar que seu index.php est√° na pasta public_html.&lt;/p&gt;

&lt;p&gt;Mas em nosso caso, n√£o vamos utilizar os comandos citados acima, como estamos usando o Symfony, entramos em nossa pasta, que est√° instalado o projeto:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ cd symfony&lt;/pre&gt;

&lt;p&gt;e digitamos:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console server:run&lt;/pre&gt;

&lt;p&gt;e teremos a resposta:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Server running on http://127.0.0.1:800&lt;/pre&gt;

&lt;p&gt;Abrimos nosso navegador e digitamos a url: &lt;a href=&#34;http://127.0.0.1:8000/&#34;&gt;http://127.0.0.1:8000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E Pronto!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/01/04.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-46535&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/01/04.png&#34; alt=&#34;P√°gina do Symfony&#34; width=&#34;736&#34; height=&#34;403&#34; srcset=&#34;uploads/2015/01/04.png 736w, uploads/2015/01/04-254x139.png 254w, uploads/2015/01/04-400x219.png 400w&#34; sizes=&#34;(max-width: 736px) 100vw, 736px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ir√° aparecer um erro na tela, por n√£o termos configurado as nossas rotas no Controller, por√©m sabemos que nossa aplica√ß√£o est√° rodando. O Symfony gera uma rota de teste automaticamente, e para vermos se est√° tudo certo sem erros, ent√£o digitamos em nosso navegador a url:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/app/example&#34;&gt;http://127.0.0.1:8000/app/example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aparecer√° uma p√°gina em branco escrita Homepage, junto com a barra de debug do Symfony (a debug toolbar) utilizada em desenvolvimento, que estar√° no rodap√©!&lt;/p&gt;

&lt;p&gt;O Symfony est√° rodando com sucesso!&lt;/p&gt;

&lt;h2 id=&#34;olhando-rapidamente-para-a-debug-toolbar&#34;&gt;Olhando rapidamente para a debug toolbar&lt;/h2&gt;

&lt;p&gt;A debug toolbar √© uma barra de ferramentas do Symfony, fant√°stica, que nos traz informa√ß√µes valiosas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/01/061.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-46590&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/01/061.png&#34; alt=&#34;Debug toolbar Symfony2&#34; width=&#34;750&#34; height=&#34;83&#34; srcset=&#34;uploads/2015/01/061.png 750w, uploads/2015/01/061-265x29.png 265w, uploads/2015/01/061-400x44.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1 &amp;#8211; No in√≠cio temos o √≠cone do Symfony, que ao colocarmos o ponteiro do mouse em cima, a barra nos mostra a vers√£o do Symfony juntamente com um link para a documenta√ß√£o.&lt;/p&gt;

&lt;p&gt;2 &amp;#8211; Informa√ß√µes sobre o PHP, como vers√£o e extens√µes usadas, e ao clicarmos, nos retorna uma p√°gina com um phpinfo(), onde est√£o todas as configura√ß√µes do PHP de nossa m√°quina.&lt;/p&gt;

&lt;p&gt;3 &amp;#8211; Informa√ß√µes a respeito da requisi√ß√£o principal de nossa aplica√ß√£o, indicando, que estamos em ambiente de desenvolvimento e o token de requisi√ß√£o.&lt;/p&gt;

&lt;p&gt;4 &amp;#8211; Informa√ß√µes sobre o status code, o Controller e Action de nossa p√°gina, o nome da rota que estamos acessando e se temos ou n√£o uma sess√£o.&lt;/p&gt;

&lt;p&gt;5 &amp;#8211; Requisi√ß√µes de AJAX.&lt;/p&gt;

&lt;p&gt;6 &amp;#8211; Tempo em que nossa p√°gina demorou pra carregar.&lt;/p&gt;

&lt;p&gt;7 &amp;#8211; Quantidade de mem√≥ria que a aplica√ß√£o utilizou.&lt;/p&gt;

&lt;p&gt;8 &amp;#8211; Informa√ß√µes, quantidade de formul√°rios.&lt;/p&gt;

&lt;p&gt;9 &amp;#8211; Informa√ß√£o sobre autentica√ß√£o, usu√°rios an√¥nimos, admins, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;10 &amp;#8211; Informa√ß√µes sobre consultas no banco de dados, tempos de queries, &amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;configura√ß√µes-b√°sicas&#34;&gt;Configura√ß√µes b√°sicas&lt;/h2&gt;

&lt;p&gt;Vamos deixar nosso projeto um pouco mais limpo, excluindo os arquivos de UPGRADEs.md, que n√£o tem relev√¢ncia em nossa aplica√ß√£o nesse momento.&lt;/p&gt;

&lt;p&gt;Podemos excluir os arquios:&lt;/p&gt;

&lt;p&gt;UPGRADE.md&lt;/p&gt;

&lt;p&gt;UPGRADE-2.2.md&lt;/p&gt;

&lt;p&gt;UPGRADE-2.3.md&lt;/p&gt;

&lt;p&gt;UPGRADE-2.4.md&lt;/p&gt;

&lt;p&gt;Tamb√©m vamos modificar o conte√∫do do nosso arquivo README.md, lembrando que a linguagem usada nesse arquivo √© Markdown, para ser lida pelo GitHub, &lt;a title=&#34;No√ß√µes b√°sicas de Markdown&#34; href=&#34;https://help.github.com/articles/markdown-basics/&#34; target=&#34;_blank&#34;&gt;nesse link&lt;/a&gt; voc√™ encontra algumas no√ß√µes b√°sicas.&lt;/p&gt;

&lt;p&gt;Apague todo o conte√∫do do arquivo, que pode ser feito por um simples editor de texto, como bloco de notas, pela IDE de sua prefer√™ncia, ou at√© mesmo pelo vim no terminal!&lt;/p&gt;

&lt;p&gt;E adicionamos o conte√∫do abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-markdown&#34;&gt;Iniciando com Symfony 2
=======================

http://tableless.com.br/
-----------------------

**Tutorial do Portal Tableless**

&amp;gt;1¬∫ -  *Iniciando com Symfony 2*
&lt;/pre&gt;

&lt;p&gt;Podemos modificar o conte√∫do do arquivo composer.json somente as linhas 2 e 5.&lt;/p&gt;

&lt;p&gt;De:&lt;/p&gt;

&lt;pre class=&#34;lang-json&#34;&gt;&#34;name&#34;: &#34;symfony/framework-standard-edition&#34;,
&#34;description&#34;: &#34;The \&#34;Symfony Standard Edition\&#34; distribution&#34;,
&lt;/pre&gt;

&lt;p&gt;Para:&lt;/p&gt;

&lt;pre class=&#34;lang-json&#34;&gt;&#34;name&#34;: &#34;tableless/iniciando-com-Symfony&#34;,
&#34;description&#34;: &#34;Tableless: Iniciando com Framework Symfony 2&#34;,
&lt;/pre&gt;

&lt;h2 id=&#34;controlando-nossa-aplica√ß√£o&#34;&gt;Controlando nossa aplica√ß√£o&lt;/h2&gt;

&lt;p&gt;Ap√≥s essas simples configura√ß√µes iniciais, podemos iniciar o Git em nosso projeto, para termos maior controle sobre nossa aplica√ß√£o, n√£o abordaremos conceitos sobre Git, mas em caso de &lt;a title=&#34;Comandos iniciais Git&#34; href=&#34;http://tableless.com.br/alguns-comandos-git/&#34; target=&#34;_blank&#34;&gt;d√∫vidas, Consulte&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;O projeto se encontra no &lt;a title=&#34;GitHub Candido Souza&#34; href=&#34;https://github.com/candidosouza/tableless&#34; target=&#34;_blank&#34;&gt;meu GitHub&lt;/a&gt;, assim ficar√° mais f√°cil para voc√™ analisar, estudar e comparar os c√≥digos como o seu projeto! Lembrando que at√© o momento s√≥ instalamos o Symfony2, mas nos pr√≥ximos tutoriais daremos continuidade ao nossos exemplos!&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;Para finalizarmos, recomendo a &lt;a title=&#34;Documenta√ß√£o do Symfony&#34; href=&#34;http://symfony.com/doc/current/index.html&#34; target=&#34;_blank&#34;&gt;documenta√ß√£o do Symfony&lt;/a&gt;, √≥tima para estudos!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rastreando exce√ß√µes no PHP com o Airbrake</title>
      <link>https://tableless.github.io/hugo-public/rastreando-excecoes-no-php-com-o-airbrake/</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/rastreando-excecoes-no-php-com-o-airbrake/</guid>
      <description>

&lt;p&gt;Identificar¬†erros, e suas causas, em uma aplica√ß√£o web pode se¬†tornar uma¬†tarefa complicada. Ter algumas ferramentas √† m√£o pode simplificar bastante essa miss√£o.&lt;/p&gt;

&lt;p&gt;Algo que provavelmente¬†ajuda a rastrear¬†uma falha s√£o os logs da aplica√ß√£o ou do servidor onde ela est√° sendo executada, mas n√£o √© f√°cil encontrar algo espec√≠fico, especialmente se o volume de registros √© grande.&lt;/p&gt;

&lt;p&gt;Outra situa√ß√£o desagrad√°vel √© quando os erros acontecem em situa√ß√µes espec√≠ficas, dif√≠ceis¬†de reproduzir.&lt;/p&gt;

&lt;p&gt;Ainda pode haver um cen√°rio em que as¬†exce√ß√µes acontecem com os usu√°rios, mas nunca s√£o reportadas aos desenvolvedores. E como verificar logs proativamente √© algo muito improv√°vel, esses erros ficam no esquecimento.&lt;/p&gt;

&lt;p&gt;Pensando¬†nesses obst√°culos, o &lt;a title=&#34;Airbrake&#34; href=&#34;https://airbrake.io/&#34; target=&#34;_blank&#34;&gt;Airbrake&lt;/a&gt; pode facilitar muito a vida de quem desenvolve e mant√©m software para web. Conheci ele usando o &lt;a title=&#34;Codebase&#34; href=&#34;https://www.codebasehq.com/&#34; target=&#34;_blank&#34;&gt;Codebase&lt;/a&gt; (tamb√©m uma excelente ferramenta, por√©m¬†para gerenciamento de projetos), que tem integra√ß√£o na parte de tickets/rastreamento de bugs.&lt;/p&gt;

&lt;h2 id=&#34;1-qual-√©-a-m√°gica&#34;&gt;1. Qual √© a m√°gica?&lt;/h2&gt;

&lt;p&gt;O princ√≠pio do funcionamento do Airbrake √© bem simples: toda vez que uma exce√ß√£o ou erro s√£o gerados, as informa√ß√µes sobre a requisi√ß√£o, sess√£o do usu√°rio e ambiente s√£o enviadas para o servidor atrav√©s da API. A partir dessas informa√ß√µes, s√£o gerados relat√≥rios e √© poss√≠vel realizar buscas no hist√≥rico. Uma grande vantagem √© que os erros s√£o agrupados, ent√£o se um mesmo acontece com frequ√™ncia n√£o ‚Äúsujar√°‚Äù o log.&lt;/p&gt;

&lt;p&gt;A cada novo erro na sua aplica√ß√£o, uma notifica√ß√£o √© enviada por e-mail.&lt;/p&gt;

&lt;h2 id=&#34;2-configurando-o-servi√ßo&#34;&gt;2. Configurando o servi√ßo&lt;/h2&gt;

&lt;p&gt;Para iniciar, voc√™ deve ter uma conta no &lt;a title=&#34;Airbrake&#34; href=&#34;https://airbrake.io/&#34; target=&#34;_blank&#34;&gt;Airbrake&lt;/a&gt;. N√£o h√° plano gratuito, mas existe um per√≠odo de testes de 30 dias.&lt;/p&gt;

&lt;p&gt;Ainda existe a op√ß√£o de usar uma alternativa open source compat√≠vel com a mesma API, que √© o &lt;a title=&#34;Errbit&#34; href=&#34;https://github.com/errbit/errbit&#34; target=&#34;_blank&#34;&gt;Errbit&lt;/a&gt;, mas nesse caso voc√™ precisa instalar o servi√ßo em um servidor pr√≥prio. Caso opte pelo Errbit, as instru√ß√µes de instala√ß√£o est√£o dispon√≠veis no reposit√≥rio do GitHub: &lt;a title=&#34;Reposit√≥rio do Errbit no GitHub&#34; href=&#34;https://github.com/errbit/errbit&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/errbit/errbit&#34;&gt;https://github.com/errbit/errbit&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;3-instala√ß√£o&#34;&gt;3. Instala√ß√£o&lt;/h2&gt;

&lt;p&gt;Como minha linguagem do dia-a-dia √© PHP, vou seguir com as instru√ß√µes focando nela, mas a l√≥gica de instala√ß√£o¬†n√£o muda muito de uma linguagem para outra. Caso precise, no site do Airbrake existem &lt;a title=&#34;Integra√ß√£o do Airbrake com linguagens&#34; href=&#34;https://airbrake.io/languages&#34; target=&#34;_blank&#34;&gt;instru√ß√µes para outras linguagens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se voc√™ j√° estiver usando o &lt;a href=&#34;https://getcomposer.org/&#34; target=&#34;_blank&#34;&gt;Composer&lt;/a&gt;, basta adicionar a depend√™ncia no arquivo &lt;strong&gt;composer.json&lt;/strong&gt; do seu projeto:&lt;/p&gt;

&lt;pre&gt;{ 
    &#34;require&#34;: {
        &#34;dbtlr/php-airbrake&#34;: &#34;dev-master&#34;
    }
}&lt;/pre&gt;

&lt;p&gt;Se n√£o usa o Composer, essa √© uma √≥tima oportunidade para come√ßar. O Andre Cardoso escreveu sobre ele aqui no Tableless: &lt;a title=&#34;Composer para iniciantes&#34; href=&#34;http://tableless.com.br/composer-para-iniciantes/&#34; target=&#34;_blank&#34;&gt;Composer para iniciantes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Caso n√£o esteja usando um framework, provavelmente precisar√° adicionar a chamada ao class loader do Composer:&lt;/p&gt;

&lt;pre&gt;require_once &#39;vendor/autoload.php&#39;;&lt;/pre&gt;

&lt;h2 id=&#34;4-integra√ß√£o&#34;&gt;4. Integra√ß√£o&lt;/h2&gt;

&lt;p&gt;Agora voc√™ precisa fazer com que as exce√ß√µes e erros do PHP sejam enviadas para a o Airbrake, para isso voc√™ tem pelo menos dois caminhos poss√≠veis de acordo com a estrutura do seu projeto:&lt;/p&gt;

&lt;h3 id=&#34;sem-framework-ou-com-um-framework-que-n√£o-tem-manipula√ß√£o-de-exce√ß√µes&#34;&gt;Sem framework ou com um framework que n√£o tem manipula√ß√£o de exce√ß√µes&lt;/h3&gt;

&lt;p&gt;Nesse caso, basta usar a manipula√ß√£o de exce√ß√µes da pr√≥pria API, assim:&lt;/p&gt;

&lt;pre&gt;Airbrake\EventHandler::start(&#39;API_KEY‚Äô);&lt;/pre&gt;

&lt;p&gt;Lembrando de substituir o &lt;strong&gt;API_KEY&lt;/strong&gt; pela sua pr√≥pria chave da API do Airbrake.&lt;/p&gt;

&lt;p&gt;Adicionando essa chamada logo no in√≠cio do seu script ou em um dos pontos de entrada da sua aplica√ß√£o as fun√ß√µes set_exception_handler e set_error_handler, do PHP, s√£o chamadas.&lt;/p&gt;

&lt;h3 id=&#34;com-framework-que-tem-manipula√ß√£o-de-exce√ß√µes&#34;&gt;Com framework que tem manipula√ß√£o de exce√ß√µes&lt;/h3&gt;

&lt;p&gt;Para registrar a API, basta usar o seguinte trecho de c√≥digo junto ao manipulador de exce√ß√µes do seu framework:&lt;/p&gt;

&lt;pre&gt;$config = new Airbrake\Configuration(&#39;API_KEY&#39;);
$client = new Airbrake\Client($config);
$client-&amp;gt;notifyOnException($exception);&lt;/pre&gt;

&lt;p&gt;Para facilitar, para alguns, vou dar o exemplo em dois frameworks que tenho usado:&lt;/p&gt;

&lt;h4 id=&#34;com-laravel&#34;&gt;Com Laravel&lt;/h4&gt;

&lt;p&gt;Edite o arquivo &lt;strong&gt;app/start/global.php&lt;/strong&gt;, da seguinte maneira:&lt;/p&gt;

&lt;pre&gt;App::error(function (Exception $exception, $code)
{
    Log::error($exception);

    // Airbrake
    $config = new Airbrake\Configuration(&#39;API_KEY&#39;);
    $client = new Airbrake\Client($config);
    $client-&amp;gt;notifyOnException($exception);

});&lt;/pre&gt;

&lt;h4 id=&#34;com-slim-framework&#34;&gt;Com Slim Framework&lt;/h4&gt;

&lt;p&gt;Edite o arquivo &lt;strong&gt;public/index.php&lt;/strong&gt;, e adicione o seguinte trecho depois de ter instanciado a aplica√ß√£o:&lt;/p&gt;

&lt;pre&gt;$app-&amp;gt;error(function (\Exception $e) use ($app) {
    $app-&amp;gt;getLog()-&amp;gt;error($e);

    // Airbrake
    $config = new Airbrake\Configuration(&#39;API_KEY&#39;);
    $client = new Airbrake\Client($config);
    $client-&amp;gt;notifyOnException($e);

});&lt;/pre&gt;

&lt;h2 id=&#34;5-um-pequeno-exemplo-funcional&#34;&gt;5. Um pequeno exemplo funcional&lt;/h2&gt;

&lt;p&gt;Caso voc√™ queira fazer um teste r√°pido, pode usar o seguinte script e execut√°-lo (depois de ter instalado a depend√™ncia com Composer).&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
require_once &#39;vendor/autoload.php&#39;;
Airbrake\EventHandler::start(&#39;API_KEY&#39;);

throw new Exception(&#39;Testando o Airbrake&#39;);&lt;/pre&gt;

&lt;p&gt;A cada execu√ß√£o desse script, um novo registro de exce√ß√£o deve ser gravado na sua conta no Airbrake.&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;O Airbrake n√£o √© a √∫nica op√ß√£o dispon√≠vel para gerenciar e rastrear as exce√ß√µes da sua aplica√ß√£o (apenas para citar mais uma op√ß√£o, tenho usado o &lt;a title=&#34;Sentry&#34; href=&#34;https://www.getsentry.com/&#34; target=&#34;_blank&#34;&gt;Sentry&lt;/a&gt; com sucesso em pelo menos um projeto), mas pode ser um ponto de partida interessante para que voc√™ tenha uma vis√£o diferente, e mais pr√°tica, sobre os erros do seu c√≥digo.&lt;/p&gt;

&lt;p&gt;Caso voc√™ opte por usar o Errbit, talvez precise de algumas configura√ß√µes mais avan√ßadas (como determinar o host ou resource do servi√ßo, por exemplo), ent√£o a documenta√ß√£o oficial da bilbioteca para PHP pode te ajudar: &lt;a title=&#34;Op√ß√µes de configura√ß√µes do PHP Airbrake&#34; href=&#34;https://github.com/dbtlr/php-airbrake#configuration-options&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/dbtlr/php-airbrake#configuration-options&#34;&gt;https://github.com/dbtlr/php-airbrake#configuration-options&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O que √© Node.js e saiba os primeiros passos</title>
      <link>https://tableless.github.io/hugo-public/o-que-nodejs-primeiros-passos-com-node-js/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-que-nodejs-primeiros-passos-com-node-js/</guid>
      <description>

&lt;h2 id=&#34;o-que-√©-node-js&#34;&gt;O que √© Node.js?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nodejs.org/&#34; rel=&#34;noreferrer&#34;&gt;Node.js&lt;/a&gt; √© uma plataforma para desenvolvimento de aplica√ß√µes &lt;em&gt;server-side&lt;/em&gt; baseadas em rede utilizando &lt;strong&gt;JavaScript&lt;/strong&gt; e o &lt;strong&gt;V8 JavaScript Engine&lt;/strong&gt;, ou seja, com &lt;strong&gt;Node.js&lt;/strong&gt; podemos criar uma variedade de aplica√ß√µes &lt;em&gt;Web&lt;/em&gt; utilizando apenas c√≥digo em &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Em uma primeira an√°lise essa informa√ß√£o pode n√£o parecer t√£o interessante, uma vez que existem diversas outras maneiras em que esses tipos de servi√ßos podem ser implementados. Mas se pensarmos um pouco mais sobre as demandas de aplica√ß√µes na internet e o modo em que o c√≥digo em &lt;strong&gt;JavaScript&lt;/strong&gt; pode ser estruturado, vamos nos deparar com uma gama de novas possibilidades para desenvolvimento &lt;em&gt;Web&lt;/em&gt;, e provavelmente nos juntar √† crescente comunidade que tem adotado essa plataforma.&lt;/p&gt;

&lt;p&gt;Uma importante diferen√ßa est√° no fato do Node ser &lt;em&gt;single threaded&lt;/em&gt;. Embora isso possa parecer uma desvantagem em um primeiro momento, o que percebemos ao desenvolver com &lt;strong&gt;Node.js&lt;/strong&gt; √© que isso simplifica extremamente a constru√ß√£o da aplica√ß√£o, e por &lt;strong&gt;Node.js&lt;/strong&gt; utilizar uma abordagem n√£o obstrutiva, essa diferen√ßa vai ser impercept√≠vel na maioria dos casos.&lt;/p&gt;

&lt;h3 id=&#34;v8-javascript-engine&#34;&gt;V8 JavaScript Engine&lt;/h3&gt;

&lt;p&gt;√â o interpretador de &lt;strong&gt;JavaScript&lt;/strong&gt; open source implementado pelo &lt;strong&gt;Google&lt;/strong&gt; em &lt;strong&gt;C++&lt;/strong&gt; e utilizado pelo &lt;strong&gt;Chrome&lt;/strong&gt;. O que sem d√∫vidas gera uma grande expectativa em rela√ß√£o ao desempenho do &lt;strong&gt;Node.js&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-node-js&#34;&gt;Instalando o Node.js&lt;/h2&gt;

&lt;p&gt;A instala√ß√£o do &lt;strong&gt;Node.js&lt;/strong&gt; √© extremamente simples gra√ßas ao fato de o &lt;strong&gt;V8 JavaScript Engine&lt;/strong&gt; ser completamente multi-plataforma, tudo que voc√™ precisa fazer √© visitar a &lt;a href=&#34;http://www.nodejs.org/&#34; rel=&#34;noreferrer&#34;&gt;p√°gina oficial do Node.js&lt;/a&gt;, clicar em &amp;#8220;INSTALL&amp;#8221; e seguir as instru√ß√µes.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;width: 100%&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/07/node_2.png&#34; alt=&#34;img node 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ap√≥s a instala√ß√£o, basta executar o seguinte comando no seu terminal para verificar se foi instalado corretamente:&lt;/p&gt;

&lt;pre class=&#34;lang-plain&#34;&gt;$ node -v
&amp;gt; v0.10.26
&lt;/pre&gt;

&lt;p&gt;deve retornar a vers√£o do node que foi instalada, como por exemplo &lt;em&gt;v0.10.26&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-web-server-8216-ol√°-mundo&#34;&gt;O web server &amp;#8216;Ol√° mundo!‚Äô&lt;/h2&gt;

&lt;p&gt;Ok, ent√£o vamos construir alguma coisa.&lt;/p&gt;

&lt;p&gt;Nosso primeiro exemplo √© um servidor que retorna a string &amp;#8216;Ol√° mundo&amp;#8217; para qualquer requisi√ß√£o. Para fazer isso utilizando Node voc√™ vai precisar de criar um arquivo &lt;strong&gt;JavaScript&lt;/strong&gt; que pode ser chamado &lt;em&gt;olanode.js&lt;/em&gt; e de tr√™s minutos do seu tempo.&lt;/p&gt;

&lt;p&gt;Escreva o seguinte c√≥digo no seu arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var http = require(&#39;http&#39;);
http.createServer(function(req,res) {
  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain; charset=utf-8&#39; }); 
  res.end(&#39;Ol√° mundo!&#39;);
}).listen(3000);
console.log(&#39;Servidor iniciado em localhost:3000. Ctrl+C para encerrar‚Ä¶&#39;);
&lt;/pre&gt;

&lt;p&gt;Para executar o seu programa Node basta o seguinte comando no seu terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-plain&#34;&gt;$ node olanode.js
&lt;/pre&gt;

&lt;p&gt;Para testar seu servidor voc√™ pode acessar &lt;em&gt;localhost:3000&lt;/em&gt; no seu navegador ou utilizar linha de comando com o comando &lt;code&gt;curl&lt;/code&gt; (em uma nova inst√¢ncia do terminal) como mostrado a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-plain&#34;&gt;$ curl http://0.0.0.0:3000/
&amp;gt; Ol√° mundo!
&lt;/pre&gt;

&lt;p&gt;Caso voc√™ prefira retornar algum &lt;em&gt;html&lt;/em&gt; v√°lido para o navegador, basta alterar &lt;code&gt;&#39;text/plain&#39;&lt;/code&gt; para &lt;code&gt;&#39;text/html&#39;&lt;/code&gt; no c√≥digo acima e utilizar uma &lt;em&gt;tag html&lt;/em&gt; legal como &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, como foi feito a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var http = require(&#39;http&#39;);

http.createServer(function(req,res) {‚Ä®
  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/html; charset=utf-8&#39; }); 
  res.end(&#39;&amp;lt;h2&amp;gt; Ol√° mundo! &amp;lt;/h2&amp;gt;&#39;);
}).listen(3000);

console.log(&#39;Servidor iniciado em localhost:3000. Ctrl+C para encerrar‚Ä¶‚Äô);
&lt;/pre&gt;

&lt;p&gt;&lt;img style=&#34;width: 100%&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/07/node_1.png&#34; alt=&#34;img node 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora basta voltar ao seu navegador e ver o resultado.&lt;/p&gt;

&lt;h2 id=&#34;orientado-a-eventos-e-n√£o-obstrutivo&#34;&gt;Orientado a eventos e n√£o obstrutivo&lt;/h2&gt;

&lt;h3 id=&#34;orientado-a-eventos&#34;&gt;Orientado a eventos&lt;/h3&gt;

&lt;p&gt;Vamos aproveitar este momento de euforia ap√≥s a constru√ß√£o do seu primeiro servidor para aprender um pouco mais sobre &lt;strong&gt;Node.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quando estamos desenvolvendo com &lt;strong&gt;Node.js&lt;/strong&gt; devemos utilizar uma abordagem orientada a eventos, isso quer dizer que o desenvolvedor precisa conhecer os eventos que ser√£o emitidos em diferentes momentos da execu√ß√£o e tamb√©m saber como ouvi-los para executar as opera√ß√µes necess√°rias.&lt;/p&gt;

&lt;p&gt;Um bom exemplo de orienta√ß√£o a eventos est√° na constru√ß√£o de interfaces de usu√°rio. Muitas vezes utilizamos elementos como por exemplo os bot√µes que ao serem clicados emitem um evento do tipo &lt;em&gt;click&lt;/em&gt; ao qual podemos ouvir e executar alguma opera√ß√£o.&lt;/p&gt;

&lt;p&gt;No nosso exemplo anterior utilizamos esse conceito quando chamamos m√©todo &lt;code&gt;listen&lt;/code&gt; do objeto do tipo &lt;em&gt;web server&lt;/em&gt; e passamos como par√¢metro a porta 3000, com isso fizemos que a nossa aplica√ß√£o ouvisse ao evento que √© emitido sempre que algu√©m faz uma requisi√ß√£o no &lt;code&gt;localhost:3000&lt;/code&gt; e a nossa resposta foi servir a string ou a p√°gina html. Este evento √© chamado &lt;em&gt;request&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para ilustrar estes conceitos, podemos escrever o nosso exemplo anterior em uma sintaxe alternativa da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var http = require(&#39;http&#39;);

var server = http.createServer();

server.on(&#39;request&#39;, function(req,res) {‚Ä®
  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/html; charset=utf-8&#39; }); 
  res.end(&#39;&amp;lt;h2&amp;gt; Ol√° mundo! &amp;lt;/h2&amp;gt;&#39;);
});

server.listen(3000);

console.log(&#39;Servidor iniciado em localhost:3000. Ctrl+C para encerrar‚Ä¶‚Äô);
&lt;/pre&gt;

&lt;p&gt;Dessa forma podemos ver claramente a maneira em que o &lt;strong&gt;Node.js&lt;/strong&gt; opera para servir a sua p√°gina. Utilizamos o m√©todo &lt;code&gt;on&lt;/code&gt; do nosso objeto &lt;em&gt;server&lt;/em&gt; para ouvir ao evento &lt;em&gt;request&lt;/em&gt; e fazer as opera√ß√µes. E definimos que estamos servindo na porta 3000.&lt;/p&gt;

&lt;h3 id=&#34;n√£o-obstrutivo&#34;&gt;N√£o obstrutivo&lt;/h3&gt;

&lt;p&gt;Todos os recursos presentes no &lt;strong&gt;Node.js&lt;/strong&gt; e tamb√©m a maioria das bibliotecas feitas para ele adotaram um padr√£o n√£o obstrutivo de escrever c√≥digo, isso quer dizer que em &lt;strong&gt;Node.js&lt;/strong&gt; voc√™ geralmente vai conseguir estruturar seu c√≥digo de uma maneira que opera√ß√µes que n√£o dependem de nada que est√° sendo executado possam ser executadas de forma independente.&lt;/p&gt;

&lt;p&gt;Para mostrar um pouco como isso funciona, vamos um programa que escreve duas frases no terminal, por√©m uma dessas frases precisa ser carregada da mem√≥ria antes de ser impressa.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var frase;

carregaFrase = function (callback) {  
  setTimeout(function() {
    //Simula leitura da frase no banco de dados.
    frase = &#34;Minha frase obstrutiva&#34;;
    callback();
  }, 3000)
}

imprimeFrase = function () {
  console.log(frase);
}

carregaFrase(imprimeFrase);

console.log(‚ÄúOl√°&#34;);
&lt;/pre&gt;

&lt;p&gt;Nesse exemplo foi criada uma fun√ß√£o chamada &lt;code&gt;carregaFrase&lt;/code&gt; cujo objetivo √© ler uma determinada frase de uma fonte de dados, e uma outra fun√ß√£o chamada &lt;code&gt;imprimeFrase&lt;/code&gt; que imprime o valor de uma determinada vari√°vel no console. Como dependemos da leitura da frase na fonte de dados para imprimir o valor, passamos a fun√ß√£o que imprime como par√¢metro para a fun√ß√£o de leitura para que possamos executar essa fun√ß√£o quando a leitura for conclu√≠da. Esse tipo de fun√ß√£o que √© passada como par√¢metro dessa maneira √© chamada de &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ao executar este exemplo com &lt;strong&gt;Node.js&lt;/strong&gt; ou qualquer mecanismo &lt;strong&gt;JavaScript&lt;/strong&gt; voc√™ vai perceber que a frase &amp;#8220;Ol√°&amp;#8221; ser√° impressa antes da outra frase mesmo estando posicionada depois no c√≥digo, isso se deve ao fato de sua execu√ß√£o n√£o depender de nada enquanto a execu√ß√£o da outra frase depende de uma opera√ß√£o que leva 3 segundos.&lt;/p&gt;

&lt;p&gt;Este √© um exemplo extremamente simples de como criar um c√≥digo n√£o obstrutivo, portanto use sua imagina√ß√£o para imaginar cen√°rios em que isso pode ser √∫til.&lt;/p&gt;

&lt;p&gt;Observe que no nosso primeiro exemplo com &lt;strong&gt;Node.js&lt;/strong&gt; tanto a fun√ß√£o &lt;code&gt;on&lt;/code&gt; quanto a fun√ß√£o &lt;code&gt;createServer&lt;/code&gt; podem receber uma fun√ß√£o de &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclus√£o&#34;&gt;Conclus√£o&lt;/h2&gt;

&lt;p&gt;Espero que este tutorial tenha sido o suficiente para provocar o seu interesse em aprender mais sobre &lt;strong&gt;Node.js&lt;/strong&gt;. Portanto visite a &lt;a href=&#34;http://nodejs.org/api/&#34; rel=&#34;noreferrer&#34;&gt;documenta√ß√£o do Node.js&lt;/a&gt; para obter mais informa√ß√µes e exemplos de aplica√ß√µes dessa plataforma e tamb√©m a p√°gina da &lt;a href=&#34;https://www.joyent.com&#34; rel=&#34;noreferrer&#34;&gt;Joyent&lt;/a&gt;, patrocinadora oficial do projeto.&lt;/p&gt;

&lt;p&gt;E finalmente, &lt;strong&gt;Node.js&lt;/strong&gt; √© um projeto &lt;em&gt;open source&lt;/em&gt;, portanto voc√™ pode visualizar o c√≥digo fonte e contribuir no &lt;a href=&#34;https://github.com/joyent/node&#34; rel=&#34;noreferrer&#34;&gt;reposit√≥rio do Node.js no GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>