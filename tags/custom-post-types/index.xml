<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Custom Post Types on Tableless</title>
    <link>http://tableless.com.br/tags/custom-post-types/index.xml</link>
    <description>Recent content in Custom Post Types on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/custom-post-types/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Custom Post Types no WordPress</title>
      <link>http://tableless.com.br/custom-post-types-wordpress/</link>
      <pubDate>Tue, 29 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/custom-post-types-wordpress/</guid>
      <description>

&lt;p&gt;Custom Post Types é a função que manipula os tipos de conteúdo no WordPress, ou seja, pode-se criar conteúdos personalizados a partir da sua demanda. Isso é uma das provas mais concretas que temos hoje um CMS muito forte que não serve apenas para criar blog e/ou sites de pequeno porte.&lt;/p&gt;

&lt;h3 id=&#34;criando-custom-post-types&#34;&gt;Criando Custom Post Types&lt;/h3&gt;

&lt;p&gt;Como o assunto é muito amplo, criarei com vocês um exemplo de Notícias.&lt;/p&gt;

&lt;p&gt;Em functions.php, adicione:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
    add_action(&#39;init&#39;, &#39;type_post_noticias&#39;);
 
    function type_post_noticias() { 
        $labels = array(
            &#39;name&#39; =&amp;gt; _x(&#39;Not&amp;iacute;cias&#39;, &#39;post type general name&#39;),
            &#39;singular_name&#39; =&amp;gt; _x(&#39;Not&amp;iacute;cia&#39;, &#39;post type singular name&#39;),
            &#39;add_new&#39; =&amp;gt; _x(&#39;Adicionar Novo&#39;, &#39;Novo item&#39;),
            &#39;add_new_item&#39; =&amp;gt; __(&#39;Novo Item&#39;),
            &#39;edit_item&#39; =&amp;gt; __(&#39;Editar Item&#39;),
            &#39;new_item&#39; =&amp;gt; __(&#39;Novo Item&#39;),
            &#39;view_item&#39; =&amp;gt; __(&#39;Ver Item&#39;),
            &#39;search_items&#39; =&amp;gt; __(&#39;Procurar Itens&#39;),
            &#39;not_found&#39; =&amp;gt;  __(&#39;Nenhum registro encontrado&#39;),
            &#39;not_found_in_trash&#39; =&amp;gt; __(&#39;Nenhum registro encontrado na lixeira&#39;),
            &#39;parent_item_colon&#39; =&amp;gt; &#39;&#39;,
            &#39;menu_name&#39; =&amp;gt; &#39;Not&amp;iacute;cias&#39;
        );

        $args = array(
            &#39;labels&#39; =&amp;gt; $labels,
            &#39;public&#39; =&amp;gt; true,
            &#39;public_queryable&#39; =&amp;gt; true,
            &#39;show_ui&#39; =&amp;gt; true,           
            &#39;query_var&#39; =&amp;gt; true,
            &#39;rewrite&#39; =&amp;gt; true,
            &#39;capability_type&#39; =&amp;gt; &#39;post&#39;,
            &#39;has_archive&#39; =&amp;gt; true,
            &#39;hierarchical&#39; =&amp;gt; false,
            &#39;menu_position&#39; =&amp;gt; null,
&#39;register_meta_box_cb&#39; =&amp;gt; &#39;noticias_meta_box&#39;,       
            &#39;supports&#39; =&amp;gt; array(&#39;title&#39;,&#39;editor&#39;,&#39;thumbnail&#39;,&#39;comments&#39;, &#39;excerpt&#39;, &#39;custom-fields&#39;, &#39;revisions&#39;, &#39;trackbacks&#39;)
          );
 
register_post_type( &#39;noticias&#39; , $args );
flush_rewrite_rules();
}
?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Primeiro adicionamos a função &lt;strong&gt;add_action&lt;/strong&gt;, que vai abrigar dois parâmetros, o gancho (aonde vai rodar a função) e a função callback (a função que vai ser chamada com as informações). É função &lt;strong&gt;type_post_noticias&lt;/strong&gt; que vai armazenar as informações do post. A variável &lt;strong&gt;$labels&lt;/strong&gt;, está indicando os valores para cada título.&lt;/p&gt;

&lt;p&gt;A variável &lt;strong&gt;$args&lt;/strong&gt; é onde vamos colocar as informações do post. Explico com mais detalhes abaixo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;labels:&lt;/strong&gt; Indica a variável que contém as informações do label&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public:&lt;/strong&gt; determina se o conteúdo pode ser visto no painel de administração, por padrão é falso.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;publicly_queryable:&lt;/strong&gt; determina se a consulta pode ser realizada usando o argumento post_type, por padrão ele herda o valor do public.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;show_ui:&lt;/strong&gt; determina se telas de adicionar e editar o post devem ser adicionadas esse tipo de post, por padrão ele herda o valor do public.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;query_var:&lt;/strong&gt; evita consultas ou valores de sequência, por padrão é falso.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rewrite:&lt;/strong&gt; reescrita do link, por padrão é verdadeiro.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;capability_type:&lt;/strong&gt; define o tipo de conteúdo que o tipo de post personalizado vai seguir, por padrão é post.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;has_archive:&lt;/strong&gt; permite os arquivos do tipo do post, por padrão é falso.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hierarchial:&lt;/strong&gt; determina que o tipo do post é hierárquico (igual o das páginas), por padrão o valor é falso&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;menu_position:&lt;/strong&gt; determina a ordem do menu, por padrão é null (ele ficará em baixo do menu dos comentários), mas pode receber esses seguintes valores

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5&lt;/strong&gt; – Em baixo do menu Post;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10&lt;/strong&gt; – Em baixo do menu mídia;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;20&lt;/strong&gt; – Em baixo do menu páginas;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;60&lt;/strong&gt; – Em baixo do primeiro separador;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;100&lt;/strong&gt; – Em baixo do segundo separador.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;register_meta_box_cb:&lt;/strong&gt; Retorna a função que chamará as caixas de meta para o formulário (irei explicar à frente).&lt;/p&gt;

&lt;p&gt;supports: determina os recursos aceitos para esse tipo de post, por padrão é vazio, por isso tem que definir, ele recebe esses valores:&lt;/p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;author:&lt;/strong&gt; o autor por uma área personalizada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title:&lt;/strong&gt; inclui o título ao tipo do post&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;editor:&lt;/strong&gt; inclui a área de conteúdo do post (VISUAL ou HTML) e uploader de mídia&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;excerpts:&lt;/strong&gt; inclui o campo de resumo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;thumbnail:&lt;/strong&gt; determina se o tipo de post pode inlcuir miniatura de post (&lt;a href=&#34;http://tableless.com.br/adicionando-post-thumbnail&#34;&gt;http://tableless.com.br/adicionando-post-thumbnail&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;comments:&lt;/strong&gt; inclui os comentários&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;trackbacks:&lt;/strong&gt; inclui os trackbacks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;custom-fields:&lt;/strong&gt; inclui a baixa de Custom Fields e se os campos serão automaticamente salvos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;revisions:&lt;/strong&gt; inclui revisões (armazenadas ou exibidas)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;page-attributes:&lt;/strong&gt; inclui a caixa Page Attributes (são encontradas na inserção de páginas), contendo as opções de parent, template e menu order.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para o registro do post, é necessário a função &lt;strong&gt;register_post_type&lt;/strong&gt;, que abrigará dois parâmetros. No primeiro é definido o nome do post (de preferência coloque em letras minúsculas e sem espaço, uma slug) e o outro agregará as demais informações do post, neste caso, a variável $args.&lt;/p&gt;

&lt;h3 id=&#34;criando-taxonomias&#34;&gt;Criando Taxonomias&lt;/h3&gt;

&lt;p&gt;A taxonomia é uma forma de criar um tipo de categoria para o tipo de conteúdo.&lt;/p&gt;

&lt;p&gt;Adicione em functions.php:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
register_taxonomy(
&#34;categorias&#34;, 
      &#34;noticias&#34;, 
      array(            
        &#34;label&#34; =&amp;gt; &#34;Categorias&#34;, 
            &#34;singular_label&#34; =&amp;gt; &#34;Categoria&#34;, 
            &#34;rewrite&#34; =&amp;gt; true,
            &#34;hierarchical&#34; =&amp;gt; true
)
);
?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Com a função &lt;strong&gt;register_taxonomy&lt;/strong&gt;, registramos uma nova taxonomia. O primeiro valor aonde será definido o nome da taxonomia (de preferência de letras minúsculas e sem espaço), o segundo valor é definido o nome do tipo de conteúdo registrado, onde essa taxonomia se agregará. No array, é definido informações já explicadas acima.&lt;/p&gt;

&lt;h3 id=&#34;criando-campos-personalizados&#34;&gt;Criando campos personalizados&lt;/h3&gt;

&lt;p&gt;Vamos trabalhar com a variável &lt;strong&gt;register_meta_box&lt;/strong&gt; na criação de campos personalizados. Para essa variável, foi definido o valor &lt;strong&gt;noticias_meta_box&lt;/strong&gt;, que será a nossa função callback, a função que vai ser chamada para a criação da meta.&lt;/p&gt;

&lt;p&gt;Em functions.php adicione:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
function noticias_meta_box(){        
        add_meta_box(&#39;meta_box_test&#39;, __(&#39;Meta Box&#39;), &#39;meta_box_meta_test&#39;, &#39;noticias&#39;, &#39;side&#39;, &#39;high&#39;);
}
?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Retornamos a função definida para a criação de meta box, dentro dela definimos na função add_meta_box, os argumentos respectivamente, são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$id:&lt;/strong&gt; o nome para o meta box, destinado para uso interno&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$title:&lt;/strong&gt; o título da caixa&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$callback:&lt;/strong&gt; a função que irá ser chamada para imprimir o conteúdo da caixa&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$page:&lt;/strong&gt; o tipo de post que vão existir esse meta, para aparecer em mais de um, coloque dentro de um array, ex: array(‘noticias’, ‘post’)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$context:&lt;/strong&gt; em qual parte da página de edição ela vai está (normal, advanced ou side [lateral])&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$priority:&lt;/strong&gt; em qual altura a caixa deve aparecer dentro da seção (high [alta], normal, low[baixa), a depender do valor, caixas com prioridade maior ficará encima&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depois que definimos a meta, vamos agora retornar a função que vai imprimir o conteúdo da caixa:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
function meta_box_meta_test(){
      global $post;
      $metaBoxValor = get_post_meta($post-&amp;gt;ID, &#39;valor_meta&#39;, true); 
?&amp;gt;        
    &amp;lt;label for=&#34;inputValorMeta&#34;&amp;gt;Valor: &amp;lt;/label&amp;gt;
    &amp;lt;input type=&#34;text&#34; name=&#34;valor_meta&#34; id=&#34;inputValorMeta&#34; value=&#34;&amp;lt;?php echo $metaBoxValor; ?&amp;gt;&#34; /&amp;gt;
&amp;lt;?php
    }
?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A função foi criada, dentro dela imprimi-se o que o Box vai conter. Para garantir que o campo retornado é necessário usar a função &lt;strong&gt;get_post_meta&lt;/strong&gt;. Ela requer três argumentos: o ID do post, o nome do campo (se possível sem acentos e nem espaços) e um valor true/false determinando se a função deve retornar um valor individual ou não.&lt;/p&gt;

&lt;p&gt;Por fim criaremos a função que vai salvar as alterações dos campos personalizados:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
    add_action(&#39;save_post&#39;, &#39;save_noticias_post&#39;);
    
    function save_noticias_post(){
        global $post;        
            update_post_meta($post-&amp;gt;ID, &#39;valor_meta&#39;, $_POST[&#39;valor_meta&#39;]);
    }
?&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;Inicialmente adicionamos a ação no gancho &lt;strong&gt;save_post&lt;/strong&gt; com o retorno da função &lt;strong&gt;save_noticias_post&lt;/strong&gt;. A função &lt;strong&gt;update_post_meta&lt;/strong&gt; vai receber três argumentos, os dois primeiros serão iguais aos explicados na função &lt;strong&gt;get_post_meta&lt;/strong&gt;, a única diferença que o ultimo argumento vai receber o valor alterado, caso seja alterado manualmente colocamos uma simples string com o outro valor. Neste caso a alteração será feita após o envio do formulário.&lt;/p&gt;

&lt;h3 id=&#34;criando-um-loop-personalizado&#34;&gt;Criando um LOOP personalizado&lt;/h3&gt;

&lt;p&gt;Vamos criar o LOOP personalizado de acordo com o tipo de post, caso ainda não tenha visto o que seja um LOOP, &lt;a href=&#34;http://tableless.com.br/o-loop-do-wordpress&#34; title=&#34;O Loop do WordPress - Tableless&#34;&gt;veja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aonde queria que aparecesse a repetição, adicione:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 
$newsArgs = array( &#39;post_type&#39; =&amp;gt; &#39;noticias&#39;, &#39;posts_per_page&#39; =&amp;gt; 4);                   
                        
      $newsLoop = new WP_Query( $newsArgs );                  
                        
      while ( $newsLoop-&amp;gt;have_posts() ) : $newsLoop-&amp;gt;the_post();              ?&amp;gt;
&amp;lt;div class=&#34;news&#34;&amp;gt;                                
        &amp;lt;h1&amp;gt;&amp;lt;a href=&#34;&amp;lt;?php the_permalink(); ?&amp;gt;&#34; title=&#34;&amp;lt;?php the_title(); ?&amp;gt;&#34;&amp;gt;&amp;lt;?php the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;?php the_time(&#39;F jS, Y&#39;) ?&amp;gt;&amp;lt;/strong&amp;gt; by &amp;lt;?php the_author_posts_link() ?&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;&amp;lt;?php the_content(); ?&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;?php echo get_the_term_list( $post-&amp;gt;ID, &#39;categorias&#39;, &#39;Categorias: &#39;, &#39; &#39;); ?&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;Retornando o campo personalizado: &amp;lt;?php echo get_post_meta($post-&amp;gt;ID, &#39;valor_meta&#39;, true); ?&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;?php endwhile; ?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;O único termo desconhecido no Loop é a função &lt;strong&gt;get_the_term_list&lt;/strong&gt;, que vai retornar a taxonomia para o post. O primeiro argumento é o valor do ID do post, o segundo valor é o nome definido da taxonomia, o terceiro valor é o que vai retonar antes de retornar as taxonomias e o último o separador.&lt;/p&gt;

&lt;p&gt;Não há dificuldade, o segredo está na variável &lt;strong&gt;$newsArgs&lt;/strong&gt;, que é aonde você vai definir as opções da repetição, ele pode receber mais argumentos, que você pode ver em: &lt;a href=&#34;http://codex.wordpress.org/Function_Reference/WP_Query&#34;&gt;http://codex.wordpress.org/Function_Reference/WP_Query&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para visualizar um post, editamos as informações no arquivo &lt;strong&gt;single.php&lt;/strong&gt; do nosso tema, quando temos um Custom Post Type, por padrão ele lê com essa página, caso queria ter uma pagina só para o tipo de post, você pode uma nova página chamada &lt;strong&gt;single-{slug}.php&lt;/strong&gt;, ou seja, essa slug seria trocada pelo nome do Custom Post Type, no nosso caso, &lt;strong&gt;single-noticias.php&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;feeds-para-tipos-de-post-personalizado&#34;&gt;Feeds para tipos de post personalizado&lt;/h3&gt;

&lt;p&gt;Se seu site existe muitos leitores via feed e você quer mostrar o conteúdo personalizado, como fazer? Lendo um livro, WordPress 3 Básico (livro que indico para iniciantes ou desenvolvedores natos), achei essa solução, muito simples.&lt;/p&gt;

&lt;p&gt;Em functions.php, adicione:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
add_filter(&#39;pre_get_posts&#39;, &#39;postsfeed&#39;);
    
    function postsfeed($query){
        if( is_feed() ){
            $query-&amp;gt;set(&#39;post_type&#39;, array(&#39;post&#39;, &#39;noticias&#39;));
        }
        return $query;
    }
?&amp;gt;

&lt;/pre&gt;

&lt;p&gt;No código vamos adicionar o filtro para a consulta de conteúdo para o Feed, você pode adicionar inúmeros conteúdos personalizados.&lt;/p&gt;

&lt;h3 id=&#34;reduzindo-o-código&#34;&gt;Reduzindo o código&lt;/h3&gt;

&lt;p&gt;Existe mesmo a necessidade para registrar o Custom Post Type a quantidade de argumentos que foi mostrado? Não.&lt;/p&gt;

&lt;p&gt;Neste artigo fez questão de mostrar a maioria das variáveis, mas você pode reduzir o código ainda mais em futuras alterações. Em vez de registrar o seu conteúdo com aquele código enorme, pode-se substituir por:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
add_action(&#39;init&#39;, &#39;type_post_noticias&#39;);
 
    function type_post_noticias() { 
        $labels = array(
            &#39;name&#39; =&amp;gt; _x(&#39;Not&amp;iacute;cias&#39;, &#39;post type general name&#39;),
            &#39;singular_name&#39; =&amp;gt; _x(Not&amp;iacute;cia&#39;, &#39;post type singular name&#39;)
        );

        $args = array(
            &#39;labels&#39; =&amp;gt; $labels,
            &#39;public&#39; =&amp;gt; true,            
            &#39;register_meta_box_cb&#39; =&amp;gt; &#39;noticias_meta_box&#39;,
            &#39;supports&#39; =&amp;gt; array(&#39;title&#39;,&#39;editor&#39;,&#39;thumbnail&#39;,&#39;comments&#39;, &#39;excerpt&#39;, &#39;custom-fields&#39;, &#39;revisions&#39;, &#39;trackbacks&#39;)
          );
 
    register_post_type( &#39;noticias&#39; , $args );
    flush_rewrite_rules();  
?&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;Ambas as formas estão corretas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adicionando Post Thumbnail</title>
      <link>http://tableless.com.br/adicionando-post-thumbnail/</link>
      <pubDate>Mon, 17 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/adicionando-post-thumbnail/</guid>
      <description>

&lt;h3 id=&#34;ativando-o-suporte-ao-post-thumbnails-em-seu-tema&#34;&gt;Ativando o suporte ao Post Thumbnails em seu tema&lt;/h3&gt;

&lt;p&gt;Antes de qualquer coisa, volto a lembrar que essa característica é do tema. Pode ser que alguns autores não ativem esse suporte. Para iniciar, adicione este seguinte código no arquivo functions.php:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Para ativar o suporte só é necessário este código. Bacana, né? O WordPress faz com que em poucas linhas de código possamos obter soluções significantes.&lt;/p&gt;

&lt;p&gt;A condição verifica se a função &amp;#8216;add_theme_support&amp;#8217; existe, caso ela exista, adicionamos um suporte ao nosso tema, que é o Post Thumbnails.&lt;/p&gt;

&lt;p&gt;Você pode adicionar esse suporte para outros tipos de posts ou até especificar aonde quer adicionar esse suporte:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;No código fizemos o mesmo processo do início, porém especificamos tipos de posts diferentes. Ao contrário do post de cima, que só adicionaria em um tipo de post.&lt;/p&gt;

&lt;h3 id=&#34;customizando-as-thumbnails&#34;&gt;Customizando as Thumbnails&lt;/h3&gt;

&lt;p&gt;Esse suporte trouxe várias funções para que possamos personalizar ainda mais o nosso Post Thumbnail. Você pode estipular um valor padrão para todas as imagens, como também pode criar um novo &amp;#8220;estilo&amp;#8221; para as imagens, vejamos:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Neste código personalizamos as nossas Thumbnails, com a função &lt;code&gt;set_post_thumbnail_size()&lt;/code&gt; definimos um valor padrão para todas elas, os valores estipulados na função representa a largura e altura respectivamente e o valor TRUE, é destinado para o corte da imagem (crop), caso seja ativado sua imagem será cortada sem distorcê-la e você não precisará usar scripts para isso.&lt;/p&gt;

&lt;p&gt;Com a função &lt;code&gt;add_image_size&lt;/code&gt;, definimos um valor personalizado, os valores representam o nome do campo personalizado, largura, altura e o TRUE significa o crop. Lembrando, com essa função você apenas está definindo as caracteristicas de uma imagem personalizada.&lt;/p&gt;

&lt;h3 id=&#34;adicionando-o-thumbnail&#34;&gt;Adicionando o Thumbnail&lt;/h3&gt;

&lt;p&gt;Por fim vamos adicionar o Thumbnail em nosso post, adicione o seguinte código na página onde está seu Post, Loop ou aonde queria botar a imagem:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&amp;lt;?php&lt;/p&gt;

&lt;p&gt;//verifica se existe alguma thumbnail para o post&lt;/p&gt;

&lt;p&gt;if(has_post_thumbnail()){&lt;/p&gt;

&lt;p&gt;the_post_thumbnail(); //retorna o thumbnail para página&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;//caso não tenha nenhuma thumbnail, retorna uma imagem padrão&lt;/p&gt;

&lt;p&gt;echo &amp;lsquo;&lt;img alt=&#34;Sem Thumbnail&#34; /&gt;&amp;#8216;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;?&amp;gt;&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Caso você queria adicionar o valor que definimos em algum add_image_size, faça isso:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&amp;lt;?php&lt;/p&gt;

&lt;p&gt;//verifica se existe alguma thumbnail para o post&lt;/p&gt;

&lt;p&gt;if(has_post_thumbnail()){&lt;/p&gt;

&lt;p&gt;the_post_thumbnail(&amp;lsquo;thumb-post&amp;rsquo;); //retorna o thumbnail para página especificando o nome do campo personalizado&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;//caso não tenha nenhum thumbnail, retorna uma imagem padrão&lt;/p&gt;

&lt;p&gt;echo &amp;lsquo;&lt;img alt=&#34;Sem Thumbnail&#34; /&gt;&amp;#8216;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;//caso não queria que retorne nenhuma imagem padrão, retire o ELSE da condição&lt;/p&gt;

&lt;p&gt;?&amp;gt;&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Nos códigos acima adicionamos o thumbnail na página, a condição verifica se existe algum thumbnail, se existir, ele retorna a imagem. Quando você não define nenhum valor personalizado com o &lt;code&gt;add_image_size&lt;/code&gt; ou até dentro da função, ele retorna com o valor que está definido &lt;code&gt;set_post_thumbnail_size&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ainda no código acima, adicionei um ELSE, para caso não tenha nenhuma imagem no Post Thumbnail, ele retorne com uma imagem padrão, que vai ficar ao seu critério.&lt;/p&gt;

&lt;h3 id=&#34;código-final&#34;&gt;Código Final&lt;/h3&gt;

&lt;h4 id=&#34;functions-php&#34;&gt;functions.php&lt;/h4&gt;

&lt;p&gt;[cc lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;h4 id=&#34;pagina-onde-vai-aparecer-o-thumb-php&#34;&gt;pagina-onde-vai-aparecer-o-thumb.php&lt;/h4&gt;

&lt;p&gt;[cc lang=&amp;#8221;php&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&amp;lt;?php&lt;/p&gt;

&lt;p&gt;//verifica se existe algum thumbnail para o post&lt;/p&gt;

&lt;p&gt;if(has_post_thumbnail()){&lt;/p&gt;

&lt;p&gt;the_post_thumbnail(&amp;lsquo;thumb-post&amp;rsquo;); //retorna o thumbnail para página especificando o tipo da imagem&lt;/p&gt;

&lt;p&gt;}else{&lt;/p&gt;

&lt;p&gt;//caso não tenha nenhuma thumbnail, retorna uma imagem padrão&lt;/p&gt;

&lt;p&gt;echo &amp;lsquo;&lt;img alt=&#34;Sem Thumbnail&#34; /&gt;&amp;#8216;;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;//caso não queria que retorne nenhuma imagem padrão, retire o ELSE da condição&lt;/p&gt;

&lt;p&gt;?&amp;gt;&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>