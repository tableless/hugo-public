<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webdriver on Tableless</title>
    <link>http://tableless.com.br/tags/webdriver/index.xml</link>
    <description>Recent content in Webdriver on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/webdriver/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>História de usuário e teste de aceitação em JavaScript</title>
      <link>http://tableless.com.br/historia-de-usuario-e-teste-de-aceitacao-em-javascript/</link>
      <pubDate>Wed, 22 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/historia-de-usuario-e-teste-de-aceitacao-em-javascript/</guid>
      <description>&lt;p&gt;Cada história deve ter valor de negócio na visão do cliente e é uma pequena parte da funcionalidade, não necessariamente uma especificação completa, o que minimiza a necessidade de uma extensa documentação.&lt;/p&gt;

&lt;p&gt;A história de usuário é escrita pelo próprio cliente e, também, serve para conduzir a criação de teste de aceitação, o qual tem o propósito de avaliar a qualidade externa do produto e, na medida do possível, a qualidade de uso e experiência do usuário. A automatização dos testes de aceitação é criada para certificar de que a história foi implementada corretamente.&lt;/p&gt;

&lt;p&gt;Nesse exemplo é preciso a instalação do NodeJS e do Node Package Manager (NPM), que podem ser baixados no &lt;a href=&#34;http://nodejs.org/download/&#34;&gt;site oficial&lt;/a&gt;. O NPM é necessário para instalar o &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;CucumberJS&lt;/a&gt;, o &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; e o &lt;a href=&#34;https://github.com/admc/wd&#34;&gt;WD&lt;/a&gt;, digitando o seguinte _script_ no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install -g cucumber phantomjs&lt;/pre&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install wd&lt;/pre&gt;

&lt;p&gt;O NodeJS possui dois tipos de dependências: global e local. Quando é global, a dependência passa ser executável, tornando possível a utilização da dependência através da linha de comando. Já as dependências locais são instaladas no diretório corrente, dentro de um diretório chamado _node&lt;em&gt;modules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O primeiro &lt;em&gt;script&lt;/em&gt;, que utiliza o parâmetro &lt;strong&gt;-g&lt;/strong&gt;, instala o &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;CucumberJS&lt;/a&gt; e o &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; como dependências globais. O CucumberJS é uma implementação JavaScript para interpretar uma linguagem chamada &lt;a href=&#34;https://github.com/cucumber/gherkin&#34;&gt;Gherkin&lt;/a&gt;, a qual permite escrever funcionalidades e especificações em texto simples. Já o PhantomJS é um WebKit headless totalmente em JavaScript e possui suporte rápido e nativo para vários padrões web como manipulação de DOM, seletores CSS, JSON, Canvas e SVG.&lt;/p&gt;

&lt;p&gt;O segundo _script_ instala o &lt;a href=&#34;https://github.com/admc/wd&#34;&gt;WD&lt;/a&gt; como dependência local, um cliente NodeJS para facilitar o acesso à API do &lt;a href=&#34;http://tableless.com.br/introducao-ao-selenium-2/&#34;&gt;Selenium 2&lt;/a&gt;, o qual suporta &lt;a href=&#34;https://github.com/admc/wd/blob/master/doc/api.md&#34;&gt;métodos&lt;/a&gt; como: fazer requisições GET e POST, clicar no botão VOLTAR do navegador, redimensionar e mover a janela do navegador, submeter formulário, digitar texto, selecionar um elemento DOM, clicar e mover um elemento DOM selecionado, etc.&lt;/p&gt;

&lt;p&gt;Após a instalação das dependências, vamos criar o arquivo &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-apenas-um-exemplo-feature&#34;&gt;&lt;strong&gt;apenas-um-exemplo.feature&lt;/strong&gt;&lt;/a&gt; com a especificação da história de usuário e o teste de aceitação. Algo bem simples. Suficiente para exemplificar a implementação desse tipo de teste utilizando JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;apenas-um-exemplo.feature&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;Feature: Apenas Um Exemplo
  Como um usuario do CucumberJS
  Eu quero acessar um formulario de teste
  Para que eu possa submeter novas informacoes

  Scenario: Submetendo um formulario de teste
    Given o navegador aberto
      And acessar o formulario de teste
      And certificar que o titulo da pagina contem &#34;Sauce Labs&#34;
      And certificar que o titulo da pagina contem &#34;page title&#34;
      And certificar que o titulo da pagina contem &#34;I am a&#34;
    When clicar no botao de submeter formulario
    Then a url do navegador DEVE conter &#34;guinea-pig&#34;
    And o navegador pode ser fechado&lt;/pre&gt;

&lt;p&gt;Ao criar o arquivo de especificação, vamos criar mais dois arquivos: &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-configuracao-webdriver-usando-phantom-js&#34;&gt;&lt;strong&gt;configuracao-webdriver-usando-phantom.js&lt;/strong&gt;&lt;/a&gt; com as configurações do WebDriver e o arquivo &lt;a href=&#34;https://gist.github.com/igorlima/8024944#file-step-definitions-js&#34;&gt;&lt;strong&gt;step-definitions.js&lt;/strong&gt;&lt;/a&gt; com as definições de cada passo do teste de aceitação. Em seguida, é preciso, em um outro terminal, rodar o PhantomJS em modo WebDriver, digitando o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;phantomjs --webdriver=localhost:8910&lt;/pre&gt;

&lt;p&gt;Com o PhantomJS rodando em segundo plano, basta rodar o CucumberJS passando como argumento o arquivo com a história de usuário e o teste de aceitação. O parâmetro &lt;strong&gt;&amp;#8211;require&lt;/strong&gt; serve para especificar o arquivo com as definições de cada passo do teste de aceitação. E o parâmetro &lt;strong&gt;&amp;#8211;format&lt;/strong&gt; é para alterar a formatação do resultado dos testes. Abaixo, o _script_ e uma ilustração do resultado obtido:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;cucumber.js apenas-um-exemplo.feature --require step-definitions.js --format pretty&lt;/pre&gt;

&lt;p&gt;&lt;img alt=&#34;Ilustração do resultado de exemplo de como escrever história de usuário e teste de aceitação com JavaScript&#34; src=&#34;http://i1368.photobucket.com/albums/ag182/igorribeirolima/resultado-obtido_zps867ddb6d.png&#34; width=&#34;1020&#34; height=&#34;468&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse exemplo contempla de forma bem simples a implementação de teste de aceitação utilizando JavaScript. Essa abordagem também pode utilizar &lt;a href=&#34;http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores/&#34;&gt;diferentes tipos de navegadores&lt;/a&gt;, mas isso ficará para uma próxima discussão. Para quem tiver interesse, todo código está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/8024944&#34; title=&#34;Gist - Exemplo de como escrever história de usuário e teste de aceitação com JavaScript&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Selenium 2</title>
      <link>http://tableless.com.br/introducao-ao-selenium-2/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-ao-selenium-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.seleniumhq.org/docs/01_introducing_selenium.jsp&#34; title=&#34;introdução ao selenium no site oficial&#34;&gt;Selenium&lt;/a&gt; é uma ferramenta de apoio às necessidades de testes em aplicações web. Altamente flexível, permite muitas opções para a localização de elementos de interface no navegador e simular comportamentos reais de um usuário. A &lt;a href=&#34;http://www.seleniumhq.org/docs/03_webdriver.jsp&#34; title=&#34;introdução ao selenium webdriver no site oficial&#34;&gt;versão 2.0&lt;/a&gt; tem como funcionalidade primária a integração da API WebDriver. Projetado para fornecer uma interface ainda mais simples, concisa e orientada a objeto, o que melhora de forma significativa o suporte aos problemas complexos que são enfrentados ao testar uma aplicação web.&lt;/p&gt;

&lt;p&gt;Essa API pode ser chamada através de diversas linguagem de programação, porém, em nosso exemplo, iremos utilizar o NodeJS (JavaScript), que pode ser baixado no &lt;a href=&#34;http://nodejs.org/download/&#34; title=&#34;site oficial do NodeJS&#34;&gt;site oficial&lt;/a&gt; e que possui um gerenciador de pacotes (Node Package Manager – NPM), o qual permite a interação com um repositório online via linha de comando, facilitando a instalação de várias outras ferramentas.&lt;/p&gt;

&lt;p&gt;Nesse exemplo, será utilizado uma ferramenta chamada &lt;a href=&#34;http://vowsjs.org/&#34; title=&#34;site oficial do vows&#34;&gt;Vows&lt;/a&gt;, gerenciada e instalada pelo NPM, que ajuda no desenvolvimento orientado a comportamento assíncrono. Usar testes assíncronos no NodeJS tem dois motivos. Primeiro (e talvez óbvio), é que o NodeJS é assíncrono e por isso os testes também deveriam ser. Segundo, é fazer com que os testes, os quais lidam com entrada e saída de dados, rodem mais rápido.&lt;/p&gt;

&lt;p&gt;Breve resumo dos conceitos do Vows. &lt;strong&gt;Suite&lt;/strong&gt;: um objeto que contêm um ou mais batches, e pode ser executado ou exportado. &lt;strong&gt;Batch&lt;/strong&gt;: uma estrutura de contextos. &lt;strong&gt;Context&lt;/strong&gt;: um objeto que pode conter um &lt;em&gt;topic&lt;/em&gt;(opcional), nenhum ou mais &lt;em&gt;vows&lt;/em&gt;, nenhum ou mais &lt;em&gt;sub-contexts&lt;/em&gt;. &lt;strong&gt;Topic&lt;/strong&gt;: pode ser tanto um valor ou uma função de código assíncrono. &lt;strong&gt;Vow&lt;/strong&gt;: é uma função que recebe o _topic_ como um argumento e roda assertivas no &lt;em&gt;topic&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O teste que será feito possui quatro passos: _(i)&lt;em&gt; abrir o navegador, &lt;/em&gt;(ii)&lt;em&gt; acessar uma &lt;a href=&#34;https://saucelabs.com/test/guinea-pig&#34; title=&#34;página oficial de teste do SauceLabs&#34;&gt;página de teste&lt;/a&gt;, &lt;/em&gt;(iii)&lt;em&gt; verificar o título da página e &lt;/em&gt;(iv)_ fechar o navegador. Algo bem simples. Suficiente para experimentar a versão 2.0 do Selenium.&lt;/p&gt;

&lt;p&gt;As dependências necessárias podem ser instaladas usando o NPM, digitando o seguinte _script_ no terminal:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;npm install -g phantomjs vows &lt;/pre&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt; npm install chai wd vows &lt;/pre&gt;

&lt;p&gt;Há duas maneiras de instalar &lt;a href=&#34;http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/&#34; title=&#34;artigo do blog oficial do NodeJS sobre os tipos de dependências&#34;&gt;dependências no NodeJS&lt;/a&gt;: globalmente ou localmente. Quando uma dependência é global, os arquivos são executáveis, tornando possível a utilização de uma dependência através da linha de comando. Quanto às dependências locais, estas são instaladas no diretório corrente, dentro de um diretório chamado _node&lt;em&gt;modules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O primeiro &lt;em&gt;script&lt;/em&gt;, utilizando o parâmetro &lt;strong&gt;-g&lt;/strong&gt;, instala duas dependências globais: phantomjs e vows.&lt;a href=&#34;http://phantomjs.org/&#34; title=&#34;site oficial do PhantomJS&#34;&gt;PhantomsJS é um headless WebKit&lt;/a&gt;, feito totalmente em javascript e possui suporte rápido e nativo para vários padrões web como manipulação de DOM, seletores CSS, JSON, Canvas e SVG.&lt;/p&gt;

&lt;p&gt;Já o segundo &lt;em&gt;script&lt;/em&gt;, instala três dependências locais: chai, wd e vows. &lt;a href=&#34;http://chaijs.com/&#34; title=&#34;site oficial do Chai&#34;&gt;Chai&lt;/a&gt; é uma biblioteca de assertivas BDD/TDD para NodeJS e navegadores, a qual pode ser &amp;#8216;graciosamente&amp;#8217; utilizada com qualquer framework de teste JS. &lt;a href=&#34;https://github.com/admc/wd&#34; title=&#34;repositorio oficial do WebDriver no github&#34;&gt;WD&lt;/a&gt; é um cliente em NodeJS para facilitar o acesso à API do Selenium 2, a qual suporta métodos como: fazer requisições GET e POST, clicar no botão VOLTAR do navegador, fazer refresh no navegador, pegar um printscreen da tela corrente, redimensionar e mover a janela do navegador, submeter formulário, digitar texto, usar cookies, selecionar um elemento DOM, clicar e mover um elemento DOM selecionado, etc.&lt;/p&gt;

&lt;p&gt;Após a instalação de todas as dependências necessárias, vamos criar dois arquivos: _&lt;strong&gt;configuracao-webdriver-usando-phantom.js&lt;/strong&gt;&lt;em&gt; com as informações de configurações do webdriver e &lt;/em&gt;&lt;strong&gt;apenas-um-exemplo.js&lt;/strong&gt;_ com os passos-a-passos simulando o comportamento real de um usuário.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;configuracao-webdriver-usando-phantom.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;var exports   = module.exports = {},
    webdriver = require(&#39;wd&#39;),
    browser   = exports.browser = webdriver.remote({
      hostname: &#34;localhost&#34;,
      port: 8910
    });
 
/**
Vows Errored » callback not fired
http://birkett.no/blog/2013/05/01/vows-errored-callback-not-fired/
*/
process.on( &#39;uncaughtException&#39;, function(err) {
  console.error(&#39;Caught exception: &#39; + err.stack );
});
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;apenas-um-exemplo.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;var vows    = require(&#39;vows&#39;),
    expect  = require(&#39;chai&#39;).expect,
    browser = require(&#39;./configuracao-webdriver-usando-phantom.js&#39;).browser;
 
vows.describe(&#39;Apenas um exemplo&#39;)
.addBatch({
  &#39;Criando uma nova sessão no WebDriver&#39;: {
    topic: function() {
      var callback = this.callback;
      browser.init( {}, function(err, sessionID, capabilities) {
        callback( err );
      });
    },
    &#39;Sessão criada&#39;: function() { /**...*/ }
  }
})
.addBatch({
  &#39;Acessando a página de teste do SauceLabs&#39;: {
    topic: function() {
      var callback = this.callback;
      browser.get( &#39;http://saucelabs.com/test/guinea-pig&#39;, function(err) {
        callback( err );
      });
    },
    &#39;Página de teste aberta&#39;: function() { /**...*/ }
  }
})
.addBatch({
  &#39;Verificando o título da página&#39;: {
    topic: function() {
      var callback = this.callback;
      browser.title( function(err, title) {
        callback( err, title );
      });
    },
    &#34;O título da página deve conter &#39;Sauce Labs&#39;&#34;: function(title) {
      expect(title).to.contain(&#39;Sauce Labs&#39;);
    },
    &#34;O título da página deve conter &#39;page title&#39;&#34;: function(title) {
      expect(title).to.contain(&#39;page title&#39;);
    },
    &#34;O título da página deve conter &#39;I am a&#39;&#34;: function(title) {
      expect(title).to.contain(&#39;I am a&#39;);
    }
  }
})
.addBatch({
  &#39;Fechando o navegador&#39;: {
    topic: function() {
      var callback = this.callback;
      browser.quit( function(err){
        callback( err );
      });
    },
    &#39;Fim&#39;: function() { /**...*/ }
  }
}).export(module);
&lt;/pre&gt;

&lt;p&gt;Criado esses dois arquivos, é preciso, em um outro terminal, rodar o PhantomJS em modo WebDriver, digitando o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lanh-ssh&#34;&gt;phantomjs --webdriver=localhost:8910 &lt;/pre&gt;

&lt;p&gt;Uma vez o PhantomJS rodando em segundo plano, basta rodar o &lt;em&gt;vows&lt;/em&gt;, o parâmetro &lt;strong&gt;&amp;#8211;spec&lt;/strong&gt; serve apenas para ter um diferente tipo de &amp;#8216;reporter&amp;#8217;, segue o comando e uma ilustração do resultado obtido:&lt;/p&gt;

&lt;pre class=&#34;lang-ssh&#34;&gt;vows apenas-um-exemplo.js --spec &lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; alt=&#34;Resultado obtido&#34; src=&#34;https://camo.githubusercontent.com/67da73c5f31ecbfaee938cf04056d96c4f2ada41/687474703a2f2f69313336382e70686f746f6275636b65742e636f6d2f616c62756d732f61673138322f69676f727269626569726f6c696d612f315f626173685f616e645f556d615f696e74726f647563636564696c6174696c64656f5f616f5f53656c656e69756d5f325f616e645f6170656e61732d756d2d6578656d706c6f6a735f6d646173685f696e74726f647563616f2d73656c656e69756d2d74776f2d31335f7a707334333166383131372e706e67&#34; width=&#34;897&#34; height=&#34;445&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse exemplo contempla de forma bem simples a utilização da API do WebDriver/Selenium 2. Essa abordagem também pode ser feita em &lt;a href=&#34;http://tableless.com.br/introducao-de-como-executar-testes-unitarios-em-diferentes-tipos-de-navegadores&#34; title=&#34;introdução de como executar testes unitários em diferentes tipos de navegadores&#34;&gt;diferentes tipos de navegadores&lt;/a&gt;. Como é sempre melhor começarmos aos poucos, aplicando pequenos passos de cada vez, isso ficará para uma próxima discussão. Para quem se interessar, todo código está disponível em um &lt;a href=&#34;https://gist.github.com/igorlima/7826752&#34; title=&#34;gist introduzindo o Selenium 2&#34;&gt;gist&lt;/a&gt;. Muito obrigado.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>