<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Declaração on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/declara%C3%A7%C3%A3o/index.xml</link>
    <description>Recent content in Declaração on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/declara%C3%A7%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Elevação ou JavaScript hoisting</title>
      <link>https://tableless.github.io/hugo-public/elevacao-ou-javascript-hoisting/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elevacao-ou-javascript-hoisting/</guid>
      <description>

&lt;h2 id=&#34;um-pouco-de-teoria-antes-da-diversão&#34;&gt;Um pouco de Teoria antes da diversão.&lt;/h2&gt;

&lt;p&gt;Muitas vezes, um simples princípio não compreendido, pode confundir novatos ou especialistas em JavaScript. Neste artigo, vamos tentar entender melhor um problema comum, que é mais simples do que parece.&lt;/p&gt;

&lt;h2 id=&#34;declarações-na-frente&#34;&gt;Declarações na frente&lt;/h2&gt;

&lt;p&gt;Antigamente em linguagens como C, se usavam funções ou procedimentos para dividir um programa, mas havia um problema: as declarações deveriam ficar sempre na frente.&lt;/p&gt;

&lt;p&gt;Suponha que você queira usar uma função que junta palavras:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;juntarPalavras(&#39;Arco&#39;, &#39;íris&#39;);&lt;/pre&gt;

&lt;p&gt;Mas temos um problema aqui, não? Essa função não foi definida antes de ser chamada!&lt;/p&gt;

&lt;p&gt;O programa retornará um erro, pois &lt;strong&gt;juntarPalavras()&lt;/strong&gt; não foi criada, ou acha que a linguagem deve permitir que você use funções que são definidas no final do código?&lt;/p&gt;

&lt;p&gt;Declarar funções no início do programa resolveu o problema por um tempo, pois todas as funções e variáveis eram declaradas antes de serem usadas, sendo assim não se tinha erros de referência.&lt;/p&gt;

&lt;p&gt;Com o tempo os programadores pensaram: &amp;#8220;Mas por que cargas d&amp;#8217;água não fazemos isso mais amigável e fácil de ler?&amp;#8221;, &amp;#8220;por que ler o código de baixo para cima e, não de cima para baixo?&amp;#8221;. Agora podemos colocar as definições em qualquer lugar do código e usá-los, mesmo antes de realmente serem definidos, que maravilha não?&lt;/p&gt;

&lt;p&gt;O que acontece agora é que os compiladores ou até mesmo linguagens runtime leem todo o programa para saber que funções e variáveis você declarou no código. Após isso, a execução real acontece e ele já sabe onde está cada coisa. JavaScript faz exatamente isso, o que chamamos de Hoisting.&lt;/p&gt;

&lt;h2 id=&#34;hora-da-diversão&#34;&gt;Hora da diversão&lt;/h2&gt;

&lt;p&gt;Vamos começar com algo leve, para ir aquecendo os neurônios, veja o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;nome = &#39;Jonatan&#39;;
console.log(nome);
// Jonatan
&lt;/pre&gt;

&lt;p&gt;Até aqui nada de novo, apenas iniciamos a variável nome com o valor jonatan e mostramos na tela;&lt;/p&gt;

&lt;p&gt;Certo, e que tal tentarmos isso:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var nome = meunome;
console.log(nome);
// ReferenceError: meunome is not defined
&lt;/pre&gt;

&lt;p&gt;Recebemos um erro bem obvio não acha? Como vamos definir o &lt;strong&gt;nome&lt;/strong&gt; com o valor de &lt;strong&gt;meunome&lt;/strong&gt; se essa variável nem existe ainda?&lt;/p&gt;

&lt;p&gt;Agora, deste jeito:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var nome = meunome;
console.log(nome);
var meunome;
// undefined
&lt;/pre&gt;

&lt;p&gt;Opa! “undefined”, sacam a jogada?&lt;/p&gt;

&lt;p&gt;Isso acontece porque o JavaScript não obriga você a declarar variáveis, ​​permite que você defina as funções em qualquer lugar que você queira, o que lhe permite usar uma função antes de sua definição. O nome hoisting, elevação ou até mesmo içamento, é só um termo especificado, pois ele arranca as declarações até o topo do seu escopo.&lt;/p&gt;

&lt;p&gt;Beleza, agora qual a diferença entre declaração e inicialização? Simples:&lt;/p&gt;

&lt;p&gt;Aqui apenas declaramos a variável &lt;strong&gt;meunome&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var meunome;
//undefined
&lt;/pre&gt;

&lt;p&gt;Já nesta parte iniciamos seu conteúdo como &lt;strong&gt;Jonatan&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;meunome = &#39;Jonatan&#39;;
//Jonatan
&lt;/pre&gt;

&lt;p&gt;Este é o mesmo procedimento feito com as funções:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
var multiplicaNumero = function(a,b) {
  return a*b;
}
//TypeError: undefined is not a function
&lt;/pre&gt;

&lt;p&gt;Viram? Ele elevou a declaração var multiplicaNumero, mas como chamamos antes de ele ser iniciado recebemos um erro.&lt;/p&gt;

&lt;p&gt;Se mudarmos para:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
multiplicaNumero = function(a,b) {
  return a*b;
}
//ReferenceError: multiplicaNumero is not defined
&lt;/pre&gt;

&lt;p&gt;Recebemos o erro nos dizendo que &lt;strong&gt;multiplicaNumero&lt;/strong&gt; não foi declarado.&lt;/p&gt;

&lt;p&gt;Alteramos novamente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
function multiplicaNumero (a,b) {
  return a*b;
}
// 100
&lt;/pre&gt;

&lt;p&gt;E agora o código executou sem erro porque toda declaração de função não anônima é elevada para o topo do escopo.&lt;/p&gt;

&lt;p&gt;Fácil não é? Com isso aprendemos que é uma boa prática declarar e/ou iniciar variáveis e funções no início do escopo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var a, foo = &#39;bar&#39;;
var bar = function(){
  var foo = &#39;foo&#39;;
  console.log(&#39;local: &#39;+foo);
};
bar();
console.log(&#39;global: &#39;+foo);
//local: foo
//global: bar 
&lt;/pre&gt;

&lt;p&gt;Boas práticas nos levam a caminhos melhores.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>