<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fadeto on Tableless</title>
    <link>http://tableless.com.br/tags/fadeto/index.xml</link>
    <description>Recent content in Fadeto on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/fadeto/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Animando com jQuery</title>
      <link>http://tableless.com.br/animando-com-jquery/</link>
      <pubDate>Mon, 05 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/animando-com-jquery/</guid>
      <description>

&lt;p&gt;Um dos recursos mais procurados pelos designers (e programadores) em bibliotecas é animação. Existem bibliotecas e mais bibliotecas que fazem animações de diversas formas. Em prototype por exemplo, deve-se anexar a biblioteca scriptaculous para que seja possivel realizar animações. Já em mootools existem várias formas de resolver o mesmo problema, sendo assim um pouco mais complicado de lembrar de tudo isso. Por jQuery ser uma biblioteca simples com somente o funcional, o trabalho se torna mais simples, logo mais rápido de desenvolver as soluções.&lt;/p&gt;

&lt;p&gt;Em jQuery &amp;#8211; como já vimos aqui e aqui, temos animações que podemos usar nos projetos: slideUp, slideDown, slideToggle, fadeIn, fadeOut e fadeTo, além de show e hide. São efeitos simples que você pode utilizar em qualquer lugar, e suas nomenclaturas também sao simples a ponto de serem intuitivas na hora do serviço de fato.&lt;/p&gt;

&lt;h3 id=&#34;slide&#34;&gt;Slide&lt;/h3&gt;

&lt;p&gt;Que tal experimentar fazer uma área onde o usuário clica em um botão de mostrar/ocultar menu? Com apenas duas tags, a jQuery consegue executar essa tarefa.&lt;/p&gt;

&lt;p&gt;Tomemos a seguinte marcação:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;div&gt;
  &lt;!--
Aqui vem a área, que você pode manipulá-la como quiser,
experimente um formulário de login ou um menu inline ou uma
bela imagem.
--&gt;
&lt;/div&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Apenas com HTML e CSS fazemos a &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/caixa-de-ferramentas-simples.html&#34;&gt;versão que funcionará sem javascript&lt;/a&gt;. Pense sempre dessa forma, assim você não corre o risco de fazer javascript obstrusivo. É por isso que não foi colocado o link onde o usuário clicará para aparecer e sumir com a área. Veja como ficará este &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/caixa-de-ferramentas.html&#34;&gt;exemplo estilizado&lt;/a&gt; com apenas com algumas linhas de código de CSS.&lt;/p&gt;

&lt;p&gt;Feita a primeira e a segunda camada (conteúdo feito no HTML e apresentação feita no CSS) partimos para a interação, que quem comanda é a jQuery. Primeiro, precisamos adicionar o link onde o usuário poderá clicar para fazer a área sumir e reaparecer, faremos isso dinamicamente com a ajuda do nosso Framework preferido. Com o método after (depois em inglês) adicionamos facilmente o nosso link.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript]$(&amp;#8216;#area&amp;#8217;).after(&amp;#8216;&lt;a href=&#34;#area&#34; title=&#34;Mostrar/Esconder Área&#34;&gt;Mostrar/Esconder Área&lt;/a&gt;{#mostra-esconde-area}&amp;#8216;)[/cc]&lt;/p&gt;

&lt;p&gt;Após isto, só precisamos adicionar a animação ao nosso botão, fazendo ele animar a área desejada. Com o comando toggle, nem precisamos nos preocupar com o estado no qual a área se encontra, afinal, ele vai aparecer e desaparecer conforme o necessário.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript]$(&amp;#8216;#mostra-esconde-area&amp;#8217;).click(function(){&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;#area&amp;#8217;).slideToggle()&lt;/p&gt;

&lt;p&gt;})[/cc]&lt;/p&gt;

&lt;p&gt;Não esqueça que estes comandos devem estar dentro da função de inicialização da jQuery. Então o script final ficará assim.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript]$(function(){&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;#area&amp;#8217;).after(&amp;#8216;&lt;a href=&#34;#area&#34; title=&#34;Mostrar/Esconder Área&#34;&gt;Mostrar/Esconder Área&lt;/a&gt;{#mostra-esconde-area}&amp;#8216;)&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;#mostra-esconde-area&amp;#8217;).click(function(){ $(&amp;#8216;#area&amp;#8217;).slideToggle() })&lt;/p&gt;

&lt;p&gt;})[/cc]&lt;/p&gt;

&lt;p&gt;Ao todo para fazermos a animação e a interação, não gastamos mais que cinco linhas de código javascript. Veja no &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/caixa-de-ferramentas-animado.html&#34;&gt;exemplo final&lt;/a&gt; (&lt;a href=&#34;http://dgmike.com.br/tableless/jquery/caixa-de-ferramentas-simples-animado.html&#34;&gt;ou com pouco CSS&lt;/a&gt;), como esse tipo de interação pode dar um gás na sua aplicação.&lt;/p&gt;

&lt;h3 id=&#34;opacidade&#34;&gt;Opacidade&lt;/h3&gt;

&lt;p&gt;Uma outra propriedade que a jQuery trabalha e que pode resultar em ótimas melhorias na usabilidade do usuário é a propriedade &lt;em&gt;opacity&lt;/em&gt;. Ou seja, a transparencia dos elementos, e graças aos métodos &lt;em&gt;fadeIn&lt;/em&gt;, &lt;em&gt;fadeOut&lt;/em&gt; podemos fazer um &lt;em&gt;tooltip&lt;/em&gt; com poucas linhas de código.&lt;/p&gt;

&lt;p&gt;Primeiro, escrevemos o HTML necessário. Sempre pensando de forma não obstrusiva, ou seja, se o navegador do usuário não tiver javascript habilitado, ele não deve ter sua navegabilidade atrapalhada.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;google.com&#34; title=&#34;Encontre o que você procura&#34;&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;tableless.com.br&#34; title=&#34;Webstandards com Feijão e Farofa&#34;&gt;Tableless&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Com algumas linhas de CSS aplicamos uma &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/tooltip-simples.html&#34;&gt;interface interessante&lt;/a&gt; para nosso menu. Para a construção usamos o atributo &lt;em&gt;title&lt;/em&gt;, assim o usuário que não estiver com o javascript habilitado poderá navegar no site vendo todos os recursos que ele teria se o javascript estivesse habilitado.&lt;/p&gt;

&lt;p&gt;A primeira tarefa da jQuery é criar um span onde vamos colocar o mesmo texto do atributo. Não podemos manipular o atributo title, ele fica com o padrão do sistema operacional do usuário, já um span podemos implementar o que nossa imaginação mandar, até mesmo criar balões colocando backgrounds, se necessário.&lt;/p&gt;

&lt;p&gt;Para fazer isso, precisamos usar o método &lt;em&gt;each&lt;/em&gt;, que percorre todos os elementos chamados aplicando a cada um uma diretiva específica.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript]$(&amp;#8216;#menu li a&amp;#8217;).each(function(){&lt;/p&gt;

&lt;p&gt;$(this).append(&amp;#8216;&lt;span&gt;&amp;#8216;+this.title+&amp;#8217;&lt;/span&gt;&amp;#8216;)&lt;/p&gt;

&lt;p&gt;this.title=&amp;#8221;&lt;/p&gt;

&lt;p&gt;})[/cc]&lt;/p&gt;

&lt;p&gt;No método each nós passamos uma função, nessa função, a palavra-chave &amp;#8220;this&amp;#8221; indica o item que está sendo tratado pelo each (um de cada vez), ou seja, cada link específico. A cada link &lt;em&gt;appendamos&lt;/em&gt;, ou seja, adicionamos ao fim de seu conteúdo o valor de seu atributo title dentro de uma tag span. Depois, limpamos o valor de seu title. Assim, removemos o tooltip original, deixando apenas o que será aplicado nos próximos passos.&lt;/p&gt;

&lt;p&gt;Agora, a mágica. Adicionamos aos links a ação de hover que irá exibir seus filhos (o span que acabamos de adicionar) e ao mesmo tempo adicionamos a ação de sumir quando ele sair, fazemos isso com o próprio hover. Poderiamos fazer isso com os métodos &lt;em&gt;show&lt;/em&gt;, &lt;em&gt;hide&lt;/em&gt; ou mesmo o &lt;em&gt;toggle&lt;/em&gt;, mas para ficar mais interessante para o usuário, resolvi usar &lt;em&gt;fadeIn&lt;/em&gt; e &lt;em&gt;fadeOut&lt;/em&gt;. Veja que mesmo assim, o código não fica tão impossível de entender.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript]$(&amp;#8216;#menu li a&amp;#8217;).hover(function() {&lt;/p&gt;

&lt;p&gt;$(this).children().show()&lt;/p&gt;

&lt;p&gt;},function(){&lt;/p&gt;

&lt;p&gt;$(this).children().hide()&lt;/p&gt;

&lt;p&gt;})[/cc]&lt;/p&gt;

&lt;p&gt;Enfim, aplicamos estes dois trechos de script ao nosso &amp;#8220;inicializator-jquery&amp;#8221; que fará com que esse script seja executado apenas após carregar a página, ou seja, quando todos os elementos já tiverem sido carregados. Também adicionamos ao CSS algumas linhas de código para deixar o tooltip amigável. &lt;a href=&#34;http://dgmike.com.br/tableless/jquery/tooltip-simples-animado.html&#34; title=&#34;Tooltip simples animado com JQuery&#34;&gt;Veja como é muito&lt;/a&gt; interessante esse efeito, agora com o nosso novo tooltip.&lt;/p&gt;

&lt;p&gt;A jQuery manipula muito bem efeitos simples (mas que resolvem a esmagadora quantidade de problemas) que muitas bibliotecas insistem em deixar confuso demais ou complexo demais por adicionar mais e mais configurações para cada efeito. Por isso jQuery é uma ferramenta muito poderosa.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>