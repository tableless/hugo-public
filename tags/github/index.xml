<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Tableless</title>
    <link>http://tableless.com.br/tags/github/index.xml</link>
    <description>Recent content in Github on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introdução ao Electron</title>
      <link>http://tableless.com.br/introducao-ao-electron/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/introducao-ao-electron/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-o-electron&#34;&gt;O que é o Electron&lt;/h2&gt;

&lt;p&gt;O Electron foi desenvolvido para permitir que o desenvolvimento de aplicações &lt;em&gt;desktop&lt;/em&gt; usando JavaScript, HTML e CSS fosse muito mais fácil. Criado pela equipe do &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;, ficou conhecido no começo como Atom Shell. O Electron foi criado usando tecnologias como o &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; e o Chromium, e atualmente roda em ambiente de produção de vários projetos, como o próprio &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Atom editor&lt;/a&gt; e outros, como o &lt;a href=&#34;https://slack.com/&#34; target=&#34;_blank&#34;&gt;Slack&lt;/a&gt; e o &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Visual Studio Code&lt;/a&gt;. Ele é um &lt;em&gt;framework&lt;/em&gt; bem simples de trabalhar e de rápida configuração, para construção de pequenas e grandes aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para todos que queiram se aventurar mais, ou já conhecem o Electron, a documentação completa é traduzida para vários idiomas, inclusive o português. Para acessá-la é só &lt;a href=&#34;https://github.com/atom/electron/tree/master/docs-translations/pt-BR&#34; target=&#34;_blank&#34;&gt;clicar aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mãos-à-obra&#34;&gt;Mãos à obra&lt;/h2&gt;

&lt;p&gt;Nesta Introdução iremos abordar os primeiros passos para começar a trabalhar com o Electron e desenvolver aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Além do &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; presente em sua máquina, é necessário que você também instale globalmente o pacote &lt;code&gt;electron-prebuilt&lt;/code&gt;. Para isto, basta digitar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;language-bash&#34;&gt;npm install -g electron-prebuilt&lt;/pre&gt;

&lt;h3 id=&#34;entendendo-a-estrutura&#34;&gt;Entendendo a estrutura&lt;/h3&gt;

&lt;p&gt;A estrutura básica de arquivos que usaremos aqui é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;language-text&#34;&gt;electron-app/
├── app 
    ├── assets
        └── css
            └── main.css
    ├── main.js
    ├── index.html
    └── package.json
├── Gulpfile.js
└── package.json
&lt;/pre&gt;

&lt;p&gt;Vamos falar um pouco de cada arquivo e pasta inseridos no exemplo acima:&lt;/p&gt;

&lt;h4 id=&#34;app&#34;&gt;app&lt;/h4&gt;

&lt;p&gt;É  a pasta onde todos os arquivos referentes à aplicação são inseridos.&lt;/p&gt;

&lt;h4 id=&#34;main-js&#34;&gt;main.js&lt;/h4&gt;

&lt;p&gt;É o arquivo de inicialização da aplicação. Nele vão as configurações do tipo: tamanho da tela, posicionamento, manipular eventos do sistema, etc&amp;#8230;&lt;/p&gt;

&lt;h4 id=&#34;index-html&#34;&gt;index.html&lt;/h4&gt;

&lt;p&gt;É a pagina HTML que será nossa &lt;em&gt;view&lt;/em&gt; inicial para essa introdução.&lt;/p&gt;

&lt;h4 id=&#34;app-package-json&#34;&gt;app/package.json&lt;/h4&gt;

&lt;p&gt;O arquivo &lt;code&gt;package.json&lt;/code&gt; que vai dentro da pasta &lt;em&gt;app&lt;/em&gt; é o arquivo que leva todos as dependências que sua aplicação precisará para rodar. Sendo assim, qualquer pacote _npm_ a ser usado diretamente por sua aplicação deverá ser instalado nesse &lt;em&gt;package&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;gulpfile-js&#34;&gt;Gulpfile.js&lt;/h4&gt;

&lt;p&gt;Optei usar &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt; por escolha própria mesmo, mas fiquem livres para escolher seu &lt;em&gt;&amp;#8220;task runner&amp;#8221;&lt;/em&gt; favorito.&lt;/p&gt;

&lt;h4 id=&#34;package-json&#34;&gt;package.json&lt;/h4&gt;

&lt;p&gt;O &lt;code&gt;package.json&lt;/code&gt; que fica na raiz do seu projeto é responsável pelas configurações, dependências para seu ambiente de desenvolvimento. Tudo que for incluso neste arquivo não estará presente na &lt;em&gt;build&lt;/em&gt; de produção da sua &lt;em&gt;app&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;declarando-as-dependências&#34;&gt;Declarando as dependências&lt;/h3&gt;

&lt;p&gt;Após criar a estrutura de pastas que foi citada no tópico anterior. Iremos atribuir os mesmos valores para os atributos de ambos &lt;code&gt;package.json&lt;/code&gt; presentes no projeto. Levando em consideração que &lt;code&gt;&amp;quot;your-app&amp;quot;&lt;/code&gt; será o nome da sua aplicação.&lt;/p&gt;

&lt;pre class=&#34;language-json&#34;&gt;{
  &#34;name&#34;    : &#34;olamundo&#34;,
  &#34;version&#34; : &#34;0.1.0&#34;,
  &#34;main&#34;    : &#34;main.js&#34;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Caso o campo main não tenha sido preenchido, o Electron automaticamente procurará pelo arquivo &lt;code&gt;index.js&lt;/code&gt;. É importante que preencha este campo com o arquivo que usará na inicialização da aplicação.&lt;/p&gt;

&lt;p&gt;Após feito isso, instale as dependências que utilizaremos nesta introdução, no arquivo &lt;code&gt;package.json&lt;/code&gt; que se encontra diretamente na raiz do seu projeto.&lt;/p&gt;

&lt;pre class=&#34; language-bash&#34;&gt;npm install --save-dev electron-prebuilt fs-jetpack asar rcedit Q
&lt;/pre&gt;

&lt;h3 id=&#34;criando-seu-arquivo-de-inicialização&#34;&gt;Criando seu arquivo de inicialização&lt;/h3&gt;

&lt;p&gt;Depois de configurar as pastas e instalar as dependências da nossa aplicação, vamos abrir o nosso arquivo &lt;code&gt;main.js&lt;/code&gt; . Nele vamos incluir todo o código de configuração:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;var app = require(&#39;app&#39;);
var BrowserWindow = require(&#39;browser-window&#39;);

require(&#39;crash-reporter&#39;).start();

var mainWindow = null;

app.on(&#39;window-all-closed&#39;, function() {
  
  if (process.platform != &#39;darwin&#39;) {
    app.quit();
  }

});

app.on(&#39;ready&#39;, function() {
  
  mainWindow = new BrowserWindow({width: 800, height: 600});
  
  mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;);
  
  mainWindow.openDevTools();
  
  mainWindow.on(&#39;closed&#39;, function() {
    
    mainWindow = null;
  });
}); 
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: a Função &lt;em&gt;mainWindow.openDevTools&lt;/em&gt; é chamada apenas para iniciar o &lt;em&gt;Inspetor de Elementos&lt;/em&gt; junto com a aplicação. Caso não precisem, fiquem à vontade para removê-la do seu projeto.&lt;/p&gt;

&lt;h3 id=&#34;primeira-view&#34;&gt;Primeira &lt;em&gt;view&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Finalmente a parte mais fácil. Note que em nosso arquivo &lt;code&gt;main.js&lt;/code&gt; existe a seguinte função:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;); 
&lt;/pre&gt;

&lt;p&gt;Ela será responsável por carregar o arquivo &lt;code&gt;index.html&lt;/code&gt;. No exemplo a seguir, criei um exemplo bem simples de um arquivo HTML. Esta página que foi criada, tem os mesmos aspectos de uma janela aberta de um navegador. Ou seja, podemos carregar todos os arquivos CSS e JavaScript que utilizaremos normalmente. Veja:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
      &amp;lt;meta charset=&#34;utf-8&#34; /&amp;gt;
      &amp;lt;title&amp;gt;Olá Mundo&amp;lt;/title&amp;gt;
      &amp;lt;link href=&#34;assets/css/main.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;Olá Mundo&amp;lt;/h1&amp;gt;
      
      &amp;lt;p&amp;gt;Bem vindos à nossa introdução ao Electron&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
  
  &lt;h2 id=&#34;run-your-app&#34;&gt;
    Rodando sua aplicação
  &lt;/h2&gt;
  
  &lt;h3&gt;
    electron-prebuilt
  &lt;/h3&gt;
  
  &lt;p&gt;
    Se você instalou o &lt;code&gt;electron-prebuilt&lt;/code&gt; global, Acesse a pasta &lt;strong&gt;app&lt;/strong&gt; e rode o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;electron app&lt;/pre&gt;
  
  &lt;p&gt;
    Caso tenha instalado apenas localmente, então, na pasta &lt;strong&gt;app&lt;/strong&gt; de seu projeto, digite o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;&#34;../node_modules/.bin/electron&#34; &#34;./app&#34;&lt;/pre&gt;
  
  &lt;h3&gt;
    Automatizando
  &lt;/h3&gt;
  
  &lt;p&gt;
    Como citei anteriormente, usaremos o &lt;em&gt;Gulp&lt;/em&gt; para automatizar o &lt;em&gt;run&lt;/em&gt; da nossa aplicação, facilitando assim a criação de testes e o próprio desenvolvimento da aplicação. Para isso, deixaremos nosso &lt;code&gt;Gulpfile.js&lt;/code&gt; da seguinte maneira:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;),
  childProcess = require(&#39;child_process&#39;),
  electron = require(&#39;electron-prebuilt&#39;);
  
gulp.task(&#39;run&#39;, function () {
  childProcess.spawn(electron, [&#39;./app&#39;], { stdio: &#39;inherit&#39; });
});
&lt;/pre&gt;
  
  &lt;p&gt;
    Feito isso basta rodar o seguinte comando em seu terminal:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;gulp run&lt;/pre&gt;
  
  &lt;h2&gt;
    Criando uma distribuição
  &lt;/h2&gt;
  
  &lt;p&gt;
    Depois de terminado todo o processo de desenvolvimento, você pode criar uma distribuição do seu &lt;em&gt;app&lt;/em&gt; seguindo as instruções do &lt;a href=&#34;http://electron.atom.io/docs/v0.33.0/tutorial/application-distribution&#34; target=&#34;_blank&#34;&gt;Application Distribution guide&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Pronto! Você está pronto(a) para desenvolver aplicações Desktop com o Electron.
  &lt;/p&gt;
  
  &lt;p&gt;
    E caso queiram, o projeto está disponível no &lt;a href=&#34;https://github.com/henriquesosa/electron-intro&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tudo que você queria saber sobre Git e GitHub, mas tinha vergonha de perguntar</title>
      <link>http://tableless.com.br/tudo-que-voce-queria-saber-sobre-git-e-github-mas-tinha-vergonha-de-perguntar/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/tudo-que-voce-queria-saber-sobre-git-e-github-mas-tinha-vergonha-de-perguntar/</guid>
      <description>

&lt;p&gt;Este artigo traz a você tudo que precisa saber para se tornar um desenvolvedor que possa dominar tanto o git, quanto o Github. Nosso objetivo é trazer os conhecimentos necessários para que você possa, a partir do zero, dominar os conceitos gerais do git, e usar o github para &amp;#8220;hospedar&amp;#8221; seus projetos pessoais e acompanhar outros projetos de seu interesse.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-git&#34;&gt;O que é git?&lt;/h2&gt;

&lt;p&gt;Git é um sistema de controle de versão de arquivos. Através deles podemos&amp;nbsp;desenvolver projetos&amp;nbsp;na qual diversas pessoas podem contribuir simultaneamente no mesmo, editando e criando novos arquivos e permitindo que os mesmos possam existir sem o risco de suas alterações serem sobrescritas.&lt;/p&gt;

&lt;p&gt;Se não houver um sistema de versão, imagine o caos entre duas pessoas abrindo o mesmo arquivo ao mesmo tempo. Uma das aplicações do git é justamente essa, permitir que um arquivo possa ser editado ao mesmo tempo por pessoas diferentes. Por mais complexo que isso seja, ele tenta manter tudo em ordem para evitar problemas para nós desenvolvedores.&lt;/p&gt;

&lt;p&gt;Outro fator importante do git (e essa é um dos seus diferenciais em relação ao svn &amp;#8211; caso vc o conheça) é a possibilidade de criar, a qualquer momento, vários &lt;code&gt;snapshots&lt;/code&gt; do seu projeto, ou como chamamos mais &amp;#8220;nerdmenete&amp;#8221;, branch. Suponha que o seu projeto seja um site html, e você deseja criar uma nova seção no seu código HTML, mas naquele momento você não deseja que estas alterações estejam disponíveis para mais ninguém, só para você. Isso é, você quer alterar o projeto (incluindo vários arquivos nele), mas ainda não quer que isso seja tratado como &amp;#8220;oficial&amp;#8221; para outras pessoas, então vc cria um branch (como se fosse uma cópia espelho) e então trabalha apenas nesse branch, até acertar todos os detalhes dele. Após isso, você pode fazer um merge de volta do seu branch até o projeto original. Veja bem, se tudo isso que você leu só ajudou a te confundir mais &amp;#8211; respire fundo &amp;#8211; e siga em frente. Com exemplos tudo fica melhor.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-github&#34;&gt;O que é github?&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; é um serviço web que oferece diversas funcionalidades extras aplicadas ao git. Resumindo, você poderá usar gratuitamente o github para hospedar seus projetos pessoais. Além disso, quase todos os projetos/frameworks/bibliotecas sobre desenvolvimento open source estão no github, e você pode acompanhá-los através de novas versões, contribuir informando bugs ou até mesmo enviando código e correções. Se você é desenvolvedor e ainda não tem github, você está atrasado e essa é a hora de correr atrás do prejuízo.&lt;/p&gt;

&lt;h2 id=&#34;instalando-git&#34;&gt;Instalando git&lt;/h2&gt;

&lt;p&gt;O git é um programa que pode ser instalado &lt;a href=&#34;http://git-scm.com/download/win&#34; target=&#34;_blank&#34;&gt;neste link&lt;/a&gt; para Windows, &lt;a href=&#34;http://git-scm.com/download/mac&#34; target=&#34;_blank&#34;&gt;neste&lt;/a&gt; para Mac, ou então através do comando &lt;code&gt;sudo apt-get install git&lt;/code&gt; para plataformas Linux/Debian, como o Ubuntu. Se você usa uma VM na nuvem, como o &lt;a href=&#34;http://c9.io&#34; target=&#34;_blank&#34;&gt;cloud9&lt;/a&gt; ou &lt;a href=&#34;https://koding.com/&#34; target=&#34;_blank&#34;&gt;koding&lt;/a&gt;, o git já estará disponível em sua linha de comando.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nossa metodologia é fazer com que você aprenda git já utilizando o github, então vamos a sua configuração!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;criando-a-conta-no-github&#34;&gt;Criando a conta no GitHub&lt;/h2&gt;

&lt;p&gt;O github não possui instalação, ele é um serviço, e caso você não tenha uma conta, chegou a hora de criá-la, &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;neste link&lt;/a&gt;. Após criar a conta, você verá um botão verde &lt;code&gt;+New Repository&lt;/code&gt; na qual poderá criar um repositório de acordo com a tela a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github.png&#34; alt=&#34;github&#34; width=&#34;750&#34; height=&#34;477&#34; class=&#34;alignleft size-full wp-image-51160&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nesta imagem estamos criando um repositório cujo nome é &lt;code&gt;site&lt;/code&gt;, de domínio público (podem ser criados reps privados pagando uma mensalidade), e com o arquivo &lt;code&gt;README.md&lt;/code&gt; embutido, que contém uma descrição do seu projeto. Para que possamos começar a entender como o git funciona, é fundamental criar um rep como este para os nossos testes.&lt;/p&gt;

&lt;p&gt;Após a criação do repositório, ele estará disponível no endereço &lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/site&lt;/code&gt;, onde &lt;code&gt;username&lt;/code&gt;é o login que você usou para se cadastrar. Acessando esta url temos a seguinte resposta:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_site.png&#34; alt=&#34;github_site&#34; width=&#34;1051&#34; height=&#34;780&#34; class=&#34;alignleft size-full wp-image-51163&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Temos muitas informações nesta tela, pois ela é a tela principal do seu projeto. Explicaremos algumas informações ao longo deste artigo, por enquanto repare apenas no botão &lt;code&gt;HTTPs Clone Url&lt;/code&gt; na parte inferior à direta. Esta URl será necessária para que possamos &amp;#8220;clonar&amp;#8221; este projeto em nosso ambiente de estudo (sua máquina windows, mac, linux ou a vm). Clique no botão de copiar URL e perceba que a seguinte URL está na área de transferência: &lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/site.git&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-git&#34;&gt;Configurando o git&lt;/h2&gt;

&lt;p&gt;Existem 2 pequenos passos para configurar o seu GIT para ter um acesso mais simplificado ao github. Aqui estaremos estabelecendo que, sempre que necessitar, você irá fornecer o seu login e senha ao GitHub. Existem meios para salvar a senha em local seguro, mas vamos pular esta etapa. Para abrir um terminal GIT no Windows, basta criar uma pasta no seu sistema e, nela, clicar com o botão direito do mouse e escolher &lt;code&gt;Git Bash Here&lt;/code&gt;. Em sistemas mac/linux você já está acostumado a usar o terminal/console, o git estará lá disponível. Neste artigo estaremos utilizando a máquina virtual cloud9, que você pode aprender a usá-la neste &lt;a href=&#34;http://tableless.com.br/programando-na-nuvem-com-o-cloud9/&#34; target=&#34;_blank&#34;&gt;artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Então, com o seu terminal git aberto, vamos digitar:&lt;/p&gt;

&lt;pre&gt;$ git config --global user.name &#34;YOUR NAME&#34;
$ git config --global user.email &#34;YOUR EMAIL ADDRESS&#34;
&lt;/pre&gt;

&lt;p&gt;Estas configurações ficam alocadas no arquivo &lt;code&gt;~/.gitconfig&lt;/code&gt;, onde o ~ é o seu diretório home. No Windows, ele fica em &lt;code&gt;c:\Usuarios\&amp;lt;username&amp;gt;\.gitconfig&lt;/code&gt;. Veja a figura a seguir com a minha configuração no cloud9.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_config.png&#34; alt=&#34;git_config&#34; width=&#34;300&#34; height=&#34;146&#34; class=&#34;alignleft size-medium wp-image-51167&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;vamos-clonar&#34;&gt;Vamos clonar!&lt;/h2&gt;

&lt;p&gt;Então o que temos até agora é o git configurado para utilizar o github e o projeto no github criado. Precisamos trazer este projeto para o nosso git, e este processo se chama &lt;code&gt;clonar&lt;/code&gt;. Então, quando você quiser começar um projeto utilizando git, você cria ele no github e clona na sua máquina. O comando para clonar o projeto é &lt;code&gt;git clone &amp;quot;url&amp;quot;&lt;/code&gt;, veja:&lt;/p&gt;

&lt;pre&gt;git clone https://github.com/&amp;lt;username&amp;gt;/site.git
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_clone.png&#34; alt=&#34;git_clone&#34; width=&#34;720&#34; height=&#34;223&#34; class=&#34;alignleft size-full wp-image-51172&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Perceba que, ao fazer o git clone, o projeto é baixado para a sua máquina, e uma pasta com o nome do projeto é criada.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quer dizer que qualquer pessoa pode baixar o meu projeto? Sim, isso é natural, já que o seu repositório está público. Qualquer um pode clonar ele para si, mas eles não podem alterar os seus arquivos, isso não vai acontecer, exceto que você permita.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;comandos-iniciais-do-git&#34;&gt;Comandos iniciais do git&lt;/h2&gt;

&lt;p&gt;Com o repositório na sua máquina, vamos aprender 4 comandos iniciais que farão parte da sua vida a partir de agora:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add &amp;lt;arquivos...&amp;gt;&lt;/code&gt; Este comando adiciona o(s) arquivo(s) em um lugar que chamamos de INDEX, que funciona como uma área do git no qual os arquivos possam ser enviados ao Github. É importante saber que ADD não está adicionando um arquivo novo ao repositório, mas sim dizendo que o arquivo (sendo novo ou não) está sendo preparado para entrar na próxima revisão do repositório.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;comentário qualquer&amp;quot;&lt;/code&gt; Este comando realiza o que chamamos de &amp;#8220;commit&amp;#8221;, que significa pegar todos os arquivos que estão naquele lugar INDEX que o comando &lt;code&gt;add&lt;/code&gt; adicionou e criar uma revisão com um número e um comentário, que será vista por todos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt; Push (empurrar) é usado para publicar todos os seus commits para o github. Neste momento, será pedido a sua senha.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; Exibe o status do seu repositório atual &lt;/ul&gt;&lt;/p&gt;

&lt;h2 id=&#34;vamos-praticar&#34;&gt;Vamos praticar!&lt;/h2&gt;

&lt;p&gt;Chegou o momento de praticar um pouco o que vimos até agora, e com bastante calma para que você possa entender cada passo. Após clonar o seu projeto, crie o arquivo &lt;code&gt;index.html&lt;/code&gt; na pasta site que é o seu repositório git. Após criar o arquivo, execute o comando &lt;code&gt;git status&lt;/code&gt;. A resposta é semelhante a figura a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_touch_index.png&#34; alt=&#34;git_touch_index&#34; width=&#34;628&#34; height=&#34;284&#34; class=&#34;alignleft size-full wp-image-51179&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ou seja, o comando &lt;code&gt;git status&lt;/code&gt; nos trouxe várias informações, que iremos ignorar a princípio, exceto pelo &lt;code&gt;Untracked files&lt;/code&gt;, dizendo que existe um arquivo que não está sendo &amp;#8220;mapeado&amp;#8221; pelo git. Para preparar este arquivo para o seu versionamento, usamos o comando &lt;code&gt;git add&lt;/code&gt;, veja:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_add.png&#34; alt=&#34;git_add&#34; width=&#34;600&#34; height=&#34;272&#34; class=&#34;alignleft size-full wp-image-51180&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora temos o nosso arquivo index.html no INDEX do repositório, ou se você quiser pensar: &amp;#8220;preparado para um commit&amp;#8221;. Para commitar este arquivo, usamos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_commit.png&#34; alt=&#34;git_commit&#34; width=&#34;760&#34; height=&#34;248&#34; class=&#34;alignleft size-full wp-image-51182&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após &amp;#8220;commitar&amp;#8221; o arquivo, ele já está presente no nosso repositório local, tanto que realizamos o comando &lt;code&gt;git status&lt;/code&gt; novamente e ele retornou que não havia nada de novo no projeto. Perceba agora que, mesmo recarregando o projeto no github, nada muda. Ou seja, estas mudanças até agora foram locais, você pode realizar várias operações antes de publicá-las no github. Para publicar, usamos o comando &lt;code&gt;git push&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git_push.png&#34; alt=&#34;git_push&#34; width=&#34;600&#34; height=&#34;255&#34; class=&#34;alignleft size-full wp-image-51184&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após realizar o git push podemos ver no site github as mudanças realizadas no projeto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_site2.png&#34; alt=&#34;github_site2&#34; width=&#34;812&#34; height=&#34;552&#34; class=&#34;alignleft size-full wp-image-51185&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Desta forma, aprendemos os 4 comandos mais básicos do git, e com ele podemos começar a compreender como funciona o processo de versionamento de arquivos com git e github.&lt;/p&gt;

&lt;h3 id=&#34;errei-a-mensagem-do-commit-como-arrumo&#34;&gt;Errei a mensagem do commit, como arrumo?&lt;/h3&gt;

&lt;p&gt;Imagine que você tenha errado a mensagem que escreveu no commit ou simplesmente queira melhorar a descrição do seu trabalho. Você já comitou a mensagem mas ainda não fez o push das suas modificações para o servidor. Nesse caso você usa a flag &lt;code&gt;--amend&lt;/code&gt;. Fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ git commit --amend&lt;/pre&gt;
    

&lt;p&gt;O &lt;code&gt;git commit --amend&lt;/code&gt; modifica a mensagem do commit mais recente, ou seja, o último commit feito por você no projeto. Além de você mudar a mensagem do commit, você consegue adicionar arquivos que você se esqueceu ou retirar arquivos comitados por engano. O git cria um commit totalmente novo e corrigido.&lt;/p&gt;

&lt;h2 id=&#34;cadê-o-git-pull&#34;&gt;Cadê o git pull?&lt;/h2&gt;

&lt;p&gt;Ainda existe um comando importante neste processo, que é o &lt;code&gt;git pull&lt;/code&gt;. Ele é usado para trazer todas as modificações que estão no github para o seu projeto local. Isso é vital quando existem projetos mantidos por mais de uma pessoa, ou se você possui duas máquinas e precisa manter a sincronia entre elas. Supondo que você possui uma máquina no trabalho e outra em casa. Ambas tem o repositório local ligado ao github. Quando você executar um &lt;code&gt;git push&lt;/code&gt; em uma das máquinas, terá que realizar um &lt;code&gt;git pull&lt;/code&gt; na outra.&lt;/p&gt;

&lt;p&gt;Para exemplificar, vamos alterar o arquivo README.md diretamente no github. Isso é possível clicando no arquivo e depois clicando no ícone para edição, conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/github_edit.png&#34; alt=&#34;github_edit&#34; width=&#34;935&#34; height=&#34;356&#34; class=&#34;alignleft size-full wp-image-51241&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após clicar em edit, adicione algum texto, forneça uma mensagem de commit e clique no botão &amp;#8220;Commit Changes&amp;#8221;. Com isso, uma nova revisão no seu projeto é criada, mas como ela foi gerada no github, o seu projeto local está desatualizado. Para atualizar o seu projeto, use &lt;code&gt;git pull&lt;/code&gt;, e perceba que o arquivo README.md é atualizado de acordo com a sua última revisão, semelhante a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/git-pull.png&#34; alt=&#34;git-pull&#34; width=&#34;520&#34; height=&#34;285&#34; class=&#34;alignleft size-full wp-image-51242&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;melhorando-o-conceito-do-comando-git-add&#34;&gt;Melhorando o conceito do comando git add&lt;/h2&gt;

&lt;p&gt;Possivelmente você imaginou que o comando &lt;code&gt;git add&lt;/code&gt; é usado para novos arquivos, mas isso não é verdade. O comando &lt;code&gt;add&lt;/code&gt; é usado para adicionar qualquer alteração de arquivo ao INDEX do git, que é uma área especial onde os arquivos estão sendo preparados para o commit. Quando usamos &lt;code&gt;add&lt;/code&gt;, estamos dizendo que o arquivo estará adicionando ao próximo commit, quando este for realizado. Isso é necessário porque nem sempre queremos que todos os arquivos que alteramos sejam comitados.&lt;/p&gt;

&lt;p&gt;Vamos a um exemplo simples, adicionando o seguinte código no arquivo index.html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
    

&lt;p&gt;Após salvar este modelo html, o comando git status irá apresentar:&lt;/p&gt;

&lt;pre&gt;modified:   index.html
&lt;/pre&gt;
    

&lt;p&gt;Para adicionar o arquivo e prepará-lo para o commit, usamos &lt;code&gt;git add index.html&lt;/code&gt;. Desta forma, ele está pronto para usarmos o comando &lt;code&gt;git commit&lt;/code&gt;, o que não faremos agora. Antes disso, altere novamente o arquivo e adicione algum texto entre as tags body, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
Esse é meu site
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
    

&lt;p&gt;Após alterar o arquivo, temos a seguinte situação:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adicionamos o conteúdo html no arquivo index.html&lt;/li&gt;
&lt;li&gt;Realizamos &lt;code&gt;git add index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Alteramos index.html e adicionamos o texto entre as tags body
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Neste momento, faça: &lt;code&gt;git commit -m &amp;quot;Alteração no arquivo index.html&amp;quot;&lt;/code&gt;, e após isso, faça: &lt;code&gt;git push&lt;/code&gt;. Analise agora no github se a sua alteração na tag body está visível. Ela não estará. Mas porque isso aconteceu? Quando usamos o comando &lt;code&gt;git add&lt;/code&gt;, aquela alteração no body ainda não tinha sido escrita, então ela não estará pronta até que você faça novamente o comando &lt;code&gt;git add&lt;/code&gt;. Em termos técnicos, a segunda alteração que fez ainda não está na INDEX do repositório. Como tarefa, faça novamente &lt;code&gt;git add index.html&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt; e &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;trabalhando-com-branches&#34;&gt;Trabalhando com branches&lt;/h2&gt;

&lt;p&gt;Branches e mergers sempre foram os pesadelos de qualquer gerenciador de versão (ok, do svn&amp;#8230;). No git, o conceito de branch tornou-se algo muito simples e fácil de usar. Mas quando que temos que criar um branch? Imagine que o seu site está pronto, tudo funcionando perfeitamente, mas surge a necessidade de alterar algumas partes dele como forma de melhorá-lo. Além disso, você precisa manter estas alterações tanto no computador de casa quanto do trabalho. Com isso temos um problema, se você começa a alterar os arquivos em casa, para na metade da implementação, e precisa terminar no trabalho, como você iria comitar tudo pela metade e deixar o site incompleto?&lt;/p&gt;

&lt;p&gt;Para isso existe o conceito de branch, que é justamente ramificar o seu projeto em 2, como se cada um deles fosse um repositório, e depois juntá-lo novamente. Voltando ao github, perceba o detalhe da imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/master.png&#34; alt=&#34;master&#34; width=&#34;821&#34; height=&#34;344&#34; class=&#34;alignleft size-full wp-image-51249&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sem saber, você já está em um branch, que chamamos de master. Perceba também que, sempre que usávamos &lt;code&gt;git status&lt;/code&gt;, o nome do branch é exibido, e sempre que comitávamos ou fazíamos o push, o mesmo aparecia. Ou seja, até este momento fizemos todas as alterações no master. Você pode criar um branch no github ou em linha de comando. Inicialmente, vamos pelo github, criando o branch &amp;#8220;new_menu&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/new_branch.png&#34; alt=&#34;new_branch&#34; width=&#34;468&#34; height=&#34;328&#34; class=&#34;alignleft size-full wp-image-51250&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Criamos o branch new_menu, e para que possamos trabalhar nele, usamos o comando &lt;code&gt;git checkout new_menu&lt;/code&gt;. No primeiro momento que você cria este branch no github, é necessário realizar o comando &lt;code&gt;git pull&lt;/code&gt; no seu projeto para que ele possa saber que este branch foi criado. Após realizar &lt;code&gt;git pull&lt;/code&gt;, pode-se alterar para o novo branch, conforme a imagem a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/new_menu.png&#34; alt=&#34;new_menu&#34; width=&#34;604&#34; height=&#34;299&#34; class=&#34;alignleft size-full wp-image-51252&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Neste momento, estamos no branch &lt;code&gt;new_menu&lt;/code&gt;, e tudo que fizermos agora será pertencente a ele. Caso haja necessidade de voltar ao branch master, basta realizar o comando &lt;code&gt;git checkout master&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Atenção, o comando &lt;code&gt;checkout&lt;/code&gt; do git não é o mesmo do checkout do svn, caso você o conheça. Ambos tem sentidos totalmente diferentes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então, entando no branch new_menu, vamos adicionar um simples menu na página:&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;ldquo;UTF-8&amp;rdquo;&amp;gt;
&amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;body&amp;gt;
    Meu Site&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;ul&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;index.html&amp;quot;&amp;amp;gt;Home&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;sobre.html&amp;quot;&amp;amp;gt;Sobre&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;&amp;amp;lt;a href=&amp;quot;contato.html&amp;quot;&amp;amp;gt;Contato&amp;amp;lt;/a&amp;amp;gt;&amp;amp;lt;/li&amp;amp;gt;
&amp;amp;lt;/ul&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Após criar o menu, certifique-se de estar no branch new_menu e faça o commit, conforme a figura a seguir.

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/new_menu_commit.png&amp;quot; alt=&amp;quot;new_menu_commit&amp;quot; width=&amp;quot;716&amp;quot; height=&amp;quot;536&amp;quot; class=&amp;quot;alignleft size-full wp-image-51254&amp;quot; /&amp;gt;

Agora temos algumas modificações no branch new\_menu, e podemos trabalhar nesse branch por quanto tempo for necessário, já que o master está intacto. Aqui temos uma funcionalidade interessante, que se destaca em relação as outras ferramentas de versionamento. Suponha que, no meio do seu desenvolvimento do menu, surge a necessidade de resolver um bug crítico no master, algo como &amp;amp;#8220;está faltando o h1 no título do seu site&amp;amp;#8221;&amp;amp;#8230;. Ou seja, estamos no branch new\_menu e precisamos alterar o master. Para isso, use o comando `git checkout master`. Ao fazer isso, retornamos ao master e aquele menu que criamos não está mais presente, conforme a figura a seguir.

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/back_to_master.png&amp;quot; alt=&amp;quot;back_to_master&amp;quot; width=&amp;quot;624&amp;quot; height=&amp;quot;686&amp;quot; class=&amp;quot;alignleft size-full wp-image-51255&amp;quot; /&amp;gt;

É claro que não perdemos o menu, ele está apenas no branch new_menu. Quando retornarmos a ele, voltará. Agora altere o título do site, incluindo o h1, veja:

&amp;lt;pre class=&amp;quot;lang-html&amp;quot;&amp;gt;&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;ldquo;UTF-8&amp;rdquo;&amp;gt;
    &amp;lt;title&amp;gt; Meu Site &amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Meu Site&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Após alterar, faça commit e o push! Veja:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/git_push2.png&amp;quot; alt=&amp;quot;git_push2&amp;quot; width=&amp;quot;687&amp;quot; height=&amp;quot;529&amp;quot; class=&amp;quot;alignleft size-full wp-image-51256&amp;quot; /&amp;gt;

Agora que resolvemos o problema do título, podemos voltar ao new_menu: `git checkout new_menu`. Após realizar este comando, temos o menu de volta no arquivo index.html, mas veja que o título não possui a tag H1. Isso acontece que estamos em outro branch. Tudo que acontece no master, fica no master. Tudo que acontece no new\_menu, fica no new\_menu

## Merge com conflitos

Se desejar trazer o título do master para o new_menu, devemos fazer uma operação chamada `merge`, que irá juntar um código no outro. Então, estando no branch new_menu, e querendo trazer uma alteração do master para este branch, precisamos realizar o seguinte comando: `git merge master`. Caso existam alterações nas mesmas linhas entre mesmos arquivos, um conflito será gerado, como no exemplo a seguir:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/conflict.png&amp;quot; alt=&amp;quot;conflict&amp;quot; width=&amp;quot;595&amp;quot; height=&amp;quot;616&amp;quot; class=&amp;quot;alignleft size-full wp-image-51259&amp;quot; /&amp;gt;

Este é um exemplo de conflito que podo ocorrer quando realizamos um merge, indicado em `1`. Perceba que o código html possui uma definição entre dois blocos, o primeiro, em `2` mostra como é o código do branch new_menu, e o segundo bloco, em `3`, mostra como é o código no branch master. Edite o arquivo repassando para a seguinte forma:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge2.png&amp;quot; alt=&amp;quot;merge2&amp;quot; width=&amp;quot;578&amp;quot; height=&amp;quot;613&amp;quot; class=&amp;quot;alignleft size-full wp-image-51260&amp;quot; /&amp;gt;

Ou seja, ajustamos os dois blocos, como se fosse um merge manual. Após resolver o conflito, vamos prepará-lo para o commit no branch new_menu, com o comando `git add`. Veja:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge3.png&amp;quot; alt=&amp;quot;merge3&amp;quot; width=&amp;quot;779&amp;quot; height=&amp;quot;105&amp;quot; class=&amp;quot;alignleft size-full wp-image-51261&amp;quot; /&amp;gt;

Ou seja, resolvemos o conflito &amp;amp;#8220;na mão&amp;amp;#8221; e depois comitamos normalmente.

## Merge sem conflitos

Quando não alteremos a mesma linha de um arquivo em branches diferentes, conseguimos realizar um merge sem ocasionar conflitos. Isso pode ser notado ao trazermos o menu do branch new_menu para o master, da seguinte forma:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/merge4.png&amp;quot; alt=&amp;quot;merge4&amp;quot; width=&amp;quot;585&amp;quot; height=&amp;quot;652&amp;quot; class=&amp;quot;alignleft size-full wp-image-51262&amp;quot; /&amp;gt;

Se não houver conflitos, basta realizar um commit normal para confirmar o merge.

## Vendo branches e merges

O github possui uma ferramenta gráfica para exibir os branches e merges do seu projeto. Clique no ícone em forma de gráfico no menu à direita do site e clique na aba Network, para se ter um resultado semelhante a figura a seguir:

&amp;lt;img src=&amp;quot;http://tableless.com.br/wp-content/uploads/2015/09/graph.png&amp;quot; alt=&amp;quot;graph&amp;quot; width=&amp;quot;1027&amp;quot; height=&amp;quot;446&amp;quot; class=&amp;quot;alignleft size-full wp-image-51265&amp;quot; /&amp;gt;

## Lendo mais

Você pode ler mais sobre git e entender mais sobre controles de versão, nesses artigos do Tableless:

  * &amp;lt;a href=&amp;quot;http://tableless.com.br/alguns-comandos-git/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Comandos Iniciais do Git&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/slides-devs-10-git/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Apresentações sobre GIT&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/iniciando-no-git-parte-1/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Iniciando com GIT &amp;amp;#8211; Parte 1&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/iniciando-no-git-parte-2/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Iniciando com GIT &amp;amp;#8211; Parte 2&amp;lt;/a&amp;gt; 
  * &amp;lt;a href=&amp;quot;http://tableless.com.br/git-com-interface-grafica/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git com Interface Gráfica&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Criando um “blog” no Github com tinypress.</title>
      <link>http://tableless.com.br/criando-um-blog-github-com-tinypress/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-um-blog-github-com-tinypress/</guid>
      <description>

&lt;p&gt;Amigos, amigos, amigos, a internet é imprevisível. Há um tempo atrás eu trouxe pra vocês o novo CMS chamado &lt;a href=&#34;http://tableless.com.br/ghost-simples-e-perfeita-plataforma-para-publicacoes/&#34;&gt;Ghost&lt;/a&gt;. E eu, navegando por ai, vagarosamente, me esbarro (novamente) nessa ferramenta excepcional chamada &lt;a href=&#34;https://tinypress.co/&#34;&gt;Tinypress&lt;/a&gt;, que é praticamente um novo &amp;#8220;gerenciador&amp;#8221; de &lt;a href=&#34;http://reidark.github.io/criando-paginas-no-github/&#34;&gt;blog&lt;/a&gt; com integração ao Github.&lt;/p&gt;

&lt;h2 id=&#34;eu-não-entendo-nada-de-github-e-agora&#34;&gt;Eu não entendo nada de Github, e agora?&lt;/h2&gt;

&lt;p&gt;Calma, muita calma. Não precisa ficar desesperado, nesse básico tutorial você vai ver que não precisa entender muito de github para ter seu próprio blog hospedado lá. O tinypress faz praticamente tudo automático, e você só vai mexer nos códigos caso você queira, e, se quiser, acompanhe porque vou mostrar nesse artigo como pode ser feito.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-tinypress&#34;&gt;O que é o Tinypress?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/04/Captura-de-Tela-2014-04-23-às-20.51.26.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/04/Captura-de-Tela-2014-04-23-às-20.51.26.png&#34; alt=&#34;Tinypress Github Blog&#34; width=&#34;682&#34; height=&#34;258&#34; class=&#34;aligncenter size-full wp-image-42246&#34; srcset=&#34;uploads/2014/04/Captura-de-Tela-2014-04-23-às-20.51.26.png 682w, uploads/2014/04/Captura-de-Tela-2014-04-23-às-20.51.26-400x151.png 400w&#34; sizes=&#34;(max-width: 682px) 100vw, 682px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Antes de tudo eu já aviso: Ele cria um blog estático. Ok, pra alguns isso não seria novidade nenhuma, mas para quem não sabe o que é: Blog estático é basicamente páginas HTML ou Markdown (nesse caso) serem geradas em forma de post. Sim, não existe conexão com um banco de dados para puxar informações, é tudo estático, tá tudo ali, tudo escrito em documento já pronto. O que o tinypress faz é puxar essas páginas e exibir elas em forma de post. Mais ou menos como funciona o Middleman ou o Jekyll, para quem já se aventurou por estas bandas.&lt;/p&gt;

&lt;p&gt;O tinypress funciona basicamente assim:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Você entra no site e libera o acesso no github para a aplicação do tinypress.&lt;/li&gt;
&lt;li&gt;Escolha entre os templates já prontos.&lt;/li&gt;
&lt;li&gt;Escolher o nome do blog e a quantidade de posts por página.&lt;/li&gt;
&lt;li&gt;Se você não tiver um repositório de página pessoal ainda (seunome.github.io) ele automaticamente cria uma (repositório público).&lt;/li&gt;
&lt;li&gt;Pronto, você já está hábil para começar a fazer publicações.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;interface-e-como-postar&#34;&gt;Interface e como postar&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/04/Captura-de-Tela-2014-04-23-às-21.12.44.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/04/Captura-de-Tela-2014-04-23-às-21.12.44.png&#34; alt=&#34;Tinypress Interface&#34; width=&#34;728&#34; height=&#34;254&#34; class=&#34;aligncenter size-full wp-image-42248&#34; srcset=&#34;uploads/2014/04/Captura-de-Tela-2014-04-23-às-21.12.44.png 728w, uploads/2014/04/Captura-de-Tela-2014-04-23-às-21.12.44-400x139.png 400w&#34; sizes=&#34;(max-width: 728px) 100vw, 728px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A interface é básica, porém, é tudo que você precisa para escrever um texto, artigo ou qualquer coisa para um blog. Sim, quando eu digo básico, é &lt;strong&gt;bem&lt;/strong&gt; básico mesmo, hehe. Mas existem coisas bacanas na publicação do post, tem como escolher as tags, categorias, url amigável entre outros. A é, também tem como você escolher o post como publicado ou apenas draft (rascunho).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/04/Captura-de-Tela-2014-04-23-às-21.21.01.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/04/Captura-de-Tela-2014-04-23-às-21.21.01.png&#34; alt=&#34;Tinypress advanced options&#34; width=&#34;665&#34; height=&#34;284&#34; class=&#34;aligncenter size-full wp-image-42249&#34; srcset=&#34;uploads/2014/04/Captura-de-Tela-2014-04-23-às-21.21.01.png 665w, uploads/2014/04/Captura-de-Tela-2014-04-23-às-21.21.01-400x170.png 400w&#34; sizes=&#34;(max-width: 665px) 100vw, 665px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assim como as páginas no github, o Tinypress usa a linguagem Markdown para os posts. Caso você não saiba &amp;#8220;escrever&amp;#8221; em .markdown (.md) olhe sua syntax básica &lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax&#34;&gt;aqui&lt;/a&gt;. Relaxa, não é nada difícil, dá pra aprender rapidinho, até porquê você não vai usar nada avançado, por isso foque mais em aprender o uso de links, títulos, imagens e afins. Recomendo fortemente aprender essa linguagem não apenas para o blog, mas para te beneficiar ao escrever para alguns repositórios do github em outros projetos, visto que a linguagem usada é o markdown.&lt;/p&gt;

&lt;p&gt;tinypress tem resquicios de que foi criada com Jekyll, um &amp;#8220;gerador&amp;#8221; estático de &amp;#8220;blogs&amp;#8221;, você não precisa saber Jekyll para manusear os posts e coisas do tipo, mas caso queira mudar alguma coisa no código principal, aqui fica a dica do &lt;a href=&#34;http://jekyllrb.com/docs/github-pages/&#34;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;e-o-repositório-como-fica&#34;&gt;E o repositório, como fica?&lt;/h2&gt;

&lt;p&gt;Assim como eu expliquei no começo desse artigo, usarei algumas explicações básicas no meio do texto para os menos familiarizados conhecerem melhor o github.&lt;/p&gt;

&lt;p&gt;Pra quem ainda não se aventurou no universo do github, &lt;strong&gt;repositório&lt;/strong&gt; (público) é como se fosse uma pasta sua, com arquivos do formato que desejar para outras pessoas verem (ou não) suas aplicações, códigos e outras coisas, e assim formar um grande universo &lt;em&gt;open source&lt;/em&gt;. Não preciso nem falar que é online né, haha.&lt;/p&gt;

&lt;p&gt;O tinypress cria seu repositório de blog(seunome.github.io), ou seja, sua página no github. Dentro dele ele coloca os arquivos necessários para o blog rodar. Para verificar como ficou o meu repositório, entre &lt;a href=&#34;https://github.com/reidark/reidark.github.io&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lembrete:&lt;/strong&gt; Você só altera os arquivos se você quiser, nada do que está aqui é obrigatório, leia caso realmente queira alterar alguma coisa no template.&lt;/p&gt;

&lt;p&gt;Você pode alterar os arquivos na unha. Eu não sou o tipo de cara que gosta de mexer no que tá queto, mas, com certeza, num futuro próximo vou alterar um pouco do CSS do tema e talvez até criar um tema próprio. E como fazer isso? Navegue nas pastas do seu repositório. Como nós vamos ir direto na pasta onde se encontra o tema (css) vá até: &lt;em&gt;seu-repositório/public/css&lt;/em&gt; (&lt;a href=&#34;https://github.com/reidark/reidark.github.io/tree/master/public/css&#34;&gt;reidark.github.io/public/css&lt;/a&gt;). Pronto, ai está todo o CSS dá página, altere como desejar.&lt;/p&gt;

&lt;p&gt;*** Como eu altero esses arquivos:?**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R:&lt;/strong&gt; Olha, pra alterar meus repositórios no Github, eu gosto de usar o github for PC/MAC. É o software do github que você baixa na sua máquina e consegue editar facilmente seus repositórios. Você pode fazer o download aqui: &lt;a href=&#34;https://windows.github.com/&#34;&gt;Windows&lt;/a&gt; ou &lt;a href=&#34;https://mac.github.com/&#34;&gt;MAC&lt;/a&gt;. Depois de baixado, é só abrir e logar sua conta. Depois de logar sua conta você terá acesso a todos os seus repositórios, para alterá-los, basta &amp;#8220;clonar&amp;#8221; esse repositório para algum lugar do seu computador. Pronto, agora faça suas alterações, brinque, fuce. Após você salvar o arquivo, no software do github vai ter um &amp;#8220;commit pendente&amp;#8221; que seria basicamente uma alteração no arquivo original. Basta você ir lá, &amp;#8220;commitar&amp;#8221; (enviar) essa alteração que é basicamente apertar 1 botão e pronto!&lt;/p&gt;

&lt;p&gt;Caso você tenha dúvidas para alterar os arquivos, é só olhar naquela mesma página em que você efetuou o download, lá tem explicações.&lt;/p&gt;

&lt;p&gt;Você também pode usar o Git (provavelmente os mais experientes com versionamento irão fazer isso), mas isso eu já consideraria um pouco avançado, porém, você é livre para &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;aprender Git&lt;/a&gt; (altíssimo recomendado).&lt;/p&gt;

&lt;h2 id=&#34;eu-devo-fazer-esse-blog&#34;&gt;Eu devo fazer esse blog?&lt;/h2&gt;

&lt;p&gt;É aqui que eu queria chegar. Eu recomendaria esse tipo de blog estático para desenvolvedores e pessoas evangelizadoras do &lt;em&gt;open source&lt;/em&gt;. Lembre-se, o seu blog é código aberto (repositório público) e qualquer um pode xeretar por lá, isso significa que eles podem te ajudar, enviando commits para melhorar, ou apenas olhar.&lt;/p&gt;

&lt;p&gt;Não coloque esperanças em criar um baita blog de entretenimento com essa ferramenta, claramente ela não foi feita pra isso (caso você queira tentar, você é livre, meu amigo). Mas eu defendo totalmente a idéia de desenvolvedores criarem blogs para a postagem de artigos pessoais e outras coisas para o avanço do código aberto, já que nossa comunidade é basicamente movida a isso.&lt;/p&gt;

&lt;p&gt;Sejam livres para inovar, até porque essas coisas são feitas para isso!&lt;/p&gt;

&lt;p&gt;Espero que eu tenha conseguido apresentar essa nova ferramenta bacana pra vocês. Caso ela tenha algumas novas versões, pode ter certeza que eu volto pra mostrar, haha.&lt;/p&gt;

&lt;p&gt;Alguns links que podem ser interessantes:&lt;/p&gt;

&lt;p&gt;Site Oficial &amp;#8211; &lt;a href=&#34;https://tinypress.co/&#34;&gt;tinypress.co&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter Oficial &amp;#8211; &lt;a href=&#34;https://twitter.com/tinypress_co&#34;&gt;@tinypress&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meu blog criado com tinypress (básico) &amp;#8211; &lt;a href=&#34;http://reidark.github.io/&#34;&gt;reidark.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abraços 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Guide by @mdo</title>
      <link>http://tableless.com.br/code-guide-mdo/</link>
      <pubDate>Fri, 28 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/code-guide-mdo/</guid>
      <description>&lt;p&gt;Alguns devem conhecer o &lt;a href=&#34;http://twitter.com/@mdo&#34;&gt;@mdo&lt;/a&gt;. Se você não conhece, ele é um dos criadores do &lt;a href=&#34;http://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ontem a noite ele liberou um Guia de Escrita de Código. É um guia simples onde ele cita uma série de boas práticas e guidelines para escrever código bem estruturado, escalável e legível para todos da equipe. Como eu sigo a grande maioria das regras do guia em todos os meus projetos, achei legal traduzir pra divulgar as boas práticas aqui no Brasil.&lt;/p&gt;

&lt;p&gt;Eu &lt;a href=&#34;https://github.com/diegoeis/code-guide/&#34;&gt;forkei o projeto e traduzi o guia para o português&lt;/a&gt;. Mesmo assim eu preciso ainda de ajuda para revisão. Se alguém quiser ajudar ou apenas estiver curioso para ler o guia em português, visite: &lt;a href=&#34;http://diegoeis.github.io/code-guide/&#34;&gt;Code Guide by @mdo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Atom: o novo editor by Github</title>
      <link>http://tableless.com.br/atom-o-novo-editor-github/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/atom-o-novo-editor-github/</guid>
      <description>

&lt;p&gt;É quase impossível não comparar o Atom com o Sublime. O Sublime cravou um padrão com seus shortcuts, sua interface e sua coleção de comandos que é muito difícil ignorar. O Atom tem a cara do Sublime. Diferente do Brackets, que é bem diferente tanto na interface quanto nos shortcuts. Estou usando o Brackets para algumas coisas e estou gostando bastante. Mas a curva de aprendizado, quando acostumado com o Sublime, é muito grande. Com o Atom você já vai conhecer meia dúzia de shortcuts, facilitando muito a migração.&lt;/p&gt;

&lt;p&gt;Sinceramente eu não me lembro quando o Sublime tomou conta de tudo. Um dia, todo mundo acordou com o Sublime instalado, sabendo todos os atalhos e as manhas do editor. Não teve tempo de aprendizado. Ninguém mais fica brigando qual editor é melhor&amp;#8230; Todo mundo sabe que VIM é coisa de louco e Sublime coisa de gente normal (brincadeira). É inegável que o Sublime entendeu como digitávamos código, retirando tudo que era ruído e deixando apenas o que interessava. Isso começa pela interface e termina na forma com que executamos e manipulamos comandos.&lt;/p&gt;

&lt;p&gt;O Atom seguiu o mesmo caminho. Ele pegou tudo que era bom do Sublime e ainda teve ideias originais e geniais para facilitar ainda mais a nossa vida. É como se o Atom fosse uma nova versão do Sublime. É difícil até de pensar o que o Sublime mudaria para melhorar e até concorrer com o Atom.&lt;/p&gt;

&lt;p&gt;Essa similaridade entre os editores não é ruim. Mas o que vai importar mesmo são as features extras que cada um pode trazer no futuro. Descrevi algumas features legais que me chamaram mais a atenção e que se diferenciam totalmente do Sublime.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/Screen-Shot-2014-02-27-at-13.56.31.png&#34; alt=&#34;Atom editor github&#34; class=&#34;alignnone size-full wp-image-41283&#34; srcset=&#34;uploads/2014/02/Screen-Shot-2014-02-27-at-13.56.31.png 1216w, uploads/2014/02/Screen-Shot-2014-02-27-at-13.56.31-177x168.png 177w, uploads/2014/02/Screen-Shot-2014-02-27-at-13.56.31-327x310.png 327w, uploads/2014/02/Screen-Shot-2014-02-27-at-13.56.31-400x378.png 400w&#34; sizes=&#34;(max-width: 1216px) 100vw, 1216px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;aparência-e-themes&#34;&gt;Aparência e themes&lt;/h2&gt;

&lt;p&gt;Não há muito o que falar sobre aparência geral do editor. Ele é bem parecido com o Sublime Text, só que com uma vantagem: você consegue customizar praticamente QUALQUER COISA usando CSS.&lt;/p&gt;

&lt;p&gt;Seguindo o menu &lt;strong&gt;Atom &amp;gt; Open Your Stylesheet&lt;/strong&gt;, o Atom abre um arquivo CSS onde você customiza o que quiser na tela. Muda cor de texto, font, background, margin, padding, TUDO.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/Screen-Shot-2014-02-27-at-14.42.08.png&#34; alt=&#34;Screen Shot 2014-02-27 at 14.42.08&#34; class=&#34;alignnone size-full wp-image-41287&#34; srcset=&#34;uploads/2014/02/Screen-Shot-2014-02-27-at-14.42.08.png 1442w, uploads/2014/02/Screen-Shot-2014-02-27-at-14.42.08-210x168.png 210w, uploads/2014/02/Screen-Shot-2014-02-27-at-14.42.08-388x310.png 388w, uploads/2014/02/Screen-Shot-2014-02-27-at-14.42.08-400x319.png 400w&#34; sizes=&#34;(max-width: 1442px) 100vw, 1442px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Aí vem a pergunta: Mas como vou saber os elementos que devo formatar? Simples, abra um Inspector. Siga o menu &lt;strong&gt;View &amp;gt; Developer &amp;gt; Toggle Developer Tools&lt;/strong&gt;. O Inspector que se abre é o padrão do Webkit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/Screen-Shot-2014-02-27-at-13.56.31.png&#34; alt=&#34;Atom editor github&#34; class=&#34;alignnone size-full wp-image-41283&#34; srcset=&#34;uploads/2014/02/Screen-Shot-2014-02-27-at-13.56.31.png 1216w, uploads/2014/02/Screen-Shot-2014-02-27-at-13.56.31-177x168.png 177w, uploads/2014/02/Screen-Shot-2014-02-27-at-13.56.31-327x310.png 327w, uploads/2014/02/Screen-Shot-2014-02-27-at-13.56.31-400x378.png 400w&#34; sizes=&#34;(max-width: 1216px) 100vw, 1216px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Desse jeito fica muito, muito fácil personalizar o visual do editor e até criar um novo tema para compartilhar por aí.&lt;/p&gt;

&lt;p&gt;Um detalhe: você pode escrever CSS puro ser quiser, sem problema, mas para os mais ousados, fique à vontade para escrever em LESS. Muito útil se quiser fazer um tema para o editor.&lt;/p&gt;

&lt;h3 id=&#34;styleguide&#34;&gt;Styleguide&lt;/h3&gt;

&lt;p&gt;Indo para o menu &lt;strong&gt;Packages &amp;gt; Styleguide &amp;gt; Show&lt;/strong&gt;, o Atom te mostra um guia de estilo do tema atual. Ele mostra o markup do HTML e também o CSS que faz esse HTML ficou bonitão. Isso serve para ajudar os criadores de temas a revisarem seus estilos e como eles se comportam nos elementos do editor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/Screen-Shot-2014-02-27-at-17.35.28.png&#34; alt=&#34;Screen Shot 2014-02-27 at 17.35.28&#34; class=&#34;alignnone size-full wp-image-41289&#34; srcset=&#34;uploads/2014/02/Screen-Shot-2014-02-27-at-17.35.28.png 1394w, uploads/2014/02/Screen-Shot-2014-02-27-at-17.35.28-263x168.png 263w, uploads/2014/02/Screen-Shot-2014-02-27-at-17.35.28-486x310.png 486w, uploads/2014/02/Screen-Shot-2014-02-27-at-17.35.28-400x254.png 400w&#34; sizes=&#34;(max-width: 1394px) 100vw, 1394px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;settings&#34;&gt;Settings&lt;/h2&gt;

&lt;p&gt;Essa parte é sensacional. O Sublime não tem uma área para controlar as configurações do editor. Você muda essas preferências direto no arquivos de configuração do editor. Isso é genial na primeira vez, mas depois você sente alguma falta de apertar botões, saber que tudo tá funcionando, ter certeza de que não alterou nada que vá destruir seus shortcuts, tema e outras configurações. Já o Atom tem a famosa tela de configurações, como qualquer outro programa. Nele você gerencia os packages (plugins), temas e shortcuts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/Screen-Shot-2014-02-27-at-14.41.28.png&#34; alt=&#34;Screen Shot 2014-02-27 at 14.41.28&#34; class=&#34;alignnone size-full wp-image-41286&#34; srcset=&#34;uploads/2014/02/Screen-Shot-2014-02-27-at-14.41.28.png 1442w, uploads/2014/02/Screen-Shot-2014-02-27-at-14.41.28-210x168.png 210w, uploads/2014/02/Screen-Shot-2014-02-27-at-14.41.28-388x310.png 388w, uploads/2014/02/Screen-Shot-2014-02-27-at-14.41.28-400x319.png 400w&#34; sizes=&#34;(max-width: 1442px) 100vw, 1442px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As vezes, quando você precisa fazer algo muito personalizado é legal editar os arquivos de configuração do próprio editor, aí o Atom, como no Sublime Text, permite que você modifique as configurações personalizadas em arquivos específicos. Você pode gravar scripts, customizar seus próprios shortcuts, snippets etc.&lt;/p&gt;

&lt;h3 id=&#34;keybindings&#34;&gt;Keybindings&lt;/h3&gt;

&lt;p&gt;Logo de cara você já tem a listagem dos shortcuts do editor, com um search decente que te ajuda a encontrar os comandos. No Sublime Text você ficava vasculhando no arquivo de configuração ou procurando no Google. Não era difícil, mas era pouco confortável.&lt;/p&gt;

&lt;h2 id=&#34;tudo-são-módulos&#34;&gt;Tudo são módulos&lt;/h2&gt;

&lt;p&gt;O Atom chama seus plugins de Packages. Estes packages fazem parte das configurações do editor ou são apenas plugins que estendem as funcionalidades já existentes. Todos estes packages são módulos independentes e todos eles estão no Github, prontos para serem forkados, compartilhados e etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/Screen-Shot-2014-02-27-at-14.41.13.png&#34; alt=&#34;Atom editor github&#34; class=&#34;alignnone size-full wp-image-41285&#34; srcset=&#34;uploads/2014/02/Screen-Shot-2014-02-27-at-14.41.13.png 1442w, uploads/2014/02/Screen-Shot-2014-02-27-at-14.41.13-210x168.png 210w, uploads/2014/02/Screen-Shot-2014-02-27-at-14.41.13-388x310.png 388w, uploads/2014/02/Screen-Shot-2014-02-27-at-14.41.13-400x319.png 400w&#34; sizes=&#34;(max-width: 1442px) 100vw, 1442px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Outro detalhe importante é que ele mostra quantos milisegundos a mais o Atom demorará para iniciar com aquele módulo habilitado. Nunca mais você vai deixar seu editor pesado sem saber o motivo.&lt;/p&gt;

&lt;p&gt;Como não podia faltar, ele já vem com um search para encontrar novos packages. Basta procurar, clicar em Install e pronto. No Sublime, você precisa instalar o Package Control.&lt;/p&gt;

&lt;h3 id=&#34;timecop&#34;&gt;Timecop&lt;/h3&gt;

&lt;p&gt;A ideia do Atom é que você domine totalmente o editor. Para isso, é legal saber o que exatamente está rodando nele. O Atom ajuda você a manter o controle com uma feature chamada Timecop.&lt;/p&gt;

&lt;p&gt;O Timecop mostra quanto de tempo cada package demora para carregar. Isso permite descartar aqueles packages que não usamos tanto, mas que estão fazendo nosso editor ficar uma carroça.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/Screen-Shot-2014-02-27-at-17.27.38.png&#34; alt=&#34;Screen Shot 2014-02-27 at 17.27.38&#34; class=&#34;alignnone size-full wp-image-41288&#34; srcset=&#34;uploads/2014/02/Screen-Shot-2014-02-27-at-17.27.38.png 1138w, uploads/2014/02/Screen-Shot-2014-02-27-at-17.27.38-215x168.png 215w, uploads/2014/02/Screen-Shot-2014-02-27-at-17.27.38-397x310.png 397w, uploads/2014/02/Screen-Shot-2014-02-27-at-17.27.38-400x312.png 400w&#34; sizes=&#34;(max-width: 1138px) 100vw, 1138px&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;comandos-básicos-e-atalhos&#34;&gt;Comandos básicos e atalhos&lt;/h3&gt;

&lt;p&gt;Aqui não tem nenhum segredo porque é tudo muito parecido com o Sublime Text: aperte &lt;strong&gt;cmd+shift+p&lt;/strong&gt; e procure o comando desejado. Dá para encontrar ali seus shortcuts/keybindings customizados também.&lt;/p&gt;

&lt;p&gt;Com o atalho &lt;strong&gt;cmd+t&lt;/strong&gt; você consegue procurar um determinado arquivo no seu projeto. Igual ao Sublime, nem precisa decorar.&lt;/p&gt;

&lt;h3 id=&#34;adicionando-movendo-e-deletando-arquivos&#34;&gt;Adicionando, movendo e deletando arquivos&lt;/h3&gt;

&lt;p&gt;Para manipular os arquivos direto pela tree view, basta selecionar o arquivo e apertar a tecla &lt;strong&gt;a&lt;/strong&gt; para adicionar um novo arquivo, &lt;strong&gt;m&lt;/strong&gt; para mover e &lt;strong&gt;delete&lt;/strong&gt; para deletar o arquivo/pasta.&lt;/p&gt;

&lt;h2 id=&#34;review-em-vídeo&#34;&gt;Review em vídeo&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&#34;http://zenorocha.com/&#34;&gt;Zeno&lt;/a&gt; fez um vídeo, está em inglês, sobre o Atom. Dá uma olhada aí:&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Eu já sai do Sublime e fui pro Atom. Ainda vou continuar acompanhando o Brackets. Existem coisas nele que prometem nos ajudar demais, como essa feature matadora do vídeo abaixo:&lt;/p&gt;

&lt;p&gt;Você pode tratar o Atom como um Sublime melhorado&amp;#8230; você não estaria errado. Mas acho que o futuro dele promete e talvez o Sublime não será mais onipresente como hoje.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando páginas web para seus repositórios com o GitHub Pages</title>
      <link>http://tableless.com.br/criando-paginas-web-para-seus-repositorios-com-o-github-pages/</link>
      <pubDate>Mon, 29 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-paginas-web-para-seus-repositorios-com-o-github-pages/</guid>
      <description>

&lt;p&gt;O github é um dos principais meios de compartilhamento de projetos disponíveis na internet, lá, encontram-se desde projetos simples até projetos extremamente complexos, como o kernel do linux (&lt;a href=&#34;https://github.com/torvalds/linux&#34;&gt;https://github.com/torvalds/linux&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Visando expandir a forma de divulgação de projetos, o github possui um serviço chamado ‘github pages’, que serve principalmente para prover páginas na internet sobre os repositórios. Essas páginas podem servir para divulgar exemplos, demos, documentações e qualquer outro tipo de informação sobre o seu projeto. E o melhor, esse serviço é de graça, basta ter uma conta no github! 😀&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/07/its-free.png&#34;&gt;&lt;img class=&#34;size-full wp-image-38035 aligncenter&#34; alt=&#34;its-free&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/its-free.png&#34; width=&#34;520&#34; height=&#34;300&#34; srcset=&#34;uploads/2013/07/its-free.png 520w, uploads/2013/07/its-free-291x168.png 291w&#34; sizes=&#34;(max-width: 520px) 100vw, 520px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conhecimentos-iniciais&#34;&gt;Conhecimentos iniciais&lt;/h2&gt;

&lt;p&gt;Para conseguirmos criar páginas com o github não é necessário que se tenha um conhecimento avançado sobre a ferramenta, visto que veremos que ela disponibiliza um gerador automático de páginas que gera o conteúdo a partir de uma sintaxe bem simples (github flavored markdown). Porém, se você quiser fazer algumas coisas um pouco mais elaboradas com as suas páginas, é necessário conhecer alguns dos principais conceitos envolvidos com o github, como push, commit, fetch e pull.&lt;/p&gt;

&lt;p&gt;Portanto, se quiser descobrir um pouco mais sobre o github, recomendo que seja feita a leitura dos seguintes artigos disponíveis aqui no tableless:&lt;/p&gt;

&lt;p&gt;Iniciando no GIT &amp;#8211; Parte 1: &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;http://tableless.com.br/iniciando-no-git-parte-1/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Iniciando no GIT &amp;#8211; Parte 2: &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-2/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-2/&#34;&gt;http://tableless.com.br/iniciando-no-git-parte-2/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;criando-páginas-automaticamente&#34;&gt;Criando páginas automaticamente&lt;/h2&gt;

&lt;p&gt;Uma das opções que o github nos dá é a criação automática de páginas. Com ela, podemos criar rapidamente uma página com conteúdo e inclusive escolher um dos templates disponibilizados pelo github para estilizarmos nossa página.&lt;/p&gt;

&lt;p&gt;Para criar uma página utilizando o github pages clique na opção ‘settings’ do seu repositório:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/07/github-settings-option.png&#34;&gt;&lt;img class=&#34;size-full wp-image-38034 aligncenter&#34; alt=&#34;github-settings-option&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/github-settings-option.png&#34; width=&#34;113&#34; height=&#34;44&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O github irá abrir as opções de configurações do repositório, lá, poderá ser encontrado um botão chamado ‘Automatic page generator’, dentro da seção &amp;#8216;GitHub Pages&amp;#8217;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/07/github-pages-box.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-38031 aligncenter&#34; alt=&#34;github-pages-box&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/github-pages-box-588x148.png&#34; width=&#34;588&#34; height=&#34;148&#34; srcset=&#34;uploads/2013/07/github-pages-box-588x148.png 588w, uploads/2013/07/github-pages-box-329x83.png 329w, uploads/2013/07/github-pages-box-660x166.png 660w, uploads/2013/07/github-pages-box.png 681w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao clicar nesse botão, você será redirecionado para um formulário contendo alguns campos e um editor de conteúdo, lá, você deverá informar o nome do projeto (que servirá como título na página criada), um subtítulo e o conteúdo que queremos que seja apresentado (em formato de markdown específico do github, referência disponível em &lt;a href=&#34;http://github.github.com/github-flavored-markdown/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://github.github.com/github-flavored-markdown/&#34;&gt;http://github.github.com/github-flavored-markdown/&lt;/a&gt;&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/07/github-pages-form.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-38032 aligncenter&#34; alt=&#34;github-pages-form&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/github-pages-form-588x305.png&#34; width=&#34;588&#34; height=&#34;305&#34; srcset=&#34;uploads/2013/07/github-pages-form-588x305.png 588w, uploads/2013/07/github-pages-form-322x168.png 322w, uploads/2013/07/github-pages-form-596x310.png 596w, uploads/2013/07/github-pages-form.png 944w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após informar esses dados, poderemos escolher o layout que queremos. Assim, ao clicarmos no botão ‘Continue to Layouts’ somos redirecionados para um local onde são exibidos alguns templates pré-prontos que github nos disponibiliza. Basta clicar em algum deles para termos uma live-preview de como a nossa página irá ficar:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/07/github-pages-template.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-38033 aligncenter&#34; alt=&#34;github-pages-template&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/github-pages-template-474x310.png&#34; width=&#34;474&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/07/github-pages-template-474x310.png 474w, uploads/2013/07/github-pages-template-256x168.png 256w, uploads/2013/07/github-pages-template.png 930w&#34; sizes=&#34;(max-width: 474px) 100vw, 474px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se você quiser editar o que escreveu, basta clicar no botão ‘edit’, senão, se estiver satisfeito com o resultado, basta clicar no botão ‘publish’.&lt;/p&gt;

&lt;p&gt;Pronto! Já possuímos uma página no github para o nosso repositório.&lt;/p&gt;

&lt;h2 id=&#34;e-como-faço-para-acessar-essa-página&#34;&gt;E como faço para acessar essa página?&lt;/h2&gt;

&lt;p&gt;As páginas criadas pelo github possuem o seguinte formato de endereço:&lt;/p&gt;

&lt;p&gt;http://&lt;span style=&#34;color: #ff0000&#34;&gt;nomedousuario&lt;/span&gt;.github.io/&lt;span style=&#34;color: #ff0000&#34;&gt;nomedorepositorio&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;No meu caso, o endereço ficou disponível da seguinte maneira:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wmartins.github.io/criando-paginas-github-pages/&#34;&gt;http://wmartins.github.io/criando-paginas-github-pages/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Portanto, basta substituir os valores em vermelho para acessar a sua página!&lt;/p&gt;

&lt;h2 id=&#34;erro-404&#34;&gt;Erro 404!?&lt;/h2&gt;

&lt;p&gt;O github demora um pouco (cerca de uns 10 minutos) para criar a sua página e disponibilizá-la, portanto, se você tentar acessá-la e estiver dando um erro 404, não se assuste, em breve ela estará disponível!&lt;/p&gt;

&lt;p&gt;Se você já esperou algum tempo e o erro 404 persiste, verifique se digitou corretamente o endereço e tente novamente.&lt;/p&gt;

&lt;h2 id=&#34;branch-gh-pages&#34;&gt;Branch ‘gh-pages’&lt;/h2&gt;

&lt;p&gt;Mas, qual é a mágica envolvida nisso? Como o github sabe onde está essa minha página recém criada? E se eu quiser adicionar coisas mais complexas, como por exemplo um demo do que estou desenvolvendo?&lt;/p&gt;

&lt;p&gt;A resposta dessa pergunta pode ser respondida ao observarmos os branches do nosso projeto. Ao olharmos a listagem de branches, conseguimos ver que um branch chamado ‘gh-pages’ foi criado automaticamente.&lt;/p&gt;

&lt;p&gt;O gh-pages é o responsável por conter os arquivos que darão vida à nossa página, assim, se o explorarmos, poderemos ver que existem arquivos como ‘index.html’, arquivos ‘.css’ entre outros. Enfim, é um branch que representa toda a página gerada.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/07/github-gh-pages-branch.png&#34;&gt;&lt;img class=&#34;size-full wp-image-38030 aligncenter&#34; alt=&#34;github-gh-pages-branch&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/07/github-gh-pages-branch.png&#34; width=&#34;512&#34; height=&#34;232&#34; srcset=&#34;uploads/2013/07/github-gh-pages-branch.png 512w, uploads/2013/07/github-gh-pages-branch-329x149.png 329w&#34; sizes=&#34;(max-width: 512px) 100vw, 512px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mas-e-agora-como-edito-a-minha-página&#34;&gt;Mas, e agora? Como edito a minha página?&lt;/h2&gt;

&lt;p&gt;Como essa página é gerada a partir de um branch (o branch gh-pages), é só editarmos os códigos desse branch que automaticamente editamos a página. Para isso, podemos realizar o seguinte procedimento:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Baixamos o branch ‘gh-pages’ no nosso repositório local.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fazemos as modificações necessárias.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fazemos o commit dos arquivos modificados.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Realizamos um push para o branch ‘gh-pages’.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pronto!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;e-como-eu-baixo-o-branch-gh-pages&#34;&gt;E como eu baixo o branch gh-pages?&lt;/h2&gt;

&lt;p&gt;Para baixar o branch gh-pages devemos realizar um fetch desse branch através do comando:&lt;/p&gt;

&lt;pre class=&#34;lang-git&#34;&gt;git fetch origin gh-pages&lt;/pre&gt;

&lt;p&gt;Após baixar esse branch, simplesmente trocamos o branch em que estamos para o branch gh-pages através do comando:&lt;/p&gt;

&lt;pre class=&#34;lang-git&#34;&gt;git checkout gh-pages&lt;/pre&gt;

&lt;p&gt;Agora é só editar o que desejarmos e realizarmos os pushs e commits para que a a nossa página seja atualizada.&lt;/p&gt;

&lt;h2 id=&#34;já-tenho-um-layout-pronto-que-fiz-manualmente-como-posso-usá-lo-para-gerar-uma-página-no-github&#34;&gt;Já tenho um layout pronto que fiz manualmente, como posso usá-lo para gerar uma página no github?&lt;/h2&gt;

&lt;p&gt;Bom, isso é simples, o github mostra as páginas lendo os arquivos do branch gh-pages, dessa forma, basta ter esse branch criado com um arquivo ‘index.html’ dentro que o github irá exibir a página corretamente.&lt;/p&gt;

&lt;h2 id=&#34;cuidado&#34;&gt;Cuidado:&lt;/h2&gt;

&lt;p&gt;Um único ponto importante para quem quer criar uma página no github manualmente é tomar o cuidado de fazer com que o branch gh-pages seja um branch órfão, ou seja, não tenha nenhum branch ‘pai’ associado. Visto que se este possuir algum branch pai, pode ser que em alguma alteração em algum dos dois cause uma boa dor de cabeça ou no branch pai ou no branch gh-pages após a realização de commits e pushs.&lt;/p&gt;

&lt;h2 id=&#34;como-assim-branch-órfão-como-faço-para-criar-um&#34;&gt;Como assim branch órfão? Como faço para criar um?&lt;/h2&gt;

&lt;p&gt;Criar um branch órfão é um processo bem simples, usualmente, para criarmos um branch usamos o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-git&#34;&gt;git checkout -b new-branch&lt;/pre&gt;

&lt;p&gt;Porém, esse comando irá estabelecer uma relação entre o branch que estávamos com o branch recém criado, e isso é um problema quando estamos trabalhando no branch para geração de páginas, visto que não queremos associar o código do projeto com o código da página. Dessa forma, podemos usar a opção &amp;#8216;orphan&amp;#8217; para criar um branch desasociado de qualquer pai, nesse caso, já faremos a criação do branch gh-pages:&lt;/p&gt;

&lt;pre class=&#34;lang-git&#34;&gt;git checkout --orphan gh-pages&lt;/pre&gt;

&lt;p&gt;Após criarmos o branch gh-pages, basta adicionar os arquivos (lembre-se de adicionar um arquivo chamado index.html) e realizar o commit e o push dos mesmos.&lt;/p&gt;

&lt;h2 id=&#34;considerações-finais&#34;&gt;Considerações finais&lt;/h2&gt;

&lt;p&gt;Não sei se acontece o mesmo com vocês, mas quando eu vejo um repositório no github, a primeira coisa que eu procuro ver é se o mesmo possui algum demo ou então algum exemplo interessante de utilização.&lt;/p&gt;

&lt;p&gt;No final das contas, por mais que o código seja muito bem elaborado e etc, a melhor forma de atrair as pessoas para o seu repositório é disponibilizando uma página para o mesmo.&lt;/p&gt;

&lt;p&gt;Portanto, minha recomendação é que se você possui um projeto hospedado no github, tente criar uma página para ele. Quem sabe você não acaba atraíndo mais desenvolvedores para ajudar e torne o seu projeto mais legal ainda?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contribuindo em projetos open source com o github</title>
      <link>http://tableless.com.br/contribuindo-em-projetos-open-source-com-o-github/</link>
      <pubDate>Fri, 21 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/contribuindo-em-projetos-open-source-com-o-github/</guid>
      <description>

&lt;p&gt;Projetos open source são o que há de mais legal no mundo do desenvolvimento quando se quer aprender novas tecnologias e envolver-se em projetos, seja codificando, documentando, testando ou realizando qualquer tipo de atividade que envolve um projeto.&lt;/p&gt;

&lt;p&gt;Uma das principais ferramentas para o envolvimento em projetos open source é o &lt;a href=&#34;http://www.github.com&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;. Este artigo explica como utilizar essa ferramenta para envolver-se em projetos, visando realizar contribuições em projetos.&lt;/p&gt;

&lt;h2 id=&#34;primeiros-passos&#34;&gt;Primeiros passos&lt;/h2&gt;

&lt;p&gt;Antes de tudo é necessário conhecer minimamente a ferramenta e o seu fluxo de trabalho, portanto, é recomendada a leitura de dois artigos:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;http://tableless.com.br/iniciando-no-git-parte-1/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-2/&#34;&gt;http://tableless.com.br/iniciando-no-git-parte-2/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;let-8217-s-go&#34;&gt;Let&amp;#8217;s go&lt;/h2&gt;

&lt;p&gt;O primeiro passo é a criação de uma conta no site do github, assim, basta entrar em &lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt; e preencher o formulário de cadastro.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/formulário-de-registro-github.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-37719 aligncenter&#34; alt=&#34;Formulário de cadastro - github&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/formulário-de-registro-github-552x310.png&#34; width=&#34;552&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/formulário-de-registro-github-552x310.png 552w, uploads/2013/06/formulário-de-registro-github-299x168.png 299w, uploads/2013/06/formulário-de-registro-github.png 677w&#34; sizes=&#34;(max-width: 552px) 100vw, 552px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O segundo passo consiste em baixar a aplicação ‘git’, esta será a responsável por toda a manipulação que realizaremos nos repositórios aos quais desejamos contribuir. Recomendo que seja lido primeiramente o artigo elaborado pelo Diego Eis, na seção ‘Instalando o git’, disponível em &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;http://tableless.com.br/iniciando-no-git-parte-1/&lt;/a&gt;, ou então, se preferir, o próprio pessoal do github disponibiliza uma série de instruções para instalar e configurar o git, estas estão disponíveis em &lt;a href=&#34;https://help.github.com/articles/set-up-git&#34;&gt;https://help.github.com/articles/set-up-git&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conceitos-básicos&#34;&gt;Conceitos básicos&lt;/h1&gt;

&lt;p&gt;Para começar a trabalhar com o git de forma colaborativa é necessário conhecer dois conceitos básicos relacionados ao uso da ferramenta. Esses conceitos são o conceito de fork e de pull request.&lt;/p&gt;

&lt;h2 id=&#34;fork&#34;&gt;Fork&lt;/h2&gt;

&lt;p&gt;O fork consiste em realizar a cópia de um repositório de alguém, adicionando esse repositório aos nossos repositórios. Em linhas gerais, nos tornamos os ‘donos’ do repositório o qual estamos realizando o fork (mas o original se mantém intacto).&lt;/p&gt;

&lt;p&gt;O fork é o primeiro passo para colaborar em um projeto. Por exemplo, percebemos que existe um problema em um arquivo nos exemplos para iniciantes disponíveis no tableless (&lt;a href=&#34;http://tableless.com.br/para-iniciantes/&#34;&gt;http://tableless.com.br/para-iniciantes/&lt;/a&gt;) e queremos realizar a correção. Como o projeto está no github, podemos colaborar! Para isso, navegamos até o repositório (&lt;a href=&#34;https://github.com/tableless/iniciantes&#34;&gt;https://github.com/tableless/iniciantes&lt;/a&gt;) e clicamos na opção fork, localizada no canto direito da página.&lt;/p&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/opções-do-repositório-github.png&#34;&gt;&lt;img class=&#34;size-full wp-image-37722 aligncenter&#34; alt=&#34;Opções disponíveis no repositório&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/opções-do-repositório-github.png&#34; width=&#34;413&#34; height=&#34;56&#34; srcset=&#34;uploads/2013/06/opções-do-repositório-github.png 413w, uploads/2013/06/opções-do-repositório-github-329x44.png 329w&#34; sizes=&#34;(max-width: 413px) 100vw, 413px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Ao clicar em fork, o repositório em questão é copiado para a nossa base de repositórios e então viramos donos do repositório o qual copiamos, ficando este inclusive disponível na listagem dos nossos repositórios. Notem o símbolo &amp;#8216;Y&amp;#8217; indicando que o repositório foi criado a partir de um fork.&lt;/p&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/lista-de-repositórios-atualizada.png&#34;&gt;&lt;img class=&#34;size-full wp-image-37720 aligncenter&#34; alt=&#34;Lista de repositórios atualizada&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/lista-de-repositórios-atualizada.png&#34; width=&#34;251&#34; height=&#34;32&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Agora podemos trabalhar no repositório criado normalmente, executar commits e pushs sem problemas, como se fosse um repositório novo que criamos do zero. Quando terminarmos de realizar as modificações e tivermos realizado os commits e push’s necessários podemos solicitar que o dono do repositório integre o que fizemos com o repositório original através de um pull request (explicado a seguir).&lt;/p&gt;

&lt;h2 id=&#34;pull-request&#34;&gt;Pull request&lt;/h2&gt;

&lt;p&gt;O pull request consiste em uma solicitação de integração das nossas modificações com o repositório que realizamos um fork.&lt;/p&gt;

&lt;p&gt;Para realizar um pull request devemos ir até o repositório gerado pela operação de fork (na nossa base de repositórios). Lá, encontraremos um botão chamado ‘pull request’:&lt;/p&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/opções-pull-request.png&#34;&gt;&lt;img class=&#34;size-full wp-image-37721 aligncenter&#34; alt=&#34;Opção de pull request&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/opções-pull-request.png&#34; width=&#34;497&#34; height=&#34;55&#34; srcset=&#34;uploads/2013/06/opções-pull-request.png 497w, uploads/2013/06/opções-pull-request-329x36.png 329w&#34; sizes=&#34;(max-width: 497px) 100vw, 497px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Clicando em pull request, podemos escolher a origem e o destino do nosso pull request:&lt;/p&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/realizando-pull-request.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-37723 aligncenter&#34; alt=&#34;Origem e destino do pull request&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/realizando-pull-request-588x52.png&#34; width=&#34;588&#34; height=&#34;52&#34; srcset=&#34;uploads/2013/06/realizando-pull-request-588x52.png 588w, uploads/2013/06/realizando-pull-request-329x29.png 329w, uploads/2013/06/realizando-pull-request-660x59.png 660w, uploads/2013/06/realizando-pull-request.png 913w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Também podemos escrever um título e comentários sobre o nosso pull request:&lt;/p&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/comentários-e-descrição-pull-request.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-37718 aligncenter&#34; alt=&#34;Comentários e descrição do pull request&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/comentários-e-descrição-pull-request-520x310.png&#34; width=&#34;520&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/comentários-e-descrição-pull-request-520x310.png 520w, uploads/2013/06/comentários-e-descrição-pull-request-282x168.png 282w, uploads/2013/06/comentários-e-descrição-pull-request.png 685w&#34; sizes=&#34;(max-width: 520px) 100vw, 520px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Clicando em ‘Send pull request’, enviamos as nossas modificações para que as mesmas sejam validadas pela comunidade. Isso permite que seja feita uma avaliação sobre o que foi feito. Dessa forma, o dono do repositório poderá integrar as mudanças realizadas ao código do projeto.&lt;/p&gt;

&lt;h1 id=&#34;e-agora-como-posso-contribuir&#34;&gt;E agora, como posso contribuir?&lt;/h1&gt;

&lt;p&gt;Uma vez feitas as configurações necessárias e conhecendo os conceitos de fork e pull request, basta realizarmos as seguintes ações para contribuirmos para um projeto:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Realiza-se um fork do projeto para o qual se quer contribuir.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clona-se o repositório criado através do fork para o nosso ambiente de trabalho (como explicado em &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;http://tableless.com.br/iniciando-no-git-parte-1/&lt;/a&gt; na seção ‘Clonando um projeto’).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Realizam-se as modificações /correções / novas implementações desejadas.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Realiza-se o commit de nossas modificações.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Faz-se o push para o nosso repositório (que criamos através de um fork no passo 1).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Nesse exato momento, nosso repositório criado no passo 1 estará a frente do repositório original (o qual fizemos um fork). Agora já estamos aptos a submeter nossas modificações usando o recurso de pull request.&lt;/p&gt;

&lt;p&gt;Assim, basta irmos até o nosso repositório (que criamos fazendo um fork no passo 1) e clicarmos em ‘pull request’. Seleciona-se então o repositório e o branch de destino e o repositório e o branch de origem. Nesse momento, podemos escrever um título para o nosso pull request e também adicionar comentários sobre o que estamos fazendo. Finalizado o preenchimento dos campos, basta clicar em ‘send pull request’.&lt;/p&gt;

&lt;p&gt;A partir de agora, é necessário esperar para ver se a comunidade e os donos do repositório aprovam a mudança realizada. Se a mesma for aprovada, o dono do repositório pode realizar um merge do que fizemos com o projeto em questão, unificando assim o código.&lt;/p&gt;

&lt;h1 id=&#34;vamos-por-a-mão-na-massa&#34;&gt;Vamos por a mão na massa? 🙂&lt;/h1&gt;

&lt;p&gt;A melhor forma de aprender é praticar, dessa forma, criei um repositório chamado ‘learning-to-contribute’, o qual tem a intenção de receber os pull requests de quem quiser aprender a contribuir para projetos open-source antes de tentar fazer isso com projetos ‘reais’.&lt;/p&gt;

&lt;p&gt;Para tal, é só entrar no link &lt;a href=&#34;https://github.com/wmartins/learning-to-contribute&#34;&gt;https://github.com/wmartins/learning-to-contribute&lt;/a&gt; e clicar em fork, a partir daí é só seguir os passos explicados nesse artigo e enviar um pull request para mim.&lt;/p&gt;

&lt;p&gt;Sempre que possível vou aceitar os requests realizados para vocês verem o que foi explicado em ação!&lt;/p&gt;

&lt;p&gt;Mandem seus requests!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git com Interface Gráfica</title>
      <link>http://tableless.com.br/git-com-interface-grafica/</link>
      <pubDate>Mon, 26 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/git-com-interface-grafica/</guid>
      <description>&lt;p&gt;Você deve não gostar de usar Git no terminal do windows, mac ou linux. As vezes você faz muitas alterações e é chato você parar a todo momento para commitar alterações separadas. Prejudica o fluxo do seu trabalho e você acabada perdendo o foco. Por isso as vezes é interessante você usar uma interface mais humana para facilitar as coisas. No site do Git tem &lt;a href=&#34;http://git-scm.com/downloads/guis&#34;&gt;indicações interessantes&lt;/a&gt; para você poder baixar e utilizar o Git de um jeito mais confortável.&lt;/p&gt;

&lt;p&gt;O Git já instala um GUI básico chamado &lt;a href=&#34;http://gitk.sourceforge.net&#34;&gt;Gitk&lt;/a&gt;, que é uma versão generalizada. Basta digitar &lt;strong&gt;gitk&lt;/strong&gt; no diretório controlado pelo git para que ele seja aberto. É muito simples, mas para visualizações rápidas ou quando você não estiver no seu computador ele é bem bacana.&lt;/p&gt;

&lt;p&gt;A minha sugestão é a aplicação do GitHub. Ele tem versões para &lt;a href=&#34;http://mac.github.com&#34;&gt;Mac&lt;/a&gt; e &lt;a href=&#34;http://windows.github.com&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/promo-screenshot.png&#34; alt=&#34;&#34; title=&#34;promo-screenshot&#34; width=&#34;515&#34; height=&#34;243&#34; class=&#34;alignnone size-full wp-image-7313&#34; srcset=&#34;uploads/2012/11/promo-screenshot.png 515w, uploads/2012/11/promo-screenshot-300x141.png 300w&#34; sizes=&#34;(max-width: 515px) 100vw, 515px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Com ele você consegue ver, criar e excluir os branchs, clonar repositórios, escolher quais arquivos serão enviados em um determinado commit, visualizar o histórico de commits, visualizar as alterações dos arquivos etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/Screen-Shot-2012-11-19-at-2.22.35-PM1.png&#34; alt=&#34;&#34; title=&#34;Screen Shot 2012-11-19 at 2.22.35 PM&#34; width=&#34;808&#34; height=&#34;888&#34; class=&#34;alignnone size-full wp-image-7337&#34; srcset=&#34;uploads/2012/11/Screen-Shot-2012-11-19-at-2.22.35-PM1.png 808w, uploads/2012/11/Screen-Shot-2012-11-19-at-2.22.35-PM1-272x300.png 272w&#34; sizes=&#34;(max-width: 808px) 100vw, 808px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/11/Screen-Shot-2012-11-19-at-2.23.16-PM.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/Screen-Shot-2012-11-19-at-2.23.16-PM-1024x857.png&#34; alt=&#34;&#34; title=&#34;Screen Shot 2012-11-19 at 2.23.16 PM&#34; width=&#34;640&#34; height=&#34;535&#34; class=&#34;alignnone size-large wp-image-7319&#34; srcset=&#34;uploads/2012/11/Screen-Shot-2012-11-19-at-2.23.16-PM-1024x857.png 1024w, uploads/2012/11/Screen-Shot-2012-11-19-at-2.23.16-PM-300x251.png 300w, uploads/2012/11/Screen-Shot-2012-11-19-at-2.23.16-PM.png 1060w&#34; sizes=&#34;(max-width: 640px) 100vw, 640px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se você não gostar da aplicação do GitHub, eu usava uma bem útil e ágil chamada &lt;a href=&#34;http://gitx.frim.nl&#34;&gt;GitX&lt;/a&gt;. Não tem versão windows, só Mac.&lt;/p&gt;

&lt;p&gt;Para windows, mac e linux há o &lt;a href=&#34;http://www.syntevo.com/smartgit/index.html&#34;&gt;SmartGit&lt;/a&gt; e o &lt;a href=&#34;http://git-cola.github.com/&#34;&gt;Git-Cola&lt;/a&gt;. As duas interfaces não são lá essas coisas, mas quebram o galho. Há também para windows o &lt;a href=&#34;http://code.google.com/p/gitextensions/&#34;&gt;GitExtensions&lt;/a&gt;. Todos tem as ações básicas do Git e podem facilitar o processo de commits.&lt;/p&gt;

&lt;p&gt;A aplicação mais bem acabada mesmo é a do GitHub, mesmo assim há algumas limitações, tipo: eu não consigo visualizar tags no histórico de commits. Mesmo assim quando preciso usar tags eu corro pro terminal. Nada tão ruim assim. 😉&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>