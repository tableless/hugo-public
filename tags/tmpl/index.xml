<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tmpl on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/tmpl/index.xml</link>
    <description>Recent content in Tmpl on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/tmpl/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Templates e jQuery – parte 2</title>
      <link>https://tableless.github.io/hugo-public/templates-jquery-parte2/</link>
      <pubDate>Mon, 13 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/templates-jquery-parte2/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/templates-e-jquery-parte-1&#34;&gt;Na primeira parte&lt;/a&gt; deste artigo você conferiu uma introdução ao novo plugin .tmpl() que possibilita a utilização de templates para retornos e saídas de suas aplicações jQuery. O plugin certamente é um avanço considerável na organização de código &amp;#8211; é o JavaScript ficando cada vez mais profissional e robusto, abandonando a fama de ser uma simples linguagem de script, sem padrões.&lt;/p&gt;

&lt;p&gt;A forma mais básica de utilização do plugin .tmpl() é declarar seu template em uma variável e chamá-lo da seguinte forma:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;var noticias = [&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;titulo : &amp;#8216;Notícia 1&amp;#8242;,&lt;/p&gt;

&lt;p&gt;data_publicacao : &amp;#8217;28/10/2010 20h31&amp;#8217;,&lt;/p&gt;

&lt;p&gt;chamada : &amp;#8216;Chamada da notícia 1&amp;#8217;,&lt;/p&gt;

&lt;p&gt;link : &amp;#8216;/noticia-1/&amp;#8217;,&lt;/p&gt;

&lt;p&gt;},&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;titulo : &amp;#8216;Notícia 2&amp;#8242;,&lt;/p&gt;

&lt;p&gt;data_publicacao : &amp;#8217;28/10/2010 20h32&amp;#8217;,&lt;/p&gt;

&lt;p&gt;chamada : &amp;#8216;Chamada da notícia 2&amp;#8217;,&lt;/p&gt;

&lt;p&gt;link : &amp;#8216;/noticia-2/&amp;#8217;,&lt;/p&gt;

&lt;p&gt;},&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;titulo : &amp;#8216;Notícia 3&amp;#8242;,&lt;/p&gt;

&lt;p&gt;data_publicacao : &amp;#8217;28/10/2010 20h33&amp;#8217;,&lt;/p&gt;

&lt;p&gt;chamada : &amp;#8216;Chamada da notícia 3&amp;#8217;,&lt;/p&gt;

&lt;p&gt;link : &amp;#8216;/noticia-3/&amp;#8217;,&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;];&lt;/p&gt;

&lt;p&gt;var tpl_noticia = &amp;#8216;&lt;li&gt;&lt;h3&gt;${titulo}&lt;/h3&gt;&lt;span class=&amp;#8221;data&amp;#8221;&gt;${data_publicacao}&lt;/span&gt;&lt;span&gt;${chamada}&lt;/span&gt;&lt;span&gt;&lt;a href=&amp;#8221;${link}&amp;#8221;&gt;Veja mais&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&amp;#8217;;&lt;/p&gt;

&lt;p&gt;$.tmpl( tpl_noticia, noticias ).appendTo( &amp;#8216;ul#noticias&amp;#8217; );&lt;/p&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;Um problema do exemplo acima é que o template acaba ficando confuso dentro de uma variável. Uma outra forma de declarar um modelo seria utilizando a própria tag script, mas com um tipo diferente (text/x-jquery-tmpl):&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;xml&amp;#8221;]&lt;/p&gt;

&lt;script id=&amp;#8221;tpl-noticia&amp;#8221; type=&amp;#8221;text/x-jquery-tmpl&amp;#8221;&gt;
      
&lt;li&gt;
      
&lt;h3&gt;${titulo}&lt;/h3&gt;
      
&lt;span class=&amp;#8221;data&amp;#8221;&gt;${data}&lt;/span&gt;
      
&lt;p class=&amp;#8221;chamada&amp;#8221;&gt;${chamada}&lt;/p&gt;
      
&lt;a href=&amp;#8221;${link}&amp;#8221;&gt;Leia mais&lt;/a&gt;
     
&lt;/li&gt;
  
&lt;/script&gt;
  

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;Dessa forma é possível indentar o template HTML obtendo uma melhor organização/visualização do código.&lt;/p&gt;

&lt;h2 id=&#34;caching&#34;&gt;Caching&lt;/h2&gt;

&lt;p&gt;Antes de um template ser retornado através do método .tmpl(), ele é tranformado em uma função e depois executado. Uma forma de evitar esta execução toda vez que for retornado o plugin é utilizar o método .template() para criar uma versão em cache, otimizando a performance do script.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;// renderizando como plugin diretamente no objeto jQuery&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;#tpl-noticia&amp;#8217;).template(&amp;#8216;tplNoticia&amp;#8217;);&lt;/p&gt;

&lt;p&gt;// associando diretamente a uma variável&lt;/p&gt;

&lt;p&gt;var tplNoticia = $(&amp;#8216;#tpl-noticia&amp;#8217;).template();&lt;/p&gt;

&lt;p&gt;// renderizando passando html/texto como parâmetro&lt;/p&gt;

&lt;p&gt;$.template(&amp;#8216;tplNoticia&amp;#8217;, &amp;#8216;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;${titulo}
&amp;#8216;);
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;No exemplo acima, a variável &lt;strong&gt;tplNoticia&lt;/strong&gt; armazena a função responsável por nosso template. O método .template() é chamado de duas formas distintas: a primeira cria a função do template baseada no script com o id tpl-noticia. A segunda chamada funciona da mesma forma, só que dessa vez passamos o conteúdo do template diretamente como parâmetro. &lt;a href=&#34;http://tableless.com.br/anatomia-de-um-plugin-jquery&#34;&gt;Lembram do artigo sobre plugins?&lt;/a&gt; Então, uma é um método público e a outra um utilitário jQuery.&lt;/p&gt;

&lt;h2 id=&#34;wrap-e-tmpl&#34;&gt;{{wrap}} e {{tmpl}}&lt;/h2&gt;

&lt;p&gt;As tags especiais {{wrap}} e {{tmpl}} possuem objetivos bem parecidos. A primeira permite a iteração e inclusão de trechos HTML dentro de um objeto de template. Já a tag {{tmpl}} utiliza, ao invés de trechos HTML, um outro objeto template.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;xml&amp;#8221;]&lt;/p&gt;

&lt;script id=&amp;#8221;tplNoticia&amp;#8221; type=&amp;#8221;text/x-jquery-tmpl&amp;#8221;&gt;
      
{{wrap &amp;#8220;#tableNoticia&amp;#8221;}}
          
&lt;h2&gt;Notícia 1&lt;/h2&gt;
          
&lt;p&gt;&lt;a href=&amp;#8221;noticia-1&amp;#8243;&gt;Chamada da notícia 1&lt;/a&gt;&lt;/p&gt;
          
&lt;h2&gt;Notícia 2&lt;/h2&gt;
          
&lt;p&gt;&lt;a href=&amp;#8221;noticia-2&amp;#8243;&gt;Chamada da notícia 2&lt;/p&gt;
      
{{/wrap}}
  
&lt;/script&gt;

&lt;script id=&amp;#8221;tableNoticia&amp;#8221; type=&amp;#8221;text/x-jquery-tmpl&amp;#8221;&gt;
      
&lt;table&gt;
        
&lt;tbody&gt;
          
&lt;tr&gt;
              
{{each $item.html(&amp;#8220;h2&amp;#8221;, true)}}
                  
&lt;td&gt;
                      
${$value}
                  
&lt;/td&gt;
              
{{/each}}
          
&lt;/tr&gt;
          
&lt;tr&gt;
              
{{each $item.html(&amp;#8220;p&amp;#8221;)}}
                  
&lt;td&gt;
                      
{{html $value}}
                  
&lt;/td&gt;
              
{{/each}}
          
&lt;/tr&gt;
        
&lt;/tbody&gt;
      
&lt;/table&gt;
  
&lt;/script&gt;

&lt;div id=&amp;#8221;noticias&amp;#8221;&gt;&lt;/div&gt;

&lt;script&gt;
  
$(function(){
    
$(&amp;#8220;#tplNoticia&amp;#8221;).tmpl().appendTo(&amp;#8220;#noticias&amp;#8221;);
  
});
  
&lt;/script&gt;
  

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;p&gt;No código acima utilizamos a tag {{wrap}} para popular dados em uma tabela. A primeira linha (&lt;tr&gt;) da tabela recebe os títulos do nosso template de notícias &amp;#8211; tudo o que estiver entre a tag &lt;h2&gt;. A iteração é feita através da tag {{each}}, explicada no &lt;a href=&#34;http://tableless.com.br/templates-e-jquery-parte-1&#34;&gt;artigo anterior&lt;/a&gt;. O que o exemplo acima faz é buscar todos os elementos H2 no item de template e adicionar o seu conteúdo, sem a tag, na célula da tabela. (Lembrando que você pode utilizar qualquer método jQuery no item de um loop dentro do template.)&lt;/p&gt;

&lt;p&gt;Já a segunda linha da tabela recebe a chamada da notícia, preservando suas tags HTML &amp;#8211; por isso a utilização da tag {{html}} no valor de cada notícia.&lt;/p&gt;

&lt;p&gt;A tag {{tmpl}} é muito útil quando precisamos encadear ou utilizar uma espécie de include dentro de um outro template. No exemplo abaixo, o template para o título e o template da chamada da notícia estão separados. O método .tmpl() recebe apenas o template da chamada.&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;xml&amp;#8221;]&lt;/p&gt;

&lt;script id=&amp;#8221;tplNoticia&amp;#8221; type=&amp;#8221;text/x-jquery-tmpl&amp;#8221;&gt;
      
{{tmpl &amp;#8220;#tplTitulo&amp;#8221;}}
      
&lt;p class=&amp;#8221;chamada&amp;#8221;&gt;${chamada} &lt;a href=&amp;#8221;${link}&amp;#8221;&gt;Leia mais&amp;#8230;&lt;/a&gt;&lt;/p&gt;
  
&lt;/script&gt;

&lt;script id=&amp;#8221;tplTitulo&amp;#8221; type=&amp;#8221;text/x-jquery-tmpl&amp;#8221;&gt;
      
&lt;h2&gt;${titulo}&lt;/h2&gt;
      
&lt;span class=&amp;#8221;data&amp;#8221;&gt;${data_publicacao}&lt;/span&gt;
  
&lt;/script&gt;

&lt;div id=&amp;#8221;noticias&amp;#8221;&gt;&lt;/div&gt;

&lt;script&gt;
  
$(function(){
    
$( &amp;#8220;#tplNoticia&amp;#8221; ).tmpl( noticias ).appendTo( &amp;#8220;#noticias&amp;#8221; );
  
});
  
&lt;/script&gt;
  

&lt;p&gt;[/cce]&lt;/p&gt;

&lt;h2 id=&#34;como-e-quando-utilizar-templates&#34;&gt;Como e quando utilizar templates?&lt;/h2&gt;

&lt;p&gt;Templating é um conceito relativamente novo no jQuery, portanto, algumas funcionalidades ainda podem parecer confusas. Cabe a você decidir qual a melhor forma de definir e converter seus modelos. Por exemplo, se o seu template só vai ser utilizado uma única vez não é necessário utilizar caching (de repente não é necessário nem mesmo utilizar um template!).&lt;/p&gt;

&lt;p&gt;Procure organizar bem seu código e pensar sempre em uma possível evolução do projeto &amp;#8211; nesse caso, templates vão ser uma mão na roda.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>