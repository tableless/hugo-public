<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tableless.Com.Br on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/tableless.com.br/index.xml</link>
    <description>Recent content in Tableless.Com.Br on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/tableless.com.br/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ah, o maravilhoso mundo real</title>
      <link>https://tableless.github.io/hugo-public/ah-o-maravilhoso-mundo-real/</link>
      <pubDate>Thu, 10 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/ah-o-maravilhoso-mundo-real/</guid>
      <description>&lt;p&gt;O Diego publicou, há mais de uma semana, um &lt;a href=&#34;http://tableless.com.br/se-prepare-para-a-revolucao&#34;&gt;artigo sobre o impacto da mudança de estratégia do W3C&lt;/a&gt; em relação ao ciclo de vida de seus padrões. O artigo gerou algumas opiniões contrárias nos comentários, em relação ao fato de ele ter dito que bordas arredondadas são mais importantes que a web semântica e em relação à estratégia de especificações modulares do W3C. Vou compartilhar minha opinião sobre os dois pontos.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, é importante distinguir o ideal daquilo que é possível fazer. Li um bocado sobre RDF e ontologias há uns dez anos. Li &amp;#8220;A Revolução Inacabada&amp;#8221;, vi o RSS nascer e se tornar popular, vi as primeiras aplicações entenderem o formato. RDF falhou. Dez anos se passaram e continuamos escrevendo HTML para ser lido por navegadores e só. Há poucos exemplos de aplicações semânticas na vida real, e a maioria seria desenvolvida de uma forma ou de outra.&lt;/p&gt;

&lt;p&gt;Há muita gente, por exemplo, definindo seu próprio padrão de XML para trocar dados com sistemas parceiros. Quantos desses estão usando RDF, com uma ontologia interpretada automaticamente por sistemas que &amp;#8220;descobrem&amp;#8221; os serviços um do outro? Ou seja, não há novidades nisso nos últimos dez anos.&lt;/p&gt;

&lt;p&gt;Escrever HTML bom é importante, porque vai ajudar o Google a indexar seu site e vai facilitar a vida de quem tentar HTML parsing nele. Mas, seja sincero, você tem mesmo esperanças de que alguém vá lê-lo como XML? Vê alguma vantagem real em validar seu código como XHTML, além de provar a si próprio que fez tudo direito? E onde está a promessa dos microformats? Microformats só fazem diferença se forem usados por muita gente. Ninguém vai fazer um parser de um formato usado em apenas um site. Você consegue citar, de cabeça, cinco sites que usem microformats e não foram feitos por você? Ah, claro, não vale incluir na lista o microformats.org.&lt;/p&gt;

&lt;p&gt;Nem RSS é um bom exemplo de aplicação de semântica XML. Existem pelo menos dois formatos populares do padrão, além do padrão Atom, que serve para a mesma coisa. E não sei de nenhum leitor de RSS de sucesso que faça parsing dos feeds como XML. O que todos fazem é ler e interpretar a string. É isso mesmo que você entendeu, quase tão bom quanto um CSV! Outro exemplo digno de nota é o SOAP, que foi criado para fornecer aos webservices a capacidade de &amp;#8220;autodescoberta&amp;#8221;. Você conhece alguém que use isso de verdade? Já viu algum robô que varre a web em busca de serviços e entende sozinho como usá-los? SOAP só tem a vantagem de oferecer tooltips para ajudar os programadores .Net que usam Visual Studio. Enquanto isso, lá fora, XMLRPC e REST (com JSON) estão mudando o mundo.&lt;/p&gt;

&lt;p&gt;Por que essas tecnologias falharam, embora pareçam todas boas idéias? Meu palpite é que elas exigiam um raciocínio de longo prazo, um tipo de aposta, que é muito difícil de conseguir. Embora XHTML, Microformats ou SOAP sejam idéias muito boas, aplicá-las em seu site só vai ter valor se muito mais gente o fizer. Se você aplicar o formato sozinho vai perder seu tempo.&lt;/p&gt;

&lt;p&gt;O que é muito diferente de, por exemplo, deixar de usar tabelas para layout, escrever bom HTML ou usar jQuery. Essas coisas lhe devolvem um benefício imediato. Se deixar de usar tabelas para layout vai ter um site mais leve e vai perder muito menos tempo quando tiver que mudar o layout, se escrever HTML bom vai ter menos trabalho para escrever CSS, para fazer o CSS mobile e o de impressão, e se usar jQuery vai escrever javascript em um terço do tempo.&lt;/p&gt;

&lt;p&gt;Note que esses três exemplos também tiram benefícios do fato de muita gente estar usando. Há muitos bons lugares para se aprender HTML e CSS, há muitos sistemas Open Source que já trabalham gerando código bom e os buscadores entendem a semântica do bom HTML. Mas você não depende desses benefícios para tomar a decisão de uso. Quando começamos, há dez anos, a fazer layouts tableless, não aparecíamos melhor no Google e praticamente não havia sistemas gerando HTML direito. Mas o fizemos assim mesmo porque os benefícios imediatos compensavam o esforço.&lt;/p&gt;

&lt;p&gt;É por isso que eu temo que nunca teremos uma web semântica de verdade, e estamos condenados a fazer HTML parsing para sempre.&lt;/p&gt;

&lt;p&gt;Há exceções. RSS, por exemplo. RSS é uma sombra do que poderia, mas é um padrão de sucesso, amplamente adotado. E não pode ser explicado com minha teoria do benefício individual imediato. Se você estiver usando RSS sozinho no mundo, não terá nenhum benefício. Talvez o sucesso do RSS se deva ao fato de precisar de uma pequena rede de usuários para oferecer um grande benefício.&lt;/p&gt;

&lt;p&gt;Você já se perguntou como foram vendidos os primeiros aparelhos de FAX? Ter um FAX só faz sentido se mais gente tiver. Foram vendidos aos pares. As empresas o compravam para trocar documentos entre a matriz e as filiais. O fato de poder trocar documentos com o resto do mundo era, no início, um &amp;#8220;benefício adicional&amp;#8221;. Se você precisa trocar conteúdo com um site parceiro e vocês forem os únicos usuários de RSS no mundo, terá valido a pena. Conforme a comunidade de usuários aumentava, o valor de ter RSS crescia. Muita gente começou a usar Bloglines e todo mundo queria entrar na festa.&lt;/p&gt;

&lt;p&gt;Há alguns anos eu percorri o país com o pessoal da Locaweb comparando o modelo de adoção do RSS com o que eu imaginava que seriam os microformats. Eu estava errado. Pense um segundo no formato de reviews dos microformats. Qual o real benefício de usá-lo? Há alguma aplicação indispensável, onde você realmente quer estar, baseada em hReview? Para que você vai perder seu tempo?&lt;/p&gt;

&lt;p&gt;Será que não estamos resolvendo o problema errado? Quando o Diego diz que bordas arredondadas são mais importantes que RDF, será que ele não tem razão? Para meus clientes, hoje, bordas arredondadas com CSS significam um site mais rápido, mais barato (menos tempo gasto recortando imagens) e, para os sites muito visitados, economia de banda. É uma diferença pequena, mas é uma vantagem. E RDF? Além de oferecer RSS, que nem vai ser lido como XML, o que eu posso fazer de real hoje com RDF para meus clientes?&lt;/p&gt;

&lt;p&gt;Desculpe se meu raciocínio parece mesquinho. Ele é. Estou tentando ser realista. Uma das principais influências sobre as decisões humanas é a inércia, e não acredito que o mundo vá, num futuro próximo, adotar de maneira revolucionária o RDF ou mesmo o XHTML. Ainda acho essas idéias fantásticas, só não sei se são possíveis.&lt;/p&gt;

&lt;p&gt;O realismo também me faz crer que a nova estratégia de especificações modulares do W3C é uma coisa boa. Sofremos décadas com implementações parciais do HTML 4 e do CSS 2. Agora vamos assumir a realidade inevitável. Os desenvolvedores de navegador se sentirão mais à vontade para dizer a você o que funciona ou não. E não precisamos esperar anos para a definição de um padrão. Podemos usar os recursos com os quais o consórcio já concordou hoje. Leva mesmo alguns anos para o W3C bater o martelo sobre determinado padrão, e as especificações modulares representam um ciclo de releases muito mais dinâmico.&lt;/p&gt;

&lt;p&gt;Já temos um acordo sobre CSS Transform, bordas arredondadas, múltiplos backgrounds, repetição no DOM, validadores de formulários, SVG, DOM Storage, querySelectors e uma série de outros recursos legais. Por que esperar até a próxima Olimpíada para dizer aos desenvolvedores de browsers: &amp;#8220;Ok, pessoal, fechamos tudo, HTML 5 e CSS 3 já são padrões, podem implementar&amp;#8221;? De qualquer maneira, a adoção modular das especificações do W3C é inevitável. Embora a especificação tenha saído inteira, a adoção foi modular no HTML 3, no HTML 4, no CSS 2. Sabendo que não vai ser diferente mesmo, não é melhor que tenhamos bonitas tabelas de compatibilidade entre o que existe e o que cada navegador suporta?&lt;/p&gt;

&lt;p&gt;Dá uma olhada na &lt;a href=&#34;http://www.w3.org/Style/CSS/current-work&#34;&gt;lista de módulos do CSS3&lt;/a&gt;. Você não quer esperar isso tudo ficar pronto para ter bordas arredondadas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPress – Uma pequena introdução</title>
      <link>https://tableless.github.io/hugo-public/wordpress-uma-pequena-introducao/</link>
      <pubDate>Sun, 10 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/wordpress-uma-pequena-introducao/</guid>
      <description>

&lt;p&gt;O WordPress não foi feito para ser um CMS. Ele foi criado primeiramente para suprir necessidades de criação de blogs. Por acaso, talvez como se fosse um acidente, começamos a utilizá-lo para criar websites, desde os mais simples até os mais complicados. O pessoal do WordPress curtiu a ideia e agora está melhorando cada vez mais o sistema para que ele se torne um CMS de verdade, mesmo assim mantendo toda a simplicidade do WordPress original. E o melhor, é tudo de graça.&lt;/p&gt;

&lt;p&gt;Quero mostrar aqui o caminho das pedras. O que você precisa aprender para não ficar batendo cabeça no começo. É coisa simples.&lt;/p&gt;

&lt;h3 id=&#34;criando-o-index-php-e-o-style-css&#34;&gt;Criando o index.php e o style.css&lt;/h3&gt;

&lt;p&gt;Para fazer um tema de WordPress, você precisa apenas de dois arquivos: &lt;strong&gt;index.php&lt;/strong&gt; e o &lt;strong&gt;style.css&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;style.css&lt;/strong&gt; tem uma pequena sintaxe no começo do arquivo com informações do autor do Template. Essas informações serão utilizadas pelo WordPress na tela de Templates.&lt;/p&gt;

&lt;p&gt;A sintaxe que está escrita no meu &lt;strong&gt;style.css&lt;/strong&gt; é este:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/*  
Theme Name: Oficina WordPress da Tableless
Theme URI: http://tableless.com.br/
Description: O layout do Tableless
Version: 1.0
Author: Diego Eis
Author URI: http://tableless.com.br/

     http://tableless.com.br

    This theme was designed and built by Diego Eis,
    whose blog you will find at http://tableless.com.br/

*/
&lt;/pre&gt;

&lt;p&gt;Você pode utilizar esse código e modificar para ficar com suas informações. Não precisa decorar, isso é coisa de maluco. 😉&lt;/p&gt;

&lt;p&gt;Crie um &lt;strong&gt;style.css&lt;/strong&gt; com este código dentro. Não iremos utilizar o CSS neste artigo.&lt;/p&gt;

&lt;p&gt;Crie também um &lt;strong&gt;index.php&lt;/strong&gt; com a estrutura básica de HTML. Eu utilizo sempre assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34; /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Daqui para frente, irei colocar apenas o código que irá dentro do BODY do documento. Portanto, tudo que iremos ver agora, insira dentro do BODY do seu documento.&lt;/p&gt;

&lt;h3 id=&#34;as-template-tags&#34;&gt;As Template Tags&lt;/h3&gt;

&lt;p&gt;O segredo do WordPress são as Template Tags. Você pode conferir todas aqui: &lt;a href=&#34;http://codex.wordpress.org/Template_Tags&#34;&gt;http://codex.wordpress.org/Template_Tags&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Os templates do wordpress são escritos em PHP. Isso torna pro designer um pouco complicado, mas não muito. Se você souber um pouco de PHP, fazer um template é muito fácil, porque PHP é uma linguagem que todo mundo usa. Para facilitar, o WordPress chama as funções do PHP que são utilizadas pelo seu sistema de Template Tags. As Template Tags não passam de funções PHP que recuperam do banco, informações que você precisará para compor o conteúdo do site. Para o programador isso não muda nada. Mas para o pessoal que não é tão íntimo assim com a linguagem PHP, a forma que usamos essas &amp;#8220;funções&amp;#8221; (Template Tags) facilita demais.&lt;/p&gt;

&lt;h3 id=&#34;o-loop-8211-listando-os-posts-na-página&#34;&gt;O Loop &amp;#8211; Listando os posts na página&lt;/h3&gt;

&lt;p&gt;O Loop é o responsável pelo trecho de código que será repetido para cada post impresso na tela.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php while ( have_posts() ) : the_post (); ?&amp;gt;

&amp;lt;?php endwhile; ?&amp;gt;
&amp;lt;/pre&amp;gt;
Pra voc&amp;ecirc; chamar os posts do blog &amp;eacute; muito simples. Voc&amp;ecirc; come&amp;ccedil;ar&amp;aacute; utilizando duas Template Tags dentro deste c&amp;oacute;digo de Loop.
&amp;lt;pre class=&#34;lang-php&#34;&amp;gt;
&amp;lt;?php while ( have_posts() ) : the_post (); ?&amp;gt;
&amp;lt;h2&amp;gt;&amp;lt;? the_title(); ?&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;? the_content(); ?&amp;gt;
&amp;lt;?php endwhile; ?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A primeira Template Tag que coloquei foi a the_title(). Ela chama os títulos dos posts do site.&lt;/p&gt;

&lt;p&gt;A segunda, the_content() chama o conteúdo dos posts. O Conteúdo vem escrito da forma que você criou no WordPress.&lt;/p&gt;

&lt;p&gt;Apenas com esse código acima, você não faz um blog completo. Um blog tem outras características importantes. E são elas que iremos ver agora.&lt;/p&gt;

&lt;h3 id=&#34;características-de-um-blog&#34;&gt;Características de um Blog&lt;/h3&gt;

&lt;p&gt;Há algumas características que compõem um blog. Essas características são encontradas geralmente em blogs, isso não quer dizer que em sites de notícias não podem contem essas características:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comentários&lt;/li&gt;
&lt;li&gt;Categorias&lt;/li&gt;
&lt;li&gt;Data, autor&lt;/li&gt;
&lt;li&gt;Feed&lt;/li&gt;
&lt;li&gt;Arquivo (histórico)&lt;/li&gt;
&lt;li&gt;Busca&lt;/li&gt;
&lt;li&gt;Permalink&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não iremos mostrar em nosso código como se faz Comentários nem Categorias. O Artigo iria ficar muito mais complicado. Portanto, se estiver interessado, faça a &lt;a href=&#34;http://visie.com.br/wordpress/&#34; title=&#34;Oficina de WordPress da Visie&#34;&gt;Oficina de WordPress da Visie&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vamos agora melhorar um bocado esse código para que o site se pareça mais com um blog.&lt;/p&gt;

&lt;p&gt;Primeiro, vamos colocar Permalinks nos títulos dos posts.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php while ( have_posts() ) : the_post (); ?&amp;gt;

&amp;lt;h2&amp;gt;&amp;lt;a href=&#34;&amp;lt;? the_permalink(); ?&amp;gt;&#34;&amp;gt;&amp;lt;? the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;? the_content(); ?&amp;gt;

&amp;lt;?php endwhile; ?&amp;gt;
&lt;/pre&gt;

&lt;h3 id=&#34;autor-e-data&#34;&gt;Autor e Data&lt;/h3&gt;

&lt;p&gt;A Template Tag que iremos utilizar é a the_author_posts_link() para Autor, que colocará a o nome do Autor com o link para seus posts. E a the_time() para colocar a data.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php while ( have_posts() ) : the_post (); ?&amp;gt;

&amp;lt;p&amp;gt;por &amp;lt;? the_author_posts_link(); ?&amp;gt; em &amp;lt;? the_time(); ?&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h2&amp;gt;&amp;lt;a href=&#34;&amp;lt;? the_permalink(); ?&amp;gt;&#34;&amp;gt;&amp;lt;? the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;? the_content(); ?&amp;gt;

&amp;lt;?php endwhile; ?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Você pode deixar a Template Tag the_time do jeito que você quiser. Ela usa aquela tabela de formatação padrão de data do PHP, você pode encontrar essa tabela aqui: &lt;a href=&#34;http://php.net/date/&#34;&gt;http://php.net/date/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Iremos formatar nossa data aqui:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php while ( have_posts() ) : the_post (); ?&amp;gt;

&amp;lt;p&amp;gt;por &amp;lt;? the_author_posts_link(); ?&amp;gt; em &amp;lt;? the_time(d/m/Y); ?&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h2&amp;gt;&amp;lt;a href=&#34;&amp;lt;? the_permalink(); ?&amp;gt;&#34;&amp;gt;&amp;lt;? the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;? the_content(); ?&amp;gt;

&amp;lt;?php endwhile; ?&amp;gt;
&lt;/pre&gt;

&lt;h3 id=&#34;busca&#34;&gt;BUSCA&lt;/h3&gt;

&lt;p&gt;Para colocar um formulário de busca é muito simples. O código do formulário será:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;form action=&#34;&amp;lt;? bloginfo(&#39;home&#39;); ?&amp;gt;&#34;&amp;gt;
&amp;lt;input name=&#34;s&#34; type=&#34;text&#34; id=&#34;busca&#34; value=&#34;&amp;lt;? =$_GET[&#39;s&#39;] ?&amp;gt;&#34; /&amp;gt;
&amp;lt;input type=&#34;submit&#34; value=&#34;Procurar&#34; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A Template Tag bloginfo() tráz do banco informações sobre o site. Neste caso, ele vai trazer a URL da home do site.&lt;/p&gt;

&lt;p&gt;Os inputs do formulário de busca do WordPress já vem com nomes pré-definidos, o input de busca, por exemplo, chama-se &lt;strong&gt;s&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nosso código está assim agora.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;form action=&#34;&amp;lt;? bloginfo(&#39;home&#39;); ?&amp;gt;&#34;&amp;gt;
&amp;lt;input name=&#34;s&#34; type=&#34;text&#34; id=&#34;busca&#34; value=&#34;&amp;lt;? =$_GET[&#39;s&#39;] ?&amp;gt;&#34; /&amp;gt;
&amp;lt;input type=&#34;submit&#34; value=&#34;Procurar&#34; /&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;?php while ( have_posts() ) : the_post (); ?&amp;gt;

&amp;lt;p&amp;gt;por &amp;lt;? the_author_posts_link(); ?&amp;gt; em &amp;lt;? the_time(d/m/Y); ?&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h2&amp;gt;&amp;lt;a href=&#34;&amp;lt;? the_permalink(); ?&amp;gt;&#34;&amp;gt;&amp;lt;? the_title(); ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;? the_content(); ?&amp;gt;

&amp;lt;?php endwhile; ?&amp;gt;
&lt;/pre&gt;

&lt;h3 id=&#34;arquivo-e-histórico&#34;&gt;Arquivo e Histórico&lt;/h3&gt;

&lt;p&gt;Para criar os arquivos, ou histórico, iremos utilizar a Template Tag: wp_get_archives().&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;? wp_get_archives(); ?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Por padrão, essa Template Tag irá gerar uma lista de links dos meses que há posts. Preste bem atenção no código HTML que ele retorna. Ele cria uma lista de LI sem UL ou OL envolta.&lt;/p&gt;

&lt;p&gt;Por tanto, temos que escrever dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;ul&amp;gt;
&amp;lt;? wp_get_archives(); ?&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Ele faz deste modo caso você queira colocar uma CLASS ou ID para nomear a lista.&lt;/p&gt;

&lt;h3 id=&#34;linkando-o-feed-o-arquivo-css&#34;&gt;Linkando o FEED o arquivo CSS&lt;/h3&gt;

&lt;p&gt;O WordPress já cria os Feeds automaticamente. O trabalho que temos é colocar um link para o que o visitante consiga copiar o endereço do RSS e cadastrar no leitor de Feeds preferido dele. Podemos oferecer em RSS, RSS 2 ou ATOM. Existem pessoas que oferecem os três formatos. Vamos oferecer apenas um formato: o RSS2.&lt;/p&gt;

&lt;p&gt;A tag link tem um atributo &amp;#8216;rel&amp;#8217;. O atributo rel é mandatório, ele vai dizer qual será o resto da tag. Se você por exemplo colocar o valor rel=&amp;#8221;stylesheet&amp;#8221;, você está dizendo ao navegador que essa tag link é relativo a uma folha de estilo.&lt;/p&gt;

&lt;p&gt;O valor &amp;#8216;alternate&amp;#8217; diz ao navegador que estamos diponibilizando o conteúdo de nosso site em um meio alternativo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;link rel=&#34;alternate&#34; ...
&amp;lt;link rel=&#34;stylesheet&#34; ...
&lt;/pre&gt;

&lt;p&gt;A tag type serve para indicar o tipo de arquivo que será carregada. No caso da folha de estillo, existem dois tipos que são utilizados hoje: o XSLT, que é utilizado para formatar código XML. E o tipo CSS, que é para formatar código HTML.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;link rel=&#34;alternate&#34; type=&#34;application/rss+xml&#34; href=&#34;&amp;lt;? bloginfo(&#39;rss_url&#39;); ?&amp;gt;&#34; /&amp;gt;
&amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;&amp;lt;? bloginfo(&#39;stylesheet_url&#39;); ?&amp;gt;&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Novamente iremos utilizar a tag boginfo(). Agora ela irá buscar o endereço do RSS e do CSS.&lt;/p&gt;

&lt;p&gt;Perceba que utilizamos neste exemplo apenas um arquivo, o &lt;strong&gt;index.php&lt;/strong&gt; para listar o conteúdo. O WordPress tem uma maneira eficaz de hierarquia de arquivos. Por exemplo: nós precisamos de um arquivo chamado archives.php para criar a lista de histórico. Na falta deste arquivo, o WordPress utiliza o &lt;strong&gt;index.php&lt;/strong&gt; para criar a lista. Se tivéssemos feito o archives.php e colocado o código que utlizamos acima que cria a lista de histórico, o WordPress não utilizará o &lt;strong&gt;index.php&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tableless.com.br – The Wonder Years</title>
      <link>https://tableless.github.io/hugo-public/tablelesscombr-the-wonder-years/</link>
      <pubDate>Fri, 07 Dec 2007 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tablelesscombr-the-wonder-years/</guid>
      <description>&lt;p&gt;No dia primeiro de Janeiro de 2008, o Tableless.com.br faz 5 anos de idade. Por isso, uma reformulação total do site era bem vinda. Essa reformulação não será rápida e não envolve apenas a constante mudança do layout, mas também a filtragem de todo o conteúdo contido no site.&lt;/p&gt;

&lt;p&gt;Durante muito tempo, principalmente no começo do site, o tableless.com.br foi apenas um blog. Conforme o tempo foi passando, o site foi se transformando sendo influenciado pelo mercado e pelas tendências da comunidade. Conforme a necessidade dos desenvolvedores foi mudando, o site ia se adaptando e o conteúdo era criado baseando-se nestas transformações. Por causa disso, muito conteúdo lixo foi criado e uma das metas é filtrar esse conteúdo e deixar o que realmente é interessante e útil.&lt;/p&gt;

&lt;p&gt;A missão do site até agora era de evangelizar os desenvolvedores web. Hoje, essa missão mudou um pouco. Como a maioria dos desenvolvedores já sabem ou pelo menos ouviram falar &amp;#8211; ainda assim muitos se fazem de surdos &amp;#8211; sobre Padrões Web, o mais interessante a partir de agora, seria indicar e mostrar as melhores práticas de desenvolvimento usando Padrões Web. E sim, do meu ponto de vista, essa é a parte mais divertida.&lt;/p&gt;

&lt;p&gt;Pra quem não sabe, o site é baseado em WordPress. Este foi um dos motivos pelo qual eu consegui implementar, sozinho, em 8 horas (começando as 10h00 da matina, e terminando as 18h00) um site do tamanho do Tableless.&lt;/p&gt;

&lt;p&gt;Fiz o design no começo desta semana. Hoje implementei XHTML e CSS e adaptei quase totalmente um template do WordPress. Quer saber o segredo? &lt;a href=&#34;http://visie.com.br/wordpress/&#34;&gt;Dá uma olhada aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A próxima grande mudança será o logo. O logo atual não significa nada e mesmo assim ele é usado desde o nascimento do site. Acho que está mais do que na hora de mudar.&lt;/p&gt;

&lt;p&gt;Nem preciso dizer que sugestões para melhorar o site serão bem-vindas. Como estou experimentando uma série de novas idéias, sua cooperação vai ser essencial.&lt;/p&gt;

&lt;p&gt;E se você ainda acha que todo site Tableless tem cara de blog, seu lugar não é aqui.&lt;/p&gt;

&lt;p&gt;PS.: Estou usando um bocado o &lt;a href=&#34;http://twitter.com/&#34;&gt;Twitter&lt;/a&gt;. Quem está no twitter sabia da mudança do layout a mais ou menos 1 semana adiantado. &lt;a href=&#34;http://twitter.com/diegoeis&#34;&gt;Meu profile&lt;/a&gt;. E tem feed. 😉&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>O Caminho Suave para o Tableless</title>
      <link>https://tableless.github.io/hugo-public/o-caminho-suave-para-o-tableless/</link>
      <pubDate>Thu, 06 Dec 2007 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-caminho-suave-para-o-tableless/</guid>
      <description>

&lt;p&gt;A maior parte dos desenvolvedores web, designers ou programadores, começaram antes do surgimento dos movimentos em prol dos &lt;a href=&#34;http://www.webstandards.org/&#34; title=&#34;Web Standards Project&#34;&gt;padrões web&lt;/a&gt;, usando tabelas para montar layouts em editores &lt;acronym title=&#34;What You See Is What You Get, Editores Visuais&#34;&gt;WYSIWYG&lt;/acronym&gt;, e ainda hoje este método é usado na maioria dos projetos de internet. Logo, é natural que muita gente, ao começar a entender o valor dos &lt;a href=&#34;http://www.webstandards.org/&#34; title=&#34;Web Standards Project&#34;&gt;padrões&lt;/a&gt;, se pergunte como migrar do desenvolvimento &amp;#8220;tradicional&amp;#8221; para o desenvolvimento de código semanticamente coerente.&lt;/p&gt;

&lt;p&gt;É um caminho muito duro o que separa o desenvolvedor acostumado a editores visuais do desenvolvimento de código coerente. E é muito comum que o designer desista após uma primeira tentativa frustrada de desenvolver um website tableless, com layout &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt; e &lt;a href=&#34;http://www.w3schools.com/xhtml/&#34; title=&#34;Extensible HyperText Markup Language&#34;&gt;XHTML&lt;/a&gt; &lt;a href=&#34;http://validator.w3.org/&#34; title=&#34;W3C MarkUp Validation Service&#34;&gt;validado&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por isso gostaria de propor um caminho gradual, mais suave, para aqueles que querem se aventurar pela primeira vez pelos &lt;a href=&#34;http://www.webstandards.org/&#34; title=&#34;Web Standards Project&#34;&gt;padrões web&lt;/a&gt;. O princípio desse método é da recompensa. Você pode obter um grande benefício aproximando seu código dos &lt;a href=&#34;http://www.webstandards.org/&#34; title=&#34;Web Standards Project&#34;&gt;padrões web&lt;/a&gt;, mesmo que não faça tudo de uma vez. Quero mostrar como você pode começar, e obter benefícios imediatos.&lt;/p&gt;

&lt;h3 id=&#34;limpe-seu-html&#34;&gt;Limpe seu HTML&lt;/h3&gt;

&lt;p&gt;A minha primeira recomendação é que você estude &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt;. Comece pela formatação básica de fonte, cor e tamanho. Isso vai te garantir código menor e produtividade maior com pouquíssimo esforço.&lt;/p&gt;

&lt;p&gt;Assim, ao criar um item de menu, você vai evitar códigos como este:&lt;/p&gt;

&lt;pre&gt;&amp;lt;a href=&#34;parceiros.asp&#34;&amp;gt;&amp;lt;font
face=&#34;Arial, Helvetica, Sans-serif&#34; size=&#34;2&#34;
color=&#34;#FF3300&#34;&amp;gt;&amp;lt;b&amp;gt;Parceiros&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;Colocando no lugar:&lt;/p&gt;

&lt;pre&gt;&amp;lt;a href=&#34;parceiros.asp&#34; class=&#34;menu&#34;&amp;gt;Parceiros&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;Tendo no &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;.menu{
&lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#font-family&#34;&gt;font-family&lt;/a&gt;: Arial, Helvetica, Sans-serif;
&lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#font-size&#34;&gt;font-size&lt;/a&gt;: 80%;
&lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#font-weight&#34;&gt;font-weight&lt;/a&gt;: bold;
&lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#color&#34;&gt;color&lt;/a&gt;:#FF3300;
}&lt;/pre&gt;

&lt;p&gt;Como você pode ver, o &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt; é extremamente simples. Aprender esses quatro atributos, mais o &amp;#8220;&lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#font-style&#34;&gt;font-style&lt;/a&gt;&amp;#8221; (para fazer itálico), é a primeira coisa que eu recomendo. É claro, isso apenas faz cócegas nas possibilidades do &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt;, ainda há muito o que aprender, mas recomendo começar por aí porque é algo que você pode aprender em alguns minutos e vai te salvar muito, muito tempo. E você vai começar a ter o controle da formatação, tendo todas as definições de fonte em um único arquivo, podendo alterar, por exemplo, a qualquer momento, a fonte de todo o conteúdo ou de todos os menus do site.&lt;/p&gt;

&lt;p&gt;O passo seguinte para limpar seu HTML é se livrar do spacer.gif, aquele gif transparente de 1 pixel que se usa para dar espaços em tabelas, e das dezenas de tabelas aninhadas. Para isso vamos começar a estudar o &amp;#8220;box-model&amp;#8221;.&lt;/p&gt;

&lt;p&gt;O pulo-do-gato aqui é um atributo &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt; chamado &lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#padding&#34;&gt;padding&lt;/a&gt;. O &lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#padding&#34;&gt;padding&lt;/a&gt; é a distância entre as bordas de um elemento e o texto dentro dele. Assim, se é preciso que o conteúdo de uma célula esteja a 10 pixels da borda esquerda, ao invés de inserir uma célula extra como espaçador, ou inserir mais uma tabela, basta definir uma classe para essa célula. Uma vez que você já está colocando a formatação no &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt;, provavelmente esta célula já tem uma classe. Então basta:&lt;/p&gt;

&lt;pre&gt;.conteudo{
&lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#padding&#34;&gt;padding&lt;/a&gt;-left:10px;
}&lt;/pre&gt;

&lt;p&gt;Isso vai fazer com que o texto esteja a 10 pixels da borda esquerda do documento. Ah, claro, o &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt; também pode livrar você de definir no HTML as bordas e o background das células de sua tabela. Lembre-se, quanto mais layout e formatação você colocar no &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt;, mais controle terá sobre seu site, principalmente em mudanças de layout durante o processo de produção e em futuras manutenções. O site também será mais leve para carregar.&lt;/p&gt;

&lt;p&gt;Concluímos então que, após aprender os atributos de formatação de fonte, o passo seguinte é aprender os atributos &lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#background&#34;&gt;background&lt;/a&gt;, &lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#border&#34;&gt;border&lt;/a&gt; e &lt;a href=&#34;http://www.w3.org/TR/REC-CSS1#padding&#34;&gt;padding&lt;/a&gt;. Indo até aqui você com certeza será um desenvolvedor muito mais feliz! Depois de limpar seu HTML, ganhar controle sobre a formatação de seu site e se tornar muito mais produtivo, você está pronto para passar à segunda etapa, correndo atrás da semântica.&lt;/p&gt;

&lt;h3 id=&#34;começando-o-trabalho-de-gente-grande&#34;&gt;Começando o Trabalho de Gente Grande&lt;/h3&gt;

&lt;p&gt;Muito bem, agora você já pode limpar seu código. Vamos estudar um exemplo prático. No começo de cada uma de suas páginas você tem um título, cujo código hoje é assim:&lt;/p&gt;

&lt;pre&gt;&amp;lt;font face=&#34;Arial, Helvetica, Sans-serif&#34; size=&#34;4&#34;
color=&#34;#FFFF00&#34;&amp;gt;&amp;lt;b&amp;gt;Novidades&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&lt;/pre&gt;

&lt;p&gt;Ao limpar esse código, você vai substituir esse monte de tags por uma só. Que tag você vai usar? Como o &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt; te permite formatar qualquer elemento, muita gente que começa a estudar o assunto acha que é indiferente que tag usar, e coloca algo como:&lt;/p&gt;

&lt;pre&gt;&amp;lt;p class=&#34;titulo&#34;&amp;gt;Novidades&amp;lt;/p&amp;gt;&lt;/pre&gt;

&lt;p&gt;Agora, veja bem, outro desenvolvedor poderia resolver o mesmo problema com:&lt;/p&gt;

&lt;pre&gt;&amp;lt;div class=&#34;titulo&#34;&amp;gt;Novidades&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;E o resultado visual poderia ser o mesmo. Acontece que há algo na natureza do HTML que nos diz que tag usar. Chamamos esse algo de &amp;#8220;semântica&amp;#8221;: as tags do HTML tem significado. A tag P é para parágrafos, a tag DIV para divisões no conteúdo, e há uma série de tags para título, h1, h2, h3, h4, h5 e h6. Assim, se você pode usar qualquer tag, pode fazer assim:&lt;/p&gt;

&lt;pre&gt;&amp;lt;h1&amp;gt;Novidades&amp;lt;/h1&amp;gt;&lt;/pre&gt;

&lt;p&gt;O que você ganha com essa preocupação? Os buscadores inteligentes podem ler semanticamente o conteúdo de um documento, entendendo que trecho de código é um título, por exemplo. Assim, escrever HTML semanticamente correto pode melhorar muito sua visibilidade em buscadores. O segundo bom motivo é que você vai saber para que serve cada tag se tiver que mexer nesse mesmo documento daqui a alguns meses. E vai ser mais fácil também se outra pessoa tiver que dar manutenção no seu código.&lt;/p&gt;

&lt;p&gt;Logo, use as tags do HTML para aquilo para o que foram criadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dd, dl e dt para listas de definições (um glossário, por exemplo)&lt;/li&gt;
&lt;li&gt;h1 a h6 para títulos&lt;/li&gt;
&lt;li&gt;p para parágrafos&lt;/li&gt;
&lt;li&gt;abbr para abreviaturas e acronym para acrônimos&lt;/li&gt;
&lt;li&gt;blockquote e q para citações longas e curtas&lt;/li&gt;
&lt;li&gt;address para endereços (sabe aquele rodapé onde vai o endereço e o telefone da empresa?)&lt;/li&gt;
&lt;li&gt;ul e ol para listas e li para os itens da lista&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Você pode obter uma lista mais abrangente em:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3schools.com/xhtml/xhtml_reference.asp&#34; title=&#34;XHTML Reference&#34;&gt;http://www.w3schools.com/xhtml/xhtml_reference.asp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E formate tudo ao seu gosto com &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;finalmente-livrando-se-das-tabelas&#34;&gt;Finalmente, Livrando-se das Tabelas&lt;/h3&gt;

&lt;p&gt;Não há bons motivos para você eliminar a qualquer custo todas as tabelas de seu primeiro trabalho. Conheço alguns excelentes profissionais, muito talentosos, que fizeram um ótimo trabalho em sua primeira tentativa de tableless. Mas a maioria dos que eu vi tentarem demoraram muito para conseguir da primeira vez, e alguns não obtiveram os resultados que esperavam. Isso tudo serve para que você possa produzir mais rápido e melhor, não o contrário. Então vá com calma. Faça alguns estudos em tableless, comece eliminando parte das tabelas em seus primeiros trabalhos. Por exemplo, remover as células de tabela que formam o menu, trocando por uma lista (com as tags ul e li), é um ótimo desafio para o primeiro projeto.&lt;/p&gt;

&lt;p&gt;Ah, e não se esqueça que para dados como uma tabela periódica ou um calendário a solução semanticamente correta é a tabela mesmo. Ou seja, tableless não é ausência de tabelas, é o seu uso apenas onde é semanticamente justificável.&lt;/p&gt;

&lt;p&gt;Não vou entrar em detalhes aqui, porque já escrevi bastante sobre como construir um layout no &lt;a href=&#34;http://tableless.com.br/tutorial/&#34;&gt;Tutorial Tableless Básico&lt;/a&gt;, mas o conselho é ir com calma, sem estresse. Você logo vai estar produzindo tableless mais fácil do que produz sites com tabelas.&lt;/p&gt;

&lt;h3 id=&#34;xhtml&#34;&gt;XHTML&lt;/h3&gt;

&lt;p&gt;Há uma coisa que muita gente que está começando me pergunta: o que é e para que serve esse tal de &lt;a href=&#34;http://www.w3schools.com/xhtml/&#34; title=&#34;Extensible HyperText Markup Language&#34;&gt;XHTML&lt;/a&gt;? É muito mais simples do que parece. Um arquivo &lt;a href=&#34;http://www.w3schools.com/xhtml/&#34; title=&#34;Extensible HyperText Markup Language&#34;&gt;XHTML&lt;/a&gt; é um arquivo HTML, que pode ser lido por qualquer browser. Não estamos falando de um novo HTML, com novas tags ou coisa assim. Pelo contrário, o &lt;a href=&#34;http://www.w3schools.com/xhtml/&#34; title=&#34;Extensible HyperText Markup Language&#34;&gt;XHTML&lt;/a&gt; 1 foi feito para funcionar mesmo em navegadores antigos. Mas, ao mesmo tempo, Um arquivo &lt;a href=&#34;http://www.w3schools.com/xhtml/&#34; title=&#34;Extensible HyperText Markup Language&#34;&gt;XHTML&lt;/a&gt; é também um arquivo &lt;a href=&#34;http://www.w3.org/XML/&#34; title=&#34;Extensible Markup Language&#34;&gt;XML&lt;/a&gt; &lt;a href=&#34;http://validator.w3.org/&#34; title=&#34;W3C MarkUp Validation Service&#34;&gt;válido&lt;/a&gt;, que pode ser lido por qualquer interpretador de &lt;a href=&#34;http://www.w3.org/XML/&#34; title=&#34;Extensible Markup Language&#34;&gt;XML&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Meu primeiro conselho, nesse caso, é que você, se não trabalha com &lt;a href=&#34;http://www.w3.org/XML/&#34; title=&#34;Extensible Markup Language&#34;&gt;XML&lt;/a&gt;, deixe preocupação com o &lt;a href=&#34;http://www.w3schools.com/xhtml/&#34; title=&#34;Extensible HyperText Markup Language&#34;&gt;XHTML&lt;/a&gt; para depois de dominar bem o código semântico e o layout tableless. Não porque seja complicado, pelo contrário, transformar bom HTML em &lt;a href=&#34;http://www.w3schools.com/xhtml/&#34; title=&#34;Extensible HyperText Markup Language&#34;&gt;XHTML&lt;/a&gt; é bem simples, mas simplesmente porque você pode obter benefícios muito significativos, e muito mais rapidamente, aprendendo &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt; do que &lt;a href=&#34;http://www.w3schools.com/xhtml/&#34; title=&#34;Extensible HyperText Markup Language&#34;&gt;XHTML&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O segundo conselho é que você comece a estudar o assunto. Depois de dominar bem layouts &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34; title=&#34;Cascading Style Sheets&#34;&gt;CSS&lt;/a&gt;, mergulhe no &lt;a href=&#34;http://www.w3.org/XML/&#34; title=&#34;Extensible Markup Language&#34;&gt;XML&lt;/a&gt;. A maioria dos bancos de dados hoje permite extrair dados diretamente em &lt;a href=&#34;http://www.w3.org/XML/&#34; title=&#34;Extensible Markup Language&#34;&gt;XML&lt;/a&gt; e todas as plataformas de aplicações web trabalham bem com &lt;a href=&#34;http://www.w3.org/XML/&#34; title=&#34;Extensible Markup Language&#34;&gt;XML&lt;/a&gt;. E com a poderosa linguagem &lt;a href=&#34;http://www.w3.org/Style/XSL/&#34; title=&#34;Extensible Stylesheet Language&#34;&gt;XSLT&lt;/a&gt; você pode muito facilmente oferecer seus os dados em &lt;a href=&#34;http://www.w3schools.com/xhtml/&#34; title=&#34;Extensible HyperText Markup Language&#34;&gt;XHTML&lt;/a&gt; para o navegador.&lt;/p&gt;

&lt;h3 id=&#34;voando-alto&#34;&gt;Voando Alto&lt;/h3&gt;

&lt;p&gt;Estamos falando de muito mais do que criar sites estilosos. Há duas semanas esteve aqui um amigo com um Palm novo, um &lt;a href=&#34;http://www.palmone.com/us/products/handhelds/zire71/&#34;&gt;Zire 71&lt;/a&gt;, e um celular com acesso à internet. Isso está se tornando cada vez mais barato e comum. Conheço também uma porção de empresas e instituições, entre elas uma série significativa de TeleCentros e órgãos públicos, que estão adotando &lt;a href=&#34;http://www.google.com.br/search?q=Linux&amp;amp;btnI=1&amp;amp;lr=lang_pt&#34;&gt;Linux&lt;/a&gt; como sistema operacional para desktops. O &lt;a href=&#34;http://www.google.com.br&#34; title=&#34;O Oráculo&#34;&gt;Google&lt;/a&gt; hoje é responsável por 90% do tráfego que meu site consegue de buscadores. É o primeiro colocado absoluto entre os buscadores. E conseguiu isso indexando semanticamente o conteúdo real dos sites. Praticamente todas as plataformas web estão oferendo suporte a &lt;a href=&#34;http://www.w3.org/XML/&#34; title=&#34;Extensible Markup Language&#34;&gt;XML&lt;/a&gt; e apostando na idéia de &lt;a href=&#34;http://www.google.com.br/search?q=webservices+xml&amp;amp;btnI=1&amp;amp;lr=lang_pt&#34;&gt;webservices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quem segue os &lt;a href=&#34;http://www.webstandards.org/&#34; title=&#34;Web Standards Project&#34;&gt;padrões web&lt;/a&gt; não precisa ter medo do futuro. Não importa que browser vai ser o mais usado daqui a dois anos, que tecnologia vai estar na moda ou de onde as pessoas vão estar usando a internet. Seu site estará lá, leve, acessível, atual e útil.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sobre Internet Explorer para Mobile – Breve impressão</title>
      <link>https://tableless.github.io/hugo-public/sobre-internet-explorer-para-mobile-breve-impressao/</link>
      <pubDate>Wed, 07 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/sobre-internet-explorer-para-mobile-breve-impressao/</guid>
      <description>&lt;p&gt;Desde que adquiri um &lt;a href=&#34;http://tableless.com.br/motoq&#34;&gt;MotoQ&lt;/a&gt; (se lê MotoQUIU) eu venho usando o &lt;a href=&#34;http://tableless.com.br/navegacao-em-mobiles&#34;&gt;Opera Mobile&lt;/a&gt; como browser padrão. Ao contrário da versão pra desktops, o Opera Mobile é pago. Por este motivo, quando a data expirou, eu resolvi usar por um tempo o Internet Explorer.&lt;/p&gt;

&lt;p&gt;Descobri que a forma com que o &lt;a href=&#34;http://www.microsoft.com/windowsmobile/software/iemobile.mspx&#34;&gt;IE Mobile&lt;/a&gt; renderiza as páginas é tão boa quanto a do Opera Mobile. A velocidade de navegação também é ótima.&lt;/p&gt;

&lt;p&gt;O Opera usa muito um sistema que eles chamam de &lt;a href=&#34;http://tableless.com.br/aprenda/sites-para-dispositivos-moveis-ssr/&#34;&gt;SSR&lt;/a&gt;,que em teoria, melhoraria (ou pelo menos tentaria) a visualização de sites em dispositivos móveis. Acontece que esse modo deixa o site muito, mas muito feio. Neste caso, tive a impressão de que o Internet Explorer renderiza melhor os sites que não foram feitos para mobile.&lt;/p&gt;

&lt;p&gt;Para quem quer dar uma ajuda para o pessoal que usa browsers mobiles, existe uma metatag chamada MobileOptimized:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;MobileOptimized&amp;quot; content=&amp;quot;sualargura&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Essa metatag é usada principalmente pelo Internet Explorer Mobile para otimizar melhor o site quando visto de SmartPhones, PocketPCs, etc. O valor colocado ali no atributo &amp;#8220;content&amp;#8221; deve ser a largura que o browser deve limitar seu layout quando visto de um mobile.&lt;/p&gt;

&lt;p&gt;Aviso aos navegantes: fazer image-replacement usando text-indent não funciona no IE para Mobiles. Parece que ele não reconhece o text-indent, o que faz com que o texto fique por cima do logo.&lt;/p&gt;

&lt;p&gt;A qualidade de rederização das fontes também achei melhor que a do Opera Mobile. Achei as fontes muito mais nítidas e legíveis.&lt;/p&gt;

&lt;p&gt;Uma coisa ruim que achei o &lt;a href=&#34;http://www.microsoft.com/windowsmobile/software/iemobile.mspx&#34;&gt;IE para Mobiles&lt;/a&gt; é a falta de abas. Isso seria muito útil. Normalmente estou sempre visitando e usando mais de dois sites simultâneamente. E sair de um para visitar o outro é uma alterativa terrível. Isso sim me faria voltar para o Opera.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/sites-para-dispositivos-moveis-breve-introducao&#34;&gt;Sites para dispositivos móveis &amp;#8211; Breve Introdução&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/aprenda/sites-para-dispositivos-moveis-ssr/&#34;&gt;Sites para dispositivos móveis &amp;#8211; SSR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/aprenda/sites-para-dispositivos-moveis-mediatype/&#34;&gt;Sites para dispositivos móveis &amp;#8211; MediaTypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/breve-introducao-xhtml-mobile-profile&#34;&gt;Breve Introdução: XHTML Mobile Profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/browsers_em_dispositivos_moveis&#34;&gt;Browsers para dispositivos móveis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/27-bilhoes-de-celulares&#34;&gt;2.7 Bilhões de Celulares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://visie.com.br/cursos/intermediarios/internetmovel2.php&#34;&gt;Curso de Internet Móvel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Video Tutorial #9 – Implementando a home de um site</title>
      <link>https://tableless.github.io/hugo-public/video-tutorial-9-criando-a-home-da-visie-css/</link>
      <pubDate>Fri, 24 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/video-tutorial-9-criando-a-home-da-visie-css/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Você pode assistir mais video aulas como essa no &lt;a href=&#34;http://visie.com.br/campus&#34; title=&#34;Vídeos aulas de Tableless da Visie&#34;&gt;Campus Online&lt;/a&gt;. &lt;a href=&#34;http://visie.com.br/campus&#34;&gt;Vídeos grátis de Tableless e Javascript.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esse Video Tutorial mostra o processo de aplicação de CSS em cima da estrutura HTML criada no &lt;a href=&#34;http://tableless.com.br/video-tutorial-8-criando-a-home-da-visie-estrutura-xhtml&#34;&gt;Video Tutorial #8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Se alguém quiser baixar o vídeo, só &lt;a href=&#34;http://tableless.com.br/videotutorial/videotutorial9/videotutorial9.rar&#34;&gt;clicar nesse link.&lt;/a&gt; O arquivo está em formato Rar (&lt;a href=&#34;http://www.rarlab.com/&#34;&gt;rarlab.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;O vídeo tem uma hora de duração, portanto esteja preparado. Meus comentários não foram muito incisivos porque eu não fiz o audio durante gravação. Tentei ser o mais completo possível, espero que ajude.&lt;/p&gt;

&lt;p&gt;Duração: ~1 hora&lt;/p&gt;

&lt;p&gt;Tamanho: 60Mb&lt;/p&gt;

&lt;p&gt;Formato: SWF&lt;/p&gt;

&lt;p&gt;Acesso: [&lt;strong&gt;Update&lt;/strong&gt;: Você pode assistir mais video aulas como essa no &lt;a href=&#34;http://visie.com.br/campus&#34; title=&#34;Vídeos aulas de Tableless da Visie&#34;&gt;Campus Online&lt;/a&gt;. &lt;a href=&#34;http://visie.com.br/campus&#34;&gt;Vídeos grátis de Tableless e Javascript.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esse Video Tutorial mostra o processo de aplicação de CSS em cima da estrutura HTML criada no &lt;a href=&#34;http://tableless.com.br/video-tutorial-8-criando-a-home-da-visie-estrutura-xhtml&#34;&gt;Video Tutorial #8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Se alguém quiser baixar o vídeo, só &lt;a href=&#34;http://tableless.com.br/videotutorial/videotutorial9/videotutorial9.rar&#34;&gt;clicar nesse link.&lt;/a&gt; O arquivo está em formato Rar (&lt;a href=&#34;http://www.rarlab.com/&#34;&gt;rarlab.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;O vídeo tem uma hora de duração, portanto esteja preparado. Meus comentários não foram muito incisivos porque eu não fiz o audio durante gravação. Tentei ser o mais completo possível, espero que ajude.&lt;/p&gt;

&lt;p&gt;Duração: ~1 hora&lt;/p&gt;

&lt;p&gt;Tamanho: 60Mb&lt;/p&gt;

&lt;p&gt;Formato: SWF&lt;/p&gt;

&lt;p&gt;Acesso:]&lt;a href=&#34;http://tableless.com.br/videotutorial/videotutorial9/&#34;&gt;6&lt;/a&gt; Download: [][6]&lt;a href=&#34;http://tableless.com.br/videotutorial/videotutorial9/videotutorial9.rar&#34;&gt;videotutorial9.rar&lt;/a&gt; (formato rar)[&lt;strong&gt;Update&lt;/strong&gt;: Você pode assistir mais video aulas como essa no &lt;a href=&#34;http://visie.com.br/campus&#34; title=&#34;Vídeos aulas de Tableless da Visie&#34;&gt;Campus Online&lt;/a&gt;. &lt;a href=&#34;http://visie.com.br/campus&#34;&gt;Vídeos grátis de Tableless e Javascript.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esse Video Tutorial mostra o processo de aplicação de CSS em cima da estrutura HTML criada no &lt;a href=&#34;http://tableless.com.br/video-tutorial-8-criando-a-home-da-visie-estrutura-xhtml&#34;&gt;Video Tutorial #8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Se alguém quiser baixar o vídeo, só &lt;a href=&#34;http://tableless.com.br/videotutorial/videotutorial9/videotutorial9.rar&#34;&gt;clicar nesse link.&lt;/a&gt; O arquivo está em formato Rar (&lt;a href=&#34;http://www.rarlab.com/&#34;&gt;rarlab.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;O vídeo tem uma hora de duração, portanto esteja preparado. Meus comentários não foram muito incisivos porque eu não fiz o audio durante gravação. Tentei ser o mais completo possível, espero que ajude.&lt;/p&gt;

&lt;p&gt;Duração: ~1 hora&lt;/p&gt;

&lt;p&gt;Tamanho: 60Mb&lt;/p&gt;

&lt;p&gt;Formato: SWF&lt;/p&gt;

&lt;p&gt;Acesso: [&lt;strong&gt;Update&lt;/strong&gt;: Você pode assistir mais video aulas como essa no &lt;a href=&#34;http://visie.com.br/campus&#34; title=&#34;Vídeos aulas de Tableless da Visie&#34;&gt;Campus Online&lt;/a&gt;. &lt;a href=&#34;http://visie.com.br/campus&#34;&gt;Vídeos grátis de Tableless e Javascript.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esse Video Tutorial mostra o processo de aplicação de CSS em cima da estrutura HTML criada no &lt;a href=&#34;http://tableless.com.br/video-tutorial-8-criando-a-home-da-visie-estrutura-xhtml&#34;&gt;Video Tutorial #8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Se alguém quiser baixar o vídeo, só &lt;a href=&#34;http://tableless.com.br/videotutorial/videotutorial9/videotutorial9.rar&#34;&gt;clicar nesse link.&lt;/a&gt; O arquivo está em formato Rar (&lt;a href=&#34;http://www.rarlab.com/&#34;&gt;rarlab.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;O vídeo tem uma hora de duração, portanto esteja preparado. Meus comentários não foram muito incisivos porque eu não fiz o audio durante gravação. Tentei ser o mais completo possível, espero que ajude.&lt;/p&gt;

&lt;p&gt;Duração: ~1 hora&lt;/p&gt;

&lt;p&gt;Tamanho: 60Mb&lt;/p&gt;

&lt;p&gt;Formato: SWF&lt;/p&gt;

&lt;p&gt;Acesso:]&lt;a href=&#34;http://tableless.com.br/videotutorial/videotutorial9/&#34;&gt;6&lt;/a&gt; Download: [][6]&lt;a href=&#34;http://tableless.com.br/videotutorial/videotutorial9/videotutorial9.rar&#34;&gt;videotutorial9.rar&lt;/a&gt; (formato rar)]&lt;a href=&#34;http://tableless.com.br/videotutorial/videotutorial9/&#34;&gt;6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por favor, comentem, vai ser bom.&lt;/p&gt;

&lt;p&gt;Obs.: O arquivo é grande, mas tem um buffer muito bom, dá para assistir tranqüilamente sem aqueles gaps. Eu acho. 😀&lt;/p&gt;

&lt;p&gt;Se você quiser mais vídeos e em alta-resolução, visite o &lt;a href=&#34;http://campus.visie.com.br/&#34; title=&#34;Vídeo aulas sobre Tableless e Ajax.&#34;&gt;Campus Online&lt;/a&gt;. Lá você vai encontrar &lt;a href=&#34;http://campus.visie.com.br/&#34; title=&#34;Vídeos sobre Tableless e Ajax&#34;&gt;vídeos tutoriais de Tableless, Ajax, Javascript&lt;/a&gt; e boas práticas de desenvolvimento web.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorial Tableless Básico em HTML5 – Layout de 3 colunas</title>
      <link>https://tableless.github.io/hugo-public/tutorial-tableless/</link>
      <pubDate>Wed, 14 May 2003 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tutorial-tableless/</guid>
      <description>&lt;p&gt;Aqui está! Aprenda agora a construir sites acessíveis em qualquer navegador ou dispositivo, leves, que carregam extremamente rápido, e ganhe muito tempo de desenvolvimento e manutenção.&lt;/p&gt;

&lt;p&gt;São dois vídeos que explicam a implementação HTML e o CSS de um layout básico. Aproveite!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://campus.tableless.com.br/default/video/12&#34; title=&#34;Vídeo sobre o HTML&#34;&gt;Implementação HTML de um layout básico&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://campus.tableless.com.br/default/video/12&#34; title=&#34;Vídeo sobre o CSS&#34;&gt;Implementação CSS do layout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O arquivos para você &lt;a href=&#34;http://campus.tableless.com.br/default/texto/25&#34;&gt;tentar você mesmo estão aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quer ver mais vídeos sobre desenvolvimento web? Visite nosso &lt;a href=&#34;http://campus.tableless.com.br/&#34;&gt;Campus Online&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>