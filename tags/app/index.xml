<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>App on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/app/index.xml</link>
    <description>Recent content in App on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/app/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Aplicativos Desktop com NW.js – Node Webkit – Introdução</title>
      <link>https://tableless.github.io/hugo-public/aplicativos-desktop-com-nw-js-node-webkit-introducao/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/aplicativos-desktop-com-nw-js-node-webkit-introducao/</guid>
      <description>

&lt;h1 id=&#34;este-é-o-primeiro-artigo-de-uma-série-que-vou-escrever-sobre-aplicações-desktop-usando-tecnologias-web-html-css-javascript-e-webgl&#34;&gt;&lt;em&gt;&lt;strong&gt;Este é o primeiro artigo de uma série que vou escrever sobre aplicações desktop usando tecnologias web. (HTML, CSS, Javascript e WebGL)&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é uma aplicação em tempo de execução baseado em Chromium e Node.js, com ele é possível desenvolver aplicativos nativos para Windows, Linux e Mac, usando tecnologias web e usufruindo dos pacotes do Node.js.&lt;/p&gt;

&lt;p&gt;Para ter uma ideia do que é possível fazer, visite este link e veja alguns aplicativos desenvolvidos com NW.js -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é um projeto criado pela Intel. Outro projeto muito bom e conhecido para desenvolver aplicativos desktop usando tecnologias web é o &lt;strong&gt;Electron&lt;/strong&gt;, criado pelo GitHub. Segue um link comparativo entre os dois -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa série de artigos, vou explicar como criar um aplicativo desktop, com ícone personalizado e empacotado em um único executável. No último artigo, vou explicar como fazer uma integração com base de dados local, em tempo real e sem a necessidade de abrir portas ou fazer configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A versão mais atual do NW.js no momento em que eu escrevo este artigo é a &lt;strong&gt;&lt;em&gt;nwjs-v0.15.3&lt;/em&gt;&lt;/strong&gt;, é esta que estou usando. Além disso, estou usando Windows como sistema operacional.&lt;/p&gt;

&lt;p&gt;Vamos começar com um &amp;#8220;Olá Mundo&amp;#8221;, porém, vou explicar alguns recursos de &amp;#8220;Window&amp;#8221; e as configurações para iniciar o projeto.&lt;/p&gt;

&lt;p&gt;Primeiro faça o download do NW.js no site &lt;a href=&#34;http://nwjs.io/&#34;&gt;http://nwjs.io/&lt;/a&gt; &amp;#8211; Para desenvolvimento, baixe a versão SDK &amp;#8211; descompacte os arquivos em uma pasta que seja fácil para acessar pelo &lt;em&gt;prompt&lt;/em&gt; de comando &amp;#8211; eu costumo descompactar na pasta _c:\nwjs_&lt;/p&gt;

&lt;p&gt;Para uma aplicação básica funcionar, precisamos apenas de dois arquivos, o &lt;em&gt;package.json&lt;/em&gt;, que contém as configurações da nossa aplicação e o &lt;em&gt;index.html&lt;/em&gt;, que contém o código da nossa aplicação. Depois vamos adicionar arquivos .js e .css. Neste primeiro artigo, vamos brincar um pouco com o package.json.&lt;/p&gt;

&lt;p&gt;Crie um novo arquivo index.html &amp;#8211; vamos adicionar uma estrutura básica de HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Meu Primeiro Projeto&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Olá Mundo.&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Crie um novo arquivo package.json, com o código abaixo e salve na mesma pasta do HTML:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;
}&lt;/pre&gt;

&lt;p&gt;Somente com essas informações no package.json você já pode testar seu &amp;#8220;Olá Mundo&amp;#8221;. &amp;#8220;&lt;em&gt;name&lt;/em&gt;&amp;#8221; é o nome do projeto, e &amp;#8220;&lt;em&gt;main&lt;/em&gt;&amp;#8221; é o arquivo inicial da aplicação, sua &amp;#8220;página inicial&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Para executar nosso aplicativo, abra o &lt;em&gt;prompt&lt;/em&gt; de comando e vá até a pasta do seu projeto, no meu caso &amp;#8220;c:\projetos\olamundo&amp;#8221;, depois vamos executar o comando para o NW.js executar nosso projeto. Como estou usando o Windows, vou apontar para o nw.exe. No Linux ou no Mac é diferente, você pode olhar na documentação. Então nosso comando ficaria assim:&lt;/p&gt;

&lt;pre&gt;cd /path/to/your/app
/path/to/nw .&lt;/pre&gt;

&lt;p&gt;No meu caso:&lt;/p&gt;

&lt;pre&gt;cd c:\projetos\olamundo
c:\nwjs\nw.exe .&lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-54795 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/olamundo01.png&#34; alt=&#34;Tela Olá Mundo NW.js&#34; width=&#34;966&#34; height=&#34;535&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mais-sobre-o-package-json&#34;&gt;Mais sobre o package.json&lt;/h2&gt;

&lt;p&gt;O nosso package.json está muito simples, tem apenas um nome e o caminho do arquivo index. Vou explicar um pouco sobre as configurações &amp;#8220;window&amp;#8221;, que servem para controlar os botões de fechar, minimizar, informar os tamanhos mínimos e máximos, se a janela pode ser dimensionada e outras configurações.&lt;/p&gt;

&lt;p&gt;Abra o seu arquivo package.json e deixe ele como o exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;,
 &#34;version&#34;: &#34;1.0&#34;,
 &#34;description&#34;: &#34;Olá Mundo&#34;,
 &#34;window&#34;: {
 &#34;width&#34;: 400,
 &#34;height&#34;: 300,
 &#34;resizable&#34;: false,
 &#34;frame&#34;: true,
 &#34;title&#34;: &#34;Olá Mundo&#34;,
 &#34;show&#34;: true,
 &#34;fullscreen&#34;: false,
 &#34;kiosk&#34;: false,
 &#34;icon&#34;: &#34;icon.png&#34;
 }
}
&lt;/pre&gt;

&lt;p&gt;Execute novamente o aplicativo e veja como ficou. Abaixo, explico cada uma das configurações usadas.&lt;/p&gt;

&lt;pre&gt;name -&amp;gt; Nome do projeto
main -&amp;gt; Arquivo inicial
version -&amp;gt; Versão
description -&amp;gt; Descrição do projeto
window:
 width -&amp;gt; Largura da janela
 height -&amp;gt; Altura da janela
 resizable -&amp;gt; Se o tamanho da janela pode ser alterado ou não
 frame -&amp;gt; Quadro que envolve a aplicação com o título, ícone, botões de fechar, minimizar e maximizar
 title -&amp;gt; Título da janela
 show -&amp;gt; Se estiver como false você executa o aplicativo e ele fica em modo silencioso, 
  está rodando, mas não aparece. Fica apenas como um processo no Windows.
 fullscreen -&amp;gt; executa em tela cheia
 kiosk -&amp;gt; Executa em tela cheia e dificulta a saída da aplicação, normalmente é usado para exposições.
 icon -&amp;gt; Caminho para o ícone (deve estar na mesma pasta do projeto)&lt;/pre&gt;

&lt;p&gt;Você pode ver mais opções e detalhes na documentação: &lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34;&gt;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repositório com os fontes do primeiro artigo: &lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34;&gt;https://bitbucket.org/jzonta/artigos_nwjs&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;próximos-artigos-8211-aplicativos-desktop-com-nw-js-8211-node-webkit&#34;&gt;Próximos artigos &amp;#8211; Aplicativos Desktop com NW.js &amp;#8211; Node Webkit&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;1º &amp;#8211; Introdução&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Uma breve introdução, fazer um &amp;#8220;Olá Mundo&amp;#8221; e aprender um pouco sobre as configurações iniciais.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2º &amp;#8211; Menus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fazer um menu nativo da aplicação e um menu HTML, capturar as ações do botão de minimizar e alterar para minimizar o aplicativo para o System Try (Aqueles ícones pequenos ao lado do relógio) e vamos adicionar menu de opções no System Try.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3º &amp;#8211; Pacotes Node e Persistência de dados&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vamos aprender como usar os pacotes do Node.js, vamos instalar um pacote para persistir informações em um banco de dados MySql e também em um arquivo local.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4º &amp;#8211; Preparando para produção&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Como empacotar sua aplicação em um executável e adicionar um ícone para o Windows.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5º &amp;#8211; Integração web com base de dados local&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como fazer uma integração de uma aplicação web com um banco de dados local, através de uma api REST, sem a necessidade de abertura de portas ou configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Poste suas dúvidas e sugestões nos comentários!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Electron</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-electron/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-electron/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-o-electron&#34;&gt;O que é o Electron&lt;/h2&gt;

&lt;p&gt;O Electron foi desenvolvido para permitir que o desenvolvimento de aplicações &lt;em&gt;desktop&lt;/em&gt; usando JavaScript, HTML e CSS fosse muito mais fácil. Criado pela equipe do &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;, ficou conhecido no começo como Atom Shell. O Electron foi criado usando tecnologias como o &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; e o Chromium, e atualmente roda em ambiente de produção de vários projetos, como o próprio &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Atom editor&lt;/a&gt; e outros, como o &lt;a href=&#34;https://slack.com/&#34; target=&#34;_blank&#34;&gt;Slack&lt;/a&gt; e o &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Visual Studio Code&lt;/a&gt;. Ele é um &lt;em&gt;framework&lt;/em&gt; bem simples de trabalhar e de rápida configuração, para construção de pequenas e grandes aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para todos que queiram se aventurar mais, ou já conhecem o Electron, a documentação completa é traduzida para vários idiomas, inclusive o português. Para acessá-la é só &lt;a href=&#34;https://github.com/atom/electron/tree/master/docs-translations/pt-BR&#34; target=&#34;_blank&#34;&gt;clicar aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mãos-à-obra&#34;&gt;Mãos à obra&lt;/h2&gt;

&lt;p&gt;Nesta Introdução iremos abordar os primeiros passos para começar a trabalhar com o Electron e desenvolver aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Além do &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; presente em sua máquina, é necessário que você também instale globalmente o pacote &lt;code&gt;electron-prebuilt&lt;/code&gt;. Para isto, basta digitar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;language-bash&#34;&gt;npm install -g electron-prebuilt&lt;/pre&gt;

&lt;h3 id=&#34;entendendo-a-estrutura&#34;&gt;Entendendo a estrutura&lt;/h3&gt;

&lt;p&gt;A estrutura básica de arquivos que usaremos aqui é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;language-text&#34;&gt;electron-app/
├── app 
    ├── assets
        └── css
            └── main.css
    ├── main.js
    ├── index.html
    └── package.json
├── Gulpfile.js
└── package.json
&lt;/pre&gt;

&lt;p&gt;Vamos falar um pouco de cada arquivo e pasta inseridos no exemplo acima:&lt;/p&gt;

&lt;h4 id=&#34;app&#34;&gt;app&lt;/h4&gt;

&lt;p&gt;É  a pasta onde todos os arquivos referentes à aplicação são inseridos.&lt;/p&gt;

&lt;h4 id=&#34;main-js&#34;&gt;main.js&lt;/h4&gt;

&lt;p&gt;É o arquivo de inicialização da aplicação. Nele vão as configurações do tipo: tamanho da tela, posicionamento, manipular eventos do sistema, etc&amp;#8230;&lt;/p&gt;

&lt;h4 id=&#34;index-html&#34;&gt;index.html&lt;/h4&gt;

&lt;p&gt;É a pagina HTML que será nossa &lt;em&gt;view&lt;/em&gt; inicial para essa introdução.&lt;/p&gt;

&lt;h4 id=&#34;app-package-json&#34;&gt;app/package.json&lt;/h4&gt;

&lt;p&gt;O arquivo &lt;code&gt;package.json&lt;/code&gt; que vai dentro da pasta &lt;em&gt;app&lt;/em&gt; é o arquivo que leva todos as dependências que sua aplicação precisará para rodar. Sendo assim, qualquer pacote _npm_ a ser usado diretamente por sua aplicação deverá ser instalado nesse &lt;em&gt;package&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;gulpfile-js&#34;&gt;Gulpfile.js&lt;/h4&gt;

&lt;p&gt;Optei usar &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt; por escolha própria mesmo, mas fiquem livres para escolher seu &lt;em&gt;&amp;#8220;task runner&amp;#8221;&lt;/em&gt; favorito.&lt;/p&gt;

&lt;h4 id=&#34;package-json&#34;&gt;package.json&lt;/h4&gt;

&lt;p&gt;O &lt;code&gt;package.json&lt;/code&gt; que fica na raiz do seu projeto é responsável pelas configurações, dependências para seu ambiente de desenvolvimento. Tudo que for incluso neste arquivo não estará presente na &lt;em&gt;build&lt;/em&gt; de produção da sua &lt;em&gt;app&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;declarando-as-dependências&#34;&gt;Declarando as dependências&lt;/h3&gt;

&lt;p&gt;Após criar a estrutura de pastas que foi citada no tópico anterior. Iremos atribuir os mesmos valores para os atributos de ambos &lt;code&gt;package.json&lt;/code&gt; presentes no projeto. Levando em consideração que &lt;code&gt;&amp;quot;your-app&amp;quot;&lt;/code&gt; será o nome da sua aplicação.&lt;/p&gt;

&lt;pre class=&#34;language-json&#34;&gt;{
  &#34;name&#34;    : &#34;olamundo&#34;,
  &#34;version&#34; : &#34;0.1.0&#34;,
  &#34;main&#34;    : &#34;main.js&#34;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Caso o campo main não tenha sido preenchido, o Electron automaticamente procurará pelo arquivo &lt;code&gt;index.js&lt;/code&gt;. É importante que preencha este campo com o arquivo que usará na inicialização da aplicação.&lt;/p&gt;

&lt;p&gt;Após feito isso, instale as dependências que utilizaremos nesta introdução, no arquivo &lt;code&gt;package.json&lt;/code&gt; que se encontra diretamente na raiz do seu projeto.&lt;/p&gt;

&lt;pre class=&#34; language-bash&#34;&gt;npm install --save-dev electron-prebuilt fs-jetpack asar rcedit Q
&lt;/pre&gt;

&lt;h3 id=&#34;criando-seu-arquivo-de-inicialização&#34;&gt;Criando seu arquivo de inicialização&lt;/h3&gt;

&lt;p&gt;Depois de configurar as pastas e instalar as dependências da nossa aplicação, vamos abrir o nosso arquivo &lt;code&gt;main.js&lt;/code&gt; . Nele vamos incluir todo o código de configuração:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;var app = require(&#39;app&#39;);
var BrowserWindow = require(&#39;browser-window&#39;);

require(&#39;crash-reporter&#39;).start();

var mainWindow = null;

app.on(&#39;window-all-closed&#39;, function() {
  
  if (process.platform != &#39;darwin&#39;) {
    app.quit();
  }

});

app.on(&#39;ready&#39;, function() {
  
  mainWindow = new BrowserWindow({width: 800, height: 600});
  
  mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;);
  
  mainWindow.openDevTools();
  
  mainWindow.on(&#39;closed&#39;, function() {
    
    mainWindow = null;
  });
}); 
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: a Função &lt;em&gt;mainWindow.openDevTools&lt;/em&gt; é chamada apenas para iniciar o &lt;em&gt;Inspetor de Elementos&lt;/em&gt; junto com a aplicação. Caso não precisem, fiquem à vontade para removê-la do seu projeto.&lt;/p&gt;

&lt;h3 id=&#34;primeira-view&#34;&gt;Primeira &lt;em&gt;view&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Finalmente a parte mais fácil. Note que em nosso arquivo &lt;code&gt;main.js&lt;/code&gt; existe a seguinte função:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;); 
&lt;/pre&gt;

&lt;p&gt;Ela será responsável por carregar o arquivo &lt;code&gt;index.html&lt;/code&gt;. No exemplo a seguir, criei um exemplo bem simples de um arquivo HTML. Esta página que foi criada, tem os mesmos aspectos de uma janela aberta de um navegador. Ou seja, podemos carregar todos os arquivos CSS e JavaScript que utilizaremos normalmente. Veja:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
      &amp;lt;meta charset=&#34;utf-8&#34; /&amp;gt;
      &amp;lt;title&amp;gt;Olá Mundo&amp;lt;/title&amp;gt;
      &amp;lt;link href=&#34;assets/css/main.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;Olá Mundo&amp;lt;/h1&amp;gt;
      
      &amp;lt;p&amp;gt;Bem vindos à nossa introdução ao Electron&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
  
  &lt;h2 id=&#34;run-your-app&#34;&gt;
    Rodando sua aplicação
  &lt;/h2&gt;
  
  &lt;h3&gt;
    electron-prebuilt
  &lt;/h3&gt;
  
  &lt;p&gt;
    Se você instalou o &lt;code&gt;electron-prebuilt&lt;/code&gt; global, Acesse a pasta &lt;strong&gt;app&lt;/strong&gt; e rode o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;electron app&lt;/pre&gt;
  
  &lt;p&gt;
    Caso tenha instalado apenas localmente, então, na pasta &lt;strong&gt;app&lt;/strong&gt; de seu projeto, digite o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;&#34;../node_modules/.bin/electron&#34; &#34;./app&#34;&lt;/pre&gt;
  
  &lt;h3&gt;
    Automatizando
  &lt;/h3&gt;
  
  &lt;p&gt;
    Como citei anteriormente, usaremos o &lt;em&gt;Gulp&lt;/em&gt; para automatizar o &lt;em&gt;run&lt;/em&gt; da nossa aplicação, facilitando assim a criação de testes e o próprio desenvolvimento da aplicação. Para isso, deixaremos nosso &lt;code&gt;Gulpfile.js&lt;/code&gt; da seguinte maneira:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;),
  childProcess = require(&#39;child_process&#39;),
  electron = require(&#39;electron-prebuilt&#39;);
  
gulp.task(&#39;run&#39;, function () {
  childProcess.spawn(electron, [&#39;./app&#39;], { stdio: &#39;inherit&#39; });
});
&lt;/pre&gt;
  
  &lt;p&gt;
    Feito isso basta rodar o seguinte comando em seu terminal:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;gulp run&lt;/pre&gt;
  
  &lt;h2&gt;
    Criando uma distribuição
  &lt;/h2&gt;
  
  &lt;p&gt;
    Depois de terminado todo o processo de desenvolvimento, você pode criar uma distribuição do seu &lt;em&gt;app&lt;/em&gt; seguindo as instruções do &lt;a href=&#34;http://electron.atom.io/docs/v0.33.0/tutorial/application-distribution&#34; target=&#34;_blank&#34;&gt;Application Distribution guide&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Pronto! Você está pronto(a) para desenvolver aplicações Desktop com o Electron.
  &lt;/p&gt;
  
  &lt;p&gt;
    E caso queiram, o projeto está disponível no &lt;a href=&#34;https://github.com/henriquesosa/electron-intro&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Desenvolvendo App para Windows Phone com App Studio</title>
      <link>https://tableless.github.io/hugo-public/desenvolvendo-app-para-windows-phone-com-app-studio/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/desenvolvendo-app-para-windows-phone-com-app-studio/</guid>
      <description>&lt;p&gt;Para as pessoas que observam a plataforma do Windows Phone, grandes oportunidades estão disponíveis para desenvolver soluções ainda não desenvolvidas.&lt;/p&gt;

&lt;p&gt;Para deixar a implementação dessas ideias de forma amigável para quem não conhece muito sobre o estudo da programação ou não está familiarizado com o desenvolvimento para esse sistema operacional, a Microsoft disponibilizou gratuitamente um sistema web para desenvolvimento de apps para Windows Phone chamado de Windows App Studio.&lt;/p&gt;

&lt;p&gt;Não é necessário codificar linhas de código, o que pode poupar tempo para quem deseja desenvolver soluções simples, porém essa plataforma não descarta o uso da codificação do código, tudo vai depender do aplicativo que você vai desenvolver e se a plataforma atenderá a sua necessidade.&lt;/p&gt;

&lt;p&gt;Desde  o inicio do projeto da sua aplicação o App Studio apresenta uma  interface que dispensa a codificação de estruturas de comunicação com a internet ou interface gráfica por código de programação, pois o sistema realiza isso para você mostrando o preview automaticamente quando é acrescentado novas ferramentas e funcionalidades no app.&lt;/p&gt;

&lt;div id=&#34;attachment_50960&#34; style=&#34;width: 701px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/08/ScreenHunter_11-Aug.-26-00.29.jpg&#34;&gt;&lt;img class=&#34; wp-image-50960&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/08/ScreenHunter_11-Aug.-26-00.29.jpg&#34; alt=&#34;Ambiente de desenvolvimento da App Studio&#34; width=&#34;691&#34; height=&#34;362&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Ambiente de desenvolvimento da App Studio
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;O Aplicativo acima foi desenvolvido usando o App Studio e o mesmo está disponível para download na loja&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/pt-br/store/apps/eu-escolhi-esperar/9nblggh2kfjd&#34; target=&#34;_blank&#34;&gt;Ver aplicativo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eu poderia apresentar a criação de um aplicativo simples usando essa plataforma, porém a Microsoft já disponibilizou um vídeo ensinando essa ferramenta disponível na Microsoft Academy.&lt;/p&gt;

&lt;p&gt;Separei dois videos que será de grande ajuda para contribuir com a sua ideia.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.microsoftvirtualacademy.com/pt-pt/training-courses/crie-seu-primeiro-aplicativo-com-windows-app-studio-8631&#34; target=&#34;_blank&#34;&gt;Assistir: Criando o seu primeiro App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.microsoftvirtualacademy.com/pt-pt/training-courses/introduo-ao-desenvolvimento-de-aplicativos-mveis-8525&#34; target=&#34;_blank&#34;&gt;Assistir: Criando o seu primeiro App (mais funcionalidades)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora é só colocar a sua ideia em desenvolvimento! e qualquer dúvida estou a disposição.&lt;/p&gt;

&lt;p&gt;Abraço e até o próximo post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorial Ionic – Meu primeiro app</title>
      <link>https://tableless.github.io/hugo-public/tutorial-ionic-meu-primeiro-app/</link>
      <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tutorial-ionic-meu-primeiro-app/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Após publicar uma &lt;a href=&#34;http://tableless.com.br/introducao-ao-ionic-framework/&#34; target=&#34;_blank&#34;&gt;breve introdução do Ionic Framework&lt;/a&gt;, vamos agora tentar construir uma app que consiga abordar o uso de componentes nativos de um celular assim como o build para as determinadas plataformas.&lt;/p&gt;

&lt;p&gt;Para isso, ao decorrer deste tutorial, vamos construir uma app bastante simples que utiliza a posição do usuário para exibir os dados do tempo na tela.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-necessário&#34;&gt;O que é necessário?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Após instalar os 2, vamos instalar o &lt;em&gt;ionic&lt;/em&gt; e o &lt;em&gt;cordova&lt;/em&gt; como módulos globais.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;npm install -g ionic cordova
&lt;/pre&gt;

&lt;h2 id=&#34;criando-o-projeto&#34;&gt;Criando o projeto&lt;/h2&gt;

&lt;p&gt;Para criar a estrutura inicial do projeto, vamos utilizar o gerador do Ionic CLI. Como o app é bastante simples, vamos utilizar o gerador &lt;em&gt;blank&lt;/em&gt; do ionic.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic start weather blank
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/02/Screen-Shot-2015-02-28-at-12.21.21-AM.png&#34;&gt;&lt;img alt=&#34;estrutura de páginas do Ionic&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/Screen-Shot-2015-02-28-at-12.21.21-AM.png&#34; width=&#34;163&#34; height=&#34;440&#34; class=&#34;alignnone size-full wp-image-47368&#34; srcset=&#34;uploads/2015/02/Screen-Shot-2015-02-28-at-12.21.21-AM.png 163w, uploads/2015/02/Screen-Shot-2015-02-28-at-12.21.21-AM-51x139.png 51w&#34; sizes=&#34;(max-width: 163px) 100vw, 163px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Podemos ver então a estrutura de pastas inicial do projeto. Inicialmente vamos mexer somente no conteúdo da pasta &lt;em&gt;www&lt;/em&gt; que é onde se encontra nosso projecto html, css e js.&lt;/p&gt;

&lt;h2 id=&#34;apis-e-plugins-utilizados&#34;&gt;APIS e Plugins utilizados&lt;/h2&gt;

&lt;p&gt;Para fazer a captura dos dados meteorológicos vamos utilizar uma API gratuita chamada &lt;a href=&#34;https://developer.forecast.io/&#34; target=&#34;_blank&#34;&gt;Forecast for Developers&lt;/a&gt;. Para fazer a captura dos dados temos que utilizar um plugin do Cordova de Geolocalização. É importante dizer que não é recomendável utilizar o &lt;em&gt;navigator.geolocation&lt;/em&gt; nativo pois ele irá pedir permissão para o usuário com frequência e irá mostrar uma mensagem não amigável para isso como a imagem abaixo ilustra.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Diálogo de permissão de localização via html5&#34; src=&#34;http://www.raymondcamden.com/images/bad.png&#34; width=&#34;320&#34; height=&#34;480&#34; class=&#34;aligncenter&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para instalar o plugin de geolocalização do Cordova, basta rodarmos o comando abaixo na pasta do projeto.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;cordova plugin add org.apache.cordova.geolocation
&lt;/pre&gt;

&lt;p&gt;Após instalado o plugin do cordova, vamos instalar uma lib que tem implementado a comunicação com alguns plugins do Cordova de uma forma mais amigável para o AngularJS que é o &lt;a href=&#34;http://ngcordova.com/&#34; target=&#34;_blank&#34;&gt;ngCordova&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para instalar o &lt;em&gt;ngCordova&lt;/em&gt; basta rodar&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;bower install ngCordova
&lt;/pre&gt;

&lt;p&gt;E importar no arquivo &lt;em&gt;www/index.html&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script src=&#34;lib/ngCordova/dist/ng-cordova.js&#34;&amp;gt;&amp;lt;/script&amp;gt; 
&amp;lt;script src=&#34;cordova.js&#34;&amp;gt;&amp;lt;/script&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;Após feito isso, devemos avisar para o AngularJS que nosso projeto depende deste módulo. Esta definição está no arquivo &lt;em&gt;www/js/app.js&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;(function() {
    angular.module(&#39;weather&#39;, [&#39;ionic&#39;, &#39;ngCordova&#39;])
        .run(function($ionicPlatform) {
            $ionicPlatform.ready(function() {
                // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
                // for form inputs)
                if (window.cordova &amp;&amp; window.cordova.plugins.Keyboard) {
                    cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
                }
                if (window.StatusBar) {
                    StatusBar.styleDefault();
                }
            });
        });
})();
&lt;/pre&gt;

&lt;p&gt;Desse momento em diante temos acesso a todos os módulos do &lt;em&gt;ngCordova&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;organização&#34;&gt;Organização&lt;/h2&gt;

&lt;p&gt;Como a App é bastante simples, não vamos fragmentar a implementação em diversos arquivos. Vamos focar em construir apenas utilizando o &lt;em&gt;app.js&lt;/em&gt;. Vamos então construir 2 componentes no AngularJS, o serviço &lt;em&gt;Weather&lt;/em&gt; para se comunicar com a API e o controller &lt;em&gt;WeatherCtrl&lt;/em&gt; para fazer a ponte entre a nossa view e a api.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;(function() {
    angular.module(&#39;weather&#39;, [&#39;ionic&#39;, &#39;ngCordova&#39;])
        .run(function($ionicPlatform) {
            $ionicPlatform.ready(function() {
                // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
                // for form inputs)
                if (window.cordova &amp;&amp; window.cordova.plugins.Keyboard) {
                    cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
                }
                if (window.StatusBar) {
                    StatusBar.styleDefault();
                }
            });
        })
        .factory(&#39;Weather&#39;, function($http) {

        })
        .controller(&#39;WeatherCtrl&#39;, function($scope, Weather) {

        });
})();
&lt;/pre&gt;

&lt;p&gt;Após feito isso, devemos fazer o bind entre o &lt;em&gt;WeatherCtrl&lt;/em&gt; e o nosso HTML.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body ng-app=&#34;weather&#34; ng-controller=&#34;WeatherCtrl as weatherCtrl&#34;&amp;gt;
    &amp;lt;ion-pane&amp;gt;
        &amp;lt;ion-header-bar class=&#34;bar-stable&#34;&amp;gt;
            &amp;lt;h1 class=&#34;title&#34;&amp;gt;Weather&amp;lt;/h1&amp;gt;
        &amp;lt;/ion-header-bar&amp;gt;
        &amp;lt;ion-content&amp;gt;
            
        &amp;lt;/ion-content&amp;gt;
    &amp;lt;/ion-pane&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Feito isso, devemos então implementar o acesso aos dados da API através de uma posição geográfica.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;.factory(&#39;Weather&#39;, function($q, $http) {
            var deferred = $q.defer();

            function getCurrentWeather(lat, lng) {
                var url = &#39;https://api.forecast.io/forecast/SUA_CHAVE_DE_API/&#39; + lat +&#39;,&#39; + lng + &#39;?callback=JSON_CALLBACK&#39;;
                $http.jsonp(url)
                    .success(deferred.resolve)
                    .error(deferred.reject);

                return deferred.promise;
            }

            return {
                getCurrentWeather: getCurrentWeather
            };
        })
&lt;/pre&gt;

&lt;p&gt;O serviço retorna uma promise que é o retorno da chamada JSONP para a API que iremos capturar no controller após acessarmos a localização do dispositivo.&lt;/p&gt;

&lt;p&gt;Com o serviço pronto, vamos então fazer a chamada ao GPS no &lt;em&gt;controller&lt;/em&gt; e com a posição, vamos capturar os dados meteorológicos.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;.controller(&#39;WeatherCtrl&#39;, function($scope, $cordovaGeolocation, Weather) {
            $scope.loading = true;

            $scope.toCelsius = function(temperature) {
                return ((temperature - 32) / 1.8).toFixed(1);
            };

            $cordovaGeolocation
                .getCurrentPosition({
                    timeout: 10000,
                    enableHighAccuracy: false
                })
                .then(function(position) {
                    var lat = position.coords.latitude;
                    var long = position.coords.longitude;

                    Weather.getCurrentWeather(lat, long).then(function(data) {
                        $scope.weatherInfo = data;
                        $scope.loading = false;
                    }, function(error) {
                        //TODO Display error message
                    });
                }, function(err) {
                    //TODO Display error message
                });
        });
&lt;/pre&gt;

&lt;p&gt;Se vocês repararem, eu adicionei umas variáveis ao escopo para controlar se está carregando dados ou não e para converter de Fahrenheit para Celsius que usaremos posteriormente no nosso HTML.&lt;/p&gt;

&lt;p&gt;Com o &lt;em&gt;controller&lt;/em&gt; preparado vamos então preparar o nosso HTML para mostrar uma imagem de carregamento enquanto não demos os dados e posteriormente mostrar a temperatura e a sensação térmica em celsius.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body ng-app=&#34;weather&#34; ng-controller=&#34;WeatherCtrl as weatherCtrl&#34;&amp;gt;
    &amp;lt;ion-pane&amp;gt;
        &amp;lt;ion-header-bar class=&#34;bar-stable&#34;&amp;gt;
            &amp;lt;h1 class=&#34;title&#34;&amp;gt;Weather&amp;lt;/h1&amp;gt;
        &amp;lt;/ion-header-bar&amp;gt;
        &amp;lt;ion-content class=&#34;text-center&#34;&amp;gt;
            &amp;lt;div ng-show=&#34;loading&#34;&amp;gt;
                Carregando informações...
            &amp;lt;/div&amp;gt;
            &amp;lt;div ng-hide=&#34;loading&#34;&amp;gt;
                &amp;lt;p&amp;gt;
                    Temperatura: {{toCelsius(weatherInfo.currently.temperature)}}º
                &amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;
                    Sensação térmica: {{toCelsius(weatherInfo.currently.apparentTemperature)}}º
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/ion-content&amp;gt;
    &amp;lt;/ion-pane&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Para visualizar o resultado podemos rodar o projeto no navegador utilizando o comando&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic serve
&lt;/pre&gt;

&lt;h2 id=&#34;gerando-as-builds-para-o-celular&#34;&gt;Gerando as &lt;em&gt;builds&lt;/em&gt; para o celular&lt;/h2&gt;

&lt;p&gt;Para gerar as os pacotes de App para celular basta rodarmos alguns comandos no Ionic CLI. É importante ressaltar que para criar o projeto iOS é necessário possuir um computador OSX.&lt;/p&gt;

&lt;h3 id=&#34;adicionando-as-plataformas&#34;&gt;Adicionando as plataformas&lt;/h3&gt;

&lt;p&gt;Para adicionarmos as plataformas em que vamos compilar nossa app bastar rodar o comando &lt;em&gt;ionic platform add PLATFORM&lt;/em&gt; passando a plataforma desejada. Para efeitos de teste, vamos utilizar apenas o Android.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic platform add android
&lt;/pre&gt;

&lt;p&gt;Após rodar esse comando vamos ver que o Ionic está criando um projeto Android dentro da pasta &lt;em&gt;platforms&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/02/Screen-Shot-2015-02-28-at-1.13.16-AM.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/02/Screen-Shot-2015-02-28-at-1.13.16-AM.png&#34; alt=&#34;Criação do projeto Android&#34; width=&#34;1061&#34; height=&#34;258&#34; class=&#34;alignnone size-full wp-image-47383&#34; srcset=&#34;uploads/2015/02/Screen-Shot-2015-02-28-at-1.13.16-AM.png 1061w, uploads/2015/02/Screen-Shot-2015-02-28-at-1.13.16-AM-265x64.png 265w, uploads/2015/02/Screen-Shot-2015-02-28-at-1.13.16-AM-400x97.png 400w&#34; sizes=&#34;(max-width: 1061px) 100vw, 1061px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A partir daí não precisamos fazer mais nada! Basta rodar a app em seu aparelho ou emulador através do comando&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic run android
&lt;/pre&gt;

&lt;p&gt;Este comando irá fazer o &lt;em&gt;build&lt;/em&gt; e enviar para o celular que estiver conectado ou emulador que estiver aberto.&lt;/p&gt;

&lt;p&gt;Para quem quiser, o projeto está disponível no &lt;a href=&#34;https://github.com/grillorafael/ionic-weather&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Ionic Framework</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-ionic-framework/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-ionic-framework/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-o-ionic&#34;&gt;O que é o Ionic?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ionicframework.com/&#34;&gt;Ionic&lt;/a&gt; é um framework criado no final de 2013 que visa a criação de aplicações híbridas para dispositivos móveis. Hoje o Ionic encontra-se na versão 1.0.0-beta.14 que segundo a equipe por trás do desenvolvimento, será o último release beta.&lt;/p&gt;

&lt;p&gt;Ele nada mais é do que uma pilha de componentes e outros frameworks. Estes componentes são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cordova.apache.org/&#34;&gt;Cordova&lt;/a&gt;: Integração com recursos nativos dos dispositivos&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;: Criação da parte Web da App&lt;/li&gt;
&lt;li&gt;Ionic Module e o Ionic CLI: Ferramentas e Componentes disponibilizados pelo framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pré-requisitos&#34;&gt;Pré-requisitos&lt;/h2&gt;

&lt;p&gt;Para utilizar o Ionic e desenvolvedor aplicações móveis com o Cordova é necessário ter instalado as seguintes dependências:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vou pular a parte em que diz como instalar o NodeJS e o NPM pois são coisas simples de se encontrar na internet.&lt;/p&gt;

&lt;h2 id=&#34;objetivo-do-artigo&#34;&gt;Objetivo do artigo&lt;/h2&gt;

&lt;p&gt;O objetivo deste artigo é dar uma breve introdução do que é o Ionic e o que ele usa como tecnologias.&lt;/p&gt;

&lt;h2 id=&#34;como-começar&#34;&gt;Como começar&lt;/h2&gt;

&lt;p&gt;Uma vez com NodeJS e o NPM instalados, é necessário instalar 2 módulos globais.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;npm install -g ionic cordova&lt;/pre&gt;

&lt;p&gt;Uma vez com esses dois módulos instalados, usaremos o gerador do Ionic CLI para criar um novo projeto.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic start appName tabs&lt;/pre&gt;

&lt;p&gt;A sintaxe para a criação de uma nova aplicação é &lt;em&gt;ionic start NOME_DO_APP TIPO_DO_GENERATOR&lt;/em&gt;. Existem hoje 3 tipos de projeto base que são &lt;em&gt;tabs&lt;/em&gt;, &lt;em&gt;blank&lt;/em&gt; e &lt;em&gt;sidemenu&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Cada gerador irá iniciar seu projeto de uma forma diferente porém todos seguem a mesma estrutura de pastas exibida abaixo.&lt;/p&gt;

&lt;p&gt;[## O que é o Ionic?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ionicframework.com/&#34;&gt;Ionic&lt;/a&gt; é um framework criado no final de 2013 que visa a criação de aplicações híbridas para dispositivos móveis. Hoje o Ionic encontra-se na versão 1.0.0-beta.14 que segundo a equipe por trás do desenvolvimento, será o último release beta.&lt;/p&gt;

&lt;p&gt;Ele nada mais é do que uma pilha de componentes e outros frameworks. Estes componentes são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cordova.apache.org/&#34;&gt;Cordova&lt;/a&gt;: Integração com recursos nativos dos dispositivos&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;: Criação da parte Web da App&lt;/li&gt;
&lt;li&gt;Ionic Module e o Ionic CLI: Ferramentas e Componentes disponibilizados pelo framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pré-requisitos-1&#34;&gt;Pré-requisitos&lt;/h2&gt;

&lt;p&gt;Para utilizar o Ionic e desenvolvedor aplicações móveis com o Cordova é necessário ter instalado as seguintes dependências:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vou pular a parte em que diz como instalar o NodeJS e o NPM pois são coisas simples de se encontrar na internet.&lt;/p&gt;

&lt;h2 id=&#34;objetivo-do-artigo-1&#34;&gt;Objetivo do artigo&lt;/h2&gt;

&lt;p&gt;O objetivo deste artigo é dar uma breve introdução do que é o Ionic e o que ele usa como tecnologias.&lt;/p&gt;

&lt;h2 id=&#34;como-começar-1&#34;&gt;Como começar&lt;/h2&gt;

&lt;p&gt;Uma vez com NodeJS e o NPM instalados, é necessário instalar 2 módulos globais.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;npm install -g ionic cordova&lt;/pre&gt;

&lt;p&gt;Uma vez com esses dois módulos instalados, usaremos o gerador do Ionic CLI para criar um novo projeto.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic start appName tabs&lt;/pre&gt;

&lt;p&gt;A sintaxe para a criação de uma nova aplicação é &lt;em&gt;ionic start NOME_DO_APP TIPO_DO_GENERATOR&lt;/em&gt;. Existem hoje 3 tipos de projeto base que são &lt;em&gt;tabs&lt;/em&gt;, &lt;em&gt;blank&lt;/em&gt; e &lt;em&gt;sidemenu&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Cada gerador irá iniciar seu projeto de uma forma diferente porém todos seguem a mesma estrutura de pastas exibida abaixo.&lt;/p&gt;

&lt;p&gt;]&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/02/Screen-Shot-2015-02-18-at-5.33.43-PM.png&#34;&gt;4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uma vez com o projeto criado, podemos roda-lo com o comando &lt;em&gt;ionic serve&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Como podemos ver pela imagem, o ionic utiliza o Gulp como ferramenta de automatização de tarefas mas não se preocupe que ele tem objetivos muito simples como compilar o SCSS, CoffeeScript e rodar um servidor para visualização do projeto. &lt;strong&gt;O uso do SCSS e do CoffeeScript é opcional.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O desenvolvimento da aplicação a partir daí é bastante &lt;em&gt;straightforward&lt;/em&gt;. Em nada difere de desenvolver um sistema Web tradicional.&lt;/p&gt;

&lt;h2 id=&#34;e-se-eu-quiser-utilizar-recursos-nativos-do-dispositivo&#34;&gt;E se eu quiser utilizar recursos nativos do dispositivo?&lt;/h2&gt;

&lt;p&gt;Caso seja necessário utilizar recursos nativos do celular como Câmera, Push Notification, Leitor de Código de Barra entre outros, você pode utilizar todos os recursos do Cordova que estão disponíveis e além disso utilizar um outro módulo do AngularJS que a equipe do Ionic criou para facilitar o uso de plugins que é o &lt;a href=&#34;http://ngcordova.com/&#34;&gt;ngCordova&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;A grande vantagem do Ionic é que seu desenvolvimento foi pensado em utilizar os recursos mais novos do CSS, HTML e JavaScript com o objetivo de prover para o desenvolvedor uma gama de componentes pré-prontos de alta qualidade e desempenho.&lt;/p&gt;

&lt;p&gt;A equipe por trás da ferramenta está trabalhando a todo vapor lançando correções e melhorias continuamente e ouvindo bastante os desenvolvedor que a estão utilizando.&lt;/p&gt;

&lt;p&gt;É também um ótimo projeto para contribuir pois o desenvolvimento é bastante simples e a comunidade é bastante receptiva.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>