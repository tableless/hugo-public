<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chromebook on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/chromebook/index.xml</link>
    <description>Recent content in Chromebook on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/chromebook/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como criar um Chrome App com o seu Chromebook</title>
      <link>https://tableless.github.io/hugo-public/como-criar-um-chrome-app-com-o-seu-chromebook/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/como-criar-um-chrome-app-com-o-seu-chromebook/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-um-chrome-app&#34;&gt;O que é um chrome app&lt;/h2&gt;

&lt;p&gt;A ideia de &lt;a href=&#34;https://www.google.com/chrome/webstore/apps-create.html&#34;&gt;chrome app&lt;/a&gt;&amp;nbsp;é trazer ferramentas que você usa no browser para o seu computador. Como se fosse uma extensão do browser. &amp;nbsp;A&amp;nbsp;instalação/desinstalação destes apps é fácil, rápida e sem dor de cabeça, além de contar com aplicativos que podem funcionar off-line.&lt;/p&gt;

&lt;h2 id=&#34;por-que-criar-um-chrome-app&#34;&gt;Por que criar um chrome APP?&lt;/h2&gt;

&lt;p&gt;A grande vantagem, é que aplicativos nativos para Chrome&amp;nbsp;OS são feitos com tecnologias que já conhecemos como HTML, CSS e JS. Podendo também utilizar a linguagem &lt;a href=&#34;http://pt.wikipedia.org/wiki/Dart_%28linguagem_de_programa%C3%A7%C3%A3o%29&#34;&gt;dart&lt;/a&gt;&amp;nbsp;que me parece bem interessante.&lt;/p&gt;

&lt;h2 id=&#34;equipamento-necessário&#34;&gt;Equipamento necessário&lt;/h2&gt;

&lt;p&gt;Encontrei vários editores de texto para o Chromebook, mas me familiarizei com o &lt;a href=&#34;http://thomaswilburn.net/caret/&#34;&gt;Caret&lt;/a&gt;. Gosto dele, pois além de informar erros, ele dá dicas de otimizações, e avisa se você esquecer de deixar callbacks para outros navegadores. Isso evita uma grande dor de cabeça. Fique à vontade para escolher o editor que mais te agrade.&lt;/p&gt;

&lt;h2 id=&#34;começar-pelo-inicio&#34;&gt;Começar pelo inicio&lt;/h2&gt;

&lt;p&gt;Para iniciar Você vai precisar de um arquivo &lt;strong&gt;manifest.json&lt;/strong&gt; para informar detalhes sobre a aplicação como titulo, descrição e icones. E de um arquivo JavaScript para criar a tela responsável pela interação com o APP conhecido como &lt;strong&gt;background.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Crie um diretório para o seu projeto. Na raiz dele vamos criar um arquivo chamado &lt;strong&gt;manifest.json&lt;/strong&gt;. A sintaxe para quem não conhece é composta por &lt;strong&gt;&amp;#8220;chave&amp;#8221;: &amp;#8220;valor&amp;#8221;&lt;/strong&gt;. É &amp;#8220;tipo&amp;#8221; um objeto JavaScript (na verdade ele é). Nele informamos nome, descrição, versão da aplicação, versão do arquivo manifest, o script de background e os ícones que serão usados no APP.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;{
  &#34;name&#34;: &#34;Nome do meu APP&#34;,
  &#34;description&#34;: &#34;Descrição do meu APP&#34;,
  &#34;version&#34;: &#34;0.1&#34;,
  &#34;manifest_version&#34;: 2,
  &#34;app&#34;: {
    &#34;background&#34;: {
      &#34;scripts&#34;: [&#34;background.js&#34;]
    }
  },
  &#34;icons&#34;: { &#34;16&#34;: &#34;icone-16.png&#34;, &#34;128&#34;: &#34;icone-128.png&#34; }
}

&lt;/pre&gt;

&lt;p&gt;Os icones são opcionais. Contudo, se você não tiver ícones para testar agora, tire essa linha. Na linha onde setamos &amp;#8220;app&amp;#8221;, setamos também o arquivo de background que é muito importante para nós.&lt;/p&gt;

&lt;h2 id=&#34;criando-o-script-de-background&#34;&gt;Criando o script de background&lt;/h2&gt;

&lt;p&gt;Após setar o script background.js, precisamos cria-lo. Aqui, por enquanto não tem segredo. Criamos o o arquivo js como o abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;chrome.app.runtime.onLaunched.addListener(function() {
  chrome.app.window.create(&#39;index.html&#39;, {
    &#39;bounds&#39;: {
      &#39;width&#39;: 400,
      &#39;height&#39;: 500
    }
  });
});&lt;/pre&gt;

&lt;p&gt;Na primeira linha, criamos um listener para ouvir nossos eventos de onLaunched, ou seja quando iniciarmos nossa aplicação. dentro dele criamos a nossa primeira tela, a função &lt;code&gt;chrome.app.window.create&lt;/code&gt; cria a nossa view index.html com o tamanho de 400&amp;#215;500.&lt;/p&gt;

&lt;h2 id=&#34;criando-a-view&#34;&gt;Criando a view&lt;/h2&gt;

&lt;p&gt;É mais simples do que vocês estão pensando. Criamos um arquivo index.html que será chamado pelo background.js quando executarmos nosso app.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Minha primeira aplicação&amp;lt;/h1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/pre&gt;

&lt;h2 id=&#34;como-testar-meu-chrome-app&#34;&gt;Como testar meu Chrome App?&lt;/h2&gt;

&lt;p&gt;Acesse o endereço pelo seu chrome &lt;strong&gt;chrome://flags&lt;/strong&gt;. Procure por &amp;#8220;&lt;strong&gt;Experimental Extension APIs&lt;/strong&gt;&amp;#8220;, use &amp;#8220;ctrl+f&amp;#8221; ou &amp;#8220;command+f&amp;#8221; para acelerar o processo, e clique no link &amp;#8220;Enable&amp;#8221;. Caso esteja com o chrome em pt-br procure por &amp;#8220;&lt;strong&gt;APIs de extensões experimentais&amp;#8221;&lt;/strong&gt; e clique no link ativar.&lt;/p&gt;

&lt;p&gt;Após ativarmos as extensões experimentais, podemos agora finalmente carregar nossa aplicação para teste.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vá no menu do chrome&amp;gt;&amp;gt; Mais ferramentas &amp;gt;&amp;gt; Extensões&amp;#8221;&lt;/em&gt; Ou acesse o endereço &lt;strong&gt;chrome://extensions/&lt;/strong&gt; acho mais fácil. Verifique se o modo desenvolvedor está ativado.&lt;/p&gt;

&lt;p&gt;Clique em &amp;#8220;&lt;strong&gt;carregar extensão expandida&lt;/strong&gt;&amp;#8221;&amp;nbsp;, escolha a pasta do seu projeto. Agora é só você procurar na sua lista de app do seu chrome, e sua aplicação está lá.&lt;/p&gt;

&lt;h2 id=&#34;tornando-as-coisas-mais-simples-com-o-nbsp-chrome-dev-editor&#34;&gt;Tornando as coisas mais simples com o&amp;nbsp;Chrome Dev Editor&lt;/h2&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li class=&#34;li&#34;&gt;
    Primeiro vamos instalar&amp;nbsp;o Chrome Dev Editor acessando &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;https://chrome.google.com/webstore/detail/chrome-dev-editor-develop/pnoffddplpippgcfjdhbmhkofpnaalpg&#34;&gt;esse link&lt;/a&gt;.
  &lt;/li&gt;
  &lt;li class=&#34;li&#34;&gt;
    Acessamos o menu principal, e clicamos em &lt;em class=&#34;markup--em markup--li-em&#34;&gt;New Project&lt;/em&gt;
  &lt;/li&gt;
  &lt;li class=&#34;li&#34;&gt;
    Digitamos o nome da aplicação, e escolhemos o &lt;em class=&#34;markup--em markup--li-em&#34;&gt;Project Type&lt;/em&gt;
  &lt;/li&gt;
  &lt;li class=&#34;li&#34;&gt;
    Usamos o atalho &lt;em class=&#34;markup--em markup--li-em&#34;&gt;ctrl+r &lt;/em&gt;para testar a aplicação
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nessa IDE, temos várias opções de &lt;em&gt;Project Type&lt;/em&gt;, mas o que importa para nós agora são os &lt;strong&gt;Chrome Apps&lt;/strong&gt;. Podemos iniciar um projeto usando &lt;a href=&#34;http://pt.wikipedia.org/wiki/Dart_%28linguagem_de_programa%C3%A7%C3%A3o%29&#34;&gt;Dart&lt;/a&gt;, ou &lt;a href=&#34;http://pt.wikipedia.org/wiki/JavaScript&#34;&gt;JavaScript&lt;/a&gt;, também iniciar um projeto usando &lt;a href=&#34;https://www.polymer-project.org/0.5/&#34;&gt;Polymer&lt;/a&gt; e todas as facilidades dele. A Facilidade, é que os arquivos que expliquei anteriormente são criados automaticamente, e a instalação e teste também são automáticos, fazemos tudo pela IDE. Tem jeito mais fácil&amp;nbsp;?&lt;/p&gt;

&lt;p&gt;É claro que isso é só o básico sobre criação de chrome Apps, mas já dá pra brincar um pouquinho. Abraço, e bons estudos. ☺&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comprei um Chromebook. E agora?</title>
      <link>https://tableless.github.io/hugo-public/comprei-um-chromebook-e-agora/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/comprei-um-chromebook-e-agora/</guid>
      <description>&lt;p&gt;Estamos em 2015, ano do futuro, do design responsivo e das aplicações na nuvem. Sério cara, ler essa frase em voz alta chega a arrepiar os cabelinhos do braço direito. Os hackers estão cada vez mais loucos, o Google está cada dia mais rico e o número de desenvolvedores web não para de crescer em todo o mundo. Somos muitos fazendo a mesma coisa, ou quase isso. Com toda a demanda de profissionais aptos a desenvolver códigos limpos, comentados e bem estruturados, as empresas investem uma boa parte dos seus recursos em hardware. Hoje se você vai num evento de JavaScript, por exemplo, pro lado que você olhar tem alguém com o Mac na mão, um Sublime Text aberto, um terminal rodando trocentas aplicações, Photoshop, Phonegap, Github, PageSpeed, Safari, Chrome, Firefox, Opera sem falar no tweetdeck, gmail e mais umas 250 abas abertas no navegador. É muita coisa rodando ao mesmo tempo!&lt;/p&gt;

&lt;p&gt;Comprei um &lt;a href=&#34;https://www.google.com/chromebook/&#34; target=&#34;_blank&#34;&gt;Chromebook&lt;/a&gt;. E agora?&lt;/p&gt;

&lt;p&gt;Como fica a vida de um desenvolver sem todos os recursos que um Mac oferece? Como você vai fazer para dar suporte a uma aplicação que usa Sass, tem o Grunt rodando, tem um time de mais 10 programadores todos dando suporte a mesma aplicação?&lt;/p&gt;

&lt;p&gt;O primeiro pensamento que vem a cabeça é: &amp;#8211; Cara, não tem como.&lt;/p&gt;

&lt;p&gt;Destas linhas em diante eu vou contar uma história de superação, de conquista, de coragem e determinação de um Chromebook na tentativa de conseguir a vaga de emprego como Hardware Oficial de Desenvolvimento. Ou HOD para os mais íntimos.&lt;/p&gt;

&lt;p&gt;O Chromebook, para quem ainda não conhece é um notebook que roda o sistema operacional da Google, o Chrome OS. Ele é baseado em Linux, utiliza as extensões de browser criadas para o Chrome como seus softwares principais e não tem como você instalar por exemplo, o Sublime Text.  Falando de um jeito menos amoroso: Ele não tem windows. Não tem como você instalar um programa nele. Você não tem espaço em disco para armazenamento. Um Chromebook vem como 16gb SSD e o modelo que eu tenho vem com uma tela de 11 polegadas. Pensando assim a primeira vontade que dá é a de desistir e fazer um empréstimo no banco para comprar uma máquina com um hardware mais forte. Calma que nem tudo está perdido. Lembram quando eu falei sobre as empresas investirem boa parte dos seus recursos em hardware? Essa foi a deixa para neste ponto do post eu dizer: tem como gastar menos com hardware e fazer mais. Existem excelentes soluções na nuvem que oferecem além dos recursos que você precisa para desenvolver suas aplicações web. Continue a leitura que você vai entender o que eu estou dizendo.&lt;/p&gt;

&lt;p&gt;Levando em consideração que você já possui algum conhecimento em desenvolvimento web, eu quero compartilhar com vocês a minha experiência como desenvolvedor front-end utilizando um Chromebook. Abaixo eu vou apresentar algumas soluções que eu encontrei para usar o meu Chromebook como HOD e desenvolver aplicações usando HTML, CSS e JavaScript usando o Sublime Text e acessando todos os recursos de um servidor.&lt;/p&gt;

&lt;p&gt;Um exemplo bem legal é o &lt;strong&gt;&lt;a href=&#34;http://thomaswilburn.net/caret/&#34; target=&#34;_blank&#34;&gt;Caret&lt;/a&gt;&lt;/strong&gt;, editor de códigos bem simples porém muito funcional. O Caret é aquele tipo de editor honesto, que não oferece muita perfumaria e faz exatamente o que se propõe a fazer. Abaixo eu mostro uma imagem onde eu só abri ele e colei um JavaScript do Google Maps. Você pode ver que o Caret já reconhece o tipo de código como sendo JavaScript. Como o Chrome OS é um sistema baseado em cloud, se por acaso você estiver em um ambiente off-line (e eu espero que isso nunca aconteça) ainda assim é possível escrever as suas aplicações web, criar exemplos ou até mesmo melhorar os seus estudos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/Screenshot-2015-04-18-at-16.06.24.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-48364&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/Screenshot-2015-04-18-at-16.06.24.png&#34; alt=&#34;Screenshot 2015-04-18 at 16.06.24&#34; width=&#34;1366&#34; height=&#34;768&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Existem também diversas IDEs em Cloud que oferecem excelentes recursos para quem é desenvolvedor. Uma delas é o &lt;strong&gt;Codeanywhere&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O Codeanywhere já vem com o Sublime Text incorporado. com o Emmet já funcionando, e todos os recursos de escrita de código que você precisa diretamente dentro do seu navegador. Com o CA você consegue acessar facilmente seus repositórios no Github ou no Bitbucket, além de startar rapidamente um ambiente de desenvolvimento para HTML5, C++, PHP e muitos outros conforme da pra ver na imagem abaixo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/Screenshot-2015-04-18-at-15.55.15.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-48365&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/Screenshot-2015-04-18-at-15.55.15.png&#34; alt=&#34;Screenshot 2015-04-18 at 15.55.15&#34; width=&#34;1366&#34; height=&#34;768&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mas se você está trabalhando num projeto com uma complexidade maior, que exige mais recursos, existe uma outra ferramenta que oferece tudo o que você vai precisar para desenvolver qualquer tipo de aplicação web.&lt;/p&gt;

&lt;p&gt;Eu estou falando do &lt;a href=&#34;https://c9.io/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Cloud 9&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sem a menor sombra de dúvidas essa é hoje a melhor IDE para desenvolvimento web baseada na nuvem e que ainda permite que você utilize uma conta gratuita com 1gb de espaço para armazenamento e 512mb de RAM. Para você ter uma ideia, o Cloud 9 entrega para você um servidor Ubuntu, onde é possível usar todos os recursos de um server Linux e através do terminal dar um npm install &amp;#8230;&lt;/p&gt;

&lt;p&gt;O _C9_ oferece recursos para quem desenvolve em HTML5, CSS3, JavaScript, Ruby, Phyton, PHP, CoffeeScript e Node.js, além de permitir que você configure as suas variáveis de ambiente. Se no editor de códigos que você utiliza hoje você personalizou teclas de atalho para facilitar o seu dia a dia, você pode simplesmente importar o arquivo com o mapa dos atalhos e utilizar no Cloud 9. É tudo em JSON. Ele também possui um editor rápido de imagens, que permite cortar, girar e redimensionar diretamente no browser.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/Screenshot-2015-04-19-at-14.17.22.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-48368&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/Screenshot-2015-04-19-at-14.17.22.png&#34; alt=&#34;Screenshot 2015-04-19 at 14.17.22&#34; width=&#34;1365&#34; height=&#34;704&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Olhando a raiz de arquivos dá pra ver que no meu ambiente de desenvolvimento eu startei um wordpress. Vai dizer que não é uma interface linda, né? E isso tudo rodando dentro do teu browser 🙂&lt;/p&gt;

&lt;p&gt;Vamos pensar assim: Uma solução em cloud que permite que o meu ambiente de desenvolvimento esteja sempre ao meu alcance, não importa aonde eu esteja e sem que eu precise carregar junto comigo um notebook. Tudo o que eu preciso é de um browser e uma conexão com a internet.&lt;/p&gt;

&lt;p&gt;Continuando as experiências &amp;#8230;&lt;/p&gt;

&lt;p&gt;Veja que dentro do diretório ceva tem um outro diretório que é chamado de ruivo (no caso sou eu). Óbvio que isso é mais um teste para mostrar o que você pode fazer com essa ferramenta em cloud. Vamos ver como ficou o meu ambiente de produção.&lt;/p&gt;

&lt;p&gt;O serviço que eu dei start quando criei a minha conta (wordpress) &lt;a href=&#34;http://ceva-realruivo.c9.io/&#34; target=&#34;_blank&#34;&gt;pode ser acessado por aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Esse outro diretório chamado de ruivo (no caso eu de novo) tem uma estrutura em HTML, CSS e JS que eu fiz apenas para testar e &lt;a href=&#34;http://ceva-realruivo.c9.io/ruivo/&#34; target=&#34;_blank&#34;&gt;pode ser acessada por aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Todo o conteúdo disponível nesses links está partindo de uma ferramenta que eu rodo pelo browser. É grátis! Você pode usar como ambiente de produção e permitir ao seu cliente, por exemplo, acompanhar em tempo real o andamento dos processos através da URL gerada pelo próprio Cloud 9.&lt;/p&gt;

&lt;p&gt;Tem muito recurso disponível para quem é desenvolvedor e precisa de um ambiente de produção sempre ao alcance dos dedos. No Chromebook essas são algumas soluções de baixo custo que eu encontrei. E você quer mais motivos para comemorar? Por ser um sistema Google você tem todos os recursos da Chrome Developer Tools para testar os seus códigos. Você ainda pode usar o acesso remoto do Chrome para trabalhar remotamente, ou simplesmente colaborar no projeto de alguém.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/Screenshot-2015-04-18-at-16.28.22.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-48370&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/Screenshot-2015-04-18-at-16.28.22.png&#34; alt=&#34;Screenshot 2015-04-18 at 16.28.22&#34; width=&#34;1365&#34; height=&#34;693&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;É muito fácil colaborar em códigos de terceiros, desenvolver aplicativos, clonar frameworks para agilizar processos. Desenvolver para a web deixou de ser um processo engessado há muito tempo. O simples fato de utilizar um Chromebook para trabalhar, faz você pensar de um modo diferente, agir de maneiras diferentes e desenvolver em novos e incríveis ambientes.&lt;/p&gt;

&lt;p&gt;Qual criança nunca viu formas de desenhos estranhos numa nuvem?&lt;/p&gt;

&lt;p&gt;Até a próxima.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>