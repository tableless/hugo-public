<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Tableless</title>
    <link>http://tableless.com.br/tags/linux/index.xml</link>
    <description>Recent content in Linux on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como instalar Node.js no Linux corretamente (Ubuntu, Debian, Elementary OS)</title>
      <link>http://tableless.com.br/como-instalar-node-js-no-linux-corretamente-ubuntu-debian-elementary-os/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/como-instalar-node-js-no-linux-corretamente-ubuntu-debian-elementary-os/</guid>
      <description>

&lt;p&gt;Recentemente comecei a minha migração do JSF para o Angular então busquei por um bom curso, pela documentação do &lt;em&gt;Framework&lt;/em&gt; e um bom livro técnico.&lt;/p&gt;

&lt;p&gt;No caso do curso escolhi inicialmente o do &lt;a href=&#34;https://twitter.com/flaviohalmeida&#34;&gt;Flávio Almeida&lt;/a&gt; na &lt;a href=&#34;https://www.alura.com.br/curso-online-angular2-parte1&#34;&gt;Alura&lt;/a&gt; e logo de cara fica claro que não é um &lt;em&gt;Framework&lt;/em&gt; para iniciantes no mundo do JavaScript e nem para iniciantes no mundo da programação, o próprio Flávio avisa sobre isso mais de uma vez além de informar sobre a necessidade de dominar o terminal (o terror dos novatos) do seu sistema operacional.&lt;/p&gt;

&lt;p&gt;Neste curso o Flávio já começa explicando como instalar os requisitos básicos para se começar a estudar sendo basicamente necessário ter instalado o &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt;, qualquer editor de texto (utilizo muito o &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;SublimeText&lt;/a&gt;, mas pra quem ta começando recomendo usar o &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Code&lt;/a&gt; porque ele nativamente consegue trabalhar muito bem com Angular e Node) e o NPM.&lt;/p&gt;

&lt;p&gt;Em distribuições &lt;em&gt;Debian Based&lt;/em&gt; é muito comum utilizar o comando &lt;strong&gt;apt install -nome do pacote-&lt;/strong&gt; e com o &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt; isso pode lhe trazer problemas, novamente o Flávio avisa sobre o possível problema. Entretanto tenho certeza que os mais novos no linux vão preferir utilizar o comando &lt;strong&gt;apt install -nome do pacote-&lt;/strong&gt; do que fazer a instalação do pacote binário e muito provavelmente isso vai quebrar tudo, porque até o momento que estou escrevendo esse texto os repositórios do Debian estão desatualizados (o Debian tem o costume de demorar para atualizar seus repositórios).&lt;/p&gt;

&lt;p&gt;Minha recomendação é que você &lt;strong&gt;não instale o Node&lt;/strong&gt; pelo comando &lt;strong&gt;sudo apt-get install -y nodejs&lt;/strong&gt; vai acontecer um conflito de nomes entre &lt;em&gt;node&lt;/em&gt; e &lt;em&gt;nodejs&lt;/em&gt;, parece besteira que uma simples nomenclatura quebre tudo, mas não é! O NPM que é o gerenciador de dependências vai ficar perdido e algumas funções não funcionarão.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;uploads/2017/01/gritos.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calma! É tentador entrar em desespero, mas segure sua onda…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se você não deseja compilar o arquivo binário de instalação do Node na mão grande, a solução de instalação contínua simples, instale o NVM primeiro e depois o Node. O legal do NVM é que você pode instalar várias versões do Node e ficar alternando entre elas, mas antes de instalar o NVM precisamos de alguns pacotes de dependências que já estão no repositório de sua distribuição Debian Based.&lt;/p&gt;

&lt;h4 id=&#34;sudo-apt-get-update-sudo-apt-get-install-build-essential-libssl-dev&#34;&gt;&lt;em&gt;sudo apt-get update sudo apt-get install build-essential libssl-dev&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Agora que você já tem o necessário em seu sistema vamos instalar o NVM:&lt;/p&gt;

&lt;h4 id=&#34;curl-sl-https-raw-githubusercontent-com-creationix-nvm-v0-31-0-install-sh-7-o-install-nvm-sh&#34;&gt;&lt;em&gt;curl -sL&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh&#34;&gt;&lt;em&gt;https://raw.githubusercontent.com/creationix/nvm/&lt;/em&gt;&lt;strong&gt;&lt;em&gt;v0.31.0&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;/install.sh&lt;/em&gt;&lt;/a&gt; _-o install&lt;em&gt;nvm.sh&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;O número da versão que está em negrito pode mudar com o tempo, então recomendo você acessar a &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;página do projeto no GitHub&lt;/a&gt; e procurar pela nova versão.&lt;/p&gt;

&lt;p&gt;Execute o scrpit com:&lt;/p&gt;

&lt;h4 id=&#34;bash-install-nvm-sh&#34;&gt;_bash install&lt;em&gt;nvm.sh&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Não tenha medo, o que está sendo feito aqui é o download de um script e a execução do mesmo, tudo vai ser instalado em um diretório oculto na pasta do seu usuário &lt;strong&gt;não é necessário utilizar o comando com&lt;/strong&gt; &lt;em&gt;sudo&lt;/em&gt; &lt;strong&gt;nesse caso&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora execute:&lt;/p&gt;

&lt;h4 id=&#34;nvm-ls-remote&#34;&gt;&lt;em&gt;nvm ls-remote&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Ele vai te exibir várias versões do Node e assim sabemos que o NVM está funcionando corretamente. Eu escolhi a versão mais recente do momento a v7.3.0, você pode instalá-la digitando:&lt;/p&gt;

&lt;h4 id=&#34;nvm-install-7-3-0&#34;&gt;&lt;em&gt;nvm install 7.3.0&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Caso você instale mais de uma versão e no futuro tenha necessidade de alternar entre elas utilize o comando:&lt;/p&gt;

&lt;h4 id=&#34;nvm-use-número-da-versão&#34;&gt;&lt;em&gt;nvm use -número da versão-&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Agora vamos verificar a versão do Node para ter certeza que tudo foi instalado corretamente utilizando o comando:&lt;/p&gt;

&lt;h4 id=&#34;node-v&#34;&gt;&lt;em&gt;node -v&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Pronto, agora você já pode dar continuidade aos seus estudos de Angular ou Node.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O básico sobre o automatizador de tarefas Make</title>
      <link>http://tableless.com.br/jaime-o-garoto-quer-make/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/jaime-o-garoto-quer-make/</guid>
      <description>

&lt;p&gt;O trabalho no client-side é cercado por tarefas pequenas e frequentes. Por causa dessas tarefas frequentes, surgiram ferramentas fantásticas como Grunt, Gulp e vários outros.&lt;/p&gt;

&lt;p&gt;Mas se voltarmos um pouco no tempo, vamos encontrar um cara chamado &lt;strong&gt;MAKE&lt;/strong&gt;. Quem já instalou algum programa em alguma distribuição unix-like sabe bem do quem estou falando.&lt;/p&gt;

&lt;p&gt;Esse era o processo básico pra instalar o programa.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ ./configure
$ make
$ make install
&lt;/pre&gt;

&lt;p&gt;Mas junto com isso, você precisava resolver uma série de problemas de dependências, caminhos de arquivos, permissões, versão e em último caso, ligava ou chamava quele amigo que manjava muito de Linux e implorava por ajuda.&lt;/p&gt;

&lt;p&gt;Muitos podem ver esses problemas como algo ruim, mas observando melhor, isso faz com que você entenda para onde os arquivos estão indo e que para um programa funcionar, ele depende de outros programas e outras bibliotecas, que podem ter uma permissão especial para serem usados.&lt;/p&gt;

&lt;p&gt;Tá mas que diabos é o Make e qual a relação dele com o Grunt ou Glup?&lt;/p&gt;

&lt;h2 id=&#34;make&#34;&gt;Make&lt;/h2&gt;

&lt;p&gt;Basicamente o MAKE é um atomatizador de tarefas em ambientes unix que foi e é muito usado para compilar programas.&lt;/p&gt;

&lt;p&gt;No processo básico de instalação que falei acima o que acontecia era o seguinte:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ ./configure&lt;/code&gt; era um script que depois de executado com sucesso criava o arquivo &lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt; é o arquivo que dizia ao &lt;strong&gt;make&lt;/strong&gt; quais eram as tarefas a serem realizadas para compilar o programa, essas tarefas eram feitas numa ordem topologica respeitando as dependências dos arquivos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ make install&lt;/code&gt; esse comando chamava uma tarefa que estava definida no makefile e que tinha como objetivo fazer a instalação do programa compilado anteriormente.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://cristianounix.github.io/img/posts/graph.png&#34; alt=&#34;&#34; width=&#34;420&#34; height=&#34;273&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Veja mais sobre ordenação topologica &lt;a href=&#34;https://en.wikipedia.org/wiki/Topological_sorting&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O Make é nativo das plataformas Linux, mas caso não tenha basta instalar o pacote &lt;code&gt;build-essential&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ apt-get install build-essential&lt;/pre&gt;

&lt;p&gt;Antes de brincarmos com o Make, seria bom criar uma pasta em qualquer lugar de sua preferência, e dentro dela vamos criar nosso arquivo &lt;code&gt;Makefile&lt;/code&gt;. Neste arquivo vamos colocar esse conteúdo (respeitando as tabulações):&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;string = &#34;Finalizando...&#34;

all: task_all
task_all: dep1 dep2 dep3
  @echo $(string)
  @echo &#34;Pronto !!&#34;
dep1:
  @echo &#34;Dependencia 1 &#34;
dep2:
  @echo &#34;Dependencia 2 &#34;
dep3:
  @echo &#34;Dependencia 3 &#34;
  @echo
&lt;/pre&gt;

&lt;p&gt;Agora, via terminal e dentro dessa pasta, execute o make:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ make
----------------
Dependencia 1
Dependencia 2
Dependencia 3

Finalizando...
Pronto !!
&lt;/pre&gt;

&lt;p&gt;Legal, né?&lt;/p&gt;

&lt;p&gt;Se quiser mudar a ordem de execução só alterar a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;task_all: dep1 dep2 dep3&lt;/pre&gt;

&lt;p&gt;Para:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;task_all: dep3 dep2 dep1&lt;/pre&gt;

&lt;p&gt;Execute o make e observe a saída novamente. Percebeu que a ordem mudou?!&lt;/p&gt;

&lt;p&gt;Você também pode chamar uma tarefa especifica, assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ make dep2&lt;/pre&gt;

&lt;h3 id=&#34;vamos-fazer-algo-útil&#34;&gt;Vamos fazer algo útil&lt;/h3&gt;

&lt;p&gt;Agora que sabemos o básico do make, vamos pensar em como poderiamos substituir uma tarefa simples do grunt, nosso problema será esse:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compilar nossos arquivos stylus&lt;/li&gt;
&lt;li&gt;Concatenar todos os arquivos&lt;/li&gt;
&lt;li&gt;Minificar&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;# Compila, concatena e minifica todos os arquivos de estilo
# Obs: verifica se você tem disponivel os executaveis globalmente,
#     senão terá que colocar o path deles

PATH_STYL=styl/*.styl
PATH_CSS=css
STYLUS_CMD=stylus
CONCAT_CMD=cat 
CONCAT_PATH=styl/header.css styl/body.css styl/footer.css &amp;gt; css/style.css
UGLIFY_CMD=uglify
UGLIFY_PATH=-s ./css/style.css -o ./css/style.min.css -c

all: task_all
task_all: compile concat minify clean
  @echo &#34;Pronto !!&#34;
compile:
  $(STYLUS_CMD) $(PATH_STYL)
  @echo &#34;Stylus compilado...&#34;
concat:
  $(CONCAT_CMD) $(CONCAT_PATH)
  @echo &#34;Concatenando...&#34;
minify:
  $(UGLIFY_CMD) $(UGLIFY_PATH)
  @echo &#34;Minificando...&#34;
clean:
  rm styl/*.css
  @echo &#34;Limpando a bagunça...&#34;
&lt;/pre&gt;

&lt;p&gt;A saída desse cara que nós acabamos de fazer vai ser algo assim:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://cristianounix.github.io/img/posts/gif-make-makefile-front.gif&#34; alt=&#34;&#34; width=&#34;550&#34; height=&#34;321&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;vamos-tentar-deixar-um-pouco-mais-legal&#34;&gt;Vamos tentar deixar um pouco mais legal.&lt;/h4&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;# Compila, concatena e minifica todos os arquivos de estilo
# Obs: verifica se você tem disponivel os executaveis globalmente,
#     senão terá que colocar o path deles

CSS_FINAL = css/style.min.css
STYLUS_FILES = styl/header.styl \
                 styl/body.styl \
                 styl/footer.styl

CSS_MIN = $(STYLUS_FILES:.styl=.min.css) 

all: $(CSS_FINAL)
 
$(CSS_FINAL): $(CSS_MIN)
  cat $^ &amp;gt;$@
  rm -f $(CSS_MIN)

%.min.css: %.styl
  stylus --compress &amp;lt;$&amp;lt; &amp;gt;$@

clean:
  rm -f $(CSS_FINAL)
&lt;/pre&gt;

&lt;h4 id=&#34;existem-alguns-variavéis-do-make-que-devemos-saber&#34;&gt;Existem alguns variavéis do Make que devemos saber:&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$@&lt;/code&gt; &amp;#8211; isso mostra o nome target atual:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;all: blabla
  @echo &#34;Ei&#34;
blabla:
  @echo $@
# Saída será:
# blabla
# Ei
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$&amp;lt;&lt;/code&gt; &amp;#8211; isso mostra o nome da primeira dependência:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;all: blabla vixi
  @echo &#34;A dependencia desse target é&#34; $&amp;lt;
blabla:

vixi:

# Saída será:
# A dependência desse target é blabla
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;[$^]&lt;/code&gt; &amp;#8211; isso mostra a lsita das dependências do target:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;all: blabla vixi
  @echo &#34;As dependências desse target são&#34; $^
blabla:

vixi:

# Saída será:
# As dependências desse target são blabla vixi
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;[$?]&lt;/code&gt; &amp;#8211; Lista de todos arquivos de dependências mais recentes que a regra, a lista de arquivos é separada por espaço:&lt;/p&gt;

&lt;p&gt;Crie 2 ou mais arquivos *.txt na pasta que irá ficar esse teste do makefile e coloquei qualquer texto dentro deles.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;HEAD_CMD=head
FILES=$(shell find . -name &#39;*.o&#39;)

show: $(FILES)
       $(HEAD_CMD) $?

# Saída será:
# head file1.txt file2.txt file3.txt [...]
# ==&amp;gt; file1.txt  file2.txt &amp;lt;==
# [CABECALHO_2]
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;[$*]&lt;/code&gt; &amp;#8211; Nome do arquivo sem a extensão:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;CSS_FINAL = css/style.min.css
STYLUS_FILES = styl/header.styl  \
                 styl/body.styl \
                 styl/footer.styl 
CSS_MIN = $(STYLUS_FILES:.styl=.min.css)

all: $(CSS_FINAL)

$(CSS_FINAL): $(CSS_MIN)

%.min.css: %.styl
@echo &#34;Arquivo -&amp;gt;&#34; $*

# Saída será:
# Arquivo -&amp;gt; styl/header
# Arquivo -&amp;gt; styl/body
# Arquivo -&amp;gt; styl/footer
&lt;/pre&gt;

&lt;p&gt;Muita coisa legal dá pra fazer com o Make.&lt;/p&gt;

&lt;p&gt;Dá para por exemplo você se conectar via ssh ou ftp e fazer o upload ou download de arquivos, rodar um shell script com diversas rotinas, você pode criar todo o setup da sua máquina colocando o make para instalar tudo que vc usa precisa: vim, mongodb, git, nodejs, sublime, brew, ou até mesmo configurar o deploy de sua aplicação, etc etc.&lt;/p&gt;

&lt;p&gt;Isso só foi o ponto de partida, foi o básico do básico do básico e mais um pouco básico do que o make faz.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vocês trocariam seu Gruntfile (ou semelhantes) por um Makefile?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(E por favor, não estou dizendo que as outras ferramentas são ruins, ou que você não deve usá-las. Quero apenas chamar a atenção para as ferramentas que já estão aqui há muito mais tempo e não conhecemos tão bem quanto pensamos.)&lt;/p&gt;

&lt;p&gt;Referência suprema: &lt;a href=&#34;http://www.gnu.org/software/make/manual/make.html&#34; target=&#34;_blank&#34;&gt;Manual Make&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Por que Python?</title>
      <link>http://tableless.com.br/por-que-python/</link>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/por-que-python/</guid>
      <description>

&lt;p&gt;Eu sou apaixonado por &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;. Muito. Daquele tipo que fala de Python sempre que pode. E uma pergunta que sempre me fazem é: por quê? Vou tentar fazer uma lista dos motivos mais relevantes:&lt;/p&gt;

&lt;h2 id=&#34;1-é-muito-bom-escrever-código-python&#34;&gt;1. É muito bom escrever código Python&lt;/h2&gt;

&lt;p&gt;Geralmente, quando alguém cria uma linguagem de programação, tem em vista um objetivo. Por exemplo, Lisp foi escrita para programação funcional. Java foi escrita para que o mesmo código pudesse rodar em qualquer lugar. PHP foi criada para construir páginas web. E Python foi criada para ser produtiva e fácil de escrever.&lt;/p&gt;

&lt;p&gt;Um programador experiente aprende a sintaxe do Python em algumas poucas horas. O jeito de escrever faz sentido.&lt;/p&gt;

&lt;p&gt;Veja, por exemplo, essa função para calcular um número de &lt;a href=&#34;https://pt.wikipedia.org/wiki/Sequ%C3%AAncia_de_Fibonacci&#34;&gt;Fibonacci&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;def fib(n):
    if n&amp;lt;3:
        return n
    return fib(n-1) + fib(n-2)&lt;/pre&gt;

&lt;p&gt;Note como a sintaxe é simples. Mesmo nas decisões de design que são &amp;#8220;pouco ortodoxas&amp;#8221;, como os blocos baseados na indentação, a decisão foi tomada pensando em produtividade. O modelo de blocos do Python faz com que você precise digitar menos. Além disso, é impossível escrever código não indentado em Python.&lt;/p&gt;

&lt;p&gt;Veja nesse outro exemplo, a função de Fibonacci em uma versão &lt;a href=&#34;https://en.wikipedia.org/wiki/Memoization&#34;&gt;memoized&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;memo = {0:0, 1:1}

def fib(n):
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Reparou como é simples? Ao trabalhar com Python, a linguagem nunca está entre você e seu problema. Você pode gastar seu tempo com a lógica de programação, que é o que realmente importa, e não com especificidades da linguagem que você está usando.&lt;/p&gt;

&lt;h2 id=&#34;2-organizar-um-projeto-python-é-muito-fácil&#34;&gt;2. Organizar um projeto Python é muito fácil&lt;/h2&gt;

&lt;p&gt;Vamos colocar nossa função de Fibonacci e salvar num arquivo, fib.py, incluindo um pouquinho de documentação. Chamamos cada arquivo Python de módulo:&lt;/p&gt;

&lt;pre&gt;&#39;&#39;&#39;Fibonacci function, memoized for better performance.&#39;&#39;&#39;
memo = {0:0, 1:1}

def fib(n):
    &#39;&#39;&#39;Returns the nth Fibonacci number.&#39;&#39;&#39;
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Agora vamos importar esse arquivo no console do Python, e veja o que dá para fazer:&lt;/p&gt;

&lt;div style=&#34;width: 490px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://elcio.com.br/wp-content/uploads/2015/09/fib.gif&#34; alt=&#34;&#34; width=&#34;480&#34; height=&#34;267&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Executando fib.py e ajuda.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;É como PHPDoc ou Javadoc, mas completamente nativo, e com uma sintaxe muito simples. E tudo o que você precisa para ler a documentação é o próprio Python.&lt;/p&gt;

&lt;h2 id=&#34;3-o-ecossistema-python-é-fantástico&#34;&gt;3. O ecossistema Python é fantástico&lt;/h2&gt;

&lt;p&gt;Começando pela própria linguagem, que vem com uma excelente &lt;a href=&#34;https://docs.python.org/3/library/&#34;&gt;biblioteca padrão&lt;/a&gt;. Essa biblioteca é bastante extensa e possui excelentes módulos, bem documentados e fáceis de usar. Por exemplo, digamos que você queira baixar o código fonte desse artigo e gerar um arquivo GZip com ele, veja como é fácil:&lt;/p&gt;

&lt;pre&gt;import urllib
import gzip
html=urllib.urlopen(&#39;http://tableless.com.br/por-que-python/&#39;).read()
gzfile=gzip.open(&#39;por-que-python.html.gz&#39;,&#39;w&#39;)
gzfile.write(html)&lt;/pre&gt;

&lt;p&gt;Usamos os módulos urllib e gzip. Entre os recursos fornecidos pelos módulos que já vem com o Python, posso citar o controle de threads e processamento paralelo, a criação de webservices, bibliotecas para sockets, http, ftp, e-mail, a leitura e escrita de XML, JSON, CSV, o acesso a recursos do sistema operacional, matemática e estatística, criptografia, manipulação de arquivos de áudio, testes automatizados, etc.&lt;/p&gt;

&lt;p&gt;Como é fácil escrever código bom e bem documentado, a comunidade Python tem feito um excelente em fornecer módulos para praticamente tudo o que você precisar fazer. Você pode encontrar, no &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;Python Package Index&lt;/a&gt;, milhares de módulos prontos para coisas como ler e escrever arquivos Excel, trabalhar com imagens, acessar bancos de dados os mais diversos, trabalhar com automação residencial, enviar SMS, integrar seu software ao Gmail, falar com serviços de VoIP, conectar-se a redes sociais, criar um servidor de e-mails, desenvolver jogos 3D, e uma infinidade de outros recursos.&lt;/p&gt;

&lt;h3 id=&#34;e-tem-mais-8230&#34;&gt;E tem mais&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Se você não programa em Python, espero tê-lo deixado pelo menos um pouquinho curioso. No próximo artigo, vamos falar um pouco mais da linguagem, mostrando algumas características da sintaxe e dos tipos de dados que a tornam tão interessante. Até lá, fique à vontade nos comentários. Sugestões, dúvidas, críticas e opiniões são muito bem vindas e vão me ajudar a preparar os próximos artigos.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando comandos de atalhos no terminal</title>
      <link>http://tableless.com.br/criando-comandos-de-atalhos-no-terminal/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-comandos-de-atalhos-no-terminal/</guid>
      <description>

&lt;p&gt;Esta dica pode ser utilizada em qualquer distribuição Linux ou Mac OS X.&lt;/p&gt;

&lt;p&gt;Se você está cansado de digitar comandos gigantescos no terminal, aqui vai uma dica: crie atalhos para os comandos no seu terminal para melhorar a produtividade. Uma dica simples mas é muito util.&lt;/p&gt;

&lt;p&gt;Para rodar um projeto python/django, geralmente executamos este comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;python manage.py runserver
&lt;/pre&gt;

&lt;p&gt;Com o comando de atalho criado, execute-o desta maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;h2 id=&#34;criando-os-atalhos&#34;&gt;Criando os atalhos&lt;/h2&gt;

&lt;p&gt;Para começar a criar seus atalhos, abra o arquivo &lt;strong&gt;.profile&lt;/strong&gt; ou &lt;strong&gt;.bashrc&lt;/strong&gt; que ficam na raiz da pasta do usuário. Em seguida abra-os em seu editor de preferência.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sublime ~/.bashrc&lt;/pre&gt;

&lt;p&gt;Agora adicione a função no final do arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run() {
    echo &#34;executando... python manage.py runserver
    python manage.py runserver
}
&lt;/pre&gt;

&lt;p&gt;Pronto! Agora basta atualizar o arquivo para que o terminal o reconheça e entenda os novos comandos. Faça isso assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;source ~/.bashrc&lt;/pre&gt;

&lt;p&gt;Após a execução do comando acima, a funcão criada já está disponível no terminal, digite o comando abaixo para testar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;p&gt;Podemos fazer funções mais elaboradas, imagine que você precisa rodar diversos projetos e cada um em uma porta diferente, então veja como fazer:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run() {
    if [ &#34;$1&#34; != &#39;&#39; ]; then
        python manage.py runserver &#34;0.0.0.0:$1&#34;
    else
        python manage.py runserver &#34;0.0.0.0:8000&#34;
    fi
}
&lt;/pre&gt;

&lt;p&gt;Outra dica é utilizar argumentos em suas funções. No caso da função acima, $1 é um argumento que é passado após o comando que define em qual porta irá rodar o projeto. Se não for passado nenhum valor, ele irá rodar na porta padrão que foi definida como 8000.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run 8001&lt;/pre&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run 8002&lt;/pre&gt;

&lt;p&gt;É possível passar diversos argumentos, veja um exemplo na função:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;teste(){
    echo $1 $2;
}
&lt;/pre&gt;

&lt;p&gt;Os argumentos veem em seguida ao comando sempre com espaços entre eles, como no exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;teste Willem Allan&lt;/pre&gt;

&lt;p&gt;Retorno do comando executado será:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Willem Allan&lt;/pre&gt;

&lt;p&gt;Logo abaixo seguem algumas funções que eu utilizo no meu .bashrc 😉&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;# git commit
cm() {
    git commit -m &#34;echo $1&#34; -a
}

# git add all &amp; commit
cma() {
    git add .
    git commit -m &#34;echo $1&#34; -a
}

# python - run django
run() {
    if [ &#34;$1&#34; != &#39;&#39; ]; then
        python manage.py runserver &#34;0.0.0.0:$1&#34;
    else
        python manage.py runserver &#34;0.0.0.0:8000&#34;
    fi
}

# python - migrate
migrate() {
    echo &#34;executando... python manage.py migrate&#34;
    python manage.py migrate
}

# python - auto
auto() {
    echo &#34;executando... python manage.py schemamigration $1 --auto&#34;
    python manage.py schemamigration $1 --auto
}

# python - initial
initial() {
    echo &#34;executando... python manage.py schemamigration $1 --initial&#34;
    python manage.py schemamigration $1 --initial
}
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Flock 1.0 – agora dá para usar</title>
      <link>http://tableless.com.br/flock-10-agora-da-para-usar/</link>
      <pubDate>Sun, 02 Dec 2007 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/flock-10-agora-da-para-usar/</guid>
      <description>

&lt;p&gt;O &lt;a href=&#34;http://getfirefox.com/&#34;&gt;Firefox&lt;/a&gt; é o browser do meu coracão. Não vivo mais sem suas extensões. Se você é desenvolvedor e usa Firefox, sabe do que estou falando.&lt;/p&gt;

&lt;p&gt;Só que eu não sou apenas desenvolvedor. Nas horas vagas, sou gente normal. Gosto de passar uma parte do meu tempo navegando pelos meus sites prediletos. Por isso, eu gastava algumas horas procurando por extensões que me deixassem mais ligado em sites como &lt;a href=&#34;http://flickr.com/photos/diegoeis&#34;&gt;Flickr&lt;/a&gt;, &lt;a href=&#34;http://twitter.com/diegoeis/&#34;&gt;Twitter&lt;/a&gt; e &lt;a href=&#34;http://del.icio.us/tableless&#34;&gt;Del.icio.us&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://flock.com/&#34;&gt;Flock&lt;/a&gt;, durante algum tempo, tinha a promessa de ser um browser que facilitasse nossa relação com os serviços online. Até então, pelo menos para mim, ele não tinha alcançado este objetivo. Parece que tudo mudou de figura. Foi lançado a &lt;a href=&#34;http://flock.com/get-ready-to-flock&#34;&gt;versão 1.0 do Flock para Windows, Mac e Linux&lt;/a&gt; e pelo menos até agora, estou gostando bastante.&lt;/p&gt;

&lt;!--More--&gt;

&lt;p&gt;Depois da instalação, ele me perguntou se eu gostaria de importar meus favoritos e outras configurações do &lt;a href=&#34;http://getfirefox.com/&#34;&gt;Firefox&lt;/a&gt; ou &lt;a href=&#34;http://apple.com/safari&#34;&gt;Safari&lt;/a&gt;. Disse para pegar tudo do &lt;a href=&#34;http://getfirefox.com/&#34;&gt;Firefox&lt;/a&gt;. Isso foi feito sem o menor problema.&lt;/p&gt;

&lt;h3 id=&#34;extensões-do-firefox&#34;&gt;Extensões do Firefox&lt;/h3&gt;

&lt;p&gt;Mesmo o Flock sendo baseado no Firefox, minha primeira preocupação foi testar as extensões que eu mais uso no Firefox. Nas versões anteriores do Flock, muitas delas davam defeitos e eu acabava não migrando de browser por conta disso. Mas agora, depois dos testes, parece que a versão 1.0 está totalmente estável para o uso de &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/search&#34;&gt;extensões do Firefox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instalei aqui: &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/271&#34;&gt;ColorZilla&lt;/a&gt;, &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/539&#34;&gt;Measureit&lt;/a&gt;, &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/60&#34;&gt;Web Developer&lt;/a&gt;, &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/1320&#34;&gt;Gmail Manager&lt;/a&gt;, &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/39&#34;&gt;Mouse Gestures&lt;/a&gt; e &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/2410&#34;&gt;FoxMarks&lt;/a&gt;. Todas elas funcionaram sem problemas.&lt;/p&gt;

&lt;h3 id=&#34;cadastro-e-uso-dos-serviços-online&#34;&gt;Cadastro e uso dos Serviços Online&lt;/h3&gt;

&lt;p&gt;Achei um pouco complicado de cadastrar meus serviços online. Demorei para notar que eu tinha que entrar no site do serviço, me deslogar e logar novamente para ele detectar o login e assim cadastrar no Flock. Entretanto, depois disso, tudo foi bem transparente. A interface é bem acabada, mesmo assim achei tudo bem apertado no painel lateral. Talvez exista a possibilidade de customizar essa opção.&lt;/p&gt;

&lt;p&gt;Contudo, há muito o que melhorar com a interface para facilitar o uso de alguns serviços. Não descobri uma maneira fácil de dar Reply em mensagens do &lt;a href=&#34;http://twitter.com/diegoeis/&#34;&gt;Twitter&lt;/a&gt;, a não ser digitando na unha. Ele também não dá nenhuma pista de qual seja o apelido dos usuários. O que dificulta se você quer responder a mensagem do seu amigo.&lt;/p&gt;

&lt;p&gt;Já o uso do Flickr é sensacional desde as versões anteriores do Flock. Mesma coisa para o &lt;a href=&#34;http://del.icio.us/tableless&#34;&gt;Del.icio.us&lt;/a&gt; e outros serviços. Foi implementado também serviços como YouTube.&lt;/p&gt;

&lt;h3 id=&#34;outros-pontos&#34;&gt;Outros pontos&lt;/h3&gt;

&lt;p&gt;O visual geral do Flock, na minha opinião, é melhor que a do Firefox. E há suporte para a instalação de outros temas.&lt;/p&gt;

&lt;p&gt;Há uma parte que gostei muito chamada My World. Seria uma espécie de página onde você fica por dentro do seu &amp;#8220;profile&amp;#8221; do Flock. Confere suas contas de serviços, vê suas visitas e movimentações nos serviços cadastrados e etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;Gostei bastante também da interface de blogging. Integrei o Flock com o WordPress do Tableless. Ficou mais fácil blogar.&lt;/p&gt;

&lt;p&gt;Se você quiser testar o &lt;a href=&#34;http://flock.com/&#34;&gt;Flock&lt;/a&gt;, indico, pelo menos por agora. Vou dar mais pitaco sobre ele conforme vou usando pelo &lt;a href=&#34;http://twitter.com/diegoeis/&#34;&gt;meu Twitter&lt;/a&gt;.&lt;!-- technorati tags begin --&gt;&lt;/p&gt;

&lt;p style=&#34;font-size:10px;text-align:right;&#34;&gt;
  Tags: &lt;a rel=&#34;tag&#34; href=&#34;http://technorati.com/tag/flock&#34;&gt;flock&lt;/a&gt;, &lt;a rel=&#34;tag&#34; href=&#34;http://technorati.com/tag/browser&#34;&gt;browser&lt;/a&gt;, &lt;a rel=&#34;tag&#34; href=&#34;http://technorati.com/tag/%20web&#34;&gt; web&lt;/a&gt;, &lt;a rel=&#34;tag&#34; href=&#34;http://technorati.com/tag/%20desenvolvimeto%20web&#34;&gt; desenvolvimeto web&lt;/a&gt;, &lt;a rel=&#34;tag&#34; href=&#34;http://technorati.com/tag/%20navegadores&#34;&gt; navegadores&lt;/a&gt;, &lt;a rel=&#34;tag&#34; href=&#34;http://technorati.com/tag/%20internet&#34;&gt; internet&lt;/a&gt;
&lt;/p&gt;

&lt;!-- technorati tags end --&gt;
</description>
    </item>
    
    <item>
      <title>FAQ sobre Tableless</title>
      <link>http://tableless.com.br/faq/</link>
      <pubDate>Mon, 08 Aug 2005 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/faq/</guid>
      <description>

&lt;h3 id=&#34;o-que-são-os-web-standards&#34;&gt;O que são os Web Standards?&lt;/h3&gt;

&lt;p&gt;Imagine se cada eletrodoméstico usasse um tipo de tomada. E ao comprar um novo eletrodoméstico, você tivesse que adaptar uma tomada nova em sua casa. Imaginou o caos que seria? Felizmente existe um PADRÃO de tomadas para todos os aparelhos domésticos. Se comprarmos um aparelho de som, e então levarmos para outra cidade, estado ou país, a tomada será a mesma e seu aparelho funcionará. Percebemos então o verdadeiro valor dos padrões. Na Web não é diferente, também é necessário haver padrões. Por isso que projetos como &lt;a href=&#34;http://www.webstandards.org/about/mission/pt/&#34;&gt;WaSP&lt;/a&gt; (Web Standards Project) surgiram no auge da desordem no desenvolvimento do sites. Eles foram um dos que impulsionaram a popularização dos Web Standards, fazendo a &lt;a href=&#34;http://www.w3.org/&#34;&gt;W3C&lt;/a&gt; (World Wide Web Consortium) ser conhecida por todos como uma autoridade e então ajudando-a a cumprir com seu papel.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://www.w3.org/&#34; title=&#34;World Wide Web Consortium&#34;&gt;W3C&lt;/a&gt; criou linguagens básicas de publicação de conteúdo para Web. Essas linguagens são chamadas de Web Standards (Padrões Web). HTML, XHTML, CSS, SVG, XML, XSLT, entre vários outros.&lt;/p&gt;

&lt;p&gt;Esses padrões hoje são estudados e felizmente os desenvolvedores estão aplicando em seus sites. Os desenvolvedores devem perceberem as incríveis vantagens que o desenvolvimento com os Padrões oferece, não só para a execução do trabalho, mas para a estruturação da web em si. Para a estruturação da Web do futuro, onde ninguém terá que garimpar em buscadores para conseguir a informação que se precisa, mas a informação estará aonde você estiver, andará com você aonde quer que for, e você terá acesso a ela sem barreiras, na hora que quiser, onde quiser, e usando o dispositivo que for.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-tableless-e-como-funciona-essa-metodologia&#34;&gt;O que é tableless e como funciona essa metodologia?&lt;/h3&gt;

&lt;p&gt;Primeiramente é necessário que entendamos um pouco do conceito dos Web Standards.&lt;/p&gt;

&lt;p&gt;A idéia original da Web, era que existisse um ambiente onde pessoas conseguissem trocar informações livremente, e que essas informações poderiam ser acessadas de diversos dispositivos. O &lt;a href=&#34;http://www.w3.org/&#34;&gt;W3C&lt;/a&gt; (World Wide Web Consortium) criou as linguagens básicas de publicação de conteúdo para Web, como por exemplo: HTML, CSS, SVG, XML, entre vários outros. Essas linguagens são chamadas de Web Standards (Padrões Web).&lt;/p&gt;

&lt;p&gt;Por este tempo, deu- se início a Guerra dos Browsers. Onde o Internet Explorer e o Netscape travavam uma briga para conseguir mais adeptos. Durante essa guerra, as linguagens do &lt;a href=&#34;http://www.w3.org/&#34;&gt;W3C&lt;/a&gt; eram ainda rascunhos. Então, os browsers não tinham um guia completo para se basearem e lançarem seus browsers com suporte a esses Padrões. Resultou que os fabricantes de browsers criaram seus próprios padrões. E foi aí que problema começou a crescer para o lado dos desenvolvedores e usuários. De um lado estava o desenvolvedor estudando as diferenças de cada browser, para assim poder escolher qual ele iria priorizar e qual ele iria ignorar. Do outro usuário, com o mesmo dilema. Se ele escolhesse “tal” browser, os sites que ele visitara poderiam não funcionar.&lt;/p&gt;

&lt;p&gt;Os usuários que tinham algum tipo de deficiência, como por exemplo auditiva ou visual, ficaram praticamente isolados do mundo digital, já que os desenvolvedores web tiveram que se adaptar a um certo tipo de browser, obedecendo suas peculiaridades.&lt;/p&gt;

&lt;p&gt;Durante essa época, desenvolver um site era um trabalho árduo levando os desenvolvedores escolherem apenas um browser e desenvolver apenas para esse browser. Era quase que insuportável tenta desenvolver um site que se adequasse às duas plataformas de browsers. Os trabalho de atualizar ou fazer manutenções eram enormes e despendiam de muito tempo e paciência.&lt;/p&gt;

&lt;p&gt;Foi por esse período que surgiram projetos como o &lt;a href=&#34;http://www.webstandards.org/about/mission/pt/&#34;&gt;WaSP&lt;/a&gt; (Web Standards Project), que é um movimento para difundir os Web Standards. Esse grupo teve um papel muito importante na divulgação dos Padrões. Eles conversaram com os fabricantes dos principais browsers, convencendo- os de fazerem browsers mais compatíveis com os Padrões. E isso deu certo&amp;#8230; Tanto que temos o Opera, Mozilla, e vários outros por aí. Hoje, o desenvolvedor tem mais liberdade de desenvolvimento do que a 5 anos atrás. Hoje, a visão dos fabricantes de browser mudou completamente, e se continuar assim, teremos uma web melhor em muito pouco tempo.&lt;/p&gt;

&lt;p&gt;Sabendo disso, podemos agora entender o que é Tableless.&lt;/p&gt;

&lt;p&gt;Comecemos pelo nome. O nome Tableless é um nome mais “publicitário” para se referir a sites que seguem os Padrões. Os sites Tableless não são construídos usando as famigeradas tables. Elas usam XHTML para apresentar a informação e as Folhas de Estilo (CSS) para formatar essa informação. Pelo motivo de as tables não serem usadas para a estruturação, essa metodologia se chama Tableless.&lt;/p&gt;

&lt;p&gt;Antes que você pense que as tables foram totalmente apagadas do mapa, eu explico: No movimento Web Standards, cada tag tem a sua função. Se você quer fazer um parágrafo, usa- se a tag &lt;p&gt;&amp;lt; /p&amp;gt;. Se quer fazer um título de primeiro nível, usa- se a tag &lt;h1&gt;&amp;lt; /h1&amp;gt;. Se você quer exibir dados tabulados, como por exemplo um calendário, ou ainda uma lista de produtos seguidos de nome, preço e tamanho, você usará as tables para exibir esses dados.&lt;/p&gt;

&lt;h3 id=&#34;qual-é-a-grande-diferença-entre-montar-um-site-nos-padrões-tradicionais-para-os-que-são-feitos-em&#34;&gt;Qual é a grande diferença entre montar um site nos padrões tradicionais para os que são feitos em&lt;/h3&gt;

&lt;p&gt;tableless?&lt;/p&gt;

&lt;p&gt;Essa pergunta é muito difícil de ser respondida porque as diferenças entre um método e outro são gritantes. Essas diferenças afetam todas as pessoas envolvidas no projeto: começando na equipe de desenvolvimento. Aquela briga tradicional entre designer e programador acaba. Eles começam a trabalhar juntos no mesmo projeto, sem um atrapalhar o trabalho do outro. O designer trabalhará sem tocar no código de programação, ficará apenas no código CSS, onde o programador não terá como estragar o layout do Designer. E dessa forma, com os dois trabalhando ao mesmo tempo, no mesmo projeto, o tempo de produção será diminuída.&lt;/p&gt;

&lt;p&gt;Inclui os donos do negócio, já que há diversas economias no desenvolvimento do projeto e também em manutenções posteriores, bem como consumo de banda que é tão preciosa hoje em dia. E finalizando no usuário, que agora pode acessar o site usando a plataforma e o browser que preferir. Poderá acessar de seu Mac ou do seu Linux, usando Opera ou Konqueror. Ele terá controle.&lt;/p&gt;

&lt;h3 id=&#34;no-que-diz-respeito-ao-uso-da-metodologia-tableless-quais-são-as-principais-vantagens-com&#34;&gt;No que diz respeito ao uso da metodologia tableless, quais são as principais vantagens com&lt;/h3&gt;

&lt;p&gt;relação a atualizações de design?&lt;/p&gt;

&lt;p&gt;Assunto interessantíssimo. Suponhamos a seguinte situação:&lt;/p&gt;

&lt;p&gt;Final daquele grande projeto. Cliente grande, site gigantesco. Várias aprovações de layout durante o caminho. Tudo acertado e pronto para ir pro ar. Faltando apenas alguns detalhes, o chefe chama o designer em um canto e diz: &amp;#8211; O cliente acabou de ligar; ele estava analisando o site e pediu que todos os títulos mudassem de cor. Ele não gostou do azul, gostaria de verde mesmo.&lt;/p&gt;

&lt;p&gt;O designer, com um olhar de desgosto, volta para sua cadeira e fica pensando em apenas uma coisa: &amp;#8211; Por onde vou começar?&lt;/p&gt;

&lt;p&gt;Ele fez o site em um editor visual, os títulos do site estão sendo formatados nos próprios documentos, direto no código. A única saída seria abrir documento por documento e substituir título por título.&lt;/p&gt;

&lt;p&gt;Creio que se isso não aconteceu com você, algo parecido deve ter acontecido. Se o site acima tivesse sido feito seguindo os padrões, usando CSS para sua formatação, e o código fosse um XHTML bem Semântico, o trabalho disso seria quase nulo. O designer (ou o responsável pelo código CSS) mudaria apenas uma linha.&lt;/p&gt;

&lt;p&gt;E se, o caso não fosse para mudar apenas um título, mas mudar o layout do site, como faria? Se o site foi feito do jeito convencional, provavelmente seria da seguinte forma: O designer faria um novo layout em algum programa de imagem, implementaria este layout passando para HTML, e o programador teria que programar novamente em cima deste novo layout. Mas, se o site foi feito seguindo os Web Standards, bastava o designer escrever outro arquivo CSS, e depois de pronto, substituir os arquivos.&lt;/p&gt;

&lt;p&gt;Despenderia de tempo apenas de uma pessoa. A programação não seria afetada, e o todo o site funcionaria perfeitamente, já que foi apenas o arquivo de formatação que foi substituído. Passe um pouco de tempo visitando o site: &lt;a href=&#34;http://www.csszengarden.com/&#34;&gt;CSS Zen Garden&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Esse layout mostra como isso funciona. O criador deste site disponibilizou o arquivo HTML para download. Os interessados baixam esse arquivo, e fazem um CSS em cima dele e depois mandam enviam de volta. Os interessados tem apenas o direito de criar um CSS e se quiser usar imagens para compor o layout, eles não podem mudar o código HTML que o criador do site disponibilizou.&lt;/p&gt;

&lt;p&gt;Há uma infinidade de layouts, bonitos, funcionais e compatíveis&amp;#8230; Mudando apenas UM arquivo. Facilidade de manutenção ou renovação de layout, economia de tempo, trabalho e paciência.&lt;/p&gt;

&lt;h3 id=&#34;com-relação-à-acessibilidade-quais-as-vantagens-que-um-site-feito-em-tableless-proporciona-para&#34;&gt;Com relação à acessibilidade, quais as vantagens que um site feito em tableless proporciona para&lt;/h3&gt;

&lt;p&gt;usuários com necessidades especiais?&lt;/p&gt;

&lt;p&gt;Os usuários com necessidades especiais ganham mais facilidade de navegar no site.&lt;/p&gt;

&lt;p&gt;Imagine um deficiente visual. Ele usa um browser que ao visitar um site, le todo o conteúdo mostrado na tela.&lt;/p&gt;

&lt;p&gt;Os sites convencionais são feitos, em sua maioria com editores visuais. E em todos são usados os famosos spacer.gif. Para quem não sabe o que é isso, eu explico: São gifs transparentes de 1px que servem para dar espaçamento entre celular ou outro objeto da página. Esses spacer.gif normalmente são colocados apenas a tag relacionada a imagem, sem nenhum texto alternativo. Isso faz com que alguns sintetizadores leiam o nome da imagem. Então, suponha que você tem uma célula separada 20px e que essa distância foi feita com os spacer.gif.&lt;/p&gt;

&lt;p&gt;O visitante terá que ouvir ou apertar uma tecla 20 vezes para passar essas imagens que são extremamente inúteis para ele. Isso transforma a navegação deles muito, muito cansativa. São coisas bem pequenas que fazem a navegação dessas pessoas valerem a pena.&lt;/p&gt;

&lt;p&gt;Existem hoje muitos sistemas que analisam sites para checar se estão de acordo com as guias de acessibilidade. Esses são alguns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mardiros.net/bobby-accessibility-tool.html&#34;&gt;Bobby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[### O que são os Web Standards?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagine se cada eletrodoméstico usasse um tipo de tomada. E ao comprar um novo eletrodoméstico, você tivesse que adaptar uma tomada nova em sua casa. Imaginou o caos que seria? Felizmente existe um PADRÃO de tomadas para todos os aparelhos domésticos. Se comprarmos um aparelho de som, e então levarmos para outra cidade, estado ou país, a tomada será a mesma e seu aparelho funcionará. Percebemos então o verdadeiro valor dos padrões. Na Web não é diferente, também é necessário haver padrões. Por isso que projetos como &lt;a href=&#34;http://www.webstandards.org/about/mission/pt/&#34;&gt;WaSP&lt;/a&gt; (Web Standards Project) surgiram no auge da desordem no desenvolvimento do sites. Eles foram um dos que impulsionaram a popularização dos Web Standards, fazendo a &lt;a href=&#34;http://www.w3.org/&#34;&gt;W3C&lt;/a&gt; (World Wide Web Consortium) ser conhecida por todos como uma autoridade e então ajudando-a a cumprir com seu papel.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://www.w3.org/&#34; title=&#34;World Wide Web Consortium&#34;&gt;W3C&lt;/a&gt; criou linguagens básicas de publicação de conteúdo para Web. Essas linguagens são chamadas de Web Standards (Padrões Web). HTML, XHTML, CSS, SVG, XML, XSLT, entre vários outros.&lt;/p&gt;

&lt;p&gt;Esses padrões hoje são estudados e felizmente os desenvolvedores estão aplicando em seus sites. Os desenvolvedores devem perceberem as incríveis vantagens que o desenvolvimento com os Padrões oferece, não só para a execução do trabalho, mas para a estruturação da web em si. Para a estruturação da Web do futuro, onde ninguém terá que garimpar em buscadores para conseguir a informação que se precisa, mas a informação estará aonde você estiver, andará com você aonde quer que for, e você terá acesso a ela sem barreiras, na hora que quiser, onde quiser, e usando o dispositivo que for.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-tableless-e-como-funciona-essa-metodologia-1&#34;&gt;O que é tableless e como funciona essa metodologia?&lt;/h3&gt;

&lt;p&gt;Primeiramente é necessário que entendamos um pouco do conceito dos Web Standards.&lt;/p&gt;

&lt;p&gt;A idéia original da Web, era que existisse um ambiente onde pessoas conseguissem trocar informações livremente, e que essas informações poderiam ser acessadas de diversos dispositivos. O &lt;a href=&#34;http://www.w3.org/&#34;&gt;W3C&lt;/a&gt; (World Wide Web Consortium) criou as linguagens básicas de publicação de conteúdo para Web, como por exemplo: HTML, CSS, SVG, XML, entre vários outros. Essas linguagens são chamadas de Web Standards (Padrões Web).&lt;/p&gt;

&lt;p&gt;Por este tempo, deu- se início a Guerra dos Browsers. Onde o Internet Explorer e o Netscape travavam uma briga para conseguir mais adeptos. Durante essa guerra, as linguagens do &lt;a href=&#34;http://www.w3.org/&#34;&gt;W3C&lt;/a&gt; eram ainda rascunhos. Então, os browsers não tinham um guia completo para se basearem e lançarem seus browsers com suporte a esses Padrões. Resultou que os fabricantes de browsers criaram seus próprios padrões. E foi aí que problema começou a crescer para o lado dos desenvolvedores e usuários. De um lado estava o desenvolvedor estudando as diferenças de cada browser, para assim poder escolher qual ele iria priorizar e qual ele iria ignorar. Do outro usuário, com o mesmo dilema. Se ele escolhesse “tal” browser, os sites que ele visitara poderiam não funcionar.&lt;/p&gt;

&lt;p&gt;Os usuários que tinham algum tipo de deficiência, como por exemplo auditiva ou visual, ficaram praticamente isolados do mundo digital, já que os desenvolvedores web tiveram que se adaptar a um certo tipo de browser, obedecendo suas peculiaridades.&lt;/p&gt;

&lt;p&gt;Durante essa época, desenvolver um site era um trabalho árduo levando os desenvolvedores escolherem apenas um browser e desenvolver apenas para esse browser. Era quase que insuportável tenta desenvolver um site que se adequasse às duas plataformas de browsers. Os trabalho de atualizar ou fazer manutenções eram enormes e despendiam de muito tempo e paciência.&lt;/p&gt;

&lt;p&gt;Foi por esse período que surgiram projetos como o &lt;a href=&#34;http://www.webstandards.org/about/mission/pt/&#34;&gt;WaSP&lt;/a&gt; (Web Standards Project), que é um movimento para difundir os Web Standards. Esse grupo teve um papel muito importante na divulgação dos Padrões. Eles conversaram com os fabricantes dos principais browsers, convencendo- os de fazerem browsers mais compatíveis com os Padrões. E isso deu certo&amp;#8230; Tanto que temos o Opera, Mozilla, e vários outros por aí. Hoje, o desenvolvedor tem mais liberdade de desenvolvimento do que a 5 anos atrás. Hoje, a visão dos fabricantes de browser mudou completamente, e se continuar assim, teremos uma web melhor em muito pouco tempo.&lt;/p&gt;

&lt;p&gt;Sabendo disso, podemos agora entender o que é Tableless.&lt;/p&gt;

&lt;p&gt;Comecemos pelo nome. O nome Tableless é um nome mais “publicitário” para se referir a sites que seguem os Padrões. Os sites Tableless não são construídos usando as famigeradas tables. Elas usam XHTML para apresentar a informação e as Folhas de Estilo (CSS) para formatar essa informação. Pelo motivo de as tables não serem usadas para a estruturação, essa metodologia se chama Tableless.&lt;/p&gt;

&lt;p&gt;Antes que você pense que as tables foram totalmente apagadas do mapa, eu explico: No movimento Web Standards, cada tag tem a sua função. Se você quer fazer um parágrafo, usa- se a tag &lt;p&gt;&amp;lt; /p&amp;gt;. Se quer fazer um título de primeiro nível, usa- se a tag &lt;h1&gt;&amp;lt; /h1&amp;gt;. Se você quer exibir dados tabulados, como por exemplo um calendário, ou ainda uma lista de produtos seguidos de nome, preço e tamanho, você usará as tables para exibir esses dados.&lt;/p&gt;

&lt;h3 id=&#34;qual-é-a-grande-diferença-entre-montar-um-site-nos-padrões-tradicionais-para-os-que-são-feitos-em-1&#34;&gt;Qual é a grande diferença entre montar um site nos padrões tradicionais para os que são feitos em&lt;/h3&gt;

&lt;p&gt;tableless?&lt;/p&gt;

&lt;p&gt;Essa pergunta é muito difícil de ser respondida porque as diferenças entre um método e outro são gritantes. Essas diferenças afetam todas as pessoas envolvidas no projeto: começando na equipe de desenvolvimento. Aquela briga tradicional entre designer e programador acaba. Eles começam a trabalhar juntos no mesmo projeto, sem um atrapalhar o trabalho do outro. O designer trabalhará sem tocar no código de programação, ficará apenas no código CSS, onde o programador não terá como estragar o layout do Designer. E dessa forma, com os dois trabalhando ao mesmo tempo, no mesmo projeto, o tempo de produção será diminuída.&lt;/p&gt;

&lt;p&gt;Inclui os donos do negócio, já que há diversas economias no desenvolvimento do projeto e também em manutenções posteriores, bem como consumo de banda que é tão preciosa hoje em dia. E finalizando no usuário, que agora pode acessar o site usando a plataforma e o browser que preferir. Poderá acessar de seu Mac ou do seu Linux, usando Opera ou Konqueror. Ele terá controle.&lt;/p&gt;

&lt;h3 id=&#34;no-que-diz-respeito-ao-uso-da-metodologia-tableless-quais-são-as-principais-vantagens-com-1&#34;&gt;No que diz respeito ao uso da metodologia tableless, quais são as principais vantagens com&lt;/h3&gt;

&lt;p&gt;relação a atualizações de design?&lt;/p&gt;

&lt;p&gt;Assunto interessantíssimo. Suponhamos a seguinte situação:&lt;/p&gt;

&lt;p&gt;Final daquele grande projeto. Cliente grande, site gigantesco. Várias aprovações de layout durante o caminho. Tudo acertado e pronto para ir pro ar. Faltando apenas alguns detalhes, o chefe chama o designer em um canto e diz: &amp;#8211; O cliente acabou de ligar; ele estava analisando o site e pediu que todos os títulos mudassem de cor. Ele não gostou do azul, gostaria de verde mesmo.&lt;/p&gt;

&lt;p&gt;O designer, com um olhar de desgosto, volta para sua cadeira e fica pensando em apenas uma coisa: &amp;#8211; Por onde vou começar?&lt;/p&gt;

&lt;p&gt;Ele fez o site em um editor visual, os títulos do site estão sendo formatados nos próprios documentos, direto no código. A única saída seria abrir documento por documento e substituir título por título.&lt;/p&gt;

&lt;p&gt;Creio que se isso não aconteceu com você, algo parecido deve ter acontecido. Se o site acima tivesse sido feito seguindo os padrões, usando CSS para sua formatação, e o código fosse um XHTML bem Semântico, o trabalho disso seria quase nulo. O designer (ou o responsável pelo código CSS) mudaria apenas uma linha.&lt;/p&gt;

&lt;p&gt;E se, o caso não fosse para mudar apenas um título, mas mudar o layout do site, como faria? Se o site foi feito do jeito convencional, provavelmente seria da seguinte forma: O designer faria um novo layout em algum programa de imagem, implementaria este layout passando para HTML, e o programador teria que programar novamente em cima deste novo layout. Mas, se o site foi feito seguindo os Web Standards, bastava o designer escrever outro arquivo CSS, e depois de pronto, substituir os arquivos.&lt;/p&gt;

&lt;p&gt;Despenderia de tempo apenas de uma pessoa. A programação não seria afetada, e o todo o site funcionaria perfeitamente, já que foi apenas o arquivo de formatação que foi substituído. Passe um pouco de tempo visitando o site: &lt;a href=&#34;http://www.csszengarden.com/&#34;&gt;CSS Zen Garden&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Esse layout mostra como isso funciona. O criador deste site disponibilizou o arquivo HTML para download. Os interessados baixam esse arquivo, e fazem um CSS em cima dele e depois mandam enviam de volta. Os interessados tem apenas o direito de criar um CSS e se quiser usar imagens para compor o layout, eles não podem mudar o código HTML que o criador do site disponibilizou.&lt;/p&gt;

&lt;p&gt;Há uma infinidade de layouts, bonitos, funcionais e compatíveis&amp;#8230; Mudando apenas UM arquivo. Facilidade de manutenção ou renovação de layout, economia de tempo, trabalho e paciência.&lt;/p&gt;

&lt;h3 id=&#34;com-relação-à-acessibilidade-quais-as-vantagens-que-um-site-feito-em-tableless-proporciona-para-1&#34;&gt;Com relação à acessibilidade, quais as vantagens que um site feito em tableless proporciona para&lt;/h3&gt;

&lt;p&gt;usuários com necessidades especiais?&lt;/p&gt;

&lt;p&gt;Os usuários com necessidades especiais ganham mais facilidade de navegar no site.&lt;/p&gt;

&lt;p&gt;Imagine um deficiente visual. Ele usa um browser que ao visitar um site, le todo o conteúdo mostrado na tela.&lt;/p&gt;

&lt;p&gt;Os sites convencionais são feitos, em sua maioria com editores visuais. E em todos são usados os famosos spacer.gif. Para quem não sabe o que é isso, eu explico: São gifs transparentes de 1px que servem para dar espaçamento entre celular ou outro objeto da página. Esses spacer.gif normalmente são colocados apenas a tag relacionada a imagem, sem nenhum texto alternativo. Isso faz com que alguns sintetizadores leiam o nome da imagem. Então, suponha que você tem uma célula separada 20px e que essa distância foi feita com os spacer.gif.&lt;/p&gt;

&lt;p&gt;O visitante terá que ouvir ou apertar uma tecla 20 vezes para passar essas imagens que são extremamente inúteis para ele. Isso transforma a navegação deles muito, muito cansativa. São coisas bem pequenas que fazem a navegação dessas pessoas valerem a pena.&lt;/p&gt;

&lt;p&gt;Existem hoje muitos sistemas que analisam sites para checar se estão de acordo com as guias de acessibilidade. Esses são alguns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mardiros.net/bobby-accessibility-tool.html&#34;&gt;Bobby&lt;/a&gt;
*]&lt;a href=&#34;http://www.st-andrews.ac.uk/its/web/accessibility/cynthia_validator.shtml&#34;&gt;6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www1.acessobrasil.org.br/dasilva/dasilva.html&#34;&gt;Da Silva&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lembrando que o site não precisa ser Tableless para se aplicar as &lt;a href=&#34;http://www.w3.org/WAI/&#34;&gt;Guias de Acessibilidade&lt;/a&gt;. Mas se o site seguir os padrões, com certeza a experiência de se navegar vai ser muito melhor.&lt;/p&gt;

&lt;h3 id=&#34;atualmente-existe-no-mercado-alguma-resistência-em-se-optar-por-trabalhar-com-a-metodologia&#34;&gt;Atualmente, existe no mercado alguma resistência em se optar por trabalhar com a metodologia&lt;/h3&gt;

&lt;p&gt;tableless? Por quê?&lt;/p&gt;

&lt;p&gt;Existia muito, hoje a resistência é menor.&lt;/p&gt;

&lt;p&gt;Os desenvolvedores ainda tem medo do novo. Muitos pensam:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Preciso aprender tudo outra vez?! Tenho que largar o editor visual? Tenho que fazer o código na unha em vez de usar o editor visual que é tão mais fácil, rápido e prático?&lt;/p&gt;

&lt;p&gt;Ou, muitas vezes o desenvolvedor já se convenceu, quer mudar, mas esta decisão não depende dele somente, e sim do Chefe. Parece brincadeira, mas já vi muitos casos do chefe falar:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Você quer dizer que os sites que você vai fazer com essa nova metodologia não vai funcionar no Netscape 4?&lt;/p&gt;

&lt;p&gt;Outros dizem que não vale a pena dedicar mais tempo aprendendo tudo de novo só para fazer sites funcionarem em outros browsers que não sejam Internet Explorer:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Internet Explorer domina 90% do mercado, vou querer fazer para os outros 10%, porque?!&lt;/p&gt;

&lt;p&gt;Hoje, felizmente esses comentários estão desaparecendo, e finalmente estão percebendo todas as vantagens que um site que segue os padrões pode trazer. No começo, uma desculpa bastante usada era que: Fazer sites usando os Padrões não servem para criar Portais, como Terra, UOL, AOL, e etc&amp;#8230; Isso já é passado, mesmo porque naquele tempo nenhum era Tableless. A equipe do Terra foi treinada pela empresa em que trabalho (visie.com.br), e o site deles é Tableless. O ganho que tiveram com economia de banda foi espetacular e a facilidade de manutenção também foi enorme.&lt;/p&gt;

&lt;p&gt;Outro caso interessante é o site da &lt;a href=&#34;http://espn.com&#34;&gt;ESPN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aquele site é enorme. Depois que migraram o site para os padrões estima- se que a economia de banda seria de 730 terabytes no ano. A Wired conseguiu uma redução de tamanho das páginas de 54%. Diante de números tão expressivos, é difícil contestar de que não vale a pena. E se não valesse, porque sites como: Lee Jeans, Fast Company, Macromedia, Blogger, Chevrolet, Terra, Quark, e outros migraram para os Web Standards?&lt;/p&gt;

&lt;p&gt;Como a folha de estilo (CSS) favorece o webdesigner no processo criativo de um site desde a criação até a montagem? Controle.&lt;/p&gt;

&lt;p&gt;CSS favorece um grande controle para o designer. Tanto para a criação quanto para a modificação do layout. Usando CSS, o designer não precisa criar inúmeros gifs transparentes para controlar medidas e distâncias. Com CSS ele tem total controle na manipulação de margens, bordas, distâncias, posição, tamanho, e etc. Formatação de texto também uma das vantagens que é muito flexível. O designer pode aumentar o tamanho das linhas dos parágrafos, capitalizar, fazer caixa alta/baixa, e etc&amp;#8230; CSS é como se fosse uma ferramenta para o designer. Assim como Photoshop, Illustrator, ou outro programa visual.&lt;/p&gt;

&lt;h3 id=&#34;quais-são-os-maiores-problemas-enfrentados-por-quem-opta-por-trabalhar-com-a-metodologia&#34;&gt;Quais são os maiores problemas enfrentados por quem opta por trabalhar com a metodologia&lt;/h3&gt;

&lt;p&gt;tableless? (digo a respeito à compatibilidade com determinados navegadores).&lt;/p&gt;

&lt;p&gt;Atualmente poucos browsers causam problemas ao desenvolvedor. A maioria dos browsers atuais tem um bom suporte aos padrões, o que permite que os desenvolvedores façam sites sem muitos problemas.&lt;/p&gt;

&lt;p&gt;Acho que o que dará mais problemas futuramente, serão os browsers de dispositivos móveis. Mas temos o consolo de que essa fatia do mercado, está começando a caminhar mais rapidamente&amp;#8230; isso promete.&lt;/p&gt;

&lt;h3 id=&#34;como-sites-feitos-em-tableless-são-visualizados-nos-dispositivos-móveis&#34;&gt;Como sites feitos em tableless são visualizados nos dispositivos móveis?&lt;/h3&gt;

&lt;p&gt;São visualizados com a melhor qualidade possível para esse dispositivo.&lt;/p&gt;

&lt;p&gt;Claro, se você espera ver um site em um dispositivo móvel do mesmo jeito que vê num PC, é melhor rever seus conceitos. E se você pensa que só porque fez um site seguindo os Web Standards, ele vai ser visto com a melhor qualidade em “mobiles” (dispositivos móveis), também tire o cavalinho da chuva. Lembre- se que existem sites Tableless mal feitos, isso é claro.&lt;/p&gt;

&lt;p&gt;Temos que ter em mente que usuários desses dispositivos tem algumas dificuldades, como por exemplo barra de rolagem. Dá um desanimo quando você abre um site num handheld, e então aquela imponente barra de rolagem horizontal aparece. Quando você é obrigado a rolar a barra toda vez que precisa navegar no menu.&lt;/p&gt;

&lt;p&gt;No CSS existe uma facilidade enorme, chama-se Media Types. As Medias Types te permitem fazer um CSS exclusivamente para um tipo e Media. Como por exemplo Impressão ou até HandHelds (Essas são as mais comuns, existem outras medias, como por exemplo para leitores de telas para deficientes visuais ou outra que é exclusivamente para impressoras que imprimem em braile. Essas medias ainda não estão totalmente implementadas, por isso não são muito comuns.) As Medias Types funcionam da seguinte forma: se você quer que seu site tenha letras grandes na hora da impressão&amp;#8230; Vocês simplesmente fará um arquivo CSS para impressão, que será usado automaticamente quando o visitante tentar imprimir uma página no seu site.&lt;/p&gt;

&lt;p&gt;Com a Media Type para HandHelds não é diferente. Você cria um CSS exclusivamente para os dispositivos móveis. Seu site usará a mesma estrutura XHTML para qualquer media, o que muda é apenas o arquivo CSS. Essa é a facilidade que o CSS dá em relação a isso. Mas o desenvolvedor deve ter bom senso, e estudar um bocado esse mundo que é tão interessante e está se aproximando da popularidade tão rápido.&lt;/p&gt;

&lt;h3 id=&#34;quais-são-as-vantagens-proporcionadas-pelo-fato-de-o-conteúdo-da-página-estar-separado-da&#34;&gt;Quais são as vantagens proporcionadas pelo fato de o conteúdo da página estar separado da&lt;/h3&gt;

&lt;p&gt;formatação (CSS)?&lt;/p&gt;

&lt;p&gt;Vantagens enormes, para desenvolvedores e para usuário.&lt;/p&gt;

&lt;p&gt;As vantagens ligadas à parte dos desenvolvedores estão na facilidade de manutenção e na briga entre designers e programadores. Na facilidade de manutenção, o desenvolvedor terá uma flexibilidade tremenda na hora de corrigir algum erro ou se simplesmente quiser mudar todo o layout do site. Se o designer quiser mudar o layout do site, ele simplesmente terá o trabalho de escrever outro código CSS formatando o site com o novo visual, e depois apenas substituir os arquivos. Sem trabalho de ter que refazer o código XHTML e sem precisar mexer no código do programador.&lt;/p&gt;

&lt;p&gt;A briga entre o designer e o programador termina por que eles não atrapalham mais o trabalho um do outro. Nem o designer estraga o código do programador e nem o programador estraga o layout do designer.&lt;/p&gt;

&lt;p&gt;Há muitas maneiras de os designers e programadores trabalharem harmoniosamente. Como por exemplo: no início do desenvolvimento, o designer e o programador podem sentar juntos e então criar a estrutura do documento, ou seja, o código XHTML do site. Aqui eles farão um código semântico, legível. Feita essa parte, os dois trabalharão em cima deste XHTML separadamente, cada um com sua responsabilidade. O programador com seus códigos client &amp;#8211; side, banco de dados e etc&amp;#8230; Já o designer ou o responsável por isso, formatará o visual do site, usando CSS. Com o XHTML estruturado semanticamente, o designer não terá grandes problemas ao aplicar estilos às tags.&lt;/p&gt;

&lt;p&gt;Outra vantagem que interessa a sites grandes (como portais) é a diminuição do consumo de banda. Há uma queda enorme no número de linhas de código, já que tags desnecessárias foram totalmente excluídas e a separação de informação (XHTML) e formatação (CSS) é praticada. O fator “tamanho” é bastante importante, pois se o tamanho do site diminui, o consumo de banda diminui; logo, os gastos excessivos por causa do estouro de banda são imediatamente reduzidos.&lt;/p&gt;

&lt;p&gt;Já o lado do usuário ganha uma grande vantagem: flexibilidade e controle. O usuário ganha a liberdade de escolher qual dispositivo, qual plataforma e por fim, qual browser ele irá utilizar para visualizar seus sites. Um usuário por exemplo pode utilizar Mac e navegar com Safari, Firefox ou até mesmo Internet Explorer. Ou utilizar Linux e navegar com Konqueror, Galeon ou Opera. Se preferir, o visitante pode estar usando algum dispositivo móvel como um PocketPC com Windows Mobile e visitar o site utilizando o Internet Explorer.&lt;/p&gt;

&lt;p&gt;Como você já percebeu, há uma variação interminável de plataformas e dispositivos. Isso só tende a aumentar. Esse é o caminho que a web deve percorrer. Liberdade para troca de informações, independente do dispositivo utilizado para isso. É isso que o usuário espera.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revista do Linux</title>
      <link>http://tableless.com.br/revista_do_linux/</link>
      <pubDate>Tue, 17 Jun 2003 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/revista_do_linux/</guid>
      <description>&lt;p&gt;Sou leitor assíduo da &lt;a href=&#34;http://www.revistadolinux.com.br/&#34;&gt;Revista do Linux&lt;/a&gt;. Fiquei muito surpreso, e contente, quando comecei a ler a edição desse mês e encontrei, na página 7, uma nota sobre o desenvolvimento tableless, com link para o &lt;a href=&#34;http://tableless.com.br&#34;&gt;Tableless.com.br&lt;/a&gt;, o nome do &lt;a href=&#34;http://eyesmiles.kit.net&#34;&gt;Diego&lt;/a&gt; e o meu. Obrigado ao pessoal da Revista do Linux pela força. Um viva multiplataforma!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>