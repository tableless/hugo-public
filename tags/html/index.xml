<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/html/index.xml</link>
    <description>Recent content in Html on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/html/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Crie sites em questão de minutos com o Pingendo</title>
      <link>https://tableless.github.io/hugo-public/crie-sites-em-questao-de-minutos-com-o-pingendo/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/crie-sites-em-questao-de-minutos-com-o-pingendo/</guid>
      <description>

&lt;p&gt;Sem dúvidas, o Bootstrap é uma das frameworks mais utilizadas ultimamente, porém, para algumas pessoas, ainda é meio complicado lidar com os códigos, sejam eles HTML, CSS ou JavaScript.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-pingendo&#34;&gt;O que é o Pingendo?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pingendo.com/&#34;&gt;Pingendo&lt;/a&gt; é um programa de interface simples e de fácil uso. O Pingendo é um criador de sites em Bootstrap 3 que permite a criação de websites de maneira simples e rápida.&lt;/p&gt;

&lt;h2 id=&#34;drag-and-drop&#34;&gt;Drag and drop&lt;/h2&gt;

&lt;p&gt;O programa usa um modo muito popular em criadores de sites online como Wix, Weebly, etc. É só arrastar e soltar os elementos desejados dentro da área do site e pronto, a mágica está feita.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mGmv44Y.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;imagens&#34;&gt;Imagens&lt;/h2&gt;

&lt;p&gt;Com o Pingendo você tem a seu dispor uma ampla quantidade de imagens livres de direitos autorais e com altíssima qualidade vindas direto do &lt;a href=&#34;https://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NMxtVad.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;fontes&#34;&gt;Fontes&lt;/h2&gt;

&lt;p&gt;A alteração das fontes pode ser feita facilmente através do menu lateral do programa. As fontes são carregadas diretamente do &lt;a href=&#34;https://fonts.google.com/&#34;&gt;Google Fonts&lt;/a&gt;, um dos mais completos banco de dados de fontes da internet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9RGXujM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;cores&#34;&gt;Cores&lt;/h2&gt;

&lt;p&gt;A alteração das cores do tema também podem ser alteradas através do menu lateral, basta escolher as que mais lhe agradam.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/68jKTOb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;responsividade&#34;&gt;Responsividade&lt;/h2&gt;

&lt;p&gt;O Pingendo permite a visualização do seu projeto em telas de diversos tamanhos. Facilitando assim o teste de responsividade do seu website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dCHV33W.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;código&#34;&gt;Código&lt;/h2&gt;

&lt;p&gt;Se você possuí alguma experiencia, mesmo que mínima, em HTML e/ou CSS, pode realizar alterações direto do programa e velas sendo aplicadas em tempo real.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3Fv69GJ.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pingendo está disponível para as plataformas Mac, Windows e Linux no site &lt;a href=&#34;https://pingendo.com/&#34;&gt;www.pingendo.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 — Trabalhando com Múltiplas imagens background-images</title>
      <link>https://tableless.github.io/hugo-public/css3-trabalhando-com-multiplas-imagens-background-images/</link>
      <pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-trabalhando-com-multiplas-imagens-background-images/</guid>
      <description>

&lt;p class=&#34;graf--p&#34;&gt;
  Quem nunca se deparou com um layout com múltiplas imagens “sobrepostas” ou mesmo com títulos ou parágrafos que precisavam ficar suspensos sobre múltiplas imagens de fundo? Essa semana me deparei com o mesmo problema.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Com &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;CSS3&#34; href=&#34;https://developer.mozilla.org/en/CSS/CSS3&#34;&gt;CSS3&lt;/a&gt;, você pode aplicar aos elementos múltiplas imagens sobrepostas como plano de fundo. Sem a utilização do Z-index! É isso mesmo, “necas de pitibiriba” de Z-index.
&lt;/p&gt;

&lt;h2 id=&#34;velho-dilema-de-sobrepor-imagens-com-div-s-com-z-index-graf-h4&#34;&gt;Velho dilema de sobrepor imagens com div’s com Z-index… {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  A primeira solução que vem à cabeça é o velho e bom “Z-index”, Veja um exemplo de implementação:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;red&#34;&amp;gt;Red&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;green&#34;&amp;gt;Green&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span class=&#34;blue&#34;&amp;gt;Blue&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.red, .green, .blue {
    color: #fff;
    display: block;
    line-height: 100px;
    position: absolute;
    text-align: center;
    width: 100px;
}
.red {
    background: red;
    left: 20px;
    top: 20px;
    z-index: 0;
    opacity:0.5;
}
.green {
    background: green;
    left: 60px;
    top: 60px;
    z-index: 1;
    opacity:0.6;
}
.blue {
    background: blue;
    left: 100px;
    top: 100px;
    z-index: 2;
    opacity:0.7;
}
body {
    color: #777;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/grvvLw/&#34;&gt;Z-index&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;funciona-em-class-markup-em-markup-h4-em-sim-em-mas-espere-um-momento-essa-não-é-a-única-solução-graf-h4&#34;&gt;Funciona?!… &lt;em class=&#34;markup--em markup--h4-em&#34;&gt;SIM!&lt;/em&gt; Mas espere um momento, essa não é a única solução… {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  … Você já tava pensando num “workaround” safadinho, a mão da gambiarra chega a tremer nessas horas, mas nada de programação orientada a “Go-Horse”, hoje em dia temos “solucionática” pra quase tudo hehe…
&lt;/p&gt;

&lt;div style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*pAiFtxYHdjg4-HP6e46wZA.gif&#34; alt=&#34;www.gohorseprocess.com.br/extreme-go-horse-(xgh)&#34; width=&#34;500&#34; height=&#34;374&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    www.gohorseprocess.com.br/extreme-go-horse-(xgh)
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;conhecendo-as-propriedades-css-do-background-graf-h4&#34;&gt;Conhecendo as propriedades CSS do Background: {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;pre&gt;background-color.........define a cor do fundo;
background-image.........define uma imagem de fundo;
background-repeat........define a maneira como a imagem de fundo é posicionada;
background-attachment....define se a imagem de fundo &#34;rola&#34; ou não com a tela;
background-position......define como e onde a imagem de fundo é posicionada;
background-clip..........define a área do box onde a imagem de fundo é aplicada;
background-origin........define a posição de origem da imagem no box;
background-size..........define as dimensões da imagem no box;
background...............maneira abreviada para declarar todas as propriedades anteriores;&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  O nosso grande mestre &lt;a class=&#34;markup--user markup--p-user&#34; href=&#34;https://medium.com/u/addb7196c9b9&#34;&gt;Maurício Samy Silva&lt;/a&gt; #Maujor explica melhor as aplicações das propriedades &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&#34; rel=&#34;nofollow&#34;&gt;http://maujor.com/tutorial/propriedade-css-para-estilizacao-de-background.php&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Agora que conhecemos suas propriedades e características… agora vamos ver como o “background-image” funciona para entendermos nosso horizonte de possibilidades:
&lt;/p&gt;

&lt;h2 id=&#34;background-image-vs-z-index-a-batalha-graf-h4&#34;&gt;Background-image VS Z-index — A BATALHA: {.graf&amp;ndash;h4}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando trabalhamos 2 ou 3 elementos (sejam &lt;img&gt;, &lt;div&gt;, &lt;etc…&gt;) temos um controle até tolerável, mas… quando utilizamos 6, 10 ou mais elementos numa mesma div ou aninhamento próximo, o z-index começa a se tornar “linguiçento” demais e somos obrigados a utilizar mais classes e ids para organizarmos nosso CSS, pensando nisso que escrevi esse post!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;em&gt;Às vezes não necessariamente queremos ou podemos utilizar o z-index.&lt;/em&gt;
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Sem contar que quebramos o conceito de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/oocss-smacss-bem-dry-css-afinal-como-escrever-css/&#34;&gt;DRY&lt;/a&gt; em nosso documento CSS e não queremos isso, não é amiguinhos?
&lt;/p&gt;

&lt;div style=&#34;width: 495px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*xt8qqJopHwF-Gcg9xM6t3w.gif&#34; alt=&#34;Vida de um Front-end&#34; width=&#34;485&#34; height=&#34;364&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Front-end Lifestyle
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;z-index-quando-usar-graf-h4&#34;&gt;Z-index — Quando usar? {.graf&amp;ndash;h4}&lt;/h3&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Quando temos muitos elementos e precisamos especificar propriedades e características CSS que vão além do propósito de uma “imagem de fundo” ou “sobreposição” então o Z-index é a melhor opção!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Mas se você quer simplesmente sobrepor uma imagem de um logo (ou uma composição de camadas que formam um logo) sobre um uma ou mais imagem de preenchimento de fundo o background-image é a melhor solução!
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Estes elementos ficam empilhados em camadas uma acima da outra, onde o primeiro fundo dado será desenhado no topo e apenas o último elemento da lista poderá definir uma cor sólida de fundo, ou não, aí fica ao seu critério.
&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.minhaClasse {
  background: fundo1, fundo2, ..., fundoN;
}&lt;/pre&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--p-anchor&#34; href=&#34;http://tableless.com.br/tag/css3/&#34;&gt;CSS3&lt;/a&gt; permite especificar imagens de fundo para múltiplos elementos, usando nada mais do que uma única lista separada por vírgulas.
&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Você pode fazer isso com a propriedade reduzida &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt; e também com as propriedade individuais, com a exceção de &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-color&#34;&gt;background-color&lt;/a&gt;. Isto é, as seguintes propriedades de plano de fundo podem ser especificadas com uma lista, uma por fundo: &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background&#34;&gt;background&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-attachment&#34;&gt;background-attachment&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;A propriedade CSS background-clip especifica se o fundo de um elemento, seja cor ou imagem, se extende debaixo de sua borda.&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-clip&#34;&gt;background-clip&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;background-image&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-origin&#34;&gt;background-origin&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-position&#34;&gt;background-position&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-repeat&#34;&gt;background-repeat&lt;/a&gt;, &lt;a class=&#34;markup--anchor markup--p-anchor&#34; title=&#34;The documentation about this has not yet been written; please consider contributing!&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-size&#34;&gt;background-size&lt;/a&gt;. (rola até gradiente!)
&lt;/p&gt;

&lt;h2 id=&#34;exemplos-graf-h3&#34;&gt;Exemplos {.graf&amp;ndash;h3}&lt;/h2&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Neste exemplo, três planos de fundos estão empilhados: um texto estilizado, o logo da Tableless.com.br, e uma imagem de fundo ilustrando uma cidade:
&lt;/p&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    HTML
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;div class=&#34;intro-text&#34;&amp;gt;
    &amp;lt;h1 class=&#34;name-index&#34;&amp;gt;BEM-VINDO À&amp;lt;/br&amp;gt;&amp;lt;span&amp;gt;INTERNET&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;/pre&gt;

&lt;blockquote class=&#34;graf--blockquote&#34;&gt;
  &lt;p&gt;
    CSS
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&#34;lang-css&#34;&gt;header {
  background: url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&#34; rel=&#34;nofollow&#34;&gt;http://tableless.com.br/wp-content/uploads/2013/04/logo-tableless-01.png&lt;/a&gt;) no-repeat center center, url(&lt;a class=&#34;markup--anchor markup--pre-anchor&#34; href=&#34;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&#34; rel=&#34;nofollow&#34;&gt;http://lorempixel.com/output/city-q-g-1024-768-10.jpg&lt;/a&gt;) no-repeat center top;
  height: 100vh;
  width: auto;
  box-sizing: border-box;
}
header .intro-text {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
header .intro-text &amp;gt; h1 {
  text-shadow: 8px 5px 5px #00181c;
  color: #fff;
  text-transform: uppercase;
  text-align: center;
}
header .intro-text .name-index {
  font-size: 7vw;
}
header .intro-text .name-index span {
  font-size: 9.2vw;
}&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/selique/pen/vKddRK/&#34;&gt;Multiple backgrounds backgroud-image&lt;/a&gt; by Moisés lopes ferreira (&lt;a href=&#34;http://codepen.io/selique&#34;&gt;@selique&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Suporte do navegador para múltiplas imagens com a propriedade CSS background-image é relativamente difundido na implementação do recurso citado acima:
&lt;/p&gt;

&lt;ul class=&#34;postList&#34;&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Mozilla Firefox (3.6 ou superior)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Safari / Chrome (1.0 / 1.3 +)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    Opera (10.5+)
  &lt;/li&gt;
  &lt;li class=&#34;graf--li&#34;&gt;
    até mesmo no Internet Explorer (9.0+)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&#34;graf--p&#34;&gt;
  Bibliografia (Fontes)
&lt;/p&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/background-image&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;background-image&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;The CSS background-image property sets one or several background images for an element. The images are drawn on…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;graf--mixtapeEmbed&#34;&gt;
  &lt;a class=&#34;markup--anchor markup--mixtapeEmbed-anchor&#34; title=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34; href=&#34;https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds&#34;&gt;&lt;strong class=&#34;markup--strong markup--mixtapeEmbed-strong&#34;&gt;Multiple backgrounds&lt;/strong&gt; &amp;#8211; &lt;em class=&#34;markup--em markup--mixtapeEmbed-em&#34;&gt;Com CSS3 , você pode aplicar aos elementos multiplos planos de fundo. Estes ficam em camadas empilhadas uma acima da…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Electron</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-electron/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-electron/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-o-electron&#34;&gt;O que é o Electron&lt;/h2&gt;

&lt;p&gt;O Electron foi desenvolvido para permitir que o desenvolvimento de aplicações &lt;em&gt;desktop&lt;/em&gt; usando JavaScript, HTML e CSS fosse muito mais fácil. Criado pela equipe do &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;, ficou conhecido no começo como Atom Shell. O Electron foi criado usando tecnologias como o &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; e o Chromium, e atualmente roda em ambiente de produção de vários projetos, como o próprio &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Atom editor&lt;/a&gt; e outros, como o &lt;a href=&#34;https://slack.com/&#34; target=&#34;_blank&#34;&gt;Slack&lt;/a&gt; e o &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;Visual Studio Code&lt;/a&gt;. Ele é um &lt;em&gt;framework&lt;/em&gt; bem simples de trabalhar e de rápida configuração, para construção de pequenas e grandes aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para todos que queiram se aventurar mais, ou já conhecem o Electron, a documentação completa é traduzida para vários idiomas, inclusive o português. Para acessá-la é só &lt;a href=&#34;https://github.com/atom/electron/tree/master/docs-translations/pt-BR&#34; target=&#34;_blank&#34;&gt;clicar aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mãos-à-obra&#34;&gt;Mãos à obra&lt;/h2&gt;

&lt;p&gt;Nesta Introdução iremos abordar os primeiros passos para começar a trabalhar com o Electron e desenvolver aplicações &lt;em&gt;desktop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Além do &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34;&gt;Node.js&lt;/a&gt; presente em sua máquina, é necessário que você também instale globalmente o pacote &lt;code&gt;electron-prebuilt&lt;/code&gt;. Para isto, basta digitar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;language-bash&#34;&gt;npm install -g electron-prebuilt&lt;/pre&gt;

&lt;h3 id=&#34;entendendo-a-estrutura&#34;&gt;Entendendo a estrutura&lt;/h3&gt;

&lt;p&gt;A estrutura básica de arquivos que usaremos aqui é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;language-text&#34;&gt;electron-app/
├── app 
    ├── assets
        └── css
            └── main.css
    ├── main.js
    ├── index.html
    └── package.json
├── Gulpfile.js
└── package.json
&lt;/pre&gt;

&lt;p&gt;Vamos falar um pouco de cada arquivo e pasta inseridos no exemplo acima:&lt;/p&gt;

&lt;h4 id=&#34;app&#34;&gt;app&lt;/h4&gt;

&lt;p&gt;É  a pasta onde todos os arquivos referentes à aplicação são inseridos.&lt;/p&gt;

&lt;h4 id=&#34;main-js&#34;&gt;main.js&lt;/h4&gt;

&lt;p&gt;É o arquivo de inicialização da aplicação. Nele vão as configurações do tipo: tamanho da tela, posicionamento, manipular eventos do sistema, etc&amp;#8230;&lt;/p&gt;

&lt;h4 id=&#34;index-html&#34;&gt;index.html&lt;/h4&gt;

&lt;p&gt;É a pagina HTML que será nossa &lt;em&gt;view&lt;/em&gt; inicial para essa introdução.&lt;/p&gt;

&lt;h4 id=&#34;app-package-json&#34;&gt;app/package.json&lt;/h4&gt;

&lt;p&gt;O arquivo &lt;code&gt;package.json&lt;/code&gt; que vai dentro da pasta &lt;em&gt;app&lt;/em&gt; é o arquivo que leva todos as dependências que sua aplicação precisará para rodar. Sendo assim, qualquer pacote _npm_ a ser usado diretamente por sua aplicação deverá ser instalado nesse &lt;em&gt;package&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;gulpfile-js&#34;&gt;Gulpfile.js&lt;/h4&gt;

&lt;p&gt;Optei usar &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt; por escolha própria mesmo, mas fiquem livres para escolher seu &lt;em&gt;&amp;#8220;task runner&amp;#8221;&lt;/em&gt; favorito.&lt;/p&gt;

&lt;h4 id=&#34;package-json&#34;&gt;package.json&lt;/h4&gt;

&lt;p&gt;O &lt;code&gt;package.json&lt;/code&gt; que fica na raiz do seu projeto é responsável pelas configurações, dependências para seu ambiente de desenvolvimento. Tudo que for incluso neste arquivo não estará presente na &lt;em&gt;build&lt;/em&gt; de produção da sua &lt;em&gt;app&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;declarando-as-dependências&#34;&gt;Declarando as dependências&lt;/h3&gt;

&lt;p&gt;Após criar a estrutura de pastas que foi citada no tópico anterior. Iremos atribuir os mesmos valores para os atributos de ambos &lt;code&gt;package.json&lt;/code&gt; presentes no projeto. Levando em consideração que &lt;code&gt;&amp;quot;your-app&amp;quot;&lt;/code&gt; será o nome da sua aplicação.&lt;/p&gt;

&lt;pre class=&#34;language-json&#34;&gt;{
  &#34;name&#34;    : &#34;olamundo&#34;,
  &#34;version&#34; : &#34;0.1.0&#34;,
  &#34;main&#34;    : &#34;main.js&#34;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Caso o campo main não tenha sido preenchido, o Electron automaticamente procurará pelo arquivo &lt;code&gt;index.js&lt;/code&gt;. É importante que preencha este campo com o arquivo que usará na inicialização da aplicação.&lt;/p&gt;

&lt;p&gt;Após feito isso, instale as dependências que utilizaremos nesta introdução, no arquivo &lt;code&gt;package.json&lt;/code&gt; que se encontra diretamente na raiz do seu projeto.&lt;/p&gt;

&lt;pre class=&#34; language-bash&#34;&gt;npm install --save-dev electron-prebuilt fs-jetpack asar rcedit Q
&lt;/pre&gt;

&lt;h3 id=&#34;criando-seu-arquivo-de-inicialização&#34;&gt;Criando seu arquivo de inicialização&lt;/h3&gt;

&lt;p&gt;Depois de configurar as pastas e instalar as dependências da nossa aplicação, vamos abrir o nosso arquivo &lt;code&gt;main.js&lt;/code&gt; . Nele vamos incluir todo o código de configuração:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;var app = require(&#39;app&#39;);
var BrowserWindow = require(&#39;browser-window&#39;);

require(&#39;crash-reporter&#39;).start();

var mainWindow = null;

app.on(&#39;window-all-closed&#39;, function() {
  
  if (process.platform != &#39;darwin&#39;) {
    app.quit();
  }

});

app.on(&#39;ready&#39;, function() {
  
  mainWindow = new BrowserWindow({width: 800, height: 600});
  
  mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;);
  
  mainWindow.openDevTools();
  
  mainWindow.on(&#39;closed&#39;, function() {
    
    mainWindow = null;
  });
}); 
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: a Função &lt;em&gt;mainWindow.openDevTools&lt;/em&gt; é chamada apenas para iniciar o &lt;em&gt;Inspetor de Elementos&lt;/em&gt; junto com a aplicação. Caso não precisem, fiquem à vontade para removê-la do seu projeto.&lt;/p&gt;

&lt;h3 id=&#34;primeira-view&#34;&gt;Primeira &lt;em&gt;view&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Finalmente a parte mais fácil. Note que em nosso arquivo &lt;code&gt;main.js&lt;/code&gt; existe a seguinte função:&lt;/p&gt;

&lt;pre class=&#34;language-javascript&#34;&gt;mainWindow.loadUrl(&#39;file://&#39; + __dirname + &#39;/index.html&#39;); 
&lt;/pre&gt;

&lt;p&gt;Ela será responsável por carregar o arquivo &lt;code&gt;index.html&lt;/code&gt;. No exemplo a seguir, criei um exemplo bem simples de um arquivo HTML. Esta página que foi criada, tem os mesmos aspectos de uma janela aberta de um navegador. Ou seja, podemos carregar todos os arquivos CSS e JavaScript que utilizaremos normalmente. Veja:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
      &amp;lt;meta charset=&#34;utf-8&#34; /&amp;gt;
      &amp;lt;title&amp;gt;Olá Mundo&amp;lt;/title&amp;gt;
      &amp;lt;link href=&#34;assets/css/main.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;Olá Mundo&amp;lt;/h1&amp;gt;
      
      &amp;lt;p&amp;gt;Bem vindos à nossa introdução ao Electron&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
  
  &lt;h2 id=&#34;run-your-app&#34;&gt;
    Rodando sua aplicação
  &lt;/h2&gt;
  
  &lt;h3&gt;
    electron-prebuilt
  &lt;/h3&gt;
  
  &lt;p&gt;
    Se você instalou o &lt;code&gt;electron-prebuilt&lt;/code&gt; global, Acesse a pasta &lt;strong&gt;app&lt;/strong&gt; e rode o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;electron app&lt;/pre&gt;
  
  &lt;p&gt;
    Caso tenha instalado apenas localmente, então, na pasta &lt;strong&gt;app&lt;/strong&gt; de seu projeto, digite o seguinte comando:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;&#34;../node_modules/.bin/electron&#34; &#34;./app&#34;&lt;/pre&gt;
  
  &lt;h3&gt;
    Automatizando
  &lt;/h3&gt;
  
  &lt;p&gt;
    Como citei anteriormente, usaremos o &lt;em&gt;Gulp&lt;/em&gt; para automatizar o &lt;em&gt;run&lt;/em&gt; da nossa aplicação, facilitando assim a criação de testes e o próprio desenvolvimento da aplicação. Para isso, deixaremos nosso &lt;code&gt;Gulpfile.js&lt;/code&gt; da seguinte maneira:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;),
  childProcess = require(&#39;child_process&#39;),
  electron = require(&#39;electron-prebuilt&#39;);
  
gulp.task(&#39;run&#39;, function () {
  childProcess.spawn(electron, [&#39;./app&#39;], { stdio: &#39;inherit&#39; });
});
&lt;/pre&gt;
  
  &lt;p&gt;
    Feito isso basta rodar o seguinte comando em seu terminal:
  &lt;/p&gt;
  
  &lt;pre class=&#34;language-bash&#34;&gt;gulp run&lt;/pre&gt;
  
  &lt;h2&gt;
    Criando uma distribuição
  &lt;/h2&gt;
  
  &lt;p&gt;
    Depois de terminado todo o processo de desenvolvimento, você pode criar uma distribuição do seu &lt;em&gt;app&lt;/em&gt; seguindo as instruções do &lt;a href=&#34;http://electron.atom.io/docs/v0.33.0/tutorial/application-distribution&#34; target=&#34;_blank&#34;&gt;Application Distribution guide&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    Pronto! Você está pronto(a) para desenvolver aplicações Desktop com o Electron.
  &lt;/p&gt;
  
  &lt;p&gt;
    E caso queiram, o projeto está disponível no &lt;a href=&#34;https://github.com/henriquesosa/electron-intro&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Material Design com Materialize</title>
      <link>https://tableless.github.io/hugo-public/material-design-com-materialize/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/material-design-com-materialize/</guid>
      <description>

&lt;p&gt;Há muito tempo quero falar um pouco sobre desenvolvimento de sites utilizando layouts baseados no Material Design do Google, mas entre &lt;strong&gt;fazer&lt;/strong&gt; e &lt;strong&gt;falar&lt;/strong&gt; há um abismo enorme. Minha verdadeira intenção é compartilhar um pouco a maneira mais fácil de desenvolver um layout utilizando todos aqueles conceitos que a Google tem implementado atualmente.&lt;/p&gt;

&lt;h2 id=&#34;primeiros-passos&#34;&gt;Primeiros Passos&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&#34;http://materializecss.com/&#34; target=&#34;_blank&#34;&gt;Materialize&lt;/a&gt; é um Framework desenvolvido para facilitar e agilizar nosso desenvolvimento quando o assunto é Material Design. Além de ágil, possui uma infinidade de vantagens que permitem que na maioria das vezes dispensam o uso de outros frameworks para complementá-lo.&lt;/p&gt;

&lt;p&gt;Para baixar os arquivos do Materialize clique em &lt;a href=&#34;http://materializecss.com/getting-started.html&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt;, lá você verá uma documentação explicando como fazer o download dos arquivos e todas as maneiras que você tem para fazer isso, ou também pode usar a CDN dele como geralmente muitos fazem com o JQUERY. Os arquivos são bem distribudos e não diferem dos demais Frameworks que existem.&lt;/p&gt;

&lt;h3 id=&#34;vamos-para-as-vantagens-dele&#34;&gt;Vamos para as vantagens dele&lt;/h3&gt;

&lt;p&gt;Uma das principais vantagens é o fato de ser muito similar ao Material Design desenvolvido pela google. Outra vantagem que podemos observar são os amplos recursos de JQuery que ele possui como: Slider, Lightbox, Captions, Modais, Transitions, Waves entre muitos outros. Melhor do que falar é mostrar. Esses recursos ficam na categoria &lt;a href=&#34;http://materializecss.com/media.html&#34; target=&#34;_blank&#34;&gt;JAVASCRIPT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O sistema de grid usado é bastante parecido com os frameworks já existentes, como o Bootstrap.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/materialize-css-framework-01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;
      &amp;lt;div class=&#34;container&#34;&amp;gt; &amp;lt;!-- Container similar ao utilizado em outros Frameworks --&amp;gt;
            &amp;lt;div class=&#34;row&#34;&amp;gt; &amp;lt;!-- Row também similar ao utilizado em outros Frameworks --&amp;gt;
                 &amp;lt;div class=&#34;col s12 m4 l4&#34;&amp;gt;Eu sou uma coluna&amp;lt;/div&amp;gt; &amp;lt;!-- Coluna com 3 tamanhos--&amp;gt;
            &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;entendendo-as-colunas&#34;&gt;Entendendo as colunas&lt;/h4&gt;

&lt;p&gt;É muito simples, assim como o bootstrap que trabalha com 4 tamanhos de coluna, muito pequeno, pequeno, médio e grande, o materialize decidiu trabalhar com 3 tamanhos que são pequeno médio e grande, nada que assuste ou prejudique o andamento do projeto. Para saber mais entre no &lt;a href=&#34;http://materializecss.com/grid.html&#34; target=&#34;_blank&#34;&gt;menu CSS e acesse o submenu Grid&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;alguns-pequenos-diferenciais-que-ele-possui&#34;&gt;Alguns pequenos diferenciais que ele possui&lt;/h3&gt;

&lt;p&gt;Alguns diferenciais que ele possui são os botões, o modal, os cards, as collections e o mais importante talves de todos o menu lateral, vou mostrar alguns desses abaixo.&lt;/p&gt;

&lt;h4 id=&#34;cards&#34;&gt;Cards&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/Sem-Título-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;sidenav&#34;&gt;Sidenav&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/menu.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;vendo-essa-belezinha-funcionar&#34;&gt;Vendo essa belezinha funcionar ^^&lt;/h3&gt;

&lt;p&gt;Eu poderia colocar um milhão de exemplos feitos aqui, mas não tenho os direitos autorais deles então caso queira ver o showcase do site acesse o link &lt;a href=&#34;http://materializecss.com/showcase.html&#34; target=&#34;_blank&#34;&gt;Showcase&lt;/a&gt; e veja. Mas para não deixar vocês sem nenhum exemplo deixo aqui um site feito por mim através do materialize, espero que gostem o link está na imagem e abaixo dela.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.loguei.com/&#34; target=&#34;_blank&#34;&gt;&lt;br /&gt; &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/263dfd28861105.55d5d38e09a6f.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.loguei.com/&#34; target=&#34;_blank&#34;&gt;blog.loguei.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bem, aqui terminamos esse maravilhoso assunto sobre um Framework bem simples e maneiro de usar. Espero ter ajudado um pouco a todos. Obrigado ^^.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Processo front-end na Locaweb</title>
      <link>https://tableless.github.io/hugo-public/processo-front-end-na-locaweb/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/processo-front-end-na-locaweb/</guid>
      <description>

&lt;p&gt;É muito interessante entender como funcionam os processos em grandes empresas e comparar com processo que você executa na sua própria empresa. Depois que li &lt;a href=&#34;http://jaydson.org/processo-front-end-no-terra/&#34;&gt;o post que o Jaydson fez falando um pouco sobre o processo de desenvolvimento no Terra&lt;/a&gt;, fiquei de escrever um artigo parecido mostrando mais ou menos como nós aqui da Locaweb fazemos nosso front-end. Sugiro que leia o post do Jaydson e mate a sua curiosidade sobre o processo que eles tem lá.&lt;/p&gt;

&lt;h2 id=&#34;testes&#34;&gt;Testes&lt;/h2&gt;

&lt;p&gt;Eu vou repetir o que o Jaydson e o Rafael Rinaldi já falaram tantas vezes em eventos e artigos: Fazer testes front-end é difícil. Ferramentas front-end ainda estão caminhando e nos últimos anos tivemos uma explosão de novidades que nos ajudou muito a avançar na profissionalização da área. Mas testes ainda é um dos pontos fracos. Conseguimos testar muito bem JavaScript usando Jasmine, QUnit e tantos outros, mas testes CSS ainda é um problema grande.&lt;/p&gt;

&lt;p&gt;Essa semana adotamos na equipe a utilização do &lt;a href=&#34;https://github.com/BBC-News/wraith&#34;&gt;Wraith&lt;/a&gt;, um &lt;a href=&#34;http://bbc-news.github.io/wraith/&#34;&gt;teste de comparação de telas feito pelos desenvolvedores da BBC&lt;/a&gt;. Essa é só uma forma de conseguir testar a consistência das telas do seu produto. O &lt;a href=&#34;http://hardy.io&#34;&gt;Hardy&lt;/a&gt;, por exemplo, que usa o Cucumber para comparar seu código.&lt;/p&gt;

&lt;p&gt;Se você se interessar por testes CSS e quiser se aventurar nesse mundo, sugiro que &lt;a href=&#34;http://csste.st&#34;&gt;visite o site CSSTe.st&lt;/a&gt;. Eles compilaram informações de várias iniciativas e sistemas que fazem o trabalho de testar CSS mais fácil. Dá uma vasculhada lá, você vai achar coisas bem interessantes.&lt;/p&gt;

&lt;h2 id=&#34;pull-request&#34;&gt;Pull Request&lt;/h2&gt;

&lt;p&gt;Fazemos branch feature. Isso quer dizer que ninguém faz fork do projeto. As modificações são feitas em branchs separadas e submetidas via Pull Request (ou Merge Request, dependendo do sistema que você usar).&lt;/p&gt;

&lt;p&gt;O Pull Request precisa ter o OK de duas pessoas do time antes de ser aprovado. Antes de baixar o branch, a gente avalia algumas coisas antes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;As issues e o Pull Request estão bem descritivos mostrando qual o problema e o qual a solução adotada, com instruções exatas do que deve ser testado e avaliado?&lt;/li&gt;
&lt;li&gt;O CI passou? Tá okay?&lt;/li&gt;
&lt;li&gt;Se for JavaScript, os testes foram feitos? Se já existiam, precisou de modificação?&lt;/li&gt;
&lt;li&gt;Documentação está okay? Todas as atualizações foram feitas?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O pior momento é descrever bem o Pull Request e as Issues. Temos que ter em mente que isso faz parte do Changelog e é muito útil para consultas posteriores.&lt;/p&gt;

&lt;p&gt;O pessoal da PlataformaTec tem uma cultura muito rica nesse assunto (e outros também). &lt;a href=&#34;http://guidelines.plataformatec.com.br/pull-requests.html&#34;&gt;Dá uma olhada no processo deles&lt;/a&gt;, que interessante!&lt;/p&gt;

&lt;h2 id=&#34;framework&#34;&gt;Framework&lt;/h2&gt;

&lt;p&gt;Desenvolvemos um framework interno chamado &lt;a href=&#34;http://opensource.locaweb.com.br/locawebstyle/&#34;&gt;Locaweb Style&lt;/a&gt;. Na verdade, hoje existem 3 tipos de frameworks de interface aqui na firma. Cada um serve para serviços com designs e propósitos totalmente diferentes: um para a área de Checkout (compra), outro para área de Central do Cliente e o principal que é para a interface dos produtos.&lt;/p&gt;

&lt;p&gt;Esso deve ser padrão em muitas empresas e várias pessoas vão perguntar por que não usamos o Bootstrap. Nosso framework principal, que é o que faz a interface dos produtos que tem contato direto com o usuário se chama &lt;strong&gt;Locaweb Style&lt;/strong&gt; e você pode ver o projeto (que é totalmente open source) &lt;a href=&#34;http://github.com/locaweb/locawebstyle/&#34;&gt;no nosso GitHub&lt;/a&gt;. A documentação está bem completa e &lt;a href=&#34;http://opensource.locaweb.com.br/locawebstyle/&#34;&gt;pode ser vista aqui&lt;/a&gt;. A ideia é que todos os produtos que tenham interface com o usuário use esse framework. Esse ponto é importante porque resolve uma série de problemas como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Processo&lt;/strong&gt; &amp;#8211; As três equipes trabalham melhor quando as responsabilidades são bem dividas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Experiência padronizada&lt;/strong&gt; &amp;#8211; Padronizando a interface e as interações, o usuário tem uma experiência melhor entre os produtos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tirar a responsabilidade do client-side dos back-ends&lt;/strong&gt; &amp;#8211; Cá entre nós: back-end não tem que se preocupar se o layout está bonito, se tem botão desalinhado, se aquilo vai ser bem visto no celular, se o CSS está bem escrito etc etc etc…&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Excesso de projetos&lt;/strong&gt; &amp;#8211; São diversos projetos ao mesmo tempo, com equipes enxutas, trabalhando paralelamente. Não perde-se mais tempo de desenvolvimento criando telas parecidas do zero.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UX com mais liberdade&lt;/strong&gt; &amp;#8211; O time de UX precisa de atenção, carinho e de alguém que sente com eles para se preocupar com coisas que façam o nosso cliente amar o produto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Liberar gargalos&lt;/strong&gt; &amp;#8211; Os times de UX e de front-end eram gargalos constantes. Precisávamos agilizar o processo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Já estamos na versão 3 e cometemos uma série de erros nas duas primeiras versões. O maior erro que eu posso citar é a utilização do Bootstrap como base. Geralmente, o design definido pelo designer do time não era igual ao do Bootstrap. Claro. A empresa precisa de uma identidade própria. Logo, tínhamos o problema de recriar o design dos módulos e muitas vezes, precisávamos estender as funcionalidades JS de alguns módulos do Bootstrap. Quando percebemos, estávamos reescrevendo boa parte do framework. Logo, decidimos retirar totalmente o Bootstrap da versão atual, mantendo apenas o GRID.&lt;/p&gt;

&lt;h2 id=&#34;stack-de-desenvolvimento&#34;&gt;Stack de desenvolvimento&lt;/h2&gt;

&lt;p&gt;Não vou explicar detalhadamente cada uma das tecnologias, mas segue todas que usamos hoje para manter principalmente o framework:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SASS&lt;/strong&gt; &amp;#8211; Usando sintaxe &lt;strong&gt;.sass&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wraith&lt;/strong&gt; &amp;#8211; Como teste de comparação visual de interface.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jasmine&lt;/strong&gt; &amp;#8211; Para testes JS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSHint&lt;/strong&gt; &amp;#8211; Para manter a escrita de JS padronizada.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rake&lt;/strong&gt; &amp;#8211; Para executar os testes e outras tarefas como publicação da documentação e fechamento de pacote para deploy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Middleman&lt;/strong&gt; &amp;#8211; Para manter as documentações.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.editorconfig&lt;/strong&gt; &amp;#8211; Para manter o padrão dos editores em dia.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nos projetos, nós nem nos preocupamos com o build dos assets. O Asset Pipeline está plugado em todos os projetos e faz tudo muito bem. Não há Grunt ou Gulp nos projetos.&lt;/p&gt;

&lt;p&gt;Usamos Travis ligado no nosso &lt;a href=&#34;http://github.com/locaweb/&#34;&gt;GitHub&lt;/a&gt;. Os projetos todos internamente usam Jenkins.&lt;/p&gt;

&lt;h2 id=&#34;deploy-e-ambiente&#34;&gt;Deploy e ambiente&lt;/h2&gt;

&lt;p&gt;O deploy melhorou muito nos últimos anos. Hoje estamos assim: alguns produtos, não todos, podem fazer deploy a qualquer hora. Alguns precisam abrir um ticket para agendar uma janela. Nós, quando precisamos fazer um deploy do framework, ainda precisamos agendar. Mas já estamos andando para fazer deploy a qualquer momento do dia sem limite de vezes. Como os produtos usam o Locaweb Style com a versão travada, não há nenhum tipo de risco. O Deploy também pode ser descomplicado e automatizado, já que são apenas assets.&lt;/p&gt;

&lt;p&gt;O nosso ambiente é bastante comum: temos um ambiente de teste, um de homologação e produção. Simples assim.&lt;/p&gt;

&lt;h2 id=&#34;pontos-falhos&#34;&gt;Pontos falhos&lt;/h2&gt;

&lt;p&gt;Existem uma série de coisas que precisamos melhorar assim que encontrarmos tempo entre um projeto e outro. Mas o principal é manter a padronização de escrita de JS nos projetos. Há projetos que não usam nenhum tipo de pattern (nós usamos o &lt;a href=&#34;http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript&#34;&gt;Revealing Module Pattern&lt;/a&gt;), outros que usam CoffeeScript (o padrão é não usar), outros projetos que misturam JS puro com jQuery (o padrão é usar sempre a abstração do jQuery). A ideia é que nenhum projeto precise ter CSS para customizações. Toda a interface precisa estar dentro do Locaweb Style. Nem sempre é possível, já que há uma premissa que tudo o que está no framework precisa ser usado em dois produtos no mínimo. Não tem sentido colocar algo lá se apenas um produto vai usar e os outros não.&lt;/p&gt;

&lt;h2 id=&#34;entrosamento&#34;&gt;Entrosamento&lt;/h2&gt;

&lt;p&gt;Ter uma equipe unida e entrosada é difícil. Todo mundo precisa estar disposto a fazer aquele relacionamento dar certo, sempre entendendo as diferenças pessoais de cada um, como em um casamento. Ter uma equipe 100% unida, sem brigas, concordando com tudo é impossível. Eu tenho a sorte de trabalhar com uma equipe que se conhece e sabe exatamente onde temos que melhorar mais, entendendo os pontos fracos e principalmente nossos pontos fortes. Leva tempo para criar esse entrosamento. Muito trabalho, suor e sangue. São muitas reuniões de feedback, 1 on 1, retrospectiva&amp;#8230;&lt;/p&gt;

&lt;p&gt;Outra coisa que ajuda é a multidisciplinaridade entre os integrantes. Temos caras que lá programam um pouco de back. Outros que são mestres no CSS e tem um chamego especial para o lado de UX e Design, outros que gostam de mexer com infra. Isso tudo conta como ponto positivo.&lt;/p&gt;

&lt;p&gt;Lendo assim, até parece simples! 😉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML: Encode UTF-8</title>
      <link>https://tableless.github.io/hugo-public/html-encode-utf-8/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/html-encode-utf-8/</guid>
      <description>

&lt;p&gt;Há uns 7 anos atrás o Diego Eis publicou &lt;a href=&#34;http://tableless.com.br/charsets-e-encodes-tabelas-de-caracteres/&#34;&gt;aqui&lt;/a&gt; um artigo sobre o assunto. Vou fazer uma nova abordagem.&lt;/p&gt;

&lt;p&gt;Sabe quando sua página troca acentuações por caracteres bem loucos? Este é um problema simples de explicar e vou tentar mostrar as regras que se aplicam quando o browser faz o download de um HTML, como escolher um encode e como usá-lo.&lt;/p&gt;

&lt;p&gt;Existem três formas de declararmos o encode do arquivo:&lt;/p&gt;

&lt;h3 id=&#34;1-8211-via-cabeçalho-http&#34;&gt;1 &amp;#8211; Via cabeçalho HTTP&lt;/h3&gt;

&lt;pre&gt;Content-Type: text/html; charset=utf-8&lt;/pre&gt;

&lt;p&gt;Esse aí é o cara que manda. Se declararmos o encode no parâmetro &lt;em&gt;charset&lt;/em&gt; do &lt;em&gt;Content-Type&lt;/em&gt;, as outras duas opções serão ignoradas. Hoje em dia a customização no servidor é praticamente zero por parte do desenvolvedor, pois a maioria dos servers e banco de dados já vem com essa configuração.&lt;/p&gt;

&lt;h3 id=&#34;2-8211-via-meta-tag&#34;&gt;2 &amp;#8211; Via Meta Tag&lt;/h3&gt;

&lt;pre&gt;&amp;lt;!-- HTML 4 --&amp;gt;
&amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&amp;gt;
&amp;lt;!-- HTML5 --&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;&lt;/pre&gt;

&lt;p&gt;Acredito que a maioria dos desenvolvedores utilizam essa técnica. Muitas vezes já vem nos snnipets que encontramos em nosso editores e ou até mesmo naqueles templates gerados via scaffolding (ex.: yoeman).&lt;/p&gt;

&lt;p&gt;É uma boa prática colocar ele logo após a abertura da tag html. Pois se o encode não estiver disponível no cabeçalho da requisição, o browser irá procurar por essa informação nos primeiros 1024 bytes do arquivo. Se ele não encontrar, será utilizado o UTF-8.&lt;/p&gt;

&lt;p&gt;Segundo a w3techs.com que é especialista em um monte de pesquisas sobre a web, o formato UTF-8 é utilizado em cerca de 80% das páginas web. Mas vamos falar um pouco mais do UTF-8 depois.&lt;/p&gt;

&lt;h3 id=&#34;3-8211-via-xml&#34;&gt;3 &amp;#8211; Via XML&lt;/h3&gt;

&lt;pre&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&lt;/pre&gt;

&lt;p&gt;Esse cara só serve para páginas XHTML e deve ser colocado antes do DOCTYPE.&lt;/p&gt;

&lt;h3 id=&#34;por-que-tanto-utf-8&#34;&gt;Por que tanto UTF-8?&lt;/h3&gt;

&lt;p&gt;Em 2014 foi constatado que cerca de 83,6% das páginas web estavam utilizando esse encode. Sua popularização se deu pelo fato dele reconhecer bastante caracteres (tipo uns 65.536).&lt;/p&gt;

&lt;p&gt;Tem uma galera por aí usando o ISO-8859-1 por que ele é mais performático chegando á cada caractere pesar metade do seu correspondente no UTF-8. Mas aí você fica com algumas opções de caracteres á menos (você se limita á usar 256 caracteres diferentes. Pouco né?).&lt;/p&gt;

&lt;p&gt;Esse segundo encode apareceu nesse mesmo relatório em segundo lugar com 8.3% das páginas. Ele não é uma péssima opção, uma vez que ele cobre todos os caracteres do nosso idioma. Mas se você for trabalhar em uma aplicação com chances de rolar internacionalização, aconselho á usar o UTF-8 pra ter uma transição natural sem maiores problemas.&lt;/p&gt;

&lt;h3 id=&#34;bala-de-prata&#34;&gt;Bala de Prata?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tudo isso é muito chato ou demais pra minha cabeça. Quero algo mais simples.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então tá. Vamos ver&amp;#8230;&lt;/p&gt;

&lt;p&gt;Você pode ignorar qualquer encode e utilizar entidades HTML.&lt;/p&gt;

&lt;p&gt;Escrever &lt;em&gt;Sab&amp;atilde;o&lt;/em&gt; garante que o usuário vai ler _Sabão_ e evita que algum navegador por aí mostre na tela _SabÃ£o_ ou &lt;em&gt;Sab�o&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Legal! Quero ver dar errado agora depois dessa!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mas calma jovem, tudo tem um preço. Dá uma olhada na lista de pontos negativos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Além de escrever mais caracteres você terá que aprender todas essas entidades (ou a maioria).&lt;/li&gt;
&lt;li&gt;Uma &amp;#8220;alteraçãozinha de 2 minutos&amp;#8221; pra um desenvolvedor que não está muito familiarizado se torna algo com uma certa complexidade desnecessária.&lt;/li&gt;
&lt;li&gt;Sua semântica diminui, uma vez que o conteúdo do seu código deixa de ter uma alta facilidade de entendimento.&lt;/li&gt;
&lt;li&gt;Isso vai exigir mais caracteres, o que aumenta &lt;del&gt;nem que seja só um pouquinho&lt;/del&gt; o tráfego na rede.&lt;/li&gt;
&lt;li&gt;Não é uma técnica muito popular devido aos pontos negativos anteriores á esse.&lt;/li&gt;
&lt;li&gt;Você corre risco de sofrer bullying no trampo depois de seus colegas lerem teu código.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Eu até sei um ou outro de cabeça, tipo o &lt;em&gt;&amp;ccedil;&lt;/em&gt; e o &lt;em&gt;&amp;amp;&lt;/em&gt;, mas prefiro mil vezes digitar &lt;em&gt;ç&lt;/em&gt; e o &lt;em&gt;&amp;amp;&lt;/em&gt;. Mais fácil né não?&lt;/p&gt;

&lt;p&gt;Referências:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.locaweb.com/pt-br/C%C3%B3digos_HTML_para_caracteres_acentuados&#34; target=&#34;_blank&#34;&gt;Locaweb &amp;#8211; Códigos HTML para caracteres acentuados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.locaweb.com/pt-br/Como_resolver_problemas_de_acentua%C3%A7%C3%B5es_em_seu_site&#34; target=&#34;_blank&#34;&gt;Locaweb &amp;#8211; Como resolver problemas de acentuação no seu site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://w3techs.com/technologies/overview/character_encoding/all&#34; target=&#34;_blank&#34;&gt;w3techs.com &amp;#8211; Levantamento sobre o uso do UTF-8 na web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HTTP/2 – Atualização do protocolo base da internet</title>
      <link>https://tableless.github.io/hugo-public/http2-atualizacao-do-protocolo-base-da-internet/</link>
      <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/http2-atualizacao-do-protocolo-base-da-internet/</guid>
      <description>&lt;p&gt;HTTP é o protocolo de comunicação base usado para a internet funcionar. O nome é Hypertext Transfer Protocol. Olha só a palavra Hypertext aparecendo de novo. Onde mais você encontra ela? Isso! Exato! Na sigla HTML: HyperText Markup Language. O HTTP é o protocolo que troca ou faz a transferência de hipertextos.&lt;/p&gt;

&lt;p&gt;Eu não vou explicar aqui o que é um &lt;a href=&#34;http://pt.wikipedia.org/wiki/Hipertexto&#34;&gt;Hipertexto&lt;/a&gt; porque eu sei que você já sabe. Mas a grande novidade é que durante os últimos 16 anos nós usamos uma mesma versão desse protocolo e agora a galera do &lt;a href=&#34;https://httpwg.github.io/&#34;&gt;IETF HTTP Working Group&lt;/a&gt; soltou a atualização, chamada de HTTP/2!&lt;/p&gt;

&lt;p&gt;O HTTP/2 não é uma reescrita completa do protocolo, tanto que os métodos e códigos de status continuam os mesmos. O foco foi em performance. Especificamente para diminuir a latência percebida pelo usuário final, redes e a melhora do uso de recursos do servidor. Eles dizem que o objetivo principal é usar uma única conexão entre o browser e o website!&lt;/p&gt;

&lt;p&gt;O ponto principal do HTTP/1.1 era que ele permitia que o seu site fosse comprimido pelos servidores e depois descomprimidos pelos computadores. Isso resolve uma série de problemas de tamanho em uma época onde conexão era muito restrita. A versão 1.1 do protocolo permitiu que a internet continuasse crescendo, resolvendo o uso de dados em grandes quantidades pelos websites.&lt;/p&gt;

&lt;p&gt;A versão 2 tem quase o mesmo propósito. O principal problema resolvido agora é que o browser faz várias requisições de arquivos para o servidor montar seu websitio. Todo mundo aqui usa CSS, JS, imagens, vídeos, fonts e diversas outras coisinhas para fazer websites bonitos e agradáveis. Isso carrega demais as páginas e significa mais requisições entre browser e servidor.&lt;/p&gt;

&lt;p&gt;O ponto é que o browser só consegue fazer uma requisição por vez, por servidor. Essas requisições demoram para serem feitas, principalmente quando há CSS ou JS bloqueantes. Por isso que muita gente, principalmente grandes websites, baixam imagens, JS, CSS etc de diferentes servidores. E aqui se forma o problema. Conforme isso vai acontecendo, a carga na rede, como um todo, aumenta bastante e vários outros serviços começam a engasgar.&lt;/p&gt;

&lt;p&gt;O que muda então é o seguinte: enquanto hoje o browser faz uma requisição para ter uma resposta, ele vai fazer uma requisição e conseguirá ter várias respostas de uma vez. Isso quer dizer que ele pode falar com o servidor uma vez e pedir tudo o que tem direito. Isso é muito importante e um grande avanço.&lt;/p&gt;

&lt;p&gt;Isso não quer dizer que você vai desistir da performance do seu site, pelo contrário, você vai ter tempo para melhorar a performance de outros pontos, por exemplo, o processamento do computador ao montar sua página, uso de memória etc.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;https://www.mnot.net/blog&#34;&gt;Mark Nottingham&lt;/a&gt;, chairman do IETF, &lt;a href=&#34;https://www.mnot.net/blog/2015/02/18/http2&#34;&gt;fez um post em seu blog no dia 18 de Fevereiro&lt;/a&gt; explicando o lançamento e dando mais detalhes.&lt;/p&gt;

&lt;p&gt;Uma curiosidade interessante é que eles usaram o &lt;a href=&#34;https://github.com/http2&#34;&gt;GitHub para definir as especificações, testes etc&lt;/a&gt;. &lt;a href=&#34;http://http2.github.io/&#34;&gt;Veja a especificação aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se tiver perguntas, o pessoal do IETF &lt;a href=&#34;http://http2.github.io/faq/&#34;&gt;criou um FAQ bastante extenso&lt;/a&gt; explicando uma série de perguntar pertinentes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formulário responsivo com MailChimp</title>
      <link>https://tableless.github.io/hugo-public/formulario-responsivo-com-mailchimp/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/formulario-responsivo-com-mailchimp/</guid>
      <description>

&lt;p&gt;Há cada dia mais utilizamos serviços disponíveis na web que tem um plano básico e gratuito que permite integrações. Nos últimos meses tenho feito formulários com frequência usando uma abordagem bem simples. Vou mostrar agora como criar um formulário responsivo, integrando com MailChimp e usando jQuery Validate.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos criar o formulário da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;CREATE RESPONSIVE FORM WITH INTEGRATE MAILCHIMP&amp;lt;/h1&amp;gt;
  &amp;lt;form id=&#34;form-contact&#34; method=&#34;POST&#34; action=&#34;mailchimp-contact.php&#34;&amp;gt;
    &amp;lt;div class=&#34;input&#34;&amp;gt;
      &amp;lt;label for=&#34;name&#34;&amp;gt;Name&amp;lt;/label&amp;gt;
      &amp;lt;input type=&#34;text&#34; id=&#34;name&#34; name=&#34;name&#34; placeholder=&#34;Your name&#34; required&amp;gt;
    &amp;lt;/div&amp;gt;

    ...
    
    &amp;lt;div class=&#34;input txt&#34;&amp;gt;
      &amp;lt;label for=&#34;message&#34;&amp;gt;Message&amp;lt;/label&amp;gt;
      &amp;lt;textarea id=&#34;message&#34; name=&#34;message&#34; cols=&#34;10&#34; rows=&#34;5&#34; placeholder=&#34;Its message leaves&#34; required&amp;gt;&amp;lt;/textarea&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;buttons&#34;&amp;gt;
      &amp;lt;span class=&#34;form-message&#34;&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;input type=&#34;submit&#34; value=&#34;SEND&#34; /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/section&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-form-mailchimp/demo-only-elements.html&#34; target=&#34;_blank&#34; title=&#34;Ver demo sem style.&#34;&gt;Ver demo sem style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Para cada label e input foi adicionado uma &lt;code&gt;div.input&lt;/code&gt; para inserir uma formatação por grupo.&lt;/p&gt;

&lt;h3 id=&#34;o-form-está-centralizado-com-max-width&#34;&gt;O form está centralizado com max-width:&lt;/h3&gt;

&lt;p&gt;Por ser um elemento &amp;#8216;block&amp;#8217;, vamos definir o tamanho máximo que ele pode ter.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;form {
&amp;nbsp; margin: 0 auto;
&amp;nbsp; max-width: 850px;
&amp;nbsp; padding: 20px 10px;
&amp;nbsp; background-color: rgba(255,255,255,0.4)
}
&lt;/pre&gt;

&lt;h3 id=&#34;o-grupo-div-input-com-50-em-8216-width-8217-do-form&#34;&gt;O grupo div.input com 50% em &amp;#8216;width&amp;#8217; do form:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input {
  float: left;
  width: 48%;
  padding: 0 1% 20px;
  position: relative;
}

.input.txt { width: 98%; } /*textarea 100%*/
&lt;/pre&gt;

&lt;h3 id=&#34;os-labels&#34;&gt;Os labels:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input label {
  display: block;
  padding-bottom: 5px;
  color: #666;
}
&lt;/pre&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input label.error {
  position: absolute;
  right: 18px;
  top: 35px;
  color: #f00;
}&lt;/pre&gt;

&lt;p&gt;O label.error é gerado pelo jQuery validate e adicionado seguido dos campos.&lt;/p&gt;

&lt;h3 id=&#34;os-campos&#34;&gt;Os campos:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input input,
.input textarea {
  padding-top: 10px;
  padding-bottom: 9px;
  border: none;
  font-size: 16px;
  font-weight: 100;
  font-family: &#34;Helvetica Neue&#34;, Helvetica, Arial, sans-serif;
}

.input input {
  width: 94%;
  padding-left: 3%;
  padding-right: 3%;
}

.input textarea {
  width: 97%;
  padding-left: 1.5%;
  padding-right: 1.5%;
}&lt;/pre&gt;

&lt;p&gt;Formatamos os campos para ter 100% de tamanho do elemento pai &amp;#8216;div.input&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Sempre que redimensionar não haverá quebras, portanto, responsivo meu amigo.&lt;/p&gt;

&lt;h3 id=&#34;agora-um-capricho-para-resoluções-pequenas&#34;&gt;Agora um capricho para resoluções pequenas.&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 520px) {
  .input {
    width: 98%;
  }
}&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-form-mailchimp/demo-style-elements.html&#34; target=&#34;_blank&#34; title=&#34;Ver demo com style.&#34;&gt;Ver demo com style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-jquery-mailchimp&#34;&gt;O jQuery + MailChimp&lt;/h2&gt;

&lt;p&gt;Com o HTML e CSS prontos, vamos adicionar o JavaScript que é fácil. Como dependemos do jQuery e não podemos iniciar de qualquer forma, segue uma estrutura bem legal:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function(){
  var contact = function(){
    var init = function() {
      //initialize code
    };
    
&amp;nbsp;   //more functions

    return {init: init};
  }();

  //jQuery loaded
  $(document).ready(contact.init);
})();&lt;/pre&gt;

&lt;p&gt;Como sabemos exatamente qual função vai executar quando a jQuery carregar, adicionaremos o jQuery Validate no init:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var init = function() {
  $(&amp;#039;#form-contact&amp;#039;).validate({
    rules : {
      name: &#34;required&#34;,
      email: { required: true, email: true },
      phone: { required: true, minlength: 14 },
      company: &#34;required&#34;,
      message: &#34;required&#34;
    },
    messages: {
      name: &#34;*&#34;,
      email: { required: &#34;*&#34;, email: &#34;*&#34; },
      phone: { required: &#34;*&#34;, minlength: &#34;*&#34; },
      company: &#34;*&#34;,
      message: &#34;*&#34;
    }
  });
};&lt;/pre&gt;

&lt;p&gt;Agora que estamos validando todos os campos, que tal adicionar um ajax para deixar nosso formulário bem suave e uma função para exibir mensagens de sucesso ou erro, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var init = function() {
  $(&amp;#039;#form-contact&amp;#039;).validate({
    rules : {
      ...
    },
    messages: {
      ...
    },
    submitHandler: function(form) {
      var $form = $(form);

      var params = {
        name: $form.find(&amp;#039;#name&amp;#039;).val(),
        email: $form.find(&amp;#039;#email&amp;#039;).val(),
        phone: $form.find(&amp;#039;#phone&amp;#039;).val(),
        company: $form.find(&amp;#039;#company&amp;#039;).val(),
        message: $form.find(&amp;#039;#message&amp;#039;).val()
      };

      $.ajax({
        type: $form.attr(&amp;#039;method&amp;#039;),
        url: $form.attr(&amp;#039;action&amp;#039;),
        data: params,
        success: function( data ) {
          if(data == &#34;true&#34;) {
            $form.find(&amp;#039;.input input&amp;#039;).val(&#34;&#34;);
            $form.find(&amp;#039;.input textarea&amp;#039;).val(&#34;&#34;);
            setMessage(&#34;Mission accomplished. &amp;lt;strong&amp;gt;&#34;+ params.email +&#34;&amp;lt;/strong&amp;gt; was successfully added to list.&#34;, &#34;success&#34;);
          } else {
            setMessage(&#34;Mission failed. &amp;lt;strong&amp;gt;&#34;+ params.email +&#34;&amp;lt;/strong&amp;gt; not was added to list.&#34;, &#34;error&#34;);
          }
        },
        error: function( data ) {
          setMessage(&#34;Mission failed in connection. Try again.&#34;, &#34;error&#34;);
        }
      });

      return false;
    }
  });
};

var setMessage = function($message, $type) {
  $(&amp;#039;.form-message&amp;#039;).html($message).addClass($type);

  setTimeout(function(){
    $(&amp;#039;.form-message&amp;#039;).removeClass($type);
  }, 6000);
};
&lt;/pre&gt;

&lt;p&gt;Via &amp;#8216;submitHandler&amp;#8217; do &lt;a href=&#34;http://jQueryvalidation.org/&#34; target=&#34;_blank&#34;&gt;jQuery Validate&lt;/a&gt;, vamos disparar por ajax todos os dados preenchidos e travar o post do form com &amp;#8216;return false&amp;#8217; no final da função. Assim evitamos aquele redirecionamento de post.&lt;/p&gt;

&lt;h3 id=&#34;o-php&#34;&gt;O PHP&lt;/h3&gt;

&lt;p&gt;Como definimos com &amp;#8216;method&amp;#8217; e &amp;#8216;action&amp;#8217; para o nosso formulário, segue o código para resgatar os dados:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
    require_once &amp;#039;MCAPI.class.php&amp;#039;;
    $api = new MCAPI(&amp;#039;casiuach1293kajsc912319203cja23s-us9&amp;#039;);
    $merge_vars = array(&amp;#039;NAME&amp;#039;=&amp;gt;$_POST[&#34;name&#34;], &#39;PHONE&#39;=&amp;gt;$_POST[&#34;phone&#34;], &#39;COMPANY&#39;=&amp;gt;$_POST[&#34;company&#34;], &#39;MESSAGE&#39;=&amp;gt;$_POST[&#34;message&#34;]);
    
    // Submit subscriber data to MailChimp
    // For parameters doc, refer to: http://apidocs.mailchimp.com/api/1.3/listsubscribe.func.php
    $retval = $api-&amp;gt;listSubscribe( &amp;#039;12938asd98&amp;#039;, $_POST[&#34;email&#34;], $merge_vars, &amp;#039;html&amp;#039;, false, true );
    
    if ($api-&amp;gt;errorCode){
        echo &#34;false&#34;;
    } else {
        echo &#34;true&#34;;
    }
?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Dependemos da MCAPI.class que você pode verificar na &lt;a href=&#34;https://apidocs.mailchimp.com/api/example-code/&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt; ou baixar &lt;a href=&#34;https://codeload.github.com/sunarlim/mailchimp-subscribe/zip/master&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;, só lembrando que precisa adicionar sua API Key e List ID.&lt;/p&gt;

&lt;h2 id=&#34;pronto&#34;&gt;PRONTO&lt;/h2&gt;

&lt;p&gt;Nosso formulário é responsivo e integrado ao mailchimp.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://css4html.com.br/demos/responsive-form-mailchimp/&#34; target=&#34;_blank&#34; title=&#34;Veja como ficou o resultado final&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/palloi/responsive-form-mailchimp/&#34; target=&#34;_blank&#34; title=&#34;Veja o código completo no github&#34;&gt;Veja o c&amp;oacute;digo completo no github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entendendo o Outline do HTML</title>
      <link>https://tableless.github.io/hugo-public/entendendo-o-outline-html/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/entendendo-o-outline-html/</guid>
      <description>&lt;p&gt;O Outline do documento HTML é a estrutura do documento que é gerada pelos títulos, títulos de formulários, títulos das tabelas e qualquer outro elemento que marque alguma seção de conteúdo no documento. Essas marcações de Outline podem ser usadas para várias iniciativas, por exemplo, um browser ou alguma outra interface possa criar uma Tabela de Conteúdo. Outras tecnologias assistivas podem usar também estas seções para formar a navegação, como em um leitor de tela, mas ou menos como acontece no WAI-ARIA, mas de maneira mais natural.&lt;/p&gt;

&lt;p&gt;Os elementos de cabeçalho h1-h6, contribuem para o outline do documento HTML 5, criando uma estrutura hierárquica e definindo as seções da página. Os cabeçalhos são importantes para otimização de buscas e também para navegação em leitores de telas, já que usuários desses aparelhos navegam pelos títulos na página.&lt;/p&gt;

&lt;p&gt;Nas versões HTML4 e XHTML tudo o que tinhamos para estruturar o outline eram as tags h1-h6. Tínhamos então o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;

  &amp;lt;h1&amp;gt;Midias reprodutiveis&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;Disco&amp;lt;/h2&amp;gt;
  &amp;lt;h2&amp;gt;Arquivo&amp;lt;/h2&amp;gt;
  &amp;lt;h3&amp;gt;Video: Avi, Divx, Mp4, Xvid&amp;lt;/h3&amp;gt;
  &amp;lt;h2&amp;gt;Disco USB de armazenamento&amp;lt;/h2&amp;gt;

&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;E sua saída era:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
  1. Disco
  2. Arquivo
    1. Video: AVI, DIVx, MP4, Xvid
  3. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Browsers comuns não mostram o outline do documento portanto para visualiza-los é necessário usar uma ferramenta chamada HTML5 outliner(&lt;a href=&#34;http://gsnedders.html5.org/outliner/&#34; title=&#34;Link do Html 5 Outliner&#34;&gt;https://gsnedders.html5.org/outliner/&lt;/a&gt;). Mesmo que o nível dos cabeçalhos dos exemplos sejam diferentes, a saída como vimos é a mesma.&lt;/p&gt;

&lt;p&gt;Pois bem, agora com o HTML5 temos novas formas de estruturar o documento. Temos os elementos de sectioning content — article, aside, nav e sections — que demarcam diferentes seções num documento e define o escopo para os elementos de cabeçalho (assim como o header e o footer).&lt;/p&gt;

&lt;p&gt;Isso mudou o paradigma e agora podemos ter diversos elementos seccionados com sua própria hierarquia de h1-h6. Isso tem efeito no outline. Num documento onde temos:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;

   &amp;lt;h1&amp;gt;Midias reprodutiveis&amp;lt;/h1&amp;gt;

   &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Disco&amp;lt;/h1&amp;gt;
   &amp;lt;/section&amp;gt;

   &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Arquivo&amp;lt;/h1&amp;gt;
      &amp;lt;section&amp;gt;&amp;lt;!-- essa é uma section de outra --&amp;gt;
      &amp;lt;h1&amp;gt;Video: Avi, Divx, Mp4, Xvid&amp;lt;/h1&amp;gt;
      &amp;lt;/section&amp;gt;
   &amp;lt;/section&amp;gt;

   &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Disco USB de armazenamento&amp;lt;/h1&amp;gt;
   &amp;lt;/section&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Temos esse outline:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
  1. Disco
  2. Arquivo
    1. Video: AVI, DIVx, MP4, Xvid
  3. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Como pode ser observado cada section tem o seu h1, mas o outline não sofre alteração.&lt;/p&gt;

&lt;p&gt;Mas e se o segundo exemplo não tivesse as sections? Então teriamos um resultado distinto:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
 2. Disco
 3. Arquivo
 4. Video: AVI, DIVx, MP4, Xvid
 5. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Dentre o primeiro e o segundo exemplo, claro que o segundo é mais válido por sua importância semântica.&lt;/p&gt;

&lt;p&gt;Mas todas as sections tem as tags h1. Isso pode ser perigoso. Os leitores de tela não são atualizados no mesmo passo um do outro (assim como os browsers comuns). Sendo assim esse tipo de marcação pode impactar severamente, comprometendo a acessibilidade. Poderíamos usar o segundo exemplo e em alguns leitores de tela o resultado da saída ser o da ultima abordagem:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
 2. Disco
 3. Arquivo
 4. Video: AVI, DIVx, MP4, Xvid
 5. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Isso ocorre por quê esses leitores não distinguem a marcação dentro das tags section. Sendo assim o ideal seria usar as tags sections proporcionando uma melhor marcação, mas uma hierarquia de cabeçalhos semelhante a do HTML4.&lt;/p&gt;

&lt;p&gt;Então fazemos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;

   &amp;lt;h1&amp;gt;Midias reprodutiveis&amp;lt;/h1&amp;gt;

   &amp;lt;section&amp;gt;  
     &amp;lt;h2&amp;gt;Disco&amp;lt;/h2&amp;gt; 
   &amp;lt;/section&amp;gt; 

   &amp;lt;section&amp;gt; 
     &amp;lt;h2&amp;gt;Arquivo&amp;lt;/h2&amp;gt; 
     &amp;lt;section&amp;gt;&amp;lt;!-- essa é uma section de outra --&amp;gt; 
       &amp;lt;h3&amp;gt;Video: Avi, Divx, Mp4, Xvid&amp;lt;/h3&amp;gt; 
     &amp;lt;/section&amp;gt; 
   &amp;lt;/section&amp;gt; 

   &amp;lt;section&amp;gt; 
     &amp;lt;h2&amp;gt;Disco USB de armazenamento &amp;lt;/h2&amp;gt; 
   &amp;lt;/section&amp;gt; 

&amp;lt;body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e a saída nos leitores de tela; atualizados ou não; será a mesma:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
  1. Disco
  2. Arquivo
    1. Video: AVI, DIVx, MP4, Xvid
  3. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Assim preservamos a acessibilidade em leitores de tela atualizados ou não, privilegiando todos os usuários.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://http://www.brucelawson.co.uk/2009/headings-in-html-5-and-accessibility/&#34; title=&#34;Link para Bruce Lawson - Headings in HTML 5 and accessibility&#34;&gt;Bruce Lawson &amp;#8211; Headings in HTML 5 and accessibility&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simples modal com CSS responsivo</title>
      <link>https://tableless.github.io/hugo-public/simples-modal-com-css-responsivo/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/simples-modal-com-css-responsivo/</guid>
      <description>

&lt;p&gt;Continuando com os artigos, vamos utilizar novamente os seletores de css para exibir nosso modal.&lt;/p&gt;

&lt;p&gt;Se você chegou aqui e não viu os posts anteriores, para conhecer a estrutura inicial acesse os links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/header-responsivo-somente-com-css/&#34; target=&#34;_blank&#34;&gt;Header responsivo somente com css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/destaques-responsivos/&#34; target=&#34;_blank&#34;&gt;Destaques responsivos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;De uma maneira bem simples veja como preparar seu html e css.&lt;/p&gt;

&lt;h2 id=&#34;o-label&#34;&gt;O LABEL&lt;/h2&gt;

&lt;p&gt;Com os destaques responsivos, vamos adicionar abaixo da descrição um label que terá a função de marcar o checkbox e por css iremos exibir o modal.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
&amp;nbsp; &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img1&#34; name=&#34;highlights&#34; checked=&#34;checked&#34; /&amp;gt;
&amp;nbsp; &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;lt;label class=&#34;highlights-button&#34; for=&#34;modal-chaves&#34;&amp;gt;Ver fotos do Chaves&amp;lt;/label&amp;gt;
&amp;nbsp; &amp;lt;/div&amp;gt;
&amp;nbsp;&amp;nbsp;
&amp;nbsp; ...
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;h2 id=&#34;o-css-do-botão&#34;&gt;O CSS DO BOTÃO&lt;/h2&gt;

&lt;p&gt;Vamos formatar o label para ser o nosso botão, lembrando que sempre precisamos usar a propriedade &amp;#8220;for&amp;#8221; para marcar o checkbox.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-button {
  display: inline-block;
  padding: 10px 15px 8px;
  cursor: pointer;
  border-radius: 3px;
  border: 1px solid #ccc;
  background-color: #ececec;
  -webkit-transition: background-color 300ms ease-in-out, border-color 300ms ease-in-out;
  transition: background-color 300ms ease-in-out, border-color 300ms ease-in-out;
}
&lt;/pre&gt;

&lt;p&gt;Adicionando o hover:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-button:hover {
  border: 1px solid #ececec;
  background-color: #ccc;
}
&lt;/pre&gt;

&lt;h2 id=&#34;o-html-do-modal&#34;&gt;O HTML DO MODAL&lt;/h2&gt;

&lt;p&gt;Para um melhor resultado vamos adicionar html antes do &amp;#8220;body&amp;#8221;, mas se quiser aplicar dentro da section sem problemas. Ao aplicar &amp;#8220;position: fixed&amp;#8221; o elemento ignora o &amp;#8220;position&amp;#8221; do pai e respeita o tamanho da janela.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;input type=&#34;checkbox&#34; id=&#34;modal_chaves&#34; /&amp;gt;
&amp;lt;div class=&#34;modal&#34;&amp;gt;
  &amp;lt;div class=&#34;modal-content&#34;&amp;gt;
    &amp;lt;h4&amp;gt;Foto Grande do Chaves&amp;lt;/h4&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-fotos-raras-4.jpg&#34; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;label class=&#34;modal-close&#34; for=&#34;modal_chaves&#34;&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;No resultado final poderá ver as modais aplicados dentro e fora da section.&lt;/p&gt;

&lt;h2 id=&#34;o-css-do-modal&#34;&gt;O CSS DO MODAL&lt;/h2&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.modal {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  opacity: 0;
  visibility: hidden;
  -webkit-transition: all 0.5s 0.5s ease-in-out;
  transition: all 0.5s 0.5s ease-in-out;
}

.modal-content {
  padding: 10px;
  max-width: 600px;
  min-width: 360px;
  max-height: 85%;
  overflow: auto;
  position: absolute;
  top: 5%;
  left: 50%;
  z-index: 2;
  opacity: 0;
  border-radius: 3px;
  background: #fff;
  -webkit-transform: translate(-50%, 0);
  -ms-transform: translate(-50%, 0);
  transform: translate(-50%, 0);
  -webkit-transition: all 0.5s ease-in-out;
  transition: all 0.5s ease-in-out;
}

.modal-content img {
  display: block;
  width: 100%;
  margin: 10px 0 0;
}

.modal-content p {
  padding-top: 10px;
  text-align: justify;
}&lt;/pre&gt;

&lt;p&gt;Agora formatando a cortina e o botão de fechar que é o label que colocamos depois do conteúdo do modal.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.modal-close {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: rgba(0,0,0,0.5);
}

.modal-close:after {
  content: &#34;X&#34;;
  float: right;
  margin: 5px 5px 0 0;
  width: 30px;
  height: 30px;
  position: relative;
  z-index: 3;
  text-align: center;
  line-height: 30px;
  cursor: pointer;
  background-color: rgba(255,255,255,0.8);
  border-radius: 20px;
  box-shadow: 0 0 3px #000;
}&lt;/pre&gt;

&lt;p&gt;Agora vamos esconder o checkbox e fazer nosso modal aparecer com &amp;#8220;:checked&amp;#8221; do css3.&lt;/p&gt;

&lt;p&gt;Um pequeno truque ao usar fixed e 50% para top, faz que o checkbox sempre fique no meio da janela evitando rolar a página ao ser selecionado. Se realizar um teste usando o inspect removendo o top: 50% e clicar no terceiro botão irá simular a rolagem.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;input[id*=&#34;modal_&#34;] {
  position: fixed;
  left: -9999px;
  top: 50%;
  opacity: 0;
}

input[id*=&#34;modal_&#34;]:checked + div.modal {
  opacity: 1;
  visibility: visible;
  -webkit-transition-delay: 0s;
  -ms-transition-delay: 0s;
  transition-delay: 0s;
}

input[id*=&#34;modal_&#34;]:checked + div.modal .modal-content {
  opacity: 1;
  -webkit-transform: translate(-50%, 0);
  -ms-transform: translate(-50%, 0);
  transform: translate(-50%, 0);
  -webkit-transition-delay: 0.5s;
  -ms-transition-delay: 0.5s;
  transition-delay: 0.5s;
}&lt;/pre&gt;

&lt;p&gt;Praticamente nosso css já está responsivo, mas vamos adaptar para resoluções menores que 768px.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
  .modal-content {
    padding: 10px 5%;
    min-width: 88%;
  }
}&lt;/pre&gt;

&lt;h2 id=&#34;pronto&#34;&gt;PRONTO&lt;/h2&gt;

&lt;p&gt;Temos um modal responsivo e seu conteúdo pode ser adaptado para qualquer tamanho, desde que faça isso acontecer.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Veja como ficou o resultado final&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/responsive-modal.html&#34; target=&#34;_blank&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;código completo no github&#34; href=&#34;https://github.com/palloi/responsive-header-only-css&#34; target=&#34;_blank&#34;&gt;Veja o código completo no github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;CONCLUINDO&lt;/h2&gt;

&lt;p&gt;Podemos aplicar de várias formas e uma delas é usando o &amp;#8220;:target&amp;#8221;, porém quando temos uma tela muito grande e ao fechar precisamos adicionar o &amp;#8220;#&amp;#8221;, isso faz que a página role para o topo.&lt;/p&gt;

&lt;p&gt;Agora com sua imaginação pode fazer diversas animações para exibir seu modal.&lt;/p&gt;

&lt;p&gt;Espero ter ajudado com a criação de modais só com css.&lt;/p&gt;

&lt;p&gt;Obrigado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Destaques responsivos</title>
      <link>https://tableless.github.io/hugo-public/destaques-responsivos/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/destaques-responsivos/</guid>
      <description>

&lt;p&gt;Hoje criaremos três destaques com um comportamento totalmente responsivo.&lt;/p&gt;

&lt;p&gt;Com um crescimento das SPAs e seguindo o mesmo conceito do artigo anterior, vou passar agora de uma forma simples de como usar, o input radio para transformar nossos destaques em galeria navegável.&lt;/p&gt;

&lt;h2 id=&#34;aproveitando&#34;&gt;Aproveitando&lt;/h2&gt;

&lt;p&gt;Como já temos um header responsivo, vamos continuar com a mesma estrutura até o final dos artigos só com css e html. Se você ainda não viu como criar um &lt;a href=&#34;http://tableless.com.br/header-responsivo-somente-com-css/&#34; title=&#34;Header responsivo somente com css&#34; target=&#34;_blank&#34;&gt;header responsivo, clique aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos iniciar realocando a foto do Chaves para um novo formato:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-2.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Pensando na Paty&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-3.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Quero tanto esse sanduiche iche iche&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Temos um simples html para 3 itens, deixei os nome das classes mais compreensível e semântico, observado pelo amigo Shankar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-header-only-css/demo-only-elements.html&#34; target=&#34;_blank&#34;&gt;Ver demo sem style&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Sempre pensando no responsivo, vamos deixar nossos itens em % para 3 colunas seguindo dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-item {
  float: left;
  margin: 0 0 0 2%;
  width: 32%;
}

.highlights-item:first-of-type {
  margin-left: 0;
}

.highlights-item img {
  display: block;
  width: 100%;
  margin: 0 0 5px;
}

.highlights-item p {
  font-size: 14px;
  text-align: center;
}
&lt;/pre&gt;

&lt;p&gt;Para cada item apliquei 32% em width + 2% em margin-left, se multiplicarmos por 3 a soma é 102% que passa os 100% representado pelo elemento pai. Por estourar o tamanho do pai o terceiro item sempre cai.&lt;/p&gt;

&lt;p&gt;Então selecionamos o primeiro item para zerar o margin usando o seletor &amp;#8220;:first-of-type&amp;#8221;, por que mais adiante vamos adicionar mais elementos e já evitamos quebrar o css se caso usássemos os &amp;#8220;first-child&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-header-only-css/demo-basic-highlights.html&#34; target=&#34;_blank&#34;&gt;Ver demo com style&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-responsivo&#34;&gt;O RESPONSIVO&lt;/h2&gt;

&lt;p&gt;Já apresentada a forma de como usar os seletores, agora vamos adicionar antes de cada item um input radio, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img1&#34; name=&#34;highlights&#34; checked=&#34;checked&#34; /&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  ...
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;o-css-para-transformar&#34;&gt;O CSS PARA TRANSFORMAR&lt;/h2&gt;

&lt;p&gt;Com o html simples para 3 colunas, vamos transformar em uma galeria suave com o &amp;#8216;media screen&amp;#8217;, &amp;#8216;transition&amp;#8217; e &amp;#8216;transform&amp;#8217;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
  .highlights-item {
    width: 100%;
    margin-left: 0;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    visibility: hidden;
    -webkit-transition: all 500ms ease-in-out;
    transition: all 500ms ease-in-out;
    -webkit-transform: scale(0.9);
    -ms-transform: scale(0.9);
    transform: scale(0.9);
  }
}
&lt;/pre&gt;

&lt;p&gt;Nesse css deixei todos os itens com &amp;#8216;position absolute&amp;#8217;, mas isso faz que todo o conteúdo abaixo dele suba ocupando seu espaço. Mas como teremos um ativo vamos resolver logo abaixo.&lt;/p&gt;

&lt;p&gt;Importante lembrar que sempre precisamos de um radio marcado com &amp;#8216;checked&amp;#8217;, quando responder ao responsivo teremos sempre um ativo. Para mostrar o item ativo vamos adicionar as seguintes linhas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
   /*checked*/
  .highlights input:checked + div {
    position: relative;
    opacity: 1;
    visibility: visible;
    z-index: 1;
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
&lt;/pre&gt;

&lt;p&gt;O item que estiver ativo, recebe o &amp;#8216;position relative&amp;#8217; para bloquear sua área e outras propriedades para exibir suavemente.&lt;/p&gt;

&lt;p&gt;Como os type&amp;#8217;s dos input&amp;#8217;s são &amp;#8216;radio&amp;#8217;, teremos somente um &amp;#8216;:checked&amp;#8217; por grupo &amp;#8216;name&amp;#8217;.&lt;/p&gt;

&lt;h2 id=&#34;navegação-com-label&#34;&gt;NAVEGAÇÃO COM LABEL&lt;/h2&gt;

&lt;p&gt;Para selecionar cada radio, precisamos relacionar cada label usando o for e vamos adicionar o seguinte html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  ...
  &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img3&#34; name=&#34;highlights&#34; /&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    ....
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-buttons&#34;&amp;gt;
    &amp;lt;label for=&#34;radio-img1&#34;&amp;gt;Image 1&amp;lt;/label&amp;gt;
    &amp;lt;label for=&#34;radio-img2&#34;&amp;gt;Image 2&amp;lt;/label&amp;gt;
    &amp;lt;label for=&#34;radio-img3&#34;&amp;gt;Image 3&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Por padrão defino &amp;#8216;display none&amp;#8217; para os botões e com resoluções menores 768px mudamos para &amp;#8216;block&amp;#8217; para exibir.&lt;/p&gt;

&lt;h2 id=&#34;label-e-seu-css&#34;&gt;LABEL E SEU CSS&lt;/h2&gt;

&lt;p&gt;Agora que adicionamos os label&amp;#8217;s que tem a missão dos botões, vamos inserir uma formatação bem simples.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-buttons {
  display: none;
  clear: both;
  text-align: center;
}

.highlights-buttons label {
  display: inline-block;
  width: 15px;
  height: 15px;
  margin: 0 10px; 
  border-radius: 10px;
  background-color: #ccc;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  text-indent: -9999px;
  -webkit-transition: background-color 300ms ease-in-out;
  transition: background-color 300ms ease-in-out;
}
/*exibindo os botões*/
@media screen and (max-width: 767px) {
  .highlights-buttons {
    display: block;
  }
}
&lt;/pre&gt;

&lt;p&gt;Estamos falando de css puro e sempre precisamos definir o que vai ser feito, veja como aplicar o label ativo nessa estrutura que criamos:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights input:nth-of-type(1):checked ~ .highlights-buttons label:nth-child(1),
.highlights input:nth-of-type(2):checked ~ .highlights-buttons label:nth-child(2),
.highlights input:nth-of-type(3):checked ~ .highlights-buttons label:nth-child(3) {
  background-color: #000;
}
&lt;/pre&gt;

&lt;p&gt;Para evitar a repetição manual a cada novo item, se você usa SASS ou LESS vai tirar de letra com alguma função.&lt;/p&gt;

&lt;h2 id=&#34;e-pronto&#34;&gt;E PRONTO&lt;/h2&gt;

&lt;p&gt;Mais uma vez com poucos elementos e css, conseguimos deixar nossos destaques em uma galeria navegável e responsivo.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Veja como ficou o resultado final&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/responsive-highlights.html&#34; target=&#34;_blank&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Código completo no github&#34; href=&#34;https://github.com/palloi/responsive-header-only-css&#34; target=&#34;_blank&#34;&gt;Veja o código completo no github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;CONCLUINDO&lt;/h2&gt;

&lt;p&gt;Existe diversas maneiras de aplicar no css e quantidades de itens, espero que todos possam aproveitar um pouco do que foi apresentado.&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Header responsivo somente com css</title>
      <link>https://tableless.github.io/hugo-public/header-responsivo-somente-com-css/</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/header-responsivo-somente-com-css/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/12/header-responsive-only-css.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/12/header-responsive-only-css.png&#34; alt=&#34;header-responsive-only-css&#34; class=&#34;alignnone size-full wp-image-46175&#34; srcset=&#34;uploads/2014/12/header-responsive-only-css.png 750w, uploads/2014/12/header-responsive-only-css-265x106.png 265w, uploads/2014/12/header-responsive-only-css-400x160.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A cada novo projeto queremos alcançar o máximo de usuários, não importa se o dispositivo seja grande ou pequeno, tem que funcionar.&lt;/p&gt;

&lt;p&gt;Com uma abordagem simples e rápida, esse tutorial vai te fazer pensar antes de querer usar o bootstrap só para ter o menu responsivo, claro que ele tem suas vantagens mas procuro sempre desenvolver do zero.&lt;/p&gt;

&lt;p&gt;Estarei criando uma serie de tutoriais abordando o assunto e espero que gostem do meu primeiro artigo.&lt;/p&gt;

&lt;h2 id=&#34;valendo&#34;&gt;Valendo!!!&lt;/h2&gt;

&lt;p&gt;Hoje em dia quando o cliente diz que o site é responsivo, quem aqui pensa no bootstrap?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;#8220;Fazer menu responsivo é só com bootstrap&amp;#8221; ou &amp;#8220;vamos precisar de javascript.&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nada contra o bootstrap, mas prefiro o &lt;a title=&#34;Locawebstyle&#34; href=&#34;http://locaweb.github.io/locawebstyle/&#34; target=&#34;_blank&#34;&gt;Locawebstyle&lt;/a&gt; que está lindo e o javascript é maravilhoso.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos criar primeiro nosso html com header simples:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;h1 class=&#34;fL&#34;&amp;gt;
    &amp;lt;a href=&#34;#&#34; title=&#34;A TURMA DO CHAVES&#34;&amp;gt;A TURMA DO CHAVES&amp;lt;/a&amp;gt;
  &amp;lt;/h1&amp;gt;

  &amp;lt;nav class=&#34;fR&#34;&amp;gt;
    &amp;lt;ul class=&#34;l2&#34;&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Chaves&#34; title=&#34;Chaves&#34;&amp;gt;Chaves&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Chiquinha&#34; title=&#34;Chiquinha&#34;&amp;gt;Chiquinha&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Seu-Madruga&#34; title=&#34;Seu Madruga&#34;&amp;gt;Seu Madruga&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&#34;#Quico&#34; title=&#34;Quico&#34;&amp;gt;Quico&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/pre&gt;

&lt;p&gt;​Agora com o nosso html pronto, vamos fazer o primeiro teste olhando nosso html puro e formatar usando poucas linhas de css.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Ver demo sem style.&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/demo-only-elements.html&#34; target=&#34;_blank&#34;&gt;Ver demo sem style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Como nosso header ficará sempre fixo no topo, vamos formatar da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;header {
  min-height: 60px;
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  border-bottom: 1px solid #ccc;
  background: #ECECEC;
  z-index: 2;
}
&lt;/pre&gt;

&lt;p&gt;Agora com o header formatado, o segundo teste é redimensionar o navegador para perceber que o header sempre acompanha e ao diminuir muito tem quebra por falta de espaço.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Ver demo com style.&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/demo-basic-header.html&#34; target=&#34;_blank&#34;&gt;Ver demo com style.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Montamos um header simples e funcional, com mais 3 elementos e CSS teremos um header simples e responsivo.&lt;/p&gt;

&lt;p&gt;Esses elementos são dois label&amp;#8217;s e um checkbox, com o selector &amp;#8216;~&amp;#8217; do css3 vamos transformar o header.&lt;/p&gt;

&lt;h2 id=&#34;começando-o-responsivo&#34;&gt;Começando o responsivo&lt;/h2&gt;

&lt;p&gt;Vamos adicionar os elementos antes da nav e o html fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;h1 class=&#34;fL&#34;&amp;gt;
    &amp;lt;a href=&#34;#&#34; title=&#34;A TURMA DO CHAVES&#34;&amp;gt;A TURMA DO CHAVES&amp;lt;/a&amp;gt;
  &amp;lt;/h1&amp;gt;
  
  &amp;lt;input type=&#34;checkbox&#34; id=&#34;control-nav&#34; /&amp;gt;
  &amp;lt;label for=&#34;control-nav&#34; class=&#34;control-nav&#34;&amp;gt;&amp;lt;/label&amp;gt;
  &amp;lt;label for=&#34;control-nav&#34; class=&#34;control-nav-close&#34;&amp;gt;&amp;lt;/label&amp;gt;

  &amp;lt;nav class=&#34;fR&#34;&amp;gt;
    &amp;lt;ul class=&#34;l2&#34;&amp;gt;
      ...
    &amp;lt;/ul&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Nesse ponto o checkbox tem o papel de substituir o javascript.&lt;/p&gt;

&lt;p&gt;Conseguimos também por css saber se o elemento está marcado com o famoso &amp;#8220;:checked&amp;#8221; que todos já usaram com jQuery.&lt;/p&gt;

&lt;h2 id=&#34;seu-projeto-suas-medidas&#34;&gt;Seu projeto, suas medidas&lt;/h2&gt;

&lt;p&gt;Para nosso exemplo adicionei no head:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, height=device-height, initial-scale=1, maximum-scale=1, user-scalable=no&#34; /&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e no css:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px)
&lt;/pre&gt;

&lt;p&gt;Quando redimensionar o navegador menor que 768px, a formatação do header vai se comportar de outra maneira e já escondida utilizando transform:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
  header .control-nav {
    position: absolute;
    right: 20px;
    top: 20px;
    display: block;
    width: 30px;
    padding: 5px 0;
    border: solid #333;
    border-width: 3px 0;
    z-index: 2;
    cursor: pointer;
  }

  header .control-nav:before {
    content: &#34;&#34;;
    display: block;
    height: 3px;
    background: #333;
  }

  header .control-nav-close {
    position: fixed;
    right: 0;
    top: 0;
    bottom: 0;
    left: 0;
    display: block;
    z-index: 1;
    background: rgba(0,0,0,0.4);
    -webkit-transition: all 500ms ease;
    transition: all 500ms ease;
    -webkit-transform: translate(100%, 0);
    -ms-transform: translate(100%, 0);
    transform: translate(100%, 0);
  }

  header nav {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    width: 250px;
    border-left: 1px solid #ccc;
    background: #fff;
    overflow-x: auto;
    z-index: 2;
    -webkit-transition: all 500ms ease;
    transition: all 500ms ease;
    -webkit-transform: translate(100%, 0);
    -ms-transform: translate(100%, 0);
    transform: translate(100%, 0);
  }
}
&lt;/pre&gt;

&lt;p&gt;Formatei o &amp;#8220;label .control-nav&amp;#8221; para ser o botão responsivo, o &amp;#8220;label .control-nav-close&amp;#8221; para ser a cortina bloqueando o fundo e o &amp;#8216;nav&amp;#8217; para ficar fixo e redimensionável.&lt;/p&gt;

&lt;h2 id=&#34;agora-o-pulo-do-gato&#34;&gt;Agora o pulo do gato&lt;/h2&gt;

&lt;p&gt;Utilizando dos seletores do CSS3 que são os &amp;#8216;:checked&amp;#8217; e &amp;#8216;~&amp;#8217;, conseguimos formatar elementos de acordo com a necessidade, &lt;a title=&#34;Veja a documentação&#34; href=&#34;http://www.w3.org/TR/css3-selectors/#selectors&#34; target=&#34;_blank&#34;&gt;veja a documentação&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sendo mais claro, com o seletor &amp;#8216;~&amp;#8217; você consegue selecionar elemento do mesmo pai declarado depois dele.&lt;/p&gt;

&lt;p&gt;Ao marcar o input, no css usando o transform vamos exibir suavemente o menu, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;#control-nav:checked ~ .control-nav-close {
  -webkit-transform: translate(0, 0);
  -ms-transform: translate(0, 0);
  transform: translate(0, 0);
}

#control-nav:checked ~ nav {
  -webkit-transform: translate(0, 0);
  -ms-transform: translate(0, 0);
  transform: translate(0, 0);
}
&lt;/pre&gt;

&lt;h2 id=&#34;pronto&#34;&gt;Pronto&lt;/h2&gt;

&lt;p&gt;Agora o menu é responsivo e bem simples com poucos elementos.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Veja como ficou o resultado final&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/&#34; target=&#34;_blank&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;código completo no github&#34; href=&#34;https://github.com/palloi/responsive-header-only-css&#34; target=&#34;_blank&#34;&gt;Veja o código completo no github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revista Front-end Magazine</title>
      <link>https://tableless.github.io/hugo-public/revista-front-end-magazine/</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/revista-front-end-magazine/</guid>
      <description>&lt;p&gt;No último dia 28 de Julho a DevMedia lançou mais uma revista: a Front-end Magazine, com foco em desenvolvimento para tecnologias front-end. Esta já é a décima revista lançada pela empresa que terá uma publicação mensal e nada mais que 110 mil caracteres distribuídos em, pelo menos, três artigos com muito conteúdo de qualidade, atualizado e totalmente focado para o público web.&lt;/p&gt;

&lt;p&gt;A revista terá como editor geral o &lt;a href=&#34;http://www.devmedia.com.br/autor/diogo-souza/256249&#34;&gt;consultor Diogo Souza&lt;/a&gt;, que trabalha há mais de 5 anos com desenvolvimento front-end, back-end, web, mobile, bem como tecnologias afins.&lt;/p&gt;

&lt;p&gt;O conteúdo da revista estará dividido basicamente entre a produção de conteúdo teórico e prático, este último com uma predominância maior. Dentre as categorias nas quais os mesmos se enquadram, podemos citar:&lt;/p&gt;

&lt;p&gt;o Essencialmente teórico: neste tipo de artigo teremos a apresentação de teorias importantes para o desenvolvimento front-end, focadas sempre no conceito.&lt;/p&gt;

&lt;p&gt;o Essencial ou principalmente prático: onde o leitor poderá encontrar abordagens direcionadas à prática, com o uso de step-by-step, ferramentas, boas práticas, dentre outras.&lt;/p&gt;

&lt;p&gt;o Artigo sobre novidades: artigos que abordarão os últimos lançamentos da comunidade front-end.&lt;/p&gt;

&lt;p&gt;o Cursos: artigos que trarão um escopo aprofundado de determinadas tecnologias, se dividindo em dois ou mais artigos além das edições.&lt;/p&gt;

&lt;p&gt;Além disso, vale lembrar que o nicho de tecnologias abordadas é bem amplo, indo desde o JavaScript e suas bibliotecas e extensões, até a HTML5, External APIs, Ajax, etc.&lt;/p&gt;

&lt;p&gt;Então não perca mais tempo e acesse logo a &lt;a href=&#34;http://www.devmedia.com.br/revista-front-end-magazine-1/31029&#34;&gt;primeira edição da Revista Front-end Magazine&lt;/a&gt; que veio recheada de ótimos artigos e, o melhor de tudo, totalmente gratis.&lt;/p&gt;

&lt;p&gt;Obs.: Apenas a primeira edição será gratuita. &lt;a href=&#34;http://www.devmedia.com.br/revista-front-end-magazine&#34;&gt;Para acessar as demais edições&lt;/a&gt; você precisará ter &lt;a href=&#34;http://www.devmedia.com.br/mvp/&#34;&gt;uma assinatura MVP&lt;/a&gt;, que te dará acesso a todo o conteúdo da DevMedia, inclusive as outras revistas.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Este é um publieditorial do Tableless. &lt;a href=&#34;http://tableless.com.br/anuncie-no-tableless/&#34;&gt;Anuncie no Tableless&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gerando arquivos estáticos com o Middleman</title>
      <link>https://tableless.github.io/hugo-public/gerando-arquivos-estaticos-com-o-middleman/</link>
      <pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/gerando-arquivos-estaticos-com-o-middleman/</guid>
      <description>

&lt;p&gt;O Middleman, assim como o &lt;a href=&#34;http://tableless.com.br/jekyll-servindo-sites-estaticos/&#34;&gt;Jekyll&lt;/a&gt;, serve sites estáticos, sem banco de dados, baseados em puro código HTML e informação. Existem uma &lt;a href=&#34;https://www.staticgen.com&#34;&gt;série de sistemas&lt;/a&gt; desse tipo e é uma das minhas armas em muitos projetos.&lt;/p&gt;

&lt;h2 id=&#34;instalando&#34;&gt;Instalando&lt;/h2&gt;

&lt;p&gt;Supondo que você tem o Ruby e RubyGems na sua máquina, basta instalar a GEM do Middleman:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;$ gem install middleman
&lt;/pre&gt;

&lt;p&gt;Depois de instalado, os comandos básicos são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;middleman init&lt;/strong&gt; para iniciar um projeto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;middleman server&lt;/strong&gt; para rodar essa aplicação/projeto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;middleman build&lt;/strong&gt; para compilar os assets e preparar uma pasta com os arquivos estáticos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;iniciando-um-site&#34;&gt;Iniciando um site&lt;/h2&gt;

&lt;p&gt;Abra novamente o terminal e digite o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;middleman init &lt;strong&gt;nome_do_projeto&lt;/strong&gt;
&lt;/pre&gt;

&lt;p&gt;Se a pasta não existir, ele vai criá-la. Lá dentro ele vai colocar toda a estrutura de arquivos para funcionar seu projeto. Desapegue da estrutura de arquivos que você ama e adora. A estrutura que o Middleman monta é bastante simples e bem enxuta. Basicamente é formada da pasta &lt;code&gt;source&lt;/code&gt; e do arquivo &lt;code&gt;config.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O arquivo &lt;code&gt;config.rb&lt;/code&gt; é onde você vai define as configurações do Middleman e informações de como habilitar algumas features que podem ser úteis aos desenvolver seu projeto e principalmente de como habilitar o módulo de blog (isso mesmo, blog).&lt;/p&gt;

&lt;p&gt;Na pasta &lt;code&gt;source&lt;/code&gt; é onde tem todo o seu projeto. A estrutura inicial dessa pasta é a seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;images
index.html.erb
javascripts
layouts
stylesheets
&lt;/pre&gt;

&lt;p&gt;Logo no começo eu já mudo algumas configurações para modificar um pouco essa estrutura, deixando tudo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;assets/
  images
  javascripts
  stylesheets
index.html.erb
layouts
&lt;/pre&gt;

&lt;p&gt;Depois que movi as pastas do jeito que eu quis, mudo lá no &lt;code&gt;config.rb&lt;/code&gt; três variáveis:&lt;/p&gt;

&lt;pre class=&#34;lang-ruby&#34;&gt;set :css_dir, &#39;stylesheets&#39;
set :js_dir, &#39;javascripts&#39;
set :images_dir, &#39;images&#39;
&lt;/pre&gt;

&lt;p&gt;Fica isso aqui:&lt;/p&gt;

&lt;pre class=&#34;lang-ruby&#34;&gt;set :css_dir, &#39;assets/stylesheets&#39;
set :js_dir, &#39;assets/javascripts&#39;
set :images_dir, &#39;assets/images&#39;
&lt;/pre&gt;

&lt;p&gt;E basicamente essa é a única mudança que faço para deixar meu ambiente funcionando!&lt;/p&gt;

&lt;h2 id=&#34;rodando-o-projeto&#34;&gt;Rodando o projeto&lt;/h2&gt;

&lt;p&gt;Agora que seu ambiente está configurado, vamos rodar. Estando dentro da pasta do projeto, rode:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;middleman server
&lt;/pre&gt;

&lt;p&gt;Isso vai subir o projeto na porta &lt;strong&gt;&lt;a href=&#34;http://localhost:4567/&#34;&gt;http://localhost:4567/&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se você já tiver algum projeto nessa porta, você pode mudar colocando a flag &lt;strong&gt;&amp;#8211;p&lt;/strong&gt; no comando escolhendo a porta:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;middleman server --p 3001
&lt;/pre&gt;

&lt;p&gt;Depois que seu projeto está rodando, você pode escrever CSS, HTML e o que quiser.&lt;/p&gt;

&lt;h2 id=&#34;templates-e-partials&#34;&gt;Templates e Partials&lt;/h2&gt;

&lt;p&gt;Acho que você percebeu ali em cima que além dos assets, existe uma pasta chamada &lt;strong&gt;layouts&lt;/strong&gt;. Essa pasta é a responsável por guardar os templates que você vai usar nas páginas. Você tem um template para páginas de texto, para galerias e etc. Esses templates diferentes, vão ali e você vai indicar indicar em cada arquivo, qual template de layout ele vai utilizar.&lt;/p&gt;

&lt;p&gt;Esse aqui é o código que &lt;strong&gt;layout.erb&lt;/strong&gt; vem como padrão:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!doctype html&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;

    &amp;lt;!-- Always force latest IE rendering engine or request Chrome Frame --&amp;gt;
    &amp;lt;meta content=&#34;IE=edge,chrome=1&#34; http-equiv=&#34;X-UA-Compatible&#34;&amp;gt;

    &amp;lt;!-- Use title if it&#39;s in the page YAML frontmatter --&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;%= current_page.data.title || &#34;The Middleman&#34; %&amp;gt;&amp;lt;/title&amp;gt;

    &amp;lt;%= stylesheet_link_tag &#34;normalize&#34;, &#34;all&#34; %&amp;gt;
    &amp;lt;%= javascript_include_tag  &#34;all&#34; %&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body class=&#34;&amp;lt;%= page_classes %&amp;gt;&#34;&amp;gt;
    &amp;lt;%= yield %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Esse seria o template padrão usado para as páginas. Como vou ter vários templates, que usarão as mesmas informações da tag HEAD e do FOOTER, eu prefiro separar essas informações em partials. Ou se você escreve PHP, em includes. Funcionam diferente, mas a ideia geral é a mesma: reutilizar blocos de código em arquivos do projeto.&lt;/p&gt;

&lt;p&gt;Para isso, geralmente crio também uma pasta &lt;strong&gt;partials&lt;/strong&gt; para guardar esses pedaços que serão reutilizados várias vezes no projeto. Talvez esta é a parte mais legal de usar geradores como o Middleman e o Jekyll. Como tudo é arquivo estático, facilitando minha vida, eu ainda consigo ter a facilidade de separar meus arquivos da maneira que eu quiser.&lt;/p&gt;

&lt;p&gt;A estrutura de código que mostrei lá em cima, pode ficar assim:&lt;/p&gt;

&lt;pre class=&#34;lang-ruby&#34;&gt;&amp;lt;%= partial &#39;partials/header&#39;%&amp;gt;
&amp;lt;%= yield %&amp;gt;
&amp;lt;%= partial &#39;partials/footer&#39;%&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Mas se não tem Banco de Dados, como que você define informações de título, descrição da página ou qualquer outra coisa? Simples: todos os arquivos de conteúdo tem um cabeçalho em formato YAML, no início no arquivo que leva essas informações.&lt;/p&gt;

&lt;h3 id=&#34;um-pouco-sobre-yaml&#34;&gt;Um pouco sobre YAML&lt;/h3&gt;

&lt;p&gt;O formato &lt;strong&gt;YAML&lt;/strong&gt; é conhecido pela facilidade de leitura. Ele foi criado para estruturarmos informação de maneira que seja fácil de entender e escrever. Ou seja, ele é um formato simples para escrevermos manualmente, mas que também possamos manipular via programação.&lt;/p&gt;

&lt;p&gt;Qualquer arquivo que contém um bloco YAML – que geralmente é chamado de &lt;strong&gt;front-matter&lt;/strong&gt; – será processado como um arquivo especial. O front-matter precisa ser a primeira coisa do arquivo e deve estar num formato válido de YAML. Toda página do seu site, tanto no Jekyll quanto no Middleman, precisam começar com uma estrutura assim:&lt;/p&gt;

&lt;pre class=&#34;lang-yaml&#34;&gt;---
title: Home
layout: default
---
&lt;/pre&gt;

&lt;p&gt;Simples, ahn? O bloco é demarcado pelos três traços no começo e no fim. TEM que ser três traços. Nem mais, nem menos. O código YAML são as duas variáveis &lt;strong&gt;layout&lt;/strong&gt; e &lt;strong&gt;title&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ambos os sistemas usam essa notação para organizar seus arquivos e informações. Você pode definir variáveis em cada um dos arquivos para fazer condições nas páginas. Se em uma página, por exemplo, eu quero que a sidebar apareça, a notação YAML dela vai se algo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-yaml&#34;&gt;---
title: Contato
layout: interna
sidebar: true
---
&lt;/pre&gt;

&lt;p&gt;A variável &lt;strong&gt;sidebar&lt;/strong&gt; com o valor &lt;strong&gt;false&lt;/strong&gt; foi criada por mim. No template, usarei algo parecido com isso, no Middleman:&lt;/p&gt;

&lt;pre class=&#34;lang-ruby&#34;&gt;&amp;lt;% if current_page.data.sidebar? %&amp;gt;
  &amp;lt;%= partial &#39;partials/header&#39;%&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Lindo e simples. Quando buildar o projeto. O sistema já vai compilar os arquivos da maneira correta, com o código sidebar, no lugar que você pediu.&lt;/p&gt;

&lt;h2 id=&#34;fazendo-o-build-do-projeto&#34;&gt;Fazendo o build do projeto&lt;/h2&gt;

&lt;p&gt;O comando &lt;strong&gt;middleman build&lt;/strong&gt; vai compilar seu projeto em uma pasta &lt;strong&gt;build&lt;/strong&gt;. Lá dentro terão os arquivos usados no projeto, praticamente na mesma estrutura que você deixou no projeto original, só que agora tudo estático em HTML.&lt;/p&gt;

&lt;p&gt;Geralmente, nos projetos que me envolvo, onde o cliente precisa apenas de arquivos estáticos, eu envio essa pasta build. Facilita muito minha vida. Se eu preciso fazer o HTML/CSS de um projeto com milhares de páginas, eu posso simplesmente usar o Middleman ou qualquer outro gerador similar, para me ajudar a separar partials/includes dos pedaços comuns de código, como HEADER, FOOTER, SIDEBAR e etc&amp;#8230; Depois é só buildar o projeto e pronto. Ele monta as partes automaticamente para mim.&lt;/p&gt;

&lt;p&gt;Há uma série de outras dicas sobre o Middleman aqui, como fazer um blog por exemplo, mas deixo para próxima. Por enquanto, isso aqui já consegue te ajudar bastante.&lt;/p&gt;

&lt;p&gt;Estou estudando &lt;a href=&#34;https://ghost.org/download/&#34;&gt;Ghost&lt;/a&gt; ultimamente. Em um projeto de duas páginas, é muito prático usar um Middleman da vida, mas o cliente ainda quer ter a facilidade de criar páginas ou modificar o conteúdo. Certamente eu não vou instruí-lo para que ele faça isso editando arquivos no Sublime. Logo, uma interface administrativa faz bastante falta. O Ghost trabalha com arquivos estáticos e tem uma interface administrativa básica, para gerenciar o conteúdo. Tendo mais novidades, escrevo por aqui.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Anotações Palestra 16ELW – Zeno Rocha</title>
      <link>https://tableless.github.io/hugo-public/anotacoes-palestra-16elw-zeno-rocha/</link>
      <pubDate>Tue, 22 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/anotacoes-palestra-16elw-zeno-rocha/</guid>
      <description>

&lt;p&gt;Essas foram as minhas anotações que extrai da palestra que o &lt;a href=&#34;http://zenorocha.com&#34;&gt;Zeno Rocha&lt;/a&gt; fez no 16 Encontro Locaweb de Curitiba em 2014.&lt;/p&gt;

&lt;p&gt;Ainda vamos passar por mais 3 cidades: &lt;a href=&#34;http://eventos.locaweb.com.br/16o-encontro-locaweb-de-profissionais-de-internet-porto-alegre/&#34;&gt;Porto Alegre&lt;/a&gt;, &lt;a href=&#34;http://eventos.locaweb.com.br/16o-encontro-locaweb-de-profissionais-de-internet-rio-de-janeiro/&#34;&gt;Rio de Janeiro&lt;/a&gt; e &lt;a href=&#34;http://eventos.locaweb.com.br/16o-encontro-locaweb-de-profissionais-de-internet-sao-paulo/&#34;&gt;São Paulo&lt;/a&gt;. Se você ainda não participou deste evento, corra! O Tableless escolheu os palestrantes e estamos falando sobre assuntos bem diversos sobre desenvolvimento web. &lt;a href=&#34;http://eventos.locaweb.com.br&#34;&gt;Faça sua inscrição&lt;/a&gt;!&lt;/p&gt;

&lt;h1 id=&#34;sobre-sua-carreira-e-comportamento&#34;&gt;Sobre sua carreira e comportamento&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;A moda toda é largar tudo e empreender em alguma coisa&lt;/li&gt;
&lt;li&gt;Todo mundo é manipulado pelas cifras do mercado&lt;/li&gt;
&lt;li&gt;Nós temos vários heróis no mercado como o Steve Jobs, Bill Gates etc&lt;/li&gt;
&lt;li&gt;Mas não é tão fácil chegar no ponto destes caras. Você deve mirar fazer algo maior que eles.&lt;/li&gt;
&lt;li&gt;Você pode seguir outro caminho, fazer outras coisas, ter outras oportunidades.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;saiba-reconhecer-as-oportunidades&#34;&gt;Saiba Reconhecer as oportunidades.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Em 2010 a Apple matou o Flash e reconheceu o HTML5 como uma alternativa válida&lt;/li&gt;
&lt;li&gt;As oportunidades podem ser simples experimentos com qualquer linguagem. Qual o sentido de criar experimentos que só você vai gostar ou que só vai servir para você aprender?&lt;/li&gt;
&lt;li&gt;Mas esses experimentos aparentemente sem importância podem alavancar sua carreira de maneira imprevisível.&lt;/li&gt;
&lt;li&gt;O Futuro é o HTML11. &lt;a href=&#34;http://vimeo.com/html11&#34;&gt;http://vimeo.com/html11&lt;/a&gt; 😉&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;não-tenha-medo-do-novo&#34;&gt;Não tenha medo do novo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;O Flash já foi o queridinho um dia.&lt;/li&gt;
&lt;li&gt;Mas outras ferramentas e tecnologias podem chegar e quando chegam, você precisa saber se comportar.&lt;/li&gt;
&lt;li&gt;Como você se comporta diante de mudanças?&lt;/li&gt;
&lt;li&gt;O que importa é como você vai encarar essas mudanças.&lt;/li&gt;
&lt;li&gt;Encare o desafio e não deixe o bonde passar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;não-deixe-o-bonde-passar&#34;&gt;Não deixe o bonde passar&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tenha um desafio. Crie um projeto open source, não importa o que seja, mas faça. Claro, de preferência que seja útil para alguém.&lt;/li&gt;
&lt;li&gt;Não tenha medo de divulgar seu código.&lt;/li&gt;
&lt;li&gt;Não tenha medo de se expor.&lt;/li&gt;
&lt;li&gt;Não tenha medo de palestrar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;freela-não-compensa-8230&#34;&gt;Freela não compensa&amp;#8230;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ligue o foda-se para o dinheiro.&lt;/li&gt;
&lt;li&gt;A não ser que você precise mesmo, mas para manter seu filho, sua casa e etc.&lt;/li&gt;
&lt;li&gt;Dinheiro é consequência.&lt;/li&gt;
&lt;li&gt;Opte por experiências e não por dinheiro.&lt;/li&gt;
&lt;li&gt;Foque-se em apenas uma coisa. Freela pode dar errado. Não opte por fazer freela.&lt;/li&gt;
&lt;li&gt;Será que contribuir em um projeto opensource não é melhor que fazer um freela? Pode não fazer sentido, mas pense bem.&lt;/li&gt;
&lt;li&gt;Se você não mensurar suas tarefas, você não vai saber quanto leva pra fazer seus projetos.&lt;/li&gt;
&lt;li&gt;Você estima baseado nas suas experiências.&lt;/li&gt;
&lt;li&gt;Lembre-se: estimativa não é para acertar, mas é pra chegar perto.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;qualidade-acima-de-quantidade&#34;&gt;Qualidade acima de quantidade&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Prefira trabalhar 1 ano em um case bem feito do que em vários ruins.&lt;/li&gt;
&lt;li&gt;Tenha orgulho de mostrar seu nome em projetos bem feitos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pró-atividade-é-tudo&#34;&gt;Pró-atividade é tudo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Não espere seu chefe mandar, se a demanda não existe, crie uma.&lt;/li&gt;
&lt;li&gt;Crie demandas que dão valor aos seus projetos internos&lt;/li&gt;
&lt;li&gt;Crie demandas que dão valor à empresa que você trabalha&lt;/li&gt;
&lt;li&gt;Faça pessoas chorarem com seu projeto. Mude a cabeça das pessoas com suas ideias.&lt;/li&gt;
&lt;li&gt;Não espere alguém dizer o que você deve fazer.&lt;/li&gt;
&lt;li&gt;Invista bastante tempo aprendendo ferramentas.&lt;/li&gt;
&lt;li&gt;E quando aprendeu bastante uma ferramenta, aprenda outra.&lt;/li&gt;
&lt;li&gt;Invista tempo, mas não fique apegado a isso.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ame-a-segunda-feira&#34;&gt;Ame a segunda-feira&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Não odeie a sexta-feira. Se você passa a semana inteira esperando que ela acabe, peça demissão e vá embora.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tente-mudar-o-mundo&#34;&gt;Tente mudar o mundo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Não importa qual mundo seja. Pode ser o seu mundo. Pode ser o mundo todo. Não importa, mas mude alguma coisa.&lt;/li&gt;
&lt;li&gt;A mudança de vários mundos faz uma grande diferença no mercado como um todo&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>