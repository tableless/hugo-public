<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Comportamento on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/comportamento/index.xml</link>
    <description>Recent content in Comportamento on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/comportamento/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Desenvolvedores não são máquinas</title>
      <link>https://tableless.github.io/hugo-public/desenvolvedores-nao-sao-maquinas/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/desenvolvedores-nao-sao-maquinas/</guid>
      <description>&lt;p&gt;O setor de desenvolvimento de uma empresa muitas vezes é visto como o setor operacional, onde pessoas passam seu tempo construindo sites, sistemas, apps etc. Os prazos e as especificações são previamente debatidos por um grupo X de pessoas, e quando isso é decidido, essas informações são entregues aos programadores, que por fim apenas digitam sem parar regras de negócio em uma linguagem X ou Y, como máquinas programadas apenas para vomitar códigos.&lt;/p&gt;

&lt;p&gt;Sabemos que isso é verdade em grande parte das empresas, mas não deveria ser. Antes de um programador iniciar uma tarefa, houve muita pesquisa, diversos testes, forks de projetos parecidos, conversas na hora do café e mais pesquisa. A ideia não é apenas entregar mais um software, mas entregar software de boa qualidade, testado e escalável.&lt;/p&gt;

&lt;p&gt;Apesar de se tratar da área de exatas, programação exige criatividade. Não da maneira que a maioria das pessoas estão acostumadas. Não estamos sentados em algum lugar pensando em um &amp;#8220;jingle chiclete&amp;#8221; ou em um slogan marcante&amp;#8230; Não que isso não seja importante, porque é. Mas esse tipo de criatividade é diferente das que executamos no nosso dia a dia.&lt;/p&gt;

&lt;p&gt;Mas, ainda assim, em muitas empresas nesse Brasilzão afora continuam considerando programadores como máquinas digitadoras. Ao longo dos anos somos avaliados por número de atividades entregues e o temido e maçante apontamento de horas, por entregas antes ou depois da deadline e demais números que não fogem do convencional e conservador. Não digo que essas métricas não devam ser utilizadas, mas sim que devem ser questionadas e avaliadas de acordo com o perfil da equipe. Quem nunca temeu a hora de estimar uma tarefa?&lt;/p&gt;

&lt;p&gt;Indicadores tradicionais costumam apontar resultados apenas do período de início e final de desenvolvimento, mas acaba pecando em medir resultados que nem sempre são colocados na conta do time, como número de erros reportados por clientes, ou então tempo despendido em manutenção/melhoria da feature por outro dev. Muitas vezes, um programador se sente acuado ou até motivado em gerar um bom indicador, que passa a focar apenas em melhorar seus gráficos, e não na qualidade do seu trabalho. Frases como “Se retornarmos apenas os dados que precisamos, a consulta melhorará X% em performance.” são substituídas por “Retorna tudo aí, são só alguns milissegundos, daqui a pouco a gente precisa de algo a mais, daí já tá pronto”.&lt;/p&gt;

&lt;p&gt;Essas práticas, apesar de serem implementadas para medir resultados, podem apenas mostrar dados que não condizem com a realidade da equipe e com seu potencial, além de que se forem implantadas de maneira estritamente rigorosa, acabam minando toda a criatividade de sua equipe de programadores.&lt;/p&gt;

&lt;p&gt;Toda metodologia de projetos cita a implantação de indicadores como uma boa prática, mas sempre alertam para conferir se os indicadores são a melhor solução para medir a performance de seu time.&lt;/p&gt;

&lt;p&gt;Devemos ser flexíveis e ponderar, aonde o desenvolvedor contribui para a empresa além do tradicional código, como em questão de motivação e confiabilidade, qualidades que dificilmente seriam consideradas nestes indicadores, mas que são de suma importância para o time.&lt;/p&gt;

&lt;p&gt;Espero que um dia essa mentalidade de linha de produção de software acabe, e que todo profissional de TI tenha liberdade para contribuir com seu ambiente de trabalho, agindo de maneira criativa, pró-ativa e inovadora, sem se sentir pressionado por números frios.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trabalhe ao lado de gente boa (e seja a gente boa)</title>
      <link>https://tableless.github.io/hugo-public/trabalhe-ao-lado-de-gente-boa-e-seja-a-gente-boa/</link>
      <pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/trabalhe-ao-lado-de-gente-boa-e-seja-a-gente-boa/</guid>
      <description>&lt;p&gt;Comecei na área de Desenvolvimento um pouco atrasado comparado aos meus companheiros de serviço. Claro que já estou envolvido com informática há muito mais tempo do que desenvolvo para a Web, porém, trabalhava com a área de infraestrutura. Hoje, depois de algum tempo de experiência em grandes empresas, &lt;em&gt;startups&lt;/em&gt; e equipes de &lt;em&gt;freelancers&lt;/em&gt;, posso contar um pouco do que aprendi e deixar uma dica para quem quer crescer profissionalmente: &lt;strong&gt;Trabalhe ao lado de gente boa!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Conheci a programação de fato aos 19 anos com um bom programador PHP. Esse cara me deu poucas dicas, mas dicas muito valiosas. Com o passar do tempo, conheci muita gente na internet (inclusive aqui no Tableless), e estas pessoas me deram muito mais dicas, e dicas excelentes. Eu não parti para uma vaga como desenvolvedor logo de início: passei alguns anos trabalhando com infraestrutura, mas com aquela vontade de ser programador, sempre buscando referências e conhecendo cada vez mais &amp;#8220;gente boa&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Pessoas &amp;#8220;gente boa&amp;#8221; vão cobrar que você trabalhe bem. Eles vão te cobrar um código limpo, de fácil manutenção (e não é porque são preguiçosos, mas porque isso é essencialmente bom), código escalável, boa lógica de programação e muito mais. Você vai &amp;#8220;apanhar&amp;#8221; de gente boa. Eles vão cobrar o tempo todo para que seu foco seja o mesmo que o deles: desenvolver seguindo boas práticas e pensando fora da caixa, fora da CPU desta máquina que você bate no teclado digitando códigos em disparada às vezes sem foco (no caso, você).&lt;/p&gt;

&lt;p&gt;Aprendi muita coisa desde que entrei em um novo emprego este ano, cheio de bons profissionais ao meu redor. Isso está me fazendo evoluir muito e foi o que me motivou a escrever sobre. E sim, ainda estou apanhando bastante, mas resolvi escrever para tentar lhe convencer a &lt;strong&gt;buscar algo melhor como profissional&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mas será que esta experiência só acontece quando trabalhamos ao lado de grandes equipes e equipes boas? E se trabalhamos sozinhos, com pouca gente, ou mesmo com equipes que não tem esse mesmo foco, o que fazer? Você deve buscar o seu melhor e &lt;strong&gt;cobrar-se&lt;/strong&gt; por isso. Não é porque determinada pessoa trabalha mal na empresa que você irá espelhar-se nela e estagnar. Não é ela quem vai determinar o seu futuro.&lt;/p&gt;

&lt;p&gt;Caso não consiga obter um bom resultado policiando-se, procure alguém que possa avaliar seu desempenho em alguma ferramenta externa, seja um amigo do Facebook/Twitter, ou uma galera no Github, e quando você se sentir bem é hora de começar a fazer sua parte e ajudar outras pessoas. Você será a &amp;#8220;gente boa&amp;#8221; que busca fazer o serviço do outro ser bom como o seu. Se esse ciclo continuar, garanto que você não vai se arrepender.&lt;/p&gt;

&lt;p&gt;Compartilhe experiências, ajude quem tem dúvida. Aprendemos muito mais ajudando o próximo do que fechados em nosso &amp;#8220;mundinho&amp;#8221;. Grande parte do conteúdo pelo qual você estudou foi escrito por gente boa que queria ajudar, seja em blogs, revistas, etc. Pense nisso: &lt;strong&gt;gente boa é gente que faz a diferença&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>6 dicas para se dar bem em freelas e trabalhos remotos</title>
      <link>https://tableless.github.io/hugo-public/6-dicas-freelas-remoto/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/6-dicas-freelas-remoto/</guid>
      <description>

&lt;p&gt;Ao contrário do que muitos acham, trabalho remoto (ou até um projeto freelancer) não é algo fácil. Eu sei que é o sonho de todo mundo ficar em casa, organizar o seu próprio horário para ir ao parque (cinema, praia, sítio, bar, prostíbulo etc etc etc) enquanto todo mundo se mata em um escritório.&lt;/p&gt;

&lt;p&gt;Para ter esse privilégio, você não precisa ser só bom no que faz, você precisa ser responsável e ter disciplinas extras que vão além das suas responsabilidades técnicas.&lt;/p&gt;

&lt;p&gt;Montar uma empresa remota &amp;#8211; como o Tableless está se tornando &amp;#8211; é algo realmente desafiador. Você precisa encontrar profissionais que tem um senso &amp;#8220;social&amp;#8221; muito apurado. Que não pensam apenas na sua tarefa, mas também na tarefa de todos os outros integrantes do projeto, inclusive, o lado do cliente, que geralmente está preocupado com o andamento do projeto.&lt;/p&gt;

&lt;p&gt;Estas são algumas dicas básicas para você não ser um fiasco quando quiser se aventurar em trabalhar remotamente, aqui no Tableless ou em qualquer outra empresa que tenha essa possibilidade:&lt;/p&gt;

&lt;h2 id=&#34;1-dê-status&#34;&gt;1. Dê status&lt;/h2&gt;

&lt;p&gt;A equipe não está o tempo todo do seu lado e é muito difícil todo mundo trabalhar no mesmo horário. Trabalhar em uma equipe remota não quer dizer que todo mundo precisa estar ali no chat o dia inteiro. Claro, é bem diferente se você trabalha em uma empresa convencional e vai fazer um dia de trabalho remoto. Nesse caso é muito aconselhável que você trabalhe no horário normal, como se você tivesse ido à empresa normalmente.&lt;/p&gt;

&lt;p&gt;Em uma equipe não presencial, o status é o que faz as coisas não saírem dos eixos. Você precisa dar e receber o status do projeto o tempo inteiro. Seja por email, por sms, por código morse ou sinal de fumaça. Você precisa dar notícias e essas notícias precisam ser frequentes.&lt;/p&gt;

&lt;p&gt;&amp;#8220;Mas Diego, não basta a equipe olhar os commits e pronto?&amp;#8221;&lt;/p&gt;

&lt;p&gt;Não, não é só checar os commits e a listagem de issues concluídas. A equipe e a pessoa que interage e atende o cliente precisa saber de TUDO. Embora seu commit seja incrivelmente detalhado, isso não basta. Você precisa conversar com a equipe e dizer exatamente qual o status da sua parte no projeto. A lista de tarefas feitas e a lista de commits serão o apoio, mas o que vai mesmo deixá-los seguros e informados são as suas palavras.&lt;/p&gt;

&lt;p&gt;Se você não gosta de dar satisfações, esqueça, você não serve para fazer trabalho remoto. Se você não gosta de mandar email dizendo detalhadamente em que pé está seu trabalho, desista, isso não é para você.&lt;/p&gt;

&lt;p&gt;Geralmente o status pode ser dado 2 vezes ao dia, pela manhã e na parte da tarde. Se você fizer uma parada longa no decorrer do dia, é bom também manter a equipe informada. Mas geralmente um report no meio da manhã e outro no final da tarde é essencial para que o gerente do projeto possa informar ao cliente como tudo está andando.&lt;/p&gt;

&lt;h2 id=&#34;2-nunca-omita-informações&#34;&gt;2. Nunca omita informações&lt;/h2&gt;

&lt;p&gt;Se você precisa dar notícias o tempo todo, você não pode, em hipótese alguma, omitir ou esquecer informações. Quando alguém perguntar a você qual o status da tarefa, não se preocupe se ela está incompleta, diga exatamente o status atual. Não tente agradar ou dar aquela enrolada, isso não funciona.&lt;/p&gt;

&lt;p&gt;Se falta fazer um pedaço da funcionalidade, diga. Se você se esqueceu de fazer alguma coisa, diga. Se você bebeu até cair na noite anterior e não vai conseguir trabalhar, diga. Mas nunca, de forma nenhuma, omita qualquer tipo de informação.&lt;/p&gt;

&lt;p&gt;Digo isso porque toda a equipe e também quem está lidando direto com o cliente necessita de informações exatas. Se você simplesmente omitir informações, as decisões emergenciais, que são as decisões mais importantes, serão totalmente equivocadas.&lt;/p&gt;

&lt;p&gt;Essas informações serão usadas também indicar um status mais adequado para o cliente. Aqui no Tableless eu sou bem sincero. Prefiro perder o cliente falando a verdade do que tentar enrolá-lo. Dá mais trabalho enrolar do que perder o projeto. Prefiro ficar são para finalizar os outros projetos que restam, do que aflito e maluco tentando inventar uma desculpa para o cliente.&lt;/p&gt;

&lt;p&gt;Dinheiro nenhum paga uma dor de cabeça desse tipo.&lt;/p&gt;

&lt;h2 id=&#34;3-mantenha-o-repositório-do-projeto-sempre-atualizado&#34;&gt;3. Mantenha o repositório do projeto sempre atualizado&lt;/h2&gt;

&lt;p&gt;NUNCA, NUNCA, NUNCA saia da frente do computador sem dar um push antes. Vai pra praia curtir? Atualize seu projeto e envie seus commits para o repositório. Vai pro parque correr com seu cachorro? Atualize o repositório.&lt;/p&gt;

&lt;p&gt;Atrasar um projeto por que você não atualizou o repositório é coisa de júnior. Ainda mais quando as suas tarefas afetam as tarefas do time.&lt;/p&gt;

&lt;p&gt;Esse é um erro que pode causar uma dor de cabeça terrível para equipe inteira.&lt;/p&gt;

&lt;p&gt;Só para deixar claro: não estou dizendo que você tem que subir tarefas incompletas. Você só sobe tarefas totalmente completas e revisadas para o repositório. Mesmo assim, se você estiver trabalhando em um branch separado dedicado para uma determinada tarefa, suba tudo o que puder e avise o time que determinado branch está com uma tarefa incompleta, mas sempre deixe esse branch atualizado. Alguém, eventualmente, pode continuar seu projeto de onde você parou. Se isso acontecer e você não tiver atualizado o branch, alguém vai ter problemas.&lt;/p&gt;

&lt;h2 id=&#34;4-uma-notícia-ruim-é-melhor-do-que-notícia-nenhuma&#34;&gt;4. Uma notícia ruim é melhor do que notícia nenhuma&lt;/h2&gt;

&lt;p&gt;Ahhh, notícias ruins. Notícias ruins são normais em projetos de internet. Contudo, não ter notícia nenhuma é pior. O cliente fica desesperado, estressado e começa a duvidar da sua capacidade. Problemas acontecem. Estamos falando sobre desenvolvimento de software, ou seja, problemas invariavelmente acontecerão.&lt;/p&gt;

&lt;p&gt;O problema é a sua posição perante este cenário. Ninguém gosta de receber notícias ruins, mas todo mundo gosta de receber notícias sobre seu projeto. É importante para que o cliente consiga programar seu cronograma. Ele pode ter engatilhado um grande lançamento, campanha de marketing, apresentação para executivos ou qualquer outra coisa importante. Quando você não dá a notícia ruim (ou qualquer outra notícia), você prejudica uma cadeia inteira de pessoas e processos.&lt;/p&gt;

&lt;p&gt;Lembre-se que O problema não é dar a notícia ruim, o problema é não dar notícia nenhuma. Sempre dê notícias sobre o projeto para o cliente, por mais insignificante que essa notícia seja.&lt;/p&gt;

&lt;h2 id=&#34;5-não-pegue-o-projeto-se-você-acha-que-não-vai-entregá-lo&#34;&gt;5. Não pegue o projeto se você acha que não vai entregá-lo&lt;/h2&gt;

&lt;p&gt;Talvez você esteja muito atarefado. Talvez você esteja de saco cheio e queira tirar férias. Talvez você queira tanto dinheiro que se envolve em muitos projetos e não entrega nenhum. Talvez você tenha problemas de saúde&amp;#8230; Não importa o motivo, mas se você sabe que não vai conseguir entregar o projeto, seja por incompetência ou por qualquer outro motivo, não se comprometa.&lt;/p&gt;

&lt;p&gt;É melhor perder um cliente que talvez possa te contactar novamente mais tarde, do que você se envolver, estragar o projeto do cliente e depois largá-lo com um problema gigante nas mãos.&lt;/p&gt;

&lt;p&gt;Nesse cenário, o melhor é ser honesto. Diga que você não tem tempo porque está com muitos projetos, porque pretende viajar ou por causa de qualquer outro motivo. Nunca dispense o cliente sem uma desculpa verdadeira.&lt;/p&gt;

&lt;p&gt;O cliente não vai ficar bravo com você. Nesse momento você não está comprometido com nada. Você pode dizer &lt;em&gt;não&lt;/em&gt; tranquilamente nesse momento.&lt;/p&gt;

&lt;h2 id=&#34;6-seja-responsável&#34;&gt;6. Seja responsável&lt;/h2&gt;

&lt;p&gt;Eu sinto que não deveria conversar sobre nenhum destes pontos com ninguém, pelo simples motivo de que isso é questão de ter ou não responsabilidade. Se você tiver responsabilidade e claro, comprometimento, você vai se dar bem. O problema é que muitos devs simplesmente pisam na bola e para mim isso não tem outro nome: irresponsabilidade.&lt;/p&gt;

&lt;p&gt;Você tem um trabalho para entregar e existem pessoas que contam contigo. Você tem um cliente, que te paga para fazer um determinado projeto, ele &amp;#8220;manda&amp;#8221; na bagaça toda. É muita falta de responsabilidade, de educação e comprometimento você falhar ao tentar deixá-lo a par dos acontecimentos do seu próprio projeto.&lt;/p&gt;

&lt;p&gt;Lembre-se de todas essas disciplinas e com certeza você vai se destacar da média.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>