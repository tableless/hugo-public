<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test on Tableless</title>
    <link>http://tableless.com.br/tags/test/index.xml</link>
    <description>Recent content in Test on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Jasmine: entendendo os matchers</title>
      <link>http://tableless.com.br/jasmine-entendendo-os-matchers/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/jasmine-entendendo-os-matchers/</guid>
      <description>

&lt;p&gt;Uma parte legal do &lt;strong&gt;Jasmine&lt;/strong&gt; e que adianta muito o nosso lado são os &lt;em&gt;matchers&lt;/em&gt;: de um modo resumido e direto, um _matcher_ implementa uma comparação _booleana_ entre o valor atual e o valor esperado. É responsável em passar para o _framework_ se o que  &lt;em&gt;esperamos&lt;/em&gt; através do nosso teste é _verdadeiro_ ou &lt;em&gt;falso&lt;/em&gt;. Com base nisso, o _Jasmine_ vai passar ou falhar a &lt;em&gt;spec&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toequal&#34;&gt;toEqual&lt;/h2&gt;

&lt;p&gt;Esse talvez seja o mais básico e um dos que mais iremos usar. Simplemente verifica se duas coisas são iguais (e não necessariamente o mesmo objeto). Por exemplo, as seguintes _expects_ iriam passar:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect(true).toEqual(true);
expect([1, 2, 3]).toEqual([1, 2, 3]);
&lt;/pre&gt;

&lt;p&gt;Da mesma forma, as seguintes iriam falhar:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect(5).toEqual(12);
expect([1, 2, 3]).toEqual([11, 12, 13]);
&lt;/pre&gt;

&lt;h2 id=&#34;tobe&#34;&gt;toBe&lt;/h2&gt;

&lt;p&gt;O _matcher_ &lt;code&gt;toBe&lt;/code&gt; a princípio parece ser igual ao anterior &lt;code&gt;toEqual&lt;/code&gt;. A diferença é que &lt;code&gt;toBe&lt;/code&gt; verifica não só se os dois valores são iguais, mas também como se eles são do mesmo objeto.&lt;/p&gt;

&lt;p&gt;Pra podermos ver a diferença entre os dois:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;var bob = { model: &#34;Camaro&#34; };
var john = { model: &#34;Camaro&#34; };

expect(bob).toEqual(john); // passa =&amp;gt; são equivalentes
expect(bob).toBe(john); // falha =&amp;gt; não é o mesmo objeto
&lt;/pre&gt;

&lt;p&gt;Apesar de &lt;em&gt;bob&lt;/em&gt; e &lt;em&gt;john&lt;/em&gt; serem similares, eles não são o mesmo objeto, o que faz a &lt;em&gt;spec&lt;/em&gt; passar se for usado o &lt;em&gt;matcher&lt;/em&gt; &lt;strong&gt;toEqual&lt;/strong&gt; mas falha se for usado o &lt;em&gt;matcher&lt;/em&gt; &lt;code&gt;toBe&lt;/code&gt;. O mesmo acontece para arrays:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;var group = [100, 101, 102];
expect(group).toEqual([100, 101, 102]); // passa =&amp;gt; são equivalentes
expect(group).toBe([100, 101, 102]); // falha =&amp;gt; não é o mesmo array
&lt;/pre&gt;

&lt;h2 id=&#34;tobetruthy-e-tobefalsy&#34;&gt;toBeTruthy e toBeFalsy&lt;/h2&gt;

&lt;p&gt;Para testar se algum valor é avaliado commo &lt;strong&gt;&lt;em&gt;true&lt;/em&gt;&lt;/strong&gt; ou &lt;strong&gt;&lt;em&gt;false&lt;/em&gt;&lt;/strong&gt;, podemos usar respectivamente os _matchers_ &lt;code&gt;toBeTruthy&lt;/code&gt; e &lt;code&gt;toBeFalsy&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect(true).toBeTruthy();
expect(1000).toBeTruthy();
expect({}).toBeTruthy();

expect(&#34;&#34;).toBeFalsy();
expect(null).toBeFalsy();
expect(false).toBeFalsy();
&lt;/pre&gt;

&lt;p&gt;Se pararmos pra olhar com calma o exemplo anterior podemos notar que a avaliação dos _matchers_ &lt;code&gt;toBeTruthy&lt;/code&gt; e &lt;code&gt;toBeFalsy&lt;/code&gt; é idêntica ao &lt;em&gt;JavaScript&lt;/em&gt;. Então temos alguns valores específicos que são considerados _falsy_ e todo o restante é avaliado como &lt;em&gt;truthy&lt;/em&gt;. Pra nossa referência, uma lista dos valores que são avaliados como &lt;em&gt;falsy&lt;/em&gt; pelo &lt;em&gt;Jasmine&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;false&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;****&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&amp;#8220;&amp;#8221;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;undefined&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;NaN&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;not&#34;&gt;not&lt;/h2&gt;

&lt;p&gt;Muitas vezes podemos inverter um _matcher_  pra termos certeza de que ele não é um valor &lt;strong&gt;&lt;em&gt;true&lt;/em&gt;&lt;/strong&gt;. Podemos fazer isso facilmente adicionando o prefixo &lt;code&gt;.not&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect(&#39;Fabeni&#39;).not.toEqual(&#39;Finelli&#39;);
&lt;/pre&gt;

&lt;h2 id=&#34;tocontain&#34;&gt;toContain&lt;/h2&gt;

&lt;p&gt;Conseguimos também verificar se um elemento _está contido_ em um _array_ ou &lt;strong&gt;&lt;em&gt;string&lt;/em&gt;&lt;/strong&gt; por exemplo, como o &lt;em&gt;matcher&lt;/em&gt; &lt;code&gt;toContain&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect([10, 11, 12, 13, 14, 15]).toContain(13);
expect(&#39;Raphael Fabeni&#39;).toContain(&#39;Fabeni&#39;);
&lt;/pre&gt;

&lt;h2 id=&#34;tobedefined-e-tobeundefined&#34;&gt;toBeDefined e toBeUndefined&lt;/h2&gt;

&lt;p&gt;Da mesma maneira que vimos os &lt;em&gt;matchers&lt;/em&gt; &lt;code&gt;toBeTruthy&lt;/code&gt; e &lt;code&gt;toBeFalsy&lt;/code&gt;, _Jasmine_ também nos oferece os benditos &lt;code&gt;toBeDefined&lt;/code&gt; e &lt;code&gt;toBeUndefined&lt;/code&gt; que verificam se um valor é &lt;strong&gt;&lt;em&gt;defined&lt;/em&gt;&lt;/strong&gt; ou &lt;strong&gt;&lt;em&gt;undefined&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;var iAmUndefined;
expect(null).toBeDefined(); // passa
expect(&#39;Fabeni&#39;).toBeDefined(); // passa
expect(iAmUndefined).toBeDefined(); // falha

expect(iAmUndefined).toBeUndefined(); // passa
expect(12).toBeUndefined(); // falha
expect(null).toBeUndefined(); // falha
&lt;/pre&gt;

&lt;h2 id=&#34;tobenull&#34;&gt;toBeNull&lt;/h2&gt;

&lt;p&gt;Direto ao ponto, esse brother simplesmente avalia se um valor é &lt;strong&gt;&lt;em&gt;null&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect(null).toBeNull(); // passa
expect(false).toBeNull(); // falha
expect(1).toBeNull(); // falha
&lt;/pre&gt;

&lt;h2 id=&#34;tobenan&#34;&gt;toBeNaN&lt;/h2&gt;

&lt;p&gt;Sem muitas delongas, esse _matcher_ verifica se um valor é &lt;strong&gt;&lt;em&gt;NaN&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect(0).toBeNaN(); // falha
expect(10).not.toBeNaN(); // passa
&lt;/pre&gt;

&lt;h2 id=&#34;tobegreatherthan-e-tobelessthan&#34;&gt;toBeGreatherThan e toBeLessThan&lt;/h2&gt;

&lt;p&gt;Esses dois &lt;em&gt;matchers&lt;/em&gt; verificam se um valor é maior ou menor que um outro valor passado.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect(10).toBeGreatherThan(1); // passa
expect(10).toBeLessThan(20); // passa
&lt;/pre&gt;

&lt;h2 id=&#34;tobecloseto&#34;&gt;toBeCloseTo&lt;/h2&gt;

&lt;p&gt;Esse _matcher_ permite que possamos verificar se um certo número está próximo de um outro número, dado uma certa precisão decimal como segundo argumento. Poderíamos por exemplo, verificar se um número é próximo de _25.23_ com um ponto decimal, poderíamos fazer algo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect(25.23).toBeCloseTo(25.2, 1); // passa
&lt;/pre&gt;

&lt;h2 id=&#34;tomatch&#34;&gt;toMatch&lt;/h2&gt;

&lt;p&gt;Esse cara verifica se algum valor está de acordo com base em uma &lt;strong&gt;&lt;em&gt;expressão regular&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect(&#39;Yes, we can!&#39;).toMatch(/we/); // passa
&lt;/pre&gt;

&lt;h2 id=&#34;tothrow&#34;&gt;toThrow&lt;/h2&gt;

&lt;p&gt;Esse _matcher_ permite que verifiquemos se uma função lançou um erro. Como exemplo, vamos imaginar que temos uma função &lt;code&gt;onlyNumbers&lt;/code&gt; que deve &lt;strong&gt;&lt;em&gt;lançar uma exceção&lt;/em&gt;&lt;/strong&gt; caso o argumento passado seja uma _string_ e não um número. Podemos usar aqui uma _função anônima_ para nos facilitar a vida:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;expect(function() {
    onlyNumbers(&#39;argumento errado&#39;)
}).toThrow();
&lt;/pre&gt;

&lt;h2 id=&#34;ufa-8230&#34;&gt;Ufa&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Deu pra ver que o _framework_ nos oferece um monte de opção para utilizarmos em nossos testes. É ainda é possível fazer nossos &lt;em&gt;matchers&lt;/em&gt; customizados, mas vou deixar isso para um próximo post. Se você se interessar mais pelo assunto, recomendo o livro &lt;a href=&#34;http://shop.oreilly.com/product/0636920028277.do&#34; target=&#34;_blank&#34;&gt;JavaScript Testing with Jasmine&lt;/a&gt; que inclusive li recentemente e tive a idéia de escrever o post.&lt;/p&gt;

&lt;p&gt;Acho que é isso. Se encontrar algum erro ou melhoria no post, pode postar no comentário ou pode me chamar no &lt;a href=&#34;https://twitter.com/raphaelfabeni&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>