<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grid on Tableless</title>
    <link>http://tableless.com.br/tags/grid/index.xml</link>
    <description>Recent content in Grid on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/grid/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Entendendo Sistemas de Grid CSS do Zero</title>
      <link>http://tableless.com.br/entendendo-sistemas-de-grid-css-do-zero/</link>
      <pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/entendendo-sistemas-de-grid-css-do-zero/</guid>
      <description>

&lt;p&gt;Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-1&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-1&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-1&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-1&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-1&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-1&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-1&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-1&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Quando resolvemos a fórmula, temos uma única coluna de largura 6.86666666667%. A partir daqui, podemos usar esse número para calcular as larguras das colunas restantes. A fórmula para isso é:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cw = (scw * cs) + (m * (cs – 1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;```Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-2&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-2&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-2&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-2&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-2&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-2&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-2&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-2&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``Ao longo dos últimos anos, sistemas de grid CSS têm crescido muito em popularidade, rapidamente sendo considerada uma boa prática para a criação de layout estruturais. Como resultado, não houve falta de &lt;em&gt;frameworks&lt;/em&gt; surgindo, oferecendo seus próprios sistemas de grid e tentando conquistar espaço.&lt;/p&gt;

&lt;p&gt;Se você é do tipo curioso, como eu, pode estar se perguntando o que exatamente sistemas de grid podem oferecer? Como eles funcionam? E como você pode criar o seu próprio? Essas são apenas algumas das perguntas que eu vou tentar responder e como explorar os vários conceitos em jogo enquanto construímos juntos um sistema de grid básico a partir do zero.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-sistema-de-grid-3&#34;&gt;O que é um Sistema de Grid?&lt;/h2&gt;

&lt;p&gt;No caso de você ser um novato em sistemas de grid CSS, vamos começar com uma rápida definição. Em termos básicos, um sistema de grid é uma estrutura que permite o conteúdo ser empilhado verticalmente e horizontalmente de uma forma consistente e facilmente gerenciável. Além disso, o código de um sistema de grid é um “_project-agnostic_”, dando-lhe um elevado grau de portabilidade, de modo que, possa ser adotado em novos projetos.&lt;/p&gt;

&lt;h2 id=&#34;os-benefícios-3&#34;&gt;Os Benefícios&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eles aumentam a produtividade&lt;/strong&gt; fornecendo simples e previsíveis estruturas de layout para design de HTML. A estrutura de uma página pode ser formulada rapidamente sem perder tempo em adivinhar qual sua precisão ou compatibilidade &lt;em&gt;cross-browser&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são versáteis&lt;/strong&gt; na forma em como os layouts podem ser construídos, sendo adaptados em variadas combinações de linhas e colunas. Eles ainda suportam grids aninhados para em casos de usos complexos. Não importa a necessidade do layout, um sistema de grid é quase certamente bem adaptado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eles são ideais para layouts responsivos&lt;/strong&gt;. Aqui é onde os sistemas de grid dominam. Eles tornam incrivelmente fácil a criação de interfaces mobile amigáveis, que são adaptadas para diferentes tamanhos de tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;componentes-básicos-3&#34;&gt;Componentes Básicos&lt;/h2&gt;

&lt;p&gt;Sistemas de grid incluem dois componentes principais: linhas e colunas. Linhas são usadas para acomodar as colunas. Colunas compõem a estrutura final e envolvem o conteúdo real. Alguns sistemas de grid irão incluir &lt;em&gt;containers&lt;/em&gt;, que servem para envolver o layout.&lt;/p&gt;

&lt;h2 id=&#34;redefinindo-o-box-model-3&#34;&gt;Redefinindo o Box Model&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é muito importante para qualquer sistema de grid redefinir o &lt;em&gt;box model&lt;/em&gt;. Por padrão, o navegador não inclui &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;border&lt;/code&gt; dentro da largura e altura declarada para o elemento. Isso não é bom para a responsividade. Felizmente, isso pode ser corrigido definindo a propriedade &lt;code&gt;box-sizing&lt;/code&gt; para &lt;code&gt;border-box&lt;/code&gt; para as linhas e colunas.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row,
.column {
  box-sizing: border-box;
}
&lt;/pre&gt;

&lt;p&gt;Agora podemos declarar porcentagens para a largura das colunas. Isso permite que as colunas aumentem e diminuam em diferentes tamanhos de tela enquanto mantém a estrutura.&lt;/p&gt;

&lt;h2 id=&#34;limpando-floats-3&#34;&gt;Limpando Floats&lt;/h2&gt;

&lt;p&gt;A fim de alinhar as colunas horizontalmente, sistemas de grid irão &lt;a href=&#34;https://css-tricks.com/all-about-floats/&#34; target=&#34;_blank&#34;&gt;flutuar&lt;/a&gt; as colunas. Isso significa que você precisa limpar os elementos que flutuam sobre a linha para manter a estrutura do layout. Aqui é onde o &lt;a href=&#34;http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/&#34; target=&#34;_blank&#34;&gt;clearfix&lt;/a&gt; entra:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.row:before,
.row:after {
  content: &#34; &#34;;
  display: table;
}

.row:after {
  clear: both;
}
&lt;/pre&gt;

&lt;p&gt;Ao aplicar o &lt;code&gt;clearfix&lt;/code&gt; para a linha no seu CSS, ele fará com que a linha se estique para acomodar as colunas que ela contém sem aumentar a marcação.&lt;/p&gt;

&lt;h2 id=&#34;definindo-colunas-3&#34;&gt;Definindo Colunas&lt;/h2&gt;

&lt;p&gt;Para as colunas, os estilos precisam ser definidos em duas partes: os estilos em comum e as larguras. Primeiro os comuns:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column {
  position: relative;
  float: left;
}
&lt;/pre&gt;

&lt;p&gt;Aqui, as colunas recebem uma posição relativa para permitir que qualquer conteúdo em posição absoluta dentro da coluna possa ser posicionado em relação a ela. As colunas então flutuam a esquerda para o alinhamento horizontal, o que fará com que o elemento se torne &lt;code&gt;display: block&lt;/code&gt; mesmo se ele não começou dessa forma.&lt;/p&gt;

&lt;h2 id=&#34;criando-gutters-calhas-3&#34;&gt;Criando Gutters  (calhas)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Gutters&lt;/em&gt; ajudam criar a separação entre as colunas para uma maior legibilidade e estética. Existem dois tipos de abordagem quando falamos em &lt;em&gt;gutters&lt;/em&gt;; definindo &lt;em&gt;paddings&lt;/em&gt; dentro de cada coluna ou margem esquerda baseada em porcentagens para cada coluna.&lt;/p&gt;

&lt;p&gt;Eu prefiro a última abordagem, porque ela facilita &lt;em&gt;gutters&lt;/em&gt; responsivas que irão permanecer em relação as colunas e a janela de exibição como um todo em diferentes tamanhos de tela. Ela também permite que você defina &lt;em&gt;paddings&lt;/em&gt; adicionais para as colunas para uma maior flexibilidade. A maior vantagem de &lt;em&gt;gutters&lt;/em&gt; baseadas em &lt;em&gt;paddings&lt;/em&gt; é em como eles simplificam cálculos para a largura das colunas, que ficará evidente na próxima seção.&lt;/p&gt;

&lt;p&gt;Utilizando a abordagem de margens baseadas em porcentagem, nós podemos ter como alvo colunas que são um irmão adjacente a uma coluna precedente. Isso irá criar uma margem esquerda para cada coluna, exceto a primeira, que nós vamos definir em 1.6% usando a propriedade &lt;code&gt;margin-left&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column + .column {
  margin-left: 1.6%;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Nota do tradutor&lt;/strong&gt;: Para calcular a porcentagem das margens:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = mp / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mr = margem em porcentagem&amp;lt;br /&amp;gt;
mp = margem em pixel&amp;lt;br /&amp;gt;
mc = máximo de colunas&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;calculando-largura-das-colunas-3&#34;&gt;Calculando Largura das Colunas&lt;/h2&gt;

&lt;p&gt;Antes que possamos começar fazer os cálculos, precisamos determinar a quantidade máxima de colunas por linha. Uma escolha popular são 12, uma vez que existe uma maior flexibilidade já que é divisível por 1,2,3,4 e 6. Isso permite uma variedade de diferentes combinações que ainda permite colunas distribuídas uniformemente com o mesmo tamanho.&lt;/p&gt;

&lt;p&gt;É importante entender que ter no máximo 12 colunas por linha, você precisará preencher essa quantidade em cada linha, independentemente de quantas colunas você quer. Por exemplo, se você queria apenas uma linha com 3 colunas iguais, você usaria três elementos em que cada um terá 4 colunas (4×3=12). Exceder a soma de 12 resultará em uma quebra de coluna(s) adicional(is) para uma nova linha.&lt;/p&gt;

&lt;p&gt;Agora que sabemos o número máximo de colunas, precisamos determinar a largura de uma única coluna (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;) usando a seguinte fórmula:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scw = (100 – (m * (mc – 1))) / mc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;p&gt;Quando resolvemos a fórmula, temos uma única coluna de largura 6.86666666667%. A partir daqui, podemos usar esse número para calcular as larguras das colunas restantes. A fórmula para isso é:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cw = (scw * cs) + (m * (cs – 1))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Onde:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Aplicando essa fórmula para cada uma das 12 colunas resulta no CSS a seguir:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.column-1 {
  width: 6.86666666667%;
}

.column-2 {
  width: 15.3333333333%;
}

.column-3 {
  width: 23.8%;
}

.column-4 {
  width: 32.2666666667%;
}

.column-5 {
  width: 40.7333333333%;
}

.column-6 {
  width: 49.2%;
}

.column-7 {
  width: 57.6666666667%;
}

.column-8 {
  width: 66.1333333333%;
}

.column-9 {
  width: 74.6%;
}

.column-10 {
  width: 83.0666666667%;
}

.column-11 {
  width: 91.5333333333%;
}

.column-12 {
  width: 100%;
}
&lt;/pre&gt;

&lt;h2 id=&#34;otimizando-para-dispositivos-móveis&#34;&gt;Otimizando para Dispositivos Móveis&lt;/h2&gt;

&lt;p&gt;Apesar do fato que o sistema de grid é responsivo, ele sozinho não pode ir tão longe. Para dispositivos com pequenas telas, tais como smartphones, a largura das colunas precisam se ajustar para permitir que o conteúdo que elas contêm ainda apareça legível e visualmente atraente. Consultas de mídia ajudam com isso:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media only screen and (max-width: 550px) {
  .column-1,
  .column-2,
  .column-3,
  .column-4,
  .column-5,
  .column-6,
  .column-7,
  .column-8,
  .column-9,
  .column-10,
  .column-11,
  .column-12 {
    width: auto;
    float: none;
  }

  .column + .column {
    margin-left: 0;
  }
}
&lt;/pre&gt;

&lt;p&gt;Aqui, estamos dizendo ao grid para permitir que cada coluna possa ocupar a largura total do seu &lt;em&gt;container&lt;/em&gt; para dispositivos com uma janela menor que 550px de largura. &lt;em&gt;Gutters&lt;/em&gt; já não são mais necessárias aqui, então nós as removemos.&lt;/p&gt;

&lt;p&gt;Como alternativa, você pode optar pela estratégia &lt;a href=&#34;http://www.sitepoint.com/making-case-mobile-first-designs/&#34; target=&#34;_blank&#34;&gt;mobile first&lt;/a&gt; que leva a abordagem oposta, aumentando para um layout de 12 colunas. Nesse caso, as colunas começam como uma largura total, depois estabelecemos as larguras das colunas e &lt;em&gt;floats&lt;/em&gt; para permitir que elas se alinhem horizontalmente quando a resolução da tela atinge um limite especificado.&lt;/p&gt;

&lt;p&gt;Esse é a abordagem preferida para o sistema de grid do &lt;a href=&#34;http://www.sitepoint.com/understanding-bootstrap-grid-system/&#34; target=&#34;_blank&#34;&gt;bootstrap&lt;/a&gt;, que não institui a largura das colunas até que a janela de exibição atinja uma largura mínima de 992px. Essa pode ser uma abordagem mais favorável para seu caso, e deve ser algo para analisar melhor quando avaliar um sistema de grid.&lt;/p&gt;

&lt;h2 id=&#34;juntando-tudo&#34;&gt;Juntando Tudo&lt;/h2&gt;

&lt;p&gt;Quando combinamos todos os conceitos e o CSS, podemos escrever uma estrutura de layout em HTML igual a:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;row&#34;&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&#34;row&#34;&amp;gt;
  &amp;lt;div class=&#34;column column-2&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;column column-2&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Confira abaixo a demonstração no CodePen para ver todo o sistema de grid em ação, incluindo grid aninhados.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/SitePoint/pen/dPqqvN/&#34;&gt;Understanding CSS Grid Systems&lt;/a&gt; by SitePoint (&lt;a href=&#34;http://codepen.io/SitePoint&#34;&gt;@SitePoint&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você também experimentar a &lt;a href=&#34;http://codepen.io/ryanmorr/full/zxRzyE/&#34; target=&#34;_blank&#34;&gt;demo em tela cheia&lt;/a&gt; para uma melhor impressão. Não se esqueça de brincar com as dimensões da tela para ver como o grid lida com várias resoluções.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Como você pode ver, não é preciso muito para montar um sistema de grid básico. A matemática é provavelmente a parte mais complexa. Apesar da simplicidade, o grid continua a ser uma poderosa e flexível ferramenta para layouts estruturais. Com os diversos conceitos que discutimos aqui, espero que você tenha uma melhor compreensão de como sistemas de grid funcionam. Isso deve ajudá-lo a avaliar diferentes sistemas de grid que se destacam, e escolher o melhor deles para o seu próximo projeto, ou até mesmo criar o seu próprio.&lt;/p&gt;

&lt;p&gt;Tradução: Tamiris Bonicenha&lt;/p&gt;

&lt;p&gt;Acesse o artigo original no &lt;a href=&#34;http://www.sitepoint.com/understanding-css-grid-systems/&#34; target=&#34;_blank&#34;&gt;SitePoint – &amp;#8220;Understanding CSS Grid Systems from the Ground Up&amp;#8221;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando Layouts com Susy Framework</title>
      <link>http://tableless.com.br/criando-layouts-com-susy-framework/</link>
      <pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-layouts-com-susy-framework/</guid>
      <description>

&lt;p&gt;Com a alta demanda e prazos cada vez menores somos obrigados a trabalhar cada vez mais rápido e isso serve de incentivo para que novos frameworks sejam feitos buscando melhorar a qualidade no desenvolvimento. Um desses frameworks é o Susy e nesse artigo vamos conhecer e dar os primeiros passos com ele.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-susy&#34;&gt;O que é Susy?&lt;/h2&gt;

&lt;p&gt;Susy é um framework que permite criar grids de acordo com as necessidades do seu site. Diferente de outros como Bootstrap e Foundation, você não vai precisar importar um arquivo cheio de classes em que vai usar apenas algumas delas. O Susy trabalha direto no estilo das classes que você definiu e personalizou.&lt;/p&gt;

&lt;p&gt;Para começar a usá-lo você precisa ter o Sass instalado e o mínimo de conhecimento sobre ele. Não vou me aprofundar em Sass, pois não é o foco desse artigo, mas para quem tiver alguma dúvida a respeito pode ver uma série de &lt;a href=&#34;http://goo.gl/PmuwuA&#34; target=&#34;_blank&#34;&gt;artigos&lt;/a&gt; aqui mesmo no Tableless.&lt;/p&gt;

&lt;p&gt;Agora que já sabemos do que se trata vamos começar a desenvolver nosso layout com Susy.&lt;/p&gt;

&lt;h2 id=&#34;criando-seu-primeiro-layout-com-susy&#34;&gt;Criando seu primeiro layout com Susy&lt;/h2&gt;

&lt;p&gt;Assumindo que você já tem o Sass instalado, vamos instalar o Susy. Abra o prompt de comando e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;gem install susy&lt;/pre&gt;

&lt;p&gt;Após concluir a instalação vamos criar uma pasta para o projeto e dentro dela um arquivo index.html, uma pasta css e uma pasta scss com um arquivo style.scss dentro dela.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-50233&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/estrutura-de-pastas.jpg&#34; alt=&#34;Learning Susy&#34; width=&#34;617&#34; height=&#34;76&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;iniciando-o-desenvolvimento&#34;&gt;Iniciando o desenvolvimento&lt;/h2&gt;

&lt;p&gt;Vamos construir o seguinte layout:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-50282&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/layout.png&#34; alt=&#34;layout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Primeiramente vamos iniciar o Sass para que nosso código possa ser compilado. Abra a pasta do projeto na linha de comando e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;sass --watch scss:css -r susy&lt;/pre&gt;

&lt;p&gt;Feito isso um arquivo style.css foi criado dentro da pasta css. Vamos adiciona-lo no head no html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/style.css&#34;&amp;gt;&lt;/pre&gt;

&lt;p&gt;Vamos adicionar o normalize ao nosso projeto&lt;/p&gt;

&lt;p&gt;Para usar o Susy no projeto temos apenas que adicionar a seguinte linha no style.scss:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@import &#34;susy&#34;;&lt;/pre&gt;

&lt;h3 id=&#34;susy-map&#34;&gt;Susy Map&lt;/h3&gt;

&lt;p&gt;Susy Map é um conjunto de instruções que são declaradas no início do projeto.  O grid é gerado de acordo com as informações declaradas nele. Abaixo temos o Map do nosso projeto, vamos adiciona-lo no style.scss, mais informações podem ser adicionadas , mas para nosso projeto é o suficiente. As linhas estão comentadas informando o que cada uma faz.&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;$susy:(
    columns: 8, // número de colunas do grid
    container: 1140px, // largura do container
    debug: (image: show), // exibe as colunas do grid
);&lt;/pre&gt;

&lt;p&gt;Vou adicionar o código completo, mas somente as funções do Susy serão explicadas. Então vamos começar! No HTML, vamos adicionar o header da página:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;header class=&#34;site-header&#34;&amp;gt;
    &amp;lt;div class=&#34;container&#34;&amp;gt;
        &amp;lt;div class=&#34;logo&#34;&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Logo&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;nav class=&#34;menu&#34;&amp;gt;
            &amp;lt;ul&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Photos&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/nav&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;&lt;/pre&gt;

&lt;p&gt;Vamos adicionar o estilo dele:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;.container {
    @include container(); // inclui na classe o container definido no Susy Map
}
.logo {
    float: left;
    padding: 0.9375rem;
    line-height: 2rem;
    font-size: 1.5rem;
}
nav {
    float: right;
    li {
        list-style: none;
        float: left;
        margin-left: 2rem;
        line-height: 2rem;
    }
}&lt;/pre&gt;

&lt;p&gt;Depois do header vamos inserir o banner no html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;container&#34;&amp;gt;
    &amp;lt;img src=&#34;img/banner.jpg&#34; class=&#34;banner&#34;&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Agora o estilo do banner:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;img {
    width:100%;
}
.banner {
    @include span(8 of 8);
    margin: gutter() 0;
    height: 100%;
}&lt;/pre&gt;

&lt;p&gt;O &amp;#8220;@include span (8 of 8)&amp;#8221; é uma função do Susy que diz que o banner irar ocupar 8 colunas das 8 declaradas no Susy Map, mas não é só isso, reparem que no margin adicionamos um valor &amp;#8220;gutter()&amp;#8221;, isso é outra função do Susy que adiciona o valor que existe entre os grids, pode ver como o espaço que está entre o header e o banner é o mesmo que está entre as 8 colunas que definimos no grids.&lt;/p&gt;

&lt;p&gt;Agora vamos adicionar o conteúdo do layout:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;container&#34;&amp;gt;
    &amp;lt;div class=&#34;sidebar&#34;&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Fortaleza&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Natal&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Recife&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Salvador&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;content&#34;&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/001.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/002.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/003.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/004.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/005.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&#34;content-item&#34;&amp;gt;&amp;lt;img src=&#34;img/006.jpg&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;E o estilo delas:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;.sidebar {
    @include span (2 of 8);
    ul {
        margin: 0;
        padding: 1.2rem;
    }
    li {
        list-style: none;
        font-size: 1.1rem;
        border-bottom: 2px dotted #c6c6c6;
        &amp;:last-child {
            border:none;
        }
    }   
    a {
        display: block;
        padding: 1rem .5rem;
        color: #333;
        line-height: 2;
        text-decoration: none;
    }
}
.content {
    @include span (6 of 8 last);
}
.content-item {
    @include gallery(2 of 6);
    margin-bottom: gutter();
}&lt;/pre&gt;

&lt;p&gt;Repare nos includes que acabamos de usar. Na mesma linha usamos 2 colunas para o sidebar e as 6 para o content, veja que adicionamos um last no final do include na classe content, esse last serve para dizer que são as ultimas colunas da linha. O espaço entre os grids é feito com um margin-right e o last serve parar remover esse margin-right do ultimo item do grid. Olha lá o aquivo style.css para entender melhor o que está sendo feito.&lt;/p&gt;

&lt;p&gt;O footer não tem muito o que falar, então vamos apenas adicionar o código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;footer class=&#34;site-footer&#34;&amp;gt;
    &amp;lt;div class=&#34;container&#34;&amp;gt;
        &amp;lt;p&amp;gt;Copyright © 2015 - Desenvolvido por Felipe César para o Tableless&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;&lt;/pre&gt;

&lt;p&gt;E o estilo:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;.site-footer {
    margin-top: 2rem;
    padding: 0.6rem 0;
    color: #fff;
}&lt;/pre&gt;

&lt;p&gt;Por fim vamos apenas remover do Susy Map a linha que exibe os grids:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;debug: (image: show),&lt;/pre&gt;

&lt;p&gt;Pronto, finalizamos o nosso layout, fácil não é?! Esse projeto foi bem simples apenas para apresentar o framework e mostrar como funciona, mas não pare por aí, faça o &lt;a href=&#34;https://github.com/felipecesr/layout-susy-framework&#34; target=&#34;_blank&#34;&gt;download do código&lt;/a&gt;, brinque com ele, acesse a documentação do &lt;a href=&#34;http://susydocs.oddbird.net/en/latest/&#34; target=&#34;_blank&#34;&gt;Susy&lt;/a&gt; e conheça outros recursos que podem te ajudar bastante no desenvolvimento.&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado do artigo, bons estudos!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grid simples com SASS</title>
      <link>http://tableless.com.br/grid-simples-com-sass/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/grid-simples-com-sass/</guid>
      <description>&lt;p&gt;Algumas vezes você vai preferir usar um sistema de grid feito por você e não algum framework do mercado como o Bootstrap ou o Foundation. Isso tem suas vantagens e desvantagens. Mas se você preferir um grid presonalizado, fazer isso com SASS é mole.&lt;/p&gt;

&lt;p&gt;Existe uma série de soluções em SASS aí fora. Algumas mais completas que essa, mas essa acaba ganhando por ser muito simples, com menos recursos, mas muito funcional para projetos pequenos.&lt;/p&gt;

&lt;p&gt;O HTML básico de exemplo será esse:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;container&#34;&amp;gt;
  &amp;lt;div class=&#34;grid-4&#34;&amp;gt;Coluna de 4&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;grid-4&#34;&amp;gt;Coluna de 4&amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;grid-4&#34;&amp;gt;Coluna de 4&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Primeiro, como qualquer sistema de grid em SASS, defina as variáveis que comandarão o gerenciamento do Grid.&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;$grid-gutter: 10px // espaçamento entre as colunas
$grid-columns: 12 // Quantidade de colunas
$grid-max: 980px // Tamanho do container

// Código básico das colunas do grid
[class*=&#34;grid-&#34;]
  float: left
  padding: 0 $grid-gutter
  margin-bottom: 20px
&lt;/pre&gt;

&lt;p&gt;Agora basta fazer um &lt;code&gt;for&lt;/code&gt; simples no SASS. Esse for vai calcular a largura de todas as colunas, que no nosso exemplo tem apenas 12:&lt;/p&gt;

&lt;pre class=&#34;lang-sass&#34;&gt;@for $i from 1 through $grid-columns
  .grid-#{$i}
    width: 100% / $grid-columns * $i
&lt;/pre&gt;

&lt;p&gt;O output desse &lt;code&gt;for&lt;/code&gt; é algo mais ou menos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.grid-1 {
  width: 8.33333%;
}

.grid-2 {
  width: 16.66667%;
}

.grid-3 {
  width: 25%;
}

.grid-4 {
  width: 33.33333%;
}

.grid-5 {
  width: 41.66667%;
}

.grid-6 {
  width: 50%;
}

.grid-7 {
  width: 58.33333%;
}

.grid-8 {
  width: 66.66667%;
}

.grid-9 {
  width: 75%;
}

.grid-10 {
  width: 83.33333%;
}

.grid-11 {
  width: 91.66667%;
}

.grid-12 {
  width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;O resultado você pode ver abaixo:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Usando o plugin 960gs e o Photoshop</title>
      <link>http://tableless.com.br/usando-o-plugin-960gs-e-o-photoshop/</link>
      <pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/usando-o-plugin-960gs-e-o-photoshop/</guid>
      <description>

&lt;p&gt;Grids tem como base no Design Gráfico como forma não só de organização, mas de proporção e distribuição dos elementos dentro do layout. Seja de um livro, uma revista ou um web site, usamos grids para estruturar as informações e alinhamentos.&lt;/p&gt;

&lt;p&gt;Especialmente no Design para Web, usamos, na maioria das vezes o sistema de grid de 960 pixels que é um padrão para monitores antigos com resolução de 1024×768 mostrem o site corretamente sem que se crie a barra de rolagem horizontal.&lt;/p&gt;

&lt;p&gt;No sistema de grid de 960px podemos dividir em 12, 16 ou 24 colunas e criar a estrutura do site nessas proporções facilitando para que se torne responsivo e adaptativo para telas de dispositivos móveis.&lt;/p&gt;

&lt;p&gt;Neste tutorial eu vou mostrar como funciona um layout de um site responsivo usando o 960gs no Photoshop&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-plugin&#34;&gt;Instalando o plugin&lt;/h2&gt;

&lt;p&gt;Um recurso muito interessante para criarmos grids rapidamente em softwares como o Photoshop e o Fireworks é o plugin 960gs. Este plugin pode ser encontrado no site &lt;a href=&#34;http://960.gs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://960.gs/&#34;&gt;http://960.gs/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/960gs-btn.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37700&#34; alt=&#34;960gs-btn&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/960gs-btn-465x310.jpg&#34; width=&#34;465&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/960gs-btn-465x310.jpg 465w, uploads/2013/06/960gs-btn-252x168.jpg 252w, uploads/2013/06/960gs-btn.jpg 600w&#34; sizes=&#34;(max-width: 465px) 100vw, 465px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No site, encontramos o botão de download &amp;#8211; &lt;strong&gt;Big ol’ DOWNLOAD button&lt;/strong&gt; . A pasta vem com um nome &lt;strong&gt;“nathansmith-960-Grid-System-231ee0c“&lt;/strong&gt; que contém códigos html e css e vários tipos de templates do grid para diversos tipos de aplicações.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/plugin.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37702&#34; alt=&#34;plugin&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/plugin-465x310.jpg&#34; width=&#34;465&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/plugin-465x310.jpg 465w, uploads/2013/06/plugin-252x168.jpg 252w, uploads/2013/06/plugin.jpg 600w&#34; sizes=&#34;(max-width: 465px) 100vw, 465px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Baixando o arquivo e descompactando temos a pasta &lt;strong&gt;app_plugin&lt;/strong&gt; e temos a Actions para Photoshop e a extensão do Fireworks. Execute a Action ele abrirá o Photoshop automaticamente com os padrões de grid no painel de Actions. &lt;strong&gt;Window &amp;gt; Action ou Alt + F9&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/actions.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37701&#34; alt=&#34;actions&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/actions-465x310.jpg&#34; width=&#34;465&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/actions-465x310.jpg 465w, uploads/2013/06/actions-252x168.jpg 252w, uploads/2013/06/actions.jpg 600w&#34; sizes=&#34;(max-width: 465px) 100vw, 465px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;definindo-o-layout&#34;&gt;Definindo o layout&lt;/h2&gt;

&lt;p&gt;Vamos trabalhar no padrão de 12 colunas apenas. Executando a Action no botão “Play” ele cria um documento padrão com o tamanho de &lt;strong&gt;1020x700px&lt;/strong&gt; e com o nome &lt;strong&gt;12 Column Grid&lt;/strong&gt;. *As definições do grid podem ser alteradas caso seja necessário.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/grid-1.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37703&#34; alt=&#34;grid-1&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/grid-1-465x310.jpg&#34; width=&#34;465&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/grid-1-465x310.jpg 465w, uploads/2013/06/grid-1-252x168.jpg 252w, uploads/2013/06/grid-1.jpg 600w&#34; sizes=&#34;(max-width: 465px) 100vw, 465px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos ajustar nosso documento para o tamanho inicial de &lt;strong&gt;1440x900px&lt;/strong&gt;. A altura do layout pode variar com o andamento do wireframe. Para isso vamos em &lt;strong&gt;Image &amp;gt; Canvas Size ou Alt+Ctrl+C&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/canvas.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37704&#34; alt=&#34;canvas&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/canvas-465x310.jpg&#34; width=&#34;465&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/canvas-465x310.jpg 465w, uploads/2013/06/canvas-252x168.jpg 252w, uploads/2013/06/canvas.jpg 600w&#34; sizes=&#34;(max-width: 465px) 100vw, 465px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; É importante ressaltar que o grid vêm com &lt;strong&gt;10px&lt;/strong&gt; de margem direita e esquerda. O nosso layout responsivo vai se basear nessas h2.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-medium wp-image-37705&#34; alt=&#34;grid-2&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/grid-2-465x310.jpg&#34; width=&#34;465&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/grid-2-465x310.jpg 465w, uploads/2013/06/grid-2-252x168.jpg 252w, uploads/2013/06/grid-2.jpg 600w&#34; sizes=&#34;(max-width: 465px) 100vw, 465px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Salve o seu documento &lt;strong&gt;File &amp;gt; Save&lt;/strong&gt; ou &lt;strong&gt;Ctrl + S&lt;/strong&gt; com um nome que você quiser. Eu salvei o meu documento como uma empresa fictícia chamada &lt;strong&gt;Covey.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;criando-a-interface&#34;&gt;Criando a interface&lt;/h2&gt;

&lt;p&gt;Se você está criando uma interface do zero, pense no seu contexto e conteúdo. Quando se cria sites responsivos, é crucial pensarmos como exibiremos o seu conteúdo e como ele vai se comportar em dispositivos com telas menores. Tablets no geral tem resolução em posição de paisagem de &lt;strong&gt;1024&amp;#215;768&lt;/strong&gt;, logo, sites criados em padrões &lt;strong&gt;960px&lt;/strong&gt; funcionam perfeitamente nessa resolução.&lt;/p&gt;

&lt;p&gt;Quando escolhemos o sistema de grid de &lt;strong&gt;12&lt;/strong&gt;, &lt;strong&gt;16&lt;/strong&gt; ou &lt;strong&gt;24&lt;/strong&gt; colunas, seguimos um padrão de uso de colunas. Abaixo eu apliquei em um wireframe usando o sistema de &lt;strong&gt;12 colunas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ele tem um tamanho de &lt;strong&gt;940px&lt;/strong&gt; de área útil, ou seja, de conteúdo e elementos. Deixei &lt;strong&gt;10px&lt;/strong&gt; padrão de cada lado do layout como folga, assim ele não ficará colado na borda da tela.&lt;/p&gt;

&lt;p&gt;Aqui, tenho um cabeçalho com menu e um banner principal com texto e um rodapé com links. Meu conteúdo é dividido em 3 blocos, então eu usei 4 colunas para cada bloco. Se eu tivesse 4 blocos de conteúdo, usaria 3 colunas e assim sucessivamente. No meu caso, eu usarei o grid da seguinte forma:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/desktop_01_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37706&#34; alt=&#34;desktop_01_01&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/desktop_01_01-401x310.jpg&#34; width=&#34;401&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/desktop_01_01-401x310.jpg 401w, uploads/2013/06/desktop_01_01-217x168.jpg 217w, uploads/2013/06/desktop_01_01.jpg 600w&#34; sizes=&#34;(max-width: 401px) 100vw, 401px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No formato retrato &lt;strong&gt;(768px)&lt;/strong&gt; do  &lt;strong&gt;tablet&lt;/strong&gt;, eu usei 9 colunas e redimensionei o conteúdo para utilizar os mesmo blocos de conteúdo em 3 colunas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/tablet_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37708&#34; alt=&#34;tablet_01&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/tablet_01-401x310.jpg&#34; width=&#34;401&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/tablet_01-401x310.jpg 401w, uploads/2013/06/tablet_01-217x168.jpg 217w, uploads/2013/06/tablet_01.jpg 600w&#34; sizes=&#34;(max-width: 401px) 100vw, 401px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E no &lt;strong&gt;celular&lt;/strong&gt; &lt;strong&gt;(240px)&lt;/strong&gt; o uso de 3 colunas para cada bloco de conteúdo é o mesmo, o que muda é a posição dos elementos que passam a ficar um em cima do outro.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/58df1f37-5a47-4696-8197-216d3ff6836c.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-37800&#34; alt=&#34;58df1f37-5a47-4696-8197-216d3ff6836c&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/58df1f37-5a47-4696-8197-216d3ff6836c.png&#34; width=&#34;600&#34; height=&#34;947&#34; srcset=&#34;uploads/2013/06/58df1f37-5a47-4696-8197-216d3ff6836c.png 600w, uploads/2013/06/58df1f37-5a47-4696-8197-216d3ff6836c-106x168.png 106w, uploads/2013/06/58df1f37-5a47-4696-8197-216d3ff6836c-196x310.png 196w&#34; sizes=&#34;(max-width: 600px) 100vw, 600px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eu não vou entrar a fundo no assunto de &lt;strong&gt;CSS&lt;/strong&gt;. Eu exemplifiquei para mostrar como eu resolvi a questão do redimensionamento.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body{
    margin:0 10px;
    background:#f1f1f1;
}

#geral{
    width:100%;
    max-width:940px;
    min-width:220px;
    margin:0 auto;
}

header{
    height:80px;
    background:#323232;
}

#banner{
    height:260px;
    background:#FFF;
    margin:15px 0 15px;
}

footer{
    height:190px;
    background:#CCC;
    margin:15px 0;
    clear:both;
}

article{
    height:260px;
    background:#5f65b3;
    width:31.25%;
    float:left;
}

article.middle{
    margin:0 3.125% 15px;
}

@media only screen and (max-width:600px){
    article{
        width:100%;
        margin-bottom:15px;
    }

    article.middle{
        margin:0px;
        margin-bottom:15px;
    }
}&lt;/pre&gt;

&lt;p&gt;No site fictício, eu criei em cima do wireframe pensando como as informações ficariam dispostas, então temos a interface web. Nesta parte não detalhei detalhes visuais ou de formatação, apenas no conceito de grids.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/covey-960gs-example.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37707&#34; alt=&#34;covey-960gs-example&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/covey-960gs-example-496x310.png&#34; width=&#34;496&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/covey-960gs-example-496x310.png 496w, uploads/2013/06/covey-960gs-example-268x168.png 268w, uploads/2013/06/covey-960gs-example.png 1440w&#34; sizes=&#34;(max-width: 496px) 100vw, 496px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se colocarmos como se fossem camadas, a ideia do uso do grid para 3 diferentes tipos de tela, temos esse resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/camads_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37710&#34; alt=&#34;camads_01&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/camads_01-490x310.jpg&#34; width=&#34;490&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/camads_01-490x310.jpg 490w, uploads/2013/06/camads_01-265x168.jpg 265w, uploads/2013/06/camads_01.jpg 600w&#34; sizes=&#34;(max-width: 490px) 100vw, 490px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;resultado-final&#34;&gt;Resultado Final&lt;/h2&gt;

&lt;p&gt;Em sua versão desktop, temos o layout padrão em grid &lt;strong&gt;960px&lt;/strong&gt;. O resultado final ficaria assim:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/pc_01_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37711&#34; alt=&#34;pc_01_01&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/pc_01_01-463x310.jpg&#34; width=&#34;463&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/pc_01_01-463x310.jpg 463w, uploads/2013/06/pc_01_01-251x168.jpg 251w, uploads/2013/06/pc_01_01.jpg 600w&#34; sizes=&#34;(max-width: 463px) 100vw, 463px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na versão  &lt;strong&gt;tablet&lt;/strong&gt;, o CSS diminui as imagens, o texto do banner e o tamanho do corpo de cada bloco de conteúdo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/0000_01_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37712&#34; alt=&#34;0000_01_01&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/0000_01_01-328x310.jpg&#34; width=&#34;328&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/0000_01_01-328x310.jpg 328w, uploads/2013/06/0000_01_01-178x168.jpg 178w, uploads/2013/06/0000_01_01.jpg 600w&#34; sizes=&#34;(max-width: 328px) 100vw, 328px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na versão de &lt;strong&gt;celular&lt;/strong&gt;, o layout se adapta até o tamanho de &lt;strong&gt;240px&lt;/strong&gt;. Com ajuda do CSS, eu otimizei o menu para o estilo &lt;strong&gt;dropdown&lt;/strong&gt;, otimizando a experiência de navegação.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/06/celular_01.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-37713&#34; alt=&#34;celular_01&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/celular_01-432x310.jpg&#34; width=&#34;432&#34; height=&#34;310&#34; srcset=&#34;uploads/2013/06/celular_01-432x310.jpg 432w, uploads/2013/06/celular_01-234x168.jpg 234w, uploads/2013/06/celular_01.jpg 600w&#34; sizes=&#34;(max-width: 432px) 100vw, 432px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Vários artigos sobre &lt;strong&gt;Design Responsivo&lt;/strong&gt; ou &lt;strong&gt;RWD&lt;/strong&gt; (Responsive Web Design) estão disponíveis na Web. Este artigo é apenas uma das formas que conseguimos otimizar o site para dispositivos móveis. Lembrando, como disse anteriormente, temos que pensar como o conteúdo será exibido e como podemos moldar ao nosso projeto e como trabalhar ele de diferentes formas.&lt;/p&gt;

&lt;p&gt;Eu disponibilizei esse exemplo de layout neste &lt;a href=&#34;http://bit.ly/12kNheE&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://bit.ly/12kNheE&#34;&gt;http://bit.ly/12kNheE&lt;/a&gt;&lt;/a&gt; para melhor visualização e entendimento. Espero que tenha ajudado a gerar conhecimento. Gostou, quer comentar ou criticar? Vamos conversar&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grids semânticos com LESS</title>
      <link>http://tableless.com.br/grids-semanticos-com-less/</link>
      <pubDate>Fri, 08 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/grids-semanticos-com-less/</guid>
      <description>

&lt;h1 id=&#34;grids-semânticos-com-less&#34;&gt;Grids semânticos com LESS&lt;/h1&gt;

&lt;p&gt;Já reparou como os blocos da sidebar aqui do Tableless possuem todos a mesma largura? Ou como a largura do bloco de artigo somada a largura da sidebar é equivalente ao wrap do menu e do rodapé? Mesmo que você não tenha percebido isto antes de maneira consciente, a informação parece mais organizada desta forma&amp;#8230;É por que o design do Tableless, como boa parte do conteúdo da internet, foi alinhado com o auxilio de um grid.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-um-grid&#34;&gt;O que é um grid?&lt;/h2&gt;

&lt;p&gt;Um grid é basicamente um conjunto de linhas guias, horizontais e/ou verticais, que servem de base para um design. No caso de design digital, o grid funciona como um esqueleto onde o layout será apoiado. Grids estão em todos os lugares, mesmo que você não os enxergue. Basta olhar a sua volta. A organização da informação é uma das principais vantagens na utilização de um grid, mas eu poderia citar diversas outras como precisão, consistência, hierarquia visual, ritmo&amp;#8230; Só isto já daria um artigo inteiro. Grids são mesmo maravilhosos e a maior parte dos designers que conheço são apaixonados pro eles. Mas muitas vezes reproduzir a precisão de um grid em um código HTML/CSS é uma tarefa muito desgastante. Alguns desenvolvedores &amp;#8211; as vezes por desconhecimento, as vezes por preguiça, as vezes por falta de tempo hábil &amp;#8211; acabam alterando os valores. Arredondam uma porcentagem aqui, inventam uma margem ali, completamente desconsideram o valor de espaçamento entre linha&amp;#8230; Resultado: o layout final parece bem diferente do original já que o grid foi praticamente descartado. Designers choram. Desenvolvedores se descabelam. Caos. Okay, talvez não de maneira tão dramática. Mas recriar a precisão do grid no CSS pode ser um problema. Ainda mais quando se trata de um projeto que inclui design responsivo&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;sistemas-convencionais-de-grids-e-seus-problemas&#34;&gt;Sistemas convencionais de grids (e seus problemas)&lt;/h2&gt;

&lt;p&gt;Existem algumas alternativas que prometem ajudar nesta tarefa. Sistemas como o &lt;a href=&#34;http://cssgrid.net/&#34; title=&#34;1140 Grid System&#34;&gt;1140 Grid System&lt;/a&gt; e o clássico &lt;a href=&#34;http://960.gs/&#34; title=&#34;960gs&#34;&gt;960gs&lt;/a&gt; quebram um galho e são faceis de utilizar, mas diversos aspectos me incomodavam nestes sistemas: classes não semânticas que sujavam o código (.onecol, .twocol&amp;#8230; argh!), a necessidade de utilizar excessivamente truques como clearfix para &amp;#8220;abrir&amp;#8221; as fileiras e o aspecto engessado já que em nenhum destes sistemas existia a opção de customizar a largura das margens e colunas de acordo com o projeto. O jeito então era escrever manualmente um grid para cada job. Falo por mim mesma quando digo que matemática nunca foi o meu forte e aqueles pequenos segundos quebrando a cabeça na calculadora acabavam deixando todo processo mais lento quando somados no fim do dia. Mas tudo isto mudou com o adventos dos pré-processadores de CSS.&lt;/p&gt;

&lt;h2 id=&#34;para-que-servem-pré-processadores&#34;&gt;Para que servem pré-processadores?&lt;/h2&gt;

&lt;p&gt;Basicamente eles pegam o texto escrito em uma linguagem e convertem ele para outra. Ou seja, literalmente pré-processam o código. No que isto é útil? Bem, é possível adicionar funcionalidades novas em linguagens pré existentes. Sistemas como &lt;a href=&#34;http://lesscss.org/&#34; title=&#34;LESS &#34;&gt;LESS&lt;/a&gt;, &lt;a href=&#34;http://sass-lang.com/&#34; title=&#34;SASS&#34;&gt;SASS&lt;/a&gt; e &lt;a href=&#34;http://learnboost.github.com/stylus/&#34; title=&#34;Stylus&#34;&gt;Stylus&lt;/a&gt; tornam possível trabalhar com velhos conhecidos dos programadores como variáveis, mixins, funções e operações matemáticas dentro do próprio CSS. É algo como uma folha de estilos com esteróides. E são estas funcionalidades extras que permitem a criação de um grid semântico.&lt;/p&gt;

&lt;h2 id=&#34;um-aviso-aos-navegantes&#34;&gt;Um aviso aos navegantes&lt;/h2&gt;

&lt;p&gt;Vamos utilizar o sistema &lt;a href=&#34;http://semantic.gs/&#34; title=&#34;Semantic.gs&#34;&gt;Semantic.gs&lt;/a&gt;. Existem muitos outros do tipo, mas a vantagem dele é que não se trata de um framework cheio de classes inúteis ou de um plugin de js que pesará no final. Este grid é todo escrito usando apenas CSS compatível com as linguagens do LESS, SASS e Stylus. Para este artigo eu escolhi utilizar LESS por ser a linguagem mais popular. Mas é facinho de adaptar para as outras, só vai mudar a sintaxe. Ainda não sabe utilizar o LESS? Sugiro que você leia o artigo aqui do Tableless &amp;#8220;&lt;a href=&#34;http://tableless.com.br/css-dinamico-com-less/&#34; title=&#34;CSS dinâmico com LESS&#34;&gt;CSS Dinâmico com Less&lt;/a&gt;&amp;#8220;. Entendeu tudo direitinho? Então você esta pronto para começar.&lt;/p&gt;

&lt;h2 id=&#34;o-design&#34;&gt;O design&lt;/h2&gt;

&lt;p&gt;O primeiro passo, obviamente, é criar o grid no seu editor de imagens favoritos. No caso do Photoshop você pode quebrar a cabeça puxando linhas guias, utilizar algum plugin como o &lt;a href=&#34;http://guideguide.me/&#34; title=&#34;GuideGuide&#34;&gt;GuideGuide&lt;/a&gt; ou ainda utilizar usar um gerador online. Eu recomendo o &lt;a href=&#34;http://gridcalculator.dk/&#34; title=&#34;Grid Calculator&#34;&gt;Grid Calculator&lt;/a&gt;. Você insere o tamanho das colunas, das margens e a largura total do arquivo e magicamente ele gera um script de Photoshop ou Ilustrator ou ainda um arquivo em png com o grid prontinho. Mais fácil que tirar sarro do Internet Explorer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Um grid é basicamente um conjunto de linhas guias, horizontais e/ou verticais, que servem de base para um design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então vamos considerar uma estrutura basica bem simples. Header, um bloco de conteúdo, sidebar e footer em um wrap de 960 pixes de largura.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-13192&#34; alt=&#34;grid-exemplo-layout&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/03/layout.jpg&#34; width=&#34;580&#34; height=&#34;407&#34; srcset=&#34;uploads/2013/03/layout.jpg 580w, uploads/2013/03/layout-239x168.jpg 239w, uploads/2013/03/layout-441x310.jpg 441w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para criar este layout eu utilizei um grid de 12 colunas com 60 pixels de largura. Okay. Layout feito. Hora de desenvolver.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-13191&#34; alt=&#34;grid-exemplo-colunas&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/03/grid.jpg&#34; width=&#34;580&#34; height=&#34;407&#34; srcset=&#34;uploads/2013/03/grid.jpg 580w, uploads/2013/03/grid-239x168.jpg 239w, uploads/2013/03/grid-441x310.jpg 441w&#34; sizes=&#34;(max-width: 580px) 100vw, 580px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;construindo-o-grid&#34;&gt;Construindo o Grid&lt;/h2&gt;

&lt;p&gt;Baixe a &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/03/grid.zip&#34;&gt;Demo&lt;/a&gt; ou crie um novo arquivo HTML com a seguinte estrutura.&lt;/p&gt;

&lt;pre&gt;&amp;lt;body&amp;gt;

&amp;lt;div class=&#34;wrap&#34;&amp;gt;
&amp;lt;header class=&#34;cabecalho&#34;&amp;gt;
&amp;lt;h1&amp;gt;Header&amp;lt;/h1&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;section class=&#34;conteudo&#34;&amp;gt;
&amp;lt;h1&amp;gt;Conteúdo&amp;lt;/h1&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;aside class=&#34;sidebar&#34;&amp;gt;
&amp;lt;h1&amp;gt;Sidebar&amp;lt;/h1&amp;gt;
&amp;lt;/aside&amp;gt;

&amp;lt;footer class=&#34;footer&#34;&amp;gt;
&amp;lt;h1&amp;gt;Footer&amp;lt;/h1&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;/div&amp;gt; &amp;lt;!-- /wrap--&amp;gt;

&amp;lt;/body&amp;gt;&lt;/pre&gt;

&lt;p&gt;Crie também um arquivo de CSS na linguagem LESS (style.less, por exemplo) e coloque o link entre as tags head do seu layout.&lt;/p&gt;

&lt;pre&gt;&amp;lt;link rel=&#34;stylesheet/less&#34; href=&#34;css/style.less&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Não se esqueça de fazer o download da &lt;a href=&#34;https://raw.github.com/cloudhead/less.js/master/dist/less-1.3.3.min.js&#34; title=&#34;LESS&#34;&gt;última versão do LESS&lt;/a&gt; e referencia-la também head do seu HTML. Lembrando sempre que este script deve aparecer depois da folha de estilos.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;js/less-1.3.3.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hora de setar o nosso grid. Inclua o seguinte código na sua folha de estilos LESS:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* ==|=======================================================================
   Grid //  http://semantic.gs/ 
========================================================================== */

/*Altere estes valores de acordo com a largura das colunas, largura das margens e o número de colunas do seu grid.*/
@column-width: 60;
@gutter-width: 20;
@columns: 12;

@gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;

/*Delete a linha abaixo se desejar trabalhar com valores em pixel.*/
@total-width: 100%;

.clearfix() {
    *zoom:1;

    &amp;:before,
    &amp;:after {
        content:&#34;&#34;;
        display:table;
    }
    &amp;:after {
        clear:both;
    }
}

body {
    width: 100%;
    .clearfix;
}

.row(@columns:@columns) {
    display: block;
    width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width);
    margin: 0 @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1);
    .clearfix;
}
.column(@x,@columns:@columns) {
    display: inline;
    float: left;
    width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
    margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
    }

.push(@offset:1) {
    margin-left: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}
.pull(@offset:1) {
    margin-right: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}

/*Determine a largura do seu container.*/
.wrap {
    max-width: 960px;
    margin: 0 auto;
}&lt;/pre&gt;

&lt;p&gt;Para customizar de acordo com o seu grid é bem fácil. Basta alterar os valores deste trecho:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@column-width: 60;
@gutter-width: 20;
@columns: 12;&lt;/pre&gt;

&lt;p&gt;Na opção @column-width você escreve a largura em pixels da coluna, em @gutter-width você escolhe a largura das margens e em @columns o número de colunas. E pronto! A matemática é toda feita pra você e o semantic.gs converte todas as medidas de pixel para porcentagem.&lt;/p&gt;

&lt;h2 id=&#34;como-aplicar-o-grid&#34;&gt;Como aplicar o grid&lt;/h2&gt;

&lt;p&gt;Segundo o nosso (belíssimo) layout o header deve ocupar a largura total do wrap, ou seja, o espaço equivalente a 12 colunas. Para isto basta acrescentar a classe .column(12) na folha de estilos.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.cabecalho {
      .column(12);
}&lt;/pre&gt;

&lt;p&gt;E isto no CSS final é compilado para os valores em porcentagens com uma margem de 10px:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.cabecalho  {
   display: inline;
   float: left;
   width: 97.61904761904762%;
   margin: 0 1.1904761904761905%;
}&lt;/pre&gt;

&lt;p&gt;Legal, né? Da mesma forma podemos determinar o espaço destinado ao conteúdo e a sidebar.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.conteudo {
        .column(9);
}
.sidebar {
        .column(3);
}&lt;/pre&gt;

&lt;p&gt;E isto será compilado para:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.conteudo {
  display: inline;
  float: left;
  width: 64.58333333333334%;
  margin: 0 1.0416666666666665%;
}
.sidebar {
  display: inline;
  float: left;
  width: 31.25%;
  margin: 0 1.0416666666666665%;
}&lt;/pre&gt;

&lt;h2 id=&#34;dominando-o-mundo-com-media-queries&#34;&gt;Dominando o mundo com media queries&lt;/h2&gt;

&lt;p&gt;Agora para fazer o conteúdo se adaptar a dispositivos mobile é moleza. É só utilizar os bons e velhos media-queries. Vamos supor que para smartphones tanto a section conteúdo quanto a sidebar devem ocupar a largura total do wrap.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 480px) {
   .conteudo, .sidebar {
      .column(12);
   }
 }&lt;/pre&gt;

&lt;p&gt;E pronto! Desenvolvimento responsivo de maneira prática e semântica, sem se preocupar com a matemática.&lt;/p&gt;

&lt;h2 id=&#34;como-a-magia-acontece&#34;&gt;Como a magia acontece&lt;/h2&gt;

&lt;p&gt;É tudo através desta função. Basicamente ele considera a largura total do sistema de grid como a largura das colunas multiplicado pelo número de colunas somado com a largura das margens multiplicado pelo número de colunas vezes um pixel.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;&lt;/pre&gt;

&lt;p&gt;Não quer trabalhar com porcentagens? Sem problema. Delete esta linha que os valores ficam em pixel.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@total-width: 100%;&lt;/pre&gt;

&lt;h2 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h2&gt;

&lt;p&gt;Existem algumas outras funções interessantes como a possibilidade de puxar e empurrar as divs e trabalhar com colunas aninhadas. Vale a pena ler a &lt;a href=&#34;http://semantic.gs/&#34; title=&#34;Semantic.gs&#34;&gt;documentação do semantic.gs&lt;/a&gt; e seguir o projeto no &lt;a href=&#34;https://github.com/twigkit/semantic.gs/&#34; title=&#34;Semantic.gs no GitHub&#34;&gt;GitHub&lt;/a&gt; para conferir futuras atualizações. O sistema é compatível com Firefox 3.5+, Safari 4+, Chrome, Opera 9+ e IE6.&lt;/p&gt;

&lt;p&gt;E vocês? Utilizam algum sistema de grid? Quais são as vantagens e desvantagens? Deixem as sugestões nos comentários.&lt;/p&gt;

&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2013/03/grid.zip&#34;&gt;Demo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando seu próprio Framework HTML CSS</title>
      <link>http://tableless.com.br/criando-seu-framework-html-css/</link>
      <pubDate>Mon, 07 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-seu-framework-html-css/</guid>
      <description>

&lt;p&gt;Em 2011, principalmente em 2012, dezenas de pessoas vinham e voltavam com o assunto &amp;#8220;Qual o melhor Framework?&amp;#8221;, fora os bootstrap fanboys de plantão que falavam tão cegamente do Twitter Bootstrap que se somasse todos os amores da internet teriamos um &amp;#8220;cupcake de gato dançando Gangnam Style após tentar beber 1 litro de absolute&amp;#8221; bootstrape. Eu sempre falo isso no meio das minhas palestras e começo dizendo no início desse post: Sejamos menos emotivos e mais analistas em Front-end, explico a seguir:&lt;/p&gt;

&lt;p&gt;Nossa função é analisar as possibilidades, testar as inovações, medir os riscos e otimizar os resultados. Testar frameworks como Twitter Bootstrap, Foundation, &amp;#8230; é parte do nosso trabalho, onde em muitos casos a pessoa esquece a melhor parte: &lt;strong&gt;Criar o seu próprio Framework Front-end&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;por-que-você-deseja-criar-seu-próprio-framework&#34;&gt;Por que você deseja criar seu próprio Framework?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nenhum dos frameworks tem o objeto que eu preciso&lt;/li&gt;
&lt;li&gt;Eu quero total controle sobre o código&lt;/li&gt;
&lt;li&gt;Eu preciso de algo mais simples ou menos objetos do que os outros possuem&lt;/li&gt;
&lt;li&gt;Aprender a criar um Framework por diversão e aprendizado&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;por-que-você-não-deve-criar-o-seu-próprio-framework&#34;&gt;Por que você não deve criar o seu próprio Framework?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Você não tem tempo disponível para criá-lo&lt;/li&gt;
&lt;li&gt;É mais vantajoso utilizar um já pronto do que criar um do zero&lt;/li&gt;
&lt;li&gt;Maior produtividade por utilizar algo já criado e documentado&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se você teve mais afinidade a primeira lista, ou é apenas curioso, vamos começar com alguns tópicos que o levarão a criar o &amp;#8220;defina o nome a sua escolha&amp;#8221; bootstrap.&lt;/p&gt;

&lt;h2 id=&#34;tudo-depende-da-nomeclatura-e-organização&#34;&gt;Tudo depende da nomeclatura e organização&lt;/h2&gt;

&lt;p&gt;Para componentizar sua página de maneira sustentável você precisa explorar ao máximo a organização e padronização do projeto. Quando eu analiso código de alguns profissionais ou empresas, sempre começo olhando pelos nomes utilizados em classes, pois me diz muito sobre a política da empresa na hora da criação das páginas, por exemplo:&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;Botão = .button, .botao, .btn, .bt&lt;/pre&gt;

&lt;p&gt;A partir da escolha do padrão, você precisa mantê-lo nas variações&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;.btn-enviar, .btn-cancelar, .btn-salvar, .btn-pesquisar, ...&lt;/pre&gt;

&lt;p&gt;Então geramos uma redundância no prefixo, que é uma coisa boa quando falamos em padrão e organização&lt;/p&gt;

&lt;pre class=&#34;prettify lang-html&#34;&gt;&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;&lt;/pre&gt;

&lt;p&gt;A partir daí você vai seguir a mesma linha para demais diferenciações e se são diferenciais específicas do componente de botão ou se é uma variação genérica, como visto abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;/* classe full específica */
&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar btn-full&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;

/* classe full generica */
&amp;lt;a href=&#34;#&#34; title=&#34;salvar&#34; class=&#34;btn btn-salvar full&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Assim, podemos contextualizar para outros artefatos e seus devidos prefixos:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;Botão = .button, .botao, .btn, .bt
Tabela = .table, .tabela, .tbl, .tb
listas = .list, .lista, .group
widgets = .widgets, .wid
títulos = .title, .tit, .tt, .header, .h
&lt;/pre&gt;

&lt;p&gt;e algumas devidas personalizações&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;Botão = .btn-primary, .btn-secondary, .btn-small, .btn-medium, .btn-loading, .btn-disabled
Tabela = .tbl-roles, .tbl-full, .tbl-small
Tooltip = .tooltip, .tooltip-pin-up, .tooltip-pin-down, .tooltip-small, .tooltip-warning
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OBS: É óbvio que estou dando exemplos e você deve construir seus padrões com a sua equipe e profissionais envolvidos no processo.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;revisando&#34;&gt;Revisando&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A parte mais primordial para a construção de um Framework sustentável é o trabalho de nomeclaturas e seu emprego no código&lt;/li&gt;
&lt;li&gt;O nome dado ao componente deve vir como prefixo das suas diversificações&lt;/li&gt;
&lt;li&gt;Caso uma das variações seja utilizada em outros componentes, ela pode ser utilizada sem prefixo como &amp;#8220;full, clear, left, right, error&amp;#8221;&lt;/li&gt;
&lt;li&gt;Mapeie a nomeclatura e as possibilidades com sua equipe, nunca sozinho&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;coloque-todos-seus-padrões-em-um-único-local&#34;&gt;Coloque todos seus padrões em um único local&lt;/h2&gt;

&lt;p&gt;Um bom framework é reconhecido pela reutilização de seu código, sendo assim, você não pode contar que seus elementos caibam, se alinhem e harmonizem apenas no local pre desenhado, por isso, você precisa criar uma página que apresente todos os elementos padronizados, a fim de testá-los e documentá-los. Repare nas duas páginas abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter Bootstrap: &lt;a href=&#34;http://twitter.github.com/bootstrap/components.html&#34; title=&#34;http://twitter.github.com/bootstrap/components.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://twitter.github.com/bootstrap/components.html&#34;&gt;http://twitter.github.com/bootstrap/components.html&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Foundation: &lt;a href=&#34;http://foundation.zurb.com/docs/elements.php&#34; title=&#34;http://foundation.zurb.com/docs/elements.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://foundation.zurb.com/docs/elements.php&#34;&gt;http://foundation.zurb.com/docs/elements.php&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora que está convencido, você precisa criar essa página de apresentação onde você listará os componentes padronizados. Em um primeiro momento você pode inserir os componentes na página, agrupando (Veja os links acima para inspirar-se) da maneira que achar mais organizada. Essa etapa lhe dará mais segurança, pois a cada componente finalizado, você e sua equipe comemorará pelo padrão criado. Lembre-se que mais do que criar os componentes é preciso sempre dar 360 nos seus artefatos, identificando pontos de melhoria ou bugs, tratando e atualizando-os nessa página de padrões.&lt;/p&gt;

&lt;h3 id=&#34;adendo-para-projetos-responsivos&#34;&gt;Adendo para projetos responsivos&lt;/h3&gt;

&lt;p&gt;Caso você tenha variações padronizadas para projetos responsivos, não os considere na mesma página, por mais que a mudança possa ser percebida na mudança do viewport, crie uma página &amp;#8220;padrao-mobile.html&amp;#8221; ou algo do tipo com o local útil já reduzido simulando a largura do device pretendido, pois os padrões precisam ser facilmente visualizados, nenhuma equipe ficaria contente toda hora tendo que redimensionar navegador para ver o elemento normal e para mobile né?&lt;/p&gt;

&lt;h3 id=&#34;revisando-1&#34;&gt;Revisando&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Todos os componentes padronizados precisam ser incluídos em uma página separada da aplicação para documentação e validação&lt;/li&gt;
&lt;li&gt;Se o elemento estará pronto quando puder ser reutilizado em outros locais sem quebrar (geralmente por má herança CSS)&lt;/li&gt;
&lt;li&gt;Agrupe os elementos (form, títulos, botões, grid, etc) para manter a organização do seu projeto&lt;/li&gt;
&lt;li&gt;Planeje e organize os padrões com sua equipe, nunca sozinho&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;módulos-produtos-componentes-e-ou-artefatos&#34;&gt;Módulos, produtos, componentes e(ou) artefatos&lt;/h2&gt;

&lt;p&gt;Os nomes são variados, pode chamar como achar mais fofo, mas o importante é saber que qualquer framework utiliza itens comuns, então comece por eles e, a partir daí, desenvolva em cima das suas necessidades menos comuns. Os componentes comuns são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grid&lt;/li&gt;
&lt;li&gt;Tipografia&lt;/li&gt;
&lt;li&gt;Botões&lt;/li&gt;
&lt;li&gt;Formulários&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Claro que cada projeto pedirá necessidades especiais, cabendo a você e sua equipe serem flexíveis e espertos. Vamos conversar rapidamente sobre cada um desses 4 componentes?&lt;/p&gt;

&lt;h3 id=&#34;grid&#34;&gt;Grid&lt;/h3&gt;

&lt;p&gt;Lembro de quando eu criei o &lt;a href=&#34;http://formee.org&#34; title=&#34;formee framework&#34; target=&#34;_blank&#34;&gt;Formee framework&lt;/a&gt; e penava com cálculos e mais cálculos para chegar ao Grid flexível perfeito, foram muitas páginas de caderno rabiscadas com contas e mais contas. O Grid é uma parte perigosa do projeto, principalmente por exigirem algumas escolhas desde o começo, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usarei float para diagramação?&lt;/li&gt;
&lt;li&gt;Usarei algum pre processador como Less, Sass ou Stylus?&lt;/li&gt;
&lt;li&gt;Usarei colunas em pixels ou colunas flexíveis?&lt;/li&gt;
&lt;li&gt;Minhas colunas serão responsivas?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A partir daí, você tem uma série de Grids famosos para você estudar e basear o seu projeto, alguns fugindo do float, gerando projetos mais interessantes, porém menos seguros para browsers não atuais (não, não me refiro apenas a IE); alguns utilizando contas dos pre processadores, gerando larguras e espaçamentos automáticos de acordo com o container; alguns utilizando colunas flexíveis (exemplo do Formee) que podem ser muito interessantes para muitos projetos, mas começa a gerar desconforto em containers muito pequenos e alguns utilizando colunas responsivas, que podem refazer todo o pensamento dos 3 primeiros itens dessa lista.&lt;/p&gt;

&lt;p&gt;Uma dica para quem está estudando o desenvolvimento de GRIDs é pesquisar sobre o atributo CSS &lt;strong&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/strong&gt; que é responsável por mudar o display do box model, passando a considerar o padding e border na hora de aparecer na largura/altura final, o box-model convencional não os considera na largura e altura, somando no resultado os valores, ou seja, 300px de largura acaba se tornando 300px + 2px de borda + 10px de padding = 312px total.&lt;/p&gt;

&lt;p&gt;Outro ponto mais avançado que vocês precisarão trabalhar em cima é a parte da criação do grid. Atualmente você tem duas formas de fazê-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;grid-6-12&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;grid-6-12&#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;row&#34;&amp;gt;
&amp;lt;div class=&#34;col-6&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;col-6&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Conseguem entender a diferença? O primeiro é comum em projetos onde você não tem controle sobre a quantidade de divs, assim você cria algo e vai administrando, do outro lado, você controla a diagramação linha por linha. O problema da primeira é o famoso bug de float, que quando um dos elementos rouba mais altura e impacta no elemento da linha de baixo, ele gera um buraco, desorientando os demais irmãos, o problema da segunda é que com isso você engessa totalmente o seu código, prejudicando inclusive a liberdade de uma diagramação criativa para mobiles.&lt;/p&gt;

&lt;p&gt;Rabisque para chegar numa largura confortável do seu grid, conte com um espaçamento confortável entre as colunas, teste, teste, teste e teste.&lt;/p&gt;

&lt;h3 id=&#34;tipografia&#34;&gt;Tipografia&lt;/h3&gt;

&lt;p&gt;Precisamos definir os elementos textuais da aplicação, geralmente são títulos, listas, parágrafos e links. É bastante importante você simular todas as combinações possíveis na etapa de testes, pois sempre pode gerar algum incomodo pro usuário, por exemplo, você ter um título grande, um parágrafo de 2 linhas e outro título grande não é a mesma coisa que 1 título grande e 5 parágrafos grandes, tudo isso precisa ser testado.&lt;/p&gt;

&lt;p&gt;Para você conhecer um pouco mais sobre tipografia na parte de Front-end, recomendo a &lt;a href=&#34;https://github.com/necolas/normalize.css/wiki&#34; title=&#34;https://github.com/necolas/normalize.css/wiki&#34; target=&#34;_blank&#34;&gt;wiki do Normalize.css criado pelo Nicolas Gallagher&lt;/a&gt; que retrata a falta de padronização na mostragem dos elementos textuais entre os browsers. Eu tenho algumas considerações sobre essa filosofia, mas quem sabe isso fica para um outro post 🙂&lt;/p&gt;

&lt;h3 id=&#34;botões&#34;&gt;Botões&lt;/h3&gt;

&lt;p&gt;Creio que a melhor forma de começar a criar seus padrões é pelo grupo de botões, pois é bastante simples e gostoso de criar. Geralmente em um aplicativo existem 2 tipos de botões, primário e genérico. O botão primário(&lt;code&gt;.btn-primary&lt;/code&gt;, &lt;code&gt;.btn-cta&lt;/code&gt;) é o botão das funções principais da página, é o botão de ação final e por isso mais importante, enquanto o botão genérico é utilizado para funções variadas que não sejam a função principal do usuário, a relação primário/genérico é a mesma de salvar/cancelar, avançar/upload photo, etc.&lt;/p&gt;

&lt;p&gt;Alguns projetos acabam necessitando de outros padrões no botão como, por exemplo, &lt;code&gt;.btn-secondary&lt;/code&gt; para botão de importância secundário, mas ainda sim não genérico, e &lt;code&gt;.btn-error.btn-no.btn-delete&lt;/code&gt; para botões que tenham uma carga negativa (vermelho talvez) clara neles para o usuário saber que pode ser perigosa tal opção.&lt;/p&gt;

&lt;p&gt;Geralmente, os botões possuim algumas particularidades comuns em todos os projetos como o .small para uma versão mais minimalista, .full para uma versão de ocupar toda a largura do container. Uma possibilidade é botões com ícones, assim sendo, primeiro é necessário criar um agrupamento de padrões chamados ícones, depois você precisa estudar se o elemento botão precisa sofrer alguma mudança por ter o ícone dentro, caso sim, seria interessante pensar em um padrão focado no &amp;#8220;estado&amp;#8221; do botão, podendo ser &lt;code&gt;.btn-icon&lt;/code&gt;, seguindo o padrão de &lt;code&gt;.btn-disabled&lt;/code&gt;, &lt;code&gt;.btn-loading&lt;/code&gt;, ou até mesmo criar um prefixo que indica as chamadas &lt;strong&gt;&amp;#8220;state rules&amp;#8221;&lt;/strong&gt;, mais difundida atualmente pelo &lt;a href=&#34;http://smacss.com/book/type-state&#34; title=&#34;http://smacss.com/book/type-state&#34; target=&#34;_blank&#34;&gt;SMACSS&lt;/a&gt;, segue um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;a.is-disabled { 
  color: gray;
}
.btn.is-disabled { 
  background: gray;
}
&lt;/pre&gt;

&lt;p&gt;Assim, o &lt;code&gt;&amp;quot;is-&amp;quot;&lt;/code&gt; passa a ser um padrão que pode ser reutilizado em diversos componentes, trazendo formatações diferentes. Então você pode criar dois &amp;#8220;states&amp;#8221; se achar interessante no seu projeto, um seria o &lt;code&gt;&amp;quot;is-&amp;quot;&lt;/code&gt; para &lt;code&gt;.is-loading&lt;/code&gt;, &lt;code&gt;.is-active&lt;/code&gt;, &lt;code&gt;.is-disabled&lt;/code&gt;, e criar outro chamado &lt;code&gt;&amp;quot;has-&amp;quot;&lt;/code&gt; como &lt;code&gt;.has-icon&lt;/code&gt;, &lt;code&gt;.has-photo&lt;/code&gt;, &lt;code&gt;.has-offer&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;formulários&#34;&gt;Formulários&lt;/h3&gt;

&lt;p&gt;Formulário, assim como o Grid é um elemento bastante complexo, pois exige muito estudo e testes. Você deve estar pensando &amp;#8220;Ah! Estilizar um input é muito simples&amp;#8221;, e estilizar uma lista de checkbox, radio? E personalizar um select para ele ficar mais interessante no Chrome (atualmente é horrível), e você considerar os novos inputs HTML5 como tel, search, range, e MUITOS outros e tratar de uma forma bacana pro seu app, por isso é bom você realizar testes e padrões.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/strong&gt; citado no Grid é um bom amigo para elementos de formulário também, pois você consegue controlar a largura dele de forma segura, visto que elemento como input não ocupará a linha toda só por ser display: block, você precisará definir largura 100%, daí ele somará o padding e a borda e quebrará seu grid. Mudando o box-sizing, você consegue dizer que o padding e a borda fará parte do 100% de largura, ficando bem mais fácil, não acha?&lt;/p&gt;

&lt;p&gt;Não se esqueça que mensagens de erro, sucesso, atenção, inputs com erros, labels, precisam ser padronizados e também colocados na página com os padrões no agrupamento de formulário. É bastante importante que esse arquivo seja visto pelos desenvolvedores back-end também, para que eles possam até já utilizar os padrões na hora de fazerem testes ou qualquer prototipagem, facilitando na hora da manipulação.&lt;/p&gt;

&lt;h2 id=&#34;javascript-não-é-um-plus&#34;&gt;Javascript não é um plus&lt;/h2&gt;

&lt;p&gt;Melhor do que a padronização visual, a padronização de classes, html e css, é ter também a padronização do funcionamento e manipulação desses componentes. Assim, o desenvolvedor front-end deve se arriscar a padronizar também o javascript, permitindo a reutilização do mesmo e manipulando dentro do padrão perseguido. Tanto o Foundation quanto o Bootstrap são excelentes Frameworks, pois além de seus módulos prontos, possuem interações bem implementadas como modais, tooltips, slideshow, accordion, dropdown, e muitos outros que agregam diretamente no projeto.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Nesses 8 anos de experiência específicos de desenvolvimento de aplicativos online, percebi que quanto mais padrões forem definidos em equipe, aumentamos mais a produtividade, diminuimos os erros no projeto, nos comunicamos melhor entre setores, perdas e ganhos de pessoas no time não gera uma grande perda de velocidade do time, e que a empresa fica sempre com um legado. A criação de um framework não é fácil, mas é bastante possível e, acredite, divertida.&lt;/p&gt;

&lt;h3 id=&#34;turbinando-seu-framework&#34;&gt;Turbinando seu Framework&lt;/h3&gt;

&lt;p&gt;Separei 3 coisas não comentadas acima que eu faço quando desenvolvo meus frameworks atualmente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separo meu CSS em arquivos LESS como: reset, base, theme, responsive. Tenho um style.less que compila todos num único CSS, mas mantendo a organização do projeto, o que é muito difícil de fazer depois que se passa das 3 mil linhas.&lt;/li&gt;
&lt;li&gt;De tanto em tanto tempo dou um 360 em uma dos padrões criados&lt;/li&gt;
&lt;li&gt;Apresento meu rascunho de planejamento do padrão para o Designer responsável (se houver) para que o mesmo possa alinhar os agrupamentos na hora de criar o &lt;a href=&#34;http://www.onextrapixel.com/2012/09/28/30-handy-and-free-ui-kits-for-web-and-mobile/&#34; title=&#34;http://www.onextrapixel.com/2012/09/28/30-handy-and-free-ui-kits-for-web-and-mobile/&#34; target=&#34;_blank&#34;&gt;UI kit&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;E você já criou o seu próprio Framework?&lt;/strong&gt; Conte aqui sua experiência 🙂&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>