<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Make on Tableless</title>
    <link>http://tableless.com.br/tags/make/index.xml</link>
    <description>Recent content in Make on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/make/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>O básico sobre o automatizador de tarefas Make</title>
      <link>http://tableless.com.br/jaime-o-garoto-quer-make/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/jaime-o-garoto-quer-make/</guid>
      <description>

&lt;p&gt;O trabalho no client-side é cercado por tarefas pequenas e frequentes. Por causa dessas tarefas frequentes, surgiram ferramentas fantásticas como Grunt, Gulp e vários outros.&lt;/p&gt;

&lt;p&gt;Mas se voltarmos um pouco no tempo, vamos encontrar um cara chamado &lt;strong&gt;MAKE&lt;/strong&gt;. Quem já instalou algum programa em alguma distribuição unix-like sabe bem do quem estou falando.&lt;/p&gt;

&lt;p&gt;Esse era o processo básico pra instalar o programa.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ ./configure
$ make
$ make install
&lt;/pre&gt;

&lt;p&gt;Mas junto com isso, você precisava resolver uma série de problemas de dependências, caminhos de arquivos, permissões, versão e em último caso, ligava ou chamava quele amigo que manjava muito de Linux e implorava por ajuda.&lt;/p&gt;

&lt;p&gt;Muitos podem ver esses problemas como algo ruim, mas observando melhor, isso faz com que você entenda para onde os arquivos estão indo e que para um programa funcionar, ele depende de outros programas e outras bibliotecas, que podem ter uma permissão especial para serem usados.&lt;/p&gt;

&lt;p&gt;Tá mas que diabos é o Make e qual a relação dele com o Grunt ou Glup?&lt;/p&gt;

&lt;h2 id=&#34;make&#34;&gt;Make&lt;/h2&gt;

&lt;p&gt;Basicamente o MAKE é um atomatizador de tarefas em ambientes unix que foi e é muito usado para compilar programas.&lt;/p&gt;

&lt;p&gt;No processo básico de instalação que falei acima o que acontecia era o seguinte:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ ./configure&lt;/code&gt; era um script que depois de executado com sucesso criava o arquivo &lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt; é o arquivo que dizia ao &lt;strong&gt;make&lt;/strong&gt; quais eram as tarefas a serem realizadas para compilar o programa, essas tarefas eram feitas numa ordem topologica respeitando as dependências dos arquivos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ make install&lt;/code&gt; esse comando chamava uma tarefa que estava definida no makefile e que tinha como objetivo fazer a instalação do programa compilado anteriormente.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://cristianounix.github.io/img/posts/graph.png&#34; alt=&#34;&#34; width=&#34;420&#34; height=&#34;273&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Veja mais sobre ordenação topologica &lt;a href=&#34;https://en.wikipedia.org/wiki/Topological_sorting&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O Make é nativo das plataformas Linux, mas caso não tenha basta instalar o pacote &lt;code&gt;build-essential&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ apt-get install build-essential&lt;/pre&gt;

&lt;p&gt;Antes de brincarmos com o Make, seria bom criar uma pasta em qualquer lugar de sua preferência, e dentro dela vamos criar nosso arquivo &lt;code&gt;Makefile&lt;/code&gt;. Neste arquivo vamos colocar esse conteúdo (respeitando as tabulações):&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;string = &#34;Finalizando...&#34;

all: task_all
task_all: dep1 dep2 dep3
  @echo $(string)
  @echo &#34;Pronto !!&#34;
dep1:
  @echo &#34;Dependencia 1 &#34;
dep2:
  @echo &#34;Dependencia 2 &#34;
dep3:
  @echo &#34;Dependencia 3 &#34;
  @echo
&lt;/pre&gt;

&lt;p&gt;Agora, via terminal e dentro dessa pasta, execute o make:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ make
----------------
Dependencia 1
Dependencia 2
Dependencia 3

Finalizando...
Pronto !!
&lt;/pre&gt;

&lt;p&gt;Legal, né?&lt;/p&gt;

&lt;p&gt;Se quiser mudar a ordem de execução só alterar a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;task_all: dep1 dep2 dep3&lt;/pre&gt;

&lt;p&gt;Para:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;task_all: dep3 dep2 dep1&lt;/pre&gt;

&lt;p&gt;Execute o make e observe a saída novamente. Percebeu que a ordem mudou?!&lt;/p&gt;

&lt;p&gt;Você também pode chamar uma tarefa especifica, assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ make dep2&lt;/pre&gt;

&lt;h3 id=&#34;vamos-fazer-algo-útil&#34;&gt;Vamos fazer algo útil&lt;/h3&gt;

&lt;p&gt;Agora que sabemos o básico do make, vamos pensar em como poderiamos substituir uma tarefa simples do grunt, nosso problema será esse:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compilar nossos arquivos stylus&lt;/li&gt;
&lt;li&gt;Concatenar todos os arquivos&lt;/li&gt;
&lt;li&gt;Minificar&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;# Compila, concatena e minifica todos os arquivos de estilo
# Obs: verifica se você tem disponivel os executaveis globalmente,
#     senão terá que colocar o path deles

PATH_STYL=styl/*.styl
PATH_CSS=css
STYLUS_CMD=stylus
CONCAT_CMD=cat 
CONCAT_PATH=styl/header.css styl/body.css styl/footer.css &amp;gt; css/style.css
UGLIFY_CMD=uglify
UGLIFY_PATH=-s ./css/style.css -o ./css/style.min.css -c

all: task_all
task_all: compile concat minify clean
  @echo &#34;Pronto !!&#34;
compile:
  $(STYLUS_CMD) $(PATH_STYL)
  @echo &#34;Stylus compilado...&#34;
concat:
  $(CONCAT_CMD) $(CONCAT_PATH)
  @echo &#34;Concatenando...&#34;
minify:
  $(UGLIFY_CMD) $(UGLIFY_PATH)
  @echo &#34;Minificando...&#34;
clean:
  rm styl/*.css
  @echo &#34;Limpando a bagunça...&#34;
&lt;/pre&gt;

&lt;p&gt;A saída desse cara que nós acabamos de fazer vai ser algo assim:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;http://cristianounix.github.io/img/posts/gif-make-makefile-front.gif&#34; alt=&#34;&#34; width=&#34;550&#34; height=&#34;321&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;vamos-tentar-deixar-um-pouco-mais-legal&#34;&gt;Vamos tentar deixar um pouco mais legal.&lt;/h4&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;# Compila, concatena e minifica todos os arquivos de estilo
# Obs: verifica se você tem disponivel os executaveis globalmente,
#     senão terá que colocar o path deles

CSS_FINAL = css/style.min.css
STYLUS_FILES = styl/header.styl \
                 styl/body.styl \
                 styl/footer.styl

CSS_MIN = $(STYLUS_FILES:.styl=.min.css) 

all: $(CSS_FINAL)
 
$(CSS_FINAL): $(CSS_MIN)
  cat $^ &amp;gt;$@
  rm -f $(CSS_MIN)

%.min.css: %.styl
  stylus --compress &amp;lt;$&amp;lt; &amp;gt;$@

clean:
  rm -f $(CSS_FINAL)
&lt;/pre&gt;

&lt;h4 id=&#34;existem-alguns-variavéis-do-make-que-devemos-saber&#34;&gt;Existem alguns variavéis do Make que devemos saber:&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$@&lt;/code&gt; &amp;#8211; isso mostra o nome target atual:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;all: blabla
  @echo &#34;Ei&#34;
blabla:
  @echo $@
# Saída será:
# blabla
# Ei
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$&amp;lt;&lt;/code&gt; &amp;#8211; isso mostra o nome da primeira dependência:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;all: blabla vixi
  @echo &#34;A dependencia desse target é&#34; $&amp;lt;
blabla:

vixi:

# Saída será:
# A dependência desse target é blabla
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;[$^]&lt;/code&gt; &amp;#8211; isso mostra a lsita das dependências do target:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;all: blabla vixi
  @echo &#34;As dependências desse target são&#34; $^
blabla:

vixi:

# Saída será:
# As dependências desse target são blabla vixi
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;[$?]&lt;/code&gt; &amp;#8211; Lista de todos arquivos de dependências mais recentes que a regra, a lista de arquivos é separada por espaço:&lt;/p&gt;

&lt;p&gt;Crie 2 ou mais arquivos *.txt na pasta que irá ficar esse teste do makefile e coloquei qualquer texto dentro deles.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;HEAD_CMD=head
FILES=$(shell find . -name &#39;*.o&#39;)

show: $(FILES)
       $(HEAD_CMD) $?

# Saída será:
# head file1.txt file2.txt file3.txt [...]
# ==&amp;gt; file1.txt  file2.txt &amp;lt;==
# [CABECALHO_2]
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;[$*]&lt;/code&gt; &amp;#8211; Nome do arquivo sem a extensão:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;CSS_FINAL = css/style.min.css
STYLUS_FILES = styl/header.styl  \
                 styl/body.styl \
                 styl/footer.styl 
CSS_MIN = $(STYLUS_FILES:.styl=.min.css)

all: $(CSS_FINAL)

$(CSS_FINAL): $(CSS_MIN)

%.min.css: %.styl
@echo &#34;Arquivo -&amp;gt;&#34; $*

# Saída será:
# Arquivo -&amp;gt; styl/header
# Arquivo -&amp;gt; styl/body
# Arquivo -&amp;gt; styl/footer
&lt;/pre&gt;

&lt;p&gt;Muita coisa legal dá pra fazer com o Make.&lt;/p&gt;

&lt;p&gt;Dá para por exemplo você se conectar via ssh ou ftp e fazer o upload ou download de arquivos, rodar um shell script com diversas rotinas, você pode criar todo o setup da sua máquina colocando o make para instalar tudo que vc usa precisa: vim, mongodb, git, nodejs, sublime, brew, ou até mesmo configurar o deploy de sua aplicação, etc etc.&lt;/p&gt;

&lt;p&gt;Isso só foi o ponto de partida, foi o básico do básico do básico e mais um pouco básico do que o make faz.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vocês trocariam seu Gruntfile (ou semelhantes) por um Makefile?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(E por favor, não estou dizendo que as outras ferramentas são ruins, ou que você não deve usá-las. Quero apenas chamar a atenção para as ferramentas que já estão aqui há muito mais tempo e não conhecemos tão bem quanto pensamos.)&lt;/p&gt;

&lt;p&gt;Referência suprema: &lt;a href=&#34;http://www.gnu.org/software/make/manual/make.html&#34; target=&#34;_blank&#34;&gt;Manual Make&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>