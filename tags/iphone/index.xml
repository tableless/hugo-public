<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iphone on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/iphone/index.xml</link>
    <description>Recent content in Iphone on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/iphone/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introdução ao Ionic Framework</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-ionic-framework/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-ionic-framework/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-o-ionic&#34;&gt;O que é o Ionic?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ionicframework.com/&#34;&gt;Ionic&lt;/a&gt; é um framework criado no final de 2013 que visa a criação de aplicações híbridas para dispositivos móveis. Hoje o Ionic encontra-se na versão 1.0.0-beta.14 que segundo a equipe por trás do desenvolvimento, será o último release beta.&lt;/p&gt;

&lt;p&gt;Ele nada mais é do que uma pilha de componentes e outros frameworks. Estes componentes são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cordova.apache.org/&#34;&gt;Cordova&lt;/a&gt;: Integração com recursos nativos dos dispositivos&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;: Criação da parte Web da App&lt;/li&gt;
&lt;li&gt;Ionic Module e o Ionic CLI: Ferramentas e Componentes disponibilizados pelo framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pré-requisitos&#34;&gt;Pré-requisitos&lt;/h2&gt;

&lt;p&gt;Para utilizar o Ionic e desenvolvedor aplicações móveis com o Cordova é necessário ter instalado as seguintes dependências:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vou pular a parte em que diz como instalar o NodeJS e o NPM pois são coisas simples de se encontrar na internet.&lt;/p&gt;

&lt;h2 id=&#34;objetivo-do-artigo&#34;&gt;Objetivo do artigo&lt;/h2&gt;

&lt;p&gt;O objetivo deste artigo é dar uma breve introdução do que é o Ionic e o que ele usa como tecnologias.&lt;/p&gt;

&lt;h2 id=&#34;como-começar&#34;&gt;Como começar&lt;/h2&gt;

&lt;p&gt;Uma vez com NodeJS e o NPM instalados, é necessário instalar 2 módulos globais.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;npm install -g ionic cordova&lt;/pre&gt;

&lt;p&gt;Uma vez com esses dois módulos instalados, usaremos o gerador do Ionic CLI para criar um novo projeto.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic start appName tabs&lt;/pre&gt;

&lt;p&gt;A sintaxe para a criação de uma nova aplicação é &lt;em&gt;ionic start NOME_DO_APP TIPO_DO_GENERATOR&lt;/em&gt;. Existem hoje 3 tipos de projeto base que são &lt;em&gt;tabs&lt;/em&gt;, &lt;em&gt;blank&lt;/em&gt; e &lt;em&gt;sidemenu&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Cada gerador irá iniciar seu projeto de uma forma diferente porém todos seguem a mesma estrutura de pastas exibida abaixo.&lt;/p&gt;

&lt;p&gt;[## O que é o Ionic?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ionicframework.com/&#34;&gt;Ionic&lt;/a&gt; é um framework criado no final de 2013 que visa a criação de aplicações híbridas para dispositivos móveis. Hoje o Ionic encontra-se na versão 1.0.0-beta.14 que segundo a equipe por trás do desenvolvimento, será o último release beta.&lt;/p&gt;

&lt;p&gt;Ele nada mais é do que uma pilha de componentes e outros frameworks. Estes componentes são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cordova.apache.org/&#34;&gt;Cordova&lt;/a&gt;: Integração com recursos nativos dos dispositivos&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;: Criação da parte Web da App&lt;/li&gt;
&lt;li&gt;Ionic Module e o Ionic CLI: Ferramentas e Componentes disponibilizados pelo framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pré-requisitos-1&#34;&gt;Pré-requisitos&lt;/h2&gt;

&lt;p&gt;Para utilizar o Ionic e desenvolvedor aplicações móveis com o Cordova é necessário ter instalado as seguintes dependências:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vou pular a parte em que diz como instalar o NodeJS e o NPM pois são coisas simples de se encontrar na internet.&lt;/p&gt;

&lt;h2 id=&#34;objetivo-do-artigo-1&#34;&gt;Objetivo do artigo&lt;/h2&gt;

&lt;p&gt;O objetivo deste artigo é dar uma breve introdução do que é o Ionic e o que ele usa como tecnologias.&lt;/p&gt;

&lt;h2 id=&#34;como-começar-1&#34;&gt;Como começar&lt;/h2&gt;

&lt;p&gt;Uma vez com NodeJS e o NPM instalados, é necessário instalar 2 módulos globais.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;npm install -g ionic cordova&lt;/pre&gt;

&lt;p&gt;Uma vez com esses dois módulos instalados, usaremos o gerador do Ionic CLI para criar um novo projeto.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;ionic start appName tabs&lt;/pre&gt;

&lt;p&gt;A sintaxe para a criação de uma nova aplicação é &lt;em&gt;ionic start NOME_DO_APP TIPO_DO_GENERATOR&lt;/em&gt;. Existem hoje 3 tipos de projeto base que são &lt;em&gt;tabs&lt;/em&gt;, &lt;em&gt;blank&lt;/em&gt; e &lt;em&gt;sidemenu&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Cada gerador irá iniciar seu projeto de uma forma diferente porém todos seguem a mesma estrutura de pastas exibida abaixo.&lt;/p&gt;

&lt;p&gt;]&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/02/Screen-Shot-2015-02-18-at-5.33.43-PM.png&#34;&gt;4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uma vez com o projeto criado, podemos roda-lo com o comando &lt;em&gt;ionic serve&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Como podemos ver pela imagem, o ionic utiliza o Gulp como ferramenta de automatização de tarefas mas não se preocupe que ele tem objetivos muito simples como compilar o SCSS, CoffeeScript e rodar um servidor para visualização do projeto. &lt;strong&gt;O uso do SCSS e do CoffeeScript é opcional.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O desenvolvimento da aplicação a partir daí é bastante &lt;em&gt;straightforward&lt;/em&gt;. Em nada difere de desenvolver um sistema Web tradicional.&lt;/p&gt;

&lt;h2 id=&#34;e-se-eu-quiser-utilizar-recursos-nativos-do-dispositivo&#34;&gt;E se eu quiser utilizar recursos nativos do dispositivo?&lt;/h2&gt;

&lt;p&gt;Caso seja necessário utilizar recursos nativos do celular como Câmera, Push Notification, Leitor de Código de Barra entre outros, você pode utilizar todos os recursos do Cordova que estão disponíveis e além disso utilizar um outro módulo do AngularJS que a equipe do Ionic criou para facilitar o uso de plugins que é o &lt;a href=&#34;http://ngcordova.com/&#34;&gt;ngCordova&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;A grande vantagem do Ionic é que seu desenvolvimento foi pensado em utilizar os recursos mais novos do CSS, HTML e JavaScript com o objetivo de prover para o desenvolvedor uma gama de componentes pré-prontos de alta qualidade e desempenho.&lt;/p&gt;

&lt;p&gt;A equipe por trás da ferramenta está trabalhando a todo vapor lançando correções e melhorias continuamente e ouvindo bastante os desenvolvedor que a estão utilizando.&lt;/p&gt;

&lt;p&gt;É também um ótimo projeto para contribuir pois o desenvolvimento é bastante simples e a comunidade é bastante receptiva.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Porque é a web que comanda</title>
      <link>https://tableless.github.io/hugo-public/porque-e-a-web-que-comanda/</link>
      <pubDate>Wed, 27 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/porque-e-a-web-que-comanda/</guid>
      <description>&lt;p&gt;A AppStore fez sucesso. Bastante. Por vários motivos: um deles foi por conta da remuneração do desenvolvedor. Teve gente que ganhou milhares de dólares sozinho vendendo aplicações por 99 centavos. Obviamente isso chamou a atenção de muita gente, que começou a fazer aplicações enlouquecidamente para ganhar alguns trocados. Consequentemente um grande números de aplicações que não precisam ser instaláveis no aparelho, apareceram. Vários desenvolvedores não perceberam que dependendo do seu sistema, ele não precisa ser desenvolvido exclusivamente para ser instalado na plataforma do iPhone.&lt;/p&gt;

&lt;p&gt;Hoje, aparelhos como o iPhone, que tem um browser com um bom suporte a HTML 5 e CSS 3, possibilitam criar sistemas e aplicativos baseados em web, com características, designs e comportamentos idênticos aos de aplicações instaláveis nos aparelhos. E o melhor, podem ser utilizados de qualquer lugar, pela web. Outro ponto negativo é que desenvolver para iPhone/iPod Touch é um bocado burocrático. Você precisa ter o SDK que só funciona no OS X, e você precisa aprender Objective C para programar os Apps para Apple. Em contrapartida, para fazer um App baseado em Web, onde seus clientes acessarão o sistema diretamente pelo browser do aparelho, é preciso saber Javascript, HTML 5 e CSS 3. Se você já é desenvolvedor Web, você já sabe desenvolver para iPhone, iPod Touch, Android e qualquer outro dispositivo similar.&lt;/p&gt;

&lt;p&gt;Se você gosta dos efeitos de transição dos aparelhos, você pode fazê-los sem problemas utilizando JQuery ou CSS 3. Há até um &lt;a href=&#34;http://www.jqtouch.com/&#34;&gt;plugin de JQuery chamado JQTouch&lt;/a&gt;, que permite fazer efeitos idênticos ao do iPhone. Esse plugin foi pensado exatamente para funcionar em Mobile Safari e outros aparelhos com browsers avançados, como no Android.&lt;/p&gt;

&lt;p&gt;Um caso sobre o que estamos falando é a aplicação do Itaú. Se você tem um iPhone, baixe o aplicativo pela AppStore. Ao abrir o aplicativo, perceba que o sistema não faz nada além de mostrar o site do Itaú. É muito mais interessante e barato ensinar o usuário a visitar o site em vez de procurar um aplicativo e instalar. Não é necessário nem divulgar um endereço mobile do site &amp;#8211; esse aliás é outra discussão.&lt;/p&gt;

&lt;p&gt;Obviamente, há exceções. A maioria dos jogos, se não todos, e alguns sistemas disponíveis funcionam melhor (ainda) se forem instalados no aparelho. Mas a grande maioria dos sistemas, principalmente aqueles que o usuário simplesmente insere ou verifca informações e dados, podem ser servidos diretamente pela web.&lt;/p&gt;

&lt;p&gt;No caso do iPhone, os sistemas que utilizam recursos do aparelho, como por exemplo fazer o aparelho vibrar, bluetooth, bateria, GPS e etc, precisam ser instalados. Isso não se aplica a alguns mobiles da Nokia que são baseados na plataforma WRT.&lt;/p&gt;

&lt;p&gt;A plataforma WRT permite que você desenvolva aplicativos utilizando Javascript, HTML e CSS. E por meio de Javascript, você pode ativar os recursos que ter utilizar no aparelho. Nesse caso, há uma vantagem em cima do iPhone: você não precisa aprender Objective C. Basta saber Javascript, CSS e HTML.&lt;/p&gt;

&lt;p&gt;O cenário de hoje é interessante. Tudo o que o desenvolvedor sempre sonhou em utilizar de HTML 5 e CSS 3 pode ser aplicado no desenvolvimento para web mobile. Os browsers estão mais espertos e a cada dia trazem novidades interessantes para melhorar o desenvolvimento dos padrões e da web. Realmente, daqui pra frente, é um novo mundo que se forma. Um mundo tão ou mais complexo que o desenvolvimento web para desktops como conhecemos hoje. Pra mim, é mais apaixonante.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.apple.com/iphone/library/documentation/UserExperience/Conceptual/MobileHIG/Introduction/Introduction.html&#34;&gt;Guidelines de User Experience&lt;/a&gt; da Apple.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forum.nokia.com/Technology_Topics/Web_Technologies/Web_Runtime/&#34;&gt;Forum Nokia &amp;#8211; Web Runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Versionamento inteligente para mobiles</title>
      <link>https://tableless.github.io/hugo-public/versionamento-inteligente-para-mobiles/</link>
      <pubDate>Wed, 20 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/versionamento-inteligente-para-mobiles/</guid>
      <description>&lt;p&gt;O iPhone fez a festa dele. Todo mundo gostou do que viu e usou. Acontece que não só de iPhone vive o homem, e há pessoas por aí que não gostam do aparelho por motivos diversos. Há mercado para todos e por isso é natural que apareçam outros aparelhos com novos sistemas. Acontece que o lançamento do iPhone criou uma moda de &lt;a href=&#34;http://tableless.com.br/porque-so-para-o-iphone&#34;&gt;criar versões dos sites específicas para ele&lt;/a&gt;. No começo isso foi ótimo. Mas agora, isso priva diversos celulares similares ao iPhone de terem uma boa experiência de navegação. É o caso de usuários de Android.&lt;/p&gt;

&lt;p&gt;O Android é o novo sistema operacional para mobiles do Google. Até para um AppleBoy, como eu, o sistema é interessante. Tem a interface bem acabada, app&amp;#8217;s amigáveis e etc. Ele faz muito bem o papel dele. O Engine de renderização do browser dele é WebKit. O mesmo engine que o Safari Mobile utiliza. E não estou falando de versões antigas do Webkit como alguns outros celulares utilizam. O Android utiliza as versões mais atuais do Webkit, com suporte extenso a CSS e HTML. Portanto, um site que teoricamente foi feito apenas para iPhone, pode ser visualizado da mesma maneira pelos usuários de Android.&lt;/p&gt;

&lt;p&gt;Aí entra outra questão: provavelmente você deve ter pensado que seria apenas fazer um script de detecção de browser, capturando as visitas de Safari Mobile e Android e pronto. É aí que você se engana. Já há vários outros aparelhos que estão utilizando engines parecidas e que podem renderizar sua &amp;#8220;versão de iphone&amp;#8221;. Exatamente por isso, que você precisa fazer um filtro por características e não por browser. Fazemos isso utilizando &lt;a href=&#34;http://tableless.com.br/introducao-sobre-media-queries&#34;&gt;Media Queries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As Media Queries permitem fazer um pequeno filtro, onde definimos as características do dispositivo que acessará a página. Com isso, podemos definir um CSS específico para aquele grupo de dispositivos que se encaixaram no seu filtro. Veja um exemplo abaixo:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;style.css&#34; type=&#34;text/css&#34; media=&#34;screen and (min-width:481px)&#34; /&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;mob.css&#34; type=&#34;text/css&#34; media=&#34;screen and (max-width:480px)&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;A media que fiz é muito simples de ser entendida. A primeira linha engloba dispositivos que tem tela colorida, com uma resolução de largura mínima de 481px, isso inclui seu monitor, notebook e etc. A outra linha engloba dispositivos com uma largura máxima de 480px, ou seja, iPhones, Androids e dispositivos que seguem esse mesmo esquema de resolução e etc.&lt;/p&gt;

&lt;p&gt;Dessa forma, você filtra os dispositivos e não os browsers dos aparelhos. Isso previne que algum celular, tão bom quanto o iPhone e o Android fiquem de fora de ter uma boa experiência de uso. Quer fazer um teste interessante? Se você estiver utilizando um browser que aceita media queries, redimensione a janela para uma largura menor que 480px. Você verá o Tableless chaveando os estilos automaticamente. Perceba que alguns elementos são reformatados e outros retirados do layout.&lt;/p&gt;

&lt;p&gt;O filtro ainda não está completo porque não estamos contemplando os aparelhos que não aceitam meda queries, mas são mobiles. Para isso, usaríamos os &lt;a href=&#34;http://tableless.com.br/o-que-sao-media-types&#34;&gt;Media Types&lt;/a&gt;, com valor de &lt;strong&gt;handheld&lt;/strong&gt;. Embora celulares que aceitem os Media Types não tenham um bom suporte de CSS, podemos fazer pelo menos uma formatação de texto, cor e background. Celulares que utilizam Opera Mini, terão uma ótima experiência.&lt;/p&gt;

&lt;p&gt;É sempre aquela mesma velha idéia: dar a melhor experiência para todos os meios de acesso. Sempre.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução sobre Media Queries</title>
      <link>https://tableless.github.io/hugo-public/introducao-sobre-media-queries/</link>
      <pubDate>Mon, 06 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-sobre-media-queries/</guid>
      <description>

&lt;p&gt;Eu não posso explicar sobre Media Queries sem um pouco do contexto das Media Types, que foram a primeira versão de um esforço para direcionar a formatação CSS para determinados tipos de meios de acesso.&lt;/p&gt;

&lt;p&gt;O HTML foi criado para ser portável, ou seja, ele deve ser lido e interpretado por qualquer tipo de dispositivo. Cada dispositivo exibe HTML de uma determinada maneira. Logo, a forma com que você formata o layout precisa ser diferente para cada dispositivo. Por exemplo, se você visita um site por um desktop, a experiência será totalmente diferente caso você visite o mesmo site por um dispositivo móvel. São dispositivos diferentes, com formas totalmente diferentes de navegação e uso.&lt;/p&gt;

&lt;p&gt;Mas o exemplo acima é muito comum. Existem outras outros cenários que precisamos prever para controlar a formatação do site, como por exemplo, quando o usuário imprimir sua página. Quando alguém imprimi a página de um artigo no site do UOL, Terra ou qualquer site de conteúdo, vários elementos não precisam ser impressos, começando pelo menu, barra lateral, rodapé e etc. O texto poderia ser melhor formatado para que a leitura em papel fosse mais confortável. Essa diferença entre dispositivos é controlada pelas %%media types%%. Veja uma lista do que pode ser controlado abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;all&lt;/strong&gt; este valor é usado para que o código CSS seja aplicado para todos os dispositivos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;braille&lt;/strong&gt; para dispositivos táteis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;embossed&lt;/strong&gt; para dispositivos que imprimem em Braille.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;handheld&lt;/strong&gt; para dispositivos de mão, celulares e outros dispositivos deste perfil. Normalmente com telas pequenas e banda limitada.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;print&lt;/strong&gt; para impressão em papel.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;projection&lt;/strong&gt; para apresentações, como PowerPoint. Este valor foi inventado pelo pessoal da Opera. MUITO útil.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;screen&lt;/strong&gt; para dispositivos com telas coloridas e alta resolução.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;speech&lt;/strong&gt; para sintetizadores de voz. O CSS 2 tem uma especificação de CSS chamada Aural (&lt;a href=&#34;http://www.w3.org/TR/CSS2/aural.html&#34;&gt;http://www.w3.org/TR/CSS2/aural.html&lt;/a&gt;) que podemos “formatar” a voz de leitores de tela e outros sintetizadores.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tty&lt;/strong&gt; para dispositivos que utilizam uma grade fixa para exibição de caracteres, como teletypes, terminais, dispositivos portáteis com display limitado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tv&lt;/strong&gt; para dispositivos como televisores, ou seja, com baixa resolução, com boa quantidade de cores e scroll limitado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A aplicação é muito simples: basta adicionar a linha comum de %%link%% para seu CSS, inserindo um atributo %%media%% e adicionando o valor desejado:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;estilo.css&#34; type=&#34;text/css&#34; media=&#34;handheld&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Note que neste exemplo estou chamando um arquivo CSS, que será destinado para funcionar em dispositivos de media **HANDHELD**: aparelhos móveis, celulares com tela pequena e aparelhos similares (já usou PalmTop?). Logo, esse CSS não será aplicado quando o usuário visitar o site utilizando um desktop. Para tanto, teríamos que utilizar media SCREEN:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;estilo.css&#34; type=&#34;text/css&#34; media=&#34;screen&#34;&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;o-problema&#34;&gt;O problema&lt;/h2&gt;

&lt;p&gt;Você já notou que todo dia surgem novos dispositivos, com diversos tamanhos e hardwares parecidos com os desktops. Qualquer celular meia boca hoje tem a configuração mais parruda que muitos computadores por aí. Principalmente a configuração da tela, onde as fabricantes tem dado mais atenção nos últimos anos. Logo, não tem motivo para prepararmos um layout e um CSS com media type HANDHELD para o iPhone, já que ele não se encaixa nessa categoria. Entretanto, o iPhone também não é nem de longe um desktop. Aí existe o problema: a media type screen se encaixaria para direcionarmos o a formatação para o iPhone e companhia, mas a especificação é clara quando diz que a media type screen é para desktops e computadores. Como fazer agora?&lt;/p&gt;

&lt;h2 id=&#34;a-solução-media-queries&#34;&gt;A solução: Media Queries&lt;/h2&gt;

&lt;p&gt;As Media Queries definem condições para que o CSS seja utilizado em cenários específicos. Se essas condições forem aprovadas, ou seja, se o dispositivo de adequar a todas as condições estabelecidas na sua Media Querie, o CSS será aplicado.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;estilo.css&#34; media=&#34;screen and (max-width: 480px)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Acima especificamos que o arquivo **estilo.css**, será aplicado em dispositivos que se enquadram na condição de **screen** (ou seja, que tem uma tela com alta capacidade de cores) e com uma largura máxima de 480px.&lt;/p&gt;

&lt;p&gt;Há uma lista de características que você pode utilizar aqui para selecionar os dispositivos que você quiser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;width&lt;/li&gt;
&lt;li&gt;height&lt;/li&gt;
&lt;li&gt;device-width&lt;/li&gt;
&lt;li&gt;device-height&lt;/li&gt;
&lt;li&gt;orientation&lt;/li&gt;
&lt;li&gt;aspect-ratio&lt;/li&gt;
&lt;li&gt;device-aspect-ratio&lt;/li&gt;
&lt;li&gt;color&lt;/li&gt;
&lt;li&gt;color-index&lt;/li&gt;
&lt;li&gt;monochrome&lt;/li&gt;
&lt;li&gt;resolution&lt;/li&gt;
&lt;li&gt;scan&lt;/li&gt;
&lt;li&gt;grid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Geralmente usamos as Media Queries dentro código CSS, que é bem mais organizado. Você linka seu CSS normalmente no HEAD do seu documento:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;estilo.css&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;E dentro do código CSS, você vai separar os famosos **breakpoints**, que são as condições da largura das telas do dispositivos, que definem quando cada bloco de CSS será utilizado. Veja o código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;/* Código geral, que será herdado por qualquer dispositivos.
   nesse caso, seria o código usado no desktop, na maioria das   vezes. 
   Se você já conhecer a ideia do Mobile First, esse primeiro código será destinado para mobiles.
*/
a {color: blue;}

/* 
 Pra dispositivos que tem uma largura mínima de 768 pixels. Tablets, por exemplo.
*/
@media screen and (min-width: 768px) {
  a {color: yellow;}
}

/* 
 Com uma largura mínima de 992 pixels. Monitores por exemplo.
*/
@media screen and (min-width: 992px) {
  a {color: green;}
}

/* 
 Dispositivos com largura mínima de 1200 pixels. Por exemplo TVs.
*/
@media screen and (min-width: 1200px) {
  a {color: black;}
}
&lt;/pre&gt;

&lt;p&gt;E assim você vai escrevendo seu CSS e manipulando a formatação do layout de acordo com dispositivo desejado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Porque só para o iPhone?</title>
      <link>https://tableless.github.io/hugo-public/porque-so-para-o-iphone/</link>
      <pubDate>Mon, 17 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/porque-so-para-o-iphone/</guid>
      <description>&lt;p&gt;Engraçado como desde o lançamento do iPhone, muitas empresas e desenvolvedores se mobilizaram para fazer versões de sites e sistemas para iPhone. Me chama a atenção porque antes disso nunca ninguém (ou quase ninguém) se interessava de verdade em fazer uma versão para dispositivos móveis, muito menos uma versão para um dispositivo específico.&lt;/p&gt;

&lt;p&gt;Ok, ok&amp;#8230; Você deve estar falando que o iPhone virou hype, moda e etc. Mas isso não é o bastante. Muitos dispositivos já fizeram barulho antes. Acho que o buraco é mais embaixo.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;suporte-da-apple&#34;&gt;Suporte da Apple&lt;/h3&gt;

&lt;p&gt;A Apple tem uma característica muito interessante: ela cuida do que é dela.&lt;/p&gt;

&lt;p&gt;Melhor: ela não deixa você fazer besteira. Ela te dá informação para que você saiba exatamente como fazer algo para os sistemas e aparelhos dela.&lt;/p&gt;

&lt;p&gt;Quando migrei para o mac, a primeira coisa que percebi foi a beleza do sistema. Os ícones são belos, agradáveis de ver. A área de trabalho do Mac, mesmo com uma infinidade de arquivos, fica bonita. Ao contrário dos ícones do Windows, eles são feios, e os de programas de terceiros, são piores ainda.&lt;/p&gt;

&lt;p&gt;Já os ícones de programas de terceiros da Apple são lindos. Não, não é só porque eles querem um ícone bonitinho, mas é porque a Apple dá suporte aos designers. A Apple publica artigos, guias e manuais sobre como fazer um ícone para o Mac OSX. Isso faz a diferença. Se você quiser fazer um ícone para a Apple, você vai encontrar bastante material para fazer um ícone bonito, padronizado. Claro que um bocado de talento também conta.&lt;/p&gt;

&lt;p&gt;A Apple está fazendo a mesma coisa para o desenvolvimento web. Você tem toda a informação que precisa sobre a plataforma, dispostivo, sistema instalado no aparelho, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;Por exemplo, você tem informações detalhadas sobre o Safari para desktop e para o iPhone. Tem detalhes sobre quanto eles conhecem de CSS e Javascript. Você sabe que o AJAX vai funcionar e que o Flash não. E todas os outros pequenos detalhes importantes para desenvolver um site para Internet Móvel.&lt;/p&gt;

&lt;p&gt;Até hoje o Internet Explorer para o Windows Mobile é um segredo para mim. Eu não sei ao certo o que ele entende de verdade de CSS e quais os seus bugs. Diferente do MobileSafari. A Apple disponibilizou informações essenciais sobre o browser. E ainda mais, ela publicou exemplos, bibliotecas de javascript, exemplos de designs, scripts, css, tudo. E isso é ótimo, porque você não tem que ficar quebrando a cabeça. Não precisa fazer testes e mais testes para descobrir o que o browser aceita ou ignora.&lt;/p&gt;

&lt;h3 id=&#34;o-mobilesafari&#34;&gt;O MobileSafari&lt;/h3&gt;

&lt;p&gt;Já falei sobre o MobileSafari aqui. A Apple fez um grande trabalho com o MobileSafari. Ele é um browser incrível, suporta coisas que nós, desenvolvedores, queremos fazer em sites para desktops, mas não podemos por causa do IE. Borda arredondada? Background em Checkbox? Customização de Selects (combobox)? Tudo isso é possível fazer com o MobileSafari.&lt;/p&gt;

&lt;p&gt;Os browsers para dispositivos móveis são poucos hoje. Se resumem em: Opera, Internet Explorer e MobileSafari. O miniMO da Mozilla está andando devagar. E foi lançado à pouco um browser chamado SkyFire. Parece que esse browser tem futuro, tem um bom suporte a Flash, CSS e etc&amp;#8230; Mas é pesado. Está em fase beta e tem um futuro muito promissor.&lt;/p&gt;

&lt;p&gt;O Opera hoje é um dos browsers mais usados e quem tem WinMo sempre utiliza o Opera Mobile. Fora do iPhone, ele é o melhor browser para o seu dispositivo.&lt;/p&gt;

&lt;p&gt;O interessante de desenvolver para iPhone é que você está desenvolvendo para apenas um dispositivo. Você não precisa se preocupar com uma infinidade de browsers, dispositivos e tudo mais. Você precisa se preocupar em fazer funcionar no MobileSafari. Isso é fantástico. Mesmo assim, você tem que pensar nos outros públicos que utilizam outros sistemas e browsers.&lt;/p&gt;

&lt;p&gt;Um assunto interessante é estudar sobre o motor de renderização do seu browser. Você sabe qual o motor de renderização do IE? E do Opera?&lt;/p&gt;

&lt;p&gt;O motor de renderização do Safari é o WebKit, que é utilizado também em browsers da Nokia e no Konqueror do KDE. Logo, você sabe que esses browsers tem um bom suporte a CSS, JS, Ajax. Mas esse é assunto para outro post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>O Safari para iPhone – Desenvolvimento web para iPhone</title>
      <link>https://tableless.github.io/hugo-public/o-safari-para-iphone/</link>
      <pubDate>Mon, 13 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-safari-para-iphone/</guid>
      <description>&lt;p&gt;Esse texto e muitos outros fazem parte do &lt;a href=&#34;http://visie.com.br/campus/&#34; title=&#34;Vídeos tutoriais sobre Tableless&#34;&gt;Campus Online&lt;/a&gt;. Visite e &lt;a href=&#34;http://visie.com.br/campus/cadastrese&#34;&gt;cadastre-se grátis&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://visie.com.br/campus/iphone&#34; title=&#34;Desenvolvimento web para iPhone&#34;&gt;Sessão exclusiva sobre Desenvolvimento web para iPhone&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;um-pouco-de-história&#34;&gt;Um pouco de História&lt;/h3&gt;

&lt;p&gt;Por volta de 1997, os computadores da Apple traziam por padrão o Netscape. Naquele tempo o mercado de browsers não era tão acirrado como hoje e os concorrentes eram poucos. O Internet Explorer estava em sua versão &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;. Mesmo assim, o Internet Explorer para Mac era também distribuído com o MacOS durante os 5 anos de acordo entre Apple e Microsoft. A Microsoft laçou 3 versões principais do seu navegador para o Mac, parando na versão 5 em março de 2000.&lt;/p&gt;

&lt;p&gt;Em 2003, a Apple anunciou que eles estavam desenvolvendo seu próprio browser baseado no motor de renderização KHTML. A versão 1.0 foi lançado como browser padrão do MacOS por volta de Junho de 2003. O Internet Explorer ainda era distribuido no sistema, mas agora como um navegador alternativo, até Abril de 2005.&lt;/p&gt;

&lt;h3 id=&#34;motor-de-renderização-webkit&#34;&gt;Motor de Renderização WebKit&lt;/h3&gt;

&lt;p&gt;O Safari utiliza um motor de renderização chamado WebKit. O WebKit tem dois motores de renderização: o WebCore, que é o motor de renderização baseado no KTHML do Konqueror. E o JavaScriptCore, baseado no motor de javascript KDE chamado KJS. Esses motores estão sob Licensa GNU.&lt;/p&gt;

&lt;p&gt;A Apple, ao fazer o Safari fez muitas atualizações e modificações no motor KHTML, deixando-o mais maduro e robusto. Essas modificações foram devolvidas para a comunidade e incorporadas no Konqueror.&lt;/p&gt;

&lt;h3 id=&#34;mobilesafari-e-safari-para-desktop&#34;&gt;MobileSafari e Safari para Desktop&lt;/h3&gt;

&lt;p&gt;A idéia é que o usuário tenha uma experiência muito próxima a experiência que ele tem no desktop. Por isso o Safari para iPhone (MobileSafari) foi feito sob o mesmo motor de renderização WebKit do Safari para Windows e Mac. Diferenças: 1) Se o site não foi feito para iPhone, ele renderiza a página da mesma forma como renderiza em um Safari para desktop, mas miniaturizada. 2) A interação do usuário.&lt;/p&gt;

&lt;h3 id=&#34;padrões-suportados&#34;&gt;Padrões Suportados&lt;/h3&gt;

&lt;p&gt;Para que a renderização do MobileSafari seja fiel ao Safari para desktop, ele tem grande suporte aos Padrões Web.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HMTML 4.01&lt;/li&gt;
&lt;li&gt;HTML 5&lt;/li&gt;
&lt;li&gt;XHTML 1.0&lt;/li&gt;
&lt;li&gt;CSS 2.1&lt;/li&gt;
&lt;li&gt;Parte do CSS 3&lt;/li&gt;
&lt;li&gt;Javascript 1.4&lt;/li&gt;
&lt;li&gt;Ajax&lt;/li&gt;
&lt;li&gt;DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;É interessante notar que temos uma certa liberdade de desenvolvimento web no iPhone. Há facilidades como cantos arredondados que não podemos contar no desenvolvimento focado para desktops. Isso tráz vantagens pra você, desenvolvedor, porque facilitará seu trabalho, e para o usuário porque ele terá uma experiência mais rica.&lt;/p&gt;

&lt;h3 id=&#34;limites-dos-recursos&#34;&gt;Limites dos recursos&lt;/h3&gt;

&lt;p&gt;Embora o iPhone suporte as tecnologias mais atuais de desenvolvimento web, não podemos esquecer de que ele é um dispositivo móvel, com capacidade de processamento muito menor que a de um desktop. Por isso, há algumas limitações de recursos que devemos nos atentar.&lt;/p&gt;

&lt;p&gt;Para códigos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;10Mb para arquivos Javascripts e XML&lt;/li&gt;
&lt;li&gt;O tempo de execução de um Javascript é limitado a 10 segundos. Se passar de 10 segundos, o Safari pára a execução em algum lugar aleatório do seu código.&lt;/li&gt;
&lt;li&gt;Javascripts alocados limitados a 10Mb&lt;/li&gt;
&lt;li&gt;Máximo de 8 documentos abertos de uma vez&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para imagens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Limite máximo do tamanho de GIF, PNG e TIFF são 2 Megapixels&lt;/li&gt;
&lt;li&gt;A decodificação máxima dos tamanhos de JPGs são 32 Megapixels. Utilizando SubSampling&lt;/li&gt;
&lt;li&gt;O tamanho máximo de GIFs animados deve ser menor que 2MB. Para arquivos animados maiores, só é mostrado o primeiro frame.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Verifique sempre o tamanho final de sua página. Normalmente o sites com 30Mb para menos funcionam muito bem no iPhone.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Browsers para Mobile – Nova era</title>
      <link>https://tableless.github.io/hugo-public/browsers-para-mobile-nova-era/</link>
      <pubDate>Sun, 29 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/browsers-para-mobile-nova-era/</guid>
      <description>&lt;p&gt;Pense um pouco e tente lembrar de pelo menos uma maneira de acessar a internet que não seja a partir de dispositivos móveis ou computadores (notebooks e desktops). Difícil, não é?&lt;/p&gt;

&lt;p&gt;Hoje, conhecemos bem apenas um meio de acessar a internet que é o computador. Estamos começando agora a navegar decentemente com dispositivos móveis, como um PDAs ou Smartphones. Além do óbvio, não conhecemos os futuros reais problemas de usabilidade e arquitetura de informação dos sites destinados à estes aparelhos. Estamos apenas engatinhando.&lt;/p&gt;

&lt;p&gt;Naveguei um pouco pelo Safari do iPhone, e enquanto me adaptava, me perguntava várias vezes sobre a real &lt;a href=&#34;http://tableless.com.br/quem-precisa-de-versao-mobile&#34;&gt;necessidade de haver uma versão para mobiles&lt;/a&gt;. O &lt;a href=&#34;http://apple.com/iphone/&#34;&gt;iPhone&lt;/a&gt; tem uma maneira diferente de tratar os sites. Ele renderiza como se fosse um browser para desktop: o site aparece em miniatura na tela. Assim você tem uma visão geral do site e com apenas dois toques você aumenta o zoom no local que você gostaria de ler.&lt;/p&gt;

&lt;p&gt;O interessante do iPhone, é que a Apple &lt;a href=&#34;http://developer.apple.com/documentation/AppleApplications/Reference/SafariWebContent/Introduction/chapter_1_section_1.html&#34;&gt;ensina&lt;/a&gt; e mostra exatamente como fazer um site que possa ser bem visto em um iPhone. Nunca vi nenhuma outra fabricante de celular fazer algo parecido. Eles te mostram características e formas de fazer um site bem feito com características úteis para o visitante e usuário de iPhone.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vimeo.com/781678?pg=embed&amp;amp;sec=781678&#34;&gt;iPhone SDK for Web Developers&lt;/a&gt; de &lt;a href=&#34;http://www.vimeo.com/user400411?pg=embed&amp;amp;sec=781678&#34;&gt;iphonedevel&lt;/a&gt; no &lt;a href=&#34;http://vimeo.com?pg=embed&amp;amp;sec=781678&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Juntamente com o iPhone, o &lt;a href=&#34;http://www.operamini.com/&#34;&gt;Opera Mini&lt;/a&gt; 4, também utiliza esse tipo de navegação por miniatura e zoom. Esse método de navegação para celulares com tela pequena se mostrou muito mais confortável que o modo convencional.&lt;/p&gt;

&lt;p&gt;Na minha opinião, essa maneira de renderizar, dispensa a criação de uma outra folha de estilo para mobiles. Como não existe apenas o iPhone no mundo, e nem todo mundo utiliza o &lt;a href=&#34;http://www.operamini.com/&#34;&gt;Opera Mini&lt;/a&gt; para navegar, ainda precisamos criar uma versão mobile do nosso CSS para que os sites sejam acessados decentemente a partir de mobiles com navegação convencional.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vimeo.com/217513?pg=embed&amp;amp;sec=217513&#34;&gt;Opera mini 4 &amp;#8211; iPhone Killer! Part 1&lt;/a&gt; de &lt;a href=&#34;http://www.vimeo.com/kirankonathala?pg=embed&amp;amp;sec=217513&#34;&gt;Kiran Konathala&lt;/a&gt; no &lt;a href=&#34;http://vimeo.com?pg=embed&amp;amp;sec=217513&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://www.w3.org/QA/2008/04/is_your_mobile_browser_ready_f.html&#34;&gt;W3C acabou de lançar um teste&lt;/a&gt; parecido com o Acid para &lt;a href=&#34;http://dev.w3.org/2008/mobile-test/test.html&#34;&gt;testar a compatibilidade dos browsers para mobiles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A guerra dos browsers para mobiles vai ser diferente. O Internet Explorer ainda não prevalece nesta área, e sistemas realmente bons, utilizam o Opera como navegador padrão. Uma boa notícia é que o Internet Explorer para mobiles não é tão terrível quanto o IE para desktops.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://visie.com.br/treinamento/&#34; title=&#34;Treinamento em padrões web e sistemas de e-commerce&#34;&gt;Visie&lt;/a&gt; irá ministrar uma &lt;a href=&#34;http://visie.com.br/treinamento/palestra-internet-movel/&#34;&gt;palestra rápida sobre o Internet Móvel&lt;/a&gt; no dia 07/07 em São Paulo por R$30.&lt;/p&gt;

&lt;p&gt;Enquanto isso, leia algo antes de começar a fazer a versões mobiles por aí:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/sites-para-dispositivos-moveis-breve-introducao&#34;&gt;Sites para dispositivos móveis &amp;#8211; Breve Introdução&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/aprenda/sites-para-dispositivos-moveis-ssr/&#34;&gt;Sites para dispositivos móveis &amp;#8211; SSR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/aprenda/sites-para-dispositivos-moveis-mediatype/&#34;&gt;Sites para dispositivos móveis &amp;#8211; MediaTypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/breve-introducao-xhtml-mobile-profile&#34;&gt;Breve Introdução: XHTML Mobile Profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/browsers_em_dispositivos_moveis&#34;&gt;Browsers para dispositivos móveis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/27-bilhoes-de-celulares&#34;&gt;2.7 Bilhões de Celulares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://visie.com.br/cursos/intermediarios/internetmovel2.php&#34;&gt;Curso de Internet Móvel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.evotech.net/blog/2007/07/web-development-for-the-iphone/&#34;&gt;Web Development for the iphone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Rapidinhas – para começar a pseudo-segunda-feira</title>
      <link>https://tableless.github.io/hugo-public/rapidinhas-para-comecar-a-pseudo-segunda-feira/</link>
      <pubDate>Tue, 10 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/rapidinhas-para-comecar-a-pseudo-segunda-feira/</guid>
      <description>&lt;p&gt;Alguns links rápidos para começar a pseudo-segunda-feira (aqui em SP foi feriado na segunda).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se você usa Mac ou qualquer outro sistema operacional, você sabe que é meio difícil &lt;a href=&#34;http://tableless.com.br/se-virando-pra-testar-parte-2-desktops-virtuais&#34;&gt;testar seus projetos no IE&lt;/a&gt;. Se quiser fazer testes rápidos, sem perder tempo, tente usar o &lt;a href=&#34;http://ipinfo.info/netrenderer/&#34;&gt;Ie NetRenderer&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Em qual versão a tag ABBR foi implementada no HTML? E a BLOCKQUOTE?&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://meiert.com/en/indices/html-elements/&#34;&gt;HTML Elements Index&lt;/a&gt; uma tabela de tags, onde você consegue saber em qual versão do HTML a tag foi implementada e se a tag ainda existe nas versões atuais do HTML/XHTML.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Artigo interessante sobre o design feito pela Apple: &lt;a href=&#34;http://www.technologyreview.com/printer_friendly_article.aspx?id=18621&#34;&gt;The Secret of Apple Design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E para se inspirar algumas imagens do &lt;a href=&#34;http://www.engadget.com/photos/the-definitive-iphone-user-interface-gallery/&#34;&gt;iPhone para vermos como é a interface do usuário&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>