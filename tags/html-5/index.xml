<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html 5 on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/html-5/index.xml</link>
    <description>Recent content in Html 5 on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/html-5/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Entendendo o Outline do HTML</title>
      <link>https://tableless.github.io/hugo-public/entendendo-o-outline-html/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/entendendo-o-outline-html/</guid>
      <description>&lt;p&gt;O Outline do documento HTML é a estrutura do documento que é gerada pelos títulos, títulos de formulários, títulos das tabelas e qualquer outro elemento que marque alguma seção de conteúdo no documento. Essas marcações de Outline podem ser usadas para várias iniciativas, por exemplo, um browser ou alguma outra interface possa criar uma Tabela de Conteúdo. Outras tecnologias assistivas podem usar também estas seções para formar a navegação, como em um leitor de tela, mas ou menos como acontece no WAI-ARIA, mas de maneira mais natural.&lt;/p&gt;

&lt;p&gt;Os elementos de cabeçalho h1-h6, contribuem para o outline do documento HTML 5, criando uma estrutura hierárquica e definindo as seções da página. Os cabeçalhos são importantes para otimização de buscas e também para navegação em leitores de telas, já que usuários desses aparelhos navegam pelos títulos na página.&lt;/p&gt;

&lt;p&gt;Nas versões HTML4 e XHTML tudo o que tinhamos para estruturar o outline eram as tags h1-h6. Tínhamos então o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;

  &amp;lt;h1&amp;gt;Midias reprodutiveis&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;Disco&amp;lt;/h2&amp;gt;
  &amp;lt;h2&amp;gt;Arquivo&amp;lt;/h2&amp;gt;
  &amp;lt;h3&amp;gt;Video: Avi, Divx, Mp4, Xvid&amp;lt;/h3&amp;gt;
  &amp;lt;h2&amp;gt;Disco USB de armazenamento&amp;lt;/h2&amp;gt;

&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;E sua saída era:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
  1. Disco
  2. Arquivo
    1. Video: AVI, DIVx, MP4, Xvid
  3. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Browsers comuns não mostram o outline do documento portanto para visualiza-los é necessário usar uma ferramenta chamada HTML5 outliner(&lt;a href=&#34;http://gsnedders.html5.org/outliner/&#34; title=&#34;Link do Html 5 Outliner&#34;&gt;https://gsnedders.html5.org/outliner/&lt;/a&gt;). Mesmo que o nível dos cabeçalhos dos exemplos sejam diferentes, a saída como vimos é a mesma.&lt;/p&gt;

&lt;p&gt;Pois bem, agora com o HTML5 temos novas formas de estruturar o documento. Temos os elementos de sectioning content — article, aside, nav e sections — que demarcam diferentes seções num documento e define o escopo para os elementos de cabeçalho (assim como o header e o footer).&lt;/p&gt;

&lt;p&gt;Isso mudou o paradigma e agora podemos ter diversos elementos seccionados com sua própria hierarquia de h1-h6. Isso tem efeito no outline. Num documento onde temos:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;

   &amp;lt;h1&amp;gt;Midias reprodutiveis&amp;lt;/h1&amp;gt;

   &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Disco&amp;lt;/h1&amp;gt;
   &amp;lt;/section&amp;gt;

   &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Arquivo&amp;lt;/h1&amp;gt;
      &amp;lt;section&amp;gt;&amp;lt;!-- essa é uma section de outra --&amp;gt;
      &amp;lt;h1&amp;gt;Video: Avi, Divx, Mp4, Xvid&amp;lt;/h1&amp;gt;
      &amp;lt;/section&amp;gt;
   &amp;lt;/section&amp;gt;

   &amp;lt;section&amp;gt;
      &amp;lt;h1&amp;gt;Disco USB de armazenamento&amp;lt;/h1&amp;gt;
   &amp;lt;/section&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Temos esse outline:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
  1. Disco
  2. Arquivo
    1. Video: AVI, DIVx, MP4, Xvid
  3. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Como pode ser observado cada section tem o seu h1, mas o outline não sofre alteração.&lt;/p&gt;

&lt;p&gt;Mas e se o segundo exemplo não tivesse as sections? Então teriamos um resultado distinto:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
 2. Disco
 3. Arquivo
 4. Video: AVI, DIVx, MP4, Xvid
 5. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Dentre o primeiro e o segundo exemplo, claro que o segundo é mais válido por sua importância semântica.&lt;/p&gt;

&lt;p&gt;Mas todas as sections tem as tags h1. Isso pode ser perigoso. Os leitores de tela não são atualizados no mesmo passo um do outro (assim como os browsers comuns). Sendo assim esse tipo de marcação pode impactar severamente, comprometendo a acessibilidade. Poderíamos usar o segundo exemplo e em alguns leitores de tela o resultado da saída ser o da ultima abordagem:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
 2. Disco
 3. Arquivo
 4. Video: AVI, DIVx, MP4, Xvid
 5. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Isso ocorre por quê esses leitores não distinguem a marcação dentro das tags section. Sendo assim o ideal seria usar as tags sections proporcionando uma melhor marcação, mas uma hierarquia de cabeçalhos semelhante a do HTML4.&lt;/p&gt;

&lt;p&gt;Então fazemos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;

   &amp;lt;h1&amp;gt;Midias reprodutiveis&amp;lt;/h1&amp;gt;

   &amp;lt;section&amp;gt;  
     &amp;lt;h2&amp;gt;Disco&amp;lt;/h2&amp;gt; 
   &amp;lt;/section&amp;gt; 

   &amp;lt;section&amp;gt; 
     &amp;lt;h2&amp;gt;Arquivo&amp;lt;/h2&amp;gt; 
     &amp;lt;section&amp;gt;&amp;lt;!-- essa é uma section de outra --&amp;gt; 
       &amp;lt;h3&amp;gt;Video: Avi, Divx, Mp4, Xvid&amp;lt;/h3&amp;gt; 
     &amp;lt;/section&amp;gt; 
   &amp;lt;/section&amp;gt; 

   &amp;lt;section&amp;gt; 
     &amp;lt;h2&amp;gt;Disco USB de armazenamento &amp;lt;/h2&amp;gt; 
   &amp;lt;/section&amp;gt; 

&amp;lt;body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;e a saída nos leitores de tela; atualizados ou não; será a mesma:&lt;/p&gt;

&lt;pre class=&#34;lang-text&#34;&gt;1. Midias reprodutiveis
  1. Disco
  2. Arquivo
    1. Video: AVI, DIVx, MP4, Xvid
  3. Disco USB de armazenamento
&lt;/pre&gt;

&lt;p&gt;Assim preservamos a acessibilidade em leitores de tela atualizados ou não, privilegiando todos os usuários.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://http://www.brucelawson.co.uk/2009/headings-in-html-5-and-accessibility/&#34; title=&#34;Link para Bruce Lawson - Headings in HTML 5 and accessibility&#34;&gt;Bruce Lawson &amp;#8211; Headings in HTML 5 and accessibility&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prepare-se para a Revolução</title>
      <link>https://tableless.github.io/hugo-public/se-prepare-para-a-revolucao/</link>
      <pubDate>Wed, 02 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/se-prepare-para-a-revolucao/</guid>
      <description>&lt;p&gt;O W3C mudou. O W3C foi criado exatamente para homologar, regularizar e criar novos padrões de publicação de informação na internet. O trabalho do W3C é exatamente criar caminhos para que os desenvolvedores e os fabricantes de browsers possam trilhar no futuro. Acontece que o W3C ficou tão grande, tão lerdo, tão aficcionado pelos problemas do futuro que acabou se perdendo nos seus próprios sonhos.&lt;/p&gt;

&lt;p&gt;Um dos objetivos do W3C &amp;#8211; se não o maior objetivo &amp;#8211; é organizar toda a informação da internet. Para fazer isso, precisamos identificar toda essa informação de forma que a extração não seja complexa, pelo contrário, de maneira que a toda a informação que precisarmos possa ser extraída rapidamente, fácil e de qualquer tipo de dispositivo ou aplicação. Por isso, o W3C perdeu muito tempo criando padrões como RDF, por exemplo. Não desmerecendo essas tecnologias, que aliás são bem úteis para nos hoje. Mas cá entre nós, fazer bordas arredondadas para mim, hoje, é mais importante do que algumas necessidades de semântica.&lt;/p&gt;

&lt;p&gt;Alguns dos desenvolvedores, a grande maioria gringos, também tinham essa visão. A necessidade de grande parte dos desenvolvedores eram ter coisas simples como suporte a PNG, bordas arredondadas, resize de imagem no background, colocar várias imagens de backgrounds em um elemento, css animation, e assim por diante. Por isso, muitos desenvolvedores começaram reinvidicar uma alteração de prioridades. O HTML 5 surgiu daí. Muitos se enganam se acham que o HTML 5 foi idéia original do W3C. Ele surgiu de um grupo de inconformados de o HTML não ter a pelo menos 10 anos, uma nova atualização. Então começaram a estudar e a escrever um novo padrão para a linguagem. Isso surgiu de uma união de desenvolvedores da Apple (Safari/Webkit), Mozilla e Opera. Muitos se enganam também, se acham que só o W3C pode criar padrões. Você pode criar um. Se vai haver suporte da comunidade, do W3C e dos fabricantes de browsers, é outra história. Mas você tem todo o direito de criar.&lt;/p&gt;

&lt;p&gt;O grupo do HTML 5, queria mudar. Eles estavam cansados de usar uma tecnologia antiga e começaram a fazer o trabalho que se esperava que o W3C fizesse. Por fim, essa iniciativa ganhou tanta popularidade e ajuda de outros desenvolvedores, que o W3C resolveu abraçar a idéia e hoje ele cuida desse padrão.&lt;/p&gt;

&lt;p&gt;O CSS3 também começou a aparecer por que o W3C abriu os olhos e resolveu começar a revolucionar a linguagem.&lt;/p&gt;

&lt;p&gt;O W3C mudou. Os times que cuidam dessas linguagens foram divididas. Modularizadas. Deixe-me explicar. O CSS3 não será mais lançado de uma vez, &lt;a href=&#34;http://www.w3.org/TR/css3-roadmap/#whymods&#34;&gt;mas em módulos&lt;/a&gt;. Há um time que cuidará da propriedade background. Outra que cuida da propriedade position, outra que cuida da propriedade border, e assim por diante. Isso possibilita que cada módulo, cada propriedade, cada parte do CSS seja lançado independentemente, acelerando o processo de suporte dos browsers e utilização pelos desenvolvedores. Logo, não há mais aquela história de “Browser tal não suporte CSS3”. Mentira, ele suporta, mas algumas das funcionalidades. A mesma coisa acontece com o HTML5. Dizem que o IE8 não suporta HTML 5, mas é mentira. Ele suporta partes do HTML 5. Já há vários módulos implementados no IE8, que fazem parte da especificação do HTML 5. Isso também acontece com os outros browsers.&lt;/p&gt;

&lt;p&gt;A web vai ficar mais dinâmica agora. O CSS 3 e o HTML 5 vieram para separar o joio do trigo. Os designers não vão mais ficar pintando quadradinhos como antes. O CSS está virando uma linguagem visual de verdade. Há, por exemplo, working drafts de suporte a variáveis no CSS. E isto é só o começo.&lt;/p&gt;

&lt;p&gt;A mesma coisa para o HTML 5. A mudança das tags estruturais do HTML é apenas a ponta das novas possibilidades. Para o pessoal que achava que o HTML é coisa de criança, se prepare, porque o buraco, agora, é mais embaixo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aonde nos leva a morte do Internet Explorer 6?</title>
      <link>https://tableless.github.io/hugo-public/aonde-nos-leva-a-morte-do-internet-explorer-6/</link>
      <pubDate>Fri, 17 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/aonde-nos-leva-a-morte-do-internet-explorer-6/</guid>
      <description>&lt;p&gt;Semana passada foi o Digg, essa semana o YouTube. E a comunidade de desenvolvedores os segue fazendo barulho, anunciando que vai fazer o mesmo. Nós estamos fazendo nossa parte na Visie, eliminando a preocupação com o IE6 de nossos sites e convencendo nossos clientes a fazê-lo também. Já vai tarde.&lt;/p&gt;

&lt;p&gt;Mas não é tempo de comemorar, ainda há muito trabalho a fazer. Há oito anos o Zeldman publicou seu célebre artigo &lt;a href=&#34;http://www.alistapart.com/articles/tohell/&#34;&gt;To Hell With Bad Browsers&lt;/a&gt;, em que nos explicava porque devíamos abandonar o suporte aos navegadores 4.0. O ponto básico era não ter que fazer várias versões do mesmo site. Uma versão apenas, com bom layout CSS, podia funcionar para todo mundo, com todas as vantagens dos padrões web, mas não nos navegadores 4.0.&lt;/p&gt;

&lt;p&gt;Bom, fazem oito anos. OITO LONGOS ANOS! Há oito anos que podemos escrever uma versão só de cada site, desde que saibamos escrever hacks de CSS e ajustes de float para o Internet Explorer 6. Há oito anos que estamos repetindo o fato de que o Internet Explorer 6 é a pedra que restou em nosso sapato. Há oito anos que sonhamos em não ter que escrever hacks.&lt;/p&gt;

&lt;p&gt;A morte do Internet Explorer 6 significa apenas isso: poder usar PNG transparente e não ter que escrever hacks (ou não ter que escrever &lt;strong&gt;tantos&lt;/strong&gt; hacks.)&lt;/p&gt;

&lt;p&gt;A Microsoft passou oito anos sem atualizar seu navegador para nos dar exatamente o que? PNG transparente? Nesse período, Firefox, Opera, Safari e Konqueror estão trabalhando em coisas como controle de opacidade, &lt;a href=&#34;http://tableless.com.br/introducao-ao-css-animation&#34;&gt;CSS transform&lt;/a&gt;, bordas com imagem, sombras, &lt;a href=&#34;http://tableless.com.br/introducao-sobre-media-queries&#34;&gt;media queries&lt;/a&gt;, &lt;a href=&#34;http://tableless.com.br/css3-columns&#34;&gt;colunas&lt;/a&gt; e os maravilhosos novos &lt;a href=&#34;http://tableless.com.br/nth-child&#34;&gt;seletores do CSS3&lt;/a&gt;. Coisas maravilhosas que você já pode usar, mas a maioria de seus usuários não vai ver porque usa Internet Explorer.&lt;/p&gt;

&lt;p&gt;A morte do Internet Explorer 6 nos leva apenas ao lugar onde deveríamos ter chegado há oito anos: sites sem hacks. A Microsoft ainda está algumas gerações atrasadas e, se queremos usar CSS 3 e HTML 5 um dia, é bom parar de comemorar e voltar ao trabalho. Há um mundo para mudar.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>