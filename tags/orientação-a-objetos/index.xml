<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Orientação A Objetos on Tableless</title>
    <link>http://tableless.com.br/tags/orienta%C3%A7%C3%A3o-a-objetos/index.xml</link>
    <description>Recent content in Orientação A Objetos on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/orienta%C3%A7%C3%A3o-a-objetos/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Diga olá ao TypeScript e adeus ao JavaScript</title>
      <link>http://tableless.com.br/diga-ola-ao-typescript-e-adeus-ao-javascript/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/diga-ola-ao-typescript-e-adeus-ao-javascript/</guid>
      <description>

&lt;p&gt;Acredito que este artigo tenha chamado a sua atenção pelo título. Como assim??? adeus ao JavaScript??? A linguagem que está bombando em 2015 (e claro, 2016!). Posso estar sendo um pouco ousado aqui, mas eu tenho em mente que, neste momento, o JavaScript para mim é agora &amp;#8220;linguagem de máquina&amp;#8221; ou o famoso bytecode. Porquê? Bom, você conhece um código javascript minificado+comprimido+&amp;#8221;esculachado&amp;#8221;&amp;#8230; Não estou retirando aqui toda a beleza do JavaScript, e consequente importância, mas na evolução que vem acontecendo a cada dia no mundo web, felizmente chegamos ao ponto que podemos tratar o javascript como uma linguagem tipada e semelhante ao c/java/php e derivados.&lt;/p&gt;

&lt;p&gt;Neste ponto entra uma questão pessoal. Ou você vai adorar TypeScript ou vai achar completamente inútil, já que a sua principal característica é trazer uma &amp;#8220;tipagem&amp;#8221; a linguagem, e no pacote uma forma de programar em javascript mais parecida com Java e suas vertentes. Se você gosta de tipar suas váriaveis e métodos, criar classes, interfaces, usar Orientação a Objetos, o TypeScript foi feito para você e, claro, pode dizer adeus ao JavaScript.&lt;/p&gt;

&lt;p&gt;Lembre-se que TypeScript está sendo usada extensivamente no novo framework Angular2, então se vc ainda não sabe o que é TypeScript, chegou o momento de conhecer.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-typescript&#34;&gt;O que é TypeScript?&lt;/h2&gt;

&lt;p&gt;O TypeScript possibilita que você escreva código JavaScript na forma que foi acostumado quando aprendeu Orientação a Objetos. Você lembra dessas aulas, em criar métodos que retornassem um valor com tipo definido, em criar classes e mais classes para o seu programa, em criar interfaces para desacoplar tudo que quisesse, entre diversas outras técnicas. Com TypeScript tudo isso é possível, porque no final ele pega o seu lindo código cheio de classes e transforma em JavaScript puro, no qual o browser vai compreender. No próprio site é definido que o TypeScript compila para JavaScript, o que é um termo tecnicamente errado &amp;#8211; mas cada vez mais aceito, dado que aquele código &amp;#8220;malucão&amp;#8221; em JavaScript pode ser encarado como código de máquina.&lt;/p&gt;

&lt;p&gt;No exemplo a seguir, criamos uma interface e uma classe, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface IComponent{
    getId() : string;
}

class Button implements IComponent{
    id:string;
    getId():string{
        return this.id;
    }
}&lt;/pre&gt;

&lt;p&gt;Este é um código 100% TypeScript que você pode criar em um editor de textos ou ide, no qual criamos uma interface chamada &lt;code&gt;IComponent&lt;/code&gt;e uma classe que chamamos de &lt;code&gt;Button&lt;/code&gt;. Esta classe implementa a interface e por isso o método &lt;code&gt;getId()&lt;/code&gt; deve ser criado. Se você salvar este arquivo como um arquivo javascript e adicionar em um documento HTML, nenhum &lt;strong&gt;browser&lt;/strong&gt; vai entender isso, quem sabe num futuro distante. Mas isso nao é um problema, pois o TypeScript possui um &amp;#8220;compilador&amp;#8221; que irá pegar o seu código e transformar em algo do tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Button = (function () {
    function Button() {
    }
    Button.prototype.getId = function () {
        return this.id;
    };
    return Button;
})();&lt;/pre&gt;

&lt;p&gt;Este código feioso aí em cima é 100% javascript compreensível em qualquer navegador web. Tem gente que prefere escrever assim, vai entender né. Mas como essa mágica funciona? Vamos explicar a seguir.&lt;/p&gt;

&lt;h2 id=&#34;testando-o-typescript&#34;&gt;Testando o TypeScript&lt;/h2&gt;

&lt;p&gt;Abra uma nova aba no seu browser e acesse: &lt;a href=&#34;http://www.typescriptlang.org/Playground&#34;&gt;http://www.typescriptlang.org/Playground&lt;/a&gt;. O Playground é um pequeno editor TypeScript que, além de checar possíveis erros de sintaxe, também compila automaticamente o código para Javascript, no qual você pode testá-lo. Não omita o Playground no seu aprendizado, ele pode te ajudar muito, como na figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts01.png&#34; alt=&#34;ts01&#34; width=&#34;856&#34; height=&#34;277&#34; class=&#34;alignleft size-full wp-image-52433&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso não queira utilizar o Playground, pode-se instalar o TypeScript no seu ambiente de desenvolvimento através do node. O comando a seguir deve ser compreensível para você:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ npm install typescript -g&lt;/pre&gt;

&lt;p&gt;Após instalar o TypeScript no ambiente, você pode usar o comando &lt;code&gt;tsc&lt;/code&gt; para compilar um arquivo que geralmente está na extensão &lt;code&gt;ts&lt;/code&gt; para &lt;code&gt;js&lt;/code&gt;. Por exemplo, crie o arquivo &lt;code&gt;script.ts&lt;/code&gt; com o código TypeScript descrito anteriormente e execute o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;tsc --out script.js script.ts&lt;/pre&gt;

&lt;p&gt;Editores de texto como o Sublime Text, Atom, VS Code, também tem a capacidade de compilar o arquivo em JavaScript, bastando apenas adicionar plugins relativos ao TypeScript. O &lt;code&gt;VS Code&lt;/code&gt;, em particular, apresentou um bom comportamento frente aos outros, como pode-se perceber na imagem a seguir.&lt;/p&gt;

&lt;div id=&#34;attachment_52436&#34; style=&#34;width: 549px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts02.png&#34; alt=&#34;Visual Studio Code&#34; width=&#34;539&#34; height=&#34;639&#34; class=&#34;size-full wp-image-52436&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Visual Studio Code
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_52438&#34; style=&#34;width: 566px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts03.png&#34; alt=&#34;Sublime Text 2.0.2&#34; width=&#34;556&#34; height=&#34;765&#34; class=&#34;size-full wp-image-52438&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Sublime Text 2.0.2
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Mas neste artigo vamos nos contentar com o TypeScript Playground, e deixe os editores para a sua escolha pessoal (fique a vontade em perguntar como configurar o TypeScript no Sublime, é um pouco mais trabalhoso).&lt;/p&gt;

&lt;p&gt;Agora que apresentamos o TypeScript e suas maravilhas, vamos compreender um pouco mais desta linguagem.&lt;/p&gt;

&lt;h2 id=&#34;tipos-de-variáveis&#34;&gt;Tipos de variáveis&lt;/h2&gt;

&lt;p&gt;Uma das funcionalidades do TypeScript é criar variáveis com tipos definidos, assim como é feito no Java.&lt;/p&gt;

&lt;h3 id=&#34;tipos-primitivos&#34;&gt;Tipos primitivos&lt;/h3&gt;

&lt;p&gt;Existem 3 tipos primitivos que podemos associar a uma variável. As variáveis são criadas através da palavra reservada &lt;code&gt;var&lt;/code&gt;, e o tipo é informado da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var NOMDE_DA_VARIAVEL : TIPO = VALOR
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;boolean: Pode assumir os valores &lt;code&gt;true&lt;/code&gt; ou &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;number: Assume qualquer número, como inteiro ou ponto flutuante.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;string: Tipo texto, pode ser atribuído com aspas simples ou duplas.&lt;/p&gt;

&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arrays no TS podem ser criados através de duas formas. A primeira delas, usa-se &lt;code&gt;[]&lt;/code&gt; na definição do tipo da variável, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:number[] = [1, 2, 3];
&lt;/pre&gt;

&lt;p&gt;A segunda é mais conhecida como &amp;#8220;generics&amp;#8221; e usa &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; para definir o tipo, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:Array&amp;lt;number&amp;gt; = [1,2,3];
&lt;/pre&gt;

&lt;p&gt;Pode-se usar tipos complexos na criação de arrays, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa{
    nome:string;
    constructor(nome:string){
        this.nome = nome;
    }
    sayHello():string{
        return &#34;Hello, &#34; + this.nome;
    }
}

var fulano = new Pessoa(&#34;fulano&#34;);
var beltrano = new Pessoa(&#34;beltrano&#34;);

var pessoas:Pessoa[]= new Array();
pessoas.push(fulano);
pessoas.push(beltrano);

pessoas.forEach( (p:Pessoa)=&amp;gt;
    console.log(p.sayHello())
    );
&lt;/pre&gt;

&lt;p&gt;Neste exemplo, criamos uma classe chamada &lt;code&gt;Pessoa&lt;/code&gt;, adicionando a propriedade &lt;code&gt;nome&lt;/code&gt;, o método construtor e o método &lt;code&gt;sayHello&lt;/code&gt;. Depois, criamos duas variáveis &lt;code&gt;fulano&lt;/code&gt; e &lt;code&gt;beltrano&lt;/code&gt;, e adicionamos à variável &lt;code&gt;pessoas&lt;/code&gt;, que é um array de vaiáveis do tipo &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Após usar o método &lt;code&gt;push&lt;/code&gt; para adicionar as variáveis no array, usamos o método &lt;code&gt;forEach&lt;/code&gt; para percorrer cada item deste array e exibir uma mensagem no console do navegador.&lt;/p&gt;

&lt;h3 id=&#34;enum&#34;&gt;Enum&lt;/h3&gt;

&lt;p&gt;Enums são velhos conhecidos do C#, e usados como &amp;#8220;datatype&amp;#8221;, que podem definir um status por exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red, Green, Blue};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red = 1, Green = 2, Blue = 3};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;Quando criamos um enum, usamos o &amp;#8220;poder&amp;#8221; da ide para que possamos programar de forma mais fácil, conforme a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts04.png&#34; alt=&#34;ts04&#34; width=&#34;697&#34; height=&#34;145&#34; class=&#34;alignleft size-full wp-image-52451&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;any&#34;&gt;Any&lt;/h3&gt;

&lt;p&gt;Uma variável do tipo &lt;code&gt;Any&lt;/code&gt; pode assumir qualquer valor.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var notSure: any = 4;
notSure = &#34;maybe a string instead&#34;;
notSure = false; // okay, definitely a boolean

var list:any[] = [1, true, &#34;free&#34;];
list[1] = 100;
&lt;/pre&gt;

&lt;h3 id=&#34;void&#34;&gt;Void&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;void&lt;/code&gt; é usado para determinar que um método não retorna nenhum valor, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function warnUser(): void {
    alert(&#34;This is my warning message&#34;);
}
&lt;/pre&gt;

&lt;h2 id=&#34;classes&#34;&gt;Classes&lt;/h2&gt;

&lt;p&gt;O conceito de classes no TypeScript é o mesmo de uma classe em qualquer linguagem orientada a objetos. As classes no TypeScript seguem o padrão ECMAScript 6 que em teoria será o &amp;#8220;futuro&amp;#8221; do JavaScript. A classe possui uma sintaxe muito familiar com c#, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return &#34;Hello, &#34; + this.greeting;
    }
}
var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;p&gt;O construtor é definido pela palavra &lt;code&gt;constructor&lt;/code&gt;. Métodos não necessitam da palavra &lt;code&gt;function&lt;/code&gt;, bastando apenas usar ``Acredito que este artigo tenha chamado a sua atenção pelo título. Como assim??? adeus ao JavaScript??? A linguagem que está bombando em 2015 (e claro, 2016!). Posso estar sendo um pouco ousado aqui, mas eu tenho em mente que, neste momento, o JavaScript para mim é agora &amp;#8220;linguagem de máquina&amp;#8221; ou o famoso bytecode. Porquê? Bom, você conhece um código javascript minificado+comprimido+&amp;#8221;esculachado&amp;#8221;&amp;#8230; Não estou retirando aqui toda a beleza do JavaScript, e consequente importância, mas na evolução que vem acontecendo a cada dia no mundo web, felizmente chegamos ao ponto que podemos tratar o javascript como uma linguagem tipada e semelhante ao c/java/php e derivados.&lt;/p&gt;

&lt;p&gt;Neste ponto entra uma questão pessoal. Ou você vai adorar TypeScript ou vai achar completamente inútil, já que a sua principal característica é trazer uma &amp;#8220;tipagem&amp;#8221; a linguagem, e no pacote uma forma de programar em javascript mais parecida com Java e suas vertentes. Se você gosta de tipar suas váriaveis e métodos, criar classes, interfaces, usar Orientação a Objetos, o TypeScript foi feito para você e, claro, pode dizer adeus ao JavaScript.&lt;/p&gt;

&lt;p&gt;Lembre-se que TypeScript está sendo usada extensivamente no novo framework Angular2, então se vc ainda não sabe o que é TypeScript, chegou o momento de conhecer.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-typescript-1&#34;&gt;O que é TypeScript?&lt;/h2&gt;

&lt;p&gt;O TypeScript possibilita que você escreva código JavaScript na forma que foi acostumado quando aprendeu Orientação a Objetos. Você lembra dessas aulas, em criar métodos que retornassem um valor com tipo definido, em criar classes e mais classes para o seu programa, em criar interfaces para desacoplar tudo que quisesse, entre diversas outras técnicas. Com TypeScript tudo isso é possível, porque no final ele pega o seu lindo código cheio de classes e transforma em JavaScript puro, no qual o browser vai compreender. No próprio site é definido que o TypeScript compila para JavaScript, o que é um termo tecnicamente errado &amp;#8211; mas cada vez mais aceito, dado que aquele código &amp;#8220;malucão&amp;#8221; em JavaScript pode ser encarado como código de máquina.&lt;/p&gt;

&lt;p&gt;No exemplo a seguir, criamos uma interface e uma classe, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface IComponent{
    getId() : string;
}

class Button implements IComponent{
    id:string;
    getId():string{
        return this.id;
    }
}&lt;/pre&gt;

&lt;p&gt;Este é um código 100% TypeScript que você pode criar em um editor de textos ou ide, no qual criamos uma interface chamada &lt;code&gt;IComponent&lt;/code&gt;e uma classe que chamamos de &lt;code&gt;Button&lt;/code&gt;. Esta classe implementa a interface e por isso o método &lt;code&gt;getId()&lt;/code&gt; deve ser criado. Se você salvar este arquivo como um arquivo javascript e adicionar em um documento HTML, nenhum &lt;strong&gt;browser&lt;/strong&gt; vai entender isso, quem sabe num futuro distante. Mas isso nao é um problema, pois o TypeScript possui um &amp;#8220;compilador&amp;#8221; que irá pegar o seu código e transformar em algo do tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Button = (function () {
    function Button() {
    }
    Button.prototype.getId = function () {
        return this.id;
    };
    return Button;
})();&lt;/pre&gt;

&lt;p&gt;Este código feioso aí em cima é 100% javascript compreensível em qualquer navegador web. Tem gente que prefere escrever assim, vai entender né. Mas como essa mágica funciona? Vamos explicar a seguir.&lt;/p&gt;

&lt;h2 id=&#34;testando-o-typescript-1&#34;&gt;Testando o TypeScript&lt;/h2&gt;

&lt;p&gt;Abra uma nova aba no seu browser e acesse: &lt;a href=&#34;http://www.typescriptlang.org/Playground&#34;&gt;http://www.typescriptlang.org/Playground&lt;/a&gt;. O Playground é um pequeno editor TypeScript que, além de checar possíveis erros de sintaxe, também compila automaticamente o código para Javascript, no qual você pode testá-lo. Não omita o Playground no seu aprendizado, ele pode te ajudar muito, como na figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts01.png&#34; alt=&#34;ts01&#34; width=&#34;856&#34; height=&#34;277&#34; class=&#34;alignleft size-full wp-image-52433&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso não queira utilizar o Playground, pode-se instalar o TypeScript no seu ambiente de desenvolvimento através do node. O comando a seguir deve ser compreensível para você:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ npm install typescript -g&lt;/pre&gt;

&lt;p&gt;Após instalar o TypeScript no ambiente, você pode usar o comando &lt;code&gt;tsc&lt;/code&gt; para compilar um arquivo que geralmente está na extensão &lt;code&gt;ts&lt;/code&gt; para &lt;code&gt;js&lt;/code&gt;. Por exemplo, crie o arquivo &lt;code&gt;script.ts&lt;/code&gt; com o código TypeScript descrito anteriormente e execute o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;tsc --out script.js script.ts&lt;/pre&gt;

&lt;p&gt;Editores de texto como o Sublime Text, Atom, VS Code, também tem a capacidade de compilar o arquivo em JavaScript, bastando apenas adicionar plugins relativos ao TypeScript. O &lt;code&gt;VS Code&lt;/code&gt;, em particular, apresentou um bom comportamento frente aos outros, como pode-se perceber na imagem a seguir.&lt;/p&gt;

&lt;div id=&#34;attachment_52436&#34; style=&#34;width: 549px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts02.png&#34; alt=&#34;Visual Studio Code&#34; width=&#34;539&#34; height=&#34;639&#34; class=&#34;size-full wp-image-52436&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Visual Studio Code
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_52438&#34; style=&#34;width: 566px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts03.png&#34; alt=&#34;Sublime Text 2.0.2&#34; width=&#34;556&#34; height=&#34;765&#34; class=&#34;size-full wp-image-52438&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Sublime Text 2.0.2
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Mas neste artigo vamos nos contentar com o TypeScript Playground, e deixe os editores para a sua escolha pessoal (fique a vontade em perguntar como configurar o TypeScript no Sublime, é um pouco mais trabalhoso).&lt;/p&gt;

&lt;p&gt;Agora que apresentamos o TypeScript e suas maravilhas, vamos compreender um pouco mais desta linguagem.&lt;/p&gt;

&lt;h2 id=&#34;tipos-de-variáveis-1&#34;&gt;Tipos de variáveis&lt;/h2&gt;

&lt;p&gt;Uma das funcionalidades do TypeScript é criar variáveis com tipos definidos, assim como é feito no Java.&lt;/p&gt;

&lt;h3 id=&#34;tipos-primitivos-1&#34;&gt;Tipos primitivos&lt;/h3&gt;

&lt;p&gt;Existem 3 tipos primitivos que podemos associar a uma variável. As variáveis são criadas através da palavra reservada &lt;code&gt;var&lt;/code&gt;, e o tipo é informado da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var NOMDE_DA_VARIAVEL : TIPO = VALOR
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;boolean: Pode assumir os valores &lt;code&gt;true&lt;/code&gt; ou &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;number: Assume qualquer número, como inteiro ou ponto flutuante.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;string: Tipo texto, pode ser atribuído com aspas simples ou duplas.&lt;/p&gt;

&lt;h3 id=&#34;arrays-1&#34;&gt;Arrays&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arrays no TS podem ser criados através de duas formas. A primeira delas, usa-se &lt;code&gt;[]&lt;/code&gt; na definição do tipo da variável, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:number[] = [1, 2, 3];
&lt;/pre&gt;

&lt;p&gt;A segunda é mais conhecida como &amp;#8220;generics&amp;#8221; e usa &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; para definir o tipo, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:Array&amp;lt;number&amp;gt; = [1,2,3];
&lt;/pre&gt;

&lt;p&gt;Pode-se usar tipos complexos na criação de arrays, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa{
    nome:string;
    constructor(nome:string){
        this.nome = nome;
    }
    sayHello():string{
        return &#34;Hello, &#34; + this.nome;
    }
}

var fulano = new Pessoa(&#34;fulano&#34;);
var beltrano = new Pessoa(&#34;beltrano&#34;);

var pessoas:Pessoa[]= new Array();
pessoas.push(fulano);
pessoas.push(beltrano);

pessoas.forEach( (p:Pessoa)=&amp;gt;
    console.log(p.sayHello())
    );
&lt;/pre&gt;

&lt;p&gt;Neste exemplo, criamos uma classe chamada &lt;code&gt;Pessoa&lt;/code&gt;, adicionando a propriedade &lt;code&gt;nome&lt;/code&gt;, o método construtor e o método &lt;code&gt;sayHello&lt;/code&gt;. Depois, criamos duas variáveis &lt;code&gt;fulano&lt;/code&gt; e &lt;code&gt;beltrano&lt;/code&gt;, e adicionamos à variável &lt;code&gt;pessoas&lt;/code&gt;, que é um array de vaiáveis do tipo &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Após usar o método &lt;code&gt;push&lt;/code&gt; para adicionar as variáveis no array, usamos o método &lt;code&gt;forEach&lt;/code&gt; para percorrer cada item deste array e exibir uma mensagem no console do navegador.&lt;/p&gt;

&lt;h3 id=&#34;enum-1&#34;&gt;Enum&lt;/h3&gt;

&lt;p&gt;Enums são velhos conhecidos do C#, e usados como &amp;#8220;datatype&amp;#8221;, que podem definir um status por exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red, Green, Blue};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red = 1, Green = 2, Blue = 3};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;Quando criamos um enum, usamos o &amp;#8220;poder&amp;#8221; da ide para que possamos programar de forma mais fácil, conforme a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts04.png&#34; alt=&#34;ts04&#34; width=&#34;697&#34; height=&#34;145&#34; class=&#34;alignleft size-full wp-image-52451&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;any-1&#34;&gt;Any&lt;/h3&gt;

&lt;p&gt;Uma variável do tipo &lt;code&gt;Any&lt;/code&gt; pode assumir qualquer valor.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var notSure: any = 4;
notSure = &#34;maybe a string instead&#34;;
notSure = false; // okay, definitely a boolean

var list:any[] = [1, true, &#34;free&#34;];
list[1] = 100;
&lt;/pre&gt;

&lt;h3 id=&#34;void-1&#34;&gt;Void&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;void&lt;/code&gt; é usado para determinar que um método não retorna nenhum valor, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function warnUser(): void {
    alert(&#34;This is my warning message&#34;);
}
&lt;/pre&gt;

&lt;h2 id=&#34;classes-1&#34;&gt;Classes&lt;/h2&gt;

&lt;p&gt;O conceito de classes no TypeScript é o mesmo de uma classe em qualquer linguagem orientada a objetos. As classes no TypeScript seguem o padrão ECMAScript 6 que em teoria será o &amp;#8220;futuro&amp;#8221; do JavaScript. A classe possui uma sintaxe muito familiar com c#, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return &#34;Hello, &#34; + this.greeting;
    }
}
var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;p&gt;O construtor é definido pela palavra &lt;code&gt;constructor&lt;/code&gt;. Métodos não necessitam da palavra &lt;code&gt;function&lt;/code&gt;, bastando apenas usar`&lt;code&gt;. Perceba que, no exemplo apresentado, não definimos visibilidade das propriedades da classe, nem o tipo de retorno do método&lt;/code&gt;greet`. É claro que podemos definir estes parâmetros, conforme o próximo exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    private greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    public greet() : string {
        return &#34;Hello, &#34; + this.greeting;
    }
}

var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;h3 id=&#34;visibilidade-de-métodos-e-propriedades&#34;&gt;Visibilidade de métodos e propriedades&lt;/h3&gt;

&lt;p&gt;Métodos e propriedades de uma classe podem assumir a visibilidade: private, public e protected.&lt;/p&gt;

&lt;h3 id=&#34;herança&#34;&gt;Herança&lt;/h3&gt;

&lt;p&gt;A herança entre uma classe e outra é definida pela palavra &lt;code&gt;extends&lt;/code&gt;. Pode-se sobrecarregar métodos e usar a palavra &lt;code&gt;super&lt;/code&gt; para chamar o método da classe pai, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Animal {
    name:string;
    constructor(theName: string) { this.name = theName; }
    move(meters: number = 0) {
        alert(this.name + &#34; moved &#34; + meters + &#34;m.&#34;);
    }
}

class Snake extends Animal {
    constructor(name: string) { super(name); }
    move(meters = 5) {
        alert(&#34;Slithering...&#34;);
        super.move(meters);
    }
}

class Horse extends Animal {
    constructor(name: string) { super(name); }
    move(meters = 45) {
        alert(&#34;Galloping...&#34;);
        super.move(meters);
    }
}

var sam = new Snake(&#34;Sammy the Python&#34;);
var tom: Animal = new Horse(&#34;Tommy the Palomino&#34;);

sam.move();
tom.move(34);
&lt;/pre&gt;

&lt;p&gt;Neste exemplo usamos o &lt;code&gt;super&lt;/code&gt; da classe &lt;code&gt;Snake&lt;/code&gt; para chamar o método construtor da classe pai &lt;code&gt;Animal&lt;/code&gt;. Se isso não for claro para você, dê uma estudada em OO para que possa compreender melhor, pois estas características são da Orientação em Objetos como um todo, e não do TypeScript.&lt;/p&gt;

&lt;h2 id=&#34;accessors-ou-métodos-get-set&#34;&gt;Accessors (ou métodos get/set)&lt;/h2&gt;

&lt;p&gt;Os Accessors visam proteger as propriedades de uma classe, pois você já deve saber que expor propriedades de uma classe não é algo legal 🙂&lt;/p&gt;

&lt;p&gt;Os accessors do TypeScript são feitos pelas palavras &lt;code&gt;get&lt;/code&gt; e &lt;code&gt;set&lt;/code&gt;, e claro, deixe a sua propriedade como &lt;code&gt;private&lt;/code&gt;. Veja o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa {
    private _password: string;

    get password(): string {
        return this._password;
    }
    
    set password(p : string) {
        if (p != &#34;123456&#34;) {
            this._password = p;
        }
        else {
            alert(&#34;Ei, senha não pode ser 123456&#34;);
        }
    }
}

var p = new Pessoa();
p.password = &#34;123456&#34;; //vai exibir o erro
&lt;/pre&gt;

&lt;h3 id=&#34;métodos-estáticos&#34;&gt;Métodos estáticos&lt;/h3&gt;

&lt;p&gt;É possível criar métodos estáticos definindo a palavra &lt;code&gt;static&lt;/code&gt; antes do método. Existem dezenas de aplicações para métodos estáticos, sendo uma delas não precisar instanciar uma classe, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class SystemAlert{
    
    static alert(message:string):void{
        alert(message);
    }
    
    static warm (message:string):void{
        alert(&#34;Atenção: &#34; + message);
    }
    
    static error(message:string):void{
        alert(&#34;Erro: &#34; + message);
    }
    
}

SystemAlert.alert(&#34;Oi&#34;);
SystemAlert.error(&#34;Não foi possível conectar na base de dados&#34;);
&lt;/pre&gt;

&lt;h2 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;Uma interface define um contrato para a classe. A interface é criada da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface Ponto{
 x: number;
 y: number;
 x: number;
}
&lt;/pre&gt;

&lt;p&gt;Para implementar a interface, usamos &lt;code&gt;implements&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Ponto3d implements Ponto{
   (aqui implementamos x,y,z)
}
&lt;/pre&gt;

&lt;h2 id=&#34;funções&#34;&gt;Funções&lt;/h2&gt;

&lt;p&gt;Vamos exemplificar algumas particularidades de uma função em TypeScript. A função pode ser criada fora de uma classe ou dentro, sendo as observações que faremos a seguir podem ser aplicadas em ambas.&lt;/p&gt;

&lt;p&gt;Tome nota apenas que, em uma classe, não precisamos usar a palavra &lt;code&gt;function&lt;/code&gt; para definir uma função, mas fora da classe precisamos.&lt;/p&gt;

&lt;h3 id=&#34;parâmetros-com-valores-padrão&#34;&gt;Parâmetros com valores padrão&lt;/h3&gt;

&lt;p&gt;Pode-se definir um valor padrão para um parâmetro de uma função da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function buildName(firstName: string, lastName : string = &#34;Smith&#34;) {
}
//ou
class Foo{
  buildName(firstName: string, lastName : string = &#34;Smith&#34;) {
  }
}
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-opcionais&#34;&gt;Parâmetros opcionais&lt;/h3&gt;

&lt;p&gt;Use o caractere &lt;code&gt;?&lt;/code&gt; para definir um parâmetro opcional.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Foo{
  buildName(firstName: string, lastName? : string) {
     if (lastName){
           // blablabla
     }
  }
}
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-rest&#34;&gt;Parâmetros REST&lt;/h3&gt;

&lt;p&gt;Pode-se repassar um array de valores diretamente para um parâmetro. É válido lembrar que este modo só pode ser usado no último parâmetro da sua função. Exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Foo{
 static alertName(firstName: string, ...restOfName: string[]) {
    alert(firstName + &#34; &#34; + restOfName.join(&#34; &#34;));
 }
}
Foo.alertName(&#34;Fulano&#34;,&#34;de&#34;,&#34;Tal&#34;);
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-no-formato-json&#34;&gt;Parâmetros no formato JSON&lt;/h3&gt;

&lt;p&gt;Umas das maiores facilidades do Javascript é repassar parâmetros no formato JSON. Com TypeScript é possível utilizar este mesmo comportamento, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Ponto{
    
    private _x : number = 0;
    private _y : number = 0;
    private _z : number = 0;
    
    constructor( p: {x:number;y:number;z?:number;}){
        this._x = p.x;
        this._y = p.y;
        if (p.z)
            this._z = p.z;
    }
    
    is3d():boolean{
        return this._z!=0;
    }
    
}

var p1 = new Ponto({x:10,y:20});

alert(p1.is3d());
&lt;/pre&gt;

&lt;p&gt;Observe que no construtor da classe &lt;code&gt;Ponto&lt;/code&gt; criamos o parâmetro &lt;code&gt;p&lt;/code&gt; e na definição do seu tipo repassamos um objeto anônimo com três parâmetros, sendo que o parâmetro &lt;code&gt;z&lt;/code&gt; é opcional.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Neste artigo vimos algumas funcionalidades do TypeScript, sendo ainda existem diversos tópicos a serem abordados. Gostaria de lhe encorajar a testar esta nova linguagem, e caso tenha dúvidas, não deixe de comentar abaixo. Sugira também novos artigos sobre TypeScript, estaremos avaliando cada pedido!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>