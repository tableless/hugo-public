<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nwjs on Tableless</title>
    <link>http://tableless.com.br/tags/nwjs/index.xml</link>
    <description>Recent content in Nwjs on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/nwjs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Aplicativos Desktop com NW.js – Node Webkit – Introdução</title>
      <link>http://tableless.com.br/aplicativos-desktop-com-nw-js-node-webkit-introducao/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/aplicativos-desktop-com-nw-js-node-webkit-introducao/</guid>
      <description>

&lt;h1 id=&#34;este-é-o-primeiro-artigo-de-uma-série-que-vou-escrever-sobre-aplicações-desktop-usando-tecnologias-web-html-css-javascript-e-webgl&#34;&gt;&lt;em&gt;&lt;strong&gt;Este é o primeiro artigo de uma série que vou escrever sobre aplicações desktop usando tecnologias web. (HTML, CSS, Javascript e WebGL)&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é uma aplicação em tempo de execução baseado em Chromium e Node.js, com ele é possível desenvolver aplicativos nativos para Windows, Linux e Mac, usando tecnologias web e usufruindo dos pacotes do Node.js.&lt;/p&gt;

&lt;p&gt;Para ter uma ideia do que é possível fazer, visite este link e veja alguns aplicativos desenvolvidos com NW.js -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é um projeto criado pela Intel. Outro projeto muito bom e conhecido para desenvolver aplicativos desktop usando tecnologias web é o &lt;strong&gt;Electron&lt;/strong&gt;, criado pelo GitHub. Segue um link comparativo entre os dois -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa série de artigos, vou explicar como criar um aplicativo desktop, com ícone personalizado e empacotado em um único executável. No último artigo, vou explicar como fazer uma integração com base de dados local, em tempo real e sem a necessidade de abrir portas ou fazer configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A versão mais atual do NW.js no momento em que eu escrevo este artigo é a &lt;strong&gt;&lt;em&gt;nwjs-v0.15.3&lt;/em&gt;&lt;/strong&gt;, é esta que estou usando. Além disso, estou usando Windows como sistema operacional.&lt;/p&gt;

&lt;p&gt;Vamos começar com um &amp;#8220;Olá Mundo&amp;#8221;, porém, vou explicar alguns recursos de &amp;#8220;Window&amp;#8221; e as configurações para iniciar o projeto.&lt;/p&gt;

&lt;p&gt;Primeiro faça o download do NW.js no site &lt;a href=&#34;http://nwjs.io/&#34;&gt;http://nwjs.io/&lt;/a&gt; &amp;#8211; Para desenvolvimento, baixe a versão SDK &amp;#8211; descompacte os arquivos em uma pasta que seja fácil para acessar pelo &lt;em&gt;prompt&lt;/em&gt; de comando &amp;#8211; eu costumo descompactar na pasta _c:\nwjs_&lt;/p&gt;

&lt;p&gt;Para uma aplicação básica funcionar, precisamos apenas de dois arquivos, o &lt;em&gt;package.json&lt;/em&gt;, que contém as configurações da nossa aplicação e o &lt;em&gt;index.html&lt;/em&gt;, que contém o código da nossa aplicação. Depois vamos adicionar arquivos .js e .css. Neste primeiro artigo, vamos brincar um pouco com o package.json.&lt;/p&gt;

&lt;p&gt;Crie um novo arquivo index.html &amp;#8211; vamos adicionar uma estrutura básica de HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Meu Primeiro Projeto&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Olá Mundo.&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Crie um novo arquivo package.json, com o código abaixo e salve na mesma pasta do HTML:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;
}&lt;/pre&gt;

&lt;p&gt;Somente com essas informações no package.json você já pode testar seu &amp;#8220;Olá Mundo&amp;#8221;. &amp;#8220;&lt;em&gt;name&lt;/em&gt;&amp;#8221; é o nome do projeto, e &amp;#8220;&lt;em&gt;main&lt;/em&gt;&amp;#8221; é o arquivo inicial da aplicação, sua &amp;#8220;página inicial&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Para executar nosso aplicativo, abra o &lt;em&gt;prompt&lt;/em&gt; de comando e vá até a pasta do seu projeto, no meu caso &amp;#8220;c:\projetos\olamundo&amp;#8221;, depois vamos executar o comando para o NW.js executar nosso projeto. Como estou usando o Windows, vou apontar para o nw.exe. No Linux ou no Mac é diferente, você pode olhar na documentação. Então nosso comando ficaria assim:&lt;/p&gt;

&lt;pre&gt;cd /path/to/your/app
/path/to/nw .&lt;/pre&gt;

&lt;p&gt;No meu caso:&lt;/p&gt;

&lt;pre&gt;cd c:\projetos\olamundo
c:\nwjs\nw.exe .&lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-54795 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/olamundo01.png&#34; alt=&#34;Tela Olá Mundo NW.js&#34; width=&#34;966&#34; height=&#34;535&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mais-sobre-o-package-json&#34;&gt;Mais sobre o package.json&lt;/h2&gt;

&lt;p&gt;O nosso package.json está muito simples, tem apenas um nome e o caminho do arquivo index. Vou explicar um pouco sobre as configurações &amp;#8220;window&amp;#8221;, que servem para controlar os botões de fechar, minimizar, informar os tamanhos mínimos e máximos, se a janela pode ser dimensionada e outras configurações.&lt;/p&gt;

&lt;p&gt;Abra o seu arquivo package.json e deixe ele como o exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;,
 &#34;version&#34;: &#34;1.0&#34;,
 &#34;description&#34;: &#34;Olá Mundo&#34;,
 &#34;window&#34;: {
 &#34;width&#34;: 400,
 &#34;height&#34;: 300,
 &#34;resizable&#34;: false,
 &#34;frame&#34;: true,
 &#34;title&#34;: &#34;Olá Mundo&#34;,
 &#34;show&#34;: true,
 &#34;fullscreen&#34;: false,
 &#34;kiosk&#34;: false,
 &#34;icon&#34;: &#34;icon.png&#34;
 }
}
&lt;/pre&gt;

&lt;p&gt;Execute novamente o aplicativo e veja como ficou. Abaixo, explico cada uma das configurações usadas.&lt;/p&gt;

&lt;pre&gt;name -&amp;gt; Nome do projeto
main -&amp;gt; Arquivo inicial
version -&amp;gt; Versão
description -&amp;gt; Descrição do projeto
window:
 width -&amp;gt; Largura da janela
 height -&amp;gt; Altura da janela
 resizable -&amp;gt; Se o tamanho da janela pode ser alterado ou não
 frame -&amp;gt; Quadro que envolve a aplicação com o título, ícone, botões de fechar, minimizar e maximizar
 title -&amp;gt; Título da janela
 show -&amp;gt; Se estiver como false você executa o aplicativo e ele fica em modo silencioso, 
  está rodando, mas não aparece. Fica apenas como um processo no Windows.
 fullscreen -&amp;gt; executa em tela cheia
 kiosk -&amp;gt; Executa em tela cheia e dificulta a saída da aplicação, normalmente é usado para exposições.
 icon -&amp;gt; Caminho para o ícone (deve estar na mesma pasta do projeto)&lt;/pre&gt;

&lt;p&gt;Você pode ver mais opções e detalhes na documentação: &lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34;&gt;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repositório com os fontes do primeiro artigo: &lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34;&gt;https://bitbucket.org/jzonta/artigos_nwjs&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;próximos-artigos-8211-aplicativos-desktop-com-nw-js-8211-node-webkit&#34;&gt;Próximos artigos &amp;#8211; Aplicativos Desktop com NW.js &amp;#8211; Node Webkit&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;1º &amp;#8211; Introdução&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Uma breve introdução, fazer um &amp;#8220;Olá Mundo&amp;#8221; e aprender um pouco sobre as configurações iniciais.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2º &amp;#8211; Menus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fazer um menu nativo da aplicação e um menu HTML, capturar as ações do botão de minimizar e alterar para minimizar o aplicativo para o System Try (Aqueles ícones pequenos ao lado do relógio) e vamos adicionar menu de opções no System Try.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3º &amp;#8211; Pacotes Node e Persistência de dados&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vamos aprender como usar os pacotes do Node.js, vamos instalar um pacote para persistir informações em um banco de dados MySql e também em um arquivo local.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4º &amp;#8211; Preparando para produção&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Como empacotar sua aplicação em um executável e adicionar um ícone para o Windows.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5º &amp;#8211; Integração web com base de dados local&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como fazer uma integração de uma aplicação web com um banco de dados local, através de uma api REST, sem a necessidade de abertura de portas ou configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Poste suas dúvidas e sugestões nos comentários!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>