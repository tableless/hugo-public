<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mustache on Tableless</title>
    <link>http://tableless.com.br/tags/mustache/index.xml</link>
    <description>Recent content in Mustache on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/mustache/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Templates client-side com Mustache.js</title>
      <link>http://tableless.com.br/templates-client-side-com-mustache-js/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/templates-client-side-com-mustache-js/</guid>
      <description>

&lt;p&gt;Antes de começarmos, uma pergunta: quem nunca implementou um &amp;#8220;template&amp;#8221; nos moldes do código abaixo?&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;html  = &#39;&amp;lt;li class=&#34;clearfix&#34;&amp;gt;&#39;;
html += &#39; &amp;lt;div class=&#34;foto&#34;&amp;gt;&#39;;
html += &#39;   &amp;lt;a href=&#34;&#39; + item.permalink + &#39;&#34;&amp;gt;&#39;;
html += &#39;     &amp;lt;img src=&#34;&#39; + item.thumb + &#39;&#34; width=&#34;180&#34; height=&#34;124&#34; alt=&#34;&#39; + item.titulo + &#39;&#34;&amp;gt;&#39;;
html += &#39;   &amp;lt;/a&amp;gt;&#39;;
html += &#39; &amp;lt;/div&amp;gt;&#39;;
html += &#39; &amp;lt;span&amp;gt;&#39;;
html += item.titulo;
html += &#39; &amp;lt;/span&amp;gt;&#39;;
html += &#39;&amp;lt;/li&amp;gt;&#39;;&lt;/pre&gt;

&lt;p&gt;Se você ainda faz isso, chegou a hora de parar.&lt;/p&gt;

&lt;p&gt;Neste artigo abordaremos a &lt;a href=&#34;https://github.com/janl/mustache.js/&#34;&gt;implementação JavaScript para templates Mustache&lt;/a&gt;. A sintaxe já foi portada para diferentes linguagens, incluindo Ruby, Python, PHP e Java. Para uma lista completa, visite o &lt;a href=&#34;http://mustache.github.com/&#34;&gt;site oficial do projeto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A principal diferença do Mustache para outras formas de templating no client-side (&lt;a href=&#34;http://tableless.com.br/templates-e-jquery-parte-1/&#34; title=&#34;http://tableless.com.br/templates-e-jquery-parte-1/&#34;&gt;jQuery Template&lt;/a&gt;, por exemplo) é que ele não aceita lógica, como declarações condicionais, loops etc. Pode não parecer, mas isso é muito bom: um template não deveria conter nenhuma lógica, já que é apenas uma camada de apresentação.&lt;/p&gt;

&lt;p&gt;Por ser &amp;#8220;logic-less&amp;#8221;, o Mustache.js é bem enxuto, pesando 8.5kb em sua versão minificada.&lt;/p&gt;

&lt;h2 id=&#34;criando-um-template&#34;&gt;Criando um template&lt;/h2&gt;

&lt;p&gt;Os templates Mustache esperam receber dados no formato JSON. Os dados podem ser textos, variáveis e até mesmo funções. Vamos começar com um exemplo básico onde renderizamos um template de um artigo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var item = {
      titulo: &#34;Templates client-side com Mustache.js&#34;,
      permalink: &#34;http://tableless.com.br/templates-client-side-com-mustache-js&#34;
      thumb: &#34;mustache.jpg&#34;,
    },
    output = Mustache.render(&#34;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;{{abstract}}&amp;lt;/p&amp;gt;&#34;, item);
console.log(output);&lt;/pre&gt;

&lt;p&gt;O método &lt;strong&gt;render&lt;/strong&gt; é o responsável por retornar o template com os dados formatados. O primeiro parâmetro é o template e o segundo o objeto JSON com os dados que devem ser aplicados.&lt;/p&gt;

&lt;p&gt;Os dados armazenados no JSON são representados no template utilizando duas chaves (bigode-bigode) com o nome da propriedade.&lt;/p&gt;

&lt;p&gt;Uma boa prática é separar o template do seu código JavaScript armazenando a estrutura do template em uma tag &lt;strong&gt;script&lt;/strong&gt; do tipo &lt;strong&gt;&amp;#8220;text/template&amp;#8221;&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script id=&#34;item-template&#34; type=&#34;text/template&#34;&amp;gt;
&amp;lt;li class=&#34;clearfix&#34;&amp;gt;
  &amp;lt;div class=&#34;foto&#34;&amp;gt;
    &amp;lt;a href=&#34;{{ item.permalink }}&#34;&amp;gt;
      &amp;lt;img src=&#34;{{ item.thumb }}&#34; width=&#34;180&#34; height=&#34;124&#34; alt=&#34;{{ item.titulo }}&#34;&amp;gt;
    &amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;span&amp;gt;{{ item.titulo }}&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Os dados do template são utilizados buscando o conteúdo HTML da tag.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var item = {
      titulo: &#34;Templates client-side com Mustache.js&#34;,
      permalink: &#34;http://tableless.com.br/templates-client-side-com-mustache-js&#34;
      thumb: &#34;mustache.jpg&#34;,
    },
    template = document.getElementById(&#39;article-template&#39;).innerHTML;
    output = Mustache.render(template, item);
console.log(output);&lt;/pre&gt;

&lt;p&gt;Nos exemplos a seguir, para facilitar a leitura, vamos continuar utilizando os templates diretamente no método &lt;strong&gt;render&lt;/strong&gt; do Mustache.&lt;/p&gt;

&lt;h2 id=&#34;lógica&#34;&gt;Lógica?&lt;/h2&gt;

&lt;p&gt;É verdade que não existem tags para condicionais e loops, mas sua implementação é possível utilizando caracteres especiais nas tags do template.&lt;/p&gt;

&lt;p&gt;No exemplo abaixo temos um objeto tableless que armazena um conjunto de artigos. Para realizarmos um loop nos artigos, basta utilizar o caractere &amp;#8216;#&amp;#8217; seguido do nome da propriedade como uma tag do nosso template. Dentro do bloco &lt;strong&gt;#artigos&lt;/strong&gt; temos acesso às propriedades de cada artigo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tableless = {
      &#39;artigos&#39;: [
        { &#39;titulo&#39;: &#39;Templates client-side com Mustache.js&#39; },
        { &#39;titulo&#39;: &#39;Zepto.js: JavaScript peso-leve&#39; },
        { &#39;titulo&#39;: &#39;JavaScript: o que fazer e aprender para se tornar um dev melhor?&#39; }
      ]
    },
    output = Mustache.render(&#39;{{#artigos}}&amp;lt;li&amp;gt;{{titulo}}&amp;lt;/li&amp;gt;{{/artigos}}&#39;, tableless);
console.log(output);&lt;/pre&gt;

&lt;p&gt;A lógica de condicionais é tratada no próprio objeto. Assim como o loop acima, basta adicionarmos o caracatere &amp;#8216;#&amp;#8217; a uma variável booleana para exibir ou não um conteúdo de acordo com o valor da mesma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tableless = {
      &#39;artigos&#39;: [
        { &#39;titulo&#39;: &#39;Templates client-side com Mustache.js&#39;, publicado: true },
        { &#39;titulo&#39;: &#39;Zepto.js: JavaScript peso-leve&#39;, publicado: true },
        { &#39;titulo&#39;: &#39;JavaScript: o que fazer e aprender para se tornar um dev melhor?&#39;, publicado: false }
      ]
    },
    output = Mustache.render(&#39;{{#artigos}}{{#publicado}}&amp;lt;li&amp;gt;{{titulo}}&amp;lt;/li&amp;gt;{{/publicado}}{{/artigos}}&#39;, tableless);
console.log(output);&lt;/pre&gt;

&lt;h2 id=&#34;funções&#34;&gt;Funções&lt;/h2&gt;

&lt;p&gt;As tags podem conter funções como valores. Por exemplo, no objeto abaixo, a função buzz soma a quantidade de likes, tweets e comentários de um artigo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var artigo = {
    &#39;titulo&#39;: &#39;Templates client-side com Mustache.js&#39;,
      &#39;likes&#39;: 32,
    &#39;tweets&#39;: 22,
      &#39;comentarios&#39;: 45,
    &#39;buzz&#39;: function () {
      return this.likes + this.tweets + this.comentarios;
    }
  },
  output = Mustache.render(&#39;&amp;lt;h1&amp;gt;{{titulo}} &amp;lt;small&amp;gt;{{buzz}}&amp;lt;/small&amp;gt;&amp;lt;/h1&amp;gt;&#39;, artigo);
console.log(output);&lt;/pre&gt;

&lt;p&gt;Quando o valor de uma tag é representado por uma função e o caractere &amp;#8216;#&amp;#8217; é utilizado, a mesma pode retornar uma outra função que recebe dois parâmetros: o texto do bloco do template e uma versão especial do método render para ser executada no contexto do bloco.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var artigo = {
    &#39;titulo&#39;: &#39;Templates client-side com Mustache.js&#39;,
    &#39;url&#39;: &#39;http://tableless.com.br/templates-client-side-com-mustache-js&#39;,
    &#39;permalink&#39;: function () {
      return function (text, render) {
        return &#39;&amp;lt;a href=&#34;&#39; + this.url + &#39;&#34; class=&#34;permalink&#34;&amp;gt;&#39; + render(text) + &#39;&amp;lt;/a&amp;gt;&#39;;
      }
    }
  },
  output = Mustache.render(&#39;&amp;lt;p&amp;gt;{{#permalink}}{{titulo}}{{/permalink}}&amp;lt;/p&amp;gt;&#39;, artigo);
console.log(output);&lt;/pre&gt;

&lt;p&gt;Esse tipo de função é chamado de helper, podendo conter lógicas exclusivas da view e evitando a repetição de trechos de template comuns.&lt;/p&gt;

&lt;h2 id=&#34;parciais&#34;&gt;Parciais&lt;/h2&gt;

&lt;p&gt;Outra maneira de evitar repetição é utilizando templates parciais. Parciais são referenciados com o caractere &amp;#8216;&amp;gt;&amp;#8217; dentro da tag.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var tableless = {
      &#39;artigos&#39;: [
        { &#39;titulo&#39;: &#39;Templates client-side com Mustache.js&#39; },
        { &#39;titulo&#39;: &#39;Zepto.js: JavaScript peso-leve&#39; },
        { &#39;titulo&#39;: &#39;JavaScript: o que fazer e aprender para se tornar um dev melhor?&#39; }
      ]
    },
    parciais = {&#39;artigo&#39;: &#39;

&lt;li&gt;
  {{titulo}}
&lt;/li&gt;&#39;},
    output = Mustache.render(&#39;{{#artigos}}{{&amp;gt;artigo}}{{/artigos}}&#39;, tableless, parciais);
console.log(output);&lt;/pre&gt;

&lt;p&gt;Os templates parciais devem ser informados como terceiro parâmetro do método &lt;strong&gt;render&lt;/strong&gt; e seu valor deve ser um objeto contendo um ou mais templates. A chave informada no objeto é o nome da tag que será utilizada no template principal.&lt;/p&gt;

&lt;h2 id=&#34;e-tem-mais&#34;&gt;E tem mais&lt;/h2&gt;

&lt;p&gt;Além das funcionalidades apresentadas neste artigo, a biblioteca Mustache.js ainda trás alguns outros benefícios como templates compilados, delimitadores personalizados e seções invertidas. Para saber mais, visite a &lt;a href=&#34;https://github.com/janl/mustache.js/&#34;&gt;página do projeto no GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E você? Utiliza alguma solução de templating no client-side? Compartilhe nos comentários!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>