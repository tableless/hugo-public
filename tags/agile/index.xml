<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agile on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/agile/index.xml</link>
    <description>Recent content in Agile on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/agile/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>O Product Owner deve estar na Sprint Retrospective?</title>
      <link>https://tableless.github.io/hugo-public/o-product-owner-deve-estar-na-sprint-retrospective/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-product-owner-deve-estar-na-sprint-retrospective/</guid>
      <description>&lt;p&gt;Existe uma polêmica entre os usuários da metodologia e na comunidade agilista quanto a não participação deste membro na retrospectiva. Pense um momento nesta hipótese:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Scrum Master em conjunto com o time de desenvolvedores, decidem que testers não farão mais parte das retrospectivas. Eles não são necessários, pois eles não são parte do time, suas atividades são diferentes das de desenvolvimento e seus feedback’s são irrelevantes.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pensou? É tão estranho de criar a hipótese quanto de praticá-la, certo?!&lt;/p&gt;

&lt;p&gt;Então porque você deveria cogitar deixar um membro do time como o &lt;em&gt;Product Owner&lt;/em&gt; de fora da cerimonia onde de acordo com o &lt;a href=&#34;http://www.agilemanifesto.org/iso/en/principles.html&#34;&gt;Principles behind the Agile Manifesto&lt;/a&gt;, “a equipe reflete sobre como se tornar mais eficaz e então refina e ajusta seu comportamento de acordo.”.&lt;/p&gt;

&lt;p&gt;Em seu livro &amp;#8216;&lt;a href=&#34;http://amzn.to/295UAz0&#34;&gt;Scrum &amp;#8211; Gestão Ágil para projetos de Sucesso&lt;/a&gt;&amp;#8216; Rafael Sabbagh apresenta dois motivos a serem observados, em um momento quando um P.O. não colaborativo poẽm-se em um nível hierárquico superior ao time e assim causa intimidação no restante do time e um segundo motivo quando a intimidação ocorre em sentido oposto, e o mesmo vira alvo de reclamações e acusações. Para ambos motivos, o autor oferece a solução: o &lt;em&gt;Scrum Master&lt;/em&gt;, é dele o papel de facilitar e garantir uma participação efetiva de todos os membros do time e impedir que estas disfunções ocorram.&lt;/p&gt;

&lt;p&gt;Podemos citar um exemplo em que o &lt;em&gt;Product Owner&lt;/em&gt; tenta interferir diretamente nos estudos de técnicas para automação de deploy implantadas pelo time, alegando que estas impactariam no tempo de desenvolvimento e acarretariam no atraso da sprint release e consequente entrega do produto final. Também é possível analisar esta situação pelo lado oposto, onde o time de desenvolvimento aborda aspectos e informações técnicas corrompendo a visão holística do P.O.. Faisal Mahmood, em seu artigo &lt;a href=&#34;http://www.accelright.com/detail-Should-the-Product-Owner-Attend-Daily-Scrum,-Product-Owner-and-Team-Engagement_63.html#sthash.3XBtjGxD.dpuf&#34;&gt;Should the Product Owner Attend Daily Scrum, Product Owner and Team Engagement&lt;/a&gt;, sinaliza o que será a solução para o cenário apresentado acima, o Product Owner não precisa estar presente o tempo inteiro da cerimonia, bastando que ele pratique um &amp;#8216;&lt;em&gt;step aside&lt;/em&gt;&amp;#8216; e se retire da sala enquanto da liberdade ao time de abordar assuntos estritamente técnicos e que por muitas vezes não pertencem ao cotidiano deste importante papel dentro do &lt;em&gt;Scrum&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Portanto, quando você deixa de incluir seu &lt;em&gt;Product Owner&lt;/em&gt; na retrospectiva ele perde uma importante oportunidade de receber/oferecer um feedback ao time, dificultando a consolidação de um dos pilares do &lt;em&gt;Scrum&lt;/em&gt; que é o processo de transparência, inspeção e adaptação, gera distanciamento do P.O. com o time, acarretando problemas de comunicação e relações no dia a dia, e na minha opinião, a pior das consequências, permite ao time desenvolvimento ter a &lt;strong&gt;falsa idéia&lt;/strong&gt; de que o &lt;em&gt;Product Owner&lt;/em&gt; é um mero &lt;em&gt;proxy&lt;/em&gt; de demandas e não faz parte do Time de &lt;em&gt;Scrum&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O P.O. não só pode, como deve estar presente na cerimônia. Espero e desejo que sua próxima retrospectiva, todos os membros do seu Time de &lt;em&gt;Scrum&lt;/em&gt; estejam presentes!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quando o Scrum irá falhar</title>
      <link>https://tableless.github.io/hugo-public/quando-o-scrum-ira-falhar/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/quando-o-scrum-ira-falhar/</guid>
      <description>

&lt;p&gt;Nesse artigo vamos abordar um pouco os pontos críticos do Scrum, a intenção aqui não é explicar o framework (o Scrum é considerado um framework para gestão de projetos) em si, mas dar um panorama dos casos mais comuns de falhas críticas ao se tentar adotar o Scrum ou modificá-lo. Caso esteja procurando um artigo para entender melhor o que é o Scrum, recomendo esse &lt;a href=&#34;http://tableless.com.br/desenvolvimento-agil-utilizando-scrum/&#34;&gt;aqui&lt;/a&gt;, escrito pela Dani Guerrato. Ou ainda, caso queira mergulhar de cabeça recomendo a leitura do &lt;a href=&#34;http://www.scrumguides.org/docs/scrumguide/v1/Scrum-Guide-Portuguese-BR.pdf&#34;&gt;Scrum Guide&lt;/a&gt; (em português).&lt;/p&gt;

&lt;p&gt;Introdução feita, vamos ao que realmente interessa aqui: O Scrum não é uma bala de prata (a essa altura você já deve saber que nenhuma metodologia ágil é). Se você, assim como eu, já foi (ou é) responsável por trazê-lo para sua empresa, esteja atento ao seu ambiente e aprenda com a implementação do Scrum. Citarei aqui e explicarei sobre cada um dos pontos críticos do Scrum:&lt;/p&gt;

&lt;h2 id=&#34;quando-a-comunicação-não-é-suficiente&#34;&gt;Quando a comunicação não é suficiente&lt;/h2&gt;

&lt;p&gt;Esse talvez seja o mais óbvio ponto crítico do Scrum. Em qualquer projeto, a comunicação se faz necessária, mas diferente de outras metodologias de gerenciamento de projeto, o Scrum delega a responsabilidade do gerenciamento à própria equipe de desenvolvimento e daí a comunicação se torna ainda mais crítica. Como uma equipe pode chegar a um consenso e se autogerenciar se não há uma boa (ou nenhuma) comunicação? Sem comunicação, não há gerenciamento.&lt;/p&gt;

&lt;p&gt;Portanto Scrum Master (ou não), fique atento a esse ponto, ao perceber pequenos atritos não resolvidos, desgaste ou qualquer sinal de que a comunicação do time de desenvolvimento, Product Owner ou até mesmo a sua, não esta indo bem. Trabalhe em cima disso.&lt;/p&gt;

&lt;p&gt;Existe um artefato que tem como objetivo garantir uma comunicação mais fluída e um gerenciamento mais democrático e dinâmico: Planning Poker. Nele todos os membros da equipe de desenvolvimento jogam cartas para determinar o peso de cada estória de usuário. Ao jogarem cartas distintas para uma mesma User Story, é discutido (geralmente entre os jogadores que colocaram os dois pontos mais distantes) o motivo deles avaliarem aquela estória daquela forma; e Mike Cohn defende que você considere uma estória como avaliada somente quando todos do time chegarem a um consenso quanto ao peso daquela estória. Isso garante o diálogo, além de melhorar o comprometimento e a motivação.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;quando-a-motivação-acaba&#34;&gt;Quando a motivação acaba&lt;/h2&gt;

&lt;p&gt;Como garantir algo tão subjetivo durante todo o projeto? Esse é um problema grave não só no Scrum, mas em qualquer outra metodologia ágil. E a resposta é como esperado: você não garante!&lt;/p&gt;

&lt;p&gt;Então nada pode ser feito para que sua equipe se motive? Não, o fato de que motivação é algo subjetivo, não quer dizer que você não possa prover as ferramentas ou o ambiente necessário para sua equipe continuar seguindo motivada.&lt;/p&gt;

&lt;p&gt;Vou considerar aqui que os colaboradores com quem você convive já são pessoas motivadas por natureza, que é o que se espera num ambiente ágil, e que é necessário apenas manter a motivação. Então vou citar aqui os principais motivos que levam um colaborador a se desmotivar durante o projeto:&lt;/p&gt;

&lt;p&gt;&lt;li style=&#34;font-weight: 400&#34;&gt;
  Stakeholders não comprometidos, mas envolvidos apenas com cobranças desalinhadas. Sabe aquele cliente que nunca comparece aos eventos Scrum e um belo dia resolve ficar a par do projeto? Esse cliente geralmente vai acabar com sua Sprint, vai destruir a blindagem do seu time de desenvolvimento e deixará seu Product Owner (caso não seja ele mesmo) louco. Tenha um cuidado especial com o efeito negativo desse stakeholder na motivação do seu time.
&lt;/li&gt;
&lt;li style=&#34;font-weight: 400&#34;&gt;
  Projetos longos que não se renovam. Não me entenda mal. As metodologias ágeis existem com o lema de que mudanças são sempre bem vindas, mas se um projeto se alonga por tempo demasiado você irá perceber um certo desânimo na sua equipe. Principalmente se são mudanças que exigem uma série de atividades desgastantes e que acabam levando o projeto a situações do passado (desfazer estórias de usuário é uma das mais críticas).
&lt;/li&gt;
&lt;li style=&#34;font-weight: 400&#34;&gt;
  Equipe muito pouco reconhecida por projetos. Nada pior que uma entrega ou finalização de projeto com sucesso, onde o time scrum (PO, SM e equipe de desenvolvimento) não é nem sequer reconhecido pelo seu bom trabalho. É válido destacar aqui que o desenvolvimento ágil tem como objetivo entregar produtos com muito mais valor ao cliente, contudo é mais desgastante para os comprometidos com o projeto. Por isso eu recomendo a qualquer gestor que ao término de cada projeto crie sua maneira de bonificar (isso varia de acordo a sua cultura organizacional) a equipe. Lembre-se sempre de que coisas simples como uma pizza, um happy hour ou qualquer outro tipo de confraternização é suficiente para levantar o moral e deixar sua equipe pronta para o próximo projeto.
&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;quando-os-pontos-negativos-individuais-interferem-no-trabalho-em-equipe&#34;&gt;Quando os pontos negativos individuais interferem no trabalho em equipe&lt;/h2&gt;

&lt;p&gt;Como saber se sua equipe trabalha bem em time? Em alguns casos temos uma equipe madura o suficiente para termos um trabalho em equipe direto e enxuto. Mas quando isso não acontece? Quando um membro do time insiste em ser prolixo nas reuniões? Ou quando questões pequenas consomem mais tempo de discussão do que realmente importa? Quem é o responsável por fazer essas coisas funcionarem?&lt;/p&gt;

&lt;p&gt;Bem, considerando que temos um líder-servo como papel do Scrum (Scrum Master), cai sobre ele a responsabilidade com toda sua habilidade para servir e liderar ao mesmo tempo lidar com essa situação.&lt;/p&gt;

&lt;p&gt;Uma boa abordagem é fazer mentorias (aconselhamentos ou tutorias) individuais em pequenas reuniões (bate-papos). Faça com que todo o processo seja o menos assustador possível para aquele que deve ter pontos negativos trabalhados, lembre-se que motivação é uma das chaves do desenvolvimento ágil e você não quer perder um membro motivado em pleno desenvolvimento do projeto, certo? Portanto, o recomendável é fazer da forma mais sutil possível: entenda os motivos que levam o membro a agir daquela forma e através de sugestões e conselhos mostre como ele pode ser mais produtivo para o time como um todo. Lembre-se, o Scrum Master deve ter um excelente conhecimento de sua equipe, logo, essas pequenas mentorias e bate-papos devem ser feitos constantemente.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;quando-o-po-não-encontra-o-cliente&#34;&gt;Quando o PO não encontra o cliente&lt;/h2&gt;

&lt;p&gt;Essa é a maior falha em todo projeto, seja em uma metodologia ágil ou clássica.&lt;/p&gt;

&lt;p&gt;Nesse cenário seu time entrega o que promete com excelência, as cerimonias são cumpridas com precisão, o seu burndown encontra-se impecável.&lt;/p&gt;

&lt;p&gt;Mas nada do que é entregue é realmente um agregador de valor ao cliente final e provavelmente isso se dará quando o seu Product Owner estiver falando com o Stakeholder errado!&lt;/p&gt;

&lt;p&gt;Pegando um exemplo simples e claro: Imagine que sua empresa está desenvolvendo um sistema de ponto para uma fábrica, o dono da empresa é seu principal Stakeholder e o Product Owner mantém constante contato com ele. Porém a cada finalização de Sprint você nota que muito trabalho teve que voltar ao backlog ou teve que ser reescrito em outras estórias de usuário. O exemplo ilustra um sinal claro, que um PO atento logo se alarmara, de que é hora de trazer um novo Stakeholder à frente do projeto e ouvi-lo falar sobre qual será o produto ideal para ele.&lt;/p&gt;

&lt;p&gt;É muito comum, porém, que nem sempre o seu cliente final seja alguém próximo. Ou até mesmo que seu Stakeholder nem sequer o conheça! Aqui entram algumas técnicas do desenvolvimento Lean que eu acho bastante interessantes e que pode ser muito útil para sua empresa e seu trabalho receberem recomendações futuras por salvar a vida de um Stakeholder perdido.&lt;/p&gt;

&lt;p&gt;Se você já vem trabalhando com Scrum, para entender o Lean é apenas mais alguns passos adiante, por tanto irei abordar aqui rapidamente, mas caso tenha interesse deixarei esse &lt;a href=&#34;http://theleanstartup.com/&#34;&gt;link&lt;/a&gt; para maior aprofundamento. O Lean basicamente propõe que você desenvolva um MVP (Minimo Produto Viável, em português), para entrar num ciclo de Construir, Medir e Aprender. Isso tudo feito em pequenas iterações onde cada ciclo completo você tem uma nova iteração 100% funcional (até agora bem familiar, correto?).&lt;/p&gt;

&lt;p&gt;O ponto principal para você que acabou tendo que conhecer o cliente final do seu cliente, sem mesmo que ele o conheça, é que a cada etapa de Medir e Aprender você deve focar em conhecer mais sobre o usuário final: Teste A/B, Personas, teste presenciais de um possível usuário final, heatmap e muitas outras são técnicas e ferramentas válidas para esse momento. Se você não conhece nenhum dos nomes citados anteriormente, convido-o para que faça uma pausa e dê uma lida, ou ao menos separe alguns materiais para uma lida no futuro.&lt;/p&gt;

&lt;h2 id=&#34;quando-o-time-não-é-seu-próprio-gerente&#34;&gt;Quando o time não é seu próprio gerente&lt;/h2&gt;

&lt;p&gt;E quando o projeto inteiro é negociado sem conhecimento algum do time de desenvolvimento? E ao avaliar as estórias de usuários se dão conta de que o projeto iria demorar cerca de 6 meses, mas que a negociação e o contrato foram fechados para um prazo de 2 meses? Aqui está claro o problema: o time de desenvolvimento não é seu próprio gerente, suas cerimônias e artefatos estão perdidos! (Meio dramático, eu sei)&lt;/p&gt;

&lt;p&gt;Mas isso serve para reforçar que esse é um dos momentos mais frustrantes para a equipe de desenvolvimento, pois não será refeita a negociação e sim serão apertados os prazos e as estimativas serão direcionadas por fatores externos.&lt;/p&gt;

&lt;p&gt;Se você está percebendo um grande problema aqui, você provavelmente já pegou bem a ideia do Scrum… O time de desenvolvimento não mais se encontra blindado e será constantemente influenciado por fatores externos, tais como: cliente, diretores, gerentes ou qualquer nível hierárquico que sua empresa possa possuir. Isso é grave… Isso é muito grave!&lt;/p&gt;

&lt;p&gt;Se você pode evitar essa situação faça!&lt;/p&gt;

&lt;p&gt;Caso contrário futuramente será totalmente irremediável durante a execução do projeto e provavelmente fará com que seu time constantemente acabe passando algumas etapas da iteração por cima de outras, levando à um projeto concluído com baixa qualidade e que possivelmente gerará dores de cabeça para seu cliente e por consequência para você em um futuro muito próximo.&lt;/p&gt;

&lt;p&gt;Obrigado por ler até aqui, espero ter apresentado pontos a serem analisados por você e evitados! Caso tenha mais algum ponto crítico que acha interessante que seja adicionado a esse artigo, elogio ou crítica deixe um comentário 😀&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Champfrogs: 10 desejos intrínsecos</title>
      <link>https://tableless.github.io/hugo-public/champfrogs-10-desejos-intrinsecos/</link>
      <pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/champfrogs-10-desejos-intrinsecos/</guid>
      <description>

&lt;p&gt;Como eu não quero que você seja um desenvolvedor robô, que só executa funções predeterminadas, sem pensar nos processos e nas metas da empresa onde trabalha, quero começar a abordar alguns posts sobre um assunto que não está diretamente ligado à prática de desenvolvimento web: gestão agile. Seria interessante fazer alguns devs entenderem melhor como as coisas funcionam em ambientes onde equipes e empresas aplicam métodos ágeis para gerir os projetos e pessoas.&lt;/p&gt;

&lt;p&gt;Um dos segredos é: entenda que cada ser humano tem desejos. Estes desejos podem ser parecidos com o seu, o que torna mais fácil de entender a outra pessoa, ou não, o desejo do próximo pode ser muito diferente do seu. Quando você conhece os desejos de cada um dos integrantes do time, você gerencia melhor as expectativas. Inclusive as suas. Se você não é gestor, mas deixa claro qual o seu desejo, você facilita o caminho do gestor para suprir suas expectativas. Entende? Tudo flui muito melhor.&lt;/p&gt;

&lt;p&gt;Existem várias formas de categorizar os desejos das pessoas. Você já deve ter ouvido falar da &lt;a href=&#34;http://en.wikipedia.org/wiki/Maslow&#39;s_hierarchy_of_needs&#34;&gt;Pirâmide de Maslow&lt;/a&gt;, que é bem conhecida. A que vamos citar aqui é bastante nova e chama-se &lt;a href=&#34;http://www.noop.nl/2013/02/champfrogs.html&#34;&gt;Champfrogs&lt;/a&gt;. Ele é uma adaptação de uma outra categorização que inclui 16 desejos. Mas aí abrange muitos outros assuntos. Vamos ficar com os 10 para iniciar. Champfrogs é um acrônimo formado pelas iniciais das palavras:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Curiosity:&lt;/strong&gt; Eu tenho a vontade de investigar algo e pensar sobre o assunto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Honor:&lt;/strong&gt; Eu sinto orgulho de como minhas características pessoais são refletidas no trabalho que executo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Acceptance:&lt;/strong&gt; As pessoas da minha equipe ou da empresa aprovam o que eu faço e quem eu sou.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mastery:&lt;/strong&gt; Meu trabalho desafia minha competência, mas ainda está dentro das minhas habilidades.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Power:&lt;/strong&gt; Gosto de influenciar o que acontece no trabalho e as pessoas que estão a minha volta.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Freedom:&lt;/strong&gt; Eu sou independente no meu trabalho e nas minhas responsabilidades.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relatedness:&lt;/strong&gt; Tenho bons contatos sociais em meu ambiente de trabalho.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Order:&lt;/strong&gt; Gosto de regras e políticas que estabilizam o ambiente onde trabalho.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Minha proposta de vida é refletida no trabalho que faço.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status:&lt;/strong&gt; Minha posição é boa e tenho reconhecimento das pessoas que trabalham comigo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estes são alguns dos desejos ou motivações que você e cada integrante da equipe podem ter. É importante conhecê-los e identificá-los de forma que sejam trabalhados para o bem.&lt;/p&gt;

&lt;h2 id=&#34;por-que-conhecer-seus-desejos&#34;&gt;Por que conhecer seus desejos?&lt;/h2&gt;

&lt;p&gt;Para você saber o que quer da vida, basicamente. Se você precisa de regras mas você trabalha em um lugar que é uma zona, por que continuar trabalhando ali? Se você trabalha em um lugar cujo seu trabalho não te dá orgulho, por qualquer motivo que seja, não é melhor tentar consertar o que está errado ou sair e encontrar outro trampo?&lt;/p&gt;

&lt;p&gt;Eu sei que talvez eu esteja sendo muito prático ao dizer &amp;#8220;saia desse emprego e encontre outro&amp;#8221;, mas talvez essa seja a solução. Ao meu ver há duas maneiras de consertar algo que está errado em seu trabalho: ou você abre as cartas com o time e com o gestor contando sua insatisfação e iniciando um processo de comunicação que pode culminar na resolução do problema ou pega suas coisas cai fora. Não tem mágica. Se você continuar no seu trabalho, fazendo e vendo sempre as mesmas coisas erradas, isso vai te consumir cada vez mais. Você vai ficar doente, acredite. Sem contar que você estará sendo o maior mão na bunda que já existiu. Sabe que está errado, poderia ajudar a consertar, mas prefere ficar ali, parado, sentado em cima das próprias mãos.&lt;/p&gt;

&lt;h2 id=&#34;como-descobrir-as-motivações-da-equipe&#34;&gt;Como descobrir as motivações da equipe?&lt;/h2&gt;

&lt;p&gt;Tem um exercício muito legal chamado &lt;strong&gt;Moving Motivators&lt;/strong&gt;. Esse jogo é interessante para descobrir como estão as motivações dos membros da equipe. Isso te dará um parâmetro melhor sobre o que cada pessoa precisa ou busca. Funciona assim:&lt;/p&gt;

&lt;p&gt;Para fazer esse exercício, baixe as &lt;a href=&#34;http://www.management30.com/wp-content/uploads/2012/09/04-Moving-Motivators-Letter-v2.00.pdf&#34;&gt;cartas do jogo aqui&lt;/a&gt;. São cartas com as motivações que listamos acima.&lt;/p&gt;

&lt;h3 id=&#34;segundo-do-menos-importante-para-o-mais-importante&#34;&gt;Segundo: Do menos importante para o mais importante&lt;/h3&gt;

&lt;p&gt;Neste passo o participante irá organizar as cartas ordenando as suas motivações do menos importante para o mais importante.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/moving-motivators1.jpg&#34; alt=&#34;moving-motivators1&#34; width=&#34;500&#34; height=&#34;95&#34; class=&#34;alignnone size-full wp-image-39193&#34; srcset=&#34;uploads/2013/10/moving-motivators1.jpg 500w, uploads/2013/10/moving-motivators1-329x62.jpg 329w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Você vai perceber que membros da equipe tem resultados totalmente diferentes. O que pode ser muito confuso inicialmente. Isso faz você perceber que cada individuo precisa de um &amp;#8220;ambiente ideal&amp;#8221;, muito diferente do outro membro. Às vezes uma das motivações mais importantes para um membro é a motivação menos importante para outro. Como manter um ambiente estável sabendo dessa informação? Eis a questão.&lt;/p&gt;

&lt;h3 id=&#34;terceiro-como-o-trabalho-afeta-as-motivações&#34;&gt;Terceiro: Como o trabalho afeta as motivações&lt;/h3&gt;

&lt;p&gt;Agora, mantendo a mesma ordem das cartas, o integrante vai movimentar para cima ou para baixo as desejos/motivações que são mais ou menos afetados quando relacionados ao ambiente de trabalho.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/10/moving-motivators2.jpg&#34; alt=&#34;moving-motivators1&#34; width=&#34;500&#34; height=&#34;95&#34; class=&#34;alignnone size-full wp-image-39193&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Por exemplo: se você acha que seu trabalho não instiga sua curiosidade, sua vontade de pesquisa para aprender novas coisas e etc, mova CURIOSITY para baixo. Mas se você acha que o seu trabalho aumenta sua liberdade, te dando mais autonomia, mova FREEDOM para cima.&lt;/p&gt;

&lt;h3 id=&#34;quarto-reflita&#34;&gt;Quarto: reflita&lt;/h3&gt;

&lt;p&gt;Eu sei que esse exercício pode ser muito mais interessante para o gestor do que para os integrantes do time. Mas para ambos mostra um parâmetro interessante sobre o ambiente de trabalho e como nos sentimos nele.&lt;/p&gt;

&lt;p&gt;Quando há muitos desejos se movendo para baixo, percebemos que é hora de fazer alguma coisa para melhorar estes pontos.&lt;/p&gt;

&lt;p&gt;Um dos maiores desafios atualmente no mercado de desenvolvimento web é o de reter talentos. Sempre há alguém que paga mais ou que tem um ambiente de trabalho melhor e mais desafiador. Fazer os desenvolvedores ficarem aonde estão é um desafio enorme. Esse exercício ajuda a entender melhor como o time enxerga o ambiente do seu trabalho. Fica mais fácil reter se você entende a pessoa por trás do dev.&lt;/p&gt;

&lt;p&gt;Você como membro de time, também enxerga melhor como o ambiente em que você trabalha pode te motivar ou desmotivar. Talvez você esteja desmotivado e nem saiba. Talvez você esteja com uma oportunidade de ouro e não tenha percebido ainda. Exercícios assim vão te ajudar nessa orientação.&lt;/p&gt;

&lt;h3 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h3&gt;

&lt;p&gt;Foi um dos primeiros artigos sobre gestão ágil aqui no Tableless. Talvez venham mais se vocês gostarem. Deixe seu comentário aí embaixo sobre suas experiências e se vale ou não a pena trazermos em pauta esses assuntos.&lt;/p&gt;

&lt;h4 id=&#34;referências&#34;&gt;Referências:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.management30.com/product/moving-motivators/&#34;&gt;Moving Motivators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.noop.nl/2011/09/moving-motivators-free-exercise.html&#34;&gt;Moving Motivators Exercise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>