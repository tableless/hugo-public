<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frame Player on Tableless</title>
    <link>http://tableless.com.br/tags/frame-player/index.xml</link>
    <description>Recent content in Frame Player on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/frame-player/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Frame Player: Indo além da tag video em dispositivos móveis</title>
      <link>http://tableless.com.br/frame-player-indo-alem-da-tag-video-em-dispositivos-moveis/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/frame-player-indo-alem-da-tag-video-em-dispositivos-moveis/</guid>
      <description>

&lt;p&gt;Desde que o Flash se tornou obsoleto em dispositivos móveis (ou em outras palavras: quando a Apple o baniu do iOS) a forma de manipular arquivos de media ficou cada vez mais tendenciosa para uso das tags &lt;code&gt;audio&lt;/code&gt; e &lt;code&gt;video&lt;/code&gt;, consolidando o padrão Web. De toda forma o Flash ainda sobrevive bem neste ramo (prova disso é o YouTube que mantém seu player), mas este não será o foco deste artigo. O ponto mais importante que iremos tratar aqui é a reprodução de vídeos usando HTML5 em smartphones e tablets.&lt;/p&gt;

&lt;p&gt;Será que nos dias de hoje todos os problemas envolvendo arquivos de media em dispositivos móveis foram resolvidos, ou novos problemas foram criados?&lt;/p&gt;

&lt;p&gt;Sistemas operacionais móveis tendem a implementar especificidades, seja por limitações dos dispositivos ou algo envolvendo a usabilidade do sistema, o fato é que algumas vezes essas implementações não obedecem especificações, criando barreiras e limitando assim o desenvolvimento de aplicações web.&lt;/p&gt;

&lt;h3 id=&#34;os-problemas-com-a-tag-video-criados-pelos-sistemas-operacionais-móveis&#34;&gt;Os Problemas com a Tag Video Criados pelos Sistemas Operacionais Móveis&lt;/h3&gt;

&lt;p&gt;Quando inserimos um vídeo em uma página web utilizando a tag &lt;code&gt;video&lt;/code&gt; esperamos que o navegador fique responsável por carregar seu player nativo (exibindo seus controles caso seja utilizado o atributo &lt;code&gt;controls&lt;/code&gt;), até então nenhum problema visto que praticamente &lt;a href=&#34;http://caniuse.com/#search=video&#34; target=&#34;_blank&#34;&gt;todos os navegadores modernos&lt;/a&gt; (inclusive de dispositivos móveis) oferecem suporte, claro que cada um serão necessários os vários formatos de vídeo (codec) para poder reproduzir em diferentes navegadores, mas o grande problema não esta ai, e sim no comportamento que este player nativo toma quando carregado em dispositivos móveis.&lt;/p&gt;

&lt;p&gt;A especificação da tag &lt;code&gt;video&lt;/code&gt; define diversos &lt;a href=&#34;http://www.w3.org/TR/html-markup/video.html#video-attributes&#34; target=&#34;_blank&#34;&gt;atributos&lt;/a&gt;, vamos nos atentar para alguns em específico: &lt;code&gt;autoplay&lt;/code&gt;, &lt;code&gt;preload&lt;/code&gt; e &lt;code&gt;loop&lt;/code&gt;. Iremos analisar cada um deles e seu comportamento nos próximos parágrafos.&lt;/p&gt;

&lt;p&gt;O atributo &lt;code&gt;autoplay&lt;/code&gt; tem a função de iniciar a reprodução um vídeo automaticamente sem a necessidade de interação do usuário, analisando o &lt;a href=&#34;https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html&#34; target=&#34;_blank&#34;&gt;guia da Apple para o Safari&lt;/a&gt; na seção de Audio e Vídeo em HTML5 temos um tópico sobre este assunto, no qual relata que os métodos &lt;code&gt;play()&lt;/code&gt; e &lt;code&gt;load()&lt;/code&gt; são desabilitados em dispositivos iOS, exceto quando ocorre uma ação do usuário, ou seja, o atributo &lt;code&gt;autoplay&lt;/code&gt; não funciona, assim como o seguinte código também não irá funcionar:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;#060;body onload=&#34;document.myMovie.play()&#34;&amp;#062;
&lt;/pre&gt;

&lt;p&gt;O atributo &lt;code&gt;preload&lt;/code&gt;, responsável por carregar parte do arquivo de media junto da página e antes de sua reprodução, tem comportamento semelhante ao &lt;code&gt;autoplay&lt;/code&gt;. Neste caso pode ser levado em consideração esta ação, pois dispositivos móveis se conectam por redes de celulares, que muitas vezes cobram por dados trafegados.&lt;/p&gt;

&lt;p&gt;É possível utilizar o atributo &lt;code&gt;loop&lt;/code&gt; em dispositivos móveis, porém para garantir suporte a todos os dispositivos, é necessário incluir o hack abaixo, pois algumas versões (ex: iOS abaixo da versão 5) não suportam este atributo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var video = document.getElementById(&#39;your-video-elem&#39;);

    function loopVideo(){
        video.currentTime = 0.1;
        video.play();
    }

    video.addEventListener(&#39;ended&#39;, loopVideo, false);
&lt;/pre&gt;

&lt;p&gt;Uma outra grande limitação é o controle de volume, ao tentar recuperar o valor atual do volume por JavaScript sempre será retornado 1, e este valor não pode ser alterado por código, tornando possível alterar o volume ou colocar no mudo apenas com interação do usuário pelos botões físicos. Assim como o volume também não é possível definir valores para a propriedade &lt;code&gt;playbackRate&lt;/code&gt;, tornando impossível implementar slow motion ou fast foward.&lt;/p&gt;

&lt;p&gt;Dispositivos móveis ao encontrarem um arquivo de vídeo em páginas web, renderizam esse quadro definindo uma imagem de placeholder por cima da imagem carregada pelo atributo &lt;code&gt;cover&lt;/code&gt; (quando definida), esta ação torna inviável o uso de vídeos como background por exemplo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://f.cl.ly/items/1L3Y1p1r1Y3B1E0l0W11/ios-video-placeholder.png&#34; width=&#34;338&#34; height=&#34;600&#34; alt=&#34;iOS video placeholder image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;iOS video placeholder image (a big play icon on center).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O elemento &lt;code&gt;canvas&lt;/code&gt; possui um método &lt;code&gt;drawImage&lt;/code&gt; em sua API, no qual permite inserir imagens, vídeos e até mesmo outro elemento canvas, porém este método &lt;a href=&#34;https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/PuttingVideoonCanvas/PuttingVideoonCanvas.html&#34; target=&#34;_blank&#34;&gt;não é suportado em dispositivos iOS&lt;/a&gt;, a Apple afirma que este método utiliza muitos recursos do sistema, no Safari Desktop o método funciona perfeitamente.&lt;/p&gt;

&lt;p&gt;Por fim chegamos em dois fatores que considero mais limitantes, por serem impossíveis de serem solucionados. O primeiro fator é: vídeos em smartphones não podem ser carregados inline, somente em tela cheia. Já o outro fator é: não podemos reproduzir dois ou mais arquivos de aúdio ou vídeo simultaneamente, apenas um arquivo é permitido por vez, simplesmente por opção das empresas que desenvolvem os sistemas móveis.&lt;/p&gt;

&lt;h3 id=&#34;uma-alternativa-para-vídeos-e-gifs&#34;&gt;Uma Alternativa para Vídeos e Gifs&lt;/h3&gt;

&lt;p&gt;Considerando os problemas relatados anteriormente, quando surge a necessidade de desenvolver uma aplicação web baseada em videos para smartphones, isto é, uma aplicação que tem como base arquivos de vídeo com elevado nível de personalização e interação com o usuário, é perfeitamente possível de ser desenvolvida para navegadores desktop, porém inumeros problemas serão apresentados em dispositivos móveis. Um bom case para exemplificar este tipo de aplicação é o &lt;a href=&#34;https://vimeo.com/79706014&#34; target=&#34;_blank&#34;&gt;site que a Apple desenvolveu em 2012 para promover seus novos produtos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Criar animações de imagens similares a um vídeo é uma tarefa que o GIF já faz, porém este tipo possui &lt;a target=&#34;_blank&#34; href=&#34;http://stories4all9858180.wordpress.com/2012/12/05/advantages-and-limitations-of-gifs/&#34;&gt;diversas limitações&lt;/a&gt;, tendo como principal a profundidade de cor máxima: 256 bit, o que torna a qualidade da imagem baixa, inviabilizando seu uso em dispositivos com alta resolução de tela.&lt;/p&gt;

&lt;p&gt;Pensando nestes fatos surgiu a necessidade de criar uma alternativa que pudesse solucionar os problemas do vídeo e do GIF em dispositivos móveis, algo que pudesse reproduzir imagens em sequência (com uma certa qualidade) e que pudesse ser personalizado com a necessidade da aplicação, deixando isso a cargo do desenvolvedor. Esta necessidade é tão real que a Apple, em seu site citado acima, &lt;a href=&#34;http://www.tuaw.com/2012/10/16/how-apples-iphone-5-website-works/&#34; target=&#34;_blank&#34;&gt;criou uma alternativa própria&lt;/a&gt; para desenvolver estas animações sem utilizar vídeo e garantir suporte em todos os tipos de dispositivos, esta solução é bem próxima do que será discutido a seguir, existe uma &lt;a target=&#34;_blank&#34; href=&#34;https://docs.google.com/document/pub?id=1GWTMLjqQsQS45FWwqNG9ztQTdGF48hQYpjQHR_d1WsI&#34;&gt;análise minuciosa&lt;/a&gt; sobre esta técnica utilizada pela Apple.&lt;/p&gt;

&lt;h3 id=&#34;criando-um-player-de-frames&#34;&gt;Criando um Player de Frames&lt;/h3&gt;

&lt;p&gt;A necessidade comentada no parágrafo anterior teve seus requisitos bem definidos: reproduzir animações baseadas em imagens em uma certa taxa de velocidade, que tenha bom desempenho em dispositivos móveis, que seja personalizável e possa ter mais de uma instância executando em uma mesma página. Surgiu ai então o &lt;a href=&#34;http://vagnervjs.github.io/frame-player/&#34; target=&#34;_blank&#34;&gt;Frame Player&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;o-que-é-o-frame-player&#34;&gt;O que é o Frame Player?&lt;/h4&gt;

&lt;p&gt;O Frame Player é uma biblioteca JavaScript desenvolvida por &lt;a href=&#34;https://twitter.com/vagnervjs&#34; target=&#34;_blank&#34;&gt;Vagner Santana&lt;/a&gt; (eu) para reproduzir videos utilizando imagens no lugar de tipos comuns deste formato de media (i.e.: .mp4, .avi). A biblioteca se encarrega de mostrar uma sequência de imagens em uma determinada taxa de velocidade (fps), desta forma não é necessário utilizar a tag video.&lt;/p&gt;

&lt;h4 id=&#34;transformando-vídeo-em-imagens&#34;&gt;Transformando Vídeo em Imagens&lt;/h4&gt;

&lt;p&gt;Para que um vídeo seja reproduzido no Frame Player, é necessário extrair cada frame deste arquivo genrando uma sequência de imagens.&lt;/p&gt;

&lt;p&gt;Para gerar essa sequência de imagens a documentação do Frame Player instrui o uso do software &lt;a href=&#34;http://www.ffmpeg.org/&#34; target=&#34;_blank&#34;&gt;FFmpeg&lt;/a&gt; para conversão, utilizando o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;$ ffmpeg -i video.mp4 -an -f image2 &#34;%d.jpg&#34;
&lt;/pre&gt;

&lt;p&gt;Onde &lt;code&gt;video.mp4&lt;/code&gt; é o arquivo original em formato de vídeo, e &lt;code&gt;%d.jpg&lt;/code&gt; o destino final dos arquivos de imagens que serão gerados com nome em ordem numérica.&lt;/p&gt;

&lt;p&gt;Após a extração dos frames, cada imagens deverá ser codificada em &lt;code&gt;base64&lt;/code&gt; utilizando &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/data_URIs&#34; target=&#34;_blank&#34;&gt;Data URI Scheme&lt;/a&gt; e armazenadas todas em um único arquivo &lt;code&gt;JSON&lt;/code&gt;. Para isso junto do Frame Player foi desenvolvido um &lt;code&gt;script&lt;/code&gt; (disponível em PHP e Node.js) que codifica e cria um arquivo de saída &lt;code&gt;JSON&lt;/code&gt;. O script é executado em linha de comando da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;# Option 1: Node.js
    $ cd converter
    $ node app.js frameStart frameEnd folder/to/imgs/ json/video.json

    # Option 2: PHP
    $ php to_data_uri.php frameStart frameEnd folder/to/imgs/ json/video.json
&lt;/pre&gt;

&lt;p&gt;Os parâmetros &lt;code&gt;frameStart&lt;/code&gt; e &lt;code&gt;frameEnd&lt;/code&gt; deverá ser um valor numérico representando o frame inicial do vídeo e o frame final respectivamente. O caminho &lt;code&gt;folder/to/imgs/&lt;/code&gt; será a endereço para a pasta contendo a sequência de imagens geradas e &lt;code&gt;json/video.json&lt;/code&gt; deve ser o caminho para o arquivo &lt;code&gt;JSON&lt;/code&gt; de saída.&lt;/p&gt;

&lt;p&gt;Passada por essas duas etapas teremos transformado nosso vídeo em um arquivo &lt;code&gt;JSON&lt;/code&gt; que será processado pela biblioteca.&lt;/p&gt;

&lt;h4 id=&#34;por-dentro-do-frame-player&#34;&gt;Por Dentro do Frame Player&lt;/h4&gt;

&lt;p&gt;O código do Frame Player é todo escrito em JavaScript puro utilizando o paradigma de orientação a objetos baseado em protótipo, sem uso de nenhuma depêndencia. Desenvolver esta biblioteca usando orientação a objetos foi uma decisão primordial para viabilzar a capacidade de possuir multiplas instâncias do player em uma mesma página.&lt;/p&gt;

&lt;p&gt;Para utilizar a biblioteca em uma página, é necessário carregar dois arquivos referêntes ao código JavaScript e a folha de estilo do player:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;#060;link rel=&#34;stylesheet&#34; href=&#34;src/css/frameplayer.css&#34;&amp;#062;
    &amp;#060;script src=&#34;src/js/frameplayer.js&#34;&amp;#062;
&lt;/pre&gt;

&lt;p&gt;A primeira versão da biblioteca não contava com o arquivo CSS adicional, porém a possibilidade de carregar a folha de estilo em um arquivo separado permite ao utilizador ir além e personalizar qualquer elemento do player e ainda desacoplar o código CSS do JavaScript.&lt;/p&gt;

&lt;p&gt;Com os arquivos carregados, é necessário definir em seu código HTML o elemento que irá representar o player:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;#060;div id=&#34;my-player&#34; class=&#34;frameplayer&#34; data-vidsrc=&#34;videos/video.json&#34;&amp;#062;
&lt;/pre&gt;

&lt;p&gt;A classe &lt;code&gt;frameplayer&lt;/code&gt; é responsável por definir o estilo ao player, o &lt;code&gt;id&lt;/code&gt; pode ser qualquer nome definido pelo utilizador e o atributo &lt;code&gt;data-vidsrc&lt;/code&gt; deverá receber como valor o camaminho para o arquivo JSON gerado previamente.&lt;/p&gt;

&lt;p&gt;O player possui uma barra de controle do vídeo onde é inserido os botões de ação como play e pause. Essa barra é opcional ao utilizador, podendo ser desabilitada facilmente pelo parâmetro de opções. A contrução da barra de controle é feita por um método especifico da biblioteca (&lt;code&gt;FramePlayer.prototype.createControlsBar&lt;/code&gt;), em caso de desabilitado pelo utilizador a barra não é construida, evitando assim criar código de marcação que não será utilizado.&lt;/p&gt;

&lt;p&gt;A biblioteca possui dois parâmetros, o primeiro é o &lt;code&gt;id&lt;/code&gt; do elemento &lt;code&gt;div&lt;/code&gt; definido na marcação que será responsável por armazenar o player. Já o segundo parâmetro é referente as opções do player, esse parâmetro é um objeto JavaScript que possui a seguinte estrutura:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var options = ({
        &#39;rate&#39;: 30,
        &#39;controls&#39;: false,
        &#39;autoplay&#39;: true,
        &#39;width&#39;: &#39;640px&#39;,
        &#39;height&#39;: &#39;390px&#39;,
        &#39;radius&#39;: &#39;50%&#39;
    });
&lt;/pre&gt;

&lt;p&gt;Abaixo constam as informaçõe de cada atributo do parâmetro de opções:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate&lt;/code&gt;: valor da taxa de velocidade de reprodução. O valor padrão é 20.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;controls&lt;/code&gt;: habilita ou desabilita a barra de controles. O valor padrão é true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoplay&lt;/code&gt;: permite a execução automática do vídeo após ser carregada a página. Seu valor padrão é false.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;: valor referente a largura do player em pixel. O valor padrão é 480px.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;height&lt;/code&gt;: valor referente a altura do player em pixel. O valor padrão é 320px.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;radius&lt;/code&gt;: valor referente a borda arredondada do player. O valor padrão é null, portanto, sem bordas arredondadas por padrão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Após ser definida as opções, o utilizador deverá instanciar o Frame Player da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var player = new FramePlayer(&#39;my-player&#39;, options);
        player.play();
&lt;/pre&gt;

&lt;p&gt;Deve-se chamar o método construtor do Frame Player passando como parâmetro o &lt;code&gt;id&lt;/code&gt; do elemento e a variável com as opções. Após isso basta chamar o método play para executá-lo.&lt;/p&gt;

&lt;h4 id=&#34;o-método-play&#34;&gt;O Método Play&lt;/h4&gt;

&lt;p&gt;O método play &lt;code&gt;(FramePlayer.prototype.play)&lt;/code&gt; pode ser considerado o coração do Frame Player, pois ele é o responsável pela troca em sequência das imagens, levando em consideração a taxa de velocidade. A primeira ação deste método é carregar o arquivo JSON, quando é terminado o carregamento, executa-se o trecho código abaixo, que faz com que os frames sejam trocados.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;setInterval(function() {
        if(!player.paused){
            i++;
            if (i &amp;gt;= jsonVideoFile.frames.length) {
                i = 0;
            }
            img.src = jsonVideoFile.frames[i];
        }
    }, Math.round(1000 / player.rate));
&lt;/pre&gt;

&lt;p&gt;Acima podemos observar que a cada intervalo define-se um novo valor para o atributo &lt;code&gt;src&lt;/code&gt; do elemento imagem, este novo valor refere-se a ao próximo frame do vídeo. Dessa forma, conforme muda-se o valor de tempo do intervalo a velocidade da troca de imagens é afetada.&lt;/p&gt;

&lt;h4 id=&#34;base64-vs-image-file&#34;&gt;Base64 vs Image File&lt;/h4&gt;

&lt;p&gt;Uma grande questão surgiu após o lançamento da biblioteca: o uso de imagens codificadas em Base46 ser lento, pois o browser tem o trabalho de decodificar essa string, e por ser tratar de muitas imagens, este trabalho ficaria pesado em dispositivos móveis. Para saber mais sobre este fato tivemos um &lt;a href=&#34;http://www.mobify.com/blog/data-uris-are-slow-on-mobile&#34; target=&#34;_blank&#34;&gt;bom artigo como referência&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Com essa questão levantada, foi desenvolvida uma versão utilizando os arquivos de imagens em vez de Base64 URI, e a melhora do desempenho foi significativa.&lt;/p&gt;

&lt;p&gt;Você pode conferir mais sobre isso nesta &lt;a href=&#34;https://github.com/vagnervjs/frame-player/issues/4&#34; target=&#34;_blank&#34;&gt;issue&lt;/a&gt;. A versão baseada em arquivos de imagens está disponivel em uma &lt;a href=&#34;https://github.com/vagnervjs/frame-player/tree/img-tag&#34; target=&#34;_blank&#34;&gt;branch especifica&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h3&gt;

&lt;p&gt;Em nenhum momento o objetivo do desenvolvimento desta biblioteca foi eliminar o uso da tag &lt;code&gt;video&lt;/code&gt; em dispositivos móveis, muito pelo contrário, quando é necessário carregar arquivos de video com objetivo de apresentação da media apenas, é extremamente recomendável o uso dessa tag específica para isso. O real objetivo da bibliteca é criar uma alternativa para carregar animações em video quando é necessário integração com o restante da página, viabilizando múltiplos carregamento e personalização.&lt;/p&gt;

&lt;p&gt;A biblioteca Frame Player encontra-se em uma versão estável para uso em dispositivos móveis e mostra-se como uma boa solução para videos curtos, o maior ponto positivo é a liberdade que o desenvolvedor ganha para tornar a página dinâmica com o uso de videos nos dispositivos móveis, podendo desviar do player nativo da plataforma, e sem a dependencia do usuário dar o play para reproduzir o vídeo, o player conta ainda com um método específico para inserir filtros (grayscale, sepia, invert) nas imagens do vídeo.&lt;/p&gt;

&lt;p&gt;Existem ainda alguns trabalhos futuros para o Frame Player como buffer, compressão de imagens baseando-se em keyframes e até mesmo aúdio.&lt;/p&gt;

&lt;p&gt;Confira o &lt;a href=&#34;http://vagnervjs.github.io/frame-player&#34; target=&#34;_blank&#34;&gt;site&lt;/a&gt; do Frame Player e seu &lt;a href=&#34;https://github.com/vagnervjs/frame-player&#34; target=&#34;_blank&#34;&gt;repositório no Github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;referências&#34;&gt;Referências:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://www.w3.org/TR/html-markup/video.html#video-attributes&#34;&gt;HTML Video Element specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html&#34;&gt;Safari HTML5 Audio and Video Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://blog.millermedeiros.com/unsolved-html5-video-issues-on-ios/&#34;&gt;Unsolved HTML5 video issues on iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>