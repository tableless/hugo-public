<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Responsivo on Tableless</title>
    <link>http://tableless.com.br/tags/responsivo/index.xml</link>
    <description>Recent content in Responsivo on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/responsivo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Material Design Lite: O framework do Google</title>
      <link>http://tableless.com.br/material-design-lite-o-framework-google/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/material-design-lite-o-framework-google/</guid>
      <description>&lt;p&gt;Em 2014 o Google apresentou o Material Design: um guia para redefinir o visual de aplicativos. Vários aplicativos aderiram ao Material Design, como por exemplo, o WhatsApp, que mudou por completo o visual.&lt;/p&gt;

&lt;p&gt;Para facilitar ainda mais a vida do usuário, o Google &lt;a href=&#34;https://medium.com/google-developers/introducing-material-design-lite-3ce67098c031&#34; target=&#34;_blank&#34;&gt;anunciou &lt;/a&gt;uma ferramenta para introduzir o Material Design em websites, chamado de &lt;a href=&#34;http://www.getmdl.io/&#34; target=&#34;_blank&#34;&gt;Material Design Lite (MDL).&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assim como qualquer outro &lt;em&gt;framework&lt;/em&gt;, o MDL oferece uma documentação e vários exemplos para facilitar a aplicação em websites. O nome &amp;#8220;Lite&amp;#8221; &amp;#8211;  segundo o Google &amp;#8211; dá-se pela extrema facilidade, pouca dependência e também pelo tamanho do pacote (aproximadamente 27KB gzipped).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MDL torna fácil adicionar o estilo &amp;#8220;&lt;em&gt;material design&lt;/em&gt;&amp;#8221; aos seus websites. (&amp;#8230;) É um framework agnóstico, isto é, significa que pode ser usado com quaisquer uma das ferramentas que surgem rapidamente no horizonte front-end. MDL é leve de carregar e estritamente focado em aplicar o &amp;#8220;&lt;em&gt;material design&lt;/em&gt;&amp;#8221; aos websites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O MDL é compatível com todos os navegadores modernos: Google Chrome, Mozilla Firefox, Opera e o novo Microsoft Edge que acaba de chegar no Windows 10. E claro, o MDL é responsivo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/1-zh2u4rTfC1HqViInpog1Ng.jpeg&#34;&gt;&lt;img class=&#34;alignnone wp-image-49904 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/1-zh2u4rTfC1HqViInpog1Ng.jpeg&#34; alt=&#34;Google Material Design Lite para Website&#34; width=&#34;1092&#34; height=&#34;409&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assim como aconteceu nos aplicativos, é bem provável que veremos daqui para frente muitos websites aderindo a concepção do MDL, e, segundo informações do artigo do Google, o pessoal de lá não vê a hora que isso aconteça.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mal podemos esperar para ver os belos, modernos, sites responsivos que você irá construir com Material Design Lite.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O link do Google Developers para o artigo de divulgação do MDL no Medium é este &lt;a href=&#34;https://medium.com/google-developers/introducing-material-design-lite-3ce67098c031&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formulário responsivo com MailChimp</title>
      <link>http://tableless.com.br/formulario-responsivo-com-mailchimp/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/formulario-responsivo-com-mailchimp/</guid>
      <description>

&lt;p&gt;Há cada dia mais utilizamos serviços disponíveis na web que tem um plano básico e gratuito que permite integrações. Nos últimos meses tenho feito formulários com frequência usando uma abordagem bem simples. Vou mostrar agora como criar um formulário responsivo, integrando com MailChimp e usando jQuery Validate.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos criar o formulário da seguinte maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;CREATE RESPONSIVE FORM WITH INTEGRATE MAILCHIMP&amp;lt;/h1&amp;gt;
  &amp;lt;form id=&#34;form-contact&#34; method=&#34;POST&#34; action=&#34;mailchimp-contact.php&#34;&amp;gt;
    &amp;lt;div class=&#34;input&#34;&amp;gt;
      &amp;lt;label for=&#34;name&#34;&amp;gt;Name&amp;lt;/label&amp;gt;
      &amp;lt;input type=&#34;text&#34; id=&#34;name&#34; name=&#34;name&#34; placeholder=&#34;Your name&#34; required&amp;gt;
    &amp;lt;/div&amp;gt;

    ...
    
    &amp;lt;div class=&#34;input txt&#34;&amp;gt;
      &amp;lt;label for=&#34;message&#34;&amp;gt;Message&amp;lt;/label&amp;gt;
      &amp;lt;textarea id=&#34;message&#34; name=&#34;message&#34; cols=&#34;10&#34; rows=&#34;5&#34; placeholder=&#34;Its message leaves&#34; required&amp;gt;&amp;lt;/textarea&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;buttons&#34;&amp;gt;
      &amp;lt;span class=&#34;form-message&#34;&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;input type=&#34;submit&#34; value=&#34;SEND&#34; /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/section&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-form-mailchimp/demo-only-elements.html&#34; target=&#34;_blank&#34; title=&#34;Ver demo sem style.&#34;&gt;Ver demo sem style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Para cada label e input foi adicionado uma &lt;code&gt;div.input&lt;/code&gt; para inserir uma formatação por grupo.&lt;/p&gt;

&lt;h3 id=&#34;o-form-está-centralizado-com-max-width&#34;&gt;O form está centralizado com max-width:&lt;/h3&gt;

&lt;p&gt;Por ser um elemento &amp;#8216;block&amp;#8217;, vamos definir o tamanho máximo que ele pode ter.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;form {
&amp;nbsp; margin: 0 auto;
&amp;nbsp; max-width: 850px;
&amp;nbsp; padding: 20px 10px;
&amp;nbsp; background-color: rgba(255,255,255,0.4)
}
&lt;/pre&gt;

&lt;h3 id=&#34;o-grupo-div-input-com-50-em-8216-width-8217-do-form&#34;&gt;O grupo div.input com 50% em &amp;#8216;width&amp;#8217; do form:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input {
  float: left;
  width: 48%;
  padding: 0 1% 20px;
  position: relative;
}

.input.txt { width: 98%; } /*textarea 100%*/
&lt;/pre&gt;

&lt;h3 id=&#34;os-labels&#34;&gt;Os labels:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input label {
  display: block;
  padding-bottom: 5px;
  color: #666;
}
&lt;/pre&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input label.error {
  position: absolute;
  right: 18px;
  top: 35px;
  color: #f00;
}&lt;/pre&gt;

&lt;p&gt;O label.error é gerado pelo jQuery validate e adicionado seguido dos campos.&lt;/p&gt;

&lt;h3 id=&#34;os-campos&#34;&gt;Os campos:&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.input input,
.input textarea {
  padding-top: 10px;
  padding-bottom: 9px;
  border: none;
  font-size: 16px;
  font-weight: 100;
  font-family: &#34;Helvetica Neue&#34;, Helvetica, Arial, sans-serif;
}

.input input {
  width: 94%;
  padding-left: 3%;
  padding-right: 3%;
}

.input textarea {
  width: 97%;
  padding-left: 1.5%;
  padding-right: 1.5%;
}&lt;/pre&gt;

&lt;p&gt;Formatamos os campos para ter 100% de tamanho do elemento pai &amp;#8216;div.input&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Sempre que redimensionar não haverá quebras, portanto, responsivo meu amigo.&lt;/p&gt;

&lt;h3 id=&#34;agora-um-capricho-para-resoluções-pequenas&#34;&gt;Agora um capricho para resoluções pequenas.&lt;/h3&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 520px) {
  .input {
    width: 98%;
  }
}&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-form-mailchimp/demo-style-elements.html&#34; target=&#34;_blank&#34; title=&#34;Ver demo com style.&#34;&gt;Ver demo com style.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-jquery-mailchimp&#34;&gt;O jQuery + MailChimp&lt;/h2&gt;

&lt;p&gt;Com o HTML e CSS prontos, vamos adicionar o JavaScript que é fácil. Como dependemos do jQuery e não podemos iniciar de qualquer forma, segue uma estrutura bem legal:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function(){
  var contact = function(){
    var init = function() {
      //initialize code
    };
    
&amp;nbsp;   //more functions

    return {init: init};
  }();

  //jQuery loaded
  $(document).ready(contact.init);
})();&lt;/pre&gt;

&lt;p&gt;Como sabemos exatamente qual função vai executar quando a jQuery carregar, adicionaremos o jQuery Validate no init:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var init = function() {
  $(&amp;#039;#form-contact&amp;#039;).validate({
    rules : {
      name: &#34;required&#34;,
      email: { required: true, email: true },
      phone: { required: true, minlength: 14 },
      company: &#34;required&#34;,
      message: &#34;required&#34;
    },
    messages: {
      name: &#34;*&#34;,
      email: { required: &#34;*&#34;, email: &#34;*&#34; },
      phone: { required: &#34;*&#34;, minlength: &#34;*&#34; },
      company: &#34;*&#34;,
      message: &#34;*&#34;
    }
  });
};&lt;/pre&gt;

&lt;p&gt;Agora que estamos validando todos os campos, que tal adicionar um ajax para deixar nosso formulário bem suave e uma função para exibir mensagens de sucesso ou erro, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var init = function() {
  $(&amp;#039;#form-contact&amp;#039;).validate({
    rules : {
      ...
    },
    messages: {
      ...
    },
    submitHandler: function(form) {
      var $form = $(form);

      var params = {
        name: $form.find(&amp;#039;#name&amp;#039;).val(),
        email: $form.find(&amp;#039;#email&amp;#039;).val(),
        phone: $form.find(&amp;#039;#phone&amp;#039;).val(),
        company: $form.find(&amp;#039;#company&amp;#039;).val(),
        message: $form.find(&amp;#039;#message&amp;#039;).val()
      };

      $.ajax({
        type: $form.attr(&amp;#039;method&amp;#039;),
        url: $form.attr(&amp;#039;action&amp;#039;),
        data: params,
        success: function( data ) {
          if(data == &#34;true&#34;) {
            $form.find(&amp;#039;.input input&amp;#039;).val(&#34;&#34;);
            $form.find(&amp;#039;.input textarea&amp;#039;).val(&#34;&#34;);
            setMessage(&#34;Mission accomplished. &amp;lt;strong&amp;gt;&#34;+ params.email +&#34;&amp;lt;/strong&amp;gt; was successfully added to list.&#34;, &#34;success&#34;);
          } else {
            setMessage(&#34;Mission failed. &amp;lt;strong&amp;gt;&#34;+ params.email +&#34;&amp;lt;/strong&amp;gt; not was added to list.&#34;, &#34;error&#34;);
          }
        },
        error: function( data ) {
          setMessage(&#34;Mission failed in connection. Try again.&#34;, &#34;error&#34;);
        }
      });

      return false;
    }
  });
};

var setMessage = function($message, $type) {
  $(&amp;#039;.form-message&amp;#039;).html($message).addClass($type);

  setTimeout(function(){
    $(&amp;#039;.form-message&amp;#039;).removeClass($type);
  }, 6000);
};
&lt;/pre&gt;

&lt;p&gt;Via &amp;#8216;submitHandler&amp;#8217; do &lt;a href=&#34;http://jQueryvalidation.org/&#34; target=&#34;_blank&#34;&gt;jQuery Validate&lt;/a&gt;, vamos disparar por ajax todos os dados preenchidos e travar o post do form com &amp;#8216;return false&amp;#8217; no final da função. Assim evitamos aquele redirecionamento de post.&lt;/p&gt;

&lt;h3 id=&#34;o-php&#34;&gt;O PHP&lt;/h3&gt;

&lt;p&gt;Como definimos com &amp;#8216;method&amp;#8217; e &amp;#8216;action&amp;#8217; para o nosso formulário, segue o código para resgatar os dados:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
    require_once &amp;#039;MCAPI.class.php&amp;#039;;
    $api = new MCAPI(&amp;#039;casiuach1293kajsc912319203cja23s-us9&amp;#039;);
    $merge_vars = array(&amp;#039;NAME&amp;#039;=&amp;gt;$_POST[&#34;name&#34;], &#39;PHONE&#39;=&amp;gt;$_POST[&#34;phone&#34;], &#39;COMPANY&#39;=&amp;gt;$_POST[&#34;company&#34;], &#39;MESSAGE&#39;=&amp;gt;$_POST[&#34;message&#34;]);
    
    // Submit subscriber data to MailChimp
    // For parameters doc, refer to: http://apidocs.mailchimp.com/api/1.3/listsubscribe.func.php
    $retval = $api-&amp;gt;listSubscribe( &amp;#039;12938asd98&amp;#039;, $_POST[&#34;email&#34;], $merge_vars, &amp;#039;html&amp;#039;, false, true );
    
    if ($api-&amp;gt;errorCode){
        echo &#34;false&#34;;
    } else {
        echo &#34;true&#34;;
    }
?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Dependemos da MCAPI.class que você pode verificar na &lt;a href=&#34;https://apidocs.mailchimp.com/api/example-code/&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt; ou baixar &lt;a href=&#34;https://codeload.github.com/sunarlim/mailchimp-subscribe/zip/master&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;, só lembrando que precisa adicionar sua API Key e List ID.&lt;/p&gt;

&lt;h2 id=&#34;pronto&#34;&gt;PRONTO&lt;/h2&gt;

&lt;p&gt;Nosso formulário é responsivo e integrado ao mailchimp.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://css4html.com.br/demos/responsive-form-mailchimp/&#34; target=&#34;_blank&#34; title=&#34;Veja como ficou o resultado final&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/palloi/responsive-form-mailchimp/&#34; target=&#34;_blank&#34; title=&#34;Veja o código completo no github&#34;&gt;Veja o c&amp;oacute;digo completo no github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Destaques responsivos</title>
      <link>http://tableless.com.br/destaques-responsivos/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/destaques-responsivos/</guid>
      <description>

&lt;p&gt;Hoje criaremos três destaques com um comportamento totalmente responsivo.&lt;/p&gt;

&lt;p&gt;Com um crescimento das SPAs e seguindo o mesmo conceito do artigo anterior, vou passar agora de uma forma simples de como usar, o input radio para transformar nossos destaques em galeria navegável.&lt;/p&gt;

&lt;h2 id=&#34;aproveitando&#34;&gt;Aproveitando&lt;/h2&gt;

&lt;p&gt;Como já temos um header responsivo, vamos continuar com a mesma estrutura até o final dos artigos só com css e html. Se você ainda não viu como criar um &lt;a href=&#34;http://tableless.com.br/header-responsivo-somente-com-css/&#34; title=&#34;Header responsivo somente com css&#34; target=&#34;_blank&#34;&gt;header responsivo, clique aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Vamos iniciar realocando a foto do Chaves para um novo formato:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-2.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Pensando na Paty&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves-3.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Quero tanto esse sanduiche iche iche&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Temos um simples html para 3 itens, deixei os nome das classes mais compreensível e semântico, observado pelo amigo Shankar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-header-only-css/demo-only-elements.html&#34; target=&#34;_blank&#34;&gt;Ver demo sem style&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Sempre pensando no responsivo, vamos deixar nossos itens em % para 3 colunas seguindo dessa forma:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-item {
  float: left;
  margin: 0 0 0 2%;
  width: 32%;
}

.highlights-item:first-of-type {
  margin-left: 0;
}

.highlights-item img {
  display: block;
  width: 100%;
  margin: 0 0 5px;
}

.highlights-item p {
  font-size: 14px;
  text-align: center;
}
&lt;/pre&gt;

&lt;p&gt;Para cada item apliquei 32% em width + 2% em margin-left, se multiplicarmos por 3 a soma é 102% que passa os 100% representado pelo elemento pai. Por estourar o tamanho do pai o terceiro item sempre cai.&lt;/p&gt;

&lt;p&gt;Então selecionamos o primeiro item para zerar o margin usando o seletor &amp;#8220;:first-of-type&amp;#8221;, por que mais adiante vamos adicionar mais elementos e já evitamos quebrar o css se caso usássemos os &amp;#8220;first-child&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://palloi.github.io/responsive-header-only-css/demo-basic-highlights.html&#34; target=&#34;_blank&#34;&gt;Ver demo com style&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-responsivo&#34;&gt;O RESPONSIVO&lt;/h2&gt;

&lt;p&gt;Já apresentada a forma de como usar os seletores, agora vamos adicionar antes de cada item um input radio, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img1&#34; name=&#34;highlights&#34; checked=&#34;checked&#34; /&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    &amp;lt;img src=&#34;assets/images/chaves.jpg&#34; /&amp;gt;
    &amp;lt;p&amp;gt;Olha o Chaves sorrindo&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  ...
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;o-css-para-transformar&#34;&gt;O CSS PARA TRANSFORMAR&lt;/h2&gt;

&lt;p&gt;Com o html simples para 3 colunas, vamos transformar em uma galeria suave com o &amp;#8216;media screen&amp;#8217;, &amp;#8216;transition&amp;#8217; e &amp;#8216;transform&amp;#8217;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
  .highlights-item {
    width: 100%;
    margin-left: 0;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    visibility: hidden;
    -webkit-transition: all 500ms ease-in-out;
    transition: all 500ms ease-in-out;
    -webkit-transform: scale(0.9);
    -ms-transform: scale(0.9);
    transform: scale(0.9);
  }
}
&lt;/pre&gt;

&lt;p&gt;Nesse css deixei todos os itens com &amp;#8216;position absolute&amp;#8217;, mas isso faz que todo o conteúdo abaixo dele suba ocupando seu espaço. Mas como teremos um ativo vamos resolver logo abaixo.&lt;/p&gt;

&lt;p&gt;Importante lembrar que sempre precisamos de um radio marcado com &amp;#8216;checked&amp;#8217;, quando responder ao responsivo teremos sempre um ativo. Para mostrar o item ativo vamos adicionar as seguintes linhas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 767px) {
   /*checked*/
  .highlights input:checked + div {
    position: relative;
    opacity: 1;
    visibility: visible;
    z-index: 1;
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
&lt;/pre&gt;

&lt;p&gt;O item que estiver ativo, recebe o &amp;#8216;position relative&amp;#8217; para bloquear sua área e outras propriedades para exibir suavemente.&lt;/p&gt;

&lt;p&gt;Como os type&amp;#8217;s dos input&amp;#8217;s são &amp;#8216;radio&amp;#8217;, teremos somente um &amp;#8216;:checked&amp;#8217; por grupo &amp;#8216;name&amp;#8217;.&lt;/p&gt;

&lt;h2 id=&#34;navegação-com-label&#34;&gt;NAVEGAÇÃO COM LABEL&lt;/h2&gt;

&lt;p&gt;Para selecionar cada radio, precisamos relacionar cada label usando o for e vamos adicionar o seguinte html:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;highlights&#34;&amp;gt;
  ...
  &amp;lt;input type=&#34;radio&#34; id=&#34;radio-img3&#34; name=&#34;highlights&#34; /&amp;gt;
  &amp;lt;div class=&#34;highlights-item&#34;&amp;gt;
    ....
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&#34;highlights-buttons&#34;&amp;gt;
    &amp;lt;label for=&#34;radio-img1&#34;&amp;gt;Image 1&amp;lt;/label&amp;gt;
    &amp;lt;label for=&#34;radio-img2&#34;&amp;gt;Image 2&amp;lt;/label&amp;gt;
    &amp;lt;label for=&#34;radio-img3&#34;&amp;gt;Image 3&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Por padrão defino &amp;#8216;display none&amp;#8217; para os botões e com resoluções menores 768px mudamos para &amp;#8216;block&amp;#8217; para exibir.&lt;/p&gt;

&lt;h2 id=&#34;label-e-seu-css&#34;&gt;LABEL E SEU CSS&lt;/h2&gt;

&lt;p&gt;Agora que adicionamos os label&amp;#8217;s que tem a missão dos botões, vamos inserir uma formatação bem simples.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights-buttons {
  display: none;
  clear: both;
  text-align: center;
}

.highlights-buttons label {
  display: inline-block;
  width: 15px;
  height: 15px;
  margin: 0 10px; 
  border-radius: 10px;
  background-color: #ccc;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  text-indent: -9999px;
  -webkit-transition: background-color 300ms ease-in-out;
  transition: background-color 300ms ease-in-out;
}
/*exibindo os botões*/
@media screen and (max-width: 767px) {
  .highlights-buttons {
    display: block;
  }
}
&lt;/pre&gt;

&lt;p&gt;Estamos falando de css puro e sempre precisamos definir o que vai ser feito, veja como aplicar o label ativo nessa estrutura que criamos:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.highlights input:nth-of-type(1):checked ~ .highlights-buttons label:nth-child(1),
.highlights input:nth-of-type(2):checked ~ .highlights-buttons label:nth-child(2),
.highlights input:nth-of-type(3):checked ~ .highlights-buttons label:nth-child(3) {
  background-color: #000;
}
&lt;/pre&gt;

&lt;p&gt;Para evitar a repetição manual a cada novo item, se você usa SASS ou LESS vai tirar de letra com alguma função.&lt;/p&gt;

&lt;h2 id=&#34;e-pronto&#34;&gt;E PRONTO&lt;/h2&gt;

&lt;p&gt;Mais uma vez com poucos elementos e css, conseguimos deixar nossos destaques em uma galeria navegável e responsivo.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Veja como ficou o resultado final&#34; href=&#34;http://palloi.github.io/responsive-header-only-css/responsive-highlights.html&#34; target=&#34;_blank&#34;&gt;Veja como ficou o resultado final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Código completo no github&#34; href=&#34;https://github.com/palloi/responsive-header-only-css&#34; target=&#34;_blank&#34;&gt;Veja o código completo no github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;CONCLUINDO&lt;/h2&gt;

&lt;p&gt;Existe diversas maneiras de aplicar no css e quantidades de itens, espero que todos possam aproveitar um pouco do que foi apresentado.&lt;/p&gt;

&lt;p&gt;É isso ae pessoal, obrigado&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vamos falar de Joomla!?</title>
      <link>http://tableless.com.br/vamos-falar-de-joomla/</link>
      <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/vamos-falar-de-joomla/</guid>
      <description>

&lt;p&gt;Vamos falar um pouco de Joomla? Não é um assunto muito comum aqui no Tableless, mas estamos querendo mudar isso.&lt;/p&gt;

&lt;p&gt;Joomla é conhecido por ter uma interface complicada e bem, digamos, feia. Ele tem mudado bastante e nas novas versões as melhoras são bem visíveis. No início tudo era mais complicado. Eu não chego a ser um dinossauro do Joomla, porém posso contar um pouco da história dele.&lt;/p&gt;

&lt;p&gt;O Joomla surgiu da separação entre a equipe de desenvolvedores do Mambo e a empresa Miro. Devido a várias mudanças organizacionais e consequentemete a diminuição da influência que os desenvolvedores tinham sobre o CMS, os mesmos preocupados com a integridade do projeto e com o futuro dos utilizadores, não aceitaram essas mudanças e em 2005 criaram o Joomla 1.0, open source e a partir do código-fonte do Mambo 4.5.2.&lt;/p&gt;

&lt;p&gt;Eu só comecei a usar o Joomla na versão 1.5 e tenho toda autoridade para entender as torcidas de nariz no início desse texto. O Joomla realmente não era muito amigável, era complicado e muitas vezes de difícil de entender. Erros na interface e na programação eram comuns. Porém as coisas mudaram muito. Hoje o Joomla está na versão 3.0, trazendo melhorias visíveis na interface, principalmente.&lt;/p&gt;

&lt;p&gt;O joomla versão 3, atualmente na versão 3.2.2 sem dúvida alguma veio trazendo mudanças enormes no CMS, podemos chegar a dizer que estamos trabalhando com um novo sistema que foi refeito e repensado.&lt;/p&gt;

&lt;h2 id=&#34;us3r-friendly&#34;&gt;US3R Friendly&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-medium wp-image-41238&#34; alt=&#34;user-friendly&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/user-friendly-588x240.jpg&#34; width=&#34;588&#34; height=&#34;240&#34; srcset=&#34;uploads/2014/02/user-friendly-588x240.jpg 588w, uploads/2014/02/user-friendly-329x134.jpg 329w, uploads/2014/02/user-friendly-660x269.jpg 660w, uploads/2014/02/user-friendly-400x163.jpg 400w, uploads/2014/02/user-friendly.jpg 939w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O novo Joomla veio trazendo novidades desde a sua instalação, que agora é super rápida e simples. A área administrativa foi totalmente reformulada e re-estilizada graças ao incrível trabalho de UI/UX da equipe &lt;a href=&#34;http://ux.joomla.org/&#34;&gt;Joomla JUX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A maior novidade que esta nova versão trouxe foi a adoção do Bootstrap como base. Com essa decisão todas as vantagens de interface do Bootstrap foram incorporadas ao CMS.&lt;/p&gt;

&lt;h2 id=&#34;developer-tools&#34;&gt;Developer Tools&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter size-medium wp-image-41246&#34; alt=&#34;dev-tools&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/02/dev-tools-588x112.jpg&#34; width=&#34;588&#34; height=&#34;112&#34; srcset=&#34;uploads/2014/02/dev-tools-588x112.jpg 588w, uploads/2014/02/dev-tools-329x62.jpg 329w, uploads/2014/02/dev-tools-660x126.jpg 660w, uploads/2014/02/dev-tools-400x76.jpg 400w, uploads/2014/02/dev-tools.jpg 940w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Com a implementação de novas ferramentas agora você pode codificar e criar interfaces gastando muito menos tempo em desenvolvimento. O usuário agora conta com a biblioteca Joomla User Interface (JUI) que oferece uma padronização tanto para o backend quanto para o frontend. Economize tempo também utilizando LESS e jQuery em seus projetos. Conte também com a biblioteca de ícones &lt;a href=&#34;http://icomoon.io/&#34;&gt;Icomoon&lt;/a&gt;, que oferece uma diversidade de ícones inclusive otimizados para retina.&lt;/p&gt;

&lt;p&gt;O Joomla agora também é multi-idiomas, nativo. Você pode criar sites em vários idiomas sem precisar utilizar nenhum plugin. Joomla veio trazendo também algumas mudanças que em outros CMS não eram novidade como instalação de extensões e atualizações pela área administrativa, sem a necessidade de visitar o JED “Joomla Extensions Directory”.&lt;/p&gt;

&lt;p&gt;Por falar em JED, o mesmo disponibiliza hoje 7604 extensões divididas entre gratuitas e comerciais, você pode conferir tudo isso em &lt;a href=&#34;http://www.joomla.org&#34;&gt;www.joomla.org.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para quem não conhecia Joomla, este foi o ponta pé para iniciar o interesse pelo CMS. Para aqueles que querem um pouco mais de informação, vale assistir o vídeo &lt;a href=&#34;http://www.youtube.com/watch?v=0mTrFu4S3Yk&#34; target=&#34;_blank&#34;&gt;Conheça o CMS Joomla (Em Português)&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>