<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rwd on Tableless</title>
    <link>http://tableless.com.br/tags/rwd/index.xml</link>
    <description>Recent content in Rwd on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/rwd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>O futuro chegou: O elemento picture</title>
      <link>http://tableless.com.br/o-futuro-chegou-o-elemento-picture/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-futuro-chegou-o-elemento-picture/</guid>
      <description>

&lt;p&gt;O título é muito tentador, não é? Então, eu apenas estou completando o que a &lt;a href=&#34;http://tableless.com.br/author/daniguerrato/&#34;&gt;Dani Guerrato&lt;/a&gt; disse nesse artigo sobre &lt;a href=&#34;http://tableless.com.br/imagens-responsivas-de-alta-performance/&#34;&gt;Imagens Responsivas (Elemento Picture)&lt;/a&gt;. O &amp;#8220;futuro&amp;#8221;, agora, é nosso querido presente.&lt;/p&gt;

&lt;p&gt;No dia 04/06/2014 o site &lt;a href=&#34;http://alistapart.com/blog/post/testing-responsive-images/&#34;&gt;A List Apart postou um artigo&lt;/a&gt; falando sobre o elemento &lt;em&gt;picture&lt;/em&gt; que era estudado há um bom tempo e foi &lt;strong&gt;finalmente&lt;/strong&gt; implementado para testes no Google Chrome Canary (Browser para testes das mais novas coisas que inventam). E, como ressalva, outros browsers, como o &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=870022&#34;&gt;Firefox&lt;/a&gt;, já estão atrás de adicionar no seu ambiente de testes.&lt;/p&gt;

&lt;h2 id=&#34;o-grande-problema-da-atual-imagem-responsiva&#34;&gt;O grande problema da atual imagem responsiva&lt;/h2&gt;

&lt;p&gt;Antes dessa grande notícia sobre o &lt;code&gt;picture&lt;/code&gt;, outras &amp;#8220;soluções&amp;#8221; eram usadas por desenvolvedores pelo mundo à fora. Uma delas é o famoso e básico &lt;code&gt;max-width: 100%;&lt;/code&gt;. No começo, acharam que era a melhor solução, só esqueceram de lembrar que ele apenas adaptava o tamanho de uma imagem que já era grande, ou seja, o visual ficava bacana, mas o tamanho da requisição ainda era do tamanho nativo da imagem. Por mais que ela estivesse aparecendo bonita, sem quebrar o layout, um usuário que acessava pelo celular ainda carrega aquela imagem de dimensão 800&amp;#215;600.&lt;/p&gt;

&lt;p&gt;Mas, o pessoal não desanimou, e após se deparar com o problema a cima, foi proposto o grande &lt;a href=&#34;https://github.com/scottjehl/picturefill&#34;&gt;picturefill&lt;/a&gt;, que é basicamente uma cópia fiel ao &lt;code&gt;picture&lt;/code&gt;, só que usa uma muleta: Javascript.&lt;/p&gt;

&lt;p&gt;Particularmente dizendo, essa foi a melhor solução encontrada, já que praticamente simulava o nativo &lt;code&gt;picture&lt;/code&gt; de cima em baixo. Porém, muitos ainda reclamavam (por algum motivo) sobre ter que forçar um Javascript para fazer funcionar, sendo que o próprio era levíssimo.&lt;/p&gt;

&lt;h2 id=&#34;a-introdução-ao-picture&#34;&gt;A introdução ao picture&lt;/h2&gt;

&lt;p&gt;O picture foi a solução mais plausível, semântica e dentro dos &amp;#8220;web standards&amp;#8221; proposto pela comunidade. Com o &lt;a href=&#34;https://gist.github.com/Wilto/547b88c657b511fb1dc5&#34;&gt;grande apoio de todos&lt;/a&gt;, conseguiram criar um &lt;a href=&#34;http://www.w3.org/TR/html-picture-element/&#34;&gt;rascunho na própria W3&lt;/a&gt; para futuras discussões sobre o mesmo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mas então, o que há de tão bom nisso?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Esse novo elemento nós dá a &amp;#8220;simples&amp;#8221; opção de escolher qual imagem é mais adequada para cada tamanho de tela que acessar o site. Seja uma TV, Desktop, Smartphone, Tablet, Kindle ou qualquer outra coisa que conseguirmos usar.&lt;/p&gt;

&lt;p&gt;Na prática, faremos algo mais ou menos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture&amp;gt;
   &amp;lt;source media=&#34;(min-width: 500px)&#34; src=&#34;grande.jpg&#34;&amp;gt;
   &amp;lt;source media=&#34;(min-width: 250px)&#34; src=&#34;medio.jpg&#34;&amp;gt;
   &amp;lt;source src=&#34;pequena.jpg&#34;&amp;gt;
   &amp;lt;img src=&#34;pequena.jpg&#34; alt=&#34;&#34;&amp;gt;
   &amp;lt;p&amp;gt;Textos&amp;lt;/p&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Dentro do elemento picture, inserimos o source com os devidos tamanhos a serem &amp;#8220;verificados&amp;#8221; e assim carregar a imagem certa para aquela tela. Pense nisso como uma media querie inline para imagens :). Porém, como alguns navegadores &lt;del&gt;ie&lt;/del&gt; podem não suportar o elemento picture, colocamos um fallback com o antigo elemento img, assim a imagem ainda aparecerá, mesmo sendo num navegador de dinossauros.&lt;/p&gt;

&lt;p&gt;Outra opção também será usar o atributo &lt;code&gt;srcset&lt;/code&gt;, onde é definido várias imagens para cada media, e assim, o navegador &amp;#8220;escolhe&amp;#8221; a melhor imagem para exibir. A adaptação fica mais ou menos assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture&amp;gt;
   &amp;lt;source media=&#34;(min-width: 500px)&#34; srcset=&#34;grande-1.jpg 1x, grande-2.jpg 2x&#34;&amp;gt;
   &amp;lt;source media=&#34;(min-width: 250px)&#34; srcset=&#34;medio-1.jpg 1x, medio-2.jpg 2x&#34;&amp;gt;
   &amp;lt;source srcset=&#34;pequena-1.jpg 1x, pequena-2.jpg 2x&#34;&amp;gt;
   &amp;lt;img src=&#34;pequena-1.jpg&#34; alt=&#34;&#34;&amp;gt;
   &amp;lt;p&amp;gt;Textos&amp;lt;/p&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O legal do srcset, é que com a ajuda do autor e do próprio navegador, a escolha da imagem fica &amp;#8220;inteligente&amp;#8221;. O user-agent analisa a conexão do usuário, questões de experiência de usuário, preferências do usuário entre outras coisas.&lt;/p&gt;

&lt;h2 id=&#34;colocando-em-prática&#34;&gt;Colocando em prática&lt;/h2&gt;

&lt;p&gt;No post do A List Apart, ele ensinam como podemos fazer os testes no elemento picture. Você basicamente tem que:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ter o &lt;a href=&#34;http://www.google.com/intl/en/chrome/browser/canary.html&#34;&gt;Chrome Canary&lt;/a&gt; instalado.&lt;/li&gt;
&lt;li&gt;Apos adquirir o navegador, coloque isso na barra de endereço: &lt;code&gt;chrome://flags/#enable-experimental-web-platform-features&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Clique em &lt;em&gt;enable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Reinicie o navegador.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Após seguir esses passos, entre no Chrome Canary e visite o &lt;a href=&#34;http://www.reidark.com.br/picture.html&#34;&gt;teste que eu fiz do elemento picture já funcionando&lt;/a&gt;. Para testar é simples, vai redimensionando o navegador e dando refresh na página, a imagem vai mudar de acordo com o tamanho da tela. O legal é, caso você tente entrar num navegador normal, vai aparecer a imagem &amp;#8220;Fallback&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Faça o teste você também, é bom já ir pegando as &amp;#8220;manhas&amp;#8221;.&lt;/p&gt;

&lt;h2 id=&#34;permanecendo-com-os-pés-no-chão&#34;&gt;Permanecendo com os pés no chão&lt;/h2&gt;

&lt;p&gt;É muito legal saber que a comunidade conseguiu tudo isso, mas não vamos nos apressar demais. Ainda está em fase de testes, porém &lt;a href=&#34;https://github.com/yoavweiss/Blink/issues&#34;&gt;vamos apoiar e ajudar&lt;/a&gt; ao máximo essa nova fase.&lt;/p&gt;

&lt;p&gt;Queria mostrar que, com a ajuda de todos, conseguiram implementar uma nova funcionalidade ao html extremamente essencial. Agora é questão de tempo para os navegadores mais novos irem experimentando e levando a ideia cada vez mais adiante.&lt;/p&gt;

&lt;h2 id=&#34;levante-a-bandeira&#34;&gt;Levante a bandeira&lt;/h2&gt;

&lt;p&gt;Bem amigos, creio que agora seja uma hora importante para toda a comunidade. Queria vir mostrar que o picture não é mais um simples &amp;#8220;rascunho&amp;#8221; e sim uma importante funcionalidade que será implementando de acordo com o tempo.&lt;/p&gt;

&lt;p&gt;A notícia sobre os testes com o picture foi extremamente excitante, por isso espero que possamos discutir aqui nos comentários o futuro disso.&lt;/p&gt;

&lt;p&gt;Deixarei alguns links úteis, caso queiram ver:&lt;/p&gt;

&lt;p&gt;Post on A List Apart: &lt;a href=&#34;http://alistapart.com/blog/post/testing-responsive-images/&#34;&gt;Testing Responsive Images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Issues about picture and bugs: &lt;a href=&#34;https://github.com/yoavweiss/Blink/issues&#34;&gt;Issues on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Picture on W3: &lt;a href=&#34;http://www.w3.org/TR/html-picture-element/&#34;&gt;The picture element&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ResponsiveImages.org: &lt;a href=&#34;http://responsiveimages.org/&#34;&gt;About picture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É isso ai galera, abraços!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Design Responsivo na prática 2: do layout ao HTML</title>
      <link>http://tableless.com.br/design-responsivo-na-pratica-2-layout-ao-html/</link>
      <pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/design-responsivo-na-pratica-2-layout-ao-html/</guid>
      <description>

&lt;p&gt;Há um tempinho atrás eu escrevi aqui no Tableless um artigo chamado &lt;a href=&#34;http://tableless.com.br/design-responsivo-na-pratica-do-rascunho-ao-digita/&#34; title=&#34;Design Responsivo na prática: do rascunho ao digital&#34;&gt;Design Responsivo na Prática &amp;#8211; Do Rascunho ao Digital&lt;/a&gt;. A abordagem na época foi mais voltada para os designers, que estavam carentes de conteúdo bacana sobre o assunto. Mas, no entanto, todavia, algumas pessoas comentaram que gostariam de ver o desenvolvimento do dito cujo do layout criado passo-a-passo ou ao menos uma demo. Como eu não poderia deixar de atender os devs também, é justamente isto que vou fazer hoje. Portanto, pegue seu cafézinho pois hoje é dia de codar! 🙂&lt;/p&gt;

&lt;h2 id=&#34;hora-da-revisão&#34;&gt;Hora da Revisão&lt;/h2&gt;

&lt;p&gt;Não vou perder tempo aqui falando o que é design responsivo (conjunto de técnicas para melhorar a experiência do usuário independente do dispositivo que ele esteja utilizando), quais são as principais características de um site responsivo (um único conteúdo em uma única URL em um único código) ou por que você deve utilizar (são tantas que este parênteses seria gigante). Mas, como este artigo é mão na massa mesmo, antes de começar tenham certeza de entender os três pilares básicos do RWD (Responsive Web Design, que abrasileiramos carinhosamente para Design Responsivo).&lt;/p&gt;

&lt;p&gt;Quais são?&lt;/p&gt;

&lt;p&gt;&amp;#8230;&lt;/p&gt;

&lt;p&gt;&amp;#8230;&lt;/p&gt;

&lt;p&gt;&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler&lt;/strong&gt;: fundação flexível, imagens adaptáveis e media queries. Bem, se você conseguiu lembrar todos os três de memória e está aí resmungando consigo mesmo ganhou um passe &amp;#8220;pule a revisão&amp;#8221;: vá direto para a prática. Se não conseguiu lembrar, sem problemas. Vamos refrescar a memória!&lt;/p&gt;

&lt;h3 id=&#34;1-fundação-flexível&#34;&gt;1. Fundação Flexível&lt;/h3&gt;

&lt;p&gt;Este é o esqueleto básico do layout. A fundação pode ser construída através de um sistema de grid fluído ou na unha combinando medidas relativas e um pouquinho de matemática. Como gostamos de desafios, vou ensinar por aqui a segunda opção.&lt;/p&gt;

&lt;h4 id=&#34;quase-tudo-é-relativo&#34;&gt;(Quase) tudo é relativo&lt;/h4&gt;

&lt;p&gt;Para que o seu site possa se adaptar a múltiplos dispositivos e toda aquela ladainha que vocês já estão cansadinhos de saber é preciso colocar um pouco de lado os pixels. Note bem: colocar de lado, não jogar fora! Você ainda vai utilizá-los para definir alturas fixas e para definir, se for determinado no layout, um container inicial com uma largura máxima.&lt;/p&gt;

&lt;p&gt;Para todo o resto conheça agora seus novos melhores amigos: % e EM.&lt;/p&gt;

&lt;p&gt;(Existem também algumas outras medidas responsivas super bacanas como REM, VW, VH e FR. Mas vamos nos concentrar no básico.)&lt;/p&gt;

&lt;h4 id=&#34;o-que-diabos-é-em&#34;&gt;O que diabos é EM?&lt;/h4&gt;

&lt;p&gt;EM ou quadratim é uma medida relativa que nasceu na tipografia. 1 EM era originalmente correspondente ao tamanho da letra M maiúscula de uma determinada fonte. Isto era útil lá naquela época em que os tipógrafos utilizavam blocos de madeira ou metal para diagramar impressos, afinal, através desta letra eles teriam uma &amp;#8220;chave&amp;#8221; para todos as outras.&lt;/p&gt;

&lt;p&gt;Já em se tratando de CSS, 1 EM é correspondente ao valor de font-size, que, por padrão do browser é em média 16px. E isto é bacana para a gente por que é um tamanho dinâmico. Ou seja, vamos supor que o seu usuário possua alguma deficiência de visão e precise aumentar e diminuir o tamanho do texto… Como pixel é uma medida fixa é impossível fazer isto de maneira proporcional, sem distorções ou quebras no layout. Já o EM é super proporcional. É uma questão de usabilidade.&lt;/p&gt;

&lt;h4 id=&#34;conversão-de-px-para-em&#34;&gt;Conversão de PX para EM&lt;/h4&gt;

&lt;p&gt;Como fazer contas em base 16 é meio chatinho podemos usar um truque de CSS para facilitar a conversão de pixels para EM.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
   font-size: 62.5%;
}
&lt;/pre&gt;

&lt;p&gt;Isto significa que alteramos o valor da fonte padrão de 16px para 10px. Desta forma, 12px passa a equivaler a 1.2em, 14px fica equivalente a 1.4em, etc.&lt;/p&gt;

&lt;p&gt;Lembre-se que 1 EM é relativo ao font-size. Então uma vez que você altere este valor dentro de um article, por exemplo, todos os elementos filhos também serão alterados.&lt;/p&gt;

&lt;h4 id=&#34;conversão-de-px-para&#34;&gt;Conversão de PX para %&lt;/h4&gt;

&lt;p&gt;Para construir a tal da fundação flexível é preciso seguir uma formula estrutural básica: objeto : contexto = resultado.&lt;/p&gt;

&lt;p&gt;Não fez o menor sentido? É, para mim também não fez a primeira vez que eu li. Vamos adiantar um pouquinho a prática e pensar no seguinte: temos uma div de largura 1128px. Dentro dela uma coluna com 264px de largura. A coluna é, portantom filha do container. Então vamos pegar o valor em px da coluna (objeto = 264px) e dividir pelo valor em pixel do elemento pai (contexto = 1128px). O resultado deu 0,23404255319149. Agora basta andar duas casas para a esquerda com a virgula e acrescentar um ponto que temos o valor 23.404255319149. E esta é a correspondência da nossa coluna em porcentagem: 23.404255319149%. Este número é realmente grande e a tentação é grande para chamar de 23% e acabar com a história. Mas, se você arredondar, uma hora a soma vai quebrar. Computadores são bem mais exatos que a gente. Eles sabem lidar bem com matemática&amp;#8230;&lt;/p&gt;

&lt;p&gt;Enfim, design responsivo é repetir esta continha a exaustão, meus caros. Usar um sistema de Grid ou Framework pronto é mais fácil? Muito! Como usar um elevador é mais fácil do que subir vários lances de escadas de um prédio a pé. Mas o dia que o nosso prédio metafórico pegar fogo saber COMO subir as tais das escadas é um conhecimento bem útil para salvar sua pele, certo? O mesmo vale para grids e frameworks. São ferramentas legais, mas tenha certeza que você sabe se virar sem elas. Pode ser que caia no seu colo um projeto onde, por uma incompatibilidade de linguagens ou escolha das outras pessoas envolvidas, você não possa usar um sistema de Grid pronto. Vai por mim. É melhor aprender a fazer na unha primeiro. Depois não diga que eu não avisei…&lt;/p&gt;

&lt;h3 id=&#34;2-imagens-adaptáveis&#34;&gt;2. Imagens adaptáveis&lt;/h3&gt;

&lt;p&gt;Já que vamos trabalhar com porcentagens precisamos garantir que as imagens não vão se distorcer, certo? Então podemos acrescentar o seguinte código CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;img {
   max-width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Isto significa que o tamanho final da imagem no browser nunca vai ultrapassar o tamanho original dela. Mas, para isto funcionar, é necessário sempre envelopar as imagens em um container. Pode ser um figure, uma div, enfim, vai dá sua escolha para aquele contexto.&lt;/p&gt;

&lt;h3 id=&#34;3-consulta-de-mídia&#34;&gt;3. Consulta de mídia&lt;/h3&gt;

&lt;p&gt;O terceiro e último passo da nossa revisão é consulta de mídia ou media queries. Estes chuchuzinhos do CSS3 servem para identificar qual é o tipo, resolução e densidade do dispositivo e tornar a nossa vida mais fácil.&lt;/p&gt;

&lt;p&gt;Para isto basta utilizar a regrinha @media combinada com parâmetros como min-width, max-width, min-height, max-height, aspect ratio, etc. e operadores como and, only e not.&lt;/p&gt;

&lt;p&gt;Vamos supor que você queira trabalhar apenas com telas de largura máxima 1024px. O media querie ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 1024px) {
   /*estilos*/
}
&lt;/pre&gt;

&lt;p&gt;A tradução disto de CSS para português seria &amp;#8220;tipo de mídia: tela E largura máxima: 1024px&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Este tema sozinho daria um artigo inteiro. Na verdade já deu! Então, no melhor estilo escolha sua própria aventura:&lt;/p&gt;

&lt;p&gt;&amp;#8211; Se você tem dúvidas a respeito do funcionamento da consulta de mídia de uma lida em &lt;a href=&#34;http://blog.popupdesign.com.br/design-responsivo-iii-media-queries-e-compatibilidade/&#34; title=&#34;Design Responsivo III – Media Queries e Compatibilidade&#34;&gt;Design Responsivo III – Media Queries e Compatibilidade&lt;/a&gt; escrito pela autora que vos fala.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Se você entendeu tudo desta explicação relâmpago e quer simplesmente ver mais exemplos de media queries dê uma olhadinha em &lt;a href=&#34;http://css-tricks.com/logic-in-media-queries/&#34; title=&#34;Logic in media queries&#34;&gt;Logic in media queries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Se você já entendeu tudo e não precisa de mais exemplos siga em frente. 🙂&lt;/p&gt;

&lt;h3 id=&#34;round-bonus-8211-viewport&#34;&gt;Round Bonus &amp;#8211; Viewport&lt;/h3&gt;

&lt;p&gt;Precisamos dizer para todos os dispositivos que a escala inicial do nosso layout é equivalente ao tamanho do dispositivo. Se não fizermos isto, alguns aparelhos móveis vão redimensionar o layout por conta própria e o design responsivo só vai funcionar no desktop! Para isto vamos manipular a metatag viewport. Cole isto no head do seu documento&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Quer saber mais sobre viewport? O artigo &lt;a href=&#34;http://blog.popupdesign.com.br/desenvolvimento-responsivo-e-viewport/&#34; title=&#34;Desenvolvimento Responsivo &amp;amp; Viewport&#34;&gt;Desenvolvimento Responsivo e Viewport&lt;/a&gt; é super completo.&lt;/p&gt;

&lt;p&gt;Fim da revisão!&lt;/p&gt;

&lt;h2 id=&#34;o-html&#34;&gt;O HTML&lt;/h2&gt;

&lt;p&gt;Hora de colocar a mão no código!&lt;/p&gt;

&lt;p&gt;Eu pessoalmente acredito ser mais fácil construir todo o HTML para depois desenvolver o CSS. Mas esta é uma preferência pessoal e não vou ficar aqui cagando regra. Vou manter a estrutura bem simples para nos concentrarmos no CSS. Vamos relembrar o layout que construímos juntos no artigo anterior.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-42216&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/04/layout-demo.jpg&#34; alt=&#34;Demo Layout Responsivo&#34; width=&#34;800&#34; height=&#34;844&#34; srcset=&#34;uploads/2014/04/layout-demo.jpg 800w, uploads/2014/04/layout-demo-400x422.jpg 400w&#34; sizes=&#34;(max-width: 800px) 100vw, 800px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos dividir este HTML em cinco estruturas básicas.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Uma div com a classe container envolvendo todo o layout;&lt;/p&gt;

&lt;p&gt;&amp;#8211; Um cabeçalho com a classe header;&lt;/p&gt;

&lt;p&gt;&amp;#8211; Uma div &amp;#8220;hero&amp;#8221; com a classe banner;&lt;/p&gt;

&lt;p&gt;&amp;#8211; Quatro blocos de texto e imagem com a classe coluna;&lt;/p&gt;

&lt;p&gt;&amp;#8211; Um rodapé com a classe footer.&lt;/p&gt;

&lt;p&gt;Até aqui não tem segredo nenhum. É um HTML normalzinho. Você pode fazer o download deste HTML no meu &lt;a href=&#34;https://github.com/daniguerrato/design-responsivo-demo&#34; title=&#34;Demo&#34;&gt;repositório do GitHub&lt;/a&gt; e acompanhar passo-a-passo.&lt;/p&gt;

&lt;p&gt;Note que todas as imagens estão dentro de outros elementos (div ou figure).&lt;/p&gt;

&lt;h2 id=&#34;o-css-desktop&#34;&gt;O CSS [Desktop]&lt;/h2&gt;

&lt;p&gt;Para facilitar vou especificar todas as medidas em pixel na versão desktop. Vamos a elas:&lt;/p&gt;

&lt;p&gt;Container &amp;#8211; 1128px&lt;/p&gt;

&lt;p&gt;Logotipo &amp;#8211; 234px x 36px&lt;/p&gt;

&lt;p&gt;Menu &amp;#8211; maximo 840px&lt;/p&gt;

&lt;p&gt;Banner &amp;#8211; 1128px x 450px&lt;/p&gt;

&lt;p&gt;Caixa de texto &amp;#8211; 480px&lt;/p&gt;

&lt;p&gt;Colunas de texto &amp;#8211; 264px&lt;/p&gt;

&lt;p&gt;Fotos &amp;#8211; 264px x 218px&lt;/p&gt;

&lt;p&gt;Margens &amp;#8211; 24px&lt;/p&gt;

&lt;p&gt;Rodapé &amp;#8211; 1128px&lt;/p&gt;

&lt;p&gt;Primeiro vamos centralizar e determinar a largura máxima do container no CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container {
   max-width: 1128px;
   margin: 0 auto;
}
&lt;/pre&gt;

&lt;h3 id=&#34;clearfix&#34;&gt;Clearfix&lt;/h3&gt;

&lt;p&gt;Esta é uma técnica utilizada para conter os floats e evitar que elementos entrem em colapso. Funciona basicamente adicionando um espaço vazio antes e depois dos elementos e dando um &amp;#8220;clear&amp;#8221; nos dois lados. Tudo isto sem precisar escrever marcação adicional. Como em design responsivo estaremos utilizando muito floats é útil conhecer. Vamos aplicar esta classe ao container do nosso layout para que ele possa conter todas as divs.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.clearfix:before,
.clearfix:after {
   content: &#34; &#34;;
   display: table;
}

.clearfix:after {
   clear: both;
}

.clearfix {
   *zoom: 1;
}
&lt;/pre&gt;

&lt;h3 id=&#34;proporção&#34;&gt;Proporção&lt;/h3&gt;

&lt;p&gt;A seguir vamos garantir que todas as imagens, videos e conteúdos embedados fiquem com a largura máxima de 100% do tamanho original.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;img,
picture,
video,
embed {
   max-width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Aqui cabe uma observação. Como no nosso mock-up final as imagens em smartphones ocuparão o tamanho de uma coluna eu preferi utilizar um tamanho proporcionalmente maior (500x413px). Assim nenhuma imagem irá estourar a resolução nos smartphones.&lt;/p&gt;

&lt;h3 id=&#34;border-box&#34;&gt;Border-box&lt;/h3&gt;

&lt;p&gt;Outro truque bacana de CSS para design responsivo é o box-sizing border box acompanhado do seletor *. Basicamente esta regra diz que todos os elementos agora levarão em conta apenas a largura e altura determinada, sem somar a este valor a borda e o padding. Ou seja, uma coisa a menos para nos preocuparmos.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;*, *:before, *:after {
   -webkit-box-sizing: border-box;
   -moz-box-sizing: border-box;
   box-sizing: border-box;
}
&lt;/pre&gt;

&lt;h3 id=&#34;o-header&#34;&gt;O Header&lt;/h3&gt;

&lt;p&gt;A seguir vamos especificar o tamanho do header. Este é bem fácil: 100%!&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.header {
   width: 100%;
   height: 48px;
   margin-top: 3.6em;
   margin-bottom: 3.6em;
}
&lt;/pre&gt;

&lt;p&gt;Eu dei a ele também uma altura fixa (48px) e especifiquei margens utilizando a medida EM. A minha intenção aqui foi criar uma margem dinâmica que ficasse em um tamanho bacana em relação ao texto em qualquer resolução. Por isto utilizei EM ao invés de px.&lt;/p&gt;

&lt;p&gt;Dentro deste header temos um logotipo e um menu. Lembra da formulinha? Objeto : Contexto = Resultado. Então 234 : 1128 = 0,20744680851064. Andando duas casas para direita temos 20,744680851064. Este é o valor em porcentagem do logotipo. Eu gosto de deixar comentado o valor original em pixels para facilitar caso for preciso recalcular os elementos.&lt;/p&gt;

&lt;p&gt;Ah, fique atento para substituir a virgula por ponto no CSS.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.logo {
   width: 20.744680851064%; /*234px / 1128px */
   float: left;
}
&lt;/pre&gt;

&lt;p&gt;O menu ficará flutuando a direita e a largura máxima &amp;#8220;segura&amp;#8221; é 840px.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.menu {
   width: 74.468085106383%; /*840px / 1128px */
   float: right;
}
&lt;/pre&gt;

&lt;p&gt;Coloquei também alguns elementos de estilo dos links e texto. Mas isto você já sabe fazer, certo? 😉&lt;/p&gt;

&lt;h3 id=&#34;banner&#34;&gt;Banner&lt;/h3&gt;

&lt;p&gt;O banner também é bem padrão, com 100% de largura. Aqui poderiamos ter um slider ou carrossel em JavaScript. Mas vou ficar apenas no HTML por este artigo.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.banner {
   background: url(&#39;../img/banner.jpg&#39;);
   height: 450px;
   margin-bottom: 4.8em;
   position: relative;
}
&lt;/pre&gt;

&lt;p&gt;Repare que a imagem está dentro do background do banner. Neste caso ela vai sendo cortada de acordo com a altura e largura que eu especificar para ele. Dentro do banner temos uma caixa que eu carinhosamente dei a classe de &amp;#8220;caixa&amp;#8221;. Aqui é a mesma ladainha de sempre. Objeto : Contexto = Resultado. A diferença aqui está na posição absoluta da caixa em relação ao banner.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.caixa {
   width: 42.553191489362%; /* 264px / 1128px */
   padding: 2.4em 4em 2.4em 4em;
   position: absolute;
   top: 48px;
   background: rgba(0,0,0,0.6);
}
&lt;/pre&gt;

&lt;p&gt;Novamente vamos pular os estilos puramente estéticos para ganharmos tempo. Mas você pode conferir todos eles na &lt;a href=&#34;https://github.com/daniguerrato/design-responsivo-demo&#34; title=&#34;Demo - Design Responsivo na Prática&#34;&gt;demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;colunas&#34;&gt;Colunas&lt;/h3&gt;

&lt;p&gt;Temos quatro destaques contendo texto e imagens que chamamos de colunas. A margem da direita também foi calculada em porcentagem. Como o último bloco não tem margem coisa nenhuma utilizamos o parâmetro last-child para especificar isto. Lembrando que versões antigas do IE não suportam isto.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.coluna {
   width: 23.404255319149%; /* 264px / 1128px */
   margin-right: 2.127659574468%; /* 24 / 1128px */
float: left;
}

.coluna:last-child {
   margin-right: 0;
}
&lt;/pre&gt;

&lt;h3 id=&#34;footer&#34;&gt;Footer&lt;/h3&gt;

&lt;p&gt;O rodapé do nosso layout é bem simples e ocupa 100% de largura.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.footer {
   width: 100%;
   margin-top: 2.4em;
   margin-bottom: 2.4em;
   float: left;
   clear: both;
}
&lt;/pre&gt;

&lt;h2 id=&#34;css-mobile&#34;&gt;CSS [Mobile]&lt;/h2&gt;

&lt;p&gt;Vamos adaptar o layout aqui para tamanhos menores do que1128px. Mas poderíamos utilizar media queries para criar versões alternativas para televisores, impressão, dispositivos com maior densidade de pixel (como as telas retinas), etc.&lt;/p&gt;

&lt;p&gt;Estes aparelhos podem ser divididos em alguns tamanhos médios de largura:&lt;/p&gt;

&lt;p&gt;1024px &amp;#8211; Tablets em modo paisagem;&lt;/p&gt;

&lt;p&gt;768px &amp;#8211; Tablets em modo retrato;&lt;/p&gt;

&lt;p&gt;600px &amp;#8211; eReaders;&lt;/p&gt;

&lt;p&gt;480px &amp;#8211; Smartphones;&lt;/p&gt;

&lt;p&gt;Mas estes valores não passam de chutes calculados. Existem dezenas de resoluções intermediárias. Aqui vai entrar o conceito de break-point, ou, ponto-de-quebra. Funciona mais ou menos assim:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Redimensione o seu browser até identificar um problema.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Concerte o problema.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Repita.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sério. Não tem segredo. Para isto você pode utilizar algum bookmarklet de resolução. Copie o valor para o seu Media Querie.&lt;/p&gt;

&lt;p&gt;Por exemplo, em exatos 1128px de largura temos o primeiro problema. Não existe nenhuma margem e o layout fica coladinho na janela do browser. Entra o primeiro Media Querie.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 1128px) {
.container {
   padding: 0 2.4em 0 2.4em;
}
}
&lt;/pre&gt;

&lt;p&gt;Tradução: em telas de largura máxima 1128px aplicar os seguintes estilos: espaçamento de 2.4em para a esquerda e para a direita.&lt;/p&gt;

&lt;p&gt;O próximo problema é que lá por volta do 768px a nossa caixa de banner parece meio apertada demais. Podemos aumentar o tamanho dela.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 768px) {
.caixa {
   width: 65%;
}
}
&lt;/pre&gt;

&lt;p&gt;O mesmo acontece com as colunas… Dentro do mesmo media querie vamos especificar duas colunas com largura de 48% e margem de 2%.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.coluna {
   width: 48%;
   margin-bottom: 2.4em;
   margin-right: 2%;
}

.coluna:nth-child(even) {
   margin-right: 0;
}
&lt;/pre&gt;

&lt;p&gt;Lembrando que agora a regrinha é diferente. Para cada coluna de número par zeramos a margem através do :nth-child(even).&lt;/p&gt;

&lt;p&gt;O logotipo poderia ter uma margem maior por aqui.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.logo {
   margin-top: 1.2em;
}
&lt;/pre&gt;

&lt;p&gt;O próximo problema é o banner. Por volta de 718px ele poderia receber menos destaque na imagem e mais destaque no texto. Diminuimos a altura dele para 150px, e colocamos a caixa logo abaixo. O resto é correção de margem e perfumaria.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 718px) {
.banner {
   position: relative;
   float: left;
   margin:0;
   height: 150px;
}

.caixa {
   position: relative;
   display: block;
   float: left;
   margin-top:100px;
   width: 100%;
   background: #000;
}

.caixa h1 {
   font-size: 2.5em;
}

.principal {
   margin-top: 450px;
}
}
&lt;/pre&gt;

&lt;p&gt;Diminua mais ainda a janela do browser. Eventualmente o menu cairá para duas linhas, certo? Como temos apenas quatro links na navegação ele pode muito bem simplesmente ocupar 100% de largura e zerar a margem das linhas. Vamos também diminuir um pouco o tamanho dos links.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 640px) {
.menu {
   width: 100%;
}

.menu ul {
   float: left;
   font-size: 0.8em;
}

.menu li:first-child {
   margin-left: 0;
}
}
&lt;/pre&gt;

&lt;p&gt;Poderíamos, através de JavaScript e/ou CSS3, criar outras soluções de navegação como um menu retratil, com overlay, etc. Mas como já existem alguns artigos aqui no Tableless sobre o tema vamos seguir adiante.&lt;/p&gt;

&lt;p&gt;Neste ponto já temos nosso layout em tablets. Esta é uma screenshot em um iPad 2 modo retrato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/04/layout-demo-tablet.jpg&#34; alt=&#34;layout-demo-tablet&#34; width=&#34;800&#34; height=&#34;844&#34; class=&#34;alignnone size-full wp-image-42226&#34; srcset=&#34;uploads/2014/04/layout-demo-tablet.jpg 800w, uploads/2014/04/layout-demo-tablet-400x422.jpg 400w&#34; sizes=&#34;(max-width: 800px) 100vw, 800px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O próximo, e último passo, é criar o layout em smartphones em si. Para isto vamos especificar que todas as colunas também ocupem 100% da tela.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;@media screen and (max-width: 520px) {
.coluna {
   width: 100%;
   margin-right: 0;
}
}
&lt;/pre&gt;

&lt;p&gt;E aqui esta o layout em um smartphone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/04/layout-demo-smartphones.jpg&#34; alt=&#34;layout-demo-smartphones&#34; width=&#34;800&#34; height=&#34;600&#34; class=&#34;alignnone size-full wp-image-42225&#34; srcset=&#34;uploads/2014/04/layout-demo-smartphones.jpg 800w, uploads/2014/04/layout-demo-smartphones-400x300.jpg 400w&#34; sizes=&#34;(max-width: 800px) 100vw, 800px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h2&gt;

&lt;p&gt;E está finalizada nossa demo. &lt;a href=&#34;https://github.com/daniguerrato/design-responsivo-demo&#34; title=&#34;Demo - Design Responsivo na Prática&#34;&gt;Baixem o layout&lt;/a&gt; e brinquem com o código. Ainda está com dúvida em algum tema específico ou quer se aprofundar em um dos aspectos? Segue uma listinha básica de alguns outros artigos sobre o assunto:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/design-responsivo-na-pratica-do-rascunho-ao-digita/&#34; title=&#34;Design Responsivo na prática: do rascunho ao digital&#34;&gt;Design Responsivo na Prática: Do rascunho ao digital&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.popupdesign.com.br/design-responsivo-i-o-que-e-e-por-que-usar/&#34; title=&#34;http://blog.popupdesign.com.br/design-responsivo-i-o-que-e-e-por-que-usar/&#34;&gt;Design Responsivo I – O que é e por que usar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.popupdesign.com.br/design-responsivo-grids-e-texto/&#34; title=&#34;http://blog.popupdesign.com.br/design-responsivo-grids-e-texto/&#34;&gt;Design Responsivo II – Grids e Texto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.popupdesign.com.br/design-responsivo-iii-media-queries-e-compatibilidade/&#34; title=&#34;http://blog.popupdesign.com.br/design-responsivo-iii-media-queries-e-compatibilidade/&#34;&gt;Design Responsivo III – Media Queries e Compatibilidade&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.popupdesign.com.br/desenvolvimento-responsivo-e-viewport/&#34; title=&#34;Desenvolvimento Responsivo e Viewport&#34;&gt;Desenvolvimento Responsivo e Viewport&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.popupdesign.com.br/design-responsivo-e-retina-display-desenvolvimento-web-em-tempos-de-alta-resolucao/&#34; title=&#34;http://blog.popupdesign.com.br/design-responsivo-e-retina-display-desenvolvimento-web-em-tempos-de-alta-resolucao/&#34;&gt;Design Responsivo &amp;amp; Retina Display: desenvolvimento web em alta resolução&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/imagens-em-alta-resolucao-utilizando-svg/&#34; title=&#34;Imagens em alta resolução utilizando SVG&#34;&gt;Imagens em alta resolução utilizando SVG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/grids-semanticos-com-less/&#34; title=&#34;Grids semânticos com LESS&#34;&gt;Grids semânticos com LESS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/menu-retratil-com-css-e-jquery/&#34; title=&#34;Menu Retrátil com CSS e jQuery&#34;&gt;Menu Restrátil com CSS e jQuery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/como-testar-design-responsivo/&#34; title=&#34;Como testar design responsivo&#34;&gt;Como testar Design Responsivo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/imagens-responsivas-de-alta-performance/&#34; title=&#34;Imagens Responsivas de Alta Performance&#34;&gt;Imagens Responsivas de Alta Performance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://alistapart.com/article/responsive-web-design/&#34; title=&#34;Responsive Web Design&#34;&gt;Responsive Web Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Espero que tenha sido proveitoso para vocês. Bons estudos, um abraço e até a próxima! 🙂&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O Diego Eis fez um &lt;a href=&#34;https://www.eventials.com/tableless/live-coding-implementando-um-site-responsivo/&#34;&gt;Micro Workshop Online&lt;/a&gt; mostrando como implementar um layout responsivo, mostrando o básico sobre Grids fluídos, Imagens (vídeos etc) fluídos, Media Queries, Fonts com REM e algumas outras coisas. Vale a pena ver.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Não tenho versão mobile, faço ou não faço?</title>
      <link>http://tableless.com.br/nao-tenho-versao-mobile-faco-ou-nao-faco/</link>
      <pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/nao-tenho-versao-mobile-faco-ou-nao-faco/</guid>
      <description>

&lt;p&gt;Estamos fazendo uma reestruturação no &lt;a href=&#34;http://locaweb.github.io/locawebstyle&#34;&gt;framework da firma&lt;/a&gt;. A primeira versão do projeto tinha como objetivo iniciar uma estruturação e uniformização de comportamento e design dos layouts de cada produto, melhorando o código front-end gerado, automatizando algumas tarefas e uniformizando o design e a expediência de uso. Não havíamos planejado nessa primeira versão qualquer tipo de compatibilidade com dispositivos móveis.&lt;/p&gt;

&lt;p&gt;Nessa reestruturação, o objetivo principal é produzir um novo código mais legível e escalável possível, de forma que não apenas nossa equipe de front-end consiga usar componentes, mas também que os back-ends possam montar painéis inteiros, como um quebra-cabeças, sem a necessidade de um front-end para tarefas básicas.&lt;/p&gt;

&lt;p&gt;O outro objetivo, tão importante quanto, é implementar uma versão mobile dos painéis. Logo, produzimos um código permitir que o layout seja responsivo e também cada elemento está sendo reformulado, se tornando um elemento adaptativo.&lt;/p&gt;

&lt;p&gt;Estamos usando o método de Mobile First para criar e produzir os elementos e a estrutura de layout. Isto por si só está sendo uma experiência de travar o cérebro. Mas algo que estamos discutindo muito é: nós não temos nenhum tipo de dado para justificar todo o trabalho para produzir e priorizar a versão mobile nos produtos. Não há resultados para mostrar indicativos que temos mais visitantes usando dispositivos mobile do que desktops. Não há estatísticas dos nossos produtos mostrando alguma tendência positiva de uso de mobiles nos painéis. Não temos nada disso simplesmente por que não tínhamos versão mobile.&lt;/p&gt;

&lt;p&gt;Várias e várias vezes criamos uma solução perfeita para desktops, mas que não é possível &amp;#8220;migrar&amp;#8221; a mesma experiência na versão mobile, logo, descartamos essa solução desktop para fazer algo mais homogêneo entre as duas plataformas. Como vamos justificar uma atitude dessa? O motivo disso é óbvio: não temos provas por que simplesmente não havia versão mobile até então. Só saberemos se todo esse trabalho vai valer a pena ou não apenas depois, quando terminarmos tudo. Aí sim saberemos exatamente o que dá certo, o que pode melhorar, o que teremos que matar sem choradeira&amp;#8230; Até lá, temos apenas um feeling.&lt;/p&gt;

&lt;h2 id=&#34;dúvida-sobre-versão-mobile&#34;&gt;Dúvida sobre versão mobile&lt;/h2&gt;

&lt;p&gt;Ter dúvidas se o trabalho de fazer uma versão mobile ou responsiva vale a pena é normal. Como no nosso caso, até pouco tempo ninguém pensava nessa coisa toda.&lt;/p&gt;

&lt;p&gt;Algumas empresas decidem implementar uma versão mobile paliativa, com menos informação ou menos features, para não dar muito trabalho apenas com a intenção de testar a adesão dos usuários. Não recomendo essa abordagem. Se a versão mobile for feita pela metade, o usuário não encontrará valor real na versão mobile. Obviamente o uso dessa versão não será frequente, gerando maus resultados. Logo a versão mobile acaba não saindo, já que não houve adesão dos usuários.&lt;/p&gt;

&lt;p&gt;Se você quer saber se a versão mobile vai dar certo ou não faça-o perfeito. Pense num projeto decente, com tudo o que o usuário precisa para usufruir da melhor experiência possível quando estiver em um dispositivo móvel. Assim você terá dados reais para decidir se vale ou não a pena.&lt;/p&gt;

&lt;h2 id=&#34;medir-medir-e-medir&#34;&gt;Medir, medir e medir&lt;/h2&gt;

&lt;p&gt;Depois de feito o trabalho para a versão mobile, você precisa medir a utilização do usuário. Há pelo menos 3 meios para obtermos dados de utilização importantes: podemos usar o Analytics, extraindo dados via dashboards customizados. Ainda no Analytics, podemos implementar os Track Events para saber se os módulos adaptados da versão mobile estão sendo usados. E por último, mas não menos importantes, há a possibilidade de fazer testes de usabilidade, pedindo para usuários reais testar a versão em seus aparelhos. É legal selecionar usuários que já demonstraram algum interesse nesse tipo de versão.&lt;/p&gt;

&lt;p&gt;Eu uso um dashboard customizado bem bacana que filtra dados da utilização mobile do seu site feito pelo pessoal da &lt;a href=&#34;http://www.agenciamestre.com/&#34;&gt;Agência Mestre&lt;/a&gt;. Para usar, &lt;a href=&#34;https://www.google.com/analytics/web/template?uid=_0Bifw1MQRiRKY7RDhQIww”&gt;clique nesse link&lt;/a&gt;. Certifique-se antes que você está logado em sua conta do analtytics.&lt;/p&gt;

&lt;h2 id=&#34;linha-de-corte-dos-aparelhos&#34;&gt;Linha de corte dos Aparelhos&lt;/h2&gt;

&lt;p&gt;Eu acho que você não quer passar pelos menos problemas de compatibilidade de browser e versões específicas que assombram a todos no desktop, na sua versão mobile. Há uma gama de aparelhos de todos os tamanhos, com densidades de pixels, resoluções e tamanhos de telas totalmente diferentes. É por esse motivo que você precisa de uma linha de corte.&lt;/p&gt;

&lt;p&gt;Geralmente a galera inclui smartphones como iPhone e aparelhos com as duas versões mais atuais do Android: a última versão e a anterior. Isso te dá uma margem de boa para aproveitar as novidades sem perder a sanidade. Esqueça aparelhos com versões antigas dos Androids. Quem tem problemas com a versão 2.5 sabe do que eu estou falando. Existem muitos aparelhos que são ótimos, mas rodam uma versão muito antiga do Android. Isso é um equivalente pior do que tentar forçar que seu site funcione no IE6 sem perder qualidade nos outros browsers.&lt;/p&gt;

&lt;p&gt;Não quero que você me entenda mal aqui. Não importa qual seja sua linha de corte, contanto que você saiba as consequências e o que você está abrindo mão ao escolher uma linha de corte muito baixa, contemplando aparelhos ruins. Entenda: ninguém precisa agradar a TODOS.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;Acho que você entendeu que não é possível ter resultados de verdade se você não tiver algo para testar. Se você não tem uma versão responsiva/adaptativa do seu site, experimente fazer só para depois decidir se vale ou não a pena manter essa versão.&lt;/p&gt;

&lt;p&gt;O Luke Wroblewski tem &lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1841”&gt;um post interessante&lt;/a&gt; que mostra alguns dados da utilização movie de grandes websites.&lt;/p&gt;

&lt;p&gt;Mais da metade dos consumidores da Amazon compram usando um dispositivo móvel durante a temporada de final de ano (&lt;a href=&#34;http://phx.corporate-ir.net/phoenix.zhtml?c=176060&amp;p=irol-newsArticle&amp;ID=1886961&amp;highlight=“&gt;fonte&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;101 milhões de americanos usam o facebook diariamente via mobile. Isso equivale a 78% da visitação diária americana, que tem o total de 128 milhões (&lt;a href=&#34;http://techcrunch.com/2013/08/13/facebook-mobile-user-count/&#34;&gt;fonte&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;47.4 milhões de pessoas visitaram a versão mobile da ESPN em Setembro de 2013. Esta foi a primeira vez que o site mobile teve mais visitas únicas que o site desktop (&lt;a href=&#34;http://espnmediazone.com/us/press-releases/2013/10/espn-digital-media-sets-sports-category-record-in-september/&#34;&gt;fonte&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Mais do que provado que você deve prestar atenção nessa papagaiada toda, não?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O Cenário do Web Design Responsivo</title>
      <link>http://tableless.com.br/o-cenario-do-web-design-responsivo/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-cenario-do-web-design-responsivo/</guid>
      <description>

&lt;p&gt;O Web design responsivo está por aí há alguns anos, e foi destaque em 2012. Muitas estrelas da web, como Brad Frost e Luke Wroblewski, possuem vasta experiência neste tema e têm nos ajudado a fazer grandes melhorias. &lt;strong&gt;Mesmo assim, ainda há muito a ser feito&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Neste artigo, vamos ver o que já é possível fazer hoje, o que será possível no futuro &amp;#8211; usando propriedades ainda não padronizadas (como CSS nível 4 e API&amp;#8217;s do HTML5) &amp;#8211; e o que ainda precisa ser melhorado. Este não é um artigo tão completo, por isso não entraremos a fundo em cada técnica, entretanto, você terá links e referências para explorar por conta própria.&lt;/p&gt;

&lt;h2 id=&#34;o-cenário-das-imagens-no-web-design-responsivo&#34;&gt;O Cenário das Imagens no Web Design Responsivo&lt;/h2&gt;

&lt;p&gt;Há um aspecto melhor para começar a falar no web design responsivo que não seja imagens? Este até agora tem sido o tópico principal. E fica cada vez mais importante com a chegada das telas de alta densidade. E quando digo alta densidade, quero dizer telas com uma proporção de pixel maior que 2; esses dispositivos são chamados pela Apple de tela retina, e pelo Google de XHDPI. No web design responsivo, as imagens vem relacionadas a dois grandes desafios: tamanho e desempenho.&lt;/p&gt;

&lt;p&gt;A maioria dos designers buscam a perfeição no pixel, porém imagens de tamanho &amp;#8220;normal&amp;#8221; em dispositivos de alta densidade aparecem pixeladas e borradas. Servir imagens com o dobro do tamanho a esses dispositivos parece ser tentador não é mesmo? No entanto, isso pode criar um problema de performance, pois imagens com o dobro do tamanho levam mais tempo para carregar, e usuários de dispositivos com alta densidade de pixels nem sempre tem a largura de banda necessária para fazer o download dessas imagens. Além disso, dependendo do país em que o usuário vive, esta largura de banda pode ser bem cara.&lt;/p&gt;

&lt;p&gt;O segundo problema afeta dispositivos menores: Por que um dispositivo teria que fazer o download de uma imagem de 700 pixels quando ele só necessita de uma de 300? Teríamos uma maneira de &amp;#8220;cropar&amp;#8221; essas imagens para que usuários de dispositivos menores possam focar no que realmente importa a eles?&lt;/p&gt;

&lt;h3 id=&#34;duas-soluções-de-marcação-o-elemento-picture-e-o-atributo-srcset&#34;&gt;Duas soluções de marcação: O elemento &lt;picture&gt; e o atributo srcset&lt;/h3&gt;

&lt;p&gt;O primeiro passo para resolver o desafio de imagens responsivas é mudar a marcação das imagens embutidas em uma página HTML.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://responsiveimages.org/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Responsive Images Community Group&amp;#8221;&lt;/a&gt; apoia a proposta de um elemento novo e mais flexível, o elemento &lt;a href=&#34;http://picture.responsiveimages.org/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;picture&lt;/em&gt;&lt;/a&gt;. O conceito é usar as já tão conhecidas media queries para &lt;strong&gt;servir imagens diferentes a diferentes dispositivos&lt;/strong&gt;. Assim, dispositivos menores receberiam imagens menores. Funciona um pouco como a marcação para vídeo, mas com imagens diferentes sendo refenciadas no elemento de origem.&lt;/p&gt;

&lt;p&gt;O código na especificação proposta fica da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;picture width=&#34;500&#34;  height=&#34;500&#34;&amp;gt;     
  &amp;lt;source  media=&#34;(min-width: 45em)&#34; src=&#34;large.jpg&#34;&amp;gt;
  &amp;lt;source  media=&#34;(min-width: 18em)&#34; src=&#34;med.jpg&#34;&amp;gt;
  &amp;lt;source  src=&#34;small.jpg&#34;&amp;gt;
  &amp;lt;img  src=&#34;small.jpg&#34; alt=&#34;&#34;&amp;gt;
  &amp;lt;p&amp;gt;Accessible  text&amp;lt;/p&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Se oferecer fontes diferentes para imagens é possível, poderíamos também imaginar o fornecimento de imagens com &lt;strong&gt;recortes diferentes&lt;/strong&gt; e focar naquilo que realmente importa aos dispositivos menores. O tópico &lt;a href=&#34;http://usecases.responsiveimages.org/#art-direction&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Art Direction&amp;#8221;&lt;/a&gt; da W3C mostra um belo exemplo do que poderia ser feito.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110231.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110231.jpg?itok=65RrJGnF&#34; width=&#34;433&#34; height=&#34;475&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Imagem: &lt;a href=&#34;http://www.flickr.com/photos/egorick/3754608666/&#34; target=&#34;_blank&#34;&gt;Egor Pasko&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A solução vem sendo discutida pelo &lt;a href=&#34;http://www.w3.org/community/respimg/&#34; target=&#34;_blank&#34;&gt;W3C Responsive Images Community Group&lt;/a&gt; mas, até onde sabemos, ainda não é utilizável por nenhum browser. Um polyfill chamado &lt;a href=&#34;https://github.com/scottjehl/picturefill&#34; target=&#34;_blank&#34;&gt;Picturefill&lt;/a&gt; está disponível, e faz praticamente a mesma coisa. Utiliza uma div e um atributo na sintaxe por questões de segurança.&lt;/p&gt;

&lt;p&gt;A segunda proposta para a marcação de imagens responsivas foi feita pela Apple para a W3C e é chamada de &amp;#8220;atributo srcset&amp;#8221;; Ela é equivalente ao image-set() (propriedade CSS nível 4). A proposta deste atributo é forçar os navegadores a selecionar um recurso apropriado do set, ao invés de baixar o conjunto.&lt;/p&gt;

&lt;p&gt;A sintaxe HTML para esta proposta se baseia na própria tag &lt;em&gt;img&lt;/em&gt;, e o exemplo na especificação fica desta forma:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img  alt=&#34;The Breakfast Combo&#34; 
  src=&#34;banner.jpeg&#34;
  srcset=&#34;banner-HD.jpeg  2x, banner-phone.jpeg 100w, banner-phone-HD.jpeg 100w 2x&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Como você pode ver a &lt;strong&gt;sintaxe não é não é tão intuitiva&lt;/strong&gt;. Os valores da tag consistem em uma string separada por vírgulas. Os valores do atributo são os nomes ou URL&amp;#8217;s de várias imagens, a densidade de pixels do dispositivo e o tamanho máximo da viewport a que se destina.&lt;/p&gt;

&lt;p&gt;Numa linguagem clara, o que o trecho acima diz é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A imagem padrão é &lt;em&gt;banner.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;O dispositivo que tiver um pixel ratio maior do que 2 deve usar o &lt;em&gt;banner-HD.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Dispositivos com um tamanho máximo da viewport de &lt;em&gt;100w&lt;/em&gt; deve utilizar o &lt;em&gt;banner-phone.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Dispositivos com um tamanho máximo da viewport de &lt;em&gt;100w&lt;/em&gt; e um pixel ratio maior que 2 devem utilizar o &lt;em&gt;banner-phone-HD.jpeg&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caso o atributo &lt;em&gt;srcset&lt;/em&gt; não seja suportado, a primeira fonte é a imagem padrão. O sufixo &lt;em&gt;2x&lt;/em&gt; para o &lt;em&gt;banner-HD.jpeg&lt;/em&gt; significa que esta imagem em particular deveria ser usada para dispositivos com um pixel ratio maior que 2, e o &lt;em&gt;100w&lt;/em&gt; no &lt;em&gt;banner-phone.jpeg&lt;/em&gt; representa o tamanho mínimo da viewport em que esta imagem deve ser utilizada. &lt;strong&gt;Devido a sua complexidade&lt;/strong&gt;, a sintaxe do atributo srcset ainda não foi implementada nos navegadores.&lt;/p&gt;

&lt;p&gt;A sintaxe da propriedade CSS &lt;em&gt;image-set()&lt;/em&gt; funciona praticamente da mesma forma e permite que você carregue uma determinada imagem de background tendo como base a resolução da tela:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;background-image: image-set(  &#34;foo.png&#34; 1x,
  &#34;foo-2x.png&#34;  2x,
  &#34;foo-print.png&#34;  600dpi );
&lt;/pre&gt;

&lt;p&gt;Esta proposta ainda esta em fase de projeto na W3C, e por enquanto funciona no Safari (6+) e no Chrome (21+).&lt;/p&gt;

&lt;h3 id=&#34;formatos-de-imagem-compressão-e-svg-a-mudança-de-como-trabalhamos-com-imagens-na-web&#34;&gt;Formatos de Imagem, Compressão e SVG: A mudança de como trabalhamos com imagens na web.&lt;/h3&gt;

&lt;p&gt;Como podem ver, as tentativas em encontrar um novo formato de marcação para imagens ainda são altamente experiementais.Isto por si só levantou uma questão sobre formatos de imagens. Podemos conceber uma solução responsiva para mudar a forma como lidamos com eles?&lt;/p&gt;

&lt;p&gt;O primeiro passo seria buscar formatos alternativos de imagens que tenham uma melhor taxa de compressão. O Google, por exemplo, desenvolveu um &lt;strong&gt;novo formato de imagem&lt;/strong&gt; chamado &lt;a href=&#34;https://developers.google.com/speed/webp/&#34; target=&#34;_blank&#34;&gt;WebP&lt;/a&gt;, o qual é 26% menor que o PNG e 25 a 34% menor que o JPEG. O formato é suportado pelo Chrome, Opera, Yandex, Android e Safari, e pode ser ativado no Internet Explorer usando o &lt;a href=&#34;http://www.google.com/chromeframe?quickenable=true&#34; target=&#34;_blank&#34;&gt;Google Chrome Frameplugin&lt;/a&gt;. O problema principal deste formato é que o firefox não tem planos de implementá-lo. Sabendo disto, por enquanto, o seu uso generalizado é improvável.&lt;/p&gt;

&lt;p&gt;Outra ideia que está ganhando popularidade são as &lt;strong&gt;imagens JPEG progressivas&lt;/strong&gt;. Estas imagens são, como o nome sugere, progressivamente renderizadas. A primeira renderização é embaçada, então a imagem vai progressivamente ganhando nitidez. Já as imagens JPEG não-progressivas são renderizadas de cima pra baixo. Em seu artigo &lt;a href=&#34;http://calendar.perfplanet.com/2012/progressive-jpegs-a-new-best-practice/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;JPEG&amp;#8217;s progressivos: Uma nova boa prática&amp;#8221;&lt;/a&gt;, Ann Robson afirma que o JPEG progressivo aparenta ser mais veloz que o JPEG baseline. Um JPEG progressivo dá ao usuário uma impressão geral sobre a imagem antes mesmo de ela ser totalmente carregada, o que beneficia a experiência do usuário.&lt;/p&gt;

&lt;p&gt;Uma outra solução aos problemas de performance e tamanho de imagem está em &lt;strong&gt;alterar a taxa de compressão das imagens&lt;/strong&gt;. Durante muito tempo, pensamos que o alargamento da taxa de compressão de uma imagem prejudicaria a sua qualidade. Entretanto, Daan Jobsis fez uma extensa pesquisa sobre o assunto e escreveu um artigo a respeito chamado &lt;a href=&#34;http://blog.netvlies.nl/design-interactie/retina-revolution/&#34;&gt;&amp;#8220;Retina Revolution&amp;#8221;&lt;/a&gt;. Em seus experimentos, ele testou diferentes tamanhos de imagens e taxas de compressão, o que gerou uma solução muito interessante. Se você dobrar o tamanho de uma imagem, mas também usar uma taxa de compressão mais alta, a imagem terá um arquivo com um tamanho menor que o original, mas ainda serão nítidas em telas normais e de alta densidade. Com esta técnica, Jobsis reduziu em 75% o peso da imagem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110629.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Demonstração de compressão de imagens por Daan Jobsis.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110629.jpg?itok=DCu9elrj&#34; width=&#34;473&#34; height=&#34;242&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dadas as dores de cabeça das imagens responsivas, a ideia de ganhar a independência do pixel a partir de imagens, sempre que possível, está seduzindo cada vez mais designers e desenvolvedores. O formato SVG, por exemplo, pode ser usado para criar todos os elementos da interface de um website &lt;a style=&#34;line-height: 1.538em&#34; href=&#34;http://coding.smashingmagazine.com/2012/01/16/resolution-independence-with-svg/&#34; target=&#34;_blank&#34;&gt;independente da resolução&lt;/a&gt;. Os elementos serão dimensionados para dispositivos menores e não ficarão pixelados nos dispositivos de alta densidade de pixels. &lt;a style=&#34;line-height: 1.538em&#34; href=&#34;http://css-tricks.com/using-fonts-for-icons/&#34; target=&#34;_blank&#34;&gt;Font icons&lt;/a&gt; são outra tendência crescente. Eles envolvem o uso de uma fonte, onde os caracteres alfanuméricos são substituídos por ícones glifos, dando a flexibilidade que uma fonte oferece. Infelizmente, esta solução ainda não funciona com imagens, o que faz com que seja ansiosamente esperado uma marcação ou formato de imagem viável.&lt;/p&gt;

&lt;h2 id=&#34;o-desafio-do-layout-responsivo-reorganizar-e-trabalhar-o-conteúdo-sem-tocar-no-html&#34;&gt;O Desafio do Layout Responsivo: Reorganizar e Trabalhar o Conteúdo sem Tocar no HTML?&lt;/h2&gt;

&lt;p&gt;Sejamos realistas, os grids fluidos usados atualmente, produzidos com floats e blocos inline, são um pobre improviso aguardando uma solução melhor. Trabalhar com o layout e rearranjar blocos numa página mobile sem recorrer ao JavaScript hoje em dia é um pesadelo, e não é nem um pouco flexível. Isto é algo crucial a websites criados com CMS, onde o designer não pode alterar o HTML de cada página ou versão do site.&lt;/p&gt;

&lt;p&gt;E aí, como isto pode ser melhorado?&lt;/p&gt;

&lt;h3 id=&#34;quatro-soluções-com-css3-que-abordam-o-problema-do-layout-flexível&#34;&gt;Quatro Soluções com CSS3 que abordam o problema do Layout Flexível&lt;/h3&gt;

&lt;p&gt;A solução mais óbvia possível é o &lt;a href=&#34;http://www.w3.org/TR/css3-flexbox/&#34; target=&#34;_blank&#34;&gt;modelo de box flexível do CSS3&lt;/a&gt; (ou &lt;strong&gt;flexbox&lt;/strong&gt;). Seu status atual é a de &amp;#8220;candidato a recomendação&amp;#8221; na W3C, e é suportado pela &lt;a href=&#34;http://caniuse.com/#feat=flexbox&#34; target=&#34;_blank&#34;&gt;maioria dos browsers mobile e desktop&lt;/a&gt; (no IE começou na versão 10). O model permite reorganizar facilmente os elementos na tela, independente do HTML. Você também pode alterar o fluxo e a orientação do box, distribuir o espaço e alinhá-lo de acordo com o contexto. Abaixo um exemplo de layout que poderia ser reorganizado para mobile. A sintaxe ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.parent {
   display: flex;
   flex-flow: column; /* exibe itens na coluna */
}

.children {
   order: 1; /* muda a ordem dos elementos */
}
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110724.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110724.jpg?itok=jmzs81k7&#34; width=&#34;479&#34; height=&#34;297&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O artigo &lt;a href=&#34;http://coding.smashingmagazine.com/2011/09/19/css3-flexible-box-layout-explained/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;CSS3 Flexible Box Layout Explained&amp;#8221;&lt;/a&gt; dará a você uma compreensão mais profunda de como o flexbox funciona. (nota do tradutor: o bbburp traduziu um &lt;a href=&#34;http://www.bbburp.com.br/artigos/layout-com-flexbox-e-como-tirar-doce-de-crianca&#34; target=&#34;_blank&#34;&gt;excelente artigo sobre flexbox&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Outra solução bastante próxima do conceito flexbox de reordenação de blocos na página, porém com JavaScript, é o &lt;a href=&#34;https://github.com/edenspiekermann/minwidth-relocate&#34; target=&#34;_blank&#34;&gt;Relocate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um segundo tipo de layout, que hoje em dia é bastante utilizado no design responsivo, é o &lt;strong&gt;layout multiple-column do CSS3&lt;/strong&gt;. O módulo está no estágio de &amp;#8220;candidato a recomendação&amp;#8221; na W3C, e &lt;a href=&#34;http://www.w3.org/TR/css3-multicol/&#34; target=&#34;_blank&#34;&gt;funciona muito bem na maioria dos browsers&lt;/a&gt; (aguardado para IE9 e abaixo). A principal vantagem deste model é que o conteúdo pode fluir de uma coluna a outra, proporcionando um ganho enorme na flexibilidade. No que diz respeito a responsividade, o número de colunas pode ser alterado de acordo com o tamanho da viewport.&lt;/p&gt;

&lt;p&gt;É possível apenas ajustar o tamanho das colunas e deixar com que o browser calcule o seu número de acordo com o espaço disponível. Também é possível ajustar o número de colunas, com gaps e regras entre elas, e deixar que o browser calcule a sua largura.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110803.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110803.jpg?itok=1MS5s-6X&#34; width=&#34;477&#34; height=&#34;297&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A sintaxe se parece com isto:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.container {
   column-width: 10em ;
   /* O browser vai criar uma coluna de 10em.
   O número de colunas vai depender dos espaço disponível */
}

.container {
   columns: 5;
   /* O browser vai criar 5 colunas.
   O tamanho das colunas vai depender do espaço disponível. */
   column-gap: 2em;
}
&lt;/pre&gt;

&lt;p&gt;Para aprender mais, leia o artigo de David Walsh: &lt;a href=&#34;http://davidwalsh.name/css-columns&#34; target=&#34;_blank&#34;&gt;“CSS Columns”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Uma terceira propriedade CSS3 que pode ganhar mais atenção no futuro é a &lt;a href=&#34;http://dev.w3.org/csswg/css-grid/&#34; target=&#34;_blank&#34;&gt;CSS3 grid layout&lt;/a&gt;. Esta propriedade dá a designers e desenvolvedores um &lt;strong&gt;grid flexível&lt;/strong&gt;, onde eles podem trabalhar com na criação de layouts diferentes. Ela permite que os elementos de conteúdo sejam exibidos nas linhas e colunas sem uma estrutura definida. Primeiro você deve declarar um grid no container, e então colocar todos os elementos filhos neste grid virtual. Você pode, então, definir um grid diferente para dispositivos menores ou alterar a posição dos elementos no grid. Isto gera uma enorme flexibilidade quando usado com media queries, em mudanças de orientação, etc.&lt;/p&gt;

&lt;p&gt;A sintaxe para esta propriedade é assim (projeto de trabalho no W3C &amp;#8211; working draft &amp;#8211; a partir de 2 de abril de 2013):&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.parent {
   display: grid; /* declare o grid */
   grid-definition-columns: 1stgridsize  2ndgridsize …;
   grid-definition-rows: 1strowsize  2ndrowsize …;
}

.element {
   grid-column: 1;
   grid-row: 1;
}

.element2 {
   grid-column: 1; 
   grid-row: 3;
}
&lt;/pre&gt;

&lt;p&gt;Para definir o tamanho das linhas e colunas você pode usar diversas unidades, conforme &lt;a href=&#34;http://www.w3.org/TR/css3-grid-layout/#grid-definition-columns&#34;&gt;detalhado na especificação&lt;/a&gt;. Para posicionar os elementos, a especificação diz o seguinte: &amp;#8220;Cada parte está posicionada entre as linhas do grid, fazendo referência a linha de grid inicial e então especificando, se houver mais de uma, o número de linhas ou colunas distribuídas para determinar a linha de grid final, delimitando a área do layout&amp;#8221;.&lt;/p&gt;

&lt;p&gt;O maior problema com esta propriedade é que é &lt;a href=&#34;http://caniuse.com/#feat=css-grid&#34; target=&#34;_blank&#34;&gt;suportada apenas pelo IE10&lt;/a&gt;. Para aprender mais sobre este layout, leia o artigo &amp;#8220;&lt;a href=&#34;http://24ways.org/2012/css3-grid-layout/&#34; target=&#34;_blank&#34;&gt;Giving Content Priority With CSS3 Grid Layout&lt;/a&gt;&amp;#8221; de Rachel Andrew. Além disso, note que a especificação e a sintaxe para grid layouts com CSS foi alterada no dia 2 de abril de 2013. Andrew escreveu uma atualização sobre a sintaxe, a qual foi intitulada de &lt;a href=&#34;http://www.rachelandrew.co.uk/archives/2013/04/10/css-grid-layout---what-has-changed/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;CSS Grid Layout: What Has Changed?&amp;#8221;&lt;/a&gt; (CSS Grid Layout: O que mudou?).&lt;/p&gt;

&lt;p&gt;O último layout, que pode tornar-se bastante útil no futuro se implementado nos browsers, é o &lt;a href=&#34;http://www.w3.org/TR/2009/WD-css3-layout-20090402/&#34; target=&#34;_blank&#34;&gt;CSS3 template layout&lt;/a&gt;. Este módulo CSS3 funciona associando um elemento ao &amp;#8220;nome&amp;#8221; do layout, e em seguida ordenando os elementos num grid invisível. O grid pode ser fixo ou flexível, e pode ser alterado de acordo com o tamanho da viewport.&lt;/p&gt;

&lt;p&gt;A sintaxe fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.parent {
   display: &#34;ab&#34;
            &#34;cd&#34;; /* criando um grid invisível */
}

.child1 {
   position: a;
}

.child2 {
   position: b;
}

.child3 {
   position: c;
}

.child4 {
   position: d;
}
&lt;/pre&gt;

&lt;p&gt;E é renderizado assim:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110848.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110848.jpg?itok=y7SmFn5a&#34; width=&#34;477&#34; height=&#34;297&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Infelizmente, o suporte a navegadores para este módulo é praticamente nulo. Talvez algum dia, se designers e desenvolvedores mostrarem interesse suficiente nesta especificação, algum fabricante de browser possa implementá-lo. Por enquanto, você pode testá-lo usando &lt;a href=&#34;https://code.google.com/p/css-template-layout/&#34; target=&#34;_blank&#34;&gt;um polyfill&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;unidades-relativas-da-viewport-e-o-fim-do-layout-baseado-em-pixels&#34;&gt;Unidades Relativas da Viewport e o fim do Layout baseado em pixels&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/css3-values/#viewport-relative-lengths&#34; target=&#34;_blank&#34;&gt;Medidas de comprimento baseadas na viewport&lt;/a&gt; &amp;#8211; &lt;em&gt;vw&lt;/em&gt;, &lt;em&gt;vh&lt;/em&gt;, &lt;em&gt;vm&lt;/em&gt;, &lt;em&gt;vmin&lt;/em&gt; e &lt;em&gt;vmax&lt;/em&gt; &amp;#8211; são unidades de medida relativa das dimensões da própria viewport.&lt;/p&gt;

&lt;p&gt;Uma unidade vw é igual a 1% da largura do bloco inicial que a contém. Se a largura da viewport é 320, então 1&lt;em&gt;vw&lt;/em&gt; é 1 x &lt;sup&gt;320&lt;/sup&gt;&amp;frasl;&lt;sub&gt;100&lt;/sub&gt; = 3.2 pixels.&lt;/p&gt;

&lt;p&gt;A unidade vh funciona da mesma maneira, mas é relativa a altura da viewport. Desta forma, 50 &lt;em&gt;vh&lt;/em&gt; equivale a 50% da altura do documento. A esta altura você pode se perguntar qual a diferença desta unidade para a percentual. A diferença é que enquanto a unidade percentual é relativa ao tamanho do elemento pai, as unidades &lt;em&gt;vh&lt;/em&gt; e &lt;em&gt;vw&lt;/em&gt; serão sempre relativas ao tamanho da viewport, independente do tamanho dos seus elementos-pai.&lt;/p&gt;

&lt;p&gt;Isso fica bem interessante quando você quer, por exemplo, criar um container e ter a certeza de que ele nunca se extenderá abaixo da altura do viewport para que o usuário não precise rolar a página para baixo para achar o conteúdo.  Também possibilita que criemos um elemento com 100% da altura sem alterar todos os containers pai.&lt;/p&gt;

&lt;p&gt;A unidade &lt;em&gt;vmin&lt;/em&gt; é igualada ao menor valor da unidade &lt;em&gt;vm&lt;/em&gt; ou &lt;em&gt;vh&lt;/em&gt;, e &lt;em&gt;vmax&lt;/em&gt; ao maior valor; por isso, essas unidades também respondem perfeitamente às alterações na orientação dos dispositivos. Infelizmente, por enquanto, &lt;a href=&#34;http://caniuse.com/#feat=viewport-units&#34; target=&#34;_blank&#34;&gt;essas unidades não são suportadas pelo browser do Android&lt;/a&gt;. Sendo assim, pode ser que você ainda tenha que aguardar um tempo para utilizá-las.&lt;/p&gt;

&lt;h3 id=&#34;uma-palavra-sobre-tipografia-adaptável-adaptive-typography&#34;&gt;Uma Palavra sobre Tipografia Adaptável (Adaptive Typography)&lt;/h3&gt;

&lt;p&gt;O layout de um site vai depender muito do conteúdo. Não posso concluir uma seção que fala sobre as diversas possibilidades do layout responsivo sem abordar a tipografia. O CSS3 introduziu uma unidade para fontes que pode ser bastante útil a tipografia responsiva: &lt;a href=&#34;http://www.w3.org/TR/css3-values/#font-relative-lengths&#34; target=&#34;_blank&#34;&gt;a unidade “&lt;em&gt;rem&lt;/em&gt;”&lt;/a&gt;. Enquanto as fontes medidas pela unidade “_em_” apresentam um tamanho herdado do seu elemento pai, a fonte medida pela unidade “rem” é relativa ao tamanho da fonte do seu elemento root (ou raiz). Para um site responsivo, você poderia escrever o CSS como o código abaixo, e em seguida alterar o tamanho de todas as fontes simplesmente mudando o tamanho da fonte especificada no elemento &lt;em&gt;html&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;html {
   font-size: 14px;
}

p {
   font-size: 1rem /* isto tem 14px */
}

@media screen and (max-width:380px) {
   html {
      font-size: 12px;
      /* tornando a fonte menor para dispositivos mobile */
   }

   p {
      font-size: 1rem;
      /* isto agora equivale a 12px */
   }
}
&lt;/pre&gt;

&lt;p&gt;Com exceção do IE8 e do Opera mini, o &lt;a href=&#34;http://caniuse.com/#search=rem&#34; target=&#34;_blank&#34;&gt;suporte ao &amp;#8220;&lt;em&gt;rem&lt;/em&gt;&amp;#8220;&lt;/a&gt; é excelente. Para aprender mais sobre a unidade &lt;em&gt;rem&lt;/em&gt;, leia o artigo de Matthew Lettini &lt;a href=&#34;http://techtime.getharvest.com/blog/in-defense-of-rem-units&#34;&gt;&amp;#8220;In Defense of Rem Units&amp;#8221;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-melhor-maneira-de-trabalhar-responsivamente-com-outros-conteúdos-complexos&#34;&gt;A Melhor Maneira de Trabalhar Responsivamente com Outros Conteúdos Complexos&lt;/h2&gt;

&lt;p&gt;Aos poucos vamos ficando cada vez melhor em lidar com imagens e textos em layouts responsivos, embora ainda seja necessário encontrar soluções para outros tipos mais complexos de conteúdo&lt;/p&gt;

&lt;h3 id=&#34;lidando-com-formulários-no-website-responsivo&#34;&gt;Lidando com Formulários no Website Responsivo&lt;/h3&gt;

&lt;p&gt;De um modo geral, lidar com formulários, especialmente os muito grandes, no web design responsivo é um enorme desafio! Quanto maior o formulário, mais complicado será adaptá-lo a dispositivos menores. A adaptação física não é tão difícil; a maioria dos designers simplesmente colocam os elementos do formulário numa única coluna e esticam os inputs completando a largura da tela. Entretanto, fazer formulários visualmente atraentes não é o bastante. Temos que torná-los fáceis de usar também nos dispositivos mobile.&lt;/p&gt;

&lt;p&gt;Para começar, &lt;a href=&#34;http://uxdesign.smashingmagazine.com/2010/03/11/forms-on-mobile-devices-modern-solutions/&#34; target=&#34;_blank&#34;&gt;Luke Wroblewski aconselha&lt;/a&gt; evitar inputs de texto, &lt;strong&gt;contando com checkboxes, radio buttons e menus drop-downs&lt;/strong&gt;, e utilizando o select sempre que possível. Desta forma, o usuário precisa digitar o mínimo de informação. Outra dica é não fazer com que o usuário aperte o botão &amp;#8220;enviar&amp;#8221; antes de obter um feedback sobre o conteúdo a ser submetido. A checagem de erros imediata é extremamente importante no mobile, onde a maioria dos formulários ultrapassa a altura da tela. Se o usuário digitar um campo incorretamente e tiver que enviar o formulário para só assim perceber o erro, provavelmente ele não verá onde o erro está.&lt;/p&gt;

&lt;p&gt;No futuro, novos inputs e atributos HTML5 serão de grande ajuda na melhoria dos formulários, e não haverá a necessidade de utilizar tanto JavaScript. Por exemplo, você poderia usar o &lt;a href=&#34;http://www.w3.org/wiki/HTML5_form_additions#required&#34; target=&#34;_blank&#34;&gt;atributo&lt;/a&gt; &lt;em&gt;required&lt;/em&gt; para dar feedback imediato sobre um campo específico. Infelizmente, por enquanto, &lt;a href=&#34;http://caniuse.com/#search=required&#34; target=&#34;_blank&#34;&gt;o suporte para dispositivos mobile&lt;/a&gt; ainda é ruim. O &lt;a href=&#34;http://www.w3.org/TR/2011/WD-html5-20110525/common-input-element-attributes.html#the-autocomplete-attribute&#34; target=&#34;_blank&#34;&gt;atributo&lt;/a&gt; &lt;em&gt;autocomplete&lt;/em&gt; também poderia ajudar a montar formulários mais responsivos.&lt;/p&gt;

&lt;p&gt;Um smartphone é um bem pessoal, por isso podemos assumir que dados como nome e endereço serão algo consistente. Usando o atributo &lt;em&gt;autocomplete&lt;/em&gt; do HTML5 &lt;strong&gt;poderíamos fazer um auto-preenchimento dos campos&lt;/strong&gt; sem que o usuário tivesse que digitar todas as informações. Há ainda uma &lt;a href=&#34;http://www.w3.org/wiki/HTML5_form_additions#New_form_controls&#34; target=&#34;_blank&#34;&gt;lista inteira de novos inputs HTML5&lt;/a&gt; que podem ser utilizados muito em breve, a fim de tornar os formulários mais responsivos.&lt;/p&gt;

&lt;p&gt;Datas em elementos de formulário são um bom exemplo do que se pode melhorar com o HTML5. Já estamos acostumados a contar com JavaScript ao criar calendários. Eles podem ser muito úteis se utilizados em grandes telas desktop, mas difíceis de usar em dispositivos touch screen, pois selecionar a data certa com o dedo é difícil quando a área sensível ao toque é muito pequena.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307110938.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Como posso selecionar uma data se meu dedo está tocando três ao mesmo tempo?&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307110938.jpg?itok=sakIwk63&#34; width=&#34;478&#34; height=&#34;248&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uma solução promissora está no novo &lt;em&gt;input type=&amp;#8221;date&amp;#8221;&lt;/em&gt; do HTML5 , que define uma string no formato de data. Já o &lt;em&gt;input type=&amp;#8221;datetime&amp;#8221;&lt;/em&gt; define uma string no formato de data e hora. A grande vantagem deste método é que deixamos o browser decidir qual UI utilizar. Desta forma, a UI é automaticamente otimizada em dispositivos mobile. Abaixo um exemplo da aparência de um &lt;em&gt;input type=&amp;#8221;date&amp;#8221;&lt;/em&gt; no desktop, em smartphone e tablet com Android (com o browser Chrome), Iphone e Ipad.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111218.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Renderização do input input type=&amp;quot;date&amp;quot; em diferentes dispositivos.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111218.jpg?itok=dEKeEFpj&#34; width=&#34;402&#34; height=&#34;478&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note que as screenshots foram feitas em meu browser e no Android phone, então a linguagem foi automaticamente adaptada ao sistema de linguagem (Francês). Ao utilizar componentes nativos, você não precisa mais adaptar a lingua para diferentes versões do site.&lt;/p&gt;

&lt;p&gt;Por enquanto, com exceção do Opera e do Chrome, &lt;a href=&#34;http://caniuse.com/input-datetime&#34; target=&#34;_blank&#34;&gt;não há suporte&lt;/a&gt; ao &lt;em&gt;input type=&amp;#8221;date&amp;#8221;&lt;/em&gt; para o desktop. Browsers nativos do Android ainda não o suportam completamente, mas o Chrome Android sim, e também o Safari para iOS. O fato é que ainda há muito a ser trabalhado para sermos capazes de utilizar esta solução em sites responsivos. Enquanto isto, você pode usar um polyfill como o &lt;a href=&#34;http://demo.mobiscroll.com/calendar/calendartime&#34; target=&#34;_blank&#34;&gt;Mobiscroll&lt;/a&gt; para browsers mobile que não suportarem o atributo nativamente.&lt;/p&gt;

&lt;p&gt;Além destas soluções de inputs HTML5, foram feitas tentativas para melhorar outros padrões de design, como as &lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1653&#34; target=&#34;_blank&#34;&gt;senhas do mobile&lt;/a&gt; e &lt;a href=&#34;http://www.lukew.com/ff/entry.asp?756&#34; target=&#34;_blank&#34;&gt;inputs complexos utilizando máscaras&lt;/a&gt;. Como você pode notar, isto tudo é experimental. O formulário responsivo perfeito não existe no momento; Muito ainda deve ser feito neste campo.&lt;/p&gt;

&lt;h3 id=&#34;lidando-com-tabelas-em-sites-responsivos&#34;&gt;Lidando com Tabelas em Sites Responsivos&lt;/h3&gt;

&lt;p&gt;Outro tipo de conteúdo que fica bastante confuso em sites mobile e responsivos são as tabelas. A maioria das tabelas são orientadas horizontalmente e apresentam uma grande quantidade de dados de uma só vez. Imagine então que exibi-las corretamente em small screens seja bem complicado. Tabelas HTML são bastante flexíveis &amp;#8211; você pode usar porcentagens para mudar a largura das colunas &amp;#8211; o que também pode rapidamente tornar o conteúdo ilegível.&lt;/p&gt;

&lt;p&gt;Ainda não encontraram uma forma perfeita de mostrar tabelas, mas algumas sugestões foram feitas:&lt;/p&gt;

&lt;p&gt;Uma forma de abordagem é &lt;strong&gt;esconder colunas consideradas &amp;#8220;menos importantes&amp;#8221;&lt;/strong&gt;, e oferecer checkboxes para que o usuário escolha quais ele deseja ver. No desktop, todas as colunas seriam mostradas, enquanto no mobile o número de colunas dependeria do tamanho da tela. O Filament Group &lt;a href=&#34;http://filamentgroup.com/lab/responsive_design_approach_for_complex_multicolumn_data_tables/&#34; target=&#34;_blank&#34;&gt;explica este método&lt;/a&gt; e &lt;a href=&#34;http://filamentgroup.com/examples/rwd-table-patterns/&#34; target=&#34;_blank&#34;&gt;demonstra&lt;/a&gt; em um de seus artigos. A solução também é usada no &lt;a href=&#34;http://view.jquerymobile.com/tables/docs/tables/table-column-toggle.html&#34; target=&#34;_blank&#34;&gt;table column toggle do jQuery Mobile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111308.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Alguns exemplos de tabelas responsivas.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111308.jpg?itok=buAWCW1w&#34; width=&#34;479&#34; height=&#34;429&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A segunda abordagem brinca com a ideia de &lt;strong&gt;scroll em tabelas&lt;/strong&gt;. Você poderia &amp;#8220;fixar&amp;#8221; uma única coluna com tamanho fixo a esquerda, e então deixar uma scroll bar numa pequena parte da tabela a direita. &lt;a href=&#34;http://dbushell.com/2012/01/05/responsive-tables-2/&#34; target=&#34;_blank&#34;&gt;David Bushell implementa esta ideia&lt;/a&gt; em um artigo usando CSS para exibir todo o conteúdo da _&lt;/p&gt;

&lt;p&gt;_&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;__ do lado esquerdo da tabela, deixando o usuário mover-se pelo conteúdo a direita através da scroll bar. &lt;strong&gt;Zurb&lt;/strong&gt; utiliza a mesma ideia, mas de um jeito diferente, &lt;a href=&#34;http://zurb.com/playground/responsive-tables&#34; target=&#34;_blank&#34;&gt;neste plug in&lt;/a&gt;. Neste caso, as headers ficam no topo da tabela, e a tabela é duplicada com JavaScript de modo que apenas a primeira coluna seja mostrada a esquerda, e as demais colunas sejam mostradas do lado direito através da scroll bar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111348.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Dois exemplos de tabelas responsivas com scroll&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111348.jpg?itok=2bOK8ygE&#34; width=&#34;477&#34; height=&#34;455&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A grande questão em utilizar scroll bars e propriedades CSS tais como &lt;em&gt;overflow: auto&lt;/em&gt; é que muitos dispositivos mobile e tablets simplesmente não exibem uma scroll bar visível. A área da direita da tabela permite a rolagem, mas o usuário não terá qualquer indício visual desta possibilidade. Precisamos encontrar uma maneira de indicar que há mais conteúdo a ser exibido à direita.&lt;/p&gt;

&lt;p&gt;Uma terceira abordagem é em &lt;strong&gt;reestruturar a tabela e dividir as colunas&lt;/strong&gt; em listas de itens com cabeçalhos.Esta técnica é utilizada no &lt;a href=&#34;http://view.jquerymobile.com/tables/docs/tables/table-reflow.html&#34; target=&#34;_blank&#34;&gt;&amp;#8220;reflow mode&amp;#8221;&lt;/a&gt; no jQuery Mobile e foi explicada por Chris Coyier em seu artigo &lt;a href=&#34;http://css-tricks.com/responsive-data-tables/&#34;&gt;“Responsive Data Tables”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111441.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Reestruturando uma tabela para dispositivos móveis&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111441.jpg?itok=nOmy8Tpm&#34; width=&#34;478&#34; height=&#34;438&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Existem &lt;a href=&#34;http://css-tricks.com/responsive-data-table-roundup/&#34; target=&#34;_blank&#34;&gt;diversas outras técnicas&lt;/a&gt;, e qual usar depende muito do seu projeto. Não há dois projetos iguais, por isso só posso mostrar como outras pessoas estão lidando com isto. Se você chegar a uma boa solução, por favor compartilhe nos comentários, no Twitter ou em qualquer outro lugar. Estamos no mesmo barco, e exibir tabelas no mobile está uma droga (é sério). Então vamos melhorá-las juntos!&lt;/p&gt;

&lt;h2 id=&#34;incorporando-conteúdo-de-terceiros-o-problema-do-iframe-responsivo&#34;&gt;Incorporando Conteúdo de Terceiros: O problema do Iframe Responsivo&lt;/h2&gt;

&lt;p&gt;Muitos desses conteúdos, ao serem incorporados, fazem você utilizar iframes. Mas vamos encarar: lidar com iframes no design responsivo é doloroso. O  grande problema é que iframes exigem largura e altura fixa diretamente no seu código HTML. Forçar uma largura de 100% no iframe deveria resolver, mas daí você perderia a proporção do conteúdo incorporado. Então, para incorporar um vídeo ou slideshow e preservar a proporção original, seria necessário encontrar uma solução alternativa.&lt;/p&gt;

&lt;h3 id=&#34;uma-solução-com-html-e-css&#34;&gt;Uma solução com HTML e CSS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tjkdesign.com/&#34; target=&#34;_blank&#34;&gt;Thierry Koblentz&lt;/a&gt; escreveu um ótimo artigo chamado &lt;a href=&#34;http://alistapart.com/article/creating-intrinsic-ratios-for-video&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Creating Intrinsic Ratios for Vídeo&amp;#8221;&lt;/a&gt; (criando proporções intrínsecas para vídeos), onde ele propõe uma forma de incorporar vídeos responsivos usando uma proporção 16:9. Esta solução pode ser estendida a outros tipos de conteúdos, como apresentações em SlideShare e Google Maps. Koblentz envolve o iframe num container usando uma classe a qual podemos manipular no CSS. O container torna possível o iframe ser redimensionado fluidamente, mesmo tendo um valor fixo de pixels no HTML. O &lt;a href=&#34;http://amobil.se/2011/11/responsive-embeds/&#34; target=&#34;_blank&#34;&gt;código, adaptado por Anders M. Andersen&lt;/a&gt;, fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.embed-container  {
   position: relative;
   padding-bottom: 56.25%; /* 16:9 ratio */
   padding-top: 30px; /* solução para IE 6 */
   height: 0;
   overflow: hidden;
}

.embed-container iframe,
.embed-container object,
.embed-container embed {
   position: absolute;
   top: 0;
   left: 0;
   width: 100%;
   height: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Isto vai funcionar em todos os iframes. O único problema é que você terá que envolver todos os iframes de seu site em um elemento. Enquanto esta técnica funcionaria muito bem para desenvolvedores que tivessem controle total de seu código, ou para clientes que estivessem razoavelmente familiarizados com HTML, não funcionaria com clientes que não tivessem qualquer habilidade técnica. Você poderia, é claro, usar JavaScript para detectar os elementos iframe e automaticamente incorporá-los na classe, mas como podemos ver, seria uma grande solução, mas não a solução perfeita.&lt;/p&gt;

&lt;h2 id=&#34;lidando-com-vídeos-responsivos-no-futuro&#34;&gt;Lidando com Vídeos Responsivos no Futuro&lt;/h2&gt;

&lt;p&gt;O HTML5 abre um mundo de possibilidades para o vídeo &amp;#8211; particularmente com o &lt;a href=&#34;http://www.w3.org/wiki/HTML/Elements/video&#34;&gt;elemento video&lt;/a&gt;. A grande notícia é que o &lt;a href=&#34;http://caniuse.com/#feat=video&#34; target=&#34;_blank&#34;&gt;suporte a este elemento é surpreendentemente bom em dispositivos mobile&lt;/a&gt;! Com exceção do Opera Mini, a maioria dos browsers o suportam. O elemento video também é bastante flexível, e apresentar um vídeo responsivo é tão simples quanto isto:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;video {
   max-width: 100%;
   height: auto;
}
&lt;/pre&gt;

&lt;p&gt;Você provavelmente está se perguntando, &amp;#8220;Então, qual o problema?&amp;#8221;&lt;/p&gt;

&lt;p&gt;O problema é que, embora YouTube e Vimeo suportem o elemento video, você ainda precisa incorporar vídeos usando o tal método do iframe. E isso meu amigo, é uma droga. Sendo assim, até que YouTube e Vimeo ofereçam um meio de incorporar vídeos em sites utilizando a tag video do HTML5, &lt;strong&gt;teremos que descobrir soluções&lt;/strong&gt; para que incorporações de vídeo trabalhem adequadamente em sites responsivos. Pensando nisto, Chris Coyier criou uma solução com um plugin jQuery chamado &lt;a href=&#34;http://fitvidsjs.com/&#34; target=&#34;_blank&#34;&gt;FitVids.js&lt;/a&gt;. Ele usa a primeira técnica mencionada acima: cria um container em torno do iframe e preserva a sua proporção.&lt;/p&gt;

&lt;h3 id=&#34;incorporando-google-maps&#34;&gt;Incorporando Google Maps&lt;/h3&gt;

&lt;p&gt;Se você incorporou um Google Map em seu site, a técnica descrita acima com container e CSS funcionará. Mas, de novo, é um hackzinho sujo. Além disso, o mapa vai redimensionar proporcionalmente e pode ficar tão pequeno, que poderá perder a área de foco que você quer mostrar ao usuário. A &lt;a href=&#34;https://developers.google.com/maps/&#34; target=&#34;_blank&#34;&gt;página do Google Maps para mobile&lt;/a&gt; diz que você pode utilizar uma &lt;a href=&#34;https://developers.google.com/maps/documentation/staticmaps/&#34; target=&#34;_blank&#34;&gt;API de mapas estáticos&lt;/a&gt; para incorporações mobile. Usar um mapa estático de fato eliminaria os problemas com iframe. Brad Frost escreveu um belo artigo a respeito, e criou uma demo de &lt;a href=&#34;http://bradfrostweb.com/blog/post/adaptive-maps/&#34; target=&#34;_blank&#34;&gt;mapas adaptáveis (adaptive maps)&lt;/a&gt; onde utiliza a mesma técnica. Um JavaScript detecta o tamanho da tela, em seguida o iframe é substituído pelo mapa estático em celulares. Como podemos ver, temos novamente que recorrer a técnicas que lidem com problemas de iframe, devido a ausência de uma solução nativa (ou seja, do Google).&lt;/p&gt;

&lt;h3 id=&#34;precisamos-de-apis-melhores&#34;&gt;Precisamos de APIS Melhores&lt;/h3&gt;

&lt;p&gt;Agora a grande pergunta: Há um jeito melhor? O maior problema em usar iframes para incorporar o conteúdo de terceiros responsivamente é a falta de controle sobre o código gerado. &lt;strong&gt;Desenvolvedores e designers são muito dependentes&lt;/strong&gt; de conteúdo de terceiros e, por extensão, o seu HTML gerado. E o número de sites que oferecem conteúdo de outros sites cresce rapidamente. Precisamos de soluções muito melhores do que iframes para incorporar este conteúdo.&lt;/p&gt;

&lt;p&gt;Agora, fale a verdade: incorporar iframes do Facebook é um verdadeiro sofrimento. A falta de controle sobre o CSS pode fazer nosso trabalho parecer bem desleixado e algumas vezes arruinar o design. A web é um lugar aberto, por isso talvez fosse um bom momento em começar a pensar em mais API&amp;#8217;s abertas! No futuro, vamos precisar de API&amp;#8217;s que sejam melhores e mais simples de utilizar, de modo que qualquer pessoa possa incorporar um conteúdo de maneira flexível, sem ter que contar com iframes fixos não responsivos. No entanto, até que decidam criar essas API&amp;#8217;s, estamos presos a iframes medíocres, tendo que recorrer a truques para torná-los viáveis.&lt;/p&gt;

&lt;h2 id=&#34;navegação-responsiva-um-panorama-pelas-soluções-atuais&#34;&gt;Navegação Responsiva: Um Panorama pelas Soluções Atuais&lt;/h2&gt;

&lt;p&gt;Outro grande desafio é o que fazer com a navegação. Quanto mais complexa e profunda a arquitetura de um website, mais inventivos precisamos ser.&lt;/p&gt;

&lt;p&gt;(Nota do tradutor: publiquei aqui no Tableless uma tradução sobre &lt;a href=&#34;http://tableless.com.br/padroes-complexos-de-navegacao-no-design-responsivo&#34;&gt;padrões complexos de navegação no web design responsivo&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Uma das primeiras tentativas de lidar com isto de maneira simples foi &lt;a href=&#34;http://css-tricks.com/convert-menu-to-dropdown/&#34; target=&#34;_blank&#34;&gt;converter a navegação em um menu dropdown&lt;/a&gt; para telas pequenas. Infelizmente, esta forma não é a ideal. Primeiro porque esta solução fica terrivelmente complicada numa navegação multi-level, podendo também causar problemas de acessibilidade. Eu recomendo o artigo &lt;a href=&#34;http://uxmovement.com/forms/stop-misusing-select-menus/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Stop Misusing Select Menus&amp;#8221;&lt;/a&gt; para entender todos os problemas consequentes desta técnica.&lt;/p&gt;

&lt;p&gt;Algumas pessoas, incluindo &lt;a href=&#34;http://bradfrostweb.com/blog/web/responsive-nav-patterns/&#34; target=&#34;_blank&#34;&gt;Brad Frost&lt;/a&gt; e Luke Wroblewski, têm tentado resolver este problema. Brad Frost compilou algumas de suas técnicas no site &lt;a href=&#34;http://bradfrost.github.io/this-is-responsive/patterns.html#navigation&#34;&gt;This Is Responsive&lt;/a&gt;, na seção de navegação.&lt;/p&gt;

&lt;p&gt;A navegação alternada (toggle navigation) envolve ocultar o menu nos dispositivos mobile, exibindo um único link. Quando o usuário dá um clique todos os links aparecem como um bloco de elementos abaixo do link, empurrando o conteúdo principal pra baixo da navegação.&lt;/p&gt;

&lt;p&gt;Uma variante deste tipo de menu, inspirado em alguns padrões de aplicativos nativos, é a navegação &lt;a href=&#34;http://coding.smashingmagazine.com/2013/01/15/off-canvas-navigation-for-responsive-website/&#34; target=&#34;_blank&#34;&gt;off-canvas&lt;/a&gt;. Essa navegação fica escondida debaixo de um link no menu ou ícone. Quano o usuário clica, a navegação desliza em forma de painel pela esquerda ou direita, empurrando o conteúdo principal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111531.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Alguns exemplos do toggle navigation&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111531.jpg?itok=LzZHvbzg&#34; width=&#34;478&#34; height=&#34;225&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;p&gt;
    O problema com essas técnicas é que a navegação permanece no topo da tela. Neste artigo &lt;a href=&#34;http://www.lukew.com/ff/entry.asp?1649&#34;&gt;&amp;#8220;Responsive Navigation: Optimizing for Touch Across Devices&amp;#8221;&lt;/a&gt;, Luke Wroblewski mostra &lt;strong&gt;quais zonas são facilmente acessíveis aos diferentes tipos de dispositivos&lt;/strong&gt;. A área superior esquerda é a mais difícil de chegar num dispositivo mobile.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111609.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img title=&#34;Áreas facilmente acessíveis na tela de celulares e tablets, de acordo com Luke Wroblewski.&#34; alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111609.jpg?itok=1xGtEHVW&#34; width=&#34;478&#34; height=&#34;356&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Com base nisto, Jason Weaver criou &lt;a href=&#34;http://jasonweaver.name/lab/touchnav/v2/&#34; target=&#34;_blank&#34;&gt;algumas demos&lt;/a&gt; com a navegação no bottom da tela. Uma solução é o &lt;a href=&#34;http://codepen.io/bradfrost/full/mlyvu&#34; target=&#34;_blank&#34;&gt;footer anchor&lt;/a&gt; (âncora de rodapé), com a navegação fixada no bottom da página para dispositivos menores, e um menu link que envia o usuário até lá. Esta técnica utiliza o sistema link âncora do HTML.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
  &lt;p&gt;
    &lt;a href=&#34;http://codepen.io/bradfrost/full/orJwL&#34; target=&#34;_blank&#34;&gt;Diversas&lt;/a&gt; outras &lt;a href=&#34;http://codepen.io/bradfrost/full/vcuem&#34; target=&#34;_blank&#34;&gt;tentativas&lt;/a&gt; foram &lt;a href=&#34;http://codepen.io/bradfrost/full/qwJvF&#34; target=&#34;_blank&#34;&gt;feitas&lt;/a&gt; para solucionar problemas de navegação no web design responsivo. Como você pode ver, ainda não há uma solução perfeita; isso realmente depende do projeto e da profundidade da navegação. Felizmente para nós, alguma pessoas estão tentando resolver esse problema e têm compartilhado suas experiências com a comunidade.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;Outra questão não resolvida é qual ícone usar&lt;/strong&gt; para dizer ao usuário &amp;#8220;Olá! há um menu escondido aqui. Clique em mim!&amp;#8221;. Alguns websites tem um símbolo de mais (+), outros uma grade de quadrados e alguns têm três linhas (como um ícone de hamburger).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;a href=&#34;http://www.bbburp.com.br/sites/default/files/images/20130307111659.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.bbburp.com.br/sites/default/files/styles/large/public/images/20130307111659.jpg?itok=Sa8jlYOv&#34; width=&#34;477&#34; height=&#34;138&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Para ver esses ícones usado em websites reais, dê uma olhada no &lt;a href=&#34;http://stuffandnonsense.co.uk/blog/about/we_need_a_standard_show_navigation_icon_for_responsive_web_design&#34; target=&#34;_blank&#34;&gt;&amp;#8220;We Need a Standard ‘Show Navigation’ Icon for Responsive Web Design”&lt;/a&gt; (precisamos de um ícone padrão no web design responsivo para &amp;#8220;mostrar a navegação&amp;#8221;).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O maior problema é descobrir qual desses ícones seria o mais reconhecível a uma quantidade de usuários. Se todos concordássemos em usar um deles, os usuários seriam instruídos a reconhecê-los. O problema é, qual escolher? Eu realmente gostaria de saber qual ícone vocês usam, então não hesite em compartilhar nos comentários 1 (1 &amp;#8211; nota do tradutor: para deixar sua opinião sobre qual o ícone você utiliza, acesse o artigo original).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;
    Especificidades Mobile: &amp;#8220;O usuário está com um dispositivo mobile? Se sim, o que pode ser feito?&amp;#8221;
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Dispositivos mobile e tablets são um mundo novo &amp;#8211; longe dos computadores desktops -, com suas próprias regras, comportamentos e capacidades. Podemos querer adaptar nossos projetos a esta nova gama de capacidades.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    Detectando Capacidades Touch com JavaScript Nativo
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Além do tamanho da tela, aposto que se você perguntasse qual a principal diferença entre mobiles (incluindo tablets) e desktops, a maioria das pessoas diriam ser a capacidade touch. Não há mouse num celular (é verdade!), e com exceção de alguns dispositivos híbridos raros, em que você pode plugar um mouse, você não vai poder realizar muitos eventos num tablet com um mouse. Isto significa que, dependendo do browser, a pseudo-classe &lt;em&gt;:hover&lt;/em&gt; do CSS pode não funcionar. Alguns browsers são inteligentes o bastante para oferecer um fallback nativo ao evento do hover traduzindo em um evento touch. Infelizmente, nem todos os browsers são tão flexíveis assim. Criar um design que não dependa de elementos ocultos, a serem revelados sob eventos &lt;em&gt;:hover&lt;/em&gt;, seria o mais sensato.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;Capturar eventos touch&lt;/strong&gt; poderia também ser uma outra solução. A W3C working group começou a trabalhar numa &lt;a href=&#34;http://www.w3.org/TR/touch-events/&#34; target=&#34;_blank&#34;&gt;especificação de eventos touch&lt;/a&gt;. Futuramente, seremos capazes de capturar eventos tais como &lt;em&gt;touchstart&lt;/em&gt;, &lt;em&gt;touchmove&lt;/em&gt; e &lt;em&gt;toucheend&lt;/em&gt;. Seremos capazes de lidar com esses eventos diretamente no JavaScript sem a necessidade de frameworks de terceiros como &lt;a href=&#34;http://eightmedia.github.io/hammer.js/&#34; target=&#34;_blank&#34;&gt;Hammer.js&lt;/a&gt; ou &lt;a href=&#34;http://jgestures.codeplex.com/&#34; target=&#34;_blank&#34;&gt;jGestures&lt;/a&gt;. Mas JavaScript é uma coisa &amp;#8211; E o que acontece com o CSS?
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    CSS nível 4 &amp;#8211; Media Query &amp;#8220;Pointer&amp;#8221;
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O CSS nível 4 especifica uma &lt;a href=&#34;http://dev.w3.org/csswg/mediaqueries4/#pointer&#34; target=&#34;_blank&#34;&gt;nova media querry chamada &amp;#8220;pointer&amp;#8221;&lt;/a&gt;, que pode ser usada para capturar a existência e precisão de um dispositivo apontador (pointing device), tal como um mouse. A media query tem um dos três valores:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;
      &lt;em&gt;none&lt;/em&gt;&lt;br /&gt; O dispositivo não tem nenhum pointing device.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;coarse&lt;/em&gt;&lt;br /&gt; O dispositivo tem um pointing device com precisão limitada, por exemplo, um celular ou tablet com capacidades touch, onde o &amp;#8220;pointer&amp;#8221; seria um dedo.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;em&gt;fine&lt;/em&gt;&lt;br /&gt; O dispositivo tem um pointing device preciso, como um mouse, trackpad ou caneta (stylus).
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Usando esta media query, nós podemos ampliar a maneira de utilização de botões e links para dispositivos móveis:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-css&#34;&gt;
@media  (pointer:coarse) {
   input[type=&amp;ldquo;submit&amp;rdquo;],
       a.button {
       min-width: 30px;
       min-height: 40px;
       background: transparent;
   }
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    A media query pointer ainda não é suportada &amp;#8211; apenas sendo proposta. Todavia, ser potencial é enorme, pois seria permitiria &lt;strong&gt;detectar dispositivos touch via CSS&lt;/strong&gt;, sem a necessidade de uma bilbioteca, como &lt;a href=&#34;http://modernizr.com/docs/#touch&#34; target=&#34;_blank&#34;&gt;Modernizr&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    CSS nível 4 &amp;#8211; Media Query &amp;#8220;Hover&amp;#8221;
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    A especificação CSS nível 4 propõe uma nova &lt;a href=&#34;http://dev.w3.org/csswg/mediaqueries4/#hover&#34; target=&#34;_blank&#34;&gt;media query hover&lt;/a&gt;, que detecta se o sistema primário do dispositivo dá suporte ao hover. Ele retorna valores&lt;em&gt; boleanos: 1&lt;/em&gt; se o dispositivo suporta hover, &lt;em&gt;&lt;/em&gt; se não suporta. Note que isto não tem nada a ver com a pseudo-classe &lt;em&gt;:hover&lt;/em&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Usando a media query hover podemos melhorar a interface e ocultar certas características dos dispositivos que o suportam. O código fica mais ou menos assim:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-css&#34;&gt;
@media  (hover) {
   .hovercontent { display: none; }
   /* oculta o conteúdo apenas para dispositivos com suporte ao hover. */
   .hovercontent:hover { display: block; }
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Pode também ser usado para criar menus dropdowns com hover; e o fallback para dispositivos mobile é em CSS nativo, sem a necessidade de um framework que detecte a feature.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    CSS nível 4 &amp;#8211; Media Query Luminosity
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Outra capacidade dos dispositivos mobile é o sensor de luminosidade. A especificação CSS nível 4 tem a &lt;a href=&#34;http://dev.w3.org/csswg/mediaqueries4/#luminosity&#34; target=&#34;_blank&#34;&gt;media query luminosity&lt;/a&gt;, que nos dá acesso ao sensor de luz dos dispositivos diretamente no CSS. Abaixo a descrição da especificação.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
    &lt;p&gt;
      A característica da media &amp;#8220;luminosity&amp;#8221; é usada para verificar a luminosidade do ambiente o qual o dispositivo está sendo usado, e permitir que o autor ajuste o estilo do documento responsivamente.
    &lt;/p&gt;
  &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    No futuro, seremos capazes de criar &lt;strong&gt;websites que respondam a luminosidade do ambiente&lt;/strong&gt;. Isto vai melhorar muito a experiência do usuário. Seremos capazes de detectar, por exemplo, ambientes extremamente brilhantes usando o valor &lt;em&gt;washed&lt;/em&gt;, adaptando o contraste do site ao local. O valor &lt;em&gt;dim&lt;/em&gt; é usado para ambientes escuros (a noite por exemplo), e o valor &lt;em&gt;normal&lt;/em&gt; para quando o nível de luminosidade não necessita de qualquer tipo de adaptação.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O código fica assim:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;pre class=&#34;lang-css&#34;&gt;
@media  (luminosity: washed) {
   p { background: white; color: black; font-size: 2em; }
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Como podemos ver, as CSS4 prometem um monte de coisas novas. Se você está curioso em ver o que vem por aí &amp;#8211; não só para mobile &amp;#8211; então dê uma olhada na &lt;a href=&#34;http://coding.smashingmagazine.com/2013/01/21/sneak-peek-future-selectors-level-4/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Sneak Peek Into the Future: Selectors, Level 4&amp;#8221;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;
    Mais Recursos Mobile para Detectar o Uso de API&amp;#8217;s e JavaScript
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Muitas outras coisas poderiam ser detectadas para tornar a experiência do usuário surpreendente num site responsivo. Por exemplo, poderíamos ter acesso nativo ao giroscópio, bússola e acelerômetro para detectar a orientação do dispositivo usando o &lt;em&gt;DeviceOrientationEvent&lt;/em&gt; do HTML5. O &lt;a href=&#34;http://caniuse.com/#feat=deviceorientation&#34;&gt;suporte ao DeviceOrientationEvent&lt;/a&gt; nos browsers do Android e iOS está ficando cada vez melhor, mas a especificação ainda está em fase de rascunho. No entanto, a API parece promissora. Imagine jogar jogos HTML5 diretamente no browser!
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Outra API que seria particularmente utilizada por alguns usuários mobile é a de &lt;a href=&#34;http://dev.w3.org/geo/api/spec-source.html&#34; target=&#34;_blank&#34;&gt;geolocation&lt;/a&gt;. A boa notícia é que ela já é &lt;a href=&#34;http://caniuse.com/#search=geolocation&#34; target=&#34;_blank&#34;&gt;bem suportada&lt;/a&gt;. Esta API &lt;strong&gt;nos permite localizar geograficamente o usuário usando o GPS&lt;/strong&gt; e inferir sua localização a partir de sinais de rede, como IP, RFID, Wi-Fi e endereços MAC Bluetooth. Isto pode ser usado em alguns sites responsivos para oferecer informações contextuais aos usuários. Uma grande cadeia de restaurantes poderia melhorar sua experiência mobile mostrando aos usuários a localização de seus restaurantes em sua área. As possibilidades são infinitas.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    A W3C também propôs um rascunho para uma &lt;a href=&#34;http://dev.w3.org/2009/dap/vibration/&#34; target=&#34;_blank&#34;&gt;API de vibração&lt;/a&gt;. Nele o browser pode oferecer um feedbacl tátil ao usuário em forma de vibração. Isto, no entanto, ainda está engatinhando em campos mais específicos de aplicações Web and mobile games in the browser.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Outra API que tem sido altamente discutida é a &lt;a href=&#34;http://www.w3.org/TR/netinfo-api/&#34; target=&#34;_blank&#34;&gt;network information API&lt;/a&gt;. A possibilidade de medir a largura de banda do usuário, e otimizar conforme o resultado, tem seduzido muitos desenvolvedores. Seriamos capazes de servir imagens com qualidade de alta definição para usuários com alta largura de banda e imagens de baixa qualidade aos usuários com baixa largura de banda. Com o atributo &lt;em&gt;bandwith&lt;/em&gt; da network API, seria possível calcular a velocidade de download de um usuário em megabytes por segundo. O segundo atributo, &lt;em&gt;metered&lt;/em&gt;, é um booleano que nos diz se o usuário tem uma conexão aferida (como um cartão pré-pago). Esses dois atributos são atualmente acessíveis via JavaScript.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Infelizmente, &lt;strong&gt;medir a conexão de um usuário é algo tecnicamente complicado&lt;/strong&gt;, pois uma conexão poderia mudar de forma abrupta. O usuário poderia, por exemplo, entrar num túnel e perder sua conexão, ou sua velocidade poderia cair de repente. Sendo assim, a media query mágica que mede a largura de banda parece ser hipotética no momento. Yoav Weiis escreveu um belo artigo sobre os problemas criados por essa media query e sobre medição de largura de banda chamado &lt;a href=&#34;http://mobile.smashingmagazine.com/2013/01/09/bandwidth-media-queries-we-dont-need-em/&#34; target=&#34;_blank&#34;&gt;“Bandwidth Media Queries? We Don’t Need ’Em!”&lt;/a&gt; (media queries de largura de banda? Não precisamos delas!&amp;#8221;)
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Muitas outras API&amp;#8217;s lidam com recursos mobile. Se você estiver interessado em aprender mais, a Mozilla tem uma &lt;a href=&#34;https://wiki.mozilla.org/WebAPI&#34; target=&#34;_blank&#34;&gt;lista bem detalhada&lt;/a&gt;. A maioria ainda não está completamente disponível ou padronizada, e é destinada mais a aplicações web do que a sites responsivos. No entanto, é um ótimo panorama de como grandes e complexos sites mobile podem ser no futuro.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;
    Repensando a Maneira Como Nós e o Usuário Lidamos com o Conteúdo
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Do ponto de vista técnico, ainda existem muitos desafios ao lidar com o conteúdo em grande escala. O método mobile-first tem sido parte do processo de desenvolvimento e design já há algum tempo. Poderíamos, por exemplo, servir a dispositivos mobile o mínimo de dados necessários, e então usar JavaScript e AJAX para condicionalmente carregar mais conteúdo e imagens para desktop e tablets. No entanto, para isto, também teríamos que &lt;strong&gt;repensar como lidar com o conteúdo&lt;/strong&gt; e ser capaz de priorizar uma forma de gerar um conteúdo suficientemente flexível e adaptável. Um bom exemplo disto é o mapa de solução responsiva descrito acima: Carregamos uma imagem para mobile, e melhoramos a experiência com um mapa real para desktops. Quanto mais responsivo o website, mais complexo será lidar com o conteúdo. Um código flexível pode nos ajudar a formatar um conteúdo adaptável.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Uma forma sugerida por alguns é criar frases responsivas e marcá-las com spans que tenham classes, e então exibi-los de acordo com o tamanho da tela. Aparar trechos das frases para dispositivos menores é possível com media querries. Você pode ver esta técnica no 37signals&amp;#8217; &lt;a href=&#34;http://37signals.com/svn/&#34; target=&#34;_blank&#34;&gt;Signal vs. Noise&lt;/a&gt; blog e no artigo de Frankie Roberto &lt;a href=&#34;http://www.frankieroberto.com/responsive_text&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Responsive Text&amp;#8221;&lt;/a&gt;. Mesmo que tal técnica pudesse ser usada para melhorar pequenas partes de um website, tais como um slogan do footer, aplicando isto a todos os textos de um site é difícil de imaginar.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Isto levanta uma questão no web design responsivo que se tornará mais e mais importante no futuro: a importância de meta dados e a estrutura semântica de conteúdo. Se quisermos ser capazes de reutilizar o conteúdo de outros websites automaticamente, eles deverão estar bem estruturados e preparados para isto. Novas tags HTML5 como &lt;em&gt;article&lt;/em&gt; e &lt;em&gt;section&lt;/em&gt; são um bom começo para ganhar algum significado semântico. O objetivo é pensar e estruturar o conteúdo de modo que um único item (por exemplo, um post em um blog), possa ser reutilizado e exibido em diferentes dispositivos, e em diferentes formatos.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    O grande desafio será &lt;strong&gt;fazer com que os metadados sejam facilmente compreendidos&lt;/strong&gt; a todas as pessoas que fazem parte da criação de conteúdo do website. Teremos que explicar a todos eles como os metadados podem ser utilizados para priorizar o conteúdo e programaticamente reunir o conteúdo, sendo uma plataforma independente. Um grande desafio será o de ajudá-los a pensar em blocos reutilizáveis, em vez de um grande pedaço de texto no qual eles copiam e colam conteúdo do Microsoft Word no seu sistema de gerenciamento de conteúdo WYSIWYG. Teremos que ajudá-los a entender que conteúdo e estrutura são coisas distintas e independentes, como quando os designers tiveram que entender que o conteúdo (HTML) e a apresentação (CSS) eram mantidos melhor separados.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;Não podemos nos dar ao luxo de escrever um conteúdo que seja orientado a uma única plataforma&lt;/strong&gt;. Quem sabe em qual dispositivo ele será publicado daqui a seis meses, ou um ano? &lt;a href=&#34;http://mobile.smashingmagazine.com/2013/01/14/preparing-websites-for-the-unexpected/&#34; target=&#34;_blank&#34;&gt;Precisamos preparar nossos websites para o inesperado&lt;/a&gt;. Mas, para isto, precisamos de ferramentas melhores de publicação também. Karen McGrane deu uma palestra intitulada &lt;a href=&#34;http://karenmcgrane.com/2012/09/04/adapting-ourselves-to-adaptive-content-video-slides-and-transcript-oh-my/&#34; target=&#34;_blank&#34;&gt;&amp;#8220;Adapting Ourselves to Adaptive Content&amp;#8221;&lt;/a&gt; (Nos Adaptando a um Conteúdo Adaptável), com alguns exemplos reais da indústria editorial. Ela fala sobre o processo de criação de conteúdo reutilizável e apresenta a ideia do COPE: create once and publish everywhere (Criar uma vez e publicar em todos os lugares). Precisamos construir CMS&amp;#8217;s melhores, que possam utilizar e gerar metadados para priorizar o conteúdo. Precisamos explicar às pessoas como o sistema funciona e pensar em objetos de módulos de conteúdo reutilizáveis em vez de páginas WYSIWYG. Como McGrane diz:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
    &lt;p&gt;
      &amp;#8220;Você pode escrever três versões diferentes de título; você pode escrever duas versões diferentes de resumos e anexar diversas imagens para isto, com diferentes cortes e tamanhos, e você pode não ser a pessoa responsável em decidir qual imagem ou qual título será exibido em uma determinada plataforma. Essa decisão será tomada pelos metadados. Será feita pelas regras de negócios. [&amp;#8230;] Metadados é a nova direção de arte.&amp;#8221;
    &lt;/p&gt;
  &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Truncar o conteúdo para dispositivos menores não é uma estratégia de conteúdo &amp;#8220;à prova do futuro&amp;#8221;. Precisamos de CMS&amp;#8217;s que ofereçam a estrutura necessária para criar esse conteúdo reutilizável. Precisamos de melhores workflows de publicação em CMS&amp;#8217;s também. Interfaces desajeitadas assustam os usuários, e a maioria das pessoas que geram conteúdo não estão particularmente confortáveis com ferramentas complicadas. Temos que oferecer a essas pessoas ferramentas mais fáceis de entender e que lhe ajudem a publicar um conteúdo limpo e semântico, independente da apresentação.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;
    Conclusão
  &lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Por mais longo que este artigo seja, &lt;strong&gt;ele só abrange o básico&lt;/strong&gt;. Mas agora, a maioria dos leitores da Smashing Magazine entendem que o web design responsivo é muito mais que usar media queries, escolher breakpoints certos e dobrar o tamanho das imagens para celulares de alta densidade. Como você pode ver, o caminho é longo e ainda não chegamos lá. Há ainda muitas questões não resolvidas, e a solução responsiva perfeita ainda não existe.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Soluções técnicas podem ser descobertas no futuro usando alguma nova tecnologia apresentada neste artigo, com a ajuda da &lt;a href=&#34;http://www.w3.org/&#34; target=&#34;_blank&#34;&gt;W3C&lt;/a&gt;, &lt;a href=&#34;http://www.whatwg.org/&#34; target=&#34;_blank&#34;&gt;WHATWG&lt;/a&gt; e organizações como o &lt;a href=&#34;http://filamentgroup.com/&#34; target=&#34;_blank&#34;&gt;Filament Group&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Mais importante, nós web designers e desenvolvedores podemos ajudar a encontrar soluções ainda melhores. Pessoas como &lt;a href=&#34;http://www.lukew.com/&#34; target=&#34;_blank&#34;&gt;Luke Wroblewski&lt;/a&gt; e &lt;a href=&#34;http://bradfrostweb.com/&#34; target=&#34;_blank&#34;&gt;Brad Frost&lt;/a&gt;, e todas as incríveis pessoas mencionadas neste artigo estão experimentando uma série de soluções e técnicas diferentes. Se serão bem ou mal sucedidas, &lt;strong&gt;a coisa mais importante é compartilhar&lt;/strong&gt; o que nós &amp;#8211; designers, desenvolvedores, estrategistas de conteúdo e membros da comunidade web &amp;#8211; estamos fazendo para tentar resolver alguns dos desafios da comunidade do web design. Afinal, estamos todos no mesmo barco, tentando tornar a web um lugar melhor, não estamos?
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &amp;#8212;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Traduzido com autorização da &lt;a href=&#34;http://www.smashingmagazine.com/&#34; target=&#34;_blank&#34;&gt;Smashing Magazine&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Artigo original escrito por &lt;a href=&#34;http://mobile.smashingmagazine.com/author/stephanie-walter/?rel=author&#34; target=&#34;_blank&#34;&gt;Stéphanie Walter&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Acesse o artigo original na &lt;a href=&#34;http://mobile.smashingmagazine.com/2013/05/29/the-state-of-responsive-web-design/&#34; target=&#34;_blank&#34;&gt;Smashing Magazine&lt;/a&gt; &amp;#8211; &amp;#8220;The State Of Responsive Web Design&amp;#8221; &amp;#8211; 29 de maio de 2013.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &amp;#8212;
  &lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Design responsivo: foco no ser humano</title>
      <link>http://tableless.com.br/design-responsivo-foco-no-ser-humano/</link>
      <pubDate>Thu, 21 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/design-responsivo-foco-no-ser-humano/</guid>
      <description>&lt;p&gt;Quando o computador tornou-se realmente pessoal, o desenvolvimento de softwares cresceu exponencialmente. Uma enorme demanda de aplicativos surgia para aquele produto enorme, com &lt;a href=&#34;http://pt.wikipedia.org/wiki/Monitor_de_v%C3%ADdeo#CRT&#34;&gt;monitor CRT&lt;/a&gt; e velocidade de processamento muito menor do que o telefone celular que está no seu bolso.&lt;/p&gt;

&lt;p&gt;Esses aplicativos traziam novidades e surgiam para resolver problemas que ainda não tínhamos. Com o tempo, passamos a nos familiarizar com a interface desse dispositivo mas hoje, olhando para trás, é possível entender como naquela época desenvolvíamos um software pensando na máquina, e não na pessoa que faria o uso dela.&lt;/p&gt;

&lt;p&gt;Com base nessa pequena introdução nostálgica, gostaria de fazer uma rápida analogia sobre o desenvolvimento do design responsivo de hoje com os softwares de vinte anos atrás.&lt;/p&gt;

&lt;p&gt;Uma das grandes balelas era que podíamos fazer várias coisas ao mesmo tempo. Essa &lt;a href=&#34;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=WIfKfzGBvYc&#34;&gt;reportagem do Fantástico de 1991&lt;/a&gt; mostra bem como a indústria queria nos vender a produtividade a qualquer preço, mesmo sabendo que não fazemos duas coisas ao mesmo tempo (ou você já conseguiu escrever um texto e atualizar uma planilha sem dar um ALT/Command Tab?) ou então, quando fazemos (como assistir a dois vídeos na mesma tela) não aproveitamos totalmente seu potencial.&lt;/p&gt;

&lt;p&gt;Já na web de hoje em dia temos que nos preocupar ao carregar uma página com conteúdo desnecessário no dispositivo móvel. Não adianta querer que nosso usuário faça diversas coisas ao mesmo tempo pois vai tirar a atenção do que é realmente necessário. Se a pessoa navega por um dispositivo móvel procurando uma pizzaria, ela quer saber o endereço, ou telefone, cardápio ou preços. Uma animação em Flash não vai ter utilidade nesse momento (na verdade, nunca teve). Burocratizar o acesso no momento que o usuário mais precisa é algo que pode custar o retorno desse usuário à sua página.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Na web de hoje em dia temos que nos preocupar ao carregar uma página com conteúdo desnecessário no dispositivo móvel&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Você já deve ter lido artigos sobre as iconografias em softwares. O clássico nessa categoria é o ícone de salvar dos softwares mais antigos que era representado por um disquete. &lt;a href=&#34;http://www.hanselman.com/blog/TheFloppyDiskMeansSaveAnd14OtherOldPeopleIconsThatDontMakeSenseAnymore.aspx&#34;&gt;Este artigo mostra que o disquete não é o único dos problemas que temos com iconografia.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora olhe para o dispositivo no qual está lendo esse texto. Existe uma entrada de disquete nele? Possivelmente não e é a mesma situação quando publicamos um &amp;#8220;clique aqui&amp;#8221; nas nossas páginas. O termo clique veio do uso do mouse, que desapareceu dos dispositivos móveis (inclusive a seta/cursor que ficava na tela). Mesmo selecionando links e acionando dispositivos com o dedo, continuamos chamando essa ação de &amp;#8220;clicar&amp;#8221;. O problema é quando pensamos no &amp;#8220;clicar&amp;#8221;, &amp;#8220;passar o mouse&amp;#8221;, &amp;#8220;selecionar&amp;#8221; para criar aplicações que não nos permitem esse recurso. Hoje nosso contato com alguns dispositivo são as pontas dos dedos, mas sabemos que &lt;a href=&#34;https://www.youtube.com/watch?v=6BTCoT8ajbI&#34;&gt;isso é apenas uma questão de tempo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E por falar em links, antigamente todos eles deveriam aparecer na primeira página do nosso site. De preferência sem barra de rolagem, claro. Hoje estamos cada vez mais eliminando conteúdo desnecessário das páginas principais e permitindo que o usuário consiga buscar e até mesclar informações que sejam relevantes, muito melhor do que deixá-lo procurando conteúdo na página principal. Veja por exemplo como era a &lt;a href=&#34;http://web.archive.org/web/20000620030315/http://www.cade.com.br/&#34;&gt;página principal do &amp;#8220;Cadê?&amp;#8221; em 2000&lt;/a&gt; comparada com a interface do Google de hoje.&lt;/p&gt;

&lt;p&gt;Todos os exemplos que citei foram para reforçar a teoria de desenvolvimento com foco no ser humano. Não sabemos quais os dispositivos que permitirão o acesso ao nosso site/aplicação no futuro. Qual foi a sua reação quando encontrou no seu analitics o primeiro usuário de tablet ou de videogame navegando na sua página? E como será a nossa reação quando encontrarmos um relógio ou uma máquina de lavar dentro das estatísticas?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O foco do design responsivo deve ir muito além do dispositivo. Precisamos desenvolver pensando no ser humano.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essas comparações podem parecer um pouco absurdas, mas mostram o quanto o software sempre esteve mais relacionado com a máquina do que com o usuário. Enquanto tratarmos o usuário como um operador de um sistema burocrático, teremos que escrever enormes documentações sobre como operar esse sistema, que deve ser mais intuitivo e menos complicado como eram há 20 anos atrás. E isso é o nosso dever. Transformar a experiência do usuário em nossas páginas o foco principal do desenvolvimento web.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>