<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2011 on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/2011/index.xml</link>
    <description>Recent content in 2011 on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/2011/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Experiência cross-device</title>
      <link>https://tableless.github.io/hugo-public/experiencia-cross-device/</link>
      <pubDate>Thu, 22 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/experiencia-cross-device/</guid>
      <description>&lt;p&gt;Eu vivo comentando aqui no Tableless sobre o desenvolvimento de sistemas e websites para os diversos meios de acesso. Eu falei sobre &lt;a href=&#34;http://tableless.com.br/diversidade-dos-meios-acesso/&#34;&gt;esse assunto&lt;/a&gt; em &lt;a href=&#34;http://tableless.com.br/experiencia-deve-ter-comeco-meio-e-fim/&#34;&gt;diversos&lt;/a&gt; &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34;&gt;artigos&lt;/a&gt;. Eu li um artigo chamado &lt;a href=&#34;http://designmind.frogdesign.com/blog/the-coming-zombie-apocalypse-small-cheap-devices-will-disrupt-our-old-school-ux-assumptions.htm&#34;&gt;The Coming Zombie Apocalypse&lt;/a&gt;, escrito por Scott Jenson em abril deste ano. Este artigo me fez perceber que eu estava levando o assunto muito superficialmente, mas que tem muito a ver com o artigo publicado aqui chamado &lt;a href=&#34;http://tableless.com.br/experiencia-deve-ter-comeco-meio-e-fim/&#34;&gt;A Experiência deve ter começo, meio e fim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O artigo do &lt;a href=&#34;http://twitter.com/scottjenson&#34;&gt;Scott Jenson&lt;/a&gt; começa dizendo que a popularização dos smartphones são apenas o começo. Juntando o barateamento das peças para a produção destes aparelhos com a criação sistemas de baixo custo e acessíveis como o Android, não só estão surgindo dispositivos baratos capazes de fazer tarefas que antes eram possíveis apenas em computadores, mas dispositivos baratos baseados na web, trazendo uma experiência cross-device nunca antes experimentada. Um exemplo disso é quando utilizamos estes dispositivos integrados com aplicações como o sistema de som &lt;a href=&#34;http://www.sonos.com/&#34;&gt;Sonos&lt;/a&gt;. O Scott Jenson chamada de Zombie Apocalypse dos eletrônicos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/12/twitter-original-homepage.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/twitter-original-homepage-300x209.png&#34; alt=&#34;&#34; title=&#34;twitter-original-homepage&#34; width=&#34;300&#34; height=&#34;209&#34; class=&#34;alignleft size-medium wp-image-4951&#34; srcset=&#34;uploads/2011/12/twitter-original-homepage-300x209.png 300w, uploads/2011/12/twitter-original-homepage.png 1022w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O paradigma dos computadores desktops estão nos impedindo de enxergar novos caminhos não tão longes assim. Isso é totalmente evidente quando falamos sobre smartphones, no qual nós sabemos que não são computadores desktops e tão somente por isso nós temos outras experiências e outras abordargens quando estamos usando aparelhos deste tipo. Perceba que diversos serviços e aplicações estão sendo portados para os dispositivos móveis porque fazem mais sentido nesse meio. O Twitter mesmo foi criado inicialmente para publicações vindas apenas pelos smartphones. Foi um processo reverso.&lt;/p&gt;

&lt;p&gt;Me lembro que aqui no Brasil o recebimento de SMS internacional era um problema em algumas operadoras. Muitos queriam utilizar o Twitter, mas não podiam atualizar suas timelines porque naquela época as atualizações eram feitas via SMS. Foi aí que a plataforma se popularizou e então a possibilidade de atualizar sua timeline por outros meios surgiu.&lt;/p&gt;

&lt;p&gt;Há uma frase interessantíssima no artigo de Scott Jenson onde ele diz assim:&lt;/p&gt;

&lt;blockquote cite=&#34;http://designmind.frogdesign.com/blog/the-coming-zombie-apocalypse-small-cheap-devices-will-disrupt-our-old-school-ux-assumptions.htm&#34; lang=&#34;en&#34;&gt;
  &lt;p&gt;
    This problem is simple, but pernicious: designers think of new technologies in terms of yesterday&amp;#8217;s tasks, failing to clearly see the real potential of the new technologies.
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Minha tradução livre: &amp;#8220;O problema é simples mas pernicioso: os designers pensam nas novas tecnologias baseando-se nas tarefas de ontem, falhando em ver claramente o real potencial das novas tecnologias.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Muito óbvio. É por isso que o Windows Mobile falhou! A Microsoft durante muito tempo liderou o mercado de sistemas para mobiles com um sistema ruim, bugado e muito, mas muito inútil, simplesmente porque eles eram praticamente os únicos. O problema com o sistema deles foi a tentiva de portar os conceitos, experiências, comportamentos e tarefas do sistema dos desktops para os mobiles. Claramente um grande erro. Com o Windows Phone eles mudaram (tarde) o cenário. Eles criaram o Windows Phone levando em consideração os atos e comportamentos do usuário em aparelhos deste tipo. Não há nenhuma analogia aos desktops. E mais uma vez, algo que foi criado primeiramente para aparelhos móveis será portado para os desktops, que é o caso da interface Metro levada para o &lt;a href=&#34;http://www.youtube.com/watch?v=7Dv670PwVLM&#34;&gt;Windows 8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Os PCs de hoje serão apenas hubs num futuro próximo. No cenário de hoje você escolhe entre Mac ou PC e baixa aplicativos que muito provavelmente funcionarão apenas para um destes sistemas. O modelo ideal, que já é mais real do que imaginamos, é que cada pessoa possa usar múltiplos dispositivos acessando um mesmo dado, uma mesma informação, normalmente pela núvem.&lt;/p&gt;

&lt;p&gt;O exemplo do serviço de música via streaming Pandora é perfeito. Ele permite que nós possamos utilizar seus serviços em uma variedade gigante de dispositivos. Sempre sincronizando suas músicas via internet. Tudo sempre integrado. Aqui no Brasil, como o Pandora não funciona, talvez não seja a sua realidade&amp;#8230; Entretanto estamos vivendo em um mundo onde o software, a aplicação, o serviço, define qual aparelho você vai comprar.&lt;/p&gt;

&lt;p&gt;O Sonos é um aparelho de som Wi-Fi. Além do Pandora você pode sincronizar sua biblioteca de músicas de diversos outros serviços como iTunes ou o Spotify. Quando o conheci eu o quis sem pensar. Nada de iPod ou iPhone plugado no aparelho de som. Nada de fio p2-p2 para ligar meu celular ao aparelho de som&amp;#8230; Eu quero ouvir minhas músicas livremente pelo serviço que eu mais gosto no sistema de som da minha casa. Mas quando eu for pra rua e quero continuar ouvindo a mesma biblioteca de música, só que agora no meu fone de ouvido. Essa integração entre dispositivos e softwares é incrível. Perceba que não estamos falando sobre um ecosistema fechado como o da Apple. Estamos falando de hardware e software de fabricantes diferentes, que prestam diferentes serviços, mas que se integram.&lt;/p&gt;

&lt;p&gt;Entende o que é a experiência do usuário nesse cenário?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao CSS 3D – Flip Card</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-css-3d-flip-card/</link>
      <pubDate>Wed, 21 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-css-3d-flip-card/</guid>
      <description>

&lt;p&gt;O CSS 3D é sem dúvida uma das features do CSS mais aguardadas por todas as crianças do Brasil. Fala a verdade! Fazer efeitozinhos com sombra, gradientes, transparências e etc já foi um dia na vida do desenvolvimento algo bacana. Hoje é muito fora de moda. Carne de vaca, sabe? Por isso o CSS 3D é tão esperado. Ele trará para a web efeitos visuais para layout que antes só viamos em sistemas que rodam em smartphones, tipo um iPhone ou nos sistemas operacionais mais populares como Linux e OSX.&lt;/p&gt;

&lt;p&gt;Mas não se anime muito. Eu sei que você está ansioso para sair por aí colocando efeitos 3D de CSS em tudo quanto é aplicação. Mas calma&amp;#8230; entenda que o CSS foi feito para estilizar documentos. Você o utiliza para melhorar a experiência dos usuários nos diversos dispositivos e não para enfeitar seu website como se fosse uma penteadeira. Lembra-se dos websites cheios de gifs animados? Pois é, cuidado para não cair no mesmo erro. Você estará utilizando o CSS 3D da maneira certa se seus efeitos passarem desapercebidos pelo usuário ao utilizar seu sistema. Encher seu sistema com efeitos a cada clique ou a cada ação pode fazer com que o usuário perca tempo e a paciência.&lt;/p&gt;

&lt;p&gt;Mas vamos ao que interessa.&lt;/p&gt;

&lt;h3 id=&#34;o-suporte&#34;&gt;O suporte&lt;/h3&gt;

&lt;p&gt;Infelizmente isso ainda está restrito para browsers. O Internet Explorer não tem suporte ainda e nem tem data para tal. Todos os exercícios que você ver neste post são feitos para browsers que tem WebKit como motor de renderização. Por isso teste em seu Chrome ou no seu Safari. Eu testei no Chrome porque o Safari mostrou algumas inconsistências. O Opera está esperando as especificações de CSS Transforms amadurecerem para adicionar este recurso. Testei no Firefox 8.0.1 e o exercício não funcionou.&lt;/p&gt;

&lt;p&gt;A degradação do CSS 3D para os browsers que não o suportam é um pouco infeliz. Sugiro que se você for utilizar essas features, tente fazê-lo em projetos restritos para que não haja problemas com usuários de browsers antigos. Se ainda assim você quiser arriscar, crie soluções especifica para seu projeto, fazendo com que a experiência do seu cliente não seja muito prejudicada.&lt;/p&gt;

&lt;p&gt;Sugiro que &lt;a href=&#34;http://tableless.com.br/utilizando-a-biblioteca-modernizr/&#34; title=&#34;Utilizando a Biblioteca Modernizr&#34;&gt;utilize a biblioteca Modernizr&lt;/a&gt; para identificar os browsers que não entendem o CSS 3D.&lt;/p&gt;

&lt;h3 id=&#34;tudo-é-uma-questão-de-perspectiva&#34;&gt;Tudo é uma questão de perspectiva&lt;/h3&gt;

&lt;p&gt;Para falar de 3D, precisamos falar sobre perspectiva. Para ativar uma área 3D o elemento precisará de perspectiva.&lt;/p&gt;

&lt;p&gt;Você pode aplicar a perspectiva ao elemento de duas formas: utilizando diretamente a propriedade &lt;strong&gt;perspective&lt;/strong&gt; ou adicionando um valor &lt;strong&gt;perspective()&lt;/strong&gt; na propriedade &lt;strong&gt;transform&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
  -webkit-perspective: 600;
}
&lt;/pre&gt;

&lt;p&gt;Ou:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;div {
  -webkit-transform: perspective(600);
}
&lt;/pre&gt;

&lt;p&gt;Estes dois formatos são os gatilhos que ativam a área 3D onde o elemento irá trabalhar.&lt;/p&gt;

&lt;p&gt;O valor da perspectiva determina a intensidade do efeito. Imagine como se fosse a distância de onde vemos o objeto. Quanto maior o valor, mais perto o elemento estará, logo, menos intenso será o visual 3D. Logo, se colocarmos um valor de &lt;em&gt;2000&lt;/em&gt;, o objeto não terá tantas mudanças visuais e o efeito 3D será suave. Se colocarmos &lt;em&gt;100&lt;/em&gt;, o efeito 3D será muito visível, como se fosse um inseto olhando um objeto gigante.&lt;/p&gt;

&lt;p&gt;Você também precisa entender sobre o &lt;a href=&#34;http://pt.wikipedia.org/wiki/Perspectiva_(gráfica)&#34; title=&#34;Wikipedia: sobre ponto de fuga&#34;&gt;ponto de fuga&lt;/a&gt;. O ponto de fuga por padrão está posicionado no centro. Você pode modificar essa posição com a propriedade &lt;strong&gt;perspective-origin&lt;/strong&gt;, que é muito parecido com a propriedade &lt;strong&gt;transform-origin&lt;/strong&gt;, que define onde a ação de transformação do objeto acontecerá, nesse caso &lt;a href=&#34;http://tableless.github.com/exemplos/cssanimation.html&#34;&gt;quando falamos de ações 2D&lt;/a&gt;. A propriedade &lt;strong&gt;perspective-origin&lt;/strong&gt; afeta os eixos X e Y do elemento filho.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/css3d/cardflip/propriedade-perspective.html&#34;&gt;Veja um exemplo com dois elementos&lt;/a&gt;: um com pouca perspectiva e outra com muita perspectiva.&lt;/p&gt;

&lt;h3 id=&#34;css-3d-transforms&#34;&gt;CSS 3D Transforms&lt;/h3&gt;

&lt;p&gt;Se você ainda não leu sobre CSS Transforms você pode &lt;a href=&#34;http://tableless.com.br/introducao-ao-css-animation/&#34; title=&#34;Introdução ao CSS Animation&#34;&gt;ler algo aqui&lt;/a&gt; e &lt;a href=&#34;http://tableless.github.com/exemplos/csstransforms/&#34;&gt;ver em ação aqui&lt;/a&gt;. As propriedades são praticamente iguais, mas aplicadas para os princípios de 3D e não 2D.&lt;/p&gt;

&lt;p&gt;Você deve estar acostumado a trabalhar com os eixos X e Y no CSS padrão. No CSS 3D podemos manipular também o eixo Z, que representa a profundidade.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/css3d/cardflip/propriedade-transform.html&#34;&gt;Veja um exemplo utilizando os valores &lt;strong&gt;rotateY, rotateX e translateZ&lt;/strong&gt;&lt;/a&gt;. Perceba que no &lt;strong&gt;translateZ&lt;/strong&gt; eu utilizei valores negativos e positivos. Quando utilizo o valor negativo, o objeto fica &amp;#8220;mais longe&amp;#8221;, se coloco valores positivos, o objeto fica &amp;#8220;mais perto&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Abaixo segue uma imagem do resultado do exemplo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/exemplos/css3d/cardflip/propriedade-transform.html&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/img-transform3d.png&#34; alt=&#34;&#34; title=&#34;img-transform3d&#34; width=&#34;801&#34; height=&#34;706&#34; class=&#34;alignnone size-full wp-image-4795&#34; srcset=&#34;uploads/2011/12/img-transform3d.png 801w, uploads/2011/12/img-transform3d-300x264.png 300w&#34; sizes=&#34;(max-width: 801px) 100vw, 801px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nós podemos utilizar também alguns atalhos para estes valores onde podemos definir as três dimensões de uma vez:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;translate3d(x,y,z)&lt;/li&gt;
&lt;li&gt;scale3d(x,y,z)&lt;/li&gt;
&lt;li&gt;rotate3d(x,y,z,angle)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Muito importante: ao utilizar as propriedades resumidas, os browsers ativam automaticamente a aceleração por hardware no Safari para que as animações tenham uma melhor performance.&lt;/p&gt;

&lt;h2 id=&#34;fazendo-o-efeito-de-card-flip&#34;&gt;Fazendo o efeito de Card Flip&lt;/h2&gt;

&lt;p&gt;O efeito de Card Flip é muito conhecido entre os usuários de iPhone. Para ter ideia de como é o efeito &lt;a href=&#34;http://tableless.github.com/exemplos/css3d/cardflip/cardflip.html&#34; title=&#34;Exemplo de efeito card flip com CSS 3 3D&#34; target=&#34;_blank&#34;&gt;veja o exemplo final&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A estrutura HTML é esta:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;section class=&#34;geral&#34;&amp;gt;
  &amp;lt;div class=&#34;carta&#34;&amp;gt;
    &amp;lt;figure class=&#34;frente&#34;&amp;gt;&amp;lt;img src=&#34;card-front.jpg&#34;&amp;gt;&amp;lt;/figure&amp;gt;
    &amp;lt;figure class=&#34;atras&#34;&amp;gt;&amp;lt;img src=&#34;card-back.jpg&#34;&amp;gt;&amp;lt;/figure&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O elemento &lt;em&gt;.geral&lt;/em&gt; é onde iniciaremos o ambiente 3D. O elemento &lt;em&gt;.carta&lt;/em&gt; age como container dos objetos 3D. Cada face da carta está separada por um elemento &lt;strong&gt;figure&lt;/strong&gt;, com uma imagem.&lt;/p&gt;

&lt;p&gt;Para começar, precisamos aplicar a perspectiva para o elemento &lt;em&gt;.geral&lt;/em&gt; iniciar o espaço 3D.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.geral { 
    width: 200px;
    height: 293px;
    position: relative;
    margin:10% auto 0;
    -webkit-perspective: 500;
}
&lt;/pre&gt;

&lt;p&gt;Defini uma largura e altura, coloquei um &lt;strong&gt;position: relative;&lt;/strong&gt; para que os elementos dentro dele sejam posicionados se referenciando por ele. Coloquei uma margem só para separá-lo do topo do body a fim de conseguirmos ver melhor os efeitos.&lt;/p&gt;

&lt;p&gt;Por fim, coloquei a propriedade &lt;strong&gt;-webkit-perspective: 500;&lt;/strong&gt; para aplicarmos o efeito 3D. O valor de 500 faz uma boa perspectiva.&lt;/p&gt;

&lt;p&gt;Agora definiremos as dimensões da carta e suas propriedades.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.carta {
  width: 100%;
  height: 100%;
  position: absolute;
  -webkit-transition: -webkit-transform 1s;
}
&lt;/pre&gt;

&lt;p&gt;Largura e altura precisam ser de 100% para definir a área que o 3D irá aplicar. O &lt;strong&gt;position: absolute;&lt;/strong&gt; é necessário para que as cartas fiquem relativas ao elemento &lt;em&gt;.geral&lt;/em&gt;. A propriedade &lt;strong&gt;-webkit-transition: -webkit-transform 1s;&lt;/strong&gt; define o tempo de transição do efeito, neste caso ele vai durar 1 segundo.&lt;/p&gt;

&lt;p&gt;Formatando as cartas:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.carta figure {
  margin:0;
  display: block;
  position: absolute;
  width: 100%;
  height: 100%;
  -webkit-backface-visibility: hidden;
}
&lt;/pre&gt;

&lt;p&gt;Vamos direto para a propriedade &lt;strong&gt;-webkit-backface-visibility: hidden;&lt;/strong&gt; já que as outras dispensam comentários. Essa propriedade faz com que a face de trás da carta não apareça e nem se sobreponha no momento do efeito.&lt;/p&gt;

&lt;p&gt;E finalmente, para fazer com que a parte de trás da carta apareça no verso correto, nós temos que rotacioná-la.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.atras{-webkit-transform: rotateY(180deg);}
&lt;/pre&gt;

&lt;p&gt;E feito se completa com o trigger para fazer a animação acontecer. Nesse caso farei com um hover no elemento &lt;em&gt;.carta&lt;/em&gt;, onde iremos rotacioná-lo em -180 graus.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.carta:hover {
  -webkit-transform: rotateY(-180deg);
}
&lt;/pre&gt;

&lt;p&gt;E Voilá! Se quiser brincar um pouco, modifique a origem da transformação com a propriedade &lt;strong&gt;-webkit-transform-origin&lt;/strong&gt;. Adicionando essa linha, a transformação acontece para a direita em vez de ser pelo centro, como é o padrão:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.carta:hover {
  -webkit-transform: rotateY(-180deg);
  -webkit-transform-origin: right center;
}
&lt;/pre&gt;

&lt;h3 id=&#34;3drollover-css&#34;&gt;3Drollover.css&lt;/h3&gt;

&lt;p&gt;Encontrei uma biblioteca muito interessante que nos permite fazer estes efeitos de forma fácil e de acordo com os princípios do OOCSS. É necessário apenas estruturar da forma correta e trocar as classes de acordo com o efeito que você quer fazer. Coisa muito simples.&lt;/p&gt;

&lt;p&gt;O nome da biblioteca é &lt;a href=&#34;https://github.com/codepo8/3drollovers.css&#34;&gt;3Drollover&lt;/a&gt;. Clone no seu computador e divirta-se. Dá para usar em projetos facilmente. Veja abaixo um vídeo que mostra os efeitos:&lt;/p&gt;

&lt;h3 id=&#34;para-ler-mais&#34;&gt;Para ler mais&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Leia a &lt;a href=&#34;http://dev.w3.org/csswg/css3-3d-transforms/&#34;&gt;documentação oficial do W3C sobre CSS 3D Transforms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Pessoal do &lt;a href=&#34;http://www.webkit.org/blog/386/3d-transforms/&#34;&gt;WebKit explicando sobre outras propriedades do CSS 3D Transforms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Você pode &lt;a href=&#34;http://desandro.github.com/3dtransforms/examples/perspective-03.html&#34;&gt;brincar um pouco com as propriedades do CSS 3D aqui&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Command &amp; Conquer: Tiberium Alliances</title>
      <link>https://tableless.github.io/hugo-public/commander-conquer-tiberium-alliances/</link>
      <pubDate>Mon, 19 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/commander-conquer-tiberium-alliances/</guid>
      <description>&lt;p&gt;Se você é fã de jogos de estratégia já deve conhecer o Command &amp;amp; Conquer. Para ser sincero eu não gostava muito dessa série e por isso joguei muito pouco. Achava tudo muito complicado. 😉&lt;/p&gt;

&lt;p&gt;Mas a notícia interessante é que a EA/Phenomic (os mesmos que desenvolvedoram de Lord of Ultima, BattleForge e Spellforce) vai lançar uma edição do jogo chamada &lt;a href=&#34;http://www.ea.com/tiberium-alliances&#34; title=&#34;Site oficial do Jogo&#34;&gt;Command &amp;amp; Conquer: Tiberium Alliances&lt;/a&gt; e vai ser baseado em HTML5.&lt;/p&gt;

&lt;p&gt;Você poderá se unir com outros jogadores para formar alianças, criando impérios maiores e etc. Sendo em HTML5, você poderá acessar de qualquer browser. QUALQUER browser (viu, flash?). A EA também vai preparar as versões do jogo para mobiles facilitando a jogabilidade em dispositivos móveis (viu, flash?). Isso elimina aquele trabalho de criar uma versão para cada dispositivo e para cada plataforma. O custo vai lá para baixo! É exatamente por isso que eu sou contra APPs instaláveis nos aparelhos, principalmente móveis.&lt;/p&gt;

&lt;p&gt;O custo de desenvolver um mesmo App para pelo menos a tríade dos sistemas móveis (Android, Windows Phone, iPhone) e depois para os sistemas para desktops (Apple, Windows e quem sabe Linux) é gigante. Não estamos falando só de sites, ok? Estamos falando de tudo, até jogos, como este da EA que está para sair. Se temos a possibilidade de fazer uma aplicação que pode ser usada em todas as plataformas com experiência relativamente igual, sem danificar gráficos, jogabilidade, velocidade e etc, porque perder tempo criando aplicações nativas diferentes?&lt;/p&gt;

&lt;p&gt;Abaixo veja o trailer de como o jogo está ficando. Sensacional. Quero só ver quando WebGL puder ser usado de verdade nos navegadores.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.arkade.com.br/noticias/command-conquer-tiberium-wars-pc/&#34;&gt;Mais sobre o jogo&lt;/a&gt;. Eu vi essa notícia via &lt;a href=&#34;http://twitter.com/reinaldoferraz&#34;&gt;@reinaldoferraz&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OOCSS ou CSS do jeito certo</title>
      <link>https://tableless.github.io/hugo-public/oocss-ou-css-do-jeito-certo/</link>
      <pubDate>Mon, 19 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/oocss-ou-css-do-jeito-certo/</guid>
      <description>

&lt;h2 id=&#34;o-conceito&#34;&gt;O conceito&lt;/h2&gt;

&lt;p&gt;Escrever CSS é fácil. Isto não deveria ser um problema, mas é. Por ser fácil os desenvolvedores acabam se esquecendo de princípios básicos, técnicas e metodologias que nos ajudam a manter o controle durante a produção. Entenda que algumas dessas metodologias não precisam ser aplicadas em sites pequenos. Por exemplo, aqui no Tableless eu não &lt;a href=&#34;http://tableless.com.br/modulando-o-css/&#34;&gt;modularizo o CSS em vários arquivos&lt;/a&gt; por um ou dois motivos: &lt;strong&gt;1)&lt;/strong&gt; Somente eu tenho acesso ao código. &lt;strong&gt;2)&lt;/strong&gt; O site não é grande. Ele tem meia dúzia de páginas e funcionalidades.&lt;/p&gt;

&lt;p&gt;Mas quando falamos de sites grandes (em visitação e quantidade de páginas) existem algumas restrições: velocidade de carregamento, compatibilidade entre browsers, manutenção, flexibilidade para mudanças etc. Tudo isso deve ser pensado e planejado antes de colocarmos a mão na massa. É no planejamento que iremos estruturar como serão feitas as manutenções posteriores, como iremos mudar elementos principais sem interferir no layout como um todo.&lt;/p&gt;

&lt;p&gt;O CSS Orientado a Objeto (em inglês OOCSS &amp;#8211; Object Oriented CSS &amp;#8211; Sendo sincero, esse nome é muito ruim) tem como conceito técnicas que já falamos durante muito tempo, mas que como o &lt;a href=&#34;http://tableless.com.br/introducao-ao-responsive-web-design/&#34; title=&#34;Artigo sobre responsive web design&#34; target=&#34;_blank&#34;&gt;Responsive Web Design&lt;/a&gt;, está ganhando força somente agora.&lt;/p&gt;

&lt;h2 id=&#34;princípios&#34;&gt;Princípios&lt;/h2&gt;

&lt;p&gt;O OOCSS está baseado em dois pontos cruciais que são a separação da &lt;strong&gt;estrutura e do visual&lt;/strong&gt; e a &lt;strong&gt;independência do container em relação ao conteúdo&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;separação-da-estrutura-e-do-visual&#34;&gt;Separação da estrutura e do visual&lt;/h3&gt;

&lt;p&gt;A maioria dos elementos estilizados em uma página web tem diferentes características visuais que são repetidas em diferentes contextos e situações. Algumas características são fáceis de identificar como cores, títulos, gradientes, bordas etc. Essas são características visuais. Contudo, existem também as características de estrutura, que é onde nós &amp;#8220;montamos&amp;#8221; os elementos, definindo tamanhos, distâncias, medidas etc. Essas características também são repetidas em diversos elementos no decorrer do site.&lt;/p&gt;

&lt;p&gt;A ideia é que nós separemos as características visuais das características estruturais, tornando-os modulares de forma que possamos reutilizá-los em diferentes elementos tendo resultados iguais.&lt;/p&gt;

&lt;p&gt;Imagine 3 elementos diferentes, como um &lt;strong&gt;botão&lt;/strong&gt;, uma &lt;strong&gt;caixa de chamada&lt;/strong&gt; e um &lt;strong&gt;destaque&lt;/strong&gt; que normalmente fica na lateral do site. Eles tem características estruturais diferentes, como width, height, paddings, margins etc. Mas as características visuais são iguais, como por exemplo o border-radius, background e o box-shadow. O CSS normal ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.botao {
   width:100px;
   height:50px;
   text-align:center;
   font:bold 13px verdana, arial, tahoma, sans-serif;
   border-radius:10px;
   background: url(gradients.png) repeat-X center;
   box-shadow: 0 0 10px rgba(0,0,0,0.5);
}

.chamada {
   width:250px;
   float:left;
   font:bold 23px verdana, arial, tahoma, sans-serif;
   border-radius:10px;
   background: url(gradients.png) repeat-X center;
   box-shadow: 0 0 10px rgba(0,0,0,0.5);
}

.destaque {
   width:300px;
   height:250px;
   border-radius:10px;
   background: url(gradients.png) repeat-X center;
   box-shadow: 0 0 10px rgba(0,0,0,0.5);
}
&lt;/pre&gt;

&lt;p&gt;Para reutilizar de forma inteligente as características iguais destes elementos e prevendo que talvez seria criado outros elementos com as mesmas características &amp;#8211; já que o designer mantém sempre (quase sempre, né?) um padrão visual estético &amp;#8211; é interessante que criemos uma classe que componha estas características e apliquemos essa classe nos elementos necessários. Assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.botao {
   width:100px;
   height:50px;
   text-align:center;
   font:bold 13px verdana, arial, tahoma, sans-serif;
}

.chamada {
   width:250px;
   float:left;
   font:bold 23px verdana, arial, tahoma, sans-serif;
}

.destaque {
   width:300px;
   height:250px;
}

.boxEffects {
   border-radius:10px;
   background: url(gradients.png) repeat-X center;
   box-shadow: 0 0 10px rgba(0,0,0,0.5);
}
&lt;/pre&gt;

&lt;p&gt;Em cada elemento que necessitasse destas características visuais, basta inserir a classe .boxEffects ao elemento.&lt;/p&gt;

&lt;p&gt;Entenda que o abuso dessa técnica pode trazer complicações. Você não vai criar uma classe para cada característica visuais e sair aplicando essas classes em tudo quanto é elemento. Você estaria voltando a 1999 onde tínhamos aquele velho problema de misturar as &lt;a href=&#34;http://tableless.com.br/camadas-de-desenvolvimento-client-side/&#34;&gt;camadas de formatação e informação&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;independência-dos-containers-e-do-conteúdo&#34;&gt;Independência dos containers e do conteúdo&lt;/h3&gt;

&lt;p&gt;Imagine que você crie algum estilo para a formatação de algum elemento como por exemplo um parágrafo e atrela este estilo para os parágrafos localizados no article principal:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;article p {
   font:bold 13px verdana, arial, tahoma, sans-serif;
   line-height:18px;
   letter-spacing:1px;
}
&lt;/pre&gt;

&lt;p&gt;Mas então surge a necessidade de ter um parágrafo com as mesmas características no rodapé, por exemplo, mas com o tamanho da fonte maior! Você pode fazer assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;article p, footer p {
   font: 13px verdana, arial, tahoma, sans-serif;
   line-height:18px;
   letter-spacing:1px;
}

footer p {font-size:20px;}
&lt;/pre&gt;

&lt;p&gt;O que é ainda é ruim, mas é muito melhor do que fazer assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;article p, footer p {
   font: 13px verdana, arial, tahoma, sans-serif;
   line-height:18px;
   letter-spacing:1px;
}

footer p {
   font: 20px verdana, arial, tahoma, sans-serif;
   line-height:18px;
   letter-spacing:1px;
}
&lt;/pre&gt;

&lt;p&gt;Onde duplicamos desnecessariamente vários estilos.&lt;/p&gt;

&lt;p&gt;Com o OOCSS nós devemos transformas estes estilos em módulos para serem reutilizados e não atrelando os estilos a um elemento específico.&lt;/p&gt;

&lt;p&gt;Isso acontece também quando já fizemos uma classe onde carrega os estilos comuns. Se voltarmos ao exemplo anterior, alguém pode fazer assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;footer .boxEffects {...}&lt;/pre&gt;

&lt;p&gt;Estamos aqui atrelando a classe que antes era para ser algo genérico ao elemento footer. Cuidado ao fazer isso. Tenha um bom motivo antes de ir adiante.&lt;/p&gt;

&lt;h2 id=&#34;outras-boas-práticas&#34;&gt;Outras boas práticas&lt;/h2&gt;

&lt;p&gt;Existem algumas boas práticas que fazem parte do OOCSS e que melhoram muito o planejamento e a prática do desenvolvimento web:&lt;/p&gt;

&lt;h3 id=&#34;modularização-de-código-css&#34;&gt;Modularização de código CSS&lt;/h3&gt;

&lt;p&gt;Não estou falando aqui sobre a modularização de &lt;strong&gt;arquivos&lt;/strong&gt; CSS, mas sim do Código. Essa modularização é feita sob medida para cada um dos projetos. O objetivo é que o código CSS seja reutilizado em várias partes da produção evitando que você crie mais código. É aconselhável que se defina padrões de código para os principais elementos do layout. A equipe pode fazer isso ou delegar esse importante trabalho para um desenvolvedor, que será responsável em criar os métodos e os padrões estruturais dos elementos.&lt;/p&gt;

&lt;h3 id=&#34;minimizar-usos-de-seletores-muito-específicos&#34;&gt;Minimizar usos de seletores muito específicos&lt;/h3&gt;

&lt;p&gt;Encontre o meio termo. Não faça seletores muito específicos ou seletores muito genéricos. O CSS trabalha com especificidade: quanto mais específico, mais certeiro você é ao capturar um elemento, mas seu CSS fica mais engessado e consequentemente você usa mais código. Quanto mais genérico, mais elementos do mesmo tipo você formata, mas o risco de conflito de estilos aumenta. O ideal é encontrar o meio termo, onde você é tão específico e nem tão genérico.&lt;/p&gt;

&lt;p&gt;Dependendo da forma que você utiliza os seletores os browsers podem ser ou não mais rápidos ao renderizar seu site. &lt;a href=&#34;http://tableless.com.br/melhorando-performance-css/&#34; title=&#34;Performance do seu CSS&#34; target=&#34;_blank&#34;&gt;Já falamos disso aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;formate-elementos-com-classes-modulares&#34;&gt;Formate elementos com classes modulares&lt;/h3&gt;

&lt;p&gt;A ideia é que ao criar uma nova página, você não tenha que criar novo código CSS. Se a página tiver a estrutura diferente mas os elementos tem características visuais iguais, aí está uma boa oportunidade para modularizar o código visual dos objetos.&lt;/p&gt;

&lt;p&gt;Um exemplo para demonstrar essa prática é ao fazer botões para diferentes ações. Normalmente utilizamos os mesmos botões com cores diferentes para definirmos visualmente ações diferentes que o usuário pode tomar. O botão de SALVAR tem o mesmo formato de CANCELAR, mas a cor dos dois é diferente, sendo que o primeiro é verde o segundo vermelho. O código seria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.botao {
   display:inline-block;
   padding:10px 20px;
   font:13px verdana, arial, tahoma;
   color:white;
   text-decoration: none;
}
&lt;/pre&gt;

&lt;p&gt;Este código cria toda a estrutura do botão. Agora falta definir as cores de fundo. Eu farei isso criando duas classes: &lt;strong&gt;btVerde&lt;/strong&gt; e &lt;strong&gt;btVermelho&lt;/strong&gt;. Essas classes serão utilizadas em pareceria com a classe &lt;strong&gt;botao&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.btVermelho {background: red;}
.btVerde {background: green;}
&lt;/pre&gt;

&lt;p&gt;Agora, o HTML ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;a href=&#34;#&#34; class=&#34;botao btVermelho&#34;&amp;gt;Cancelar&amp;lt;/a&amp;gt;
&amp;lt;a href=&#34;#&#34; class=&#34;botao btVerde&#34;&amp;gt;Salvar&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Porque criei os nomes das classes btVermelho e btVerde em vez de btCancelar e btSalvar? Porque pode ser que exista algum botão que também seja verde, mas não tenha a ação de salvar. Assim deixo meu leque aberto para novas atribuições.&lt;/p&gt;

&lt;h3 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h3&gt;

&lt;p&gt;Seguir esses pequenos detalhes evitam uma série de problemas comuns no desenvolvimento client-side. A reutilização de código CSS se torna real, a velocidade do carregamento melhora e os problemas de manutenção são solucionados. A flexibilidade que teremos ao modificar o CSS será muito grande e não aumentaremos nosso código a cada modificação feita. A ideia é que seu código CSS fique sob controle. A utilização de &lt;a href=&#34;http://tableless.com.br/biblioteca-css-ou-framework/&#34; target=&#34;_blank&#34;&gt;frameworks e bibliotecas podem ajudar em muitos momentos&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O IE6 vai morrer no Brasil</title>
      <link>https://tableless.github.io/hugo-public/o-ie6-vai-morrer-no-brasil/</link>
      <pubDate>Fri, 16 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-ie6-vai-morrer-no-brasil/</guid>
      <description>&lt;p&gt;Ontem a Microsoft anunciou que em Janeiro vai ativar a atualização automática para os Internet Explorers dos sistemas Windows XP, Vista e Windows 7! E sabe por onde eles começarão a fazer esse milagre? No Brasil e na Austrália. Este é um passo importante para que a web, do mundo, avance mais rápido.&lt;/p&gt;

&lt;p&gt;O mais interessante é a Microsoft está diferente. Ela realmente está colocando o usuário em primeiro lugar. Por exemplo: toda vez que o sistema atualizar a versão do IE, essa atualização não mudará a sua configuração de browser padrão, nem as configurações de buscador, bookmarks, nada. Isso faz parte da nova filosofia que a Microsoft tem adotado nos últimos tempos e que está dando muito certo.&lt;/p&gt;

&lt;p&gt;Se consumidores e empresas não quiserem atualizar seus browsers, eles tem a opção de não fazer o update e continuar recebendo suporte para a versão do IE que eles ainda terão. Há também a possibilidade de desinstalar os updates caso seja necessário. Em versões mais avançadas do IE, a Microsoft colocará uma opção de desativar as atualizações automáticas.&lt;/p&gt;

&lt;p&gt;Essa decisão é ótima para os consumidores, desenvolvedores e pricipalmente para as empresas. A Web ficará melhor e mais segura. Com esta decisão, nós, desenvolvedores, teremos um campo farto para novas oportunidades de entregar experiências melhores para nossos usuários. Com o IE9 já temos algumas features do HTML5 que funcinam. Nós iremos gastar menos tempo codificando para um browser específico, corrigindo erros e bugs. Isso quer dizer que sua &lt;a href=&#34;http://tableless.com.br/convencimento-e-educacao-liberdade/&#34; title=&#34;Convencimento e educação = liberdade&#34;&gt;obrigação de convencer e educar seu chefe e cliente fica bem mais fácil&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você entende o que está acontecendo? Não é um grupo de desenvolvedores que resolveu tentar matar o IE e deixa a web livre&amp;#8230; é a própria Microsoft. Você sabe o quanto isso é importante? Sério, pense nisso.&lt;/p&gt;

&lt;p&gt;Eu sei que não faz mais que a obrigação dela já que foi ela que começou essa confusão toda, mas vamos lá&amp;#8230; há quanto tempo estivemos esperando por uma decisão dessa?&lt;/p&gt;

&lt;p&gt;Microsoft, obrigado!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://windowsteamblog.com/ie/b/ie/archive/2011/12/15/ie-to-start-automatic-upgrades-across-windows-xp-windows-vista-and-windows-7.aspx&#34;&gt;Veja o post na íntegra no blog do IE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E use este &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/12/goawayie6.jpg&#34;&gt;link para pegar a imagem do post em tamanho maior&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convencimento e educação = liberdade</title>
      <link>https://tableless.github.io/hugo-public/convencimento-e-educacao-liberdade/</link>
      <pubDate>Thu, 15 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/convencimento-e-educacao-liberdade/</guid>
      <description>&lt;p&gt;Os websites precisam parecer iguais em todos os browsers? &lt;a href=&#34;http://dowebsitesneedtolookexactlythesameineverybrowser.com/&#34;&gt;Claro que não&lt;/a&gt;. Aí você fala assim: &amp;#8220;Diz isso para meu chefe ou meu cliente.&amp;#8221; Eu até posso dizer, mas aí eu estaria fazendo o seu trabalho.&lt;/p&gt;

&lt;p&gt;Uma das obrigações atuais do desenvolvedor client-side é educar e convencer. Não venha me dizer que isso é quase impossível porque eu já sei disso. Mas ninguém disse que é totalmente impossível, correto? Você vai encontrar muitos obstáculos, tenha certeza disso, mas você vai conseguir mudar a web brasileira e a do mundo se fizer isso e fizer bem feito.&lt;/p&gt;

&lt;p&gt;Não estou dizendo para você chegar de supetão, colocar a mão na testa do seu chefe/cliente e dizer: &amp;#8220;Sai desse corpo, Internet Explorer, porque ele não te pertence!!&amp;#8221; Isso seria legal de assistir, mas você certamente seria demitido. Estou dizendo para você se armar. Se municie de números, estatísticas&amp;#8230; saiba quanto o pessoal da sua área está trabalhando mais para fazer o projeto funcionar em browsers antigos e quanto de dinheiro está provavelmente sendo perdido no processo.&lt;/p&gt;

&lt;p&gt;A conta é simples: calcule o seu valor hora e o valor hora dos seus colegas de projeto. Coloque impostos, coloque tempo extra etc&amp;#8230; Depois multiplique esse valor pela quantidade de horas que vocês gastaram para arrumar layouts em browsers antigos e por quanto tempo vocês gastaram para deixar tudo exatamente igual em todos os browsers. Inclue o tempo gasto para recortar imagens, procurar plugins em javascript milagrosos, o tempo que você passou solucionando os problemas de estruturação e etc, tudo isso deve contar no número final das horas. Faça um dossiê. Não precisa ser muito longo, mas precisa ser exato! Precisa conter todas as dificuldades que vocês tiveram que resolver para tentar deixar os browsers com os mesmos efeitos que os browsers novos. Depois disso tudo, em uma hora apropriada apresente para o seu chefe.&lt;/p&gt;

&lt;p&gt;Para ajudar fizemos &lt;a href=&#34;http://tableless.com.br/browsers-antigos-guerra-contra-o-terror/&#34; title=&#34;PDF – Browsers antigos: guerra contra o terror&#34;&gt;um PDF que explica&lt;/a&gt; exatamente quais as soluções vocês precisam adotar e alguns outros assuntos que seu chefe precisa saber para entender melhor esse conceito todo. Você precisa entender esse é um caminho longo. Você não (ou vai) convencer seu chefe/cliente de primeira. Isso depende muito do seu perfil e do perfil deles. Mas com certeza, se você levar informações relevantes e maduras as chances serão grandes, já que ninguém gosta de perder dinheiro.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile First – A arte de pensar com foco</title>
      <link>https://tableless.github.io/hugo-public/mobile-first-a-arte-de-pensar-com-foco/</link>
      <pubDate>Tue, 13 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/mobile-first-a-arte-de-pensar-com-foco/</guid>
      <description>

&lt;p&gt;Durante muito tempo especialistas de diversas áreas previram o crescimento do uso dos dispositivos móveis. Demorou um pouco mas a previsão se tornou verdadeira. Hoje todo mundo carrega um pedaço de plástico com uma tela de vidro na mão o dia inteiro&amp;#8230; quase uma extensão de nossos corpos.&lt;/p&gt;

&lt;p&gt;Os dispositivos móveis se tornaram uma febre e vieram para ficar. É a melhor forma de fazer a inclusão digital para aqueles que não tem uma forma de ter um notebook ou um desktop em casa. Não estou falando daqueles smartphones de R$1500, mas dos muitos smartphones, com teclados qwerty, prontos para internet e que custam R$200. Isso sim é inclusão digital para as massas de verdade.&lt;/p&gt;

&lt;h3 id=&#34;alguns-números&#34;&gt;Alguns números&lt;/h3&gt;

&lt;p&gt;As &lt;a href=&#34;http://tech.fortune.cnn.com/2011/02/07/idc-smartphone-shipment-numbers-passed-pc-in-q4-2010/&#34;&gt;vendas de smartphones já passaram as de PCs&lt;/a&gt;. A utilização de emails pelos dispositivos móveis aumentou em 36%. Sem contar que &lt;a href=&#34;http://news.bango.com/2010/02/16/600-percent-growth-in-mobile-web-usage/&#34;&gt;o tráfego de visitação de websites utilizando smartphones cresceu 600% em 2010&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;O Paypal tempos atrás recebia algo em torno de $10 Milhões de dólares em pagamentos via mobiles. Por dia! &lt;a href=&#34;http://prowireless.com.au/paypal-mobile-payments&#34;&gt;Eles tem uma predição de movimentar algo em torno de 6 Bilhões só este ano&lt;/a&gt;! E em 2016 serão $31 Bilhões!&lt;/p&gt;

&lt;p&gt;As perspectivas globais são enormes. Abaixo, veja um inforgráfico que o blog &lt;a href=&#34;http://www.plexical.com/blog/2011/09/29/mobile-first-mobile-only/&#34;&gt;The Meta Cloud&lt;/a&gt; preparou. Cuidado para não se assustar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.plexical.com/blog/wp-content/uploads/2011/09/mobile-first-mobile-only.pdf&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/mobile-first-mobile-only.png&#34; alt=&#34;&#34; title=&#34;mobile-first-mobile-only&#34; width=&#34;570&#34; height=&#34;902&#34; class=&#34;alignnone size-full wp-image-4704&#34; srcset=&#34;uploads/2011/12/mobile-first-mobile-only.png 570w, uploads/2011/12/mobile-first-mobile-only-189x300.png 189w&#34; sizes=&#34;(max-width: 570px) 100vw, 570px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;o-conceito&#34;&gt;O conceito&lt;/h3&gt;

&lt;p&gt;Você consegue entender estes números? Se sim, você vai entender que o conceito do Mobile First faz muito sentido, mas vai contra toda uma tradição de desenvolvimento de sites que você está acostumado. A ideia do Mobiles First é que comecemos a desenvolver e planejar projetos web, desde um pequeno site até um grande sistema, primeiramente para dispositivos móveis e somente depois para desktops/notebooks.&lt;/p&gt;

&lt;h4 id=&#34;algumas-vantagens&#34;&gt;Algumas vantagens&lt;/h4&gt;

&lt;p&gt;Se o mundo inteiro está passando mais tempo acessando a internet com dispositivos móveis, não é muito sensato pensarmos primeiramente em fazermos sites para desktops/notebooks, não é? O fato é que ao colocar os mobiles primeiro lugar, desfrutamos de uma série de vantagens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;As capacidades técnicas são mais interessantes.&lt;/strong&gt; Com o mobiles você pode brincar com o acelerometro, GPS, multitouch, giroscópio e etc. Isso amplia a experiência do usuário para um patamar que o desktop nunca terá.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foco.&lt;/strong&gt; Quem já teve que adaptar um site para mobiles entende que informação demais prejudica. Se focar nas ações essenciais que o usuário executará ao acessar seu site com um dispositivo móvel é o básico.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A atenção em áreas como Arquitetura de Informação, Usabilidade e Acessibilidade é aumentada.&lt;/strong&gt; Em mobiles, decidir onde cada botão vai ser posicionado é tão essencial quanto a programação server-side ou um HTML bem feito.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Te prepara para outros cenários.&lt;/strong&gt; Fazer sites mobile é só o primeiro passo. Mas e os grandes formatos como SmartTVs ou outros dispositivos? Não vai demorar muito para acessarmos a internet de qualquer dispositivo sem bloqueios ou restrições.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;o-design&#34;&gt;O design&lt;/h3&gt;

&lt;p&gt;O design também precisa ser revisto. Na verdade, o design mais do que nunca conta com as respostas e os conceitos de AI, Acessibilidade e Usabilidade. Se antes fazíamos festa porque a resolução dos desktops aumentaram e agora temos mais espaço para trabalharmos, nos mobiles o cenário é completamente o contrário.&lt;/p&gt;

&lt;h4 id=&#34;arquitetura-de-informação&#34;&gt;Arquitetura de Informação&lt;/h4&gt;

&lt;p&gt;As informações que você previa no desktop precisam ser remanejadas, diminuidas e retrabalhadas para que se adaptem nas telas menores. A maioria dos celulares tem algo em torno de 320&amp;#215;480 pixels. Se não tomarmos cuidado, toda a informação pode se perder em uma tela tão pequena. No mundo mobile o simples é a palavra que manda.&lt;/p&gt;

&lt;p&gt;Você pode perceber que alguns websites conseguiram resolver bem seus problemas de excesso de informação promovendo em seus websites mobiles apenas as ações realmente importantes e dando foco ao conteúdo que provavelmente o usuário irá consumir quando estiver utilizando um pequeno dispositivo.&lt;/p&gt;

&lt;p&gt;Se você é usuário do Flickr, conhece aquele bando de opções que ele guarda em seu menu principal. São centenas de opções e ações que certamente não cabem em uma tela tão pequena.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/flickr1.png&#34; alt=&#34;screenshot da tela do site do Flickr versão desktop&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Um estudo profundo certamente deve ser feito para que você saiba exatamente quais informações e ações serão mais úteis na versão mobile.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://m.flickr.com/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/flickr2.png&#34; alt=&#34;screenshot da tela do site do Flickr versão mobile&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;mantendo-informações-importantes&#34;&gt;Mantendo informações importantes&lt;/h4&gt;

&lt;p&gt;Existem também outras formas de acomodar um grande número de informações sem que isso atrapalhe o usuário. Uma delas é criando menus dropdown ou separando uma tela que guarda as informações que serão menos utilizadas mas que são igualmente importantes para a utilização do site/sistema. Veja abaixo dois bons exemplos vindo dos sites Gmail e ESPN.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/12/gmail.gif&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/gmail.gif&#34; alt=&#34;gmail versão mobile&#34; title=&#34;gmail&#34; width=&#34;640&#34; height=&#34;417&#34; class=&#34;alignnone size-full wp-image-4678&#34; srcset=&#34;uploads/2011/12/gmail.gif 640w, uploads/2011/12/gmail-300x195.gif 300w&#34; sizes=&#34;(max-width: 640px) 100vw, 640px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/12/espn.gif&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/espn.gif&#34; alt=&#34;epsn.com versão mobile&#34; title=&#34;espn&#34; width=&#34;638&#34; height=&#34;355&#34; class=&#34;alignnone size-full wp-image-4677&#34; srcset=&#34;uploads/2011/12/espn.gif 638w, uploads/2011/12/espn-300x166.gif 300w&#34; sizes=&#34;(max-width: 638px) 100vw, 638px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Onde os usuários utilizam seus mobiles e visitam seu site? Bem, de todo lugar. Algumas pessoas acham que usuários utilizam apenas quando estão em filas, ônibus, parados no trânsito etc. Mas algumas pesquisas mostram que 84% dos usuários usam seus dispositivos em casa. Isso mesmo&amp;#8230; em casa. Veja bem: quando as pessoas estão em casa, elas preferem utilizar seus smartphones em vez do notebook/desktop!&lt;/p&gt;

&lt;p&gt;62% utilizam enquanto assistem a TV. Até a TV perde atenção quando briga com os mobiles.&lt;/p&gt;

&lt;p&gt;Não existem mais desculpas. Os browsers para mobiles estão tão modernos quanto os dos desktops. O hardware está muito mais poderoso, mais do que poderíamos imaginar a dois anos atrás. Existe um número gigante de usuários utilizando estes dispositivos, isso os torna potenciais visitantes e claro, compradores. Porque desperdiçar esta oportunidade?&lt;/p&gt;

&lt;p&gt;Você pode &lt;a href=&#34;http://www.abookapart.com/products/mobile-first&#34;&gt;ler mais sobre este assunto neste livro&lt;/a&gt; esperto escrito por &lt;a href=&#34;http://www.lukew.com/&#34;&gt;LUKE WROBLEWSKI&lt;/a&gt;. Aproveite!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Experiência deve ter começo, meio e fim</title>
      <link>https://tableless.github.io/hugo-public/experiencia-deve-ter-comeco-meio-e-fim/</link>
      <pubDate>Mon, 28 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/experiencia-deve-ter-comeco-meio-e-fim/</guid>
      <description>&lt;p&gt;&lt;small&gt;Esse artigo pode parecer meio confuso, mas é apenas um pensamento que estive matutando. Não ligue se a ordem das ideias estiverem tortas e sinuosas. 😉&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Tive uma experiência muito ruim no primeiro dia de 2010: pulei na piscina com meu iPhone no bolso.&lt;/p&gt;

&lt;p&gt;Ok, pode me xingar agora.&lt;/p&gt;

&lt;p&gt;Depois da tragédia, ele durou rápidos 5 segundos, e faleceu. Não ligava, não apitava, não fazia nada. &amp;#8220;Paciência&amp;#8221;, falei para mim mesmo. No dia seguinte peguei um celular reserva que eu tinha guardado: um HTC Touch, com Windows Mobile 6 (não Windows Phone). Foi então que eu notei o porque o trabalho da Apple vicia os consumidores.&lt;/p&gt;

&lt;p&gt;Estamos bem acostumados a utilizar um notebook ou um computador desktop, com monitor, teclado e mouse. A interface do sistema muitas vezes parece desaparecer quando se abre o navegador. A experiência de uso dos periféricos já é bastante conhecida e isso facilita muito a forma com que o usuário interaje com a interface. Há uma harmonia, se é que você me entende. A mesma coisa é dificil de acontecer quando utilizamos um dispositivo mobile. Em um dispositivo móvel você precisa de foco. Não há espaço para milhares de botões com dezenas de ações. É SIM e NÃO. É OK ou CANCELAR e mais nada. O que não é o caso do Windows Mobile. O Windows Mobile foi feito daquele jeito Microsoft. Muito, mas muito diferente do Windows Phone que está um primor. Com uma interface totalmente repensada, do zero, onde seu visual se integra com os outros sistemas da marca. Há uma homogeneidade na experiência do usuário quando ele usa a Live do XBOX, o Windows Phone e o Windows 8. A experiência é cross-platform. A Apple faz isso durante anos. E durante todos estes anos esse foi seu segredo. O famoso &amp;#8220;eco sistema Apple&amp;#8221;. Tudo funciona muito bem quando estamos com nossos iPhones, iPads, MacBooks e iPods. Se eu tenho um iPad, mas utilizo um PC, algo fica estranho. Funciona, mas fica estranho.&lt;/p&gt;

&lt;p&gt;Assim como sistema dos mobiles, os sites precisam seguir a mesma fórmula de simplicidade e foco. Por isso, criar sites para mobiles é uma arte. É um jogo de prioridades. Você precisa saber o que é importante na página e focar naquilo. Há um bom trabalho de arquitetura de informação que precisa ser feito. E não se engane, as vezes é muito mais dificil desenvolver um projeto de arquitetura para mobiles do que para versões full.&lt;/p&gt;

&lt;p&gt;O iPhone, e agora o Windows Phone, se destacam muito por conta dessa harmonia que citei acima. Há uma ligação em tudo ali. Quando você aciona o Safari, ele tem uma interface intuitiva, bem acabada e que não agride a usabilidade do site. O iPhone tem um browser 100% atualizado com os Padrões Web e isso ajuda um bocado o desenvolvimento de interfaces inteligentes.&lt;/p&gt;

&lt;p&gt;E a Apple se preocupa com essa harmonia da qual estamos falando, ela prepara uma série de materiais que ajudam os desenvolvedores. São guias de desenvolvimento e referência com os princípios de design e usabilidade que garantem a experiência completa. Por causa disso os desenvolvedores e designers fazem ótimos apps, tornando a experiência do usuário completa e uniforme durante o uso do dispositivo.&lt;/p&gt;

&lt;p&gt;É por isso que a vale a pena municiar os desenvolvedores e designers do mundo todo, para que a experiência não termine quando o consumidor feche o seu aplicativo ou abra o navegador. Experiência tem começo, meio e fim. A Apple se preocupa com essas etapas. Ela sabe que se o site abrir &amp;#8220;quebrado&amp;#8221; o consumidor vai xingar primeiro o aparelho e não site. Tudo é uma única experiência. Começa no sistema do aparelho e termina no site de um terceiro.&lt;/p&gt;

&lt;p&gt;O resto dos aparelhos começam pecando por ter um browser ruim ou uma interface de uso complicada. Na maioria os browsers não dão suporte algum aos Padrões. Isso é um pecado. Se eu tenho um Smartphone, eu passarei mais tempo na internet, conectado, do que falando ao telefone. Esse é apenas um ponto sobre o porque um dispositivo móvel precisa ter um browser decente.&lt;/p&gt;

&lt;p&gt;O usuário tem uma boa experiência quando consegue com sucesso a informação que procurava, sem bloqueios. Se ele consegue passar esse processo com sucesso, como se o dispositivo (mobile, desktop, notebook, leitor e tela etc) e o site/sistema fossem transparentes, aí cumprimos com o nosso dever.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Utilizando a Biblioteca Modernizr</title>
      <link>https://tableless.github.io/hugo-public/utilizando-a-biblioteca-modernizr/</link>
      <pubDate>Mon, 17 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/utilizando-a-biblioteca-modernizr/</guid>
      <description>

&lt;h3 id=&#34;problemas-de-compatibilidade&#34;&gt;Problemas de compatibilidade&lt;/h3&gt;

&lt;p&gt;Quando produzimos um site os problemas de compatibilidade fazem parte da regra do jogo. Para tentar contornar estes problemas utilizamos hacks, comentários condicionais, sniffing de browsers e outras coisas, que muitas vezes mais prejudicam do que ajudam.&lt;/p&gt;

&lt;p&gt;Para ajudar mais ainda o CSS3 e o HTML5 apareceram derrubando tudo, e o problema de compatibilidade que já era chato, ficou mais chato que meia molhada. Embora os browsers estejam muito mais atuais e suportando propriedades avançadas de CSS3 e HTML5, não é garantia que todos eles suportem as mesmas propriedades. E é aqui que começamos a ter problemas novamente, como no passado.&lt;/p&gt;

&lt;p&gt;Como você consegue reconhecer quem um determinado browser suporta CSS Animation? Como você sabe que o browser conhece LocalStorage do HTML5? Você não vai ficar olhando numa tabelinha toda vez que tiver essas dúvidas para fazer um visual ou uma solução alternativa para tais browsers.&lt;/p&gt;

&lt;p&gt;É por essas e outras que você utilizará a Modernizr.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-a-modernizr&#34;&gt;O que é a Modernizr&lt;/h3&gt;

&lt;p&gt;Modernizr é uma pequena biblioteca Javascript que detecta a disponibilidade das novas características do HTML5 e CSS3 nos browsers. Muitas destas características já estão implementadas nos browsers, mas é muito chato você decorar quais novidades os browsers já estão suportando. O que a Modernizr faz é simples: ela te diz quais features um determinado browser suporta e insere classes no HTML para que você possa utilizar para fazer uma versão alternativa de visual ou solução.&lt;/p&gt;

&lt;p&gt;Entenda que a Modernizr não é um sniffing de browser. Ela é diferente. A Modernizr faz o trabalho de detectar das seguintes formas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ela testa 40 features de CSS3 e HTML5 em alguns milisegundos.&lt;/li&gt;
&lt;li&gt;Depois ela cria objetos javascript que contém os resultados destes testes.&lt;/li&gt;
&lt;li&gt;Aí são adicionadas classes no elemento HTML descrevendo exatamente quais propriedades e novidades são ou não nativamente suportadas.&lt;/li&gt;
&lt;li&gt;Depois disso você consegue ter os resultados descritos nos navegadores dinamicamente e então pode tomar decisões criando alternativas para aquelas propriedades não suportadas pelos browsers antigos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;como-funciona&#34;&gt;Como funciona&lt;/h3&gt;

&lt;p&gt;É simples: primeiro você baixa a versão mais atual da biblioteca no endereço &lt;a href=&#34;http://www.modernizr.com/&#34;&gt;http://www.modernizr.com/&lt;/a&gt;. O interessante é que você tem a opção para personalizar a biblioteca, indicando quais features você quer que a Modernizr teste no seu projeto.&lt;/p&gt;

&lt;p&gt;Depois você inclui esse pacote no seu HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
    &amp;lt;title&amp;gt;Teste de Modernizr&amp;lt;/title&amp;gt;
    &amp;lt;script src=&#34;modernizr-2.0.6.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Feito isso, insira uma classe &lt;em&gt;no-js&lt;/em&gt; no elemento &lt;em&gt;HTML&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html class=&#34;no-js&#34; lang=&#34;pt-br&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Quando a Modernizr rodar, ela irá substituir essa classe para uma &lt;em&gt;js&lt;/em&gt; se o browser estiver com o Javascript ligado, já te dando um feedback para tomar alguma atitude se o usuário estiver com o Javascript desligado.&lt;/p&gt;

&lt;p&gt;Junto com essa mudança são adicionadas outras classes, indicando o que o browser aceita nativamente ou o que ele não aceita. Ficará algo parecido com isso:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html class=&#34; js flexbox canvas canvastext webgl no-touch geolocation postmessage websqldatabase no-indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths&#34; lang=&#34;pt-br&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O browser que eu utilizei é o Safari/Mac. Pelo visto ele aceita bastante coisa. 😉&lt;/p&gt;

&lt;p&gt;O que o browser não aceita, a Modernizr insere uma classe com o prefixo &lt;strong&gt;no-&lt;/strong&gt; antes da classe, por exemplo: no-boxshadow, no-geolocation, no-touch etc.&lt;/p&gt;

&lt;p&gt;A Modernizr também cria um objeto Javascript contendo um valor booleano para cada uma dessas features, possibilitando a criação de testes. Um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;if (Modernizr.geolocation) {
       alert(&#34;Aceita&#34;)
} else {
       alert(&#34;Não Aceita&#34;)
}
&lt;/pre&gt;

&lt;h3 id=&#34;exemplos-de-utilidade&#34;&gt;Exemplos de utilidade&lt;/h3&gt;

&lt;p&gt;Exemplo bem básico: imagine que você queira utilizar o box-shadow em seu projeto. Browsers como o IE6,7,8 não reconhecem essa feature, então seria interessante darmos uma alternativa, como por exemplo, colocando uma borda em vez de sombra. Assim o elemento não fica tão diferente do que deveria.&lt;/p&gt;

&lt;p&gt;Como a Modernizr colocou uma classe no elemento HTML referente a aceitação das features, podemos utilizá-la fazendo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.loginBox {
    box-shadow:0 10px 10px rgba(0, 0, 0, 0.3);
}

.no-boxshadow .loginBox {
    border: 1px solid #CCC;
    border-bottom: 3px solid #CCC;
}
&lt;/pre&gt;

&lt;p&gt;Assim, se o browser não aceitar a propriedade box-shadow o usuário verá uma borda no lugar. Você pode fazer isso com praticamente qualquer nova feature do CSS3 e do HTML5. Uma &lt;a href=&#34;http://bit.ly/oA9jHu&#34; title=&#34;link externo&#34;&gt;listagem completa dessas features suportadas está aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ah, mais uma coisa: provavelmente você já utiliza um scriptzinho &lt;em&gt;html5.js&lt;/em&gt; para fazer com o que os Internet Explorers reconheçam as tags do HTML5, correto? O Modernizr já faz isso automaticamente. Sugiro que pare de utilizar o html5.js e passe a utilizar a Modernizr somente.&lt;/p&gt;

&lt;p&gt;A Modernizr facilita demais as coisas. A ideia é que você não prive seus projetos da utilização de features novas. A produção vai ficar mais eficaz e seu projeto sempre estará atualizado com as melhores práticas do mercado. Adote a Modernizr e seja feliz.&lt;/p&gt;

&lt;p&gt;Sugiro que você &lt;a href=&#34;http://www.modernizr.com/docs/&#34; title=&#34;link externo para a documentação da Modernizr&#34;&gt;dê uma lida na documentação&lt;/a&gt; da Modernizr. Tem bastante coisa interessante lá que você deveria saber.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Biblioteca CSS ou Framework?</title>
      <link>https://tableless.github.io/hugo-public/biblioteca-css-ou-framework/</link>
      <pubDate>Mon, 10 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/biblioteca-css-ou-framework/</guid>
      <description>

&lt;p&gt;Primeiro você precisa entender a diferença entre os dois. A &lt;a href=&#34;http://tableless.com.br/?author=8&#34;&gt;Talita Pagani&lt;/a&gt; &lt;a href=&#34;http://bit.ly/qbkeRb&#34;&gt;em um dos seus artigos&lt;/a&gt; descreve o que é um framework assim:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Framework é um conjunto de componentes que provêm uma estrutura básica de elementos reutilizáveis, tendo uma arquitetura consistente de funcionalidade genérica sob a qual a aplicação será construída.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O uso de uma Biblioteca (CSS, Javascript, etc) é bastante parecido com a utilização de um framework. Eu prefiro a utilização de uma biblioteca por ser menos instrusiva e muito mais personalizável. Existem algumas diferenças que você deve prestar sua atenção para entender qual das duas formas é melhor para o projeto.&lt;/p&gt;

&lt;h3 id=&#34;modificação-visual&#34;&gt;Modificação visual&lt;/h3&gt;

&lt;p&gt;Enquanto o framework modifica as características visuais, a biblioteca se restringe manipulando a diagramação ou a posição dos elementos.&lt;/p&gt;

&lt;p&gt;Na grande maioria, os frameworks modificam automaticamente o visual de alguns elementos, gerando um certo retrabalho, porque geralmente o design aplicado não é o design aprovado pelo cliente ou pelo designer do projeto. Veja por exemplo o &lt;a href=&#34;http://twitter.github.com/bootstrap/&#34;&gt;Bootstrap&lt;/a&gt; feito pelo pessoal do Twitter. Assim que linkado em seu código, os elementos como os campos de formulários e parágrafos tem suas características visuais modificadas para seguir um design pré definido pelos donos do framework &amp;#8211; diga-se de passagem, o trabalho de design feito pelo pessoal do Bootstrap é muito bacana. Já as bibliotecas, na maioria das vezes, não faz nenhuma modificação no design ou na posição dos elementos sem a inserção de Classe ou ID. Geralmente as bibliotecas são restritas para manipular a posição e as dimensões dos elementos, facilitando a diagramação de layouts, sem modificar as características visuais, já que os layouts de cada site tem o design diferente. É por isso que eu gosto de definir que frameworks são ótimos para construir sistemas, já as bibliotecas ajudam muito mais ao construir websites. Sistemas tem muitos formulários, botões de ação, pouco texto e etc. A utilização de um framework é muito interessante nesse caso porque não perdemos tempo manipulando e definindo um padrão visual para estes elementos &amp;#8211; como os tamanhos dos campos de formulário de texto.&lt;/p&gt;

&lt;p&gt;Já a biblioteca é muito útil para definir quando os elementos terão float, position, largura variável e etc. São características de posição e diagramação, que não afetam a questão do design.&lt;/p&gt;

&lt;h3 id=&#34;quantidade-de-código-não-utilizado&#34;&gt;Quantidade de código não utilizado&lt;/h3&gt;

&lt;p&gt;Geralmente ao utilizar uma biblioteca, talvez você estará linkando mais código do que o necessário para o seu projeto. Você pode não utilizar todas essas classes/ids pré definidos pelo autor da biblioteca, o que é normal dependendo do projeto e do design criado. Este risco diminui quando utilizamos frameworks, já que eles modificam as características de todos os elementos principais do projeto. Praticamente todo o código estará do framework estará sendo usado porque eles são aplicados nos elementos assim que o framework é linkado no código. Porém, com a biblioteca, é fácil mapearmos quais as classes utilizadas e excluir o código que não está sendo usado para diminuir o tamanho dos arquivos e do código.&lt;/p&gt;

&lt;h3 id=&#34;personalização-e-criação&#34;&gt;Personalização e criação&lt;/h3&gt;

&lt;p&gt;A personalização ou criação de uma biblioteca CSS é muito mais fácil do que se resolvermos criar do zero um framework. Você consegue facilmente criar uma biblioteca de CSS contendo algumas classes úteis para qualquer projeto, por exemplo:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;margin:0;&lt;/p&gt;

&lt;p&gt;padding:0;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;.fLeft {float: left}&lt;/p&gt;

&lt;p&gt;.fRight {float: right;}&lt;/p&gt;

&lt;p&gt;.fNone {float: none;}&lt;/p&gt;

&lt;p&gt;.dBlock {display: block;}&lt;/p&gt;

&lt;p&gt;.dInline {display: inline;}&lt;/p&gt;

&lt;p&gt;.dInlineBlock {display: inline-block;}&lt;/p&gt;

&lt;p&gt;.dNone {display: none;}&lt;/p&gt;

&lt;p&gt;.pAbsolute {position: absolute;}&lt;/p&gt;

&lt;p&gt;.pRelative {position: relative;}&lt;/p&gt;

&lt;p&gt;.cBoth {clear: both;}&lt;/p&gt;

&lt;p&gt;.cLeft {clear: left;}&lt;/p&gt;

&lt;p&gt;.cRight {clear: right;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;O código acima é um bom começo para uma biblioteca CSS personalizada. Contém ali classes básicas que se combinadas dão diferentes características para um determinado elemento. Essas classes também se mostram muito úteis se reutilizarmos no código javascript do projeto.&lt;/p&gt;

&lt;h3 id=&#34;sistema-e-site&#34;&gt;Sistema e Site&lt;/h3&gt;

&lt;p&gt;Design de sistemas são sempre parecidos. Todos eles tem muitos campus de formulário, checkboxes, combos, radio buttons e etc. É basicamente manipulação de formulários, alertas de erro e mensagens para o usuário, manipulação de botões de ação e etc. Não foge muito disso.&lt;/p&gt;

&lt;p&gt;Já o design de sites são todos bem diferentes. Por isso que a manipulação visual dos frameworks se torna inútil e gera muito retrabalho.&lt;/p&gt;

&lt;p&gt;Eu prefiro utilizar bibliotecas para a criação de sites. Para o desenvolvimento de sistemas, prefiro utilizar framworks.&lt;/p&gt;

&lt;p&gt;Mas tenha em mente: se for decidir utilizar qualquer um dos dois, é bom que essa decisão seja feita logo no começo do projeto. Aplicar um framework no meio de um projeto pode dar muitos problemas e tomar muito tempo. Por isso é importante que essa decisão seja feita no início do projeto.&lt;/p&gt;

&lt;h3 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h3&gt;

&lt;p&gt;Entenda que um framework pode ter uma biblioteca de CSS embutida em seu core. Tendo também a possibilidade de manipular o visual dos elementos, o framework se mostra muito mais completo que uma biblioteca CSS, embora a bilioteca ganhe por ser mais fácil de personalizar e por não manipular o visual dos elementos, te deixando livre para formatar da forma que você bem entender.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lendo um arquivo de texto com AJAX</title>
      <link>https://tableless.github.io/hugo-public/lendo-um-arquivo-de-texto-com-ajax/</link>
      <pubDate>Wed, 14 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/lendo-um-arquivo-de-texto-com-ajax/</guid>
      <description>&lt;p&gt;Inicio mostrando como realizar uma requisição de arquivos de texto com AJAX.&lt;/p&gt;

&lt;p&gt;Em tempos de Web 2.0, não podemos pensar mais em sites que usem requisições síncronas para rotinas de interação com o usuário.&lt;/p&gt;

&lt;p&gt;Uma das técnicas mais utilizadas para esse fim é o AJAX &amp;#8211; Assynchronous Javascript and XML.&lt;/p&gt;

&lt;p&gt;De uma forma resumida e sem muito &amp;#8220;tecniquês&amp;#8221;, AJAX é a captura de informações sem a necessidade de recarregamento da estrutura do documento HTML a cada requisição ao servidor web.&lt;/p&gt;

&lt;p&gt;E para poder fazer conexão assíncrona com o servidor web temos que criar um objeto com as propriedades e métodos AJAX .&lt;/p&gt;

&lt;p&gt;Porém, como a web não é um ambiente perfeito, temos que criar um objeto AJAX para os browsers Firefox, Chrome, Opera, Safari, chamado de XMLHttpRequest. E para o IE um objeto ActiveX que faça referencia ao objeto XMLHTTP.&lt;/p&gt;

&lt;p&gt;Como padrão de desenvolvimento, vamos criar um arquivo que faça essa identificação e criação chamado de xhr.js.&lt;/p&gt;

&lt;p&gt;Para a criação desse arquivo, abra o editor de código de sua preferência e digite o seguinte código:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arquivo xhr.js&lt;/strong&gt;&amp;#8230;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;//Declarando variaveis globais
var xhr;
var txt ;

function ajax(){
//Verificando se os browsers aceitam o objeto XMLHttpRequest
if(window.XMLHttpRequest){
xhr  = new XMLHttpRequest();
}
//Verificando se o browser IE versão &amp;gt; 6
else if(window.ActiveXObject){
try{
xhr = new ActiveXObject(Msxml2.XMLHTTP);
}
catch(e){
try{
xhr =  new ActiveXObject(Microsoft.XMLHTTP);
}
catch(er){
txt = &#34;Seu browser não aceita AJAX!&#34;;
alert(txt);
}
}
}
return xhr;
}
...
&lt;/pre&gt;

&lt;p&gt;Em seguida, vamos criar o arquivo HTML e fazer referência ao objeto AJAX criado pelo arquivo &lt;strong&gt;xhr.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para isso use a  tag script no head da página html. Exemplo: &lt;strong&gt;&lt;script type=&amp;#8221;text/javascript&amp;#8221; src=&amp;#8221;caminho/xhr.js&amp;#8221;&gt;&lt;/script&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arquivo ajax_txt.html&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;//Declarando variáveis globais
var xhr;
var valor;

//Função para pegar os arquivos de texto
function pegaTextos{
//Instancia o objeto ajax e guarda na var xhr
xhr = ajax();
//Captura o elemento select  via DOM
var txt = document.getElementById(&#34;textos&#34;);
//Pega o valor da opção escolhida na lista do campo select
valor = txt.options[txt.selectedIndex].value;
//Monta a url da chamada AJAX
var url = &#34;texto&#34;+valor+&#34;.txt&#34;;
//Abre a conexão com o servidor web via AJAX
xhr.open(&#34;GET&#34;,url,false);
//Confirma o envio dos dados
xhr.send(null);
//Verifica a mudança de estado do servidor web e dispara a função para mostrar os textos
xhr.onreadystatechange = mostraTextos;
}

//Função para mostras os textos
function mostraTextos(){
//Verifica o status do retorno do servidor web
if(xhr.readyState == 4 &amp;&amp; xhr.status == 200){
//Pega a resposta do servidor web
var resposta = xhr.responseText;
//Captura a div Box para mostrar os textos
var box  = document.getElementById(&#34;box&#34;);
//Escreve os textos na div Box
box.innerHTML = resposta;
//Aplica um estilo de borda na div Box
box.style.border = &#34;1px dotted #333&#34;;
}
}

&lt;/pre&gt;

&lt;p&gt;Aplicando um estilo CSS na div Box&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;#box{
width: 450px;
height: auto;
padding: 10px;
margin-top: 25px;
}

&lt;/pre&gt;

&lt;p&gt;Montamos agora o HTML com o combo dos textos.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;Selecionando textos com AJAX&amp;lt;/p&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;select id=&#34;textos&#34; onchange=&#34;pegaTextos()&#34;&amp;gt;
&amp;lt;option value=&#34;&#34; selected=&#34;selected&#34;&amp;gt;selecione&amp;lt;/option&amp;gt;
&amp;lt;option value=&#34;1&#34;&amp;gt;Texto 1&amp;lt;/option&amp;gt;
&amp;lt;option value=&#34;2&#34;&amp;gt;Texto 2&amp;lt;/option&amp;gt;
&amp;lt;option value=&#34;3&#34;&amp;gt;Texto 3&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&amp;lt;div id=&#34;box&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Para que a chamada AJAX funcione, temos que criar os arquivos de textos com os respectivos nomes: texto1.txt,texto2.txt e texto3.txt.&lt;/p&gt;

&lt;p&gt;Em seguida salve os arquivos na mesma pasta onde se encontram os &lt;strong&gt;arquivos xhr.js&lt;/strong&gt; e &lt;strong&gt;ajax_txt.html&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Agora é so testar!&lt;/p&gt;

&lt;p&gt;Lembrando que para uma requisição AJAX funcionar, ela tem que passar por um servidor. No nosso caso o &lt;strong&gt;localhost&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nem só de client-side vive um site</title>
      <link>https://tableless.github.io/hugo-public/nem-so-de-client-side-vive-um-site/</link>
      <pubDate>Sun, 28 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/nem-so-de-client-side-vive-um-site/</guid>
      <description>

&lt;p&gt;&lt;small&gt;Artigo publicado originalmente na revista Wide em Janeiro/Fevereiro de 2011.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Estou feliz porque o mercado de client-side tem amadurecido de forma inteligente no Brasil. Empresas mais espertas entenderam a importância do código HTML/CSS/ JavaScript bem escrito. O problema é que grande parte das empresas, clientes e desenvolvedores acham que o trio HTML/CSS/JavaScript faz milagres. É certo pensar que um código bem escrito traz grandes vantagens para o projeto, mas ele sozinho não faz milages.&lt;/p&gt;

&lt;p&gt;É errado pensar que apenas por que você escreveu código HTML semântico seu site aparecerá em primeiro no Google ou ficará mais acessível para deficientes visuais. O código client-side é apenas a porta de entrada para uma série de outras tarefas.&lt;/p&gt;

&lt;h3 id=&#34;seo&#34;&gt;SEO&lt;/h3&gt;

&lt;p&gt;Para criar um projeto de SEO é preciso seguir uma série de etapas que formam um grande pacote e que só então é possível perceber as vantagens do trabalho do SEO.&lt;/p&gt;

&lt;p&gt;O código client-side entrará como uma pequena parte do esforço. De forma bem simples, podemos listar alguns pontos importantes que precisamos tomar atenção além do HTML bem feito:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Estudo de concorrentes;&lt;/li&gt;
&lt;li&gt;Definição de diagramação e quantidade de texto nas diversas partes do site;&lt;/li&gt;
&lt;li&gt;Estudo de palavras chave e termos de uso;&lt;/li&gt;
&lt;li&gt;Planejamento de landing pages, entradas e saídas;&lt;/li&gt;
&lt;li&gt;Criação de robot.txt e sitemap.xml;&lt;/li&gt;
&lt;li&gt;Monitoramento de palavras, visitação e buscadores;&lt;/li&gt;
&lt;li&gt;Estudo de funil e preparação de goals;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu não sou um especialista do Google nem nada do gênero, mas sei que estes tópicos são importantes ao manter ou criar um website otimizado. O HTML certamente faz parte destes tópicos, mas ele não invalida nenhum dos outros pontos.&lt;/p&gt;

&lt;p&gt;Obviamente não adianta nada fazer um bom estudo de palavraschave e marcá-las de forma errada com HTML.&lt;/p&gt;

&lt;h3 id=&#34;acessibilidade&#34;&gt;Acessibilidade&lt;/h3&gt;

&lt;p&gt;Como em projetos de SEO, o planejamento de Acessibilidade precisa de uma série de etapas funcionar corretamente. No caso da acessibilidade o HTML ocupa um grau de importância muito grande, contudo, há pequenos pontos que o HTML não pode resolver sozinho. Veja alguns exemplos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contraste e cores do layout;&lt;/li&gt;
&lt;li&gt;Estudo de atalhos de teclado;&lt;/li&gt;
&lt;li&gt;Menu de navegação rápida;&lt;/li&gt;
&lt;li&gt;Textos em tooltips, titles, alts de imagens etc;&lt;/li&gt;
&lt;li&gt;Tamanho de botões e textos;&lt;/li&gt;
&lt;li&gt;Arquitetura de Informação sensata e simples;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Embora algumas das tarefas sejam resolvidas com HTML/CSS, as definições e metas são pensadas pelos desenvolvedores. Qual cor, tamanho de botões e etc são decididos pelo designer e não pelo HTML. Não é incomum acharmos que apenas porque o site tem um código bem estruturado e semântico ele será bem acessado por cegos com leitores de tela ou pessoas com outro tipo de necessidade. Há tópicos que se dependem meramente do bom senso.&lt;/p&gt;

&lt;p&gt;Se analisarmos bem as disciplinas de Acessibilidade, Usabilidade e Arquitetura de Informação, perceberemos que elas comandam a forma com que o trio HTML/CSS/Javascript devem se comportar. Há várias etapas e decisões que tomamos antes de colocarmos a mão no código. Cada um tem sua importância. Muitos erros de HTML podem ser evitados com um planejamento de Arquitetura de Informação. Muito código CSS pode ser otimizado estudando os wireframes do projeto.&lt;/p&gt;

&lt;p&gt;Lembre-se de que o HTML/CSS/Javascript serve o conteúdo e não contrário. Eles devem trabalhar para que a informação seja bem exibida, formatada e que chegue integralmente para o usuário.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introdução ao Responsive Web Design</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-responsive-web-design/</link>
      <pubDate>Mon, 15 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-responsive-web-design/</guid>
      <description>

&lt;p&gt;Você já deve ter ouvido falar sobre Responsive Web Design. Você pode ler sobre isso &lt;a href=&#34;http://bit.ly/pcrwxY&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://bit.ly/mSCRSD&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Até pouco tempo atrás tínhamos praticamente apenas um meio de acessar a internet, que era pelo desktop. Podíamos acessar mal e porcamente a internet pelos celulares ou por outros aparelhos ligados a televisão etc, mas nenhum destes meios nos permitia acessar a internet com a facilidade que tínhamos quando utilizávamos um desktop.&lt;/p&gt;

&lt;p&gt;Hoje o cenário é totalmente diferente. Os smartphones tomaram conta. Até mesmo os celulares mais simples dispõem de browsers altamente eficazes e se não há algum browser instalado, o usuário pode facilmente baixar o &lt;a href=&#34;http://www.opera.com/mobile/&#34;&gt;Opera Mobile&lt;/a&gt;. Há também as Tablets, que demoraram para aparecer, mas agora trazem flexibilidade para usuários que querem algo mais prático que um notebook e mais confortável que um smartphone. Não vai demorar muito para aparecer outros aparelhos diferentes ou que você acesse sem restrições a internet pela sua TV.&lt;/p&gt;

&lt;p&gt;Quando não restringimos os cenários a aparelhos temos um horizonte muito maior e mais frutífero. Entenda que a informação publicada na web pode e é totalmente reutilizada a qualquer momento. O Google faz isso com seu robô todos os dias, a todo momento. O robô do Google ou o de qualquer outro sistema de busca é um meio de acesso. O leitor de tela do usuário deficiente visual também é um meio de acesso. O leitor de RSS utilizado pelo seu celular, por mais simples que seja, é um meio de acesso. Podemos dizer então que qualquer dispositivo que o usuário utilize para consumir informação na web é um meio de acesso. Esse &amp;#8220;qualquer coisa&amp;#8221; pode ser um robô ou um sistema manipulado pelos visitantes de seu site.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-responsive-web-design&#34;&gt;O que é Responsive Web Design&lt;/h3&gt;

&lt;p&gt;Responsive Web Design é acima de tudo um conceito. Nós nos responsabilizamos a apresentar a informação de forma acessível e confortável para diversos meios de acesso. Muitos websites restringem o conceito a aparelhos com telas de diversos tamanhos, mas o conceito é muito mais abrangente.&lt;/p&gt;

&lt;p&gt;Mesmo assim irei restringir os primeiros exemplos a dispositivos que tenham telas e que estão mais presentes atualmente. Não irei me estender muito a meios de acesso como leitores de tela, robôs de busca ou outros dispositivos.&lt;/p&gt;

&lt;h3 id=&#34;o-problema-de-entregar-conteúdo-em-diversos-formatos&#34;&gt;O problema de entregar conteúdo em diversos formatos&lt;/h3&gt;

&lt;p&gt;Para fazer um website que seja acessível por qualquer dispositivo você geralmente tenta detectar o aparelho que o usuário está utilizando. Se for um desktop ou um notebook, você redireciona o acesso para um código CSS que formata seu site para o design mais confortável em grandes monitores. Se você detectar que o usuário está utilizando um dispositivo móvel, você o redireciona para uma versão que formatará o site para um formato compatível para este dispositivo.&lt;/p&gt;

&lt;p&gt;Essa ideia é simples e foi efetiva por algum tempo quando utilizávamos &lt;a href=&#34;http://bit.ly/r6Vr3P&#34;&gt;Media Types&lt;/a&gt; do CSS.&lt;/p&gt;

&lt;p&gt;Com o advento dos novos aparelhos como tablets, smartphones e até mesmo as televisões LED e LCD, essa técnica se tornou muito obsoleta.&lt;br /&gt;
Entenda porque: os media types detectavam algumas características dos meios de acesso, por exemplo o valor &lt;strong&gt;handheld&lt;/strong&gt; filtrava aparelhos com telas de tamanho pequeno e conexão com a internet limitada. O valor &lt;strong&gt;screen&lt;/strong&gt;, filtrava aparelhos com telas coloridas, normalmente terminais com monitores.&lt;/p&gt;

&lt;p&gt;Entende porque estas características estão obsoletas ou se confundem com a quantidade de aparelhos existentes? Hoje 100% dos smartphones suportam resoluções de tela maiores e com acesso a um número ilimitado de cores que os monitores antigos. Quase nenhum celular tem telas pequenas e conexão limitada com a internet. Logo, estes parâmetros ficaram totalmente inúteis.&lt;/p&gt;

&lt;p&gt;Para termos uma ideia melhor, a tela do iPhone e do iPad suportam resoluções muito maiores do que os monitores antigos. Lembro que utilizava em meu antigo monitor de 13&amp;#8221; resolução de 800&amp;#215;600. A resolução do iPad é de 1024&amp;#215;768 com 132ppp. Meu monitor de 13&amp;#8221; até chegava nessa resolução, mas daquele jeito porco. Até o iPhone tem uma resolução melhor: 960&amp;#215;640.&lt;/p&gt;

&lt;p&gt;Agora entenda a regra primordial, que deve guiar todo o planejamento de design para diversos dispositivos: O que importa é a resolução e não o tamanho da tela.&lt;/p&gt;

&lt;p&gt;Sabendo dessa regra, entenda que você não faz um layout para um determinado tipo de dispositivo, mas para aparelhos que tem uma determinada resolução. Um exemplo clássico é o site do Itaú. Eles tem uma equipe sensacional e muito pioneira. Eu consigo acessar perfeitamente o bankline por disversos dispositivos. Mas há um problema. Troquei meu smartphone Android recentemente por um Windows Phone. Eles tem as mesmas características. Mas quando entrei no bankline do Itaú, curiosamente fui redirecionado para a versão WAP do bankline. Com um bom desenvolvedor que sou, não me conformei e peguei emprestado o iPhone da minha mulher, copiei o endereço que o site redireciona os usuários do iPhone e o utilizei no meu Windows Phone. Voilá! Mesma interface, mesma usabilidade, mesmo design.&lt;/p&gt;

&lt;p&gt;Eles detectaram o tipo de aparelho e não as características do aparelho.&lt;/p&gt;

&lt;p&gt;Para nos ajudar a detectar as características dos aparelhos, bem como a resolução, utilizamos as Media Queries em detrimento aos Media Types.&lt;/p&gt;

&lt;h3 id=&#34;media-queries&#34;&gt;Media Queries&lt;/h3&gt;

&lt;p&gt;Media Queries é a utilização de &lt;a href=&#34;http://bit.ly/qUeFq6&#34;&gt;Media Types&lt;/a&gt; com uma ou mais expressões envolvendo características de uma media para definir formatações para diversos dispositivos.&lt;/p&gt;

&lt;p&gt;Em Media Types há um valor chamado SCREEN, como já vimos anteriormente. Este valor é utilizado quando queremos direcionar uma determinada formatação para aparelhos que tem telas coloridas. Bom, telas coloridas é algo muito genérico, qualquer coisa hoje em dia tem telas coloridas. É aí que as Media Queries nos ajudam: além de identificar aparelhos com telas coloridas, você consegue definir um range de tamanho de tela para que aquele CSS possa ser ativado.&lt;/p&gt;

&lt;p&gt;Veja um código de exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;estilo.css&#34; media=&#34;screen and (color)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Você já deve ter percebido o porque do QUERIES no nome. Você cria queries no valor do atributo &lt;strong&gt;media&lt;/strong&gt; o elemento LINK.&lt;/p&gt;

&lt;p&gt;Neste exemplo, estamos capturando terminais com montiores e coloridos. Você pode capturar outros terminais com alguma saída visual, mas pode ser que o usuário esteja utilizando algum aparelho com saída de monitor monocromático, por isso temos que especificar o COLOR no valor.&lt;/p&gt;

&lt;p&gt;Outro exemplo, onde restringimos a largura máxima da tela:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;smartphones.css&#34; media=&#34;screen and (max-width:480px)&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Aqui estamos direcionando o código CSS para aparelhos que tenham uma largura máxima de tela de 480px. Ou seja, qualquer aparelho que tenha essa largura de tela, deverá utilizar o código CSS que está no arquivo especificado.&lt;/p&gt;

&lt;p&gt;É aqui que a diversão começa: com essas queries você define uma série de ranges de larguras de tela, separando uma versão de CSS para cada grupo de aparelhos que se enquadradam nestas descrições. Você faz um formato para grandes telas, outro para telas de tablets e outro para telas de smartphones.&lt;/p&gt;

&lt;p&gt;E lá vem uma pergunta para você: as telas dos Tablets hoje em dia utilizando uma resolução de 1024&amp;#215;768. Muitos usuários utilizam esta mesma resolução de tela em seus computadores, com monitores maiores que as tablets. Como faz?&lt;/p&gt;

&lt;p&gt;Entenda: se você criou uma versão adaptável, confortável para resoluções de 1024&amp;#215;768, pensando em tablets, será que essa mesma versão não seria confortável para monitores com essa resolução? E vice-versa. Se você definiu que a versão desktop será carregada a partir de uma largura de tela de 1000px. As tablets também verão essa versão. Lembre-se o que realmente importa é o tamanho da tela dos aparelhos, não o aparelho em si. Quando você especifica o aparelho, você limita os usuários, quando você específica a resolução, você amplia o número possíveis de visitantes.&lt;/p&gt;

&lt;p&gt;Além do mais, vendo estatísticas por aí, a resolução de 1024&amp;#215;768 está decaindo muito rápido. Com as novas TVs e novos monitores, as resoluções de tela tem aumentado bastante, levando todos a um novo patamar.&lt;/p&gt;

&lt;p&gt;O que nos leva ao próximo assunto.&lt;/p&gt;

&lt;h3 id=&#34;outras-decisões-de-interface&#34;&gt;Outras decisões de interface&lt;/h3&gt;

&lt;p&gt;O primeiro passo foi identificar os aparelhos e usuários que utilizam determinadas resoluções para conseguirmos entregar um CSS específico.&lt;/p&gt;

&lt;p&gt;O segundo passo é fazer com que o layout seja amigável. Para isso você precisa entender os dilemas dos seus layouts e resolvê-los sem que o design mude da água para o vinho, mantendo as mesmas características e histórias de uso. Para tanto você precisa estudar e aplicar algumas premissas em seu website. Vou mostrar alguns pontos aqui, mas cada projeto terá uma abordagem diferente.&lt;/p&gt;

&lt;h4 id=&#34;layout-fluido&#34;&gt;Layout fluido&lt;/h4&gt;

&lt;p&gt;Layouts fluidos estão sendo utilizados desde os primórdios, mesmo assim de uma forma muito restrita porque dependendo do tamanho do site são bem difíceis de planejar. Veja o site da Amazon, ele ocupa todo o espaço do navegador e seu tamanho é adequado até uma determinada largura de tela.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://bit.ly/mSCRSD&#34;&gt;A List a Part&lt;/a&gt; tem um exemplo ótimo, por isso não vou fazê-lo perder tempo vendo outro exemplo. &lt;a href=&#34;http://www.alistapart.com/d/responsive-web-design/ex/ex-site-mini.html&#34;&gt;Veja este layout&lt;/a&gt; com a tela maximizada e vá diminuindo a janela do seu browser e veja os efeitos.&lt;/p&gt;

&lt;p&gt;Perceba ele se encaixa em qualquer tipo de tela. Dessa forma você entregou uma boa experiência de design para todos os públicos. Este é um ótimo exemplo para entender exatamente o que é Responsive Web Design.&lt;/p&gt;

&lt;p&gt;Quer &lt;a href=&#34;http://www.bryanjamesdesign.co.uk/&#34;&gt;outro ótimo exemplo&lt;/a&gt;? Neste caso o designer mostra uma mensagem para o usuário, o alertando de que o site é melhor visualizado em grandes resoluções.&lt;/p&gt;

&lt;h4 id=&#34;adaptando-menus&#34;&gt;Adaptando menus&lt;/h4&gt;

&lt;p&gt;Menus de websites são indispensáveis. É por lá que o usuário descobre todos os segredos do seu website, por onde ele se apaixona ou se perde. O menu é um dos principais elementos do seu website. É muito comum que usemos menus na horizontal. E como você sabe, menus na horizontal não são quase impossíveis em telas pequenas como as dos smarphones. Ainda mais se você tiver uma grande quantidade de opções. Logo, você precisa adaptar se menu para que ele continue usável e ao mesmo tempo não ocupe tanto espaço na tela.&lt;/p&gt;

&lt;p&gt;Há diversos caminhos que você pode tomar: você pode transformar o menu em um selectbox (ou combobox, como preferir), sumir com alguns ítens que podem não ser interessantes para usuários de mobiles ou reformatar seu design para que ele caixa de forma funcional em telas pequenas.&lt;/p&gt;

&lt;p&gt;Veja alguns exemplos abaixo. Entre no site e diminua a janela do browser para ver os efeitos. Se preferir ver na vida real, visite o site pelo seu smartphone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.highwayhurricanes.com/&#34;&gt;http://www.highwayhurricanes.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.citychoir.org.uk/&#34;&gt;http://www.citychoir.org.uk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://leica-explorer.com/&#34;&gt;http://leica-explorer.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;diminuindo-ou-trocando-imagens&#34;&gt;Diminuindo ou trocando imagens&lt;/h4&gt;

&lt;p&gt;Não se preocupe se seu website trabalha utilizando grandes imagens, você trocar ou diminuir as imagens para que caibam em telas menores. Veja os exemplos abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ciscolondon2012.com/&#34;&gt;http://www.ciscolondon2012.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cujo.jp/&#34;&gt;http://www.cujo.jp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spartanrobotics.org/&#34;&gt;http://spartanrobotics.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://1pictureaday.com/&#34;&gt;http://1pictureaday.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;media-queries-8211-a-collection-of-sites-using-media-queries&#34;&gt;Media Queries &amp;#8211; A Collection of sites using media queries&lt;/h4&gt;

&lt;p&gt;Todos os exemplos de website que mostrei acima, retirei &lt;a href=&#34;http://mediaqueri.es/&#34;&gt;deste website&lt;/a&gt;. A ideia é genial!&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://mediaqueri.es/&#34;&gt;http://mediaqueri.es/&lt;/a&gt; tem uma coleção impressionante de websites que utilizam de forma responsável as Media Queries. Veja os exemplos e entenda como você pode fazer um website adaptável para diversos cenários de uso.&lt;/p&gt;

&lt;h3 id=&#34;cada-meio-de-acesso-tem-sua-característica&#34;&gt;Cada meio de acesso tem sua característica&lt;/h3&gt;

&lt;p&gt;Conversamos bastante sobre o problema das resoluções e larguras de tela. Mas no começo deste post eu disse que o Responsive Web Design pode ir muito além das telas e Media Queries. Há usuários podem visitar seu site e não utilizar uma tela, tablet ou smartphone. Em vez de ler as informações ele pode ouvi-las, como é o caso dos usuários de leitores de tela.&lt;/p&gt;

&lt;h4 id=&#34;css-aural&#34;&gt;CSS Aural&lt;/h4&gt;

&lt;p&gt;Quero que você abra sua mente e entenda que mesmo você não tenho deficiencia visual, você pode ser um grande candidato a utilizar leitores de tela. Enganam-se aqueles que acham que programas que leem a tela só podem ser usados por pessoas com problemas de visão. E se você estiver dirigindo ou em qualquer outra situação em que não pode ficar o tempo inteiro com o celular na mão, mas mesmo assim quer ler um determinado artigo, site etc, como você faz? Nunca pensou em ouvir o artigo? Pois é.&lt;/p&gt;

&lt;p&gt;Eu sei que os sistemas de leitura de tela hoje em dia precisam de uma repaginada total. Mas empresas como Apple e Microsoft já estão fazendo isso para que seus sistemas mobiles e para desktops tenham a habilidade de ler bem as telas dos dispositivos. Isso é impressionante.&lt;/p&gt;

&lt;p&gt;Se a informação vai ser consumida dessa forma ela precisa ser formatada também. Isso mesmo, formataremos o áudio! Como? Com &lt;a href=&#34;http://bit.ly/o25mf6&#34;&gt;CSS Aural&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O CSS Aural praticamente controla como o audio do leitor de tela irá se comportar. Você pode controlar volume, tipo da voz, qual caixa a voz sairá etc.&lt;/p&gt;

&lt;p&gt;Imagine que você tenha um artigo sobre uma entrevista, onde há o entrevistador e o entrevistado. Você pode: especificar que a voz do entrevistador sairá na caixa da esquerda e a do entrevistado na caixa de som da direita. Que a voz do entrevistador será masculina e que voz do entrevistador será feminina.&lt;/p&gt;

&lt;p&gt;Sensacional, não é?&lt;/p&gt;

&lt;h4 id=&#34;especificação-touchscreen&#34;&gt;Especificação Touchscreen&lt;/h4&gt;

&lt;p&gt;Já falei sobre a &lt;a href=&#34;http://bit.ly/mGTiUF&#34;&gt;Específicação Touchscreen&lt;/a&gt;, abaixo segue um resumo, mas sugiro que você leia o artigo completo.&lt;/p&gt;

&lt;p&gt;Estamos acostumados com a experiência de interação com a ajuda do mouse. Isso foi desde os primórdios e provavelmente ainda será por bastante tempo. Nós desenhamos interfaces para ações baseadas no mouse ou qualquer aparelho que controle a setinha da sua tela. Criar interfaces touch é algo relativamente novo. Nós trouxemos ideias da interação com mouse para os dispositivos touch, mas grande parte das interações precisaram ser reinventadas porque o modo, o ato, a forma de interagir com a informação é diferente. Na interface touch você não “coloca o mouse” em cima do elemento. Você não utiliza teclas de atalho para executar ações. Normalmente as ações importantes estão expostas na interface, facilitando o acesso rápido. Isso é muito importante porque nos ensina criar interfaces mais intuitivas, com a curva de aprendizado menor.&lt;/p&gt;

&lt;p&gt;Há também o outro lado da moeda, onde detalhes das interfaces touch não podem ser portadas para interfaces baseadas em mouse. Lembre agora na forma de como você gira uma imagem em um dispositivo touch e como você gira essa mesma imagem utilizando um mouse. A interface muda, o seu comportamento muda.&lt;/p&gt;

&lt;p&gt;Sabendo dessas limitações você deve entender que não podemos simplesmente portar o visual de um determinado site para um dispositivo touch. Você pode dizer que “hoje fazemos isso e até agora está funcionando muito bem”. Mas pense melhor… a grande maioria dos sites que você visita hoje no iPad ou qualquer outro tablet, por exemplo, são sites onde a sua interação é limitada. O que você faz em um site hoje em dia? Clica nos links e lê. Salvo às vezes quando você visita um site mais “animadinho” com mais ações para entreter o usuário. Mas e se você faz um site onde é preciso rotacionar uma imagem ou fazer um ZOOM? Você precisará manter as mesmas ações nos dois cenários. E como antigamente, para manter o cenário das interfaces touch você precisa da ajuda de muito script.&lt;/p&gt;

&lt;h3 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h3&gt;

&lt;p&gt;Responsive Web Design é um assunto muito extenso mas muito interessante. Nos faz pensar no futuro de forma diferente. Até 5 anos atrás não tínhamos preocupações com outro dispositivo a não ser um ou outro smartphone e os desktops. Hoje temos diversos aparelhos, com diversas limitações de tela, tamanhos, comportamentos&amp;#8230; E isso não vai parar por aí. Todos os dias aparecerão mais e mais aparelhos e dispositivos que ajudarão os usuários a terem acesso a qualquer informação. É importante que nós possibilitemos que essas informações sejam entregues da melhor maneira possível.&lt;/p&gt;

&lt;p&gt;Algumas referências que você pode querer dar uma olhada:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.alistapart.com/articles/responsive-web-design/&#34;&gt;Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://coding.smashingmagazine.com/2011/01/12/guidelines-for-responsive-web-design/&#34;&gt;Guidelines for Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://designreviver.com/articles/designing-for-a-responsive-web-with-heuristic-methods/&#34;&gt;Designing for a Responsive Web with Heuristic Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://5by5.tv/bigwebshow/9&#34;&gt;The Big Web Show sobre Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RGB e HSL</title>
      <link>https://tableless.github.io/hugo-public/rgb-e-hsl/</link>
      <pubDate>Mon, 27 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/rgb-e-hsl/</guid>
      <description>

&lt;p&gt;A manipulação de cores no HTML nunca foi muito flexível. No começo escolhíamos as cores escrevendo seus nomes por extenso. Os nomes eram padrões eram: black, blue, yellow, green, olive, maroon, fuchsia, red, white, silver, navy, teal, purple, lime, gray, aqua. Na década de 80 houve um acréscimo de 131 novas cores com nomes estranhos chamada &lt;a href=&#34;http://en.wikipedia.org/wiki/X11_color_names&#34;&gt;X11&lt;/a&gt;. Estes nomes foram adotados pelos primeiros browsers tem sido suportados até hoje. Há nomes como mintcream, moccasin, navajowhite, powderblue, springgreen entre outros&amp;#8230; O W3C ainda mantém uma &lt;a href=&#34;http://www.w3.org/TR/SVG/types.html#ColorKeywords&#34;&gt;lista completa com os nomes destas cores aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Além de ser muito difícil de manter uma coleção de cores com seus nomes esquisitos, é quase impossível você criar um website tentando se adequar a quantidade limitada de cores disponíveis. Já tínhamos problemas sufientes com a quantidade limitada de fonts que poderíamos utilizar. Isso não poderia acontecer com as cores também. Com esse problemas vários padrões matemáticos foram estabelecidos para que criássemos as cores que gostaríamos de utilizar. Vou falar de dois padrões aqui: RGB e HSL. Vou ligá-los ao desenvolvimento web e não de uma forma geral. Caso contrário o artigo seria mais longo e envolveríamos outros assuntos mais extensos.&lt;/p&gt;

&lt;p&gt;Você já deve ter lido algo sobre utilizar para web cores no formato RGB. Esse formato está ficando mais popular com o CSS3 por que agora podemos controlar o canal alpha, tendo uma &lt;a href=&#34;http://tableless.com.br/css3-breve-introducao-a-rgba&#34;&gt;combinação nova chamada RGBA&lt;/a&gt;. Há também outro formato que ganhou alguma atenção do workgroup no W3C que é o formato de cor chamado HSL. Como o RGB, o HSL também ganhou um canal de opacidade, ficando HSLA. Muitos desenvolvedores ainda tem dúvidas sobre as diferenças entre RGBA e HSLA e qual utilizar.&lt;/p&gt;

&lt;p&gt;Tudo é muito simples de entender. RGB e HSL são dois formatos de composição de cores digitais. Você pode escolher qual dos dois utilizar, vai do seu gosto. Contudo como até hoje utilizamos o HEXADECIMAL como padrão de cores para web, minha sugestão é esperar para ver qual das duas específicações cairá no gosto do mercado para escolher um dos formatos para utilizá-la mais frenquentemente nos projetos. Entretanto os dois formatos tem flexibilidades diferentes e por isso pode ser muito difícil apenas uma delas se tornar mais popular que outra.&lt;/p&gt;

&lt;p&gt;Abaixo vou introduzir brevemente as diferenças entre o formato HSL e RGB para que você entenda quais suas características.&lt;/p&gt;

&lt;h3 id=&#34;o-rgb&#34;&gt;O RGB&lt;/h3&gt;

&lt;p&gt;O processo é simples: como na vida real onde você mistura cores para obter uma outra cor como resultado, você faz a mesma coisa com o RGB: você mistura as cores para obter uma outra cor como resultado. Para tanto você utilizará a soma de 3 valores: Red, Green e Blue: rgba(red, green, blue);&lt;/p&gt;

&lt;p&gt;Veja a sintaxe abaixo para entender melhor a aplicação:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;p {&lt;/p&gt;

&lt;p&gt;color: rgb(100%, 100%, 0%);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Os três valores são ligados às três principais respectivamente vermelha, verde e azul. No caso acima inseri 100% de cor para Vermelho e Verde. Como bom aluno de educação artística, você deve saber que misturando vermelho e verde a cor resultante será amarelo.&lt;/p&gt;

&lt;p&gt;Você pode ser mais específico controlando até mesmo a fração da porcentagem, por exemplo:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;p {&lt;/p&gt;

&lt;p&gt;color: rgb(55.2%, 100%, 0%);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Assim você consegue exatamente a cor que precisa. Esse formato de porcentagem e controle de fração também é aplicado ao HSL.&lt;/p&gt;

&lt;p&gt;O RGB pode ser configurado utilizando valores hexadecimais. A conta não é simples e você precisa ser um pouco nerd para entender. A explicação é meio longa. Sugiro que &lt;a href=&#34;http://en.wikipedia.org/wiki/RGB_color_model&#34;&gt;você leia no Wikipedia&lt;/a&gt; algo mais detalista.&lt;/p&gt;

&lt;h3 id=&#34;o-hsl&#34;&gt;O HSL&lt;/h3&gt;

&lt;p&gt;O HSL funciona um pouco diferente. A sintaxe é como abaixo:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;p {&lt;/p&gt;

&lt;p&gt;color: hsl(0, 100%, 30%);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;A escolha de cores no HSL não é baseado na mistura mas sim em um esquema baseado em um cilindro. O primeiro número de valor na sintaxe é onde escolhemos a cor. Começamos no topo com vermelho, onde o valor é 0, e damos uma volta de 360 graus, retornando novamente no topo, na cor vermelha. Conforme aumentamos o valor vamos selecionando as cores. Por exemplo, se selecionarmos um valor por volta de 120 obtemos um verde.&lt;/p&gt;

&lt;p&gt;Veja a imagem abaixo para entender melhor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/06/HSL_color_solid_cylinder_alpha_lowgamma.jpg&#34; alt=&#34;&#34; title=&#34;HSL_color_solid_cylinder_alpha_lowgamma&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Embora possamos escolher qualquer cor misturando as cores com o RGB, é muito mais instintivo escolhermos uma cor específica e modificarmos sua luminosidade. Escolhemos o azul e modificamos sua luminosidade para obtermos o tom que você deseja.&lt;/p&gt;

&lt;p&gt;Para escolhermos a luminosidade e a saturação da cor modificamos os dois outros valores, o segundo valor é a luminosidade e o terceiro valor é a saturação ou a quantidade de cinza que você colocará na cor. Modificar a saturação é como se você mudasse a quantidade de cor. Quanto menos cor, mais cinza. Se você quiser uma cor mais suja, mais apagada, você diminui este valor. Caso contrário você a mantém como 100% e utiliza a quantidade integral da cor. Normalmente esse será o padrão.&lt;/p&gt;

&lt;h3 id=&#34;e-o-hexadecimal&#34;&gt;E o hexadecimal?&lt;/h3&gt;

&lt;p&gt;O hexadecimal, queridinho dos nossos corações, sempre estará ao nosso lado. A sintaxe é muito mais curta que as outras duas específicações. Não temos todas as vantagens que as outras especificações nos dão, começando pelo canal alpha. Com a grande maioria dos programas visuais dando suporte ao formato hexadecimal ele ainda perdurará durante muito tempo ainda em nossas vidas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Especificação para touch screens</title>
      <link>https://tableless.github.io/hugo-public/especificacao-para-touch-screens/</link>
      <pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/especificacao-para-touch-screens/</guid>
      <description>&lt;p&gt;Até alguns anos atrás nós acessávamos a internet apenas utilizando computadores e celulares. Hoje existem aparelhos de diversos tipos. Temos até dispositivos como o &lt;a href=&#34;http://www.microsoft.com/surface/&#34;&gt;Surface&lt;/a&gt;, ainda que seu uso seja mais restrito e específico. Mas não demora muito que outros dispositivos surjam e preencham alguma lacuna escondida. O importante é entender que cada aparelho tem sua forma de interação.&lt;/p&gt;

&lt;p&gt;Hoje, as interfaces touch estão maduras e estáveis, que chegam a inspirar as interfaces dos sistemas desktops. Vide o que aconteceu com o OS X Lion e com o Windows 8. As principais ideias foram retiradas de suas respectivas interfaces mobiles: o Windows do Windows Phone e o Lion do OS X para iPad.&lt;/p&gt;

&lt;p&gt;As interfaces mobiles e as interfaces desktop ficarão mais homogêneas com o passar do tempo, se assemelhando cada vez mais, contudo, as interações são totalmente diferentes. As interfaces criadas para cada dispositivo nos ajudam a distinguir os ambientes e também a forma com que o usuário interage.&lt;/p&gt;

&lt;p&gt;Estamos acostumados com a experiência de interação com a ajuda do mouse. Isso foi desde os primórdios e provavelmente ainda será por bastante tempo. Nós desenhamos interfaces para ações baseadas no mouse ou qualquer aparelho que controle a setinha da sua tela. Criar interfaces touch é algo relativamente novo. Nós trouxemos ideias da interação com mouse para os dispositivos touch, mas grande parte das interações precisaram ser reinventadas porque o modo, o ato, a forma de interagir com a informação é diferente. Na interface touch você não &amp;#8220;coloca o mouse&amp;#8221; em cima do elemento. Você não utiliza teclas de atalho para executar ações. Normalmente as ações importantes estão expostas na interface, facilitando o acesso rápido. Isso é muito importante porque nos ensina criar interfaces mais intuitivas, com a curva de aprendizado menor.&lt;/p&gt;

&lt;p&gt;Há também o outro lado da moeda, onde detalhes das interfaces touch não podem ser portadas para interfaces baseadas em mouse. Lembre agora na forma de como você gira uma imagem em um dispositivo touch e como você gira essa mesma imagem utilizando um mouse. A interface muda, o seu comportamento muda.&lt;/p&gt;

&lt;p&gt;Sabendo dessas limitações você deve entender que não podemos simplesmente portar o visual de um determinado site para um dispositivo touch. Você pode dizer que &amp;#8220;hoje fazemos isso e até agora está funcionando muito bem&amp;#8221;. Mas pense melhor&amp;#8230; a grande maioria dos sites que você visita hoje no iPad ou qualquer outro tablet, por exemplo, são sites onde a sua interação é limitada. O que você faz em um site hoje em dia? Clica nos links e lê. Salvo às vezes quando você visita um site mais &amp;#8220;animadinho&amp;#8221; com mais ações para entreter o usuário. Mas e se você faz um site onde é preciso rotacionar uma imagem ou fazer um ZOOM? Você precisará manter as mesmas ações nos dois cenários. E como antigamente, para manter o cenário das interfaces touch você precisa da ajuda de muito script.&lt;/p&gt;

&lt;p&gt;Ambas as versões tem suas limitações e um legado de compatibilidade com seu sistema base que precisam manter.&lt;/p&gt;

&lt;p&gt;A ideia de criar uma especificação destinada para as interfaces touch é que tenhamos controle sobre as ações do usuário, da mesma forma que temos nos desktops. Para isso eles estão &lt;a href=&#34;http://bit.ly/mMP5jy&#34;&gt;mapeando uma série de eventos que específicos das interfaces touch&lt;/a&gt;. Assim podemos definir ações baseadas nessas interfaces. Estão participando da escrita desta especificação Doug Schepers do W3C, Sangwhan Moon da Opera Software ASA e Matt Brubeck da Mozilla.&lt;/p&gt;

&lt;p&gt;Se você parar para ler a específicação, vai entender que poderemos controlar quando o usuário interage encostando o dedo na tela, movendo o dedo e também ao retirá-lo. Você poderá controlar a área de toque. Se o elemento for pequeno, por exemplo, você poderá aumentar essa área de toque para que o usuário não tenha dificuldades. Poderá acionar eventos no momento que o usuário rotacionar os elementos. Se você está fazendo um WebApp poderá acionar um menu contextual personalizado quando o usuário fizer um &amp;#8220;tap&amp;#8221; com dois dedos. O usuário vira basicamente um proctologista. 😉&lt;/p&gt;

&lt;p&gt;A especificação ainda é um rascunho mas já está mostrando que as possibilidades são imensas. Eu vivo me perguntando até onde irá o HTML, CSS e Javascript com essas novas mudanças. Será que vão continuar fáceis como são hoje ou tudo vai ficar complicado? Será que serão eles que farão todo o trabalho ou novas linguagens serão criadas para lidar com essas novidades? Who knows? Eu tenho um palpite, mas é assunto para outra hora.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>