<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Indentação on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/indenta%C3%A7%C3%A3o/index.xml</link>
    <description>Recent content in Indentação on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/indenta%C3%A7%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Entendendo a indentação no Javascript</title>
      <link>https://tableless.github.io/hugo-public/entendendo-indentacao-no-javascript/</link>
      <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/entendendo-indentacao-no-javascript/</guid>
      <description>

&lt;p&gt;Código sem indentação não é legal de se ler, mas tem uma coisa um pouco pior que isso, ou tão ruim quanto, que é a falta de um padrão na indentação do projeto. Por exemplo, eu uso tab pois consigo ajustar meu editor para que ele exiba a quantidade que eu julgue necessária de espaços, mas pode ser que alguém da minha equipe use os próprios espaços, eai já imagina a beleza que vai ficar o código né? É &lt;strong&gt;MUITO&lt;/strong&gt; importante &lt;strong&gt;padronizar&lt;/strong&gt; o uso da indentação para não ter problemas futuros.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Para quem usa espaços, o padrão de validação do&lt;/em&gt; &lt;strong&gt;&lt;em&gt;JSLint&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;por exemplo é de 4 (apesar de ser customizável a sua escolha), e é este que vamos usar neste artigo.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;o-que-deve-ser-indentado&#34;&gt;O que deve ser indentado?&lt;/h4&gt;

&lt;p&gt;Mas o que será que eu indento? O que precisa ser indentado? Simples, qualquer coisa dentro de chaves. &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Funções, loops, ifs, switches e propriedades de objetos&lt;/strong&gt;, vou mostrar a baixo exemplos de indentação:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function algumaFuncao(a, b) {
    var c = 1,
        d = 2,
        inner;
    if (a &amp;gt; b) {
        inner = function() {
        return {
            r: c - d
        };
    };
    } else {
        inner = function () {
            return {
                r: c + d
            };
        };
    }
    return inner;
}
&lt;/pre&gt;

&lt;p&gt;Caso você tenha apenas uma instrução em um &lt;strong&gt;if&lt;/strong&gt; ou &lt;strong&gt;for&lt;/strong&gt;, as chaves não são obrigatórias, porem, mesmo que sejam opcionais é importante &lt;strong&gt;sempre usa-las&lt;/strong&gt;. Isto faz com que seu código seja mais fácil de dar manutenção pois outras pessoas vão entende-lo melhor.&lt;/p&gt;

&lt;p&gt;Exemplo, imagina que você tenha um &lt;strong&gt;loop for&lt;/strong&gt; com uma instrução. Você pode optar por não por as chaves e mesmo assim não haveriam erros de sintaxe:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;for (var i = 0; i &amp;lt; 10; i += 1)
    alert(i);
&lt;/pre&gt;

&lt;p&gt;E se caso mais tarde você decidir adicionar outra linha no loop?&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;for (var i = 0; i &amp;lt; 10; i += 1)
    alert(i);
    alert(i + &amp;#039; is &amp;#039; +(i % 2 ? &amp;#039;odd&amp;#039; : &amp;#039;even&amp;#039;));
&lt;/pre&gt;

&lt;p&gt;O segundo &lt;strong&gt;alert()&lt;/strong&gt; está fora do &lt;strong&gt;loop&lt;/strong&gt; neste caso, apesar da indentação estar tentando te enganar. Por isso temos que &lt;strong&gt;sempre usar as chaves&lt;/strong&gt;, pois evitamos ter problemas futuros, precisamos pensar a longo prazo aqui.&lt;/p&gt;

&lt;h4 id=&#34;chave-de-abertura&#34;&gt;Chave de abertura&lt;/h4&gt;

&lt;p&gt;Tendemos a ter preferência sobre onde colocar a chave de abertura no código, uns preferem por na &lt;strong&gt;mesma linha&lt;/strong&gt;, outros na &lt;strong&gt;linha seguinte&lt;/strong&gt;, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;if (true){
    alert(&#39;É true!&#39;)
}
&lt;/pre&gt;

&lt;p&gt;Ou:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;if (true)
{
    alert(&#39;É true!&#39;)
}
&lt;/pre&gt;

&lt;p&gt;Neste exemplo é uma questão de preferência porém, em alguns casos o programa pode se comportar diferentemente, dependendo de onde a chave está. Isto ocorre por causa do _mecanismo de inserção de ponto e vírgula — _o JS não alarma caso você queira não terminar suas linhas com ponto e vírgula, pois neste caso &lt;strong&gt;ele adiciona para você&lt;/strong&gt;. Isso pode causar problemas quando uma função retorna um objeto literal e a chave de abertura está na linha seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;function func() {
    return
    {
        nome: &#39;Julio&#39;
    };
}
&lt;/pre&gt;

&lt;p&gt;Se você queria que sua função retornasse o objeto “&lt;strong&gt;nome&lt;/strong&gt;”, você vai ter uma surpresa, experimente rodar no seu console do node e ver o resultado para melhor compreender. Por causa dos pontos e vírgulas a função retorna “&lt;strong&gt;undefined”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Concluindo:&lt;/p&gt;

&lt;p&gt;Sempre usar chaves, e sempre colocar a de abertura na mesma linha da instrução anterior:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function func() {
    return {
        nome: &#39;Julio&#39;
    };
}
&lt;/pre&gt;

&lt;p&gt;Espero que tenham curtido, e que eu possa ter contribuído com o conhecimento de quem acessa o Tableless, este é meu objetivo em geral, ajudar! Abraços, te espero no próximo post!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>