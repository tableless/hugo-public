<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Collections on Tableless</title>
    <link>http://tableless.com.br/tags/collections/index.xml</link>
    <description>Recent content in Collections on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/collections/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Collections ES6 – parte 1</title>
      <link>http://tableless.com.br/collections-es6-parte-1/</link>
      <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/collections-es6-parte-1/</guid>
      <description>

&lt;p&gt;Fala Amigos!&lt;/p&gt;

&lt;p&gt;Dando continuidade a nossa série sobre as novidades do Javascript, vamos falar hoje sobre collections.&lt;/p&gt;

&lt;h4 id=&#34;sets-e-maps&#34;&gt;Sets e Maps&lt;/h4&gt;

&lt;p&gt;Historicamente a única collection que vinha por padrão no Javascript era o &lt;em&gt;Array&lt;/em&gt;. Mas a partir do ES6 temos novos tipos como: &lt;em&gt;Set&lt;/em&gt;, &lt;em&gt;WeakSet&lt;/em&gt;, &lt;em&gt;Map&lt;/em&gt; e &lt;em&gt;WeakMap&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;set&#34;&gt;Set&lt;/h4&gt;

&lt;p&gt;Para quem tem conhecimento em linguagens de programação como C#, Java, Ruby e Python esta collection não é uma novidade, mas para quem tem conhecimento somente em Javascript, sim. Sendo assim, segue a definição:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Set&lt;/em&gt; é um tipo de collection que permite a inserção de qualquer tipo de valor (Ex: objeto, function, número, string, etc) e não permite valores duplicados. Outra particularidade é que utilizando &lt;em&gt;Set&lt;/em&gt; não é possível acessar um valor diretamente como é feito com &lt;em&gt;Array&lt;/em&gt;, normalmente você valida para ver se o valor está presente ou itera sobre os valores.&lt;/p&gt;

&lt;p&gt;Um exemplo de uso para &lt;em&gt;Sets&lt;/em&gt; é uma lista de pedidos onde cada pedido do usuário deve ser único e ocasionalmente é necessário verificar se aquele pedido já esta incluso.&lt;/p&gt;

&lt;p&gt;Simples!? Vamos ver na prática a utilização do &lt;em&gt;Set&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        //inicialização de um Set
        var set = new Set(); //cria um novo Set vazio
        var set2 = new Set([1, 2, 3]); //cria um novo Set a partir de um Array

        set.add(1); //adiciona um valor

        //número de valores no set
        set.size; // 1
        set2.size; // 3

        //verifica se o valor existe dentro do Set
        set.has(1); // true

        set.add(1); //adiciona um valor duplicado e nada acontece

        set.size; // 1

        set.delete(1); //remove um determinado valor do Set

        set.has(1); // false
        set.size; // 0

        //itera sobre os valores do Set
        for (let valor of set2) {
          console.log(valor);
        }

        //itera sobre os valores do Set
        set2.forEach(function(valor) {
          console.log(valor); 
        });

        //output das iterações: 
        // 1
        // 2
        // 3

        set2.clear(); //remove todos os valores do Set
        set2.size; // 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;weakset&#34;&gt;WeakSet&lt;/h4&gt;

&lt;p&gt;É um _Set_ de objetos que não previne que seus elementos/valores sejam coletados pelo garbage collector do Javascript. Além disso a sua api também é reduzida. Deste modo, não é permitido iterar sobre os valores do &lt;em&gt;Set&lt;/em&gt; e/ou limpar os mesmos usando o método &lt;em&gt;clear&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Na prática, ao utilizar um objeto como valor do seu &lt;em&gt;WeakSet&lt;/em&gt; e o mesmo não estiver sendo usado em mais nenhum lugar na sua aplicação, o garbage collector poderá limpar a sua referência e com isso magicamente o valor deixaria de existir.&lt;/p&gt;

&lt;p&gt;A api do &lt;em&gt;WeakSet&lt;/em&gt; é composta de apenas 3 métodos quais funcionam da mesma forma que o &lt;em&gt;Set&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add(valor)&lt;/li&gt;
&lt;li&gt;has(valor)&lt;/li&gt;
&lt;li&gt;delete(valor)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No próximo post falaremos de &lt;em&gt;Map&lt;/em&gt; e &lt;em&gt;WeakMap.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>