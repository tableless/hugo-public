<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Novidades on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/novidades/index.xml</link>
    <description>Recent content in Novidades on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/novidades/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>10 novidades do PHP 7</title>
      <link>https://tableless.github.io/hugo-public/10-novidades-do-php-7/</link>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/10-novidades-do-php-7/</guid>
      <description>

&lt;p&gt;O PHP 7 está prestes a ser lançada oficialmente, até o final deste ano de 2015.&lt;/p&gt;

&lt;p&gt;A versão &lt;em&gt;Release Candidate&lt;/em&gt; (RC) do PHP 7 foi lançada no dia 21 de agosto. Sendo uma versão RC, não haverá implementações novas no PHP 7.0, apenas correções de bugs.&lt;/p&gt;

&lt;p&gt;Vou apresentar aqui algumas novidades e recursos novos desta versão do PHP.&lt;/p&gt;

&lt;h2 id=&#34;1-desempenho-fantástico&#34;&gt;1. Desempenho Fantástico&lt;/h2&gt;

&lt;p&gt;O PHP 7 teve seu motor remodelado. Com isso, houve um grande ganho de desempenho.&lt;/p&gt;

&lt;p&gt;Em alguns casos, é possível alcançar &lt;a href=&#34;http://rberaldo.com.br/php-7-9-vezes-mais-rapido-que-php-5-6/&#34; target=&#34;_blank&#34;&gt;até 9 vezes mais velocidade&lt;/a&gt;. Mas esse número pode variar conforme a plataforma e a aplicação utilizada nos testes.&lt;/p&gt;

&lt;p&gt;Eu utilizei o script para benchmark criado pela própria equipe do PHP, disponibilizado junto com o código-fonte da linguagem. Em comparação com a versão 5.6, consegui aproximadamente 9 vezes mais velocidade usando o PHP 7. Expliquei esse teste com mais detalhes &lt;a href=&#34;http://rberaldo.com.br/php-7-9-vezes-mais-rapido-que-php-5-6/&#34; target=&#34;_blank&#34;&gt;neste meu artigo&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;MySQL Removido&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Desde o PHP 5.5, &lt;a href=&#34;http://PS: funções mysql_* estão obsoletas desde o PHP 5.5  e já foram removidas no PHP 7. Prefira usar MySQLi ou PDO. Veja mais aqui: http://www.ultimatephp.com.br/php-por-que-nao-utilizar-funcoes-mysql&#34; target=&#34;_blank&#34;&gt;as funções mysql_* eram consideradas obsoletas&lt;/a&gt;. Ou seja, tudo indicava que elas seriam removidas em um futuro bem próximo.&lt;/p&gt;

&lt;p&gt;Pois bem. A hora chegou.&lt;/p&gt;

&lt;p&gt;No PHP 7, as funções mysql_* (como mysql_connect(), mysql_query() e outras) deixaram de existir. Agora é preciso utilizar MySQLi ou PDO.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ultimatephp.com.br/como-usar-pdo-com-banco-de-dados-mysql/&#34; target=&#34;_blank&#34;&gt;Recomendo utilizar PDO&lt;/a&gt;, por ser mais robusta e ser independente de SGBD.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Funções ereg_* Removidas&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Além das funções mysql_*, as funções ereg_* e eregi_* (como ereg(), ereg_replace, eregi() e outras) eram consideradas obsoletas desde o PHP 5.3.&lt;/p&gt;

&lt;p&gt;Elas também foram removidas no PHP 7.&lt;/p&gt;

&lt;p&gt;Agora é preciso usar as funções preg_*, da &lt;a href=&#34;http://php.net/manual/pt_BR/book.pcre.php&#34; target=&#34;_blank&#34;&gt;biblioteca PCRE&lt;/a&gt;, como preg_match e preg_replace.&lt;/p&gt;

&lt;p&gt;As funções preg_* exigem delimitadores. Consequentemente, é possível utilizar &lt;a href=&#34;http://php.net/manual/pt_BR/reference.pcre.pattern.modifiers.php&#34; target=&#34;_blank&#34;&gt;modificadores&lt;/a&gt;, como &amp;#8220;i&amp;#8221; e &amp;#8220;u&amp;#8221;. O &amp;#8220;i&amp;#8221;, por exemplo, significa case-insensitive. Ou seja, se você usava eregi_*, passará a usar preg_*, sempre com o modificador &amp;#8220;i&amp;#8221;.&lt;/p&gt;

&lt;h2 id=&#34;3-erros-fatais-e-exceções&#34;&gt;3. Erros Fatais e Exceções&lt;/h2&gt;

&lt;p&gt;No PHP 7, erros fatais passaram a ser Exceções. Isso quer dizer que eles podem ser tratados em bloco try/catch, sem interromper a execução do script.&lt;/p&gt;

&lt;p&gt;Para exemplificar, vamos executar este código (no PHP 7, não no PHP 5):&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;ereg(&#39;^[a-z]$&#39;, &#39;php7&#39;);
echo &#34;FIM&#34;;
&lt;/pre&gt;

&lt;p&gt;Veremos este erro:&lt;/p&gt;

&lt;pre&gt;Fatal error: Uncaught Error: Call to undefined function ereg()...
&lt;/pre&gt;

&lt;p&gt;E o texto &amp;#8220;FIM&amp;#8221; não será exibido. Isso ocorre pois a exceção interrompe o script.&lt;/p&gt;

&lt;p&gt;Agora execute este script:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;try
{
    ereg(&#39;^[a-z]$&#39;, &#39;php7&#39;);
}
catch (Error $e)
{
    echo &#34;Ocorreu um erro: &#34; . $e-&amp;gt;getMessage();
}

echo &#34;FIM&#34;;
&lt;/pre&gt;

&lt;p&gt;Você verá a seguinte saída:&lt;/p&gt;

&lt;pre&gt;Ocorreu um erro: Call to undefined function ereg()
FIM
&lt;/pre&gt;

&lt;p&gt;Ou seja, nossa aplicação tratou a exceção e a execução continuou normalmente.&lt;/p&gt;

&lt;h2 id=&#34;4-construtores-do-php-4-obsoletos&#34;&gt;4. Construtores do PHP 4 Obsoletos&lt;/h2&gt;

&lt;p&gt;Antes do PHP 5, os construtores recebiam o mesmo nome da classe. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class ClassePHP4
{
    function ClassePHP4()
    {
        echo &#34;Construtor chamado&#34;;
    }
}
&lt;/pre&gt;

&lt;p&gt;Isso continuou funcionando no PHP 5, mas era recomendado usar o método &lt;code&gt;__construct&lt;/code&gt;, ficando desta forma:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class ClassePHP5
{
    public function __construct()
    {
        echo &#34;Construtor chamado&#34;;
    }
}
&lt;/pre&gt;

&lt;p&gt;O PHP 7 recomenda que seja usado método &lt;code&gt;__construct&lt;/code&gt; em vez do método com o mesmo nome da classe. Ou seja, o uso de construtores no padrão do PHP 4 continuará sendo possível, mas é um recurso obsoleto (&lt;em&gt;Deprecated&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Para testar isso, vamos executar este código:&lt;/p&gt;

&lt;h2 id=&#34;5-indução-de-tipos-scalar-types&#34;&gt;5. Indução de Tipos: &lt;em&gt;Scalar Types&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;PHP é uma linguagem &lt;strong&gt;NÃO&lt;/strong&gt; tipada.&lt;/p&gt;

&lt;p&gt;Aos poucos ela vem ganhando alguns recursos que a torna fracamente tipada.&lt;/p&gt;

&lt;p&gt;Isso significa que podemos criar códigos mais consistentes e menos suscetíveis a erros e problemas.&lt;/p&gt;

&lt;p&gt;O PHP 5 já possui o recurso de &lt;a href=&#34;http://php.net/manual/pt_BR/language.oop5.typehinting.php&#34; target=&#34;_blank&#34;&gt;Indução de Tipos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É possível definir alguns tipos para parâmetros de métodos e funções. Mas só é possível definir dois tipos: arrays (o tipo &amp;#8220;array&amp;#8221;) e objetos (com o nome da classe).&lt;/p&gt;

&lt;p&gt;A partir do PHP 7, poderemos usar outros tipos também: int, float, string e bool.&lt;/p&gt;

&lt;p&gt;Esses tipos podem ser definidos nos parâmetros de funções e métodos, como já era feito no PHP 5. Mas agora há uma novidade: também poderemos definir o tipo do retorno.&lt;/p&gt;

&lt;h2 id=&#34;6-tipo-de-retorno-de-funções-e-métodos&#34;&gt;6. Tipo de Retorno de Funções e Métodos&lt;/h2&gt;

&lt;p&gt;Seguindo a mesma ideia da Indução de Tipos que vimos anteriormente, o PHP 7 vai permitir definir o tipo de retorno de uma função ou método.&lt;/p&gt;

&lt;p&gt;Basta seguir esta sintaxe:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function nomeFuncao() : tipo
{
    // corpo da função
}
&lt;/pre&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function soma($x, $y) : float
{
    return $x + $y + 1.5;
}
&lt;/pre&gt;

&lt;p&gt;E, claro, pode usar todos os tipos suportados: int, float, string, bool, array e objeto.&lt;/p&gt;

&lt;h2 id=&#34;7-novo-operador-spaceship&#34;&gt;7. Novo Operador &lt;em&gt;Spaceship&lt;/em&gt; (&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;Esse operador recebe o nome de &amp;#8220;&lt;em&gt;Spaceship&lt;/em&gt;&amp;#8221; em algumas outras linguagens, e é usado para comparação numérica.&lt;/p&gt;

&lt;p&gt;Se você já usou a função &lt;code&gt;strcmp()&lt;/code&gt;, com certeza vai entender esse operador sem dificuldades.&lt;/p&gt;

&lt;p&gt;Mesmo se não usou, é simples de entender.&lt;/p&gt;

&lt;p&gt;Veja estes exemplos:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;var_dump(2 &amp;lt;=&amp;gt; 3); // retorna -1
var_dump(2 &amp;lt;=&amp;gt; 2); // retorna 0
var_dump(2 &amp;lt;=&amp;gt; 1); // retorna 1
&lt;/pre&gt;

&lt;p&gt;Ou seja, o operador &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; retorna um destes 3 valores:&lt;/p&gt;

&lt;p&gt;&amp;#8211; retorna -1 quando o primeiro operando é menor que o segundo&lt;/p&gt;

&lt;p&gt;&amp;#8211; retorna 0 quando os dois operandos são iguais&lt;/p&gt;

&lt;p&gt;&amp;#8211; retorna 1 quando o segundo operando é maior que o primeiro&lt;/p&gt;

&lt;h2 id=&#34;9-null-coalesce-operator-operador&#34;&gt;9. &lt;em&gt;Null Coalesce Operator&lt;/em&gt; (operador &lt;code&gt;??&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;O nome parece complicado, mas ele faz algo bem simples.&lt;/p&gt;

&lt;p&gt;Ele é útil para verificar a existência de variáveis, como fazemos com valores de &lt;code&gt;$_GET&lt;/code&gt; ou &lt;code&gt;$_POST&lt;/code&gt;, usando &lt;code&gt;isset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ele faz com que esta linha:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$email = $_POST[&#39;email&#39;] ?? &#39;valor padrão&#39;;
&lt;/pre&gt;

&lt;p&gt;&amp;#8230; seja transformada nesta:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$email = isset($_POST[&#39;email&#39;]) ? $_POST[&#39;email&#39;] : &#39;valor padrão&#39;;
&lt;/pre&gt;

&lt;p&gt;Super simples!&lt;/p&gt;

&lt;h2 id=&#34;10-classes-anônimas&#34;&gt;10. Classes Anônimas&lt;/h2&gt;

&lt;p&gt;O PHP, a partir da versão 5.4, permite a criação de &lt;a href=&#34;http://php.net/manual/pt_BR/functions.anonymous.php&#34; target=&#34;_blank&#34;&gt;Funções Anônimas&lt;/a&gt;. Elas são úteis especialmente para criação de &lt;em&gt;callbacks&lt;/em&gt; ou para usar em parâmetros de funções, como &lt;code&gt;array_map()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A partir do PHP 7, podemos criar Classes Anônimas também.&lt;/p&gt;

&lt;p&gt;Podemos, por exemplo, fazer uma função retornar uma classe, definida ns própria expressão &lt;code&gt;return&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;function createObject()
{
    return new class{
        public function test()
        {
            echo &#34;test&#34; . PHP_EOL;
        }
    };
}

$obj = createObject();
$obj-&amp;gt;test();
&lt;/pre&gt;

&lt;p&gt;Há outros casos de uso, como em testes de software.&lt;/p&gt;

&lt;p&gt;Você pode ver a proposta e alguns casos de uso no &lt;a href=&#34;https://wiki.php.net/rfc/anonymous_classes&#34; target=&#34;_blank&#34;&gt;RFC que descreve esse recurso&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O PHP 7 traz diversas novidades. E, se você seguia as Boas Práticas e padrões que o PHP recomendava, a partir da versão 5.5, provavelmente terá pouquíssimos problemas (ou nenhum) para migrar para o PHP 7.&lt;/p&gt;

&lt;p&gt;Se quiser conhecer melhor essas novidades e algumas outras, criei um &lt;a href=&#34;http://cursophp7.ultimatephp.com.br&#34; target=&#34;_blank&#34;&gt;curso gratuito&lt;/a&gt;, onde mostro com mais detalhes cada um desses novos recursos. Também mostro como instalar o PHP 7, sem afetar a sua instalação atual do PHP 5.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://cursophp7.ultimatephp.com.br&#34; target=&#34;_blank&#34;&gt;Clique aqui e se inscreva no meu curso gratuito do PHP 7&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bons estudos e fique de olho no PHP 7!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Collections ES6 – parte 1</title>
      <link>https://tableless.github.io/hugo-public/collections-es6-parte-1/</link>
      <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/collections-es6-parte-1/</guid>
      <description>

&lt;p&gt;Fala Amigos!&lt;/p&gt;

&lt;p&gt;Dando continuidade a nossa série sobre as novidades do Javascript, vamos falar hoje sobre collections.&lt;/p&gt;

&lt;h4 id=&#34;sets-e-maps&#34;&gt;Sets e Maps&lt;/h4&gt;

&lt;p&gt;Historicamente a única collection que vinha por padrão no Javascript era o &lt;em&gt;Array&lt;/em&gt;. Mas a partir do ES6 temos novos tipos como: &lt;em&gt;Set&lt;/em&gt;, &lt;em&gt;WeakSet&lt;/em&gt;, &lt;em&gt;Map&lt;/em&gt; e &lt;em&gt;WeakMap&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;set&#34;&gt;Set&lt;/h4&gt;

&lt;p&gt;Para quem tem conhecimento em linguagens de programação como C#, Java, Ruby e Python esta collection não é uma novidade, mas para quem tem conhecimento somente em Javascript, sim. Sendo assim, segue a definição:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Set&lt;/em&gt; é um tipo de collection que permite a inserção de qualquer tipo de valor (Ex: objeto, function, número, string, etc) e não permite valores duplicados. Outra particularidade é que utilizando &lt;em&gt;Set&lt;/em&gt; não é possível acessar um valor diretamente como é feito com &lt;em&gt;Array&lt;/em&gt;, normalmente você valida para ver se o valor está presente ou itera sobre os valores.&lt;/p&gt;

&lt;p&gt;Um exemplo de uso para &lt;em&gt;Sets&lt;/em&gt; é uma lista de pedidos onde cada pedido do usuário deve ser único e ocasionalmente é necessário verificar se aquele pedido já esta incluso.&lt;/p&gt;

&lt;p&gt;Simples!? Vamos ver na prática a utilização do &lt;em&gt;Set&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        //inicialização de um Set
        var set = new Set(); //cria um novo Set vazio
        var set2 = new Set([1, 2, 3]); //cria um novo Set a partir de um Array

        set.add(1); //adiciona um valor

        //número de valores no set
        set.size; // 1
        set2.size; // 3

        //verifica se o valor existe dentro do Set
        set.has(1); // true

        set.add(1); //adiciona um valor duplicado e nada acontece

        set.size; // 1

        set.delete(1); //remove um determinado valor do Set

        set.has(1); // false
        set.size; // 0

        //itera sobre os valores do Set
        for (let valor of set2) {
          console.log(valor);
        }

        //itera sobre os valores do Set
        set2.forEach(function(valor) {
          console.log(valor); 
        });

        //output das iterações: 
        // 1
        // 2
        // 3

        set2.clear(); //remove todos os valores do Set
        set2.size; // 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;weakset&#34;&gt;WeakSet&lt;/h4&gt;

&lt;p&gt;É um _Set_ de objetos que não previne que seus elementos/valores sejam coletados pelo garbage collector do Javascript. Além disso a sua api também é reduzida. Deste modo, não é permitido iterar sobre os valores do &lt;em&gt;Set&lt;/em&gt; e/ou limpar os mesmos usando o método &lt;em&gt;clear&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Na prática, ao utilizar um objeto como valor do seu &lt;em&gt;WeakSet&lt;/em&gt; e o mesmo não estiver sendo usado em mais nenhum lugar na sua aplicação, o garbage collector poderá limpar a sua referência e com isso magicamente o valor deixaria de existir.&lt;/p&gt;

&lt;p&gt;A api do &lt;em&gt;WeakSet&lt;/em&gt; é composta de apenas 3 métodos quais funcionam da mesma forma que o &lt;em&gt;Set&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add(valor)&lt;/li&gt;
&lt;li&gt;has(valor)&lt;/li&gt;
&lt;li&gt;delete(valor)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No próximo post falaremos de &lt;em&gt;Map&lt;/em&gt; e &lt;em&gt;WeakMap.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iterators ES6</title>
      <link>https://tableless.github.io/hugo-public/iterators-es6/</link>
      <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iterators-es6/</guid>
      <description>

&lt;p&gt;A partir de hoje iniciaremos uma série de posts falando sobre as novidades da nova versão do Javascript, conhecida como ES6 (EcmaScript 6). Que esta recheada de novidades e contemplando features muito legais como você verá na série.&lt;/p&gt;

&lt;p&gt;Como post de abertura vou falar hoje sobre iterators.&lt;/p&gt;

&lt;h3 id=&#34;o-que-são&#34;&gt;O que são?&lt;/h3&gt;

&lt;p&gt;Iterator é um objeto com uma determinada interface. E essa interface consiste de um método chamado &lt;em&gt;next()&lt;/em&gt; que retorna um objeto como resultado.&lt;/p&gt;

&lt;p&gt;Esse objeto de resultado, tem duas propriedades &lt;em&gt;value&lt;/em&gt; referente ao valor corrente e &lt;em&gt;done&lt;/em&gt; que é um valor booleano qual é setado para &lt;em&gt;true&lt;/em&gt; quando não existem mais valores para serem retornados.&lt;/p&gt;

&lt;p&gt;O iterator mantém uma referência à posição correta do próximo valor dentro da coleção de valores. Deste modo, toda vez que o método &lt;em&gt;next()&lt;/em&gt; é chamado ele retorna o valor correto. Caso o método &lt;em&gt;next()&lt;/em&gt; for chamado após o último valor ser retornado o iterator irá retornar o objeto de resultado com os seguintes valores: &lt;em&gt;done&lt;/em&gt; = &lt;em&gt;true&lt;/em&gt; e &lt;em&gt;value&lt;/em&gt; = &lt;em&gt;undefined&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;show-me-the-code&#34;&gt;Show me the code!&lt;/h4&gt;

&lt;p&gt;Com esse entendimento vamos ver na prática a implementação de um iterator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var criarIterator = function(items){
        var i = 0;

        return {
            next: function(){

                var done = (i&amp;gt;= items.length);
                var value = !done ? items[i++] : undefined;

                return {
                    done: done,
                    value: value
                };
            }
        }
    };

    var iterator = criarIterator([1, 2, 3]);

    console.log(iterator.next());  // &amp;quot;{ value: 1, done: false}&amp;quot;
    console.log(iterator.next());  // &amp;quot;{ value: 2, done: false}&amp;quot;
    console.log(iterator.next());  // &amp;quot;{ value: 3, done: false}&amp;quot;
    console.log(iterator.next());  // &amp;quot;{ value: undefined, done: true}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simples, neh!?&lt;/p&gt;

&lt;p&gt;Imagino que se você tenha conhecimentos em Java ou C# já tenha se perguntado, será? E a resposta é sim! Iterator em Javascript funciona de uma maneira bem semelhante ao iterator dessas linguagens.&lt;/p&gt;

&lt;h4 id=&#34;legal-mas-e-onde-eu-uso-isso&#34;&gt;Legal! Mas e onde eu uso isso?&lt;/h4&gt;

&lt;p&gt;Iterator é uma peça fundamental na nova forma de manipular coleções de dados no ES6. Sendo assim, todos os tipos de coleções (&lt;em&gt;Arrays&lt;/em&gt;, &lt;em&gt;Sets&lt;/em&gt;, &lt;em&gt;Maps&lt;/em&gt; e até mesmo &lt;em&gt;Strings&lt;/em&gt;) já vem com essa interface implementada. Liberando novas formas de interação com esses objetos.&lt;/p&gt;

&lt;p&gt;Além disso um bom entendimento sobre iterators irá te dar uma base sólida e te ajudar muito no entendimento de outras features do ES6. Assim como &lt;em&gt;collections&lt;/em&gt;, &lt;em&gt;for of&lt;/em&gt; e &lt;em&gt;generators&lt;/em&gt; que serão assuntos dos próximos posts da série.&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>