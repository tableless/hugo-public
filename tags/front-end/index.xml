<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Front End on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/front-end/index.xml</link>
    <description>Recent content in Front End on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/front-end/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Analisando o código Stylus de um projeto</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-o-pre-processador-stylus/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-o-pre-processador-stylus/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-um-pré-processador-css&#34;&gt;&lt;strong&gt;O que é um pré-processador CSS?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Como o nome ja diz, é uma linguagem que precisa ser pré-processada por um &lt;em&gt;parser&lt;/em&gt; para assim gerar o arquivo de extensão &lt;strong&gt;.css&lt;/strong&gt; que será renderizado pelo browser. Atualmente há vários pré-processadores que você pode utilizar para facilitar a codificação e reaproveitamento de código, você pode estar utilizando SASS, LESS e Stylus que são os mais conhecidos no mercado. A diferença do &lt;a href=&#34;http://stylus-lang.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Stylus&lt;/a&gt; para os outros pré-processadores que estão sendo utilizados no mercado é que ele já é baseado em &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;NodeJS&lt;/a&gt; e não em ruby. Por conta disso não há necessidade de uma tecnologia intermediária em seu workflow para processá-lo.&lt;/p&gt;

&lt;h2 id=&#34;vamos-começar&#34;&gt;Vamos começar!&lt;/h2&gt;

&lt;p&gt;Tendo em mente que você ja conhece um pouco sobre pré-processadores e algumas de suas vantagens (variáveis, mixins, operadores, funções) vamos criar um projeto utilizando algumas dessas funcionalidades.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Faça o download do &lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;strong&gt;NodeJS&lt;/strong&gt;&lt;/a&gt; e efetue a instalação&lt;strong&gt;;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Considerando que tenha o node rodando em seu sistema, instale o &lt;strong&gt;Stylus &lt;/strong&gt;de forma global e execute o seguinte comando em seu terminal &lt;strong&gt;npm install -g stylus&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Vamos criar a estrutura de diretórios de nosso projeto:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/director.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Após ter seu diretório criado de acordo com a estrutura da imagem acima, você pode acessá-lo via terminal com o comando &lt;strong&gt;cd /seu-diretorio&lt;/strong&gt; e na sequência executar o compilador stylus da seguinte maneira:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stylus -w a&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;parâmetros&#34;&gt;&lt;strong&gt;Parâmetros&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;-w (Observar alterações nos arquivos .styl e re-compilar gerando os arquivos resultantes .css);&lt;/li&gt;
&lt;li&gt;-o (Após este parâmetro deve ser passado o caminho que deve ser salvo o arquivo compilado);&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;desmistificando-a-estrutura&#34;&gt;Desmistificando a Estrutura&lt;/h2&gt;

&lt;h3 id=&#34;assets&#34;&gt;ASSETS&lt;/h3&gt;

&lt;p&gt;Costumo sempre utilizar esta estrutura como raíz para os diretórios front-end principalmente pela facilidade em migrar para servidores independentes e também para evitar confusão entre o pessoal de back-end.&lt;/p&gt;

&lt;h3 id=&#34;assets-css&#34;&gt;&lt;strong&gt;ASSETS/css&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Arquivos gerados após executar o pré-processador, gerando assim os arquivos com extensão &lt;strong&gt;.css&lt;/strong&gt; prontos para utilização em seu código.&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus&#34;&gt;ASSETS/stylus&lt;/h3&gt;

&lt;p&gt;Neste diretório fica toda a nossa organização de diretórios e arquivos .styl (Extensão utilizada pelo &lt;strong&gt;Stylus&lt;/strong&gt;).&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-base-tipografia-reset-variáveis-cores&#34;&gt;ASSETS/stylus/base (Tipografia, reset, variáveis, cores)&lt;/h3&gt;

&lt;p&gt;O nome dos arquivos em si é bem descritivo, colors.styl para cores, variables.styl para variáveis reutilizáveis, typography.styl para definições de fonts e reset.styl (reset de elementos css).&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-components-pequenos-componentes&#34;&gt;ASSETS/stylus/components (Pequenos componentes)&lt;/h3&gt;

&lt;p&gt;Utilizado para pequenos componentes como botões, formulários, modals e o que surgir de necessidade conforme o desenvolvimento de seu projeto.&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-helpers-utilitários-para-seus-projetos&#34;&gt;ASSETS/stylus/helpers (Utilitários para seus projetos)&lt;/h3&gt;

&lt;p&gt;Neste diretório geralmente são encontrados os seguintes arquivos: functions.styl, helpers.styl (classes utilitárias ex.: .pull-left, .show), mixins.styl (são blocos de códigos reutilizáveis semelhantes a funções).&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-layout-definições-do-seu-layout&#34;&gt;ASSETS/stylus/layout (Definições do seu layout)&lt;/h3&gt;

&lt;p&gt;Você vai encontrar os arquivos com definições de estilo com a cara do seu layout, como header, footer e grid.&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-theme-temas-do-projeto&#34;&gt;ASSETS/stylus/theme (Temas do projeto)&lt;/h3&gt;

&lt;p&gt;Definições de temas do projeto. Caso o projeto tenha mais de um tema, é uma boa prática para manter a organização e facilidade de manutenção no código.&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-main-styl&#34;&gt;ASSETS/stylus/main.styl&lt;/h3&gt;

&lt;p&gt;Este é o arquivo primário que será lido pelo seu compilador, deve possuir todas as importações necessárias para gerar o arquivo .css resultante. Obs: Todos os arquivos all.styl servem para facilitar a importação no arquivo principal.&lt;/p&gt;

&lt;h2 id=&#34;botando-a-mão-na-massa&#34;&gt;Botando a mão na massa&lt;/h2&gt;

&lt;p&gt;Uma vez que você compreendeu a ideia dos diretórios criados e está com o compilador rodando corretamente, vamos ao código:&lt;/p&gt;

&lt;h3 id=&#34;assets-stylus-base&#34;&gt;assets/stylus/base&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;all.styl (Import de todos os arquivos do diretório)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;// Import all from base
&amp;lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&amp;gt;@import&amp;lt;/a&amp;gt; ‘reset.styl’
&amp;lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&amp;gt;@import&amp;lt;/a&amp;gt; ‘colors.styl’
&amp;lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&amp;gt;@import&amp;lt;/a&amp;gt; ‘typography.styl’
&amp;lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&amp;gt;@import&amp;lt;/a&amp;gt; ‘variables.styl’&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;colors.styl (Definições de cores do projeto)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;orange = #FF6347
gray-darker = #AAAAAA
gray-lighter = #EEEEEE
lighter = #FFF
darker = #444444
blue = #0080FF
blue-lighter = #1EC0FF
yellow = #F9C00C
red = #E71D36
green = #3AC569
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;reset.styl (Foi utilizado o normalize.css)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://necolas.github.io/normalize.css/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;normalize.css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;typography.styl (Definições de fonts)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;font-size-h1 = 40px
font-size-h2 = 34px
font-size-h3 = 28px
line-height-h1 = 55px
line-height-h2 = 46px
line-height-h3 = 38px
h1, h2, h3
 color darker
 font-weight bold
h1
 font-size font-size-h1
 line-height line-height-h1
 color darker
 margin-bottom 30px
h2
 font-size font-size-h2
 line-height line-height-h1
h3
 font-size font-size-h3
 line-height line-height-h3
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;variables.styl (Variáveis reutilizáveis do projeto)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;// Font Weights
light = 300
regular = 400
bold = 700&lt;/pre&gt;

&lt;pre&gt;// Base Font
base-font-family = ‘Open Sans’, sans-serif
base-font-weight = light
base-font-size = 20px
base-line-height = 27px
form-label-font-size = base-font-size
form-field-font-size = 18px&lt;/pre&gt;

&lt;pre&gt;// Buttons
btn-font-weight = bold
btn-default-border = gray-darker
btn-default-color = darker
btn-primary-color = lighter
btn-success-color = lighter
btn-danger-color = lighter
btn-warning-color = lighter
btn-info-color = lighter
&lt;/pre&gt;

&lt;h3 id=&#34;assets-stylus-components&#34;&gt;assets/stylus/components&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;all.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;// Import all from components
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘buttons.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘forms.styl’&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;buttons.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;.btn
 font-weight bold
 padding 15px 27px
 border 1px solid transparent
 display inline-block
 cursor pointer
 border-radius(5px)
&amp;-info
 &amp;-primary
 &amp;-success
 &amp;-danger
 color lighter
&amp;-default
 color darker
 border-color gray-darker
 background-color lighter
&amp;-primary
 background-color blue
 border-color blue
&amp;:hover
 &amp;:focus
 background-color darken(blue, 20%)
 border-color darken(blue, 20%)
&amp;-info
 background-color blue-lighter
 border-color blue-lighter
&amp;:hover
 &amp;:focus
 background-color darken(blue-lighter, 20%)
 border-color darken(blue-lighter, 20%)
&amp;-warning
 background-color yellow
 border-color yellow
&amp;:hover
 &amp;:focus
 background-color darken(yellow, 20%)
 border-color darken(yellow, 20%)
&amp;-success
 background-color green
 border-color green
&amp;:hover
 &amp;:focus
 background-color darken(green, 20%)
 border-color darken(green, 20%)
&amp;-danger
 background-color red
 border-color red
&amp;:hover
 &amp;:focus
 background-color darken(red, 20%)
 border-color darken(red, 20%)&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;forms.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;.form
 &amp;__group
 margin-bottom 20px
&amp;__label
 color darker
 font-size form-label-font-size
 font-weight bold
 margin-bottom 10px
&amp;__field
 display block
 width 100%
 padding 6px 18px
 height 60px
 border 1px solid gray-darker
 color darker
 font-size form-field-font-size
 border-radius(3px)
&amp;:hover
 &amp;:focus
 border-color orange&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;helpers.styl (Utilitários do projeto)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;all.styl (Import de todos os arquivos do diretório)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;// Import all from helpers
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘functions.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘helpers.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘mixins.styl’&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;functions.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;make-media-queries-breakpoints()
 for screen-width in screen-desktop-large screen-desktop screen-tablet screen-mobile
 &lt;a title=&#34;Twitter profile for @media&#34; href=&#34;http://twitter.com/media&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@media&lt;/a&gt; only screen and (max-width: screen-width)
 if (screen-width == screen-desktop-large)
 .container
 width container-desktop
 else if (screen-width == screen-desktop)
 .container
 width container-tablet
 else if (screen-width == screen-tablet)
 .container
 .columns
 width container-mobile !important
make-row()
 margin 0 (-(grid-gutter-width / 2))
calc-container-padding()
 padding 0 (grid-gutter-width / 2)
make-columns()
 for i in grid-columns..0
 .col-{i}
 width percentage(i, grid-columns)
.col-offset-{i}
 margin-left percentage(i, grid-columns)
percentage(index, divider)
 if index == 0
 0
 else
 unit((index * 100) / divider, “%”)&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;helpers.styl (Classes utilitárias para uso no html)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;.pull-left
 float left
.pull-right
 float right
.show
 display block
.hide
 display none
.text-center
 text-align center
.text-left
 text-align left
.text-right
 text-align right
.absolute
 position absolute
.relative
 position relative
.in-block
 display inline-block
.center-block
 margin 0 auto
 display block
.img-responsive
 max-width 100%
.clearfix
 &amp;:before
 &amp;:after
 content “ “
 display table
&amp;:after
 clear both&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;mixins.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;vendor(prop, args)
 -webkit-{prop} args
 -moz-{prop} args
 {prop} args
border-radius()
 vendor(‘border-radius’, arguments)
box-shadow()
 vendor(‘box-shadow’, arguments)
opacity(n)
 opacity n
 filter unquote(‘progid:DXImageTransform.Microsoft.Alpha(Opacity=’ + round(n * 100) + ‘)’)&lt;/pre&gt;

&lt;h3 id=&#34;assets-stylus-layout&#34;&gt;assets/stylus/layout&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;header.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.header
 background-color orange
 padding 30px 0
.header__img
 max-width 150px&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;footer.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.footer
 padding 40px 0
 background-color darker
 color lighter
&amp; a
 color lighter
 &amp;:hover
 color orange
&amp; p
 font-size 16px
 line-height 22px
 margin 0 0 10px 0
&amp; .fa
 color #E84545
 margin 0 2px
&amp; img
 max-width 150px
 &amp;:hover
 opacity(0.6)&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;grid.styl (Sistema de grids utilizado no projeto)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;// Media Queries Breakpoints
screen-desktop-large = 1200px
screen-desktop = 992px
screen-tablet = 768px
screen-mobile = 480px
// Grid System
grid-columns = 12
grid-gutter-width = 30px
// Container Sizes
container-desktop-large = 1170px
container-desktop = 940px
container-tablet = 720px
container-mobile = 100%
.container
 width container-desktop-large
 calc-container-padding()
 margin 0 auto
.row
.columns
 box-sizing border-box
.row
 make-row()
&amp;:before
 &amp;:after
 content “ “
 display table
&amp;:after
 clear both
.columns
 &lt;a title=&#34;Twitter profile for @extend&#34; href=&#34;http://twitter.com/extend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@extend&lt;/a&gt; .relative
 &lt;a title=&#34;Twitter profile for @extend&#34; href=&#34;http://twitter.com/extend&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@extend&lt;/a&gt; .pull-left
 padding 0 (grid-gutter-width / 2)
make-media-queries-breakpoints()
make-columns()&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;login.styl&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.content
 padding-top 60px
 padding-bottom 60px
 min-height 470px
&amp;__login
 padding 30px
 border-radius(3px)
 background-color gray-lighter
 box-shadow(0 0 5px rgba(0,0,0,0.09))
 max-width 530px
 background-color darker
&amp; .form__label
 &amp; h3
 color lighter
&amp; h3
 margin-bottom 20px&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;assets/stylus/themes (Temas do projeto admin, padrão e quais forem necessários)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;default.styl (Tema padrão)&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;*
 vendor(‘box-sizing’, border-box)
body
 font-family base-font-family
 font-weight base-font-weight
 font-size base-font-size
 line-height base-line-height
 background-color lighter
a
 text-decoration none&lt;/pre&gt;

&lt;h3 id=&#34;assets-stylus-main-styl-arquivo-principal&#34;&gt;assets/stylus/main.styl (Arquivo principal)&lt;/h3&gt;

&lt;p&gt;Neste arquivo você deve efetuar todas as importações necessárias do seu projeto. Em nosso tutorial o arquivo ficou assim:&lt;/p&gt;

&lt;pre&gt;&lt;a title=&#34;Twitter profile for @charset&#34; href=&#34;http://twitter.com/charset&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@charset&lt;/a&gt; “UTF-8”
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘base/all.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘helpers/all.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘components/all.styl’
// Imports from layout
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘layout/grid.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘layout/header.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘layout/footer.styl’
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘layout/login.styl’
// Import themes
&lt;a title=&#34;Twitter profile for @import&#34; href=&#34;http://twitter.com/import&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@import&lt;/a&gt; ‘themes/default.styl’&lt;/pre&gt;

&lt;p&gt;Por fim, crie um arquivo &lt;strong&gt;index.html&lt;/strong&gt; na raíz de seu projeto com o seguinte código:&lt;/p&gt;

&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=”en”&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=”UTF-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Iniciando com Stylus&amp;lt;/title&amp;gt;
&amp;lt;link href=”&lt;a href=&#34;https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&lt;/a&gt;&#34; rel=”stylesheet”&amp;gt;
&amp;lt;link rel=”stylesheet” href=”&lt;a href=&#34;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&lt;/a&gt;&#34;&amp;gt;
&amp;lt;link rel=”stylesheet” href=”assets/css/main.css”&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
 &amp;lt;header class=”header”&amp;gt;
 &amp;lt;div class=”container”&amp;gt;
 &amp;lt;img class=”header__img img-responsive center-block” src=”assets/images/stylus-logo.png” alt=”” /&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/header&amp;gt;
&amp;lt;div class=”content container”&amp;gt;
 &amp;lt;h1 class=”text-center”&amp;gt;Iniciando com Stylus&amp;lt;/h1&amp;gt;
&amp;lt;div class=”content__login center-block”&amp;gt;
 &amp;lt;h3 class=”text-center”&amp;gt;Acesse sua conta&amp;lt;/h3&amp;gt;
&amp;lt;form action=”#”&amp;gt;
 &amp;lt;div class=”form__group”&amp;gt;
 &amp;lt;label for=”name” class=”form__label show”&amp;gt;Nome&amp;lt;/label&amp;gt;
&amp;lt;input type=”text” name=”name” id=”name” class=”form__field”&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=”form__group”&amp;gt;
 &amp;lt;label for=”email” class=”form__label show”&amp;gt;Email&amp;lt;/label&amp;gt;
&amp;lt;input type=”text” name=”email” id=”email” class=”form__field”&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=”submit text-right”&amp;gt;
 &amp;lt;button type=”submit” class=”btn btn-success”&amp;gt;
 Submit
 &amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;footer class=”footer text-center”&amp;gt;
 &amp;lt;div class=”container”&amp;gt;
 &amp;lt;p&amp;gt;
 Feito com &amp;lt;i class=”fa fa-heart”&amp;gt;&amp;lt;/i&amp;gt; por &amp;lt;a href=”&lt;a href=&#34;http://helderburato.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;http://helderburato.com/&lt;/a&gt;”&amp;gt;Helder Burato Berto&amp;lt;/a&amp;gt;
 &amp;lt;/p&amp;gt;
&amp;lt;a class=”in-block” href=”&lt;a href=&#34;http://uilab.com.br/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;http://uilab.com.br/&lt;/a&gt;&#34;&amp;gt;
 &amp;lt;img class=”img-responsive” src=”assets/images/uilab-logo.png” alt=””&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/footer&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;h2 id=&#34;compreendendo-a-linguagem-stylus&#34;&gt;Compreendendo a linguagem Stylus&lt;/h2&gt;

&lt;p&gt;Você pode observar que foram utilizados algumas particularidades da linguagem, que não são comuns para quem está acostumado apenas com CSS, sendo elas: &lt;strong&gt;&amp;amp;:&lt;/strong&gt; Usado para referenciar parcialmente um elemento citado anteriormente, por exemplo:&lt;/p&gt;

&lt;pre&gt;.foo
 color #000
 &amp; a
 color #fff&lt;/pre&gt;

&lt;p&gt;Será compilado para:&lt;/p&gt;

&lt;pre&gt;.foo {
 color: #000;
}
.foo a {
 color: #fff;
}&lt;/pre&gt;

&lt;p&gt;Você percebe o quanto isso é poderoso e tem utilidade?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;border-radius():&lt;/strong&gt; Mixin definido para ser reutilizado e com possibilidade de uso com parâmetros.&lt;/p&gt;

&lt;p&gt;Exemplo de uso:&lt;/p&gt;

&lt;pre&gt;.foo
 border-radius(5px)&lt;/pre&gt;

&lt;p&gt;Será compilado para:&lt;/p&gt;

&lt;pre&gt;.foo {
 border-radius: 5px;
 -webkit-border-radius: 5px;
 -moz-border-radius: 5px;
}&lt;/pre&gt;

&lt;p&gt;Observe que foi gerado o código ja com os prefixos para outros browsers, facilitando na escrita.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF&lt;/strong&gt; e &lt;strong&gt;FOR:&lt;/strong&gt; Vamos descrever o uso de IF e for com uma função que foi utilizado no tutorial chamada &lt;strong&gt;make-media-queries-breakpoints()&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;make-media-queries-breakpoints()
 for screen-width in screen-desktop-large screen-desktop screen-tablet screen-mobile
 &lt;a title=&#34;Twitter profile for @media&#34; href=&#34;http://twitter.com/media&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@media&lt;/a&gt; only screen and (max-width: screen-width)
 if (screen-width == screen-desktop-large)
 .container
 width container-desktop
 else if (screen-width == screen-desktop)
 .container
 width container-tablet
 else if (screen-width == screen-tablet)
 .container
 .columns
 width container-mobile !important&lt;/pre&gt;

&lt;p&gt;Nós utilizamos o FOR para percorrer as variáveis declaradas posteriormente e IF para modificar a width de nosso container principal de acordo com a media queria utilizada.&lt;/p&gt;

&lt;p&gt;O código acima após a compilação:&lt;/p&gt;

&lt;pre&gt;&lt;a title=&#34;Twitter profile for @media&#34; href=&#34;http://twitter.com/media&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@media&lt;/a&gt; only screen and (max-width: 1200px) {
 .container {
 width: 1170px;
 }
}
&lt;a title=&#34;Twitter profile for @media&#34; href=&#34;http://twitter.com/media&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@media&lt;/a&gt; only screen and (max-width: 992px) {
 .container {
 width: 720px;
 }
}
&lt;a title=&#34;Twitter profile for @media&#34; href=&#34;http://twitter.com/media&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;@media&lt;/a&gt; only screen and (max-width: 768px) {
 .container,
 .columns {
 width: 100%;
 }
}&lt;/pre&gt;

&lt;h3 id=&#34;sintaxe&#34;&gt;Sintaxe&lt;/h3&gt;

&lt;p&gt;Você provavelmente deve ter percebido que com Stylus não temos a necessidade do uso de &lt;strong&gt;{}&lt;/strong&gt; e&lt;strong&gt;;&lt;/strong&gt; nas declarações CSS, isso em prática ajuda muito na produtividade.&lt;/p&gt;

&lt;h3 id=&#34;variáveis&#34;&gt;Variáveis&lt;/h3&gt;

&lt;p&gt;Você pode declarar variáveis sem o uso de &lt;strong&gt;$&lt;/strong&gt; mas caso você já utilizou outros pré;-processadores, fica a seu crité;rio o uso dele ou não.&lt;/p&gt;

&lt;p&gt;Bom espero que tenha conseguido compartilhar um pouco do que é; esta grande ferramenta e que lhe seja útil na hora de pensar em usar um pré;-processador.&lt;/p&gt;

&lt;p&gt;Um grande abraço, obrigado!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link do Projeto: &lt;a href=&#34;https://helderburato.github.io/iniciando-stylus/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://helderburato.github.io/iniciando-stylus/&#34;&gt;https://helderburato.github.io/iniciando-stylus/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Git do Projeto: &lt;a href=&#34;https://github.com/helderburato/iniciando-stylus&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://github.com/helderburato/iniciando-stylus&#34;&gt;https://github.com/helderburato/iniciando-stylus&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Layout: &lt;a href=&#34;https://github.com/helderburato/iniciando-stylus/tree/master/sketch&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://github.com/helderburato/iniciando-stylus/tree/master/sketch&#34;&gt;https://github.com/helderburato/iniciando-stylus/tree/master/sketch&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Como boas práticas de escrita de código podem influenciar em uma melhor rotina de trabalho</title>
      <link>https://tableless.github.io/hugo-public/como-boas-praticas-de-escrita-de-codigo-podem-influenciar-em-uma-melhor-rotina-de-trabalho/</link>
      <pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/como-boas-praticas-de-escrita-de-codigo-podem-influenciar-em-uma-melhor-rotina-de-trabalho/</guid>
      <description>

&lt;p&gt;Observei que alguns itens estão me ajudando na rotina de trabalho, como obter um melhor tempo de produção e um melhor controle sobre o que estou fazendo.&lt;/p&gt;

&lt;p&gt;São alguns hábitos simples que podem lhe ajudar muito. É apenas questão de implementar no seu dia a dia e demonstrar para a sua equipe (caso trabalhe em equipe) o quanto é mais organizado e produtivo trabalhar desta forma.&lt;/p&gt;

&lt;p&gt;A seguir listei algumas técnicas que podem ajudar bastante no seu dia a dia como desenvolvedor front-end.&lt;/p&gt;

&lt;h4 id=&#34;style-guide&#34;&gt;Style Guide&lt;/h4&gt;

&lt;p&gt;É um documento que contém estilos e padrões de um projeto, que podem ser utilizados para manter a pregnância do design e desenvolvimento.&lt;/p&gt;

&lt;p&gt;Existem algumas metodologias que podem ajudar você no desenvolvimento desse &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Style Guide, &lt;/strong&gt;como: &lt;a href=&#34;http://getbem.com/introduction/&#34; target=&#34;_blank&#34;&gt;BEM&lt;/a&gt;, &lt;a href=&#34;https://github.com/necolas/idiomatic-css/tree/master/translations/pt-BR&#34; target=&#34;_blank&#34;&gt;IDIOMATIC&lt;/a&gt;, &lt;a href=&#34;http://primercss.io/scaffolding/&#34; target=&#34;_blank&#34;&gt;PRIMER CSS&lt;/a&gt;, &lt;a href=&#34;http://getbootstrap.com/css/&#34; target=&#34;_blank&#34;&gt;Twitter Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;skeleton-ou-estruturas-boilerplate&#34;&gt;Skeleton ou Estruturas Boilerplate&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.initializr.com/&#34; target=&#34;_blank&#34;&gt;Initializr&lt;/a&gt;, &lt;a href=&#34;https://github.com/helderburato/generator-hyapp&#34; target=&#34;_blank&#34;&gt;Gerador HyApp&lt;/a&gt; + &lt;a href=&#34;http://yeoman.io/&#34; target=&#34;_blank&#34;&gt;Yeoman&lt;/a&gt; e &lt;a href=&#34;https://html5boilerplate.com/&#34; target=&#34;_blank&#34;&gt;HTML5 Boilerplate&lt;/a&gt;. Que são geradores de pequenas estruturas de diretórios para iniciar projetos em HTML/CSS/JS;&lt;/p&gt;

&lt;h4 id=&#34;font-ícones&#34;&gt;Font Ícones&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://fontawesome.io/&#34; target=&#34;_blank&#34;&gt;Font Awesome&lt;/a&gt;, &lt;a href=&#34;http://fontello.com/&#34; target=&#34;_blank&#34;&gt;Fontello&lt;/a&gt;, &lt;a href=&#34;https://icomoon.io/app/#/select&#34; target=&#34;_blank&#34;&gt;IcoMoon&lt;/a&gt; são ótimas opções. No meu dia a dia costumo utilizar na maioria dos projetos o &amp;#8220;Font Awesome&amp;#8221; pela facilidade e padronização nos layouts da empresa em que trabalho;&lt;/p&gt;

&lt;h4 id=&#34;web-fonts&#34;&gt;Web Fonts&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/&#34; target=&#34;_blank&#34;&gt;Google Fonts&lt;/a&gt; sem dúvidas é uma ótima opção e agiliza bastante quando utilizada nos layouts;&lt;/p&gt;

&lt;h4 id=&#34;task-runner&#34;&gt;Task Runner&lt;/h4&gt;

&lt;p&gt;Tratando-se de automatizadores de tarefas os mais conhecidos são o &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;GulpJS&lt;/a&gt; e o &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;GruntJS&lt;/a&gt;. Costumo utilizar o Gulp pois foi o que mais me identifiquei, mas você pode escolher o que mais adequar ao seu projeto ou ao modo de trabalho de sua equipe.&lt;/p&gt;

&lt;h3 id=&#34;será-que-isso-influencia-mesmo-na-rotina-ou-nos-custos-do-produto-final&#34;&gt;Será que isso influencia mesmo na rotina ou nos custos do produto final?&lt;/h3&gt;

&lt;p&gt;Segundo uma experiência direta da &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;IBM &lt;/strong&gt;e também de dados reunidos por pesquisadores que trabalham com centenas de empresas, percebe-se que a maioria das empresas acabam investindo &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;25% &lt;/strong&gt;a mais do orçamento no ciclo de vida do desenvolvimento para garantir a qualidade do software.&lt;/p&gt;

&lt;p&gt;Além disso, &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;30%&lt;/strong&gt; dos custos de projeto para desenvolvimento de software estão associados a retrabalho e &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;70%&lt;/strong&gt; desse valor estão relacionados a erros de requisitos.&lt;/p&gt;

&lt;p&gt;A qualidade de escrita de código influencia diretamente nos custos do projeto e da qualidade de vida do software.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56001&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/09/Group.png&#34; alt=&#34;Group&#34; width=&#34;1138&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mente-aberta-para-novas-ideias&#34;&gt;Mente aberta para novas ideias&lt;/h3&gt;

&lt;p&gt;Sou totalmente aberto a novas ideias e sugestões naquilo que eu posso melhorar no meu dia a dia de trabalho, mas parece que nem todo desenvolvedor enxerga as observações no seu próprio código como algo bom, algo produtivo. E sim como uma crítica pessoal.&lt;/p&gt;

&lt;p&gt;Lógico, todos nós temos dias difíceis, prazos curtos. E todo desenvolvedor que tem um pouco mais de experiência compreende muito bem como é correr contra o tempo para lançar um novo produto ou &lt;em class=&#34;markup--em markup--p-em&#34;&gt;feature&lt;/em&gt;. Mas creio que isso não seja motivo para excluir a possibilidade de mudança, de tentar o novo. &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;O que seria do mundo se ninguém tivesse tentado algo diferente?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Me deparo fazendo esse tipo de pergunta quase que diariamente, costumo estar sempre dando uma olhada em novas tecnologias, mesmo que seja por brincadeira. Mas me sinto frustrado quando não é possível aplicar nas equipes ou em projetos. Entendo que nem sempre é possível sair utilizando tudo que é novo, ainda mais quando nos deparamos com coisas novas todos os dias no nosso ramo, mas não podemos ficar presos ao velho para sempre.&lt;/p&gt;

&lt;p&gt;Tire 1 ou 2 dias agora para escrever bem seu código e no futuro você verá como o trabalho ficará mais fácil ao entrar novos membros na equipe e for necessário explicar como as coisas funcionam.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Padrões são bons!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Essa frase parece que assusta muitas pessoas, mas diferente de medo, ela deveria emitir a sensação de algo bom, pois é o que ela traz com o tempo.&lt;/p&gt;

&lt;p&gt;Agradeço a todos que tiraram um tempo e leram o texto, e qualquer sugestão de melhoria estou a disposição, obrigado!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Invertendo o Redux</title>
      <link>https://tableless.github.io/hugo-public/invertendo-o-redux/</link>
      <pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/invertendo-o-redux/</guid>
      <description>

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Já faz um tempo desde que implementei pela primeira vez o &lt;a href=&#34;http://redux.js.org/&#34;&gt;Redux&lt;/a&gt;. Numa época que só se falava nos frameworks, ele apareceu do nada, pelo menos para mim. Eu já conhecia o Flux, mas ainda não era o que estava procurando. O &lt;strong&gt;Redux&lt;/strong&gt; realmente é uma das melhores idéias que vi, para mim faz todo o sentido e ainda é simples de entender e de se implementar.&lt;/p&gt;

&lt;p&gt;Depois de usá-lo algumas vezes você precisa se policiar para não se ver usando esta arquitetura em todos os projetos e virar um pregador da arquitetura. A idéia deste post é apresentar alguns aspectos que aprendi usando este padrão, ter um olhar mais crítico apesar do entusiasmo, e apresentar uma proposta um pouco diferente que pode lhe ser útil em alguma situação.&lt;/p&gt;

&lt;h2 id=&#34;uma-visão-crítica&#34;&gt;Uma visão crítica&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Como havia dito, apesar de todo o amor que se pode ter por uma solução, é preciso um pouco de maturidade e entender que tudo o que você gosta possui contras, pontos negativos. Ter consciência disso pode te ajudar a tomar uma decisão melhor quando possui diferentes soluções parecidas para um determinado problema. Te ajudará também a saber quando dar mais atenção aos contras quando estes podem ser mais prejudiciais do que os benefícios dos seus prós. Isso te fará ser mais lúcido, mais racional, tomará menos decisões com natureza emocional. Com isto dito, vamos à alguns pontos sobre o &lt;strong&gt;Redux&lt;/strong&gt; sob minha perspectiva.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Redux&lt;/strong&gt; não é para todas as aplicações, é claro. Me vi em alguns projetos que não eram dos mais complexos, mas também não eram tão simples, nestes casos, a implementação do &lt;strong&gt;Redux&lt;/strong&gt; parece ser demais, um over-engineering, em português claro, um canhão para matar um mosquito.&lt;/li&gt;
&lt;li&gt;Todos os reducers tem um grupo de switch cases que testam o tipo de ação disparada. Estes reducers podem ficar incrivelmente grandes além de ser difícil saber de forma rápida e prática, quais reducers respondem uma determinada ação. Para saber isso você deve abrir cada arquivo do &lt;em&gt;reducer&lt;/em&gt; para descobrir.&lt;/li&gt;
&lt;li&gt;A composição dos reducers pode ser um pouco complicada às vezes de se entender. Principalmente para que está iniciando.&lt;/li&gt;
&lt;li&gt;Em algumas situações você vai preferir que o relacionamento entre as ações e os reducers fosse mais direta, mais simples.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;metodologia&#34;&gt;Metodologia&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Resumidamente, o Redux funciona alterando as propriedades de um único objeto que armazena todo o estado de sua aplicação, utiliza funções puras ( _reducers ) _para aplicar mudanças nestes estados de acordo com uma determinada ação.&lt;/p&gt;

&lt;p&gt;Os tipos das ações são imutáveis, ou seja, são constantes é por isso são usadas strings em &lt;em&gt;uppercase. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pensando em uma alternativa,  removi os tipos das ações de dentro dos reducers, e coloquei no contexto da minha Store. No Redux você pode executar vários reducers para uma mesma ação, mas não pode disparar várias ações usando um reducer.&lt;/p&gt;

&lt;p&gt;Então,  a conclusão que tirei é que posso escrever os tipos das ações como métodos de um objeto. A vantagem disso é que especifico todos os reducers que quero executar para cada um destes métodos, resolvendo o &lt;strong&gt;item 2.&lt;/strong&gt; É fácil enxergar qual &lt;em&gt;reducer&lt;/em&gt; é executado numa ação disparada e como efeito colateral eu resolvo o &lt;strong&gt;item 3&lt;/strong&gt; também, pois a composição entre reducers é direta.&lt;/p&gt;

&lt;p&gt;A lógica no final é: Ao invés de executar _n_ reducers que vão testar todos os tipos das ações, eu faço isso de maneira &lt;strong&gt;inversa&lt;/strong&gt;, eu testo apenas a ação, se esta ação existir no meu objeto, então executo os &lt;em&gt;n&lt;/em&gt; reducers. Por isso chamei esse formato de &lt;em&gt;&lt;strong&gt;Inverted Redux&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;iredux-store&#34;&gt;IRedux Store&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Com esta lógica em mente, foi só necessário escrever o código que comprove a eficácia ou não da hipótese do Inverted Redux. Para meu espanto foi ridiculamente simples. Para simplificar ainda mais por questões de didática, vou partir do princípio que esta nova Store receberá um objeto que implementa o padrão &lt;a href=&#34;https://davidwalsh.name/pubsub-javascript&#34;&gt;publish/subscribe&lt;/a&gt; ( &lt;em&gt;que é um padrão bem simples de se implementar&lt;/em&gt; ).&lt;/p&gt;

&lt;p&gt;Esta é a implementação final desta Store:&lt;/p&gt;

&lt;pre&gt;export default ( pubsub, state ) =&amp;gt; {
        let Store = {
            getState(){
                return state
        },
            subscribe( callback ){
                pubsub.subscribe(&#39;store:update&#39;, callback)
            },
            dispatch( action ){
                pubsub.publish(&#39;store&#39;, action)
            }
        }
        pubsub.subscribe(&#39;store&#39;, ( payload ) =&amp;gt;{
            if( payload.type in Store ){
                var newstate = Store[ payload.type ].call(null, state, payload );
                pubsub.publish( &#39;store:update&#39;, newstate );
            }
        });

    return Store
}

&lt;/pre&gt;

&lt;h2 id=&#34;reducers&#34;&gt;Reducers&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Com esta mudança, os reducers ficaram muito mais simples do que a versão com os _&lt;strong&gt;switch cases&lt;/strong&gt;,_ ficando mais fácil de entender, de compor e de reutilizar também.&lt;/p&gt;

&lt;p&gt;Eu prefiro exportar um objeto contendo os meus reducers agrupados por um contexto em comum. Para exemplificar, vou criar aqui um objeto com as tarefas de &lt;strong&gt;adicionar&lt;/strong&gt;, &lt;strong&gt;remover&lt;/strong&gt; e &lt;strong&gt;editar&lt;/strong&gt; itens de uma lista.&lt;/p&gt;

&lt;pre&gt;export default{

    add( state = [], action ){
        return [...state, {
            text :action.item,
            id   :(Math.random() * Math.pow(10, 20))
        }]
    },

    remove( state = [], action ){
        return state.filter( item =&amp;gt; item.id != action.id )
    },

    edit( state = [], action ){
        return state.map( item =&amp;gt; {
            if( item.id == action.id )
                return { id : item.id, text : action.text }
            else
                return { id : item.id, text : item.text }
        })
    }
}

&lt;/pre&gt;

&lt;p&gt;Neste formato a principal diferença é que os reducers não testam as ações, apenas se preocupam no tratamento dos dados que lhe são passados.&lt;/p&gt;

&lt;h2 id=&#34;juntando-as-peças&#34;&gt;Juntando as peças&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Bom, o resultado final ficou bem simples, considerando que você já tem sua implementação do Inverted Redux e tem os seus reducers prontos, a junção da instância da sua Store com os reducers se dá da seguinte forma:&lt;/p&gt;

&lt;pre&gt;import store from &#39;Iredux&#39;
import Pubsub from &#39;Pubsub&#39;
import reducersList from &#39;reducers/list&#39;

let AppStore = store( Pubsub, {
    produtos :[]
})

AppStore.subscribe( state =&amp;gt;
    console.log( &#39;AppStore.State&#39;, state )
)

AppStore.ADD = ( state, action ) =&amp;gt;{
    state.produtos = reducersList.add( state.produtos, action )
}

AppStore.REMOVE = ( state, action ) =&amp;gt;{
    state.produtos = reducersList.remove( state.produtos, action )
}

AppStore.EDIT = ( state, action ) =&amp;gt;{
    state.produtos = reducersList.edit( state.produtos, action )
}

&lt;/pre&gt;

&lt;p&gt;Os métodos representam os tipos das ações do Redux, usei a mesma convenção de constantes, usando os nomes em &lt;em&gt;uppercase&lt;/em&gt;. Sua Store além de ter os métodos &lt;code&gt;dispatch()&lt;/code&gt;, &lt;code&gt;subscribe()&lt;/code&gt; e &lt;code&gt;getState()&lt;/code&gt;, ainda contém estes métodos que serão executados no disparo de uma ação.&lt;/p&gt;

&lt;p&gt;Esta mudança me ajudou não só na visualização, pois você facilmente consegue identificar quais ações sua Store possui, como também na hora de compor os reducers. Posso também disparar um evento de remoção passando apenas o id, sem a necessidade de passar a lista ( de produtos no meu caso ) na hora de criar uma ação:&lt;/p&gt;

&lt;pre&gt;import PubSub from &#39;PubSub&#39;

$(document.body).on(&#39;click&#39;, &#39;.remove-item&#39;, (e)=&amp;gt;{
    let id = e.target.id
    PubSub.publish(&#39;store&#39;, { type:&#39;REMOVE&#39;, id })
})
&lt;/pre&gt;

&lt;p&gt;No caso do código acima, eu usei o Singleton PubSub para publicar &lt;code&gt;store&lt;/code&gt; , passando apenas o id, porque no arquivo da minha Store propriamente dita, eu já mando o estado &lt;code&gt;produtos&lt;/code&gt; que sempre será uma lista conforme meu reducer &lt;code&gt;edit&lt;/code&gt; espera.&lt;/p&gt;

&lt;p&gt;Assim que a minha Store tiver executado todos os reducers ela disparará novamente outro evento global para meu pubsub, o &lt;code&gt;store:update&lt;/code&gt; . Diferente do Redux, eu preferi sempre enviar o estado da minha aplicação para receber como argumento na hora de registrar um callback, porque eu vi que sempre tinha de executar o método .getState() e tava ficando redundante.&lt;/p&gt;

&lt;pre&gt;AppStore.subscribe( state =&amp;gt;
    console.log( &#39;AppStore.State =&amp;gt;&#39;, state )
)
&lt;/pre&gt;

&lt;p&gt;Ao usar este padrão, percebi também que em alguns casos eu sempre repetia as mesmas chamadas dos reducers em diferentes ações, isso deixava o código meio duplicado e redundante. Mas a solução foi novamente muito simples, bastava criar um reducer intermediário, um middleware, que executava todos os reducers que precisava para uma determinada ação. Passei por isso pela primeira vez quando implementei uma aplicação &lt;code&gt;todomvc&lt;/code&gt; para testar os conceitos, criei um reducer chamado &lt;code&gt;common&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;import r from &#39;stores/reducers/todos&#39;

export default ( store )=&amp;gt;{

    let common = ( state, action )=&amp;gt;{
        state.items     = r.filter( state.todos, { filter : state.filter } )
        state.remaining = r.remaining( state.remaining, { todos: state.todos } )
        return state
    }

    store.ADD = ( state, action ) =&amp;gt;{
        state.todos = r.add( state.todos, action )
        return common( state, action )
    }

    store.REMOVE = ( state, action ) =&amp;gt;{
        state.todos = r.remove( state.todos, action )
        return common( state, action )
    }

    store.UPDATE = ( state, action ) =&amp;gt;{
        state.todos = r.update( state.todos, action )
        return common( state, action )
    }

    store.TOGGLE = ( state, action ) =&amp;gt;{
        state.todos = r.toggle( state.todos, action )
        return common( state, action )
    }

    store.TOGGLE_ALL = ( state, action ) =&amp;gt;{
        state.todos = r.toggle_all( state.todos, action )
        return common( state, action )
    }

    store.EDIT = ( state, action ) =&amp;gt;{
        state.todos = r.edit( state.todos, action )
        return common( state, action )
    }

    store.CANCEL = ( state, action ) =&amp;gt;{
        state.todos = r.cancel( state.todos, action )
        return common( state, action )
    }

    store.CLEAR = ( state, action ) =&amp;gt;{
        state.todos = r.clear( state.todos, action )
        return common( state, action )
    }

    store.FILTER = ( state, action )=&amp;gt;{
        state.filter = action.filter || &#39;all&#39;
        return common( state, action )
    }
}
&lt;/pre&gt;

&lt;p&gt;Deixei o &lt;code&gt;common&lt;/code&gt;  ali para ficar mais claro de entender o que ele faz, poderia muito bem ter colocado dentro do objeto que contém todos os reducers relacionados à minha lista de Todo&amp;#8217;s e referenciá-lo como fiz com outros métodos. Ali dá para ver que eu atualizo os estados &lt;code&gt;items&lt;/code&gt; e &lt;code&gt;remaining&lt;/code&gt; , e passo normalmente para estes reducers actions customizadas, enviando dados que meus reducers sempre esperam.&lt;/p&gt;

&lt;p&gt;Claro, é possível perceber logo de cara que o arquivo da sua Store vai crescer, você pode resolver isso movendo estas ações para outro arquivo, e mandando sua store como parâmetro:&lt;/p&gt;

&lt;pre&gt;import Pubsub from &#39;Pubsub&#39;
import store from &#39;Iredux&#39;
import actions from &#39;stores/actions&#39;

let AppStore = store( Pubsub, {
    produtos :[]
})

AppStore.subscribe( state =&amp;gt;
    console.log( &#39;AppStore.State&#39;, state )
)

// @Actions
actions( AppStore )&lt;/pre&gt;

&lt;p&gt;Neste arquivo &lt;code&gt;stores/actions&lt;/code&gt; eu exporto uma função que recebe a store e faz o registro de todas as ações que esta store deve ter. Aí a organização com relação à estrutura de pastas e a lógica como isso vai se dar, depende de você e também da sua aplicação.&lt;/p&gt;

&lt;h2 id=&#34;conclusões&#34;&gt;Conclusões&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Eu fiquei bastante surpreso com o resultado disso na prática. Há projetos onde criar todos os componentes usando &lt;strong&gt;Redux&lt;/strong&gt; ou mesmo o &lt;em&gt;Inverted Redux&lt;/em&gt; é loucura, principalmente porque muitos componentes acabam trabalhando bem sozinhos, são stand-alone, e não precisam estar num flow mais complexo de relacionamento.&lt;/p&gt;

&lt;p&gt;Na prática, no mundo real, há uma necessidade de se analisar quais estados realmente devem estar em sua Store. Alguns componentes apenas precisam resolver problemas de UI, ou validação, não implicando em um relacionamento mais complexo entre as partes. Você não deve criar toda uma arquitetura Redux, Flux ou qualquer que seja, se sua página apenas contém um formulário que faz um post para uma outra página depois de uma validação simples, ou mesmo ao desenvolver um sticky header.&lt;/p&gt;

&lt;p&gt;Muitas vezes você se depara com soluções do mercado e não sabe se é ou não uma solução otimizada para o seu projeto. Pense que muitas soluções do mercado estão focando nos problemas das &lt;strong&gt;Single Page Applications&lt;/strong&gt;, e fazem isso com toda a razão pois &lt;em&gt;SPA&amp;#8217;s&lt;/em&gt; são difíceis de se desenvolver e mais difícil ainda é criar uma aplicação neste formato com fácil manutenção. Porém há um nicho muito grande que são as páginas que possuem ajax, possuem uma forma um pouco mais rica na interface, mas que não podem ser consideradas totalmente &lt;em&gt;SPA&amp;#8217;s&lt;/em&gt;. Você não deve desprezar  ou subestimar estas aplicações, grandes dores de cabeça costumam vir de onde menos se espera.&lt;/p&gt;

&lt;p&gt;Ao meu ver existe uma supervalorização do verbo &amp;#8220;&lt;strong&gt;escalar&lt;/strong&gt;&amp;#8221; no contexto do desenvolvimento front-end. Vejo muitas soluções serem vendidas utilizando o argumento de que você deve usar isto ou aquilo pois caso contrário sua aplicação não irá escalar. Nenhuma solução é ótima por si só, não há regras inquebráveis e todas elas dependem de um contexto. É por este motivo que escolher um Framework A ou B, ou um padrão C ou D não será suficiente para que sua aplicação escale. É necessário mais que isso, experiência, boas análises de requisitos, funcionalidades e especificações, refactories constantes, organização etc. Portanto, não é um caminho simples.&lt;/p&gt;

&lt;p&gt;A minha intenção com este post, além de compartilhar minhas experiências, é mostrar que o Redux abriu minha mente, minha forma de pensar, fez com que eu voltasse a pensar fora da caixa. Deve servir como solução mas também como uma inspiração, uma forma de te motivar à pensar em outras soluções, à questionar as que já tem, a seguir em frente estimulando sua criatividade.&lt;/p&gt;

&lt;p&gt;Até a próxima, um grande abraço.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Material Design com Materialize</title>
      <link>https://tableless.github.io/hugo-public/material-design-com-materialize/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/material-design-com-materialize/</guid>
      <description>

&lt;p&gt;Há muito tempo quero falar um pouco sobre desenvolvimento de sites utilizando layouts baseados no Material Design do Google, mas entre &lt;strong&gt;fazer&lt;/strong&gt; e &lt;strong&gt;falar&lt;/strong&gt; há um abismo enorme. Minha verdadeira intenção é compartilhar um pouco a maneira mais fácil de desenvolver um layout utilizando todos aqueles conceitos que a Google tem implementado atualmente.&lt;/p&gt;

&lt;h2 id=&#34;primeiros-passos&#34;&gt;Primeiros Passos&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&#34;http://materializecss.com/&#34; target=&#34;_blank&#34;&gt;Materialize&lt;/a&gt; é um Framework desenvolvido para facilitar e agilizar nosso desenvolvimento quando o assunto é Material Design. Além de ágil, possui uma infinidade de vantagens que permitem que na maioria das vezes dispensam o uso de outros frameworks para complementá-lo.&lt;/p&gt;

&lt;p&gt;Para baixar os arquivos do Materialize clique em &lt;a href=&#34;http://materializecss.com/getting-started.html&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt;, lá você verá uma documentação explicando como fazer o download dos arquivos e todas as maneiras que você tem para fazer isso, ou também pode usar a CDN dele como geralmente muitos fazem com o JQUERY. Os arquivos são bem distribudos e não diferem dos demais Frameworks que existem.&lt;/p&gt;

&lt;h3 id=&#34;vamos-para-as-vantagens-dele&#34;&gt;Vamos para as vantagens dele&lt;/h3&gt;

&lt;p&gt;Uma das principais vantagens é o fato de ser muito similar ao Material Design desenvolvido pela google. Outra vantagem que podemos observar são os amplos recursos de JQuery que ele possui como: Slider, Lightbox, Captions, Modais, Transitions, Waves entre muitos outros. Melhor do que falar é mostrar. Esses recursos ficam na categoria &lt;a href=&#34;http://materializecss.com/media.html&#34; target=&#34;_blank&#34;&gt;JAVASCRIPT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O sistema de grid usado é bastante parecido com os frameworks já existentes, como o Bootstrap.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/materialize-css-framework-01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;body&amp;gt;
      &amp;lt;div class=&#34;container&#34;&amp;gt; &amp;lt;!-- Container similar ao utilizado em outros Frameworks --&amp;gt;
            &amp;lt;div class=&#34;row&#34;&amp;gt; &amp;lt;!-- Row também similar ao utilizado em outros Frameworks --&amp;gt;
                 &amp;lt;div class=&#34;col s12 m4 l4&#34;&amp;gt;Eu sou uma coluna&amp;lt;/div&amp;gt; &amp;lt;!-- Coluna com 3 tamanhos--&amp;gt;
            &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;entendendo-as-colunas&#34;&gt;Entendendo as colunas&lt;/h4&gt;

&lt;p&gt;É muito simples, assim como o bootstrap que trabalha com 4 tamanhos de coluna, muito pequeno, pequeno, médio e grande, o materialize decidiu trabalhar com 3 tamanhos que são pequeno médio e grande, nada que assuste ou prejudique o andamento do projeto. Para saber mais entre no &lt;a href=&#34;http://materializecss.com/grid.html&#34; target=&#34;_blank&#34;&gt;menu CSS e acesse o submenu Grid&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;alguns-pequenos-diferenciais-que-ele-possui&#34;&gt;Alguns pequenos diferenciais que ele possui&lt;/h3&gt;

&lt;p&gt;Alguns diferenciais que ele possui são os botões, o modal, os cards, as collections e o mais importante talves de todos o menu lateral, vou mostrar alguns desses abaixo.&lt;/p&gt;

&lt;h4 id=&#34;cards&#34;&gt;Cards&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/Sem-Título-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;sidenav&#34;&gt;Sidenav&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/menu.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;vendo-essa-belezinha-funcionar&#34;&gt;Vendo essa belezinha funcionar ^^&lt;/h3&gt;

&lt;p&gt;Eu poderia colocar um milhão de exemplos feitos aqui, mas não tenho os direitos autorais deles então caso queira ver o showcase do site acesse o link &lt;a href=&#34;http://materializecss.com/showcase.html&#34; target=&#34;_blank&#34;&gt;Showcase&lt;/a&gt; e veja. Mas para não deixar vocês sem nenhum exemplo deixo aqui um site feito por mim através do materialize, espero que gostem o link está na imagem e abaixo dela.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.loguei.com/&#34; target=&#34;_blank&#34;&gt;&lt;br /&gt; &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/263dfd28861105.55d5d38e09a6f.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.loguei.com/&#34; target=&#34;_blank&#34;&gt;blog.loguei.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bem, aqui terminamos esse maravilhoso assunto sobre um Framework bem simples e maneiro de usar. Espero ter ajudado um pouco a todos. Obrigado ^^.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O nome UX está errado</title>
      <link>https://tableless.github.io/hugo-public/o-nome-ux-esta-errado/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-nome-ux-esta-errado/</guid>
      <description>&lt;p&gt;O que é um profissional de UX? Se você for responder rápido, você vai dizer: “É o mano (ou a mana) que faz o Wireframe do projeto.” Essa resposta é no mínimo incompleta. O profissional de UX é responsável por muito mais que isso. O Wireframe é na verdade uma resposta representativa de todo um trabalho prévio de pesquisa, organização e garimpo de informação junto com usuários e clientes. Há uma preocupação muito forte com fluxo de conteúdo e principalmente fluxo de navegação, além de juntar especificar a função e comportamento do sistema. Por isso, meça suas palavras, parça. UX não é o cara que &lt;strong&gt;só&lt;/strong&gt; faz os wireframes.&lt;/p&gt;

&lt;p&gt;Na verdade, esse texto é mais um desaforismo. A sigla UX é formada pelas palavras &lt;strong&gt;U&lt;/strong&gt;ser e&lt;strong&gt;X&lt;/strong&gt;perience. É muita prepotência dizer que apenas um profissional cuida da experiência do usuário, ainda mais quando ele faz parte apenas de uma parte do processo de desenvolvimento do projeto. Todo mundo do projeto cuida da experiência do usuário. Esse zelo começa desde o cara que faz o primeiro atendimento ao cliente/usuário, passa por todo o time que você já conhece e só vai terminar Deus sabe onde. Até o cara de infra, que cuida dos servidores, o mano que cuida do banco de dados, os back-ends, editores etc etc etc são profissionais de UX.&lt;/p&gt;

&lt;p&gt;Na minha opinião, quem nós chamamos de UX hoje, deveria ser chamado de outro nome. Eu gosto muito de chamar de Arquiteto de Informação. Mas esse nome também não é perfeito, pois ele contempla apenas uma parte do trabalho. Mesmo assim, ele consegue englobar boa parte das atribuições. O Arquiteto de Informação é aquele cara que vai filtrar as informações importantes junto dos clientes, usuários, donos de produto e também dos devs. É ele que vai priorizar quais informações e ações são mais importantes que outras. É ele que vai dizer onde cada coisa precisa ir. É ele que vai brigar defendendo o fluxo de navegação, fluxo de conteúdo etc etc. É o que o profissional de UX atual faz boa parte do tempo, e logo depois de tudo isso, ele representa esses dias de estudo e pesquisa no produto final, que geralmente é o Wireframe.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;É muita prepotência dizer que apenas um profissional cuida da experiência do usuário&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Outro problema são o profissionais da área de UX que se auto-denominam designers. Eles desenham sim, mas o contexto é outro. O papel do Designer é muito claro, até mais claro que o do profissional de UX. Mas não vale chamá-lo de Designer. E por favor, nem me venha falar que o certo é chamar o Designer de UI.&lt;/p&gt;

&lt;p&gt;Esse negócio de nomenclatura dos cargos está ficando bem confuso no mercado de web. Chamam front-end de front-end, mas back-end chamam de Desenvolvedor. Front-end não é desenvolvedor? Todos envolvidos no &lt;strong&gt;desenvolvimento&lt;/strong&gt; de um projeto podem ser chamados de desenvolvedor. Eles estão desenvolvendo alguma coisa, cada um com sua tarefa.&lt;/p&gt;

&lt;p&gt;Para mim, existem apenas dois lados no mercado de web, mais especificamente na parte de desenvolvimento técnico (aposto que você leu técnico e pensou em programadores): existe a área onde se executa o desenho. E a outra área onde se executa a função. Na área do desenho, ficam todos aqueles que estejam envolvidos em fluxos, interface, arquitetura e estrutura de layouts, guias visuais etc etc etc. Na área de função, ficam os responsáveis pela área de programa, que vai cuidar de fazer coisas funcionarem da melhor maneira possível. Não importa aqui se o cara manja de JavaScript ou Ruby. Na área de desenho, o cara pode manjar de JavaScript par fazer os comportamentos, por exemplo.&lt;/p&gt;

&lt;p&gt;Na área de UX, comparada com outras áreas de internet, é um misto de profissionais. Tem empresas que contratam profissionais como psicólogos e sociólogos para entenderem melhor seu cliente usuário. Esses tipo de profissional conhece muito mais sobre pessoas do que qualquer profissional de UX. Eles são UX, então? Mas claro que são. Afinal de contas, eles cuidam e estão preocupados com a experiência dos usuários. Mas eles não deixaram de ser psicólogos ou sociólogos.&lt;/p&gt;

&lt;p&gt;Por favor, entenda: a minha briga aqui é com o nome UX e não com o que esse profissional faz.&lt;/p&gt;

&lt;p&gt;Contudo, eu reitero: TODOS cuidam do UX do projeto, pelo simples motivo de que todos se preocupam e cuidam da experiência do usuário, de acordo com as suas tarefas. Não há um profissional específico dono desse título.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Front-end e WordPress: uma relação de amor e amizade</title>
      <link>https://tableless.github.io/hugo-public/front-end-e-wordpress-uma-relacao-de-amor-e-amizade/</link>
      <pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/front-end-e-wordpress-uma-relacao-de-amor-e-amizade/</guid>
      <description>

&lt;p&gt;É&amp;nbsp;bastante comum o&amp;nbsp;desenvolvedor front-end conseguir trabalho como freelancer e precisar do desenvolvedor back-end para tornar&amp;nbsp;o site dinâmico. O&amp;nbsp;cliente fica&amp;nbsp;feliz,&amp;nbsp;pois de forma rápida, ele consegue criar novas páginas, postagens, atualizando por conta própria o conteúdo. Mas atualmente, o&amp;nbsp;front-end não precisa mais desta dependência:&amp;nbsp;ele pode usar o WordPress.&lt;/p&gt;

&lt;p&gt;Ok, mas o WordPress usa PHP, uma&amp;nbsp;linguagem back-end, correto?&lt;/p&gt;

&lt;p&gt;Sim, mas isto não é impede de tornar a ferramenta facilmente configurável, mesmo que você não entenda de linguagens de programação.&lt;/p&gt;

&lt;p&gt;O objetivo deste post não é oferecer&amp;nbsp;um conhecimento da linguagem, mas levantar os tópicos mais comuns sobre a&amp;nbsp;sintaxe de funcionamento da ferramenta.&lt;/p&gt;

&lt;h2 id=&#34;o-wordpress&#34;&gt;O WordPress&lt;/h2&gt;

&lt;p&gt;O WordPress foi criado para ser usado como uma plataforma de criação e administração de blogs, mas hoje ele evoluiu bastante,&amp;nbsp;e&amp;nbsp;tornou-se um grande CMS (gerenciador de conteúdo), que é utilizado para criar sites dos mais simples aos mais complexos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wordpress.org/showcase/&#34; target=&#34;_blank&#34;&gt;Confira o showcase&lt;/a&gt; que mostra grandes sites que foram criados com o uso deste CMS.&lt;/p&gt;

&lt;h2 id=&#34;a-hierarquia&#34;&gt;A Hierarquia&lt;/h2&gt;

&lt;p&gt;Para transformar seu site HTML em um tema, é necessário conhecer a &lt;a href=&#34;http://tableless.com.br/hierarquia-de-arquivos-do-wordpress/&#34; target=&#34;_blank&#34;&gt;hierarquia de arquivos do WordPress&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-simplicidade&#34;&gt;A Simplicidade&lt;/h2&gt;

&lt;p&gt;Como dito anteriormente, não é necessário ter conhecimentos avançados em PHP. O WordPress possui muitas funções nativas, como por exemplo, buscar&amp;nbsp;o título da página, criar queries personalizadas, acessar informações de usuários, entre outras.&lt;/p&gt;

&lt;p&gt;Tais funções nativas evitam o desperdício de tempo e raciocínio, pois muito delas foram confeccionadas para atender as mais comuns&amp;nbsp;utilidades assim como os casos mais específicos.&lt;/p&gt;

&lt;p&gt;Veja o exemplo de algumas delas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;the_title()&lt;/strong&gt;Retorna o título da página ou do post;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;the_excerpt()&lt;/strong&gt;Traz o resumo do post e da página;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;the_content()&lt;/strong&gt;Traz o conteúdo completo da página ou do post;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;the_category()&lt;/strong&gt;Traz todas as categorias de um determinado post;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;single_cat_title()&lt;/strong&gt;Traz o nome da categoria.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://codex.wordpress.org/Function_Reference&#34;&gt;Aqui tem&amp;nbsp;uma lista com todas as funções do WordPress&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;e-o-banco-de-dados&#34;&gt;E o banco de dados?&lt;/h2&gt;

&lt;p&gt;O WordPress já vem com a configuração do banco de dados.&amp;nbsp;Basta conhecer como funciona a função &lt;strong&gt;WP_Query()&lt;/strong&gt; e passar através de um&amp;nbsp;parâmetro o que você deseja&amp;nbsp;acessar.&amp;nbsp;Como este é um post para&amp;nbsp;iniciantes&amp;nbsp;em&amp;nbsp;Wordpress, é possível criar de forma rápida &lt;em&gt;queries&lt;/em&gt;, &lt;em&gt;posts types&lt;/em&gt; e outras funcionalidades para que o tema funcione corretamente utilizando&amp;nbsp;o site &lt;a href=&#34;http://generatewp.com/&#34;&gt;GenerateWP&lt;/a&gt;. Com ele você pode gerar&amp;nbsp;funcionalidades como: &lt;em&gt;shortcodes&lt;/em&gt;, &lt;em&gt;sidebars&lt;/em&gt;, posições de menu, entre outras.&lt;/p&gt;

&lt;h2 id=&#34;custom-post-type-o-que-é-isso&#34;&gt;Custom Post Type, o que é isso?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Custom Post Type&lt;/strong&gt; é uma maneira de criar conteúdos personalizados para o seu site. Exemplo: o WordPress possui os &lt;em&gt;custons&amp;nbsp;post types &amp;nbsp;&lt;/em&gt;&lt;strong&gt;Post&lt;/strong&gt; e &lt;strong&gt;Page&lt;/strong&gt;, mas você pode criar um &lt;em&gt;post type&lt;/em&gt; chamado Portfólio, Filmes, Imóveis, etc.&lt;/p&gt;

&lt;p&gt;Nestes &lt;em&gt;posts types&lt;/em&gt; também é possível criar campos personalizados. Para saber mais sobre Posts Types confira este artigo do Paulo Rodrigues &lt;a href=&#34;http://tableless.com.br/custom-post-types-wordpress/&#34;&gt;Custom Post Types WordPress&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O mercado de desenvolvimento front-end</title>
      <link>https://tableless.github.io/hugo-public/pensamentos-sobre-o-mercado-de-desenvolvimento-front-end/</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/pensamentos-sobre-o-mercado-de-desenvolvimento-front-end/</guid>
      <description>

&lt;p&gt;Você já deve ter notado que o mercado cresceu demais nos últimos anos. De repente, codificar HTML virou a coisa mais importante do mundo e saber JavaScript transforma você automaticamente em um rockstar.&lt;/p&gt;

&lt;p&gt;O interesse das empresas também aumentou bastante. Empresas gringas tem buscado desesperadamente profissionais no mundo todo, inclusive no Brasil. Hoje não é muito difícil ir trabalhar em Amsterdam ou em Bangkok. A mão de obra nestes países está bem escassa. Mal sabem eles que aqui no Brasil o cenário é o mesmo: falta profissionais. Isso é bom, por um lado, pois os novatos ganham importantes oportunidades . Quem se esforça para aprender certo e rápido, se dá muito bem.&lt;/p&gt;

&lt;p&gt;Diversos fatores contribuíram para que a revolução acontecesse e que finalmente o dev front-end se tornasse a estrela da vez. E sim, isso é uma REvolução.&lt;/p&gt;

&lt;h2 id=&#34;a-primeira-evolução&#34;&gt;A primeira Evolução&lt;/h2&gt;

&lt;p&gt;Se você é novo na profissão, pode não ter acompanhado quando a febre dos Padrões Web contaminou todos os devs. Foi um negócio bem incrível de viver.&lt;/p&gt;

&lt;p&gt;O cenário do desenvolvimento web naquele início era bem grotesco. Tudo estava começando e ninguém — ninguém mesmo — sabia de verdade como produzir websites. Estou falando de um mercado pós-bolha.&lt;/p&gt;

&lt;p&gt;Os browsers eram bem ruins. O W3C era mais lerdo que uma tartaruga para avançar com as recomendações. E os desenvolvedores sofriam de todas as maneiras possíveis.&lt;/p&gt;

&lt;p&gt;Produzir websites para browsers ruins e uma conexão indecente era uma aventura. É por isso que dou risada quando alguém diz que o Internet Explorer 8 é uma porcaria. Ah! Se ele soubesse como é resolver um bug para o IE3/4…&lt;/p&gt;

&lt;p&gt;Foi nesse cenário e em plena guerra dos browsers que o WaSP surgiu. O WaSP era composto de designers e desenvolvedores que estavam cansados de produzir websites de maneira espartana. Algo precisava acontecer, precisava mudar. Tudo precisava ser derrubado para algo novo se reerguer. Eles fizeram exatamente isso. A evolução foi iniciada nas trincheiras.&lt;/p&gt;

&lt;p&gt;Hoje o mercado está no patamar atual muito por causa da iniciativa desses poucos profissionais inconformados. Este foi um fator importante, que abriu a trilha para o caminho correto. Vamos aos outros pontos.&lt;/p&gt;

&lt;h2 id=&#34;o-html-5&#34;&gt;O HTML 5&lt;/h2&gt;

&lt;p&gt;A forma com que as novidades do HTML foram divulgadas pelo W3C e pelo grupo WHATWG ajudaram muito a adoção e principalmente na popularidade da linguagem. Nenhuma outra versão do HTML ganhou um logo, um site para divulgação, adesivos, camisetas e etc… Toda esse campanha contribuiu para que o HTML fosse divulgado como uma linguagem séria e madura.&lt;/p&gt;

&lt;p&gt;O WHATWG teve uma atitude muito semelhante que a do WaSP. Eles estavam cansados de esperar as decisões do W3C, que literalmente levavam anos para serem tomadas. Foi aí que um grupo de desenvolvedores resolveu iniciar por conta própria a recomendação do que seria hoje o HTML5.&lt;/p&gt;

&lt;p&gt;As novas APIs facilitaram milhões de vezes a manipulação do DOM com JavaScript. Isso chamou a atenção de outros profissionais, como designers e desenvolvedores back-end. A partir de então tudo começou a mudar, desde o processo de desenvolvimento até a divisão de responsabilidades em projetos.&lt;/p&gt;

&lt;p&gt;Os desenvolvedores back-end sempre tiveram o suporte de várias ferramentas que os auxiliam no desenvolvimento. Mas esse suporte praticamente não existia no mundo front-end. Me lembro da empolgação geral quando saiu uma extensão do Firefox chamada Web Developer Tools. O que nos leva a outro ponto importante: ferramentário.&lt;/p&gt;

&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;

&lt;p&gt;Quem nunca ouviu falar de Yeoman, Bower, Grunt, Middleman, Jekyll, Sass, Compass, Less e uma série de outras ferramentas que facilitam o desenvolvimento diário? Depois que o Node.js surgiu, uma série de ferramentas surgiriam com ele. Outras ferramentas vieram da comunidade Ruby, suprindo uma série de outras dificuldades.&lt;/p&gt;

&lt;p&gt;Hoje podemos automatizar tarefas com o Grunt ou Gulp, gerenciar nossas dependências com o Bower, escrever sites estáticos com Middleman e Jekyll. Há uma série de outras ferramentas que medem a performance do site, que buscam erros no seu código etc etc etc.&lt;/p&gt;

&lt;p&gt;A falta de ferramentas era um problema grande no início. Não havia nada que nos ajudasse a escrever código de alta qualidade, apenas nós mesmos e a fiscalização dos colegas de trabalho. Fazia parecer que a área era meio amadora, sabe? Tentando fazer as coisas no achismo. Parecia que todo mundo ainda estava tentando descobrir os truques da área. Hoje é muito difícil conhecer alguém que não conheça o Inspector dos browsers ou que não use qualquer outra ferramenta auxiliar.&lt;/p&gt;

&lt;h2 id=&#34;o-javascript&#34;&gt;O JavaScript&lt;/h2&gt;

&lt;p&gt;Mas, na minha opinião, o que fez com que pessoas olhassem o front-end de forma diferente foi o JavaScript. De uma hora para outra uma série de iniciativas envolvendo a linguagem surgiram e de repente todo mundo achava o JavaScript uma linguagem maravilhosa. Principalmente os devs back-end que tinham uma visão ruim da nossa profissão. Muitos desdenhavam porque achavam que era só escrever HTML e pintar quadradinhos com CSS.&lt;/p&gt;

&lt;p&gt;O Node.js abriu os olhos de muita gente. Gente que não dava nada para esse mercado. Daí em diante é história.&lt;/p&gt;

&lt;p&gt;Depois que frameworks como Angular, Ember e Backbone surgiram, a badalação em volta do JavaScript cresceu muito. Isso é bom e ruim. É muito polêmico ainda escrever JS no servidor. Em vários lugares os devs ainda estão perdidos. A iniciativa de escrever JS no servidoré algo um pouco nebuloso ainda. Desenvolvedores que não sabem lidar com a novidade, acabam fazendo projetos híbridos, construindo parte de projetos com essas tecnologias. O projeto acaba ficando estranho, onde parte é escrita em JavaScript no servidor e a outra é escrita em linguagem server-side comum. Isso por que todo mundo quer experimentar. Eu ainda acho estranho abordagens assim. Se você quer escrever JS no servidor, ele precisa ser sua linguagem principal. Oras, você nunca misturou PHP com Ruby, não é? Por que fazer parte do projeto em Ruby e apenas um pedaço JavaScript então? Mesmo assim, essa visão é meio estranha, já que nenhuma linguagem resolve todos os problemas de um projeto. &lt;/p&gt;

&lt;p&gt;Mesmo assim o mercado vai caminhando. Não creio que essa confusão dure muito mais tempo e que todo mundo consiga encontrar uma maneira decente de fazer o processo funcionar.&lt;/p&gt;

&lt;p&gt;Além disso, um dev front-end não é só aquele que escreve JavaScript. Envolve muito mais. Na verdade esse é outro problema. Para mim não existe front-end, existe designer e programador. Mas deixa essa conversa para próxima.&lt;/p&gt;

&lt;h2 id=&#34;aceitação-do-grupo&#34;&gt;Aceitação do grupo&lt;/h2&gt;

&lt;p&gt;Aos poucos os front-ends foram sendo aceitos no processo e em outros meios. Essa aceitação é ótima. Existe o lado ruim sim, mas toda essa vitrine que o mercado de front-end ganhou é interessante para essa comunidade que andava pelas sombras e com vergonha de si mesmo durante anos. Esse novo ciclo é bom para aprendermos o que realmente dá resultado e como podemos formar profissionais cada vez mais importantes no processo.&lt;/p&gt;

&lt;p&gt;É importante que os devs tenham ideia do contexto geral desse mercado para que não sejam engolidos como aconteceu anos atrás, tanto na bolha, quanto no advento dos Padrões Web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Artigo originalmente &lt;a href=&#34;https://medium.com/@diegoeis/sobre-o-mercado-de-desenvolvimento-front-end-7fdd918c4206&#34;&gt;escrito no meu blog&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Palestra sobre como se tornar um dev front-end</title>
      <link>https://tableless.github.io/hugo-public/palestra-sobre-como-se-tornar-um-dev-front-end/</link>
      <pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/palestra-sobre-como-se-tornar-um-dev-front-end/</guid>
      <description>&lt;p&gt;Fiz um artigo há um tempo atrás escrevi &lt;a href=&#34;http://tableless.com.br/tornar-dev-front-end/&#34; title=&#34;Como se tornar um dev front-end&#34;&gt;um artigo sobre como se tornar um desenvolvedor front-end&lt;/a&gt;. Fiz uma palestra em Florianópolis estes dias e transformei este artigo em uma apresentação. Não deixe de ler o artigo, lá tem mais detalhes do que apenas a palestra. Veja os slides abaixo:&lt;/p&gt;

&lt;div style=&#34;margin-bottom:5px&#34;&gt;
  &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/diegoeis/como-tornardevfrontend&#34; title=&#34;O que você precisa saber para se tornar um dev front-end&#34; target=&#34;_blank&#34;&gt;O que você precisa saber para se tornar um dev front-end&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/diegoeis&#34; target=&#34;_blank&#34;&gt;Diego Eis&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Qual a dose certa de JavaScript</title>
      <link>https://tableless.github.io/hugo-public/qual-dose-certa-de-javascript/</link>
      <pubDate>Mon, 03 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/qual-dose-certa-de-javascript/</guid>
      <description>

&lt;p&gt;Para uma linguagem de programação que começou de maneira tão despretensiosa, o JavaScript ganhou muito espaço. É bem verdade que &lt;a href=&#34;http://en.wikipedia.org/wiki/Comparison_of_web_browsers#JavaScript_support&#34;&gt;alguns navegadores não dão suporte à linguagem&lt;/a&gt;, mas estes possuem propósitos particulares ou estacionaram em alguma era que não esta.&lt;/p&gt;

&lt;p&gt;O navegador Chrome deve muito da sua popularidade pela rapidez com que interpreta JavaScript e a Mozilla há pouco removeu a opção de desabilitar a linguagem no Firefox. Os fabricantes de navegadores bem sabem, querendo ou não, a internet como conhecemos tem o JavaScript como uma de suas principais dependências.&lt;/p&gt;

&lt;p&gt;O dilema é como melhor aplicar e o quanto tornar dependente nossa aplicação de código escrito em JavaScript. Qual a dose certa?&lt;/p&gt;

&lt;h2 id=&#34;manifesto&#34;&gt;Manifesto&lt;/h2&gt;

&lt;p&gt;O &lt;em&gt;The Web Standards Project&lt;/em&gt; fez bastante barulho há algum tempo e trouxe consigo o &lt;a href=&#34;http://www.webstandards.org/action/dstf/manifesto&#34;&gt;Manifesto do JavaScript&lt;/a&gt;. Segundo o texto, &lt;strong&gt;a função do JavaScript é melhorar a usabilidade das páginas através da adição de interatividade&lt;/strong&gt;. O que nos leva a algumas premissas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cliente não deve assumir o papel do servidor&lt;/strong&gt;. O JavaScript não deve ter a função de fazer uma série de requisições em Ajax e montar a página toda no front-end.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O JavaScript deve ser não obstrusivo&lt;/strong&gt;. A experiência do usuário não deve depender do correto funcionamento e suporte de JavaScript. Mesmo que perdendo usabilidade, todas as funcionalidades devem sempre estar disponíveis.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-prática&#34;&gt;A prática&lt;/h2&gt;

&lt;h3 id=&#34;performance&#34;&gt;Performance&lt;/h3&gt;

&lt;p&gt;O documento de HTML deve ser entregue para o usuário com conteúdo e o carregamento do JavaScript postergado ao máximo: para o fim do &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. A não ser que você tenha ótimos motivos (por favor, liste nos comentários), reserve a função de gerar o documento para o servidor da sua aplicação. Falando em comentários, saiba até que o carregamento assíncrono deles não é algo a se orgulhar se o motivo for unicamente limitações de infra estrutura. Em defesa a nós bloqueiros, o Disqus tem uma boa pitada de rede social e isto já nos vale como desculpa para seu uso.&lt;/p&gt;

&lt;p&gt;Voltando ao ponto, o &lt;a href=&#34;https://blog.twitter.com/2012/improving-performance-on-twittercom&#34;&gt;Twitter já aprendeu&lt;/a&gt; na própria pele que a performance no front-end está fortemente ligado a quanto do trabalho é deixado para o navegador. Sua infra pode ter várias APIs fantásticas e dignas mas a função de consolidar as informações não é do navegador do usuário.&lt;/p&gt;

&lt;p&gt;Só me deixe esclarecer um detalhe, nada contra bibliotecas e &lt;em&gt;frameworks&lt;/em&gt; JavaScript, eles são bastante úteis e devem entrar em ação assim que todo o conteúdo já tiver sido carregado. Interações mais complexas podem ter sua usabilidade aprimorada drasticamente se realizadas em uma única página com auxílio de JavaScript.&lt;/p&gt;

&lt;h3 id=&#34;javascript-não-obstrusivo&#34;&gt;JavaScript não obstrusivo&lt;/h3&gt;

&lt;p&gt;O assunto não é nenhuma novidade e caso desconheça &lt;a href=&#34;http://dev.opera.com/articles/view/the-seven-rules-of-unobtrusive-javascrip&#34;&gt;The seven rules of unobtrusive JavaScript&lt;/a&gt; é um bom começo. Sejamos práticos e vamos pegar como exemplo âncoras que removem algum registro da sua base de dados. Sem JavaScript, o clique na âncora não vai resultar em uma requisição de &lt;code&gt;DELETE&lt;/code&gt;, mas sim levar para uma representação do registro que obrigatoriamente deve conter um formulário que permita esta ação. Tudo bem se o usuário precisa navegar para outra página e dar alguns cliques a mais, mesmo com perda de usabilidade, a funcionalidade está lá e pode ser alcançada sem dependência de JavaScript. Caso não tenha compreendido o exemplo das âncoras e sua requisição, confira esta &lt;a href=&#34;http://tableless.com.br/o-grande-desencontro-http-com-o-html&#34;&gt;postagem sobre REST&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Escrever seu código de maneira que não seja obstrusivo é possível na maioria das aplicações. Mas e para aplicações de tempo real, por exemplo, como é possível? Algumas funcionalidades podem não ser possíveis sem o devido suporte computacional, não tem jeito. O que nos resta são os paliativos. Uma aplicações de tempo real pode ter uma &lt;em&gt;meta refresh&lt;/em&gt; no &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; ou um botão para atualizar, não é o ideal, mas é o mínimo.&lt;/p&gt;

&lt;p&gt;Mesmo assim, desculpa, mas não acho prático que por criar código exclusivamente não obstrusivo se deixe de fazer jogos e outras aplicações utilizando WebSockets e WebGL. Mas são poucas as aplicações que estão neste seleto grupo. Por fim, os conceitos por trás de JavaScript não obstrusivo são bastante relevantes e respeitá-los ao máximo continua sendo uma boa prática para tornar sua aplicação acessível a qualquer suporte computacional.&lt;/p&gt;

&lt;h3 id=&#34;acessibilidade&#34;&gt;Acessibilidade&lt;/h3&gt;

&lt;p&gt;A acessibilidade pode estar unicamente relacionada com a escrita de JavaScript não obstrusivo: a partir do momento que sua aplicação não depende exclusivamente de JavaScript, o conteúdo estará sempre acessível. Mas garantir  que sua aplicação esteja acessível apenas quando o JavaScript falhar, demorar para carregar (mais sobre este assunto em breve) ou simplesmente não ter o devido suporte, soa como plano B. Que tal então garantir acessibilidade também quando o JavaScript está sendo executado adequadamente?&lt;/p&gt;

&lt;p&gt;A especificação WAI-ARIA permite tornar acessíveis as tão modernas aplicações ricas. Como estamos nos preocupando com aspectos práticos, vamos a este exemplo de &lt;a href=&#34;http://getbootstrap.com/javascript/#modals&#34;&gt;_modal_ do Bootstrap&lt;/a&gt;. Repare como a &lt;em&gt;modal&lt;/em&gt; não é aberta por uma âncora e sim por um botão.  Neste exemplo, seu conteúdo não está em uma página alternativa ou seção do mesmo documento, não há razão para utilizarmos uma âncora. No elemento da &lt;em&gt;modal&lt;/em&gt;, os atributos de &lt;code&gt;role&lt;/code&gt; e &lt;code&gt;aria-hidden&lt;/code&gt; auxiliam a indicar o tipo de conteúdo e se este está disponível. A função do JavaScript aqui, além de mostrar a &lt;em&gt;modal&lt;/em&gt;, é garantir o correto valor para o atributo &lt;code&gt;aria-hidden&lt;/code&gt; e assegurar que o foco seja direcionado para o elemento da &lt;em&gt;modal&lt;/em&gt; assim que ativada.&lt;/p&gt;

&lt;p&gt;Coleções de componentes de interfaces como a jQuery UI são razoavelmente acessíveis. O calcanhar de Aquiles parece residir nas famosas _tabs._ Inclusive, existem alguns &lt;em&gt;forks&lt;/em&gt; deste _widget_ da jQuery UI tentando atingir melhores níveis de acessibilidade por manter o histórico de navegação, indicar o foco adequadamente e possibilitar melhor navegação através do teclado. Utilizar os atributos WAI-ARIA corretos nem sempre é o bastante.&lt;/p&gt;

&lt;h4 id=&#34;conteúdo-que-pode-sofrer-atualização&#34;&gt;Conteúdo que pode sofrer atualização&lt;/h4&gt;

&lt;p&gt;A especificação de boas práticas de uso de WAI-ARIA nos deixa ainda um recurso pouco comentado e, na minha opinião, de vital importância em uma aplicação rica. São atributos com a função de permitir que a aplicação seja cortês com o usuário: o atributo &lt;code&gt;aria-live&lt;/code&gt;, por exemplo, permite indicar se modificações no conteúdo do elemento devem ser notificadas ao usuário.&lt;/p&gt;

&lt;p&gt;Utilizando novamente o exemplo dos comentários, veja quanto é relevante indicar de forma acessível que novos comentários estão disponíveis. Sempre contamos com o estímulo visual que pode, por diversos motivos, não ser notado pelo usuário. Faz todo sentido em aplicações com algum tipo de comportamento assíncrono poder &lt;a href=&#34;http://www.w3.org/WAI/PF/aria-practices/#liveprops&#34;&gt;indicar quais regiões podem sofrer atualizações&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;modularização&#34;&gt;Modularização&lt;/h3&gt;

&lt;p&gt;Já escrevi por aqui que &lt;a href=&#34;http://tableless.com.br/modularizacao-em-javascript&#34;&gt;modularização nos permite reduzir a complexidade, separar interesses e manter o código de maneira simples&lt;/a&gt;. Mas ainda, digamos que sua aplicação esteja com uma grande quantidade de código a ser baixada. Caso seu código seja modularizado seguindo AMD, pacotes de módulos podem ser carregados sob demanda.&lt;/p&gt;

&lt;p&gt;Pensando em uma &lt;em&gt;single page app&lt;/em&gt; de e-mail, nem sempre que utilizar a aplicação o usuário pode querer escrever mensagens ou gerenciar as configurações. Não há necessidade em fazer o &lt;em&gt;download&lt;/em&gt; e processamento de uma grande quantidade de código responsável por funcionalidades que são de uso esporádico na sua aplicação. Algumas heurísticas interessantes podem ser utilizadas para condicionar o carregamento dos pacotes sem onerar o usuário com o mal visto &amp;#8220;carregando&amp;#8221;. Por exemplo: o usuário leu mais de duas mensagens, é provável que queira escrever alguma; o usuário aproximou o &lt;em&gt;mouse&lt;/em&gt; do botão de configurações, a ação pode estar sendo considerada.&lt;/p&gt;

&lt;h3 id=&#34;versione-o-seu-produto&#34;&gt;Versione o seu produto&lt;/h3&gt;

&lt;p&gt;Claro que a web é de todos e estamos aprendendo a possibilitar que diferentes suportes computacionais possam partilhar de um mesmo documento. Mas sejamos honestos, aplicações ricas, a despeito de todos os seus esforços, podem, por culpa da banda de internet ou capacidade de processamento, ter uma experiência miserável em alguns dispositivos.&lt;/p&gt;

&lt;p&gt;Caso não haja saída e os muitos recursos sejam o diferencial do seu produto, uma versão &lt;em&gt;fit&lt;/em&gt; da sua aplicação com uso limitado de JavaScript pode ser a solução. O Gmail já segue esta estratégia há muito tempo e até o momento não me parece uma má jogada. Nunca esqueça que o essencial é garantir uma experiência adequada para o usuário.&lt;/p&gt;

&lt;p&gt;Note ainda que esta prática não entra em desacordo com a premissa de escrever JavaScript não obstrusivo. Pelo contrário, o que estamos oferecendo é um fluxo alternativo onde as funcionalidades principais do produto estão disponíveis mesmo que com uma usabilidade mais pobre. Uma versão alternativa da aplicação pode ainda se valer da modularização do seu código e se você for bem esperto, irá reaproveitar muita coisa.&lt;/p&gt;

&lt;h2 id=&#34;palavras-finais&#34;&gt;Palavras finais&lt;/h2&gt;

&lt;p&gt;Levando em conta qualquer aplicação, saiba que é difícil avaliar pela quantidade de linhas o quão adequado é um código JavaScript. Se você compreendeu bem os exemplos e conceitos do texto, vai notar que não há nenhuma relação entre a dose certa e esta outra medida.&lt;/p&gt;

&lt;p&gt;Em uma única sentença, a &lt;strong&gt;dose certa de JavaScript é aquela em que a experiência do usuário é glorificada&lt;/strong&gt;. Isto vai depender muito dos objetivos da sua aplicação e na maneira que você escreve código. Tudo isto irá afetar a acessibilidade, usabilidade e performance.&lt;/p&gt;

&lt;p&gt;Aprenda a pensar e planejar a sua aplicação como um todo, apenas JavaScript não será sua salvação nem sua completa derrota. Saiba que as vezes a acessibilidade só pode ser alcançada com a ajuda de alguns atributos no HTML. O segredo é estudar alternativas, experimentar soluções e mensurar resultados.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wintersmith: Outro gerador de conteúdo estático</title>
      <link>https://tableless.github.io/hugo-public/wintersmith-aprendendo-outro-gerador-de-conteudo-estatico/</link>
      <pubDate>Wed, 15 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/wintersmith-aprendendo-outro-gerador-de-conteudo-estatico/</guid>
      <description>

&lt;h2 id=&#34;primeiro-o-que-são-os-geradores-de-conteúdos-estáticos&#34;&gt;Primeiro, o que são os Geradores de Conteúdos Estáticos?&lt;/h2&gt;

&lt;p&gt;Diferente de plataformas como WordPress, Joomla e etc., os geradores de conteúdo estáticos servem para criar páginas de conteúdo sem a utilização de qualquer persistência ou dependência server-side, onde ao final, você possui um pacote de arquivos html e seus companheiros (css,javascript,imagens&amp;#8230;).&lt;/p&gt;

&lt;p&gt;O Tableless tem um artigo sobre &lt;a href=&#34;http://tableless.com.br/jekyll-servindo-sites-estaticos/&#34;&gt;Jekyll&lt;/a&gt;, outro gerador de conteúdo estático. O Jekyll é usado pelo pessoal do Bootstrap.&lt;/p&gt;

&lt;h2 id=&#34;segundo-o-que-é-o-wintersmith-2&#34;&gt;Segundo, o que é o &lt;a href=&#34;http://wintersmith.io/&#34; title=&#34;Wintersmith&#34;&gt;Wintersmith&lt;/a&gt;?&lt;/h2&gt;

&lt;p&gt;O ponto de partida foi a escolha de qual gerador utilizar. Eu já possuía uma queda pelo &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt; (devido à diversos blogs que eu acompanho o utilizarem) e uma &lt;a href=&#34;https://iwantmyname.com/blog/2011/02/list-static-website-generators.html&#34;&gt;lista de 32 Geradores de Conteúdo Estáticos&lt;/a&gt;, porem, eu não queria utilizar Ruby (só não queria) e decidi procurar algo em Node.js (aproveitando a vibe), eis que surge o Wintersmith! O projeto é open-source e utiliza outros projetos open-source para criar um ambiente bem simples! Foi criado utilizando o &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; (igual ao github) como conversor de texto para HTML, &lt;a href=&#34;http://jade-lang.com&#34;&gt;Jade&lt;/a&gt; para criação de templates e &lt;a href=&#34;http://coffeescript.org/&#34;&gt;Coffescript&lt;/a&gt; para os plugins (muita coisa legal para aprender)!&lt;/p&gt;

&lt;p&gt;Agora, chega de conversa e mão na massa (lembrando que ao final tem um link para você baixar todo o código do resultado).&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-wintersmith&#34;&gt;Instalando o Wintersmith&lt;/h2&gt;

&lt;p&gt;Neste artigo eu vou adotar como precedência que você já tenha o Node.js instalado e saiba do que se trata o &lt;a href=&#34;https://npmjs.org/&#34;&gt;npm&lt;/a&gt;, mas nada impede de aprendermos mais sobre eles em um outro momento; Segue o comando de instalação:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install wintersmith -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;criando-o-projeto&#34;&gt;Criando o projeto&lt;/h2&gt;

&lt;p&gt;Estando com o pacote instalado, basta criar o seu projeto na pasta que desejar.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wintersmith new
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O template padrão do projeto é o de blog (existem também basic e webapp), o que atende bem à minha necessidade, mas você pode criar outros. Junto com a estrutura de arquivos, o Wintersmith já criará um conjunto de artigos bem explicativos que mostram o potencial da ferramenta, para visualizar como está o seu projeto, basta coloca-lo em peview:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wintersmith preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ai pronto! Você já pode acessar &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; e ver o que está criado (Vale lembrar que enquanto estiver visualizando, qualquer alteração é refletida na pré-visualização sem a necessidade de executar o comando novamente).&lt;/p&gt;

&lt;h2 id=&#34;personalizando-o-blog&#34;&gt;Personalizando o blog&lt;/h2&gt;

&lt;p&gt;Como a estrutura criada pelo projeto já é bem próxima à de um blog bem enxuto, precisei apenas fazer algumas mudanças de parametros, alterar os autores (dos artigos, claro!) e criar um template jade para os comentários (utilizando [Disqus][12]).&lt;/p&gt;

&lt;p&gt;Na raiz do projeto existe um arquivo chamado config.json e o padrão dele é:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;locals&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;http://localhost:8080&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;The Wintersmith&#39;s blog&amp;quot;,
    &amp;quot;owner&amp;quot;: &amp;quot;Someone&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Ramblings of an immor(t)al demigod&amp;quot;
  },
  &amp;quot;plugins&amp;quot;: [&amp;quot;./plugins/paginator.coffee&amp;quot;],
  &amp;quot;require&amp;quot;: {
    &amp;quot;moment&amp;quot;: &amp;quot;moment&amp;quot;,
    &amp;quot;_&amp;quot;: &amp;quot;underscore&amp;quot;,
    &amp;quot;typogr&amp;quot;: &amp;quot;typogr&amp;quot;
  },
  &amp;quot;jade&amp;quot;: {
    &amp;quot;pretty&amp;quot;: true
  },
  &amp;quot;markdown&amp;quot;: {
    &amp;quot;smartLists&amp;quot;: true,
    &amp;quot;smartypants&amp;quot;: true
  },
  &amp;quot;paginator&amp;quot;: {
    &amp;quot;perPage&amp;quot;: 3
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E após as minhas alterações, eu o deixei assim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;locals&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;http://oqueaprendihoje.com.br&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;O Que Aprendi Hoje&amp;quot;,
    &amp;quot;owner&amp;quot;: &amp;quot;João Felix&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;A saga de um aprendiz encantado com o universo do Front-end&amp;quot;,
    &amp;quot;keywords&amp;quot; : [&amp;quot;javascript&amp;quot;,&amp;quot;css&amp;quot;,&amp;quot;front-end&amp;quot;,&amp;quot;web&amp;quot;,&amp;quot;development&amp;quot;],
    &amp;quot;disqus&amp;quot;: {
      &amp;quot;id&amp;quot; : &amp;quot;oqueaprendihoje&amp;quot;
    }
  },
  &amp;quot;plugins&amp;quot;: [&amp;quot;./plugins/paginator.coffee&amp;quot;],
  &amp;quot;require&amp;quot;: {
    &amp;quot;moment&amp;quot;: &amp;quot;moment&amp;quot;,
    &amp;quot;_&amp;quot;: &amp;quot;underscore&amp;quot;,
    &amp;quot;typogr&amp;quot;: &amp;quot;typogr&amp;quot;
  },
  &amp;quot;jade&amp;quot;: {
    &amp;quot;pretty&amp;quot;: true
  },
  &amp;quot;markdown&amp;quot;: {
    &amp;quot;smartLists&amp;quot;: true,
    &amp;quot;smartypants&amp;quot;: true
  },
  &amp;quot;paginator&amp;quot;: {
    &amp;quot;perPage&amp;quot;: 10
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basicamente alterei as propriedades do blog, como nome, proprietário, descrição e palavras-chaves, alem de alterar o número de paginas e inserir o objeto &amp;#8220;disqus&amp;#8221; para utilizarmos no controle de comentários; Vale ressaltar que o objeto &amp;#8220;locals&amp;#8221; fica acessivel aos templates também.&lt;/p&gt;

&lt;p&gt;Outra alteração necessária foi a criação de um autor, para isso, removi os autores padrões e adicionei o meu na pasta &amp;#8220;contents/authors&amp;#8221;; O identificador de autor no artigo é o nome do arquivo e o conteúdo é um objeto JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;João Felix&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;jr8116[at]gmail[dot]com&amp;quot;,
  &amp;quot;bio&amp;quot;: &amp;quot;Aprendiz, desenvolvedor e empreendedor!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;comentários-nos-artigos&#34;&gt;Comentários nos artigos&lt;/h2&gt;

&lt;p&gt;Todo blog que se preze, precisa aceitar comentários. Para isso, utilizei a solução Disqus, que me permite apenas pela referência do utilizador e da página atual, disponibilizar para os usuários uma forma de comentar os artigos.&lt;/p&gt;

&lt;p&gt;Para manter o padrão de organização do projeto, eu criei um template jade chamado &amp;#8216;disqus.jade&amp;#8221; e o coloquei na pasta &amp;#8220;templates&amp;#8221; (Também o dinamizei para utilizar o id do objeto disqus que determinamos); Este arquivo nada mais é do que a transposição do código fornecido pelo Disqus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;disqus_thread&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; 
  var disqus_shortname = &#39;oqueaprendihoje&#39;; (function() { var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true; dsq.src = &#39;//&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;; (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq); })(); 
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&amp;quot;http://disqus.com/?ref_noscript&amp;quot;&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt; 
&amp;lt;a href=&amp;quot;http://disqus.com&amp;quot; class=&amp;quot;dsq-brlink&amp;quot;&amp;gt;comments powered by &amp;lt;span class=&amp;quot;logo-disqus&amp;quot;&amp;gt;Disqus&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para o padrão de escrita Jade:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div(id=&amp;quot;disqus_thread&amp;quot;)
script.
  var disqus_shortname = &amp;quot;#{disqus.id}&amp;quot;;
  (function() {
    var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true;
    dsq.src = &#39;//&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;;
    (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
  })();
noscript
  Habilite o Javascript do seu browser para ver os
  a(href=&amp;quot;http://disqus.com/?ref_noscript&amp;quot;) comentários mantidos pelo Disqus.
a.dsq-brlink(href=&amp;quot;http://disqus.com&amp;quot;)
  comments powered by
  span.logo-disqus
    Disqus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Com o template pronto, basta inclui-lo no template &amp;#8220;article.jade&amp;#8221; que também está no diretório &amp;#8220;templates&amp;#8221;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include disqus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resultado final do template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extends layout

block append vars
  - bodyclass = &#39;article-detail&#39;

block prepend title
  | #{ page.title + &amp;quot; - &amp;quot;}

block header
  include author
  h1= page.title
  p.author
    | #{ &amp;quot;Escrito por &amp;quot; }
    mixin author(page.metadata.author)

block content
  article.article
    section.content!= typogr(page.html).typogrify()

block prepend footer
  include disqus
  div.nav
    a(href=contents.index.url) « Lista
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Também fiz algumas alterações por menores, como: Exibir o Twitter e não o E-mail do autor, links para compartilhamento utilizando o Addthis, inserção do Google Analytics e tradução dos links de avançar, ver mais e etc. que estão disponíveis no código fonte do blog.&lt;/p&gt;

&lt;h2 id=&#34;publicando&#34;&gt;Publicando&lt;/h2&gt;

&lt;p&gt;Pronto! Nossa estrutura de blog está criada! Agora falta apenas gerar os arquivos finais para a publicação, que estarão disponíveis na pasta &amp;#8220;build&amp;#8221;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wintersmith build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;acabamos&#34;&gt;Acabamos!&lt;/h2&gt;

&lt;p&gt;Neste momento, temos um blog pronto, porem, sem customização e apenas com o layout padrão do Wintersmith.  Espero que tenham gostado.&lt;/p&gt;

&lt;p&gt;Todo o código está disponível no Github e no site: &lt;a href=&#34;https://github.com/jr8116/oqueaprendihoje&#34;&gt;https://github.com/jr8116/oqueaprendihoje&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como se tornar um dev front-end</title>
      <link>https://tableless.github.io/hugo-public/tornar-dev-front-end/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tornar-dev-front-end/</guid>
      <description>

&lt;p&gt;Esse artigo inspirou um livro, mais completo, com mais assuntos e detalhes. Olha só: &lt;a href=&#34;https://www.casadocodigo.com.br/products/livro-guia-frontend&#34;&gt;Guia Front-end&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Estava navegando por aí e acabei encontrando um artigo bem legal do &lt;a href=&#34;http://leandrooriente.com/como-me-tornar-um-desenvolvedor-front-end/&#34;&gt;Leandro Oriente&lt;/a&gt;, que fala sobre um assunto muito interessante e que sempre me perguntam por aí. Decidi então escrever minha versão do artigo, colocando meus pontos de vista sobre como se tornar um desenvolvedor front-end.&lt;/p&gt;

&lt;p&gt;Entrar na área de front-end é algo muito fácil. Você não precisa ter habilidades técnicas muito avançadas. É por isso que durante muito tempo o mercado andou saturado e muito, muito prostituído por gente que entregava trabalhos sem qualidade e que cobravam barato demais. Hoje o mercado está aquecido. É muito difícil encontrar um dev Front-end dando sopa por aí.&lt;/p&gt;

&lt;p&gt;Eu não organizei os tópicos abaixo em ordem de dificuldade, mas dividi os assuntos na ordem que eu acho, particularmente, mais importante você aprender para atuar no mercado de trabalho. Portanto esqueça o nível de dificuldade.&lt;/p&gt;

&lt;p&gt;O objetivo aqui é que pelo menos você conheça o caminho das pedras e tenha um checklist com assuntos mais importantes para estudar e pesquisar.&lt;/p&gt;

&lt;h2 id=&#34;editores-de-código&#34;&gt;Editores de código&lt;/h2&gt;

&lt;p&gt;Não use editores WYSIWYG. Dizendo com todas as palavras: fique longe de coisas como o Dreamweaver.&lt;/p&gt;

&lt;p&gt;O Dreamweaver é um símbolo. Qualquer editor ou ferramenta que vire uma muleta para o dev é algo ruim. Você precisa digitar e entender de cabo a rabo o significado do código escrito. Se você tem uma ferramenta que faz tudo sozinha, você não é um desenvolvedor, você é apenas um operador de software.&lt;/p&gt;

&lt;p&gt;Por isso procure aprender a digitar código na mão sempre. Se você está começando e tem algum editor como o &lt;a href=&#34;http://sublimetext.com&#34;&gt;Sublime Text&lt;/a&gt;, que fica auto-completando tudo o que você escreve, desabilite essa função, pelo menos por enquanto. Isso vai te obrigar a pesquisar, a procurar a resposta, vai te forçar a lembrar daquele negócio que você esqueceu. Isso vai te fazer pensar.&lt;/p&gt;

&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;HTML é parte essencial da web. Sem HTML a web não existe. Por isso, aprenda HTML e todo o seu contexto de semântica e organização de informação. Não fique preso a versões do HTML, como: &amp;#8220;Hoje vou aprender HTML5&amp;#8221;. Esquece, esse negócio de versões. Você vai aprender HTML.&lt;/p&gt;

&lt;h2 id=&#34;css&#34;&gt;CSS&lt;/h2&gt;

&lt;p&gt;Eu li não sei aonde e não consegui encontrar o link, mas um dos ban-ban-bans gringos disse mais ou menos assim: &amp;#8220;você leva algumas horas para aprender CSS, mas uma vida para se tornar um mestre.&amp;#8221;&lt;/p&gt;

&lt;p&gt;CSS é simples. A maioria das propriedades você vai acabar decorando. Na verdade você não vai usar mais do que umas 15 propriedades todos os dias. É fácil encontrar algum lugar que explique o que é CSS e que lista todas as suas propriedades. Na pior das hipóteses sempre existe a &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34;&gt;documentação do W3C para consulta&lt;/a&gt;. O importante é que você precisa aprender algo novo de CSS todos os dias. Não importa o que, não importa como, mas você precisa aprender um truque, uma nova propriedade, uma novidade que só vai se popularizar dali alguns anos…&lt;/p&gt;

&lt;h2 id=&#34;esqueça-o-ftp-e-aprenda-um-controle-de-versão&#34;&gt;Esqueça o FTP e aprenda um controle de versão&lt;/h2&gt;

&lt;p&gt;Eu não sei quantas vezes eu ouvi de devs que não usavam o Sublime Text por que não tinha FTP acoplado (!). Deixa eu dizer uma coisa e vou ser bem duro: Se você ainda edita seu código usando FTP, você é júnior. Se você baixa o arquivo pro seu computador, edita e depois sobe pro FTP, você é Júnior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O Dreamweaver é um símbolo. Qualquer editor ou ferramenta que vire uma muleta para o dev é algo ruim.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Um desenvolvedor que se preze aprende um controle de versão. Se você não sabe o que é um controle de versão veja &lt;a href=&#34;http://tableless.com.br/introducao-das-premissas-dos-controles-de-versao/&#34;&gt;este&lt;/a&gt;, &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;este&lt;/a&gt; e &lt;a href=&#34;http://campus.tableless.com.br/2012/10/controle-de-versão-com-git/&#34;&gt;este&lt;/a&gt; link. Não é nada difícil e isso vai te salvar a vida.&lt;/p&gt;

&lt;p&gt;Controlar seu código fonte deve ser uma premissa. Um princípio. Se você acha que o undo do seu editor predileto salva sua vida, imagina ter um undo do seu projeto inteiro. Imagine ter o histórico de edição de cada um dos arquivos do seu projeto.&lt;/p&gt;

&lt;p&gt;Usar um controle de versão, como o &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;GIT&lt;/a&gt;, é pré-requisito para trabalhar em qualquer grande empresa. Algumas usam SVN, mas se você aprender a usar um deles, vai ser fácil aprender a usar o outro.&lt;/p&gt;

&lt;p&gt;Imagine você não precisar passar horas no FTP para atualizar código, arquivos e etc. Imagine com 1 comando, você clonar seu projeto inteirinho para o servidor, exatamente do jeito que você deixou. Nada de ficar se matando por que o FTP travou, por que a conexão perdeu pacotes, por que o servidor matou a conexão, nenhum destes problemas fará mais parte da sua vida.&lt;/p&gt;

&lt;h2 id=&#34;o-básico-do-terminal&#34;&gt;O básico do terminal&lt;/h2&gt;

&lt;p&gt;Se você vai aprender GIT ou qualquer outro controle de versão, você vai precisar mexer um pouquinho no terminal. Claro, existem programas cheio de botões que facilitam as principais tarefas, mas se você tiver que atualizar o projeto direto no servidor, não tem jeito, vai precisar usar o terminal para atualizar o projeto lá.&lt;/p&gt;

&lt;p&gt;Outro motivo é que dependendo do projeto que você se envolver, principalmente se for em Ruby, Python e coisas desse tipo, você vai precisar aprender a iniciar o projeto, parar o projeto, atualizar as dependências e algumas outras tarefas recorrentes via terminal.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Um desenvolvedor que se preze aprende um controle de versão.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sem falar que uma série de ferramentas essenciais para os devs front-end como &lt;a href=&#34;http://tableless.com.br/grunt-voce-deveria-estar-usando/&#34;&gt;Grunt&lt;/a&gt;, &lt;a href=&#34;http://simplesideias.com.br/gerenciando-dependencias-client-side-com-bower&#34;&gt;Bower&lt;/a&gt;, &lt;a href=&#34;http://yeoman.io&#34;&gt;Yeoman&lt;/a&gt;, &lt;a href=&#34;http://middlemanapp.com&#34;&gt;Middleman&lt;/a&gt;, &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt; e etc, são feitos em Ruby e você vai precisar usar o terminal para fazer a mágica acontecer.&lt;/p&gt;

&lt;h2 id=&#34;acessibilidade&#34;&gt;Acessibilidade&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://brunotorres.net/acessibilidade-nao-e-altruismo&#34;&gt;Acessibilidade não é altruísmo&lt;/a&gt;. Você não faz um site acessível por que você está com pena de alguém cego ou por que não tem os dois braços. Você faz um site acessível por que você precisa que seu site seja visto por TODOS. É a mesma coisa se você não fizer um site responsivo hoje em dia. Como assim seu site não consegue ser bem visto via mobile?&lt;/p&gt;

&lt;p&gt;Acessibilidade é algo que ainda está engatinhando aqui no Brasil, mas algo me diz que não demora muito e esse assunto vai cair na boca do povo, vai virar moda e aí todo mundo vai passar a fazer pra não ficar de fora do grupinho. Por isso, seja pioneiro e comece fazendo desde o princípio em seus projetos.&lt;/p&gt;

&lt;p&gt;Veja aqui uma pequena &lt;a href=&#34;http://tableless.com.br/slides-para-devs-9-acessibilidade-na-web/&#34;&gt;seleção de slides de palestras sobre acessibilidade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nós temos uma &lt;a href=&#34;http://tableless.com.br/categoria/acessibilidade-2/&#34;&gt;categoria sobre acessibilidade&lt;/a&gt; aqui no Tableless. Dá uma sapeada por lá.&lt;/p&gt;

&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;

&lt;p&gt;O Leandro Oriente &lt;a href=&#34;http://leandrooriente.com/como-me-tornar-um-desenvolvedor-front-end/&#34;&gt;falou no seu artigo&lt;/a&gt; que ter uma base sólida em Javascript é um requisito essencial. É uma das únicas partes que me diferencio do artigo dele.&lt;/p&gt;

&lt;p&gt;Javascript tem que saber sim, não estou dizendo o contrário. Mas se você sentir que não tem o menor dom (sem trocadilhos) para isso, não fique preocupado, você não precisa ser alguém avançado em Javascript para ser um bom front-end. Mas precisa entender o básico e principalmente as boas práticas. Mas se você quiser se destacar da média, e ser um ÓTIMO MOTHER-FUCKER front-end, vai ter que aprender muito, muito bem essa linguagem.&lt;/p&gt;

&lt;p&gt;Geralmente existem dois tipos de front-ends: aqueles que ficam mais pro lado do design e outro grupo que fica mais do lado da programação. Geralmente, quem está mais perto do design tem mais dificuldades para assuntos ligados à programação. Se você for um desses, não se preocupe. Entenda qual o seu perfil, saiba no que você é forte e foque-se em melhorar sua fraqueza. Se for em Javascript, tente concentrar mais as suas forças para começar a aprender bem essa linguagem.&lt;/p&gt;

&lt;p&gt;Para ficar claro: todo o dev front-end precisa saber pelo menos o básico de Javascript. Você vai usá-lo sempre. Por outro lado, nem todos precisam saber o que é Node, Backbone, Ember e etc&amp;#8230; Dependendo do lugar que você trabalhar, por exemplo em agências, você só precisa saber o básico/intermediário de Javascript. Agora, se você for para algum lugar que produz seus próprios produtos, muito provavelmente você vai precisar ser rato nessas tecnologias.&lt;/p&gt;

&lt;h3 id=&#34;jquery&#34;&gt;JQuery&lt;/h3&gt;

&lt;p&gt;JQuery não é Javascript. Pelamordedeus. JQuery é uma biblioteca que abstrai a liguagem original, tornando muito mais fácil seu controle.&lt;/p&gt;

&lt;p&gt;Você precisa saber pelo menos o básico de Javascript para começar a aprender JQuery. Isso é importante!&lt;/p&gt;

&lt;p&gt;Mesmo assim o JQuery é a biblioteca Javascript mais usada no mundo todo. Você precisa dele para rodar plugins que usamos todos os dias, para rodar outros frameworks como o Bootstrap, por exemplo. JQuery é requisito básico em algumas empresas.&lt;/p&gt;

&lt;h2 id=&#34;performance&#34;&gt;Performance&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.yahoo.com/blogs/ydn/high-performance-sites-importance-front-end-performance-7160.html&#34;&gt;80% da performance de um website está do lado do client-side&lt;/a&gt;. Client-side também é responsável pro 90% da performance de um site mobile.&lt;/p&gt;

&lt;p&gt;Você prejudica a performance se escreve um javascript ruim, se usa muitas imagens, se você não minifica seu código, se você não serve bem seus assets e uma série de outros pontos.&lt;/p&gt;

&lt;p&gt;O Google tem um site que mostra muitos destes pontos e te ajuda a melhorar a performance do seu código. &lt;a href=&#34;https://developers.google.com/speed/pagespeed/&#34;&gt;Dá uma olhada&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Já falamos sobre performance &lt;a href=&#34;http://tableless.com.br/performance-frontend-parte1/&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://tableless.com.br/performance-frontend-parte2/&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;seo&#34;&gt;SEO&lt;/h2&gt;

&lt;p&gt;Ao contrário do que muitos acham, SEO não é feito por apenas uma iniciativa, mas várias. Não adianta nada você escrever um texto cheio de palavras chaves e a estrutura do HTML não ser semântica. Ou você ter um ótimo código HTML, mas fazer seu menu em flash (ok, eu abusei, ninguém faz mais menus em flash).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Todo o dev front-end precisa saber pelo menos o básico de Javascript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SEO é um trabalho que você precisa ter em várias frentes. É necessário usar as tags corretas, melhorar a performance, medir a prioridade dos links na página e várias outras coisas. O responsável por isso é o dev front-end. Não se preocupe, pesquisa de palavras chaves, relevância do texto e qualquer coisa ligada ao conteúdo não são de sua responsabilidade. Você precisa fazer com que o conteúdo seja &amp;#8220;encontrável&amp;#8221; e principalmente seja fácil dos sistemas de busca consumirem esse conteúdo por meio de um bom código client-side.&lt;/p&gt;

&lt;h2 id=&#34;wordpress&#34;&gt;WordPress&lt;/h2&gt;

&lt;p&gt;Falo para aprender WordPress por que é o mais badalado. Você pode aprender Joomla! ou Drupal, não tem problema. Mas não tem como, o WordPress é o CMS mais usado no mundo. E pessoalmente eu acho muito melhor que os outros dois.&lt;/p&gt;

&lt;p&gt;A boa notícia é que você não precisa aprender PHP para fazer websites em WordPress. Ele está tão maduro que você consegue fazer sites relativamente complexos usando sem muitos problemas as funções que o WordPress dispõe. Se você é um freelancer, é interessante saber WordPress para poder vender o pacotinho &amp;#8220;código client-side + wordpress&amp;#8221;.&lt;/p&gt;

&lt;h2 id=&#34;pré-processadores&#34;&gt;Pré-processadores&lt;/h2&gt;

&lt;p&gt;Aprenda algum pré-processador. Eu, particularmente, &lt;a href=&#34;http://tableless.com.br/pre-processadores-usar-ou-nao-usar/&#34;&gt;não gosto muito&lt;/a&gt;. Mas eu uso bastante. E algumas grandes empresas os pré-processadores facilitam a manutenção do código CSS e o deixam escalável. O SASS é o mais utilizado. LESS é o segundo. Para se ter uma ideia LESS é usado pelo pessoal que faz o framework &lt;a href=&#34;http://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Não importa qual pré-processador você decida usar, mas entenda que você precisa saber exatamente como eles geram o código final. Se um pré-processador for mal usado, ele pode acabar com o seu projeto. &lt;a href=&#34;http://tableless.com.br/pre-processadores-usar-ou-nao-usar/&#34;&gt;Eu ecrevi algo sobre isso aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;manipulação-de-json-e-etc&#34;&gt;Manipulação de JSon e etc&lt;/h2&gt;

&lt;p&gt;Em algumas empresas programadores back-end não encostam no front-end. Eles não editam o HTML, nem tão pouco o Javascript. Isso acontece por que ele passa mais tempo construindo e melhorando uma API do que qualquer outra tarefa. O dev front-end por sua vez consome essa API e então começa a popular as páginas com as informações encontradas nela. Suponha que você precise fazer uma listagem em uma determinada página do projeto. As informações serão requisitadas via Javascript, que consumirá um JSon, promovido pela API. Neste JSon haverá todas as informações que você precisa exibir na página. O resto é definir o HTML e formatar com CSS. As informações virão do Javascript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Acessibilidade não é altruísmo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.devmedia.com.br/revista-front-end-magazine&#34;&gt;Para você ser um front-end top de linha&lt;/a&gt;, entender essa dinâmica é essencial. Esse tópico ficou por último por que não é algo trivial. Você precisa entender muito bem sobre boas práticas de escrita e de código e performance. Você também consegue sobreviver em muitas empresas sem ter essa skill. Normalmente isso é necessário em empresas que trabalham com sistemas. Quase nunca uma agência web terá uma necessidade assim.&lt;/p&gt;

&lt;h2 id=&#34;estude-a-teoria&#34;&gt;Estude a teoria&lt;/h2&gt;

&lt;p&gt;Nunca, nunca comece pela parte prática. Eu sei que praticar e colocar a mão na massa é a parte mais esperada por qualquer pessoa que está começando na área. Mas acredite em mim: se você quer ser um front-end acima da média, procure entender o &amp;#8220;por que&amp;#8221; das coisas.&lt;/p&gt;

&lt;p&gt;Não basta sentar, abrir um PSD e começar escrever HTML. Há uma série de conceitos que vão te ajudar a escrever código acessível, escalável e semântico. Tem que saber que seu código vai ser consumido muitas vezes por robôs de busca, leitores de tela, browsers, scripts e etc. É responsabilidade sua entender que HTML é tudo sobre organizar e dar significado à informação.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;Você pode saber todos estes assuntos ou apenas alguns, não importa, você sempre terá mais informações para aprender. Existem uma série de outros assuntos que eu não abordei como por exemplo aprender Jekyll ou Middleman, entender como se usa o Grunt, RequireJS, Yeoman, Bower e etc. O artigo iria ficar gigantesco e você ficaria assustado. Por isso, eu estou escrevendo um livro que poderá te ajudar nesses assuntos todos. 🙂&lt;/p&gt;

&lt;p&gt;Esse é o universo que os devs front-ends devem enfrentar.&lt;/p&gt;

&lt;p&gt;Mais do mesmo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/&#34;&gt;A baseline fro front-end developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://leandrooriente.com/como-me-tornar-um-desenvolvedor-front-end/&#34;&gt;Como se tornar um desenvolvedor front-end&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tableless Conference 2 – versão 2013</title>
      <link>https://tableless.github.io/hugo-public/tableless-conference-2-versao-2013/</link>
      <pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tableless-conference-2-versao-2013/</guid>
      <description>

&lt;p&gt;O desenvolvimento front-end está na moda. Isso pode ser bom e ruim ao mesmo tempo. O Tableless Conference deste ano vai abordar assuntos pertinentes a design, UX e desenvolvimento móvel. Também falaremos sobre comportamento e como deve ser suas atitudes em um mercado onde nem Back-ends nem Designers sabem lidar com profissionais de front-end. Vai ser interessante para que você entenda melhor como se encaixar na equipe de forma que você seja um agente de mudança.&lt;/p&gt;

&lt;p&gt;UX, Design e Comportamento. Três assuntos importantes e essenciais que estão muito em foco. Neste evento vamos tentar misturar os três assuntos em diversas palestras de forma que você saia de lá melhor. No &lt;a href=&#34;http://tableless.com.br/tablelessconf/&#34;&gt;Tableless Conference&lt;/a&gt; deste ano você ouvirá sobre &lt;strong&gt;Firefox OS&lt;/strong&gt; com o &lt;a href=&#34;http://twitter.com/clauberhalic/&#34;&gt;Clauber Stipkovic&lt;/a&gt;, sobre as &lt;strong&gt;premissas de um desenvolviment mobile inteligente&lt;/strong&gt; com o &lt;a href=&#34;http://twitter.com/horaciosoares/&#34;&gt;Horácio Soares&lt;/a&gt; (pesquisador na Acesso Digital), vai conhecer sobre a &lt;strong&gt;biblioteca de comportamento BBUI.js&lt;/strong&gt; com o &lt;a href=&#34;http://twitter.com/fellyph/&#34;&gt;﻿﻿Fellyph Cintra&lt;/a&gt; (front-end na UOL), sobre o &lt;strong&gt;papel do Front-End na Experiência do Usuário&lt;/strong&gt; com o &lt;a href=&#34;http://twitter.com/eduagni/&#34;&gt;Edu Agni&lt;/a&gt; (designer no iMasters), sobre &lt;strong&gt;padrões web, HTML5, Javascript e etc&lt;/strong&gt; com o &lt;a href=&#34;http://twitter.com/bernarddeluna/&#34;&gt;Bernard de Luna&lt;/a&gt; e alguns outros assuntos comigo e outros palestrantes. Queremos transformar você em um profissional melhor. Em um profissional insubstituível.&lt;/p&gt;

&lt;p&gt;Se você não foi ao evento passado, não chore, &lt;a href=&#34;http://www.flickr.com//photos/diegoeis/sets/72157631273481758/show/&#34;&gt;veja essas fotos&lt;/a&gt;. Não fique boiando e garanta a &lt;a href=&#34;http://tableless.com.br/tablelessconf/&#34; title=&#34;TablelessConf&#34;&gt;sua vaga para este ano&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;os-primeiros-30-tem-desconto-h2&#34;&gt;Os primeiros 30 tem desconto&lt;/h2&gt;&lt;/h3&gt;

&lt;p&gt;Os primeiros sortudos que comprarem os ingressos terão cinquenta reais de desconto, pagando R$200! Por isso corra e garanta seu lugar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Front-end, UX e Back-end</title>
      <link>https://tableless.github.io/hugo-public/front-end-ux-e-back-end/</link>
      <pubDate>Wed, 16 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/front-end-ux-e-back-end/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“One of the reasons for poor design execution is that UX teams need to own more than just design. We need to own front-end development.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Frase sensacional &lt;a href=&#34;http://www.uxmatters.com/mt/archives/2012/04/great-user-experiences-require-great-front-end-development.php&#34;&gt;em um artigo do site UXMatters&lt;/a&gt;, um dos melhores sites sobre experiência do usuário e arquitetura de informação que tenho nas minhas leituras regulares.&lt;/p&gt;

&lt;p&gt;Os designers para web precisam muito aprender a linguagem com que seus layouts serão codificados. Na minha opinião é estranho um designer para web não entender HTML e CSS, pelo menos o básico, o suficiente. Mesmo que ele não vá digitar código todos os dias. Conhecer essas linguagens é tão necessário quanto Photoshop ou Illustrator.&lt;/p&gt;

&lt;p&gt;Os melhores desenvolvedores front-end, que prezam pelo layout bonito e bem afinado pensam e falam usando linguagens de design e UX. Claro que HTML, CSS e Javascript são linguagens técnicas, mas elas estão muito mais perto do lado de Design e experiência do usuário do que programação pesada de back. O Javascript, talvez, é o que se aproxima da área mais hardcore do back-end, mas isso só quando falamos em consumir APIs, usar JS no lado do servidor e etc. Javascript é o tempo inteiro usado também para tratar experiências e comportamentos para o usuário.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O front-end faz a integração do projeto, fazendo as amarrações necessárias para que o sistema seja funcional e usável.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A maioria dos programadores back-end não conhecem front-end por não enxergarem isso como uma forma de melhorar suas skills. Normalmente alguns programadores não gostam de front por acharem muito próximo de UX. Coisa designer, sabe? Enquanto isso o pessoal da área de UX não se aproxima de front-end por acharem que é coisa de programador. É simples, mas é uma verdade. Ambos acabam atrofiando as possibilidades de melhorarem muito seus conhecimentos dentro das suas áreas.&lt;/p&gt;

&lt;p&gt;Os desenvolvedores front-end trabalham no meio desses dois profissionais completamente diferentes e muitos se arriscam em um dos dois lados. Há os front-ends designers, que sabem o que é bonito e feio, entendem de grid, alinhamento, cores e etc. Podem não arriscar a criar um layout, mas entendem do assunto. Há também o front-end programador, que talvez até conheça uma linguagem back-end e manja o básico de algumas outras. Não faz um sistema complexo todos os dias, mas é um contribuir fervoroso nos projetos em que trabalha. Ambos são especialistas em front-end, com focos totalmente diferentes. Outro ponto que os destacam é que eles não ignoram as skills de cada área, mesmo não fazendo parte do seu core. E nem podem deixar que isso aconteça, eles perderiam muitos pontos de experiência.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quando os times de UX entendem a importância do front-end, eles entregam não apenas representações visuais dos projetos, mas também experiências que realmente valham a pena.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Os front-ends trabalham muito melhor suas skills quando eles entendem em qual dos lados eles tem mais facilidade. Se você é front-end e acha design interessante, busque mais conhecimento nessa área. Se puder, sente-se ao lado dos designers na sua equipe. Se você acha que programação server-side é sua praia, sente-se ao lado dos programadores. Entenda como eles fazem a integração da linguagem server-side no código client-side gerado por você. Estude maneiras de como o client pode consumir informação do back.&lt;/p&gt;

&lt;p&gt;Apenas assim front-ends irão produzir códigos mais robustos e escaláveis, pensando na experiência do usuário e em formas de consumir e reutilizar informações mais eficientemente.&lt;/p&gt;

&lt;p&gt;Quando os times de UX entendem a importância do front-end, eles entregam não apenas representações visuais dos projetos, mas podem entregar experiências que realmente valham a pena. Isso é ultrapassar aquela barreira do “é possível ou não é possível de fazer”. Isso diminui custos. Todo o resultado é mais correto. Um UX que entrega um protótipo funcional em HTML e CSS vale seu peso em ouro. É importante por que esse tipo de atitude concretiza ideias enquanto o projeto ainda é imaturo.&lt;/p&gt;

&lt;p&gt;Entender sobre os processos é importante para qualquer um dentro da equipe. Entender as limitações e saber quais os impactos que cada decisão, por mínima que seja, desencadeia no projeto é algo que só se conhece quando você procura saber mais do que acontece ao seu redor. E eu não estou dizendo para você ser um profissional canivete, longe disso. Mas trabalhar em equipe envolve muito mais do que conversas nos dailys da vida.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eventos Front-end que você não pode perder em 2012 – parte 2</title>
      <link>https://tableless.github.io/hugo-public/eventos-front-end-que-voce-nao-pode-perder-em-2012-parte-2/</link>
      <pubDate>Mon, 22 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/eventos-front-end-que-voce-nao-pode-perder-em-2012-parte-2/</guid>
      <description>

&lt;p&gt;O ano de 2012 foi um dos mais &amp;#8220;recheados&amp;#8221; de eventos para desenvolvedores front-end e o destaque fica por conta das franquias regionais que vêm surgindo fora dos eixos das capitais como forma de atender a demandas locais. Quem mora nas cidades do interior, independente do estado, percebe que, muitas vezes, para comparecer a grandes eventos, é preciso se deslocar a cidades maiores, o que nem sempre é possível por questões de tempo e custo. Estamos vendo uma mudança neste cenário. A intenção é fazer com que o conhecimento se dissipe dos pólos metropolitanos e chegue com a mesma força em várias regiões. Além disso, traz possibilidade de maior integração entre a comunidade de desenvolvedores.&lt;/p&gt;

&lt;p&gt;A quantidade de eventos tem sido tão grande, que há alguns meses o Tableless criou o &lt;a href=&#34;http://tableless.com.br/eventos/&#34; title=&#34;Brasil Web Dev&#34;&gt;Brasil Web Dev&lt;/a&gt;, um site específico para a divulgação das conferências que acontecem por este Brasilzão.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&#34;http://tableless.com.br/eventos-front-end-que-voce-nao-pode-perder-em-2012/&#34; title=&#34;Eventos Front-end que você não pode perder em 2012&#34;&gt;Zeno Rocha divulgou em maio uma lista dos eventos&lt;/a&gt; de desenvolvimento web que estavam para acontecer. De lá para cá, outras conferências ganharam forma e vêm para prestigiar grandes pólos de profissionais web em diferentes regiões. Grande parte segue o modelo de franquia dos bem sucedidos eventos &amp;#8220;FrontIn&lt;Cidade&gt;&amp;#8221;, como foi o caso do &lt;a href=&#34;http://frontinmaringa.com.br/&#34; title=&#34;FrontIn Maringá&#34;&gt;FrontIn Maringá&lt;/a&gt; que aconteceu recentemente, sendo o terceiro FrontIn paranaense organizado pelo &lt;a href=&#34;http://www.avadora.com.br/&#34; title=&#34;Grupo Avadora&#34;&gt;Grupo Avadora&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;frontin-maceió&#34;&gt;FrontIn Maceió&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.frontinmaceio.com.br&#34; title=&#34;FrontIn Maceió&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-7154&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/10/1-frontinmaceio.jpg&#34; alt=&#34;Logo do FrontIn Maceió&#34; width=&#34;750&#34; height=&#34;308&#34; srcset=&#34;uploads/2012/10/1-frontinmaceio.jpg 750w, uploads/2012/10/1-frontinmaceio-300x123.jpg 300w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML5 com tapioca e água de coco! O &lt;a href=&#34;http://frontinmaceio.com.br/&#34; title=&#34;FrontIn Maceió&#34;&gt;FrontInMaceió&lt;/a&gt; é a primeira edição de um evento da franquia FrontIn a acontecer no Nordeste, sendo organizado pela recém-fundada &lt;a href=&#34;http://www.braziljs.org/&#34; title=&#34;BrazilJS Foundation&#34;&gt;BrazilJS Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O evento ocorre em 27 de outubro e contará com palestras de Ícaro Medeiros, da Globo.com, Bernard de Luna, Designer de Interface, Caio Gondim e Almir Filho, da Loop Infinito, Dennis Calazans, da Unibratec/Marista, Giovanni Keppelen, do Peixe Urbano, Luiz Tiago Oliveira, da MGR Tecnologia, Jean Nascimento (o Suissa), da Nodeware, Ramon Victor, da TangerinaLab e Nicholas Fazio, da Ilha Soft. Além disso, haverão workshops com Bernard de Luna e Jean Nascimento.&lt;/p&gt;

&lt;p&gt;A conferência irá abordar temas como performance front-end, pré-processadores CSS, semântica e produtividade em JS.&lt;/p&gt;

&lt;h2 id=&#34;frontin-sampa&#34;&gt; FrontIn Sampa&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.frontinsampa.com.br&#34; title=&#34;FrontIn Sampa&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-7162&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/10/2-frontinsampa.jpg&#34; alt=&#34;Logo do FrontIn Sampa&#34; width=&#34;750&#34; height=&#34;308&#34; srcset=&#34;uploads/2012/10/2-frontinsampa.jpg 750w, uploads/2012/10/2-frontinsampa-300x123.jpg 300w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Em novembro, o estado de São Paulo ganha dois eventos de front-end. O primeiro é o &lt;a href=&#34;http://www.frontinsampa.com.br/&#34; title=&#34;FrontIn Sampa&#34;&gt;FrontInSampa&lt;/a&gt;, que ocorre na capital dia 3 de novembro.&lt;/p&gt;

&lt;p&gt;O FrontInSampa contará com palestras do Zeno Rocha, Front-end Engineer na Liferay e articulista aqui no Tableless, Bernard de Luna, Fábio Ricotta, co-fundador do MestreSEO, Horácio Soares, fundador da Acesso Digital e consultor na Internativa, Clécio Bachini, da Souyz Sistemas, além de palestrantes da comunidade selecionados pelo &lt;em&gt;Call 4 Papers&lt;/em&gt; do evento: Sérgio Lopes, da Caelum, Kaique da Silva, desenvolvedor web e Mauricio Wolff, da Dell.&lt;/p&gt;

&lt;p&gt;Os temas previstos para o evento vão desde produtividade e testes A/B até SEO para front-end.&lt;/p&gt;

&lt;h2 id=&#34;frontinterior&#34;&gt;FrontInterior&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.frontinterior.com.br&#34; title=&#34;FrontInterior&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-7163&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/10/3-frontinterior.jpg&#34; alt=&#34;Logo do FrontInterior&#34; width=&#34;750&#34; height=&#34;308&#34; srcset=&#34;uploads/2012/10/3-frontinterior.jpg 750w, uploads/2012/10/3-frontinterior-300x123.jpg 300w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O segundo evento a acontecer em São Paulo é o &lt;a href=&#34;http://www.frontinterior.com.br&#34; title=&#34;FrontInterior&#34;&gt;FrontInterior&lt;/a&gt;. O nome, fora do padrão dos demais eventos, veio da intenção de criar um evento itinerante pelo interior paulista, onde a cada período uma cidade sediará o evento. Sob curadoria do Richard D. Johansen e minha e co-realizado pela &lt;a href=&#34;http://www.mstech.com.br&#34; title=&#34;MStech&#34;&gt;MStech&lt;/a&gt;, a primeira edição do evento ocorre na cidade de Bauru, dia 24 de novembro.&lt;/p&gt;

&lt;p&gt;O FrontInterior contará com palestras de Reinaldo Ferraz, do W3C Brasil, Horácio Soares, Gonçalo Ferraz, Diretor no Instituto Faber-Ludens, Bernard de Luna, Leo Balter e Clécio Bachini.&lt;/p&gt;

&lt;p&gt;O evento irá abordar temas como &lt;em&gt;mobile first&lt;/em&gt;, &lt;em&gt;Open Web Platform&lt;/em&gt;, experiência do usuário, acessibilidade, entre outros.&lt;/p&gt;

&lt;p&gt;Os eventos de front-end são oportunidades enriquecedoras para agregar novos conhecimentos e realizar um networking com a comunidade.&lt;/p&gt;

&lt;p&gt;Faltou algum evento? Sugira nos comentários!&lt;/p&gt;

&lt;p&gt;🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O Front-end auxiliando o Marketing Digital</title>
      <link>https://tableless.github.io/hugo-public/o-front-end-auxiliando-o-marketing-digital/</link>
      <pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/o-front-end-auxiliando-o-marketing-digital/</guid>
      <description>

&lt;p&gt;Aos desenvolvedores front-ends, que trabalham em agências que possuem a área de Marketing Digital, saiba que vocês podem ser muito úteis para esses profissionais.&lt;/p&gt;

&lt;p&gt;Nesse post resolvi escrever sobre criação de um app simples e deixá-lo como Aba Personalizada dentro de uma Página do Facebook, gerando insights (dados estatísticos) para a equipe de Marketing Digital, pois assim fica mais fácil para criar estratégias e mensurar os resultados gerados pela própria rede social.&lt;/p&gt;

&lt;p&gt;Em outras palavras, vamos pegar o conteúdo hospedado por você em um servidor e “embedar” dentro de uma Página do Facebook, como se fosse um iframe, porém, seguindo as recomendações da maior rede social até o momento.&lt;/p&gt;

&lt;h3 id=&#34;iniciando-a-estrutura&#34;&gt;Iniciando a estrutura:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Necessário ter um servidor com url segura, ou seja, que tenha url https://&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Imagem 75&amp;#215;75 pixels (icone de aplicativo)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Imagem 16&amp;#215;16 pixels (favicon de aplicativo)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Imagem 111&amp;#215;74 pixels (icone de aba na page)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;dicas&#34;&gt;Dicas:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;O Layout não deve ultrapassar o tamanho de 800 x 800 pixels, evitando barra de rolagem dentro da Page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Criar uma pasta no servidor e o arquivo inicial como index&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Exemplo: &lt;a href=&#34;http://urldosite.com.br/app/index.html&#34;&gt;http://urldosite.com.br/app/index.html&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Desenvolva o html, css e js normalmente e faça upload em uma pasta específica no servidor.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Após efetuar o upload de todos os arquivos, vamos precisar de 2 urls.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A: &lt;a href=&#34;http://urldosite.com.br/app/&#34;&gt;http://urldosite.com.br/app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;B: &lt;a href=&#34;https://urlsegura.com.br/app&#34;&gt;https://urlsegura.com.br/app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Obs: Para saber o endereço da url segura, é necessário ver com sua hospedagem.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;passo-1&#34;&gt;Passo 1:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Entre no link &lt;a title=&#34;Área de desenvolvimento de app do Facebook&#34; href=&#34;https://developers.facebook.com/apps&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://developers.facebook.com/apps&#34;&gt;https://developers.facebook.com/apps&lt;/a&gt;&lt;/a&gt; ou buscar, no fim do sidebar direito, o link Mais &amp;gt;&amp;gt; Desenvolvedores, depois clicar no link do topo: Aplicativos&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clique no link “Criar um novo Aplicativo”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Para criar apps do Facebook é necessário que sua conta seja validada com um número de celular ou cartão de crédito, caso já tenha sido, basta continuar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Digite o nome do seu app e clique em “Continuar”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;App Criado.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/4difRBMeCIeY17-CtclLKkUyguliSxePUsLDcgLfYPkeq07M-6W4IfibX_Y1-_xY7pYp1ezKwFVVpZjuOyLtuu7_mbBz1TJqC-OncFMpih2eKRtXYY0s&#34; alt=&#34;App Facebook para Pages&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;passo-2&#34;&gt;Passo 2:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Selecione a Categoria: Aplicativos para Páginas&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inserindo Imagens do seu app&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A: Imagem que será exibida em ambiente de Aplicativos no Facebook&lt;/p&gt;

&lt;p&gt;B: Imagem de ícone que será exibida minimizada na Aba da Pagina no Facebook.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/U7xO8qBBa7Jm6SDvfZtVGMqpvvpSoCopfM_bPEVMrjK0Kc0eTNYD8S8k3YapwG2OPxu-TKHOAhKikPUYLL5C_a4WHBnkXRaADDQoaXH_nl4LqVUJ9jMS&#34; alt=&#34;App Facebook para pages&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clique em App on Facebook e preencha os campos com as url absoluta e a url segura, conforme a imagem abaixo:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/Uydm1ezb9Zrim0LAlwZ7mddxVD5oEkUGyL8YokrvVDmZkNJqvRt0YxFhr8q8JLdYh8GoTka-4Avqu0nIPXq6oeRz3yis_2eG_S3PfOshJLdF5i0VwTjy&#34; alt=&#34;App Facebook para pages&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clique em Page Tab (legenda da imagem abaixo)
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A: Nome que vai aparecer na Aba da Página no Facebook&lt;/p&gt;

&lt;p&gt;B: url do projeto&lt;/p&gt;

&lt;p&gt;C: url segura do projeto&lt;/p&gt;

&lt;p&gt;D: Link para inserir a imagem que aparecerá na Aba da Página no Facebook (lembrando que o tamanho é de: 111 x 74 pixels)&lt;/p&gt;

&lt;p&gt;E/F: Definição de largura de conteúdo do Aplicativo dentro da Página no Facebook&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/-3aHe8lIzfyWxuwl1pFD19RX_Sd_bdQwNuzk2ow32CYbpgb_H8C4zhKj68k5cRB1KEdoQNxZ4qrCE4p0StQwxT1gHBiTWf-PqY_ME1U92nxygovuf7eM&#34; alt=&#34;App Facebook para pages&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clique em “Salvar Alterações”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Criando a Aba na Página.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.Pronto! Seu app já foi criado. Agora vou ensinar a mágica de criar a Aba dentro da sua Página no Facebook, trazendo esse conteúdo, para isso, é necessário ser Administrador da Página no Facebook.&lt;/p&gt;

&lt;p&gt;A: Ao Criar o app ele terá um ID único conforme a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/oojacp-bM6uAroruxVTbqrXpeY8y2_vCXr_aYHylYNA_XmXO9cDSRlWESRn5rkyrHAqgenoj4GuzoofkuKglBkR1a7l4X1M3Jm4C3CSfO1ByWENrMzvo&#34; alt=&#34;App Facebook para pages&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2: Copie e cole a url abaixo em seu navegador com o ID do seu app.&lt;/p&gt;

&lt;p&gt;Exemplo: &lt;a href=&#34;https://www.facebook.com/add.php?api_key=APP-ID&amp;amp;pages=1&amp;amp;&#34;&gt;https://www.facebook.com/add.php?api_key=APP-ID&amp;amp;pages=1&amp;amp;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Em seguida, abrirá uma janela mostrando todas as página que você for administrador, basta selecionar a página escolhida e clicar em “Adicionar”, conforme a imagem abaixo&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/s5Kg7J__SH27XBF06K3VlV9_aFy4ZWsOEh8-Wjn7eD9_-N6fZQkt2EcuEdh6KktrblGFcm9Y2keG5Qnf0jCcP8iFZg1QZGfPdSNf7pZOAgC9cuEPG8Ix&#34; alt=&#34;App Facebook para Pages&#34; /&gt;&lt;/p&gt;

&lt;p&gt;**IMPORTANTE:&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;No seu html, é necessário inserir um código simples, para que os profissionais de Marketing Digital possam acessar esses dados estatísticos gerados pelo próprio Facebook.&lt;/p&gt;

&lt;p&gt;Inserindo o código abaixo no seu html, basta colocar o ID do aplicativo, o mesmo que usamos na url para criar a Aba no Facebook.&lt;/p&gt;

&lt;p&gt;Insira o html abaixo entre a tag &lt;strong&gt;HEAD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;meta property=&amp;#8221;fb:app_id&amp;#8221; content=&amp;#8221;APP-ID&amp;#8221;&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;meta property=&amp;#8221;fb:admins&amp;#8221; content=&amp;#8221;USER_ID&amp;#8221;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;User_ID = ID do seu Perfil, caso não saiba qual é o seu , veja o exemplo:&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Dados do Perfil do Deivid Marques no Facebook&#34; href=&#34;http://graph.facebook.com/deividmarquess&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://graph.facebook.com/deividmarquess&#34;&gt;http://graph.facebook.com/deividmarquess&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ID= 100000470381955&lt;/p&gt;

&lt;p&gt;Bem, espero ter ajudado a todos, qualquer dúvida basta deixar uma mensagem por aqui.&lt;/p&gt;

&lt;p&gt;Na minha Page, existem alguns apps Promocinais que eu já criei: &lt;a title=&#34;Página do Deivid Marques&#34; href=&#34;https://www.facebook.com/deividmarques.com.br&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.facebook.com/deividmarques.com.br&#34;&gt;https://www.facebook.com/deividmarques.com.br&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;em-caso-de-dúvidas-confira-as-documentações-do-facebook&#34;&gt;Em caso de dúvidas, confira as documentações do Facebook&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Central de ajuda:
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a title=&#34;Central de Ajuda&#34; href=&#34;http://www.facebook.com/help/?ref=pf&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.facebook.com/help/?ref=pf&#34;&gt;http://www.facebook.com/help/?ref=pf&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Documentação Developers (APP):
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a title=&#34;Documentaçao do Facebook &#34; href=&#34;https://developers.facebook.com/docs/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://developers.facebook.com/docs/&#34;&gt;https://developers.facebook.com/docs/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.Blog dos desenvolvedores:&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Blog dos Desenvolvedores do Facebook&#34; href=&#34;https://developers.facebook.com/blog&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://developers.facebook.com/blog&#34;&gt;https://developers.facebook.com/blog&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>