<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codigo on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/codigo/index.xml</link>
    <description>Recent content in Codigo on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/codigo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como boas práticas de escrita de código podem influenciar em uma melhor rotina de trabalho</title>
      <link>https://tableless.github.io/hugo-public/como-boas-praticas-de-escrita-de-codigo-podem-influenciar-em-uma-melhor-rotina-de-trabalho/</link>
      <pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/como-boas-praticas-de-escrita-de-codigo-podem-influenciar-em-uma-melhor-rotina-de-trabalho/</guid>
      <description>

&lt;p&gt;Observei que alguns itens estão me ajudando na rotina de trabalho, como obter um melhor tempo de produção e um melhor controle sobre o que estou fazendo.&lt;/p&gt;

&lt;p&gt;São alguns hábitos simples que podem lhe ajudar muito. É apenas questão de implementar no seu dia a dia e demonstrar para a sua equipe (caso trabalhe em equipe) o quanto é mais organizado e produtivo trabalhar desta forma.&lt;/p&gt;

&lt;p&gt;A seguir listei algumas técnicas que podem ajudar bastante no seu dia a dia como desenvolvedor front-end.&lt;/p&gt;

&lt;h4 id=&#34;style-guide&#34;&gt;Style Guide&lt;/h4&gt;

&lt;p&gt;É um documento que contém estilos e padrões de um projeto, que podem ser utilizados para manter a pregnância do design e desenvolvimento.&lt;/p&gt;

&lt;p&gt;Existem algumas metodologias que podem ajudar você no desenvolvimento desse &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Style Guide, &lt;/strong&gt;como: &lt;a href=&#34;http://getbem.com/introduction/&#34; target=&#34;_blank&#34;&gt;BEM&lt;/a&gt;, &lt;a href=&#34;https://github.com/necolas/idiomatic-css/tree/master/translations/pt-BR&#34; target=&#34;_blank&#34;&gt;IDIOMATIC&lt;/a&gt;, &lt;a href=&#34;http://primercss.io/scaffolding/&#34; target=&#34;_blank&#34;&gt;PRIMER CSS&lt;/a&gt;, &lt;a href=&#34;http://getbootstrap.com/css/&#34; target=&#34;_blank&#34;&gt;Twitter Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;skeleton-ou-estruturas-boilerplate&#34;&gt;Skeleton ou Estruturas Boilerplate&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.initializr.com/&#34; target=&#34;_blank&#34;&gt;Initializr&lt;/a&gt;, &lt;a href=&#34;https://github.com/helderburato/generator-hyapp&#34; target=&#34;_blank&#34;&gt;Gerador HyApp&lt;/a&gt; + &lt;a href=&#34;http://yeoman.io/&#34; target=&#34;_blank&#34;&gt;Yeoman&lt;/a&gt; e &lt;a href=&#34;https://html5boilerplate.com/&#34; target=&#34;_blank&#34;&gt;HTML5 Boilerplate&lt;/a&gt;. Que são geradores de pequenas estruturas de diretórios para iniciar projetos em HTML/CSS/JS;&lt;/p&gt;

&lt;h4 id=&#34;font-ícones&#34;&gt;Font Ícones&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://fontawesome.io/&#34; target=&#34;_blank&#34;&gt;Font Awesome&lt;/a&gt;, &lt;a href=&#34;http://fontello.com/&#34; target=&#34;_blank&#34;&gt;Fontello&lt;/a&gt;, &lt;a href=&#34;https://icomoon.io/app/#/select&#34; target=&#34;_blank&#34;&gt;IcoMoon&lt;/a&gt; são ótimas opções. No meu dia a dia costumo utilizar na maioria dos projetos o &amp;#8220;Font Awesome&amp;#8221; pela facilidade e padronização nos layouts da empresa em que trabalho;&lt;/p&gt;

&lt;h4 id=&#34;web-fonts&#34;&gt;Web Fonts&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/&#34; target=&#34;_blank&#34;&gt;Google Fonts&lt;/a&gt; sem dúvidas é uma ótima opção e agiliza bastante quando utilizada nos layouts;&lt;/p&gt;

&lt;h4 id=&#34;task-runner&#34;&gt;Task Runner&lt;/h4&gt;

&lt;p&gt;Tratando-se de automatizadores de tarefas os mais conhecidos são o &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;GulpJS&lt;/a&gt; e o &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;GruntJS&lt;/a&gt;. Costumo utilizar o Gulp pois foi o que mais me identifiquei, mas você pode escolher o que mais adequar ao seu projeto ou ao modo de trabalho de sua equipe.&lt;/p&gt;

&lt;h3 id=&#34;será-que-isso-influencia-mesmo-na-rotina-ou-nos-custos-do-produto-final&#34;&gt;Será que isso influencia mesmo na rotina ou nos custos do produto final?&lt;/h3&gt;

&lt;p&gt;Segundo uma experiência direta da &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;IBM &lt;/strong&gt;e também de dados reunidos por pesquisadores que trabalham com centenas de empresas, percebe-se que a maioria das empresas acabam investindo &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;25% &lt;/strong&gt;a mais do orçamento no ciclo de vida do desenvolvimento para garantir a qualidade do software.&lt;/p&gt;

&lt;p&gt;Além disso, &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;30%&lt;/strong&gt; dos custos de projeto para desenvolvimento de software estão associados a retrabalho e &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;70%&lt;/strong&gt; desse valor estão relacionados a erros de requisitos.&lt;/p&gt;

&lt;p&gt;A qualidade de escrita de código influencia diretamente nos custos do projeto e da qualidade de vida do software.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56001&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/09/Group.png&#34; alt=&#34;Group&#34; width=&#34;1138&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mente-aberta-para-novas-ideias&#34;&gt;Mente aberta para novas ideias&lt;/h3&gt;

&lt;p&gt;Sou totalmente aberto a novas ideias e sugestões naquilo que eu posso melhorar no meu dia a dia de trabalho, mas parece que nem todo desenvolvedor enxerga as observações no seu próprio código como algo bom, algo produtivo. E sim como uma crítica pessoal.&lt;/p&gt;

&lt;p&gt;Lógico, todos nós temos dias difíceis, prazos curtos. E todo desenvolvedor que tem um pouco mais de experiência compreende muito bem como é correr contra o tempo para lançar um novo produto ou &lt;em class=&#34;markup--em markup--p-em&#34;&gt;feature&lt;/em&gt;. Mas creio que isso não seja motivo para excluir a possibilidade de mudança, de tentar o novo. &lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;O que seria do mundo se ninguém tivesse tentado algo diferente?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Me deparo fazendo esse tipo de pergunta quase que diariamente, costumo estar sempre dando uma olhada em novas tecnologias, mesmo que seja por brincadeira. Mas me sinto frustrado quando não é possível aplicar nas equipes ou em projetos. Entendo que nem sempre é possível sair utilizando tudo que é novo, ainda mais quando nos deparamos com coisas novas todos os dias no nosso ramo, mas não podemos ficar presos ao velho para sempre.&lt;/p&gt;

&lt;p&gt;Tire 1 ou 2 dias agora para escrever bem seu código e no futuro você verá como o trabalho ficará mais fácil ao entrar novos membros na equipe e for necessário explicar como as coisas funcionam.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Padrões são bons!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Essa frase parece que assusta muitas pessoas, mas diferente de medo, ela deveria emitir a sensação de algo bom, pois é o que ela traz com o tempo.&lt;/p&gt;

&lt;p&gt;Agradeço a todos que tiraram um tempo e leram o texto, e qualquer sugestão de melhoria estou a disposição, obrigado!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como se tornar um dev front-end</title>
      <link>https://tableless.github.io/hugo-public/tornar-dev-front-end/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/tornar-dev-front-end/</guid>
      <description>

&lt;p&gt;Esse artigo inspirou um livro, mais completo, com mais assuntos e detalhes. Olha só: &lt;a href=&#34;https://www.casadocodigo.com.br/products/livro-guia-frontend&#34;&gt;Guia Front-end&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Estava navegando por aí e acabei encontrando um artigo bem legal do &lt;a href=&#34;http://leandrooriente.com/como-me-tornar-um-desenvolvedor-front-end/&#34;&gt;Leandro Oriente&lt;/a&gt;, que fala sobre um assunto muito interessante e que sempre me perguntam por aí. Decidi então escrever minha versão do artigo, colocando meus pontos de vista sobre como se tornar um desenvolvedor front-end.&lt;/p&gt;

&lt;p&gt;Entrar na área de front-end é algo muito fácil. Você não precisa ter habilidades técnicas muito avançadas. É por isso que durante muito tempo o mercado andou saturado e muito, muito prostituído por gente que entregava trabalhos sem qualidade e que cobravam barato demais. Hoje o mercado está aquecido. É muito difícil encontrar um dev Front-end dando sopa por aí.&lt;/p&gt;

&lt;p&gt;Eu não organizei os tópicos abaixo em ordem de dificuldade, mas dividi os assuntos na ordem que eu acho, particularmente, mais importante você aprender para atuar no mercado de trabalho. Portanto esqueça o nível de dificuldade.&lt;/p&gt;

&lt;p&gt;O objetivo aqui é que pelo menos você conheça o caminho das pedras e tenha um checklist com assuntos mais importantes para estudar e pesquisar.&lt;/p&gt;

&lt;h2 id=&#34;editores-de-código&#34;&gt;Editores de código&lt;/h2&gt;

&lt;p&gt;Não use editores WYSIWYG. Dizendo com todas as palavras: fique longe de coisas como o Dreamweaver.&lt;/p&gt;

&lt;p&gt;O Dreamweaver é um símbolo. Qualquer editor ou ferramenta que vire uma muleta para o dev é algo ruim. Você precisa digitar e entender de cabo a rabo o significado do código escrito. Se você tem uma ferramenta que faz tudo sozinha, você não é um desenvolvedor, você é apenas um operador de software.&lt;/p&gt;

&lt;p&gt;Por isso procure aprender a digitar código na mão sempre. Se você está começando e tem algum editor como o &lt;a href=&#34;http://sublimetext.com&#34;&gt;Sublime Text&lt;/a&gt;, que fica auto-completando tudo o que você escreve, desabilite essa função, pelo menos por enquanto. Isso vai te obrigar a pesquisar, a procurar a resposta, vai te forçar a lembrar daquele negócio que você esqueceu. Isso vai te fazer pensar.&lt;/p&gt;

&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;HTML é parte essencial da web. Sem HTML a web não existe. Por isso, aprenda HTML e todo o seu contexto de semântica e organização de informação. Não fique preso a versões do HTML, como: &amp;#8220;Hoje vou aprender HTML5&amp;#8221;. Esquece, esse negócio de versões. Você vai aprender HTML.&lt;/p&gt;

&lt;h2 id=&#34;css&#34;&gt;CSS&lt;/h2&gt;

&lt;p&gt;Eu li não sei aonde e não consegui encontrar o link, mas um dos ban-ban-bans gringos disse mais ou menos assim: &amp;#8220;você leva algumas horas para aprender CSS, mas uma vida para se tornar um mestre.&amp;#8221;&lt;/p&gt;

&lt;p&gt;CSS é simples. A maioria das propriedades você vai acabar decorando. Na verdade você não vai usar mais do que umas 15 propriedades todos os dias. É fácil encontrar algum lugar que explique o que é CSS e que lista todas as suas propriedades. Na pior das hipóteses sempre existe a &lt;a href=&#34;http://www.w3.org/Style/CSS/&#34;&gt;documentação do W3C para consulta&lt;/a&gt;. O importante é que você precisa aprender algo novo de CSS todos os dias. Não importa o que, não importa como, mas você precisa aprender um truque, uma nova propriedade, uma novidade que só vai se popularizar dali alguns anos…&lt;/p&gt;

&lt;h2 id=&#34;esqueça-o-ftp-e-aprenda-um-controle-de-versão&#34;&gt;Esqueça o FTP e aprenda um controle de versão&lt;/h2&gt;

&lt;p&gt;Eu não sei quantas vezes eu ouvi de devs que não usavam o Sublime Text por que não tinha FTP acoplado (!). Deixa eu dizer uma coisa e vou ser bem duro: Se você ainda edita seu código usando FTP, você é júnior. Se você baixa o arquivo pro seu computador, edita e depois sobe pro FTP, você é Júnior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O Dreamweaver é um símbolo. Qualquer editor ou ferramenta que vire uma muleta para o dev é algo ruim.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Um desenvolvedor que se preze aprende um controle de versão. Se você não sabe o que é um controle de versão veja &lt;a href=&#34;http://tableless.com.br/introducao-das-premissas-dos-controles-de-versao/&#34;&gt;este&lt;/a&gt;, &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;este&lt;/a&gt; e &lt;a href=&#34;http://campus.tableless.com.br/2012/10/controle-de-versão-com-git/&#34;&gt;este&lt;/a&gt; link. Não é nada difícil e isso vai te salvar a vida.&lt;/p&gt;

&lt;p&gt;Controlar seu código fonte deve ser uma premissa. Um princípio. Se você acha que o undo do seu editor predileto salva sua vida, imagina ter um undo do seu projeto inteiro. Imagine ter o histórico de edição de cada um dos arquivos do seu projeto.&lt;/p&gt;

&lt;p&gt;Usar um controle de versão, como o &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;GIT&lt;/a&gt;, é pré-requisito para trabalhar em qualquer grande empresa. Algumas usam SVN, mas se você aprender a usar um deles, vai ser fácil aprender a usar o outro.&lt;/p&gt;

&lt;p&gt;Imagine você não precisar passar horas no FTP para atualizar código, arquivos e etc. Imagine com 1 comando, você clonar seu projeto inteirinho para o servidor, exatamente do jeito que você deixou. Nada de ficar se matando por que o FTP travou, por que a conexão perdeu pacotes, por que o servidor matou a conexão, nenhum destes problemas fará mais parte da sua vida.&lt;/p&gt;

&lt;h2 id=&#34;o-básico-do-terminal&#34;&gt;O básico do terminal&lt;/h2&gt;

&lt;p&gt;Se você vai aprender GIT ou qualquer outro controle de versão, você vai precisar mexer um pouquinho no terminal. Claro, existem programas cheio de botões que facilitam as principais tarefas, mas se você tiver que atualizar o projeto direto no servidor, não tem jeito, vai precisar usar o terminal para atualizar o projeto lá.&lt;/p&gt;

&lt;p&gt;Outro motivo é que dependendo do projeto que você se envolver, principalmente se for em Ruby, Python e coisas desse tipo, você vai precisar aprender a iniciar o projeto, parar o projeto, atualizar as dependências e algumas outras tarefas recorrentes via terminal.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Um desenvolvedor que se preze aprende um controle de versão.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sem falar que uma série de ferramentas essenciais para os devs front-end como &lt;a href=&#34;http://tableless.com.br/grunt-voce-deveria-estar-usando/&#34;&gt;Grunt&lt;/a&gt;, &lt;a href=&#34;http://simplesideias.com.br/gerenciando-dependencias-client-side-com-bower&#34;&gt;Bower&lt;/a&gt;, &lt;a href=&#34;http://yeoman.io&#34;&gt;Yeoman&lt;/a&gt;, &lt;a href=&#34;http://middlemanapp.com&#34;&gt;Middleman&lt;/a&gt;, &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt; e etc, são feitos em Ruby e você vai precisar usar o terminal para fazer a mágica acontecer.&lt;/p&gt;

&lt;h2 id=&#34;acessibilidade&#34;&gt;Acessibilidade&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://brunotorres.net/acessibilidade-nao-e-altruismo&#34;&gt;Acessibilidade não é altruísmo&lt;/a&gt;. Você não faz um site acessível por que você está com pena de alguém cego ou por que não tem os dois braços. Você faz um site acessível por que você precisa que seu site seja visto por TODOS. É a mesma coisa se você não fizer um site responsivo hoje em dia. Como assim seu site não consegue ser bem visto via mobile?&lt;/p&gt;

&lt;p&gt;Acessibilidade é algo que ainda está engatinhando aqui no Brasil, mas algo me diz que não demora muito e esse assunto vai cair na boca do povo, vai virar moda e aí todo mundo vai passar a fazer pra não ficar de fora do grupinho. Por isso, seja pioneiro e comece fazendo desde o princípio em seus projetos.&lt;/p&gt;

&lt;p&gt;Veja aqui uma pequena &lt;a href=&#34;http://tableless.com.br/slides-para-devs-9-acessibilidade-na-web/&#34;&gt;seleção de slides de palestras sobre acessibilidade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nós temos uma &lt;a href=&#34;http://tableless.com.br/categoria/acessibilidade-2/&#34;&gt;categoria sobre acessibilidade&lt;/a&gt; aqui no Tableless. Dá uma sapeada por lá.&lt;/p&gt;

&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;

&lt;p&gt;O Leandro Oriente &lt;a href=&#34;http://leandrooriente.com/como-me-tornar-um-desenvolvedor-front-end/&#34;&gt;falou no seu artigo&lt;/a&gt; que ter uma base sólida em Javascript é um requisito essencial. É uma das únicas partes que me diferencio do artigo dele.&lt;/p&gt;

&lt;p&gt;Javascript tem que saber sim, não estou dizendo o contrário. Mas se você sentir que não tem o menor dom (sem trocadilhos) para isso, não fique preocupado, você não precisa ser alguém avançado em Javascript para ser um bom front-end. Mas precisa entender o básico e principalmente as boas práticas. Mas se você quiser se destacar da média, e ser um ÓTIMO MOTHER-FUCKER front-end, vai ter que aprender muito, muito bem essa linguagem.&lt;/p&gt;

&lt;p&gt;Geralmente existem dois tipos de front-ends: aqueles que ficam mais pro lado do design e outro grupo que fica mais do lado da programação. Geralmente, quem está mais perto do design tem mais dificuldades para assuntos ligados à programação. Se você for um desses, não se preocupe. Entenda qual o seu perfil, saiba no que você é forte e foque-se em melhorar sua fraqueza. Se for em Javascript, tente concentrar mais as suas forças para começar a aprender bem essa linguagem.&lt;/p&gt;

&lt;p&gt;Para ficar claro: todo o dev front-end precisa saber pelo menos o básico de Javascript. Você vai usá-lo sempre. Por outro lado, nem todos precisam saber o que é Node, Backbone, Ember e etc&amp;#8230; Dependendo do lugar que você trabalhar, por exemplo em agências, você só precisa saber o básico/intermediário de Javascript. Agora, se você for para algum lugar que produz seus próprios produtos, muito provavelmente você vai precisar ser rato nessas tecnologias.&lt;/p&gt;

&lt;h3 id=&#34;jquery&#34;&gt;JQuery&lt;/h3&gt;

&lt;p&gt;JQuery não é Javascript. Pelamordedeus. JQuery é uma biblioteca que abstrai a liguagem original, tornando muito mais fácil seu controle.&lt;/p&gt;

&lt;p&gt;Você precisa saber pelo menos o básico de Javascript para começar a aprender JQuery. Isso é importante!&lt;/p&gt;

&lt;p&gt;Mesmo assim o JQuery é a biblioteca Javascript mais usada no mundo todo. Você precisa dele para rodar plugins que usamos todos os dias, para rodar outros frameworks como o Bootstrap, por exemplo. JQuery é requisito básico em algumas empresas.&lt;/p&gt;

&lt;h2 id=&#34;performance&#34;&gt;Performance&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.yahoo.com/blogs/ydn/high-performance-sites-importance-front-end-performance-7160.html&#34;&gt;80% da performance de um website está do lado do client-side&lt;/a&gt;. Client-side também é responsável pro 90% da performance de um site mobile.&lt;/p&gt;

&lt;p&gt;Você prejudica a performance se escreve um javascript ruim, se usa muitas imagens, se você não minifica seu código, se você não serve bem seus assets e uma série de outros pontos.&lt;/p&gt;

&lt;p&gt;O Google tem um site que mostra muitos destes pontos e te ajuda a melhorar a performance do seu código. &lt;a href=&#34;https://developers.google.com/speed/pagespeed/&#34;&gt;Dá uma olhada&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Já falamos sobre performance &lt;a href=&#34;http://tableless.com.br/performance-frontend-parte1/&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://tableless.com.br/performance-frontend-parte2/&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;seo&#34;&gt;SEO&lt;/h2&gt;

&lt;p&gt;Ao contrário do que muitos acham, SEO não é feito por apenas uma iniciativa, mas várias. Não adianta nada você escrever um texto cheio de palavras chaves e a estrutura do HTML não ser semântica. Ou você ter um ótimo código HTML, mas fazer seu menu em flash (ok, eu abusei, ninguém faz mais menus em flash).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Todo o dev front-end precisa saber pelo menos o básico de Javascript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SEO é um trabalho que você precisa ter em várias frentes. É necessário usar as tags corretas, melhorar a performance, medir a prioridade dos links na página e várias outras coisas. O responsável por isso é o dev front-end. Não se preocupe, pesquisa de palavras chaves, relevância do texto e qualquer coisa ligada ao conteúdo não são de sua responsabilidade. Você precisa fazer com que o conteúdo seja &amp;#8220;encontrável&amp;#8221; e principalmente seja fácil dos sistemas de busca consumirem esse conteúdo por meio de um bom código client-side.&lt;/p&gt;

&lt;h2 id=&#34;wordpress&#34;&gt;WordPress&lt;/h2&gt;

&lt;p&gt;Falo para aprender WordPress por que é o mais badalado. Você pode aprender Joomla! ou Drupal, não tem problema. Mas não tem como, o WordPress é o CMS mais usado no mundo. E pessoalmente eu acho muito melhor que os outros dois.&lt;/p&gt;

&lt;p&gt;A boa notícia é que você não precisa aprender PHP para fazer websites em WordPress. Ele está tão maduro que você consegue fazer sites relativamente complexos usando sem muitos problemas as funções que o WordPress dispõe. Se você é um freelancer, é interessante saber WordPress para poder vender o pacotinho &amp;#8220;código client-side + wordpress&amp;#8221;.&lt;/p&gt;

&lt;h2 id=&#34;pré-processadores&#34;&gt;Pré-processadores&lt;/h2&gt;

&lt;p&gt;Aprenda algum pré-processador. Eu, particularmente, &lt;a href=&#34;http://tableless.com.br/pre-processadores-usar-ou-nao-usar/&#34;&gt;não gosto muito&lt;/a&gt;. Mas eu uso bastante. E algumas grandes empresas os pré-processadores facilitam a manutenção do código CSS e o deixam escalável. O SASS é o mais utilizado. LESS é o segundo. Para se ter uma ideia LESS é usado pelo pessoal que faz o framework &lt;a href=&#34;http://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Não importa qual pré-processador você decida usar, mas entenda que você precisa saber exatamente como eles geram o código final. Se um pré-processador for mal usado, ele pode acabar com o seu projeto. &lt;a href=&#34;http://tableless.com.br/pre-processadores-usar-ou-nao-usar/&#34;&gt;Eu ecrevi algo sobre isso aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;manipulação-de-json-e-etc&#34;&gt;Manipulação de JSon e etc&lt;/h2&gt;

&lt;p&gt;Em algumas empresas programadores back-end não encostam no front-end. Eles não editam o HTML, nem tão pouco o Javascript. Isso acontece por que ele passa mais tempo construindo e melhorando uma API do que qualquer outra tarefa. O dev front-end por sua vez consome essa API e então começa a popular as páginas com as informações encontradas nela. Suponha que você precise fazer uma listagem em uma determinada página do projeto. As informações serão requisitadas via Javascript, que consumirá um JSon, promovido pela API. Neste JSon haverá todas as informações que você precisa exibir na página. O resto é definir o HTML e formatar com CSS. As informações virão do Javascript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Acessibilidade não é altruísmo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.devmedia.com.br/revista-front-end-magazine&#34;&gt;Para você ser um front-end top de linha&lt;/a&gt;, entender essa dinâmica é essencial. Esse tópico ficou por último por que não é algo trivial. Você precisa entender muito bem sobre boas práticas de escrita e de código e performance. Você também consegue sobreviver em muitas empresas sem ter essa skill. Normalmente isso é necessário em empresas que trabalham com sistemas. Quase nunca uma agência web terá uma necessidade assim.&lt;/p&gt;

&lt;h2 id=&#34;estude-a-teoria&#34;&gt;Estude a teoria&lt;/h2&gt;

&lt;p&gt;Nunca, nunca comece pela parte prática. Eu sei que praticar e colocar a mão na massa é a parte mais esperada por qualquer pessoa que está começando na área. Mas acredite em mim: se você quer ser um front-end acima da média, procure entender o &amp;#8220;por que&amp;#8221; das coisas.&lt;/p&gt;

&lt;p&gt;Não basta sentar, abrir um PSD e começar escrever HTML. Há uma série de conceitos que vão te ajudar a escrever código acessível, escalável e semântico. Tem que saber que seu código vai ser consumido muitas vezes por robôs de busca, leitores de tela, browsers, scripts e etc. É responsabilidade sua entender que HTML é tudo sobre organizar e dar significado à informação.&lt;/p&gt;

&lt;h2 id=&#34;concluindo&#34;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;Você pode saber todos estes assuntos ou apenas alguns, não importa, você sempre terá mais informações para aprender. Existem uma série de outros assuntos que eu não abordei como por exemplo aprender Jekyll ou Middleman, entender como se usa o Grunt, RequireJS, Yeoman, Bower e etc. O artigo iria ficar gigantesco e você ficaria assustado. Por isso, eu estou escrevendo um livro que poderá te ajudar nesses assuntos todos. 🙂&lt;/p&gt;

&lt;p&gt;Esse é o universo que os devs front-ends devem enfrentar.&lt;/p&gt;

&lt;p&gt;Mais do mesmo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/&#34;&gt;A baseline fro front-end developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://leandrooriente.com/como-me-tornar-um-desenvolvedor-front-end/&#34;&gt;Como se tornar um desenvolvedor front-end&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emmet LiveStyle</title>
      <link>https://tableless.github.io/hugo-public/emmet-livestyle/</link>
      <pubDate>Tue, 06 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/emmet-livestyle/</guid>
      <description>&lt;p&gt;Dos mesmos criadores de &lt;a href=&#34;http://tableless.com.br/bye-zen-coding-bem-vindo-emmet/&#34;&gt;Emmet&lt;/a&gt;, conheça o &lt;a href=&#34;http://livestyle.emmet.io&#34;&gt;Emmet LiveStyle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O Emmet LiveStyle é um plugin que permite que ao editar o código CSS você veja as alterações na hora, on the fly!&lt;/p&gt;

&lt;p&gt;A iniciativa é simples e você já deve ter visto milhares de outras iniciativas, mas agora eu acho que fizeram do jeito correto. A ideia de um editor bidirecional é que a partir do momento que você edita o código CSS, você consegue ver as alterações na hora, economizando o tempo de alternar janelas, salvar arquivos e etc. Não importa também se você altera o CSS direto no browser ou no seu editor, as modificações serão sincronizadas nessas duas interfaces. O Emmet LiveStyle não altera seu código fonte, ele apenas mapeia as mudanças, mantendo todo o código intacto mas aplicando suas modificações em cima do código já existente.&lt;/p&gt;

&lt;p&gt;Ele funciona em Chrome, Safari em conjunto com Sublime Text. Se você usa dois monitores, vai adorar e com certeza vai ser uma daquelas coisas que depois que se acostumar, nunca mais vai querer editar código de outra forma. Abaixo, veja um vídeo de demonstração:&lt;/p&gt;

&lt;p&gt;O pessoal listou em seu site algumas features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instant updates: see changes as-you-type. No file saving, no page reloading.&lt;/li&gt;
&lt;li&gt;No local files required.&lt;/li&gt;
&lt;li&gt;Cross-platform&lt;/li&gt;
&lt;li&gt;Multi-view and multi-device updates. You can open the same page in different windows and get instant updates in all of them. If your monitor large enough, you can easily tweak responsive design as never before! And yes, changes made in DevTools of one window will be automatically applied to other ones.&lt;/li&gt;
&lt;li&gt;Multi-site update. You can even live edit different web-sites, for example, desktop and mobile versions of you web-site that shares the same CSS code base.&lt;/li&gt;
&lt;li&gt;Extremely easy setup: just open CSS file in editor and associate it with the browser one in LiveStyle browser pane. No complex mappings, patterns etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leia as instruções e &lt;a href=&#34;http://livestyle.emmet.io/install/&#34;&gt;instale agora&lt;/a&gt; para testar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Medindo a complexidade do seu código JavaScript</title>
      <link>https://tableless.github.io/hugo-public/medindo-a-complexidade-ciclomatica-do-seu-codigo-javascript/</link>
      <pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/medindo-a-complexidade-ciclomatica-do-seu-codigo-javascript/</guid>
      <description>

&lt;p&gt;Já mostramos aqui no Tableless &lt;a href=&#34;http://tableless.com.br/testando-seu-codigo-jquery-com-jasmine-parte-1/&#34;&gt;ferramentas para testes&lt;/a&gt; e &lt;a href=&#34;http://tableless.com.br/qualidade-codigo-javascript/&#34;&gt;ferramentas para garantir o padrão do seu código JavaScript&lt;/a&gt;, mas, enquanto esses utilitários asseguram uma consistência maior, eles nem sempre acabam com complexidades desnecessárias.&lt;/p&gt;

&lt;p&gt;Neste artigo vamos falar sobre complexidade ciclomática e mostrar uma ferramenta para análise de códigos JavaScript, a biblioteca Plato.&lt;/p&gt;

&lt;h2 id=&#34;complexidade-ciclomática&#34;&gt;Complexidade Ciclomática&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A primeira regra de funções é que elas devem ser pequenas. A segunda regra de funções é que elas devem ser ainda menores.&lt;br /&gt;
&amp;mdash; Uncle Bob&lt;/p&gt;

&lt;p&gt;Funções devem fazer uma coisa apenas. Fazê-la bem. Fazer somente ela.&lt;br /&gt;
&amp;mdash; Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Explicando de forma bem direta, complexidade ciclomática é uma métrica do número de caminhos possíveis no seu código. Por exemplo, vejamos o código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function authenticate() {
  if (user.isValid() === true) { 
    user.login(); 
  } else { 
    showMessage(&#39;Invalid credentials&#39;, &#39;error&#39;); 
  } 
}&lt;/pre&gt;

&lt;p&gt;A função &lt;strong&gt;authenticate&lt;/strong&gt; possui valor &lt;strong&gt;2&lt;/strong&gt; de complexidade ciclomática. Na prática, isso quer dizer que precisaríamos escrever dois testes unitários para cobrir todos os possíveis caminhos. Ou seja, quanto mais caminhos, maior a complexidade ciclomática e, quanto maior a complexidade ciclomática, mais difícil será de manter/testar seu código.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mccabe.com/pdf/MeasuringSoftwareComplexityUAV.pdf&#34; target=&#34;_blank&#34;&gt;Estudos&lt;/a&gt; recomendam &lt;strong&gt;10&lt;/strong&gt; como o valor máximo que você deve permitir de complexidade ciclomática no seu método ou sua função. Este é um bom valor, mas tenha em mente que &lt;strong&gt;10&lt;/strong&gt; já é uma complexidade alta e não deve, de forma alguma, ser a média de complexidade do seu projeto.&lt;/p&gt;

&lt;h2 id=&#34;bad-fix&#34;&gt;Bad Fix&lt;/h2&gt;

&lt;p&gt;Outra métrica tirada a partir da complexidade ciclomática é a probabilidade de uma correção injetar novos bugs no seu código. O pessoal da Aivosto, uma empresa especializada em ferramentas para desenvolvedores, chegou a &lt;a href=&#34;http://www.aivosto.com/project/help/pm-complexity.html&#34; target=&#34;_blank&#34;&gt;seguinte tabela&lt;/a&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Complexidade Ciclomática
    &lt;/th&gt;
    
    &lt;th&gt;
      Probabilidade de &amp;#8220;bad fix&amp;#8221;
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      1-10
    &lt;/td&gt;
    
    &lt;td&gt;
      5%
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      20-30
    &lt;/td&gt;
    
    &lt;td&gt;
      20%
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &gt;50
    &lt;/td&gt;
    
    &lt;td&gt;
      40%
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      próximo de 100
    &lt;/td&gt;
    
    &lt;td&gt;
      60%
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Segundo a pesquisa da Aivosto, uma correção aplicada em um método com complexidade ciclomática 25 tem 20% de chances de introduzir um novo bug na sua aplicação. Tente lembrar quantas vezes isso já aconteceu com você? E tente lembrar também do tamanho do método ou função que você estava &amp;#8220;corrigindo&amp;#8221;. Por isso é muito importante tentar medir tudo a respeito do seu código.&lt;/p&gt;

&lt;h2 id=&#34;plato&#34;&gt;Plato&lt;/h2&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/complexityplato.jpg&#34; alt=&#34;complexityplato&#34; width=&#34;372&#34; height=&#34;396&#34; class=&#34;alignnone size-full wp-image-37790&#34; style=&#34;border: 1px solid #ccc&#34; srcset=&#34;uploads/2013/06/complexityplato.jpg 372w, uploads/2013/06/complexityplato-157x168.jpg 157w, uploads/2013/06/complexityplato-291x310.jpg 291w&#34; sizes=&#34;(max-width: 372px) 100vw, 372px&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Desenvolvida por Jarrod Overson, a ferramenta &lt;a href=&#34;https://github.com/jsoverson/plato&#34; target=&#34;_blank&#34;&gt;Plato&lt;/a&gt; aplica na prática todas as teorias de medição de complexidade ciclomática, exibindo na forma de gráficos dados como taxa de mantenabilidade, bugs estimados e erros de lint.&lt;/p&gt;

&lt;p&gt;A instalação é feita através do npm, gerenciador de pacotes do nodejs:&lt;/p&gt;

&lt;pre&gt;npm install -g plato&lt;/pre&gt;

&lt;p&gt;A forma mais básica de uso é a seguinte:&lt;/p&gt;

&lt;pre&gt;plato -d report src&lt;/pre&gt;

&lt;p&gt;Onde &lt;strong&gt;-d report&lt;/strong&gt; é a flag para indicar o diretório &lt;strong&gt;report&lt;/strong&gt; como saída do seu relatório e &lt;strong&gt;src&lt;/strong&gt; é o diretório dos arquivos JavaScript a serem analisados.&lt;/p&gt;

&lt;p&gt;Outras opções importantes são as flag &lt;strong&gt;-r&lt;/strong&gt; para ler o diretório recursivamente e &lt;strong&gt;-x &lt;regex&gt;&lt;/strong&gt; para excluir arquivos baseados em uma regex.&lt;/p&gt;

&lt;p&gt;Os relatórios do Plato armazenam históricos e é bem interessante ver os números subindo e descendo durante o desenvolvimento do seu projeto. Uma prática legal é guardar e exibir o relatório em algum lugar disponível para todo o seu time.&lt;/p&gt;

&lt;h2 id=&#34;exemplos-de-relatórios&#34;&gt;Exemplos de relatórios&lt;/h2&gt;

&lt;p&gt;Abaixo temos alguns exemplos de relatórios disponibilizados no repositório do projeto, gerados a partir de bibliotecas e utilitários populares:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jsoverson.github.com/plato/examples/jquery/&#34; target=&#34;_blank&#34;&gt;jquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsoverson.github.com/plato/examples/grunt/&#34; target=&#34;_blank&#34;&gt;grunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsoverson.github.com/plato/examples/marionette/&#34; target=&#34;_blank&#34;&gt;marionettejs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bugs-estimados&#34;&gt;Bugs estimados&lt;/h2&gt;

&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2013/06/bugs.jpg&#34; alt=&#34;bugs&#34; width=&#34;404&#34; height=&#34;246&#34; class=&#34;alignnone size-full wp-image-37786&#34; style=&#34;border: 1px solid #ccc&#34; srcset=&#34;uploads/2013/06/bugs.jpg 404w, uploads/2013/06/bugs-275x168.jpg 275w&#34; sizes=&#34;(max-width: 404px) 100vw, 404px&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Um gráfico que chama a atenção nos relatórios do Plato é o de bugs estimados. Afinal de contas, entregar um produto sem bugs é (ou deveria ser) o objetivo final de qualquer desenvolvedor.&lt;/p&gt;

&lt;p&gt;Maurice Howard Halstead criou um &lt;a href=&#34;http://www.amazon.com/Elements-Software-Science-Operating-programming/dp/0444002057&#34; target=&#34;_blank&#34;&gt;conjunto de fórmulas&lt;/a&gt; para medir coisas como volume, esforço, dificuldade e bugs estimados em um código. As fórmulas são baseadas nos números únicos e totais de operadores e operandos.&lt;/p&gt;

&lt;p&gt;Não vou entrar muito em detalhes sobre os valores e as fórmulas, mas é bem interessante ler sobre esse assunto (não precisa ser o livro, a Wikipedia mesmo fornece uma &lt;a href=&#34;http://en.wikipedia.org/wiki/Halstead_complexity_measures&#34; target=&#34;_blank&#34;&gt;página&lt;/a&gt; bem completa sobre as fórmulas).&lt;/p&gt;

&lt;h2 id=&#34;integração-com-grunt&#34;&gt;Integração com Grunt&lt;/h2&gt;

&lt;p&gt;Overson também desenvolveu um &lt;a href=&#34;https://github.com/jsoverson/grunt-plato&#34; target=&#34;_blank&#34;&gt;módulo&lt;/a&gt; que disponibiliza uma task Grunt para relatórios Plato.&lt;/p&gt;

&lt;p&gt;A instalação segue o padrão de pacotes Grunt:&lt;/p&gt;

&lt;pre&gt;npm install grunt-plato --save-dev&lt;/pre&gt;

&lt;p&gt;Uma vez instalado o pacote, basta carregar a task no seu &lt;strong&gt;Gruntfile.js&lt;/strong&gt; e rodar a task com o comando &lt;strong&gt;grunt plato&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;grunt.initConfig({
  plato: {
    your_task: {
      files: {
        &#39;report/output/directory&#39;: [&#39;src/**/*.js&#39;, &#39;test/**/*.js&#39;],
      }
    },
  },
});
grunt.loadNpmTasks(&#39;grunt-plato&#39;);&lt;/pre&gt;

&lt;h2 id=&#34;métricas-métricas-e-mais-métricas&#34;&gt;Métricas, métricas e mais métricas&lt;/h2&gt;

&lt;p&gt;Medir o código do seu projeto ajuda você e seu time a entender e prevenir problemas. Com a ajuda de métricas você vai conseguir manter um código fácil de ler e entender. Além de métricas dos níveis de complexidade também é importante possuir um relatório visível de cobertura de testes e uma documentação simples e direta do seu projeto.&lt;/p&gt;

&lt;p&gt;Apesar do nome pomposo e de muita teoria, não é pra ninguém ficar assustado. Pode parecer um conceito avançado, mas na verdade é uma coisa muito básica: o que você estará fazendo é medir se é fácil (ou difícil) manter o seu código.&lt;/p&gt;

&lt;p&gt;E lembrem-se: nunca refatore um código sem que ele possua uma cobertura de testes satisfatória!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando no GIT – Parte 1</title>
      <link>https://tableless.github.io/hugo-public/iniciando-no-git-parte-1/</link>
      <pubDate>Mon, 19 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-no-git-parte-1/</guid>
      <description>

&lt;p&gt;Não esqueça de ler a &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-2/&#34;&gt;segunda parte desse artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você não trabalha com nenhum controle de versão ainda ou nem sabe o que isso significa, dá uma lida &lt;a href=&#34;http://tableless.com.br/introducao-das-premissas-dos-controles-de-versao/&#34; title=&#34;Introdução das premissas dos controles de versão&#34;&gt;nesse texto antes de começarmos aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Controles de versão são sistemas que controlam o código gerado em projetos. Se você e mais alguém precisam editar o mesmo arquivo em um mesmo projeto, como você faz? Espera o primeiro editar, salvar e depois subir no FTP só para aí então você abrir o arquivo e fazer suas alterações?&lt;/p&gt;

&lt;p&gt;Esse cenário se repete em muitas empresas, de todos os tamanhos. Os controle de versão ajudam a resolver esse e outros problemas de gerenciamento de código e organização. Um dos controles de versão mais conhecidos é o GIT.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Git é um sistema de controle de versão distribuído com ênfase em velocidade. O Git foi inicialmente projetado e desenvolvido por Linus Torvalds para o desenvolvimento do kernel Linux. &amp;#8211; &lt;a href=&#34;http://pt.wikipedia.org/wiki/Git&#34;&gt;Wikipedia, GIT&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;como-funciona-o-git&#34;&gt;Como funciona o GIT?&lt;/h2&gt;

&lt;p&gt;Normalmente a maioria dos controles de versão guardam as mudanças do código como alterações de um determinado arquivo. Ou seja, a cada mudança no arquivo, o sistema guarda essa mudança apenas e não o arquivo inteiro.&lt;/p&gt;

&lt;p&gt;O Git pensa um pouco diferente: ele trata os dados como snapshots. Cada vez que commitamos (commitar é enviar alterações para o controle de versão) ou salva o estado do projeto no Git, ele basicamente guarda um snapshot de como todos os arquivos estão naquele momento e guarda a referência desse estado. Para os arquivos que não foram modificados, ele não guarda uma nova versão, ele apenas faz um link para a versão anterior idêntica que já foi guardada em outro momento.&lt;/p&gt;

&lt;p&gt;Esta imagem vem direto do GitHub. Fica mais fácil entender como ele atrela um commit no outro usando snapshots.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/gh-mac-app.png&#34; alt=&#34;Github&#34; width=&#34;1960&#34; height=&#34;1062&#34; class=&#34;alignnone size-full wp-image-40447&#34; srcset=&#34;uploads/2012/11/gh-mac-app.png 1960w, uploads/2012/11/gh-mac-app-310x168.png 310w, uploads/2012/11/gh-mac-app-572x310.png 572w&#34; sizes=&#34;(max-width: 1960px) 100vw, 1960px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;áreas-de-operação&#34;&gt;Áreas de operação&lt;/h2&gt;

&lt;p&gt;Os locais de operação são as áreas onde os arquivos irão transitar enquanto estão sendo editados e modificados. São 3: Working Directory, Stage Area, Git directory.&lt;/p&gt;

&lt;p&gt;O Git Directory é onde o Git guarda os dados e objetos do seu projeto. Ele é o diretório mais importante do Git e é ele que será copiado quando alguém clonar (clonar é copiar o projeto para a sua máquina) o projeto.&lt;/p&gt;

&lt;p&gt;O Work Directory é onde você vai trabalhar. Os arquivos ficam aí para poderem ser usados e alterados quantas vezes quiser para você. É basicamente sua pasta de arquivos dos projeto.&lt;/p&gt;

&lt;p&gt;Quando você faz uma alteração em algum arquivo, ele vai para o Staging Area, que é uma área intermediária. Basicamente o Staging Area contém o Git Directory com os arquivos modificados, onde ele guarda as informações sobre o que vai no seu próximo commit. Veja a imagem abaixo direto do &lt;a href=&#34;http://git-scm.com/&#34;&gt;site do Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-7264&#34; title=&#34;18333fig0106-tn&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/18333fig0106-tn.png&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;460&#34; srcset=&#34;uploads/2012/11/18333fig0106-tn.png 500w, uploads/2012/11/18333fig0106-tn-300x276.png 300w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-git&#34;&gt;Instalando o Git&lt;/h2&gt;

&lt;p&gt;Se você tem Windows &lt;a href=&#34;http://code.google.com/p/msysgit&#34;&gt;baixe o EXE direto deste link&lt;/a&gt; e instale.&lt;/p&gt;

&lt;p&gt;Ele vai instalar para você os comandos do Git para serem usados no terminal e uma uma interface padrão para quem não está acostumado a usar linhas de comando.&lt;/p&gt;

&lt;p&gt;No Mac você tem vários caminhos, &lt;a href=&#34;http://code.google.com/p/git-osx-installer&#34;&gt;baixando o installer&lt;/a&gt;, usando Macports:&lt;/p&gt;

&lt;pre&gt;$ sudo port install git-core +svn +doc +bash_completion +gitweb&lt;/pre&gt;

&lt;p&gt;E até mesmo usando Brew.&lt;/p&gt;

&lt;pre&gt;brew install git&lt;/pre&gt;

&lt;p&gt;Com Linux eu preciso falar? 😉&lt;/p&gt;

&lt;p&gt;Yum.&lt;/p&gt;

&lt;pre&gt;$ yum install git-core&lt;/pre&gt;

&lt;p&gt;Ou apt-get.&lt;/p&gt;

&lt;pre&gt;$ apt-get install git-core&lt;/pre&gt;

&lt;h2 id=&#34;configurando-suas-informações&#34;&gt;Configurando suas informações&lt;/h2&gt;

&lt;p&gt;A primeira coisa que você deve fazer depois de instalar o Git é definir seu usarname e email. Isso é importante por que os seus commits usarão essas informações para identificar o autor das mudanças. Pois é&amp;#8230; Se alguém fizer alguma merda no projeto e quebrar todo o sistema, é possível saber quem, quando e qual linha foi o autor do apocalipse.&lt;/p&gt;

&lt;p&gt;É simples, no terminal escreva:&lt;/p&gt;

&lt;pre&gt;$ git config --global user.name &#34;John Doe&#34;
$ git config --global user.email johndoe@example.com
&lt;/pre&gt;

&lt;h2 id=&#34;controlando-um-projeto&#34;&gt;Controlando um projeto&lt;/h2&gt;

&lt;p&gt;Pelo terminal mesmo, entre na pasta do projeto que você quer iniciar o controle e use o comando:&lt;/p&gt;

&lt;pre&gt;git init&lt;/pre&gt;

&lt;p&gt;Esse comando vai criar um diretório invisível dentro do projeto chamado &lt;strong&gt;.git&lt;/strong&gt;. Ele contém todos os arquivos necessários do seu repositório. Aqui, neste ponto, nada dos seus arquivos ainda estão sendo controlados. Você apenas criou um &amp;#8220;lugar&amp;#8221; (branch) para o Git colocar os arquivos.&lt;/p&gt;

&lt;p&gt;O próximo comando vai inserir os arquivos que você quer controlar. Normalmente a gente controla TUDO o que está no projeto. Mas isso tem que ser combinado com a equipe antes. Em um projeto que envolve um CMS com o WordPress, por exemplo, é normal controlar tudo, até os arquivos do WordPress. Mas se em um projeto você guarda pastas de layouts, pastas de wireframes, protótipos e etc, é interessante não colocar isso no Git. Mas aí vai de equipe para equipe, de projeto pra projeto.&lt;/p&gt;

&lt;p&gt;O comando para adicionar os arquivos é:&lt;/p&gt;

&lt;pre&gt;git add .&lt;/pre&gt;

&lt;p&gt;Para você ver o status, use o comando &lt;strong&gt;git status&lt;/strong&gt;, aí você verá tudo o que foi incluído no projeto. Veja o screenshot abaixo para ter uma ideia:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/Screen-Shot-2012-11-19-at-11.21.33-AM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Feito isso você vai precisar inserir seu primeiro commit. Vamos dar mais detalhes sobre o comando commit no próximo artigo, por agora fique com essa linha:&lt;/p&gt;

&lt;pre&gt;git commit -m &#34;Primeiro commit - Inserindo os arquivos iniciais do projeto&#34;&lt;/pre&gt;

&lt;p&gt;Agora você mandou uma alteração para o Git.&lt;/p&gt;

&lt;h3 id=&#34;clonando-um-projeto&#34;&gt;Clonando um projeto&lt;/h3&gt;

&lt;p&gt;Pode ser que já exista um projeto no Git criado e você só precise clonar para seu computador. Para isso você vai usar o comando &lt;strong&gt;git clone&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quando você clona um projeto, o Git recebe a cópia de todos os dados que tem no servidor. Cada versão de cada arquivo da história inteira do projeto é puxada quando você roda o comando &lt;strong&gt;git clone&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para clonar um projeto você precisa ter a URL do Git daquele projeto em específico. O comando completo fica mais ou menos assim:&lt;/p&gt;

&lt;pre&gt;git clone https://github.com/tableless/exemplos.git&lt;/pre&gt;

&lt;p&gt;Pode testar com o endereço acima. Ele é nosso diretório do Git de exemplos no GitHub.&lt;/p&gt;

&lt;p&gt;No próximo artigo a gente mostra os comandos &lt;strong&gt;commit&lt;/strong&gt;, &lt;strong&gt;push&lt;/strong&gt; e &lt;strong&gt;pull&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Veja um vídeo que mostra os comandos básicos do GIT:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Assegurando a qualidade do seu código JavaScript</title>
      <link>https://tableless.github.io/hugo-public/qualidade-codigo-javascript/</link>
      <pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/qualidade-codigo-javascript/</guid>
      <description>

&lt;p&gt;Enquanto &lt;a href=&#34;http://tableless.com.br/testando-seu-codigo-jquery-com-jasmine-parte-1/&#34; target=&#34;_blank&#34;&gt;testes automatizados&lt;/a&gt; asseguram o funcionamento de suas aplicações e, portanto, também a qualidade, algumas ferramentas atuam em outra área importante do seu código: a sintaxe.&lt;/p&gt;

&lt;p&gt;Ferramentas de lint são scripts que interpretam seus arquivos javascript e buscam erros como varáveis não utilizadas, espaços em branco no final de linha, ausência de ponto-e-vírgula (um ponto polêmico) entre outros.&lt;/p&gt;

&lt;p&gt;Abaixo você encontra alguns utilitários que buscam garantir melhor qualidade e padrão para seus códigos.&lt;/p&gt;

&lt;p&gt;É importante ressaltar que esse tipo de ferramenta &lt;em&gt;não&lt;/em&gt; garante que seu código está funcionando, que a lógica está correta, garante apenas a presença de boas práticas de desenvolvimento.&lt;/p&gt;

&lt;h2 id=&#34;jslint&#34;&gt;JSLint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jslint.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.jslint.com/&#34;&gt;http://www.jslint.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desenvolvida por ninguém menos do que Douglas Crockford, pai do famoso &amp;#8220;The Good Parts&amp;#8221;, esta ferramenta busca tanto erros de sintaxe, como erros estruturais.&lt;/p&gt;

&lt;p&gt;As regras e convenções utilizadas na análise podem ser encontradas no site &lt;a href=&#34;http://javascript.crockford.com/code.html&#34; target=&#34;_blank&#34;&gt;javascript.crockford.com/code.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você pode utilizar a &lt;a href=&#34;http://www.jslint.com/&#34; target=&#34;_blank&#34;&gt;versão online da ferramenta&lt;/a&gt;, ou então instalar o script através do gerenciador de pacotes do NodeJS (npm). O código-fonte está &lt;a href=&#34;https://github.com/douglascrockford/JSLint&#34; target=&#34;_blank&#34;&gt;disponível no GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/07/gjslint.jpg&#34; alt=&#34;&#34; width=&#34;605&#34; height=&#34;439&#34; class=&#34;alignnone size-full wp-image-6383&#34; srcset=&#34;uploads/2012/07/gjslint.jpg 605w, uploads/2012/07/gjslint-300x217.jpg 300w&#34; sizes=&#34;(max-width: 605px) 100vw, 605px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;jshint&#34;&gt;JSHint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jshint.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.jshint.com/&#34;&gt;http://www.jshint.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A ferramenta JSHint teve início como um &lt;em&gt;fork&lt;/em&gt; da JSLint, visando uma maior flexibilidade, permitindo configurações de acordo com necessidades específicas.&lt;/p&gt;

&lt;p&gt;A documentação do projeto inclui uma &lt;a href=&#34;http://www.jshint.com/options/&#34; target=&#34;_blank&#34;&gt;página de opções disponíveis&lt;/a&gt; para essa personalização.&lt;/p&gt;

&lt;p&gt;Assim como a JSLint, a JSHint pode &lt;a href=&#34;http://www.jshint.com/&#34; target=&#34;_blank&#34;&gt;analisar seu código online&lt;/a&gt; ou pode ser instalada via NPM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/07/jshint.jpg&#34; alt=&#34;&#34; width=&#34;770&#34; height=&#34;361&#34; class=&#34;alignnone size-full wp-image-6385&#34; srcset=&#34;uploads/2012/07/jshint.jpg 770w, uploads/2012/07/jshint-300x140.jpg 300w&#34; sizes=&#34;(max-width: 770px) 100vw, 770px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;closure-linter&#34;&gt;Closure Linter&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/closure/utilities/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://developers.google.com/closure/utilities/&#34;&gt;https://developers.google.com/closure/utilities/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Diferentemente das ferramentas anteriores, a Closure Linter obriga o uso do estilo JavaScript defendido pela Google. É utilizada em todos os projetos da empresa, incluindo Gmail, Docs e Reader.&lt;/p&gt;

&lt;p&gt;Também diferentemente das anteriores, a Closure Linter vem acompanhada de um script para corrigir os erros encontrados. Ou seja, ela não apenas indica o que está errado, como também oferece uma maneira de &amp;#8220;corrigir&amp;#8221; seu código automaticamente.&lt;/p&gt;

&lt;p&gt;Os utilitários podem ser baixados na &lt;a href=&#34;https://developers.google.com/closure/utilities/&#34; target=&#34;_blank&#34;&gt;página do projeto no Google Code&lt;/a&gt;. O script &lt;em&gt;gjslint&lt;/em&gt; é o responsável pela análise de código enquanto o &lt;em&gt;fixjsstyle&lt;/em&gt; corrige os erros encontrados.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/07/gjslint.jpg&#34; alt=&#34;&#34; width=&#34;605&#34; height=&#34;439&#34; class=&#34;alignnone size-full wp-image-6383&#34; srcset=&#34;uploads/2012/07/gjslint.jpg 605w, uploads/2012/07/gjslint-300x217.jpg 300w&#34; sizes=&#34;(max-width: 605px) 100vw, 605px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;jquery-lint&#34;&gt;jQuery Lint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://james.padolsey.com/javascript/jquery-lint/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://james.padolsey.com/javascript/jquery-lint/&#34;&gt;http://james.padolsey.com/javascript/jquery-lint/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para finalizar, uma ferramenta para os fãs de jQuery que analisa a sintaxe e a estrutura. Ela funciona de forma diferente das demais: sua aplicação é feita na página, ou seja, o script deve ser chamado após o código da sua aplicação, A resposta é enviada para o console do navegador.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script src=&#34;aplicacao.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&#34;jquery.lint.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;É altamente configurável e pode ser adaptada para os padrões de desenvolvimento do seu projeto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/07/jquerylint.jpg&#34; alt=&#34;&#34; width=&#34;366&#34; height=&#34;149&#34; class=&#34;alignnone size-full wp-image-6384&#34; srcset=&#34;uploads/2012/07/jquerylint.jpg 366w, uploads/2012/07/jquerylint-300x122.jpg 300w&#34; sizes=&#34;(max-width: 366px) 100vw, 366px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O código-fonte do projeto está disponível no GitHub: &lt;a href=&#34;https://github.com/padolsey/jQuery-Lint&#34; target=&#34;_blank&#34;&gt;github.com/padolsey/jQuery-Lint&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Não “otimize” seu código</title>
      <link>https://tableless.github.io/hugo-public/nao-otimize-seu-codigo/</link>
      <pubDate>Sun, 09 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/nao-otimize-seu-codigo/</guid>
      <description>&lt;p&gt;Quando fazíamos sites com tabelas, o grande problema era a quantidade de código que escrevíamos. Naquele tempo – 1996, 97, 98 – tínhamos outros pontos que precisavam de uma atenção maior. A conexão era lerda para todo mundo e isso dificultava um bocado as coisas. Por isso, fazer um site pesado era fora de cogitação. Ficávamos “mendigando” cada byte para que o site ficasse milésimos de segundo mais rápido.&lt;/p&gt;

&lt;p&gt;O código era o grande problema. A quantidade de código interferia diretamente na performance do site. E isso fez com que os desenvolvedores encontrassem saídas não muito agradáveis.&lt;/p&gt;

&lt;p&gt;Era comum fazer códigos como o de baixo:&lt;/p&gt;

&lt;pre lang=&#34;html&#34; line=&#34;1&#34;&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Produto
    &lt;/th&gt;
       
    
    &lt;th&gt;
      Preço
    &lt;/th&gt;
     
  &lt;/tr&gt;
   
  
  &lt;tr&gt;
    &lt;td&gt;
      Tênis
    &lt;/td&gt;
       
    
    &lt;td&gt;
      R$230
    &lt;/td&gt;
     
  &lt;/tr&gt;
  
&lt;/table&gt;
&lt;/pre&gt;

&lt;p&gt;Se transformarem em verdadeiros monstros:&lt;/p&gt;

&lt;pre lang=&#34;1&#34;&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Produto
    &lt;/th&gt;
    
    &lt;th&gt;
      Preço
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Tênis
    &lt;/td&gt;
    
    &lt;td&gt;
      R$230
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/pre&gt;

&lt;p&gt;Isso tudo para economizar alguns bytes, que dependendo do site, significavam teras e teras de banda por mês. Naquele tempo, fazer isso era totalmente justificável. Precisávamos de alguma forma diminuir esse código para que o site ficasse mais rápido para o usuário e as requisições não sobrecarregassem o servidor.&lt;/p&gt;

&lt;p&gt;Hoje isso é totalmente dispensável.&lt;/p&gt;

&lt;p&gt;Aprendemos a utilizar o CSS e sabemos escrever HTML semântico.&lt;/p&gt;

&lt;p&gt;A utilização dos Padrões trazem uma série de vantagens, e uma grande parte dessas vantagens são por causa da diminuição do código. Com o desenvolvimento de camadas e principalmente por causa do uso do CSS, não precisamos mais “otimizar” o código.&lt;/p&gt;

&lt;p&gt;Mas parece que os desenvolvedores gostam de coisas complicadas. Esse mal costume de otimização de código ainda existe, e hoje querem otimizar o CSS. Eu acho totalmente inútil. O CSS foi feito para controlar o visual do site inteiro. Ele tirou a responsabilidade de formatação que colocávamos no HTML. Seu trabalho é exclusivamente esse: controlar o visual e diagramação do site.&lt;/p&gt;

&lt;p&gt;É normal ele ficar grande, enorme, bizarro! Sim, haverão alguns casos que o tamanho superará mais de 1000, 2000, 3000, 4000 linhas.&lt;/p&gt;

&lt;p&gt;Dá para evitar? Claro que dá! Pense simples. &lt;a href=&#34;http://tableless.com.br/modulando-o-css&#34; title=&#34;Modulação de CSS&#34;&gt;Module os arquivos&lt;/a&gt;. Faça um planejamento. Mas NUNCA faça com que um CSS escrito assim:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;div {
 padding: 10px;
 border: 1px solid #CCC;
 width: 485px;
 height: 37px;
 background: #EEE;
}
&lt;/pre&gt;

&lt;p&gt;Fique assim:&lt;/p&gt;

&lt;pre lang=&#34;css&#34; line=&#34;1&#34;&gt;div{padding:10px;border:1px solid #CCC;width:485px;height:37px;background:#EEE}
&lt;/pre&gt;

&lt;p&gt;Tenha dó do seu próximo e tenha dó de você mesmo.&lt;/p&gt;

&lt;p&gt;Se você escreve o código de acordo com os Padrões, já economizou código suficiente. Não prejudique a manutenção do site por conta dessa neura. Escreva código legível!&lt;/p&gt;

&lt;p&gt;Há outro ponto que devemos levar em consideração: imagine que o site pese 40Kb. Estes 40Kb são compostos por 20Kb de CSS e 20Kb de HTML. O CSS tem uma característica interessante: ele é cacheado pelo browser quando visitante entra no site.&lt;/p&gt;

&lt;p&gt;Na primeira visita do usuário ele baixará 40Kb de uma vez. Já na segunda visita ele baixará apenas 20Kb relativos ao HTML. Ele não precisará baixar os 20Kb de CSS porque o arquivo já está cacheado pelo browser.&lt;/p&gt;

&lt;p&gt;Não “otimize” seu código CSS, nem seu código HTML. Faça apenas com Padrões Web e siga categoricamente a semântica. É a melhor otimização que você pode conseguir.&lt;/p&gt;

&lt;p&gt;O Leonardo Caineli &lt;a href=&#34;http://leonardocaineli.com.br/dicas-para-otimizar-seu-css/&#34;&gt;escreveu um artigo sobre isso&lt;/a&gt;. Claro, discordo da opinião dele.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[update]&lt;/strong&gt;Depois do post o pessoal chamou a atenção para essa prática em empresas grandes. Notei que no post eu não falei nada sobre isso. Sim, concordo que essa prática, só nessa hipótese, é totalmente considerável.&lt;/p&gt;

&lt;p&gt;Quando treinei a primeira equipe do Terra &amp;#8211; da época do site laranjão, lembra-se? &amp;#8211; a primeira coisa que eles fizeram foi converter a home, e eles ainda sim queriam colocar todo o CSS em apenas uma linha.&lt;/p&gt;

&lt;p&gt;Realmente 1Kb multiplicado por milhões é coisa para caramba e não há banda que agüente. Por isso, é totalmente aceitável que sites com um porte muito grande, &amp;#8220;otimizem&amp;#8221; seu código. &lt;strong&gt;[/update]&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Podcast Tableless #21 – Desenvolvimento em camadas</title>
      <link>https://tableless.github.io/hugo-public/podcast-tableless-21-desenvolvimento-em-camadas/</link>
      <pubDate>Thu, 17 Aug 2006 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/podcast-tableless-21-desenvolvimento-em-camadas/</guid>
      <description>

&lt;p&gt;O Tableless está tentando voltar com os &lt;a href=&#34;http://tableless.com.br/categorias/pratica/podcasts/&#34;&gt;podcasts&lt;/a&gt;. Para me ajudar nesta empreitada &amp;#8211; que promete ser firme e semanal! 😮 &amp;#8211; chamei o Bruno Torres.&lt;/p&gt;

&lt;p&gt;Estamos tentando remodelar o podcast para que possamos fazer toda semana. Não iremos passar tempo dissecando vários assuntos longos, mas vamos sempre bater papo sobre um assunto específico, que seja de interesse geral. Isso fará com que o tempo do podcast fique menor e mais relevante.&lt;/p&gt;

&lt;p&gt;Para o podcast ficar mais adequado, gostaríamos que vocês usuários enviassem comentários e emails com dúvidas fáceis, que possam ser respondidas sem ter que mostrar com código e etc. Portanto, nada de dúvidas como: &amp;#8211; Como faço um layout de três colunas? Tentei mas não funcionou no IE&amp;#8230; etc etc etc.&lt;/p&gt;

&lt;p&gt;Iremos selecionar as dúvidas e respondê-las. Iremos citar o nome do camarada, a pergunta e tudo mais&amp;#8230; como manda o figurino.&lt;/p&gt;

&lt;p&gt;Tentaremos também, na medida do possível, chamar de vez em quando um ou dois ouvintes para fazer o podcast conosco. Iremos amadurecer a idéia, mas pode dar muito certo. Ficará mais dinâmico e menos monótono, já que vocês não irão ouvir só a voz medonha do Bruno e minha voz maravilhosa.&lt;/p&gt;

&lt;p&gt;Devagarinho iremos acrescentar mais novidades ao podcast. Espero que agora ele consiga ser realmente semanal. Para isso, precisamos da colaboração de vocês.&lt;/p&gt;

&lt;p&gt;Falando sinceramente, este primeiro podcast desta nova série ficou um pouco sem graça. O assunto não é polêmico, eu e o Bruno concordamos com tudo. Mas acredite, não será sempre assim.&lt;/p&gt;

&lt;p&gt;Falamos um pouco sobre Desenvolvimento em Camadas. Desenvolver em camadas é um dos primeiros passos e um dos mais importantes para uma vida plena usando os padrões.&lt;/p&gt;

&lt;p&gt;[O Tableless está tentando voltar com os &lt;a href=&#34;http://tableless.com.br/categorias/pratica/podcasts/&#34;&gt;podcasts&lt;/a&gt;. Para me ajudar nesta empreitada &amp;#8211; que promete ser firme e semanal! 😮 &amp;#8211; chamei o Bruno Torres.&lt;/p&gt;

&lt;p&gt;Estamos tentando remodelar o podcast para que possamos fazer toda semana. Não iremos passar tempo dissecando vários assuntos longos, mas vamos sempre bater papo sobre um assunto específico, que seja de interesse geral. Isso fará com que o tempo do podcast fique menor e mais relevante.&lt;/p&gt;

&lt;p&gt;Para o podcast ficar mais adequado, gostaríamos que vocês usuários enviassem comentários e emails com dúvidas fáceis, que possam ser respondidas sem ter que mostrar com código e etc. Portanto, nada de dúvidas como: &amp;#8211; Como faço um layout de três colunas? Tentei mas não funcionou no IE&amp;#8230; etc etc etc.&lt;/p&gt;

&lt;p&gt;Iremos selecionar as dúvidas e respondê-las. Iremos citar o nome do camarada, a pergunta e tudo mais&amp;#8230; como manda o figurino.&lt;/p&gt;

&lt;p&gt;Tentaremos também, na medida do possível, chamar de vez em quando um ou dois ouvintes para fazer o podcast conosco. Iremos amadurecer a idéia, mas pode dar muito certo. Ficará mais dinâmico e menos monótono, já que vocês não irão ouvir só a voz medonha do Bruno e minha voz maravilhosa.&lt;/p&gt;

&lt;p&gt;Devagarinho iremos acrescentar mais novidades ao podcast. Espero que agora ele consiga ser realmente semanal. Para isso, precisamos da colaboração de vocês.&lt;/p&gt;

&lt;p&gt;Falando sinceramente, este primeiro podcast desta nova série ficou um pouco sem graça. O assunto não é polêmico, eu e o Bruno concordamos com tudo. Mas acredite, não será sempre assim.&lt;/p&gt;

&lt;p&gt;Falamos um pouco sobre Desenvolvimento em Camadas. Desenvolver em camadas é um dos primeiros passos e um dos mais importantes para uma vida plena usando os padrões.&lt;/p&gt;

&lt;p&gt;]&lt;a href=&#34;http://tableless.com.br/podcast/podcast-tableless-21.mp3&#34; title=&#34;Podcast Tableless #21&#34;&gt;2&lt;/a&gt; Tempo: ~28m15&lt;/p&gt;

&lt;p&gt;Tamanho: ~10Mb&lt;/p&gt;

&lt;p&gt;Formato: Mp3&lt;/p&gt;

&lt;p&gt;Iremos na medida do possível acertar o som. O som sempre foi um dos maiores problemas de podcasts feitos remotamente com vários usuários. Há uma certa dificuldade de acertar o som sem que cause grandes estragos, já que o volume de cada participante é diferente&amp;#8230;. há ruídos e etc. Portanto, um bocado de paciência.&lt;/p&gt;

&lt;h3 id=&#34;links-relacionados&#34;&gt;Links relacionados&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.456bereastreet.com/archive/200608/malicious_javascript_yet_another_reason_for_graceful_degradation/&#34;&gt;Javascript Malicioso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://obasicodaweb.com/arquivo/padroes-web-desenvolvimento-em-camadas-camada-de-comportamento&#34;&gt;Desenvolvimento em camadas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[O Tableless está tentando voltar com os &lt;a href=&#34;http://tableless.com.br/categorias/pratica/podcasts/&#34;&gt;podcasts&lt;/a&gt;. Para me ajudar nesta empreitada &amp;#8211; que promete ser firme e semanal! 😮 &amp;#8211; chamei o Bruno Torres.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estamos tentando remodelar o podcast para que possamos fazer toda semana. Não iremos passar tempo dissecando vários assuntos longos, mas vamos sempre bater papo sobre um assunto específico, que seja de interesse geral. Isso fará com que o tempo do podcast fique menor e mais relevante.&lt;/p&gt;

&lt;p&gt;Para o podcast ficar mais adequado, gostaríamos que vocês usuários enviassem comentários e emails com dúvidas fáceis, que possam ser respondidas sem ter que mostrar com código e etc. Portanto, nada de dúvidas como: &amp;#8211; Como faço um layout de três colunas? Tentei mas não funcionou no IE&amp;#8230; etc etc etc.&lt;/p&gt;

&lt;p&gt;Iremos selecionar as dúvidas e respondê-las. Iremos citar o nome do camarada, a pergunta e tudo mais&amp;#8230; como manda o figurino.&lt;/p&gt;

&lt;p&gt;Tentaremos também, na medida do possível, chamar de vez em quando um ou dois ouvintes para fazer o podcast conosco. Iremos amadurecer a idéia, mas pode dar muito certo. Ficará mais dinâmico e menos monótono, já que vocês não irão ouvir só a voz medonha do Bruno e minha voz maravilhosa.&lt;/p&gt;

&lt;p&gt;Devagarinho iremos acrescentar mais novidades ao podcast. Espero que agora ele consiga ser realmente semanal. Para isso, precisamos da colaboração de vocês.&lt;/p&gt;

&lt;p&gt;Falando sinceramente, este primeiro podcast desta nova série ficou um pouco sem graça. O assunto não é polêmico, eu e o Bruno concordamos com tudo. Mas acredite, não será sempre assim.&lt;/p&gt;

&lt;p&gt;Falamos um pouco sobre Desenvolvimento em Camadas. Desenvolver em camadas é um dos primeiros passos e um dos mais importantes para uma vida plena usando os padrões.&lt;/p&gt;

&lt;p&gt;[O Tableless está tentando voltar com os &lt;a href=&#34;http://tableless.com.br/categorias/pratica/podcasts/&#34;&gt;podcasts&lt;/a&gt;. Para me ajudar nesta empreitada &amp;#8211; que promete ser firme e semanal! 😮 &amp;#8211; chamei o Bruno Torres.&lt;/p&gt;

&lt;p&gt;Estamos tentando remodelar o podcast para que possamos fazer toda semana. Não iremos passar tempo dissecando vários assuntos longos, mas vamos sempre bater papo sobre um assunto específico, que seja de interesse geral. Isso fará com que o tempo do podcast fique menor e mais relevante.&lt;/p&gt;

&lt;p&gt;Para o podcast ficar mais adequado, gostaríamos que vocês usuários enviassem comentários e emails com dúvidas fáceis, que possam ser respondidas sem ter que mostrar com código e etc. Portanto, nada de dúvidas como: &amp;#8211; Como faço um layout de três colunas? Tentei mas não funcionou no IE&amp;#8230; etc etc etc.&lt;/p&gt;

&lt;p&gt;Iremos selecionar as dúvidas e respondê-las. Iremos citar o nome do camarada, a pergunta e tudo mais&amp;#8230; como manda o figurino.&lt;/p&gt;

&lt;p&gt;Tentaremos também, na medida do possível, chamar de vez em quando um ou dois ouvintes para fazer o podcast conosco. Iremos amadurecer a idéia, mas pode dar muito certo. Ficará mais dinâmico e menos monótono, já que vocês não irão ouvir só a voz medonha do Bruno e minha voz maravilhosa.&lt;/p&gt;

&lt;p&gt;Devagarinho iremos acrescentar mais novidades ao podcast. Espero que agora ele consiga ser realmente semanal. Para isso, precisamos da colaboração de vocês.&lt;/p&gt;

&lt;p&gt;Falando sinceramente, este primeiro podcast desta nova série ficou um pouco sem graça. O assunto não é polêmico, eu e o Bruno concordamos com tudo. Mas acredite, não será sempre assim.&lt;/p&gt;

&lt;p&gt;Falamos um pouco sobre Desenvolvimento em Camadas. Desenvolver em camadas é um dos primeiros passos e um dos mais importantes para uma vida plena usando os padrões.&lt;/p&gt;

&lt;p&gt;]&lt;a href=&#34;http://tableless.com.br/podcast/podcast-tableless-21.mp3&#34; title=&#34;Podcast Tableless #21&#34;&gt;2&lt;/a&gt; Tempo: ~28m15&lt;/p&gt;

&lt;p&gt;Tamanho: ~10Mb&lt;/p&gt;

&lt;p&gt;Formato: Mp3&lt;/p&gt;

&lt;p&gt;Iremos na medida do possível acertar o som. O som sempre foi um dos maiores problemas de podcasts feitos remotamente com vários usuários. Há uma certa dificuldade de acertar o som sem que cause grandes estragos, já que o volume de cada participante é diferente&amp;#8230;. há ruídos e etc. Portanto, um bocado de paciência.&lt;/p&gt;

&lt;h3 id=&#34;links-relacionados-1&#34;&gt;Links relacionados&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.456bereastreet.com/archive/200608/malicious_javascript_yet_another_reason_for_graceful_degradation/&#34;&gt;Javascript Malicioso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://obasicodaweb.com/arquivo/padroes-web-desenvolvimento-em-camadas-camada-de-comportamento&#34;&gt;Desenvolvimento em camadas&lt;/a&gt;
*]&lt;a href=&#34;http://elcio.com.br/crossbrowser/#7&#34;&gt;5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Você pode ouvir as outras edições do podcast do Tableless, basta visitar o link: &lt;a href=&#34;http://tableless.com.br/categorias/pratica/podcasts/&#34;&gt;http://tableless.com.br/categorias/pratica/podcasts/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>