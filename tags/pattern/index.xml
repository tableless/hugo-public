<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pattern on Tableless</title>
    <link>http://tableless.com.br/tags/pattern/index.xml</link>
    <description>Recent content in Pattern on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/pattern/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Design Patterns em JavaScript – Observer</title>
      <link>http://tableless.com.br/design-patterns-em-javascript-observer/</link>
      <pubDate>Fri, 19 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/design-patterns-em-javascript-observer/</guid>
      <description>

&lt;h2 id=&#34;o-que-é-design-patterns&#34;&gt;O que é Design Patterns?&lt;/h2&gt;

&lt;p&gt;Desenvolver um software é se deparar constantemente com problemas. Esses problemas surgem em diversas situações e em grande quantidade. Em termos simples: nos deparamos várias vezes com um mesmo problema em diversas situações em momentos diferentes no mesmo projeto.&lt;/p&gt;

&lt;p&gt;Se os problemas são sempre os mesmos as soluções se repetem. Mas é muito comum darmos as mesmos soluções aos mesmos problemas de formas diferentes; isto porque não padronizamos soluções para problemas que sempre estamos resolvendo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Padronizar soluções é a melhor forma de resolver problemas durante o desenvolvimento de softwares.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em linguagens orientadas a objetos temos a disposição uma série de padrões que auxiliar na criação de objetos, na forma como eles se relacionam e nos comportamentos que eles podem adotar. Em JavaScript não é diferente. Nós podemos implementar padrões com o objetivos de auxiliar o processo de desenvolvimentos nestes aspectos.&lt;/p&gt;

&lt;p&gt;Vamos falar um pouco sobre um padrão de estrutura JavaScript chamada Observer.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-design-pattern-observer&#34;&gt;O que é o Design Pattern Observer?&lt;/h2&gt;

&lt;p&gt;Um Observer é um padrão que possibilita a um objeto observar o estado de outro objeto, sendo notificado quando ele muda de estado. Portando, existem dois papéis neste padrão de desenvolvimento: o observador e o observado. No entanto, esta relação pode ter múltiplos objetos observadores e múltiplos observados. Uma característica deste padrão, que o torna poderoso, é o &lt;strong&gt;acoplamento fraco&lt;/strong&gt;; o objeto observado e o observador podem ter seu acoplamento desfeito em tempo de execução a qualquer momento.&lt;/p&gt;

&lt;h2 id=&#34;implementando-o-design-pattern-observer&#34;&gt;Implementando o Design Pattern Observer?&lt;/h2&gt;

&lt;p&gt;Vamos à pratica do padrão! Nós criaremos um objeto que será responsável por gerenciar o relacionamento entre os objetos observados e observadores.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var observador&lt;/pre&gt;

&lt;p&gt;O objeto &lt;code&gt;observador&lt;/code&gt; terá quatro métodos: o primeiro método é responsável pela assinatura dos objetos observadores à objetos observados. Estes são adicionados a uma lista de objetos inscritos, conforme podemos ver abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;observador = {
    adicionaInscricao: function(callback){
                 this.inscritos[this.inscritos.length] = callback;
               }
   }
&lt;/pre&gt;

&lt;p&gt;O segundo método remove a inscrição de objeto na estrutura de um observer. Esta  possibilidade torna possível, não somente a adição, mas também a remoção de uma inscrição em tempo de execução.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;observador = {
    adicionaInscricao: function(callback){
                 this.inscritos[this.inscritos.length] = callback;
               },
   removeInscricao: function(callback){
                 for (var i = 0; i &amp;lt; this.inscritos.length; i++) {
                     if (this.inscritos[i] === callback) {
                          delete(this.inscritos[i]);
                        }
                   }
              }
        }
&lt;/pre&gt;

&lt;p&gt;Devemos ter uma forma pela qual a execução dos métodos dos objetos observados possam passar pelo observador. Somente assim os objetos inscritos poderão ser avisados da execução para a qual eles estão inscritos.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;observador = {
    adicionaInscricao: function(callback){
                 this.inscritos[this.inscritos.length] = callback;
               },
   removeInscricao: function(callback){
                 for (var i = 0; i &amp;lt; this.inscritos.length; i++) {
                     if (this.inscritos[i] === callback) {
                          delete(this.inscritos[i]);
                        }
                   }
              },

    publica:function (oque) {
              for (var i = 0; i &amp;lt; this.inscritos.length; i++) {
                            if (typeof this.inscritos[i] === &#39;function&#39;) {
                                            this.inscriots[i](oque);
                             }
                        }
                 }
          }&lt;/pre&gt;

&lt;p&gt;Fazer de um objeto um observado deve  ser uma atribuição da estrutura do  nosso observador. Para isto temos o método fazObservado abaixo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;observador = {
    adicionaInscricao: function(callback){
                 this.inscritos[this.inscritos.length] = callback;
               },
   removeInscricao: function(callback){
                 for (var i = 0; i &amp;lt; this.inscritos.length; i++) {
                     if (this.inscritos[i] === callback) {
                          delete(this.inscritos[i]);
                        }
                   }
              },

    publica:function (oque) {
              for (var i = 0; i &amp;lt; this.inscritos.length; i++) {
                            if (typeof this.inscritos[i] === &#39;function&#39;) {
                                            this.inscritos[i](oque);
                             }
                        }
                 },
   fazObservado:function (o) { 
              for (var i in this) {
                  o[i] = this[i];
                  o.inscritos= [];
               }
            }
    };&lt;/pre&gt;

&lt;h2 id=&#34;como-usar-o-design-pattern-observer&#34;&gt;Como usar o Design Pattern Observer?&lt;/h2&gt;

&lt;p&gt;Ter a estrutura de observer disponibilizada em seu projeto possiblita uma orgnanização em todas as estapdas do desenvolvimento. Para termos uma idéia disto vejamos como utilizar a estrutura do observer.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var observado = {
        executa:function(){
             var conteudo = &#39;Executado em: &#39; + new Date();
                 this.publica(conteudo);
          }
   };

   observador.fazObservado(observado);

var observaObservado = {
      verifica:function(oque){
           console.log(&#34;Observou &#34;+oque)
           }
     };

    observado.adicionaInscricao(observaObservado.verifica);
    observado.executa();
&lt;/pre&gt;

&lt;p&gt;Sempre que implementamos um padrão de desenvolvimento, ganhamos produtividade, agilidade e organização. Portanto, implemente padrões e seja feliz!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>