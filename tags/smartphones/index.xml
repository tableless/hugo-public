<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Smartphones on Tableless</title>
    <link>http://tableless.com.br/tags/smartphones/index.xml</link>
    <description>Recent content in Smartphones on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/smartphones/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Comportamento e meios de acesso</title>
      <link>http://tableless.com.br/comportamento-meios-acesso/</link>
      <pubDate>Fri, 18 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/comportamento-meios-acesso/</guid>
      <description>&lt;p&gt;Ainda lembro quando comprei meu primeiro smartphone. Odiava navegar naquilo. Eu estava acostumado a utilizer a internet em desktops, com telas grandes e confortáveis. Os sites também não ajudavam. Praticamente nenhum site tinha versão mobile ou uma que funcionasse direito. O Opera tentava fazer a parte dos desenvolvedores, tentando manipular o site para que ele fosse melhor visto em telas menores. Era bom, mas não o ideal.&lt;/p&gt;

&lt;p&gt;Hoje o cenário é diferente. Antes usávamos o celular para no máximo procurar um endereço. Hoje lemos feeds, twitter, facebook, enviamos, recebemos e arquivamos emails. Dependendo do aparelho é possível criar planilhas, documentos, pastas e tudo mais. Já perdi a conta de quantos artigos comecei no smartphone e terminei no notebook.&lt;/p&gt;

&lt;p&gt;Sistemas baseados em web, teoricamente, já funcionam em qualquer aparelho móvel. Do ponto de vista de desenvolvimento, não é preciso reprogramar o sistema. Mas o design para mobiles é diferente do design para desktops. E é aí que as mudanças são necessárias.&lt;/p&gt;

&lt;p&gt;O comportamento, respostas cognitivas e a forma de uso dos mobiles é totalmente diferente do que estamos acostumados em desktops. Isso afeta totalmente a acessibilidade e a usabilidade do sistema/site. Temos muitas indicações das ações feitas com o mouse. Por exemplo, quando clicamos em algum botão ou link, muda-se as cores, sublinhado, background, bordas e etc. Tudo isso nos dá uma resposta de que acionamos algum mecanismo. Nos mobiles isso é diferente. Normalmente, como utilizamos nosso dedo, a área visível do botão praticamente some. Logo, indicações de cor, fundo, sublinhado e etc não são tão efetivas. Como indicação de comportamento podemos fazer o aparelho vibrar, fazendo com que o usuário saiba que ele executou uma ação.&lt;/p&gt;

&lt;p&gt;É por conta destas diferenças &amp;#8211; que parecem simples em uma primeira análise &amp;#8211; que a ideia de ampliar as possibilidade das linguagens client-side pode ajudar. Imagine controlar via CSS a força, quantidade de vezes e tempo de vibração do aparelho. Em desktops isso não afetará em nada, mas para mobiles e outros tipos de aparelhos – touchs, principalmente &amp;#8211; trariam uma grande vantagem de acessibilidade e usabilidade.&lt;/p&gt;

&lt;p&gt;Você já deve saber que o desenvolvimento com padrões web é dividido em 3 camadas: informação, formatação e comportamento. O HTML é responsável pela informação. O CSS é responsável pela formatação e o Javascript é responsável pelo comportamento.&lt;/p&gt;

&lt;p&gt;Isso mudou um pouco nos últimos tempos. O Javascript controlava o CSS para manipular o comportamento dos elementos HTML. Para fazermos tabelas zebradas (tabelas com linhas de cores alternados), animações, menu com submenus e etc utilizávamos Javascript. Hoje, uma boa quantidade destas necessidades já podemos fazer com CSS, como é o caso das tabelas zebradas. Com as inovações do CSS3 e do HTML5, a terceira camada de comportamento não depende mais apenas do Javascript. Logo o comportamento (do ponto de vista visual e cognitivo e não funcional) que os celulares deveriam ter quando determinado botão é selecionado ou clicado, também será responsabilidade do CSS.&lt;/p&gt;

&lt;p&gt;Para que você entenda melhor, sugiro que leia a a especificação do W3C sobre CSS Aural. Eu já aviso que é coisa do tinhoso.&lt;/p&gt;

&lt;p&gt;Imagine que um internauta cego visite um site. Por causa do problema de visão, ele utiliza um leitor de tela ligado ao sistema de som do computador ou a um sistema de som de multi-canais, como um Home Theater. Ao visitar o site, o leitor de tela leria seu HTML e interpretaria o CSS Aural escrito para o site. Com o CSS Aural, o desenvolvedor controla, por exemplo, se a voz que o usuário ouvirá é feminina ou masculina. Controla de onde o som sairá, se é da caixa da esquerda ou da direita. Será possível escolher em qual das caixas de som a voz do leitor de tela sairá. Controlaremos a pausa da fala, volume, força da voz e etc&amp;#8230; Você praticamente “formata” a voz ouvida pelo visitante. Isso tudo com CSS! Genial!&lt;/p&gt;

&lt;p&gt;Entenda que a web é mais do que conhecemos. Hoje você assiste vídeos, vê imagens e lê blogs, notícias e etc. Você escreve, compartilha e produz conteúdo. Todas essas características devem estar disponíveis &lt;strong&gt;não importa qual meio de acesso&lt;/strong&gt; o visitante utiliza. Não deve importar também qual o nível de acessibilidade o visitante necessita. CSS Aural é útil para pessoas com problema de visão. Há outros tipos de problemas, muitas vezes nem são problemas físicos. Entenda também que os dispositivos não se limitam a notebooks, desktops e smartphones. A moda agora são as tablets e não vai demorar muito para surgirem outros dispositivos. Não estou me referindo sobre a criação de novos dispositivos. Pode ser que a próxima moda seja uma geladeira ou um microondas que acessa a internet. Pode ser que o Surface da Microsoft passe a custar barato&amp;#8230; Abra sua cabeça. Saia da caixa.&lt;/p&gt;

&lt;p&gt;Para o desenvolvimento web, o termo “dispositivo” não pode mais existir. O que existe são meios de acesso. O Google é um meio de acesso assim como o smartphone, o browser, o leitor de feed, etc etc etc.&lt;/p&gt;

&lt;p&gt;Toda &lt;strong&gt;a informação publicada na web é reutilizável&lt;/strong&gt;. É reutilizada por seus usuários ao compartilharem, é reutilizada pelos buscadores, por outros sites e etc. Por isso a informação precisa estar disponível em qualquer lugar, a qualquer hora, não importando o meio que pela qual ela é acessada.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Podcast #15</title>
      <link>http://tableless.com.br/podcast-15/</link>
      <pubDate>Wed, 28 Dec 2005 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/podcast-15/</guid>
      <description>&lt;p&gt;Estava ouvindo &lt;a href=&#34;http://usina.com/rodaeavisa/&#34;&gt;um podcast&lt;/a&gt; (ótimo por sinal) por aí, que me fez pensar um pouco sobre os anos vindouros.&lt;/p&gt;

&lt;p&gt;Comecei a pensar então sobre a entrada triunfal dos celulares e outros aparelhos móveis. É melhor começarmos a ficar espertos com eles.&lt;/p&gt;

&lt;p&gt;Você pode &lt;a href=&#34;http://tableless.com.br/podcast/podcast15.mp3&#34;&gt;baixar o Mp3 direto&lt;/a&gt;, ou se quiser receber automagicamente nossas atualizações, &lt;a href=&#34;http://tableless.com.br/feed/&#34;&gt;cadastre nosso Feed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tamanho: ~14.32Mb&lt;/p&gt;

&lt;p&gt;Tempo: ~15 Min&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Você está gostando do podcast? O cara tá falando bem? Precisa de uma consulta com a fonoaudiologa? Comente.&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>