<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Navegação on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/navega%C3%A7%C3%A3o/index.xml</link>
    <description>Recent content in Navegação on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/navega%C3%A7%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Menu Retrátil com CSS e jQuery</title>
      <link>https://tableless.github.io/hugo-public/menu-retratil-com-css-e-jquery/</link>
      <pubDate>Mon, 12 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/menu-retratil-com-css-e-jquery/</guid>
      <description>

&lt;p&gt;Neste artigo vamos criar passo-a-passo um menu retrátil super versátil que, com apenas algumas linhas de modificação, poderá ser utilizado na horizontal, vertical, sobrepondo ou empurrando o conteúdo de um site. Veja ainda como evitar os &lt;s&gt;malditos bugs&lt;/s&gt; problemas mais comuns deste tipo de navegação.&lt;/p&gt;

&lt;h3 id=&#34;mini-bibliotecas&#34;&gt;Mini bibliotecas&lt;/h3&gt;

&lt;p&gt;Uma das principais vantagens de escrever um HTML semântico e bem organizado é a versatilidade. Com um mesmo código é possível criar diversas variações de estilo utilizando apenas CSS. Na verdade muitas estruturas acabam se repetindo, embora visualmente diferentes. Isto acontece geralmente com formulários, rodapés e navegação. É o motivo pelo qual os frameworks estão tão populares ultimamente. Mas, muitas vezes, não precisamos de algo tão massivo e complexo quanto uma framework para tarefas simples. É algo como tentar acertar uma formiga com uma bazuca! É muito mais prático e funcional construir uma pequena biblioteca pessoal de snippets &amp;#8211; pequenos trechos de código. O formato não importa muito. Pode ser que você salve comentários no seu software de edição favorito, escreva em pequenos blocos de notas no seu computador, envie e-mails para si mesmo ou até mesmo utilize alguma ferramenta como &lt;a href=&#34;http://snippets.me/&#34; title=&#34;Snippets.me&#34;&gt;Snippets.me&lt;/a&gt;  ou &lt;a href=&#34;http://snippi.com/&#34; title=&#34;Snippi&#34;&gt;Snippi&lt;/a&gt;. Seja como for ter algumas cartas na manga é útil na hora de entregar aquele projeto para ontem e recuperar horas de sono. Este menu é uma das minhas.&lt;/p&gt;

&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;O HTML do menu é bem simples. Vamos usar uma div com a classe &amp;#8220;drop&amp;#8221;. Esta div será necessária para as versões do menu em que ele irá sobrepor o site. Ela irá funcionar como uma sustentação para a navegação. Nas demais versões, ela pode ser deletada.&lt;/p&gt;

&lt;p&gt;Dentro da div &amp;#8220;drop&amp;#8221; criamos uma &lt;code&gt;nav&lt;/code&gt; e, como um menu é sempre uma lista de links, vamos usar as tags &lt;code&gt;ul&lt;/code&gt; e &lt;code&gt;li&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No exemplo, o meu menu ocupa 100% da tela mas eu gostaria que os links ficassem dentro de um container centralizado. Para isso, adicionei uma div com a classe wrap e margin automática.&lt;/p&gt;

&lt;p&gt;No final, o HTML ficou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div class=&#34;drop&#34;&amp;gt;
&amp;lt;nav class=&#34;nav nav-aberta&#34;&amp;gt;
&amp;lt;div class=&#34;wrap&#34;&amp;gt;
&amp;lt;ul class=&#34;listaNav&#34;&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 6&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 7&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 8&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&#34;#&#34;&amp;gt;Item 9&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;Para ter um elemento servindo de exemplo visual e ser sobreposto ou empurrado pelo meu menu, coloquei apenas uma imagem. Mas, pense nela como todo o conteúdo do site, okay?&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img alt=&#34;&#34; src=&#34;http://placehold.it/1920x800/&amp;text=Conteúdo&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Hoje vamos criar quatro menus utilizando este mesmo html como um coringa.&lt;/p&gt;

&lt;h2 id=&#34;o-css&#34;&gt;O CSS&lt;/h2&gt;

&lt;p&gt;Aqui já começamos a ter diferenças de um menu para o outro. Trabalharemos com media-queries que reordenarão os elementos de acordo com o tamanho do viewport do usuário, ou seja, da janela do browser. Para o exemplo, criei um media-querie com a max-width de 800px. É a partir desta largura que o menu se colapsa em apenas uma âncora. Altere este valor de acordo com o seu projeto, é claro.&lt;/p&gt;

&lt;h3 id=&#34;menus-horizontais&#34;&gt;Menus Horizontais&lt;/h3&gt;

&lt;p&gt;Hoje vamos desenvolver dois tipos de menus horizontais diferentes. Um empurrará todo o site para baixo ao abrir (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/fbgLl&#34; title=&#34;Navegação Responsiva 1&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38487&#34; alt=&#34;nav-1&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-1.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-1.jpg 660w, uploads/2013/08/nav-1-329x160.jpg 329w, uploads/2013/08/nav-1-588x286.jpg 588w, uploads/2013/08/nav-1-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E o outro, se abrirá sobre o site (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/iAeyx&#34; title=&#34;Navegação Responsiva 2&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38488&#34; alt=&#34;nav-2&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-2.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-2.jpg 660w, uploads/2013/08/nav-2-329x160.jpg 329w, uploads/2013/08/nav-2-588x286.jpg 588w, uploads/2013/08/nav-2-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note que entre os dois htmls existe apenas uma classe diferente: a div &amp;#8220;drop&amp;#8221;. Esta divisão extra está apenas no segundo exemplo no menu que passa por cima do conteúdo do site. Ela terá uma altura fixa, que será a altura do meu menu quando fechado. Quando ele se abrir, a div que sustenta nosso menu continuará do mesmo tamanho, fazendo com que os demais elementos sobreponham o resto do site.&lt;/p&gt;

&lt;p&gt;Primeiro, vamos ao CSS dele fechado. Como é só uma lista, eu apenas usei o parâmetro &amp;#8220;inline-block&amp;#8221; para que todos os itens se alinhem um ao lado do outro. Os demais parâmetros, são apenas estilização do menu. Não coloquei muitas coisas em termos visuais. Não é para ser bonito. A idéia é ter uma carcaça pronta para receber o SEU design. Eu coloquei na minha nav uma &amp;#8220;position: fixed&amp;#8221; para que o menu fique sempre à vista do usuário, e de fácil acesso. Mas, você não terá problemas se quiser trabalhar com uma posição relativa ou absoluta. Isso irá variar de acordo com o seu projeto.&lt;/p&gt;

&lt;p&gt;Outra coisa importante é o parâmetro &amp;#8220;nav-toggle&amp;#8221;. Ele será o gatilho para abrir e fechar o meu menu, tanto em sua versão vertical quanto na horizontal. Ele é inserido no meu HTML dinamicamente via JavaScript. No entanto, eu não quero que ele apareça quando estiver em resoluções maiores que 800px, por isso coloquei nele um &amp;#8220;display: none&amp;#8221; e, dentro do media-querie que irá atender viewports menores que 800px ele tem o &amp;#8220;display: block&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Veja como ficou o CSS do menu na horizontal que empurrará o site para baixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.wrap {
max-width: 1200px;
margin: 0 auto;
}

.nav {
background: #FFF;
z-index: 200;
position: fixed;
width: 100%;
font-size: 1em;
overflow: auto;
}

.nav ul {
padding: 1em;
}

li {
display: inline-block;
margin-right: 2em;
}

a {
text-decoration: none;
color: #444;
}

a:hover {
color: red;
}

.nav-toggle {
display: none;
}

.foto {
width: 100%;
}

/*Media Queries*/
@media only screen and (max-width: 800px) {
.wrap {
max-width: 100%;
margin: 0;
}

.nav.nav-aberta {
position: relative;
padding: 0 0 0.5em 0;
height: 0;
}

.nav ul {
padding: .5em;
margin: 0;
background: #444;
}

li {
margin: 0;
padding: 0;
display: block;
border-bottom: 1px solid #FFF;
}

li a {
padding: 0.5em 0 0.5em 0;
display: block;
color: #FFF;
}

li:last-child {
border-bottom:none;
}

.nav-toggle {
display: block;
padding: .4em;
margin: .5em 0;
}
}&lt;/pre&gt;

&lt;p&gt;As principais mudanças para telas menores são o .nav-toggle que agora é visível nas versões menores que 800px, a lista que deixa de ser &amp;#8220;inline-block&amp;#8221; para ser apenas &amp;#8220;block&amp;#8221; e a .nav, que antes tinha a posição fixa e agora é relativa.&lt;/p&gt;

&lt;p&gt;Na versão em que o menu irá passar por cima do site, defina uma altura para a classe .drop no media querie equivalente ao menu fechado, posição relativa e o z-index maior que os outros elementos para que ele possa se sobrepor. Veja o código:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.drop {
height: 48px;
position: relative;
z-index: 1000;
}&lt;/pre&gt;

&lt;p&gt;Uma maneira interessante de testar o menu funcionando antes de aplicar o JavaScript é modificar a altura da .nav para &amp;#8220;auto&amp;#8221; ou a altura que você quer que o seu menu tenha quando estiver aberto. Isso fará com que, ao redimensionar o seu browser, o menu apareça como se estivesse aberto. No entanto, para o nosso exemplo, vamos usar a altura 0.&lt;/p&gt;

&lt;h3 id=&#34;menus-verticais&#34;&gt;Menus Verticais&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38499&#34; alt=&#34;menu-lateral&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/menu-lateral.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/menu-lateral.jpg 660w, uploads/2013/08/menu-lateral-329x160.jpg 329w, uploads/2013/08/menu-lateral-588x286.jpg 588w, uploads/2013/08/menu-lateral-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;São dois os modelos de menu vertical:&lt;/p&gt;

&lt;p&gt;Um abrirá a partir da esquerda empurrando todo o site para a direita ao abrir (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/EKylp&#34; title=&#34;Navegação Responsiva 3&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38489&#34; alt=&#34;nav-3&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-3.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-3.jpg 660w, uploads/2013/08/nav-3-329x160.jpg 329w, uploads/2013/08/nav-3-588x286.jpg 588w, uploads/2013/08/nav-3-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;E o outro, se abrirá sobre o conteúdo (&lt;a href=&#34;http://codepen.io/daniguerrato/pen/wcCEK&#34; title=&#34;Navegação Responsiva 4&#34;&gt;demo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-38490&#34; alt=&#34;nav-4&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/08/nav-4.jpg&#34; width=&#34;660&#34; height=&#34;322&#34; srcset=&#34;uploads/2013/08/nav-4.jpg 660w, uploads/2013/08/nav-4-329x160.jpg 329w, uploads/2013/08/nav-4-588x286.jpg 588w, uploads/2013/08/nav-4-635x310.jpg 635w&#34; sizes=&#34;(max-width: 660px) 100vw, 660px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Primeiro, vamos ao CSS do menu quando o viewport for maior que 800px. Neste exemplo, deixei o menu em um background escuro e ocupando 20% do viewport. Assim, o conteúdo, ocupará os 80% restantes. Como os itens da minha lista não ficarão mais uns aos lados dos outros, neste caso eu a mantive o display &amp;#8220;block&amp;#8221; desde o CSS desktop. E, também deixei o gatilho com &amp;#8220;display:none&amp;#8221; e a minha imagem com 80% de largura.&lt;/p&gt;

&lt;p&gt;Quanto ao CSS para telas menores o primeiro ponto é que, neste exemplo, trabalharemos com uma largura fixa para o menu. Deixei o padrão de 175px de largura. Usei esta medida pela segurança de não ficar muito grande em smartphones, já que o tamanho mais comum é de 320px de largura com ele em pé, 175px é uma medida segura para trabalharmos.&lt;/p&gt;

&lt;p&gt;Minha sidebar terá também a posição absoluta no exemplo. Isso serve para que ela possa &amp;#8220;passar por cima&amp;#8221; do conteúdo do site sem problemas. Na versão em que o site irá caminhar para o lado, faremos isso pelo JS.&lt;/p&gt;

&lt;p&gt;E, não podemos esquecer, do gatilho que irá ativar o nosso menu. Assim como no exemplo anterior, usei um item de classe .nav-toggle que será adicionado dinamicamente pelo Javascript. Deixei ele com o display:none fora do media-query e ele irá ter a posição absoluta quando o viewport for menor que 800px. Deixei o topo dele em 0 e ele será alinhado à partir da borda direita dele. Usei, neste caso, um valo negativo. Assim, ele ficará visível quando o meu menu estiver fechado, para ser clicado e, ao abrir, caminhará junto com o meu menu para ser clicado novamente e fecha-lo.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.wrap {
max-width: 1200px;
margin: 0 auto;
}

.nav {
background: #FFF;
z-index: 200;
position: relative;
width: 20%;
font-size: 1em;
float: left;
background: #444;
}

.nav ul {
padding: 1em;
}

li {
display: block;
width: 100%;
margin: 1em 2em 1em 0;
}

a {
text-decoration: none;
color: #FFF;
}

a:hover {
color: red;
}

.nav-toggle {
display: none;
}

.foto {
 width: 80%;
float: right;
}

/*Media Queries*/
@media only screen and (max-width: 800px) {
.wrap {
max-width: 100%;
margin: 0;
}

.nav {
width: 175px;
position: absolute;
top: 0;
left: 0;
}

.nav ul {
padding: .5em;
margin: 0;
background: #444;
}       

li {
margin: 0;
padding: 0;
display: block;
}

li a {
padding: 0.5em 0 0.5em 0;
display: block;
color: #FFF;
}

.nav-toggle {
position: absolute;
top: 0;
right: -56px;
color: #FFF;
cursor: pointer;
width: 44px;
height: 24px;
z-index: 1000;
display: block;
background: #444;
padding: 12px 6px 6px 6px;
}

.foto {
width: 100%;
position: relative;
float: none;
}
}&lt;/pre&gt;

&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;

&lt;p&gt;Como o nosso código utiliza jQuery a primeira coisa a fazer é chamar a biblioteca.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;script src=&#34;//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;window.jQuery || document.write(&#39;&amp;lt;script src=&#34;js/vendor/jquery-1.9.1.min.js&#34;&amp;gt;&amp;lt;\/script&amp;gt;&#39;)&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Menus na Horizontal&lt;/p&gt;

&lt;p&gt;Para os dois casos do menu na horizontal, tanto o que empurra quanto o que sobrepõe o site, usei exatamente o mesmo JS. O que irá garantir que ele irá sobrepor o site é a classe .drop . Quando ela estiver com uma altura definida, ela será como um suporte para o menu e fará com que tudo passe por cima dos outros objetos do site. Quando ela não existir, ou não estiver com uma altura definida ela irá aumentar de tamanho, empurrando os demais elementos para baixo.&lt;/p&gt;

&lt;p&gt;A primeira coisa a fazer é utilizar addClass para colocar a classe &amp;#8220;fechada&amp;#8221; no menu. Esta classe será retirada quando o menu for aberto e irá aparecer quando ele fechar novamente. Servirá como um elemento para indicar ao meu JS o que irá fazer.&lt;/p&gt;

&lt;p&gt;Em seguida, utilize o comando de jQuery after para adicionar o gatilho para o menu. Caso queira que ele fique antes do menu, você pode substituir o &amp;#8220;after&amp;#8221; por &amp;#8220;before&amp;#8221;.&lt;/p&gt;

&lt;p&gt;A animação acontece através dos eventos &amp;#8220;click&amp;#8221; e &amp;#8220;animate&amp;#8221;.&lt;/p&gt;

&lt;p&gt;O JavaScript fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;$(&#34;.nav&#34;).addClass(&#34;fechada&#34;);
$(&#34;.nav&#34;).after(&#34;&amp;lt;a class=\&#34;nav-toggle\&#34;&amp;gt;Menu&amp;lt;/a&amp;gt;&#34;);

$(&#34;.nav-toggle&#34;).click(function() {
var altura = $(&#34;.nav ul&#34;).height();
if($(&#34;.nav&#34;).hasClass(&#34;fechada&#34;)) {
$(&#34;.nav&#34;).animate({height:altura},{queue:false, duration:200}).removeClass(&#34;fechada&#34;);
}
else {
$(&#34;.nav&#34;).animate({height:&#34;0px&#34;},{queue:false, duration:200}).addClass(&#34;fechada&#34;);
}
});&lt;/pre&gt;

&lt;p&gt;A mágica é a seguinte: quando o usuário clica no gatilho do menu (no caso, o .nav-toggle), ele pega a altura da minha lista de links. Depois, ele faz uma verificação na minha .nav . Se ela possuir a classe &amp;#8220;fechada&amp;#8221;, ela irá animar aumentando a altura dela e mostrando o menu. Caso esta classe não exista, ele diminui a altura escondendo o menu. Tudo isso na velocidade de 200 milisegundos.&lt;/p&gt;

&lt;p&gt;Escolhi este método por uma questão de praticidade. Existem outras maneiras de realizar o mesmo processo. Ao invés de adicionar uma classe, é possível, por exemplo, verificar a altura da .nav. Se for maior que 0px, significa que ela estava aberta e, ao clicar, será fechada. Se for igual a 0, é porque ela está fechada e precisará ser aberta.&lt;/p&gt;

&lt;h3 id=&#34;e-uma-dica&#34;&gt;E uma dica!&lt;/h3&gt;

&lt;p&gt;Para finalizar, vamos nos livrar de um bug chato que normalmente acontece: ao aumentar a tela para os valores maiores que o nosso media querie (no caso, 800px), o menu poderá ficar com a altura que ele estava quando aberto, e isso obviamente desalinha todo o layout.&lt;/p&gt;

&lt;p&gt;Resolver isso é bem fácil. Podemos fazer com que o nosso JS verifique, ao redimensionar a janela, qual é o tamanho do viewport. Se for maior que 800, ele volta a altura que deveria ter originalmente. Se for menor, ele simplesmente se fecha ou mantém a altura que estava quando aberta. No exemplo, eu fiz com que ele se fechasse. Veja como ficou o JS inteiro:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;$(&#34;.nav&#34;).addClass(&#34;fechada&#34;);
$(&#34;.nav&#34;).after(&#34;&amp;lt;a class=\&#34;nav-toggle\&#34;&amp;gt;Menu&amp;lt;/a&amp;gt;&#34;);

$(&#34;.nav-toggle&#34;).click(function() {
var altura = $(&#34;.nav ul&#34;).height();
if($(&#34;.nav&#34;).hasClass(&#34;fechada&#34;)) {
$(&#34;.nav&#34;).animate({height:altura},{queue:false, duration:200}).removeClass(&#34;fechada&#34;);
}
else {
$(&#34;.nav&#34;).animate({height:&#34;0px&#34;},{queue:false, duration:200}).addClass(&#34;fechada&#34;);
}
});

$(window).resize(function() {
var tamanhoViewport = $(window).width();
if (tamanhoViewport &amp;gt; 800) {
$(&#34;.nav&#34;).css(&#34;height&#34;,&#34;auto&#34;).addClass(&#34;fechada&#34;);
} else {
$(&#34;.nav&#34;).css(&#34;height&#34;,&#34;0px&#34;).addClass(&#34;fechada&#34;);
}
});&lt;/pre&gt;

&lt;p&gt;Menu Vertical&lt;/p&gt;

&lt;p&gt;Neste caso, a verificação da largura do viewport acontece em dois momentos. Uma quando o usuário redimensionar o browser e outra no momento que o documento é aberto. Em ambos, a condição é a mesma: se o tamanho da janela for menor que 800px, ele adiciona a classe &amp;#8220;side-fechado&amp;#8221;, o gatilho &amp;#8220;nav-toggle&amp;#8221; que irá animar o menu e colocar a posição dele como -175px à esquerda, o que garante que o menu ficará fechado logo após o usuário redimensionar o browser. Se for maior que 800px a posição à esquerda fica 0.&lt;/p&gt;

&lt;p&gt;(Lembrando que estas medidas de largura são subjetivas e devem ser alteradas a cada projeto.)&lt;/p&gt;

&lt;p&gt;O JS ficou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;//Menu Sidebar
$(window).resize(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
$(&#39;.foto&#39;).css(&#34;left&#34;, 0);
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}
});

$(document).ready(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);;
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}
});&lt;/pre&gt;

&lt;p&gt;Para animar o menu, vamos criar uma função de nome &amp;#8220;menu&amp;#8221;. Nesta função, ao clicar no gatilho &amp;#8220;.nav-toggle&amp;#8221;, acontecem duas coisas: verificação da existência da classe &amp;#8220;side-fechado&amp;#8221; e animação do menu. Se possuir, o JavaScript anima a navegação para 0px da borda esquerda do menu. Caso não possua (o que indica para nós que o menu está aberto) a navegação volta para os -175px negativos.&lt;/p&gt;

&lt;p&gt;O JS fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function menu() {
$(&#39;.nav-toggle&#39;).click(function() {
if($(&#34;.nav&#34;).hasClass(&#34;side-fechado&#34;)) {
$(&#39;.nav&#39;).animate({
left: &#34;0px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).removeClass(&#34;side-fechado&#34;);
});
}
else {
$(&#39;.nav&#39;).animate({
left: &#34;-175px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).addClass(&#34;side-fechado&#34;);
});
}
});
}&lt;/pre&gt;

&lt;p&gt;Neste exemplo, ele está sobrepondo o conteúdo do site. Mas, eu posso fazer com que ele empurre o site para a direita quando surgir e para a esquerda quando fechar. Para isso, eu coloco um animate no conteúdo do site também (no exemplo, o meu objeto de classe &amp;#8220;.foto&amp;#8221;). O JS fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function menu() {
$(&#39;.nav-toggle&#39;).click(function() {
if($(&#34;.nav&#34;).hasClass(&#34;side-fechado&#34;)) {
$(&#39;.nav&#39;).animate({
left: &#34;0px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).removeClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;175px&#34;,
}, 100);
}
else {
$(&#39;.nav&#39;).animate({
left: &#34;-175px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).addClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;0px&#34;,
}, 100);
}
});
}&lt;/pre&gt;

&lt;p&gt;Agora, é só chamar a função &amp;#8220;menu&amp;#8221; depois das verificações de tamanho da janela. O JS completo fica assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;function menu() {
$(&#39;.nav-toggle&#39;).click(function() {
if($(&#34;.nav&#34;).hasClass(&#34;side-fechado&#34;)) {
$(&#39;.nav&#39;).animate({
left: &#34;0px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).removeClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;175px&#34;,
}, 100);
}
else {
$(&#39;.nav&#39;).animate({
left: &#34;-175px&#34;,
}, 100, function() {
$(&#34;.nav&#34;).addClass(&#34;side-fechado&#34;);
});
$(&#39;.foto&#39;).animate({
left: &#34;0px&#34;,
}, 100);
}
});
}

//Menu Sidebar
$(window).resize(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
$(&#39;.foto&#39;).css(&#34;left&#34;, 0);
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}

menu();
});

$(document).ready(function() {
var tamanhoJanela = $(window).width();
$(&#34;.nav-toggle&#34;).remove();

if (tamanhoJanela &amp;lt; 800) {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;-175px&#39;).addClass(&#39;side-fechado&#39;);;
$(&#39;.nav&#39;).append( &#34;&amp;lt;div class=&#39;nav-toggle&#39;&amp;gt;Menu&amp;lt;/div&amp;gt;&#34; );
} else {
$(&#39;.nav&#39;).css(&#39;left&#39;, &#39;0px&#39;).addClass(&#39;side-fechado&#39;);
}

menu();
});&lt;/pre&gt;

&lt;h2 id=&#34;demos&#34;&gt;Demos&lt;/h2&gt;

&lt;p&gt;Você pode fazer aqui o &lt;a href=&#34;http://cl.ly/0E0C3O0j2r2T&#34; title=&#34;Navegação Responsiva - Demo&#34;&gt;download dos arquivos&lt;/a&gt; com os exemplos criados ou brincar com as demos online no Codepen.&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/fbgLl&#34; title=&#34;Navegação Responsiva 1&#34;&gt;Navegação 1 &amp;#8211; Menu horizontal empurrando o conteúdo para baixo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/iAeyx&#34; title=&#34;Navegação Responsiva 2&#34;&gt;Navegação 2 &amp;#8211; Menu horizontal passando sobre o conteúdo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/EKylp&#34; title=&#34;Navegação Responsiva 3&#34;&gt;Navegação 3 &amp;#8211; Menu lateral empurrando o conteúdo para o lado.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;a href=&#34;http://codepen.io/daniguerrato/pen/wcCEK&#34; title=&#34;Navegação Responsiva 4&#34;&gt;Navegação 4 &amp;#8211; Menu lateral passando sobre o conteúdo.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;A navegação é sempre uma parte fundamental de qualquer layout. Cuidar para que ela apareça da maneira mais otimizada possível, não apenas em aparelhos mobile, mais em dispositivos com o viewport reduzido não é mais um luxo, mas uma necessidade. Existem algumas outras abordagens até mesmo utilizando apenas CSS3. É importante conhecer diversas soluções para adequar as necessidades de cada projeto. Reaproveitando trechos de código como este podemos garantir que o processo de desenvolvimento seja ágil e preciso, sem sacrificar qualidade, semântica e a experiência do usuário.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>