<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Desenvolvimento on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/desenvolvimento/index.xml</link>
    <description>Recent content in Desenvolvimento on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/desenvolvimento/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Código Limpo – Escreva seu código hoje sem esquecer da manutenção de amanhã</title>
      <link>https://tableless.github.io/hugo-public/codigo-limpo-escreva-seu-codigo-hoje-sem-esquecer-da-manutencao-de-amanha/</link>
      <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/codigo-limpo-escreva-seu-codigo-hoje-sem-esquecer-da-manutencao-de-amanha/</guid>
      <description>

&lt;p&gt;Você provavelmente já precisou entender o código de outra pessoa. Seja para realizar uma alteração, corrigir um &lt;em&gt;bug&lt;/em&gt; ou até mesmo para procurar um comportamento específico.&lt;/p&gt;

&lt;p&gt;Talvez você até tenha feito isso no seu próprio código!&lt;/p&gt;

&lt;p&gt;Agora pense por alguns segundos: O código foi &lt;strong&gt;fácil&lt;/strong&gt; de entender?&lt;/p&gt;

&lt;p&gt;Você, &lt;strong&gt;só pela leitura&lt;/strong&gt;, conseguiu identificar o método exato que precisava alterar?&lt;/p&gt;

&lt;p&gt;Se a resposta for positiva: ótimo! O programador fez a sua parte e conseguiu deixar o código limpo (ou pelo menos fez um código simples o suficiente para ser entendido).&lt;/p&gt;

&lt;p&gt;Mas se a resposta for &amp;#8220;mais ou menos&amp;#8221;, ou &amp;#8220;nem um pouco&amp;#8221;, é aí que mora o problema.&lt;/p&gt;

&lt;p&gt;E essa é a explicação para o título deste post.&lt;/p&gt;

&lt;h2 id=&#34;mas-por-que-isso-acontece&#34;&gt;Mas por que isso acontece?&lt;/h2&gt;

&lt;p&gt;Quando aprendemos a programar, estamos mais preocupados em aprender a lógica de programação e fazer as coisas funcionarem do que com a estrutura e leitura do código. E isso é totalmente normal, afinal, estamos iniciando.&lt;/p&gt;

&lt;p&gt;Porém, na minha opinião, o problema começa quando evoluímos em nossa carreira (começamos a trabalhar em projetos maiores e ter mais responsabilidades) e &lt;strong&gt;não evoluímos o nosso código na mesma medida&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Aí começam a aparecer os famosos &amp;#8220;códigos espaguete&amp;#8221; ou mesmo aquele monte de variáveis que não ajudam em nada a entender o código.&lt;/p&gt;

&lt;p&gt;Leia o código abaixo e responda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consegue identificar qual método você precisa chamar primeiro pra cadastrar um novo cliente?&lt;/li&gt;
&lt;li&gt;Percebe como os métodos estão sem ordem nenhuma e um chama o outro internamente, formando um &amp;#8220;espaguete&amp;#8221;?&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class CadastroCliente
{
    public function enviarEmail()
    {
        $mailer = new Mailer();
        $mailer-&amp;gt;send();
    } 
    
    public function gerarSenha()
    {
        // codigo para gerar senha
        
        return $senha;
    }
    
    public function atualizar($cliente)
    {
        $model = new ClienteModel();
        $model-&amp;gt;confirmar($cliente);
    }

    public function criar($cliente)
    {
        $senha = $this-&amp;gt;gerarSenha();
        
        $model = new ClienteModel();
        $model-&amp;gt;add($cliente, $senha);

        $this-&amp;gt;enviarEmail();
    }
    
    public function confirmarCadastro($cliente)
    {
        $this-&amp;gt;enviarEmail();
        $this-&amp;gt;atualizar($cliente);
    }
}
&lt;/pre&gt;

&lt;p&gt;O problema dessa evolução tardia é que somente depois de muito tempo o desenvolvedor vai descobrir que poderia ter feito melhor. Note que começar escrevendo códigos confusos não é o problema, mas sim o tempo necessário para entender que essa evolução é importante.&lt;/p&gt;

&lt;p&gt;E então, ao perceber que o código não está dos melhores, o desenvolvedor pode escolher entre:&lt;/p&gt;

&lt;p&gt;1 &amp;#8211; Deixar pra lá, por que o seu código sempre funciona&lt;/p&gt;

&lt;p&gt;2 &amp;#8211; Começar a melhorar o seu código pensando na qualidade do software&lt;/p&gt;

&lt;h2 id=&#34;código-funcionando-next&#34;&gt;Código funcionando! Next!&lt;/h2&gt;

&lt;p&gt;A sensação de ver nosso código funcionando é ótima! Quem não gosta?&lt;/p&gt;

&lt;p&gt;Só que muita gente para por aí, nem lembra que por trás daquele comportamento existem classes, métodos, variáveis, etc.&lt;/p&gt;

&lt;p&gt;Mas será que esse código está legível? As classes possuem responsabilidades definidas? Os métodos estão coerentes?&lt;/p&gt;

&lt;p&gt;Pois é, existem vários pontos que precisamos estar atentos para que nosso código seja limpo.&lt;/p&gt;

&lt;p&gt;Mas apesar de parecer muito complicado, na verdade podemos começar da forma mais simples possível: comece aos poucos e vá sempre buscando deixá-lo mais legível. Não tem como você fazer o melhor código de primeira.&lt;/p&gt;

&lt;p&gt;Para exemplificar essa transformação de um código difícil de ser lido em um código limpo, veja o trecho abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $vl;
    private $prods;

    public function adic($prods)
    {
        foreach ($prods as $prod) {
            if ($prod-&amp;gt;getCat() == &#39;P&#39;) {
                $vl = $prod-&amp;gt;getVl() * 0.75;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            } elseif ($prod-&amp;gt;getCat() == &#39;B&#39;) {
                $vl = 0;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            } elseif ($prod-&amp;gt;getCat() == &#39;&#39;) {
                $vl = $prod-&amp;gt;getVl();
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Você consegue identificar o que são aqueles valores (P e B) ou até mesmo entender rapidamente o que o método faz?&lt;/p&gt;

&lt;p&gt;Vamos deixá-lo um pouco mais claro:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos)
    {
        foreach ($produtos as $produto) {
            if ($produto-&amp;gt;getCategoria() == &#39;PROMOCAO&#39;) {
                $valor = $produto-&amp;gt;getValor() * 0.75;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;BRINDE&#39;) {
                $valor = 0;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;&#39;) {
                $valor = $produto-&amp;gt;getValor();
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Agora já dá pra entender mais rápido o que o método faz: adicionar um produto no carrinho e acrescenta o valor do produto no valor total.&lt;/p&gt;

&lt;p&gt;Mas dá pra melhorar ainda mais:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos)
    {   
        foreach ($produtos as $produto) {
            $valor = $produto-&amp;gt;getValor();
            
            if ($produto-&amp;gt;getCategoria() == &#39;PROMOCAO&#39;) {
                $valor = $produto-&amp;gt;getValor() * 0.75;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;BRINDE&#39;) {
                $valor = 0;
            }

            $this-&amp;gt;valorTotal += $valor;
            $this-&amp;gt;produtos[] = $produto;
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Notou que as linhas que atualizam o valor total e os produtos internos da classe se repetiam a cada &lt;code&gt;if&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Já que se repetem, podemos tirar de dentro dos &lt;code&gt;ifs&lt;/code&gt;, pois ele sempre será executado independente da condição.&lt;/p&gt;

&lt;p&gt;Além disso, podemos inicializar a variável &lt;code&gt;$valor&lt;/code&gt; com o valor do produto, e de acordo com a categoria do produto atualizamos essa variável. Assim conseguimos eliminar a utilização de um &lt;code&gt;if&lt;/code&gt; desnecessário verificando se o produto não tem categoria.&lt;/p&gt;

&lt;p&gt;Agora o toque final:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos = [])
    {   
        foreach ($produtos as $produto) {
            $this-&amp;gt;valorTotal += $this-&amp;gt;calcularValorProduto($produto);
            $this-&amp;gt;produtos[] = $produto;
        }
    }

    private function calcularValorProduto(Produto $produto)
    {
        if ($produto-&amp;gt;getCategoria() == Produto::CATEGORIA_BRINDE) {
            return 0;
        }

        if ($produto-&amp;gt;getCategoria() == Produto::CATEGORIA_PROMOCAO) {
            return $produto-&amp;gt;getValor() * 0.75;
        }

        return $produto-&amp;gt;getValor();
    }
}
&lt;/pre&gt;

&lt;p&gt;Pronto, o código agora ficou mais simples e os métodos com uma únicaresponsabilidade definida.&lt;/p&gt;

&lt;p&gt;Veja as alterações realizadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Agora o cálculo do valor fica em um método privado da classe, para não ficar tudo no método &lt;code&gt;adicionarProduto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Foi adicionado um &lt;em&gt;Type Hint&lt;/em&gt; no método &lt;code&gt;calcularValorProduto&lt;/code&gt; para garantir que a variável &lt;code&gt;$produto&lt;/code&gt; seja um objeto da classe &lt;code&gt;Produto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No método de cálculo, trocamos o &lt;code&gt;elseif&lt;/code&gt; por dois &lt;code&gt;ifs&lt;/code&gt; separados: isso facilita a separação por blocos de código, e consequentemente a leitura&lt;/li&gt;
&lt;li&gt;Ainda no método de cálculo, ao invés de inicializar a variável &lt;code&gt;$valor&lt;/code&gt; com o valor do produto, foram adicionados &lt;code&gt;returns&lt;/code&gt; em cada condição: isso possibilita o método retornar o valor mais rapidamente, já que não é mais necessário executar o método inteiro&lt;/li&gt;
&lt;li&gt;Foram trocados os valores fixos das categorias por constantes da classe &lt;code&gt;Produto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Objetivo alcançado: conseguimos deixar o código mais descritivo, separar os métodos e manter o mesmo funcionamento. E o mais importante: tudo isso foi feito de forma incremental.&lt;/p&gt;

&lt;p&gt;Talvez depois de um tempo outras melhorias possam sem aplicadas, mas o código já melhorou o suficiente por enquanto.&lt;/p&gt;

&lt;p&gt;Aliás, isso é o que todos nós deveríamos fazer: ao invés de você tentar abraçar o mundo e deixar seu código perfeito, tente deixá-lo o mais simples possível (e que atenda os requisitos, claro), e vá aperfeiçoando com o tempo.&lt;/p&gt;

&lt;p&gt;Até por que provavelmente você terá que realizar alterações nele depois, e aí você pode &amp;#8220;aparar as arestas&amp;#8221; e ir deixando cada vez melhor.&lt;/p&gt;

&lt;p&gt;Só não deixe seu código para trás sem revisá-lo antes, isso com certeza vai deixar alterações futuras muito mais custosas de serem feitas.&lt;/p&gt;

&lt;h2 id=&#34;certo-mas-e-se-o-prazo-estiver-apertado&#34;&gt;Certo, mas e se o prazo estiver apertado?&lt;/h2&gt;

&lt;p&gt;No ciclo de desenvolvimento de software, sempre existem os casos em que o prazo é bem apertado.&lt;/p&gt;

&lt;p&gt;Apesar de entender que precisamos de tempo suficiente para sempre testar nosso código e escrevê-lo bem, algumas vezes realmente não há saída: precisamos entregar e ponto.&lt;/p&gt;

&lt;p&gt;Nestes casos, precisamos sempre colocar na balança se vale a pena gastar mais tempo para projetar melhor a arquitetura, testar todas as nossas classes e revisar o código.&lt;/p&gt;

&lt;p&gt;O que não pode acontecer é utilizar estes argumentos como desculpas para não entregar a solução.&lt;/p&gt;

&lt;p&gt;Se há espaço para refinar o código e testá-lo, então eu recomendo que faça. Você vai agradecer um dia por ter feito isso.&lt;/p&gt;

&lt;p&gt;Caso a entrega seja de muita urgência, desenvolva de uma forma que conseguirá entregar no prazo. Mas também não use isso como desculpa para escrever qualquer código!&lt;/p&gt;

&lt;p&gt;Fique atento a boas práticas durante o desenvolvimento acelerado, seja nomeando suas variáveis e métodos melhor, quebrando os comportamento em classes menores, etc.&lt;/p&gt;

&lt;p&gt;Observe uma alteração pequena usando o exemplo anterior, mas que vai ajudar a tornar o código muito mais simples:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $vl;
    private $prods;

    // Adiciona um produto no carrinho
    // Passar um array de produtos
    public function adic($prods)
    {
        foreach ($prods as $prod) {
            // Categoria do produto -&amp;gt; P = Promocao
            if ($prod-&amp;gt;getCat() == &#39;P&#39;) {
                $vl = $prod-&amp;gt;getVl() * 0.75;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
                
            // Categoria do produto -&amp;gt; B = Brinde
            } elseif ($prod-&amp;gt;getCat() == &#39;B&#39;) {
                $vl = 0;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            
            // Sem categoria, utilizar o valor do produto
            } elseif ($prod-&amp;gt;getCat() == &#39;&#39;) {
                $vl = $prod-&amp;gt;getVl();
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Você acha que esses comentários são importantes para o código? E se um dia algum outro desenvolvedor alterar as siglas das categorias, você acha que os comentários serão atualizados?&lt;/p&gt;

&lt;p&gt;E se ao invés de adicionar comentários, você deixasse explícito o que cada variável e método faz por meio do nome deles?&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos)
    {
        foreach ($produtos as $produto) {
            if ($produto-&amp;gt;getCategoria() == &#39;PROMOCAO&#39;) {
                $valor = $produto-&amp;gt;getValor() * 0.75;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;BRINDE&#39;) {
                $valor = 0;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;&#39;) {
                $valor = $produto-&amp;gt;getValor();
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Veja que todos os comentários foram removidos. Ao invés de escrever o comportamento da classe nos comentários, os métodos e variáveis já dizem o que fazem e para o que servem.&lt;/p&gt;

&lt;p&gt;Por isso, por mais que o prazo seja apertado, sempre há um jeito de deixar o código mais limpo.&lt;/p&gt;

&lt;p&gt;Só não deixe de entregar o seu trabalho no prazo tentando fazer o código perfeito, isso talvez não valha tanto a pena no final.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Você provavelmente percebeu o valor de escrever código limpo.&lt;/p&gt;

&lt;p&gt;Isso no longo prazo faz uma enorme diferença, e é uma responsabilidade que todos nós programadores precisamos estar cientes. Não basta apenas escrever código, você tem que sempre pensar que outras pessoas também irão trabalhar nele.&lt;/p&gt;

&lt;p&gt;Por isso sempre procure aperfeiçoar suas habilidades não só para aprender outras linguagens, mas para melhorar o seu código em si, independente da linguagem que você trabalhe.&lt;/p&gt;

&lt;p&gt;E se você quer aprender como escrever código limpo, existem alguns livros que irão explicar os principais conceitos e técnicas.&lt;/p&gt;

&lt;p&gt;Um deles que eu recomendo é o &lt;a href=&#34;https://www.amazon.com.br/C%C3%B3digo-Limpo-Habilidades-Pr%C3%A1ticas-Softwar/dp/8576082675/ref=sr_1_1?ie=UTF8&amp;qid=1467162877&amp;sr=8-1&amp;keywords=c%C3%B3digo+limpo&#34; target=&#34;_blank&#34;&gt;Código Limpo, do Robert C. Martin (Uncle Bob)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Além disso, existem algumas práticas para auxiliar no projeto de classes e na implementação dos métodos, como &lt;em&gt;SOLID&lt;/em&gt; e &lt;em&gt;Object Calisthenics&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por fim, esta é a minha visão sobre qualidade de código, se você tiver outro ponto de vista ou algum complemento, escreva nos comentários!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proteja seu código usando o Webpack</title>
      <link>https://tableless.github.io/hugo-public/proteja-seu-codigo-usando-o-webpack/</link>
      <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/proteja-seu-codigo-usando-o-webpack/</guid>
      <description>

&lt;p&gt;Não é um eufemismo dizer que que as ferramentas de front-end avançam rapidamente. Por um tempo, &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;Grunt&lt;/a&gt; foi o principal automatizador. E desde então a comunidade adotou o &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;Gulp&lt;/a&gt;, uma alternativa de streaming. Embora essas ferramentas sejam ótimas, você ainda precisará trabalhar dura para manter o seu sistema. E é aí que entram os empacotadores como o &lt;a href=&#34;http://browserify.org/&#34; target=&#34;_blank&#34;&gt;Browserify&lt;/a&gt; e &lt;a href=&#34;https://webpack.github.io/&#34; target=&#34;_blank&#34;&gt;Webpack&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;como-usar-um-empacotador&#34;&gt;Como usar um empacotador&lt;/h2&gt;

&lt;p&gt;Os empacotadores resolvem o problema fundamental no desenvolvimento front-end. Eles permitem que você transforme assets arbitrários em algo que possa ser consumido por um navegador. Se você está usando NPM, e deveria, você pode empacotar todos esses pacotes que está utilizando em seu aplicativo para poder usá-los no navegador. Mas há a possibilidade de você querer fazer muitas outras coisas além de empacotar, então você vai entrelaçar isso com alguma ferramenta de automação como o Grunt ou Gulp. Você pode até ignorar um task runner e implementar suas tarefas por meio da seção de &lt;strong&gt;scripts&lt;/strong&gt; &lt;code&gt;package.json&lt;/code&gt; (se estiver usando NPM) para configurar as transformações do Browserify.&lt;/p&gt;

&lt;h2 id=&#34;conhecendo-o-webpack&#34;&gt;Conhecendo o Webpack&lt;/h2&gt;

&lt;p&gt;Você pode alcançar resultados similares tanto com o Browserify quanto o Webpack. O Browserify está mais próximo da filosofia Unix. Ao usá-lo você está literalmente colando pequenos utilitários juntos. Como resultado, o Browserify é fácil de conseguir. Mas se você tem uma lista longa de transformações que deseja aplicar em seu código é melhor utilizar um task runner como Grunt ou Gulp para automatizar esse processo.&lt;/p&gt;

&lt;p&gt;Por outro lado, se você usa Webpack pode nem precisar do Grunt ou Gulp. O Webpack presume que existem certas tarefas que você sempre deseja executar. É claro que você deseja mover os arquivos de uma pasta de origem para um diretório de compilação. Claro que você vai querer completar seu código fonte usando uma (geralmente longa) lista de transformações (aliás, elas são chamadas de &lt;strong&gt;loaders&lt;/strong&gt;, ou carregadores, no Webpack). É claro que você quer usar bibliotecas em diferentes formatos de módulo como CoomonJS, RequireJS ou os novos módulos ES6 se desejar.&lt;/p&gt;

&lt;p&gt;Você pode até desejar lidar com diferentes formatos de arquivos. Para lhe dar um exemplo melhor do que isso significa na prática, considere os códigos abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;style.css&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;body {
    font-family: sans-serif;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// load style to the resulting bundle
require(&#39;./style.css&#39;);

// just print hello, normally we would do
// something more involved and start the
// application here
console.log(&#39;hello world&#39;);&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var webpack = require(&#39;webpack&#39;);

    module.exports = {
    // this is the top level file or set of files
    entry: &#39;./index.js&#39;,
    // it will bundle everything inside this output path
    output: {
    path: __dirname,
    filename: &#39;bundle.js&#39;
},
module: {
loaders: [
{
    // 1. resolve @import and url() through css-loader
    // 2. load the result to bundle using style-loader
    // note that loaders are interpreted from right to left
    test: /.css$/, // A regexp to test the require path
    loaders: [&#39;style&#39;, &#39;css&#39;]
}
]
},
plugins: [
    // minify output
    new webpack.optimize.UglifyJsPlugin()
]
};&lt;/pre&gt;

&lt;p&gt;O Webpack permite que você carregue o CSS da mesma forma que carrega outros códigos com &lt;a href=&#34;https://github.com/webpack/css-loader&#34; target=&#34;_blank&#34;&gt;css-loader&lt;/a&gt; e &lt;a href=&#34;https://github.com/webpack/style-loader&#34; target=&#34;_blank&#34;&gt;style-loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por que você iria querer usar o require para o seu CSS em vez da mesma velha maneira que temos utilizado CSS? Bem, porque o Webpack é inteligente o suficiente para concatenar seu CSS quando ele é pequeno o bastante, caso contrário ele irá minificar o arquivo e dar a ele um nome único para fins de cache. O mesmo pode ser feito com imagens utilizando o &lt;a href=&#34;https://github.com/webpack/url-loader&#34; target=&#34;_blank&#34;&gt;url-loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você executou o Webpack contra essa configuração, você irá acabar com um &lt;code&gt;bundle.js&lt;/code&gt; minificado que contém CSS inline. Pode parecer muito esforço para alcançar um simples resultado como esse. Isso está além do ponto. Considere o seguinte:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;E se você quisesse usar os novos recursos do Javascript em seu projeto? Você teria que configurar o &lt;a href=&#34;https://www.npmjs.com/package/babel-loader&#34; target=&#34;_blank&#34;&gt;babel-loader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse usar CSS compilado? Você precisaria configurar o &lt;a href=&#34;https://github.com/webpack/less-loader&#34; target=&#34;_blank&#34;&gt;less-loader&lt;/a&gt; ou o &lt;a href=&#34;https://github.com/jtangelder/sass-loader&#34; target=&#34;_blank&#34;&gt;sass-loader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse sourcemaps? Você teria que configurar a opção &lt;a href=&#34;https://webpack.github.io/docs/configuration.html#devtool&#34; target=&#34;_blank&#34;&gt;devtool&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse uma saída UMD para sua biblioteca? É preciso configurar o &lt;a href=&#34;https://webpack.github.io/docs/configuration.html#output-librarytarget&#34; target=&#34;_blank&#34;&gt;output.libraryTarget&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;E se você quisesse um servidor de desenvolvimento &lt;em&gt;hot loading&lt;/em&gt;? Você precisaria configurar o &lt;a href=&#34;https://webpack.github.io/docs/webpack-dev-server.html&#34; target=&#34;_blank&#34;&gt;webpack-dev-server&lt;/a&gt; ou construir um sozinho baseado no Express, como mostrado no &lt;a href=&#34;https://github.com/gaearon/react-transform-boilerplate&#34; target=&#34;_blank&#34;&gt;react-transform-boilerplate&lt;/a&gt;. O recurso de &lt;em&gt;hot loading&lt;/em&gt; separa Webpack conforme atualiza seu navegador automaticamente enquanto mantém o estado do aplicativo.&lt;/li&gt;
&lt;li&gt;E se você quisesse múltiplas metas (desenvolvimento, produção, teste)? Poderia usar uma solução como a &lt;a href=&#34;https://www.npmjs.com/package/webpack-merge&#34; target=&#34;_blank&#34;&gt;webpack-merge&lt;/a&gt; e conectar seu automatizador de tarefas com ela.&lt;/li&gt;
&lt;li&gt;E se você quisesse carregar algumas dependências lentamente? Você precisaria configurar o &lt;a href=&#34;https://webpack.github.io/docs/code-splitting.html#require-ensure&#34; target=&#34;_blank&#34;&gt;require.ensure&lt;/a&gt;. O Webpack irá gerar pacotes separados para dividir os pontos e carregá-los sob demanda.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basicamente, você pode desenvolver as configurações para várias direções baseado em suas necessidades. Há definitivamente uma curva de aprendizado e leva um tempo para entender todas as opções. Dito isso, a abordagem é poderosa uma vez que você entende.&lt;/p&gt;

&lt;h2 id=&#34;conectando-o-webpack-com-jscrambler&#34;&gt;Conectando o Webpack com Jscrambler&lt;/h2&gt;

&lt;p&gt;Se você quiser adicionar o Jscrambler para o seu processo de desenvolvimento e estiver usando o Webpack, nós temos uma boa notícia para você! O &lt;a href=&#34;https://github.com/jscrambler/jscrambler-loader&#34; target=&#34;_blank&#34;&gt;jscrambler-loader&lt;/a&gt; está disponível e é realmente fácil de configurar assim como a maioria dos loaders do Webpack.&lt;/p&gt;

&lt;p&gt;Nós vamos lhe mostrar o quanto essa configuração é fácil utilizando o exemplo abaixo e adicionando o &lt;a href=&#34;https://github.com/jscrambler/jscrambler-loader&#34; target=&#34;_blank&#34;&gt;jscrambler-loader&lt;/a&gt; em nosso processo. Também vamos remover o &lt;strong&gt;UglifyJsPlugin&lt;/strong&gt;, já que o &lt;strong&gt;Jscrambler&lt;/strong&gt; pode desempenhar essa mesma função.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var webpack = require(&#39;webpack&#39;);

    module.exports = {
    // this is the top level file or set of files
    entry: &#39;./index.js&#39;,
    // it will bundle everything inside this output path
    output: {
    path: __dirname,
    filename: &#39;bundle.js&#39;
},
module: {
loaders: [
{
    // 1. resolve @import and url() through css-loader
    // 2. load the result to bundle using style-loader
    // note that loaders are interpreted from right to left
    test: /.css$/, // A regexp to test the require path
    loaders: [&#39;style&#39;, &#39;css&#39;]
},
{
    test: /.js$/,
    exclude: /node_modules/,
    loader: &#39;jscrambler-loader&#39;
}
]
}
};&lt;/pre&gt;

&lt;p&gt;Você também irá precisar criar um arquivo chamado &lt;strong&gt;.jscramblerrc&lt;/strong&gt; com suas credenciais da API.&lt;/p&gt;

&lt;p&gt;Você irá encontrar elas no painel de controlo da sua conta Jscrambler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.jscramblerrc&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{
    &#34;keys&#34;: {
    &#34;accessKey&#34;: &#34;XXXXXX&#34;,
    &#34;secretKey&#34;: &#34;XXXXXX&#34;
},
&#34;params&#34;: {
    &#34;self_defending&#34;: &#34;%DEFAULT%&#34;
    // there is a big set of transformations that you can use
    // check https://jscrambler.com/en/help/javascript_obfuscation
}
}&lt;/pre&gt;

&lt;p&gt;Pronto! Você está pronto para depurar o seu código protegido!&lt;/p&gt;

&lt;p&gt;Há várias outras formas de conectar o Jscrambler com o seu sistema. Isso depende do seu task runner. Eu reuni as possíveis abordagens abaixo:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grunt &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/grunt-jscrambler&#34; target=&#34;_blank&#34;&gt;grunt-jscrambler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gulp &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/gulp-jscrambler&#34; target=&#34;_blank&#34;&gt;gulp-jscrambler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;package.json&lt;/em&gt; &amp;#8211; &lt;a href=&#34;https://www.npmjs.com/package/jscrambler&#34; target=&#34;_blank&#34;&gt;Jscrambler CLI tool&lt;/a&gt;. Para isso funcionar, crie um &lt;em&gt;script&lt;/em&gt; separado e depois passe sua versão minificada do Webpack através dele. É preferível manter uma versão local da ferramenta Jscrambler CLI (&lt;code&gt;npm i jscrambler --save-dev&lt;/code&gt;) dentro de seu projeto para que tudo funcione independentemente do ambiente.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O Jscrambler tem um conjunto de ferramentas para proteger seu código (ofuscação + armadilhas no código + serviço de autoproteção de aplicativo, ou RASP em inglês), fazendo com que a engenharia reversa fique significantemente difícil, mas também tem alguns recursos de otimização de código para você tirar vantagem. Você pode até usá-lo para minificação ou compressão.&lt;/p&gt;

&lt;p&gt;Saiba mais sobre o Jscrambler em &lt;a href=&#34;https://jscrambler.com?utm_medium=social&amp;utm_source=tableless&#34; target=&#34;_blank&#34;&gt;jscrambler.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Ainda que o Webpack não seja a ferramenta mais fácil de aprender, eu recomendo que você dê uma olhada nela. O livro &lt;a href=&#34;http://survivejs.com/&#34; target=&#34;_blank&#34;&gt;SurviveJS &amp;#8211; Webpack and React&lt;/a&gt;, que está em inglês, fala sobre essa ferramenta com mais detalhes. A maioria dos conteúdos está disponível gratuitamente e irá lhe ajudar a entender o Webpack e React a um nível mais profundo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrando de enterprise dev para startup dev</title>
      <link>https://tableless.github.io/hugo-public/migrando-de-enterprise-dev-para-startup-dev/</link>
      <pubDate>Sun, 11 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/migrando-de-enterprise-dev-para-startup-dev/</guid>
      <description>&lt;p&gt;Comecei minha carreira na área de desenvolvimento de software razoavelmente cedo, aos 16 anos estudava no ensino médio pela manhã, estagiava à tarde e estudava no curso técnico à noite. Ao contrário de muitos desenvolvedores, meu primeiro contato com código não foi dos melhores, foram horas e horas de estudo pra conseguir entender &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; do que o professor estava tentando ensinar, na época ASP — sim, o ‘clássico’.&lt;/p&gt;

&lt;p&gt;Agora, com 26 anos, posso fazer uma análise interessante do que aconteceu nos últimos 10 anos de software e talvez essa reflexão sirva como norte pra quem está começando ou pra quem está afim de fazer uma troca de ares.&lt;/p&gt;

&lt;p&gt;Começando com algumas verdades:&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;O mercado de trabalho em grandes empresas é entediante&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tive a oportunidade de trabalhar em multinacionais gigantes — não cabe citá-las aqui — e lembro que ao entrar em cada uma delas, a vontade de criar e ser o melhor profissional possível sempre me acompanhava e a cada dia de trabalho essa mesma vontade ia se auto-destruindo por alguns motivos como: código legado horrível, tecnologias do tempo do meu avô, pessoas com incrível má vontade, burocracias infinitas para coisas pequenas e por aí vai.&lt;/p&gt;

&lt;p&gt;Boa parte da energia era sugada por todo e qualquer tipo de atividade, menos pela única coisa que eu realmente queria: criar algo com algum real valor.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Trabalhar com tecnologia pode e deve ser legal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Durante muito tempo questionei se eu realmente estava na área certa, porque a minha satisfação profissional estava sempre abaixo do esperado. Criei diversos side projects, alguns relacionados com TI e outros não, para prencheer essa lacuna da realização.&lt;/p&gt;

&lt;p&gt;O que sempre me intrigava é que ao chegar em casa e criar esses projetos, aprender novas linguagens, fazer um CLI pra ler tweets ou um bot inútil, parecia ser tão legal. Por que eu não conseguia ter um suspiro parecido no meu ambiente profissional?&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Você pode se divertir com TI também&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Certo dia resolvi chutar o balde, largar o emprego em uma dessas grandes multinacionais e ver no que dava.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;PS:&lt;/strong&gt; Anter de continuar, eu não tenho filhos, nem grandes responsabilidades, não vá fazer o mesmo de forma inconsequente, não é essa a ideia 😛&lt;/p&gt;

&lt;p&gt;Dei sorte, fui parar em uma companhia com pessoas excepcionais e que estavam pilhadas na criação de um novo projeto. Eu nunca havia experimentado aquele tipo de dinamismo e vontade de fazer as coisas, parecia que eu estava cego esse tempo todo, que havia um mundo diferente na área de TI e eu só havia enxergado agora.&lt;/p&gt;

&lt;p&gt;Atualmente, em uma outra companhia, encontrei o mesmo feeling e liberdade de criação, de poder usar boas práticas, de ter pessoas com vontade de fazer o melhor todo dia, sem aquele clima de velório, com todo mundo reclamando do processo ou do lay-off que está por vir.&lt;/p&gt;

&lt;p&gt;&lt;strong class=&#34;markup--strong markup--p-strong&#34;&gt;Como você pode fazer esse shift?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Existem diversas maneiras de você se tornar um profissional mais atraente pro mercado, onde esses projetos bacanas estão sendo feitos. Abaixo algumas sugestões:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Aprenda coisas novas fora do ambiente de trabalho, não se limite ao que você vê das 8 as 18, existe um mundo de paradigmas de programação, linguagens, design patterns, projetos open source, tipos de arquitetura que você pode aprender e tirar lições.&lt;/li&gt;
&lt;li&gt;Crie side/pet projects para por em prática essas coisas que você aprende por conta própria, é a melhor maneira de assegurar que você realmente entendeu o que você aprendeu.&lt;/li&gt;
&lt;li&gt;Coloque esses projetos no &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;&lt;/a&gt;, o mesmo pode servir de ‘portfolio’ para você em algum processo seletivo.&lt;/li&gt;
&lt;li&gt;Participe de algum &lt;a class=&#34;markup--anchor markup--li-anchor&#34; href=&#34;https://www.meetup.com/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;a href=&#34;https://www.meetup.com/&#34;&gt;https://www.meetup.com/&lt;/a&gt;&lt;/a&gt; de tecnologia, existem centenas acontecendo pelo Brasil e é uma ótima oportunidade de conhecer pessoas que estão em outros lugares e que podem te ajudar a conseguir uma nova oportunidade.&lt;/li&gt;
&lt;li&gt;Te inscreve em algum dos milhares de cursos onlines (Udemy, Pluralsight, Code Academy, Udacity, Tree House, etc) e faça um até o final.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Por fim, apenas um esclarecimento: eu conheci pessoas muito bacanas e excelentes profissionais nessas grandes empresas que passei também e sim, é possível ser feliz trabalhando nesses lugares, tudo depende do seu perfil. Se você é mais da pilha de inovação/criação de projetos, minhas sugestões talvez façam mais sentido.&lt;/p&gt;

&lt;p&gt;Ah, e não estou considerando ‘enterprise’ empresas como Google, Facebook e/ou qualquer outra que mesmo sendo grande tenha em sua cultura uma vibe diferente em relação aos projetos/times.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A arquitetura Redux usando Jails</title>
      <link>https://tableless.github.io/hugo-public/arquitetura-redux-usando-jails/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/arquitetura-redux-usando-jails/</guid>
      <description>

&lt;p&gt;Ultimamente tenho me preocupado mais com arquiteturas no front-end do que propriamente com as implementações de alguns frameworks. Isso porque eu acho que realmente nos falta um pouco mais de conhecimento sistêmico, mais arquitetural, porque os problemas só estão crescendo e percebi que pelo menos eu não estava acompanhando devidamente a complexidade das aplicações desenvolvidas em Javascript.&lt;/p&gt;

&lt;h2 id=&#34;uma-pequena-reflexão&#34;&gt;Uma pequena reflexão&lt;/h2&gt;

&lt;p&gt;Os frameworks acabaram aparecendo nos últimos tempos e percebo que tiveram uma importância muito maior do que o nosso amadurecimento quanto aos novos desafios nas aplicações web, especificamente na linguagem Javascript. Percebo por comentários de colegas que em entrevistas a preocupação com o conhecimento em determinados frameworks é maior do que a preocupação com o pensamento abstrato do programador Javascript.&lt;/p&gt;

&lt;p&gt;Eu acabei escrevendo um micro-framework, já postei ele aqui, o &lt;strong&gt;&lt;a href=&#34;http://tableless.com.br/jails-o-framework-e-arquitetura-javascript/&#34; target=&#34;_blank&#34;&gt;Jails&lt;/a&gt;&lt;/strong&gt;. Que nada mais é do que uma aplicação de um conceito de relacionamento entre as partes, uma micro-arquitetura baseada em eventos, com alguns padrões, bem simples. Ao invés de vir de fábrica lotada de features, ela apenas resolve o problema básico de &lt;strong&gt;organização.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-problema-principal-e-o-secundário&#34;&gt;O Problema principal e o secundário&lt;/h2&gt;

&lt;p&gt;O &lt;strong&gt;Jails&lt;/strong&gt; não resolve todos os problemas, aliás, não deve e se devesse, não conseguiria. Eu particularmente acredito que quanto mais simples uma solução for, mais &amp;#8220;composable&amp;#8221; ela vai ser, e se possui componentes que podem ser compostos, sua aplicação tende a ser mais simples e mais otimizada para o seu problema inicial.&lt;/p&gt;

&lt;p&gt;Menos tempo também se perde com manutenção de soluções que não estavam no escopo inicial. Aqui entra o velho conceito de divisão e conquista, para um problema complexo, o mais inteligente a se fazer é resolvê-lo quebrando-o em partes menores. O Jails melhorou bastante a organização e a forma de abstrair as coisas para mim sobretudo na reutilização do código, eram estes os problemas iniciais.&lt;/p&gt;

&lt;p&gt;Existe porém um problema secundário, como manter a previsibilidade dos estados de uma aplicação? Um exemplo, o usuário escolhe uma opção em um dropdown, outro componente precisa ser atualizado de acordo com esta opção, em conjunto, um terceiro componente precisa atualizar o texto, e um quarto componente deve mostrar na UI algo que tem relação com a escolha feita no primeiro componente, e todos eles estão de forma espalhada na tela, não são portanto um conjunto de um mesmo módulo.&lt;/p&gt;

&lt;p&gt;Quer dizer então que o Jails não resolve este problema? Claro que não, e isto não significa que é um problema sem solução. Com framework ou sem você vai resolver esse problema. A questão aqui não é apenas resolvê-lo, é como solucionar de maneira &lt;strong&gt;elegante&lt;/strong&gt;, usando uma forma que não comprometa a sanidade do seu código. Isso te ajuda diretamente na manutenção e consequentemente a ser mais ágil quando tiver que fazer alterações ou mesmo criar novas features.&lt;/p&gt;

&lt;h2 id=&#34;redux-a-predictable-state-container&#34;&gt;Redux, a predictable state container&lt;/h2&gt;

&lt;p&gt;Aqui entra um dos conceitos mais interessantes que vi nestes útimos tempos, não me parece ter recebido tanta atenção quanto deveria, mais é genial, pelo menos para mim. Bom, como o título sugere, ele é basicamente um container de estados para sua a aplicação, ele simplifica a arquitetura Flux, adiciona para nós alguns conceitos como reducers, imutabilidade e funções puras.&lt;/p&gt;

&lt;p&gt;A idéia geral dele é, que você tenha apenas uma &lt;strong&gt;Store &lt;/strong&gt;que mantêm todos os estados da sua aplicação, e para cada ação do usuário você deve disparar uma &amp;#8220;action&amp;#8221; para esta store que por sua vez vai atualizar os estados e te notificar que esta atualização finalizou, assim, ao ser notificado você resgata estes estados que são read-only e atualiza seus componentes. As mudanças nestes estados devem ser feitas apenas usando funções puras chamadas de &amp;#8220;reducers&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Há um tempo atrás, quando ainda estava desenvolvendo o Jails, eu já havia notado que em alguns casos seria interessante manter os estados da aplicação em um objeto, fazendo estas alterações neste objeto usando métodos de array como filters, map, reduce para listas, e posteriormente atualizado a view usando um template engine, mustache por exemplo. Uma prova disso é que hoje, as apps e as controllers do Jails compartilham um objeto &lt;strong&gt;data&lt;/strong&gt; entre eles com esta finalidade.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import &#39;components/view&#39;
import jails from &#39;jails&#39;
jails.app(&#39;app&#39;, function(html, data){
    this.init = ()=&amp;gt;{
        let view = this.x(&#39;[data-component*=view]&#39;)
        view(&#39;render&#39;, data)
    }
})
&lt;/pre&gt;

&lt;p&gt;E foi desta forma que resolvia estes problemas de estado da aplicação, mas que possui uma consequência. Não era trivial saber quando ou quem havia alterado aquele objeto. É o clássico problema da variável global, você não consegue dizer com facilidade qual ação foi responsável por uma mudança.&lt;/p&gt;

&lt;p&gt;Outro problema é que objetos não são funções, não há callbacks. Você não consegue dizer à outros módulos que houve uma alteração neste objeto. Aí você vai se sentir tentado a usar aquelas manobras de watch, observer, two-way binding ou seja lá qual for o nome que dê para isso, para te alertar quando o objeto é alterado.&lt;/p&gt;

&lt;p&gt;Hoje já temos bastante informação sobre estas técnicas e sabemos que é difícil verificar de forma recursiva se alguma propriedade do objeto alterou e não é performático.&lt;/p&gt;

&lt;p&gt;É por isso que acho o Redux genial, ele utiliza alguns conceitos do paradigma funcional que resolve de maneira elegante este problema e tem esta idéia de preservar os estados da aplicação em um objeto só, que pra mim por dedução é algo interessante a se fazer hoje em dia, além disso nos garante um mínimo previsibilidade. O Redux usa o conceito de funções puras para alterar os estados e estas funções por serem puras são facilmente passíveis de composições e também são previsíveis. E o melhor, não está preso à implementação do React, é um padrão/arquitetura, um conceito que você pode usar &lt;strong&gt;ONDE VOCÊ QUISER&lt;/strong&gt;. Você prefere AngularJS? Ember? Js Vanilão? React? Não importa, e essa qualidade para mim não tem preço.&lt;/p&gt;

&lt;h2 id=&#34;não-seja-um-robô-pense-por-conta-própria-8230&#34;&gt;Não seja um robô, pense por conta própria&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Já vi lutas ferrenhas sobre qual framework/solução usar, existem aquelas pessoas que são realmente evangelistas no sentido mais religioso, aprendem a usar alguma ferramenta e aquela é a única que presta, a única que irá salvar à todos&amp;#8230; Você já deve ter conhecido alguns destes pregadores de tecnologias certo? Bom, se eu pensasse da mesma forma, diria que deve seguir e usar o Redux em todas as suas aplicações e seguir de forma &amp;#8220;strict&amp;#8221;, usando EXATAMENTE como foi concebida.&lt;/p&gt;

&lt;p&gt;A experiência dos erros que cometi me diz o contrário, não há uma solução que seja ótima para todos os problemas, e é aí que entra o propósito do meu post, só agora posso esclarecer isso.&lt;/p&gt;

&lt;p&gt;Existem muitas outras fontes que ensinam de forma muito mais didática sobre o Redux, screencasts do próprio desenvolvedor que concebeu este conceito e uma documentação completa no github. Não faz sentido repassar estas informações que já estão disponíveis na web.&lt;/p&gt;

&lt;p&gt;Meu intuito é passar um pouco do aprendizado e experiência que eu tive &lt;strong&gt;usando&lt;/strong&gt; e &lt;strong&gt;adaptando&lt;/strong&gt; o Redux. Talvez isso seja útil para você que trabalha com Backbone, Angular ou qualquer outro framework. Pense no seu projeto, pense nas pessoas que vão trabalhar nele, pense no quão complexo ele é ou vai ser. Use sua criatividade para adaptar algo no conceito quando ele está verboso demais, complexo demais ou quando não serve exatamente da maneira como foi concebido, o meu conselho é que não lute para fazer com que ele &amp;#8220;caiba&amp;#8221; no seu projeto exatamente como é, pense por conta própria também.&lt;/p&gt;

&lt;h2 id=&#34;a-implementação-e-mudanças&#34;&gt;A implementação e mudanças&lt;/h2&gt;

&lt;p&gt;Para experimentar este conceito novo para mim, implementei um Todo List, não tão complexo quanto o &lt;a href=&#34;http://todomvc.com/&#34;&gt;TodoMVC&lt;/a&gt;, serviu apenas para poder fixar as idéias. As primeiras mudanças que fiz foi remover os &lt;strong&gt;actions creators&lt;/strong&gt; e as &lt;strong&gt;constantes&lt;/strong&gt;. Actions creators são funções que criam as actions (objetos) que são usados como informações pela Store. Uma action também possui uma propriedade &lt;strong&gt;type &lt;/strong&gt;que armazena qual o tipo de ação, ela é uma string e portanto na documentação oficial ela é referenciada através de uma constante.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function addTodo( text ){
    return{
        type :ADD_TODO,
        text
    }
}
&lt;/pre&gt;

&lt;p&gt;Há alguns motivos pelos quais tanto as constantes quanto as actions creators existem, principalmente em projetos muito grandes, o motivo mais óbvio é que essa granulação ajuda caso seja necessário alterar por exemplo o nome de uma constante, ou adicionar propriedades em uma action sem que seja necesário revisitar todos os lugares onde se usam as constantes ou as actions.&lt;/p&gt;

&lt;p&gt;Mas no meu caso o projeto é pequeno, e a consequência disso é que ao invés de ajudar isso acaba atrapalhando um pouco na manutenção. Se o projeto é pequeno e possui apenas um lugar onde estas actions existem, este processo acaba tornando sua arquitetura burocrática desnecessariamente, você força o programador a alterar várias partes diferentes da aplicação ainda que a mudança seja algo muito simples, costumamos chamar isso de &lt;em&gt;over engineering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;No &lt;strong&gt;Jails&lt;/strong&gt; a controller é como um módulo fechado, que controla os eventos. Para uma &lt;em&gt;todo&lt;/em&gt; list, o processo de adicionar &lt;em&gt;todos&lt;/em&gt; ou_ _remover &lt;em&gt;todos&lt;/em&gt; só fará sentido neste módulo ( neste meu projeto ). Portanto, não preciso dar tantas voltas:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import &#39;components/riot-view/riot-view&#39;
import &#39;components/submitter/submitter&#39;

import jails from &#39;jails&#39;
import store from &#39;stores/todos&#39;

jails.controller(&#39;todos&#39;, function(){

    const view = this.x(&#39;.view&#39;)

    this.init = ()=&amp;gt;{

        this.on(&#39;blur&#39;, &#39;li .form-control&#39;, save)
        this.on(&#39;click&#39;, &#39;.remove&#39;, remove)
        this.listen(&#39;submitter:post&#39;, add)

        //...
    }

    function update( state = todos.getState() ){
        view(&#39;update&#39;, state )
    }

    function save( id, text ){
        let id = +e.target.title,
            text = e.target.value
        if ( text ){
            store.dispatch({ id, text, type :&#39;UPDATE_TODO&#39; })
        }
    }

    function add( e, opt ){
        let form = e.target,
            text = opt.params.text.trim()
        if( text ){
            store.dispatch({ text, type :&#39;ADD_TODO&#39; })
        }
    }

    function remove( e ){
        let id = +e.target.title
        store.dispatch({ id, type :&#39;REMOVE_TODO&#39; })
    }
        //...
})


&lt;/pre&gt;

&lt;p&gt;Um pouco mais direto&amp;#8230;  Como podem ver no código, o Jails abstrai a parte de eventos do DOM, e interpreta qual é a ação executada pelo usuário e delega a action para o módulo &lt;strong&gt;store&lt;/strong&gt;. Aí estão algumas ações que a minha todo list espera, como adicionar um todo, remover e salvar.&lt;/p&gt;

&lt;h2 id=&#34;a-store&#34;&gt;A Store&lt;/h2&gt;

&lt;p&gt;A minha store é bem simples para este caso, não precisei fazer mudanças drásticas, o modelo da documentação já me serviu, as mudanças apenas são de forma estrutural por causa do framework que eu utilizo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import Reduxtore from &#39;modules/reduxtore/reduxtore&#39;
import storage from &#39;modules/storage/storage&#39;
import reducer from &#39;reducers/todos/index&#39;

export default (()=&amp;gt;{

    let list, store

    list = storage.session.get(&#39;todos&#39;) || []

    store = new Reduxtore( reducer, {
        filter  :&#39;all&#39;,
        todos   :list,
        items   :list
    })

    store.subscribe(()=&amp;gt;{
        storage.session.set(&#39;todos&#39;, store.getState().todos )
    })

    return store
})()
&lt;/pre&gt;

&lt;p&gt;Aqui está a definição da store da minha aplicação, eu importo um módulo AMD que abstrai o processo de local storage, para poder salvar o estado da aplicação, importo um reducer que será passado como parametro para minha store, e também defino o estado inicial e os campos que minha aplicação deve conter.&lt;/p&gt;

&lt;p&gt;A classe Reduxtore é apenas uma implementação que fiz em AMD do conceito de Store do Redux, seguindo a especificação, possui os métodos .&lt;strong&gt;getState()&lt;/strong&gt;, .&lt;strong&gt;dispatch()&lt;/strong&gt; e &lt;strong&gt;subscribe()&lt;/strong&gt;. Na especificação existem outros métodos, mas estes para mim por enquanto são suficientes.&lt;/p&gt;

&lt;p&gt;Toda vez que quero disparar uma ação utilizo .&lt;strong&gt;dispatch()&lt;/strong&gt;, o callback de uma alteração de estado é registrado pelo método .&lt;strong&gt;subscribe()&lt;/strong&gt; e sempre que quiser resgatar o estado atual da aplicação, utilizo .&lt;strong&gt;getState()&lt;/strong&gt;. No meu caso, a minha store salva os dados no local storage e resgata-os assim que inicia.&lt;/p&gt;

&lt;h2 id=&#34;reducers-e-funções-puras&#34;&gt;Reducers e Funções puras&lt;/h2&gt;

&lt;p&gt;Se a Store é responsável por manter e armazenar o estado da minha aplicação, você deve se perguntar quem faz as alterações nos estados. Eu havia dito anteriormente que são os reducers, o nome pode assustar um pouco porque podemos fazer algumas assunções, mas a grosso modo, são apenas funções puras, que recebem um estado como primeiro parâmetro e uma &amp;#8220;action&amp;#8221; como segundo parâmetro.&lt;/p&gt;

&lt;p&gt;De forma bem grosseira, funções puras são aquelas do tipo f(x, y) =&amp;gt; x + y , por exemplo, onde o resultado esperado como saída deve ser sempre o mesmo quando passados os mesmos valores. O que significa que para a função acima de exemplo, se x for 10 e y for 5 o resultado final SEMPRE será 15. Ela não pode ser não-determinística a ponto de te retornar um valor diferente para os mesmos parametros. Tipo : &lt;strong&gt;f(10, 5) = 15&lt;/strong&gt;,** &lt;span style=&#34;color: #ff0000&#34;&gt;f(10, 5) = 20&lt;/span&gt;**.&lt;/p&gt;

&lt;p&gt;Outra característica das funções puras é o fato delas não acarretarem efeitos colaterais na sua execução, ou seja, passados x, y ela apenas irão computar x e y. Não se pode inserir um z na questão, ou executar um método de I/O como ler um arquivo , executar um ajax ou mesmo alterar um elemento do dom. Por isso as funções puras são previsíveis, o que nos ajuda e muito na sanidade da nossa aplicação, ao invés disso, o que costumamos fazer é algo do tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function soma( x, y ){
    document.body.innerHTML = &#39;AHAHAHHAH&#39;
    global.var = null
    return x+y
}
&lt;/pre&gt;

&lt;p&gt;Esta função não é pura, inclusive é imunda. Esse exemplo é caricato, mas pode perceber que faz muito isso olhando pros seus códigos, esta função soma que deveria apenas somar produz efeitos colaterais, no caso acima, no DOM e numa variável global. E se retirar a linha que altera o DOM e a linha da variável global, e por algum motivo sua função retorna soma algumas vezes e outras retorna a divisão, pros mesmos parâmetros, então ela também não é pura. É interessante que mantenha em mente o que eu disse anteriormente sobre não ser um robô. Não mude todas as suas funções para funções puras. As funções impuras também tem sua utilidade.&lt;/p&gt;

&lt;p&gt;Então teríamos um reducer que modificaria um determinado campo do nosso objeto que armazena os estados da nossa aplicação.&lt;/p&gt;

&lt;p&gt;Abaixo segue a implementação do reducer que modifica o estado &lt;strong&gt;{ todos:[] } &lt;/strong&gt;da minha Store:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;export default function( state = [], action ){

    switch( action.type ){

        case &#39;ADD_TODO&#39;: return [
            ...state, {
                text        :action.text,
                completed   :false,
                edit        :false,
                id      :(Math.random() * Math.pow(10, 20))
            }
        ]

        case &#39;UPDATE_TODO&#39;: return state.map( item =&amp;gt;{
            if( item.id == action.id ){
                item.text = action.text
                item.edit = false
            }
            return item
        })

        case &#39;REMOVE_TODO&#39;: return state.filter( item =&amp;gt;
            item.id != action.id
        )

        default : return state
    }
}
&lt;/pre&gt;

&lt;p&gt;Como o estado &lt;strong&gt;todos &lt;/strong&gt;é uma lista, eu sempre vou retornar uma lista, todos os reducers recebem as ações disparadas, cabe a você definir à quais ações o seu reducer irá responder. Isso é muito legal no Redux, facilita e MUITO no processo de inserir novas features no seu projeto.&lt;/p&gt;

&lt;p&gt;Para o estado &lt;strong&gt;filter&lt;/strong&gt; que cuida dos filtros da minha todo list como &amp;#8220;completos&amp;#8221; &amp;#8220;ativos&amp;#8221; ou &amp;#8220;todos&amp;#8221;, eu crio outro reducer, responsável por alterar apenas este estado:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;export default (state = &#39;all&#39;, action) =&amp;gt;{
    return action.filter? action.filter :state
}
&lt;/pre&gt;

&lt;p&gt;Este é bem simples. Este reducer sempre vai retornar valores entre &amp;#8220;all&amp;#8221;, &amp;#8220;completed&amp;#8221;, &amp;#8220;active&amp;#8221;. Note que aqui estou desconsiderando o tratamento do action.filter, portanto se for passado um estado que não está dentro dos valores que mencionei, o código irá quebrar. Mantive desta forma por questões didáticas.&lt;/p&gt;

&lt;h2 id=&#34;combinação-de-reducers&#34;&gt;Combinação de Reducers&lt;/h2&gt;

&lt;p&gt;Lembra que na definição da minha Store, eu podia passar apenas um reducer, certo? Como eu tenho dois para essa aplicação como eu passo estes reducers se minha store recebe apenas um?&lt;/p&gt;

&lt;p&gt;Aqui é onde você percebe que as coisas encaixam&amp;#8230;  Se você tem duas funções puras que recebem um estado como primeiro parâmetro e a mesma action como segundo, basta criar uma terceira que engloba as outras duas, combinando os reducers:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import todos from &#39;reducers/todos/todo&#39;
import visibility from &#39;reducers/todos/visibility&#39;

export default ( state, action ) =&amp;gt;{

            let list = todos( state.todos, action ),
        filter   = visibility( state.filter, action ),
        filtered = todos( list, { type  :&#39;FILTER_TODO&#39;, filter })

    return {
        filter,
        todos   :list,
        items   :filtered
    }
}
&lt;/pre&gt;

&lt;p&gt;Este reducer é exatamente o que é importado lá em cima na nossa Store. Lembrando que na nossa Store, nos passamos um objeto com 3 estados, { &lt;strong&gt;todos, items, filter &lt;/strong&gt;}. Essa main reducer vai receber como primeiro parametro esse objeto com os 3 estados, e vai repassar cada estado para seu reespectivo reducer que por sua vez, vai retornar um novo estado dado aquela ação, e todos recebem a mesma action! \o/&lt;/p&gt;

&lt;p&gt;No meu main reducer ali eu mudei um pouco, fiz diferente do modo como vi na implementação do redux no TodoMVC, eu criei  um estado a mais que é o estado &lt;strong&gt;items&lt;/strong&gt;, porque este é o que aparece para o usuário, mas não é o reflexo de todos os &lt;strong&gt;todos&lt;/strong&gt; que eu possuo. O que acontecia antes de eu adicionar esse campo é que na hora de escolher por um filtro que apenas mostrava os &lt;strong&gt;todos&lt;/strong&gt; completados a minha Store automaticamente salvava este estado no session storage e eu perdia os items que estavam &lt;strong&gt;incompletos&lt;/strong&gt; por exemplo. Então eu precisava de um campo para realmente armazenar todas as entradas que eu tinha, e outro campo chamado &amp;#8220;&lt;strong&gt;items&lt;/strong&gt;&amp;#8221; que serve de forma visual na hora de filtrar os &lt;strong&gt;todos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Na documentação do redux usando React ele resolve esse problema dos itens filtrados na view. Eu particularmente prefiro ter &lt;strong&gt;menos lógica possível&lt;/strong&gt; na view e isso é só uma questão de preferência.&lt;/p&gt;

&lt;p&gt;Essa alteração foi extremamente simples e é incrível como é fácil resolver problemas deste tipo de forma elegante, não fugi do padrão do reducer, das funções puras, e consegui reutilizar o reducer &lt;strong&gt;todos &lt;/strong&gt;apenas passando a ação de filtro para a mesma lista de items usando a mesma função salvando em outro estado.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;De fato isso melhorou bastante o desenvolvimento de aplicações complexas que estava desenvolvendo, é preciso amadurecimento nessa arquitetura ainda. Faz apenas alguns meses que estou mexendo nisso e não posso incluir essa arquitetura em qualquer projeto, então o processo de amadurecimento e experiência é lento.&lt;/p&gt;

&lt;p&gt;Realmente isso resolve muitos problemas recorrentes que tinha e de quebra você ganha um poder que nem percebeu, de graça. Por concentrar todos os estados da sua aplicação em um objeto, e realizar todas as mudanças neste objeto, você pode &amp;#8220;voltar no tempo&amp;#8221;, basta fazer um subscribe na sua Store, e sempre que ela atualizar, armazene o último estado em um array. Dessa forma, como sua aplicação responde sempre à um estado, você pode incluir uma funcionalidade de &amp;#8220;undo&amp;#8221; e &amp;#8220;redo&amp;#8221;, apenas navegando entre os estados desse array =).&lt;/p&gt;

&lt;p&gt;Além disso você perde menos tempo com detalhes do DOM, delegue isso para alguma lib de template, e se concentre nos estados, isso inclusive te ajuda na hora de testar o comportamento da sua aplicação, você não precisa emular o DOM, basta testar as propriedades de cada estado.&lt;/p&gt;

&lt;h2 id=&#34;finalizando-8230&#34;&gt;Finalizando&amp;#8230;&lt;/h2&gt;

&lt;p&gt;Bom galera, era isso que eu tinha pra falar, eu não postei a aplicação por completo para não estender ainda mais esse post, deixarei no final do post um link com o app funcionando e o código-fonte no caso de alguém se interessar. A idéia do post não é servir como referência para suas aplicações baseadas em Redux, serve apenas para instigar um pouco a curiosidade com relação à padrões e arquiteturas, deixando os frameworks em segundo plano. Há outros conceitos não discutidos como &lt;strong&gt;imutabilidade&lt;/strong&gt; e outras coisas mais, sugiro a leitura da documentação oficial para maiores detalhes.&lt;/p&gt;

&lt;p&gt;O TodoApp que fiz é um projeto feito em AMD, usando o micro-framework Jails para relacionamento entre componentes e módulos, o projeto foi escrito usando a sintaxe do ES6 usando &lt;strong&gt;Babel&lt;/strong&gt; para gerar os AMD&amp;#8217;s em ES5. Estou usando como componente de renderização o &lt;a href=&#34;http://riotjs.com/&#34; target=&#34;_blank&#34;&gt;RiotJS&lt;/a&gt; que implementa virtualDOM e é extremamente leve, tornou-se minha engine padrão nos projetos para renderização de templates, embora ela seja muito mais que isso. O Riotjs é uma ótima alternativa para quem quer colocar os conceitos do React em prática.&lt;/p&gt;

&lt;p&gt;Um grande abraço.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jails-org/Demos/tree/master/TodoApp&#34; target=&#34;_blank&#34;&gt;Jails TodoApp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree?series=getting-started-with-redux&#34; target=&#34;_blank&#34;&gt;Redux Course ( Screencasts )&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://redux.js.org/&#34; target=&#34;_blank&#34;&gt;Redux Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34; target=&#34;_blank&#34;&gt;Pure Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://riotjs.com/&#34; target=&#34;_blank&#34;&gt;RiotJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://babeljs.io/docs/plugins/transform-es2015-modules-amd/&#34;&gt;Babel &amp;amp; AMD modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Usando GIT para atualizar arquivos no servidor de hospedagem II – Final</title>
      <link>https://tableless.github.io/hugo-public/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem-ii-final/</link>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem-ii-final/</guid>
      <description>

&lt;p&gt;Esta é a segunda e última parte do artigo que explica como fazer um esquema simples para deploy automático usando GIT + Bitbucket&lt;/p&gt;

&lt;p&gt;A mesma configuração pode ser usada em qualquer servidor GIT e qualquer serviço de hospedagem que tenha acesso via ssh e git instalado&lt;/p&gt;

&lt;p&gt;Se você ainda não leu a primeira parte, segue o link: &lt;a href=&#34;http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem&#34;&gt;http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No artigo anterior, criamos as chaves SSH para autenticação no Bitbucket, criamos um repositório GIT e manualmente executamos o comando | git pull | para atualizar o nosso repositório.&lt;/p&gt;

&lt;p&gt;Nessa segunda parte vamos executar o comando para atualização, de forma automatizada, sem precisar acessar o servidor. Vamos fazer um painel de controle para acompanhar os logs de deploy, mostrando se o comando foi executado com sucesso ou se aconteceu algum erro.&lt;/p&gt;

&lt;p&gt;Gostaria de lembrar que essa é uma solução simples, existem várias maneiras de fazer deploy automatizado, eu escolhi fazer usando php e shell_exec, é mais rápido e para projetos simples isso funciona muito bem. O mesmo pode ser feito usando &lt;a href=&#34;https://pt.wikipedia.org/wiki/CGI&#34;&gt;CGI&lt;/a&gt; ou &lt;a href=&#34;https://pt.wikipedia.org/wiki/Shell_script&#34;&gt;Shell Script&lt;/a&gt;, ou ainda você pode usar um serviço online como o heroku.com, ou configurar o Capistrano, ou Jenkins, etc&amp;#8230;&lt;/p&gt;

&lt;h4 id=&#34;o-comando-shell-exec-no-php&#34;&gt;O Comando shell_exec no PHP&lt;/h4&gt;

&lt;p&gt;No manual do php:&lt;/p&gt;

&lt;p&gt;(PHP 4, PHP 5, PHP 7)&lt;/p&gt;

&lt;p&gt;shell_exec — Executa um comando via shell e retorna a saída inteira como uma string&lt;/p&gt;

&lt;p&gt;Isso quer dizer que podemos executar um comando no servidor e ler o retorno desse comando, no nosso caso vamos executar o comando | git pull origin master | o mesmo comando que estávamos executando manualmente lá no servidor, lembra que tínhamos que acessar o servidor via putty, navegar até a pasta do nosso repositório e depois executar um git pull, já que isso é uma tarefa repetitiva, vamos automatizar, é isso que devemos fazer com todos os processos repetitivos.&lt;/p&gt;

&lt;p&gt;Em muitos servidores de hospedagem esse comando é bloqueado por padrão, se estiver bloqueado você vai receber um aviso parecido com esse:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;Warning:  shell_exec() has been disabled for security reasons in /var/www/deploy.php on line 10&lt;/pre&gt;

&lt;p&gt;No meu caso eu abri um chamado no painel da hospedagem, explicando que precisava da liberação para usar em um sistema de deploy automático usando GIT e prontamente fui atendido e o comando foi liberado.&lt;/p&gt;

&lt;p&gt;Vou usar o mesmo repositório que usei para a primeira parte, &lt;a href=&#34;https://bitbucket.org/jzonta/artigo_atualizacao_arquivos&#34;&gt;https://bitbucket.org/jzonta/artigo_atualizacao_arquivos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos Começar, e vamos usar um dos termos da metodologia XP &amp;#8211; Extremme Programing, &amp;#8220;Baby Steps&amp;#8221;, vamos executar todo o processo em pequenos passos, eu vou atualizar o repositório no GIT com todos os passos, você pode acessar e ver todos os commits &amp;#8211; inclusive os errados 🙂 &amp;#8211; é bacana pra ver a evolução do código.&lt;/p&gt;

&lt;p&gt;Vou criar uma pasta chamada deploy e dentro um arquivo chamado index.php, quando executado pelo navegador ele atualiza nosso servidor executando o comando git pull no servidor e imprimindo na tela o resultado do commnado.&lt;/p&gt;

&lt;p&gt;A pasta deploy deve ficar dentro da pasta do seu projeto, você pode ver a estrutura que usei no repositório desse artigo no Bitbucket.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Note que no final do comando git pull eu adicionei &amp;#8220;2&amp;gt;&amp;amp;1&amp;#8221; isso quer dizer que alem das saídas normais eu quero exibir as saídas de erro do nosso comando no servidor.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;index.php&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
    &amp;lt;?php
        $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
        echo $exec;
    ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A saída na tela é a mesma que aparece quando executamos o comando lá no servidor, veja o exemplo da saída no servidor e no navegador:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/comando_shell_navegador.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51941&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/comando_shell_navegador.jpg&#34; alt=&#34;comando_shell_navegador&#34; width=&#34;657&#34; height=&#34;210&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Lembre-se que para enviar esse arquivo ao servidor você não deve usar o ftp, faça isso utilizando o comando |git pull|, já fizemos isso na primeira parte do artigo.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Já estamos atualizando nosso servidor apenas acessando uma url em nosso navegador \o/, mas não é só isso que queremos, eu quero que essa url seja chamada sempre que eu enviar um push para o repositório, então acesse sua conta no Bitbucket e vamos configurar isso.&lt;/p&gt;

&lt;p&gt;Acesse seu repositório, no menu lateral esquerdo, clique em &amp;#8220;Configurações&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Na tela configurações clique em &amp;#8220;Webhooks&amp;#8221; e depois em &amp;#8220;Add Webhook&amp;#8221;&lt;/p&gt;

&lt;p&gt;No campo &amp;#8220;Title&amp;#8221; adicione um nome de sua preferência e no campo &amp;#8220;URL&amp;#8221; adicione o endereço para a sua url que executa o comando de atualização, no meu caso a URL é &amp;#8220;&lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php&amp;amp;#8221&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php&amp;amp;#8221&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;Mas não podemos deixar essa URL aberta, porque qualquer um poderia acessar e isso iria executar o comando git pull em nosso servidor, então vamos criar um token de autenticação, junto com a URL eu passo um token que mais tarde vamos validar lá no nosso código, então a URL ficaria assim: &lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php?token=d41d8cd98f00b204e9800998ecf8427e&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php?token=d41d8cd98f00b204e9800998ecf8427e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Use este site para gerar seu token: &lt;a href=&#34;http://www.miraclesalad.com/webtools/md5.php&#34;&gt;http://www.miraclesalad.com/webtools/md5.php&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/adicionar_webhook.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51940&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/adicionar_webhook.jpg&#34; alt=&#34;adicionar_webhook&#34; width=&#34;850&#34; height=&#34;439&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, toda vez que enviar um push para o Bitbucket ele vai acessar a URL, e nossa url vai disparar o comando |git pull| no servidor e os arquivos serão atualizados. Nosso deploy já esta funcionando, mas eu também quero visualizar os logs, para ter maior controle sobre oque esta acontecendo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/local_git_servidor.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51943&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/local_git_servidor.jpg&#34; alt=&#34;local_git_servidor&#34; width=&#34;444&#34; height=&#34;352&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*No seu repositório no Bitbucket, vc pode ver os requests que foram feitos entrando em &amp;#8220;Configurações&amp;#8221;, &amp;#8220;Web Hooks&amp;#8221;, ao lado do Title do seu webhook você clica em &amp;#8220;View Requests&amp;#8221; e pode ver todas as requisições que o Bitbucket fez para a sua URL.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;gravando-log&#34;&gt;Gravando Log&lt;/h4&gt;

&lt;p&gt;Primeiro vamos gerar o texto que queremos gravar no nosso arquivo de log, poderíamos apenas colocar a saída do comando shell_exec, mas vamos adicionar a data, hora e algumas quebras de linha para deixar o nosso log mais legível, veja como ficou o código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
    &amp;lt;?php
        $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
        echo $exec;

        $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
        $textoLog .= PHP_EOL.$exec;

        $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
        fwrite($arquivoLog, $textoLog);
        fclose($arquivoLog);
    ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Não precisa explicar muito o código php porque é bem simples, se alguém tem dúvida dobre alguma das funções usadas é só dar uma procurada no site do php (&lt;php.net&gt;) ou no google, tem bastante material.&lt;/p&gt;

&lt;p&gt;Se tudo está ocorrendo como planejado, quando você executar novamente seu endereço URL ele vai criar um arquivo chamado log.txt na mesma pasta, e gravar os logs neste arquivo.&lt;/p&gt;

&lt;h4 id=&#34;adicionando-token-de-validação&#34;&gt;Adicionando Token de Validação&lt;/h4&gt;

&lt;p&gt;Vamos deixar nosso deploy um pouco mais seguro. Lembra que na URL que adicionamos lá no webhook do Bitbucket colocamos um token? Então, agora vamos validar esse token.&lt;/p&gt;

&lt;p&gt;Criei uma variavel chamada $token e adicionei a nossa string MD5&lt;/p&gt;

&lt;p&gt;Depois a variavel $tokenValido recebe true se o token enviado via post ou get for igual ao token que configuramos na variavel $token, caso contrário recebe false.&lt;/p&gt;

&lt;p&gt;Depois verificamos se $tokenValido for igual a true executa o deploy se não exibe o log e um botão para atualizar manualmente.&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;pre&amp;gt;
    &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else {
            //Deve exibir o log e um botão para para executar a atualização
        }
    ?&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;implementando-a-leitura-do-log-e-botão-para-atualizar&#34;&gt;Implementando a Leitura do Log e Botão Para Atualizar&lt;/h4&gt;

&lt;p&gt;No código abaixo foi adiciona a implementação que lê o arquivo de log através do comando file() e depois exibe na tela, também foi adicionado um formulário com o botão &amp;#8220;Atualizar&amp;#8221;, caso ocorra alguma falha na atualização automática através do webhook esse botão pode ser utilizado para forçar essa atualização e executar o nosso deploy.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
        &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else {
        ?&amp;gt;
            &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
                &amp;lt;input type=&#34;hidden&#34; name=&#34;token&#34; value=&#34;d41d8cd98f00b204e9800998ecf8427e&#34;&amp;gt;
                &amp;lt;input type=&#34;submit&#34; value=&#34;Atualizar&#34;&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;?php
        $texto = file(&#39;log.txt&#39;);
        foreach ($texto as $linha) {
            echo $linha;
        }
        }
        ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;adicionando-autenticação&#34;&gt;Adicionando Autenticação&lt;/h4&gt;

&lt;p&gt;Tudo funcionando, mas qualquer um pode entrar na nossa URL, visualizar os logs e clicar no botão para atualizar o servidor.&lt;/p&gt;

&lt;p&gt;Então vou implementar uma autenticação simples, iniciando uma sessão e usando a variável $senhaAcesso, então nossas regras seriam as seguintes:&lt;/p&gt;

&lt;p&gt;Se receber o token, faz a validação, se estiver correto, atualiza o nosso servidor&lt;/p&gt;

&lt;p&gt;Se receber a senhaAcesso, faz a validação se estiver correto, mostra o log e o botão para atualizar&lt;/p&gt;

&lt;p&gt;Se não receber o token e nem a senhaAcesso mostra um form solicitando a senha&lt;/p&gt;

&lt;p&gt;Nosso código tem apenas 3 condições no if, eu preferi deixar assim pra ficar mais fácil de entender, as condições separadas para ficar mais fácil de entender:&lt;/p&gt;

&lt;pre&gt;if($tokenValido) {
            // Se o toquem for válido
            // Executa o comando git pull para atualizar o servidor e grava o log
        } else if($_SESSION[&#39;usuarioValido&#39;]) {
            // Se o usuário estiver logado mostra o log e o botão para atualizar
        } else {
            //Se o usuário não estiver logado mostra o formulário para logar
        }
&lt;/pre&gt;

&lt;p&gt;Abaixo o código completo desta etapa:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
session_start();
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
$senhaAcesso = &#39;joaozonta&#39;;

if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;

if($_REQUEST[&#39;senhaAcesso&#39;] == $senhaAcesso &amp;&amp; empty($_SESSION[&#39;usuarioValido&#39;]))
    $_SESSION[&#39;usuarioValido&#39;] = true;

if($_REQUEST[&#39;sair&#39;])
    unset($_SESSION[&#39;usuarioValido&#39;]);
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;pre&amp;gt;
    &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else if($_SESSION[&#39;usuarioValido&#39;]) {
        ?&amp;gt;
        &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
            &amp;lt;input type=&#34;hidden&#34; name=&#34;token&#34; value=&#34;d41d8cd98f00b204e9800998ecf8427e&#34;&amp;gt;
            &amp;lt;input type=&#34;submit&#34; value=&#34;Atualizar&#34;&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;?php
        if($_SESSION[&#39;usuarioValido&#39;])
            echo &#39;&amp;lt;p&amp;gt;&amp;lt;a href=&#34;index.php?sair=true&#34;&amp;gt;Sair&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#39;;
            $texto = file(&#39;log.txt&#39;);
            foreach ($texto as $linha) {
                echo $linha;
            }
        } else {
        ?&amp;gt;
        &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type=&#34;text&#34; placeholder=&#34;Senha&#34; name=&#34;senhaAcesso&#34;&amp;gt; 
            &amp;lt;/div&amp;gt;
            &amp;lt;input type=&#34;submit&#34; value=&#34;Acessar Sistema&#34;&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;?php
        }
    ?&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h4&gt;

&lt;p&gt;De uma maneira muito simples você pode atualizar seu servidor sem depender de um sistema complexo de deploy e sem muitas configurações.&lt;/p&gt;

&lt;p&gt;Você pode implementar muitas outras opções para deixar o seu sistema cada vez mais completo, pode adicionar um botão para limpar o log ou adicionar o log em um banco de dados. Já imaginou mostrar um combo com os últimos commits realizados e você escolher qual desses commits você quer atualizar no servidor, podendo assim voltar e avançar versões.&lt;/p&gt;

&lt;p&gt;Não falei sobre banco de dados nesse artigo, acho que isso pode ser tratado em outro tópico.&lt;/p&gt;

&lt;p&gt;Você pode ver o exemplo funcionando em &lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/&lt;/a&gt;, use a senha &amp;#8220;joaozonta&amp;#8221;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;No exemplo que esta no ar foram comentadas as linhas que fazem o deploy automático, está apenas simulando o funcionamento.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fique á vontade para entrar em contato para qualquer dúvida, sugestão, crítica ou erro que encontrar nesse artigo.&lt;/p&gt;

&lt;p&gt;João A. Zonta&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.joaozonta.com.br&#34;&gt;joaozonta.com.br&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/joaozontaweb&#34;&gt;@joaozontaweb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;mailto:joao@joaozonta.com.br&#34;&gt;joao@joaozonta.com.br&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Por que Python?</title>
      <link>https://tableless.github.io/hugo-public/por-que-python/</link>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/por-que-python/</guid>
      <description>

&lt;p&gt;Eu sou apaixonado por &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;. Muito. Daquele tipo que fala de Python sempre que pode. E uma pergunta que sempre me fazem é: por quê? Vou tentar fazer uma lista dos motivos mais relevantes:&lt;/p&gt;

&lt;h2 id=&#34;1-é-muito-bom-escrever-código-python&#34;&gt;1. É muito bom escrever código Python&lt;/h2&gt;

&lt;p&gt;Geralmente, quando alguém cria uma linguagem de programação, tem em vista um objetivo. Por exemplo, Lisp foi escrita para programação funcional. Java foi escrita para que o mesmo código pudesse rodar em qualquer lugar. PHP foi criada para construir páginas web. E Python foi criada para ser produtiva e fácil de escrever.&lt;/p&gt;

&lt;p&gt;Um programador experiente aprende a sintaxe do Python em algumas poucas horas. O jeito de escrever faz sentido.&lt;/p&gt;

&lt;p&gt;Veja, por exemplo, essa função para calcular um número de &lt;a href=&#34;https://pt.wikipedia.org/wiki/Sequ%C3%AAncia_de_Fibonacci&#34;&gt;Fibonacci&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;def fib(n):
    if n&amp;lt;3:
        return n
    return fib(n-1) + fib(n-2)&lt;/pre&gt;

&lt;p&gt;Note como a sintaxe é simples. Mesmo nas decisões de design que são &amp;#8220;pouco ortodoxas&amp;#8221;, como os blocos baseados na indentação, a decisão foi tomada pensando em produtividade. O modelo de blocos do Python faz com que você precise digitar menos. Além disso, é impossível escrever código não indentado em Python.&lt;/p&gt;

&lt;p&gt;Veja nesse outro exemplo, a função de Fibonacci em uma versão &lt;a href=&#34;https://en.wikipedia.org/wiki/Memoization&#34;&gt;memoized&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;memo = {0:0, 1:1}

def fib(n):
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Reparou como é simples? Ao trabalhar com Python, a linguagem nunca está entre você e seu problema. Você pode gastar seu tempo com a lógica de programação, que é o que realmente importa, e não com especificidades da linguagem que você está usando.&lt;/p&gt;

&lt;h2 id=&#34;2-organizar-um-projeto-python-é-muito-fácil&#34;&gt;2. Organizar um projeto Python é muito fácil&lt;/h2&gt;

&lt;p&gt;Vamos colocar nossa função de Fibonacci e salvar num arquivo, fib.py, incluindo um pouquinho de documentação. Chamamos cada arquivo Python de módulo:&lt;/p&gt;

&lt;pre&gt;&#39;&#39;&#39;Fibonacci function, memoized for better performance.&#39;&#39;&#39;
memo = {0:0, 1:1}

def fib(n):
    &#39;&#39;&#39;Returns the nth Fibonacci number.&#39;&#39;&#39;
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Agora vamos importar esse arquivo no console do Python, e veja o que dá para fazer:&lt;/p&gt;

&lt;div style=&#34;width: 490px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://elcio.com.br/wp-content/uploads/2015/09/fib.gif&#34; alt=&#34;&#34; width=&#34;480&#34; height=&#34;267&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Executando fib.py e ajuda.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;É como PHPDoc ou Javadoc, mas completamente nativo, e com uma sintaxe muito simples. E tudo o que você precisa para ler a documentação é o próprio Python.&lt;/p&gt;

&lt;h2 id=&#34;3-o-ecossistema-python-é-fantástico&#34;&gt;3. O ecossistema Python é fantástico&lt;/h2&gt;

&lt;p&gt;Começando pela própria linguagem, que vem com uma excelente &lt;a href=&#34;https://docs.python.org/3/library/&#34;&gt;biblioteca padrão&lt;/a&gt;. Essa biblioteca é bastante extensa e possui excelentes módulos, bem documentados e fáceis de usar. Por exemplo, digamos que você queira baixar o código fonte desse artigo e gerar um arquivo GZip com ele, veja como é fácil:&lt;/p&gt;

&lt;pre&gt;import urllib
import gzip
html=urllib.urlopen(&#39;http://tableless.com.br/por-que-python/&#39;).read()
gzfile=gzip.open(&#39;por-que-python.html.gz&#39;,&#39;w&#39;)
gzfile.write(html)&lt;/pre&gt;

&lt;p&gt;Usamos os módulos urllib e gzip. Entre os recursos fornecidos pelos módulos que já vem com o Python, posso citar o controle de threads e processamento paralelo, a criação de webservices, bibliotecas para sockets, http, ftp, e-mail, a leitura e escrita de XML, JSON, CSV, o acesso a recursos do sistema operacional, matemática e estatística, criptografia, manipulação de arquivos de áudio, testes automatizados, etc.&lt;/p&gt;

&lt;p&gt;Como é fácil escrever código bom e bem documentado, a comunidade Python tem feito um excelente em fornecer módulos para praticamente tudo o que você precisar fazer. Você pode encontrar, no &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;Python Package Index&lt;/a&gt;, milhares de módulos prontos para coisas como ler e escrever arquivos Excel, trabalhar com imagens, acessar bancos de dados os mais diversos, trabalhar com automação residencial, enviar SMS, integrar seu software ao Gmail, falar com serviços de VoIP, conectar-se a redes sociais, criar um servidor de e-mails, desenvolver jogos 3D, e uma infinidade de outros recursos.&lt;/p&gt;

&lt;h3 id=&#34;e-tem-mais-8230&#34;&gt;E tem mais&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Se você não programa em Python, espero tê-lo deixado pelo menos um pouquinho curioso. No próximo artigo, vamos falar um pouco mais da linguagem, mostrando algumas características da sintaxe e dos tipos de dados que a tornam tão interessante. Até lá, fique à vontade nos comentários. Sugestões, dúvidas, críticas e opiniões são muito bem vindas e vão me ajudar a preparar os próximos artigos.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando seu próprio servidor HTTP do zero (ou quase) – Parte I</title>
      <link>https://tableless.github.io/hugo-public/criando-seu-proprio-servidor-http-do-zero-ou-quase-parte-i/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-seu-proprio-servidor-http-do-zero-ou-quase-parte-i/</guid>
      <description>

&lt;p&gt;Sou apaixonado por tecnologias livres e como sou extremamente curioso, gosto de saber como as coisas funcionam. Como também sou cinestésico, não me contento em apenas em entender, tenho que criar, recriar, escrever, rescrever, inventar, reinventar, enfim sentir realmente como se faz. Nesse vai e vem de aprendizado, minha última curiosidade foi entender como os servidores HTTP funcionam e criar um do zero (ou pelo menos quase).&lt;/p&gt;

&lt;p&gt;É claro que para fazer isso eu não fui tão lá embaixo a ponto de utilizar C, utilizei da linguagem de programação da qual me sinto mais confortável e que já oferece algumas facilidades que em C teria que sangrar pra fazer o mesmo porém não impossível, mas enfim, optei por desenvolver em Java, os passos vou contar pra vocês aqui, mas utilizando os mesmo conceitos nada impede que utilize qualquer outra linguagem de programação.&lt;/p&gt;

&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Vamos ao que interessa! A grosso modo, um servidor HTTP é uma aplicação (software) que fornece páginas web (geralmente escritas em HTML), ou seja, ao digitar o endereço da página (URL) e dar um ENTER no seu navegador, ele envia uma requisição no servidor destino, o servidor processa essa informação e retorna o documento HTML correspondente, por fim o navegador renderiza o documento e exibe aquela página bonita (nem sempre!).&lt;/p&gt;

&lt;div style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://www.tankonyvtar.hu/en/tartalom/tamop425/0027_ADW1/images/ADW100.png&#34;&gt;&lt;img src=&#34;http://www.tankonyvtar.hu/en/tartalom/tamop425/0027_ADW1/images/ADW100.png&#34; alt=&#34;Requisição HTTP&#34; width=&#34;500&#34; height=&#34;200&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Requisição HTTP
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Para isso vamos entender como a comunicação entre seu navegador e o servidor funciona, o protocolo, depois vamos entender como é feita a conexão, tratar e enviar documentos e por fim vamos deixar nosso servidor pronto para receber múltiplas conexões.&lt;/p&gt;

&lt;h2 id=&#34;o-protocolo-http&#34;&gt;O Protocolo HTTP&lt;/h2&gt;

&lt;p&gt;É claro que nem so de Web a Internet é feita, existem uma serie de recursos que estão sobre a Internet, a web é uma delas, mas para que esses serviços sejam tratados como devem é necessário ter um linguagem comum que permita que o servidor entenda o que o navegador quer, e que o navegador saiba se a resposta do pedido está correta ou não, para isso estabelecem-se os protocolos, que são padrões estipulados por um órgão competente afim de uniformizar o “trafego” de informações de diferentes serviços na internet. Quem define esses padrões é a IETF (Internet Engineering Task Force, ou melhor, Força Tarefa de Engenharia da Internet). Para saber mais quem são eles, acesse &lt;a href=&#34;http://www.ietf.org&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; (em Inglês)&lt;/p&gt;

&lt;p&gt;O protocolo HTTP, ou Hyper Text Transfer Protocol, ou melhor ainda, protocolo de transferencia de hiper texto, direto e reto é o cara que define a troca de paginas HTML, pronto falei!. A versão mais atual (que é a que vamos adotar nesse tutorial por assim dizer) é a 1.1 que na minha opinião é a mais difundida também (pode ser que encontre por ai alguns utilizando a versão 1.0 ou até mesmo a 0.9), enfim , essa versão e seus padrões foram propostos no documento &lt;a href=&#34;http://www.ietf.org/rfc/rfc2068.txt&#34; target=&#34;_blank&#34;&gt;RFC 2068&lt;/a&gt; e atualizado e alterado por diversos outros RFCs, que não convém a gente falar aqui, mas se tiver curiosidade procura lá no site da IEFT acima que tem todos.&lt;/p&gt;

&lt;p&gt;So para nos situar o HTTP está na camada mais alta do protocolo de comunicação de rede conhecido como TCP/IP (não vamos entrar em detalhes pois não é o foco), chamada camada de aplicação (Nada mais justo já que o servidor e o navegados são aplicações).&lt;/p&gt;

&lt;div style=&#34;width: 430px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://static.thegeekstuff.com/wp-content/uploads/2011/10/tcp-ip.png&#34;&gt;&lt;img src=&#34;http://static.thegeekstuff.com/wp-content/uploads/2011/10/tcp-ip.png&#34; alt=&#34;Camadas de Rede (TCP/IP)&#34; width=&#34;420&#34; height=&#34;470&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Camadas de Rede (TCP/IP)
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;No nosso escopo, o servidor é um software que fica aguardando solicitações, falando em nível de aplicação, o processo é simples, o navegador (vamos chamar de cliente) envia uma requisição (request), o servidor processa e devolve uma resposta(response).&lt;/p&gt;

&lt;h2 id=&#34;a-requisição&#34;&gt;A Requisição&lt;/h2&gt;

&lt;p&gt;A requisição é um “documento” em texto plano composto por um cabeçalho (que define  a comunicação, requerido) e os dados (opcional, depende da aplicação).&lt;/p&gt;

&lt;p&gt;O cabeçalho é bem simples, a primeira linha contém a informação principal da requisição, ou seja, qual a sua solicitação (método), o que está sendo solicitado (arquivo/página/recurso a ser acessado) e padrão de comunicação que no nosso caso é o HTTP/1.1, a segunda linha é o endereço de host do servidor que irá responder a sua solicitação, veja o exemplo:&lt;/p&gt;

&lt;pre&gt;GET /index.html HTTP/1.1
Host: &lt;a href=&#34;http://google.com&#34;&gt;google.com&lt;/a&gt;&lt;/pre&gt;

&lt;p&gt;As linhas seguintes são informações pertinentes a conexão e podem conter informações de quem está solicitando, o formato dessas informações é do tipo &lt;propriedade&gt; : &lt;valor&gt; o final de cada linha é encerrado por um &lt;CR&gt;&lt;LF&gt; (cuidado, pois muitos confundem este comando com o ENTER, embora para windows esse comando corresponde ao ENTER, não é verdade para Linux e afins), o final da requisição deve ser uma linha em branco (ou seja apenas um &lt;CR&gt;&lt;LF&gt;)veja o exemplo de uma requisição completa&lt;/p&gt;

&lt;pre&gt;GET /HTTP/1.1
Host: www.google.com.br
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0
Accept: text/html,application/xhtml+xml,application/xml
Accept-Language: pt-BR,pt,en-US,en
Accept-Encoding: gzip, deflate
Connection: keep-alive&lt;/pre&gt;

&lt;p&gt;Traduzindo, queremos pegar (GET) a raiz ou página inicial ( / ) que está em “www.google.com.br”. Esta requisição está sendo enviada de um navegador (User-Agent) Firefox, que aceita (Accept) os seguintes formatos, html e xml de preferencia que estejam no idioma (Accept-Language) Português do Brasil (pt-BR) ou qualquer outro idioma a seguir (veja que é possível passar uma lista de idiomas na ordem em que gostaria que aparecessem, veja que caso o servidor não tenha nenhuma dessas páginas ou não trate essa propriedade, ele irá devolver a página no idioma padrão do html que ele encontrar correspondente a sua solicitação), o formato de compactação aceito pelo navegador  (Accept-Enconding) e por fim a persistência da conexão, ou seja se você quer que o servidor mantenha a conexão ativa, o que eu quero dizer é que para cada recurso dentro de uma pagina HTML, seja uma imagem, um estilo css, ou um javascript, que precisa ser carregado, o navegador faz uma nova requisição, não seria legal criar uma nova conexão para cada requisição ainda mais se elas acontecem em um curto espaço de tempo, então o keep-alive mantém a conexão “viva&amp;#8221; tempo pra que esses recursos sejam carregados. É claro que o protocolo define muito mais propriedades, como pode observar no documento RFC mencionado acima, porém cada servidor deve implementar essas funcionalidades, no nosso caso vamos implementar apenas as funcionalidades na requisição de exemplo e algumas mais que mencionaremos mais adiante.&lt;/p&gt;

&lt;h2 id=&#34;a-resposta&#34;&gt;A Resposta&lt;/h2&gt;

&lt;p&gt;A resposta segue um formato bem parecido da requisição, a primeira linha contem o protocolo, o código e mensagem de retorno como segue:&lt;/p&gt;

&lt;pre&gt;HTTP/1.1 200 OK&lt;/pre&gt;

&lt;p&gt;Esse código é esperado quando a pagina solicitada foi encontrada e seu conteúdo está enviada logo abaixo do cabeçalho (veremos a diante). Existem diversos códigos de retorno de sucesso, e de erro também, quem aqui nunca recebeu um 404 Not Found ao tentar acessar uma página que não existe?, esses e outros detalhes iremos tratar na parte de implementação. Por fim as linhas seguintes da resposta contem algumas informações pertinentes ao navegador e por fim a pagina html solicitada, veja que o conteúdo é concatenado com a resposta:&lt;/p&gt;

&lt;pre&gt;HTTP/1.1 200 OK
Date: Tue, 17 Jun 2014 01:20:13 GMT
Server: gws
Location: https://www.google.com.br/
Last-Modified: Tue, 17 Jun 2014 01:20:13 GMT
Content-Encoding: gzip
Content-Length: 234
Connection: closeContent-Type: text/html


&amp;lt;html&amp;gt;todo o html da página&amp;lt;/html&amp;gt; *&lt;/pre&gt;

&lt;p&gt;*este conteúdo pode estar compactado&lt;/p&gt;

&lt;p&gt;Nesta resposta o servidor retorna a data da resposta (Date), qual o nome/tipo/empresa que desenvolveu/sistema operacional do servidor que gerou a resposta, a localização atual (Location) importante caso seu site use caminho relativo em hiperlinks, imagens e outros (veremos com mais detalhes na implementação) ultima vez que o arquivo foi modificado (Last-Modified), importante caso o navegador permita cache de paginas, compactacao do conteúdo (Content-Enconding), para que o navegador saiba fazer a descompactacao se necessário, tamanho em bytes do  conteúdo,o estado da conexão, que neste caso o servidor informa que a conexão foi fechado, o tipo do conteúdo(Content-Type), que é um texto contendo html e por fim, é claro, o conteúdo da resposta, ou seja, aquilo que o navegador irá exibir pra gente.&lt;/p&gt;

&lt;p&gt;Quer testar? Então abra o navegador de sua preferência, melhor que seja o firefox =D, em seguida abra o modo de desenvolvedor (geralmente é so apertar F12), e por fim clique na aba Rede, pronto agora é so digitar um site na barra de endereço, e acompanhar as requisições pelo console, se quiser mais detalhes clique em uma requisição e peça para exibir detalhes, se estiver usando o firefox, ele aparece esses detalhes logo na lateral da lista de requisições. analise as propriedades enviadas na requisição e veja qual foi a resposta. você irá percebem que existem mais propriedades do que comentamos aqui, mas para nós neste tutorial não será necessário, se quiser pode pesquisar mais sobre eles ou ler o documento RFC que ja falamos sobre ele.&lt;/p&gt;

&lt;div id=&#34;attachment_17&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://euamoaweb.com.br.md-54.webhostbox.net/arquivolivre.com.br/wp-content/uploads/2014/06/Screen-Shot-2014-06-17-at-12.00.06-AM.png&#34;&gt;&lt;img class=&#34;wp-image-17 size-medium&#34; src=&#34;http://blog-tsg0.rhcloud.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-17-at-12.00.06-AM-300x165.png&#34; alt=&#34;Requisicao&#34; width=&#34;300&#34; height=&#34;165&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Requisicao
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_18&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://euamoaweb.com.br.md-54.webhostbox.net/arquivolivre.com.br/wp-content/uploads/2014/06/Screen-Shot-2014-06-17-at-12.00.34-AM.png&#34;&gt;&lt;img class=&#34;wp-image-18 size-medium&#34; src=&#34;http://blog-tsg0.rhcloud.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-17-at-12.00.34-AM-300x166.png&#34; alt=&#34;Resposta&#34; width=&#34;300&#34; height=&#34;166&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Resposta
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Chegamos ao fim da primeira parte do nosso tutorial, sei que teoria é chato mas se faz necessário, mas prometo que na &lt;a href=&#34;http://tableless.com.br/criando-seu-proprio-servidor-http-do-zero-ou-quase-parte-ii/&#34; target=&#34;_blank&#34;&gt;Parte II&lt;/a&gt; colocaremos as mãos a obra.&lt;/p&gt;

&lt;p&gt;Então até a próxima.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Desenvolvendo App para Windows Phone com App Studio</title>
      <link>https://tableless.github.io/hugo-public/desenvolvendo-app-para-windows-phone-com-app-studio/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/desenvolvendo-app-para-windows-phone-com-app-studio/</guid>
      <description>&lt;p&gt;Para as pessoas que observam a plataforma do Windows Phone, grandes oportunidades estão disponíveis para desenvolver soluções ainda não desenvolvidas.&lt;/p&gt;

&lt;p&gt;Para deixar a implementação dessas ideias de forma amigável para quem não conhece muito sobre o estudo da programação ou não está familiarizado com o desenvolvimento para esse sistema operacional, a Microsoft disponibilizou gratuitamente um sistema web para desenvolvimento de apps para Windows Phone chamado de Windows App Studio.&lt;/p&gt;

&lt;p&gt;Não é necessário codificar linhas de código, o que pode poupar tempo para quem deseja desenvolver soluções simples, porém essa plataforma não descarta o uso da codificação do código, tudo vai depender do aplicativo que você vai desenvolver e se a plataforma atenderá a sua necessidade.&lt;/p&gt;

&lt;p&gt;Desde  o inicio do projeto da sua aplicação o App Studio apresenta uma  interface que dispensa a codificação de estruturas de comunicação com a internet ou interface gráfica por código de programação, pois o sistema realiza isso para você mostrando o preview automaticamente quando é acrescentado novas ferramentas e funcionalidades no app.&lt;/p&gt;

&lt;div id=&#34;attachment_50960&#34; style=&#34;width: 701px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/08/ScreenHunter_11-Aug.-26-00.29.jpg&#34;&gt;&lt;img class=&#34; wp-image-50960&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/08/ScreenHunter_11-Aug.-26-00.29.jpg&#34; alt=&#34;Ambiente de desenvolvimento da App Studio&#34; width=&#34;691&#34; height=&#34;362&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Ambiente de desenvolvimento da App Studio
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;O Aplicativo acima foi desenvolvido usando o App Studio e o mesmo está disponível para download na loja&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/pt-br/store/apps/eu-escolhi-esperar/9nblggh2kfjd&#34; target=&#34;_blank&#34;&gt;Ver aplicativo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eu poderia apresentar a criação de um aplicativo simples usando essa plataforma, porém a Microsoft já disponibilizou um vídeo ensinando essa ferramenta disponível na Microsoft Academy.&lt;/p&gt;

&lt;p&gt;Separei dois videos que será de grande ajuda para contribuir com a sua ideia.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.microsoftvirtualacademy.com/pt-pt/training-courses/crie-seu-primeiro-aplicativo-com-windows-app-studio-8631&#34; target=&#34;_blank&#34;&gt;Assistir: Criando o seu primeiro App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.microsoftvirtualacademy.com/pt-pt/training-courses/introduo-ao-desenvolvimento-de-aplicativos-mveis-8525&#34; target=&#34;_blank&#34;&gt;Assistir: Criando o seu primeiro App (mais funcionalidades)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora é só colocar a sua ideia em desenvolvimento! e qualquer dúvida estou a disposição.&lt;/p&gt;

&lt;p&gt;Abraço e até o próximo post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 – Parte Final</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-final/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-final/</guid>
      <description>

&lt;p&gt;Chegamos ao final da nossa série sobre Symfony. Se você não leu os outros, no final do artigo há uma &lt;a href=&#34;#other-posts-symfony&#34;&gt;listagem com todos os artigos&lt;/a&gt; já publicados dessa série.&lt;/p&gt;

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-09/&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, instalamos e configuramos o bundle StofDoctrineExtensionsBundle, para fazermos os slugs de nossos posts, agora vamos instalar e configurar o Bundle FOSUserBundle, para fazer a autenticação da área administrativa do nosso blog.&lt;/p&gt;

&lt;h2 id=&#34;instalação-do-bundle-fosuserbundle&#34;&gt;Instalação do bundle FOSUserBundle.&lt;/h2&gt;

&lt;p&gt;Para instalar o FOSUserBundle, temos que adicioná-lo em nosso composer.json. Abra o arquivo composer.json e adicione a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&#34;friendsofsymfony/user-bundle&#34;: &#34;1.3.*&#34;
&lt;/pre&gt;

&lt;p&gt;Depois de adicionando o FOSUserBundle no composer, vamos instalá- lo. Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ composer update
&lt;/pre&gt;

&lt;p&gt;Após o Download, o FOSUserBundle está instalado em nossa aplicação.&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-fosuserbundle&#34;&gt;Configurando o FOSUserBundle.&lt;/h2&gt;

&lt;p&gt;A primeira configuração que devemos fazer, é registrar o novo bundle instalado, para isso entre no AppKernel, caminho: app/AppKernel.php&lt;/p&gt;

&lt;p&gt;Adicione a linha abaixo no registro de bundles:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;new FOS\UserBundle\FOSUserBundle(),
&lt;/pre&gt;

&lt;p&gt;Veja na linha 18:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class AppKernel extends Kernel 
{ 
    public function registerBundles() 
    { 
        $bundles = array( 
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(), 
            new Symfony\Bundle\SecurityBundle\SecurityBundle(), 
            new Symfony\Bundle\TwigBundle\TwigBundle(), 
            new Symfony\Bundle\MonologBundle\MonologBundle(), 
            new Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle(), 
            new Symfony\Bundle\AsseticBundle\AsseticBundle(), 
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(), 
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(), 
            new Tableless\CoreBundle\TablelessCoreBundle(), 
            new Tableless\ModelBundle\TablelessModelBundle(), 
         new Knp\Bundle\PaginatorBundle\KnpPaginatorBundle(),
         new Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle(),
         new FOS\UserBundle\FOSUserBundle(),
        );

...
&lt;/pre&gt;

&lt;p&gt;Pronto, o FOSUserBundle está registrado.&lt;/p&gt;

&lt;p&gt;Agora vamos fazer as configurações no arquivo config.yml, caminho: app/config/config.yml.&lt;/p&gt;

&lt;p&gt;Para que o sistema de login venha traduzido, devemos descomentar a linha translator em framework, veja na linha 3 do código abaixo:&lt;/p&gt;

&lt;p&gt;De:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;framework:
    #esi:             ~
    #translator:      { fallback: &#34;%locale%&#34; }
&lt;/pre&gt;

&lt;p&gt;Para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;framework:
    #esi:             ~
    translator:      { fallback: &#34;%locale%&#34; }
&lt;/pre&gt;

&lt;p&gt;No final do arquivo adicione as configurações abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;# FOSUser
fos_user:
    db_driver: orm # other valid values are &#39;mongodb&#39;, &#39;couchdb&#39; and &#39;propel&#39;
    firewall_name: main
    user_class: Tableless\UserBundle\Entity\User
&lt;/pre&gt;

&lt;p&gt;Perceba que na configuração acima, estamos indicando uma entidade User, porém ainda não existente, vamos criá-la.&lt;/p&gt;

&lt;h2 id=&#34;criando-o-bundle-userbundle&#34;&gt;Criando o bundle UserBundle.&lt;/h2&gt;

&lt;p&gt;Continuando com nossas configurações, podemos criar um novo bundle para que o mesmo fique responsável pelo gerenciamento dos usuários, em nosso caso, vamos criar o bundle, porém só vamos usar para configurar a entidade User, caso queiram fazer outras configurações, o bundle já está criado.&lt;/p&gt;

&lt;p&gt;Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:bundle
&lt;/pre&gt;

&lt;p&gt;Digitamos a namespace:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Bundle namespace: Tableless/UserBundle
&lt;/pre&gt;

&lt;p&gt;O console nos sugere um nome, vamos deixar como está, apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Bundle name [TablelessUserBundle]:
&lt;/pre&gt;

&lt;p&gt;No caminho, apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Target directory [/media/candidosouza/Development/GITHUB/tableless/symfony/src]:
&lt;/pre&gt;

&lt;p&gt;Usaremos annotation para configurações:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Configuration format (yml, xml, php, or annotation): annotation
&lt;/pre&gt;

&lt;p&gt;Não vamos querer a geração de toda a estrutura de um bundle, apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Do you want to generate the whole directory structure [no]? 
&lt;/pre&gt;

&lt;p&gt;Vamos confirmar a geração do novo bundle, damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Do you confirm generation [yes]? 
&lt;/pre&gt;

&lt;p&gt;E vamos registrar esse bundle, somente enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Confirm automatic update of your Kernel [yes]?
&lt;/pre&gt;

&lt;p&gt;E gerar as rotas, damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Confirm automatic update of the Routing [yes]?
&lt;/pre&gt;

&lt;p&gt;Pronto, nosso bundle UserBundle está criado, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/01.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/01.png&#34; alt=&#34;pasta&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49557&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nosso bundle está criado, vamos criar nossa entidade User.&lt;/p&gt;

&lt;h2 id=&#34;criando-a-entidade-user&#34;&gt;Criando a Entidade User.&lt;/h2&gt;

&lt;p&gt;Vamos entrar no bundle UserBundle, caminho src/Tableless/UserBundle/, e vamos criar uma pasta chamada Entity. Nessa pasta vamos criar uma classe User, que será nossa entidade, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/02.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/02.png&#34; alt=&#34;Entidade User&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49558&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A nossa entidade User tem que estender a entidade User do FOSUserBundle, vamos dar um use nessa classe e vamos apelida lá de BaseUser, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use FOS\UserBundle\Entity\User as BaseUser;
&lt;/pre&gt;

&lt;p&gt;Também temos que passar as configurações (mapear nossa entidade) via annotation, vamos dar um use na classe Mapping do Doctrine e apelida lá de ORM, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Doctrine\ORM\Mapping as ORM;
&lt;/pre&gt;

&lt;p&gt;Nossa Entidade terá apenas um atributo id, e um método construtor que chamará construtor pai de entidade BaseUser, juntamente com as respectivas annotations, veja nossa entidade User pronta:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\UserBundle\Entity;

use FOS\UserBundle\Entity\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name=&#34;fos_user&#34;)
 */
class User extends BaseUser
{
    /**
     * @ORM\Id
     * @ORM\Column(type=&#34;integer&#34;)
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;)
     */
    protected $id;

    public function __construct()
    {
        parent::__construct();
    }
}
&lt;/pre&gt;

&lt;h2 id=&#34;configurações-de-segurança&#34;&gt;Configurações de segurança.&lt;/h2&gt;

&lt;p&gt;Para configurar a parte de segurança, temos que editar o arquivo security.yml, responsável pela parte de segurança do Symfony, abra o arquivo, caminho: app/config/security.yml.&lt;/p&gt;

&lt;p&gt;Abrindo o arquivo, vamos perceber que o Symfony está configurando o provider via memória, vamos alterar o provider.&lt;/p&gt;

&lt;p&gt;De:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;providers:
    in_memory:
        memory: ~
&lt;/pre&gt;

&lt;p&gt;Para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;providers:
    fos_userbundle:
        id: fos_user.user_provider.username
&lt;/pre&gt;

&lt;p&gt;Para criptografar a senha do usuário vamos configurar um encoder, incluindo o código abaixo, que usará o algoritmo sha512, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;encoders:
        FOS\UserBundle\Model\UserInterface: sha512
&lt;/pre&gt;

&lt;p&gt;Agora vamos configurar a parte de firewalls, onde estabeleceremos o pattern para ativação do firewalls, que pelo acesso da url será ativado, e qual o tipo de provider que será usado para o processo de autenticação, também passaremos o processo de autenticação apenas pelo formulário, não permitindo outro tipo de requisição, usando o csrf_provider. Vamos permitir o logout, e usuários anônimos nas áreas não restritas, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;firewalls:
        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                csrf_provider: form.csrf_provider
            logout:       true
            anonymous:    true
&lt;/pre&gt;

&lt;p&gt;Temos que passar qual o tipo de acesso o usuário terá que ter, para acessar determinadas urls, ex: o usuário anônimo, só poderá acessar as urls: qualquer-url/login, qualquer-url/register, e qualquer-url/resetting, e apenas usuários administradores, poderão acessar a url: qualquer-url/admin/, para isso passaremos a configuração de controle de acesso, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_ADMIN }
&lt;/pre&gt;

&lt;p&gt;Temos que configurar a hierarquia de usuários cadastrados, onde o admin, poderá ser qualquer usuário cadastrado, e o super admin, será o administrador com total acesso, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
&lt;/pre&gt;

&lt;p&gt;Veja o arquivo security.yml pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;security:
    providers:
        fos_userbundle:
            id: fos_user.user_provider.username

    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

    firewalls:
        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                csrf_provider: form.csrf_provider
            logout:       true
            anonymous:    true

    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_ADMIN }

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
&lt;/pre&gt;

&lt;p&gt;Pronto as configurações de segurança, estão prontas.&lt;/p&gt;

&lt;p&gt;E para finalizar as configurações, temos que passar as rotas do FOSUserBundle onde ficarão registradas no sistema, para isso abra o arquivo routing.yml, caminho: app/config/routing.yml.&lt;/p&gt;

&lt;p&gt;Com o arquivo aberto vamos inserir as rotas abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;# FOSUser
fos_user_security:
    resource: &#34;@FOSUserBundle/Resources/config/routing/security.xml&#34;

fos_user_profile:
    resource: &#34;@FOSUserBundle/Resources/config/routing/profile.xml&#34;
    prefix: /profile

fos_user_register:
    resource: &#34;@FOSUserBundle/Resources/config/routing/registration.xml&#34;
    prefix: /register

fos_user_resetting:
    resource: &#34;@FOSUserBundle/Resources/config/routing/resetting.xml&#34;
    prefix: /resetting

fos_user_change_password:
    resource: &#34;@FOSUserBundle/Resources/config/routing/change_password.xml&#34;
    prefix: /profile
&lt;/pre&gt;

&lt;p&gt;Para que tudo ocorra bem, temos que atualizar o banco de dados, para criar a tabela dos usuários, entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console doctrine:schema:update --force
&lt;/pre&gt;

&lt;p&gt;veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/03.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/03.png&#34; alt=&#34;Tabela do banco de dados&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49559&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;estilizando-as-templates-do-fosuserbundle&#34;&gt;Estilizando as templates do FOSUserBundle.&lt;/h2&gt;

&lt;p&gt;O FOSUserBundle está configurado e instalado em nosso sistema, para que possamos testá-lo, entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console router:debug
&lt;/pre&gt;

&lt;p&gt;E veremos todas as rotas criadas em nosso sistema através FOSUserBundle, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/04.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/04.png&#34; alt=&#34;Router Debug&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49561&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Podemos entrar em todas as rotas, e perceberemos que está sem estilização, por exemplo: a rota /register/, se acessamos no navegador essa rota: url: &lt;a href=&#34;http://127.0.0.1:8000/register/&#34;&gt;http://127.0.0.1:8000/register/&lt;/a&gt; veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/05.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/05.png&#34; alt=&#34;tela de registro&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49562&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Está funcionando perfeitamente, porém sem estilização. Vou explicar como fazer para melhorarmos isso, porém não vou me aprofundar.&lt;/p&gt;

&lt;p&gt;As templates do FOSUserBundle estão todas na pasta friendsofsymfony dentro do diretório vendor/, porém, sabemos que nunca devemos mexer em nada no diretório vendor, entretanto podemos sobrescrever essas templates principais do FOSUserBundle, para isso vamos criar uma pasta chamada FOSUserBundle em app/Resources, e dentro da pasta criada, vamos criar outra pasta chamada views, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/06.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/06.png&#34; alt=&#34;Pasta views&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49563&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O FOSUserBundle, trabalha com um layout principal, para que possamos sobrescrevê-lo, dentro da pasta views, vamos criar um arquivo chamado layout.html.twig e estender a nossa template base já criada anteriormente. A tamplate layout.html.twig ficará dessa forma, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{% extends &#39;::base.html.twig&#39; %}

{% block title %}Blog Administração{% endblock %}

{% block content %}
    {% block fos_user_content %}{% endblock %}
{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Pronto, se acessarmos novamente o url: &lt;a href=&#34;http://127.0.0.1:8000/register/&#34;&gt;http://127.0.0.1:8000/register/&lt;/a&gt;, teremos o resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/07.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/07.png&#34; alt=&#34;Tela de registro pronta&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49564&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, ficou melhor que anteriormente, porém podemos melhorar essa estilização, em meu caso vou deixar como está, mas caso queiram, é só criar um arquivo css com as devidas estilizações, e chamá- lo no base.html.twig que configuramos no &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; target=&#34;_blank&#34;&gt;tutorial 06&lt;/a&gt;, ou usar o próprio bootstrap, e fazer as alterações nos arquivos.&lt;/p&gt;

&lt;p&gt;Obs: Podemos sobrescrever todos os arquivos do FOSUserBundle, porém temos que criar os arquivos e as estruturas de pastas, como no original. &lt;a href=&#34;https://github.com/FriendsOfSymfony/FOSUserBundle/tree/1.3.x/Resources/views&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Veja o original&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dessa forma podemos usar as classes do bootstrap para a estilização nos arquivos sobrescritos que foram criados, caso queiram ter uma base, tem um projeto em meu Github, que foi criado dessa forma, &lt;a href=&#34;https://github.com/candidosouza/management-cars/tree/master/app/Resources/FOSUserBundle/views/Registration&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;veja&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;criando-um-administrador&#34;&gt;Criando um Administrador&lt;/h2&gt;

&lt;p&gt;Podemos criar os usuários pela url: &lt;a href=&#34;http://127.0.0.1:8000/register/&#34;&gt;http://127.0.0.1:8000/register/&lt;/a&gt;, porém os usuários criados serão usuários normais do sistema, para criar um super administrador entre no terminal, e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console
&lt;/pre&gt;

&lt;p&gt;Podemos perceber que agora temos mais opções, pois instalamos o FOSUserBundle, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/08.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/08.png&#34; alt=&#34;Novos comandos&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49565&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E para criar um usuário administrador digitamos:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console fos:user:create
&lt;/pre&gt;

&lt;p&gt;damos um nome, um e-mail e senha, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/09.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/09.png&#34; alt=&#34;Criando usuário&#34; width=&#34;750&#34; height=&#34;150&#34; class=&#34;alignnone size-full wp-image-49566&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Porém o usuário criado, ainda é um usuário normal, vamos torná-lo um administrador, ainda no terminal, digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;php app/console fos:user:promote
&lt;/pre&gt;

&lt;p&gt;Escolhemos o usuário que no meu caso é admin.&lt;/p&gt;

&lt;p&gt;Digitamos o Role que queremos, no meu caso ROLE_ADMIN&lt;/p&gt;

&lt;p&gt;E pronto, já temos um administrador do sistema.&lt;/p&gt;

&lt;h2 id=&#34;restringindo-o-acesso-no-sistema&#34;&gt;Restringindo o acesso no sistema.&lt;/h2&gt;

&lt;p&gt;Para que um usuário anônimo não tenha acesso a administração, ( em nosso caso a administração de autores e administração de posts), vamos entrar novamente em security.yml, caminho: app/config/security.yml, e vamos alterar o controle de acesso, dizendo que todo o usuário que entrar na rota /post/ e /author/ deverá ser um usuário cadastrado, veja na linha 5 e 6:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/author/, role: ROLE_USER }
        - { path: ^/post/, role: ROLE_USER }
        - { path: ^/admin/, role: ROLE_ADMIN }
&lt;/pre&gt;

&lt;p&gt;Pronto, dessa forma todos os usuários que acessarem as urls: &lt;a href=&#34;http://127.0.0.1:8000/post/&#34;&gt;http://127.0.0.1:8000/post/&lt;/a&gt; e &lt;a href=&#34;http://127.0.0.1:8000/author/&#34;&gt;http://127.0.0.1:8000/author/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;deverão ser cadastrados como usuários, como autores do blog ou administradores.&lt;/p&gt;

&lt;p&gt;Obs: Quando o usuário anônimo acessar as urls citadas acima, serão redirecionados para a tela de login.&lt;/p&gt;

&lt;p&gt;Podemos fazer várias restrições, exemplo: vamos dizer que o usuário autor, pode: visualizar, criar, editar, e deletar um post, porém, ele não pode: criar, nem editar, menos ainda deletar outro autor, para isso entre no AuthorController, caminho: src/Tableless/CoreBundle/Controller/AuthorController.php&lt;/p&gt;

&lt;p&gt;Primeiramente damos um use em AccessDeniedException, na classe AuthorController, veja.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Symfony\Component\Security\Core\Exception\AccessDeniedException;
&lt;/pre&gt;

&lt;p&gt;Nos métodos createAction, newAction, editAction, updateAction e deleteAction, vamos restringir o acesso do usuário normal, onde verificaremos se ele é um administrador, e caso não seja, vamos gerar um erro, veja o código de verificação abaixo, onde introduziremos em todos os métodos citados acima, :&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$securityContext = $this-&amp;gt;get(&#39;security.context&#39;);

        if (!$securityContext-&amp;gt;isGranted(&#39;ROLE_ADMIN&#39;)) {
            throw new AccessDeniedException(&#34; Somente o administrador pode acessar! &#34;);
        }
&lt;/pre&gt;

&lt;p&gt;Exemplo no createAction, nos demais métodos serão iguais, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
* Creates a new Author entity.
*
* @Route(&#34;/&#34;, name=&#34;author_create&#34;)
* @Method(&#34;POST&#34;)
* @Template(&#34;TablelessCoreBundle:Author:new.html.twig&#34;)
*/
public function createAction(Request $request)
{
   $securityContext = $this-&amp;gt;get(&#39;security.context&#39;);

   if (!$securityContext-&amp;gt;isGranted(&#39;ROLE_ADMIN&#39;)) {
      throw new AccessDeniedException(&#34; Somente o administrador pode acessar! &#34;);
   }

    $entity = new Author();
    $form = $this-&amp;gt;createCreateForm($entity);
    $form-&amp;gt;handleRequest($request);

    if ($form-&amp;gt;isValid()) {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();
        $em-&amp;gt;persist($entity);
        $em-&amp;gt;flush();

     return $this-&amp;gt;redirect($this-&amp;gt;generateUrl(&#39;author_show&#39;, array(&#39;id&#39; =&amp;gt; $entity&amp;gt; getId())));
   }

   return array(
   &#39;entity&#39; =&amp;gt; $entity,
       &#39;form&#39;   =&amp;gt; $form-&amp;gt;createView(),
   );
}
&lt;/pre&gt;

&lt;p&gt;Veja o erro caso o usuário não tenha acesso:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/06/10.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/06/10.png&#34; alt=&#34;Erro de usuário não autorizado&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-49583&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto!&lt;/p&gt;

&lt;p&gt;Podemos fazer outros tipos de restrições, podemos melhorar a segurança em nosso blog, porém no meu caso vou parar por aqui, com o exemplo acima, acredito que temos uma base de como fazer as demais restrições.&lt;/p&gt;

&lt;h2 id=&#34;dicas&#34;&gt;Dicas:&lt;/h2&gt;

&lt;p&gt;Nos tutoriais abordei o básico de como trabalhar com o Symfony 2. Recomendo sempre a documentação para auxílio.&lt;/p&gt;

&lt;p&gt;Gostaria de deixar algumas dicas para estudos, que não foram abordados:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/service_container.html&#34; target=&#34;_blank&#34;&gt;Services&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/performance.html&#34; target=&#34;_blank&#34;&gt;Performance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/testing.html&#34; target=&#34;_blank&#34;&gt;Testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/http_cache.html&#34; target=&#34;_blank&#34;&gt;HTTP Cache:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfony.com/doc/current/book/translation.html&#34; target=&#34;_blank&#34;&gt;Translation:&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;other-posts-symfony&#34;&gt;Conclusão.&lt;/h2&gt;

&lt;p&gt;Esta é a última parte da série “Iniciando com Symfony 2”, espero ter sido útil.&lt;/p&gt;

&lt;p&gt;Bons estudos!&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – Instalação&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-07/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 07&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-08/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 08&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-09/&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 09&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto encontra-se no &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 – Parte 09</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-09/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-09/</guid>
      <description>

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-08/&#34; title=&#34;tutorial anterior&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, instalamos e configuramos o bundle Knp Paginator, para fazer a paginação de posts em nosso index, agora vamos instalar e configurar o Bundle StofDoctrineExtensionsBundle, para fazermos os slugs de nossos posts&lt;/p&gt;

&lt;h2 id=&#34;instalação-do-bundle-stofdoctrineextensionsbundle&#34;&gt;Instalação do bundle StofDoctrineExtensionsBundle&lt;/h2&gt;

&lt;p&gt;Para instalar o StofDoctrineExtensionsBundle, temos que adicioná-lo em nosso composer.json. Abra o arquivo composer.json e adicione a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&#34;stof/doctrine-extensions-bundle&#34;: &#34;1.2.*@dev&#34;
&lt;/pre&gt;

&lt;p&gt;Depois de adicionando o StofDoctrineExtensionsBundle no composer, vamos instalá- lo. Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ composer update
&lt;/pre&gt;

&lt;p&gt;Após o Download, o StofDoctrineExtensionsBundle está instalado em nossa aplicação.&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-stofdoctrineextensionsbundle&#34;&gt;Configurando o StofDoctrineExtensionsBundle&lt;/h2&gt;

&lt;p&gt;A primeira configuração que devemos fazer, é registrar o novo bundle instalado, para isso entre no AppKernel, caminho: app/AppKernel.php&lt;/p&gt;

&lt;p&gt;Adicione a linha abaixo no registro de bundles:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;new Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle(),
&lt;/pre&gt;

&lt;p&gt;Veja na linha 17:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class AppKernel extends Kernel 
{ 
    public function registerBundles() 
    { 
        $bundles = array( 
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(), 
            new Symfony\Bundle\SecurityBundle\SecurityBundle(), 
            new Symfony\Bundle\TwigBundle\TwigBundle(), 
            new Symfony\Bundle\MonologBundle\MonologBundle(), 
            new Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle(), 
            new Symfony\Bundle\AsseticBundle\AsseticBundle(), 
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(), 
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(), 
            new Tableless\CoreBundle\TablelessCoreBundle(), 
            new Tableless\ModelBundle\TablelessModelBundle(), 
        new Knp\Bundle\PaginatorBundle\KnpPaginatorBundle(),
        new Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle(),
        );

...

&lt;/pre&gt;

&lt;p&gt;Pronto, o StofDoctrineExtensionsBundle está registrado.&lt;/p&gt;

&lt;p&gt;Agora vamos fazer as configurações no arquivo config.yml, caminho: app/config/config.yml&lt;/p&gt;

&lt;p&gt;No final do arquivo adicione as configurações abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;stof_doctrine_extensions:
    orm:
        default:
            sluggable: true
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-a-entidade-post&#34;&gt;Configurando a entidade Post&lt;/h2&gt;

&lt;p&gt;Temos que configurar nossa entidade post, para que a mesma receba os slugs. Entre na entidade post, caminho: src/Tableless/ModelBundle/Entity/Post.php&lt;/p&gt;

&lt;p&gt;Vamos dar um use em Annotation, e apelidá-la de Gedmo veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Gedmo\Mapping\Annotation as Gedmo;
&lt;/pre&gt;

&lt;p&gt;Agora vamos criar uma propriedade privada chamada slug, com as suas annotations correspondentes, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
     * @var string
     *
     * @Gedmo\Slug(fields={&#34;title&#34;}, unique=false)
     * @ORM\Column(length=255)
     */
     private $slug;

...

&lt;/pre&gt;

&lt;p&gt;Temos que gerar os getters e setters, para isso vamos entrar no terminal e digitar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:entities TablelessModelBundle:Post
&lt;/pre&gt;

&lt;p&gt;Pronto, em nossa entidade Post, temos os getters e setters, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
     * Set slug
     *
     * @param string $slug
     *
     * @return Post
     */
    public function setSlug($slug)
    {
        $this-&amp;gt;slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this-&amp;gt;slug;
    }

...
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-o-banco-de-dados&#34;&gt;Configurando o Banco de Dados&lt;/h2&gt;

&lt;p&gt;Depois de nossa entidade configurada, temos que atualizar o banco de dados, porém se tivermos posts já criados, ocorrerá um erro em nosso blog. Caso não tenha nenhum post escrito poderá rodar o comando abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:update –force
&lt;/pre&gt;

&lt;p&gt;Caso tenha escrito algum post para exemplo, como no meu caso, vamos excluir o banco de dados, e criá lo novamente. Entre no terminal e digite:&lt;/p&gt;

&lt;p&gt;Excluindo o banco de dados:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$ php app/console doctrine:database:drop --force
&lt;/pre&gt;

&lt;p&gt;Criando o banco de dados novamente:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:database:create
&lt;/pre&gt;

&lt;p&gt;Criando as tabelas:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:create
&lt;/pre&gt;

&lt;p&gt;Obs: Caso tenha posts escritos, e não queria excluir o banco de dados, poderá apenas atualizá-lo, porém terá que adicionar manualmente, slug por slug em cada post no banco de dados, senão ocorrerá erro na aplicação.&lt;/p&gt;

&lt;p&gt;Veja a estrutura do banco de dados:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/01.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/01.png&#34; alt=&#34;Banco de dados&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-48547&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-controller&#34;&gt;Configurando o Controller&lt;/h2&gt;

&lt;p&gt;Depois de termos feito as configurações citadas acima, vamos configurar nosso controller, para isso entre no IndexControlerController, caminho: src/Tableless/CoreBundle/Controller/IndexControlerController.php&lt;/p&gt;

&lt;p&gt;No nosso método showAction, estamos passando por parâmetro o $id, no momento não queremos mais buscar nossos posts pelo id, e sim pelo slug, vamos alterar:&lt;/p&gt;

&lt;p&gt;de:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;public function showAction($id)
&lt;/pre&gt;

&lt;p&gt;para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;public function showAction($slug)
&lt;/pre&gt;

&lt;p&gt;Temos que mudar também a annotation da rota, veja:&lt;/p&gt;

&lt;p&gt;de:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;* @Route(&#34;/show/{id}&#34;, name=&#34;show&#34;)
&lt;/pre&gt;

&lt;p&gt;para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;* @Route(&#34;/show/{slug}&#34;, name=&#34;show&#34;)
&lt;/pre&gt;

&lt;p&gt;Estamos passando para a variável $post, o método find, e recuperando o id, vamos mudar o find para findOneBy e passar um array de slug, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

$post = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findOneBy([
            &#39;slug&#39; =&amp;gt; $slug
        ]);

...

&lt;/pre&gt;

&lt;p&gt;Veja o método showAction pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /**
     * @Route(&#34;/post/{slug}&#34;, name=&#34;show&#34;)
     * @Template()
     */
    public function showAction($slug)
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $post = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findOneBy([
            &#39;slug&#39; =&amp;gt; $slug
        ]);

        if (!$post) {
            throw $this-&amp;gt;createNotFoundException(&#39;O post não existe! Volte para home!&#39;);
        }

        return [
            &#39;post&#39; =&amp;gt; $post,
        ];
    }
 
    ...
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-o-index&#34;&gt;Configurando o index&lt;/h2&gt;

&lt;p&gt;Em nossa index, estamos passando os links para que os posts sejam buscados pelo id, porém temos que alterá- los para que possamos buscar os posts pelo slug.&lt;/p&gt;

&lt;p&gt;Entre no index.html.twig, caminho: src/Tableless/CoreBundle/Resources/views/IndexController/Index.html.twig&lt;/p&gt;

&lt;p&gt;Vamos alterar os links:&lt;/p&gt;

&lt;p&gt;No meu caso a linha 21, 29 e 35:&lt;/p&gt;

&lt;p&gt;de:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;para:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { slug: post.slug }) }}&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Testando nossa aplicação:&lt;/p&gt;

&lt;p&gt;Caso tenham seguido o tutorial e excluído o bando de dados, que foi criado novamente, como no meu caso. Antes de criarmos um post, temos que criar os autores novamente, depois sim criarmos os posts. No meu caso vou criar apena um post para exemplo.&lt;/p&gt;

&lt;p&gt;Depois do post criado, click no link e observe a url, verá o slug, que em nosso caso é o slug do titulo, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/02.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/02.png&#34; alt=&#34;Urls&#34; width=&#34;750&#34; height=&#34;50&#34; class=&#34;alignnone size-full wp-image-48548&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Pronto, nosso simples projeto está retornando o slug dos post em nossa url.&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;instalação&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – Instalação&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;parte 02&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;parte 03&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;parte 04&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; title=&#34;parte 05&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; title=&#34;parte 06&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-07/&#34; title=&#34;parte 07&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 07&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-08/&#34; title=&#34;parte 08&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 08&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto encontra-se no &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;github do projeto&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 – Parte 08</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-08/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-08/</guid>
      <description>

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-07/&#34; title=&#34;Parte 07&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, criamos um upload de imagens para servirem de capa para nossos posts, agora vamos instalar e configurar um Bundle, disponibilizado pela comunidade, para fazer a paginação de nossa página index. Para isso temos que instalar o Knp Paginator em nossa aplicação.&lt;/p&gt;

&lt;h2 id=&#34;instalação-do-knp-paginator&#34;&gt;Instalação do Knp Paginator&lt;/h2&gt;

&lt;p&gt;Para instalar o Knp Paginator, temos que adicioná-lo em nosso composer.json. Abra o arquivo composer.json e adicione a linha abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&#34;knplabs/knp-paginator-bundle&#34;: &#34;2.4.*@dev&#34;
&lt;/pre&gt;

&lt;p&gt;Caso não o conheça, ou tenha dúvidas, leia este post (&lt;a href=&#34;http://tableless.com.br/composer-um-pouco-alem-basico/&#34; title=&#34;Composer&#34; target=&#34;_blank&#34;&gt;Composer para iniciantes&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Depois de adicionado o Knp Paginator no composer, vamos instalá- lo. Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ composer update
&lt;/pre&gt;

&lt;p&gt;Após o Download, o Knp Paginator está instalado em nossa aplicação.&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-knp-paginator&#34;&gt;Configurando o Knp Paginator&lt;/h2&gt;

&lt;p&gt;A primeira configuração que devemos fazer, é registrar o novo bundle instalado, para isso entre no AppKernel, caminho: app/AppKernel.php&lt;/p&gt;

&lt;p&gt;Adicione a linha abaixo no registro de bundles:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;new Knp\Bundle\PaginatorBundle\KnpPaginatorBundle(),
&lt;/pre&gt;

&lt;p&gt;Veja na linha 16:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Symfony\Bundle\SecurityBundle\SecurityBundle(),
            new Symfony\Bundle\TwigBundle\TwigBundle(),
            new Symfony\Bundle\MonologBundle\MonologBundle(),
            new Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle(),
            new Symfony\Bundle\AsseticBundle\AsseticBundle(),
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(),
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(),
            new Tableless\CoreBundle\TablelessCoreBundle(),
            new Tableless\ModelBundle\TablelessModelBundle(),
        new Knp\Bundle\PaginatorBundle\KnpPaginatorBundle(),
        );
...
&lt;/pre&gt;

&lt;p&gt;Pronto o Knp Paginator está registrado.&lt;/p&gt;

&lt;p&gt;Agora vamos fazer as configurações padrões no Knp, para isso entre no arquivo config.yml, caminho: app/config/config.yml&lt;/p&gt;

&lt;p&gt;No final do arquivo adicione as configurações abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-yml&#34;&gt;knp_paginator:
    page_range: 5                      # default page range used in pagination control
    default_options:
        page_name: page                # page query parameter name
        sort_field_name: sort          # sort field query parameter name
        sort_direction_name: direction # sort direction query parameter name
        distinct: true                 # ensure distinct results, useful when ORM queries are using GROUP BY statements
    template:
        pagination: KnpPaginatorBundle:Pagination:sliding.html.twig     # sliding pagination controls template
        sortable: KnpPaginatorBundle:Pagination:sortable_link.html.twig # sort link template
&lt;/pre&gt;

&lt;p&gt;Essas configurações foram tiradas da &lt;a href=&#34;https://github.com/KnpLabs/KnpPaginatorBundle#configuration-example&#34; title=&#34;Documentação Knp Paginator&#34; target=&#34;_blank&#34;&gt;documentação do Knp Paginator&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-o-controller&#34;&gt;Configurando o Controller&lt;/h2&gt;

&lt;p&gt;Depois de termos feito as configurações de instalação do Knp Paginator, vamos configurar nosso controller, para isso entre no IndexControlerController, caminho: src/Tableless/CoreBundle/Controller/IndexControlerController.php&lt;/p&gt;

&lt;p&gt;Primeiramente para pegar o número de páginas, de acordo com a quantidade de posts temos que usar o request do symfony, então vamos dar um use em Request, veja na linha 8:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\CoreBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Symfony\Component\HttpFoundation\Request;

...
&lt;/pre&gt;

&lt;p&gt;Em nossa indexAction temos que pegar a biblioteca do paginador, passar nosso posts, pegar as páginas via request, e quantidade de posts que queremos por páginas, e retorná- los em forma de array para que nossa view possa apresentar. Em meu caso vou usar apenas três posts por página.&lt;/p&gt;

&lt;p&gt;Veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
     * @Route(&#34;/&#34;, name=&#34;index&#34;)
     * @Template()
     */
    public function indexAction(Request $request)
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $posts = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findAllInOrder();

        /** @var  $paginator */
        $paginator  = $this-&amp;gt;get(&#39;knp_paginator&#39;);
        $pagination = $paginator-&amp;gt;paginate($posts, $request-&amp;gt;query-&amp;gt;get(&#39;page&#39;, 1), 3);

        return [
            &#39;pagination&#39; =&amp;gt; $pagination,
        ];
    }

…
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-a-view&#34;&gt;Configurando a View&lt;/h2&gt;

&lt;p&gt;Nosso controller está configurado, agora temos que configurar nossa view, para que a mesma apresente os posts, com a paginação.&lt;/p&gt;

&lt;p&gt;Entre na view index.html.twig, caminho: src/Tableless/CoreBundle/Resources/views/IndexController/index.html.twig&lt;/p&gt;

&lt;p&gt;Em nossa index, temos um for, que está recebendo a variável posts, vamos trocar a variável posts por pagination, que foi a variável que passamos em nosso controller, veja:&lt;/p&gt;

&lt;p&gt;de:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{% for post in posts %}
&lt;/pre&gt;

&lt;p&gt;troque por:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{% for post in pagination %}
&lt;/pre&gt;

&lt;p&gt;E onde queremos que nossa paginação fique, vamos colocar o código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{{ knp_pagination_render(pagination) }}
&lt;/pre&gt;

&lt;p&gt;Veja nossa index.html.twig pronta&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;{% extends &#34;::base.html.twig&#34; %}

{% block title %}Simples Blog{% endblock %}

{% block content %}

    &amp;lt;div class=&#34;container&#34;&amp;gt;

        &amp;lt;div class=&#34;row&#34;&amp;gt;

            {{ knp_pagination_render(pagination) }}

            &amp;lt;div class=&#34;col-lg-12&#34;&amp;gt;


            {% for post in pagination %}

                &amp;lt;article class=&#34;col-lg-4&#34;&amp;gt;

                    &amp;lt;div class=&#34;thumbnail&#34;&amp;gt;

                        &amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;

                            &amp;lt;img class=&#34;img-responsive&#34; src=&#34;{{ asset(post.getCoverWeb) }}&#34; alt=&#34;{{ post.cover }}&#34; title=&#34;{{ post.cover }}&#34;/&amp;gt;

                        &amp;lt;/a&amp;gt;

                        &amp;lt;div class=&#34;caption&#34;&amp;gt;

                            &amp;lt;h3&amp;gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;

                            &amp;lt;p&amp;gt;Escrito por: {{ post.author.name }}&amp;lt;/p&amp;gt;

                            &amp;lt;p&amp;gt;{{ post.content|slice(0, 45) }} ...&amp;lt;/p&amp;gt;

                            &amp;lt;p&amp;gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;Leia mais...&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

                        &amp;lt;/div&amp;gt;

                    &amp;lt;/div&amp;gt;

                &amp;lt;/article&amp;gt;

            {% endfor %}

        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
        {{ knp_pagination_render(pagination) }}

    &amp;lt;/div&amp;gt;

{% endblock %}

&lt;/pre&gt;

&lt;p&gt;Rode o servidor:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console server:run
&lt;/pre&gt;

&lt;p&gt;Entre na url:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000&#34;&gt;http://127.0.0.1:8000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Veja a imagem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/011.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/011.png&#34; alt=&#34;Paginação&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-48300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;estilizando-a-paginação&#34;&gt;Estilizando a paginação&lt;/h2&gt;

&lt;p&gt;Podemos perceber, que a paginação está sem estilização, porém como estamos utilizando o bootstrap, vamos entrar no arquivo config.yml, caminho: app/config/config.yml&lt;/p&gt;

&lt;p&gt;E vamos alterar o pagination da tamplete do knp_paginator&lt;/p&gt;

&lt;p&gt;de:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;pagination: KnpPaginatorBundle:Pagination:sliding.html.twig
&lt;/pre&gt;

&lt;p&gt;para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;pagination: KnpPaginatorBundle:Pagination:twitter_bootstrap_v3_pagination.html.twig
&lt;/pre&gt;

&lt;p&gt;Atualize a página, e pronto, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/021.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/021.png&#34; alt=&#34;Paginação estilizada&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-48301&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Pronto, nosso simples projeto está fazendo a paginação de posts, no próximo tutorial vamos configurar outro Bundle, onde faremos o slug para nossos posts, para que nossas urls, fiquem um pouco mais amigáveis.&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;part 01&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – Instalação&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;parte 02&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;parte 03&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;parte 04&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; title=&#34;parte 05&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; title=&#34;parte 06&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-07/&#34; title=&#34;parte 07&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 07&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto encontra-se no &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;GitHub do projeto&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 – Parte 07</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-07/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-07/</guid>
      <description>

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; title=&#34;Iniciando com Symfony&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, estilizamos nossas páginas, index e show, e incluímos um imagem para apresentar nossos posts no index, porém colocamos esta imagem pelo código fonte, agora vamos fazer algumas configurações, para que, na criação dos posts, tenha a opção de fazer o upload de uma imagem, para ser apresentada como capa de nossos posts.&lt;/p&gt;

&lt;h2 id=&#34;configurando-a-entidade-post&#34;&gt;Configurando a entidade Post&lt;/h2&gt;

&lt;p&gt;Para criarmos um upload de imagem, vamos usar o componente http-foundation do Symfony, e usar sua classe UploadedFile em nossa entidade Post.&lt;/p&gt;

&lt;p&gt;Para isso, vamos entrar em nossa entidade Post, caminho: src/Tableless/ModelBundle/Entity/Post.php.&lt;/p&gt;

&lt;p&gt;Com a entidade Post aberta vamos dar um use em UploadedFile, veja na linha 7:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 
use Symfony\Component\HttpFoundation\File\UploadedFile; 


/** 
 * Post 
 * 
 * @ORM\Table(name=&#34;post&#34;)
…

&lt;/pre&gt;

&lt;p&gt;Precisamos criar dois atributos privados, $cover, e $file , e inserir as annotations correspondentes, o atributo $cover, receberá o nome da imagem, e o $file o aquivo com um limite de tamanho, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;cover&#34;, type=&#34;string&#34;, length=255, nullable=true) 
     */ 
    private $cover; 
    
    /** 
     * @Assert\File(maxSize=&#34;1000000&#34;) 
     */ 
    private $file;

    ...
&lt;/pre&gt;

&lt;p&gt;Vamos fazer os Getters and Setters desses atributos.&lt;/p&gt;

&lt;p&gt;O setFile receberá um parâmetro $file, esse parâmetro será do tipo UploadedFile, e caso não passamos uma imagem, poderá ser nulo, veja os getters and setters criados:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /** 
     * Get cover 
     * 
     * @return string 
     */ 
    public function getCover() 
    { 
        return $this-&amp;gt;cover; 
    } 

    /** 
     * Set cover 
     * 
     * @param string $cover 
     * @return Image 
     */ 
    public function setCover($cover) 
    { 
        $this-&amp;gt;cover = $cover; 
    } 

    /** 
     * Get file. 
     * 
     * @return UploadedFile 
     */ 
    public function getFile() 
    { 
        return $this-&amp;gt;file; 
    } 

    /** 
     * Set file. 
     * 
     * @param UploadedFile $file 
     */ 
    public function setFile(UploadedFile $file = null) 
    { 
        $this-&amp;gt;file = $file; 
    }

    ...
&lt;/pre&gt;

&lt;p&gt;Precisamos obter o caminho relativo do upload, ou seja, a pasta para onde as imagens serão enviadas; para isso vamos criar o método protegido getUploadPath(), que nos retornará essa pasta. Veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /** 
     * Relative path. 
     * Get web path to upload directory. 
     * 
     * @return string 
     */ 
    protected function getUploadPath() 
    { 
        return &#39;uploads/covers&#39;; 
    }

    ...

&lt;/pre&gt;

&lt;p&gt;Temos que obter o caminho absoluto, para fazer o upload de nossas imagens, que ficará na pasta web, para isso vamos criar o método protegido getUploadAbsolutePath(), que nos retornará o caminho absoluto, e para chegarmos na pasta &amp;#8220;uploads/covers&amp;#8221;, vamos concatenar com o método getUploadPath() criado acima, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /** 
     * Absolute path. 
     * Get absolute path to upload directory. 
     * 
     * @return string 
     */ 
    protected function getUploadAbsolutePath() 
    { 
        return __DIR__ . &#39;/../../../../web/&#39; . $this-&amp;gt;getUploadPath(); 
    }

    ...

&lt;/pre&gt;

&lt;p&gt;Agora precisamos apresentar o caminho de nossas imagens para as views, vamos criar o método público getCoverWeb(), caso tenhamos uma imagem, ou seja, caso a imagem não seja nula, apresentamos a imagem nas views, para isso usaremos o método getUploadPath(), concatenado com o nome de nossa imagem, ou seja o método getCover(), veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /** 
     * Relative path. 
     * Get web path to a cover. 
     * 
     * @return null|string 
     */ 
    public function getCoverWeb() 
    { 
        return null === $this-&amp;gt;getCover() 
            ? null 
            : $this-&amp;gt;getUploadPath() . &#39;/&#39; . $this-&amp;gt;getCover(); 
    }

    ...

&lt;/pre&gt;

&lt;p&gt;Podemos precisar do caminho absoluto de nossa imagem, para isso vamos criar o método getCoverAbsolute(), para obtermos esse caminho quando precisarmos, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;...

    /** 
     * Get path on disk to a cover. 
     * 
     * @return null|string 
     *   Absolute path. 
     */ 
    public function getCoverAbsolute() 
    { 
        return null === $this-&amp;gt;getCover() 
            ? null 
            : $this-&amp;gt;getUploadAbsolutePath() . &#39;/&#39; . $this-&amp;gt;getCover(); 
    }

    ...
&lt;/pre&gt;

&lt;p&gt;Agora temos que criar um método que fará o upload da imagem, para isso criaremos um método como nome upload(), caso a imagem não seja nula, ele fará o upload usando alguns métodos prontos da classe UploadedFile, para mover a imagens, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;... 
  
    /** 
     * Upload a cover file. 
     */ 
    public function upload() 
    { 
        if (null === $this-&amp;gt;getFile()) { 
            return; 
        } 
        $filename = $this-&amp;gt;getFile()-&amp;gt;getClientOriginalName(); 
        $this-&amp;gt;getFile()-&amp;gt;move($this-&amp;gt;getUploadAbsolutePath(), $filename); 
        $this-&amp;gt;setCover($filename); 
        $this-&amp;gt;setFile(); 
    }


    ...

&lt;/pre&gt;

&lt;p&gt;Pronto, nossa entidade Post, agora está recebendo um upload de imagem.&lt;/p&gt;

&lt;p&gt;Veja o entidade Post pronta:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\ModelBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\HttpFoundation\File\UploadedFile;


/**
 * Post
 *
 * @ORM\Table(name=&#34;post&#34;)
 * @ORM\Entity(repositoryClass=&#34;Tableless\ModelBundle\Repository\PostRepository&#34;)
 */
class Post extends Timestampable
{
    /**
     * @var integer
     *
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;)
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name=&#34;title&#34;, type=&#34;string&#34;, length=255)
     * @Assert\NotBlank
     */
    private $title;

    /**
     * @var string
     *
     * @ORM\Column(name=&#34;content&#34;, type=&#34;text&#34;)
     * @Assert\NotBlank
     */
    private $content;

    /**
     * @var Author
     *
     * @ORM\ManyToOne(targetEntity=&#34;Author&#34;, inversedBy=&#34;posts&#34;)
     * @ORM\JoinColumn(name=&#34;author_id&#34;, referencedColumnName=&#34;id&#34;, nullable=false)
     * @Assert\NotBlank
     */
    private $author;

    /**
     * @var string
     *
     * @ORM\Column(name=&#34;cover&#34;, type=&#34;string&#34;, length=255, nullable=true)
     */
    private $cover;

    /**
     * @Assert\File(maxSize=&#34;1000000&#34;)
     */
    private $file;


    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this-&amp;gt;id;
    }

    /**
     * Set title
     *
     * @param string $title
     * @return Post
     */
    public function setTitle($title)
    {
        $this-&amp;gt;title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string 
     */
    public function getTitle()
    {
        return $this-&amp;gt;title;
    }

    /**
     * Set content
     *
     * @param string $content
     * @return Post
     */
    public function setContent($content)
    {
        $this-&amp;gt;content = $content;

        return $this;
    }

    /**
     * Get content
     *
     * @return string 
     */
    public function getContent()
    {
        return $this-&amp;gt;content;
    }

    /**
     * Set author
     *
     * @param \Tableless\ModelBundle\Entity\Author $author
     * @return Post
     */
    public function setAuthor(\Tableless\ModelBundle\Entity\Author $author)
    {
        $this-&amp;gt;author = $author;

        return $this;
    }

    /**
     * Get author
     *
     * @return \Tableless\ModelBundle\Entity\Author 
     */
    public function getAuthor()
    {
        return $this-&amp;gt;author;
    }

    // métodos criados

    /**
     * Get cover
     *
     * @return string
     */
    public function getCover()
    {
        return $this-&amp;gt;cover;
    }


    /**
     * Set cover
     *
     * @param string $cover
     * @return Image
     */
    public function setCover($cover)
    {
        $this-&amp;gt;cover = $cover;
    }

    /**
     * Get file.
     *
     * @return UploadedFile
     */
    public function getFile()
    {
        return $this-&amp;gt;file;
    }

    /**
     * Sets file.
     *
     * @param UploadedFile $file
     */
    public function setFile(UploadedFile $file = null)
    {
        $this-&amp;gt;file = $file;
    }

    /**
     * Relative path.
     * Get web path to upload directory.
     *
     * @return string
     */
    protected function getUploadPath()
    {
        return &#39;uploads/covers&#39;;
    }

    /**
     * Absolute path.
     * Get absolute path to upload directory.
     *
     * @return string
     */
    protected function getUploadAbsolutePath()
    {
        return __DIR__ . &#39;/../../../../web/&#39; . $this-&amp;gt;getUploadPath();
    }

    /**
     * Relative path.
     * Get web path to a cover.
     *
     * @return null|string
     */
    public function getCoverWeb()
    {
        return null === $this-&amp;gt;getCover()
            ? null
            : $this-&amp;gt;getUploadPath() . &#39;/&#39; . $this-&amp;gt;getCover();
    }

    /**
     * Get path on disk to a cover.
     *
     * @return null|string
     *   Absolute path.
     */
    public function getCoverAbsolute()
    {
        return null === $this-&amp;gt;getCover()
            ? null
            : $this-&amp;gt;getUploadAbsolutePath() . &#39;/&#39; . $this-&amp;gt;getCover();
    }

    /**
     * Upload a cover file.
     */
    public function upload()
    {
        if (null === $this-&amp;gt;getFile()) {
            return;
        }
        $filename = $this-&amp;gt;getFile()-&amp;gt;getClientOriginalName();
        $this-&amp;gt;getFile()-&amp;gt;move($this-&amp;gt;getUploadAbsolutePath(), $filename);
        $this-&amp;gt;setCover($filename);
        $this-&amp;gt;setFile();
    }
}
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-o-controller&#34;&gt;Configurando o controller&lt;/h2&gt;

&lt;p&gt;Para que nossos formulários de posts tenham acesso ao upload, temos que configurar o controller PostController.&lt;/p&gt;

&lt;p&gt;Entre no PostController, caminho: src/Tableless/CoreBundle/Controller/PostController.php, e no método createAction, insira o código $entity-&amp;gt;upload(); veja na linha 15:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * Creates a new Post entity. 
     * 
     * @Route(&#34;/&#34;, name=&#34;post_create&#34;) 
     * @Method(&#34;POST&#34;) 
     * @Template(&#34;TablelessCoreBundle:Post:new.html.twig&#34;) 
     */ 
    public function createAction(Request $request) 
    { 
        $entity = new Post(); 
        $form = $this-&amp;gt;createCreateForm($entity); 
        $form-&amp;gt;handleRequest($request); 

        if ($form-&amp;gt;isValid()) { 
            $entity-&amp;gt;upload(); 
            $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager(); 
            $em-&amp;gt;persist($entity); 
            $em-&amp;gt;flush(); 

            return $this-&amp;gt;redirect($this-&amp;gt;generateUrl(&#39;post_show&#39;, array(&#39;id&#39; =&amp;gt; $entity-&amp;gt;getId()))); 
        } 

        return array( 
            &#39;entity&#39; =&amp;gt; $entity, 
            &#39;form&#39;   =&amp;gt; $form-&amp;gt;createView(), 
        ); 
    }
&lt;/pre&gt;

&lt;p&gt;Temos que fazer o mesmo procedimento com o método updateAction na linha 23, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * Edits an existing Post entity. 
     * 
     * @Route(&#34;/{id}&#34;, name=&#34;post_update&#34;) 
     * @Method(&#34;PUT&#34;) 
     * @Template(&#34;TablelessModelBundle:Post:edit.html.twig&#34;) 
     */ 
    public function updateAction(Request $request, $id) 
    { 
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager(); 

        $entity = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;find($id); 

        if (!$entity) { 
            throw $this-&amp;gt;createNotFoundException(&#39;Unable to find Post entity.&#39;); 
        } 

        $deleteForm = $this-&amp;gt;createDeleteForm($id); 
        $editForm = $this-&amp;gt;createEditForm($entity); 
        $editForm-&amp;gt;handleRequest($request); 

        if ($editForm-&amp;gt;isValid()) { 
            $entity-&amp;gt;upload(); 
            $em-&amp;gt;flush(); 

            return $this-&amp;gt;redirect($this-&amp;gt;generateUrl(&#39;post_edit&#39;, array(&#39;id&#39; =&amp;gt; $id))); 
        } 

        return array( 
            &#39;entity&#39;      =&amp;gt; $entity, 
            &#39;edit_form&#39;   =&amp;gt; $editForm-&amp;gt;createView(), 
            &#39;delete_form&#39; =&amp;gt; $deleteForm-&amp;gt;createView(), 
        ); 
    } 

&lt;/pre&gt;

&lt;h2 id=&#34;configurando-os-formulários&#34;&gt;Configurando os formulários&lt;/h2&gt;

&lt;p&gt;Pronto, nossa entidade e controller de posts, estão configurados para receberem o upload, porém temos que configurar nossos formulários. Entre no PostType.php, para fazermos as configurações necessárias, caminho: src/Tableless/ModelBundle/Form/PostType, e no método buildForm adicione o &amp;#8216;file&amp;#8217;, veja na linha 10.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @param FormBuilderInterface $builder 
     * @param array $options 
     */ 
    public function buildForm(FormBuilderInterface $builder, array $options) 
    { 
        $builder 
            -&amp;gt;add(&#39;title&#39;) 
            -&amp;gt;add(&#39;content&#39;) 
            -&amp;gt;add(&#39;file&#39;) 
            -&amp;gt;add(&#39;author&#39;) 
        ; 
    }
&lt;/pre&gt;

&lt;h2 id=&#34;atualizando-o-banco-de-dados&#34;&gt;Atualizando o banco de dados&lt;/h2&gt;

&lt;p&gt;Para vermos a mágica acontecer, só precisamos, atualizar nosso banco, para isso entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:update --force 
&lt;/pre&gt;

&lt;p&gt;Pronto! Nosso upload de imagem, está pronto, veja a imagem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/01.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/01.png&#34; alt=&#34;Botão de upload no formulário no symfony&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-48201&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-as-views&#34;&gt;Configurando as views&lt;/h2&gt;

&lt;p&gt;Agora temos que configurar nossas views para que as mesmas apresentem as imagens. Entre na view index.html.twig, caminho: src/Tablesless/CoreBundle/Resources/views/IndexController/index.html.twig, mude a linha 21.&lt;/p&gt;

&lt;p&gt;mude de:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;img class=&#34;img-responsive&#34; src=&#34;{{ asset(&#39;logo-tableless.png&#39;) }}&#34; alt=&#34;img&#34; title=&#34;img&#34;/&amp;gt;
&lt;/pre&gt;

&lt;p&gt;para:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;img class=&#34;img-responsive&#34; src=&#34;{{ asset(post.getCoverWeb) }}&#34; alt=&#34;{{ post.cover }}&#34; title=&#34;{{ post.cover }}&#34;/&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Vamos entrar em nossa view show.html.twig, caminho: caminho: src/Tablesless/CoreBundle/Resources/views/IndexController/show.html.twig, e vamos acrescentar a mesma linha acima do título, ou onde acharem melhor, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;article class=&#34;col-lg-12&#34; &amp;gt;

&amp;lt;img class=&#34;img-responsive&#34; src=&#34;{{ asset(post.getCoverWeb) }}&#34; alt=&#34;{{ post.cover }}&#34; title=&#34;{{ post.cover }}&#34;/&amp;gt;

&amp;lt;h1&amp;gt;{{ post.title }}&amp;lt;/h1&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Vamos fazer os testes, criando um novo post, e inserindo uma imagem.&lt;/p&gt;

&lt;p&gt;Observe a imagem na pasta web/uploads/cover.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/04/02.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/04/02.png&#34; alt=&#34;Pasta de upload no symfony&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-48205&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Pronto, nosso simples projeto está fazendo upload de imagens para cada post, no próximo tutorial vamos aprender a configurar um Bundle pronto, disponibilizado pela comunidade, onde faremos a paginação de resultados para nossa página index.&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;instalação&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – Instalação&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;parte 02&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;parte 03&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;parte 04&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; title=&#34;parte 05&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-06/&#34; title=&#34;parte 06&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto encontra-se no &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;GitHub do projeto&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 – Parte 06</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-06/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-06/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/capa.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/capa.png&#34; alt=&#34;Symfony e Twig&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47950&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; title=&#34;iniciando com symfony 2 - parte 05&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, configuramos nosso projeto e criamos nossas páginas, home e show, porém as mesmas se encontram sem estilização, neste tutorial, vamos apenas estruturar nossas páginas de um modo simples e básico, porém funcional. Não entrarei em detalhes sobre o Bootstrap, não é meu objetivo, porém para iniciantes, recomendo a &lt;a href=&#34;http://getbootstrap.com/css/&#34; title=&#34;Doc. Bootstrap&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sobre o Twig, falarei o básico do básico, somente o que vamos usar. Lembrando que ele já vem instalado e configurado no Symfony, porém podemos instalá-lo separadamente &lt;a href=&#34;https://packagist.org/packages/twig/twig&#34; title=&#34;Pacote do Twig&#34; target=&#34;_blank&#34;&gt;via Composer&lt;/a&gt; e configurá- lo em outros projetos, usando ou não outros frameworks.&lt;/p&gt;

&lt;h2 id=&#34;instalando-e-configurando-o-twitter-bootstrap-no-symfony&#34;&gt;Instalando e configurando o Twitter Bootstrap no Symfony&lt;/h2&gt;

&lt;p&gt;Vamos iniciar com a configuração do bootstrap.&lt;/p&gt;

&lt;p&gt;Temos algumas formas de instalar e configurar o arquivo css no symfony, em nosso caso vamos fazer uma configuração simples apenas para a didática, caso queiram se aprofundar mais no assunto, aconselho a &lt;a href=&#34;http://symfony.com/doc/current/cookbook/assetic/asset_management.html#including-css-stylesheets&#34; title=&#34;Assets no Symfony&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Primeiramente vamos criar uma pasta dentro da pasta Resource do bundle CoreBundle, caminho: src/Tableless/CoreBundle/Resouces, com o nome public, e dentro dessa nova pasta, vamos criar outra pasta com o nome css.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getbootstrap.com/getting-started/#download&#34; title=&#34;Download do bootstrap&#34; target=&#34;_blank&#34;&gt;Baixe o bootstrap&lt;/a&gt;, e copie o arquivo bootstrap.min.css para a pasta css/, veja a imagem abaixo para comparação:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/011.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/011.png&#34; alt=&#34;Pasta para bootstrap&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47951&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caso queiram, podem usar o arquivo bootstrap.css, em nosso caso vamos usar o .min.css.&lt;/p&gt;

&lt;p&gt;Para que o bootstrap seja carregado vamos entrar no terminal, e digitar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console assets:install --symlink
&lt;/pre&gt;

&lt;p&gt;Desse forma estamos criando um link simbólico do arquivo na pasta web, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/022.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/022.png&#34; alt=&#34;Link simbólico&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47952&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora devemos carregar o aquivo bootstrap em nossa aplicação. Vamos entrar no arquivo base.html.twig, caminho: app/Resources/views/base.html.twig, e carregar o bootstrap, no bloco stylesheets, veja na linha 7.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt; 
&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt; 
        &amp;lt;meta charset=&#34;UTF-8&#34; /&amp;gt;
        &amp;lt;title&amp;gt;{% block title %}Welcome!{% endblock %}&amp;lt;/title&amp;gt;
        {% block stylesheets %} 
                &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ asset(&#39;bundles/tablelesscore/css/bootstrap.min.css&#39;) }}&#34; /&amp;gt;
        {% endblock %} 
        &amp;lt;link rel=&#34;icon&#34; type=&#34;image/x-icon&#34; href=&#34;{{ asset(&#39;favicon.ico&#39;) }}&#34; /&amp;gt;
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
        {% block body %}{% endblock %} 
        {% block javascripts %}{% endblock %} 
   &amp;lt;/body&amp;gt; 
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;iniciando-com-twig&#34;&gt;Iniciando com Twig&lt;/h2&gt;

&lt;p&gt;Pronto, o bootstrap está instalado e configurado.&lt;/p&gt;

&lt;p&gt;Neste momento vou criar quatro posts em off, apenas para visualização, recomendo que façam o mesmo, pois assim ficará fácil para estilizar.&lt;/p&gt;

&lt;p&gt;Vamos iniciar nossos trabalhos com o Twig.&lt;/p&gt;

&lt;p&gt;Ainda com o arquivo base.html.twig aberto, vamos fazer algumas configurações.&lt;/p&gt;

&lt;p&gt;O twig trabalha com blocos, que podem ser herdados pelas templates filhas, em nosso caso vamos criar um bloco com o nome &amp;#8220;content&amp;#8221;, para que nossas templates possam herdar. Para criar um bloco é bem simples, veja abaixo:&lt;/p&gt;

&lt;p&gt;Abre o bloco:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% block nome-do-bloco %} 
&lt;/pre&gt;

&lt;p&gt;Fecha o bloco:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Ok! Vamos criar nosso bloco, que ficará dentro de outro bloco já existente no arquivo base.html.twig, veja abaixo na linha 15.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;UTF-8&#34; /&amp;gt;
    &amp;lt;title&amp;gt;{% block title %}Welcome!{% endblock %}&amp;lt;/title&amp;gt;
{% block stylesheets %}
        &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ asset(&#39;bundles/tablelesscore/css/bootstrap.min.css&#39;) }}&#34; /&amp;gt;
    {% endblock %}
    &amp;lt;link rel=&#34;icon&#34; type=&#34;image/x-icon&#34; href=&#34;{{ asset(&#39;favicon.ico&#39;) }}&#34; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
{% block body %}

    {# Novo bloco criado #}
    {% block content %}{% endblock %}
    
{% endblock %}
{% block javascripts %}{% endblock %}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Agora para concluirmos esse arquivo, vamos estruturar o html, já incluindo as classes do bootstrap, veja abaixo o arquivo base.html.twig pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt; 
&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt; 
        &amp;lt;meta charset=&#34;UTF-8&#34; /&amp;gt;
        &amp;lt;title&amp;gt;{% block title %}Welcome!{% endblock %}&amp;lt;/title&amp;gt; 
        {% block stylesheets %} 
                &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ asset(&#39;bundles/tablelesscore/css/bootstrap.min.css&#39;) }}&#34; /&amp;gt;
        {% endblock %} 
        &amp;lt;link rel=&#34;icon&#34; type=&#34;image/x-icon&#34; href=&#34;{{ asset(&#39;favicon.ico&#39;) }}&#34; /&amp;gt; 
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
        {% block body %} 
        &amp;lt;div class=&#34;container&#34;&amp;gt; 
            &amp;lt;header class=&#34;row&#34;&amp;gt; 
                &amp;lt;div class=&#34;col-lg-6&#34;&amp;gt; 
                    &amp;lt;h1&amp;gt;Simples Blog&amp;lt;/h1&amp;gt; 
                    &amp;lt;a href=&#34;#&#34; title=&#34;&#34;&amp;gt;Home&amp;lt;/a&amp;gt; | 
                    &amp;lt;a href=&#34;#&#34; title=&#34;&#34;&amp;gt;administração&amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt; 
            &amp;lt;/header&amp;gt; 
        {% block content %} 
        {% endblock %} 
            &amp;lt;footer class=&#34;col-lg-12&#34;&amp;gt; 
                &amp;lt;p&amp;gt;&amp;copy; 2015 Tableless - Todos os direitos reservados&amp;lt;/p&amp;gt; 
            &amp;lt;/footer&amp;gt;
        &amp;lt;/div&amp;gt; 

        {% endblock %} 
        {% block javascripts %}{% endblock %} 
    &amp;lt;body&amp;gt; 
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Podemos perceber que os links estão sem caminho, para passarmos um link no Symfony precisamos do nome de nossas rotas, e para pegar esses nomes, vamos entrar no terminal.&lt;/p&gt;

&lt;p&gt;Abra o terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console router:debug
&lt;/pre&gt;

&lt;p&gt;Vamos ter uma lista dos nomes de nossas rotas, a primeira que vamos usar é a rota da home &amp;#8220;/&amp;#8221; , veja a imagem:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/032.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/032.png&#34; alt=&#34;Rotas&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47953&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Percebemos que o nome dessa rota, está muito extenso, vamos mudar isso, deixando o nome dessa rota e da rota de visualização do post, um pouco mais curto.&lt;/p&gt;

&lt;p&gt;Para isso, devemos entrar no controller indexController, caminho: src/Tableless/CoreBunde/ IndexControlerController.php&lt;/p&gt;

&lt;p&gt;Abra o arquivo, e nas annotations dos métodos indexAction e showAction, vamos colocar os nomes que queremos para nossas rotas. Exemplo: @Route(&amp;#8220;/&amp;#8221;, name=&amp;#8221;index&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Veja o exemplo na linha 2 e na linha 9 do código abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;/** 
     * @Route(&#34;/&#34;, name=&#34;index&#34;) 
     * @Template() 
     */ 
    public function indexAction() 
    .... 

    /** 
     * @Route(&#34;/show/{id}&#34;, name=&#34;show&#34;) 
     * @Template() 
     */ 
    public function showAction($id) 
    ...
&lt;/pre&gt;

&lt;p&gt;Agora nossas rotas estão com os nomes mais curtos.&lt;/p&gt;

&lt;p&gt;Para vermos novamente entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;$ php app/console router:debug
&lt;/pre&gt;

&lt;p&gt;Veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/042.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/042.png&#34; alt=&#34;Rotas&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47976&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto! Agora podemos inserir nossos links.&lt;/p&gt;

&lt;p&gt;Para pegarmos o link da home, digitamos: {{ path(&amp;#8216;index&amp;#8217;) }}, e para o link da administração vou pegar o link da lista de post.&lt;/p&gt;

&lt;p&gt;Veja o arquivo base.html.twig pronto, os links estão na linha 17 e 18.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt; 
&amp;lt;html&amp;gt; 
    &amp;lt;head&amp;gt; 
        &amp;lt;meta charset=&#34;UTF-8&#34; /&amp;gt;
        &amp;lt;title&amp;gt;{% block title %}Welcome!{% endblock %}&amp;lt;/title&amp;gt; 
        {% block stylesheets %} 
                &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ asset(&#39;bundles/tablelesscore/css/bootstrap.min.css&#39;) }}&#34; /&amp;gt;
        {% endblock %} 
        &amp;lt;link rel=&#34;icon&#34; type=&#34;image/x-icon&#34; href=&#34;{{ asset(&#39;favicon.ico&#39;) }}&#34; /&amp;gt; 
    &amp;lt;/head&amp;gt; 
    &amp;lt;body&amp;gt; 
        {% block body %} 
        &amp;lt;div class=&#34;container&#34;&amp;gt; 
            &amp;lt;header class=&#34;row&#34;&amp;gt; 
                &amp;lt;div class=&#34;col-lg-6&#34;&amp;gt; 
                    &amp;lt;h1&amp;gt;Simples Blog&amp;lt;/h1&amp;gt; 
                    &amp;lt;a href=&#34;{{ path(&#39;index&#39;) }}&#34; title=&#34;Home&#34;&amp;gt;Home&amp;lt;/a&amp;gt; | 
                    &amp;lt;a href=&#34;{{ path(&#39;post&#39;) }}&#34; title=&#34;Administração&#34;&amp;gt;administração&amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt; 
            &amp;lt;/header&amp;gt; 
        {% block content %} 
        {% endblock %} 
            &amp;lt;footer class=&#34;col-lg-12&#34;&amp;gt; 
                &amp;lt;p&amp;gt;&amp;copy; 2015 Tableless - Todos os direitos reservados&amp;lt;/p&amp;gt; 
            &amp;lt;/footer&amp;gt;
        &amp;lt;/div&amp;gt; 

        {% endblock %} 
        {% block javascripts %}{% endblock %} 
    &amp;lt;body&amp;gt; 
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;estruturando-e-estilizando-o-index&#34;&gt;Estruturando e estilizando o index&lt;/h2&gt;

&lt;p&gt;Nossa base está pronta, vamos agora para o arquivo index.html.twig, que é o index de nosso blog.&lt;/p&gt;

&lt;p&gt;Caminho: src/Tableless/CoreBundle/Resources/views/IndexController/index.html.twig&lt;/p&gt;

&lt;p&gt;Abra o arquivo para que possamos estruturá- lo.&lt;/p&gt;

&lt;p&gt;Podemos perceber que na primeira linha, nosso arquivo está estendendo o arquivo base.html.twig, que acabamos de estruturar.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar vamos criar um título para nossa página.&lt;/p&gt;

&lt;p&gt;Para isso, digitamos o título que queremos dentro do bloco title.&lt;/p&gt;

&lt;p&gt;Para que nosso conteúdo, posicione- se no lugar correto, vamos renomear o bloco body, para content, que criamos no arquivo base, o h1 e dump, vamos excluir, veja nosso arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% extends &#34;::base.html.twig&#34; %} 

{% block title %}Simples Blog{% endblock %} 

{% block content %} 
    
{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Nosso Controller IndexController está retornando um array de posts, através do método indexAction, para recuperarmos esse array via Twig, devemos fazer um &amp;#8220;for&amp;#8221; para recuperar cada dado do post.&lt;/p&gt;

&lt;p&gt;Obs: Se tivéssemos usando o php para recuperar esses dados, passaríamos um foreach, no caso do Twig para fazermos esse mesmo processo, usamos um for, veja abaixo o exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% for valor in array %}

{% endfor %}
&lt;/pre&gt;

&lt;p&gt;Para entender melhor o funcionamento do for, recomendo a &lt;a href=&#34;http://twig.sensiolabs.org/doc/tags/for.html&#34; title=&#34;twig for&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vamos entender melhor&lt;/p&gt;

&lt;p&gt;Nosso método indexAction, do controller indexController, está nos retornando um array, veja na linha 7.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;public function indexAction() 
    { 
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager(); 

        $posts = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findAllInOrder(); 

        return [ 
            &#39;posts&#39; =&amp;gt; $posts, 
        ]; 
    } 

&lt;/pre&gt;

&lt;p&gt;Para recuperarmos esses dados no twig, vamos fazer:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% for post in posts %}

    {{ post.title }}
    {{ post.author.name }}
    {{ post.content | slice(0, 45) }}

{% endfor %}
&lt;/pre&gt;

&lt;p&gt;Perceba que ao recuperarmos o post.content, que é o conteúdo do nosso post, vamos passar um &amp;#8220;slice&amp;#8221;, que serve para cortar o texto, começando do 0 até 45 caracteres. Caso queiram mais de 45 caracteres, é só aumentar esse valor.&lt;/p&gt;

&lt;p&gt;Também, temos que estruturar nossa página com html, incluir as classes do bootstrap e criar os links. Em relação aos links, para acessarmos um post, temos que passar o &amp;#8220;id&amp;#8221; desse post no link.&lt;/p&gt;

&lt;p&gt;Vamos colocar uma imagem, escolham uma imagem, e coloque na pasta web, caminho: web/&lt;/p&gt;

&lt;p&gt;Para recuperarmos essa imagem, vamos usar o asset.&lt;/p&gt;

&lt;p&gt;Veja abaixo o exemplo do asset para imagem:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img src=&#34;{{ asset(&#39;imagem.png&#39;) }}&#34; /&amp;gt; 
&lt;/pre&gt;

&lt;p&gt;Veja o index.html.twig pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% extends &#34;::base.html.twig&#34; %} 

{% block title %}Simples Blog{% endblock %} 

{% block content %} 

    &amp;lt;div class=&#34;container&#34;&amp;gt; 

        &amp;lt;div class=&#34;row&#34;&amp;gt; 
 
            &amp;lt;div class=&#34;col-lg-12&#34;&amp;gt;

                {% for post in posts %} 

                    &amp;lt;article class=&#34;col-lg-4&#34;&amp;gt;

                        &amp;lt;div class=&#34;thumbnail&#34;&amp;gt;

                            &amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;

                                &amp;lt;img class=&#34;img-responsive&#34; src=&#34;{{ asset(&#39;logo-tableless.png&#39;) }}&#34; alt=&#34;img&#34; title=&#34;img&#34;/&amp;gt;

                            &amp;lt;/a&amp;gt; 

                            &amp;lt;div class=&#34;caption&#34;&amp;gt; 

                                &amp;lt;h3&amp;gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt; 

                                &amp;lt;p&amp;gt;Escrito por: {{ post.author.name }}&amp;lt;/p&amp;gt; 

                                &amp;lt;p&amp;gt;{{ post.content|slice(0, 45) }} ...&amp;lt;/p&amp;gt;

                                &amp;lt;p&amp;gt;&amp;lt;a href=&#34;{{ path(&#39;show&#39;, { &#39;id&#39;: post.id }) }}&#34;&amp;gt;Leia mais...&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

                            &amp;lt;/div&amp;gt;

                        &amp;lt;/div&amp;gt; 

                    &amp;lt;/article&amp;gt;

                {% endfor %} 

            &amp;lt;/div&amp;gt;

        &amp;lt;/div&amp;gt; 

    &amp;lt;/div&amp;gt;

{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Vamos entrar no terminal, e subir nosso servidor.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console server:run
&lt;/pre&gt;

&lt;p&gt;Entre na url: &lt;a href=&#34;http://127.0.0.1:8000/&#34;&gt;http://127.0.0.1:8000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nossa home está pronto, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/051.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/051.png&#34; alt=&#34;blog&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47980&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;estruturando-e-estilizando-o-show&#34;&gt;Estruturando e estilizando o show&lt;/h2&gt;

&lt;p&gt;Vamos estruturar o show.html.twig, que é responsável pela visualização de cada post.&lt;/p&gt;

&lt;p&gt;Abra o arquivo, caminho: src/Tableless/CoreBundle/Resources/views/IndexController/ show.html.twig, e vamos estruturá lo.&lt;/p&gt;

&lt;p&gt;Vamos colocar um título no bloco &amp;#8220;title&amp;#8221;, renomear o bloco body para content, fazer a estruturação com o html e passar as classes do bootstrap. Perceba que nesse caso não precisamos fazer um &amp;#8220;for&amp;#8221; com o twig, pois estamos recebendo somente um array, ou seja, um post.&lt;/p&gt;

&lt;p&gt;Temos que dar uma atenção para a data de criação, e a data de atualização, não estamos recebendo essas datas no formato correto. Para que possamos apresentar as datas, temos que passar um date() no twig, veja o exemplo abaixo&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{{ post.createdAt | date(&#39;d/m/Y - H:m:s&#39;) }}
&lt;/pre&gt;

&lt;p&gt;Veja o arquivo show.html.twig pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% extends &#34;::base.html.twig&#34; %} 

{% block title %}Blog - {{ post.title }}{% endblock %} 

{% block content %} 

&amp;lt;div class=&#34;container&#34;&amp;gt; 

    &amp;lt;div class=&#34;row&#34;&amp;gt; 

        &amp;lt;article class=&#34;col-lg-12&#34;&amp;gt; 

            &amp;lt;h1&amp;gt;{{ post.title }}&amp;lt;/h1&amp;gt; 

            &amp;lt;p&amp;gt;Escrito por: {{ post.author.name }}&amp;lt;/p&amp;gt;

            &amp;lt;p&amp;gt;Postado em: {{ post.createdAt | date(&#39;d/m/Y - H:m:s&#39;) }}&amp;lt;/p&amp;gt;

            &amp;lt;p&amp;gt;{{ post.content }}&amp;lt;/p&amp;gt; 

        &amp;lt;/article&amp;gt; 

    &amp;lt;/div&amp;gt; 
    
&amp;lt;/div&amp;gt; 

{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Imagem da página pronta:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/061.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/061.png&#34; alt=&#34;Show post&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47981&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Nossa página de visualização de post, e nossa home, está estruturada e estilizada, temos que fazer a parte administrativa, tanto a administração de post, quanto de autores. Vou fazer essa parte em off. Os arquivos, encontram- se no github, os caminhos são:&lt;/p&gt;

&lt;p&gt;src/Tableless/CoreBundle/Resources/views/Author/&lt;/p&gt;

&lt;p&gt;src/Tableless/CoreBundle/Resources/views/Posts/&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;instalação&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – Instalação&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;pt 02&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;pt 3&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;pt 4&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-05/&#34; title=&#34;pt 5&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 – parte 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;Github do projeto&#34; target=&#34;_blank&#34;&gt;encontra-se no GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 – Parte 05</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-05/</link>
      <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-05/</guid>
      <description>

&lt;p&gt;No &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;Iniciando com symfony2 - parte 4&#34; target=&#34;_blank&#34;&gt;tutorial anterior&lt;/a&gt;, criamos a entidade Author, e fizemos o relacionamento com os posts, neste tutorial vamos fazer as configurações adequadas para que possamos deixar nossa aplicação estruturada corretamente, e vamos criar e configurar a página index, onde os usuários terão acesso para visualizar e ler os posts.&lt;/p&gt;

&lt;h2 id=&#34;configurando&#34;&gt;Configurando&lt;/h2&gt;

&lt;p&gt;Vamos começar com as configurações.&lt;/p&gt;

&lt;p&gt;Entrando no bundle CoreBundle, caminho: src/Tableless/CoreBundle, exclua a pasta Controller.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/021.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/021.png&#34; alt=&#34;Excluindo a pasta controller&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47743&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ainda neste mesmo bundle vamos excluir a pasta view, caminho: src/Tableless/CoreBundle/Resources/view.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/031.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/031.png&#34; alt=&#34;Excluindo a pasta view&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47744&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos entrar no bundle ModelBundle, caminho: src/Tableless/ModelBundle.&lt;/p&gt;

&lt;p&gt;E vamos mover a pasta Controller desse bundle para o bundle CoreBundle&lt;/p&gt;

&lt;p&gt;Vamos mover também a pasta view do ModelBundle para o bundle CoreBundle.&lt;/p&gt;

&lt;p&gt;Depois das mudanças, nossa estrutura de pastas ficará como na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/041.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/041.png&#34; alt=&#34;Estrutura de pastas pronta&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47746&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configurando-os-controllers&#34;&gt;Configurando os Controllers&lt;/h2&gt;

&lt;p&gt;Vamos continuar nossas configurações, agora vamos alterar nossos controllers para que os mesmos fiquem de acordo com a estrutura de pasta atual.&lt;/p&gt;

&lt;p&gt;Primeiramente, vamos excluir a rota do ModelBundle, pois não vamos usá-la.&lt;/p&gt;

&lt;p&gt;Entre no arquivo app/config/routing.yml e exclua as linhas abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-yml&#34;&gt;tableless_model:
    resource: &#34;@TablelessModelBundle/Controller/&#34;
    type:     annotation
    prefix:   /
&lt;/pre&gt;

&lt;p&gt;Deixando somente a rota tableless_core como mostrado na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/05.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/05.png&#34; alt=&#34;Arquivo routing.yml&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47747&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos excluir o DefaultController.php, pois não vamos usar esse controller.&lt;/p&gt;

&lt;p&gt;Abra o arquivo AuthorController.php, caminho: src/Tableless/CoreBundle/Controller/AuthorController.php&lt;/p&gt;

&lt;p&gt;Na linha 3, mude o namespace.&lt;/p&gt;

&lt;p&gt;De: Tableless\ModelBundle\Controller;&lt;/p&gt;

&lt;p&gt;Para: Tableless\CoreBundle\Controller;&lt;/p&gt;

&lt;p&gt;Na linha 43, mude a annotation:&lt;/p&gt;

&lt;p&gt;De: @Template(&amp;#8220;TablelessModelBundle:Author:new.html.twig&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Para: @Template(&amp;#8220;TablelessCoreBundle:Author:new.html.twig&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Agora vamos configurar o controller PostController, caminho: src/Tableless/CoreBundle/Controller/PostController.php, vamos fazer a mesma alteração.&lt;/p&gt;

&lt;p&gt;Na linha 3, mude o namespace.&lt;/p&gt;

&lt;p&gt;De: Tableless\ModelBundle\Controller;&lt;/p&gt;

&lt;p&gt;Para: Tableless\CoreBundle\Controller;&lt;/p&gt;

&lt;p&gt;Na linha 43, mude a annotation:&lt;/p&gt;

&lt;p&gt;De: @Template(&amp;#8220;TablelessModelBundle:Post:new.html.twig&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Para: @Template(&amp;#8220;TablelessCoreBundle:Post:new.html.twig&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Para verificarmos se correu tudo bem, vamos fazer o teste.&lt;/p&gt;

&lt;p&gt;Rode o servidor&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ app/console server:run
&lt;/pre&gt;

&lt;p&gt;Entre nas urls:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/post/&#34;&gt;http://127.0.0.1:8000/post/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/author/&#34;&gt;http://127.0.0.1:8000/author/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se tudo foi configurado corretamente, nossa aplicação voltará a funcionar perfeitamente, veja:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/06.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/06.png&#34; alt=&#34;Página index, e show&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47751&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;criando-um-controller&#34;&gt;Criando um Controller&lt;/h2&gt;

&lt;p&gt;Nesse momento vamos criar um index, para nossa aplicação, para que seja nossa pagina principal, e possamos visualizar os posts de forma correta.&lt;/p&gt;

&lt;p&gt;Podemos criar o controller codificando, porém para efeito de didática vamos criar através do console.&lt;/p&gt;

&lt;p&gt;Entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:controller
&lt;/pre&gt;

&lt;p&gt;Ao digitarmos o comando acima e darmos enter, entramos no assistente do console do Symfony e ele nos comunica: Primeiro, você precisa dar o nome do controlador que você deseja gerar. Você deve usar a notação de atalho como AcmeBlogBundle:Post&lt;/p&gt;

&lt;p&gt;Nesse momento digitamos:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Controller name: TablelessCoreBundle:IndexControler
&lt;/pre&gt;

&lt;p&gt;Ao darmos o nome do nosso controller e darmos enter, o assistente nos pergunta: Qual o formato que vamos configurar a nossa rota?&lt;/p&gt;

&lt;p&gt;E nos indica annotation, vamos deixar como está, e apenas damos enter:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$ Routing format (php, xml, yml, annotation) [annotation]:
&lt;/pre&gt;

&lt;p&gt;A próxima pergunta é:&lt;/p&gt;

&lt;p&gt;Qual o formato que vamos usar para template?&lt;/p&gt;

&lt;p&gt;Ele mesmo nos indica o twig. Apenas damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$ Template format (twig, php) [twig]:
&lt;/pre&gt;

&lt;p&gt;Após o enter ele nos pede o nome de nossas ações, que são os métodos que vamos criar para o nosso controller.&lt;/p&gt;

&lt;p&gt;A primeira ação (método) vamos chamar de indexAction, e damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New action name (press  to stop adding actions): indexAction
&lt;/pre&gt;

&lt;p&gt;O assistente nos pede a rota, vamos digitar “/” e damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Action route [/index]: /
&lt;/pre&gt;

&lt;p&gt;Nos pergunta o caminho da nossa template, e ele nos indica um caminho, vamos deixar como está e apenas damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Templatename (optional) [TablelessCoreBundle:IndexControler:index.html.twig]:
&lt;/pre&gt;

&lt;p&gt;Novamente o assistente nos pede para darmos um nome para uma nova ação (método), essa nova ação fará com que o post seja visualizado para a leitura, vamos dar o nome de showAction.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New action name (press  to stop adding actions): showAction
&lt;/pre&gt;

&lt;p&gt;O assistente nos pede a rota, e nos indica como “/show”, vamos deixar como está e damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Action route [/show]:
&lt;/pre&gt;

&lt;p&gt;Nos pergunta sobre caminho da template, e ele nos indica um caminho, vamos deixar como está e apenas damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Templatename (optional) [TablelessCoreBundle:IndexControler:show.html.twig]:
&lt;/pre&gt;

&lt;p&gt;Ao darmos enter, entramos no modo de criação de uma nova ação, porém não queremos nenhuma outra ação, então apenas damos um enter, para entrarmos no processo de finalização.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New action name (press  to stop adding actions):
&lt;/pre&gt;

&lt;p&gt;Ao entramos no processo de finalização o assistente nos pergunta se queremos confirmar a geração desse controller, ele nos indica sim, como queremos, apenas damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you confirm generation [yes]?
&lt;/pre&gt;

&lt;p&gt;Pronto! Nosso controller IndexController está criado, juntamente com suas templates, veja a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/07.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/07.png&#34; alt=&#34;Index controller&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47775&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao entrarmos na url: &lt;a href=&#34;http://127.0.0.1:8000/&#34;&gt;http://127.0.0.1:8000/&lt;/a&gt;, vamos entrar no nosso index, e receberemos a mensagem abaixo:&lt;/p&gt;

&lt;p&gt;Welcome to the IndexControler:index page&lt;/p&gt;

&lt;h2 id=&#34;criando-um-repositório&#34;&gt;Criando um repositório&lt;/h2&gt;

&lt;p&gt;Se entrarmos em nosso controller IndexController, caminho: src/Tableless/CoreBunde/ IndexController.php, vamos perceber que nossos métodos estão criados, porém não estão implementados, vamos implementá-los, mas queremos que nosso index apresente para o usuário os últimos posts escritos, para que sempre o post mais atual seja apresentado em primeiro lugar, para isso devemos criar um repositório para nossa entidade Post.&lt;/p&gt;

&lt;p&gt;Para isso, vamos entrar no bundle ModelBundle e crie uma pasta com o nome de Repository, dentro dessa pasta crie uma classe com o nome PostRepository.&lt;/p&gt;

&lt;p&gt;Com a classe PostRepository aberta, adicione o nemspace dessa classe, e de um extends na classe EntityRepository do Doctrine, não se esquecendo de dar um use nessa classe.&lt;/p&gt;

&lt;p&gt;use Doctrine\ORM\EntityRepository;&lt;/p&gt;

&lt;p&gt;Crie um método privado com o nome getQueryBuilder e acrescente a EntityManager para que possamos usar nossa entidade Post, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;private function getQueryBuilder()
{
    $em = $this-&amp;gt;getEntityManager();

    $queryBuilder = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)
    -&amp;gt;createQueryBuilder(&#39;p&#39;);

    return $queryBuilder;
 }
&lt;/pre&gt;

&lt;p&gt;Agora vamos criar um método publico chamado findAllInOrder, e vamos chamar o método getQueryBuilder(), para ordená-lo da forma que queremos, para que seja mostrado o último post postado primeiro. Veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;public function findAllInOrder()
{
    $qb = $this-&amp;gt;getQueryBuilder()
    -&amp;gt;orderBy(&#39;p.createdAt&#39;, &#39;desc&#39;);

    return $qb-&amp;gt;getQuery()-&amp;gt;getResult();
}
&lt;/pre&gt;

&lt;p&gt;Veja a classe PostRepository pronta:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\ModelBundle\Repository;

use Doctrine\ORM\EntityRepository;

class PostRepository extends EntityRepository
{
    private function getQueryBuilder()
    {
        $em = $this-&amp;gt;getEntityManager();
        $queryBuilder = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)
            -&amp;gt;createQueryBuilder(&#39;p&#39;);
        return $queryBuilder;
    }

     public function findAllInOrder()
    {
        $qb = $this-&amp;gt;getQueryBuilder()
            -&amp;gt;orderBy(&#39;p.createdAt&#39;, &#39;desc&#39;);

        return $qb-&amp;gt;getQuery()-&amp;gt;getResult();
    }
} 

&lt;/pre&gt;

&lt;p&gt;Agora temos que indicar para a entidade Post via annotation, onde está a classe PostRepository, para isso vamos abrir a entidade Post, caminho:src/Tableless/ModelBundle/Entity/Post.php, e acrescentar a annotation (repositoryClass=&amp;#8221;Tableless\ModelBundle\Repository\PostRepository&amp;#8221;) na linha 12 de sua entidade, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
 * Post
 *
 * @ORM\Table(name=&#34;post&#34;)
 * @ORM\Entity(repositoryClass=&#34;Tableless\ModelBundle\Repository\PostRepository&#34;)
 */
class Post extends Timestampable
{
    ...
&lt;/pre&gt;

&lt;h2 id=&#34;implementando-o-controller&#34;&gt;Implementando o controller&lt;/h2&gt;

&lt;p&gt;Vamos voltar para nosso IndexController, para que possamos implementá- lo. Abra o IndexController , e no método indexAction() temos que chamar nossa entidade Post, para que através dela chamemos o método findAllInOrder() da classe PostRepository, e retornar o resultado em forma de array, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;public function indexAction()
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $posts = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findAllInOrder();

        return [
            &#39;posts&#39; =&amp;gt; $posts,
        ];
    } 
&lt;/pre&gt;

&lt;p&gt;Também vamos implementar o método showAction(), para que seja buscado apena o post clickado pelo usuário, para isso devemos passar um parâmetro id, tanto no método, quanto na annotation para rota, para que seja buscado somente o post solicitado. Temos que chamar nossa entidade Post novamente, para que através dela chamemos o método find(), que já vem pré configurado pelo Doctrine, porém se o usuário requisitar um post que não existe, temos que passar uma mensagem de erro, para informá- lo, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/**
     * @Route(&#34;/show/{id}&#34;)
     * @Template()
     */
    public function showAction($id)
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $post = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;find($id);

        if (!$post) {
            throw $this-&amp;gt;createNotFoundException(&#39;O post não existe! Volte para home!&#39;);
        }

        return [
            &#39;post&#39; =&amp;gt; $post,
        ];
    }
&lt;/pre&gt;

&lt;p&gt;Veja o IndexController pronto:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php

namespace Tableless\CoreBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;

class IndexControlerController extends Controller
{
     /**
     * @Route(&#34;/&#34;)
     * @Template()
     */
    public function indexAction()
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $posts = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;findAllInOrder();

        return [
            &#39;posts&#39; =&amp;gt; $posts,
        ];
    }

     /**
     * @Route(&#34;/show/{id}&#34;)
     * @Template()
     */
    public function showAction($id)
    {
        $em = $this-&amp;gt;getDoctrine()-&amp;gt;getManager();

        $post = $em-&amp;gt;getRepository(&#39;TablelessModelBundle:Post&#39;)-&amp;gt;find($id);

        if (!$post) {
            throw $this-&amp;gt;createNotFoundException(&#39;O post não existe! Volte para home!&#39;);
        }

        return [
            &#39;post&#39; =&amp;gt; $post,
        ];
    }
}

&lt;/pre&gt;

&lt;p&gt;Para vemos como está ficando nossa aplicação, abra a index.html.twig, do IndexController, caminho: src/Tableless/CoreBundle/Resouces/views/IndexController/index.html.twig e vamos dar um dump em posts, veja abaixo, vamos adicionar a linha 8:&lt;/p&gt;

&lt;pre class=&#34;lang-twig&#34;&gt;{% extends &#34;::base.html.twig&#34; %}

{% block title %}TablelessCoreBundle:IndexControler:index{% endblock %}

{% block body %}
Welcome to the IndexControler:index page

    {{ dump(posts) }}
    
{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Vamos fazer a mesma modificação para o arquivo show.html.twig no mesmo diretório, porém ao em vez de dar um dump em posts, vamos dar um dump em post, sem o “s” no final, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;{% extends &#34;::base.html.twig&#34; %}

{% block title %}TablelessCoreBundle:IndexControler:show{% endblock %}

{% block body %}
Welcome to the IndexControler:show page

    {{ dump(post) }}
    
{% endblock %}
&lt;/pre&gt;

&lt;p&gt;Para vemos o resultado, entre nas urls:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/&#34;&gt;http://127.0.0.1:8000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/show/{o&#34;&gt;http://127.0.0.1:8000/show/{o&lt;/a&gt; id do seu post}&lt;/p&gt;

&lt;p&gt;Veja as imagens para comparação:&lt;/p&gt;

&lt;p&gt;index &amp;#8211; url: &lt;a href=&#34;http://127.0.0.1:8000/&#34;&gt;http://127.0.0.1:8000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/08.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/08.png&#34; alt=&#34;index&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47767&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pagina show – url: &lt;a href=&#34;http://127.0.0.1:8000/show/4&#34;&gt;http://127.0.0.1:8000/show/4&lt;/a&gt; -&amp;gt; {o id do seu post} no meu caso 4.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/09.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/09.png&#34; alt=&#34;show&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47768&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;No tutorial anterior, eu comentei que iriamos configurar nosso projeto e começarmos a trabalhar com o Twig, porém nossa configuração e a criação do index, deixou este tutorial extenso, mas no próximo tutorial, vamos trabalhar com o bootstrap e com o twig para que possamos visualizar nossos post em nossa home da forma adequada e bonita.&lt;/p&gt;

&lt;p&gt;Links dos tutoriais anteriores:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2/&#34; title=&#34;instalação&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 &amp;#8211; Instalação&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-02/&#34; title=&#34;parte 02&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 &amp;#8211; parte 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;parte 03&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 &amp;#8211; parte 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-04/&#34; title=&#34;parte 04&#34; target=&#34;_blank&#34;&gt;Iniciando com Symfony 2 &amp;#8211; parte 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;Git do projeto&#34; target=&#34;_blank&#34;&gt;encontra-se no GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iniciando com Symfony 2 – Parte 04</title>
      <link>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-04/</link>
      <pubDate>Wed, 04 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-com-symfony-2-parte-04/</guid>
      <description>

&lt;p&gt;Anteriormente, &lt;a href=&#34;http://tableless.com.br/iniciando-com-symfony-2-parte-03/&#34; title=&#34;Iniciando com symfony - parte-03&#34; target=&#34;_blank&#34;&gt;criamos a entidade Post&lt;/a&gt;, vamos dar continuidade ao nosso simples projeto, criando uma entidade Author, faremos o relacionamento para que cada autor fique ligado ao post que criou.&lt;/p&gt;

&lt;h2 id=&#34;criando-a-entidade-author&#34;&gt;Criando a entidade Author&lt;/h2&gt;

&lt;p&gt;Vamos criar a entidade Author, entre no terminal e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:entity
&lt;/pre&gt;

&lt;p&gt;Vamos digitar o nome da entidade como : TablelessModelBundle:Author.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ The Entity shortcut name: TablelessModelBundle:Author
&lt;/pre&gt;

&lt;p&gt;Vamos mapeá-la usando annotation. Apenas damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Configuration format (yml, xml, php, or annotation) [annotation]:
&lt;/pre&gt;

&lt;p&gt;O assistente nos pergunta: Qual será o nome do nosso campo?&lt;/p&gt;

&lt;p&gt;Digitamos &amp;#8220;name&amp;#8221; e damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ New field name (press  to stop adding fields): name
&lt;/pre&gt;

&lt;p&gt;Será do tipo string.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Field type [string]:
&lt;/pre&gt;

&lt;p&gt;Com o tamanho de 100.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Field length [255]: 100
&lt;/pre&gt;

&lt;p&gt;Quando o assistente nos perguntar novamente: Qual será o novo campo? Damos enter para entrarmos no processo de finalização. E nos pergunta, se queremos criar uma classe de repositório, ele nos indica não, vamos apenas dar um enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Do you want to generate an empty repository class [no]?
&lt;/pre&gt;

&lt;p&gt;E para finalizar, o assistente pergunta se realmente queremos gerar a entidade. Como queremos, digitamos apenas enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you confirm generation [yes]?
&lt;/pre&gt;

&lt;p&gt;Nossa entidade Author está pronta.&lt;/p&gt;

&lt;p&gt;Ao entrarmos na pasta src/Tableless/ModelBundle/Entity/ vamos encontrá-la.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/02.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/02.png&#34; alt=&#34;Entidade Author criada&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47412&#34; srcset=&#34;uploads/2015/03/02.png 750w, uploads/2015/03/02-259x139.png 259w, uploads/2015/03/02-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora devemos adicionar a annotations, @ORM\Table(name=&amp;#8221;author&amp;#8221;) para o nome da nossa tabela, veja na linha 10:&lt;/p&gt;

&lt;p&gt;Veja toda a entidade Author:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 

/** 
 * Author 
 * 
 * @ORM\Table(name=&#34;author&#34;)
 * @ORM\Entity 
 */ 
class Author 
{ 
    /** 
     * @var integer 
     * 
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;) 
     * @ORM\Id 
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;) 
     */ 
    private $id; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;name&#34;, type=&#34;string&#34;, length=100) 
     */ 
    private $name; 

    /** 
     * Get id 
     * 
     * @return integer 
     */ 
    public function getId() 
    { 
        return $this-&amp;gt;id; 
    } 

    /** 
     * Set name 
     * 
     * @param string $name 
     * @return Author 
     */ 
    public function setName($name) 
    { 
        $this-&amp;gt;name = $name; 
        return $this; 
    } 

    /** 
     * Get name 
     * 
     * @return string 
     */ 
    public function getName() 
    { 
        return $this-&amp;gt;name; 
    } 
} 
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-o-projeto&#34;&gt;Configurando o projeto&lt;/h2&gt;

&lt;p&gt;Nesse momento vamos criar uma classe abstrata com o nome Timestampable, para que não fiquemos repetindo código, pois entidade Author também receberá uma data de criação e data de atualização.&lt;/p&gt;

&lt;p&gt;Vamos lá!&lt;/p&gt;

&lt;p&gt;Entre na pasta src/Tableless/ModelBundle/Entity/, e vamos criar uma classe abstrata com o nome Timestampable, para que possamos mapeá lá vamos usar a classe do Doctrine Mapping e vamos dar um apelido de ORM, e fazer as annotations correspondentes.&lt;/p&gt;

&lt;p&gt;Nesse momento, ficar explicando detalhe por detalhe levará muito tempo, e o tutorial ficará extenso, veja a classe Timestampable pronta abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 

/** 
 * Timestampable abstract class 
 * @ORM\MappedSuperclass 
 */ 
abstract class Timestampable 
{ 
    /** 
     * @var \DateTime 
     * 
     * @ORM\Column(name=&#34;created_at&#34;, type=&#34;datetime&#34;) 
     * @Assert\NotBlank 
     */ 
    private $createdAt; 

    /** 
     * @var \DateTime 
     * 
     * @ORM\Column(name=&#34;updated_at&#34;, type=&#34;datetime&#34;) 
     * @Assert\NotBlank 
     */ 
    private $updatedAt; 

    /** 
     * Construct 
     */ 
    public function __construct() 
    { 
        $this-&amp;gt;createdAt = new \DateTime(); 
        $this-&amp;gt;updatedAt = new \DateTime(); 
    } 

    /** 
     * Set createdAt 
     * 
     * @param $createdAt 
     */ 
    public function setCreatedAt($createdAt) 
    { 
        $this-&amp;gt;createdAt = $createdAt; 
    } 

    /** 
     * Get CreatedAt 
     * 
     * @return \DateTime 
     */ 
    public function getCreatedAt() 
    { 
        return $this-&amp;gt;createdAt; 
    } 

    /** 
     * Set UpdatedAt 
     * 
     * @param \DateTime $updatedAt 
     */ 
    public function setUpdatedAt($updatedAt) 
    { 
        $this-&amp;gt;updatedAt = $updatedAt; 
    } 
    /** 
     * Get UpdateAt 
     * 
     * @return \DateTime 
     */ 
    public function getUpdatedAt() 
    { 
        return $this-&amp;gt;updatedAt; 
    } 
}
&lt;/pre&gt;

&lt;p&gt;Vamos estender essa classe na entidade Author, veja abaixo na linha 13:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 

/** 
 * Author 
 * 
 * @ORM\Table(name=&#34;author&#34;)
 * @ORM\Entity 
 */ 
class Author extends Timestampable 
{ 
…
&lt;/pre&gt;

&lt;p&gt;Temos que validar os campos da entidade Author, vamos dar um use em Constraints e apelidá-la como Assert:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Symfony\Component\Validator\Constraints as Assert;
&lt;/pre&gt;

&lt;p&gt;vamos validar o campo name com @Assert\NotBlank, veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
* @var string 
* 
* @ORM\Column(name=&#34;name&#34;, type=&#34;string&#34;, length=100) 
* @Assert\NotBlank 
*/ 
private $name; 
&lt;/pre&gt;

&lt;p&gt;Veja a entidade Author depois da configuração:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 

/** 
 * Author 
 * 
 * @ORM\Table(name=&#34;author&#34;)
 * @ORM\Entity 
 */ 
class Author extends Timestampable 
{  
    /** 
     * @var integer 
     * 
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;) 
     * @ORM\Id 
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;) 
     */ 
    private $id; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;name&#34;, type=&#34;string&#34;, length=100) 
     * @Assert\NotBlank 
     */ 
    private $name; 


    /** 
     * Get id 
     * 
     * @return integer 
     */ 
    public function getId() 
    { 
        return $this-&amp;gt;id; 
    } 

    /** 
     * Set name 
     * 
     * @param string $name 
     * @return Author 
     */ 
    public function setName($name) 
    { 
        $this-&amp;gt;name = $name; 
 
        return $this; 
    } 

    /** 
     * Get name 
     * 
     * @return string 
     */ 
    public function getName() 
    { 
        return $this-&amp;gt;name; 
    } 
} 
&lt;/pre&gt;

&lt;h2 id=&#34;configurando-a-entidade-post&#34;&gt;Configurando a entidade Post&lt;/h2&gt;

&lt;p&gt;Como criamos um classe abstrata, vamos alterar a entidade Post para que ela estenda a entidade Timestampable.&lt;/p&gt;

&lt;p&gt;Exclua os atributos $createdAt e $updatedAt e os métodos setCreatedAt(), getCreatedAt(), setUpdatedAt(), getUpdatedAt() e o __contruct(), e vamos estender a classe Timestampable, depois de configurada, a entidade Post ficará assim:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 

/** 
 * Post 
 * 
 * @ORM\Table(name=&#34;post&#34;) 
 * @ORM\Entity 
 */ 
class Post extends Timestampable 
{ 
    /** 
     * @var integer 
     * 
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;) 
     * @ORM\Id 
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;) 
     */ 
    private $id; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;title&#34;, type=&#34;string&#34;, length=255) 
     * @Assert\NotBlank 
     */ 
    private $title; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;content&#34;, type=&#34;text&#34;) 
     * @Assert\NotBlank 
     */ 
    private $content; 

     /** 
     * Get id 
     * 
     * @return integer 
     */ 
    public function getId() 
    { 
        return $this-&amp;gt;id; 
    } 

    /** 
     * Set title 
     * 
     * @param string $title 
     * @return Post 
     */ 
    public function setTitle($title) 
    { 
        $this-&amp;gt;title = $title; 

     return $this; 
    } 

    /** 
     * Get title 
     * 
     * @return string 
     */ 
    public function getTitle() 
    { 
        return $this-&amp;gt;title; 
    } 

    /** 
     * Set content 
     * 
     * @param string $content 
     * @return Post 
     */ 
    public function setContent($content) 
    { 
        $this-&amp;gt;content = $content; 

        return $this; 
    } 

    /** 
     * Get content 
     * 
     * @return string 
     */ 
    public function getContent() 
    { 
        return $this-&amp;gt;content; 
    } 
} 
&lt;/pre&gt;

&lt;h2 id=&#34;atualizando-o-banco-de-dados&#34;&gt;Atualizando o banco de dados&lt;/h2&gt;

&lt;p&gt;Geramos a entidade Author e alteramos a entidade Post, dessa forma devemos atualizar nosso banco, para que o mesmo fique configurado de acordo com as entidades.&lt;/p&gt;

&lt;p&gt;Vamos ao terminal, e para atualizar o banco de dados vamos digitar o código:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:update --force
&lt;/pre&gt;

&lt;p&gt;Teremos o resultado:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Updating database schema... 
 Database schema updated successfully! &#34;1&#34; queries were execute
&lt;/pre&gt;

&lt;p&gt;Entrando no banco de dados vamos perceber que a tabela author criada:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/03.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/03.png&#34; alt=&#34;Tabela Author&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47434&#34; srcset=&#34;uploads/2015/03/03.png 750w, uploads/2015/03/03-259x139.png 259w, uploads/2015/03/03-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;criando-o-crud-da-entidade-author&#34;&gt;Criando o CRUD da entidade Author&lt;/h2&gt;

&lt;p&gt;Depois da configuração das nossa entidade, vamos gerar o CRUD da entidade Author. Vamos digitar no console:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:crud
&lt;/pre&gt;

&lt;p&gt;Digitamos TablelessModelBundle:Author:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ The Entity shortcut name: TablelessModelBundle:Author
&lt;/pre&gt;

&lt;p&gt;O assistente nos pergunta se queremos gerar as ações de gravação, digitamos: yes.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you want to generate the &#34;write&#34; actions [no]? Yes
&lt;/pre&gt;

&lt;p&gt;Como vamos configurar? Vamos deixar como está, annotation, e damos enter&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Configuration format (yml, xml, php, or annotation) [annotation]:
&lt;/pre&gt;

&lt;p&gt;Como será a rota? Vamos deixar como ele nos indica, damos enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Routes prefix [/author]:
&lt;/pre&gt;

&lt;p&gt;Vamos confirmar a geração desse CRUD dando enter.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ Do you confirm generation [yes]?
&lt;/pre&gt;

&lt;p&gt;Prontinho nosso CRUD da entidade Author está pronto, vamos testar.&lt;/p&gt;

&lt;p&gt;Inicie o servidor:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console server:run
&lt;/pre&gt;

&lt;p&gt;entre na url:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/author/&#34;&gt;http://127.0.0.1:8000/author/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos criar um autor com o nome Tableless&lt;/p&gt;

&lt;h2 id=&#34;relacionamento-com-doctrine&#34;&gt;Relacionamento com Doctrine&lt;/h2&gt;

&lt;p&gt;Vamos fazer um relacionamento no banco de dados, pois queremos que, ao criarmos um post, o mesmo esteja relacionado com o autor que o criou. Não entraremos em detalhes sobre relacionamento, caso tenha dúvidas, &lt;a href=&#34;http://doctrine-orm.readthedocs.org/en/latest/reference/association-mapping.html&#34; title=&#34;Documentação de relacionamento com Doctrine&#34; target=&#34;_blank&#34;&gt;consulte a documentação&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vamos configurar novamente as entidades para que o relacionamento possa acontecer.&lt;/p&gt;

&lt;p&gt;Entre na entidade Post e acrescente o atributo $author com as seguintes annotations:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @var Author 
     * 
     * @ORM\ManyToOne(targetEntity=&#34;Author&#34;, inversedBy=&#34;posts&#34;) 
     * @ORM\JoinColumn(name=&#34;author_id&#34;, referencedColumnName=&#34;id&#34;, nullable=false) 
     * @Assert\NotBlank 
     */ 
    private $author;
&lt;/pre&gt;

&lt;p&gt;Entre na entidade Author e acrescente o atributo $post, com as seguintes annotations:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @var ArrayCollection 
     * 
     * @ORM\OneToMany(targetEntity=&#34;Post&#34;, mappedBy=&#34;author&#34;, cascade={&#34;remove&#34;}) 
     */ 
    private $post;
&lt;/pre&gt;

&lt;p&gt;Precisamos também dar um use na classe ArrayCollection, do Doctrine, pois um autor terá vários posts, e os posts serão buscados como array, insira o código:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;use Doctrine\Common\Collections\ArrayCollection;
&lt;/pre&gt;

&lt;p&gt;Vamos criar um construtor, porém a entidade Timestampable já tem um construtor, para resolver esse problema, vamos adicionar um parent::__construct(), veja abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * Constructor 
     */ 
    public function __construct() 
    { 
         parent::__construct();
    
        $this-&amp;gt;post = new ArrayCollection(); 
    }
&lt;/pre&gt;

&lt;p&gt;Agora vamos gerar os métodos necessários da entidade Author, entre no console e digite:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:entities TablelessModelBundle:Author
&lt;/pre&gt;

&lt;p&gt;Temos que gerar também para a entidade Post:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console generate:doctrine:entities TablelessModelBundle:Post
&lt;/pre&gt;

&lt;p&gt;Entre novamente na entidade Author e acrescente o método abaixo no final da entidade:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @return string 
     */ 
    public function __toString() 
    { 
        return $this-&amp;gt;getName(); 
    }
&lt;/pre&gt;

&lt;p&gt;Veja como ficou a entidade Author depois de configurarmos:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 
use Doctrine\Common\Collections\ArrayCollection; 

/** 
 * Author 
 * 
 * @ORM\Table(name=&#34;author&#34;) 
 * @ORM\Entity 
 */ 
class Author extends Timestampable 
{ 
   /** 
     * @var integer 
     * 
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;) 
     * @ORM\Id 
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;) 
     */ 
    private $id; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;name&#34;, type=&#34;string&#34;, length=100) 
     * @Assert\NotBlank 
     */ 
    private $name; 

    /** 
     * @var ArrayCollection 
     * 
     * @ORM\OneToMany(targetEntity=&#34;Post&#34;, mappedBy=&#34;author&#34;, cascade={&#34;remove&#34;}) 
     */ 
    private $post; 

    /** 
     * Constructor 
     */ 
    public function __construct() 
    { 
         parent::__construct();

        $this-&amp;gt;post = new ArrayCollection(); 
    } 

        /** 
     * Get id 
     * 
     * @return integer 
     */ 
    public function getId() 
    { 
        return $this-&amp;gt;id; 
    } 

    /** 
     * Set name 
     * 
     * @param string $name 
     * @return Author 
     */ 
    public function setName($name) 
    { 
        $this-&amp;gt;name = $name; 

        return $this; 
    } 

    /** 
     * Get name 
     * 
     * @return string

    */ 
    public function getName() 
    { 
        return $this-&amp;gt;name; 
    } 

    /** 
     * Add post 
     * 
     * @param \Tableless\ModelBundle\Entity\Post $post 
     * @return Author 
     */ 
    public function addPost(\Tableless\ModelBundle\Entity\Post $post) 
    { 
        $this-&amp;gt;post[] = $post; 

        return $this; 
    } 

    /** 
     * Remove post 
     * 
     * @param \Tableless\ModelBundle\Entity\Post $post 
     */ 
    public function removePost(\Tableless\ModelBundle\Entity\Post $post) 
    { 
        $this-&amp;gt;post-&amp;gt;removeElement($post); 
    } 

    /** 
     * Get post 
     * 
     * @return \Doctrine\Common\Collections\Collection 
     */ 
    public function getPost() 
    { 
        return $this-&amp;gt;post; 
    } 

    /** 
     * @return string 
     */ 
    public function __toString() 
    { 
        return $this-&amp;gt;getName(); 
    } 
} 

&lt;/pre&gt;

&lt;p&gt;Veja a entidade Post, após a configuração:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php 

namespace Tableless\ModelBundle\Entity; 

use Doctrine\ORM\Mapping as ORM; 
use Symfony\Component\Validator\Constraints as Assert; 

/** 
 * Post 
 * 
 * @ORM\Table(name=&#34;post&#34;) 
 * @ORM\Entity 
 */ 
class Post extends Timestampable 
{ 
    /** 
     * @var integer 
     * 
     * @ORM\Column(name=&#34;id&#34;, type=&#34;integer&#34;) 
     * @ORM\Id 
     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;) 
     */ 
    private $id; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;title&#34;, type=&#34;string&#34;, length=255) 
     * @Assert\NotBlank 
     */ 
    private $title; 

    /** 
     * @var string 
     * 
     * @ORM\Column(name=&#34;content&#34;, type=&#34;text&#34;) 
     * @Assert\NotBlank 
     */ 
    private $content; 

    /** 
     * @var Author 
     * 
     * @ORM\ManyToOne(targetEntity=&#34;Author&#34;, inversedBy=&#34;posts&#34;) 
     * @ORM\JoinColumn(name=&#34;author_id&#34;, referencedColumnName=&#34;id&#34;, nullable=false) 
     * @Assert\NotBlank
    */ 
    private $author; 


    /** 
     * Get id 
     * 
     * @return integer 
     */ 
    public function getId() 
    { 
        return $this-&amp;gt;id; 
    } 

    /** 
     * Set title 
     * 
     * @param string $title 
     * @return Post 
     */ 
    public function setTitle($title) 
    { 
        $this-&amp;gt;title = $title; 

        return $this; 
    } 

    /** 
     * Get title 
     * 
     * @return string 
     */ 
    public function getTitle() 
    { 
        return $this-&amp;gt;title; 
    } 

    /** 
     * Set content 
     * 
     * @param string $content 
     * @return Post 
     */ 
    public function setContent($content) 
    { 
        $this-&amp;gt;content = $content; 

        return $this; 
    } 

    /** 
     * Get content
     * 
     * @return string 
     */ 
    public function getContent() 
    { 
        return $this-&amp;gt;content; 
    } 

    /** 
     * Set author 
     * 
     * @param \Tableless\ModelBundle\Entity\Author $author 
     * @return Post 
     */ 
    public function setAuthor(\Tableless\ModelBundle\Entity\Author $author) 
    { 
        $this-&amp;gt;author = $author; 

        return $this; 
    } 

    /** 
     * Get author 
     * 
     * @return \Tableless\ModelBundle\Entity\Author 
     */ 
    public function getAuthor() 
    { 
        return $this-&amp;gt;author; 
    } 
} 
&lt;/pre&gt;

&lt;p&gt;Agora vamos atualizar o banco de dados para gerar o relacionamento, para isso apague todo o conteúdo das tabelas do banco de dados, caso não o faça, ocorrerá erro,&lt;/p&gt;

&lt;p&gt;Após apagar o conteúdo do banco, rode o comando no console:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ php app/console doctrine:schema:update --force
&lt;/pre&gt;

&lt;h2 id=&#34;corrigindo-os-formulários&#34;&gt;Corrigindo os formulários&lt;/h2&gt;

&lt;p&gt;Entre na classe PostType, caminho: src/Tableless/ModelBundle/Form/PostType, e acrescente a linha abaixo, no método buildForm:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;-&amp;gt;add(&#39;author&#39;)
&lt;/pre&gt;

&lt;p&gt;Também vamos apagar as linhas:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;-&amp;gt;add(&#39;createdAt&#39;) 
 -&amp;gt;add(&#39;updatedAt&#39;) 
&lt;/pre&gt;

&lt;p&gt;Pois não precisamos inserir as datas, em que o post foi criado, ou alterado, isso acontecerá automaticamente!&lt;/p&gt;

&lt;p&gt;Depois das modificações, o método formBuilder ficará como abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;/** 
     * @param FormBuilderInterface $builder 
     * @param array $options 
     */ 
    public function buildForm(FormBuilderInterface $builder, array $options) 
    { 
        $builder 
            -&amp;gt;add(&#39;title&#39;) 
            -&amp;gt;add(&#39;content&#39;) 
            -&amp;gt;add(&#39;author&#39;) 
        ; 
    }
&lt;/pre&gt;

&lt;p&gt;Tudo configurado para que possamos criar nossos posts.&lt;/p&gt;

&lt;p&gt;Para verificarmos se está tudo correto, precisamos criar primeiramente um autor, depois criamos um post, onde teremos que selecionar um autor, para o mesmo.&lt;/p&gt;

&lt;p&gt;Veja abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/03/04.png&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/03/04.png&#34; alt=&#34;autor&#34; width=&#34;750&#34; height=&#34;403&#34; class=&#34;alignnone size-full wp-image-47469&#34; srcset=&#34;uploads/2015/03/04.png 750w, uploads/2015/03/04-259x139.png 259w, uploads/2015/03/04-400x215.png 400w&#34; sizes=&#34;(max-width: 750px) 100vw, 750px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lembrando que a url de autor é:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/author/&#34;&gt;http://127.0.0.1:8000/author/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e a url de post é:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8000/post/&#34;&gt;http://127.0.0.1:8000/post/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Vamos terminar este tutorial, pois seu conteúdo está muito extenso, no próximo, vamos fazer as configurações necessárias em nossa simples aplicação, e vamos criar um index, para mostrar nossos posts, que configuraremos com o Bootstrap, e com o template engine twig. O projeto &lt;a href=&#34;https://github.com/candidosouza/tableless&#34; title=&#34;GitHub do projeto&#34; target=&#34;_blank&#34;&gt;encontra-se no GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>