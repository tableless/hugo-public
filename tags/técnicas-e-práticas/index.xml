<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Técnicas E Práticas on Tableless</title>
    <link>http://tableless.com.br/tags/t%C3%A9cnicas-e-pr%C3%A1ticas/index.xml</link>
    <description>Recent content in Técnicas E Práticas on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/t%C3%A9cnicas-e-pr%C3%A1ticas/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Começando um blog – O público alvo</title>
      <link>http://tableless.com.br/comecando-um-blog-o-publico-alvo/</link>
      <pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/comecando-um-blog-o-publico-alvo/</guid>
      <description>&lt;p&gt;Ano novo, vida nova e blog novo. Mas por onde eu devo começar?&lt;/p&gt;

&lt;p&gt;Sem sombra de dúvidas a primeira decisão a ser feita é sobre o que você quer publicar e qual o seu intuito com o blog. Se você quer publicar apenas por publicar e não está focado em rentabilizar o blog, então deixe de ler essa postagem e corre instalar o wordpress. O que quero dizer com isso é: Alguns assuntos serão muito difíceis de você ganhar uma grana, um exemplo disso seria eu gostar de falar sobre as borboletas do Afeganistão (salve mamonas), quantas pessoas mais estariam interessadas nesse assunto? Percebem o quanto é difícil atingir um público simplesmente porque gosto desse assunto. Mas se o seu intuito é apenas publicar para ser feliz, vai em frente. Quem sabe no domingo o fantástico não faz uma matéria sobre as borboletas do Afeganistão e isso vira moda, difícil, mas o intuito não era ganhar dinheiro não é mesmo?&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-full wp-image-56762 aligncenter&#34; src=&#34;uploads/2016/12/mamonas-mente.gif&#34; alt=&#34;mamonas-mente&#34; width=&#34;250&#34; height=&#34;199&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora se você quer ser o próximo blogueiro de sucesso (odeio esse termo &amp;#8220;sucesso), você precisa encontrar um tema do qual ame falar e ao mesmo tempo que seja algo que outras pessoas queiram saber. Não vai adiantar nada você falar sobre um tema da moda, sendo que não entende nada do assunto. Eu vou falar sobre gastronomia porque vi um monte de vídeo sobre isso bombando no youtube, resolvi que posso fazer uma grana escrevendo sobre isso. Mas nunca fritei um ovo sequer. Seria quase impossível fazer um conteúdo de qualidade desse jeito, a não ser que você tenha um bom dinheiro para contratar jornalistas especializados no assunto e queira somente gerenciar o blog, mas acredito que você não veio aqui para isso. Uma opção seria fazer um blog sobre gastronomia para quem nem sabe fritar um ovo e contar suas experiências, pode ser que dê certo :).&lt;/p&gt;

&lt;p&gt;Bom então vamos ao que interessa. A primeira coisa para você começar um blog, é focar em um assunto, quanto mais focado for o seu blog, mais fácil fazer campanhas no face, google e etc. Agora imagine se você faz um blog sobre política e no meio começa a publicar coisas sobre celebridades por exemplo. Um portal pode fazer isso, abranger vários assuntos, mas um blog, principalmente que está começando, pode ser que seja um fracasso. Imagine os caras que amam política vendo que a Gretchen casou mais uma vez, péssimo né? Além de que para fazer campanha no facebook com assuntos tão variados, você vai gastar uma nota e será muito difícil atingir um público que retorne ao blog, assine newsletter, receba notificações e por ai vai.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;wp-image-56764 aligncenter&#34; src=&#34;uploads/2016/12/red-hands-woman-creative-1.jpg&#34; alt=&#34;red-hands-woman-creative&#34; width=&#34;526&#34; height=&#34;331&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Então vamos focar em um público de exemplo, vamos fazer um blog que fale sobre fotografia, ah mas eu vou postar sobre vídeos e vai dar certo também? Difícil, lembre-se foque, foque e foque. Você está começando, não tente abraçar o Mundo. Mas mesmo focando, nem tudo é um mar de rosas. Se você fizer uma campanha no face para quem gosta de fotografia, irá aparecer tanto gente que realmente fotografa quanto aquela pessoas que só querem ver umas fotos maneiras e nunca pegaram em uma câmera. Mas você pode fazer a campanha no face mega focada também, impulsionando somente para pessoas que curtiram a página da Leica por exemplo. Você sabe o que é Leica? É uma das melhores e mais caras câmeras do Mundo, pode ter certeza que somente fotógrafos curtem essa marca. Viu como fica muito mais fácil com um público focado e seleto? E sem fazer apenas para as borboletas do Afeganistão?&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;wp-image-56763 aligncenter&#34; src=&#34;uploads/2016/12/pexels-photo-164474.jpeg&#34; alt=&#34;pexels-photo-164474&#34; width=&#34;496&#34; height=&#34;414&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pode ter a maior certeza do Mundo que vai demorar para você ter bastante acessos e ver o analytics pulando de alegria, mas será muito mais fácil chegar em um resultado satisfatório assim do que falando sobre tudo e nada ao mesmo tempo. Além de que banners do adsense dão muito pouco dinheiro por visualizações, tendo um público focado você pode vender campanhas para lojas de fotografia, no nosso exemplo ai, e ganhar muito mais do que os míseros centavos do adsense.&lt;/p&gt;

&lt;p&gt;E aí, você tem experiências para contar? Manda ver ai nos comentários&lt;/p&gt;

&lt;p&gt;Valeu!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Código Limpo – Escreva seu código hoje sem esquecer da manutenção de amanhã</title>
      <link>http://tableless.com.br/codigo-limpo-escreva-seu-codigo-hoje-sem-esquecer-da-manutencao-de-amanha/</link>
      <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/codigo-limpo-escreva-seu-codigo-hoje-sem-esquecer-da-manutencao-de-amanha/</guid>
      <description>

&lt;p&gt;Você provavelmente já precisou entender o código de outra pessoa. Seja para realizar uma alteração, corrigir um &lt;em&gt;bug&lt;/em&gt; ou até mesmo para procurar um comportamento específico.&lt;/p&gt;

&lt;p&gt;Talvez você até tenha feito isso no seu próprio código!&lt;/p&gt;

&lt;p&gt;Agora pense por alguns segundos: O código foi &lt;strong&gt;fácil&lt;/strong&gt; de entender?&lt;/p&gt;

&lt;p&gt;Você, &lt;strong&gt;só pela leitura&lt;/strong&gt;, conseguiu identificar o método exato que precisava alterar?&lt;/p&gt;

&lt;p&gt;Se a resposta for positiva: ótimo! O programador fez a sua parte e conseguiu deixar o código limpo (ou pelo menos fez um código simples o suficiente para ser entendido).&lt;/p&gt;

&lt;p&gt;Mas se a resposta for &amp;#8220;mais ou menos&amp;#8221;, ou &amp;#8220;nem um pouco&amp;#8221;, é aí que mora o problema.&lt;/p&gt;

&lt;p&gt;E essa é a explicação para o título deste post.&lt;/p&gt;

&lt;h2 id=&#34;mas-por-que-isso-acontece&#34;&gt;Mas por que isso acontece?&lt;/h2&gt;

&lt;p&gt;Quando aprendemos a programar, estamos mais preocupados em aprender a lógica de programação e fazer as coisas funcionarem do que com a estrutura e leitura do código. E isso é totalmente normal, afinal, estamos iniciando.&lt;/p&gt;

&lt;p&gt;Porém, na minha opinião, o problema começa quando evoluímos em nossa carreira (começamos a trabalhar em projetos maiores e ter mais responsabilidades) e &lt;strong&gt;não evoluímos o nosso código na mesma medida&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Aí começam a aparecer os famosos &amp;#8220;códigos espaguete&amp;#8221; ou mesmo aquele monte de variáveis que não ajudam em nada a entender o código.&lt;/p&gt;

&lt;p&gt;Leia o código abaixo e responda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consegue identificar qual método você precisa chamar primeiro pra cadastrar um novo cliente?&lt;/li&gt;
&lt;li&gt;Percebe como os métodos estão sem ordem nenhuma e um chama o outro internamente, formando um &amp;#8220;espaguete&amp;#8221;?&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class CadastroCliente
{
    public function enviarEmail()
    {
        $mailer = new Mailer();
        $mailer-&amp;gt;send();
    } 
    
    public function gerarSenha()
    {
        // codigo para gerar senha
        
        return $senha;
    }
    
    public function atualizar($cliente)
    {
        $model = new ClienteModel();
        $model-&amp;gt;confirmar($cliente);
    }

    public function criar($cliente)
    {
        $senha = $this-&amp;gt;gerarSenha();
        
        $model = new ClienteModel();
        $model-&amp;gt;add($cliente, $senha);

        $this-&amp;gt;enviarEmail();
    }
    
    public function confirmarCadastro($cliente)
    {
        $this-&amp;gt;enviarEmail();
        $this-&amp;gt;atualizar($cliente);
    }
}
&lt;/pre&gt;

&lt;p&gt;O problema dessa evolução tardia é que somente depois de muito tempo o desenvolvedor vai descobrir que poderia ter feito melhor. Note que começar escrevendo códigos confusos não é o problema, mas sim o tempo necessário para entender que essa evolução é importante.&lt;/p&gt;

&lt;p&gt;E então, ao perceber que o código não está dos melhores, o desenvolvedor pode escolher entre:&lt;/p&gt;

&lt;p&gt;1 &amp;#8211; Deixar pra lá, por que o seu código sempre funciona&lt;/p&gt;

&lt;p&gt;2 &amp;#8211; Começar a melhorar o seu código pensando na qualidade do software&lt;/p&gt;

&lt;h2 id=&#34;código-funcionando-next&#34;&gt;Código funcionando! Next!&lt;/h2&gt;

&lt;p&gt;A sensação de ver nosso código funcionando é ótima! Quem não gosta?&lt;/p&gt;

&lt;p&gt;Só que muita gente para por aí, nem lembra que por trás daquele comportamento existem classes, métodos, variáveis, etc.&lt;/p&gt;

&lt;p&gt;Mas será que esse código está legível? As classes possuem responsabilidades definidas? Os métodos estão coerentes?&lt;/p&gt;

&lt;p&gt;Pois é, existem vários pontos que precisamos estar atentos para que nosso código seja limpo.&lt;/p&gt;

&lt;p&gt;Mas apesar de parecer muito complicado, na verdade podemos começar da forma mais simples possível: comece aos poucos e vá sempre buscando deixá-lo mais legível. Não tem como você fazer o melhor código de primeira.&lt;/p&gt;

&lt;p&gt;Para exemplificar essa transformação de um código difícil de ser lido em um código limpo, veja o trecho abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $vl;
    private $prods;

    public function adic($prods)
    {
        foreach ($prods as $prod) {
            if ($prod-&amp;gt;getCat() == &#39;P&#39;) {
                $vl = $prod-&amp;gt;getVl() * 0.75;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            } elseif ($prod-&amp;gt;getCat() == &#39;B&#39;) {
                $vl = 0;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            } elseif ($prod-&amp;gt;getCat() == &#39;&#39;) {
                $vl = $prod-&amp;gt;getVl();
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Você consegue identificar o que são aqueles valores (P e B) ou até mesmo entender rapidamente o que o método faz?&lt;/p&gt;

&lt;p&gt;Vamos deixá-lo um pouco mais claro:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos)
    {
        foreach ($produtos as $produto) {
            if ($produto-&amp;gt;getCategoria() == &#39;PROMOCAO&#39;) {
                $valor = $produto-&amp;gt;getValor() * 0.75;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;BRINDE&#39;) {
                $valor = 0;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;&#39;) {
                $valor = $produto-&amp;gt;getValor();
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Agora já dá pra entender mais rápido o que o método faz: adicionar um produto no carrinho e acrescenta o valor do produto no valor total.&lt;/p&gt;

&lt;p&gt;Mas dá pra melhorar ainda mais:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos)
    {   
        foreach ($produtos as $produto) {
            $valor = $produto-&amp;gt;getValor();
            
            if ($produto-&amp;gt;getCategoria() == &#39;PROMOCAO&#39;) {
                $valor = $produto-&amp;gt;getValor() * 0.75;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;BRINDE&#39;) {
                $valor = 0;
            }

            $this-&amp;gt;valorTotal += $valor;
            $this-&amp;gt;produtos[] = $produto;
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Notou que as linhas que atualizam o valor total e os produtos internos da classe se repetiam a cada &lt;code&gt;if&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Já que se repetem, podemos tirar de dentro dos &lt;code&gt;ifs&lt;/code&gt;, pois ele sempre será executado independente da condição.&lt;/p&gt;

&lt;p&gt;Além disso, podemos inicializar a variável &lt;code&gt;$valor&lt;/code&gt; com o valor do produto, e de acordo com a categoria do produto atualizamos essa variável. Assim conseguimos eliminar a utilização de um &lt;code&gt;if&lt;/code&gt; desnecessário verificando se o produto não tem categoria.&lt;/p&gt;

&lt;p&gt;Agora o toque final:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos = [])
    {   
        foreach ($produtos as $produto) {
            $this-&amp;gt;valorTotal += $this-&amp;gt;calcularValorProduto($produto);
            $this-&amp;gt;produtos[] = $produto;
        }
    }

    private function calcularValorProduto(Produto $produto)
    {
        if ($produto-&amp;gt;getCategoria() == Produto::CATEGORIA_BRINDE) {
            return 0;
        }

        if ($produto-&amp;gt;getCategoria() == Produto::CATEGORIA_PROMOCAO) {
            return $produto-&amp;gt;getValor() * 0.75;
        }

        return $produto-&amp;gt;getValor();
    }
}
&lt;/pre&gt;

&lt;p&gt;Pronto, o código agora ficou mais simples e os métodos com uma únicaresponsabilidade definida.&lt;/p&gt;

&lt;p&gt;Veja as alterações realizadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Agora o cálculo do valor fica em um método privado da classe, para não ficar tudo no método &lt;code&gt;adicionarProduto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Foi adicionado um &lt;em&gt;Type Hint&lt;/em&gt; no método &lt;code&gt;calcularValorProduto&lt;/code&gt; para garantir que a variável &lt;code&gt;$produto&lt;/code&gt; seja um objeto da classe &lt;code&gt;Produto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No método de cálculo, trocamos o &lt;code&gt;elseif&lt;/code&gt; por dois &lt;code&gt;ifs&lt;/code&gt; separados: isso facilita a separação por blocos de código, e consequentemente a leitura&lt;/li&gt;
&lt;li&gt;Ainda no método de cálculo, ao invés de inicializar a variável &lt;code&gt;$valor&lt;/code&gt; com o valor do produto, foram adicionados &lt;code&gt;returns&lt;/code&gt; em cada condição: isso possibilita o método retornar o valor mais rapidamente, já que não é mais necessário executar o método inteiro&lt;/li&gt;
&lt;li&gt;Foram trocados os valores fixos das categorias por constantes da classe &lt;code&gt;Produto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Objetivo alcançado: conseguimos deixar o código mais descritivo, separar os métodos e manter o mesmo funcionamento. E o mais importante: tudo isso foi feito de forma incremental.&lt;/p&gt;

&lt;p&gt;Talvez depois de um tempo outras melhorias possam sem aplicadas, mas o código já melhorou o suficiente por enquanto.&lt;/p&gt;

&lt;p&gt;Aliás, isso é o que todos nós deveríamos fazer: ao invés de você tentar abraçar o mundo e deixar seu código perfeito, tente deixá-lo o mais simples possível (e que atenda os requisitos, claro), e vá aperfeiçoando com o tempo.&lt;/p&gt;

&lt;p&gt;Até por que provavelmente você terá que realizar alterações nele depois, e aí você pode &amp;#8220;aparar as arestas&amp;#8221; e ir deixando cada vez melhor.&lt;/p&gt;

&lt;p&gt;Só não deixe seu código para trás sem revisá-lo antes, isso com certeza vai deixar alterações futuras muito mais custosas de serem feitas.&lt;/p&gt;

&lt;h2 id=&#34;certo-mas-e-se-o-prazo-estiver-apertado&#34;&gt;Certo, mas e se o prazo estiver apertado?&lt;/h2&gt;

&lt;p&gt;No ciclo de desenvolvimento de software, sempre existem os casos em que o prazo é bem apertado.&lt;/p&gt;

&lt;p&gt;Apesar de entender que precisamos de tempo suficiente para sempre testar nosso código e escrevê-lo bem, algumas vezes realmente não há saída: precisamos entregar e ponto.&lt;/p&gt;

&lt;p&gt;Nestes casos, precisamos sempre colocar na balança se vale a pena gastar mais tempo para projetar melhor a arquitetura, testar todas as nossas classes e revisar o código.&lt;/p&gt;

&lt;p&gt;O que não pode acontecer é utilizar estes argumentos como desculpas para não entregar a solução.&lt;/p&gt;

&lt;p&gt;Se há espaço para refinar o código e testá-lo, então eu recomendo que faça. Você vai agradecer um dia por ter feito isso.&lt;/p&gt;

&lt;p&gt;Caso a entrega seja de muita urgência, desenvolva de uma forma que conseguirá entregar no prazo. Mas também não use isso como desculpa para escrever qualquer código!&lt;/p&gt;

&lt;p&gt;Fique atento a boas práticas durante o desenvolvimento acelerado, seja nomeando suas variáveis e métodos melhor, quebrando os comportamento em classes menores, etc.&lt;/p&gt;

&lt;p&gt;Observe uma alteração pequena usando o exemplo anterior, mas que vai ajudar a tornar o código muito mais simples:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $vl;
    private $prods;

    // Adiciona um produto no carrinho
    // Passar um array de produtos
    public function adic($prods)
    {
        foreach ($prods as $prod) {
            // Categoria do produto -&amp;gt; P = Promocao
            if ($prod-&amp;gt;getCat() == &#39;P&#39;) {
                $vl = $prod-&amp;gt;getVl() * 0.75;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
                
            // Categoria do produto -&amp;gt; B = Brinde
            } elseif ($prod-&amp;gt;getCat() == &#39;B&#39;) {
                $vl = 0;
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            
            // Sem categoria, utilizar o valor do produto
            } elseif ($prod-&amp;gt;getCat() == &#39;&#39;) {
                $vl = $prod-&amp;gt;getVl();
                $this-&amp;gt;vl += $vl;
                $this-&amp;gt;prods[] = $prod;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Você acha que esses comentários são importantes para o código? E se um dia algum outro desenvolvedor alterar as siglas das categorias, você acha que os comentários serão atualizados?&lt;/p&gt;

&lt;p&gt;E se ao invés de adicionar comentários, você deixasse explícito o que cada variável e método faz por meio do nome deles?&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;class Carrinho
{
    private $valorTotal;
    private $produtos;

    public function adicionarProduto($produtos)
    {
        foreach ($produtos as $produto) {
            if ($produto-&amp;gt;getCategoria() == &#39;PROMOCAO&#39;) {
                $valor = $produto-&amp;gt;getValor() * 0.75;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;BRINDE&#39;) {
                $valor = 0;
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            } elseif ($produto-&amp;gt;getCategoria() == &#39;&#39;) {
                $valor = $produto-&amp;gt;getValor();
                $this-&amp;gt;valorTotal += $valor;
                $this-&amp;gt;produtos[] = $produto;
            }
        }
    } 
}
&lt;/pre&gt;

&lt;p&gt;Veja que todos os comentários foram removidos. Ao invés de escrever o comportamento da classe nos comentários, os métodos e variáveis já dizem o que fazem e para o que servem.&lt;/p&gt;

&lt;p&gt;Por isso, por mais que o prazo seja apertado, sempre há um jeito de deixar o código mais limpo.&lt;/p&gt;

&lt;p&gt;Só não deixe de entregar o seu trabalho no prazo tentando fazer o código perfeito, isso talvez não valha tanto a pena no final.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Você provavelmente percebeu o valor de escrever código limpo.&lt;/p&gt;

&lt;p&gt;Isso no longo prazo faz uma enorme diferença, e é uma responsabilidade que todos nós programadores precisamos estar cientes. Não basta apenas escrever código, você tem que sempre pensar que outras pessoas também irão trabalhar nele.&lt;/p&gt;

&lt;p&gt;Por isso sempre procure aperfeiçoar suas habilidades não só para aprender outras linguagens, mas para melhorar o seu código em si, independente da linguagem que você trabalhe.&lt;/p&gt;

&lt;p&gt;E se você quer aprender como escrever código limpo, existem alguns livros que irão explicar os principais conceitos e técnicas.&lt;/p&gt;

&lt;p&gt;Um deles que eu recomendo é o &lt;a href=&#34;https://www.amazon.com.br/C%C3%B3digo-Limpo-Habilidades-Pr%C3%A1ticas-Softwar/dp/8576082675/ref=sr_1_1?ie=UTF8&amp;qid=1467162877&amp;sr=8-1&amp;keywords=c%C3%B3digo+limpo&#34; target=&#34;_blank&#34;&gt;Código Limpo, do Robert C. Martin (Uncle Bob)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Além disso, existem algumas práticas para auxiliar no projeto de classes e na implementação dos métodos, como &lt;em&gt;SOLID&lt;/em&gt; e &lt;em&gt;Object Calisthenics&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por fim, esta é a minha visão sobre qualidade de código, se você tiver outro ponto de vista ou algum complemento, escreva nos comentários!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lodash ou Underscore? Talvez, nenhum!</title>
      <link>http://tableless.com.br/lodash-ou-underscore-talvez-nenhum/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/lodash-ou-underscore-talvez-nenhum/</guid>
      <description>

&lt;p&gt;Durante os últimos anos, bibliotecas como &lt;a href=&#34;http://underscorejs.org&#34;&gt;Underscore&lt;/a&gt; e &lt;a href=&#34;https://lodash.com&#34;&gt;lodash&lt;/a&gt;, encontraram seu espaço no cinto de utilidades de muitos programadores JavaScript.&lt;/p&gt;

&lt;p&gt;Embora essas bibliotecas ajudem a escrever e até facilitar a sua vida em partes do seu código, não necessariamente, esse código, fica simples ou de fácil entendimento. Quem estiver lendo ou mantendo o código será obrigado a, além de conhecer a linguagem e sua biblioteca padrão, também conhecer a biblioteca de utilitários que está sendo usada.&lt;/p&gt;

&lt;p&gt;Bibliotecas vem e vão, e todo mundo tem sua favorita. Qual é a ordem de argumentos para essa função &lt;em&gt;map()&lt;/em&gt;? De qual biblioteca que essa função vem? &lt;em&gt;Underscore&lt;/em&gt; (o eterno favorito), &lt;em&gt;lodash&lt;/em&gt; (o versátil e mais rápido irmão mais novo), &lt;em&gt;Ramda&lt;/em&gt; (o primo que tem uma abordagem mais funcional, que tem todos os argumentos começando do lado direito), ou qualquer abstração legal que você encontrar hoje em dia?&lt;/p&gt;

&lt;p&gt;Se você estiver em um time, quais bibliotecas favoritas você escolheria? E se eu te disser, que você pode escolher a biblioteca padrão do JavaScript?&lt;/p&gt;

&lt;p&gt;Quando você escreve código usando a biblioteca padrão de funções, você está tornando ele mais fácil para usar, entender e manter futuramente (aliás, pode ser você essa pessoa, daqui uns meses, quem sabe?).&lt;/p&gt;

&lt;p&gt;Tudo bem, pode ser que você tenha que digitar um pouco mais para atingir a mesma funcionalidade, mas, desde quando, a velocidade que escrevemos código, é o gargalo para criar e manter um bom software? 😉&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;É mais fácil de recuperar uma não-abstração do que uma abstração errada &amp;#8211; &lt;a href=&#34;https://twitter.com/sebmarkbage&#34;&gt;Sebastian Markbåge&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;É muito mais fácil refatorar código verboso com poucas abstrações, do que códigos resumidos com uma abstração errada. Quando você começa a ver os padrões no seu código, repetidos por toda a parte, é hora de abstrair, você tem uma idéia de qual abstração correta você deve fazer, e provavelmente, vai acabar criando uma que valha a pena, mesmo contando com toda a sobrecarga que toda abstração adiciona.&lt;/p&gt;

&lt;p&gt;JavaScript está evoluindo, e as novas edições, ES2015 e ES2016 (antes conhecidas como ES6 e ES7) trazem novas possibilidades, e ferramentas como Babel, deixam isso ainda mais fácil de se usar hoje em dia. Com isso em mãos, essas bibliotecas de funções utilitárias ficam obsoletas.&lt;/p&gt;

&lt;p&gt;Ótimos recursos para aprender mais sobre as novas funções, a página em inglês, &lt;a href=&#34;https://babeljs.io/docs/learn-es2015/&#34;&gt;Learn ES2015&lt;/a&gt; no site do Babel e o livro, em inglês, &lt;a href=&#34;https://leanpub.com/understandinges6&#34;&gt;Understanding ECMAScript 6&lt;/a&gt;, escrito pelo &lt;a href=&#34;https://twitter.com/slicknet&#34;&gt;Nicholas C. Zakas&lt;/a&gt;. Aprender e utilizar todos os poderosos recursos do JavaScript te dá uma segurança futura, pois elas terão vida mais longa do que a biblioteca do momento.&lt;/p&gt;

&lt;p&gt;Mas não estou dizendo que não há espaço para bibliotecas de utilitários. Eu só estou dizendo que muitas das funções que eram essenciais para nós sermos produtivos quando escrevíamos ES3, podem ser escritas nativamente usando os recursos padrões do JavaScript.&lt;/p&gt;

&lt;p&gt;Talvez você não precise de &lt;em&gt;lodash&lt;/em&gt; ou &lt;em&gt;Underscore&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;exemplos&#34;&gt;Exemplos&lt;/h2&gt;

&lt;p&gt;Esses exemplos demonstram funcionalidades do ES5.1, ES2015 e ES2016, ficaram tão simples que você não precisa de uma biblioteca externa mais.&lt;/p&gt;

&lt;h2 id=&#34;o-que-eu-preciso-para-usá-los-hoje-em-dia&#34;&gt;O que eu preciso para usá-los hoje em dia?&lt;/h2&gt;

&lt;p&gt;ES5 é suportado atualmente em todos os navegadores e no Node.js. Exemplos usando ES2015 e ES2016, podem ser compilados para ES5 usando Babel. É muito simples integrar o Babel no seu sistema, quase todas as ferramentas de automação hoje em dia, tem uma integração oficial. Se você precisar dar suporte para navegadores antigos (IE8), você pode utilizar a biblioteca &lt;a href=&#34;https://github.com/es-shims/es5-shim&#34;&gt;es-shim&lt;/a&gt;, que traz quase todos os polyffils para ES5.&lt;/p&gt;

&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;

&lt;h4 id=&#34;iteração&#34;&gt;Iteração&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;_.each(array, fn)&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;array.forEach(fn)
&lt;/pre&gt;

&lt;h4 id=&#34;map&#34;&gt;Map&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;_.map(array, fn)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;array.map(fn)
&lt;/pre&gt;

&lt;h4 id=&#34;usar-uma-função-para-acumular-o-valor-de-um-array-da-esquerda-para-a-direita&#34;&gt;Usar uma função para acumular o valor de um array (da esquerda para a direita)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;_.reduce(array, fn, init)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.reduce(fn, init)
&lt;/pre&gt;

&lt;h4 id=&#34;usar-uma-função-para-acumular-o-valor-de-um-array-da-direita-para-a-esquerda&#34;&gt;Usar uma função para acumular o valor de um array (da direita para a esquerda)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.reduceRight(array, fn, init)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.reduceRight(fn, init)
&lt;/pre&gt;

&lt;h4 id=&#34;testar-se-todos-os-elementos-de-um-array-passam-em-uma-operação&#34;&gt;Testar se todos os elementos de um array passam em uma operação&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.every(array, fn)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.every(fn)
&lt;/pre&gt;

&lt;h4 id=&#34;testar-se-um-dos-elementos-de-um-array-passam-em-uma-operação&#34;&gt;Testar se um dos elementos de um array passam em uma operação&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.some(array, fn)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.some(fn)
&lt;/pre&gt;

&lt;h4 id=&#34;achar-um-valor-em-um-array&#34;&gt;Achar um valor em um array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.find(array, fn)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.find(fn)
&lt;/pre&gt;

&lt;h4 id=&#34;pegar-uma-propriedade-de-cada-elemento-do-array&#34;&gt;Pegar uma propriedade de cada elemento do array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.pluck(array, prop)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.map(value =&amp;gt; value[prop])
&lt;/pre&gt;

&lt;h4 id=&#34;verificar-se-o-array-contém-o-elemento&#34;&gt;Verificar se o array contém o elemento&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.includes(array, el)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2016&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.includes(el)
&lt;/pre&gt;

&lt;h4 id=&#34;convertendo-um-objeto-array-like-em-array&#34;&gt;Convertendo um objeto array-like em array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.toArray(arguments)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;[...arguments]
&lt;/pre&gt;

&lt;h4 id=&#34;criando-uma-cópia-do-array-e-removendo-todos-os-valores-falsos&#34;&gt;Criando uma cópia do array e removendo todos os valores falsos&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.compact(array)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.filter(Boolean)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.filter(x =&amp;gt; !!x)
&lt;/pre&gt;

&lt;h4 id=&#34;criando-uma-cópia-do-array-e-removendo-itens-duplicados&#34;&gt;Criando uma cópia do array e removendo itens duplicados&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.uniq(array)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;[...new Set(array)]
&lt;/pre&gt;

&lt;h4 id=&#34;achando-o-index-de-um-valor-no-array&#34;&gt;Achando o index de um valor no array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.indexOf(array, val)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;array.indexOf(val)
&lt;/pre&gt;

&lt;h4 id=&#34;achar-o-index-de-um-valor-no-array-baseado-em-uma-operação&#34;&gt;Achar o index de um valor no array baseado em uma operação&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.findIndex([4, 6, 7, 12], numPrimo);
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;[4, 6, 7, 12].findIndex(numPrimo);
&lt;/pre&gt;

&lt;h4 id=&#34;criar-um-array-com-n-números-começando-do-x&#34;&gt;Criar um array com N números, começando do X&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.range(x, x + n)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Array.from(Array(n), (v, k) =&amp;gt; k + x)
&lt;/pre&gt;

&lt;h3 id=&#34;objetos&#34;&gt;Objetos&lt;/h3&gt;

&lt;h4 id=&#34;nomes-de-todas-as-propriedades-enumeráveis-do-próprio-objeto&#34;&gt;Nomes de todas as propriedades enumeráveis do próprio objeto&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.keys(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.keys(object)
&lt;/pre&gt;

&lt;h4 id=&#34;número-de-chaves-em-um-objeto&#34;&gt;Número de chaves em um objeto&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.size(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.keys(object).length
&lt;/pre&gt;

&lt;h4 id=&#34;nome-de-todas-as-propriedades-enumeráveis-em-array&#34;&gt;Nome de todas as propriedades enumeráveis em array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.allKeys(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;[...Reflect.enumerate(object)]
&lt;/pre&gt;

&lt;h4 id=&#34;valores&#34;&gt;Valores&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.values(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.keys(object).map(key =&amp;gt; object[key])
&lt;/pre&gt;

&lt;h4 id=&#34;criar-um-novo-objeto-passando-o-prototype-e-propriedades&#34;&gt;Criar um novo objeto passando o &lt;em&gt;prototype&lt;/em&gt; e propriedades&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.create(proto, prop)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.assign(Object.create(proto), prop)
&lt;/pre&gt;

&lt;h4 id=&#34;criar-um-novo-objeto-a-partir-da-mescla-de-suas-propriedades&#34;&gt;Criar um novo objeto a partir da mescla de suas propriedades&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.assign({}, source, { a: false })
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Object.assign({}, source, { a: false })
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2016&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{ ...source, a: false }
&lt;/pre&gt;

&lt;h4 id=&#34;clonando-um-objeto-e-suas-propriedades-cópia-não-recursiva-de-propriedades&#34;&gt;Clonando um objeto e suas propriedades (cópia não recursiva de propriedades)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.extendOwn({}, object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2016&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;{ ...object }
&lt;/pre&gt;

&lt;h4 id=&#34;verificando-se-o-dado-objeto-é-um-array&#34;&gt;Verificando se o dado objeto é um array&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.isArray(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Array.isArray(object)
&lt;/pre&gt;

&lt;h4 id=&#34;verificando-se-o-objeto-é-um-número-finito&#34;&gt;Verificando se o objeto é um número finito&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.isNumber(object) &amp;&amp; _.isFinite(object)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Number.isFinite(object)
&lt;/pre&gt;

&lt;h3 id=&#34;funções&#34;&gt;Funções&lt;/h3&gt;

&lt;h4 id=&#34;vinculando-funções-a-novos-escopos-ou-binding&#34;&gt;Vinculando funções a novos escopos (ou &lt;em&gt;binding&lt;/em&gt;)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;foo(_.bind(function () {
  this.bar();
}, this));
foo(_.bind(object.fun, object));
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;foo(() =&amp;gt; { this.bar(); });
foo(object.fun.bind(object));
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2016&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;foo(() =&amp;gt; { this.bar(); });
foo(::object.fun);
&lt;/pre&gt;

&lt;h3 id=&#34;utilidades&#34;&gt;Utilidades&lt;/h3&gt;

&lt;h4 id=&#34;funções-de-identidade&#34;&gt;Funções de identidade&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.identity
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;value =&amp;gt; value
&lt;/pre&gt;

&lt;h4 id=&#34;uma-função-que-retorna-um-valor&#34;&gt;Uma função que retorna um valor&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.constant(value)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;() =&amp;gt; value
&lt;/pre&gt;

&lt;h4 id=&#34;funções-vazias&#34;&gt;Funções vazias&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.noop
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;() =&amp;gt; {}
&lt;/pre&gt;

&lt;h4 id=&#34;pegar-o-valor-to-tempo-em-milisegundos&#34;&gt;Pegar o valor to tempo em milisegundos&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;_.now()
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES5.1&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Date.now()
&lt;/pre&gt;

&lt;h3 id=&#34;template&#34;&gt;Template&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Underscore&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var greeting = _.template(&#34;hello &amp;lt;%= name %&amp;gt;&#34;);
greeting({ name: &#39;moe&#39; });
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ES2015&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;const greeting = ({ name }) =&amp;gt; `hello ${name}`;
greeting({ name: &#39;moe&#39; });
&lt;/pre&gt;

&lt;h2 id=&#34;resumindo&#34;&gt;Resumindo&lt;/h2&gt;

&lt;p&gt;Cada um dos exemplos demonstra as possibilidades que os novos padrões do JavaScript traz para nosso código do dia-a-dia. Re-aprenda o JavaScript de hoje!&lt;/p&gt;

&lt;p&gt;Se interessou pelo assunto? Quer ver mais posts desse tipo? Alguma sugestão?&lt;/p&gt;

&lt;p&gt;Deixe sua opinião aqui nos comentários ou mande um &lt;em&gt;ping&lt;/em&gt; no &lt;a href=&#34;https://twitter.com/oieduardorabelo&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Artigo traduzido e adaptado de &lt;a href=&#34;https://www.reindex.io/blog/you-might-not-need-underscore/&#34;&gt;You Might Not Need Underscore&lt;/a&gt; escrito por &lt;a href=&#34;https://twitter.com/VilleImmonen&#34;&gt;Ville Immonen&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diga olá ao TypeScript e adeus ao JavaScript</title>
      <link>http://tableless.com.br/diga-ola-ao-typescript-e-adeus-ao-javascript/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/diga-ola-ao-typescript-e-adeus-ao-javascript/</guid>
      <description>

&lt;p&gt;Acredito que este artigo tenha chamado a sua atenção pelo título. Como assim??? adeus ao JavaScript??? A linguagem que está bombando em 2015 (e claro, 2016!). Posso estar sendo um pouco ousado aqui, mas eu tenho em mente que, neste momento, o JavaScript para mim é agora &amp;#8220;linguagem de máquina&amp;#8221; ou o famoso bytecode. Porquê? Bom, você conhece um código javascript minificado+comprimido+&amp;#8221;esculachado&amp;#8221;&amp;#8230; Não estou retirando aqui toda a beleza do JavaScript, e consequente importância, mas na evolução que vem acontecendo a cada dia no mundo web, felizmente chegamos ao ponto que podemos tratar o javascript como uma linguagem tipada e semelhante ao c/java/php e derivados.&lt;/p&gt;

&lt;p&gt;Neste ponto entra uma questão pessoal. Ou você vai adorar TypeScript ou vai achar completamente inútil, já que a sua principal característica é trazer uma &amp;#8220;tipagem&amp;#8221; a linguagem, e no pacote uma forma de programar em javascript mais parecida com Java e suas vertentes. Se você gosta de tipar suas váriaveis e métodos, criar classes, interfaces, usar Orientação a Objetos, o TypeScript foi feito para você e, claro, pode dizer adeus ao JavaScript.&lt;/p&gt;

&lt;p&gt;Lembre-se que TypeScript está sendo usada extensivamente no novo framework Angular2, então se vc ainda não sabe o que é TypeScript, chegou o momento de conhecer.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-typescript&#34;&gt;O que é TypeScript?&lt;/h2&gt;

&lt;p&gt;O TypeScript possibilita que você escreva código JavaScript na forma que foi acostumado quando aprendeu Orientação a Objetos. Você lembra dessas aulas, em criar métodos que retornassem um valor com tipo definido, em criar classes e mais classes para o seu programa, em criar interfaces para desacoplar tudo que quisesse, entre diversas outras técnicas. Com TypeScript tudo isso é possível, porque no final ele pega o seu lindo código cheio de classes e transforma em JavaScript puro, no qual o browser vai compreender. No próprio site é definido que o TypeScript compila para JavaScript, o que é um termo tecnicamente errado &amp;#8211; mas cada vez mais aceito, dado que aquele código &amp;#8220;malucão&amp;#8221; em JavaScript pode ser encarado como código de máquina.&lt;/p&gt;

&lt;p&gt;No exemplo a seguir, criamos uma interface e uma classe, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface IComponent{
    getId() : string;
}

class Button implements IComponent{
    id:string;
    getId():string{
        return this.id;
    }
}&lt;/pre&gt;

&lt;p&gt;Este é um código 100% TypeScript que você pode criar em um editor de textos ou ide, no qual criamos uma interface chamada &lt;code&gt;IComponent&lt;/code&gt;e uma classe que chamamos de &lt;code&gt;Button&lt;/code&gt;. Esta classe implementa a interface e por isso o método &lt;code&gt;getId()&lt;/code&gt; deve ser criado. Se você salvar este arquivo como um arquivo javascript e adicionar em um documento HTML, nenhum &lt;strong&gt;browser&lt;/strong&gt; vai entender isso, quem sabe num futuro distante. Mas isso nao é um problema, pois o TypeScript possui um &amp;#8220;compilador&amp;#8221; que irá pegar o seu código e transformar em algo do tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Button = (function () {
    function Button() {
    }
    Button.prototype.getId = function () {
        return this.id;
    };
    return Button;
})();&lt;/pre&gt;

&lt;p&gt;Este código feioso aí em cima é 100% javascript compreensível em qualquer navegador web. Tem gente que prefere escrever assim, vai entender né. Mas como essa mágica funciona? Vamos explicar a seguir.&lt;/p&gt;

&lt;h2 id=&#34;testando-o-typescript&#34;&gt;Testando o TypeScript&lt;/h2&gt;

&lt;p&gt;Abra uma nova aba no seu browser e acesse: &lt;a href=&#34;http://www.typescriptlang.org/Playground&#34;&gt;http://www.typescriptlang.org/Playground&lt;/a&gt;. O Playground é um pequeno editor TypeScript que, além de checar possíveis erros de sintaxe, também compila automaticamente o código para Javascript, no qual você pode testá-lo. Não omita o Playground no seu aprendizado, ele pode te ajudar muito, como na figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts01.png&#34; alt=&#34;ts01&#34; width=&#34;856&#34; height=&#34;277&#34; class=&#34;alignleft size-full wp-image-52433&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso não queira utilizar o Playground, pode-se instalar o TypeScript no seu ambiente de desenvolvimento através do node. O comando a seguir deve ser compreensível para você:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ npm install typescript -g&lt;/pre&gt;

&lt;p&gt;Após instalar o TypeScript no ambiente, você pode usar o comando &lt;code&gt;tsc&lt;/code&gt; para compilar um arquivo que geralmente está na extensão &lt;code&gt;ts&lt;/code&gt; para &lt;code&gt;js&lt;/code&gt;. Por exemplo, crie o arquivo &lt;code&gt;script.ts&lt;/code&gt; com o código TypeScript descrito anteriormente e execute o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;tsc --out script.js script.ts&lt;/pre&gt;

&lt;p&gt;Editores de texto como o Sublime Text, Atom, VS Code, também tem a capacidade de compilar o arquivo em JavaScript, bastando apenas adicionar plugins relativos ao TypeScript. O &lt;code&gt;VS Code&lt;/code&gt;, em particular, apresentou um bom comportamento frente aos outros, como pode-se perceber na imagem a seguir.&lt;/p&gt;

&lt;div id=&#34;attachment_52436&#34; style=&#34;width: 549px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts02.png&#34; alt=&#34;Visual Studio Code&#34; width=&#34;539&#34; height=&#34;639&#34; class=&#34;size-full wp-image-52436&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Visual Studio Code
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_52438&#34; style=&#34;width: 566px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts03.png&#34; alt=&#34;Sublime Text 2.0.2&#34; width=&#34;556&#34; height=&#34;765&#34; class=&#34;size-full wp-image-52438&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Sublime Text 2.0.2
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Mas neste artigo vamos nos contentar com o TypeScript Playground, e deixe os editores para a sua escolha pessoal (fique a vontade em perguntar como configurar o TypeScript no Sublime, é um pouco mais trabalhoso).&lt;/p&gt;

&lt;p&gt;Agora que apresentamos o TypeScript e suas maravilhas, vamos compreender um pouco mais desta linguagem.&lt;/p&gt;

&lt;h2 id=&#34;tipos-de-variáveis&#34;&gt;Tipos de variáveis&lt;/h2&gt;

&lt;p&gt;Uma das funcionalidades do TypeScript é criar variáveis com tipos definidos, assim como é feito no Java.&lt;/p&gt;

&lt;h3 id=&#34;tipos-primitivos&#34;&gt;Tipos primitivos&lt;/h3&gt;

&lt;p&gt;Existem 3 tipos primitivos que podemos associar a uma variável. As variáveis são criadas através da palavra reservada &lt;code&gt;var&lt;/code&gt;, e o tipo é informado da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var NOMDE_DA_VARIAVEL : TIPO = VALOR
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;boolean: Pode assumir os valores &lt;code&gt;true&lt;/code&gt; ou &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;number: Assume qualquer número, como inteiro ou ponto flutuante.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;string: Tipo texto, pode ser atribuído com aspas simples ou duplas.&lt;/p&gt;

&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arrays no TS podem ser criados através de duas formas. A primeira delas, usa-se &lt;code&gt;[]&lt;/code&gt; na definição do tipo da variável, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:number[] = [1, 2, 3];
&lt;/pre&gt;

&lt;p&gt;A segunda é mais conhecida como &amp;#8220;generics&amp;#8221; e usa &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; para definir o tipo, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:Array&amp;lt;number&amp;gt; = [1,2,3];
&lt;/pre&gt;

&lt;p&gt;Pode-se usar tipos complexos na criação de arrays, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa{
    nome:string;
    constructor(nome:string){
        this.nome = nome;
    }
    sayHello():string{
        return &#34;Hello, &#34; + this.nome;
    }
}

var fulano = new Pessoa(&#34;fulano&#34;);
var beltrano = new Pessoa(&#34;beltrano&#34;);

var pessoas:Pessoa[]= new Array();
pessoas.push(fulano);
pessoas.push(beltrano);

pessoas.forEach( (p:Pessoa)=&amp;gt;
    console.log(p.sayHello())
    );
&lt;/pre&gt;

&lt;p&gt;Neste exemplo, criamos uma classe chamada &lt;code&gt;Pessoa&lt;/code&gt;, adicionando a propriedade &lt;code&gt;nome&lt;/code&gt;, o método construtor e o método &lt;code&gt;sayHello&lt;/code&gt;. Depois, criamos duas variáveis &lt;code&gt;fulano&lt;/code&gt; e &lt;code&gt;beltrano&lt;/code&gt;, e adicionamos à variável &lt;code&gt;pessoas&lt;/code&gt;, que é um array de vaiáveis do tipo &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Após usar o método &lt;code&gt;push&lt;/code&gt; para adicionar as variáveis no array, usamos o método &lt;code&gt;forEach&lt;/code&gt; para percorrer cada item deste array e exibir uma mensagem no console do navegador.&lt;/p&gt;

&lt;h3 id=&#34;enum&#34;&gt;Enum&lt;/h3&gt;

&lt;p&gt;Enums são velhos conhecidos do C#, e usados como &amp;#8220;datatype&amp;#8221;, que podem definir um status por exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red, Green, Blue};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red = 1, Green = 2, Blue = 3};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;Quando criamos um enum, usamos o &amp;#8220;poder&amp;#8221; da ide para que possamos programar de forma mais fácil, conforme a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts04.png&#34; alt=&#34;ts04&#34; width=&#34;697&#34; height=&#34;145&#34; class=&#34;alignleft size-full wp-image-52451&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;any&#34;&gt;Any&lt;/h3&gt;

&lt;p&gt;Uma variável do tipo &lt;code&gt;Any&lt;/code&gt; pode assumir qualquer valor.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var notSure: any = 4;
notSure = &#34;maybe a string instead&#34;;
notSure = false; // okay, definitely a boolean

var list:any[] = [1, true, &#34;free&#34;];
list[1] = 100;
&lt;/pre&gt;

&lt;h3 id=&#34;void&#34;&gt;Void&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;void&lt;/code&gt; é usado para determinar que um método não retorna nenhum valor, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function warnUser(): void {
    alert(&#34;This is my warning message&#34;);
}
&lt;/pre&gt;

&lt;h2 id=&#34;classes&#34;&gt;Classes&lt;/h2&gt;

&lt;p&gt;O conceito de classes no TypeScript é o mesmo de uma classe em qualquer linguagem orientada a objetos. As classes no TypeScript seguem o padrão ECMAScript 6 que em teoria será o &amp;#8220;futuro&amp;#8221; do JavaScript. A classe possui uma sintaxe muito familiar com c#, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return &#34;Hello, &#34; + this.greeting;
    }
}
var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;p&gt;O construtor é definido pela palavra &lt;code&gt;constructor&lt;/code&gt;. Métodos não necessitam da palavra &lt;code&gt;function&lt;/code&gt;, bastando apenas usar ``Acredito que este artigo tenha chamado a sua atenção pelo título. Como assim??? adeus ao JavaScript??? A linguagem que está bombando em 2015 (e claro, 2016!). Posso estar sendo um pouco ousado aqui, mas eu tenho em mente que, neste momento, o JavaScript para mim é agora &amp;#8220;linguagem de máquina&amp;#8221; ou o famoso bytecode. Porquê? Bom, você conhece um código javascript minificado+comprimido+&amp;#8221;esculachado&amp;#8221;&amp;#8230; Não estou retirando aqui toda a beleza do JavaScript, e consequente importância, mas na evolução que vem acontecendo a cada dia no mundo web, felizmente chegamos ao ponto que podemos tratar o javascript como uma linguagem tipada e semelhante ao c/java/php e derivados.&lt;/p&gt;

&lt;p&gt;Neste ponto entra uma questão pessoal. Ou você vai adorar TypeScript ou vai achar completamente inútil, já que a sua principal característica é trazer uma &amp;#8220;tipagem&amp;#8221; a linguagem, e no pacote uma forma de programar em javascript mais parecida com Java e suas vertentes. Se você gosta de tipar suas váriaveis e métodos, criar classes, interfaces, usar Orientação a Objetos, o TypeScript foi feito para você e, claro, pode dizer adeus ao JavaScript.&lt;/p&gt;

&lt;p&gt;Lembre-se que TypeScript está sendo usada extensivamente no novo framework Angular2, então se vc ainda não sabe o que é TypeScript, chegou o momento de conhecer.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-typescript-1&#34;&gt;O que é TypeScript?&lt;/h2&gt;

&lt;p&gt;O TypeScript possibilita que você escreva código JavaScript na forma que foi acostumado quando aprendeu Orientação a Objetos. Você lembra dessas aulas, em criar métodos que retornassem um valor com tipo definido, em criar classes e mais classes para o seu programa, em criar interfaces para desacoplar tudo que quisesse, entre diversas outras técnicas. Com TypeScript tudo isso é possível, porque no final ele pega o seu lindo código cheio de classes e transforma em JavaScript puro, no qual o browser vai compreender. No próprio site é definido que o TypeScript compila para JavaScript, o que é um termo tecnicamente errado &amp;#8211; mas cada vez mais aceito, dado que aquele código &amp;#8220;malucão&amp;#8221; em JavaScript pode ser encarado como código de máquina.&lt;/p&gt;

&lt;p&gt;No exemplo a seguir, criamos uma interface e uma classe, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface IComponent{
    getId() : string;
}

class Button implements IComponent{
    id:string;
    getId():string{
        return this.id;
    }
}&lt;/pre&gt;

&lt;p&gt;Este é um código 100% TypeScript que você pode criar em um editor de textos ou ide, no qual criamos uma interface chamada &lt;code&gt;IComponent&lt;/code&gt;e uma classe que chamamos de &lt;code&gt;Button&lt;/code&gt;. Esta classe implementa a interface e por isso o método &lt;code&gt;getId()&lt;/code&gt; deve ser criado. Se você salvar este arquivo como um arquivo javascript e adicionar em um documento HTML, nenhum &lt;strong&gt;browser&lt;/strong&gt; vai entender isso, quem sabe num futuro distante. Mas isso nao é um problema, pois o TypeScript possui um &amp;#8220;compilador&amp;#8221; que irá pegar o seu código e transformar em algo do tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Button = (function () {
    function Button() {
    }
    Button.prototype.getId = function () {
        return this.id;
    };
    return Button;
})();&lt;/pre&gt;

&lt;p&gt;Este código feioso aí em cima é 100% javascript compreensível em qualquer navegador web. Tem gente que prefere escrever assim, vai entender né. Mas como essa mágica funciona? Vamos explicar a seguir.&lt;/p&gt;

&lt;h2 id=&#34;testando-o-typescript-1&#34;&gt;Testando o TypeScript&lt;/h2&gt;

&lt;p&gt;Abra uma nova aba no seu browser e acesse: &lt;a href=&#34;http://www.typescriptlang.org/Playground&#34;&gt;http://www.typescriptlang.org/Playground&lt;/a&gt;. O Playground é um pequeno editor TypeScript que, além de checar possíveis erros de sintaxe, também compila automaticamente o código para Javascript, no qual você pode testá-lo. Não omita o Playground no seu aprendizado, ele pode te ajudar muito, como na figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts01.png&#34; alt=&#34;ts01&#34; width=&#34;856&#34; height=&#34;277&#34; class=&#34;alignleft size-full wp-image-52433&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso não queira utilizar o Playground, pode-se instalar o TypeScript no seu ambiente de desenvolvimento através do node. O comando a seguir deve ser compreensível para você:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ npm install typescript -g&lt;/pre&gt;

&lt;p&gt;Após instalar o TypeScript no ambiente, você pode usar o comando &lt;code&gt;tsc&lt;/code&gt; para compilar um arquivo que geralmente está na extensão &lt;code&gt;ts&lt;/code&gt; para &lt;code&gt;js&lt;/code&gt;. Por exemplo, crie o arquivo &lt;code&gt;script.ts&lt;/code&gt; com o código TypeScript descrito anteriormente e execute o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;tsc --out script.js script.ts&lt;/pre&gt;

&lt;p&gt;Editores de texto como o Sublime Text, Atom, VS Code, também tem a capacidade de compilar o arquivo em JavaScript, bastando apenas adicionar plugins relativos ao TypeScript. O &lt;code&gt;VS Code&lt;/code&gt;, em particular, apresentou um bom comportamento frente aos outros, como pode-se perceber na imagem a seguir.&lt;/p&gt;

&lt;div id=&#34;attachment_52436&#34; style=&#34;width: 549px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts02.png&#34; alt=&#34;Visual Studio Code&#34; width=&#34;539&#34; height=&#34;639&#34; class=&#34;size-full wp-image-52436&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Visual Studio Code
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_52438&#34; style=&#34;width: 566px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts03.png&#34; alt=&#34;Sublime Text 2.0.2&#34; width=&#34;556&#34; height=&#34;765&#34; class=&#34;size-full wp-image-52438&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Sublime Text 2.0.2
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Mas neste artigo vamos nos contentar com o TypeScript Playground, e deixe os editores para a sua escolha pessoal (fique a vontade em perguntar como configurar o TypeScript no Sublime, é um pouco mais trabalhoso).&lt;/p&gt;

&lt;p&gt;Agora que apresentamos o TypeScript e suas maravilhas, vamos compreender um pouco mais desta linguagem.&lt;/p&gt;

&lt;h2 id=&#34;tipos-de-variáveis-1&#34;&gt;Tipos de variáveis&lt;/h2&gt;

&lt;p&gt;Uma das funcionalidades do TypeScript é criar variáveis com tipos definidos, assim como é feito no Java.&lt;/p&gt;

&lt;h3 id=&#34;tipos-primitivos-1&#34;&gt;Tipos primitivos&lt;/h3&gt;

&lt;p&gt;Existem 3 tipos primitivos que podemos associar a uma variável. As variáveis são criadas através da palavra reservada &lt;code&gt;var&lt;/code&gt;, e o tipo é informado da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var NOMDE_DA_VARIAVEL : TIPO = VALOR
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;boolean: Pode assumir os valores &lt;code&gt;true&lt;/code&gt; ou &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;number: Assume qualquer número, como inteiro ou ponto flutuante.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;string: Tipo texto, pode ser atribuído com aspas simples ou duplas.&lt;/p&gt;

&lt;h3 id=&#34;arrays-1&#34;&gt;Arrays&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arrays no TS podem ser criados através de duas formas. A primeira delas, usa-se &lt;code&gt;[]&lt;/code&gt; na definição do tipo da variável, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:number[] = [1, 2, 3];
&lt;/pre&gt;

&lt;p&gt;A segunda é mais conhecida como &amp;#8220;generics&amp;#8221; e usa &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; para definir o tipo, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:Array&amp;lt;number&amp;gt; = [1,2,3];
&lt;/pre&gt;

&lt;p&gt;Pode-se usar tipos complexos na criação de arrays, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa{
    nome:string;
    constructor(nome:string){
        this.nome = nome;
    }
    sayHello():string{
        return &#34;Hello, &#34; + this.nome;
    }
}

var fulano = new Pessoa(&#34;fulano&#34;);
var beltrano = new Pessoa(&#34;beltrano&#34;);

var pessoas:Pessoa[]= new Array();
pessoas.push(fulano);
pessoas.push(beltrano);

pessoas.forEach( (p:Pessoa)=&amp;gt;
    console.log(p.sayHello())
    );
&lt;/pre&gt;

&lt;p&gt;Neste exemplo, criamos uma classe chamada &lt;code&gt;Pessoa&lt;/code&gt;, adicionando a propriedade &lt;code&gt;nome&lt;/code&gt;, o método construtor e o método &lt;code&gt;sayHello&lt;/code&gt;. Depois, criamos duas variáveis &lt;code&gt;fulano&lt;/code&gt; e &lt;code&gt;beltrano&lt;/code&gt;, e adicionamos à variável &lt;code&gt;pessoas&lt;/code&gt;, que é um array de vaiáveis do tipo &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Após usar o método &lt;code&gt;push&lt;/code&gt; para adicionar as variáveis no array, usamos o método &lt;code&gt;forEach&lt;/code&gt; para percorrer cada item deste array e exibir uma mensagem no console do navegador.&lt;/p&gt;

&lt;h3 id=&#34;enum-1&#34;&gt;Enum&lt;/h3&gt;

&lt;p&gt;Enums são velhos conhecidos do C#, e usados como &amp;#8220;datatype&amp;#8221;, que podem definir um status por exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red, Green, Blue};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red = 1, Green = 2, Blue = 3};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;Quando criamos um enum, usamos o &amp;#8220;poder&amp;#8221; da ide para que possamos programar de forma mais fácil, conforme a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts04.png&#34; alt=&#34;ts04&#34; width=&#34;697&#34; height=&#34;145&#34; class=&#34;alignleft size-full wp-image-52451&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;any-1&#34;&gt;Any&lt;/h3&gt;

&lt;p&gt;Uma variável do tipo &lt;code&gt;Any&lt;/code&gt; pode assumir qualquer valor.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var notSure: any = 4;
notSure = &#34;maybe a string instead&#34;;
notSure = false; // okay, definitely a boolean

var list:any[] = [1, true, &#34;free&#34;];
list[1] = 100;
&lt;/pre&gt;

&lt;h3 id=&#34;void-1&#34;&gt;Void&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;void&lt;/code&gt; é usado para determinar que um método não retorna nenhum valor, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function warnUser(): void {
    alert(&#34;This is my warning message&#34;);
}
&lt;/pre&gt;

&lt;h2 id=&#34;classes-1&#34;&gt;Classes&lt;/h2&gt;

&lt;p&gt;O conceito de classes no TypeScript é o mesmo de uma classe em qualquer linguagem orientada a objetos. As classes no TypeScript seguem o padrão ECMAScript 6 que em teoria será o &amp;#8220;futuro&amp;#8221; do JavaScript. A classe possui uma sintaxe muito familiar com c#, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return &#34;Hello, &#34; + this.greeting;
    }
}
var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;p&gt;O construtor é definido pela palavra &lt;code&gt;constructor&lt;/code&gt;. Métodos não necessitam da palavra &lt;code&gt;function&lt;/code&gt;, bastando apenas usar`&lt;code&gt;. Perceba que, no exemplo apresentado, não definimos visibilidade das propriedades da classe, nem o tipo de retorno do método&lt;/code&gt;greet`. É claro que podemos definir estes parâmetros, conforme o próximo exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    private greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    public greet() : string {
        return &#34;Hello, &#34; + this.greeting;
    }
}

var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;h3 id=&#34;visibilidade-de-métodos-e-propriedades&#34;&gt;Visibilidade de métodos e propriedades&lt;/h3&gt;

&lt;p&gt;Métodos e propriedades de uma classe podem assumir a visibilidade: private, public e protected.&lt;/p&gt;

&lt;h3 id=&#34;herança&#34;&gt;Herança&lt;/h3&gt;

&lt;p&gt;A herança entre uma classe e outra é definida pela palavra &lt;code&gt;extends&lt;/code&gt;. Pode-se sobrecarregar métodos e usar a palavra &lt;code&gt;super&lt;/code&gt; para chamar o método da classe pai, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Animal {
    name:string;
    constructor(theName: string) { this.name = theName; }
    move(meters: number = 0) {
        alert(this.name + &#34; moved &#34; + meters + &#34;m.&#34;);
    }
}

class Snake extends Animal {
    constructor(name: string) { super(name); }
    move(meters = 5) {
        alert(&#34;Slithering...&#34;);
        super.move(meters);
    }
}

class Horse extends Animal {
    constructor(name: string) { super(name); }
    move(meters = 45) {
        alert(&#34;Galloping...&#34;);
        super.move(meters);
    }
}

var sam = new Snake(&#34;Sammy the Python&#34;);
var tom: Animal = new Horse(&#34;Tommy the Palomino&#34;);

sam.move();
tom.move(34);
&lt;/pre&gt;

&lt;p&gt;Neste exemplo usamos o &lt;code&gt;super&lt;/code&gt; da classe &lt;code&gt;Snake&lt;/code&gt; para chamar o método construtor da classe pai &lt;code&gt;Animal&lt;/code&gt;. Se isso não for claro para você, dê uma estudada em OO para que possa compreender melhor, pois estas características são da Orientação em Objetos como um todo, e não do TypeScript.&lt;/p&gt;

&lt;h2 id=&#34;accessors-ou-métodos-get-set&#34;&gt;Accessors (ou métodos get/set)&lt;/h2&gt;

&lt;p&gt;Os Accessors visam proteger as propriedades de uma classe, pois você já deve saber que expor propriedades de uma classe não é algo legal 🙂&lt;/p&gt;

&lt;p&gt;Os accessors do TypeScript são feitos pelas palavras &lt;code&gt;get&lt;/code&gt; e &lt;code&gt;set&lt;/code&gt;, e claro, deixe a sua propriedade como &lt;code&gt;private&lt;/code&gt;. Veja o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa {
    private _password: string;

    get password(): string {
        return this._password;
    }
    
    set password(p : string) {
        if (p != &#34;123456&#34;) {
            this._password = p;
        }
        else {
            alert(&#34;Ei, senha não pode ser 123456&#34;);
        }
    }
}

var p = new Pessoa();
p.password = &#34;123456&#34;; //vai exibir o erro
&lt;/pre&gt;

&lt;h3 id=&#34;métodos-estáticos&#34;&gt;Métodos estáticos&lt;/h3&gt;

&lt;p&gt;É possível criar métodos estáticos definindo a palavra &lt;code&gt;static&lt;/code&gt; antes do método. Existem dezenas de aplicações para métodos estáticos, sendo uma delas não precisar instanciar uma classe, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class SystemAlert{
    
    static alert(message:string):void{
        alert(message);
    }
    
    static warm (message:string):void{
        alert(&#34;Atenção: &#34; + message);
    }
    
    static error(message:string):void{
        alert(&#34;Erro: &#34; + message);
    }
    
}

SystemAlert.alert(&#34;Oi&#34;);
SystemAlert.error(&#34;Não foi possível conectar na base de dados&#34;);
&lt;/pre&gt;

&lt;h2 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;Uma interface define um contrato para a classe. A interface é criada da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface Ponto{
 x: number;
 y: number;
 x: number;
}
&lt;/pre&gt;

&lt;p&gt;Para implementar a interface, usamos &lt;code&gt;implements&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Ponto3d implements Ponto{
   (aqui implementamos x,y,z)
}
&lt;/pre&gt;

&lt;h2 id=&#34;funções&#34;&gt;Funções&lt;/h2&gt;

&lt;p&gt;Vamos exemplificar algumas particularidades de uma função em TypeScript. A função pode ser criada fora de uma classe ou dentro, sendo as observações que faremos a seguir podem ser aplicadas em ambas.&lt;/p&gt;

&lt;p&gt;Tome nota apenas que, em uma classe, não precisamos usar a palavra &lt;code&gt;function&lt;/code&gt; para definir uma função, mas fora da classe precisamos.&lt;/p&gt;

&lt;h3 id=&#34;parâmetros-com-valores-padrão&#34;&gt;Parâmetros com valores padrão&lt;/h3&gt;

&lt;p&gt;Pode-se definir um valor padrão para um parâmetro de uma função da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function buildName(firstName: string, lastName : string = &#34;Smith&#34;) {
}
//ou
class Foo{
  buildName(firstName: string, lastName : string = &#34;Smith&#34;) {
  }
}
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-opcionais&#34;&gt;Parâmetros opcionais&lt;/h3&gt;

&lt;p&gt;Use o caractere &lt;code&gt;?&lt;/code&gt; para definir um parâmetro opcional.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Foo{
  buildName(firstName: string, lastName? : string) {
     if (lastName){
           // blablabla
     }
  }
}
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-rest&#34;&gt;Parâmetros REST&lt;/h3&gt;

&lt;p&gt;Pode-se repassar um array de valores diretamente para um parâmetro. É válido lembrar que este modo só pode ser usado no último parâmetro da sua função. Exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Foo{
 static alertName(firstName: string, ...restOfName: string[]) {
    alert(firstName + &#34; &#34; + restOfName.join(&#34; &#34;));
 }
}
Foo.alertName(&#34;Fulano&#34;,&#34;de&#34;,&#34;Tal&#34;);
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-no-formato-json&#34;&gt;Parâmetros no formato JSON&lt;/h3&gt;

&lt;p&gt;Umas das maiores facilidades do Javascript é repassar parâmetros no formato JSON. Com TypeScript é possível utilizar este mesmo comportamento, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Ponto{
    
    private _x : number = 0;
    private _y : number = 0;
    private _z : number = 0;
    
    constructor( p: {x:number;y:number;z?:number;}){
        this._x = p.x;
        this._y = p.y;
        if (p.z)
            this._z = p.z;
    }
    
    is3d():boolean{
        return this._z!=0;
    }
    
}

var p1 = new Ponto({x:10,y:20});

alert(p1.is3d());
&lt;/pre&gt;

&lt;p&gt;Observe que no construtor da classe &lt;code&gt;Ponto&lt;/code&gt; criamos o parâmetro &lt;code&gt;p&lt;/code&gt; e na definição do seu tipo repassamos um objeto anônimo com três parâmetros, sendo que o parâmetro &lt;code&gt;z&lt;/code&gt; é opcional.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Neste artigo vimos algumas funcionalidades do TypeScript, sendo ainda existem diversos tópicos a serem abordados. Gostaria de lhe encorajar a testar esta nova linguagem, e caso tenha dúvidas, não deixe de comentar abaixo. Sugira também novos artigos sobre TypeScript, estaremos avaliando cada pedido!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Usando GIT para atualizar arquivos no servidor de hospedagem II – Final</title>
      <link>http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem-ii-final/</link>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem-ii-final/</guid>
      <description>

&lt;p&gt;Esta é a segunda e última parte do artigo que explica como fazer um esquema simples para deploy automático usando GIT + Bitbucket&lt;/p&gt;

&lt;p&gt;A mesma configuração pode ser usada em qualquer servidor GIT e qualquer serviço de hospedagem que tenha acesso via ssh e git instalado&lt;/p&gt;

&lt;p&gt;Se você ainda não leu a primeira parte, segue o link: &lt;a href=&#34;http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem&#34;&gt;http://tableless.com.br/usando-git-para-atualizar-arquivos-no-servidor-de-hospedagem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No artigo anterior, criamos as chaves SSH para autenticação no Bitbucket, criamos um repositório GIT e manualmente executamos o comando | git pull | para atualizar o nosso repositório.&lt;/p&gt;

&lt;p&gt;Nessa segunda parte vamos executar o comando para atualização, de forma automatizada, sem precisar acessar o servidor. Vamos fazer um painel de controle para acompanhar os logs de deploy, mostrando se o comando foi executado com sucesso ou se aconteceu algum erro.&lt;/p&gt;

&lt;p&gt;Gostaria de lembrar que essa é uma solução simples, existem várias maneiras de fazer deploy automatizado, eu escolhi fazer usando php e shell_exec, é mais rápido e para projetos simples isso funciona muito bem. O mesmo pode ser feito usando &lt;a href=&#34;https://pt.wikipedia.org/wiki/CGI&#34;&gt;CGI&lt;/a&gt; ou &lt;a href=&#34;https://pt.wikipedia.org/wiki/Shell_script&#34;&gt;Shell Script&lt;/a&gt;, ou ainda você pode usar um serviço online como o heroku.com, ou configurar o Capistrano, ou Jenkins, etc&amp;#8230;&lt;/p&gt;

&lt;h4 id=&#34;o-comando-shell-exec-no-php&#34;&gt;O Comando shell_exec no PHP&lt;/h4&gt;

&lt;p&gt;No manual do php:&lt;/p&gt;

&lt;p&gt;(PHP 4, PHP 5, PHP 7)&lt;/p&gt;

&lt;p&gt;shell_exec — Executa um comando via shell e retorna a saída inteira como uma string&lt;/p&gt;

&lt;p&gt;Isso quer dizer que podemos executar um comando no servidor e ler o retorno desse comando, no nosso caso vamos executar o comando | git pull origin master | o mesmo comando que estávamos executando manualmente lá no servidor, lembra que tínhamos que acessar o servidor via putty, navegar até a pasta do nosso repositório e depois executar um git pull, já que isso é uma tarefa repetitiva, vamos automatizar, é isso que devemos fazer com todos os processos repetitivos.&lt;/p&gt;

&lt;p&gt;Em muitos servidores de hospedagem esse comando é bloqueado por padrão, se estiver bloqueado você vai receber um aviso parecido com esse:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;Warning:  shell_exec() has been disabled for security reasons in /var/www/deploy.php on line 10&lt;/pre&gt;

&lt;p&gt;No meu caso eu abri um chamado no painel da hospedagem, explicando que precisava da liberação para usar em um sistema de deploy automático usando GIT e prontamente fui atendido e o comando foi liberado.&lt;/p&gt;

&lt;p&gt;Vou usar o mesmo repositório que usei para a primeira parte, &lt;a href=&#34;https://bitbucket.org/jzonta/artigo_atualizacao_arquivos&#34;&gt;https://bitbucket.org/jzonta/artigo_atualizacao_arquivos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos Começar, e vamos usar um dos termos da metodologia XP &amp;#8211; Extremme Programing, &amp;#8220;Baby Steps&amp;#8221;, vamos executar todo o processo em pequenos passos, eu vou atualizar o repositório no GIT com todos os passos, você pode acessar e ver todos os commits &amp;#8211; inclusive os errados 🙂 &amp;#8211; é bacana pra ver a evolução do código.&lt;/p&gt;

&lt;p&gt;Vou criar uma pasta chamada deploy e dentro um arquivo chamado index.php, quando executado pelo navegador ele atualiza nosso servidor executando o comando git pull no servidor e imprimindo na tela o resultado do commnado.&lt;/p&gt;

&lt;p&gt;A pasta deploy deve ficar dentro da pasta do seu projeto, você pode ver a estrutura que usei no repositório desse artigo no Bitbucket.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Note que no final do comando git pull eu adicionei &amp;#8220;2&amp;gt;&amp;amp;1&amp;#8221; isso quer dizer que alem das saídas normais eu quero exibir as saídas de erro do nosso comando no servidor.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;index.php&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
    &amp;lt;?php
        $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
        echo $exec;
    ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;A saída na tela é a mesma que aparece quando executamos o comando lá no servidor, veja o exemplo da saída no servidor e no navegador:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/comando_shell_navegador.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51941&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/comando_shell_navegador.jpg&#34; alt=&#34;comando_shell_navegador&#34; width=&#34;657&#34; height=&#34;210&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Lembre-se que para enviar esse arquivo ao servidor você não deve usar o ftp, faça isso utilizando o comando |git pull|, já fizemos isso na primeira parte do artigo.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Já estamos atualizando nosso servidor apenas acessando uma url em nosso navegador \o/, mas não é só isso que queremos, eu quero que essa url seja chamada sempre que eu enviar um push para o repositório, então acesse sua conta no Bitbucket e vamos configurar isso.&lt;/p&gt;

&lt;p&gt;Acesse seu repositório, no menu lateral esquerdo, clique em &amp;#8220;Configurações&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Na tela configurações clique em &amp;#8220;Webhooks&amp;#8221; e depois em &amp;#8220;Add Webhook&amp;#8221;&lt;/p&gt;

&lt;p&gt;No campo &amp;#8220;Title&amp;#8221; adicione um nome de sua preferência e no campo &amp;#8220;URL&amp;#8221; adicione o endereço para a sua url que executa o comando de atualização, no meu caso a URL é &amp;#8220;&lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php&amp;amp;#8221&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php&amp;amp;#8221&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;Mas não podemos deixar essa URL aberta, porque qualquer um poderia acessar e isso iria executar o comando git pull em nosso servidor, então vamos criar um token de autenticação, junto com a URL eu passo um token que mais tarde vamos validar lá no nosso código, então a URL ficaria assim: &lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php?token=d41d8cd98f00b204e9800998ecf8427e&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/index.php?token=d41d8cd98f00b204e9800998ecf8427e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Use este site para gerar seu token: &lt;a href=&#34;http://www.miraclesalad.com/webtools/md5.php&#34;&gt;http://www.miraclesalad.com/webtools/md5.php&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/adicionar_webhook.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51940&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/adicionar_webhook.jpg&#34; alt=&#34;adicionar_webhook&#34; width=&#34;850&#34; height=&#34;439&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, toda vez que enviar um push para o Bitbucket ele vai acessar a URL, e nossa url vai disparar o comando |git pull| no servidor e os arquivos serão atualizados. Nosso deploy já esta funcionando, mas eu também quero visualizar os logs, para ter maior controle sobre oque esta acontecendo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/10/local_git_servidor.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51943&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/10/local_git_servidor.jpg&#34; alt=&#34;local_git_servidor&#34; width=&#34;444&#34; height=&#34;352&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*No seu repositório no Bitbucket, vc pode ver os requests que foram feitos entrando em &amp;#8220;Configurações&amp;#8221;, &amp;#8220;Web Hooks&amp;#8221;, ao lado do Title do seu webhook você clica em &amp;#8220;View Requests&amp;#8221; e pode ver todas as requisições que o Bitbucket fez para a sua URL.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;gravando-log&#34;&gt;Gravando Log&lt;/h4&gt;

&lt;p&gt;Primeiro vamos gerar o texto que queremos gravar no nosso arquivo de log, poderíamos apenas colocar a saída do comando shell_exec, mas vamos adicionar a data, hora e algumas quebras de linha para deixar o nosso log mais legível, veja como ficou o código:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
    &amp;lt;?php
        $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
        echo $exec;

        $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
        $textoLog .= PHP_EOL.$exec;

        $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
        fwrite($arquivoLog, $textoLog);
        fclose($arquivoLog);
    ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Não precisa explicar muito o código php porque é bem simples, se alguém tem dúvida dobre alguma das funções usadas é só dar uma procurada no site do php (&lt;php.net&gt;) ou no google, tem bastante material.&lt;/p&gt;

&lt;p&gt;Se tudo está ocorrendo como planejado, quando você executar novamente seu endereço URL ele vai criar um arquivo chamado log.txt na mesma pasta, e gravar os logs neste arquivo.&lt;/p&gt;

&lt;h4 id=&#34;adicionando-token-de-validação&#34;&gt;Adicionando Token de Validação&lt;/h4&gt;

&lt;p&gt;Vamos deixar nosso deploy um pouco mais seguro. Lembra que na URL que adicionamos lá no webhook do Bitbucket colocamos um token? Então, agora vamos validar esse token.&lt;/p&gt;

&lt;p&gt;Criei uma variavel chamada $token e adicionei a nossa string MD5&lt;/p&gt;

&lt;p&gt;Depois a variavel $tokenValido recebe true se o token enviado via post ou get for igual ao token que configuramos na variavel $token, caso contrário recebe false.&lt;/p&gt;

&lt;p&gt;Depois verificamos se $tokenValido for igual a true executa o deploy se não exibe o log e um botão para atualizar manualmente.&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;pre&amp;gt;
    &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else {
            //Deve exibir o log e um botão para para executar a atualização
        }
    ?&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;implementando-a-leitura-do-log-e-botão-para-atualizar&#34;&gt;Implementando a Leitura do Log e Botão Para Atualizar&lt;/h4&gt;

&lt;p&gt;No código abaixo foi adiciona a implementação que lê o arquivo de log através do comando file() e depois exibe na tela, também foi adicionado um formulário com o botão &amp;#8220;Atualizar&amp;#8221;, caso ocorra alguma falha na atualização automática através do webhook esse botão pode ser utilizado para forçar essa atualização e executar o nosso deploy.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;pre&amp;gt;
        &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else {
        ?&amp;gt;
            &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
                &amp;lt;input type=&#34;hidden&#34; name=&#34;token&#34; value=&#34;d41d8cd98f00b204e9800998ecf8427e&#34;&amp;gt;
                &amp;lt;input type=&#34;submit&#34; value=&#34;Atualizar&#34;&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;?php
        $texto = file(&#39;log.txt&#39;);
        foreach ($texto as $linha) {
            echo $linha;
        }
        }
        ?&amp;gt;
    &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;adicionando-autenticação&#34;&gt;Adicionando Autenticação&lt;/h4&gt;

&lt;p&gt;Tudo funcionando, mas qualquer um pode entrar na nossa URL, visualizar os logs e clicar no botão para atualizar o servidor.&lt;/p&gt;

&lt;p&gt;Então vou implementar uma autenticação simples, iniciando uma sessão e usando a variável $senhaAcesso, então nossas regras seriam as seguintes:&lt;/p&gt;

&lt;p&gt;Se receber o token, faz a validação, se estiver correto, atualiza o nosso servidor&lt;/p&gt;

&lt;p&gt;Se receber a senhaAcesso, faz a validação se estiver correto, mostra o log e o botão para atualizar&lt;/p&gt;

&lt;p&gt;Se não receber o token e nem a senhaAcesso mostra um form solicitando a senha&lt;/p&gt;

&lt;p&gt;Nosso código tem apenas 3 condições no if, eu preferi deixar assim pra ficar mais fácil de entender, as condições separadas para ficar mais fácil de entender:&lt;/p&gt;

&lt;pre&gt;if($tokenValido) {
            // Se o toquem for válido
            // Executa o comando git pull para atualizar o servidor e grava o log
        } else if($_SESSION[&#39;usuarioValido&#39;]) {
            // Se o usuário estiver logado mostra o log e o botão para atualizar
        } else {
            //Se o usuário não estiver logado mostra o formulário para logar
        }
&lt;/pre&gt;

&lt;p&gt;Abaixo o código completo desta etapa:&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
session_start();
$token = &#34;d41d8cd98f00b204e9800998ecf8427e&#34;;
$senhaAcesso = &#39;joaozonta&#39;;

if($_REQUEST[&#39;token&#39;] == $token)
    $tokenValido = true;

if($_REQUEST[&#39;senhaAcesso&#39;] == $senhaAcesso &amp;&amp; empty($_SESSION[&#39;usuarioValido&#39;]))
    $_SESSION[&#39;usuarioValido&#39;] = true;

if($_REQUEST[&#39;sair&#39;])
    unset($_SESSION[&#39;usuarioValido&#39;]);
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Usando GIT para atualizar arquivos no servidor de hospedagem&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;pre&amp;gt;
    &amp;lt;?php
        if($tokenValido) {
            $exec = shell_exec(&#34;git pull origin master 2&amp;gt;&amp;1&#34;);
            echo $exec;

            $textoLog = PHP_EOL.&#34;Data: &#34;.date(d.&#34;/&#34;.m.&#34;/&#34;.Y.&#34; - &#34;.H.&#34;:&#34;.i.&#34;:&#34;.s);
            $textoLog .= PHP_EOL.$exec;

            $arquivoLog = fopen(&#39;log.txt&#39;, &#39;a+&#39;);
            fwrite($arquivoLog, $textoLog);
            fclose($arquivoLog);
        } else if($_SESSION[&#39;usuarioValido&#39;]) {
        ?&amp;gt;
        &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
            &amp;lt;input type=&#34;hidden&#34; name=&#34;token&#34; value=&#34;d41d8cd98f00b204e9800998ecf8427e&#34;&amp;gt;
            &amp;lt;input type=&#34;submit&#34; value=&#34;Atualizar&#34;&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;?php
        if($_SESSION[&#39;usuarioValido&#39;])
            echo &#39;&amp;lt;p&amp;gt;&amp;lt;a href=&#34;index.php?sair=true&#34;&amp;gt;Sair&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&#39;;
            $texto = file(&#39;log.txt&#39;);
            foreach ($texto as $linha) {
                echo $linha;
            }
        } else {
        ?&amp;gt;
        &amp;lt;form action=&#34;index.php&#34; method=&#34;post&#34;&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type=&#34;text&#34; placeholder=&#34;Senha&#34; name=&#34;senhaAcesso&#34;&amp;gt; 
            &amp;lt;/div&amp;gt;
            &amp;lt;input type=&#34;submit&#34; value=&#34;Acessar Sistema&#34;&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;?php
        }
    ?&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h4&gt;

&lt;p&gt;De uma maneira muito simples você pode atualizar seu servidor sem depender de um sistema complexo de deploy e sem muitas configurações.&lt;/p&gt;

&lt;p&gt;Você pode implementar muitas outras opções para deixar o seu sistema cada vez mais completo, pode adicionar um botão para limpar o log ou adicionar o log em um banco de dados. Já imaginou mostrar um combo com os últimos commits realizados e você escolher qual desses commits você quer atualizar no servidor, podendo assim voltar e avançar versões.&lt;/p&gt;

&lt;p&gt;Não falei sobre banco de dados nesse artigo, acho que isso pode ser tratado em outro tópico.&lt;/p&gt;

&lt;p&gt;Você pode ver o exemplo funcionando em &lt;a href=&#34;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/&#34;&gt;http://joaozonta.com.br/artigo_atualizacao_arquivos/deploy/&lt;/a&gt;, use a senha &amp;#8220;joaozonta&amp;#8221;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;No exemplo que esta no ar foram comentadas as linhas que fazem o deploy automático, está apenas simulando o funcionamento.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fique á vontade para entrar em contato para qualquer dúvida, sugestão, crítica ou erro que encontrar nesse artigo.&lt;/p&gt;

&lt;p&gt;João A. Zonta&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.joaozonta.com.br&#34;&gt;joaozonta.com.br&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/joaozontaweb&#34;&gt;@joaozontaweb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;mailto:joao@joaozonta.com.br&#34;&gt;joao@joaozonta.com.br&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando seu próprio servidor HTTP do zero (ou quase) – Parte III</title>
      <link>http://tableless.com.br/criando-seu-proprio-servidor-http-do-zero-ou-quase-parte-iii/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-seu-proprio-servidor-http-do-zero-ou-quase-parte-iii/</guid>
      <description>

&lt;p&gt;Estamos entrando na terceira parte do tutorial, e quem está acompanhando até aqui já sabe então como funciona a comunicação entre cliente e servidor, envio de requisição pelo cliente e recebimento de resposta (na duvida só voltar e releia a &lt;a href=&#34;http://tableless.com.br/criando-seu-proprio-servidor-http-do-zero-ou-quase-parte-i/&#34; title=&#34;Criando seu próprio servidor HTTP do zero (ou quase) – Parte I&#34;&gt;Parte I&lt;/a&gt; e/ou &lt;a href=&#34;http://tableless.com.br/criando-seu-proprio-servidor-http-do-zero-ou-quase-parte-ii/&#34; title=&#34;Criando seu próprio servidor HTTP do zero (ou quase) – Parte II&#34;&gt;Parte II&lt;/a&gt;), porém o que a gente quer é criar o servidor, receber as requisições e enviar a resposta ao cliente.&lt;/p&gt;

&lt;h2 id=&#34;o-servidor&#34;&gt;O Servidor&lt;/h2&gt;

&lt;p&gt;A idéia do servidor é bem simples e estende a do cliente, como assim? Fácil, fácil. no post anterior vimos como criar um socket, no caso, nos criamos um socket já conectado ao site do google, mas o que internamente acontece é, criamos um socket, associamos esse socket a uma porta (lembrando que no caso do cliente a porta aberta é aleatória, so para que o servidor saiba onde deve retornar a resposta) e conectamos ao socket do servidor na porta especifica.&lt;/p&gt;

&lt;p style=&#34;text-align: justify&#34;&gt;
  Agora vamos pensar um pouco, no caso do servidor, temos que criar um socket, associar (bind) a uma porta especifica(para que todos os clientes saibam exatamente onde conectar) e ficamos aguardando alguém solicitar uma conexão (listen), se alguém solicitar conexão nós aceitamos (accept), resumindo o processo, temos como na imagem abaixo:
&lt;/p&gt;

&lt;div style=&#34;width: 369px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://3.bp.blogspot.com/_Gt5b2CU22sM/S4iS4lbeU5I/AAAAAAAAAUU/DBmariOce1o/s400/rzab6503.gif&#34;&gt;&lt;img src=&#34;http://3.bp.blogspot.com/_Gt5b2CU22sM/S4iS4lbeU5I/AAAAAAAAAUU/DBmariOce1o/s400/rzab6503.gif&#34; alt=&#34;&#34; width=&#34;359&#34; height=&#34;324&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Diagrama Cliente/Servidor
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Em Java já temos uma classe pronta que faz isso, que é o ServerSocket, que já cria um socket que está aguardando conexões, o que torna nossa vida bem mais simples, então vamos parar de teoria e ir pro código, para isso criamos uma classe chamada Servidor e nela faremos o seguinte:&lt;/p&gt;

&lt;pre&gt;import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class Servidor {

    public static void main(String[] args) throws IOException {
        /* cria um socket &#34;servidor&#34; associado a porta 8000
          já aguardando conexões
        */
        ServerSocket servidor = new ServerSocket(8000);
        //aceita a primeita conexao que vier
        Socket socket = servidor.accept();
        //verifica se esta conectado  
        if (socket.isConnected()) {
            //imprime na tela o IP do cliente
            System.out.println(&#34;O computador &#34;+ socket.getInetAddress() + &#34; se conectou ao servidor.&#34;);
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;Veja que estamos abrindo a porta 8000 e não a 80, isso por que embora essa seja a porta &amp;#8220;destinada/utilizada&amp;#8221; para servidores HTTP, ela é gerenciada pelo sistema operacional então não poderemos abri-la por enquanto (o SO não permitiria até por que em alguns sistemas linux já existe um servidor HTTP utilizando essa porta, em outros a porta está bloqueada pelo firewall, e teremos que abri-la manualmente mas veremos isso em breve), por isso vamos utilizar outra porta para testes, vamos compilar esse código e coloca-lo em execução, veja que ele permanecerá em execução até que ele receba pelo menos uma solicitação de conexão, que é o que vamos fazer, assim basta abrir o navegador e digitar o endereço &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt; e ir para a página, veja que ao fazer isso sua linha de comando aparecerá a frase:&lt;/p&gt;

&lt;pre&gt;java Server
O computador /0:0:0:0:0:0:0:1 se conectou ao servidor.&lt;/pre&gt;

&lt;p&gt;Veja  que este é o endereço IP do seu computador já no formato IPv6.  Note  que logo em seguida o programa foi finalizado, isso porque nosso servidor não está configurado para múltiplas conexões/requisições, porém vamos fazer isso já já, agora vamos ver qual foi a requisição que nosso navegador fez ao servidor, e para ler a entrada o conceito é o mesmo de ontem, vamos usar o InputStream para ler os dados enviados pelo cliente, então vamos adicionar o seguinte código logo após imprimir o IP:&lt;/p&gt;

&lt;pre&gt;[...]
            //cria um BufferedReader a partir do InputStream do cliente
            BufferedReader buffer = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            System.out.println(&#34;Requisição: &#34;);
            //Lê a primeira linha
            String linha = buffer.readLine();
            //Enquanto a linha não for vazia
            while (!linha.isEmpty()) {
                //imprime a linha
                System.out.println(linha);
                //lê a proxima linha
                linha = buffer.readLine();
            }
[...]
&lt;/pre&gt;

&lt;p&gt;Veja que agora utilizamos um BufferedReader ao invés do Scanner, isto por que o Scanner mesmo após ter terminado de ler a requisição ele espera que a a conexão seja encerrada, a fim de aguardar novas entradas, mas como não é interessante para gente esperar,  vamos usar o Buffer pois podemos verificar se a linha for vazia, se for, simplesmente encerra o programa sem ter que aguardar que a conexão seja encerrada. (Caso seja necessário continuar lendo a entrada antes da conexão encerras é so pegar o InputReader novamente e continuar lendo. Agora ao executarmos nosso servidor,  e acessar a página localhost:8000 no navegador teremos a seguinte saída na linha de comando:&lt;/p&gt;

&lt;pre&gt;java Server
O computador /0:0:0:0:0:0:0:1 se conectou ao servidor.
Requisição: 
GET / HTTP/1.1
Host: localhost:8000
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
DNT: 1
Connection: keep-alive&lt;/pre&gt;

&lt;p&gt;Veja que minha requisição foi originada de um navegador Firefox e que o formato da requisição é muito semelhante do que vimos na primeira parte do tutorial =D. Agora é so fazer o servidor tratar essas informações e devolver uma resposta ao cliente, nesse caso vamos devolver uma página HTML que é o que o navegador espera. Vamos criar duas páginas uma chamada índex.html e outra 404.html, e vamos armazena-las na mesma pasta que está colocando o código fonte do servidor com os seguintes códigos:&lt;/p&gt;

&lt;p&gt;Arquivo index.html&lt;/p&gt;

&lt;h1 id=&#34;funcionou&#34;&gt;Funcionou!!!!&lt;/h1&gt;

&lt;p&gt;Arquivo 404.html&lt;/p&gt;

&lt;pre&gt;Erro 404&lt;/pre&gt;

&lt;h1 id=&#34;a-página-que-você-procura-não-foi-encontrada&#34;&gt;A página que você procura não foi encontrada&lt;/h1&gt;

&lt;p&gt;Por convenção quando alguém solicita o arquivo &amp;#8220;/&amp;#8221; está solicitando a pagina inicial que geralmente é o índex.html, dependendo da configuração do servidor, no nosso caso queremos que nosso servidor retorne o índex.html, se o usuário pedir por qualquer coisa no formato &amp;#8220;/{nome da pagina}.html&amp;#8221; retornaremos esse arquivo, caso o arquivo não exista, retornaremos o erro 404 e a página de erro correspondente.&lt;/p&gt;

&lt;p&gt;Sabemos que a primeira linha da requisição contem o método, o arquivo solicitado e o protocolo separados por um espaço em branco, para o nosso servidor o método não importa, então assumiremos sempre o GET, e o protocolo será sempre o HTTP/1.1, então o que nos importa é o arquivo solicitado. Vamos alterar o nosso código que deve ficar assim:&lt;/p&gt;

&lt;pre&gt;[...]
            /* Lê a primeira linha
             contem as informaçoes da requisição
             */
            String linha = buffer.readLine();
            //quebra a string pelo espaço em branco
            String[] dadosReq = linha.split(&#34; &#34;);
            //pega o metodo
            String metodo = dadosReq[0];
            //paga o caminho do arquivo
            String caminhoArquivo = dadosReq[1];
            //pega o protocolo
            String protocolo = dadosReq[2];
            //Enquanto a linha não for vazia
            while (!linha.isEmpty()) {
                //imprime a linha
                System.out.println(linha);
                //lê a proxima linha
                linha = buffer.readLine();
            }
            //se o caminho foi igual a / entao deve pegar o /index.html
            if (caminhoArquivo.equals(&#34;/&#34;)) {
                caminhoArquivo = &#34;/index.html&#34;;
            }
            //abre o arquivo pelo caminho
            File arquivo = new File(caminhoArquivo);
            byte[] conteudo;
            //status de sucesso - HTTP/1.1 200 OK
            String status = protocolo + &#34; 200 OK\r\n&#34;;
            //se o arquivo não existe então abrimos o arquivo de erro, e mudamos o status para 404
            if (!arquivo.exists()) {
                status = protocolo + &#34; 404 Not Found\r\n&#34;;
                arquivo = new File(&#34;/404.html&#34;);
            }
            conteudo = Files.readAllBytes(arquivo.toPath());
[...]
&lt;/pre&gt;

&lt;p&gt;Veja que ainda não respondemos ao navegados com os dados, apenas montamos uma parte da resposta, para enviar a resposta precisaremos do OutputStream e montar uma string com a estrutura básica da resposta, dai vamos escrever esses dados no stream, semelhante ao que fizemos na parte II do nosso tutorial:&lt;/p&gt;

&lt;pre&gt;//cria um formato para o GMT espeficicado pelo HTTP
            SimpleDateFormat formatador = new SimpleDateFormat(&#34;E, dd MMM yyyy hh:mm:ss&#34;, Locale.ENGLISH);
            formatador.setTimeZone(TimeZone.getTimeZone(&#34;GMT&#34;));
            Date data = new Date();
            //Formata a dara para o padrao
            String dataFormatada = formatador.format(data) + &#34; GMT&#34;;
            //cabeçalho padrão da resposta HTTP
            String header = status
                    + &#34;Location: http://localhost:8000/\r\n&#34;
                    + &#34;Date: &#34; + dataFormatada + &#34;\r\n&#34;
                    + &#34;Server: MeuServidor/1.0\r\n&#34;
                    + &#34;Content-Type: text/html\r\n&#34;
                    + &#34;Content-Length: &#34; + conteudo.length + &#34;\r\n&#34;
                    + &#34;Connection: close\r\n&#34;
                    + &#34;\r\n&#34;;
            //cria o canal de resposta utilizando o outputStream
            OutputStream resposta = socket.getOutputStream();
            //escreve o headers em bytes
            resposta.write(header.getBytes());
            //escreve o conteudo em bytes
            resposta.write(conteudo);
            //encerra a resposta
            resposta.flush();
&lt;/pre&gt;

&lt;p&gt;Agora é só compilar, rodar e ver o resultado =D&lt;/p&gt;

&lt;p&gt;No caso de sucesso deve aparecer como na figura abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/sucesso.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51391&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/sucesso.png&#34; alt=&#34;200 - Sucesso&#34; width=&#34;1279&#34; height=&#34;707&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caso a página não existe, deve aparecer assim:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/09/erro404.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-51392&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/09/erro404.png&#34; alt=&#34;Erro 404&#34; width=&#34;1280&#34; height=&#34;709&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Temos um servidor funcional capaz de fornecer as páginas HTML para os clientes que solicitarem, mas perceba que nosso servidor atende a apenas uma requisição e se encerra logo em seguida, sem contar que nosso método main ficou gigante, mas fique tranquilo, isso será assunto para a próxima e ultima parte do tutorial, onde vamos organizar melhor nosso código, tratar alguns comandos do servidor importantes como manter a conexão viva e trabalhar com múltiplas requisições, conexões simultâneas e afins. Por hora fica o exercício, tente organizar o código a sua maneira, altere como desejar, crie mais páginas HTML e teste e veja se está sendo exibida corretamente, todo código feito até aqui está no final da página e está todo comentado para facilitar o entendimento.&lt;/p&gt;

&lt;p&gt;Espero que estejam gostando e por favor deixem comentários com seu feedback: o que achou, dúvidas, se funcionou ou não, se a abordagem não estiver adequada ou mesmo erros que posso ter cometido pelo caminho.&lt;/p&gt;

&lt;p&gt;Até o próximo post.&lt;/p&gt;

&lt;p&gt;Download do código fonte: &lt;a href=&#34;https://github.com/thiguetta/ServidorHTTP&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/thiguetta/ServidorHTTP&#34;&gt;https://github.com/thiguetta/ServidorHTTP&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando seu próprio servidor HTTP do zero (ou quase) – Parte II</title>
      <link>http://tableless.com.br/criando-seu-proprio-servidor-http-do-zero-ou-quase-parte-ii/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-seu-proprio-servidor-http-do-zero-ou-quase-parte-ii/</guid>
      <description>

&lt;p&gt;Se chegou até aqui é por que você terminou de ler a primeira parte do tutorial (Caso não, leia a &lt;a href=&#34;http://tableless.com.br/criando-seu-proprio-servidor-http-do-zero-ou-quase-parte-i/&#34; title=&#34;Criando seu próprio servidor HTTP do zero (ou quase) – Parte I&#34;&gt;Parte I&lt;/a&gt; ), mas não desista, a parte legal vai chegar, mas antes de começar, falta mais um item de teoria &amp;#8211;  sim eu sei que é chato, mas juro que é importante &amp;#8211; os Sockets.&lt;/p&gt;

&lt;h2 id=&#34;sockets-e-portas&#34;&gt;Sockets e portas&lt;/h2&gt;

&lt;p&gt;Falamos muito de requisições e respostas no último post mas ainda não falamos de conexão e troca de informações. Bom, vamos lá, ligeiramente comentamos um pouco sobre os protocolos de rede, também disse que o protocolo web, o HTTP, está na camada mais alta do TCP/IP, a camada de aplicação, mas para este tutorial pouco importa o que acontece nas camadas inferiores  (se tiver curiosidade procure mais sobre), o que realmente importa é saber que esse tal de TCP/IP é responsável pela conexão entre dois pontos (dois computadores, ou no nosso caso, cliente e servidor).&lt;/p&gt;

&lt;p&gt;Tanto o servidor quanto o cliente são computadores com seus respectivos sistemas operacionais (Linux, Windows, etc) e neles estão em execução diversas aplicações inclusive o navegador e o próprio servidor HTTP, mas nesse monte de aplicações em execução, como vamos saber que estamos enviando e recebendo dados da aplicação certa? precisamos de um algo que identifique cada aplicação (ou pelo menos que identifique uma aplicação que use a rede). Esses pontos de identificação, por assim dizer, são chamados de Socket (ou em português, soquete, tomada, encaixe, enfim algo que tenha uma “abertura/encaixe&amp;#8221; para conexão), resumindo é um ponto que permite conectar alguma coisa, no nosso caso, um outro computador através da rede. Para receber uma conexão, o Socket precisa de uma abertura, essa abertura é o que chamamos de porta, sei que para alguns o conceito parece ser trivial, mas para outros, inclusive profissionais de TI, esses conceitos podem embaralhar a cabeça.&lt;/p&gt;

&lt;p&gt;Resumindo, um Socket é o ponto final da conexão, onde uma porta é aberta para que a aplicação possa enviar ou receber dados, cada porta é identificada por um número que é única no computador, sendo que se tentar abrir uma porta que já estiver sendo usado por outra aplicação, o sistema operacional irá barrar e retornar um erro de acesso negado ou informa que a porta está em uso.&lt;/p&gt;

&lt;p&gt;Existe uma lista de portas conhecidas  que são utilizadas por algumas aplicações, as mais comuns são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;21 FTP &amp;#8211; Transferencia de arquivo&lt;/li&gt;
&lt;li&gt;22 SSH &amp;#8211;  Secure Shell&lt;/li&gt;
&lt;li&gt;25 SMTP &amp;#8211; Envio de Emails&lt;/li&gt;
&lt;li&gt;80 HTTP &amp;#8211; Web&lt;/li&gt;
&lt;li&gt;443 HTTPS &amp;#8211; Web “Segura&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Uma porta ela é única por computador mas não é única na internet, quando você quer efetuar a conexão com uma determinada aplicação rodando em um computador remoto, a identificação do socket é composto pelo endereço de IP ou o nome canônico (domínio &amp;#8211; endereço do site) da máquina destino e a porta que essa aplicação usando, no seguinte formato {Endereço}:{Porta}.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;exemplo.com:80 ou
 192.168.1.224:1000     
&lt;/pre&gt;

&lt;p&gt;A maioria das aplicações que requerem conexão com algum serviço se conectam diretamente as portas especificas que cada uma delas usa, sendo necessário informar apenas o IP (ao menos que seja uma porta que a aplicação não conheça, o serviço está funcionando numa porta atípica ai será necessário informar, veremos mais na parte III). O que isso significa? isso significa que quando você digita o site &lt;a href=&#34;http://www.google.com.br&#34;&gt;http://www.google.com.br&lt;/a&gt; no seu navegador, ele sabe que os servidores HTTP estão executando na porta 80, então não é preciso identificar-la, pois o navegador irá &amp;#8220;converter&amp;#8221; para o formato correto, transparentemente, a mesma coisa acontece quando você acessa um site seguro utilizando &lt;a href=&#34;https://www.seubanco.com.br&#34;&gt;https://www.seubanco.com.br&lt;/a&gt; o navegador sabe que a porta de conexão segura no servidor é a 443, e tentará se conectar nela.&lt;/p&gt;

&lt;p&gt;O que acontece é seu navegador irá se conectar ao site, ele sabe que o servidor está respondendo na porta 80 no endereço tal, para isso é necessário que o navegador abre uma porta local aleatória, para que assim o servidor possa saber para quem responder:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.raywenderlich.com/wp-content/uploads/2011/06/sockets.jpg&#34;&gt;&lt;img src=&#34;http://www.raywenderlich.com/wp-content/uploads/2011/06/sockets.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;200&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto agora que entendemos o conceito (ou pelo menos espero que tenham entendido =D) vamos colocar as mãos na massa.&lt;/p&gt;

&lt;p&gt;Vou partir do principio que já sabem criar uma classe e compilar um programa em Java (caso não lembre-se que o Google é nosso amigo =D). Se preferir, usando o mesmo conceito pode converter a ideia para a linguagem de sua preferência (só não esqueça de compartilhar com a galera =D).&lt;/p&gt;

&lt;p&gt;Vamos lá, vou criar uma classe em Java chamada Cliente, será uma classe simples que vai se conectar a um servidor (neste caso vamos conectar no &lt;a href=&#34;http://google.com.br&#34;&gt;google.com.br&lt;/a&gt;) e ver se ele está conectado, se sim ele imprimirá na tela o IP do servidor.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;import java.io.IOException;
import java.net.Socket;

public class Cliente {
    public static void main(String[] args) throws IOException {
        //cria um socket com o google na porta 80
        Socket socket = new Socket(&#34;google.com.br&#34;, 80);
        //verifica se esta conectado
        if (socket.isConnected()) { 
            //imprime o endereço de IP do servidor
            System.out.println(&#34;Conectado a &#34; + socket.getInetAddress());
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;Ao instanciar um novo objeto da classe Socket com os parâmetros domínio e porta, internamente a máquina virtual Java já abre uma porta aleatória em seu computador e em seguida conecta ao servidor google.com.br na porta 80. Veja que até então não sabemos o endereço de IP do servidor mas ao efetuar a conexão o socket já se atualiza com essa informação. Vamos compilar nossa classe e verificar o resultado que  deve ser algo desse tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ javac Cliente.java
$ java Cliente
Conectado a google.com.br/173.194.118.151&lt;/pre&gt;

&lt;p&gt;Mas isso não é o suficiente queremos trocar informações com o servidor conectado, para isso nosso socket fornece 2 recursos  um para leitura dos dados recebidos (InputStream) do servidor e outro para enviar os dados que queremos para o servidor (OutputStream), é claro que para enviarmos algum dado para o servidor temos que saber como se comunicar com o servidor, como a gente já sabe, o servidor do google é um servidor HTTP que nos fornece as páginas de serviço do Google, certo? então sabemos que o servidor entende o protocolo HTTP. vamos enviar uma requisição HTTP simples a esse servidor e ver o que ele responde.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;/* veja que a requisição termina com \r\n que equivale a &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;
       para encerar a requisição tem uma linha em branco */
    String requisicao = &#34;&#34;
        + &#34;GET / HTTP/1.1\r\n&#34;
        + &#34;Host: www.google.com.br\r\n&#34;
        + &#34;\r\n&#34;;
    //OutputStream para enviar a requisição
    OutputStream envioServ = socket.getOutputStream();
    //temos que mandar a requisição no formato de vetor de bytes
    byte[] b = requisicao.getBytes();
    //escreve o vetor de bytes no &#34;recurso&#34; de envio 
    envioServ.write(b);
    //marca a finalização da escrita
    envioServ.flush();
&lt;/pre&gt;

&lt;p&gt;É claro que apenas isso não basta pois somente estamos enviando a requisição certo?, então precisaremos ler o InputStream logo após enviar os dados para ver o que o servidor responde, vamos facilitar as coisas afinal isto não é C, para ler o que o servidor responde vamos utilizar um Scanner, que ja faz a conversão o Input de bytes para String, assim a gente não tem que tratar esses trecos.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;//cria um scanner a partir do InputStream que vem do servidor
    Scanner sc = new Scanner(socket.getInputStream());
    //enquanto houver algo para ler
    while (sc.hasNext()) {
        //imprime uma linha da resposta
        System.out.println(sc.nextLine());
    }
&lt;/pre&gt;

&lt;p&gt;Agora se executarmos o programa podemos ler o que o servidor nos devolve e exibir na tela, logo teremos um resultado parecido com isso&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;$ javac Cliente.java 
$ java Cliente
Conectado a google.com.br/173.194.118.151 
HTTP/1.1 200 OK
Date: Tue, 17 Jun 2014 23:29:57 GMT
Expires: -1
Cache-Control: private, max-age=0
Content-Type: text/html; charset=ISO-8859-1
Set-Cookie: PREF=ID=fee5bb44e3822528:FF=0:TM=1403047797:LM=1403047797:S=BpVMDbzBHKUgdlRS; expires=Thu, 16-Jun-2016 23:29:57 GMT; path=/; domain=.google.com.br
Set-Cookie: NID=67=CT9hDvtQnKCvGeox_lmn7IjB_gbZ6Z9m7YT2rM1LAw2hVDVbvas16qfTsH1Jc1TRhrynqE-j0fb3EPl_JvjttiV-kqVpJlYjmg7Qd_e8oHcnJM1L2xlHWtlKw2EcomUM; expires=Wed, 17-Dec-2014 23:29:57 GMT; path=/; domain=.google.com.br; HttpOnly
P3P: CP=&#34;This is not a P3P policy! See http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;answer=151657 for more info.&#34;
Server: gws
X-XSS-Protection: 1; mode=block
X-Frame-Options: SAMEORIGIN
Alternate-Protocol: 80:quic
Transfer-Encoding: chunked

8000
&amp;lt;!doctype html&amp;gt;&amp;lt;html[...]um monte de HTML[...]

0
&lt;/pre&gt;

&lt;p&gt;Veja que o resultado é semelhante ao que vimos anteriormente sobre na nossa teoria de requisição e resposta, também há algumas outras propriedade que não vimos mas não importa para nós ao menos que queira se aprofundar no assunto. Veja também que seu programa também continua em execução, isso acontece porque o servidor do google ainda não encerrou a conexão, isso acontece porque no HTTP/1.1 a propriedade &amp;#8220;Connection: keep-alive&amp;#8221; é padrão mesmo que não enviamos na requisição, quem define esse tempo é o próprio servidor, por experiência própria eu sei que a conexão com o google se mantém ativa por aproximadamente 3 minutos, isso para dar tempo suficiente para que você faça todas as pesquisas sem ter que criar uma nova conexão para cada pesquisa que você faz, isso é importante no caso do google já que ele recebe milhares de requisições por segundo, sendo que varias delas são feitas pela mesma pessoa, então não convém criar uma nova conexão para cada nova requisição.&lt;/p&gt;

&lt;p&gt;Você deve estar se perguntando, mas Thiago, isso não é o que o navegador faz?&lt;/p&gt;

&lt;p&gt;&amp;#8211; Sim, o que fizemos hoje foi implementar a parte mais básica de um navegados web.&lt;/p&gt;

&lt;p&gt;Mas a proposta é fazer um servidor e não um navegador, certo?&lt;/p&gt;

&lt;p&gt;&amp;#8211; Certo, mas antes de avançarmos é importante entender bem qual é o trabalho do navegador antes de criar o servidor que irá responder as requisições dele, mas isso será assunto para a parte III.&lt;/p&gt;

&lt;p&gt;Posso fazer em outra linguagem?&lt;/p&gt;

&lt;p&gt;&amp;#8211; Claro, socket é implementado em todas as linguagens, basta consultar a documentação da sua linguagem preferida para entender como replicar o conceito acima.&lt;/p&gt;

&lt;p&gt;Por hoje ficamos por aqui pessoal, espero que tenham aproveitado bem nossa parte prática, no próximo começaremos definitivamente a criar nosso servidor.&lt;/p&gt;

&lt;p&gt;Até Mais.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Templates Joomla!: o básico e relações com o WordPress</title>
      <link>http://tableless.com.br/templates-joomla-o-basico-e-relacoes-com-o-wordpress/</link>
      <pubDate>Mon, 25 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/templates-joomla-o-basico-e-relacoes-com-o-wordpress/</guid>
      <description>

&lt;p&gt;Ao lado do WordPress, o Joomla! é sem dúvida um dos melhores CMS que existem atualmente. Como o amigo Girlan bem já escreveu &lt;a title=&#34;Vamos falar de Joomla!?&#34; href=&#34;http://tableless.com.br/vamos-falar-de-joomla/&#34; target=&#34;_blank&#34;&gt;noutro artigo&lt;/a&gt;, o Joomla! tem se superado muito a cada versão&amp;nbsp;e, desta perspectiva, torna-se mais que vantajoso ao desenvolvedor front-end dominar a criação de temas tanto para&amp;nbsp;o WordPress quanto para o Joomla!.&lt;/p&gt;

&lt;p&gt;A boa notícia é que se você já sabe&amp;nbsp;criar temas para o WordPress, você praticamente já&amp;nbsp;sabe criar&amp;nbsp;templates para o Joomla! também. O objetivo deste artigo, portanto, não é embarcar naquela velha discussão &lt;del&gt;formada sobre tudo&lt;/del&gt; de qual CMS é o melhor. Estamos mais interessados em criar um template básico (ou sandbox) para o Joomla! observando as relações existentes com&amp;nbsp;o desenvolvimento de temas para o WordPress, despertando, quem sabe, novos joomlers pela comunidade Tableless!&amp;nbsp;&lt;img class=&#34;emoji&#34; src=&#34;http://s.w.org/images/core/emoji/72x72/1f609.png&#34; alt=&#34;😉&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;entendendo-o-joomla&#34;&gt;Entendendo o Joomla!&lt;/h2&gt;

&lt;p&gt;Antes de criar um template para o Joomla!, primeiro precisamos entender, pelo menos superficialmente, como ele funciona.&amp;nbsp;Em suma, podemos dizer que a principal função do&amp;nbsp;Joomla! é reunir o conteúdo armazenado no banco de dados e gerenciado no painel de administração com ACL usando um&amp;nbsp;template para produzir páginas HTML de forma dinâmica&amp;nbsp;via PHP.&lt;/p&gt;

&lt;p&gt;O Joomla! se&amp;nbsp;assemelha ao WordPress em muitos aspectos. O&amp;nbsp;conceito de artigo, por exemplo, se assemelha ao de post do WordPress: é a forma concebida ao conteúdo principal armazenado no banco de dados para ser&amp;nbsp;gerenciado no painel de administração. O mesmo vale para os módulos e widgets, templates e temas, plugins, entre outras semelhanças — é claro que&amp;nbsp;cada CMS apresenta as suas próprias especificidades, mas, por hora, vamos deixar assim.&lt;/p&gt;

&lt;p&gt;Composto basicamente por um framework e suas extensões —&amp;nbsp;analogamente a&amp;nbsp;um sistema operacional e suas aplicações —, o diferencial do Joomla! está justamente nas extensões chamadas de &lt;strong&gt;componentes&lt;/strong&gt;, que permitem desenvolver sites de todas as formas e tamanhos&amp;nbsp;através de &lt;a title=&#34;MVC – Afinal, é o quê ?&#34; href=&#34;http://tableless.com.br/mvc-afinal-e-o-que/&#34; target=&#34;_blank&#34;&gt;arquitetura MVC&lt;/a&gt;. No desenvolvimento de templates, só nos interessa a camada &lt;em&gt;view&lt;/em&gt; dos componentes, doravante chamada apenas de &amp;#8220;componente&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Vejamos mais sobre as extensões&amp;#8230;&lt;/p&gt;

&lt;h3 id=&#34;as-extensões-do-joomla&#34;&gt;As extensões do Joomla!&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Uma extensão é um pacote de programa que estende a instalação do Joomla! de diferentes maneiras.&amp;nbsp;&lt;cite&gt;Documentação do Joomla!&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ainda segundo a documentação do Joomla!, as extensões podem ser classificadas basicamente em&amp;nbsp;&lt;strong&gt;componentes&lt;/strong&gt;, &lt;strong&gt;módulos&lt;/strong&gt;, &lt;strong&gt;plugins&lt;/strong&gt; e &lt;strong&gt;templates&lt;/strong&gt;. Também os idiomas do Joomla! e os pacotes de extensões relacionadas, os&amp;nbsp;packages, são consideradas extensões, assim como as bibliotecas que fornecem funções que podem ser usadas por outras extensões.&lt;/p&gt;

&lt;p&gt;O Joomla! possui extensões nativas que se mostram&amp;nbsp;suficientes na&amp;nbsp;maioria dos nossos projetos, o que não nos&amp;nbsp;impede de criar as nossas próprias extensões ou usar&amp;nbsp;algumas das&amp;nbsp;&lt;strong&gt;9 mil extensões disponíveis&lt;/strong&gt; (e aumentando!) no &lt;a title=&#34;Diretório de Extensões do Joomla!&#34; href=&#34;http://extensions.joomla.org/&#34; target=&#34;_blank&#34;&gt;JED&lt;/a&gt;, o&amp;nbsp;diretório de extensões do Joomla!.&lt;/p&gt;

&lt;p&gt;Para conhecer melhor o CMS, você pode&amp;nbsp;&lt;a title=&#34;Download da última versão do Joomla!&#34; href=&#34;http://www.joomla.org/download.html&#34; target=&#34;_blank&#34;&gt;baixar a última versão do Joomla!&lt;/a&gt;&amp;nbsp;e instalar localmente ou &lt;a title=&#34;Fazer test-drive rápido do Joomla!&#34; href=&#34;http://demo.joomla.org/&#34; target=&#34;_blank&#34;&gt;fazer um test-drive rápido no Joomla.org&lt;/a&gt;, que gera instantaneamente uma instalação remota todinha&amp;nbsp;sua por 90 minutos. Aqui, nos referimos à versão 3.4.1 do Joomla! e, para comparação, à versão 4.2.2 do WordPress — as mais recentes até a&amp;nbsp;publicação deste artigo.&lt;/p&gt;

&lt;p&gt;Sem mais&amp;nbsp;delongas, vamos ao que interessa!&lt;/p&gt;

&lt;h2 id=&#34;criando-um-template-para-o-joomla&#34;&gt;Criando um template para o Joomla!&lt;/h2&gt;

&lt;p&gt;Assim como, por padrão, os temas do WordPress ficam localizados no diretório &lt;em&gt;/wp-content/themes/&lt;/em&gt;, os templates do Joomla! ficam localizados no diretório &lt;em&gt;/templates/&lt;/em&gt;. Para começar, vamos criar um diretório chamado &amp;#8220;meunovotemplate&amp;#8221; com a seguinte estrutura básica de arquivos de todo template Joomla!:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-49093&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/estrutura-basica-de-arquivos-de-templates-joomla.png&#34; alt=&#34;estrutura-basica-de-arquivos-de-templates-joomla&#34; width=&#34;283&#34; height=&#34;226&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Adicionamos&amp;nbsp;arquivos &lt;em&gt;index.html&lt;/em&gt;&amp;nbsp;em branco no&amp;nbsp;diretório do template e em seus subdiretórios como&amp;nbsp;medida adicional de segurança contra a exposição de informações da instalação por eventuais tentativas de&amp;nbsp;acesso direto aos&amp;nbsp;diretórios com permissões 775 de FTP — equivalente aos arquivos &lt;em&gt;index.php&lt;/em&gt;&amp;nbsp;&amp;#8220;silence is golden&amp;#8221; do WordPress.&lt;/p&gt;

&lt;h3 id=&#34;definindo-as-informações-do-template&#34;&gt;Definindo as informações do template&lt;/h3&gt;

&lt;p&gt;O arquivo &lt;em&gt;templateDetails.xml&lt;/em&gt;&amp;nbsp;é equivalente aos comentários iniciais do arquivo &lt;em&gt;style.css&lt;/em&gt; dos temas do WordPress&amp;nbsp;(stylesheet header). Através de XML, são marcadas as informações do template para a instalação e, posteriormente, para serem exibidas no Gerenciador de Temas do painel de administração. Veja um&amp;nbsp;exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt;
&amp;lt;extension version=&#34;3.4.1&#34; type=&#34;template&#34;&amp;gt;
  &amp;lt;name&amp;gt;Meu novo template&amp;lt;/name&amp;gt;
  &amp;lt;creationDate&amp;gt;25/05/2015&amp;lt;/creationDate&amp;gt;
  &amp;lt;author&amp;gt;Tableless&amp;lt;/author&amp;gt;
  &amp;lt;authorEmail&amp;gt;contato@tableless.com.br&amp;lt;/authorEmail&amp;gt;
  &amp;lt;authorUrl&amp;gt;http://www.tableless.com.br&amp;lt;/authorUrl&amp;gt;
  &amp;lt;copyright&amp;gt;© 2015 Tableless. Todos os direitos reservados.&amp;lt;/copyright&amp;gt;
  &amp;lt;license&amp;gt;GNU/GPL&amp;lt;/license&amp;gt;
  &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;description&amp;gt;Descrição do meu novo template.&amp;lt;/description&amp;gt;
  &amp;lt;files&amp;gt;
    &amp;lt;folder&amp;gt;css&amp;lt;/folder&amp;gt;
    &amp;lt;folder&amp;gt;images&amp;lt;/folder&amp;gt;
    &amp;lt;filename&amp;gt;index.php&amp;lt;/filename&amp;gt;
    &amp;lt;filename&amp;gt;templateDetails.xml&amp;lt;/filename&amp;gt;
    &amp;lt;filename&amp;gt;index.html&amp;lt;/filename&amp;gt;
  &amp;lt;/files&amp;gt;
  &amp;lt;positions&amp;gt;
    &amp;lt;position&amp;gt;breadcrumb&amp;lt;/position&amp;gt;
    &amp;lt;position&amp;gt;mainmenu&amp;lt;/position&amp;gt;
    &amp;lt;position&amp;gt;aside&amp;lt;/position&amp;gt;
  &amp;lt;/positions&amp;gt;
&amp;lt;/extension&amp;gt;&lt;/pre&gt;

&lt;p&gt;Na primeira linha, informamos&amp;nbsp;a versão &lt;abbr style=&#34;cursor: help&#34; title=&#34;eXtensible Markup Language&#34;&gt;XML&lt;/abbr&gt; e o tipo de codificação do arquivo (recomenda-se&amp;nbsp;o uso de&amp;nbsp;&lt;a title=&#34;HTML: Encode UTF-8&#34; href=&#34;http://tableless.com.br/html-encode-utf-8/&#34; target=&#34;_blank&#34;&gt;UTF-8&lt;/a&gt; sem BOM). Na segunda, informamos&amp;nbsp;a versão da instalação do Joomla!&amp;nbsp;e&amp;nbsp;o tipo da extensão.&amp;nbsp;A partir daí, as tags falam por si mesmas: as tags &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; informam o nome do template, as tags &lt;code&gt;&amp;lt;creationDate&amp;gt;&lt;/code&gt; informam a data de criação do template e por aí vai&amp;#8230;&lt;/p&gt;

&lt;p&gt;As tags&amp;nbsp;&lt;code&gt;&amp;lt;filemame&amp;gt;&lt;/code&gt;&amp;nbsp;e&amp;nbsp;&lt;code&gt;&amp;lt;folder&amp;gt;&lt;/code&gt;&amp;nbsp;informam, respectivamente, os arquivos e os diretórios do template. Vale ressaltar que se já informamos algum diretório do template, não precisamos informar os arquivos e subdiretórios contidos nele (tome como exemplo o diretório para as folhas de estilo, cujos arquivos &lt;em&gt;style.css&lt;/em&gt; e &lt;em&gt;index.html&lt;/em&gt;&amp;nbsp;contidos nele não&amp;nbsp;informamos&amp;nbsp;diretamente). Assim, os únicos arquivos e diretórios&amp;nbsp;que precisamos informar são os que se encontram &lt;strong&gt;imediatamente&lt;/strong&gt; no diretório que criamos.&lt;/p&gt;

&lt;p&gt;Já as&amp;nbsp;tags &lt;code&gt;&amp;lt;positions&amp;gt;&lt;/code&gt; informam os nomes das&amp;nbsp;posições que os módulos poderão ocupar nas páginas do&amp;nbsp;site&amp;nbsp;—&amp;nbsp;mas ainda não as posições em si, o que definiremos&amp;nbsp;no modelo.&lt;/p&gt;

&lt;h3 id=&#34;modelo-nbsp-a-nbsp-estrutura-do-nbsp-template&#34;&gt;Modelo:&amp;nbsp;a&amp;nbsp;estrutura do&amp;nbsp;template&lt;/h3&gt;

&lt;p&gt;Ao contrário do que acontece no&amp;nbsp;WordPress, em que a estrutura de um tema é&amp;nbsp;dividida em &lt;a title=&#34;Hierarquia de arquivos do WordPress&#34; href=&#34;http://tableless.com.br/hierarquia-de-arquivos-do-wordpress/&#34; target=&#34;_blank&#34;&gt;vários arquivos&lt;/a&gt;&amp;nbsp;pela funcionalidade, a estrutura de um template do Joomla! normalmente&amp;nbsp;se concentra em apenas um: o &lt;em&gt;index.php&lt;/em&gt;. Com ele, nós criamos uma página genérica para todo o site, isto é, um &lt;strong&gt;modelo&lt;/strong&gt; para todas as páginas específicas do site, incluindo declarações próprias&amp;nbsp;do Joomla! que processarão o conteúdo dinâmico a cada requisição de página.&lt;/p&gt;

&lt;p&gt;Entretanto, e como no WordPress, nós podemos implementar a página de erros e a do componente (para impressão)&amp;nbsp;separadamente&amp;nbsp;em&amp;nbsp;arquivos semelhantes chamados de&amp;nbsp;&lt;em&gt;error.php&lt;/em&gt; e &lt;em&gt;component.php&lt;/em&gt;, respectivamente, mas aqui nos concentraremos no básico, ok?&lt;/p&gt;

&lt;p&gt;O&amp;nbsp;conteúdo dinâmico&amp;nbsp;nada mais é do que o&amp;nbsp;código&amp;nbsp;HTML gerado pelo Joomla! para as partes do site que dependem das páginas específicas, ou seja, que podem mudar de uma página para outra. Ele&amp;nbsp;pode ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;o&amp;nbsp;&lt;strong&gt;componente&lt;/strong&gt;&amp;nbsp;da página, isto é, o conteúdo principal da página;&lt;/li&gt;
&lt;li&gt;o conteúdo padrão do &lt;strong&gt;elemento &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;da página, como folhas de estilos, scripts e meta elementos;&lt;/li&gt;
&lt;li&gt;os &lt;strong&gt;módulos&lt;/strong&gt;, de acordo com suas configurações de visibilidade;&lt;/li&gt;
&lt;li&gt;as possíveis&amp;nbsp;&lt;strong&gt;mensagens&lt;/strong&gt; de sistema e de erros de&amp;nbsp;requisição de página.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por exemplo: através do Gerenciador de Menus do painel de administração, podemos&amp;nbsp;criar uma página no menu principal&amp;nbsp;para exibir um único artigo&amp;nbsp;selecionando a opção &amp;#8220;Artigos &amp;gt; Único Artigo&amp;#8221; (componente nativo de conteúdo) como o tipo de item de menu. Ao acessar a página através do item correspondente no menu principal, o Joomla! processará o código HTML daquele componente na parte identificada para o processamento de&amp;nbsp;componente no modelo —&amp;nbsp;através daquelas declarações próprias&amp;nbsp;do Joomla!. É assim que criamos páginas simples com o&amp;nbsp;Joomla!.&lt;/p&gt;

&lt;p&gt;Ou ainda,&amp;nbsp;através do Gerenciador de Módulos, podemos criar um módulo para ocupar determinada&amp;nbsp;posição&amp;nbsp;nas páginas do site — também identificada por aquelas declarações próprias&amp;nbsp;do Joomla! no&amp;nbsp;modelo — e configurar sua visibilidade — o que é exclusividade dos módulos&amp;nbsp;— apenas para a&amp;nbsp;página inicial. Assim, ao&amp;nbsp;acessar a página inicial,&amp;nbsp;o Joomla! processará&amp;nbsp;o código HTML daquele módulo naquela determinada posição, mas ao&amp;nbsp;acessar as páginas internas, isso não acontecerá.&amp;nbsp;Em outras palavras, o Joomla! só &amp;#8220;carregará&amp;#8221; o módulo na página inicial. Simples, não?&lt;/p&gt;

&lt;p&gt;Mas&amp;nbsp;afinal, o que&amp;nbsp;são essas &amp;#8220;declarações próprias do Joomla!&amp;#8221;?&lt;/p&gt;

&lt;h3 id=&#34;as-declarações-jdoc&#34;&gt;As declarações JDOC&lt;/h3&gt;

&lt;p&gt;O Joomla! possui seus próprios métodos de processamento de conteúdo dinâmico chamados de&amp;nbsp;&lt;strong&gt;declarações JDOC&lt;/strong&gt;, que possuem mais ou menos essa cara:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;jdoc:include type=&#34;component&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Nas declarações JDOC, o&amp;nbsp;uso das aspas duplas e do espaço antes do fechamento &lt;code&gt;/&amp;gt;&lt;/code&gt;&amp;nbsp;é obrigatório. Além disso, devemos sempre informar o tipo de conteúdo dinâmico a ser processado através do atributo &lt;code&gt;type&lt;/code&gt;. No exemplo acima, o Joomla! processaria o componente das páginas específicas no lugar da declaração. Os possíveis valores para o atributo &lt;code&gt;type&lt;/code&gt;&amp;nbsp;são:&lt;/p&gt;

&lt;h4 id=&#34;component&#34;&gt;Component&lt;/h4&gt;

&lt;p&gt;Deve ser declarado apenas uma vez no elemento &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; do modelo&amp;nbsp;para processar&amp;nbsp;o conteúdo principal da página.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;jdoc:include type=&#34;component&#34; /&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;head&#34;&gt;Head&lt;/h4&gt;

&lt;p&gt;Deve ser declarado apenas uma vez no elemento &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; do&amp;nbsp;modelo&amp;nbsp;para processar seu respectivo conteúdo padrão da página, como folhas de estilo, scripts e meta elementos.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;jdoc:include type=&#34;head&#34; /&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;message&#34;&gt;Message&lt;/h4&gt;

&lt;p&gt;Deve ser declarado apenas uma vez no elemento &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; do modelo&amp;nbsp;para processar as possíveis&amp;nbsp;mensagens de sistema e de erros de requisição de página.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;jdoc:include type=&#34;message&#34; /&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;module-e-modules&#34;&gt;Module e modules&lt;/h4&gt;

&lt;p&gt;Pode ser declarado várias vezes no&amp;nbsp;modelo&amp;nbsp;para processar&amp;nbsp;os módulos, de acordo com suas configurações de visibilidade. Aqui, também é obrigatório identificarmos aquelas posições que&amp;nbsp;antecipamos pelo nome no arquivo&amp;nbsp;&lt;em&gt;templateDetails.xml&lt;/em&gt; através do atributo &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O tipo &lt;code&gt;module&lt;/code&gt; define uma posição&amp;nbsp;do modelo que poderá ser ocupada por um e apenas um módulo. Nesse caso, o atributo &lt;code&gt;title&lt;/code&gt; se refere ao título atribuído&amp;nbsp;para o módulo no Gerenciador de Módulos. Veja o&amp;nbsp;exemplo para o módulo que exibe o menu:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;jdoc:include type=&#34;module&#34; name=&#34;mainmenu&#34; title=&#34;Menu&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Já o&amp;nbsp;tipo &lt;code&gt;modules&lt;/code&gt; define uma posição mais genérica do modelo que poderá ser ocupada por vários módulos —&amp;nbsp;como uma sidebar, por exemplo. Nesse caso, o atributo &lt;code&gt;title&lt;/code&gt; não é necessário.&lt;/p&gt;

&lt;p&gt;Observe que para &lt;a title=&#34;Criando Sidebar Dinâmica no WordPress&#34; href=&#34;http://tableless.com.br/criando-sidebar-dinamica-no-wordpress/&#34; target=&#34;_blank&#34;&gt;criar&amp;nbsp;uma sidebar dinâmica&amp;nbsp;no WordPress&lt;/a&gt;, normalmente&amp;nbsp;registramos a posição&amp;nbsp;no arquivo &lt;em&gt;functions.php&lt;/em&gt; e adicionamos&amp;nbsp;o seguinte trecho em algum lugar do arquivo &lt;em&gt;sidebar.php&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;div id=&#34;sidebar&#34; role=&#34;complementary&#34;&amp;gt;
  &amp;lt;?php dynamic_sidebar( &#39;aside&#39; ); ?&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;No&amp;nbsp;Joomla!, para a mesma finalidade, registramos&amp;nbsp;a posição no arquivo &lt;em&gt;templateDetails.xml&lt;/em&gt; e adicionamos&amp;nbsp;o seguinte trecho no&amp;nbsp;modelo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;aside id=&#34;sidebar&#34; role=&#34;complementary&#34;&amp;gt;
   &amp;lt;jdoc:include type=&#34;modules&#34; name=&#34;aside&#34; /&amp;gt;
&amp;lt;/aside&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;resumo-das-declarações-jdoc&#34;&gt;Resumo das declarações JDOC&lt;/h4&gt;

&lt;p&gt;Podemos, então, esquematizar as declarações JDOC na seguinte tabela:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th style=&#34;text-align: left&#34;&gt;
      Tipo
    &lt;/th&gt;
    
    &lt;th style=&#34;text-align: left&#34;&gt;
      Função
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;component&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Carrega o conteúdo principal da página.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;head&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Carrega folhas de estilo, scripts e meta elementos padrões da página.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;message&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Carrega, não necessariamente, mensagens de sistema e de erros de requisição de página.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;module&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Carrega, não necessariamente, um único módulo na posição e de título atribuídos.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;modules&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Carrega, não necessariamente, um ou vários módulos na posição atribuída.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;modelo-básico&#34;&gt;Modelo básico&lt;/h3&gt;

&lt;p&gt;Apresentadas as declarações JDOC, já podemos implementar um&amp;nbsp;modelo básico com&amp;nbsp;marcação semântica sugerida:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php defined(&#39;_JEXEC&#39;) or die(&#39;Acesso restrito!&#39;); ?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;&amp;lt;?php echo $this-&amp;gt;language; ?&amp;gt;&#34;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;jdoc:include type=&#34;head&#34; /&amp;gt;
  &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;&amp;lt;?php echo $this-&amp;gt;baseurl; ?&amp;gt;/templates/&amp;lt;?php echo $this-&amp;gt;template; ?&amp;gt;/css/style.css&#34; type=&#34;text/css&#34; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;?php echo $this-&amp;gt;title; ?&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;nav&amp;gt;&amp;lt;jdoc:include type=&#34;module&#34; name=&#34;mainmenu&#34; title=&#34;Menu&#34; /&amp;gt;&amp;lt;/nav&amp;gt;
  &amp;lt;/header&amp;gt;
  &amp;lt;section id=&#34;content&#34;&amp;gt;
     &amp;lt;article role=&#34;main&#34;&amp;gt;
       &amp;lt;jdoc:include type=&#34;message&#34; /&amp;gt;
       &amp;lt;jdoc:include type=&#34;component&#34; /&amp;gt;
     &amp;lt;/article&amp;gt;
     &amp;lt;aside role=&#34;complementary&#34;&amp;gt;
       &amp;lt;jdoc:include type=&#34;modules&#34; name=&#34;aside&#34; /&amp;gt;
     &amp;lt;/aside&amp;gt;
  &amp;lt;/section&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;proteção-contra-acesso-direto&#34;&gt;Proteção contra acesso direto&lt;/h4&gt;

&lt;p&gt;Na primeira linha, protegemos o arquivo contra o acesso direto. Funciona assim: o&amp;nbsp;Joomla! define uma constante chamada &lt;strong&gt;_JEXEC&lt;/strong&gt; que marca uma entrada segura de acesso aos arquivos através do &lt;em&gt;/index.php&lt;/em&gt;&amp;nbsp;na raiz da instalação; se, portanto, o arquivo&amp;nbsp;&lt;em&gt;/templates/meunovotemplate/index.php&lt;/em&gt;&amp;nbsp;for&amp;nbsp;acessado diretamente, o Joomla! verificará que a constante não foi definida e&amp;nbsp;não exibirá informações em mensagens de erros que muito provavelmente ocorrerão&amp;nbsp;e&amp;nbsp;que podem expor a instalação para mal-intencionados de plantão — é exibida a mensagem &amp;#8220;Acesso restrito!&amp;#8221; que definimos.&lt;/p&gt;

&lt;p&gt;Com o&amp;nbsp;WordPress&amp;nbsp;é quase a mesma coisa: a diferença é que a&amp;nbsp;constante&amp;nbsp;se chama&amp;nbsp;&lt;strong&gt;ABSPATH&lt;/strong&gt; e é&amp;nbsp;definida mais especificamente no arquivo &lt;em&gt;/wp-load.php&lt;/em&gt; (o &lt;em&gt;/index.php&lt;/em&gt; inclui o &lt;em&gt;/wp-blog-header.php&lt;/em&gt;, que por sua vez inclui o &lt;em&gt;/wp-load.php&lt;/em&gt;&amp;nbsp;— todos na raiz da instalação). A nível de curiosidade, aqui no Tableless não exibimos nenhuma mensagem para as tentativas de acesso direto aos arquivos.&lt;/p&gt;

&lt;h4 id=&#34;processando-mais-nbsp-conteúdo-dinâmico&#34;&gt;Processando mais&amp;nbsp;conteúdo dinâmico&lt;/h4&gt;

&lt;p&gt;Na&amp;nbsp;terceira&amp;nbsp;linha, definimos o idioma da página dinamicamente&amp;nbsp;com o trecho&amp;nbsp;&lt;code&gt;&amp;lt;?php echo $this-&amp;gt;language; ?&amp;gt;&lt;/code&gt;, que retorna via PHP o código HTML do idioma definido para&amp;nbsp;o site no Gerenciador de Idiomas do painel de administração.&amp;nbsp;Também utilizamos essa técnica para informar o endereço da folha de estilo &lt;em&gt;style.css&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;&lt;strong&gt;&amp;lt;?php echo $this-&amp;gt;baseurl; ?&amp;gt;&lt;/strong&gt;/templates/&lt;strong&gt;&amp;lt;?php echo $this-&amp;gt;template; ?&amp;gt;&lt;/strong&gt;/css/style.css&#34; type=&#34;text/css&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Assim, além das declarações JDOC, o Joomla! também processa essas&amp;nbsp;propriedades do site disponíveis a partir do template, o que&amp;nbsp;minimiza a sua manutenção —&amp;nbsp;já que não precisamos ficar editando o modelo toda vez que mudarmos&amp;nbsp;o título&amp;nbsp;do site, ou o domínio, idioma, etc. Os nomes para retornar as propriedades mais importantes são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;baseurl:&lt;/strong&gt;&amp;nbsp;o domínio do&amp;nbsp;site (ex.: &lt;a href=&#34;http://www.tableless.com.br&#34;&gt;http://www.tableless.com.br&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;language:&lt;/strong&gt;&amp;nbsp;o código HTML do idioma definido para o site&amp;nbsp;(ex.: pt-br);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;template:&lt;/strong&gt;&amp;nbsp;o nome do diretório do template atual&amp;nbsp;do site (ex.: meunovotemplate);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title:&lt;/strong&gt;&amp;nbsp;o título do site;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;description:&lt;/strong&gt;&amp;nbsp;a descrição do site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a title=&#34;Propriedades do site Joomla! disponíveis a partir do template&#34; href=&#34;https://docs.joomla.org/Objects,_methods_and_properties_available_from_your_template&#34; target=&#34;_blank&#34;&gt;Consulte a lista completa das propriedades disponíveis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Observe que as declarações JDOC somadas a&amp;nbsp;essas propriedades&amp;nbsp;estão para os templates do Joomla! assim como as &lt;strong&gt;template tags&lt;/strong&gt;&amp;nbsp;estão para os temas do WordPress. Bacana, né?&lt;/p&gt;

&lt;h3 id=&#34;componente-só-nas-páginas-internas&#34;&gt;Componente só nas páginas internas&lt;/h3&gt;

&lt;p&gt;Podemos ainda fazer com que o Joomla! processe apenas o componente das páginas internas&amp;nbsp;com o auxílio de um módulo. O truque é definir sua visibilidade&amp;nbsp;apenas para a&amp;nbsp;página inicial&amp;nbsp;e&amp;nbsp;daí, através de operadores condicionais e do&amp;nbsp;método &lt;code&gt;int countModules( $condition )&lt;/code&gt;, que verifica a visibilidade do módulo na página, controlamos manualmente o que carregar na página inicial e o que carregar nas páginas internas. Segue uma sugestão de código:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;article role=&#34;main&#34;&amp;gt;

  &amp;lt;!-- conteúdo exibido em todas as páginas --&amp;gt;

  &amp;lt;?php if ($this-&amp;gt;countModules( &#39;slideshow&#39; )) :
  // se o módulo estiver visível na página ?&amp;gt;

  &amp;lt;div id=&#34;home&#34;&amp;gt;
    &amp;lt;jdoc:include type=&#34;module&#34; name=&#34;slideshow&#34; title=&#34;Slideshow&#34; /&amp;gt;
    &amp;lt;!-- conteúdo exibido somente na página inicial --&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;?php endif; ?&amp;gt;
  &amp;lt;?php if (!$this-&amp;gt;countModules( &#39;slideshow&#39; )) :
  // se o módulo não estiver visível na página ?&amp;gt;

  &amp;lt;div id=&#34;inner&#34;&amp;gt;
    &amp;lt;jdoc:include type=&#34;component&#34; /&amp;gt;
    &amp;lt;!-- conteúdo exibido somente nas páginas internas --&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;?php endif; ?&amp;gt;

&amp;lt;/article&amp;gt;&lt;/pre&gt;

&lt;p&gt;No exemplo acima, com a&amp;nbsp;configuração de visibilidade&amp;nbsp;do módulo &amp;#8220;slideshow&amp;#8221; apenas para&amp;nbsp;a página inicial, o componente da página inicial não será processado quando ela for&amp;nbsp;acessada — embora o back-end do Joomla! ainda entenda que a página inicial se refere àquele&amp;nbsp;componente. Mas lembre-se: a página inicial é a principal página do seu site e o componente, seu principal conteúdo. Pelo que você iria substituí-lo? Será que o Google e os seus coleguinhas iriam gostar?&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-template-no-joomla&#34;&gt;Instalando o template no Joomla!&lt;/h2&gt;

&lt;p&gt;Existem quatro&amp;nbsp;formas de instalar extensões no Joomla!: pelo JED, enviando um pacote de arquivos, a partir do diretório da instalação ou&amp;nbsp;a partir de um URL. Em&amp;nbsp;nosso caso, optaremos por enviar&amp;nbsp;um pacote de arquivos: é só compactar o conteúdo do diretório do template&amp;nbsp;(&lt;em&gt;.zip&lt;/em&gt;, &lt;em&gt;.tar.gz&lt;/em&gt; ou &lt;em&gt;tar.bz2&lt;/em&gt;) e fazer o upload no Joomla! pelo Gerenciador de Extensões do painel de administração:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/instalacao-de-extensoes-no-joomla.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-48873&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/instalacao-de-extensoes-no-joomla.png&#34; alt=&#34;Instalação de extensões no Joomla!&#34; width=&#34;900&#34; height=&#34;500&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Os arquivos e subdiretórios do template serão colocados em um diretório com o mesmo nome do arquivo compactado em &lt;em&gt;/templates/&lt;/em&gt;. Além disso,&amp;nbsp;o template será listado no Gerenciador de Temas — com aquelas informações que informamos no arquivo&amp;nbsp;&lt;em&gt;templateDetails.xml&amp;nbsp;—,&lt;/em&gt;&amp;nbsp;em que&amp;nbsp;deve ser definido&amp;nbsp;como &lt;strong&gt;tema padrão do site&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Após a instalação, você ainda pode continuar editando&amp;nbsp;o seu template sem nenhum problema. Considere, por exemplo, adicionar um script ao site: crie&amp;nbsp;diretamente um diretório&amp;nbsp;para scripts no diretório do template instalado&amp;nbsp;(e não esqueça do &lt;em&gt;index.html&lt;/em&gt; em branco), informe-os no respectivo&amp;nbsp;&lt;em&gt;templatesDetails.xml&lt;/em&gt; (como boa prática), adicione-os ao modelo&amp;nbsp;e pronto!&lt;/p&gt;

&lt;p&gt;Go ahead!&amp;nbsp;Você é livre para editar o template e conferir o resultado em tempo real — inclusive editar a geração do código HTML pelo Joomla! para o conteúdo dinâmico com &lt;strong&gt;overrides&lt;/strong&gt;, mas isso é assunto de&amp;nbsp;outro artigo.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;A criação de&amp;nbsp;um template básico para o Joomla!, como se vê, não&amp;nbsp;é nenhuma novidade para quem já desenvolve temas para o WordPress.&amp;nbsp;É claro que esta é&amp;nbsp;apenas uma introdução aos templates do&amp;nbsp;Joomla! e não aborda&amp;nbsp;tudo o que podemos fazer. Podemos, por exemplo, manipular o conteúdo dinâmico do elemento &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&amp;nbsp;(como retirar scripts padrões desnecessários em alguns casos),&amp;nbsp;definir parâmetros para&amp;nbsp;o template configuráveis pelo&amp;nbsp;painel de administração (como nos temas do WordPress a partir da versão 3.4), permitir a mudança de&amp;nbsp;idioma do próprio modelo (para sites multilíngues) e muito mais! Aqui, porém, nos contentamos com a&amp;nbsp;criação de um template que você poderá usar como base em&amp;nbsp;seus próximos projetos com o Joomla!.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/template.zip&#34;&gt;Baixe o template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E até a próxima pessoal!&lt;/p&gt;

&lt;h3 id=&#34;referências&#34;&gt;Referências&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title=&#34;Documentação do Joomla!&#34; href=&#34;http://docs.joomla.org&#34; target=&#34;_blank&#34;&gt;Documentação do Joomla!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&#34;Documentação do WordPress&#34; href=&#34;http://codex.wordpress.org&#34; target=&#34;_blank&#34;&gt;Documentação do WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript: Dicas de bolso – parte 1</title>
      <link>http://tableless.com.br/dicas-de-bolso-de-javascript-parte-1/</link>
      <pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/dicas-de-bolso-de-javascript-parte-1/</guid>
      <description>

&lt;h1 id=&#34;javascript-e-suas-pegadinhas&#34;&gt; JavaScript e suas pegadinhas&lt;/h1&gt;

&lt;p&gt;JavaScript é uma linguagem bem legal mas cheia de &lt;em&gt;pegadinhas&lt;/em&gt;. A idéia desse post é documentar alguma dessas pegadinhas, para que possamos evitar dores de cabeça principalmente à galera que ainda não se deparou com alguma delas.&lt;/p&gt;

&lt;h2 id=&#34;guarde-o-tamanho-do-array&#34;&gt;Guarde o tamanho do array&lt;/h2&gt;

&lt;p&gt;No JavaScript temos nossos brothers loops &lt;code&gt;for&lt;/code&gt;, que conseguem iterar em arrays ou também em objetos semelhantes a arrays. Semelhantes? Como assim!? Por exemplo os objetos &lt;code&gt;arguments&lt;/code&gt; e &lt;code&gt;HTMLCollection&lt;/code&gt;. Provavelmente você já deve ter se deparado com um loop &lt;code&gt;for&lt;/code&gt; (já deve ter escrito alguns):&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;for(var i = 0; i &amp;lt; arrayFabeni.length; i++) {
    // magic
}
&lt;/pre&gt;

&lt;p&gt;De bate pronto, conseguimos perceber algo não tão bacana no código acima. O comprimento (&lt;code&gt;length&lt;/code&gt;) do array é acessado em toda iteração do loop. Isso não fica tão legal quando por exemplo, o objeto é um &lt;code&gt;HTMLCollection&lt;/code&gt;. Lembra o que são esses caras? Eles que são retornados quando a gente chama:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getElementsByName()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByClassName()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByTagName()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tá! Legal! Mas eaí né?! A zica mesmo é que toda vez que a gente itera sobre esses caras significa que estamos consultando o nosso &lt;em&gt;DOM&lt;/em&gt; ao vivo e a cores, e a *toda hora*, o que não é nada bacana.&lt;/p&gt;

&lt;p&gt;Com base nisso, uma solução que podemos chegar seria &lt;em&gt;guardarmos&lt;/em&gt; o comprimento do array; algo parecido com isso:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;for(var i = 0, max = arrayFabeni.length;  i &amp;lt; max; i++) {
    // magic
}
&lt;/pre&gt;

&lt;p&gt;O que fizemos acima foi armazenar o valor da propriedade &lt;code&gt;length&lt;/code&gt;, evitando assim ter que calculá-la a cada iteração do loop.&lt;/p&gt;

&lt;h2 id=&#34;verifique-se-a-propriedade-pertence-àquele-objeto&#34;&gt;Verifique se a propriedade pertence àquele objeto&lt;/h2&gt;

&lt;p&gt;Além do nosso amigo do exemplo anterior, no JavaScript temos o loop &lt;code&gt;for-in&lt;/code&gt; que usamos pra iterar em objetos. Uma coisa bacana de se fazer e que pode evitar que algo que você não queira aconteça, é usar o método &lt;code&gt;hasOwnProperty()&lt;/code&gt;. Esse método simplesmente vai filtrar apenas as propriedades do objeto em si, excluindo as propriedades herdadas pelo &lt;code&gt;prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Um exemplo rápido:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;var burger = {
    queijo: &#39;cheddar&#39;,
    pao: &#39;integral&#39;,
    hamburguer: &#39;picanha&#39;,
    molho: &#39;barbecue&#39;
};
&lt;/pre&gt;

&lt;p&gt;Aí em uma parte obscura, aparece algo que adiciona uma propriedade a todos os objetos.&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;if(!Object.prototype.feijao) {
  Object.prototype.feijao = &#39;preto&#39;;
}
&lt;/pre&gt;

&lt;p&gt;O que aconteceu acima foi que verificamos se existe a propriedade &lt;code&gt;feijao&lt;/code&gt; em &lt;code&gt;Object&lt;/code&gt; e, caso ela não exista definimos ela com o valor &lt;code&gt;preto&lt;/code&gt;. Aí que está o negócio &lt;del&gt;da coisa&lt;/del&gt; do JavaScript, nosso objeto &lt;code&gt;burger&lt;/code&gt;, já herda a propriedade &lt;code&gt;feijao&lt;/code&gt; via &lt;code&gt;prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Com isso, para evitarmos que &lt;code&gt;feijao&lt;/code&gt; apareça quando listarmos as propriedades de &lt;code&gt;burger&lt;/code&gt; (até porque feijão, na minha opinião, não combina muito com hamburguer), fazemos o seguinte:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;for(var i in burger) {
  if(burger.hasOwnProperty(i)) {
     console.log(i + &#39; =&amp;gt; &#39; + burger[i]);
  }
}

// Resultará no seguinte:
// queijo =&amp;gt; cheddar
// pao =&amp;gt; integral
// hamburguer =&amp;gt; picanha
// molho =&amp;gt; barbecue
&lt;/pre&gt;

&lt;p&gt;Do contrário, caso não fizéssemos essa verificação, teríamos algo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-js&#34;&gt;for(var i in burger) {
    console.log(i + &#39; =&amp;gt; &#39; + burger[i]);
}

// Resultará no seguinte:
// queijo =&amp;gt; cheddar
// pao =&amp;gt; integral
// hamburguer =&amp;gt; picanha
// molho =&amp;gt; barbecue
// feijao =&amp;gt; preto
&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Era isso! Dicas rápidas sobre a linguagem, que para alguns podem ser básicas, mas que muita gente ainda pode não conhecer e, que podem evitar alguns problemas no futuro.&lt;/p&gt;

&lt;p&gt;Referências&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Learning-JavaScript-Edition-Shelley-Powers/dp/0596521871&#34; target=&#34;_blank&#34;&gt;Learning JavaScript&lt;/a&gt; | &lt;a href=&#34;http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742&#34; target=&#34;_blank&#34;&gt;JavaScript: The Good Parts&lt;/a&gt; | &lt;a href=&#34;http://shop.oreilly.com/product/0636920011460.do&#34; target=&#34;_blank&#34;&gt;JavaScript: Pocket Reference&lt;/a&gt; | &lt;a href=&#34;http://shop.oreilly.com/product/9780596806767.do&#34; target=&#34;_blank&#34;&gt;JavaScript Patterns&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Otimize a performance do seu site com o Kraken</title>
      <link>http://tableless.com.br/otimize-performance-seu-site-com-o-kraken/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/otimize-performance-seu-site-com-o-kraken/</guid>
      <description>

&lt;p&gt;Quando o assunto é performance, você ainda pode ter muita dor de cabeça. É comum muitos sites e aplicações web terem a sua experiência deformada por problemas na performance. Há tempos procuramos métodos para otimizar nossos sites, tais como concatenação de arquivos para diminuir as requisições HTTP, minificar CSS, JavaScript e até mesmo HTML. Entre várias outras técnicas. Porém, cada vez mais essas técnicas não conseguem acompanhar os novos recursos que sempre estão surgindo para deixar nossos sites cada vez mais impressionantes. E pesados.&lt;/p&gt;

&lt;p&gt;Quando o assunto é front-end, um dos grandes vilões para uma boa performance ainda são as imagens, já que a maior parte do tráfego de seu site vem delas. Não é difícil ver uma única imagem com o tamanho superior à todo código que é carregado em uma determinada página. Tentamos contornar esse dilema usando SVG nas iconografias, fazer gradientes e elementos de interface complexos usando apenas CSS. Mas isso ainda não nos deixam isentos do uso de imagens em jpeg, gif e png, e do peso delas.&lt;/p&gt;

&lt;h3 id=&#34;conheça-o-kraken&#34;&gt;Conheça o Kraken&lt;/h3&gt;

&lt;p&gt;Como é impossível ter um site sem imagens, o que podemos fazer é amenizar o impacto delas na performance. Então aí que eu lhes apresento o Kraken.&lt;/p&gt;

&lt;p&gt;O Kraken é uma ferramenta poderosa que conta com um motor de compressão de imagens super eficiente. Eu por exemplo já tive imagens com 99% do seu tamanho reduzido. E o melhor de tudo, sem nenhum impacto na qualidade visual.&lt;/p&gt;

&lt;p&gt;E é exatamente isso que o Kraken promete, e onde ele se destaca. Não uma mera diminuição no tamanho do arquivo, mas sim que isso aconteça garantindo que não haverá perdas na qualidade visual da imagem. Como no exemplo abaixo:&lt;/p&gt;

&lt;div style=&#34;width: 766px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://s29.postimg.org/kh32i0mg7/kraken_before_and_after.jpg&#34; alt=&#34;Kraken&#34; width=&#34;756&#34; height=&#34;205&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Kraken antes e depois
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;minha-experiência-com-o-kraken&#34;&gt;Minha experiência com o Kraken&lt;/h3&gt;

&lt;p&gt;Sempre usei o plugin imagemin do grunt. Mas nunca tive resultados expressivos. Até que, por recomendação de um amigo, eu conheci o Kraken e realmente fiquei impressionado com os seus resultados. Mas além de contar histórias, vou demonstrar o uso prático da aplicação.&lt;/p&gt;

&lt;p&gt;No meu site pessoal, na página portfolio, há uma listagem dos meus projetos e suas respectivas capas. 90% dessa página é composta por imagens e notei que estava levando muito tempo para carregar por conta dessas imagens. Então eu testei otimizar cada uma delas para ver o resultado. Antes vale lembrar que eu fiz essas imagens pelo Photoshop, e elas foram salvas no formato png no modo smallest/slow, que garante uma compressão maior. Mas será que é o suficiente? Vamos ver logo abaixo:&lt;/p&gt;

&lt;div style=&#34;width: 760px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://s12.postimg.org/j3s0bu43h/compress_o.png&#34; alt=&#34;compressão&#34; width=&#34;750&#34; height=&#34;305&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    compressão
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Nessa brincadeira, eu poupei 1.84MB de carregamento em minha página, isso remete a 85.39% a menos do tamanho total de todas as imagens juntas. É um ganho e tanto, não?&lt;/p&gt;

&lt;p&gt;Agora vamos ver o impacto disso na página em questão:&lt;/p&gt;

&lt;p&gt;Antes:&lt;/p&gt;

&lt;div style=&#34;width: 557px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://s30.postimg.org/6l234x6cx/kraken_antes.jpg&#34; alt=&#34;Antes&#34; width=&#34;547&#34; height=&#34;52&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Antes
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Depois&lt;/p&gt;

&lt;div style=&#34;width: 562px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://s30.postimg.org/wun5npsa9/kraken_depois.jpg&#34; alt=&#34;depois&#34; width=&#34;552&#34; height=&#34;51&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    depois
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Lembrando que em ambos os carregamentos o cache foi limpo.&lt;/p&gt;

&lt;p&gt;E sobre a qualidade. Gostaria que você mesmo fizesse esse teste com a imagem de sua preferência.&lt;/p&gt;

&lt;h3 id=&#34;ok-quero-usar&#34;&gt;Ok, quero usar!&lt;/h3&gt;

&lt;p&gt;Infelizmente nada que funciona tão bem é de graça. O Kraken possui vários tipos de planos, com pagamento mensal ou anual.&lt;/p&gt;

&lt;p&gt;Mas também há também o modo gratuito, com algumas limitações, é claro. No modo gratuito você não terá acesso a recursos como a API deles, Plugin para WordPress entre outros. Mas talvez o que vá mais lhe incomodar é o limite de 1MB por imagem.&lt;/p&gt;

&lt;p&gt;Eu pessoalmente, uso apenas o modo gratuito e não tenho muitos problemas. Geralmente quando eu lido com imagens acima de 1MB, eu recorro a uma outra alternativa que citarei logo abaixo.&lt;/p&gt;

&lt;h3 id=&#34;uma-alternativa-interessante&#34;&gt;Uma alternativa interessante&lt;/h3&gt;

&lt;p&gt;Também há uma ferramenta chamada Compressor.io, ela tem a mesma finalidade do Kraken mas é 100% gratuito. Ela se demonstra tão eficiente quanto, e eu já até tive imagens que a compressão foi maior no Compressor.io do que no Kraken, como podem ver abaixo:&lt;/p&gt;

&lt;p&gt;No Kraken:&lt;/p&gt;

&lt;div style=&#34;width: 898px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://s10.postimg.org/okddqy9gp/compressao_no_kraken.png&#34; alt=&#34;Kraken&#34; width=&#34;888&#34; height=&#34;93&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Kraken
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;No Compressor:&lt;/p&gt;

&lt;div style=&#34;width: 838px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://s10.postimg.org/h346bqjxl/compressao_no_compressor.png&#34; alt=&#34;Compressor&#34; width=&#34;828&#34; height=&#34;57&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Compressor
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Tudo bem que nesse exemplo não se tratou de uma imagem grande. Nesse caso eu usei a imagem que se tornou a capa desse artigo. Mas demonstra que mesmo tratando-se de uma aplicação gratuita, se mostra tão competente quanto. (Não me perguntem o por que em cada ferramenta a imagem foi identificada com o tamanho original diferente. Mas é a mesma imagem, eu juro! )&lt;/p&gt;

&lt;p&gt;O único problema é que o Compressor.io só permite você otimizar uma imagem por vez, e isso pode tornar as coisas meio trabalhosas dependendo da quantidade de imagens que você precisa tratar. Também não há tantos recursos quanto o Kraken tem caso você esteja disposto a pagar pelo serviço.&lt;/p&gt;

&lt;p&gt;Caso você tenha várias imagens com menos de 1MB e algumas imagens com mais, você poderá usar o melhor de cada ferramenta para conseguir atingir a otimização de performance que você deseja para seu site, gratuitamente!&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Kraken&#34; href=&#34;http://kraken.io&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://kraken.io&#34;&gt;http://kraken.io&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Compressor&#34; href=&#34;http://compressor.io&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://compressor.io&#34;&gt;http://compressor.io&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora é com vocês!&lt;/p&gt;

&lt;p&gt;Não esqueça de deixar seu comentário abaixo! Já conhecia o Kraken? Começou a usar depois desse artigo? Conhece outras alternativas? Compartilhe conosco!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Código Limpo</title>
      <link>http://tableless.com.br/codigo-limpo/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/codigo-limpo/</guid>
      <description>

&lt;p&gt;Um dos assuntos que costumo discutir bastante com a galera é sobre qualidade de código. Nesses papos sempre vem questões como: quais práticas podemos adotar para ter um código de alta qualidade? E como sabemos se o nosso código está bom? Como temos certeza de que estamos no caminho certo?&lt;/p&gt;

&lt;p&gt;Vou explicar meu humilde ponto de vista com exemplos e opiniões sobre qualidade de código. Vou abordar casos de uso com JavaScript, mas nada te impede aplicar muitas dessas dicas usando outras linguagens.&lt;/p&gt;

&lt;h2 id=&#34;gdd-8211-gambiarra-driven-development&#34;&gt;GDD &amp;#8211; Gambiarra Driven Development&lt;/h2&gt;

&lt;p&gt;Vamos começar pela metodologia mais antiga e talvez a mais adotada no mercado. Já trabalhei com profissionais que defendiam com unhas e dentes o não uso de padrões e boas práticas. Vamos ver as &lt;del&gt;desculpas&lt;/del&gt; justificativas mais usadas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;O projeto é muito simples. Não precisa de muita frescura.&lt;/li&gt;
&lt;li&gt;Faço isso há muitos anos e dificilmente tenho problemas.&lt;/li&gt;
&lt;li&gt;Desse jeito entrego em 10 minutos o que faríamos em horas.&lt;/li&gt;
&lt;li&gt;Não preciso padronizar, o código tá fácil de entender.&lt;/li&gt;
&lt;li&gt;Não temos tempo para documentar.&lt;/li&gt;
&lt;li&gt;Não temos tempo para escrever testes.&lt;/li&gt;
&lt;li&gt;Não temos tempo para refatorar.&lt;/li&gt;
&lt;li&gt;Esse código aí não é meu.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conseguiu se lembrar de alguns momentos na sua carreira, onde você já falou ou ouviu qualquer uma das frases acima? Não? Sortudo!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Não acredito que é errado você usar uma gambiarra para resolver um erro, desde que posteriormente você empregue uma solução mais robusta. O problema maior ocorre quando o uso de soluções paliativas se tornam frequentes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mas de longe esse é o único ou pior problema que encontramos na codificação. Gambiarras e &lt;em&gt;anti-patterns&lt;/em&gt; podem ser bons e eficientes a curto prazo, mas a longo prazo te mostram o inferno na terra.&lt;/p&gt;

&lt;p&gt;Vou apontar algumas boas práticas voltadas á escrita de código e o motivo para usá-las.&lt;/p&gt;

&lt;h2 id=&#34;antes-de-tudo-8230&#34;&gt;Antes de tudo&amp;#8230;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Você como desenvolvedor, tem a obrigação de entender cada linha de código que você escreve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Estude boas práticas e metodologias sempre. Mas não seja ingênuo a ponto de acreditar que a adoção de uma delas irá salvar parte do seu projeto/equipe. Muitas soluções podem trazer novos problemas. Quantas vezes a solução de um bug gerou outros 10 na aplicação? Por isso é necessário sempre ter na equipe alguém experiente com bastante vivência, que saiba direcionar o projeto nesses cenários.&lt;/p&gt;

&lt;p&gt;Já vi projetos que começaram repletos de boas práticas, e terminaram desastrados por conta da falta de maturidade prática da equipe. O ponto inicial que jamais deve ser ignorado é: &lt;strong&gt;você como desenvolvedor, tem a obrigação de entender cada linha de código que você escreve&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;no-caminho-certo&#34;&gt;No caminho certo&lt;/h2&gt;

&lt;p&gt;Seu código atual tem uma qualidade superior comparado com o que você escreveu há 6 meses atrás? Se sua resposta for sim, isso indica que você está no caminho certo. Programação é algo em constante evolução, o você programador, também deve evoluir. Com o passar dos anos seu código deve se tornar mais bem organizado, limpo e elegante.&lt;/p&gt;

&lt;p&gt;Uma leitura obrigatória é o livro &lt;a href=&#34;http://www.saraiva.com.br/clean-code-a-handbook-of-agile-software-craftsman-3095979.html&#34; target=&#34;_blank&#34;&gt;Clean Code&lt;/a&gt;. Muitos artigos e palestras sobre boas práticas (incluindo esse artigo), repetem pontos abordados nesse livro. Já vi até empresas cobrando a leitura desse livro como requisito para contratação.&lt;/p&gt;

&lt;h2 id=&#34;código-limpo&#34;&gt;Código Limpo&lt;/h2&gt;

&lt;p&gt;Enquanto o _GDD_ pode te dar felicidade a curto prazo, escrever código de forma limpa e consistente vai te garantir um futuro mais confortável. Você terá um código de fácil entendimento, o que tornará sua manutenção mais eficiente. E se você for um garoto prendado e cobrir sua aplicação com o máximo possível de testes, erros de regressão não irão mais chatear teu cliente/chefe.&lt;/p&gt;

&lt;p&gt;Vou focar em poucos pontos. Se quiser mais conteúdo, leia o &lt;a href=&#34;http://www.saraiva.com.br/clean-code-a-handbook-of-agile-software-craftsman-3095979.html&#34; target=&#34;_blank&#34;&gt;Clean Code&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-review&#34;&gt;Code Review&lt;/h3&gt;

&lt;p&gt;Sempre peça para um colega revisar teu código. Se outra pessoa entendeu perfeitamente o que você escreveu, é um bom sinal.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Qualquer tolo consegue escrever código que um computador entenda. Bons programadores escrevem código que humanos possam entender.&amp;#8221; &amp;#8211; Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;linters&#34;&gt;Linters&lt;/h3&gt;

&lt;p&gt;Ferramentas que escaneiam nosso código procurando o uso de más práticas e possíveis erros de execução, são nossos aliados. No dia-a-dia costumo usar o &lt;a href=&#34;http://jshint.com/&#34; target=&#34;_blank&#34;&gt;JSHint&lt;/a&gt; e agora meu novo parceiro: &lt;a href=&#34;https://github.com/danielstjules/jsinspect&#34; target=&#34;_blank&#34;&gt;JSInspect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Gosto do JSHint pelo fato de poder customizar algumas regras. Já o JSInspect te ajuda á identificar o padrão &lt;em&gt;copy &amp;amp; paste&lt;/em&gt;, te ajudando a escrever módulos melhores.&lt;/p&gt;

&lt;h3 id=&#34;nomenclaturas&#34;&gt;Nomenclaturas&lt;/h3&gt;

&lt;p&gt;Quando me perguntam qual parte da programação eu acho mais difícil, respondo na lata: nomear coisas.&lt;/p&gt;

&lt;p&gt;Passamos boa parte do tempo fazendo isso no nosso código, nomeando funções, variáveis, classes, namespaces, etc. Muitas vezes demoramos até chegar em um resultado bacana.&lt;/p&gt;

&lt;h3 id=&#34;seja-verboso&#34;&gt;Seja verboso&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Existem duas coisas muito difíceis na Ciência da Computação: invalidar cache e dar nome às coisas.&amp;#8221; &amp;#8211; Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consegue me dizer se você entende de cara o que faz a instrução abaixo?&lt;/p&gt;

&lt;pre&gt;u.cptTasks = false;&lt;/pre&gt;

&lt;p&gt;E agora com o código abaixo?&lt;/p&gt;

&lt;pre&gt;var u = new User();
u.name = &#39;Joana Souza&#39;;
u.adminPerm = true;
u.cptTasks = false;
u.save();&lt;/pre&gt;

&lt;p&gt;Conseguiu entender tudo? Vamos ver se fica mais fácil:&lt;/p&gt;

&lt;pre&gt;var user = new User();
user.name = &#39;Joana Souza&#39;;
user.hasAdministratorPermissions = true;
user.didCompleteAllTasks = false;
user.save();&lt;/pre&gt;

&lt;p&gt;Nomear a variável como &lt;em&gt;u&lt;/em&gt; não ajudou muito. Principalmente se você for reutilizar essa variável muitas linhas abaixo. Abreviações também atrapalham bastante. Duvido que de imediato você soube o significado de &lt;em&gt;u.cptTasks&lt;/em&gt;. Pode ter tido várias idéias, o que te guiou ao velho &lt;em&gt;achismo&lt;/em&gt;. E quantos erros já não cometemos pelo simples fato de _acharmos_ isso ou aquilo?&lt;/p&gt;

&lt;h3 id=&#34;considere-o-uso-da-nossa-querida-língua-portuguesa&#34;&gt;Considere o uso da nossa querida Língua Portuguesa&lt;/h3&gt;

&lt;p&gt;Usar a língua portuguesa para nomear coisas pode ser muito bom, principalmente para os novatos. Pelo simples motivo de que fazendo isso, fica mais visível o que é API nativa da linguagem/browser, e API proprietária. Dá uma olhada:&lt;/p&gt;

&lt;pre&gt;var usuario = new Usuario();
usuario.nome = &#39;Joana Souza&#39;;
usuario.temPermissoesAdministrativas = true;
usuario.completouTodasTarefas = false;
usuario.salvar();&lt;/pre&gt;

&lt;p&gt;Ficou mais confortável né? Seu cérebro praticamente se deu ao único trabalho de compreender o código. Não precisou traduzir de um idioma para outro. Mas isso é também uma faca de dois gumes.&lt;/p&gt;

&lt;p&gt;Conhecer a língua inglesa é extremamente importante no mundo da programação, pois muitas documentações e materiais estão nesse idioma. Logo, nomear coisas em português te tira a oportunidade de praticar o idioma, pelo menos na forma escrita. Vale á pena bater um papo com a sua equipe á respeito disso.&lt;/p&gt;

&lt;h3 id=&#34;adote-uma-convenção&#34;&gt;Adote uma convenção&lt;/h3&gt;

&lt;p&gt;A adoção de uma convenção facilita muito na padronização de estilo de escrita e organização de código. É uma ótima opção iniciar com alguma existente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://snowdream.github.io/javascript-style-guide/javascript-style-guide/br/naming-conventions.html&#34; target=&#34;_blank&#34;&gt;Convenção de Nomenclatura &amp;#8211; Airbnb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://andrecomws.com/lab/code-standards/&#34; target=&#34;_blank&#34;&gt;Padrões de Código Front-End &amp;#8211; Isobar&lt;/a&gt; (a versão original está &lt;a href=&#34;http://isobar-idev.github.io/code-standards/&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript.crockford.com/code.html&#34; target=&#34;_blank&#34;&gt;Convenções do Douglas Crockford&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/styleguide/javascriptguide.xml&#34; target=&#34;_blank&#34;&gt;Padrões de Código da Google&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bônus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Leitura obrigatória: &lt;a href=&#34;http://jstherightway.org/pt-br/&#34; target=&#34;_blank&#34;&gt;JavaSript the Right Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;variáveis-e-funções-não-utilizadas&#34;&gt;Variáveis e funções não utilizadas&lt;/h3&gt;

&lt;p&gt;Variáveis e funções não utilizadas são um belo exemplo de sujeira. Alguma vez você já deu manutenção em algum código, cujo algum tempo foi investido para compreender o que foi escrito, pra no final das contas perceber que o código estava morto, sem utilização? Chato, né?&lt;/p&gt;

&lt;p&gt;Pra se livrar dessa sujeira é bem simples: ninguém está usando? Apague! Essa regra também vale para código comentado.&lt;/p&gt;

&lt;h3 id=&#34;reinvenção-da-roda&#34;&gt;Reinvenção da roda&lt;/h3&gt;

&lt;p&gt;Esse erro é geralmente cometido por novos e &lt;em&gt;antigos juniores&lt;/em&gt; (entendo como antigo júnior aquele profissional que programa há muitos anos, mas nunca se interessou em aprofundar em uma linguagem).&lt;/p&gt;

&lt;p&gt;O fato de não conhecer muito bem a API da linguagem, pode te levar á reinventar á roda.&lt;/p&gt;

&lt;p&gt;Um exemplo disso é quando precisamos fazer um filtro em um array. Quem não está familiarizado, irá primeiramente fazer o bom e velho &lt;em&gt;for&lt;/em&gt;, possivelmente desconhecendo outras opções como &lt;em&gt;Array.filter&lt;/em&gt; e &lt;em&gt;Array.map&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;funções-pequenas&#34;&gt;Funções Pequenas&lt;/h3&gt;

&lt;p&gt;Funções devem ser claras, objetivas e pequenas. Respeite a regra da responsabilidade única: sua função deve fazer somente uma coisa, e deve fazê-la muito bem.&lt;/p&gt;

&lt;p&gt;Dá uma olhada no exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;usuario.salvar()

...

function salvar() {
    var camposObrigatorios = [ &#39;nome&#39;, &#39;email&#39;, &#39;cpf&#39; ];

    camposObrigatorios.forEach( ( propriedade ) =&amp;gt; {
        if ( !usuario[ propriedade ] ) {
            throw new Error( `É obrigatório informar o ${ propriedade } do usuário.` );
        }
    } );

    $http.post( &#39;http://app.com/api/usuario&#39;, usuario )
        .success( ... )
        .error( ... )
        .finally( ... );
}&lt;/pre&gt;

&lt;p&gt;Pelo nome da função ficou claro o objetivo dela. Mas analisando vemos a implementação de duas coisas: validação e persistência dos dados. Poderíamos dividir as responsabilidades da seguinte forma:&lt;/p&gt;

&lt;pre&gt;validarUsuario() &amp;&amp; usuario.salvar();

...

function validarUsuario() {
    var camposObrigatorios = [ &#39;nome&#39;, &#39;email&#39;, &#39;cpf&#39; ];

    camposObrigatorios.forEach( ( propriedade ) =&amp;gt; {
        if ( !usuario[ propriedade ] ) {
            throw new Error( `É obrigatório informar o ${ propriedade } do usuário.` );
        }
    } );

    return true;
}

function salvar() {
    $http.post( &#39;http://app.com/api/usuario&#39;, usuario )
        .success( ... )
        .error( ... )
        .finally( ... );
}&lt;/pre&gt;

&lt;p&gt;Manter suas funções enxutas te auxilia á praticar o reuso do código.&lt;/p&gt;

&lt;p&gt;Esse é um assunto que pode ser extenso. Uma discussão bem bacana rolou no StackOverflow. Dá uma olhada &lt;a href=&#34;http://pt.stackoverflow.com/questions/30772/uma-fun%C3%A7%C3%A3o-grande-ou-muitas-pequenas&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;comentários&#34;&gt;Comentários&lt;/h3&gt;

&lt;p&gt;Já ouvi dizer que código semântico dispensa comentários. Concordo parcialmente com isso. Acredito que é válido usar comentários nas seguintes situações:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utilização muito pouco comum de uma parte da API pode ajudar a galera mais nova&lt;/li&gt;
&lt;li&gt;Nem sempre conseguimos deixar nosso código semântico, a ponto dele &lt;em&gt;contar o que está acontecendo&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Existem poucos momentos em que devemos fazer uso de uma má prática. E é bom deixar documentado o motivo antes que alguém refatore e quebre alguma funcionalidade&lt;/li&gt;
&lt;li&gt;Sua aplicação expõe uma API pública. Sugiro o uso do &lt;a href=&#34;http://usejsdoc.org/&#34; target=&#34;_blank&#34;&gt;JSDocs&lt;/a&gt; para manter um padrão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora  &lt;strong&gt;/* código comentado */ &lt;/strong&gt;é algo deve ter pouquíssima tolerância.&lt;/p&gt;

&lt;h3 id=&#34;indentação&#34;&gt;Indentação&lt;/h3&gt;

&lt;p&gt;Esse é conhecido como &lt;em&gt;problema de perfumaria&lt;/em&gt;. Saca só:&lt;/p&gt;

&lt;pre&gt;if(usuario.idade!==null||usuario.idade!==undefined||typeof usuario.idade == &#39;number&#39;||usuario.idade&amp;lt;18){
  alert(&#39;O usuário não possui idade suficiente para ser cadastrado nesse sistema.&#39;);
  return false;
}else{
    usuario.salvar();
}&lt;/pre&gt;

&lt;p&gt;Lindo né? Que tal dar mais espaço pra essa bagunça?&lt;/p&gt;

&lt;pre&gt;if ( usuario.idade &amp;&amp; typeof usuario.idade === &#39;number&#39; &amp;&amp; usuario.idade &amp;lt; 18 ) {
    alert( &#39;O usuário não possui idade suficiente para ser cadastrado nesse sistema.&#39; );
    return false;
}

usuario.salvar();&lt;/pre&gt;

&lt;p&gt;E agora? Ficou mais fácil de ler?&lt;/p&gt;

&lt;p&gt;Enfiar todo o código em uma pequena lata de sardinha pode dificultar um pouco a sua compreensão, por mais que o seu editor de texto ou IDE tenha um highlight com alto contraste. Uma ferramenta bacana pra te ajudar á manter esse padrão é o &lt;a href=&#34;http://jscs.info/&#34; target=&#34;_blank&#34;&gt;JSCS&lt;/a&gt;. Gosto de usar o preset jQuery dessa ferramenta, pois o código fica com mais espaçamento, deixando o mais confortável para ler.&lt;/p&gt;

&lt;h3 id=&#34;vale-lembrar-que-8230&#34;&gt;Vale lembrar que&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Muitas dicas dadas aqui retirei do livro Clean Code, e outras aprendi com o passar do tempo em experiência com diversos projetos. O seu comentário com um ponto de vista diferente pode me ajudar á aprender mais sobre o assunto.&lt;/p&gt;

&lt;p&gt;Espero ter ajudado.&lt;/p&gt;

&lt;p&gt;=)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mudar ícones dos Custom Post Types no WordPress 3.8</title>
      <link>http://tableless.com.br/mudar-icones-dos-custom-post-types-wordpress-3-8/</link>
      <pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/mudar-icones-dos-custom-post-types-wordpress-3-8/</guid>
      <description>

&lt;p&gt;No dia 12 de Dezembro a Equipe do WordPress liberou a sua mais nova versão, o &lt;strong&gt;WordPress 3.8 Parker&lt;/strong&gt;, que é uma referência ao &lt;strong&gt;Charlie Parker&lt;/strong&gt;, grande saxofonista de Jazz. Visualmente a versão 3.8 do WordPress foi a que trouxe mais mudanças, a começar pela belíssima renovação de design do painel que também passou a ser responsivo e acessível por todos os dispositivos móveis, o que é um grande avanço, já que não será mais preciso usar os aplicativos móveis para fazer moderação e criação de posts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/overview.jpg&#34;&gt;&lt;img class=&#34;size-full wp-image-40235 aligncenter&#34; alt=&#34;overview&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/overview.jpg&#34; srcset=&#34;uploads/2014/01/overview.jpg 623w, uploads/2014/01/overview-329x101.jpg 329w, uploads/2014/01/overview-588x182.jpg 588w&#34; sizes=&#34;(max-width: 623px) 100vw, 623px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A fonte do Painel agora é a &lt;strong&gt;Open Sans&lt;/strong&gt; importada do &lt;a title=&#34;Open Sans&#34; href=&#34;http://www.google.com/fonts/specimen/Open+Sans&#34; target=&#34;_blank&#34;&gt;Google Web Fonts&lt;/a&gt; e foram criados 8 novos temas super coloridos e vibrantes (em um próximo artigo iremos ver como mudar a cor desses temas) para deixar a sua experiencia de uso mais agradável e única e como de costume foi lançado um novo tema padrão: &lt;a title=&#34;Novo tema padrão do WordPress 3.8&#34; href=&#34;http://twentyfourteendemo.wordpress.com/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Twenty Fourteen&lt;/strong&gt;&lt;/a&gt; além de novos ícones no menu.&lt;/p&gt;

&lt;p class=&#34;aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/colors1.png&#34;&gt;&lt;img class=&#34; wp-image-40238 aligncenter&#34; alt=&#34;colors&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/colors1.png&#34; width=&#34;559&#34; height=&#34;398&#34; srcset=&#34;uploads/2014/01/colors1.png 932w, uploads/2014/01/colors1-235x168.png 235w, uploads/2014/01/colors1-435x310.png 435w&#34; sizes=&#34;(max-width: 559px) 100vw, 559px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Esses novos ícones são do pacote &lt;strong&gt;Dashicons&lt;/strong&gt;, um pacote de &lt;a href=&#34;http://tableless.com.br/utilizando-icones-formato-font/&#34; title=&#34;Font icons – Utilizando ícones em formato de font&#34;&gt;font para ícones&lt;/a&gt; que foi incorporada ao WordPress. Sua vantagem é a responsividade, já que o ícone se adapta a todo tamanho de tela sem serrilhar, é mais fácil de manipular a cor, posição e tamanho via CSS, o que torna sua aparência mais agradável. quem já acompanha o &lt;strong&gt;&lt;a href=&#34;http://tableless.com.br/&#34;&gt;Tableless&lt;/a&gt;&lt;/strong&gt; e lê os artigos do Mestre Jedi &lt;strong&gt;&lt;a href=&#34;http://tableless.com.br/author/diego-eis/&#34;&gt;Diego Eis&lt;/a&gt;&lt;/strong&gt; sabe bem disso, não é?&lt;/p&gt;

&lt;p&gt;E para quem usa &lt;a href=&#34;http://tableless.com.br/custom-post-types-wordpress&#34;&gt;Custom Post Types&lt;/a&gt; no WordPress pode ter notado o sumiço dos ícones (ou quer atualizá-los), pois os Custom Post Types manipulam o conteúdo do WordPress possibilitando que você personalize-o a partir da sua necessidade em um projeto, criando por exemplo um Portfólio personalizado em seu site, um Cadastro de Clientes e etc, as possibilidades são infinitas. Sabendo disso o nome Custom Post Types passa até a ficar estranho, pois o WordPress quebrou esse limite de somente paginas e posts e agora manipula todo tipo de conteúdo, é Você quem manda! Se Você quiser saber mais sobre o assunto, leia esse excelente artigo aqui do Tableless: &lt;a href=&#34;http://tableless.com.br/custom-post-types-wordpress/&#34;&gt;Custom Post Types no WordPress&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;vamos-à-prática&#34;&gt;Vamos à Prática&lt;/h2&gt;

&lt;p&gt;E agora Como adicionar esses novos ícones ao meu Custom Post Types? Eu já vi algumas poucas &lt;del datetime=&#34;2014-01-07&#34;&gt;gambiarras&lt;/del&gt; soluções na internet e não achei nada conveniente. Logo descobri que era mais fácil do que eu imaginava e resolvi escrever este pequeno tutorial para mostrar o quão fácil é trocar o ícone de seu Custom Post Type por um novo e lindo ícone.&lt;/p&gt;

&lt;p&gt;A Primeira coisa que se deve fazer é acessar seu arquivo &lt;em&gt;functions.php&lt;/em&gt; e editar uma linha da função que cria o Custom Post Types (Nesse momento você deve ter plena certeza do que está fazendo, pois qualquer movimento errado em seu arquivo functions.php pode fazer seu site &lt;del datetime=&#34;2014-01-07&#34;&gt;explodir&lt;/del&gt; sair do ar).&lt;/p&gt;

&lt;p&gt;Nesse exemplo é a linha 7, onde está escrito: &lt;strong&gt;menu_icon&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$args = array(
        &#39;labels&#39; =&amp;gt; $labels,
        &#39;public&#39; =&amp;gt; true,
        &#39;publicly_queryable&#39; =&amp;gt; true,
        &#39;show_ui&#39; =&amp;gt; true,
        &#39;query_var&#39; =&amp;gt; true,
        &#39;menu_icon&#39; =&amp;gt; &#39;&lt;!--?php bloginfo(&#39;template_url&#39;); ?--&gt;/images/meu-icone.png&#39;,
        &#39;rewrite&#39; =&amp;gt; true,
        &#39;capability_type&#39; =&amp;gt; &#39;post&#39;,
        &#39;hierarchical&#39; =&amp;gt; false,
        &#39;menu_position&#39; =&amp;gt; null,
        &#39;supports&#39; =&amp;gt; array(&#39;title&#39;,&#39;editor&#39;,&#39;thumbnail&#39;)
      );&lt;/pre&gt;

&lt;p&gt;Se seu Custom Post Types está com algo assim: &lt;strong&gt; &amp;#8216;menu_icon&amp;#8217; =&amp;gt; null&lt;/strong&gt; , ou &lt;strong&gt;não tem esse campo&lt;/strong&gt;, basta você adicionar dentro do array que está guardado na variável &lt;strong&gt;$args&lt;/strong&gt; a linha&lt;strong&gt; &amp;#8216;menu_icon&amp;#8217; =&amp;gt; &amp;#8221;&lt;/strong&gt; e agora vem a parte fácil. Você vai escolher seu novo ícone nesse site: &lt;a href=&#34;http://melchoyce.github.io/dashicons/&#34;&gt;http://melchoyce.github.io/dashicons/&lt;/a&gt; e copiar seu nome, por exemplo: &lt;strong&gt;dashicons-wordpress&lt;/strong&gt; e coloca-lo entre aspas simples depois de&lt;strong&gt; =&amp;gt;&lt;/strong&gt; ficando assim: &lt;strong&gt;&amp;#8216;menu_icon&amp;#8217; =&amp;gt; &amp;#8216;dashicons-wordpress&amp;#8217;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/dash.png&#34;&gt;&lt;img class=&#34;size-full wp-image-40240 aligncenter&#34; alt=&#34;dashicons&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/dash.png&#34; width=&#34;159&#34; height=&#34;257&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa imagem troquei o ícone padrão de posts e dos Custom Post Types (Projetos e Destaque) para o &lt;strong&gt;dashicons-wordpress&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Feito isto, basta conferir no seu painel seu novo ícone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transições inteligentes na experiência do usuário</title>
      <link>http://tableless.com.br/transicoes-inteligentes-na-experiencia-usuario/</link>
      <pubDate>Mon, 16 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/transicoes-inteligentes-na-experiencia-usuario/</guid>
      <description>

&lt;p&gt;As novas propriedades do CSS3 nos surpreendem cada vez mais. Não só pelo fato de terem simplificado muitas coisas (só quem lembra do trabalho para se fazer uma borda arredondada ou sombra em um elemento entende o quão úteis são algumas propriedades), mas também pelo poder que nos deu de enriquecermos a experiência do usuário. Se você ainda não está por dentro dessa maravilha, &lt;a href=&#34;http://tableless.com.br/?s=css3&#34;&gt;confira mais artigos sobre CSS3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um dia, navegando pela &lt;em&gt;interwebs&lt;/em&gt;, achei esse &lt;a href=&#34;http://uxdesign.smashingmagazine.com/2013/10/23/smart-transitions-in-user-experience-design/&#34; title=&#34;Smart transitions in user experience design&#34;&gt;artigo&lt;/a&gt; do &lt;a href=&#34;https://twitter.com/webchaeschtli&#34; title=&#34;Perfil do twitter&#34;&gt;Adrian Zumbrunnen&lt;/a&gt; no site da Smashing Magazine. Gostei bastante do conteúdo e resolvi traduzi-lo pra gente.&lt;/p&gt;

&lt;p&gt;A idéia era a tradução ao pé da letra, mas em alguns casos de expressões que ficariam estranhas no português, deixei em inglês mesmo (algumas que inclusive estamos mais acostumados a usar). Vamos lá&amp;#8230;&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Alguns websites superam outros, seja em seu conteúdo, usabilidade, design, funcionalidades, etc. Detalhes do design de interação e animação fazem uma diferença fundamental em websites modernos. Vamos compartilhar algumas lições tiradas de vários modelos e analisar por que esses simples padrões funcionam tão bem.&lt;/p&gt;

&lt;p&gt;Quando desenhamos/projetamos produtos digitais, nós frequentemente utilizamos aplicações digitais como Photoshop e Sketch. A maioria das pessoas que já estão no mercado por alguns anos, obviamente sabem que design é muito mais que apenas apresentação visual. Ainda assim, muitos continuam a criar interfaces com design estático. &lt;a href=&#34;http://www.nytimes.com/2003/11/30/magazine/30IPOD.html?pagewanted=all&#34;&gt;Steve Jobs uma vez disse&lt;/a&gt; sobre design:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Design não é apenas o que parece e o que se sente. Design é como funciona.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nossa experiência e impressão de um produto são formadas por uma combinação de fatores, com a interação desempenhando um papel fundamental. Não podemos mais pensar em interfaces de usuário com design estático e adicionar a mágica da interação depois. Em vez disso, precisamos abraçar a natureza interativa da web desde o início e pensar na interação como componente natural.&lt;/p&gt;

&lt;p&gt;Vejamos alguns exemplos em que a interação inteligente, definida pela animação sutil, melhora suavemente a experiência do usuário.&lt;/p&gt;

&lt;h2 id=&#34;scroll-animado&#34;&gt;Scroll Animado&lt;/h2&gt;

&lt;p&gt;A benção e a maldição da web são os hiperlinks. Quando você clica em um link, isso pode levá-lo a qualquer lugar, da página de um produto para o site da loja do velho e assustador fantoche no fim da rua. O resultado é a perda de contexto.&lt;/p&gt;

&lt;p&gt;Uma das grandes características sobre a experiência do usuário de livros é a linearidade. Cada capítulo em um livro baseia-se no anterior. Você deve ler o capítulo um para poder entender o capítulo dois. Quando você pula um capítulo, você está ciente de que pode perder algo e, assim não obter algum conhecimento sobre o conteúdo subseqüente. Na web, e principalmente em websites longos, isso muitas vezes acontece inconscientemente. Ao adicionar um scroll animado, podemos consertar isso:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39940&#34; alt=&#34;scroll-animado&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/scroll-animado.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Compare a imagem anterior com essa:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39943&#34; alt=&#34;scroll-sem-animacao&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/scroll-sem-animacao.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Compare o comportamento padrão dos links (âncoras) com o comportamento animado. Pular conteúdo não é mais uma ação inconsciente; é uma decisão. O site &lt;a href=&#34;http://hopelies.com/&#34;&gt;Hope Lies at 24 Frames Per Second&lt;/a&gt; tem um botão de menu para a sua versão móvel que envia o usuário para o topo da página, sem qualquer animação. Levei mais de um minuto para descobrir o que realmente tinha acontecido.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Mudanças bruscas em uma interface são difíceis para os usuários entenderem. Não deixe-os no escuro, sempre mostre o que está acontecendo.&lt;/p&gt;

&lt;h2 id=&#34;alternância-de-estados&#34;&gt;Alternância de estados&lt;/h2&gt;

&lt;p&gt;Como vimos no último exemplo, transições ajudam os usuários a entender o ritmo e o fluxo de uma interface. Nada parece mais artificial do que uma mudança brusca, pois &lt;strong&gt;mudanças bruscas simplesmente não existem no mundo real&lt;/strong&gt;. Vamos olhar outro exemplo: &lt;em&gt;menus que se alternam (toggle menus)&lt;/em&gt;. Usuários associam o ícone de &amp;#8220;&lt;em&gt;mais&lt;/em&gt;&amp;#8221; (+) com a ação de adicionar conteúdo ou expandir um elemento. Girando o ícone em 45°, o &amp;#8220;&lt;em&gt;mais&lt;/em&gt;&amp;#8221; (+) torna-se uma &amp;#8220;&lt;em&gt;xis&lt;/em&gt;&amp;#8221; (x), um elemento de interface amplamente entendido como &lt;em&gt;fechar&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39944&#34; alt=&#34;Stateful-toggle&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/Stateful-toggle.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Essa simples transição muda completamente o significado do ícone. Esse pequeno detalhe faz a diferença entre ter que adivinhar o que vai acontecer a seguir e saber o que o ícone significa em cada estado. Se você me perguntar, essa alternância é bastante &lt;em&gt;&amp;#8220;amigável&amp;#8221; (user-friendly&lt;/em&gt;). Além disso, observe que o ícone de &amp;#8220;&lt;em&gt;mais&lt;/em&gt;&amp;#8221; sempre gira na mesma direção que o conteúdo, reforçando o fluxo de informações.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Faça os elementos de interface do seu website compreensíveis em cada estado.&lt;/p&gt;

&lt;h2 id=&#34;formulários-e-comentários-recolhidos-collapsed&#34;&gt;Formulários e comentários recolhidos (&lt;em&gt;collapsed&lt;/em&gt;)&lt;/h2&gt;

&lt;p&gt;Os formulários de comentários em vários blogs e sites de notícias não são os elementos mais bonitos de um website. Por que? Bem, a maioria deles não são um tanto amigáveis, certo? Quando você está prestes a postar um comentário, você só quer começar a escrever o comentário em si e nada mais. Ao invés disso, um formulário padrão de comentários lhe pede todos os tipos de outras coisas primeiro. É irritante.&lt;/p&gt;

&lt;p&gt;Para motivarmos as pessoas a comentarem mais, nós podemos &lt;em&gt;recolher&lt;/em&gt; (&lt;em&gt;collapse&lt;/em&gt;) o formulário e &lt;strong&gt;só mostrarmos o elemento mais crucial: o campo de comentário&lt;/strong&gt;. Quando o usuário clica no campo, você pode expandir o formulário. Um exemplo no mundo real dessa revelação progressiva pode ser encontrado na versão beta do site do New York Times:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39945&#34; alt=&#34;NY-Times&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/NY-Times.gif&#34; width=&#34;530&#34; height=&#34;592&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Você pode ir até mais longe, definindo o foco do cursor no campo de comentario quando o formulário se expandir. Porém, essa abordagem tem um problema: um princípio fundamental do design de interação é que &lt;strong&gt;uma ação deve acontecer próxima ao local da onde a interação ocorre&lt;/strong&gt; (próximo ao local de atenção). Podemos então ir um passo além, e animar o campo de comentário para orientar o usuário:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39946&#34; alt=&#34;ExpandingComments&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/ExpandingComments.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Você pode até fixar o campo de comentário no topo, expandi-lo nesse sentido e exibir os campos adicionais abaixo dele.&lt;/p&gt;

&lt;p&gt;Como você pode ver, isso reduz a desordem e faz com que o formulário de comentário seja mais convidativo. Mas, e se &lt;em&gt;&amp;#8220;recolhermos&amp;#8221; (collapsing)&lt;/em&gt; todo os comentários anteriores também?&lt;/p&gt;

&lt;p&gt;Recolhendo os comentários, nós temos a barra de rolagem para representar o comprimento do artigo (conteúdo) em si, ao invés da página inteira (com os comentários expandidos). Uma prática comum é a de carregar automaticamente os comentários quando o usuário chega ao fim de uma página. Devemos evitar forçar o usuário a clicar a menos que haja uma boa razão para isso.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Exibição progressiva a fim de reduzir os componentes de interface do usuário à sua essência. Revele funcionalidades de acordo com que os usuários precisem delas.&lt;/p&gt;

&lt;h2 id=&#34;puxe-para-atualizar&#34;&gt;Puxe para atualizar&lt;/h2&gt;

&lt;p&gt;Uma das interações mais interessantes a surgir logo após a introdução do iPhone foi o &amp;#8220;&lt;em&gt;puxar para atualizar (pull to refresh)&lt;/em&gt;&amp;#8220;, iniciada por Loren Brichter. Ela permite ao usuário atualizar o conteúdo de rolagem que esteja disposto numa ordem cronológica reversa. Você pode ver esse conceito em ação no aplicativo do Twitter. Uma vez que você deslizou para o topo da lista de tweets, deslize um pouco mais para atualizar a &lt;em&gt;timeline&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39947&#34; alt=&#34;Twitter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/Twitter.gif&#34; width=&#34;240&#34; height=&#34;360&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Por que isso funciona tão bem? Antes do &amp;#8220;&lt;em&gt;puxar para atualizar&lt;/em&gt;&amp;#8221; existir, os usuários tinham que apertar o botão de atualizar nos navegadores para carregar mais conteúdo. Ao juntar o desejo do usuário de encontrar mais conteúdo com a ação de atualizar, a necessidade de uma ação explícita tornou-se obsoleta.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Ao ligar inteção com ação, a experiência torna-se mais transparente.&lt;/p&gt;

&lt;h2 id=&#34;sticky-labels&#34;&gt;Sticky Labels&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Sticky labels&lt;/em&gt; são uma outra sutil, mas útil combinação de um componente de interface e uma transição significativa. Confira o uso desta técnica no &lt;a href=&#34;http://edenspiekermann.com/projects&#34;&gt;portfólio&lt;/a&gt; da Edenspiekermann.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39948&#34; alt=&#34;Sticky-Label&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/Sticky-Label.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As &lt;em&gt;labels&lt;/em&gt; de projeto deslizam juntamente com o conteúdo, proporcionando assim contexto para as imagens à direita, até o próximo projeto aparecer. Este comportamento é semelhante ao livro de endereços no iOS e é especialmente útil para fornecer contextos em seções longas. A transição oferece uma melhor orientação e descrições fáceis baseadas no contexto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Use &lt;em&gt;sticky labels&lt;/em&gt; para seções longas em que as descrições ou títulos adicionam informações valiosas ao conteúdo que não cabe na &lt;em&gt;viewport&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;affordance-transition&#34;&gt;Affordance transition&lt;/h2&gt;

&lt;p&gt;O conceito de &lt;em&gt;affordance&lt;/em&gt; deriva da psicologia cognitiva e refere-se às características particulares de um objeto que guia o espectador.&lt;/p&gt;

&lt;p&gt;No contexto de UI design, o &lt;a href=&#34;http://ec.europa.eu/regional_policy/archive/country/commu/docevent/26112008/5_doulgerof_glossary.pdf&#34;&gt;glossário de usabilidade&lt;/a&gt; (PDF) do website da EU, define-o assim:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;&lt;em&gt;Affordance&lt;/em&gt; é uma propriedade desejável de uma interface de usuário &amp;#8211; software que, naturalmente, leva as pessoas a tomarem as medidas corretas para realizarem seus objetivos.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Ridges (detalhes?)&lt;/em&gt; são muitas vezes utilizados para melhorar a &lt;em&gt;affordance&lt;/em&gt;. &lt;em&gt;Ridges&lt;/em&gt; em torno de um botão sugerem que este pode ser manipulado. Esta técnica de UX foi amplamente popularizada pelo aplicativo da câmera no iOS.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39949&#34; alt=&#34;iOS_Lockscreen-500-final&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/iOS_Lockscreen-500-final.jpg&#34; width=&#34;500&#34; height=&#34;750&#34; srcset=&#34;uploads/2013/12/iOS_Lockscreen-500-final.jpg 500w, uploads/2013/12/iOS_Lockscreen-500-final-112x168.jpg 112w, uploads/2013/12/iOS_Lockscreen-500-final-206x310.jpg 206w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Os traços (&lt;em&gt;ripples&lt;/em&gt;) em torno do botão de câmera na tela de bloqueio do iOS 6, sugerem a idéia do botão ser arrastável. A Apple removeu-os no iOS 7, aparentemente porque os usuários se acostumaram a isso, tornando o ícone mais parecido com um botão independente. Porém, o que acontece é ainda a mesma coisa: quando você arrasta o botão, a tela de bloqueio revela a câmera por baixo. Essa é uma grande técnica para apontar os usuários para os recursos em uma interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Dê aos elementos uma alta &lt;em&gt;affordance&lt;/em&gt; para apontar os usuários para os recursos em uma interface.&lt;/p&gt;

&lt;h2 id=&#34;ocultar-com-base-no-contexto&#34;&gt;Ocultar com base no contexto&lt;/h2&gt;

&lt;p&gt;O Google Chrome no iOS teve o a ação de ocultar baseada no contexto desde que foi lançado. Veja na imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39950&#34; alt=&#34;CBH&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/CBH.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A idéia básica é que os controles de navegação se escondam automaticamente uma vez que o usuário rolar a página para baixo. Assim que o usuário rolar a página para cima novamente, os controles reaparecem. Essa abordagem tanto melhora a experiência contextual (com foco no conteúdo em si) como aumenta o espaço da tela. Esse último, claro, particularmente importante em dispositivos móveis.&lt;/p&gt;

&lt;p&gt;A premissa é que os &lt;strong&gt;usuários vão fluir com o conteúdo que estão consumindo&lt;/strong&gt;. Logo que eles pararem esse fluxo, uma mudança de contexto provavelmente seja necessária; assim, os controles de navegação reaparecem. Embora essa técnica economize espaço de tela, verifique se essa premissa é válida no seu caso.&lt;/p&gt;

&lt;p&gt;O iOS levou isso a um passo adiante. Quando você chega ao fim de uma página, os controles de navegação se expandem novamente. Isso é um bom exemplo de incorporação dinâmica das necessidades do usuário em uma interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Use a ação de ocultar baseada no contexto para melhorar o foco do usuário e economizar espaço na tela.&lt;/p&gt;

&lt;h2 id=&#34;transição-do-foco&#34;&gt;Transição do foco&lt;/h2&gt;

&lt;p&gt;Há cerca de uma semana atrás, Nikita Vasilyev, uma UI designer de Toronto, teve uma idéia bem legal. Ela desenvolveu um script que anima elementos que recebem foco. Embora ainda seja um projeto experimental, o conceito é bastante interessante. Dê uma olhada no &lt;a href=&#34;http://www.youtube.com/watch?v=MyIE9vjy8Zo&#34;&gt;vídeo&lt;/a&gt;. (E por favor, coloque seus fones de ouvido &amp;#8211; a música é épica).&lt;/p&gt;

&lt;p&gt;Ao navegar pelo teclado, muitas vezes não fica claro pro usuário para onde o foco mudou após pressionar a tecla Tab. A animação aponta-os para o lugar certo na página. A transição é sútil mas tem um grande impacto em orientar o usuário.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Oriente o usuário, independentemente de como eles navegam.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Esses são apenas alguns exemplos, entre muitos outros por aí. A questão não é mostrar as mais recentes e extravagantes técnicas de interação, mas sim destacar como pequenos detalhes de interação podem melhorar significativamente a experiência do usuário.&lt;/p&gt;

&lt;p&gt;Se nós estamos a projetar melhores produtos digitais, então &lt;strong&gt;temos que desafiar nossas crenças atuais&lt;/strong&gt; e ver como padrões de interação podem, potencialmente, facilitar a vida do usuário. Eu não estou dizendo que devemos reinventar a roda, mas seria muito ingênuo pararmos de explorar. Então, saia da sua zona de conforto. Continue explorando e testando.&lt;/p&gt;

&lt;p&gt;Se você gostou desse artigo, você pode &lt;a href=&#34;https://twitter.com/webchaeschtli&#34;&gt;me seguir&lt;/a&gt; no Twitter ou se juntar a mim para comer uma barra de chocolate suiço na Suíça.&lt;/p&gt;

&lt;p&gt;Que padrões de transição você achou especialmente útil nos seus projetos?&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do [As novas propriedades do CSS3 nos surpreendem cada vez mais. Não só pelo fato de terem simplificado muitas coisas (só quem lembra do trabalho para se fazer uma borda arredondada ou sombra em um elemento entende o quão úteis são algumas propriedades), mas também pelo poder que nos deu de enriquecermos a experiência do usuário. Se você ainda não está por dentro dessa maravilha, &lt;a href=&#34;http://tableless.com.br/?s=css3&#34;&gt;confira mais artigos sobre CSS3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um dia, navegando pela &lt;em&gt;interwebs&lt;/em&gt;, achei esse &lt;a href=&#34;http://uxdesign.smashingmagazine.com/2013/10/23/smart-transitions-in-user-experience-design/&#34; title=&#34;Smart transitions in user experience design&#34;&gt;artigo&lt;/a&gt; do &lt;a href=&#34;https://twitter.com/webchaeschtli&#34; title=&#34;Perfil do twitter&#34;&gt;Adrian Zumbrunnen&lt;/a&gt; no site da Smashing Magazine. Gostei bastante do conteúdo e resolvi traduzi-lo pra gente.&lt;/p&gt;

&lt;p&gt;A idéia era a tradução ao pé da letra, mas em alguns casos de expressões que ficariam estranhas no português, deixei em inglês mesmo (algumas que inclusive estamos mais acostumados a usar). Vamos lá&amp;#8230;&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Alguns websites superam outros, seja em seu conteúdo, usabilidade, design, funcionalidades, etc. Detalhes do design de interação e animação fazem uma diferença fundamental em websites modernos. Vamos compartilhar algumas lições tiradas de vários modelos e analisar por que esses simples padrões funcionam tão bem.&lt;/p&gt;

&lt;p&gt;Quando desenhamos/projetamos produtos digitais, nós frequentemente utilizamos aplicações digitais como Photoshop e Sketch. A maioria das pessoas que já estão no mercado por alguns anos, obviamente sabem que design é muito mais que apenas apresentação visual. Ainda assim, muitos continuam a criar interfaces com design estático. &lt;a href=&#34;http://www.nytimes.com/2003/11/30/magazine/30IPOD.html?pagewanted=all&#34;&gt;Steve Jobs uma vez disse&lt;/a&gt; sobre design:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Design não é apenas o que parece e o que se sente. Design é como funciona.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nossa experiência e impressão de um produto são formadas por uma combinação de fatores, com a interação desempenhando um papel fundamental. Não podemos mais pensar em interfaces de usuário com design estático e adicionar a mágica da interação depois. Em vez disso, precisamos abraçar a natureza interativa da web desde o início e pensar na interação como componente natural.&lt;/p&gt;

&lt;p&gt;Vejamos alguns exemplos em que a interação inteligente, definida pela animação sutil, melhora suavemente a experiência do usuário.&lt;/p&gt;

&lt;h2 id=&#34;scroll-animado-1&#34;&gt;Scroll Animado&lt;/h2&gt;

&lt;p&gt;A benção e a maldição da web são os hiperlinks. Quando você clica em um link, isso pode levá-lo a qualquer lugar, da página de um produto para o site da loja do velho e assustador fantoche no fim da rua. O resultado é a perda de contexto.&lt;/p&gt;

&lt;p&gt;Uma das grandes características sobre a experiência do usuário de livros é a linearidade. Cada capítulo em um livro baseia-se no anterior. Você deve ler o capítulo um para poder entender o capítulo dois. Quando você pula um capítulo, você está ciente de que pode perder algo e, assim não obter algum conhecimento sobre o conteúdo subseqüente. Na web, e principalmente em websites longos, isso muitas vezes acontece inconscientemente. Ao adicionar um scroll animado, podemos consertar isso:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39940&#34; alt=&#34;scroll-animado&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/scroll-animado.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Compare a imagem anterior com essa:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39943&#34; alt=&#34;scroll-sem-animacao&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/scroll-sem-animacao.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Compare o comportamento padrão dos links (âncoras) com o comportamento animado. Pular conteúdo não é mais uma ação inconsciente; é uma decisão. O site &lt;a href=&#34;http://hopelies.com/&#34;&gt;Hope Lies at 24 Frames Per Second&lt;/a&gt; tem um botão de menu para a sua versão móvel que envia o usuário para o topo da página, sem qualquer animação. Levei mais de um minuto para descobrir o que realmente tinha acontecido.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Mudanças bruscas em uma interface são difíceis para os usuários entenderem. Não deixe-os no escuro, sempre mostre o que está acontecendo.&lt;/p&gt;

&lt;h2 id=&#34;alternância-de-estados-1&#34;&gt;Alternância de estados&lt;/h2&gt;

&lt;p&gt;Como vimos no último exemplo, transições ajudam os usuários a entender o ritmo e o fluxo de uma interface. Nada parece mais artificial do que uma mudança brusca, pois &lt;strong&gt;mudanças bruscas simplesmente não existem no mundo real&lt;/strong&gt;. Vamos olhar outro exemplo: &lt;em&gt;menus que se alternam (toggle menus)&lt;/em&gt;. Usuários associam o ícone de &amp;#8220;&lt;em&gt;mais&lt;/em&gt;&amp;#8221; (+) com a ação de adicionar conteúdo ou expandir um elemento. Girando o ícone em 45°, o &amp;#8220;&lt;em&gt;mais&lt;/em&gt;&amp;#8221; (+) torna-se uma &amp;#8220;&lt;em&gt;xis&lt;/em&gt;&amp;#8221; (x), um elemento de interface amplamente entendido como &lt;em&gt;fechar&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39944&#34; alt=&#34;Stateful-toggle&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/Stateful-toggle.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Essa simples transição muda completamente o significado do ícone. Esse pequeno detalhe faz a diferença entre ter que adivinhar o que vai acontecer a seguir e saber o que o ícone significa em cada estado. Se você me perguntar, essa alternância é bastante &lt;em&gt;&amp;#8220;amigável&amp;#8221; (user-friendly&lt;/em&gt;). Além disso, observe que o ícone de &amp;#8220;&lt;em&gt;mais&lt;/em&gt;&amp;#8221; sempre gira na mesma direção que o conteúdo, reforçando o fluxo de informações.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Faça os elementos de interface do seu website compreensíveis em cada estado.&lt;/p&gt;

&lt;h2 id=&#34;formulários-e-comentários-recolhidos-collapsed-1&#34;&gt;Formulários e comentários recolhidos (&lt;em&gt;collapsed&lt;/em&gt;)&lt;/h2&gt;

&lt;p&gt;Os formulários de comentários em vários blogs e sites de notícias não são os elementos mais bonitos de um website. Por que? Bem, a maioria deles não são um tanto amigáveis, certo? Quando você está prestes a postar um comentário, você só quer começar a escrever o comentário em si e nada mais. Ao invés disso, um formulário padrão de comentários lhe pede todos os tipos de outras coisas primeiro. É irritante.&lt;/p&gt;

&lt;p&gt;Para motivarmos as pessoas a comentarem mais, nós podemos &lt;em&gt;recolher&lt;/em&gt; (&lt;em&gt;collapse&lt;/em&gt;) o formulário e &lt;strong&gt;só mostrarmos o elemento mais crucial: o campo de comentário&lt;/strong&gt;. Quando o usuário clica no campo, você pode expandir o formulário. Um exemplo no mundo real dessa revelação progressiva pode ser encontrado na versão beta do site do New York Times:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39945&#34; alt=&#34;NY-Times&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/NY-Times.gif&#34; width=&#34;530&#34; height=&#34;592&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Você pode ir até mais longe, definindo o foco do cursor no campo de comentario quando o formulário se expandir. Porém, essa abordagem tem um problema: um princípio fundamental do design de interação é que &lt;strong&gt;uma ação deve acontecer próxima ao local da onde a interação ocorre&lt;/strong&gt; (próximo ao local de atenção). Podemos então ir um passo além, e animar o campo de comentário para orientar o usuário:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39946&#34; alt=&#34;ExpandingComments&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/ExpandingComments.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Você pode até fixar o campo de comentário no topo, expandi-lo nesse sentido e exibir os campos adicionais abaixo dele.&lt;/p&gt;

&lt;p&gt;Como você pode ver, isso reduz a desordem e faz com que o formulário de comentário seja mais convidativo. Mas, e se &lt;em&gt;&amp;#8220;recolhermos&amp;#8221; (collapsing)&lt;/em&gt; todo os comentários anteriores também?&lt;/p&gt;

&lt;p&gt;Recolhendo os comentários, nós temos a barra de rolagem para representar o comprimento do artigo (conteúdo) em si, ao invés da página inteira (com os comentários expandidos). Uma prática comum é a de carregar automaticamente os comentários quando o usuário chega ao fim de uma página. Devemos evitar forçar o usuário a clicar a menos que haja uma boa razão para isso.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Exibição progressiva a fim de reduzir os componentes de interface do usuário à sua essência. Revele funcionalidades de acordo com que os usuários precisem delas.&lt;/p&gt;

&lt;h2 id=&#34;puxe-para-atualizar-1&#34;&gt;Puxe para atualizar&lt;/h2&gt;

&lt;p&gt;Uma das interações mais interessantes a surgir logo após a introdução do iPhone foi o &amp;#8220;&lt;em&gt;puxar para atualizar (pull to refresh)&lt;/em&gt;&amp;#8220;, iniciada por Loren Brichter. Ela permite ao usuário atualizar o conteúdo de rolagem que esteja disposto numa ordem cronológica reversa. Você pode ver esse conceito em ação no aplicativo do Twitter. Uma vez que você deslizou para o topo da lista de tweets, deslize um pouco mais para atualizar a &lt;em&gt;timeline&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39947&#34; alt=&#34;Twitter&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/Twitter.gif&#34; width=&#34;240&#34; height=&#34;360&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Por que isso funciona tão bem? Antes do &amp;#8220;&lt;em&gt;puxar para atualizar&lt;/em&gt;&amp;#8221; existir, os usuários tinham que apertar o botão de atualizar nos navegadores para carregar mais conteúdo. Ao juntar o desejo do usuário de encontrar mais conteúdo com a ação de atualizar, a necessidade de uma ação explícita tornou-se obsoleta.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Ao ligar inteção com ação, a experiência torna-se mais transparente.&lt;/p&gt;

&lt;h2 id=&#34;sticky-labels-1&#34;&gt;Sticky Labels&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Sticky labels&lt;/em&gt; são uma outra sutil, mas útil combinação de um componente de interface e uma transição significativa. Confira o uso desta técnica no &lt;a href=&#34;http://edenspiekermann.com/projects&#34;&gt;portfólio&lt;/a&gt; da Edenspiekermann.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39948&#34; alt=&#34;Sticky-Label&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/Sticky-Label.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As &lt;em&gt;labels&lt;/em&gt; de projeto deslizam juntamente com o conteúdo, proporcionando assim contexto para as imagens à direita, até o próximo projeto aparecer. Este comportamento é semelhante ao livro de endereços no iOS e é especialmente útil para fornecer contextos em seções longas. A transição oferece uma melhor orientação e descrições fáceis baseadas no contexto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Use &lt;em&gt;sticky labels&lt;/em&gt; para seções longas em que as descrições ou títulos adicionam informações valiosas ao conteúdo que não cabe na &lt;em&gt;viewport&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;affordance-transition-1&#34;&gt;Affordance transition&lt;/h2&gt;

&lt;p&gt;O conceito de &lt;em&gt;affordance&lt;/em&gt; deriva da psicologia cognitiva e refere-se às características particulares de um objeto que guia o espectador.&lt;/p&gt;

&lt;p&gt;No contexto de UI design, o &lt;a href=&#34;http://ec.europa.eu/regional_policy/archive/country/commu/docevent/26112008/5_doulgerof_glossary.pdf&#34;&gt;glossário de usabilidade&lt;/a&gt; (PDF) do website da EU, define-o assim:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;&lt;em&gt;Affordance&lt;/em&gt; é uma propriedade desejável de uma interface de usuário &amp;#8211; software que, naturalmente, leva as pessoas a tomarem as medidas corretas para realizarem seus objetivos.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Ridges (detalhes?)&lt;/em&gt; são muitas vezes utilizados para melhorar a &lt;em&gt;affordance&lt;/em&gt;. &lt;em&gt;Ridges&lt;/em&gt; em torno de um botão sugerem que este pode ser manipulado. Esta técnica de UX foi amplamente popularizada pelo aplicativo da câmera no iOS.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39949&#34; alt=&#34;iOS_Lockscreen-500-final&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/iOS_Lockscreen-500-final.jpg&#34; width=&#34;500&#34; height=&#34;750&#34; srcset=&#34;uploads/2013/12/iOS_Lockscreen-500-final.jpg 500w, uploads/2013/12/iOS_Lockscreen-500-final-112x168.jpg 112w, uploads/2013/12/iOS_Lockscreen-500-final-206x310.jpg 206w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Os traços (&lt;em&gt;ripples&lt;/em&gt;) em torno do botão de câmera na tela de bloqueio do iOS 6, sugerem a idéia do botão ser arrastável. A Apple removeu-os no iOS 7, aparentemente porque os usuários se acostumaram a isso, tornando o ícone mais parecido com um botão independente. Porém, o que acontece é ainda a mesma coisa: quando você arrasta o botão, a tela de bloqueio revela a câmera por baixo. Essa é uma grande técnica para apontar os usuários para os recursos em uma interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Dê aos elementos uma alta &lt;em&gt;affordance&lt;/em&gt; para apontar os usuários para os recursos em uma interface.&lt;/p&gt;

&lt;h2 id=&#34;ocultar-com-base-no-contexto-1&#34;&gt;Ocultar com base no contexto&lt;/h2&gt;

&lt;p&gt;O Google Chrome no iOS teve o a ação de ocultar baseada no contexto desde que foi lançado. Veja na imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-39950&#34; alt=&#34;CBH&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2013/12/CBH.gif&#34; width=&#34;500&#34; height=&#34;580&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A idéia básica é que os controles de navegação se escondam automaticamente uma vez que o usuário rolar a página para baixo. Assim que o usuário rolar a página para cima novamente, os controles reaparecem. Essa abordagem tanto melhora a experiência contextual (com foco no conteúdo em si) como aumenta o espaço da tela. Esse último, claro, particularmente importante em dispositivos móveis.&lt;/p&gt;

&lt;p&gt;A premissa é que os &lt;strong&gt;usuários vão fluir com o conteúdo que estão consumindo&lt;/strong&gt;. Logo que eles pararem esse fluxo, uma mudança de contexto provavelmente seja necessária; assim, os controles de navegação reaparecem. Embora essa técnica economize espaço de tela, verifique se essa premissa é válida no seu caso.&lt;/p&gt;

&lt;p&gt;O iOS levou isso a um passo adiante. Quando você chega ao fim de uma página, os controles de navegação se expandem novamente. Isso é um bom exemplo de incorporação dinâmica das necessidades do usuário em uma interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Use a ação de ocultar baseada no contexto para melhorar o foco do usuário e economizar espaço na tela.&lt;/p&gt;

&lt;h2 id=&#34;transição-do-foco-1&#34;&gt;Transição do foco&lt;/h2&gt;

&lt;p&gt;Há cerca de uma semana atrás, Nikita Vasilyev, uma UI designer de Toronto, teve uma idéia bem legal. Ela desenvolveu um script que anima elementos que recebem foco. Embora ainda seja um projeto experimental, o conceito é bastante interessante. Dê uma olhada no &lt;a href=&#34;http://www.youtube.com/watch?v=MyIE9vjy8Zo&#34;&gt;vídeo&lt;/a&gt;. (E por favor, coloque seus fones de ouvido &amp;#8211; a música é épica).&lt;/p&gt;

&lt;p&gt;Ao navegar pelo teclado, muitas vezes não fica claro pro usuário para onde o foco mudou após pressionar a tecla Tab. A animação aponta-os para o lugar certo na página. A transição é sútil mas tem um grande impacto em orientar o usuário.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leve em conta:&lt;/strong&gt; Oriente o usuário, independentemente de como eles navegam.&lt;/p&gt;

&lt;h2 id=&#34;conclusão-1&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Esses são apenas alguns exemplos, entre muitos outros por aí. A questão não é mostrar as mais recentes e extravagantes técnicas de interação, mas sim destacar como pequenos detalhes de interação podem melhorar significativamente a experiência do usuário.&lt;/p&gt;

&lt;p&gt;Se nós estamos a projetar melhores produtos digitais, então &lt;strong&gt;temos que desafiar nossas crenças atuais&lt;/strong&gt; e ver como padrões de interação podem, potencialmente, facilitar a vida do usuário. Eu não estou dizendo que devemos reinventar a roda, mas seria muito ingênuo pararmos de explorar. Então, saia da sua zona de conforto. Continue explorando e testando.&lt;/p&gt;

&lt;p&gt;Se você gostou desse artigo, você pode &lt;a href=&#34;https://twitter.com/webchaeschtli&#34;&gt;me seguir&lt;/a&gt; no Twitter ou se juntar a mim para comer uma barra de chocolate suiço na Suíça.&lt;/p&gt;

&lt;p&gt;Que padrões de transição você achou especialmente útil nos seus projetos?&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do]&lt;a href=&#34;http://uxdesign.smashingmagazine.com/2013/10/23/smart-transitions-in-user-experience-design/&#34;&gt;10&lt;/a&gt; escrito pelo &lt;a href=&#34;https://twitter.com/webchaeschtli&#34; title=&#34;Perfil do twitter&#34;&gt;Adrian Zumbrunnen&lt;/a&gt; em 23 de outubro de 2013.&lt;/p&gt;

&lt;p&gt;Tradução autorizada pela &lt;a href=&#34;http://www.smashingmagazine.com/&#34;&gt;Smashing Magazine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Qualquer erro ou sugestão de melhoria na tradução, é bem vinda! 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Se virando para testar – Parte 3: IES4OSX e IES4Linux</title>
      <link>http://tableless.com.br/se-virando-para-testar-parte-3-ies4osx-e-ies4linux/</link>
      <pubDate>Mon, 03 Dec 2007 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/se-virando-para-testar-parte-3-ies4osx-e-ies4linux/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.tatanka.com.br/ies4linux/page/Pt/P%C3%A1gina_Inicial&#34;&gt;IES4Linux&lt;/a&gt; já existe a algum tempo. O &lt;a href=&#34;http://www.tatanka.com.br/ies4linux/page/Pt/P%C3%A1gina_Inicial&#34;&gt;IES4Linux&lt;/a&gt; usa o &lt;a href=&#34;http://www.winehq.org/&#34;&gt;Wine&lt;/a&gt;, um programa parecido com o &lt;a href=&#34;http://tableless.com.br/ie6-no-mac-eu-sei-e-pecado&#34;&gt;CrossOver&lt;/a&gt;. O diferencial é que você consegue usar uma aplicação do Windows sem ter que rodar toda aquela interface do desktop virtual.&lt;/p&gt;

&lt;p&gt;No &lt;a href=&#34;http://www.tatanka.com.br/ies4linux/page/Pt/P%C3%A1gina_Inicial&#34;&gt;IES4Linux&lt;/a&gt;, foi desenvolvido pelo &lt;a href=&#34;http://www.tatanka.com.br/ies4linux/page/User:S%C3%A9rgio_Lopes&#34;&gt;Sérgio Luís Lopes Júnior&lt;/a&gt;. Ele usa o &lt;a href=&#34;http://www.winehq.org/&#34;&gt;Wine&lt;/a&gt; para instalar versões do Internet Explorer o Linux. Nós usamos esta versão aqui na Visie e funciona muito bem.&lt;/p&gt;

&lt;p&gt;Uma versão foi lançada pelo &lt;a href=&#34;http://mike.kronenberg.org/mike/&#34;&gt;Mike&lt;/a&gt; para MacOSX.&lt;/p&gt;

&lt;p&gt;Instalei o &lt;a href=&#34;http://www.kronenberg.org/ies4osx/&#34;&gt;IES4OSX&lt;/a&gt; e a instalação foi muito fácil, como no IES4Linux. Copiei a &lt;a href=&#34;http://www.kronenberg.org/darwine/&#34;&gt;versão mais nova&lt;/a&gt; do &lt;a href=&#34;http://darwine.sourceforge.net&#34;&gt;Darwine&lt;/a&gt; para a pasta Applications. Depois baixei o &lt;a href=&#34;http://www.kronenberg.org/ies4osx/ies4osx-2_5beta6_4.zip&#34;&gt;pacote do IES4OSX&lt;/a&gt;, cliquei duas vezes, esperei instalar e pronto.&lt;/p&gt;

&lt;p&gt;Por ser um tipo de emulação é normal ficar um pouco lerdo, entretanto, é rápido suficiente para testar as páginas dos sites.&lt;/p&gt;

&lt;p&gt;Existem mais dois artigos antes deste que mostram outros meios para testar seus sites fora do Windows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/se-virando-pra-testar-parte-1-screenshots&#34;&gt;Se virando para testar &amp;#8211; Parte 1: Screenshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tableless.com.br/se-virando-pra-testar-parte-2-desktops-virtuais&#34;&gt;Se virando para testar &amp;#8211; Parte 2: Descktops Virtuais&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Tabela de compatibilidade de CSS</title>
      <link>http://tableless.com.br/tabela-de-compatibilidade-de-css/</link>
      <pubDate>Thu, 08 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/tabela-de-compatibilidade-de-css/</guid>
      <description>&lt;p&gt;Acabei de fazer uma &lt;a href=&#34;http://tableless.com.br/compatibilidadecss/&#34;&gt;Tabela de Compatibilidade de CSS.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Quem achar algum erro, por favor, me dá um alô.&lt;/p&gt;

&lt;p&gt;Essa tabela será atualizada com outros elementos do CSS. Ainda tenho alguns elementos pré-definidos que faltam ser colocados. Assim que der mais um tempinho, vou colocar os links dos exemplos e atualizar a tabela com novas coisas.&lt;/p&gt;

&lt;p&gt;Sei que a navegação vai ficar um pouco pesada. Preciso colocar links de âncora para poder facilitar a navegação entre as tabelas. Mas, por enquanto, isso deve quebrar o galho de quem está com dúvidas&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[update]&lt;/strong&gt; Seguindo a dica do Rubens, fiz uma versão para impressão da tabela. Agora ficou fácil imprimir sem gastar tanta tinta. 😉&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>