<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frisby on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/frisby/index.xml</link>
    <description>Recent content in Frisby on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/frisby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Teste automatizado de API com frisby e jasmine</title>
      <link>https://tableless.github.io/hugo-public/teste-automatizado-de-api-com-frisby-e-jasmine/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/teste-automatizado-de-api-com-frisby-e-jasmine/</guid>
      <description>

&lt;p&gt;O &lt;a href=&#34;http://frisbyjs.com/&#34;&gt;Frisby&lt;/a&gt; é um framework para teste de API REST que roda em cima do nodejs. Seu principal apelo é a facilidade em se fazer testes automatizados de API com o apoio do framework de teste BDD jasmine.&lt;/p&gt;

&lt;h3 id=&#34;instalação&#34;&gt;Instalação:&lt;/h3&gt;

&lt;p&gt;Pré requisitos: nodejs, npm.&lt;/p&gt;

&lt;p&gt;1) jasmine-node. Instalação global.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sudo npm install -g jasmine-node&lt;/pre&gt;

&lt;p&gt;2) frisby. Instalação local no projeto.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sudo nam install --save-dev frisby&lt;/pre&gt;

&lt;h3 id=&#34;hello-world&#34;&gt;Hello, World!&lt;/h3&gt;

&lt;p&gt;Para o uso devemos instanciar seu módulo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;var frisby = require (&#39;frisby&#39;);&lt;/pre&gt;

&lt;p&gt;No seu uso mais básico, passamos como parâmetro a url a ser chamada e a resposta esperada.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;frisby.create(&#39;Teste BDD&#39;).get(&#39;http://www.teste.com/pessoa/1&#39;).expectStatus(200).toss();&lt;/pre&gt;

&lt;p&gt;Com o comando acima, estamos testando a API sendo que seu sucesso depende do código de retorno HTTP 200.&lt;/p&gt;

&lt;p&gt;Por convenção devemos salvar este arquivo de teste com o sufixo &amp;#8216;-spec.js&amp;#8217;. Ex: &amp;#8216;pessoa-spec.js&amp;#8217;&lt;/p&gt;

&lt;p&gt;Para execução do teste e para que o mesmo gere relatório no formato &amp;#8216;junitreport&amp;#8217; devemos executar o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;jasmine-node pessoa-spec.js --junitreport --output specTestReportJasmine&lt;/pre&gt;

&lt;p&gt;Na prática apontamos para um pasta de teste para que todos sejam executados. Ex:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;jasmine-node spec/ --junitreport --output specTestReportJasmine&lt;/pre&gt;

&lt;p&gt;Já temos o essencial para integração do teste de api com alguma ferramenta de CI como o Jenkins(&lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;https://jenkins-ci.org/&lt;/a&gt;) com relatório padronizado.&lt;/p&gt;

&lt;h3 id=&#34;hello-universe&#34;&gt;Hello, Universe!&lt;/h3&gt;

&lt;p&gt;O framework oferece alguns recursos interessantes e de fácil implementação para testar a resposta da API REST.&lt;/p&gt;

&lt;p&gt;1) Testar se a resposta HTTP contém um cabeçalho específico.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;frisby.create(&#39;Teste BDD&#39;).get(&#39;http://www.teste.com/pessoa/1&#39;)
   .expectStatus(200)
   .expectHeaderContains(&#39;Content-Type&#39;, &#39;json&#39;)
   .toss();

&lt;/pre&gt;

&lt;p&gt;2) Testar se a resposta HTTP contém um objeto com um conteúdo específico.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;frisby.create(&#39;Teste BDD&#39;).get(&#39;http://www.teste.com/pessoa/1&#39;)
   .expectStatus(200)
   .expectHeaderContains(&#39;Content-Type&#39;, &#39;json&#39;)
   .expectJSON({codigo:1,nome:&#34;fulano&#34;})
   .toss();&lt;/pre&gt;

&lt;p&gt;3) Testar se a resposta HTTP contém um objeto com um tipo específico.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;frisby.create(&#39;Teste BDD&#39;).get(&#39;http://www.teste.com/pessoa/1&#39;)
   .expectStatus(200)
   .expectHeaderContains(&#39;Content-Type&#39;, &#39;json&#39;)
   .expectJSONTypes({codigo: Number})
   .toss();&lt;/pre&gt;

&lt;p&gt;4) Realizar um teste que depende da conclusão de um teste anterior.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;frisby.create(&#39;Teste BDD&#39;).get(&#39;http://www.teste.com/pessoa/1&#39;)
   .expectStatus(200)
   .expectHeaderContains(&#39;Content-Type&#39;, &#39;json&#39;)
   .expectJSONTypes({codigo: Number})
   .after(function(){
      frisby.create(&#39;Teste BDD&#39;).delete(&#39;http://www.teste.com/pessoa/1&#39;).expectStatus(200).toss();
   })
   .toss();&lt;/pre&gt;

&lt;p&gt;No teste acima, caso tenha sucesso ao obter informações de uma pessoa será feito um teste da exclusão da mesma.&lt;/p&gt;

&lt;h4 id=&#34;integração-com-gulp-projetos-em-nodejs&#34;&gt;Integração com GULP(Projetos em nodejs)&lt;/h4&gt;

&lt;p&gt;Quando a aplicação backend é feita em nodejs é interessante configurar o gulpjs(&lt;a href=&#34;http://gulpjs.com/&#34;&gt;http://gulpjs.com/&lt;/a&gt;) para o gerenciamento dos testes. No exemplo abaixo o gulp é configurado para iniciar a aplicação backend, disparar os testes e finalizar a aplicação:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;gulp.task(&#39;spec&#39;, function() {
   var jasmine = spawn(&#39;jasmine-node&#39;, [&#39;spec/&#39;,&#39;--junitreport&#39;,&#39;--output&#39;,&#39;specTestReportJasmine&#39;]);
   var serverApp = require(&#39;./server&#39;);
   var resumeText = &#34;&#34;;
 
   serverApp.init(8082);
 
   jasmine.stdout.on(&#39;data&#39;, function (data) {
      var texto = data.toString().trim();
      resumeText += texto;
   });
   jasmine.stderr.on(&#39;data&#39;, function (data) {
      console.log(&#39;erro: &#39; + data);
   });
   jasmine.on(&#39;close&#39;, function (code) {
      console.log(&#39;*********************\n&#39; + resumeText);
      serverApp.close();
      process.exit();
   });
});&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>