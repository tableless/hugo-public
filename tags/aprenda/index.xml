<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aprenda on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/aprenda/index.xml</link>
    <description>Recent content in Aprenda on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/aprenda/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Web Semântica na Prática Parte 1: A Web do futuro (ou quase isso)</title>
      <link>https://tableless.github.io/hugo-public/web-semantica-na-pratica-parte-1-web-do-futuro-ou-quase-isso/</link>
      <pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/web-semantica-na-pratica-parte-1-web-do-futuro-ou-quase-isso/</guid>
      <description>

&lt;p&gt;É possível conferir aqui mesmo no Tableless alguns bons artigos introdutórios sobre Web Semântica (veja &lt;a href=&#34;http://tableless.com.br/a-web-semantica/&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://tableless.com.br/semantica-padroes-e-o-que-voce-tem-a-ver-com-isto/&#34;&gt;aqui&lt;/a&gt;), os quais eu recomendo a leitura caso você nunca tenha ouvido falar sobre o assunto.&lt;/p&gt;

&lt;p&gt;A intenção dessa sequência de posts que nomeei como “Web Semântica na Prática” é destrinchar esse assunto de modo aprofundado, apresentando os conceitos e exemplificando-os na prática. O tutorial completo será composto de 9 posts que irão reunir, ao final, um guia bastante abrangente sobre os conceitos, padrões, tecnologias, linguagens e ferramentas utilizadas na criação de aplicações para Web Semântica. Preparados?&lt;/p&gt;

&lt;h2 id=&#34;apresentando-a-web-do-futuro&#34;&gt;Apresentando a Web do Futuro&lt;/h2&gt;

&lt;p&gt;Caso você já tenha lido os textos introdutórios linkados no inicio desse texto, você tem uma noção do que é a Web Semântica (carinhosamente chamada de SemWeb pelos íntimos e também reconhecida pela alcunha de Web 3.0, mas você pode usar a buzzword que mais lhe agradar), mas independente de ter lido ou não, vamos apresentar rapidamente o que é esse conjunto de conceitos, pelas palavras de seus próprios criadores, Tim Berners-Lee, James Hendler e Ora Lassila:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“A Web Semântica não é uma Web separada mas sim uma extensão da Web atual onde a informação possui significado, permitindo que computadores e pessoas trabalhem em cooperação&amp;#8221;&lt;/p&gt;

&lt;p&gt;— Tradução livre a partir do artigo &amp;#8220;&lt;a href=&#34;http://www.scientificamerican.com/article/the-semantic-web/&#34;&gt;The Semantic Web&amp;#8221;&lt;/a&gt;* publicado em 2001 na Scientific American&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;É praticamente de sabedoria popular que a Web está inundada de dados e que esse volume só cresce a cada dia que passa, mas também é fato que esses dados não possuem um significado claro e estabelecido, impossibilitando sua utilização de modo integrado sem conflitos. Determinar esse significado e converter esses dados em informação aproveitável por qualquer agente (humano ou computadorizado) é o objetivo maior da Web Semântica.&lt;/p&gt;

&lt;p&gt;De certa forma, a Web Semântica é uma visão do que a Web será no futuro, onde agentes computadorizados poderão enfim compreender o significado dos dados da mesma maneira que nós compreendemos e atuar sobre eles, executando tarefas repetitivas e auxiliando os usuários das mais diversas maneiras.&lt;/p&gt;

&lt;p&gt;É importante notar que, sendo uma “previsão”, a Web Semântica não é um padrão de mercado ainda, logo é bom estar ciente de que todos os padrões, formatos e linguagens utilizadas para criar aplicações nesse ambiente hoje em dia talvez não sejam nunca usados em larga escala no &amp;#8220;mundo real&amp;#8221;. De forma sucinta, &lt;strong&gt;a&lt;/strong&gt; &lt;strong&gt;Web Semântica é o futuro da Web, mas o modo como vemos a implementação dela hoje pode não ser a mesma quando este futuro chegar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Você pode estar se perguntando: Porque então estudar esses conceitos se eles podem nem chegar a ser utilizados?&lt;/p&gt;

&lt;p&gt;O motivo é simples: embora não seja possível afirmar de forma categórica que a Web Semântica será implementada desse modo, isso é extremamente provável.&lt;/p&gt;

&lt;p&gt;Veja, o termo foi cunhado em &lt;sup&gt;2000&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2001&lt;/sub&gt; juntamente com as possíveis tecnologias e padrões para sua implementação. As ideias iniciais foram revisadas em 2006 e em 2011 (veja “&lt;a href=&#34;http://ieeexplore.ieee.org/abstract/document/1637364/?reload=true&#34;&gt;The Semantic Web Revisited&lt;/a&gt;”* e &amp;#8220;&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=1988690&#34;&gt;The Semantic Web 10th year update&lt;/a&gt;&amp;#8220;*) e a base tecnológica para Web Semântica é composta por padrões que estão por aí desde sempre e são bem conhecidas por todos: basicamente XML, URI e Unicode.&lt;/p&gt;

&lt;p&gt;Soma-se a isso o amadurecimento desses conceitos nos 15 anos que separam sua criação da Web atual, e então é possível notar de forma clara que a Web está evoluindo e precisando dar seu próximo passo para algo ao menos próximo daquilo foi proposto como sendo a Web Semântica.&lt;/p&gt;

&lt;p&gt;Resumindo, apesar de ser uma previsão, as tecnologias estão aí, já estão sendo usadas e, mesmo não sendo um padrão de mercado, elas funcionam e podem guiar o desenvolvimento de aplicações Web em alguns anos. É bom estar preparado.&lt;/p&gt;

&lt;p&gt;Se isso não bastar para te convencer a continuar lendo essa série de posts, creio que possa ser interessante conhecer todos os conceitos por trás dessa proposta pois, sendo eles baseados em conceitos sólidos, aplicá-los na prática pode ser útil para uma completa compreensão da Web como um todo, seja para usá-los hoje ou em qualquer momento no futuro.&lt;/p&gt;

&lt;h2 id=&#34;as-camadas-da-web-semântica&#34;&gt;As camadas da Web Semântica&lt;/h2&gt;

&lt;p&gt;O primeiro passo para estudar a Web Semântica é ter uma visão abrangente de como uma aplicação é arquitetada nesse contexto, incluindo os padrões e tecnologias utilizados. Para este fim, nada melhor que um desenho. ;-P&lt;/p&gt;

&lt;p&gt;A “Pirâmide da Web Semântica” foi descrita ainda em 2001 e segue sendo um dos diagramas mais utilizados para explicar este universo de forma sucinta. Vale notar que esse diagrama possui diversas versões e modificações realizadas por profissionais de diferentes áreas (Ciência da Computação, Ciência da Informação,Biblioteconomia, ente outros), pois existem diversas propostas sobre a organização da Web Semântica, mas a versão que você vê abaixo é uma adaptação (traduzida) da figura original de 2001 que é inclusive a versão utilizada pelo W3C atualmente, com apenas um ou dois adendos que achei necessários.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;wp-image-56086 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/10/camadasWebSem.png&#34; alt=&#34;camadas_web_semantica&#34; width=&#34;484&#34; height=&#34;334&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A ideia desta estrutura é definir como implementar a Web Semântica, sendo que cada camada é complementar a camada imediatamente inferior, definindo as linguagens e conceitos chave que devem ser utilizados em tal implementação.&lt;/p&gt;

&lt;p&gt;É muito importante ressaltar que o termo Web Semântica é como “guarda-chuva” de conceitos, técnicas e padrões, conforme pode ser observado na figura, e não uma conjunto indissociável de linguagens e frameworks que devem ser utilizados de modo obrigatório. Exatamente por esse motivo que a maior parte das aplicações existentes hoje em dia não utiliza todas as camadas, mas sim apenas uma parte delas.&lt;/p&gt;

&lt;p&gt;Embora não tenha nada de realmente prático nesse primeiro post, imagino que para um texto introdutório chegamos a um ponto interessante e espero que tenha atiçado a curiosidade de cada um para investir um pouco de tempo estudando o que foi apresentado aqui (e também o que será apresentado nos próximos posts) para contribuir para a Web do futuro ou pelo menos chegar perto disso.&lt;/p&gt;

&lt;p&gt;No próximo capítulo: “IRI, URI, URL, URN e como identificar TUDO na Web”.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diga olá ao TypeScript e adeus ao JavaScript</title>
      <link>https://tableless.github.io/hugo-public/diga-ola-ao-typescript-e-adeus-ao-javascript/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/diga-ola-ao-typescript-e-adeus-ao-javascript/</guid>
      <description>

&lt;p&gt;Acredito que este artigo tenha chamado a sua atenção pelo título. Como assim??? adeus ao JavaScript??? A linguagem que está bombando em 2015 (e claro, 2016!). Posso estar sendo um pouco ousado aqui, mas eu tenho em mente que, neste momento, o JavaScript para mim é agora &amp;#8220;linguagem de máquina&amp;#8221; ou o famoso bytecode. Porquê? Bom, você conhece um código javascript minificado+comprimido+&amp;#8221;esculachado&amp;#8221;&amp;#8230; Não estou retirando aqui toda a beleza do JavaScript, e consequente importância, mas na evolução que vem acontecendo a cada dia no mundo web, felizmente chegamos ao ponto que podemos tratar o javascript como uma linguagem tipada e semelhante ao c/java/php e derivados.&lt;/p&gt;

&lt;p&gt;Neste ponto entra uma questão pessoal. Ou você vai adorar TypeScript ou vai achar completamente inútil, já que a sua principal característica é trazer uma &amp;#8220;tipagem&amp;#8221; a linguagem, e no pacote uma forma de programar em javascript mais parecida com Java e suas vertentes. Se você gosta de tipar suas váriaveis e métodos, criar classes, interfaces, usar Orientação a Objetos, o TypeScript foi feito para você e, claro, pode dizer adeus ao JavaScript.&lt;/p&gt;

&lt;p&gt;Lembre-se que TypeScript está sendo usada extensivamente no novo framework Angular2, então se vc ainda não sabe o que é TypeScript, chegou o momento de conhecer.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-typescript&#34;&gt;O que é TypeScript?&lt;/h2&gt;

&lt;p&gt;O TypeScript possibilita que você escreva código JavaScript na forma que foi acostumado quando aprendeu Orientação a Objetos. Você lembra dessas aulas, em criar métodos que retornassem um valor com tipo definido, em criar classes e mais classes para o seu programa, em criar interfaces para desacoplar tudo que quisesse, entre diversas outras técnicas. Com TypeScript tudo isso é possível, porque no final ele pega o seu lindo código cheio de classes e transforma em JavaScript puro, no qual o browser vai compreender. No próprio site é definido que o TypeScript compila para JavaScript, o que é um termo tecnicamente errado &amp;#8211; mas cada vez mais aceito, dado que aquele código &amp;#8220;malucão&amp;#8221; em JavaScript pode ser encarado como código de máquina.&lt;/p&gt;

&lt;p&gt;No exemplo a seguir, criamos uma interface e uma classe, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface IComponent{
    getId() : string;
}

class Button implements IComponent{
    id:string;
    getId():string{
        return this.id;
    }
}&lt;/pre&gt;

&lt;p&gt;Este é um código 100% TypeScript que você pode criar em um editor de textos ou ide, no qual criamos uma interface chamada &lt;code&gt;IComponent&lt;/code&gt;e uma classe que chamamos de &lt;code&gt;Button&lt;/code&gt;. Esta classe implementa a interface e por isso o método &lt;code&gt;getId()&lt;/code&gt; deve ser criado. Se você salvar este arquivo como um arquivo javascript e adicionar em um documento HTML, nenhum &lt;strong&gt;browser&lt;/strong&gt; vai entender isso, quem sabe num futuro distante. Mas isso nao é um problema, pois o TypeScript possui um &amp;#8220;compilador&amp;#8221; que irá pegar o seu código e transformar em algo do tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Button = (function () {
    function Button() {
    }
    Button.prototype.getId = function () {
        return this.id;
    };
    return Button;
})();&lt;/pre&gt;

&lt;p&gt;Este código feioso aí em cima é 100% javascript compreensível em qualquer navegador web. Tem gente que prefere escrever assim, vai entender né. Mas como essa mágica funciona? Vamos explicar a seguir.&lt;/p&gt;

&lt;h2 id=&#34;testando-o-typescript&#34;&gt;Testando o TypeScript&lt;/h2&gt;

&lt;p&gt;Abra uma nova aba no seu browser e acesse: &lt;a href=&#34;http://www.typescriptlang.org/Playground&#34;&gt;http://www.typescriptlang.org/Playground&lt;/a&gt;. O Playground é um pequeno editor TypeScript que, além de checar possíveis erros de sintaxe, também compila automaticamente o código para Javascript, no qual você pode testá-lo. Não omita o Playground no seu aprendizado, ele pode te ajudar muito, como na figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts01.png&#34; alt=&#34;ts01&#34; width=&#34;856&#34; height=&#34;277&#34; class=&#34;alignleft size-full wp-image-52433&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso não queira utilizar o Playground, pode-se instalar o TypeScript no seu ambiente de desenvolvimento através do node. O comando a seguir deve ser compreensível para você:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ npm install typescript -g&lt;/pre&gt;

&lt;p&gt;Após instalar o TypeScript no ambiente, você pode usar o comando &lt;code&gt;tsc&lt;/code&gt; para compilar um arquivo que geralmente está na extensão &lt;code&gt;ts&lt;/code&gt; para &lt;code&gt;js&lt;/code&gt;. Por exemplo, crie o arquivo &lt;code&gt;script.ts&lt;/code&gt; com o código TypeScript descrito anteriormente e execute o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;tsc --out script.js script.ts&lt;/pre&gt;

&lt;p&gt;Editores de texto como o Sublime Text, Atom, VS Code, também tem a capacidade de compilar o arquivo em JavaScript, bastando apenas adicionar plugins relativos ao TypeScript. O &lt;code&gt;VS Code&lt;/code&gt;, em particular, apresentou um bom comportamento frente aos outros, como pode-se perceber na imagem a seguir.&lt;/p&gt;

&lt;div id=&#34;attachment_52436&#34; style=&#34;width: 549px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts02.png&#34; alt=&#34;Visual Studio Code&#34; width=&#34;539&#34; height=&#34;639&#34; class=&#34;size-full wp-image-52436&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Visual Studio Code
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_52438&#34; style=&#34;width: 566px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts03.png&#34; alt=&#34;Sublime Text 2.0.2&#34; width=&#34;556&#34; height=&#34;765&#34; class=&#34;size-full wp-image-52438&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Sublime Text 2.0.2
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Mas neste artigo vamos nos contentar com o TypeScript Playground, e deixe os editores para a sua escolha pessoal (fique a vontade em perguntar como configurar o TypeScript no Sublime, é um pouco mais trabalhoso).&lt;/p&gt;

&lt;p&gt;Agora que apresentamos o TypeScript e suas maravilhas, vamos compreender um pouco mais desta linguagem.&lt;/p&gt;

&lt;h2 id=&#34;tipos-de-variáveis&#34;&gt;Tipos de variáveis&lt;/h2&gt;

&lt;p&gt;Uma das funcionalidades do TypeScript é criar variáveis com tipos definidos, assim como é feito no Java.&lt;/p&gt;

&lt;h3 id=&#34;tipos-primitivos&#34;&gt;Tipos primitivos&lt;/h3&gt;

&lt;p&gt;Existem 3 tipos primitivos que podemos associar a uma variável. As variáveis são criadas através da palavra reservada &lt;code&gt;var&lt;/code&gt;, e o tipo é informado da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var NOMDE_DA_VARIAVEL : TIPO = VALOR
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;boolean: Pode assumir os valores &lt;code&gt;true&lt;/code&gt; ou &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;number: Assume qualquer número, como inteiro ou ponto flutuante.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;string: Tipo texto, pode ser atribuído com aspas simples ou duplas.&lt;/p&gt;

&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arrays no TS podem ser criados através de duas formas. A primeira delas, usa-se &lt;code&gt;[]&lt;/code&gt; na definição do tipo da variável, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:number[] = [1, 2, 3];
&lt;/pre&gt;

&lt;p&gt;A segunda é mais conhecida como &amp;#8220;generics&amp;#8221; e usa &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; para definir o tipo, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:Array&amp;lt;number&amp;gt; = [1,2,3];
&lt;/pre&gt;

&lt;p&gt;Pode-se usar tipos complexos na criação de arrays, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa{
    nome:string;
    constructor(nome:string){
        this.nome = nome;
    }
    sayHello():string{
        return &#34;Hello, &#34; + this.nome;
    }
}

var fulano = new Pessoa(&#34;fulano&#34;);
var beltrano = new Pessoa(&#34;beltrano&#34;);

var pessoas:Pessoa[]= new Array();
pessoas.push(fulano);
pessoas.push(beltrano);

pessoas.forEach( (p:Pessoa)=&amp;gt;
    console.log(p.sayHello())
    );
&lt;/pre&gt;

&lt;p&gt;Neste exemplo, criamos uma classe chamada &lt;code&gt;Pessoa&lt;/code&gt;, adicionando a propriedade &lt;code&gt;nome&lt;/code&gt;, o método construtor e o método &lt;code&gt;sayHello&lt;/code&gt;. Depois, criamos duas variáveis &lt;code&gt;fulano&lt;/code&gt; e &lt;code&gt;beltrano&lt;/code&gt;, e adicionamos à variável &lt;code&gt;pessoas&lt;/code&gt;, que é um array de vaiáveis do tipo &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Após usar o método &lt;code&gt;push&lt;/code&gt; para adicionar as variáveis no array, usamos o método &lt;code&gt;forEach&lt;/code&gt; para percorrer cada item deste array e exibir uma mensagem no console do navegador.&lt;/p&gt;

&lt;h3 id=&#34;enum&#34;&gt;Enum&lt;/h3&gt;

&lt;p&gt;Enums são velhos conhecidos do C#, e usados como &amp;#8220;datatype&amp;#8221;, que podem definir um status por exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red, Green, Blue};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red = 1, Green = 2, Blue = 3};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;Quando criamos um enum, usamos o &amp;#8220;poder&amp;#8221; da ide para que possamos programar de forma mais fácil, conforme a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts04.png&#34; alt=&#34;ts04&#34; width=&#34;697&#34; height=&#34;145&#34; class=&#34;alignleft size-full wp-image-52451&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;any&#34;&gt;Any&lt;/h3&gt;

&lt;p&gt;Uma variável do tipo &lt;code&gt;Any&lt;/code&gt; pode assumir qualquer valor.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var notSure: any = 4;
notSure = &#34;maybe a string instead&#34;;
notSure = false; // okay, definitely a boolean

var list:any[] = [1, true, &#34;free&#34;];
list[1] = 100;
&lt;/pre&gt;

&lt;h3 id=&#34;void&#34;&gt;Void&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;void&lt;/code&gt; é usado para determinar que um método não retorna nenhum valor, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function warnUser(): void {
    alert(&#34;This is my warning message&#34;);
}
&lt;/pre&gt;

&lt;h2 id=&#34;classes&#34;&gt;Classes&lt;/h2&gt;

&lt;p&gt;O conceito de classes no TypeScript é o mesmo de uma classe em qualquer linguagem orientada a objetos. As classes no TypeScript seguem o padrão ECMAScript 6 que em teoria será o &amp;#8220;futuro&amp;#8221; do JavaScript. A classe possui uma sintaxe muito familiar com c#, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return &#34;Hello, &#34; + this.greeting;
    }
}
var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;p&gt;O construtor é definido pela palavra &lt;code&gt;constructor&lt;/code&gt;. Métodos não necessitam da palavra &lt;code&gt;function&lt;/code&gt;, bastando apenas usar ``Acredito que este artigo tenha chamado a sua atenção pelo título. Como assim??? adeus ao JavaScript??? A linguagem que está bombando em 2015 (e claro, 2016!). Posso estar sendo um pouco ousado aqui, mas eu tenho em mente que, neste momento, o JavaScript para mim é agora &amp;#8220;linguagem de máquina&amp;#8221; ou o famoso bytecode. Porquê? Bom, você conhece um código javascript minificado+comprimido+&amp;#8221;esculachado&amp;#8221;&amp;#8230; Não estou retirando aqui toda a beleza do JavaScript, e consequente importância, mas na evolução que vem acontecendo a cada dia no mundo web, felizmente chegamos ao ponto que podemos tratar o javascript como uma linguagem tipada e semelhante ao c/java/php e derivados.&lt;/p&gt;

&lt;p&gt;Neste ponto entra uma questão pessoal. Ou você vai adorar TypeScript ou vai achar completamente inútil, já que a sua principal característica é trazer uma &amp;#8220;tipagem&amp;#8221; a linguagem, e no pacote uma forma de programar em javascript mais parecida com Java e suas vertentes. Se você gosta de tipar suas váriaveis e métodos, criar classes, interfaces, usar Orientação a Objetos, o TypeScript foi feito para você e, claro, pode dizer adeus ao JavaScript.&lt;/p&gt;

&lt;p&gt;Lembre-se que TypeScript está sendo usada extensivamente no novo framework Angular2, então se vc ainda não sabe o que é TypeScript, chegou o momento de conhecer.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-typescript-1&#34;&gt;O que é TypeScript?&lt;/h2&gt;

&lt;p&gt;O TypeScript possibilita que você escreva código JavaScript na forma que foi acostumado quando aprendeu Orientação a Objetos. Você lembra dessas aulas, em criar métodos que retornassem um valor com tipo definido, em criar classes e mais classes para o seu programa, em criar interfaces para desacoplar tudo que quisesse, entre diversas outras técnicas. Com TypeScript tudo isso é possível, porque no final ele pega o seu lindo código cheio de classes e transforma em JavaScript puro, no qual o browser vai compreender. No próprio site é definido que o TypeScript compila para JavaScript, o que é um termo tecnicamente errado &amp;#8211; mas cada vez mais aceito, dado que aquele código &amp;#8220;malucão&amp;#8221; em JavaScript pode ser encarado como código de máquina.&lt;/p&gt;

&lt;p&gt;No exemplo a seguir, criamos uma interface e uma classe, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface IComponent{
    getId() : string;
}

class Button implements IComponent{
    id:string;
    getId():string{
        return this.id;
    }
}&lt;/pre&gt;

&lt;p&gt;Este é um código 100% TypeScript que você pode criar em um editor de textos ou ide, no qual criamos uma interface chamada &lt;code&gt;IComponent&lt;/code&gt;e uma classe que chamamos de &lt;code&gt;Button&lt;/code&gt;. Esta classe implementa a interface e por isso o método &lt;code&gt;getId()&lt;/code&gt; deve ser criado. Se você salvar este arquivo como um arquivo javascript e adicionar em um documento HTML, nenhum &lt;strong&gt;browser&lt;/strong&gt; vai entender isso, quem sabe num futuro distante. Mas isso nao é um problema, pois o TypeScript possui um &amp;#8220;compilador&amp;#8221; que irá pegar o seu código e transformar em algo do tipo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var Button = (function () {
    function Button() {
    }
    Button.prototype.getId = function () {
        return this.id;
    };
    return Button;
})();&lt;/pre&gt;

&lt;p&gt;Este código feioso aí em cima é 100% javascript compreensível em qualquer navegador web. Tem gente que prefere escrever assim, vai entender né. Mas como essa mágica funciona? Vamos explicar a seguir.&lt;/p&gt;

&lt;h2 id=&#34;testando-o-typescript-1&#34;&gt;Testando o TypeScript&lt;/h2&gt;

&lt;p&gt;Abra uma nova aba no seu browser e acesse: &lt;a href=&#34;http://www.typescriptlang.org/Playground&#34;&gt;http://www.typescriptlang.org/Playground&lt;/a&gt;. O Playground é um pequeno editor TypeScript que, além de checar possíveis erros de sintaxe, também compila automaticamente o código para Javascript, no qual você pode testá-lo. Não omita o Playground no seu aprendizado, ele pode te ajudar muito, como na figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts01.png&#34; alt=&#34;ts01&#34; width=&#34;856&#34; height=&#34;277&#34; class=&#34;alignleft size-full wp-image-52433&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Caso não queira utilizar o Playground, pode-se instalar o TypeScript no seu ambiente de desenvolvimento através do node. O comando a seguir deve ser compreensível para você:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;$ npm install typescript -g&lt;/pre&gt;

&lt;p&gt;Após instalar o TypeScript no ambiente, você pode usar o comando &lt;code&gt;tsc&lt;/code&gt; para compilar um arquivo que geralmente está na extensão &lt;code&gt;ts&lt;/code&gt; para &lt;code&gt;js&lt;/code&gt;. Por exemplo, crie o arquivo &lt;code&gt;script.ts&lt;/code&gt; com o código TypeScript descrito anteriormente e execute o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-shell&#34;&gt;tsc --out script.js script.ts&lt;/pre&gt;

&lt;p&gt;Editores de texto como o Sublime Text, Atom, VS Code, também tem a capacidade de compilar o arquivo em JavaScript, bastando apenas adicionar plugins relativos ao TypeScript. O &lt;code&gt;VS Code&lt;/code&gt;, em particular, apresentou um bom comportamento frente aos outros, como pode-se perceber na imagem a seguir.&lt;/p&gt;

&lt;div id=&#34;attachment_52436&#34; style=&#34;width: 549px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts02.png&#34; alt=&#34;Visual Studio Code&#34; width=&#34;539&#34; height=&#34;639&#34; class=&#34;size-full wp-image-52436&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Visual Studio Code
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_52438&#34; style=&#34;width: 566px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts03.png&#34; alt=&#34;Sublime Text 2.0.2&#34; width=&#34;556&#34; height=&#34;765&#34; class=&#34;size-full wp-image-52438&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Sublime Text 2.0.2
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Mas neste artigo vamos nos contentar com o TypeScript Playground, e deixe os editores para a sua escolha pessoal (fique a vontade em perguntar como configurar o TypeScript no Sublime, é um pouco mais trabalhoso).&lt;/p&gt;

&lt;p&gt;Agora que apresentamos o TypeScript e suas maravilhas, vamos compreender um pouco mais desta linguagem.&lt;/p&gt;

&lt;h2 id=&#34;tipos-de-variáveis-1&#34;&gt;Tipos de variáveis&lt;/h2&gt;

&lt;p&gt;Uma das funcionalidades do TypeScript é criar variáveis com tipos definidos, assim como é feito no Java.&lt;/p&gt;

&lt;h3 id=&#34;tipos-primitivos-1&#34;&gt;Tipos primitivos&lt;/h3&gt;

&lt;p&gt;Existem 3 tipos primitivos que podemos associar a uma variável. As variáveis são criadas através da palavra reservada &lt;code&gt;var&lt;/code&gt;, e o tipo é informado da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var NOMDE_DA_VARIAVEL : TIPO = VALOR
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;boolean: Pode assumir os valores &lt;code&gt;true&lt;/code&gt; ou &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;number: Assume qualquer número, como inteiro ou ponto flutuante.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;string: Tipo texto, pode ser atribuído com aspas simples ou duplas.&lt;/p&gt;

&lt;h3 id=&#34;arrays-1&#34;&gt;Arrays&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arrays no TS podem ser criados através de duas formas. A primeira delas, usa-se &lt;code&gt;[]&lt;/code&gt; na definição do tipo da variável, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:number[] = [1, 2, 3];
&lt;/pre&gt;

&lt;p&gt;A segunda é mais conhecida como &amp;#8220;generics&amp;#8221; e usa &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; para definir o tipo, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var list:Array&amp;lt;number&amp;gt; = [1,2,3];
&lt;/pre&gt;

&lt;p&gt;Pode-se usar tipos complexos na criação de arrays, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa{
    nome:string;
    constructor(nome:string){
        this.nome = nome;
    }
    sayHello():string{
        return &#34;Hello, &#34; + this.nome;
    }
}

var fulano = new Pessoa(&#34;fulano&#34;);
var beltrano = new Pessoa(&#34;beltrano&#34;);

var pessoas:Pessoa[]= new Array();
pessoas.push(fulano);
pessoas.push(beltrano);

pessoas.forEach( (p:Pessoa)=&amp;gt;
    console.log(p.sayHello())
    );
&lt;/pre&gt;

&lt;p&gt;Neste exemplo, criamos uma classe chamada &lt;code&gt;Pessoa&lt;/code&gt;, adicionando a propriedade &lt;code&gt;nome&lt;/code&gt;, o método construtor e o método &lt;code&gt;sayHello&lt;/code&gt;. Depois, criamos duas variáveis &lt;code&gt;fulano&lt;/code&gt; e &lt;code&gt;beltrano&lt;/code&gt;, e adicionamos à variável &lt;code&gt;pessoas&lt;/code&gt;, que é um array de vaiáveis do tipo &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Após usar o método &lt;code&gt;push&lt;/code&gt; para adicionar as variáveis no array, usamos o método &lt;code&gt;forEach&lt;/code&gt; para percorrer cada item deste array e exibir uma mensagem no console do navegador.&lt;/p&gt;

&lt;h3 id=&#34;enum-1&#34;&gt;Enum&lt;/h3&gt;

&lt;p&gt;Enums são velhos conhecidos do C#, e usados como &amp;#8220;datatype&amp;#8221;, que podem definir um status por exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red, Green, Blue};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;ou&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;enum Color {Red = 1, Green = 2, Blue = 3};
var c: Color = Color.Green;
&lt;/pre&gt;

&lt;p&gt;Quando criamos um enum, usamos o &amp;#8220;poder&amp;#8221; da ide para que possamos programar de forma mais fácil, conforme a figura a seguir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2015/12/ts04.png&#34; alt=&#34;ts04&#34; width=&#34;697&#34; height=&#34;145&#34; class=&#34;alignleft size-full wp-image-52451&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;any-1&#34;&gt;Any&lt;/h3&gt;

&lt;p&gt;Uma variável do tipo &lt;code&gt;Any&lt;/code&gt; pode assumir qualquer valor.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var notSure: any = 4;
notSure = &#34;maybe a string instead&#34;;
notSure = false; // okay, definitely a boolean

var list:any[] = [1, true, &#34;free&#34;];
list[1] = 100;
&lt;/pre&gt;

&lt;h3 id=&#34;void-1&#34;&gt;Void&lt;/h3&gt;

&lt;p&gt;O &lt;code&gt;void&lt;/code&gt; é usado para determinar que um método não retorna nenhum valor, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function warnUser(): void {
    alert(&#34;This is my warning message&#34;);
}
&lt;/pre&gt;

&lt;h2 id=&#34;classes-1&#34;&gt;Classes&lt;/h2&gt;

&lt;p&gt;O conceito de classes no TypeScript é o mesmo de uma classe em qualquer linguagem orientada a objetos. As classes no TypeScript seguem o padrão ECMAScript 6 que em teoria será o &amp;#8220;futuro&amp;#8221; do JavaScript. A classe possui uma sintaxe muito familiar com c#, veja:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return &#34;Hello, &#34; + this.greeting;
    }
}
var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;p&gt;O construtor é definido pela palavra &lt;code&gt;constructor&lt;/code&gt;. Métodos não necessitam da palavra &lt;code&gt;function&lt;/code&gt;, bastando apenas usar`&lt;code&gt;. Perceba que, no exemplo apresentado, não definimos visibilidade das propriedades da classe, nem o tipo de retorno do método&lt;/code&gt;greet`. É claro que podemos definir estes parâmetros, conforme o próximo exemplo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Greeter {
    private greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    public greet() : string {
        return &#34;Hello, &#34; + this.greeting;
    }
}

var greeter = new Greeter(&#34;world&#34;);
&lt;/pre&gt;

&lt;h3 id=&#34;visibilidade-de-métodos-e-propriedades&#34;&gt;Visibilidade de métodos e propriedades&lt;/h3&gt;

&lt;p&gt;Métodos e propriedades de uma classe podem assumir a visibilidade: private, public e protected.&lt;/p&gt;

&lt;h3 id=&#34;herança&#34;&gt;Herança&lt;/h3&gt;

&lt;p&gt;A herança entre uma classe e outra é definida pela palavra &lt;code&gt;extends&lt;/code&gt;. Pode-se sobrecarregar métodos e usar a palavra &lt;code&gt;super&lt;/code&gt; para chamar o método da classe pai, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Animal {
    name:string;
    constructor(theName: string) { this.name = theName; }
    move(meters: number = 0) {
        alert(this.name + &#34; moved &#34; + meters + &#34;m.&#34;);
    }
}

class Snake extends Animal {
    constructor(name: string) { super(name); }
    move(meters = 5) {
        alert(&#34;Slithering...&#34;);
        super.move(meters);
    }
}

class Horse extends Animal {
    constructor(name: string) { super(name); }
    move(meters = 45) {
        alert(&#34;Galloping...&#34;);
        super.move(meters);
    }
}

var sam = new Snake(&#34;Sammy the Python&#34;);
var tom: Animal = new Horse(&#34;Tommy the Palomino&#34;);

sam.move();
tom.move(34);
&lt;/pre&gt;

&lt;p&gt;Neste exemplo usamos o &lt;code&gt;super&lt;/code&gt; da classe &lt;code&gt;Snake&lt;/code&gt; para chamar o método construtor da classe pai &lt;code&gt;Animal&lt;/code&gt;. Se isso não for claro para você, dê uma estudada em OO para que possa compreender melhor, pois estas características são da Orientação em Objetos como um todo, e não do TypeScript.&lt;/p&gt;

&lt;h2 id=&#34;accessors-ou-métodos-get-set&#34;&gt;Accessors (ou métodos get/set)&lt;/h2&gt;

&lt;p&gt;Os Accessors visam proteger as propriedades de uma classe, pois você já deve saber que expor propriedades de uma classe não é algo legal 🙂&lt;/p&gt;

&lt;p&gt;Os accessors do TypeScript são feitos pelas palavras &lt;code&gt;get&lt;/code&gt; e &lt;code&gt;set&lt;/code&gt;, e claro, deixe a sua propriedade como &lt;code&gt;private&lt;/code&gt;. Veja o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Pessoa {
    private _password: string;

    get password(): string {
        return this._password;
    }
    
    set password(p : string) {
        if (p != &#34;123456&#34;) {
            this._password = p;
        }
        else {
            alert(&#34;Ei, senha não pode ser 123456&#34;);
        }
    }
}

var p = new Pessoa();
p.password = &#34;123456&#34;; //vai exibir o erro
&lt;/pre&gt;

&lt;h3 id=&#34;métodos-estáticos&#34;&gt;Métodos estáticos&lt;/h3&gt;

&lt;p&gt;É possível criar métodos estáticos definindo a palavra &lt;code&gt;static&lt;/code&gt; antes do método. Existem dezenas de aplicações para métodos estáticos, sendo uma delas não precisar instanciar uma classe, como no exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class SystemAlert{
    
    static alert(message:string):void{
        alert(message);
    }
    
    static warm (message:string):void{
        alert(&#34;Atenção: &#34; + message);
    }
    
    static error(message:string):void{
        alert(&#34;Erro: &#34; + message);
    }
    
}

SystemAlert.alert(&#34;Oi&#34;);
SystemAlert.error(&#34;Não foi possível conectar na base de dados&#34;);
&lt;/pre&gt;

&lt;h2 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;Uma interface define um contrato para a classe. A interface é criada da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;interface Ponto{
 x: number;
 y: number;
 x: number;
}
&lt;/pre&gt;

&lt;p&gt;Para implementar a interface, usamos &lt;code&gt;implements&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Ponto3d implements Ponto{
   (aqui implementamos x,y,z)
}
&lt;/pre&gt;

&lt;h2 id=&#34;funções&#34;&gt;Funções&lt;/h2&gt;

&lt;p&gt;Vamos exemplificar algumas particularidades de uma função em TypeScript. A função pode ser criada fora de uma classe ou dentro, sendo as observações que faremos a seguir podem ser aplicadas em ambas.&lt;/p&gt;

&lt;p&gt;Tome nota apenas que, em uma classe, não precisamos usar a palavra &lt;code&gt;function&lt;/code&gt; para definir uma função, mas fora da classe precisamos.&lt;/p&gt;

&lt;h3 id=&#34;parâmetros-com-valores-padrão&#34;&gt;Parâmetros com valores padrão&lt;/h3&gt;

&lt;p&gt;Pode-se definir um valor padrão para um parâmetro de uma função da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function buildName(firstName: string, lastName : string = &#34;Smith&#34;) {
}
//ou
class Foo{
  buildName(firstName: string, lastName : string = &#34;Smith&#34;) {
  }
}
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-opcionais&#34;&gt;Parâmetros opcionais&lt;/h3&gt;

&lt;p&gt;Use o caractere &lt;code&gt;?&lt;/code&gt; para definir um parâmetro opcional.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Foo{
  buildName(firstName: string, lastName? : string) {
     if (lastName){
           // blablabla
     }
  }
}
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-rest&#34;&gt;Parâmetros REST&lt;/h3&gt;

&lt;p&gt;Pode-se repassar um array de valores diretamente para um parâmetro. É válido lembrar que este modo só pode ser usado no último parâmetro da sua função. Exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Foo{
 static alertName(firstName: string, ...restOfName: string[]) {
    alert(firstName + &#34; &#34; + restOfName.join(&#34; &#34;));
 }
}
Foo.alertName(&#34;Fulano&#34;,&#34;de&#34;,&#34;Tal&#34;);
&lt;/pre&gt;

&lt;h3 id=&#34;parâmetros-no-formato-json&#34;&gt;Parâmetros no formato JSON&lt;/h3&gt;

&lt;p&gt;Umas das maiores facilidades do Javascript é repassar parâmetros no formato JSON. Com TypeScript é possível utilizar este mesmo comportamento, conforme o exemplo a seguir.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;class Ponto{
    
    private _x : number = 0;
    private _y : number = 0;
    private _z : number = 0;
    
    constructor( p: {x:number;y:number;z?:number;}){
        this._x = p.x;
        this._y = p.y;
        if (p.z)
            this._z = p.z;
    }
    
    is3d():boolean{
        return this._z!=0;
    }
    
}

var p1 = new Ponto({x:10,y:20});

alert(p1.is3d());
&lt;/pre&gt;

&lt;p&gt;Observe que no construtor da classe &lt;code&gt;Ponto&lt;/code&gt; criamos o parâmetro &lt;code&gt;p&lt;/code&gt; e na definição do seu tipo repassamos um objeto anônimo com três parâmetros, sendo que o parâmetro &lt;code&gt;z&lt;/code&gt; é opcional.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Neste artigo vimos algumas funcionalidades do TypeScript, sendo ainda existem diversos tópicos a serem abordados. Gostaria de lhe encorajar a testar esta nova linguagem, e caso tenha dúvidas, não deixe de comentar abaixo. Sugira também novos artigos sobre TypeScript, estaremos avaliando cada pedido!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Templates Joomla!: o básico e relações com o WordPress</title>
      <link>https://tableless.github.io/hugo-public/templates-joomla-o-basico-e-relacoes-com-o-wordpress/</link>
      <pubDate>Mon, 25 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/templates-joomla-o-basico-e-relacoes-com-o-wordpress/</guid>
      <description>

&lt;p&gt;Ao lado do WordPress, o Joomla! é sem dúvida um dos melhores CMS que existem atualmente. Como o amigo Girlan bem já escreveu &lt;a title=&#34;Vamos falar de Joomla!?&#34; href=&#34;http://tableless.com.br/vamos-falar-de-joomla/&#34; target=&#34;_blank&#34;&gt;noutro artigo&lt;/a&gt;, o Joomla! tem se superado muito a cada versão&amp;nbsp;e, desta perspectiva, torna-se mais que vantajoso ao desenvolvedor front-end dominar a criação de temas tanto para&amp;nbsp;o WordPress quanto para o Joomla!.&lt;/p&gt;

&lt;p&gt;A boa notícia é que se você já sabe&amp;nbsp;criar temas para o WordPress, você praticamente já&amp;nbsp;sabe criar&amp;nbsp;templates para o Joomla! também. O objetivo deste artigo, portanto, não é embarcar naquela velha discussão &lt;del&gt;formada sobre tudo&lt;/del&gt; de qual CMS é o melhor. Estamos mais interessados em criar um template básico (ou sandbox) para o Joomla! observando as relações existentes com&amp;nbsp;o desenvolvimento de temas para o WordPress, despertando, quem sabe, novos joomlers pela comunidade Tableless!&amp;nbsp;&lt;img class=&#34;emoji&#34; src=&#34;http://s.w.org/images/core/emoji/72x72/1f609.png&#34; alt=&#34;😉&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;entendendo-o-joomla&#34;&gt;Entendendo o Joomla!&lt;/h2&gt;

&lt;p&gt;Antes de criar um template para o Joomla!, primeiro precisamos entender, pelo menos superficialmente, como ele funciona.&amp;nbsp;Em suma, podemos dizer que a principal função do&amp;nbsp;Joomla! é reunir o conteúdo armazenado no banco de dados e gerenciado no painel de administração com ACL usando um&amp;nbsp;template para produzir páginas HTML de forma dinâmica&amp;nbsp;via PHP.&lt;/p&gt;

&lt;p&gt;O Joomla! se&amp;nbsp;assemelha ao WordPress em muitos aspectos. O&amp;nbsp;conceito de artigo, por exemplo, se assemelha ao de post do WordPress: é a forma concebida ao conteúdo principal armazenado no banco de dados para ser&amp;nbsp;gerenciado no painel de administração. O mesmo vale para os módulos e widgets, templates e temas, plugins, entre outras semelhanças — é claro que&amp;nbsp;cada CMS apresenta as suas próprias especificidades, mas, por hora, vamos deixar assim.&lt;/p&gt;

&lt;p&gt;Composto basicamente por um framework e suas extensões —&amp;nbsp;analogamente a&amp;nbsp;um sistema operacional e suas aplicações —, o diferencial do Joomla! está justamente nas extensões chamadas de &lt;strong&gt;componentes&lt;/strong&gt;, que permitem desenvolver sites de todas as formas e tamanhos&amp;nbsp;através de &lt;a title=&#34;MVC – Afinal, é o quê ?&#34; href=&#34;http://tableless.com.br/mvc-afinal-e-o-que/&#34; target=&#34;_blank&#34;&gt;arquitetura MVC&lt;/a&gt;. No desenvolvimento de templates, só nos interessa a camada &lt;em&gt;view&lt;/em&gt; dos componentes, doravante chamada apenas de &amp;#8220;componente&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Vejamos mais sobre as extensões&amp;#8230;&lt;/p&gt;

&lt;h3 id=&#34;as-extensões-do-joomla&#34;&gt;As extensões do Joomla!&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Uma extensão é um pacote de programa que estende a instalação do Joomla! de diferentes maneiras.&amp;nbsp;&lt;cite&gt;Documentação do Joomla!&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ainda segundo a documentação do Joomla!, as extensões podem ser classificadas basicamente em&amp;nbsp;&lt;strong&gt;componentes&lt;/strong&gt;, &lt;strong&gt;módulos&lt;/strong&gt;, &lt;strong&gt;plugins&lt;/strong&gt; e &lt;strong&gt;templates&lt;/strong&gt;. Também os idiomas do Joomla! e os pacotes de extensões relacionadas, os&amp;nbsp;packages, são consideradas extensões, assim como as bibliotecas que fornecem funções que podem ser usadas por outras extensões.&lt;/p&gt;

&lt;p&gt;O Joomla! possui extensões nativas que se mostram&amp;nbsp;suficientes na&amp;nbsp;maioria dos nossos projetos, o que não nos&amp;nbsp;impede de criar as nossas próprias extensões ou usar&amp;nbsp;algumas das&amp;nbsp;&lt;strong&gt;9 mil extensões disponíveis&lt;/strong&gt; (e aumentando!) no &lt;a title=&#34;Diretório de Extensões do Joomla!&#34; href=&#34;http://extensions.joomla.org/&#34; target=&#34;_blank&#34;&gt;JED&lt;/a&gt;, o&amp;nbsp;diretório de extensões do Joomla!.&lt;/p&gt;

&lt;p&gt;Para conhecer melhor o CMS, você pode&amp;nbsp;&lt;a title=&#34;Download da última versão do Joomla!&#34; href=&#34;http://www.joomla.org/download.html&#34; target=&#34;_blank&#34;&gt;baixar a última versão do Joomla!&lt;/a&gt;&amp;nbsp;e instalar localmente ou &lt;a title=&#34;Fazer test-drive rápido do Joomla!&#34; href=&#34;http://demo.joomla.org/&#34; target=&#34;_blank&#34;&gt;fazer um test-drive rápido no Joomla.org&lt;/a&gt;, que gera instantaneamente uma instalação remota todinha&amp;nbsp;sua por 90 minutos. Aqui, nos referimos à versão 3.4.1 do Joomla! e, para comparação, à versão 4.2.2 do WordPress — as mais recentes até a&amp;nbsp;publicação deste artigo.&lt;/p&gt;

&lt;p&gt;Sem mais&amp;nbsp;delongas, vamos ao que interessa!&lt;/p&gt;

&lt;h2 id=&#34;criando-um-template-para-o-joomla&#34;&gt;Criando um template para o Joomla!&lt;/h2&gt;

&lt;p&gt;Assim como, por padrão, os temas do WordPress ficam localizados no diretório &lt;em&gt;/wp-content/themes/&lt;/em&gt;, os templates do Joomla! ficam localizados no diretório &lt;em&gt;/templates/&lt;/em&gt;. Para começar, vamos criar um diretório chamado &amp;#8220;meunovotemplate&amp;#8221; com a seguinte estrutura básica de arquivos de todo template Joomla!:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-49093&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/estrutura-basica-de-arquivos-de-templates-joomla.png&#34; alt=&#34;estrutura-basica-de-arquivos-de-templates-joomla&#34; width=&#34;283&#34; height=&#34;226&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Adicionamos&amp;nbsp;arquivos &lt;em&gt;index.html&lt;/em&gt;&amp;nbsp;em branco no&amp;nbsp;diretório do template e em seus subdiretórios como&amp;nbsp;medida adicional de segurança contra a exposição de informações da instalação por eventuais tentativas de&amp;nbsp;acesso direto aos&amp;nbsp;diretórios com permissões 775 de FTP — equivalente aos arquivos &lt;em&gt;index.php&lt;/em&gt;&amp;nbsp;&amp;#8220;silence is golden&amp;#8221; do WordPress.&lt;/p&gt;

&lt;h3 id=&#34;definindo-as-informações-do-template&#34;&gt;Definindo as informações do template&lt;/h3&gt;

&lt;p&gt;O arquivo &lt;em&gt;templateDetails.xml&lt;/em&gt;&amp;nbsp;é equivalente aos comentários iniciais do arquivo &lt;em&gt;style.css&lt;/em&gt; dos temas do WordPress&amp;nbsp;(stylesheet header). Através de XML, são marcadas as informações do template para a instalação e, posteriormente, para serem exibidas no Gerenciador de Temas do painel de administração. Veja um&amp;nbsp;exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt;
&amp;lt;extension version=&#34;3.4.1&#34; type=&#34;template&#34;&amp;gt;
  &amp;lt;name&amp;gt;Meu novo template&amp;lt;/name&amp;gt;
  &amp;lt;creationDate&amp;gt;25/05/2015&amp;lt;/creationDate&amp;gt;
  &amp;lt;author&amp;gt;Tableless&amp;lt;/author&amp;gt;
  &amp;lt;authorEmail&amp;gt;contato@tableless.com.br&amp;lt;/authorEmail&amp;gt;
  &amp;lt;authorUrl&amp;gt;http://www.tableless.com.br&amp;lt;/authorUrl&amp;gt;
  &amp;lt;copyright&amp;gt;© 2015 Tableless. Todos os direitos reservados.&amp;lt;/copyright&amp;gt;
  &amp;lt;license&amp;gt;GNU/GPL&amp;lt;/license&amp;gt;
  &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
  &amp;lt;description&amp;gt;Descrição do meu novo template.&amp;lt;/description&amp;gt;
  &amp;lt;files&amp;gt;
    &amp;lt;folder&amp;gt;css&amp;lt;/folder&amp;gt;
    &amp;lt;folder&amp;gt;images&amp;lt;/folder&amp;gt;
    &amp;lt;filename&amp;gt;index.php&amp;lt;/filename&amp;gt;
    &amp;lt;filename&amp;gt;templateDetails.xml&amp;lt;/filename&amp;gt;
    &amp;lt;filename&amp;gt;index.html&amp;lt;/filename&amp;gt;
  &amp;lt;/files&amp;gt;
  &amp;lt;positions&amp;gt;
    &amp;lt;position&amp;gt;breadcrumb&amp;lt;/position&amp;gt;
    &amp;lt;position&amp;gt;mainmenu&amp;lt;/position&amp;gt;
    &amp;lt;position&amp;gt;aside&amp;lt;/position&amp;gt;
  &amp;lt;/positions&amp;gt;
&amp;lt;/extension&amp;gt;&lt;/pre&gt;

&lt;p&gt;Na primeira linha, informamos&amp;nbsp;a versão &lt;abbr style=&#34;cursor: help&#34; title=&#34;eXtensible Markup Language&#34;&gt;XML&lt;/abbr&gt; e o tipo de codificação do arquivo (recomenda-se&amp;nbsp;o uso de&amp;nbsp;&lt;a title=&#34;HTML: Encode UTF-8&#34; href=&#34;http://tableless.com.br/html-encode-utf-8/&#34; target=&#34;_blank&#34;&gt;UTF-8&lt;/a&gt; sem BOM). Na segunda, informamos&amp;nbsp;a versão da instalação do Joomla!&amp;nbsp;e&amp;nbsp;o tipo da extensão.&amp;nbsp;A partir daí, as tags falam por si mesmas: as tags &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; informam o nome do template, as tags &lt;code&gt;&amp;lt;creationDate&amp;gt;&lt;/code&gt; informam a data de criação do template e por aí vai&amp;#8230;&lt;/p&gt;

&lt;p&gt;As tags&amp;nbsp;&lt;code&gt;&amp;lt;filemame&amp;gt;&lt;/code&gt;&amp;nbsp;e&amp;nbsp;&lt;code&gt;&amp;lt;folder&amp;gt;&lt;/code&gt;&amp;nbsp;informam, respectivamente, os arquivos e os diretórios do template. Vale ressaltar que se já informamos algum diretório do template, não precisamos informar os arquivos e subdiretórios contidos nele (tome como exemplo o diretório para as folhas de estilo, cujos arquivos &lt;em&gt;style.css&lt;/em&gt; e &lt;em&gt;index.html&lt;/em&gt;&amp;nbsp;contidos nele não&amp;nbsp;informamos&amp;nbsp;diretamente). Assim, os únicos arquivos e diretórios&amp;nbsp;que precisamos informar são os que se encontram &lt;strong&gt;imediatamente&lt;/strong&gt; no diretório que criamos.&lt;/p&gt;

&lt;p&gt;Já as&amp;nbsp;tags &lt;code&gt;&amp;lt;positions&amp;gt;&lt;/code&gt; informam os nomes das&amp;nbsp;posições que os módulos poderão ocupar nas páginas do&amp;nbsp;site&amp;nbsp;—&amp;nbsp;mas ainda não as posições em si, o que definiremos&amp;nbsp;no modelo.&lt;/p&gt;

&lt;h3 id=&#34;modelo-nbsp-a-nbsp-estrutura-do-nbsp-template&#34;&gt;Modelo:&amp;nbsp;a&amp;nbsp;estrutura do&amp;nbsp;template&lt;/h3&gt;

&lt;p&gt;Ao contrário do que acontece no&amp;nbsp;WordPress, em que a estrutura de um tema é&amp;nbsp;dividida em &lt;a title=&#34;Hierarquia de arquivos do WordPress&#34; href=&#34;http://tableless.com.br/hierarquia-de-arquivos-do-wordpress/&#34; target=&#34;_blank&#34;&gt;vários arquivos&lt;/a&gt;&amp;nbsp;pela funcionalidade, a estrutura de um template do Joomla! normalmente&amp;nbsp;se concentra em apenas um: o &lt;em&gt;index.php&lt;/em&gt;. Com ele, nós criamos uma página genérica para todo o site, isto é, um &lt;strong&gt;modelo&lt;/strong&gt; para todas as páginas específicas do site, incluindo declarações próprias&amp;nbsp;do Joomla! que processarão o conteúdo dinâmico a cada requisição de página.&lt;/p&gt;

&lt;p&gt;Entretanto, e como no WordPress, nós podemos implementar a página de erros e a do componente (para impressão)&amp;nbsp;separadamente&amp;nbsp;em&amp;nbsp;arquivos semelhantes chamados de&amp;nbsp;&lt;em&gt;error.php&lt;/em&gt; e &lt;em&gt;component.php&lt;/em&gt;, respectivamente, mas aqui nos concentraremos no básico, ok?&lt;/p&gt;

&lt;p&gt;O&amp;nbsp;conteúdo dinâmico&amp;nbsp;nada mais é do que o&amp;nbsp;código&amp;nbsp;HTML gerado pelo Joomla! para as partes do site que dependem das páginas específicas, ou seja, que podem mudar de uma página para outra. Ele&amp;nbsp;pode ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;o&amp;nbsp;&lt;strong&gt;componente&lt;/strong&gt;&amp;nbsp;da página, isto é, o conteúdo principal da página;&lt;/li&gt;
&lt;li&gt;o conteúdo padrão do &lt;strong&gt;elemento &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/strong&gt;&amp;nbsp;da página, como folhas de estilos, scripts e meta elementos;&lt;/li&gt;
&lt;li&gt;os &lt;strong&gt;módulos&lt;/strong&gt;, de acordo com suas configurações de visibilidade;&lt;/li&gt;
&lt;li&gt;as possíveis&amp;nbsp;&lt;strong&gt;mensagens&lt;/strong&gt; de sistema e de erros de&amp;nbsp;requisição de página.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por exemplo: através do Gerenciador de Menus do painel de administração, podemos&amp;nbsp;criar uma página no menu principal&amp;nbsp;para exibir um único artigo&amp;nbsp;selecionando a opção &amp;#8220;Artigos &amp;gt; Único Artigo&amp;#8221; (componente nativo de conteúdo) como o tipo de item de menu. Ao acessar a página através do item correspondente no menu principal, o Joomla! processará o código HTML daquele componente na parte identificada para o processamento de&amp;nbsp;componente no modelo —&amp;nbsp;através daquelas declarações próprias&amp;nbsp;do Joomla!. É assim que criamos páginas simples com o&amp;nbsp;Joomla!.&lt;/p&gt;

&lt;p&gt;Ou ainda,&amp;nbsp;através do Gerenciador de Módulos, podemos criar um módulo para ocupar determinada&amp;nbsp;posição&amp;nbsp;nas páginas do site — também identificada por aquelas declarações próprias&amp;nbsp;do Joomla! no&amp;nbsp;modelo — e configurar sua visibilidade — o que é exclusividade dos módulos&amp;nbsp;— apenas para a&amp;nbsp;página inicial. Assim, ao&amp;nbsp;acessar a página inicial,&amp;nbsp;o Joomla! processará&amp;nbsp;o código HTML daquele módulo naquela determinada posição, mas ao&amp;nbsp;acessar as páginas internas, isso não acontecerá.&amp;nbsp;Em outras palavras, o Joomla! só &amp;#8220;carregará&amp;#8221; o módulo na página inicial. Simples, não?&lt;/p&gt;

&lt;p&gt;Mas&amp;nbsp;afinal, o que&amp;nbsp;são essas &amp;#8220;declarações próprias do Joomla!&amp;#8221;?&lt;/p&gt;

&lt;h3 id=&#34;as-declarações-jdoc&#34;&gt;As declarações JDOC&lt;/h3&gt;

&lt;p&gt;O Joomla! possui seus próprios métodos de processamento de conteúdo dinâmico chamados de&amp;nbsp;&lt;strong&gt;declarações JDOC&lt;/strong&gt;, que possuem mais ou menos essa cara:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;jdoc:include type=&#34;component&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Nas declarações JDOC, o&amp;nbsp;uso das aspas duplas e do espaço antes do fechamento &lt;code&gt;/&amp;gt;&lt;/code&gt;&amp;nbsp;é obrigatório. Além disso, devemos sempre informar o tipo de conteúdo dinâmico a ser processado através do atributo &lt;code&gt;type&lt;/code&gt;. No exemplo acima, o Joomla! processaria o componente das páginas específicas no lugar da declaração. Os possíveis valores para o atributo &lt;code&gt;type&lt;/code&gt;&amp;nbsp;são:&lt;/p&gt;

&lt;h4 id=&#34;component&#34;&gt;Component&lt;/h4&gt;

&lt;p&gt;Deve ser declarado apenas uma vez no elemento &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; do modelo&amp;nbsp;para processar&amp;nbsp;o conteúdo principal da página.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;jdoc:include type=&#34;component&#34; /&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;head&#34;&gt;Head&lt;/h4&gt;

&lt;p&gt;Deve ser declarado apenas uma vez no elemento &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; do&amp;nbsp;modelo&amp;nbsp;para processar seu respectivo conteúdo padrão da página, como folhas de estilo, scripts e meta elementos.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;jdoc:include type=&#34;head&#34; /&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;message&#34;&gt;Message&lt;/h4&gt;

&lt;p&gt;Deve ser declarado apenas uma vez no elemento &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; do modelo&amp;nbsp;para processar as possíveis&amp;nbsp;mensagens de sistema e de erros de requisição de página.&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;jdoc:include type=&#34;message&#34; /&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;module-e-modules&#34;&gt;Module e modules&lt;/h4&gt;

&lt;p&gt;Pode ser declarado várias vezes no&amp;nbsp;modelo&amp;nbsp;para processar&amp;nbsp;os módulos, de acordo com suas configurações de visibilidade. Aqui, também é obrigatório identificarmos aquelas posições que&amp;nbsp;antecipamos pelo nome no arquivo&amp;nbsp;&lt;em&gt;templateDetails.xml&lt;/em&gt; através do atributo &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O tipo &lt;code&gt;module&lt;/code&gt; define uma posição&amp;nbsp;do modelo que poderá ser ocupada por um e apenas um módulo. Nesse caso, o atributo &lt;code&gt;title&lt;/code&gt; se refere ao título atribuído&amp;nbsp;para o módulo no Gerenciador de Módulos. Veja o&amp;nbsp;exemplo para o módulo que exibe o menu:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;jdoc:include type=&#34;module&#34; name=&#34;mainmenu&#34; title=&#34;Menu&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Já o&amp;nbsp;tipo &lt;code&gt;modules&lt;/code&gt; define uma posição mais genérica do modelo que poderá ser ocupada por vários módulos —&amp;nbsp;como uma sidebar, por exemplo. Nesse caso, o atributo &lt;code&gt;title&lt;/code&gt; não é necessário.&lt;/p&gt;

&lt;p&gt;Observe que para &lt;a title=&#34;Criando Sidebar Dinâmica no WordPress&#34; href=&#34;http://tableless.com.br/criando-sidebar-dinamica-no-wordpress/&#34; target=&#34;_blank&#34;&gt;criar&amp;nbsp;uma sidebar dinâmica&amp;nbsp;no WordPress&lt;/a&gt;, normalmente&amp;nbsp;registramos a posição&amp;nbsp;no arquivo &lt;em&gt;functions.php&lt;/em&gt; e adicionamos&amp;nbsp;o seguinte trecho em algum lugar do arquivo &lt;em&gt;sidebar.php&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;div id=&#34;sidebar&#34; role=&#34;complementary&#34;&amp;gt;
  &amp;lt;?php dynamic_sidebar( &#39;aside&#39; ); ?&amp;gt;
&amp;lt;/div&amp;gt;&lt;/pre&gt;

&lt;p&gt;No&amp;nbsp;Joomla!, para a mesma finalidade, registramos&amp;nbsp;a posição no arquivo &lt;em&gt;templateDetails.xml&lt;/em&gt; e adicionamos&amp;nbsp;o seguinte trecho no&amp;nbsp;modelo:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;aside id=&#34;sidebar&#34; role=&#34;complementary&#34;&amp;gt;
   &amp;lt;jdoc:include type=&#34;modules&#34; name=&#34;aside&#34; /&amp;gt;
&amp;lt;/aside&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;resumo-das-declarações-jdoc&#34;&gt;Resumo das declarações JDOC&lt;/h4&gt;

&lt;p&gt;Podemos, então, esquematizar as declarações JDOC na seguinte tabela:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th style=&#34;text-align: left&#34;&gt;
      Tipo
    &lt;/th&gt;
    
    &lt;th style=&#34;text-align: left&#34;&gt;
      Função
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;component&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Carrega o conteúdo principal da página.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;head&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Carrega folhas de estilo, scripts e meta elementos padrões da página.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;message&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Carrega, não necessariamente, mensagens de sistema e de erros de requisição de página.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;module&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Carrega, não necessariamente, um único módulo na posição e de título atribuídos.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;code&gt;modules&lt;/code&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      Carrega, não necessariamente, um ou vários módulos na posição atribuída.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;modelo-básico&#34;&gt;Modelo básico&lt;/h3&gt;

&lt;p&gt;Apresentadas as declarações JDOC, já podemos implementar um&amp;nbsp;modelo básico com&amp;nbsp;marcação semântica sugerida:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;?php defined(&#39;_JEXEC&#39;) or die(&#39;Acesso restrito!&#39;); ?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;&amp;lt;?php echo $this-&amp;gt;language; ?&amp;gt;&#34;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;jdoc:include type=&#34;head&#34; /&amp;gt;
  &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;&amp;lt;?php echo $this-&amp;gt;baseurl; ?&amp;gt;/templates/&amp;lt;?php echo $this-&amp;gt;template; ?&amp;gt;/css/style.css&#34; type=&#34;text/css&#34; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;?php echo $this-&amp;gt;title; ?&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;nav&amp;gt;&amp;lt;jdoc:include type=&#34;module&#34; name=&#34;mainmenu&#34; title=&#34;Menu&#34; /&amp;gt;&amp;lt;/nav&amp;gt;
  &amp;lt;/header&amp;gt;
  &amp;lt;section id=&#34;content&#34;&amp;gt;
     &amp;lt;article role=&#34;main&#34;&amp;gt;
       &amp;lt;jdoc:include type=&#34;message&#34; /&amp;gt;
       &amp;lt;jdoc:include type=&#34;component&#34; /&amp;gt;
     &amp;lt;/article&amp;gt;
     &amp;lt;aside role=&#34;complementary&#34;&amp;gt;
       &amp;lt;jdoc:include type=&#34;modules&#34; name=&#34;aside&#34; /&amp;gt;
     &amp;lt;/aside&amp;gt;
  &amp;lt;/section&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;proteção-contra-acesso-direto&#34;&gt;Proteção contra acesso direto&lt;/h4&gt;

&lt;p&gt;Na primeira linha, protegemos o arquivo contra o acesso direto. Funciona assim: o&amp;nbsp;Joomla! define uma constante chamada &lt;strong&gt;_JEXEC&lt;/strong&gt; que marca uma entrada segura de acesso aos arquivos através do &lt;em&gt;/index.php&lt;/em&gt;&amp;nbsp;na raiz da instalação; se, portanto, o arquivo&amp;nbsp;&lt;em&gt;/templates/meunovotemplate/index.php&lt;/em&gt;&amp;nbsp;for&amp;nbsp;acessado diretamente, o Joomla! verificará que a constante não foi definida e&amp;nbsp;não exibirá informações em mensagens de erros que muito provavelmente ocorrerão&amp;nbsp;e&amp;nbsp;que podem expor a instalação para mal-intencionados de plantão — é exibida a mensagem &amp;#8220;Acesso restrito!&amp;#8221; que definimos.&lt;/p&gt;

&lt;p&gt;Com o&amp;nbsp;WordPress&amp;nbsp;é quase a mesma coisa: a diferença é que a&amp;nbsp;constante&amp;nbsp;se chama&amp;nbsp;&lt;strong&gt;ABSPATH&lt;/strong&gt; e é&amp;nbsp;definida mais especificamente no arquivo &lt;em&gt;/wp-load.php&lt;/em&gt; (o &lt;em&gt;/index.php&lt;/em&gt; inclui o &lt;em&gt;/wp-blog-header.php&lt;/em&gt;, que por sua vez inclui o &lt;em&gt;/wp-load.php&lt;/em&gt;&amp;nbsp;— todos na raiz da instalação). A nível de curiosidade, aqui no Tableless não exibimos nenhuma mensagem para as tentativas de acesso direto aos arquivos.&lt;/p&gt;

&lt;h4 id=&#34;processando-mais-nbsp-conteúdo-dinâmico&#34;&gt;Processando mais&amp;nbsp;conteúdo dinâmico&lt;/h4&gt;

&lt;p&gt;Na&amp;nbsp;terceira&amp;nbsp;linha, definimos o idioma da página dinamicamente&amp;nbsp;com o trecho&amp;nbsp;&lt;code&gt;&amp;lt;?php echo $this-&amp;gt;language; ?&amp;gt;&lt;/code&gt;, que retorna via PHP o código HTML do idioma definido para&amp;nbsp;o site no Gerenciador de Idiomas do painel de administração.&amp;nbsp;Também utilizamos essa técnica para informar o endereço da folha de estilo &lt;em&gt;style.css&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;&lt;strong&gt;&amp;lt;?php echo $this-&amp;gt;baseurl; ?&amp;gt;&lt;/strong&gt;/templates/&lt;strong&gt;&amp;lt;?php echo $this-&amp;gt;template; ?&amp;gt;&lt;/strong&gt;/css/style.css&#34; type=&#34;text/css&#34; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Assim, além das declarações JDOC, o Joomla! também processa essas&amp;nbsp;propriedades do site disponíveis a partir do template, o que&amp;nbsp;minimiza a sua manutenção —&amp;nbsp;já que não precisamos ficar editando o modelo toda vez que mudarmos&amp;nbsp;o título&amp;nbsp;do site, ou o domínio, idioma, etc. Os nomes para retornar as propriedades mais importantes são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;baseurl:&lt;/strong&gt;&amp;nbsp;o domínio do&amp;nbsp;site (ex.: &lt;a href=&#34;http://www.tableless.com.br&#34;&gt;http://www.tableless.com.br&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;language:&lt;/strong&gt;&amp;nbsp;o código HTML do idioma definido para o site&amp;nbsp;(ex.: pt-br);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;template:&lt;/strong&gt;&amp;nbsp;o nome do diretório do template atual&amp;nbsp;do site (ex.: meunovotemplate);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title:&lt;/strong&gt;&amp;nbsp;o título do site;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;description:&lt;/strong&gt;&amp;nbsp;a descrição do site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a title=&#34;Propriedades do site Joomla! disponíveis a partir do template&#34; href=&#34;https://docs.joomla.org/Objects,_methods_and_properties_available_from_your_template&#34; target=&#34;_blank&#34;&gt;Consulte a lista completa das propriedades disponíveis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Observe que as declarações JDOC somadas a&amp;nbsp;essas propriedades&amp;nbsp;estão para os templates do Joomla! assim como as &lt;strong&gt;template tags&lt;/strong&gt;&amp;nbsp;estão para os temas do WordPress. Bacana, né?&lt;/p&gt;

&lt;h3 id=&#34;componente-só-nas-páginas-internas&#34;&gt;Componente só nas páginas internas&lt;/h3&gt;

&lt;p&gt;Podemos ainda fazer com que o Joomla! processe apenas o componente das páginas internas&amp;nbsp;com o auxílio de um módulo. O truque é definir sua visibilidade&amp;nbsp;apenas para a&amp;nbsp;página inicial&amp;nbsp;e&amp;nbsp;daí, através de operadores condicionais e do&amp;nbsp;método &lt;code&gt;int countModules( $condition )&lt;/code&gt;, que verifica a visibilidade do módulo na página, controlamos manualmente o que carregar na página inicial e o que carregar nas páginas internas. Segue uma sugestão de código:&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;&amp;lt;article role=&#34;main&#34;&amp;gt;

  &amp;lt;!-- conteúdo exibido em todas as páginas --&amp;gt;

  &amp;lt;?php if ($this-&amp;gt;countModules( &#39;slideshow&#39; )) :
  // se o módulo estiver visível na página ?&amp;gt;

  &amp;lt;div id=&#34;home&#34;&amp;gt;
    &amp;lt;jdoc:include type=&#34;module&#34; name=&#34;slideshow&#34; title=&#34;Slideshow&#34; /&amp;gt;
    &amp;lt;!-- conteúdo exibido somente na página inicial --&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;?php endif; ?&amp;gt;
  &amp;lt;?php if (!$this-&amp;gt;countModules( &#39;slideshow&#39; )) :
  // se o módulo não estiver visível na página ?&amp;gt;

  &amp;lt;div id=&#34;inner&#34;&amp;gt;
    &amp;lt;jdoc:include type=&#34;component&#34; /&amp;gt;
    &amp;lt;!-- conteúdo exibido somente nas páginas internas --&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;?php endif; ?&amp;gt;

&amp;lt;/article&amp;gt;&lt;/pre&gt;

&lt;p&gt;No exemplo acima, com a&amp;nbsp;configuração de visibilidade&amp;nbsp;do módulo &amp;#8220;slideshow&amp;#8221; apenas para&amp;nbsp;a página inicial, o componente da página inicial não será processado quando ela for&amp;nbsp;acessada — embora o back-end do Joomla! ainda entenda que a página inicial se refere àquele&amp;nbsp;componente. Mas lembre-se: a página inicial é a principal página do seu site e o componente, seu principal conteúdo. Pelo que você iria substituí-lo? Será que o Google e os seus coleguinhas iriam gostar?&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-template-no-joomla&#34;&gt;Instalando o template no Joomla!&lt;/h2&gt;

&lt;p&gt;Existem quatro&amp;nbsp;formas de instalar extensões no Joomla!: pelo JED, enviando um pacote de arquivos, a partir do diretório da instalação ou&amp;nbsp;a partir de um URL. Em&amp;nbsp;nosso caso, optaremos por enviar&amp;nbsp;um pacote de arquivos: é só compactar o conteúdo do diretório do template&amp;nbsp;(&lt;em&gt;.zip&lt;/em&gt;, &lt;em&gt;.tar.gz&lt;/em&gt; ou &lt;em&gt;tar.bz2&lt;/em&gt;) e fazer o upload no Joomla! pelo Gerenciador de Extensões do painel de administração:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/instalacao-de-extensoes-no-joomla.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-48873&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/05/instalacao-de-extensoes-no-joomla.png&#34; alt=&#34;Instalação de extensões no Joomla!&#34; width=&#34;900&#34; height=&#34;500&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Os arquivos e subdiretórios do template serão colocados em um diretório com o mesmo nome do arquivo compactado em &lt;em&gt;/templates/&lt;/em&gt;. Além disso,&amp;nbsp;o template será listado no Gerenciador de Temas — com aquelas informações que informamos no arquivo&amp;nbsp;&lt;em&gt;templateDetails.xml&amp;nbsp;—,&lt;/em&gt;&amp;nbsp;em que&amp;nbsp;deve ser definido&amp;nbsp;como &lt;strong&gt;tema padrão do site&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Após a instalação, você ainda pode continuar editando&amp;nbsp;o seu template sem nenhum problema. Considere, por exemplo, adicionar um script ao site: crie&amp;nbsp;diretamente um diretório&amp;nbsp;para scripts no diretório do template instalado&amp;nbsp;(e não esqueça do &lt;em&gt;index.html&lt;/em&gt; em branco), informe-os no respectivo&amp;nbsp;&lt;em&gt;templatesDetails.xml&lt;/em&gt; (como boa prática), adicione-os ao modelo&amp;nbsp;e pronto!&lt;/p&gt;

&lt;p&gt;Go ahead!&amp;nbsp;Você é livre para editar o template e conferir o resultado em tempo real — inclusive editar a geração do código HTML pelo Joomla! para o conteúdo dinâmico com &lt;strong&gt;overrides&lt;/strong&gt;, mas isso é assunto de&amp;nbsp;outro artigo.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;A criação de&amp;nbsp;um template básico para o Joomla!, como se vê, não&amp;nbsp;é nenhuma novidade para quem já desenvolve temas para o WordPress.&amp;nbsp;É claro que esta é&amp;nbsp;apenas uma introdução aos templates do&amp;nbsp;Joomla! e não aborda&amp;nbsp;tudo o que podemos fazer. Podemos, por exemplo, manipular o conteúdo dinâmico do elemento &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&amp;nbsp;(como retirar scripts padrões desnecessários em alguns casos),&amp;nbsp;definir parâmetros para&amp;nbsp;o template configuráveis pelo&amp;nbsp;painel de administração (como nos temas do WordPress a partir da versão 3.4), permitir a mudança de&amp;nbsp;idioma do próprio modelo (para sites multilíngues) e muito mais! Aqui, porém, nos contentamos com a&amp;nbsp;criação de um template que você poderá usar como base em&amp;nbsp;seus próximos projetos com o Joomla!.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/05/template.zip&#34;&gt;Baixe o template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E até a próxima pessoal!&lt;/p&gt;

&lt;h3 id=&#34;referências&#34;&gt;Referências&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title=&#34;Documentação do Joomla!&#34; href=&#34;http://docs.joomla.org&#34; target=&#34;_blank&#34;&gt;Documentação do Joomla!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&#34;Documentação do WordPress&#34; href=&#34;http://codex.wordpress.org&#34; target=&#34;_blank&#34;&gt;Documentação do WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rastreando exceções no PHP com o Airbrake</title>
      <link>https://tableless.github.io/hugo-public/rastreando-excecoes-no-php-com-o-airbrake/</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/rastreando-excecoes-no-php-com-o-airbrake/</guid>
      <description>

&lt;p&gt;Identificar erros, e suas causas, em uma aplicação web pode se tornar uma tarefa complicada. Ter algumas ferramentas à mão pode simplificar bastante essa missão.&lt;/p&gt;

&lt;p&gt;Algo que provavelmente ajuda a rastrear uma falha são os logs da aplicação ou do servidor onde ela está sendo executada, mas não é fácil encontrar algo específico, especialmente se o volume de registros é grande.&lt;/p&gt;

&lt;p&gt;Outra situação desagradável é quando os erros acontecem em situações específicas, difíceis de reproduzir.&lt;/p&gt;

&lt;p&gt;Ainda pode haver um cenário em que as exceções acontecem com os usuários, mas nunca são reportadas aos desenvolvedores. E como verificar logs proativamente é algo muito improvável, esses erros ficam no esquecimento.&lt;/p&gt;

&lt;p&gt;Pensando nesses obstáculos, o &lt;a title=&#34;Airbrake&#34; href=&#34;https://airbrake.io/&#34; target=&#34;_blank&#34;&gt;Airbrake&lt;/a&gt; pode facilitar muito a vida de quem desenvolve e mantém software para web. Conheci ele usando o &lt;a title=&#34;Codebase&#34; href=&#34;https://www.codebasehq.com/&#34; target=&#34;_blank&#34;&gt;Codebase&lt;/a&gt; (também uma excelente ferramenta, porém para gerenciamento de projetos), que tem integração na parte de tickets/rastreamento de bugs.&lt;/p&gt;

&lt;h2 id=&#34;1-qual-é-a-mágica&#34;&gt;1. Qual é a mágica?&lt;/h2&gt;

&lt;p&gt;O princípio do funcionamento do Airbrake é bem simples: toda vez que uma exceção ou erro são gerados, as informações sobre a requisição, sessão do usuário e ambiente são enviadas para o servidor através da API. A partir dessas informações, são gerados relatórios e é possível realizar buscas no histórico. Uma grande vantagem é que os erros são agrupados, então se um mesmo acontece com frequência não “sujará” o log.&lt;/p&gt;

&lt;p&gt;A cada novo erro na sua aplicação, uma notificação é enviada por e-mail.&lt;/p&gt;

&lt;h2 id=&#34;2-configurando-o-serviço&#34;&gt;2. Configurando o serviço&lt;/h2&gt;

&lt;p&gt;Para iniciar, você deve ter uma conta no &lt;a title=&#34;Airbrake&#34; href=&#34;https://airbrake.io/&#34; target=&#34;_blank&#34;&gt;Airbrake&lt;/a&gt;. Não há plano gratuito, mas existe um período de testes de 30 dias.&lt;/p&gt;

&lt;p&gt;Ainda existe a opção de usar uma alternativa open source compatível com a mesma API, que é o &lt;a title=&#34;Errbit&#34; href=&#34;https://github.com/errbit/errbit&#34; target=&#34;_blank&#34;&gt;Errbit&lt;/a&gt;, mas nesse caso você precisa instalar o serviço em um servidor próprio. Caso opte pelo Errbit, as instruções de instalação estão disponíveis no repositório do GitHub: &lt;a title=&#34;Repositório do Errbit no GitHub&#34; href=&#34;https://github.com/errbit/errbit&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/errbit/errbit&#34;&gt;https://github.com/errbit/errbit&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;3-instalação&#34;&gt;3. Instalação&lt;/h2&gt;

&lt;p&gt;Como minha linguagem do dia-a-dia é PHP, vou seguir com as instruções focando nela, mas a lógica de instalação não muda muito de uma linguagem para outra. Caso precise, no site do Airbrake existem &lt;a title=&#34;Integração do Airbrake com linguagens&#34; href=&#34;https://airbrake.io/languages&#34; target=&#34;_blank&#34;&gt;instruções para outras linguagens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se você já estiver usando o &lt;a href=&#34;https://getcomposer.org/&#34; target=&#34;_blank&#34;&gt;Composer&lt;/a&gt;, basta adicionar a dependência no arquivo &lt;strong&gt;composer.json&lt;/strong&gt; do seu projeto:&lt;/p&gt;

&lt;pre&gt;{ 
    &#34;require&#34;: {
        &#34;dbtlr/php-airbrake&#34;: &#34;dev-master&#34;
    }
}&lt;/pre&gt;

&lt;p&gt;Se não usa o Composer, essa é uma ótima oportunidade para começar. O Andre Cardoso escreveu sobre ele aqui no Tableless: &lt;a title=&#34;Composer para iniciantes&#34; href=&#34;http://tableless.com.br/composer-para-iniciantes/&#34; target=&#34;_blank&#34;&gt;Composer para iniciantes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Caso não esteja usando um framework, provavelmente precisará adicionar a chamada ao class loader do Composer:&lt;/p&gt;

&lt;pre&gt;require_once &#39;vendor/autoload.php&#39;;&lt;/pre&gt;

&lt;h2 id=&#34;4-integração&#34;&gt;4. Integração&lt;/h2&gt;

&lt;p&gt;Agora você precisa fazer com que as exceções e erros do PHP sejam enviadas para a o Airbrake, para isso você tem pelo menos dois caminhos possíveis de acordo com a estrutura do seu projeto:&lt;/p&gt;

&lt;h3 id=&#34;sem-framework-ou-com-um-framework-que-não-tem-manipulação-de-exceções&#34;&gt;Sem framework ou com um framework que não tem manipulação de exceções&lt;/h3&gt;

&lt;p&gt;Nesse caso, basta usar a manipulação de exceções da própria API, assim:&lt;/p&gt;

&lt;pre&gt;Airbrake\EventHandler::start(&#39;API_KEY’);&lt;/pre&gt;

&lt;p&gt;Lembrando de substituir o &lt;strong&gt;API_KEY&lt;/strong&gt; pela sua própria chave da API do Airbrake.&lt;/p&gt;

&lt;p&gt;Adicionando essa chamada logo no início do seu script ou em um dos pontos de entrada da sua aplicação as funções set_exception_handler e set_error_handler, do PHP, são chamadas.&lt;/p&gt;

&lt;h3 id=&#34;com-framework-que-tem-manipulação-de-exceções&#34;&gt;Com framework que tem manipulação de exceções&lt;/h3&gt;

&lt;p&gt;Para registrar a API, basta usar o seguinte trecho de código junto ao manipulador de exceções do seu framework:&lt;/p&gt;

&lt;pre&gt;$config = new Airbrake\Configuration(&#39;API_KEY&#39;);
$client = new Airbrake\Client($config);
$client-&amp;gt;notifyOnException($exception);&lt;/pre&gt;

&lt;p&gt;Para facilitar, para alguns, vou dar o exemplo em dois frameworks que tenho usado:&lt;/p&gt;

&lt;h4 id=&#34;com-laravel&#34;&gt;Com Laravel&lt;/h4&gt;

&lt;p&gt;Edite o arquivo &lt;strong&gt;app/start/global.php&lt;/strong&gt;, da seguinte maneira:&lt;/p&gt;

&lt;pre&gt;App::error(function (Exception $exception, $code)
{
    Log::error($exception);

    // Airbrake
    $config = new Airbrake\Configuration(&#39;API_KEY&#39;);
    $client = new Airbrake\Client($config);
    $client-&amp;gt;notifyOnException($exception);

});&lt;/pre&gt;

&lt;h4 id=&#34;com-slim-framework&#34;&gt;Com Slim Framework&lt;/h4&gt;

&lt;p&gt;Edite o arquivo &lt;strong&gt;public/index.php&lt;/strong&gt;, e adicione o seguinte trecho depois de ter instanciado a aplicação:&lt;/p&gt;

&lt;pre&gt;$app-&amp;gt;error(function (\Exception $e) use ($app) {
    $app-&amp;gt;getLog()-&amp;gt;error($e);

    // Airbrake
    $config = new Airbrake\Configuration(&#39;API_KEY&#39;);
    $client = new Airbrake\Client($config);
    $client-&amp;gt;notifyOnException($e);

});&lt;/pre&gt;

&lt;h2 id=&#34;5-um-pequeno-exemplo-funcional&#34;&gt;5. Um pequeno exemplo funcional&lt;/h2&gt;

&lt;p&gt;Caso você queira fazer um teste rápido, pode usar o seguinte script e executá-lo (depois de ter instalado a dependência com Composer).&lt;/p&gt;

&lt;pre&gt;&amp;lt;?php
require_once &#39;vendor/autoload.php&#39;;
Airbrake\EventHandler::start(&#39;API_KEY&#39;);

throw new Exception(&#39;Testando o Airbrake&#39;);&lt;/pre&gt;

&lt;p&gt;A cada execução desse script, um novo registro de exceção deve ser gravado na sua conta no Airbrake.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O Airbrake não é a única opção disponível para gerenciar e rastrear as exceções da sua aplicação (apenas para citar mais uma opção, tenho usado o &lt;a title=&#34;Sentry&#34; href=&#34;https://www.getsentry.com/&#34; target=&#34;_blank&#34;&gt;Sentry&lt;/a&gt; com sucesso em pelo menos um projeto), mas pode ser um ponto de partida interessante para que você tenha uma visão diferente, e mais prática, sobre os erros do seu código.&lt;/p&gt;

&lt;p&gt;Caso você opte por usar o Errbit, talvez precise de algumas configurações mais avançadas (como determinar o host ou resource do serviço, por exemplo), então a documentação oficial da bilbioteca para PHP pode te ajudar: &lt;a title=&#34;Opções de configurações do PHP Airbrake&#34; href=&#34;https://github.com/dbtlr/php-airbrake#configuration-options&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/dbtlr/php-airbrake#configuration-options&#34;&gt;https://github.com/dbtlr/php-airbrake#configuration-options&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elevação ou JavaScript hoisting</title>
      <link>https://tableless.github.io/hugo-public/elevacao-ou-javascript-hoisting/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/elevacao-ou-javascript-hoisting/</guid>
      <description>

&lt;h2 id=&#34;um-pouco-de-teoria-antes-da-diversão&#34;&gt;Um pouco de Teoria antes da diversão.&lt;/h2&gt;

&lt;p&gt;Muitas vezes, um simples princípio não compreendido, pode confundir novatos ou especialistas em JavaScript. Neste artigo, vamos tentar entender melhor um problema comum, que é mais simples do que parece.&lt;/p&gt;

&lt;h2 id=&#34;declarações-na-frente&#34;&gt;Declarações na frente&lt;/h2&gt;

&lt;p&gt;Antigamente em linguagens como C, se usavam funções ou procedimentos para dividir um programa, mas havia um problema: as declarações deveriam ficar sempre na frente.&lt;/p&gt;

&lt;p&gt;Suponha que você queira usar uma função que junta palavras:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;juntarPalavras(&#39;Arco&#39;, &#39;íris&#39;);&lt;/pre&gt;

&lt;p&gt;Mas temos um problema aqui, não? Essa função não foi definida antes de ser chamada!&lt;/p&gt;

&lt;p&gt;O programa retornará um erro, pois &lt;strong&gt;juntarPalavras()&lt;/strong&gt; não foi criada, ou acha que a linguagem deve permitir que você use funções que são definidas no final do código?&lt;/p&gt;

&lt;p&gt;Declarar funções no início do programa resolveu o problema por um tempo, pois todas as funções e variáveis eram declaradas antes de serem usadas, sendo assim não se tinha erros de referência.&lt;/p&gt;

&lt;p&gt;Com o tempo os programadores pensaram: &amp;#8220;Mas por que cargas d&amp;#8217;água não fazemos isso mais amigável e fácil de ler?&amp;#8221;, &amp;#8220;por que ler o código de baixo para cima e, não de cima para baixo?&amp;#8221;. Agora podemos colocar as definições em qualquer lugar do código e usá-los, mesmo antes de realmente serem definidos, que maravilha não?&lt;/p&gt;

&lt;p&gt;O que acontece agora é que os compiladores ou até mesmo linguagens runtime leem todo o programa para saber que funções e variáveis você declarou no código. Após isso, a execução real acontece e ele já sabe onde está cada coisa. JavaScript faz exatamente isso, o que chamamos de Hoisting.&lt;/p&gt;

&lt;h2 id=&#34;hora-da-diversão&#34;&gt;Hora da diversão&lt;/h2&gt;

&lt;p&gt;Vamos começar com algo leve, para ir aquecendo os neurônios, veja o seguinte código:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;nome = &#39;Jonatan&#39;;
console.log(nome);
// Jonatan
&lt;/pre&gt;

&lt;p&gt;Até aqui nada de novo, apenas iniciamos a variável nome com o valor jonatan e mostramos na tela;&lt;/p&gt;

&lt;p&gt;Certo, e que tal tentarmos isso:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var nome = meunome;
console.log(nome);
// ReferenceError: meunome is not defined
&lt;/pre&gt;

&lt;p&gt;Recebemos um erro bem obvio não acha? Como vamos definir o &lt;strong&gt;nome&lt;/strong&gt; com o valor de &lt;strong&gt;meunome&lt;/strong&gt; se essa variável nem existe ainda?&lt;/p&gt;

&lt;p&gt;Agora, deste jeito:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var nome = meunome;
console.log(nome);
var meunome;
// undefined
&lt;/pre&gt;

&lt;p&gt;Opa! “undefined”, sacam a jogada?&lt;/p&gt;

&lt;p&gt;Isso acontece porque o JavaScript não obriga você a declarar variáveis, ​​permite que você defina as funções em qualquer lugar que você queira, o que lhe permite usar uma função antes de sua definição. O nome hoisting, elevação ou até mesmo içamento, é só um termo especificado, pois ele arranca as declarações até o topo do seu escopo.&lt;/p&gt;

&lt;p&gt;Beleza, agora qual a diferença entre declaração e inicialização? Simples:&lt;/p&gt;

&lt;p&gt;Aqui apenas declaramos a variável &lt;strong&gt;meunome&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var meunome;
//undefined
&lt;/pre&gt;

&lt;p&gt;Já nesta parte iniciamos seu conteúdo como &lt;strong&gt;Jonatan&lt;/strong&gt;.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;meunome = &#39;Jonatan&#39;;
//Jonatan
&lt;/pre&gt;

&lt;p&gt;Este é o mesmo procedimento feito com as funções:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
var multiplicaNumero = function(a,b) {
  return a*b;
}
//TypeError: undefined is not a function
&lt;/pre&gt;

&lt;p&gt;Viram? Ele elevou a declaração var multiplicaNumero, mas como chamamos antes de ele ser iniciado recebemos um erro.&lt;/p&gt;

&lt;p&gt;Se mudarmos para:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
multiplicaNumero = function(a,b) {
  return a*b;
}
//ReferenceError: multiplicaNumero is not defined
&lt;/pre&gt;

&lt;p&gt;Recebemos o erro nos dizendo que &lt;strong&gt;multiplicaNumero&lt;/strong&gt; não foi declarado.&lt;/p&gt;

&lt;p&gt;Alteramos novamente:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;console.log(multiplicaNumero(10,10));
function multiplicaNumero (a,b) {
  return a*b;
}
// 100
&lt;/pre&gt;

&lt;p&gt;E agora o código executou sem erro porque toda declaração de função não anônima é elevada para o topo do escopo.&lt;/p&gt;

&lt;p&gt;Fácil não é? Com isso aprendemos que é uma boa prática declarar e/ou iniciar variáveis e funções no início do escopo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var a, foo = &#39;bar&#39;;
var bar = function(){
  var foo = &#39;foo&#39;;
  console.log(&#39;local: &#39;+foo);
};
bar();
console.log(&#39;global: &#39;+foo);
//local: foo
//global: bar 
&lt;/pre&gt;

&lt;p&gt;Boas práticas nos levam a caminhos melhores.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mudar ícones dos Custom Post Types no WordPress 3.8</title>
      <link>https://tableless.github.io/hugo-public/mudar-icones-dos-custom-post-types-wordpress-3-8/</link>
      <pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/mudar-icones-dos-custom-post-types-wordpress-3-8/</guid>
      <description>

&lt;p&gt;No dia 12 de Dezembro a Equipe do WordPress liberou a sua mais nova versão, o &lt;strong&gt;WordPress 3.8 Parker&lt;/strong&gt;, que é uma referência ao &lt;strong&gt;Charlie Parker&lt;/strong&gt;, grande saxofonista de Jazz. Visualmente a versão 3.8 do WordPress foi a que trouxe mais mudanças, a começar pela belíssima renovação de design do painel que também passou a ser responsivo e acessível por todos os dispositivos móveis, o que é um grande avanço, já que não será mais preciso usar os aplicativos móveis para fazer moderação e criação de posts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/overview.jpg&#34;&gt;&lt;img class=&#34;size-full wp-image-40235 aligncenter&#34; alt=&#34;overview&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/overview.jpg&#34; srcset=&#34;uploads/2014/01/overview.jpg 623w, uploads/2014/01/overview-329x101.jpg 329w, uploads/2014/01/overview-588x182.jpg 588w&#34; sizes=&#34;(max-width: 623px) 100vw, 623px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A fonte do Painel agora é a &lt;strong&gt;Open Sans&lt;/strong&gt; importada do &lt;a title=&#34;Open Sans&#34; href=&#34;http://www.google.com/fonts/specimen/Open+Sans&#34; target=&#34;_blank&#34;&gt;Google Web Fonts&lt;/a&gt; e foram criados 8 novos temas super coloridos e vibrantes (em um próximo artigo iremos ver como mudar a cor desses temas) para deixar a sua experiencia de uso mais agradável e única e como de costume foi lançado um novo tema padrão: &lt;a title=&#34;Novo tema padrão do WordPress 3.8&#34; href=&#34;http://twentyfourteendemo.wordpress.com/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Twenty Fourteen&lt;/strong&gt;&lt;/a&gt; além de novos ícones no menu.&lt;/p&gt;

&lt;p class=&#34;aligncenter&#34;&gt;
  &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/colors1.png&#34;&gt;&lt;img class=&#34; wp-image-40238 aligncenter&#34; alt=&#34;colors&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/colors1.png&#34; width=&#34;559&#34; height=&#34;398&#34; srcset=&#34;uploads/2014/01/colors1.png 932w, uploads/2014/01/colors1-235x168.png 235w, uploads/2014/01/colors1-435x310.png 435w&#34; sizes=&#34;(max-width: 559px) 100vw, 559px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Esses novos ícones são do pacote &lt;strong&gt;Dashicons&lt;/strong&gt;, um pacote de &lt;a href=&#34;http://tableless.com.br/utilizando-icones-formato-font/&#34; title=&#34;Font icons – Utilizando ícones em formato de font&#34;&gt;font para ícones&lt;/a&gt; que foi incorporada ao WordPress. Sua vantagem é a responsividade, já que o ícone se adapta a todo tamanho de tela sem serrilhar, é mais fácil de manipular a cor, posição e tamanho via CSS, o que torna sua aparência mais agradável. quem já acompanha o &lt;strong&gt;&lt;a href=&#34;http://tableless.com.br/&#34;&gt;Tableless&lt;/a&gt;&lt;/strong&gt; e lê os artigos do Mestre Jedi &lt;strong&gt;&lt;a href=&#34;http://tableless.com.br/author/diego-eis/&#34;&gt;Diego Eis&lt;/a&gt;&lt;/strong&gt; sabe bem disso, não é?&lt;/p&gt;

&lt;p&gt;E para quem usa &lt;a href=&#34;http://tableless.com.br/custom-post-types-wordpress&#34;&gt;Custom Post Types&lt;/a&gt; no WordPress pode ter notado o sumiço dos ícones (ou quer atualizá-los), pois os Custom Post Types manipulam o conteúdo do WordPress possibilitando que você personalize-o a partir da sua necessidade em um projeto, criando por exemplo um Portfólio personalizado em seu site, um Cadastro de Clientes e etc, as possibilidades são infinitas. Sabendo disso o nome Custom Post Types passa até a ficar estranho, pois o WordPress quebrou esse limite de somente paginas e posts e agora manipula todo tipo de conteúdo, é Você quem manda! Se Você quiser saber mais sobre o assunto, leia esse excelente artigo aqui do Tableless: &lt;a href=&#34;http://tableless.com.br/custom-post-types-wordpress/&#34;&gt;Custom Post Types no WordPress&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;vamos-à-prática&#34;&gt;Vamos à Prática&lt;/h2&gt;

&lt;p&gt;E agora Como adicionar esses novos ícones ao meu Custom Post Types? Eu já vi algumas poucas &lt;del datetime=&#34;2014-01-07&#34;&gt;gambiarras&lt;/del&gt; soluções na internet e não achei nada conveniente. Logo descobri que era mais fácil do que eu imaginava e resolvi escrever este pequeno tutorial para mostrar o quão fácil é trocar o ícone de seu Custom Post Type por um novo e lindo ícone.&lt;/p&gt;

&lt;p&gt;A Primeira coisa que se deve fazer é acessar seu arquivo &lt;em&gt;functions.php&lt;/em&gt; e editar uma linha da função que cria o Custom Post Types (Nesse momento você deve ter plena certeza do que está fazendo, pois qualquer movimento errado em seu arquivo functions.php pode fazer seu site &lt;del datetime=&#34;2014-01-07&#34;&gt;explodir&lt;/del&gt; sair do ar).&lt;/p&gt;

&lt;p&gt;Nesse exemplo é a linha 7, onde está escrito: &lt;strong&gt;menu_icon&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;lang-php&#34;&gt;$args = array(
        &#39;labels&#39; =&amp;gt; $labels,
        &#39;public&#39; =&amp;gt; true,
        &#39;publicly_queryable&#39; =&amp;gt; true,
        &#39;show_ui&#39; =&amp;gt; true,
        &#39;query_var&#39; =&amp;gt; true,
        &#39;menu_icon&#39; =&amp;gt; &#39;&lt;!--?php bloginfo(&#39;template_url&#39;); ?--&gt;/images/meu-icone.png&#39;,
        &#39;rewrite&#39; =&amp;gt; true,
        &#39;capability_type&#39; =&amp;gt; &#39;post&#39;,
        &#39;hierarchical&#39; =&amp;gt; false,
        &#39;menu_position&#39; =&amp;gt; null,
        &#39;supports&#39; =&amp;gt; array(&#39;title&#39;,&#39;editor&#39;,&#39;thumbnail&#39;)
      );&lt;/pre&gt;

&lt;p&gt;Se seu Custom Post Types está com algo assim: &lt;strong&gt; &amp;#8216;menu_icon&amp;#8217; =&amp;gt; null&lt;/strong&gt; , ou &lt;strong&gt;não tem esse campo&lt;/strong&gt;, basta você adicionar dentro do array que está guardado na variável &lt;strong&gt;$args&lt;/strong&gt; a linha&lt;strong&gt; &amp;#8216;menu_icon&amp;#8217; =&amp;gt; &amp;#8221;&lt;/strong&gt; e agora vem a parte fácil. Você vai escolher seu novo ícone nesse site: &lt;a href=&#34;http://melchoyce.github.io/dashicons/&#34;&gt;http://melchoyce.github.io/dashicons/&lt;/a&gt; e copiar seu nome, por exemplo: &lt;strong&gt;dashicons-wordpress&lt;/strong&gt; e coloca-lo entre aspas simples depois de&lt;strong&gt; =&amp;gt;&lt;/strong&gt; ficando assim: &lt;strong&gt;&amp;#8216;menu_icon&amp;#8217; =&amp;gt; &amp;#8216;dashicons-wordpress&amp;#8217;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/dash.png&#34;&gt;&lt;img class=&#34;size-full wp-image-40240 aligncenter&#34; alt=&#34;dashicons&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/dash.png&#34; width=&#34;159&#34; height=&#34;257&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa imagem troquei o ícone padrão de posts e dos Custom Post Types (Projetos e Destaque) para o &lt;strong&gt;dashicons-wordpress&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Feito isto, basta conferir no seu painel seu novo ícone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Capturando erros JS LIKE-A-BOSS</title>
      <link>https://tableless.github.io/hugo-public/capturando-erros-js-like-a-boss/</link>
      <pubDate>Wed, 12 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/capturando-erros-js-like-a-boss/</guid>
      <description>

&lt;p&gt;O evento &lt;strong&gt;onerror&lt;/strong&gt; é disparado quando há erros no script. Estes erros geralmente pertencem a duas categorias:&lt;/p&gt;

&lt;h4 id=&#34;erros-de-sintaxe&#34;&gt;Erros de sintaxe&lt;/h4&gt;

&lt;p&gt;Antes de serem executados, &lt;em&gt;scripts&lt;/em&gt; passam por uma análise sintática (operação mais conhecida como &lt;em&gt;parsing&lt;/em&gt;) – afim de encontrar erros de sintaxe antes da execução do &lt;em&gt;script&lt;/em&gt;. Qualquer um dos erros abaixo são erros de sintaxe:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;!-- string não fechada --&amp;gt;
&amp;lt;script&amp;gt;&#34;oops, fiz merd*&amp;lt;/script&amp;gt;
&amp;lt;!-- for errado --&amp;gt;
&amp;lt;script&amp;gt;for(;)&amp;lt;/script&amp;gt;
&amp;lt;!-- ??? (só pode ser coisa de estagiário) --&amp;gt;
&amp;lt;script&amp;gt;chamaFuncao() = &#39;estagiario maluco&#39;&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;h4 id=&#34;erros-de-runtime-exceções-não-tratadas&#34;&gt;Erros de &lt;em&gt;runtime&lt;/em&gt; (Exceções não tratadas)&lt;/h4&gt;

&lt;p&gt;Um &lt;em&gt;script&lt;/em&gt; pode até ser válido sintaticamente, ou seja, pode ter sido analisado com sucesso pelo &lt;em&gt;parser&lt;/em&gt; JS, mas mesmo assim ainda pode haver erros em tempo de execução (&lt;em&gt;runtime&lt;/em&gt;). Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// chamar métodos não definidos
dartVader.comerTorta() // &lt;a title=&#34;dartVader.comerTorta()&#34; href=&#34;http://d.pr/VRVy&#34; target=&#34;_blank&#34;&gt;clique aqui&lt;/a&gt; para mais informações.
// ler índices inexistentes
var lordSidious = jedi[ &#39;palpatine&#39; ];
// ler propriedades inexistentes
var paciencia = hanSolo.paciencia;
// mensagens de erro manuais
throw &#39;Noooooooooooooooooooo!&#39;;&lt;/pre&gt;

&lt;h2 id=&#34;erros-temos-que-pegar&#34;&gt;Erros: temos que pegar&lt;/h2&gt;

&lt;p&gt;Apenas precisamos tratar o evento &lt;strong&gt;onerror&lt;/strong&gt; de &lt;strong&gt;window&lt;/strong&gt;, e para isso precisamos definir o seguinte &lt;em&gt;callback&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;// navegadores antigos
window.onerror = function( message, filename, lineno ){
    // trate o erro
}

// navegadores modernos
window.addEventListener( &#39;error&#39;, function( event ){
    // a mensagem de erro
    console.log( event.message );
    // a url de onde ocorreu o erro
    console.log( event.filename );
    // o número da linha onde ocorreu o erro
    console.log( event.lineno );
});

// jQuery
$(window).on( &#39;error&#39;, function( event ){
    // event tem os mesmos dados do exemplo anterior
});&lt;/pre&gt;

&lt;p&gt;A função que trata o evento &lt;strong&gt;onerror&lt;/strong&gt;recebe 3 valores (como mostrado acima):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mensagem&lt;/strong&gt;: A mensagem de erro que o navegador joga (&lt;strong&gt;message&lt;/strong&gt; ou &lt;strong&gt;event.message&lt;/strong&gt; dos trechos código acima). Por exemplo: &amp;#8220;&lt;em&gt;Uncaught ReferenceError: comerTorta is not defined&lt;/em&gt;&amp;#8220;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URL&lt;/strong&gt;: O endereço URL de onde ocorreu o erro (&lt;strong&gt;filename&lt;/strong&gt; ou &lt;strong&gt;event.filename&lt;/strong&gt; dos trechos código acima).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linha&lt;/strong&gt;: O número da linha do documento ou &lt;em&gt;script&lt;/em&gt; de onde ocorreu o erro (&lt;strong&gt;lineno&lt;/strong&gt; ou &lt;strong&gt;event.lineno&lt;/strong&gt; dos trechos de código acima). Pode ser no contexto de um documento HTML (se o &lt;em&gt;script&lt;/em&gt; for &lt;em&gt;inline&lt;/em&gt;) ou de um arquivo &lt;strong&gt;.js&lt;/strong&gt; (se o &lt;em&gt;script&lt;/em&gt; for externo). Neste caso, o valor de &lt;strong&gt;filename&lt;/strong&gt;/&lt;strong&gt;event.filename&lt;/strong&gt; será o caminho de um arquivo &lt;strong&gt;.js&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por padrão, a função retorna &lt;strong&gt;false&lt;/strong&gt;, o que significa que a mensagem de erro será jogada no &lt;em&gt;console&lt;/em&gt; de erros. Se quisermos suprimir as mensagens de erro no &lt;em&gt;console&lt;/em&gt; (não aconselhável), apenas precisamos retornar &lt;strong&gt;true&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;window.addEventListener( &#39;error&#39;, function( event ){
    return true;
});&lt;/pre&gt;

&lt;h2 id=&#34;customize-mensagens-de-erro&#34;&gt;Customize mensagens de erro&lt;/h2&gt;

&lt;p&gt;Já que agora temos o poder de fazer o que quiser com nossas mensagens de erro, também podemos ter aparência customizada para elas. Podemos alcançar isso facilmente como no &lt;em&gt;script&lt;/em&gt; abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;window.addEventListener( &#39;error&#39;, function( event ){
    var boxError = document.createElement( &#39;div&#39; );
    boxError.className  = &#39;box-error&#39;;

    boxError.innerHTML  = &#39;&amp;lt;h4&amp;gt;Erro de JS:&amp;lt;/h4&amp;gt;&#39;;
    boxError.innerHTML += &#39;&amp;lt;p class=&#34;msg&#34;&amp;gt;&#39;+ event.message +&#39;&amp;lt;/p&amp;gt;&#39;;
    boxError.innerHTML += &#39;&amp;lt;p&amp;gt;Em: &#39;+ event.filename +&#39;&amp;lt;/p&amp;gt;&#39;;
    boxError.innerHTML += &#39;&amp;lt;p&amp;gt;Linha: &#39;+ event.lineno +&#39;&amp;lt;/p&amp;gt;&#39;;

    document.body.appendChild( boxError );
    return false;
});&lt;/pre&gt;

&lt;p&gt;O &lt;em&gt;script&lt;/em&gt; acima basicamente cria uma nova &lt;strong&gt;&lt;div&gt;&lt;/strong&gt;, monta o conteúdo da mensagem e a mostra no final. Agora é só definir o CSS para a classe &lt;strong&gt;.box-error&lt;/strong&gt; e &lt;em&gt;voilá,&lt;/em&gt; mensagens de erro customizadas.&lt;/p&gt;

&lt;h2 id=&#34;tenha-feedback-da-sua-aplicação&#34;&gt;Tenha feedback da sua aplicação&lt;/h2&gt;

&lt;p&gt;A maior utilidade que encontrei para isso é a possibilidade de fazer &lt;strong&gt;&lt;em&gt;logging&lt;/em&gt; de erros&lt;/strong&gt;. Numa aplicação, poderíamos por exemplo, fazer uma &lt;em&gt;requisição&lt;/em&gt; &lt;em&gt;ajax&lt;/em&gt; para nosso servidor salvar as informações do erro corrente e uma base de dados qualquer, e assim poderíamos gerar relatórios de erros da nossa aplicação com base nestes dados coletados, ou seja, graças a estas informações, estaríamos promovendo uma atitude focada na melhoria constante dos serviços.&lt;/p&gt;

&lt;h4 id=&#34;mantendo-as-coisas-simples-com-o-google-analytics&#34;&gt;Mantendo as coisas simples com o Google Analytics&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/12/Final-result.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-7566&#34; alt=&#34;&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/12/Final-result.jpg&#34; width=&#34;600&#34; height=&#34;143&#34; srcset=&#34;uploads/2012/12/Final-result.jpg 600w, uploads/2012/12/Final-result-300x71.jpg 300w&#34; sizes=&#34;(max-width: 600px) 100vw, 600px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pra quem já usa o &lt;strong&gt;Google Analytics&lt;/strong&gt;, aqui vai uma idéia que iria simplificar bastante o ato de fazer &lt;em&gt;log&lt;/em&gt; de erros: em vez de fazer uma requisição &lt;em&gt;ajax&lt;/em&gt; para o servidor da nossa aplicação, poderíamos simplesmente disparar &lt;a title=&#34;Eventos customizados do Google Analytics&#34; href=&#34;https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide?hl=pt-PT&#34; target=&#34;_blank&#34;&gt;eventos customizados do Google Analytics&lt;/a&gt; (com o método &lt;strong&gt;_trackEvent()&lt;/strong&gt;), e assim teríamos essas informações prontas com os relatórios bonitinhos da ferramenta – o que nos economizaria o trabalho de desenvolver toda uma estrutura para isso: criar uma tabela de erros no nosso banco de dados, escrever o &lt;em&gt;backend&lt;/em&gt; que receberia as requisições &lt;em&gt;ajax,&lt;/em&gt; e finalmente, implementar relatórios de erros.&lt;/p&gt;

&lt;h2 id=&#34;suporte&#34;&gt;Suporte&lt;/h2&gt;

&lt;p&gt;O evento &lt;strong&gt;window.onerror&lt;/strong&gt; é suportado por todos os navegadores atuais: Chrome 13+, Firefox 6.0+, Opera 11.60+, Safari 5.1+ e Internet Explorer 5.5+ (quem diria!).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Boas práticas de Acessibilidade</title>
      <link>https://tableless.github.io/hugo-public/boas-praticas-de-acessibilidade/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/boas-praticas-de-acessibilidade/</guid>
      <description>&lt;p&gt;Preparei uma pequena (nem tão pequena assim) apresentação que mostra algumas boas práticas e técnicas sobre acessibilidade para sistemas e websites. São pequenos ajustes que podemos incorporar mesmo depois de todo o desenvolvimento pronto e que dão resultados importantes para adequação dos seus sites ou sistemas.&lt;/p&gt;

&lt;div style=&#34;width:595px&#34; id=&#34;__ss_11217803&#34;&gt;
  &lt;strong style=&#34;display:block;margin:12px 0 4px&#34;&gt;&lt;a href=&#34;http://www.slideshare.net/diegoeis/apresentancao-acessibilidade&#34; title=&#34;Apresentancao acessibilidade&#34; target=&#34;_blank&#34;&gt;Apresentancao acessibilidade&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt; 
  
  &lt;div style=&#34;padding:5px 0 12px&#34;&gt;
    Veja mais &lt;a href=&#34;http://www.slideshare.net/&#34; target=&#34;_blank&#34;&gt;apresentações&lt;/a&gt; de &lt;a href=&#34;http://www.slideshare.net/diegoeis&#34; target=&#34;_blank&#34;&gt;Diego Eis&lt;/a&gt;
  &lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WebIntents – Framework para WebApps</title>
      <link>https://tableless.github.io/hugo-public/webintents-framework-para-webapps/</link>
      <pubDate>Fri, 06 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/webintents-framework-para-webapps/</guid>
      <description>&lt;p&gt;O Chrome e o Firefox estão trabalhando juntos em um framework open-source que fazem aplicações web trabalhem juntas sem que uma precise dar informações sobre seus respectivos sistemas. O nome deste framework é &lt;a href=&#34;http://www.webintents.com/?utm_source=TablelessComBr&amp;amp;utm_medium=postLink&amp;amp;utm_campaign=link&#34;&gt;WebIntents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O problema a ser resolvido é que se quisermos criar um sistema que utilize algumas facilidades de outros sistemas, nós precisamos aprender a API deste determinado sistema. Acontece que as APIs não são iguais. Se você quer utilizar um sistema de localização como Foursquare ou Gowalla, você precisa aprender como a API de cada um funciona e então escolher entre um dos dois ou utilizar os dois no seu sistema. Nesse caso, você tem o dobro do trabalho para manter seu sistema. Os dois podem modificar partes da sua API e você tem que ficar atento para que seu sistema não quebre. O WebIntents faz com que você consiga usar um comando para os dois serviços.&lt;/p&gt;

&lt;p&gt;Web Intents, based on an existing capability in Google&amp;#8217;s Android mobile OS, will let Web apps express a simple call for an action, like &amp;#8216;share&amp;#8217; or &amp;#8216;edit,&amp;#8217; which receiving apps will be designed to use, without either app needing to have specific knowledge of the APIs of the other. This way, instead of having to code for each specific Web app one might want to access, developers can just use these simple requests, which will be built into the browser. The Chrome and Firefox teams are each building this functionality for their own browser, but they&amp;#8217;re combining their proposals to use a single API for Web app developers to reach both platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://paul.kinlan.me/&#34;&gt;Paul Kinlan&lt;/a&gt;, o dono da ideia e desenvolvedor do Google, explica no em um &lt;a href=&#34;http://paul.kinlan.me/web-intents-a-fresh-look&#34;&gt;post no seu blog&lt;/a&gt; o que é o WebIntents:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;If I built an image gallery application and I wanted to let users edit an image so that they can remove red-eye from a photo I either have to build an application that edits the images, or integrate with a 3rd party solution. Doing this is hard and stops you from building an awesome image gallery; and what happens if the user has a favorite service that they already use to remove red-eye? Simple, you have a frustrated user.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Não é de hoje que iniciativas de desenvolvedores e grandes empresas tomam forma para que o desenovlvimento web fique cada vez mais fácil e menos trabalhoso. Isso aconteceu com muitos grupos de desenvolvedores, como o pessoal da &lt;a href=&#34;http://webstandards.org/?utm_source=TablelessComBr&amp;amp;utm_medium=link&amp;amp;utm_campaign=postLink&#34;&gt;WaSP&lt;/a&gt;, o pessoal da &lt;a href=&#34;http://www.whatwg.org/?utm_source=TablelessComBr&amp;amp;utm_medium=link&amp;amp;utm_campaign=postLink&#34;&gt;WHATWG&lt;/a&gt; e mais uma vez agora com o pessoal do &lt;a href=&#34;http://www.webintents.com/?utm_source=TablelessComBr&amp;amp;utm_medium=link&amp;amp;utm_campaign=postLink&#34;&gt;WebIntents&lt;/a&gt;. Claro, existem outras iniciativas anônimas que nos fizeram chegar até aqui.&lt;/p&gt;

&lt;p&gt;Eu gosto muito muito de uma frase do pessoal da WaSP utiliza há tempos: &lt;strong&gt;If not now, when? If not you, who?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/PaulKinlan/WebIntents&#34;&gt;Veja aqui o GitHub do Framework.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile First – A arte de pensar com foco</title>
      <link>https://tableless.github.io/hugo-public/mobile-first-a-arte-de-pensar-com-foco/</link>
      <pubDate>Tue, 13 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/mobile-first-a-arte-de-pensar-com-foco/</guid>
      <description>

&lt;p&gt;Durante muito tempo especialistas de diversas áreas previram o crescimento do uso dos dispositivos móveis. Demorou um pouco mas a previsão se tornou verdadeira. Hoje todo mundo carrega um pedaço de plástico com uma tela de vidro na mão o dia inteiro&amp;#8230; quase uma extensão de nossos corpos.&lt;/p&gt;

&lt;p&gt;Os dispositivos móveis se tornaram uma febre e vieram para ficar. É a melhor forma de fazer a inclusão digital para aqueles que não tem uma forma de ter um notebook ou um desktop em casa. Não estou falando daqueles smartphones de R$1500, mas dos muitos smartphones, com teclados qwerty, prontos para internet e que custam R$200. Isso sim é inclusão digital para as massas de verdade.&lt;/p&gt;

&lt;h3 id=&#34;alguns-números&#34;&gt;Alguns números&lt;/h3&gt;

&lt;p&gt;As &lt;a href=&#34;http://tech.fortune.cnn.com/2011/02/07/idc-smartphone-shipment-numbers-passed-pc-in-q4-2010/&#34;&gt;vendas de smartphones já passaram as de PCs&lt;/a&gt;. A utilização de emails pelos dispositivos móveis aumentou em 36%. Sem contar que &lt;a href=&#34;http://news.bango.com/2010/02/16/600-percent-growth-in-mobile-web-usage/&#34;&gt;o tráfego de visitação de websites utilizando smartphones cresceu 600% em 2010&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;O Paypal tempos atrás recebia algo em torno de $10 Milhões de dólares em pagamentos via mobiles. Por dia! &lt;a href=&#34;http://prowireless.com.au/paypal-mobile-payments&#34;&gt;Eles tem uma predição de movimentar algo em torno de 6 Bilhões só este ano&lt;/a&gt;! E em 2016 serão $31 Bilhões!&lt;/p&gt;

&lt;p&gt;As perspectivas globais são enormes. Abaixo, veja um inforgráfico que o blog &lt;a href=&#34;http://www.plexical.com/blog/2011/09/29/mobile-first-mobile-only/&#34;&gt;The Meta Cloud&lt;/a&gt; preparou. Cuidado para não se assustar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.plexical.com/blog/wp-content/uploads/2011/09/mobile-first-mobile-only.pdf&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/mobile-first-mobile-only.png&#34; alt=&#34;&#34; title=&#34;mobile-first-mobile-only&#34; width=&#34;570&#34; height=&#34;902&#34; class=&#34;alignnone size-full wp-image-4704&#34; srcset=&#34;uploads/2011/12/mobile-first-mobile-only.png 570w, uploads/2011/12/mobile-first-mobile-only-189x300.png 189w&#34; sizes=&#34;(max-width: 570px) 100vw, 570px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;o-conceito&#34;&gt;O conceito&lt;/h3&gt;

&lt;p&gt;Você consegue entender estes números? Se sim, você vai entender que o conceito do Mobile First faz muito sentido, mas vai contra toda uma tradição de desenvolvimento de sites que você está acostumado. A ideia do Mobiles First é que comecemos a desenvolver e planejar projetos web, desde um pequeno site até um grande sistema, primeiramente para dispositivos móveis e somente depois para desktops/notebooks.&lt;/p&gt;

&lt;h4 id=&#34;algumas-vantagens&#34;&gt;Algumas vantagens&lt;/h4&gt;

&lt;p&gt;Se o mundo inteiro está passando mais tempo acessando a internet com dispositivos móveis, não é muito sensato pensarmos primeiramente em fazermos sites para desktops/notebooks, não é? O fato é que ao colocar os mobiles primeiro lugar, desfrutamos de uma série de vantagens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;As capacidades técnicas são mais interessantes.&lt;/strong&gt; Com o mobiles você pode brincar com o acelerometro, GPS, multitouch, giroscópio e etc. Isso amplia a experiência do usuário para um patamar que o desktop nunca terá.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foco.&lt;/strong&gt; Quem já teve que adaptar um site para mobiles entende que informação demais prejudica. Se focar nas ações essenciais que o usuário executará ao acessar seu site com um dispositivo móvel é o básico.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A atenção em áreas como Arquitetura de Informação, Usabilidade e Acessibilidade é aumentada.&lt;/strong&gt; Em mobiles, decidir onde cada botão vai ser posicionado é tão essencial quanto a programação server-side ou um HTML bem feito.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Te prepara para outros cenários.&lt;/strong&gt; Fazer sites mobile é só o primeiro passo. Mas e os grandes formatos como SmartTVs ou outros dispositivos? Não vai demorar muito para acessarmos a internet de qualquer dispositivo sem bloqueios ou restrições.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;o-design&#34;&gt;O design&lt;/h3&gt;

&lt;p&gt;O design também precisa ser revisto. Na verdade, o design mais do que nunca conta com as respostas e os conceitos de AI, Acessibilidade e Usabilidade. Se antes fazíamos festa porque a resolução dos desktops aumentaram e agora temos mais espaço para trabalharmos, nos mobiles o cenário é completamente o contrário.&lt;/p&gt;

&lt;h4 id=&#34;arquitetura-de-informação&#34;&gt;Arquitetura de Informação&lt;/h4&gt;

&lt;p&gt;As informações que você previa no desktop precisam ser remanejadas, diminuidas e retrabalhadas para que se adaptem nas telas menores. A maioria dos celulares tem algo em torno de 320&amp;#215;480 pixels. Se não tomarmos cuidado, toda a informação pode se perder em uma tela tão pequena. No mundo mobile o simples é a palavra que manda.&lt;/p&gt;

&lt;p&gt;Você pode perceber que alguns websites conseguiram resolver bem seus problemas de excesso de informação promovendo em seus websites mobiles apenas as ações realmente importantes e dando foco ao conteúdo que provavelmente o usuário irá consumir quando estiver utilizando um pequeno dispositivo.&lt;/p&gt;

&lt;p&gt;Se você é usuário do Flickr, conhece aquele bando de opções que ele guarda em seu menu principal. São centenas de opções e ações que certamente não cabem em uma tela tão pequena.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/flickr1.png&#34; alt=&#34;screenshot da tela do site do Flickr versão desktop&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Um estudo profundo certamente deve ser feito para que você saiba exatamente quais informações e ações serão mais úteis na versão mobile.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://m.flickr.com/&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/flickr2.png&#34; alt=&#34;screenshot da tela do site do Flickr versão mobile&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;mantendo-informações-importantes&#34;&gt;Mantendo informações importantes&lt;/h4&gt;

&lt;p&gt;Existem também outras formas de acomodar um grande número de informações sem que isso atrapalhe o usuário. Uma delas é criando menus dropdown ou separando uma tela que guarda as informações que serão menos utilizadas mas que são igualmente importantes para a utilização do site/sistema. Veja abaixo dois bons exemplos vindo dos sites Gmail e ESPN.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/12/gmail.gif&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/gmail.gif&#34; alt=&#34;gmail versão mobile&#34; title=&#34;gmail&#34; width=&#34;640&#34; height=&#34;417&#34; class=&#34;alignnone size-full wp-image-4678&#34; srcset=&#34;uploads/2011/12/gmail.gif 640w, uploads/2011/12/gmail-300x195.gif 300w&#34; sizes=&#34;(max-width: 640px) 100vw, 640px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/12/espn.gif&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2011/12/espn.gif&#34; alt=&#34;epsn.com versão mobile&#34; title=&#34;espn&#34; width=&#34;638&#34; height=&#34;355&#34; class=&#34;alignnone size-full wp-image-4677&#34; srcset=&#34;uploads/2011/12/espn.gif 638w, uploads/2011/12/espn-300x166.gif 300w&#34; sizes=&#34;(max-width: 638px) 100vw, 638px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Onde os usuários utilizam seus mobiles e visitam seu site? Bem, de todo lugar. Algumas pessoas acham que usuários utilizam apenas quando estão em filas, ônibus, parados no trânsito etc. Mas algumas pesquisas mostram que 84% dos usuários usam seus dispositivos em casa. Isso mesmo&amp;#8230; em casa. Veja bem: quando as pessoas estão em casa, elas preferem utilizar seus smartphones em vez do notebook/desktop!&lt;/p&gt;

&lt;p&gt;62% utilizam enquanto assistem a TV. Até a TV perde atenção quando briga com os mobiles.&lt;/p&gt;

&lt;p&gt;Não existem mais desculpas. Os browsers para mobiles estão tão modernos quanto os dos desktops. O hardware está muito mais poderoso, mais do que poderíamos imaginar a dois anos atrás. Existe um número gigante de usuários utilizando estes dispositivos, isso os torna potenciais visitantes e claro, compradores. Porque desperdiçar esta oportunidade?&lt;/p&gt;

&lt;p&gt;Você pode &lt;a href=&#34;http://www.abookapart.com/products/mobile-first&#34;&gt;ler mais sobre este assunto neste livro&lt;/a&gt; esperto escrito por &lt;a href=&#34;http://www.lukew.com/&#34;&gt;LUKE WROBLEWSKI&lt;/a&gt;. Aproveite!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Utilizando a Biblioteca Modernizr</title>
      <link>https://tableless.github.io/hugo-public/utilizando-a-biblioteca-modernizr/</link>
      <pubDate>Mon, 17 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/utilizando-a-biblioteca-modernizr/</guid>
      <description>

&lt;h3 id=&#34;problemas-de-compatibilidade&#34;&gt;Problemas de compatibilidade&lt;/h3&gt;

&lt;p&gt;Quando produzimos um site os problemas de compatibilidade fazem parte da regra do jogo. Para tentar contornar estes problemas utilizamos hacks, comentários condicionais, sniffing de browsers e outras coisas, que muitas vezes mais prejudicam do que ajudam.&lt;/p&gt;

&lt;p&gt;Para ajudar mais ainda o CSS3 e o HTML5 apareceram derrubando tudo, e o problema de compatibilidade que já era chato, ficou mais chato que meia molhada. Embora os browsers estejam muito mais atuais e suportando propriedades avançadas de CSS3 e HTML5, não é garantia que todos eles suportem as mesmas propriedades. E é aqui que começamos a ter problemas novamente, como no passado.&lt;/p&gt;

&lt;p&gt;Como você consegue reconhecer quem um determinado browser suporta CSS Animation? Como você sabe que o browser conhece LocalStorage do HTML5? Você não vai ficar olhando numa tabelinha toda vez que tiver essas dúvidas para fazer um visual ou uma solução alternativa para tais browsers.&lt;/p&gt;

&lt;p&gt;É por essas e outras que você utilizará a Modernizr.&lt;/p&gt;

&lt;h3 id=&#34;o-que-é-a-modernizr&#34;&gt;O que é a Modernizr&lt;/h3&gt;

&lt;p&gt;Modernizr é uma pequena biblioteca Javascript que detecta a disponibilidade das novas características do HTML5 e CSS3 nos browsers. Muitas destas características já estão implementadas nos browsers, mas é muito chato você decorar quais novidades os browsers já estão suportando. O que a Modernizr faz é simples: ela te diz quais features um determinado browser suporta e insere classes no HTML para que você possa utilizar para fazer uma versão alternativa de visual ou solução.&lt;/p&gt;

&lt;p&gt;Entenda que a Modernizr não é um sniffing de browser. Ela é diferente. A Modernizr faz o trabalho de detectar das seguintes formas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ela testa 40 features de CSS3 e HTML5 em alguns milisegundos.&lt;/li&gt;
&lt;li&gt;Depois ela cria objetos javascript que contém os resultados destes testes.&lt;/li&gt;
&lt;li&gt;Aí são adicionadas classes no elemento HTML descrevendo exatamente quais propriedades e novidades são ou não nativamente suportadas.&lt;/li&gt;
&lt;li&gt;Depois disso você consegue ter os resultados descritos nos navegadores dinamicamente e então pode tomar decisões criando alternativas para aquelas propriedades não suportadas pelos browsers antigos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;como-funciona&#34;&gt;Como funciona&lt;/h3&gt;

&lt;p&gt;É simples: primeiro você baixa a versão mais atual da biblioteca no endereço &lt;a href=&#34;http://www.modernizr.com/&#34;&gt;http://www.modernizr.com/&lt;/a&gt;. O interessante é que você tem a opção para personalizar a biblioteca, indicando quais features você quer que a Modernizr teste no seu projeto.&lt;/p&gt;

&lt;p&gt;Depois você inclui esse pacote no seu HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
    &amp;lt;title&amp;gt;Teste de Modernizr&amp;lt;/title&amp;gt;
    &amp;lt;script src=&#34;modernizr-2.0.6.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Feito isso, insira uma classe &lt;em&gt;no-js&lt;/em&gt; no elemento &lt;em&gt;HTML&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html class=&#34;no-js&#34; lang=&#34;pt-br&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Quando a Modernizr rodar, ela irá substituir essa classe para uma &lt;em&gt;js&lt;/em&gt; se o browser estiver com o Javascript ligado, já te dando um feedback para tomar alguma atitude se o usuário estiver com o Javascript desligado.&lt;/p&gt;

&lt;p&gt;Junto com essa mudança são adicionadas outras classes, indicando o que o browser aceita nativamente ou o que ele não aceita. Ficará algo parecido com isso:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;html class=&#34; js flexbox canvas canvastext webgl no-touch geolocation postmessage websqldatabase no-indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths&#34; lang=&#34;pt-br&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;O browser que eu utilizei é o Safari/Mac. Pelo visto ele aceita bastante coisa. 😉&lt;/p&gt;

&lt;p&gt;O que o browser não aceita, a Modernizr insere uma classe com o prefixo &lt;strong&gt;no-&lt;/strong&gt; antes da classe, por exemplo: no-boxshadow, no-geolocation, no-touch etc.&lt;/p&gt;

&lt;p&gt;A Modernizr também cria um objeto Javascript contendo um valor booleano para cada uma dessas features, possibilitando a criação de testes. Um exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;if (Modernizr.geolocation) {
       alert(&#34;Aceita&#34;)
} else {
       alert(&#34;Não Aceita&#34;)
}
&lt;/pre&gt;

&lt;h3 id=&#34;exemplos-de-utilidade&#34;&gt;Exemplos de utilidade&lt;/h3&gt;

&lt;p&gt;Exemplo bem básico: imagine que você queira utilizar o box-shadow em seu projeto. Browsers como o IE6,7,8 não reconhecem essa feature, então seria interessante darmos uma alternativa, como por exemplo, colocando uma borda em vez de sombra. Assim o elemento não fica tão diferente do que deveria.&lt;/p&gt;

&lt;p&gt;Como a Modernizr colocou uma classe no elemento HTML referente a aceitação das features, podemos utilizá-la fazendo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;.loginBox {
    box-shadow:0 10px 10px rgba(0, 0, 0, 0.3);
}

.no-boxshadow .loginBox {
    border: 1px solid #CCC;
    border-bottom: 3px solid #CCC;
}
&lt;/pre&gt;

&lt;p&gt;Assim, se o browser não aceitar a propriedade box-shadow o usuário verá uma borda no lugar. Você pode fazer isso com praticamente qualquer nova feature do CSS3 e do HTML5. Uma &lt;a href=&#34;http://bit.ly/oA9jHu&#34; title=&#34;link externo&#34;&gt;listagem completa dessas features suportadas está aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ah, mais uma coisa: provavelmente você já utiliza um scriptzinho &lt;em&gt;html5.js&lt;/em&gt; para fazer com o que os Internet Explorers reconheçam as tags do HTML5, correto? O Modernizr já faz isso automaticamente. Sugiro que pare de utilizar o html5.js e passe a utilizar a Modernizr somente.&lt;/p&gt;

&lt;p&gt;A Modernizr facilita demais as coisas. A ideia é que você não prive seus projetos da utilização de features novas. A produção vai ficar mais eficaz e seu projeto sempre estará atualizado com as melhores práticas do mercado. Adote a Modernizr e seja feliz.&lt;/p&gt;

&lt;p&gt;Sugiro que você &lt;a href=&#34;http://www.modernizr.com/docs/&#34; title=&#34;link externo para a documentação da Modernizr&#34;&gt;dê uma lida na documentação&lt;/a&gt; da Modernizr. Tem bastante coisa interessante lá que você deveria saber.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS3 – Abas com a pseudo-classe :target</title>
      <link>https://tableless.github.io/hugo-public/css3-abas-com-a-pseudo-classe-target/</link>
      <pubDate>Mon, 21 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/css3-abas-com-a-pseudo-classe-target/</guid>
      <description>&lt;p&gt;O CSS está cada vez mais facilitando as coisas. Alguns problemas que eram resolvidos apenas via Javascript já podem ser resolvidos inteiramente com CSS. Obviamente que para alguns browsers temos que usar algum script para conseguir a compatibilidade. Mesmo assim, se for já possível utilizar as novas maravilhas do CSS 3 e outras compatibilidades que estão surgindo do CSS 2.1, faça-o já. Você com certeza vai se agradecer um tempo próximo! 😉&lt;/p&gt;

&lt;p&gt;Um caso muito comum na produção de sites é a construção de tabs. Todo desenvolvedor já deve ter feito pelo menos uma vez na vida um script de tabs. Com a pseudo-classe :target seus problemas acabaram.&lt;/p&gt;

&lt;p&gt;Quando queremos relacionar um link na própria página, utilizamos o recurso de &amp;#8220;âncora&amp;#8221;. Quando colocamos um link com o valor assim:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#nome-da-ancora&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Falamos para o browser que ao clicar no LINK, ele deve encontrar um ponto na página chamado, nesse exemplo, &lt;strong&gt;nome-da-ancora&lt;/strong&gt;. Ele vai encontrar o elemento na página que tenha um ID com esse nome e navegará a barra de rolagem até a posição deste elemento. Você já deve saber disso e já deve ter visto funcionando.&lt;/p&gt;

&lt;p&gt;Com a pseudo-classe :target isso ganha nova vida. O :target consegue relacionar isso a um objeto de forma que se você estiver criando abas (tabs), ele mostra automaticamente a aba relacionada. Vamos ao exemplo. Primeiro faça um HTML como o abaixo.&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;ul class=&#34;itens&#34;&gt;
  &lt;li&gt;
    &lt;a href=&#34;#aba1&#34;&gt;Aba 1&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&#34;#aba2&#34;&gt;Aba 2&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&#34;#aba3&#34;&gt;Aba 3&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;aba&#34;&gt;
  &lt;div id=&#34;aba1&#34;&gt;
    Primeira Aba
  &lt;/div&gt;
  

&lt;p&gt;&lt;div id=&#34;aba2&#34;&gt;
    Primeira Aba 2
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;aba3&#34;&gt;
    Primeira Aba 3
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Note um detalhe muito importante: o valor do HREF dos links é exatamente o nome do ID dos DIVs referente ao conteúdo das abas.&lt;/p&gt;

&lt;p&gt;Agora, para formatar e deixar bonitinho:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{margin:0; padding:0;}
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;body {&lt;/p&gt;

&lt;p&gt;font:13px verdana, arial, tahoma;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;ul { margin:20px 20px 0; list-style:none;}&lt;/p&gt;

&lt;p&gt;li {float:left;}&lt;/p&gt;

&lt;p&gt;.itens a {&lt;/p&gt;

&lt;p&gt;float:left;&lt;/p&gt;

&lt;p&gt;border:1px solid black;&lt;/p&gt;

&lt;p&gt;background:gray;&lt;/p&gt;

&lt;p&gt;padding:5px 15px;&lt;/p&gt;

&lt;p&gt;color:#FFF;&lt;/p&gt;

&lt;p&gt;text-decoration:none;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;.itens a:focus {background:red;}&lt;/p&gt;

&lt;p&gt;.aba { padding:0 20px;width:400px; clear:both;}&lt;/p&gt;

&lt;p&gt;.aba div {&lt;/p&gt;

&lt;p&gt;background:white;&lt;/p&gt;

&lt;p&gt;border:1px solid black;&lt;/p&gt;

&lt;p&gt;padding:10px;&lt;/p&gt;

&lt;p&gt;width:100%;&lt;/p&gt;

&lt;p&gt;display:none;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;.aba div:first-child {&lt;/p&gt;

&lt;p&gt;display:block;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Note que a última linha está dizendo para que os DIVs referentes às tabs fiquem escondidas e que só a primeira apareça.&lt;/p&gt;

&lt;p&gt;A coisa toda acontece aqui, com uma linha de código:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;p&gt;.aba div:target {&lt;/p&gt;

&lt;p&gt;display:block;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Essa linha entende o valor do HREF do link, capturando o ID referente ao div que o browser deve mostrar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.github.com/tableless/aba-target.html&#34; title=&#34;Exemplo de pseudo-classe target&#34;&gt;Veja o exemplo completo aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drops 3 – Duas formas de modular seu CSS</title>
      <link>https://tableless.github.io/hugo-public/drops3-modular-css/</link>
      <pubDate>Mon, 28 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/drops3-modular-css/</guid>
      <description>&lt;p&gt;Existem várias formas de modular seu CSS, vou citar duas delas. A primeira delas é modulando seu código por página. A segunda é modulando por áreas do site.&lt;/p&gt;

&lt;!--audio controls&gt; 
&lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2011/02/drops3-modulando-css1.oga&#34; type=&#34;audio/ogg&#34; /&gt;
&lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2011/02/drops3-modulando-css1.mp3&#34; type=&#34;audio/mpeg&#34; /&gt;
 Se preferir faça o download do arquivo em &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/02/drops3-modulando-css1.mp3&#34; title=&#34;Audio MP3 - Duas formas de modular se CSS&#34;&gt;Mp3&lt;/a&gt; ou &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/02/drops3-modulando-css1.oga&#34; title=&#34;Audio OGG - Duas formas de modular se CSS&#34;&gt;OGA&lt;/a&gt;.
&lt;/audio--&gt;

&lt;p&gt;Veja todos os &lt;a href=&#34;http://soundcloud.com/tableless&#34;&gt;nossos drops no Soundcloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se preferir faça o download do arquivo em &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/02/drops3-modulando-css1.mp3&#34; title=&#34;Audio MP3 - Duas formas de modular se CSS&#34;&gt;Mp3&lt;/a&gt; ou &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/02/drops3-modulando-css1.oga&#34; title=&#34;Audio OGG - Duas formas de modular se CSS&#34;&gt;OGA&lt;/a&gt;. Ou &lt;a href=&#34;http://itunes.apple.com/us/podcast/tableless-desenvolvimento/id73330789&#34; title=&#34;Drops do Tableless no iTunes.&#34;&gt;inscreva no iTunes&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Boas práticas na estruturação de interfaces.</title>
      <link>https://tableless.github.io/hugo-public/boas-praticas-na-estruturacao-de-interfaces/</link>
      <pubDate>Mon, 24 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/boas-praticas-na-estruturacao-de-interfaces/</guid>
      <description>

&lt;p&gt;Ao iniciar um novo projeto, precisamos estabelecer um planejamento de tempo de trabalho X modelo de trabalho. Em geral, não há uma regra estabelecida, pois muitos desenvolvedores Front-End acabam por utilizar suas próprias lógicas de estruturação de códigos levando em consideração qualidade em menor tempo.&lt;/p&gt;

&lt;p&gt;Conforme vamos adquirido experiência na área, acabamos assimilando e adotando os métodos utilizados na empresa ou agência em que trabalhamos somados à troca de experiência com os outros profissionais. Ainda assim, existem boas práticas, percebidas por profissionais que já estão no mercado há algum tempo, que podem colaborar para que qualidade e velocidade sejam pontos primordiais no desenvolvimento de um website.&lt;/p&gt;

&lt;h3 id=&#34;identificando-os-3-principais-elementos-de-uma-interface&#34;&gt;Identificando os 3 principais elementos de uma interface&lt;/h3&gt;

&lt;p&gt;O primeiro passo é identificar os 3 principais elementos do projeto &amp;#8211; topo, conteúdo e rodapé. Esses elementos são comuns à maioria das estruturas que temos na web, trazem as principais informações do website e tendem a repetir-se em todas as páginas internas com as mesmas características visuais estabelecidas na “home”.&lt;/p&gt;

&lt;p&gt;Ao identificá-los &amp;#8211; ainda no arquivos de layout &amp;#8211; é importante já observar propriedades básicas desses elementos como: altura, largura e tipo de propriedade que será utilizada para o background desta interface, levando em consideração principalmente a versatilidade deste projeto à diferentes resolução de tela.&lt;/p&gt;

&lt;p&gt;Identificadas essas informações, inicie a estruturação da interface pelo código html criando estes 3 elementos:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      HTML 4
    &lt;/td&gt;
    
    &lt;td&gt;
      HTML5
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;body&gt;&lt;br /&gt; &lt;div id=&amp;#8221;header&amp;#8221;&gt;conteúdo topo&lt;/div&gt;&lt;br /&gt; &lt;div id=&amp;#8221;content&amp;#8221;&gt;conteúdo corpo&lt;/div&gt;&lt;br /&gt; &lt;div id=&amp;#8221;footer&amp;#8221;&gt;conteúdo rodapé&lt;/div&gt;&lt;br /&gt; &lt;/body&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;body&gt;&lt;br /&gt; &lt;header&gt;conteúdo topo&lt;/header&gt;&lt;br /&gt; &lt;div id=&amp;#8221;content&amp;#8221;&gt;conteúdo corpo&lt;/div&gt;&lt;br /&gt; &lt;footer&gt;conteúdo rodapé&lt;footer&gt;&lt;br /&gt; &lt;/body&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;folhas-de-estilo-externas&#34;&gt;Folhas de estilo externas&lt;/h3&gt;

&lt;p&gt;O uso de folhas de estilos externas para declaração de propriedades css é uma das práticas que incansavelmente vem sendo ressaltada e com objetivo: propriedades declaradas de forma “inline” dificultam a manutenção de website, deixam o código carregado de informações não relevantes para mecanismos de busca e para leitores de tela além de, devido este tipo de declaração ter maior relevância na renderização realizada pelos browsers, o que é declarado “inline” vai sobrescrever o que foi declarado nas folhas externas, fazendo com que você se obrigue a utilizar hacks, ou seja, um “conserto” atrás de outro.&lt;/p&gt;

&lt;p&gt;Reforçado o recado continuamos, para estruturação inicial de uma interface, podemos criar uma folha de estilos com as propriedades básicas (diagramação de sustentação dos 3 principais elementos), reset nas pré-formatações de alguns elementos (&lt;a href=&#34;http://tableless.com.br/evite-incompatibilidade-browsers&#34; target=&#34;_blank&#34;&gt;já comentado em outro artigo&lt;/a&gt;) e declaração dos estilos dos elementos de repetição do projeto (elementos de topo, menus, breadcrumbs, etc). Esta folha de estilo, por exemplo, chamaremos de: estrutura.css.&lt;/p&gt;

&lt;p&gt;Para as demais páginas, além da “home”, caso seu projeto seja um projeto de médio a grande porte (websites institucionais, e-commerces e portais) uma dica é o uso de, além da folha de estruturação, uma folha para cada página com suas respectivas propriedades. Por exemplo: home.css, noticias.css, empresa.css, etc.&lt;/p&gt;

&lt;h3 id=&#34;visualize-a-interface-em-blocos&#34;&gt;Visualize a interface em blocos&lt;/h3&gt;

&lt;p&gt;Após estabelecer os principais elementos e determinar as folhas de estilos externas que serão criadas, as primeiras declarações css serão feitas a fim de criar uma estrutura de sustentação do website e com a estrutura principal pronta, podemos iniciar a inserção das demais informações que estão atreladas à estes elementos, por exemplo, no elemento topo podemos ter um menu, mas só iniciaremos sua codificação após diagramar o topo do website e verificá-lo em todos os browsers possíveis. Esta prática facilita a visualização da interface em blocos e a hierarquia que pode ser criada entre eles; hierarquia esta que pode ser traduzida nas folhas de estilo que permitem propriedades herdadas entre classes e ID’s, traduzindo esta prática em velocidade na determinação das características visuais do projeto.&lt;/p&gt;

&lt;h3 id=&#34;outras-pessoas-podem-fazer-a-manutenção-de-seu-código&#34;&gt;Outras pessoas podem fazer a manutenção de seu código?&lt;/h3&gt;

&lt;p&gt;Iniciada a codificação da interface, esta última prática servirá principalmente para os casos de trabalho em equipe. Se sua resposta foi “sim” para a pergunta acima, reforçamos o uso de comentários tanto nas estruturas html quanto nas estruturas css, separação de imagens por pastas, folhas de estilos diferenciadas e etc. Se sua resposta foi “não”, ainda assim reforçamos o uso das possibilidades citadas acima, em prol das boas práticas entre profissionais Front-End.&lt;/p&gt;

&lt;p&gt;Portanto, comente seus código, se organize para estruturar informações e crie métodos, pois você com certeza perceberá, mais velocidade, facilidade de manutenção e mostrará a diferença entre profissionais Front-End e o “amigo do sobrinho que faz sites”.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JQuery para produção de Layouts</title>
      <link>https://tableless.github.io/hugo-public/jquery-para-layouts/</link>
      <pubDate>Wed, 15 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/jquery-para-layouts/</guid>
      <description>

&lt;p&gt;O &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; tem me dado um importante suporte para aqueles problemas que o CSS não consegue resolver por falta de compatibilidade em alguns browsers e também para evitar sujar o código HTML com elementos dispensáveis, em ocasiões comuns como no caso da criação de bordas arredondadas.&lt;/p&gt;

&lt;p&gt;Nestes cenários, invarialmente temos que criar alguns elementos agregados que servirão para dar exclusivamente suporte visual para o layout.&lt;/p&gt;

&lt;p&gt;Não é bom que sujemos nosso HTML com código que não carregue significado semântico nenhum, mas em alguns casos, como ao fazer bordas arredondadas, a criação destes elementos é necessária. É nesse ponto que o &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; pode nos ajudar grandemente.&lt;/p&gt;

&lt;p&gt;Se você é desenvolvedor client-side, tenha em mente que você não precisa saber programar para aprender &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt;. Sua sintaxe é muito simples e pode salvar sua vida quando ocorre problemas de compatibilidade entre browsers. É o que veremos a seguir: como o &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; pode nos auxiliar em momentos da falta de suporte do CSS.&lt;/p&gt;

&lt;h3 id=&#34;criando-elementos-dinamicamente&#34;&gt;Criando elementos dinamicamente&lt;/h3&gt;

&lt;p&gt;Suponha que você tenha um botão simples, onde as bordas são arredondadas. Para facilitar nosso exemplo esse botão não terá altura variável, apenas largura. Eu poderia fazer duas imagens: uma imagem seria a borda da esquerda e a outra imagem a borda da da direita. Se fôssemos fazer com HTML e CSS puro, o código seria esse:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#&#34;&gt;texto do botão&lt;/a&gt;{.btn}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;O CSS:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;.btn {&lt;/p&gt;

&lt;p&gt;border-radius:10px;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Talvez eu teria que colocar um prefixo para o Frefox (-moz-) entender a borda arredondada, mas vamos simplificar nosso exemplo.&lt;/p&gt;

&lt;p&gt;Os IE7-8 não reconheceriam essa propriedade. Mas se seu cliente precisa de que o suporte seja estendido para esses browsers, não há outra escolha a não ser fazer as benditas bordas (ou qualquer outro problema) funcionar no IE.&lt;/p&gt;

&lt;p&gt;Uma maneira simples de ser feita é colocando um backgrounds diretamente no LINK, pode ser a borda da esquerda e em outro elemento definiríamos a borda da direita. Criar um elemento para que sua única função seja manter o padrão visual vai de encontro contra toda a ideia de semântica. Fazendo isso também misturamos aquela teoria de separação de formatação com informação. Mesmo assim essa a única solução. É aí que o &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; vem nos ajudar. O código HTML, caso fossemos criar um elemento extra, seria:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;html&amp;#8221;]&lt;a href=&#34;#&#34;&gt;texto do botão &lt;span class=&#34;borderdir&#34;&gt;&lt;/span&gt;&lt;/a&gt;{.btn}[/cc]&lt;/p&gt;

&lt;p&gt;Para mantermos a integridade do nosso HTML, criaremos esse elemento via &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; da seguinte forma utilizando a função &lt;a href=&#34;http://api.[JQuery][1].com/append/&amp;#8221;&gt;append&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript&amp;#8221;]$(document).ready(function(){&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.btn&amp;#8217;).append(&amp;#8216;&lt;span class=&#34;borderdir&#34; /&gt;&amp;#8216;);&lt;/p&gt;

&lt;p&gt;});[/cc]&lt;/p&gt;

&lt;p&gt;Já que estes elementos são cridos dinamicamente, os leitores de tela e os indexadores de busca não os leem, logo, o código HTML não fica poluído e você não perde com SEO. A manutenção fica simples de ser mantida e o HTML, se já estiver sob programação server-side não precisará ser modificado manualmente.&lt;/p&gt;

&lt;h3 id=&#34;escolhendo-elementos-específicos&#34;&gt;Escolhendo elementos específicos&lt;/h3&gt;

&lt;p&gt;Outro problema muito comum é a necessidade de ter que escolher elementos específicos no Layout sem ter que adicionar manualmente classes ou tendo que fazer uma condição maluca para ter que capturar tais elementos. Isso seria muito simples se utilizássemos o pseudo-elemento &lt;strong&gt;nth-child&lt;/strong&gt; do CSS. O &lt;strong&gt;nth-child&lt;/strong&gt; seleciona determinados elementos em uma árvore de elementos. Por exemplo, você tem uma lista e quer pegar o terceiro ítem da lista, você utilizaria algo assim:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]ul li:nth-child(3n) {&lt;/p&gt;

&lt;p&gt;color:red;&lt;/p&gt;

&lt;p&gt;}[/cc]&lt;/p&gt;

&lt;p&gt;O problema? Nada disso funciona nos IEs. Mas isso é extremamente útil e com &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt; você pode adicionar uma classe nestes elementos para formatar com CSS.&lt;/p&gt;

&lt;p&gt;A Home deste site foi feita desta forma. O conteúdo foi criado com um simples LOOP do WordPress que joga o HTML do conteúdo em uma única página. Veja que cada um blocos de texto desta home é diferente. Sem poder utilizar o &lt;strong&gt;nth-child&lt;/strong&gt; eu utilizei a função &lt;a href=&#34;http://api.[JQuery][1].com/slice/&amp;#8221;&gt;slice&lt;/a&gt; do &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;$(document).ready(function(){&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.homeposts article&amp;#8217;).slice(1, 3).addClass(&amp;#8216;destaqueprincipal&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.homeposts article&amp;#8217;).slice(3, 6).addClass(&amp;#8216;destaquethird&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.homeposts article&amp;#8217;).slice(6, 10).addClass(&amp;#8216;destaques&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.homeposts article&amp;#8217;).slice(10, 12).addClass(&amp;#8216;chamadas&amp;#8217;);&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Por exemplo, note essa linha:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;$(document).ready(function(){&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;.homeposts article&amp;#8217;).slice(1, 3).addClass(&amp;#8216;destaqueprincipal&amp;#8217;);&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Aqui eu digo que o primeiro, segundo e terceiro e &lt;strong&gt;elemento article&lt;/strong&gt; de &lt;strong&gt;.homeposts&lt;/strong&gt; terão uma classe adicional chamada &lt;em&gt;destaqueprincipal&lt;/em&gt;. E a mesma lógica foi aplicada para os elementos posteriores.&lt;/p&gt;

&lt;h3 id=&#34;utilizando-seletores-complexos&#34;&gt;Utilizando seletores complexos&lt;/h3&gt;

&lt;p&gt;Outro problema é a inserção de classes em elementos do mesmo gênero mas com funções diferentes, como os campos de formulários. Normalmente, quando produzimos um formulário de contato, por exemplo, precisamos diferenciar os inputs de texto, inputs de checkbox, inputs de radio, inputs de submit etc. Pode ser que estes inputs sejam criados dinamicamente pelo framework utilizado para auxiliar na programação back-end. Nesse caso não temos controle manual nenhum.&lt;/p&gt;

&lt;p&gt;No melhor dos mundos utilizaríamos &lt;a href=&#34;http://tableless.com.br/seletores-complexos-do-css&#34; title=&#34;Introdução aos Seletores complexos&#34;&gt;seletores complexos&lt;/a&gt; para aplicar um estilo específico para um dos elementos. A sintaxe em CSS ficaria mais ou menos assim:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;input[type=&amp;#8221;text&amp;#8221;] {&lt;/p&gt;

&lt;p&gt;border:1px solid gray;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;O código acima define uma borda preta para os elementos &lt;strong&gt;input&lt;/strong&gt; que tenham o atributo &lt;strong&gt;type&lt;/strong&gt; cujo valor seja &lt;strong&gt;text&lt;/strong&gt;. Você faria isso para cada um dos tipos dos inputs que você gostaria de formatar:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;css&amp;#8221;]&lt;/p&gt;

&lt;p&gt;input[type=&amp;#8221;text&amp;#8221;] {border:1px solid gray;}&lt;/p&gt;

&lt;p&gt;input[type=&amp;#8221;checkbox&amp;#8221;] {border:1px solid green;}&lt;/p&gt;

&lt;p&gt;input[type=&amp;#8221;submit&amp;#8221;] {border:1px solid red;}&lt;/p&gt;

&lt;p&gt;input[type=&amp;#8221;radio&amp;#8221;] {border:1px solid yellow;}&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Esse código pode não funcionar em &lt;span title=&#34;leia-se Internet Explorer&#34;&gt;alguns browsers&lt;/span&gt;, por isso faremos com a ajuda de &lt;a href=&#34;http://tableless.com.br/categoria/client-side/jquery/&#34; title=&#34;artigos sobre JQuery&#34;&gt;JQuery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O código é muito simples e na realidade não foge muito da sintaxe do CSS. Adicionaremos uma classe para cada um destes elementos possibilitando a estilização via CSS por meio dessa classe. O código ficaria assim:&lt;/p&gt;

&lt;p&gt;[cc lang=&amp;#8221;javascript&amp;#8221;]&lt;/p&gt;

&lt;p&gt;$(document).ready(function(){&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;input[type=&amp;#8221;text&amp;#8221;]&amp;#8217;).addClass(&amp;#8216;inputText&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;input[type=&amp;#8221;checkbox&amp;#8221;]&amp;#8217;).addClass(&amp;#8216;inputCheckbox&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;input[type=&amp;#8221;submit&amp;#8221;]&amp;#8217;).addClass(&amp;#8216;inputSubmit&amp;#8217;);&lt;/p&gt;

&lt;p&gt;$(&amp;#8216;input[type=&amp;#8221;radio&amp;#8221;]&amp;#8217;).addClass(&amp;#8216;inputRadio&amp;#8217;);&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;Com as classes atribuídas, podemos temos controle total via CSS.&lt;/p&gt;

&lt;h3 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h3&gt;

&lt;p&gt;Estas pequenas dicas contribuem para soluções sustentáveis para seu código. Com um pouco de planejamento você conseguirá manter o controle total do seu código e um alto índice de compatibilidade com os browsers atuais no mercado. A diminuição de hacks no CSS também diminui bastante já que com uma mesma solução, você abrange até os browsers mais antigos.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>