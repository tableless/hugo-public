<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Controle Versao on Tableless</title>
    <link>http://tableless.com.br/tags/controle-versao/index.xml</link>
    <description>Recent content in Controle Versao on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/controle-versao/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Iniciando no GIT ‚Äì Parte 1</title>
      <link>http://tableless.com.br/iniciando-no-git-parte-1/</link>
      <pubDate>Mon, 19 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/iniciando-no-git-parte-1/</guid>
      <description>

&lt;p&gt;N√£o esque√ßa de ler a &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-2/&#34;&gt;segunda parte desse artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se voc√™ n√£o trabalha com nenhum controle de vers√£o ainda ou nem sabe o que isso significa, d√° uma lida &lt;a href=&#34;http://tableless.com.br/introducao-das-premissas-dos-controles-de-versao/&#34; title=&#34;Introdu√ß√£o das premissas dos controles de vers√£o&#34;&gt;nesse texto antes de come√ßarmos aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Controles de vers√£o s√£o sistemas que controlam o c√≥digo gerado em projetos. Se voc√™ e mais algu√©m precisam editar o mesmo arquivo em um mesmo projeto, como voc√™ faz? Espera o primeiro editar, salvar e depois subir no FTP s√≥ para a√≠ ent√£o voc√™ abrir o arquivo e fazer suas altera√ß√µes?&lt;/p&gt;

&lt;p&gt;Esse cen√°rio se repete em muitas empresas, de todos os tamanhos. Os controle de vers√£o ajudam a resolver esse e outros problemas de gerenciamento de c√≥digo e organiza√ß√£o. Um dos controles de vers√£o mais conhecidos √© o GIT.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Git √© um sistema de controle de vers√£o distribu√≠do com √™nfase em velocidade. O Git foi inicialmente projetado e desenvolvido por Linus Torvalds para o desenvolvimento do kernel Linux. &amp;#8211; &lt;a href=&#34;http://pt.wikipedia.org/wiki/Git&#34;&gt;Wikipedia, GIT&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;como-funciona-o-git&#34;&gt;Como funciona o GIT?&lt;/h2&gt;

&lt;p&gt;Normalmente a maioria dos controles de vers√£o guardam as mudan√ßas do c√≥digo como altera√ß√µes de um determinado arquivo. Ou seja, a cada mudan√ßa no arquivo, o sistema guarda essa mudan√ßa apenas e n√£o o arquivo inteiro.&lt;/p&gt;

&lt;p&gt;O Git pensa um pouco diferente: ele trata os dados como snapshots. Cada vez que commitamos (commitar √© enviar altera√ß√µes para o controle de vers√£o) ou salva o estado do projeto no Git, ele basicamente guarda um snapshot de como todos os arquivos est√£o naquele momento e guarda a refer√™ncia desse estado. Para os arquivos que n√£o foram modificados, ele n√£o guarda uma nova vers√£o, ele apenas faz um link para a vers√£o anterior id√™ntica que j√° foi guardada em outro momento.&lt;/p&gt;

&lt;p&gt;Esta imagem vem direto do GitHub. Fica mais f√°cil entender como ele atrela um commit no outro usando snapshots.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/gh-mac-app.png&#34; alt=&#34;Github&#34; width=&#34;1960&#34; height=&#34;1062&#34; class=&#34;alignnone size-full wp-image-40447&#34; srcset=&#34;uploads/2012/11/gh-mac-app.png 1960w, uploads/2012/11/gh-mac-app-310x168.png 310w, uploads/2012/11/gh-mac-app-572x310.png 572w&#34; sizes=&#34;(max-width: 1960px) 100vw, 1960px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;√°reas-de-opera√ß√£o&#34;&gt;√Åreas de opera√ß√£o&lt;/h2&gt;

&lt;p&gt;Os locais de opera√ß√£o s√£o as √°reas onde os arquivos ir√£o transitar enquanto est√£o sendo editados e modificados. S√£o 3: Working Directory, Stage Area, Git directory.&lt;/p&gt;

&lt;p&gt;O Git Directory √© onde o Git guarda os dados e objetos do seu projeto. Ele √© o diret√≥rio mais importante do Git e √© ele que ser√° copiado quando algu√©m clonar (clonar √© copiar o projeto para a sua m√°quina) o projeto.&lt;/p&gt;

&lt;p&gt;O Work Directory √© onde voc√™ vai trabalhar. Os arquivos ficam a√≠ para poderem ser usados e alterados quantas vezes quiser para voc√™. √â basicamente sua pasta de arquivos dos projeto.&lt;/p&gt;

&lt;p&gt;Quando voc√™ faz uma altera√ß√£o em algum arquivo, ele vai para o Staging Area, que √© uma √°rea intermedi√°ria. Basicamente o Staging Area cont√©m o Git Directory com os arquivos modificados, onde ele guarda as informa√ß√µes sobre o que vai no seu pr√≥ximo commit. Veja a imagem abaixo direto do &lt;a href=&#34;http://git-scm.com/&#34;&gt;site do Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-7264&#34; title=&#34;18333fig0106-tn&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/18333fig0106-tn.png&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;460&#34; srcset=&#34;uploads/2012/11/18333fig0106-tn.png 500w, uploads/2012/11/18333fig0106-tn-300x276.png 300w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;instalando-o-git&#34;&gt;Instalando o Git&lt;/h2&gt;

&lt;p&gt;Se voc√™ tem Windows &lt;a href=&#34;http://code.google.com/p/msysgit&#34;&gt;baixe o EXE direto deste link&lt;/a&gt; e instale.&lt;/p&gt;

&lt;p&gt;Ele vai instalar para voc√™ os comandos do Git para serem usados no terminal e uma uma interface padr√£o para quem n√£o est√° acostumado a usar linhas de comando.&lt;/p&gt;

&lt;p&gt;No Mac voc√™ tem v√°rios caminhos, &lt;a href=&#34;http://code.google.com/p/git-osx-installer&#34;&gt;baixando o installer&lt;/a&gt;, usando Macports:&lt;/p&gt;

&lt;pre&gt;$ sudo port install git-core +svn +doc +bash_completion +gitweb&lt;/pre&gt;

&lt;p&gt;E at√© mesmo usando Brew.&lt;/p&gt;

&lt;pre&gt;brew install git&lt;/pre&gt;

&lt;p&gt;Com Linux eu preciso falar? üòâ&lt;/p&gt;

&lt;p&gt;Yum.&lt;/p&gt;

&lt;pre&gt;$ yum install git-core&lt;/pre&gt;

&lt;p&gt;Ou apt-get.&lt;/p&gt;

&lt;pre&gt;$ apt-get install git-core&lt;/pre&gt;

&lt;h2 id=&#34;configurando-suas-informa√ß√µes&#34;&gt;Configurando suas informa√ß√µes&lt;/h2&gt;

&lt;p&gt;A primeira coisa que voc√™ deve fazer depois de instalar o Git √© definir seu usarname e email. Isso √© importante por que os seus commits usar√£o essas informa√ß√µes para identificar o autor das mudan√ßas. Pois √©&amp;#8230; Se algu√©m fizer alguma merda no projeto e quebrar todo o sistema, √© poss√≠vel saber quem, quando e qual linha foi o autor do apocalipse.&lt;/p&gt;

&lt;p&gt;√â simples, no terminal escreva:&lt;/p&gt;

&lt;pre&gt;$ git config --global user.name &#34;John Doe&#34;
$ git config --global user.email johndoe@example.com
&lt;/pre&gt;

&lt;h2 id=&#34;controlando-um-projeto&#34;&gt;Controlando um projeto&lt;/h2&gt;

&lt;p&gt;Pelo terminal mesmo, entre na pasta do projeto que voc√™ quer iniciar o controle e use o comando:&lt;/p&gt;

&lt;pre&gt;git init&lt;/pre&gt;

&lt;p&gt;Esse comando vai criar um diret√≥rio invis√≠vel dentro do projeto chamado &lt;strong&gt;.git&lt;/strong&gt;. Ele cont√©m todos os arquivos necess√°rios do seu reposit√≥rio. Aqui, neste ponto, nada dos seus arquivos ainda est√£o sendo controlados. Voc√™ apenas criou um &amp;#8220;lugar&amp;#8221; (branch) para o Git colocar os arquivos.&lt;/p&gt;

&lt;p&gt;O pr√≥ximo comando vai inserir os arquivos que voc√™ quer controlar. Normalmente a gente controla TUDO o que est√° no projeto. Mas isso tem que ser combinado com a equipe antes. Em um projeto que envolve um CMS com o WordPress, por exemplo, √© normal controlar tudo, at√© os arquivos do WordPress. Mas se em um projeto voc√™ guarda pastas de layouts, pastas de wireframes, prot√≥tipos e etc, √© interessante n√£o colocar isso no Git. Mas a√≠ vai de equipe para equipe, de projeto pra projeto.&lt;/p&gt;

&lt;p&gt;O comando para adicionar os arquivos √©:&lt;/p&gt;

&lt;pre&gt;git add .&lt;/pre&gt;

&lt;p&gt;Para voc√™ ver o status, use o comando &lt;strong&gt;git status&lt;/strong&gt;, a√≠ voc√™ ver√° tudo o que foi inclu√≠do no projeto. Veja o screenshot abaixo para ter uma ideia:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/Screen-Shot-2012-11-19-at-11.21.33-AM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Feito isso voc√™ vai precisar inserir seu primeiro commit. Vamos dar mais detalhes sobre o comando commit no pr√≥ximo artigo, por agora fique com essa linha:&lt;/p&gt;

&lt;pre&gt;git commit -m &#34;Primeiro commit - Inserindo os arquivos iniciais do projeto&#34;&lt;/pre&gt;

&lt;p&gt;Agora voc√™ mandou uma altera√ß√£o para o Git.&lt;/p&gt;

&lt;h3 id=&#34;clonando-um-projeto&#34;&gt;Clonando um projeto&lt;/h3&gt;

&lt;p&gt;Pode ser que j√° exista um projeto no Git criado e voc√™ s√≥ precise clonar para seu computador. Para isso voc√™ vai usar o comando &lt;strong&gt;git clone&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quando voc√™ clona um projeto, o Git recebe a c√≥pia de todos os dados que tem no servidor. Cada vers√£o de cada arquivo da hist√≥ria inteira do projeto √© puxada quando voc√™ roda o comando &lt;strong&gt;git clone&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para clonar um projeto voc√™ precisa ter a URL do Git daquele projeto em espec√≠fico. O comando completo fica mais ou menos assim:&lt;/p&gt;

&lt;pre&gt;git clone https://github.com/tableless/exemplos.git&lt;/pre&gt;

&lt;p&gt;Pode testar com o endere√ßo acima. Ele √© nosso diret√≥rio do Git de exemplos no GitHub.&lt;/p&gt;

&lt;p&gt;No pr√≥ximo artigo a gente mostra os comandos &lt;strong&gt;commit&lt;/strong&gt;, &lt;strong&gt;push&lt;/strong&gt; e &lt;strong&gt;pull&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Veja um v√≠deo que mostra os comandos b√°sicos do GIT:&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>