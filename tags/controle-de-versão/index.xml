<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Controle De Versão on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/controle-de-vers%C3%A3o/index.xml</link>
    <description>Recent content in Controle De Versão on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/controle-de-vers%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Iniciando no GIT – Parte 2</title>
      <link>https://tableless.github.io/hugo-public/iniciando-no-git-parte-2/</link>
      <pubDate>Thu, 22 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/iniciando-no-git-parte-2/</guid>
      <description>

&lt;p&gt;Já leu a &lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;primeira parte desse artigo&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/iniciando-no-git-parte-1/&#34;&gt;No primeiro artigo&lt;/a&gt; aprendemos sobre como funciona o Git, como iniciar um projeto e como inserimos os arquivos que serão controlados pelo sistema.&lt;/p&gt;

&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;

&lt;p&gt;Antes de tudo você precisa entender em qual status os arquivos se encontram. Você pode modificar um arquivo, mas não commita-lo. Veja abaixo uma imagem direto do site do Git que mostra os diversos status dos arquivos.&lt;/p&gt;

&lt;p&gt;Você já clonou ou iniciou seu projeto no Git e agora vai fazer modificações nos arquivos e enviar essas modificações para o repositório. Lembre-se que os arquivos em seu Work Directory podem estar &lt;strong&gt;traked&lt;/strong&gt; ou &lt;strong&gt;untracked&lt;/strong&gt;. Vou manter os termos em inglês para você se familiarizar melhor. Arquivos com status &lt;strong&gt;tracked&lt;/strong&gt; são arquivos que já estão inseridos no repositório. Eles podem ser &lt;strong&gt;unmodified&lt;/strong&gt; (que não foram modificados por você), &lt;strong&gt;modified&lt;/strong&gt; (que foram modificados por você) ou &lt;strong&gt;staged&lt;/strong&gt; (que são os arquivos que acabaram de ser mudados).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/18333fig0201-tn.png&#34; alt=&#34;&#34; title=&#34;18333fig0201-tn&#34; width=&#34;500&#34; height=&#34;317&#34; class=&#34;alignnone size-full wp-image-7272&#34; srcset=&#34;uploads/2012/11/18333fig0201-tn.png 500w, uploads/2012/11/18333fig0201-tn-300x190.png 300w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esse ciclo é repetido diversas e diversas vezes. Veja abaixo um exemplo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2012/11/git2.jpg&#34;&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/git2-1024x549.jpg&#34; alt=&#34;&#34; title=&#34;git2&#34; width=&#34;640&#34; height=&#34;343&#34; class=&#34;alignnone size-large wp-image-7273&#34; srcset=&#34;uploads/2012/11/git2-1024x549.jpg 1024w, uploads/2012/11/git2-300x161.jpg 300w, uploads/2012/11/git2.jpg 1131w&#34; sizes=&#34;(max-width: 640px) 100vw, 640px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;commit&#34;&gt;Commit&lt;/h2&gt;

&lt;p&gt;Suponha que você resolveu um bug no projeto. É hora de commitar suas modificações. Essas modificações serão inseridas no histórico do projeto e ficarão disponíveis para que os outros integrantes da equipe.&lt;/p&gt;

&lt;p&gt;Ao commitar você escreve uma descrição sobre o que foi feito ali. Assim essa modificação não fica perdida e todo mundo sabe do que se trata aquela mudança. Você documenta essa mudança. É mais ou menos isso que é o commit.&lt;/p&gt;

&lt;p&gt;Quando você commita uma modificação, os arquivos editados saem do status staged e voltam para o status unmodified. Claro, por que teoricamente aquela alteração já foi feita e agora os arquivos voltam com o status de sem modificações.&lt;/p&gt;

&lt;p&gt;O comando é este:&lt;/p&gt;

&lt;pre&gt;git commit -m &#34;Resolvendo bug da modal sobreposta na página de pagamentos.&#34;&lt;/pre&gt;

&lt;p&gt;Se você fizer um &lt;strong&gt;git log&lt;/strong&gt; no projeto, você consegue visualizar uma lista de todos os commits enviados para o projeto, seus commits e commits de outros integrantes. Veja abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2012/11/Screen-Shot-2012-11-19-at-12.17.50-PM.png&#34; alt=&#34;&#34; title=&#34;Screen Shot 2012-11-19 at 12.17.50 PM&#34; width=&#34;756&#34; height=&#34;609&#34; class=&#34;alignnone size-full wp-image-7274&#34; srcset=&#34;uploads/2012/11/Screen-Shot-2012-11-19-at-12.17.50-PM.png 756w, uploads/2012/11/Screen-Shot-2012-11-19-at-12.17.50-PM-300x241.png 300w&#34; sizes=&#34;(max-width: 756px) 100vw, 756px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;pull&#34;&gt;Pull&lt;/h2&gt;

&lt;p&gt;Não é só você que está fazendo modificações nos arquivos, mas também sua equipe. Por isso é importante que você deixe o projeto sempre atualizado. Para isso você precisa trazer as modificações que eles fizeram e commitaram para o seu repositório local. Você vai usar o comando &lt;strong&gt;pull&lt;/strong&gt; para trazer essas modificações:&lt;/p&gt;

&lt;pre&gt;git pull&lt;/pre&gt;

&lt;p&gt;Feito isso vai até o servidor buscar todas as modificações a partir da versão do seu repositório local, ele vai baixar essas modificações e fará um merge automático nos arquivos necessários que foram modificados. Coisa linda&amp;#8230; alguém deve ter modificado o mesmo arquivo que você, o Git vai entender isso e vai juntar seu código com o dele, automaticamente&amp;#8230; Claro que pode ser que de conflitos caso vocês tenham modificado a mesma linha, mas aí é outra história, vemos mais pra frente como resolver isso. Se quiser se adiantar, procure sobre o comando &lt;strong&gt;diff&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;push&#34;&gt;Push&lt;/h2&gt;

&lt;p&gt;Você modificou os arquivos, commitou descrevendo o que fez exatamente naquela modificação e agora precisa enviar tudo isso para o servidor. O comando &lt;strong&gt;git push&lt;/strong&gt; empurra as suas modificações para o servidor, incluido-as no histórico do projeto. Quando os outros integrantes da equipe fizerem um &lt;strong&gt;git pull&lt;/strong&gt;, essas modificações serão baixadas e incluídas no repositório local da pessoa.&lt;/p&gt;

&lt;pre&gt;git push&lt;/pre&gt;

&lt;p&gt;O Git Push só pode ser feito se você executou o &lt;strong&gt;git pull&lt;/strong&gt; antes. Isso é uma forma de você ter o seu repositório atualizado e também para evitar possíveis conflitos no projeto. Quando você faz o pull, se der algum conflito de código, você deverá resolve-los para depois enviar o novo código novamente.&lt;/p&gt;

&lt;p&gt;Há algumas outras opções tanto no Pull e no Push que podemos utilizar para especificar o branch para onde iremos empurrar ou buscar atualizações. Mas isso fica para outra hora.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://git-scm.com/docs&#34;&gt;documentação do Git&lt;/a&gt; é muito fácil de ler e entender. É bem objetiva e não perde tempo blá blá blá&amp;#8230; Recomendo que você leia e entenda melhor como utilizar o git nos seus projetos. Nada de FTP, SFTP e outras coisas&amp;#8230; Isso é coisa do passado.&lt;/p&gt;

&lt;p&gt;Veja um vídeo que mostra os comandos básicos do GIT:&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>