<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testes on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/testes/index.xml</link>
    <description>Recent content in Testes on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/testes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introdução ao Behavior Driven Development</title>
      <link>https://tableless.github.io/hugo-public/introducao-ao-behavior-driven-development/</link>
      <pubDate>Fri, 21 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/introducao-ao-behavior-driven-development/</guid>
      <description>

&lt;p&gt;O &lt;strong&gt;BDD&lt;/strong&gt; &lt;em&gt;(Behavior Driven Development ou Desenvolvimento guiado por comportamento)&lt;/em&gt;, é uma resposta ao &lt;strong&gt;TDD&lt;/strong&gt;, criado em 2003, por &lt;em&gt;Dan North&lt;/em&gt;, e tem se expandido bastante nos últimos anos. Seu foco é obter um código testado a partir de um conjunto de cenários que descrevem como a aplicação ou unidade de código deverá se comportar em determinada situação.&lt;/p&gt;

&lt;h3 id=&#34;as-práticas-de-bdd-incluem&#34;&gt;As práticas de &lt;strong&gt;BDD&lt;/strong&gt; incluem:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Envolver as partes interessadas no processo através de &lt;em&gt;Outside-in Development&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Usar linguagem ubíqua para descrever o comportamento de uma aplicação&lt;/li&gt;
&lt;li&gt;Automatizar os exemplos para provê um feedback rápido e testes de regressão&lt;/li&gt;
&lt;li&gt;Usar &lt;strong&gt;&lt;em&gt;SHOULD&lt;/em&gt;&lt;/strong&gt; na hora de descrever o comportamento de software para ajudar esclarecer responsabilidades e permitir que funcionalidades do software sejam questionadas&lt;/li&gt;
&lt;li&gt;Usar dublês de teste &lt;em&gt;(mocks, stubs, fakes, dummies, spies)&lt;/em&gt; para auxiliar na colaboração entre módulos e códigos que ainda não foram escritos&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;e-8230&#34;&gt;E&amp;#8230;&lt;/h2&gt;

&lt;p&gt;O grande lance do BDD, é que nos trabalhamos com comportamentos de uma maneira que&lt;/p&gt;

&lt;p&gt;qualquer pessoa possa entender ou escrever novos testes. Baseado no que espera que&lt;/p&gt;

&lt;p&gt;a aplicação executa o aferir uma ação específica.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Qual a vantagem disso?&lt;/em&gt; O especialista do domínio pode escrever testes.&lt;/p&gt;

&lt;p&gt;O gerente de projetos pode escrever testes. o PO pode escrever testes baseados&lt;/p&gt;

&lt;p&gt;no que ele espera da aplicação. O padeiro da esquina pode escrever testes&lt;/p&gt;

&lt;p&gt;também. Qualquer um pode descrever o que espera da aplicação sem a necessidade&lt;/p&gt;

&lt;p&gt;de ter habilidades de um programador.&lt;/p&gt;

&lt;h2 id=&#34;cenários&#34;&gt;Cenários&lt;/h2&gt;

&lt;p&gt;Cada cenário descreve uma ação que será aferida e testada. Eles devem conter&lt;/p&gt;

&lt;p&gt;passos lógicos e simple de como obter um resultado específico a partir de uma sequência&lt;/p&gt;

&lt;p&gt;de ações.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cenário 1:&lt;/strong&gt; &lt;em&gt;Quantidade de items no estoque&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dado que há 5 items no estoque&lt;/li&gt;
&lt;li&gt;E um cliente comprou 2 items do estoque&lt;/li&gt;
&lt;li&gt;Então quando contar os items restantes no estoque&lt;/li&gt;
&lt;li&gt;Terei 3 items&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como podemos perceber, desenvolvedores podem se concentrar exclusivamente nas razões pelas quais o código deve ser criado, e não em detalhes técnicos, além de minimizar traduções entre a linguagem técnica na qual o código é escrito e outras linguagens de domínio.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>