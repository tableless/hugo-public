<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html5 on Tableless</title>
    <link>https://tableless.github.io/hugo-public/tags/html5/index.xml</link>
    <description>Recent content in Html5 on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="https://tableless.github.io/hugo-public/tags/html5/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Contraste de cores – Acessibilidade na web</title>
      <link>https://tableless.github.io/hugo-public/contraste-de-cores-acessibilidade-na-web/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/contraste-de-cores-acessibilidade-na-web/</guid>
      <description>

&lt;p&gt;Nesse post vou explicar uma das opções de como fazer um contraste de cores, existe diretrizes de acessibilidade da &lt;a href=&#34;https://www.w3.org/Translations/WCAG20-pt-PT/&#34; target=&#34;_blank&#34;&gt;WCAG 2.0&lt;/a&gt; que explica o nível aceitável de contraste de cores esperadas em um site, veja nesse &lt;a href=&#34;https://www.w3.org/TR/WCAG20/#visual-audio-contrast&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;proposta&#34;&gt;Proposta&lt;/h2&gt;

&lt;p&gt;Criar um contraste de cores em três níveis (Branco, Preto e Azul) usando HTML5, CSS3, Javascript (Puro), Node e o Cookie do navegado para guarda o contraste escolhido.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56600&#34; src=&#34;uploads/2016/12/html5-css-javascript-logos.png&#34; alt=&#34;html5-css-javascript-logos&#34; width=&#34;1267&#34; height=&#34;287&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;como-será-feito&#34;&gt;Como será feito&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Em uma página teremos quatro links em que o usuário vai escolher (Preto, branco, azul ou sem contraste).&lt;/li&gt;
&lt;li&gt;No evento de click vamos passar para o javascript um valor do atributo &amp;#8216;data-contraste&amp;#8217;.&lt;/li&gt;
&lt;li&gt;Vai ser adicionar na tag &amp;#8216;body&amp;#8217; um &amp;#8216;id&amp;#8217; para o CSS fazer toda a mágica de trocar as cores da página.&lt;/li&gt;
&lt;li&gt;Vai ser guardado no cookie a opção selecionada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veja como vai ficar;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56620&#34; src=&#34;uploads/2016/12/contraste-de-cores.gif&#34; alt=&#34;contraste-de-cores&#34; width=&#34;484&#34; height=&#34;264&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Então&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56615&#34; src=&#34;uploads/2016/12/ThomasCook_tagline.jpg&#34; alt=&#34;ThomasCook_tagline_hori_cmyk&#34; width=&#34;479&#34; height=&#34;137&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;O HTML para esse tipo de projeto é de extrema necessidade ser no mínimo validado pelo &lt;a href=&#34;https://validator.w3.org/&#34;&gt;W3C&lt;/a&gt; e ter nível &amp;#8220;AAA&amp;#8221; em alguma ferramenta de análise de acessibilidade, no caso eu usei o &lt;a href=&#34;http://www.acessibilidade.gov.pt/accessmonitor/&#34;&gt;Accessmonitor&lt;/a&gt;, já usando a WCAG 2.0.&lt;/p&gt;

&lt;p&gt;A atenção na contrução do HTML vai determinar se o usuário acessível vai ter uma boa experiência no seu site ou não.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-BR&#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Artigo contraste de cores&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/style.css&#34;&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&#34;row row-header&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;nav&amp;gt;
 &amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#content&#34; title=&#34;Ir para o Conteúdo&#34;&amp;gt;Ir para o Conteúdo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; title=&#34;Ir para o Topo&#34;&amp;gt;Ir para o Topo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#footer&#34; title=&#34;Ir para o Rodapé&#34;&amp;gt;Ir para o Rodapé&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;0&#34; title=&#34;Sem Contraste&#34;&amp;gt;Sem Contraste&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;1&#34; title=&#34;Contraste Branco&#34;&amp;gt;Contraste Branco&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;2&#34; title=&#34;Contraste Preto&#34;&amp;gt;Contraste Preto&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;3&#34; title=&#34;Contraste Azul&#34;&amp;gt;Contraste Azul&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/nav&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .container--&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .row--&amp;gt;
 &amp;lt;div class=&#34;row row-top&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;strong&amp;gt;Front End Developer&amp;lt;/strong&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-banner&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;h1&amp;gt;Hi my names is &amp;lt;span&amp;gt;Orivelton&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
 &amp;lt;img src=&#34;img/avatar.png&#34; alt=&#34;Avatar Front End&#34; class=&#34;avatar&#34;&amp;gt;
 &amp;lt;img src=&#34;img/avatar-preto.png&#34; alt=&#34;Oculos do avatar&#34; class=&#34;oculos&#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-content&#34;&amp;gt;
 &amp;lt;article class=&#34;container&#34; id=&#34;content&#34;&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Html5&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Css3&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Javascript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Typescript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;footer id=&#34;footer&#34;&amp;gt;
 Copyright (c) 2016 Copyright Holder All Rights Reserved.
 &amp;lt;/footer&amp;gt;
 &amp;lt;script type=&#34;text/javascript&#34; src=&#34;js/contraste.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Umas das recomendações da WCAG 2.0 é que o primeiro link do site leve para o conteúdo principal, com isso você já ganha uns pontinhos na ferramenta de análise de acessibilidade.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;css&#34;&gt;CSS&lt;/h2&gt;

&lt;p&gt;O CSS é muito importante, se possível não usar CSS inline, a utilização de unidades relativas (EM, %,  REM) na escrita do CSS melhora a acessibilidade. Validar o CSS vai apontar erros que deixamos passar, para isso temos a ferramenta de análise da W3C o &lt;a href=&#34;https://jigsaw.w3.org/css-validator/&#34;&gt;CSS Validation Service&lt;/a&gt;. Não vou postar aqui o CSS, mas logo abaixo vou deixar o link do projeto completo ;).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;javascript&#34;&gt;Javascript&lt;/h1&gt;

&lt;p&gt;Nesse post resolvi usar javascript puro, pois se trata de uma aplicação simples e não haveria a necessidade de usar JQuery ou alguma lib ou Framework e também eu amo javascript puro, acho bem desafiador \0/.&lt;/p&gt;

&lt;p&gt;Esse Javascript modularizei em três blocos.&lt;/p&gt;

&lt;h3 id=&#34;1-8211-a-escolha-do-contraste-no-click-do-link&#34;&gt;1 &amp;#8211; A escolha do contraste no click do link&lt;/h3&gt;

&lt;pre&gt;//Selecionando os links de contraste
var linksContraste = document.querySelectorAll(&#39;nav a[data-contraste]&#39;);

//Function click passando o valor do data-contraste para a function contraste setar o Id no body
linksContraste.forEach(linksContraste =&amp;gt; linksContraste.addEventListener(&#39;click&#39;, function() {
 var dataContraste = this.dataset.contraste; // pegando o data-contraste da tag &#39;a&#39;
 contraste(dataContraste); // Chamando a function contraste com um parâmetro passado pelo data-contraste da tag &#39;a&#39;
 }
));&lt;/pre&gt;

&lt;h3 id=&#34;2-8211-a-função-de-setar-o-contraste&#34;&gt;2 &amp;#8211; A Função de setar o contraste.&lt;/h3&gt;

&lt;pre&gt;function contraste(dataContraste) {
 var setId;
 //Verificação de qual contraste foi selecionado
 if (dataContraste == 1) {
 setId = &#39;contrasteBranco&#39;;
 } else if (dataContraste == 2) {
 setId = &#39;contrastePreto&#39;;
 } else if (dataContraste == 3) {
 setId = &#39;contrasteAzul&#39;;
 } else {
 setId = &#39;&#39;;
 }
 // setando o ID do contraste escolhido no body
 document.querySelector(&#34;body&#34;).setAttribute(&#34;id&#34;, setId);
 // Guardando o cookie do contraste
 document.cookie = &#34;contraste=&#34; + setId + &#34;&#34;;
}&lt;/pre&gt;

&lt;h3 id=&#34;3-8211-a-verificação-do-cookie-gravado&#34;&gt;3 &amp;#8211; A verificação do cookie gravado&lt;/h3&gt;

&lt;pre&gt;// Verificação do cookie
var cookieContrasteBranco = document.cookie.indexOf(&#39;contrasteBranco&#39;);
var cookieContrastePreto = document.cookie.indexOf(&#39;contrastePreto&#39;);
var cookieContrasteAzul = document.cookie.indexOf(&#39;contrasteAzul&#39;);

//Verificando o cookie setado anteriormente
var cookieTrue = &#39;&#39;;
if (cookieContrasteBranco != -1) {
 cookieTrue = 1;
} else if (cookieContrastePreto != -1) {
 cookieTrue = 2;
} else if (cookieContrasteAzul != -1) {
 cookieTrue = 3;
} else {
 cookieTrue = &#39;&#39;;
}
//Chamando a function contraste com o valor do cookie guardado
contraste(cookieTrue);&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;node-cookie&#34;&gt;Node + Cookie&lt;/h2&gt;

&lt;p&gt;Node? sim, usaremos o Node para subir um servidor, pois não da pra guardar cookie sem um servidor, vamos precisar usar o Node, mas é super simples.&lt;/p&gt;

&lt;p&gt;Não sabe usar? Não sabe o que é? tem um poste aqui muito bom que vai te dar o caminho das pedras, nesse &lt;a href=&#34;https://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js/&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No site &lt;a href=&#34;https://www.npmjs.com/package/http-server&#34;&gt;NPMJS &lt;/a&gt;temos um servidor em que iremos utilizar, abra seu Node e manda essa;&lt;/p&gt;

&lt;pre&gt;npm install http-server -g&lt;/pre&gt;

&lt;p&gt;Pronto, o resultado será esse;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56612&#34; src=&#34;uploads/2016/12/Capture.png&#34; alt=&#34;capture&#34; width=&#34;636&#34; height=&#34;48&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora navegando com o Node até a pasta do seu projeto;&lt;/p&gt;

&lt;pre&gt;http-server&lt;/pre&gt;

&lt;p&gt;Ok, você já tem um servidor no ar, utilize um dos endereços http listados e abra no seu navegador de preferência (&lt;del&gt;&lt;em&gt;Chrome&lt;/em&gt;&lt;/del&gt;);&lt;/p&gt;

&lt;pre&gt;&lt;img class=&#34;alignnone wp-image-56613&#34; src=&#34;uploads/2016/12/Capture-1.png&#34; alt=&#34;capture&#34; width=&#34;640&#34; height=&#34;134&#34; /&gt;&lt;/pre&gt;

&lt;p&gt;Já está tudo pronto, com o servidor no ar já podemos gravar no cookie a escolha do contraste selecionada pelo usuário, isso vai evitar que o usuário atualize a página e carregue a página sem o contraste escolhido.&lt;/p&gt;

&lt;p&gt;já podemos verificar o cookie guardado depois do click no link&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56617&#34; src=&#34;uploads/2016/12/Capture-2.png&#34; alt=&#34;capture&#34; width=&#34;931&#34; height=&#34;509&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Com esse valor guardado no cookie o passo 3 vai funcionar perfeitamente, setando o contraste escolhido anteriormente ao recarregar a página.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Veja o projeto completo no [Nesse post vou explicar uma das opções de como fazer um contraste de cores, existe diretrizes de acessibilidade da &lt;a href=&#34;https://www.w3.org/Translations/WCAG20-pt-PT/&#34; target=&#34;_blank&#34;&gt;WCAG 2.0&lt;/a&gt; que explica o nível aceitável de contraste de cores esperadas em um site, veja nesse &lt;a href=&#34;https://www.w3.org/TR/WCAG20/#visual-audio-contrast&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;proposta-1&#34;&gt;Proposta&lt;/h2&gt;

&lt;p&gt;Criar um contraste de cores em três níveis (Branco, Preto e Azul) usando HTML5, CSS3, Javascript (Puro), Node e o Cookie do navegado para guarda o contraste escolhido.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56600&#34; src=&#34;uploads/2016/12/html5-css-javascript-logos.png&#34; alt=&#34;html5-css-javascript-logos&#34; width=&#34;1267&#34; height=&#34;287&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;como-será-feito-1&#34;&gt;Como será feito&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Em uma página teremos quatro links em que o usuário vai escolher (Preto, branco, azul ou sem contraste).&lt;/li&gt;
&lt;li&gt;No evento de click vamos passar para o javascript um valor do atributo &amp;#8216;data-contraste&amp;#8217;.&lt;/li&gt;
&lt;li&gt;Vai ser adicionar na tag &amp;#8216;body&amp;#8217; um &amp;#8216;id&amp;#8217; para o CSS fazer toda a mágica de trocar as cores da página.&lt;/li&gt;
&lt;li&gt;Vai ser guardado no cookie a opção selecionada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veja como vai ficar;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56620&#34; src=&#34;uploads/2016/12/contraste-de-cores.gif&#34; alt=&#34;contraste-de-cores&#34; width=&#34;484&#34; height=&#34;264&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Então&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-56615&#34; src=&#34;uploads/2016/12/ThomasCook_tagline.jpg&#34; alt=&#34;ThomasCook_tagline_hori_cmyk&#34; width=&#34;479&#34; height=&#34;137&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;html-1&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;O HTML para esse tipo de projeto é de extrema necessidade ser no mínimo validado pelo &lt;a href=&#34;https://validator.w3.org/&#34;&gt;W3C&lt;/a&gt; e ter nível &amp;#8220;AAA&amp;#8221; em alguma ferramenta de análise de acessibilidade, no caso eu usei o &lt;a href=&#34;http://www.acessibilidade.gov.pt/accessmonitor/&#34;&gt;Accessmonitor&lt;/a&gt;, já usando a WCAG 2.0.&lt;/p&gt;

&lt;p&gt;A atenção na contrução do HTML vai determinar se o usuário acessível vai ter uma boa experiência no seu site ou não.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-BR&#34;&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Artigo contraste de cores&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;css/style.css&#34;&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&#34;row row-header&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;nav&amp;gt;
 &amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#content&#34; title=&#34;Ir para o Conteúdo&#34;&amp;gt;Ir para o Conteúdo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; title=&#34;Ir para o Topo&#34;&amp;gt;Ir para o Topo&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#footer&#34; title=&#34;Ir para o Rodapé&#34;&amp;gt;Ir para o Rodapé&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;0&#34; title=&#34;Sem Contraste&#34;&amp;gt;Sem Contraste&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;1&#34; title=&#34;Contraste Branco&#34;&amp;gt;Contraste Branco&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;2&#34; title=&#34;Contraste Preto&#34;&amp;gt;Contraste Preto&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;
 &amp;lt;a href=&#34;#&#34; data-contraste=&#34;3&#34; title=&#34;Contraste Azul&#34;&amp;gt;Contraste Azul&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/nav&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .container--&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;!-- End - .row--&amp;gt;
 &amp;lt;div class=&#34;row row-top&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;strong&amp;gt;Front End Developer&amp;lt;/strong&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-banner&#34;&amp;gt;
 &amp;lt;div class=&#34;container&#34;&amp;gt;
 &amp;lt;h1&amp;gt;Hi my names is &amp;lt;span&amp;gt;Orivelton&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
 &amp;lt;img src=&#34;img/avatar.png&#34; alt=&#34;Avatar Front End&#34; class=&#34;avatar&#34;&amp;gt;
 &amp;lt;img src=&#34;img/avatar-preto.png&#34; alt=&#34;Oculos do avatar&#34; class=&#34;oculos&#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;row row-content&#34;&amp;gt;
 &amp;lt;article class=&#34;container&#34; id=&#34;content&#34;&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Html5&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Css3&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Javascript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;box&#34;&amp;gt;
 &amp;lt;h2&amp;gt;Typescript&amp;lt;/h2&amp;gt;
 &amp;lt;i&amp;gt;★★★★&amp;lt;/i&amp;gt;
 &amp;lt;p&amp;gt;
 Mussum Ipsum, cacilds vidis litro abertis. Manduma pindureta quium dia nois paga.
 Nec orci ornare consequat. Praesent lacinia ultrices consectetur. Sed non ipsum felis.
 Si num tem leite então bota uma pinga aí cumpadi! Atirei o pau no gatis, per gatis num morreus.
 &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;footer id=&#34;footer&#34;&amp;gt;
 Copyright (c) 2016 Copyright Holder All Rights Reserved.
 &amp;lt;/footer&amp;gt;
 &amp;lt;script type=&#34;text/javascript&#34; src=&#34;js/contraste.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;Umas das recomendações da WCAG 2.0 é que o primeiro link do site leve para o conteúdo principal, com isso você já ganha uns pontinhos na ferramenta de análise de acessibilidade.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;css-1&#34;&gt;CSS&lt;/h2&gt;

&lt;p&gt;O CSS é muito importante, se possível não usar CSS inline, a utilização de unidades relativas (EM, %,  REM) na escrita do CSS melhora a acessibilidade. Validar o CSS vai apontar erros que deixamos passar, para isso temos a ferramenta de análise da W3C o &lt;a href=&#34;https://jigsaw.w3.org/css-validator/&#34;&gt;CSS Validation Service&lt;/a&gt;. Não vou postar aqui o CSS, mas logo abaixo vou deixar o link do projeto completo ;).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;javascript-1&#34;&gt;Javascript&lt;/h1&gt;

&lt;p&gt;Nesse post resolvi usar javascript puro, pois se trata de uma aplicação simples e não haveria a necessidade de usar JQuery ou alguma lib ou Framework e também eu amo javascript puro, acho bem desafiador \0/.&lt;/p&gt;

&lt;p&gt;Esse Javascript modularizei em três blocos.&lt;/p&gt;

&lt;h3 id=&#34;1-8211-a-escolha-do-contraste-no-click-do-link-1&#34;&gt;1 &amp;#8211; A escolha do contraste no click do link&lt;/h3&gt;

&lt;pre&gt;//Selecionando os links de contraste
var linksContraste = document.querySelectorAll(&#39;nav a[data-contraste]&#39;);

//Function click passando o valor do data-contraste para a function contraste setar o Id no body
linksContraste.forEach(linksContraste =&amp;gt; linksContraste.addEventListener(&#39;click&#39;, function() {
 var dataContraste = this.dataset.contraste; // pegando o data-contraste da tag &#39;a&#39;
 contraste(dataContraste); // Chamando a function contraste com um parâmetro passado pelo data-contraste da tag &#39;a&#39;
 }
));&lt;/pre&gt;

&lt;h3 id=&#34;2-8211-a-função-de-setar-o-contraste-1&#34;&gt;2 &amp;#8211; A Função de setar o contraste.&lt;/h3&gt;

&lt;pre&gt;function contraste(dataContraste) {
 var setId;
 //Verificação de qual contraste foi selecionado
 if (dataContraste == 1) {
 setId = &#39;contrasteBranco&#39;;
 } else if (dataContraste == 2) {
 setId = &#39;contrastePreto&#39;;
 } else if (dataContraste == 3) {
 setId = &#39;contrasteAzul&#39;;
 } else {
 setId = &#39;&#39;;
 }
 // setando o ID do contraste escolhido no body
 document.querySelector(&#34;body&#34;).setAttribute(&#34;id&#34;, setId);
 // Guardando o cookie do contraste
 document.cookie = &#34;contraste=&#34; + setId + &#34;&#34;;
}&lt;/pre&gt;

&lt;h3 id=&#34;3-8211-a-verificação-do-cookie-gravado-1&#34;&gt;3 &amp;#8211; A verificação do cookie gravado&lt;/h3&gt;

&lt;pre&gt;// Verificação do cookie
var cookieContrasteBranco = document.cookie.indexOf(&#39;contrasteBranco&#39;);
var cookieContrastePreto = document.cookie.indexOf(&#39;contrastePreto&#39;);
var cookieContrasteAzul = document.cookie.indexOf(&#39;contrasteAzul&#39;);

//Verificando o cookie setado anteriormente
var cookieTrue = &#39;&#39;;
if (cookieContrasteBranco != -1) {
 cookieTrue = 1;
} else if (cookieContrastePreto != -1) {
 cookieTrue = 2;
} else if (cookieContrasteAzul != -1) {
 cookieTrue = 3;
} else {
 cookieTrue = &#39;&#39;;
}
//Chamando a function contraste com o valor do cookie guardado
contraste(cookieTrue);&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;node-cookie-1&#34;&gt;Node + Cookie&lt;/h2&gt;

&lt;p&gt;Node? sim, usaremos o Node para subir um servidor, pois não da pra guardar cookie sem um servidor, vamos precisar usar o Node, mas é super simples.&lt;/p&gt;

&lt;p&gt;Não sabe usar? Não sabe o que é? tem um poste aqui muito bom que vai te dar o caminho das pedras, nesse &lt;a href=&#34;https://tableless.com.br/o-que-nodejs-primeiros-passos-com-node-js/&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No site &lt;a href=&#34;https://www.npmjs.com/package/http-server&#34;&gt;NPMJS &lt;/a&gt;temos um servidor em que iremos utilizar, abra seu Node e manda essa;&lt;/p&gt;

&lt;pre&gt;npm install http-server -g&lt;/pre&gt;

&lt;p&gt;Pronto, o resultado será esse;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56612&#34; src=&#34;uploads/2016/12/Capture.png&#34; alt=&#34;capture&#34; width=&#34;636&#34; height=&#34;48&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Agora navegando com o Node até a pasta do seu projeto;&lt;/p&gt;

&lt;pre&gt;http-server&lt;/pre&gt;

&lt;p&gt;Ok, você já tem um servidor no ar, utilize um dos endereços http listados e abra no seu navegador de preferência (&lt;del&gt;&lt;em&gt;Chrome&lt;/em&gt;&lt;/del&gt;);&lt;/p&gt;

&lt;pre&gt;&lt;img class=&#34;alignnone wp-image-56613&#34; src=&#34;uploads/2016/12/Capture-1.png&#34; alt=&#34;capture&#34; width=&#34;640&#34; height=&#34;134&#34; /&gt;&lt;/pre&gt;

&lt;p&gt;Já está tudo pronto, com o servidor no ar já podemos gravar no cookie a escolha do contraste selecionada pelo usuário, isso vai evitar que o usuário atualize a página e carregue a página sem o contraste escolhido.&lt;/p&gt;

&lt;p&gt;já podemos verificar o cookie guardado depois do click no link&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-56617&#34; src=&#34;uploads/2016/12/Capture-2.png&#34; alt=&#34;capture&#34; width=&#34;931&#34; height=&#34;509&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Com esse valor guardado no cookie o passo 3 vai funcionar perfeitamente, setando o contraste escolhido anteriormente ao recarregar a página.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Veja o projeto completo no ]&lt;a href=&#34;http://codepen.io/orivelton/pen/XNymQp&#34;&gt;6&lt;/a&gt; e no &lt;a href=&#34;https://github.com/orivelton10/contraste-de-cores&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando uma aplicação de Chat simples com NodeJS e Socket.io</title>
      <link>https://tableless.github.io/hugo-public/criando-uma-aplicacao-de-chat-simples-com-nodejs-e-socket-io/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-uma-aplicacao-de-chat-simples-com-nodejs-e-socket-io/</guid>
      <description>

&lt;p&gt;Neste tutorial iremos abordar alguns conceitos do Socket.io criando um simples sistema de chat para browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dericeira/Simple-Chat-Socket.io/master/example.gif&#34; alt=&#34;https://raw.githubusercontent.com/dericeira/Simple-Chat-Socket.io/master/example.gif&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-socket-io&#34;&gt;O que é Socket.io?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://socket.io&#34;&gt;Socket.io&lt;/a&gt; é um uma biblioteca Javascript feita para construir aplicações real-time, possibilitando uma comunicação bi-direcional entre cliente e servidor. O socket.io utiliza as especificações de Web Sockets (para quem quer saber mais, recomendo dar uma olhada &lt;a href=&#34;https://www.html5rocks.com/pt/tutorials/websockets/basics/&#34;&gt;neste ótimo artigo&lt;/a&gt; da HTML5 Rocks).&lt;/p&gt;

&lt;p&gt;O Socket.io roda, no lado do servidor, em NodeJS, e, no lado do cliente, ele roda diretamente no browser, possibilitando uma enorme gama de possibilidades de aplicações, como jogos, sistemas de notificações, real-time analytics e sistemas de chats e conversas em tempo real.&lt;/p&gt;

&lt;h2 id=&#34;setando-o-projeto&#34;&gt;Setando o projeto&lt;/h2&gt;

&lt;p&gt;Primeiramente, temos que instalar algumas bibliotecas que iremos utilizar no projeto, para isso usarei o &lt;a href=&#34;https://github.com/yarnpkg/yarn&#34;&gt;yarn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, vou adicionar ao projeto a biblioteca do Socket.io que rodará do lado do servidor.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add socketio&lt;/pre&gt;

&lt;p&gt;Também iremos utilizar o express:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add express&lt;/pre&gt;

&lt;p&gt;Também precisamos adicionar o Socket.io para o cliente (você pode utilizar a CDN oficial disponibilizada no site deles também):&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;yarn add socket.io-client&lt;/pre&gt;

&lt;p&gt;E, por último, usarei a biblioteca jQuery para manipular a DOM.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;yarn add jquery&lt;/pre&gt;

&lt;h2 id=&#34;fazendo-o-html-css&#34;&gt;Fazendo o HTML+CSS&lt;/h2&gt;

&lt;p&gt;Vamos criar um arquivo index.html e já deixar preparado o nosso template do sistema de chat.&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;en&#34;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
 &amp;lt;title&amp;gt;Simple chat&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;assets/css.css&#34;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&#34;nickname_container&#34; id=&#34;nick&#34;&amp;gt;

 &amp;lt;span&amp;gt;Type your nickname:&amp;lt;/span&amp;gt;
 &amp;lt;form id=&#34;submit&#34;&amp;gt;&amp;lt;input type=&#34;text&#34; id=&#34;nickname&#34; /&amp;gt;&amp;lt;/form&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div id=&#34;chat&#34; hidden&amp;gt;

 &amp;lt;div class=&#34;menu&#34; =&amp;gt;
 &amp;lt;div class=&#34;name&#34; id=&#34;name&#34;&amp;gt;Alex&amp;lt;/div&amp;gt;
 &amp;lt;div class=&#34;last&#34; id=&#34;time&#34;&amp;gt;18:09&amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;ol class=&#34;chat&#34;&amp;gt;
 
 &amp;lt;/ol&amp;gt;
 
 &amp;lt;input class=&#34;textarea&#34; type=&#34;text&#34; placeholder=&#34;Type here!&#34; id=&#34;textarea&#34; /&amp;gt;
&amp;lt;/div&amp;gt;
 &amp;lt;script src=&#34;node_modules/jquery/dist/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src=&#34;node_modules/socket.io-client/socket.io.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src=&#34;assets/js.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Repare que eu também criei o diretório assets, e criei os arquivos css.css e js.js.&lt;/p&gt;

&lt;p&gt;Não entrarei na parte do CSS, pois o foco aqui é o javascript, mas você pode ver o resultado no &lt;a href=&#34;https://github.com/dericeira/Simple-Chat-Socket.io/blob/master/assets/css.css&#34;&gt;github&lt;/a&gt;. Eu utilizei como base &lt;a href=&#34;https://codepen.io/Varo/pen/gbZzgr&#34;&gt;este pen&lt;/a&gt; para construir o layout.&lt;/p&gt;

&lt;h2 id=&#34;server-side&#34;&gt;Server-side&lt;/h2&gt;

&lt;p&gt;Vamos iniciar com a criação da parte de servidor do Socket.io, ou seja, iremos lidar com os eventos server-side.&lt;/p&gt;

&lt;p&gt;Iniciaremos criando um arquivo &lt;strong&gt;app.js&lt;/strong&gt; no diretório raíz e importaremos os módulos e faremos algumas operações iniciais:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var app = require(&#39;express&#39;)();
var http = require(&#39;http&#39;).Server(app);
var io = require(&#39;socket.io&#39;)(http);

var clients = {};

app.get(&#39;/&#39;, function(req, res){
res.send(&#39;server is running&#39;);
});

//SocketIO vem aqui

http.listen(3000, function(){
console.log(&#39;listening on port 3000&#39;);
});
&lt;/pre&gt;

&lt;p&gt;Este script implementa um servidor Node utilizando os módulos http e express (para roteamento).&lt;/p&gt;

&lt;p&gt;A variável clientes que está sendo criada servirá para armazenar nossa lista de clientes.&lt;/p&gt;

&lt;p&gt;Agora iremos adicionar o nosso primeiro evento do Socket.io, que será o &lt;strong&gt;connection&lt;/strong&gt;, que dispara a cada vez que um cliente se conecta ao socket.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;io.on(&#34;connection&#34;, function (client) {
    console.log(&#39;user connected&#39;);
});&lt;/pre&gt;

&lt;p&gt;Para nossa sala de chat, precisaremos implementar outros 3 eventos: &lt;strong&gt;join&lt;/strong&gt;, &lt;strong&gt;send&lt;/strong&gt; e &lt;strong&gt;disconnect&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;io.on(&#34;connection&#34;, function (client) {
  client.on(&#34;join&#34;, function(name){
    console.log(&#34;Joined: &#34; + name);
    clients[client.id] = name;
    client.emit(&#34;update&#34;, &#34;You have connected to the server.&#34;);
    client.broadcast.emit(&#34;update&#34;, name + &#34; has joined the server.&#34;)
  });

  client.on(&#34;send&#34;, function(msg){
    console.log(&#34;Message: &#34; + msg);
    client.broadcast.emit(&#34;chat&#34;, clients[client.id], msg);
  });

  client.on(&#34;disconnect&#34;, function(){
    console.log(&#34;Disconnect&#34;);
    io.emit(&#34;update&#34;, clients[client.id] + &#34; has left the server.&#34;);
    delete clients[client.id];
  });
});
&lt;/pre&gt;

&lt;p&gt;O evento join deverá ser disparado quando o cliente entrar no servidor, adicionando o id do cliente no array e emitindo dois novos eventos, nomeando-os de &lt;strong&gt;update&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note que há uma diferença entre o método &lt;strong&gt;client.emit&lt;/strong&gt; e o &lt;strong&gt;client.broadcast.emit&lt;/strong&gt;. O client.emit enviará a notificação somente para o cliente atual, ou seja, o cliente que acabou de entrar na sala de chat. O &lt;strong&gt;client.broadcast.emit&lt;/strong&gt; irá emitir para todos os clientes conectados, com exceção do que está executando a ação. Se utilizássemos o método &lt;strong&gt;io.emit&lt;/strong&gt;, a mensagem seria enviada a todos os clientes conectados ao socket. Abaixo uma série de exemplos de métodos disponíveis:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;// enviar apenas para o cliente atual
client.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes, inclusive o atual
io.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes, exceto o atual
client.broadcast.emit(&#39;message&#39;, &#34;this is a test&#34;);

// enviar para todos os clientes (com exceção do atual) para uma sala específica
socket.broadcast.to(&#39;game&#39;).emit(&#39;message&#39;, &#39;nice game&#39;);

// enviar para todos os clientes em uma sala específica
io.in(&#39;game&#39;).emit(&#39;message&#39;, &#39;cool game&#39;);

// enviar para o atual, caso ele esteja na sala
client.to(&#39;game&#39;).emit(&#39;message&#39;, &#39;enjoy the game&#39;);

// enviar para todos os clientes em um namespace &#39;namespace1&#39;
io.of(&#39;namespace1&#39;).emit(&#39;message&#39;, &#39;gg&#39;);

// enviando para um socketid individual
client.broadcast.to(socketid).emit(&#39;message&#39;, &#39;for your eyes only&#39;);&lt;/pre&gt;

&lt;p&gt;Com todos esses métodos, conseguiríamos implementar salas específicas, mensagens individuais, etc. Porém nosso foco é mostrar a parte mais básica e entender o funcionamento.&lt;/p&gt;

&lt;h2 id=&#34;client-side&#34;&gt;Client-side&lt;/h2&gt;

&lt;p&gt;Com nosso servidor concluido e rodando, vamos passar para a parte de client-side de nossa aplicação de chat. Vamos ao &lt;strong&gt;js.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Primeiramente, inicializaremos o socket.io e criaremos uma variável &lt;strong&gt;ready&lt;/strong&gt;, setada como false. Esta variável será responsável por indicar se o usuário já informou ou não o seu nickname.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;$(document).ready(function(){
    var socket = io.connect(&#34;http://localhost:3000&#34;);
    var ready = false;
});
&lt;/pre&gt;

&lt;p&gt;Com esta implementação, já conseguimos disparar o evento &lt;strong&gt;connection&lt;/strong&gt; em nosso servidor. Porém, precisamos fazer com que o servidor receba a informação cada vez que um novo usuário entrar na sala informando o seu nickname.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#submit&#34;).submit(function(e) {
    e.preventDefault();
    $(&#34;#nick&#34;).fadeOut();
    $(&#34;#chat&#34;).fadeIn();
    var name = $(&#34;#nickname&#34;).val();
    var time = new Date();
    $(&#34;#name&#34;).html(name);
    $(&#34;#time&#34;).html(&#39;First login: &#39; + time.getHours() + &#39;:&#39; + time.getMinutes());

    ready = true;
    socket.emit(&#34;join&#34;, name);
});
&lt;/pre&gt;

&lt;p&gt;A função jQuery acima captura a submissão do formulário de nickname, fecha a tela de seleção de nick, mostra a tela de chat, seta a variável ready para true e executa um comando de socket, o &lt;strong&gt;socket.emit&lt;/strong&gt;, que informa para o nosso servidor que um novo usuário acabou de entrar na sala.&lt;/p&gt;

&lt;p&gt;Nada irá acontecer, pois ainda não temos o receptor do evento &lt;strong&gt;update&lt;/strong&gt;, que está sendo disparado no nosso servidor, então vamos criá-lo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;socket.on(&#34;update&#34;, function(msg) {
    if (ready) {
        $(&#39;.chat&#39;).append(&#39;&amp;lt;li class=&#34;info&#34;&amp;gt;&#39; + msg + &#39;&amp;lt;/li&amp;gt;&#39;)
    }
});
&lt;/pre&gt;

&lt;p&gt;Este código fará com que, a cada vez que o servidor emitir um update, o jQuery adicione uma nova linha no chat com a mensagem retornada.&lt;/p&gt;

&lt;p&gt;Agora, iremos fazer com que nossa aplicação envie as mensagens ao servidor a cada vez que o cliente apertar o enter no input de texto:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;$(&#34;#textarea&#34;).keypress(function(e){
    if(e.which == 13) {
         var text = $(&#34;#textarea&#34;).val();
         $(&#34;#textarea&#34;).val(&#39;&#39;);
         var time = new Date();
         $(&#34;.chat&#34;).append(&#39;&amp;lt;li class=&#34;self&#34;&amp;gt;&amp;lt;div class=&#34;msg&#34;&amp;gt;&amp;lt;span&amp;gt;&#39;
                      + $(&#34;#nickname&#34;).val() + &#39;:&amp;lt;/span&amp;gt;    &amp;lt;p&amp;gt;&#39; + text + &#39;&amp;lt;/p&amp;gt;&amp;lt;time&amp;gt;&#39; + 
                      time.getHours() + &#39;:&#39; + time.getMinutes() + &#39;&amp;lt;/time&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&#39;);
         socket.emit(&#34;send&#34;, text);
    }
});
&lt;/pre&gt;

&lt;p&gt;E, para concluir, precisamos fazer com que o socket.io observe todas as mensagens referente ao chat em si, e adicione à DOM:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;socket.on(&#34;chat&#34;, function(client,msg) {
 if (ready) {
    var time = new Date();
    $(&#34;.chat&#34;).append(&#39;&amp;lt;li class=&#34;other&#34;&amp;gt;&amp;lt;div class=&#34;msg&#34;&amp;gt;&amp;lt;span&amp;gt;&#39; + 
                 client + &#39;:&amp;lt;/span&amp;gt;&amp;lt;p&amp;gt;&#39; + msg + &#39;&amp;lt;/p&amp;gt;&amp;lt;time&amp;gt;&#39; + time.getHours() + &#39;:&#39; + 
                 time.getMinutes() + &#39;&amp;lt;/time&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;&#39;);
 }
});&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Na minha opinião,  as sockets são uma das melhores funcionalidades do HTML5, e possuem uma infinidade de aplicação. O ganho de performance é espetacular se bem aplicado, uma vez que evita o uso de requisições HTTP em aplicações onde a necessidade de atualização é grande (baixa latência).&lt;/p&gt;

&lt;p&gt;Disponibilizei o código do tutorial no &lt;a href=&#34;https://github.com/dericeira/Simple-Chat-Socket.io&#34;&gt;github&lt;/a&gt; para quem se interessar, e estou aberto a tirar dúvidas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aplicativos Desktop com NW.js – Node Webkit – Introdução</title>
      <link>https://tableless.github.io/hugo-public/aplicativos-desktop-com-nw-js-node-webkit-introducao/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/aplicativos-desktop-com-nw-js-node-webkit-introducao/</guid>
      <description>

&lt;h1 id=&#34;este-é-o-primeiro-artigo-de-uma-série-que-vou-escrever-sobre-aplicações-desktop-usando-tecnologias-web-html-css-javascript-e-webgl&#34;&gt;&lt;em&gt;&lt;strong&gt;Este é o primeiro artigo de uma série que vou escrever sobre aplicações desktop usando tecnologias web. (HTML, CSS, Javascript e WebGL)&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é uma aplicação em tempo de execução baseado em Chromium e Node.js, com ele é possível desenvolver aplicativos nativos para Windows, Linux e Mac, usando tecnologias web e usufruindo dos pacotes do Node.js.&lt;/p&gt;

&lt;p&gt;Para ter uma ideia do que é possível fazer, visite este link e veja alguns aplicativos desenvolvidos com NW.js -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;NW.js&lt;/strong&gt; é um projeto criado pela Intel. Outro projeto muito bom e conhecido para desenvolver aplicativos desktop usando tecnologias web é o &lt;strong&gt;Electron&lt;/strong&gt;, criado pelo GitHub. Segue um link comparativo entre os dois -&amp;gt; &lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&#34;&gt;http://tangiblejs.com/posts/nw-js-and-electron-compared-2016-edition&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa série de artigos, vou explicar como criar um aplicativo desktop, com ícone personalizado e empacotado em um único executável. No último artigo, vou explicar como fazer uma integração com base de dados local, em tempo real e sem a necessidade de abrir portas ou fazer configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A versão mais atual do NW.js no momento em que eu escrevo este artigo é a &lt;strong&gt;&lt;em&gt;nwjs-v0.15.3&lt;/em&gt;&lt;/strong&gt;, é esta que estou usando. Além disso, estou usando Windows como sistema operacional.&lt;/p&gt;

&lt;p&gt;Vamos começar com um &amp;#8220;Olá Mundo&amp;#8221;, porém, vou explicar alguns recursos de &amp;#8220;Window&amp;#8221; e as configurações para iniciar o projeto.&lt;/p&gt;

&lt;p&gt;Primeiro faça o download do NW.js no site &lt;a href=&#34;http://nwjs.io/&#34;&gt;http://nwjs.io/&lt;/a&gt; &amp;#8211; Para desenvolvimento, baixe a versão SDK &amp;#8211; descompacte os arquivos em uma pasta que seja fácil para acessar pelo &lt;em&gt;prompt&lt;/em&gt; de comando &amp;#8211; eu costumo descompactar na pasta _c:\nwjs_&lt;/p&gt;

&lt;p&gt;Para uma aplicação básica funcionar, precisamos apenas de dois arquivos, o &lt;em&gt;package.json&lt;/em&gt;, que contém as configurações da nossa aplicação e o &lt;em&gt;index.html&lt;/em&gt;, que contém o código da nossa aplicação. Depois vamos adicionar arquivos .js e .css. Neste primeiro artigo, vamos brincar um pouco com o package.json.&lt;/p&gt;

&lt;p&gt;Crie um novo arquivo index.html &amp;#8211; vamos adicionar uma estrutura básica de HTML:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&#34;pt-br&#34;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&#34;utf-8&#34;/&amp;gt;
&amp;lt;title&amp;gt;Meu Primeiro Projeto&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Olá Mundo.&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Crie um novo arquivo package.json, com o código abaixo e salve na mesma pasta do HTML:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;
}&lt;/pre&gt;

&lt;p&gt;Somente com essas informações no package.json você já pode testar seu &amp;#8220;Olá Mundo&amp;#8221;. &amp;#8220;&lt;em&gt;name&lt;/em&gt;&amp;#8221; é o nome do projeto, e &amp;#8220;&lt;em&gt;main&lt;/em&gt;&amp;#8221; é o arquivo inicial da aplicação, sua &amp;#8220;página inicial&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Para executar nosso aplicativo, abra o &lt;em&gt;prompt&lt;/em&gt; de comando e vá até a pasta do seu projeto, no meu caso &amp;#8220;c:\projetos\olamundo&amp;#8221;, depois vamos executar o comando para o NW.js executar nosso projeto. Como estou usando o Windows, vou apontar para o nw.exe. No Linux ou no Mac é diferente, você pode olhar na documentação. Então nosso comando ficaria assim:&lt;/p&gt;

&lt;pre&gt;cd /path/to/your/app
/path/to/nw .&lt;/pre&gt;

&lt;p&gt;No meu caso:&lt;/p&gt;

&lt;pre&gt;cd c:\projetos\olamundo
c:\nwjs\nw.exe .&lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-54795 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2016/06/olamundo01.png&#34; alt=&#34;Tela Olá Mundo NW.js&#34; width=&#34;966&#34; height=&#34;535&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mais-sobre-o-package-json&#34;&gt;Mais sobre o package.json&lt;/h2&gt;

&lt;p&gt;O nosso package.json está muito simples, tem apenas um nome e o caminho do arquivo index. Vou explicar um pouco sobre as configurações &amp;#8220;window&amp;#8221;, que servem para controlar os botões de fechar, minimizar, informar os tamanhos mínimos e máximos, se a janela pode ser dimensionada e outras configurações.&lt;/p&gt;

&lt;p&gt;Abra o seu arquivo package.json e deixe ele como o exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;{
 &#34;name&#34;: &#34;ola-mundo&#34;,
 &#34;main&#34;: &#34;index.html&#34;,
 &#34;version&#34;: &#34;1.0&#34;,
 &#34;description&#34;: &#34;Olá Mundo&#34;,
 &#34;window&#34;: {
 &#34;width&#34;: 400,
 &#34;height&#34;: 300,
 &#34;resizable&#34;: false,
 &#34;frame&#34;: true,
 &#34;title&#34;: &#34;Olá Mundo&#34;,
 &#34;show&#34;: true,
 &#34;fullscreen&#34;: false,
 &#34;kiosk&#34;: false,
 &#34;icon&#34;: &#34;icon.png&#34;
 }
}
&lt;/pre&gt;

&lt;p&gt;Execute novamente o aplicativo e veja como ficou. Abaixo, explico cada uma das configurações usadas.&lt;/p&gt;

&lt;pre&gt;name -&amp;gt; Nome do projeto
main -&amp;gt; Arquivo inicial
version -&amp;gt; Versão
description -&amp;gt; Descrição do projeto
window:
 width -&amp;gt; Largura da janela
 height -&amp;gt; Altura da janela
 resizable -&amp;gt; Se o tamanho da janela pode ser alterado ou não
 frame -&amp;gt; Quadro que envolve a aplicação com o título, ícone, botões de fechar, minimizar e maximizar
 title -&amp;gt; Título da janela
 show -&amp;gt; Se estiver como false você executa o aplicativo e ele fica em modo silencioso, 
  está rodando, mas não aparece. Fica apenas como um processo no Windows.
 fullscreen -&amp;gt; executa em tela cheia
 kiosk -&amp;gt; Executa em tela cheia e dificulta a saída da aplicação, normalmente é usado para exposições.
 icon -&amp;gt; Caminho para o ícone (deve estar na mesma pasta do projeto)&lt;/pre&gt;

&lt;p&gt;Você pode ver mais opções e detalhes na documentação: &lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&#34;&gt;http://docs.nwjs.io/en/latest/References/Manifest%20Format/#window-subfields&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repositório com os fontes do primeiro artigo: &lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://bitbucket.org/jzonta/artigos_nwjs&#34;&gt;https://bitbucket.org/jzonta/artigos_nwjs&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;próximos-artigos-8211-aplicativos-desktop-com-nw-js-8211-node-webkit&#34;&gt;Próximos artigos &amp;#8211; Aplicativos Desktop com NW.js &amp;#8211; Node Webkit&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;1º &amp;#8211; Introdução&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Uma breve introdução, fazer um &amp;#8220;Olá Mundo&amp;#8221; e aprender um pouco sobre as configurações iniciais.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2º &amp;#8211; Menus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fazer um menu nativo da aplicação e um menu HTML, capturar as ações do botão de minimizar e alterar para minimizar o aplicativo para o System Try (Aqueles ícones pequenos ao lado do relógio) e vamos adicionar menu de opções no System Try.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3º &amp;#8211; Pacotes Node e Persistência de dados&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vamos aprender como usar os pacotes do Node.js, vamos instalar um pacote para persistir informações em um banco de dados MySql e também em um arquivo local.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4º &amp;#8211; Preparando para produção&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Como empacotar sua aplicação em um executável e adicionar um ícone para o Windows.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5º &amp;#8211; Integração web com base de dados local&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como fazer uma integração de uma aplicação web com um banco de dados local, através de uma api REST, sem a necessidade de abertura de portas ou configurações de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Poste suas dúvidas e sugestões nos comentários!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando efeitos de páginas de livro no seu front-end</title>
      <link>https://tableless.github.io/hugo-public/criando-efeitos-de-paginas-de-livro-no-seu-front-end/</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-efeitos-de-paginas-de-livro-no-seu-front-end/</guid>
      <description>

&lt;p&gt;O &lt;a href=&#34;http://www.turnjs.com/&#34; target=&#34;_blank&#34;&gt;Turn.js&lt;/a&gt; é uma biblioteca JavaScript que faz o conteúdo parecer um livro ou revista de verdade, usando as vantagens do HTML5.&lt;/p&gt;

&lt;p&gt;É uma biblioteca baseada no jQuery, versão 1.7 ou superior, então é um requerimento básico.&lt;/p&gt;

&lt;p&gt;Temos o suporte para os navegadores:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chrome 12+&lt;/li&gt;
&lt;li&gt;Safari 5+&lt;/li&gt;
&lt;li&gt;Firefox 10+&lt;/li&gt;
&lt;li&gt;Internet Explorer 9+&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;na-prática&#34;&gt;Na prática&lt;/h2&gt;

&lt;p&gt;Como exemplo, vamos usar como base a história criada por  &lt;a href=&#34;http://adagadegelo.deviantart.com/art/A-Historia-Nao-Contada-Da-Estrela-Azul-572943339&#34; target=&#34;_blank&#34;&gt;Rodrigo Martins&lt;/a&gt;, que tranformou em quadrinhos o meme da internet &amp;#8220;Já acabou, Jéssica&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Vamos utilizar &lt;em&gt;divs&lt;/em&gt; para criar as páginas do livro:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;quadrinho&#34;&amp;gt; &amp;lt;!-- Criando um novo quadrinho --&amp;gt;
    &amp;lt;div class=&#34;hard&#34; id=&#34;capa&#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- Criando a capa --&amp;gt;
    &amp;lt;div class=&#34;hard&#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- Criando a parte de trás da capa --&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-2&#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- Criando as páginas --&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-3&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-4&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-5&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-6&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-7&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-8&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;page&#34; id=&#34;pagina-9&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;hard&#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#34;hard&#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- Criando a contracapa --&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script src=&#34;https://code.jquery.com/jquery-2.1.1.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&#34;https://raw.githubusercontent.com/blasten/turn.js/master/turn.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Foi utilizado as classes padrões .&lt;em&gt;page&lt;/em&gt; em casos de páginas comuns, e a classe .&lt;em&gt;hard&lt;/em&gt; para a capa e contracapa.&lt;/p&gt;

&lt;p&gt;Agora vamos adicionar alguns estilos:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;#quadrinho{ //Definindo o tamanho
    width: 800px; 
    height: 600px;
}
#quadrinho .page{ //Definindo os valores padrão para todas as páginas
    background-color: #FFF; //Fundo branco porque, caso não carregue as imagens, ela não fique transparente.
    background-size: cover; //O Fundo precisa cobrir toda a página
}
#quadrinho .hard{
    background-color: #CCC; //Fundo cinza para diferenciar das páginas comuns
    background-size: cover;
}

// Definindo as páginas que servirão de exeplo
#capa{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-01.png&#34;);
}
#pagina-2{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-02.png&#34;);
}
#pagina-3{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-03.png&#34;);
}
#pagina-4{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-04.png&#34;);
}
#pagina-5{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-05.png&#34;);
}
#pagina-6{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-06.png&#34;);
}
#pagina-7{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-07.png&#34;);
}
#pagina-8{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-08.png&#34;);
}
#pagina-9{
    background: url(&#34;http://tableless.com.br/wp-content/uploads/2015/11/Paginas-09.png&#34;);
}
&lt;/pre&gt;

&lt;p&gt;Cada página do quadrinho recebe seu próprio &lt;em&gt;background&lt;/em&gt;, contendo o conteúdo desejado.&lt;/p&gt;

&lt;p&gt;E por fim, só é preciso colocar 5 linhas de JavaScript:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#quadrinho&#34;).turn({
    width: 800, // Para definir a largura da página
    height: 600, // Para definir a altura da página
});
&lt;/pre&gt;

&lt;p&gt;E pronto: basta abrir o navegador e ser feliz. 🙂&lt;/p&gt;

&lt;p&gt;Quem quiser ver o resultado basta &lt;a href=&#34;http://codepen.io/anon/pen/Vezozz&#34; target=&#34;_blank&#34;&gt;clicar aqui&lt;/a&gt;. [Link atualizado]&lt;/p&gt;

&lt;p&gt;Acesse:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://turnjs.com/&#34; target=&#34;_blank&#34;&gt;Website do Turn.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blasten/turn.js&#34; target=&#34;_blank&#34;&gt;Github do Turn.js&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crie seu jogo em HTML5 com enchant.js</title>
      <link>https://tableless.github.io/hugo-public/crie-seu-jogo-em-html5-com-enchant-js/</link>
      <pubDate>Tue, 28 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/crie-seu-jogo-em-html5-com-enchant-js/</guid>
      <description>

&lt;p&gt;Mantido na UEI (Ubiquitous Entertainment, Inc), por membros do Centro de Pesquisa de Akihabara, o &lt;em&gt;framework&lt;/em&gt; japonês chamado &lt;strong&gt;&lt;a href=&#34;http://enchantjs.com/pt-br/&#34; target=&#34;_blank&#34;&gt;enchant.js&lt;/a&gt;&lt;/strong&gt;, permite criar com poucas linhas de código um jogo simples em HTML5.&lt;/p&gt;

&lt;p&gt;Com &lt;strong&gt;enchant.js&lt;/strong&gt;, você pode criar desde simples jogos 2D até avançados jogos em três dimensões, graças ao suporte WebGL usado como plugin.&lt;/p&gt;

&lt;p&gt;Os elementos criados em um bloco do enchant.js são renderizado através do DOM e do Canvas, além de rodar nas plataformas mais conhecidas. Os eventos são voltados para &lt;em&gt;mobile&lt;/em&gt;, como o &lt;strong&gt;Event.TOUCH_MOVE&lt;/strong&gt;, disparado quando o usuário toca na tela e a segura. O enchant.js ainda possui uma &lt;a href=&#34;http://code.9leap.net/&#34; target=&#34;_blank&#34;&gt;plataforma&lt;/a&gt; com bibliotecas e jogos prontos para serem usados quando quiser.&lt;/p&gt;

&lt;h2 id=&#34;sprites&#34;&gt;&lt;em&gt;Sprites&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;O enchant.js trabalha com &lt;em&gt;sprites&lt;/em&gt; para renderizar objetos na tela. Esse recurso tem várias utilidades, como criar um personagem ou mesmo um ambiente. O &lt;em&gt;sprite&lt;/em&gt; permite além de renderizar um objeto no DOM ou no Canvas, criar animações com frames a partir de uma imagem &lt;em&gt;sprite&lt;/em&gt;. Cada quadro é definido como um índice em um &lt;em&gt;array&lt;/em&gt;, iniciado com zero, e com limite máximo da quantidade de imagens. Exemplo:&lt;/p&gt;

&lt;pre&gt;var Person = new Sprite(64, 64);
Person.image = game.assets[&#39;images/Person.png&#39;];
Person.frame = [0, 1, 4, 5, 1]; // linha importante&lt;/pre&gt;

&lt;p&gt;Isto fará que a imagem passe entre estes sprites em um intervalo de tempo determinado pela propriedade &lt;strong&gt;fps&lt;/strong&gt; do objeto &lt;strong&gt;Core&lt;/strong&gt; (versões mais recentes), e &lt;strong&gt;Game&lt;/strong&gt; (versões anteriores).&lt;/p&gt;

&lt;h2 id=&#34;o-código&#34;&gt;O código&lt;/h2&gt;

&lt;p&gt;Vamos criar um personagem movendo-se em um ambiente usando &lt;em&gt;sprite&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;html&#34;&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

 &amp;lt;head&amp;gt;
 &amp;lt;script src=&#34;enchant.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src=&#34;script.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/head&amp;gt;

 &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;h3 id=&#34;javascript&#34;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;:&lt;/h3&gt;

&lt;pre&gt;(function() {
   function initialize() {
     enchant();
     var game = new Core(640, 480);
     var gohan = &#34;http://tinyurl.com/p2z8qlt&#34;;
     var fundo = &#34;http://tinyurl.com/nc39d4y&#34;;
     game.preload(gohan, fundo);
     game.fps = 16; // seta o fps. Quanto maior, mais lento
 
     game.onload = function() {
       // cria fundo
       var background = new Sprite(1024, 698);
       background.image = game.assets[fundo];
      game.rootScene.addChild(background);
 
      // cria player
     var player = new Sprite(63, 97);
     player.image = game.assets[gohan];
     player.frame = [0, 1];
     player.x = (game.width/2)-(player.width/2); // centraliza no eixo X
     player.y = 250;
    player.tl.scaleTo(1.5, 1.5, 50);
    game.rootScene.addChild(player);
 
    // executa o tempo todo enquanto o player existir
    player.onenterframe = function() {
      if (this.age &amp;gt;= 50) this.frame = [2, 3, 4];
      if (this.age % 10 == 0) 
        this.tl.moveBy(50,0,10).moveBy(-50,0,10).loop();
     }
   }
   game.start(); // inicia o jogo
 }
  window.addEventListener(&#39;load&#39;, initialize, false);
}).apply(this);
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://plnkr.co/edit/dCxps2&#34; target=&#34;_blank&#34;&gt;Veja o exemplo no Plunker&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Primeiro chamamos o enchant.js na linha &lt;strong&gt;3&lt;/strong&gt;. Na linha &lt;strong&gt;4&lt;/strong&gt; criamos uma variável para guardar o objeto principal do jogo. Na linha &lt;strong&gt;7&lt;/strong&gt;, dizemos ao enchant.js o que precisamos carregar antes de iniciar o jogo. Na linha &lt;strong&gt;8&lt;/strong&gt; setamos os &lt;em&gt;frames per second&lt;/em&gt; do jogo (esta propriedade existe em todos os objetos do enchant.js). Na linha &lt;strong&gt;10&lt;/strong&gt; definimos o que acontece quando o enchant.js terminar de carregar os &lt;em&gt;assets&lt;/em&gt;. Na linha &lt;strong&gt;12&lt;/strong&gt; criamos um novo sprite com largura e altura passadas como argumento. Na linha &lt;strong&gt;13&lt;/strong&gt;, atribuímos a imagem de fundo, que já foi carregada à propriedade &lt;em&gt;image&lt;/em&gt; do &lt;em&gt;sprite background&lt;/em&gt;. Na linha &lt;strong&gt;14&lt;/strong&gt;, adicionamos esse fundo à cena principal (game.rootScene). Na linha &lt;strong&gt;19&lt;/strong&gt;, criamos uma animação passando as imagens 0 e 1 do sprite. Na linha &lt;strong&gt;22&lt;/strong&gt;, há o efeito de escala, como no CSS &lt;em&gt;(transform: scale(x, y))&lt;/em&gt;, mas com a diferença do terceiro argumento que define o tempo (quanto maior, mais demorado). Na linha &lt;strong&gt;29&lt;/strong&gt;, obtêm-se o efeito de mover em uma determinada direção em X e Y, definindo como terceiro argumento um tempo. O &lt;em&gt;loop()&lt;/em&gt; serve para repetir infinitamente a ação atual.&lt;/p&gt;

&lt;h2 id=&#34;adicionando-um-novo-personagem&#34;&gt;Adicionando um novo personagem&lt;/h2&gt;

&lt;p&gt;Que tal deixar nosso jogo mais emocionante e adicionar um inimigo para combater nosso protagonista?&lt;/p&gt;

&lt;pre&gt;(function() {
   function initialize() {
   enchant();

   var game = new Core(640, 480)
   , gohan = &#34;http://tinyurl.com/p2z8qlt&#34;
   , fundo = &#34;http://tinyurl.com/nc39d4y&#34;
   , freeza = &#34;http://tinyurl.com/parueup&#34;
   , powerImage = &#34;http://tinyurl.com/o734vyr&#34;;
   game.preload(gohan, fundo, freeza, powerImage);
   game.fps = 16;
 
   game.onload = function() {
 
     var scene = new Scene(); // cria nova cena
     game.pushScene(scene); // nova cena na principal
 
     // adiciona o fundo
     var background = new Sprite(1024, 698);
     background.image = game.assets[fundo];
     scene.addChild(background);
 
     // modelo de player
    var Player = Class.create(Sprite, {
        initialize: function(data) {
          Sprite.apply(this, [data.w, data.h]);
          this.image = game.assets[data.image];
          data.scene.addChild(this);
      }
    });
 
    var Power = Class.create(Sprite, {
      initialize: function(w, h, image, scene) {
        Sprite.call(this, w, h);
        this.image = game.assets[image];
        scene.addChild(this);
      }
    });
 

    // Gohan
    var player = new Player({
    w: 63, h: 97, scene: scene, image: gohan
    });
 
    player.frame = [0, 1];
    player.x = ((game.width/2)-(player.width/2))-200;
    player.y = 250;
    player.tl.scaleTo(1.5, 1.5, 50);
 
   player.onenterframe = function() {
     if (this.age &amp;gt;= 50) this.frame = [2, 3, 4];
     if (this.age % 10 == 0) 
    this.tl.moveBy(50,0,10).moveBy(-50,0,10).loop();
   }
 
   player.addEventListener(Event.TOUCH_START,function(evt){
     var power = new Power(133, 61, powerImage, scene);
     power.x = evt.x;
     power.y = evt.y;

     power.addEventListener(&#39;enterframe&#39;, function() {
       this.x += 2;
       if (this.intersect(enemy)) {
         scene.removeChild(enemy);
         player.frame = 0;
       }
     });
   });
 
   // Freeza
   var enemy = new Player({
     scene: scene, w: 65, h: 85, image: freeza
   });
 
   enemy.x = 400;;
   enemy.y = 180;
   enemy.tl.scaleTo(-1, 1, 1);
   enemy.tl.scaleTo(-3,3, 100);
 
   enemy.onenterframe = function() {
     if (this.age &amp;gt;= 50) this.frame = [2, 3, 4];
     if (this.age%10==0) this.tl.moveBy(0,-50,10).moveBy(0,50,10).loop();
   }

 }
 game.start();
}

 window.addEventListener(&#39;load&#39;, initialize, false);
}).apply(this);
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://plnkr.co/edit/7F6ytf&#34; target=&#34;_blank&#34;&gt;Veja o exemplo com dois personagens no Plunker&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Neste segundo exemplo, temos funções novas:&lt;/p&gt;

&lt;h3 id=&#34;class-create&#34;&gt;Class.create()&lt;/h3&gt;

&lt;p&gt;Este método recebe dois argumentos (classe e objeto). O objeto utiliza a propriedade &lt;em&gt;initialize&lt;/em&gt; para executar o objeto quando é criado como um construtor. Outras propriedades funcionam como eventos:&lt;/p&gt;

&lt;pre&gt;Class.create(Class,{initialize:function(){},onenterframe:function(){}});&lt;/pre&gt;

&lt;p&gt;Dentro do &lt;em&gt;initialize&lt;/em&gt;, precisamos chamar a classe com &lt;em&gt;call&lt;/em&gt; ou &lt;em&gt;apply&lt;/em&gt; e seguir o mesmo padrão do exemplo 1 ao criar um objeto.&lt;/p&gt;

&lt;h3 id=&#34;intersect&#34;&gt;intersect()&lt;/h3&gt;

&lt;p&gt;Esta função facilita a nossa vida, detectando uma colisão. Só é preciso usar este método em um objeto e passar ao outro como argumento. Exemplo:&lt;/p&gt;

&lt;pre&gt;player.intersect(enemy); // true ou false&lt;/pre&gt;

&lt;p&gt;Isto nos poupa de fazer uma lógica como esta:&lt;/p&gt;

&lt;pre&gt;function intersect(t, other) {
  return t.x &amp;lt; other.x + other.width
    &amp;&amp; other.x &amp;lt; t.x + t.width 
    &amp;&amp; t.y &amp;lt; other.y + other.height 
    &amp;&amp; other.y &amp;lt; t.y + t.height;
}
&lt;/pre&gt;

&lt;pre&gt;intersect(player, enemy); // true ou false&lt;/pre&gt;

&lt;p&gt;Apesar deste ser um exemplo simples de como criar um jogo em HTML5, a &lt;a href=&#34;http://enchantjs.com/resource/api-documentation/&#34; target=&#34;_blank&#34;&gt;documentação&lt;/a&gt; do enchant.js é bastante completa, e tem muita coisa que permite ser incorporada para tornar nosso exemplo mais dinâmico e interativo.&lt;/p&gt;

&lt;p&gt;Confira mais &lt;a href=&#34;http://enchantjs.com/pt-br/&#34; target=&#34;_blank&#34;&gt;demos&lt;/a&gt; no site, os &lt;a href=&#34;http://enchantjs.com/tutorial/lets-start-with-enchant-js/&#34; target=&#34;_blank&#34;&gt;tutoriais&lt;/a&gt; e os &lt;a href=&#34;http://enchantjs.com/showcase/games-on-9leap-net/&#34; target=&#34;_blank&#34;&gt;jogos já desenvolvidos&lt;/a&gt; com a plataforma.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nth-child() e calc() – Uma proposta para o abandono de frameworks de grids responsivos</title>
      <link>https://tableless.github.io/hugo-public/nth-child-calc-responsivos/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/nth-child-calc-responsivos/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Apesar da adoção do _Tableless _para construção de layouts o conceito de tabela ainda persiste através de inúmeros &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Além da semântica, o conceito &lt;em&gt;Tableless&lt;/em&gt; prega, sempre que possível, levar a responsabilidade do layout para o CSS. O problema dos &lt;em&gt;frameworks&lt;/em&gt; CSS focados em &lt;em&gt;grids&lt;/em&gt; é que a especificação do layout continua dentro do HTML, descrita através de classes CSS, ancoradas diretamente aos elementos HTML, e de forma intrusiva, ou seja, os elementos &lt;em&gt;&lt;table&gt;&lt;/em&gt; antigamente utilizados foram substituídos por elementos &lt;em&gt;&lt;div class=&amp;#8221;col-&amp;#8220;&gt;&lt;/em&gt; para a criação do layout.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone wp-image-49871 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/gridLayout.png&#34; alt=&#34;Exemplo de Grid Layout&#34; width=&#34;521&#34; height=&#34;354&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enquanto a especificação &amp;#8220;&lt;a href=&#34;http://www.w3.org/TR/css3-grid-layout/&#34; target=&#34;_blank&#34;&gt;CSS Grid Layout Module&lt;/a&gt;&amp;#8221; ainda está no forno, proponho uma alternativa simples aos &lt;em&gt;frameworks&lt;/em&gt; de &lt;em&gt;grids&lt;/em&gt; responsivos, através da dupla dinâmica &lt;em&gt;&lt;strong&gt;nth-child()&lt;/strong&gt;&lt;/em&gt; e &lt;em&gt;&lt;strong&gt;calc()&lt;/strong&gt;&lt;/em&gt; presentes no CSS3, e que são suportadas pelos navegadores modernos, inclusive o IE9 (veja mais opções de compatibilidade &lt;a href=&#34;http://caniuse.com/#search=CALC&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;http://caniuse.com/#search=nth-child&#34; target=&#34;_blank&#34;&gt;aqui&lt;/a&gt;). Para um rápido entendimento destes recursos também confira estes artigos: &lt;a href=&#34;http://tableless.com.br/nth-child/&#34;&gt;http://tableless.com.br/nth-child/&lt;/a&gt; e &lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&#34;&gt;http://www.maujor.com/tutorial/css3-funcao-css-calc.php&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;exemplo-de-formulário&#34;&gt;Exemplo de formulário&lt;/h2&gt;

&lt;p&gt;Antes de partimos para o CSS, sempre que possível, precisamos usar elementos HTML5 semânticos, atributos WAI-ARIA, entre outros padrões de acessibilidade. Para este exemplo, o uso dos elementos de entradas de dados seguirão as técnicas preconizadas pelo eMAG 3.1 (ver &lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://emag.governoeletronico.gov.br/&#34;&gt;http://emag.governoeletronico.gov.br/&lt;/a&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Para cada elemento de entrada de dados presente na estrutura &lt;em&gt;form -&amp;gt; fieldset&lt;/em&gt; o seguinte padrão será seguido:&lt;/p&gt;

&lt;pre&gt;&lt;span style=&#34;line-height: 1.5;&#34;&gt;&amp;lt;label&amp;gt;
    &amp;lt;span&amp;gt;XXX:&amp;lt;/span&amp;gt;
    &amp;lt;input type=&#34;text&#34; value=&#34;&#34;&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Agora podemos aplicar o seguinte CSS para todos os elementos &lt;em&gt;&lt;label&gt;&lt;/em&gt; presentes neste padrão.&lt;/p&gt;

&lt;pre&gt;form fieldset &amp;gt; label {
    display: block;
    float: left;
    width: calc(100% - 10px);
    height: 55px;
    margin-top: 10px;
    margin-right: 10px;
}
form fieldset label &amp;gt; input {
    float: left;
}
label &amp;gt; input {
    display: block;
    width: 100%;
}
&lt;/pre&gt;

&lt;p&gt;Por termos utilizado o &lt;em&gt;margin-right&lt;/em&gt; com 10px, este valor foi contabilizado na largura do &lt;em&gt;label&lt;/em&gt; (uso da função &lt;em&gt;calc&lt;/em&gt;) com a finalidade de que sua margem não ultrapasse os limites do contêiner. Isto foi feito para que possamos alterar o layout de uma coluna para múltiplas colunas diretamente pelo CSS. Com este estilo, cada campo de entrada de dados aparecerá disposto como uma lista, e se adaptará a largura do contêiner.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49865 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-figura1.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário&#34; width=&#34;658&#34; height=&#34;532&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O próximo passo é poder criar mais de uma &amp;#8220;coluna&amp;#8221;, para que o campo Código e Nome fiquem na mesma &amp;#8220;linha&amp;#8221; quando o tamanho da tela for grande. O campo Código terá uma largura fixa de 80px e o campo Nome preencherá o restante do espaço do contêiner descontando a largura do campo Código juntamente com a margem de 10px dos dois &lt;em&gt;labels&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34;&gt;&lt;img class=&#34;alignnone wp-image-49869 size-full&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2015/07/RogerioDias-Artigo2-Figura3.png&#34; alt=&#34;Exemplo de Código para Criação de Formulário Responsivo&#34; width=&#34;789&#34; height=&#34;537&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com estes recursos podemos alterar o layout da página HTML diretamente pelo CSS sem que a estrutura do layout fique no próprio HTML. Além de criar colunas que se adaptam a largura do contêiner, é possível criar colunas com tamanhos fixos, evitando também o uso de classes CSS, que só é encorajado quando for realmente necessário.&lt;/p&gt;

&lt;p&gt;O código fonte completo e a &lt;em&gt;Demo&lt;/em&gt; deste exemplo encontra-se em &lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://codepen.io/rogeriodegoiania/pen/GJQmzb&#34;&gt;http://codepen.io/rogeriodegoiania/pen/GJQmzb&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Um guia para o elemento ‘time’ do HTML5</title>
      <link>https://tableless.github.io/hugo-public/um-guia-para-o-elemento-time-html5/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/um-guia-para-o-elemento-time-html5/</guid>
      <description>

&lt;p&gt;O HTML5 trouxe diversas coisas bacanas pra nós desenvolvedores. Uma das mais simples e que eu acho que são uma das mais legais é a questão da semântica com os novos elementos. O surgimento dessas &lt;em&gt;tags&lt;/em&gt; deixaram nossos códigos mais semânticos e legíveis, tanto por nós como pelas máquinas.&lt;/p&gt;

&lt;p&gt;Um desses elementos é o &lt;code&gt;time&lt;/code&gt;. Já havia lido sobre ele, mas nunca tinha ido muito a fundo. Esses dias encontrei um texto do &lt;a href=&#34;https://twitter.com/AurelioDeRosa&#34; target=&#34;_blank&#34;&gt;Aurelio De Rosa&lt;/a&gt; no &lt;a href=&#34;http://www.sitepoint.com/&#34; target=&#34;_blank&#34;&gt;SitePoint&lt;/a&gt; que &lt;a href=&#34;http://www.sitepoint.com/html5-time-element-guide/&#34; target=&#34;_blank&#34;&gt;explica bastante coisa&lt;/a&gt; sobre este elemento e resolvi traduzir pra gente.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;Tempo &amp;#8211; uma das poucas coisas que sabemos que é infinita. Os seres humanos, bem como animais e plantas, têm lidado com o tempo desde o início de sua existência.&lt;/p&gt;

&lt;p&gt;Na web essa necessidade não é diferente. Mesmo nesse meio, precisamos nos comunicar com outras pessoas de que alguma coisa aconteceu em um determinado ponto, em uma data específica, ou em relação a um outro tempo definido.&lt;/p&gt;

&lt;p&gt;Antes do HTML5 não tivemos nenhum elemento para marcar semanticamente uma data ou hora. Nos últimos anos, outras soluções, como os &lt;a href=&#34;http://microformats.org/&#34; target=&#34;_blank&#34;&gt;Microformats&lt;/a&gt; e &lt;a href=&#34;http://en.wikipedia.org/wiki/Microdata_%28HTML%29&#34; target=&#34;_blank&#34;&gt;Microdata&lt;/a&gt;, tentaram preencher esta lacuna para situações específicas (data de nascimento, a publicação de um livro, e assim por diante).&lt;/p&gt;

&lt;p&gt;Nesse artigo eu irei cobrir o elemento &lt;code&gt;time&lt;/code&gt; do HTML5, o que ajuda a responder à necessidade de que acabamos de discutir.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-elemento-time&#34;&gt;O que é o elemento &lt;code&gt;time&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;O elemento &lt;code&gt;time&lt;/code&gt; foi introduzido na especificação do HTML5 em 2009. Então, em 2011 foi trocado  em favor do &lt;code&gt;data&lt;/code&gt;. Então, em seguida, o elemento foi reintroduzido e melhorado para permitir novos formatos de data/hora. A partir deste ponto você pode ver que as especificações podem ser bastante controversas.&lt;/p&gt;

&lt;p&gt;O elemento &lt;code&gt;time&lt;/code&gt; representa uma data e/ou um tempo no &lt;a href=&#34;http://en.wikipedia.org/wiki/Gregorian_calendar&#34; target=&#34;_blank&#34;&gt;calendário gregoriano&lt;/a&gt;. É um elemento inline (como &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) e deve ter uma tag de fechamento (como &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;). Quando usado na sua forma mais simples, o conteúdo do elemento deve ser uma string &lt;a href=&#34;http://www.w3.org/TR/html5/text-level-semantics.html#the-time-element&#34; target=&#34;_blank&#34;&gt;de data e/ou tempo válidas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 1º Fevereiro 2009 --&amp;gt;
&amp;lt;time&amp;gt;2009-02-01&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;No código acima, eu estou definindo uma data, especificamente 1º de fevereiro de 2009. O formato utilizado no código (aaaa-mm-dd) deve ser familiar para você se você já mexeu algum tempo com Linux, mas, como veremos mais adiante neste artigo, este não é o único formato válido.&lt;/p&gt;

&lt;p&gt;No primeiro esboço das especificações, datas precisas eram um dos poucos formatos que você podia escrever. Por exemplo, você não podia especificar uma data como &amp;#8220;Novembro 2014&amp;#8221; ou &amp;#8220;476&amp;#8221; (o início da Idade Média). Isso foi um grande problema para vários casos, como a datação de uma pintura ou de um acontecimento histórico pois não havia uma data precisa.&lt;/p&gt;

&lt;p&gt;Felizmente, esse tipo de data agora é permitida na especificação. Então, hoje nós podemos descrever um determinado mês de um ano sem um dia:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Janeiro 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-01&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;o-atributo-datetime&#34;&gt;O atributo &lt;code&gt;datetime&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;A especificação para o elemento também padronizou um atributo chamado de &lt;code&gt;datetime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ao escrevermos datas como nos formatos discutidos na seção anterior, pode funciona em alguns países/culturas, como pode não atender outros. Por exemplo, os italianos (e nós brasileiros) escrevem datas usando o formato &lt;em&gt;dd/mm/aaaa&lt;/em&gt;. Portanto, mostrar uma data em outro formato pode gerar confusão.&lt;/p&gt;

&lt;p&gt;Este problema pode ser facilmente resolvido usando o atributo &lt;code&gt;datetime&lt;/code&gt; do elemento &lt;code&gt;time&lt;/code&gt;. É um atributo opcional que contém as informações em um formato legível por uma máquina, como os observados nos exemplos anteriores, o que nos permite que possamos escrever o conteúdo do elemento da qualquer maneira que nós quisermos.&lt;/p&gt;

&lt;p&gt;Na verdade, se o atributo &lt;code&gt;datetime&lt;/code&gt; não for especificado, o conteúdo deve estar em um dos formatos de data/hora válidos, caso contrário, podemos usá-lo como quisermos. Isso é ótimo porque nos permite escrever um código assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;A próxima reunião está agendada para &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;Outubro&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;Ou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;A próxima reunião está agendada para o &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;próximo mês&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;Ambos exemplos possuem um conteúdo de data que não é legível por uma máquina de acordo com a especificação, mas são aceitáveis​​, por causa da presença do atributo &lt;code&gt;datetime&lt;/code&gt;, que &lt;em&gt;faz uso&lt;/em&gt; de um formato válido.&lt;/p&gt;

&lt;p&gt;À primeira vista, isso pode parecer estranho. Mas o conteúdo do elemento foi concebido para servir os seres humanos, não máquinas. Além disso, esse fato permite a internacionalização das datas. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Mesma mensagem anterior, só que em italiano --&amp;gt;
Il prossimo incontro è programmato per &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;il mese prossimo&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;No código acima temos a mesma mensagem anterior, só que em Italiano.&lt;/p&gt;

&lt;h2 id=&#34;o-atributo-pubdate&#34;&gt;O atributo &lt;code&gt;pubdate&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Os primeiros rascunhos da especificação definiam um atributo &lt;code&gt;pubdate&lt;/code&gt; para o elemento &lt;code&gt;time&lt;/code&gt;. Este atributo era um &lt;em&gt;booleano&lt;/em&gt; que indicava que uma determinada data era a data de publicação do elemento pai &lt;code&gt;article&lt;/code&gt; ou, em caso de ausência de elemento &lt;code&gt;article&lt;/code&gt; pai, de todo o documento.&lt;/p&gt;

&lt;p&gt;Você poderia escrever por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;article&amp;gt;
    &amp;lt;h1&amp;gt;Um título&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Esse é o conteúdo do article.&amp;lt;/p&amp;gt;
    &amp;lt;footer&amp;gt;
        &amp;lt;p&amp;gt;Artigo publicado em &amp;lt;time datetime=&#34;2014-09-05&#34; pubdate&amp;gt;05 de setembro de 2014&amp;lt;/time&amp;gt;
    &amp;lt;/footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Nesse caso, 05 de setembro de 2014 seria a data de publicação desse &lt;code&gt;article&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Eu fui um grande fã deste atributo desde que aprendi bastante sobre isso, mas, infelizmente, ele foi removido da especificação. Essa decisão criou um grande problema, porque um grande número de pessoas (inclusive eu) usam a data de publicação para julgar o frescor e a relevância de um artigo ou notícia. Embora seja verdade que você ainda possa acessar a página de um artigo e ver a data de publicação, precisamos de uma forma padrão para uma máquina de ler a data.&lt;/p&gt;

&lt;p&gt;No atual momento não existe um atributo que substitua &lt;code&gt;pubdate&lt;/code&gt;, mas você pode empregar o &lt;a href=&#34;http://schema.org/BlogPosting&#34; target=&#34;_blank&#34;&gt;BlogPosting schema&lt;/a&gt;, e especificamente o valor &lt;code&gt;datePublished&lt;/code&gt; como mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;article itemscope itemType=&#34;http://schema.org/BlogPosting&#34;&amp;gt;
        &amp;lt;h1 itemprop=&#34;headline&#34;&amp;gt;Um título&amp;lt;/h1&amp;gt;
        &amp;lt;p itemprop=&#34;articleBody&#34;&amp;gt;Conteúdo do article.&amp;lt;/p&amp;gt;
 
        &amp;lt;footer&amp;gt;
            &amp;lt;p&amp;gt;Artigo publicado em &amp;lt;time datetime=&#34;2014-09-05&#34; itemprop=&#34;datePublished&#34;&amp;gt;05 de setembro de 2014&amp;lt;/time&amp;gt;
        &amp;lt;/footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Agora que você tem um &lt;em&gt;overview&lt;/em&gt; completo do elemento &lt;code&gt;time&lt;/code&gt;, vamos ver os diversos formatos permitidos.&lt;/p&gt;

&lt;p&gt;Os formatos validos para o conteúdo do elemento &lt;code&gt;time&lt;/code&gt; na ausência do atributo &lt;code&gt;datetime&lt;/code&gt; e para esse atributo em si são descritos nos itens seguintes.&lt;/p&gt;

&lt;h2 id=&#34;um-mês-válido&#34;&gt;Um mês válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um mês específico de um ano no formato &lt;strong&gt;aaaa-mm&lt;/strong&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Setembro 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-09&amp;lt;/time&amp;gt;  
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-válida-dia-do-mês&#34;&gt;Uma data válida (dia do mês)&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando uma data precisa no formato &lt;strong&gt;aaaa-mm-dd&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de setembro de 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-09-16&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-válida-sem-ano&#34;&gt;Uma data válida sem ano&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um mês e um dia sem um ano no formato &lt;strong&gt;mm-dd&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 29 de Junho --&amp;gt;
&amp;lt;time&amp;gt;06-29&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-tempo-válido&#34;&gt;Um tempo válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um tempo sem uma data e usando o formato 24 horas, da seguinte maneira &lt;strong&gt;HH:MM[:SS[.mm]]&lt;/strong&gt; onde:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt; são horas&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt; são minutos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; são segundos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;m&lt;/strong&gt; são milisegundos&lt;/li&gt;
&lt;li&gt;Os &lt;em&gt;brackets&lt;/em&gt; indicam partes que são opcionais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um exemplo desse formato mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 horas e 10 minutos (ou 4 horas e 10 minutos pm) --&amp;gt;
&amp;lt;time datetime=&#34;16:10&#34;&amp;gt;afternoon&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-e-hora-flutuante-válida&#34;&gt;Uma data e hora &lt;em&gt;flutuante&lt;/em&gt; válida&lt;/h2&gt;

&lt;p&gt;Esse formato é apresentado na especificação do W3C, mas não na versão WHATWG. Deve ser uma data e um tempo precisos no formato &lt;strong&gt;aaaa-mm-ddTHH:MM[:SS[.mm]]&lt;/strong&gt; ou &lt;strong&gt;aaaa-mm-dd HH:MM[:SS[.mmm]]&lt;/strong&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de Setembro de 2014 às 18 horas, 20 minutos, e 30 segundos --&amp;gt;
&amp;lt;time datetime=&#34;2014-09-16T18:20:30&#34;&amp;gt;Terça-feira às 18:20&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-fuso-horário-válido&#34;&gt;Um fuso horário válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando um fuso horário. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- GMT+1 (Itália) --&amp;gt;
&amp;lt;time&amp;gt;+01:00&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-e-tempo-global-válidos&#34;&gt;Uma data e tempo global válidos&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma data completa, incluindo tempo e fuso horário. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de Setembro de 2014 às 18 horas, 20 minutos, e 30 segundos um um fuso horário de GMT+1 (como a Itália) --&amp;gt;
&amp;lt;time&amp;gt;2014-09-16&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-semana-válida&#34;&gt;Uma semana válida&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma semana do ano. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- A 18ª semana de 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-W18&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-ano-válido&#34;&gt;Um ano válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando um ano. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 2014 --&amp;gt;
&amp;lt;time datetime=&#34;2014&#34;&amp;gt;Esse ano&amp;lt;/time&amp;gt;  
&lt;/pre&gt;

&lt;h2 id=&#34;uma-string-válida-de-duração&#34;&gt;Uma &lt;em&gt;string&lt;/em&gt; válida de duração&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma duração. Uma duração pode começar com o prefixo &lt;em&gt;&amp;#8220;P&amp;#8221;&lt;/em&gt; (para &lt;em&gt;período&lt;/em&gt;) e usa &lt;em&gt;&amp;#8220;D&amp;#8221;&lt;/em&gt; para marcar os &lt;em&gt;dias&lt;/em&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Uma duração de 4 dias --&amp;gt;
&amp;lt;time datetime=&#34;P4D&#34;&amp;gt;quatro dias&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Em caso da necessidade de especificar melhor o período, após o &lt;em&gt;&amp;#8220;D&amp;#8221;&lt;/em&gt;, você pode adicionar um &lt;em&gt;&amp;#8220;T&amp;#8221;&lt;/em&gt;, que significa &lt;em&gt;tempo&lt;/em&gt;, e usar &lt;em&gt;&amp;#8220;H&amp;#8221;&lt;/em&gt; para &lt;em&gt;horas&lt;/em&gt;, &lt;em&gt;&amp;#8220;M&amp;#8221;&lt;/em&gt; para &lt;em&gt;minutos&lt;/em&gt; e &lt;em&gt;&amp;#8220;S&amp;#8221;&lt;/em&gt; para &lt;em&gt;segundos&lt;/em&gt;. Assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Uma duração de quatro dias, quatro horas e três minutos --&amp;gt;
&amp;lt;time datetime=&#34;P4DT4H3M&#34;&amp;gt;quatro dias&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Esse formato também permite a você especificar um ou mais &lt;a href=&#34;http://www.w3.org/TR/html5/infrastructure.html#duration-time-component&#34; target=&#34;_blank&#34;&gt;componentes de duração de tempo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;limitações&#34;&gt;Limitações&lt;/h2&gt;

&lt;p&gt;A especificação atual tem algumas limitações no que você pode definir com o elemento &lt;code&gt;time&lt;/code&gt;. Uma dessas limitações é que você não pode indicar intervalos de datas. Então, se você estiver escrevendo um post sobre uma conferência que dura mais de um dia, por exemplo a partir de 26 de junho de 2014 a 28 de junho de 2014, você terá que usar dois elementos &lt;code&gt;time&lt;/code&gt;. Um bom exemplo pode ser encontrado na &lt;a href=&#34;http://aurelio.audero.it/speaking&#34; target=&#34;_blank&#34;&gt;página sobre palestras do meu website&lt;/a&gt;, onde eu uso o elemento &lt;code&gt;time&lt;/code&gt;, como mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;time datetime=&#34;2014-06-28&#34;&amp;gt;26&amp;lt;span class=&#34;hidden&#34;&amp;gt;de Junho de 2014&amp;lt;/span&amp;gt;&amp;lt;/time&amp;gt;-&amp;lt;time datetime=&#34;2014-06-28&#34;&amp;gt;28 Junho 2014&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Outra limitação é que você não pode usar o elemento &lt;code&gt;time&lt;/code&gt; para representar datas antes da &lt;a href=&#34;http://en.wikipedia.org/wiki/Common_Era&#34; target=&#34;_blank&#34;&gt;Era Comum&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;suporte&#34;&gt;Suporte&lt;/h2&gt;

&lt;p&gt;Baseado no &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time&#34; target=&#34;_blank&#34;&gt;artigo no MDN&lt;/a&gt;, o suporte do elemento &lt;code&gt;time&lt;/code&gt; é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chrome 33+&lt;/li&gt;
&lt;li&gt;Firefox 22+&lt;/li&gt;
&lt;li&gt;Internet Explorer 9+&lt;/li&gt;
&lt;li&gt;Opera 22+&lt;/li&gt;
&lt;li&gt;Safari 7+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No entanto, não há muito o que se preocupar sobre navegadores antigos. Na verdade, em caso do navegador não oferecer suporte para o elemento, ele será renderizado como um elemento &lt;em&gt;inline&lt;/em&gt; desconhecido.&lt;/p&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Se você ainda não começou a usar o elemento &lt;code&gt;time&lt;/code&gt; nas suas páginas, eu espero que esse guia lhe inspire a começar.&lt;/p&gt;

&lt;p&gt;Para mais informações, aqui vão alguns links relevantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/html/wg/drafts/html/master/text-level-semantics.html#the-time-element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on W3C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://html.spec.whatwg.org/multipage/semantics.html#the-time-element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on WHATWG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.whatwg.org/wiki/Time_element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element Wiki on WHATWG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do [O HTML5 trouxe diversas coisas bacanas pra nós desenvolvedores. Uma das mais simples e que eu acho que são uma das mais legais é a questão da semântica com os novos elementos. O surgimento dessas &lt;em&gt;tags&lt;/em&gt; deixaram nossos códigos mais semânticos e legíveis, tanto por nós como pelas máquinas.&lt;/p&gt;

&lt;p&gt;Um desses elementos é o &lt;code&gt;time&lt;/code&gt;. Já havia lido sobre ele, mas nunca tinha ido muito a fundo. Esses dias encontrei um texto do &lt;a href=&#34;https://twitter.com/AurelioDeRosa&#34; target=&#34;_blank&#34;&gt;Aurelio De Rosa&lt;/a&gt; no &lt;a href=&#34;http://www.sitepoint.com/&#34; target=&#34;_blank&#34;&gt;SitePoint&lt;/a&gt; que &lt;a href=&#34;http://www.sitepoint.com/html5-time-element-guide/&#34; target=&#34;_blank&#34;&gt;explica bastante coisa&lt;/a&gt; sobre este elemento e resolvi traduzir pra gente.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;Tempo &amp;#8211; uma das poucas coisas que sabemos que é infinita. Os seres humanos, bem como animais e plantas, têm lidado com o tempo desde o início de sua existência.&lt;/p&gt;

&lt;p&gt;Na web essa necessidade não é diferente. Mesmo nesse meio, precisamos nos comunicar com outras pessoas de que alguma coisa aconteceu em um determinado ponto, em uma data específica, ou em relação a um outro tempo definido.&lt;/p&gt;

&lt;p&gt;Antes do HTML5 não tivemos nenhum elemento para marcar semanticamente uma data ou hora. Nos últimos anos, outras soluções, como os &lt;a href=&#34;http://microformats.org/&#34; target=&#34;_blank&#34;&gt;Microformats&lt;/a&gt; e &lt;a href=&#34;http://en.wikipedia.org/wiki/Microdata_%28HTML%29&#34; target=&#34;_blank&#34;&gt;Microdata&lt;/a&gt;, tentaram preencher esta lacuna para situações específicas (data de nascimento, a publicação de um livro, e assim por diante).&lt;/p&gt;

&lt;p&gt;Nesse artigo eu irei cobrir o elemento &lt;code&gt;time&lt;/code&gt; do HTML5, o que ajuda a responder à necessidade de que acabamos de discutir.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-elemento-time-1&#34;&gt;O que é o elemento &lt;code&gt;time&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;O elemento &lt;code&gt;time&lt;/code&gt; foi introduzido na especificação do HTML5 em 2009. Então, em 2011 foi trocado  em favor do &lt;code&gt;data&lt;/code&gt;. Então, em seguida, o elemento foi reintroduzido e melhorado para permitir novos formatos de data/hora. A partir deste ponto você pode ver que as especificações podem ser bastante controversas.&lt;/p&gt;

&lt;p&gt;O elemento &lt;code&gt;time&lt;/code&gt; representa uma data e/ou um tempo no &lt;a href=&#34;http://en.wikipedia.org/wiki/Gregorian_calendar&#34; target=&#34;_blank&#34;&gt;calendário gregoriano&lt;/a&gt;. É um elemento inline (como &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) e deve ter uma tag de fechamento (como &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;). Quando usado na sua forma mais simples, o conteúdo do elemento deve ser uma string &lt;a href=&#34;http://www.w3.org/TR/html5/text-level-semantics.html#the-time-element&#34; target=&#34;_blank&#34;&gt;de data e/ou tempo válidas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 1º Fevereiro 2009 --&amp;gt;
&amp;lt;time&amp;gt;2009-02-01&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;No código acima, eu estou definindo uma data, especificamente 1º de fevereiro de 2009. O formato utilizado no código (aaaa-mm-dd) deve ser familiar para você se você já mexeu algum tempo com Linux, mas, como veremos mais adiante neste artigo, este não é o único formato válido.&lt;/p&gt;

&lt;p&gt;No primeiro esboço das especificações, datas precisas eram um dos poucos formatos que você podia escrever. Por exemplo, você não podia especificar uma data como &amp;#8220;Novembro 2014&amp;#8221; ou &amp;#8220;476&amp;#8221; (o início da Idade Média). Isso foi um grande problema para vários casos, como a datação de uma pintura ou de um acontecimento histórico pois não havia uma data precisa.&lt;/p&gt;

&lt;p&gt;Felizmente, esse tipo de data agora é permitida na especificação. Então, hoje nós podemos descrever um determinado mês de um ano sem um dia:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Janeiro 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-01&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;o-atributo-datetime-1&#34;&gt;O atributo &lt;code&gt;datetime&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;A especificação para o elemento também padronizou um atributo chamado de &lt;code&gt;datetime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ao escrevermos datas como nos formatos discutidos na seção anterior, pode funciona em alguns países/culturas, como pode não atender outros. Por exemplo, os italianos (e nós brasileiros) escrevem datas usando o formato &lt;em&gt;dd/mm/aaaa&lt;/em&gt;. Portanto, mostrar uma data em outro formato pode gerar confusão.&lt;/p&gt;

&lt;p&gt;Este problema pode ser facilmente resolvido usando o atributo &lt;code&gt;datetime&lt;/code&gt; do elemento &lt;code&gt;time&lt;/code&gt;. É um atributo opcional que contém as informações em um formato legível por uma máquina, como os observados nos exemplos anteriores, o que nos permite que possamos escrever o conteúdo do elemento da qualquer maneira que nós quisermos.&lt;/p&gt;

&lt;p&gt;Na verdade, se o atributo &lt;code&gt;datetime&lt;/code&gt; não for especificado, o conteúdo deve estar em um dos formatos de data/hora válidos, caso contrário, podemos usá-lo como quisermos. Isso é ótimo porque nos permite escrever um código assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;A próxima reunião está agendada para &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;Outubro&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;Ou assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;A próxima reunião está agendada para o &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;próximo mês&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;Ambos exemplos possuem um conteúdo de data que não é legível por uma máquina de acordo com a especificação, mas são aceitáveis​​, por causa da presença do atributo &lt;code&gt;datetime&lt;/code&gt;, que &lt;em&gt;faz uso&lt;/em&gt; de um formato válido.&lt;/p&gt;

&lt;p&gt;À primeira vista, isso pode parecer estranho. Mas o conteúdo do elemento foi concebido para servir os seres humanos, não máquinas. Além disso, esse fato permite a internacionalização das datas. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Mesma mensagem anterior, só que em italiano --&amp;gt;
Il prossimo incontro è programmato per &amp;lt;time datetime=&#34;2014-10&#34;&amp;gt;il mese prossimo&amp;lt;/time&amp;gt;.
&lt;/pre&gt;

&lt;p&gt;No código acima temos a mesma mensagem anterior, só que em Italiano.&lt;/p&gt;

&lt;h2 id=&#34;o-atributo-pubdate-1&#34;&gt;O atributo &lt;code&gt;pubdate&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Os primeiros rascunhos da especificação definiam um atributo &lt;code&gt;pubdate&lt;/code&gt; para o elemento &lt;code&gt;time&lt;/code&gt;. Este atributo era um &lt;em&gt;booleano&lt;/em&gt; que indicava que uma determinada data era a data de publicação do elemento pai &lt;code&gt;article&lt;/code&gt; ou, em caso de ausência de elemento &lt;code&gt;article&lt;/code&gt; pai, de todo o documento.&lt;/p&gt;

&lt;p&gt;Você poderia escrever por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;article&amp;gt;
    &amp;lt;h1&amp;gt;Um título&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Esse é o conteúdo do article.&amp;lt;/p&amp;gt;
    &amp;lt;footer&amp;gt;
        &amp;lt;p&amp;gt;Artigo publicado em &amp;lt;time datetime=&#34;2014-09-05&#34; pubdate&amp;gt;05 de setembro de 2014&amp;lt;/time&amp;gt;
    &amp;lt;/footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Nesse caso, 05 de setembro de 2014 seria a data de publicação desse &lt;code&gt;article&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Eu fui um grande fã deste atributo desde que aprendi bastante sobre isso, mas, infelizmente, ele foi removido da especificação. Essa decisão criou um grande problema, porque um grande número de pessoas (inclusive eu) usam a data de publicação para julgar o frescor e a relevância de um artigo ou notícia. Embora seja verdade que você ainda possa acessar a página de um artigo e ver a data de publicação, precisamos de uma forma padrão para uma máquina de ler a data.&lt;/p&gt;

&lt;p&gt;No atual momento não existe um atributo que substitua &lt;code&gt;pubdate&lt;/code&gt;, mas você pode empregar o &lt;a href=&#34;http://schema.org/BlogPosting&#34; target=&#34;_blank&#34;&gt;BlogPosting schema&lt;/a&gt;, e especificamente o valor &lt;code&gt;datePublished&lt;/code&gt; como mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;article itemscope itemType=&#34;http://schema.org/BlogPosting&#34;&amp;gt;
        &amp;lt;h1 itemprop=&#34;headline&#34;&amp;gt;Um título&amp;lt;/h1&amp;gt;
        &amp;lt;p itemprop=&#34;articleBody&#34;&amp;gt;Conteúdo do article.&amp;lt;/p&amp;gt;
 
        &amp;lt;footer&amp;gt;
            &amp;lt;p&amp;gt;Artigo publicado em &amp;lt;time datetime=&#34;2014-09-05&#34; itemprop=&#34;datePublished&#34;&amp;gt;05 de setembro de 2014&amp;lt;/time&amp;gt;
        &amp;lt;/footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Agora que você tem um &lt;em&gt;overview&lt;/em&gt; completo do elemento &lt;code&gt;time&lt;/code&gt;, vamos ver os diversos formatos permitidos.&lt;/p&gt;

&lt;p&gt;Os formatos validos para o conteúdo do elemento &lt;code&gt;time&lt;/code&gt; na ausência do atributo &lt;code&gt;datetime&lt;/code&gt; e para esse atributo em si são descritos nos itens seguintes.&lt;/p&gt;

&lt;h2 id=&#34;um-mês-válido-1&#34;&gt;Um mês válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um mês específico de um ano no formato &lt;strong&gt;aaaa-mm&lt;/strong&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Setembro 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-09&amp;lt;/time&amp;gt;  
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-válida-dia-do-mês-1&#34;&gt;Uma data válida (dia do mês)&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando uma data precisa no formato &lt;strong&gt;aaaa-mm-dd&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de setembro de 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-09-16&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-válida-sem-ano-1&#34;&gt;Uma data válida sem ano&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um mês e um dia sem um ano no formato &lt;strong&gt;mm-dd&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 29 de Junho --&amp;gt;
&amp;lt;time&amp;gt;06-29&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-tempo-válido-1&#34;&gt;Um tempo válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; especificando um tempo sem uma data e usando o formato 24 horas, da seguinte maneira &lt;strong&gt;HH:MM[:SS[.mm]]&lt;/strong&gt; onde:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt; são horas&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt; são minutos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; são segundos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;m&lt;/strong&gt; são milisegundos&lt;/li&gt;
&lt;li&gt;Os &lt;em&gt;brackets&lt;/em&gt; indicam partes que são opcionais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um exemplo desse formato mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 horas e 10 minutos (ou 4 horas e 10 minutos pm) --&amp;gt;
&amp;lt;time datetime=&#34;16:10&#34;&amp;gt;afternoon&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-e-hora-flutuante-válida-1&#34;&gt;Uma data e hora &lt;em&gt;flutuante&lt;/em&gt; válida&lt;/h2&gt;

&lt;p&gt;Esse formato é apresentado na especificação do W3C, mas não na versão WHATWG. Deve ser uma data e um tempo precisos no formato &lt;strong&gt;aaaa-mm-ddTHH:MM[:SS[.mm]]&lt;/strong&gt; ou &lt;strong&gt;aaaa-mm-dd HH:MM[:SS[.mmm]]&lt;/strong&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de Setembro de 2014 às 18 horas, 20 minutos, e 30 segundos --&amp;gt;
&amp;lt;time datetime=&#34;2014-09-16T18:20:30&#34;&amp;gt;Terça-feira às 18:20&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-fuso-horário-válido-1&#34;&gt;Um fuso horário válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando um fuso horário. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- GMT+1 (Itália) --&amp;gt;
&amp;lt;time&amp;gt;+01:00&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-data-e-tempo-global-válidos-1&#34;&gt;Uma data e tempo global válidos&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma data completa, incluindo tempo e fuso horário. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 16 de Setembro de 2014 às 18 horas, 20 minutos, e 30 segundos um um fuso horário de GMT+1 (como a Itália) --&amp;gt;
&amp;lt;time&amp;gt;2014-09-16&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;uma-semana-válida-1&#34;&gt;Uma semana válida&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma semana do ano. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- A 18ª semana de 2014 --&amp;gt;
&amp;lt;time&amp;gt;2014-W18&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;h2 id=&#34;um-ano-válido-1&#34;&gt;Um ano válido&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando um ano. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- 2014 --&amp;gt;
&amp;lt;time datetime=&#34;2014&#34;&amp;gt;Esse ano&amp;lt;/time&amp;gt;  
&lt;/pre&gt;

&lt;h2 id=&#34;uma-string-válida-de-duração-1&#34;&gt;Uma &lt;em&gt;string&lt;/em&gt; válida de duração&lt;/h2&gt;

&lt;p&gt;Deve ser uma &lt;em&gt;string&lt;/em&gt; representando uma duração. Uma duração pode começar com o prefixo &lt;em&gt;&amp;#8220;P&amp;#8221;&lt;/em&gt; (para &lt;em&gt;período&lt;/em&gt;) e usa &lt;em&gt;&amp;#8220;D&amp;#8221;&lt;/em&gt; para marcar os &lt;em&gt;dias&lt;/em&gt;. Por exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Uma duração de 4 dias --&amp;gt;
&amp;lt;time datetime=&#34;P4D&#34;&amp;gt;quatro dias&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Em caso da necessidade de especificar melhor o período, após o &lt;em&gt;&amp;#8220;D&amp;#8221;&lt;/em&gt;, você pode adicionar um &lt;em&gt;&amp;#8220;T&amp;#8221;&lt;/em&gt;, que significa &lt;em&gt;tempo&lt;/em&gt;, e usar &lt;em&gt;&amp;#8220;H&amp;#8221;&lt;/em&gt; para &lt;em&gt;horas&lt;/em&gt;, &lt;em&gt;&amp;#8220;M&amp;#8221;&lt;/em&gt; para &lt;em&gt;minutos&lt;/em&gt; e &lt;em&gt;&amp;#8220;S&amp;#8221;&lt;/em&gt; para &lt;em&gt;segundos&lt;/em&gt;. Assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!-- Uma duração de quatro dias, quatro horas e três minutos --&amp;gt;
&amp;lt;time datetime=&#34;P4DT4H3M&#34;&amp;gt;quatro dias&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Esse formato também permite a você especificar um ou mais &lt;a href=&#34;http://www.w3.org/TR/html5/infrastructure.html#duration-time-component&#34; target=&#34;_blank&#34;&gt;componentes de duração de tempo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;limitações-1&#34;&gt;Limitações&lt;/h2&gt;

&lt;p&gt;A especificação atual tem algumas limitações no que você pode definir com o elemento &lt;code&gt;time&lt;/code&gt;. Uma dessas limitações é que você não pode indicar intervalos de datas. Então, se você estiver escrevendo um post sobre uma conferência que dura mais de um dia, por exemplo a partir de 26 de junho de 2014 a 28 de junho de 2014, você terá que usar dois elementos &lt;code&gt;time&lt;/code&gt;. Um bom exemplo pode ser encontrado na &lt;a href=&#34;http://aurelio.audero.it/speaking&#34; target=&#34;_blank&#34;&gt;página sobre palestras do meu website&lt;/a&gt;, onde eu uso o elemento &lt;code&gt;time&lt;/code&gt;, como mostrado abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;time datetime=&#34;2014-06-28&#34;&amp;gt;26&amp;lt;span class=&#34;hidden&#34;&amp;gt;de Junho de 2014&amp;lt;/span&amp;gt;&amp;lt;/time&amp;gt;-&amp;lt;time datetime=&#34;2014-06-28&#34;&amp;gt;28 Junho 2014&amp;lt;/time&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Outra limitação é que você não pode usar o elemento &lt;code&gt;time&lt;/code&gt; para representar datas antes da &lt;a href=&#34;http://en.wikipedia.org/wiki/Common_Era&#34; target=&#34;_blank&#34;&gt;Era Comum&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;suporte-1&#34;&gt;Suporte&lt;/h2&gt;

&lt;p&gt;Baseado no &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time&#34; target=&#34;_blank&#34;&gt;artigo no MDN&lt;/a&gt;, o suporte do elemento &lt;code&gt;time&lt;/code&gt; é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chrome 33+&lt;/li&gt;
&lt;li&gt;Firefox 22+&lt;/li&gt;
&lt;li&gt;Internet Explorer 9+&lt;/li&gt;
&lt;li&gt;Opera 22+&lt;/li&gt;
&lt;li&gt;Safari 7+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No entanto, não há muito o que se preocupar sobre navegadores antigos. Na verdade, em caso do navegador não oferecer suporte para o elemento, ele será renderizado como um elemento &lt;em&gt;inline&lt;/em&gt; desconhecido.&lt;/p&gt;

&lt;h2 id=&#34;conclusão-1&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Se você ainda não começou a usar o elemento &lt;code&gt;time&lt;/code&gt; nas suas páginas, eu espero que esse guia lhe inspire a começar.&lt;/p&gt;

&lt;p&gt;Para mais informações, aqui vão alguns links relevantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/html/wg/drafts/html/master/text-level-semantics.html#the-time-element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on W3C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://html.spec.whatwg.org/multipage/semantics.html#the-time-element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on WHATWG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element on MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.whatwg.org/wiki/Time_element&#34;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; Element Wiki on WHATWG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do]&lt;a href=&#34;http://www.sitepoint.com/html5-time-element-guide/&#34;&gt;5&lt;/a&gt; escrito pelo &lt;a href=&#34;https://twitter.com/AurelioDeRosa&#34; title=&#34;Perfil do twitter&#34;&gt;Aurelio De Rosa&lt;/a&gt; em 16 de setembro de 2014.&lt;/p&gt;

&lt;p&gt;Tradução autorizada pelo &lt;a href=&#34;http://www.sitepoint.com/&#34;&gt;SitePoint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Qualquer erro ou sugestão de melhoria na tradução, é bem vinda! &lt;img class=&#34;wp-smiley&#34; src=&#34;http://tableless.com.br/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:)&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Notifications API</title>
      <link>https://tableless.github.io/hugo-public/web-notifications-api/</link>
      <pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/web-notifications-api/</guid>
      <description>

&lt;p&gt;Se você trabalha em um site de conteúdo ou em algum produto web, uma possibilidade interessante seria fazer com que o usuário recebesse uma notificação quando houvesse uma nova notícia ou, no caso de produtos, uma notificação do próprio serviço. Com a Notifications API agora é totalmente possível.&lt;/p&gt;

&lt;p&gt;Caso você queira dar uma &lt;a href=&#34;http://www.w3.org/TR/notifications/&#34;&gt;olhada na documentação&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Outro detalhe importante: as notificações só podem ser ativadas por meio de uma interação do usuário, como clique de mouse, teclado e etc&amp;#8230; Logo, vamos usar um botão em nosso exemplo para poder ativar as notificações.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notifications should only be presented when the user has indicated they are desired; without this they could create a negative experience for the user.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;verificando-suporte&#34;&gt;Verificando suporte&lt;/h2&gt;

&lt;p&gt;A primeira coisa que nossa função precisa fazer é verificar se o browser suporta ou não notificações. Se ele não aceitar, ele fica em silêncio e pronto. No nosso exemplo ele vai logar uma mensagem no console, só para gente saber, ok?&lt;/p&gt;

&lt;h2 id=&#34;pedindo-permissão&#34;&gt;Pedindo permissão&lt;/h2&gt;

&lt;p&gt;Para não virar festa, é necessário que tenhamos a permissão do usuário para enviar as notificações via browser. Isso acontece também ao utilizar outras APIs, como a de Geolocation, por exemplo. A permissão terá três possíveis valores: um valor inicial de &lt;strong&gt;default&lt;/strong&gt;, que significa que o usuário ainda não negou nem permitiu receber notificações deste domínio. O &lt;strong&gt;denied&lt;/strong&gt; significa que o usuário negou receber e o &lt;strong&gt;granted&lt;/strong&gt; que significa que usuário aceitou receber as notificações.&lt;/p&gt;

&lt;p&gt;Agora é só fazer uma condição verificando estes estágios:&lt;/p&gt;

&lt;h2 id=&#34;preparando-a-notificação&#34;&gt;Preparando a notificação&lt;/h2&gt;

&lt;p&gt;Se o usuário nos deu permissão para fazer a notificação, nosso domínio fica listado com permissão nas configurações do browser e aí poderemos enviar notificações até que o usuário bloqueie. Agora é hora de fazer a notificação. Para tanto, iremos executar pequena função quando a permissão for &amp;#8220;granted&amp;#8221;.&lt;/p&gt;

&lt;p&gt;O código fica assim:&lt;/p&gt;

&lt;p&gt;Criamos um novo objeto &lt;strong&gt;Notification&lt;/strong&gt;, que recebe logo de cara um parâmetro que é o título da notificação. Depois há algumas opções que podemos preencher:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;body&lt;/strong&gt;: A mensagem da notificação.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt;: Identificador único da notificação. Uma string simples. Isso serve para não fazermos notificações duplicadas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onshow&lt;/strong&gt;: Evento que é disparado quando a notificação aparece.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onclick&lt;/strong&gt;: Evento quando o usuário clica na notificação.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onclose&lt;/strong&gt;: Quando o usuário fecha a notificação.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onerror&lt;/strong&gt;: Quando há algum erro na notificação e ela não pode ser mostrada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E voilá! Faça um teste aí. Aqui usei o Chrome e Safari. No meu Safari só funcionou depois que coloquei na minha pasta onde sirvo o localhost (httpdocs, public, www, sei lá o que você usa aí localmente).&lt;/p&gt;

&lt;h2 id=&#34;o-browser-pensa-assim&#34;&gt;O browser pensa assim&lt;/h2&gt;

&lt;p&gt;O Browser tem um processo definido pela especificação do W3C que é basicamente assim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se a permissão para a notificação não foi positiva, cancele qualquer pedido de notificação e retorne um evento de erro na notificação, finalizando todos os passos. É aqui que o &lt;strong&gt;onerror&lt;/strong&gt; entra em ação.&lt;/li&gt;
&lt;li&gt;Se existir uma notificação pendente na lista ou se na lista de notificações ativas existem tags iguais a notificação que está sendo chamada, rode os &lt;a href=&#34;http://www.w3.org/TR/notifications/#replace-steps&#34;&gt;passos de substituição&lt;/a&gt; e finalize as ações.&lt;/li&gt;
&lt;li&gt;Se um dispositivo autorizar, as notificações podem ser mostradas imediatamente sem limitações no número de notificações concorrentes, rodando os &lt;a href=&#34;http://www.w3.org/TR/notifications/#display-steps&#34;&gt;passos de amostra&lt;/a&gt; e finalizando as tarefas.&lt;/li&gt;
&lt;li&gt;Se o dispositivo tem limitações com o número de notificações concorrentes, chame imediatamente a plataforma alternativa que suporte enfileirar as notificações ou posicione as notificações em uma &lt;a href=&#34;http://www.w3.org/TR/notifications/#list-of-pending-notifications&#34;&gt;lista de pendências&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;É legal &lt;a href=&#34;http://www.w3.org/TR/notifications/&#34;&gt;ler a documentação do W3C&lt;/a&gt;, mesmo que boa parte das informações sobre essa API seja interessante para os fabricantes de browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mais pra estudar:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zeropush.com/blog/implementing-safari-push-notifications-in-osx-mavericks&#34;&gt;Implementing Safari push notifications in OSX Mavericks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Notification/Using_Web_Notifications&#34;&gt;Using Web Notifications &amp;#8211; MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/SafariJSProgTopics/Articles/SendingNotifications.html#//apple_ref/doc/uid/TP40001483-CH23-SW1&#34;&gt;Sending Notifications &amp;#8211; Apple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://loopinfinito.com.br/2012/08/22/web-notifications-api/&#34;&gt;Artigo sobre o mesmo assunto no LoopInfinito&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Validação de formulários com HTML5</title>
      <link>https://tableless.github.io/hugo-public/validacao-de-formularios-com-html5/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/validacao-de-formularios-com-html5/</guid>
      <description>

&lt;p&gt;O HTML5 trouxe diversas possibilidades e, principalmente facilidades para os desenvolvedores. Uma delas é relacionada a validação de formulários. O que antes era feito com algum tempo e JavaScript, hoje pode ser feito diretamente no HTML e em um tempo muito menor. Por isso, navegando pela internet achei no &lt;a href=&#34;http://www.sitepoint.com/&#34;&gt;SitePoint&lt;/a&gt; esse &lt;a href=&#34;http://www.sitepoint.com/client-side-form-validation-html5/&#34;&gt;artigo&lt;/a&gt; do &lt;a href=&#34;https://twitter.com/tech4sky&#34;&gt;&lt;span style=&#34;text-decoration: underline&#34;&gt;A&lt;/span&gt;gbonghama Collins&lt;/a&gt;, um desenvolvedor nigeriano, que escreveu de forma rápida e direta alguns pontos da validação de formulários utilizando HTML5 e, resolvi traduzi-lo para nós.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Quando contruímos aplicações web, é importante levarmos a segurança a sério, especialmente quando essa precisa coletar dados dos usuários.&lt;/p&gt;

&lt;p&gt;Não confiar em ninguém, é uma norma máxima de segurança, portanto, nunca confie que o usuário vá inserir valores corretos e válidos no formulário. Por exemplo, em um campo de e-mail, em vez de inserir um endereço de e-mail válido, o usuário pode digitar um e-mail inválido ou dados mal-intencionados, obviamente, ignorando a indicação da requisição do campo.&lt;/p&gt;

&lt;p&gt;Quando se trata de validar valores de campos de formulários, isso pode ser feito no &lt;em&gt;lado do cliente&lt;/em&gt; (navegador) e no &lt;em&gt;lado do servidor&lt;/em&gt; (usando a linguagem que preferir).&lt;/p&gt;

&lt;p&gt;No passado, validações no &lt;em&gt;client-side&lt;/em&gt; só podiam ser feitas usando JavaScript ou algumas bibliotecas de &lt;em&gt;frameworks&lt;/em&gt; (como o &lt;a href=&#34;http://jqueryvalidation.org/&#34;&gt;plugin jQuery validation&lt;/a&gt;). Mas isso está mudando, ou melhor, já mudou, porque a validação agora pode ser feita usando &lt;strong&gt;HTML5&lt;/strong&gt;, sem a necessidade de escrever um código complexo de JavaScript para isso.&lt;/p&gt;

&lt;h2 id=&#34;validação-de-formulário-com-html5&#34;&gt;Validação de formulário com HTML5&lt;/h2&gt;

&lt;p&gt;HTML5 inclui um mecanismo bastante sólido na validação de formulários com base nos atributos da tag &lt;code&gt;input&lt;/code&gt;:  &lt;em&gt;type&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt; e &lt;em&gt;require&lt;/em&gt;. Graças a esses novos atributos, você pode delegar algumas funções de verificação de dados para o navegador.&lt;/p&gt;

&lt;p&gt;Vamos examinar esse atributos para ver como eles podem nos ajudar na validação de um formulário.&lt;/p&gt;

&lt;h2 id=&#34;o-atributo-type&#34;&gt;O atributo &lt;code&gt;type&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Esse atributo indica o tipo de controle de entrada de dados como o popular &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; para manipulação de dados de texto simples.&lt;/p&gt;

&lt;p&gt;Alguns controles de formulários herdam sistemas de validação sem a necessidade de escrever qualquer código. Por exemplo, &lt;code&gt;&amp;lt;input type=&amp;quot;email&amp;quot;&amp;gt;&lt;/code&gt; valida o campo para garantir que o dado digitado seja de fato um endereço de e-mail válido. Se o campo tiver um dado inválido, o formulário não vai poder ser submetido até que esse erro seja corrigido.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-42961&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/06/validacao-email.png&#34; alt=&#34;Imagem mostrando a validação client-side em um campo de formulário&#34; width=&#34;297&#34; height=&#34;100&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/hLcxn&#34;&gt;Teste o exemplo nesse link&lt;/a&gt; digitando um endereço de e-mail válido (&lt;a href=&#34;http://codepen.io/SitePoint/pen/BFwhz&#34;&gt;Link do CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Há também o &lt;code&gt;&amp;lt;input type=&amp;quot;number&amp;quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&amp;quot;url&amp;quot;&amp;gt;&lt;/code&gt; e &lt;code&gt;&amp;lt;input type=&amp;quot;tel&amp;quot;&amp;gt;&lt;/code&gt; para validar números, URLs e telefones respectivamente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Os formatos de números de telefone variam de país para país devido à inconsistência nos tamanhos e formatos. Como resultado, a especificação não define um algoritmo para validá-los, portanto não é suportado nos navegadores web no momento da escrita.&lt;/p&gt;

&lt;p&gt;Lembre-se, a validação pode ser feita para o campo telefone em conjunto com o atributo &lt;code&gt;pattern&lt;/code&gt; que aceita uma &lt;em&gt;expressão regular&lt;/em&gt;, e que veremos a seguir.&lt;/p&gt;

&lt;h2 id=&#34;o-atributo-pattern&#34;&gt;O atributo &lt;code&gt;pattern&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;O atributo &lt;code&gt;pattern&lt;/code&gt; vai deixar os desenvolvedores felizes, principalmente aqueles que trabalham com front-end. Este atributo especifica um formato (na forma de expressão regular do JavaScript) em que o valor do campo é testado.&lt;/p&gt;

&lt;p&gt;Expressões regulares são uma linguagem usada para analisar e manipular texto. Elas são frequentemente utilizadas para executar operações complexas de &lt;em&gt;search-and-replace&lt;/em&gt;, e para garantir que os dados de texto estão corretos.&lt;/p&gt;

&lt;p&gt;Hoje em dia, as expressões regulares estão incluídas na maioria das linguagens de programação, assim como em muitas linguagens de script, editores, aplicações, bancos de dados e ferramentas de linha de comando.&lt;/p&gt;

&lt;p&gt;Expressões regulares (&lt;em&gt;RegEX&lt;/em&gt;) oferecem um poderoso, conciso e flexível meio para encontrar &lt;em&gt;string&lt;/em&gt; ou textos com caracteres particulares, palavras ou padrões de caracteres.&lt;/p&gt;

&lt;p&gt;Ao passarmos uma &lt;em&gt;string RegEX&lt;/em&gt; como valor para o atributo &lt;code&gt;pattern&lt;/code&gt;, conseguimos definir qual valor é aceitável pelo campo do formulário e também informar ao usuário de possíveis erros.&lt;/p&gt;

&lt;p&gt;Vamos ver alguns exemplos de como usar expressões regulares para validação de dados em campos de formulário.&lt;/p&gt;

&lt;h3 id=&#34;números-de-telefone&#34;&gt;Números de telefone&lt;/h3&gt;

&lt;p&gt;Como mencionado, o &lt;code&gt;input&lt;/code&gt; tel não é totalmente suportado pelos navegadores web devido à inconsistência no formato dos números de telefone em diferentes países.&lt;/p&gt;

&lt;p&gt;Por exemplo, no meu país, a Nigéria, o formato do telefone é &lt;em&gt;xxxx-xxx-xxxx&lt;/em&gt;, que seria algo como &lt;em&gt;0803-555-8205&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;RegEX&lt;/em&gt; &lt;code&gt;^\d{4}-\d{3}-\d{4}$&lt;/code&gt; corresponde ao formato, portanto, o HTML ficaria assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt;&amp;lt;label for=&#34;phonenum&#34;&amp;gt;Número de telefone:&amp;lt;/label&amp;gt;
&amp;lt;input pattern=&#34;^\d{4}-\d{3}-\d{4}$&#34; type=&#34;tel&#34;&amp;gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/vDIor&#34;&gt;Veja aqui um exemplo&lt;/a&gt;. (&lt;a href=&#34;http://codepen.io/SitePoint/pen/Eambf&#34;&gt;Link do CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;valores-alfanuméricos&#34;&gt;Valores alfanuméricos&lt;/h3&gt;

&lt;p&gt;O exemplo a seguir corresponde a caracteres alfanuméricos (combinações de letras do alfabeto e números).&lt;/p&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt;&amp;lt;input pattern=&#34;[a-zA-Z0-9]+&#34; type=&#34;text&#34;&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/Lgsdk&#34;&gt;Veja aqui um exemplo&lt;/a&gt;. (&lt;a href=&#34;http://codepen.io/SitePoint/pen/nptlf&#34;&gt;Link do CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;usuário-do-twitter&#34;&gt;Usuário do twitter&lt;/h3&gt;

&lt;p&gt;Essa expressão regular corresponde a um usuário do Twitter com o símbolo &lt;code&gt;@&lt;/code&gt;. Por exemplo: @tech3sky&lt;/p&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt;&amp;lt;input pattern=&#34;^@[A-Za-z0-9_]{1,15}$&#34; type=&#34;text&#34;&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/GBFkJ&#34;&gt;Veja aqui um exemplo&lt;/a&gt;. (&lt;a href=&#34;http://codepen.io/SitePoint/pen/nKGro&#34;&gt;Link do CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;modo-de-cor-hex&#34;&gt;Modo de cor HEX&lt;/h3&gt;

&lt;p&gt;Esse corresponde a cores hexadecimais. Por exemplo #3b5998 ou #000.&lt;/p&gt;

&lt;pre class=&#34;lang-html prettyprint linenums&#34;&gt;&amp;lt;input pattern=&#34;^#+([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$&#34; type=&#34;text&#34;&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/ifvFI&#34;&gt;Veja aqui um exemplo&lt;/a&gt;. (&lt;a href=&#34;http://codepen.io/SitePoint/pen/ejqig&#34;&gt;Link do CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;dando-algumas-dicas&#34;&gt;Dando algumas dicas&lt;/h3&gt;

&lt;p&gt;Para fornecer ao usuário uma descrição da &lt;code&gt;pattern&lt;/code&gt;, ou um erro reportando que o valor inserido está inválido, você pode utilizar o atributo &lt;code&gt;title&lt;/code&gt;, dessa maneira:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-42964&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/06/validacao-title.png&#34; alt=&#34;Imagem mostra o atributo title de um campo de formulário ao usuário deixar o mouse sob ele&#34; width=&#34;273&#34; height=&#34;100&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-42965&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/06/validacao-erro.png&#34; alt=&#34;Imagem mostra erro devido à entrada de dados inválidos em um campo de formuláriop&#34; width=&#34;269&#34; height=&#34;100&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codepen.io/raphaelfabeni/pen/ifsje&#34;&gt;Veja aqui um exemplo&lt;/a&gt;. (&lt;a href=&#34;http://codepen.io/SitePoint/pen/hbuxg&#34;&gt;Link para o CodePen original&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Se você é novo com expressões regulares, você pode &lt;a href=&#34;http://docs.webplatform.org/wiki/concepts/programming/javascript/regex&#34;&gt;consultar esse documento no WebPlatform para lhe dar uma ajuda inicial&lt;/a&gt;. No entanto, na maioria dos casos, você pode usar o Google para ajudar a procurar a expressão regular que você quer, ou até mesmo &lt;a href=&#34;https://www.google.com.br/?gfe_rd=cr&amp;amp;ei=lkiWU4S-Momk8weRlIBw#q=regular+expression+tool&#34;&gt;utilizar uma ferramenta para ajudá-lo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;o-atributo-required&#34;&gt;O atributo &lt;code&gt;required&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Esse é um atributo &lt;em&gt;booleano&lt;/em&gt; usado para indicar que um determinando campo de formulário é obrigatório para o envio do mesmo. Ao adicionar esse atributo a um campo de formulário, o navegador obriga o usuário a inserir dados naquele campo antes de enviar o formulário.&lt;/p&gt;

&lt;p&gt;Essa validação substitui a validação básica de formulário implementada com JavaScript, tornando as coisas um pouco mais úteis e nos poupando algum tempo de desenvolvimento.&lt;/p&gt;

&lt;p&gt;Exemplo: &lt;code&gt;&amp;lt;input name=&amp;quot;my_name&amp;quot; required=&amp;quot;&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; ou &lt;code&gt;&amp;lt;input name=&amp;quot;my_name&amp;quot; required=&amp;quot;required&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; para compatibilidade XHTML.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-42966&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/06/validacao-required.png&#34; alt=&#34;Imagem mostra erro da validação HTML5 em um campo de formulário que é obrigatório.&#34; width=&#34;208&#34; height=&#34;150&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Todos os links de exemplos acima utilizam o atributo &lt;code&gt;required&lt;/code&gt;, assim você pode testá-los tentando submetê-los sem digitar nada nos campos.&lt;/p&gt;

&lt;h2 id=&#34;resumo&#34;&gt;Resumo&lt;/h2&gt;

&lt;p&gt;O suporte dos navegadores para as &lt;em&gt;features&lt;/em&gt; de validação de formulários é bem grande, e você pode utilizar &lt;em&gt;polyfills&lt;/em&gt; quando necessário.&lt;/p&gt;

&lt;p&gt;Vale a pena lembrar que confiar apenas no navegador (&lt;em&gt;client-side&lt;/em&gt;) para a validação pode ser perigoso, pois isso pode ser contornado por um usuário mal-intencionado ou por &lt;em&gt;bots&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nem todos os navegadores suportam HTML5 e nem toda entrada de texto enviada para seu script virá do formulário. Isso significa que validação do lado do servidor também deve estar antes do envio dos dados para o processamento do servidor.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Texto traduzido e adaptado do &lt;a href=&#34;http://www.sitepoint.com/client-side-form-validation-html5/&#34;&gt;artigo&lt;/a&gt; escrito pelo &lt;a href=&#34;https://twitter.com/tech4sky&#34;&gt;Agbonghama Collins&lt;/a&gt; em 06 de junho de 2014. Tradução autorizada pelo autor.&lt;/p&gt;

&lt;p&gt;Dei um _fork_ em todos os exemplos do CodePen colocando o texto em português, mas mantive os links para os originais também.&lt;/p&gt;

&lt;p&gt;Qualquer erro ou sugestão de melhoria na tradução, é bem vinda! 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Components: Introdução</title>
      <link>https://tableless.github.io/hugo-public/web-components-introducao/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/web-components-introducao/</guid>
      <description>

&lt;p&gt;O que um plugin JavaScript/jQuery tem em comum com frameworks CSS como o Bootstrap? Resposta: Grandes pedaços de código HTML, CSS e Javascript.&lt;/p&gt;

&lt;p&gt;Todas as vezes que você precisa implementar um slider ou elementos de um framework que você gosta, invariavelmente você precisa copiar um grande pedaço de código HTML, CSS e Javascript para depois aplicar em seu projeto. Todos estes códigos estão sempre separados e sofrem, principalmente, efeitos do código externo do seu projeto ou de outros plugins. Muitas vezes você deve ter tido algum problema de conflito entre códigos do plugin e do seu projeto. Isso gera retrabalho e outros problemas.&lt;/p&gt;

&lt;p&gt;Mesmo se você cria seus próprios plugins ou frameworks de CSS, você ainda precisa tomar uma série de cuidados para que o código não sofra nenhum conflito e que seja o mais flexível e reutilizável possível. Mas acredite, mesmo que você faça um trabalho perfeito, alguma coisa sempre foge do controle.&lt;/p&gt;

&lt;p&gt;Os Web Components podem ajudar nesses problemas e em muitos outros.&lt;/p&gt;

&lt;h2 id=&#34;o-que-são-os-web-components&#34;&gt;O que são os Web Components&lt;/h2&gt;

&lt;p&gt;A ideia de criar componentes na web não é nova. A cada novo framework ou a cada novo plugin, tentamos fazer isso. O problema é que um componente só é um componente se ele pode ser reutilizado, diversas vezes, em qualquer lugar do projeto, sem sofrer alterações acidentais por códigos externos e também sem modificar outros elementos. É aí que entram os Web Components.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The component model for the Web (also known as Web Components) consists of four pieces designed to be used together to let web application authors define widgets with a level of visual richness not possible with CSS alone, and ease of composition and reuse not possible with script libraries today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Os Web Components são por enquanto um grupo de 5 especificações, que formam o guarda-chuva dos Web Components, são eles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.w3.org/TR/components-intro/#template-section&#34;&gt;Templates&lt;/a&gt;&lt;/strong&gt;: definem pedaços de código que são totalmente inertes à página até que seu Javascript os ative.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.w3.org/TR/components-intro/#decorator-section&#34;&gt;Decorators&lt;/a&gt;&lt;/strong&gt;: aplicam os templates baseando-se em seletores para criar mudanças visuais ricas e comportamentos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.w3.org/TR/custom-elements/&#34;&gt;Custom Elements&lt;/a&gt;&lt;/strong&gt;: são elementos customizados, com nomes e scripts criados por você.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.w3.org/TR/shadow-dom/&#34;&gt;Shadow DOM&lt;/a&gt;&lt;/strong&gt;: é onde uma parte do código do seu elemento é encapsulada e escondida pelo browser, ou seja, não é visível no código normal do DOM, mas que monta todo seu componente &amp;#8220;por baixo dos panos&amp;#8221;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.w3.org/TR/2013/WD-html-imports-20130514/&#34;&gt;Imports&lt;/a&gt;&lt;/strong&gt;: definem quais elementos customizados são empacotados e lidos como um recurso.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cada uma dessas partes são individualmente úteis, mas se tornam realmente importantes quando combinadas. Assim você consegue fazer um componente totalmente funcional, com o visual e o código customizados.&lt;/p&gt;

&lt;p&gt;Para facilitar o entendimento, aqui vai um exemplo bem tosco: pense que a independência dos web components funcionam como um iframe. O Facebook, Twitter e Google+ usam iframes para colocar seus botões nas páginas. Sendo um iframe eles podem usar o Javascript, o CSS e o HTML customizados sem que o código da sua página quebre os botões deles e vice-versa.&lt;/p&gt;

&lt;p&gt;Você precisa entender dois conceitos essenciais e importantes dentro dos Web Components: Shadow DOM e Custom Elements.&lt;/p&gt;

&lt;h2 id=&#34;custom-elements&#34;&gt;Custom Elements&lt;/h2&gt;

&lt;p&gt;E se você pudesse criar suas próprias tags?&lt;/p&gt;

&lt;p&gt;O HTML tem muitos elementos que usamos todos os dias. O problema é que a Web cresceu demais e a verdade é que não temos mais elementos que cobrem todas as nossas necessidades. Por exemplo: como você faz uma modal? Como você faz tabs? Como você faz um collapse? Não existem elementos no HTML que criam estes módulos e suas interações. Por isso você usa listas, divs, parágrafos, títulos e o que der na telha para fazer estes elementos funcionarem.&lt;/p&gt;

&lt;p&gt;Quem precisa lidar com interfaces pesadas de aplicações baseadas em web, como por exemplo um tocador de músicas online, tipo o Spotify, Rdio e Deezer, sente esse problema todos os dias. Na verdade, para criar qualquer aplicação baseada em web, você vai precisar de uma boa dose criatividade usando os elementos existentes do HTML para produzir o layout que foi planejado. Muitas vezes o código vira um punhado de DIVs e SPANs. Aí eu te pergunto: nesses casos a semântica é importante? Quando você ler logo abaixo sobre Shadow DOM, você vai entender que a semântica pode ser bem surrada em ambientes assim. Ela se torna tão subjetiva que pode fazer você pensar que ela realmente não existe.&lt;/p&gt;

&lt;p&gt;Voltando ao assunto: como fazer seus próprios elementos?&lt;/p&gt;

&lt;p&gt;Quando criarmos um elemento, precisamos que ele herde as mesmas possibilidades que os elementos normais do HTML. Isso quer dizer que você precisa poder formatar com CSS e também manipular com Javascript.&lt;/p&gt;

&lt;p&gt;Quando criarmos o elemento, precisamos fazer com que o browser reconheça esse elemento. No Javascript, você usará o &lt;code&gt;documento.registerElement()&lt;/code&gt; para fazer isso:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var yourElement = document.registerElement(&#39;nome-elemento&#39;);
&lt;/pre&gt;

&lt;p&gt;O argumento do &lt;strong&gt;document.registerElement()&lt;/strong&gt; define o nome do seu elemento, da sua nova tag. O nome sempre tem que ter um traço (-). Se você quiser, o nome pode ter mais do que duas palavras também, tipo: &lt;list-combo-select&gt;. Agora, um nome assim: &lt;list&gt; ou &lt;list_combo&gt; não são válidos. Essa restrição permite que o parser do browser entenda o que é um elemento customizado dos elementos default do HTML, garantindo compatibilidades futuras.&lt;/p&gt;

&lt;p&gt;Para que um elemento seja realmente um elemento, além de registrar o elemento no browser como fizemos acima, nós precisamos que ele herde as características de funcionamento que o Javascript tem sobre um elemento HTML convencional. Difícil de entender né? Mas pense assim: você quer que seu elemento possa ser manipulado como um div, p, img e etc. Para isso você vai criar via javascript um objeto, que herda as características do elemento HTML e o prototype Javascript:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var yourElement = document.registerElement(&#39;seu-elemento&#39;, {
  prototype: Object.create(HTMLButtonElement.prototype),
  extends: &#39;button&#39; // Define que o elemento button pode herdar as características do seu elemento.
});
&lt;/pre&gt;

&lt;p&gt;Isso faz com que você possa adicionar eventos de click, hover e etc no seu elemento customizado.&lt;/p&gt;

&lt;p&gt;Não quero me estender agora, mas haverá outro artigo explicando como criar os elementos, inclusive usando as bibliotecas X-Tag ou o Polymer para ajudar.&lt;/p&gt;

&lt;h2 id=&#34;shadow-dom&#34;&gt;Shadow DOM&lt;/h2&gt;

&lt;p&gt;O Shadow DOM é uma parte interessante e importante do processo.&lt;/p&gt;

&lt;p&gt;Quando você liga um carro, você não pensa no processo que faz tudo aquilo funcionar. Na verdade só nos preocupamos no que acontece debaixo do capô se halgo dá errado quando giramos a chave. A mesma coisa acontece com as tags do HTML. Pare um momento e pense: do que é feito o input de texto?&lt;/p&gt;

&lt;p&gt;&lt;input type=&#34;text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Quais os elementos que o browser usa para montá-lo na tela?&lt;/p&gt;

&lt;p&gt;E se eu dissesse que ele é basicamente um elemento DIV?&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;input type=&#34;text&#34;&amp;gt;
  &amp;lt;div id=&#34;inner-editor&#34;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/input&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Isso se chama &lt;strong&gt;Shadow DOM&lt;/strong&gt;. Para você entender melhor, veja como é feito a tag de Vídeo:&lt;/p&gt;

&lt;p&gt;Essa é a versão original, que você já deve conhecer:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;video controls poster=&#34;poster.png&#34;&amp;gt;
    &amp;lt;source src=&#34;video.webm&#34; type=&#39;video/webm;codecs=&#34;vp8, vorbis&#34;&#39; /&amp;gt;
    &amp;lt;source src=&#34;video.mp4&#34; type=&#39;video/mp4;codecs=&#34;avc1.42E01E, mp4a.40.2&#34;&#39; /&amp;gt;
    &amp;lt;track src=&#34;video.vtt&#34; label=&#34;Portuguese subtitles&#34; kind=&#34;subtitles&#34; srclang=&#34;pt-br&#34; default&amp;gt;&amp;lt;/track&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Essa é a versão escondida:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;video controls poster=&#34;poster.png&#34;&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;div style=&#34;display: none&#34;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type=&#34;button&#34;&amp;gt;
                &amp;lt;input type=&#34;range&#34; step=&#34;any&#34; max=&#34;70.112&#34;&amp;gt;
                &amp;lt;div style=&#34;display: none;&#34;&amp;gt;0:00&amp;lt;/div&amp;gt;
                &amp;lt;div&amp;gt;1:10&amp;lt;/div&amp;gt;
                &amp;lt;input type=&#34;button&#34;&amp;gt;
                &amp;lt;input type=&#34;range&#34; step=&#34;any&#34; max=&#34;1&#34;&amp;gt;
                &amp;lt;input type=&#34;button&#34;&amp;gt;
                &amp;lt;input type=&#34;button&#34;&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

  &amp;lt;source src=&#34;video.webm&#34; type=&#39;video/webm;codecs=&#34;vp8, vorbis&#34;&#39; /&amp;gt;
  &amp;lt;source src=&#34;video.mp4&#34; type=&#39;video/mp4;codecs=&#34;avc1.42E01E, mp4a.40.2&#34;&#39; /&amp;gt;
  &amp;lt;track src=&#34;video.vtt&#34; label=&#34;Portuguese subtitles&#34; kind=&#34;subtitles&#34; srclang=&#34;pt-br&#34; default&amp;gt;&amp;lt;/track&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Pois é. Não confie em ninguém!&lt;/p&gt;

&lt;p&gt;É assim, com esse código nada elegante, que o browser monta os elementos. Esse código parece ser ruim e você pode levar um susto quando começar a fuçar códigos de outros elementos, mas não é errado e pode mudar de browser para browser. Lembre-se que ali é um DOM escondido, o que importa não é a beleza do código, mas a funcionalidade.&lt;/p&gt;

&lt;p&gt;E não, você não precisa escrever um código assim pra criar seus próprios componentes.&lt;/p&gt;

&lt;p&gt;Pense em como fazer um slider de imagem. Um código de slider geralmente é algo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;div id=&#34;carousel-example-generic&#34; class=&#34;carousel slide&#34; data-ride=&#34;carousel&#34;&amp;gt;
  &amp;lt;!-- Indicators --&amp;gt;
  &amp;lt;ol class=&#34;carousel-indicators&#34;&amp;gt;
    &amp;lt;li data-target=&#34;#carousel-example-generic&#34; data-slide-to=&#34;0&#34; class=&#34;active&#34;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li data-target=&#34;#carousel-example-generic&#34; data-slide-to=&#34;1&#34;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li data-target=&#34;#carousel-example-generic&#34; data-slide-to=&#34;2&#34;&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;

  &amp;lt;!-- Wrapper for slides --&amp;gt;
  &amp;lt;div class=&#34;carousel-inner&#34;&amp;gt;
    &amp;lt;div class=&#34;item active&#34;&amp;gt;
      &amp;lt;img src=&#34;...&#34; alt=&#34;...&#34;&amp;gt;
      &amp;lt;div class=&#34;carousel-caption&#34;&amp;gt;
        ...
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    ...
  &amp;lt;/div&amp;gt;

  &amp;lt;!-- Controls --&amp;gt;
  &amp;lt;a class=&#34;left carousel-control&#34; href=&#34;#carousel-example-generic&#34; data-slide=&#34;prev&#34;&amp;gt;
    &amp;lt;span class=&#34;glyphicon glyphicon-chevron-left&#34;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/a&amp;gt;
  &amp;lt;a class=&#34;right carousel-control&#34; href=&#34;#carousel-example-generic&#34; data-slide=&#34;next&#34;&amp;gt;
    &amp;lt;span class=&#34;glyphicon glyphicon-chevron-right&#34;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Imagine fazer algo assim:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;img-slider&amp;gt;
  &amp;lt;img src=&#34;./image1.jpg&#34; alt=&#34;a dramatic sunset&#34;&amp;gt;
  &amp;lt;img src=&#34;./image2.jpg&#34; alt=&#34;a rock arch&#34;&amp;gt;
  &amp;lt;img src=&#34;./image3.jpg&#34; alt=&#34;some neat grooves&#34;&amp;gt;
  &amp;lt;img src=&#34;./image4.jpg&#34; alt=&#34;an interesting rock&#34;&amp;gt;
&amp;lt;/img-slider&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Entende? Toda a parafernália que fica atrapalhando e que provavelmente você nem vai mexer, fica escondida. As imagens, que são o que realmente importa, estão logo ali.&lt;/p&gt;

&lt;h3 id=&#34;como-mostrar-o-shadow-dom&#34;&gt;Como mostrar o Shadow DOM?&lt;/h3&gt;

&lt;p&gt;Se você não encontrar no seu Chrome, tente baixar o &lt;a href=&#34;http://www.google.com/intl/pt-BR/chrome/browser/canary.html&#34;&gt;Chrome Canary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Abra o Developer Tools, clique no ícone da engrenagem para abrir a tela de configurações. Procure a opção, habilite e pronto, você já tem super poderes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tableless.com.br/wp-content/uploads/2014/05/shadow-dom-chrome-config.png&#34; alt=&#34;shadow-dom-chrome-config&#34; class=&#34;alignnone size-full wp-image-42548&#34; srcset=&#34;uploads/2014/05/shadow-dom-chrome-config.png 2372w, uploads/2014/05/shadow-dom-chrome-config-400x165.png 400w&#34; sizes=&#34;(max-width: 2372px) 100vw, 2372px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;suporte&#34;&gt;Suporte&lt;/h2&gt;

&lt;p&gt;E o suporte dos browsers? Cara, até que é ótimo. &lt;a href=&#34;http://jonrimmer.github.io/are-we-componentized-yet/&#34;&gt;Veja essa tabela&lt;/a&gt;. Tirando o Safari e o IE que ainda não tem suporte algum, os outros browsers tem problemas apenas com o HTML Imports. Owl, Yeah!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.polymer-project.org/&#34;&gt;Polymer&lt;/a&gt; é uma biblioteca construída em cima de Web Components e projetada para fazer com que os navegadores modernos entendam os Web Components.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://x-tags.org/&#34;&gt;X-Tag&lt;/a&gt; é uma biblioteca Javascript pequenininha, criada e mantida pela Mozilla, que traz as capacidades do Custom elements do Web Components para todos os browsers modernos.&lt;/p&gt;

&lt;h2 id=&#34;slides-e-leituras-obrigatórias&#34;&gt;Slides e leituras obrigatórias&lt;/h2&gt;

&lt;p&gt;Este artigo foi uma introdução para você começar a se interessar e a pesquisar sobre Web Components. Existem milhares de sites por aí que eu aconselho você ler. Os links estão logo abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webcomponents.org/&#34;&gt;webcomponents.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2014/03/04/introduction-to-custom-elements/&#34;&gt;A Detailed Introduction To Custom Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/en/tutorials/webcomponents/customelements/?redirect_from_locale=pt&#34;&gt;About Custom Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://css-tricks.com/modular-future-web-components/&#34;&gt;A Guide to Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://robdodson.me/blog/2013/03/17/why-web-components/&#34;&gt;Why Web Components?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/components-intro/#introduction&#34;&gt;Documentação do W3C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Estilizar e formatar placeholder de inputs</title>
      <link>https://tableless.github.io/hugo-public/estilizar-e-formatar-placeholder-de-inputs/</link>
      <pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/estilizar-e-formatar-placeholder-de-inputs/</guid>
      <description>&lt;p&gt;O atributo &lt;strong&gt;placeholder&lt;/strong&gt; foi uma das maravilhas herdadas do HTML5. Eu me lembro de todas as gambiarras em Javascript e CSS que fazíamos para simular o que o atributo placeholder faz tão facilmente.&lt;/p&gt;

&lt;p&gt;O atributo placeholder é uma pequena dica, uma pequena frase, uma palavra, que tem o intuito de ajudar o usuário a entender como ele deve preencher aquele formulário. Entenda que e o placeholder NÃO deve ser usado como alternativa para a LABEL. Ou seja, aquela prática de colocar um &lt;strong&gt;display: none&lt;/strong&gt; nas labels e deixar apenas o placeholder visível não é legal. Também não é aconselhável ter uma descrição gigante. Para isso, use o atributo TITLE.&lt;/p&gt;

&lt;p&gt;Como esse atributo simplesmente insere um texto contextual no campo de formulário, muitos devs acham que não há maneira de formatá-lo, trocando cor, tamanho, font e etc&amp;#8230; Mas há! E é bem simples. Infelizmente você ainda precisa usar prefixos para funcionar, mas logo mais, quem sabe, não será mais necessário.&lt;/p&gt;

&lt;p&gt;Para formatar o atributo placeholder dos campos de formulários e textareas, basta manipular a pseudo-class ::placeholder. Não me perguntem por que é uma pseudo classe não e um pseudo elemento. Mas isso é só um detalhe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dica:&lt;/strong&gt; Eu poderia ter agrupado os seletores pra facilitar a leitura, o problema é que se um dos browsers não reconhece um dos seletores, ele acabam invalidando o grupo inteiro, aí nada funcionaria. Nesse caso a solução é colocar separado mesmo.&lt;/p&gt;

&lt;p&gt;Veja a &lt;a href=&#34;http://developers.whatwg.org/common-input-element-attributes.html#the-placeholder-attribute&#34;&gt;documentação oficial&lt;/a&gt; direto do WHATWG.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criando efeito de fadeIn e fadeOut com javascript puro</title>
      <link>https://tableless.github.io/hugo-public/criando-efeito-de-fadein-e-fadeout-com-javascript-puro/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/criando-efeito-de-fadein-e-fadeout-com-javascript-puro/</guid>
      <description>

&lt;p&gt;O uso de bibliotecas JavaScript vem crescendo muito atualmente, mas às vezes utilizamos certas bibliotecas (como a jQuery) para simples tarefas, que poderíamos fazer apenas com JavaScript.&lt;/p&gt;

&lt;p&gt;Vejamos na &lt;strong&gt;Listagem 1&lt;/strong&gt; o que acontece muito nas páginas da web de hoje.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 1:&lt;/strong&gt; Pegando o atributo src de uma imagem com jQuery&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#34;#imagem&#34;).attr(&#34;src&#34;);&lt;/pre&gt;

&lt;p&gt;Poderíamos usar simplesmente o JavaScript para ter o mesmo resultado usando o código da &lt;strong&gt;Listagem 2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 2:&lt;/strong&gt; Pegando o atributo src de uma imagem com JavaScript&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;document.getElementById(&#34;imagem&#34;).src;&lt;/pre&gt;

&lt;p&gt;A intenção do artigo não é desencorajar ninguém a deixar de usar jQuery, mas para quem quer ser um bom front end, um ninja front end, é bom começar a estudar o JavaScript puro. Muitos desanimam ao estudar essa tecnologia por causa da maneira um pouco &amp;#8220;diferente&amp;#8221; de obter um efeito legal e com um código curto, como acontece com o jQuery, mas com o JavaScript puro dá para se ter efeitos, digamos “muito show”.&lt;/p&gt;

&lt;p&gt;Muito bem, chega de conversa, vamos dar inicio ao nosso treinamento “ninja”&amp;#8230;&lt;/p&gt;

&lt;h2 id=&#34;estrutura-html-e-css&#34;&gt;Estrutura HTML e CSS&lt;/h2&gt;

&lt;p&gt;Vamos criar um pequeno exemplo para mostrar os efeitos fadeIn e fadeOut. Primeiro vamos elaborar nossa estrutura HTML, criando uma div que irá sofrer o efeitos através de dois botões.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dica:&lt;/strong&gt; &lt;em&gt;Antes de criar algum efeito com javascript ou qualquer outra biblioteca javascript, sempre seguimos estas três ordens: Primeiro construimos a estrutura html, depois elaboramos o nosso estilo com o css, e por último, começamos a brincar com as nossas linhas de códigos javascript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Observe a &lt;strong&gt;Listagem 3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 3:&lt;/strong&gt; Estrutura html5 simples&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&#34;pr-br&#34;&amp;gt;
 &amp;lt;head&amp;gt;
   &amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;
   &amp;lt;title&amp;gt;Meu primeiro efeito ninja em js&amp;lt;/title&amp;gt;
 &amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;section id=&#34;objeto&#34;&amp;gt;&amp;lt;/section&amp;gt;
    &amp;lt;button id=&#34;fadeIn&#34;&amp;gt;&amp;lt;/button&amp;gt;
    &amp;lt;button id=&#34;fadeOut&#34;&amp;gt;&amp;lt;/button&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;A marcação html é simples, temos uma tag section, que sofrerá as mudanças de opacidade, determinadas como fadeIn e fadeOut. Temos também dois botões qualquer, que serão responsáveis por chamar as funções de acordo com seu “id”.&lt;/p&gt;

&lt;p&gt;Em seguida, aplicamos nosso style,conforme a &lt;strong&gt;Listagem 4&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 4:&lt;/strong&gt; Estilo CSS&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;&amp;lt;style type=&#34;text/css&#34;&amp;gt;
   section {
      width: 150px;
      height: 100px;
      background: red;
   }
&amp;lt;/style&amp;gt;&lt;/pre&gt;

&lt;p&gt;Note que só estilizamos a tag section, pois o estilo do botão não é relevante neste exemplo, só é necessário uma cor de fundo na section para que possamos visualizar ela sumindo e aparecendo.&lt;/p&gt;

&lt;p&gt;agora iremos aplicar a função dos botões quando o documento for carregado. Observe a &lt;strong&gt;Listagem 5&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 5:&lt;/strong&gt; Anexando a função de clique nos botões quando o documento for lido&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34;&amp;gt;
 window.onload = function(){
    var objeto = document.getElementById(&#39;objeto&#39;);
    document.getElementById(&#34;fadeIn&#34;).onclick = function(){
    fadeIn(objeto,1);
    }
   document.getElementById(&#34;fadeOut&#34;).onclick = function(){
    fadeOut(objeto,1);
   }
 }
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;Nestas linhas de códigos acima, anexamos a função de clique para os botões e, de acordo com seu “id”, chamamos a função de fadeIn e/ou fadeOut&lt;/p&gt;

&lt;p&gt;Em seguida, criaremos as funções fadeIn (que servirá para determinar quando elemento irá aparecer) e fadeOut (para determinar quando o elemento irá sumir), conforme as &lt;strong&gt;Listagens 6&lt;/strong&gt; e &lt;strong&gt;7&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 6:&lt;/strong&gt; Função  fadeIn&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function fadeIn(element,time){
   processa(element,time,0,100);
 }&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Listagem 7: &lt;/strong&gt;Função fadeOut&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function fadeOut(element,time){
  processa(element,time,100,0);
 }&lt;/pre&gt;

&lt;p&gt;Estas funções tem como parâmetros element, time, intial, e end, onde:&lt;/p&gt;

&lt;p&gt;·        element &amp;#8211; Elemento que sofrerá o fadeIn ou fadeOut;&lt;/p&gt;

&lt;p&gt;·        time &amp;#8211; Tempo que o fade acontecerá (neste caso, um segundo);&lt;/p&gt;

&lt;p&gt;·        initial &amp;#8211; Estado inicial do elemento;&lt;/p&gt;

&lt;p&gt;·        end &amp;#8211; Estado final do elemento.&lt;/p&gt;

&lt;p&gt;Agora criaremos uma função que será responsável por processar os efeitos de fadeIn e fadeOut, conforme abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;function processa(element,time,initial,end){
    //cógigo
}&lt;/pre&gt;

&lt;p&gt;No escopo da nossa função, declararemos uma variável responsável pelo incremento (no caso do fadeIn) ou decremento (no caso do fadeOut) do efeito. Esta variável será a chave principal para setar o efeito na opacidade do nosso elemento. Observe a &lt;strong&gt;Listagem 8.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 8&lt;/strong&gt;. Criação da variável de incremento da função processa&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;if(initial == 0){
  increment = 2;
   element.style.display = &#34;block&#34;;
}else {
  increment = -2;
}&lt;/pre&gt;

&lt;p&gt;Se o estado inicial do elemento for igual a zero, declaramos o incremento como positivo para que o elemento possa aparecer, colocando-o com um display:block. Mas se o estado inicial do elemento for diferente de zero, então declaramos o incremento como negativo, assumindo o efeito de fadeOut&lt;/p&gt;

&lt;p&gt;Agora iremos declarar a opacidade inicial do nosso elemento, declarando uma variável cujo nome será &amp;#8220;opc&amp;#8221; que irá “sofrer” as mudanças de incremento ou decremento. Observe a &lt;strong&gt;Listagem 9.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 9:&lt;/strong&gt; declaração da variável de opacidade&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;if(initial == 0){
  increment = 2;
   element.style.display = &#34;block&#34;;
}else {
  increment = -2;
}
opc = initial;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Obs:&lt;/strong&gt; Declaramos a variável “opc”, porque iremos precisar do valor “initial” para fazer uma verificação, em um loop mais na frente, mas também iremos precisar que o valor da variável “initial” também mude para que possamos aplicar as mudanças na tag section&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agora iremos criar um intervalo para simular o efeito fadeIn / fadeOut no nosso elemento. Este intervalo irá se repetir em um intervalo de 10 milissegundos, pois queremos que aconteça o fade em um segundo (1 * 10) == (time * 10), conforme a &lt;strong&gt;Listagem 10.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 10:&lt;/strong&gt; Intervalo responsável por aplicar efeito de fadeIn ou fadeOut&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;intervalo = setInterval(function(){
},time * 10);&lt;/pre&gt;

&lt;p&gt;Dentro do nosso intervalo verificaremos se a variável opc chegou ao estado final, ou seja, se o intervalo completar o efeito de fade limpamos o mesmo, pois ele não será mais necessário. Observe a &lt;strong&gt;Listagem 11.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 11:&lt;/strong&gt; Verificando se o fade foi completado&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;intervalo = setInterval(function(){
  if((opc == end)){
    if(end == 0){
    element.style.display = &#34;none&#34;;
    }
    clearInterval(intervalo);
  }
},time * 10);&lt;/pre&gt;

&lt;p&gt;Note que foi feita uma nova verificação para ver se o estado final do elemento é zero. Se está em zero, então teremos que esconde-lo para que não ocupe espaço na tela.&lt;/p&gt;

&lt;p&gt;Logo após a verificação, setaremos a opacidade do nosso elemento, conforme a &lt;strong&gt;Listagem 12.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listagem 12:&lt;/strong&gt; setando a opacidade do elemento&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;}else {
  opc += increment;
  element.style.opacity = opc/100;
  element.style.filter = &#34;alpha(opacity=&#34;+opc+&#34;)&#34;;
}&lt;/pre&gt;

&lt;p&gt;Os comandos dentro deste bloco serão executados a cada 10 milissegundos. Na linha “opc += increment;”, a opacidade incrementa ou decrementa. Por exemplo, se a opacidade for 0, o incremento é positivo e teremos a seguinte repetição:&lt;/p&gt;

&lt;p&gt;0 + 2= 2 (na primeira execução do loop);&lt;/p&gt;

&lt;p&gt;2 + 2 = 4 (na segunda execução do loop);&lt;/p&gt;

&lt;p&gt;(&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;)&lt;/p&gt;

&lt;p&gt;98 + 2 = 100 (na ultima execução do loop);&lt;/p&gt;

&lt;p&gt;Mas se a variável opc for  maior que  0 (no caso 100), significa que o incremento é positivo, pois no topo do escopo da nossa função processa(), temos uma verificação do parâmetro “initial”, e se initial não for igual a zero (que declaramos a variável opc = initial) a variável increment é negativa. Logo teremos a seguinte função:&lt;/p&gt;

&lt;p&gt;100 &amp;#8211; 2= 98 (na primeira execução do loop);&lt;/p&gt;

&lt;p&gt;98 &amp;#8211; 2 = 96 (na segunda execução do loop);&lt;/p&gt;

&lt;p&gt;(&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;)&lt;/p&gt;

&lt;p&gt;98 &amp;#8211; 2 = 100 (na ultima execução do loop);&lt;/p&gt;

&lt;p&gt;Já na linha “element.style.opacity = opc/100;” seta a opacidade no elemento.&lt;/p&gt;

&lt;p&gt;E quem disse que o nosso efeito não é cross browser? Esta linha abaixo faz o nosso efeito de opacidade funcionar no ie8 até o ie6,&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;Element.style.filter = “alpha(opacity=”+opc+”)”;&lt;/pre&gt;

&lt;p&gt;O Internet Explorer do 8 abaixo, interpreta a propriedade filter:alpha(opacity=100) como opacity:1;&lt;/p&gt;

&lt;p&gt;Disponibilizei o código no github, &lt;a href=&#34;https://github.com/clovisdasilvaneto/fadein-fadeout-com-javascript-puro&#34; title=&#34;código do post&#34;&gt;clique aqui.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Um forte abraço e até a próxima.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Storage  – HTML5</title>
      <link>https://tableless.github.io/hugo-public/web-storage-html5/</link>
      <pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/web-storage-html5/</guid>
      <description>

&lt;h2 id=&#34;cookies-8211-o-passado&#34;&gt;Cookies &amp;#8211; o passado&lt;/h2&gt;

&lt;p&gt;Para entendermos a vantagem obtida na utilização do WebStorage vamos compreender como uma aplicação trabalha(va) com cookies.&lt;/p&gt;

&lt;p&gt;Os cookies são inseridos no cabeçalho HTTP, sendo assim, sua performance pode ser comprometida. E estando as informações no cabeçalho HTTP, podemos nos perguntar: o quão protegidas elas estão?&lt;/p&gt;

&lt;p&gt;Outro desafio que se apresenta ao se trabalhar cookies é a capacidade de armazenamento: 4kB por cookies vezes no máximo 20 cookies é igual a capacidade de 80 kB. Essa restrição de capacidade por si só já é um problema, mas ela acarreta outro dificuldade, o gerenciamento destes cookies.&lt;/p&gt;

&lt;p&gt;Pense que em uma aplicação que real seria muito útil armazenar mais do que 80 kB, para fazer isso com cookies seria necessário estabelecer um controle de validade dos cookies, essa seria uma maneira muito inteligente de utilizar cookies &amp;#8211; afinal ele precisar estar armazenado somente enquanto for necessário, mas o trabalho para controlar as datas de validade dos cookies seria um trabalho que requisitaria calcular seus tempos de validade, mais código.&lt;/p&gt;

&lt;h2 id=&#34;webstorage-8211-o-presente-e-suas-vantagens&#34;&gt;WebStorage &amp;#8211; o presente e suas vantagens.&lt;/h2&gt;

&lt;p&gt;As limitações dos cookies já foram citadas, mas o WebStorage é melhor no itens citados? SIM.&lt;/p&gt;

&lt;p&gt;Vamos ver como o WebStorage é melhor.&lt;/p&gt;

&lt;p&gt;Mas em primeiro lugar vamos falar de segurança.&lt;/p&gt;

&lt;p&gt;Os pares de chave e valor gravados pela WebStorage não podem ser acessados por outros subdomínios. Isso garante que caso você use o WebStorage para gravar dados com sigilo. Isso faz com que ele não corra o risco de ser acessado por outro domínio.&lt;/p&gt;

&lt;p&gt;Sobre a capacidade de armazenamento, temos o suficiente para trabalharmos bem. A API permite armazenamentos entre 2,5 MB até 10 MB. Esse espaço é suficiente para podermos trabalhar com folga, principalmente se compararmos com a capacidade permitida para se trabalhar com os cookies.&lt;/p&gt;

&lt;p&gt;Com este espaço disponível talvez você não precise se preocupar com o controle de validade dos dados. Mas caso você queira controlar o período em que os dados estarão gravados no navegador do usuário, você pode fazer isto. Para tanto, temos que entender o desdobramento do conceito do WebStorage: localStorage e sessionStorage.&lt;/p&gt;

&lt;p&gt;Este último manterá os dados salvos enquanto o navegador estiver aberto. Isso é muito útil, pois nem sempre queremos que os dados estejam sempre disponíveis. Enquanto o localStorage manterá o dado gravado até que ele seja removido diretamente, você poderá fechar o navegador, reiniciar o computador e os dados ainda estarão lá.&lt;/p&gt;

&lt;h2 id=&#34;exemplo&#34;&gt;Exemplo&lt;/h2&gt;

&lt;p&gt;Não há melhor maneira de aprender do que fazendo. Vamos construir uma calculadora em que seja possível salvarmos os valores calculados e visualizá-los ao lado, e sempre que o usuário desejar ver os resultados calculados ele poderá fazer isto, mesmo após ter fechada a sessão. Então vamos ao exemplo.&lt;/p&gt;

&lt;p&gt;Primeiro vamos construir a estrutura do nosso documento html, nele usaremos a biblioteca jquery para facilitar a construção do nosso script. Também teremos uma tag input onde serão apresentados os dígitos clicados, em seguidas temos os botões com os numeros de 0 à 9, com as operações de SOMA, MULTIPLICAÇÃO, DIVISÃO e SUBTRAÇÃO, PARÊNTESES e os botões de SALVAR &amp;#8211; que irá salvar o valor da tag input no localStorage &amp;#8211; ,LISTAR que ira pegar todos os valores listados no localStorage e colocar em uma tabela e o botão APAGAR que deletará todos itens do localStorage, também temos a tabela onde serão colocados os valores encontrados no localStorage :&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;!--Início - Documento .html-- gt;
&amp;lt;html&amp;gt;    
  &amp;lt;head&amp;gt;
    &amp;lt;script src=&#34;http://code.jquery.com/jquery-1.10.2.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;

    &amp;lt;input id=&#34;inputResult&#34;&amp;gt;&amp;lt;/input&amp;gt;
    &amp;lt;br&amp;gt;

    &amp;lt;button class=&#34;btnNumber&#34; value=&#34;1&#34;&amp;gt;1&amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnNumber&#34; value=&#34;2&#34;&amp;gt;2&amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnNumber&#34; value=&#34;3&#34;&amp;gt;3&amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnNumber&#34; value=&#34;4&#34;&amp;gt;4&amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnNumber&#34; value=&#34;5&#34;&amp;gt;5&amp;lt;/button&amp;gt;
    &amp;lt;br&amp;gt;

    &amp;lt;button class=&#34;btnNumber&#34; value=&#34;6&#34;&amp;gt;6&amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnNumber&#34; value=&#34;7&#34;&amp;gt;7&amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnNumber&#34; value=&#34;8&#34;&amp;gt;8&amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnNumber&#34; value=&#34;9&#34;&amp;gt;9&amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnNumber&#34; value=&#34;0&#34;&amp;gt;0&amp;lt;/button&amp;gt;
    &amp;lt;br&amp;gt;

    &amp;lt;button class=&#34;btnOperacao&#34; value=&#34;+&#34;&amp;gt;+&amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnOperacao&#34; value=&#34;-&#34;&amp;gt; - &amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnOperacao&#34; value=&#34;*&#34;&amp;gt; * &amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnOperacao&#34; value=&#34;/&#34;&amp;gt; / &amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnOperacao&#34; value=&#34;(&#34;&amp;gt;(&amp;lt;/button&amp;gt;
    &amp;lt;br&amp;gt;

    &amp;lt;button class=&#34;btnOperacao&#34; value=&#34;)&#34;&amp;gt;)&amp;lt;/button&amp;gt;
    &amp;lt;button class=&#34;btnResult&#34; value=&#34;=&#34;&amp;gt;=&amp;lt;/button&amp;gt;
    &amp;lt;button id=&#34;btnLimpar&#34; class=&#34;btnOperacao&#34; value=&#34;LIMPAR&#34;&amp;gt;LIMPAR&amp;lt;/button&amp;gt;
    &amp;lt;br&amp;gt;
    &amp;lt;button class=&#34;btnSalvar&#34; value=&#34;SALVAR&#34;&amp;gt;SALVAR&amp;lt;/button&amp;gt;
    &amp;lt;br&amp;gt;
    &amp;lt;button class=&#34;btnListar&#34; value=&#34;LISTAR&#34;&amp;gt;LISTAR VALORES&amp;lt;/button&amp;gt;
    &amp;lt;br&amp;gt;
    &amp;lt;button class=&#34;btnApagar&#34; value=&#34;APAGAR&#34;&amp;gt;APAGAR VALORES&amp;lt;/button&amp;gt;
    &amp;lt;br&amp;gt;
    &amp;lt;br&amp;gt;
    &amp;lt;br&amp;gt;

    &amp;lt;table id=&#34;tableResults&#34; class=&#34;tabela&#34; border=&#34;0&#34;&amp;gt;
            &amp;lt;tr&amp;gt;
                     &amp;lt;td&amp;gt;
      Chave
        &amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;
      Valor
                    &amp;lt;/td&amp;gt;
                 &amp;lt;/tr&amp;gt;

    &amp;lt;/table&amp;gt;
  &amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&amp;lt;!--Fim - Documento .html--&amp;gt;&lt;/pre&gt;

&lt;p&gt;Criado o documento acima vamos construir nossa lógica.&lt;/p&gt;

&lt;p&gt;O que queremos primeiramente é pegar o valor clicado nos números e colocá-los no input. Para isso vamos usar o evento clique que será atribuído aos botões dos números por meio da classe btnNumber, e dentro da função atribuída colocaremos o valor clicado mais o valor que ele terá.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.btnNumber&#39;).click(function(){  
   $(&#39;#inputResult&#39;).val($(&#39;#inputResult&#39;).val()+this.value)
});&lt;/pre&gt;

&lt;p&gt;Agora o que queremos é fazer o mesmo para pegarmos as operações clicadas. A lógica é a mesma, mas adicionaremos uma tratativa para acaso o botão de operação clicado seja o LIMPAR. Se clicar no botão LIMPAR o valor da tag input será esvaziado.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.btnOperacao&#39;).click(function(){  
  if(this.value != &#39;LIMPAR&#39;){
    $(&#39;#inputResult&#39;).val($(&#39;#inputResult&#39;).val()+this.value)
  }
  else{
    $(&#39;#inputResult&#39;).val(&#39;&#39;)
  }
});&lt;/pre&gt;

&lt;p&gt;Bem, isso é uma calculadora, então temos que calcular. É neste momento onde gosto de expressar o amor ao javascript, basta passarmos a string com a conta montada na tag input para o método eval( ), para que ele execute o cálculo. O código abaixo mostra a atribuição da função e a execução do calculo e em seguida coloca o valor na tag input.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.btnResult&#39;).click(function(){  
    $(&#39;#inputResult&#39;).val(eval($(&#39;#inputResult&#39;).val()))
});&lt;/pre&gt;

&lt;p&gt;Finalmente vamos ao WebStorage, porque queremos gravar os valores e deixá-los disponíveis. Para gravarmos um valor no localStorage usamos o setItem(chave,valor), sempre gravaremos um par de chave e valor no WebStorage. Sabemos que queremos gravar o valor do resultado, mas a chave vamos deixar nas mãos do usuário. Quando ele clicar em salvar vamos dar ao usuário a opção dar um nome aquele resultado, e este nome será a chave a ser gravada com o valor.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.btnSalvar&#39;).click(function(){
    var lS = prompt(&#34;De um nome ao resultado para salvar.&#34;,&#34;&#34;);
    localStorage.setItem(lS,$(&#39;#inputResult&#39;).val());
})&lt;/pre&gt;

&lt;p&gt;Temos o botão LISTAR que pegará todos os valores salvos no localStorage e colocará na tabela abaixo da calculadora. Para pegarmos um valor usamos o getitem(chave), para sabermos quantos itens temos no localStorage usamos o localStorage.length e para pegar a chave usamos localStorage.key(index). Utilizando um while varremos localStorage e inserimos os valores na tabela.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.btnListar&#39;).click(function(){
  var tamanho = localStorage.length;
  var chave = &#39;&#39;;
  var valor = &#39;&#39;;

  if(document.getElementById(&#34;tableResults&#34;).rows.length &amp;gt; 1)  {
    for(var t = document.getElementById(&#34;tableResults&#34;).rows.length; t &amp;gt; 1; t--){
      document.getElementById(&#34;tableResults&#34;).deleteRow(1);
    }
  }

  var numOfCols =  document.getElementById(&#34;tableResults&#34;).rows[document.getElementById(&#34;tableResults&#34;).rows.length-1].cells.length;

  for(var c = 0; c &amp;lt; tamanho;c++){
    chave = localStorage.key(c);
    valor = localStorage.getItem(chave);
    var newRow = document.getElementById(&#34;tableResults&#34;).insertRow(document.getElementById(&#34;tableResults&#34;).rows.length);

    for (var j = 0; j &amp;lt; numOfCols; j++) {
      newCell = newRow.insertCell(j);

      if(j==0){
       newCell.innerHTML = chave.toUpperCase();
     }else if(j == 1){
       newCell.innerHTML = valor;
     }
   }
 }
})&lt;/pre&gt;

&lt;p&gt;A ultima lógica é a de limpar o localStorage com os dados salvos. Usamos o localStorage.clear() para limpar todos os itens. Veja como:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;$(&#39;.btnApagar&#39;).click(function(){
   localStorage.clear()                 
})&lt;/pre&gt;

&lt;p&gt;Estilo é importante, não é o nosso foco, mas é importante, então vamos implementar algum estilo.&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;button{
  width:27.5px;
}
.btnListar,.btnSalvar,.btnApagar{
  width:155px;
}
#btnLimpar{
  width:90px; 
}
#inputResult{
  text-align: center;
}
table.tabela tbody tr:nth-child(odd){
  background-color: #E9E9E9;
}&lt;/pre&gt;

&lt;p&gt;Este é o código que temos.Vamos ver como o navegador (Chrome) nos possibilita inspecionar o elemento.&lt;/p&gt;

&lt;p&gt;Execute o documento no navegador e aperte F12. Aparecerá a tela do lado direito aperte a seta à esquerda do Local Storage para visualizar os dados salvos pelo documento em execução. No caso abaixo, ainda não temos nenhum valor salvo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws1.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-40582&#34; alt=&#34;ws1&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws1-588x171.png&#34; width=&#34;588&#34; height=&#34;171&#34; srcset=&#34;uploads/2014/01/ws1-588x171.png 588w, uploads/2014/01/ws1-329x95.png 329w, uploads/2014/01/ws1-660x192.png 660w, uploads/2014/01/ws1.png 970w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Faça qualquer conta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws2.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-40583&#34; alt=&#34;ws2&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws2-226x310.png&#34; width=&#34;226&#34; height=&#34;310&#34; srcset=&#34;uploads/2014/01/ws2-226x310.png 226w, uploads/2014/01/ws2-122x168.png 122w, uploads/2014/01/ws2.png 262w&#34; sizes=&#34;(max-width: 226px) 100vw, 226px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora clique em igual (=) para obter o resultado.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws3.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-40584&#34; alt=&#34;ws3&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws3-237x310.png&#34; width=&#34;237&#34; height=&#34;310&#34; srcset=&#34;uploads/2014/01/ws3-237x310.png 237w, uploads/2014/01/ws3-128x168.png 128w, uploads/2014/01/ws3.png 264w&#34; sizes=&#34;(max-width: 237px) 100vw, 237px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicando em salvar, abriremos um prompt para ser digitado o nome do resultado que será utilizado para identificar o valor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws4.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-40585&#34; alt=&#34;ws4&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws4-588x156.png&#34; width=&#34;588&#34; height=&#34;156&#34; srcset=&#34;uploads/2014/01/ws4-588x156.png 588w, uploads/2014/01/ws4-329x87.png 329w, uploads/2014/01/ws4-660x176.png 660w, uploads/2014/01/ws4.png 944w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois de clicar em OK, abra o inspetor de elementos Developer Tools clique no botão de refresh no rodapé e você verá o valor salvo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws5.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-40586&#34; alt=&#34;ws5&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws5-588x162.png&#34; width=&#34;588&#34; height=&#34;162&#34; srcset=&#34;uploads/2014/01/ws5-588x162.png 588w, uploads/2014/01/ws5-329x91.png 329w, uploads/2014/01/ws5-660x182.png 660w, uploads/2014/01/ws5.png 936w&#34; sizes=&#34;(max-width: 588px) 100vw, 588px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Execute mais um calculo e salve seu valor. Agora clique em LISTAR VALORES e assim serão exibidos todos os valores no localStorage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws6.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-40587&#34; alt=&#34;ws6&#34; src=&#34;http://tableless.com.br/wp-content/uploads/2014/01/ws6-242x310.png&#34; width=&#34;242&#34; height=&#34;310&#34; srcset=&#34;uploads/2014/01/ws6-242x310.png 242w, uploads/2014/01/ws6-131x168.png 131w, uploads/2014/01/ws6.png 264w&#34; sizes=&#34;(max-width: 242px) 100vw, 242px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicando em APAGAR VALORES os dados sumirão e não serão mais visualizados no Developers Tools e não serão listados na tabela.&lt;/p&gt;

&lt;p&gt;Para finalizarmos temos que esclarecer que a maneira de se usar o sessionStorage é a mesma do localStorage. O que deve ficar claro é que ao usar o sessionStorage todos os dados salvos serão perdidos ao se fechar o navegador. O exemplo acima pode ser adaptado ao sessionStorage sem problemas. Veja o exemplo funcionando: &lt;a title=&#34;EXEMPLO&#34; href=&#34;http://jsfiddle.net/bruiz/d5prC/&#34; target=&#34;_blank&#34;&gt;EXEMPLO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bons estudos e bom trabalho!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semântica, padrões e o que você tem a ver com isto</title>
      <link>https://tableless.github.io/hugo-public/semantica-padroes-e-o-que-voce-tem-a-ver-com-isto/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/semantica-padroes-e-o-que-voce-tem-a-ver-com-isto/</guid>
      <description>

&lt;p&gt;O HTML é uma linguagem simples de aprender, mas muito difícil de dominar. Segundo a documentação da W3C existem atualmente 107 elementos de HTML5. Muitos deles ainda causam certa confusão entre os desenvolvedores ou por possuírem funções muito parecidas, comportamentos visuais praticamente idênticos ou ainda por serem simplesmente desconhecidos pela comunidade. Alguns elementos ainda são chamados de &amp;#8220;mais semânticos&amp;#8221; que outros. Mas o que isto quer dizer afinal?&lt;/p&gt;

&lt;p&gt;No post de hoje vamos fazer uma breve comparação entre alguns destes elementos para que você tenha sempre a carta certa na manga na hora certa e possa atribuir significado de maneira efetiva.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-web-semântica&#34;&gt;O que é web semântica?&lt;/h2&gt;

&lt;p&gt;A explicação curta: semântica é o estudo do significado. Poderíamos parar por aqui. Mas não vamos.&lt;/p&gt;

&lt;p&gt;A explicação longa e contextualizada: a web semântica é um movimento colaborativo para organizar a informação de maneira acessível para computadores e máquinas através de padrões de formatação de dados. Quem cunhou este termo foi  Tim Berners-Lee, o inventor do protocolo WWW. Isto parte de um esforço para fazer a informação ser facilmente encontrada e compreendida por mecanismos de busca, ser acessível para pessoas com deficiências visuais utilizando leitores de voz e, em um futuro utópico, ser &amp;#8220;compreendida&amp;#8221; pelos computadores. Assim tarefas chatas, burocráticas e que levam muito tempo para serem realizadas poderão ser feitas por máquinas.&lt;/p&gt;

&lt;p&gt;Você pode estar pensando:  o que eu tenho a ver com isto? A resposta é bem simples: tudo. Ainda não possuímos computadores com inteligências artificiais que possam despreender significado da informação na internet, mas podemos marcar o conteúdo de forma que as máquinas possam compreender o contexto de cada bloco de informação e assim atribuir uma &amp;#8220;etiqueta&amp;#8221; de significado. Por exemplo, ao utilizar a tag &lt;nav&gt; estamos dizendo para todos os sistemas do mundo  &amp;#8220;Ei, a navegação está bem aqui&amp;#8221;. Ou ao marcar um título com a tag h1 você está na verdade dizendo &amp;#8220;Cara, este é o título MAIS IMPORTANTE deste artigo&amp;#8221;. Não importa se o texto está em chinês, russo ou português um h1 sempre será um título. E isto é só a ponta do iceberg. Usando meta-dados como schema ou o Facebook Open Graph podemos dizer para o computador não apenas que aquele h1 é um título, como qual é o assunto daquele dado. Assim podemos dizer que &amp;#8220;O HOBBIT&amp;#8221; é o título de um filme. Graças a este tipo de meta informação você já pode, no estado atual de organização da informação, pedir ao seu mecanismo de busca favorito que encontre a próxima seção deste filme ou que mostre uma lista de lojas que possuem o blu-ray em promoção. No futuro você poderá saber tudo o que existe na internet sobre &amp;#8220;O HOBBIT&amp;#8221; sem precisar mineirar a informação clicando manualmente de página em página.  Mas isto já vai além do escopo deste artigo… Em resumo saber qual é o contexto semântico de um determinado elemento não é cagação de regra. Marcação de texto semântica é um pequeno esforço para ajudar pessoas como eu e você a encontrarem, compartilharem, reutilizarem e combinarem dados.&lt;/p&gt;

&lt;h2 id=&#34;uma-questão-de-força-e-ênfase&#34;&gt;Uma questão de força e ênfase&lt;/h2&gt;

&lt;p&gt;A linguagem falada possuí algumas diferenças sutis que são muito difíceis de transmitir por escrito. Eu posso dizer &amp;#8220;Eu amo sorvetes&amp;#8221; e isto ter um significado completamente diferente conforme o tom da minha voz. É possível que esta seja uma afirmação simples e sem emoção, eu posso gritar a plenos pulmões para transmitir ao mundo meu amor ou eu posso estar sendo irônica o tempo todo e, neste caso, o que eu quero realmente comunicar é que eu odeio sorvetes. Tudo vai depender do volume, força, ênfase e humor transmitido pela minha voz.&lt;/p&gt;

&lt;p&gt;Da mesma maneira em HTML possuímos tags que, embora visualmente produzam resultados idênticos, possuem significados diferentes. É claro que não podemos contar com o refinamento e sofisticação de uma língua falada. É como se você só tivesse 107 etiquetas para marcar todo o conteúdo do mundo. Por que, enfim, é exatamente isto que estamos fazendo aqui na realidade. Mas, conhecendo melhor o significado de cada etiqueta podemos transmitir melhor estas mudanças de tom, certo?&lt;/p&gt;

&lt;h3 id=&#34;b-vs-strong&#34;&gt;&lt;b&gt; vs. &lt;strong&gt;&lt;/h3&gt;

&lt;p&gt;Aparentemente as tags &lt;b&gt; e &lt;strong&gt; fazem a mesma coisa: ambas deixam um texto em negrito. Mas existe uma diferença semântica aqui. O elemento &lt;b&gt; é utilizado para separar um conteúdo que, embora seja estilisticamente distinto e você deseje chamar atenção para ele, não possui um significado ou importância maior em relação ao texto normal. Isto pode servir para palavras-chaves, nomes de produtos e serviços, etc.&lt;/p&gt;

&lt;p&gt;Já o &lt;strong&gt; serve para marcar textos com maior importância.  Textos strong serão lidos pelos leitores de tela com uma voz mais forte (EU AMO SORVETEEEE). Este destaque não precisa necessariamente ser comunicado visualmente através do negrito. Utilizando CSS você pode criar contraste através da cor do texto, peso, forma, tamanho, background, etc. Tudo depende do que funciona melhor para o seu layout.&lt;/p&gt;

&lt;h3 id=&#34;em-vs-i&#34;&gt;&lt;em&gt; vs. &lt;i&gt;&lt;/h3&gt;

&lt;p&gt;A mesma confusão acontece entre as tags &lt;em&gt; e &lt;i&gt;. Embora o efeito visual das duas por padrão seja o mesmo &amp;#8211; deixar o texto em itálico &amp;#8211; existe uma diferença de significado. A tag &lt;em&gt; indica um texto com maior ênfase (eu AMO sorvete). Enquanto &lt;i&gt; é utilizado para textos que teriam uma voz alternativa. Isto pode ser uma referência a um humor diferente do restante do texto (uma expressão irônica, por exemplo), ou até mesmo para identificar um termo técnico, cientifico ou idiomático.&lt;/p&gt;

&lt;p&gt;É possível combinar o &lt;i&gt; com atributos lang para indicar expressões em outras línguas. Eu amo &lt;i lang=&amp;#8221;it&amp;#8221;&gt;gelato&lt;/i&gt;.&lt;/p&gt;

&lt;h3 id=&#34;outros-tons&#34;&gt;Outros tons&lt;/h3&gt;

&lt;p&gt;Ainda no campo de ênfase existe ainda a tag &lt;mark&gt;. Ela é utilizada para destacar uma informação. Seria o equivalente a você pegar uma caneta marca texto amarelo berrante e grifar um dado importante. E este é exatamente o visual padrão desta tag.&lt;/p&gt;

&lt;p&gt;Já se o objetivo é marcar um fato desatualizado ou não mais relevante você pode utilizar a tag &lt;s&gt;. Mudanças de preço do tipo de R$100 por R$20 são um bom exemplo de uso.&lt;/p&gt;

&lt;h2 id=&#34;uma-citação-para-cada-situação&#34;&gt;Uma citação para cada situação&lt;/h2&gt;

&lt;p&gt;As tags &lt;blockquote&gt; e &lt;q&gt; também causam uma certa confusão. O elemento &lt;blockquote&gt; é para blocos de citação de uma outra fonte. Já o &lt;q&gt; é para citações curtas inseridas no meio de um texto, sem quebras de parágrafo.&lt;/p&gt;

&lt;p&gt;Por que não simplesmente utilizar aspas? Bem, aspas não significam citações em todos os contextos. Você pode utilizar como um recurso para diferenciar uma expressão idiomática, demonstrar um bloco de texto dito por um personagem em uma narração ou simplesmente &amp;#8220;por que você quis&amp;#8221;. Talvez um leitor atento saiba diferenciar cada uso, mas um computador não sabe. Então para não haver dúvidas que se trata de uma citação utilize &lt;blockquote&gt; ou &lt;q&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;cite&gt;  soa como citação mas não é não. A função dele é indicar um título de um trabalho como um livro, um filme ou um artigo como este que você está lendo. Você pode combinar estas tags. Por exemplo, utilizar um cite para referenciar a obra que você utilizou no blockquote ou ainda usar o cite como um atributo para especificar um link para o trabalho original. Este link não ficará visível para os usuários, mas pode servir para controle interno e para avisar mecanismos de busca a origem da informação.&lt;/p&gt;

&lt;h2 id=&#34;nem-tudo-é-o-que-parece&#34;&gt;Nem tudo é o que parece&lt;/h2&gt;

&lt;h3 id=&#34;small&#34;&gt;&lt;small&gt;&lt;/h3&gt;

&lt;p&gt;Ao contrário do que o nome indica &lt;small&gt; não é para textos pequenos. A função do small é marcar comentários curtos de natureza distinta do assunto principal como disclaimers, licença de uso, atribuição de crédito&amp;#8230; Anúncios do tipo &amp;#8220;O ministério da saúde adverte&amp;#8221; e aquelas letras pequeninas no final de um contrato são &lt;small&gt;.&lt;/p&gt;

&lt;h3 id=&#34;nbsp&#34;&gt;&amp;nbsp;&lt;/h3&gt;

&lt;p&gt;Muita gente utiliza este atributo simplesmente para indicar divs vazias. Mas a função do &amp;nbsp; vai além disto. O conceito aqui é criar um espaço em branco que não irá quebrar em uma nova linha. Isto é útil para palavras que não devem aparecer separadas como indicações de tempo, unidades de medidas ou nomes próprios.&lt;/p&gt;

&lt;h2 id=&#34;um-desafio-diário&#34;&gt;Um desafio diário&lt;/h2&gt;

&lt;p&gt;A princípio parece tudo bem simples: p é de parágrafo, h é para título e divs separam tudo. Mas as coisas nunca são o que parecem. Cada elemento tem seu uso e peculiaridade. . Eu sei que você pode estar pensando &amp;#8220;eu faço isto a anos, eu já sei HTML&amp;#8221;. Mas você já leu com calma a documentação de cada elemento? Eu vou ser a primeira a admitir que não li tudo não. É gigante! Existe muito a aprender. Vire mexe eu descubro um elemento &amp;#8220;novo&amp;#8221;. Meu conselho aqui é: dedique um tempinho do seu dia para estudar HTML. Podem ser 5 minutinhos. Quando estiver em uma fila entediante. São mais de 100 tags. Você poderia passar meses fazendo isto e não zerar tudo. Garanto que você vai descobrir muita coisa nova.&lt;/p&gt;

&lt;h2 id=&#34;da-necessidade-de-padrões&#34;&gt;Da necessidade de padrões&lt;/h2&gt;

&lt;p&gt;Antes de me meter a estudar design cursei Letras por alguns anos. Acabei desistindo do curso por uma questão de afinidade, mas linguística sempre foi um assunto fascinante para mim. E no final desenvolvimento web tem muito mais paralelos com esta área do conhecimento humano do que parecia a princípio. A principal lição que podemos pegar emprestado é que a língua é um organismo vivo e não pode ser controlado. Na prática isto significa que se todo mundo passar a utilizar uma tag x para uma determinada função, não importa muito o significado original &amp;#8220;dicionarizado&amp;#8221;.  Os padrões terão que ser modificados para contemplar este uso.&lt;/p&gt;

&lt;p&gt;Da mesma maneira que o significado de uma palavra ou símbolo pode se modificar ao longo do tempo o mesmo pode ocorrer com linguagens de marcação de texto. Nem eu, nem a W3C, nem o Google, nem ninguém tem o poder de impor significado a nada. No final toda a linguagem, e o HTML não está excluído disto, é essencialmente arbitrária. Mas, porém, todavia, se não existir um esforço para a criação de algum padrão cada um vai falar uma variação divergente e ninguém vai se comunicar. Da mesma forma que as vezes é preciso aprender novas regras de gramática, teremos que criar e aprender novos padrões para se adequar as nossas necessidades como desenvolvedores. Ou evoluir e modificar os antigos. Com a diferença que quem escolhe as regras do jogo não são um punhado de intelectuais elitistas em roupas engraçadas. Somos eu, você, e qualquer um que tiver novas e boas idéias para contribuir para a comunidade de desenvolvimento.&lt;/p&gt;

&lt;p&gt;Pode parecer um esforço inútil colocar ordem no amontoado gigantesco de dados que é a web. Mas é só através deste tipo de iniciativa que teremos comunicação efetiva e transmissão de informação acessível. E estaremos nós, homens e máquinas, enfim falando a mesma língua.&lt;/p&gt;

&lt;h3 id=&#34;saiba-mais&#34;&gt;Saiba mais&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3.org/html/wg/drafts/html/CR/&#34; title=&#34;HTML5&#34;&gt;HTML5 &amp;#8211; W3c &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://joshduck.com/periodic-table.html&#34; title=&#34;Periodic Table of the Elements&#34;&gt;Periodic Table of the Elements&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Frame Player: Indo além da tag video em dispositivos móveis</title>
      <link>https://tableless.github.io/hugo-public/frame-player-indo-alem-da-tag-video-em-dispositivos-moveis/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://tableless.github.io/hugo-public/frame-player-indo-alem-da-tag-video-em-dispositivos-moveis/</guid>
      <description>

&lt;p&gt;Desde que o Flash se tornou obsoleto em dispositivos móveis (ou em outras palavras: quando a Apple o baniu do iOS) a forma de manipular arquivos de media ficou cada vez mais tendenciosa para uso das tags &lt;code&gt;audio&lt;/code&gt; e &lt;code&gt;video&lt;/code&gt;, consolidando o padrão Web. De toda forma o Flash ainda sobrevive bem neste ramo (prova disso é o YouTube que mantém seu player), mas este não será o foco deste artigo. O ponto mais importante que iremos tratar aqui é a reprodução de vídeos usando HTML5 em smartphones e tablets.&lt;/p&gt;

&lt;p&gt;Será que nos dias de hoje todos os problemas envolvendo arquivos de media em dispositivos móveis foram resolvidos, ou novos problemas foram criados?&lt;/p&gt;

&lt;p&gt;Sistemas operacionais móveis tendem a implementar especificidades, seja por limitações dos dispositivos ou algo envolvendo a usabilidade do sistema, o fato é que algumas vezes essas implementações não obedecem especificações, criando barreiras e limitando assim o desenvolvimento de aplicações web.&lt;/p&gt;

&lt;h3 id=&#34;os-problemas-com-a-tag-video-criados-pelos-sistemas-operacionais-móveis&#34;&gt;Os Problemas com a Tag Video Criados pelos Sistemas Operacionais Móveis&lt;/h3&gt;

&lt;p&gt;Quando inserimos um vídeo em uma página web utilizando a tag &lt;code&gt;video&lt;/code&gt; esperamos que o navegador fique responsável por carregar seu player nativo (exibindo seus controles caso seja utilizado o atributo &lt;code&gt;controls&lt;/code&gt;), até então nenhum problema visto que praticamente &lt;a href=&#34;http://caniuse.com/#search=video&#34; target=&#34;_blank&#34;&gt;todos os navegadores modernos&lt;/a&gt; (inclusive de dispositivos móveis) oferecem suporte, claro que cada um serão necessários os vários formatos de vídeo (codec) para poder reproduzir em diferentes navegadores, mas o grande problema não esta ai, e sim no comportamento que este player nativo toma quando carregado em dispositivos móveis.&lt;/p&gt;

&lt;p&gt;A especificação da tag &lt;code&gt;video&lt;/code&gt; define diversos &lt;a href=&#34;http://www.w3.org/TR/html-markup/video.html#video-attributes&#34; target=&#34;_blank&#34;&gt;atributos&lt;/a&gt;, vamos nos atentar para alguns em específico: &lt;code&gt;autoplay&lt;/code&gt;, &lt;code&gt;preload&lt;/code&gt; e &lt;code&gt;loop&lt;/code&gt;. Iremos analisar cada um deles e seu comportamento nos próximos parágrafos.&lt;/p&gt;

&lt;p&gt;O atributo &lt;code&gt;autoplay&lt;/code&gt; tem a função de iniciar a reprodução um vídeo automaticamente sem a necessidade de interação do usuário, analisando o &lt;a href=&#34;https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html&#34; target=&#34;_blank&#34;&gt;guia da Apple para o Safari&lt;/a&gt; na seção de Audio e Vídeo em HTML5 temos um tópico sobre este assunto, no qual relata que os métodos &lt;code&gt;play()&lt;/code&gt; e &lt;code&gt;load()&lt;/code&gt; são desabilitados em dispositivos iOS, exceto quando ocorre uma ação do usuário, ou seja, o atributo &lt;code&gt;autoplay&lt;/code&gt; não funciona, assim como o seguinte código também não irá funcionar:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;#060;body onload=&#34;document.myMovie.play()&#34;&amp;#062;
&lt;/pre&gt;

&lt;p&gt;O atributo &lt;code&gt;preload&lt;/code&gt;, responsável por carregar parte do arquivo de media junto da página e antes de sua reprodução, tem comportamento semelhante ao &lt;code&gt;autoplay&lt;/code&gt;. Neste caso pode ser levado em consideração esta ação, pois dispositivos móveis se conectam por redes de celulares, que muitas vezes cobram por dados trafegados.&lt;/p&gt;

&lt;p&gt;É possível utilizar o atributo &lt;code&gt;loop&lt;/code&gt; em dispositivos móveis, porém para garantir suporte a todos os dispositivos, é necessário incluir o hack abaixo, pois algumas versões (ex: iOS abaixo da versão 5) não suportam este atributo.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var video = document.getElementById(&#39;your-video-elem&#39;);

    function loopVideo(){
        video.currentTime = 0.1;
        video.play();
    }

    video.addEventListener(&#39;ended&#39;, loopVideo, false);
&lt;/pre&gt;

&lt;p&gt;Uma outra grande limitação é o controle de volume, ao tentar recuperar o valor atual do volume por JavaScript sempre será retornado 1, e este valor não pode ser alterado por código, tornando possível alterar o volume ou colocar no mudo apenas com interação do usuário pelos botões físicos. Assim como o volume também não é possível definir valores para a propriedade &lt;code&gt;playbackRate&lt;/code&gt;, tornando impossível implementar slow motion ou fast foward.&lt;/p&gt;

&lt;p&gt;Dispositivos móveis ao encontrarem um arquivo de vídeo em páginas web, renderizam esse quadro definindo uma imagem de placeholder por cima da imagem carregada pelo atributo &lt;code&gt;cover&lt;/code&gt; (quando definida), esta ação torna inviável o uso de vídeos como background por exemplo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://f.cl.ly/items/1L3Y1p1r1Y3B1E0l0W11/ios-video-placeholder.png&#34; width=&#34;338&#34; height=&#34;600&#34; alt=&#34;iOS video placeholder image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;iOS video placeholder image (a big play icon on center).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O elemento &lt;code&gt;canvas&lt;/code&gt; possui um método &lt;code&gt;drawImage&lt;/code&gt; em sua API, no qual permite inserir imagens, vídeos e até mesmo outro elemento canvas, porém este método &lt;a href=&#34;https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/PuttingVideoonCanvas/PuttingVideoonCanvas.html&#34; target=&#34;_blank&#34;&gt;não é suportado em dispositivos iOS&lt;/a&gt;, a Apple afirma que este método utiliza muitos recursos do sistema, no Safari Desktop o método funciona perfeitamente.&lt;/p&gt;

&lt;p&gt;Por fim chegamos em dois fatores que considero mais limitantes, por serem impossíveis de serem solucionados. O primeiro fator é: vídeos em smartphones não podem ser carregados inline, somente em tela cheia. Já o outro fator é: não podemos reproduzir dois ou mais arquivos de aúdio ou vídeo simultaneamente, apenas um arquivo é permitido por vez, simplesmente por opção das empresas que desenvolvem os sistemas móveis.&lt;/p&gt;

&lt;h3 id=&#34;uma-alternativa-para-vídeos-e-gifs&#34;&gt;Uma Alternativa para Vídeos e Gifs&lt;/h3&gt;

&lt;p&gt;Considerando os problemas relatados anteriormente, quando surge a necessidade de desenvolver uma aplicação web baseada em videos para smartphones, isto é, uma aplicação que tem como base arquivos de vídeo com elevado nível de personalização e interação com o usuário, é perfeitamente possível de ser desenvolvida para navegadores desktop, porém inumeros problemas serão apresentados em dispositivos móveis. Um bom case para exemplificar este tipo de aplicação é o &lt;a href=&#34;https://vimeo.com/79706014&#34; target=&#34;_blank&#34;&gt;site que a Apple desenvolveu em 2012 para promover seus novos produtos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Criar animações de imagens similares a um vídeo é uma tarefa que o GIF já faz, porém este tipo possui &lt;a target=&#34;_blank&#34; href=&#34;http://stories4all9858180.wordpress.com/2012/12/05/advantages-and-limitations-of-gifs/&#34;&gt;diversas limitações&lt;/a&gt;, tendo como principal a profundidade de cor máxima: 256 bit, o que torna a qualidade da imagem baixa, inviabilizando seu uso em dispositivos com alta resolução de tela.&lt;/p&gt;

&lt;p&gt;Pensando nestes fatos surgiu a necessidade de criar uma alternativa que pudesse solucionar os problemas do vídeo e do GIF em dispositivos móveis, algo que pudesse reproduzir imagens em sequência (com uma certa qualidade) e que pudesse ser personalizado com a necessidade da aplicação, deixando isso a cargo do desenvolvedor. Esta necessidade é tão real que a Apple, em seu site citado acima, &lt;a href=&#34;http://www.tuaw.com/2012/10/16/how-apples-iphone-5-website-works/&#34; target=&#34;_blank&#34;&gt;criou uma alternativa própria&lt;/a&gt; para desenvolver estas animações sem utilizar vídeo e garantir suporte em todos os tipos de dispositivos, esta solução é bem próxima do que será discutido a seguir, existe uma &lt;a target=&#34;_blank&#34; href=&#34;https://docs.google.com/document/pub?id=1GWTMLjqQsQS45FWwqNG9ztQTdGF48hQYpjQHR_d1WsI&#34;&gt;análise minuciosa&lt;/a&gt; sobre esta técnica utilizada pela Apple.&lt;/p&gt;

&lt;h3 id=&#34;criando-um-player-de-frames&#34;&gt;Criando um Player de Frames&lt;/h3&gt;

&lt;p&gt;A necessidade comentada no parágrafo anterior teve seus requisitos bem definidos: reproduzir animações baseadas em imagens em uma certa taxa de velocidade, que tenha bom desempenho em dispositivos móveis, que seja personalizável e possa ter mais de uma instância executando em uma mesma página. Surgiu ai então o &lt;a href=&#34;http://vagnervjs.github.io/frame-player/&#34; target=&#34;_blank&#34;&gt;Frame Player&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;o-que-é-o-frame-player&#34;&gt;O que é o Frame Player?&lt;/h4&gt;

&lt;p&gt;O Frame Player é uma biblioteca JavaScript desenvolvida por &lt;a href=&#34;https://twitter.com/vagnervjs&#34; target=&#34;_blank&#34;&gt;Vagner Santana&lt;/a&gt; (eu) para reproduzir videos utilizando imagens no lugar de tipos comuns deste formato de media (i.e.: .mp4, .avi). A biblioteca se encarrega de mostrar uma sequência de imagens em uma determinada taxa de velocidade (fps), desta forma não é necessário utilizar a tag video.&lt;/p&gt;

&lt;h4 id=&#34;transformando-vídeo-em-imagens&#34;&gt;Transformando Vídeo em Imagens&lt;/h4&gt;

&lt;p&gt;Para que um vídeo seja reproduzido no Frame Player, é necessário extrair cada frame deste arquivo genrando uma sequência de imagens.&lt;/p&gt;

&lt;p&gt;Para gerar essa sequência de imagens a documentação do Frame Player instrui o uso do software &lt;a href=&#34;http://www.ffmpeg.org/&#34; target=&#34;_blank&#34;&gt;FFmpeg&lt;/a&gt; para conversão, utilizando o seguinte comando:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;$ ffmpeg -i video.mp4 -an -f image2 &#34;%d.jpg&#34;
&lt;/pre&gt;

&lt;p&gt;Onde &lt;code&gt;video.mp4&lt;/code&gt; é o arquivo original em formato de vídeo, e &lt;code&gt;%d.jpg&lt;/code&gt; o destino final dos arquivos de imagens que serão gerados com nome em ordem numérica.&lt;/p&gt;

&lt;p&gt;Após a extração dos frames, cada imagens deverá ser codificada em &lt;code&gt;base64&lt;/code&gt; utilizando &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/data_URIs&#34; target=&#34;_blank&#34;&gt;Data URI Scheme&lt;/a&gt; e armazenadas todas em um único arquivo &lt;code&gt;JSON&lt;/code&gt;. Para isso junto do Frame Player foi desenvolvido um &lt;code&gt;script&lt;/code&gt; (disponível em PHP e Node.js) que codifica e cria um arquivo de saída &lt;code&gt;JSON&lt;/code&gt;. O script é executado em linha de comando da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-terminal&#34;&gt;# Option 1: Node.js
    $ cd converter
    $ node app.js frameStart frameEnd folder/to/imgs/ json/video.json

    # Option 2: PHP
    $ php to_data_uri.php frameStart frameEnd folder/to/imgs/ json/video.json
&lt;/pre&gt;

&lt;p&gt;Os parâmetros &lt;code&gt;frameStart&lt;/code&gt; e &lt;code&gt;frameEnd&lt;/code&gt; deverá ser um valor numérico representando o frame inicial do vídeo e o frame final respectivamente. O caminho &lt;code&gt;folder/to/imgs/&lt;/code&gt; será a endereço para a pasta contendo a sequência de imagens geradas e &lt;code&gt;json/video.json&lt;/code&gt; deve ser o caminho para o arquivo &lt;code&gt;JSON&lt;/code&gt; de saída.&lt;/p&gt;

&lt;p&gt;Passada por essas duas etapas teremos transformado nosso vídeo em um arquivo &lt;code&gt;JSON&lt;/code&gt; que será processado pela biblioteca.&lt;/p&gt;

&lt;h4 id=&#34;por-dentro-do-frame-player&#34;&gt;Por Dentro do Frame Player&lt;/h4&gt;

&lt;p&gt;O código do Frame Player é todo escrito em JavaScript puro utilizando o paradigma de orientação a objetos baseado em protótipo, sem uso de nenhuma depêndencia. Desenvolver esta biblioteca usando orientação a objetos foi uma decisão primordial para viabilzar a capacidade de possuir multiplas instâncias do player em uma mesma página.&lt;/p&gt;

&lt;p&gt;Para utilizar a biblioteca em uma página, é necessário carregar dois arquivos referêntes ao código JavaScript e a folha de estilo do player:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;#060;link rel=&#34;stylesheet&#34; href=&#34;src/css/frameplayer.css&#34;&amp;#062;
    &amp;#060;script src=&#34;src/js/frameplayer.js&#34;&amp;#062;
&lt;/pre&gt;

&lt;p&gt;A primeira versão da biblioteca não contava com o arquivo CSS adicional, porém a possibilidade de carregar a folha de estilo em um arquivo separado permite ao utilizador ir além e personalizar qualquer elemento do player e ainda desacoplar o código CSS do JavaScript.&lt;/p&gt;

&lt;p&gt;Com os arquivos carregados, é necessário definir em seu código HTML o elemento que irá representar o player:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;#060;div id=&#34;my-player&#34; class=&#34;frameplayer&#34; data-vidsrc=&#34;videos/video.json&#34;&amp;#062;
&lt;/pre&gt;

&lt;p&gt;A classe &lt;code&gt;frameplayer&lt;/code&gt; é responsável por definir o estilo ao player, o &lt;code&gt;id&lt;/code&gt; pode ser qualquer nome definido pelo utilizador e o atributo &lt;code&gt;data-vidsrc&lt;/code&gt; deverá receber como valor o camaminho para o arquivo JSON gerado previamente.&lt;/p&gt;

&lt;p&gt;O player possui uma barra de controle do vídeo onde é inserido os botões de ação como play e pause. Essa barra é opcional ao utilizador, podendo ser desabilitada facilmente pelo parâmetro de opções. A contrução da barra de controle é feita por um método especifico da biblioteca (&lt;code&gt;FramePlayer.prototype.createControlsBar&lt;/code&gt;), em caso de desabilitado pelo utilizador a barra não é construida, evitando assim criar código de marcação que não será utilizado.&lt;/p&gt;

&lt;p&gt;A biblioteca possui dois parâmetros, o primeiro é o &lt;code&gt;id&lt;/code&gt; do elemento &lt;code&gt;div&lt;/code&gt; definido na marcação que será responsável por armazenar o player. Já o segundo parâmetro é referente as opções do player, esse parâmetro é um objeto JavaScript que possui a seguinte estrutura:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var options = ({
        &#39;rate&#39;: 30,
        &#39;controls&#39;: false,
        &#39;autoplay&#39;: true,
        &#39;width&#39;: &#39;640px&#39;,
        &#39;height&#39;: &#39;390px&#39;,
        &#39;radius&#39;: &#39;50%&#39;
    });
&lt;/pre&gt;

&lt;p&gt;Abaixo constam as informaçõe de cada atributo do parâmetro de opções:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate&lt;/code&gt;: valor da taxa de velocidade de reprodução. O valor padrão é 20.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;controls&lt;/code&gt;: habilita ou desabilita a barra de controles. O valor padrão é true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoplay&lt;/code&gt;: permite a execução automática do vídeo após ser carregada a página. Seu valor padrão é false.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;: valor referente a largura do player em pixel. O valor padrão é 480px.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;height&lt;/code&gt;: valor referente a altura do player em pixel. O valor padrão é 320px.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;radius&lt;/code&gt;: valor referente a borda arredondada do player. O valor padrão é null, portanto, sem bordas arredondadas por padrão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Após ser definida as opções, o utilizador deverá instanciar o Frame Player da seguinte forma:&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;var player = new FramePlayer(&#39;my-player&#39;, options);
        player.play();
&lt;/pre&gt;

&lt;p&gt;Deve-se chamar o método construtor do Frame Player passando como parâmetro o &lt;code&gt;id&lt;/code&gt; do elemento e a variável com as opções. Após isso basta chamar o método play para executá-lo.&lt;/p&gt;

&lt;h4 id=&#34;o-método-play&#34;&gt;O Método Play&lt;/h4&gt;

&lt;p&gt;O método play &lt;code&gt;(FramePlayer.prototype.play)&lt;/code&gt; pode ser considerado o coração do Frame Player, pois ele é o responsável pela troca em sequência das imagens, levando em consideração a taxa de velocidade. A primeira ação deste método é carregar o arquivo JSON, quando é terminado o carregamento, executa-se o trecho código abaixo, que faz com que os frames sejam trocados.&lt;/p&gt;

&lt;pre class=&#34;lang-javascript&#34;&gt;setInterval(function() {
        if(!player.paused){
            i++;
            if (i &amp;gt;= jsonVideoFile.frames.length) {
                i = 0;
            }
            img.src = jsonVideoFile.frames[i];
        }
    }, Math.round(1000 / player.rate));
&lt;/pre&gt;

&lt;p&gt;Acima podemos observar que a cada intervalo define-se um novo valor para o atributo &lt;code&gt;src&lt;/code&gt; do elemento imagem, este novo valor refere-se a ao próximo frame do vídeo. Dessa forma, conforme muda-se o valor de tempo do intervalo a velocidade da troca de imagens é afetada.&lt;/p&gt;

&lt;h4 id=&#34;base64-vs-image-file&#34;&gt;Base64 vs Image File&lt;/h4&gt;

&lt;p&gt;Uma grande questão surgiu após o lançamento da biblioteca: o uso de imagens codificadas em Base46 ser lento, pois o browser tem o trabalho de decodificar essa string, e por ser tratar de muitas imagens, este trabalho ficaria pesado em dispositivos móveis. Para saber mais sobre este fato tivemos um &lt;a href=&#34;http://www.mobify.com/blog/data-uris-are-slow-on-mobile&#34; target=&#34;_blank&#34;&gt;bom artigo como referência&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Com essa questão levantada, foi desenvolvida uma versão utilizando os arquivos de imagens em vez de Base64 URI, e a melhora do desempenho foi significativa.&lt;/p&gt;

&lt;p&gt;Você pode conferir mais sobre isso nesta &lt;a href=&#34;https://github.com/vagnervjs/frame-player/issues/4&#34; target=&#34;_blank&#34;&gt;issue&lt;/a&gt;. A versão baseada em arquivos de imagens está disponivel em uma &lt;a href=&#34;https://github.com/vagnervjs/frame-player/tree/img-tag&#34; target=&#34;_blank&#34;&gt;branch especifica&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h3&gt;

&lt;p&gt;Em nenhum momento o objetivo do desenvolvimento desta biblioteca foi eliminar o uso da tag &lt;code&gt;video&lt;/code&gt; em dispositivos móveis, muito pelo contrário, quando é necessário carregar arquivos de video com objetivo de apresentação da media apenas, é extremamente recomendável o uso dessa tag específica para isso. O real objetivo da bibliteca é criar uma alternativa para carregar animações em video quando é necessário integração com o restante da página, viabilizando múltiplos carregamento e personalização.&lt;/p&gt;

&lt;p&gt;A biblioteca Frame Player encontra-se em uma versão estável para uso em dispositivos móveis e mostra-se como uma boa solução para videos curtos, o maior ponto positivo é a liberdade que o desenvolvedor ganha para tornar a página dinâmica com o uso de videos nos dispositivos móveis, podendo desviar do player nativo da plataforma, e sem a dependencia do usuário dar o play para reproduzir o vídeo, o player conta ainda com um método específico para inserir filtros (grayscale, sepia, invert) nas imagens do vídeo.&lt;/p&gt;

&lt;p&gt;Existem ainda alguns trabalhos futuros para o Frame Player como buffer, compressão de imagens baseando-se em keyframes e até mesmo aúdio.&lt;/p&gt;

&lt;p&gt;Confira o &lt;a href=&#34;http://vagnervjs.github.io/frame-player&#34; target=&#34;_blank&#34;&gt;site&lt;/a&gt; do Frame Player e seu &lt;a href=&#34;https://github.com/vagnervjs/frame-player&#34; target=&#34;_blank&#34;&gt;repositório no Github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;referências&#34;&gt;Referências:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://www.w3.org/TR/html-markup/video.html#video-attributes&#34;&gt;HTML Video Element specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html&#34;&gt;Safari HTML5 Audio and Video Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&#34;_blank&#34; href=&#34;http://blog.millermedeiros.com/unsolved-html5-video-issues-on-ios/&#34;&gt;Unsolved HTML5 video issues on iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>