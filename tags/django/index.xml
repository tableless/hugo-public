<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on Tableless</title>
    <link>http://tableless.com.br/tags/django/index.xml</link>
    <description>Recent content in Django on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Criando comandos de atalhos no terminal</title>
      <link>http://tableless.com.br/criando-comandos-de-atalhos-no-terminal/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/criando-comandos-de-atalhos-no-terminal/</guid>
      <description>

&lt;p&gt;Esta dica pode ser utilizada em qualquer distribui√ß√£o Linux ou Mac OS X.&lt;/p&gt;

&lt;p&gt;Se voc√™ est√° cansado de digitar comandos gigantescos no terminal, aqui vai uma dica: crie atalhos para os comandos no seu terminal para melhorar a produtividade. Uma dica simples mas √© muito util.&lt;/p&gt;

&lt;p&gt;Para rodar um projeto python/django, geralmente executamos este comando:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;python manage.py runserver
&lt;/pre&gt;

&lt;p&gt;Com o comando de atalho criado, execute-o desta maneira:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;h2 id=&#34;criando-os-atalhos&#34;&gt;Criando os atalhos&lt;/h2&gt;

&lt;p&gt;Para come√ßar a criar seus atalhos, abra o arquivo &lt;strong&gt;.profile&lt;/strong&gt; ou &lt;strong&gt;.bashrc&lt;/strong&gt; que ficam na raiz da pasta do usu√°rio. Em seguida abra-os em seu editor de prefer√™ncia.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;sublime ~/.bashrc&lt;/pre&gt;

&lt;p&gt;Agora adicione a fun√ß√£o no final do arquivo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run() {
    echo &#34;executando... python manage.py runserver
    python manage.py runserver
}
&lt;/pre&gt;

&lt;p&gt;Pronto! Agora basta atualizar o arquivo para que o terminal o reconhe√ßa e entenda os novos comandos. Fa√ßa isso assim:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;source ~/.bashrc&lt;/pre&gt;

&lt;p&gt;Ap√≥s a execu√ß√£o do comando acima, a func√£o criada j√° est√° dispon√≠vel no terminal, digite o comando abaixo para testar:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;p&gt;Podemos fazer fun√ß√µes mais elaboradas, imagine que voc√™ precisa rodar diversos projetos e cada um em uma porta diferente, ent√£o veja como fazer:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run() {
    if [ &#34;$1&#34; != &#39;&#39; ]; then
        python manage.py runserver &#34;0.0.0.0:$1&#34;
    else
        python manage.py runserver &#34;0.0.0.0:8000&#34;
    fi
}
&lt;/pre&gt;

&lt;p&gt;Outra dica √© utilizar argumentos em suas fun√ß√µes. No caso da fun√ß√£o acima, $1 √© um argumento que √© passado ap√≥s o comando que define em qual porta ir√° rodar o projeto. Se n√£o for passado nenhum valor, ele ir√° rodar na porta padr√£o que foi definida como 8000.&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run&lt;/pre&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run 8001&lt;/pre&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;run 8002&lt;/pre&gt;

&lt;p&gt;√â poss√≠vel passar diversos argumentos, veja um exemplo na fun√ß√£o:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;teste(){
    echo $1 $2;
}
&lt;/pre&gt;

&lt;p&gt;Os argumentos veem em seguida ao comando sempre com espa√ßos entre eles, como no exemplo abaixo:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;teste Willem Allan&lt;/pre&gt;

&lt;p&gt;Retorno do comando executado ser√°:&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;Willem Allan&lt;/pre&gt;

&lt;p&gt;Logo abaixo seguem algumas fun√ß√µes que eu utilizo no meu .bashrc üòâ&lt;/p&gt;

&lt;pre class=&#34;lang-bash&#34;&gt;# git commit
cm() {
    git commit -m &#34;echo $1&#34; -a
}

# git add all &amp; commit
cma() {
    git add .
    git commit -m &#34;echo $1&#34; -a
}

# python - run django
run() {
    if [ &#34;$1&#34; != &#39;&#39; ]; then
        python manage.py runserver &#34;0.0.0.0:$1&#34;
    else
        python manage.py runserver &#34;0.0.0.0:8000&#34;
    fi
}

# python - migrate
migrate() {
    echo &#34;executando... python manage.py migrate&#34;
    python manage.py migrate
}

# python - auto
auto() {
    echo &#34;executando... python manage.py schemamigration $1 --auto&#34;
    python manage.py schemamigration $1 --auto
}

# python - initial
initial() {
    echo &#34;executando... python manage.py schemamigration $1 --initial&#34;
    python manage.py schemamigration $1 --initial
}
&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>