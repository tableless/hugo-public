<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Código on Tableless</title>
    <link>http://tableless.com.br/tags/c%C3%B3digo/index.xml</link>
    <description>Recent content in Código on Tableless</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="http://tableless.com.br/tags/c%C3%B3digo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Por que Python?</title>
      <link>http://tableless.com.br/por-que-python/</link>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/por-que-python/</guid>
      <description>

&lt;p&gt;Eu sou apaixonado por &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;. Muito. Daquele tipo que fala de Python sempre que pode. E uma pergunta que sempre me fazem é: por quê? Vou tentar fazer uma lista dos motivos mais relevantes:&lt;/p&gt;

&lt;h2 id=&#34;1-é-muito-bom-escrever-código-python&#34;&gt;1. É muito bom escrever código Python&lt;/h2&gt;

&lt;p&gt;Geralmente, quando alguém cria uma linguagem de programação, tem em vista um objetivo. Por exemplo, Lisp foi escrita para programação funcional. Java foi escrita para que o mesmo código pudesse rodar em qualquer lugar. PHP foi criada para construir páginas web. E Python foi criada para ser produtiva e fácil de escrever.&lt;/p&gt;

&lt;p&gt;Um programador experiente aprende a sintaxe do Python em algumas poucas horas. O jeito de escrever faz sentido.&lt;/p&gt;

&lt;p&gt;Veja, por exemplo, essa função para calcular um número de &lt;a href=&#34;https://pt.wikipedia.org/wiki/Sequ%C3%AAncia_de_Fibonacci&#34;&gt;Fibonacci&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;def fib(n):
    if n&amp;lt;3:
        return n
    return fib(n-1) + fib(n-2)&lt;/pre&gt;

&lt;p&gt;Note como a sintaxe é simples. Mesmo nas decisões de design que são &amp;#8220;pouco ortodoxas&amp;#8221;, como os blocos baseados na indentação, a decisão foi tomada pensando em produtividade. O modelo de blocos do Python faz com que você precise digitar menos. Além disso, é impossível escrever código não indentado em Python.&lt;/p&gt;

&lt;p&gt;Veja nesse outro exemplo, a função de Fibonacci em uma versão &lt;a href=&#34;https://en.wikipedia.org/wiki/Memoization&#34;&gt;memoized&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;memo = {0:0, 1:1}

def fib(n):
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Reparou como é simples? Ao trabalhar com Python, a linguagem nunca está entre você e seu problema. Você pode gastar seu tempo com a lógica de programação, que é o que realmente importa, e não com especificidades da linguagem que você está usando.&lt;/p&gt;

&lt;h2 id=&#34;2-organizar-um-projeto-python-é-muito-fácil&#34;&gt;2. Organizar um projeto Python é muito fácil&lt;/h2&gt;

&lt;p&gt;Vamos colocar nossa função de Fibonacci e salvar num arquivo, fib.py, incluindo um pouquinho de documentação. Chamamos cada arquivo Python de módulo:&lt;/p&gt;

&lt;pre&gt;&#39;&#39;&#39;Fibonacci function, memoized for better performance.&#39;&#39;&#39;
memo = {0:0, 1:1}

def fib(n):
    &#39;&#39;&#39;Returns the nth Fibonacci number.&#39;&#39;&#39;
    if not n in memo:
        memo[n] = fib(n-1) + fib(n-2)
    return memo[n]&lt;/pre&gt;

&lt;p&gt;Agora vamos importar esse arquivo no console do Python, e veja o que dá para fazer:&lt;/p&gt;

&lt;div style=&#34;width: 490px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img class=&#34;&#34; src=&#34;http://elcio.com.br/wp-content/uploads/2015/09/fib.gif&#34; alt=&#34;&#34; width=&#34;480&#34; height=&#34;267&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Executando fib.py e ajuda.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;É como PHPDoc ou Javadoc, mas completamente nativo, e com uma sintaxe muito simples. E tudo o que você precisa para ler a documentação é o próprio Python.&lt;/p&gt;

&lt;h2 id=&#34;3-o-ecossistema-python-é-fantástico&#34;&gt;3. O ecossistema Python é fantástico&lt;/h2&gt;

&lt;p&gt;Começando pela própria linguagem, que vem com uma excelente &lt;a href=&#34;https://docs.python.org/3/library/&#34;&gt;biblioteca padrão&lt;/a&gt;. Essa biblioteca é bastante extensa e possui excelentes módulos, bem documentados e fáceis de usar. Por exemplo, digamos que você queira baixar o código fonte desse artigo e gerar um arquivo GZip com ele, veja como é fácil:&lt;/p&gt;

&lt;pre&gt;import urllib
import gzip
html=urllib.urlopen(&#39;http://tableless.com.br/por-que-python/&#39;).read()
gzfile=gzip.open(&#39;por-que-python.html.gz&#39;,&#39;w&#39;)
gzfile.write(html)&lt;/pre&gt;

&lt;p&gt;Usamos os módulos urllib e gzip. Entre os recursos fornecidos pelos módulos que já vem com o Python, posso citar o controle de threads e processamento paralelo, a criação de webservices, bibliotecas para sockets, http, ftp, e-mail, a leitura e escrita de XML, JSON, CSV, o acesso a recursos do sistema operacional, matemática e estatística, criptografia, manipulação de arquivos de áudio, testes automatizados, etc.&lt;/p&gt;

&lt;p&gt;Como é fácil escrever código bom e bem documentado, a comunidade Python tem feito um excelente em fornecer módulos para praticamente tudo o que você precisar fazer. Você pode encontrar, no &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;Python Package Index&lt;/a&gt;, milhares de módulos prontos para coisas como ler e escrever arquivos Excel, trabalhar com imagens, acessar bancos de dados os mais diversos, trabalhar com automação residencial, enviar SMS, integrar seu software ao Gmail, falar com serviços de VoIP, conectar-se a redes sociais, criar um servidor de e-mails, desenvolver jogos 3D, e uma infinidade de outros recursos.&lt;/p&gt;

&lt;h3 id=&#34;e-tem-mais-8230&#34;&gt;E tem mais&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Se você não programa em Python, espero tê-lo deixado pelo menos um pouquinho curioso. No próximo artigo, vamos falar um pouco mais da linguagem, mostrando algumas características da sintaxe e dos tipos de dados que a tornam tão interessante. Até lá, fique à vontade nos comentários. Sugestões, dúvidas, críticas e opiniões são muito bem vindas e vão me ajudar a preparar os próximos artigos.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Estruturação de front-end – Parte 2: Designers e Programadores</title>
      <link>http://tableless.com.br/estruturacao-de-client-side-designers-e-programadores-parte-2/</link>
      <pubDate>Mon, 14 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/estruturacao-de-client-side-designers-e-programadores-parte-2/</guid>
      <description>

&lt;p&gt;Se dividirmos as áreas de desenvolvimento, chegaremos a 3 grandes grupos, totalmente distintos que são: designers, programadores e nós, front-end.&lt;/p&gt;

&lt;p&gt;Nós estamos no meio dos dois grupos. Nós nos relacionamos diretamente com os dois profissionais, fazendo uma ponte e tentando adequar as necessidades de cada um durante o projeto. E é aí que entra o problema.&lt;/p&gt;

&lt;p&gt;Os dois mundos são totalmente diferentes. O designer se preocupa em deixar o sistema lindo, maravilhoso, fácil de usar, vendável e etc. O programador faz com que tudo funcione. O cliente tem que conseguir comprar quando clicar no botão. Nosso trabalho é fazer com que a beleza não estrague a funcionalidade. É fazer com que as necessidades do programador não entrem em conflito com as necessidades do designer. Nesse meio entra o seu trabalho. Sua obrigação é deixar o site acessível, com código de fácil indexação e escalonável ao mesmo tempo que você deixa o layout do designer fiel ao original do Photoshop.&lt;/p&gt;

&lt;h3 id=&#34;necessidades-dos-designers&#34;&gt;Necessidades dos Designers&lt;/h3&gt;

&lt;p&gt;Os designers precisam de liberdade para criar. Isso sempre foi muito difícil na web e por isso o Flash ganhou tanta atenção. Se antes só podíamos fazer coisas básicas utilizando CSS, o Flash dava ao designer acesso a um mundo de possibilidades. Atualmente isso mudou muito graças ao Santo protetor dos desenvolvedores front-end.&lt;/p&gt;

&lt;p&gt;Com a vinda das features do CSS3, boa parte das funcionalidades que antes tínhamos que fazer gambiarras com imagens, hoje podemos fazer com apenas uma propriedade. Quem nunca passou horas recortando imagens de bordas arredondadas, sombrinhas e degrades? Hoje resolvemos tudo diretamente pelo CSS, que roda mais rápido e é muito mais flexível.&lt;/p&gt;

&lt;p&gt;A ideia é transportar fielmente a arte que o designer criou no editor gráfico, para código HTML/CSS. Nesse momento você precisa se preocupar com duas coisas: fidelidade de layout e semântica de código.&lt;/p&gt;

&lt;p&gt;O código HTML irá refletir os elementos do layout, traduzindo a informação visual, para informação em código semântico de forma que os dispositivos, robôs de busca, scripts e afins acessem esse código e executem suas tarefas. O Google precisa saber o que é um link e um botão. Mesmo que eles tenham o mesmo design. O leitor de tela precisa entender o que é um título e um parágrafo. Isso tudo aliado com os detalhes visuais que o designer desenhou, como sombras, degrades, transparências, bordar arredondadas e etc.&lt;/p&gt;

&lt;p&gt;Esse processo inicia a fase de código do projeto. Estamos criando uma estrutura que vai perdurar o projeto inteiro. Os programadores, posteriormente, irão produzir o sistema em cima deste código. Por isso é muito importante que sua base seja bem estruturada mas ao mesmo tempo super flexível para mantermos o layout da maneira correta.&lt;/p&gt;

&lt;h3 id=&#34;necessidades-dos-programadores&#34;&gt;Necessidades dos Programadores&lt;/h3&gt;

&lt;p&gt;Os programadores precisam automatizar coisas. O projeto precisa que as tarefas sejam automatizadas para que o projeto funcione de forma escalonável e sem a necessidade de replicação de código desnecessariamente. Essas tarefas vão desde a criação de formulários até comunicação com o servidor.&lt;/p&gt;

&lt;p&gt;O problema é que a maioria das vezes essas tarefas automatizadas não são criadas pelos programadores da equipe. São plugins, scripts e etc que foram criados pela comunidade. Não estou dizendo aqui que isso é ruim, por favor. Na verdade, é o certo. Não tem sentido recriarmos algo que já existe e que funciona muito bem. Esses plugins, scripts e etc foram criados por outros programadores que um dia tiveram a mesma necessidade que os programadores do seu projeto e por isso, nada mais sensato do que criar um plugin para ajudar outros devs com a mesma necessidade. Acontece que programadores, são programadores. Eles não tratam o HTML com o mesmo carinho que nós.&lt;/p&gt;

&lt;p&gt;Vamos pegar um exemplo de formulários. Os programadores aqui onde trabalho programam em RUBY, utilizando Rails. Há uma GEM que cria e gerencia formulários no projeto. O código que esta GEM gera por default não é legal e o pior, é totalmente diferente do código que você usaria ou usou no projeto &amp;#8211; Por isso é interessante entender quais ferramentas os programadores utilizarão antes de iniciarmos nosso código HTML. Assim podemos adaptar o que for preciso para códigos que fujam do seu padrão pessoal.&lt;/p&gt;

&lt;p&gt;Você não pode obrigar os programadores a fazerem tudo na mão. Se você conseguir, ótimo. Essa é sempre a minha primeira opção&amp;#8230; Mas caso isso seja impossível, sugiro que sente e tente entender o maldito plugin. Converse com o programador e tente mostrar as desvantagens para o projeto caso continuem a utilizar o código default. Veja se não há a possibilidade de modificar esse código. Na maioria das vezes há. Caso não dê, estude a possibilidade de trocarem para um plugin que dê.&lt;/p&gt;

&lt;p&gt;Existem frameworks &amp;#8211; como o Web2Py &amp;#8211; que ainda utilizam tabelas para exibir formulários. Chorei sangue quando eu vi pela primeira vez e chorei mais ainda ao descobrir que não é algo muito fácil customizar esses código para que ele entregasse o HTML que eu queria. Paciência.&lt;/p&gt;

&lt;h3 id=&#34;sincronizando-as-necessidades&#34;&gt;Sincronizando as necessidades&lt;/h3&gt;

&lt;p&gt;O encontro de dois mundos gera o problema. Sincronizar as necessidades visuais dos designers com as necessidades de código dos programadores é algo que geralmente deixa traumas em qualquer dev front-end.&lt;/p&gt;

&lt;p&gt;O programador precisa usar ferramentas que os ajudam a executar tarefas complexas, mas que adulteram demais o código. O designer precisa que seu layout seja fielmente seguido, ou seja, todas as firulas visuais como sombras, degrades, bordas, backgrounds e etc permaneçam intactas. Como você pode manter o padrão de qualidade se o código manipulado não é o seu, mas o do plugin? É aqui que os front-ends maricas pedem arrego.&lt;/p&gt;

&lt;p&gt;Cada efeito visual, cada estrutura, cada necessidade de layout determinam com que o HTML será escrito. Se o HTML é criado automaticamente por um plugin ou algo parecido, como você faz? Entende a questão?&lt;/p&gt;

&lt;p&gt;Você até faz o layout ficar igual ao planejado, mas e a semântica? O design, a funcionalidade e a semântica precisam coexistir. Essa é a essência da responsabilidade do profissional client-side.&lt;/p&gt;

&lt;p&gt;Não há mágica que faça isso tudo acontecer. Você precisa sentar e conversar. Eu costumo chamar o designer e o programador e explicar minhas limitações. Eles entendem e cada um abre mão de algo que pode me ajudar. O designer tira aquele efeito visual desnecessário e o programador tenta colocar aquela classe importante e retirar um ou outro código automático. A opção de conversar com os dois é melhor do que você criar uma solução com Javascript. Para retirar ou inserir as tags ou classes que você precisa. O código fica mais feio e seu site perde performance. Sem contar que para resolver suas pendências manipulando o DOM com Javascript, é pior para o Google, para os leitores de telas e para os robôs em geral.&lt;/p&gt;

&lt;h3 id=&#34;padronizando-tudo&#34;&gt;Padronizando tudo&lt;/h3&gt;

&lt;p&gt;Uma outra solução que eu cheguei é mais complicada, mas sem dúvida a mais duradoura. Começamos a criar dentro da empresa uma biblioteca que une código HTML/CSS semântico com o visual predefinido dos designers e que contemple as necessidades de funcionalidades dos programadores.&lt;/p&gt;

&lt;p&gt;Assim, começamos a criar uma &lt;strong&gt;cultura&lt;/strong&gt; de padronização de código que vai perdurar por várias gerações de serviços e acima de tudo, não quebra a linearidade dos produtos em si. Manteremos a uniformidade de código com a a uniformidade de identidade visual dos sistemas. Não estamos engessando a criação, pelo contrário, estamos criando uma base sólida que poderá ser reutilizada em toda a empresa, em larga escala e independente.&lt;/p&gt;

&lt;p&gt;Veja a primeira parte deste artigo: &lt;a href=&#34;http://tableless.com.br/estruturacao-de-client-side-preprocessadores-framewoks-e-bibliotecas-parte-1/&#34; title=&#34;Estruturação de Client-side – Parte 1: Préprocessadores, Framewoks e Bibliotecas&#34;&gt;Préprocessadores, Framewoks e Bibliotecas&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>O dev front-end – Podcast #1</title>
      <link>http://tableless.com.br/o-dev-front-end-podcast-1/</link>
      <pubDate>Sun, 06 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/o-dev-front-end-podcast-1/</guid>
      <description>&lt;p&gt;Estamos relançando o podcast do Tableless. Este será o primeiro e falamos sobre um assunto que está sendo bastante comentado nos últimos dias.&lt;/p&gt;

&lt;p&gt;Será que o desenvolvedor client-side deveria fazer alguma faculdade? Será que ele precisa aprender a programar? Será que seria interessante ele ser um designer? Será que aprender apenas um framework javascript já é o suficiente?&lt;/p&gt;

&lt;p&gt;Assine o &lt;a href=&#34;http://tableless.com.br/categoria/podcasts/feed&#34;&gt;FEED direto do podcast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Arquivo mp3.&lt;/p&gt;

&lt;p&gt;Link &lt;a href=&#34;http://tableless.com.br/podcast/podcast1-final.mp3&#34;&gt;direto do MP3&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drops 5 – Responsabilidade Dev Front-end</title>
      <link>http://tableless.com.br/drops-5-responsabilidade-dev-front-end/</link>
      <pubDate>Wed, 20 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/drops-5-responsabilidade-dev-front-end/</guid>
      <description>&lt;p&gt;Qual a responsabilidade do desenvolvedor front-end? Ele precisa ser designer? Tem que aprender a programar?&lt;/p&gt;

&lt;!--audio controls&gt; 
&lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/drops5-dev-frontend.ogg&#34; type=&#34;audio/ogg&#34; /&gt;
&lt;source src=&#34;http://tableless.com.br/wp-content/uploads/2011/04/drops5-dev-frontend.mp3&#34; type=&#34;audio/mpeg&#34; /&gt;
 Se preferir faça o download do arquivo em &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/04/drops5-dev-frontend.mp3&#34; title=&#34;Audio MP3&#34;&gt;Mp3&lt;/a&gt; ou &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/04/drops5-dev-frontend.ogg&#34; title=&#34;Audio OGG&#34;&gt;OGA&lt;/a&gt;.
&lt;/audio--&gt;

&lt;p&gt;Veja todos os &lt;a href=&#34;http://soundcloud.com/tableless&#34;&gt;nossos drops no Soundcloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se preferir faça o download do arquivo em &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/04/drops5-dev-frontend.mp3&#34; title=&#34;Audio MP3&#34;&gt;Mp3&lt;/a&gt; ou &lt;a href=&#34;http://tableless.com.br/wp-content/uploads/2011/04/drops5-dev-frontend.ogg&#34; title=&#34;Audio OGG&#34;&gt;OGA&lt;/a&gt;. Ou &lt;a href=&#34;http://itunes.apple.com/us/podcast/tableless-desenvolvimento/id73330789&#34; title=&#34;Drops do Tableless no iTunes.&#34;&gt;inscreva no iTunes&lt;/a&gt;. &lt;a href=&#34;http://tableless.com.br/?feed=podcast&#34; rel=&#34;external&#34;&gt;Feed direto dos Podcasts&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Camadas de desenvolvimento client-side</title>
      <link>http://tableless.com.br/camadas-de-desenvolvimento-client-side/</link>
      <pubDate>Sat, 10 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/camadas-de-desenvolvimento-client-side/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;small&gt;Esse artigo foi publicado originalmente na Revista TIDigital de Abril de 2009.&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A utilização de tabelas no desenvolvimento web foi um marco na história. Pode ser estranho falar isso, mas a verdade é que antes das tabelas os sites eram feios. As tabelas possibilitaram a criação de sites com 3 colunas. Você pode estar pensando que isso não é grande coisa. Mas em meados de 1996-97 isso era nirvana do design para web. As tabelas possibilitaram uma nova realidade para os designers. Foi uma mão na roda naquele tempo. Mas o desenvolvimento com tabelas é algo realmente doloroso. Controlar o layout sem influenciar a programação é um trabalho difícil de se fazer, que encarece o serviço.&lt;/p&gt;

&lt;p&gt;Um dos principais problemas do desenvolvimento com tabelas é a mistura das camadas. Nós não conseguimos dividir o desenvolvimento em camadas. As três principais camadas, que você já deve conhecer são: informação, formatação e comportamento.  O HTML é responsável pela camada de informação. É ele que vai definir importâncias e significado para toda a informação que consta no site. Essa camada é especialmente importante. Os buscadores e os leitores de tela dependem de um HTML bem escrito e semântico para que funcionem plenamente.&lt;/p&gt;

&lt;p&gt;O CSS é responsável pela camada de formatação. É ele que vai controlar todo o visual e estruturação do site.&lt;/p&gt;

&lt;p&gt;O Javascript e o Ajax controlarão a terceira camada que define qual será o comportamento dos elementos manipulando o código CSS.&lt;/p&gt;

&lt;p&gt;A divisão por camadas é a alma do novo desenvolvimento para web. Pouquíssimas pessoas sabem das influências que ela pode trazer, não apenas no código do site, mas também em toda a organização da equipe em empresas. Hoje há especialistas em HTML e CSS, coisa que nunca imaginaríamos no começo da web. Empresas fazem questão de treinar em HTML e CSS, profissionais das suas equipes, que cuidam de Arquitetura de Informação e Usabilidade, mesmo que eles não trabalhem diretamente com o código client-side. Isso faz com que toda a equipe se transforme e saiba das possibilidades e limitações dos projetos.&lt;/p&gt;

&lt;p&gt;Durante muito tempo agências web achavam que o desenvolvedor deveria ser uma espécie de canivete suiço. Lembro-me que haviam empresas que procuravam designers que soubessem duas ou três linguagens server-side e programadores que entendessem bem de photoshop, fireworks e illustrator. Pague o salário de um e leve dois. Contudo, também haviam profissionais que achavam que ele deveria ter exatamente este perfil. Talvez por pressão do mercado ou até mesmo porque ninguém entendia direito esse negócio de web.&lt;/p&gt;

&lt;p&gt;Quando comecei a ministrar cursos e palestras em empresas sobre este assunto, eu me assustava com a falta de conhecimento e interesse dos profissionais. Eles estavam desenvolvendo a anos utilizando tabelas para a estruturação, sem separar as camadas e fazendo todo o processo de desenvolvimento linearmente. Então chega alguém e diz para eles que está tudo errado e eles precisam reaprender. Eu também ficaria assustado com isso. Outro ponto ruim era o preconceito com novas idéias. Eu já cheguei a perder uma oportunidade em uma empresa de web porque eu não desenvolvia para Netscape 4 e não fazia sites utilizando o Dreamweaver. O mercado tinha um cenário muito diferente do que temos hoje.&lt;/p&gt;

&lt;p&gt;Os novos desenvolvedores nasceram sabendo que estruturação de sites se faz com divs e CSS. E que tabelas servem para exibir dados tabulares. Eles nem imaginam que antes nós quebrávamos nossas cabeças para criar sites arrasadores com uma infinidade de tables, tds, trs, tags fonts e centers. Melhor para eles. Melhor para o mercado.&lt;/p&gt;

&lt;p&gt;Dar atenção a um código XHTML bem escrito, com uma bela formatação CSS, significa que o site poderá ser bem acessado por um público ampliado. É abrir portas para deficientes e usuários de diversos dispositivos. É melhorar a indexação em buscadores e facilitar o desenvolvimento de novas versões. É fazer com que a equipe trabalhe independentemente. Isso aumenta as vendas e as possibilidades de novos negócios, idéias, entre outras possibilidades.&lt;/p&gt;

&lt;p&gt;Estou feliz porque os browsers também mudaram sua maneira de olhar as coisas. O pessoal que desenvolve o Internet Explorer está com a mente aberta para novidades. A Guerra dos Browsers ainda não acabou, e provavelmente está longe de acabar. Acontece que a Guerra de hoje é mais saudável. Todos ganham. Principalmene usuário final e desenvolvedores. Os fabricantes de browsers descobriram que há caminhos mais inteligentes de conquistar os usuários.&lt;/p&gt;

&lt;p&gt;Não sei se estou conseguindo fazer-me entender. Mas quero que você olhe com outros olhos o código HTML, CSS, Javascript, Microformats e qualquer outra linguagem que trabalhe no cliente.&lt;/p&gt;

&lt;p&gt;Os padrões web não estariam tão em foco hoje se essa importância não fosse tão explicita.&lt;/p&gt;

&lt;p&gt;O que me empolga mais é que daqui pra frente o mercado de desenvolvimento para web tende a ficar mais interessante. Idéias de novos meios de acessar a web estão surgindo todos os dias. Não demorará muito para acessarmos a internet de outros dispositivos que não sejam smartphones e desktops. A internet está se tornando realmente popular agora. Mais empresas descobriram que a internet é algo que pode trazer lucro e abrir novas oportunidades. Uma pena que elas tenham aberto os olhos apenas em tempos de crise. Mas isso é uma outra história.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Este artigo foi originalmente publicado na Revista TIDigital do Mês de Abril de 2009&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seletores Complexos do CSS</title>
      <link>http://tableless.com.br/seletores-complexos-do-css/</link>
      <pubDate>Wed, 11 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/seletores-complexos-do-css/</guid>
      <description>&lt;p&gt;Os seletores complexos foram feitos para suprir necessidades muito específicas do layout. Por exemplo: Imagine uma página de cadastro, essa página há um formulário enorme, com campos de todos os tipos: radio, checkbox, text, submit etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;Um HTML de exemplo:&lt;/p&gt;

&lt;pre class=&#34;lang-html&#34;&gt;&amp;lt;form action=&#34;&#34;&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;label&amp;gt;Nome: &amp;lt;input type=&#34;text&#34; class=&#34;input-text&#34; /&amp;gt;&amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;&amp;lt;input type=&#34;checkbox&#34; class=&#34;input-checkbox&#34; /&amp;gt; Desejo receber newsletters&amp;lt;/label&amp;gt;
    &amp;lt;/fieldset&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Agora imagine que você tenha a necessidade de definir a largura somente dos campos de texto, você não poderá colocar a linha como a de baixo:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;input {
    width: 200px;
}
&lt;/pre&gt;

&lt;p&gt;Se você utilizar a linha acima, você selecionará todos os &lt;strong&gt;input&lt;/strong&gt;, inclusive os de tipo &lt;strong&gt;checkbox&lt;/strong&gt;, &lt;strong&gt;radio&lt;/strong&gt;, &lt;strong&gt;submit&lt;/strong&gt;, etc&amp;#8230; Você gostaria apenas que os inputs de texto, ficassem com o estilo indicado. A saída mais &amp;#8220;inteligente&amp;#8221; até hoje é usando Javascript para encontrar esses elementos, para então atribuirmos uma classe para eles e depois formatarmos essa classe via CSS. Não é uma boa maneira. É aqui que entram os &lt;strong&gt;seletores complexos&lt;/strong&gt;. Veja um exemplo abaixo de como resolveríamos o problema acima via CSS:&lt;/p&gt;

&lt;pre class=&#34;lang-css&#34;&gt;input[type=&#34;text&#34;] {
    width: 200px;
}
&lt;/pre&gt;

&lt;p&gt;Este seletor significa que você encontrará os &lt;strong&gt;inputs&lt;/strong&gt; que contenham o atributo &lt;strong&gt;type&lt;/strong&gt; cujo valor seja exatamente &lt;strong&gt;text&lt;/strong&gt;. Aqui vão alguns outros exemplos de como os seletores podem ser úteis no dia a dia:&lt;/p&gt;

&lt;table summary=&#34;lista de seletores complexos&#34;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Seletor
    &lt;/th&gt;
    
    &lt;th&gt;
      Descrição
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      input[type=&amp;#8221;text&amp;#8221;]
    &lt;/td&gt;
    
    &lt;td&gt;
      Seleciona o elemento INPUT com o atributo TYPE cujo valor seja exatamente o valor TEXT
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      a[title]
    &lt;/td&gt;
    
    &lt;td&gt;
      Seleciona o elemento &lt;strong&gt;a&lt;/strong&gt; que contenha o atributo &lt;strong&gt;type&lt;/strong&gt;não importando o valor.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      a[href$=html]
    &lt;/td&gt;
    
    &lt;td&gt;
      Seleciona elementos com atributos cujo seu valor temine com&amp;#8230; Por exemplo, você poderia querer selecionar todos os links que apotam para um arquivo .pdf, ou .php etc.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      a[href^=&amp;#8221;http://tableless.com.br/&amp;#8221;]
    &lt;/td&gt;
    
    &lt;td&gt;
      Seleciona elementos com o atributos que comecem com&amp;#8230; Você pode querer selecionar apenas os links que apontem para um site específico, por exemplo.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      a[title~=&amp;#8221;tableless&amp;#8221;]
    &lt;/td&gt;
    
    &lt;td&gt;
      Seleciona os elementos cujo o atributo tenha um valor que seja separado por espaços. No exemplo acima ele seleciona um link que contenha o atributo title e que em seu valor tenha a palavra &amp;#8220;tableless&amp;#8221; no meio.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      a[hreflang|=&amp;#8221;pt&amp;#8221;]
    &lt;/td&gt;
    
    &lt;td&gt;
      Seleciona o elemento &lt;strong&gt;a&lt;/strong&gt; cujo o valor do atributo &lt;strong&gt;hreflang&lt;/strong&gt; comece com PT. Ou seja valores como &amp;#8220;pt-br&amp;#8221; serão encontrados.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      a[href=&amp;#8221;http://tableless.com.br/&amp;#8221;]
    &lt;/td&gt;
    
    &lt;td&gt;
      Seleciona o elemento &lt;strong&gt;a&lt;/strong&gt; cujo o valor do atributo &lt;strong&gt;href&lt;/strong&gt; seja exatamente &lt;b&gt;http://tableless.com.br/&lt;/b&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      a[title*=&amp;#8221;artigo&amp;#8221;]
    &lt;/td&gt;
    
    &lt;td&gt;
      Seleciona os elementos &lt;strong&gt;a&lt;/strong&gt; cujo o valor tenha pelo menos uma ocorrência com a palavra &amp;#8220;artigo&amp;#8221;.
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      input:checked
    &lt;/td&gt;
    
    &lt;td&gt;
      Um radio button ou um checkbox que esteja marcado
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Há uma &lt;a href=&#34;http://www.w3.org/TR/css3-selectors/#selectors&#34; title=&#34;Link externo: Lista de seletores do W3C&#34;&gt;lista inteira de seletores aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seletores Agrupados e Encadeados</title>
      <link>http://tableless.com.br/seletores-agrupados-e-encadeados/</link>
      <pubDate>Mon, 09 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/seletores-agrupados-e-encadeados/</guid>
      <description>&lt;p&gt;O CSS é responsável por formatar e manipular toda informação exibida pelo HTML, de forma que o layout fique fiel ao que o designer desenhou. Essa é a explicação básica e resumida sobre a função do CSS.&lt;/p&gt;

&lt;p&gt;A idéia principal é não misturar o código de Formatação com a Informação do site. Elas devem ser independentes, para que as modificações em cada uma não influeciem o funcionamento da outra. Para isso, você precisa conseguir selecionar qualquer elemento do HTML pelo CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aviso: Este primeiro post terá como objetivo contextualizar o assunto. Faremos uma série de artigos sobre seletores, e é importante entendermos como eles funcionam.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O &amp;#8220;seletor&amp;#8221; é o responsável por essa função de selecionar o elemento, a estrutura da sintaxe é exatamente essa:&lt;/p&gt;

&lt;pre lang=&#34;CSS&#34; line=&#34;1&#34;&gt;seletor {
   propriedade: valor;
}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Propriedade e valor&lt;/strong&gt; são as características que você gostaria de modificar no elemento.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Seletor&lt;/strong&gt; é o elemento que você irá selecionar no código HTML.&lt;/p&gt;

&lt;p&gt;Nesta série de artigos, iremos mostrar como os seletores funcionam e seus tipos. Começaremos desde o básico até o manipulação de filhos e seletores complexos.&lt;/p&gt;

&lt;p&gt;Aviso aos navegantes: Farei essa série nivelando as possibilidades por cima. Ou seja, ignorarei solenemente browsers antigos ou que não suportam algumas possibilidades.&lt;/p&gt;

&lt;h3 id=&#34;seletores-agrupados&#34;&gt;Seletores Agrupados&lt;/h3&gt;

&lt;p&gt;Quando você deseja fazer com que vários elementos tenham as mesmas características, você irá agrupá-los em um mesmo seletor. A separação dos elementos é feita por vírgulas. Veja um exemplo:&lt;/p&gt;

&lt;pre lang=&#34;CSS&#34; line=&#34;1&#34;&gt;strong, em, span {
 color: red;
}
&lt;/pre&gt;

&lt;p&gt;Os elementos STRONG, EM e SPAN terão a mesma cor.&lt;/p&gt;

&lt;h3 id=&#34;seletores-encadeados&#34;&gt;Seletores Encadeados&lt;/h3&gt;

&lt;p&gt;O CSS trabalha com especificidade. Suponhamos que você queira que o EM tenha cor de letra vermelha, você irá fazer assim:&lt;/p&gt;

&lt;pre lang=&#34;CSS&#34; line=&#34;1&#34;&gt;em {
 color: red;
}
&lt;/pre&gt;

&lt;p&gt;Mas você tem uma série de EMs na página, e talvez você queira que apenas o EM que está dentro de STRONG fique com a cor vermelha. Você terá que especificar isso no seu seletor:&lt;/p&gt;

&lt;pre lang=&#34;CSS&#34; line=&#34;1&#34;&gt;strong em {
 color: red;
}
&lt;/pre&gt;

&lt;p&gt;No seletor acima estou dizendo que o EM que está dentro do STRONG terá cor vermelha. Lê-se da direita para esquerda, por que é a ordem do HTML. O código HTML seria mais ou menos assim:&lt;/p&gt;

&lt;pre lang=&#34;html&#34; line=&#34;1&#34;&gt;&lt;p&gt;
  A idéia do Tableless é sem dúvida &lt;strong&gt;melhorar o &lt;em&gt;nosso mercado&lt;/em&gt;&lt;/strong&gt;. 
  
&lt;/p&gt;
&lt;/pre&gt;

&lt;p&gt;Um seletor encadeado um pouco mais longo:&lt;/p&gt;

&lt;pre lang=&#34;CSS&#34; line=&#34;1&#34;&gt;.content .post-text p strong em {
 color: red;
}
&lt;/pre&gt;

&lt;p&gt;O HTML deste seletor seria este:&lt;/p&gt;

&lt;pre lang=&#34;html&#34; line=&#34;1&#34;&gt;&lt;div class=&#34;content&#34;&gt;
  &lt;div class=&#34;post-text&#34;&gt;
    &lt;p&gt;
      A idéia do Tableless é sem dúvida &lt;strong&gt;melhorar o &lt;em&gt;nosso mercado&lt;/em&gt;&lt;/strong&gt;. 
            
    &lt;/p&gt;
        
  &lt;/div&gt;
  
&lt;/div&gt;
&lt;/pre&gt;

&lt;p&gt;Juntando os &lt;strong&gt;seletores agrupados&lt;/strong&gt; e o &lt;strong&gt;seletores encadeados&lt;/strong&gt;, ficaria mais ou menos assim:&lt;/p&gt;

&lt;pre lang=&#34;CSS&#34; line=&#34;1&#34;&gt;.content .post-text p strong em, .content .post-text p strong a {
 color: red;
}
&lt;/pre&gt;

&lt;p&gt;Note que a vírgula separa os elementos. Logo após da vírgula é iniciado um novo seletor para modificar um outro elemento no HTML.&lt;/p&gt;

&lt;p&gt;Se você quer acompanhar essa pequena campanha, veja no Twitter o que nós podemos fazer sem o IE6. Siga o hash &lt;a href=&#34;http://search.twitter.com/search?q=%23semie6&#34;&gt;#semie6&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Client-side e sua importância</title>
      <link>http://tableless.com.br/client-side-e-sua-importancia/</link>
      <pubDate>Wed, 21 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>http://tableless.com.br/client-side-e-sua-importancia/</guid>
      <description>&lt;p&gt;Não é de hoje que o mercado de desenvolvimento web subestima a importância de algumas áreas como acessibilidade, usabilidade, arquitetura de informação, etc. Normal em uma área que tem um mercado tão complexo e que não pára de crescer.&lt;/p&gt;

&lt;p&gt;Mas nenhum desses braços sofreu mais que o desenovolvimento client-side.&lt;/p&gt;

&lt;p&gt;Talvez eu possa estar enganado, mas desde sempre a programação client-side foi subestimada e simplesmente esquecida por equipes e empresas inteiras. Não se dava a devida atenção ao escrever código html, css ou javascript.&lt;/p&gt;

&lt;p&gt;Já vi muitos profissionais que se sentiam “de segunda linha”, por conta de programadores server-side que se julgavam o bloco mais importante do mercado. E toda essa atenção excessiva e sem explicação, escondia toda a necessidade que precisávamos dar para a programação client-side. Um dos nossos grandes erros.&lt;/p&gt;

&lt;p&gt;A programação client-side é centenas de vezes mais simples que a server-side, mas não menos importante. É o client-side que serve o visitante. Um código client-side mal formado, agrega problemas na navegação do usuário. Gera problemas na acessibilidade de deficientes e claro, prejudica a indexação de buscadores. Um código client-side mal formado, pode acabar com as vendas de um e-commerce.&lt;/p&gt;

&lt;p&gt;É natural sempre querermos saber qual parte é mais importante que outra. Isso em qualquer ramo de atividade. Mas nesse caso, as duas partes, client e server, são igualmente importantes, mesmo cada uma exercendo papéis totalmente diferentes no desenvolvimento web.&lt;/p&gt;

&lt;p&gt;Dar atenção a um código XHTML bem escrito, com uma bela formatação CSS, significa que o site poderá ser bem acessado por um público ampliado. É abrir portas para deficientes e usuários de diversos dispositivos. É melhorar a indexação em buscadores e facilitar o desenvolvimento de novas versões. É fazer com que a equipe trabalhe independentemente. Isso aumenta as vendas e as possibilidades de novos negócios, idéias, entre outras possibilidades.&lt;/p&gt;

&lt;p&gt;Isso tudo pode parecer bobagem para o desenvolvedor que não anda atento da importância que a web tem hoje no mundo.&lt;/p&gt;

&lt;p&gt;Não sei se estou conseguindo fazer-me entender. Mas quero que você olhe com outros olhos o código HTML, CSS, Javascript, Microformats e qualquer outra linguagem que trabalhe no cliente.&lt;/p&gt;

&lt;p&gt;Os padrões web não estariam tão em foco hoje se essa importância não fosse tão explicita.&lt;/p&gt;

&lt;p&gt;O HTML 5 é um assunto muito interessante para qualquer desenvolvedor web. Ele está sendo feito devagar e com paciência. Existem uma série de problemas que ainda precisam ser resolvidos, tanto de compatibilidade quanto de nomenclatura e estruturação. Mas o ponto mais importante é a semântica dos elementos.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>